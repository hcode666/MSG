["import sys\nfrom sys import stdin\nimport math\n\ndef inverse(a, mod):\n    return pow(a, mod - 2, mod)\n\ndef popcnt(x):\n    ret = 0\n    while x > 0:\n        ret += x % 2\n        x //= 2\n    return ret\nTT = int(stdin.readline())\nANS = []\nfor loop in range(TT):\n    (N, M, mod) = map(int, stdin.readline().split())\n    S = list(map(int, stdin.readline().split()))\n    flag = True\n    if S[0] != 1:\n        flag = False\n    for i in range(M - 1):\n        if S[i + 1] % S[i] != 0:\n            flag = False\n    if not flag:\n        ANS.append('0')\n        continue\n    ans = inverse(N, mod)\n    S.reverse()\n    for i in range(M - 1):\n        l = S[i]\n        r = S[i + 1]\n        notl = N - N // l\n        diff = l // r\n        ymax = N // r\n        s = set()\n        ty = diff\n        for j in range(2, int(diff ** 0.5) + 10):\n            if ty % j == 0:\n                s.add(j)\n                while ty % j == 0:\n                    ty //= j\n        if ty != 1:\n            s.add(ty)\n        s = list(s)\n        s.sort()\n        nans = 0\n        for bi in range(2 ** len(s)):\n            npopc = popcnt(bi)\n            nmul = 1\n            for j in range(len(s)):\n                if 2 ** j & bi > 0:\n                    nmul *= s[j]\n            nddd = ymax // nmul\n            if npopc % 2 == 0:\n                nans += nddd\n            else:\n                nans -= nddd\n        ans *= nans\n        ans *= inverse(notl, mod)\n        ans %= mod\n    ANS.append(str(ans % mod))\nprint('\\n'.join(ANS))", "import sys\nfrom sys import stdin\nimport math\n\ndef inverse(a, mod):\n    return pow(a, mod - 2, mod)\n\ndef popcnt(x):\n    ret = 0\n    while x > 0:\n        ret += x % 2\n        x //= 2\n    return ret\nTT = int(stdin.readline())\nANS = []\nfor loop in range(TT):\n    (N, M, mod) = map(int, stdin.readline().split())\n    S = list(map(int, stdin.readline().split()))\n    flag = True\n    if S[0] != 1:\n        flag = False\n    for i in range(M - 1):\n        if S[i + 1] % S[i] != 0:\n            flag = False\n    if not flag:\n        ANS.append('0')\n        continue\n    ans = inverse(N, mod)\n    S.reverse()\n    for i in range(M - 1):\n        l = S[i]\n        r = S[i + 1]\n        notl = N - N // l\n        diff = l // r\n        ymax = N // r\n        s = set()\n        ty = diff\n        for j in range(2, int(diff ** 0.5) + 10):\n            if ty % j == 0:\n                s.add(j)\n                while ty % j == 0:\n                    ty //= j\n        if ty != 1:\n            s.add(ty)\n        s = list(s)\n        s.sort()\n        nans = 0\n        for bi in range(2 ** len(s)):\n            npopc = popcnt(bi)\n            nmul = 1\n            for j in range(len(s)):\n                if 2 ** j & bi > 0:\n                    nmul *= s[j]\n            nddd = ymax // nmul\n            if npopc % 2 == 0:\n                nans += nddd\n            else:\n                nans -= nddd\n        ans *= nans\n        ans *= inverse(notl, mod)\n        ans %= mod\n    ANS.append(str(ans % mod))\nprint('\\n'.join(ANS))", "import sys\nfrom sys import stdin\nimport math\n\ndef inverse(a, mod):\n    return pow(a, mod - 2, mod)\n\ndef popcnt(x):\n    ret = 0\n    while x > 0:\n        ret += x % 2\n        x //= 2\n    return ret\nTT = int(stdin.readline())\nANS = []\nfor loop in range(TT):\n    (N, M, mod) = map(int, stdin.readline().split())\n    S = list(map(int, stdin.readline().split()))\n    flag = True\n    if S[0] != 1:\n        flag = False\n    for i in range(M - 1):\n        if S[i + 1] % S[i] != 0:\n            flag = False\n    if not flag:\n        ANS.append('0')\n        continue\n    ans = inverse(N, mod)\n    S.reverse()\n    for i in range(M - 1):\n        l = S[i]\n        r = S[i + 1]\n        notl = N - N // l\n        diff = l // r\n        ymax = N // r\n        s = set()\n        ty = diff\n        for j in range(2, int(diff ** 0.5) + 10):\n            if ty % j == 0:\n                s.add(j)\n                while ty % j == 0:\n                    ty //= j\n        if ty != 1:\n            s.add(ty)\n        s = list(s)\n        s.sort()\n        nans = 0\n        for bi in range(2 ** len(s)):\n            npopc = popcnt(bi)\n            nmul = 1\n            for j in range(len(s)):\n                if 2 ** j & bi > 0:\n                    nmul *= s[j]\n            nddd = ymax // nmul\n            if npopc % 2 == 0:\n                nans += nddd\n            else:\n                nans -= nddd\n        ans *= nans\n        ans *= inverse(notl, mod)\n        ans %= mod\n    ANS.append(str(ans % mod))\nprint('\\n'.join(ANS))"]