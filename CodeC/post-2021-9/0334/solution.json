["temp = list(map(int, input().split()))\nM = 1000000007\nn = temp[0]\nm = temp[1]\narraY = list(map(int, input().split()))\nfor h in range(m):\n    temp1 = list(map(int, input().split()))\n    countsdd = temp1[0]\n    x = temp1[1]\n    undervalo = list(map(int, input().split()))\n    temp = arraY[countsdd - 1]\n    arraY[countsdd - 1] = 0\n    for i in range(0, len(undervalo) - 1, 2):\n        arraY[undervalo[i + 1] - 1] = (arraY[undervalo[i + 1] - 1] + temp * undervalo[i]) % M\nfor k in arraY:\n    print(k)", "temp = list(map(int, input().split()))\nM = 1000000007\nn = temp[0]\nm = temp[1]\narraY = list(map(int, input().split()))\nfor h in range(m):\n    temp1 = list(map(int, input().split()))\n    countsdd = temp1[0]\n    x = temp1[1]\n    undervalo = list(map(int, input().split()))\n    temp = arraY[countsdd - 1]\n    arraY[countsdd - 1] = 0\n    for i in range(0, len(undervalo) - 1, 2):\n        arraY[undervalo[i + 1] - 1] = (arraY[undervalo[i + 1] - 1] + temp * undervalo[i]) % M\nfor k in arraY:\n    print(k)", "temp = list(map(int, input().split()))\nM = 1000000007\nn = temp[0]\nm = temp[1]\narraY = list(map(int, input().split()))\nfor h in range(m):\n    temp1 = list(map(int, input().split()))\n    countsdd = temp1[0]\n    x = temp1[1]\n    undervalo = list(map(int, input().split()))\n    temp = arraY[countsdd - 1]\n    arraY[countsdd - 1] = 0\n    for i in range(0, len(undervalo) - 1, 2):\n        arraY[undervalo[i + 1] - 1] = (arraY[undervalo[i + 1] - 1] + temp * undervalo[i]) % M\nfor k in arraY:\n    print(k)", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nfor j in range(m):\n    (b, c) = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    dec = a[b - 1]\n    a[b - 1] = 0\n    k = 0\n    while k < len(d):\n        val = d[k] * dec % 1000000007\n        a[d[k + 1] - 1] = (a[d[k + 1] - 1] + val) % 1000000007\n        k += 2\nfor i in a:\n    print(i)", "mod = 10 ** 9 + 7\n(n, m) = map(int, input().split())\nnqli = list(map(int, input().split()))\nnqli.insert(0, 0)\nfor i in range(m):\n    (c, x) = map(int, input().split())\n    cq = nqli[c]\n    if cq == 0:\n        continue\n    nqli[c] = 0\n    cxli = list(map(int, input().split()))\n    for j in range(0, 2 * x, 2):\n        uni = cxli[j]\n        com = cxli[j + 1]\n        nqli[com] = (cq * uni + nqli[com]) % mod\ndel nqli[0]\nprint(*nqli, sep='\\n')", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nfor i in range(m):\n    (c0, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for j in range(0, 2 * w, 2):\n        l[arr[j + 1] - 1] += arr[j] * l[c0 - 1]\n    l[c0 - 1] = 0\nfor i in l:\n    print(i % 1000000007)", "(n, m) = map(int, input().split())\nq = list(map(int, input().split()))\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        r = q[x - 1] * lst[j] % (10 ** 9 + 7)\n        q[lst[j + 1] - 1] += r\n        q[lst[j + 1] - 1] %= 10 ** 9 + 7\n    q[x - 1] = 0\nfor i in q:\n    print(i)", "(n, m) = map(int, input().split())\nq = list(map(int, input().split()))\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        r = q[x - 1] * lst[j] % (10 ** 9 + 7)\n        q[lst[j + 1] - 1] += r\n        q[lst[j + 1] - 1] %= 10 ** 9 + 7\n    q[x - 1] = 0\nfor i in q:\n    print(i)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "(n, m) = map(int, input().split())\namount = list(map(int, input().split()))\nReaction = []\nfor _ in range(m):\n    (c, x) = map(int, input().split())\n    Decompose = list(map(int, input().split()))\n    Reaction.append(([c, x], Decompose))\n    amount_c = amount[c - 1]\n    amount[c - 1] = 0\n    for i in range(1, len(Decompose), 2):\n        amount[Decompose[i] - 1] += amount_c * Decompose[i - 1]\nfor i in range(len(amount)):\n    print(amount[i] % (10 ** 9 + 7))", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef main():\n    modulo = 1000000007\n    (n, m) = sm()\n    quan = ln()\n    for _ in range(m):\n        (c, x) = sm()\n        equation = ln()\n        for i in range(0, 2 * x, 2):\n            (q, cm) = (equation[i], equation[i + 1])\n            quan[cm - 1] += quan[c - 1] * q\n        quan[c - 1] = 0\n    for i in range(n):\n        print(quan[i] % modulo)\nmain()", "MOD = 10 ** 9 + 7\n(n, m) = map(int, input().split())\narr = [0] + [int(i) for i in input().split()]\nfor _ in range(m):\n    (c, sub) = map(int, input().split())\n    subs = [int(i) for i in input().split()]\n    for i in range(0, len(subs), 2):\n        arr[subs[i + 1]] += arr[c] * subs[i]\n    arr[c] = 0\nfor x in arr[1:]:\n    print(x % MOD)", "(n, m) = list(map(int, input().split()))\nar = list(map(int, input().split()))\nfor _ in range(m):\n    (c, x) = list(map(int, input().split()))\n    c -= 1\n    comp = list(map(int, input().split()))\n    for i in range(2 * x):\n        if i % 2 != 0:\n            ar[comp[i] - 1] += comp[i - 1] * ar[c]\n    ar[c] = 0\nfor i in ar:\n    print(i % (10 ** 9 + 7))", "MOD = 1000 * 1000 * 1000 + 7\n\ndef AddMod(a, b):\n    return (a + b) % MOD\n\ndef MultMod(a, b):\n    return a * b % MOD\n(n, m) = [int(s) for s in input().split(' ')]\nq = [int(s) for s in input().split(' ')]\ndecomposition = list()\nfor _ in range(m):\n    (ci, xi) = [int(s) for s in input().split(' ')]\n    wc = [int(s) for s in input().split(' ')]\n    for j in range(0, len(wc), 2):\n        q[wc[j + 1] - 1] = AddMod(q[wc[j + 1] - 1], MultMod(wc[j], q[ci - 1]))\n    q[ci - 1] = 0\nfor x in q:\n    print(x)", "MOD = 1000 * 1000 * 1000 + 7\n\ndef AddMod(a, b):\n    return (a + b) % MOD\n\ndef MultMod(a, b):\n    return a * b % MOD\n(n, m) = [int(s) for s in input().split(' ')]\nq = [int(s) for s in input().split(' ')]\ndecomposition = list()\nfor _ in range(m):\n    (ci, xi) = [int(s) for s in input().split(' ')]\n    wc = [int(s) for s in input().split(' ')]\n    decomposition.append([ci, wc])\nfor i in range(m):\n    (ci, wc) = decomposition[i]\n    for j in range(0, len(wc), 2):\n        q[wc[j + 1] - 1] = AddMod(q[wc[j + 1] - 1], MultMod(wc[j], q[ci - 1]))\n    q[ci - 1] = 0\nfor x in q:\n    print(x)", "from sys import stdin, stdout\nprime = 10 ** 9 + 7\n(n, m) = map(int, stdin.readline().rstrip().split())\narray = list(map(int, stdin.readline().rstrip().split()))\nt = m\nwhile t > 0:\n    (x, y) = map(int, stdin.readline().rstrip().split())\n    arr = list(map(int, stdin.readline().rstrip().split()))\n    for i in range(1, 2 * y, 2):\n        array[arr[i] - 1] += arr[i - 1] * array[x - 1]\n    array[x - 1] = 0\n    t -= 1\ni = 0\nwhile i < n:\n    print(array[i] % prime)\n    i += 1", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "(n, m) = list(map(int, input().split()))\ninitial_amount = list(map(int, input().split()))\nans = [0] * (n + 1)\nfor i in range(m):\n    add = 0\n    (c, x) = list(map(int, input().split()))\n    amount = list(map(int, input().split()))\n    j = 0\n    val = initial_amount[c - 1]\n    while j < len(amount):\n        initial_amount[amount[j + 1] - 1] += val * amount[j]\n        j += 2\n    initial_amount[c - 1] = 0\nmod = pow(10, 9) + 7\nfor i in initial_amount:\n    print(i % mod)", "ans = 0\n(n_com, n_eq) = list(map(int, input().split()))\nquant = list(map(int, input().split()))\neq = []\nproducts = []\nfor i in range(n_eq):\n    (dec, res) = list(map(int, input().split()))\n    eq.append([dec, res])\n    temp = list(map(int, input().split()))\n    products.append(temp)\nfor i in range(len(eq)):\n    parent = eq[i][0] - 1\n    n = eq[i][1]\n    j = 0\n    if quant[parent] > 0:\n        while j < 2 * n:\n            w = products[i][j]\n            indx = products[i][j + 1] - 1\n            quant[indx] += quant[parent] * w\n            j = j + 2\n        quant[parent] = 0\nfor i in range(n_com):\n    ans = quant[i]\n    print(ans % (pow(10, 9) + 7))", "import copy\nimport math\n(n, m) = map(int, input().split())\ninitial_amt_n = list(map(int, input().split()))\nequations = dict()\nfor i in range(m):\n    (C0, x) = map(int, input().split())\n    splitedin = list(map(int, input().split()))\n    diction = dict()\n    u = 0\n    while u < 2 * x - 1:\n        diction[splitedin[u + 1] - 1] = splitedin[u]\n        u += 2\n    equations[C0 - 1] = diction\njj = list(equations.keys())\njj.sort()\nfor e in jj:\n    comp = e\n    dic = copy.deepcopy(equations[e])\n    if initial_amt_n[comp] != 0:\n        for a in dic:\n            initial_amt_n[a] += dic[a] * initial_amt_n[comp]\n            initial_amt_n[a] %= 1000000007\n        initial_amt_n[comp] = 0\nfor u in initial_amt_n:\n    print(int(u % (math.pow(10, 9) + 7)))", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nfor i in range(m):\n    (c0, w) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for j in range(0, 2 * w, 2):\n        l[arr[j + 1] - 1] += arr[j] * l[c0 - 1]\n    l[c0 - 1] = 0\nfor i in l:\n    print(i % 1000000007)", "ls = list(map(int, input().split()))\nini = list(map(int, input().split()))\nfor _ in range(ls[1]):\n    eqd = list(map(int, input().split()))\n    eq = list(map(int, input().split()))\n    for i in range(eqd[1]):\n        ini[eq[i * 2 + 1] - 1] += eq[i * 2] * ini[eqd[0] - 1]\n    ini[eqd[0] - 1] = 0\nfor x in ini:\n    print(x % (10 ** 9 + 7))", "try:\n    (n, m) = map(int, input().split())\n    li = list(map(int, input().split()))\n    for _ in range(m):\n        (x, y) = map(int, input().split())\n        li1 = list(map(int, input().split()))\n        temp = li[x - 1]\n        li[x - 1] = 0\n        for i in range(0, 2 * y, 2):\n            li[li1[i + 1] - 1] += li1[i] * temp\n    for i in li:\n        print(i % 1000000007)\nexcept:\n    pass", "(n, m) = map(int, input().split())\nmm = 1000000007\nq = list(map(int, input().split()))\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    w = list(map(int, input().split()))\n    for j in range(b):\n        q[w[2 * j + 1] - 1] = (q[w[2 * j + 1] - 1] % mm + w[2 * j] % mm * (q[a - 1] % mm) % mm) % mm\n    q[a - 1] = 0\nfor i in range(n):\n    print(q[i])", "data = list(map(int, input().strip().split()))\nN = data[0]\nM = data[1]\nQ = list(map(int, input().strip().split()))\nfor i in range(M):\n    data = list(map(int, input().strip().split()))\n    number = data[0]\n    X = data[1]\n    equation = list(map(int, input().strip().split()))\n    for j in range(X):\n        Q[equation[2 * j + 1] - 1] += Q[number - 1] * equation[2 * j]\n    Q[number - 1] = 0\nfor x in Q:\n    print(x % (10 ** 9 + 7))", "(n, m) = map(int, input().split())\namount = {}\nl = input().split()\nfor i in range(n):\n    amount[i + 1] = int(l[i])\ndecomposeEquation = {}\nfor _ in range(m):\n    (a, b) = map(int, input().split())\n    decompse = []\n    l = [int(x) for x in input().split()]\n    for i in range(0, 2 * b, 2):\n        decompse.append([l[i], l[i + 1]])\n    decomposeEquation[a] = decompse\ncheck = 1\nwhile check:\n    check = 0\n    for compound in amount:\n        if amount[compound] != 0 and compound in decomposeEquation:\n            check = 1\n            Equation = decomposeEquation[compound]\n            for i in Equation:\n                amount[i[1]] += i[0] * amount[compound]\n            amount[compound] = 0\nfor i in range(n):\n    print(amount[i + 1] % 1000000007)", "import sys\n(n, m) = map(int, sys.stdin.readline().split())\nq = [int(i) for i in sys.stdin.readline().split()]\nfor i in range(m):\n    (ci, xi) = map(int, sys.stdin.readline().split())\n    c = [int(i) for i in sys.stdin.readline().split()]\n    for j in range(0, len(c) - 1, 2):\n        q[c[j + 1] - 1] = q[c[j + 1] - 1] + c[j] * q[ci - 1]\n    q[ci - 1] = 0\nfor k in range(0, n):\n    print(q[k] % (10 ** 9 + 7))", "(n, m) = list(map(int, input().split()))\namount = list(map(int, input().split()))\nfor _ in range(m):\n    (decomposition_compound, n) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    (i, j) = (0, 1)\n    while j < len(l):\n        quantity = l[i]\n        product = l[j]\n        amount[l[j] - 1] = amount[l[j] - 1] + amount[decomposition_compound - 1] * l[i]\n        i += 2\n        j += 2\n    amount[decomposition_compound - 1] = 0\nfor i in amount:\n    print(i % (10 ** 9 + 7))", "(n, m) = map(int, input().split())\nq = list(map(int, input().split()))\nfor i in range(m):\n    (c, x) = map(int, input().split())\n    wc = list(map(int, input().split()))\n    l = 1\n    for j in range(x):\n        q[wc[l] - 1] += wc[l - 1] * q[c - 1]\n        l += 2\n    q[c - 1] = 0\nfor i in q:\n    print(i % 1000000007)", "ls = list(map(int, input().split()))\nini = list(map(int, input().split()))\nfor _ in range(ls[1]):\n    eqd = list(map(int, input().split()))\n    eq = list(map(int, input().split()))\n    for i in range(eqd[1]):\n        ini[eq[i * 2 + 1] - 1] += eq[i * 2] * ini[eqd[0] - 1]\n    ini[eqd[0] - 1] = 0\nfor x in ini:\n    print(x % (10 ** 9 + 7))", "ls = list(map(int, input().split()))\nini = list(map(int, input().split()))\nfor _ in range(ls[1]):\n    eqd = list(map(int, input().split()))\n    eq = list(map(int, input().split()))\n    for i in range(eqd[1]):\n        ini[eq[i * 2 + 1] - 1] += eq[i * 2] * ini[eqd[0] - 1]\n    ini[eqd[0] - 1] = 0\nfor x in ini:\n    print(x % (10 ** 9 + 7))", "mod = 10 ** 9 + 7\n(n, m) = map(int, input().split())\nq = list(map(int, input().split()))\nfor _ in range(m):\n    (ci0, xi) = map(int, input().split())\n    wc = list(map(int, input().split()))\n    units_we_have = q[ci0 - 1]\n    for i in range(0, 2 * xi, 2):\n        (wi, ci) = (wc[i], wc[i + 1])\n        units_ci_generated = wi * units_we_have\n        q[ci - 1] += units_ci_generated\n        q[ci0 - 1] = 0\nfor item in q:\n    print(item % mod)", "from collections import defaultdict\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nd = defaultdict(lambda : 0)\nfor i in range(n):\n    d[i + 1] = l[i]\nmod = 10 ** 9 + 7\nfor _ in range(m):\n    (x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(0, 2 * y, 2):\n        d[l[i + 1]] = (d[l[i + 1]] + l[i] * d[x]) % mod\n    d[x] = 0\nans = 0\nfor i in range(n):\n    print(d[i + 1] % mod)", "(n, m) = map(int, input().split())\ninitial_weights = [int(_) for _ in input().split()]\nfor i in range(m):\n    (c, x) = map(int, input().split())\n    coeff = [int(_) for _ in input().split()]\n    for j in range(0, 2 * x, 2):\n        initial_weights[coeff[j + 1] - 1] += coeff[j] * initial_weights[c - 1]\n    initial_weights[c - 1] = 0\nfor i in initial_weights:\n    print(i % (pow(10, 9) + 7))", "(n, m) = map(int, input().split())\ninitial_weights = [int(_) for _ in input().split()]\nfor i in range(m):\n    (c, x) = map(int, input().split())\n    coeff = [int(_) for _ in input().split()]\n    for j in range(0, 2 * x, 2):\n        initial_weights[coeff[j + 1] - 1] += coeff[j] * initial_weights[c - 1]\n    initial_weights[c - 1] = 0\nfor i in initial_weights:\n    print(i % (pow(10, 9) + 7))", "(compounds, reactions) = map(int, input().split())\nquantities = [int(i) for i in input().split()]\nfor i in range(reactions):\n    (compound, products) = map(int, input().split())\n    reaction_info = [int(i) for i in input().split()]\n    quantity_of_reactant = quantities[compound - 1]\n    quantities[compound - 1] = 0\n    for j in range(0, len(reaction_info), 2):\n        (product, quantity) = (reaction_info[j + 1], reaction_info[j])\n        quantities[product - 1] += quantity * quantity_of_reactant\nfor qu in quantities:\n    print(qu % 1000000007)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef ni():\n    return int(input())\n\ndef si():\n    return str(input())\n(n, m) = mi()\nq = li()\nfor i in range(m):\n    (a, b) = mi()\n    re = li()\n    temp = int(q[a - 1])\n    q[a - 1] = 0\n    for j in range(0, len(re), 2):\n        (x, y) = (re[j], re[j + 1])\n        q[y - 1] += temp * x\n        q[y - 1] %= 1000000007\nfor i in q:\n    print(i)", "from sys import stdin\ninput = stdin.readline\n\ndef main():\n    (n, m) = map(int, input().split())\n    init = list(map(int, input().split()))\n    c_ind = []\n    p = 0\n    c_l = 0\n    for _ in range(m):\n        (target, x) = map(int, input().split())\n        w_c = list(map(int, input().split()))\n        for i in range(0, 2 * x, 2):\n            init[w_c[i + 1] - 1] += init[target - 1] * w_c[i]\n        c_ind.append(target - 1)\n        c_l += 1\n    for i in range(n):\n        if p < c_l and i == c_ind[p]:\n            print(0)\n            p += 1\n        else:\n            print(init[i] % 1000000007)\nmain()", "(N, M) = [int(x) for x in input().split()]\nQ = [int(x) for x in input().split()]\nfor m in range(M):\n    (C, X) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    W_C = []\n    k = 0\n    for j in range(X):\n        W_C.append([l[k], l[k + 1]])\n        k += 2\n    for i in range(X):\n        Q[int(W_C[i][1]) - 1] += int(W_C[i][0]) * Q[C - 1]\n    Q[C - 1] = 0\nfor i in range(N):\n    print(Q[i] % (7 + 10 ** 9))", "(n, m) = map(int, input().split())\nlistt = list(map(int, input().split()))\nfor _ in range(m):\n    (a, b) = map(int, input().split())\n    g = listt[a - 1]\n    listt[a - 1] = 0\n    k = list(map(int, input().split()))\n    for i in range(0, 2 * b, 2):\n        listt[k[i + 1] - 1] += k[i] * g\nfor i in listt:\n    print(i % (10 ** 9 + 7))", "def solution(Q, probs, indices):\n    Q = [0] + Q\n    for i in indices:\n        if Q[i] != 0:\n            for j in probs[i]:\n                Q[j] += probs[i][j] * Q[i]\n            Q[i] = 0\n    return Q[1:]\nnm = list(map(int, input().split()))\nM = nm[1]\nN = nm[0]\nQ = list(map(int, input().split()))\nprobs = [{} for __ in range(N + 1)]\nindices = []\nind = {i: 0 for i in range(len(Q) + 1)}\nfinal = [0] + Q\nfor i in range(M):\n    inp = list(map(int, input().split()))\n    line = inp[0]\n    final[line] = 0\n    dec = inp[1]\n    coeff = list(map(int, input().split()))\n    indices.append(line)\n    ind[line] = 1\n    for j in range(dec):\n        probs[line][coeff[j * 2 + 1]] = coeff[j * 2]\nsol = solution(Q, probs, indices)\nfor i in sol:\n    print(i % (10 ** 9 + 7))", "from collections import defaultdict as dd\n\ndef update(qnt, l, a):\n    for y in range(0, len(l), 2):\n        qnt[l[y + 1] - 1] = qnt[l[y + 1] - 1] + qnt[a] * l[y]\n    qnt[a] = 0\n(n, m) = list(map(int, input().split()))\nqnt = list(map(int, input().split()))\ndt = dd(int)\nfor x in range(m):\n    (element, prd) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    dt[element] = l\n    for y in range(0, 2 * prd, 2):\n        qnt[l[y + 1] - 1] = qnt[l[y + 1] - 1] + qnt[element - 1] * l[y]\n        if dt[l[y + 1]] != 0:\n            update(qnt, dt[l[y + 1]], l[y + 1])\n    qnt[element - 1] = 0\nfor x in qnt:\n    print(x % 1000000007)", "from collections import defaultdict as dd\n\ndef update(qnt, l, a):\n    for y in range(0, len(l), 2):\n        qnt[l[y + 1] - 1] = qnt[l[y + 1] - 1] + qnt[a] * l[y]\n    qnt[a] = 0\n(n, m) = list(map(int, input().split()))\nqnt = list(map(int, input().split()))\ndt = dd(int)\nfor x in range(m):\n    (element, prd) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    dt[element] = l\n    for y in range(0, 2 * prd, 2):\n        qnt[l[y + 1] - 1] = qnt[l[y + 1] - 1] + qnt[element - 1] * l[y]\n        if dt[l[y + 1]] != 0:\n            update(qnt, dt[l[y + 1]], l[y + 1])\n    qnt[element - 1] = 0\nfor x in qnt:\n    print(x % 1000000007)", "(n, e) = map(int, input().split())\nl = list(map(int, input().split()))\nfor j in range(e):\n    (c, x) = map(int, input().split())\n    k = list(map(int, input().split()))\n    i = 0\n    while i != x * 2:\n        s = 0\n        s += l[c - 1] * k[i]\n        l[k[i + 1] - 1] += s\n        i += 2\n    l[c - 1] = 0\nfor i in l:\n    print(i % 1000000007)", "(n, m) = map(int, input().split(' '))\nq = list(map(int, input().split(' ')))\nfor i in range(m):\n    (c, x) = map(int, input().split(' '))\n    wc = list(map(int, input().split(' ')))\n    i = 0\n    while i < len(wc) - 1:\n        q[wc[i + 1] - 1] += wc[i] * q[c - 1]\n        i += 2\n    q[c - 1] = 0\nfor j in q:\n    print(j % (10 ** 9 + 7))", "mod = 1000000007\n(n, m) = map(int, input().split())\nq = list(map(int, input().strip().split()))\nd = {i + 1: q[i] for i in range(n)}\nfor _ in range(m):\n    (c0, x) = map(int, input().split())\n    a = list(map(int, input().strip().split()))\n    for i in range(1, 2 * x, 2):\n        d[a[i]] += d[c0] * a[i - 1]\n    d[c0] = 0\nfor key in d:\n    print(d[key] % mod)", "def getlist():\n    return list(map(int, input().split(' ')))\n(n, m) = getlist()\narr = getlist()\nconst = 1000000007\nfor i in range(m):\n    (c, x) = getlist()\n    eq = getlist()\n    temp = arr[c - 1]\n    arr[c - 1] = 0\n    for i in range(0, 2 * x - 1, 2):\n        arr[eq[i + 1] - 1] = (arr[eq[i + 1] - 1] + temp * eq[i]) % const\nprint('\\n'.join([str(i) for i in arr]))", "from collections import deque\nimport sys\ninput = sys.stdin.readline\n(num_compounds, num_equations) = [int(x) for x in input().split()]\ncompound_amounts = [int(x) for x in input().split()]\ncompound_amounts = {i + 1: x for (i, x) in enumerate(compound_amounts)}\nstuff_compound_decomposed_into = dict()\nnum_units_out = dict()\nfor i in range(num_equations):\n    (compound, num_components_it_decomposes_into) = [int(x) for x in input().split()]\n    stuff_compound_decomposed_into[compound] = set()\n    arr = [int(x) for x in input().split()]\n    for j in range(num_components_it_decomposes_into):\n        amount = arr[2 * j]\n        to_compound = arr[2 * j + 1]\n        stuff_compound_decomposed_into[compound].add(to_compound)\n        num_units_out[compound, to_compound] = amount\nfrontier = deque([compound for compound in compound_amounts if compound_amounts[compound] > 0])\nfrontier_set = set(frontier)\nmod = 10 ** 9 + 7\nwhile frontier:\n    compound = frontier.popleft()\n    frontier_set.remove(compound)\n    if compound not in stuff_compound_decomposed_into:\n        continue\n    for to_compound in stuff_compound_decomposed_into[compound]:\n        compound_amounts[to_compound] = (compound_amounts[to_compound] + compound_amounts[compound] * num_units_out[compound, to_compound]) % mod\n        if to_compound not in frontier_set:\n            frontier.append(to_compound)\n            frontier_set.add(to_compound)\n    compound_amounts[compound] = 0\nans = [compound_amounts[compound] for compound in range(1, num_compounds + 1)]\nfor x in ans:\n    print(x)", "MOD = 10 ** 9 + 7\n(N, M) = map(int, input().split())\nQ = [0] + list(map(int, input().split()))\neq = {}\nfor mx in range(M):\n    (s, t) = map(int, input().split())\n    ti = list(map(int, input().split()))\n    cf = {}\n    while ti:\n        m = ti.pop()\n        cf[ti.pop()] = m\n    eq[s] = cf\ndecomp = True\nwhile decomp:\n    decomp = False\n    for (r, e) in eq.items():\n        q = Q[r]\n        if q:\n            Q[r] = 0\n            decomp = True\n            for (c, t) in e.items():\n                Q[t] = (Q[t] + q * c) % MOD\nprint(*Q[1:], sep='\\n')", "a = list(map(int, input().split()))\nn = a[0]\nm = a[1]\nN = []\nN = list(map(int, input().split()))\nmod = 1000000007\nwhile m != 0:\n    b = list(map(int, input().split()))\n    x = b[0]\n    y = b[1]\n    M = []\n    M = list(map(int, input().split()))\n    for i in range(0, 2 * y, 2):\n        N[M[i + 1] - 1] = (N[M[i + 1] - 1] + M[i] * N[x - 1]) % mod\n    N[x - 1] = 0\n    m = m - 1\nfor i in range(n):\n    print(N[i])", "mod = 10 ** 9 + 7\n(n, m) = [int(x) for x in input().split()]\nl = [int(i) for i in input().split()]\nfor i in range(m):\n    (c0, x) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    for i in range(1, x + 1):\n        l[a[2 * i - 1] - 1] += l[c0 - 1] * a[2 * i - 2] % mod\n    l[c0 - 1] = 0\nfor i in l:\n    print(i % mod)", "MOD = 10 ** 9 + 7\n\ndef kahns_topsort(adj):\n    from collections import deque\n    in_degrees = [0] * len(adj)\n    q = deque()\n    result = [-1] * len(adj)\n    for neighbors in adj:\n        for vertex in neighbors:\n            in_degrees[vertex] += 1\n    for (vertex, count) in enumerate(in_degrees):\n        if count == 0:\n            q.append(vertex)\n    index = 0\n    while q:\n        vertex = q.popleft()\n        result[index] = vertex\n        index += 1\n        for neighbor in adj[vertex]:\n            in_degrees[neighbor] -= 1\n            if in_degrees[neighbor] == 0:\n                q.append(neighbor)\n    return result if len(result) == len(adj) else []\n\ndef solve(initial, adj, wt):\n    order = kahns_topsort(adj)\n    for cp in order:\n        if cp not in wt:\n            continue\n        for (i, dc) in enumerate(adj[cp]):\n            initial[dc] += initial[cp] * wt[cp][i]\n        initial[cp] = 0\n    return initial\n\ndef main():\n    for _ in range(1):\n        (n, m) = map(int, input().split())\n        q = {i: int(val) for (i, val) in enumerate(input().split(), 1)}\n        adj = [[] for _ in range(n + 1)]\n        wt = {}\n        for _ in range(m):\n            (dc, x) = map(int, input().split())\n            wt[dc] = []\n            for (i, char) in enumerate(input().split()):\n                val = int(char)\n                if i % 2 == 0:\n                    wt[dc].append(val)\n                else:\n                    adj[dc].append(val)\n        result = solve(q, adj, wt)\n        for val in result.values():\n            print(val % MOD)\nmain()", "(n, m) = list(map(int, input().split()))\nreagents = list(map(int, input().split()))\nb = reagents.copy()\nfor i in range(m):\n    (reactant, no_of_products) = list(map(int, input().split()))\n    data = list(map(int, input().split()))\n    products = list()\n    coeff = list()\n    ind = 0\n    while True:\n        if ind + 1 > no_of_products * 2 - 1:\n            break\n        coeff.append(data[ind])\n        products.append(data[ind + 1])\n        ind += 2\n    for j in range(no_of_products):\n        b[products[j] - 1] += coeff[j] * b[reactant - 1]\n    b[reactant - 1] = 0\nfor i in b:\n    print(i % (10 ** 9 + 7))", "(noOfComp, noOfEqns) = map(int, input().split())\nquantity = list(map(int, input().split()))\neqnDict = {}\nfor _ in range(0, noOfEqns):\n    (reactant, noOfProducts) = map(int, input().split())\n    productArr = list(map(int, input().split()))\n    for i in range(0, len(productArr), 2):\n        if reactant in eqnDict.keys():\n            eqnDict[reactant][productArr[i + 1]] = productArr[i]\n        else:\n            eqnDict[reactant] = {productArr[i + 1]: productArr[i]}\nfor reactant in eqnDict.keys():\n    for product in eqnDict[reactant].keys():\n        coeff = eqnDict[reactant][product]\n        quantity[product - 1] += quantity[reactant - 1] * coeff\n    quantity[reactant - 1] = 0\nquantity = [x % 1000000007 for x in quantity]\n[print(x) for x in quantity]", "(n, m) = map(int, input().split())\nl1 = list(map(int, input().split()))\nfor i in range(0, m):\n    (a, b) = map(int, input().split())\n    e1 = list(map(int, input().split()))\n    t = l1[a - 1]\n    l1[a - 1] = 0\n    k = 0\n    while k < 2 * b - 1:\n        l1[e1[k + 1] - 1] += e1[k] * t\n        k = k + 2\nfor i in l1:\n    print(i % (pow(10, 9) + 7))", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 10 ** 9 + 7\n\ndef func():\n    (n, m) = mul()\n    coeff = seq()\n    for i in range(m):\n        (lhs, rhscnt) = mul()\n        cmp = seq()\n        for j in range(0, rhscnt * 2, 2):\n            coeff[cmp[j + 1] - 1] += coeff[lhs - 1] * cmp[j]\n        coeff[lhs - 1] = 0\n    for i in range(n):\n        print(coeff[i] % mod)\nt = 1\nfor i in range(t):\n    func()", "(com, eq) = map(int, input().split())\ncompound = list(map(int, input().split()))\nfor i in range(eq):\n    l = []\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    j = 0\n    while j < 2 * k:\n        compound[l[j + 1] - 1] += compound[n - 1] * l[j]\n        j += 2\n    compound[n - 1] = 0\nfor m in compound:\n    print(m % (10 ** 9 + 7))", "nm = list(map(int, input().strip().split()))\n(n, m) = (nm[0], nm[1])\nli = list(map(int, input().strip().split()))\nli.insert(0, 0)\nmod = 10 ** 9 + 7\nfor i in range(m):\n    l1 = list(map(int, input().strip().split()))\n    l2 = list(map(int, input().strip().split()))\n    mf = li[l1[0]]\n    li[l1[0]] = 0\n    j = 0\n    while j < len(l2) - 1:\n        mf2 = l2[j]\n        li[l2[j + 1]] += mf * mf2\n        j += 2\nfor i in li[1:]:\n    print(i % mod)", "(com, eq) = map(int, input().split())\ncompound = list(map(int, input().split()))\nfor i in range(eq):\n    l = []\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    j = 0\n    flag = 0\n    temp = 0\n    if l[j + 1] == n:\n        temp = compound[l[j + 1] - 1]\n        flag = 1\n    while j < 2 * k:\n        if l[j + 1] == n:\n            compound[l[j + 1] - 1] += temp * l[j]\n        else:\n            compound[l[j + 1] - 1] += compound[n - 1] * l[j]\n        j += 2\n    if flag == 0:\n        compound[n - 1] = 0\n    else:\n        compound[n - 1] -= temp\nfor m in compound:\n    print(m % (10 ** 9 + 7))", "(n, x) = map(int, input().split(' '))\nli = list(map(int, input().split(' ')))\nfor _ in range(x):\n    (a, b) = map(int, input().split(' '))\n    lis = list(map(int, input().split(' ')))\n    i = 1\n    while i < 2 * b:\n        li[lis[i] - 1] += lis[i - 1] * li[a - 1]\n        i += 2\n    li[a - 1] = 0\nfor i in li:\n    print(i % (10 ** 9 + 7))", "debug = False\n\ndef dprint(*args, **kwargs):\n    if not debug:\n        return\n    print('debug:\\t' + ' '.join(map(str, args)), **kwargs)\n(n, m) = map(int, input().split())\nqs = list(map(int, input().split()))\nrules = {}\nfor i in range(m):\n    (ci, xi) = map(int, input().split())\n    wcs = list(map(int, input().split()))\n    wcs = [wcs[i:i + 2] for i in range(0, len(wcs), 2)]\n    rules[ci] = wcs\ndprint(rules)\ndprint('')\nhasNewCompound = True\nwhile hasNewCompound:\n    hasNewCompound = False\n    for r in rules:\n        qAmount = qs[r - 1]\n        if qAmount > 0:\n            hasNewCompound = True\n            wcs = rules[r]\n            dprint(wcs)\n            for (w, c) in wcs:\n                qs[c - 1] += qAmount * w\n            qs[r - 1] = 0\n            dprint(qs)\nfor q in qs:\n    print(q % (10 ** 9 + 7))", "(n, x) = map(int, input().split(' '))\nli = list(map(int, input().split(' ')))\nfor _ in range(x):\n    (a, b) = map(int, input().split(' '))\n    lis = list(map(int, input().split(' ')))\n    i = 1\n    while i < 2 * b:\n        li[lis[i] - 1] += lis[i - 1] * li[a - 1]\n        i += 2\n    li[a - 1] = 0\nfor i in li:\n    print(i % (10 ** 9 + 7))", "(no_of_compounds, no_of_equations) = map(int, input().split())\ntotal_compds = list(range(1, no_of_compounds + 1))\ninitial_amt = list(map(int, input().split()))\namt = {}\nfor i in range(no_of_compounds):\n    amt[total_compds[i]] = initial_amt[i]\nequation_reactants = []\ntotal_no_of_products = []\nproduct_details = []\nequation = []\nequations = []\nfor i in range(no_of_equations):\n    (reactant, no_of_products) = map(int, input().split())\n    equation_reactants.append(reactant)\n    total_no_of_products.append(no_of_products)\n    products = list(map(int, input().split()))\n    product_details.append(products)\nfor i in range(len(total_no_of_products)):\n    k = 0\n    equation.append(equation_reactants[i])\n    for j in range(total_no_of_products[i]):\n        equation.append((product_details[i][k], product_details[i][k + 1]))\n        k += 2\n    equations.append(equation)\n    equation = []\nfor i in equations:\n    for j in range(1, len(i)):\n        amt[i[j][1]] += i[j][0] * amt[i[0]]\n    amt[i[0]] = 0\nfor k in amt.values():\n    print(k % 1000000007)", "(n, m) = map(int, input().split())\ncompoundlst = list(map(int, input().split()))\nfor i in range(m):\n    (initial, total) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    temp = compoundlst[initial - 1]\n    compoundlst[initial - 1] = 0\n    for j in range(1, len(lst), 2):\n        compoundlst[lst[j] - 1] += temp * lst[j - 1]\nfor i in compoundlst:\n    print(i % 1000000007)", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nfor t in range(m):\n    (c, x) = map(int, input().split())\n    ars = list(map(int, input().split()))\n    index = []\n    size = []\n    for i in range(2 * x):\n        if i % 2 == 0:\n            size.append(ars[i])\n        else:\n            index.append(ars[i])\n    for j in range(x):\n        arr[index[j] - 1] = (arr[index[j] - 1] + size[j] * arr[c - 1]) % 1000000007\n    arr[c - 1] = 0\nfor s in range(n):\n    print(arr[s])", "(m, n) = map(int, input().split())\nl = list(map(int, input().split()))\nwhile n > 0:\n    (a, b) = map(int, input().split())\n    s = list(map(int, input().split()))\n    x = l[a - 1]\n    l[a - 1] = 0\n    for i in range(1, 2 * b, 2):\n        l[s[i] - 1] = l[s[i] - 1] + x * s[i - 1]\n    n -= 1\nfor i in l:\n    print(i % (10 ** 9 + 7))", "temp = list(map(int, input().split()))\nM = 1000000007\nn = temp[0]\nm = temp[1]\narraY = list(map(int, input().split()))\nfor h in range(m):\n    temp1 = list(map(int, input().split()))\n    countsdd = temp1[0]\n    x = temp1[1]\n    undervalo = list(map(int, input().split()))\n    temp = arraY[countsdd - 1]\n    arraY[countsdd - 1] = 0\n    for i in range(0, len(undervalo) - 1, 2):\n        arraY[undervalo[i + 1] - 1] = (arraY[undervalo[i + 1] - 1] + temp * undervalo[i]) % M\nfor k in arraY:\n    print(k)", "mod = 10 ** 9 + 7\n(nc, ne) = map(int, input().split(' '))\namounts = [0] + list(map(int, input().split(' ')))\nmemo = dict()\ndegree = [-1] + [0] * (len(amounts) - 1)\nfor i in range(ne):\n    (c0, x) = map(int, input().split(' '))\n    val = list(map(int, input().split(' ')))\n    units = [v for (i, v) in enumerate(val) if i % 2 == 0]\n    ctype = [v for (i, v) in enumerate(val) if i % 2 == 1]\n    memo[c0] = (units, ctype)\n    for j in ctype:\n        degree[j] += 1\nwhile True:\n    degree_zero = [i for i in range(len(degree)) if degree[i] == 0 and i in memo]\n    if len(degree_zero) == 0:\n        break\n    for c0 in degree_zero:\n        (units, ctype) = memo[c0]\n        for j in range(len(ctype)):\n            amounts[ctype[j]] = (amounts[ctype[j]] + units[j] * amounts[c0] % mod) % mod\n            degree[ctype[j]] -= 1\n        amounts[c0] = 0\n        degree[c0] = -1\nfor i in range(len(amounts)):\n    amounts[i] = amounts[i] % mod\nprint('\\n'.join(map(str, amounts[1:])))", "(n, m) = list(map(int, input().split()))\ncmps = list(map(int, input().split()))\nfor _ in range(m):\n    (a, b) = list(map(int, input().split()))\n    t = list(map(int, input().split()))\n    i = 0\n    while i < len(t) - 1:\n        cmps[t[i + 1] - 1] += t[i] * cmps[a - 1]\n        i += 2\n    cmps[a - 1] = 0\nfor i in cmps:\n    print(i % (10 ** 9 + 7))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n(n, m) = lis()\namount = lis()\nfor _ in range(0, m):\n    (c, x) = lis()\n    L = lis()\n    X = L[1::2]\n    W = L[0::2]\n    for i in range(x):\n        amount[X[i] - 1] = W[i] * amount[c - 1] + amount[X[i] - 1]\n    amount[c - 1] = 0\nfor x in amount:\n    print(x % (pow(10, 9) + 7))", "Test_case = 1\nfor test in range(Test_case):\n    (n, m) = map(int, input().split())\n    query = list(map(int, input().split()))\n    temp = []\n    for x in range(2 * m):\n        temp.append(list(map(int, input().split())))\n    for y in range(0, 2 * m, 2):\n        (c, a) = (temp[y][0], temp[y][1])\n        tt = query[c - 1]\n        query[c - 1] = 0\n        for z in range(0, 2 * a, 2):\n            query[temp[y + 1][z + 1] - 1] += tt * temp[y + 1][z]\n    for nn in query:\n        print(nn % 1000000007)", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nfor i in range(m):\n    (c, x) = map(int, input().split())\n    c -= 1\n    lst = list(map(int, input().split()))\n    for j in range(0, 2 * x, 2):\n        arr[lst[j + 1] - 1] += lst[j] * arr[c]\n    arr[c] = 0\nfor i in range(n):\n    print(arr[i] % (10 ** 9 + 7))", "(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nfor i in range(0, m):\n    (x, y) = [int(x) for x in input().split()]\n    z = [int(x) for x in input().split()]\n    b = a[x - 1]\n    a[x - 1] = 0\n    (j, i) = (1, 0)\n    while j <= y:\n        s = b * z[i]\n        a[z[i + 1] - 1] += s\n        i += 2\n        j += 1\ne = 10 ** 9 + 7\nfor i in a:\n    print(i % e)", "(n, m) = map(int, input().split())\nQ = list(map(int, input().split()))\nmod = pow(10, 9) + 7\nfor i in range(m):\n    (c, x) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    for j in range(0, 2 * x, 2):\n        k = Q[c - 1]\n        Q[ar[j + 1] - 1] += k * ar[j]\n    Q[c - 1] = 0\nfor i in range(n):\n    print(Q[i] % mod)", "import sys\nM = 10 ** 9 + 7\ni = (map(int, s.split()) for s in sys.stdin)\nnext(i)\na = [None, *next(i)]\nfor ((c0, x), j) in zip(i, i):\n    q = a[c0]\n    a[c0] = 0\n    for (w, c) in zip(j, j):\n        a[c] = (a[c] + q * w) % M\na = iter(a)\nnext(a)\nprint(*a, sep='\\n')", "def process(quantities, equations):\n    dirty = True\n    while dirty:\n        dirty = False\n        for equation in equations:\n            compound = equation[0]\n            num_products = equation[1]\n            weights_products = equation[2]\n            converted = quantities[compound]\n            if converted == 0:\n                continue\n            else:\n                dirty = True\n            quantities[compound] = 0\n            for j in range(0, len(weights_products), 2):\n                units = weights_products[j]\n                product = weights_products[j + 1]\n                quantities[product] += converted * units\n    for c in range(1, len(quantities)):\n        print(quantities[c] % 1000000007)\n\ndef get_list(func):\n    return list(map(func, input().split()))\n\ndef solve():\n    (compounds, num_equations) = get_list(int)\n    quantities = get_list(int)\n    quantities.insert(0, 0)\n    equations = []\n    for i in range(num_equations):\n        (compound, num_products) = get_list(int)\n        weights_products = get_list(int)\n        equations.append((compound, num_products, weights_products))\n    process(quantities, equations)\nsolve()", "(n, m) = [int(i) for i in input().split()]\ncompounds = [0] + [int(i) for i in input().split()]\nfor _ in range(m):\n    (c0, x) = [int(i) for i in input().split()]\n    eqn = input().split()\n    n = compounds[c0]\n    compounds[c0] = 0\n    for (w, c) in [(int(eqn[i]), int(eqn[i + 1])) for i in range(0, 2 * x, 2)]:\n        compounds[c] += n * w\nfor i in compounds[1:]:\n    print(i % (10 ** 9 + 7))", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\np = 10 ** 9 + 7\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for j in range(0, 2 * y, 2):\n        f1 = b[j] * a[x - 1]\n        f1 %= p\n        a[b[j + 1] - 1] += f1\n        a[b[j + 1] - 1] %= p\n    a[x - 1] = 0\nfor i in a:\n    print(i % p)", "def sol(M, Q):\n    m = 1000000007\n    for i in range(M):\n        (a, b) = map(int, input().split())\n        c = list(map(int, input().split()))\n        x = 0\n        for j in range(0, b):\n            Q[c[x + 1] - 1] = Q[c[x + 1] - 1] + c[x] * Q[a - 1]\n            x = x + 2\n        Q[a - 1] = 0\n    for k in Q:\n        print(k % m)\n(N, M) = map(int, input().split())\nQ = list(map(int, input().split()))\nsol(M, Q)", "mod = 10 ** 9 + 7\n(n, m) = list(map(int, input().strip().split()))\nans = [0] * n\nc = list(map(int, input().strip().split()))\nfor i in range(m):\n    (ai, xi) = list(map(int, input().strip().split()))\n    rhs = list(map(int, input().strip().split()))\n    j = 0\n    while j < 2 * xi:\n        sum = 0\n        w = rhs[j]\n        aj = rhs[j + 1]\n        sum = w * c[ai - 1] % mod\n        c[aj - 1] = (c[aj - 1] + sum) % mod\n        j += 2\n    c[ai - 1] = ans[ai - 1] = 0\nfor i in c:\n    print(i)", "(n, m) = map(int, input().split())\narr = [0] + list(map(int, input().split()))\nresult = arr.copy()\nMap = {}\nfor _ in range(m):\n    (ind, noOfProducts) = map(int, input().split())\n    temp = list(map(int, input().split()))\n    Map[ind] = temp\nindexes = list(Map.keys())\nindexes.sort()\nfor ind in indexes:\n    temp = Map[ind]\n    noOfProducts = len(temp) // 2\n    amounts = []\n    compounds = []\n    for i in range(noOfProducts * 2):\n        if i % 2 == 0:\n            amounts.append(temp[i])\n        else:\n            compounds.append(temp[i])\n    multiplier = result[ind]\n    for i in range(noOfProducts):\n        result[compounds[i]] += multiplier * amounts[i]\n    result[ind] = 0\nmod = 10 ** 9 + 7\nfor i in range(n):\n    print(result[i + 1] % mod)", "mod = 1000000007\n(n, m) = map(int, input().split())\nA = list(map(int, input().split()))\nfor _ in range(m):\n    (c, x) = map(int, input().split())\n    u = list(map(int, input().split()))\n    val = A[c - 1]\n    A[c - 1] = 0\n    for i in range(0, len(u) - 1, 2):\n        A[u[i + 1] - 1] += u[i] * val\nfor i in A:\n    print(i % mod)", "inp = input().split(' ')\nn = int(inp[0])\nq = int(inp[1])\nMOD = 1000000007\nArr = [int(a) for a in input().split(' ')]\nfor i in range(q):\n    inp = input().split(' ')\n    c = int(inp[0]) - 1\n    eq = [int(e) for e in input().split(' ')]\n    for j in range(0, len(eq), 2):\n        Arr[eq[j + 1] - 1] = (Arr[eq[j + 1] - 1] + eq[j] * Arr[c]) % MOD\n    Arr[c] = 0\nfor i in range(n):\n    print(Arr[i])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nfor i in range(m):\n    (c, x) = map(int, input().split())\n    b = list(map(int, input().split()))\n    for i in range(0, 2 * x, 2):\n        w = b[i]\n        com = b[i + 1] - 1\n        a[com] += w * a[c - 1]\n    a[c - 1] = 0\nfor i in a:\n    print(i % 1000000007)"]