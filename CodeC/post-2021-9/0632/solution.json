["from collections import deque\nimport math\n\ndef getsqrt(x):\n    s = int(math.sqrt(x))\n    while (s + 1) * (s + 1) <= x:\n        s += 1\n    while s * s > x:\n        s -= 1\n    return s\n\ndef bfs(x):\n    queue = [[x, 0]]\n    reached = set([x])\n    for (u, d) in queue:\n        if u <= 10 ** 9 and u * u not in reached:\n            reached.add(u * u)\n            queue.append([u * u, d + 1])\n        y = getsqrt(u)\n        if y not in reached:\n            reached.add(y)\n            queue.append([y, d + 1])\n    return sorted(queue)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prv = [[1, 0]]\n    for x in a:\n        costs = bfs(x)\n        dp = []\n        (ptr, mn) = (0, 10 ** 18)\n        for (y, d) in costs:\n            while ptr < len(prv) and prv[ptr][0] <= y:\n                mn = min(mn, prv[ptr][1])\n                ptr += 1\n            dp.append([y, d + mn])\n        prv = dp\n    ans = 10 ** 18\n    for (x, d) in prv:\n        ans = min(ans, d)\n    print(ans)", "from collections import deque\nimport math\n\ndef getsqrt(x):\n    s = int(math.sqrt(x))\n    while (s + 1) * (s + 1) <= x:\n        s += 1\n    while s * s > x:\n        s -= 1\n    return s\n\ndef bfs(x):\n    queue = [[x, 0]]\n    reached = set([x])\n    for (u, d) in queue:\n        if u <= 10 ** 9 and u * u not in reached:\n            reached.add(u * u)\n            queue.append([u * u, d + 1])\n        y = getsqrt(u)\n        if y not in reached:\n            reached.add(y)\n            queue.append([y, d + 1])\n    return sorted(queue)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prv = [[1, 0]]\n    for x in a:\n        costs = bfs(x)\n        dp = []\n        (ptr, mn) = (0, 10 ** 18)\n        for (y, d) in costs:\n            while ptr < len(prv) and prv[ptr][0] <= y:\n                mn = min(mn, prv[ptr][1])\n                ptr += 1\n            dp.append([y, d + mn])\n        prv = dp\n    ans = 10 ** 18\n    for (x, d) in prv:\n        ans = min(ans, d)\n    print(ans)", "from collections import deque\nimport math\n\ndef getsqrt(x):\n    s = int(math.sqrt(x))\n    while (s + 1) * (s + 1) <= x:\n        s += 1\n    while s * s > x:\n        s -= 1\n    return s\n\ndef bfs(x):\n    queue = [[x, 0]]\n    reached = set([x])\n    for (u, d) in queue:\n        if u <= 10 ** 9 and u * u not in reached:\n            reached.add(u * u)\n            queue.append([u * u, d + 1])\n        y = getsqrt(u)\n        if y not in reached:\n            reached.add(y)\n            queue.append([y, d + 1])\n    return sorted(queue)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prv = [[1, 0]]\n    for x in a:\n        costs = bfs(x)\n        dp = []\n        (ptr, mn) = (0, 10 ** 18)\n        for (y, d) in costs:\n            while ptr < len(prv) and prv[ptr][0] <= y:\n                mn = min(mn, prv[ptr][1])\n                ptr += 1\n            dp.append([y, d + mn])\n        prv = dp\n    ans = 10 ** 18\n    for (x, d) in prv:\n        ans = min(ans, d)\n    print(ans)", "from collections import deque\nimport math\n\ndef getsqrt(x):\n    s = int(math.sqrt(x))\n    while (s + 1) * (s + 1) <= x:\n        s += 1\n    while s * s > x:\n        s -= 1\n    return s\n\ndef bfs(x):\n    queue = [[x, 0]]\n    reached = set([x])\n    for (u, d) in queue:\n        if u <= 10 ** 9 and u * u not in reached:\n            reached.add(u * u)\n            queue.append([u * u, d + 1])\n        y = getsqrt(u)\n        if y not in reached:\n            reached.add(y)\n            queue.append([y, d + 1])\n    return sorted(queue)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prv = [[1, 0]]\n    for x in a:\n        costs = bfs(x)\n        dp = []\n        (ptr, mn) = (0, 10 ** 18)\n        for (y, d) in costs:\n            while ptr < len(prv) and prv[ptr][0] <= y:\n                mn = min(mn, prv[ptr][1])\n                ptr += 1\n            dp.append([y, d + mn])\n        prv = dp\n    ans = 10 ** 18\n    for (x, d) in prv:\n        ans = min(ans, d)\n    print(ans)", "from math import sqrt\n\ndef getsqrt(x):\n    s = int(sqrt(x))\n    while (s + 1) * (s + 1) <= x:\n        s += 1\n    while s * s > x:\n        s -= 1\n    return s\n\ndef genall(x):\n    queue = [[x, 0]]\n    reached = set([x])\n    for (u, d) in queue:\n        if u <= 10 ** 9 and u * u not in reached:\n            reached.add(u * u)\n            queue.append([u * u, d + 1])\n        y = getsqrt(u)\n        if y not in reached:\n            reached.add(y)\n            queue.append([y, d + 1])\n    return sorted(queue)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prv = [[1, 0]]\n    for x in a:\n        costs = genall(x)\n        dp = []\n        (ptr, mn) = (0, 10 ** 18)\n        for (y, d) in costs:\n            while ptr < len(prv) and prv[ptr][0] <= y:\n                mn = min(mn, prv[ptr][1])\n                ptr += 1\n            dp.append([y, d + mn])\n        prv = dp\n    ans = 10 ** 18\n    for (x, d) in prv:\n        ans = min(ans, d)\n    print(ans)", "from math import sqrt\n\ndef getsqrt(x):\n    s = int(sqrt(x))\n    while (s + 1) * (s + 1) <= x:\n        s += 1\n    while s * s > x:\n        s -= 1\n    return s\n\ndef genall(x):\n    queue = [[x, 0]]\n    reached = set([x])\n    for (u, d) in queue:\n        if u <= 10 ** 9 and u * u not in reached:\n            reached.add(u * u)\n            queue.append([u * u, d + 1])\n        y = getsqrt(u)\n        if y not in reached:\n            reached.add(y)\n            queue.append([y, d + 1])\n    return sorted(queue)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prv = [[1, 0]]\n    for x in a:\n        costs = genall(x)\n        dp = []\n        (ptr, mn) = (0, 10 ** 18)\n        for (y, d) in costs:\n            while ptr < len(prv) and prv[ptr][0] <= y:\n                mn = min(mn, prv[ptr][1])\n                ptr += 1\n            dp.append([y, d + mn])\n        prv = dp\n    ans = 10 ** 18\n    for (x, d) in prv:\n        ans = min(ans, d)\n    print(ans)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfrom math import sqrt\n\ndef getsqrt(x):\n    s = int(sqrt(x))\n    while (s + 1) * (s + 1) <= x:\n        s += 1\n    while s * s > x:\n        s -= 1\n    return s\n\ndef genall(x):\n    queue = [[x, 0]]\n    reached = set([x])\n    for (u, d) in queue:\n        if u <= 10 ** 9 and u * u not in reached:\n            reached.add(u * u)\n            queue.append([u * u, d + 1])\n        y = getsqrt(u)\n        if y not in reached:\n            reached.add(y)\n            queue.append([y, d + 1])\n    return sorted(queue)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    prv = [[1, 0]]\n    for x in a:\n        costs = genall(x)\n        dp = []\n        (ptr, mn) = (0, 10 ** 18)\n        for (y, d) in costs:\n            while ptr < len(prv) and prv[ptr][0] <= y:\n                mn = min(mn, prv[ptr][1])\n                ptr += 1\n            dp.append([y, d + mn])\n        prv = dp\n    ans = 10 ** 18\n    for (x, d) in prv:\n        ans = min(ans, d)\n    print(ans)"]