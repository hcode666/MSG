["T = int(input())\nfor _ in range(T):\n    N = int(input())\n    L = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    ans = 0\n    for i in range(N - 1):\n        ans += min(R[i], L[i + 1])\n    print(ans)", "t = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "import math\nn = int(input())\nfor i in range(n):\n    a = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    p = 0\n    for i in range(a - 1):\n        p = p + min(l[i + 1], r[i])\n    print(p)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    L = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    if N == 1:\n        print(0)\n        continue\n    B = [min(L[i + 1], R[i]) for i in range(0, N - 1)]\n    print(sum(B))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    cost = 0\n    for i in range(n - 1):\n        cost = cost + min(l[i + 1], r[i])\n    print(cost)", "def solving(*args):\n    (n, l, r) = args\n    if n == 1:\n        return 0\n    if n == 2:\n        return min(l[-1], r[0])\n    x = [min(l[i + 1], r[i]) for i in range(0, n - 1)]\n    return sum(x)\n\ndef do_codechef():\n    for t in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split(' ')))\n        r = list(map(int, input().split(' ')))\n        print(solving(n, l, r))\ndo_codechef()\nexit()", "for _ in range(int(input())):\n    s = input()\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    tmp = 0\n    for i in range(len(a) - 1):\n        tmp += min(a[i + 1], b[i])\n    print(tmp)", "for _ in range(int(input())):\n    n = int(input())\n    lis1 = list(map(int, input().split()))\n    lis2 = list(map(int, input().split()))\n    min1 = 0\n    for i in range(n - 1):\n        min1 += min(lis2[i], lis1[i + 1])\n    print(min1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for j in range(n - 1):\n        ans += min(b[j], a[j + 1])\n    print(ans)", "from sys import stdin, stdout\nfrom collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for j in range(n - 1):\n        ans += min(b[j], a[j + 1])\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(x[i + 1], y[i])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ls1 = list(map(int, input().strip().split()))\n    ls2 = list(map(int, input().strip().split()))\n    x = 0\n    for j in range(n - 1):\n        x = x + min(ls1[j + 1], ls2[j])\n    print(x)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    a = 0\n    for i in range(n - 1):\n        a += min(l[i + 1], r[i])\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    a = 0\n    for i in range(n - 1):\n        a += min(l[i + 1], f[i])\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    a = 0\n    for i in range(n - 1):\n        a += min(l[i + 1], r[i])\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    a = 0\n    for i in range(n - 1):\n        a += min(l[i + 1], r[i])\n    print(a)", "def solve(left, right):\n    ans = 0\n    for i in range(0, len(left) - 1):\n        ans += min(right[i], left[i + 1])\n    print(ans)\nfor t in range(int(input())):\n    n = int(input())\n    left = list(map(int, input().split()))\n    right = list(map(int, input().split()))\n    solve(left, right)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = 0\n    for i in range(0, n - 1):\n        s = s + min(a[i + 1], b[i])\n    print(s)", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    sum = 0\n    for i in range(x - 1):\n        sum += min(r[i], l[i + 1])\n    print(sum)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    r = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(arr1[i + 1], arr2[i])\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    L = list(input().split())\n    L = list(map(int, L))\n    R = list(input().split())\n    R = list(map(int, R))\n    ans = 0\n    for i in range(1, N):\n        ans += min(L[i], R[i - 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)", "nt = int(input())\nfor g in range(0, nt):\n    total = 0\n    n = int(input())\n    left = input()\n    right = input()\n    right = right.split(' ')\n    left = left.split(' ')\n    Y = []\n    for i in range(0, len(left)):\n        left[i] = int(left[i])\n        right[i] = int(right[i])\n    for i in range(0, n - 1):\n        total = total + min(left[i + 1], right[i])\n    print(total)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    print(sum([min(l[i + 1], r[i]) for i in range(n - 1)]))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef get_string():\n    return stdin.readline().strip()\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        left = list(map(int, input().split()))\n        right = list(map(int, input().split()))\n        s = 0\n        for i in range(n - 1):\n            s += min(right[i], left[i + 1])\n        print(s)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(b[i], a[i + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        q = 0\n        for i in range(1, n):\n            q += min(l1[i], l2[i - 1])\n        print(q)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans = ans + min(l[i + 1], r[i])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    left = [int(x) for x in input().split()]\n    right = [int(x) for x in input().split()]\n    res = 0\n    for i in range(n - 1):\n        res += min(left[i + 1], right[i])\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        ans = 0\n        for i in range(n - 1):\n            ans += min(l[i + 1], r[i])\n        print(ans)", "allTestCase = int(input())\nfor testCase in range(allTestCase):\n    N = int(input())\n    L = list(map(int, input().split(' ')))\n    R = list(map(int, input().split(' ')))\n    ans = 0\n    for i in range(N - 1):\n        ans += min(R[i], L[i + 1])\n    print(ans)", "nt = int(input())\nfor g in range(0, nt):\n    total = 0\n    n = int(input())\n    left = input()\n    right = input()\n    right = right.split(' ')\n    left = left.split(' ')\n    Y = []\n    for i in range(0, len(left)):\n        left[i] = int(left[i])\n        right[i] = int(right[i])\n    for i in range(0, n - 1):\n        total = total + min(left[i + 1], right[i])\n    print(total)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    ans = 0\n    if n == 1:\n        print(0)\n    else:\n        for i in range(1, n):\n            ans += min(l[i], p[i - 1])\n        print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    val = 0\n    for j in range(n - 1):\n        val += min(r[j], l[j + 1])\n    print(val)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    sum = 0\n    for i in range(n - 1):\n        sum += min(r[i], l[i + 1])\n    print(sum)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    c = 0\n    for i in range(0, n - 1):\n        if r[i] >= l[i + 1]:\n            c += l[i + 1]\n            l[i + 1] = 10 ** 6\n        else:\n            c += r[i]\n            r[i] = 10 ** 6\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        l = l[1:]\n        r = r[:-1]\n        s = 0\n        for i in range(n - 1):\n            s += min(l[i], r[i])\n        print(s)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    r = list(map(int, input().split(' ')))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    s = 0\n    for j in range(n - 1):\n        s += min(l[j + 1], r[j])\n    print(s)", "import sys\nsys.setrecursionlimit(10 ** 8)\n\ndef min_coins(arr, l, r, start):\n    if start >= len(arr) - 1:\n        return 0\n    else:\n        return min(l[start + 1], r[start]) + min_coins(arr, l, r, start + 1)\ntest_cases = int(input())\nwhile test_cases != 0:\n    data = int(input())\n    data2 = list(map(int, input().split()))\n    data3 = list(map(int, input().split()))\n    a = []\n    for i in range(1, data + 1):\n        a.append(i)\n    print(min_coins(a, data2, data3, 0))\n    test_cases -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    mi = 0\n    for j in range(n - 1):\n        mi += min(r[j], l[j + 1])\n    print(mi)", "t = int(input())\nfor _ in range(t):\n    ans = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    for i in range(n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)", "for T in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    count = 0\n    for i in range(n - 1):\n        count += min(l[i + 1], r[i])\n    print(count)", "noot = int(input())\nfor nool in range(noot):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    r = [int(x) for x in input().split()]\n    l = l[1:]\n    r = r[0:n - 1]\n    sum = 0\n    for i in range(n - 1):\n        sum += min(l[i], r[i])\n    print(sum)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)", "for testcase in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    ans = 0\n    for i in range(N - 1):\n        ans += min(R[i], L[i + 1])\n    print(ans)", "num = int(input())\nwhile num:\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(0, n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)\n    num -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    r = list(map(int, input().split(' ')))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    r = [int(x) for x in input().split()]\n    ans = [min(l[x + 1], r[x]) for x in range(n - 1)]\n    print(sum(ans))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    r = list(map(int, input().strip().split()))\n    c = 0\n    for i in range(n - 1):\n        c += min(l[i + 1], r[i])\n    print(c)", "t = int(input())\nfor kk in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    r = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    a = input()\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    cnt = 0\n    for i in range(len(l1) - 1):\n        ans = min(l1[i + 1], l2[i])\n        cnt += ans\n    print(cnt)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst1 = list(map(int, input().split()))\n    lst2 = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(lst2[i], lst1[i + 1])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lsta = list(map(int, input().split()))\n    lstb = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        s = 0\n        for j in range(1, n):\n            s += min(lsta[j], lstb[j - 1])\n        print(s)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    L = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(R[i], L[i + 1])\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(l[i + 1], r[i])\n    print(ans)", "n = int(input())\nfor _ in range(n):\n    N = int(input())\n    L = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    ans = 0\n    for i in range(N - 1):\n        ans += min(R[i], L[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "from collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for case in range(how_much_noob_I_am):\n        n = inpu()\n        l = lis()\n        r = lis()\n        b = []\n        for i in range(n - 1):\n            b.append(min(l[i + 1], r[i]))\n        print(sum(b))\nmain()", "for i in range(int(input())):\n    n = int(input())\n    l = [int(k) for k in input().split()]\n    r = [int(k) for k in input().split()]\n    s = 0\n    if n == 1:\n        print(0)\n    else:\n        for k in range(1, n):\n            if l[k] >= r[k - 1]:\n                s += r[k - 1]\n            else:\n                s += l[k]\n        print(s)", "import math\nimport os\nimport random\nimport re\nimport sys\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    if N == 1:\n        print(0)\n    else:\n        ans = 0\n        for i in range(1, N):\n            ans += min(A[i], B[i - 1])\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for i in range(int(input())):\n    myResult = 0\n    num = int(input())\n    myList = list(map(int, input().split()))\n    tempList = list(map(int, input().split()))\n    for i in range(num - 1):\n        myResult += min(tempList[i], myList[i + 1])\n    print(myResult)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(n - 1):\n        ans += min(r[i], l[i + 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dynamic1 = [0] * n\n    dynamic2 = [0] * n\n    for i in range(n - 2, -1, -1):\n        dynamic2[i] = min(b[i], a[i + 1]) + dynamic2[i + 1]\n    for i in range(1, n):\n        dynamic1[i] = min(b[i - 1], a[i]) + dynamic1[i - 1]\n    ans = min(dynamic2[0], dynamic1[n - 1])\n    for i in range(1, n - 1):\n        ans = min(ans, dynamic1[i - 1] + dynamic2[i + 1] + a[i] + b[i])\n    print(ans)", "from math import *\nfrom collections import *\nimport os\nfrom io import BytesIO, IOBase\nimport sys\nfrom bisect import *\nfrom heapq import *\nMOD = 1000000007\n\ndef subinp():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op1.txt', 'w')\n\ndef subinp_1():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op2.txt', 'w')\n\ndef binpow(a, b, m):\n    a %= m\n    x = 1\n    while b > 0:\n        if b & 1:\n            x = x * a % m\n        a = a * a % m\n        b >>= 1\n    return x\n\ndef binser(arr, l, r, x):\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return mid\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sod(n):\n    l = list(str(n))\n    s = 0\n    for i in l:\n        s += int(i)\n    return s\n\ndef prime_factors(num):\n    l = []\n    if num % 2:\n        l.append(2)\n    while num % 2 == 0:\n        num = num / 2\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if not num % i:\n            l.append(i)\n        while num % i == 0:\n            num = num / i\n    if num > 2:\n        l.append(num)\n    return l\n\ndef factmod(n, p):\n    f = defaultdict(int)\n    f[0] = 1\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] * i % MOD\n    return f\n\ndef largestPower(n, p):\n    x = 0\n    while n:\n        n //= p\n        x += n\n    return x\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    res = 1\n    isPrime = [1] * (n + 1)\n    i = 2\n    while i * i <= n:\n        if isPrime[i]:\n            for j in range(2 * i, n, i):\n                isPrime[j] = 0\n        i += 1\n    for i in range(2, n):\n        if isPrime[i]:\n            k = largestPower(n, i)\n            res = res * binpow(i, k, p) % p\n    return res\n\ndef drec(x, y):\n    if y == x + 1:\n        return 'R'\n    if y == x - 1:\n        return 'L'\n    if x < y:\n        return 'D'\n    return 'U'\n\ndef cellhash(x, y):\n    return (x - 1) * m + y\n\ndef bins(l, x, n):\n    i = bisect_left(l, x)\n    if i < n:\n        return i\n    if i:\n        return i - 1\n    else:\n        return n\n\ndef cond(l):\n    for i in range(len(l) - 1):\n        if l[i] == str(int(l[i + 1]) - 1):\n            return False\n    return True\n\ndef isvowel(s):\n    if s in list('aeiou'):\n        return 1\n    return 0\n\ndef countOdd(L, R):\n    N = (R - L) // 2\n    if R % 2 != 0 or L % 2 != 0:\n        N += 1\n    return N\n\ndef tst(A, B, C):\n    return (A | B) & (B | C) & (C | A)\n\ndef palcheck(n, s):\n    (i, j) = (0, n - 1)\n    while i <= j:\n        if s[i] == s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef sakurajima(n):\n    if n < 9:\n        n = 10\n    l = [0]\n    for i in range(1, n + 1):\n        if i % 2:\n            l.append(i)\n        else:\n            l.append(2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if l[i] == i:\n            for j in range(i * i, n + 1, i):\n                if l[j] == j:\n                    l[j] = i\n    return l\n\ndef getfact(x):\n    ret = []\n    d = defaultdict(int)\n    while x != 1:\n        ret.append(spf[x] ** (d[spf[x]] + 1))\n        d[spf[x]] += 1\n        x = x // spf[x]\n    return ret\n\ndef prchck(n):\n    l = [1] * (n + 1)\n    l[1] = 0\n    for i in range(2, n + 1):\n        for j in range(2, int(sqrt(n)) + 1):\n            if j % i == 0:\n                l[j] = 1\n    return l\n\ndef ispal(s, n):\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef bfs(src, dest, ajl, vis):\n    q = deque([src])\n    vis[src] = True\n    while q:\n        i = q.popleft()\n        if i == dest:\n            return True\n        for j in ajl[i]:\n            if not vis[j]:\n                vis[j] = True\n                q.append(j)\n    return False\n\ndef sieve(n):\n    if n < 9:\n        n = 10\n    l = [1] * (n + 1)\n    for i in range(2, int(n ** 0.5) + 1):\n        if l[i]:\n            for j in range(i ** 2, n + 1, i):\n                if j % i == 0:\n                    l[j] = 0\n    l[1] = 0\n    return l\n\nclass DisjSet:\n\n    def __init__(self, n):\n        self.size = [1] * n\n        self.parent = [i for i in range(n)]\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xset = self.find(x)\n        yset = self.find(y)\n        if xset == yset:\n            return\n        if self.size[xset] < self.size[yset]:\n            self.parent[xset] = yset\n            self.size[yset] += self.size[xset]\n        else:\n            self.parent[yset] = xset\n            self.size[xset] += self.size[yset]\n\ndef dfs(i, ajl, vis, l, x):\n    vis[i] = True\n    l[i] = x\n    for j in ajl[i]:\n        if not vis[j]:\n            dfs(j, ajl, vis, l, x)\n\ndef checkpo3(N):\n    while N > 0:\n        if N % 3 == 2:\n            return False\n        N //= 3\n    return True\n\ndef sumofdig(n):\n    ans = 0\n    s = str(n)\n    for i in s:\n        ans += int(i)\n    return ans\n\ndef convert(set):\n    return [*set]\ninp = lambda : int(input())\nstrin = lambda : input().strip()\nstrl = lambda : list(input().strip())\nstrlst = lambda : list(map(str, input().split()))\nmult = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nlstin = lambda : list(map(int, input().strip().split()))\nflush = lambda : stdout.flush()\nstdpr = lambda x: stdout.write(str(x))\n\ndef peng(src, ajl, vis):\n    q = deque([src])\n    vis[src] = True\n    ans = 0\n    while q:\n        i = q.pop()\n        sm = 0\n        for j in ajl[i]:\n            if not vis[j]:\n                print(i, j)\n                vis[j] = True\n                q.append(j)\n                sm += 1\n        print(i, ajl[i], sm)\n        if i != 1:\n            ans += sm / max(len(ajl[i]) - 1, 1)\n        else:\n            ans += sm / max(len(ajl[i]), 1)\n    return ans\n\ndef panda(n, l, r):\n    if n < 2:\n        return 0\n    if n == 2:\n        return min(l[1], r[0])\n    i = 0\n    ans = 0\n    for i in range(n - 1):\n        if l[i + 1] < r[i]:\n            ans += l[i + 1]\n        else:\n            ans += r[i]\n        i += 1\n    return ans\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nt = 1\nt = int(input())\nfor _ in range(t):\n    n = inp()\n    l = lstin()\n    r = lstin()\n    ans = panda(n, l, r)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    lward = [0 for i in range(n)]\n    rward = [0 for i in range(n)]\n    arr = []\n    for j in range(1, len(l)):\n        arr.append([l[j], 'L', j - 1])\n    for j in range(len(r) - 1):\n        arr.append([r[j], 'R', j + 1])\n    arr.sort()\n    ans = 0\n    count = 0\n    for j in range(len(arr)):\n        if arr[j][1] == 'L' and lward[arr[j][2] + 1] != 1:\n            y = arr[j][2]\n            while y >= 0 and lward[y] == 1:\n                rward[y] = 1\n                y -= 1\n            if y != -1:\n                count += 1\n                ans += arr[j][0]\n                rward[y] = 1\n        elif arr[j][1] == 'R' and rward[arr[j][2] - 1] != 1:\n            y = arr[j][2]\n            while y <= n - 1 and rward[y] == 1:\n                lward[y] = 1\n                y += 1\n            if y != n:\n                count += 1\n                ans += arr[j][0]\n                lward[y] = 1\n        if count == n - 1:\n            print(ans)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, n):\n        ans += min(l[i], r[i - 1])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dp1 = [0] * n\n    dp2 = [0] * n\n    dp2[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        dp2[i] = min(b[i], a[i + 1]) + dp2[i + 1]\n    dp1[0] = 0\n    i = 1\n    while i < n:\n        dp1[i] = min(b[i - 1], a[i]) + dp1[i - 1]\n        i += 1\n    ans = min(dp2[0], dp1[n - 1])\n    i = 1\n    while i + 1 < n != None:\n        ans = min(ans, dp1[i - 1] + dp2[i + 1] + a[i] + b[i])\n        i += 1\n    print(ans, end='')\n    print('\\n', end='')", "def solve(*args):\n    (n, l, r) = args\n    if n == 1:\n        return 0\n    if n == 2:\n        return min(l[-1], r[0])\n    b = [min(l[i + 1], r[i]) for i in range(0, n - 1)]\n    return sum(b)\n\ndef do_codechef():\n    for t in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split(' ')))\n        r = list(map(int, input().split(' ')))\n        print(solve(n, l, r))\ndo_codechef()\nexit()", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))[:n]\n    right = list(map(int, input().split()))[:n]\n    c = 0\n    i = 1\n    while i < n:\n        a = l[i]\n        b = right[i - 1]\n        c += min(a, b)\n        i += 1\n    print(c)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    R = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        win = [0, 1]\n        ans = 0\n        while True:\n            a = R[win[0]]\n            b = L[win[1]]\n            ans += min(a, b)\n            win = [win[0] + 1, win[1] + 1]\n            if win[1] == n:\n                break\n        print(ans)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nfor u in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        q = 0\n        for i in range(1, n):\n            q += min(a[i], b[i - 1])\n        print(q)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))[:n]\n    right = list(map(int, input().split()))[:n]\n    c = 0\n    for i in range(1, n):\n        a = l[i]\n        b = right[i - 1]\n        c += min(a, b)\n    print(c)\n    t -= 1", "for i in range(int(input())):\n    x = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    jj = 0\n    if len(l1) == 1:\n        print(0)\n    else:\n        for i in range(1, x):\n            jj += min(l1[i], l2[i - 1])\n        print(jj)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    r = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    else:\n        a = 0\n        for i in range(1, n):\n            a += min(l[i], r[i - 1])\n        print(a)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    r = [int(x) for x in input().split()]\n    if n == 1:\n        print(0)\n    else:\n        ret = 0\n        for i in range(1, n):\n            ret += min(l[i], r[i - 1])\n        print(ret)"]