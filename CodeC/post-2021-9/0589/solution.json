["import math\n\ndef divisors(n):\n    if n < 2:\n        return []\n    r = [n]\n    nn = int(math.floor(math.sqrt(n)))\n    if nn * nn == n:\n        r.append(nn)\n        nn -= 1\n    for i in range(2, nn + 1):\n        if n % i == 0:\n            r.append(i)\n            r.append(n // i)\n    r.sort(reverse=True)\n    return r\nfor t in range(int(input())):\n    params = input().split()\n    N = int(params[0])\n    M = int(params[1])\n    A = input().split()\n    S = -M\n    for i in range(N):\n        a = int(A[i])\n        A[i] = a\n        S += a\n    A.sort(reverse=True)\n    R = 1\n    p = 1\n    for p in divisors(S):\n        s = 0\n        for i in range(N):\n            a = A[i]\n            if a < p:\n                break\n            m = S - s\n            if m > a:\n                m = p * (a // p)\n            if m * (N - i) < S - s:\n                break\n            s += m\n            if s == S:\n                break\n        if s == S:\n            R = p\n            break\n    print(R)", "import math\n\ndef divisors(n):\n    if n < 2:\n        return []\n    r = [n]\n    nn = int(math.floor(math.sqrt(n)))\n    if nn * nn == n:\n        r.append(nn)\n        nn -= 1\n    for i in range(2, nn + 1):\n        if n % i == 0:\n            r.append(i)\n            r.append(n // i)\n    r.sort(reverse=True)\n    return r\nfor t in range(int(input())):\n    params = input().split()\n    N = int(params[0])\n    M = int(params[1])\n    A = input().split()\n    S = -M\n    for i in range(N):\n        a = int(A[i])\n        A[i] = a\n        S += a\n    A.sort(reverse=True)\n    R = 1\n    p = 1\n    for p in divisors(S):\n        s = 0\n        for i in range(N):\n            a = A[i]\n            if a < p:\n                break\n            m = S - s\n            if m > a:\n                m = p * (a // p)\n            if m * (N - i) < S - s:\n                break\n            s += m\n            if s == S:\n                break\n        if s == S:\n            R = p\n            break\n    print(R)", "def solve(t):\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    MAXG = 10 ** 5\n    CA = [0] * (2 * MAXG + 1)\n    SA = [0] * (2 * MAXG + 1)\n    for x in A:\n        CA[x] += 1\n        SA[x] += x\n    for i in range(1, 2 * MAXG + 1):\n        CA[i] += CA[i - 1]\n        SA[i] += SA[i - 1]\n    ans = 1\n    for x in range(2, MAXG + 1):\n        S = C = 0\n        i = 0\n        for xx in range(x, MAXG + x + 1, x):\n            S += SA[xx - 1] - SA[xx - x] - (CA[xx - 1] - CA[xx - x]) * i * x\n            i += 1\n        if S <= M and (S - M) % x == 0:\n            ans = x\n    print(ans)\nT = int(input())\nfor i in range(1, T + 1):\n    solve(i)", "import math\n\ndef divisors(n):\n    if n < 2:\n        return []\n    r = [n]\n    nn = int(math.floor(math.sqrt(n)))\n    if nn * nn == n:\n        r.append(nn)\n        nn -= 1\n    for i in range(2, nn + 1):\n        if n % i == 0:\n            r.append(i)\n            r.append(n // i)\n    r.sort(reverse=True)\n    return r\nfor t in range(int(input())):\n    params = input().split()\n    N = int(params[0])\n    M = int(params[1])\n    A = input().split()\n    S = -M\n    for i in range(N):\n        a = int(A[i])\n        A[i] = a\n        S += a\n    A.sort(reverse=True)\n    R = 1\n    p = 1\n    for p in divisors(S):\n        s = 0\n        for i in range(N):\n            a = A[i]\n            if a < p:\n                break\n            m = S - s\n            if m > a:\n                m = p * (a // p)\n            if m * (N - i) < S - s:\n                break\n            s += m\n            if s == S:\n                break\n        if s == S:\n            R = p\n            break\n    print(R)", "import math\n\ndef divisors(n):\n    if n < 2:\n        return []\n    r = [n]\n    nn = int(math.floor(math.sqrt(n)))\n    if nn * nn == n:\n        r.append(nn)\n        nn -= 1\n    for i in range(2, nn + 1):\n        if n % i == 0:\n            r.append(i)\n            r.append(n // i)\n    r.sort(reverse=True)\n    return r\nfor t in range(int(input())):\n    params = input().split()\n    N = int(params[0])\n    M = int(params[1])\n    A = input().split()\n    S = -M\n    for i in range(N):\n        a = int(A[i])\n        A[i] = a\n        S += a\n    A.sort(reverse=True)\n    R = 1\n    p = 1\n    for p in divisors(S):\n        s = 0\n        for i in range(N):\n            a = A[i]\n            if a < p:\n                break\n            m = S - s\n            if m > a:\n                m = p * (a // p)\n            if m * (N - i) < S - s:\n                break\n            s += m\n            if s == S:\n                break\n        if s == S:\n            R = p\n            break\n    print(R)", "from bisect import bisect_left\nfrom sys import stdin\ninput = stdin.readline\n\ndef possible(N, M, A, sumA, target):\n    index = bisect_left(A, target) - 1\n    if index >= 0:\n        M -= sumA[index]\n        if M < 0:\n            return False\n    Q = 0\n    mult = 1\n    while True:\n        mult += 1\n        index2 = bisect_left(A, mult * target) - 1\n        if index2 >= 0 and index2 > index:\n            if index == -1:\n                q = (index2 + 1) * (mult - 1)\n                M -= sumA[index2] - q * target\n            else:\n                q = (index2 - index) * (mult - 1)\n                M -= sumA[index2] - sumA[index] - q * target\n            if M < 0:\n                return False\n            Q += q\n            if index2 == N - 1:\n                break\n            index = index2\n    if M % target == 0 and M <= Q * target:\n        return True\n    else:\n        return False\n\ndef solve(N, M, A):\n    A = sorted(A)\n    sumA = list(A)\n    for i in range(1, N):\n        sumA[i] += sumA[i - 1]\n    for i in reversed(range(2, A[-1] + 1)):\n        if possible(N, M, A, sumA, i):\n            return i\n    return 1\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    (N, M) = [int(x) for x in input().strip().split()]\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, M, A))"]