["for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = s.count('10')\n    print(c)", "T = int(input())\nwhile T:\n    T = T - 1\n    N = int(input())\n    S = input()\n    count = 0\n    for i in range(1, N):\n        if S[i] == '0' and S[i - 1] == '1':\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    d = 0\n    for i in range(n):\n        if s[i] == '1':\n            c = 1\n        elif c == 1:\n            c = 0\n            d += 1\n    print(d)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    print(s.count('10'))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    print(s.count('10'))", "for _ in range(int(input())):\n    n = int(input())\n    x = input()\n    c = 0\n    for i in range(1, n):\n        if x[i - 1] == '1' and x[i] == '0':\n            c = c + 1\n    print(c)", "t = int(input())\nfor ni in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(1, n):\n        if s[i] == '0' and s[i - 1] == '1':\n            c = c + 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    cnt = 0\n    for i in range(1, n):\n        if s[i - 1] == '1' and s[i] == '0':\n            cnt += 1\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    x = input()\n    c = 0\n    for i in range(1, n):\n        if x[i - 1] == '1' and x[i] == '0':\n            c = c + 1\n    print(c)", "def solve():\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(n - 1):\n        if s[i] > s[i + 1]:\n            count += 1\n    print(count)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    for j in range(n - 1):\n        if s[j] == '1' and s[j + 1] == '0':\n            count += 1\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    count = 0\n    for j in range(n - 1):\n        if s[j] == '1' and s[j + 1] == '0':\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(s.count('10'))", "for _ in range(int(input())):\n    N = int(input())\n    S = input().strip()\n    print(S.count('10'))", "for _ in range(int(input())):\n    N = int(input())\n    S = input().strip()\n    print(S.count('10'))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    string = input()\n    print(string.count('10'))", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    s = input()\n    count = 0\n    print(s.count('10'))", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    s = input()\n    count = 0\n    print(s.count('10'))", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    s = input()\n    count = 0\n    print(s.count('10'))", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    s = input()\n    count = 0\n    print(s.count('10'))", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    s = input()\n    count = 0\n    print(s.count('10'))", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] == '1' and s[i + 1] == '0':\n            count += 1\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(len(s) - 1):\n        if s[i:i + 2] == '10':\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            c += 1\n    print(c)", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(1, n):\n        if s[i] < s[i - 1]:\n            count = count + 1\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            c += 1\n    print(c)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    s += '7'\n    (z, o) = (0, 0)\n    for i in range(n):\n        if n - 1 == i and s[i] == '1':\n            break\n        if s[i] != s[i + 1] and s[i] == '0':\n            z += 1\n        elif s[i] != s[i + 1] and s[i] == '1':\n            o += 1\n    print(min(o, z))", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    pre = '0'\n    co = 0\n    for i in range(len(a)):\n        if a[i] == '0' and i - 1 >= 0:\n            if a[i - 1] == '1':\n                co += 1\n    print(co)", "for _ in range(int(input())):\n    a = input()\n    l = input().strip()\n    print(l.count('10'))", "for _ in range(int(input())):\n    N = int(input())\n    X = input().strip()\n    print(X.count('10'))", "for _ in range(int(input())):\n    N = int(input())\n    X = input().strip()\n    print(X.count('10'))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    print(a.count('10'))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = str(input())\n    if n == 1:\n        print(0)\n    else:\n        ones = s.split('0')\n        ocount = len([o for o in ones if len(o) > 0])\n        if ocount == 0:\n            print(0)\n        elif s[-1] == '1':\n            print(ocount - 1)\n        else:\n            print(ocount)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    p = s.find('1')\n    if p > 0:\n        s = s[p:]\n    s = s[::-1]\n    p = s.find('0')\n    if p > 0:\n        s = s[p:]\n    flip = [0, 0]\n    flip[ord(s[0]) - 48] += 1\n    for i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            flip[ord(s[i]) - 48] += 1\n    print(min(flip))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(n - 1):\n        if int(s[i]) > int(s[i + 1]):\n            c += 1\n    print(c)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    count = 0\n    for i in range(n - 1):\n        if a[i] == '1' and a[i + 1] == '0':\n            count = count + 1\n    print(count)", "for _ in range(int(input())):\n    size = int(input())\n    st = input()\n    res = 0\n    i = 0\n    while i < len(st) - 1:\n        if st[i] == '1' and st[i + 1] == '0':\n            res += 1\n        i += 1\n    print(res)", "T = int(input())\nfor i in range(0, T):\n    N = int(input())\n    S = input()\n    ops = 0\n    for j in range(0, N - 1):\n        num = j\n        if S[j] == '1':\n            if S[j + 1] == '0':\n                for k in range(1, N):\n                    if j - k < 0:\n                        break\n                    if S[j - k] == '1':\n                        num = num - 1\n                    else:\n                        break\n                ops = ops + 1\n    print(ops)", "import random\nimport math\nfrom collections import defaultdict, Counter, deque, OrderedDict\nfrom functools import lru_cache\nimport bisect\nimport heapq\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\nclass SegmentTree:\n\n    def __init__(self, arr, func=lambda x, y: x + y, defaultvalue=0):\n        self.n = len(arr)\n        self.segmentTree = [0] * self.n + arr\n        self.func = func\n        self.defaultvalue = defaultvalue\n        self.buildSegmentTree(arr)\n\n    def buildSegmentTree(self, arr):\n        for i in range(self.n - 1, 0, -1):\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        res = self.defaultvalue\n        while l < r:\n            if l & 1:\n                res = self.func(res, self.segmentTree[l])\n                l += 1\n            l >>= 1\n            if r & 1:\n                r -= 1\n                res = self.func(res, self.segmentTree[r])\n            r >>= 1\n        return res\n\n    def update(self, i, value):\n        i += self.n\n        self.segmentTree[i] = value\n        while i > 1:\n            i >>= 1\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parents = list(range(n))\n\n    def find(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            self.parents[x] = y\ndire = [0, 1, 0, -1, 0]\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef case(t):\n    print('Case #{}:'.format(t), end=' ')\nRANDOM = random.randrange(2 ** 62)\n\ndef Wrapper(x):\n    return x ^ RANDOM\n\ndef solve():\n    n = int(input())\n    s = input()\n    stack = []\n    for i in s:\n        if len(stack) == 0 or stack[-1] != i:\n            stack.append(i)\n    s = ''.join(stack)\n    n = len(s)\n    zc = s.count('0')\n    oc = 0\n    ans = math.inf\n    for i in range(n):\n        ans = min(ans, oc + zc)\n        if s[i] == '0':\n            zc -= 1\n        else:\n            oc += 1\n    ans = min(ans, oc + zc)\n    print(ans)\nfor t in range(int(input())):\n    solve()", "from collections import deque\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    wq = deque(s)\n    fl = 0\n    c = 0\n    while len(wq) > 0:\n        a = wq.popleft()\n        if a == '1':\n            fl = 1\n        if a == '0' and fl == 1:\n            c += 1\n            fl = 0\n    print(c)", "from collections import deque\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    s = str(input())\n    wq = deque(s)\n    fl = 0\n    c = 0\n    while len(wq) > 0:\n        a = wq.popleft()\n        if a == '1':\n            fl = 1\n        if a == '0' and fl == 1:\n            c += 1\n            fl = 0\n    print(c)", "n = input()\nval = []\nfor i in range(int(n) * 2):\n    val.append(input())\nfor i in range(len(val)):\n    if i % 2 != 0:\n        xc = val[i]\n        res = 0\n        for k in range(1, len(xc)):\n            if xc[k] == '0' and xc[k - 1] == '1':\n                res += 1\n        print(res)", "n = input()\nval = []\nfor i in range(int(n) * 2):\n    val.append(input())\nfor i in range(len(val)):\n    if i % 2 != 0:\n        xc = val[i]\n        res = 0\n        for k in range(1, len(xc)):\n            if xc[k] == '0' and xc[k - 1] == '1':\n                res += 1\n        print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = 0\n    i = 0\n    while i < n - 1:\n        if s[i] == '1' and s[i + 1] == '0':\n            ans += 1\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    pre = s[0]\n    ans = 0\n    for i in s:\n        if int(pre) > int(i):\n            ans += 1\n        pre = i\n    print(ans)", "def sorted_substring(n, s):\n    a = 0\n    b = 0\n    for i in range(n):\n        if s[i] == '1':\n            a = 1\n        elif a != 0 and s[i] == '0':\n            b += 1\n            a = 0\n    if s[n - 1] == '1' and a == 0:\n        print(b - 1)\n    else:\n        print(b)\nt = int(input())\nfor t in range(t):\n    n = int(input())\n    s = input()\n    sorted_substring(n, s)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(1, n):\n        if s[i] == '0' and s[i - 1] == '1':\n            c = c + 1\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(1, n):\n        if s[i] == '0' and s[i - 1] == '1':\n            c = c + 1\n    print(c)", "t = int(input())\nfor _ in range(t):\n    N = int(input())\n    S = input()\n    ans = 0\n    for i in range(N - 1):\n        if S[i + 1] == '0' and S[i] == '1':\n            ans = ans + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    N = int(input())\n    S = input()\n    ans = 0\n    for i in range(N - 1):\n        if S[i + 1] == '0' and S[i] == '1':\n            ans = ans + 1\n    print(ans)", "n = int(input())\nfor i in range(0, n):\n    count = 0\n    c = int(input())\n    d = input()\n    for j in range(1, c):\n        if d[j - 1] > d[j]:\n            count = count + 1\n    print(count)", "n = int(input())\nfor i in range(0, n):\n    count = 0\n    c = int(input())\n    d = input()\n    for j in range(0, c - 1):\n        if d[j] > d[j + 1]:\n            count = count + 1\n    print(count)", "n = int(input())\nfor i in range(0, n):\n    count = 0\n    c = int(input())\n    d = input()\n    for j in range(0, c - 1):\n        if d[j] > d[j + 1]:\n            count = count + 1\n    print(count)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    s = input()\n    i = 0\n    sortexist = 0\n    while i < n - 1:\n        if s[i] == '1' and s[i + 1] == '0':\n            sortexist += 1\n        i += 1\n    print(sortexist)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(s.count('10'))", "from collections import Counter, UserString\n\ndef decimal(n):\n    return int(ans) + int(int(ans) != ans)\nynO = 'Yes'\n\ndef yn(check='o', caps=False):\n    if check == 'o':\n        return ynO\n    elif check == 1:\n        ynO = 'Yes'\n    elif check == 0:\n        ynO = 'No'\n    else:\n        raise ValueError('Numbers others than 1 and 0 do not come into consideration')\n    if caps:\n        ynO = ynO.upper()\n\nclass mutableStr(UserString):\n\n    def ins(self, n, s):\n        if n < 0:\n            self.data = self.data = ''.join(list(self.data)[:n + 1]) + s + ''.join(list(self.data)[n + 1:])\n        else:\n            self.data = ''.join(list(self.data)[:n]) + s + ''.join(list(self.data)[n:])\n\n    def rem(self, s):\n        self.data = self.data.replace(s, '')\nalphabetOrd = [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]\nalphabet = list('abcdefghijklmnopqrstuvwxyz')\nr2 = lambda n: range(1, n + 1)\nalph = lambda s: s.isalpha()\nmod = lambda n: n % (10 ** 9 + 7)\nsl = lambda l: list(set(l))\ninf = float('inf')\nsoi = lambda : sorted(input())\nii = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nsi = lambda : mutableStr(input())\nlsi = lambda : list(input())\nsepi = lambda : map(int, input().split())\nseti = lambda : set(map(int, input().split()))\nfor t in range(int(input())):\n    lenOfBinStr = ii()\n    binStr = si()\n    ans = binStr.count('10')\n    print(ans)", "from collections import Counter, UserString\n\ndef decimal(n):\n    return int(ans) + int(int(ans) != ans)\nynO = 'Yes'\n\ndef yn(check='o', caps=False):\n    if check == 'o':\n        return ynO\n    elif check == 1:\n        ynO = 'Yes'\n    elif check == 0:\n        ynO = 'No'\n    else:\n        raise ValueError('Numbers others than 1 and 0 do not come into consideration')\n    if caps:\n        ynO = ynO.upper()\n\nclass mutableStr(UserString):\n\n    def ins(self, n, s):\n        if n < 0:\n            self.data = self.data = ''.join(list(self.data)[:n + 1]) + s + ''.join(list(self.data)[n + 1:])\n        else:\n            self.data = ''.join(list(self.data)[:n]) + s + ''.join(list(self.data)[n:])\n\n    def rem(self, s):\n        self.data = self.data.replace(s, '')\nalphabetOrd = [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]\nalphabet = list('abcdefghijklmnopqrstuvwxyz')\nr2 = lambda n: range(1, n + 1)\nalph = lambda s: s.isalpha()\nmod = lambda n: n % (10 ** 9 + 7)\nsl = lambda l: list(set(l))\ninf = float('inf')\nsoi = lambda : sorted(input())\nii = lambda : int(input())\nli = lambda : list(map(int, input().split()))\nsi = lambda : mutableStr(input())\nlsi = lambda : list(input())\nsepi = lambda : map(int, input().split())\nseti = lambda : set(map(int, input().split()))\nfor t in range(int(input())):\n    lenOfBinStr = ii()\n    binStr = si()\n    ans = binStr.count('10')\n    print(ans)", "num = int(input())\nfor _ in range(num):\n    n = int(input())\n    val = input()\n    print(val.count('10'))", "for x in range(int(input())):\n    n = int(input())\n    s = input()\n    print(s.count('10'))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(s.count('10'))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    print(a.count('10'))", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    print(a.count('10'))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(s.count('10'))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    print(s.count('10'))", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = input()\n    print(arr.count('10'))", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = input()\n    print(arr.count('10'))", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = input()\n    subrays = 0\n    current = arr[0]\n    for i in arr[1:]:\n        if i < current:\n            subrays += 1\n        current = i\n    print(subrays)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    print(s.count('10'))", "T = int(input())\nfor j in range(T):\n    N = int(input())\n    S = input()\n    c = 0\n    for i in range(N - 1):\n        if S[i] == '1' and S[i + 1] == '0':\n            c += 1\n    print(c)", "T = int(input())\nfor j in range(T):\n    N = int(input())\n    S = input()\n    c = 0\n    for i in range(N - 1):\n        if S[i] == '1' and S[i + 1] == '0':\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    x = input()\n    c = 0\n    for i in range(1, n):\n        if x[i - 1] == '1' and x[i] == '0':\n            c = c + 1\n    print(c)", "for _ in range(int(input())):\n    N = int(input())\n    S = input()\n    n = 0\n    for i in range(N - 1):\n        if S[i] == '1' and S[i + 1] == '0':\n            n += 1\n    print(n)", "n = int(input())\nfor i in range(n):\n    n = int(input())\n    s = input()\n    c = 0\n    i = 0\n    while i < n:\n        if s[i] == '1':\n            c += 1\n            while i < n and s[i] == '1':\n                i += 1\n        i += 1\n    if s[-1] == '1':\n        c -= 1\n    print(c)", "for i in range(int(input())):\n    num = int(input())\n    data = input()\n    n = 0\n    for i in range(num - 1):\n        if data[i] == '1' and data[i + 1] == '0':\n            n += 1\n    print(n)", "for i in range(int(input())):\n    num = int(input())\n    data = input()\n    n = 0\n    for i in range(num - 1):\n        if data[i] == '1' and data[i + 1] == '0':\n            n += 1\n    print(n)", "for num_case in range(int(input())):\n    digit_num = int(input())\n    data = input()\n    num = 0\n    for i in range(digit_num - 1):\n        if data[i] == '1' and data[i + 1] == '0':\n            num += 1\n    print(num)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\nans = []\nfor _ in range(inp()):\n    N = inp()\n    ans.append(insr().count('10'))\noutplt(ans)", "for i in range(int(input())):\n    N = int(input())\n    S = input()\n    c = 0\n    for i in range(0, N - 1):\n        if S[i] == '1' and S[i + 1] == '0':\n            c += 1\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    (c, d) = (0, 0)\n    for i in range(n - 1):\n        if s[i] == '1' and s[i + 1] == '0':\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    count = 0\n    s = str(input())[:n]\n    for i in range(len(s) - 1):\n        if s[i] == '1' and s[i + 1] == '0':\n            count = count + 1\n    print(count)", "n = int(input())\nfor _ in range(n):\n    l = int(input())\n    b = input()\n    count = 0\n    for i in range(l - 1):\n        if b[i] == '1' and b[i + 1] == '0':\n            count += 1\n    print(count)", "import re\nfor _ in range(int(input())):\n    _ = input()\n    s = input()\n    print(len(re.findall('10', s)))", "for i in range(int(input())):\n    l = int(input())\n    s = input()[:l]\n    z = list(s)\n    c = 0\n    for j in range(len(z) - 1):\n        if z[j] == '1' and z[j + 1] == '0':\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    input()\n    print(input().count('10'))", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    s = input()\n    c = 0\n    i = 0\n    while i < n - 1:\n        if s[i] + s[i + 1] == '10':\n            c += 1\n        i += 1\n    print(c)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    count = 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            count += 1\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            c = c + 1\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            c = c + 1\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(len(s) - 1):\n        if s[i] > s[i + 1]:\n            c = c + 1\n    print(c)", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    s = input()\n    no = 0\n    for i in range(0, len(s) - 1):\n        if s[i] > s[i + 1]:\n            no += 1\n    print(no)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    S = input()\n    no = 0\n    for i in range(0, len(S) - 1):\n        if S[i] > S[i + 1]:\n            no += 1\n    print(no)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    i = 0\n    first_one = s[i]\n    ans = 0\n    while i < n - 1:\n        entered_flag = 0\n        if int(s[i]) > int(s[i + 1]):\n            i = i + 1\n            while s[i] == 1 and i < n:\n                i = i + 1\n            entered_flag = 1\n        if entered_flag == 0:\n            i = i + 1\n        else:\n            ans = ans + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    for i in range(1, n):\n        if s[i] == '0' and s[i - 1] == '1':\n            c += 1\n    print(c)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    string = input()\n    c = 0\n    for j in range(len(string) - 1):\n        if string[j] > string[j + 1]:\n            c += 1\n    print(c)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    string = input()\n    c = 0\n    for j in range(len(string) - 1):\n        if string[j] > string[j + 1]:\n            c += 1\n    print(c)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    string = input()\n    c = 0\n    for j in range(len(string) - 1):\n        if string[j] > string[j + 1]:\n            c += 1\n    print(c)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    string = input()\n    c = 0\n    for j in range(len(string) - 1):\n        if string[j] > string[j + 1]:\n            c += 1\n    print(c)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    string = input()\n    c = 0\n    for j in range(len(string) - 1):\n        if string[j] > string[j + 1]:\n            c += 1\n    print(c)"]