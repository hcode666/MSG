["def correction(lst, n, m):\n    lst.append(n)\n    lst.append(None)\n    for i in range(m, -1, -1):\n        lst[i + 1] = lst[i]\n    lst[0] = -1\n\ndef solve():\n    n = int(input())\n    arr = [[] for i in range(n + 1)]\n    count = 0\n    for x in map(int, input().split()):\n        if x <= n:\n            arr[x].append(count)\n        count += 1\n    ans = 0\n    for j in range(n + 1):\n        l1 = arr[j]\n        m = len(l1)\n        if m >= j:\n            correction(l1, n, m)\n            k = 1\n            while k + j - 1 < m + 1:\n                (L, R) = (k, k + j - 1)\n                ans += (l1[L] - l1[L - 1]) * (l1[R + 1] - l1[R]) * j\n                k += 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def correction(lst, n, m):\n    lst.append(n)\n    lst.append(None)\n    for i in range(m, -1, -1):\n        lst[i + 1] = lst[i]\n    lst[0] = -1\n\ndef solve():\n    n = int(input())\n    arr = [[] for i in range(n + 1)]\n    count = 0\n    for x in map(int, input().split()):\n        if x <= n:\n            arr[x].append(count)\n        count += 1\n    ans = 0\n    for j in range(n + 1):\n        l1 = arr[j]\n        m = len(l1)\n        if m >= j:\n            correction(l1, n, m)\n            k = 1\n            while k + j - 1 < m + 1:\n                (L, R) = (k, k + j - 1)\n                ans += (l1[L] - l1[L - 1]) * (l1[R + 1] - l1[R]) * j\n                k += 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    for i in range(n):\n        x[i] = [x[i], i]\n    x = sorted(x)\n    xd = []\n    xd += [x[0][0], [x[0][1]]]\n    for i in range(1, n):\n        if x[i][0] == x[i - 1][0]:\n            xd[-1] += [x[i][1]]\n        else:\n            xd += [x[i][0], [x[i][1]]]\n    xd = {xd[i]: xd[i + 1] for i in range(0, len(xd), 2)}\n    ans = 0\n    for (k, v) in xd.items():\n        if len(v) > k:\n            temp = 0\n            temp += (v[0] + 1) * (v[k] - v[k - 1])\n            for i in range(1, len(v)):\n                if i + k < len(v):\n                    temp += (v[i] - v[i - 1]) * (v[i + k] - v[i + k - 1])\n                elif i + k == len(v):\n                    temp += (v[i] - v[i - 1]) * (n - v[i + k - 1])\n                else:\n                    break\n            ans += temp * k\n        elif len(v) == k:\n            ans += k * (v[0] + 1) * (n - v[k - 1])\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef solve(a, x):\n    m = len(a)\n    if m == 0:\n        return 0\n    ans = 0\n    for i in range(m - x + 1):\n        (L, R) = (i, i + x - 1)\n        l = a[L] - (a[L - 1] if L else -1)\n        r = (a[R + 1] if R + 1 < m else n) - a[R]\n        ans += l * r\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    b = [[] for _ in range(n + 1)]\n    for (i, x) in enumerate(lst):\n        if x <= n:\n            b[x].append(i)\n    print(sum((solve(v, i) * i for (i, v) in enumerate(b))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    hm = {}\n    for i in range(len(arr)):\n        if arr[i] in hm:\n            hm[arr[i]].append(i)\n        else:\n            hm[arr[i]] = [i]\n    ans = 0\n    for i in hm:\n        x = len(hm[i])\n        if x >= i:\n            l = 0\n            r = i - 1\n            temp = 0\n            while r < x:\n                if l == 0:\n                    left = hm[i][l] + 1\n                else:\n                    left = hm[i][l] - hm[i][l - 1]\n                if r == x - 1:\n                    right = n - hm[i][r]\n                else:\n                    right = hm[i][r + 1] - hm[i][r]\n                temp += left * right\n                l += 1\n                r += 1\n            ans += temp * i\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    adict = {}\n    for i in range(n):\n        if a[i] in adict:\n            adict[a[i]].append(i)\n        else:\n            adict[a[i]] = [i]\n    w = 0\n    for key in adict:\n        alist = adict[key]\n        prev = 0\n        for i in range(len(alist) - (key - 1)):\n            last = alist[i + key - 1]\n            if i == len(alist) - (key - 1) - 1:\n                next = n\n            else:\n                next = alist[i + key - 1 + 1]\n            front = alist[i] + 1 - prev\n            back = next - last\n            w += front * back * key\n            prev = alist[i] + 1\n    print(w)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    adict = {}\n    for i in range(n):\n        if a[i] in adict:\n            adict[a[i]].append(i)\n        else:\n            adict[a[i]] = [i]\n    w = 0\n    for key in adict:\n        alist = adict[key]\n        prev = 0\n        for i in range(len(alist) - (key - 1)):\n            last = alist[i + key - 1]\n            if i == len(alist) - (key - 1) - 1:\n                next = n\n            else:\n                next = alist[i + key - 1 + 1]\n            if alist[i] + 1 == prev:\n                front = 1\n            else:\n                front = alist[i] + 1 - prev\n            back = next - last\n            w += front * back * key\n            prev = alist[i] + 1\n    print(w)", "def read_int_ist():\n    lst = list(map(int, input().split(' ')))\n    return lst\n\ndef read_int_values():\n    return map(int, input().split(' '))\n\ndef solve(len1, a) -> int:\n    ans = 0\n    lst_indices = [[] for _ in range(len1 + 1)]\n    for i in range(1, len(a) + 1):\n        if a[i - 1] <= len1:\n            lst_indices[a[i - 1]].append(i)\n    for x in range(1, n + 1):\n        lst_index = list(lst_indices[x])\n        lst_index.insert(0, 0)\n        lst_index.insert(len(lst_index), n + 1)\n        for i in range(1, len(lst_index) - x):\n            ans += x * (lst_index[i] - lst_index[i - 1]) * (lst_index[i + x] - lst_index[i + x - 1])\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    lst = read_int_ist()\n    print(solve(n, lst))", "from typing import DefaultDict\nfrom math import sqrt\nfrom collections import OrderedDict, defaultdict\nimport math\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d = DefaultDict(lambda : 0)\n    for ele in l:\n        d[ele] += 1\n    return d\n\ndef max_in_dict(d):\n    maxi = 0\n    for ele in d:\n        if d[ele] > maxi:\n            maxi = d[ele]\n    return maxi\n\ndef element_count(s):\n    l = []\n    k = s[0]\n    c = 0\n    for ele in s:\n        if ele == k:\n            c += 1\n        else:\n            l.append([k, c])\n            k = ele\n            c = 1\n    l.append([k, c])\n    return l\nfor _ in range(int(input())):\n    bool = True\n    flag = True\n    n = int(input())\n    l = list(map(int, input().split()))\n    mod = 10 ** 9 + 7\n    ans = 0\n    d = defaultdict(lambda : [])\n    for i in range(n):\n        d[l[i]].append(i)\n    for ele in d:\n        if len(d[ele]) >= ele:\n            for i in range(len(d[ele]) - ele + 1):\n                if i == 0:\n                    x = d[ele][i] + 1\n                else:\n                    x = d[ele][i] - d[ele][i - 1]\n                if i == len(d[ele]) - ele:\n                    y = n - d[ele][i + ele - 1]\n                else:\n                    y = d[ele][i + ele] - d[ele][i + ele - 1]\n                ans += x * y * ele\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    number = int(input())\n    list_number = list(map(int, input().split()))\n    map_number = {}\n    for i in range(number):\n        current_number = list_number[i]\n        if current_number in map_number:\n            map_number[current_number].append(i + 1)\n        else:\n            map_number[current_number] = []\n            map_number[current_number].append(i + 1)\n    for i in map_number:\n        map_number[i].insert(0, 0)\n        map_number[i].append(number + 1)\n    ans = 0\n    for i in map_number:\n        current = map_number[i]\n        length = len(map_number[i])\n        for j in range(1, length - i):\n            ans += i * ((current[j] - current[j - 1]) * (current[j + i] - current[j + i - 1]))\n    print(ans)", "for tc in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    freq = dict()\n    for x in ls:\n        if freq.get(x) is None:\n            freq[x] = 1\n        else:\n            freq[x] += 1\n    dis = dict()\n    for x in range(len(ls)):\n        if freq[ls[x]] >= ls[x]:\n            if dis.get(ls[x]) is None:\n                dis[ls[x]] = [x]\n            else:\n                dis[ls[x]].append(x)\n    res = 0\n    for x in dis:\n        ta = 0\n        prev = 0\n        for r in range(x - 1, len(dis[x])):\n            leftSena = dis[x][ta] - prev + 1\n            if r == len(dis[x]) - 1:\n                rightSena = len(ls) - 1 - dis[x][r] + 1\n            else:\n                rightSena = dis[x][r + 1] - 1 - dis[x][r] + 1\n            res += leftSena * rightSena * x\n            prev = dis[x][ta] + 1\n            ta += 1\n    print(res)", "for t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    dic = {}\n    count = 0\n    for i in range(N):\n        if A[i] not in dic:\n            dic[A[i]] = []\n        dic[A[i]].append(i)\n    for i in dic.keys():\n        if len(dic.get(i)) < i:\n            continue\n        temp = []\n        temp += dic.get(i)\n        temp.insert(0, -1)\n        temp.append(N)\n        for j in range(1, len(temp) - i):\n            count += i * (temp[j] - temp[j - 1]) * (temp[i + j] - temp[i + j - 1])\n    print(count)", "for t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    dic = {}\n    for i in range(N):\n        if A[i] not in dic:\n            dic[A[i]] = []\n        dic[A[i]].append(i)\n    count = 0\n    for i in dic.keys():\n        if len(dic.get(i)) < i:\n            continue\n        temp = []\n        temp += dic.get(i)\n        temp.insert(0, -1)\n        temp.append(N)\n        for j in range(1, len(temp) - i):\n            count += i * (temp[j] - temp[j - 1]) * (temp[i + j] - temp[i + j - 1])\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        if l[i] not in d:\n            d[l[i]] = [0, i + 1]\n        else:\n            d[l[i]].append(i + 1)\n    ans = 0\n    for (k, v) in d.items():\n        v.append(n + 1)\n        if len(v) >= k + 2:\n            l = 1\n            r = l + k - 1\n            temp = 0\n            while r < len(v) - 1:\n                temp += abs(v[l] - v[l - 1]) * abs(v[r] - v[r + 1])\n                l += 1\n                r += 1\n            ans += temp * k\n    print(ans)", "from collections import *\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    d = defaultdict(list)\n    for j in range(n):\n        d[l[j]].append(j)\n    for j in d:\n        li = 0\n        ui = n - 1\n        dl = d[j]\n        q = len(dl)\n        r = q - j\n        if r < 0:\n            continue\n        else:\n            for k in range(r + 1):\n                u = dl[k + j - 1]\n                l = dl[k]\n                if k == 0:\n                    li = 0\n                else:\n                    li = dl[k - 1] + 1\n                if k + j >= q:\n                    ui = n - 1\n                else:\n                    ui = dl[k + j] - 1\n                ans += (ui - u + 1) * (l - li + 1) * j\n    print(ans)", "import sys\nfrom collections import deque\n\ndef f(l, n, f):\n    a = 0\n    x = n - 1\n    while a <= x:\n        m = a + (x - a) // 2\n        if l[m] == f:\n            return m\n        elif l[m] > f:\n            x = m - 1\n        else:\n            a = m + 1\n    return None\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    l = list(map(int, sys.stdin.readline().split()))\n    d = {}\n    for i in range(n):\n        if l[i] in d:\n            d[l[i]].append(i)\n        else:\n            d.update({l[i]: deque([i])})\n    ans = 0\n    for x in d:\n        if len(d[x]) < x:\n            continue\n        else:\n            d[x].append(n)\n            d[x].appendleft(-1)\n            s = 0\n            for i in range(1, len(d[x]) - x):\n                y = (d[x][i + x] - d[x][i + x - 1]) * (d[x][i] - d[x][i - 1])\n                s = s + y\n            ans = ans + x * s\n    print(ans)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n    sys.stderr = open('error.txt', 'w')\ndepth = 200001\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nlinp = lambda : list(minp())\nminp = lambda : map(int, input().split())\nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\ndxy = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndef expo(a, b):\n    if not b:\n        return 1\n    v = expo(a, b // 2)\n    v = v * v % mod\n    if b % 2:\n        v = v * a % mod\n    return v\n\ndef modinv(a, b):\n    d = expo(b, mod - 2)\n    v = a * d % mod\n    return v\n\ndef checkPrime(n):\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    return x ^ x >> 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a) + 1\n    dp = defaultdict(lambda : [0])\n    for i in range(n):\n        dp[a[i]].append(i + 1)\n    a = list(set(a))\n    for i in a:\n        dp[i].append(n + 1)\n    ans = 0\n    for i in a:\n        if len(dp[i]) - 2 < i:\n            continue\n        res = 0\n        for j in range(i, len(dp[i]) - 1):\n            l = dp[i][j - i + 1] - dp[i][j - i]\n            r = dp[i][j + 1] - dp[i][j]\n            res = res + l * r\n        res = res * i\n        ans = ans + res\n    print(ans)", "from collections import *\nfor u in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(n):\n        d[l[i]].append(i)\n    s = 0\n    for i in d:\n        (a, b) = (1, 1)\n        m = len(d[i])\n        for j in range(m):\n            if j - 1 >= 0:\n                a = d[i][j] - d[i][j - 1]\n            else:\n                a = d[i][j] + 1\n            if j + i - 1 < m:\n                if j + i < m:\n                    b = d[i][j + i] - d[i][j + i - 1]\n                else:\n                    b = n - 1 - d[i][j + i - 1] + 1\n                s += a * b * i\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    freq = []\n    d = {}\n    for i in range(len(a)):\n        if a[i] in d:\n            d[a[i]] += [i]\n        else:\n            d[a[i]] = [-1, i]\n    result = 0\n    for item in d:\n        if len(d[item]) < item:\n            continue\n        d[item] += [n]\n        l = 1\n        r = item\n        while r < len(d[item]) - 1:\n            ans = (d[item][l] - d[item][l - 1]) * (d[item][r + 1] - d[item][r]) * item\n            result += ans\n            r += 1\n            l += 1\n    print(result)"]