["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    stones = list(map(int, input().split()))\n    ans = n * stones[0] - stones[-1]\n    jumps = [0]\n    val = 0\n    for i in range(1, n):\n        if stones[i] <= stones[jumps[-1]]:\n            val += (i - jumps[-1] + 1) * stones[jumps[-1]] - stones[i]\n            jumps.append(i)\n    if jumps[-1] != n - 1:\n        val += (n - jumps[-1]) * stones[jumps[-1]] - stones[-1]\n    print(max(0, min(val, ans)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    stones = list(map(int, input().split()))\n    ans = n * stones[0] - stones[-1]\n    jumps = [0]\n    val = 0\n    for i in range(1, n):\n        if stones[i] <= stones[jumps[-1]]:\n            val += (i - jumps[-1] + 1) * stones[jumps[-1]] - stones[i]\n            jumps.append(i)\n    if jumps[-1] != n - 1:\n        val += (n - jumps[-1]) * stones[jumps[-1]] - stones[-1]\n    print(max(0, min(val, ans)))", "def subArrayJump(n, arr):\n    e = 0\n    st = 1\n    for idx in range(1, n):\n        if arr[st - 1] > arr[idx] or idx == n - 1:\n            x = (idx - st + 2) * arr[st - 1] - arr[idx]\n            e = e + x\n            st = idx + 1\n    return max(0, e)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    print(subArrayJump(n, arr))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    ans = 0\n    minn = s[0]\n    for i in range(n):\n        ans += minn\n        minn = min(minn, s[i])\n    print(max(ans - s[-1], 0))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    ans = 0\n    minn = s[0]\n    for i in range(n):\n        ans += minn\n        if s[i] < minn:\n            minn = s[i]\n    ans -= s[-1]\n    if ans < 0:\n        ans = 0\n    print(ans)", "import sys\nimport math\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    j = 1\n    while j < n:\n        if arr[j] > arr[i] and j != n - 1:\n            j += 1\n        else:\n            ans += arr[i] * (j - i + 1) - arr[j]\n            i = j\n            j += 1\n    print(max(0, ans))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    lst = list(map(int, input().split()))\n    energy = 0\n    i = 0\n    for j in range(n - 1):\n        if lst[i] > lst[j]:\n            energy += (j - i + 1) * lst[i] - lst[j]\n            i = j\n    energy += (n - 1 - i + 1) * lst[i] - lst[n - 1]\n    print(max(energy, 0))\n    t -= 1", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    e = 0\n    if n != 1:\n        d = 1\n        i = 1\n        p = a[0]\n        while i < n:\n            if p > a[i]:\n                d += 1\n                e += d * p - a[i]\n                d = 1\n                p = a[i]\n            else:\n                d += 1\n                if i == n - 1:\n                    e += d * p - a[i]\n            i += 1\n    if e < 0:\n        e = 0\n    print(e)", "import math\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    stones = list(map(int, input().split()))\n    prev = 0\n    min_energy = 0\n    for i in range(1, n):\n        if stones[i] < stones[prev] or i == n - 1:\n            min_energy += (i - prev + 1) * stones[prev] - stones[i]\n            prev = i\n    print(max(0, min_energy))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    position = 0\n    ans = 0\n    for i in range(1, n):\n        if a[i] < a[position]:\n            ans += (i - position + 1) * a[position] - a[i]\n            position = i\n    ans += (n - 1 - position + 1) * a[position] - a[n - 1]\n    if ans >= 0:\n        print(ans)\n    else:\n        print(0)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    position = 0\n    ans = 0\n    for i in range(1, n):\n        if a[i] < a[position]:\n            ans += (i - position + 1) * a[position] - a[i]\n            position = i\n    if position != n - 1:\n        ans += (n - 1 - position + 1) * a[position] - a[n - 1]\n    if ans >= 0:\n        print(ans)\n    else:\n        print(0)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    position = 0\n    ans = 0\n    for i in range(1, n):\n        if a[i] < a[position]:\n            ans += (i - position + 1) * a[position] - a[i]\n            position = i\n    if a != n - 1:\n        ans += (n - 1 - position + 1) * a[position] - a[n - 1]\n    if ans >= 0:\n        print(ans)\n    else:\n        print(0)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    position = 0\n    ans = 0\n    for i in range(1, n):\n        if a[i] < a[position]:\n            ans += (i - position + 1) * a[position] - a[i]\n            position = i\n    if a != n - 1:\n        ans += (n - 1 - position + 1) * a[position] - a[n - 1]\n    if ans >= 0:\n        print(ans)\n    else:\n        print(0)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    if N == 1:\n        print(0)\n    else:\n        ans = 2 * A[0] - A[-1]\n        temp = A[0]\n        for i in range(1, N - 1):\n            if A[i] >= temp:\n                ans += temp\n            else:\n                ans += A[i]\n                temp = A[i]\n        print(max(0, ans))", "from typing import DefaultDict\nfrom math import sqrt\nimport math\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nfor _ in range(int(input())):\n    bool = True\n    ans = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    new = []\n    temp = l[0]\n    if n == 1:\n        print(0)\n    elif n == 2:\n        print(max(2 * l[0] - l[1], 0))\n    else:\n        for i in range(n):\n            if i == n - 1:\n                new.append([l[i], i])\n            elif l[i] <= temp:\n                new.append([l[i], i])\n                temp = l[i]\n        for i in range(len(new) - 1):\n            ans += new[i][0] * (new[i + 1][1] - new[i][1] + 1)\n            ans -= new[i + 1][0]\n        print(max(0, ans))", "get_int = lambda : int(input())\nget_list_int = lambda : list(map(int, input().split()))\nt = get_int()\nfor t_itr in range(t):\n    n = get_int()\n    arr = get_list_int()\n    ans = 0\n    prev = 0\n    for i in range(1, n):\n        if i == n - 1 or arr[i] <= arr[prev]:\n            ans += (i - prev + 1) * arr[prev] - arr[i]\n            prev = i\n    print(max(0, ans))", "def solve(arr, n):\n    energy = 0\n    curr_cost = arr[0]\n    last_step = 1\n    last_completed = False\n    for i in range(n):\n        last_completed = False\n        if curr_cost > arr[i]:\n            energy += curr_cost * (i + 1 - last_step + 1) - arr[i]\n            curr_cost = arr[i]\n            last_step = i + 1\n            last_completed = True\n    if not last_completed:\n        energy += curr_cost * (n + 1 - last_step) - arr[-1]\n    return max(energy, 0)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    stones = [int(x) for x in input().split()]\n    print(solve(stones, n))", "from math import *\nfor u in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (x, y) = (0, 0)\n    s = 0\n    while y < n:\n        if l[y] >= l[x]:\n            y = y + 1\n        else:\n            s += (y - x + 1) * l[x] - l[y]\n            x = y\n    s += (n - x) * l[x] - l[n - 1]\n    if s <= 0:\n        print(0)\n    else:\n        print(s)", "from math import *\nfor u in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (x, y) = (0, 0)\n    s = 0\n    while y < n:\n        if l[y] >= l[x]:\n            y = y + 1\n        else:\n            s += (y - x + 1) * l[x] - l[y]\n            x = y\n    s += (n - x) * l[x] - l[n - 1]\n    if s <= 0:\n        print(0)\n    else:\n        print(s)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    energy = 0\n    lp = 0\n    rp = 0\n    while rp < N:\n        if A[rp] >= A[lp]:\n            rp += 1\n        else:\n            energy += (rp - lp + 1) * A[lp] - A[rp]\n            lp = rp\n    energy += (N - lp) * A[lp] - A[N - 1]\n    if energy <= 0:\n        print(0)\n    else:\n        print(energy)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (prev, ans) = (0, 0)\n    for i in range(1, n):\n        if l[i] < l[prev] or i == n - 1:\n            ans = ans + (i - prev + 1) * l[prev] - l[i]\n            prev = i\n    ans = max(0, ans)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (prev, ans) = (0, 0)\n    for i in range(1, n):\n        if l[i] < l[prev] or i == n - 1:\n            ans = ans + (i - prev + 1) * l[prev] - l[i]\n            prev = i\n    ans = max(0, ans)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n    elif n == 2:\n        ans = 2 * x[0] - x[1]\n    elif n > 2:\n        ans = 2 * x[0] - x[-1]\n        temp = x[0]\n        for i in range(1, n - 1):\n            if temp <= x[i]:\n                ans += temp\n            elif temp > x[i]:\n                ans += x[i]\n                temp = x[i]\n    print(max(0, ans))", "from sys import stdin, stdout\nwrite = stdout.write\ninput = stdin.readline\nfor t in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().strip().split()))\n    dp = [0]\n    (mindp, minx) = (0, 0)\n    for i in range(1, n):\n        temp = float('inf')\n        for j in (mindp, minx):\n            temp = min(temp, dp[j] + ((i - j + 1) * A[j] - A[i]))\n        if dp[i - 1] <= dp[mindp]:\n            mindp = i\n        if A[i] <= A[minx]:\n            minx = i\n        dp.append(temp)\n    print(max(0, dp[-1]))", "def I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef LI():\n    return [*map(int, input().strip().split())]\nimport sys, os, copy, string, math, time, functools, fractions\ninput = sys.stdin.readline\nfrom io import BytesIO, IOBase\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, chain, combinations, groupby\nfrom operator import itemgetter\nfrom types import GeneratorType\nfrom typing import Iterable, TypeVar, Union\n\ndef main():\n    n = II()\n    a = LI()\n    if n == 1:\n        print(0)\n    else:\n        final = 0\n        last = 0\n        for i in range(1, n - 1):\n            if a[i] > a[last]:\n                continue\n            final += (i - last + 1) * a[last] - a[i]\n            last = i\n        final += (n - 1 - last + 1) * a[last] - a[-1]\n        print(max(final, 0))\nfor _ in range(II()):\n    main()", "from sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    dp = [float('inf') for i in range(n)]\n    all = [0]\n    last = a[0]\n    for i in range(1, n):\n        if a[i] < last:\n            all.append(i)\n            last = a[i]\n    if all[-1] != n - 1:\n        all.append(n - 1)\n    ans = 0\n    p = len(all)\n    for i in range(p - 1):\n        first = all[i]\n        second = all[i + 1]\n        ans += (second - first + 1) * a[first] - a[second]\n    print(max(0, ans))"]