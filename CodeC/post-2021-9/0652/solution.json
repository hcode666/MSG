["def solve(a, b):\n    diff = max(0, a[-1] - c)\n    return diff < len(b) and (diff == 0 or b[diff - 1] <= c) and (b[-1] + diff - len(a) <= c)\nfor t in range(int(input())):\n    (n, m, c) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    print('YES' if solve(x, y) or solve(y, x) else 'NO')", "def solve(a, b):\n    diff = max(0, a[-1] - c)\n    return diff < len(b) and (diff == 0 or b[diff - 1] <= c) and (b[-1] + diff - len(a) <= c)\nfor t in range(int(input())):\n    (n, m, c) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    print('YES' if solve(x, y) or solve(y, x) else 'NO')", "def solve(a, b, cost):\n    n = len(a)\n    m = len(b)\n    diff = max(a[-1] - cost, 0)\n    if a[-1] > cost and diff > m:\n        return False\n    if b[-1] + diff - cost > n:\n        return False\n    if diff > 0 and b[diff - 1] > cost:\n        return False\n    return True\nt = int(input().strip())\nwhile t > 0:\n    t -= 1\n    (n, m, c) = map(int, input().strip().split())\n    arr1 = list(map(int, input().strip().split()))\n    arr2 = list(map(int, input().strip().split()))\n    if solve(arr1, arr2, c) or solve(arr2, arr1, c):\n        print('YES')\n    else:\n        print('NO')", "def solveBasic():\n    if A[-1] <= C:\n        return 'YES' if B[-1] - N <= C else 'NO'\n    elif B[-1] <= C:\n        return 'YES' if A[-1] - M <= C else 'NO'\n    else:\n        (needA, needB) = (A[-1] - C, B[-1] - C)\n        return 'YES' if needA <= M and B[needA - 1] <= C and (B[-1] + needA - N <= C) or (needB <= N and A[needB - 1] <= C and (A[-1] + needB - M <= C)) else 'NO'\nfor _ in range(int(input())):\n    (N, M, C) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    print(solveBasic())", "def solveBasic():\n    if A[-1] <= C:\n        return 'YES' if B[-1] - N <= C else 'NO'\n    elif B[-1] <= C:\n        return 'YES' if A[-1] - M <= C else 'NO'\n    else:\n        (needA, needB) = (A[-1] - C, B[-1] - C)\n        return 'YES' if needA <= M and B[needA - 1] <= C and (B[-1] + needA - N <= C) or (needB <= N and A[needB - 1] <= C and (A[-1] + needB - M <= C)) else 'NO'\nfor _ in range(int(input())):\n    (N, M, C) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    B = [int(x) for x in input().split()]\n    print(solveBasic())", "import bisect\nfor _ in range(int(input())):\n    (n, m, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    al = bisect.bisect_right(l, c)\n    aa = bisect.bisect_right(a, c)\n    x = l[-1] - c\n    y = a[-1] - c\n    ele = 0\n    if x >= 0 and y >= 0:\n        ele = x + y\n    elif x >= 0:\n        ele = x\n    elif y >= 0:\n        ele = y\n    if x <= aa and ele <= n or (y <= al and ele <= m):\n        print('YES')\n    else:\n        print('NO')", "def sol(na, nb, a, b, c):\n    extra = a[-1] - c\n    if extra <= 0:\n        if b[-1] - na <= c:\n            return 1\n        else:\n            return 0\n    else:\n        n = 0\n        for i in range(nb):\n            if b[i] > c:\n                n = i\n                break\n        if n < extra:\n            return 0\n        elif b[-1] - na + extra <= c:\n            return 1\n        else:\n            return 0\nt = int(input())\nfor ijkl in range(t):\n    (na, nb, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = max(sol(na, nb, a, b, c), sol(nb, na, b, a, c))\n    d = {0: 'NO', 1: 'YES'}\n    print(d[ans])", "def solve(a, b):\n    diff = max(0, a[-1] - c)\n    return diff < len(b) and (diff == 0 or b[diff - 1] <= c) and (b[-1] + diff - len(a) <= c)\nfor t in range(int(input())):\n    (n, m, c) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    print('YES' if solve(x, y) or solve(y, x) else 'NO')", "def solve(a, b):\n    diff = max(0, a[-1] - c)\n    return diff < len(b) and (diff == 0 or b[diff - 1] <= c) and (b[-1] + diff - len(a) <= c)\nfor t in range(int(input())):\n    (n, m, c) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    print('YES' if solve(x, y) or solve(y, x) else 'NO')", "def solve(a, b):\n    diff = max(0, a[-1] - c)\n    return diff < len(b) and (diff == 0 or b[diff - 1] <= c) and (b[-1] + diff - len(a) <= c)\nfor t in range(int(input())):\n    (n, m, c) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    print('YES' if solve(x, y) or solve(y, x) else 'NO')", "import bisect\nfor _ in range(int(input())):\n    (n, m, c) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    al = bisect.bisect_right(l, c)\n    aa = bisect.bisect_right(a, c)\n    x = l[-1] - c\n    y = a[-1] - c\n    ele = 0\n    if x >= 0 and y >= 0:\n        ele = x + y\n    elif x >= 0:\n        ele = x\n    elif y >= 0:\n        ele = y\n    if x <= aa and ele <= n or (y <= al and ele <= m):\n        print('YES')\n    else:\n        print('NO')"]