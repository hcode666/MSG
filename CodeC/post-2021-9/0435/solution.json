["import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    elif n & n - 1 == 0:\n        print((n * 2 - 1) % 1000000007)\n    else:\n        a = math.floor(math.log(n, 2))\n        n = 2 ** (a + 1)\n        print(n % 1000000007)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    elif n & n - 1 == 0:\n        print((n * 2 - 1) % 1000000007)\n    else:\n        a = math.floor(math.log(n, 2))\n        n = 2 ** (a + 1)\n        print(n % 1000000007)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    elif n & n - 1 == 0:\n        print((n * 2 - 1) % 1000000007)\n    else:\n        a = math.floor(math.log(n, 2))\n        n = 2 ** (a + 1)\n        print(n % 1000000007)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = 1\n    mod = 1000000000.0 + 7\n    if n <= 2:\n        print(n)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        m = (i + j) // 2\n        if 2 ** m <= n:\n            l = m\n            i = m + 1\n        else:\n            j = m\n    l = 2 ** l % mod\n    if l == n:\n        l = l * 2 % mod\n        l = l - 1\n        print(int(l))\n    else:\n        print(int(2 * l % mod))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = 1\n    mod = 1000000000.0 + 7\n    if n <= 2:\n        print(n)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        m = (i + j) // 2\n        if 2 ** m <= n:\n            l = m\n            i = m + 1\n        else:\n            j = m\n    l = 2 ** l % mod\n    if l == n:\n        l = l * 2 % mod\n        l = l - 1\n        print(int(l))\n    else:\n        print(int(2 * l % mod))", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    n = int(input())\n    l = 1\n    mod = 1000000000.0 + 7\n    if n <= 2:\n        print(n)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        m = (i + j) // 2\n        if 2 ** m <= n:\n            l = m\n            i = m + 1\n        else:\n            j = m\n    l = 2 ** l % mod\n    if l == n:\n        l = l * 2 % mod\n        l = l - 1\n        print(int(l))\n    else:\n        print(int(2 * l % mod))", "import math\nT = int(input())\nfor t in range(0, T):\n    N = int(input())\n    ans = 0\n    M = 1000000007\n    if N == 1:\n        ans = 1\n    elif N == 2:\n        ans = 2\n    elif N & N - 1 == 0:\n        ans = 2 * N - 1\n    else:\n        ans = pow(2, int(math.log(N, 2)) + 1)\n    print(ans % M)", "import math\nt = int(input())\nfor zz in range(t):\n    n = int(input())\n    i = 1\n    p = 0\n    q = 0\n    z = 0\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        while True:\n            if 2 ** i > n and 2 ** (i - 1) < n:\n                p = i\n                break\n            elif 2 ** i == n:\n                q = i\n                break\n            i += 1\n        if p > 0:\n            print(2 ** p % (10 ** 9 + 7))\n        elif q > 0:\n            print(2 * n - 1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        for i in range(1, n):\n            if n < 2 ** i:\n                break\n        if n == 2 ** (i - 1):\n            ans = 2 * n - 1\n            print(ans % 1000000007)\n        else:\n            ans = 2 ** i\n            print(ans % 1000000007)", "m = 1000000007\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    if n == 2:\n        print(2)\n        continue\n    j = 2\n    while n > j:\n        j *= 2\n    if j == n:\n        print((j * 2 - 1) % m)\n    else:\n        print(j % m)", "l = 10 ** 9 + 7\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    elif n & n - 1 == 0:\n        print((n * 2 - 1) % l)\n    else:\n        j = 2\n        while j < n:\n            j = j * 2\n        print(j % l)", "MOD = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    if n == 1:\n        return print(1)\n    if n == 2:\n        return print(2)\n    bit = 1\n    while bit <= n:\n        bit <<= 1\n    if bit == n * 2:\n        bit = bit - 1\n    print(bit % MOD)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\ntry:\n    for _ in range(int(input())):\n        n = int(input())\n        if n == 1:\n            print(1)\n        elif n == 2:\n            print(2)\n        else:\n            bits = int(math.log2(n))\n            ans = pow(2, bits + 1)\n            if n & n - 1 == 0:\n                print((2 * n - 1) % (pow(10, 9) + 7))\n            else:\n                print(ans % (pow(10, 9) + 7))\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    digits = 0\n    x = n\n    while x != 0:\n        x >>= 1\n        digits += 1\n    largest = (1 << digits) - 1\n    check = 1 << digits - 1\n    if check != n:\n        largest += 1\n    if n == 2:\n        print(2)\n    else:\n        divider = pow(10, 9) + 7\n        ans = largest % divider\n        print(ans)", "mod = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    n = int(input())\n    print(n if n < 3 else pow(2, len(bin(n)) - 2, mod) if n & n - 1 else (2 * n - 1) % mod)", "for _ in range(int(input())):\n    n = int(input())\n    mod = int(1000000000.0 + 7)\n    if n == 1 or n == 2:\n        print(n)\n    else:\n        ans = 1\n        while ans < n:\n            ans *= 2\n        if n & n - 1 == 0:\n            ans = ans * 2 - 1\n        print(ans % mod)", "for _ in range(int(input())):\n    n = int(input())\n    mod = int(1000000000.0 + 7)\n    if n == 1 or n == 2:\n        print(n)\n    elif n & n - 1 == 0:\n        print((n * 2 - 1) % mod)\n    else:\n        cnt = 0\n        while n != 0:\n            n //= 2\n            cnt += 1\n        print(2 ** cnt % mod)", "for _ in range(int(input())):\n    n = int(input())\n    mod = int(1000000000.0 + 7)\n    if n == 1 or n == 2:\n        print(n)\n    elif n & n - 1 == 0:\n        print((2 * n - 1) % mod)\n    else:\n        print(2 ** len(bin(n)[2:]) % mod)", "for _ in range(int(input())):\n    n = int(input())\n    mod = int(1000000000.0 + 7)\n    if n == 1 or n == 2:\n        print(n)\n    else:\n        binn = bin(n)[2:]\n        ans = 2 ** len(binn) % mod\n        if binn.count('1') == 1:\n            ans -= 1\n        print(ans % mod)", "try:\n    p = int(input())\n    while p > 0:\n        p = p - 1\n        n = int(input())\n        t = 0\n        while pow(2, t) <= n:\n            t = t + 1\n        if n == 2:\n            print(2)\n        elif n == pow(2, t - 1):\n            k = pow(2, t) - 1\n            print(k % 1000000007)\n        else:\n            d = pow(2, t)\n            print(d % 1000000007)\nexcept Exception:\n    pass", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(2)\n    elif n & n - 1 == 0:\n        print((2 * n - 1) % 1000000007)\n    else:\n        a = int(math.log2(n))\n        print(2 ** (a + 1) % 1000000007)", "for i in range(int(input())):\n    z = int(input())\n    x = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    a = 0\n    b = 40\n    while b > a:\n        r = (a + b) // 2\n        if 2 ** r <= z:\n            x = r\n            a = r + 1\n        else:\n            b = r\n    x = 2 ** x % rem\n    if x == z:\n        x = x * 2 % rem\n        x = x - 1\n        print(x)\n    else:\n        print(2 * x % rem)", "import numpy as np\nT = int(input(''))\nnumlist1 = list()\nfor i in range(T):\n    numlist1.append(int(input('')))\nMOD = 10 ** 9 + 7\nfor nums in numlist1:\n    numlist = range(1, nums)\n    if nums == 2:\n        print('2')\n    elif np.log2(nums) - int(np.log2(nums)) == 0:\n        print((int(2 ** (np.floor(np.log2(nums)) + 1)) - 1) % MOD)\n    else:\n        print(int(2 ** (np.floor(np.log2(nums)) + 1)) % MOD)", "import numpy as np\nT = int(input(''))\nnumlist1 = list()\nfor i in range(T):\n    numlist1.append(int(input('')))\nfor nums in numlist1:\n    MOD = 10 ** 9 + 7\n    numlist = range(1, nums)\n    if nums == 2:\n        print('2')\n    elif np.log2(nums) - int(np.log2(nums)) == 0:\n        print((int(2 ** (np.floor(np.log2(nums)) + 1)) - 1) % MOD)\n    else:\n        print(int(2 ** (np.floor(np.log2(nums)) + 1)) % MOD)", "import sys\nfrom math import log, log2, ceil\n\ndef solve():\n    n = int(input())\n    if n <= 2:\n        print(n)\n        return\n    p = log2(n)\n    if ceil(p) == p:\n        print((n * 2 - 1) % (1000000000 + 7))\n        return\n    p = ceil(p)\n    print(pow(2, p) % (1000000000 + 7))\nfor _ in range(int(input())):\n    solve()", "import math\nmod = int(1000000000.0 + 7)\ntests = int(input())\nfor testcases in range(tests):\n    n = int(input())\n    x = int(math.log2(n)) + 1\n    ans = 2 ** x\n    if math.log2(n) == int(math.log2(n)):\n        ans -= 1\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        print(ans % mod)", "import math\nn = int(input())\nk = 1000000007\nfor i in range(n):\n    l = []\n    n1 = int(input())\n    n3 = int(n1)\n    if n1 < 1:\n        continue\n    if n1 == 2:\n        print(2)\n    elif n1 & n1 - 1 == 0:\n        print((2 * n3 - 1) % k)\n    else:\n        bit = math.log2(n1)\n        ans = 2 ** (int(bit) + 1)\n        print(ans % k)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    temp = n\n    c = 0\n    ans = 0\n    mo = int(1000000000.0) + 7\n    count = 0\n    while n > 0:\n        if n % 2 != 0:\n            count += 1\n        n //= 2\n        c += 1\n    for po in range(c):\n        ans += 2 ** po\n    ans = (ans + 1) % mo\n    if temp == 2:\n        ans = 2\n    elif count == 1:\n        ans = 2 * temp - 1\n    print(ans % mo)", "import math\nM = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('1')\n    elif n == 2:\n        print('2')\n    else:\n        if n & n - 1 == 0:\n            ans = int(2 * n - 1) % M\n        else:\n            bits = 1 + int(math.log2(n))\n            ans = int(2 ** bits) % M\n        print(ans)", "def main():\n    mod = 10 ** 9 + 7\n    for _ in range(int(input())):\n        n = int(input())\n        if n <= 2:\n            print(n)\n        elif n & n - 1:\n            print(pow(2, len(bin(n)) - 2, mod))\n        else:\n            print((2 * n - 1) % mod)\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        flag = True\n        length = 0\n        while n > 1:\n            if n % 2 == 1 and n != 2:\n                flag = False\n            n //= 2\n            length += 1\n        ans = int(math.pow(2, length + 1))\n        if flag:\n            print((ans - 1) % 1000000007)\n        else:\n            print(ans % 1000000007)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(n)\n    elif n & n - 1 == 0:\n        print(pow(2 * n - 1, 1, 10 ** 9 + 7))\n    else:\n        a = math.ceil(math.log2(n))\n        print(pow(2 ** a, 1, 10 ** 9 + 7))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(n)\n    elif n & n - 1 == 0:\n        print(pow(2 * n - 1, 1, 10 ** 9 + 7))\n    else:\n        a = int(math.log2(n))\n        print(pow(2 ** (a + 1), 1, 10 ** 9 + 7))", "import math\nmod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        if n & n - 1 == 0:\n            ans = (2 * n - 1) % mod\n        else:\n            bit = int(math.log2(n))\n            ans = int(math.pow(2, bit + 1)) % mod\n        print(ans)", "mod = 10 ** 9 + 7\n\ndef exp(x):\n    n = 1\n    base = 0\n    while n < x:\n        n *= 2\n        base += 1\n    return base\n\ndef power(x, n):\n    ans = 1\n    x = x % mod\n    while n:\n        if n & 1:\n            ans = ans * x % mod\n        n = n >> 1\n        x = x * x % mod\n    return ans\nfor u in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(n)\n    else:\n        p = exp(n)\n        if 2 ** p == n:\n            ans = power(2, p + 1) - 1\n        else:\n            ans = power(2, p)\n        print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    elif n & n - 1 == 0:\n        print((2 * n - 1) % 1000000007)\n    else:\n        a = math.floor(math.log2(n))\n        n = 2 ** (a + 1)\n        print(n % 1000000007)", "import sys\nimport math\n\ndef isp(n):\n    return math.ceil(math.log2(n)) == int(math.log2(n))\n\ndef pr(a, b):\n    if b == 1:\n        return a\n    if b % 2:\n        return a * pr(a * a, b // 2)\n    else:\n        return pr(a * a, b // 2)\ninput = sys.stdin.readline\nt = int(input())\nm = 10 ** 9 + 7\nfor i in range(t):\n    n = int(input())\n    x = math.ceil(math.log2(n))\n    if n == 2:\n        print(2)\n    elif isp(n):\n        print((n * 2 - 1) % m)\n    else:\n        print(pr(2, x) % m)", "import math\nt = int(input())\nfor _ in range(t):\n    num = int(input())\n    if num <= 2:\n        print(num)\n    elif num & num - 1 == 0:\n        print((num * 2 - 1) % 1000000007)\n    else:\n        power = int(math.log2(num))\n        print(2 ** (power + 1) % 1000000007)", "import math as m\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    cnt = 0\n    a = n\n    while 1:\n        if a / 2 < 1:\n            break\n        else:\n            a = a / 2\n            cnt += 1\n    if n == 1 or n == 2:\n        print(2 ** cnt)\n    elif n == 2 ** cnt:\n        s = 2 ** (cnt + 1)\n        print((s - 1) % (10 ** 9 + 7))\n    else:\n        s = 2 ** (cnt + 1)\n        print(s % (10 ** 9 + 7))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        tot = int(math.log(n, 2))\n        if n & n - 1 != 0:\n            print(2 ** (tot + 1) % (10 ** 9 + 7))\n        else:\n            print((2 ** (tot + 1) - 1) % (10 ** 9 + 7))", "for _t in range(int(input())):\n    n = int(input())\n    ans = 1\n    if n == 2:\n        print('2')\n        continue\n    while ans < n:\n        ans *= 2\n    if n == ans:\n        ans *= 2\n        ans -= 1\n    print(int(ans % (1000000000.0 + 7)))", "def solve():\n    mod = 10 ** 9 + 7\n    n = int(input())\n    if n <= 2:\n        print(n)\n    elif n & n - 1:\n        print(pow(2, len(bin(n)) - 2, mod))\n    else:\n        print((2 * n - 1) % mod)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import log\na = int(input())\nmod = 1000000007\nfor i in range(a):\n    b = int(input())\n    if b == 2:\n        print(2)\n    elif b & b - 1 == 0:\n        print((2 * b - 1) % mod)\n    else:\n        print(2 ** int(log(b, 2) + 1) % mod)", "for _ in range(int(input())):\n    n = int(input())\n    b = bin(n).replace('0b', '')\n    l = len(b)\n    if n == 2:\n        print(2)\n    elif n == 2 ** (l - 1) and n <= 10 ** 12:\n        print((2 ** l - 1) % (10 ** 9 + 7))\n    else:\n        print(2 ** l % (10 ** 9 + 7))", "import numpy as np\nCONST = 1000000007\nT = int(input(''))\nnumlist1 = list()\nfor i in range(T):\n    numlist1.append(int(input('')))\nfor nums in numlist1:\n    numlist = range(1, nums)\n    if nums == 2:\n        print('2')\n    elif np.log2(nums) - int(np.log2(nums)) == 0:\n        print((int(2 ** (np.floor(np.log2(nums)) + 1)) - 1) % CONST)\n    else:\n        print(int(2 ** (np.floor(np.log2(nums)) + 1)) % CONST)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = len(bin(n).replace('0b', ''))\n    m = 10 ** 9 + 7\n    if n == 1 or n == 2:\n        print(n)\n    else:\n        b = math.log(n, 2)\n        if math.floor(b) == math.ceil(b):\n            ans = 2 ** a - 1\n        else:\n            ans = 2 ** a\n        print(ans % m)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    if n == 2:\n        print(2)\n        continue\n    if n & n + 1 == 0:\n        print((n + 1) % mod)\n    elif n & n - 1 == 0:\n        print((n * 2 - 1) % mod)\n    else:\n        print(int('1' + '0' * len(bin(n)[2:]), 2) % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    li = []\n    if n == 1:\n        print(1)\n        continue\n    if n == 2:\n        print(2)\n        continue\n    if n & n + 1 == 0:\n        print((n + 1) % mod)\n    elif n & n - 1 == 0:\n        print((n * 2 - 1) % mod)\n    else:\n        print(int('1' + '0' * len(bin(n)[2:]), 2) % mod)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    mod = 1000000007\n    if n == 2:\n        print(2)\n        continue\n    elif n == 1:\n        print(1)\n        continue\n    x = math.log2(n)\n    if x - int(x) == 0:\n        print((2 ** (int(x) + 1) - 1) % mod)\n        continue\n    x = math.ceil(x)\n    print(2 ** x % mod)", "from typing import DefaultDict\nfrom math import sqrt\nfrom collections import OrderedDict, defaultdict\nimport math\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d = DefaultDict(lambda : 0)\n    for ele in l:\n        d[ele] += 1\n    return d\n\ndef max_in_dict(d):\n    maxi = 0\n    for ele in d:\n        if d[ele] > maxi:\n            maxi = d[ele]\n    return maxi\n\ndef element_count(s):\n    l = []\n    k = s[0]\n    c = 0\n    for ele in s:\n        if ele == k:\n            c += 1\n        else:\n            l.append([k, c])\n            k = ele\n            c = 1\n    l.append([k, c])\n    return l\nfor _ in range(int(input())):\n    bool = True\n    flag = True\n    n = int(input())\n    mod = 10 ** 9 + 7\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    elif n == 3:\n        print(4)\n    else:\n        s = bin(n)[2:]\n        if s.count('1') == 1:\n            print((n * 2 - 1) % mod)\n        else:\n            print(2 ** len(s) % mod)", "import math\n\ndef Log2(x):\n    return math.log10(x) / math.log10(2)\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    return x ^ x >> 1\nfor t in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print('2')\n    elif isPowerOfTwo(n):\n        print((2 * n - 1) % 1000000007)\n    else:\n        print(highestPowerof2(n) * 2 % 1000000007)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\nt = inp()\np = 10 ** 9 + 7\nwhile t:\n    t -= 1\n    n = inp()\n    if n <= 2:\n        print(n)\n    else:\n        x = bin(n)[2:]\n        res = pow(2, len(x), p)\n        if x.count('1') == 1:\n            res -= 1\n        print(res % p)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(n)\n    else:\n        i = 2\n        while i <= n:\n            if 2 ** i == n:\n                print((2 ** (i + 1) - 1) % 1000000007)\n                break\n            elif 2 ** i > n:\n                print(2 ** i % 1000000007)\n                break\n            else:\n                i += 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(n)\n    elif n & n - 1 == 0:\n        print((2 * n - 1) % (10 ** 9 + 7))\n    else:\n        bit = int(math.log(n, 2))\n        print(2 ** (bit + 1) % (10 ** 9 + 7))", "from sys import stdin, stdout, maxsize\nimport math\nimport heapq\nfrom collections import defaultdict\nii = lambda : int(input())\ndi = lambda : defaultdict(lambda : 0)\ndl = lambda : defaultdict(lambda : list())\nli = lambda : list(map(int, stdin.readline().strip().split()))\nmi = lambda : stdin.readline().strip().split()\nsi = lambda : stdin.readline().strip()\narr = [4]\nlimi = 10 ** 12\nmodd = 10 ** 9 + 7\nwhile arr[-1] <= limi:\n    arr.append(arr[-1] * 2)\nfor _ in range(ii()):\n    a = ii()\n    if a == 1:\n        print(1)\n        continue\n    res = 0\n    if a == 2:\n        print(2)\n        continue\n    if a in arr:\n        res = 1\n    for i in arr:\n        if i > a:\n            print((i - res) % modd)\n            break", "import math\nfor i in range(int(input())):\n    n = int(input())\n    mod = 1000000000.0 + 7\n    if n == 2:\n        print(2)\n        continue\n    if n & n - 1 == 0:\n        print(int((2 * n - 1) % mod))\n    else:\n        a = int(math.log(n, 2))\n        ans = pow(2, a + 1)\n        print(int(ans % mod))", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    if N == 1:\n        z = 1\n    elif N == 2:\n        z = 2\n    elif N == 3:\n        z = 4\n    elif N == 4:\n        z = 7\n    elif math.log(N, 2) % 1 == 0:\n        z = 2 * N - 1\n    else:\n        a = math.log(N, 2)\n        z = pow(2, int(a) + 1)\n    num = pow(10, 9) + 7\n    print(z % num)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(2)\n    else:\n        f = math.floor(math.log(n, 2)) == math.ceil(math.log(n, 2))\n        if f:\n            print((int(math.pow(2, int(math.log(n, 2)) + 1)) - 1) % (10 ** 9 + 7))\n        else:\n            print(int(math.pow(2, int(math.log(n, 2)) + 1)) % (10 ** 9 + 7))", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor i in range(t):\n    n = int(stdin.readline())\n    my_dict = {1: 1, 2: 2, 3: 4, 4: 7}\n    if n in my_dict:\n        print(my_dict[n])\n    else:\n        m = 2\n        while 1 << m < n:\n            m += 1\n        if 1 << m == n:\n            print(((1 << m + 1) - 1) % (10 ** 9 + 7))\n        else:\n            print((1 << m) % (10 ** 9 + 7))", "def setbits(a):\n    c = 0\n    while a > 0:\n        c += 1\n        a &= a - 1\n    return c\nfor tc in range(int(input())):\n    n = int(input())\n    mod = 1000000007\n    if n <= 3:\n        if n == 1:\n            print(1)\n        elif n == 2:\n            print(2)\n        elif n == 3:\n            print(4)\n    else:\n        most = 0\n        for r in range(1, 60):\n            if n >> r & 1 == 1:\n                most = max(most, r)\n        r = 1 << most\n        if setbits(n) == 1:\n            print((2 * r - 1) % mod)\n        else:\n            print(2 * r % mod)", "import math\nT = int(input())\nwhile T:\n    num = int(input())\n    if num == 1:\n        print(1)\n    elif num == 2:\n        print(2)\n    elif num & num - 1 == 0:\n        print((2 * num - 1) % 1000000007)\n    else:\n        hodg = math.floor(math.log(num, 2))\n        ans = pow(2, hodg + 1) % 1000000007\n        print(ans)\n    T -= 1", "import math\n\ndef solve(n, M):\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 7\n    else:\n        l = math.floor(math.log(n, 2))\n        l += 1\n        if 2 ** (l - 1) != n:\n            ans = 2 ** l\n        else:\n            ans = 2 ** l - 1\n        ans %= M\n        return ans\nfor _ in range(int(input())):\n    n = int(input())\n    a = solve(n, 10 ** 9 + 7)\n    print(a)", "m = 1000000007\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    if n == 2:\n        print(2)\n        continue\n    j = 2\n    while n > j:\n        j *= 2\n    if j == n:\n        print((j * 2 - 1) % m)\n    else:\n        print(j % m)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    dig = 0\n    ones = 0\n    while n:\n        if n & 1 == 1:\n            ones += 1\n        dig += 1\n        n = n // 2\n    sol = 2 ** dig % 1000000007\n    if ones == 1:\n        sol -= 1\n        if dig == 2:\n            sol -= 1\n    print(sol)", "def nextPowerOf2(n):\n    count = 0\n    if n and (not n & n - 1):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\nt = int(input())\nfor i in range(t):\n    modulo = 10 ** 9 + 7\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    else:\n        x = nextPowerOf2(n)\n        if x == n:\n            print((x * 2 - 1) % modulo)\n        else:\n            print(x % modulo)", "def bin_exp(n, p):\n    mod = int(10 ** 9) + 7\n    pwrs = [n]\n    for i in range(60):\n        pwrs.append(pwrs[-1] * pwrs[-1] % mod)\n    i = 0\n    prod = 1\n    while p:\n        if p & 1 == 1:\n            prod = prod * pwrs[i] % mod\n        i += 1\n        p = p // 2\n    return prod\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    dig = 0\n    ones = 0\n    while n:\n        if n & 1 == 1:\n            ones += 1\n        dig += 1\n        n = n // 2\n    sol = bin_exp(2, dig)\n    if ones == 1:\n        sol -= 1\n        if dig == 2:\n            sol -= 1\n    print(sol)", "M = 1000000007\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    num = len(bin(n)) - 2\n    if n <= 2:\n        print(n)\n    elif bin(n).count('1') == 1:\n        print((2 ** num - 1) % M)\n    else:\n        print(2 ** num % M)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n <= 2:\n        print(n)\n    else:\n        s = bin(n)\n        num = len(s) - 2\n        out = pow(2, num, M)\n        if s.count('1') == 1:\n            out -= 1\n        print(out % M)", "modu = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(n)\n    else:\n        c = bin(n)[2:]\n        d = pow(2, len(c), modu)\n        if c.count('1') == 1:\n            d -= 1\n        print(d % modu)", "modu = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(n)\n    else:\n        c = bin(n)[2:]\n        d = pow(2, len(c), modu)\n        if c.count('1') == 1:\n            print(d - 1)\n        else:\n            print(d)", "def nextPowerOf2(n):\n    count = 0\n    if n and (not n & n - 1):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(n)\n    elif n & n - 1 == 0:\n        print((2 * n - 1) % (10 ** 9 + 7))\n    else:\n        print(nextPowerOf2(n + 1) % (10 ** 9 + 7))", "from collections import deque\nfrom math import *\nimport sys\nimport random\nfrom bisect import *\nfrom collections import deque\nfrom math import *\nimport sys\nimport random\nfrom bisect import *\n\ndef nxt(v):\n    v |= v >> 1\n    v |= v >> 2\n    v |= v >> 4\n    v |= v >> 8\n    v |= v >> 16\n    v = v ^ v >> 1\n    return v\nnxt = lambda x: pow(2, ceil(log(x) / log(2)))\n\ndef diku(n):\n    mod = 10 ** 9 + 7\n    if n & n - 1 == 0:\n        return (2 * (n % mod) - 1) % mod\n    else:\n        return int(nxt(n)) % mod\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(n)\n    else:\n        print(diku(n))", "def main():\n    mod = 10 ** 9 + 7\n    for _ in range(int(input())):\n        n = int(input())\n        if n <= 2:\n            print(n)\n        elif n & n - 1:\n            print(pow(2, len(bin(n)) - 2, mod))\n        else:\n            print((2 * n - 1) % mod)\nmain()", "from math import log2, pow\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    if n == 2:\n        print(2)\n        continue\n    s = pow(2, len(bin(n)) - 2)\n    s = s % (10 ** 9 + 7)\n    if n & n - 1 == 0:\n        print(int(s) - 1)\n        continue\n    print(int(s))", "for jkfd in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    elif n == 2:\n        print(2)\n        continue\n    elif n == 3:\n        print(4)\n        continue\n    p = False\n    x = 4\n    asdf = [2 ** i for i in range(2, 100)]\n    if n in asdf:\n        p = True\n    while x < n:\n        if x == n:\n            p = True\n        x *= 2\n    n = bin(n)[2:]\n    if p:\n        ans = 2 ** len(n) - 1\n    else:\n        ans = 2 ** len(n)\n    print(ans % 1000000007)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "try:\n    import math\n    test_cases = int(input())\n    for i in range(0, test_cases):\n        N = int(input())\n        if N == 1:\n            print(1)\n            continue\n        if N == 2:\n            print(2)\n            continue\n        s = pow(2, len(bin(N)) - 2)\n        s = s % 1000000007\n        if math.log(N, 2) == int(math.log(N, 2)):\n            print(s - 1)\n            continue\n        print(s)\nexcept:\n    pass", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for i in range(int(input())):\n    z = int(input())\n    x = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    a = 0\n    b = 40\n    while b > a:\n        r = (a + b) // 2\n        if 2 ** r <= z:\n            x = r\n            a = r + 1\n        else:\n            b = r\n    x = 2 ** x % rem\n    if x == z:\n        x = x * 2 % rem\n        x = x - 1\n        print(x)\n    else:\n        print(2 * x % rem)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(2)\n    elif n & n - 1 == 0:\n        print((n * 2 - 1) % 1000000007)\n    else:\n        a = math.floor(math.log(n, 2))\n        n = 2 ** (a + 1)\n        print(n % 1000000007)", "try:\n    for _ in range(int(input())):\n        z = int(input())\n        x1 = 1\n        rem = 10 ** 9 + 7\n        if z <= 2:\n            print(z)\n            continue\n        i = 0\n        j = 40\n        while j > i:\n            r = (i + j) // 2\n            if 2 ** r <= z:\n                x1 = r\n                i = r + 1\n            else:\n                j = r\n        x1 = 2 ** x1 % rem\n        if x1 == z:\n            x1 = x1 * 2 % rem\n            x1 = x1 - 1\n            print(x1)\n        else:\n            print(2 * x1 % rem)\nexcept Exception as e:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    l = 1\n    mod = 1000000000.0 + 7\n    if n <= 2:\n        print(n)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        m = (i + j) // 2\n        if 2 ** m <= n:\n            l = m\n            i = m + 1\n        else:\n            j = m\n    l = 2 ** l % mod\n    if l == n:\n        l = l * 2 % mod\n        l = l - 1\n        print(int(l))\n    else:\n        print(int(2 * l % mod))", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    N = int(input())\n    l = 1\n    mod = 1000000000.0 + 7\n    if N <= 2:\n        print(N)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        m = (i + j) // 2\n        if 2 ** m <= N:\n            l = m\n            i = m + 1\n        else:\n            j = m\n    l = 2 ** l % mod\n    if l == N:\n        l = l * 2 % mod\n        l = l - 1\n        print(int(l))\n    else:\n        print(int(2 * l % mod))", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    n = int(input())\n    l = 1\n    mod = 1000000000.0 + 7\n    if n <= 2:\n        print(n)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        m = (i + j) // 2\n        if 2 ** m <= n:\n            l = m\n            i = m + 1\n        else:\n            j = m\n    l = 2 ** l % mod\n    if l == n:\n        l = l * 2 % mod\n        l = l - 1\n        print(int(l))\n    else:\n        print(int(2 * l % mod))", "for i in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "for _ in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)", "from math import log2, ceil\n\ndef solve(n):\n    mod = int(1000000000.0) + 7\n    dp = [0, 1, 2, 4]\n    res = 0\n    if n <= 3:\n        res = dp[n]\n    else:\n        bits = ceil(log2(n))\n        if n == pow(2, bits):\n            res = pow(2, bits + 1, mod) - 1\n        else:\n            res = pow(2, bits, mod)\n    return res\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    print(solve(N))", "for i in range(int(input())):\n    z = int(input())\n    x1 = 1\n    rem = 10 ** 9 + 7\n    if z <= 2:\n        print(z)\n        continue\n    i = 0\n    j = 40\n    while j > i:\n        r = (i + j) // 2\n        if 2 ** r <= z:\n            x1 = r\n            i = r + 1\n        else:\n            j = r\n    x1 = 2 ** x1 % rem\n    if x1 == z:\n        x1 = x1 * 2 % rem\n        x1 = x1 - 1\n        print(x1)\n    else:\n        print(2 * x1 % rem)"]