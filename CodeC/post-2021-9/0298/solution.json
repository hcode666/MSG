["def hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, a % b)\nfor z in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = n * m / hcf(n, m)\n    s = round(s / m)\n    print(s)", "def hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, a % b)\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    Sol = N * K / hcf(N, K)\n    Sol = Sol / K\n    Sol = round(Sol)\n    print(Sol)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mul = n * k\n    gd = gcd(n, k)\n    lcm = mul // gd\n    print(int(lcm / k))", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mul = n * k\n    gd = gcd(n, k)\n    lcm = mul // gd\n    print(int(lcm / k))", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mul = n * k\n    gd = gcd(n, k)\n    lcm = mul // gd\n    print(math.ceil(lcm / k))", "import math as m\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = m.gcd(n, k)\n    print(n // d)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    g = gcd(n, k)\n    l = n * k // g\n    ans = l // k\n    print(ans)\n    t -= 1", "import math\n\ndef GCD(n, m):\n    if m == 0:\n        return n\n    return GCD(m, n % m)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    gcd = GCD(n, k)\n    lcm = n * k // gcd\n    print(math.ceil(lcm / k))", "def gcd(n, p):\n    if n > p:\n        (n, p) = (p, n)\n    while p % n != 0:\n        temp = p - n\n        p = n\n        n = temp\n        if n > p:\n            (n, p) = (p, n)\n    return n\nt = int(input())\nfor _ in range(t):\n    (n, p) = map(int, input().split())\n    print(n // gcd(n, p))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    g = gcd(n, k)\n    l = n * k // g\n    ans = l // k\n    print(ans)\n    t -= 1", "from math import sqrt, ceil, floor, gcd, log2\nimport sys\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, OrderedDict, deque\nfrom itertools import combinations, groupby\nfrom time import time\nfrom heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ans = n * k // gcd(n, k)\n    print(ans // k)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "def calculate_pizzas(a, b):\n    if b == 0:\n        return a\n    return calculate_pizzas(b, a % b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    print(n // calculate_pizzas(n, k))", "def calculate_pizzas(a, b):\n    x = max(a, b)\n    y = min(a, b)\n    while y != 0:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    print(n // calculate_pizzas(n, k))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(lcm(n, k) // k)", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    l = compute_lcm(n, k)\n    print(int(l / k))", "import math\nt = int(input())\nwhile t != 0:\n    (f, s) = map(int, input().split())\n    g = math.gcd(f, s)\n    print(f // g)\n    t -= 1", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nT = int(input())\nfor t in range(T):\n    (N, K) = list(map(int, input().split()))\n    ans = compute_lcm(N, K) // K\n    print(ans)", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nT = int(input())\nfor t in range(T):\n    (N, K) = list(map(int, input().split()))\n    ans = compute_lcm(N, K) // K\n    print(ans)", "def calc_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return calc_gcd(b, a % b)\n\ndef calc_lcm(x, y):\n    lcm = x * y // calc_gcd(x, y)\n    return lcm\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    ans = calc_lcm(n, k) // k\n    print(ans)", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nT = int(input())\nfor t in range(T):\n    (N, K) = list(map(int, input().split()))\n    ans = compute_lcm(N, K) // K\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    gcd = math.gcd(n, k)\n    lcm = n * k // gcd\n    print(lcm // k)", "from math import gcd\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(n // gcd(n, m))", "from math import gcd\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(n // gcd(n, m))", "from math import *\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // gcd(n, k))", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    print(n // gcd(n, k))", "import math\nfor i in range(int(input())):\n    (N, K) = map(int, input().split())\n    HCF = math.gcd(N, K)\n    print(int(N / HCF))", "import numpy as np\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    LCM = np.lcm(n, k)\n    print(LCM // k)", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    print(n // gcd(n, k))", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    print(n // gcd(n, k))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    gcd = math.gcd(n, k)\n    lcm = n * k // gcd\n    print(lcm // k)", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    print(n // gcd(n, k))", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    print(n // gcd(n, k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    lcm = n * k // math.gcd(n, k)\n    print(lcm // k)", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    lcm = n * k // math.gcd(n, k)\n    print(lcm // k)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import numpy as np\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    LCM = np.lcm(n, k)\n    print(LCM // k)", "import numpy as np\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    LCM = np.lcm(n, k)\n    print(LCM // k)", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // gcd(n, k))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    lcm = n * k // math.gcd(n, k)\n    print(lcm // k)", "from math import gcd\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(n * s // gcd(n, s) // s)", "from math import gcd\nfor _ in range(int(input())):\n    (n, s) = map(int, input().split())\n    print(n * s // gcd(n, s) // s)", "def gcd(n, k):\n    if k > n:\n        (n, k) = (k, n)\n    if k == 0:\n        return n\n    return gcd(k, n % k)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = n // gcd(n, k)\n    print(l)", "import math\n\ndef lcm(n, k):\n    return n * k // math.gcd(n, k)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(lcm(n, k) // k)", "def gdc(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    lcm = x * y // gdc(x, y)\n    return lcm\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if n == k:\n        print(1)\n    elif n < k and k % n == 0:\n        print(1)\n    elif n > k and n % k == 0:\n        print(n // k)\n    else:\n        ans = lcm(n, k) // k\n        print(ans)", "from math import gcd\na = int(input())\nfor i in range(0, a):\n    (x, y) = [int(i) for i in input().split()]\n    if x == y:\n        print(1)\n    else:\n        print(x * y // gcd(x, y) // y)", "from math import gcd\na = int(input())\nfor i in range(0, a):\n    (x, y) = [int(i) for i in input().split()]\n    if x == y:\n        print(1)\n    else:\n        print(x * y // gcd(x, y) // y)", "def euclidgcd(a, b):\n    if a < b:\n        return euclidgcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return euclidgcd(b, a % b)\nfor i in range(int(input())):\n    (N, K) = map(int, input().split())\n    ans = euclidgcd(N, K)\n    LCM = N * K // ans\n    LCM = LCM // K\n    print(LCM)", "import math\nT = int(input())\nfriend = []\npiece = []\nfor i in range(0, T):\n    (N, K) = input().split()\n    N1 = int(N)\n    friend.append(N1)\n    K1 = int(K)\n    piece.append(K1)\nfor i in range(0, T):\n    print(int(friend[i] / math.gcd(friend[i], piece[i])))", "import math\ncases = int(input())\nfor i in range(0, cases):\n    (friend, slices) = [int(x) for x in input().split()]\n    order = int(friend / math.gcd(friend, slices))\n    print(order)", "import math\ncases = int(input())\nfor i in range(0, cases):\n    (friend, slices) = [int(x) for x in input().split()]\n    order = int(friend / math.gcd(friend, slices))\n    print(order)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = n / math.gcd(n, k)\n    print(int(p))", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = n / math.gcd(n, k)\n    print(int(p))", "from bisect import bisect_left, bisect_right\nimport math\nfrom bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor i in range(ii()):\n    (n, k) = il()\n    a = math.gcd(n, k)\n    print(n // a)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if gcd(n, k) == 1:\n        print(n)\n    else:\n        print(n // gcd(n, k))", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if gcd(n, k) == 1:\n        print(n)\n    else:\n        print(n // gcd(n, k))", "from math import gcd, sqrt, ceil, floor, log10, log2\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(1000000000.0) + 7\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\n\ndef inp_graph(n, adj, gtype=0):\n    pass\n\ndef solve(*args, **kwargs):\n    (n, k) = args[0]\n    lcm = n * k // gcd(n, k)\n    return lcm // k\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        arg2 = inp_vars(int, SPACE)\n        res = solve(*(arg2,))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep=' ')\n        else:\n            print(res)\nmain()", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef party(n, k):\n    hcf = gcd(n, k)\n    lcm = n * k // hcf\n    return lcm // k\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    print(party(n, k))", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    print(n // math.gcd(n, k))", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    j = n // math.gcd(n, k)\n    print(j)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    j = n // math.gcd(n, k)\n    print(j)", "import math\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        print(n // math.gcd(n, k))\nmain()", "import math\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        print(n * k // math.gcd(n, k) // k)\nmain()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(n // gcd(n, k))", "import math\nfrom sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, k) = [int(a) for a in stdin.readline().split()]\n    print(int(n // math.gcd(n, k)))", "import math\nfor _ in range(int(input())):\n    (n, k) = [int(a) for a in input().split()]\n    print(int(n // math.gcd(n, k)))"]