["t = int(input())\nfor z in range(t):\n    n = int(input())\n    i = 0\n    while n >= 2 ** i:\n        i += 1\n    if i == 1:\n        print(1)\n    elif n - 2 ** (i - 1) + 1 > 2 ** (i - 2):\n        print(n - 2 ** (i - 1) + 1)\n    else:\n        print(2 ** (i - 2))", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = int(math.log2(n))\n    if n - 2 ** p + 1 >= 2 ** (p - 1):\n        print(n - 2 ** p + 1)\n    else:\n        print(2 ** (p - 1))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n <= 2:\n        print(1)\n    elif n >= 3 and n <= 5:\n        print(2)\n    else:\n        l = len(bin(n)[2:])\n        print(max(pow(2, l - 2), n - pow(2, l - 1) + 1))", "def twopow(a):\n    k = 0\n    while a != 1:\n        a = a // 2\n        k += 1\n    return 2 ** k\nfor _ in range(int(input())):\n    a = int(input())\n    k = twopow(a)\n    print(max(1 + a - k, k - k // 2))", "for t in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(1)\n    else:\n        a = bin(n)[2:]\n        m = len(a)\n        p = n - 2 ** (m - 1) + 1\n        q = 2 ** (m - 1) - 2 ** (m - 2)\n        print(max([p, q]))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "def twopow(a):\n    k = 0\n    while a != 1:\n        a = a // 2\n        k += 1\n    return 2 ** k\nfor _ in range(int(input())):\n    a = int(input())\n    k = twopow(a)\n    print(max(1 + a - k, k - k // 2))", "for _ in range(int(input())):\n    x = int(input())\n    i = 1\n    while i * 2 <= x:\n        i = i * 2\n    a = x - i + 1\n    b = i // 2\n    print(max(a, b))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "from math import log\nfor i in range(int(input())):\n    n = int(input())\n    k = int(log(n, 2))\n    if n == 1:\n        print(1)\n    elif n - 2 ** k == 0:\n        print(2 ** (k - 1))\n    elif n - 2 ** k >= 2 ** (k - 1):\n        print(n - 2 ** k + 1)\n    else:\n        print(2 ** (k - 1))", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "tc = int(input())\nfor t in range(tc):\n    n = int(input())\n    ans = 1\n    while ans * 2 <= n:\n        ans = ans * 2\n    ans1 = n - ans + 1\n    ans2 = ans // 2\n    print(max(ans1, ans2))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "def longest_bitwise_and_sequence_length(n):\n    m = len(bin(n)[2:]) - 1\n    lower_count = 2 ** (m - 1)\n    upper_count = n - 2 ** m + 1\n    return max(lower_count, upper_count)\nfor T in range(int(input())):\n    print(longest_bitwise_and_sequence_length(int(input())))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    t = 0\n    for i in range(32, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                t = 1 << i - 1\n            break\n    print(max(n - ans + 1, t))", "import math as m\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        power = int(m.log2(n))\n        x = 2 ** power // 2\n        y = n - 2 ** power + 1\n        print(max(x, y))", "import math as m\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        power = int(m.log2(n))\n        x = 2 ** power // 2\n        y = n - 2 ** power + 1\n        print(max(x, y))", "import math as m\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        power = int(m.log2(n))\n        x = 2 ** power // 2\n        y = n - 2 ** power + 1\n        print(max(x, y))", "import math as m\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        power = int(m.log2(n))\n        x = 2 ** power // 2\n        y = n - 2 ** power + 1\n        if x > y:\n            print(x)\n        else:\n            print(y)", "for _ in range(int(input())):\n    N = int(input())\n    n = 0\n    d = N\n    while d != 1:\n        d = int(d / 2)\n        n += 1\n    n = pow(2, n)\n    if N <= 2:\n        print(1)\n    elif N - n + 1 > n / 2:\n        print(N - n + 1)\n    else:\n        print(int(n / 2))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math as lg\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        power = int(lg.log2(n))\n        x = 2 ** power // 2\n        y = n - 2 ** power + 1\n        if x > y:\n            print(x)\n        else:\n            print(y)", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    bit = int(math.log2(n)) + 1\n    if pow(2, bit) - 1 == n:\n        print(pow(2, bit - 1))\n    else:\n        diff = pow(2, bit) - n\n        count1 = pow(2, bit - 1) - diff + 1\n        count2 = pow(2, bit - 2)\n        if count1 > count2:\n            print(count1)\n        else:\n            print(count2)", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "def getPowRange(n):\n    for i in range(1, 40):\n        first = pow(2, i)\n        second = pow(2, i + 1)\n        if n in range(first, second):\n            break\n    return i\n\ndef calLn(n, i):\n    x1 = n - (pow(2, i) - 1)\n    x2 = pow(2, i) - 1 - (pow(2, i - 1) - 1)\n    mx = max(x1, x2)\n    return mx\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        pr = getPowRange(n)\n        x = calLn(n, pr)\n        print(x)", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    temp = 1\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            ans = 1 << i\n            if i != 0:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "import math\n\ndef Power(n):\n    (ans, x) = (1, 2)\n    while n != 0:\n        if n & 1 == 1:\n            ans = ans * x\n        x = x * x\n        ans = ans >> 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    cnt = 0\n    ans = 0\n    temp = 0\n    for i in range(31, -1, -1):\n        b = n >> i & 1 == 1\n        if b:\n            ans = 1 << i\n            if n == 1:\n                temp = 1\n            else:\n                temp = 1 << i - 1\n            break\n    print(max(n - ans + 1, temp))", "for i in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    elif n <= 5:\n        print(2)\n        continue\n    b = bin(n)[2:]\n    bit = '1' + (len(b) - 1) * '0'\n    bitlow = '1' + (len(b) - 2) * '0'\n    upper = n + 1 - int(bit, base=2)\n    lower = int(bit, base=2) - int(bitlow, base=2)\n    print(max(upper, lower))", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "def solve():\n    n = int(input())\n    if n == 1 or n == 2:\n        return 1\n    l = []\n    c = 0\n    while n > 0:\n        if n & 1:\n            l.append(1)\n        else:\n            l.append(0)\n        n = n >> 1\n        c += 1\n    x = pow(2, c - 2)\n    ans = 0\n    for i in range(len(l) - 1):\n        ans += pow(2, i) * l[i]\n    return max(x, ans + 1)\nfor t in range(int(input())):\n    x = solve()\n    print(x)", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor i in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    res = max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1))\n    print(res)", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    bit = int(math.log2(n)) + 1\n    if pow(2, bit) - 1 == n:\n        print(pow(2, bit - 1))\n    else:\n        diff = pow(2, bit) - n\n        count1 = pow(2, bit - 1) - diff + 1\n        count2 = pow(2, bit - 2)\n        if count1 > count2:\n            print(count1)\n        else:\n            print(count2)", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "from math import log\nfrom math import floor\n\ndef fun(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(2 ** fun(n) - 2 ** (fun(n) - 1), n - 2 ** fun(n) + 1))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    k = math.floor(math.log(n, 2))\n    print(max(n - 2 ** k + 1, 2 ** (k - 1)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 1\n    if n == 1 or n == 2:\n        print(1)\n        continue\n    if n == 3:\n        print(2)\n        continue\n    while i <= n and n > 3:\n        i = i * 2\n    if i > n:\n        i = i / 2\n    res = int(max(n - i + 1, i - i / 2))\n    print(res)", "T = int(input())\nfor t in range(0, T):\n    n = int(input())\n    i = 1\n    if n == 1 or n == 2:\n        print(1)\n        continue\n    if n == 3:\n        print(2)\n        continue\n    while i <= n and n > 3:\n        i = i * 2\n    if i > n:\n        i = i / 2\n    print(int(max(n - i + 1, i - i / 2)))", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "T = int(input())\nfor tc in range(T):\n    N = int(input())\n    mylist = []\n    c = 0\n    n = 0\n    while n < N:\n        if N < 2 ** c:\n            c = c - 1\n            break\n        else:\n            n = 2 ** c\n            c += 1\n            mylist.append(n)\n    if N + 1 - mylist[-1] > mylist[-1] - mylist[len(mylist) - 2]:\n        print(N + 1 - mylist[-1])\n    else:\n        print(mylist[-1] - mylist[len(mylist) - 2])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 0\n    p = 1\n    while p <= n:\n        p *= 2\n        i += 1\n    i -= 1\n    p = pow(2, i)\n    ans = max(p - pow(2, i - 1), n - p + 1)\n    print(ans)", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "import math\ntc = int(input().strip())\nfor t in range(tc):\n    n = int(input())\n    if n <= 2:\n        print(1)\n    else:\n        a = math.floor(math.log(n, 2))\n        section1 = n - 2 ** a + 1\n        section2 = 2 ** (a - 1)\n        print(max(section1, section2))", "for _ in range(int(input())):\n    n = int(input())\n    ns = 0\n    i = 0\n    while n - 2 ** i >= 0:\n        n -= 2 ** i\n        i += 1\n    print(max(n, 2 ** (i - 1)))", "import math\nfor i in range(int(input())):\n    k = int(input())\n    h = math.log(k, 2)\n    if h == 0:\n        print(1)\n    elif h % 1 == 0:\n        print(int(2 ** (h - 1)))\n    else:\n        h = int(h // 1)\n        k1 = abs(k - 2 ** h)\n        print(int(max(2 ** (h - 1), k1 + 1)))", "from math import log\nt = int(input())\nfor i in range(t):\n    num = int(input())\n    bitPos1 = int(log(num, 2))\n    bitPos2 = bitPos1 - 1\n    print(max(num - (1 << bitPos1) + 1, 1 << bitPos2 if bitPos2 >= 0 else -1))", "import math\n\ndef longestANDsubarray(n):\n    if n == 1:\n        return 1\n    bits = int(math.log(n, 2)) + 1\n    ans = max(n - pow(2, bits - 1) + 1, pow(2, bits - 2))\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    print(longestANDsubarray(n))", "l = [1]\ni = 0\nj = 0\nwhile i < 1000000001:\n    i = pow(2, j)\n    l.append(i)\n    j += 1\nfor i in range(int(input())):\n    n = int(input())\n    for i in range(1, len(l)):\n        if n == l[i]:\n            print(l[i - 1])\n            break\n        elif n < l[i]:\n            print(max(l[i - 2], n - l[i - 1] + 1))\n            break", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1)\n    else:\n        for i in range(n):\n            if 2 ** i == n:\n                print(2 ** i - 2 ** (i - 1))\n                break\n            elif 2 ** i > n:\n                print(max(n - 2 ** (i - 1) + 1, 2 ** (i - 1) - 2 ** (i - 2)))\n                break", "import math\n\ndef Solution(n):\n    x = math.floor(math.log(n, 2))\n    return max(n + 1 - 2 ** x, 2 ** (x - 1))\ntest = int(input())\nfor t in range(test):\n    n = int(input())\n    print(Solution(n))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = 1\n    while True:\n        r <<= 1\n        if r > n:\n            n += 1\n            break\n        if r == n:\n            break\n    r >>= 1\n    rr = r >> 1\n    if n - r >= r - rr:\n        print(n - r)\n    else:\n        print(r - rr)", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    j = 1\n    while j <= n:\n        a = j\n        j = j * 2\n    b = n - a + 1\n    print(max(a // 2, b))", "import math\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    p = int(math.log(n, 2))\n    check = n - 2 ** p + 1\n    if n == 1 or n == 2:\n        print(1)\n        continue\n    if check < 2 ** (p - 1):\n        print(2 ** (p - 1))\n    else:\n        print(check)", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "import math\nfor t in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    bits = math.floor(math.log2(n))\n    ans = max(n - (1 << bits) + 1, (1 << bits) - 1 - (1 << bits - 1) + 1)\n    print(ans)", "import math as m\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n    elif n <= 4:\n        print(2)\n    else:\n        l = int(m.log(n, 2))\n        print(max(2 ** l - 2 ** (l - 1), n - 2 ** l + 1))", "for z in range(int(input())):\n    n = int(input())\n    (m, val) = (n, 1)\n    if n == 1:\n        print(1)\n    else:\n        while m > 1:\n            m //= 2\n            val *= 2\n        print(max(val // 2, n - val + 1))", "import math\nfor i in range(int(input())):\n    a = int(input())\n    b = int(math.log(a, 2))\n    c = max(2 ** b - 2 ** (b - 1), a - 2 ** b + 1)\n    print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    og = int(math.log(n, 2))\n    ans = max(2 ** og - 2 ** (og - 1), n - 2 ** og + 1)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    og = int(math.log(n, 2))\n    ans = max(2 ** og - 2 ** (og - 1), n - 2 ** og + 1)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    b = bin(n)[2:]\n    bn = len(b)\n    if n == 1:\n        print(1)\n    elif n + 1 - 2 ** (bn - 1) >= 2 ** (bn - 2):\n        print(n + 1 - 2 ** (bn - 1))\n    else:\n        print(2 ** (bn - 2))", "import math\n\ndef countBits(number):\n    return int(math.log(number) / math.log(2) + 1)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = countBits(n)\n    if n == 1:\n        print(1)\n    else:\n        r = n - 2 ** (i - 1) + 1\n        if r > 2 ** (i - 2):\n            print(r)\n        else:\n            print(2 ** (i - 2))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        x = math.floor(math.log2(n))\n        ans = 2 ** (x - 1)\n        anss = n - 2 ** x + 1\n        print(max(ans, anss))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n    else:\n        x = math.floor(math.log2(n))\n        ans1 = 2 ** (x - 1)\n        ans2 = n - 2 ** x + 1\n        print(max(ans1, ans2))", "for q in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    b = bin(n)[2:]\n    l = len(b)\n    x = 2 ** (len(b) - 1)\n    print(max(n - x + 1, x // 2))", "from math import log, floor\nfor _ in range(int(input())):\n    N = int(input())\n    if N < 2:\n        print(N)\n    else:\n        b = floor(log(N, 2))\n        print(max(N - 2 ** b + 1, 2 ** b - 2 ** (b - 1)))", "for _ in range(int(input())):\n    x = bin(int(input()))[2:]\n    if x.count('1') == len(x):\n        print(2 ** (len(x) - 1))\n    else:\n        diff = int(x, 2) - int('1' + (len(x) - 1) * '0', 2) + 1\n        print(max(diff, 2 ** (len(x) - 2)))", "from math import log, floor\nT = int(input())\n\ndef solve(n):\n    return floor(log(n, 2))\nfor x in range(T):\n    n = int(input())\n    if n <= 2:\n        print(1)\n    else:\n        print(max(n - 2 ** solve(n) + 1, 2 ** solve(n) - 2 ** (solve(n) - 1)))", "from math import log, floor\n\ndef func(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(1)\n        continue\n    print(max(n - 2 ** func(n) + 1, 2 ** func(n) - 2 ** (func(n) - 1)))", "import math\na = int(input())\nfor i in range(a):\n    n = int(input())\n    x = int(math.log(n, 2))\n    max3 = n - 2 ** x + 1\n    max4 = 2 ** x - 2 ** (x - 1)\n    print(max(max3, max4))", "from math import log2\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    rt = int(log2(n))\n    if rt == 0:\n        print(1)\n    else:\n        print(max(n - 2 ** rt + 1, 2 ** (rt - 1)))", "from math import log2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    rt = int(log2(n))\n    if rt == 0:\n        print(1)\n    else:\n        print(max(n - 2 ** rt + 1, 2 ** (rt - 1)))", "import math\nT = int(input())\nfor _ in range(T):\n    l = []\n    n = int(input())\n    z = n\n    if n % 4 == 0:\n        z = n - 1\n    x = int(math.log(z, 2))\n    a1 = 2 ** x\n    b1 = a1 * 2 - 1\n    a2 = 2 ** (x - 1)\n    b2 = a2 * 2 - 1\n    if n <= b1:\n        l.append(n - a1 + 1)\n    else:\n        l.append(b1 - a1 + 1)\n    if n <= b2:\n        l.append(n - a2 + 1)\n    else:\n        l.append(b2 - a2 + 1)\n    print(max(l))", "import math\nT = int(input())\nfor _ in range(T):\n    l = []\n    n = int(input())\n    z = n\n    if n % 4 == 0:\n        z = n - 1\n    x = int(math.log(z, 2))\n    a1 = 2 ** x\n    b1 = a1 * 2 - 1\n    a2 = 2 ** (x - 1)\n    b2 = a2 * 2 - 1\n    if n <= b1:\n        l.append(n - a1 + 1)\n    else:\n        l.append(b1 - a1 + 1)\n    if n <= b2:\n        l.append(n - a2 + 1)\n    else:\n        l.append(b2 - a2 + 1)\n    print(max(l))", "import math\nT = int(input())\nfor _ in range(T):\n    l = []\n    n = int(input())\n    z = n\n    if n % 4 == 0:\n        z = n - 1\n    x = int(math.log(z, 2))\n    a1 = 2 ** x\n    b1 = a1 * 2 - 1\n    a2 = 2 ** (x - 1)\n    b2 = a2 * 2 - 1\n    if n <= b1:\n        l.append(n - a1 + 1)\n    else:\n        l.append(b1 - a1 + 1)\n    if n <= b2:\n        l.append(n - a2 + 1)\n    else:\n        l.append(b2 - a2 + 1)\n    print(max(l))", "import math\nfor _ in range(int(input())):\n    l = []\n    n = int(input())\n    z = n\n    if n % 4 == 0:\n        z = n - 1\n    x = int(math.log(z, 2))\n    a1 = 2 ** x\n    b1 = a1 * 2 - 1\n    a2 = 2 ** (x - 1)\n    b2 = a2 * 2 - 1\n    if n <= b1:\n        l.append(n - a1 + 1)\n    else:\n        l.append(b1 - a1 + 1)\n    if n <= b2:\n        l.append(n - a2 + 1)\n    else:\n        l.append(b2 - a2 + 1)\n    print(max(l))", "import math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    MSB = int(math.log2(N))\n    X = pow(2, MSB - 1)\n    Y = N - pow(2, MSB) + 1\n    print(max(X, Y))", "for case in range(int(input())):\n    N = int(input())\n    a = 1\n    while 2 * a <= N:\n        a *= 2\n    print(max(a // 2, N - a + 1))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = int(math.log(n, 2))\n    print(max(n - 2 ** a + 1, 2 ** (a - 1)))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = 0\n    while s < n:\n        s = s * 2 + 1\n    mx = 0\n    if n <= 2:\n        mx = 1\n    elif n <= 4:\n        mx = 2\n    elif s == n:\n        mx = s - s // 2\n    else:\n        s = s - s // 2 - 1\n        mx = max(n - s, s - s // 2)\n    print(mx)\n    t -= 1", "import math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    MSB = int(math.log2(N))\n    X = pow(2, MSB - 1)\n    Y = N - pow(2, MSB) + 1\n    print(max(X, Y))"]