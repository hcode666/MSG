["for iin in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    maxi = 0\n    for i in range(n):\n        x = sum(a[i:])\n        y = sum(a[:i])\n        z = 1000 * i - y\n        maxi = max(maxi, x * z)\n    print(maxi)", "for iin in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    maxi = 0\n    for i in range(n):\n        x = sum(a[i:])\n        y = sum(a[:i])\n        z = 1000 * i - y\n        maxi = max(maxi, x * z)\n    print(maxi)", "for i in range(int(input())):\n    n = int(input())\n    atk = list(map(int, input().split()))\n    atk.sort()\n    max1 = 0\n    for i in range(n):\n        a = sum(atk[i:])\n        sum1 = sum(atk[:i])\n        b = i * 1000 - sum1\n        max1 = max(max1, a * b)\n    print(max1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    attack = [int(i) for i in input().split()]\n    attack.sort()\n    max1 = 0\n    for i in range(n):\n        a = sum(attack[i:])\n        d = i * 1000 - sum(attack[:i])\n        max1 = max(max1, a * d)\n    print(max1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    attack = [int(i) for i in input().split()]\n    attack.sort()\n    max1 = 0\n    for i in range(n):\n        a = sum(attack[i:])\n        d = i * 1000 - sum(attack[:i])\n        max1 = max(max1, a * d)\n    print(max1)", "for _ in range(int(input())):\n    n = int(input())\n    attac = [int(i) for i in input().split()]\n    attac.sort()\n    maxx = 0\n    for i in range(n):\n        a = sum(attac[i:])\n        d = i * 1000 - sum(attac[:i])\n        maxx = max(maxx, a * d)\n    print(maxx)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    attack = [int(i) for i in input().split()]\n    attack.sort()\n    max1 = 0\n    for i in range(n):\n        a = sum(attack[i:])\n        d = i * 1000 - sum(attack[:i])\n        max1 = max(max1, a * d)\n    print(max1)", "for _ in range(int(input())):\n    n = int(input())\n    attac = [int(i) for i in input().split()]\n    attac.sort()\n    maxx = 0\n    for i in range(n):\n        a = sum(attac[i:])\n        d = i * 1000 - sum(attac[:i])\n        maxx = max(maxx, a * d)\n    print(maxx)", "for _ in range(int(input())):\n    n = int(input())\n    attac = [int(i) for i in input().split()]\n    attac.sort()\n    maxx = 0\n    for i in range(n):\n        a = sum(attac[i:])\n        d = i * 1000 - sum(attac[:i])\n        maxx = max(maxx, a * d)\n    print(maxx)", "for _ in range(int(input())):\n    n = int(input())\n    attac = [int(i) for i in input().split()]\n    attac.sort()\n    maxx = 0\n    for i in range(n):\n        a = sum(attac[i:])\n        d = i * 1000 - sum(attac[:i])\n        maxx = max(maxx, a * d)\n    print(maxx)", "for _ in range(int(input())):\n    n = int(input())\n    attac = [int(i) for i in input().split()]\n    attac.sort()\n    maxx = 0\n    for i in range(n):\n        a = sum(attac[i:])\n        d = i * 1000 - sum(attac[:i])\n        maxx = max(maxx, a * d)\n    print(maxx)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = sum(a)\n    ans = float('-inf')\n    d = 0\n    for i in range(n - 1):\n        d += 1000 - a[i]\n        s -= a[i]\n        ans = max(ans, d * s)\n    print(ans)", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(100000)\nt = ri()\nfor test in range(t):\n    n = ri()\n    l = rl()\n    l.sort(reverse=True)\n    total = 0\n    for i in l:\n        total += i\n    s = 0\n    final = 0\n    for i in range(n):\n        final = max(final, s * (1000 * (n - i) - (total - s)))\n        s += l[i]\n    print(final)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    l.reverse()\n    totalsum = sum(l)\n    s = 0\n    ans = 0\n    for i in range(n):\n        ans = max(ans, s * (1000 * (n - i) - (totalsum - s)))\n        s += l[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    l.reverse()\n    totalsum = sum(l)\n    s = 0\n    ans = 0\n    for i in range(n):\n        ans = max(ans, s * (1000 * (n - i) - (totalsum - s)))\n        s += l[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    attac = [int(i) for i in input().split()]\n    attac.sort()\n    maxx = 0\n    for i in range(n):\n        a = sum(attac[i:])\n        d = i * 1000 - sum(attac[:i])\n        maxx = max(maxx, a * d)\n    print(maxx)", "import math\n\ndef solve(num, l):\n    l.sort()\n    attack = [l[num - 1]]\n    defense = [1000 - l[0]]\n    for i in range(1, num - 1):\n        ty1 = (sum(attack) + l[i]) * sum(defense)\n        ty2 = sum(attack) * (sum(defense) + 1000 - l[i])\n        if ty1 >= ty2:\n            attack.append(l[i])\n        else:\n            defense.append(1000 - l[i])\n    return sum(attack) * sum(defense)\n\ndef isprime(num):\n    for i in range(2, int(pow(num, 1 / 2) + 1)):\n        if num % i == 0:\n            return False\n    return True\n\ndef compute(num, l):\n    l.sort()\n    l.reverse()\n    maxi = 0\n    for r in range(0, num):\n        pro = sum(l[0:r + 1]) * ((num - r - 1) * 1000 - sum(l[r + 1:num]))\n        if pro > maxi:\n            maxi = pro\n    return maxi\nn = int(input())\nresults = []\nfor i in range(0, n):\n    num = int(input())\n    l = list(map(int, input().split()))\n    out = compute(num, l)\n    results.append(out)\nfor j in results:\n    print(j)", "for test in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    one = [0]\n    two = [0]\n    l.sort()\n    s1 = 0\n    s2 = 0\n    for i in l[::-1]:\n        s1 += i\n        one.append(s1)\n    for j in l:\n        s2 += 1000 - j\n        two.append(s2)\n    two.reverse()\n    M = 0\n    for i in range(n + 1):\n        M = max(M, one[i] * two[i])\n    print(M)", "for test in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    one = [0]\n    two = [0]\n    l.sort()\n    s1 = 0\n    s2 = 0\n    for i in l[::-1]:\n        s1 += i\n        one.append(s1)\n    for j in l:\n        s2 += 1000 - j\n        two.append(s2)\n    two.reverse()\n    M = 0\n    for i in range(n + 1):\n        M = max(M, one[i] * two[i])\n    print(M)", "T = int(input())\nwhile T > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    k = 0\n    attack = [0] * (n - 1)\n    defence = [0] * (n - 1)\n    defence[0] = 1000 - arr[0]\n    for i in range(1, n - 1):\n        defence[i] = 1000 - arr[i] + defence[i - 1]\n    attack[-1] = arr[-1]\n    for i in range(-2, -n, -1):\n        attack[i] = arr[i] + attack[i + 1]\n    max = 0\n    for i in range(n - 1):\n        rank = attack[i] * defence[i]\n        if rank > max:\n            max = rank\n    print(max)\n    T -= 1", "from collections import Counter\nimport numpy as np\n\ndef tryout_army(stats_soldiers):\n    all_stats = Counter(stats_soldiers)\n    possible_values = list(all_stats.keys())\n    possible_values.sort()\n    max_stats = 0\n    defense = 0\n    attack = sum(stats_soldiers)\n    exit_loop = 0\n    value_track_i = 0\n    count_tracker = 1\n    while exit_loop == 0:\n        value = possible_values[value_track_i]\n        if all_stats[value] >= count_tracker:\n            count_tracker += 1\n            defense += 1000 - value\n            attack -= value\n            if defense * attack < max_stats:\n                exit_loop = 1\n            else:\n                max_stats = defense * attack\n        else:\n            count_tracker = 1\n            value_track_i += 1\n    return max_stats\nT = int(input())\nfor tc in range(T):\n    nb_soldiers = int(input())\n    stats = list(map(int, input().split(' ')))\n    print(tryout_army(stats))", "(ans, c) = ([], 1000)\nfor _ in range(int(input())):\n    N = int(input())\n    A = sorted([int(x) for x in input().split()])\n    at = sum(A)\n    (df, an) = (0, 0)\n    for a in A:\n        at -= a\n        df += c - a\n        tmp = at * df\n        if an < tmp:\n            an = tmp\n        else:\n            break\n    ans.append(an)\nprint(*ans, sep='\\n')", "(ans, c) = ([], 1000)\nfor _ in range(int(input())):\n    N = int(input())\n    A = sorted([int(x) for x in input().split()])\n    at = sum(A)\n    (df, an) = (0, 0)\n    for a in A:\n        at -= a\n        df += c - a\n        an = max(an, at * df)\n    ans.append(an)\nprint(*ans, sep='\\n')", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    arr.sort(reverse=True)\n    (i, above) = (1, arr[0])\n    total = sum(arr)\n    high = 0\n    while i < n:\n        if high < above * (1000 * (n - i) - total + above):\n            high = above * (1000 * (n - i) - total + above)\n        above += arr[i]\n        i += 1\n    print(high)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    attack_lst = list(map(int, input().split()))\n    attack_sum = 0\n    defencce_sum = 0\n    attack_lst.sort()\n    if n == 2:\n        print(attack_lst[0] * attack_lst[-1])\n    else:\n        fsum = [1000 - attack_lst[0]]\n        bsum = [attack_lst[-1]]\n        for j in range(1, n):\n            fsum += [fsum[-1] + 1000 - attack_lst[j]]\n        for j in range(n - 2, -1, -1):\n            bsum += [bsum[-1] + attack_lst[j]]\n        bsum = bsum[::-1]\n        mx = 0\n        for j in range(0, n - 1):\n            temp = fsum[j] * bsum[j + 1]\n            if temp > mx:\n                mx = temp\n        print(mx)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    (m, p, q) = (0, 0, 0)\n    if n == 2:\n        m = (1000 - arr[0]) * arr[1]\n    else:\n        for i in range(n - 1):\n            p = p + (1000 - arr[i])\n            q = 0\n            for j in range(i + 1, n):\n                q = q + arr[j]\n            r = p * q\n            m = max(m, r)\n    print(m)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ap = []\n    dp = []\n    arr.sort()\n    final_rating = 0\n    s_dp = 0\n    s_ap = 0\n    if n == 2:\n        dp.append(1000 - arr[0])\n        ap.append(arr[1])\n        final_rating = sum(ap) * sum(dp)\n    else:\n        for i in range(n - 1):\n            s_dp = s_dp + (1000 - arr[i])\n            s_ap = 0\n            for j in range(i + 1, n):\n                s_ap = s_ap + arr[j]\n                new_rating = s_dp * s_ap\n                if new_rating > final_rating:\n                    final_rating = new_rating\n    print(final_rating)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    attack = sum(a)\n    res = 0\n    defense = 0\n    for i in range(len(a)):\n        attack -= a[i]\n        defense += 1000 - a[i]\n        res = max(res, attack * defense)\n    print(res)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    list_A = list(map(int, input().split(' ')))\n    list_B = sorted(list_A)\n    ans = 0\n    for i in range(N - 1):\n        defence = (i + 1) * 1000 - sum(list_B[0:i + 1])\n        attack = sum(list_B[i + 1:])\n        rating = attack * defence\n        ans = max(ans, rating)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    attack = sum(a)\n    res = 0\n    defense = 0\n    for i in range(len(a)):\n        attack -= a[i]\n        defense += 1000 - a[i]\n        res = max(res, attack * defense)\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    defense = 0\n    res = 0\n    a.sort()\n    attack = sum(a)\n    for i in range(len(a)):\n        attack -= a[i]\n        defense += 1000 - a[i]\n        res = max(res, attack * defense)\n    print(res)", "inputNo = int(input())\nfor _ in range(inputNo):\n    a = input()\n    inp = input()\n    inp = [int(x) for x in inp.split(' ')]\n    inp.sort()\n    attack = sum(inp)\n    defense = 0\n    highest = 0\n    for i in inp:\n        defense += 1000 - i\n        attack -= i\n        highest = max(highest, defense * attack)\n    print(highest)", "import math\n\ndef solve(arr, n):\n    attackers = sum(arr)\n    defenders = 0\n    res = -math.inf\n    for x in range(n):\n        attackers -= arr[x]\n        defenders += 1000 - arr[x]\n        res = max(res, attackers * defenders)\n    print(res)\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        arr = [int(x) for x in input().split(' ')]\n        arr.sort()\n        solve(arr, n)\n        t -= 1\nmain()", "import math\n\ndef solve(arr, n):\n    attackers = sum(arr)\n    defenders = 0\n    res = -math.inf\n    for x in range(n):\n        attackers -= arr[x]\n        defenders += 1000 - arr[x]\n        res = max(res, attackers * defenders)\n    print(res)\n\ndef main():\n    t = int(input())\n    while t:\n        n = int(input())\n        arr = [int(x) for x in input().split(' ')]\n        arr.sort()\n        solve(arr, n)\n        t -= 1\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    total_sum = sum(arr)\n    part1 = 0\n    res = 0\n    for i in range(n - 1):\n        part1 += arr[i]\n        part2 = (n - i - 1) * 1000 - (total_sum - part1)\n        res = max(res, part1 * part2)\n    print(res)", "try:\n    T = int(input())\n    while T:\n        N = int(input())\n        A = list(map(int, input().split()))\n        A.sort(reverse=True)\n        B = []\n        for i in range(N):\n            B.append(1000 - A[i])\n        sumA = 0\n        sumB = sum(B)\n        ans = 0\n        for i in range(N):\n            sumA += A[i]\n            sumB -= B[i]\n            ans = max(ans, sumA * sumB)\n        print(ans)\n        T -= 1\nexcept:\n    pass", "t = int(input())\nwhile t:\n    n = int(input())\n    points = [int(x) for x in input().split()]\n    points.sort(reverse=True)\n    asum = 0\n    prod = 0\n    for i in range(n - 1):\n        asum += points[i]\n        dsum = 0\n        for j in range(i + 1, n):\n            dsum += 1000 - points[j]\n        if prod < asum * dsum:\n            prod = asum * dsum\n    print(prod)\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    points = [int(x) for x in input().split()]\n    points.sort(reverse=True)\n    asum = 0\n    prod = 0\n    for i in range(n - 1):\n        asum += points[i]\n        dsum = 0\n        for j in range(i + 1, n):\n            dsum += 1000 - points[j]\n        if prod < asum * dsum:\n            prod = asum * dsum\n    print(prod)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    a = 0\n    d = 0\n    m = 0\n    p.sort(reverse=True)\n    for i in range(n - 1):\n        d = 0\n        a += p[i]\n        for j in range(i + 1, n):\n            d += 1000 - p[j]\n        if m < a * d:\n            m = a * d\n    print(m)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    A.sort(reverse=True)\n    Total = sum(A)\n    attack = 0\n    defense = 1000 * N - Total\n    Ans = 0\n    for i in range(len(A)):\n        attack += A[i]\n        defense -= 1000 - A[i]\n        Ans = max(Ans, attack * defense)\n    print(Ans)", "for i in range(int(input())):\n    soldiers = int(input())\n    atk = list(map(int, input().split(' ')))\n    mana = [0]\n    for i in range(soldiers):\n        weak = int(min(atk))\n        firepower = sum(atk)\n        shields = sum(mana)\n        if firepower * shields < (1000 - weak + shields) * (firepower - weak):\n            defender = 1000 - weak\n            mana.append(defender)\n            atk.remove(weak)\n        else:\n            solution = firepower * shields\n            break\n    print(solution)", "for i in range(int(input())):\n    soldiers = int(input())\n    atk = list(map(int, input().split(' ')))\n    mana = [0]\n    for i in range(soldiers):\n        weak = int(min(atk))\n        firepower = sum(atk)\n        shields = sum(mana)\n        if firepower * shields < (1000 - weak + shields) * (firepower - weak):\n            defender = 1000 - weak\n            mana.append(defender)\n            atk.remove(weak)\n        else:\n            solution = firepower * shields\n            break\n    print(solution)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    A.sort(reverse=True)\n    Total = sum(A)\n    attack = 0\n    defense = 1000 * N - Total\n    Ans = 0\n    for i in range(len(A)):\n        attack += A[i]\n        defense -= 1000 - A[i]\n        Ans = max(Ans, attack * defense)\n    print(Ans)", "for t in range(int(input())):\n    n = int(input())\n    arr = sorted(map(int, input().split()), reverse=True)\n    tot = sum(arr)\n    ans = 0\n    curr = 0\n    for i in range(n):\n        curr += arr[i]\n        deff = 1000 * (n - i - 1) - (tot - curr)\n        ans = max(ans, curr * deff)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    powers = list(map(int, input().split()))[:n]\n    powers.sort(reverse=True)\n    total = sum(powers)\n    attack = 0\n    defence = 1000 * n - total\n    ans = 0\n    for i in range(len(powers)):\n        attack += powers[i]\n        defence -= 1000 - powers[i]\n        ans = max(ans, attack * defence)\n    print(ans)", "test = int(input())\nfor _ in range(test):\n    N = int(input())\n    points = sorted(list(map(int, input().split())))\n    points.reverse()\n    ans = 0\n    for i in range(1, N):\n        ATTACK = points[:i]\n        DEFENSE = [1000 - x for x in points[i:]]\n        if ans < sum(ATTACK) * sum(DEFENSE):\n            ans = sum(ATTACK) * sum(DEFENSE)\n        else:\n            break\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    (ans, attack, defense) = (0, 0, 1000 * n - sum(A))\n    for i in range(1, n):\n        attack += A[i - 1]\n        defense -= 1000 - A[i - 1]\n        ans = max(ans, attack * defense)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    (ans, attack, defense) = (0, 0, 1000 * n - sum(A))\n    for i in range(1, n):\n        attack += A[i - 1]\n        defense -= 1000 - A[i - 1]\n        ans = max(ans, attack * defense)\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    A = sorted(list(map(int, input().split())))[::-1]\n    (ans, left, right) = (0, 0, 1000 * N - sum(A))\n    for i in range(N):\n        left += A[i]\n        right -= 1000 - A[i]\n        ans = max(ans, left * right)\n    print(ans)", "def solution():\n    n = int(input())\n    powers = list(map(int, input().split()))\n    total = sum(powers)\n    powers.sort(reverse=True)\n    attack = 0\n    defence = 1000 * n - total\n    ans = 0\n    for i in range(len(powers)):\n        attack += powers[i]\n        defence -= 1000 - powers[i]\n        ans = max(ans, attack * defence)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solution()", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    c = 0\n    a = 0\n    d = 0\n    l1.sort()\n    l2 = []\n    l3 = []\n    for i in range(n):\n        if l1[i] > 500:\n            a = a + l1[i]\n            l2.append(l1[i])\n        elif l1[i] < 500:\n            d = d + (1000 - l1[i])\n            l3.append(l1[i])\n        else:\n            c = c + 1\n    for i in range(c):\n        if a < d:\n            a = a + 500\n        else:\n            d = d + 500\n    q = a * d\n    if a > d:\n        while a > d and len(l2) > 0:\n            k = min(l2)\n            i = l2.index(k)\n            l2[i] = 1001\n            a = a - k\n            d = d + (1000 - k)\n            if q > a * d:\n                break\n            else:\n                q = a * d\n    else:\n        while a < d and len(l3) > 0:\n            k = max(l3)\n            i = l3.index(k)\n            l3[i] = -1\n            a = a + k\n            d = d - (1000 - k)\n            if q > a * d:\n                break\n            else:\n                q = a * d\n    print(q)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    l = sum(arr[:n - 1])\n    r = 1000 - arr[n - 1]\n    ans = l * r\n    for i in range(n - 2, -1, -1):\n        l -= arr[i]\n        r += 1000 - arr[i]\n        ans = max(ans, l * r)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    l = arr[0]\n    r = 1000 * (n - 1) - (sum(arr) - l)\n    ans = l * r\n    for i in range(1, n):\n        l += arr[i]\n        r -= 1000 - arr[i]\n        ans = max(ans, l * r)\n    print(ans)", "tc = int(input())\nfor i in range(tc):\n    n = int(input())\n    rating = list(map(int, input().split(' ')))\n    attack = defense = 0\n    for i in range(n):\n        attack += rating[i]\n    rating.sort()\n    maxrate = 0\n    for i in range(n):\n        attack -= rating[i]\n        defense += 1000 - rating[i]\n        rate = attack * defense\n        maxrate = max(rate, maxrate)\n    print(maxrate)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A = sorted(A)\n    a = sum(A)\n    b = 0\n    rating = a * b\n    for i in range(N):\n        a -= A[i]\n        b += 1000 - A[i]\n        temp = a * b\n        if temp > rating:\n            rating = temp\n        else:\n            pass\n    print(rating)", "T = int(input())\nwhile T > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    k = 0\n    attack = [0] * (n - 1)\n    defence = [0] * (n - 1)\n    defence[0] = 1000 - arr[0]\n    for i in range(1, n - 1):\n        defence[i] = 1000 - arr[i] + defence[i - 1]\n    attack[-1] = arr[-1]\n    for i in range(-2, -n, -1):\n        attack[i] = arr[i] + attack[i + 1]\n    max = 0\n    for i in range(n - 1):\n        rank = attack[i] * defence[i]\n        if rank > max:\n            max = rank\n    print(max)\n    T -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    l.sort(reverse=True)\n    (attack, diffense) = (0, 0)\n    totSum = sum(l)\n    ans = 0\n    for i in range(n):\n        attack += l[i]\n        defense = 1000 * (n - i - 1) - (totSum - attack)\n        ans = max(ans, attack * defense)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    l.sort(reverse=True)\n    (attack, diffense) = (0, 0)\n    pre = [0] * (n + 1)\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        pre[i] = pre[i + 1] + l[i]\n    for i in range(n):\n        attack += l[i]\n        defense = 1000 * (n - i - 1) - pre[i + 1]\n        ans = max(ans, attack * defense)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort(reverse=True)\n    defence = 0\n    attack = 0\n    for i in arr:\n        defence += 1000 - i\n    ans = 0\n    for i in arr:\n        attack += i\n        defence = defence - (1000 - i)\n        ans = max(ans, attack * defence)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))[::-1]\n    (atta, defe, suma) = (0, 1000 * n - sum(a), 0)\n    for j in range(n):\n        atta += a[j]\n        defe -= 1000 - a[j]\n        suma = max(suma, atta * defe)\n    print(suma)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    tot = sum(a)\n    s = 0\n    maxRating = 0\n    for i in range(n):\n        maxRating = max(maxRating, s * (1000 * (n - i) - (tot - s)))\n        s += a[i]\n    print(maxRating)\n    t -= 1", "import numpy\nT = int(input())\nfor j in range(T):\n    n = int(input())\n    points = []\n    points = list(map(int, input().split()))\n    a = sum(points)\n    d = 0\n    x = 0\n    points.sort()\n    for i in range(n):\n        x = max(x, a * d)\n        a -= points[i]\n        d += 1000 - points[i]\n    print(x)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    att = 0\n    dff = 0\n    mid = n // 2\n    arr.sort()\n    for i in range(mid):\n        dff += 1000 - arr[i]\n    for i in range(mid, n):\n        att += arr[i]\n    rat = att * dff\n    at = att\n    df = dff\n    for i in range(mid, n):\n        att -= arr[i]\n        dff += 1000 - arr[i]\n        temp = att * dff\n        rat = max(rat, temp)\n    att = at\n    dff = df\n    for i in range(mid - 1, -1, -1):\n        dff -= 1000 - arr[i]\n        att += arr[i]\n        temp = att * dff\n        rat = max(rat, temp)\n    print(rat)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A = sorted(A, reverse=True)\n    Attack = []\n    Defence = []\n    update_Defence = []\n    Rating = []\n    for i in range(len(A)):\n        for j in range(i + 1):\n            Attack.append(A[j])\n        for k in range(i + 1, len(A)):\n            Defence.append(A[k])\n        for i in range(len(Defence)):\n            update_Defence.append(1000 - Defence[i])\n        sum_Attack = sum(Attack)\n        sum_Defence = sum(update_Defence)\n        Rating.append(sum_Attack * sum_Defence)\n        Attack.clear()\n        Defence.clear()\n        update_Defence.clear()\n    print(max(Rating))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A = sorted(A, reverse=True)\n    Attack = []\n    Defence = []\n    update_Defence = []\n    Rating = []\n    for i in range(len(A)):\n        for j in range(i + 1):\n            Attack.append(A[j])\n        for k in range(i + 1, len(A)):\n            Defence.append(A[k])\n        for i in range(len(Defence)):\n            update_Defence.append(1000 - Defence[i])\n        sum_Attack = sum(Attack)\n        sum_Defence = sum(update_Defence)\n        Rating.append(sum_Attack * sum_Defence)\n        Attack.clear()\n        Defence.clear()\n        update_Defence.clear()\n    print(max(Rating))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (a, d, x) = (sum(l), 0, 0)\n    l.sort()\n    for i in range(n):\n        x = max(x, a * d)\n        a -= l[i]\n        d += 1000 - l[i]\n    x = max(x, a * d)\n    print(x)", "for i in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))[::-1]\n    (ans, left, right) = (0, 0, 1000 * n - sum(a))\n    for i in range(1, n):\n        left += a[i - 1]\n        right -= 1000 - a[i - 1]\n        ans = max(ans, left * right)\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    sm = sum(arr)\n    curr = 0\n    ans = 0\n    arr.sort(reverse=True)\n    for i in range(n):\n        ans = max(ans, curr * (1000 * (n - i) - sm + curr))\n        curr += arr[i]\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    l = sum(a[1:n])\n    r = 1000 - a[0]\n    ans = l * r\n    for i in range(1, n):\n        l -= a[i]\n        r += 1000 - a[i]\n        ans = max(ans, l * r)\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    temp = []\n    l = sorted(l, reverse=True)\n    for i in range(n):\n        t1 = l[:i]\n        t2 = l[i:]\n        attack = sum(t1)\n        defense = 1000 * len(t2) - sum(t2)\n        rating = attack * defense\n        temp.append(rating)\n    print(max(temp))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    atk = sum(a)\n    dfn = 0\n    rating = []\n    for i in a:\n        dfn += 1000 - i\n        atk -= i\n        rating.append(atk * dfn)\n    print(max(rating))", "from collections import Counter, defaultdict\nfrom sys import stdin, stdout, setrecursionlimit\nfrom heapq import nlargest, nsmallest\nimport math\nsetrecursionlimit(2147400000)\n\ndef outnl(x):\n    stdout.write(str(x) + '\\n')\n\ndef outsl(x):\n    stdout.write(str(x) + ' ')\n\ndef instr():\n    return stdin.readline().strip()\n\ndef inint():\n    return int(stdin.readline())\n\ndef inspsint():\n    return map(int, stdin.readline().strip().split())\n\ndef inlist():\n    return list(map(int, stdin.readline().strip().split()))\nfor _ in range(inint()):\n    n = inint()\n    l = inlist()\n    l.sort()\n    attack = sum(l)\n    defence = 0\n    ans = -float('inf')\n    for i in l:\n        defence += 1000 - i\n        attack -= i\n        ans = max(defence * attack, ans)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    attrat = sum(a)\n    defrat = 0\n    temp = 0\n    for i in range(n):\n        attrat -= a[i]\n        defrat += 1000 - a[i]\n        temp = max(temp, attrat * defrat)\n    print(temp)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort(reverse=True)\n    prod = []\n    for i in range(n - 1):\n        sumA = 0\n        sumD = 0\n        for j in range(n):\n            if j <= i:\n                sumA += a[j]\n            else:\n                sumD += 1000 - a[j]\n        prod.append(sumA * sumD)\n    print(max(prod))", "T = int(input(''))\nfor _ in range(T):\n    length = int(input(''))\n    A = list(map(int, input('').split(' ')))\n    A.sort()\n    points = 0\n    for mini in range(1, length):\n        attack = sum(A[mini:])\n        defense = sum(A[:mini])\n        defense = 1000 * mini - defense\n        point = defense * attack\n        points = max(points, point)\n    print(points)", "T = int(input(''))\nfor _ in range(T):\n    length = int(input(''))\n    A = list(map(int, input('').split(' ')))\n    A.sort()\n    points = []\n    for mini in range(1, length):\n        attack = sum(A[mini:])\n        defense = sum(A[:mini])\n        defense = 1000 * mini - defense\n        point = defense * attack\n        points.append(point)\n    print(max(points))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    a = sum(l)\n    d = 0\n    ans = 0\n    for i in l:\n        a -= i\n        d += 1000 - i\n        ans = max(ans, a * d)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = [int(item) for item in input().split()]\n    arr.sort(reverse=True)\n    max1 = []\n    for i in range(n):\n        max1.append(sum(arr[:i]) * (1000 * (n - i) - sum(arr[i:])))\n    print(max(max1))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    ans = []\n    for i in range(n):\n        ans.append(sum(arr[:i]) * (1000 * (n - i) - sum(arr[i:])))\n    print(max(ans))", "def sumSplit(left, right=[], difference=0):\n    (sumLeft, sumRight) = (sum(left), sum(right))\n    if sumLeft < sumRight or len(left) < len(right):\n        return\n    if sumLeft - sumRight == difference:\n        return (left, right, difference)\n    for (i, value) in enumerate(left):\n        solution = sumSplit(left[:i] + left[i + 1:], right + [value], difference)\n        if solution:\n            return solution\n    if right or difference > 0:\n        return\n    for targetDiff in range(1, sumLeft - min(left) + 1):\n        solution = sumSplit(left, right, targetDiff)\n        if solution:\n            return solution\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    ans = []\n    for i in range(n):\n        suma = sum(arr[:i])\n        sumd = 1000 * (n - i) - sum(arr[i:])\n        ans.append(suma * sumd)\n    print(max(ans))", "for _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ls.sort()\n    attack = sum(ls)\n    defense = 0\n    ans = attack * defense\n    for i in ls:\n        attack -= i\n        defense += 1000 - i\n        ans = max(ans, attack * defense)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    left = 0\n    right = 1000 * n - sum(a)\n    for i in range(1, n):\n        left += a[i - 1]\n        right -= 1000 - a[i - 1]\n        ans = max(ans, left * right)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort(reverse=True)\n    max1 = 0\n    suma = 0\n    sumb = 1000 * n - sum(x)\n    for j in range(1, len(x)):\n        suma += x[j - 1]\n        sumb -= 1000 - x[j - 1]\n        max1 = max(max1, suma * sumb)\n    print(max1)", "for _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ls.sort()\n    attack = sum(ls)\n    defense = 0\n    ans = attack * defense\n    for i in ls:\n        attack -= i\n        defense += 1000 - i\n        ans = max(ans, attack * defense)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))[::-1]\n    (ans, left, right) = (0, 0, 1000 * n - sum(a))\n    for i in range(1, n):\n        left += a[i - 1]\n        right -= 1000 - a[i - 1]\n        ans = max(ans, left * right)\n    print(ans)", "import sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 7)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\n\ndef maxpro(arr, n):\n    arr.sort(reverse=True)\n    att = 0\n    de = 1000 - arr[-1]\n    for k in range(n - 1):\n        att += arr[k]\n    i = n - 2\n    ans = -float('inf')\n    ans = max(ans, de * att)\n    while i > 0:\n        att -= arr[i]\n        de += 1000 - arr[i]\n        i -= 1\n        ans = max(ans, att * de)\n    print(ans)\nfor _ in range(ii()):\n    n = ii()\n    arr = il()\n    maxpro(arr, n)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = sum(a)\n    p = 0\n    m = 0\n    for i in a:\n        s -= i\n        p += 1000 - i\n        m = max(m, s * p)\n    print(m)", "for _ in range(0, int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    total = sum(a)\n    leftSum = 0\n    for i in range(n):\n        ans = max(ans, leftSum * (1000 * (n - i) - (total - leftSum)))\n        leftSum += a[i]\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split(' ')))\n    s.sort(reverse=True)\n    (ans, left, right) = (0, 0, 1000 * n - sum(s))\n    for i in range(n):\n        left += s[i]\n        right -= 1000 - s[i]\n        ans = max(ans, left * right)\n    print(ans)", "def sum_up(attckers_list1):\n    total = 0\n    for item in attckers_list1:\n        total = total + item\n    return total\nfor _ in range(int(input())):\n    n = int(input())\n    attackers_list = list(map(int, input().split()))\n    attackers_list.sort()\n    att_val = sum_up(attackers_list)\n    deff_val = 0\n    old_max = att_val * deff_val\n    for i in range(n):\n        att = attackers_list[i]\n        deff = 1000 - att\n        att_val = att_val - att\n        deff_val = deff_val + deff\n        new_max = att_val * deff_val\n        if new_max > old_max:\n            old_max = new_max\n        else:\n            break\n    print(old_max)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    pr1 = [0] * n\n    pr1[0] = 1000 - arr[0]\n    for i in range(1, n):\n        pr1[i] = pr1[i - 1] + (1000 - arr[i])\n    pr2 = [0] * n\n    pr2[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        pr2[i] = pr2[i + 1] + arr[i]\n    mx = float('-inf')\n    for i in range(1, n):\n        mx = max(mx, pr1[i - 1] * pr2[i])\n    print(mx)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = sorted(a)\n    attack = sum(a)\n    defence = 0\n    temp = []\n    for i in a:\n        defence += 1000 - i\n        attack = attack - i\n        temp.append(defence * attack)\n    print(max(temp))", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))[::-1]\n    (ans, left, right) = (0, 0, 1000 * n - sum(a))\n    for i in range(1, n):\n        left += a[i - 1]\n        right -= 1000 - a[i - 1]\n        ans = max(ans, left * right)\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    army = list(map(int, input().split()))\n    army.sort()\n    maxRating = 0\n    for i in range(0, n - 1):\n        maxRating = max((1000 * (i + 1) - sum(army[0:i + 1])) * sum(army[i + 1:n]), maxRating)\n    print(maxRating)\n    t -= 1", "import sys\nfrom itertools import count, islice\nfor s in islice(sys.stdin, 2, None, 2):\n    a = sorted(map(int, s.split()))\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    print(max(((i - x) * (a[-1] - x) for (i, x) in zip(count(1000, 1000), a))))", "strng = lambda : input().split()[0]\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nslst = lambda : list(input().split()[0])\nsilst = lambda : list(map(int, input().split()[0]))\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom heapq import heapify, nsmallest, nlargest, heappush, heappop\nfrom collections import defaultdict, deque\nfrom math import ceil, log, floor, sqrt, gcd, log10\nfor _ in range(inp()):\n    n = inp()\n    a = lst()\n    at = [0] * n\n    dt = [0] * n\n    a.sort()\n    cat = 0\n    dat = 0\n    for i in range(n):\n        cat += a[n - i - 1]\n        at[n - i - 1] = cat\n        dat += 1000 - a[i]\n        dt[i] = dat\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, dt[i] * at[i + 1])\n    print(ans)", "def solution():\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort(reverse=True)\n    maxTotal = 0\n    apTotal = 0\n    for i in range(len(A)):\n        apTotal += A[i]\n        dpTotal = 0\n        for j in range(i + 1, len(A)):\n            dpTotal += 1000 - A[j]\n        totalPoint = apTotal * dpTotal\n        maxTotal = totalPoint if totalPoint > maxTotal else maxTotal\n    print(maxTotal)\nt = int(input())\nwhile t > 0:\n    solution()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    s = sum(arr)\n    ans = 0\n    x = 0\n    for i in range(n):\n        x += arr[i]\n        req = ((i + 1) * 1000 - x) * (s - x)\n        if req > ans:\n            ans = req\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    attack = rating = 0\n    defense = 1000 * n - sum(a)\n    for i in a:\n        attack += i\n        defense -= 1000 - i\n        rating = max(rating, attack * defense)\n    print(rating)"]