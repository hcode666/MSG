["from sys import stdin, stdout\ninput = stdin.readline\nr_int = lambda : int(input())\nm_int = lambda : map(int, input().split())\nl_int = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n_int, k) = m_int()\n    n = list(map(int, str(n_int)))\n    if len(set(n)) <= k:\n        print(0)\n        return\n    for (i, d) in enumerate(n):\n        if d == 9:\n            continue\n        used = set(n[:i])\n        if len(used) > k:\n            break\n        if len(used) < k:\n            d1 = d + 1\n            used.add(d1)\n        else:\n            d1 = d + 1\n            while d1 not in used and d1 != 10:\n                d1 += 1\n            if d1 == 10:\n                continue\n        if len(used) == k:\n            d2 = min(used)\n        else:\n            d2 = 0\n        m = n.copy()\n        m[i] = d1\n        for j in range(i + 1, len(n)):\n            m[j] = d2\n    acc = 0\n    for x in m:\n        acc = 10 * acc + x\n    print(acc - n_int)\n\ndef main():\n    n_cases = r_int()\n    for _ in range(n_cases):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    n_str = str(n)\n    n_len = len(n_str)\n    pfx_set = set()\n    min_pfx_set = ':'\n    min_big = '1' * (n_len + 1)\n    ok_already = True\n    for i in range(n_len):\n        c = n_str[i]\n        if len(pfx_set) == k:\n            cc = ':'\n            for ch in pfx_set:\n                if ch > c and ch < cc:\n                    cc = ch\n            if cc != ':':\n                min_big = n_str[:i] + cc + min_pfx_set * (n_len - i - 1)\n        elif c < '9':\n            cc = chr(ord(c) + 1)\n            if cc not in pfx_set and len(pfx_set) == k - 1:\n                min_ch = min(min_pfx_set, cc)\n            else:\n                min_ch = '0'\n            min_big = n_str[:i] + cc + min_ch * (n_len - i - 1)\n        pfx_set.add(c)\n        if c < min_pfx_set:\n            min_pfx_set = c\n        if len(pfx_set) > k:\n            ok_already = False\n            break\n    if ok_already:\n        print(0)\n    else:\n        print(int(min_big) - n)", "from sys import stdin, stdout\ninput = stdin.readline\nr_int = lambda : int(input())\nm_int = lambda : map(int, input().split())\nl_int = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n_int, k) = m_int()\n    n = list(map(int, str(n_int)))\n    if len(set(n)) <= k:\n        print(0)\n        return\n    for (i, d) in enumerate(n):\n        if d == 9:\n            continue\n        used = set(n[:i])\n        if len(used) > k:\n            break\n        if len(used) < k:\n            d1 = d + 1\n            used.add(d1)\n        else:\n            d1 = d + 1\n            while d1 not in used and d1 != 10:\n                d1 += 1\n            if d1 == 10:\n                continue\n        if len(used) == k:\n            d2 = min(used)\n        else:\n            d2 = 0\n        m = n.copy()\n        m[i] = d1\n        for j in range(i + 1, len(n)):\n            m[j] = d2\n    acc = 0\n    for x in m:\n        acc = 10 * acc + x\n    print(acc - n_int)\n\ndef main():\n    n_cases = r_int()\n    for _ in range(n_cases):\n        solve()\nmain()", "from sys import stdin, stdout\ninput = stdin.readline\nr_int = lambda : int(input())\nm_int = lambda : map(int, input().split())\nl_int = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n_int, k) = m_int()\n    n = list(map(int, str(n_int)))\n    if len(set(n)) <= k:\n        print(0)\n        return\n    for (i, d) in enumerate(n):\n        if d == 9:\n            continue\n        used = set(n[:i])\n        if len(used) > k:\n            break\n        if len(used) < k:\n            d1 = d + 1\n            used.add(d1)\n        else:\n            d1 = d + 1\n            while d1 not in used and d1 != 10:\n                d1 += 1\n            if d1 == 10:\n                continue\n        if len(used) == k:\n            d2 = min(used)\n        else:\n            d2 = 0\n        m = n.copy()\n        m[i] = d1\n        for j in range(i + 1, len(n)):\n            m[j] = d2\n    acc = 0\n    for x in m:\n        acc = 10 * acc + x\n    print(acc - n_int)\n\ndef main():\n    n_cases = r_int()\n    for _ in range(n_cases):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    n_str = str(n)\n    n_len = len(n_str)\n    pfx_set = set()\n    min_pfx_set = ':'\n    min_big = '1' * (n_len + 1)\n    ok_already = True\n    for i in range(n_len):\n        c = n_str[i]\n        if len(pfx_set) == k:\n            cc = ':'\n            for ch in pfx_set:\n                if ch > c and ch < cc:\n                    cc = ch\n            if cc != ':':\n                min_big = n_str[:i] + cc + min_pfx_set * (n_len - i - 1)\n        elif c < '9':\n            cc = chr(ord(c) + 1)\n            if cc not in pfx_set and len(pfx_set) == k - 1:\n                min_ch = min(min_pfx_set, cc)\n            else:\n                min_ch = '0'\n            min_big = n_str[:i] + cc + min_ch * (n_len - i - 1)\n        pfx_set.add(c)\n        if c < min_pfx_set:\n            min_pfx_set = c\n        if len(pfx_set) > k:\n            ok_already = False\n            break\n    if ok_already:\n        print(0)\n    else:\n        print(int(min_big) - n)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    n_str = str(n)\n    n_len = len(n_str)\n    pfx_set = set()\n    min_pfx_set = ':'\n    min_big = '1' * (n_len + 1)\n    ok_already = True\n    for i in range(n_len):\n        c = n_str[i]\n        if len(pfx_set) == k:\n            cc = ':'\n            for ch in pfx_set:\n                if ch > c and ch < cc:\n                    cc = ch\n            if cc != ':':\n                min_big = n_str[:i] + cc + min_pfx_set * (n_len - i - 1)\n        elif c < '9':\n            cc = chr(ord(c) + 1)\n            if cc not in pfx_set and len(pfx_set) == k - 1:\n                min_ch = min(min_pfx_set, cc)\n            else:\n                min_ch = '0'\n            min_big = n_str[:i] + cc + min_ch * (n_len - i - 1)\n        pfx_set.add(c)\n        if c < min_pfx_set:\n            min_pfx_set = c\n        if len(pfx_set) > k:\n            ok_already = False\n            break\n    if ok_already:\n        print(0)\n    else:\n        print(int(min_big) - n)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    n_str = str(n)\n    n_len = len(n_str)\n    pfx_set = set()\n    min_pfx_set = ':'\n    min_big = '1' * (n_len + 1)\n    ok_already = True\n    for i in range(n_len):\n        c = n_str[i]\n        if len(pfx_set) == k:\n            cc = ':'\n            for ch in pfx_set:\n                if ch > c and ch < cc:\n                    cc = ch\n            if cc != ':':\n                min_big = n_str[:i] + cc + min_pfx_set * (n_len - i - 1)\n        elif c < '9':\n            cc = chr(ord(c) + 1)\n            if cc not in pfx_set and len(pfx_set) == k - 1:\n                min_ch = min(min_pfx_set, cc)\n            else:\n                min_ch = '0'\n            min_big = n_str[:i] + cc + min_ch * (n_len - i - 1)\n        pfx_set.add(c)\n        if c < min_pfx_set:\n            min_pfx_set = c\n        if len(pfx_set) > k:\n            ok_already = False\n            break\n    if ok_already:\n        print(0)\n    else:\n        print(int(min_big) - n)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    n_str = str(n)\n    n_len = len(n_str)\n    pfx_set = set()\n    min_pfx_set = ':'\n    min_big = '1' * (n_len + 1)\n    ok_already = True\n    for i in range(n_len):\n        c = n_str[i]\n        if len(pfx_set) == k:\n            cc = ':'\n            for ch in pfx_set:\n                if ch > c and ch < cc:\n                    cc = ch\n            if cc != ':':\n                min_big = n_str[:i] + cc + min_pfx_set * (n_len - i - 1)\n        elif c < '9':\n            cc = chr(ord(c) + 1)\n            if cc not in pfx_set and len(pfx_set) == k - 1:\n                min_ch = min(min_pfx_set, cc)\n            else:\n                min_ch = '0'\n            min_big = n_str[:i] + cc + min_ch * (n_len - i - 1)\n        pfx_set.add(c)\n        if c < min_pfx_set:\n            min_pfx_set = c\n        if len(pfx_set) > k:\n            ok_already = False\n            break\n    if ok_already:\n        print(0)\n    else:\n        print(int(min_big) - n)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    n_str = str(n)\n    n_len = len(n_str)\n    pfx_set = set()\n    min_pfx_set = ':'\n    min_big = '1' * (n_len + 1)\n    ok_already = True\n    for i in range(n_len):\n        c = n_str[i]\n        if len(pfx_set) == k:\n            cc = ':'\n            for ch in pfx_set:\n                if ch > c and ch < cc:\n                    cc = ch\n            if cc != ':':\n                min_big = n_str[:i] + cc + min_pfx_set * (n_len - i - 1)\n        elif c < '9':\n            cc = chr(ord(c) + 1)\n            if cc not in pfx_set and len(pfx_set) == k - 1:\n                min_ch = min(min_pfx_set, cc)\n            else:\n                min_ch = '0'\n            min_big = n_str[:i] + cc + min_ch * (n_len - i - 1)\n        pfx_set.add(c)\n        if c < min_pfx_set:\n            min_pfx_set = c\n        if len(pfx_set) > k:\n            ok_already = False\n            break\n    if ok_already:\n        print(0)\n    else:\n        print(int(min_big) - n)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    n_str = str(n)\n    n_len = len(n_str)\n    pfx_set = set()\n    min_pfx_set = ':'\n    min_big = '1' * (n_len + 1)\n    ok_already = True\n    for i in range(n_len):\n        c = n_str[i]\n        if len(pfx_set) == k:\n            cc = ':'\n            for ch in pfx_set:\n                if ch > c and ch < cc:\n                    cc = ch\n            if cc != ':':\n                min_big = n_str[:i] + cc + min_pfx_set * (n_len - i - 1)\n        elif c < '9':\n            cc = chr(ord(c) + 1)\n            if cc not in pfx_set and len(pfx_set) == k - 1:\n                min_ch = min(min_pfx_set, cc)\n            else:\n                min_ch = '0'\n            min_big = n_str[:i] + cc + min_ch * (n_len - i - 1)\n        pfx_set.add(c)\n        if c < min_pfx_set:\n            min_pfx_set = c\n        if len(pfx_set) > k:\n            ok_already = False\n            break\n    if ok_already:\n        print(0)\n    else:\n        print(int(min_big) - n)", "for _ in range(int(input())):\n    (s, k) = input().split()\n    (n, k) = (int(s), int(k))\n    mark = [0] * 10\n    ans = '9' * len(s)\n    for i in range(len(s)):\n        d = ord(s[i]) - ord('0')\n        (d1, d2) = (d + 1, 0)\n        if sum(mark) < k:\n            if sum(mark) == k - 1 and d1 < 10 and (mark[d1] == 0):\n                mark[d1] = 1\n                while mark[d2] == 0:\n                    d2 += 1\n                mark[d1] = 0\n        else:\n            while d1 < 10 and mark[d1] == 0:\n                d1 += 1\n            while d2 < 10 and mark[d2] == 0:\n                d2 += 1\n        if d1 < 10:\n            ans = min(ans, s[:i] + chr(ord('0') + d1) + chr(ord('0') + d2) * (len(s) - i - 1))\n        mark[d] = 1\n        if sum(mark) > k:\n            break\n    if sum(mark) <= k:\n        ans = s\n    print(int(ans) - n)", "for _ in range(int(input())):\n    (s, k) = input().split()\n    (n, k) = (int(s), int(k))\n    mark = [0] * 10\n    ans = '9' * len(s)\n    for i in range(len(s)):\n        d = ord(s[i]) - ord('0')\n        (d1, d2) = (d + 1, 0)\n        if sum(mark) < k:\n            if sum(mark) == k - 1 and d1 < 10 and (mark[d1] == 0):\n                mark[d1] = 1\n                while mark[d2] == 0:\n                    d2 += 1\n                mark[d1] = 0\n        else:\n            while d1 < 10 and mark[d1] == 0:\n                d1 += 1\n            while d2 < 10 and mark[d2] == 0:\n                d2 += 1\n        if d1 < 10:\n            ans = min(ans, s[:i] + chr(ord('0') + d1) + chr(ord('0') + d2) * (len(s) - i - 1))\n        mark[d] = 1\n        if sum(mark) > k:\n            break\n    if sum(mark) <= k:\n        ans = s\n    print(int(ans) - n)", "for _ in range(int(input())):\n    (s, k) = input().split()\n    (n, k) = (int(s), int(k))\n    mark = [0] * 10\n    ans = '9' * len(s)\n    for i in range(len(s)):\n        d = ord(s[i]) - ord('0')\n        (d1, d2) = (d + 1, 0)\n        if sum(mark) < k:\n            if sum(mark) == k - 1 and d1 < 10 and (mark[d1] == 0):\n                mark[d1] = 1\n                while mark[d2] == 0:\n                    d2 += 1\n                mark[d1] = 0\n        else:\n            while d1 < 10 and mark[d1] == 0:\n                d1 += 1\n            while d2 < 10 and mark[d2] == 0:\n                d2 += 1\n        if d1 < 10:\n            ans = min(ans, s[:i] + chr(ord('0') + d1) + chr(ord('0') + d2) * (len(s) - i - 1))\n        mark[d] = 1\n        if sum(mark) > k:\n            break\n    if sum(mark) <= k:\n        ans = s\n    print(int(ans) - n)"]