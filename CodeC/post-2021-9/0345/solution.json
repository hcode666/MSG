["import math\nT = int(input())\nfor i in range(T):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    All = 0\n    for j in range(a):\n        All = math.gcd(All, l[j])\n    ind = 0\n    curr = 0\n    temp = 0\n    while ind < a and temp < b:\n        curr = 0\n        while ind < a and curr != All:\n            curr = math.gcd(curr, l[ind])\n            ind += 1\n        if curr == All:\n            temp += 1\n    if temp == b:\n        print('YES')\n    else:\n        print('NO')", "import math\nT = int(input())\nfor i in range(T):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    All = 0\n    for j in range(a):\n        All = math.gcd(All, l[j])\n    ind = 0\n    curr = 0\n    temp = 0\n    while ind < a and temp < b:\n        curr = 0\n        while ind < a and curr != All:\n            curr = math.gcd(curr, l[ind])\n            ind += 1\n        if curr == All:\n            temp += 1\n    if temp == b:\n        print('YES')\n    else:\n        print('NO')", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor z in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    g = a[0]\n    for x in a:\n        g = gcd(g, x)\n    p = a[0]\n    j = 0\n    for i in range(n):\n        p = gcd(p, a[i])\n        if p == g:\n            j += 1\n            if i == n - 1:\n                break\n            p = a[i + 1]\n    if j >= k:\n        print('YES')\n    else:\n        print('NO')", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor z in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    g = a[0]\n    for x in a:\n        g = gcd(g, x)\n    p = a[0]\n    j = 0\n    for i in range(n):\n        p = gcd(p, a[i])\n        if p == g:\n            j += 1\n            if i == n - 1:\n                break\n            p = a[i + 1]\n    if j >= k:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    if len(a) == 1:\n        print('YES')\n    else:\n        l = gcd(a[0], a[1])\n        for j in range(2, len(a)):\n            y = gcd(l, a[j])\n            l = y\n        r = 0\n        for x in a:\n            c = gcd(c, x)\n            if c == y:\n                c = 0\n                r = r + 1\n        if r >= k:\n            print('YES')\n        else:\n            print('NO')", "import math as m\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = 0\n    ans = 0\n    for i in a:\n        x = m.gcd(x, i)\n    curr = 0\n    for i in a:\n        curr = m.gcd(curr, i)\n        if curr == x:\n            curr = 0\n            ans += 1\n    if ans >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef isKGoodArray(nums, k):\n    arrayGcd = 0\n    for num in nums:\n        arrayGcd = math.gcd(arrayGcd, num)\n    subarrayGcd = 0\n    numSubarrays = 0\n    for i in range(len(nums)):\n        subarrayGcd = math.gcd(nums[i], subarrayGcd)\n        if subarrayGcd == arrayGcd:\n            subarrayGcd = 0\n            numSubarrays += 1\n    return numSubarrays >= k\nnumTestCases = int(input())\nfor i in range(numTestCases):\n    (n, k) = [int(i) for i in input().split(' ')]\n    nums = [int(i) for i in input().split(' ')]\n    result = 'YES' if isKGoodArray(nums, k) else 'NO'\n    print(result)", "import math\n\ndef isKGoodArray(nums, k):\n    arrayGcd = 0\n    for num in nums:\n        arrayGcd = math.gcd(arrayGcd, num)\n    subarrayGcd = 0\n    numSubarrays = 0\n    for i in range(len(nums)):\n        subarrayGcd = math.gcd(nums[i], subarrayGcd)\n        if subarrayGcd == arrayGcd:\n            subarrayGcd = 0\n            numSubarrays += 1\n    return numSubarrays >= k\nnumTestCases = int(input())\nfor i in range(numTestCases):\n    (n, k) = [int(i) for i in input().split(' ')]\n    nums = [int(i) for i in input().split(' ')]\n    result = 'YES' if isKGoodArray(nums, k) else 'NO'\n    print(result)", "import math\n\ndef isKGoodArray(nums, k):\n    arrayGcd = 0\n    for num in nums:\n        arrayGcd = math.gcd(arrayGcd, num)\n    subarrayGcd = 0\n    numSubarrays = 0\n    for i in range(len(nums)):\n        subarrayGcd = math.gcd(nums[i], subarrayGcd)\n        if subarrayGcd == arrayGcd:\n            subarrayGcd = 0\n            numSubarrays += 1\n    return numSubarrays >= k\nnumTestCases = int(input())\nfor i in range(numTestCases):\n    (n, k) = [int(i) for i in input().split(' ')]\n    nums = [int(i) for i in input().split(' ')]\n    result = 'YES' if isKGoodArray(nums, k) else 'NO'\n    print(result)", "import math\n\ndef gcd_arr(arr, f_gcd):\n    sum = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] == f_gcd:\n            sum += 1\n            i += 1\n        else:\n            temp = arr[i]\n            i += 1\n            possib = False\n            while i <= len(arr):\n                if temp == f_gcd:\n                    possib = True\n                    break\n                if i == len(arr):\n                    break\n                temp = math.gcd(temp, arr[i])\n                i += 1\n            if possib == True:\n                sum += 1\n    return sum\nk = int(input())\narr = []\nfor i in range(k):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    arr = input().split()\n    arr = [int(l) for l in arr]\n    f_gcd = arr[0]\n    for j in range(1, n):\n        f_gcd = math.gcd(f_gcd, arr[j])\n    if gcd_arr(arr, f_gcd) >= m:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef isKGoodArray(nums, k):\n    arrayGcd = 0\n    for num in nums:\n        arrayGcd = math.gcd(arrayGcd, num)\n    subarrayGcd = 0\n    numSubarrays = 0\n    for i in range(len(nums)):\n        subarrayGcd = math.gcd(nums[i], subarrayGcd)\n        if subarrayGcd == arrayGcd:\n            subarrayGcd = 0\n            numSubarrays += 1\n    return numSubarrays >= k\nnumTestCases = int(input())\nfor i in range(numTestCases):\n    (n, k) = [int(i) for i in input().split(' ')]\n    nums = [int(i) for i in input().split(' ')]\n    result = 'YES' if isKGoodArray(nums, k) else 'NO'\n    print(result)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef gcd_of_list(l):\n    gcd = 0\n    for i in range(len(l)):\n        gcd = find_gcd(gcd, l[i])\n    return gcd\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    t = gcd_of_list(l)\n    count = 0\n    temp_gcd = 0\n    for i in range(n):\n        temp_gcd = find_gcd(temp_gcd, l[i])\n        if temp_gcd == t:\n            count += 1\n            temp_gcd = 0\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    g = 0\n    for num in arr:\n        g = math.gcd(g, num)\n    cnt = 0\n    tg = 0\n    for num in arr:\n        tg = math.gcd(tg, num)\n        if tg == g:\n            cnt += 1\n            tg = 0\n    if cnt >= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    G = reduce(gcd, a)\n    cur = taken = 0\n    for i in a:\n        cur = gcd(cur, i)\n        if cur == G:\n            cur = 0\n            taken += 1\n    if taken >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    L = list(map(int, input().split()))\n    G = 0\n    for i in range(N):\n        G = math.gcd(G, L[i])\n    count = 0\n    g = 0\n    for i in range(N):\n        g = math.gcd(g, L[i])\n        if g == G:\n            count = count + 1\n            g = 0\n    if count >= K:\n        print('YES')\n    else:\n        print('NO')", "import math\nfrom functools import reduce\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    L = list(map(int, input().split()))\n    g = reduce(math.gcd, L)\n    if x == y:\n        if len(set(L)) == 1:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if y == 1:\n        print('YES')\n        continue\n    sarr = 0\n    ind = 0\n    while ind < x and sarr < y:\n        currentgcd = 0\n        while ind < x and currentgcd != g:\n            currentgcd = math.gcd(currentgcd, L[ind])\n            ind += 1\n        if currentgcd == g:\n            sarr += 1\n    if sarr == y:\n        print('YES')\n    else:\n        print('NO')", "import math\nfrom functools import reduce\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    L = list(map(int, input().split()))\n    g = reduce(math.gcd, L)\n    if x == y:\n        if len(set(L)) == 1:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if y == 1:\n        print('YES')\n        continue\n    sarr = 0\n    ind = 0\n    while ind < x and sarr < y:\n        currentgcd = 0\n        while ind < x and currentgcd != g:\n            currentgcd = math.gcd(currentgcd, L[ind])\n            ind += 1\n        if currentgcd == g:\n            sarr += 1\n    if sarr == y:\n        print('YES')\n    else:\n        print('NO')", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, a[i])\n    cur = 0\n    ans = 0\n    for i in range(n):\n        cur = gcd(cur, a[i])\n        if cur == g:\n            cur = 0\n            ans += 1\n    if ans >= k:\n        print('YES')\n    else:\n        print('NO')", "def hcfnaive(a, b):\n    if a == 1 or b == 1:\n        return 1\n    if b == 0:\n        return abs(a)\n    else:\n        return hcfnaive(b, a % b)\nT = int(input())\nfor _ in range(T):\n    data = list(map(int, input().strip().split()))\n    k = data[1]\n    N = data[0]\n    array = list(map(int, input().strip().split()))\n    gcd = array[0]\n    for i in range(1, N):\n        gcd = hcfnaive(gcd, array[i])\n    tempgcd = 0\n    for i in range(0, N):\n        if tempgcd == 0:\n            tempgcd = array[i]\n        tempgcd = hcfnaive(tempgcd, array[i])\n        if gcd == tempgcd:\n            k -= 1\n            tempgcd = 0\n    if k > 0:\n        print('NO')\n    else:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    G = 0\n    count = 0\n    for i in a:\n        G = math.gcd(i, G)\n    g1 = 0\n    for i in a:\n        g1 = math.gcd(i, g1)\n        if g1 == G:\n            count += 1\n            g1 = 0\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nt = int(input())\nfor i in range(0, t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    A = list(map(int, input().split()))\n    hcf = 0\n    for i in A:\n        hcf = gcd(hcf, i)\n    gcd1 = 0\n    count = 0\n    for i in A:\n        gcd1 = gcd(gcd1, i)\n        if gcd1 == hcf:\n            count += 1\n            gcd1 = 0\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = 0\n    for i in a:\n        g = gcd(g, i)\n    g1 = 0\n    c = 0\n    for i in a:\n        g1 = gcd(g1, i)\n        if g1 == g:\n            c += 1\n            g1 = 0\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nt = int(input())\nfor i in range(0, t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    A = list(map(int, input().split()))\n    hcf = 0\n    for i in A:\n        hcf = gcd(hcf, i)\n    gcd1 = 0\n    count = 0\n    for i in A:\n        gcd1 = gcd(gcd1, i)\n        if gcd1 == hcf:\n            count += 1\n            gcd1 = 0\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nt = int(input())\nfor i in range(0, t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    A = list(map(int, input().split()))\n    hcf = 0\n    for i in A:\n        hcf = gcd(hcf, i)\n    gcd1 = 0\n    count = 0\n    for i in A:\n        gcd1 = gcd(gcd1, i)\n        if gcd1 == hcf:\n            count += 1\n            gcd1 = 0\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\ntest = int(input())\nfor i in range(test):\n    (size, k) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    arr_gcd = nums[0]\n    for j in range(1, len(nums)):\n        arr_gcd = math.gcd(arr_gcd, nums[j])\n    finres = False\n    gcd = 0\n    count = 0\n    for k1 in nums:\n        gcd = math.gcd(gcd, k1)\n        if gcd == arr_gcd:\n            count += 1\n            gcd = 0\n            if count == k:\n                finres = True\n                break\n    if finres == True:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input(''))\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    current_gcd = arr[0]\n    for i in range(1, n):\n        current_gcd = math.gcd(current_gcd, arr[i])\n    count = 0\n    solution = False\n    g = 0\n    for i in range(n):\n        g = math.gcd(g, arr[i])\n        if g == current_gcd:\n            count += 1\n            g = 0\n            if count == k:\n                solution = True\n    if solution:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = max(l)\n    g = m\n    for i in range(n):\n        g = math.gcd(l[i], g)\n    c = l[0]\n    for i in range(n):\n        c = math.gcd(c, l[i])\n        if c == g:\n            k = k - 1\n            if i + 1 == n:\n                break\n            else:\n                c = l[i + 1]\n    if k > 0:\n        print('NO')\n    else:\n        print('YES')", "from math import gcd\nfor i in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    curr_gcd = 0\n    for i in A:\n        curr_gcd = gcd(curr_gcd, i)\n    x = 0\n    g = 0\n    for i in A:\n        g = gcd(g, i)\n        if g == curr_gcd:\n            K -= 1\n            g = 0\n    if K <= 0:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    (a, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    curr_gcd = 0\n    for i in arr:\n        curr_gcd = gcd(curr_gcd, i)\n    ans = 0\n    g = 0\n    for i in arr:\n        g = gcd(g, i)\n        if g == curr_gcd:\n            k -= 1\n            g = 0\n    if k <= 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    elements = list(map(int, input().split()))\n    gcd = elements[0]\n    for i in range(1, n):\n        gcd = math.gcd(gcd, elements[i])\n    cnt = 0\n    g = 0\n    has_solution = False\n    for i in range(n):\n        g = math.gcd(g, elements[i])\n        if g == gcd:\n            g = 0\n            cnt += 1\n            if cnt == k:\n                has_solution = True\n                break\n    if has_solution:\n        print('YES')\n    else:\n        print('NO')", "from functools import reduce\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (len, K) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    G = reduce(gcd, arr)\n    (curG, count) = (0, 0)\n    for i in range(len):\n        curG = gcd(curG, arr[i])\n        if curG == G:\n            count += 1\n            curG = 0\n        if count == K:\n            break\n    if count == K:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if a > b:\n        (a, b) = (b, a)\n    while True:\n        rem = b % a\n        if rem == 0:\n            return a\n        b = a\n        a = rem\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    g = A[0]\n    G = A[0]\n    for i in range(n):\n        G = gcd(A[i], G)\n    c = 0\n    for i in range(n):\n        g = gcd(g, A[i])\n        if g == G:\n            c += 1\n            if i + 1 < n:\n                g = A[i + 1]\n            else:\n                break\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')", "def solve(n1, n2, l):\n    gcd = l[0]\n    for i in range(1, n1):\n        gcd = math.gcd(gcd, l[i])\n    count = 0\n    check = -1\n    for i in range(0, len(l)):\n        if check == gcd:\n            count += 1\n            check = l[i]\n        elif check == -1:\n            check = l[i]\n        else:\n            check = math.gcd(check, l[i])\n    if check == gcd:\n        count += 1\n    if count >= n2:\n        return 'YES'\n    else:\n        return 'NO'\nimport math\nn = int(input())\nwhile n:\n    (n1, n2) = map(int, input().split())\n    l = list(map(int, input().split()))\n    print(solve(n1, n2, l))\n    n -= 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    G = 0\n    for i in arr:\n        G = gcd(G, i)\n    cur = 0\n    ans = 0\n    for i in arr:\n        cur = gcd(cur, i)\n        if cur == G:\n            ans += 1\n            cur = 0\n        if ans == k:\n            break\n    if ans == k:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    G = 0\n    for i in arr:\n        G = gcd(G, i)\n    currg = 0\n    ans = 0\n    for i in arr:\n        currg = gcd(currg, i)\n        if currg == G:\n            ans += 1\n            currg = 0\n        if ans == k:\n            break\n    if ans == k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    G = 0\n    for i in a:\n        G = gcd(G, i)\n    cur_gcd = 0\n    count = 0\n    for i in a:\n        cur_gcd = gcd(cur_gcd, i)\n        if cur_gcd == G:\n            count += 1\n            cur_gcd = 0\n    print('YES' if count >= k else 'NO')\n    t -= 1", "from math import gcd\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    G = 0\n    for i in a:\n        G = gcd(G, i)\n    cur_gcd = 0\n    count = 0\n    for i in a:\n        cur_gcd = gcd(cur_gcd, i)\n        if cur_gcd == G:\n            count += 1\n            cur_gcd = 0\n    print('YES' if count >= k else 'NO')\n    t -= 1", "from math import gcd\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    G = 0\n    for i in a:\n        G = gcd(G, i)\n    cur_gcd = 0\n    count = 0\n    for i in a:\n        cur_gcd = gcd(cur_gcd, i)\n        if cur_gcd == G:\n            count += 1\n            cur_gcd = 0\n    print('YES' if count >= k else 'NO')\n    t -= 1", "from math import gcd\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    G = 0\n    for i in a:\n        G = gcd(G, i)\n    cur_gcd = 0\n    count = 0\n    for i in a:\n        cur_gcd = gcd(cur_gcd, i)\n        if cur_gcd == G:\n            count += 1\n            cur_gcd = 0\n    print('YES' if count >= k else 'NO')\n    t -= 1", "from math import *\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    list_a = list(map(int, input().split()))\n    G = list_a[0]\n    counter = 0\n    for j in list_a:\n        G = gcd(G, j)\n    sub_G = 0\n    for j in list_a:\n        sub_G = gcd(sub_G, j)\n        if G == sub_G:\n            counter += 1\n            sub_G = 0\n    if counter >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nT = int(input())\nfor j in range(T):\n    (N, K) = map(int, input().split())\n    a = list(map(int, input().split()))\n    G = 0\n    for i in a:\n        G = math.gcd(G, i)\n    g = 0\n    count = 0\n    for i in range(N):\n        g = math.gcd(g, a[i])\n        if g == G:\n            g = 0\n            count += 1\n    if count >= K:\n        print('YES')\n    else:\n        print('NO')", "def rt(n, k):\n    p = n[0]\n    for i in range(1, len(n)):\n        p = gcd(p, n[i])\n    t = n[0]\n    r = 0\n    for i in range(0, len(n)):\n        t = gcd(t, n[i])\n        if t == p:\n            r = r + 1\n            if i != len(n) - 1:\n                t = n[i + 1]\n    if r >= k:\n        print('YES')\n    else:\n        print('NO')\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nx = int(input())\nfor i in range(0, x):\n    [a, b] = input().split(' ')\n    a = int(a)\n    b = int(b)\n    x = [int(j) for j in input().split(' ')]\n    rt(x, b)", "def hcf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef possible(arr, N, K):\n    if len(arr) == 1:\n        return True\n    num1 = arr[0]\n    num2 = arr[1]\n    gcd = hcf(num1, num2)\n    for i in range(2, len(arr)):\n        gcd = hcf(gcd, arr[i])\n    count = 0\n    current_gcd = 0\n    for i in range(N):\n        current_gcd = hcf(current_gcd, arr[i])\n        if current_gcd == gcd:\n            current_gcd = 0\n            count += 1\n    if count >= K:\n        return True\n    return False\nfor i in range(int(input())):\n    (N, K) = tuple(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    if possible(arr, N, K):\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    k = l[1]\n    arr = list(map(int, input().split()))\n    c = 0\n    G = 0\n    g = 0\n    for l in arr:\n        G = math.gcd(G, l)\n    for i in range(len(arr)):\n        g = math.gcd(g, arr[i])\n        if g == G:\n            c += 1\n            g = 0\n        else:\n            continue\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    G = reduce(gcd, a)\n    cur = taken = 0\n    for i in range(n):\n        cur = gcd(cur, a[i])\n        if cur == G:\n            cur = 0\n            taken += 1\n    print('YES' if taken >= k else 'NO')", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    G = a[0]\n    for i in range(1, len(a)):\n        G = math.gcd(G, a[i])\n    c = 0\n    i = 0\n    g = a[i]\n    while i < len(a):\n        g = a[i]\n        if g == G:\n            c = c + 1\n            i = i + 1\n            continue\n        if i + 1 == len(a):\n            break\n        else:\n            for j in range(i + 1, len(a)):\n                g = math.gcd(g, a[j])\n                if g == G:\n                    c = c + 1\n                    i = j + 1\n                    break\n                if j == len(a) - 1:\n                    i = len(a)\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nn = int(input())\nfor k in range(n):\n    (N, K) = map(int, input().split())\n    krr = list(map(int, input().strip().split()))[:N]\n    ans = 0\n    count = 0\n    X = 0\n    for i in range(len(krr)):\n        ans = math.gcd(ans, krr[i])\n    for i in range(len(krr)):\n        X = math.gcd(X, krr[i])\n        if X == ans:\n            X = 0\n            count += 1\n    if count >= K:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nT = int(input())\nfor t in range(1, T + 1):\n    inp = list(map(int, input().split()))\n    N = inp[0]\n    K = inp[1]\n    arr = list(map(int, input().split()))\n    count = 0\n    G = 0\n    for i in range(N):\n        G = gcd(G, arr[i])\n    x = 0\n    for i in range(N):\n        x = gcd(x, arr[i])\n        if x == G:\n            count += 1\n            x = 0\n    if count >= K:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (n, kk) = map(int, input().split())\n    a = list(map(int, input().split()))\n    gc = 0\n    for i in range(len(a)):\n        gc = math.gcd(gc, a[i])\n    k = 0\n    c = 0\n    j = 0\n    while j < len(a):\n        k = math.gcd(k, a[j])\n        if k != gc:\n            j += 1\n        else:\n            c += 1\n            k = 0\n            j += 1\n    if c >= kk:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    G = 0\n    for i in arr:\n        G = math.gcd(G, i)\n    x = 0\n    count = 0\n    for i in arr:\n        x = math.gcd(x, i)\n        if x == G:\n            x = 0\n            count += 1\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    (n, k) = mp()\n    l = li()\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    c = 0\n    x = 0\n    for i in l:\n        x = gcd(x, i)\n        if x == g:\n            x = 0\n            c += 1\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nimport math\n\nclass T:\n\n    def solve(self):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        d = defaultdict(int)\n        ans = self.gcd(a, n)\n        sgcd = 0\n        count = 0\n        d[0] = 1\n        for i in range(n):\n            sgcd = math.gcd(sgcd, a[i])\n            if sgcd == ans:\n                sgcd = 0\n                count += 1\n        if count >= k:\n            return 'YES'\n        return 'NO'\n\n    def gcd(self, a, n):\n        ans = a[0]\n        for i in range(1, n):\n            ans = math.gcd(ans, a[i])\n        return ans\nfor t in range(int(input())):\n    obj = T()\n    print(obj.solve())", "import math\nfrom collections import Counter\nfrom collections import defaultdict\nimport sys\n\ndef get_ints():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef solve(n, k, arr):\n    g = 0\n    for i in arr:\n        g = math.gcd(g, i)\n    gg = 0\n    cnt = 0\n    j = 0\n    while j < len(arr):\n        gg = math.gcd(arr[j], gg)\n        if gg != g:\n            j += 1\n        else:\n            cnt += 1\n            gg = 0\n            j += 1\n    if cnt >= k:\n        return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    n = get_ints()\n    arr = get_ints()\n    print(solve(n[0], n[1], arr))", "import math\nT = int(input())\nfor _ in range(T):\n    (N, K) = [int(i) for i in input().split(' ')]\n    A = [int(i) for i in input().split(' ')]\n    G = 0\n    for i in range(N):\n        G = math.gcd(G, A[i])\n    g = 0\n    c = 0\n    for i in range(N):\n        g = math.gcd(g, A[i])\n        if g == G:\n            g = 0\n            c += 1\n    if c >= K:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef gcd_list(arr):\n    res = arr[0]\n    for i in range(1, len(arr)):\n        res = gcd(*sorted([res, arr[i]]))\n    return res\nt = int(input())\nfor i in range(t):\n    (n, k) = [int(el) for el in input().split(' ')]\n    arr = [int(el) for el in input().split(' ')]\n    g = gcd_list(arr)\n    count = 0\n    current = arr[0]\n    for j in range(1, n):\n        if current == g:\n            count += 1\n            current = arr[j]\n        else:\n            current = gcd(*sorted([current, arr[j]]))\n    if current == g:\n        count += 1\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = min(a)\n    count = 0\n    for j in a:\n        if j % g != 0:\n            g = 1\n            break\n    p = 0\n    for j in range(0, n):\n        p = gcd(p, a[j])\n        if p == g:\n            count += 1\n            p = 0\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    G = 0\n    for i in range(n):\n        G = math.gcd(G, l[i])\n    g = 0\n    count = 0\n    flag = 0\n    for i in range(n):\n        g = math.gcd(g, l[i])\n        if g == G:\n            count += 1\n            g = 0\n        if count == k:\n            flag = 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "import os.path\nfrom math import gcd, floor, ceil, log2\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef gcd_fn(a, n):\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    return g\nfor _ in range(int(input())):\n    (n, k) = mp()\n    a = li()\n    G = gcd_fn(a, n)\n    res = 0\n    x = 0\n    for i in range(n):\n        x = gcd(x, a[i])\n        if x == G:\n            res += 1\n            x = 0\n    if res >= k:\n        pr('YES')\n    else:\n        pr('NO')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    G = 0\n    for i in range(n):\n        G = gcd(G, arr[i])\n    count = 0\n    subG = 0\n    for i in range(n):\n        subG = gcd(subG, arr[i])\n        if subG == G:\n            subG = 0\n            count += 1\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    G = 0\n    for i in range(n):\n        G = gcd(G, arr[i])\n    count = 0\n    subG = 0\n    for i in range(n):\n        subG = gcd(subG, arr[i])\n        if subG == G:\n            subG = 0\n            count += 1\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor t in range(int(input())):\n    (le, k) = [int(i) for i in input().split()]\n    l1 = [int(i) for i in input().split()]\n    g = l1[0]\n    for ele in l1:\n        g = math.gcd(g, ele)\n    c = 0\n    ng = 0\n    for i in range(le):\n        ng = math.gcd(ng, l1[i])\n        if ng == g:\n            c += 1\n            ng = 0\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (g, curr, ans) = (0, 0, 0)\n    for i in l:\n        g = gcd(g, i)\n    for i in l:\n        curr = gcd(curr, i)\n        if curr == g:\n            curr = 0\n            ans += 1\n    print('YES' if ans >= k else 'NO')", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (g, curr, ans) = (0, 0, 0)\n    for i in l:\n        g = gcd(g, i)\n    for i in l:\n        curr = gcd(curr, i)\n        if curr == g:\n            curr = 0\n            ans += 1\n    print('YES' if ans >= k else 'NO')", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    G = reduce(gcd, a)\n    g = 0\n    ans = 0\n    for i in a:\n        g = gcd(g, i)\n        if g == G:\n            g = 0\n            ans += 1\n    if ans >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nfrom bisect import bisect_left\nfrom code import interact\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nfrom pydoc import plain\nfrom re import X\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\n\ndef k_subarrays(array, size, k):\n    (_gcd, temp, temp2) = (0, 0, 0)\n    for item in array:\n        _gcd = math.gcd(_gcd, item)\n    for item in array:\n        temp = math.gcd(temp, item)\n        if temp == _gcd:\n            temp2 += 1\n            temp = 0\n    if temp2 >= k:\n        return True\n    else:\n        return False\nfor i in range(ii()):\n    (size, y) = il()\n    array = il()\n    if k_subarrays(array, size, y):\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    flag = True\n    g = reduce(gcd, a)\n    x = 0\n    for i in range(n):\n        x = gcd(x, a[i])\n        if x == g:\n            x = 0\n            c += 1\n    print('YES' if c >= k else 'NO')", "from math import gcd\nfrom functools import reduce\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    G = reduce(gcd, l)\n    cur = cnt = 0\n    for i in range(n):\n        cur = gcd(cur, l[i])\n        if cur == G:\n            cur = 0\n            cnt += 1\n    if cnt >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    cnt = 0\n    _gcd = 0\n    g = 0\n    for i in nums:\n        g = math.gcd(g, i)\n    for i in nums:\n        _gcd = math.gcd(_gcd, i)\n        if _gcd == g:\n            cnt += 1\n            _gcd = 0\n    if cnt >= b:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor i in range(t):\n    (a, k) = map(int, input().split())\n    n = [int(i) for i in input().split()]\n    g = 0\n    for i in n:\n        g = math.gcd(i, g)\n    p = 0\n    count = 0\n    for i in n:\n        p = math.gcd(i, p)\n        if p == g:\n            count += 1\n            p = 0\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nwhile t:\n    (a, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    res = l[0]\n    for i in l:\n        res = gcd(res, i)\n    g = 0\n    c = 0\n    for i in l:\n        g = gcd(g, i)\n        if g == res:\n            c += 1\n            g = 0\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    G = 0\n    for i in range(n):\n        G = gcd(G, arr[i])\n    c = 0\n    subG = 0\n    for i in range(n):\n        subG = gcd(subG, arr[i])\n        if subG == G:\n            c = c + 1\n            subG = 0\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    g_c = 0\n    for j in x:\n        g_c = math.gcd(g_c, j)\n    count = 0\n    curr = 0\n    for j in x:\n        curr = math.gcd(curr, j)\n        if curr == g_c:\n            count += 1\n            curr = 0\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input().split()))\n    g = 0\n    for i in range(n):\n        g = gcd(g, s[i])\n    if g != 1:\n        for i in range(n):\n            s[i] //= g\n    cnt = 0\n    gc = 0\n    for i in range(n):\n        gc = gcd(gc, s[i])\n        if gc == 1:\n            cnt += 1\n            gc = 0\n    if cnt >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor i in range(t):\n    (a, k) = map(int, input().split())\n    n = list(map(int, input().split()))\n    x = n[0]\n    for i in n:\n        x = math.gcd(i, x)\n    g = n[0]\n    c = 0\n    for i in range(a):\n        g = math.gcd(n[i], g)\n        if g == x:\n            c = c + 1\n            if i != len(n) - 1:\n                g = n[i + 1]\n    if c >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    G = l[0]\n    for i in range(1, n):\n        G = math.gcd(l[i], G)\n    count = 0\n    g = l[0]\n    for i in range(n):\n        g = math.gcd(g, l[i])\n        if g == G:\n            count += 1\n            if i != n - 1:\n                g = l[i + 1]\n    if count >= k:\n        print('YES')\n    else:\n        print('NO')"]