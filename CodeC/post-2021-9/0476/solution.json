["import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    (c, d) = (a, b)\n    for i in range(40):\n        if c == d:\n            break\n        elif c < d:\n            c *= a\n        else:\n            d *= b\n    if c != d:\n        print('NO')\n    else:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    (c, d) = (a, b)\n    for i in range(40):\n        if c == d:\n            break\n        elif c < d:\n            c *= a\n        else:\n            d *= b\n    if c != d:\n        print('NO')\n    else:\n        print('YES')", "test_case = int(input())\nfor i in range(test_case):\n    (a, b) = map(int, input().split())\n    maxi = max(a, b)\n    mini = min(a, b)\n    l = []\n    ok = False\n    for j in range(1, 20):\n        l.append(maxi ** j)\n        if mini ** j in l:\n            ok = True\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (A, B) = map(int, input().split())\n    maximum = max(A, B)\n    minimum = min(A, B)\n    l = []\n    ans = 0\n    for j in range(1, 40):\n        l.append(maximum ** j)\n        if minimum ** j in l:\n            ans = 1\n            break\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')", "test_case = int(input())\nfor i in range(test_case):\n    (a, b) = map(int, input().split())\n    maxi = max(a, b)\n    mini = min(a, b)\n    l = []\n    ok = False\n    for j in range(1, 20):\n        l.append(maxi ** j)\n        if mini ** j in l:\n            ok = True\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin, stdout\n_r = range\n_l = len\n_s = str\n_i = int\n_f = float\n_m = map\n_li = list\nIn = stdin.readline\nOut = stdout.write\nR = lambda : In().strip()\nRS = lambda : R().split()\nI = lambda : _i(R())\nM = lambda : _m(_i, RS())\nL = lambda : _li(_m(_i, RS()))\nNsum = lambda n: n * (n + 1) // 2\nDet = lambda a, b, c: (-b + (b * b - 4 * a * c) ** 0.5) / 2\niBit = lambda n, i: n >> i & 1\nDiv2 = lambda x: x & ~(x - 1)\npow2 = lambda x: log(Div2(x), 2)\nlcm = lambda x, y: x * y // gcd(x, y)\nmode = lambda counter: counter.most_common(1)\n\ndef Y():\n    stdout.write('Yes')\n\ndef N():\n    stdout.write('No')\nmod = 1000000007\n\ndef Mapp(arr):\n    d = _dd(int)\n    for i in arr:\n        d[i] += 1\n    return d\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef isPrime(n):\n    if n < 3:\n        return n == 2\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef Pow(a, b, mod):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % mod\n        a *= a\n        b >>= 1\n    return res\n\ndef nCr(n, r):\n    x = y = 1\n    if n - r < r:\n        r = n - r\n    while r:\n        x *= n\n        y *= r\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        n -= 1\n        r -= 1\n    return x\n\ndef Countarr(li, n):\n    arr = []\n    i = 0\n    mx = 0\n    c = li[0]\n    cnt = 0\n    while i < n:\n        if c == li[i]:\n            cnt += 1\n        else:\n            mx = max(mx, cnt)\n            arr.append(cnt)\n            cnt = 1\n            c = li[i]\n        i += 1\n    mx = max(mx, cnt)\n    arr.append(cnt)\n    return (C(arr), mx)\n\ndef LIS(arr, n):\n    store = [0] * n\n    p = 1\n    store[0] = arr[0]\n    for i in arr:\n        if i > store[p - 1]:\n            store[p] = i\n            p += 1\n        else:\n            store[bL(store, i, 0, p - 1)] = i\n    return p\nmod = 998244353\n\ndef fun(x, d):\n    c = 0\n    while x % d == 0:\n        c += 1\n        x //= d\n    return [c, x]\narr = []\nmx = 10 ** 3\npr = [True] * (mx + 1)\nfor i in _r(2, mx + 1):\n    if pr[i]:\n        arr.append(i)\n        j = i * i\n        while j <= mx:\n            pr[j] = False\n            j += i\n\ndef solve():\n    (a, b) = M()\n    if a < b:\n        (a, b) = (b, a)\n    x = y = -1\n    for i in arr:\n        if a == 1 or b == 1:\n            break\n        (c1, a) = fun(a, i)\n        (c2, b) = fun(b, i)\n        if c1 and (not c2) or (c2 and (not c1)):\n            return False\n        g = gcd(c1, c2)\n        if g == 0:\n            continue\n        if y == -1:\n            x = c1 // g\n            y = c2 // g\n        elif x != c1 // g or y != c2 // g:\n            return False\n    return a == b\nfor _ in _r(I()):\n    print('YES' if solve() else 'NO')", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    mx = max(a, b)\n    mn = min(a, b)\n    l2 = []\n    count = 0\n    for j in range(1, 20):\n        l2.append(mx ** j)\n        if mn ** j in l2:\n            count = 1\n            break\n    if count == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    mx = max(a, b)\n    mn = min(a, b)\n    l2 = []\n    count = 0\n    for j in range(1, 20):\n        l2.append(mx ** j)\n        if mn ** j in l2:\n            count = 1\n            break\n    if count == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    mx = max(a, b)\n    mn = min(a, b)\n    l1 = []\n    l2 = []\n    count = 0\n    for j in range(1, 20):\n        l1.append(mn ** j)\n        l2.append(mx ** j)\n        if mn ** j in l2:\n            count = 1\n            break\n    if count == 1:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (a, b) = map(int, input().split())\n    while a != b:\n        mx = max(a, b)\n        mn = min(a, b)\n        if mx % mn != 0:\n            print('NO')\n            return\n        (a, b) = (mn, mx // mn)\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    (a, b) = map(int, input().split())\n    while a != b:\n        mx = max(a, b)\n        mn = min(a, b)\n        if mx % mn != 0:\n            print('NO')\n            return\n        (a, b) = (mn, mx // mn)\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "def gcd():\n    (a, b) = map(int, input().split())\n    while a != b:\n        m = max(a, b)\n        n = min(a, b)\n        if m % n != 0:\n            print('NO')\n            return\n        (a, b) = (n, m // n)\n    print('YES')\ncase = int(input())\nfor _ in range(case):\n    gcd()", "def solve():\n    (a, b) = map(int, input().split())\n    while a != b:\n        mx = max(a, b)\n        mn = min(a, b)\n        if mx % mn != 0:\n            print('NO')\n            return\n        (a, b) = (mn, mx // mn)\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    (a, b) = map(int, input().split())\n    while a != b:\n        mx = max(a, b)\n        mn = min(a, b)\n        if mx % mn != 0:\n            print('NO')\n            return\n        (a, b) = (mn, mx // mn)\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    (a, b) = map(int, input().split())\n    while a != b:\n        mx = max(a, b)\n        mn = min(a, b)\n        if mx % mn != 0:\n            print('NO')\n            return\n        (a, b) = (mn, mx // mn)\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    (a, b) = map(int, input().split())\n    while a != b:\n        mx = max(a, b)\n        mn = min(a, b)\n        if mx % mn != 0:\n            print('NO')\n            return\n        (a, b) = (mn, mx // mn)\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve() -> None:\n    (a, b) = map(int, input().split())\n    while a != b:\n        mx = max(a, b)\n        mn = min(a, b)\n        if mx % mn != 0:\n            print('NO')\n            return\n        (a, b) = (mn, mx // mn)\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == b:\n        print('YES')\n        continue\n    while math.gcd(a, b) != 1 and a != b:\n        if a > b:\n            a = a // math.gcd(a, b)\n        else:\n            b = b // math.gcd(a, b)\n    if a == 1 or b == 1 or a == b:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == b:\n        print('YES')\n        continue\n    while gcd(a, b) != 1 and a != b:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    if a == 1 or b == 1 or a == b:\n        print('YES')\n    else:\n        print('NO')", "def solve() -> None:\n    (a, b) = map(int, input().split())\n    while a != b:\n        mx = max(a, b)\n        mn = min(a, b)\n        if mx % mn != 0:\n            print('NO')\n            return\n        (a, b) = (mn, mx // mn)\n    print('YES')\nt = int(input())\nfor _ in range(t):\n    solve()", "from sys import stdin\ninput = stdin.readline\n\ndef fun(n, m):\n    if n == m:\n        return True\n    if n < m:\n        (n, m) = (m, n)\n    if m == 1 and n == 1:\n        return True\n    if n % m:\n        return False\n    return fun(m, n // m)\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    print('YES' if fun(n, m) else 'NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = set()\n    d = set()\n    for i in range(1, 20):\n        c.add(a ** i)\n        d.add(b ** i)\n    s = c.intersection(d)\n    if s:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a == b:\n        print('YES')\n        continue\n    while gcd(a, b) != 1 and a != b:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    if a == 1 or b == 1 or a == b:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\n\ndef s(a, b):\n    (b, a) = (a, b)\n\ndef solve():\n    (A, B) = map(int, input().split())\n    if A == B:\n        print('YES')\n    else:\n        while gcd(A, B) != 1 and A != B:\n            if A > B:\n                A = A // gcd(A, B)\n            else:\n                B = B // gcd(A, B)\n        if A == 1 or B == 1 or A == B:\n            print('YES')\n        else:\n            print('NO')\nT = int(input())\nwhile T > 0:\n    solve()\n    T -= 1", "from math import gcd\na = int(input())\nfor i in range(a):\n    (A, B) = map(int, input().split())\n    while gcd(A, B) != 1:\n        if A > B:\n            A = A // gcd(A, B)\n        else:\n            B = B // gcd(A, B)\n    if A == 1 or B == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    (a, b) = [int(i) for i in input().split()]\n    a1 = set()\n    b1 = set()\n    for i in range(1, 25):\n        a1.add(a ** i)\n        b1.add(b ** i)\n    s = a1.intersection(b1)\n    if s:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    (a, b) = [int(i) for i in input().split()]\n    a1 = set()\n    b1 = set()\n    for i in range(1, 25):\n        a1.add(a ** i)\n        b1.add(b ** i)\n    s = a1.intersection(b1)\n    if s:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    (a, b) = [int(i) for i in input().split()]\n    a1 = set()\n    b1 = set()\n    for i in range(1, 25):\n        a1.add(a ** i)\n        b1.add(b ** i)\n    s = a1.intersection(b1)\n    if s:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    (a, b) = [int(i) for i in input().split()]\n    a1 = set()\n    b1 = set()\n    for i in range(1, 20):\n        a1.add(a ** i)\n        b1.add(b ** i)\n    s = a1.intersection(b1)\n    if s:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    if a == 1 or b == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef solve(List):\n    lna = math.log(List[0])\n    lnb = math.log(List[1])\n    for y in range(1, 501):\n        if (y * lnb / lna).is_integer():\n            return True\n    return False\nInput = [[int(i) for i in input().split(' ')] for i in range(0, int(input()))]\nfor List in Input:\n    if solve(List) == True:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    if a == 1 or b == 1:\n        print('YES')\n    else:\n        print('NO')", "from fractions import Fraction\nimport math\nprimes = [1 for i in range(int(1000000.0 + 1))]\nprime = []\n\ndef sieve():\n    primes[0] = 0\n    primes[1] = 0\n    i = 2\n    while i * i <= int(1000000.0):\n        if primes[i]:\n            prime.append(i)\n            j = i * i\n            while j <= int(1000000.0):\n                primes[j] = 0\n                j += i\n        i += 1\n    i = int(1000.0 + 1)\n    while i <= int(1000000.0):\n        if primes[i]:\n            prime.append(i)\n        i += 1\n\ndef factors(n):\n    fac = []\n    i = 0\n    while i < len(prime) and prime[i] * prime[i] <= n:\n        cnt = 0\n        x = prime[i]\n        while n % x == 0:\n            cnt += 1\n            n = int(n / x)\n        if cnt > 0:\n            fac.append([x, cnt])\n        i += 1\n    if n > 1:\n        fac.append([n, 1])\n    return fac\nsieve()\nT = int(input())\nfor _ in range(T):\n    (A, B) = [int(i) for i in input().split(' ')]\n    if A == B:\n        print('YES')\n        continue\n    aFactors = factors(A)\n    bFactors = factors(B)\n    rat = set()\n    (n, m) = (len(aFactors), len(bFactors))\n    if n != m:\n        print('NO')\n        continue\n    flag = True\n    for i in range(n):\n        if aFactors[i][0] != bFactors[i][0]:\n            flag = False\n            break\n        x = aFactors[i][1]\n        y = bFactors[i][1]\n        gcd = math.gcd(x, y)\n        x = x // gcd\n        y = y // gcd\n        rat.add(f'{x}-{y}')\n    if flag and len(rat) == 1:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    if a == 1 or b == 1:\n        print('YES')\n    else:\n        print('NO')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfrom math import gcd\nfor _ in range(int(input())):\n    (a, b) = mi()\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    print('YES' if a == 1 or b == 1 else 'NO')", "def primefactorization(n):\n    l = [-1] * (n + 1)\n    for i in range(2, n):\n        if l[i] == -1:\n            for j in range(i, n + 1, i):\n                l[j] = i\n    return l\nl = primefactorization(10 ** 6 + 1)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l1 = []\n    l2 = []\n    s1 = set()\n    s2 = set()\n    while a > 0:\n        if l[a] != -1:\n            l1.append(l[a])\n            s1.add(l[a])\n        a = int(a / l[a])\n    while b > 0:\n        if l[b] != -1:\n            l2.append(l[b])\n            s2.add(l[b])\n        b = int(b / l[b])\n    ans = set()\n    if s1 == s2:\n        for i in s1:\n            ans.add(l1.count(i) / l2.count(i))\n            if len(ans) > 1:\n                print('NO')\n                break\n        else:\n            print('YES')\n    else:\n        print('NO')", "cache = [i for i in range(1000001)]\nfor i in range(2, 1000001):\n    for j in range(i * i, 1000001, i):\n        if cache[j] == j:\n            cache[j] = i\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nmod = 1000000007\n\ndef check(a, b):\n    if cache[a] != cache[b]:\n        return 'NO'\n    p = q = 0\n    spa = cache[a]\n    spb = cache[b]\n    while a % spa == 0:\n        a = a // spa\n        p += 1\n    while b % spb == 0:\n        b = b // spb\n        q += 1\n    lcm = compute_lcm(p, q)\n    x = lcm // p\n    y = lcm // q\n    a1 = pow(a, x) % mod\n    b1 = pow(b, y) % mod\n    return 'YES' if a1 == b1 else 'NO'\nt = int(input())\nwhile t != 0:\n    (a, b) = map(int, input().split(' '))\n    print(check(a, b))\n    t -= 1", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    print('YES' if a == 1 or b == 1 else 'NO')", "from math import gcd\nreps = int(input())\nfor _ in range(reps):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    print('YES' if a == 1 or b == 1 else 'NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef fact(n):\n    l = []\n    while n % 2 == 0:\n        l += [2]\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l += [i]\n            n = n // i\n    if n > 2:\n        l += [n]\n    return l\nt = int(input(''))\nfor i in range(0, t):\n    x = input('')\n    x = x.split(' ')\n    num1 = int(x[0])\n    num2 = int(x[1])\n    l1 = fact(num1)\n    fakel1 = []\n    l2 = fact(num2)\n    dic1 = {}\n    dic2 = {}\n    for ele in l1:\n        if ele in fakel1:\n            dic1[ele] = int(dic1[ele]) + 1\n        else:\n            dic1[ele] = 1\n        fakel1 += [ele]\n    fakel1 = []\n    for ele in l2:\n        if ele in fakel1:\n            dic2[ele] = int(dic2[ele]) + 1\n        else:\n            dic2[ele] = 1\n        fakel1 += [ele]\n    if len(dic1) != len(dic2):\n        print('NO')\n    else:\n        newl1 = dic1.keys()\n        newl2 = dic2.keys()\n        newl3 = []\n        newl4 = []\n        for ele in newl1:\n            newl3 += [ele]\n        for ele in newl2:\n            newl4 += [ele]\n        if newl3 == newl4 and len(newl3) == 1:\n            print('YES')\n        elif newl3 == newl4 and len(newl4) != 1:\n            count = 0\n            i = 0\n            x = int(dic1[newl4[0]])\n            y = int(dic2[newl4[0]])\n            z = x / y\n            for ele in newl1:\n                if i > 0:\n                    x = dic1[ele]\n                    y = dic2[ele]\n                    m = x / y\n                    if z != m:\n                        count = 1\n                        break\n                i += 1\n            if count == 0:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (acob, bcob) = (a, b)\n    c = 30\n    x = 0\n    while c > 0:\n        c -= 1\n        if a == b:\n            x = 1\n            break\n        if a < b:\n            a *= acob\n        if b < a:\n            b *= bcob\n    print('YES' if x == 1 else 'NO')", "from collections import defaultdict as dd\nfrom fractions import Fraction as F\nprimes = []\nfor n in range(2, 1010):\n    if all((n % p != 0 for p in primes)):\n        primes.append(n)\n\ndef find_primes(n):\n    factors = dd(int)\n    for p in primes:\n        while n % p == 0:\n            factors[p] += 1\n            n //= p\n        if n == 1:\n            break\n    if n != 1:\n        factors[n] += 1\n    return factors\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    p1 = find_primes(a)\n    p2 = find_primes(b)\n    if sorted(p1.keys()) != sorted(p2.keys()):\n        print('NO')\n        continue\n    frac = None\n    for (k, v1) in p1.items():\n        v2 = p2[k]\n        if frac is None:\n            frac = F(v1, v2)\n        if frac != F(v1, v2):\n            break\n    else:\n        print('YES')\n        continue\n    print('NO')", "from math import gcd\nreps = int(input())\nfor _ in range(reps):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    print('YES' if a == 1 or b == 1 else 'NO')", "n = 1000001\n(*a,) = range(n)\ni = 2\nwhile i * i < n:\n    j = i\n    while j < n:\n        if a[j] > i:\n            a[j] = i\n        j *= i\n    i += 1\nfor i in range(int(input())):\n    (x, y) = map(int, input().split())\n    if a[x] == a[y]:\n        print('YES')\n    else:\n        print('NO')", "n = 1000001\n(*a,) = range(n)\ni = 2\nwhile i * i < n:\n    j = i\n    while j < n:\n        if a[j] > i:\n            a[j] = i\n        j *= i\n    i += 1\nfor i in range(int(input())):\n    (x, y) = map(int, input().split())\n    if a[x] == a[y]:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\nreps = int(input())\nfor _ in range(reps):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    print('YES' if a == 1 or b == 1 else 'NO')", "from math import *\n\ndef equivalentNum(a, b):\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    if a == 1 or b == 1:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    equivalentNum(a, b)", "import math\n\ndef primeFactors(n):\n    l = []\n    c = 0\n    while n % 2 == 0:\n        n = n // 2\n        c += 1\n    if c != 0:\n        l.append([2, c])\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        c = 0\n        while n % i == 0:\n            n = n // i\n            c += 1\n        if c != 0:\n            l.append([i, c])\n    if n > 2:\n        l.append([n, 1])\n    return l\nt = int(input())\nfor x in range(t):\n    A = [int(b) for b in input().split()]\n    a = A[0]\n    b = A[1]\n    l1 = primeFactors(a)\n    l2 = primeFactors(b)\n    ln1 = len(l1)\n    ln2 = len(l2)\n    flag = 0\n    if ln1 == 1 and ln2 == 1 and (l1[0][0] == l2[0][0]):\n        print('YES')\n    elif ln1 == ln2 and ln1 != 1:\n        for j in range(ln1):\n            if l1[j][0] == l2[j][0] and j == 0:\n                tm1 = [l1[j][1], l2[j][1]]\n            elif l1[j][0] == l2[j][0]:\n                tm2 = [l1[j][1], l2[j][1]]\n                if tm2[0] * tm1[1] != tm2[1] * tm1[0]:\n                    flag = 1\n                    break\n            else:\n                flag = 1\n                break\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "import math\n\ndef primeFactors(n):\n    l = []\n    c = 0\n    while n % 2 == 0:\n        n = n // 2\n        c += 1\n    if c != 0:\n        l.append([2, c])\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        c = 0\n        while n % i == 0:\n            n = n // i\n            c += 1\n        if c != 0:\n            l.append([i, c])\n    if n > 2:\n        l.append([n, 1])\n    return l\nt = int(input())\nfor x in range(t):\n    A = [int(b) for b in input().split()]\n    a = A[0]\n    b = A[1]\n    l1 = primeFactors(a)\n    l2 = primeFactors(b)\n    ln1 = len(l1)\n    ln2 = len(l2)\n    flag = 0\n    if ln1 == 1 and ln2 == 1 and (l1[0][0] == l2[0][0]):\n        print('YES')\n    elif ln1 == ln2 and ln1 != 1:\n        for j in range(ln1):\n            if l1[j][0] == l2[j][0] and j == 0:\n                tm1 = [l1[j][1], l2[j][1]]\n            elif l1[j][0] == l2[j][0]:\n                tm2 = [l1[j][1], l2[j][1]]\n                if tm2[0] * tm1[1] != tm2[1] * tm1[0]:\n                    flag = 1\n                    break\n            else:\n                flag = 1\n                break\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "import math\nt = int(input())\nfor x in range(t):\n    A = [int(b) for b in input().split()]\n    a = A[0]\n    b = A[1]\n    flag = False\n    for i in range(1, 20):\n        x1 = math.log(a) * i / math.log(b)\n        if math.isclose(round(x1), x1):\n            flag = True\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef primeFactors(n):\n    l = []\n    c = 0\n    while n % 2 == 0:\n        n = n // 2\n        c += 1\n    if c != 0:\n        l.append([2, c])\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        c = 0\n        while n % i == 0:\n            n = n // i\n            c += 1\n        if c != 0:\n            l.append([i, c])\n    if n > 2:\n        l.append([n, 1])\n    return l\nt = int(input())\nfor x in range(t):\n    A = [int(b) for b in input().split()]\n    a = A[0]\n    b = A[1]\n    l1 = primeFactors(a)\n    l2 = primeFactors(b)\n    ln1 = len(l1)\n    ln2 = len(l2)\n    flag = 0\n    if ln1 == 1 and ln2 == 1 and (l1[0][0] == l2[0][0]):\n        print('YES')\n    elif ln1 == ln2 and ln1 != 1:\n        for j in range(ln1):\n            if l1[j][0] == l2[j][0] and j == 0:\n                g = math.gcd(l1[j][1], l2[j][1])\n                tm1 = [l1[j][1] // g, l2[j][1] // g]\n            elif l1[j][0] == l2[j][0]:\n                g = math.gcd(l1[j][1], l2[j][1])\n                tm2 = [l1[j][1] // g, l2[j][1] // g]\n                if tm2 != tm1:\n                    flag = 1\n                    break\n            else:\n                flag = 1\n                break\n        if flag == 1:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    (a, b) = map(int, input().split(' '))\n    l1 = []\n    l2 = []\n    for i in range(1, 20):\n        l1.append(pow(a, i))\n    for i in range(1, 20):\n        l2.append(pow(b, i))\n    l3 = [i for i in l1 if i in l2]\n    if len(l3) > 0:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nimport math as mt\n\ndef factors(n):\n    i = 2\n    x = []\n    while i * i <= n:\n        if n % i == 0:\n            cnt = 0\n            while n % i == 0:\n                n //= i\n                cnt += 1\n            x.append([i, cnt])\n        i += 1\n    if n != 1:\n        x.append([n, 1])\n    return x\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    pfa = factors(a)\n    pfb = factors(b)\n    flag = True\n    if len(pfa) == len(pfb):\n        curr = [0, 0]\n        for i in range(len(pfa)):\n            (x, y) = pfa[i]\n            (p, q) = pfb[i]\n            if x != p:\n                flag = False\n                break\n            if i == 0:\n                g = mt.gcd(y, q)\n                y //= g\n                q //= g\n                curr[0] = y\n                curr[1] = q\n            else:\n                g = mt.gcd(y, q)\n                chk = [y // g, q // g]\n                if chk != curr:\n                    flag = False\n                    break\n        if flag:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "from math import gcd\nfor t in range(int(input())):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    if a == 1 or b == 1:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    while gcd(a, b) != 1:\n        if a > b:\n            a = a // gcd(a, b)\n        else:\n            b = b // gcd(a, b)\n    if a == 1 or b == 1:\n        print('YES')\n    else:\n        print('NO')", "import math as mt\nMAXN = 1000001\nspf = [0 for i in range(MAXN)]\n\ndef sieve():\n    spf[1] = 1\n    for i in range(2, MAXN):\n        spf[i] = i\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, mt.ceil(mt.sqrt(MAXN))):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = dict()\n    while x != 1:\n        if spf[x] not in ret:\n            ret[spf[x]] = 0\n        ret[spf[x]] += 1\n        x = x // spf[x]\n    return ret\nsieve()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor t in range(int(input())):\n    (a, b) = mi()\n    if a > b:\n        (a, b) = (b, a)\n    x = getFactorization(a)\n    y = getFactorization(b)\n    if not set(x.keys()) == set(y.keys()):\n        print('NO')\n        continue\n    flag = True\n    val = set()\n    for i in x:\n        if x[i] > y[i]:\n            flag = False\n        val.add(y[i] / x[i])\n    if len(val) == 1 and flag:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    (a, b) = map(int, input().split())\n    while True:\n        (a, b) = (max(a, b), min(a, b))\n        if a % b == 0:\n            a /= b\n            if a == 1:\n                print('YES')\n                break\n            elif a == 0:\n                break\n        else:\n            print('NO')\n            break", "from math import gcd\nfor _ in range(int(input())):\n    (A, B) = map(int, input().split())\n    while gcd(A, B) != 1:\n        if A > B:\n            A = A // gcd(A, B)\n        else:\n            B = B // gcd(A, B)\n    if A == 1 or B == 1:\n        print('YES')\n    else:\n        print('NO')", "import math\nprime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009]\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ap = []\n    bp = []\n    sqrta = math.sqrt(a)\n    sqrtb = math.sqrt(b)\n    i = 0\n    while prime[i] <= sqrta:\n        if a % prime[i] == 0:\n            ap.append(prime[i])\n            a = a // prime[i]\n        else:\n            i += 1\n    if a != 1:\n        ap.append(a)\n    j = 0\n    while prime[j] <= sqrtb:\n        if b % prime[j] == 0:\n            bp.append(prime[j])\n            b = b // prime[j]\n        else:\n            j += 1\n    if b != 1:\n        bp.append(b)\n    aps = set(ap)\n    bps = set(bp)\n    if aps != bps:\n        print('NO')\n    else:\n        ratio = len(bp) / len(ap)\n        is_eq = True\n        for item in aps:\n            if bp.count(item) / ap.count(item) != ratio:\n                is_eq = False\n                break\n        if is_eq:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    (x, y) = [int(x) for x in input().split()]\n    val = 30\n    k = []\n    while val >= 1:\n        k.append(x ** val)\n        k.append(y ** val)\n        val -= 1\n    a = len(k)\n    b = len(set(k))\n    if a != b:\n        print('YES')\n    else:\n        print('NO')", "import random\nt = int(input())\nfor i in range(t):\n    (A, B) = map(int, input().split())\n    while True:\n        (A, B) = (max(A, B), min(A, B))\n        if A % B == 0:\n            X = A // B\n            A = B\n            B = X\n            if B == 1:\n                print('YES')\n                break\n            elif X == 0:\n                break\n        else:\n            print('NO')\n            break", "def solve():\n    (a, b) = map(int, input().split())\n    while 1:\n        (a, b) = (max(a, b), min(a, b))\n        if a % b == 0:\n            x = a / b\n            a = b\n            b = x\n            if b == 1:\n                print('YES')\n                break\n            elif x == 0:\n                break\n        else:\n            print('NO')\n            break\nfor _ in range(int(input())):\n    solve()", "def main():\n    for _ in range(int(input())):\n        (a, b) = map(int, input().split())\n        (a, b) = (max(a, b), min(a, b))\n        f = 0\n        while a % b == 0:\n            c = a / b\n            if c == 1:\n                f = 1\n                break\n            a = max(b, c)\n            b = min(b, c)\n        print('YES' if f else 'NO')\nmain()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    while True:\n        (a, b) = (max(a, b), min(a, b))\n        if a % b == 0:\n            x = a // b\n            a = b\n            b = x\n            if b == 1:\n                print('YES')\n                break\n            elif x == 0:\n                break\n        else:\n            print('NO')\n            break", "def check(a, b):\n    x = 1\n    y = 1\n    while x <= 30 and y <= 30:\n        Ax = pow(a, x)\n        By = pow(b, y)\n        if Ax == By:\n            return True\n        elif Ax < By:\n            x += 1\n        else:\n            y += 1\n    return False\nK = int(input())\nfor i in range(K):\n    (r, p) = map(int, input().split())\n    if check(r, p):\n        print('YES')\n    else:\n        print('NO')", "def check(a, b):\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        return 'YES'\n    else:\n        return 'NO'\nK = int(input())\nfor i in range(K):\n    (r, p) = map(int, input().split())\n    print(check(r, p))", "def solve():\n    k = 0\n    (a, b) = map(int, input().split())\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    al = []\n    bl = []\n    for i in range(1, 20):\n        al.append(a ** i)\n        bl.append(b ** i)\n    a = set(al)\n    b = set(bl)\n    if a.intersection(b):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    (smaller, greater) = (min(a, b), max(a, b))\n    while True:\n        if greater % smaller != 0:\n            print('NO')\n            break\n        greater = greater / smaller\n        if greater < smaller:\n            (greater, smaller) = (smaller, greater)\n        if smaller == 1:\n            print('YES')\n            break", "for i in range(int(input())):\n    (A, B) = map(int, input().split())\n    (smaller, greater) = (min(A, B), max(A, B))\n    while True:\n        if greater % smaller != 0:\n            print('NO')\n            break\n        greater = greater / smaller\n        if greater < smaller:\n            (greater, smaller) = (smaller, greater)\n        if smaller == 1:\n            print('YES')\n            break", "for i in range(int(input())):\n    (A, B) = map(int, input().split())\n    (smaller, greater) = (min(A, B), max(A, B))\n    while True:\n        if greater % smaller != 0:\n            print('NO')\n            break\n        greater = greater / smaller\n        if greater < smaller:\n            (greater, smaller) = (smaller, greater)\n        if smaller == 1:\n            print('YES')\n            break", "import math\nfor testcase in range(int(input())):\n    (a, b) = map(int, input().split())\n    aa = -1\n    p = 2\n    while p * p <= a:\n        if a % p == 0:\n            aa = p\n            break\n        p += 1\n    if aa == -1:\n        aa = a\n    da = 0\n    db = 0\n    while a % aa == 0:\n        da += 1\n        a //= aa\n    while b % aa == 0:\n        db += 1\n        b //= aa\n    if pow(a, db) == pow(b, da):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = 0\n    while k == 0:\n        k = max(a, b) % min(a, b)\n        q = max(a, b) / min(a, b)\n        (a, b) = (q, min(a, b))\n        if q == 1:\n            break\n    if q == 1:\n        print('YES')\n    else:\n        print('NO')"]