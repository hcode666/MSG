["import sys, math, heapq, bisect, random, itertools\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np2 = [1]\nfor i in range(40):\n    p2.append(p2[-1] * 2)\nfor t in range(int(input())):\n    n = int(input())\n    a = ints()\n    if a.count(0):\n        if n == 1:\n            print(0)\n        else:\n            print(-1)\n        continue\n    store = [[] for i in range(32)]\n    for x in range(n):\n        for i in range(32):\n            if a[x] & p2[i]:\n                store[i].append(x)\n    done = set()\n    bitset = set()\n    ans = 0\n    for i in range(32):\n        if store[i]:\n            bitset.add(i)\n            queue = store[i]\n            done = set(store[i])\n            ans += p2[i] * (len(store[i]) - 1)\n            break\n    bits = set()\n    for i in queue:\n        for j in range(32):\n            if a[i] & p2[j]:\n                if j not in bitset:\n                    bitset.add(j)\n                    bits.add(j)\n    b = sorted(bits)\n    heapq.heapify(b)\n    while b:\n        x = heapq.heappop(b)\n        while store[x]:\n            i = store[x].pop()\n            if i not in done:\n                heapq.heappush(b, x)\n                done.add(i)\n                m = x\n                for j in range(32):\n                    if p2[j] & a[i]:\n                        if j in bitset:\n                            m = min(m, j)\n                        else:\n                            bitset.add(j)\n                            heapq.heappush(b, j)\n                ans += p2[m]\n                break\n    if len(done) == n:\n        print(ans)\n    else:\n        print(-1)", "import sys, math, heapq, bisect, random, itertools\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np2 = [1]\nfor i in range(40):\n    p2.append(p2[-1] * 2)\nfor t in range(int(input())):\n    n = int(input())\n    a = ints()\n    if a.count(0):\n        if n == 1:\n            print(0)\n        else:\n            print(-1)\n        continue\n    store = [[] for i in range(32)]\n    for x in range(n):\n        for i in range(32):\n            if a[x] & p2[i]:\n                store[i].append(x)\n    done = set()\n    bitset = set()\n    ans = 0\n    for i in range(32):\n        if store[i]:\n            bitset.add(i)\n            queue = store[i]\n            done = set(store[i])\n            ans += p2[i] * (len(store[i]) - 1)\n            break\n    bits = set()\n    for i in queue:\n        for j in range(32):\n            if a[i] & p2[j]:\n                if j not in bitset:\n                    bitset.add(j)\n                    bits.add(j)\n    b = sorted(bits)\n    heapq.heapify(b)\n    while b:\n        x = heapq.heappop(b)\n        while store[x]:\n            i = store[x].pop()\n            if i not in done:\n                heapq.heappush(b, x)\n                done.add(i)\n                m = x\n                for j in range(32):\n                    if p2[j] & a[i]:\n                        if j in bitset:\n                            m = min(m, j)\n                        else:\n                            bitset.add(j)\n                            heapq.heappush(b, j)\n                ans += p2[m]\n                break\n    if len(done) == n:\n        print(ans)\n    else:\n        print(-1)", "import sys, math, heapq, bisect, random, itertools\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np2 = [1]\nfor i in range(40):\n    p2.append(p2[-1] * 2)\nfor t in range(int(input())):\n    n = int(input())\n    a = ints()\n    if a.count(0):\n        if n == 1:\n            print(0)\n        else:\n            print(-1)\n        continue\n    store = [[] for i in range(32)]\n    for x in range(n):\n        for i in range(32):\n            if a[x] & p2[i]:\n                store[i].append(x)\n    done = set()\n    bitset = set()\n    ans = 0\n    for i in range(32):\n        if store[i]:\n            bitset.add(i)\n            queue = store[i]\n            done = set(store[i])\n            ans += p2[i] * (len(store[i]) - 1)\n            break\n    bits = set()\n    for i in queue:\n        for j in range(32):\n            if a[i] & p2[j]:\n                if j not in bitset:\n                    bitset.add(j)\n                    bits.add(j)\n    b = sorted(bits)\n    heapq.heapify(b)\n    while b:\n        x = heapq.heappop(b)\n        while store[x]:\n            i = store[x].pop()\n            if i not in done:\n                heapq.heappush(b, x)\n                done.add(i)\n                m = x\n                for j in range(32):\n                    if p2[j] & a[i]:\n                        if j in bitset:\n                            m = min(m, j)\n                        else:\n                            bitset.add(j)\n                            heapq.heappush(b, j)\n                ans += p2[m]\n                break\n    if len(done) == n:\n        print(ans)\n    else:\n        print(-1)", "import sys, math, heapq, bisect, random, itertools\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np2 = [1]\nfor i in range(40):\n    p2.append(p2[-1] * 2)\nfor t in range(int(input())):\n    n = int(input())\n    a = ints()\n    if a.count(0):\n        if n == 1:\n            print(0)\n        else:\n            print(-1)\n        continue\n    store = [[] for i in range(32)]\n    for x in range(n):\n        for i in range(32):\n            if a[x] & p2[i]:\n                store[i].append(x)\n    done = set()\n    bitset = set()\n    ans = 0\n    for i in range(32):\n        if store[i]:\n            bitset.add(i)\n            queue = store[i]\n            done = set(store[i])\n            ans += p2[i] * (len(store[i]) - 1)\n            break\n    bits = set()\n    for i in queue:\n        for j in range(32):\n            if a[i] & p2[j]:\n                if j not in bitset:\n                    bitset.add(j)\n                    bits.add(j)\n    b = sorted(bits)\n    heapq.heapify(b)\n    while b:\n        x = heapq.heappop(b)\n        while store[x]:\n            i = store[x].pop()\n            if i not in done:\n                heapq.heappush(b, x)\n                done.add(i)\n                m = x\n                for j in range(32):\n                    if p2[j] & a[i]:\n                        if j in bitset:\n                            m = min(m, j)\n                        else:\n                            bitset.add(j)\n                            heapq.heappush(b, j)\n                ans += p2[m]\n                break\n    if len(done) == n:\n        print(ans)\n    else:\n        print(-1)"]