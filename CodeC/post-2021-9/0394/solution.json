["nTestCases = int(input())\nfor testCase in range(nTestCases):\n    (N, X, Y) = map(int, input().split())\n    citiesSadness = list(map(int, input().split()))\n    maxSadness = max(citiesSadness)\n    nBlimps = 0\n    if Y >= X:\n        if maxSadness % Y == 0:\n            nBlimps = maxSadness / Y\n        else:\n            nBlimps = int(maxSadness / Y) + 1\n    else:\n        for targetCity in range(len(citiesSadness) - 1, -1, -1):\n            if citiesSadness[targetCity] > 0:\n                iterations = int(citiesSadness[targetCity] / X) + (citiesSadness[targetCity] % X > 0)\n                citiesSadness = [citySadness - Y * iterations for citySadness in citiesSadness[:targetCity]] + [citiesSadness[targetCity] - X * iterations] + citiesSadness[targetCity + 1:]\n                nBlimps += iterations\n    print(nBlimps)", "nTestCases = int(input())\nfor testCase in range(nTestCases):\n    (N, X, Y) = map(int, input().split())\n    citiesSadness = list(map(int, input().split()))\n    maxSadness = max(citiesSadness)\n    nBlimps = 0\n    if Y >= X:\n        if maxSadness % Y == 0:\n            nBlimps = maxSadness / Y\n        else:\n            nBlimps = int(maxSadness / Y) + 1\n    else:\n        for targetCity in range(len(citiesSadness) - 1, -1, -1):\n            if citiesSadness[targetCity] > 0:\n                iterations = int(citiesSadness[targetCity] / X) + (citiesSadness[targetCity] % X > 0)\n                citiesSadness = [citySadness - Y * iterations for citySadness in citiesSadness[:targetCity]] + [citiesSadness[targetCity] - X * iterations] + citiesSadness[targetCity + 1:]\n                nBlimps += iterations\n    print(nBlimps)", "nTestCases = int(input())\nfor testCase in range(nTestCases):\n    (N, X, Y) = map(int, input().split())\n    citiesSadness = list(map(int, input().split()))\n    maxSadness = max(citiesSadness)\n    nBlimps = 0\n    if Y >= X:\n        if maxSadness % Y == 0:\n            nBlimps = maxSadness / Y\n        else:\n            nBlimps = int(maxSadness / Y) + 1\n    else:\n        for targetCity in range(len(citiesSadness) - 1, -1, -1):\n            if citiesSadness[targetCity] > 0:\n                iterations = int(citiesSadness[targetCity] / X) + (citiesSadness[targetCity] % X > 0)\n                citiesSadness = [citySadness - Y * iterations for citySadness in citiesSadness[:targetCity]] + [citiesSadness[targetCity] - X * iterations] + citiesSadness[targetCity + 1:]\n                nBlimps += iterations\n    print(nBlimps)", "import math\nT = int(input())\nfor tc in range(T):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    scarlet = 0\n    if x <= y:\n        witch = max(a)\n        if witch <= 0:\n            print(0)\n        else:\n            print(math.ceil(witch / y))\n    else:\n        for i in range(n):\n            a[i] = max(a[i], 0)\n        r = 0\n        for i in range(n - 1, -1, -1):\n            a[i] -= r\n            a[i] = max(a[i], 0)\n            ak = math.ceil(a[i] / x)\n            r += y * ak\n            scarlet += ak\n        print(scarlet)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    sad = list(map(int, input().split()))\n    if y >= x:\n        maxi = max(sad)\n        print(-(-maxi // y))\n        continue\n    total = 0\n    while sad:\n        a = sad.pop()\n        a = max(0, a - total * y)\n        total += -(-a // x)\n    print(total)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if x < y:\n        x = y\n    x_count = 0\n    deduct = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] - deduct <= 0:\n            continue\n        count = int(math.ceil((a[i] - deduct) / x))\n        deduct += y * count\n        x_count += count\n    print(x_count)", "import math\nT = int(input())\nfor counter in range(T):\n    s = input()\n    s = s.split(' ')\n    X = int(s[1])\n    Y = int(s[2])\n    if X < Y:\n        X = Y\n    res = 0\n    a = input()\n    a = a.split(' ')\n    arr = []\n    for i in a:\n        arr.append(int(i))\n    while len(arr) > 0:\n        if arr[-1] <= 0:\n            arr.pop()\n        else:\n            turns = math.ceil(arr[-1] / X)\n            res += turns\n            for i in range(len(arr)):\n                arr[i] = arr[i] - turns * Y\n            arr.pop()\n    print(res)", "import math\nT = int(input())\nfor tc in range(T):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    scarlet = 0\n    if x <= y:\n        witch = max(a)\n        if witch <= 0:\n            print(0)\n        else:\n            print(math.ceil(witch / y))\n    else:\n        for i in range(n):\n            a[i] = max(a[i], 0)\n        r = 0\n        for i in range(n - 1, -1, -1):\n            a[i] -= r\n            a[i] = max(a[i], 0)\n            ak = math.ceil(a[i] / x)\n            r += y * ak\n            scarlet += ak\n        print(scarlet)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "from math import ceil\nfor _ in range(int(input())):\n    (N, X, Y) = [int(i) for i in input().split(' ')]\n    cities_sadness = [int(i) for i in input().split(' ')]\n    if X <= Y:\n        print(ceil(max(0, *cities_sadness) / Y))\n    else:\n        total_blimps = 0\n        for i in cities_sadness[-1::-1]:\n            if i > 0:\n                total_blimps += ceil(max(0, i - total_blimps * Y) / X)\n        print(total_blimps)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if x <= y:\n        print(math.ceil(max(arr) / y))\n        continue\n    else:\n        ans = 0\n        for i in range(n)[::-1]:\n            if arr[i] > ans * y:\n                ans += math.ceil((arr[i] - ans * y) / x)\n        print(ans)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if x <= y:\n        print(math.ceil(max(arr) / y))\n        continue\n    else:\n        ans = 0\n        for i in range(n)[::-1]:\n            if arr[i] > ans * y:\n                ans += math.ceil((arr[i] - ans * y) / x)\n        print(ans)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if x <= y:\n        print(math.ceil(max(arr) / y))\n        continue\n    else:\n        ans = 0\n        for i in range(n)[::-1]:\n            if arr[i] > ans * y:\n                ans += math.ceil((arr[i] - ans * y) / x)\n        print(ans)", "import math\nfor i in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    A = [int(k) for k in input().split()]\n    m = max(A)\n    index = A.index(m)\n    Y = 0\n    ans = 0\n    if x < y:\n        print(int(math.ceil(m / y)))\n    else:\n        for k in range(n - 1, -1, -1):\n            if A[k] - Y > 0:\n                a = int(math.ceil((A[k] - Y) / x))\n                ans += a\n                Y += y * a\n        print(ans)", "for i in range(int(input(''))):\n    (n, y, x) = map(int, input().split(' '))\n    list1 = list(map(int, input().split(' ')))\n    if x >= y:\n        if max(list1) % x != 0:\n            print(max(list1) // x + 1)\n        else:\n            print(max(list1) // x)\n    else:\n        if list1[-1] % y != 0:\n            a = list1[-1] // y + 1\n        else:\n            a = list1[-1] // y\n        for j in range(2, n + 1):\n            c = list1[-j] - x * a\n            if c > 0:\n                if c % y != 0:\n                    a = a + 1 + c // y\n                else:\n                    a = a + c // y\n        print(a)", "import math\nfor _ in range(int(input())):\n    (cities_num, shower_power, fly_power) = [int(num) for num in input().split()]\n    sadness = [int(num) for num in input().split()]\n    if not any(sadness):\n        print(0)\n        continue\n    if shower_power <= fly_power:\n        print(math.ceil(max(sadness) / fly_power))\n        continue\n    blimps_num = 0\n    for i in range(cities_num - 1, -1, -1):\n        sadness[i] -= blimps_num * fly_power\n        if sadness[i] <= fly_power:\n            continue\n        blimps_delta = sadness[i] // shower_power\n        if i < cities_num - 1 and sadness[i] % shower_power > fly_power:\n            blimps_delta += 1\n        elif i == cities_num - 1 and sadness[i] % shower_power == 0:\n            blimps_delta -= 1\n        sadness[i] -= blimps_delta * shower_power\n        blimps_num += blimps_delta\n    print(blimps_num + 1)", "t = int(input())\nfor j in range(t):\n    (n, x, y) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    if x > y:\n        cnt = 0\n        for i in reversed(range(0, n)):\n            lst[i] -= cnt * y\n            if lst[i] < 0:\n                continue\n            req = (lst[i] + x - 1) // x\n            cnt += req\n        print(cnt)\n    else:\n        print((max(lst) + y - 1) // y)", "import sys\nfrom math import *\nfrom itertools import *\nfrom bisect import bisect, bisect_left\nfrom collections import deque, Counter, defaultdict as dd\nmod = 10 ** 9 + 7\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rls():\n    return list(map(str, input().split()))\n\ndef rm():\n    return map(int, input().split())\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef d2b(n):\n    s = bin(n).replace('0b', '')\n    return (34 - len(s)) * '0' + s\nfor _ in range(ri()):\n    (n, x, y) = rm()\n    a = rl()\n    if x <= y:\n        ans = ceil(max(a) / y)\n    else:\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            a[i] -= y * ans\n            a[i] = max(a[i], 0)\n            ans = max(ans, ans + ceil(a[i] / x))\n    print(ans)", "import math\nt = int(input())\nfor x in range(t):\n    (n, x, y) = map(int, input().split())\n    seq = list(map(int, input().split()))\n    if x > y:\n        blimps = 0\n        for i in range(n - 1, -1, -1):\n            seq[i] = seq[i] - blimps * y\n            if seq[i] > 0:\n                req = math.ceil(seq[i] / x)\n                blimps += req\n        print(blimps)\n    else:\n        print(math.ceil(max(seq) / y))", "for _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    if x <= y:\n        for i in arr:\n            ans = max(ans, (i + y - 1) // y)\n        print(ans)\n    else:\n        for i in range(n - 1, -1, -1):\n            arr[i] -= y * ans\n            arr[i] = max(0, arr[i])\n            ans = max(ans, ans + (arr[i] + x - 1) // x)\n        print(ans)", "import math\ncase = int(input())\nfor _ in range(case):\n    (n, x, y) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    if y >= x:\n        curr_max = arr[0]\n        for i in range(1, n):\n            if arr[i] > curr_max:\n                curr_max = arr[i]\n        ans = math.ceil(curr_max / y)\n    else:\n        i = n - 1\n        ans = 0\n        changed = False\n        while i > -1:\n            arr[i] -= ans * y\n            if arr[i] > 0:\n                ans += math.ceil(arr[i] / x)\n            i -= 1\n    print(ans)", "from math import ceil\nfor t in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    maxi = max(l)\n    if y >= x:\n        ans = ceil(maxi / y)\n        print(ans)\n    else:\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            l[i] -= ans * y\n            if l[i] > 0:\n                ans += ceil(l[i] / x)\n        print(ans)", "for case in range(int(input())):\n    (n, x, y) = map(int, input().strip().split())\n    arr = list(map(int, input().strip().split()))\n    blimps = 0\n    i = len(arr)\n    while i > 0:\n        i -= 1\n        sadness = arr[i] - blimps * y\n        if sadness <= 0:\n            continue\n        (sx, sy) = (sadness / x, sadness / y)\n        if sx <= sy:\n            blimps += int(sx) + (1 if int(sx) != sx else 0)\n        else:\n            blimps += int(sy) + (1 if int(sy) != sy else 0)\n    print(blimps)\n    pass", "import math\nfor _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    if y >= x:\n        m = max(l)\n        print(math.ceil(m / y))\n    else:\n        cnt = 0\n        for z in range(n - 1, -1, -1):\n            l[z] = l[z] - cnt * y\n            if l[z] > 0:\n                cnt = cnt + math.ceil(l[z] / x)\n        print(cnt)", "from math import ceil\nfrom posixpath import split\nfor _ in range(0, int(input())):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))[:n]\n    ans = 0\n    if x <= y:\n        ans = ceil(max(a) / y)\n    else:\n        for i in range(n - 1, -1, -1):\n            a[i] = a[i] - y * ans\n            if a[i] > 0:\n                ans += ceil(a[i] / x)\n    print(ans)", "for _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    if x <= y:\n        for i in arr:\n            ans = max(ans, (i + y - 1) // y)\n        print(ans)\n    else:\n        for i in range(n - 1, -1, -1):\n            arr[i] -= y * ans\n            arr[i] = max(0, arr[i])\n            ans = max(ans, ans + (arr[i] + x - 1) // x)\n        print(ans)", "from math import ceil\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (op1, op2) = (0, 0)\n    for i in range(1, n + 1):\n        l[-i] -= (op1 + op2) * y\n        if l[-i] > 0:\n            if x >= y:\n                cal = ceil(l[-i] / x)\n                op2 += cal\n                l[-i] -= cal * y\n            else:\n                cal = ceil(l[-i] / y)\n                op1 += cal\n                l[-i] -= cal * y\n    print(op1 + op2)", "import math\nT = int(input())\nwhile T:\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if y >= x:\n        m = max(l)\n        print(math.ceil(m / y))\n    else:\n        op = 0\n        for i in range(n - 1, -1, -1):\n            ele = l[i] - op * y\n            if ele > 0:\n                op += math.ceil(ele / x)\n        print(op)\n    T = T - 1", "import math\nn = int(input())\nfor z in range(n):\n    (size, x, y) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    x = int(x)\n    y = int(y)\n    size = int(size)\n    if y >= x:\n        m = max(arr)\n        count = math.ceil(m / y)\n        print(count)\n    else:\n        count = 0\n        for i in range(size - 1, -1, -1):\n            temp = arr[i]\n            temp = temp - count * y\n            if temp > 0:\n                curr = math.ceil(temp / x)\n                count += curr\n        print(count)", "import math\nn = int(input())\nfor z in range(n):\n    (size, x, y) = input().split()\n    arr = [int(i) for i in input().split()]\n    x = int(x)\n    y = int(y)\n    size = int(size)\n    if y >= x:\n        m = max(arr)\n        count = math.ceil(m / y)\n        print(count)\n    else:\n        count = 0\n        for i in range(size - 1, -1, -1):\n            temp = arr[i]\n            temp = temp - count * y\n            if temp > 0:\n                curr = math.ceil(temp / x)\n                count += curr\n        print(count)", "import math\nt = int(input())\nwhile t > 0:\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if y >= x:\n        print(math.ceil(max(a) / y))\n    else:\n        ans = 0\n        for i in range(1, len(a) + 1):\n            a[-i] = a[-i] - ans * y\n            if a[-i] > 0:\n                ans = ans + math.ceil(a[-i] / x)\n        print(ans)\n    t = t - 1", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().rstrip().split())\n    lst = list(map(int, input().rstrip().split()))\n    if x <= y:\n        print(math.ceil(max(lst) / y))\n        continue\n    temp = lst\n    total_blimps = 0\n    for i in range(n - 1, -1, -1):\n        lst[i] -= total_blimps * y\n        if lst[i] > 0:\n            total_blimps += math.ceil(lst[i] / x)\n    print(total_blimps)", "import math\n\ndef solve(num, x, y, l):\n    if y >= x:\n        return math.ceil(max(l) / y)\n    else:\n        count = 0\n        i = len(l) - 1\n        while i >= 0:\n            l[i] = l[i] - count * y\n            if l[i] > 0:\n                count = count + math.ceil(l[i] / x)\n            i = i - 1\n        return count\n\ndef second(l, x, y, i):\n    for j in range(0, i):\n        l[j] = l[j] - y\n    l[i] = l[i] - x\n    return l\n\ndef first(l, x, y):\n    for i in range(0, len(l)):\n        l[i] -= y\n    return l\n\ndef check(l):\n    for i in l:\n        if i > 0:\n            return False\n    return True\nn = int(input())\nresults = []\nfor i in range(0, n):\n    (num, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    out = solve(num, x, y, l)\n    results.append(out)\nfor j in results:\n    print(j)", "from math import ceil\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    if x <= y:\n        print(ceil(max(l) / y))\n    else:\n        ans = 0\n        temp = 0\n        for i in range(n - 1, -1, -1):\n            newNo = l[i] - temp\n            if newNo > 0:\n                z = ceil(newNo / x)\n                temp += z * y\n                ans += z\n        print(ans)", "from sys import stdin\ninput = stdin.readline\nfrom math import ceil, floor, sqrt, log2\nfrom heapq import heappush, heappop\nfrom collections import deque\nfrom functools import lru_cache\nfrom bisect import bisect_left, bisect_right\n\ndef rl(t=int):\n    return list(map(t, input().split()))\nT = int(input())\nfor t in range(1, T + 1):\n    (n, x, y) = rl()\n    a = rl()\n    if x <= y:\n        print(ceil(max(a) / y))\n        continue\n    dec = 0\n    ret = 0\n    for i in range(n - 1, -1, -1):\n        val = max(0, a[i] - dec)\n        div = ceil(val / x)\n        ret += div\n        dec += div * y\n    print(ret)", "for _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if x <= y:\n        l = max(a)\n        print(l // y if l % y == 0 else l // y + 1)\n    else:\n        sum = 0\n        for i in range(n - 1, -1, -1):\n            if a[i] <= 0:\n                continue\n            no = a[i] // x if a[i] % x == 0 else a[i] // x + 1\n            for j in range(i):\n                a[j] -= no * y\n            a[i] -= no * x\n            sum += no\n        print(sum)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if x <= y:\n        mx = max(arr)\n        if mx <= 0:\n            print(0)\n        else:\n            print(math.ceil(mx / y))\n    else:\n        ans = 0\n        counts = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] -= counts\n            arr[i] = max(arr[i], 0)\n            total = math.ceil(arr[i] / x)\n            counts += total * y\n            ans += total\n        print(ans)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    re = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "for _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if x < y:\n        print((max(a) + y - 1) // y)\n        continue\n    ans = 0\n    for i in reversed(range(0, n)):\n        a[i] -= ans * y\n        if a[i] <= 0:\n            continue\n        reqd = (a[i] + x - 1) // x\n        ans += reqd\n    print(ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, x, y) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    mx = max(l)\n    if x <= y:\n        print(ceil(mx / y))\n    else:\n        ans = 0\n        i = n - 1\n        while i >= 0:\n            l[i] -= ans * y\n            if l[i] > 0:\n                ans += ceil(l[i] / x)\n            i -= 1\n        print(ans)", "test = int(input())\nwhile test:\n    test -= 1\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    maximum = max(arr)\n    if x <= y:\n        ans = (maximum + y - 1) // y\n    else:\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] = arr[i] - ans * y\n            if arr[i] > 0:\n                ans += (arr[i] + x - 1) // x\n    print(ans)", "test = int(input())\nwhile test:\n    test -= 1\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    maximum = max(arr)\n    if x <= y:\n        ans = (maximum + y - 1) // y\n    else:\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] = arr[i] - ans * y\n            if arr[i] > 0:\n                ans += (arr[i] + x - 1) // x\n    print(ans)", "import math\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    if X <= Y:\n        print(math.ceil(max(A) / Y))\n    else:\n        Yarr = [0] * N\n        for i in range(N):\n            Yarr[i] = math.ceil(A[i] / Y)\n        blimps = math.ceil(A[N - 1] / X)\n        for i in range(N - 2, -1, -1):\n            if A[i] >= blimps * Y:\n                val = math.ceil((A[i] - blimps * Y) / X)\n                blimps += val\n            else:\n                continue\n        print(blimps)", "import math\nf = int(input())\nfor q in range(f):\n    (n, x, y) = [int(o) for o in input().split()]\n    l = [int(o) for o in input().split()]\n    k = l\n    c = 0\n    if x <= y:\n        z = max(l)\n        z = math.ceil(z / y)\n        print(z)\n    else:\n        for i in k[::-1]:\n            o = i - c * y\n            if o > 0:\n                z = math.ceil(o / x)\n                c += z\n        print(c)", "for _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    A = list(map(int, input().split()))\n    sol = 0\n    if y >= x:\n        m = A[0]\n        for i in range(n):\n            if A[i] > m:\n                m = A[i]\n        sol = m // y + (1 if m % y else 0)\n    else:\n        for a in A[::-1]:\n            a = a - sol * y\n            if a <= 0:\n                continue\n            a = a // x + (1 if a % x else 0)\n            sol += a\n    print(sol)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    m = max(l)\n    res = 0\n    if y >= x:\n        res = math.ceil(m / y)\n    else:\n        for i in range(len(l) - 1, -1, -1):\n            new_sad = l[i] - res * y\n            if new_sad <= 0:\n                continue\n            res += math.ceil(new_sad / x)\n    print(res)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    m = max(l)\n    res = 0\n    if y >= x:\n        res = math.ceil(m / y)\n    else:\n        for i in range(len(l) - 1, -1, -1):\n            new_sad = l[i] - res * y\n            if new_sad <= 0:\n                continue\n            res += math.ceil(new_sad / x)\n    print(res)", "from math import ceil\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = 0\n    if x <= y:\n        print(ceil(max(l) / y))\n    else:\n        for i in range(n - 1, -1, -1):\n            l[i] = max(0, l[i] - m * y)\n            m = m + ceil(l[i] / x)\n        print(m)", "from math import ceil\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    moves = 0\n    if x <= y:\n        print(ceil(max(l) / y))\n    else:\n        for i in range(n - 1, -1, -1):\n            new_sad = l[i] - moves * y\n            if new_sad <= 0:\n                continue\n            moves += ceil(new_sad / x)\n        print(moves)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, x, y) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    m = max(a)\n    ans = 0\n    if x <= y:\n        ans = math.ceil(m / y)\n        print(ans)\n        continue\n    for i in range(n - 1, -1, -1):\n        a[i] -= ans * y\n        if a[i] <= 0:\n            continue\n        count = math.ceil(a[i] / x)\n        ans += count\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    li = list(map(int, input().split()))\n    if y >= x:\n        t = max(li)\n        print(math.ceil(t / y))\n    else:\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            t = li[i] - y * ans\n            if t > 0:\n                ans += math.ceil(t / x)\n        print(ans)", "T = int(input())\nfor t in range(T):\n    (n, x, y) = map(int, input().split())\n    arr = [int(_) for _ in input().split()]\n    maxm = max(arr)\n    sub = 0\n    if y >= x:\n        print(max(0, (maxm + y - 1) // y))\n    else:\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] -= ans * y\n            if arr[i] > 0:\n                ans += (arr[i] + x - 1) // x\n        print(ans)", "for _ in range(int(input())):\n    (N, x, Y) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    if Y >= x:\n        print((max(arr) + Y - 1) // Y)\n        continue\n    var = [0] * N\n    var[0] = arr[0]\n    for i in range(1, N):\n        var[i] = max(var[i - 1], arr[i])\n    RES = 0\n    OPright = 0\n    for i in range(N - 1, -1, -1):\n        OpY = (arr[i] + Y - 1) // Y\n        if OpY <= OPright:\n            continue\n        countX = OpY - OPright\n        L = arr[i] - Y * OPright\n        OpX = (L + x - 1) // x\n        XopCheck = min(OpX, countX)\n        YopCheck = max(OPright, (arr[i] - x * XopCheck + Y - 1) // Y)\n        OPright = max(OPright, XopCheck + YopCheck)\n    print(OPright)", "def fn(n, x, y, arr):\n    if x <= y:\n        return math.ceil(max(arr) / y)\n    else:\n        total_blimps = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] = max(0, arr[i] - total_blimps * y)\n            if arr[i] <= 0:\n                continue\n            total_blimps += math.ceil(arr[i] / x)\n        return total_blimps\nimport math\nt = int(input())\nfor T in range(t):\n    (n, x, y) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    ans = fn(n, x, y, arr)\n    print(ans)", "import math\n\ndef rec(l, x, y):\n    l.reverse()\n    j = 0\n    k = 0\n    for i in l:\n        if i > j:\n            m = int(math.ceil((i - j) / x))\n            k += m\n            j += m * y\n    return k\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if x <= y:\n        m = max(l)\n        print(math.ceil(m / y))\n    else:\n        k = rec(l, x, y)\n        print(k)", "T = int(input())\nfor t in range(T):\n    (n, x, y) = map(int, input().split())\n    arr = [int(_) for _ in input().split()]\n    maxm = max(arr)\n    sub = 0\n    if y >= x:\n        print(max(0, (maxm + y - 1) // y))\n    else:\n        ans = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] -= sub\n            arr[i] = max(0, arr[i])\n            temp = (arr[i] + x - 1) // x\n            sub += y * temp\n            ans += temp\n        print(ans)", "import copy\nimport math\nfrom collections import Counter, defaultdict, deque\nfrom queue import PriorityQueue\nfrom bisect import bisect_left, bisect_right\nmod = 10 ** 9 + 7\n\ndef get_factor(num):\n    factors = []\n    limit = int(math.sqrt(num)) + 1\n    for i in range(1, limit):\n        if num % i == 0:\n            factors.append(i)\n    return factors\n\ndef integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\n\ndef pprint(matrix):\n    for i in range(len(matrix)):\n        print(*matrix[i])\nt = int(input())\nfor _ in range(t):\n    (n, x, y) = integer_list()\n    lst = integer_list()\n    if x <= y:\n        max_num = max(lst)\n        b_f_last = math.ceil(max_num / y)\n        print(int(b_f_last))\n    else:\n        already = 0\n        count = 0\n        while lst:\n            ele = lst.pop()\n            if ele - already <= 0:\n                continue\n            b_f_last = int(math.ceil((ele - already) / x))\n            count += int(b_f_last)\n            already += y * b_f_last\n        print(count)", "import math\nT = int(input())\nfor _ in range(T):\n    (N, X, Y) = map(int, input().split())\n    A = list(map(int, input().split()))\n    res = 0\n    maxSadness = max(A)\n    if Y >= X:\n        print(math.ceil(maxSadness / Y))\n    else:\n        for i in range(N - 1, -1, -1):\n            A[i] -= res * Y\n            if A[i] <= 0:\n                continue\n            confettiShowers = math.ceil(A[i] / X)\n            res += confettiShowers\n        print(res)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().strip().split())\n    sadness = list(map(int, input().strip().split()))\n    if x <= y:\n        totalBlimp = math.ceil(max(sadness) / y)\n        print(totalBlimp)\n    else:\n        totalBlimp = 0\n        for idx in range(n - 1, -1, -1):\n            if sadness[idx] <= 0:\n                continue\n            multipleRound = math.ceil(sadness[idx] / x)\n            totalBlimp += multipleRound\n            sadness[idx] -= multipleRound * x\n            for i in range(0, idx):\n                sadness[i] -= multipleRound * y\n        print(totalBlimp)", "import math as m\nimport numpy as np\nt = int(input())\nfor i in range(t):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    if y >= x:\n        print(m.ceil(max(a) / y))\n    else:\n        a1 = np.array(a)\n        while max(a1) > 0:\n            b = max(filter(lambda x: a1[x] > 0, range(len(a1))))\n            z = m.ceil(a1[b] / x)\n            a1[:b] = a1[:b] - z * y\n            a1[b] = a1[b] - z * x\n            s = s + z\n        print(s)", "import math as m\nimport numpy as np\nt = int(input())\nfor i in range(t):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    if y >= x:\n        print(m.ceil(max(a) / y))\n    else:\n        a1 = np.array(a)\n        while max(a1) > 0:\n            b = max(list(filter(lambda x: a1[x] > 0, range(len(a1)))))\n            z = m.ceil(a1[b] / x)\n            a1[:b] = a1[:b] - z * y\n            a1[b] = a1[b] - z * x\n            s = s + z\n        print(s)", "import math as m\nimport numpy as np\nt = int(input())\nfor i in range(t):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    if y >= x:\n        print(m.ceil(max(a) / y))\n    else:\n        while max(a) > 0:\n            a1 = np.array(a)\n            b = max(list(filter(lambda x: a[x] > 0, range(len(a)))))\n            z = m.ceil(a[b] / x)\n            a1[:b] = a1[:b] - z * y\n            a1[b] = a1[b] - z * x\n            a = list(a1)\n            s = s + z\n        print(s)", "import math as m\nimport numpy as np\nt = int(input())\nfor i in range(t):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = 0\n    if y >= x:\n        print(m.ceil(max(a) / y))\n    else:\n        while max(a) > 0:\n            a1 = np.array(a)\n            b = max(list(filter(lambda x: a[x] > 0, range(len(a)))))\n            z = m.ceil(a[b] / x)\n            a1[:b] = a1[:b] - z * y\n            a1[b] = a1[b] - z * x\n            a = list(a1)\n            s = s + z\n        print(s)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    if y >= x:\n        mx = max(arr)\n        ans = math.ceil(mx / y)\n        print(int(ans))\n    else:\n        s = 0\n        times = 0\n        for i in range(n - 1):\n            times = math.ceil(max(0, arr[n - i - 1] - s * y) / x)\n            arr[n - i - 1] = int(times)\n            s += int(times)\n        times = math.ceil(max(0, arr[0] - s * y) / x)\n        arr[0] = int(times)\n        ans = sum(arr)\n        print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = max(a)\n    if x <= y:\n        print(int(math.ceil(m / y)))\n    else:\n        c = 0\n        for i in reversed(range(n)):\n            d = a[i] - c * y\n            if d > 0:\n                c = c + int(math.ceil(d / x))\n        print(c)", "import math\nfor _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = 0\n    count = 0\n    if y >= x:\n        print(math.ceil(max(a) / y))\n        continue\n    for i in range(n - 1, -1, -1):\n        a[i] -= count * y\n        if a[i] > 0:\n            c += math.ceil(a[i] / x)\n            count += math.ceil(a[i] / x)\n    print(c)", "import math\nt = int(input())\nfor i in range(t):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = max(a)\n    if x <= y:\n        print(int(math.ceil(m / y)))\n    else:\n        c = 0\n        for i in reversed(range(n)):\n            d = a[i] - c * y\n            if d > 0:\n                c = c + int(math.ceil(d / x))\n        print(c)", "import math\nt = int(input())\nwhile t:\n    s = input().split()\n    (n, x, y) = map(int, s)\n    s = input().split()\n    arr = list(map(int, s))\n    maxval = max(arr)\n    if y >= x:\n        print(int(math.ceil(maxval / y)))\n        t -= 1\n        continue\n    count = 0\n    for i in range(n - 1, -1, -1):\n        cur = arr[i] - count * y\n        if cur > 0:\n            count += int(math.ceil(cur / x))\n    print(count)\n    t -= 1", "for _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    if x <= y:\n        ans = max(a) // y\n        if max(a) % y != 0:\n            ans += 1\n        print(ans)\n    else:\n        c = 0\n        for i in range(n - 1, -1, -1):\n            a[i] -= c * y\n            if a[i] <= 0:\n                continue\n            reqd = (a[i] + x - 1) // x\n            c += reqd\n        print(c)", "for _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    if x <= y:\n        ans = max(a) // y\n        if max(a) % y != 0:\n            ans += 1\n        print(ans)\n    else:\n        c = 0\n        for i in range(n - 1, -1, -1):\n            a[i] -= y * c\n            a[i] = max(0, a[i])\n            c = max(c, c + (a[i] + x - 1) // x)\n        print(c)", "import math\n\ndef ans(arr, n, x, y):\n    if x <= y:\n        return math.ceil(max(arr) / y)\n    else:\n        steps = 0\n        i = n - 1\n        while i >= 0:\n            arr[i] -= steps * y\n            if arr[i] > 0:\n                steps += math.ceil(arr[i] / x)\n            i -= 1\n        return steps\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = list(map(int, input().split()))\n    d2 = list(map(int, input().split()))\n    print(ans(d2, d[0], d[1], d[2]))\n    test_cases -= 1", "import math\n\ndef blimp():\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if y >= x:\n        m = max(l)\n        print(math.ceil(m / y))\n        return\n    else:\n        i = n - 1\n        c = math.ceil(l[n - 1] / x)\n        count = c\n        for i in range(n - 2, -1, -1):\n            l[i] = l[i] - count * y\n            if l[i] > 0:\n                c = math.ceil(l[i] / x)\n                count += c\n        print(count)\n        return\nt = int(input())\nwhile t:\n    blimp()\n    t -= 1", "import math\n\ndef blimp():\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if y >= x:\n        m = max(l)\n        print(math.ceil(m / y))\n        return\n    else:\n        i = n - 1\n        c = math.ceil(l[n - 1] / x)\n        count = c\n        for i in range(n - 2, -1, -1):\n            l[i] = l[i] - count * y\n            if l[i] > 0:\n                c = math.ceil(l[i] / x)\n                count += c\n        print(count)\n        return\nt = int(input())\nwhile t:\n    blimp()\n    t -= 1", "from math import ceil\nfor T in range(int(input())):\n    (N, X, Y) = map(int, input().split())\n    A = list(map(int, input().split()))\n    if X <= Y:\n        print((max(A) + (Y - 1)) // Y)\n    else:\n        c = 0\n        ans = 0\n        for i in range(N - 1, -1, -1):\n            A[i] -= c * Y\n            if A[i] > 0:\n                d = (A[i] + (X - 1)) // X\n                ans += d\n                c += d\n        print(ans)", "from math import ceil\nfor i in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    count = 0\n    if y >= x:\n        if max(l) % y == 0:\n            print(max(l) // y)\n        else:\n            print(max(l) // y + 1)\n    else:\n        while True:\n            if l[n - 1] > 0:\n                count += ceil(l[n - 1] / x)\n                l[n - 1] -= count * x\n            else:\n                n -= 1\n                if n != 0:\n                    l[n - 1] -= count * y\n            if n == 0:\n                break\n        print(count)", "from math import ceil\nfor _ in range(int(input())):\n    (n, x, y) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    if y >= x:\n        print(ceil(max(a) / y))\n        continue\n    total_blimps = 0\n    for i in range(n - 1, -1, -1):\n        a[i] = max(0, a[i] - total_blimps * y)\n        total_blimps += ceil(a[i] / x)\n    print(total_blimps)", "import sys\nfrom xml.etree.ElementPath import xpath_tokenizer_re\nfor _ in range(int(sys.stdin.readline())):\n    (n, x, y) = map(int, sys.stdin.readline().split())\n    a = [int(i) for i in sys.stdin.readline().split()]\n    if y >= x:\n        ans1 = 0\n        if max(a) % y == 0:\n            ans1 = max(a) // y\n        elif max(a) % y != 0:\n            ans1 = max(a) // y + 1\n        print(ans1)\n    else:\n        ans = 0\n        for i in reversed(range(0, n)):\n            a[i] -= y * ans\n            if a[i] <= 0:\n                continue\n            temp = (a[i] + x - 1) // x\n            ans += temp\n        print(ans)", "for i in range(int(input())):\n    input_list = input().split()\n    n = int(input_list[0])\n    last_city = int(input_list[1])\n    every_city = int(input_list[2])\n    sadness_list = [None] * n\n    sadness_string = input().split()\n    maxi = 0\n    for i in range(n):\n        sadness_list[i] = int(sadness_string[i])\n        if sadness_list[i] > maxi:\n            maxi = sadness_list[i]\n    if every_city >= last_city:\n        if maxi % every_city == 0:\n            print(maxi // every_city)\n        else:\n            print(maxi // every_city + 1)\n    else:\n        count = 0\n        for i in reversed(range(n)):\n            sadness_list[i] -= count * every_city\n            if sadness_list[i] < 0:\n                continue\n            else:\n                if sadness_list[i] % last_city == 0:\n                    temp_count = sadness_list[i] // last_city\n                else:\n                    temp_count = sadness_list[i] // last_city + 1\n                sadness_list[i] -= temp_count * last_city\n                count += temp_count\n        print(count)", "for _ in range(int(input())):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if x < y:\n        print((max(a) + y - 1) // y)\n        continue\n    ans = 0\n    for i in reversed(range(0, n)):\n        a[i] -= ans * y\n        if a[i] <= 0:\n            continue\n        reqd = (a[i] + x - 1) // x\n        ans += reqd\n    print(ans)", "from math import ceil\ntest_cases = int(input(''))\nanswer = []\nfor i in range(test_cases):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (s, flag) = (0, True)\n    if y >= x:\n        answer.append(ceil(max(arr) / y))\n        continue\n    else:\n        count = 0\n        for j in range(n - 1, -1, -1):\n            temp = arr[j] - y * count\n            if temp <= 0:\n                continue\n            else:\n                count += ceil(temp / x)\n        answer.append(count)\nfor ans in answer:\n    print(ans)", "t = int(input())\nimport math\nfor i in range(t):\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if y >= x:\n        print(math.ceil(max(l) / y))\n        continue\n    else:\n        c = 0\n        for i in range(n - 1, -1, -1):\n            a = l[i] - y * c\n            if a > 0:\n                c += math.ceil(a / x)\n        print(c)", "import math\nt = int(input())\nfor i in range(t):\n    (n, x, y) = input().split()\n    (n, x, y) = (int(n), int(x), int(y))\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(math.ceil(a[0] / max(x, y)))\n        continue\n    if y >= x:\n        maxVal = max(a)\n        print(math.ceil(maxVal / y))\n    else:\n        ans = 0\n        for r in range(n - 1, -1, -1):\n            a[r] -= y * ans\n            a[r] = max(0, a[r])\n            ans = max(ans, ans + math.ceil(a[r] / x))\n        print(ans)", "import math\nt = int(input())\n\ndef findLargest(arr):\n    second = 0\n    largest = min(arr)\n    for i in range(len(arr)):\n        if arr[i] > largest:\n            second = largest\n            largest = i\n        else:\n            second = i if arr[i] > arr[second] else second\n    return [largest, second]\nfor i in range(t):\n    (n, x, y) = input().split()\n    (n, x, y) = (int(n), int(x), int(y))\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(math.ceil(a[0] / max(x, y)))\n        continue\n    if y >= x:\n        maxVal = max(a)\n        print(math.ceil(maxVal / y))\n    else:\n        ans = 0\n        for r in range(n - 1, -1, -1):\n            a[r] -= y * ans\n            a[r] = max(0, a[r])\n            ans = max(ans, ans + math.ceil(a[r] / x))\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, x, y) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    if x <= y:\n        res = (max(A) + y + -1) // y\n        print(res)\n    elif max(A) <= y:\n        print(1)\n    else:\n        carry = 0\n        for i in range(len(A) - 1, -1, -1):\n            A[i] = A[i] - carry * y\n            if A[i] > y:\n                (a, b) = divmod(A[i], x)\n                carry += a\n                if b > y:\n                    carry += 1\n                    A[i] = 0\n                else:\n                    A[i] = b\n        for i in range(len(A)):\n            if A[i] > 0:\n                carry += 1\n                break\n        print(carry)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        (n, x, y) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        if x < y:\n            x = y\n        if arr.count(0) == n:\n            print(0)\n            continue\n        ans = 0\n        prev = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] = arr[i] - prev * y\n            if arr[i] <= 0:\n                continue\n            if arr[i] > y:\n                p = (arr[i] + x - 1) // x\n                prev += p\n                ans += p\n            else:\n                ans += 1\n                prev += 1\n        print(ans)\nmain()", "from math import ceil\ntest_cases = int(input(''))\nanswer = []\nfor i in range(test_cases):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (s, flag) = (0, True)\n    if y >= x:\n        answer.append(ceil(max(arr) / y))\n        continue\n    else:\n        count = 0\n        for j in range(n - 1, -1, -1):\n            temp = arr[j] - y * count\n            if temp <= 0:\n                continue\n            else:\n                count += ceil(temp / x)\n        answer.append(count)\nfor ans in answer:\n    print(ans)", "test = int(input())\nfor t in range(test):\n    (n, x, y) = map(int, input().split())\n    A = list(map(int, input().split()))\n    if y >= x:\n        print((max(A) + y - 1) // y)\n        continue\n    B = [0] * n\n    B[0] = A[0]\n    for i in range(1, n):\n        B[i] = max(B[i - 1], A[i])\n    out = 0\n    mix = 0\n    for i in range(n - 1, -1, -1):\n        o = (A[i] + y - 1) // y\n        if o <= mix:\n            continue\n        h = o - mix\n        l = A[i] - y * mix\n        xof = (l + x - 1) // x\n        x1 = min(xof, h)\n        y1 = max(mix, (A[i] - x * x1 + y - 1) // y)\n        mix = max(mix, x1 + y1)\n    print(mix)", "t = int(input())\nimport math\nfor i in range(t):\n    (n, x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if y >= x:\n        x = max(l)\n        print(math.ceil(x / y))\n        continue\n    else:\n        ans = 0\n        c = 0\n        for i in range(n - 1, -1, -1):\n            a = l[i] - y * c\n            if a <= 0:\n                continue\n            else:\n                b = math.ceil(a / x)\n                c += b\n        print(c)", "import math\nT = int(input())\nfor tc in range(T):\n    (n, x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    scarlet = 0\n    if x <= y:\n        witch = max(a)\n        if witch <= 0:\n            print(0)\n        else:\n            print(math.ceil(witch / y))\n    else:\n        for i in range(n):\n            a[i] = max(a[i], 0)\n        r = 0\n        for i in range(n - 1, -1, -1):\n            a[i] -= r\n            a[i] = max(a[i], 0)\n            ak = math.ceil(a[i] / x)\n            r += y * ak\n            scarlet += ak\n        print(scarlet)", "import math\nT = int(input())\nfor tc in range(T):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    scarlet = 0\n    if x <= y:\n        witch = max(arr)\n        if witch <= 0:\n            print(0)\n        else:\n            print(math.ceil(witch / y))\n    else:\n        for i in range(n):\n            arr[i] = max(arr[i], 0)\n        raja = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] -= raja\n            arr[i] = max(arr[i], 0)\n            akbar = math.ceil(arr[i] / x)\n            raja += y * akbar\n            scarlet += akbar\n        print(scarlet)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "import math\nt = int(input())\nfor tc in range(t):\n    (n, x, y) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    var2 = 0\n    if x <= y:\n        var1 = max(arr)\n        if var1 <= 0:\n            print(0)\n        else:\n            print(math.ceil(var1 / y))\n    else:\n        for i in range(n):\n            arr[i] = max(arr[i], 0)\n        var4 = 0\n        for i in range(n - 1, -1, -1):\n            arr[i] -= var4\n            arr[i] = max(arr[i], 0)\n            var3 = math.ceil(arr[i] / x)\n            var4 += y * var3\n            var2 += var3\n        print(var2)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)", "for _ in range(int(input())):\n    (n, x, y) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if y >= x:\n        print((max(a) + y - 1) // y)\n        continue\n    mx = [0] * n\n    mx[0] = a[0]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    res = 0\n    mxOperationRequiredRight = 0\n    for i in range(n - 1, -1, -1):\n        operationYreq = (a[i] + y - 1) // y\n        if operationYreq <= mxOperationRequiredRight:\n            continue\n        howManyXOperationCanDoHere = operationYreq - mxOperationRequiredRight\n        left = a[i] - y * mxOperationRequiredRight\n        xOpRequired = (left + x - 1) // x\n        xop = min(xOpRequired, howManyXOperationCanDoHere)\n        yop = max(mxOperationRequiredRight, (a[i] - x * xop + y - 1) // y)\n        mxOperationRequiredRight = max(mxOperationRequiredRight, xop + yop)\n    print(mxOperationRequiredRight)"]