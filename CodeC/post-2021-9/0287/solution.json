["import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    b = [a[-1]]\n    for i in range(1, n - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        b.append(math.gcd(b[i - 1], a[n - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if b[-1] > 1:\n        s += 1\n    b = b[::-1]\n    for i in range(1, n - 1):\n        if math.gcd(a1[i - 1], b[i]) > 1:\n            s += 1\n    print(s)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    al = [a[0]]\n    for i in range(1, n):\n        al.append(math.gcd(al[-1], a[i]))\n    ar = [a[-1]]\n    ae = a.copy()\n    ae.reverse()\n    for i in range(1, n):\n        ar.append(math.gcd(ar[-1], ae[i]))\n    ar.reverse()\n    ans = 0\n    for i in range(1, n - 1):\n        if math.gcd(al[i - 1], ar[i + 1]) != 1:\n            ans += 1\n    if ar[1] != 1:\n        ans += 1\n    if al[-2] != 1:\n        ans += 1\n    print(ans)", "import math as m\n\ndef gcdm(a, b):\n    if b % a == 0:\n        return a\n    else:\n        return gcdm(b % a, a)\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    hcf = gcdm(A[0], A[1])\n    for i in range(2, N):\n        hcf = gcdm(hcf, A[i])\n    prehcf = [0 for _ in range(N)]\n    prehcf[0] = A[0]\n    for i in range(1, N):\n        prehcf[i] = gcdm(A[i], prehcf[i - 1])\n    posthcf = [0 for _ in range(N)]\n    posthcf[N - 1] = A[N - 1]\n    for i in reversed(range(N - 1)):\n        posthcf[i] = gcdm(A[i], posthcf[i + 1])\n    if hcf != 1 or (N == 2 and A[0] != 1 and (A[1] != 1)):\n        print(N)\n    elif N == 2 and (A[0] == 1 or A[1] == 1):\n        if A[0] == A[1]:\n            print(0)\n        else:\n            print(1)\n    else:\n        count = 0\n        for i in range(N):\n            if i == 0:\n                hcf2 = posthcf[1]\n            elif i == N - 1:\n                hcf2 = prehcf[N - 2]\n            else:\n                hcf2 = gcdm(prehcf[i - 1], posthcf[i + 1])\n            if hcf2 != 1:\n                count += 1\n        print(count)", "import math as m\n\ndef gcdm(A, N, k):\n    min = A[0] if k != 0 else A[1]\n    for i in range(N):\n        if A[i] < min and i != k:\n            min = A[i]\n    ans = 1\n    while min != 1:\n        flag = 1\n        for i in range(N):\n            if i != k and A[i] % min != 0:\n                flag = 0\n                break\n        if flag == 1:\n            ans = min\n            break\n        min -= 1\n    return ans\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    hcf = m.gcd(A[0], A[1])\n    for i in range(2, N):\n        hcf = m.gcd(hcf, A[i])\n    prehcf = [0 for _ in range(N)]\n    prehcf[0] = A[0]\n    for i in range(1, N):\n        prehcf[i] = m.gcd(A[i], prehcf[i - 1])\n    posthcf = [0 for _ in range(N)]\n    posthcf[N - 1] = A[N - 1]\n    for i in reversed(range(N - 1)):\n        posthcf[i] = m.gcd(A[i], posthcf[i + 1])\n    if hcf != 1 or (N == 2 and A[0] != 1 and (A[1] != 1)):\n        print(N)\n    elif N == 2 and (A[0] == 1 or A[1] == 1):\n        if A[0] == A[1]:\n            print(0)\n        else:\n            print(1)\n    else:\n        count = 0\n        for i in range(N):\n            if i == 0:\n                hcf2 = posthcf[1]\n            elif i == N - 1:\n                hcf2 = prehcf[N - 2]\n            else:\n                hcf2 = m.gcd(prehcf[i - 1], posthcf[i + 1])\n            if hcf2 != 1:\n                count += 1\n        print(count)", "import math\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    b = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        b.append(math.gcd(b[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if b[-1] > 1:\n        s += 1\n    b = b[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], b[i]) > 1:\n            s += 1\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if aa[-1] > 1:\n        s += 1\n    aa = aa[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            s += 1\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if aa[-1] > 1:\n        s += 1\n    aa = aa[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            s += 1\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    A = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, n - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[n - 1 - i]))\n    if a1[-1] > 1:\n        A += 1\n    if aa[-1] > 1:\n        A += 1\n    aa = aa[::-1]\n    for i in range(1, n - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            A += 1\n    print(A)", "import math\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if aa[-1] > 1:\n        s += 1\n    aa = aa[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            s += 1\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if aa[-1] > 1:\n        s += 1\n    aa = aa[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            s += 1\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if aa[-1] > 1:\n        s += 1\n    aa = aa[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            s += 1\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if aa[-1] > 1:\n        s += 1\n    aa = aa[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            s += 1\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if aa[-1] > 1:\n        s += 1\n    aa = aa[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            s += 1\n    print(s)", "import math\nfor _ in range(int(input())):\n    p = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    a1 = [a[0]]\n    aa = [a[-1]]\n    for i in range(1, p - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        aa.append(math.gcd(aa[i - 1], a[p - 1 - i]))\n    if a1[-1] > 1:\n        s += 1\n    if aa[-1] > 1:\n        s += 1\n    aa = aa[::-1]\n    for i in range(1, p - 1):\n        if math.gcd(a1[i - 1], aa[i]) > 1:\n            s += 1\n    print(s)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    a1 = [a[0]]\n    a2 = [a[-1]]\n    for i in range(1, n - 1):\n        a1.append(math.gcd(a1[i - 1], a[i]))\n        a2.append(math.gcd(a2[i - 1], a[n - 1 - i]))\n    if a1[-1] > 1:\n        ans += 1\n    if a2[-1] > 1:\n        ans += 1\n    a2 = a2[::-1]\n    for i in range(1, n - 1):\n        if math.gcd(a1[i - 1], a2[i]) > 1:\n            ans += 1\n    print(ans)", "dict1 = {}\nfrom math import gcd\n\ndef gcd2(a, b):\n    if (a, b) in dict1:\n        return dict1[a, b]\n    if a % b == 0:\n        dict1[a, b] = b\n        dict1[b, a] = b\n        return b\n    else:\n        var3 = gcd(b, a % b)\n        dict1[a, b] = var3\n        dict1[b, a] = var3\n        return var3\n\ndef GCD(A_s):\n    var = A_s[0]\n    var3 = [var]\n    var4 = [A_s[-1]]\n    for i in range(0, len(A_s) - 1):\n        var2 = gcd(var, A_s[i + 1])\n        var = var2\n        var3.append(var2)\n    var = A_s[-1]\n    for i in range(len(A_s) - 2, -1, -1):\n        var2 = gcd(var, A_s[i])\n        var = var2\n        var4.append(var2)\n    return (var3, var4)\nT = int(input())\nfor j in range(0, T):\n    N = int(input())\n    temp = input()\n    A_s = [int(a) for a in temp.split()]\n    Strong = 0\n    (up, down) = GCD(A_s)\n    for i in range(0, N):\n        if i == 0 or i == N - 1:\n            continue\n        if gcd(up[i - 1], down[N - i - 2]) != 1:\n            Strong = Strong + 1\n    if down[N - 2] != 1:\n        Strong = Strong + 1\n    if up[N - 2] != 1:\n        Strong = Strong + 1\n    print(Strong)", "from math import gcd\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    pre = [l[0]]\n    suf = [l[-1]]\n    for i in range(1, n - 1):\n        pre.append(gcd(pre[i - 1], l[i]))\n    for i in range(1, n - 1):\n        suf.append(gcd(suf[i - 1], l[n - i - 1]))\n    suf.reverse()\n    count = 0\n    if suf[0] != 1:\n        count += 1\n    if pre[-1] != 1:\n        count += 1\n    for i in range(1, n - 1):\n        if gcd(pre[i - 1], suf[i]) != 1:\n            count += 1\n    print(count)", "from math import gcd\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gc1 = [a[0]]\n    gc2 = [a[-1]]\n    for i in range(1, n - 1):\n        gc1.append(gcd(gc1[i - 1], a[i]))\n    for i in range(1, n - 1):\n        gc2.append(gcd(gc2[i - 1], a[n - i - 1]))\n    gc2.reverse()\n    c = 0\n    if gc2[0] != 1:\n        c += 1\n    if gc1[-1] != 1:\n        c += 1\n    for i in range(1, n - 1):\n        if gcd(gc1[i - 1], gc2[i]) != 1:\n            c += 1\n    print(c)", "from math import gcd\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    gc1 = [a[0]]\n    gc2 = [a[-1]]\n    for i in range(1, n - 1):\n        gc1.append(gcd(gc1[i - 1], a[i]))\n    for i in range(1, n - 1):\n        gc2.append(gcd(gc2[i - 1], a[n - i - 1]))\n    gc2.reverse()\n    c = 0\n    if gc2[0] != 1:\n        c += 1\n    if gc1[-1] != 1:\n        c += 1\n    for i in range(1, n - 1):\n        if gcd(gc1[i - 1], gc2[i]) != 1:\n            c += 1\n    print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcl = [l[0]]\n    gcr = [l[-1]]\n    for i in range(1, n - 1):\n        gcl.append(math.gcd(gcl[i - 1], l[i]))\n    for i in range(1, n - 1):\n        gcr.append(math.gcd(gcr[i - 1], l[n - i - 1]))\n    gcr.reverse()\n    count = 0\n    if gcr[0] != 1:\n        count += 1\n    if gcl[-1] != 1:\n        count += 1\n    for i in range(1, n - 1):\n        if math.gcd(gcl[i - 1], gcr[i]) != 1:\n            count += 1\n    print(count)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    gcl = [l[0]]\n    gcr = [l[-1]]\n    for i in range(1, n - 1):\n        gcl.append(math.gcd(gcl[i - 1], l[i]))\n    for i in range(1, n - 1):\n        gcr.append(math.gcd(gcr[i - 1], l[n - i - 1]))\n    gcr.reverse()\n    count = 0\n    if gcr[0] != 1:\n        count += 1\n    if gcl[-1] != 1:\n        count += 1\n    for i in range(1, n - 1):\n        if math.gcd(gcl[i - 1], gcr[i]) != 1:\n            count += 1\n    print(count)", "from math import gcd\nfrom sys import stdin\nstdint = lambda : int(stdin.readline())\nseq = lambda : list(map(int, stdin.readline().strip().split()))\nfor _ in range(stdint()):\n    n = stdint()\n    nums = seq()\n    pre_gcd = [nums[0]] * n\n    suf_gcd = [nums[n - 1]] * n\n    for i in range(1, n):\n        pre_gcd[i] = gcd(pre_gcd[i - 1], nums[i])\n    for i in range(n - 2, -1, -1):\n        suf_gcd[i] = gcd(suf_gcd[i + 1], nums[i])\n    ans = 0\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suf_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pre_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pre_gcd[i - 1], suf_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    print(ans)", "import math\ncase = int(input())\nfor i in range(case):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    prefix = [0 for i in range(n)]\n    suffix = [0 for i in range(n)]\n    prefix[0] = arr[0]\n    suffix[n - 1] = arr[n - 1]\n    for i in range(1, n):\n        prefix[i] = math.gcd(arr[i], prefix[i - 1])\n    for j in reversed(range(n - 1)):\n        suffix[j] = math.gcd(arr[j], suffix[j + 1])\n    i = 0\n    strong = 0\n    while i < n:\n        if i == 0 and suffix[i + 1] > 1:\n            strong += 1\n        if i == n - 1 and prefix[n - 2] > 1:\n            strong += 1\n        if i > 0 and i < n - 1 and (math.gcd(prefix[i - 1], suffix[i + 1]) > 1):\n            strong += 1\n        i += 1\n    print(strong)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    pre = [0] * n\n    suf = [0] * n\n    (pre[0], suf[-1]) = (a[0], a[-1])\n    for i in range(1, n):\n        pre[i] = gcd(pre[i - 1], a[i])\n    for j in range(n - 2, -1, -1):\n        suf[j] = gcd(suf[j + 1], a[j])\n    for k in range(1, n - 1):\n        if gcd(pre[k - 1], suf[k + 1]) != 1:\n            s += 1\n    if suf[1] != 1:\n        s += 1\n    if pre[n - 2] != 1:\n        s += 1\n    print(s)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    pre = [0] * n\n    suf = [0] * n\n    (pre[0], suf[-1]) = (a[0], a[-1])\n    for i in range(1, n):\n        pre[i] = gcd(pre[i - 1], a[i])\n    for j in range(n - 2, -1, -1):\n        suf[j] = gcd(suf[j + 1], a[j])\n    for k in range(1, n - 1):\n        if gcd(pre[k - 1], suf[k + 1]) != 1:\n            s += 1\n    if suf[1] != 1:\n        s += 1\n    if pre[n - 2] != 1:\n        s += 1\n    print(s)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    a = list(a)\n    s = 0\n    pre = [0] * n\n    suf = [0] * n\n    (pre[0], suf[-1]) = (a[0], a[-1])\n    for i in range(1, n):\n        pre[i] = math.gcd(pre[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        suf[i] = math.gcd(suf[i + 1], a[i])\n    for i in range(1, n - 1):\n        if math.gcd(pre[i - 1], suf[i + 1]) != 1:\n            s += 1\n    if suf[1] != 1:\n        s += 1\n    if pre[n - 2] != 1:\n        s += 1\n    print(s)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    pre = [0] * n\n    suf = [0] * n\n    (pre[0], suf[-1]) = (a[0], a[-1])\n    for i in range(1, n):\n        pre[i] = gcd(pre[i - 1], a[i])\n    for j in range(n - 2, -1, -1):\n        suf[j] = gcd(suf[j + 1], a[j])\n    for k in range(1, n - 1):\n        if gcd(pre[k - 1], suf[k + 1]) != 1:\n            s += 1\n    if suf[1] != 1:\n        s += 1\n    if pre[n - 2] != 1:\n        s += 1\n    print(s)", "def gcdBuilt(A, B):\n    while B:\n        (A, B) = (B, A % B)\n    return A\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    all_gcd = 0\n    for x in A:\n        all_gcd = gcdBuilt(x, all_gcd)\n    if all_gcd != 1:\n        print(N)\n    else:\n        lp = list()\n        lp.append(A[0])\n        for i in range(1, N):\n            lp.append(gcdBuilt(A[i], lp[i - 1]))\n        rp = [0] * N\n        rp[N - 1] = A[N - 1]\n        for i in range(N - 2, -1, -1):\n            rp[i] = gcdBuilt(rp[i + 1], A[i])\n        cnt = 0\n        for i in range(N):\n            temp = 0\n            if i == 0:\n                temp = rp[i + 1]\n            elif i == N - 1:\n                temp = lp[i - 1]\n            else:\n                temp = gcdBuilt(lp[i - 1], rp[i + 1])\n            if temp != 1:\n                cnt += 1\n        print(cnt)", "def gcdBuilt(A, B):\n    if B == 0:\n        return A\n    else:\n        return gcdBuilt(B, A % B)\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    all_gcd = 0\n    for x in A:\n        all_gcd = gcdBuilt(x, all_gcd)\n    if all_gcd != 1:\n        print(N)\n    else:\n        lp = list()\n        lp.append(A[0])\n        for i in range(1, N):\n            lp.append(gcdBuilt(A[i], lp[i - 1]))\n        rp = [0] * N\n        rp[N - 1] = A[N - 1]\n        for i in range(N - 2, -1, -1):\n            rp[i] = gcdBuilt(rp[i + 1], A[i])\n        cnt = 0\n        for i in range(N):\n            temp = 0\n            if i == 0:\n                temp = rp[i + 1]\n            elif i == N - 1:\n                temp = lp[i - 1]\n            else:\n                temp = gcdBuilt(lp[i - 1], rp[i + 1])\n            if temp != 1:\n                cnt += 1\n        print(cnt)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref = a.copy()\n    sufi = a.copy()\n    for i in range(1, n):\n        pref[i] = gcd(pref[i], pref[i - 1])\n    for i in range(n - 2, -1, -1):\n        sufi[i] = gcd(sufi[i], sufi[i + 1])\n    c = 0\n    for i in range(n):\n        a = 0 if i == 0 else pref[i - 1]\n        b = 0 if i == n - 1 else sufi[i + 1]\n        if gcd(a, b) > 1:\n            c += 1\n    print(c)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref = [0] * n\n    sufi = [0] * n\n    pref[0] = a[0]\n    sufi[-1] = a[-1]\n    for i in range(1, n):\n        pref[i] = gcd(pref[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        sufi[i] = gcd(sufi[i + 1], a[i])\n    c = 0\n    for i in range(n):\n        if i == 0:\n            a = 0\n        else:\n            a = pref[i - 1]\n        if i == n - 1:\n            b = 0\n        else:\n            b = sufi[i + 1]\n        if gcd(a, b) > 1:\n            c += 1\n    print(c)", "import math\ntests = int(input())\nfor i in range(tests):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[0]\n    gcd_arr_forward = []\n    for j in arr:\n        gcd = math.gcd(gcd, j)\n        gcd_arr_forward.append(gcd)\n    gcd_arr_backward = []\n    gcd = arr[-1]\n    for j in arr[::-1]:\n        gcd = math.gcd(gcd, j)\n        gcd_arr_backward.append(gcd)\n    gcd_arr_backward = gcd_arr_backward[::-1]\n    ans = 0\n    for j in range(length):\n        if j == 0:\n            gcd = gcd_arr_backward[j + 1]\n        elif j == length - 1:\n            gcd = gcd_arr_forward[j - 1]\n        else:\n            gcd = math.gcd(gcd_arr_forward[j - 1], gcd_arr_backward[j + 1])\n        if gcd != 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "from fractions import gcd\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol(arr, n):\n    ans = 0\n    (pref_gcd, suff_gcd) = ([0] * n, [0] * n)\n    for i in range(n):\n        if i == 0:\n            pref_gcd[i] = arr[i]\n        else:\n            pref_gcd[i] = gcd(pref_gcd[i - 1], arr[i])\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            suff_gcd[i] = arr[i]\n        else:\n            suff_gcd[i] = gcd(suff_gcd[i + 1], arr[i])\n    for i in range(n):\n        curr_gcd = 0\n        if i == 0:\n            curr_gcd = suff_gcd[i + 1]\n        elif i == n - 1:\n            curr_gcd = pref_gcd[i - 1]\n        else:\n            curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n        if curr_gcd != 1:\n            ans += 1\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    arr_s = input().split()\n    arr = []\n    for i in arr_s:\n        arr.append(int(i))\n    print(sol(arr, n))\n    t -= 1", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    array = list(map(int, input().split(' ')[:n]))\n    curr_pre_gcd = array[0]\n    prefix_gcd = [array[0]]\n    curr_suf_gcd = array[n - 1]\n    suffix_gcd = [array[n - 1]]\n    for i in range(1, n):\n        curr_pre_gcd = math.gcd(curr_pre_gcd, array[i])\n        prefix_gcd.append(curr_pre_gcd)\n    for i in range(n - 2, -1, -1):\n        curr_suf_gcd = math.gcd(curr_suf_gcd, array[i])\n        suffix_gcd.append(curr_suf_gcd)\n    suffix_gcd = suffix_gcd[::-1]\n    if suffix_gcd[0] != 1:\n        print(n)\n    else:\n        count = 0\n        for i in range(n):\n            if i == 0:\n                if suffix_gcd[1] != 1:\n                    count += 1\n            elif i == n - 1:\n                if prefix_gcd[n - 2] != 1:\n                    count += 1\n            elif math.gcd(prefix_gcd[i - 1], suffix_gcd[i + 1]) != 1:\n                count += 1\n        print(count)\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = 0\n    hcf = arr[0]\n    while i < n:\n        hcf = math.gcd(hcf, arr[i])\n        i = i + 1\n    prefix_gcd = [1] * n\n    suffix_gcd = [1] * n\n    i = 1\n    prefix_gcd[0] = arr[0]\n    suffix_gcd[n - 1] = arr[n - 1]\n    while i < n:\n        prefix_gcd[i] = math.gcd(prefix_gcd[i - 1], arr[i])\n        suffix_gcd[n - i - 1] = math.gcd(suffix_gcd[n - i], arr[n - i - 1])\n        i = i + 1\n    count = 0\n    if prefix_gcd[n - 2] > 1:\n        count = count + 1\n    if suffix_gcd[1] > 1:\n        count = count + 1\n    i = 1\n    while i < n - 1:\n        if math.gcd(prefix_gcd[i - 1], suffix_gcd[i + 1]) > 1:\n            count = count + 1\n        i = i + 1\n    if hcf > 1:\n        print(n)\n    else:\n        print(count)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix_gcd = [1] * n\n    suffix_gcd = [1] * n\n    i = 1\n    prefix_gcd[0] = arr[0]\n    suffix_gcd[n - 1] = arr[n - 1]\n    while i < n:\n        prefix_gcd[i] = math.gcd(prefix_gcd[i - 1], arr[i])\n        suffix_gcd[n - i - 1] = math.gcd(suffix_gcd[n - i], arr[n - i - 1])\n        i = i + 1\n    count = 0\n    if prefix_gcd[n - 2] > 1:\n        count = count + 1\n    if suffix_gcd[1] > 1:\n        count = count + 1\n    i = 1\n    while i < n - 1:\n        if math.gcd(prefix_gcd[i - 1], suffix_gcd[i + 1]) > 1:\n            count = count + 1\n        i = i + 1\n    print(count)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    (pre, suf) = ([0] * n, [0] * n)\n    for i in range(0, n):\n        pre[i] = arr[i]\n        suf[n - 1 - i] = arr[n - 1 - i]\n        if i > 0:\n            pre[i] = math.gcd(pre[i], pre[i - 1])\n            suf[n - 1 - i] = math.gcd(suf[n - 1 - i], suf[n - i])\n    if pre[n - 1] > 1:\n        print(n)\n        continue\n    SE = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pre[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if math.gcd(p, s) > 1:\n            SE += 1\n    print(SE)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    (pre, suf) = ([0] * n, [0] * n)\n    for i in range(0, n):\n        pre[i] = arr[i]\n        suf[n - 1 - i] = arr[n - 1 - i]\n        if i > 0:\n            pre[i] = math.gcd(pre[i], pre[i - 1])\n            suf[n - 1 - i] = math.gcd(suf[n - 1 - i], suf[n - i])\n    if pre[n - 1] > 1:\n        print(n)\n        continue\n    SE = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pre[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if math.gcd(p, s) > 1:\n            SE += 1\n    print(SE)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    a = list(a)\n    s = 0\n    pre = [0] * n\n    suf = [0] * n\n    (pre[0], suf[-1]) = (a[0], a[-1])\n    for i in range(1, n):\n        pre[i] = math.gcd(pre[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        suf[i] = math.gcd(suf[i + 1], a[i])\n    for i in range(1, n - 1):\n        if math.gcd(pre[i - 1], suf[i + 1]) != 1:\n            s += 1\n    if suf[1] != 1:\n        s += 1\n    if pre[n - 2] != 1:\n        s += 1\n    print(s)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p_g = [0] * n\n    p_g[0] = l[0]\n    for i in range(1, n):\n        p_g[i] = gcd(p_g[i - 1], l[i])\n    s_g = [0] * n\n    s_g[n - 1] = l[n - 1]\n    for i in range(n - 2, -1, -1):\n        s_g[i] = gcd(s_g[i + 1], l[i])\n    st = 0\n    for i in range(0, n):\n        if i == 0:\n            if s_g[1] > 1:\n                st += 1\n        elif i == n - 1:\n            if p_g[n - 2] > 1:\n                st += 1\n        elif gcd(s_g[i + 1], p_g[i - 1]) > 1:\n            st += 1\n    print(st)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pref, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pref[i] = a[i]\n        suf[n - 1 - i] = a[n - 1 - i]\n        if i > 0:\n            pref[i] = gcd(pref[i], pref[i - 1])\n            suf[n - 1 - i] = gcd(suf[n - 1 - i], suf[n - i])\n    if pref[n - 1] > 1:\n        print(n)\n        continue\n    ans = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pref[i - 1]\n        if i + 1 < n:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            ans += 1\n    print(ans)", "from bisect import bisect_left, bisect_right\nfrom email import header\nfrom heapq import heapify, heappush, heappop\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\nfrom tkinter import N\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\nfor _ in range(ii()):\n    n = ii()\n    arr = il()\n    ans = 0\n    pre = [arr[0]]\n    suf = [-1] * n\n    suf[-1] = arr[-1]\n    for l in range(1, n):\n        pre.append(gcd(pre[-1], arr[l]))\n    for l in range(n - 2, -1, -1):\n        suf[l] = gcd(suf[l + 1], arr[l])\n    for k in range(1, n - 1):\n        if gcd(pre[k - 1], suf[k + 1]) != 1:\n            ans += 1\n    if suf[1] != 1:\n        ans += 1\n    if pre[-2] != 1:\n        ans += 1\n    print(ans)", "inty = lambda : int(input())\nstringy = lambda : input().strip()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\nfrom math import gcd\nT = inty()\nfor i in range(T):\n    n = inty()\n    alist = listy()\n    count = 0\n    prefix = [0] * n\n    prefix[0] = alist[0]\n    for i in range(1, n):\n        prefix[i] = gcd(prefix[i - 1], alist[i])\n    suffix = [0] * n\n    suffix[-1] = alist[-1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = gcd(suffix[i + 1], alist[i])\n    for i in range(1, n - 1):\n        if gcd(prefix[i - 1], suffix[i + 1]) != 1:\n            count += 1\n    if suffix[1] != 1:\n        count += 1\n    if prefix[n - 2] != 1:\n        count += 1\n    print(count)", "import math\nT = int(input())\nwhile T:\n    N = int(input())\n    L = list(map(int, input().split()))\n    prefix = list()\n    prefix.append(L[0])\n    for i in range(1, N):\n        prefix.append(math.gcd(prefix[i - 1], L[i]))\n    suffix = [0] * N\n    suffix[N - 1] = L[N - 1]\n    for i in range(N - 2, -1, -1):\n        suffix[i] = math.gcd(L[i], suffix[i + 1])\n    strong = 0\n    for i in range(0, N):\n        if i == 0:\n            if suffix[1] > 1:\n                strong += 1\n        elif i == N - 1:\n            if prefix[N - 2] > 1:\n                strong += 1\n        elif math.gcd(suffix[i + 1], prefix[i - 1]) > 1:\n            strong += 1\n    print(strong)\n    T = T - 1", "def gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\nfor t in range(int(input())):\n    n = int(input())\n    a = tuple(map(int, input().strip().split()))\n    pref_gcd = []\n    suff_gcd = []\n    pref_gcd.append(a[0])\n    suff_gcd.append(a[n - 1])\n    for i in range(1, n):\n        pref_gcd.append(gcd(pref_gcd[i - 1], a[i]))\n        suff_gcd.append(gcd(suff_gcd[i - 1], a[n - 1 - i]))\n    suff_gcd = suff_gcd[::-1]\n    if pref_gcd[n - 1] == 1:\n        ans = 0\n        for i in range(n):\n            if i == 0:\n                curr_gcd = suff_gcd[i + 1]\n            elif i == n - 1:\n                curr_gcd = pref_gcd[n - 2]\n            else:\n                curr_gcd = gcd(pref_gcd[i - 1], suff_gcd[i + 1])\n            if curr_gcd > 1:\n                ans += 1\n    else:\n        ans = n\n    print(ans)", "import math\nT = int(input())\nwhile T:\n    N = int(input())\n    L = list(map(int, input().split()))\n    prefix = list()\n    prefix.append(L[0])\n    for i in range(1, N):\n        prefix.append(math.gcd(prefix[i - 1], L[i]))\n    suffix = [0] * N\n    suffix[N - 1] = L[N - 1]\n    for i in range(N - 2, -1, -1):\n        suffix[i] = math.gcd(L[i], suffix[i + 1])\n    strong = 0\n    for i in range(0, N):\n        if i == 0:\n            if suffix[1] > 1:\n                strong += 1\n        elif i == N - 1:\n            if prefix[N - 2] > 1:\n                strong += 1\n        elif math.gcd(suffix[i + 1], prefix[i - 1]) > 1:\n            strong += 1\n    print(strong)\n    T = T - 1", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    prefix = list()\n    prefix.append(l[0])\n    for i in range(1, n):\n        prefix.append(math.gcd(prefix[i - 1], l[i]))\n    suffix = [0] * n\n    suffix[n - 1] = l[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = math.gcd(l[i], suffix[i + 1])\n    strong = 0\n    for i in range(0, n):\n        if i == 0:\n            if suffix[1] > 1:\n                strong += 1\n        elif i == n - 1:\n            if prefix[n - 2] > 1:\n                strong += 1\n        elif math.gcd(suffix[i + 1], prefix[i - 1]) > 1:\n            strong += 1\n    print(strong)\n    t = t - 1", "import math\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    l = map(int, input().split())\n    l = list(l)\n    c = 0\n    pre = [0] * n\n    suf = [0] * n\n    (pre[0], suf[-1]) = (l[0], l[-1])\n    for i in range(1, n):\n        pre[i] = math.gcd(pre[i - 1], l[i])\n    for i in range(n - 2, -1, -1):\n        suf[i] = math.gcd(suf[i + 1], l[i])\n    for i in range(1, n - 1):\n        if math.gcd(pre[i - 1], suf[i + 1]) != 1:\n            c += 1\n    if suf[1] != 1:\n        c += 1\n    if pre[n - 2] != 1:\n        c += 1\n    print(c)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    a = list(a)\n    s = 0\n    pre = [0] * n\n    suf = [0] * n\n    (pre[0], suf[-1]) = (a[0], a[-1])\n    for i in range(1, n):\n        pre[i] = math.gcd(pre[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        suf[i] = math.gcd(suf[i + 1], a[i])\n    for i in range(1, n - 1):\n        if math.gcd(pre[i - 1], suf[i + 1]) != 1:\n            s += 1\n    if suf[1] != 1:\n        s += 1\n    if pre[n - 2] != 1:\n        s += 1\n    print(s)", "def gcd(a, b):\n    if a == 0:\n        return abs(b)\n    else:\n        return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pre, suf) = ([0] * n, [0] * n)\n    for i in range(n):\n        pre[i] = a[i]\n        suf[n - i - 1] = a[n - i - 1]\n        if i > 0:\n            pre[i] = gcd(pre[i - 1], pre[i])\n            suf[n - i - 1] = gcd(suf[n - i], suf[n - i - 1])\n    if pre[n - 1] > 1:\n        print(n)\n        continue\n    res = 0\n    for i in range(n):\n        (p, s) = (0, 0)\n        if i > 0:\n            p = pre[i - 1]\n        if i < n - 1:\n            s = suf[i + 1]\n        if gcd(p, s) > 1:\n            res += 1\n    print(res)", "def gcd(A, B):\n    if A == 0:\n        return B\n    return gcd(B % A, A)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    ARR = list(map(int, input().split()))\n    suf = list()\n    pre = list()\n    res = ARR[0]\n    pre.append(res)\n    for i in range(1, N - 1):\n        res = gcd(res, ARR[i])\n        pre.append(res)\n    res = ARR[N - 1]\n    suf.append(res)\n    for i in range(N - 2, -1, -1):\n        res = gcd(res, ARR[i])\n        suf.append(res)\n    suf = suf[::-1]\n    res = 0\n    for i in range(N):\n        if i == 0:\n            if suf[1] != 1:\n                res += 1\n        elif i == N - 1:\n            if pre[i - 1] != 1:\n                res += 1\n        elif gcd(pre[i - 1], suf[i + 1]) != 1:\n            res += 1\n    print(res)", "def gcd(A, B):\n    if A == 0:\n        return B\n    return gcd(B % A, A)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    ARR = list(map(int, input().split()))\n    suf = list()\n    pre = list()\n    res = ARR[0]\n    pre.append(res)\n    for i in range(1, N - 1):\n        res = gcd(res, ARR[i])\n        pre.append(res)\n    res = ARR[N - 1]\n    suf.append(res)\n    for i in range(N - 2, -1, -1):\n        res = gcd(res, ARR[i])\n        suf.append(res)\n    suf = suf[::-1]\n    res = 0\n    for i in range(N):\n        if i == 0:\n            if suf[1] != 1:\n                res += 1\n        elif i == N - 1:\n            if pre[i - 1] != 1:\n                res += 1\n        elif gcd(pre[i - 1], suf[i + 1]) != 1:\n            res += 1\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    ans = 0\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = math.gcd(prefix[i - 1], arr[i])\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = math.gcd(suffix[i + 1], arr[i])\n    for i in range(n):\n        if i == 0:\n            x = suffix[i + 1]\n        elif i == n - 1:\n            x = prefix[i - 1]\n        else:\n            x = math.gcd(suffix[i + 1], prefix[i - 1])\n        if x > 1:\n            ans += 1\n    print(ans)", "from math import gcd\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    ai = input().split()\n    an = []\n    for i in ai:\n        an.append(int(i))\n    prefix = []\n    suffix = []\n    (prefix, suffix) = ([0] * n, [0] * n)\n    for i in range(n):\n        prefix[i] = an[i]\n        suffix[n - 1 - i] = an[n - 1 - i]\n        if i > 0:\n            prefix[i] = gcd(prefix[i], prefix[i - 1])\n            suffix[n - 1 - i] = gcd(suffix[n - 1 - i], suffix[n - i])\n    ans = 0\n    for i in range(n):\n        (pr, su) = (0, 0)\n        if i > 0:\n            pr = prefix[i - 1]\n        if i + 1 < n:\n            su = suffix[i + 1]\n        if gcd(pr, su) > 1:\n            ans += 1\n    print(ans)\n    t -= 1", "import math\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (fdp, rdp) = ([arr[0] for i in range(n)], [arr[-1] for i in range(n)])\n    for i in range(1, n):\n        fdp[i] = gcd(arr[i], fdp[i - 1])\n        rdp[n - i - 1] = gcd(arr[n - i - 1], rdp[n - i])\n    goa = gcd(fdp[-1], arr[-1])\n    if goa != 1:\n        print(n)\n    else:\n        ans = 0\n        if rdp[1] != 1:\n            ans += 1\n        if fdp[-2] != 1:\n            ans += 1\n        for i in range(1, n - 1):\n            if gcd(fdp[i - 1], rdp[i + 1]) != 1:\n                ans += 1\n        print(ans)", "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\ndef FillPrefixSuffix(prefix, arr, suffix, n):\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = GCD(prefix[i - 1], arr[i])\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = GCD(suffix[i + 1], arr[i])\nT = int(input())\nfor t in range(T):\n    prefix = []\n    suffix = []\n    c = 0\n    a = 0\n    b = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n + 1):\n        prefix.append(0)\n        suffix.append(0)\n    FillPrefixSuffix(prefix, arr, suffix, n)\n    for i in range(n):\n        if i - 1 >= 0:\n            a = prefix[i - 1]\n        else:\n            a = 0\n        if i + 1 < n:\n            b = suffix[i + 1]\n        else:\n            b = 0\n        if GCD(a, b) > 1:\n            c = c + 1\n    print(c)", "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\ndef FillPrefixSuffix(prefix, arr, suffix, n):\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = GCD(prefix[i - 1], arr[i])\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = GCD(suffix[i + 1], arr[i])\nT = int(input())\nfor t in range(T):\n    prefix = []\n    suffix = []\n    c = 0\n    a = 0\n    b = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n + 1):\n        prefix.append(0)\n        suffix.append(0)\n    FillPrefixSuffix(prefix, arr, suffix, n)\n    for i in range(n):\n        if i - 1 >= 0:\n            a = prefix[i - 1]\n        else:\n            a = 0\n        if i + 1 < n:\n            b = suffix[i + 1]\n        else:\n            b = 0\n        if GCD(a, b) > 1:\n            c = c + 1\n    print(c)", "import math as m\nfor i in range(int(input())):\n    num = int(input())\n    lst = list(map(int, input().split()))[:num]\n    pre = [lst[0]]\n    suf = [0] * num\n    suf[num - 1] = lst[num - 1]\n    for i in range(1, num):\n        pre.append(m.gcd(pre[i - 1], lst[i]))\n    for i in range(num - 2, -1, -1):\n        suf[i] = m.gcd(suf[i + 1], lst[i])\n    (a, b, ans) = (0, 0, 0)\n    for i in range(num):\n        a = pre[i - 1] if i - 1 >= 0 else 0\n        b = suf[i + 1] if i + 1 < num else 0\n        if m.gcd(a, b) > 1:\n            ans += 1\n    print(ans)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix_gcd = [0] * n\n    prefix_gcd[0] = arr[0]\n    for i in range(1, n):\n        prefix_gcd[i] = find_gcd(arr[i], prefix_gcd[i - 1])\n    suffix_gcd = [0] * n\n    suffix_gcd[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix_gcd[i] = find_gcd(arr[i], suffix_gcd[i + 1])\n    ans = 0\n    for i in range(n):\n        if i == 0 and suffix_gcd[1] > 1:\n            ans += 1\n        elif i == n - 1 and prefix_gcd[n - 2] > 1:\n            ans += 1\n        elif i < n - 1 and find_gcd(prefix_gcd[i - 1], suffix_gcd[i + 1]) > 1:\n            ans += 1\n    print(ans)\n    t -= 1", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix_gcd = [0] * n\n    prefix_gcd[0] = arr[0]\n    for i in range(1, n):\n        prefix_gcd[i] = find_gcd(arr[i], prefix_gcd[i - 1])\n    suffix_gcd = [0] * n\n    suffix_gcd[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix_gcd[i] = find_gcd(arr[i], suffix_gcd[i + 1])\n    ans = 0\n    for i in range(n):\n        if i == 0 and suffix_gcd[1] > 1:\n            ans += 1\n        elif i == n - 1 and prefix_gcd[n - 2] > 1:\n            ans += 1\n        elif i < n - 1 and find_gcd(prefix_gcd[i - 1], suffix_gcd[i + 1]) > 1:\n            ans += 1\n    print(ans)\n    t -= 1", "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\ndef FillPrefixSuffix(prefix, arr, suffix, n):\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = GCD(prefix[i - 1], arr[i])\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = GCD(suffix[i + 1], arr[i])\nT = int(input())\nfor t in range(T):\n    prefix = []\n    suffix = []\n    c = 0\n    a = 0\n    b = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n + 1):\n        prefix.append(0)\n        suffix.append(0)\n    FillPrefixSuffix(prefix, arr, suffix, n)\n    for i in range(n):\n        if i - 1 >= 0:\n            a = prefix[i - 1]\n        else:\n            a = 0\n        if i + 1 < n:\n            b = suffix[i + 1]\n        else:\n            b = 0\n        if GCD(a, b) > 1:\n            c = c + 1\n    print(c)", "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\n\ndef FillPrefixSuffix(prefix, arr, suffix, n):\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = GCD(prefix[i - 1], arr[i])\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = GCD(suffix[i + 1], arr[i])\nT = int(input())\nfor t in range(T):\n    prefix = []\n    suffix = []\n    c = 0\n    a = 0\n    b = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(n + 1):\n        prefix.append(0)\n        suffix.append(0)\n    FillPrefixSuffix(prefix, arr, suffix, n)\n    for i in range(n):\n        if i - 1 >= 0:\n            a = prefix[i - 1]\n        else:\n            a = 0\n        if i + 1 < n:\n            b = suffix[i + 1]\n        else:\n            b = 0\n        if GCD(a, b) > 1:\n            c = c + 1\n    print(c)", "import math\n\ndef jeevi(laddu, rudra, loya, maruti, ninja):\n    if laddu == 0:\n        return maruti[rudra + 1]\n    if rudra == ninja - 1:\n        return loya[laddu - 1]\n    return math.gcd(loya[laddu - 1], maruti[rudra + 1])\n\ndef din(loya, arya, maruti, ninja):\n    loya[0] = arya[0]\n    for i in range(ninja):\n        loya[i] = math.gcd(loya[i - 1], arya[i])\n    maruti[ninja - 1] = arya[ninja - 1]\n    for i in range(ninja - 2, -1, -1):\n        maruti[i] = math.gcd(maruti[i + 1], arya[i])\ntest = int(input())\nfor i in range(test):\n    andhra = int(input())\n    sas = [int(i) for i in input().split()]\n    loya = []\n    maruti = []\n    for i in range(andhra):\n        loya.append(0)\n        maruti.append(0)\n    din(loya, sas, maruti, andhra)\n    kittu = 0\n    for i in range(andhra):\n        if jeevi(i, i, loya, maruti, andhra) > 1:\n            kittu = kittu + 1\n    print(kittu)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = map(int, input().split())\n    a = list(a)\n    s = 0\n    pre = [0] * n\n    suf = [0] * n\n    (pre[0], suf[-1]) = (a[0], a[-1])\n    for i in range(1, n):\n        pre[i] = math.gcd(pre[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        suf[i] = math.gcd(suf[i + 1], a[i])\n    for i in range(1, n - 1):\n        if math.gcd(pre[i - 1], suf[i + 1]) != 1:\n            s += 1\n    if suf[1] != 1:\n        s += 1\n    if pre[n - 2] != 1:\n        s += 1\n    print(s)", "from math import gcd\ng = int(input())\nfor i in range(g):\n    n = int(input())\n    llp = list(map(int, input().split()))\n    pre = [1 for t in range(n)]\n    pre[0] = llp[0]\n    for j in range(1, n):\n        pre[j] = gcd(pre[j - 1], llp[j])\n    suf = [1 for x in range(n)]\n    suf[n - 1] = llp[n - 1]\n    for j in reversed(range(n - 1)):\n        suf[j] = gcd(suf[j + 1], llp[j])\n    a = 0\n    for q in range(n):\n        if q == 0:\n            if suf[1] > 1:\n                a += 1\n        elif q == n - 1:\n            if pre[n - 2] > 1:\n                a += 1\n        elif gcd(suf[q + 1], pre[q - 1]) > 1:\n            a += 1\n    print(a)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))[:n]\n    prefixgcd = [0] * n\n    suffixgcd = [0] * n\n    prefixgcd[0] = ar[0]\n    for i in range(n):\n        prefixgcd[i] = math.gcd(prefixgcd[i - 1], ar[i])\n    suffixgcd[n - 1] = ar[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffixgcd[i] = math.gcd(suffixgcd[i + 1], ar[i])\n    ans = 0\n    for i in range(1, n - 1):\n        if math.gcd(prefixgcd[i - 1], suffixgcd[i + 1]) > 1:\n            ans += 1\n    for i in range(n):\n        if i == 0 and suffixgcd[1] > 1:\n            ans += 1\n        if i == n - 1 and prefixgcd[n - 2] > 1:\n            ans += 1\n    print(ans)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    front = [A[0]]\n    reverse = [A[-1]]\n    count = 0\n    res = gcd(A[0], A[1])\n    for i in range(2, N):\n        front.append(res)\n        res = gcd(res, A[i])\n    res = gcd(A[-1], A[-2])\n    for i in range(N - 3, -1, -1):\n        reverse.append(res)\n        res = gcd(res, A[i])\n    for i in range(N):\n        if i == 0:\n            if reverse[-1] != 1:\n                count += 1\n        elif i == N - 1:\n            if front[-1] != 1:\n                count += 1\n        elif gcd(reverse[N - 2 - i], front[i - 1]) != 1:\n            count += 1\n    print(count)", "import math\n\ndef fpr(pr, ar, su, n):\n    pr[0] = ar[0]\n    for i in range(1, n):\n        pr[i] = math.gcd(pr[i - 1], ar[i])\n    su[n - 1] = ar[n - 1]\n    for i in range(n - 2, -1, -1):\n        su[i] = math.gcd(su[i + 1], ar[i])\n\ndef gor(o, p, pr, su, n):\n    if o == 0:\n        return su[p + 1]\n    if p == n - 1:\n        return pr[o - 1]\n    return math.gcd(pr[o - 1], su[p + 1])\n\ndef sol():\n    n = int(input())\n    ar = list(map(int, input().split()))\n    pr = [0] * n\n    su = [0] * n\n    fpr(pr, ar, su, n)\n    ans = 0\n    for i in range(n):\n        if gor(i, i, pr, su, n) > 1:\n            ans += 1\n    print(ans)\nfor i in range(int(input())):\n    sol()", "from math import gcd\nfrom functools import reduce\n\ndef fgcd(list):\n    x = reduce(gcd, list)\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    l1 = l.copy()\n    pregcd = []\n    sufgcd = []\n    pregcd.append(l[0])\n    for i in range(1, n):\n        ans1 = gcd(pregcd[i - 1], l[i])\n        pregcd.append(ans1)\n    l1.reverse()\n    sufgcd.append(l1[0])\n    for i in range(1, n):\n        ans1 = gcd(sufgcd[i - 1], l1[i])\n        sufgcd.append(ans1)\n    sufgcd.reverse()\n    co = 0\n    for i in range(n):\n        if i == 0 and sufgcd[1] > 1:\n            co = co + 1\n        elif i == n - 1 and pregcd[n - 2] > 1:\n            co = co + 1\n        elif i != 0 and i != n - 1 and (gcd(pregcd[i - 1], sufgcd[i + 1]) > 1):\n            co = co + 1\n        else:\n            pass\n    print(co)", "import math\nz = int(input())\nfor i in range(z):\n    n = int(input())\n    l = list(map(int, input().split()))\n    prefix = [0] * n\n    prefix[0] = l[0]\n    for i in range(1, len(l)):\n        prefix[i] = math.gcd(prefix[i - 1], l[i])\n    suffix = [0] * n\n    suffix[n - 1] = l[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = math.gcd(suffix[i + 1], l[i])\n    count = 0\n    if suffix[1] != 1:\n        count = count + 1\n    if prefix[n - 2] != 1:\n        count += 1\n    for i in range(1, n - 1):\n        if math.gcd(prefix[i - 1], suffix[i + 1]) != 1:\n            count += 1\n    print(count)", "import math\nfrom array import *\n\ndef gcd(x, y):\n    return math.gcd(x, y)\n\ndef fill(pre, suf, lst, n, suf2):\n    pre.append(lst[0])\n    lst2 = []\n    for ele in range(n - 1, -1, -1):\n        lst2.append(lst[ele])\n    suf.append(lst2[0])\n    for i in range(1, n):\n        pre.append(gcd(pre[i - 1], lst[i]))\n    for i in range(1, n):\n        suf.append(gcd(suf[i - 1], lst2[i]))\n    for i in range(n - 1, -1, -1):\n        suf2.append(suf[i])\n\ndef gcdcount(p, r, pre, suf, n):\n    if p == 0:\n        return suf[r + 1]\n    if r == n - 1:\n        return pre[p - 1]\n    return gcd(pre[p - 1], suf[r + 1])\nfor _ in range(int(input())):\n    n = int(input())\n    lst = [int(ele) for ele in input().split(' ')]\n    pre = []\n    suf = []\n    suf2 = []\n    fill(pre, suf, lst, n, suf2)\n    ans = 0\n    for i in range(0, n):\n        if gcdcount(i, i, pre, suf2, n) > 1:\n            ans = ans + 1\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (pref, suff) = ([0 for i in range(n)] for i in range(2))\n    pref[0] = arr[0]\n    suff[-1] = arr[-1]\n    for i in range(1, n):\n        pref[i] = gcd(pref[i - 1], arr[i])\n    for i in range(n - 2, -1, -1):\n        suff[i] = gcd(suff[i + 1], arr[i])\n    strong = 0\n    if suff[1] > 1:\n        strong += 1\n    if pref[n - 2] > 1:\n        strong += 1\n    for i in range(1, n - 1):\n        if gcd(pref[i - 1], suff[i + 1]) > 1:\n            strong += 1\n    print(strong)", "import math\n\ndef first(suffix, preffix, arr, n):\n    preffix[0] = arr[0]\n    for j in range(1, n - 1):\n        preffix[j] = math.gcd(preffix[j - 1], arr[j])\n    suffix[n - 1] = arr[n - 1]\n    for k in range(n - 2, 0, -1):\n        suffix[k] = math.gcd(suffix[k + 1], arr[k])\n\ndef second(l, r, preffix, suffix, n):\n    if l == 0:\n        return suffix[r + 1]\n    if r == n - 1:\n        return preffix[l - 1]\n    return math.gcd(preffix[l - 1], suffix[r + 1])\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (suffix, preffix) = ([None] * n, [None] * n)\n    first(suffix, preffix, arr, n)\n    ans = 0\n    for i in range(n):\n        if second(i, i, preffix, suffix, n) > 1:\n            ans += 1\n    print(ans)", "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\nt = int(input())\nfor _ in range(t):\n    ans = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = GCD(prefix[i - 1], arr[i])\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = GCD(suffix[i + 1], arr[i])\n    for i in range(1, n - 1):\n        if GCD(prefix[i - 1], suffix[i + 1]) > 1:\n            ans += 1\n    if GCD(0, suffix[1]) > 1:\n        ans += 1\n    if GCD(prefix[n - 2], 0) > 1:\n        ans += 1\n    print(ans)", "def GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\nt = int(input())\nfor _ in range(t):\n    ans = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = GCD(prefix[i - 1], arr[i])\n    suffix[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        suffix[i] = GCD(suffix[i + 1], arr[i])\n    for i in range(1, n - 1):\n        if GCD(prefix[i - 1], suffix[i + 1]) > 1:\n            ans += 1\n    if GCD(0, suffix[1]) > 1:\n        ans += 1\n    if GCD(prefix[n - 2], 0) > 1:\n        ans += 1\n    print(ans)", "import math\n\ndef newarray(pre, nums, suff, n):\n    pre[0] = nums[0]\n    for i in range(1, n):\n        pre[i] = math.gcd(pre[i - 1], nums[i])\n    suff[-1] = nums[-1]\n    for i in range(n - 2, -1, -1):\n        suff[i] = math.gcd(suff[i + 1], nums[i])\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().strip().split()))\n    pre = [0] * n\n    suff = [0] * n\n    newarray(pre, nums, suff, n)\n    count = 0\n    for i in range(n):\n        if i == 0 and suff[i + 1] > 1:\n            count += 1\n        elif i == n - 1 and pre[n - 2] > 1:\n            count += 1\n        elif i != n - 1 and math.gcd(pre[i - 1], suff[i + 1]) > 1:\n            count += 1\n    print(count)", "from math import gcd\n\ndef func(k, l, m, o, n):\n    if k == 0:\n        return o[l + 1]\n    if l == n - 1:\n        return m[k - 1]\n    return gcd(m[k - 1], o[l + 1])\n\ndef func2(m, arr, o, n):\n    m[0] = arr[0]\n    for i in range(1, n):\n        m[i] = gcd(m[i - 1], arr[i])\n    o[n - 1] = arr[n - 1]\n    for i in range(n - 2, -1, -1):\n        o[i] = gcd(o[i + 1], arr[i])\nfor i in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    p = [0] * N\n    s = [0] * N\n    d = func2(p, A, s, N)\n    a = 0\n    for i in range(N):\n        if func(i, i, p, s, N) > 1:\n            a = a + 1\n    print(a)", "import math\nT = int(input())\nwhile T:\n    n = int(input())\n    l = list(map(int, input().split()))\n    till = []\n    after = []\n    till.append(l[0])\n    after.append(l[-1])\n    for i in range(1, n):\n        till.append(math.gcd(till[i - 1], l[i]))\n    for i in range(n - 2, -1, -1):\n        after.append(math.gcd(after[n - i - 2], l[i]))\n    after = after[::-1]\n    str = 0\n    for i in range(n):\n        currgcd = 0\n        if i == 0:\n            currgcd = after[1]\n        elif i == n - 1:\n            currgcd = till[n - 2]\n        else:\n            currgcd = math.gcd(till[i - 1], after[i + 1])\n        if currgcd > 1:\n            str += 1\n    print(str)\n    T = T - 1", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix = [1 for k in range(n)]\n    prefix[0] = arr[0]\n    for j in range(1, n):\n        prefix[j] = gcd(prefix[j - 1], arr[j])\n    suffix = [1 for x in range(n)]\n    suffix[n - 1] = arr[n - 1]\n    for j in reversed(range(n - 1)):\n        suffix[j] = gcd(suffix[j + 1], arr[j])\n    x = 0\n    for k in range(n):\n        if k == 0:\n            if suffix[1] > 1:\n                x += 1\n        elif k == n - 1:\n            if prefix[n - 2] > 1:\n                x += 1\n        elif gcd(suffix[k + 1], prefix[k - 1]) > 1:\n            x += 1\n    print(x)", "import math\nrick = int(input())\nfor _ in range(rick):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref = []\n    for i in range(n):\n        pref.append(0)\n    pref[0] = a[0]\n    for i in range(1, n, 1):\n        pref[i] = math.gcd(pref[i - 1], a[i])\n    suff = []\n    for i in range(n):\n        suff.append(0)\n    suff[n - 1] = a[n - 1]\n    for i in range(n - 2, 0, -1):\n        suff[i] = math.gcd(suff[i + 1], a[i])\n    str_ele = 0\n    for j in range(n):\n        if j - 1 >= 0:\n            final = pref[j - 1]\n        else:\n            final = 0\n        if j + 1 < n:\n            lower = suff[j + 1]\n        else:\n            lower = 0\n        if math.gcd(final, lower) > 1:\n            str_ele += 1\n    print(str_ele)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pre = [1 for i in range(n)]\n    pre[0] = a[0]\n    for i in range(1, n):\n        pre[i] = gcd(pre[i - 1], a[i])\n    suf = [1 for i in range(n)]\n    suf[n - 1] = a[n - 1]\n    for i in reversed(range(n - 1)):\n        suf[i] = gcd(suf[i + 1], a[i])\n    ans = 0\n    for i in reversed(range(n)):\n        if i == 0:\n            if suf[1] > 1:\n                ans += 1\n        elif i == n - 1:\n            if pre[n - 2] > 1:\n                ans += 1\n        elif gcd(suf[i + 1], pre[i - 1]) > 1:\n            ans += 1\n    print(ans)"]