["from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(2 * 10 ** 5)\ninp = lambda : list(map(int, input().split()))\n\ndef dfs(p, prev, took):\n    if dp[p][took] != -1:\n        return dp[p][took]\n    if prev:\n        if took == 0:\n            pval = a[prev - 1]\n        elif took == 1:\n            pval = l[prev - 1]\n        elif took == 2:\n            pval = r[prev - 1]\n        else:\n            pval = median[prev - 1]\n    ans = float('inf')\n    v = 0\n    for i in child[p]:\n        if i == prev:\n            continue\n        v += dfs(i, p, 0)\n    if prev:\n        v += abs(a[p - 1] - pval)\n    ans = min(ans, v)\n    if took == 0:\n        (v1, v2) = (0, 0)\n        for i in child[p]:\n            if i == prev:\n                continue\n            v1 += dfs(i, p, 1)\n            v2 += dfs(i, p, 2)\n        if prev:\n            v1 += abs(l[p - 1] - pval)\n        if prev:\n            v2 += abs(r[p - 1] - pval)\n        ans = min(ans, v1, v2)\n        if l[p - 1] <= median[p - 1] and r[p - 1] >= median[p - 1]:\n            v = 0\n            for i in child[p]:\n                if i == prev:\n                    continue\n                v += dfs(i, p, 3)\n            if prev:\n                v += abs(median[p - 1] - pval)\n            ans = min(ans, v)\n    dp[p][took] = ans\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    (l, r, a) = ([], [], [])\n    for i in range(n):\n        (u, v, w) = inp()\n        l.append(u)\n        r.append(w)\n        a.append(v)\n    child = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = inp()\n        child[u].append(v)\n        child[v].append(u)\n    median = []\n    for i in range(1, n + 1):\n        take = []\n        for j in child[i]:\n            take.append(a[j - 1])\n        take.sort()\n        median.append(take[len(take) // 2])\n    dp = [[-1, -1, -1, -1] for i in range(n + 1)]\n    ans = dfs(1, 0, 0)\n    print(ans)", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(2 * 10 ** 5)\ninp = lambda : list(map(int, input().split()))\n\ndef dfs(p, prev, took):\n    if dp[p][took] != -1:\n        return dp[p][took]\n    if prev:\n        if took == 0:\n            pval = a[prev - 1]\n        elif took == 1:\n            pval = l[prev - 1]\n        elif took == 2:\n            pval = r[prev - 1]\n        else:\n            pval = median[prev - 1]\n    ans = float('inf')\n    v = 0\n    for i in child[p]:\n        if i == prev:\n            continue\n        v += dfs(i, p, 0)\n    if prev:\n        v += abs(a[p - 1] - pval)\n    ans = min(ans, v)\n    if took == 0:\n        (v1, v2) = (0, 0)\n        for i in child[p]:\n            if i == prev:\n                continue\n            v1 += dfs(i, p, 1)\n            v2 += dfs(i, p, 2)\n        if prev:\n            v1 += abs(l[p - 1] - pval)\n        if prev:\n            v2 += abs(r[p - 1] - pval)\n        ans = min(ans, v1, v2)\n        if l[p - 1] <= median[p - 1] and r[p - 1] >= median[p - 1]:\n            v = 0\n            for i in child[p]:\n                if i == prev:\n                    continue\n                v += dfs(i, p, 3)\n            if prev:\n                v += abs(median[p - 1] - pval)\n            ans = min(ans, v)\n    dp[p][took] = ans\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    (l, r, a) = ([], [], [])\n    for i in range(n):\n        (u, v, w) = inp()\n        l.append(u)\n        r.append(w)\n        a.append(v)\n    child = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = inp()\n        child[u].append(v)\n        child[v].append(u)\n    median = []\n    for i in range(1, n + 1):\n        take = []\n        for j in child[i]:\n            take.append(a[j - 1])\n        take.sort()\n        median.append(take[len(take) // 2])\n    dp = [[-1, -1, -1, -1] for i in range(n + 1)]\n    ans = dfs(1, 0, 0)\n    print(ans)"]