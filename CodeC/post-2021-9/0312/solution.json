["def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcss(s1, s2):\n    (m, n) = (len(s1), len(s2))\n    (prev, cur) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cur[j] = 1 + prev[j - 1]\n            elif cur[j - 1] > prev[j]:\n                cur[j] = cur[j - 1]\n            else:\n                cur[j] = prev[j]\n        (cur, prev) = (prev, cur)\n    return prev[n]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    b = s[::-1]\n    print(lcss(s, b) // 2)", "def lcss(s1, s2):\n    (m, n) = (len(s1), len(s2))\n    (prev, cur) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cur[j] = 1 + prev[j - 1]\n            elif cur[j - 1] > prev[j]:\n                cur[j] = cur[j - 1]\n            else:\n                cur[j] = prev[j]\n        (cur, prev) = (prev, cur)\n    return prev[n]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    b = s[::-1]\n    print(lcss(s, b) // 2)", "def solve(s, n):\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1] // 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    result = solve(s, n)\n    print(result)", "def solve(s, n):\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1] // 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    result = solve(s, n)\n    print(result)", "def solve(s, n):\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1] // 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    result = solve(s, n)\n    print(result)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(str1, str2):\n    (mad, new) = (len(str1), len(str2))\n    (previous, current) = ([0] * (new + 1), [0] * (new + 1))\n    for i in range(1, mad + 1):\n        for j in range(1, new + 1):\n            if str1[i - 1] == str2[j - 1]:\n                current[j] = 1 + previous[j - 1]\n            elif current[j - 1] > previous[j]:\n                current[j] = current[j - 1]\n            else:\n                current[j] = previous[j]\n        (current, previous) = (previous, current)\n    return previous[new]\nfor i in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = s1[::-1]\n    print(lcs(s1, s2) // 2)", "def lcs(s, r):\n    (n, m) = (len(s), len(r))\n    (prev, curr) = ([0] * (m + 1), [0] * (m + 1))\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if s[i - 1] == r[j - 1]:\n                curr[j] = 1 + prev[j - 1]\n            elif curr[j - 1] > prev[j]:\n                curr[j] = curr[j - 1]\n            else:\n                curr[j] = prev[j]\n        (curr, prev) = (prev, curr)\n    return prev[m]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    r = s[::-1]\n    print(lcs(s, r) // 2)", "def lcs(str1, str2):\n    (mad, new) = (len(str1), len(str2))\n    (previous, current) = ([0] * (new + 1), [0] * (new + 1))\n    for i in range(1, mad + 1):\n        for j in range(1, new + 1):\n            if str1[i - 1] == str2[j - 1]:\n                current[j] = 1 + previous[j - 1]\n            elif current[j - 1] > previous[j]:\n                current[j] = current[j - 1]\n            else:\n                current[j] = previous[j]\n        (current, previous) = (previous, current)\n    return previous[new]\nfor i in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = s1[::-1]\n    print(lcs(s1, s2) // 2)", "def lcs(s1, s2):\n    (m, n) = (len(s1), len(s2))\n    (prev, cur) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cur[j] = 1 + prev[j - 1]\n            elif cur[j - 1] > prev[j]:\n                cur[j] = cur[j - 1]\n            else:\n                cur[j] = prev[j]\n        (cur, prev) = (prev, cur)\n    return prev[n]\nfor i in range(int(input())):\n    c = int(input())\n    b = input()\n    f = b[::-1]\n    g = c\n    print(lcs(b, b[::-1]) // 2)", "def lcs(s1, s2):\n    (m, n) = (len(s1), len(s2))\n    (prev, cur) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cur[j] = 1 + prev[j - 1]\n            elif cur[j - 1] > prev[j]:\n                cur[j] = cur[j - 1]\n            else:\n                cur[j] = prev[j]\n        (cur, prev) = (prev, cur)\n    return prev[n]\nfor i in range(int(input())):\n    c = int(input())\n    b = input()\n    f = b[::-1]\n    g = c\n    print(lcs(b, b[::-1]) // 2)", "def lcs(s1, s2):\n    (m, n) = (len(s1), len(s2))\n    (prev, cur) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cur[j] = 1 + prev[j - 1]\n            elif cur[j - 1] > prev[j]:\n                cur[j] = cur[j - 1]\n            else:\n                cur[j] = prev[j]\n        (cur, prev) = (prev, cur)\n    return prev[n]\na = int(input())\nfor i in range(a):\n    c = int(input())\n    b = input()\n    f = b[::-1]\n    g = c\n    print(lcs(b, b[::-1]) // 2)", "def lcs(X, Y):\n    m = n = len(Y)\n    mx = 0\n    L = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n - i + 2):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n            if i + j == n:\n                mx = max(mx, L[i][j])\n    return mx\nfor _ in range(int(input())):\n    n = int(input())\n    l = input()\n    s = l[::-1]\n    print(lcs(l, s))", "def lcs(X, Y):\n    m = n = len(Y)\n    mx = 0\n    L = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n - i + 2):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n            if i + j == n:\n                mx = max(mx, L[i][j])\n    return mx\nfor _ in range(int(input())):\n    n = int(input())\n    l = input()\n    s = l[::-1]\n    print(lcs(l, s))", "def lcs(X, Y):\n    mx = 0\n    m = len(X)\n    L = [[0] * (m + 1) for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, m - i + 2):\n            if X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n            if i + j == m:\n                mx = max(mx, L[i][j])\n    return mx\nfor _ in range(int(input())):\n    n = int(input())\n    l = input()\n    s = l[::-1]\n    print(lcs(l, s))", "def solve(n, s):\n    s = '!' + s + '!'\n    dp = [[0] * (n + 2) for i in range(n + 2)]\n    for i in range(1, n + 1):\n        for j in reversed(range(i + 1, n + 1)):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j + 1])\n            if s[i] == s[j]:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j + 1] + 1)\n    ans = max([dp[i][i + 1] for i in range(1, n)])\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(solve(n, s))", "def solve(s, s1):\n    mx = 0\n    l = [[0] * (n + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n - i + 2):\n            if s[i - 1] == s1[j - 1]:\n                l[i][j] = 1 + l[i - 1][j - 1]\n            else:\n                l[i][j] = max(l[i - 1][j], l[i][j - 1])\n            if i + j == n:\n                mx = max(mx, l[i][j])\n    print(mx)\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    s1 = ''.join(reversed(s))\n    solve(s, s1)", "t = int(input())\n\ndef solve(n, x):\n    (a, b) = (x, ''.join(reversed(list(x))))\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    mx = 0\n    for i in range(1, n + 1):\n        for j in range(1, n - i + 2):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            if i + j == n:\n                mx = max(mx, dp[i][j])\n    return mx\nfor _ in range(t):\n    n = int(input())\n    x = input()\n    print(solve(n, x))", "t = int(input())\n\ndef solve(n, x):\n    (a, b) = (x, ''.join(reversed(list(x))))\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    mx = 0\n    for i in range(1, n + 1):\n        for j in range(1, n - i + 2):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            if i + j == n:\n                mx = max(mx, dp[i][j])\n    return mx\nfor _ in range(t):\n    n = int(input())\n    x = input()\n    print(solve(n, x))", "def lcs(str1, str2):\n    (mad, new) = (len(str1), len(str2))\n    (previous, current) = ([0] * (new + 1), [0] * (new + 1))\n    for i in range(1, mad + 1):\n        for j in range(1, new + 1):\n            if str1[i - 1] == str2[j - 1]:\n                current[j] = 1 + previous[j - 1]\n            elif current[j - 1] > previous[j]:\n                current[j] = current[j - 1]\n            else:\n                current[j] = previous[j]\n        (current, previous) = (previous, current)\n    return previous[new]\ntry:\n    for i in range(int(input())):\n        n = int(input())\n        s1 = input()\n        s2 = s1[::-1]\n        print(lcs(s1, s2) // 2)\nexcept:\n    pass", "def lps(s):\n    n = len(s)\n    a = [0] * n\n    for i in range(n - 1, -1, -1):\n        back_up = 0\n        for j in range(i, n):\n            if j == i:\n                a[j] = 1\n            elif s[i] == s[j]:\n                temp = a[j]\n                a[j] = back_up + 2\n                back_up = temp\n            else:\n                back_up = a[j]\n                a[j] = max(a[j - 1], a[j])\n    return a[n - 1]\nfor aa in range(int(input())):\n    n = int(input())\n    s = input()\n    d = {}\n    for i in s:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    a = ''\n    for i in s:\n        if d[i] > 1:\n            a += i\n    s = a[:]\n    n = len(s)\n    if n == 0:\n        print(0)\n        continue\n    if n <= 3:\n        print(1)\n        continue\n    k = s[::-1]\n    x = []\n    u = lps(s)\n    print(u // 2)", "from bisect import bisect_left\n\ndef solve():\n    n = int(input())\n    s = input()\n    t1 = s\n    t2 = s[::-1]\n    n2 = len(t2)\n    d2 = dict()\n    for i in range(n2 - 1, -1, -1):\n        c = t2[i]\n        if c not in d2:\n            d2[c] = []\n        d2[c].append(i)\n    s = []\n    for c in t1:\n        if c in d2:\n            for i in d2[c]:\n                j = bisect_left(s, i)\n                if j == len(s):\n                    s.append(i)\n                else:\n                    s[j] = i\n    return len(s) // 2\nt = int(input())\nwhile t:\n    print(solve())\n    t -= 1", "import sys\n\ndef lcs(s1, s2):\n    (m, n) = (len(s1), len(s2))\n    (prev, cur) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cur[j] = 1 + prev[j - 1]\n            elif cur[j - 1] > prev[j]:\n                cur[j] = cur[j - 1]\n            else:\n                cur[j] = prev[j]\n        (cur, prev) = (prev, cur)\n    return prev[n]\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    a = int(input())\n    s = get_string()\n    l1 = s\n    l2 = s[::-1]\n    sys.stdout.write(str(lcs(l1, l2) // 2) + '\\n')", "def lcs(s1, s2):\n    (m, n) = (len(s1), len(s2))\n    (prev, cur) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                cur[j] = 1 + prev[j - 1]\n            elif cur[j - 1] > prev[j]:\n                cur[j] = cur[j - 1]\n            else:\n                cur[j] = prev[j]\n        (cur, prev) = (prev, cur)\n    return prev[n]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    rs = s[::-1]\n    print(lcs(s, rs) // 2)", "def solve(s, n):\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    return dp[0][n - 1] // 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    result = solve(s, n)\n    print(result)", "def LCS(S, n):\n    if S == S[::-1]:\n        return len(S)\n    P = [0] * n\n    for i in range(n - 1, -1, -1):\n        Dp = P[:]\n        Dp[i] = 1\n        for j in range(i + 1, n):\n            if S[i] == S[j]:\n                Dp[j] = 2 + P[j - 1]\n            else:\n                Dp[j] = max(P[j], Dp[j - 1])\n        P = Dp\n    return Dp[n - 1]\nfrom math import gcd\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    S = input()\n    A = LCS(S, n)\n    print(A // 2)", "import collections\nimport math\nimport random\nimport sys\nfrom functools import *\nfrom heapq import *\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nints = lambda : list(map(int, input().split()))\n\ndef solve() -> None:\n    n = int(input())\n    s = input()\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n - 1, -1, -1):\n        dp[i][i] = 1\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n    print(dp[0][n - 1] // 2)\nt = int(input())\nfor _ in range(t):\n    solve()", "for t in range(int(input())):\n\n    def func(s: str):\n        dp = [[0] * len(s) for _ in range(len(s))]\n        for k in range(len(s)):\n            for i in range(len(s) - k):\n                j = k + i\n                if i == j:\n                    dp[i][j] = 1\n                elif s[i] == s[j]:\n                    dp[i][j] = dp[i + 1][j - 1] + 2\n                else:\n                    dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n        return dp[0][-1]\n    N = int(input())\n    S = input()\n    print(func(S) // 2)"]