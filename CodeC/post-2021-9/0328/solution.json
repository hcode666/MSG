["for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if n == 1:\n        print(1)\n    else:\n        c = 0\n        ans = 0\n        ch = 1\n        for i in range(n):\n            if arr[i] <= 2 ** ch - 1:\n                c += 1\n            else:\n                ans += c * (c - 1) // 2\n                c = 1\n                ch += 1\n        if c > 1:\n            ans += c * (c - 1) // 2\n        print(ans)", "def log2(a):\n    k = 0\n    while a // 2:\n        a //= 2\n        k += 1\n    return k\n\ndef s(k):\n    return k * (k - 1) // 2\nfor t in range(int(input())):\n    input()\n    l = list(map(int, input().split()))\n    k = 0\n    d = {}\n    for i in l:\n        a = log2(i)\n        if a in d:\n            d[a] += 1\n        else:\n            d[a] = 1\n    for i in d:\n        k += s(d[i])\n    print(k)", "def log2(a):\n    k = 0\n    while a // 2:\n        a //= 2\n        k += 1\n    return k\n\ndef s(k):\n    return k * (k - 1) // 2\nfor t in range(int(input())):\n    input()\n    l = list(map(int, input().split()))\n    k = 0\n    d = {}\n    for i in l:\n        a = log2(i)\n        if a in d:\n            d[a] += 1\n        else:\n            d[a] = 1\n    for i in d:\n        k += s(d[i])\n    print(k)", "import sys\nfrom math import gcd, sqrt, log2, ceil, floor\ntc = int(input().strip())\nfor t in range(tc):\n    n = int(input().strip())\n    arr = list(map(int, input().split()))\n    count = [0] * 32\n    for i in arr:\n        count[int(log2(i))] += 1\n    ans = 0\n    for i in count:\n        ans += i * (i - 1) // 2\n    print(ans)", "import sys\nfrom math import gcd, sqrt, log2, ceil, floor\ntc = int(input().strip())\nfor t in range(tc):\n    n = int(input().strip())\n    arr = list(map(int, input().split()))\n    count = [0] * 32\n    for i in arr:\n        count[int(log2(i))] += 1\n    ans = 0\n    for i in count:\n        ans += i * (i - 1) // 2\n    print(ans)", "import sys\nfrom math import gcd, sqrt, log2, ceil, floor\ntc = int(input().strip())\nfor t in range(tc):\n    n = int(input().strip())\n    arr = list(map(int, input().split()))\n    count = [0] * 32\n    for x in arr:\n        count[int(log2(x))] += 1\n    ans = 0\n    for x in count:\n        ans += int((x * x - x) / 2)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    mainArray = list(map(int, input().split()))\n    mainArray.sort()\n    flag = 0\n    MSB = -1\n    counter = 1\n    Sum = 0\n    for i in range(N):\n        if MSB != -1:\n            MSB2 = int(math.log2(mainArray[i]))\n            if MSB != MSB2:\n                Sum += int(counter * (counter - 1) / 2)\n                counter = 1\n                MSB = MSB2\n            else:\n                counter += 1\n        else:\n            MSB = int(math.log2(mainArray[i]))\n    if counter > 1:\n        Sum += int(counter * (counter - 1) / 2)\n    print(Sum)", "def soln(n, arr):\n    counts = [0] * 33\n    for i in arr:\n        for j in range(1, 33):\n            if i < 1 << j:\n                counts[j] += 1\n                break\n    calc = lambda x: x * (x + 1) // 2\n    res = 0\n    for count in counts:\n        res += calc(count - 1)\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(soln(n, arr))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = [0] * 32\n    for x in a:\n        count[int(math.log2(x))] += 1\n    ans = 0\n    for x in count:\n        ans += int((x * x - x) / 2)\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in A:\n        z = str(bin(i))\n        d[len(z)] += 1\n    c = 0\n    for i in d:\n        c += d[i] * (d[i] - 1) // 2\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    d = {}\n    for i in arr:\n        p = 1\n        b = 0\n        while i != 0:\n            if i & 1 != 0:\n                b = p\n            p *= 2\n            i >>= 1\n        if d.get(b) is None:\n            d[b] = 1\n        else:\n            d[b] += 1\n    c = 0\n    for i in d:\n        c += d[i] * (d[i] - 1) // 2\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    d = {}\n    for i in arr:\n        p = 1\n        b = 0\n        while i != 0:\n            if i & 1 != 0:\n                b = p\n            p *= 2\n            i >>= 1\n        if d.get(b) is None:\n            d[b] = 1\n        else:\n            d[b] += 1\n    c = 0\n    for i in d:\n        c += d[i] * (d[i] - 1) // 2\n    print(c)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(len(bin(a[i])[2:]))\n    c = Counter(b)\n    res = 0\n    for x in c.values():\n        res += x * (x - 1) // 2\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    a.sort()\n    x = 1\n    c = 0\n    ans = 0\n    i = 0\n    while i != n:\n        if a[i] < 2 * x:\n            c += 1\n        else:\n            x *= 2\n            ans += c * (c - 1) // 2\n            c = 1\n        i += 1\n    print(ans + c * (c - 1) // 2)", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = [0] * 32\n    for i in a:\n        q[int(log2(i))] += 1\n    ans = 0\n    for i in q:\n        if i > 1:\n            ans += (i - 1) * i // 2\n    print(ans)", "from typing import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    ali = list(map(int, input().split()))\n    bli = list()\n    for a in ali:\n        bli.append(len(bin(a)))\n    cnt = Counter(bli)\n    ans = 0\n    for el in cnt.values():\n        ans += el * (el - 1) // 2\n    print(ans)", "from typing import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    ali = list(map(int, input().split()))\n    bli = list()\n    for a in ali:\n        bli.append(len(bin(a)))\n    cnt = Counter(bli)\n    ans = 0\n    for el in cnt.values():\n        ans += el * (el - 1) // 2\n    print(ans)", "from collections import Counter\n\ndef find(num):\n    i = 0\n    while num > 0:\n        num = num >> 1\n        i += 1\n    return i\n\ndef solve(n, arr):\n    res = 0\n    lookup = Counter()\n    for num in arr:\n        msb_set = find(num)\n        res += lookup[msb_set]\n        lookup[msb_set] += 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "mod = 1000000007\nread_int = lambda : int(input().strip())\nread_str = lambda : input().strip()\nread_str_arr = lambda : input().strip().split()\nread_int_arr = lambda : [int(x) for x in input().strip().split()]\nfrom math import floor, log2\n\ndef solve():\n    N = read_int()\n    A = read_int_arr()\n    msb_dict = {}\n    for x in A:\n        msb_pos = floor(log2(x))\n        if msb_pos in msb_dict:\n            msb_dict[msb_pos] += 1\n        else:\n            msb_dict[msb_pos] = 1\n    ans = 0\n    for x in msb_dict.values():\n        ans += x * (x - 1) // 2\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    ans = 0\n    for i in range(n):\n        lg = int(math.log2(arr[i]))\n        try:\n            d[lg] += 1\n        except:\n            d[lg] = 1\n    for (key, value) in d.items():\n        ans += value * (value - 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    check = [0 for _ in range(32)]\n    for _ in range(N):\n        check[A[_].bit_length()] += 1\n    res = int(sum([n * (n - 1) / 2 for n in check]))\n    print(res)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    ans = 0\n    for i in range(n):\n        lg = int(math.log2(arr[i]))\n        try:\n            d[lg] += 1\n        except:\n            d[lg] = 1\n    for (key, value) in d.items():\n        ans += value * (value - 1) // 2\n    print(ans)", "import math\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dic = defaultdict(int)\n    for x in l:\n        log = math.floor(math.log2(x))\n        dic[log] += 1\n    ans = 0\n    for x in dic:\n        s = dic[x]\n        ans += s * (s - 1) // 2\n    print(ans)", "def main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = [int(x) for x in input().split()]\n        counts = [0 for _ in range(32)]\n        for a in A:\n            counts[a.bit_length()] += 1\n        res = sum([n * (n - 1) // 2 for n in counts])\n        print(res)\nmain()", "t = int(input())\nfor i in range(t):\n    a = int(input())\n    b = list(map(int, input().split()))\n    li = [0] * 32\n    ans = 0\n    for j in range(a):\n        g = b[j]\n        cnt = 0\n        while g:\n            g = g >> 1\n            cnt += 1\n        li[cnt] += 1\n    for j in range(32):\n        ans = ans + li[j] * (li[j] - 1) // 2\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    left_ptr = 0\n    ans = 0\n    count = 1\n    right_ptr = left_ptr + 1\n    while right_ptr < n:\n        if arr[left_ptr] ^ arr[right_ptr] < arr[left_ptr] & arr[right_ptr]:\n            ans += count\n            count += 1\n        else:\n            count = 1\n            left_ptr = right_ptr\n        right_ptr += 1\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    for i in a:\n        f = int(math.log2(i)) + 1\n        if f in m.keys():\n            m[f] += 1\n        else:\n            m[f] = 1\n    ans = 0\n    for (key, val) in m.items():\n        ans += val * (val - 1) // 2\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    for i in a:\n        f = int(math.log2(i)) + 1\n        if f in m.keys():\n            m[f] += 1\n        else:\n            m[f] = 1\n    ans = 0\n    for (key, val) in m.items():\n        ans += val * (val - 1) // 2\n    print(ans)", "import math\n\ndef nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    j = [0] * 40\n    for i in l:\n        if i == 1:\n            j[0] = j[0] + 1\n        else:\n            g = math.floor(math.log(i, 2))\n            j[g] = j[g] + 1\n    ans = 0\n    for i in j:\n        if i > 1:\n            ans = ans + int(i * (i - 1) / 2)\n    print(ans)", "import math\n\ndef nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    j = [0] * 40\n    for i in l:\n        if i == 1:\n            j[0] = j[0] + 1\n        else:\n            g = math.floor(math.log(i, 2))\n            j[g] = j[g] + 1\n    ans = 0\n    for i in j:\n        if i > 1:\n            ans = ans + int(i * (i - 1) / 2)\n    print(ans)", "def pairs(arr, size):\n    if size == 1:\n        return 0\n    else:\n        arr.sort()\n        i = 0\n        j = 1\n        count = 0\n        while i < size:\n            check1 = arr[i] ^ arr[j]\n            check2 = arr[i] & arr[j]\n            if check2 > check1:\n                if j + 1 == size:\n                    n = j - i + 1\n                    count += n * (n - 1) / 2\n                    return int(count)\n                else:\n                    j += 1\n            else:\n                n = j - i\n                count += n * (n - 1) / 2\n                if j == size - 1:\n                    return int(count)\n                else:\n                    i = j\n                    j += 1\n        return int(count)\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = int(input())\n    data = list(map(int, input().split()))\n    print(pairs(data, d))\n    test_cases -= 1", "import collections\n\ndef getMSB(A):\n    arr = []\n    for n in A:\n        if n == 0:\n            arr.append(0)\n            continue\n        msb = 0\n        n = n // 2\n        while n > 0:\n            n = n // 2\n            msb += 1\n        arr.append(msb)\n    lookup = collections.Counter(arr)\n    ans = 0\n    for item in lookup:\n        ans += lookup[item] * (lookup[item] - 1) // 2\n    return ans\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        A = list(map(int, input().split(' ')))\n        val = getMSB(A)\n        print(val)\nmain()", "import math\nfrom collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    dic = defaultdict(int)\n    for i in l:\n        dic[math.floor(math.log(i, 2)) + 1] += 1\n    ans = 0\n    for i in dic:\n        ans += dic[i] * (dic[i] - 1) / 2\n    print(int(ans))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = []\n    a = [int(x) for x in input().split()]\n    for i in a:\n        s = len(bin(i)[2:])\n        l.append(s)\n    count = 1\n    l.sort()\n    c = 0\n    for i in range(1, n):\n        if l[i] == l[i - 1]:\n            count += 1\n        else:\n            c = c + count * (count - 1) // 2\n            count = 1\n    c += count * (count - 1) // 2\n    print(c)", "def getmsb(k):\n    msb = 0\n    if k == 0:\n        return msb\n    while k != 0:\n        k = k // 2\n        msb += 1\n    return msb - 1\nfor _ in range(int(input())):\n    n = int(input())\n    msb = {}\n    a = list(map(int, input().split()))\n    for i in range(n):\n        k = getmsb(a[i])\n        msb[k] = msb.get(k, 0) + 1\n    pairs = 0\n    for val in msb.values():\n        if val > 1:\n            pairs += val * (val - 1) // 2\n    print(pairs)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    d = {}\n    for i in arr:\n        p = 1\n        b = 0\n        while i != 0:\n            if i & 1 != 0:\n                b = p\n            p *= 2\n            i >>= 1\n        if d.get(b) is None:\n            d[b] = 1\n        else:\n            d[b] += 1\n    c = 0\n    for i in d:\n        c += d[i] * (d[i] - 1) // 2\n    print(c)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [bin(int(s))[2:] for s in input().split(' ')]\n    bits = [0] * 33\n    for num in a:\n        l = len(num)\n        bits[l] += 1\n    ans = 0\n    for i in range(33):\n        if bits[i]:\n            b = bits[i]\n            val = b * (b - 1) // 2\n            ans += val\n    print(ans)", "for i in range(int(input())):\n    k = dict()\n    final = 0\n    _ = int(input())\n    vals = list(map(int, input().split()))\n    for i in range(len(vals)):\n        vals[i] = len(bin(vals[i])) - 2\n    for j in vals:\n        if j in k:\n            k[j] += 1\n        else:\n            k[j] = 1\n    for l in k.values():\n        final += l * (l - 1) // 2\n    print(final)", "try:\n\n    def getMSB(n):\n        if n == 0:\n            return 0\n        msb = 0\n        n //= 2\n        while n != 0:\n            n //= 2\n            msb += 1\n        return msb\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        msbCount = [0] * 32\n        for i in range(n):\n            msb = getMSB(arr[i])\n            msbCount[msb] += 1\n        pairs = 0\n        for i in range(n):\n            msb = getMSB(arr[i])\n            pairs += max(0, msbCount[msb] - 1)\n        print(pairs // 2)\nexcept:\n    pass", "try:\n\n    def getMSB(n):\n        if n == 0:\n            return 0\n        msb = 0\n        n //= 2\n        while n != 0:\n            n //= 2\n            msb += 1\n        return msb\n    for _ in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        msbCount = [0] * 32\n        for i in range(n):\n            msb = getMSB(arr[i])\n            msbCount[msb] += 1\n        pairs = 0\n        for i in range(n):\n            msb = getMSB(arr[i])\n            pairs += max(0, msbCount[msb] - 1)\n        print(pairs // 2)\nexcept:\n    pass", "for _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    dic = {}\n    for a in A:\n        l = len(bin(a)) - 2\n        dic[l] = dic[l] + 1 if l in dic else 0\n    print(sum((dic[l] * (dic[l] + 1) // 2 for l in dic)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    (memo, tp) = ({}, 1)\n    for i in a:\n        if tp & i < tp * 2 & i:\n            tp *= 2\n        memo[tp] = memo.get(tp, 0) + 1\n    count = 0\n    for v in memo.values():\n        count += v * (v - 1) // 2\n    print(count)", "def size(x):\n    result = 0\n    while x > 0:\n        x //= 2\n        result += 1\n    return result\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = [int(a) for a in input().split()]\n    B = {}\n    for a in A:\n        temp = size(a)\n        if temp in B.keys():\n            B[temp] += 1\n        else:\n            B[temp] = 1\n    count = 0\n    for b in B.values():\n        count += b * (b - 1) // 2\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = 0\n    c = 1\n    x = 1\n    for i in range(n):\n        while a[i] >= x:\n            x *= 2\n            c = 1\n        s += c - 1\n        c += 1\n    print(s)", "def findmsb(n):\n    msb = 0\n    n = n // 2\n    while n != 0:\n        n //= 2\n        msb += 1\n    return msb\n\ndef factorial(n):\n    p = 1\n    for i in range(1, n + 1):\n        p *= i\n    return p\nn = int(input())\nfor i in range(n):\n    k = int(input())\n    l = input().split()\n    msb = [0 for j in range(32)]\n    p = []\n    for j in l:\n        m = findmsb(int(j))\n        p.append(m)\n        msb[m] += 1\n    count = 0\n    for j in p:\n        count += max(msb[j] - 1, 0)\n    print(count // 2)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    for i in a:\n        f = int(math.log2(i)) + 1\n        if f in m.keys():\n            m[f] += 1\n        else:\n            m[f] = 1\n    ans = 0\n    for (key, val) in m.items():\n        ans += val * (val - 1) // 2\n    print(ans)", "from math import *\n\ndef binomial_coefficient(n, r):\n    if n == 1:\n        return 0\n    if r > n - r:\n        r = n - r\n    res = 1\n    for i in range(r):\n        res = res * (n - i)\n        res = res // (i + 1)\n    return res\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = 0\n    mp = {}\n    for i in range(len(arr)):\n        a = int(log(arr[i], 2))\n        try:\n            mp[a]\n            mp[a] += 1\n        except:\n            mp[a] = 1\n    ans = 0\n    for el in mp:\n        ans += binomial_coefficient(mp[el], 2)\n    print(int(ans))", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst1 = [0] * 60\n    cnt = 0\n    for i in lst:\n        x = len(bin(i).replace('0b', '')) - 1\n        lst1[x] = lst1[x] + 1\n    for i in lst1:\n        cnt = cnt + i * (i - 1) // 2\n    print(cnt)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    arr = arr[:N]\n    res = 0\n    bits = [0] * 32\n    for i in range(N):\n        val = int(math.log2(arr[i]))\n        res += bits[val]\n        bits[val] += 1\n    print(res)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    for i in a:\n        f = int(math.log2(i)) + 1\n        if f in m.keys():\n            m[f] += 1\n        else:\n            m[f] = 1\n    ans = 0\n    for (key, val) in m.items():\n        ans += val * (val - 1) // 2\n    print(ans)", "from collections import defaultdict\n\ndef msbPosition(n):\n    i = 0\n    while n > 0:\n        i += 1\n        n >>= 1\n    return i + 1\n\ndef main(arr):\n    d = defaultdict(lambda : 0)\n    for a in arr:\n        d[msbPosition(a)] += 1\n    print(sum((i * (i - 1) // 2 for i in d.values() if i >= 2)))\nfor _ in range(int(input())):\n    n = int(input())\n    arr = map(int, input().split())\n    main(arr)", "def binary(num):\n    count = 0\n    while num:\n        num = num // 2\n        count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = {}\n    for item in b:\n        if binary(item) in a:\n            a[binary(item)] += 1\n        else:\n            a[binary(item)] = 1\n    ans = 0\n    for (key, value) in a.items():\n        if value > 1:\n            ans += value * (value - 1) // 2\n    print(ans)", "def mergesort(list):\n    if len(list) > 1:\n        mid = len(list) // 2\n        l = list[:mid]\n        r = list[mid:]\n        mergesort(l)\n        mergesort(r)\n        (i, j, k) = (0, 0, 0)\n        while i < len(l) and j < len(r):\n            if l[i] <= r[j]:\n                list[k] = l[i]\n                i += 1\n            else:\n                list[k] = r[j]\n                j += 1\n            k += 1\n        while i < len(l):\n            list[k] = l[i]\n            k += 1\n            i += 1\n        while j < len(r):\n            list[k] = r[j]\n            j += 1\n            k += 1\n        return\n\ndef binary(num):\n    count = 0\n    while num:\n        num = num // 2\n        count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    mergesort(b)\n    a = {}\n    for item in b:\n        if binary(item) in a:\n            a[binary(item)] += 1\n        else:\n            a[binary(item)] = 1\n    ans = 0\n    for (key, value) in a.items():\n        if value > 1:\n            ans += value * (value - 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    dic = {}\n    for a in A:\n        l = len(bin(a)) - 2\n        dic[l] = dic[l] + 1 if l in dic else 0\n    print(sum((dic[l] * (dic[l] + 1) // 2 for l in dic)))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in a:\n        d[len(bin(i)) - 2] += 1\n    s = 0\n    for i in d:\n        s += d[i] * (d[i] - 1) // 2\n    print(s)", "import math as mt\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    X = list(map(int, input().split()))\n    dt = {}\n    for i in range(N):\n        if X[i] == 1:\n            if 0 in dt:\n                dt[0] = dt[0] + 1\n            else:\n                dt[0] = 1\n        else:\n            r = mt.log(X[i], 2)\n            r1 = int(r)\n            if r1 in dt:\n                dt[r1] = dt[r1] + 1\n            else:\n                dt[r1] = 1\n    sm = 0\n    for j in dt:\n        if dt[j] > 1:\n            m = dt[j]\n            sm = sm + m * (m - 1) // 2\n    print(sm)", "import numpy, math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    values = list(map(int, input().split(' ')))\n    A = numpy.array(values)\n    A = numpy.sort(A)\n    A = numpy.floor(numpy.log2(A))\n    count = 0\n    subcount = 0\n    start = 0\n    for i in range(N):\n        if A[i] > start:\n            count += subcount * (subcount - 1) // 2\n            subcount = 1\n            start = A[i]\n        else:\n            subcount += 1\n    count += subcount * (subcount - 1) // 2\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = 0\n    c = 1\n    x = 1\n    for i in range(n):\n        while a[i] >= x:\n            x *= 2\n            c = 1\n        s += c - 1\n        c += 1\n    print(s)", "import sys\nimport math\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    arr = [int(i) for i in input().split()]\n    res = 0\n    bit = [0] * 32\n    for i in range(0, n):\n        pos = int(math.log(arr[i], 2))\n        bit[pos] = bit[pos] + 1\n    for i in range(0, 32):\n        res = res + int(bit[i] * (bit[i] - 1) / 2)\n    res = int(n * (n - 1) / 2 - res)\n    print(int(n * (n - 1) / 2 - res))", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = []\n    for i in nums:\n        dp.append(len(bin(i)))\n    res = Counter(dp)\n    ans = 0\n    for value in res.values():\n        ans += value * (value - 1) // 2\n    print(ans)", "import sys\nimport math\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    arr = [int(i) for i in input().split()]\n    res = 0\n    bit = [0] * 32\n    for i in range(0, n):\n        pos = int(math.log(arr[i], 2))\n        bit[pos] = bit[pos] + 1\n    for i in range(0, 32):\n        res = res + int(bit[i] * (bit[i] - 1) / 2)\n    res = int(n * (n - 1) / 2 - res)\n    print(int(n * (n - 1) / 2 - res))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = [0] * 40\n    for x in map(int, input().split()):\n        i = 0\n        while x > 0:\n            x >>= 1\n            i += 1\n        c[i] += 1\n    d = 0\n    for x in c:\n        d += x * (x - 1)\n    print(d >> 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = [0] * 40\n    for x in map(int, input().split()):\n        i = 0\n        while x > 0:\n            x >>= 1\n            i += 1\n        c[i] += 1\n    d = 0\n    for x in c:\n        d += x * (x - 1)\n    print(d >> 1)", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        s = 0\n        while i > 0:\n            s += 1\n            i //= 2\n        if s in d:\n            d[s] += 1\n        else:\n            d[s] = 1\n    ts = 0\n    for i in d:\n        ts += d[i] * (d[i] - 1) // 2\n    print(ts)", "from math import factorial\n\ndef get_msb(i):\n    msb = 0\n    while i:\n        i >>= 1\n        msb += 1\n    return msb\n\ndef comb(n, k):\n    if k > n:\n        return 0\n    return int(factorial(n) / (factorial(k) * factorial(n - k)))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    p = 0\n    for i in a:\n        k = get_msb(i)\n        if k in d:\n            d[k] += 1\n        else:\n            d[k] = 1\n    for (k, v) in d.items():\n        if k:\n            p += comb(v, 2)\n    print(p)", "def getting(n):\n    return bin(n).replace('0b', '')\nt = int(input())\nfor i in range(t):\n    result = {}\n    n = int(input())\n    li = list(map(int, input().split()))\n    for i in li:\n        s = getting(i)\n        le = len(s)\n        for i in range(le):\n            if s[i] == '1':\n                if le - i in result:\n                    result[le - i].append(s)\n                else:\n                    result[le - i] = [s]\n                break\n    count = 0\n    for i in result:\n        a = len(result[i])\n        count += a * (a - 1) // 2\n    print(count)", "for _ in range(int(input())):\n    N = int(input())\n    arr = [int(x) for x in input().split()]\n\n    def getMSB(num):\n        if num == 0:\n            return 0\n        else:\n            msb = 0\n            num = num // 2\n            while num != 0:\n                num = num // 2\n                msb += 1\n            return msb\n    msb_count = {}\n    for i in range(32):\n        msb_count[i] = 0\n    for i in arr:\n        msb_count[getMSB(i)] += 1\n    pairs = 0\n    for i in msb_count:\n        pairs += msb_count[i] * (msb_count[i] - 1) // 2\n    print(pairs)", "from math import log2\np = lambda a: print(a)\niip = lambda : int(input())\nsip = lambda : input()\nmip = lambda : map(int, input().strip().split())\nlip = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nflr = lambda x: int(x)\ntstcs = lambda : range(int(input()))\nfor t in tstcs():\n    n = iip()\n    l = lip()\n    l.sort()\n    l1 = []\n    c = 0\n    m = ceil(log2(l[-1] + 1))\n    for i in l:\n        l1.append(ceil(log2(i + 1)))\n    for j in range(1, m + 1):\n        y = l1.count(j) - 1\n        c = c + int(y * (y + 1) / 2)\n    print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    bit = [0] * 30\n    ans = 0\n    for i in range(n):\n        l = math.log(a[i], 2)\n        ans += bit[int(l)]\n        bit[int(l)] += 1\n    print(ans)", "import itertools\nimport heapq\nimport collections\nimport math\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\n\ndef inis():\n    return input().split()\n\ndef stlt():\n    return list(map(str, input().split()))\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    l = []\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            l.append(p)\n        else:\n            continue\n    return l\n\ndef isPrime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef gcdofarray(a):\n    x = 0\n    for p in a:\n        x = math.gcd(x, p)\n    return x\n\ndef printDivisors(n):\n    i = 1\n    ans = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                ans.append(i)\n            else:\n                ans.append(i)\n                ans.append(n // i)\n        i = i + 1\n    ans.sort()\n    return ans\n\ndef CountDivisors(n):\n    i = 1\n    ans = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                ans.append(i)\n            else:\n                ans.append(i)\n                ans.append(n // i)\n        i = i + 1\n    ans.sort()\n    return len(ans)\n\ndef binaryToDecimal(n):\n    return int(n, 2)\n\ndef countTriplets(a, n):\n    s = set()\n    for i in range(n):\n        s.add(a[i])\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n, 1):\n            xr = a[i] ^ a[j]\n            if xr in s and xr != a[i] and (xr != a[j]):\n                count += 1\n    return int(count // 3)\n\ndef generate_twin_prime(n):\n    a = 0\n    for i in range(1, n + 1):\n        j = i + 2\n        if isPrime(i) and isPrime(j):\n            if 2 ^ (i ^ j) == 0:\n                a += 1\n    return a\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef countOdd(L, R):\n    N = (R - L) // 2\n    if R % 2 != 0 or L % 2 != 0:\n        N += 1\n    return N\n\ndef isPalindrome(s):\n    return s == s[::-1]\n\ndef sufsum(test_list):\n    test_list.reverse()\n    res = [sum(test_list[:i + 1]) for i in range(len(test_list))]\n    return res\n\ndef prsum(lst):\n    return list(itertools.accumulate(lst))\n\ndef badachotabadachota(nums):\n    nums.sort()\n    i = 0\n    j = len(nums) - 1\n    ans = []\n    cc = 0\n    while len(ans) != len(nums):\n        if cc % 2 == 0:\n            ans.append(nums[j])\n            j -= 1\n        else:\n            ans.append(nums[i])\n            i += 1\n        cc += 1\n    return ans\n\ndef primeFactors(n):\n    ans = []\n    while n % 2 == 0:\n        ans.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            ans.append(i)\n            n = n / i\n    if n > 2:\n        ans.append(n)\n    return ans\n\ndef closestMultiple(n, x):\n    if x > n:\n        return x\n    z = int(x / 2)\n    n = n + z\n    n = n - n % x\n    return n\n\ndef can_form_palindrome(arr, n):\n    MAX = 256\n    s = ''\n    for i in range(n):\n        s = s + str(arr[i])\n    freq = [0] * MAX\n    for i in range(n):\n        freq[arr[i]] = freq[arr[i]] + 1\n    count = 0\n    for i in range(MAX):\n        if freq[i] & 1:\n            count = count + 1\n        if count > 1:\n            return False\n    return True\n\ndef getPairsCount(arr, n, sum):\n    m = [0] * 1000\n    for i in range(0, n):\n        m[arr[i]] += 1\n    twice_count = 0\n    for i in range(0, n):\n        twice_count += m[int(sum - arr[i])]\n        if int(sum - arr[i]) == arr[i]:\n            twice_count -= 1\n    return int(twice_count / 2)\n\ndef remove_consec_duplicates(test_list):\n    res = [i[0] for i in itertools.groupby(test_list)]\n    return res\n\ndef BigPower(a, b, mod):\n    if b == 0:\n        return 1\n    ans = BigPower(a, b // 2, mod)\n    ans *= ans\n    ans %= mod\n    if b % 2:\n        ans *= a\n    return ans % mod\n\nclass Graph:\n\n    def __init__(self, edges, n):\n        self.adjList = [[] for _ in range(n)]\n        for (src, dest) in edges:\n            self.adjList[src].append(dest)\n            self.adjList[dest].append(src)\n\ndef BFS(graph, v, discovered):\n    q = collections.deque()\n    discovered[v] = True\n    q.append(v)\n    ans = []\n    while q:\n        v = q.popleft()\n        ans.append(v)\n        for u in graph.adjList[v]:\n            if not discovered[u]:\n                discovered[u] = True\n                q.append(u)\n        return ans\nalphabets = list('abcdefghijklmnopqrstuvwxyz')\nfor _ in range(inp()):\n    n = inp()\n    a = inlt()\n    a.sort()\n    b = [bin(i).replace('0b', '') for i in a]\n    ans = 0\n    i = 0\n    d = {}\n    while i < n:\n        if len(b[i]) in d:\n            d[len(b[i])] += 1\n        else:\n            d[len(b[i])] = 1\n        i += 1\n    for i in d:\n        t = d[i]\n        ans += t * (t - 1) // 2\n    print(ans)", "mod = 1000000007\nfrom sys import stdin, stdout\ninput = stdin.readline\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        li[i] = len(bin(li[i])[2:])\n    dic = Counter(li)\n    for ele in dic.values():\n        ans += ele * (ele - 1) // 2\n    print(ans)", "mod = 1000000007\nfrom sys import stdin, stdout\ninput = stdin.readline\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        li[i] = len(bin(li[i])[2:])\n    dic = Counter(li)\n    for ele in dic.values():\n        ans += ele * (ele - 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = []\n    x = '1'\n    t = 0\n    for i in range(len(l1)):\n        if l1[i] == 1:\n            t += 1\n    while int(x, 2) <= max(l1):\n        l2.append(int(x, 2))\n        x += '1'\n    total = 0\n    for i in range(1, len(l2)):\n        count = 0\n        for j in range(len(l1)):\n            if l2[i - 1] < l1[j] <= l2[i]:\n                count += 1\n        total += count * (count - 1) // 2\n    count = 0\n    for j in range(len(l1)):\n        if l1[j] > l2[len(l2) - 1]:\n            count += 1\n    total += count * (count - 1) // 2\n    print(total + t * (t - 1) // 2)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mp = {w: 0 for w in range(1, 32 + 1)}\n    for x in a:\n        mp[len('{0:b}'.format(x))] += 1\n    uwu = 0\n    for (_, v) in mp.items():\n        uwu += v * (v - 1) // 2\n    print(uwu)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    visited = [False] * n\n    for b in range(32, -1, -1):\n        c = 0\n        for i in range(n):\n            if visited[i]:\n                continue\n            if a[i] >> b & 1:\n                visited[i] = True\n                c += 1\n        ans += c * (c - 1) >> 1\n    print(ans)", "ints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nm = 10 ** 9 + 7\ninp = lambda : int(input())\nfor _ in range(inp()):\n    n = inp()\n    arr = ints()\n    count = 0\n    d = {}\n    for x in arr:\n        bn = bin(x)[2:]\n        bin_length = len(bn)\n        bn = (30 - bin_length) * '0' + bn\n        first_occur = bn.index('1')\n        if bn.index('1') in d:\n            d[first_occur] += 1\n            count += d[first_occur]\n        else:\n            d[first_occur] = 0\n    print(count)", "ints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nm = 10 ** 9 + 7\ninp = lambda : int(input())\n\ndef custom_call(arr, n, i):\n    ct = 0\n    for j in range(i + 1, n):\n        (x, y) = (arr[i], arr[j])\n        if x ^ y < x & y:\n            ct += 1\n    return ct\nfor _ in range(inp()):\n    n = inp()\n    arr = ints()\n    s = set(arr)\n    mn = min(arr)\n    mx = max(arr)\n    count = 0\n    d = {}\n    for (i, x) in enumerate(arr):\n        bn = bin(x)[2:]\n        bin_length = len(bn)\n        bn = (30 - bin_length) * '0' + bn\n        first_occur = bn.index('1')\n        if bn.index('1') in d:\n            d[first_occur] += 1\n            count += d[first_occur] - 1\n        else:\n            d[first_occur] = 1\n    print(count)", "def get_msb(n):\n    num = bin(n)[2:]\n    for i in range(len(num)):\n        if num[i] == '1':\n            return len(num) - i\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    pos = [get_msb(arr[i]) for i in range(n)]\n    bits = [0 for i in range(32)]\n    for i in range(n):\n        bits[pos[i] - 1] += 1\n    count = 0\n    for i in range(32):\n        if bits[i] >= 2:\n            count += bits[i] * (bits[i] - 1) // 2\n    print(count)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    pos = []\n    for i in l:\n        p = bin(i)\n        q = str(p)\n        r = len(q) - 2\n        pos.append(r)\n    m = Counter(pos)\n    ans = 0\n    for i in set(pos):\n        p = m[i]\n        q = (p - 1) * p / 2\n        ans += q\n    print(int(ans))", "def getmsb(n):\n    msb = 0\n    n = n // 2\n    while n != 0:\n        n //= 2\n        msb += 1\n    return msb\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    msbc = [0 for i in range(0, 32 + 1)]\n    for i in arr:\n        msb = getmsb(i)\n        msbc[msb] += 1\n    pairs = 0\n    for i in arr:\n        ms = getmsb(i)\n        pairs += max(0, msbc[ms] - 1)\n    print(pairs // 2)", "from math import ceil, gcd, factorial, sqrt, log, log2\nimport queue\nfrom itertools import permutations, combinations, accumulate, product\nfrom collections import Counter, deque\nfrom sys import stdin, stdout\nfrom bisect import bisect, insort, bisect_left, insort_left\ninput = stdin.readline\n\ndef sieve(n):\n    prime = [True] * (n + 1)\n    p = 2\n    prime[0] = False\n    prime[1] = False\n    for p in range(2, int(n ** 0.5) + 1):\n        if prime[p] == True:\n            for l1 in range(p * p, n + 1, p):\n                prime[l1] = False\n    return prime\n\ndef simplesieve(n):\n    prime = [2]\n    mak = [False] * (n + 1)\n    for p in range(3, n + 1, 2):\n        if mak[p] == False:\n            prime.append(p)\n            if p * p <= n:\n                for l1 in range(p * p, n + 1, 2 * p):\n                    mak[l1] = True\n    return prime\n\ndef segementedsieve(low, high):\n    primes = simplesieve(int(high ** 0.5))\n    prime = [True] * (high - low + 1)\n    for i in primes:\n        lower = low // i * i\n        if lower < low:\n            lower += i\n        for j in range(lower, high + 1, i):\n            if j != i:\n                prime[j - low] = False\n    ans = []\n    for i in range(low, high + 1):\n        if prime[i - low]:\n            ans.append(i)\n    return ans\n\ndef isprime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for l1 in range(3, int(n ** 0.5) + 1, 2):\n        if n % l1 == 0:\n            return False\n    return True\n\ndef binpow(a, b, m):\n    r2 = 1\n    a = a % m\n    while b > 0:\n        if b & 1:\n            r2 = r2 * a % m\n        a = a * a % m\n        b >>= 1\n    return r2\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\n\ndef gcdExtended(a, b):\n    if b == 0:\n        return (a, 1, 0)\n    (g, x1, y1) = gcdExtended(b, a % b)\n    (x1, y1) = (y1, x1 - a // b * y1)\n    return (g, x1, y1)\n\ndef binseach(a, l, r, key):\n    while r - l > 1:\n        m = l + (r - l) // 2\n        if a[m] <= key:\n            l = m\n        else:\n            r = m\n    if a[l] == key:\n        return l\n    if a[r] == key:\n        return r\n    return -1\n\nclass Node:\n\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\ndef inorder(root):\n    (res, stack) = ([], [])\n    current = root\n    while True:\n        while current:\n            stack.append(current)\n            current = current.left\n        if len(stack) == 0:\n            return res\n        node = stack[-1]\n        stack.pop(len(stack) - 1)\n        if node.data != None:\n            res.append(node.data)\n        current = node.right\n    return res\n\ndef dfs(graph, s, v, ans):\n    v[s] = 1\n    ans.append(s)\n    for i in graph[s]:\n        if v[i] == 0:\n            dfs(graph, i, v, ans)\n\ndef bfs(graph, n, x, dest):\n    v = [0] * (1 + n)\n    d = [0] * (1 + n)\n    d[x] = 0\n    v[x] = 1\n    q = queue.Queue()\n    q.put(x)\n    while not q.empty():\n        z = q.get()\n        for s in graph[z]:\n            if v[s] == 0:\n                v[s] = 1\n                d[s] = d[z] + 1\n                q.put(s)\n    return d[dest]\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    v = [0] * n\n    ans = 0\n    for i in range(32, -1, -1):\n        c = 0\n        for j in range(n):\n            if v[j] == 0 and a[j] & 1 << i:\n                v[j] = 1\n                c += 1\n        ans += c * (c - 1) // 2\n    print(ans)", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freq = {}\n    for x in arr:\n        if x not in freq:\n            freq[x] = 0\n        freq[x] += 1\n    sig = [0] * 31\n    for (k, v) in freq.items():\n        b = bin(k)\n        s = len(b) - 2\n        sig[s] += v\n    ans = 0\n    for i in sig:\n        ans += i * (i - 1) // 2\n    return ans\nfor _ in range(int(input())):\n    print(main())", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = []\n    for i in arr:\n        brr.append(len(bin(i)[2:]))\n    c = Counter(brr)\n    s = 0\n    for a in list(c.values()):\n        s += a * (a - 1) // 2\n    print(s)", "import math\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    base = defaultdict(int)\n    for k in A:\n        base[int(math.floor(math.log2(k))) + 1] += 1\n    count = 0\n    for v in base.values():\n        if v > 1:\n            count += (v - 1) * v // 2\n    print(count)", "import math\ntw = lambda n: n * (n - 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {}\n    ans = 0\n    for x in a:\n        k = int(math.log2(x))\n        if k in p:\n            p[k] += 1\n        else:\n            p[k] = 1\n    for x in p:\n        ans += tw(p[x])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().strip().split(' ')))\n    d = {}\n    c = 0\n    for i in l:\n        msb = 0\n        while i != 0:\n            i = i // 2\n            msb = msb + 1\n        if msb in d.keys():\n            c = c + d[msb]\n            d[msb] = d[msb] + 1\n        else:\n            d[msb] = 1\n    print(c)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    c = 0\n    M = {}\n    for i in range(n):\n        f = math.log2(A[i]) // 1\n        if f in M:\n            M[f] += 1\n        else:\n            M[f] = 1\n    for i in M.values():\n        if i != 1:\n            c += i * (i - 1) // 2\n    print(c)\n    t -= 1", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    c = 0\n    M = {}\n    for i in range(n):\n        f = math.log2(A[i]) // 1\n        if f in M:\n            M[f] += 1\n        else:\n            M[f] = 1\n    for i in M.values():\n        if i != 1:\n            c += i * (i - 1) // 2\n    print(c)\n    t -= 1", "for T in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    count1 = 0\n    i = 0\n    while i < n:\n        a = 1\n        for j in range(i + 1, n):\n            if len(format(l[i], 'b')) == len(format(l[j], 'b')):\n                a += 1\n            else:\n                break\n        i += a\n        count1 += a * (a - 1) // 2\n    print(count1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if math.log2(i) // 1 in d:\n            d[math.log2(i) // 1] += 1\n        else:\n            d[math.log2(i) // 1] = 1\n    f = 0\n    for i in d:\n        f += d[i] * (d[i] - 1) // 2\n    print(f)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if math.log2(i) // 1 in d:\n            d[math.log2(i) // 1] += 1\n        else:\n            d[math.log2(i) // 1] = 1\n    f = 0\n    for i in d:\n        f += d[i] * (d[i] - 1) // 2\n    print(f)", "import sys\nnmbr = lambda : int(input())\nlst = lambda : list(map(int, input().split()))\nfor _ in range(nmbr()):\n    n = nmbr()\n    a = lst()\n    msb = [0] * 35\n    for v in a:\n        for bp in range(33, -1, -1):\n            if v >> bp & 1:\n                msb[bp] += 1\n                break\n    ans = 0\n    for v in msb:\n        ans += v * (v - 1) // 2\n    print(ans)", "def findmsb(p):\n    msb = 0\n    while p != 0:\n        p //= 2\n        msb += 1\n    return msb\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    msb = [0] * 33\n    for i in lis:\n        tem = findmsb(i)\n        msb[tem] += 1\n    pair = 0\n    for i in msb:\n        if i > 0:\n            new = i * (i - 1) // 2\n            pair = pair + new\n    print(pair)", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    l = [len(bin(int(i)).split('b')[-1]) for i in input().split()]\n    k = 0\n    r = 1\n    l = sorted(l)\n    for i in range(1, n):\n        if l[i] == l[i - 1]:\n            k += r\n            r += 1\n        else:\n            r = 1\n    print(k)", "import sys\nfrom math import sqrt, gcd, factorial, ceil, floor\nfrom collections import deque, Counter, OrderedDict\nfrom heapq import heapify, heappush, heappop\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    a = L()\n    d = [0] * 32\n    ans = 0\n    for i in a:\n        ans += d[len(bin(i)) - 2]\n        d[len(bin(i)) - 2] += 1\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfrom math import log, floor\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num = max(a)\n    sm = bin(num).replace('0b', '')\n    ml = len(sm)\n    b = [0] * ml\n    for i in range(n):\n        s = bin(a[i]).replace('0b', '')\n        s = '0' * (ml - len(s)) + s\n        for j in range(ml):\n            if s[j] == '1':\n                b[j] += 1\n                break\n    ans = 0\n    for i in range(ml):\n        ans += b[i] * (b[i] - 1) // 2\n    print(ans)", "import math\nimport bisect\npower = [0 for i in range(34)]\nans = 1\nfor i in range(34):\n    power[i] = ans - 1\n    ans *= 2\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [[0 for i in range(n + 1)] for j in range(34)]\n    bisectele = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        temp = bisect.bisect_left(power, l[i])\n        bisectele[i] = temp\n        dp[temp][i] += 1\n    for i in range(33):\n        for j in range(n - 1, -1, -1):\n            dp[i][j] += dp[i][j + 1]\n    ans = 0\n    for i in range(32):\n        temp = dp[i][0]\n        ans += temp * (temp - 1) // 2\n    print(ans)", "import math\nimport bisect\npower = [0 for i in range(34)]\nans = 1\nfor i in range(34):\n    power[i] = ans - 1\n    ans *= 2\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [[0 for i in range(n + 1)] for j in range(34)]\n    bisectele = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        temp = bisect.bisect_left(power, l[i])\n        bisectele[i] = temp\n        dp[temp][i] += 1\n    for i in range(33):\n        for j in range(n - 1, -1, -1):\n            dp[i][j] += dp[i][j + 1]\n    ans = 0\n    for i in range(32):\n        temp = dp[i][0]\n        ans += temp * (temp - 1) // 2\n    print(ans)"]