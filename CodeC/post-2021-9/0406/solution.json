["def count(s):\n    ones1 = 0\n    for ele in s:\n        if ele == '1':\n            ones1 += 1\n    return ones1\nt = int(input())\nwhile t > 0:\n    sizes = input().split(' ')\n    n = int(sizes[0])\n    m = int(sizes[1])\n    arr = [0] * n\n    for i in range(0, n):\n        st = input()\n        arr[i] = st\n    marr = []\n    for item in arr:\n        cnt = count(item)\n        marr.append((cnt, item))\n    marr.sort()\n    res = ''\n    for item in marr:\n        res += item[1]\n    tsize = n * m\n    onecnt = 0\n    inv = 0\n    for i in range(0, tsize):\n        if res[i] == '1':\n            onecnt += 1\n            continue\n        else:\n            inv += onecnt\n    print(inv)\n    t -= 1", "def count(s):\n    ones1 = 0\n    for ele in s:\n        if ele == '1':\n            ones1 += 1\n    return ones1\nt = int(input())\nwhile t > 0:\n    sizes = input().split(' ')\n    n = int(sizes[0])\n    m = int(sizes[1])\n    arr = [0] * n\n    for i in range(0, n):\n        st = input()\n        arr[i] = st\n    marr = []\n    for item in arr:\n        cnt = count(item)\n        marr.append((cnt, item))\n    marr.sort()\n    res = ''\n    for item in marr:\n        res += item[1]\n    tsize = n * m\n    onecnt = 0\n    inv = 0\n    for i in range(0, tsize):\n        if res[i] == '1':\n            onecnt += 1\n            continue\n        else:\n            inv += onecnt\n    print(inv)\n    t -= 1", "from sys import stdin\nt = int(stdin.readline().rstrip())\nwhile t > 0:\n    (n, m) = map(int, stdin.readline().rstrip().split(' '))\n    nums = []\n    for i in range(n):\n        s = stdin.readline().strip()\n        nums.append(s)\n    nums.sort(key=lambda i: i.count('1'))\n    nums = ''.join(nums)\n    ones = 0\n    inversions = 0\n    for i in nums:\n        if i == '1':\n            ones += 1\n        else:\n            inversions += ones\n    print(inversions)\n    t -= 1", "from sys import stdin\nt = int(stdin.readline().rstrip())\nwhile t > 0:\n    (n, m) = map(int, stdin.readline().rstrip().split(' '))\n    nums = []\n    for i in range(n):\n        s = stdin.readline().strip()\n        nums.append(s)\n    nums.sort(key=lambda i: i.count('1'))\n    nums = ''.join(nums)\n    ones = 0\n    inversions = 0\n    for i in nums:\n        if i == '1':\n            ones += 1\n        else:\n            inversions += ones\n    print(inversions)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    strings = []\n    for _ in range(n):\n        strings.append(input())\n    strings = sorted(strings, key=lambda x: x.count('1'))\n    string = ''.join(strings)[::-1]\n    inversions = 0\n    zero_count = 0\n    for item in string:\n        if item == '0':\n            zero_count += 1\n        else:\n            inversions += zero_count\n    print(inversions)", "from collections import Counter\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    S = []\n    for i in range(N):\n        T = []\n        t = input()\n        C = dict(Counter(t))\n        T.append(t)\n        if '1' in C:\n            T.append(C['1'])\n        else:\n            T.append(0)\n        S.append(T)\n    S.sort(key=lambda x: x[1])\n    A = ''\n    for i in S:\n        A += i[0]\n    ans = 0\n    C = dict(Counter(A))\n    Z = 0\n    if '0' in C:\n        Z += C['0']\n    for i in range(len(A)):\n        if A[i] == '1':\n            ans += Z\n        else:\n            Z -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = (int(i) for i in input().split())\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(s)\n    a.sort(key=lambda i: i.count('1'))\n    one = 0\n    ans = 0\n    for i in ''.join(a):\n        if i == '1':\n            one += 1\n        else:\n            ans += one\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = (int(i) for i in input().split())\n    a = []\n    for i in range(n):\n        s = input()\n        a.append(s)\n    a.sort(key=lambda i: i.count('1'))\n    one = 0\n    ans = 0\n    for i in ''.join(a):\n        if i == '1':\n            one += 1\n        else:\n            ans += one\n    print(ans)", "def ff(x):\n    su = 0\n    z = 0\n    for i in reversed(range(len(x))):\n        if x[i] == '0':\n            z += 1\n        else:\n            su += z\n    return (len(x) - z, su)\nt = int(input())\nwhile t:\n    t -= 1\n    a = list(map(int, input().split()))\n    ti = 0\n    one = []\n    for i in range(a[0]):\n        x = input()\n        (on, inv) = ff(x)\n        ti += inv\n        one.append(on)\n    one.sort()\n    su = 0\n    for i in reversed(range(len(one))):\n        su += one[i]\n    for i in range(len(one)):\n        ti += one[i] * ((len(one) - i - 1) * a[1] - (su - one[i]))\n        su -= one[i]\n    print(ti)", "def ff(x):\n    su = 0\n    z = 0\n    for i in reversed(range(len(x))):\n        if x[i] == '0':\n            z += 1\n        else:\n            su += z\n    return (len(x) - z, su)\nt = int(input())\nwhile t:\n    t -= 1\n    a = list(map(int, input().split()))\n    ti = 0\n    one = []\n    for i in range(a[0]):\n        x = input()\n        (on, inv) = ff(x)\n        ti += inv\n        one.append(on)\n    one.sort()\n    su = 0\n    for i in reversed(range(len(one))):\n        su += one[i]\n    for i in range(len(one)):\n        ti += one[i] * ((len(one) - i - 1) * a[1] - (su - one[i]))\n        su -= one[i]\n    print(ti)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    list1 = [input() for x in range(n)]\n    list1.sort(key=lambda a: a.count('1'))\n    ans = ones = 0\n    for i in ''.join(list1):\n        if i == '1':\n            ones += 1\n        else:\n            ans += ones\n    print(ans)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    arr = ['' for i in range(n)]\n    for i in range(n):\n        arr[i] = input()\n    arr.sort(key=lambda x: x.count('1'))\n    st = ''.join(arr)\n    cnt_z = 0\n    cnt_o = 0\n    for i in range(len(st) - 1, -1, -1):\n        if st[i] == '0':\n            cnt_z += 1\n        else:\n            cnt_o += cnt_z\n    print(cnt_o)\n    t -= 1", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    l = []\n    for j in range(n):\n        s = str(input())\n        (c0, c1) = (0, 0)\n        for k in range(m):\n            if s[m - 1 - k] == '1':\n                c += c0\n                c1 += 1\n            else:\n                c0 += 1\n        l.append(c0)\n    l.sort(reverse=True)\n    ss = sum(l)\n    for j in range(n):\n        c += (m - l[j]) * (ss - l[j])\n        ss -= l[j]\n    print(c)", "def minInversion(string, m):\n    string.sort(key=lambda x: x.count('1'))\n    res = ''.join(string)\n    zeroCounter = 0\n    ans = 0\n    for x in reversed(res):\n        if x == '0':\n            zeroCounter += 1\n        else:\n            ans += zeroCounter\n    return ans\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    string = [input().strip() for i in range(n)]\n    print(minInversion(string, m))", "def minInversion(string, m):\n    string.sort(key=lambda x: x.count('1'))\n    res = ''.join(string)\n    zeroCounter = 0\n    ans = 0\n    for x in reversed(res):\n        if x == '0':\n            zeroCounter += 1\n        else:\n            ans += zeroCounter\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    string = []\n    for i in range(n):\n        string.append(input().strip())\n    print(minInversion(string, m))", "def solve(N, M, A):\n    A.sort(key=lambda x: x.count('1'))\n    a = ''.join(A)\n    ans = 0\n    zero = 0\n    for x in reversed(a):\n        if x == '0':\n            zero += 1\n        else:\n            ans += zero\n    return ans\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = []\n    for _ in range(N):\n        A.append(input().strip())\n    print(solve(N, M, A))", "def numberOfInversions(s: str, l: int) -> int:\n    ans = 0\n    num_ones = 0\n    for i in range(l):\n        if s[i] == '1':\n            num_ones += 1\n        else:\n            ans += num_ones\n    return ans\nt = int(input().strip())\nresult = []\nfor _ in range(t):\n    (n, m) = list(map(int, input().rstrip().split()))\n    arr = [input().strip() for i in range(n)]\n    arr.sort(key=lambda s: s.count('1'))\n    ans_str = ''.join(arr)\n    result.append(numberOfInversions(ans_str, n * m))\nfor r in result:\n    print(r)", "def sortkey(a):\n    return a[1]\n\ndef inversion(string):\n    left1s = 0\n    count = 0\n    for ele in string:\n        if ele == '1':\n            left1s += 1\n        else:\n            count += left1s\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = []\n    while n != 0:\n        s = input()\n        count = 0\n        for ele in s:\n            if ele == '0':\n                count += 1\n        a.append([s, count])\n        n -= 1\n    a.sort(key=sortkey, reverse=True)\n    string = ''\n    for val in a:\n        string += val[0]\n    res = inversion(string)\n    print(res)", "def mergeSort(arr, n):\n    temp_arr = [0] * n\n    return _mergeSort(arr, temp_arr, 0, n - 1)\n\ndef _mergeSort(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += _mergeSort(arr, temp_arr, left, mid)\n        inv_count += _mergeSort(arr, temp_arr, mid + 1, right)\n        inv_count += merge(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef merge(arr, temp_arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += mid - i + 1\n            k += 1\n            j += 1\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        k += 1\n        i += 1\n    while j <= right:\n        temp_arr[k] = arr[j]\n        k += 1\n        j += 1\n    for loop_var in range(left, right + 1):\n        arr[loop_var] = temp_arr[loop_var]\n    return inv_count\nt = int(input())\nwhile t > 0:\n    nm = list(map(int, input().strip().split()))\n    (n, m) = (nm[0], nm[1])\n    li = []\n    while n > 0:\n        s = input()\n        li.append(s)\n        n -= 1\n    li1 = sorted(li, key=lambda x: x.count('1'))\n    li2 = []\n    for i in li1:\n        j = list(i)\n        li2.extend(j)\n    li3 = list(map(int, li2))\n    ans = mergeSort(li3, len(li3))\n    print(ans)\n    t -= 1", "def mergeSort(arr, n):\n    temp_arr = [0] * n\n    return _mergeSort(arr, temp_arr, 0, n - 1)\n\ndef _mergeSort(arr, temp_arr, left, right):\n    inv_count = 0\n    if left < right:\n        mid = (left + right) // 2\n        inv_count += _mergeSort(arr, temp_arr, left, mid)\n        inv_count += _mergeSort(arr, temp_arr, mid + 1, right)\n        inv_count += merge(arr, temp_arr, left, mid, right)\n    return inv_count\n\ndef merge(arr, temp_arr, left, mid, right):\n    i = left\n    j = mid + 1\n    k = left\n    inv_count = 0\n    while i <= mid and j <= right:\n        if arr[i] <= arr[j]:\n            temp_arr[k] = arr[i]\n            k += 1\n            i += 1\n        else:\n            temp_arr[k] = arr[j]\n            inv_count += mid - i + 1\n            k += 1\n            j += 1\n    while i <= mid:\n        temp_arr[k] = arr[i]\n        k += 1\n        i += 1\n    while j <= right:\n        temp_arr[k] = arr[j]\n        k += 1\n        j += 1\n    for loop_var in range(left, right + 1):\n        arr[loop_var] = temp_arr[loop_var]\n    return inv_count\nt = int(input())\nwhile t > 0:\n    nm = list(map(int, input().strip().split()))\n    (n, m) = (nm[0], nm[1])\n    li = []\n    while n > 0:\n        s = input()\n        li.append(s)\n        n -= 1\n    li1 = sorted(li, key=lambda x: x.count('1'))\n    li2 = []\n    for i in li1:\n        j = list(i)\n        li2.extend(j)\n    li3 = list(map(int, li2))\n    ans = mergeSort(li3, len(li3))\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    inver = ones = 0\n    for i in ''.join(a):\n        if i == '1':\n            ones += 1\n        if i == '0':\n            inver += ones\n    print(inver)", "def king_coding():\n    (n, m) = map(int, input().split())\n    L = []\n    for i in range(n):\n        L.append(input())\n    L.sort(key=lambda b: b.count('1'))\n    (c, s) = (0, 0)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if L[n - i][m - j] == '0':\n                c += 1\n            else:\n                s += c\n    print(s)\nfor _ in range(int(input())):\n    king_coding()", "def king_coding():\n    (n, m) = map(int, input().split())\n    L = []\n    for i in range(n):\n        L.append(input())\n    L.sort(key=lambda b: b.count('1'))\n    (c, s) = (0, 0)\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if L[n - i][m - j] == '0':\n                c += 1\n            else:\n                s += c\n    print(s)\nfor _ in range(int(input())):\n    king_coding()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda s: s.count('1'))\n    new_s = ''.join(a)\n    ones = inv = 0\n    for i in new_s:\n        if i == '1':\n            ones += 1\n        else:\n            inv += ones\n    print(inv)", "def inver(st):\n    cnt_one = 0\n    ans = 0\n    for ch in st:\n        if ch == '1':\n            cnt_one += 1\n        else:\n            ans += cnt_one\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [input() for _ in range(n)]\n    l.sort(key=lambda s: s.count('1'))\n    bigstr = ''.join(l)\n    print(inver(bigstr))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    ones = invs = 0\n    for i in ''.join(a):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)", "import sys\ninput = sys.stdin.readline\nfrom functools import lru_cache\n\n@lru_cache(None)\ndef GetNumInversions(string):\n    num_ones_to_the_left = [0]\n    for x in string[:-1]:\n        if x == '1':\n            num_ones_to_the_left += [num_ones_to_the_left[-1] + 1]\n        else:\n            num_ones_to_the_left += [num_ones_to_the_left[-1]]\n    num_inversions = 0\n    for (x, num_ones) in zip(string, num_ones_to_the_left):\n        if x == '0':\n            num_inversions += num_ones\n    return num_inversions\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    (num_strings, string_length) = [int(x) for x in input().split()]\n    strings = [input().strip() for i in range(num_strings)]\n    strings.sort(key=lambda x: (x.count('1'), GetNumInversions(x)))\n    concat_string = ''.join(strings)\n    print(GetNumInversions(concat_string))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    b = [input() for i in range(n)]\n    b.sort(key=lambda x: x.count('1'))\n    inversion = 0\n    cnt = 0\n    for i in ''.join(b):\n        if i == '1':\n            cnt += 1\n        else:\n            inversion = inversion + cnt\n    print(inversion)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        r = input()\n        l.append(r)\n    l.sort(key=lambda x: x.count('1'))\n    s = ''\n    for i in range(len(l)):\n        s = s + l[i]\n    d = []\n    s = list((char for char in s))\n    for i in range(len(s)):\n        if s[i] == '0':\n            d.append(i)\n    su = 0\n    for i in range(0, len(d)):\n        if i == 0:\n            su = su + d[0] * len(d)\n        else:\n            su = su + (d[i] - d[i - 1] - 1) * (len(d) - i)\n    print(su)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        r = input()\n        l.append(r)\n    l.sort(key=lambda x: x.count('1'))\n    s = ''\n    for i in range(len(l)):\n        s = s + l[i]\n    o = 0\n    su = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            o = o + 1\n        else:\n            su = su + o\n    print(su)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = [input().strip('\\r') for i in range(n)]\n    l.sort(key=lambda x: x.count('1'))\n    c = d = 0\n    for x in ''.join(l):\n        if x == '1':\n            c += 1\n        else:\n            d += c\n    print(d)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    S = [input() for i in range(n)]\n    S.sort(key=lambda i: i.count('1'))\n    ans = 0\n    ones = 0\n    for i in ''.join(S):\n        if i == '1':\n            ones += 1\n        else:\n            ans += ones\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = []\n    for el in range(n):\n        ans.append(input())\n    ans.sort(key=lambda x: x.count('1'))\n    res = ''\n    for ch in ans:\n        res += ch\n    ans = 0\n    odd = 0\n    for ch in res:\n        if ch == '1':\n            odd += 1\n        else:\n            ans += odd\n    print(ans)", "def check_inv(word):\n    ones = 0\n    invs = 0\n    for i in word:\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    return invs\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    words = sorted([input().strip() for i in range(n)], key=lambda x: x.count('1'))\n    print(check_inv(''.join(words)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ones = invs = 0\n    a = [input() for i in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    for i in ''.join(a):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)", "t = int(input())\nfor i in range(t):\n    (m, n) = map(int, input().split())\n    l = []\n    for i in range(m):\n        s = input()\n        l.append(s)\n    l.sort(key=lambda f: f.count('1'))\n    a = 0\n    l = ''.join(l)\n    z = l.count('0')\n    for i in range(len(l)):\n        if l[i] == '1':\n            a += z\n        else:\n            z -= 1\n    print(a)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    A = [0] * n\n    for i in range(n):\n        A[i] = input()\n    A.sort(key=lambda i: i.count('1'))\n    (ones, count) = (0, 0)\n    for i in ''.join(A):\n        if i == '1':\n            ones += 1\n        else:\n            count += ones\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = [input() for _ in range(n)]\n    s.sort(key=lambda i: i.count('1'))\n    ones = invs = 0\n    for i in ''.join(s):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for _ in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    ones = invs = 0\n    for i in ''.join(a):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    res = []\n    for i in range(n):\n        k = input()\n        res.append([k.count('0'), k])\n    res.sort(key=lambda x: x[0], reverse=True)\n    t = ''\n    for i in res:\n        t += i[1]\n    m = t.count('0')\n    ans = 0\n    for i in t:\n        if i == '0':\n            m -= 1\n        else:\n            ans += m\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    res = []\n    for i in range(n):\n        k = input()\n        res.append([k.count('0'), k])\n    res.sort(key=lambda x: (x[0], x[1][::-1]), reverse=True)\n    t = ''\n    for i in res:\n        t += i[1]\n    m = t.count('0')\n    ans = 0\n    for i in t:\n        if i == '0':\n            m -= 1\n        else:\n            ans += m\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    ones = invs = 0\n    for i in ''.join(a):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)", "for _ in range(int(input())):\n    l = []\n    (x, y) = map(int, input().split())\n    for i in range(x):\n        s = str(input())\n        l.append(s)\n    l.sort(key=lambda x: x.count('1'))\n    ans = 0\n    c = 0\n    s = str('')\n    for i in range(x):\n        s += l[i]\n    for i in range(len(s)):\n        if s[i] == str(1):\n            c += 1\n        elif s[i] == str(0):\n            ans += c\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    ones = invs = 0\n    for i in ''.join(a):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)", "for _ in range(int(input())):\n    (N, M) = input().split()\n    N = int(N)\n    M = int(M)\n    strings = list()\n    for _ in range(N):\n        strings.append(input())\n    strings = sorted(strings, key=lambda s: s.count('1'))\n    ones = 0\n    inv = 0\n    for c in ''.join(strings):\n        if c == '1':\n            ones += 1\n        else:\n            inv += ones\n    print(inv)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    l.sort(key=lambda b: b.count('1'))\n    p = ''\n    for i in l:\n        p = p + i\n    z = 0\n    ans = 0\n    for i in range(len(p) - 1, -1, -1):\n        if p[i] == '0':\n            z = z + 1\n        elif p[i] == '1':\n            ans = ans + z\n    print(ans)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    ones = 0\n    res = 0\n    s = [input() for i in range(n)]\n    s.sort(key=lambda x: x.count('1'))\n    for i in ''.join(s):\n        if i == '1':\n            ones += 1\n        else:\n            res += ones\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(input())\n    a.sort(key=lambda i: i.count('1'))\n    m = 0\n    n = 0\n    s = ''.join(a)\n    for i in s:\n        if i == '1':\n            n += 1\n        else:\n            m += n\n    print(m)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    b = [input() for i in range(n)]\n    b.sort(key=lambda i: i.count('1'))\n    o = i = 0\n    for j in ''.join(b):\n        if j == '1':\n            o += 1\n        else:\n            i += o\n    print(i)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    a = [input() for j in range(n)]\n    a.sort(key=lambda j: j.count('1'))\n    ones = b = 0\n    for l in ''.join(a):\n        if l == '1':\n            ones += 1\n        else:\n            b += ones\n    print(b)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    L = []\n    for j in range(n):\n        s = input()\n        o = s.count('1')\n        l.append([o, j])\n        L.append(s)\n    l.sort()\n    p = []\n    for k in range(len(l)):\n        v = l[k]\n        d = v[1]\n        p.append(L[d])\n    v = ''.join(map(str, p))\n    a = v.count('0')\n    b = m * n - a\n    c = 0\n    for j in range(len(v)):\n        if v[j] == '0':\n            a -= 1\n        else:\n            c += a\n    print(c)", "tc = int(input())\nfor _ in range(tc):\n    (c, bitc) = map(int, input().split())\n    map_ = {}\n    for i in range(c):\n        t = input()\n        tc = t.count('1')\n        if tc not in map_:\n            map_[tc] = []\n        map_[tc].append(t)\n    keys = sorted(map_.keys(), reverse=True)\n    for key in map_:\n        map_[key].sort(key=lambda x: int(x, 2))\n    text = ''\n    for key in keys:\n        text = ''.join(map_[key]) + text\n    text = text[::-1]\n    zc = 0\n    res = 0\n    for c in text:\n        if c == '0':\n            zc += 1\n        else:\n            res += zc\n    print(res)", "def countinverse(no):\n    count = 0\n    val = 0\n    for x in reversed(no):\n        if x == '0':\n            val += 1\n        if x == '1':\n            count += val\n    return count\nfor _ in range(int(input())):\n    arr = []\n    (string, length) = map(int, input().split())\n    for s in range(string):\n        arr.append(input())\n    arr.sort(key=lambda x: x.count('1'))\n    arr = map(str, arr)\n    no = ''.join(arr)\n    print(countinverse(no))", "def inversion(string):\n    (ones, count) = (0, 0)\n    for i in string:\n        if i == '1':\n            ones += 1\n        else:\n            count += ones\n    print(count)\nfor i in range(int(input())):\n    (N, M) = map(int, input().split(' '))\n    bin = []\n    for s in range(N):\n        K = input()\n        bin.append(K)\n    bin.sort(key=lambda val: val.count('1'))\n    string = ''.join(bin)\n    inversion(string)", "def func(x):\n    ones = 0\n    for ch in x:\n        if ch == '1':\n            ones += 1\n    return ones\nt = int(input())\nfor T in range(t):\n    (n, m) = map(int, input().split())\n    strings = []\n    for i in range(n):\n        strings.append(input())\n    strings = sorted(strings, key=func)\n    concat_str = ''.join(strings)\n    ones = 0\n    ans = 0\n    for ch in concat_str:\n        if ch == '0':\n            ans += ones\n        else:\n            ones += 1\n    print(ans)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        s = input()\n        l.append(s)\n    l.sort(key=lambda x: x.count('1'))\n    s = ''.join(l)\n    (ones, c) = (0, 0)\n    for i in s:\n        if i == '1':\n            ones += 1\n        else:\n            c += ones\n    print(c)", "T = int(input())\nfor j in range(1, T + 1):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda x: x.count('1'))\n    invs = one = 0\n    for i in ''.join(a):\n        if i == '1':\n            one += 1\n        else:\n            invs += one\n    print(invs)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for j in range(n):\n        s = input()\n        c = 0\n        p = 0\n        for k in range(m):\n            if s[k] == '1':\n                c += 1\n            if s[k] == '0':\n                p += c\n        l.append([c, p, m - c, s])\n    l = sorted(l)\n    val = l[0][0]\n    ans = l[0][1]\n    for ii in range(1, n):\n        ans += val * l[ii][2] + l[ii][1]\n        val += l[ii][0]\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [input() for x in range(n)]\n    arr.sort(key=lambda i: i.count('1'))\n    ones = invs = 0\n    for i in ''.join(arr):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)", "from collections import Counter\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = {}\n    a = [0] * n\n    for i in range(n):\n        s = input().strip()\n        a[i] = s\n        d[i] = s.count('0')\n    d = dict(sorted(d.items(), key=lambda item: item[1], reverse=True))\n    s = ''\n    for each in d:\n        s += a[each]\n    ans = 0\n    x = 0\n    for each in s:\n        if each == '1':\n            x += 1\n        else:\n            ans += x\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        s = input()\n        count1 = 0\n        count0 = 0\n        for i in s:\n            if i == '1':\n                count1 += 1\n            else:\n                count0 += 1\n        l.append((count1, s))\n    l.sort()\n    a = ''\n    b = 0\n    for (i, j) in l:\n        a += j\n    count = 0\n    for i in a:\n        if i == '1':\n            count += 1\n        else:\n            b += count\n    print(b)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [input() for i in range(n)]\n    arr.sort(key=lambda i: i.count('1'))\n    count1 = 0\n    inv = 0\n    for i in ''.join(arr):\n        if i == '1':\n            count1 += 1\n        else:\n            inv += count1\n    print(inv)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l1 = [input() for i in range(n)]\n    l1.sort(key=lambda i: i.count('1'))\n    one = ans = 0\n    for i in ''.join(l1):\n        if i == '1':\n            one += 1\n        else:\n            ans += one\n    print(ans)", "def count_inv(string):\n    ones = ans = 0\n    for i in string:\n        if i == '1':\n            ones += 1\n        else:\n            ans += ones\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for _ in range(n):\n        arr.append(input())\n    arr.sort(key=lambda x: x.count('1'))\n    arr = ''.join(arr)\n    print(count_inv(arr))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    list1 = [input() for i in range(n)]\n    list1.sort(key=lambda i: i.count('1'))\n    one = ans = 0\n    for i in ''.join(list1):\n        if i == '1':\n            one += 1\n        else:\n            ans += one\n    print(ans)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    arr = []\n    for i in range(a):\n        arr.append(input())\n    arr.sort(key=lambda x: x.count('1'))\n    c1 = 0\n    res = 0\n    for i in arr:\n        for j in i:\n            if j == '1':\n                c1 += 1\n            else:\n                res += c1\n    print(res)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    l.sort(key=lambda x: x.count('1'))\n    ans = ''\n    for i in l:\n        ans += i\n    o = 0\n    res = 0\n    for i in range(len(ans)):\n        if ans[i] == '1':\n            o += 1\n        else:\n            res += o\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = ''\n    a = []\n    for i in range(n):\n        x = input()\n        c = x.count('1')\n        a.append([c, x])\n    a.sort()\n    for i in range(n):\n        s = s + a[i][1]\n    z = 0\n    ans = 0\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] == '0':\n            z = z + 1\n        else:\n            ans = ans + z\n    print(ans)", "class String:\n\n    def __init__(self, a=None, b=0):\n        self.s = a\n        self.ones = 0\n\n    def calculate(self):\n        for i in self.s:\n            if i == '1':\n                self.ones = self.ones + 1\n\n    def __lt__(self, other):\n        if self.ones < other.ones:\n            return True\n        elif self.ones > other.ones:\n            return False\n        elif self.s < other.s:\n            return True\n        else:\n            return False\nT = int(input())\nfor _ in range(0, T):\n    objects = []\n    (N, M) = map(int, input().split())\n    for i in range(0, N):\n        objects.append(String())\n        objects[i].s = input()\n        objects[i].calculate()\n    sorted_objects = sorted(objects)\n    string = ''\n    for i in sorted_objects:\n        string = string + i.s\n    ones_count = 0\n    inversions = 0\n    for i in string:\n        if i == '1':\n            ones_count = ones_count + 1\n        else:\n            inversions = inversions + ones_count\n    print(inversions)", "from sys import stdin\nt = int(stdin.readline().rstrip())\nwhile t > 0:\n    (n, m) = map(int, stdin.readline().rstrip().split(' '))\n    arr = []\n    for i in range(n):\n        s = stdin.readline().strip()\n        arr.append(s)\n    arr.sort(key=lambda i: i.count('1'))\n    arr = ''.join(arr)\n    ones = 0\n    inversions = 0\n    for i in arr:\n        if i == '1':\n            ones += 1\n        else:\n            inversions += ones\n    print(inversions)\n    t -= 1", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = 0\n    l = []\n    for j in range(n):\n        s = str(input())\n        (c0, c1) = (0, 0)\n        for k in range(m):\n            if s[m - 1 - k] == '1':\n                c += c0\n                c1 += 1\n            else:\n                c0 += 1\n        l.append(c0)\n    l.sort(reverse=True)\n    ss = sum(l)\n    for j in range(n):\n        c += (m - l[j]) * (ss - l[j])\n        ss -= l[j]\n    print(c)", "t = int(input())\n\ndef comp(x):\n    count1 = 0\n    for i in x:\n        if i == '1':\n            count1 += 1\n    return count1\nwhile t > 0:\n    t -= 1\n    (n, m) = list(map(int, input().split(' ')))\n    nums = list()\n    while n > 0:\n        n -= 1\n        t1 = str(input())\n        nums.append(t1)\n    nums.sort(key=lambda x: comp(x))\n    a = ''.join(nums)\n    inversion_count = 0\n    one_count = 0\n    for i in a:\n        if i == '1':\n            one_count += 1\n        else:\n            inversion_count += one_count\n    print(inversion_count)", "test = int(input())\nfor i in range(0, test):\n    (n, v) = map(int, input().split())\n    list1 = []\n    list2 = []\n    for z in range(n):\n        b = input()\n        list1.append(b)\n    list1.sort(key=lambda i: i.count('1'))\n    ans = ''\n    for p in range(n):\n        ans = ans + list1[p]\n    one = 0\n    cost = 0\n    for f in range(0, len(ans)):\n        if ans[f] == '1':\n            one += 1\n        else:\n            cost += one\n    print(cost)", "import sys, numpy as np\n\ndef solve(test):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        x = input().strip()\n        arr.append(x)\n    count1 = []\n    for i in range(len(arr)):\n        count1.append([arr[i], arr[i].count('1')])\n    count1 = sorted(count1, key=lambda x: x[1])\n    ans = []\n    for i in range(len(count1)):\n        ans.append(count1[i][0])\n    temp = ''.join(ans)\n    answer = 0\n    count = 0\n    for i in temp[::-1]:\n        if i == '0':\n            count += 1\n        else:\n            answer += count\n    print(answer)\ntest_case = int(input())\nfor test in range(test_case):\n    solve(test + 1)", "def func(N, M, arr):\n    i = 0\n    dp = [[] for i in range(N)]\n    d = {}\n    for i in range(N):\n        c = 0\n        for j in arr[i]:\n            if j == '1':\n                c += 1\n        d[i] = c\n    d = dict(sorted(d.items(), key=lambda x: x[1]))\n    pos = 0\n    for (i, j) in d.items():\n        dp[pos] = arr[i]\n        pos += 1\n    ans = 0\n    s = ''\n    inver = 0\n    for i in dp:\n        for j in range(M):\n            if i[j] == '1':\n                ans += 1\n            else:\n                inver += ans\n    return inver\nT = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    arr = []\n    for j in range(N):\n        x = list(input())\n        arr.append(x)\n    print(func(N, M, arr))", "import math\nimport random as rd\nimport bisect\nimport collections\n\ndef combination(n, r):\n    return math.comb(n, r)\n\ndef listing():\n    return list(map(int, input().split()))\n\ndef intp():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef inpspl():\n    return input().split()\n\ndef mapping():\n    return map(int, input().split())\n\ndef sqrt(n):\n    return math.sqrt(n)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef p(s):\n    print(s)\n\ndef lsetl(lst):\n    return list(set(lst))\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(abs(n - r))\n\ndef frequencyofall(lst):\n    return dict(collections.Counter(lst))\n\ndef ispowerof2(n):\n    return n & n - 1 == 0\n\ndef ispowerof3(n):\n    return math.log10(n) / math.log10(3) % 1 == 0\n\ndef dictionarysort(d):\n    return collections.OrderedDict(sorted(d.items()))\n\ndef bintoint(s):\n    return int(s, 2)\n\ndef solve():\n    for _ in range(intp()):\n        (n, m) = mapping()\n        l = []\n        for __ in range(n):\n            s = inp()\n            l.append([s.count('1'), s])\n        l.sort()\n        st = ''\n        for i in l:\n            st += i[1]\n        o = 0\n        ans = 0\n        for i in range(len(st)):\n            if st[i] == '1':\n                o += 1\n            else:\n                ans += o\n        print(ans)\nsolve()", "t = int(input())\nfor i in range(t):\n    (m, n) = map(int, input().split())\n    S = []\n    for i in range(m):\n        s = input()\n        S.append(s)\n    S = [(int(s, 2), s, i) for (i, s) in enumerate(S)]\n    S.sort(key=lambda x: x[1].count('1'))\n    s_joined = ''.join((s for (v, s, i) in S))\n    pref_s = [0]\n    ans = 0\n    for i in range(len(s_joined) - 1, -1, -1):\n        if s_joined[i] == '0':\n            pref_s.append(pref_s[-1] + 1)\n        else:\n            pref_s.append(pref_s[-1])\n    pref_s.pop(0)\n    pref_s.reverse()\n    for i in range(len(s_joined)):\n        if s_joined[i] == '1':\n            ans += pref_s[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    l1 = []\n    inv = 0\n    for i in range(n):\n        st = input()\n        l.append(st)\n        co = 0\n        for j in range(m):\n            if st[j] == '1':\n                co = co + 1\n            else:\n                inv = inv + co\n        l1.append(co)\n    l1.sort()\n    prev1 = 0\n    for i in range(1, n):\n        prev1 = prev1 + l1[i - 1]\n        inv = inv + (m - l1[i]) * prev1\n    print(inv)", "def SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    for p in range(n + 1):\n        if prime[p]:\n            print(p)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda x: x.count('1'))\n    one = 0\n    inv = 0\n    for i in ''.join(a):\n        if i == '1':\n            one += 1\n        else:\n            inv += one\n    print(inv)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    li = []\n    for i in range(n):\n        s = input()\n        c = s.count('1')\n        li.append([c, s])\n    li.sort()\n    k = ''\n    for i in range(n):\n        k = k + li[i][1]\n    ans = 0\n    j = 0\n    for i in range(n * m):\n        if k[i] == '0':\n            ans = ans + j\n        else:\n            j = j + 1\n    print(ans)", "from os import environ\nimport sys\nimport math\nfrom bisect import bisect, bisect_left, insort\nif environ.get('epoweripi'):\n    sys.stdin = open('../../input.txt', 'r')\n    sys.stdout = open('../../output.txt', 'w')\n\n    def debug(z=''):\n        print(str(z) + '\\n')\nelse:\n\n    def debug(z=''):\n        return\ninput = sys.stdin.readline\nprint = sys.stdout.write\nmod = 10 ** 9 + 7\n\ndef I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef MI():\n    return map(int, input().split())\n\ndef LI():\n    return list(map(int, input().split()))\n\ndef P(z=''):\n    print(str(z) + '\\n')\n\ndef PSPACE(z=''):\n    print(str(z) + ' ')\n\ndef LP(z=[]):\n    for i in z:\n        print(str(i) + ' ')\n    print('\\n')\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\n\ndef sieve(n):\n    isPrimes = [True for i in range(n + 1)]\n    (isPrimes[0], isPrimes[1]) = (False, False)\n    p = 2\n    while p * p <= n:\n        if isPrimes[p] == True:\n            for j in range(p * p, n + 1, p):\n                isPrimes[j] = False\n        p += 1\n\ndef swap(arr, i, j):\n    (arr[i], arr[j]) = (arr[j], arr[i])\nfor _ in range(II()):\n    (n, m) = MI()\n    l = ['' for x in range(n)]\n    for i in range(n):\n        l[i] = I()\n\n    def func(x):\n        one_count = 0\n        for i in x:\n            if i == '1':\n                one_count += 1\n        return one_count\n    l.sort(key=lambda x: func(x))\n    newl = ['' for x in range(n * m)]\n    k = 0\n    for i in range(n):\n        for j in range(m):\n            newl[k] = l[i][j]\n            k += 1\n    news = ''.join(newl)\n    zero_count = [0 for x in range(n * m)]\n    s = 0\n    for i in reversed(range(n * m)):\n        if news[i] == '0':\n            s += 1\n        zero_count[i] = s\n    count1 = 0\n    for i in range(n * m - 1):\n        if news[i] == '1':\n            count1 += zero_count[i + 1]\n    P(count1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    zero = 0\n    inv = 0\n    a = ''.join(a)\n    for i in a:\n        if i == '1':\n            zero += 1\n        else:\n            inv += zero\n    print(inv)", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    A = []\n    for i in range(N):\n        k = input()\n        A.append(k)\n    A.sort(key=lambda x: x.count('1'))\n    ans = ''.join(A)\n    z = ans.count('0')\n    c = 0\n    for i in range(len(ans)):\n        if ans[i] == '0':\n            z -= 1\n        else:\n            c += z\n    print(c)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        l.append(input())\n    l.sort(key=lambda x: x.count('1'))\n    s = ''\n    for i in l:\n        s += i\n    ones = 0\n    ans = 0\n    for i in s:\n        if i == '0':\n            ans += ones\n        else:\n            ones += 1\n    print(ans)", "def cont(ele):\n    flag = 0\n    for i in ele:\n        if i == '0':\n            flag += 1\n    return flag\nt = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    zer = []\n    one = []\n    zersum = [0] * n\n    u = 0\n    for nn in range(n):\n        ele = input()\n        r = cont(ele)\n        zer.append(r)\n        c = r\n        for y in ele:\n            if y == '1':\n                u += c\n            else:\n                c -= 1\n    zer.sort(reverse=True)\n    p = 0\n    for el in zer:\n        one.append(m - el)\n    for w in range(n - 1, -1, -1):\n        zersum[w] = p + zer[w]\n        p = zersum[w]\n    for y in range(n - 1):\n        u += one[y] * zersum[y + 1]\n    print(u)", "def solve():\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    ones = invs = 0\n    for i in ''.join(a):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)\nfor _ in range(int(input())):\n    solve()", "try:\n    from debugger import debug\nexcept ImportError:\n\n    def debug(**kwargs):\n        pass\n    pass\n\ndef solve():\n    (n, m) = map(int, input().split())\n    a = [input() for i in range(n)]\n    a.sort(key=lambda i: i.count('1'))\n    ones = invs = 0\n    for i in ''.join(a):\n        if i == '1':\n            ones += 1\n        else:\n            invs += ones\n    print(invs)\nfor _ in range(int(input())):\n    solve()", "def process(List):\n    (Min, one) = (0, 0)\n    List.sort(key=lambda item: item.count('1'))\n    val = ''.join(List)\n    for i in val:\n        if i == '0':\n            Min += one\n        if i == '1':\n            one += 1\n    return Min\nfor _ in range(int(input())):\n    List = []\n    (N, M) = map(int, input().split())\n    count = 0\n    for i in range(N):\n        List.append(input())\n    print(process(List))", "def check(a):\n    return a.count('1')\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    data = [input() for i in range(n)]\n    data.sort(key=lambda x: x.count('1'))\n    s = ''\n    s = s.join(data)\n    total = s.count('0')\n    sharma = 0\n    for i in s:\n        if i == '0':\n            total -= 1\n        else:\n            sharma += total\n    print(sharma)", "def check(a):\n    return a.count('1')\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    data = [input() for i in range(n)]\n    data.sort(key=lambda x: check(x))\n    s = ''\n    s = s.join(data)\n    total = s.count('0')\n    sharma = 0\n    for i in s:\n        if i == '0':\n            total -= 1\n        else:\n            sharma += total\n    print(sharma)", "def check(a):\n    return a.count('1')\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    data = []\n    for i in range(n):\n        s_inpu = input()\n        data.append(s_inpu)\n    data.sort(key=lambda x: check(x))\n    s = ''\n    s = s.join(data)\n    total = s.count('0')\n    sharma = 0\n    for i in s:\n        if i == '0':\n            total -= 1\n        else:\n            sharma += total\n    print(sharma)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        s = input()\n        arr.append(s)\n    arr = sorted(arr, key=lambda x: x.count('1'))\n    string = ''.join(arr)\n    leni = len(string)\n    ans = 0\n    ones = 0\n    for i in range(leni):\n        if string[i] == '1':\n            ones += 1\n        else:\n            ans += ones\n    print(ans)", "def count(x):\n    ans = 0\n    for i in x:\n        if i == '1':\n            ans += 1\n    return ans\n\ndef mgc(n, a):\n    a.sort()\n    x = ''\n    for i in a:\n        x += i[1]\n    ans = 0\n    zeroes = 0\n    for i in x:\n        if i == '0':\n            zeroes += 1\n    for i in range(len(x)):\n        if x[i] == '1':\n            ans += zeroes\n        else:\n            zeroes -= 1\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        temp = input()\n        arr.append([count(temp), temp])\n    print(mgc(n, arr))", "def solve():\n    (n, m) = map(int, input().split())\n    l = []\n    for i in range(n):\n        s = input()\n        l.append((s, s.count('0')))\n    l = sorted(l, key=lambda x: x[1], reverse=True)\n    ans = ''\n    for i in l:\n        ans += i[0]\n    count_0 = 0\n    answer = 0\n    for i in ans[::-1]:\n        if i == '1':\n            answer += count_0\n        else:\n            count_0 += 1\n    print(answer)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1"]