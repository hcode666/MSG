["from audioop import reverse\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    dic = {}\n    for i in range(n):\n        if s[i] in dic:\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n    ma = 0\n    tp = ''\n    for i in dic:\n        if dic[i] > ma:\n            ma = dic[i]\n            tp = i\n    dic = {}\n    prev = -1\n    c = 0\n    for i in range(n):\n        if s[i] != prev:\n            if prev != -1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n            c = 1\n            prev = s[i]\n            if i == n - 1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n        else:\n            c += 1\n            if i == n - 1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n    li = []\n    for i in dic:\n        nli = dic[i]\n        nli.sort(reverse=True)\n        li.append([i, nli, 1, nli[0]])\n    ans = []\n    for i in range(n + 1):\n        tempmax = []\n        for j in range(len(li)):\n            nli = li[j][1]\n            tempmax.append(li[j][3])\n            if li[j][2] < len(nli):\n                li[j][3] += nli[li[j][2]]\n                li[j][2] += 1\n        ans.append(max(tempmax))\n    print(*ans)", "from audioop import reverse\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    dic = {}\n    for i in range(n):\n        if s[i] in dic:\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n    ma = 0\n    tp = ''\n    for i in dic:\n        if dic[i] > ma:\n            ma = dic[i]\n            tp = i\n    dic = {}\n    prev = -1\n    c = 0\n    for i in range(n):\n        if s[i] != prev:\n            if prev != -1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n            c = 1\n            prev = s[i]\n            if i == n - 1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n        else:\n            c += 1\n            if i == n - 1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n    li = []\n    for i in dic:\n        nli = dic[i]\n        nli.sort(reverse=True)\n        li.append([i, nli, 1, nli[0]])\n    ans = []\n    for i in range(n + 1):\n        tempmax = []\n        for j in range(len(li)):\n            nli = li[j][1]\n            tempmax.append(li[j][3])\n            if li[j][2] < len(nli):\n                li[j][3] += nli[li[j][2]]\n                li[j][2] += 1\n        ans.append(max(tempmax))\n    print(*ans)", "from audioop import reverse\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    dic = {}\n    for i in range(n):\n        if s[i] in dic:\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n    ma = 0\n    tp = ''\n    for i in dic:\n        if dic[i] > ma:\n            ma = dic[i]\n            tp = i\n    dic = {}\n    prev = -1\n    c = 0\n    for i in range(n):\n        if s[i] != prev:\n            if prev != -1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n            c = 1\n            prev = s[i]\n            if i == n - 1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n        else:\n            c += 1\n            if i == n - 1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n    li = []\n    for i in dic:\n        nli = dic[i]\n        nli.sort(reverse=True)\n        li.append([i, nli, 1, nli[0]])\n    ans = []\n    for i in range(n + 1):\n        tempmax = []\n        for j in range(len(li)):\n            nli = li[j][1]\n            tempmax.append(li[j][3])\n            if li[j][2] < len(nli):\n                li[j][3] += nli[li[j][2]]\n                li[j][2] += 1\n        ans.append(max(tempmax))\n    print(*ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    prev = None\n    temp = 0\n    d = defaultdict(list)\n    for (i, el) in enumerate(s):\n        if not prev or prev == el:\n            temp += 1\n        else:\n            d[prev].append(temp)\n            temp = 1\n        prev = el\n    d[prev].append(temp)\n    for j in range(26):\n        ch = chr(ord('a') + j)\n        if len(d[ch]):\n            d[ch].sort(reverse=True)\n            for i in range(1, len(d[ch])):\n                d[ch][i] += d[ch][i - 1]\n    res = []\n    for i in range(n + 1):\n        p = 0\n        for j in range(26):\n            ch = chr(ord('a') + j)\n            if len(d[ch]):\n                ind = min(i, len(d[ch]) - 1)\n                p = max(p, d[ch][ind])\n        res.append(p)\n    print(*res)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    s = s + '$'\n    cnt = 0\n    alphafreq = [[] for _ in range(26)]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            cnt += 1\n        else:\n            alphafreq[ord(s[i - 1]) - ord('a')].append(cnt + 1)\n            cnt = 0\n    for i in range(26):\n        alphafreq[i].sort(reverse=True)\n        for j in range(1, len(alphafreq[i])):\n            alphafreq[i][j] += alphafreq[i][j - 1]\n    ans = []\n    for i in range(n + 1):\n        curr = 0\n        for j in range(26):\n            if alphafreq[j]:\n                curr = max(curr, alphafreq[j][-1 if i >= len(alphafreq[j]) else i])\n        ans.append(curr)\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(input())\n    ss = [[] for i in range(26)]\n    ss_size = [0] * 26\n    (curr, cnt) = (None, 0)\n    for ch in s:\n        if curr is None:\n            curr = ch\n            cnt += 1\n        elif curr == ch:\n            cnt += 1\n        else:\n            ss[ord(curr) - 97].append(cnt)\n            ss_size[ord(curr) - 97] += 1\n            curr = ch\n            cnt = 1\n    ss[ord(curr) - 97].append(cnt)\n    ss_size[ord(curr) - 97] += 1\n    for ch_ss in ss:\n        ch_ss.sort(reverse=True)\n    k_mx = [0] * (n + 1)\n    ans = [0] * 26\n    for i in range(n + 1):\n        for j in range(26):\n            if i < ss_size[j]:\n                ans[j] += ss[j][i]\n        k_mx[i] = max(ans)\n    print(' '.join(map(str, k_mx)))", "import sys, string as strr\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    s = input() + '$'\n    cnt = 0\n    alphafreq = [[] for _ in range(26)]\n    for i in range(1, len(s)):\n        eq = s[i] == s[i - 1]\n        if not eq:\n            alphafreq[strr.ascii_lowercase.index(s[i - 1])].append(cnt + 1)\n        cnt = cnt * eq + eq\n    for i in range(26):\n        alphafreq[i].sort(reverse=True)\n        for j in range(1, len(alphafreq[i])):\n            alphafreq[i][j] += alphafreq[i][j - 1]\n    ans = []\n    for i in range(n + 1):\n        curr = 0\n        for j in range(26):\n            if alphafreq[j]:\n                curr = max(curr, alphafreq[j][i if i < len(alphafreq[j]) else -1])\n        ans.append(curr)\n    print(*ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    s = input() + '$'\n    cnt = 0\n    alphafreq = [[] for _ in range(26)]\n    for i in range(1, len(s)):\n        eq = s[i] == s[i - 1]\n        if not eq:\n            alphafreq['abcdefghijklmnopqrstuvwxyz'.index(s[i - 1])].append(cnt + 1)\n        cnt = cnt * eq + eq\n    for i in range(26):\n        alphafreq[i].sort(reverse=True)\n        for j in range(1, len(alphafreq[i])):\n            alphafreq[i][j] += alphafreq[i][j - 1]\n    ans = []\n    for i in range(n + 1):\n        curr = 0\n        for j in range(26):\n            if alphafreq[j]:\n                curr = max(curr, alphafreq[j][i if i < len(alphafreq[j]) else -1])\n        ans.append(curr)\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input() + '$'\n    cnt = 0\n    alphafreq = [[] for _ in range(26)]\n    for i in range(1, len(s)):\n        eq = s[i] == s[i - 1]\n        if not eq:\n            alphafreq['abcdefghijklmnopqrstuvwxyz'.index(s[i - 1])].append(cnt + 1)\n        cnt = cnt * eq + eq\n    for i in range(26):\n        alphafreq[i].sort(reverse=True)\n        for j in range(1, len(alphafreq[i])):\n            alphafreq[i][j] += alphafreq[i][j - 1]\n    ans = []\n    for i in range(n + 1):\n        curr = 0\n        for j in range(26):\n            if alphafreq[j]:\n                curr = max(curr, alphafreq[j][i if i < len(alphafreq[j]) else -1])\n        ans.append(curr)\n    print(*ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nM = int(1000000000.0 + 7)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    s = s + '$'\n    cnt = 0\n    alphafreq = [[] for _ in range(26)]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            cnt += 1\n        else:\n            alphafreq[ord(s[i - 1]) - ord('a')].append(cnt + 1)\n            cnt = 0\n    for i in range(26):\n        alphafreq[i].sort(reverse=True)\n        for j in range(1, len(alphafreq[i])):\n            alphafreq[i][j] += alphafreq[i][j - 1]\n    ans = []\n    for i in range(n + 1):\n        curr = 0\n        for j in range(26):\n            if alphafreq[j]:\n                curr = max(curr, alphafreq[j][i if i < len(alphafreq[j]) else -1])\n        ans.append(curr)\n    print(*ans)", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nM = int(1000000000.0 + 7)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    s = s + '$'\n    cnt = 0\n    alphafreq = [[] for _ in range(26)]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            cnt += 1\n        else:\n            alphafreq[ord(s[i - 1]) - ord('a')].append(cnt + 1)\n            cnt = 0\n    for i in range(26):\n        alphafreq[i].sort(reverse=True)\n        for j in range(1, len(alphafreq[i])):\n            alphafreq[i][j] += alphafreq[i][j - 1]\n    ans = []\n    for i in range(n + 1):\n        curr = 0\n        for j in range(26):\n            if alphafreq[j]:\n                curr = max(curr, alphafreq[j][-1 if i >= len(alphafreq[j]) else i])\n        ans.append(curr)\n    print(*ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = input()\n    dp = Counter(arr)\n    mx = dp[arr[0]]\n    index = arr[0]\n    st = [['xx'] for i in range(26)]\n    for index in dp:\n        for i in arr:\n            if i == index and st[ord(index) - 97][-1].isdigit():\n                st[ord(index) - 97].append(str(int(st[ord(index) - 97].pop()) + 1))\n            elif i == index:\n                st[ord(index) - 97].append('1')\n            else:\n                st[ord(index) - 97].append(i)\n    ans = []\n    k = 0\n    for x in st:\n        a = []\n        for i in x:\n            if i.isdigit():\n                a.append(int(i))\n        if len(x) > 1:\n            ans.append(sorted(a, reverse=True))\n    dp = [0] * (n + 1)\n    for k in range(len(ans)):\n        ans[k] += [0 for i in range(n - len(ans[k]) + 1)]\n        dp[0] = max(ans[k][0], dp[0])\n        for i in range(1, len(ans[k])):\n            ans[k][i] += ans[k][i - 1]\n            dp[i] = max(dp[i], ans[k][i])\n    print(dp[0], end=' ')\n    for i in range(1, n + 1):\n        dp[i] = max(dp[i], dp[i - 1])\n        print(dp[i], end=' ')\n    print()", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n\ndef printyes():\n    print('YES')\n\ndef printno():\n    print('NO')\nfor t in range(int(input())):\n    n = ni()\n    s = si() + '&'\n    new = []\n    i = 0\n    pre = 0\n    while i < len(s) - 1:\n        if s[i + 1] != s[i]:\n            new.append(s[pre:i + 1])\n            pre = i + 1\n        i += 1\n    s = list(new)\n    d = dict()\n    for i in s:\n        if i[0] not in d:\n            d[i[0]] = []\n        d[i[0]].append(len(i))\n    for i in d:\n        d[i].sort(reverse=True)\n        for j in range(1, len(d[i])):\n            d[i][j] += d[i][j - 1]\n    a = set(d.keys())\n    ans = [0]\n    for i in range(n + 1):\n        re = []\n        curr = ans[-1]\n        for j in a:\n            if len(d[j]) == i + 1:\n                re.append(j)\n            curr = max(curr, d[j][i])\n        ans.append(curr)\n        for j in re:\n            a.remove(j)\n    ans.pop(0)\n    print(*ans)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n\ndef printyes():\n    print('YES')\n\ndef printno():\n    print('NO')\nfor t in range(int(input())):\n    n = ni()\n    s = si() + '&'\n    new = []\n    i = 0\n    pre = 0\n    while i < len(s) - 1:\n        if s[i + 1] != s[i]:\n            new.append(s[pre:i + 1])\n            pre = i + 1\n        i += 1\n    s = list(new)\n    d = dict()\n    for i in s:\n        if i[0] not in d:\n            d[i[0]] = []\n        d[i[0]].append(len(i))\n    for i in d:\n        d[i].sort(reverse=True)\n        for j in range(1, len(d[i])):\n            d[i][j] += d[i][j - 1]\n    a = set(d.keys())\n    ans = [0]\n    for i in range(n + 1):\n        re = []\n        curr = ans[-1]\n        for j in a:\n            if len(d[j]) == i + 1:\n                re.append(j)\n            curr = max(curr, d[j][i])\n        ans.append(curr)\n        for j in re:\n            a.remove(j)\n    ans.pop(0)\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    d = dict()\n    for i in a:\n        d[i] = -1\n    counter = 0\n    for i in a:\n        if d[i] == -1:\n            d[i] = counter\n            counter += 1\n    result = []\n    for i in range(counter):\n        temp = []\n        result.append(temp)\n    s = a[i]\n    count = 0\n    for i in a:\n        if i != s:\n            result[d[s]].append(count)\n            count = 1\n            s = i\n        else:\n            count += 1\n    result[d[s]].append(count)\n    for lis in result:\n        lis.sort(reverse=True)\n        l = len(lis)\n        while l < n + 1:\n            lis.append(0)\n            l += 1\n        summ = 0\n        for i in range(l):\n            summ += lis[i]\n            lis[i] = summ\n    ans = []\n    for i in range(n + 1):\n        maxx = 0\n        for j in range(counter):\n            if result[j][i] > maxx:\n                maxx = result[j][i]\n        ans.append(maxx)\n    print(*ans)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nt = int(input())\n\ndef solve():\n    N = int(input())\n    d = defaultdict(list)\n    A = input().strip('\\n')\n    curr = A[0]\n    run = 1\n    for x in A[1:]:\n        if x == curr:\n            run += 1\n        else:\n            d[curr].append(run)\n            run = 1\n            curr = x\n    d[curr].append(run)\n    ans = [0] * (N + 1)\n    for nums in d.values():\n        nums.sort()\n        i = 0\n        j = len(nums) - 1\n        s = sum(nums)\n        while i <= j:\n            if ans[j - i] < s:\n                ans[j - i] = s\n            if nums[i] <= nums[j]:\n                s -= nums[i]\n                i += 1\n            else:\n                s -= nums[j]\n                j -= 1\n    for i in range(1, N + 1):\n        ans[i] = max(ans[i], ans[i - 1])\n    print(*ans)\nwhile t:\n    solve()\n    t -= 1", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        s = inp()\n        l = defaultdict(list)\n        cnt = 1\n        for i in range(1, n):\n            if s[i] == s[i - 1]:\n                cnt += 1\n            else:\n                l[s[i - 1]].append(cnt)\n                cnt = 1\n        l[s[-1]].append(cnt)\n        for i in l:\n            l[i].sort(reverse=True)\n            l[i] = list(accumulate(l[i]))\n        ans = []\n        j = 0\n        for i in range(n):\n            p = -inf\n            for i in l:\n                if j < len(l[i]):\n                    p = max(p, l[i][j])\n            j += 1\n            if len(ans) == 0:\n                ans.append(p)\n            else:\n                ans.append(max(ans[-1], p))\n        ans.append(ans[-1])\n        print(*ans)\nmain()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ran = [[] for i in range(26)]\n    cnt = 0\n    cur = '.'\n    for i in range(n):\n        if s[i] == cur:\n            cnt += 1\n        else:\n            if cnt > 0:\n                ran[ord(cur) - ord('a')].append(cnt)\n            cnt = 1\n            cur = s[i]\n    ran[ord(cur) - ord('a')].append(cnt)\n    ans = [1 for i in range(n + 1)]\n    for r in ran:\n        r.sort(reverse=True)\n        tmp = 0\n        for i in range(len(r)):\n            tmp += r[i]\n            ans[i] = max(ans[i], tmp)\n    for i in range(1, n + 1):\n        ans[i] = max(ans[i], ans[i - 1])\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    ran = [[] for i in range(26)]\n    cnt = 0\n    cur = '.'\n    for i in range(n):\n        if s[i] == cur:\n            cnt += 1\n        else:\n            if cnt > 0:\n                ran[ord(cur) - ord('a')].append(cnt)\n            cnt = 1\n            cur = s[i]\n    ran[ord(cur) - ord('a')].append(cnt)\n    ans = [1 for i in range(n + 1)]\n    for r in ran:\n        r.sort(reverse=True)\n        tmp = 0\n        for i in range(len(r)):\n            tmp += r[i]\n            ans[i] = max(ans[i], tmp)\n    for i in range(1, n + 1):\n        ans[i] = max(ans[i], ans[i - 1])\n    print(*ans)", "t = int(input())\nwhile t:\n    t -= 1\n    x = int(input())\n    st = input()\n    st = st + '.'\n    c = 0\n    cont = [[] for i in range(26)]\n    pre = st[0]\n    for i in st:\n        if i == pre:\n            c += 1\n        else:\n            cont[ord(pre) - ord('a')].append(c)\n            c = 1\n        pre = i\n    for i in range(26):\n        cont[i].sort(reverse=True)\n    tg = [0 for i in range(26)]\n    score = [0 for i in range(26)]\n    for i in range(26):\n        if len(cont[i]) == 0:\n            tg[i] = 1\n    for i in range(x + 1):\n        ma = 0\n        for j in range(26):\n            if i >= len(cont[j]):\n                tg[j] = 1\n            if tg[j] == 1:\n                ma = max(score[j], ma)\n            else:\n                score[j] += cont[j][i]\n                ma = max(score[j], ma)\n        print(ma, end=' ')\n    print()", "from collections import Counter\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    key = list(Counter(s).keys())\n    x = []\n    for i in range(len(key)):\n        y = [0] * (n + 1)\n        x.append(y)\n    y = []\n    for i in range(len(key)):\n        ct = 0\n        k = 0\n        for j in range(n):\n            if s[j] == key[i]:\n                k += 1\n            else:\n                x[i][ct] = k\n                k = 0\n                ct += 1\n        x[i][ct] = k\n        k = 0\n    for i in range(len(key)):\n        x[i].sort(reverse=True)\n    for i in range(len(key)):\n        x11 = 0\n        for it in range(n):\n            x[i][it] += x11\n            x11 = x[i][it]\n    ans = 0\n    ans1 = []\n    for i in range(n):\n        for j in range(len(key)):\n            ans = max(ans, x[j][i])\n        ans1.append(ans)\n    ans1.append(ans1[-1])\n    print(*ans1)", "for _ in range(int(input())):\n    N = int(input())\n    S = input()\n    dict = {}\n    for i in range(N):\n        if S[i] in dict:\n            dict[S[i]] += 1\n        else:\n            dict[S[i]] = 1\n    ans = [0] * (N + 1)\n    for i in dict:\n        temp = []\n        actual_size = 0\n        curr = 0\n        for j in range(N):\n            if S[j] == i:\n                curr += 1\n            else:\n                actual_size = curr\n                if actual_size > 0:\n                    temp.append(actual_size)\n                (actual_size, curr) = (0, 0)\n        if curr != 0:\n            temp.append(curr)\n        temp.sort(reverse=True)\n        temp_ans = [0] * (N + 1)\n        temp_ans[0] = temp[0]\n        for j in range(1, N + 1):\n            if j < len(temp):\n                temp_ans[j] = temp_ans[j - 1] + temp[j]\n            else:\n                temp_ans[j] = temp_ans[j - 1]\n        for j in range(N + 1):\n            ans[j] = max(ans[j], temp_ans[j])\n    print(*ans)", "import sys\nfrom math import sqrt, gcd, factorial, ceil, floor, pi\nfrom collections import deque, Counter, OrderedDict\nfrom heapq import heapify, heappush, heappop\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    s = S()\n    x = 'abcdefghijklmnopqrstuvwxyz'\n    d = {i: [] for i in x}\n    i = 0\n    while i < n:\n        (c, j) = (1, i + 1)\n        while j < n and s[j] == s[i]:\n            c += 1\n            j += 1\n        d[s[i]].append(c)\n        i = j\n    for i in d:\n        d[i].sort(reverse=True)\n        d[i] += [0] * (n + 1 - len(d[i]))\n        for j in range(1, n + 1):\n            d[i][j] += d[i][j - 1]\n    ans = []\n    for k in range(n + 1):\n        val = 0\n        for i in d:\n            val = max(val, d[i][k])\n        ans.append(val)\n    print(*ans)", "def postprocess(arr):\n    di = {}\n    for i in arr:\n        if i[0] in di:\n            di[i[0]].append(len(i) + di[i[0]][-1])\n        else:\n            di[i[0]] = [len(i)]\n    return di\n\ndef preprocess(A, x):\n    L = []\n    l = A[0]\n    for i in range(1, x):\n        if A[i - 1] == A[i]:\n            l += A[i]\n        else:\n            L.append(l)\n            l = A[i]\n    if len(l) > 0:\n        L.append(l)\n    L.sort(key=lambda x: len(x), reverse=True)\n    return L\nfor _ in range(int(input())):\n    size = int(input())\n    st = input()\n    L1 = preprocess(st, size)\n    L = postprocess(L1)\n    answer = [0 for i in range(size + 1)]\n    for i in range(size):\n        for j in L:\n            if i > len(L[j]) - 1:\n                answer[i] = max(answer[i], L[j][-1])\n                continue\n            answer[i] = max(answer[i], L[j][i])\n    answer[-1] = max(answer)\n    print(*answer)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    streaks = []\n    current = []\n    o = {x: [] for x in a}\n    for (i, item) in enumerate(a):\n        if not current:\n            current = [item]\n        elif item == current[-1]:\n            current.append(item)\n        else:\n            streaks.append(current)\n            current = [item]\n    if current:\n        streaks.append(current)\n    for item in streaks:\n        o[item[0]].append(len(item))\n    for (key, value) in o.items():\n        o[key] = sorted(value)[::-1]\n    o_prefix = {}\n    for (key, value) in o.items():\n        e = []\n        for (i, item) in enumerate(value):\n            k = item\n            if i:\n                k += e[-1]\n            e.append(k)\n        o_prefix[key] = e\n    results = []\n    for i in range(n + 1):\n        max_so_far = float('-inf')\n        for (j, thing) in enumerate(o_prefix.values()):\n            try:\n                max_so_far = max(max_so_far, thing[i])\n            except:\n                pass\n        if max_so_far == float('-inf'):\n            max_so_far = results[-1]\n        if results and results[-1] > max_so_far:\n            max_so_far = results[-1]\n        results.append(max_so_far)\n    print(*results)", "from collections import defaultdict\nimport heapq\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    s = input()\n    hashmap = defaultdict(list)\n    hashmap[s[0]].append(-1)\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            hashmap[s[i]][-1] -= 1\n        else:\n            hashmap[s[i]].append(-1)\n    for key in hashmap:\n        heapq.heapify(hashmap[key])\n    best_lengths = dict()\n    for key in hashmap:\n        best_lengths[key] = 0\n    answer = []\n    for i in range(n + 1):\n        for key in hashmap:\n            if hashmap[key]:\n                best_lengths[key] -= heapq.heappop(hashmap[key])\n        answer.append(max(best_lengths.values()))\n    print(' '.join([str(x) for x in answer]))", "from sys import stdin, stdout, setrecursionlimit\nimport collections\nimport math\n\ndef solve(root):\n    if tree[root]:\n        c = 0\n        for n in tree[root]:\n            c += solve(n)\n        count[root] = c + 1\n    else:\n        count[root] = 1\n    return count[root]\n\ndef foo(node):\n    if node in count:\n        for n in tree[node]:\n            foo(n)\n        del count[node]\n    return\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        i = 0\n        d = {}\n        while i < n:\n            c = 1\n            x = s[i]\n            i += 1\n            while i < n and s[i] == x:\n                i += 1\n                c += 1\n            if x not in d:\n                d[x] = []\n            d[x].append(c)\n        for i in d:\n            d[i].sort(reverse=True)\n            for x in range(n + 1 - len(d[i])):\n                d[i].append(0)\n            for j in range(1, len(d[i])):\n                d[i][j] += d[i][j - 1]\n        ans = [0 for i in range(n + 1)]\n        for i in d:\n            for x in range(len(d[i])):\n                ans[x] = max(ans[x], d[i][x])\n        print(*ans)\n    return\ninput = stdin.readline\nsetrecursionlimit(10 ** 6)\nmain()", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = input()\n    L = []\n    l = A[0]\n    for i in range(1, N):\n        if A[i - 1] == A[i]:\n            l += A[i]\n        else:\n            L.append(l)\n            l = A[i]\n    if len(l) > 0:\n        L.append(l)\n    L.sort(key=lambda x: len(x), reverse=True)\n    hast = {}\n    for i in L:\n        if i[0] in hast:\n            hast[i[0]].append(len(i) + hast[i[0]][-1])\n        else:\n            hast[i[0]] = [len(i)]\n    res = []\n    for i in range(N):\n        maxc = 0\n        for j in hast:\n            if i > len(hast[j]) - 1:\n                maxc = max(maxc, hast[j][-1])\n                continue\n            maxc = max(maxc, hast[j][i])\n        res.append(str(maxc))\n    res.append(str(maxc))\n    print(' '.join(res))", "from audioop import reverse\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    dic = {}\n    for i in range(n):\n        if s[i] in dic:\n            dic[s[i]] += 1\n        else:\n            dic[s[i]] = 1\n    ma = 0\n    tp = ''\n    for i in dic:\n        if dic[i] > ma:\n            ma = dic[i]\n            tp = i\n    dic = {}\n    prev = -1\n    c = 0\n    for i in range(n):\n        if s[i] != prev:\n            if prev != -1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n            c = 1\n            prev = s[i]\n            if i == n - 1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n        else:\n            c += 1\n            if i == n - 1:\n                if prev in dic:\n                    dic[prev].append(c)\n                else:\n                    dic[prev] = [c]\n    li = []\n    for i in dic:\n        nli = dic[i]\n        nli.sort(reverse=True)\n        li.append([i, nli, 1, nli[0]])\n    ans = []\n    for i in range(n + 1):\n        tempmax = []\n        for j in range(len(li)):\n            nli = li[j][1]\n            tempmax.append(li[j][3])\n            if li[j][2] < len(nli):\n                li[j][3] += nli[li[j][2]]\n                li[j][2] += 1\n        ans.append(max(tempmax))\n    print(*ans)", "def func1(temp, p):\n    result = -1\n    for i in temp:\n        if p < len(i) and result < i[p]:\n            result = i[p]\n    return result\n\ndef func(l, letter):\n    result = []\n    count = 1\n    for i in range(len(l)):\n        if l[i] == letter and l[i] == l[i + 1]:\n            count += 1\n        elif l[i] == letter and l[i] != l[i + 1]:\n            result.append(count)\n            count = 1\n        elif l[i] == ' ':\n            break\n    result.sort(reverse=True)\n    return result\n\ndef solve():\n    n = int(input())\n    l = input()\n    d = dict()\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    for i in d:\n        d[i] = func(l + ' ', i)\n    for i in d:\n        for j in range(1, len(d[i])):\n            d[i][j] += d[i][j - 1]\n    temp = []\n    for i in d:\n        temp.append(d[i])\n    abc = max((len(i) for i in temp))\n    count = func1(temp, 0)\n    p = 1\n    for i in range(n + 1):\n        print(count, end=' ')\n        if p < abc:\n            count = max(count, func1(temp, p))\n            p += 1\n    print()\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "t = int(input())\nfor e in range(t):\n    n = int(input())\n    s = input()\n    h = {}\n    le = s[0]\n    c = 1\n    for i in range(1, len(s)):\n        if s[i] != le:\n            if le in h:\n                h[le].append([c, i - c])\n            else:\n                h[le] = [[c, i - c]]\n            le = s[i]\n            c = 1\n        else:\n            c = c + 1\n    if le in h:\n        h[le].append([c, len(s) - c])\n    else:\n        h[le] = [[c, len(s) - c]]\n    ans = []\n    for k in h:\n        h[k].sort(reverse=True)\n        for i in range(len(h[k])):\n            if i == 0:\n                h[k][i][0] = h[k][i][0] + 0\n            else:\n                cn = h[k][i][0]\n                h[k][i][0] = h[k][i - 1][0] + cn\n    for i in range(n + 1):\n        cnt = i\n        mx = 0\n        for k in h:\n            if i >= len(h[k]):\n                mx = max(mx, h[k][len(h[k]) - 1][0])\n            else:\n                mx = max(mx, h[k][i][0])\n        ans.append(mx)\n    print(*ans)", "T = int(input())\nfor ts in range(T):\n    N = int(input())\n    A = input()\n    if N == 1:\n        print(1, 1)\n    else:\n        l = dict()\n        longest = 0\n        current = A[0]\n        current_long = 1\n        for i in range(1, N):\n            if A[i] == current and i < N - 1:\n                current_long += 1\n            elif A[i] == current and i == N - 1:\n                current_long += 1\n                if current not in l.keys():\n                    l[current] = [current_long]\n                else:\n                    l[current].append(current_long)\n                current = A[i]\n                current_long = 1\n            elif i == N - 1:\n                if current not in l.keys():\n                    l[current] = [current_long]\n                else:\n                    l[current].append(current_long)\n                if A[N - 1] not in l.keys():\n                    l[A[N - 1]] = [1]\n                else:\n                    l[A[N - 1]].append(1)\n            else:\n                if current not in l.keys():\n                    l[current] = [current_long]\n                else:\n                    l[current].append(current_long)\n                current = A[i]\n                current_long = 1\n        for let in l.keys():\n            l[let].sort(reverse=True)\n        m = dict()\n        for let in l.keys():\n            m[let] = [l[let][0]]\n            for i in range(1, N + 1):\n                if i >= len(l[let]):\n                    m[let].append(m[let][i - 1])\n                else:\n                    m[let].append(m[let][i - 1] + l[let][i])\n        ans = [0] * (N + 1)\n        for i in range(N + 1):\n            curr_ans = 0\n            for letter in l.keys():\n                curr_ans = max(curr_ans, m[letter][i])\n            ans[i] = curr_ans\n        print(' '.join(map(str, ans)))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = list(input())\n    dic = {}\n    count = 1\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            if s[i - 1] in dic.keys():\n                dic[s[i - 1]].append(count)\n            else:\n                dic[s[i - 1]] = [count]\n            count = 1\n    if s[-1] in dic.keys():\n        dic[s[-1]].append(count)\n    else:\n        dic[s[-1]] = [count]\n    for key in dic.keys():\n        dic[key].sort(reverse=True)\n        for i in range(1, len(dic[key])):\n            dic[key][i] += dic[key][i - 1]\n    ans = []\n    for i in range(n + 1):\n        mx = -1\n        for key in dic.keys():\n            if len(dic[key]) >= 1 + i:\n                mx = max(mx, dic[key][i])\n            else:\n                mx = max(mx, dic[key][-1])\n        ans.append(mx)\n    print(*ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = str(input())\n    d = dict()\n    for j in range(97, 123):\n        d[chr(j)] = []\n    count = 1\n    pr = s[0]\n    for j in range(1, n):\n        if s[j] == s[j - 1]:\n            count += 1\n        else:\n            d[pr].append(count)\n            pr = s[j]\n            count = 1\n    d[pr].append(count)\n    max_l = 0\n    for j in range(97, 123):\n        d[chr(j)] = sorted(d[chr(j)], reverse=True)\n        max_l = max(max_l, len(d[chr(j)]))\n    ans_list = []\n    fin_list = []\n    for j in range(97, 123):\n        try:\n            fin_list.append(d[chr(j)][0])\n        except:\n            fin_list.append(0)\n    max_ans = max(fin_list)\n    ans_list.append(max_ans)\n    for j in range(1, max_l):\n        for k in range(97, 123):\n            try:\n                fin_list[k - ord('a')] += d[chr(k)][j]\n            except:\n                pass\n        max_ans = max(fin_list)\n        ans_list.append(max_ans)\n    for j in range(max_l, n + 2):\n        ans_list.append(max_ans)\n    for j in range(0, n):\n        print(ans_list[j], end=' ')\n    print(ans_list[-1])", "for tcase in range(int(input())):\n    n = int(input())\n    a = input()\n    b = [[] for c in range(26)]\n    b[ord(a[0]) - ord('a')].append(1)\n    for i in range(1, n):\n        if a[i] == a[i - 1]:\n            b[ord(a[i]) - ord('a')][-1] += 1\n        else:\n            b[ord(a[i]) - ord('a')].append(1)\n    for c in range(26):\n        b[c].sort(reverse=True)\n        b[c].extend([0] * (n + 1 - len(b[c])))\n        for i in range(n):\n            b[c][i + 1] += b[c][i]\n    ans = [max((b[c][k] for c in range(26))) for k in range(n + 1)]\n    print(' '.join(map(str, ans)))", "for _ in range(int(input())):\n    n = int(input())\n    dit = {c: [] for c in range(97, 123)}\n    s = input()\n    i = 0\n    gp = 1\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            gp += 1\n        else:\n            dit[ord(s[i - 1])].append(gp)\n            gp = 1\n    dit[ord(s[-1])].append(gp)\n    maxx = 0\n    for e in dit:\n        dit[e].sort()\n        dit[e] = dit[e][::-1]\n        arr = []\n        curr = 0\n        for i in range(len(dit[e])):\n            curr += dit[e][i]\n            arr.append(curr)\n        dit[e] = arr\n    ans = []\n    for i in range(n + 1):\n        for e in dit:\n            if len(dit[e]) > i:\n                maxx = max(maxx, dit[e][i])\n        ans.append(maxx)\n    print(*ans)", "from collections import defaultdict\nimport sys\ninput = sys.stdin.readline\nt = int(input())\n\ndef solve():\n    N = int(input())\n    d = defaultdict(list)\n    A = input().strip('\\n')\n    curr = A[0]\n    run = 1\n    for x in A[1:]:\n        if x == curr:\n            run += 1\n        else:\n            d[curr].append(run)\n            run = 1\n            curr = x\n    d[curr].append(run)\n    ans = [0] * (N + 1)\n    for nums in d.values():\n        nums.sort()\n        i = 0\n        j = len(nums) - 1\n        s = sum(nums)\n        while i <= j:\n            if ans[j - i] < s:\n                ans[j - i] = s\n            if nums[i] <= nums[j]:\n                s -= nums[i]\n                i += 1\n            else:\n                s -= nums[j]\n                j -= 1\n    for i in range(1, N + 1):\n        ans[i] = max(ans[i], ans[i - 1])\n    print(*ans)\nwhile t:\n    solve()\n    t -= 1", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = str(input())\n    dicto = {}\n    leng = 1\n    for j in range(1, N):\n        if A[j - 1] != A[j]:\n            try:\n                dicto[A[j - 1]].append(leng)\n            except:\n                dicto[A[j - 1]] = [leng]\n            leng = 1\n        else:\n            leng = leng + 1\n    try:\n        dicto[A[N - 1]].append(leng)\n    except:\n        dicto[A[N - 1]] = [leng]\n    dicto2 = {}\n    for (k, v) in dicto.items():\n        dicto[k].sort(reverse=True)\n        dicto2[k] = 0\n    for j in range(N + 1):\n        maxval = 0\n        for (k, v) in dicto.items():\n            if len(v) > j:\n                dicto2[k] = dicto2[k] + v[j]\n            if dicto2[k] > maxval:\n                maxval = dicto2[k]\n        if j == N:\n            print(maxval)\n        else:\n            print(maxval, end=' ')", "import sys\nimport os\nimport math\nfrom collections import *\nimport bisect\nfrom heapq import *\nfrom itertools import permutations, combinations\nif os.path.exists('input.txt') and os.path.exists('output.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    k1 = math.gcd(a, b)\n    k2 = a * b\n    return k2 // k1\n\ndef inp():\n    return map(int, input().strip().split(' '))\n\ndef lis():\n    return list(inp())\nmod = 998244353\n\ndef prim(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef dfs(adj, vis, u, l):\n    vis[u] = 1\n    l.add(u)\n    for i in adj[u]:\n        if vis[i] == 0:\n            dfs(adj, vis, i, l)\nmod = 10 ** 9 + 7\nma = 1002\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\n\ndef dfs(i, j, arr, vis, n, m):\n    vis[i][j] = 1\n    for x in range(4):\n        mx = i + dx[x]\n        my = j + dy[x]\n        if mx >= 0 and mx < n and (my >= 0) and (my < m) and (vis[mx][my] == 0):\n            if arr[i][j] >= arr[mx][my]:\n                dfs(mx, my, arr, vis, n, m)\n\ndef dfs(a, vis, node, c):\n    vis[node] = 1\n    c[0] += 1\n    if vis[a[node]] == 0:\n        dfs(a, vis, a[node], c)\nmod = 998244353\nmod = 10 ** 9 + 7\n\ndef finv(p, q):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nma = 2 * (10 ** 5 + 1)\n\ndef update(ind, val, n):\n    while ind <= n:\n        fenwick[ind] += val\n        ind += ind & -ind\n\ndef qsum(ind):\n    ans = 0\n    while ind > 0:\n        ans += fenwick[ind]\n        ind -= ind & -ind\n    return ans\nmod = 10 ** 9 + 7\n\ndef f(n):\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\n\ndef dfs(node, par, adj, dp, v):\n    dp[node] = 1\n    for i in adj[node]:\n        if i[0] != par:\n            dfs(i[0], node, adj, dp, v)\n            dp[node] += dp[i[0]]\n\ndef dfs1(node, par, adj, dp, v):\n    for i in adj[node]:\n        if i[0] != par:\n            if i[1] == 1:\n                v.append(dp[i[0]])\n            else:\n                dfs1(i[0], node, adj, dp, v)\n\ndef solve():\n    n = int(input())\n    s = input().split()[0]\n    s1 = set()\n    for i in range(n):\n        s1.add(s[i])\n    res = [0 for i in range(n + 1)]\n    for i in s1:\n        j = 0\n        v = []\n        while j < n:\n            key = s[j]\n            cnt = 0\n            while j < n and s[j] == key:\n                cnt += 1\n                j += 1\n            if key == i:\n                v.append(cnt)\n        v.sort(reverse=True)\n        s2 = 0\n        for i in range(len(v)):\n            s2 += v[i]\n            res[i] = max(res[i], s2)\n    for i in range(1, n + 1):\n        res[i] = max(res[i], res[i - 1])\n    print(*res)\nt = int(input())\nfor _ in range(t):\n    solve()", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nimport math, heapq, bisect\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    s = input().strip() + '$'\n    cnt = 1\n    d = defaultdict(list)\n    for i in range(n):\n        if s[i] == s[i + 1]:\n            cnt += 1\n        else:\n            d[s[i]].append(cnt)\n            cnt = 1\n    arr = list()\n    for key in d:\n        d[key] = sorted(d[key], reverse=True)\n        length = len(d[key])\n        for i in range(1, length):\n            d[key][i] += d[key][i - 1]\n        arr.append(d[key])\n    np = len(arr)\n    res = list()\n    maxi = 0\n    for k in range(n + 1):\n        for j in range(np):\n            if k < len(arr[j]):\n                maxi = max(maxi, arr[j][k])\n        res.append(maxi)\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    s = s + '$'\n    cnt = 1\n    alphabet = [[] for _ in range(26)]\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            cnt += 1\n        else:\n            alphabet[ord(s[i - 1]) - ord('a')].append(cnt)\n            cnt = 1\n    for i in range(26):\n        alphabet[i].sort(reverse=True)\n        for j in range(1, len(alphabet[i])):\n            alphabet[i][j] += alphabet[i][j - 1]\n    ans = []\n    for i in range(n + 1):\n        curr = 0\n        for j in range(26):\n            if alphabet[j] and i >= len(alphabet[j]):\n                curr = max(curr, alphabet[j][-1])\n            elif alphabet[j]:\n                curr = max(curr, alphabet[j][i])\n        ans.append(curr)\n    print(*ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    prev = None\n    temp = 0\n    d = defaultdict(list)\n    for (i, el) in enumerate(s):\n        if not prev or prev == el:\n            temp += 1\n        else:\n            d[prev].append(temp)\n            temp = 1\n        prev = el\n    d[prev].append(temp)\n    for j in range(26):\n        ch = chr(ord('a') + j)\n        if len(d[ch]):\n            d[ch].sort(reverse=True)\n            for i in range(1, len(d[ch])):\n                d[ch][i] += d[ch][i - 1]\n    res = []\n    for i in range(n + 1):\n        p = 0\n        for j in range(26):\n            ch = chr(ord('a') + j)\n            if len(d[ch]):\n                ind = min(i, len(d[ch]) - 1)\n                p = max(p, d[ch][ind])\n        res.append(p)\n    print(*res)"]