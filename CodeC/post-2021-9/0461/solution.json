["for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    hm1 = dict()\n    hm2 = dict()\n    ans = 0\n    M = float('-inf')\n    m = float('inf')\n    sort_ar = sorted(ar)\n    for i in range(n):\n        m = min(m, ar[i])\n        M = max(M, ar[i])\n        if ar[i] not in hm2:\n            if ar[i] not in hm1:\n                hm1[ar[i]] = 1\n            else:\n                hm1[ar[i]] += 1\n        elif hm2[ar[i]] > 1:\n            hm2[ar[i]] -= 1\n        else:\n            del hm2[ar[i]]\n        if sort_ar[i] not in hm1:\n            if sort_ar[i] not in hm2:\n                hm2[sort_ar[i]] = 1\n            else:\n                hm2[sort_ar[i]] += 1\n        elif hm1[sort_ar[i]] > 1:\n            hm1[sort_ar[i]] -= 1\n        else:\n            del hm1[sort_ar[i]]\n        if len(hm1) == 0 and len(hm2) == 0:\n            ans += M - m\n            M = float('-inf')\n            m = float('inf')\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    hm1 = dict()\n    hm2 = dict()\n    ans = 0\n    M = float('-inf')\n    m = float('inf')\n    sort_ar = sorted(ar)\n    for i in range(n):\n        m = min(m, ar[i])\n        M = max(M, ar[i])\n        if ar[i] not in hm2:\n            if ar[i] not in hm1:\n                hm1[ar[i]] = 1\n            else:\n                hm1[ar[i]] += 1\n        elif hm2[ar[i]] > 1:\n            hm2[ar[i]] -= 1\n        else:\n            del hm2[ar[i]]\n        if sort_ar[i] not in hm1:\n            if sort_ar[i] not in hm2:\n                hm2[sort_ar[i]] = 1\n            else:\n                hm2[sort_ar[i]] += 1\n        elif hm1[sort_ar[i]] > 1:\n            hm1[sort_ar[i]] -= 1\n        else:\n            del hm1[sort_ar[i]]\n        if len(hm1) == 0 and len(hm2) == 0:\n            ans += M - m\n            M = float('-inf')\n            m = float('inf')\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    hm1 = dict()\n    hm2 = dict()\n    ans = 0\n    M = float('-inf')\n    m = float('inf')\n    sort_ar = sorted(ar)\n    for i in range(n):\n        m = min(m, ar[i])\n        M = max(M, ar[i])\n        if ar[i] not in hm2:\n            if ar[i] not in hm1:\n                hm1[ar[i]] = 1\n            else:\n                hm1[ar[i]] += 1\n        elif hm2[ar[i]] > 1:\n            hm2[ar[i]] -= 1\n        else:\n            del hm2[ar[i]]\n        if sort_ar[i] not in hm1:\n            if sort_ar[i] not in hm2:\n                hm2[sort_ar[i]] = 1\n            else:\n                hm2[sort_ar[i]] += 1\n        elif hm1[sort_ar[i]] > 1:\n            hm1[sort_ar[i]] -= 1\n        else:\n            del hm1[sort_ar[i]]\n        if len(hm1) == 0 and len(hm2) == 0:\n            ans += M - m\n            M = float('-inf')\n            m = float('inf')\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    hm1 = dict()\n    hm2 = dict()\n    ans = 0\n    M = float('-inf')\n    m = float('inf')\n    sort_ar = sorted(ar)\n    for i in range(n):\n        m = min(m, ar[i])\n        M = max(M, ar[i])\n        if ar[i] not in hm2:\n            if ar[i] not in hm1:\n                hm1[ar[i]] = 1\n            else:\n                hm1[ar[i]] += 1\n        elif hm2[ar[i]] > 1:\n            hm2[ar[i]] -= 1\n        else:\n            del hm2[ar[i]]\n        if sort_ar[i] not in hm1:\n            if sort_ar[i] not in hm2:\n                hm2[sort_ar[i]] = 1\n            else:\n                hm2[sort_ar[i]] += 1\n        elif hm1[sort_ar[i]] > 1:\n            hm1[sort_ar[i]] -= 1\n        else:\n            del hm1[sort_ar[i]]\n        if len(hm1) == 0 and len(hm2) == 0:\n            ans += M - m\n            M = float('-inf')\n            m = float('inf')\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    hm1 = dict()\n    hm2 = dict()\n    ans = 0\n    M = float('-inf')\n    m = float('inf')\n    sort_ar = sorted(ar)\n    for i in range(n):\n        m = min(m, ar[i])\n        M = max(M, ar[i])\n        if ar[i] not in hm2:\n            if ar[i] not in hm1:\n                hm1[ar[i]] = 1\n            else:\n                hm1[ar[i]] += 1\n        elif hm2[ar[i]] > 1:\n            hm2[ar[i]] -= 1\n        else:\n            del hm2[ar[i]]\n        if sort_ar[i] not in hm1:\n            if sort_ar[i] not in hm2:\n                hm2[sort_ar[i]] = 1\n            else:\n                hm2[sort_ar[i]] += 1\n        elif hm1[sort_ar[i]] > 1:\n            hm1[sort_ar[i]] -= 1\n        else:\n            del hm1[sort_ar[i]]\n        if len(hm1) == 0 and len(hm2) == 0:\n            ans += M - m\n            M = float('-inf')\n            m = float('inf')\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    li = sorted(l)\n    x = 0\n    ans = 0\n    while x < n:\n        mx = li[x]\n        mn = li[x]\n        for j in range(x, n + 1):\n            mx = max(mx, l[j])\n            if mx == li[j]:\n                ans += mx - mn\n                x = j + 1\n                break\n    print(ans)", "ans = ''\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = arr.copy()\n    brr.sort()\n    res = 0\n    maxNum = arr[0]\n    minNum = brr[0]\n    (sumA, sumB) = (0, 0)\n    for i in range(n):\n        sumA += arr[i]\n        sumB += brr[i]\n        maxNum = max(maxNum, arr[i])\n        if sumA == sumB:\n            res += maxNum - minNum\n            if i + 1 < n:\n                maxNum = arr[i + 1]\n                minNum = brr[i + 1]\n            (sumA, sumB) = (0, 0)\n    ans += str(res) + '\\n'\nprint(ans)", "ans = ''\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = arr.copy()\n    brr.sort()\n    res = 0\n    maxNum = arr[0]\n    minNum = arr[0]\n    (sumA, sumB) = (0, 0)\n    for i in range(n):\n        sumA += arr[i]\n        sumB += brr[i]\n        maxNum = max(maxNum, arr[i])\n        minNum = min(minNum, brr[i])\n        if sumA == sumB:\n            res += maxNum - minNum\n            if i + 1 < n:\n                maxNum = arr[i + 1]\n                minNum = arr[i + 1]\n            (sumA, sumB) = (0, 0)\n    ans += str(res) + '\\n'\nprint(ans)", "for sharma in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    i = 0\n    ans1 = 0\n    while i < n:\n        mn = b[i]\n        mx = b[i]\n        for j in range(i, n + 1):\n            mx = max(mx, a[j])\n            if mx == b[j]:\n                ans1 += mx - mn\n                i = j + 1\n                break\n    print(ans1)", "for t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    sortedA = list(A)\n    sortedA.sort()\n    i = 0\n    cost = 0\n    while i < len(A):\n        j = int(i)\n        while j < len(A):\n            temp = A[i:j + 1]\n            temp.sort()\n            if temp == sortedA[i:j + 1]:\n                cost += max(sortedA[i:j + 1]) - min(sortedA[i:j + 1])\n                i = int(j + 1)\n                break\n            else:\n                j += 1\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    no = list(map(int, input().split()))\n    sno = sorted(no)\n    ans = 0\n    place = dict()\n    for i in range(n):\n        place[sno[i]] = i\n    i = 0\n    while i < n and no[i] == sno[i]:\n        i += 1\n    j = n - 1\n    while j >= 0 and no[j] == sno[j]:\n        j -= 1\n    if j + 1 > i:\n        ans = max(no[i:j + 1]) - min(no[i:j + 1])\n        (intervals, count) = ([], 0)\n        for k in range(i, j + 1):\n            if no[k] != sno[k]:\n                intervals.append([k, place[no[k]]])\n                count += 1\n        k = 0\n        while k + 1 < count:\n            if intervals[k][1] >= intervals[k + 1][0]:\n                intervals[k][1] = max(intervals[k][1], intervals[k + 1][1])\n                del intervals[k + 1]\n                count -= 1\n            else:\n                k += 1\n        t = 0\n        for k in range(count):\n            t += max(no[intervals[k][0]:intervals[k][1] + 1]) - min(no[intervals[k][0]:intervals[k][1] + 1])\n        ans = min(ans, t)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    sa = sorted(a)\n    place = dict()\n    for i in range(n):\n        place[sa[i]] = i\n    i = 0\n    while i < n and a[i] == sa[i]:\n        i += 1\n    j = n - 1\n    while j >= 0 and a[j] == sa[j]:\n        j -= 1\n    if j + 1 > i:\n        ans = max(a[i:j + 1]) - min(a[i:j + 1])\n        (intervals, l) = ([], 0)\n        for k in range(i, j + 1):\n            if a[k] != sa[k]:\n                intervals.append([k, place[a[k]]])\n                l += 1\n        k = 0\n        while k + 1 < l:\n            if intervals[k][1] >= intervals[k + 1][0]:\n                intervals[k][1] = max(intervals[k][1], intervals[k + 1][1])\n                del intervals[k + 1]\n                l -= 1\n            else:\n                k += 1\n        temp = 0\n        for k in range(l):\n            temp += max(a[intervals[k][0]:intervals[k][1] + 1]) - min(a[intervals[k][0]:intervals[k][1] + 1])\n        ans = min(ans, temp)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [(x, a[x]) for x in range(len(a))]\n    a.sort(key=lambda i: i[1])\n    output = 0\n    s = -1\n    e = -1\n    for i in range(n):\n        if s == -1:\n            if a[i][0] != i:\n                s = i\n                e = a[i][0]\n        elif a[i][0] > e:\n            e = a[i][0]\n        elif e == i:\n            output += a[e][1] - a[s][1]\n            e = -1\n            s = -1\n    print(output)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    s = 0\n    mn = b[n - 1]\n    mx = b[0]\n    t = 0\n    u = 0\n    for j in range(n):\n        if a[j] == b[j]:\n            if t == 0:\n                continue\n            mn = min(mn, a[j])\n            mx = max(mx, a[j])\n        else:\n            mn = min(mn, a[j])\n            mx = max(mx, a[j])\n            r = a[u:j + 1]\n            r.sort()\n            if r == b[u:j + 1]:\n                s += mx - mn\n                t = 0\n                continue\n            if t == 0:\n                t = 1\n                mn = a[j]\n                mx = a[j]\n                u = j\n    if t == 1:\n        t = 0\n        s += mx - mn\n    print(s)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    s = 0\n    mn = b[n - 1]\n    mx = b[0]\n    t = 0\n    u = 0\n    for j in range(n):\n        if a[j] == b[j]:\n            if t == 0:\n                continue\n            k = mn\n            mn = min(mn, a[j])\n            mx = max(mx, a[j])\n            r = a[u:j]\n            r.sort()\n            if r == b[u:j]:\n                s += mx - k\n                t = 0\n        else:\n            mn = min(mn, a[j])\n            mx = max(mx, a[j])\n            r = a[u:j + 1]\n            r.sort()\n            if r == b[u:j + 1]:\n                s += mx - mn\n                t = 0\n                continue\n            if t == 0:\n                t = 1\n                mn = a[j]\n                mx = a[j]\n                u = j\n    if t == 1:\n        t = 0\n        s += mx - mn\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = [0] * n\n    mn = [0] * n\n    mx[0] = a[0]\n    mn[n - 1] = a[n - 1]\n    for i in range(1, n):\n        mx[i] = max(mx[i - 1], a[i])\n    for i in range(n - 2, -1, -1):\n        mn[i] = min(mn[i + 1], a[i])\n    res = 0\n    maxi = 0\n    mini = 10 ** 12\n    for i in range(n - 1):\n        maxi = max(maxi, a[i])\n        mini = min(mini, a[i])\n        if mx[i] < mn[i + 1]:\n            res += maxi - mini\n            maxi = 0\n            mini = 10 ** 12\n    maxi = max(maxi, a[n - 1])\n    mini = min(mini, a[n - 1])\n    res += maxi - mini\n    print(res)", "import math\nfrom collections import Counter\n\ndef calc(data):\n    result = sorted(data)\n    total = 0\n    start = 0\n    cnt = Counter()\n    for i in range(len(data)):\n        cnt[result[i]] += 1\n        cnt[data[i]] -= 1\n        if sum(cnt.elements()) == 0:\n            if i > start:\n                total += result[i] - result[start]\n            start = i + 1\n            cnt.clear()\n    return total\nfor _ in range(int(input())):\n    _ = input()\n    data = list(map(int, input().split()))\n    print(calc(data))", "for _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    hm1 = dict()\n    hm2 = dict()\n    ans = 0\n    M = float('-inf')\n    m = float('inf')\n    sort_ar = sorted(ar)\n    for i in range(n):\n        m = min(m, ar[i])\n        M = max(M, ar[i])\n        if ar[i] not in hm2:\n            if ar[i] not in hm1:\n                hm1[ar[i]] = 1\n            else:\n                hm1[ar[i]] += 1\n        elif hm2[ar[i]] > 1:\n            hm2[ar[i]] -= 1\n        else:\n            del hm2[ar[i]]\n        if sort_ar[i] not in hm1:\n            if sort_ar[i] not in hm2:\n                hm2[sort_ar[i]] = 1\n            else:\n                hm2[sort_ar[i]] += 1\n        elif hm1[sort_ar[i]] > 1:\n            hm1[sort_ar[i]] -= 1\n        else:\n            del hm1[sort_ar[i]]\n        if len(hm1) == 0 and len(hm2) == 0:\n            ans += M - m\n            M = float('-inf')\n            m = float('inf')\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s_a = sorted(a)\n    ab = []\n    ba = []\n    ans = 0\n    last_ind = 0\n    for i in range(n):\n        ab.append(a[i])\n        ba.append(s_a[i])\n        if a[i] in ab and a[i] in ba:\n            ab.remove(a[i])\n            ba.remove(a[i])\n        if s_a[i] in ab and s_a[i] in ba:\n            ab.remove(s_a[i])\n            ba.remove(s_a[i])\n        if len(ab) == 0 and len(ba) == 0:\n            ans = ans + s_a[i] - s_a[last_ind]\n            last_ind = i + 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s_a = sorted(a)\n    ab = []\n    ba = []\n    ans = 0\n    last_ind = 0\n    for i in range(n):\n        ab.append(a[i])\n        ba.append(s_a[i])\n        if ab.count(a[i]) and ba.count(a[i]):\n            ab.remove(a[i])\n            ba.remove(a[i])\n        if ab.count(s_a[i]) and ba.count(s_a[i]):\n            ab.remove(s_a[i])\n            ba.remove(s_a[i])\n        if len(ab) == 0 and len(ba) == 0:\n            ans = ans + s_a[i] - s_a[last_ind]\n            last_ind = i + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    count = 0\n    i = 0\n    dr = sorted(arr)\n    j = n - 1\n    while i < n:\n        if arr[i] == dr[i]:\n            i += 1\n        else:\n            break\n    while j > 0:\n        if arr[j] == dr[j]:\n            j -= 1\n        else:\n            break\n    d = {}\n    for i in range(n):\n        d[arr[i]] = i\n    x = -1\n    y = -1\n    cost = 0\n    f = i\n    for i in range(n):\n        if arr[i] == dr[i] and x == -1:\n            continue\n        if x == -1:\n            y = i\n        x = max(x, d[arr[i]])\n        x = max(x, d[dr[i]])\n        if x == i:\n            cost += max(arr[y:i + 1]) - min(arr[y:i + 1])\n            x = -1\n    print(cost)", "import bisect\n\ndef Cloning(arr):\n    carr = []\n    carr.extend(arr)\n    return carr\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr2 = Cloning(arr)\n    arr2.sort()\n    ans = 0\n    compare_arr = []\n    compare_arr2 = []\n    for i in range(n):\n        bisect.insort(compare_arr, arr[i])\n        compare_arr2.append(arr2[i])\n        if compare_arr == compare_arr2:\n            ans += abs(compare_arr[0] - compare_arr[len(compare_arr) - 1])\n            compare_arr.clear()\n            compare_arr2.clear()\n    print(ans)\n    t = t - 1", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    Answer = max(a) - min(a)\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] != b[i]:\n            d1 = defaultdict(int)\n            d2 = defaultdict(int)\n            d1[a[i]] += 1\n            d2[b[i]] += 1\n            j = i + 1\n            while j < n and d1 != d2:\n                d1[a[j]] += 1\n                d2[b[j]] += 1\n                j += 1\n            j -= 1\n            ans += b[j] - b[i]\n            i = j + 1\n        else:\n            i += 1\n    print(min(ans, Answer))", "def findans(l, n):\n    sort_l = sorted(l)\n    s = dict()\n    t = dict()\n    i = 0\n    c = 0\n    while i < n:\n        if l[i] != sort_l[i]:\n            s.clear()\n            t.clear()\n            s[l[i]] = 1\n            t[sort_l[i]] = 1\n            mini = sort_l[i]\n            i += 1\n            while i < n and t != s:\n                maxi = sort_l[i]\n                if s.get(l[i]):\n                    s[l[i]] += 1\n                else:\n                    s[l[i]] = 1\n                if t.get(sort_l[i]):\n                    t[sort_l[i]] += 1\n                else:\n                    t[sort_l[i]] = 1\n                i += 1\n            c += maxi - mini\n        else:\n            i += 1\n    return c\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(findans(l, n))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    i = 0\n    ans1 = 0\n    while i < n:\n        mn = b[i]\n        mx = b[i]\n        for j in range(i, n + 1):\n            mx = max(mx, a[j])\n            if mx == b[j]:\n                ans1 += mx - mn\n                i = j + 1\n                break\n    print(ans1)", "for kfjdkf in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    i = 0\n    ans1 = 0\n    while i < n:\n        mn = b[i]\n        mx = b[i]\n        for j in range(i, n + 1):\n            mx = max(mx, a[j])\n            if mx == b[j]:\n                ans1 += mx - mn\n                i = j + 1\n                break\n    print(ans1)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    dp = [float('inf')] * n\n    dp[-1] = A[-1]\n    for i in range(n - 2, -1, -1):\n        dp[i] = min(dp[i + 1], A[i])\n    ans = 0\n    i = 0\n    mx = A[0]\n    mn = float('inf')\n    while i < n - 1:\n        mx = max(mx, A[i])\n        if mx <= dp[i]:\n            i += 1\n            mx = max(A[i], mx)\n        else:\n            mx = max(mx, A[i])\n            mn = A[i]\n            while mx > dp[i] and i < n - 1:\n                mx = max(mx, A[i])\n                i += 1\n                mn = min(mn, A[i])\n            ans += mx - mn\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = list(sorted(l))\n    (m, m1) = ([], [])\n    ans = 0\n    for i in range(n):\n        m.append(l[i])\n        m1.append(l1[i])\n        if sorted(m) == sorted(m1):\n            ans += max(m1) - min(m1)\n            m.clear()\n            m1.clear()\n        else:\n            continue\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    aSort = sorted(a)\n    cost = 0\n    tmpA = list()\n    tmpB = list()\n    for i in range(n):\n        tmpA.append(a[i])\n        tmpB.append(aSort[i])\n        tmpA.sort()\n        tmpB.sort()\n        if tmpA != tmpB:\n            continue\n        else:\n            cost += max(tmpA) - min(tmpA)\n            tmpA.clear()\n            tmpB.clear()\n    print(cost)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = list(sorted(l))\n    (m, m1) = ([], [])\n    ans = 0\n    for i in range(n):\n        m.append(l[i])\n        m1.append(l1[i])\n        if sorted(m) == sorted(m1):\n            ans += max(m1) - min(m1)\n            m.clear()\n            m1.clear()\n        else:\n            continue\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = [0] * n\n    mn = [0] * n\n    mx[0] = l[0]\n    mn[n - 1] = l[n - 1]\n    for i in range(1, n):\n        mx[i] = max(l[i], mx[i - 1])\n    for i in range(n - 2, -1, -1):\n        mn[i] = min(l[i], mn[i + 1])\n    ans = 0\n    mxc = -10000000000000000\n    mnc = 10000000000000000\n    for i in range(n - 1):\n        mxc = max(l[i], mxc)\n        mnc = min(l[i], mnc)\n        if mx[i] < mn[i + 1]:\n            ans += mxc - mnc\n            mxc = -10000000000000000\n            mnc = 10000000000000000\n    mxc = max(l[n - 1], mxc)\n    mnc = min(l[n - 1], mnc)\n    ans += mxc - mnc\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sorted(a)\n    l1 = []\n    l2 = []\n    ans = 0\n    for i in range(n):\n        l1.append(a[i])\n        l2.append(s[i])\n        l1.sort()\n        l2.sort()\n        if l1 != l2:\n            continue\n        else:\n            ans += max(l1) - min(l1)\n            l1 = []\n            l2 = []\n    print(ans)", "for t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    sortedA = list(A)\n    sortedA.sort()\n    cost = 0\n    i = 0\n    while i < N:\n        j = int(i)\n        while j < N:\n            temp = A[i:j + 1]\n            temp.sort()\n            if temp == sortedA[i:j + 1]:\n                cost += max(A[i:j + 1]) - min(A[i:j + 1])\n                i = int(j + 1)\n                break\n            else:\n                j += 1\n    print(cost)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    Answer = max(a) - min(a)\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] != b[i]:\n            d1 = defaultdict(int)\n            d2 = defaultdict(int)\n            d1[a[i]] += 1\n            d2[b[i]] += 1\n            j = i + 1\n            while j < n and d1 != d2:\n                d1[a[j]] += 1\n                d2[b[j]] += 1\n                j += 1\n            j -= 1\n            ans += b[j] - b[i]\n            i = j + 1\n        else:\n            i += 1\n    print(min(ans, Answer))", "for _ in range(int(input())):\n    l = int(input())\n    arr = [int(i) for i in input().split()]\n    arrs = sorted(arr)\n    i = 0\n    ans = 0\n    while i < l:\n        mx = arrs[i]\n        mn = arrs[i]\n        for j in range(i, l + 1):\n            mx = max(mx, arr[j])\n            if mx == arrs[j]:\n                ans += mx - mn\n                i = j + 1\n                break\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    l = sorted(arr)\n    if arr == l:\n        print(0)\n        continue\n    i = 0\n    ans = l[-1] - l[0]\n    maxx = 0\n    while i < n:\n        if arr[i] != l[i]:\n            dica = defaultdict(int)\n            dicb = defaultdict(int)\n            dica[arr[i]] += 1\n            dicb[l[i]] += 1\n            j = i + 1\n            while j < n and dica != dicb:\n                dica[arr[j]] += 1\n                dicb[l[j]] += 1\n                j += 1\n            j -= 1\n            maxx += l[j] - l[i]\n            i = j + 1\n        else:\n            i += 1\n    print(min(maxx, ans))", "import math\nimport statistics\n\ndef func(N, arr):\n    dp = [float('inf') for i in range(N)]\n    dp[-1] = arr[-1]\n    for i in range(N - 2, -1, -1):\n        dp[i] = min(dp[i + 1], arr[i])\n    ans = 0\n    i = 0\n    maxx = arr[0]\n    minn = float('inf')\n    while i < N - 1:\n        maxx = max(maxx, arr[i])\n        if maxx <= dp[i]:\n            i += 1\n            maxx = max(maxx, arr[i])\n        else:\n            maxx = max(maxx, arr[i])\n            minn = arr[i]\n            while maxx > dp[i] and i < N - 1:\n                maxx = max(maxx, arr[i])\n                i += 1\n                minn = min(minn, arr[i])\n            ans += maxx - minn\n    return ans\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(func(N, arr))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lsts = sorted(lst)\n    ans = 0\n    j = 0\n    c1 = 0\n    k = 0\n    while j < n:\n        if sorted(lst[k:j + 1]) == lsts[k:j + 1] and lsts[j] != lst[j]:\n            ans += max(lsts[k:j + 1]) - min(lsts[k:j + 1])\n            j += 1\n            k = j\n            c1 = 0\n        elif lsts[j] == lst[j] and c1 == 0:\n            j += 1\n            k += 1\n        else:\n            j += 1\n            c1 += 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l2 = sorted(l)\n    l3 = []\n    c = l[0]\n    ans = 0\n    for j in l:\n        if j > c:\n            c = j\n        l3.append(c)\n    k = 0\n    for j in range(n):\n        if l2[j] == l3[j]:\n            ans = ans + l3[j] - min(l2[k:j + 1])\n            k = j + 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l2 = sorted(l)\n    l3 = []\n    c = l[0]\n    ans = 0\n    for j in l:\n        if j > c:\n            c = j\n        l3.append(c)\n    k = 0\n    for j in range(n):\n        if l2[j] == l3[j]:\n            ans = ans + l2[j] - l2[k]\n            k = j + 1\n    print(ans)", "for t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    sortedA = list(A)\n    sortedA.sort()\n    cost = 0\n    i = 0\n    while i < N:\n        j = int(i)\n        while j < N:\n            temp = A[i:j + 1]\n            temp.sort()\n            if temp == sortedA[i:j + 1]:\n                cost += max(A[i:j + 1]) - min(A[i:j + 1])\n                i = int(j + 1)\n                break\n            else:\n                j += 1\n    print(cost)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [i for i in a]\n    b.sort()\n    i = 0\n    ans = 0\n    while i < n:\n        while i < n and a[i] == b[i]:\n            i += 1\n        if i >= n:\n            break\n        mx = a[i]\n        mn = b[i]\n        c = 0\n        while i < n:\n            if mx == a[i]:\n                c += 1\n            elif mx < a[i]:\n                mx = a[i]\n                c = 1\n            if mx == b[i]:\n                c -= 1\n            i += 1\n            if c == 0:\n                ans += mx - mn\n                break\n    print(ans)", "import math\nn = int(input())\nfor _ in range(n):\n    s = int(input())\n    A = list(map(int, input().split()))\n    dp = [math.inf] * s\n    dp[-1] = A[-1]\n    for i in range(s - 2, -1, -1):\n        dp[i] = min(dp[i + 1], A[i])\n    Ans = 0\n    i = 0\n    mx = A[0]\n    mn = math.inf\n    while i < s - 1:\n        mx = max(mx, A[i])\n        if mx <= dp[i]:\n            i += 1\n            mx = max(mx, A[i])\n        else:\n            mx = max(mx, A[i])\n            mn = A[i]\n            while mx > dp[i] and i < s - 1:\n                mx = max(mx, A[i])\n                i += 1\n                mn = min(mn, A[i])\n            Ans += mx - mn\n    print(Ans)", "from typing import Counter\n\ndef binary_search(arr, low, high, x):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binary_search(arr, low, mid - 1, x)\n        else:\n            return binary_search(arr, mid + 1, high, x)\n    else:\n        return -1\n\ndef f(l, x):\n    return l.index(x)\n\ndef last(l, n, x):\n    return n - 1 - l[::-1].index(x)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sl = sorted(l)\n    ans = 0\n    d1 = Counter()\n    d2 = Counter()\n    lis = []\n    i = 0\n    start = 0\n    while i < n:\n        d1[l[i]] += 1\n        d2[sl[i]] += 1\n        if d1 == d2:\n            lis.append((start, i))\n            start = i + 1\n            d1 = Counter()\n            d2 = Counter()\n        i += 1\n    for i in lis:\n        ans += sl[i[1]] - sl[i[0]]\n    print(ans)", "import math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2 ** 20)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    b = []\n    for i in range(n):\n        b.append((a[i], i))\n    b.sort()\n    seg = []\n    for i in range(n):\n        seg.append([min(i, b[i][1]), max(i, b[i][1])])\n    seg.sort()\n    m_seg = []\n    prv = seg[0][:]\n    for i in range(1, len(seg)):\n        if prv[1] >= seg[i][0]:\n            prv[1] = max(seg[i][1], prv[1])\n        else:\n            m_seg.append(prv)\n            prv = seg[i][:]\n    m_seg.append(prv)\n    ans = 0\n    for j in m_seg:\n        mi = 10 ** 9 + 1\n        mx = -1\n        for i in range(j[0], j[1] + 1):\n            mi = min(a[i], mi)\n            mx = max(a[i], mx)\n        ans += mx - mi\n    print(min(ans, max(a) - min(a)))", "import math\nimport collections\nfrom sys import stdin, stdout, setrecursionlimit\nfrom bisect import bisect_left as bsl\nfrom bisect import bisect_right as bsr\nimport heapq as hq\nsetrecursionlimit(2 ** 20)\nt = 1\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    b = []\n    for i in range(n):\n        b.append((a[i], i))\n    b.sort()\n    seg = []\n    for i in range(n):\n        seg.append([min(i, b[i][1]), max(i, b[i][1])])\n    seg.sort()\n    m_seg = []\n    prv = seg[0][:]\n    for i in range(1, len(seg)):\n        if prv[1] >= seg[i][0]:\n            prv[1] = max(seg[i][1], prv[1])\n        else:\n            m_seg.append(prv)\n            prv = seg[i][:]\n    m_seg.append(prv)\n    ans = 0\n    for j in m_seg:\n        mi = 10 ** 9 + 1\n        mx = -1\n        for i in range(j[0], j[1] + 1):\n            mi = min(a[i], mi)\n            mx = max(a[i], mx)\n        ans += mx - mi\n    print(min(ans, max(a) - min(a)))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a1 = [0] * n\n    a2 = [0] * n\n    big = a[0]\n    for i in range(n):\n        if big < a[i]:\n            big = a[i]\n        a1[i] = big\n    small = a[-1]\n    for i in range(n - 1, -1, -1):\n        if small > a[i]:\n            small = a[i]\n        a2[i] = small\n    ans = 0\n    r = 10 ** 18\n    for i in range(n - 1, -1, -1):\n        if a[i] == a1[i]:\n            if a[i] <= r:\n                ans += a1[i] - a2[i]\n            else:\n                ans += r - a2[i]\n            r = a2[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    a1 = [0] * n\n    a2 = [0] * n\n    big = a[0]\n    for i in range(n):\n        if big < a[i]:\n            big = a[i]\n        a1[i] = big\n    small = a[-1]\n    for i in range(n - 1, -1, -1):\n        if small > a[i]:\n            small = a[i]\n        a2[i] = small\n    ans = 0\n    r = 10 ** 18\n    for i in range(n - 1, -1, -1):\n        if a[i] == a1[i]:\n            if a[i] <= r:\n                ans += a1[i] - a2[i]\n            else:\n                ans += r - a2[i]\n            r = a2[i]\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = sorted(l)\n    (a, b, ans) = (0, 0, 0)\n    (mi, ma) = (1000000001, -1)\n    for i in range(n):\n        a += l[i]\n        b += k[i]\n        mi = min(mi, l[i])\n        ma = max(ma, l[i])\n        if a == b:\n            ans += ma - mi\n            (a, b) = (0, 0)\n            (mi, ma) = (1000000001, -1)\n    print(ans)", "test = int(input())\nfor _ in range(test):\n    number = int(input())\n    array = list(map(int, input().split()))\n    sort = sorted(array)\n    temp = 0\n    Answer = 0\n    while temp < number:\n        new1 = sort[temp]\n        new2 = sort[temp]\n        for n in range(temp, number + 1):\n            new2 = max(new2, array[n])\n            if new2 == sort[n]:\n                Answer += new2 - new1\n                temp = n + 1\n                break\n    print(Answer)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sort_arr = sorted(arr)\n    dicti = {}\n    for i in range(n - 1, -1, -1):\n        if arr[i] in dicti:\n            dicti[arr[i]].append(i)\n        else:\n            dicti[arr[i]] = [i]\n    start = 0\n    end = 0\n    ans = 0\n    for i in range(n):\n        ind = dicti[sort_arr[i]].pop()\n        end = max(end, ind)\n        if i == end:\n            ans += sort_arr[end] - sort_arr[start]\n            start = end + 1\n    print(ans)", "import math\nn = int(input())\nfor _ in range(n):\n    s = int(input())\n    A = list(map(int, input().split()))\n    dp = [math.inf] * s\n    dp[-1] = A[-1]\n    for i in range(s - 2, -1, -1):\n        dp[i] = min(dp[i + 1], A[i])\n    Ans = 0\n    i = 0\n    mx = A[0]\n    mn = math.inf\n    while i < s - 1:\n        mx = max(mx, A[i])\n        if mx <= dp[i]:\n            i += 1\n            mx = max(mx, A[i])\n        else:\n            mx = max(mx, A[i])\n            mn = A[i]\n            while mx > dp[i] and i < s - 1:\n                mx = max(mx, A[i])\n                i += 1\n                mn = min(mn, A[i])\n            Ans += mx - mn\n    print(Ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    sa = sorted(a)\n    place = dict()\n    for i in range(n):\n        place[sa[i]] = i\n    i = 0\n    while i < n and a[i] == sa[i]:\n        i += 1\n    j = n - 1\n    while j >= 0 and a[j] == sa[j]:\n        j -= 1\n    if j + 1 > i:\n        ans = max(a[i:j + 1]) - min(a[i:j + 1])\n        (intervals, l) = ([], 0)\n        for k in range(i, j + 1):\n            if a[k] != sa[k]:\n                intervals.append([k, place[a[k]]])\n                l += 1\n        k = 0\n        while k + 1 < l:\n            if intervals[k][1] >= intervals[k + 1][0]:\n                intervals[k][1] = max(intervals[k][1], intervals[k + 1][1])\n                del intervals[k + 1]\n                l -= 1\n            else:\n                k += 1\n        temp = 0\n        for k in range(l):\n            temp += max(a[intervals[k][0]:intervals[k][1] + 1]) - min(a[intervals[k][0]:intervals[k][1] + 1])\n        ans = min(ans, temp)\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    Answer = max(a) - min(a)\n    ans = 0\n    i = 0\n    while i < n:\n        if a[i] != b[i]:\n            d1 = defaultdict(int)\n            d2 = defaultdict(int)\n            d1[a[i]] += 1\n            d2[b[i]] += 1\n            j = i + 1\n            while j < n and d1 != d2:\n                d1[a[j]] += 1\n                d2[b[j]] += 1\n                j += 1\n            j -= 1\n            ans += b[j] - b[i]\n            i = j + 1\n        else:\n            i += 1\n    print(min(ans, Answer))", "import sys\ntry:\n    for t in range(int(sys.stdin.readline())):\n        n = int(sys.stdin.readline())\n        a = list(map(int, sys.stdin.readline().split()))\n        d = sorted(a)\n        i = 0\n        j = n - 1\n        st = -1\n        ed = -1\n        while i < j:\n            if d[i] == a[i] and st == -1:\n                i = i + 1\n            elif st == -1:\n                st = i\n            if d[j] == a[j] and ed == -1:\n                j = j - 1\n            elif ed == -1:\n                ed = j\n            if st != -1 and ed != -1:\n                break\n        if st == -1 and ed == -1:\n            print(0)\n            continue\n        d1 = {}\n        d2 = {}\n        ma = d[ed] - d[st]\n        temp = 0\n        j = st\n        for i in range(st, ed + 1):\n            if a[i] == d[i] and d1 == d2:\n                d1 = {}\n                d2 = {}\n                j = i + 1\n            else:\n                if a[i] not in d1.keys():\n                    d1[a[i]] = 1\n                else:\n                    d1[a[i]] = d1[a[i]] + 1\n                if d[i] not in d2.keys():\n                    d2[d[i]] = 1\n                else:\n                    d2[d[i]] = d2[d[i]] + 1\n                if d1 == d2:\n                    temp = temp + d[i] - d[j]\n                    d1 = {}\n                    d2 = {}\n                    j = i + 1\n        print(temp)\nexcept EOFError as e:\n    pass", "for kfjdkf in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    i = 0\n    ans1 = 0\n    while i < n:\n        mn = b[i]\n        mx = b[i]\n        for j in range(i, n + 1):\n            mx = max(mx, a[j])\n            if mx == b[j]:\n                ans1 += mx - mn\n                i = j + 1\n                break\n    print(ans1)", "import sys\nfrom collections import defaultdict\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = a[:]\n    b.sort()\n    ind = defaultdict(lambda : -1)\n    for i in range(n):\n        ind[a[i]] = i\n    x = -1\n    y = -1\n    for i in range(n):\n        if a[i] != b[i]:\n            y = i\n            break\n    cost = 0\n    for i in range(n):\n        if a[i] == b[i] and x == -1:\n            continue\n        if x == -1:\n            y = i\n        x = max(x, ind[b[i]])\n        x = max(x, ind[a[i]])\n        if i == x:\n            a[y:x + 1] = sorted(a[y:x + 1])\n            cost += a[x] - a[y]\n            x = -1\n    print(cost)", "from sys import *\nfrom bisect import *\ninput = stdin.readline\nfor u in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = sorted(l)\n    x = n - 1\n    s = 0\n    while x > 0:\n        if l[x] != d[x]:\n            (mx, mn) = (d[x], l[x])\n            i = x\n            while i > 0:\n                if l[i] != d[x]:\n                    i -= 1\n                else:\n                    break\n                mn = min(mn, l[i])\n            p = bisect_left(d, mn)\n            for j in range(p, i):\n                mn = min(mn, l[j])\n            while d[p] != mn:\n                p = bisect_left(d, mn)\n                for j in range(p, i):\n                    mn = min(mn, l[j])\n            s += mx - mn\n            x = p - 1\n        else:\n            x -= 1\n    print(s)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    st = n - 1\n    ans = 0\n    while st > 0:\n        if a[st] != b[st]:\n            ma = b[st]\n            mi = a[st]\n            i = st\n            while i > 0:\n                if a[i] != b[st]:\n                    i -= 1\n                else:\n                    break\n                mi = min(a[i], mi)\n            pos = bisect.bisect_left(b, mi)\n            for j in range(pos, i):\n                mi = min(mi, a[j])\n            while b[pos] != mi:\n                pos = bisect.bisect_left(b, mi)\n                for j in range(pos, i):\n                    mi = min(mi, a[j])\n            ans += ma - mi\n            st = pos - 1\n        else:\n            st -= 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nos = list(map(int, input().split()))\n    exp = sorted(nos)\n    i = 0\n    ans = 0\n    while i < n:\n        expd = {exp[i]: 1}\n        avd = {nos[i]: 1}\n        j = i + 1\n        (mini, maxi) = (nos[i], nos[i])\n        while j < n and expd != avd:\n            if nos[j] < mini:\n                mini = nos[j]\n            elif nos[j] > maxi:\n                maxi = nos[j]\n            if nos[j] in avd:\n                avd[nos[j]] += 1\n            else:\n                avd[nos[j]] = 1\n            if exp[j] in expd:\n                expd[exp[j]] += 1\n            else:\n                expd[exp[j]] = 1\n            j += 1\n        ans += maxi - mini\n        i = j\n    print(ans)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr1 = sorted(arr[:])\n    j = n - 1\n    i = 0\n    ans = 0\n    while j > 0:\n        if arr[j] != arr1[j]:\n            x = arr1[j]\n            y = arr[j]\n            i = j\n            while i:\n                if arr[i] != arr1[j]:\n                    i -= 1\n                else:\n                    break\n                y = min(arr[i], y)\n            low = bisect.bisect_left(arr1, y)\n            for k in range(low, i):\n                y = min(y, arr[k])\n            while arr1[low] != y:\n                low = bisect.bisect_left(arr1, y)\n                for k in range(low, i):\n                    y = min(y, arr[k])\n            ans += x - y\n            j = low - 1\n        else:\n            j -= 1\n    print(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    (ans, i, j, d) = (0, 0, 0, dict())\n    while i < n:\n        d.clear()\n        while i < n:\n            d[a[i]] = d.get(a[i], 0) + 1\n            while j < n and d.get(b[j], 0):\n                d[b[j]] -= 1\n                j += 1\n            if i + 1 == j:\n                ans += max(d.keys()) - min(d.keys())\n                break\n            i += 1\n        i += 1\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    print(answer())", "from bisect import *\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    s = n - 1\n    while s > 0:\n        if a[s] != b[s]:\n            ma = b[s]\n            mi = a[s]\n            i = s\n            while i > 0:\n                if a[i] != b[s]:\n                    i -= 1\n                else:\n                    break\n                mi = min(a[i], mi)\n            pos = bisect_left(b, mi)\n            for j in range(pos, i):\n                mi = min(mi, a[j])\n            while b[pos] != mi:\n                pos = bisect_left(b, mi)\n                for j in range(pos, i):\n                    mi = min(mi, a[j])\n            ans += ma - mi\n            s = pos - 1\n        else:\n            s -= 1\n    print(ans)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\nfrom collections import defaultdict as dd\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdmap = lambda : map(int, stdstr().split())\nstdarr = lambda : list(map(int, stdstr().split()))\nmod = 1000000007\n\nclass RangeQuery:\n\n    def __init__(self, data, func=min):\n        self.func = func\n        self._data = _data = [list(data)]\n        (i, n) = (1, len(_data[0]))\n        while 2 * i <= n:\n            prev = _data[-1]\n            _data.append([func(prev[j], prev[j + i]) for j in range(n - 2 * i + 1)])\n            i <<= 1\n\n    def query(self, start, stop):\n        depth = (stop - start).bit_length() - 1\n        return self.func(self._data[depth][start], self._data[depth][stop - (1 << depth)])\nfor _ in range(stdint()):\n    n = stdint()\n    arr = stdarr()\n    pairs = []\n    for i in range(n):\n        pairs.append((arr[i], i))\n    pairs.sort()\n    ranges = set()\n    for i in range(n):\n        if pairs[i][1] != i:\n            ranges.add((min(i, pairs[i][1]), max(i, pairs[i][1])))\n    if len(ranges) == 0:\n        print(0)\n    else:\n        ranges = sorted(list(ranges))\n        ma = RangeQuery(arr, func=max)\n        mi = RangeQuery(arr, func=min)\n\n        def getF(i, j):\n            return ma.query(i, j + 1) - mi.query(i, j + 1)\n        merged = [ranges[0]]\n        for i in range(1, len(ranges)):\n            curr = ranges[i]\n            prev = merged[-1]\n            if curr[0] <= prev[1]:\n                l = min(prev[0], curr[0])\n                r = max(prev[1], curr[1])\n                merged[-1] = [l, r]\n            else:\n                merged.append(curr)\n        res = 0\n        for i in merged:\n            res += getF(i[0], i[1])\n        print(res)", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    sorted_l = sorted(l)\n    i = 0\n    ans = 0\n    while i < n:\n        while i < n and l[i] == sorted_l[i]:\n            i += 1\n        if i < n:\n            s1 = {l[i]: 1}\n            s2 = {sorted_l[i]: 1}\n            m = i\n            i += 1\n            while s1 != s2:\n                s1[l[i]] = s1.get(l[i], 0) + 1\n                s2[sorted_l[i]] = s2.get(sorted_l[i], 0) + 1\n                i += 1\n            ans += sorted_l[i - 1] - sorted_l[m]\n    print(ans)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    arrs = [i for i in arr]\n    arrs.sort()\n    tot = 0\n    mn = arrs[0]\n    cost = 0\n    encounter = dict()\n    needed = dict()\n    idx = 0\n    for i in range(n):\n        x = arr[i]\n        if x == arrs[i]:\n            tot += 1\n        else:\n            if arrs[i] in encounter and encounter[arrs[i]] > 0:\n                encounter[arrs[i]] -= 1\n                tot += 1\n            elif arrs[i] in needed:\n                needed[arrs[i]] += 1\n            else:\n                needed[arrs[i]] = 1\n            if x in needed and needed[x] > 0:\n                needed[x] -= 1\n                tot += 1\n            elif x in encounter:\n                encounter[x] += 1\n            else:\n                encounter[x] = 1\n        if tot == i - idx + 1:\n            cost += arrs[i] - arrs[idx]\n            if i != n - 1:\n                mn = arrs[i + 1]\n                idx = i + 1\n            tot = 0\n    print(cost)", "import copy\nimport heapq\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    B = copy.deepcopy(A)\n    B.sort()\n    C = []\n    heapq.heapify(C)\n    i = 0\n    start = 0\n    ret = 0\n    for x in A:\n        if B[i] == x:\n            i = i + 1\n        else:\n            heapq.heappush(C, x)\n        while len(C) > 0 and C[0] == B[i]:\n            heapq.heappop(C)\n            i = i + 1\n        if len(C) == 0:\n            ret = ret + B[i - 1] - B[start]\n            start = i\n    print(ret)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = a.copy()\n    b.sort()\n    ans = 0\n    s = n - 1\n    while s > 0:\n        if a[s] != b[s]:\n            p = b[s]\n            q = a[s]\n            i = s\n            while i > 0:\n                if a[i] != b[s]:\n                    i -= 1\n                else:\n                    break\n                q = min(q, a[i])\n            pos = b.index(q)\n            for j in range(pos, i):\n                q = min(q, a[j])\n            while b[pos] != q:\n                pos = b.index(q)\n                for j in range(pos, i):\n                    q = min(q, a[j])\n            ans += p - q\n            s = pos - 1\n        else:\n            s -= 1\n    print(ans)", "import sys\ninput = sys.stdin.readline\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    from_index = [y[0] for y in sorted(enumerate(arr), key=lambda x: (x[1], x[0]))]\n    ans = 0\n    start = 0\n    smallest = float('inf')\n    biggest = float('-inf')\n    min_from_i = float('inf')\n    max_from_i = float('-inf')\n    num_elements_in_interval = 0\n    for (i, from_i) in enumerate(from_index):\n        x = arr[from_i]\n        smallest = min(smallest, x)\n        biggest = max(biggest, x)\n        min_from_i = min(min_from_i, from_i)\n        max_from_i = max(max_from_i, from_i)\n        num_elements_in_interval += 1\n        if min_from_i == start and max_from_i == i and (num_elements_in_interval == i - start + 1):\n            ans += biggest - smallest\n            start = i + 1\n            smallest = float('inf')\n            biggest = float('-inf')\n            min_from_i = float('inf')\n            max_from_i = float('-inf')\n            num_elements_in_interval = 0\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    (A1, B) = (A[:], list())\n    A1.sort()\n    (d, d1) = (dict(), dict())\n    for i in range(n):\n        if A1[i] in d:\n            d[A1[i]].append(i)\n        else:\n            d[A1[i]] = [i]\n    for i in d:\n        d1[i] = 0\n    C1 = [int(i) for i in range(1, n + 1)]\n    C2 = list()\n    for i in range(n):\n        x = d[A[i]][d1[A[i]]]\n        C2.append(x + 1)\n        d1[A[i]] += 1\n    for i in range(1, n):\n        C1[i] = C1[i - 1] + C1[i]\n        C2[i] = C2[i - 1] + C2[i]\n    (ref1, ref2) = (-1, -1)\n    (ans, flag) = (0, 0)\n    for i in range(n):\n        if C1[i] == C2[i]:\n            ref2 = i\n            if flag:\n                x = A1[ref2] - A1[ref1]\n                ans += x\n            else:\n                pass\n            flag = 0\n        elif C1[i] != C2[i] and flag == 0:\n            ref1 = i\n            flag = 1\n    print(ans)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [] + a\n    b.sort()\n    c = [-1] * n\n    c[-1] = 10 ** 9 + 1\n    for i in range(n - 2, -1, -1):\n        c[i] = min(a[i + 1], c[i + 1])\n    i = 0\n    ans = 0\n    while i < n:\n        if a[i] == b[i]:\n            i += 1\n        else:\n            j = i\n            while c[i] <= b[i]:\n                i += 1\n            ans += b[i] - b[j]\n            i += 1\n    print(ans)", "import sys\nt = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list()\n    for i in range(n):\n        b.append([a[i], i])\n    b.sort()\n    maxi = int(0)\n    mini = int(1e+18)\n    rr = 0\n    res = 0\n    for i in range(n):\n        rr = max(rr, b[i][1])\n        maxi = max(maxi, b[i][0])\n        mini = min(mini, b[i][0])\n        if rr == i:\n            res += maxi - mini\n            maxi = int(0)\n            mini = int(1e+18)\n        elif i == n - 1:\n            res += maxi - mini\n            maxi = int(0)\n            mini = int(1e+18)\n    print(res)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n    sys.stderr = open('error.txt', 'w')\ndepth = 200001\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nlinp = lambda : list(minp())\nminp = lambda : map(int, input().split())\nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\ndxy = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndef expo(a, b):\n    if not b:\n        return 1\n    v = expo(a, b // 2)\n    v = v * v % mod\n    if b % 2:\n        v = v * a % mod\n    return v\n\ndef modinv(a, b):\n    d = expo(b, mod - 2)\n    v = a * d % mod\n    return v\n\ndef checkPrime(n):\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef highestPowerof2(x):\n    x |= x >> 1\n    x |= x >> 2\n    x |= x >> 4\n    x |= x >> 8\n    x |= x >> 16\n    return x ^ x >> 1\n\ndef isVowel(char):\n    return char.lower() in 'aeiou'\nfor _ in range(int(input())):\n    n = int(input())\n    a = linp()\n    b = sorted(a)\n    d = defaultdict(lambda : [])\n    for i in range(n):\n        d[b[i]].append(i)\n    for x in d.keys():\n        d[x] = d[x][::-1]\n    c = list()\n    for i in range(n):\n        c.append((a[i], d[a[i]][-1]))\n        d[a[i]].pop()\n    cost = 0\n    (l, m) = (0, 0)\n    for i in range(n):\n        m = max(m, c[i][1])\n        if m == i:\n            (x, y) = (-1, inf)\n            for j in range(l, m + 1):\n                x = max(x, c[j][0])\n                y = min(y, c[j][0])\n            cost += x - y\n            l = m + 1\n            m = 0\n    print(cost)", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    (ans, i) = (0, 0)\n    while i < n:\n        (take1, take2) = ([], [])\n        while i < n:\n            take1.append(a[i])\n            take2.append(b[i])\n            if sorted(take1) == sorted(take2):\n                ans += max(take1) - min(take1)\n                break\n            i += 1\n        i += 1\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    print(answer())", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    ans = 0\n    cmax = 0\n    cmin = float('inf')\n    req = defaultdict(lambda : 0)\n    bal = 0\n    for j in range(n):\n        cmax = max(cmax, a[j])\n        cmin = min(cmin, a[j])\n        (x, y) = (req[b[j]], req[a[j]])\n        if x == 0:\n            bal += 1\n        if y == 0:\n            bal += 1\n        req[b[j]] += 1\n        req[a[j]] -= 1\n        (x, y) = (req[b[j]], req[a[j]])\n        if x == 0:\n            bal -= 1\n        if y == 0:\n            bal -= 1\n        if bal == 0:\n            ans += cmax - cmin\n            cmax = 0\n            cmin = float('inf')\n    print(ans)", "import heapq\nimport sys\nimport math\nfrom collections import deque\nfrom bisect import bisect_left, bisect_right\nI = sys.stdin.readline\nII = lambda : int(I())\nIN = lambda x: map(int, x.split())\nFN = lambda x: map(float, x.split())\nL = lambda x: list(IN(x))\nM = 1000000007\nP = print\nT = True\nF = False\nfor _ in range(II()):\n    n = II()\n    a = L(I())\n    l = sorted(a)\n    i = 0\n    s = 0\n    while i < n:\n        while i < n and a[i] == l[i]:\n            i += 1\n        if i == n:\n            break\n        m = l[i]\n        mc = 1\n        x = i\n        while i < n:\n            if a[i] > m:\n                m = a[i]\n                mc = 1\n            elif a[i] == m:\n                mc += 1\n            if l[i] == m:\n                mc -= 1\n            if mc == 0:\n                break\n            i += 1\n        s += l[i] - l[x]\n        i += 1\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    array = [int(i) for i in input().split()]\n    sorted_array = sorted(array)\n    flag = 1\n    for i in range(n):\n        if sorted_array[i] != array[i]:\n            flag = 0\n    if flag:\n        print(0)\n        continue\n    position_dictionary = {}\n    for index in range(n):\n        position_dictionary[sorted_array[index]] = index\n    left = 0\n    while array[left] == sorted_array[left]:\n        left += 1\n    right = n - 1\n    while array[right] == sorted_array[right]:\n        right -= 1\n    ans = 0\n    l = left\n    r = right\n    while l <= r:\n        maximum_array = array[l]\n        minimu_array = array[l]\n        pos_max = position_dictionary[array[l]]\n        while l <= pos_max:\n            if array[l] > maximum_array:\n                maximum_array = array[l]\n                pos_max = position_dictionary[maximum_array]\n            if array[l] < minimu_array:\n                minimu_array = array[l]\n            l += 1\n        ans += maximum_array - minimu_array\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().strip().split()]\n    s_arr = sorted(arr)\n    if s_arr == arr:\n        print(0)\n    else:\n        pos_dict = {}\n        for (index, i) in enumerate(s_arr):\n            pos_dict[i] = index\n        left = 0\n        while arr[left] == s_arr[left]:\n            left += 1\n        right = n - 1\n        while arr[right] == s_arr[right]:\n            right -= 1\n        ans = 0\n        l = left\n        r = right\n        while l <= r:\n            max_elem = arr[l]\n            min_elem = arr[l]\n            pos_max = pos_dict[arr[l]]\n            while l <= pos_max:\n                if arr[l] > max_elem:\n                    max_elem = arr[l]\n                    pos_max = pos_dict[max_elem]\n                if arr[l] < min_elem:\n                    min_elem = arr[l]\n                l += 1\n            ans += max_elem - min_elem\n        print(ans)", "import sys, os, io\nimport math\nfrom collections import defaultdict\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nres = []\n\ndef rec(i, j, rev, s):\n    if i > j:\n        return\n    global res\n    if rev == 0:\n        res.append(s[j])\n        rec(i, j - 1, 1, s)\n    else:\n        res.append(s[i])\n        rec(i + 1, j, 0, s)\n\ndef printNSE(arr, n):\n    s = []\n    mp = {}\n    s.append(arr[0])\n    ans = []\n    for i in range(1, n):\n        if len(s) == 0:\n            s.append(arr[i])\n            continue\n        while len(s) != 0 and s[-1] > arr[i]:\n            mp[s[-1]] = arr[i]\n            s.pop()\n        s.append(arr[i])\n    while len(s) != 0:\n        mp[s[-1]] = -1\n        s.pop()\n    for i in range(n):\n        print(arr[i], '--->', mp[arr[i]])\n\ndef solve():\n    n = ii()\n    l = li()\n    d = defaultdict(lambda : 0)\n    pp = -1\n    new = sorted(l)\n    i = 0\n    while i < n:\n        if l[i] == new[i]:\n            i += 1\n            continue\n        pp = i\n        i = n\n    i = 0\n    while i < n:\n        d[l[i]] = i\n        i += 1\n    ppp = -1\n    res = 0\n    for i in range(n):\n        if l[i] != new[i] or ppp != -1:\n            if ppp != -1:\n                ab = 1\n            else:\n                pp = i\n            ppp = max(ppp, d[l[i]], d[new[i]])\n            if i != ppp:\n                continue\n            xx = l[pp:ppp + 1]\n            xx.sort()\n            l[pp:ppp + 1] = xx\n            x = l[ppp]\n            y = l[pp]\n            res += x - y\n            ppp = -1\n    print(res)\nt = 1\nt = ii()\nfor _ in range(t):\n    solve()", "import sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nfrom math import log\nfrom math import gcd\nfrom math import atan2, acos\nfrom random import randint\nsa = lambda : input_()\nsb = lambda : int(input_())\nsc = lambda : input_().split()\nsd = lambda : list(map(int, input_().split()))\nsflo = lambda : list(map(float, input_().split()))\nse = lambda : float(input_())\nsf = lambda : list(input_())\nflsh = lambda : sys.stdout.flush()\nsys.setrecursionlimit(3 * 10 ** 5)\nmod = 10 ** 9 + 7\nmod1 = 998244353\ngp = []\ncost = []\ndp = []\nmx = []\nans1 = []\nans2 = []\nspecial = []\nspecnode = []\na = 0\nkthpar = []\n\ndef dfs2(root, par):\n    if par != -1:\n        dp[root] = dp[par] + 1\n    for i in range(1, 20):\n        if kthpar[root][i - 1] != -1:\n            kthpar[root][i] = kthpar[kthpar[root][i - 1]][i - 1]\n    for child in gp[root]:\n        if child == par:\n            continue\n        kthpar[child][0] = root\n        dfs(child, root)\nans = 0\na = []\n(n, k) = (0, 0)\nb = []\nvis = []\ntot = 0\ntime = []\ntime1 = []\nadj = []\nmx = -1\neps = 1e-07\nx = 0\npref = []\nlvl = []\ngp = []\nans = []\nf = 0\nw = []\n\ndef hnbhai(tc):\n    n = sb()\n    a = sd()\n    b = a.copy()\n    b.sort()\n    if a == b:\n        print(0)\n        return\n    i = 0\n    ans = 0\n    mx = 0\n    mn = float('inf')\n    while i < n:\n        mx = max(mx, a[i])\n        mn = min(mn, a[i])\n        if mx == b[i] and (i + 1 >= n or (i + 1 < n and b[i + 1] > b[i])):\n            ans += mx - mn\n            mx = 0\n            mn = float('inf')\n            i += 1\n            continue\n        i += 1\n    print(ans)\n    return\nfor _ in range(sb()):\n    hnbhai(_ + 1)", "import math, bisect, heapq, random, sys, itertools\n(Y, N) = ('yes', 'no')\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np = 10 ** 9 + 7\nfor t in range(int(input())):\n    (n,) = ints()\n    a = ints()\n    b = sorted(a)\n    x = -1\n    store = {}\n    ans = 0\n    for i in range(n):\n        if b[i] not in store:\n            store[b[i]] = []\n        store[b[i]].append(i)\n    for i in store:\n        store[i] = store[i][::-1]\n    (minn, maxx) = (p, 0)\n    for i in range(n):\n        y = store[a[i]].pop()\n        x = max(x, y)\n        minn = min(minn, a[i])\n        maxx = max(maxx, a[i])\n        if x == i:\n            ans += maxx - minn\n            minn = p\n            maxx = 0\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = sorted(arr)\n    visited = set()\n    m = float('inf')\n    g = -float('inf')\n    ans = 0\n    seen = Counter()\n    i = 0\n    while i < n:\n        el = arr[i]\n        p = d[i]\n        seen[el] += 1\n        seen[p] -= 1\n        m = min(m, el, p)\n        g = max(g, el, p)\n        if el in visited and seen[el] == 0:\n            visited.remove(el)\n        if p in visited and seen[p] == 0:\n            visited.remove(p)\n        if seen[el]:\n            visited.add(el)\n        if seen[p]:\n            visited.add(p)\n        if len(visited) == 0:\n            ans += g - m\n            m = float('inf')\n            g = -float('inf')\n        i += 1\n    print(ans)", "import heapq as hq\nfrom collections import deque\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    p = list()\n    q = deque()\n    ans = 0\n    c = -1\n    for (x, y) in zip(a, b):\n        if len(q) == 0:\n            c = y\n        hq.heappush(p, x)\n        q.append(y)\n        while p and p[0] == q[0]:\n            hq.heappop(p)\n            q.popleft()\n        if len(q) == 0:\n            ans += y - c\n    print(ans)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        solve()\nmain()", "from os import cpu_count\nimport sys, random, bisect\nfrom collections import deque, defaultdict\nfrom heapq import heapify, heappop, heappush\nfrom itertools import permutations\nfrom math import log, gcd\ninput = lambda : sys.stdin.readline().rstrip()\nmi = lambda : map(int, input().split())\nli = lambda : list(mi())\nfor _ in range(int(input())):\n    N = int(input())\n    A = li()\n    right = [A[i] for i in range(N)]\n    for i in range(N - 1)[::-1]:\n        right[i] = min(right[i], right[i + 1])\n    right.append(10 ** 9)\n    A.append(10 ** 9)\n    res = 0\n    L = 0\n    M = A[0]\n    for i in range(N):\n        if max(M, A[i]) <= right[i + 1]:\n            res += max(A[L:i + 1]) - min(A[L:i + 1])\n            L = i + 1\n            M = A[i + 1]\n        else:\n            M = max(M, A[i])\n    print(res)"]