["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    first = [-1] * 31\n    last = [n] * 31\n    for i in range(n):\n        for j in range(31):\n            if a[i] & 1 << j and first[j] == -1:\n                first[j] = i\n            if b[i] & 1 << j and last[j] == n:\n                last[j] = i\n    res = 0\n    for i in range(31):\n        (L, R) = (first[i], last[i])\n        if L == -1:\n            continue\n        if L == R:\n            if (n - R) % 2:\n                res += 2 ** i\n        elif L + 2 == R:\n            if (n - R) % 2 == 0:\n                res += 2 ** i\n        else:\n            res += 2 ** i\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    first = [-1] * 31\n    last = [n] * 31\n    for i in range(n):\n        for j in range(31):\n            if a[i] & 1 << j and first[j] == -1:\n                first[j] = i\n            if b[i] & 1 << j and last[j] == n:\n                last[j] = i\n    res = 0\n    for i in range(31):\n        (L, R) = (first[i], last[i])\n        if L == -1:\n            continue\n        if L == R:\n            if (n - R) % 2:\n                res += 2 ** i\n        elif L + 2 == R:\n            if (n - R) % 2 == 0:\n                res += 2 ** i\n        else:\n            res += 2 ** i\n    print(res)", "import math\nfrom collections import defaultdict\nfrom itertools import accumulate\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (s, e) = ([n] * 31, [-1] * 31)\n    (l, r) = (0, (1 << 31) - 1)\n    for i in range(n):\n        c = l ^ a[i]\n        binary = bin(c)[2:].rjust(31)\n        for j in range(31):\n            if binary[j] == '1':\n                assert s[j] == n\n                s[j] = i\n        l = a[i]\n        c = r ^ b[n - 1 - i]\n        binary = bin(c)[2:].rjust(31)\n        for j in range(31):\n            if binary[j] == '1':\n                assert e[j] == -1\n                e[j] = n - 1 - i\n        r = b[n - 1 - i]\n    ans = ''\n    for i in range(31):\n        assert s[i] != e[i]\n        if s[i] < e[i] - 1:\n            ans += '1'\n        else:\n            ones = n - 1 - e[i]\n            ones += 1 if s[i] < e[i] else 0\n            ans += str(ones & 1)\n    print(int(ans, 2))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    first_1 = [-1] * 31\n    last_1 = [n] * 31\n    for i in range(n):\n        for bit in range(30):\n            if a[i] & 1 << bit and first_1[bit] == -1:\n                first_1[bit] = i\n            if b[i] & 1 << bit and last_1[bit] == n:\n                last_1[bit] = i\n    ans = 0\n    for i in range(31):\n        (L, R) = (first_1[i], last_1[i])\n        if L == -1:\n            continue\n        if L == R:\n            if (n - R) % 2:\n                ans += 2 ** i\n        elif L + 2 == R:\n            if (n - R) % 2 == 0:\n                ans += 2 ** i\n        else:\n            ans += 2 ** i\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    first_1 = [-1] * 31\n    last_1 = [n] * 31\n    for i in range(n):\n        for bit in range(30):\n            if a[i] & 1 << bit and first_1[bit] == -1:\n                first_1[bit] = i\n            if b[i] & 1 << bit and last_1[bit] == n:\n                last_1[bit] = i\n    ans = 0\n    for i in range(31):\n        (L, R) = (first_1[i], last_1[i])\n        if L == -1:\n            continue\n        if L == R:\n            if (n - R) % 2:\n                ans += 2 ** i\n        elif L + 2 == R:\n            if (n - R) % 2 == 0:\n                ans += 2 ** i\n        else:\n            ans += 2 ** i\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    first_1 = [-1] * 31\n    last_1 = [n] * 31\n    for i in range(n):\n        for bit in range(30):\n            if a[i] & 1 << bit and first_1[bit] == -1:\n                first_1[bit] = i\n            if b[i] & 1 << bit and last_1[bit] == n:\n                last_1[bit] = i\n    ans = 0\n    for i in range(31):\n        (L, R) = (first_1[i], last_1[i])\n        if L == -1:\n            continue\n        if L == R:\n            if (n - R) % 2:\n                ans += 2 ** i\n        elif L + 2 == R:\n            if (n - R) % 2 == 0:\n                ans += 2 ** i\n        else:\n            ans += 2 ** i\n    print(ans)", "import functools\nimport operator\n\ndef LII():\n    return [int(x) for x in input().split()]\n\ndef II():\n    return int(input())\nfor _ in range(int(input())):\n    n = II()\n    a = LII()\n    b = LII()\n    sets = [a[0] | b[0]] + [x & ~y | z for (x, y, z) in zip(a[1:], a[:-1], b[1:])]\n    resets = [~x & y | ~z for (x, y, z) in zip(b[:-1], b[1:], a[:-1])] + [~a[-1] | ~b[-1]]\n    xor_sets = functools.reduce(operator.xor, sets, 0)\n    arbs = functools.reduce(operator.or_, (~x & ~y for (x, y) in zip(sets, resets)), 0)\n    print(arbs | xor_sets)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef lsi():\n    return si().strip().split(' ')\n\ndef ni():\n    return int(input())\nimport sys\ninput = sys.stdin.readline\nfor _ in range(ni()):\n    n = ni()\n    a = li()\n    b = li()\n    first_1 = [-1] * 31\n    last_1 = [n] * 31\n    for i in range(n):\n        for bit in range(30):\n            if a[i] & 1 << bit and first_1[bit] == -1:\n                first_1[bit] = i\n            if b[i] & 1 << bit and last_1[bit] == n:\n                last_1[bit] = i\n    ans = 0\n    for i in range(31):\n        (L, R) = (first_1[i], last_1[i])\n        if L == -1:\n            continue\n        if L == R:\n            if (n - R) % 2:\n                ans += 2 ** i\n        elif L + 2 == R:\n            if (n - R) % 2 == 0:\n                ans += 2 ** i\n        else:\n            ans += 2 ** i\n    print(ans)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef lsi():\n    return si().strip().split(' ')\n\ndef ni():\n    return int(input())\nimport sys\ninput = sys.stdin.readline\nfor _ in range(ni()):\n    n = ni()\n    a = li()\n    b = li()\n    first_1 = [-1] * 31\n    last_1 = [n] * 31\n    for i in range(n):\n        for bit in range(30):\n            if a[i] & 1 << bit and first_1[bit] == -1:\n                first_1[bit] = i\n            if b[i] & 1 << bit and last_1[bit] == n:\n                last_1[bit] = i\n    ans = 0\n    for i in range(31):\n        (L, R) = (first_1[i], last_1[i])\n        if L == -1:\n            continue\n        if L == R:\n            if (n - R) % 2:\n                ans += 2 ** i\n        elif L + 2 == R:\n            if (n - R) % 2 == 0:\n                ans += 2 ** i\n        else:\n            ans += 2 ** i\n    print(ans)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef lsi():\n    return si().strip().split(' ')\n\ndef ni():\n    return int(input())\nimport sys\ninput = sys.stdin.readline\nfor _ in range(ni()):\n    n = ni()\n    a = li()\n    b = li()\n    first_1 = [-1] * 31\n    last_1 = [n] * 31\n    for i in range(n):\n        for bit in range(30):\n            if a[i] & 1 << bit and first_1[bit] == -1:\n                first_1[bit] = i\n            if b[i] & 1 << bit and last_1[bit] == n:\n                last_1[bit] = i\n    ans = 0\n    for i in range(31):\n        (L, R) = (first_1[i], last_1[i])\n        if L == -1:\n            continue\n        if L == R:\n            if (n - R) % 2:\n                ans += 2 ** i\n        elif L + 2 == R:\n            if (n - R) % 2 == 0:\n                ans += 2 ** i\n        else:\n            ans += 2 ** i\n    print(ans)", "def check_bit(n, a, b, bit):\n    required = 0\n    possible = False\n    for i in range(n):\n        must_be_0 = must_be_1 = False\n        ai = a[i] >> bit & 1\n        must_be_0 = must_be_0 or ai == 0\n        if i > 0:\n            aim1 = a[i - 1] >> bit & 1\n            must_be_1 = must_be_1 or (aim1 == 0 and ai == 1)\n        else:\n            must_be_1 = must_be_1 or ai == 1\n        bi = b[i] >> bit & 1\n        must_be_1 = must_be_1 or bi == 1\n        if i + 1 < n:\n            bip1 = b[i + 1] >> bit & 1\n            must_be_0 = must_be_0 or (bip1 == 1 and bi == 0)\n        else:\n            must_be_0 = must_be_0 or bi == 0\n        if must_be_1:\n            required += 1\n        if not must_be_1 and (not must_be_0):\n            possible = True\n    return required & 1 == 1 or possible\n\ndef solve(n, a, b):\n    answer = 0\n    for bit in range(30):\n        if check_bit(n, a, b, bit):\n            answer |= 1 << bit\n    return answer\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(solve(n, a, b))", "def read_int():\n    return int(input())\n\ndef read_ints():\n    return [int(x) for x in input().split()]\n\ndef read_case():\n    n = read_int()\n    a = read_ints()\n    b = read_ints()\n    return (n, a, b)\n\ndef solve(n, a, b):\n    x = 0\n    bit = 1\n    while bit <= 2 ** 30:\n        first_1 = 0\n        while first_1 < len(a) and a[first_1] & bit == 0:\n            first_1 += 1\n        if first_1 == len(a):\n            bit *= 2\n            continue\n        last_0 = len(b) - 1\n        while last_0 >= 0 and b[last_0] & bit != 0:\n            last_0 -= 1\n        if last_0 > first_1 + 1:\n            x |= bit\n        elif last_0 == first_1 + 1:\n            if (len(b) - last_0) % 2 == 1:\n                x |= bit\n        elif (len(b) - first_1) % 2 == 1:\n            x |= bit\n        bit *= 2\n    return x\ncases = read_int()\nfor case in range(cases):\n    print(solve(*read_case()))", "import functools\nimport operator\n\ndef LII():\n    return [int(x) for x in input().split()]\n\ndef II():\n    return int(input())\nfor _ in range(int(input())):\n    n = II()\n    a = LII()\n    b = LII()\n    sets = [a[0] | b[0]] + [x & ~y | z for (x, y, z) in zip(a[1:], a[:-1], b[1:])]\n    resets = [~x & y | ~z for (x, y, z) in zip(b[:-1], b[1:], a[:-1])] + [~a[-1] & ~b[-1]]\n    xor_sets = functools.reduce(operator.xor, sets, 0)\n    arbs = functools.reduce(operator.or_, (~x & ~y for (x, y) in zip(sets, resets)), 0)\n    print(arbs | xor_sets)"]