["for i in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    unique = 0\n    unique_dict = {}\n    for ele in num:\n        if ele in unique_dict:\n            unique_dict[ele] += 1\n        else:\n            unique_dict[ele] = 1\n    unique = list(unique_dict.values())\n    if num.count(max(num)) == 1 and unique.count(2) == len(unique) - 1:\n        print('2')\n    else:\n        print((unique.count(1) + 1) // 2)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = dict(Counter(a))\n    b = 0\n    c = max(a.keys())\n    if a[c] == 1:\n        (pos, one) = (0, 0)\n        for (x, y) in a.items():\n            if x != c:\n                if y == 1:\n                    one = 1\n                    a[x] -= 1\n                    a[c] += 1\n                    b += 1\n                    break\n                elif y > 2:\n                    pos = x\n        if not one:\n            if pos:\n                a[c] += 1\n                b += 1\n            else:\n                b += 2\n                a[c] += 2\n    d = 0\n    for (x, y) in a.items():\n        if y == 1:\n            d += 1\n    print((d + 1) // 2 + b)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    num = list(map(int, input().split()))\n    unique = 0\n    unique_dict = {}\n    for ele in num:\n        if ele in unique_dict:\n            unique_dict[ele] += 1\n        else:\n            unique_dict[ele] = 1\n    unique = list(unique_dict.values())\n    if num.count(max(num)) == 1 and unique.count(2) == len(unique) - 1:\n        print('2')\n    else:\n        print((unique.count(1) + 1) // 2)", "t = int(input())\nfor t in range(t):\n    n = int(input())\n    h = [int(i) for i in input().split()]\n    d = {}\n    ans = 0\n    for k in h:\n        if k in d:\n            d[k] += 1\n        else:\n            d[k] = 1\n    arr = list(d.values())\n    count = arr.count(1)\n    if h.count(max(h)) == 1 and arr.count(2) == len(arr) - 1:\n        ans = 2\n    else:\n        ans = (count + 1) // 2\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = list(Counter(arr).values())\n    if arr.count(max(arr)) == 1 and c.count(2) == len(c) - 1:\n        print(2)\n    else:\n        p = c.count(1)\n        print((p + 1) // 2)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = list(Counter(arr).values())\n    if arr.count(max(arr)) == 1 and c.count(2) == len(c) - 1:\n        print(2)\n    else:\n        p = c.count(1)\n        print((p + 1) // 2)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = list(Counter(arr).values())\n    if arr.count(max(arr)) == 1 and c.count(2) == len(c) - 1:\n        print(2)\n    else:\n        p = c.count(1)\n        print((p + 1) // 2)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    d = {}\n    for i in range(n):\n        if str(arr[i]) not in d.keys():\n            d[str(arr[i])] = 1\n        else:\n            d[str(arr[i])] = d[str(arr[i])] + 1\n    x = list(d.values()).count(1)\n    y = list(d.values()).count(2)\n    if d[str(max(arr))] == 1 and y == len(d) - 1:\n        print('2')\n    else:\n        print((x + 1) // 2)", "from collections import Counter\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = Counter(l)\n    L = 0\n    m = 0\n    h = 0\n    for i in k:\n        if k[i] == 1:\n            L += 1\n            m += 1\n            if m == 1:\n                h = i\n    ans = (L + 1) // 2\n    if m == 1 and h == max(l):\n        ans = 2 * n\n        for i in k:\n            if k[i] != 1:\n                if k[i] >= 3:\n                    ans = 1\n                    break\n                ans = min(ans, k[i])\n    print(ans)", "from collections import Counter\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = Counter(l)\n    L = 0\n    m = 0\n    h = 0\n    for i in k:\n        if k[i] == 1:\n            L += 1\n            m += 1\n            if m == 1:\n                h = i\n    ans = (L + 1) // 2\n    if m == 1 and h == max(l):\n        ans = 2 * n\n        for i in k:\n            if k[i] != 1:\n                if k[i] >= 3:\n                    ans = 1\n                    break\n                ans = min(ans, k[i])\n    print(ans)", "from collections import Counter\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = Counter(l)\n    L = 0\n    m = 0\n    h = 0\n    for i in k:\n        if k[i] == 1:\n            L += 1\n            m += 1\n            if m == 1:\n                h = i\n    ans = (L + 1) // 2\n    if m == 1 and h == max(l):\n        ans = 2 * n\n        for i in k:\n            if k[i] != 1:\n                if k[i] >= 3:\n                    ans = 1\n                    break\n                ans = min(ans, k[i])\n    print(ans)", "from collections import Counter\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = Counter(l)\n    L = 0\n    m = 0\n    h = 0\n    for i in k:\n        if k[i] == 1:\n            L += 1\n            m += 1\n            if m == 1:\n                h = i\n    ans = (L + 1) // 2\n    if m == 1 and h == max(l):\n        ans = 2 * n\n        for i in k:\n            if k[i] != 1:\n                if k[i] >= 3:\n                    ans = 1\n                    break\n                ans = min(ans, k[i])\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    H = list(map(int, input().split()))\n    H.sort()\n    flag = 0\n    i = 0\n    if N == 2:\n        if H[0] != H[1]:\n            flag += 1\n        else:\n            flag = 0\n    else:\n        while i < N - 1:\n            if i == 0:\n                if H[i] != H[i + 1]:\n                    flag += 1\n            elif H[i] == H[i + 1] or H[i] == H[i - 1]:\n                i += 1\n                continue\n            else:\n                flag += 1\n            i += 1\n    if H[N - 1] != H[N - 2]:\n        flag += 1\n    if H[N - 1] != H[N - 2] and flag == 1 and (N % 2 == 0):\n        flag += 1\n    elif H[N - 1] != H[N - 2] and flag == 1 and (N % 2 == 1):\n        flag += 2\n    if flag == 0:\n        print(0)\n    elif flag % 2 == 0:\n        print(flag // 2)\n    elif flag % 2 == 1:\n        print(flag // 2 + 1)", "for _ in range(int(input())):\n    N = int(input())\n    H = list(map(int, input().split()))\n    H.sort()\n    flag = 0\n    i = 0\n    if N == 2:\n        if H[0] != H[1]:\n            flag += 1\n        else:\n            flag = 0\n    else:\n        while i < N - 1:\n            if i == 0:\n                if H[i] != H[i + 1]:\n                    flag += 1\n            elif H[i] == H[i + 1] or H[i] == H[i - 1]:\n                i += 1\n                continue\n            else:\n                flag += 1\n            i += 1\n    if H[N - 1] != H[N - 2]:\n        flag += 1\n    if H[N - 1] != H[N - 2] and flag == 1 and (N % 2 == 0):\n        flag += 1\n    elif H[N - 1] != H[N - 2] and flag == 1 and (N % 2 == 1):\n        flag += 2\n    if flag == 0:\n        print(0)\n    elif flag % 2 == 0:\n        print(flag // 2)\n    elif flag % 2 == 1:\n        print(flag // 2 + 1)", "from collections import Counter\nt = int(input())\nfor index in range(t):\n    n = int(input())\n    data = list(map(int, input().split()))\n    data_count = Counter(data)\n    count = 0\n    for i in data_count.keys():\n        if data_count[i] == 1:\n            count += 1\n    max_data = max(data)\n    if count == 1 and data_count[max_data] == 1:\n        data_count.pop(max_data)\n        c = 0\n        for j in data_count.keys():\n            if data_count[j] > 2:\n                print(1)\n                c = 1\n                break\n        if c == 0:\n            print(2)\n    else:\n        print((count + 1) // 2)", "import math\nfor l in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    ans = 0\n    count = 0\n    x = 0\n    for i in d:\n        if d[i] == 1:\n            ans += 1\n            x = i\n        elif d[i] == 2:\n            count += 1\n    if len(d) - 1 == count and ans == 1 and (x == max(d)):\n        print(2)\n        continue\n    print(math.ceil(ans / 2))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    maxi = a[0]\n    g = 0\n    for num in a:\n        maxi = max(maxi, num)\n        if num not in d:\n            d[num] = 1\n        else:\n            d[num] += 1\n        if d[num] > 2:\n            g += 1\n    res = 0\n    for val in d.values():\n        if val == 1:\n            res += 1\n    if n > 2 and d[maxi] == 1 and (res == 1) and (g == 0):\n        print(2)\n        continue\n    print(res // 2 + res % 2)", "import math\nfor l in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    ans = 0\n    count = 0\n    x = 0\n    for i in d:\n        if d[i] == 1:\n            ans += 1\n            x = i\n        elif d[i] == 2:\n            count += 1\n    if len(d) - 1 == count and ans == 1 and (x == max(d)):\n        print(2)\n        continue\n    print(math.ceil(ans / 2))", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = list(Counter(arr).keys())\n    y = list(Counter(arr).values())\n    count = 0\n    c2 = 0\n    f = len(y)\n    flag = 0\n    w = 0\n    for i in range(f):\n        if y[i] == 1:\n            count += 1\n            w = i\n        if y[i] == 2:\n            c2 += 1\n    if count == 1:\n        if int(x[w]) == max(arr) and c2 == f - 1:\n            print('2')\n            flag = flag + 1\n    if flag == 0:\n        print((count + 1) // 2)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    d = {}\n    for i in range(n):\n        if str(arr[i]) not in d.keys():\n            d[str(arr[i])] = 1\n        else:\n            d[str(arr[i])] = d[str(arr[i])] + 1\n    count = 0\n    c2 = 0\n    w = 0\n    x = list(d.keys())\n    y = list(d.values())\n    f = len(y)\n    flag = 0\n    for i in range(f):\n        if y[i] == 1:\n            count += 1\n            w = i\n        if y[i] == 2:\n            c2 += 1\n    if count == 1:\n        if int(x[w]) == max(arr) and c2 == f - 1:\n            print('2')\n            flag = flag + 1\n    if flag == 0:\n        print((count + 1) // 2)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    d = {}\n    for i in range(n):\n        if str(arr[i]) not in d.keys():\n            d[str(arr[i])] = 1\n        else:\n            d[str(arr[i])] = d[str(arr[i])] + 1\n    x = list(d.values()).count(1)\n    y = list(d.values()).count(2)\n    if d[str(max(arr))] == 1 and y == len(d) - 1:\n        print('2')\n    else:\n        print((x + 1) // 2)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    d = {}\n    for i in range(n):\n        if str(arr[i]) not in d.keys():\n            d[str(arr[i])] = 1\n        else:\n            d[str(arr[i])] = d[str(arr[i])] + 1\n    count = 0\n    c2 = 0\n    w = 0\n    x = list(d.keys())\n    y = list(d.values())\n    f = len(y)\n    flag = 0\n    for i in range(f):\n        if y[i] == 1:\n            count += 1\n            w = i\n        if y[i] == 2:\n            c2 += 1\n    if count == 1:\n        if int(x[w]) == max(arr) and c2 == f - 1:\n            print('2')\n            flag = flag + 1\n    if flag == 0:\n        print((count + 1) // 2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (count, maxx, maxx_v) = (0, 0, 0)\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] == 1:\n            count += 1\n        maxx = max(maxx, i)\n        maxx_v = max(maxx_v, d[i])\n    if count != 1:\n        print((count + 1) // 2)\n    elif d[maxx] == 1:\n        if maxx_v == 2:\n            print(2)\n        else:\n            print(1)\n    else:\n        print(1)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    s1 = set()\n    grp = set()\n    s = input()\n    s = s.split()\n    flag = 2\n    max = 0\n    for i in range(n):\n        if max < int(s[i]):\n            max = int(s[i])\n        if s[i] in s1 or s[i] in grp:\n            if s[i] in grp:\n                flag = 1\n            grp.add(s[i])\n            s1.discard(s[i])\n        else:\n            s1.add(s[i])\n    res = int((len(s1) + 1) / 2)\n    if len(s1) == 1 and max == int(s1.pop()):\n        print(flag)\n    else:\n        print(res)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cou = Counter(arr)\n    co = list(cou.items())\n    lis = []\n    for (i, j) in co:\n        if j == 1:\n            lis.append(i)\n    if max(arr) in lis:\n        if len(lis) == 1:\n            val = max(cou.values())\n            if val == 2:\n                print(2)\n            else:\n                print(1)\n            continue\n    if len(lis) % 2 == 0:\n        print(int(len(lis) / 2))\n    else:\n        print(int(len(lis) / 2) + 1)", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    freq = {}\n    for i in l:\n        freq[i] = 0\n    for i in range(n):\n        freq[l[i]] += 1\n    alone = 0\n    u = -1\n    max_element = -1\n    max_freq = 0\n    for i in range(n):\n        max_element = max(max_element, l[i])\n        max_freq = max(max_freq, freq[l[i]])\n        if freq[l[i]] == 1:\n            alone += 1\n            u = l[i]\n    if max_freq == 2 and max_element == u and (alone == 1):\n        print(2)\n        continue\n    print((alone + 1) // 2)", "from collections import Counter\nfrom math import ceil\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = Counter(arr)\n    val = list(cnt.values()).count(1)\n    ans = ceil(val / 2)\n    if val != 1 or cnt[max(arr)] != 1:\n        print(ans)\n    else:\n        cnt.pop(max(arr))\n        k = max(cnt.values())\n        if k == 2:\n            print(2)\n        else:\n            print(1)", "for i in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = set(lst)\n    d = {}\n    for i in s:\n        d[i] = 0\n    for i in lst:\n        d[i] += 1\n    sad = []\n    for i in d:\n        if d[i] == 1:\n            sad.append(i)\n    maxi = max(lst)\n    flag = 0\n    if maxi in sad:\n        if len(sad) == 1:\n            a = list(d.values())\n            maxi = max(a)\n            if maxi == 2:\n                print(2)\n            else:\n                print(1)\n            continue\n    if len(sad) % 2 == 0:\n        print(int(len(sad) / 2))\n    else:\n        print(int(len(sad) / 2) + 1)", "(t, n) = (int(input()), 1)\nwhile n <= t:\n    (l, mag) = (int(input()), list(map(int, input().split())))\n    (cm, c, chk) = ({}, 0, 0)\n    for i in mag:\n        if i not in cm:\n            cm[i] = 1\n        else:\n            cm[i] += 1\n    for keys in cm.values():\n        if keys == 1:\n            c += 1\n    if c == 0:\n        print('0')\n    elif cm[max(mag)] == 1 and c == 1:\n        for keys in cm.values():\n            if keys >= 3:\n                chk = 3\n                print('1')\n                break\n            elif keys == 2:\n                chk = 2\n        if chk == 2:\n            print('2')\n    else:\n        print((c + 1) // 2)\n    n += 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    c = c1 = 0\n    m = max(a)\n    m1 = 0\n    for i in d.keys():\n        m1 = max(d[i], m1)\n        if d[i] == 1:\n            c += 1\n            if i == m:\n                c1 = d[i]\n    if c1 == 1 and c == 1:\n        if m1 <= 2:\n            print(2)\n        else:\n            print(1)\n    elif c & 1 == 0:\n        print(c // 2)\n    else:\n        print(c // 2 + 1)", "for i in range(int(input())):\n    n = input()\n    h = map(int, input().split())\n    group_numbers = {}\n    for j in h:\n        if j in group_numbers:\n            group_numbers[j] += 1\n        else:\n            group_numbers[j] = 1\n    value_list = list(group_numbers.values())\n    x = value_list.count(1)\n    y = x // 2\n    if x % 2 == 0:\n        print(y)\n    elif x == 1 and group_numbers[max(list(group_numbers.keys()))] == 1 and (max(value_list) <= 2):\n        print(y + 2)\n    else:\n        print(y + 1)", "for i in range(int(input())):\n    n = input()\n    h = map(int, input().split())\n    group_numbers = {}\n    for j in h:\n        if j in group_numbers:\n            group_numbers[j] += 1\n        else:\n            group_numbers[j] = 1\n    value_list = list(group_numbers.values())\n    x = value_list.count(1)\n    y = x // 2\n    if x % 2 == 0:\n        print(y)\n    elif x == 1 and group_numbers[max(list(group_numbers.keys()))] == 1 and (max(value_list) <= 2):\n        print(y + 2)\n    else:\n        print(y + 1)", "from collections import Counter\n\ndef findLoneWolf(heights):\n    lone_height = 0\n    c_heights = Counter(heights)\n    max_frequency = 0\n    max_height = 0\n    for (height, count) in c_heights.items():\n        if count == 1:\n            lone_height += 1\n        max_frequency = max(max_frequency, count)\n        max_height = max(max_height, height)\n    if lone_height == 1 and c_heights[max_height] == 1:\n        return 1 if max_frequency > 2 else 2\n    else:\n        return (lone_height + 1) // 2\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(findLoneWolf(A))", "for _ in range(int(input())):\n    n = int(input())\n    heights = dict()\n    max_height = 0\n    l = list(map(int, input().rstrip().split()))\n    for ele in l:\n        heights[ele] = heights.get(ele, 0) + 1\n        max_height = max(max_height, ele)\n    count = 0\n    good_count = 0\n    largest = False\n    for (k, v) in heights.items():\n        if heights[k] == 1:\n            count += 1\n            if k == max_height:\n                largest = True\n        elif heights[k] > 2:\n            good_count += 1\n    if count == 1:\n        if good_count or not largest:\n            print(1)\n        else:\n            print(2)\n    else:\n        print((count + 1) // 2)", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nfrom collections import Counter\n\ndef solve():\n    n = ri()\n    C = Counter(rl())\n    MAX = flag = 0\n    sad = []\n    for (k, v) in C.items():\n        if v == 1:\n            sad.append(k)\n        if v > 2:\n            flag = 1\n        MAX = max(MAX, k)\n    if not sad:\n        return 0\n    if len(sad) > 1:\n        return len(sad) - len(sad) // 2\n    if sad[0] != MAX or flag:\n        return 1\n    return 2\n\ndef main():\n    for _ in range(ri()):\n        print(solve())\nmain()", "from collections import Counter\nfor tc in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = list(Counter(a).values())\n    if a.count(max(a)) == 1 and d.count(2) == len(d) - 1:\n        print(2)\n    else:\n        c = d.count(1)\n        print((c + 1) // 2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    l.sort(reverse=True)\n    gret = 0\n    cou = 0\n    if l[0] != l[1]:\n        gret = 1\n        count = 1\n    else:\n        count = 2\n    alone = 0\n    gt = 0\n    for i in range(1, n - 1):\n        if l[i] != l[i + 1]:\n            if count == 1:\n                alone += 1\n            count = 1\n        else:\n            count += 1\n        if count > 2:\n            gt = 1\n    if count == 1:\n        alone += 1\n    if gret == 1:\n        if alone == 0:\n            if gt == 1:\n                print(1)\n            else:\n                print(2)\n            continue\n        else:\n            alone += 1\n    print(math.ceil(alone / 2))", "import math\nl = int(input())\ntests = []\nfor h in range(l):\n    o = input()\n    test = list(map(int, input().split()))\n    tests.append(test)\n\ndef solve(v):\n    singlur = set()\n    muli = set()\n    moreThanOne = {}\n    moreThanOneBool = False\n    for h in v:\n        if h in muli:\n            count = moreThanOne.get(h, 2)\n            moreThanOne[h] = count + 1\n            if moreThanOne[h] > 2:\n                moreThanOneBool = True\n            continue\n        if h in singlur:\n            singlur.remove(h)\n            muli.add(h)\n            continue\n        singlur.add(h)\n    if len(singlur) == 1 and list(singlur)[0] == max(v):\n        if moreThanOneBool:\n            return 1\n        else:\n            return 2\n    students = math.ceil(len(singlur) / 2)\n    return students\nfor s in tests:\n    print(solve(s))", "import math\nl = int(input())\ntests = []\nfor h in range(l):\n    o = input()\n    test = list(map(int, input().split()))\n    tests.append(test)\n\ndef solve(v):\n    singlur = set()\n    muli = set()\n    moreThanOne = {}\n    moreThanOneBool = False\n    for h in v:\n        if h in muli:\n            count = moreThanOne.get(h, 2)\n            moreThanOne[h] = count + 1\n            if moreThanOne[h] > 2:\n                moreThanOneBool = True\n            continue\n        if h in singlur:\n            singlur.remove(h)\n            muli.add(h)\n            continue\n        singlur.add(h)\n    if len(singlur) == 1 and list(singlur)[0] == max(v):\n        if moreThanOneBool:\n            return 1\n        else:\n            return 2\n    studentsNeedMove = math.ceil(len(singlur) / 2)\n    return studentsNeedMove\nfor s in tests:\n    print(solve(s))", "n = int(input())\nwhile n:\n    m = int(input())\n    l = list(map(int, input().split()))\n    s = list(set(l))\n    pp = 0\n    g = []\n    d = {}\n    for i in l:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    for i in d:\n        if d[i] > 1:\n            if d[i] > 2:\n                pp = 1\n            else:\n                pass\n        else:\n            g.append(i)\n    if len(g) < 1:\n        print(0)\n    else:\n        u = len(g)\n        p = u // 2\n        if u % 2 == 1:\n            p += 1\n        if u == 1 and g[0] == max(s):\n            if pp == 1:\n                p = 1\n            else:\n                p = 2\n        print(p)\n    n -= 1", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = list(Counter(arr).values())\n    if arr.count(max(arr)) == 1 and c.count(2) == len(c) - 1:\n        print(2)\n    else:\n        p = c.count(1)\n        print((p + 1) // 2)", "import math\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = [0] * max(max(l), n)\n    l1 = []\n    for i in l:\n        x[i - 1] += 1\n    while x[-1] == 0:\n        x.pop()\n    ans = x.count(1)\n    if ans == 1:\n        if x[-1] == 1:\n            x.pop()\n            if max(x) == 2:\n                print(2)\n                continue\n    print(math.ceil(ans / 2))", "n1 = int(input())\nfor i in range(n1):\n    y = int(input())\n    x = [int(a) for a in input().split()]\n    x.sort()\n    pos1 = 0\n    max = x[0]\n    l2 = []\n    c = 0\n    for i in range(len(x)):\n        if max < x[i]:\n            if i - pos1 == 1:\n                c += 1\n            l2.append((x[i - 1], i - pos1))\n            pos1 = i\n            max = x[i]\n    l2.append((x[-1], len(x) - pos1))\n    if len(x) - pos1 == 1:\n        c += 1\n    if c == 1 and len(x) - pos1 == 1:\n        s = 2\n        for i in range(len(l2) - 1):\n            if l2[i][1] != 2:\n                s = 1\n        print(s)\n    elif c % 2 == 0:\n        print(c // 2)\n    else:\n        print(c // 2 + 1)", "import math\nfor _ in range(1, int(input()) + 1):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    heights = dict()\n    for i in arr:\n        if i in heights:\n            heights[i] += 1\n        else:\n            heights[i] = 1\n    count = 0\n    for i in heights:\n        if heights[i] == 1:\n            count += 1\n    if count != 1:\n        print(math.ceil(count / 2))\n    elif heights[max(heights)] == 1:\n        done = False\n        for i in heights:\n            if heights[i] >= 3:\n                print(1)\n                done = True\n                break\n        if not done:\n            print(2)\n    else:\n        print(1)", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    l = list(map(int, input().split()))\n    countDict = {}\n    single = 0\n    mx = max(l)\n    gp3 = 0\n    for i in l:\n        try:\n            countDict[i] += 1\n        except:\n            countDict[i] = 1\n    maxele = countDict[mx]\n    for i in countDict.keys():\n        if countDict[i] == 1:\n            unique = i\n            single += 1\n        if countDict[i] > 2:\n            gp3 += 1\n    if single == 1:\n        if unique != mx:\n            print(1)\n        elif unique == mx and gp3 > 0:\n            print(1)\n        elif unique == mx and gp3 == 0:\n            print(2)\n    else:\n        print(int((single + 1) // 2))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.sort()\n    c = 0\n    m = 0\n    mk = 0\n    d = {}\n    for i in l:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    for (k, v) in d.items():\n        if v == 1:\n            c += 1\n        m = max(m, v)\n        mk = max(mk, k)\n    if c == 1:\n        if d[mk] == 1 and m == 2:\n            print(2)\n        else:\n            print(1)\n    else:\n        if c % 2 == 0:\n            res = c // 2\n        else:\n            res = c // 2 + 1\n        print(res)", "from math import ceil\nfor _ in range(int(input())):\n    numberOfElements = int(input())\n    heights = list(map(int, input().split()))\n    counter = 0\n    specialCase = False\n    d = {}\n    maxValue = 0\n    for x in heights:\n        d[x] = d.get(x, 0) + 1\n        if x > maxValue:\n            maxValue = x\n    maxFreq = 0\n    numberOfElementsWithOne = 0\n    for val in d.values():\n        if val == 1:\n            numberOfElementsWithOne += 1\n        maxFreq = max(maxFreq, val)\n    for j in d.values():\n        if j == 1:\n            if d[maxValue] == 1 and numberOfElementsWithOne == 1 and (maxFreq == 2):\n                specialCase = True\n                print(maxFreq)\n                break\n            else:\n                counter += 1\n    if not specialCase:\n        print(int(ceil(counter / 2)))", "for _ in range(int(input())):\n    pass\n    numberOfElements = int(input())\n    height = list(map(int, input().split()))\n    counter = 0\n    specialCase = False\n    d = {}\n    maxValue = 0\n    for x in height:\n        d[x] = d.get(x, 0) + 1\n        if x > maxValue:\n            maxValue = x\n    list1 = list(d.values())\n    numberOfElementsWithOne = list1.count(1)\n    noMaxElements = max(d.values())\n    for j in d.values():\n        if j == 1:\n            if j == d[maxValue] and numberOfElementsWithOne == 1 and (noMaxElements == 2):\n                counter += noMaxElements\n                specialCase = True\n                print(counter)\n                break\n            else:\n                counter += 1\n    if not specialCase:\n        if counter % 2 == 0:\n            print(int(counter / 2))\n        else:\n            print(int((counter + 1) / 2))", "numberOfTestCases = int(input())\nwhile numberOfTestCases >= 1:\n    numberOfElements = int(input())\n    height = list(map(int, input().split()))\n    counter = 0\n    specialCase = False\n    d = {}\n    maxValue = 0\n    for x in height:\n        d[x] = d.get(x, 0) + 1\n        if x > maxValue:\n            maxValue = x\n    list1 = list(d.values())\n    numberOfElementsWithOne = list1.count(1)\n    noMaxElements = max(d.values())\n    for j in d.values():\n        if j == 1:\n            if j == d[maxValue] and numberOfElementsWithOne == 1 and (noMaxElements == 2):\n                counter += noMaxElements\n                specialCase = True\n                print(counter)\n                break\n            else:\n                counter += 1\n    if not specialCase:\n        if counter % 2 == 0:\n            print(int(counter / 2))\n        else:\n            print(int((counter + 1) / 2))\n    numberOfTestCases -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))\n    size = max(l) + 1\n    dp = {}\n    for i in l:\n        if i in dp:\n            dp[i] += 1\n        else:\n            dp[i] = 1\n    arr = []\n    for i in dp:\n        if dp[i] == 1:\n            arr.append(i)\n    if len(arr) == 0:\n        print(0)\n    elif len(arr) == 1 and arr[0] == max(l):\n        p = sorted(dp.values())\n        mx = max(p)\n        if mx > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print((len(arr) + 1) // 2)\n    t -= 1", "numberOfTestCases = int(input())\nwhile numberOfTestCases >= 1:\n    numberOfElements = int(input())\n    height = list(map(int, input().split()))\n    counter = 0\n    specialCase = False\n    d = {}\n    maxValue = 0\n    for x in height:\n        d[x] = d.get(x, 0) + 1\n        if x > maxValue:\n            maxValue = x\n    list1 = list(d.values())\n    numberOfElementsWithOne = list1.count(int(1))\n    for j in d.values():\n        if j == 1:\n            if j == d[maxValue] and numberOfElementsWithOne == 1:\n                specialCase = True\n            else:\n                counter += 1\n    if specialCase:\n        d.pop(maxValue)\n        noMaxElements = max(d.values())\n        if noMaxElements == 2:\n            counter += noMaxElements\n        else:\n            counter += 1\n        print(counter)\n    elif counter % 2 == 0:\n        print(int(counter / 2))\n    else:\n        print(int((counter + 1) / 2))\n    numberOfTestCases -= 1", "import math\nfor i in range(int(input())):\n    n = int(input())\n    h = [int(i) for i in input().split()]\n    d = {}\n    for j in h:\n        if j in d:\n            d[j] += 1\n        else:\n            d[j] = 1\n    m = []\n    for j in d:\n        if d[j] == 1:\n            m.append(j)\n    if m == []:\n        print(0)\n    elif len(m) == 1 and m[0] == max(h):\n        sh = sorted(d.values())\n        if max(sh) > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(math.ceil(len(m) / 2))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    h = [int(i) for i in input().split()]\n    d = {}\n    for j in h:\n        if j in d:\n            d[j] += 1\n        else:\n            d[j] = 1\n    m = []\n    for j in d:\n        if d[j] == 1:\n            m.append(j)\n    if m == []:\n        print(0)\n    elif len(m) == 1 and m[0] == max(h):\n        sh = sorted(d.values())\n        if max(sh) > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(math.ceil(len(m) / 2))", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    s = []\n    for i in d:\n        if d[i] == 1:\n            s.append(i)\n    if s == []:\n        print(0)\n    elif len(s) == 1 and s[0] == max(a):\n        m = sorted(d.values())\n        if max(m) > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(math.ceil(len(s) / 2))\n    t -= 1", "from collections import Counter\n\ndef m(l):\n    a = []\n    for i in l:\n        a.append(c[i])\n    return max(a)\nT = int(input())\nfor tc in range(0, 2 * T):\n    if tc % 2 == 1:\n        a = input().split(' ')\n        H = []\n        for i in a:\n            H.append(int(i))\n        c = Counter(H)\n        count = 0\n        for i in H:\n            if c[i] == 1:\n                count += 1\n        if count < 2:\n            if c[max(H)] == 1:\n                if m(H) > 2:\n                    print(int(1))\n                else:\n                    print(int(2))\n            else:\n                print(count)\n        elif count % 2 == 0:\n            print(int(count / 2))\n        else:\n            print(int(count / 2 + 0.5))\n    else:\n        N = int(input())", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freq = dict(Counter(arr))\n    one_freqs = 0\n    for (num, fr) in freq.items():\n        one_freqs += fr == 1\n    max_num_freq = freq[max(arr)]\n    frs = sorted(list(freq.values()))\n    if one_freqs == 0:\n        print(0)\n    elif one_freqs > 1:\n        print(one_freqs // 2 + one_freqs % 2)\n    elif max_num_freq == 1:\n        if frs[-1] > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(1)", "from collections import Counter\nimport math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    count = 0\n    co = 0\n    k = 0\n    H = list(map(int, input().split()))\n    height = Counter(H)\n    h = list(height.keys())\n    h = sorted(h, reverse=True)\n    f = h[0]\n    for i in h:\n        k += 1\n        if height[i] == 1:\n            if count == 0:\n                co += 1\n                count = 1\n            else:\n                count = 0\n    if count == 1 and height[i] == 2 and (height[f] == 1) and (N - 2 * k != 0):\n        co += 1\n    print(co)", "from collections import Counter\nimport math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    count = 0\n    co = 0\n    k = 0\n    H = list(map(int, input().split()))\n    height = Counter(H)\n    h = list(height.keys())\n    h = sorted(h, reverse=True)\n    f = h[0]\n    for i in h:\n        k += 1\n        if height[i] == 1:\n            if count == 0:\n                co += 1\n                count = 1\n            else:\n                count = 0\n    if count == 1 and height[i] == 2 and (height[f] == 1) and (N - 2 * k != 0):\n        co += 1\n    print(co)", "from collections import Counter\nimport math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    count = 0\n    co = 0\n    k = 0\n    H = list(map(int, input().split()))\n    height = Counter(H)\n    h = list(height.keys())\n    h = sorted(h, reverse=True)\n    f = h[0]\n    for i in h:\n        k += 1\n        if height[i] == 1:\n            if count == 0:\n                co += 1\n                count = 1\n            else:\n                count = 0\n    if count == 1 and height[i] == 2 and (height[f] == 1) and (N - 2 * k != 0):\n        co += 1\n    print(co)", "for XD in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = {}\n    nl = 0\n    maxFreq = 0\n    for i in l:\n        try:\n            m[i] += 1\n            maxFreq = max(maxFreq, m[i])\n        except:\n            m[i] = 1\n    cnt = 0\n    for i in l:\n        if m[i] == 1:\n            cnt += 1\n            nl = i\n    if cnt % 2 == 0:\n        print(cnt // 2)\n    elif cnt == 1:\n        if nl == max(l) and maxFreq == 2:\n            print(2)\n        else:\n            print(1)\n    else:\n        print(cnt // 2 + 1)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = Counter(arr)\n    left = 0\n    mv = 0\n    for (k, v) in c.items():\n        if v > mv:\n            mv = v\n        if v == 1:\n            left += 1\n    if left == 1:\n        arr.sort()\n        if c[arr[-1]] != 1:\n            print(1)\n        elif mv > 2:\n            print(1)\n        else:\n            print(2)\n    elif left % 2 == 0:\n        print(left // 2)\n    else:\n        print(left // 2 + 1)", "def ans(arr):\n    hm = {}\n    for y in arr:\n        if y in hm.keys():\n            hm[y] += 1\n        else:\n            hm[y] = 0\n    count = 0\n    arr2 = []\n    for y in hm.keys():\n        if hm[y] == 0:\n            arr2.append(y)\n            count += 1\n    if count == 1 and max(arr2) == max(arr):\n        for y in hm.values():\n            if y >= 2:\n                return 1\n        return 2\n    else:\n        return min(count, count // 2 + count % 2)\ntest_cases = int(input())\nwhile test_cases != 0:\n    d_ = input()\n    d = list(map(int, input().split()))\n    print(ans(d))\n    test_cases -= 1", "from collections import Counter\nfrom math import ceil\nfor i in range(int(input())):\n    _ = input()\n    inp = list(map(int, input().split()))\n    heights = Counter(inp)\n    counts = Counter(heights.values())\n    if counts[1] == 1:\n        lonely = [height for (height, count) in heights.items() if count == 1][0]\n        for (height, count) in heights.items():\n            if count > 2 or height > lonely:\n                print(1)\n                break\n        else:\n            print(2)\n    else:\n        print((counts[1] + 1) // 2)", "def solve():\n    n = int(input())\n    H = list(map(int, input().split()))\n    H.sort()\n    counts = []\n    sad = 0\n    mp = {}\n    for i in range(n):\n        if H[i] in mp.keys():\n            mp[H[i]] += 1\n        else:\n            mp[H[i]] = 1\n    counts = list(mp.values())\n    sad = counts.count(1)\n    if sad == 1 and n % 2 != 0:\n        if H.count(H[n - 1]) == 1:\n            sad = min(filter(lambda x: x > 1, counts)) * 2\n    if sad % 2 == 0:\n        print(sad // 2)\n    else:\n        print((sad + 1) // 2)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "from collections import Counter\nt = int(input())\nwhile t != 0:\n    i = 0\n    c = 0\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = Counter(sorted(arr))\n    ls_loner = list([x for x in d if d[x] == 1])\n    if len(ls_loner) == 0:\n        print(0)\n    elif len(ls_loner) == 1:\n        if ls_loner[0] == max(arr):\n            ls_pair = list([x for x in d if d[x] > 2])\n            if len(ls_pair) != 0:\n                print(1)\n            else:\n                print(2)\n        else:\n            print(1)\n    else:\n        while True:\n            try:\n                if len(ls_loner) == 0:\n                    break\n                if len(ls_loner) > 3 or len(ls_loner) % 2 == 0:\n                    ls_loner[i] = ls_loner[i] + (ls_loner[i + 1] - ls_loner[i])\n                    c += 1\n                    ls_loner.pop(0)\n                    ls_loner.pop(1)\n                else:\n                    ls_loner[i] = ls_loner[i] + (ls_loner[i + 2] - ls_loner[i])\n                    ls_loner[i + 1] = ls_loner[i + 1] + (ls_loner[i + 2] - ls_loner[i + 1])\n                    i += 1\n                    c += 2\n            except:\n                print(c)\n                break\n        else:\n            print(c)\n    t -= 1", "def incHeights(students):\n    array = list(map(int, input().split(' ')))\n    array.sort(reverse=True)\n    frequency = {array[0]: 1}\n    for x in range(1, len(array)):\n        if array[x] == array[x - 1]:\n            frequency[array[x]] = frequency[array[x]] + 1\n        else:\n            frequency[array[x]] = 1\n    loner = set()\n    maxFreq = 0\n    for x in frequency:\n        if frequency[x] > maxFreq:\n            maxFreq = frequency[x]\n        if frequency[x] == 1:\n            loner.add(x)\n    x = len(loner)\n    if x == 1:\n        num = loner.pop()\n        if num == max(array):\n            if maxFreq > 2:\n                return 1\n            else:\n                return 2\n        else:\n            return 1\n    elif x % 2 == 0:\n        return int(x / 2)\n    else:\n        return int(x / 2) + 1\nfor x in range(int(input())):\n    students = int(input())\n    if students == 0:\n        print(0)\n    else:\n        print(incHeights(students))", "def incHeights(students):\n    array = list(map(int, input().split(' ')))\n    array.sort(reverse=True)\n    frequency = {array[0]: 1}\n    for x in range(1, len(array)):\n        if array[x] == array[x - 1]:\n            frequency[array[x]] = frequency[array[x]] + 1\n        else:\n            frequency[array[x]] = 1\n    loner = set()\n    maxFreq = 0\n    for x in frequency:\n        if frequency[x] > maxFreq:\n            maxFreq = frequency[x]\n        if frequency[x] == 1:\n            loner.add(x)\n    x = len(loner)\n    if x == 1:\n        num = loner.pop()\n        if num == max(array):\n            if maxFreq > 2:\n                return 1\n            else:\n                return 2\n        else:\n            return 1\n    elif x % 2 == 0:\n        return int(x / 2)\n    else:\n        return int(x / 2) + 1\nfor x in range(int(input())):\n    students = int(input())\n    if students == 0:\n        print(0)\n    else:\n        print(incHeights(students))", "import collections\n\ndef solve(p, n):\n    c = collections.Counter(p)\n    m = max(c)\n    ans = 0\n    for (i, j) in c.items():\n        if j == 1:\n            temp = i\n            ans += 1\n    if ans == 1 and m == temp:\n        return 1 if any((j > 2 for j in c.values())) else min((i for i in c.values() if i != 1))\n    return (ans + 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = solve(p, n)\n    print(ans)", "import collections\n\ndef solve(p, n):\n    c = collections.Counter(p)\n    m = max(c)\n    ans = 0\n    for (i, j) in c.items():\n        if j == 1:\n            temp = i\n            ans += 1\n    if ans == 1 and m == temp:\n        return 1 if any((j > 2 for j in c.values())) else min((i for i in c.values() if i != 1))\n    return (ans + 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = solve(p, n)\n    print(ans)", "from collections import Counter\nt = int(input())\nwhile t:\n    n = int(input())\n    h = list(map(int, input().split()))\n    ct = Counter(h)\n    (sadkey, maxvalue, maxelem, sad) = (0, 0, 0, 0)\n    for k in ct:\n        v = ct[k]\n        maxvalue = max(maxvalue, v)\n        maxelem = max(maxelem, k)\n        if v == 1:\n            sad += 1\n            sadkey = k\n    if maxvalue == 2 and sad == 1 and (maxelem == sadkey):\n        print(2)\n    else:\n        result = (sad + 1) // 2\n        print(result)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    N = input()\n    arr = [int(x) for x in input().split()]\n    dict = {}\n    for i in arr:\n        dict[i] = dict.get(i, 0) + 1\n    discount = 0\n    for i in dict.keys():\n        if dict[i] == 1:\n            discount += 1\n    if discount == 1:\n        if dict[max(arr)] == 1:\n            mini = None\n            del dict[max(arr)]\n            if max(dict.values()) == 2:\n                print('2')\n            else:\n                print('1')\n        else:\n            print('1')\n    elif discount % 2 == 0:\n        print(discount // 2)\n    else:\n        print(discount // 2 + 1)", "t = int(input())\nfor i in range(t):\n    N = input()\n    arr = [int(x) for x in input().split()]\n    dict = {}\n    for i in arr:\n        dict[i] = dict.get(i, 0) + 1\n    discount = 0\n    for i in dict.keys():\n        if dict[i] == 1:\n            discount += 1\n    if discount == 1:\n        if dict[max(arr)] == 1:\n            mini = None\n            del dict[max(arr)]\n            if max(dict.values()) == 2:\n                print('2')\n            else:\n                print('1')\n        else:\n            print('1')\n    elif discount % 2 == 0:\n        print(discount // 2)\n    else:\n        print(discount // 2 + 1)", "def fib():\n    n = int(input())\n    num = list(map(int, input().split()))\n    d = {}\n    un = 0\n    for i in num:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    val = list(d.values())\n    un = val.count(1)\n    if d[max(num)] == 1 and un == 1:\n        val.remove(1)\n        if len(val) == val.count(2):\n            print(2)\n        else:\n            print(1)\n    else:\n        print((un + 1) // 2)\nn = int(input())\nfor i in range(n):\n    fib()", "def fib():\n    n = int(input())\n    num = list(map(int, input().split()))\n    d = {}\n    un = 0\n    m = n\n    mx = 0\n    c = 0\n    for i in num:\n        mx = max(i, mx)\n        if i in d.keys():\n            d[i] += 1\n            m = min(d[i], m)\n        else:\n            d[i] = 1\n    val = list(d.values())\n    un = val.count(1)\n    if d[max(num)] == 1 and un == 1:\n        val.remove(1)\n        if len(val) == val.count(2):\n            print(2)\n        else:\n            print(1)\n    else:\n        print((un + 1) // 2)\nn = int(input())\nfor i in range(n):\n    fib()", "for _ in range(int(input())):\n    N = input()\n    arr = [int(x) for x in input().split(' ')]\n    dic = {}\n    for i in arr:\n        dic[i] = dic.get(i, 0) + 1\n    discount = 0\n    for i in dic.keys():\n        if dic[i] == 1:\n            discount += 1\n    if discount == 1:\n        if dic[max(arr)] == 1:\n            mini = None\n            del dic[max(arr)]\n            if max(dic.values()) == 2:\n                print('2')\n            else:\n                print('1')\n        else:\n            print('1')\n    elif discount % 2 == 0:\n        print(discount // 2)\n    else:\n        print(discount // 2 + 1)", "def main():\n    for _ in range(int(input())):\n        N = int(input())\n        arr = list(map(int, input().split()))\n        dic = {}\n        for i in arr:\n            if i in dic.keys():\n                dic[i] += 1\n            else:\n                dic[i] = 1\n        c = 0\n        f = 0\n        r = 0\n        for i in dic.keys():\n            if dic[i] == 1:\n                c += 1\n                r = i\n            if dic[i] > 2:\n                f = 1\n        if c == 1 and f == 0 and (r == max(arr)):\n            print(2)\n            continue\n        print(c // 2 + c % 2)\nmain()", "import sys\nfrom sys import stdin\ninput = stdin.readline\nimport math\n\ndef li():\n    return list(map(int, input().split()))\n\ndef mpi():\n    return map(int, input().split())\n\ndef sli():\n    return list(map(str, input().split()))\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input()\nfor _ in range(ii()):\n    n = ii()\n    a = li()\n    f = {}\n    for i in a:\n        if i in f:\n            f[i] += 1\n        else:\n            f[i] = 1\n    c = 0\n    for (i, j) in f.items():\n        if j == 1:\n            c += 1\n    if c == 1:\n        m = max(a)\n        if f[m] != 1:\n            print(1)\n        elif max(f.values()) > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print(math.ceil(c / 2))", "def main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        A = list(map(int, input().split()))\n        freq = {}\n        for i in range(N):\n            if A[i] in freq:\n                freq[A[i]] += 1\n            else:\n                freq[A[i]] = 1\n        count = 0\n        freq = sorted(list(map(lambda x: [x[0], x[1]], freq.items())), key=lambda x: x[0])\n        (i, k) = (0, len(freq) - 1)\n        while i < len(freq):\n            if i < len(freq) - 1 and freq[i][1] == 1:\n                while k > i:\n                    if freq[k][1] == 1:\n                        freq[i][1] = 0\n                        freq[k][1] += 1\n                        break\n                    k -= 1\n                count += 1\n            i += 1\n        if freq[len(freq) - 1][1] == 1:\n            maxFreq = 0\n            for i in range(len(freq) - 1):\n                maxFreq = max(maxFreq, freq[i][1])\n            if maxFreq == 2:\n                count += 2\n            else:\n                count += 1\n        print(count)\nmain()", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = Counter(a)\n    mi = 0\n    cal = 0\n    ans = 0\n    for c in d:\n        if d[c] == 1:\n            ans += 1\n            cal = c\n        else:\n            mi = max(mi, d[c])\n    if ans == 1 and cal == max(a) and (mi == 2):\n        answer = 2\n    else:\n        answer = int(ans / 2) + int(ans % 2)\n    print(answer)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    c = 0\n    h = max(l)\n    p = max(list(d.values()))\n    for i in d:\n        if d[i] == 1:\n            c += 1\n    if c != 0:\n        x = (c + 1) // 2\n        if c % 2 != 0:\n            if d[h] == 1:\n                if p == 2:\n                    x += 1\n    else:\n        x = 0\n    print(x)", "for _ in range(int(input())):\n    n = int(input())\n    groups = {}\n    for h in map(int, input().split(' ')):\n        groups[h] = groups.get(h, 0) + 1\n    solos = sorted([h for (h, cnt) in groups.items() if cnt == 1], reverse=True)\n    cnt = 0\n    while len(solos) > 0:\n        if len(solos) > 1:\n            l = solos.pop(0)\n            r = solos.pop(0)\n            groups[l] += 1\n            del groups[r]\n            cnt += 1\n            continue\n        hsolo = solos.pop(0)\n        h_gt_solo = next((h for h in groups if h > hsolo), None)\n        if h_gt_solo:\n            groups[h_gt_solo] += 1\n            del groups[hsolo]\n            cnt += 1\n            continue\n        (max_h, max_cnt) = max(((h, cnt) for (h, cnt) in groups.items()), key=lambda x: x[1])\n        if max_cnt == 2:\n            del groups[max_h]\n            groups[hsolo] += 2\n            cnt += 2\n        else:\n            groups[max_h] -= 1\n            groups[hsolo] += 1\n            cnt += 1\n    print(cnt)", "from collections import defaultdict as dd\nfor t in range(int(input())):\n    n = int(input())\n    hs = list(map(int, input().split()))\n    counts = dd(int)\n    for h in hs:\n        counts[h] += 1\n    sad = sum((v == 1 for (_, v) in counts.items()))\n    if sad != 1:\n        print((sad + 1) // 2)\n        continue\n    tallest = max(hs)\n    if counts[tallest] != 1:\n        print(1)\n        continue\n    big_group = max(counts.values())\n    if big_group == 2:\n        print(2)\n    else:\n        print(1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    obj = {}\n    ans = 0\n    for i in arr:\n        if i in obj:\n            obj[i] += 1\n        else:\n            obj[i] = 1\n    for (key, val) in obj.items():\n        if val == 1:\n            ans += 1\n    if ans == 1 and arr.count(max(arr)) == 1:\n        if max(obj.values()) > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print((ans + 1) // 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    obj = {}\n    ans = 0\n    for i in arr:\n        if i in obj:\n            obj[i] += 1\n        else:\n            obj[i] = 1\n    for (key, val) in obj.items():\n        if val == 1:\n            ans += 1\n    if ans == 1 and arr.count(max(arr)) == 1:\n        if max(obj.values()) > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print((ans + 1) // 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    obj = {}\n    ans = 0\n    for i in arr:\n        if i in obj:\n            obj[i] += 1\n        else:\n            obj[i] = 1\n    for (key, val) in obj.items():\n        if val == 1:\n            ans += 1\n    if ans == 1 and arr.count(max(arr)) == 1:\n        if max(obj.values()) > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print((ans + 1) // 2)", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = 0\n    x = Counter(l)\n    y = []\n    for i in x.values():\n        if i == 1:\n            a += 1\n    if a == 1 and l.count(max(l)) == 1:\n        if max(x.values()) > 2:\n            print(1)\n        else:\n            print(2)\n    else:\n        print((a + 1) // 2)", "from collections import Counter\ntc = int(input())\nfor i in range(tc):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    cnt = [x for x in c.values() if x == 1]\n    mx = max(c.keys())\n    if c[mx] == 1 and len(cnt) == 1:\n        print(1 if max(c.values()) > 2 else 2)\n    else:\n        print(len(cnt) // 2 + len(cnt) % 2)", "from collections import Counter\nfrom math import ceil\nfor i in range(int(input())):\n    _ = input()\n    inp = list(map(int, input().split()))\n    heights = Counter(inp)\n    counts = Counter(heights.values())\n    if counts[1] == 1:\n        lonely = [height for (height, count) in heights.items() if count == 1][0]\n        for (height, count) in heights.items():\n            if count > 2 or height > lonely:\n                print(1)\n                break\n        else:\n            print(2)\n    else:\n        print((counts[1] + 1) // 2)", "from collections import Counter\ntest = int(input())\nwhile test != 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = Counter(arr)\n    d = dict(c)\n    count = 0\n    for _ in c:\n        if c[_] == 1:\n            count += 1\n    max_key = max(list(d.keys()))\n    vals = list(d.values())\n    if vals.count(1) == 1 and d[max_key] == 1:\n        print(1 if max(vals) >= 3 else 2)\n    else:\n        print(count // 2 if count % 2 == 0 else count // 2 + 1)\n    test -= 1", "import collections\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    h = list(map(int, input().split()))\n    mh = max(h)\n    mhf = h.count(mh)\n    p = collections.Counter(h)\n    p1 = p.values()\n    f = list(p1)\n    k = f.count(1)\n    mg = max(f)\n    if k % 2 == 1:\n        ot = k // 2 + 1\n        if mhf == 1:\n            if mg % 2 == 0:\n                ot += 1\n        print(ot)\n    else:\n        ot = k // 2\n        print(ot)", "import math\ntests = int(input())\nfor i in range(tests):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    unique_dict = {}\n    for x in arr:\n        if x in unique_dict:\n            unique_dict[x] += 1\n        else:\n            unique_dict[x] = 1\n    lone_students = 0\n    more_than_required = 0\n    max_lone_student_height = 0\n    for x in unique_dict.keys():\n        if unique_dict[x] == 1:\n            lone_students += 1\n            max_lone_student_height = max(x, max_lone_student_height)\n        if unique_dict[x] > 2:\n            more_than_required += 1\n    if lone_students > 1:\n        print(math.ceil(lone_students / 2))\n    elif lone_students == 1:\n        if more_than_required > 0 or max_lone_student_height < max(arr):\n            print(1)\n        else:\n            print(2)\n    else:\n        print(0)", "from collections import Counter\ntc = int(input())\nfor case in range(tc):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    cnt = [x for x in c.values() if x == 1]\n    mx = max(c.keys())\n    if c[mx] == 1 and len(cnt) == 1:\n        print(1 if max(c.values()) > 2 else 2)\n    else:\n        print(len(cnt) // 2 + len(cnt) % 2)", "def solve(x: list):\n    m = 0\n    h = {}\n    for i in x:\n        if i > m:\n            m = i\n        if i in h:\n            h[i] += 1\n        else:\n            h[i] = 1\n    s = 0\n    for (k, v) in h.items():\n        if v > 1:\n            continue\n        s += 1\n    if h[m] == 1:\n        h.pop(m)\n        if True in map(lambda x: x == 1 or x > 2, h.values()):\n            return s if s < 2 else s // 2 + 1 if s % 2 else s // 2\n        else:\n            return s + 1 if s < 2 else s // 2 + 2 if s % 2 else s // 2 + 1\n    return s if s < 2 else s // 2 + 1 if s % 2 else s // 2\nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    print(solve(x))", "from collections import Counter\ntc = int(input())\nfor case in range(tc):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    cnt = [x for x in c.values() if x == 1]\n    mx = max(c.keys())\n    if c[mx] == 1 and len(cnt) == 1:\n        print(1 if max(c.values()) > 2 else 2)\n    else:\n        print(len(cnt) // 2 + len(cnt) % 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    m = max(lst)\n    cnt2 = lst.count(m)\n    arr = []\n    cnt = 1\n    for i in range(len(lst) - 1):\n        if lst[i] != lst[i + 1]:\n            arr.append(cnt)\n            cnt = 1\n        else:\n            cnt += 1\n    if len(arr) == 0:\n        arr.append(cnt)\n    if lst[len(lst) - 1] == lst[len(lst) - 2]:\n        arr.append(cnt)\n    else:\n        arr.append(1)\n    cnt1 = 0\n    for i in arr:\n        if i == 1:\n            cnt1 += 1\n    if cnt2 == 1 and cnt1 == 1 and (n % 2 != 0):\n        print(2)\n    elif cnt1 % 2 == 0:\n        print(int(cnt1 / 2))\n    else:\n        print(int(cnt1 / 2) + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    m = max(lst)\n    cnt2 = lst.count(m)\n    arr = []\n    cnt = 1\n    for i in range(len(lst) - 1):\n        if lst[i] != lst[i + 1]:\n            arr.append(cnt)\n            cnt = 1\n        else:\n            cnt += 1\n    if len(arr) == 0:\n        arr.append(cnt)\n    if lst[len(lst) - 1] == lst[len(lst) - 2]:\n        arr.append(cnt)\n    else:\n        arr.append(1)\n    cnt1 = 0\n    for i in arr:\n        if i == 1:\n            cnt1 += 1\n    if cnt2 == 1 and cnt1 == 1 and (n % 2 != 0):\n        print(2)\n    elif cnt1 % 2 == 0:\n        print(int(cnt1 / 2))\n    else:\n        print(int(cnt1 / 2) + 1)", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    a = max(lst)\n    d = {}\n    cnt1 = 0\n    for j in lst:\n        if j == a:\n            cnt1 += 1\n    for i in lst:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    cnt2 = 0\n    for key in d:\n        if d[key] == 1:\n            cnt2 += 1\n    if cnt2 == 1 and cnt1 == 1 and (n % 2 != 0):\n        print(2)\n    elif cnt2 % 2 == 0:\n        print(int(cnt2 / 2))\n    else:\n        print(int(cnt2 / 2) + 1)", "for _ in range(int(input())):\n    n = int(input())\n    m = list(map(int, input().split()))\n    a = max(m)\n    d = {}\n    count1 = 0\n    for j in m:\n        if j == a:\n            count1 += 1\n    for i in m:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    count2 = 0\n    for key in d:\n        if d[key] == 1:\n            count2 += 1\n    if count2 == 1 and count1 == 1 and (n % 2 != 0):\n        print(2)\n    elif count2 % 2 == 0:\n        print(count2 // 2)\n    elif count2 % 2 != 0:\n        print(count2 // 2 + 1)"]