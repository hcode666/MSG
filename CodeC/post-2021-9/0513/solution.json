["T = int(input())\nfor t in range(1, T + 1):\n    inp = input().split()\n    N = int(inp[0])\n    K = int(inp[1])\n    A = list(map(int, input().split()))\n    cnt = 0\n    freq = {}\n    for a in A:\n        if a in freq.keys():\n            cnt += freq[a]\n        val = K - a ^ a\n        if val in freq.keys():\n            freq[val] += 1\n        else:\n            freq[val] = 1\n    print(cnt)", "import sys, os\nfrom sys import stdin, stdout\nio_path = 'E:\\\\Personal\\\\competitve-programming\\\\IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (n, k) = get_ints()\n    arr = get_ints_list()\n    aux = {}\n    ans = 0\n    for i in arr:\n        res = k - i ^ i\n        if i in aux:\n            ans += aux[i]\n        else:\n            aux[i] = 0\n        if res in aux:\n            aux[res] += 1\n        else:\n            aux[res] = 1\n    print(ans)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = 'E:\\\\Personal\\\\competitve-programming\\\\IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (n, k) = get_ints()\n    arr = get_ints_list()\n    aux = {}\n    ans = 0\n    for i in arr:\n        res = k - i ^ i\n        if i in aux:\n            ans += aux[i]\n        else:\n            aux[i] = 0\n        if res in aux:\n            aux[res] += 1\n        else:\n            aux[res] = 1\n    print(ans)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = 'E:\\\\Personal\\\\competitve-programming\\\\IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (n, k) = get_ints()\n    arr = get_ints_list()\n    aux = {}\n    ans = 0\n    for i in arr:\n        res = k - i ^ i\n        if i in aux:\n            ans += aux[i]\n        if res in aux:\n            aux[res] += 1\n        else:\n            aux[res] = 1\n    print(ans)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = 'E:\\\\Personal\\\\competitve-programming\\\\IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (n, k) = get_ints()\n    arr = get_ints_list()\n    aux = {}\n    ans = 0\n    for i in arr:\n        res = k - i ^ i\n        if i in aux:\n            ans += aux[i]\n        if res in aux:\n            aux[res] += 1\n        else:\n            aux[res] = 1\n    print(ans)\n    test_cases -= 1", "for _ in range(int(input())):\n    (N, k) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    counter = 0\n    my_dict = {}\n    for i in range(N):\n        if A[i] in my_dict:\n            my_dict[A[i]] += 1\n        else:\n            my_dict[A[i]] = 1\n    for i in range(N):\n        val = k - A[i] ^ A[i]\n        if val in my_dict:\n            counter += my_dict[val]\n            if A[i] == val:\n                counter -= 1\n        my_dict[A[i]] -= 1\n    print(counter)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    dict_count = {}\n    for idx in range(n):\n        if arr[idx] in dict_count:\n            dict_count[arr[idx]] += 1\n        else:\n            dict_count[arr[idx]] = 1\n    res = 0\n    for idx in range(n):\n        temp = k - arr[idx] ^ arr[idx]\n        if temp in dict_count:\n            res += dict_count[temp]\n            if arr[idx] == temp:\n                res = res - 1\n        dict_count[arr[idx]] -= 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    dict_count = {}\n    for idx in range(n):\n        if arr[idx] in dict_count:\n            dict_count[arr[idx]] += 1\n        else:\n            dict_count[arr[idx]] = 1\n    res = 0\n    for idx in range(n):\n        temp = k - arr[idx] ^ arr[idx]\n        if temp in dict_count and dict_count[temp] > 0:\n            res += dict_count[temp]\n            if arr[idx] == temp:\n                res = res - 1\n        dict_count[arr[idx]] -= 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = {}\n    ans = 0\n    for x in arr:\n        try:\n            ans += d[x]\n        except:\n            pass\n        if x <= k:\n            ele = x ^ k - x\n            try:\n                d[ele] += 1\n            except:\n                d[ele] = 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = defaultdict(int)\n    l = list(map(int, input().split()))\n    sm = 0\n    for i in range(n):\n        x = d[l[i]]\n        sm += x\n        z = k - l[i] ^ l[i]\n        d[z] += 1\n    print(sm)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = defaultdict(int)\n    l = list(map(int, input().split()))\n    sm = 0\n    for i in range(n):\n        x = d[l[i]]\n        sm += x\n        z = k - l[i] ^ l[i]\n        d[z] += 1\n    print(sm)", "from collections import Counter\nR = int(input())\nwhile R:\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    hash = Counter()\n    ans = 0\n    for i in range(N):\n        ans += hash[A[i]]\n        hash[K - A[i] ^ A[i]] += 1\n    print(ans)\n    R -= 1", "from collections import Counter\nT = int(input())\nwhile T:\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    hash = Counter()\n    ans = 0\n    for i in range(N):\n        ans += hash[A[i]]\n        hash[K - A[i] ^ A[i]] += 1\n    print(ans)\n    T -= 1", "from collections import Counter\nT = int(input())\nwhile T:\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    hash = Counter()\n    ans = 0\n    for i in range(N):\n        ans += hash[A[i]]\n        hash[K - A[i] ^ A[i]] += 1\n    print(ans)\n    T -= 1", "T = int(input())\nfor i in range(T):\n    Nk = str(input()).split(' ')\n    N = int(Nk[0])\n    k = int(Nk[1])\n    A = str(input()).split(' ')\n    dicto = {}\n    total = 0\n    for j in range(N):\n        total = total + dicto.get(int(A[j]), 0)\n        dicto[k - int(A[j]) ^ int(A[j])] = dicto.get(k - int(A[j]) ^ int(A[j]), 0) + 1\n    print(total)", "import sys\nimport math\nimport bisect\nimport heapq\nfrom bisect import bisect_right\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_of_list(n):\n    return [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef myceil(x, y):\n    return (x + y - 1) // y\n\ndef Solution():\n    pass\n\ndef main():\n    for _ in range(get_int()):\n        (n, k) = get_ints_in_variables()\n        a = get_ints_in_list()\n        hm = {}\n        ans = 0\n        for v in a:\n            if v in hm:\n                ans += hm[v]\n            aj = k - v ^ v\n            if aj in hm:\n                hm[aj] += 1\n            else:\n                hm[aj] = 1\n        print(ans)\nmain()", "def xor(a, k):\n    return k - a ^ a\n\ndef ans(arr, k):\n    d = {}\n    answer = 0\n    for y in arr:\n        if y in d.keys():\n            answer += d[y]\n        t = xor(y, k)\n        if t in d.keys():\n            d[t] += 1\n        else:\n            d[t] = 1\n    return answer\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = list(map(int, input().split()))\n    d2 = list(map(int, input().split()))\n    print(ans(d2, d[1]))\n    test_cases -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split(' '))\n    v = list(map(int, input().strip().split(' ')))\n    freq = {}\n    ans = 0\n    for i in range(0, n):\n        if v[i] in freq.keys():\n            ans += freq[v[i]]\n        if k >= v[i]:\n            req = k - v[i] ^ v[i]\n            if req in freq.keys():\n                freq[req] += 1\n            else:\n                freq[req] = 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    freq = {}\n    ans = 0\n    for i in range(0, n):\n        if v[i] in freq.keys():\n            ans += freq[v[i]]\n        if k >= v[i]:\n            req = k - v[i] ^ v[i]\n            if req in freq.keys():\n                freq[req] += 1\n            else:\n                freq[req] = 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = 0\n    d = defaultdict(lambda : 0)\n    for i in l:\n        ans += d[i]\n        d[k - i ^ i] += 1\n    print(ans)", "from collections import defaultdict as dd\nt = int(input())\nfor _ in range(t):\n    (n, k) = list((int(x) for x in input().split()))\n    l = list((int(x) for x in input().split()))\n    d = dd(int)\n    res = 0\n    for v in l[::-1]:\n        v2 = k - v ^ v\n        res += d[v2]\n        d[v] += 1\n    print(res)", "from collections import defaultdict as dd\nt = int(input())\nfor _ in range(t):\n    (n, k) = list((int(x) for x in input().split()))\n    l = list((int(x) for x in input().split()))\n    d = dd(int)\n    res = 0\n    for v in l[::-1]:\n        v2 = k - v ^ v\n        res += d[v2]\n        d[v] += 1\n    print(res)", "import collections\nT = int(input())\nfor _ in range(T):\n    (P, Q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    D = collections.defaultdict(int)\n    ans = 0\n    for i in range(P):\n        ans += D[A[i]]\n        if A[i] <= Q:\n            D[Q - A[i] ^ A[i]] += 1\n    print(ans)", "q = int(input())\nfor _ in range(q):\n    inp = list(map(int, input().split()))\n    n = inp[0]\n    k = inp[1]\n    a = list(map(int, input().split()))\n    f = {}\n    count = 0\n    for i in range(n):\n        b_i = k - a[i] ^ a[i]\n        count += f.get(a[i], 0)\n        if b_i in f:\n            f[b_i] += 1\n        else:\n            f[b_i] = 1\n    print(count)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    res = {}\n    for i in range(n):\n        oper = k - arr[i] ^ arr[i]\n        if arr[i] in res:\n            ans += res[arr[i]]\n        if oper in res:\n            res[oper] += 1\n        else:\n            res[oper] = 1\n    print(ans)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        (n, k) = sep()\n        arr = lis()\n        c = Counter(arr)\n        ans = 0\n        for i in range(n):\n            c[arr[i]] -= 1\n            if arr[i] > k:\n                continue\n            ans += c[arr[i] ^ k - arr[i]]\n        print(ans)\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    d = {}\n    for i in range(n):\n        if a[i] in d.keys():\n            ans += d[a[i]]\n        if k >= a[i]:\n            b = k - a[i] ^ a[i]\n            if b in d.keys():\n                d[b] += 1\n            else:\n                d[b] = 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    d = {}\n    for i in range(n):\n        if a[i] in d.keys():\n            ans += d[a[i]]\n        if k >= a[i]:\n            b = k - a[i] ^ a[i]\n            if b in d.keys():\n                d[b] += 1\n            else:\n                d[b] = 1\n    print(ans)", "from collections import defaultdict\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    ans = 0\n    D = defaultdict(int)\n    for aj in map(int, input().split()):\n        ans += D[aj]\n        if aj <= K:\n            D[aj ^ K - aj] += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().rstrip().split())\n    l = list(map(int, input().rstrip().split()))\n    d = dict()\n    ans = 0\n    for ele in l:\n        ans += d.get(ele, 0)\n        if k >= ele:\n            x = k - ele ^ ele\n            d[x] = d.get(x, 0) + 1\n    print(ans)", "import collections\nfrom math import ceil, gcd, sqrt, log\nINF = float('inf')\nmod = 1000000007\n\ndef solve():\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    net = collections.defaultdict(int)\n    ans = 0\n    for i in range(n):\n        ans += net[A[i]]\n        net[k - A[i] ^ A[i]] += 1\n    print(ans)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    c = list(map(int, input().split()))\n    dict_ = {}\n    ans = 0\n    for i in range(a):\n        if c[i] in dict_.keys():\n            ans += dict_[c[i]]\n        if b >= c[i]:\n            dict_1 = b - c[i] ^ c[i]\n            if dict_1 in dict_.keys():\n                dict_[dict_1] += 1\n            else:\n                dict_[dict_1] = 1\n    print(ans)", "from collections import Counter as C\nR = lambda : input()\nI = lambda : int(R())\nM = lambda : map(int, R().split())\nRS = lambda : map(str, R().split(' '))\nL = lambda : list(M())\nfor _ in range(I()):\n    (n, k) = M()\n    arr = L()\n    c = C()\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if k >= arr[i]:\n            ans += c[arr[i] ^ k - arr[i]]\n        c[arr[i]] += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    lis = list(map(int, input().split()))\n    (n, k) = (lis[0], lis[1])\n    a = list(map(int, input().split()))\n    count = 0\n    dic = {}\n    if n == 1:\n        print(0)\n    else:\n        for i in range(n):\n            aux = a[i] ^ k - a[i]\n            if a[i] in dic:\n                count += dic[a[i]]\n            if aux not in dic:\n                dic[aux] = 1\n            else:\n                dic[aux] += 1\n        print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [int(i) for i in input().split()]\n    ans = 0\n    n1 = max(s)\n    d = dict()\n    for i in range(n):\n        t1 = k - s[i] ^ s[i]\n        if s[i] in d:\n            ans += d[s[i]]\n        if t1 in d:\n            d[t1] += 1\n        else:\n            d[t1] = 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (memo, count) = ({}, 0)\n    for i in a:\n        count += memo.get(i, 0)\n        memo[k - i ^ i] = memo.get(k - i ^ i, 0) + 1\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    d = {}\n    for i in range(n):\n        if a[i] in d.keys():\n            ans += d[a[i]]\n        if k >= a[i]:\n            b = k - a[i] ^ a[i]\n            if b in d.keys():\n                d[b] += 1\n            else:\n                d[b] = 1\n    print(ans)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = dict()\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        re = x - a[i] ^ a[i]\n        if re in d.keys():\n            ans += d[re]\n        if a[i] in d.keys():\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    print(ans)", "import sys\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom heapq import *\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef dist(x1, x2, y1, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef mergeSort(arr, check=lambda a, b: a < b, reverse=False):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L, check, reverse)\n        mergeSort(R, check, reverse)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if check(L[i], R[j]):\n                if not reverse:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n            elif not reverse:\n                arr[k] = R[j]\n                j += 1\n            else:\n                arr[k] = L[i]\n                i += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef maxSum(arr):\n    max_sum = float('-inf')\n    max_cur = 0\n    for num in ar:\n        max_cur = max(max_cur + num, num)\n        if max_cur > max_sum:\n            max_sum = max_cur\n    return max_sum\n\ndef hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, b % a)\n\ndef get_power(n, m):\n    i = 1\n    p = -1\n    while i <= n:\n        i = i * m\n        p += 1\n    return p\n\ndef fact(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n    return f\n\ndef find_closest(num, ar):\n    min_d = float('inf')\n    for num2 in ar:\n        d = abs(num2 - num)\n        if d < min_d:\n            min_d = d\n    return min_d\n\ndef check_pal(n):\n    s = str(n)\n    j = len(s) - 1\n    i = 0\n    while j > i:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef solve(t):\n    (n, k) = readInts()\n    ar = readList()\n    dic = {}\n    res = 0\n    for i in range(n - 1, -1, -1):\n        req = ar[i] ^ k - ar[i]\n        if req in dic:\n            res += dic[req]\n        if ar[i] in dic:\n            dic[ar[i]] += 1\n        else:\n            dic[ar[i]] = 1\n    print(res)\n\ndef main():\n    t = 1\n    sys.setrecursionlimit(2000)\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "for t in range(int(input())):\n    (N, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.reverse()\n    count = 0\n    d = dict()\n    for i in A:\n        count += d.get(k - i ^ i, 0)\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(count)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    a = [int(x) for x in input().split()]\n    d = {}\n    c = 0\n    for i in range(n):\n        x = a[i]\n        x = x ^ k - x\n        if a[i] in d.keys():\n            c += d[a[i]]\n        if x in d.keys():\n            d[x] += 1\n        else:\n            d[x] = 1\n    print(c)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    d = defaultdict(int)\n    ans = 0\n    for el in arr:\n        ans += d[el]\n        d[el ^ k - el] += 1\n    print(ans)", "import collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = [int(x) for x in input().split()]\n    d = collections.defaultdict(lambda : 0)\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        tmp = k - s[i] ^ s[i]\n        cnt += d[tmp]\n        d[s[i]] += 1\n    print(cnt)", "import math\nimport bisect\nimport heapq\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef exponentiation(bas, exp, mod=1000000007):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef process(arr, n, k):\n    val = ddc(int)\n    ans = 0\n    for ele in arr:\n        ans += val[ele]\n        if ele <= k:\n            val[ele ^ k - ele] += 1\n    return ans\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = mapin()\n        arr = list(mapin())\n        print(process(arr, n, k))\nmain()", "from collections import defaultdict\nfor tcase in range(int(input())):\n    (n, k) = map(int, input().split())\n    ans = 0\n    d = defaultdict(int)\n    for aj in map(int, input().split()):\n        ans += d[aj]\n        if aj <= k:\n            d[aj ^ k - aj] += 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = 0\n    d = defaultdict(int)\n    for i in range(n):\n        ans += d[a[i]]\n        d[a[i] ^ k - a[i]] += 1\n    print(ans)", "import sys\nimport os\nimport math\nfrom collections import *\nimport bisect\nfrom heapq import *\nfrom itertools import permutations, combinations\nif os.path.exists('input.txt') and os.path.exists('output.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    k1 = math.gcd(a, b)\n    k2 = a * b\n    return k2 // k1\n\ndef inp():\n    return map(int, input().strip().split(' '))\n\ndef lis():\n    return list(inp())\nmod = 998244353\n\ndef prim(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nma = 2 * (10 ** 5 + 1)\n\ndef update(ind, val, n):\n    while ind <= n:\n        fenwick[ind] += val\n        ind += ind & -ind\n\ndef qsum(ind):\n    ans = 0\n    while ind > 0:\n        ans += fenwick[ind]\n        ind -= ind & -ind\n    return ans\n\ndef dfs(adj, vis, u, l):\n    vis[u] = 1\n    l.add(u)\n    for i in adj[u]:\n        if vis[i] == 0:\n            dfs(adj, vis, i, l)\nmod = 10 ** 9 + 7\nma = 1002\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\n\ndef dfs(i, j, arr, vis, n, m):\n    vis[i][j] = 1\n    for x in range(4):\n        mx = i + dx[x]\n        my = j + dy[x]\n        if mx >= 0 and mx < n and (my >= 0) and (my < m) and (vis[mx][my] == 0):\n            if arr[i][j] >= arr[mx][my]:\n                dfs(mx, my, arr, vis, n, m)\n\ndef dfs(a, vis, node, c):\n    vis[node] = 1\n    c[0] += 1\n    if vis[a[node]] == 0:\n        dfs(a, vis, a[node], c)\nmod = 998244353\n\ndef f(n):\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\nmod = 10 ** 9 + 7\n\ndef finv(p, q):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef solve():\n    (n, k) = inp()\n    a = lis()\n    d = {}\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if k < a[i]:\n            d[a[i]] = d.get(a[i], 0) + 1\n            continue\n        res = k - a[i] ^ a[i]\n        if res in d:\n            ans += d[res]\n        d[a[i]] = d.get(a[i], 0) + 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    d = dict()\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(k - a[i])\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    ans = 0\n    for i in range(n):\n        if b[i] < 0:\n            pass\n        else:\n            num = a[i] ^ b[i]\n            if num == a[i]:\n                ans += d[num] - 1\n            elif num in d:\n                ans += d[num]\n        d[a[i]] -= 1\n    print(ans)"]