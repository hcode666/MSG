["import math\nfrom math import sqrt\n\ndef prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef printDivisors(n):\n    i = 2\n    d = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                return i\n            else:\n                return min(i, n // i)\n        i = i + 1\n    return d\nfor i in range(int(input())):\n    m = int(input())\n    if prime(m):\n        print(m + 1)\n    else:\n        w = printDivisors(m)\n        print((w + 1) * (m // w))", "import math\nfrom math import sqrt\n\ndef prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef printDivisors(n):\n    i = 2\n    d = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                return i\n            else:\n                return min(i, n // i)\n        i = i + 1\n    return d\nfor i in range(int(input())):\n    m = int(input())\n    if prime(m):\n        print(m + 1)\n    else:\n        w = printDivisors(m)\n        print((w + 1) * (m // w))", "import math\nfrom math import sqrt\n\ndef prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef printDivisors(n):\n    i = 2\n    d = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                return i\n            else:\n                return min(i, n // i)\n        i = i + 1\n    return d\nfor i in range(int(input())):\n    m = int(input())\n    if prime(m):\n        print(m + 1)\n    else:\n        w = printDivisors(m)\n        print((w + 1) * (m // w))", "import math\nfrom math import sqrt\n\ndef prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef printDivisors(n):\n    i = 2\n    d = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                return i\n            else:\n                return min(i, n // i)\n        i = i + 1\n    return d\nfor i in range(int(input())):\n    m = int(input())\n    if prime(m):\n        print(m + 1)\n    else:\n        w = printDivisors(m)\n        print((w + 1) * (m // w))", "import math\nfrom math import sqrt\n\ndef snek(n):\n    p = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                p = 1\n                break\n        if p == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef snek2(n):\n    c = 2\n    d = []\n    while c <= math.sqrt(n):\n        if n % c == 0:\n            if n / c == c:\n                return c\n            else:\n                return min(c, n // c)\n        c += 1\n    return d\nt = int(input())\nfor i in range(t):\n    m = int(input())\n    if snek(m):\n        print(m + 1)\n    else:\n        w = snek2(m)\n        print((w + 1) * (m // w))", "import math\nfrom math import sqrt\n\ndef snek(n):\n    p = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                p = 1\n                break\n        if p == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef snek2(n):\n    c = 2\n    d = []\n    while c <= math.sqrt(n):\n        if n % c == 0:\n            if n / c == c:\n                return c\n            else:\n                return min(c, n // c)\n        c += 1\n    return d\nt = int(input())\nfor i in range(t):\n    m = int(input())\n    if snek(m):\n        print(m + 1)\n    else:\n        w = snek2(m)\n        print((w + 1) * (m // w))", "import math\nfrom math import sqrt\n\ndef prime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return False\n\ndef printDivisors(n):\n    i = 2\n    d = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                return i\n            else:\n                return min(i, n // i)\n        i = i + 1\n    return d\nfor i in range(int(input())):\n    m = int(input())\n    if prime(m):\n        print(m + 1)\n    else:\n        w = printDivisors(m)\n        print((w + 1) * (m // w))", "import math, sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ncompute_lcm = lambda x, y: x * y // math.gcd(x, y)\nfor t_itr in range(int(input())):\n    n = int(input())\n    p = 1\n    current_min = 10 ** 20\n    out = (n, n + 1)\n    while p * p <= n:\n        if n % p == 0:\n            flag1 = abs(compute_lcm(n, n + p) - math.gcd(n, n + p))\n            flag2 = flag1 + 1\n            if n + n // p != 2 * n:\n                flag2 = abs(compute_lcm(n, n + n // p) - math.gcd(n, n + n // p))\n            cpl = (n, n + p)\n            if flag2 <= flag1:\n                cpl = (n, n + n // p)\n            flag = min(flag1, flag2)\n            if flag <= current_min:\n                out = cpl\n                current_min = min(current_min, flag)\n        p += 1\n    print(out[1])", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n * 3 // 2)\n    else:\n        i = 2\n        flag = 0\n        while i * i <= n:\n            if n % i == 0:\n                print(n * (i + 1) // i)\n                flag = 1\n                break\n            i += 1\n        if flag == 0:\n            print(n + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = 1\n    b = n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            a = i\n            b = n // i\n            break\n    if a == 1:\n        print(a * (b + 1))\n    else:\n        print(b * (a + 1))", "import sys\ninput = sys.stdin.readline\n\ndef GetPrimes(max_prime=10 ** 6):\n    primes = []\n    is_prime = [True for n in range(max_prime + 1)]\n    for n in range(2, max_prime + 1):\n        if is_prime[n]:\n            primes += [n]\n            for m in range(2 * n, max_prime + 1, n):\n                is_prime[m] = False\n    return primes\n\ndef GetSmallestPrimeFactor(x):\n    if x in primes_set:\n        return x\n    for prime in primes:\n        if x % prime == 0:\n            return prime\n    return x\nprimes = GetPrimes()\nprimes_set = set(primes)\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    n = int(input())\n    smallest_prime_factor = GetSmallestPrimeFactor(n)\n    biggest_factor = n // smallest_prime_factor\n    print(n + biggest_factor)", "import sys\ninput = sys.stdin.readline\n\ndef GetPrimes(max_prime=10 ** 6):\n    primes = []\n    is_prime = [True for n in range(max_prime + 1)]\n    for n in range(2, max_prime + 1):\n        if is_prime[n]:\n            primes += [n]\n            for m in range(2 * n, max_prime + 1, n):\n                is_prime[m] = False\n    return primes\n\ndef GetSmallestPrimeFactor(x):\n    if x in primes_set:\n        return None\n    for prime in primes:\n        if x % prime == 0:\n            return prime\n    return None\nprimes = GetPrimes()\nprimes_set = set(primes)\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    n = int(input())\n    smallest_prime_factor = GetSmallestPrimeFactor(n)\n    if not smallest_prime_factor:\n        print(n + 1)\n    else:\n        biggest_factor = n // smallest_prime_factor\n        print(n + biggest_factor)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    sec = 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            sec = n // i\n            break\n    if sec != 1:\n        print(sec * (n // sec + 1))\n    else:\n        print(n + 1)", "from math import sqrt\n\ndef get_lowest_prime_multiple(N):\n    if N % 2 == 0:\n        return 2\n    for j in range(3, int(sqrt(N)) + 1, 2):\n        if N % j == 0:\n            return j\n    return N\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    l_prime = get_lowest_prime_multiple(N)\n    ans = N // l_prime * (l_prime + 1)\n    print(ans)", "from math import ceil, sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    n1 = n\n    d = dict()\n    flag = 0\n    s = 0\n    for i in range(2, ceil(sqrt(n)) + 1):\n        if n % i == 0:\n            n //= i\n            d[i] = d[i] + 1 if d.get(i) else 1\n            if not flag:\n                flag = 1\n                s = i\n                break\n    d[n] = d[n] + 1 if d.get(n) else 1\n    if not flag:\n        print(n1 + 1)\n    else:\n        print(n1 // 2 * 3) if s == 2 else print(n1 // s * (s + 1))", "from math import *\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    n = int(input())\n    n1 = n\n    d = dict()\n    i = 2\n    flag = 0\n    s = 0\n    while ceil(sqrt(n)) >= i:\n        if n % i == 0:\n            n = n // i\n            if d.get(i):\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n            if flag == 0:\n                flag = 1\n                s = i\n                break\n        else:\n            i = i + 1\n    d[n] = d[n] + 1 if d.get(n) else 1\n    if not flag:\n        print(n1 + 1)\n    else:\n        print(n1 // 2 * 3) if s == 2 else print(n1 // s * (s + 1))", "for _ in range(int(input())):\n    n = int(input())\n    d = 10 ** 18\n    ans1 = 0\n    s = int(n ** (1 / 2))\n    s += 1\n    for i in range(1, s):\n        if n % i == 0:\n            t = n // i\n            j = t\n            t += 1\n            x = t * i\n            if x % n == 0:\n                continue\n            ans = x * n // i\n            ans = abs(i - ans)\n            if ans < d:\n                ans1 = x\n                d = ans\n            t = n // j\n            t += 1\n            x = t * j\n            if x % n == 0:\n                continue\n            ans = x * n // j\n            ans = abs(j - ans)\n            if ans < d:\n                ans1 = x\n                d = ans\n    print(ans1)", "from math import *\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    n = int(input())\n    n1 = n\n    d = dict()\n    i = 2\n    flag = 0\n    s = 0\n    while ceil(sqrt(n)) >= i:\n        if n % i == 0:\n            n = n // i\n            if d.get(i):\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n            if flag == 0:\n                flag = 1\n                s = i\n                break\n        else:\n            i = i + 1\n    if d.get(n):\n        d[n] = d[n] + 1\n    else:\n        d[n] = 1\n    if flag == 0:\n        print(n1 + 1)\n    elif s == 2:\n        print(n1 // 2 * 3)\n    else:\n        print(n1 // s * (s + 1))", "from math import *\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    n = int(input())\n    n1 = n\n    d = dict()\n    i = 2\n    flag = 0\n    s = 0\n    while ceil(sqrt(n)) >= i:\n        if n % i == 0:\n            n = n // i\n            if d.get(i):\n                d[i] = d[i] + 1\n            else:\n                d[i] = 1\n            if flag == 0:\n                flag = 1\n                s = i\n        else:\n            i = i + 1\n    if d.get(n):\n        d[n] = d[n] + 1\n    else:\n        d[n] = 1\n    if flag == 0:\n        print(n1 + 1)\n    elif s == 2:\n        print(n1 // 2 * 3)\n    else:\n        print(n1 // s * (s + 1))", "from sys import stdin\ninput = stdin.readline\n\ndef prime_factors(x):\n    prime_factors = []\n    i = 2\n    while x > 1:\n        if i ** 2 > x:\n            i = x\n        while x % i == 0:\n            prime_factors.append(i)\n            x //= i\n        i += 1 + (i > 2)\n    return prime_factors\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = min(prime_factors(n))\n    ans = n // m * (m + 1)\n    print(ans)", "import math\nfrom random import randint\n\ndef timeTaken(func):\n    from time import time\n\n    def decorator(*args, **kwargs):\n        start = time()\n        returned = func(*args, **kwargs)\n        end = time()\n        if int(100 * (end - start)) / 100 > 0.01:\n            print('Time taken is: ', int(100 * (end - start)) / 100, 'Sec')\n        return returned\n    return decorator\n\ndef memoize(func):\n    mem = {}\n\n    def memoizer(*args, **kwargs):\n        key = str(args) + str(kwargs)\n        if key not in mem:\n            mem[key] = func(*args, **kwargs)\n        return mem[key]\n    return memoizer\n\ndef counter(lst):\n    q = [0] * max(lst)\n    for i in range(len(lst)):\n        q[lst[i] - 1] = q[lst[i] - 1] + 1\n    return q\n\ndef counter_elements(lst):\n    q = dict()\n    for x in lst:\n        if x not in q:\n            q[x] = 1\n        else:\n            q[x] += 1\n    return q\n\ndef string_counter(lst):\n    q = [0] * 26\n    for i in range(len(lst)):\n        q[ord(lst[i]) - 97] = q[ord(lst[i]) - 97] + 1\n    return q\n\ndef factorial(n, m=1000000007):\n    q = 1\n    for i in range(n):\n        q = q * (i + 1) % m\n    return q\n\ndef factors(n):\n    q = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            q.extend([i, n // i])\n    return q\n\ndef prime_factors(n):\n    q = []\n    while n % 2 == 0:\n        q.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            q.append(i)\n            n = n // i\n    if n > 2:\n        q.append(n)\n    return q\n\ndef power_two(x):\n    return x and (not x & x - 1)\n\ndef ceil(a, b):\n    return -(-a // b)\n    import bisect\n\ndef getPrimes(MAX=10 ** 5):\n    primes = [2]\n    for n in range(3, MAX, 2):\n        sqrt_n = math.sqrt(n)\n        for prime in primes:\n            if prime > sqrt_n:\n                primes.append(n)\n                break\n            if n % prime == 0:\n                break\n    return primes\n\ndef sieve(MAX=10 ** 5 + 1):\n    spf = [i for i in range(MAX)]\n    for i in range(4, MAX, 2):\n        spf[i] = 2\n    for i in range(3, math.ceil(math.sqrt(MAX))):\n        if spf[i] == i:\n            for j in range(i * i, MAX, i):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\nMOD = 10 ** 9 + 7\n\ndef mod_mul(a, b):\n    return a % MOD * (b % MOD) % MOD\n\ndef mod_sum(a, b):\n    return (a + b) % MOD\n\ndef mod_inv(a):\n    return pow(a, MOD - 2, MOD)\nimport io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef Q1(S, A, B, C):\n    p = S * (1 + C / 100)\n    return 'YES' if p >= A and p <= B else 'NO'\n\ndef Q2(N, K):\n\n    def hcf(x, y):\n        return hcf(y, x % y) if y else x\n    return N // hcf(N, K)\nMOD = 998244353\nQ_inv = mod_inv(4)\n\ndef Q3(N):\n    return N * pow(N + 1, 2, MOD) * Q_inv % MOD\n\ndef Q4(N, B):\n    B.sort()\n    count = dict()\n    for b in B:\n        if b not in count:\n            count[b] = 1\n        else:\n            count[b] += 1\n    even = sum((1 for x in count if not count[x] % 2))\n    if N == 1:\n        return [B[0]] if B[0] == B[1] else [-1]\n    else:\n        m = N - 1 if N % 2 else N - 2\n        if (B[m] != B[m + 1] or B[m] != B[m + 2] or count[B[m]] != 3) or B[-1] == B[-2] or even != N - 2:\n            return [-1]\n        else:\n            return [B[2 * i + 1] for i in range(N - 1)] + [B[-1]]\n\ndef Q5(N):\n    mn = min(prime_factors(N))\n    return N * (mn + 1) // mn\nfor _ in range(inp()):\n    outp(Q5(inp()))", "import math\nt = int(input())\nfor tc in range(0, t):\n    n = int(input())\n    flag = False\n    x = math.floor(math.sqrt(n))\n    ans = 0\n    quo = 0\n    if n > 1:\n        for i in range(2, x + 1):\n            if n % i == 0:\n                quo = n / i\n                ans = n + quo\n                flag = True\n                break\n        if flag:\n            print(int(ans))\n        else:\n            print(n + 1)", "def low_mul(n):\n    s = int(n ** 0.5)\n    for i in range(2, s + 1):\n        if n % i == 0:\n            return i\n    return n\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    a = low_mul(n)\n    b = n // a\n    x = (a + 1) * b\n    print(x)", "from math import ceil, gcd, inf, sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    factors = []\n    for i in range(1, ceil(sqrt(n)) + 1):\n        if n % i != 0:\n            continue\n        (a, b) = (i, n // i)\n        factors.append(a)\n        factors.append(b)\n        factors = list(set(factors))\n        factors.sort()\n    print(n + factors[-2])", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        j = 2\n        ok = 0\n        while j * j <= n:\n            if n % j == 0:\n                ok = 1\n                break\n            j += 1\n        b = j\n        if ok == 0:\n            b = 1\n        if b != 1:\n            b = max(j, n // j)\n        gc = b\n        print(n + b)\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = n + 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            ans = n + n // i\n            break\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = n + 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            ans = n + n // i\n            break\n    print(ans)", "def smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = smallestDivisor(n)\n    a = n // k\n    print(a * (k + 1))", "from math import sqrt\n\ndef checkprime(i):\n    prime_flag = 0\n    for j in range(2, int(sqrt(i)) + 1):\n        if i % j == 0:\n            prime_flag = 1\n            break\n    if prime_flag == 0:\n        return True\n    else:\n        return False\nfor i in range(int(input())):\n    n = int(input())\n    if checkprime(n) == True:\n        print(n + 1)\n        continue\n    for j in range(2, n + 1):\n        if checkprime(j) == True:\n            if n % j == 0:\n                print(int(n // j) * (j + 1))\n                break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = n + 1\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            ans = n + n // i\n            break\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(3 * n // 2)\n    else:\n        fc = 0\n        for i in range(3, math.floor(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                fc = n // i\n                count = i\n                break\n        if fc != 0:\n            print(fc * (count + 1))\n        else:\n            print(n + 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    num = 1\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            num = i\n            break\n    if num == 1:\n        print(n + 1)\n    else:\n        print(n // num + n)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n & 1:\n        f = 0\n        for i in range(3, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                f = n // i\n                break\n        if f != 0:\n            print(f * (i + 1))\n        else:\n            print(n + 1)\n    else:\n        print(3 * n // 2)", "import math\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    if n % 2 == 0:\n        print(3 * n // 2)\n    else:\n        big_factor = 0\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                big_factor = n / i\n                break\n        if big_factor != 0:\n            print(int(big_factor * (i + 1)))\n        else:\n            print(n + 1)\n    t -= 1", "import math\n\ndef primeFactors(n):\n    mul = []\n    num = 1\n    mi = n\n    while n % 2 == 0:\n        mul.append(2)\n        num *= 2\n        mi = min(mi, 2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            mul.append(i)\n            num *= i\n            mi = min(mi, i)\n            n = n // i\n    if n > 2:\n        num *= n\n        mul.append(n)\n        mi = min(mi, n)\n    return (mul, num, mi)\nfor tc in range(int(input())):\n    n = int(input())\n    res = primeFactors(n)\n    if len(res[0]) == 1:\n        print(n + 1)\n    else:\n        print(res[1] // res[2] * (res[2] + 1))", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        x = n // 2 * 3\n        print(x)\n    else:\n        ok = False\n        for i in range(3, int(n ** 0.5) + 1):\n            if n % i == 0:\n                ok = True\n                x = n // i * (i + 1)\n                print(x)\n                break\n        if not ok:\n            print(n + 1)", "import math\n\ndef isp(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\nfrom math import sqrt\n\ndef isPr(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    x = isp(n)\n    if isPr(n):\n        print(n + 1)\n    else:\n        print((x + 1) * (n // x))", "import math\n\ndef isp(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\nfrom math import sqrt\n\ndef isPr(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    x = isp(n)\n    if isPr(n):\n        print(n + 1)\n    else:\n        print((x + 1) * (n // x))", "import math\n\ndef isp(n):\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n\nfrom math import sqrt\n\ndef isPr(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    x = isp(n)\n    if isPr(n):\n        print(n + 1)\n    else:\n        print((x + 1) * (n // x))", "import math\n\ndef factor(n):\n    b = []\n    while n % 2 == 0:\n        b.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            b.append(i)\n            n = n // i\n    if n > 2:\n        b.append(n)\n    return b\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    x = factor(n)\n    x[0] = x[0] + 1\n    sum = 1\n    for i in x:\n        sum = sum * i\n    print(sum)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 1\n    if n % 2 == 0:\n        ans = 3 * n // 2\n    else:\n        sf = 0\n        for i in range(3, math.ceil(math.sqrt(n)) + 1):\n            if n % i == 0:\n                sf = n // i\n                break\n        if sf != 0:\n            ans = sf * (i + 1)\n        else:\n            ans = n + 1\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n // 2 * 3)\n    else:\n        fl = 0\n        for j in range(3, int(math.sqrt(n) + 1), 2):\n            if n % j == 0:\n                fl = j\n                break\n        if fl == 0:\n            print(n + 1)\n        else:\n            print(n // fl * (fl + 1))", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        ans = n * 3 // 2\n    else:\n        temp = 0\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                temp = i\n                ans = n * (i + 1) // i\n                break\n        if temp == 0:\n            ans = n + 1\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(3 * n // 2)\n    else:\n        f = 0\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                f = n // i\n                break\n        if f != 0:\n            print(f * (i + 1))\n        else:\n            print(n + 1)", "for _ in range(int(input())):\n    n = int(input())\n    h = 1\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            h = i\n            break\n    if h == 1:\n        ans = n + 1\n    else:\n        ans = n + n // h\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(3 * n // 2)\n    else:\n        fc = 0\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                fc = n // i\n                break\n        if fc != 0:\n            print(fc * (i + 1))\n        else:\n            print(n + 1)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    m = []\n    l = 2\n    a = n\n    while l <= int(math.sqrt(n)) + 1:\n        if n % l == 0:\n            m.append(l)\n            m.append(n // l)\n            break\n        else:\n            l += 1\n    if m == []:\n        m.append(1)\n    m.sort()\n    v = 0\n    o = 1\n    for k in range(len(m) - 1, -1, -1):\n        if k == 0:\n            if m[k] == 1:\n                v = 1\n                print(a + 1)\n            o = o + a\n        else:\n            o = o * m[k]\n    if v == 0:\n        print(o)", "def isprime(num):\n    for n in range(2, int(num ** 1 / 2) + 1):\n        if num % n == 0:\n            return False\n    return True\nimport math\nfor i in range(int(input())):\n    n = int(input())\n    m = []\n    l = 2\n    a = n\n    while l <= int(math.sqrt(n)) + 1:\n        if n % l == 0:\n            m.append(l)\n            m.append(n // l)\n            break\n        else:\n            l += 1\n    if m == []:\n        m.append(1)\n    m.sort()\n    v = 0\n    o = 1\n    for k in range(len(m) - 1, -1, -1):\n        if k == 0:\n            if m[k] == 1:\n                v = 1\n                print(a + 1)\n            o = o + a\n        else:\n            o = o * m[k]\n    if v == 0:\n        print(o)", "try:\n    import math as m\n    for i in range(int(input())):\n        n = int(input())\n        if n % 2 == 0:\n            print(3 * n // 2)\n        else:\n            fc = 0\n            for i in range(3, int(m.sqrt(n)) + 1, 2):\n                if n % i == 0:\n                    fc = n // i\n                    break\n            if fc == 0:\n                print(n + 1)\n            else:\n                print((i + 1) * fc)\nexcept EOFError:\n    pass", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(n + n // 2)\n    else:\n        (i, fc) = (3, 0)\n        while i * i <= n:\n            if n % i == 0:\n                fc = n // i\n                break\n            i += 2\n        if fc == 0:\n            print(n + 1)\n        else:\n            print(fc * (i + 1))", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return (i + 1) * (n // i)\n        i += 1\n    return n + 1\nfor T in range(int(input())):\n    n = int(input())\n    print(answer())", "for i in range(int(input())):\n    n = int(input())\n\n    def firstprime(x):\n        for i in range(3, int(x ** 0.5) + 1, 2):\n            if x % i == 0:\n                return [n // i, i]\n        return [0]\n    if n % 2 == 0:\n        print(int(n * 1.5))\n    else:\n        k = firstprime(n)\n        if k[0] == 0:\n            print(n + 1)\n        else:\n            print((k[1] + 1) * k[0])", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if i == 2:\n                return (i + 1) * (n // i)\n            else:\n                return (i + 1) * (n // i)\n        i += 1\n    return n + 1\nfor T in range(int(input())):\n    n = int(input())\n    print(answer())", "try:\n    import math\n\n    def primeFactors(n):\n        arr = []\n        while n % 2 == 0:\n            arr.append(2)\n            n = n / 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                arr.append(i)\n                n = n / i\n        if n > 2:\n            arr.append(n)\n        return arr\n    for t in range(int(input())):\n        N = int(input())\n        P = primeFactors(N)\n        P.sort()\n        P[0] += 1\n        ans = 1\n        for i in P:\n            ans *= i\n        print(int(ans))\nexcept:\n    pass", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    ans = 1\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            ans = n // i\n            break\n    print(n + ans)\n    t -= 1", "from math import sqrt\n\ndef gcd(p, q):\n    while q != 0:\n        (p, q) = (q, p % q)\n    return p\n\ndef is_coprime(x, y):\n    return gcd(x, y) == 1\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    cFactor = n\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            cFactor = i\n            break\n    nextFactor = cFactor + 1\n    while not is_coprime(nextFactor, cFactor):\n        nextFactor += 1\n    print(int(nextFactor * n / cFactor))", "def isprime(n):\n    if n == 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(n ** 0.5) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\n\ndef solve(n):\n    if isprime(n):\n        print(n + 1)\n    else:\n        ans = 0\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                ans = i\n                ans = n + int(n // ans)\n                break\n        print(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    solve(n)", "import math\nlcm = lambda x, y: x * y // math.gcd(x, y)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = 1\n    curmin = 10 ** 20\n    o = (n, n + 1)\n    while p * p <= n:\n        if n % p == 0:\n            f1 = abs(lcm(n, n + p) - math.gcd(n, n + p))\n            f2 = f1 + 1\n            if n + n // p != 2 * n:\n                f2 = abs(lcm(n, n + n // p) - math.gcd(n, n + n // p))\n            cpl = (n, n + p)\n            if f2 <= f1:\n                cpl = (n, n + n // p)\n            flag = min(f1, f2)\n            if flag <= curmin:\n                o = cpl\n                curmin = min(curmin, flag)\n        p += 1\n    print(o[1])", "import math\ntry:\n    for _ in range(int(input())):\n        n = int(input())\n        c = math.sqrt(n)\n        z = 0\n        i = 2\n        while i <= c:\n            if n % i == 0:\n                z = i\n                break\n            else:\n                i = i + 1\n        if z == 0:\n            print(n + 1)\n        else:\n            d = (z + 1) * (n // z)\n            print(d)\nexcept:\n    pass", "import math\ncompute_lcm = lambda x, y: x * y // math.gcd(x, y)\ntest = int(input())\nfor t_itr in range(test):\n    num = int(input())\n    p = 1\n    current_min = 10 ** 20\n    out = (num, num + 1)\n    while p * p <= num:\n        if num % p == 0:\n            flag1 = abs(compute_lcm(num, num + p) - math.gcd(num, num + p))\n            flag2 = flag1 + 1\n            if num + num // p != 2 * num:\n                flag2 = abs(compute_lcm(num, num + num // p) - math.gcd(num, num + num // p))\n            cpl = (num, num + p)\n            if flag2 <= flag1:\n                cpl = (num, num + num // p)\n            flag = min(flag1, flag2)\n            if flag <= current_min:\n                out = cpl\n                current_min = min(current_min, flag)\n        p = p + 1\n    print(out[1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    num = 1\n    for i in range(2, int(n ** (1 / 2)) + 1):\n        if n % i == 0:\n            num = i\n            break\n    if num == 1:\n        print(n + 1)\n    else:\n        print(n // num + n)", "import sys\ninput = sys.stdin.readline\nfrom math import ceil, floor, sqrt, gcd, log, modf\nri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip('\\r\\n')\n\ndef solve():\n    n = ri()\n    ans = float('inf')\n    x = None\n    for i in range(int(sqrt(n)), 0, -1):\n        if n % i:\n            continue\n        g = gcd(n, n + i)\n        l = (n + i) * n // g\n        if abs(g - l) < ans:\n            x = n + i\n            ans = abs(g - l)\n        d = n // i\n        if d == n:\n            continue\n        g = gcd(n + d, n)\n        l = (n + d) * n // g\n        if abs(g - l) < ans:\n            x = n + d\n            ans = abs(g - l)\n    return x\nfor _ in range(ri()):\n    print(solve())", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    d = 1\n    if n % 2 == 0:\n        d = n // 2\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                k = n // i\n                c = max(i, k)\n                d = max(d, c)\n    if d == 1:\n        print(n + 1)\n    else:\n        print(n + d)", "import math\n\ndef primeFactors(n):\n    lst = []\n    while n % 2 == 0:\n        lst.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            lst.append(int(i))\n            n = n / i\n    if n > 2:\n        lst.append(int(n))\n    return lst\nfor _ in range(int(input())):\n    n = int(input())\n    ans = primeFactors(n)\n    if len(ans) == 1:\n        print(n + 1)\n    else:\n        ans[0] += 1\n        res = 1\n        for i in ans:\n            res *= i\n        print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(n + n // 2)\n        continue\n    f = True\n    for i in range(3, int(math.sqrt(n)) + 2):\n        if n % i == 0:\n            print(n + n // i)\n            f = False\n            break\n    if f:\n        print(n + 1)", "import math\n\ndef solve(n):\n    ans = 1000000000000000000000\n    g = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            p = n / i\n            num = p * (n + i) - i\n            if num <= ans:\n                ans = num\n                g = i\n            if p != n:\n                num = i * (n + p) - p\n                if num <= ans:\n                    ans = num\n                    g = p\n    return g\nt = int(input())\nfor j in range(0, t):\n    n = int(input())\n    r = int(solve(n))\n    print(n + r)", "import sys\ninput = sys.stdin.readline\nfrom math import ceil, floor, sqrt, gcd, log, modf\nri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip('\\r\\n')\n\ndef solve1():\n    n = ri()\n    ans = float('inf')\n    x = None\n    for i in range(int(sqrt(n)), 0, -1):\n        if n % i:\n            continue\n        g = gcd(n, n + i)\n        l = (n + i) * n // g\n        if abs(g - l) < ans:\n            x = n + i\n            ans = abs(g - l)\n        d = n // i\n        if d == n:\n            continue\n        g = gcd(n + d, n)\n        l = (n + d) * n // g\n        if abs(g - l) < ans:\n            x = n + d\n            ans = abs(g - l)\n    return x\n\ndef solve():\n    n = ri()\n    x = None\n    ans = float('inf')\n    for i in range(n + 1, n + n):\n        g = gcd(n, i)\n        l = i * n // g\n        if abs(g - l) < ans:\n            x = i\n            ans = abs(g - l)\n    print(solve1(n))\n    return x\nfor _ in range(ri()):\n    print(solve1())", "def smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    x = smallestDivisor(n)\n    y = n // x\n    z = y * (x + 1)\n    print(z)\n    t = t - 1", "import math\n\ndef allDivisors(n):\n    divisors = list()\n    for i in range(2, round(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if n // i != i:\n                divisors.append(n // i)\n    return divisors\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    ans = 10000000000000000\n    res = 10000000000000000\n    divisors = allDivisors(N)\n    for divisor in divisors:\n        X = (N // divisor + 1) * divisor\n        gcd = math.gcd(N, X)\n        lcm = N * X / gcd\n        if abs(gcd - lcm) < res:\n            res = abs(gcd - lcm)\n            ans = X\n    if ans == 10000000000000000:\n        ans = N + 1\n    print(ans)", "import math\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    ans = n + n // smallestDivisor(n)\n    print(ans)", "import math\ncompute_lcm = lambda x, y: x * y // math.gcd(x, y)\nt = int(input())\nfor t_itr in range(t):\n    n = int(input())\n    p = 1\n    current_min = 10 ** 20\n    out = (n, n + 1)\n    while p * p <= n:\n        if n % p == 0:\n            flag1 = abs(compute_lcm(n, n + p) - math.gcd(n, n + p))\n            flag2 = flag1 + 1\n            if n + n // p != 2 * n:\n                flag2 = abs(compute_lcm(n, n + n // p) - math.gcd(n, n + n // p))\n            cpl = (n, n + p)\n            if flag2 <= flag1:\n                cpl = (n, n + n // p)\n            flag = min(flag1, flag2)\n            if flag <= current_min:\n                out = cpl\n                current_min = min(current_min, flag)\n        p += 1\n    print(out[1])", "import math\ncompute_lcm = lambda num1, num2: num1 * num2 // math.gcd(num1, num2)\nt = int(input())\nfor iteration in range(t):\n    num = int(input())\n    prime = 1\n    minatThisIteration = 10 ** 20\n    res = (num, num + 1)\n    while prime * prime <= num:\n        if num % prime == 0:\n            check1 = abs(compute_lcm(num, num + prime) - math.gcd(num, num + prime))\n            check2 = check1 + 1\n            if num + num // prime != 2 * num:\n                check2 = abs(compute_lcm(num, num + num // prime) - math.gcd(num, num + num // prime))\n            cpl = (num, num + prime)\n            if check2 <= check1:\n                cpl = (num, num + num // prime)\n            check = min(check1, check2)\n            if check <= minatThisIteration:\n                res = cpl\n                minatThisIteration = min(minatThisIteration, check)\n        prime += 1\n    print(res[1])", "import math\ncompute_lcm = lambda x, y: x * y // math.gcd(x, y)\nt = int(input())\nfor t_itr in range(t):\n    n = int(input())\n    p = 1\n    current_min = 10 ** 20\n    out = (n, n + 1)\n    while p * p <= n:\n        if n % p == 0:\n            flag1 = abs(compute_lcm(n, n + p) - math.gcd(n, n + p))\n            flag2 = flag1 + 1\n            if n + n // p != 2 * n:\n                flag2 = abs(compute_lcm(n, n + n // p) - math.gcd(n, n + n // p))\n            cpl = (n, n + p)\n            if flag2 <= flag1:\n                cpl = (n, n + n // p)\n            flag = min(flag1, flag2)\n            if flag <= current_min:\n                out = cpl\n                current_min = min(current_min, flag)\n        p += 1\n    print(out[1])", "from sys import stdin as sin\n\ndef aint():\n    return int(input())\n\ndef amap():\n    return map(int, sin.readline().split())\n\ndef alist():\n    return list(map(int, sin.readline().split()))\n\ndef astr():\n    return input()\nfor _ in range(aint()):\n    n = aint()\n    f = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                pass\n            else:\n                f.append(n // i)\n            f.append(i)\n    f.sort()\n    g = n // f[1]\n    ans = g * (f[1] + 1)\n    print(ans)", "import math\n\ndef dd(n):\n    ans = 1\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            ans = max(ans, i, n // i)\n        i = i + 1\n    return ans\nfor _ in range(int(input())):\n    x = int(input())\n    print(x + dd(x))", "import math\n\ndef dd(n):\n    ans = 1\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            ans = max(ans, i, n // i)\n        i = i + 1\n    return ans\nfor _ in range(int(input())):\n    x = int(input())\n    print(x + dd(x))", "import math\ncompute_lcm = lambda x, y: x * y // math.gcd(x, y)\nv = int(input())\nfor v_itr in range(v):\n    c = int(input())\n    p = 1\n    current_min = 10 ** 20\n    out = (c, c + 1)\n    while p * p <= c:\n        if c % p == 0:\n            flag1 = abs(compute_lcm(c, c + p) - math.gcd(c, c + p))\n            flag2 = flag1 + 1\n            if c + c // p != 2 * c:\n                flag2 = abs(compute_lcm(c, c + c // p) - math.gcd(c, c + c // p))\n            cpl = (c, c + p)\n            if flag2 <= flag1:\n                cpl = (c, c + c // p)\n            flag = min(flag1, flag2)\n            if flag <= current_min:\n                out = cpl\n                current_min = min(current_min, flag)\n        p += 1\n    print(out[1])", "import math\n\ndef printDivisors(n):\n    ans = 1\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            ans = max(ans, i, n // i)\n        i = i + 1\n    return ans\nfor _ in range(int(input())):\n    x = int(input())\n    print(x + printDivisors(x))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = 0\n    if n % 2 != 0:\n        ind = 1\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n // i == i and i != n:\n                    ind = max(ind, i)\n                else:\n                    if i != n:\n                        ind = max(ind, i)\n                    if n // i != n:\n                        ind = max(ind, n // i)\n        index = ind\n        x = n + index\n    else:\n        x = x + n // 2\n        x += n\n    print(x)", "from math import sqrt\ntest = int(input())\nwhile test:\n    n = int(input())\n    s = found = 0\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            s = n // i\n            found = 1\n            break\n    if found:\n        print(n + s)\n    else:\n        print(n + 1)\n    test -= 1", "from math import gcd\n\ndef is_prime(n):\n    if n == 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef get_largest_primefactor(n):\n    sm = 2\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            sm = max(sm, i, n // i)\n    return sm\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(3 * n // 2)\n    elif is_prime(n):\n        print(n + 1)\n    else:\n        print(n + get_largest_primefactor(n))", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n >= 1000000:\n        rm = int(math.sqrt(n))\n        for m in range(2, rm + 1):\n            if n % m == 0:\n                break\n        if m == rm:\n            x = n + 1\n        else:\n            x = n + n // m\n        print(x)\n    else:\n        for m in range(2, n):\n            if n % m == 0:\n                break\n        x = n + n // m\n        if m == n:\n            x = n + 1\n        print(x)", "from math import sqrt\n\ndef isPrime(n):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        for j in range(2, int(sqrt(n)) + 1):\n            if n % j == 0:\n                return j\n        return 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = isPrime(n)\n    if s == 1:\n        print(s + n)\n    else:\n        print(n + n // s)", "from math import sqrt\n\ndef primes(n):\n    x = []\n    if n % 2 == 0:\n        x += [2]\n        while n % 2 == 0:\n            n //= 2\n    if n % 3 == 0:\n        x += [3]\n        while n % 3 == 0:\n            n //= 3\n    if n % 5 == 0:\n        x += [5]\n        while n % 5 == 0:\n            n //= 5\n    for i in range(7, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            x += [i]\n            while n % i == 0:\n                n //= i\n        if len(x) >= 2:\n            return x\n    if n > 2:\n        x += [n]\n    return x\nfor _ in range(int(input())):\n    n = int(input())\n    x = primes(n)\n    if len(x) == 1 and x[0] == n:\n        print(n + 1)\n    else:\n        print(n + n // x[0])", "array_of_primes = []\nprime = [True for i in range(10 ** 6 + 1)]\np = 2\nwhile p * p <= 10 ** 6:\n    if prime[p] == True:\n        for i in range(p * p, 10 ** 6 + 1, p):\n            prime[i] = False\n    p += 1\nfor p in range(2, 10 ** 6 + 1):\n    if prime[p]:\n        array_of_primes.append(p)\n\ndef factorizer(n):\n    primes = []\n    indices = []\n    last_index = 0\n    j = 0\n    p = array_of_primes[j]\n    first_index = -1\n    while p <= int(n ** 0.5) + 1:\n        alpha = 0\n        while n % p == 0:\n            alpha += 1\n            n = n // p\n        if alpha != 0:\n            primes.append(p)\n            indices.append(alpha)\n            if first_index == -1:\n                first_index = j\n        j += 1\n        if j != 78498:\n            p = array_of_primes[j]\n        else:\n            break\n    if n != 1:\n        primes.append(n)\n        indices.append(1)\n    return (primes, indices, first_index)\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    (primes, indices, first_index) = factorizer(N)\n    x = N // primes[0]\n    x = x * (primes[0] + 1)\n    print(x)", "import sys\nfrom collections import deque\nimport heapq\nimport bisect\nimport math\nimport copy\nMOD = 1000000007\nNO = lambda : print('NO')\nYES = lambda : print('YES')\n_1 = lambda : print(-1)\nari = lambda : [int(_) for _ in input().split()]\ncin = lambda : int(input())\ncis = lambda : input()\nshow = lambda x: print(x)\nfast = lambda : sys.stdin.readline()\ntest_case = 1\ntest_case = int(input())\nsys.setrecursionlimit(10 ** 6)\n\ndef ans():\n    n = cin()\n    mini = float('inf')\n    ans = -1\n    x = 0\n    if n % 2 != 0:\n        x = n + 1\n        docheck = abs(x * n) - 1\n        ind = 1\n        for i in range(1, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                if n // i == i and i != n:\n                    ind = max(ind, i)\n                else:\n                    if i != n:\n                        ind = max(ind, i)\n                    if n // i != n:\n                        ind = max(ind, n // i)\n        lowball = ind\n        low = math.gcd(n, n + lowball)\n        lcm = n * (n + lowball) // low\n        check = abs(lcm - low)\n        if docheck > check:\n            x = n + lowball\n    else:\n        x = x + n // 2\n        x += n\n    print(x)\n    return\nfor _ in range(test_case):\n    ans()", "import math\nLCM = lambda x, y: x * y // math.gcd(x, y)\nfor _ in range(int(input())):\n    n1 = int(input())\n    p1 = 1\n    curr = 10 ** 20\n    output = (n1, n1 + 1)\n    while p1 * p1 <= n1:\n        if n1 % p1 == 0:\n            f1 = abs(LCM(n1, n1 + p1) - math.gcd(n1, n1 + p1))\n            f2 = f1 + 1\n            if n1 + n1 // p1 != 2 * n1:\n                f2 = abs(LCM(n1, n1 + n1 // p1) - math.gcd(n1, n1 + n1 // p1))\n            cpl = (n1, n1 + p1)\n            if f2 <= f1:\n                cpl = (n1, n1 + n1 // p1)\n            flag = min(f1, f2)\n            if flag <= curr:\n                output = cpl\n                curr = min(curr, flag)\n        p1 += 1\n    print(output[1])", "import math\ncompute_lcm = lambda x, y: x * y // math.gcd(x, y)\nt = int(input())\nfor t_itr in range(t):\n    n = int(input())\n    p = 1\n    cur_min = 10 ** 20\n    res = (n, n + 1)\n    while p * p <= n:\n        if n % p == 0:\n            fg1 = abs(compute_lcm(n, n + p) - math.gcd(n, n + p))\n            fg2 = fg1 + 1\n            if n + n // p != 2 * n:\n                fg2 = abs(compute_lcm(n, n + n // p) - math.gcd(n, n + n // p))\n            cpl = (n, n + p)\n            if fg2 <= fg1:\n                cpl = (n, n + n // p)\n            flag = min(fg1, fg2)\n            if flag <= cur_min:\n                res = cpl\n                cur_min = min(cur_min, flag)\n        p += 1\n    print(res[1])", "import math\n\ndef primeFactors(n):\n    lst = []\n    while n % 2 == 0:\n        lst.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            lst.append(int(i))\n            n = n / i\n    if n > 2:\n        lst.append(int(n))\n    return lst\nfor _ in range(int(input())):\n    n = int(input())\n    ans = primeFactors(n)\n    if len(ans) == 1:\n        print(n + 1)\n    else:\n        ans[0] += 1\n        res = 1\n        for i in ans:\n            res *= i\n        print(res)", "t = int(input())\nmaxn = -1\nips = []\nfor tt in range(t):\n    N = int(input())\n    ips.append(N)\n    if N > maxn:\n        maxn = N\nnn = min(maxn, 1000000)\nprime = [True] * (nn + 1)\np = 2\nwhile p * p <= nn:\n    if prime[p] == True:\n        i = p * 2\n        while i <= nn:\n            prime[i] = False\n            i += p\n    p += 1\nfor ip in ips:\n    if ip < nn and prime[ip]:\n        print(ip + 1)\n    else:\n        flag = 1\n        for p in range(2, min(ip // 2 + 1, nn + 1)):\n            if prime[p]:\n                if ip % p == 0:\n                    print(ip + ip // p)\n                    flag = 0\n                    break\n        if flag:\n            if flag:\n                print(ip + 1)", "import math\ncompute_lcm = lambda x1, y1: x1 * y1 // math.gcd(x1, y1)\nt = int(input())\nfor t_itr in range(t):\n    n1 = int(input())\n    p1 = 1\n    current_min = 10 ** 20\n    out = (n1, n1 + 1)\n    while p1 * p1 <= n1:\n        if n1 % p1 == 0:\n            flag1 = abs(compute_lcm(n1, n1 + p1) - math.gcd(n1, n1 + p1))\n            flag2 = flag1 + 1\n            if n1 + n1 // p1 != 2 * n1:\n                flag2 = abs(compute_lcm(n1, n1 + n1 // p1) - math.gcd(n1, n1 + n1 // p1))\n            cpl = (n1, n1 + p1)\n            if flag2 <= flag1:\n                cpl = (n1, n1 + n1 // p1)\n            flag = min(flag1, flag2)\n            if flag <= current_min:\n                out = cpl\n                current_min = min(current_min, flag)\n        p1 += 1\n    print(out[1])", "def isPrime(n):\n    if n == 1:\n        return 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return 0\n        i += 1\n    return 1\nfor i in range(int(input())):\n    n = int(input())\n    if isPrime(n):\n        print(n + 1)\n        continue\n    j = 2\n    while j * j <= n:\n        if n % j == 0:\n            print(n // j + n)\n            break\n        j += 1", "import math\nt = int(input())\nfor j in range(0, t):\n    n = int(input())\n    prime_flag = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            prime_flag = 1\n            m = i\n            break\n    if prime_flag == 0:\n        q = math.gcd(n, n + 1)\n        print(n + 1)\n    else:\n        w = n // m * (m + 1)\n        print(w)"]