["import itertools\nimport math\n\ndef factorize(n):\n\n    def try_divisor(n, k, pfs):\n        if n % k == 0:\n            pfs[k] = 1\n            n //= k\n            while n % k == 0:\n                pfs[k] += 1\n                n //= k\n        return n\n    pfs = {}\n    n = try_divisor(n, 2, pfs)\n    n = try_divisor(n, 3, pfs)\n    for i in itertools.count(start=1):\n        n = try_divisor(n, 6 * i - 1, pfs)\n        n = try_divisor(n, 6 * i + 1, pfs)\n        if (6 * i + 1) ** 2 > n:\n            break\n    if n > 1:\n        pfs[n] = 1\n    return pfs\n\ndef recurse(lpfs, i, aa, bb):\n    if i == len(lpfs):\n        a = math.isqrt(aa - 1)\n        b = math.isqrt(bb - 1)\n        if a > 0 and b > 0 and (a * a + 1 == aa) and (b * b + 1 == bb) and (math.gcd(a, b) == 1):\n            return 1\n        else:\n            return 0\n    (p, e) = lpfs[i]\n    if p == 2:\n        if e % 2 == 1:\n            return recurse(lpfs, i + 1, 2 * aa, bb) + recurse(lpfs, i + 1, aa, 2 * bb)\n        else:\n            return recurse(lpfs, i + 1, aa, bb) + recurse(lpfs, i + 1, 2 * aa, 2 * bb)\n    else:\n        return sum((recurse(lpfs, i + 1, aa * p ** j, bb * p ** k) for j in range(e + 1) for k in range(e - j + 1) if (e - j - k) % 2 == 0))\nfor _ in range(int(input())):\n    pfs = factorize(int(input()))\n    ok = True\n    lpfs = []\n    while pfs:\n        (p, e) = pfs.popitem()\n        if p % 4 == 3:\n            if e % 2 == 1:\n                ok = False\n                break\n        else:\n            lpfs.append((p, e))\n    print(recurse(lpfs, 0, 1, 1) if ok else 0)", "import itertools\nimport math\n\ndef factorize(n):\n\n    def try_divisor(n, k, pfs):\n        if n % k == 0:\n            pfs[k] = 1\n            n //= k\n            while n % k == 0:\n                pfs[k] += 1\n                n //= k\n        return n\n    pfs = {}\n    n = try_divisor(n, 2, pfs)\n    n = try_divisor(n, 3, pfs)\n    for i in itertools.count(start=1):\n        n = try_divisor(n, 6 * i - 1, pfs)\n        n = try_divisor(n, 6 * i + 1, pfs)\n        if (6 * i + 1) ** 2 > n:\n            break\n    if n > 1:\n        pfs[n] = 1\n    return pfs\n\ndef recurse(lpfs, i, aa, bb):\n    if i == len(lpfs):\n        a = math.isqrt(aa - 1)\n        b = math.isqrt(bb - 1)\n        if a > 0 and b > 0 and (a * a + 1 == aa) and (b * b + 1 == bb) and (math.gcd(a, b) == 1):\n            return 1\n        else:\n            return 0\n    (p, e) = lpfs[i]\n    if p == 2:\n        if e % 2 == 1:\n            return recurse(lpfs, i + 1, 2 * aa, bb) + recurse(lpfs, i + 1, aa, 2 * bb)\n        else:\n            return recurse(lpfs, i + 1, aa, bb) + recurse(lpfs, i + 1, 2 * aa, 2 * bb)\n    else:\n        return sum((recurse(lpfs, i + 1, aa * p ** j, bb * p ** k) for j in range(e + 1) for k in range(e - j + 1) if (e - j - k) % 2 == 0))\nfor _ in range(int(input())):\n    pfs = factorize(int(input()))\n    ok = True\n    lpfs = []\n    while pfs:\n        (p, e) = pfs.popitem()\n        if p % 4 == 3:\n            if e % 2 == 1:\n                ok = False\n                break\n        else:\n            lpfs.append((p, e))\n    print(recurse(lpfs, 0, 1, 1) if ok else 0)", "import math\n\ndef gcd(a, b):\n    while b != 0:\n        temp = b\n        b = a % b\n        a = temp\n    return a\n\ndef solve():\n    n = int(input())\n    if n % 2 != 0:\n        return 0\n    x = math.floor(math.sqrt(n))\n    ans = 0\n    for i in range(1, x + 1):\n        for j in range(i, x + 1, i):\n            a_sq = i * i\n            lcm_sq = j * j\n            num = lcm_sq * (n - a_sq - lcm_sq)\n            if num <= 0:\n                continue\n            denom = lcm_sq + a_sq\n            if num % denom != 0:\n                continue\n            b_sq = num // denom\n            b = math.floor(math.sqrt(b_sq))\n            if b * b != b_sq:\n                continue\n            if a_sq + b_sq >= n:\n                continue\n            g = gcd(i, b)\n            gcd_sq = g * g\n            if a_sq + b_sq + lcm_sq + gcd_sq == n:\n                ans += 1\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import sys\nimport os\nimport math\nimport collections\ninput = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    ans = []\n    i = 1\n    while i * i < N:\n        if N % (i * i) == 0:\n            A = N / (i * i)\n            j = 1\n            while (1 + j * j) * (1 + j * j) <= A:\n                if A % (1 + j * j) == 0:\n                    B = int(A / (1 + j * j))\n                    sqrt = math.sqrt(B - 1)\n                    if sqrt == int(sqrt):\n                        C = j * i\n                        D = int(sqrt * i)\n                        if math.gcd(j, int(sqrt)) == 1:\n                            ans.append((C, D))\n                            ans.append((D, C))\n                j += 1\n        i += 1\n    print(len(set(ans)))", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    ans = []\n    i = 1\n    while i * i < N:\n        if N % (i * i) == 0:\n            A = N / (i * i)\n            j = 1\n            while (1 + j * j) * (1 + j * j) <= A:\n                if A % (1 + j * j) == 0:\n                    B = int(A / (1 + j * j))\n                    sqrt = math.sqrt(B - 1)\n                    if sqrt == int(sqrt):\n                        C = j * i\n                        D = int(sqrt * i)\n                        if math.gcd(j, int(sqrt)) == 1:\n                            ans.append((C, D))\n                            ans.append((D, C))\n                j += 1\n        i += 1\n    print(len(set(ans)))", "import math as m\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return abs(a)\n\ndef ncr(N, R):\n    return m.factorial(N) // (m.factorial(R) * m.factorial(N - R))\n\ndef getL():\n    return [int(i) for i in input().split(' ')]\n\ndef getInt():\n    return int(input())\n\ndef sPair(b):\n    if int(b ** 0.5) == b ** 0.5:\n        return True\n    return False\n\ndef solve():\n    n = getInt()\n    if n % 2 == 1:\n        print(0)\n        return\n    skrPair = set()\n    for a in range(0, int((n // 2) ** 0.5) + 1):\n        b = n - a * a\n        if sPair(b):\n            skrPair.add((a, int(b ** 0.5)))\n    cnt = 0\n    for each in skrPair:\n        ab = each[0]\n        gl = each[1]\n        for a in range(1, int((n / 2) ** 0.5) + 1):\n            b = a - ab\n            if b > 0 and b < int((n / 2) ** 0.5) + 1:\n                gc = gcd(a, b)\n                lc = a * b / gc\n                if gc + lc == gl:\n                    if a != b:\n                        cnt += 1\n                    cnt += 1\n    print(cnt)\nfor _ in range(getInt()):\n    solve()", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef check(a, b, n):\n    return a ** 2 + b ** 2 + gcd(a, b) ** 2 + LCM(a, b) ** 2 == n\n\ndef count(n, product):\n    c = 0\n    for hcf in product:\n        product = n // (hcf * hcf)\n        for i in range(2, sqrt(product)):\n            if product % i == 0:\n                (d1, d2) = (i, product // i)\n                (a, b) = (math.sqrt(d1 - 1), math.sqrt(d2 - 1))\n                if a == int(a) and b == int(b):\n                    if check(int(a) * hcf, int(b) * hcf, n):\n                        if a == b:\n                            c += 1\n                        else:\n                            c += 2\n    return c\n\ndef solve():\n    n = int(input())\n    product = []\n    i = 1\n    while i * i <= n:\n        if n % (i * i) == 0:\n            product.append(i)\n        i += 1\n    print(count(n, product))\nt = int(input())\nfor tt in range(t):\n    solve()", "from itertools import count\nimport math\nt = int(input())\n\ndef cd(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        k = num - i * i\n        b = int(math.sqrt(k))\n        if b * b == k:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(cd(n))\n    else:\n        print(0)", "import math\n\ndef counte(n):\n    a = []\n    count = 0\n    w = int(math.sqrt(n))\n    for i in range(1, w + 1):\n        bs = n - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(counte(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_p(num):\n    count = 0\n    a = []\n    z = int(math.sqrt(num))\n    for i in range(1, 1 + z):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                k = math.gcd(a, b)\n                l = a * b / k\n                if k + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_p(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef countpr(num):\n    count = 0\n    a = []\n    c = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsq = num - i * i\n        b = int(math.sqrt(bsq))\n        if b * b == bsq:\n            a.append([i, b])\n    b = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(countpr(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef ans(num):\n    cnt = 0\n    a = []\n    br = []\n    cr = []\n    m = int(math.sqrt(num))\n    for i in range(1, m + 1):\n        bs = num - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    for i in a:\n        if i not in br:\n            cr.append(i)\n            br.append([i[1], i[0]])\n    for i in cr:\n        p1 = min(i[0], i[1])\n        q1 = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, q1):\n                a = j\n                b = a + p1\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q1:\n                    cnt += 2\n    return cnt\nfor i in range(t):\n    n = int(input())\n    if n & 1 == 0:\n        x = ans(n)\n        print(x)\n    else:\n        print(0)", "import math\n\ndef cpair(nt):\n    cnt_no = 0\n    a = []\n    w = int(math.sqrt(nt))\n    for i in range(1, w + 1):\n        bsur = nt - i * i\n        b = int(math.sqrt(bsur))\n        if b * b == bsur:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt_no += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    cnt_no += 2\n    return cnt_no\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(cpair(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\n\ndef gcdandlcm(n):\n    ans = 0\n    a = []\n    sq = int(math.sqrt(n))\n    for i in range(1, sq + 1):\n        square = n - i * i\n        f = int(math.sqrt(square))\n        if f * f == square:\n            a.append([i, f])\n    f = []\n    c = []\n    for j in a:\n        if j not in f:\n            c.append(j)\n            f.append([j[1], j[0]])\n    for k in c:\n        p = min(k[0], k[1])\n        q = max(k[0], k[1])\n        if k[0] == 0 or k[1] == 0:\n            ans += 1\n        else:\n            for j in range(1, q):\n                a = j\n                f = a + p\n                g = math.gcd(a, f)\n                l = a * f // g\n                if g + l == q:\n                    ans += 2\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(gcdandlcm(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\n\ndef count_pairs(n):\n    count = 0\n    a = []\n    root = int(math.sqrt(n))\n    for i in range(1, root + 1):\n        bsqr = n - i * i\n        b = int(math.sqrt(bsqr))\n        if b * b == bsqr:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        mn = min(i[0], i[1])\n        mx = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, mx):\n                a = j\n                b = a + mn\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == mx:\n                    count += 2\n    return count\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\n\ndef count_pairs(n):\n    count = 0\n    a = []\n    root = int(math.sqrt(n))\n    for i in range(1, root + 1):\n        bsqr = n - i * i\n        b = int(math.sqrt(bsqr))\n        if b * b == bsqr:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        mn = min(i[0], i[1])\n        mx = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, mx):\n                a = j\n                b = a + mn\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == mx:\n                    count += 2\n    return count\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "from math import ceil, gcd, sqrt, floor\nfor _ in range(int(input())):\n    n = int(input())\n    count = 0\n    i = 1\n    while i * i <= n + 1:\n        if n % (i * i) == 0:\n            ab = n // (i * i)\n            for j in range(1, int(ab ** 0.5) + 1):\n                if ab % (j * j + 1) == 0:\n                    d = ab // (j * j + 1)\n                    d -= 1\n                    if ceil(sqrt(d)) == floor(sqrt(d)):\n                        if d != 0 and gcd(j, d) == 1:\n                            count += 1\n        i += 1\n    print(count)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print('0')", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print('0')", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "from sys import stdin\nfrom math import sqrt, ceil, floor, gcd\ninput = stdin.readline\n\ndef checkperfectsquare(x):\n    if ceil(sqrt(x)) == floor(sqrt(x)):\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    for i in range(1, int(sqrt(n)) + 1):\n        if n % (i * i) == 0:\n            p = n // (i * i)\n            for j in range(1, int(sqrt(p)) + 1):\n                if p % (j * j + 1) == 0:\n                    c = j * j + 1\n                    d = p // c\n                    d -= 1\n                    if checkperfectsquare(d):\n                        if d != 0 and gcd(j, d) == 1:\n                            ans += 1\n    print(ans)", "import math\nt = int(input())\n\ndef fun(n):\n    flag = 0\n    arrr = []\n    win = int(math.sqrt(n))\n    for i in range(1, win + 1):\n        sq = n - i * i\n        bc = int(math.sqrt(sq))\n        if bc * bc == sq:\n            arrr.append([i, bc])\n    br = []\n    cr = []\n    for i in arrr:\n        if i not in br:\n            cr.append(i)\n            br.append([i[1], i[0]])\n    for i in cr:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            flag += 1\n        else:\n            for j in range(1, q):\n                e = j\n                r = e + p\n                g = math.gcd(e, r)\n                l = e * r // g\n                if g + l == q:\n                    flag += 2\n    return flag\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(fun(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\npareekshan_ka_maamala = int(input())\n\ndef joda_ginna(ank):\n    mfk = 0\n    cmp = 0\n    ginna = 0\n    a = []\n    x = int(math.sqrt(ank))\n    for loop in range(1, x + 1):\n        chaukorb = ank - loop * loop\n        q = int(math.sqrt(chaukorb))\n        if q * q == chaukorb:\n            a.append([loop, q])\n    b = []\n    cmp += 1\n    y = []\n    for loop in a:\n        if loop not in b:\n            y.append(loop)\n            b.append([loop[1], loop[mfk]])\n    for loop in y:\n        p = min(loop[mfk], loop[1])\n        s = max(loop[mfk], loop[1])\n        if loop[mfk] == mfk or loop[mfk + 1] == mfk:\n            ginna = ginna + 1\n        else:\n            for loop2 in range(1, s):\n                a = loop2\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == s:\n                    ginna = ginna + 2\n    return mfk + ginna\nfor loop in range(pareekshan_ka_maamala):\n    inp = int(input())\n    if inp % 2 != 0:\n        print(0)\n    else:\n        print(joda_ginna(inp))", "import math\ntest = int(input())\n\ndef ans(n):\n    cnt = 0\n    first_array = []\n    second_array = []\n    third_array = []\n    pr = int(math.sqrt(n))\n    for i in range(1, pr + 1):\n        rem = n - i * i\n        tr = int(math.sqrt(rem))\n        if tr * tr == rem:\n            first_array.append([i, tr])\n    for i in first_array:\n        if i in second_array:\n            continue\n        else:\n            third_array.append(i)\n            second_array.append([i[1], i[0]])\n    for i in third_array:\n        _min = min(i[0], i[1])\n        _max = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, _max):\n                _1 = j\n                _2 = _1 + _min\n                gd = math.gcd(_1, _2)\n                lm = _1 * _2 // gd\n                if gd + lm == _max:\n                    cnt += 2\n    return cnt\nfor i in range(test):\n    n = int(input())\n    if n % 2 == 1:\n        print(0)\n    else:\n        print(ans(n))", "import math\nt = int(input())\n\ndef c_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(c_pairs(n))\n    else:\n        print(0)", "import math\nx = int(input())\n\ndef pairs(n):\n    count = 0\n    a = []\n    s = int(math.sqrt(n))\n    for i in range(1, s + 1):\n        b2 = n - i * i\n        b = int(math.sqrt(b2))\n        if b * b == b2:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                gc = math.gcd(a, b)\n                lc = a * b // gc\n                if gc + lc == q:\n                    count += 2\n    return count\nfor i in range(x):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        print(pairs(n))", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\n\nclass Graph:\n\n    def __init__(self, vertices):\n        self.V = vertices\n        self.graph = []\n\n    def addEdge(self, u, v, w):\n        self.graph.append([u, v, w])\n\n    def printArr(self, dist):\n        print('Vertex Distance from Source')\n        for i in range(self.V):\n            print('{0}\\t\\t{1}'.format(i, dist[i]))\n\n    def BellmanFord(self, src):\n        dist = [float('Inf')] * self.V\n        dist[src] = 0\n        for _ in range(self.V - 1):\n            for (u, v, w) in self.graph:\n                if dist[u] != float('Inf') and dist[u] + w < dist[v]:\n                    dist[v] = dist[u] + w\n        for (u, v, w) in self.graph:\n            if dist[u] != float('Inf') and dist[u] + w < dist[v]:\n                print('Graph contains negative weight cycle')\n                return\n        self.printArr(dist)\n\ndef ct_pairs(num):\n    count = 0\n    a = []\n    wrea = int(math.sqrt(num))\n    a1 = 38237\n    a4 = 15626\n    a3 = a1 - a4\n    if a3 > a1:\n        a4 += 2\n    for i in range(1, wrea + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    a11 = 38237\n    a41 = 15626\n    a31 = a11 - a41\n    if a31 > a11:\n        a41 += 2\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    a1 = 3837\n    a4 = 1626\n    a3 = a1 - a4\n    if a3 > a1:\n        a4 += 2\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    a1 = 382\n    a4 = 156\n    a3 = a1 - a4\n    if a3 > a1:\n        a4 += 2\n    return count\nfor i in range(int(input())):\n    nat = int(input())\n    a13 = 38237\n    a44 = 15626\n    a55 = 2637\n    a13 = a13 - a44\n    if a13 > 1:\n        a44 += 2\n    if nat % 2 == 0:\n        print(ct_pairs(nat))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef cn_p(nu):\n    co = 0\n    a = []\n    w = int(math.sqrt(nu))\n    for i in range(1, w + 1):\n        bsq = nu - i * i\n        b = int(math.sqrt(bsq))\n        if b * b == bsq:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        pi = min(i[0], i[1])\n        qi = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            co += 1\n        else:\n            for j in range(1, qi):\n                a = j\n                b = a + pi\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == qi:\n                    co += 2\n    return co\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(cn_p(n))\n    else:\n        print(0)", "import math\ntest = int(input())\n\ndef pair(n):\n    c = 0\n    li = []\n    num = int(math.sqrt(n))\n    for i in range(1, num + 1):\n        b = n - i * i\n        g = int(math.sqrt(b))\n        if g * g == b:\n            li.append([i, g])\n    res = []\n    ans = []\n    for i in li:\n        if i not in res:\n            ans.append(i)\n            res.append([i[1], i[0]])\n    for i in ans:\n        x = max(i[0], i[1])\n        y = min(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            c = c + 1\n        else:\n            for k in range(1, x):\n                li = k\n                g = li + y\n                gc = math.gcd(li, g)\n                lc = li * g // gc\n                if gc + lc == x:\n                    c += 2\n    return c\nwhile test > 0:\n    n = int(input())\n    if n % 2 == 0:\n        print(pair(n))\n    else:\n        print(0)\n    test = test - 1", "import math\nT = int(input())\n\ndef pairs(n):\n    c = 0\n    l = []\n    d = int(math.sqrt(n))\n    for i in range(1, d + 1):\n        bs = n - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            l.append([i, b])\n    m = []\n    o = []\n    for i in l:\n        if i not in m:\n            m.append([i[1], i[0]])\n            o.append(i)\n    for i in o:\n        s = max(i[0], i[1])\n        r = min(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            c += 1\n        else:\n            for j in range(1, s):\n                y = j\n                z = y + r\n                g = math.gcd(y, z)\n                l = y * z // g\n                if g + l == s:\n                    c += 2\n    return c\nfor i in range(T):\n    N = int(input())\n    if N % 2 == 0:\n        print(pairs(N))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef cp(n):\n    if n % 2 == 1:\n        return 0\n    else:\n        c = 0\n        a = []\n        m = int(math.sqrt(n))\n        for i in range(1, m + 1):\n            x = n - i * i\n            y = int(math.sqrt(x))\n            if y * y == x:\n                a.append([i, y])\n        b = []\n        d = []\n        for j in a:\n            if j not in b:\n                d.append(j)\n                b.append([j[1], j[0]])\n        for j in d:\n            u = min(j[0], j[1])\n            v = max(j[0], j[1])\n            if j[0] == 0 or j[1] == 0:\n                c += 1\n            else:\n                for k in range(1, v):\n                    a = k\n                    b = a + u\n                    g = math.gcd(a, b)\n                    h = a * b // g\n                    if g + h == v:\n                        c += 2\n    return c\nfor _ in range(t):\n    n = int(input())\n    print(cp(n))", "import math\nt = int(input())\n\ndef cp(n):\n    if n % 2 == 1:\n        return 0\n    else:\n        c = 0\n        a = []\n        m = int(math.sqrt(n))\n        for i in range(1, m + 1):\n            x = n - i * i\n            y = int(math.sqrt(x))\n            if y * y == x:\n                a.append([i, y])\n        b = []\n        d = []\n        for j in a:\n            if j not in b:\n                d.append(j)\n                b.append([j[1], j[0]])\n        for j in d:\n            u = min(j[0], j[1])\n            v = max(j[0], j[1])\n            if j[0] == 0 or j[1] == 0:\n                c += 1\n            else:\n                for k in range(1, v):\n                    a = k\n                    b = a + u\n                    g = math.gcd(a, b)\n                    h = a * b // g\n                    if g + h == v:\n                        c += 2\n    return c\nfor _ in range(t):\n    n = int(input())\n    print(cp(n))", "import math\nt = int(input())\n\ndef count_output(num):\n    __count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        b_square = num - i * i\n        b = int(math.sqrt(b_square))\n        if b * b == b_square:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            __count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    __count += 2\n    return __count\nfor i in range(t):\n    number = int(input())\n    if number % 2 == 0:\n        print(count_output(number))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef gulambi(N):\n    fck = 0\n    ar1 = []\n    w = int(math.sqrt(N))\n    for i in range(1, w + 1):\n        sq = N - i * i\n        b = int(math.sqrt(sq))\n        if b * b == sq:\n            ar1.append([i, b])\n    br = []\n    cr = []\n    for i in ar1:\n        if i not in br:\n            cr.append(i)\n            br.append([i[1], i[0]])\n    for i in cr:\n        chotu = min(i[0], i[1])\n        baddu = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            fck = fck + 1\n        else:\n            for j in range(1, baddu):\n                e = j\n                r = e + chotu\n                gre = math.gcd(e, r)\n                l = e * r // gre\n                if gre + l == baddu:\n                    fck = fck + 2\n    return fck\nfor i in range(t):\n    N = int(input())\n    if N % 2 == 0:\n        print(gulambi(N))\n    else:\n        print(0)", "import math\ntest_case = int(input())\n\ndef Uttar(x):\n    shabdkosh = 0\n    lst = []\n    y = int(math.sqrt(x))\n    for a in range(1, y + 1):\n        z_Square = x - a * a\n        z = int(math.sqrt(z_Square))\n        if z * z == z_Square:\n            lst.append([a, z])\n    z = []\n    b = []\n    for a in lst:\n        if a not in z:\n            b.append(a)\n            z.append([a[1], a[0]])\n    for a in b:\n        x1 = min(a[0], a[1])\n        x2 = max(a[0], a[1])\n        if a[0] == 0 or a[1] == 0:\n            shabdkosh += 1\n        else:\n            for a1 in range(1, x2):\n                lst = a1\n                z = lst + x1\n                y1 = math.gcd(lst, z)\n                y2 = lst * z // y1\n                if y1 + y2 == x2:\n                    shabdkosh += 2\n    return shabdkosh\nfor a in range(test_case):\n    x = int(input())\n    if x % 2 == 0:\n        print(Uttar(x))\n    else:\n        print(0)", "from collections import defaultdict\nimport math\n\ndef solve():\n    t = int(input())\n    while t:\n        t -= 1\n        num = int(input())\n        if num % 2 == 1:\n            print('0')\n        else:\n            count = 0\n            a = []\n            rnum = int(math.sqrt(num))\n            for num1 in range(1, rnum + 1):\n                o_sq = num - num1 * num1\n                num2 = int(math.sqrt(o_sq))\n                if num2 * num2 == o_sq:\n                    a.append([num1, num2])\n            x = []\n            y = []\n            for i in a:\n                if i not in x:\n                    y.append(i)\n                    x.append([i[1], i[0]])\n            for i in y:\n                L = min(i[0], i[1])\n                M = max(i[0], i[1])\n                if i[0] == 0 or i[1] == 0:\n                    count += 1\n                else:\n                    for j in range(1, M):\n                        a = j\n                        b = a + L\n                        g = math.gcd(a, b)\n                        l = a * b // g\n                        if g + l == M:\n                            count += 2\n            print(count)\nsolve()", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bs = num - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\nn = int(input())\n\ndef ans(l):\n    c = 0\n    u = []\n    s = int(math.sqrt(l))\n    for i in range(1, s + 1):\n        secondsquare = l - i * i\n        p = int(math.sqrt(secondsquare))\n        if p * p == secondsquare:\n            u.append([i, p])\n    a = []\n    b = []\n    for i in u:\n        if i not in a:\n            b.append(i)\n            a.append([i[1], i[0]])\n    for i in b:\n        j = min(i[0], i[1])\n        k = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            c += 1\n        else:\n            for o in range(1, k):\n                h = o\n                z = h + j\n                g = math.gcd(h, z)\n                lc = h * z // g\n                if g + lc == k:\n                    c += 2\n    return c\nfor i in range(n):\n    t = int(input())\n    if t % 2 == 0:\n        print(ans(t))\n    else:\n        print(0)", "from collections import defaultdict\nimport math\n\ndef solve():\n\n    def pairs(num):\n        count = 0\n        a = []\n        rnum = int(math.sqrt(num))\n        for num1 in range(1, rnum + 1):\n            o_sq = num - num1 * num1\n            num2 = int(math.sqrt(o_sq))\n            if num2 * num2 == o_sq:\n                a.append([num1, num2])\n        x = []\n        y = []\n        for i in a:\n            if i not in x:\n                y.append(i)\n                x.append([i[1], i[0]])\n        for i in y:\n            L = min(i[0], i[1])\n            M = max(i[0], i[1])\n            if i[0] == 0 or i[1] == 0:\n                count += 1\n            else:\n                for j in range(1, M):\n                    a = j\n                    b = a + L\n                    g = math.gcd(a, b)\n                    l = a * b // g\n                    if g + l == M:\n                        count += 2\n        return count\n    t = int(input())\n    while t:\n        t -= 1\n        num = int(input())\n        if num % 2 == 1:\n            print('0')\n        else:\n            print(pairs(num))\nsolve()", "import math\n\ndef countPairs(n):\n    cout = 0\n    a = []\n    w = int(math.sqrt(n))\n    for i in range(1, w + 1):\n        bSquare = n - i * i\n        b = int(math.sqrt(bSquare))\n        if b * b == bSquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cout += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    cout += 2\n    return cout\nt = int(input(''))\nfor i in range(t):\n    n = int(input(''))\n    if n % 2 == 0:\n        print(countPairs(n))\n    else:\n        print(0)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 1000000007\n\ndef cp(number):\n    count = 0\n    arr = []\n    w = int(math.sqrt(number))\n    for i in range(1, w + 1):\n        bs = number - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            arr.append([i, b])\n    brr = []\n    crr = []\n    for i in arr:\n        if i not in brr:\n            crr.append(i)\n            brr.append([i[1], i[0]])\n    for i in crr:\n        x = min(i[0], i[1])\n        y = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, y):\n                arr = j\n                brr = arr + x\n                gc = math.gcd(arr, brr)\n                lc = arr * brr // gc\n                if gc + lc == y:\n                    count += 2\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(cp(n))\n    else:\n        print(0)", "import math\n\ndef fn1(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bs = num - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(fn1(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef fun(n):\n    counter = 0\n    arr = []\n    wow = int(math.sqrt(n))\n    for i in range(1, wow + 1):\n        sqirt = n - i * i\n        bob = int(math.sqrt(sqirt))\n        if bob * bob == sqirt:\n            arr.append([i, bob])\n    bru = []\n    cru = []\n    for i in arr:\n        if i not in bru:\n            cru.append(i)\n            bru.append([i[1], i[0]])\n    for i in cru:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            counter += 1\n        else:\n            for j in range(1, q):\n                eh = j\n                reh = eh + p\n                guh = math.gcd(eh, reh)\n                l = eh * reh // guh\n                if guh + l == q:\n                    counter += 2\n    return counter\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(fun(n))\n    else:\n        print(0)", "import math\n\ndef copair(num):\n    c = 0\n    a = []\n    m = int(math.sqrt(num))\n    for i in range(1, m + 1):\n        bs = num - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    ba = []\n    ca = []\n    for i in a:\n        if i not in ba:\n            ca.append(i)\n            ba.append([i[1], i[0]])\n    for i in ca:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[1] == 0 or i[0] == 0:\n            c += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    c += 2\n    return c\n\ndef solve():\n    n = int(input())\n    if n % 2 == 0:\n        print(copair(n))\n    else:\n        print(0)\nfor i in range(int(input())):\n    solve()", "import math\nf = int(input())\n\ndef megha_pairs(num):\n    megha = 0\n    a = []\n    p = int(math.sqrt(num))\n    for i in range(1, p + 1):\n        msquare = num - i * i\n        m = int(math.sqrt(msquare))\n        if m * m == msquare:\n            a.append([i, m])\n    m = []\n    c = []\n    for i in a:\n        if i not in m:\n            c.append(i)\n            m.append([i[1], i[0]])\n    for i in c:\n        t = min(i[0], i[1])\n        x = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            megha += 1\n        else:\n            for j in range(1, x):\n                a = j\n                m = a + t\n                g = math.gcd(a, m)\n                l = a * m // g\n                if g + l == x:\n                    megha += 2\n    return megha\nfor i in range(f):\n    ayush = int(input())\n    if ayush % 2 == 0:\n        print(megha_pairs(ayush))\n    else:\n        print(0)", "from math import sqrt, gcd\n\ndef cp(n):\n    (cnt, a, w) = (0, [], int(sqrt(n)))\n    for i in range(1, w + 1):\n        bs = n - i * i\n        b = int(sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    (b, c) = ([], [])\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    cnt += 2\n    return cnt\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(cp(n))\n    else:\n        print(0)", "import math\n\ndef pairsCounter(N):\n    counter = 0\n    a = []\n    v = int(N ** 0.5)\n    for i in range(1, v + 1):\n        sq_b = N - i * i\n        b = int(sq_b ** 0.5)\n        if b * b == sq_b:\n            a.append([i, b])\n    b = list()\n    c = list()\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        m = min(i[0], i[1])\n        n = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            counter = counter + 1\n        else:\n            for j in range(1, n):\n                a = j\n                b = a + m\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == n:\n                    counter = counter + 2\n    return counter\ntestCases = int(input())\nfor k in range(testCases):\n    N = int(input())\n    if N % 2 == 0:\n        print(pairsCounter(N))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef fun(n):\n    flag = 0\n    ar = []\n    w = int(math.sqrt(n))\n    for i in range(1, w + 1):\n        sq = n - i * i\n        b = int(math.sqrt(sq))\n        if b * b == sq:\n            ar.append([i, b])\n    br = []\n    cr = []\n    for i in ar:\n        if i not in br:\n            cr.append(i)\n            br.append([i[1], i[0]])\n    for i in cr:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            flag += 1\n        else:\n            for j in range(1, q):\n                e = j\n                r = e + p\n                g = math.gcd(e, r)\n                l = e * r // g\n                if g + l == q:\n                    flag += 2\n    return flag\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(fun(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef cp(num):\n    ct = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bs = num - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            ct += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    ct += 2\n    return ct\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(cp(n))\n    else:\n        print(0)", "import math\n\ndef pairsCounter(N):\n    counter = 0\n    a = []\n    v = int(N ** 0.5)\n    for i in range(1, v + 1):\n        sq_b = N - i * i\n        b = int(sq_b ** 0.5)\n        if b * b == sq_b:\n            a.append([i, b])\n    b = list()\n    c = list()\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        m = min(i[0], i[1])\n        n = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            counter = counter + 1\n        else:\n            for j in range(1, n):\n                a = j\n                b = a + m\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == n:\n                    counter = counter + 2\n    return counter\ntestCases = int(input())\nfor k in range(testCases):\n    N = int(input())\n    if N % 2 == 0:\n        print(pairsCounter(N))\n    else:\n        print(0)", "import math\n\ndef pairs(n):\n    cn = 0\n    arr = []\n    w = int(math.sqrt(n))\n    for i in range(1, w + 1):\n        bsq = n - i * i\n        b = int(math.sqrt(bsq))\n        if b * b == bsq:\n            arr.append([i, b])\n    b = []\n    c = []\n    for i in arr:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cn += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    cn += 2\n    return cn\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(pairs(n))\n    else:\n        print(0)", "import math\nab = int(input())\n\ndef test_p(nu):\n    asd = 0\n    ac = []\n    ad = int(math.sqrt(nu))\n    for i in range(1, ad + 1):\n        squarenum = nu - i * i\n        bd = int(math.sqrt(squarenum))\n        if bd * bd == squarenum:\n            ac.append([i, bd])\n    bd = []\n    cd = []\n    for i in ac:\n        if i not in bd:\n            cd.append(i)\n            bd.append([i[1], i[0]])\n    for i in cd:\n        pr = min(i[0], i[1])\n        qr = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            asd += 1\n        else:\n            for j in range(1, qr):\n                ac = j\n                bd = ac + pr\n                gc = math.gcd(ac, bd)\n                li = ac * bd // gc\n                if gc + li == qr:\n                    asd += 2\n    return asd\nfor i in range(ab):\n    k = int(input())\n    if k % 2 == 0:\n        print(test_p(k))\n    else:\n        print(0)", "import math\n\ndef sqs(num):\n    count = 0\n    a = []\n    bc = int(math.sqrt(num))\n    for i in range(1, bc + 1):\n        bs = num - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(sqs(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        baquare = num - i * i\n        b = int(math.sqrt(baquare))\n        if b * b == baquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\n\ndef fun(n):\n    count = 0\n    x = []\n    y = int(math.sqrt(n))\n    for j in range(1, y + 1):\n        bs = n - j * j\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            x.append([j, b])\n    p = []\n    q = []\n    for j in x:\n        if j not in p:\n            q.append(j)\n            p.append([j[1], j[0]])\n    for j in q:\n        r = min(j[0], j[1])\n        s = max(j[0], j[1])\n        if j[0] == 0 or j[1] == 0:\n            count += 1\n        else:\n            for k in range(1, s):\n                l = k\n                t = r + l\n                g1 = math.gcd(l, t)\n                l1 = l * t // g1\n                if g1 + l1 == s:\n                    count += 2\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(fun(n))\n    else:\n        print(0)", "import math\n\ndef pair(n):\n    cnt = 0\n    a = []\n    s = int(math.sqrt(n))\n    for i in range(1, s + 1):\n        x2 = n - i * i\n        x = int(math.sqrt(x2))\n        if x * x == x2:\n            a.append([i, x])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    cnt += 2\n    return cnt\nfor t in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(pair(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef findSquares(n):\n    ans = []\n    nsqrt = int(math.sqrt(n))\n    for i in range(1, nsqrt + 1):\n        jsq = n - i * i\n        j = int(math.sqrt(jsq))\n        if j * j == jsq:\n            ans.append([i, j])\n    return ans\n\ndef solve(n):\n    squares = findSquares(n)\n    b = []\n    c = []\n    for i in squares:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    count = 0\n    for i in c:\n        a = min(i[0], i[1])\n        b = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, b):\n                first = j\n                second = j + a\n                gcd = math.gcd(first, second)\n                lcm = first * second // gcd\n                if gcd + lcm == b:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 != 0:\n        print(0)\n    else:\n        print(solve(n))", "from math import sqrt\nfrom math import gcd\n\ndef helper(num):\n    count = 0\n    A = []\n    s = int(sqrt(num))\n    for i in range(1, s + 1):\n        Sq = num - i ** 2\n        Sq1 = int(sqrt(Sq))\n        if Sq1 ** 2 == Sq:\n            A.append([i, Sq1])\n    B = []\n    C = []\n    for a in A:\n        if a not in B:\n            C.append(a)\n            B.append([a[1], a[0]])\n    for c in C:\n        a = min(c)\n        b = max(c)\n        if c[0] == 0 or c[1] == 0:\n            count += 1\n        else:\n            for i in range(1, b):\n                u = i\n                v = u + a\n                g = gcd(u, v)\n                l = u * v // g\n                if g + l == b:\n                    count += 2\n    return count\ntest = int(input())\nwhile test:\n    n = int(input())\n    if n % 2 == 0:\n        print(helper(n))\n    else:\n        print(0)\n    test -= 1", "import math\nt = int(input())\n\ndef cp(num):\n    ct = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bs = num - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            ct += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    ct += 2\n    return ct\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(cp(n))\n    else:\n        print(0)", "import math\nttgggg = int(input())\n\ndef kkra(n):\n    k = 0\n    a = []\n    md = int(math.sqrt(n))\n    for i in range(1, md + 1):\n        bsquare = n - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        x = min(i[0], i[1])\n        y = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            k += 1\n        else:\n            for j in range(1, y):\n                a = j\n                b = a + x\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == y:\n                    k += 2\n    return k\nfor i in range(ttgggg):\n    n = int(input())\n    if n % 2 == 0:\n        print(kkra(n))\n    else:\n        print(0)", "import math\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nt = int(input())\nwhile t:\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)\n    t -= 1", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\ntt = int(input())\n\ndef d_mahendra(n):\n    ans = 0\n    a = []\n    m = int(math.sqrt(n))\n    for i in range(1, m + 1):\n        bsquare = n - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        x = min(i[0], i[1])\n        y = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            ans += 1\n        else:\n            for j in range(1, y):\n                a = j\n                b = a + x\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == y:\n                    ans += 2\n    return ans\nfor i in range(tt):\n    n = int(input())\n    if n % 2 == 0:\n        print(d_mahendra(n))\n    else:\n        print(0)", "import math\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bs = num - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if 0 in i:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "test = int(input())\n\ndef pair(num):\n    import math\n    a = []\n    cou = 0\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsq = num - i * i\n        b = int(math.sqrt(bsq))\n        if b * b == bsq:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        mini = min(i[0], i[1])\n        maxi = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cou += 1\n        else:\n            for j in range(1, maxi):\n                a1 = j\n                b1 = a1 + mini\n                g = math.gcd(a1, b1)\n                l = a1 * b1 // g\n                if g + l == maxi:\n                    cou += 2\n    return cou\nfor i in range(test):\n    num = int(input())\n    if num % 2 == 0:\n        print(pair(num))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef solve(n):\n    count = 0\n    a = []\n    end = int(math.sqrt(n))\n    for i in range(1, end + 1):\n        bsq = n - i * i\n        b = int(math.sqrt(bsq))\n        if b * b == bsq:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(solve(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef counterPair(num):\n    cnt = 0\n    v1 = []\n    z = int(math.sqrt(num))\n    for i in range(1, z + 1):\n        bsqt = num - i * i\n        b = int(math.sqrt(bsqt))\n        if b * b == bsqt:\n            v1.append([i, b])\n    v2 = []\n    v3 = []\n    for i in v1:\n        if i not in v2:\n            v3.append(i)\n            v2.append([i[1], i[0]])\n    for i in v3:\n        s = min(i[0], i[1])\n        t = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, t):\n                a = j\n                b = a + s\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == t:\n                    cnt += 2\n    return cnt\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(counterPair(n))\n    else:\n        print(0)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import math\n\ndef solve(n):\n    if n % 2 != 0:\n        print(0)\n        return\n    cnt = 0\n    l = []\n    s = math.floor(math.sqrt(n))\n    for i in range(1, s + 1):\n        bs = n - i * i\n        b = math.floor(math.sqrt(bs))\n        if b * b == bs:\n            l.append([i, b])\n    a = []\n    b = []\n    for i in l:\n        if i not in a:\n            b.append(i)\n            a.append([i[1], i[0]])\n    for i in b:\n        x = min(i[0], i[1])\n        y = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, y):\n                p = j\n                q = p + x\n                g = math.gcd(p, q)\n                l = p * q // g\n                if g + l == y:\n                    cnt += 2\n    print(cnt)\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        solve(n)\nmain()", "import math\n\ndef solve(n):\n    if n % 2 != 0:\n        print(0)\n        return\n    cnt = 0\n    l = []\n    s = math.floor(math.sqrt(n))\n    for i in range(1, s + 1):\n        bs = n - i * i\n        b = math.floor(math.sqrt(bs))\n        if b * b == bs:\n            l.append([i, b])\n    a = []\n    b = []\n    for i in l:\n        if i not in a:\n            b.append(i)\n            a.append([i[1], i[0]])\n    for i in b:\n        x = min(i[0], i[1])\n        y = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, y):\n                p = j\n                q = p + x\n                g = math.gcd(p, q)\n                l = p * q // g\n                if g + l == y:\n                    cnt += 2\n    print(cnt)\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        solve(n)\nmain()", "import math\n\ndef solve(n):\n    if n % 2 != 0:\n        print(0)\n        return\n    cnt = 0\n    l = []\n    s = int(math.sqrt(n))\n    for i in range(1, s + 1):\n        bs = n - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            l.append([i, b])\n    a = []\n    b = []\n    for i in l:\n        if i not in a:\n            b.append(i)\n            a.append([i[1], i[0]])\n    for i in b:\n        x = min(i[0], i[1])\n        y = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, y):\n                p = j\n                q = p + x\n                g = math.gcd(p, q)\n                l = p * q // g\n                if g + l == y:\n                    cnt += 2\n    print(cnt)\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        solve(n)\nmain()", "import math\nt = int(input())\n\ndef solve(n):\n    cnt = 0\n    a = []\n    w = int(math.sqrt(n))\n    for i in range(1, w + 1):\n        bs = n - i * i\n        b = int(math.sqrt(bs))\n        if b * b == bs:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            cnt += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    cnt += 2\n    return cnt\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(solve(n))\n    else:\n        print(0)", "from collections import Counter, deque\nfrom collections import OrderedDict, defaultdict\nimport math\nfrom random import randint\nfrom bisect import bisect, bisect_left\nimport sys\nimport re\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef check(a, b, n):\n    return a ** 2 + b ** 2 + gcd(a, b) ** 2 + LCM(a, b) ** 2 == n\n\ndef count(n, product):\n    c = 0\n    for hcf in product:\n        product = n // (hcf * hcf)\n        for i in range(2, sqrt(product)):\n            if product % i == 0:\n                (d1, d2) = (i, product // i)\n                (a, b) = (math.sqrt(d1 - 1), math.sqrt(d2 - 1))\n                if a == int(a) and b == int(b):\n                    if check(int(a) * hcf, int(b) * hcf, n):\n                        if a == b:\n                            c += 1\n                        else:\n                            c += 2\n    return c\n\ndef solve():\n    n = int(input())\n    product = []\n    i = 1\n    while i * i <= n:\n        if n % (i * i) == 0:\n            product.append(i)\n        i += 1\n    print(count(n, product))\nt = int(input())\nfor tt in range(t):\n    solve()", "from collections import Counter, deque\nfrom collections import OrderedDict, defaultdict\nimport math\nfrom random import randint\nfrom bisect import bisect, bisect_left\nimport sys\nimport re\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef check(a, b, n):\n    return a ** 2 + b ** 2 + gcd(a, b) ** 2 + LCM(a, b) ** 2 == n\n\ndef count(hcf, n):\n    product = n // (hcf * hcf)\n    c = 0\n    for i in range(2, sqrt(product)):\n        if product % i == 0:\n            (d1, d2) = (i, product // i)\n            (a, b) = (math.sqrt(d1 - 1), math.sqrt(d2 - 1))\n            if a == int(a) and b == int(b):\n                if check(int(a) * hcf, int(b) * hcf, n):\n                    if a == b:\n                        c += 1\n                    else:\n                        c += 2\n    return c\n\ndef solve():\n    n = int(input())\n    product = []\n    i = 1\n    while i * i <= n:\n        if n % (i * i) == 0:\n            product.append(i)\n        i += 1\n    c = 0\n    for item in product:\n        c += count(item, n)\n    print(c)\nt = int(input())\nfor tt in range(t):\n    solve()", "from collections import Counter, deque\nfrom collections import OrderedDict, defaultdict\nimport math\nfrom random import randint\nfrom bisect import bisect, bisect_left\nimport sys\nimport re\nMOD = 10 ** 9 + 7\nMAX = -sys.maxsize\nMIN = sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef check(a, b, n):\n    return a ** 2 + b ** 2 + gcd(a, b) ** 2 + LCM(a, b) ** 2 == n\n\ndef count(hcf, n):\n    product = n // (hcf * hcf)\n    c = 0\n    for i in range(2, sqrt(product)):\n        if product % i == 0:\n            (d1, d2) = (i, product // i)\n            (a, b) = (math.sqrt(d1 - 1), math.sqrt(d2 - 1))\n            if a == int(a) and b == int(b):\n                if check(int(a) * hcf, int(b) * hcf, n):\n                    if a == b:\n                        c += 1\n                    else:\n                        c += 2\n    return c\n\ndef solve():\n    n = int(input())\n    product = []\n    i = 1\n    while i * i <= n:\n        if n % (i * i) == 0:\n            product.append(i)\n        i += 1\n    c = 0\n    for item in product:\n        c += count(item, n)\n    print(c)\nt = int(input())\nfor tt in range(t):\n    solve()", "import math\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    cnt = 0\n    t = math.sqrt(n)\n    dp = []\n    if t == math.floor(t) and n % 2 == 0:\n        cnt = 1\n    for i in range(2, math.ceil(t)):\n        j = n - i * i\n        q = math.sqrt(j)\n        if q == math.floor(q):\n            dp.append([i, q])\n    for i in range(len(dp)):\n        k = dp[i][0]\n        for x in range(1, math.ceil(k / 2)):\n            r = math.gcd(x, k - x)\n            temp = x * (k - x) / r - r\n            if temp == dp[i][1]:\n                cnt = cnt + 2\n    print(cnt)", "import math\nfrom math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    cnt = 0\n    t = math.sqrt(n)\n    dp = []\n    if t == math.floor(t) and n % 2 == 0:\n        cnt = 1\n    for i in range(2, math.ceil(t)):\n        j = n - i * i\n        q = math.sqrt(j)\n        if q == math.floor(q):\n            dp.append([i, q])\n    for i in range(len(dp)):\n        k = dp[i][0]\n        for x in range(1, math.ceil(k / 2)):\n            r = math.gcd(x, k - x)\n            temp = x * (k - x) / r - r\n            if temp == dp[i][1]:\n                cnt = cnt + 2\n    print(cnt)", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "from math import gcd\n\ndef square_part(n):\n    ret = n\n    p = 2\n    while p ** 2 <= n:\n        if n % p == 0:\n            num_factors_of_p = 0\n            while n % p == 0:\n                n //= p\n                num_factors_of_p += 1\n            if num_factors_of_p % 2 == 1:\n                ret //= p\n        p += 1\n    if n > 1:\n        ret //= n\n    return ret\n\ndef isqrt(n: int) -> int:\n    assert n >= 0, 'sqrt works for only non-negative inputs'\n    if n < 2:\n        return n\n    small_cand = isqrt(n >> 2) << 1\n    large_cand = small_cand + 1\n    if large_cand * large_cand > n:\n        return small_cand\n    else:\n        return large_cand\n\ndef is_square(n):\n    return n > 0 and isqrt(n) ** 2 == n\n\ndef num_good_factorizations(n, verbose=False):\n    ret = 0\n    for k in range(1, isqrt(n) + 1):\n        if n % k == 0 and is_square(k - 1) and is_square(n // k - 1):\n            a = isqrt(k - 1)\n            b = isqrt(n // k - 1)\n            if gcd(a, b) == 1:\n                ret += 1\n                if k ** 2 != n:\n                    ret += 1\n    return ret\n\ndef solution(n):\n    n_square_part = square_part(n)\n    ret = 0\n    d = 1\n    while d ** 4 <= n_square_part:\n        if n % d ** 2 == 0:\n            ret += num_good_factorizations(n // d ** 2)\n            if d ** 4 != n_square_part:\n                d_partner_sq = n_square_part // d ** 2\n                ret += num_good_factorizations(n // d_partner_sq)\n        d += 1\n    return ret\nfor _ in range(int(input())):\n    print(solution(int(input())))", "import math\nt = int(input())\n\ndef count_pairs(num):\n    count = 0\n    a = []\n    w = int(math.sqrt(num))\n    for i in range(1, w + 1):\n        bsquare = num - i * i\n        b = int(math.sqrt(bsquare))\n        if b * b == bsquare:\n            a.append([i, b])\n    b = []\n    c = []\n    for i in a:\n        if i not in b:\n            c.append(i)\n            b.append([i[1], i[0]])\n    for i in c:\n        p = min(i[0], i[1])\n        q = max(i[0], i[1])\n        if i[0] == 0 or i[1] == 0:\n            count += 1\n        else:\n            for j in range(1, q):\n                a = j\n                b = a + p\n                g = math.gcd(a, b)\n                l = a * b // g\n                if g + l == q:\n                    count += 2\n    return count\nfor i in range(t):\n    n = int(input())\n    if n % 2 == 0:\n        print(count_pairs(n))\n    else:\n        print(0)", "import sys\nimport os\nimport math\nfrom collections import *\nimport bisect\nfrom heapq import *\nfrom itertools import permutations, combinations\nif os.path.exists('input.txt') and os.path.exists('output.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    k1 = math.gcd(a, b)\n    k2 = a * b\n    return k2 // k1\n\ndef inp():\n    return map(int, input().strip().split(' '))\n\ndef lis():\n    return list(inp())\nmod = 998244353\n\ndef prim(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef dfs(adj, vis, u, l):\n    vis[u] = 1\n    l.add(u)\n    for i in adj[u]:\n        if vis[i] == 0:\n            dfs(adj, vis, i, l)\nmod = 10 ** 9 + 7\nma = 1002\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\n\ndef dfs(i, j, arr, vis, n, m):\n    vis[i][j] = 1\n    for x in range(4):\n        mx = i + dx[x]\n        my = j + dy[x]\n        if mx >= 0 and mx < n and (my >= 0) and (my < m) and (vis[mx][my] == 0):\n            if arr[i][j] >= arr[mx][my]:\n                dfs(mx, my, arr, vis, n, m)\n\ndef dfs(a, vis, node, c):\n    vis[node] = 1\n    c[0] += 1\n    if vis[a[node]] == 0:\n        dfs(a, vis, a[node], c)\nmod = 998244353\nma = 2 * (10 ** 5 + 1)\nmod = 10 ** 9 + 7\n\ndef f(n):\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\n\ndef dfs(node, par, adj, dp, v):\n    dp[node] = 1\n    for i in adj[node]:\n        if i[0] != par:\n            dfs(i[0], node, adj, dp, v)\n            dp[node] += dp[i[0]]\n\ndef dfs1(node, par, adj, dp, v):\n    for i in adj[node]:\n        if i[0] != par:\n            if i[1] == 1:\n                v.append(dp[i[0]])\n            else:\n                dfs1(i[0], node, adj, dp, v)\nl = []\nfor i in range(1, 2 ** 9 + 1):\n    l.append(int(bin(i)[2:]))\n\ndef finv(p, q):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef pal(s):\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            return False\n    return True\n\ndef f(n):\n    res = 2\n    while res * res <= n:\n        if n % res == 0:\n            return False\n        res += 1\n    return True\n\ndef pal(s):\n    n = len(s)\n    for i in range(n):\n        if s[i] != s[n - 1 - i]:\n            return False\n    return True\nmod = 10 ** 9 + 7\n\ndef f(n):\n    res = 0\n    s = bin(n)[2:]\n    for i in s:\n        res += int(i) & 1\n    return res\n\ndef solve():\n    n = int(input())\n    s = set()\n    i = 1\n    while i <= math.sqrt(n) + 1:\n        if n % i == 0:\n            s.add(i)\n            s.add(n // i)\n        i += 1\n    l = []\n    for i in s:\n        g = 1\n        while g * g < i:\n            at = i - g * g\n            atc = math.sqrt(at)\n            if atc * atc == at:\n                if atc % g == 0:\n                    l.append([int(atc), g])\n            g += 1\n    l1 = []\n    for i in range(len(l)):\n        k = n // (l[i][0] ** 2 + l[i][1] ** 2)\n        bt = (k - 1) * l[i][1] ** 2\n        btc = math.sqrt(bt)\n        if btc * btc == bt:\n            lc = l[i] + [int(btc)]\n            l1.append(lc)\n    ans = 0\n    for i in l1:\n        (a, b, g) = (i[0], i[2], i[1])\n        if a < 1 or b < 1 or math.gcd(a, b) != g:\n            continue\n        tmp = a * a + b * b + g * g + a * a * b * b // (g * g)\n        if tmp == n:\n            ans += 1\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "MAX = 10 ** 10\nMAXsqrt = 10 ** 5\nprimes = [2]\nis_prime = [True] * (1 + MAXsqrt)\n\ndef gcd(a, b):\n    if b > a:\n        (b, a) = (a, b)\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef sieve(is_prime, primes):\n    for i in range(len(is_prime)):\n        if is_prime[i]:\n            p = 2 * i + 3\n            primes.append(p)\n            for j in range(3 * p, 1 + MAXsqrt, 2 * p):\n                is_prime[(j - 3) // 2] = False\n\ndef sqrt_floor(n):\n    left = 1\n    right = n\n    if n < 2:\n        return n\n    while left <= right:\n        m = (left + right) // 2\n        if m * m < n:\n            left = m + 1\n        elif m * m > n:\n            right = m - 1\n        else:\n            break\n    if m * m > n:\n        return m - 1\n    else:\n        return m\n\ndef get_prime_fac(n, primes):\n    pdt = n\n    prime_fac = []\n    limit = sqrt_floor(n)\n    for p in primes:\n        a = 0\n        while pdt % p == 0:\n            pdt = pdt // p\n            a = a + 1\n        if a > 0:\n            prime_fac.append((p, a))\n        if pdt == 1 or p > limit:\n            break\n    if pdt > 1:\n        prime_fac.append((pdt, 1))\n    return prime_fac\n\ndef get_all_divs(n, prime_fac, end):\n    x = []\n    (p, exp) = prime_fac[end - 1]\n    pdt = 1\n    for i in range(exp + 1):\n        x.append(pdt)\n        pdt = pdt * p\n    if end == 1:\n        return x\n    y = get_all_divs(n, prime_fac, end - 1)\n    ans = []\n    for xx in x:\n        for yy in y:\n            ans.append(xx * yy)\n    return ans\n\ndef is_sq_1(n):\n    s = sqrt_floor(n)\n    if s * s + 1 == n:\n        return True\n    else:\n        return False\n\ndef get_sq_1_divs(n, primes):\n    arr = get_prime_fac(n, primes)\n    divs = get_all_divs(n, arr, len(arr))\n    ans = []\n    for d in divs:\n        if is_sq_1(d):\n            ans.append(d)\n    return ans\n\ndef is_sq(n):\n    s = sqrt_floor(n)\n    return s * s == n\n\ndef check_div_sq(n, x, y):\n    gsq = n / x / y\n    return int(gsq) == gsq and is_sq(gsq)\nt = int(input())\nsieve(is_prime, primes)\nfor ti in range(t):\n    n = int(input())\n    ans = 0\n    arr = get_sq_1_divs(n, primes)\n    for (i, x) in enumerate(arr):\n        for y in arr[i:]:\n            if check_div_sq(n, x, y):\n                rx = sqrt_floor(x - 1)\n                ry = sqrt_floor(y - 1)\n                if gcd(rx, ry) == 1:\n                    if x == y:\n                        ans = ans + 1\n                    else:\n                        ans = ans + 2\n                    g = sqrt_floor(n / x / y)\n    print(ans)", "import math\nfrom math import gcd, sqrt\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\n\ndef perfect_square(x):\n    return x ** 0.5 % 1 == 0\n\ndef get_factors(n):\n    factors = []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            if n // i != i:\n                factors.append(n // i)\n        i += 1\n    return factors\n\ndef sum_of_perfect_squares(x):\n    pairs = []\n    for j in range(int(math.sqrt(x / 2)), 1 + int(math.sqrt(x - 1))):\n        i2 = x - j * j\n        i = int(math.sqrt(i2))\n        if i * i == i2 and i > 0:\n            pairs.append([i, j])\n    return pairs\n\ndef check(a, b, n):\n    if (a + b) ** 2 + (lcm(a, b) - gcd(a, b)) ** 2 == n:\n        return True\n    return False\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        factors = get_factors(n)\n        factors.remove(1)\n        ans = 0\n        possible_pairs = set()\n        for x in factors:\n            if perfect_square(x - 1):\n                square_pairs = sum_of_perfect_squares(n // x)\n                for pair in square_pairs:\n                    a = pair[0]\n                    g = pair[1]\n                    b = int(sqrt((x - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n                    (a, g) = (g, a)\n                    b = int(sqrt((x - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n        for pair in possible_pairs:\n            if check(pair[0], pair[1], n):\n                ans += 1\n        print(ans)\nmain()", "import math\nfrom math import gcd, sqrt\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\n\ndef perfect_square(x):\n    return x ** 0.5 % 1 == 0\n\ndef get_factors(n):\n    factors = []\n    i = 1\n    while i * i <= n:\n        if n % i == 0:\n            factors.append(i)\n            if n // i != i:\n                factors.append(n // i)\n        i += 1\n    return factors\n\ndef sum_of_perfect_squares(x):\n    pairs = []\n    for j in range(int(math.sqrt(x / 2)), 1 + int(math.sqrt(x - 1))):\n        i2 = x - j * j\n        i = int(math.sqrt(i2))\n        if i * i == i2 and i > 0:\n            pairs.append([i, j])\n    return pairs\n\ndef check(a, b, n):\n    if (a + b) ** 2 + (lcm(a, b) - gcd(a, b)) ** 2 == n:\n        return True\n    return False\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        factors = get_factors(n)\n        factors.remove(1)\n        ans = 0\n        possible_pairs = set()\n        for x in factors:\n            if perfect_square(x - 1):\n                square_pairs = sum_of_perfect_squares(n // x)\n                for pair in square_pairs:\n                    a = pair[0]\n                    g = pair[1]\n                    b = int(sqrt((x - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n                    (a, g) = (g, a)\n                    b = int(sqrt((x - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n        for pair in possible_pairs:\n            if check(pair[0], pair[1], n):\n                ans += 1\n        print(ans)\nmain()", "from math import gcd, sqrt\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\n\ndef perfect_square(x):\n    return x ** 0.5 % 1 == 0\n\ndef get_factors(n):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n / i == i:\n                factors.append(i)\n            else:\n                factors.append(i)\n                factors.append(n // i)\n    return factors\n\ndef sum_of_perfect_squares(x):\n    pairs = []\n    s = {}\n    i = 1\n    while i * i <= x:\n        s[i * i] = 1\n        if x - i * i in s.keys():\n            pairs.append([int(sqrt(x - i * i)), i])\n        i += 1\n    return pairs\n\ndef check(a, b, n):\n    if (a + b) ** 2 + (lcm(a, b) - gcd(a, b)) ** 2 == n:\n        return True\n    return False\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        factors = get_factors(n)\n        ans = 0\n        possible_pairs = set()\n        for x in factors:\n            f1 = x\n            f2 = n // x\n            if perfect_square(f1 - 1):\n                square_pairs = sum_of_perfect_squares(f2)\n                for pair in square_pairs:\n                    a = pair[0]\n                    g = pair[1]\n                    b = int(sqrt((f1 - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n                    (a, g) = (g, a)\n                    b = int(sqrt((f1 - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n        for pair in possible_pairs:\n            if check(pair[0], pair[1], n):\n                ans += 1\n        print(ans)\nmain()", "from math import gcd, sqrt\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\n\ndef perfect_square(x):\n    return x ** 0.5 % 1 == 0\n\ndef get_factors(n):\n    factors = []\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            if n / i == i:\n                factors.append(i)\n            else:\n                factors.append(i)\n                factors.append(n // i)\n    return factors\n\ndef sum_of_perfect_squares(x):\n    pairs = []\n    s = {}\n    i = 1\n    while i * i <= x:\n        s[i * i] = 1\n        if x - i * i in s.keys():\n            pairs.append([int(sqrt(x - i * i)), i])\n        i += 1\n    return pairs\n\ndef check(a, b, n):\n    if (a + b) ** 2 + (lcm(a, b) - gcd(a, b)) ** 2 == n:\n        return True\n    return False\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        factors = get_factors(n)\n        ans = 0\n        possible_pairs = set()\n        for x in factors:\n            f1 = x\n            f2 = n // x\n            if perfect_square(f1 - 1):\n                square_pairs = sum_of_perfect_squares(f2)\n                for pair in square_pairs:\n                    a = pair[0]\n                    g = pair[1]\n                    b = int(sqrt((f1 - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n                    (a, g) = (g, a)\n                    b = int(sqrt((f1 - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n            (f1, f2) = (f2, f1)\n            if perfect_square(f1 - 1):\n                square_pairs = sum_of_perfect_squares(f2)\n                for pair in square_pairs:\n                    a = pair[0]\n                    g = pair[1]\n                    b = int(sqrt((f1 - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n                    (a, g) = (g, a)\n                    b = int(sqrt((f1 - 1) * g ** 2))\n                    possible_pairs.add((a, b))\n        for pair in possible_pairs:\n            if check(pair[0], pair[1], n):\n                ans += 1\n        print(ans)\nmain()", "from math import gcd, sqrt, floor, ceil\n\ndef is_perfect_square(x):\n    return ceil(sqrt(x)) == floor(sqrt(x))\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        pairs = set()\n        ans = 0\n        for j in range(2, int(sqrt(n)) + 1):\n            if n % j == 0:\n                (f1, f2) = (j, n // j)\n                if is_perfect_square(f1 - 1):\n                    s = {}\n                    i = 1\n                    while i * i <= f2:\n                        s[i * i] = 1\n                        if f2 - i * i in s.keys():\n                            a = i\n                            g = int(sqrt(f2 - i * i))\n                            b = int(sqrt(f1 - 1)) * g\n                            if a * a + b * b + gcd(a, b) * gcd(a, b) + a * b // gcd(a, b) * (a * b // gcd(a, b)) == n:\n                                if (a, b) not in pairs:\n                                    ans += 1\n                                pairs.add((a, b))\n                            (a, g) = (g, a)\n                            b = int(sqrt(f1 - 1)) * g\n                            if a * a + b * b + gcd(a, b) * gcd(a, b) + a * b // gcd(a, b) * (a * b // gcd(a, b)) == n:\n                                if (a, b) not in pairs:\n                                    ans += 1\n                                pairs.add((a, b))\n                        i += 1\n                (f1, f2) = (f2, f1)\n                if is_perfect_square(f1 - 1):\n                    s = {}\n                    i = 1\n                    while i * i <= f2:\n                        s[i * i] = 1\n                        if f2 - i * i in s.keys():\n                            a = i\n                            g = int(sqrt(f2 - i * i))\n                            b = int(sqrt(f1 - 1)) * g\n                            if a * a + b * b + gcd(a, b) * gcd(a, b) + a * b // gcd(a, b) * (a * b // gcd(a, b)) == n:\n                                if (a, b) not in pairs:\n                                    ans += 1\n                                pairs.add((a, b))\n                            (a, g) = (g, a)\n                            b = int(sqrt(f1 - 1)) * g\n                            if a * a + b * b + gcd(a, b) * gcd(a, b) + a * b // gcd(a, b) * (a * b // gcd(a, b)) == n:\n                                if (a, b) not in pairs:\n                                    ans += 1\n                                pairs.add((a, b))\n                        i += 1\n        print(ans)\nmain()"]