["def sim(b, n, m, h, x):\n    Need = 0\n    Limit = b[0] - 1 + 2 * h\n    if Limit > x:\n        return False\n    for i in range(1, n):\n        if Limit + 2 * h <= x:\n            Limit += 2 * h\n        else:\n            Limit = b[i] - 1 + 2 * h\n            Need += 1\n    return Need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def sim(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * a\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * a <= x:\n            limit += 2 * a\n        else:\n            limit = b[i] - 1 + 2 * a\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, a) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, a, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simt(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simt(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def sim(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] + 2 * h - 1\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need_1 = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need_1 += 1\n    return need_1 < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate1(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate1(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b1 = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b1.append(bi)\n    b1.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b1, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, h, y):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > y:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= y:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lowww, hi) = (0, 10 ** 15)\n    while lowww < hi:\n        mid = (lowww + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lowww = mid + 1\n    print(lowww)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, a, x):\n    need = 0\n    limit = b[0] - 1 + 2 * a\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * a <= x:\n            limit += 2 * a\n        else:\n            limit = b[i] - 1 + 2 * a\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, a) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, a, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(c, n, m, h, x):\n    need = 0\n    limit = c[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = c[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    c = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        c.append(bi)\n    c.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(c, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simm(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simm(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def sim(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def sim(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (l, hi) = (0, 10 ** 15)\n    while l < hi:\n        mid = (l + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            l = mid + 1\n    print(l)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "for _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    floors = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        floors.append((a, b))\n    floors.sort(key=lambda x: x[1])\n    (lo, hi) = (0, 10 ** 18)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        need = 0\n        cur = mid + 1\n        reach = True\n        for (a, b) in floors:\n            if cur + b + 2 * h <= mid:\n                cur += 2 * h\n            elif b + 2 * h > mid:\n                reach = False\n                break\n            else:\n                cur = 2 * h\n                need += 1\n        if reach == False or need > m:\n            lo = mid + 1\n        else:\n            hi = mid\n    print(lo - 1)", "def sim(b, n, m, h, x):\n    need = 0\n    li = b[0] - 1 + 2 * h\n    if li > x:\n        return False\n    for i in range(1, n):\n        if li + 2 * h <= x:\n            li += 2 * h\n        else:\n            li = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "for _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    floors = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        floors.append((a, b))\n    floors.sort(key=lambda x: x[1])\n    (lo, hi) = (0, 10 ** 18)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        need = 0\n        cur = mid + 1\n        reach = True\n        for (a, b) in floors:\n            if cur + b + 2 * h <= mid:\n                cur += 2 * h\n            elif b + 2 * h > mid:\n                reach = False\n                break\n            else:\n                cur = 2 * h\n                need += 1\n        if reach == False or need > m:\n            lo = mid + 1\n        else:\n            hi = mid\n    print(lo - 1)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def funSim(b, n, m, h, x):\n    nd = 0\n    maap = b[0] - 1 + 2 * h\n    if maap > x:\n        return False\n    for i in range(1, n):\n        if maap + 2 * h <= x:\n            maap += 2 * h\n        else:\n            maap = b[i] - 1 + 2 * h\n            nd += 1\n    return nd < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (loww, highh) = (0, 10 ** 15)\n    while loww < highh:\n        mid = (loww + highh) // 2\n        if funSim(b, n, m, h, mid):\n            highh = mid\n        else:\n            loww = mid + 1\n    print(loww)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (bp, hi) = (0, 10 ** 15)\n    while bp < hi:\n        mid = (bp + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            bp = mid + 1\n    print(bp)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, g, x):\n    need = 0\n    limit = b[0] - 1 + 2 * g\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * g <= x:\n            limit += 2 * g\n        else:\n            limit = b[i] - 1 + 2 * g\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, g) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, g, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def sim(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (low, hi) = (0, 10 ** 15)\n    while low < hi:\n        mid = (low + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, l) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, l, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simu(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simu(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simt(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simt(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def sim(b, n, m, h, x):\n    Need = 0\n    Limit = b[0] - 1 + 2 * h\n    if Limit > x:\n        return False\n    for i in range(1, n):\n        if Limit + 2 * h <= x:\n            Limit += 2 * h\n        else:\n            Limit = b[i] - 1 + 2 * h\n            Need += 1\n    return Need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def sim(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, k, x):\n    need = 0\n    limit = b[0] - 1 + 2 * k\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * k <= x:\n            limit += 2 * k\n        else:\n            limit = b[i] - 1 + 2 * k\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, k) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, k, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    ned = 0\n    lmt = b[0] - 1 + 2 * h\n    if lmt > x:\n        return False\n    for i in range(1, n):\n        if lmt + 2 * h <= x:\n            lmt += 2 * h\n        else:\n            lmt = b[i] - 1 + 2 * h\n            ned += 1\n    return ned < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(y, n1, m2, h, x1):\n    need = 0\n    limit = y[0] - 1 + 2 * h\n    if limit > x1:\n        return False\n    for i in range(1, n1):\n        if limit + 2 * h <= x1:\n            limit += 2 * h\n        else:\n            limit = y[i] - 1 + 2 * h\n            need += 1\n    return need < m2\nfor _ in range(int(input())):\n    (n1, m2, h) = map(int, input().split())\n    y = []\n    for _ in range(n1):\n        (ai, yi) = map(int, input().split())\n        y.append(yi)\n    y.sort(reverse=True)\n    (lower, higher) = (0, 20 ** 25)\n    while lower < higher:\n        mid = (lower + higher) // 2\n        if simulate(y, n1, m2, h, mid):\n            higher = mid\n        else:\n            lower = mid + 1\n    print(lower)", "def simulate(b, n1, m2, h, x1):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x1:\n        return False\n    for i in range(1, n1):\n        if limit + 2 * h <= x1:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m2\nfor _ in range(int(input())):\n    (n1, m2, h) = map(int, input().split())\n    b = []\n    for _ in range(n1):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (low, high) = (0, 20 ** 25)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(b, n1, m2, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(a, n, m, b, x):\n    need = 0\n    limit = a[0] - 1 + 2 * b\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * b <= x:\n            limit += 2 * b\n        else:\n            limit = a[i] - 1 + 2 * b\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, b) = map(int, input().split())\n    a = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(a, n, m, b, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, h, x):\n    nd = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            nd += 1\n    return nd < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (aa, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(arr, n, m, p, x):\n    nd = 0\n    limit = arr[0] - 1 + 2 * p\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * p <= x:\n            limit += 2 * p\n        else:\n            limit = arr[i] - 1 + 2 * p\n            nd += 1\n    return nd < m\nfor _ in range(int(input())):\n    (n, m, p) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, p, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def sim(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if sim(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def simulate(a, no, m, h, p):\n    need = 0\n    limit = a[0] - 1 + 2 * h\n    if limit > p:\n        return False\n    for i in range(1, no):\n        if limit + 2 * h <= p:\n            limit += 2 * h\n        else:\n            limit = a[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (no, m, h) = map(int, input().split())\n    a = []\n    for _ in range(no):\n        (ai, bi) = map(int, input().split())\n        a.append(bi)\n    a.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(a, no, m, h, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(l, m, n, o, p):\n    need = 0\n    limit = l[0] - 1 + 2 * o\n    if limit > p:\n        return False\n    for i in range(1, m):\n        if limit + 2 * o <= p:\n            limit += 2 * o\n        else:\n            limit = l[i] - 1 + 2 * o\n            need += 1\n    return need < n\nfor _ in range(int(input())):\n    (m, n, o) = map(int, input().split())\n    l = []\n    for _ in range(m):\n        (ai, bi) = map(int, input().split())\n        l.append(bi)\n    l.sort(reverse=True)\n    (low, high) = (0, 10 ** 15)\n    while low < high:\n        mid = (low + high) // 2\n        if simulate(l, m, n, o, mid):\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "def is_ok(time, m, h, dests):\n    i = 0\n    j = 0\n    while True:\n        i += (time - dests[i]) // (2 * h)\n        if i >= len(dests):\n            return True\n        j += 1\n        if j >= m:\n            return False\nfor _ in range(int(input())):\n    (n, m, h) = (int(x) for x in input().split())\n    assert n >= 1 and m >= 1 and (h >= 1)\n    dests = []\n    for __ in range(n):\n        (a, b) = (int(x) for x in input().split())\n        assert b > a and a >= 1\n        dests.append(b - 1)\n    dests.sort(reverse=True)\n    min_time = max(dests) + 2 * h\n    max_time = max(dests) + 2 * h * n\n    while True:\n        if min_time == max_time:\n            break\n        med_time = (min_time + max_time) // 2\n        if is_ok(med_time, m, h, dests):\n            max_time = med_time\n        else:\n            min_time = med_time + 1\n    print(min_time)", "def simulate(b, n, m, h, x):\n    need = 0\n    limit = b[0] - 1 + 2 * h\n    if limit > x:\n        return False\n    for i in range(1, n):\n        if limit + 2 * h <= x:\n            limit += 2 * h\n        else:\n            limit = b[i] - 1 + 2 * h\n            need += 1\n    return need < m\nfor _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    b = []\n    for _ in range(n):\n        (ai, bi) = map(int, input().split())\n        b.append(bi)\n    b.sort(reverse=True)\n    (lo, hi) = (0, 10 ** 15)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if simulate(b, n, m, h, mid):\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "for _ in range(int(input())):\n    (n, m, h) = map(int, input().split())\n    floors = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        floors.append((a, b))\n    floors.sort(key=lambda x: x[1])\n    (lo, hi) = (0, 10 ** 18)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        need = 0\n        cur = mid + 1\n        reach = True\n        for (a, b) in floors:\n            if cur + b + 2 * h <= mid:\n                cur += 2 * h\n            elif b + 2 * h > mid:\n                reach = False\n                break\n            else:\n                cur = 2 * h\n                need += 1\n        if reach == False or need > m:\n            lo = mid + 1\n        else:\n            hi = mid\n    print(lo - 1)", "for _ in range(int(input())):\n    [n, m, h] = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        [a, b] = list(map(int, input().split()))\n        arr.append(b)\n    arr.sort()\n\n    def solve(k):\n        index = n - 1\n        elevs = m\n        time = arr[index] - 1\n        while index >= 0 and elevs:\n            while index >= 0 and time + 2 * h <= k:\n                time += 2 * h\n                index -= 1\n            if index < 0:\n                break\n            elevs -= 1\n            time = arr[index] - 1\n        if index < 0:\n            return 1\n        return 0\n    l = arr[-1] + 2 * h - 1\n    r = arr[-1] + 2 * h * n - 1\n    while l < r:\n        mid = (l + r) // 2\n        if solve(mid):\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "for _ in range(int(input())):\n    [n, m, h] = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        [a, b] = list(map(int, input().split()))\n        arr.append(b)\n    arr.sort()\n\n    def solve(k):\n        index = n - 1\n        elevs = m\n        time = arr[index] - 1\n        while index >= 0 and elevs:\n            while index >= 0 and time + 2 * h <= k:\n                time += 2 * h\n                index -= 1\n            if index < 0:\n                break\n            elevs -= 1\n            time = arr[index] - 1\n        if index < 0:\n            return 1\n        return 0\n    l = arr[-1] + 2 * h - 1\n    r = arr[-1] + 2 * h * n - 1\n    while l < r:\n        mid = (l + r) // 2\n        if solve(mid):\n            r = mid\n        else:\n            l = mid + 1\n    print(l)"]