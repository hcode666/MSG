["mod = 10 ** 9 + 7\n\ndef calc(i, j):\n    first = 0\n    if i % 2 == 0:\n        first = i // 2 * (i - 1)\n    else:\n        first = (i - 1) // 2 * i\n    second = 0\n    if j % 2 == 0:\n        second = j // 2 * (j + 1)\n    else:\n        second = (j + 1) // 2 * j\n    return (second - first) % mod\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    row = {}\n    col = {}\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            row[x] = row.get(x, 1) * v % mod\n        else:\n            col[x] = col.get(x, 1) * v % mod\n    var = 0\n    cons = 0\n    sum = calc(1, n * m)\n    for x in col:\n        var = (var + col[x] - 1) % mod\n        cons += (col[x] - 1) * x % mod\n        cons %= mod\n        val = (calc(0, n - 1) * m % mod + n * x % mod) % mod\n        sum = (sum + val * (col[x] - 1) % mod) % mod\n    var = var * m % mod\n    for x in row:\n        rowno = x\n        rowc = row[x]\n        sumr = calc((rowno - 1) * m + 1, rowno * m) + var * (rowno - 1) % mod + cons\n        sumr %= mod\n        add = sumr * (rowc - 1) % mod\n        sum = (sum + add) % mod\n    print(sum)", "mod = 10 ** 9 + 7\n\ndef calc(i, j):\n    first = 0\n    if i % 2 == 0:\n        first = i // 2 * (i - 1)\n    else:\n        first = (i - 1) // 2 * i\n    second = 0\n    if j % 2 == 0:\n        second = j // 2 * (j + 1)\n    else:\n        second = (j + 1) // 2 * j\n    return (second - first) % mod\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    row = {}\n    col = {}\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            row[x] = row.get(x, 1) * v % mod\n        else:\n            col[x] = col.get(x, 1) * v % mod\n    var = 0\n    cons = 0\n    sum = calc(1, n * m)\n    for x in col:\n        var = (var + col[x] - 1) % mod\n        cons += (col[x] - 1) * x % mod\n        cons %= mod\n        val = (calc(0, n - 1) * m % mod + n * x % mod) % mod\n        sum = (sum + val * (col[x] - 1) % mod) % mod\n    var = var * m % mod\n    for x in row:\n        rowno = x\n        rowc = row[x]\n        sumr = calc((rowno - 1) * m + 1, rowno * m) + var * (rowno - 1) % mod + cons\n        sumr %= mod\n        add = sumr * (rowc - 1) % mod\n        sum = (sum + add) % mod\n    print(sum)", "t = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split(' '))\n    r = {}\n    c = {}\n    sum = m * n * (m * n + 1) // 2\n    ra = rp = ca = cp = 0\n    for j in range(k):\n        (q, x, v) = map(int, input().split(' '))\n        if q == 0:\n            sum += (m * m * (x - 1) + m * (m + 1) // 2) * (v - 1)\n            sum += (ra + rp * (x - 1)) * (v - 1)\n            ca += m * (x - 1) * r.get(x, 1) * (v - 1)\n            cp += r.get(x, 1) * (v - 1)\n            r[x] = r.get(x, 1) * v\n        else:\n            sum += (m * n * (n - 1) // 2 + n * x) * (v - 1)\n            sum += (ca + cp * x) * (v - 1)\n            ra += x * c.get(x, 1) * (v - 1)\n            rp += m * c.get(x, 1) * (v - 1)\n            c[x] = c.get(x, 1) * v\n    print(sum % 1000000007)", "t = int(input())\nfor i in range(t):\n    (n, m, k) = map(int, input().split(' '))\n    r = {}\n    c = {}\n    p = m * n\n    sum = p * (p + 1) // 2\n    ra = 0\n    rp = 0\n    ca = 0\n    cp = 0\n    for j in range(k):\n        (q, x, v) = map(int, input().split(' '))\n        if q == 0:\n            sum += (m * m * (x - 1) + m * (m + 1) // 2) * (v - 1)\n            sum += (ra + rp * (x - 1)) * (v - 1)\n            ca += m * (x - 1) * r.get(x, 1) * (v - 1)\n            cp += r.get(x, 1) * (v - 1)\n            r[x] = r.get(x, 1) * v\n        else:\n            sum += (m * n * (n - 1) // 2 + n * x) * (v - 1)\n            sum += (ca + cp * x) * (v - 1)\n            ra += x * c.get(x, 1) * (v - 1)\n            rp += m * c.get(x, 1) * (v - 1)\n            c[x] = c.get(x, 1) * v\n    print(sum % 1000000007)", "mod = pow(10, 9) + 7\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    [n, m, k] = input().split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    a = dict([])\n    b = dict([])\n    for _ in range(0, k):\n        [q, x, v] = input().split()\n        q = int(q)\n        x = int(x)\n        v = int(v)\n        if q == 0:\n            if x in a:\n                a[x] *= v\n                a[x] = a[x] % mod\n            else:\n                a[x] = v\n        elif x in b:\n            b[x] *= v\n            b[x] = b[x] % mod\n        else:\n            b[x] = v\n    s_a = n\n    s_b = m\n    for i in a:\n        s_a += a[i] - 1\n    for i in b:\n        s_b += b[i] - 1\n    w_a = (n * n + n) / 2\n    w_b = (m * m + m) / 2\n    w_a = int(w_a)\n    w_b = int(w_b)\n    w_a = w_a % mod\n    w_b = w_b % mod\n    for i in a:\n        w_a += i * (a[i] - 1)\n        w_a = w_a % mod\n    for i in b:\n        w_b += i * (b[i] - 1)\n        w_b = w_b % mod\n    print((m * w_a * s_b + s_a * w_b - m * s_a * s_b) % mod)", "mod = pow(10, 9) + 7\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    [n, m, k] = input().split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    a = dict([])\n    b = dict([])\n    for _ in range(0, k):\n        [q, x, v] = input().split()\n        q = int(q)\n        x = int(x)\n        v = int(v)\n        if q == 0:\n            if x in a:\n                a[x] *= v\n                a[x] = a[x] % mod\n            else:\n                a[x] = v\n        elif x in b:\n            b[x] *= v\n            b[x] = b[x] % mod\n        else:\n            b[x] = v\n    s_a = n\n    s_b = m\n    for i in a:\n        s_a += a[i] - 1\n    for i in b:\n        s_b += b[i] - 1\n    w_a = (n * n + n) / 2\n    w_b = (m * m + m) / 2\n    w_a = int(w_a)\n    w_b = int(w_b)\n    w_a = w_a % mod\n    w_b = w_b % mod\n    for i in a:\n        w_a += i * (a[i] - 1)\n        w_a = w_a % mod\n    for i in b:\n        w_b += i * (b[i] - 1)\n        w_b = w_b % mod\n    print((m * w_a * s_b + s_a * w_b - m * s_a * s_b) % mod)", "mod = pow(10, 9) + 7\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    [n, m, k] = input().split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    a = dict([])\n    b = dict([])\n    for _ in range(0, k):\n        [q, x, v] = input().split()\n        q = int(q)\n        x = int(x)\n        v = int(v)\n        if q == 0:\n            if x in a:\n                a[x] *= v\n                a[x] = a[x] % mod\n            else:\n                a[x] = v\n        elif x in b:\n            b[x] *= v\n            b[x] = b[x] % mod\n        else:\n            b[x] = v\n    s_a = n\n    s_b = m\n    for i in a:\n        s_a += a[i] - 1\n    for i in b:\n        s_b += b[i] - 1\n    w_a = (n * n + n) / 2\n    w_b = (m * m + m) / 2\n    w_a = int(w_a)\n    w_b = int(w_b)\n    w_a = w_a % mod\n    w_b = w_b % mod\n    for i in a:\n        w_a += i * (a[i] - 1)\n        w_a = w_a % mod\n    for i in b:\n        w_b += i * (b[i] - 1)\n        w_b = w_b % mod\n    print((m * w_a * s_b + s_a * w_b - m * s_a * s_b) % mod)", "for _ in range(int(input())):\n    mod = 1000000007\n    (n, m, k) = [int(i) for i in input().split()]\n    res = m * n * (m * n + 1) // 2\n    q = []\n    for t in range(k):\n        q.append([int(i) for i in input().split()])\n    q.sort()\n\n    def sm(q, x, v):\n        ans = 0\n        if q == 0:\n            ans = (v - 1) * ((x - 1) * m * m + m * (m + 1) // 2)\n            return ans % mod\n        ans = (v - 1) * (x * n + m * n * (n - 1) // 2)\n        return ans % mod\n    (jc, c, j) = (0, 0, 0)\n    cnt = 0\n    for t in range(k):\n        if q[t][0] == 0:\n            continue\n        (_, jcurr, ccurr) = q[t]\n        c += ccurr - 1\n        j += jcurr\n        jc += jcurr * ccurr\n        cnt += 1\n\n    def cross(r, R):\n        return (m * (r - 1) * c + jc - j) * (R - 1) % mod\n    for t in range(k):\n        (_, jcurr, ccurr) = q[t]\n        res += sm(*q[t])\n    for t in range(k):\n        if q[t][0] == 1:\n            continue\n        (_, jcurr, ccurr) = q[t]\n        res += cross(jcurr, ccurr)\n    print(res % mod)", "for _ in range(int(input())):\n    mod = 1000000007\n    (n, m, k) = [int(i) for i in input().split()]\n    res = m * n * (m * n + 1) // 2\n    q = []\n    for t in range(k):\n        q.append([int(i) for i in input().split()])\n    q.sort()\n\n    def sm(q, x, v):\n        ans = 0\n        if q == 0:\n            ans = (v - 1) * ((x - 1) * m * m + m * (m + 1) // 2)\n            return ans % mod\n        ans = (v - 1) * (x * n + m * n * (n - 1) // 2)\n        return ans % mod\n    (jc, c, j) = (0, 0, 0)\n    cnt = 0\n    for t in range(k):\n        if q[t][0] == 0:\n            continue\n        (_, jcurr, ccurr) = q[t]\n        c += ccurr - 1\n        j += jcurr\n        jc += jcurr * ccurr\n        cnt += 1\n\n    def cross(r, R):\n        return (m * (r - 1) * c + jc - j) * (R - 1) % mod\n    for t in range(k):\n        (_, jcurr, ccurr) = q[t]\n        res += sm(*q[t])\n    for t in range(k):\n        if q[t][0] == 1:\n            continue\n        (_, jcurr, ccurr) = q[t]\n        res += cross(jcurr, ccurr)\n    print(res % mod)", "for _ in range(int(input())):\n    mod = 1000000007\n    (n, m, k) = [int(i) for i in input().split()]\n    res = m * n * (m * n + 1) // 2\n    q = []\n    for t in range(k):\n        q.append([int(i) for i in input().split()])\n    q.sort()\n\n    def sm(q, x, v):\n        ans = 0\n        if q == 0:\n            ans = (v - 1) * ((x - 1) * m * m + m * (m + 1) // 2)\n            return ans % mod\n        ans = (v - 1) * (x * n + m * n * (n - 1) // 2)\n        return ans % mod\n    (jc, c, j) = (0, 0, 0)\n    cnt = 0\n    for t in range(k):\n        if q[t][0] == 0:\n            continue\n        (_, jcurr, ccurr) = q[t]\n        c += ccurr - 1\n        j += jcurr\n        jc += jcurr * ccurr\n        cnt += 1\n\n    def cross(r, R):\n        return (m * (r - 1) * c + jc - j) * (R - 1) % mod\n    for t in range(k):\n        (_, jcurr, ccurr) = q[t]\n        res += sm(*q[t])\n    for t in range(k):\n        if q[t][0] == 1:\n            continue\n        (_, jcurr, ccurr) = q[t]\n        res += cross(jcurr, ccurr)\n    print(res % mod)", "mod = 10 ** 9 + 7\n\ndef calc(a, b):\n    first = 0\n    if a % 2 == 0:\n        first = a // 2 * (a - 1)\n    else:\n        first = (a - 1) // 2 * a\n    second = 0\n    if b % 2 == 0:\n        second = b // 2 * (b + 1)\n    else:\n        second = (b + 1) // 2 * b\n    return (second - first) % mod\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    row = {}\n    col = {}\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            row[x] = row.get(x, 1) * v % mod\n        else:\n            col[x] = col.get(x, 1) * v % mod\n    var = 0\n    cons = 0\n    sum = calc(1, n * m)\n    for x in col:\n        var = (var + col[x] - 1) % mod\n        cons += (col[x] - 1) * x % mod\n        cons %= mod\n        val = (calc(0, n - 1) * m % mod + n * x % mod) % mod\n        sum = (sum + val * (col[x] - 1) % mod) % mod\n    var = var * m % mod\n    for x in row:\n        rowno = x\n        rowc = row[x]\n        sumr = calc((rowno - 1) * m + 1, rowno * m) + var * (rowno - 1) % mod + cons\n        sumr %= mod\n        add = sumr * (rowc - 1) % mod\n        sum = (sum + add) % mod\n    print(sum)", "mod = 10 ** 9 + 7\n\ndef calc(a, b):\n    first = 0\n    if a % 2 == 0:\n        first = a // 2 * (a - 1)\n    else:\n        first = (a - 1) // 2 * a\n    second = 0\n    if b % 2 == 0:\n        second = b // 2 * (b + 1)\n    else:\n        second = (b + 1) // 2 * b\n    return (second - first) % mod\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    row = {}\n    col = {}\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            row[x] = row.get(x, 1) * v % mod\n        else:\n            col[x] = col.get(x, 1) * v % mod\n    var = 0\n    cons = 0\n    sum = calc(1, n * m)\n    for x in col:\n        var = (var + col[x] - 1) % mod\n        cons += (col[x] - 1) * x % mod\n        cons %= mod\n        val = (calc(0, n - 1) * m % mod + n * x % mod) % mod\n        sum = (sum + val * (col[x] - 1) % mod) % mod\n    var = var * m % mod\n    for x in row:\n        rowno = x\n        rowc = row[x]\n        sumr = calc((rowno - 1) * m + 1, rowno * m) + var * (rowno - 1) % mod + cons\n        sumr %= mod\n        add = sumr * (rowc - 1) % mod\n        sum = (sum + add) % mod\n    print(sum)", "mod = 10 ** 9 + 7\n\ndef calc(i, j):\n    first = 0\n    if i % 2 == 0:\n        first = i // 2 * (i - 1)\n    else:\n        first = (i - 1) // 2 * i\n    second = 0\n    if j % 2 == 0:\n        second = j // 2 * (j + 1)\n    else:\n        second = (j + 1) // 2 * j\n    return (second - first) % mod\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    row = {}\n    col = {}\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            row[x] = row.get(x, 1) * v % mod\n        else:\n            col[x] = col.get(x, 1) * v % mod\n    var = 0\n    cons = 0\n    sum = calc(1, n * m)\n    for x in col:\n        var = (var + col[x] - 1) % mod\n        cons += (col[x] - 1) * x % mod\n        cons %= mod\n        val = (calc(0, n - 1) * m % mod + n * x % mod) % mod\n        sum = (sum + val * (col[x] - 1) % mod) % mod\n    var = var * m % mod\n    for x in row:\n        rowno = x\n        rowc = row[x]\n        sumr = calc((rowno - 1) * m + 1, rowno * m) + var * (rowno - 1) % mod + cons\n        sumr %= mod\n        add = sumr * (rowc - 1) % mod\n        sum = (sum + add) % mod\n    print(sum)", "mod = 1000000007\n\ndef calc(i, j):\n    first = 0\n    if i % 2 == 0:\n        first = i // 2\n        first = first % mod * ((i - 1) % mod) % mod\n    else:\n        first = (i - 1) // 2\n        first = first % mod * (i % mod) % mod\n    second = 0\n    if j % 2 == 0:\n        second = j // 2\n        second = second % mod * ((j + 1) % mod) % mod\n    else:\n        second = (j + 1) // 2\n        second = second % mod * (j % mod) % mod\n    return (second - first + mod) % mod\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    row = {}\n    col = {}\n    while k > 0:\n        k -= 1\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            if x in row:\n                row[x] = row[x] * v % mod\n            else:\n                row[x] = v\n        elif x in col:\n            col[x] = col[x] * v % mod\n        else:\n            col[x] = v\n    var = 0\n    cons = 0\n    sum = calc(1, n * m)\n    for x in col:\n        var += col[x] - 1\n        cons += (col[x] - 1) * x % mod\n        var %= mod\n        cons %= mod\n        val = (calc(0, n - 1) * m % mod + n * x % mod) % mod\n        sum = sum + val * (col[x] - 1) % mod\n        sum = (sum + mod) % mod\n    var = var * m % mod\n    for x in row:\n        rowno = x\n        rowc = row[x]\n        sumr = calc((rowno - 1) * m + 1, rowno * m) + var * (rowno - 1) % mod + cons\n        sumr = sumr % mod\n        add = sumr % mod * (rowc - 1) % mod % mod\n        sum = sum + add\n        sum = (sum + mod) % mod\n    print(sum)", "mod = 1000000007\n\ndef calc(i, j):\n    if i % 2 == 0:\n        first = i // 2\n        first = first * (i - 1) % mod\n    else:\n        first = (i - 1) // 2\n        first = first * i % mod\n    if j % 2 == 0:\n        second = j // 2\n        second = second * (j + 1) % mod\n    else:\n        second = (j + 1) // 2\n        second = second * j % mod\n    return (second - first + mod) % mod\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    row = {}\n    col = {}\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            if x in row:\n                row[x] = row[x] * v % mod\n            else:\n                row[x] = v\n        elif x in col:\n            col[x] = col[x] * v % mod\n        else:\n            col[x] = v\n    var = 0\n    cons = 0\n    sum = calc(1, n * m)\n    for (key, value) in col.items():\n        var += value - 1\n        cons += (value - 1) * key % mod\n        var %= mod\n        cons %= mod\n        val = (calc(0, n - 1) * m % mod + n * key % mod) % mod\n        sum += val * (value - 1) % mod\n        sum = (sum + mod) % mod\n    var = var * m % mod\n    for (key, value) in row.items():\n        rowno = key\n        rowc = value\n        sumr = calc((rowno - 1) * m + 1, rowno * m) + var * (rowno - 1) % mod + cons\n        sumr = sumr % mod\n        add = sumr % mod * (rowc - 1) % mod % mod\n        sum += add\n        sum = (sum + mod) % mod\n    print(sum)", "mod = 10 ** 9 + 7\n\ndef calc(i, j):\n    first = 0\n    if i % 2 == 0:\n        first = i // 2 * (i - 1)\n    else:\n        first = (i - 1) // 2 * i\n    second = 0\n    if j % 2 == 0:\n        second = j // 2 * (j + 1)\n    else:\n        second = (j + 1) // 2 * j\n    return (second - first) % mod\nt = int(input())\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    row = {}\n    col = {}\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            row[x] = row.get(x, 1) * v % mod\n        else:\n            col[x] = col.get(x, 1) * v % mod\n    var = 0\n    cons = 0\n    sum = calc(1, n * m)\n    for x in col:\n        var = (var + col[x] - 1) % mod\n        cons += (col[x] - 1) * x % mod\n        cons %= mod\n        val = (calc(0, n - 1) * m % mod + n * x % mod) % mod\n        sum = (sum + val * (col[x] - 1) % mod) % mod\n    var = var * m % mod\n    for x in row:\n        rowno = x\n        rowc = row[x]\n        sumr = calc((rowno - 1) * m + 1, rowno * m) + var * (rowno - 1) % mod + cons\n        sumr %= mod\n        add = sumr * (rowc - 1) % mod\n        sum = (sum + add) % mod\n    print(sum)", "from collections import defaultdict\nt = int(input())\nM = 10 ** 9 + 7\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    rows = defaultdict(lambda : 1)\n    cols = defaultdict(lambda : 1)\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            rows[x] *= v\n            rows[x] %= M\n        if q == 1:\n            cols[x] *= v\n            cols[x] %= M\n    currsum = 0\n    colsum = m * (m + 1) // 2\n    csum = m\n    rowsum = n * (n + 1) // 2\n    rsum = n\n    for c in cols:\n        colsum += c * (cols[c] - 1)\n        csum += cols[c] - 1\n        colsum %= M\n        csum %= M\n    for r in rows:\n        rowsum += r * (rows[r] - 1)\n        rsum += rows[r] - 1\n        rowsum %= M\n        rsum %= M\n    currsum += (rowsum - rsum) * m * csum + rsum * colsum\n    currsum %= M\n    print(currsum)", "from collections import defaultdict\nt = int(input())\nM = 10 ** 9 + 7\nfor _ in range(t):\n    (n, m, k) = map(int, input().split())\n    rows = defaultdict(lambda : 1)\n    cols = defaultdict(lambda : 1)\n    for _ in range(k):\n        (q, x, v) = map(int, input().split())\n        if q == 0:\n            rows[x] *= v\n            rows[x] %= M\n        if q == 1:\n            cols[x] *= v\n            cols[x] %= M\n    currsum = 0\n    colsum = m * (m + 1) // 2\n    csum = m\n    rowsum = n * (n + 1) // 2\n    rsum = n\n    for c in cols:\n        colsum += c * (cols[c] - 1)\n        csum += cols[c] - 1\n    for r in rows:\n        rowsum += r * (rows[r] - 1)\n        rsum += rows[r] - 1\n    currsum += (rowsum - rsum) * m * csum + rsum * colsum\n    currsum %= M\n    print(currsum)", "mod = pow(10, 9) + 7\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    [n, m, k] = input().split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    a = dict([])\n    b = dict([])\n    for _ in range(0, k):\n        [q, x, v] = input().split()\n        q = int(q)\n        x = int(x)\n        v = int(v)\n        if q == 0:\n            if x in a:\n                a[x] *= v\n                a[x] = a[x] % mod\n            else:\n                a[x] = v\n        elif x in b:\n            b[x] *= v\n            b[x] = b[x] % mod\n        else:\n            b[x] = v\n    s_a = n\n    s_b = m\n    for i in a:\n        s_a += a[i] - 1\n    for i in b:\n        s_b += b[i] - 1\n    w_a = (n * n + n) / 2\n    w_b = (m * m + m) / 2\n    w_a = int(w_a)\n    w_b = int(w_b)\n    w_a = w_a % mod\n    w_b = w_b % mod\n    for i in a:\n        w_a += i * (a[i] - 1)\n        w_a = w_a % mod\n    for i in b:\n        w_b += i * (b[i] - 1)\n        w_b = w_b % mod\n    print((m * w_a * s_b + s_a * w_b - m * s_a * s_b) % mod)"]