["for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    ct = 0\n    for c in set(s):\n        rts = {0: 1}\n        rt = 0\n        for d in s:\n            rt += 1 if c == d else -1\n            ct += rts.get(rt - k, 0)\n            rts[rt] = rts.get(rt, 0) + 1\n        if 0 < -k <= n:\n            char_ct = s[:-k].count(c)\n            if char_ct == 0:\n                ct -= 1\n            for i in range(-k, n):\n                if s[i] == c:\n                    char_ct += 1\n                if s[i + k] == c:\n                    char_ct -= 1\n                if char_ct == 0:\n                    ct -= 1\n    print(ct)", "from sys import stdin, stdout\nfrom collections import defaultdict\ninput = stdin.readline\nr_int = lambda : int(input())\nm_int = lambda : map(int, input().split())\nl_int = lambda : list(map(int, input()).split())\n\ndef solve():\n    (n, k) = m_int()\n    text = input().strip()\n    acc = 0\n    for c in set(text):\n        counts = defaultdict(int)\n        counts[0] = 1\n        score = 0\n        for x in text:\n            if x == c:\n                score += 1\n            else:\n                score -= 1\n            acc += counts[score - k]\n            counts[score] += 1\n        if 0 < -k <= n:\n            c_cnt = 0\n            cumul = [0]\n            for x in text:\n                if x == c:\n                    c_cnt += 1\n                cumul.append(c_cnt)\n            i = 0\n            while i - k <= n:\n                if cumul[i] == cumul[i - k]:\n                    acc -= 1\n                i += 1\n    print(acc)\n\ndef main():\n    n_cases = r_int()\n    for _ in range(n_cases):\n        solve()\nmain()", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    ct = 0\n    for c in set(s):\n        rts = {0: 1}\n        rt = 0\n        for d in s:\n            rt += 1 if c == d else -1\n            ct += rts.get(rt - k, 0)\n            rts[rt] = rts.get(rt, 0) + 1\n        if 0 < -k <= n:\n            char_ct = s[:-k].count(c)\n            if char_ct == 0:\n                ct -= 1\n            for i in range(-k, n):\n                if s[i] == c:\n                    char_ct += 1\n                if s[i + k] == c:\n                    char_ct -= 1\n                if char_ct == 0:\n                    ct -= 1\n    print(ct)", "import string\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    for c in string.ascii_lowercase:\n        (mp, pref) = ({}, 0)\n        to_insert = [1]\n        for i in range(n):\n            if s[i] == c:\n                pref += 1\n                for x in to_insert:\n                    if x in mp:\n                        mp[x] += 1\n                    else:\n                        mp[x] = 1\n                to_insert.clear()\n            if 2 * pref - i - k in mp:\n                ans += mp[2 * pref - i - k]\n            to_insert.append(2 * pref - i)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    ct = 0\n    for c in set(s):\n        rts = {0: 1}\n        rt = 0\n        for d in s:\n            rt += 1 if c == d else -1\n            ct += rts.get(rt - k, 0)\n            rts[rt] = rts.get(rt, 0) + 1\n        if 0 < -k <= n:\n            char_ct = s[:-k].count(c)\n            if char_ct == 0:\n                ct -= 1\n            for i in range(-k, n):\n                if s[i] == c:\n                    char_ct += 1\n                if s[i + k] == c:\n                    char_ct -= 1\n                if char_ct == 0:\n                    ct -= 1\n    print(ct)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    ct = 0\n    for c in set(s):\n        rts = {0: 1}\n        rt = 0\n        for d in s:\n            rt += 1 if c == d else -1\n            ct += rts.get(rt - k, 0)\n            rts[rt] = rts.get(rt, 0) + 1\n        if 0 < -k <= n:\n            char_ct = s[:-k].count(c)\n            if char_ct == 0:\n                ct -= 1\n            for i in range(-k, n):\n                if s[i] == c:\n                    char_ct += 1\n                if s[i + k] == c:\n                    char_ct -= 1\n                if char_ct == 0:\n                    ct -= 1\n    print(ct)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    ct = 0\n    for c in set(s):\n        rts = {0: 1}\n        rt = 0\n        for d in s:\n            rt += 1 if c == d else -1\n            ct += rts.get(rt - k, 0)\n            rts[rt] = rts.get(rt, 0) + 1\n        if 0 < -k <= n:\n            char_ct = s[:-k].count(c)\n            if char_ct == 0:\n                ct -= 1\n            for i in range(-k, n):\n                if s[i] == c:\n                    char_ct += 1\n                if s[i + k] == c:\n                    char_ct -= 1\n                if char_ct == 0:\n                    ct -= 1\n    print(ct)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    ct = 0\n    for c in set(s):\n        rts = {0: 1}\n        rt = 0\n        for d in s:\n            rt += 1 if c == d else -1\n            ct += rts.get(rt - k, 0)\n            rts[rt] = rts.get(rt, 0) + 1\n        if 0 < -k <= n:\n            char_ct = s[:-k].count(c)\n            if char_ct == 0:\n                ct -= 1\n            for i in range(-k, n):\n                if s[i] == c:\n                    char_ct += 1\n                if s[i + k] == c:\n                    char_ct -= 1\n                if char_ct == 0:\n                    ct -= 1\n    print(ct)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    s = input()\n    az = ''.join([chr(c) for c in range(97, 97 + 26)])\n    res = 0\n    for c in range(26):\n        m = {}\n        add = [1]\n        val = 1\n        for i in range(N):\n            if s[i] == az[c]:\n                val += 2\n                for x in add:\n                    m[x] = m.get(x, 0) + 1\n                add = []\n            val -= 1\n            if val - K in m.keys():\n                res += m[val - K]\n            add.append(val)\n    print(res)", "def solve(n, k, string, ans):\n    for c in set((i for i in string)):\n        (dictionary, freq, lst) = ({}, 0, [1])\n        for i in range(n):\n            if string[i] == c:\n                freq += 1\n                for x in lst:\n                    if x in dictionary:\n                        dictionary[x] += 1\n                    else:\n                        dictionary[x] = 1\n                lst.clear()\n            if 2 * freq - i - k in dictionary:\n                ans += dictionary[2 * freq - i - k]\n            lst.append(2 * freq - i)\n    return ans\nfor _ in range(int(input())):\n    print(solve(*map(int, input().split()), input(), 0))", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    ct = 0\n    for c in set(s):\n        rts = {0: 1}\n        rt = 0\n        for d in s:\n            rt += 1 if c == d else -1\n            ct += rts.get(rt - k, 0)\n            rts[rt] = rts.get(rt, 0) + 1\n        if 0 < -k <= n:\n            char_ct = s[:-k].count(c)\n            if char_ct == 0:\n                ct -= 1\n            for i in range(-k, n):\n                if s[i] == c:\n                    char_ct += 1\n                if s[i + k] == c:\n                    char_ct -= 1\n                if char_ct == 0:\n                    ct -= 1\n    print(ct)", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = input()\n    res = 0\n    for i in range(26):\n        d = dict()\n        d[0] = 1\n        f = 0\n        for j in range(n):\n            if ord(a[j]) - ord('a') == i:\n                f += 1\n            k1 = 2 * f - (j + 1)\n            di = k1 - k\n            if d.get(di, 0) != 0:\n                res += d[di]\n            if d.get(k1, 0) == 0:\n                d[k1] = 1\n            else:\n                d[k1] += 1\n        d.clear()\n    if k < 0:\n        l = -1 * k\n        ans = 0\n        for i in range(26):\n            (f, r, fr) = (0, 0, 0)\n            while r < l:\n                if ord(a[r]) - ord('a') == i:\n                    fr += 1\n                r += 1\n            while r <= n:\n                if fr == 0:\n                    ans += 1\n                if r < n:\n                    if ord(a[r]) - ord('a') == i:\n                        fr += 1\n                    if ord(a[f]) - ord('a') == i:\n                        fr -= 1\n                r += 1\n                f += 1\n        res -= ans\n    print(res)\n    t -= 1"]