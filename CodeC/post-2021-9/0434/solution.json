["import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    (x, ans) = (0, 0)\n    for i in range(n):\n        x = x ^ l[i]\n        if x in s:\n            ans += 1\n            s = {l[i]}\n            x = l[i]\n        else:\n            s.add(x)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {0}\n    ans = 0\n    pref = 0\n    for x in a:\n        pref ^= x\n        if pref in p:\n            ans += 1\n            pref = x\n            p = {x}\n        else:\n            p.add(pref)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {0}\n    ans = 0\n    pref = 0\n    for x in a:\n        pref ^= x\n        if pref in p:\n            ans += 1\n            pref = x\n            p = {x}\n        else:\n            p.add(pref)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = {0}\n    p = 0\n    m = 0\n    for i in a:\n        p = p ^ i\n        if p in s:\n            m += 1\n            p = i\n            s = {i}\n        else:\n            s.add(p)\n    print(m)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = {0}\n    p = 0\n    m = 0\n    for i in a:\n        p = p ^ i\n        if p in s:\n            m += 1\n            p = i\n            s = {i}\n        else:\n            s.add(p)\n    print(m)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    temp = {0}\n    count = 0\n    m = 0\n    for i in l:\n        m ^= i\n        if m in temp:\n            count += 1\n            m = i\n            temp = {i}\n        else:\n            temp.add(m)\n    print(count)", "t = int(input())\nfor s in range(t):\n    a = int(input())\n    arr = [int(i) for i in input().split()]\n    s = set()\n    s.add(0)\n    x = 0\n    ans = 0\n    for i in arr:\n        x = x ^ i\n        if x in s:\n            ans += 1\n            s.clear()\n        s.add(x)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (k, t) = (0, 0)\n    m = {}\n    m[0] = 1\n    for j in l:\n        t ^= j\n        if t in m and m[t] == 1:\n            k += 1\n            m.clear()\n        m[t] = 1\n    print(k)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    (temp, ans) = (0, 0)\n    dic[0] = 1\n    for i in range(n):\n        temp ^= a[i]\n        if temp in dic and dic[temp] == 1:\n            ans += 1\n            dic.clear()\n        dic[temp] = 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    temp = 0\n    d[0] = 1\n    ans = 0\n    for i in range(n):\n        temp ^= a[i]\n        if temp in d:\n            ans += 1\n            d.clear()\n        d[temp] = 1\n    print(ans)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    a = 0\n    temp = 0\n    d = {}\n    d[0] = 1\n    for i in A:\n        temp ^= i\n        if temp in d and d[temp] == 1:\n            a += 1\n            d = 0\n            d = {}\n        d[temp] = 1\n    print(a)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    temp = 0\n    d = {}\n    d[0] = 1\n    for i in l:\n        temp ^= i\n        if temp in d and d[temp] == 1:\n            ans += 1\n            d = {}\n        d[temp] = 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {0}\n    ans = 0\n    pref = 0\n    for x in a:\n        pref ^= x\n        if pref in p:\n            ans += 1\n            pref = x\n            p = {x}\n        else:\n            p.add(pref)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    temp = 0\n    d = {}\n    d[0] = 1\n    for i in l:\n        temp ^= i\n        if temp in d and d[temp] == 1:\n            ans += 1\n            d = {}\n        d[temp] = 1\n    print(ans)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    (y, xor) = (0, 0)\n    d = set([0])\n    for i in a:\n        if xor ^ i in d:\n            xor = 0\n            y += 1\n            d = set([0])\n        else:\n            xor = xor ^ i\n            d.add(xor)\n    print(y)\n    t -= 1", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    a = 0\n    x = 0\n    Sum1 = set([0])\n    for i in A:\n        if x ^ i in Sum1:\n            a += 1\n            x = 0\n            Sum1 = set([0])\n        else:\n            x = x ^ i\n            Sum1.add(x)\n    print(a)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    (ans, xor) = (0, 0)\n    xorSums = set([0])\n    for i in A:\n        if xor ^ i in xorSums:\n            ans += 1\n            xor = 0\n            xorSums = set([0])\n        else:\n            xor = xor ^ i\n            xorSums.add(xor)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (ans, xor) = (0, 0)\n    xorSums = set([0])\n    for i in a:\n        if xor ^ i in xorSums:\n            ans += 1\n            xor = 0\n            xorSums = set([0])\n        else:\n            xor = xor ^ i\n            xorSums.add(xor)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (k, t) = (0, 0)\n    m = {}\n    m[0] = True\n    for j in l:\n        t ^= j\n        if t in m and m[t] == True:\n            k += 1\n            m.clear()\n        m[t] = True\n    print(k)", "t = int(input())\nfor i in range(t):\n    a = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    b = 0\n    x = 0\n    for i in l:\n        x ^= i\n        if x in s:\n            b += 1\n            x = i\n            s = {i}\n        else:\n            s.add(x)\n    print(b)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    a = 0\n    res = 0\n    for i in l:\n        a ^= i\n        if a in s:\n            res += 1\n            a = i\n            s = {i}\n        else:\n            s.add(a)\n    print(res)", "for test in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (ans, temp) = (0, 0)\n    d = {}\n    d[0] = True\n    for i in l:\n        temp ^= i\n        if temp in d and d[temp] == True:\n            ans += 1\n            d = {}\n        d[temp] = True\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    temp = 0\n    c = 0\n    d = {}\n    d[0] = 1\n    for i in range(n):\n        temp ^= a[i]\n        if temp in d:\n            c += 1\n            d.clear()\n        d[temp] = 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    temp = 0\n    ans = 0\n    d = {0: True}\n    for i in range(n):\n        temp ^= a[i]\n        if temp in d:\n            ans += 1\n            d = dict()\n        d[temp] = True\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    temp = 0\n    c = 0\n    d = {}\n    d[0] = 1\n    for i in range(n):\n        temp ^= a[i]\n        if temp in d:\n            c += 1\n            d.clear()\n        d[temp] = 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    a = 0\n    res = 0\n    for i in l:\n        a ^= i\n        if a in s:\n            res += 1\n            a = i\n            s = {i}\n        else:\n            s.add(a)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {0}\n    ans = 0\n    pref = 0\n    for x in a:\n        pref ^= x\n        if pref in p:\n            ans += 1\n            pref = x\n            p = {x}\n        else:\n            p.add(pref)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    count = 0\n    p = 0\n    for i in range(n):\n        p = p ^ l[i]\n        if p not in s:\n            s.add(p)\n        else:\n            count += 1\n            s = {p}\n    print(count)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    curr = 0\n    ans = 0\n    d = {0: True}\n    for i in range(len(arr)):\n        curr ^= arr[i]\n        if curr in d:\n            ans += 1\n            d = dict()\n        d[curr] = True\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    c = 0\n    p = 0\n    for i in l:\n        p ^= i\n        if p in s:\n            c += 1\n            p = i\n            s = {i}\n        else:\n            s.add(p)\n    print(c)", "def Solution(n, a):\n    count = 0\n    temp = {0}\n    p = 0\n    for i in range(n):\n        p = p ^ a[i]\n        if p not in temp:\n            temp.add(p)\n        else:\n            count += 1\n            temp = {p}\n    return count\ntest = int(input())\nfor t in range(test):\n    n = int(input())\n    a = tuple(map(int, input().split()))\n    print(Solution(n, a))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = {0}\n    c = 0\n    p = 0\n    for i in a:\n        p ^= i\n        if p in s:\n            c += 1\n            p = i\n            s = {i}\n        else:\n            s.add(p)\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    c = 0\n    p = 0\n    for i in l:\n        p ^= i\n        if p in s:\n            c += 1\n            p = i\n            s = {i}\n        else:\n            s.add(p)\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    c = 0\n    p = 0\n    for i in l:\n        p ^= i\n        if p in s:\n            c += 1\n            p = i\n            s = {i}\n        else:\n            s.add(p)\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {0}\n    c = 0\n    p = 0\n    for i in l:\n        p ^= i\n        if p in s:\n            c += 1\n            p = i\n            s = {i}\n        else:\n            s.add(p)\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = {0}\n    pref = 0\n    ans = 0\n    for x in l:\n        pref ^= x\n        if pref in p:\n            ans += 1\n            pref = x\n            p = {x}\n        else:\n            p.add(pref)\n    print(ans)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    n = inp()\n    l = li()\n    s = {0}\n    t = 0\n    c = 0\n    for i in l:\n        t ^= i\n        if t in s:\n            c += 1\n            s.clear()\n        s.add(t)\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = 0\n    ans = 0\n    d = {0: True}\n    for i in range(n):\n        temp ^= arr[i]\n        if temp in d:\n            ans += 1\n            d = dict()\n        d[temp] = True\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    temp = 0\n    ans = 0\n    d[0] = 1\n    for i in range(n):\n        temp ^= arr[i]\n        if temp in d:\n            ans += 1\n            d = {}\n        d[temp] = 1\n    print(ans)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    y = list(map(int, input().split()))\n    k = 0\n    c = 0\n    t = {0}\n    for i in y:\n        k ^= i\n        if k in t:\n            c += 1\n            k = i\n            t = {i}\n        else:\n            t.add(k)\n    print(c)", "from collections import defaultdict\n\nclass T:\n\n    def solve(self):\n        n = int(input())\n        a = list(map(int, input().split()))\n        d = defaultdict(int)\n        ans = 0\n        xor = 0\n        d[0] = 1\n        for i in range(n):\n            xor ^= a[i]\n            if xor in d:\n                ans += 1\n                d.clear()\n            d[xor] += 1\n        return ans\nfor t in range(int(input())):\n    obj = T()\n    print(obj.solve())", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    y = list(map(int, input().split()))\n    k = 0\n    c = 0\n    t = {0}\n    for i in y:\n        k ^= i\n        if k in t:\n            c += 1\n            k = i\n            t = {i}\n        else:\n            t.add(k)\n    print(c)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    y = list(map(int, input().split()))\n    k = 0\n    c = 0\n    t = {0}\n    for i in y:\n        k ^= i\n        if k in t:\n            c += 1\n            k = i\n            t = {i}\n        else:\n            t.add(k)\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    pset = {0}\n    p = 0\n    c = 0\n    for i in b:\n        p ^= i\n        if p in pset:\n            c += 1\n            p = i\n            pset = {i}\n        else:\n            pset.add(p)\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    pset = {0}\n    hprev = 0\n    count = 0\n    for i in b:\n        hprev ^= i\n        if hprev in pset:\n            count += 1\n            hprev = i\n            pset = {hprev}\n        else:\n            pset.add(hprev)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    pset = {0}\n    hprev = 0\n    count = 0\n    for i in b:\n        hprev ^= i\n        if hprev in pset:\n            count += 1\n            hprev = i\n            pset = {hprev}\n        else:\n            pset.add(hprev)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    pset = {0}\n    hprev = 0\n    count = 0\n    for i in b:\n        hprev ^= i\n        if hprev in pset:\n            count += 1\n            hprev = i\n            pset = {hprev}\n        else:\n            pset.add(hprev)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {0}\n    ans = 0\n    pref = 0\n    for x in a:\n        pref ^= x\n        if pref in p:\n            ans += 1\n            pref = x\n            p = {x}\n        else:\n            p.add(pref)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {0}\n    ans = 0\n    pref = 0\n    for x in a:\n        pref ^= x\n        if pref in p:\n            ans += 1\n            pref = x\n            p = {x}\n        else:\n            p.add(pref)\n    print(ans)", "from collections import defaultdict\nfrom collections import defaultdict, deque, Counter\nfrom itertools import groupby, accumulate, cycle, chain\nfrom bisect import bisect_left, bisect_right\nfrom math import inf\nfrom string import ascii_lowercase, ascii_uppercase\nfrom copy import deepcopy\nfrom heapq import heapify, heappush, heappop\nfrom functools import lru_cache\nimport re\nT = int(input())\nvt = lambda t: [t(num) for num in input().split()]\nit = lambda : vt(int)[0]\nst = lambda a: a.sort()\n\ndef run_tc():\n    n = it()\n    arr = vt(int)\n    ans = x = 0\n    s = set([0])\n    for i in range(n):\n        x ^= arr[i]\n        if x in s:\n            ans += 1\n            x = arr[i]\n            s = set([x])\n        else:\n            s.add(x)\n    return ans\nfor _ in range(T):\n    print(run_tc())", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    (ans, pref) = (0, 0)\n    s = {0}\n    for i in l:\n        pref ^= i\n        if pref in s:\n            ans += 1\n            pref = i\n            s = {pref}\n        else:\n            s.add(pref)\n    print(ans)", "from operator import xor\nR = lambda : map(int, input().split())\n(t,) = R()\nspeed = lambda d, t: float(d) / t\nfor _ in range(t):\n    (n,) = R()\n    arr = list(R())\n    for i in range(1, n):\n        arr[i] ^= arr[i - 1]\n    ans = 0\n    myMap = {0}\n    for val in arr:\n        if val in myMap:\n            ans += 1\n            myMap = {val}\n        else:\n            myMap.add(val)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(1, n):\n        arr[i] ^= arr[i - 1]\n    s = {0}\n    res = 0\n    for e in arr:\n        if e in s:\n            res += 1\n            s = {e}\n        else:\n            s.add(e)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    for i in range(1, n):\n        arr[i] ^= arr[i - 1]\n    s = {0}\n    res = 0\n    for e in arr:\n        if e in s:\n            res += 1\n            s.clear()\n        s.add(e)\n    print(res)", "def main():\n    T = int(input())\n    for counter in range(T):\n        ans = 0\n        n = int(input())\n        a = list(map(int, input().split()))\n        present = {0}\n        prefix = 0\n        for x in a:\n            prefix ^= x\n            if prefix in present:\n                ans += 1\n                prefix = x\n                present = {x}\n            else:\n                present.add(prefix)\n        print(ans)\nmain()", "def ans(arr):\n    k = {0}\n    current = 0\n    c = 0\n    for y in arr:\n        xored = current ^ y\n        if xored in k:\n            c += 1\n            k = {y}\n            current = y\n        else:\n            current = xored\n            k.add(xored)\n    return c\ntest_cases = int(input())\nwhile test_cases != 0:\n    d_ = input()\n    d = list(map(int, input().split()))\n    print(ans(d))\n    test_cases -= 1", "def ans(arr):\n    k = {0}\n    current = 0\n    c = 0\n    for y in arr:\n        xored = current ^ y\n        if xored in k:\n            c += 1\n            k = {y}\n            current = y\n        else:\n            current = xored\n            k.add(xored)\n    return c\ntest_cases = int(input())\nwhile test_cases != 0:\n    d_ = input()\n    d = list(map(int, input().split()))\n    print(ans(d))\n    test_cases -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set()\n    s.add(0)\n    x = 0\n    ans = 0\n    for i in range(n):\n        x = x ^ a[i]\n        if x in s:\n            ans += 1\n            x = a[i]\n            s = set()\n            s.add(x)\n        else:\n            s.add(x)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    l = list(map(int, input().split(' ')))\n    count = 0\n    v = 0\n    d = {}\n    d[v] = 0\n    for i in l:\n        v ^= i\n        if v in d:\n            count += 1\n            d = {}\n            v = 0\n        d[v] = 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    x = 0\n    d = {}\n    d[0] = 1\n    for i in a:\n        x ^= i\n        if x in d:\n            ans += 1\n            d = {}\n            x = 0\n        d[x] = 1\n    print(ans)", "def solve(n, arr):\n    lookup = {0}\n    curr = 0\n    res = 0\n    for num in arr:\n        curr ^= num\n        if num == 0 or curr in lookup:\n            lookup = {0}\n            curr = 0\n            res += 1\n            continue\n        lookup.add(curr)\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    dic = {}\n    c = 0\n    for i in range(n):\n        x = x ^ a[i]\n        if x in dic or a[i] == 0 or x == 0:\n            c += 1\n            dic = {}\n            x = 0\n        else:\n            dic[x] = 1\n    print(c)", "import time\nimport sys\nimport math\ninput = sys.stdin.readline\n(mod, infi) = (1000000007, sys.maxsize)\nfrom collections import deque, Counter, defaultdict as dd\nfrom heapq import heappop, heappush, heapify\nfrom itertools import accumulate\nfrom functools import lru_cache, reduce\nfrom operator import mul, add, sub, truediv, floordiv, lt, le, eq, ne, gt, xor, concat, getitem, pow, lshift\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nnormal = lambda : input().split()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nlogg = lambda a, b: math.log2(a) / math.log2(b)\nacc = lambda x: list(accumulate(x))\nsign = lambda x, y: x >= 0 and y >= 0 or (x < 0 and y < 0)\nT = inty()\nfor _ in range(T):\n    n = inty()\n    a = listy()\n    seen = set()\n    xor = 0\n    res = 0\n    for num in a:\n        xor ^= num\n        if xor in seen or num == 0 or xor == 0:\n            res += 1\n            xor = 0\n            seen.clear()\n        else:\n            seen.add(xor)\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    curx = 0\n    s = {0}\n    for j in range(n):\n        curx ^= arr[j]\n        if curx in s:\n            ans += 1\n            curx = arr[j]\n            s = {arr[j]}\n        else:\n            s.add(curx)\n    print(ans)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    arr = [int(_) for _ in input().split()]\n    prefix = [0]\n    ans = curr_xor = 0\n    for i in range(n):\n        curr_xor ^= arr[i]\n        if curr_xor in prefix:\n            ans += 1\n            curr_xor = arr[i]\n            prefix = [arr[i]]\n        else:\n            prefix.append(curr_xor)\n    print(ans)", "for _ in range(int(input())):\n    k = int(input())\n    l = list(map(int, input().split()))\n    kl = {0: 1}\n    cnt = 0\n    rmn = 0\n    for i in l:\n        rmn ^= i\n        if rmn in kl:\n            kl = {0: 1}\n            cnt += 1\n            rmn = 0\n        else:\n            kl[rmn] = 1\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    check = {0}\n    xor = 0\n    count = 0\n    for i in arr:\n        xor ^= i\n        if xor in check:\n            count += 1\n            xor = i\n            check = {i}\n        else:\n            check.add(xor)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = 0\n    s = set()\n    s.add(0)\n    ans = 0\n    for i in range(n):\n        x = x ^ l[i]\n        if x in s:\n            ans += 1\n            x = l[i]\n            s = set([l[i]])\n        else:\n            s.add(x)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = 0\n    s = set()\n    s.add(0)\n    ans = 0\n    for i in range(n):\n        x = x ^ l[i]\n        if x in s:\n            ans += 1\n            x = l[i]\n            s = set([l[i]])\n        else:\n            s.add(x)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {0}\n    ans = 0\n    pref = 0\n    for x in a:\n        pref ^= x\n        if pref in p:\n            ans += 1\n            pref = x\n            p = {x}\n        else:\n            p.add(pref)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    xor = 0\n    set_ = set()\n    set_ = {xor}\n    count = 0\n    for i in range(0, n):\n        xor = a[i] ^ xor\n        if xor in set_:\n            xor = 0\n            count += 1\n            set_.clear()\n            set_.add(xor)\n        else:\n            set_.add(xor)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = {0}\n    ans = 0\n    pre = 0\n    for x in a:\n        pre ^= x\n        if pre in p:\n            ans += 1\n            pre = x\n            p = {x}\n        else:\n            p.add(pre)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = 0\n    c1 = 0\n    p = [0]\n    for i in l:\n        c1 ^= i\n        if c1 in p:\n            c += 1\n            c1 = i\n            p = [i]\n        else:\n            p.append(c1)\n    print(c)", "for _ in range(int(input())):\n    xrs = set([0])\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    prv = 0\n    ct = 0\n    for i in range(n):\n        xr = prv ^ a[i]\n        if xr in xrs:\n            ct += 1\n            xrs = set([xr])\n        else:\n            xrs.add(xr)\n        prv = xr\n    print(ct)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set()\n    s.add(0)\n    x = 0\n    ans = 0\n    for i in range(n):\n        x = x ^ a[i]\n        if x in s:\n            ans += 1\n            x = a[i]\n            s = set()\n            s.add(x)\n        else:\n            s.add(x)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (res, A) = (0, 0)\n    s = set()\n    s.add(A)\n    for i in a:\n        A = A ^ i\n        if A in s:\n            res += 1\n            A = 0\n            s.clear()\n        s.add(A)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    xor = 0\n    set1 = set()\n    set1.add(0)\n    for i in arr:\n        xor = xor ^ i\n        if xor in set1:\n            count += 1\n            xor = 0\n            set1.clear()\n        set1.add(xor)\n    print(count)", "import sys\nfrom itertools import islice\nfor s in islice(sys.stdin, 2, None, 2):\n    r = t = 0\n    a = {0}\n    for x in s.split():\n        t ^= int(x)\n        if t in a:\n            r += 1\n            t = 0\n            a = {0}\n        a.add(t)\n    print(r)", "import sys\nfrom itertools import islice\nfor s in islice(sys.stdin, 2, None, 2):\n    r = t = 0\n    a = {0}\n    for x in map(int, s.split()):\n        t ^= x\n        if t in a:\n            r += 1\n            t = 0\n            a = {0}\n        a.add(t)\n    print(r)", "for test in range(int(input())):\n    n = int(input())\n    a = [int(ai) for ai in input().split()]\n    switched = 0\n    seen = {0}\n    xor = 0\n    for i in range(n):\n        xor ^= a[i]\n        if xor in seen:\n            switched += 1\n            seen = {0}\n            xor = 0\n        seen.add(xor)\n    print(switched)", "t = int(input())\n\ndef fn(arr):\n    l = len(arr)\n    stack = []\n    operations = 0\n    for i in range(l):\n        if arr[i] == 0:\n            operations += 1\n            stack = []\n        elif arr[i] in stack:\n            operations += 1\n            stack = []\n        else:\n            for j in range(len(stack)):\n                stack[j] = stack[j] ^ arr[i]\n            stack.append(arr[i])\n    print(operations)\nfor _ in range(t):\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    fn(arr1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = set()\n    s.add(0)\n    (ct, xrl) = (0, 0)\n    for i in range(n):\n        xrl ^= arr[i]\n        if list(s).count(xrl) >= 1:\n            s.clear()\n            ct += 1\n            s.add(0)\n            xrl = 0\n        s.add(xrl)\n    print(ct)", "import random\nimport math\nfrom collections import defaultdict, Counter, deque, OrderedDict\nfrom functools import lru_cache\nimport bisect\nimport heapq\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\nclass SegmentTree:\n\n    def __init__(self, nums):\n        self._size = len(nums)\n        self._tree = [0] * (4 * self._size)\n        self.build(nums)\n\n    def build(self, a, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if lo == hi:\n            self._tree[v] = a[lo]\n        else:\n            mi = (lo + hi) // 2\n            self.build(a, 2 * v, lo, mi)\n            self.build(a, 2 * v + 1, mi + 1, hi)\n            self._tree[v] = self._tree[2 * v] + self._tree[2 * v + 1]\n\n    def update(self, pos, val, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if lo == hi:\n            self._tree[v] = val\n        else:\n            mi = (lo + hi) // 2\n            if pos <= mi:\n                self.update(pos, val, 2 * v, lo, mi)\n            else:\n                self.update(pos, val, 2 * v + 1, mi + 1, hi)\n            self._tree[v] = self._tree[2 * v] + self._tree[2 * v + 1]\n\n    def query(self, l, h, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if l > h:\n            return 0\n        elif l == lo and h == hi:\n            return self._tree[v]\n        else:\n            mi = (lo + hi) // 2\n            return self.query(l, min(mi, h), 2 * v, lo, mi) + self.query(max(mi + 1, l), h, 2 * v + 1, mi + 1, hi)\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parents = list(range(n))\n\n    def find(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            self.parents[x] = y\ndire = [0, 1, 0, -1, 0]\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef case(t):\n    print('Case #{}:'.format(t), end=' ')\nRANDOM = random.randrange(2 ** 62)\n\ndef Wrapper(x):\n    return x ^ RANDOM\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    mapp = {}\n    x = 0\n    ans = set()\n    for i in range(n):\n        x ^= a[i]\n        if x in mapp or a[i] == 0 or x == 0:\n            ans.add(i)\n            x = 0\n            mapp = {}\n        else:\n            mapp[x] = i\n    print(len(ans))\nfor t in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    res = 0\n    d[0] = 1\n    curr = 0\n    for i in range(len(arr)):\n        curr = curr ^ arr[i]\n        if curr in d:\n            res += 1\n            d = {}\n            curr = 0\n        d[curr] = 0\n    print(res)", "from math import gcd, sqrt, ceil, floor, log10, log2\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(1000000000.0) + 7\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\nenum = lambda itr: enumerate(itr)\n\ndef toposort(graph, n):\n    degree = [0] * n\n    for node in graph:\n        for adj in graph[node]:\n            degree[adj] += 1\n    bfs_queue = [node for node in range(n) if not degree[node]]\n    for node in bfs_queue:\n        for adj in graph[node]:\n            degree[adj] -= 1\n            if not degree[adj]:\n                bfs_queue.append(adj)\n    return (bfs_queue, degree)\n\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for adj in graph[node]:\n        if adj in visited:\n            continue\n        dfs(graph, adj, visited)\n\ndef solve(*args, **kwargs):\n    (n, arr) = args\n    cnt = res = 0\n    hshst = {0}\n    for (idx, ele) in enum(arr):\n        cnt ^= ele\n        if cnt in hshst:\n            res += 1\n            hshst.clear()\n            cnt = 0\n            hshst.add(0)\n        hshst.add(cnt)\n    return res\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        arg1 = inp(int)\n        arg3 = inp_vars(int, SPACE)\n        res = solve(*(arg1, arg3))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep='\\n')\n        else:\n            print(res)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    iop = 0\n    st = set()\n    st.add(0)\n    for i in range(n):\n        iop ^= a[i]\n        if list(st).count(iop) >= 1:\n            st = set()\n            count += 1\n            st.add(0)\n            iop = 0\n        set(st)\n        st.add(iop)\n    print(count)", "T = int(input())\nfor _ in range(T):\n    st = set([])\n    st.add(0)\n    flag = 0\n    N = int(input())\n    arr = list(map(int, input().split()))\n    xor1 = 0\n    marker = 5000\n    c = 0\n    bool = True\n    marker = flag\n    for i in range(N):\n        flag += 1\n        xor1 ^= arr[i]\n        marker -= flag * 2\n        if xor1 in st:\n            bool = False\n            st.clear()\n            c += 1\n            st.add(0)\n            marker -= 1\n            xor1 = 0\n        bool = False\n        st.add(xor1)\n    bool = True\n    marker += flag\n    print(str(c))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set([0])\n    ans = 0\n    count = 0\n    for i in range(n):\n        count = count ^ a[i]\n        if count in s:\n            ans += 1\n            s = set([0])\n            count = 0\n        s.add(count)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    x = 0\n    s = set()\n    s.add(0)\n    for i in range(n):\n        x = x ^ arr[i]\n        if x in s:\n            s = set()\n            ans += 1\n            s.add(0)\n            x = 0\n        s.add(x)\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom collections import Counter, deque, defaultdict\nimport math\nimport heapq\nip = sys.stdin.readline\nop = sys.stdout.write\nt = int(ip())\nres = []\nfor _ in range(t):\n    n = int(input())\n    nums = [int(x) for x in ip().split()]\n    seen = set()\n    val = 0\n    seen.add(0)\n    count = 0\n    for num in nums:\n        val ^= num\n        if val in seen:\n            count += 1\n            seen.clear()\n            seen.add(0)\n            val = 0\n        seen.add(val)\n    res.append(count)\nfor val in res:\n    op(str(val) + '\\n')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    occs = set()\n    occs.add(0)\n    res = xorofone = 0\n    for i in range(n):\n        xorofone ^= arr[i]\n        if xorofone in occs:\n            occs.clear()\n            res += 1\n            occs.add(0)\n            xorofone = 0\n        occs.add(xorofone)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    ans = 0\n    prev = 0\n    m[0] = 1\n    for i in range(len(a)):\n        prev = prev ^ a[i]\n        if prev in m:\n            prev = 0\n            m.clear()\n            ans += 1\n        m[prev] = 1\n    print(ans)", "def haxorzro(A, lstart, r):\n    xor = 0\n    for l in range(r, lstart - 1, -1):\n        xor ^= A[l]\n        if not xor:\n            return True\n    else:\n        return False\n\ndef minops(A, N):\n    lstart = 0\n    ops = 0\n    while True:\n        for r in range(lstart, N):\n            if haxorzro(A, lstart, r):\n                break\n        else:\n            break\n        lstart = r + 1\n        ops += 1\n    return ops\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = tuple(map(int, input().split()))\n    print(minops(A, N))", "for _ in range(int(input())):\n    size = int(input())\n    array = list(map(int, input().split()))\n    maps = set()\n    ans = 0\n    xors = 0\n    for i in array:\n        xors ^= i\n        if xors == 0 or xors in maps:\n            ans = ans + 1\n            maps = set()\n            xors = 0\n        else:\n            maps.add(xors)\n    print(ans)"]