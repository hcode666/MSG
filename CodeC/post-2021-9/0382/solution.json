["mod = 10 ** 9 + 7\nfor i in range(int(input())):\n    n = int(input())\n    nlist = list(map(int, input().split()))\n    d = {}\n    for i in nlist:\n        d[i] = d.get(i, 0) + 1\n    ans = 1\n    for i in d:\n        ans = ans * (d[i] + 1) % mod\n    print(ans - 1)", "mod = 10 ** 9 + 7\nfor i in range(int(input())):\n    n = int(input())\n    nlist = list(map(int, input().split()))\n    d = {}\n    for i in nlist:\n        d[i] = d.get(i, 0) + 1\n    ans = 1\n    for i in d:\n        ans = ans * (d[i] + 1) % mod\n    print(ans - 1)", "mod = 10 ** 9 + 7\nfor i in range(int(input())):\n    n = int(input())\n    nlist = list(map(int, input().split()))\n    d = {}\n    for i in nlist:\n        d[i] = d.get(i, 0) + 1\n    ans = 1\n    for i in d:\n        ans = ans * (d[i] + 1) % mod\n    print(ans - 1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    fact = 1\n    for i in d:\n        fact *= d[i] + 1\n        fact %= 10 ** 9 + 7\n    print(fact - 1)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    n = inp()\n    l = li()\n    d = {}\n    for i in l:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    if len(d) == 1:\n        pr(len(l))\n    else:\n        s = 0\n        for i in d:\n            s = s % mod + s * d[i] % mod + d[i]\n        print(s % mod)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = defaultdict(lambda : 0)\n    a = list(map(int, input().split()))\n    for i in a:\n        d[i] += 1\n    ans = 1\n    for i in d:\n        ans *= d[i] + 1\n        ans %= 1000000007\n    ans -= 1\n    print(ans)", "import sys\nfrom collections import Counter, deque\nfrom math import gcd, sqrt, ceil\n\ndef li():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef si():\n    return sys.stdin.readline().split()\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef ip():\n    return sys.stdin.readline()[:-1]\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    d = Counter()\n    ans = 1\n    inf = 1000000007\n    for i in a:\n        d[i] += 1\n    for i in d.values():\n        ans *= i + 1\n        ans %= inf\n    print((ans - 1) % inf)", "MOD = 10 ** 9 + 7\n\ndef solve(n, arr):\n    arr.sort()\n    res = 1\n    lookup = {arr[0]: 1}\n    for i in range(1, n):\n        if arr[i] != arr[i - 1]:\n            lookup[arr[i]] = res + 1\n            res += res + 1\n        else:\n            res += lookup[arr[i]]\n        res %= MOD\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    j = 0\n    while j < n:\n        c = j\n        while c < n and a[c] == a[j]:\n            c += 1\n        ans *= c - j + 1\n        ans %= mod\n        j = c\n    ans += mod - 1\n    print(ans % mod)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans -= 1\n    print(ans % mod)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans += mod - 1\n    print(ans % mod)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans += mod - 1\n    print(ans % mod)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans += mod - 1\n    print(ans % mod)", "def ans(arr):\n    x = set(arr)\n    hash_map = {}\n    for y in x:\n        hash_map[y] = 0\n    for y in arr:\n        hash_map[y] += 1\n    count = 1\n    for y in hash_map.values():\n        count *= 1 + y\n    return (count - 1) % (10 ** 9 + 7)\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = int(input())\n    d2 = list(map(int, input().split()))\n    print(ans(d2))\n    test_cases -= 1", "for i in range(int(input())):\n    F = 10 ** 9 + 7\n    (D, p, r) = ([], 1, 1)\n    n = int(input())\n    e = input()\n    D = e.split()\n    D.sort()\n    D.append('a')\n    for k in range(n):\n        if D[k] == D[k + 1]:\n            p = p + 1\n        else:\n            r = r * (p + 1)\n            p = 1\n    print(r % F - 1)", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    l = Counter(map(int, input().split()))\n    ans = 1\n    for i in l:\n        ans *= l[i] + 1\n    print((ans - 1) % (10 ** 9 + 7))", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    l = Counter(map(int, input().split()))\n    ans = 1\n    for i in l:\n        ans *= l[i] + 1\n    print((ans - 1) % (10 ** 9 + 7))", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    dic = {}\n    A = list(map(int, input().split()))\n    for i in A:\n        dic[i] = 0\n    for i in A:\n        dic[i] += 1\n    answer = 1\n    for i in dic:\n        answer *= dic[i] + 1\n        answer %= M\n    answer = (answer - 1) % M\n    print(answer)", "M = 1000000007\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = str(input()).split(' ')\n    dicto = {}\n    for j in range(N):\n        dicto[int(A[j])] = dicto.get(int(A[j]), 0) + 1\n    total = 1\n    for (k, v) in dicto.items():\n        total = total * (v + 1) % M\n    print(total - 1)", "import itertools\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    L = list(map(int, input().split()))\n    Sp_L = {}\n    for K in L:\n        Sp_L[K] = 0\n    for K in L:\n        Sp_L[K] += 1\n    G = 1\n    for K in Sp_L.keys():\n        G = G * (Sp_L[K] + 1)\n    G = G - 1\n    print(pow(G, 1, 10 ** 9 + 7))", "import itertools\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    L = list(map(int, input().split()))\n    Sp_L = {}\n    for K in L:\n        Sp_L[K] = 0\n    for K in L:\n        Sp_L[K] += 1\n    G = 1\n    for K in Sp_L.keys():\n        G = G * (Sp_L[K] + 1)\n    G = G - 1\n    print(pow(G, 1, 10 ** 9 + 7))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    dic = {}\n    for j in lst:\n        dic[j] = 0\n    for j in lst:\n        dic[j] += 1\n    p = 1\n    for j in dic.keys():\n        p = p * (dic[j] + 1)\n    ans = p - 1\n    print(ans % (10 ** 9 + 7))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    dic = {}\n    for j in lst:\n        dic[j] = 0\n    for j in lst:\n        dic[j] += 1\n    p = 1\n    for j in dic.keys():\n        p = p * (dic[j] + 1)\n    ans = p - 1\n    print(ans % (10 ** 9 + 7))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    dic = {}\n    for j in lst:\n        dic[j] = 0\n    for j in lst:\n        dic[j] += 1\n    p = 1\n    for j in dic.keys():\n        p = p * (dic[j] + 1)\n    ans = p - 1\n    print(ans % (10 ** 9 + 7))", "t = int(input())\nmod7 = 1000000000.0 + 7\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    fr = {}\n    an = 1\n    for i in ar:\n        if i in fr:\n            fr[i] += 1\n        else:\n            fr[i] = 1\n    for i in fr:\n        an = an * (fr[i] + 1)\n        an %= mod7\n    print(int(an - 1))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    A = list(input().split())\n    A = A[:n]\n    dic = {}\n    ans = 1\n    mod = 1000000000.0 + 7\n    for i in A:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for j in dic:\n        ans = ans * (dic[j] + 1)\n        ans = ans % mod\n    ans = (ans - 1 + mod) % mod\n    print(int(ans))\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    sum = 1\n    for i in d:\n        sum *= d[i] + 1\n    print((sum - 1) % (10 ** 9 + 7))", "from collections import defaultdict\nt = int(input())\nmod = 1000000000.0 + 7\nfor i in range(t):\n    n = int(input())\n    sai = [int(i) for i in input().split()]\n    dicti = {}\n    for i in sai:\n        dicti[i] = 0\n    for i in sai:\n        dicti[i] += 1\n    ans = 1\n    for i in dicti.keys():\n        ans = ans * (1 + dicti[i])\n        ans = ans % mod\n    ans = (ans - 1) % mod\n    print(int(ans))", "from collections import defaultdict\nt = int(input())\nmod = 1000000000.0 + 7\nfor i in range(t):\n    n = int(input())\n    sai = [int(i) for i in input().split()]\n    dicti = {}\n    for i in sai:\n        dicti[i] = 0\n    for i in sai:\n        dicti[i] += 1\n    ans = 1\n    for i in dicti.keys():\n        ans = ans * (1 + dicti[i])\n        ans = ans % mod\n    ans = (ans - 1) % mod\n    print(int(ans))", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = dict(Counter(l))\n    res = 1\n    for i in c:\n        res *= c[i] + 1\n    print((res - 1) % 1000000007)", "def ans(n2, arr):\n    mod = 1000000007\n    from collections import Counter as C\n    arr = C(arr)\n    ans = 1\n    for i in arr:\n        ans *= arr[i] + 1\n    print((ans - 1) % mod)\n    return\nn = int(input())\nfor i in range(n):\n    x = int(input())\n    arr = [int(i) for i in input().split()]\n    ans(x, arr)", "import math\nfrom random import randint\n\ndef timeTaken(func):\n    from time import time\n\n    def decorator(*args, **kwargs):\n        start = time()\n        returned = func(*args, **kwargs)\n        end = time()\n        if int(100 * (end - start)) / 100 > 0.01:\n            print('Time taken is: ', int(100 * (end - start)) / 100, 'Sec')\n        return returned\n    return decorator\n\ndef memoize(func):\n    mem = {}\n\n    def memoizer(*args, **kwargs):\n        key = str(args) + str(kwargs)\n        if key not in mem:\n            mem[key] = func(*args, **kwargs)\n        return mem[key]\n    return memoizer\n\ndef counter(lst):\n    q = [0] * max(lst)\n    for i in range(len(lst)):\n        q[lst[i] - 1] = q[lst[i] - 1] + 1\n    return q\n\ndef counter_elements(lst):\n    q = dict()\n    for i in range(len(lst)):\n        if lst[i] not in q:\n            q[lst[i]] = 0\n        q[lst[i]] = q[lst[i]] + 1\n    return q\n\ndef string_counter(lst):\n    q = [0] * 26\n    for i in range(len(lst)):\n        q[ord(lst[i]) - 97] = q[ord(lst[i]) - 97] + 1\n    return q\n\ndef factorial(n, m=1000000007):\n    q = 1\n    for i in range(n):\n        q = q * (i + 1) % m\n    return q\n\ndef factors(n):\n    q = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            q.extend([i, n // i])\n    return q\n\ndef prime_factors(n):\n    q = []\n    while n % 2 == 0:\n        q.append(2)\n        n = n // 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            q.append(i)\n            n = n // i\n    if n > 2:\n        q.append(n)\n    return q\n\ndef power_two(x):\n    return x and (not x & x - 1)\n\ndef ceil(a, b):\n    return -(-a // b)\n\ndef getPrimes(MAX=10 ** 5):\n    primes = [2]\n    for n in range(3, MAX, 2):\n        sqrt_n = math.sqrt(n)\n        for prime in primes:\n            if prime > sqrt_n:\n                primes.append(n)\n                break\n            if n % prime == 0:\n                break\n    return primes\n\ndef sieve(MAX=10 ** 5):\n    spf = [i for i in range(MAX)]\n    for i in range(4, MAX, 2):\n        spf[i] = 2\n    for i in range(3, math.ceil(math.sqrt(MAX))):\n        if spf[i] == i:\n            for j in range(i * i, MAX, i):\n                if spf[j] == j:\n                    spf[j] = i\n    return spf\nMOD = 10 ** 9 + 7\n\ndef mod_mul(a, b):\n    return a % MOD * (b % MOD) % MOD\n\ndef mod_sum(a, b):\n    return (a + b) % MOD\n\ndef mod_inv(a):\n    return pow(a, MOD - 2, MOD)\nimport io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef B(N, A):\n    A = counter_elements(A)\n    ans = 1\n    for a in A:\n        ans = mod_mul(ans, A[a] + 1)\n    return ans - 1\nfor _ in range(inp()):\n    N = inp()\n    A = inlt()\n    print(B(N, A))", "mod7 = 1000000000.0 + 7\nfor _ in range(int(input())):\n    N = int(input())\n    numbers = list(map(int, input().split()))\n    freq = {}\n    ans = 1\n    for i in numbers:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        ans *= freq[i] + 1\n        ans %= mod7\n    print(int(ans - 1))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = input().split()\n    z = dict()\n    for i in x:\n        if i not in z:\n            z[i] = 1\n        else:\n            z[i] += 1\n    m = list(z.values())\n    l = 1\n    for i in m:\n        l = l * (i + 1) % 1000000007\n    print(l - 1)", "mod7 = 1000000000.0 + 7\nfor _ in range(int(input())):\n    N = int(input())\n    numbers = list(map(int, input().split()))\n    freq = {}\n    ans = 1\n    for i in numbers:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq:\n        ans *= freq[i] + 1\n        ans %= mod7\n    print(int(ans - 1))", "import math, sys, bisect, heapq, os\nfrom collections import defaultdict, Counter, deque\nfrom itertools import groupby, accumulate\nfrom functools import lru_cache\npr = lambda x: x\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\naj = lambda : list(map(int, input().split()))\n\ndef list3d(a, b, c, d):\n    return [[[d] * c for j in range(b)] for i in range(a)]\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict()\n    mod7 = 1000000007\n    ans = 1\n    for i in l:\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    for i in list(d.keys()):\n        ans *= d[i] + 1\n    print((ans - 1) % mod7)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    ans = 1\n    for x in a:\n        if x in d:\n            d[x] += 1\n        else:\n            d[x] = 1\n    for x in d:\n        ans *= d[x] + 1\n        ans %= 1000000007\n    ans -= 1\n    print(ans % 1000000007)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    m = {}\n    for v in arr:\n        if v in m:\n            m[v] += 1\n        else:\n            m[v] = 1\n    ans = 1\n    for v in m:\n        ans = ans * (1 + m[v])\n    print((ans - 1) % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    m = {}\n    for v in arr:\n        if v in m:\n            m[v] += 1\n        else:\n            m[v] = 1\n    ans = 1\n    for v in m:\n        ans = ans * (1 + m[v]) % mod\n    print((ans + mod - 1) % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    m = {}\n    for v in arr:\n        if v in m:\n            m[v] += 1\n        else:\n            m[v] = 1\n    ans = 1\n    for v in m:\n        ans = ans * (1 + m[v])\n    print((ans - 1) % mod)", "from collections import Counter\nfrom functools import reduce\nMOD = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(input().split())\n    c = dict(Counter(a))\n    val = 1\n    for el in c:\n        val *= c[el] + 1\n    val -= 1\n    print(val % MOD)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans += mod - 1\n    print(ans % mod)", "import sys, math, bisect\nfrom functools import lru_cache\nfrom random import randint\ninf = float('inf')\nmod = 10 ** 9 + 7\n\ndef nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\n\ndef lcm(a, b):\n    return int(a / math.gcd(a, b) * b)\n\ndef gcd(a, b):\n    return int(math.gcd(a, b))\n\ndef tobinary(n):\n    return bin(n)[2:]\n\ndef binarySearch(a, x):\n    i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n\ndef lowerBound(a, x):\n    i = bisect.bisect_left(a, x)\n    if i:\n        return i - 1\n    else:\n        return -1\n\ndef upperBound(a, x):\n    i = bisect.bisect_right(a, x)\n    if i != len(a) + 1 and a[i - 1] == x:\n        return i - 1\n    else:\n        return -1\n\ndef primesInRange(n):\n    ans = []\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\n\ndef primeFactors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n\ndef isPrime(n, k=8):\n    if n < 2:\n        return True\n    for i in range(0, k):\n        a = randint(1, n - 1)\n        if pow(a, n - 1, n) != 1:\n            return False\n    return True\n\ndef find_closest(arr, target):\n    min_diff = 1e+19\n    low = 0\n    high = len(arr) - 1\n    closest_num = None\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    while low <= high:\n        mid = (low + high) // 2\n        min_diff_left = 1e+19\n        min_diff_right = 1e+19\n        if mid + 1 < len(arr):\n            min_diff_right = abs(arr[mid + 1] - target)\n        if mid - 1 >= 0:\n            min_diff_left = abs(arr[mid - 1] - target)\n        if min_diff_left < min_diff:\n            min_diff = min_diff_left\n            closest_num = arr[mid - 1]\n        if min_diff_right < min_diff:\n            min_diff = min_diff_right\n            closest_num = arr[mid + 1]\n        if arr[mid] < target:\n            low = mid + 1\n        elif arr[mid] > target:\n            high = mid - 1\n        else:\n            return arr[mid]\n    return closest_num\nfrom collections import deque, defaultdict, Counter\nfrom heapq import heappush, heappop, heapify\nimport string\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = Counter(arr)\n    ans = 1\n    for i in cnt:\n        ans *= cnt[i] + 1\n        ans = ans % mod\n    print((ans - 1) % mod)", "mod7 = 1000000000.0 + 7\nfor _ in range(int(input())):\n    N = int(input())\n    numbers = list(map(int, input().split()))\n    freq = {}\n    ans = 1\n    for i in numbers:\n        if i not in freq:\n            freq[i] = 1\n        else:\n            freq[i] += 1\n    for i in freq:\n        ans *= freq[i] + 1\n        ans %= mod7\n    print(int(ans - 1))", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    sum = 1\n    last = 1\n    for i in range(1, len(x)):\n        if x[i] == x[i - 1]:\n            sum = (sum + last) % (10 ** 9 + 7)\n        else:\n            last = sum + 1 % (10 ** 9 + 7)\n            sum = (sum * 2 + 1) % (10 ** 9 + 7)\n    print(sum)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    Dict = {}\n    for ele in lst:\n        if ele in Dict:\n            Dict[ele] += 1\n        else:\n            Dict[ele] = 1\n    res = 1\n    for freq in Dict.values():\n        res *= freq + 1\n    ans = (res - 1) % (pow(10, 9) + 7)\n    print(ans)", "import math\ninp_num = lambda : int(input())\ninp_lis = lambda : list(map(int, input().split()))\nmo = math.pow(10, 9) + 7\nmo = int(mo)\nfor _ in range(inp_num()):\n    n = inp_num()\n    l = inp_lis()\n    d = {}\n    for i in l:\n        d[i] = 1\n    for i in l:\n        d[i] += 1\n    an = 1\n    for i in d.values():\n        an = an * i % mo\n    print(an - 1)", "import math\ninp_num = lambda : int(input())\ninp_lis = lambda : list(map(int, input().split()))\nmo = math.pow(10, 9) + 7\nmo = int(mo)\nfor _ in range(inp_num()):\n    n = inp_num()\n    l = inp_lis()\n    d = {}\n    for i in l:\n        d[i] = 1\n    for i in l:\n        d[i] += 1\n    an = 1\n    for i in d.values():\n        an = an * i\n    print(an % mo - 1)", "from sys import stdin, stdout\ninp_num = lambda : int(input())\ninp_lis = lambda : list(map(int, input().split()))\nmo = 10 ** 9 + 7\nmo = int(mo)\nfor _ in range(inp_num()):\n    n = inp_num()\n    l = inp_lis()\n    d = {}\n    for i in l:\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    an = 1\n    for i in d.values():\n        an = an * (i + 1)\n    print(an % mo - 1)", "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next():\n    return tokens.pop()\n\ndef nextInt():\n    return int(next())\n\ndef nextFloat():\n    return float(next())\n\ndef getIntArray(n):\n    return [nextInt() for _ in range(n)]\n\ndef getFloatArray(n):\n    return [nextFloat() for _ in range(n)]\n\ndef getStringArray(n):\n    return [next() for _ in range(n)]\ntestcase = True\n\ndef solve(testcase=1):\n    MOD = 10 ** 9 + 7\n    N = nextInt()\n    A = getIntArray(N)\n    from collections import Counter\n    counter = Counter(A)\n    ans = 1\n    for val in counter.values():\n        ans = ans * (val + 1) % MOD\n    print(ans - 1)\n    pass\nif testcase is None:\n    testcaseCount = 1\n    while tokens:\n        solve(testcaseCount)\n        testcaseCount += 1\nelse:\n    testcaseCount = nextInt() if testcase else 1\n    for tc in range(testcaseCount):\n        solve(tc + 1)\n    assert not tokens", "test = int(input())\nMOD = int(1000000000.0 + 7)\nwhile test:\n    n = int(input())\n    f = dict()\n    for i in input().split():\n        if int(i) in f.keys():\n            f[int(i)] += 1\n        else:\n            f[int(i)] = 2\n    ans = 1\n    for i in f.values():\n        ans *= i\n    print((ans - 1) % MOD)\n    test -= 1", "from typing import DefaultDict\nfrom math import sqrt\nfrom collections import OrderedDict, defaultdict\nimport math\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d = DefaultDict(lambda : 0)\n    for ele in l:\n        d[ele] += 1\n    return d\n\ndef max_in_dict(d):\n    maxi = 0\n    for ele in d:\n        if d[ele] > maxi:\n            maxi = d[ele]\n    return maxi\n\ndef element_count(s):\n    l = []\n    k = s[0]\n    c = 0\n    for ele in s:\n        if ele == k:\n            c += 1\n        else:\n            l.append([k, c])\n            k = ele\n            c = 1\n    l.append([k, c])\n    return l\nfor _ in range(int(input())):\n    bool = True\n    flag = True\n    mul = 1\n    mod = 10 ** 9 + 7\n    ans = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    k = len(set(l)) - 1\n    for ele in l:\n        d[ele] += 1\n    for ele in d:\n        mul *= d[ele] + 1\n    print((mul - 1) % mod)", "from collections import Counter\nfrom math import ceil, floor, log\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\n\ndef ans(n):\n    t = 10 ** 9 + 7\n    return n % t\nfor _ in range(int(input().strip())):\n    n = inp_int()\n    a = inp_lis()\n    x = Counter(a)\n    res = 1\n    for (p, q) in x.items():\n        res *= q + 1\n        res = ans(res)\n    print(res - 1)", "t = int(input())\nmod7 = 1000000000.0 + 7\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    fr = {}\n    an = 1\n    for i in ar:\n        if i in fr:\n            fr[i] += 1\n        else:\n            fr[i] = 1\n    for i in fr:\n        an = an * (fr[i] + 1)\n        an %= mod7\n    print(int(an - 1))", "def fi(arr, n):\n    mp = {}\n    lst = []\n    for i in range(n):\n        if arr[i] not in mp:\n            mp[arr[i]] = 0\n        mp[arr[i]] += 1\n    for i in mp:\n        lst.append(mp[i])\n    return lst\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(set(a))\n    one = 1\n    for j in fi(a, n):\n        one = one * (j + 1)\n    print((one - 1) % (10 ** 9 + 7))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    ans = 1\n    for j in l:\n        d[j] = d.get(j, 0) + 1\n    for j in d.values():\n        ans *= j + 1\n    print((ans - 1) % 1000000007)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans += mod - 1\n    print(ans % mod)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans += mod - 1\n    print(ans % mod)", "from collections import Counter\nfor _ in range(int(input())):\n    int(input())\n    arr = list(map(int, input().split()))\n    cntr = Counter(arr)\n    cnt = 1\n    for i in cntr.values():\n        cnt = cnt * (i + 1)\n    print((cnt - 1) % (10 ** 9 + 7))", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans += mod - 1\n    print(ans % mod)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    ans = 1\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d:\n        ans = ans * (d[i] + 1)\n    print((ans - 1) % 1000000007)", "from collections import Counter\nmod = 1000000007\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    d = Counter(a)\n    c = 1\n    for x in d:\n        c = c * (1 + d[x])\n    print((c - 1) % mod)", "for _ in range(int(input())):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    temp_dict = dict()\n    for element in arr:\n        if element in temp_dict:\n            temp_dict[element] += 1\n        else:\n            temp_dict[element] = 1\n    total = 1\n    for key in temp_dict.keys():\n        total *= temp_dict[key] + 1\n    print((total - 1) % (10 ** 9 + 7))", "for _ in range(int(input())):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    temp_dict = dict()\n    for element in arr:\n        if element in temp_dict:\n            temp_dict[element] += 1\n        else:\n            temp_dict[element] = 1\n    total = 1\n    for key in temp_dict.keys():\n        total *= temp_dict[key] + 1\n    print(max(total - 1, 1) % (10 ** 9 + 7))", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    ans = 1\n    a = map(int, input().split())\n    freq = {}\n    mod7 = 1000000000.0 + 7\n    for i in a:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for (a, b) in freq.items():\n        f = b\n        ans = ans * (f + 1)\n        ans %= mod7\n    ans -= 1\n    print(int(ans))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mod = 10 ** 9 + 7\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = 1\n    for (k, v) in d.items():\n        ans = ans % mod * (v + 1) % mod % mod\n    print((ans % mod - 1 % mod) % mod)", "t = int(input())\nm = 1000000000.0 + 7\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    s = 1\n    for i in d.keys():\n        s *= d[i] + 1\n        s %= m\n    print(int(s) - 1)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mod = 1000000007\n    d = {}\n    for i in range(n):\n        try:\n            d[arr[i]] += 1\n        except:\n            d[arr[i]] = 1\n    ans = 1\n    for freq in d.values():\n        ans *= freq + 1\n        ans %= mod\n    print((ans - 1 + mod) % mod)", "t = int(input())\nmod7 = 1000000000.0 + 7\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    fr = {}\n    an = 1\n    for i in ar:\n        if i in fr:\n            fr[i] += 1\n        else:\n            fr[i] = 1\n    for i in fr:\n        an = an * (fr[i] + 1)\n        an %= mod7\n    print(int(an - 1))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    mod = 10 ** 9 + 7\n    d = defaultdict(lambda : 0)\n    for i in A:\n        d[i] += 1\n    ans = 1\n    for i in d.keys():\n        ans = ans * (d[i] + 1)\n        ans = ans % mod\n    print(ans - 1)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = len(set(l))\n    d = dict.fromkeys(l, 0)\n    for i in l:\n        d[i] += 1\n    ans = 1\n    for i in list(d.keys()):\n        ans *= d[i] + 1\n    print((ans - 1) % 1000000007)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    l1 = 1\n    s = 1\n    for i in range(1, len(l)):\n        if l[i] == l[i - 1]:\n            s = (s + l1) % (10 ** 9 + 7)\n        else:\n            l1 = s + 1 % (10 ** 9 + 7)\n            s = (s * 2 + 1) % (10 ** 9 + 7)\n    print(s)", "t = int(input())\nfor _ in range(t):\n    p = 10 ** 9 + 7\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    ans = 1\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    for (i, j) in d.items():\n        ans *= 1 + j\n        ans %= p\n    ans = (ans - 1 + p) % p\n    print(ans)", "import sys\nimport math\nimport collections\nimport operator as op\nimport heapq as hq\nfrom collections import deque\nfrom math import gcd, inf, sqrt, pi, cos, sin, ceil, log2, floor, log\nfrom bisect import bisect_right, bisect_left, bisect\nfrom itertools import permutations\nfrom functools import reduce\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return list(factors)\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef isPalindrome(s):\n    l = 0\n    r = len(s) - 1\n    while l <= r:\n        if s[l] != s[r]:\n            return False\n        l += 1\n        r -= 1\n    return True\nMOD = 1000000007\nPMOD = 998244353\nLOGN = 30\nalp = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nN = 2 * 100005 + 1\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    a = list(map(int, stdin.readline().rstrip().split()))\n    d = {}\n    for i in range(n):\n        if a[i] not in d:\n            d[a[i]] = 0\n        d[a[i]] += 1\n    ans = 1\n    for i in d:\n        ans *= d[i] + 1\n    print(ans % MOD - 1)", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    ans = 1\n    for i in set(l):\n        c = d[i]\n        ans *= c + 1\n        ans = ans % mod\n    ans -= 1\n    print(ans % mod)", "from collections import Counter as count\nfor _ in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().split()))\n    lis = count(lis)\n    res = 1\n    mod = 10 ** 9 + 7\n    for i in list(lis.keys()):\n        if lis[i] >= 1:\n            res *= lis[i] + 1\n    res -= 1\n    print(res % mod)", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    MOD = 1000000007\n    freq = {}\n    for x in arr:\n        if x not in freq:\n            freq[x] = 0\n        freq[x] += 1\n    ans = 1\n    for (k, v) in freq.items():\n        ans *= v + 1\n    return (ans - 1) % MOD\nfor _ in range(int(input())):\n    print(main())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 10 ** 9 + 7\n    ans = 1\n    d = dict()\n    for i in range(n):\n        d[a[i]] = d.get(a[i], 0) + 1\n    for e in d:\n        ans = ans * (d[e] + 1)\n    ans = (ans - 1) % m\n    print(ans)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if len(set(arr)) == 1:\n        print(n)\n        continue\n    i = 0\n    mod = int(10 ** 9 + 7)\n    result = 1\n    while i < n:\n        j = i\n        while j < n and arr[i] == arr[j]:\n            j += 1\n        result *= j - i + 1\n        result %= mod\n        i = j\n    result += mod - 1\n    print(result % mod)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if len(set(arr)) == 1:\n        print(n)\n        continue\n    i = 0\n    mod = int(10 ** 9 + 7)\n    result = 1\n    while i < n:\n        j = i\n        while j < n:\n            if arr[i] == arr[j]:\n                j += 1\n            else:\n                break\n        result *= j - i + 1\n        result %= mod\n        i = j\n    result += mod - 1\n    result %= mod\n    print(result)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    if len(set(arr)) == 1:\n        print(n)\n        continue\n    i = 0\n    mod = int(10 ** 9 + 7)\n    result = 1\n    while i < n:\n        j = i\n        while j < n and arr[i] == arr[j]:\n            j += 1\n        result *= j - i + 1\n        result %= mod\n        i = j\n    result += mod - 1\n    print(result % mod)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    ans = 1\n    mod = int(10 ** 9 + 7)\n    i = 0\n    while i < n:\n        j = i\n        while j < n and a[j] == a[i]:\n            j += 1\n        ans *= j - i + 1\n        ans %= mod\n        i = j\n    ans += mod - 1\n    print(ans % mod)", "for _ in range(int(input())):\n    input()\n    x = sorted(map(int, input().split()))\n    sam = inc = 1\n    for i in range(1, len(x)):\n        if x[i] != x[i - 1]:\n            inc = (sam + 1) % (10 ** 9 + 7)\n        sam = (sam + inc) % (10 ** 9 + 7)\n    print(sam)", "for _ in range(int(input())):\n    input()\n    x = sorted(map(int, input().split()))\n    sam = inc = 1\n    for i in range(1, len(x)):\n        if x[i] != x[i - 1]:\n            inc = (sam + 1) % (10 ** 9 + 7)\n        sam = (sam + inc) % (10 ** 9 + 7)\n    print(sam)", "for _ in range(int(input())):\n    input()\n    x = sorted(map(int, input().split()))\n    mod = 10 ** 9 + 7\n    sam = inc = 1\n    for i in range(1, len(x)):\n        if x[i] != x[i - 1]:\n            inc = (sam + 1) % mod\n        sam = (sam + inc) % mod\n    print(sam)", "for _ in range(int(input())):\n    input()\n    x = sorted(map(int, input().split()))\n    sam = inc = 1\n    for i in range(1, len(x)):\n        if x[i] != x[i - 1]:\n            inc = sam + 1\n        sam += inc\n    print(sam % (10 ** 9 + 7))", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    sam = 1\n    inc = 1\n    mod = 10 ** 9 + 7\n    for i in range(1, len(x)):\n        if x[i] == x[i - 1]:\n            sam += inc\n        else:\n            inc = sam + 1\n            sam += inc\n    print(sam % mod)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    sam = 1\n    last = 1\n    mod = 10 ** 9 + 7\n    for i in range(1, len(x)):\n        if x[i] == x[i - 1]:\n            sam = sam + last\n        else:\n            last = sam + 1\n            sam = 2 * sam + 1\n    print(sam % mod)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.sort()\n    sum = 1\n    last = 1\n    for i in range(1, len(x)):\n        if x[i] == x[i - 1]:\n            sum = (sum + last) % (10 ** 9 + 7)\n        else:\n            last = sum + 1 % (10 ** 9 + 7)\n            sum = (sum * 2 + 1) % (10 ** 9 + 7)\n    print(sum)", "def getGood(arr):\n    dct = {}\n    ans = 1\n    for item in arr:\n        if item in dct:\n            dct[item] += 1\n        else:\n            dct[item] = 1\n    for (item, freq) in dct.items():\n        ans *= freq + 1\n    return (ans - 1) % 1000000007\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(getGood(arr))", "t = int(input())\nmod7 = 1000000000.0 + 7\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    fr = {}\n    an = 1\n    for i in ar:\n        if i in fr:\n            fr[i] += 1\n        else:\n            fr[i] = 1\n    for i in fr:\n        an = an * (fr[i] + 1)\n        an %= mod7\n    print(int(an - 1))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    mod = int(10 ** 9 + 7)\n    s = 1\n    for j in d.values():\n        s *= j + 1\n    s = s - 1\n    print(s % mod)", "from sys import stdin\ninput = stdin.readline\nfrom collections import Counter\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    dic = Counter(li)\n    ans = 1\n    for k in dic.keys():\n        ans = ans * (dic[k] + 1) % mod\n    ans = ans - 1\n    print(ans)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    net = dict()\n    for i in a:\n        net[i] = net.get(i, 1) + 1\n    ans = 1\n    for i in net:\n        ans *= net[i]\n    print((ans - 1) % 1000000007)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict.fromkeys(a, 0)\n    for i in a:\n        d[i] += 1\n    ans = 1\n    for i in list(d.keys()):\n        ans *= d[i] + 1\n    print((ans - 1) % (pow(10, 9) + 7))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    for j in a:\n        if j in dic.keys():\n            dic[j] += 1\n        else:\n            dic[j] = 1\n    mod = 1000000000.0 + 7\n    ans = 1\n    for key in dic:\n        ans = ans * (dic[key] + 1)\n        ans = int(ans % mod)\n    print(int(ans - 1))", "mod = 1000000007\nfor _ in range(int(input())):\n    input()\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 2\n    product = 1\n    for i in d.values():\n        product = product * i % mod\n    print(product - 1)"]