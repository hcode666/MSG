["for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    a1 = list(a)\n    c = a1.count('1')\n    if n == 2 and a == '00' and (b == '11'):\n        print('NO')\n    else:\n        d = 0\n        for i in range(1, n):\n            if b[i] == b[i - 1]:\n                d = 1\n                break\n        if d == 1:\n            if a == b:\n                print('YES')\n            elif c == 0:\n                print('NO')\n            else:\n                print('YES')\n        elif a == b:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    f = 0\n    if a == b:\n        print('YES')\n        continue\n    for i in a:\n        if i == '1':\n            f = 1\n            break\n    if f == 0:\n        print('NO')\n        continue\n    f = 1\n    for i in range(n - 1):\n        if b[i] != b[i + 1]:\n            continue\n        else:\n            f = 0\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n        continue\n    if b.count('1') >= 1 and a.count('1') == 0:\n        print('NO')\n        continue\n    (p, q) = ('', '')\n    for i in range(n):\n        if i % 2:\n            p += '0'\n            q += '1'\n        else:\n            p += '1'\n            q += '0'\n    if b == p or b == q:\n        print('NO')\n        continue\n    print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    a1 = list(a)\n    c = a1.count('1')\n    if n == 2 and a == '00' and (b == '11'):\n        print('NO')\n    else:\n        d = 0\n        for i in range(1, n):\n            if b[i] == b[i - 1]:\n                d = 1\n                break\n        if d == 1:\n            if a == b:\n                print('YES')\n            elif c == 0:\n                print('NO')\n            else:\n                print('YES')\n        elif a == b:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    if A == B:\n        print('YES')\n        continue\n    if '1' in B and '1' not in A:\n        print('NO')\n        continue\n    sink = False\n    for (i, j) in zip(B[:-1], B[1:]):\n        if i == j:\n            sink = True\n    if sink:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    N = int(input())\n    in_str = input()\n    out_str = input()\n    consecutive = False\n    one_present = False\n    for i in range(N - 1):\n        if out_str[i] == out_str[i + 1]:\n            consecutive = True\n    for x in range(N):\n        if in_str[x] == '1':\n            one_present = True\n            break\n    if in_str == out_str:\n        print('YES')\n    elif consecutive == True and one_present == True:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    c = False\n    i = 1\n    if a == b:\n        print('YES')\n        continue\n    if n == 2 and a == '00' and (b == '11'):\n        print('NO')\n        continue\n    while i < n:\n        if b[i - 1] == b[i]:\n            c = True\n            break\n        i += 1\n    if c:\n        if a.count('1') == 0:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "def check(s1, n):\n    check = True\n    for i in range(0, n - 1):\n        if s1[i] == s1[i + 1]:\n            check = False\n            break\n    return check\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    if s1 == s2:\n        print('YES')\n    elif '1' in s1:\n        flag = check(s2, n)\n        if flag:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    if s1 == s2:\n        print('YES')\n    elif '1' not in s1 and '1' in s2:\n        print('NO')\n    else:\n        count = 1\n        for i in range(n - 1):\n            if s2[i] != s2[i + 1]:\n                count += 1\n        if count == n:\n            print('NO')\n        else:\n            print('YES')", "for p in range(int(input())):\n    n = int(input())\n    (a, b, f) = (str(input()), str(input()), 0)\n    for i in a:\n        if i == '1':\n            f += 1\n            break\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            f += 1\n            break\n    if a == b or f == 2:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nt = int(input())\nwhile t:\n    p = int(input())\n    s = list(input())\n    h = list(input())\n    sr = 0\n    hr = 0\n    for i in range(p):\n        if s[i] == '1':\n            sr += 1\n        if h[i] == '1':\n            hr += 1\n    if s == h:\n        print('YES')\n    elif sr == 0 and hr != 0:\n        print('NO')\n    else:\n        check = 0\n        for i in range(p - 1):\n            if h[i] != h[i + 1]:\n                check += 1\n        if check == p - 1:\n            print('NO')\n        else:\n            print('YES')\n    t -= 1", "def solve(a, b, n):\n    x = 1\n    for i in range(1, n):\n        if b[i] == b[i - 1]:\n            x = 0\n    if x != 0:\n        return a == b\n    else:\n        cnt = len([x for x in a if x == '1'])\n        if cnt > 0:\n            return True\n        else:\n            return a == b\n\ndef main():\n    t = int(input())\n    for tc in range(t):\n        n = int(input())\n        a = input()\n        b = input()\n        if solve(a, b, n):\n            print('YES')\n        else:\n            print('NO')\nmain()", "from collections import defaultdict\nt = int(input())\nwhile t:\n    p = int(input())\n    s = list(input())\n    h = list(input())\n    sr = 0\n    hr = 0\n    for i in range(p):\n        if s[i] == '1':\n            sr += 1\n        if h[i] == '1':\n            hr += 1\n    if s == h:\n        print('YES')\n    elif sr == 0 and hr != 0:\n        print('NO')\n    else:\n        check = 0\n        for i in range(p - 1):\n            if h[i] != h[i + 1]:\n                check += 1\n        if check == p - 1:\n            print('NO')\n        else:\n            print('YES')\n    t -= 1", "def check(st):\n    for i in range(len(st) - 1):\n        if st[i] == '0':\n            if st[i + 1] != '1':\n                return False\n        elif st[i + 1] != '0':\n            return False\n    return True\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = input()\n    B = input()\n    one = '1'\n    zero = '0'\n    if one in B and one not in A:\n        print('NO')\n    elif A == B:\n        print('YES')\n    elif check(B):\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    (s1, s2) = (input(), input())\n    if s1 == s2:\n        print('YES')\n    elif '1' not in s1:\n        print('NO')\n    else:\n        check = True\n        for i in range(1, n):\n            if s2[i] == s2[i - 1]:\n                check = False\n        if check:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    found = a.count('1')\n    if n == 2 and a == '00' and (b == '11'):\n        print('NO')\n    else:\n        hi = False\n        for i in range(1, n):\n            if b[i] == b[i - 1]:\n                hi = True\n                break\n        if hi == True:\n            if a == b:\n                print('YES')\n            elif found == 0:\n                print('NO')\n            else:\n                print('YES')\n        elif a == b:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nwhile t:\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    f = 0\n    if s1 == s2:\n        f = 1\n        print('YES')\n    elif s2.count('1') > 0 and s1.count('1') == 0:\n        f = 1\n        print('NO')\n    elif len(s2) > 1:\n        prev = s2[0]\n        ct = 1\n        for i in range(1, len(s2)):\n            if prev != s2[i]:\n                ct += 1\n            prev = s2[i]\n        if ct == len(s1):\n            f = 1\n            print('NO')\n    if f == 0:\n        print('YES')\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    if A == '0' * n and B != '0' * n:\n        print('NO')\n        continue\n    if n == 1:\n        if A == B:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if n % 2 == 0:\n        if A == B:\n            print('YES')\n        elif B == '10' * (n // 2) or B == '01' * (n // 2):\n            print('NO')\n        else:\n            print('YES')\n    elif A == B:\n        print('YES')\n    elif B == '10' * (n // 2) + '1' or B == '01' * (n // 2) + '0':\n        print('NO')\n    else:\n        print('YES')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n\ndef yn(ans):\n    if ans:\n        print('YES')\n    else:\n        print('NO')\nfor T in range(int(input())):\n    n = ni()\n    a = si()\n    b = si()\n    if '1' not in a and '1' in b:\n        print('NO')\n        continue\n    if a == b:\n        print('YES')\n        continue\n    ans = False\n    if '00' in b or '11' in b:\n        print('YES')\n    else:\n        print('NO')", "for tc in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    x = a.count('1')\n    y = b.count('1')\n    alt = 1\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            alt = 0\n            break\n    if not alt:\n        if a == b:\n            print('YES')\n        elif x == 0:\n            print('NO')\n        else:\n            print('YES')\n    elif a == b:\n        print('YES')\n    else:\n        print('NO')", "strng = lambda : input().split()[0]\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nslst = lambda : list(input().split()[0])\nsilst = lambda : list(map(int, input().split()))\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom heapq import heapify, nsmallest, nlargest, heappush, heappop\nfrom collections import defaultdict, deque\nfrom math import ceil, log, floor, sqrt, gcd, log10\nfor _ in range(inp()):\n    n = inp()\n    a = slst()\n    b = slst()\n    if a == b:\n        print('YES')\n        continue\n    if set(a) == {'0'}:\n        print('NO')\n        continue\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            break\n    else:\n        print('NO')\n        continue\n    print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    if s1 == '00' and s2 == '11':\n        print('NO')\n    else:\n        one = -1\n        for i in range(n):\n            if s1[i] == '1':\n                one = i\n                break\n        flag = False\n        for i in range(1, n):\n            if s2[i] == s2[i - 1]:\n                flag = True\n                break\n        if flag:\n            if s1 == s2:\n                print('YES')\n            elif one == -1:\n                print('NO')\n            else:\n                print('YES')\n        elif s1 == s2:\n            print('YES')\n        else:\n            print('NO')", "testcasesare = int(input())\nfor a in range(testcasesare):\n    numarenumis = int(input())\n    warrior1 = input()\n    warrior2 = input()\n    if warrior1 == warrior2:\n        print('YES')\n    elif '1' not in warrior1:\n        if '1' in warrior2:\n            print('NO')\n    elif '11' in warrior2 or '00' in warrior2:\n        print('YES')\n    else:\n        print('NO')", "def sol(a, b):\n    if a == b:\n        return True\n    if a.count('1') == 0:\n        return False\n    if b.count('11') == 0 and b.count('00') == 0:\n        return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    if sol(a, b):\n        print('YES')\n    else:\n        print('NO')", "import math\nimport random\nimport heapq, bisect\nimport sys\nfrom collections import deque, defaultdict\nfrom fractions import Fraction\nimport sys\nimport threading\nfrom collections import defaultdict\nthreading.stack_size(10 ** 8)\nmod = 10 ** 9 + 7\nmod1 = 998244353\nimport os\nimport sys\nfrom io import BytesIO, IOBase\nsys.setrecursionlimit(300000)\nBUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            (self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b'\\n') + (not b)\n            ptr = self.buffer.tell()\n            (self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            (self.buffer.truncate(0), self.buffer.seek(0))\n\nclass IOWrapper(IOBase):\n\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode('ascii'))\n        self.read = lambda : self.buffer.read().decode('ascii')\n        self.readline = lambda : self.buffer.readline().decode('ascii')\nimport math\n\nclass TreeNode:\n\n    def __init__(self, k, v):\n        self.key = k\n        self.value = v\n        self.left = None\n        self.right = None\n        self.parent = None\n        self.height = 1\n        self.num_left = 1\n        self.num_total = 1\n\nclass AvlTree:\n\n    def __init__(self):\n        self._tree = None\n\n    def add(self, k, v):\n        if not self._tree:\n            self._tree = TreeNode(k, v)\n            return\n        node = self._add(k, v)\n        if node:\n            self._rebalance(node)\n\n    def _add(self, k, v):\n        node = self._tree\n        while node:\n            if k < node.key:\n                if node.left:\n                    node = node.left\n                else:\n                    node.left = TreeNode(k, v)\n                    node.left.parent = node\n                    return node.left\n            elif node.key < k:\n                if node.right:\n                    node = node.right\n                else:\n                    node.right = TreeNode(k, v)\n                    node.right.parent = node\n                    return node.right\n            else:\n                node.value = v\n                return\n\n    @staticmethod\n    def get_height(x):\n        return x.height if x else 0\n\n    @staticmethod\n    def get_num_total(x):\n        return x.num_total if x else 0\n\n    def _rebalance(self, node):\n        n = node\n        while n:\n            lh = self.get_height(n.left)\n            rh = self.get_height(n.right)\n            n.height = max(lh, rh) + 1\n            balance_factor = lh - rh\n            n.num_total = 1 + self.get_num_total(n.left) + self.get_num_total(n.right)\n            n.num_left = 1 + self.get_num_total(n.left)\n            if balance_factor > 1:\n                if self.get_height(n.left.left) < self.get_height(n.left.right):\n                    self._rotate_left(n.left)\n                self._rotate_right(n)\n            elif balance_factor < -1:\n                if self.get_height(n.right.right) < self.get_height(n.right.left):\n                    self._rotate_right(n.right)\n                self._rotate_left(n)\n            else:\n                n = n.parent\n\n    def _remove_one(self, node):\n        replacement = node.left or node.right\n        if node.parent:\n            if AvlTree._is_left(node):\n                node.parent.left = replacement\n            else:\n                node.parent.right = replacement\n            replacement.parent = node.parent\n            node.parent = None\n        else:\n            self._tree = replacement\n            replacement.parent = None\n        node.left = None\n        node.right = None\n        node.parent = None\n        self._rebalance(replacement)\n\n    def _remove_leaf(self, node):\n        if node.parent:\n            if AvlTree._is_left(node):\n                node.parent.left = None\n            else:\n                node.parent.right = None\n            self._rebalance(node.parent)\n        else:\n            self._tree = None\n        node.parent = None\n        node.left = None\n        node.right = None\n\n    def remove(self, k):\n        node = self._get_node(k)\n        if not node:\n            return\n        if AvlTree._is_leaf(node):\n            self._remove_leaf(node)\n            return\n        if node.left and node.right:\n            nxt = AvlTree._get_next(node)\n            node.key = nxt.key\n            node.value = nxt.value\n            if self._is_leaf(nxt):\n                self._remove_leaf(nxt)\n            else:\n                self._remove_one(nxt)\n            self._rebalance(node)\n        else:\n            self._remove_one(node)\n\n    def get(self, k):\n        node = self._get_node(k)\n        return node.value if node else -1\n\n    def _get_node(self, k):\n        if not self._tree:\n            return None\n        node = self._tree\n        while node:\n            if k < node.key:\n                node = node.left\n            elif node.key < k:\n                node = node.right\n            else:\n                return node\n        return None\n\n    def get_at(self, pos):\n        x = pos + 1\n        node = self._tree\n        while node:\n            if x < node.num_left:\n                node = node.left\n            elif node.num_left < x:\n                x -= node.num_left\n                node = node.right\n            else:\n                return (node.key, node.value)\n        raise IndexError('Out of ranges')\n\n    @staticmethod\n    def _is_left(node):\n        return node.parent.left and node.parent.left == node\n\n    @staticmethod\n    def _is_leaf(node):\n        return node.left is None and node.right is None\n\n    def _rotate_right(self, node):\n        if not node.parent:\n            self._tree = node.left\n            node.left.parent = None\n        elif AvlTree._is_left(node):\n            node.parent.left = node.left\n            node.left.parent = node.parent\n        else:\n            node.parent.right = node.left\n            node.left.parent = node.parent\n        bk = node.left.right\n        node.left.right = node\n        node.parent = node.left\n        node.left = bk\n        if bk:\n            bk.parent = node\n        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1\n        node.num_total = 1 + self.get_num_total(node.left) + self.get_num_total(node.right)\n        node.num_left = 1 + self.get_num_total(node.left)\n\n    def _rotate_left(self, node):\n        if not node.parent:\n            self._tree = node.right\n            node.right.parent = None\n        elif AvlTree._is_left(node):\n            node.parent.left = node.right\n            node.right.parent = node.parent\n        else:\n            node.parent.right = node.right\n            node.right.parent = node.parent\n        bk = node.right.left\n        node.right.left = node\n        node.parent = node.right\n        node.right = bk\n        if bk:\n            bk.parent = node\n        node.height = max(self.get_height(node.left), self.get_height(node.right)) + 1\n        node.num_total = 1 + self.get_num_total(node.left) + self.get_num_total(node.right)\n        node.num_left = 1 + self.get_num_total(node.left)\n\n    @staticmethod\n    def _get_next(node):\n        if not node.right:\n            return node.parent\n        n = node.right\n        while n.left:\n            n = n.left\n        return n\n\nclass SegmentTree:\n\n    def __init__(self, data, default=0, func=lambda a, b: a + b):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        if start == stop:\n            return self.__getitem__(start)\n        stop += 1\n        start += self._size\n        stop += self._size\n        res = self._default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n\n    def __repr__(self):\n        return 'SegmentTree({0})'.format(self.data)\n\nclass Factorial:\n\n    def __init__(self, MOD):\n        self.MOD = MOD\n        self.factorials = [1, 1]\n        self.invModulos = [0, 1]\n        self.invFactorial_ = [1, 1]\n\n    def calc(self, n):\n        if n <= -1:\n            print('Invalid argument to calculate n!')\n            print('n must be non-negative value. But the argument was ' + str(n))\n            exit()\n        if n < len(self.factorials):\n            return self.factorials[n]\n        nextArr = [0] * (n + 1 - len(self.factorials))\n        initialI = len(self.factorials)\n        prev = self.factorials[-1]\n        m = self.MOD\n        for i in range(initialI, n + 1):\n            prev = nextArr[i - initialI] = prev * i % m\n        self.factorials += nextArr\n        return self.factorials[n]\n\n    def inv(self, n):\n        if n <= -1:\n            print('Invalid argument to calculate n^(-1)')\n            print('n must be non-negative value. But the argument was ' + str(n))\n            exit()\n        p = self.MOD\n        pi = n % p\n        if pi < len(self.invModulos):\n            return self.invModulos[pi]\n        nextArr = [0] * (n + 1 - len(self.invModulos))\n        initialI = len(self.invModulos)\n        for i in range(initialI, min(p, n + 1)):\n            next = -self.invModulos[p % i] * (p // i) % p\n            self.invModulos.append(next)\n        return self.invModulos[pi]\n\n    def invFactorial(self, n):\n        if n <= -1:\n            print('Invalid argument to calculate (n^(-1))!')\n            print('n must be non-negative value. But the argument was ' + str(n))\n            exit()\n        if n < len(self.invFactorial_):\n            return self.invFactorial_[n]\n        self.inv(n)\n        nextArr = [0] * (n + 1 - len(self.invFactorial_))\n        initialI = len(self.invFactorial_)\n        prev = self.invFactorial_[-1]\n        p = self.MOD\n        for i in range(initialI, n + 1):\n            prev = nextArr[i - initialI] = prev * self.invModulos[i % p] % p\n        self.invFactorial_ += nextArr\n        return self.invFactorial_[n]\n\nclass Combination:\n\n    def __init__(self, MOD):\n        self.MOD = MOD\n        self.factorial = Factorial(MOD)\n\n    def ncr(self, n, k):\n        if k < 0 or n < k:\n            return 0\n        k = min(k, n - k)\n        f = self.factorial\n        return f.calc(n) * f.invFactorial(max(n - k, k)) * f.invFactorial(min(k, n - k)) % self.MOD\n\ndef powm(a, n, m):\n    if a == 1 or n == 0:\n        return 1\n    if n % 2 == 0:\n        s = powm(a, n // 2, m)\n        return s * s % m\n    else:\n        return a * powm(a, n - 1, m) % m\n\ndef sort_list(list1, list2):\n    zipped_pairs = zip(list2, list1)\n    z = [x for (_, x) in sorted(zipped_pairs)]\n    return z\n\ndef product(l):\n    por = 1\n    for i in range(len(l)):\n        por *= l[i]\n    return por\n\ndef binarySearchCount(arr, n, key):\n    left = 0\n    right = n - 1\n    count = 0\n    while left <= right:\n        mid = int((right + left) / 2)\n        if arr[mid] < key:\n            count = mid + 1\n            left = mid + 1\n        else:\n            right = mid - 1\n    return count\n\ndef countdig(n):\n    c = 0\n    while n > 0:\n        n //= 10\n        c += 1\n    return c\n\ndef binary(x, length):\n    y = bin(x)[2:]\n    return y if len(y) >= length else '0' * (length - len(y)) + y\n\ndef countGreater(arr, n, k):\n    l = 0\n    r = n - 1\n    leftGreater = n\n    while l <= r:\n        m = int(l + (r - l) / 2)\n        if arr[m] >= k:\n            leftGreater = m\n            r = m - 1\n        else:\n            l = m + 1\n    return n - leftGreater\nfrom math import inf, log2\n\nclass LazySegmentTree:\n\n    def __init__(self, array, func=max):\n        self.n = len(array)\n        self.size = 2 ** (int(log2(self.n - 1)) + 1) if self.n != 1 else 1\n        self.func = func\n        self.default = 0 if self.func != min else inf\n        self.data = [self.default] * (2 * self.size)\n        self.lazy = [0] * (2 * self.size)\n        self.process(array)\n\n    def process(self, array):\n        self.data[self.size:self.size + self.n] = array\n        for i in range(self.size - 1, -1, -1):\n            self.data[i] = self.func(self.data[2 * i], self.data[2 * i + 1])\n\n    def push(self, index):\n        self.lazy[2 * index] += self.lazy[index]\n        self.lazy[2 * index + 1] += self.lazy[index]\n        self.data[2 * index] += self.lazy[index]\n        self.data[2 * index + 1] += self.lazy[index]\n        self.lazy[index] = 0\n\n    def build(self, index):\n        index >>= 1\n        while index:\n            self.data[index] = self.func(self.data[2 * index], self.data[2 * index + 1]) + self.lazy[index]\n            index >>= 1\n\n    def query(self, alpha, omega):\n        res = self.default\n        alpha += self.size\n        omega += self.size + 1\n        for i in range(len(bin(alpha)[2:]) - 1, 0, -1):\n            self.push(alpha >> i)\n        for i in range(len(bin(omega - 1)[2:]) - 1, 0, -1):\n            self.push(omega - 1 >> i)\n        while alpha < omega:\n            if alpha & 1:\n                res = self.func(res, self.data[alpha])\n                alpha += 1\n            if omega & 1:\n                omega -= 1\n                res = self.func(res, self.data[omega])\n            alpha >>= 1\n            omega >>= 1\n        return res\n\n    def update(self, alpha, omega, value):\n        alpha += self.size\n        omega += self.size + 1\n        (l, r) = (alpha, omega)\n        while alpha < omega:\n            if alpha & 1:\n                self.data[alpha] += value\n                self.lazy[alpha] += value\n                alpha += 1\n            if omega & 1:\n                omega -= 1\n                self.data[omega] += value\n                self.lazy[omega] += value\n            alpha >>= 1\n            omega >>= 1\n        self.build(l)\n        self.build(r - 1)\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nlis = lambda : list(map(int, input().split()))\nsin = lambda : int(input())\nmany = lambda : map(int, input().split())\nalp = 'abcdefghijklmnopqrstuvwxyz'\nALP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nINF = 10 ** 18\nimport math\n\ndef highestPowerof2(n):\n    p = int(math.log(n, 2))\n    return int(pow(2, p))\nv = ['a', 'e', 'i', 'o', 'u']\n\ndef solve():\n    n = sin()\n    s = input()\n    p = -1\n    c = 0\n    for i in range(n):\n        if s[i] not in v:\n            c += 1\n        else:\n            c = 0\n        if c == 4:\n            print('NO')\n            return\n    print('YES')\nfrom collections import Counter\nfrom collections import OrderedDict\n\ndef solve2():\n    n = sin()\n    a = input()\n    b = input()\n    if a == b or (a.count('1') > 0 and (b.count('00') > 0 or b.count('11') > 0)):\n        print('YES')\n    else:\n        print('NO')\ntestisisisisisis = int(input())\nfor testis in range(testisisisisisis):\n    solve2()", "stringcasestes = int(input())\nfor _ in range(stringcasestes):\n    numbersins = int(input())\n    strone1 = str(input())\n    strtwo2 = str(input())\n    oneisone = 1\n    if strone1 == strtwo2:\n        print('YES')\n    elif '1' not in strone1:\n        if '1' in strtwo2:\n            print('NO')\n    elif '11' in strtwo2 or '00' in strtwo2:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    s0 = input()\n    if s == s0:\n        print('YES')\n    elif s.count('1') == 0:\n        print('NO')\n    else:\n        (temp, mode) = (s0[0], 1)\n        for i in range(n - 1):\n            if mode:\n                if s0[0] == '1':\n                    temp += '0'\n                else:\n                    temp += '1'\n                mode = 0\n            else:\n                temp += s0[0]\n                mode = 1\n        if s0 == temp:\n            print('NO')\n        else:\n            print('YES')", "from collections import defaultdict, Counter, OrderedDict, deque\nfrom heapq import heapify, heappop, heappush\n\ndef func():\n    n = int(input())\n    a = input()\n    b = input()\n    if '1' not in a:\n        if '1' not in b:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        bl = True\n        for i in range(1, n):\n            if b[i] == b[i - 1]:\n                bl = False\n        if bl:\n            if a == b:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('YES')\ntc = int(input())\nwhile tc > 0:\n    func()\n    tc -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    f = 0\n    if a == b:\n        print('YES')\n        continue\n    if b.count('1') and (not a.count('1')):\n        print('NO')\n    else:\n        for j in range(len(b) - 1):\n            if b[j] == b[j + 1]:\n                f = 1\n                break\n        if f == 1:\n            print('YES')\n        else:\n            print('NO')", "import sys\ninput = sys.stdin.readline\ntestcase = int(input())\nwhile testcase:\n    testcase -= 1\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    ind = -1\n    for i in range(n):\n        if s1[i] == '1':\n            ind = i\n            break\n    ct1 = 0\n    ct2 = 0\n    for i in range(n):\n        if s1[i] == '1':\n            ct1 += 1\n        if s2[i] == '1':\n            ct2 += 1\n    if s1 == s2:\n        print('YES')\n    elif ind == -1:\n        print('NO')\n    else:\n        a1 = ''\n        a2 = ''\n        for i in range(n):\n            if i % 2 == 0:\n                a1 += '1'\n                a2 += '0'\n            else:\n                a1 += '0'\n                a2 += '1'\n        s22 = ''\n        for i in range(n):\n            s22 += s2[i]\n        if s22 == a1:\n            print('NO')\n        elif s22 == a2:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n        continue\n    a0 = a1 = 0\n    b0 = b1 = 0\n    for i in range(n):\n        if a[i] == '0':\n            a0 += 1\n        else:\n            a1 += 1\n        if b[i] == '0':\n            b0 += 1\n        else:\n            b1 += 1\n    if a1 == 0 and b1 > 0:\n        print('NO')\n        continue\n    flag = 0\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            flag = 1\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    N9 = int(input())\n    A9 = input()\n    B9 = input()\n    if A9 == B9:\n        print('YES')\n    elif '1' not in A9:\n        if '1' in B9:\n            print('NO')\n    elif '11' in B9 or '00' in B9:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lt = input()\n    rt = input()\n    onesa = sum((int(x) for x in lt))\n    onesb = sum((int(x) for x in rt))\n    if onesa == 0 and onesb > 0:\n        print('NO')\n        continue\n    if len(lt) == 2 and onesa == 1 and (onesb == 1) and (lt[0] != rt[0]):\n        print('NO')\n        continue\n    (flaga, flagb) = (True, lt[0] == rt[0])\n    for i in range(1, len(lt)):\n        if rt[i] == rt[i - 1]:\n            flaga = False\n            break\n        if rt[i] != lt[i]:\n            flagb = False\n    if flaga and (not flagb):\n        print('NO')\n        continue\n    print('YES')", "for _ in range(int(input())):\n    N1 = int(input())\n    A1 = input()\n    B1 = input()\n    if A1 == B1:\n        print('YES')\n    elif '1' not in A1:\n        if '1' in B1:\n            print('NO')\n    elif '11' in B1 or '00' in B1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    if A == B:\n        print('YES')\n        continue\n    if '1' in B and '1' not in A:\n        print('NO')\n        continue\n    if len(set(B)) == 1:\n        print('YES')\n        continue\n    sink = False\n    for (i, j) in zip(B[:-1], B[1:]):\n        if i == j:\n            sink = True\n    if sink:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    N = int(input())\n    A = input()\n    B = input()\n    if A == B:\n        print('YES')\n    elif '1' not in A:\n        if '1' in B:\n            print('NO')\n    elif '11' in B or '00' in B:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    if b.count('0') != n and a.count('0') == n:\n        print('NO')\n    elif b.count('0') == n:\n        print('YES')\n    elif b.count('1') == n and a.count('0') != n:\n        print('YES')\n    else:\n        (check, flag) = (False, False)\n        for i in range(n):\n            if a[i] != b[i]:\n                check = True\n                break\n        if check:\n            for i in range(n - 1):\n                if b[i] == b[i + 1]:\n                    flag = True\n                    break\n            if flag:\n                if a.count('0') != n:\n                    print('YES')\n                else:\n                    print('NO')\n            else:\n                print('NO')\n        else:\n            print('YES')", "for i in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    if s1 == s2:\n        print('YES')\n    elif '1' not in s1:\n        if '1' in s2:\n            print('NO')\n    elif '11' in s2 or '00' in s2:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    s = str()\n    s1 = str()\n    for i in range(n):\n        if i % 2 == 0:\n            s += '1'\n            s1 += '0'\n        else:\n            s += '0'\n            s1 += '1'\n    if a == b:\n        print('YES')\n    else:\n        z = 0\n        for i in range(n):\n            if a[i] == '0':\n                z += 1\n        if z == n:\n            print('NO')\n        elif b == s:\n            print('NO')\n        elif b == s1:\n            print('NO')\n        else:\n            print('YES')", "def solvemypuzzle():\n    n = int(input())\n    stringa = input()\n    stringb = input()\n    check = False\n    if stringa == stringb:\n        return 'YES'\n    for i in range(n):\n        if stringa[i] == '1':\n            check = True\n    if not check:\n        return 'NO'\n    check = False\n    for i in range(1, n):\n        if stringb[i] == stringb[i - 1]:\n            check = True\n    if check:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solvemypuzzle())", "for _ in range(int(input())):\n    n = int(input())\n    (s1, s2) = (input(), input())\n    if s1 == s2:\n        print('YES')\n        continue\n    if s1.count('1') == 0:\n        print('YES') if s2.count('1') == 0 else print('NO')\n        continue\n    (mode, found) = (s2[0], True)\n    for i in s2:\n        if i != mode:\n            print('YES')\n            found = False\n            break\n        mode = '0' if mode == '1' else '1'\n    if found:\n        print('NO')", "import math\nimport collections\nfor _ in range(int(input())):\n    N = int(input())\n    A = input()\n    B = input()\n    if A == B:\n        print('YES')\n    elif A.count('1'):\n        ans = 0\n        for i in range(N - 1):\n            if B[i] == '0' and B[i + 1] == '0' or (B[i] == '1' and B[i + 1] == '1'):\n                ans = 1\n        if ans:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    if 'dfvjdgjtr9tv' == 4344343:\n        print('Tanmay')\n    b = input()\n    if a == b:\n        print('YES')\n        continue\n    if a == '0' * n:\n        print('NO')\n        continue\n    c = b[0]\n    s = ''\n    if c == '1':\n        s = '10' * (n // 2)\n        if n % 2 != 0:\n            s += '1'\n    else:\n        s = '01' * (n // 2)\n        if n % 2 != 0:\n            s += '0'\n    if s == b:\n        print('NO')\n        continue\n    print('YES')", "for i in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    if A == '0' * n and B != '0' * n:\n        print('NO')\n        continue\n    if n == 1:\n        if A == B:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if n % 2 == 0:\n        if A == B:\n            print('YES')\n        elif B == '10' * (n // 2) or B == '01' * (n // 2):\n            print('NO')\n        else:\n            print('YES')\n    elif A == B:\n        print('YES')\n    elif B == '10' * (n // 2) + '1' or B == '01' * (n // 2) + '0':\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    if A == '0' * n and B != '0' * n:\n        print('NO')\n        continue\n    if n == 1:\n        if A == B:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if n % 2 == 0:\n        if A == B:\n            print('YES')\n        elif B == '10' * (n // 2) or B == '01' * (n // 2):\n            print('NO')\n        else:\n            print('YES')\n    elif A == B:\n        print('YES')\n    elif B == '10' * (n // 2) + '1' or B == '01' * (n // 2) + '0':\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    if A == '0' * n and B != '0' * n:\n        print('NO')\n        continue\n    if n == 1:\n        if A == B:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if n % 2 == 0:\n        if A == B:\n            print('YES')\n        elif B == '10' * (n // 2) or B == '01' * (n // 2):\n            print('NO')\n        else:\n            print('YES')\n    elif A == B:\n        print('YES')\n    elif B == '10' * (n // 2) + '1' or B == '01' * (n // 2) + '0':\n        print('NO')\n    else:\n        print('YES')", "def BinToDec(value):\n    return int(value, 2)\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    a_dec = BinToDec(a)\n    flag = 0\n    if a == b:\n        print('YES')\n    elif a_dec == 0:\n        print('NO')\n    else:\n        for i in range(n - 1):\n            if b[i] == b[i + 1]:\n                flag = 1\n                break\n        if flag == 1:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = input()\n    b = input()\n    if n == 1:\n        if a == b:\n            print('YES')\n        else:\n            print('NO')\n    elif a == b:\n        print('YES')\n    else:\n        x = '0' * n\n        if a == x:\n            print('NO')\n        else:\n            flag = 0\n            for i in range(n - 1):\n                if b[i] == b[i + 1]:\n                    flag = 1\n                    print('YES')\n                    break\n            if flag == 0:\n                print('NO')", "for _ in range(int(input())):\n    lengthOfBinaryString = int(input())\n    binaryStringA = input().strip()\n    binaryStringB = input().strip()\n    if binaryStringA == binaryStringB:\n        print('YES')\n        continue\n    tempString = ''\n    for char in binaryStringA:\n        tempString += '0'\n    if tempString == binaryStringA:\n        print('NO')\n        continue\n    elif tempString == binaryStringB:\n        print('YES')\n        continue\n    consecutive = False\n    previousChar = ''\n    for char in binaryStringB:\n        if char == previousChar:\n            consecutive = True\n            break\n        previousChar = char\n    if not consecutive:\n        print('NO')\n        continue\n    print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    elif a.count('1') == 0:\n        print('NO')\n    else:\n        z = 0\n        for i in range(len(b) - 1):\n            if b[i] == b[i + 1]:\n                z += 1\n                break\n        if z == 1:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(str(input()))\n    b = list(str(input()))\n    alter = [[], []]\n    for i in range(n):\n        alter[0].append('0') if i % 2 == 0 else alter[0].append('1')\n        alter[1].append('1') if i % 2 == 0 else alter[1].append('0')\n    if b == alter[0] or b == alter[1]:\n        print('YES') if a == b else print('NO')\n    elif a.count('1') >= 1:\n        print('YES')\n    elif a == b:\n        print('YES')\n    else:\n        print('NO')", "def li(s):\n    l = []\n    for x in s:\n        l.append(x)\n    return l\nfor _ in range(int(input())):\n    n = int(input())\n    a = str(input())\n    b = str(input())\n    (a, b) = (li(a), li(b))\n    alter = [[], []]\n    for i in range(n):\n        alter[0].append('0') if i % 2 == 0 else alter[0].append('1')\n        alter[1].append('1') if i % 2 == 0 else alter[1].append('0')\n    if b == alter[0] or b == alter[1]:\n        print('YES') if a == b else print('NO')\n    elif a.count('1') >= 1:\n        print('YES')\n    elif a == b:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    n = int(input())\n    a = input()\n    b = input()\n    one = 0\n    alt = 1\n    eq = 1\n    for i in range(0, n):\n        if a[i] != b[i]:\n            eq = 0\n        if a[i] == '1':\n            one = 1\n        if i + 1 < n and b[i] == b[i + 1]:\n            alt = 0\n    if eq:\n        print('YES')\n    elif one == 1 and alt == 0:\n        print('YES')\n    else:\n        print('NO')\n    t = t - 1", "def xo(n, a, b):\n    ca = cb = 0\n    for i in range(n):\n        if a[i] == '1':\n            ca += 1\n        if b[i] == '1':\n            cb += 1\n    if a == b:\n        print('YES')\n        return\n    if ca > 0:\n        f = 0\n        for i in range(1, n):\n            if b[i] == b[i - 1]:\n                f = 1\n        if f == 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    return\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    xo(n, a, b)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    elif a == '0' * n:\n        print('NO')\n    else:\n        lf = b[0]\n        c = 1\n        for i in range(1, n):\n            cf = b[i]\n            if cf == lf:\n                c += 1\n            else:\n                c = 1\n            if c > 1:\n                print('YES')\n                break\n            lf = cf\n        else:\n            print('NO')", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    cnt1 = 0\n    cnt2 = 0\n    for i in range(n):\n        if a[i] == '1':\n            cnt1 += 1\n        if b[i] == '1':\n            cnt2 += 1\n    if cnt1 == 0 and cnt2 != 0:\n        print('NO')\n        continue\n    if cnt1 == 0 and cnt2 == 0:\n        print('YES')\n        continue\n    if cnt1 != 0 and cnt2 == 0:\n        print('YES')\n        continue\n    same = True\n    for i in range(n):\n        if a[i] != b[i]:\n            same = False\n            break\n    if same == True:\n        print('YES')\n        continue\n    cur = b[0]\n    flag = True\n    need = ''\n    if cur == '0':\n        need = '1'\n    else:\n        need = '0'\n    for i in range(1, n):\n        if b[i] != need:\n            flag = False\n            break\n        if need == '1':\n            need = '0'\n        else:\n            need = '1'\n    if flag == True:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    if A == B:\n        print('YES')\n        continue\n    a = int(A[-1])\n    b = 0\n    for i in range(n - 1):\n        a += int(A[i])\n        if B[i] == B[i + 1]:\n            b += 1\n    if a > 0 and b > 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    else:\n        hasOne = False\n        for char in a:\n            if char == '1':\n                hasOne = True\n                break\n        alterating = True\n        for i in range(1, len(b)):\n            if b[i] == b[i - 1]:\n                alterating = False\n        if hasOne and (not alterating):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = str(input())\n    b = str(input())\n    s = list(a)\n    ss = list(b)\n    if a == b:\n        print('YES')\n        continue\n    if '1' not in s and '1' in ss:\n        print('NO')\n        continue\n    (x, y) = ('', '')\n    fl = 0\n    for i in range(n):\n        x += str(fl)\n        y += str(fl ^ 1)\n        fl ^= 1\n    if x != b and y != b:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    else:\n        one_zero = ''\n        zero_one = ''\n        for j in range(n):\n            if j & 1:\n                one_zero += '1'\n                zero_one += '0'\n            else:\n                one_zero += '0'\n                zero_one += '1'\n        num = a.count('1')\n        if b == one_zero or b == zero_one or num == 0:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n        continue\n    oz = ''\n    zo = ''\n    for i in range(n):\n        if i & 1:\n            oz += '1'\n            zo += '0'\n        else:\n            oz += '0'\n            zo += '1'\n    count = a.count('1')\n    if count >= 1:\n        if b == oz or b == zo:\n            if a == b:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    x = a.count('1')\n    y = b.count('1')\n    if x == 0 and y > 0:\n        print('NO')\n    else:\n        s1 = ''\n        s2 = ''\n        for i in range(n):\n            if i % 2 == 0:\n                s1 = s1 + '1'\n                s2 = s2 + '0'\n            else:\n                s1 = s1 + '0'\n                s2 = s2 + '1'\n        if a == b:\n            print('YES')\n        elif b == s1 or b == s2:\n            print('NO')\n        else:\n            print('YES')", "def main():\n    for _ in range(int(input())):\n        N = int(input())\n        test_string = list(input())\n        final_string = list(input())\n        zero_one = []\n        one_zero = []\n        for i in range(N):\n            if i % 2 == 0:\n                zero_one += '0'\n                one_zero += '1'\n            else:\n                zero_one += '1'\n                one_zero += '0'\n        if test_string.count('1') > 0:\n            if final_string == zero_one or final_string == one_zero:\n                if test_string == final_string:\n                    print('YES')\n                else:\n                    print('NO')\n            else:\n                print('YES')\n        elif test_string == final_string:\n            print('YES')\n        else:\n            print('NO')\n    return 0\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    elif a.count('1') > 0:\n        c1 = '01' * ((n + 1) // 2)\n        c2 = '10' * ((n + 1) // 2)\n        if b == c1[:n] or b == c2[:n]:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    elif a == '0' * n:\n        print('NO')\n    elif '00' not in b and '11' not in b:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nM = int(1000000000.0) + 7\n\ndef solve():\n    n = int(input())\n    a = input().strip('\\n')\n    b = input().strip('\\n')\n    if a == b:\n        return 'YES'\n    if '1' not in a:\n        return 'NO'\n    for i in range(n - 1):\n        if b[i] == b[i + 1]:\n            return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    N = int(input())\n    A = input()\n    B = input()\n    one_zero = ''\n    zero_one = ''\n    for i in range(N):\n        if i % 2 == 0:\n            zero_one += '0'\n            one_zero += '1'\n        else:\n            zero_one += '1'\n            one_zero += '0'\n    count = A.count('1')\n    if count > 0:\n        if (B == one_zero or B == zero_one) and A == B:\n            print('YES')\n        elif (B == one_zero or B == zero_one) and A != B:\n            print('NO')\n        else:\n            print('YES')\n    elif A == B:\n        print('YES')\n    else:\n        print('NO')", "def solver(n, A, B):\n    if A == B:\n        return 'YES'\n    ones_in_A = A.count('1')\n    ones_in_B = B.count('1')\n    if ones_in_B == 0:\n        return 'YES'\n    elif ones_in_A == 0:\n        return 'NO'\n    else:\n        consecutive = False\n        for i in range(1, n):\n            if B[i - 1] == B[i]:\n                consecutive = True\n                break\n        return 'YES' if consecutive else 'NO'\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    A = input()\n    B = input()\n    print(solver(n, A, B))", "for _ in range(int(input())):\n    l = int(input())\n    s1 = input()\n    s2 = input()\n    c = 0\n    if s1 == s2:\n        print('YES')\n    elif '1' not in s1:\n        if '1' in s2:\n            print('NO')\n    elif '00' in s2 or '11' in s2:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    elif a != b and a.count('0') == len(a):\n        print('NO')\n    elif '11' in b or '00' in b:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n        continue\n    if b.count('1') >= 1 and a.count('1') == 0:\n        print('NO')\n        continue\n    (p, q) = ('', '')\n    for i in range(n):\n        if i % 2:\n            p += '0'\n            q += '1'\n        else:\n            p += '1'\n            q += '0'\n    if b == p or b == q:\n        print('NO')\n        continue\n    print('YES')", "def consecutive_in(a, n):\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            return True\n    return False\n\ndef one_in(a, n):\n    for i in range(n):\n        if a[i] == '1':\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    if consecutive_in(b, n) and (one_in(a, n) or not one_in(b, n)) or b == a:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    l = int(input())\n    s1 = input()\n    s2 = input()\n    c = 0\n    if s1 == s2:\n        print('YES')\n    elif '1' not in s1:\n        if '1' in s2:\n            print('NO')\n    elif '00' in s2 or '11' in s2:\n        print('YES')\n    else:\n        print('NO')", "from heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom tkinter.tix import Tree\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    n = ii()\n    s1 = ip()\n    s2 = ip()\n    f = False\n    for i in range(n - 1):\n        if s2[i] == s2[i + 1]:\n            f = True\n            break\n    if s1 == s2 or (s1.find('1') >= 0 and f):\n        print('YES')\n    else:\n        print('NO')", "st = '10' * 50010\nfor i in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    l = list(s1)\n    if s1 == s2:\n        print('YES')\n        continue\n    one = s1.count('1')\n    on = s2.count('1')\n    if n == 2:\n        if s1 == '00':\n            print('NO')\n        elif s1 == '11' and (s2 == '10' or s2 == '01'):\n            print('NO')\n        elif s1 == '10' and s2 == '01' or (s1 == '01' and s2 == '10'):\n            print('NO')\n        else:\n            print('YES')\n    elif s1.count('1') == 0:\n        print('NO')\n    else:\n        c = s2[0]\n        for j in s2[1:]:\n            if j == c:\n                print('YES')\n                break\n            c = j\n        else:\n            print('NO')", "for _ in range(int(input())):\n    N = int(input())\n    s = input()\n    t = input()\n    (cnt1, cnt2) = (s.count('1'), t.count('1'))\n    if cnt1 == 0 and cnt2:\n        print('NO')\n        continue\n    ok = False\n    for i in range(1, N):\n        ok |= t[i] == t[i - 1]\n    print('YES' if ok or s == t else 'NO')", "T = int(input())\nwhile T > 0:\n    n = int(input())\n    str1 = input()\n    str2 = input()\n    flag = True\n    for i in range(1, n):\n        if str2[i] == str2[i - 1]:\n            flag = False\n    if flag:\n        if str1 == str2:\n            print('YES')\n        else:\n            print('NO')\n    elif int(str1) == 0 and int(str2) != 0:\n        print('NO')\n    else:\n        print('YES')\n    T -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    one_count = 0\n    for i in range(n):\n        one_count += a[i] == '1'\n    consecutive_same = 0\n    for i in range(n - 1):\n        consecutive_same += b[i] == b[i + 1]\n    if one_count > 0 and consecutive_same > 0 or a == b:\n        print('YES')\n    else:\n        print('NO')", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        s = inp()\n        t = inp()\n        if s == t:\n            print('YES')\n            continue\n        p = '10' * n\n        p = p[:n]\n        q = '01' * n\n        q = q[:n]\n        if t == p or t == q:\n            print('NO')\n            continue\n        if '1' not in s and '1' in t:\n            print('NO')\n        else:\n            print('YES')\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    elif '1' in a and ('00' in b or '11' in b):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    f = 0\n    if a == b:\n        print('YES')\n        continue\n    for i in a:\n        if i == '1':\n            f = 1\n            break\n    if f == 0:\n        print('NO')\n        continue\n    f = 1\n    for i in range(n - 1):\n        if b[i] != b[i + 1]:\n            continue\n        else:\n            f = 0\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    f = 0\n    if a == b:\n        print('YES')\n        continue\n    for i in a:\n        if i == '1':\n            f = 1\n            break\n    if f == 0:\n        print('NO')\n        continue\n    f = 1\n    for i in range(n - 1):\n        if b[i] != b[i + 1]:\n            continue\n        else:\n            f = 0\n            break\n    if f == 1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = input()\n    B = input()\n    if A == B:\n        print('YES')\n        continue\n    elif int('0b' + A, 2) == 0:\n        print('NO')\n        continue\n    flag = int(B[0])\n    ff = 1\n    for i in range(n):\n        if flag != int(B[i]):\n            ff = 0\n            break\n        flag ^= 1\n    if ff:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print('YES')\n    elif n == 1:\n        print('NO')\n    else:\n        a1 = 0\n        b1 = 0\n        for i in range(n):\n            if a[i] == '1':\n                a1 += 1\n            if b[i] == '1':\n                b1 += 1\n        if a1 == 0 and b1 > 0:\n            print('NO')\n        else:\n            for i in range(1, n):\n                if b[i - 1] == b[i]:\n                    print('YES')\n                    break\n            else:\n                print('NO')"]