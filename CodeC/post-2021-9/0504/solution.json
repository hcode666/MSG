["from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    N = int(input())\n    if N == 1:\n        print(1)\n        print(1)\n        continue\n    if N % 2 == 0:\n        N_copy = N\n        ret = []\n        while N > 0:\n            l = len(bin(N)) - 2\n            start = (1 << l) - 1 - N\n            ret += list(range(start, N + 1))\n            N = start - 1\n        print(*range(N_copy, 0, -1))\n        print(*ret)\n    else:\n        print(-1)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    N = int(input())\n    if N == 1:\n        print(1)\n        print(1)\n        continue\n    if N % 2 == 0:\n        N_copy = N\n        ret = []\n        while N > 0:\n            l = len(bin(N)) - 2\n            start = (1 << l) - 1 - N\n            ret += list(range(start, N + 1))\n            N = start - 1\n        print(*range(N_copy, 0, -1))\n        print(*ret)\n    else:\n        print(-1)", "import sys\n\ndef get_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    if n == 1:\n        print(1)\n        print(1)\n        continue\n    if n % 2 != 0:\n        print(-1)\n        continue\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    b = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        if b[i] != 0:\n            continue\n        val = bin(i + 1)[2:]\n        st = ''\n        for j in range(len(val)):\n            if val[j] == '0':\n                st += '1'\n            else:\n                st += '0'\n        val2 = int(st, 2)\n        b[val2 - 1] = i + 1\n        b[i] = val2\n    print(*a)\n    print(*b)", "import sys\n\ndef get_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    if n == 1:\n        print(1)\n        print(1)\n        continue\n    if n % 2 != 0:\n        print(-1)\n        continue\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    b = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        if b[i] != 0:\n            continue\n        val = bin(i + 1)[2:]\n        st = ''\n        for j in range(len(val)):\n            if val[j] == '0':\n                st += '1'\n            else:\n                st += '0'\n        val2 = int(st, 2)\n        b[val2 - 1] = i + 1\n        b[i] = val2\n    print(*a)\n    print(*b)", "import sys\n\ndef get_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    if n == 1:\n        print(1)\n        print(1)\n        continue\n    if n % 2 != 0:\n        print(-1)\n        continue\n    a = []\n    for i in range(1, n + 1):\n        a.append(i)\n    b = [0 for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        if b[i] != 0:\n            continue\n        val = bin(i + 1)[2:]\n        st = ''\n        for j in range(len(val)):\n            if val[j] == '0':\n                st += '1'\n            else:\n                st += '0'\n        val2 = int(st, 2)\n        b[val2 - 1] = i + 1\n        b[i] = val2\n    print(*a)\n    print(*b)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    N = int(input())\n    if N == 1:\n        print(1)\n        print(1)\n        continue\n    if N % 2 == 0:\n        N_copy = N\n        ret = []\n        while N > 0:\n            l = len(bin(N)) - 2\n            start = (1 << l) - 1 - N\n            ret += list(range(start, N + 1))\n            N = start - 1\n        print(*range(N_copy, 0, -1))\n        print(*ret)\n    else:\n        print(-1)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    N = int(input())\n    if N == 1:\n        print(1)\n        print(1)\n        continue\n    if N % 2 == 0:\n        N_copy = N\n        ret = []\n        while N > 0:\n            l = len(bin(N)) - 2\n            start = (1 << l) - 1 - N\n            ret.extend(map(str, range(start, N + 1)))\n            N = start - 1\n        print(*range(N_copy, 0, -1))\n        print(*ret)\n    else:\n        print(-1)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n        continue\n    if not n % 2 == 0:\n        print(-1)\n        continue\n    for i in range(1, n + 1):\n        print(i, end=' ')\n    print()\n    arr = [0] * n\n    x = int(math.pow(2, math.ceil(math.log2(n))) - 1)\n    if x == n - 1:\n        arr[n - 1] = n - 1\n        arr[n - 2] = n\n        n = n - 2\n    j = x - n\n    while j > 0:\n        for i in range(j - 1, n):\n            arr[i] = x - i - 1\n        n = j - 1\n        if n == 0:\n            break\n        x = int(math.pow(2, math.ceil(math.log2(n))) - 1)\n        if x == n - 1:\n            arr[n - 1] = n - 1\n            arr[n - 2] = n\n            n = n - 2\n        j = x - n\n    print(' '.join(map(str, arr)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1, 1, sep='\\n')\n    elif n & 1 == 1:\n        print(-1)\n    else:\n        print(*list(range(1, n + 1))[::-1])\n        s1 = ''\n        d = {}\n        for i in range(n, 0, -1):\n            try:\n                s1 += str(d[i]) + ' '\n            except:\n                c = (1 << int(math.log(i, 2)) + 1) - (i + 1)\n                d[c] = i\n                s1 += str(c) + ' '\n        print(s1)", "from collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n        continue\n    x = 1\n    while x <= n:\n        x *= 2\n    if n % 2 == 0:\n        d = defaultdict(lambda : 0)\n        a = []\n        b = []\n        for i in range(n, 0, -1):\n            a.append(i)\n            if d[x - 1 - i] == 0 and x - 1 - i <= n:\n                b.append(x - 1 - i)\n                d[x - 1 - i] = 1\n            else:\n                while x > i:\n                    x = x // 2\n                x *= 2\n                b.append(x - 1 - i)\n                d[x - 1 - i] = 1\n        print(*a)\n        print(*b)\n    else:\n        print(-1)", "from math import log2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        for i in range(2):\n            print(1)\n    elif n % 2:\n        print(-1)\n    else:\n        a = [-1] * n\n        (start, end) = (-1, -1)\n        (hb, lb, bc) = (0, 0, 0)\n        (i, flag) = (n - 1, True)\n        while i >= 0:\n            if end == -1:\n                bc = int(log2(i + 1))\n                hb += 1\n                end = i\n            elif bc == int(log2(i + 1)):\n                hb += 1\n            else:\n                lb += 1\n                if hb == lb:\n                    start = i\n                    for j in range((end - start + 1) // 2):\n                        a[start + j] = end - j + 1\n                        a[end - j] = start + j + 1\n                    (end, bc, hb, lb) = (-1, 0, 0, 0)\n            i -= 1\n        if not flag:\n            print(-1)\n        else:\n            print(' '.join(map(str, range(1, n + 1))))\n            print(' '.join(map(str, a)))", "def f(n):\n    x = 1\n    while x <= n:\n        x <<= 1\n    return x - 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n    elif n % 2 == 0:\n        ar = [False for i in range(f(n) + 1)]\n        x = f(n)\n        tm = n\n        for i in range(n, 0, -1):\n            if ar[x - i] or x - i > n:\n                x = f(i)\n            ar[x - i] = True\n            print(x - i, end=' ')\n        print()\n        for i in range(n, 0, -1):\n            print(i, end=' ')\n        print()\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1, 1, sep='\\n')\n    elif n & 1 == 1:\n        print(-1)\n    else:\n        print(*list(range(1, n + 1))[::-1])\n        s1 = ''\n        d = {}\n        for i in range(n, 0, -1):\n            try:\n                s1 += str(d[i]) + ' '\n            except:\n                c = (1 << int(math.log(i, 2)) + 1) - (i + 1)\n                d[c] = i\n                s1 += str(c) + ' '\n        print(s1)", "import math\n\ndef helper():\n    return 0\n\ndef solve(n):\n    if n == 1:\n        return '1\\n1'\n    elif n & 1:\n        return '-1'\n    else:\n        s = ''\n        d = {}\n        s1 = ''\n        for i in range(n, 0, -1):\n            s += '%d ' % i\n        for i in range(n, 0, -1):\n            try:\n                s1 += '%d ' % d[i]\n            except:\n                val = 2 ** (math.floor(math.log2(i)) + 1) - 1 - i\n                d[val] = i\n                s1 += '%d ' % val\n    return s + '\\n' + s1.strip()\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfrom math import log2\nfrom math import ceil\n\ndef solve(n):\n    if n == 0:\n        return ([], [])\n    if n == 1:\n        return ([1], [1])\n    elif n == 2:\n        return ([1, 2], [2, 1])\n    a = []\n    b = []\n    high = 2 ** (1 + int(log2(n))) - 1\n    (x, y) = solve(high - n - 1)\n    for i in range(2 * n - high + 1):\n        a.append(n - i)\n        b.append(high - n + i)\n    a += x\n    b += y\n    return (a, b)\nfor T in range(int(input())):\n    n = ni()\n    if n != 1 and n % 2 == 1:\n        print(-1)\n        continue\n    (x, y) = solve(n)\n    print(*x)\n    print(*y)", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdout = open('output.txt', 'w')\n    sys.stdin = open('input.txt', 'r')\n\ndef solve():\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n    elif n % 2 != 0:\n        print(-1)\n        return\n    a = [i for i in range(1, n + 1) if i % 2 == 0]\n    b = []\n    seen = set()\n    for val in range(2, n + 1, 2):\n        res = 0\n        for i in range(32):\n            temp = res | 1 << i\n            if val & 1 == 0 and temp <= n:\n                res = temp\n            val = val >> 1\n        i = 32\n        while res in seen:\n            if res & 1:\n                res = res & ~(1 << i)\n            i -= 1\n        seen.add(res)\n        b.append(res)\n    a.extend(b)\n    b.extend(a[:n // 2])\n    print(*a)\n    print(*b)\n\ndef main():\n    sys.setrecursionlimit(10 ** 8)\n    for _ in range(int(input())):\n        solve()\nmain()", "import math\n\ndef solve(n):\n    if n == 0:\n        return ([], [])\n    if n == 2:\n        return ([1, 2], [2, 1])\n    rp = 2 ** int(math.log(n, 2))\n    nsp = (n - rp) // 2\n    (a, b) = ([rp - 1, rp], [rp, rp - 1])\n    cnp = 1\n    while cnp <= nsp:\n        (k1, k2) = (rp - 2 * cnp, rp + 2 * cnp)\n        a.insert(0, k1)\n        a.insert(0, k1 - 1)\n        a.append(k2 - 1)\n        a.append(k2)\n        b.insert(0, k2 - 1)\n        b.insert(0, k2)\n        b.append(k1)\n        b.append(k1 - 1)\n        cnp += 1\n    (pa, pb) = solve(rp - (nsp + 1) * 2)\n    pa.extend(a)\n    pb.extend(b)\n    return (pa, pb)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 2 != 0:\n        if n == 1:\n            print(1)\n            print(1)\n        else:\n            print(-1)\n        continue\n    (pa, pb) = solve(n)\n    for i in range(n):\n        print(pa[i], end=' ')\n    print('\\r')\n    for i in range(n):\n        print(pb[i], end=' ')\n    print('\\r')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n    elif n % 2 != 0:\n        print(-1)\n    else:\n        matches = {}\n        a = list(range(n, 0, -1))\n        b = []\n        for x in a:\n            if x in matches:\n                b.append(matches[x])\n            else:\n                val = x ^ 2 ** (int(math.log2(x)) + 1) - 1\n                if val == 0:\n                    val = 2 ** (int(math.log2(x)) + 1)\n                b.append(val)\n                matches[x] = val\n                matches[val] = x\n        print(' '.join([str(e) for e in a]))\n        print(' '.join([str(e) for e in b]))", "def msb(x):\n    p = 1\n    while p <= x:\n        p <<= 1\n    return p\nfor t in range(int(input())):\n    n = int(input())\n    if n == 1:\n        a = ['1']\n        b = a\n    else:\n        a = []\n        b = []\n        l = n\n        while l > 1:\n            p = msb(l) - 1\n            r = p >> 1\n            for i in range(l, r, -1):\n                j = p ^ i\n                a.extend([str(i), str(j)])\n                b.extend([str(j), str(i)])\n            l = l ^ p - 1\n    if n > 1 and n % 2:\n        print(-1)\n    else:\n        print(' '.join(a))\n        print(' '.join(b))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n    elif n % 2 != 0:\n        print(-1)\n    else:\n        matches = {}\n        a = list(range(n, 0, -1))\n        b = []\n        for x in a:\n            if x in matches:\n                b.append(matches[x])\n            else:\n                val = x ^ 2 ** (int(math.log2(x)) + 1) - 1\n                if val == 0:\n                    val = 2 ** (int(math.log2(x)) + 1)\n                b.append(val)\n                matches[x] = val\n                matches[val] = x\n        print(' '.join([str(e) for e in a]))\n        print(' '.join([str(e) for e in b]))", "import collections, math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n    elif n % 2 == 1:\n        print(-1)\n    else:\n        ans = [i for i in range(1, n + 1)]\n        print(*ans)\n        d = collections.defaultdict(lambda : 0)\n        for i in range(n, 0, -1):\n            if d[i] == 0:\n                p = int(math.log(i, 2)) + 1\n                p = 2 ** p - 1\n                d[i] = i ^ p\n                d[i ^ p] = i\n        ans = []\n        for i in range(1, n + 1):\n            ans.append(d[i])\n        print(*ans)", "def convert(n):\n    ss = bin(n)[2:]\n    s = ''\n    for i in ss:\n        if i == '0':\n            s += '1'\n        else:\n            s += '0'\n    if int(s, 2) == 0:\n        s = '1' + s\n    return int(s, 2)\nresult = []\nMAX = 4294967295\n\ndef solve(n):\n    A = [i for i in range(1, n + 1)]\n    B = [MAX for i in range(n, 0, -1)]\n    if n == 1:\n        print(1)\n        print(1)\n    elif n & 1:\n        print(-1)\n    else:\n        s = set()\n        for i in range(n - 1, 0, -1):\n            if B[i] == MAX:\n                g = convert(A[i])\n                if g <= n:\n                    if g not in s:\n                        B[i] = g\n                        s.add(g)\n                    if A[i] not in s:\n                        B[g - 1] = A[i]\n                    s.add(A[i])\n        res = A[0] & B[0]\n        f = True\n        for i in range(1, n):\n            if A[i] & B[i] != res:\n                f = False\n        if f:\n            print(*A)\n            print(*B)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    solve(n)", "import sys\nfrom io import BytesIO, IOBase\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    if N == 1:\n        print(1)\n        print(1)\n    elif N % 2:\n        print(-1)\n    else:\n        A = [i for i in range(N + 1)]\n        B = [0] * (N + 1)\n        j = 1\n        while 2 * j <= N:\n            j *= 2\n        for i in range(N, 0, -1):\n            if i < j:\n                j //= 2\n            C = j - 1 - (i - j)\n            B[i] = C\n        for i in range(N, 0, -1):\n            B[B[i]] = i\n        print(*A[1:])\n        print(*B[1:])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n        continue\n    if n & 1:\n        print(-1)\n        continue\n    a = int(math.log(n + 1, 2))\n    if n == 2 ** a:\n        print(*[x for x in range(1, n + 1)])\n        print(*[x for x in range(n - 2, 0, -1)] + [n, n - 1])\n    else:\n        (ans1, ans2) = ([], [])\n        while n > 0:\n            a = int(math.log(n + 1, 2))\n            a1 = [x for x in range(2 ** a, n + 1)]\n            a2 = [x for x in range(2 ** a - 1, 2 ** a - len(a1) - 1, -1)]\n            ans1 += a1 + a2\n            ans2 += a2 + a1\n            if a2:\n                n = a2[-1] - 1\n            else:\n                break\n        print(*ans1)\n        print(*ans2)", "def is_2_pow(N):\n    return N == 1 or '0' not in bin(N - 1)[2:]\nfor _ in range(int(input())):\n    N = int(input())\n    if N == 1:\n        print(1)\n        print(1)\n    elif N % 2 == 0:\n        N_copy = N\n        ret = []\n        while N > 0:\n            l = len(bin(N)) - 2\n            start = (1 << l) - 1 - N\n            ret.extend(map(str, range(start, N + 1)))\n            N = start - 1\n        print(' '.join(map(str, range(N_copy, 0, -1))))\n        print(' '.join(ret))\n    else:\n        print(-1)", "from bisect import bisect_left\nfrom re import sub\nimport re\nfrom typing import DefaultDict\nimport math\nfrom collections import defaultdict\nfrom math import sqrt\nimport collections\nfrom sys import maxsize\nfrom itertools import combinations_with_replacement\nimport sys\nimport copy\n\ndef sieve_erasthones(n):\n    cnt = 0\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef count_factors(n):\n    i = 1\n    c = 0\n    ans = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                c += 1\n                ans.append(n // i)\n            else:\n                c += 2\n                ans.append(i)\n                ans.append(n // i)\n        i += 1\n    return ans\n    return c\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d = DefaultDict(lambda : 0)\n    for ele in l:\n        d[ele] += 1\n    return d\n\ndef max_in_dict(d):\n    maxi = 0\n    for ele in d:\n        if d[ele] > maxi:\n            maxi = d[ele]\n    return maxi\n\ndef element_count(s):\n    l = []\n    k = s[0]\n    c = 0\n    for ele in s:\n        if ele == k:\n            c += 1\n        else:\n            l.append([k, c])\n            k = ele\n            c = 1\n    l.append([k, c])\n    return l\n\ndef modular_exponentiation(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 != 0:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef number_of_primefactor(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return list(set(l))\n\ndef twosum(a, n, x):\n    rem = []\n    for i in range(x):\n        rem.append(0)\n    for i in range(n):\n        if a[i] < x:\n            rem[a[i] % x] += 1\n    for i in range(1, x // 2):\n        if rem[i] > 0 and rem[x - i] > 0:\n            return True\n    if i >= x // 2:\n        if x % 2 == 0:\n            if rem[x // 2] > 1:\n                return True\n            else:\n                return False\n        elif rem[x // 2] > 0 and rem[x - x // 2] > 0:\n            return True\n        else:\n            return False\n\ndef divSum(num):\n    result = 0\n    i = 2\n    while i <= math.sqrt(num):\n        if num % i == 0:\n            if i == num / i:\n                result = result + i\n            else:\n                result = result + (i + num / i)\n        i = i + 1\n    return result + 1 + num\n\ndef subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0\n    i = 0\n    while j < m and i < n:\n        if str1[j] == str2[i]:\n            j = j + 1\n        i = i + 1\n    return j == m\n\ndef primeFactors(n):\n    d = defaultdict(lambda : 0)\n    while n % 2 == 0:\n        d[2] += 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d[int(i)] += 1\n            n = n / i\n    if n > 2:\n        d[int(n)] += 1\n    return d\n\ndef modInverse(b, m):\n    g = math.gcd(b, m)\n    if g != 1:\n        return -1\n    else:\n        return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    return inv * a % m\n\ndef count(n):\n    ans = 0\n    while n:\n        ans += n % 10\n        n //= 10\n    return ans\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef check(n):\n    c = 0\n    while n % 2 == 0:\n        n //= 2\n        c += 1\n    return c\n\ndef solve():\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n    elif n % 2 == 1:\n        print(-1)\n    else:\n        l = [i for i in range(1, n + 1)]\n        k = int('1' * (len(bin(max(l))) - 2), 2)\n        temp = []\n        d = defaultdict(lambda : 0)\n        maxi = max(l)\n        for ele in l:\n            x = k ^ ele\n            while True:\n                if d[x] == 0 and x <= maxi:\n                    break\n                else:\n                    x = int(bin(x)[3:], 2)\n            temp.append(x)\n            d[x] = 1\n        print(*l)\n        print(*temp)\nfor _ in range(int(input())):\n    solve()", "def counter(n):\n    val = 0\n    c = 0\n    while n:\n        if n % 2 == 0:\n            val += 2 ** c\n        c += 1\n        n //= 2\n    return val\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n    elif n % 2 == 0:\n        dict = [False] * (n + 1)\n        a = []\n        b = []\n        for i in range(n, 0, -1):\n            if dict[i] == False:\n                c = counter(i)\n                dict[c] = True\n                dict[i] = True\n                a.append(i)\n                b.append(c)\n                a.append(c)\n                b.append(i)\n        for i in range(n):\n            print(a[i], end=' ')\n        print()\n        for i in range(n):\n            print(b[i], end=' ')\n        print()\n    else:\n        print(-1)", "import fileinput\npair = lambda a: 2 ** a.bit_length() - 1 - a\n\ndef solve(n):\n    if n == 0:\n        return []\n    else:\n        lb = pair(n)\n        p1 = [(lb + i, n - i) for i in range(0, n - lb + 1)]\n        p2 = solve(lb - 1)\n        return p1 + p2\nwith fileinput.input() as f:\n    t = int(f.readline().strip())\n    for i in range(t):\n        n = int(f.readline().strip())\n        if n == 1:\n            print(1)\n            print(1)\n        elif n % 2 == 1:\n            print(-1)\n        else:\n            solution = solve(n)\n            s1 = f'{solution[0][0]}'\n            s2 = f'{solution[0][1]}'\n            for (a, b) in solution[1:]:\n                s1 += f' {a}'\n                s2 += f' {b}'\n            print(s1)\n            print(s2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n        continue\n    if n % 2:\n        print(-1)\n        continue\n    a = [0 for i in range(n)]\n    b = [0 for i in range(n)]\n    kk = 0\n    maxi = 1\n    while maxi * 2 <= n:\n        maxi = maxi * 2\n    vis = [-1 for i in range(n + 1)]\n    while kk < n:\n        curr = maxi\n        count = 1\n        while curr <= n and vis[curr] == -1:\n            a[kk] = curr\n            b[kk] = curr - count\n            kk += 1\n            a[kk] = curr - count\n            b[kk] = curr\n            kk += 1\n            vis[curr] = 1\n            vis[curr - count] = 1\n            count += 2\n            curr += 1\n        maxi = maxi // 2\n    for i in range(n):\n        print(a[i], end=' ')\n    print()\n    for i in range(n):\n        print(b[i], end=' ')\n    print()", "def setBitNumber(n):\n    if n == 0:\n        return 0\n    msb = 0\n    n = int(n / 2)\n    while n > 0:\n        n = int(n / 2)\n        msb += 1\n    return 1 << msb\n\ndef find(n, a, b):\n    temp = setBitNumber(n) + 1\n    i = 0\n    while temp + i <= n:\n        a.append(temp + i)\n        b.append(temp - i - 3)\n        b.append(temp + i)\n        a.append(temp - i - 3)\n        i += 1\n    a.append(temp - 1)\n    b.append(temp - 2)\n    a.append(temp - 2)\n    b.append(temp - 1)\n    x = temp - i - 3\n    if x > 0:\n        (a, b) = find(x, a, b)\n    return (a, b)\nfor _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    if n % 2 == 0:\n        find(n, a, b)\n        print(*a, sep=' ')\n        print(*b, sep=' ')\n    elif n == 1:\n        print(1)\n        print(1)\n    else:\n        print(-1)", "import sys\ninput = sys.stdin.readline\nM = int(1000000000.0) + 7\n\ndef bitflip(x):\n    bitx = bin(x)[2:]\n    ans = ''\n    for i in bitx:\n        if i == '0':\n            ans += '1'\n        else:\n            ans += '0'\n    return int(ans, 2)\n\ndef solve():\n    n = int(input())\n    if n == 1:\n        print(1)\n        print(1)\n        return\n    if n % 2 == 1:\n        print(-1)\n        return\n    print(*range(1, n + 1))\n    l = [-1] * (n + 1)\n    for i in range(n, 0, -1):\n        if l[i] == -1:\n            l[i] = bitflip(i)\n            l[bitflip(i)] = i\n    print(*l[1:])\nfor _ in range(int(input())):\n    solve()", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n == 1:\n            print(1)\n            print(1)\n        elif n & 1:\n            print(-1)\n        else:\n            print(*[i for i in range(1, n + 1)])\n            B = []\n            num = n\n            while len(B) < num:\n                p = 1\n                while p <= n:\n                    p <<= 1\n                p -= 1\n                for i in range(n, -1, -1):\n                    if ~i & p > n:\n                        n = i\n                        break\n                    B.append(~i & p)\n            print(*B[::-1])\nexcept:\n    pass"]