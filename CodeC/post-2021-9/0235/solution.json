["import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    ans = int(math.log(n, 2))\n    print(n - ans - 1)", "t = int(input())\nfor i in range(t):\n    k = 0\n    number = int(input())\n    j = number\n    while number != 0 and number != 1:\n        number = int(number / 2)\n        k += 1\n    l = k + 1\n    print(j - l)", "for _ in range(int(input())):\n    num = int(input())\n    if num <= 2:\n        print(0)\n    else:\n        j = 0\n        val = 1\n        while num > val:\n            j += 1\n            val = 2 ** j\n        result = None\n        if num & num - 1 == 0:\n            result = num - j - 1\n        else:\n            result = num - j\n        print(result)", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    q = int(log2(n))\n    a = 2 ** q\n    print(a - q - 1 + n - a)", "import math\nt = int(input())\nwhile t > 0:\n    p = int(input())\n    print(p - math.floor(math.log(p, 2)) - 1)\n    t -= 1", "from math import log\nfrom math import floor\nfor _ in range(int(input())):\n    n = int(input())\n    print(n - floor(log(n, 2)) - 1)", "from math import log2\nfrom math import floor\nfor _ in range(int(input())):\n    n = int(input())\n    print(n - floor(log2(n)) - 1)", "from math import log\nfor _ in range(int(input())):\n    n = int(input())\n    print(n - int(log(n, 2)) - 1)", "import math\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    ans = int(math.log(n, 2))\n    print(n - ans - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = math.floor(math.log(n, 2))\n    print(n - ans - 1)", "t = int(input())\nfor i in range(t):\n    k = 0\n    number = int(input())\n    j = number\n    while number != 0 and number != 1:\n        number = int(number / 2)\n        k += 1\n    l = k + 1\n    print(j - l)", "t = int(input())\nfor i in range(t):\n    k = 0\n    number = int(input())\n    j = number\n    while number != 0 and number != 1:\n        number = int(number / 2)\n        k += 1\n    l = k + 1\n    print(j - l)", "import math\nT = int(input())\nfor _ in range(0, T):\n    n = int(input())\n    x = math.floor(math.log(n, 2))\n    print(n - 1 - x)", "import math\nT = int(input())\nfor _ in range(0, T):\n    n = int(input())\n    x = math.floor(math.log(n, 2))\n    print(n - 1 - x)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    c = int(math.log(n, 2))\n    print(n - c - 1)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = int(math.log(n) / math.log(2))\n    print(n - a - 1)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    a = int(math.log(n) / math.log(2))\n    print(n - a - 1)", "t = input()\nfor c in range(0, int(t)):\n    n = int(input())\n    if n == 2:\n        print('0')\n        continue\n    if n == 3:\n        print('1')\n        continue\n    k = 2\n    while 2 ** k <= n:\n        k += 1\n    print(n - k)", "import math\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    if n == 2:\n        print('0')\n        continue\n    if n == 3:\n        print('1')\n        continue\n    k = 2\n    while 2 ** k <= n:\n        k += 1\n    print(n - k)", "num = int(input())\nfor _ in range(num):\n    n = int(input())\n    pow = 0\n    while 2 ** (pow + 1) <= n:\n        pow += 1\n    print(n - pow - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    powers = math.floor(math.log(n, 2))\n    print(n - powers - 1)", "import math\ntests = int(input())\nfor i in range(tests):\n    num = int(input())\n    two_powers = math.floor(math.log(num, 2))\n    print(num - two_powers - 1)", "from math import log\ntry:\n    for _ in range(int(input())):\n        n = int(input())\n        x = log(n) / log(2)\n        print(n - int(x) - 1)\nexcept Exception as e:\n    raise e", "import math\ntests = int(input())\nfor i in range(tests):\n    num = int(input())\n    two_powers = math.floor(math.log(num, 2))\n    print(num - two_powers - 1)", "from math import floor, log2\nfor _ in range(int(input())):\n    n = int(input())\n    i = floor(log2(n))\n    ans = n - 2 ** i\n    ans += 2 * (2 ** (i - 1) - 1) - i + 1\n    print(ans)", "from math import floor, log2\nfor _ in range(int(input())):\n    n = int(input())\n    i = floor(log2(n))\n    ans = n - 2 ** i\n    ans += 2 * (2 ** (i - 1) - 1) - i + 1\n    print(ans)", "from math import floor, log2\nfor _ in range(int(input())):\n    n = int(input())\n    i = 2 ** floor(log2(n))\n    ans = n - i\n    k = 2\n    while k < i:\n        ans += k - 1\n        k *= 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    for i in range(1, n):\n        if pow(2, i) == n:\n            print(n - i - 1)\n            break\n        elif pow(2, i) > n:\n            print(n - i)\n            break", "from bisect import bisect_right\n\ndef solve(n):\n    return n - bisect_right([2 ** i for i in range(30)], n)\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    for i in range(1, N + 1):\n        if N < pow(2, i):\n            print(N - i)\n            break\n        if N == pow(2, i):\n            print(N - i - 1)\n            break", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    for i in range(1, N + 1):\n        if N < pow(2, i):\n            print(N - i)\n            break\n        if N == pow(2, i):\n            print(N - i - 1)\n            break", "T = int(input())\nfor Akash in range(T):\n    N = int(input())\n    for UP in range(1, N + 1):\n        if N < pow(2, UP):\n            print(N - UP)\n            break\n        if N == pow(2, UP):\n            print(N - UP - 1)\n            break", "T = int(input())\nfor Akash in range(T):\n    N = int(input())\n    for UP in range(1, N + 1):\n        if N < pow(2, UP):\n            print(N - UP)\n            break\n        if N == pow(2, UP):\n            print(N - UP - 1)\n            break", "import math\nfor t in range(int(input())):\n    n = int(input())\n    print(n - int(math.log(n) / math.log(2)) - 1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    c = 1\n    while math.pow(2, c) <= n:\n        c += 1\n    print(n - c)", "def compute_num(B):\n    B = B[1:]\n    n = int(B, 2)\n    return n\nT = int(input())\nfor t in range(1, T + 1):\n    N = int(input())\n    B = format(N, 'b')\n    sumb = 0\n    while len(B) > 1:\n        n = compute_num(B)\n        sumb += n\n        A = '1' * len(B)\n        B = A[1:]\n    print(sumb)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = 1\n    while math.pow(2, p) <= n:\n        p += 1\n    print(n - p)", "T = int(input())\nfor vinay in range(T):\n    N = int(input())\n    for kukka in range(1, N):\n        if N < 2 ** kukka:\n            print(N - kukka)\n            break\n        if N == 2 ** kukka:\n            print(N - kukka - 1)\n            break", "T = int(input())\nfor vinay in range(T):\n    N = int(input())\n    for kukka in range(1, N):\n        if N < 2 ** kukka:\n            print(N - kukka)\n            break\n        if N == 2 ** kukka:\n            print(N - kukka - 1)\n            break", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = math.floor(math.log(n, 2))\n    p = 2 ** k\n    ans = n - p\n    ans += p - 1 - k\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = math.floor(math.log(n, 2))\n    p = 2 ** k\n    ans = n - p\n    ans += p - 1 - k\n    print(ans)", "def pow2(bits):\n    return 1 << bits\n\ndef max_num(bits):\n    return pow2(bits + 1) - 1\n\ndef solution():\n    n = int(input())\n    bit_count = 0\n    while n >> bit_count:\n        bit_count += 1\n    ans = 0\n    for i in range(1, bit_count):\n        ans += min(n, max_num(i)) - pow2(i)\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solution()", "def pow2(bits):\n    return 1 << bits\n\ndef max_num(bits):\n    return pow2(bits + 1) - 1\n\ndef solution():\n    n = int(input())\n    bit_count = 0\n    while n >> bit_count:\n        bit_count += 1\n    ans = 0\n    for i in range(1, bit_count):\n        ans += min(n, max_num(i)) - pow2(i)\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solution()", "def pow2(bits):\n    return 1 << bits\n\ndef max_num(bits):\n    return pow2(bits + 1) - 1\n\ndef solution():\n    n = int(input())\n    bit_count = 0\n    while n >> bit_count:\n        bit_count = bit_count + 1\n    ans = 0\n    for i in range(1, bit_count):\n        ans += min(n, max_num(i)) - pow2(i)\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solution()", "def btod(n):\n    if n > 1:\n        btod(n // 2)\n        l.append(n % 2)\n    elif n == 1:\n        l.append(1)\n        return l\n    return l\nt = int(input())\nfor i in range(t):\n    l = []\n    n = int(input())\n    (res, sum) = (0, 0)\n    ls = btod(n)\n    k = len(ls)\n    num = 2 ** (k - 1)\n    itr = num\n    while itr != 2:\n        res += itr // 2 - 1\n        itr = itr // 2\n    sum = n - num + res\n    print(sum)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    for j in range(1, n):\n        if n < 2 ** j:\n            print(n - j)\n            break\n        if n == 2 ** j:\n            print(n - j - 1)\n            break", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    x = int(math.log2(n))\n    y = 2 ** x - 1 - x\n    y = y + (n - 2 ** x)\n    print(y)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    for j in range(1, n):\n        if n < 2 ** j:\n            print(n - j)\n            break\n        if n == 2 ** j:\n            print(n - j - 1)\n            break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    for j in range(1, n):\n        if n < 2 ** j:\n            print(n - j)\n            break\n        if n == 2 ** j:\n            print(n - j - 1)\n            break", "for _ in range(int(input())):\n    n = int(input())\n    x = 1\n    s = 0\n    while x <= n:\n        x *= 2\n        s = s + 1\n    print(n - s)", "import math\nimport bisect\nfor i in range(int(input())):\n    n = int(input())\n    s = 0\n    c = 0\n    while c <= n:\n        s += 1\n        c = 2 ** s\n    s -= 1\n    c = n - 2 ** s\n    while s > 1:\n        c += 2 ** s - 1 - 2 ** (s - 1)\n        s -= 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    x = 1\n    q = 0\n    while x <= n:\n        x *= 2\n        q += 1\n    print(n - q)", "for _ in range(int(input())):\n    sum = 0\n    n = int(input())\n    for i in range(n):\n        if n // 2 ** i == 1:\n            top = i\n            break\n        else:\n            sum += 2 ** i - 1\n    sum += n - 2 ** top\n    print(sum)", "import math\n\ndef Log2(x):\n    return int(math.log10(x) / math.log10(2))\nans = 0\nfor _ in range(int(input())):\n    N = int(input())\n    val = Log2(N)\n    print(N - val - 1)", "import math\n\ndef Log2(x):\n    return int(math.log10(x) / math.log10(2))\nans = 0\nfor _ in range(int(input())):\n    N = int(input())\n    val = Log2(N)\n    print(N - val - 1)", "n = int(input())\nwhile n:\n    n = n - 1\n    a = int(input())\n    count = 0\n    for i in range(100):\n        if a <= 0:\n            count += a\n            print(count)\n            break\n        x = 2 ** i\n        a -= x\n        count += x - 1", "for _ in range(int(input())):\n    n = int(input())\n    cnt = 0\n    tmp = n\n    while tmp >= 4:\n        tmp = tmp // 2\n        cnt += 1\n    print(n - cnt - 2)", "t = int(input())\nfor i in range(t):\n    res = 0\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        curr = 2\n        i = 1\n        cnt = 0\n        while pow(2, i) <= n:\n            cnt += 1\n            i += 1\n        print(n - 1 - cnt)", "for _ in range(int(input())):\n    n = int(input())\n    count = 0\n    temp = n\n    while temp > 0:\n        temp //= 2\n        count += 1\n    print(n - count)", "for i in range(int(input())):\n    n = int(input())\n    temp = n\n    count = 0\n    while temp > 0:\n        temp //= 2\n        count += 1\n    print(n - count)", "from math import floor, log\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(n - floor(log(n, 2)) - 1)", "numTest = int(input())\nfor _ in range(numTest):\n    n = int(input()) - 1\n    i = 2\n    ans = 0\n    while True:\n        if n == 0:\n            break\n        a = min(i, n)\n        ans += a - 1\n        n -= a\n        i *= 2\n    print(ans)", "import math\nfor i in range(int(input())):\n    t = int(input())\n    x = math.floor(math.log(t, 2))\n    print(t - x - 1)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = math.floor(math.log(n, 2))\n    print(n - a - 1)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    logs = math.floor(math.log(n, 2))\n    print(n - logs - 1)", "for _ in range(int(input())):\n    N = int(input())\n    print(N - len(bin(N)) + 2)", "def pow2(i):\n    return 1 << i\n\ndef max_bits(i):\n    return pow2(i + 1) - 1\n\ndef solution():\n    n = int(input())\n    bits = 0\n    while n >> bits:\n        bits += 1\n    ans = 0\n    for i in range(1, bits):\n        ans += min(n, max_bits(i)) - pow2(i)\n    print(ans)\nfor _ in range(int(input())):\n    solution()", "l = []\nfor i in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print(0)\n    elif n == 3:\n        print(1)\n    else:\n        s = bin(n)[2:]\n        l = len(s)\n        print(n - l)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    print(n - len(bin(n)) + 2)", "for _ in range(int(input())):\n    N = int(input())\n    print(N - len(bin(N)) + 2)", "def pow2(bits):\n    return 1 << bits\n\ndef max_num(bits):\n    return pow2(bits + 1) - 1\n\ndef solution():\n    n = int(input())\n    bit_count = 0\n    while n >> bit_count:\n        bit_count = bit_count + 1\n    ans = 0\n    for i in range(1, bit_count):\n        ans += min(n, max_num(i)) - pow2(i)\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    solution()", "for _ in range(int(input())):\n    N = int(input())\n    print(N - len(bin(N)) + 2)", "def power(bit):\n    return 1 << bit\n\ndef maxnum(bit):\n    return power(bit + 1) - 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    bits = 0\n    while n >> bits:\n        bits += 1\n    res = 0\n    for i in range(1, bits):\n        res += min(n, maxnum(i)) - power(i)\n    print(res)", "import math as m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (s, i) = (0, 0)\n    while pow(2, i) <= n:\n        s += 1\n        i += 1\n    print(n - s)", "import math as m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (s, i) = (0, 0)\n    while pow(2, i) <= n:\n        s += 1\n        i += 1\n    print(n - s)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    x = math.floor(math.log(n, 2))\n    count = 0\n    for i in range(1, x):\n        count += pow(2, i) - 1\n    count += n - pow(2, x)\n    print(count)", "import math as m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (s, i) = (0, 0)\n    while pow(2, i) <= n:\n        s += 1\n        i += 1\n    print(n - s)", "import math as m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (s, i) = (0, 0)\n    while pow(2, i) <= n:\n        s += 1\n        i += 1\n    print(n - s)", "import math as m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (s, i) = (0, 0)\n    while pow(2, i) <= n:\n        s += 1\n        i += 1\n    print(n - s)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    if n <= 2:\n        print(0)\n    else:\n        x = 0\n        d = 0\n        for i in range(32):\n            c = 1 << i\n            if c & n:\n                d = i\n                x = c\n        cout = 0\n        con = 1\n        for i in range(d):\n            cout += con - 1\n            con *= 2\n        cout += n - x\n        print(cout)", "try:\n    for t in range(int(input())):\n        n = int(input())\n        s = 1\n        c = 0\n        for i in range(1, n + 1):\n            if s > n:\n                break\n            else:\n                c += 1\n                s += s + 1\n        x = bin(n)[2:]\n        if len(x) == x.count('1'):\n            print(n - (2 + c - 1) + 1)\n        else:\n            print(n - (2 + c - 1))\nexcept:\n    pass", "from math import log2\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = n - int(log2(n)) - 1\n    print(int(ans))", "import math\ntry:\n    testcases = int(input())\n    while testcases:\n        N = int(input())\n        i = 1\n        while pow(2, i) <= N:\n            i += 1\n        print(N - (i - 1) - 1)\n        testcases -= 1\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    (tp, cc, count) = (1, 1, 0)\n    while cc <= n:\n        cc *= 2\n    cc //= 2\n    count = n - cc\n    while tp < cc:\n        count += tp - 1\n        tp *= 2\n    print(count)", "from math import log2\ncase = int(input())\nwhile case > 0:\n    num = int(input())\n    ans = num - 1 - int(log2(num))\n    print(int(ans))\n    case -= 1", "from math import log2\ncase = int(input())\nwhile case > 0:\n    num = int(input())\n    ans = num - 1 - int(log2(num))\n    print(int(ans))\n    case -= 1", "from math import log2\ncases = int(input())\nwhile cases > 0:\n    num = int(input())\n    ans = num - 1 - int(log2(num))\n    print(int(ans))\n    cases -= 1", "from math import log2\ncases = int(input())\nwhile cases > 0:\n    num = int(input())\n    ans = num - 1 - int(log2(num))\n    print(int(ans))\n    cases -= 1", "for _ in range(int(input())):\n    n = int(input())\n    b = 0\n    x = 1\n    while True:\n        y = 2 * x\n        if y > n:\n            b += n - x\n            break\n        b += y - x - 1\n        x = y\n    print(b)", "for _ in range(int(input())):\n    n = int(input())\n    b = 0\n    x = 1\n    while True:\n        y = 2 * x\n        if y > n:\n            b += n - x\n            break\n        b += y - x - 1\n        x = y\n    print(b)", "for _ in range(int(input())):\n    k = int(input())\n    p = k\n    c = 0\n    while p >= 4:\n        p = p / 2\n        c = c + 1\n    print(k - c - 2)", "for _ in range(int(input())):\n    n = int(input())\n    print(n - len(bin(n)[2:]))", "for _ in range(int(input())):\n    n = int(input())\n    print(n - len(bin(n)[2:]))", "t = int(input())\nfor i in range(t):\n    kur = 0\n    x = int(input())\n    j = 0\n    while pow(2, j) <= x:\n        kur += 1\n        j += 1\n    print(x - j)", "t = int(input())\nfor i in range(t):\n    kur = 0\n    x = int(input())\n    j = 0\n    while pow(2, j) <= x:\n        kur += 1\n        j += 1\n    print(x - j)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = '{0:0b}'.format(n)\n    print(n - len(s))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = n\n    c = 0\n    while a:\n        c += 1\n        a //= 2\n    print(n - c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = n\n    c = 0\n    while a:\n        c += 1\n        a //= 2\n    print(n - c)"]