["for _ in range(int(input())):\n    C = int(input())\n    if C == 0:\n        print('2\\n1 1\\n')\n        continue\n    b = ''\n    while C > 0:\n        b += str(C % 2)\n        C = C // 2\n    b = b[::-1]\n    size = len(b)\n    v = []\n    prev = b[0]\n    v.append(2 ** size - 1)\n    for i in range(1, size):\n        if b[i] == prev:\n            continue\n        v.append(2 ** (size - i) - 1)\n        prev = b[i]\n    print(len(v))\n    print(' '.join(map(str, v)))", "for _ in range(int(input())):\n    C = int(input())\n    if C == 0:\n        print('2\\n1 1\\n')\n        continue\n    b = ''\n    while C > 0:\n        b += str(C % 2)\n        C = C // 2\n    b = b[::-1]\n    size = len(b)\n    v = []\n    prev = b[0]\n    v.append(2 ** size - 1)\n    for i in range(1, size):\n        if b[i] == prev:\n            continue\n        v.append(2 ** (size - i) - 1)\n        prev = b[i]\n    print(len(v))\n    print(' '.join(map(str, v)))", "t = int(input())\n\ndef solve():\n    C = int(input())\n    if C == 0:\n        print(2)\n        print(1, 1)\n        return\n    xor = 0\n    ans = []\n    for i in range(60, -1, -1):\n        if C & 1 << i:\n            if xor & 1 << i:\n                continue\n            else:\n                ans.append((1 << i + 1) - 1)\n                xor ^= (1 << i + 1) - 1\n        elif not xor & 1 << i:\n            continue\n        else:\n            ans.append((1 << i + 1) - 1)\n            xor ^= (1 << i + 1) - 1\n    print(len(ans))\n    if ans:\n        print(*ans)\n    else:\n        print(0)\nwhile t:\n    solve()\n    t -= 1", "def func(n):\n    c = 0\n    x = 1\n    for _ in range(n):\n        c += x\n        x *= 2\n    return c\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    l = []\n    flag = n % 2\n    n = n >> 1\n    c = 1\n    while n != 0:\n        x = n % 2\n        n = n >> 1\n        if x != flag:\n            l.append(c)\n            flag = x\n        c += 1\n    l.append(c)\n    print(len(l))\n    for i in l:\n        print(func(i), end=' ')\n    print()", "def func(n):\n    c = 0\n    x = 1\n    for _ in range(n):\n        c += x\n        x *= 2\n    return c\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    l = []\n    flag = n % 2\n    n = n >> 1\n    c = 1\n    while n != 0:\n        x = n % 2\n        n = n >> 1\n        if x != flag:\n            l.append(c)\n            flag = x\n        c += 1\n    l.append(c)\n    print(len(l))\n    for i in l:\n        print(func(i), end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    c = int(input())\n    temp = c\n    arr = []\n    n = 0\n    while c > 0:\n        arr.append(c % 2)\n        c //= 2\n        n += 1\n    flip = 0\n    ini = 2 ** n - 1\n    ans = [ini]\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 0 and flip == 0:\n            ans.append(2 ** (i + 1) - 1)\n            flip = 1\n        if arr[i] == 1 and flip == 1:\n            ans.append(2 ** (i + 1) - 1)\n            flip = 0\n    if temp == 0:\n        print(2)\n        print(1, 1)\n    else:\n        print(len(ans))\n        for i in ans:\n            print(i, end=' ')\n        print()", "for _ in range(int(input())):\n    n = int(input())\n    x = bin(n)[2:]\n    temp = '1'\n    l = [2 ** len(x) - 1]\n    for i in range(1, len(x)):\n        if x[i] != temp:\n            l.append(2 ** (len(x) - i) - 1)\n            if temp == '1':\n                temp = '0'\n            else:\n                temp = '1'\n    if n == 0:\n        print(2)\n        print(1, 1)\n    else:\n        print(len(l))\n        print(*l)", "ll = lambda : map(int, input().split())\nt = lambda : int(input())\nss = lambda : input()\nlx = lambda x: map(int, input().split(x))\nyy = lambda : print('YES')\nnn = lambda : print('NO')\nfrom math import log10, log2, ceil, factorial as fac, gcd, inf, sqrt, log\nfrom bisect import bisect_right as br, bisect_left as bl, insort\nfrom collections import Counter\nmod = 10 ** 9 + 7\n\ndef Nprime(n):\n    if n == 2 or n == 3:\n        return 0\n    if n == 1:\n        return 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return 1\n        i += 1\n    return 0\n\ndef g(n):\n    i = 2\n    (od, ev) = (0, 0)\n    x = n\n    while i * i <= n:\n        if n % i == 0:\n            while n % i == 0:\n                n //= i\n                if i % 2:\n                    od += 1\n                else:\n                    ev += 1\n        i += 1\n    if n > 1:\n        if n % 2:\n            od += 1\n        else:\n            ev += 1\n    return (od, ev)\nfor _ in range(t()):\n    c = t()\n    if c == 0:\n        print(2)\n        print(1, 1)\n        continue\n    x = c\n    l = []\n    while 1:\n        p = bin(x)[2:]\n        temp = int('1' * len(p), 2)\n        l.append(temp)\n        if log2(x + 1).is_integer():\n            break\n        x = x ^ temp\n    print(len(l))\n    print(*l)", "import bisect\nl = [(1 << x) - 1 for x in range(61)]\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(3, 3)\n    elif n in l:\n        print(1)\n        print(n)\n    else:\n        cnt = 0\n        ans = []\n        while n not in l:\n            cnt += 1\n            ind = bisect.bisect_left(l, n)\n            ans.append(l[ind])\n            n = l[ind] - n\n        cnt += 1\n        ans.append(n)\n        print(cnt)\n        print(*ans)", "def check(c):\n    if c == 0:\n        return [1, 1]\n    a = []\n    data = bin(c)[2:]\n    p_val = '1'\n    a.append(2 ** len(data) - 1)\n    for i in range(len(data)):\n        if p_val != data[i]:\n            a.append(2 ** len(data[i:]) - 1)\n            p_val = data[i]\n    return a\nt = int(input())\nfor _ in range(t):\n    c = int(input())\n    sharma = check(c)\n    print(len(sharma))\n    print(*sharma)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(1, 1)\n    else:\n        bc = 0\n        binary = ''\n        while n != 0:\n            if n % 2 == 0:\n                binary = '0' + binary\n            else:\n                binary = '1' + binary\n            bc += 1\n            n //= 2\n        l = []\n        l.append(2 ** bc - 1)\n        bc = 2 ** (bc - 1)\n        i = 1\n        b = '1'\n        while i < len(binary):\n            if binary[i] != b:\n                l.append(bc - 1)\n                if b == '1':\n                    b = '0'\n                else:\n                    b = '1'\n            i += 1\n            bc //= 2\n        print(len(l))\n        print(*l)", "from sys import stdin\ninp = stdin.readline\ninteresting = list((2 ** p - 1 for p in range(60 + 1)))\nT = int(inp())\nans = []\nfor tx in range(T):\n    C = int(inp())\n    if C == 0:\n        A = [1, 1]\n    else:\n        A = []\n    hi = len(interesting)\n    while C:\n        lo = 0\n        while hi - lo > 1:\n            md = (hi + lo) // 2\n            if interesting[md] < C:\n                lo = md\n            else:\n                hi = md\n        A.append(interesting[hi])\n        C ^= interesting[hi]\n    ans.append(len(A))\n    ans.append(' '.join(map(str, A)))\nprint(*ans, sep='\\n')", "for _ in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print('1 1')\n        continue\n    s = bin(c).replace('0b', '')\n    l = []\n    n = len(s)\n    x = 1\n    for i in range(n):\n        if int(s[i]) == x:\n            l.append(n - i)\n            x = not x\n    print(len(l))\n    for i in l:\n        print(2 ** i - 1, end=' ')\n    print()", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(1, 1)\n    else:\n        b = bin(c)[2:][::-1]\n        ex = []\n        for i in range(len(b)):\n            if b[i] == '1':\n                if i - 1 >= 0 and b[i - 1] == '1':\n                    ex.pop()\n                    ex.append(2 ** (i + 1) - 1)\n                else:\n                    if i != 0:\n                        ex.append(2 ** i - 1)\n                    ex.append(2 ** (i + 1) - 1)\n        print(len(ex))\n        print(*ex)", "from sys import stdin\ninp = stdin.readline\ninteresting = list((2 ** p - 1 for p in range(60 + 1)))\nT = int(inp())\nans = []\nfor tx in range(T):\n    C = int(inp())\n    if C == 0:\n        A = [1, 1]\n    else:\n        A = []\n    hi = len(interesting)\n    while C:\n        lo = 0\n        while hi - lo > 1:\n            md = (hi + lo) // 2\n            if interesting[md] < C:\n                lo = md\n            else:\n                hi = md\n        A.append(interesting[hi])\n        C ^= interesting[hi]\n    ans.append(len(A))\n    ans.append(' '.join(map(str, A)))\nprint(*ans, sep='\\n')", "for _ in range(int(input())):\n    C = int(input())\n    if C == 0:\n        print(2)\n        print(1, 1)\n    else:\n        c = bin(C)[2:]\n        flag = '1'\n        lis = []\n        lis.append(int('1' * len(c), 2))\n        for i in range(1, len(c)):\n            if flag != c[i]:\n                lent = len(c) - i\n                lis.append(int('1' * lent, 2))\n                flag = str(1 - int(flag))\n        print(len(lis))\n        for i in range(len(lis)):\n            print(lis[i], end=' ')\n        print()", "ans = ''\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 0:\n        ans += '2\\n1 1\\n'\n        continue\n    if n + 1 & n == 0:\n        ans += str(1) + '\\n' + str(n) + '\\n'\n        continue\n    num = bin(n)[2:]\n    l = len(num)\n    res = []\n    cnt = 1\n    for i in range(len(num)):\n        if num[i] == '1' and cnt % 2 != 0:\n            res.append(int('1' * (l - i), 2))\n            cnt += 1\n        elif num[i] == '0' and cnt % 2 == 0:\n            res.append(int('1' * (l - i), 2))\n            cnt += 1\n        elif num[i] == '0' and cnt % 2 != 0:\n            continue\n        elif num[i] == '1' and cnt % 2 == 0:\n            continue\n    ans += str(len(res)) + '\\n'\n    for i in res:\n        ans += str(i) + ' '\n    ans += '\\n'\nprint(ans)", "for _ in range(int(input())):\n    n = int(input())\n    if n != 0:\n        n = bin(n)[2:]\n        l = len(n)\n        s = ''\n        k = 0\n        for i in range(l):\n            if n[i] == '1':\n                if k % 2 == 0:\n                    s += f'{2 ** (l - i) - 1} '\n                    k += 1\n            elif k % 2:\n                s += f'{2 ** (l - i) - 1} '\n                k += 1\n        print(k)\n        print(s)\n    else:\n        print(2)\n        print(1, 1)", "from math import floor, log\n\ndef get_range(c):\n    return floor(log(c, 2)) + 1\n\ndef solve(c):\n    arr = []\n    pow = 60\n    prefix = 0\n    while pow >= 0:\n        bit1 = 1 << pow & prefix\n        bit2 = 1 << pow & c\n        if bit1 != bit2:\n            prefix ^= (1 << pow + 1) - 1\n            arr.append((1 << pow + 1) - 1)\n        pow -= 1\n    if arr == []:\n        return (2, [7, 7])\n    return (len(arr), arr)\nfor _ in range(int(input())):\n    (n, arr) = solve(int(input()))\n    print(n)\n    print(' '.join(map(str, arr)))", "import math\n\ndef get_range(c):\n    return math.floor(math.log(c, 2)) + 1\n\ndef solve(c):\n    arr = []\n    pow = 60\n    prefix = 0\n    while pow >= 0:\n        bit1 = 1 << pow & prefix\n        bit2 = 1 << pow & c\n        if bit1 != bit2:\n            prefix ^= (1 << pow + 1) - 1\n            arr.append((1 << pow + 1) - 1)\n        pow -= 1\n    if arr == []:\n        return (2, [7, 7])\n    return (len(arr), arr)\nfor _ in range(int(input())):\n    (n, arr) = solve(int(input()))\n    print(n)\n    print(' '.join(map(str, arr)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(1, 1, sep=' ')\n    else:\n        k = 0\n        temp = n\n        while temp // 2 != 0:\n            temp //= 2\n            k += 1\n        xor = 0\n        array = []\n        count = 0\n        while k >= 0:\n            if 1 << k & n != 1 << k & xor:\n                count += 1\n                xor ^= (1 << k + 1) - 1\n                array.append((1 << k + 1) - 1)\n            k -= 1\n        print(count)\n        for i in range(-1, -(len(array) + 1), -1):\n            print(array[i], end=' ')\n        print()", "import math\n\ndef get_range(c):\n    return math.floor(math.log(c, 2)) + 1\n\ndef solve(c):\n    arr = []\n    pow = 60\n    prefix = 0\n    while pow >= 0:\n        bit1 = 1 << pow & prefix\n        bit2 = 1 << pow & c\n        if bit1 != bit2:\n            prefix ^= (1 << pow + 1) - 1\n            arr.append((1 << pow + 1) - 1)\n        pow -= 1\n    if arr == []:\n        return (2, [7, 7])\n    return (len(arr), arr)\nt = int(input())\nfor _ in range(t):\n    c = int(input())\n    (n, arr) = solve(c)\n    print(n)\n    print(' '.join(map(str, arr)))", "for t in range(int(input())):\n    c = int(input())\n    x = 0\n    a = []\n    for i in range(59, -1, -1):\n        y = c & 1 << i\n        z = x & 1 << i\n        if y != z:\n            k = 2 ** (i + 1) - 1\n            a.append(k)\n            x ^= k\n    if c == 0:\n        a.append(1)\n        a.append(1)\n    print(len(a))\n    print(*a)", "for t in range(int(input())):\n    c = int(input())\n    x = 0\n    a = []\n    for i in range(59, -1, -1):\n        y = c & 1 << i\n        z = x & 1 << i\n        if y != z:\n            k = 2 ** (i + 1) - 1\n            a.append(k)\n            x ^= k\n    if c == 0:\n        a.append(1)\n        a.append(1)\n    print(len(a))\n    print(*a)", "import collections\nimport math\n\ndef nice(n):\n    ans = []\n    if n == 0:\n        print(2)\n        print(1, 1)\n        return\n    diff = float('inf')\n    while diff > 0:\n        cnt = math.floor(math.log2(n))\n        hp = 2 ** (cnt + 1) - 1\n        ans.append(hp)\n        diff = hp - n\n        n = diff\n    print(len(ans))\n    for i in ans:\n        print(i, end=' ')\n    print('\\r')\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    nice(n)", "import math\nfor _ in range(int(input())):\n    C = int(input())\n    A = []\n    curr = 0\n    if C == 0:\n        print(2)\n        print(1, 1)\n    else:\n        A = bin(C)[2:]\n        ans = []\n        num = 0\n        for i in range(len(A)):\n            if int(A[i]) != num:\n                ans.append(2 ** (len(A) - i) - 1)\n                num = 1 - num\n        ans.reverse()\n        print(len(ans))\n        for i in range(len(ans)):\n            print(ans[i], end=' ')\n        print()", "import math\nfor _ in range(int(input())):\n    C = int(input())\n    A = []\n    curr = 0\n    if C == 0:\n        print(2)\n        print(1, 1)\n    else:\n        while C > 0:\n            A.append(C % 2)\n            C //= 2\n        ans = []\n        num = 0\n        A.reverse()\n        for i in range(len(A)):\n            if A[i] != num:\n                ans.append(2 ** (len(A) - i) - 1)\n                num = 1 - num\n        ans.reverse()\n        print(len(ans))\n        for i in range(len(ans)):\n            print(ans[i], end=' ')\n        print()", "for _ in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(1, 1)\n    else:\n        p = bin(c).replace('0b', '')\n        k = len(p)\n        l = []\n        sel = 0\n        for i in range(k):\n            if sel % 2 == 0 and p[i] == '0':\n                continue\n            elif sel % 2 == 1 and p[i] == '0':\n                l.append(pow(2, k - i) - 1)\n                sel += 1\n            elif sel % 2 == 0 and p[i] == '1':\n                l.append(pow(2, k - i) - 1)\n                sel += 1\n            elif sel % 2 == 1 and p[i] == '1':\n                continue\n        l = l[::-1]\n        print(sel)\n        for i in l:\n            print(i, end=' ')\n        print()", "def func():\n    ans = []\n    curr = 0\n    for i in range(60, -1, -1):\n        b1 = 1 << i & curr\n        b2 = 1 << i & c\n        if b1 != b2:\n            ans.append((1 << i + 1) - 1)\n            curr ^= (1 << i + 1) - 1\n    if not ans:\n        ans = [3, 3]\n    print(len(ans))\n    print(*ans)\nfor _ in range(int(input())):\n    c = int(input())\n    func()", "powers = [1]\nfor i in range(1, 61):\n    powers.append(powers[-1] * 2)\nfor i in range(61):\n    powers[i] -= 1\nfor _ in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print('2\\n1 1\\n')\n    else:\n        cbin = bin(c)[2:]\n        ans = [powers[len(cbin)]]\n        for i in range(1, len(cbin)):\n            if cbin[i] != cbin[i - 1]:\n                ans.append(powers[len(cbin) - i])\n        print(len(ans))\n        print(*ans)", "for _ in range(int(input())):\n    c = int(input())\n    s = bin(c)[2:]\n    q = 2 ** len(s) - 1\n    a = [q]\n    (i, k, b) = (0, q, bin(q)[2:])\n    while i < len(s):\n        if s[i] != b[i]:\n            v = 2 ** (len(s) - i) - 1\n            a.append(v)\n            k = k ^ v\n            b = bin(k)[2:]\n            if k == c:\n                break\n        i += 1\n    print(len(a))\n    print(*a, sep=' ')", "t = int(input())\nfor i in range(t):\n    c = int(input())\n    res = []\n    q = 0\n    for j in range(60, -1, -1):\n        bit1 = 1 << j & c\n        bit2 = 1 << j & q\n        if bit1 != bit2:\n            res.append((1 << j + 1) - 1)\n            q = q ^ res[-1]\n    if len(res) == 0:\n        print(2)\n        print(' '.join(['1', '1']))\n    else:\n        print(len(res))\n        print(' '.join([str(k) for k in res]))", "def run_case():\n    n = int(input())\n    if n == 0:\n        print('2')\n        print('1 1')\n        return\n    ans = []\n    while n > 0:\n        ans.append(n % 2)\n        n = n // 2\n    res = []\n    num = 0\n    ans.reverse()\n    for i in range(len(ans)):\n        if ans[i] != num:\n            res.append(2 ** (len(ans) - i) - 1)\n            num = 1 - num\n    print(len(res))\n    for i in res:\n        print(i, end=' ')\n    print('')\nt = int(input())\nfor i in range(t):\n    run_case()", "import math\nt = int(input())\nfor _ in range(t):\n    c = int(input())\n    if c == 0:\n        print('2')\n        print('1', end=' ')\n        print('1')\n        continue\n    arr = []\n    while c > 0:\n        x = math.floor(math.log(c, 2)) + 1\n        y = 2 ** x - 1\n        arr.append(y)\n        c = y - c\n    n = len(arr)\n    print(n)\n    for i in range(n):\n        print(arr[i], end=' ')\n    print()", "import sys\nfrom collections import defaultdict\n\ndef take_input():\n    return sys.stdin.readline()\n\ndef print_arr(arr):\n    sys.stdout.write(' '.join(map(str, arr)) + '\\n')\n\ndef print_num(num):\n    sys.stdout.write(str(num) + '\\n')\n\ndef solve(test):\n    target = int(input())\n    curr_xor = 0\n    ans = []\n    for i in range(60, -1, -1):\n        req_bit = 1 << i & target\n        curr_bit = 1 << i & curr_xor\n        if req_bit != curr_bit:\n            nex_pow = (1 << i + 1) - 1\n            curr_xor = curr_xor ^ nex_pow\n            ans.append(nex_pow)\n    if len(ans) == 0:\n        ans.append(1)\n        ans.append(1)\n    print(len(ans))\n    print(' '.join((str(ch) for ch in ans)))\n\ndef main():\n    test_case = int(input())\n    for t in range(test_case):\n        solve(t)\nmain()", "import sys\nfrom collections import defaultdict\n\ndef take_input():\n    return sys.stdin.readline()\n\ndef print_arr(arr):\n    sys.stdout.write(' '.join(map(str, arr)) + '\\n')\n\ndef print_num(num):\n    sys.stdout.write(str(num) + '\\n')\n\ndef solve(test):\n    target = int(input())\n    curr_xor = 0\n    ans = []\n    for i in range(60, -1, -1):\n        req_bit = 1 << i & target\n        curr_bit = 1 << i & curr_xor\n        if req_bit != curr_bit:\n            nex_pow = (1 << i + 1) - 1\n            curr_xor = curr_xor ^ nex_pow\n            ans.append(nex_pow)\n    if len(ans) == 0:\n        ans.append(1)\n        ans.append(1)\n    print(len(ans))\n    print(' '.join((str(ch) for ch in ans)))\n\ndef main():\n    test_case = int(input())\n    for t in range(test_case):\n        solve(t)\nmain()", "import math, heapq, bisect\nfrom collections import Counter, deque, defaultdict\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    n = getInt()\n    bl = n.bit_length()\n    (v, ans, cur) = (int('1' * bl if bl > 0 else '0', 2), [], 0)\n    for i in range(bl):\n        if n & 1 << bl - i - 1 != cur & 1 << bl - i - 1:\n            ans.append(v)\n            cur ^= v\n        v >>= 1\n    if len(ans) == 0:\n        ans = [1, 1]\n    print(len(ans))\n    print(*ans)\n\ndef ts(n, pr=False):\n    if pr:\n        for _ in range(n):\n            print(solve())\n    else:\n        for _ in range(n):\n            solve()\nts(getInt())", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    c = 0\n    a = []\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    for i in range(60, -1, -1):\n        if n & 1 << i != c & 1 << i:\n            k = 2 ** (i + 1) - 1\n            a.append(k)\n            c = c ^ k\n    print(len(a))\n    for i in a:\n        print(i, end=' ')\n    print()", "def solve3():\n    n = int(input())\n    p = bin(n)[2:]\n    if n == 0:\n        print(2)\n        print('1 1')\n        return\n    l = len(p)\n    ans = []\n    cur = 0\n    for i in range(len(p)):\n        if int(p[i]) != cur:\n            cur = 1 - cur\n            ans.append(2 ** (l - i) - 1)\n    print(len(ans))\n    print(*ans)\nfor testis in range(int(input())):\n    solve3()", "for _ in range(int(input())):\n    n = int(input())\n    l = bin(n)[2:]\n    l = list(l)\n    fac = 0\n    ans = []\n    for i in range(len(l)):\n        if l[i] == '1':\n            if fac == 0:\n                ans.append(pow(2, len(l) - i) - 1)\n            fac = 1\n        if l[i] == '0':\n            if fac == 1:\n                ans.append(pow(2, len(l) - i) - 1)\n            fac = 0\n    if n == 0:\n        ans = [1, 1]\n    print(len(ans))\n    for i in ans:\n        print(i, end=' ')\n    print()", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    c = 0\n    a = []\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    for i in range(60, -1, -1):\n        if n & 1 << i != c & 1 << i:\n            k = (2 << i) - 1\n            a.append(k)\n            c = c ^ k\n    print(len(a))\n    for i in a:\n        print(i, end=' ')\n    print()", "for test in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    bits = bin(n)[2:]\n    k = len(bits)\n    l = []\n    c = 0\n    xor_value = 0\n    for i in range(k):\n        if bits[i] == '1':\n            if c % 2 == 0:\n                l.append(2 ** (k - i) - 1)\n                c += 1\n        elif c % 2 == 1:\n            l.append(2 ** (k - i) - 1)\n            c += 1\n    print(c)\n    print(*l)\n    for i in l:\n        xor_value ^= i\n    if xor_value != n:\n        print(1 / 0)", "def binp(n):\n    return bin(n).replace('0b', '')\nfor t in range(int(input())):\n    c = int(input())\n    t = str(binp(c))\n    n = len(t)\n    a = 0\n    l = []\n    for i in range(n):\n        if a % 2 == 0:\n            if int(t[i]) == 1:\n                l.append(2 ** (n - i) - 1)\n                a = a + 1\n        if a % 2 != 0:\n            if int(t[i]) == 0:\n                l.append(2 ** (n - i) - 1)\n                a = a + 1\n    if a != 0:\n        print(a)\n        for i in range(a - 1):\n            print(l[i], end=' ')\n        print(l[a - 1])\n    else:\n        print(2)\n        print(1, 1)", "x = int(input())\nfor i in range(x):\n    y = int(input())\n    a = []\n    if y == 0:\n        print(2)\n        print('1 1')\n        continue\n    while y > 0:\n        if y & 1 == 0:\n            a.append(0)\n        else:\n            a.append(1)\n        y = y >> 1\n    count = 1\n    for jj in range(len(a) - 1):\n        if a[jj] != a[jj + 1]:\n            count += 1\n    b = []\n    b.append(str(2 ** len(a) - 1))\n    for kk in range(len(a) - 1, 0, -1):\n        if a[kk] != a[kk - 1]:\n            b.append(str(2 ** kk - 1))\n    ans = ' '\n    print(count)\n    print(ans.join(b))", "for i in range(int(input())):\n    n = int(input())\n    if n == 0:\n        (an, a) = (2, [1, 1])\n    else:\n        x = bin(n)[2:]\n        (an, a, n) = (0, [], len(x))\n        for i in range(n):\n            if int(x[i]) and (not an & 1) or (not int(x[i]) and an & 1):\n                a.append((1 << n - i) - 1)\n                an += 1\n    print(an)\n    print(*a)", "for i in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(*[1, 1])\n    else:\n        x = bin(n)[2:]\n        a = []\n        n = len(x)\n        an = 0\n        for i in range(n):\n            if int(x[i]):\n                if not an & 1:\n                    a.append((1 << n - i) - 1)\n                    an += 1\n            elif an & 1:\n                a.append((1 << n - i) - 1)\n                an += 1\n        print(an)\n        print(*a)", "m = 1 << 60\nfor t in range(int(input())):\n    c = int(input().strip())\n    b = 1\n    pb = c & b\n    v = 0\n    n = 1\n    res = []\n    if c == 0:\n        res = ['1', '1']\n        n = 2\n    else:\n        while c > 0:\n            b = c & 1\n            if pb != b:\n                n += 1\n                res.append(str(v))\n            pb = b\n            v = (v << 1) + 1\n            c >>= 1\n        res.append(str(v))\n    print(n)\n    print(' '.join(res))", "def MinimizeTheSize2():\n    num_test_cases = int(input())\n    for _ in range(num_test_cases):\n        target = int(input())\n        if target == 0:\n            print(2)\n            print('1 1')\n            continue\n        target_bits = [int(x) for x in bin(target)[2:]]\n        are_there_an_even_number_of_set_bits = 1\n        full = 2 ** len(target_bits) - 1\n        ans = []\n        for (i, target_bit) in enumerate(target_bits):\n            if target_bit == are_there_an_even_number_of_set_bits:\n                ans += [full >> i]\n                are_there_an_even_number_of_set_bits ^= 1\n        print(len(ans))\n        print(*ans, sep=' ')\n    return\nMinimizeTheSize2()", "lookup = []\ny = 2\nfor j in range(1, 20):\n    lookup.append(y - 1)\n    y = y * 2\nT = int(input())\nfor tc in range(T):\n    C = int(input())\n    nbits = len(bin(C)[2:])\n    cur = C\n    mylist = []\n    while cur > 0:\n        cur = cur ^ 2 ** nbits - 1\n        mylist.append(2 ** nbits - 1)\n        x = cur\n        nbits = len(bin(cur)[2:])\n    if C == 0:\n        mylist.append(1)\n        mylist.append(1)\n    mylist.sort()\n    print(len(mylist))\n    for x in mylist:\n        print(x, end=' ')\n    print()", "import sys\nl = []\nx = 2\nfor i in range(1, 61):\n    l.append(x - 1)\n    x = x * 2\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    if n == 0:\n        print(2)\n        print(1, 1)\n    else:\n        x = bin(n)[2:]\n        z = len(x)\n        a = 0\n        g = [l[z - 1]]\n        v = '1'\n        for i in range(1, z):\n            if x[i] == v:\n                continue\n            else:\n                a = a + 1\n                v = x[i]\n                g.append(l[z - i - 1])\n        print(a + 1)\n        print(*g)", "import math\nt = int(input())\nfor _ in range(t):\n    c = int(input())\n    if c == 0:\n        print('2')\n        print('1', end=' ')\n        print('1')\n        continue\n    arr = []\n    while c > 0:\n        x = math.floor(math.log(c, 2)) + 1\n        y = 2 ** x - 1\n        arr.append(y)\n        c = y - c\n    n = len(arr)\n    print(n)\n    for i in range(n):\n        print(arr[i], end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    a = bin(int(input()))[2:]\n    if a == '0':\n        print(2)\n        lst = [1, 1]\n    else:\n        lst = [2 ** len(a) - 1]\n        for j in range(1, len(a)):\n            if a[j] != a[j - 1]:\n                lst.append(2 ** (len(a) - j) - 1)\n        print(len(lst))\n        lst = set(lst)\n    print(*list(lst))", "for _ in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print('1 1')\n        continue\n    s = ''\n    while n > 0:\n        s += str(n % 2)\n        n //= 2\n    s = s[::-1]\n    n = len(s)\n    st = []\n    st.append(pow(2, n) - 1)\n    ch = '1'\n    for i in range(0, n):\n        if s[i] != ch:\n            st.append(pow(2, n - i) - 1)\n            ch = s[i]\n    print(len(st))\n    print(*st[::-1])", "nums = [(1 << i) - 1 for i in range(1, 61)]\nfor _ in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(1, 1)\n        continue\n    res = []\n    j = c.bit_length()\n    j -= 1\n    res.append(nums[j])\n    while j >= 0:\n        jbit = c & 1 << j\n        while j >= 0 and (c & 1 << j == jbit == 0 or (c & 1 << j and jbit)):\n            j -= 1\n        if j >= 0:\n            res.append(nums[j])\n    print(len(res))\n    print(*res)", "t = int(input())\nfor i in range(t):\n    a = bin(int(input()))[2:]\n    if a == '0':\n        print(2)\n        lst = [1, 1]\n    else:\n        lst = [2 ** len(a) - 1]\n        for j in range(1, len(a)):\n            if a[j] != a[j - 1]:\n                lst.append(2 ** (len(a) - j) - 1)\n        print(len(lst))\n        lst = set(lst)\n    for j in lst:\n        print(j, end='')\n        print(' ', end='')\n    print()", "import sys\nfor _ in range(int(input())):\n    n = int(sys.stdin.readline())\n    c = 0\n    ans = []\n    f = 0\n    c = 0\n    if n == 0:\n        sys.stdout.write('2\\n')\n        sys.stdout.write('1 1\\n')\n    else:\n        for i in range(61, -1, -1):\n            if n & 1 << i:\n                if c % 2 == 0:\n                    ans.append((1 << i + 1) - 1)\n                    c += 1\n            else:\n                f = 0\n                if c % 2:\n                    ans.append((1 << i + 1) - 1)\n                    c += 1\n        sys.stdout.write(str(len(ans)) + '\\n')\n        for i in ans:\n            sys.stdout.write(str(i) + ' ')\n        sys.stdout.write('\\n')", "for _ in range(int(input())):\n    n = int(input())\n    if n != 0:\n        n = bin(n)[2:]\n        l = len(n)\n        s = ''\n        k = 0\n        for i in range(l):\n            if n[i] == '1':\n                if k % 2 == 0:\n                    s += f'{2 ** (l - i) - 1} '\n                    k += 1\n            elif k % 2:\n                s += f'{2 ** (l - i) - 1} '\n                k += 1\n        print(k)\n        print(s)\n    else:\n        print(2)\n        print(1, 1)", "from collections import deque\nimport bisect\nt = int(input())\na = [0 for x in range(64)]\na[0] = 1\nk = 1\nh = 1\nwhile h < 64:\n    a[h] = 2 * k - 1\n    k *= 2\n    h += 1\ns = set(a)\nwhile t > 0:\n    c = int(input())\n    n = 0\n    d = deque()\n    while c not in s:\n        u = bisect.bisect_right(a, c)\n        d.insert(0, a[u])\n        c = a[u] - c\n        n += 1\n    d.insert(0, c)\n    n += 1\n    print(n)\n    for x in d:\n        print(x, end=' ')\n    print()\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    c = int(input())\n    ans = []\n    if c == 0:\n        print(2)\n        print('1 1')\n        continue\n    while c > 0:\n        f = math.ceil(math.log2(c) + 1e-14)\n        x = 2 ** f - 1\n        c = x - c\n        ans.append(x)\n    print(len(ans))\n    for i in ans:\n        print(i, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    a = bin(int(input()))[2:]\n    if a == '0':\n        print(2)\n        lst = [1, 1]\n    else:\n        lst = [2 ** len(a) - 1]\n        for j in range(1, len(a)):\n            if a[j] != a[j - 1]:\n                lst.append(2 ** (len(a) - j) - 1)\n        print(len(lst))\n        lst = set(lst)\n    for j in lst:\n        print(j, end='')\n        print(' ', end='')\n    print()", "def isSet(n, i):\n    if n & 1 << i:\n        True\n    else:\n        False\nfor _ in range(int(input())):\n    n = int(input())\n    s = '0' + bin(n).replace('0b', '')\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    k = len(s)\n    ans = []\n    for i in range(1, k):\n        if s[i] != s[i - 1]:\n            ans.append(2 ** (k - i) - 1)\n    print(len(ans))\n    print(*ans)", "for vcbhnj in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(2 ** 60 - 1, 2 ** 60 - 1)\n        continue\n    x = bin(c)[2:]\n    a = [[0, int(x[0])]]\n    for i in range(1, len(x)):\n        if x[i] != x[i - 1]:\n            a.append([i, int(x[i])])\n    n = len(a)\n    ans = []\n    for i in a:\n        ans.append(2 ** (len(x) - i[0]) - 1)\n    print(n)\n    for i in ans:\n        print(i, end=' ')\n    print()", "for x in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(*[1, 1])\n    else:\n        a = bin(n)\n        b = a[2:]\n        l = []\n        c = 0\n        for i in range(len(b)):\n            if b[i] == '1':\n                if not c & 1:\n                    l.append((1 << len(b) - i) - 1)\n                    c = c + 1\n            elif c & 1:\n                l.append((1 << len(b) - i) - 1)\n                c = c + 1\n        print(c)\n        print(*l)", "T = int(input())\nfor i in range(T):\n    C = int(input())\n    if C == 0:\n        print(2)\n        print('1 1')\n    else:\n        y = 1\n        xp = 1 if C & 1 == 1 else 0\n        C = C >> 1\n        p = []\n        while C != 0:\n            x = 1 if C & 1 == 1 else 0\n            if x != xp:\n                p.append(y)\n            xp = x\n            y = y << 1 | 1\n            C = C >> 1\n        p.append(y)\n        print(len(p))\n        for x in p:\n            print(x, end=' ')\n        print('\\r')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(1)\n        print(1)\n    elif c & c + 1 == 0:\n        print(1)\n        print(c)\n    else:\n        temp = bin(c).replace('0b', '')\n        temp = '0' * (60 - len(temp)) + temp\n        set_bit = [0] * 60\n        ans = []\n        one = 0\n        for i in range(60):\n            set_bit[i] = one\n            if temp[i] == '1' and set_bit[i] % 2 == 0:\n                one += 1\n                set_bit[i] += 1\n            elif temp[i] == '0' and set_bit[i] % 2 != 0:\n                one += 1\n                set_bit[i] += 1\n        one = 0\n        for i in range(60):\n            set_bit[i] -= one\n            if set_bit[i] != 0:\n                one += 1\n                ans.append((1 << 60 - i) - 1)\n                set_bit[i] -= 1\n        print(len(ans))\n        print(*ans)", "import math\nt = int(input())\nfor _ in range(t):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(1, end=' ')\n        print(1)\n        continue\n    arr = []\n    while c > 0:\n        a = math.floor(math.log(c, 2)) + 1\n        b = 2 ** a - 1\n        arr.append(b)\n        c = b - c\n    n = len(arr)\n    print(n)\n    for i in range(n):\n        print(arr[i], end=' ')\n    print()", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    ar = []\n    t1 = n\n    while t1:\n        if t1 % 2 == 0:\n            ar.append(0)\n        else:\n            ar.append(1)\n        t1 = t1 // 2\n    itr1 = len(ar)\n    res = []\n    res.append((1 << itr1) - 1)\n    itr1 = itr1 - 1\n    while itr1 >= 0:\n        if ar[itr1] == 1:\n            itr1 = itr1 - 1\n        else:\n            prev = itr1\n            while itr1 >= 0 and ar[itr1] == 0:\n                itr1 = itr1 - 1\n            res.append((1 << prev + 1) - 1)\n            if itr1 > -1:\n                res.append((1 << itr1 + 1) - 1)\n    print(len(res))\n    print(*res)", "def solve(c):\n    if c == 0:\n        print(2)\n        print('1 1')\n        return\n    cb = '{0:b}'.format(c)\n    ans = []\n    l = len(cb)\n    so_far = 0\n    for b in range(0, len(cb)):\n        if cb[b] == '1':\n            if so_far % 2 == 1:\n                l -= 1\n                continue\n            ans.append((1 << l) - 1)\n            so_far += 1\n            l -= 1\n            continue\n        if so_far % 2 == 0:\n            l -= 1\n            continue\n        ans.append((1 << l) - 1)\n        so_far += 1\n        l -= 1\n    print(len(ans))\n    print(*ans)\nt = int(input().strip())\ninputs = []\nfor _ in range(t):\n    inputs.append(int(input().strip()))\nfor c in inputs:\n    solve(c)", "for vcbhnj in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(1, 1)\n        continue\n    x = bin(c)[2:]\n    a = [[0, int(x[0])]]\n    for i in range(1, len(x)):\n        if x[i] != x[i - 1]:\n            a.append([i, int(x[i])])\n    n = len(a)\n    ans = []\n    for i in a:\n        ans.append(2 ** (len(x) - i[0]) - 1)\n    print(n)\n    for i in ans:\n        print(i, end=' ')\n    print()", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nT = int(input())\nfor _ in range(T):\n    ret = []\n    C = int(input())\n    if C == 0:\n        print(2)\n        print(1, 1)\n        continue\n    C_str = str(decimalToBinary(C))\n    curr = 0\n    n = len(C_str)\n    for (i, x) in enumerate(C_str):\n        if int(x) != curr:\n            ret.append(int('1' * (n - i), 2))\n            curr = (curr + 1) % 2\n    print(len(ret))\n    print(*ret)", "test = []\nfor i in range(1, 61):\n    test.append(str((1 << i) - 1))\nt = int(input())\nfor z in range(t):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print('1 1')\n        continue\n    res = []\n    i = 1\n    cur = c & 1\n    while c >> i:\n        if c >> i & 1 != cur:\n            res.append(test[i - 1])\n            cur = c >> i & 1\n        i += 1\n    res.append(test[i - 1])\n    print(len(res))\n    print(' '.join(res))", "from math import ceil, log2, floor, sqrt\nfrom collections import defaultdict, deque\nimport sys\nimport os.path\nsys.setrecursionlimit(200000)\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r+')\n    sys.stdout = open('output.txt', 'w')\n\ndef MI():\n    return map(int, input().split())\nmod = 10 ** 9 + 7\n\ndef div(n):\n    l = []\n    while n > 0:\n        l.append(n % 2)\n        n = n // 2\n    return l\n\ndef solve():\n    n = int(input())\n    l = div(n)\n    ans = []\n    if n == 0:\n        print(2)\n        print(1, 1)\n        return\n    last = 1\n    for i in range(len(l)):\n        if l[i] == 0:\n            if last == 0:\n                ans[-1] = 2 * ans[-1] + 1\n                ans[-2] = 2 * ans[-2] + 1\n            else:\n                ans.append((1 << i + 1) - 1)\n                ans.append((1 << i + 1) - 1)\n            last = 0\n        else:\n            if len(ans):\n                ans[-1] = 2 * ans[-1] + 1\n            else:\n                ans.append(1)\n            last = 1\n    print(len(ans))\n    print(*ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    bit = bin(n)[2:]\n    if n == 2 ** len(bit) - 1:\n        print(1)\n        print(n)\n    elif n == 2 ** len(bit):\n        print(2)\n        print(2 ** len(bit) - 1, 2 ** (len(bit) + 1) - 1)\n    else:\n        a = 1\n        ans = []\n        b = len(bit)\n        c = 2 ** b - 1\n        ans.append(c)\n        for j in range(len(bit)):\n            if bit[j] == '1':\n                if a == 1:\n                    continue\n                else:\n                    b = len(bit[j:])\n                    c = 2 ** b - 1\n                    ans.append(c)\n                    a = 1\n            elif a == 0:\n                continue\n            else:\n                b = len(bit[j:])\n                c = 2 ** b - 1\n                ans.append(c)\n                a = 0\n        print(len(ans))\n        print(*ans)", "for i in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(*[1, 1])\n    else:\n        x = bin(n)[2:]\n        a = []\n        n = len(x)\n        an = 0\n        for i in range(n):\n            if x[i] == '1':\n                if not an & 1:\n                    a.append((1 << n - i) - 1)\n                    an += 1\n            elif an & 1:\n                a.append((1 << n - i) - 1)\n                an += 1\n        print(an)\n        print(*a)", "from collections import deque, defaultdict\nfrom math import sqrt, ceil, factorial, floor, inf, log2, sqrt, gcd\nimport bisect\nimport copy\nfrom itertools import combinations\nimport sys\nimport heapq\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    arr = []\n    for i in range(62):\n        if n & 1 << i > 0:\n            arr.append(1)\n        else:\n            arr.append(0)\n    arr.reverse()\n    ind = 0\n    for i in range(len(arr)):\n        if arr[i] == 1:\n            ind = i\n            break\n    qu = len(arr) - ind\n    arr = arr[ind:]\n    ans = []\n    ans.append(2 ** qu - 1)\n    for i in range(1, len(arr)):\n        qu = len(arr) - i\n        if arr[i] != arr[i - 1]:\n            ans.append(2 ** qu - 1)\n    print(len(ans))\n    print(*ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    ans = []\n    msb = int(math.log2(n))\n    cnt = 0\n    for i in range(msb, -1, -1):\n        if n & 1 << i:\n            if cnt % 2 == 0:\n                cnt += 1\n                ans.append((1 << i + 1) - 1)\n        elif cnt % 2 != 0:\n            cnt += 1\n            ans.append((1 << i + 1) - 1)\n    print(len(ans))\n    for x in ans:\n        print(x, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    c = int(input())\n    li = []\n    a = bin(c).replace('0b', '')\n    if c == 0:\n        print(2)\n        print(1, 1)\n    else:\n        s = len(a)\n        for j in range(len(a)):\n            if j == 0:\n                li.append(2 ** s - 1)\n            elif a[j] != a[j - 1]:\n                li.append(2 ** (s - j) - 1)\n        print(len(li))\n        print(*li)", "def do(n):\n    b = bin(n)\n    l = len(b)\n    v = 2 ** (l - 2) - 1\n    va = [v]\n    bv = bin(v)\n    for i in range(2, l):\n        if b[i] != bv[i]:\n            vi = 2 ** (l - i) - 1\n            va.append(vi)\n            v ^= vi\n            bv = bin(v)\n    return va\nfor _ in range(int(input())):\n    l = do(int(input()))\n    print(len(l))\n    print(*l)", "import math\nfor _ in range(int(input())):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(1, 1)\n        continue\n    ans = []\n    while c:\n        s = int(math.log(c, 2)) + 1\n        a = (1 << s) - 1\n        ans.append(a)\n        c = c ^ a\n    print(len(ans))\n    for i in range(len(ans) - 1):\n        print(ans[i], end=' ')\n    print(ans[-1])", "for q in range(int(input())):\n    n = int(input())\n    s = bin(n).replace('0b', '')\n    ln = len(s)\n    t = '1'\n    l = []\n    if n == 0:\n        print(2)\n        print(1, 1)\n    else:\n        for i in range(ln):\n            if s[i] == t:\n                t = '0' if t == '1' else '1'\n                l.append(2 ** (ln - i) - 1)\n        print(len(l))\n        print(*l)", "import bisect\nl = [2 ** i - 1 for i in range(1, 61)]\n\ndef solve(c):\n    x = l[bisect.bisect_right(l, c) - 1]\n    y = l[bisect.bisect_left(l, c)]\n    if x == y:\n        return [x]\n    if x ^ y == c:\n        return [x, y]\n    return solve(y - c) + [y]\nfor _ in range(int(input())):\n    c = int(input())\n    result = solve(c)\n    print(len(result))\n    print(*result)", "def run_case():\n    n = int(input())\n    if n == 0:\n        print('2')\n        print('1 1')\n        return\n    ans = []\n    while n > 0:\n        ans.append(n % 2)\n        n = n // 2\n    res = []\n    num = 0\n    ans.reverse()\n    for i in range(len(ans)):\n        if ans[i] != num:\n            res.append(2 ** (len(ans) - i) - 1)\n            num = 1 - num\n    res.reverse()\n    print(len(res))\n    for i in res:\n        print(i, end=' ')\n    print('')\nt = int(input())\nfor i in range(t):\n    run_case()", "from sys import stdin\n\ndef ii():\n    return int(stdin.readline())\n\ndef mi():\n    return map(int, stdin.readline().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return stdin.readline()\nt = 1\nt = ii()\nfor _ in range(t):\n    n = ii()\n    if n == 0:\n        print(2)\n        print(1, 1)\n    else:\n        l1 = []\n        tmp = 0\n        st = 1 << 61\n        while st:\n            if tmp & st != n & st:\n                tmp = tmp ^ (st << 1) - 1\n                l1.append((st << 1) - 1)\n            st >>= 1\n        print(len(l1))\n        print(*l1)", "t = int(input())\nfor i in range(t):\n    a = bin(int(input()))[2:]\n    if a == '0':\n        print(2)\n        lst = [1, 1]\n    else:\n        lst = [2 ** len(a) - 1]\n        for j in range(1, len(a)):\n            if a[j] != a[j - 1]:\n                lst.append(2 ** (len(a) - j) - 1)\n        print(len(lst))\n        lst = set(lst)\n    for j in lst:\n        print(j, end='')\n        print(' ', end='')\n    print()", "import math\n\nclass sol:\n\n    def __init__(self):\n        self.n = n\n        self.p = []\n\n    def su(self, n):\n        if n == 0:\n            self.p.append(1)\n            self.p.append(1)\n        while n > 0:\n            if math.ceil(math.log(n + 1) / math.log(2)) == math.floor(math.log(n + 1) / math.log(2)):\n                self.p.append(n)\n                n = 0\n            elif math.ceil(math.log(n) / math.log(2)) == math.floor(math.log(n) / math.log(2)):\n                d = math.floor(math.log(n) / math.log(2))\n                a1 = pow(2, d) - 1\n                b1 = pow(2, d + 1) - 1\n                self.p.append(a1)\n                self.p.append(b1)\n                n = 0\n            else:\n                d = int(math.log(n) // math.log(2))\n                k = pow(2, d + 1) - 1\n                self.p.append(k)\n                diff = k - n\n                n = diff\n\n    def col(self, n):\n        if math.ceil(math.log(n + 1) / math.log(2)) == math.floor(math.log(n + 1) / math.log(2)):\n            self.p.append(n)\n        elif math.ceil(math.log(n) / math.log(2)) == math.floor(math.log(n) / math.log(2)):\n            d = math.floor(math.log(n) / math.log(2))\n            a1 = pow(2, d) - 1\n            b1 = pow(2, d + 1) - 1\n            self.p.append(a1)\n            self.p.append(b1)\n        else:\n            d = int(math.log(n) // math.log(2))\n            k = pow(2, d + 1) - 1\n            self.p.append(k)\n            diff = k - n\n            self.col(diff)\nfor _ in range(int(input())):\n    n = int(input())\n    s = sol()\n    s.su(n)\n    print(len(s.p))\n    print(*s.p)", "t = int(input())\nnums = [1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295, 8589934591, 17179869183, 34359738367, 68719476735, 137438953471, 274877906943, 549755813887, 1099511627775, 2199023255551, 4398046511103, 8796093022207, 17592186044415, 35184372088831, 70368744177663, 140737488355327, 281474976710655, 562949953421311, 1125899906842623, 2251799813685247, 4503599627370495, 9007199254740991, 18014398509481983, 36028797018963967, 72057594037927935, 144115188075855871, 288230376151711743, 576460752303423487, 1152921504606846975]\nfor i in range(t):\n    c = int(input())\n    if c == 0:\n        print(2)\n        print(1, end=' ')\n        print(1)\n    else:\n        c = '{0:b}'.format(c)\n        lenc = len(c)\n        ans = []\n        rest1 = True\n        ans.append(nums[lenc - 1])\n        for j in range(1, lenc):\n            if c[j] == '0' and rest1 == True:\n                ans.append(nums[lenc - (j + 1)])\n                rest1 = False\n            elif c[j] == '1' and rest1 == False:\n                ans.append(nums[lenc - (j + 1)])\n                rest1 = True\n        print(len(ans))\n        for j in sorted(ans):\n            print(j, end=' ')\n        print()", "for _ in range(int(input())):\n    a = int(input())\n    b = bin(a)[2:]\n    if a == 0:\n        print(2)\n        print(1, 1)\n        continue\n    ans = []\n    ans.append(int('1' * len(b), 2))\n    for i in range(1, len(b)):\n        if b[i] != b[i - 1]:\n            ans.append(int('1' * (len(b) - i), 2))\n    print(len(ans))\n    ans.sort()\n    for i in ans:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    if n != 0:\n        n = bin(n)[2:]\n        l = len(n)\n        s = ''\n        k = 0\n        for i in range(l):\n            if n[i] == '1':\n                if k % 2 == 0:\n                    s += f'{2 ** (l - i) - 1} '\n                    k += 1\n            elif k % 2:\n                s += f'{2 ** (l - i) - 1} '\n                k += 1\n        print(k)\n        print(s)\n    else:\n        print(2)\n        print(1, 1)", "for _ in range(int(input())):\n    n = int(input())\n    b1 = list(bin(n)[2:])\n    v = str(0)\n    ans = []\n    n1 = len(b1)\n    for i in range(n1):\n        if b1[i] == v:\n            continue\n        else:\n            ans.append(2 ** (n1 - i) - 1)\n            if v == str(0):\n                v = str(1)\n            else:\n                v = str(0)\n    if n == 0:\n        print(2)\n        print(*[1, 1])\n    else:\n        print(len(ans))\n        print(*ans)", "t = int(input())\nfor i in range(t):\n    C = int(input())\n    if C == 0:\n        print(2)\n        print('1 1')\n        continue\n    if C == 1:\n        print(1)\n        print(1)\n        continue\n    c = bin(C)[2:]\n    if '0' in c:\n        n = len(c)\n        ans = [2 ** n - 1]\n        for i in range(n - 1):\n            if c[i + 1] != c[i]:\n                ans.append(2 ** (n - i - 1) - 1)\n        print(len(ans))\n        print(' '.join([str(x) for x in ans]))\n    else:\n        print(1)\n        print(C)", "for _ in range(int(input())):\n    n = int(input())\n    k = 1\n    if n == 0:\n        print(2)\n        print(1, 1)\n        continue\n    while k <= n:\n        k = k << 1\n    if k >> 1 == n and n != 1:\n        print(2)\n        print(n - 1, k - 1)\n        continue\n    k -= 1\n    if k == n:\n        print(1)\n        print(n)\n    else:\n        result = [k]\n        c = 1\n        binary = bin(n)[2:]\n        flag = 0\n        k = len(binary)\n        for i in range(1, k):\n            if binary[i] == '0' and flag == 0:\n                result.append(pow(2, k - i) - 1)\n                c += 1\n                flag = 1\n            elif binary[i] == '1' and flag == 1:\n                result.append(pow(2, k - i) - 1)\n                flag = 0\n                c += 1\n        print(c)\n        result.reverse()\n        print(*result)", "t = int(input())\nfor tt in range(t):\n    num = int(input())\n    if num == 0:\n        print(2)\n        print('1 1')\n    elif num == 1:\n        print(1)\n        print(1)\n    else:\n        c = bin(num)[2:]\n        if '0' in c:\n            n = len(c)\n            ans = [2 ** n - 1]\n            for i in range(n - 1):\n                if c[i + 1] != c[i]:\n                    ans.append(2 ** (n - i - 1) - 1)\n            print(len(ans))\n            print(' '.join([str(x) for x in ans]))\n        else:\n            print(1)\n            print(num)", "def bintodec(n):\n    stack = []\n    while n != 0:\n        stack.append(str(n % 2))\n        n = n // 2\n    s = ''\n    while stack != []:\n        s += stack.pop()\n    return s\nt = int(input())\nfor t in range(t):\n    c = int(input())\n    c = bintodec(c)\n    parity = 0\n    ans = []\n    if c == '':\n        print(2)\n        print('1 1')\n        continue\n    for i in range(0, len(c)):\n        if c[i] == '1':\n            if parity == 0:\n                ans.append(len(c) - i)\n                parity = 1\n        elif c[i] == '0':\n            if parity == 1:\n                ans.append(len(c) - i)\n                parity = 0\n    ans = [str(2 ** x - 1) for x in ans]\n    print(len(ans))\n    print(' '.join(ans))", "for _ in range(int(input())):\n    c = int(input())\n    b = bin(c)[2:]\n    l = []\n    for i in b:\n        l.append(int(i))\n    ans = []\n    f = 0\n    n1 = len(l)\n    if c == 0:\n        print(2)\n        print(1, 1)\n        continue\n    for i in range(len(l)):\n        if l[i] == 1:\n            if f == 0:\n                f = 1\n                ans.append(pow(2, n1 - i) - 1)\n        elif f == 1:\n            ans.append(pow(2, n1 - i) - 1)\n            f = 0\n    print(len(ans))\n    print(*ans)"]