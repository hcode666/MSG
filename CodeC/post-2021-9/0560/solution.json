["from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        if n == 3:\n            print(2, 3, 6)\n            continue\n        if n == 4:\n            print(4, 10, 15, 24)\n            continue\n        ans = []\n        p = 1\n        c = 0\n        for j in range(3, n + 1):\n            if c < 5:\n                ans.append(j)\n                p *= j\n                c += 1\n            else:\n                ans.append(p)\n                ans.append(j)\n                c = 1\n                p = j\n        if p != n:\n            ans.append(p)\n        ans.append(2 * n)\n        if len(ans) > n:\n            print(*ans[len(ans) - n:])\n        elif len(ans) == n:\n            print(*ans)\n        else:\n            ans.append(2)\n            print(*ans)\nmain()"]