["n = int(input())\nfor i in range(1, n + 1):\n    p = list(map(int, input().split()))\n    n = p[0]\n    k = p[1]\n    s = input()\n    c = 0\n    count1 = 0\n    f = 0\n    v = 0\n    for a in s:\n        v ^= ord(a) - 48\n        if v == 0:\n            c += 1\n    if c >= k and v != 1:\n        f = 1\n        print('YES')\n    v = 0\n    for a in s:\n        v ^= ord(a) - 48\n        if v == 1:\n            count1 += 1\n            v = 0\n    if count1 >= k and (count1 - k) % 2 == 0:\n        if f != 1:\n            f = 1\n            print('YES')\n    if f == 0:\n        print('NO')", "n = int(input())\nfor i in range(1, n + 1):\n    p = list(map(int, input().split()))\n    n = p[0]\n    k = p[1]\n    s = input()\n    c = 0\n    count1 = 0\n    f = 0\n    v = 0\n    for a in s:\n        v ^= ord(a) - 48\n        if v == 0:\n            c += 1\n    if c >= k and v != 1:\n        f = 1\n        print('YES')\n    v = 0\n    for a in s:\n        v ^= ord(a) - 48\n        if v == 1:\n            count1 += 1\n            v = 0\n    if count1 >= k and (count1 - k) % 2 == 0:\n        if f != 1:\n            f = 1\n            print('YES')\n    if f == 0:\n        print('NO')", "n = int(input())\nfor i in range(1, n + 1):\n    p = list(map(int, input().split()))\n    n = p[0]\n    k = p[1]\n    s = input()\n    c = 0\n    count1 = 0\n    f = 0\n    v = 0\n    for a in s:\n        v ^= ord(a) - 48\n        if v == 0:\n            c += 1\n    if c >= k and v != 1:\n        f = 1\n        print('YES')\n    v = 0\n    for a in s:\n        v ^= ord(a) - 48\n        if v == 1:\n            count1 += 1\n            v = 0\n    if count1 >= k and (count1 - k) % 2 == 0:\n        if f != 1:\n            f = 1\n            print('YES')\n    if f == 0:\n        print('NO')", "T = int(input())\nfor t in range(1, T + 1):\n    inp = input().split()\n    N = int(inp[0])\n    K = int(inp[1])\n    S = input()\n    Slist = []\n    Slist[:0] = S\n    Slist = list(map(int, Slist))\n    num_0 = 0\n    num_1 = 0\n    xor_0 = xor_1 = 0\n    for (i, s) in enumerate(Slist):\n        xor_0 = xor_0 ^ s\n        xor_1 = xor_1 ^ s\n        if xor_0 == 0:\n            num_0 += 1\n        if xor_1 == 1:\n            num_1 += 1\n            xor_1 = 0\n    if K > num_0 and K > num_1:\n        print('NO')\n    elif K <= num_0 and xor_0 == 0:\n        print('YES')\n    elif K <= num_1 and (num_1 - K) % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor t in range(1, T + 1):\n    inp = input().split()\n    N = int(inp[0])\n    K = int(inp[1])\n    S = input()\n    Slist = []\n    Slist[:0] = S\n    Slist = list(map(int, Slist))\n    num_0 = 0\n    num_1 = 0\n    xor_0 = xor_1 = 0\n    for (i, s) in enumerate(Slist):\n        xor_0 = xor_0 ^ s\n        xor_1 = xor_1 ^ s\n        if xor_0 == 0:\n            num_0 += 1\n        if xor_1 == 1:\n            num_1 += 1\n            xor_1 = 0\n    if K > num_0 and K > num_1:\n        print('NO')\n    elif K <= num_0 and xor_0 == 0:\n        print('YES')\n    elif K <= num_1 and (num_1 - K) % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor t in range(1, T + 1):\n    inp = input().split()\n    N = int(inp[0])\n    K = int(inp[1])\n    S = input()\n    Slist = []\n    Slist[:0] = S\n    Slist = list(map(int, Slist))\n    num_0 = 0\n    num_1 = 0\n    xor_0 = xor_1 = 0\n    for (i, s) in enumerate(Slist):\n        xor_0 = xor_0 ^ s\n        xor_1 = xor_1 ^ s\n        if xor_0 == 0:\n            num_0 += 1\n        if xor_1 == 1:\n            num_1 += 1\n            xor_1 = 0\n    if K > num_0 and K > num_1:\n        print('NO')\n    elif K <= num_0 and xor_0 == 0:\n        print('YES')\n    elif K <= num_1 and (num_1 - K) % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    l = []\n    x = 0\n    for i in range(n):\n        x ^= int(a[i])\n        l.append(x)\n    c = 0\n    ci = 0\n    ll = 0\n    for i in range(n):\n        if l[i] == 0:\n            c += 1\n        if l[i] != ll:\n            ll = l[i]\n            ci += 1\n    if l[n - 1] == 0 and k <= c:\n        print('YES')\n    elif ci % 2 == k % 2 and k <= ci:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    l = []\n    x = 0\n    for i in range(n):\n        x ^= int(a[i])\n        l.append(x)\n    c = 0\n    ci = 0\n    ll = 0\n    for i in range(n):\n        if l[i] == 0:\n            c += 1\n        if l[i] != ll:\n            ll = l[i]\n            ci += 1\n    if l[n - 1] == 0 and k <= c:\n        print('YES')\n    elif ci % 2 == k % 2 and k <= ci:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ones = 0\n    zeros = 0\n    xor = 0\n    for i in s:\n        if i == '1':\n            xor ^= 1\n        if xor == 0:\n            zeros += 1\n        if xor != ones % 2:\n            ones += 1\n    if xor == 0 and zeros >= k or (ones >= k and ones % 2 == k % 2):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    p = list(map(int, input().split()))\n    n = p[0]\n    k = p[1]\n    s = input()\n    count0 = 0\n    count1 = 0\n    f = 0\n    res = 0\n    for x in s:\n        res ^= ord(x) - 48\n        if res == 0:\n            count0 += 1\n    if count0 >= k and res != 1:\n        f = 1\n        print('YES')\n    res = 0\n    for x in s:\n        res ^= ord(x) - 48\n        if res == 1:\n            count1 += 1\n            res = 0\n    if count1 >= k and (count1 - k) % 2 == 0:\n        if f != 1:\n            f = 1\n            print('YES')\n    if f == 0:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    p = list(map(int, input().split()))\n    n = p[0]\n    k = p[1]\n    s = input()\n    count0 = 0\n    count1 = 0\n    f = 0\n    res = 0\n    for x in s:\n        res ^= ord(x) - 48\n        if res == 0:\n            count0 += 1\n    if count0 >= k and res != 1:\n        f = 1\n        print('YES')\n    res = 0\n    for x in s:\n        res ^= ord(x) - 48\n        if res == 1:\n            count1 += 1\n            res = 0\n    if count1 >= k and (count1 - k) % 2 == 0:\n        if f != 1:\n            f = 1\n            print('YES')\n    if f == 0:\n        print('NO')", "t = input()\nfor i in range(int(t)):\n    (n, k) = map(int, input().split())\n    s = input()\n    x = 0\n    j = 0\n    zeros = 0\n    ones = 0\n    while j < n and zeros < k - 1:\n        x ^= int(s[j])\n        j += 1\n        if x == 0:\n            zeros += 1\n            x = 0\n    x = 0\n    z = 0\n    while z < n and ones < k - 1:\n        x ^= int(s[z])\n        z += 1\n        if x == 1:\n            ones += 1\n            x = 0\n    flag = False\n    xor = 0\n    if zeros == k - 1 and j < n:\n        for temp in s[j:]:\n            xor ^= int(temp)\n        if xor == 0:\n            flag = True\n    xor = 0\n    if ones == k - 1 and z < n:\n        for temp in s[z:]:\n            xor ^= int(temp)\n        if xor == 1:\n            flag = True\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    count = 0\n    u = 0\n    for i in range(n):\n        u = u ^ int(s[i])\n        if u == 0:\n            count += 1\n    v = 0\n    count2 = 0\n    for i in range(n):\n        if s[i] == '1' and count2 != k:\n            count2 += 1\n        elif count2 == k:\n            v ^= int(s[i])\n    if count >= k and u == 0:\n        print('YES')\n    elif v == 0 and count2 == k:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (x, c1) = (0, 0)\n    for i in s:\n        x ^= int(i)\n        if x == 0:\n            c1 += 1\n    if c1 >= k and x != 1:\n        print('YES')\n    else:\n        (y, c2) = (0, 0)\n        for i in s:\n            y ^= int(i)\n            if y == 1:\n                c2 += 1\n                y = 0\n        if c2 >= k and (c2 - k) % 2 == 0:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (zeros, ones, pref) = (0, 0, 0)\n    for c in s:\n        if c == '1':\n            pref ^= 1\n        zeros += pref == 0\n        ones += pref != ones % 2\n    print('YES' if pref == 0 and zeros >= k or (ones >= k and ones % 2 == k % 2) else 'NO')", "from sys import stdin\ninput = stdin.readline\nans = {True: 'YES', False: 'NO'}\n\ndef can_split(S, K):\n    N = len(S)\n    ones = S.count('1')\n    if ones == 0:\n        return ans[K <= N]\n    elif 1 == ones % 2:\n        return ans[1 == K % 2 and ones >= K]\n    elif 0 == K % 2 and ones >= K:\n        return 'YES'\n    else:\n        divs = sum((len(ss) for ss in S.split('1')[::2])) + ones // 2\n        return ans[divs >= K]\nT = int(input())\nfor tx in range(T):\n    (N, K) = map(int, input().split())\n    S = input().strip()\n    print(can_split(S, K))", "ans = {True: 'YES', False: 'NO'}\n\ndef can_split(S, K):\n    N = len(S)\n    ones = S.count('1')\n    if ones == 0:\n        return ans[K <= N]\n    elif 1 == ones % 2:\n        return ans[1 == K % 2 and ones >= K]\n    elif 0 == K % 2 and ones >= K:\n        return 'YES'\n    else:\n        divs = sum((len(ss) for ss in S.split('1')[::2])) + ones // 2\n        return ans[divs >= K]\nT = int(input())\nfor tx in range(T):\n    (N, K) = map(int, input().split())\n    S = input().strip()\n    print(can_split(S, K))", "from sys import stdin\ninput = stdin.readline\nans = {True: 'YES', False: 'NO'}\n\ndef can_split(S, K):\n    N = len(S)\n    ones = S.count('1')\n    if ones == 0:\n        return ans[K <= N]\n    elif 1 == ones % 2:\n        return ans[1 == K % 2 and ones >= K]\n    elif 0 == K % 2 and ones >= K:\n        return 'YES'\n    else:\n        divs = 0\n        pos = 0\n        for _ in range(ones // 2):\n            npos = S.find('1', pos) + 1\n            divs += npos - pos\n            if divs >= K:\n                return 'YES'\n            pos = S.find('1', npos) + 1\n        divs += N - pos\n        return ans[divs >= K]\nT = int(input())\nfor tx in range(T):\n    (N, K) = map(int, input().split())\n    S = input().strip()\n    print(can_split(S, K))", "from sys import stdin\ninput = stdin.readline\nans = {True: 'YES', False: 'NO'}\n\ndef can_split(S, K):\n    N = len(S)\n    ones = S.count('1')\n    if ones == 0:\n        return ans[K <= N]\n    elif 1 == ones % 2:\n        return ans[1 == K % 2 and ones >= K]\n    elif 0 == K % 2 and ones >= K:\n        return 'YES'\n    else:\n        divs = 0\n        pos = 0\n        for _ in range(ones // 2):\n            npos = S.find('1', pos) + 1\n            divs += npos - pos\n            if divs >= K:\n                return 'YES'\n            pos = S.find('1', npos) + 1\n        divs += N - pos\n        return ans[divs >= K]\nT = int(input())\nfor tx in range(T):\n    (N, K) = map(int, input().split())\n    S = input().strip()\n    print(can_split(S, K))", "ans = {True: 'YES', False: 'NO'}\n\ndef can_split(S, K):\n    N = len(S)\n    ones = S.count('1')\n    if ones == 0:\n        return ans[K <= N]\n    elif 1 == ones % 2:\n        return ans[1 == K % 2 and ones >= K]\n    elif 0 == K % 2 and ones >= K:\n        return 'YES'\n    else:\n        inpair = False\n        for c in S:\n            if c == '1':\n                if inpair:\n                    K -= 1\n                inpair = not inpair\n            elif not inpair:\n                K -= 1\n            if K == 0:\n                return 'YES'\n        return 'NO'\nT = int(input())\nfor tx in range(T):\n    (N, K) = map(int, input().split())\n    S = input().strip()\n    print(can_split(S, K))", "import sys\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom heapq import *\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef dist(x1, x2, y1, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef mergeSort(arr, check=lambda a, b: a < b, reverse=False):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L, check, reverse)\n        mergeSort(R, check, reverse)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if check(L[i], R[j]):\n                if not reverse:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n            elif not reverse:\n                arr[k] = R[j]\n                j += 1\n            else:\n                arr[k] = L[i]\n                i += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef maxSum(arr):\n    max_sum = float('-inf')\n    max_cur = 0\n    for num in ar:\n        max_cur = max(max_cur + num, num)\n        if max_cur > max_sum:\n            max_sum = max_cur\n    return max_sum\n\ndef hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, b % a)\n\ndef get_power(n, m):\n    i = 1\n    p = -1\n    while i <= n:\n        i = i * m\n        p += 1\n    return p\n\ndef fact(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n    return f\n\ndef solve(t):\n    (n, k) = readInts()\n    s = readStr()\n    o_cnt = 0\n    for c in s:\n        if c == '1':\n            o_cnt += 1\n    if o_cnt == k:\n        print('YES')\n    else:\n        cnt = 0\n        i = 0\n        b = False\n        for i in range(n - 1):\n            if cnt == k - 1:\n                break\n            if s[i] == '0':\n                if not b:\n                    cnt += 1\n            elif b:\n                cnt += 1\n                b = False\n            else:\n                b = True\n        else:\n            i += 1\n        temp = 0\n        while i < n:\n            if s[i] == '1':\n                temp += 1\n            i += 1\n        if temp % 2 == 0 and cnt == k - 1:\n            print('YES')\n        elif o_cnt >= k and (not o_cnt - k & 1):\n            print('YES')\n        else:\n            print('NO')\n\ndef main():\n    sys.setrecursionlimit(12000)\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "import sys\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom heapq import *\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef dist(x1, x2, y1, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef mergeSort(arr, check=lambda a, b: a < b, reverse=False):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L, check, reverse)\n        mergeSort(R, check, reverse)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if check(L[i], R[j]):\n                if not reverse:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n            elif not reverse:\n                arr[k] = R[j]\n                j += 1\n            else:\n                arr[k] = L[i]\n                i += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef maxSum(arr):\n    max_sum = float('-inf')\n    max_cur = 0\n    for num in ar:\n        max_cur = max(max_cur + num, num)\n        if max_cur > max_sum:\n            max_sum = max_cur\n    return max_sum\n\ndef hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, b % a)\n\ndef get_power(n, m):\n    i = 1\n    p = -1\n    while i <= n:\n        i = i * m\n        p += 1\n    return p\n\ndef fact(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n    return f\n\ndef solve(t):\n    (n, k) = readInts()\n    s = readStr()\n    o_cnt = 0\n    for c in s:\n        if c == '1':\n            o_cnt += 1\n    cnt = 0\n    i = 0\n    b = False\n    for i in range(n - 1):\n        if cnt == k - 1:\n            break\n        if s[i] == '0':\n            if not b:\n                cnt += 1\n        elif b:\n            cnt += 1\n            b = False\n        else:\n            b = True\n    else:\n        i += 1\n    temp = 0\n    while i < n:\n        if s[i] == '1':\n            temp += 1\n        i += 1\n    if temp % 2 == 0 and cnt == k - 1:\n        print('YES')\n    elif o_cnt >= k and (not o_cnt - k & 1):\n        print('YES')\n    else:\n        print('NO')\n\ndef main():\n    sys.setrecursionlimit(12000)\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "t = int(input())\nfor _ in range(0, t):\n    inputs = [int(num) for num in input().split()]\n    n = inputs[0]\n    k = inputs[1]\n    s = input()\n    ones = 0\n    zeros = 0\n    for i in range(0, len(s)):\n        if s[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n    if k % 2 == 1:\n        min1 = 1\n        max1 = 0\n        c = 0\n        onec = 0\n        if ones % 2 == 0:\n            i = 0\n            while i < len(s):\n                if s[i] == '0':\n                    if onec == 0:\n                        c += 1\n                else:\n                    onec += 1\n                    if onec == 2:\n                        c += 1\n                        onec = 0\n                i += 1\n            max1 = c\n            if k >= min1 and k <= max1:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            i = 0\n            max1 = ones\n            min1 = 1\n            if k <= max1:\n                print('YES')\n            else:\n                print('NO')\n    elif ones % 2 == 1:\n        print('NO')\n    else:\n        maxo = ones\n        min1 = 1\n        maxe = 0\n        onec = 0\n        c = 0\n        i = 0\n        while i < len(s):\n            if s[i] == '0':\n                if onec == 0:\n                    c += 1\n            else:\n                onec += 1\n                if onec == 2:\n                    c += 1\n                    onec = 0\n            i += 1\n        maxe = c\n        if k <= maxe or k <= maxo:\n            print('YES')\n        else:\n            print('NO')", "def cal_xor(c: int):\n    z = K\n    flag = xor = 0\n    for i in range(N):\n        xor ^= int(s[i])\n        if z == 1:\n            flag = 1\n            z -= 1\n        if not flag and xor == c:\n            z -= 1\n            xor = 0\n    if xor == c and z == 0:\n        return 1\n    return 0\n\ndef calculate():\n    a = cal_xor(0)\n    b = cal_xor(1)\n    return 'YES' if a or b else 'NO'\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    s = input()\n    print(calculate())", "def f():\n    (x, c) = (0, 0)\n    for i in range(n):\n        x ^= l[i] == '1'\n        if x == 1 and c < k - 1 and (i != n - 1):\n            c += 1\n            x = 0\n    if c == k - 1 and x == 1:\n        return 'YES'\n    (x, c) = (0, 0)\n    for i in range(n):\n        x ^= l[i] == '1'\n        if x == 0 and c < k - 1 and (i != n - 1):\n            c += 1\n            x = 0\n    if c == k - 1 and x == 0:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = input()\n    print(f())", "def zxor(k):\n    c = 0\n    pos = 0\n    while k > 0 and pos < n:\n        if s[pos] == '1':\n            c += 1\n        elif c == 0:\n            k -= 1\n        if c == 2:\n            k -= 1\n            c = 0\n        pos += 1\n        if k == 0:\n            break\n    c = 0\n    if k > 0:\n        return False\n    for j in range(pos, n):\n        if s[j] == '1':\n            c += 1\n    return c % 2 == 0\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c1 = s.count('1')\n    if zxor(k) or (c1 - k >= 0 and (c1 - k) % 2 == 0):\n        print('YES')\n    else:\n        print('NO')", "for T in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    ZeroCount = 0\n    ZP = False\n    OneCount = 0\n    prev = ' '\n    for ch in S:\n        if prev == ' ' and ch == '0':\n            ZeroCount += 1\n            prev = '0'\n        elif prev == ' ' and ch == '1':\n            prev = '1'\n        elif prev == '0' and ch == '0':\n            ZeroCount += 1\n        elif prev == '0' and ch == '1':\n            prev = '1'\n        elif prev == '1' and ch == '0':\n            pass\n        elif prev == '1' and ch == '1':\n            ZeroCount += 1\n            prev = '0'\n    if prev == '0':\n        ZP = True\n    for ch in S:\n        if ch == '1':\n            OneCount += 1\n    if ZP and ZeroCount >= K:\n        print('YES')\n    elif OneCount >= K and (OneCount - K) % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    one = s.count('1')\n    if one >= k:\n        count = 0\n        for i in range(n):\n            if s[i] == '1':\n                count += 1\n            if count == k:\n                break\n        if count == k and one - k & 1 == 0:\n            print('YES')\n            continue\n    count = 0\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            count += 1\n        elif s[i] == '1':\n            i += 1\n            while i < n and s[i] != '1':\n                i += 1\n            if i < n and s[i] == '1':\n                count += 1\n        i += 1\n        if count == k:\n            break\n    if count == k and one & 1 == 0:\n        print('YES')\n        continue\n    print('NO')", "import sys\nf = sys.stdin\nnext(f)\nfor (k, s) in zip(f, f):\n    k = int(k.split()[1])\n    i = j = 0\n    for x in s[:-1]:\n        if x == '1':\n            i += 1\n        if i & 1 ^ 1:\n            j += 1\n    print('YNEOS'[max((i ^ k) & 1 ^ 1 and i, i & 1 ^ 1 and j) < k::2])", "import sys\nf = sys.stdin\nnext(f)\nfor (k, s) in zip(f, f):\n    k = int(k.split()[1])\n    i = j = 0\n    for x in s[:-1]:\n        if x == '1':\n            i += 1\n        if i & 1 == 0:\n            j += 1\n    print('YNEOS'[max((i ^ k) & 1 == 0 and i, i & 1 == 0 and j) < k::2])", "import sys\nfrom itertools import islice\nf = sys.stdin\nnext(f)\nfor (k, s) in zip(f, f):\n    k = int(k.split()[1])\n    i = j = 0\n    for x in islice(s, len(s) - 1):\n        if x == '1':\n            i += 1\n        if i & 1 == 0:\n            j += 1\n    print('YNEOS'[max((i ^ k) & 1 == 0 and i, i & 1 == 0 and j) < k::2])", "import sys\nf = sys.stdin\nnext(f)\nfor (k, s) in zip(f, f):\n    k = int(k.split()[1])\n    i = j = 0\n    for x in s[:-1]:\n        if x == '1':\n            i += 1\n        if i & 1 == 0:\n            j += 1\n    print('YNEOS'[max((i ^ k) & 1 == 0 and i, i & 1 == 0 and j) < k::2])", "import sys\nf = sys.stdin\nnext(f)\nfor (k, s) in zip(f, f):\n    k = int(k.split()[1])\n    i = j = 0\n    for x in s[:-1]:\n        if x == '1':\n            i += 1\n        if i & 1 == 0:\n            j += 1\n    print('YNEOS'[max((i ^ k) & 1 ^ 1 and i, i & 1 ^ 1 and j) < k::2])", "import sys\nimport sys\nf = sys.stdin\nnext(f)\nfor (n, s) in zip(f, f):\n    (n, k) = map(int, n.split())\n    i = j = 0\n    for x in s[:-1]:\n        if x == '0':\n            if i & 1 == 0:\n                j += 1\n        else:\n            i += 1\n            if i & 1 == 0:\n                j += 1\n    print('YNEOS'[max((i ^ k) & 1 ^ 1 and i, i & 1 ^ 1 and j) < k::2])", "def count0(s, n):\n    c = 0\n    x = 0\n    for i in s:\n        if i == '0':\n            if x == 0:\n                c += 1\n        elif x == 1:\n            c += 1\n            x = 0\n        else:\n            x = 1\n    if x == 1:\n        return 0\n    return c\n\ndef count1(s):\n    c = 0\n    for i in s:\n        if i == '1':\n            c += 1\n    if c == 0:\n        return 0\n    return c\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    ones = count1(s)\n    zeros = count0(s, n)\n    if zeros >= k:\n        print('YES')\n        continue\n    d = ones - k\n    if d >= 0 and d % 2 == 0:\n        print('YES')\n        continue\n    print('NO')", "import sys\nimport sys\nf = sys.stdin\nnext(f)\nfor (n, s) in zip(f, f):\n    (n, k) = map(int, n.split())\n    i = q = 0\n    for x in s[:-1]:\n        if x == '0':\n            if i & 1 == 0:\n                q += 1\n        else:\n            i += 1\n            if i & 1 == 0:\n                q += 1\n    print('YNEOS'[max((i ^ k) & 1 ^ 1 and i, i & 1 ^ 1 and q) < k::2])", "from typing import Counter\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    even_subs = 0\n    odd_subs = 0\n    one = 0\n    ok = 0\n    c = Counter(s)\n    for i in range(n):\n        if s[i] == '1':\n            odd_subs += 1\n            if one:\n                even_subs += 1\n                one = 0\n            else:\n                one = 1\n        if s[i] == '0' and (not one):\n            even_subs += 1\n    if even_subs >= k and c['1'] & 1 == 0:\n        ok = 1\n    while odd_subs >= 0:\n        if odd_subs == k:\n            ok = 1\n            break\n        odd_subs -= 2\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    key = 0\n    ct0 = 0\n    flag = 0\n    ct1 = s.count('1')\n    solo = 0\n    if n < k:\n        print('NO')\n    elif k == 1:\n        print('YES')\n    elif k == 2:\n        if ct1 % 2 == 1:\n            print('NO')\n        else:\n            print('YES')\n    elif ct1 % 2 == 1:\n        if k % 2 == 1 and k <= ct1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        for i in s:\n            if key == 0 and i == '0':\n                ct0 += 1\n            elif key == 1 and i == '1':\n                key = 0\n                ct0 += 1\n            elif key == 0 and i == '1':\n                key = 1\n        if k <= ct0:\n            print('YES')\n        elif k <= ct1 and k % 2 == 0:\n            print('YES')\n        else:\n            print('NO')", "from itertools import *\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    z = s.count('0')\n    o = n - z\n    s1 = 'NO'\n    if k == 1 or (k == n and o in [0, n]):\n        s1 = 'YES'\n    elif k <= o and (o - k) % 2 == 0:\n        s1 = 'YES'\n    else:\n        x = 0\n        co = 0\n        for i in s:\n            x = x ^ int(i)\n            if x == 0:\n                co += 1\n        if x == 0 and co >= k:\n            s1 = 'YES'\n    print(s1)", "__author__ = 'nograhol'\n\ndef even_substr_max(S):\n    st = 0\n    ans = 0\n    for i in range(len(S)):\n        if st == 0 and S[i] == '0':\n            ans += 1\n        elif st == 0 and S[i] == '1':\n            st = 1\n        elif st == 1 and S[i] == '1':\n            st = 0\n            ans += 1\n    return ans\nT = int(input())\nfor ta in range(T):\n    (N, K) = map(int, input().split(' '))\n    S = input()\n    ones = S.count('1')\n    even = even_substr_max(S)\n    if K <= even and ones % 2 == 0:\n        print('YES')\n    elif K <= ones and K % 2 == ones % 2:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if k == 1:\n        print('YES')\n    else:\n        ones = s.count('1')\n        zeroes = len(s) - ones\n        if ones % 2 == 1:\n            if k % 2 == 1 and k <= ones:\n                print('YES')\n                continue\n        elif k % 2 == 0 and k <= ones:\n            print('YES')\n            continue\n        else:\n            count = 0\n            ans = 0\n            for i in range(len(s)):\n                if s[i] == '1':\n                    count += 1\n                if count % 2 == 0:\n                    ans += 1\n            if k <= ans:\n                print('YES')\n                continue\n        print('NO')", "from bisect import bisect_left\nfrom re import sub\nfrom typing import DefaultDict\nimport math\nfrom collections import defaultdict\nfrom math import sqrt\nimport collections\nfrom sys import maxsize\nfrom itertools import combinations_with_replacement\nimport sys\n\ndef sieve_erasthones(n):\n    cnt = 0\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    for p in range(n + 1):\n        if prime[p]:\n            cnt += 1\n    return cnt\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef count_factors(n):\n    i = 1\n    c = 0\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                c += 1\n            else:\n                c += 2\n        i += 1\n    return c\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d = DefaultDict(lambda : 0)\n    for ele in l:\n        d[ele] += 1\n    return d\n\ndef max_in_dict(d):\n    maxi = 0\n    for ele in d:\n        if d[ele] > maxi:\n            maxi = d[ele]\n    return maxi\n\ndef element_count(s):\n    l = []\n    k = s[0]\n    c = 0\n    for ele in s:\n        if ele == k:\n            c += 1\n        else:\n            l.append([k, c])\n            k = ele\n            c = 1\n    l.append([k, c])\n    return l\n\ndef modular_exponentiation(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 != 0:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef number_of_primefactor(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return len(set(l))\n\ndef twosum(a, n, x):\n    rem = []\n    for i in range(x):\n        rem.append(0)\n    for i in range(n):\n        if a[i] < x:\n            rem[a[i] % x] += 1\n    for i in range(1, x // 2):\n        if rem[i] > 0 and rem[x - i] > 0:\n            return True\n    if i >= x // 2:\n        if x % 2 == 0:\n            if rem[x // 2] > 1:\n                return True\n            else:\n                return False\n        elif rem[x // 2] > 0 and rem[x - x // 2] > 0:\n            return True\n        else:\n            return False\n\ndef divSum(num):\n    result = 0\n    i = 2\n    while i <= math.sqrt(num):\n        if num % i == 0:\n            if i == num / i:\n                result = result + i\n            else:\n                result = result + (i + num / i)\n        i = i + 1\n    return result + 1 + num\n\ndef subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0\n    i = 0\n    while j < m and i < n:\n        if str1[j] == str2[i]:\n            j = j + 1\n        i = i + 1\n    return j == m\n\ndef solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    c1 = s.count('1')\n    if c1 == 0:\n        return 'YES'\n    if c1 % 2 == 0:\n        temp = []\n        for i in range(n):\n            if s[i] == '1':\n                temp.append(i)\n        ans = len(temp) // 2\n        ans += temp[0]\n        ans += n - temp[-1] - 1\n        for i in range(2, len(temp), 2):\n            ans += temp[i] - temp[i - 1] - 1\n        if ans >= k:\n            return 'YES'\n    if c1 % 2 == k % 2 and c1 >= k:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nmod = 10 ** 4\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    ans = []\n    for p in range(2, n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\n\ndef nextPowerOf2(n):\n    count = 0\n    if n and (not n & n - 1):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\nfrom collections import defaultdict\nimport math\n\ndef primeFactors(n):\n    res = set()\n    while n % 2 == 0:\n        res.add(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            res.add(i)\n            n = n // i\n    if n > 2:\n        res.add(n)\n    return res\n\ndef upper_bound(arr, target):\n    start = 0\n    end = len(arr) - 1\n    ans = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] <= target:\n            start = mid + 1\n        else:\n            ans = mid\n            end = mid - 1\n    return ans\n\ndef get_dis(s1, s2):\n    s = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    a1 = s.index(s1)\n    a2 = s.rfind(s1)\n    b1 = s.index(s2)\n    b2 = s.rfind(s2)\n    return min(abs(a1 - b1), abs(a1 - b2), abs(a2 - b1), abs(a2 - b2))\nfrom collections import defaultdict\n\ndef func(l, m):\n    ans = 0\n    s = set()\n    for ele in l:\n        ans += ele % m\n        print(ans, ele % m, ele, m)\n        if ele % m in s:\n            return -1\n    print('tot', len(l) * (len(l) + 1) // 2, ans)\n    if ans == len(l) * (len(l) + 1) // 2:\n        return 1\n    return 0\n\ndef printDivisors(n):\n    i = 1\n    res = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                res.append(i)\n            else:\n                res.append(i)\n                res.append(n // i)\n        i = i + 1\n    return res\n\ndef func(x):\n    c = 0\n    while x != 0 and x % 2 == 0:\n        x = x // 2\n        c += 1\n    return c\nINF = 1000000000000000000000\nfrom collections import deque\n\ndef solve():\n    d = defaultdict(int)\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    c = s.count('1')\n    if c & 1:\n        if k & 1 and c >= k:\n            print('YES')\n        else:\n            print('NO')\n        return\n    else:\n        if c == k or (c >= k and c - k - 1 & 1):\n            print('YES')\n            return\n        on = 0\n        lst = []\n        for (i, ele) in enumerate(s):\n            if on == 0 and ele == '0':\n                lst.append(i)\n            elif on == 0 and ele == '1':\n                on = 1\n            elif on == 1 and ele == '1':\n                on = 0\n                lst.append(i)\n        if len(lst) >= k:\n            print('YES')\n            return\n    print('NO')\nnum_test = 1\nnum_test = int(input())\nfor _ in range(num_test):\n    solve()", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    s = input()\n    ones = s.count('1')\n    zeros = n - ones\n    (yes, no) = ('YES', 'NO')\n    if ones % 2 == 1:\n        if k % 2 == 1 and ones >= k:\n            print(yes)\n        else:\n            print(no)\n    elif k % 2 == 0 and ones % 2 == 0 and (ones >= k):\n        print(yes)\n    else:\n        (pairs, zs) = (0, 0)\n        start = False\n        for i in range(n):\n            if s[i] == '1':\n                if start:\n                    pairs += 1\n                    start = False\n                else:\n                    start = True\n            elif not start:\n                zs += 1\n        if pairs + zs >= k:\n            print(yes)\n        else:\n            print(no)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    k1 = k\n    s = input()\n    o = s.count('1')\n    o1 = o\n    p1 = 0\n    while k1 > 0 and p1 < n:\n        if s[p1] == '1':\n            k1 -= 1\n            o1 -= 1\n        p1 += 1\n    if k1 == 0 and o1 % 2 == 0:\n        print('YES')\n    else:\n        p1 = 0\n        co = 0\n        while p1 < n and k > 0:\n            if s[p1] == '0':\n                if co == 0:\n                    k -= 1\n            else:\n                co += 1\n                if co == 2:\n                    k -= 1\n                    o -= 2\n                    co = 0\n            p1 += 1\n        if k == 0 and o % 2 == 0:\n            print('YES')\n        else:\n            print('NO')", "T = int(input())\nfor _ in range(T):\n    (N, X) = map(int, input().split())\n    s = input()\n    x = 0\n    for i in s:\n        if i == '1':\n            x += 1\n    y = 0\n    a = 0\n    for i in s:\n        if a == 0:\n            if i == '0':\n                y += 1\n            else:\n                a = 1 - a\n        elif i != '0':\n            a = 1 - a\n            y += 1\n    if X % 2 == 0:\n        if x % 2 == 0:\n            if x >= X:\n                print('YES')\n                continue\n            elif y >= X:\n                print('YES')\n                continue\n    else:\n        if x % 2 == 1:\n            if x >= X:\n                print('YES')\n                continue\n        if x % 2 == 0:\n            if y >= X:\n                print('YES')\n                continue\n    print('NO')", "import sys\n\ndef f(l, n, f):\n    a = 0\n    x = n - 1\n    while a <= x:\n        m = a + (x - a) // 2\n        if l[m] == f:\n            return m\n        elif l[m] > f:\n            x = m - 1\n        else:\n            a = m + 1\n    return None\nfor _ in range(int(sys.stdin.readline())):\n    (n, x) = map(int, sys.stdin.readline().split())\n    s = input()\n    c = s.count('1')\n    j = 0\n    k = 0\n    t = 0\n    for i in range(n):\n        t = t ^ int(s[i])\n        if t == 0:\n            j = j + 1\n    t = 0\n    for i in range(n):\n        t = t ^ int(s[i])\n        if t == 1:\n            k = k + 1\n            t = 0\n    if x % 2 == 0:\n        if c % 2 == 1:\n            print('NO')\n        elif j >= x:\n            print('YES')\n        elif k >= x and (k - x) % 2 == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif c % 2 == 1:\n        if c >= x:\n            print('YES')\n        else:\n            print('NO')\n    elif j >= x:\n        print('YES')\n    elif k >= x and (k - x) % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    sum = 0\n    x = True\n    m = 0\n    for i in s:\n        if i == '1':\n            sum += 1\n            if sum % 2 == 1:\n                x = False\n            else:\n                x = True\n        if x:\n            if i == '0':\n                m += 1\n    if k == 1:\n        print('YES')\n        continue\n    if '1' not in s:\n        print('YES')\n        continue\n    if sum % 2 == 0:\n        if m + sum // 2 >= k:\n            print('YES')\n        elif k % 2 == 0:\n            if k <= sum:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')\n    elif k <= sum:\n        if k % 2 == 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "from sys import stdin\ninput = stdin.readline\n\ndef solve(N, K, S):\n    if K == 1:\n        return 'YES'\n    ones = sum((1 for s in S if s == '1'))\n    if ones % 2 == 0:\n        k = 0\n        count = 0\n        for i in range(N):\n            if S[i] == '0' and count == 0:\n                k += 1\n            elif S[i] == '0' and count == 1:\n                pass\n            elif S[i] == '1' and count == 0:\n                count = 1\n            elif S[i] == '1' and count == 1:\n                k += 1\n                count = 0\n        if k >= K:\n            return 'YES'\n    if ones >= K and (ones - K) % 2 == 0:\n        return 'YES'\n    return 'NO'\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    (N, K) = [int(x) for x in input().strip().split()]\n    S = input().strip()\n    print(solve(N, K, S))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    o = 0\n    z = 0\n    for i in range(n):\n        if s[i] == '1':\n            o += 1\n        else:\n            z += 1\n    if o % 2 == 0 and o // 2 + z >= k:\n        c = 0\n        cur = 0\n        flag = 0\n        for i in range(n):\n            if s[i] == '0' and cur == 0:\n                c += 1\n            elif s[i] == '1' and cur == 0:\n                cur = 1\n            elif s[i] == '1' and cur == 1:\n                cur = 0\n                c += 1\n        if c >= k and cur == 0:\n            print('YES')\n            continue\n    if o % 2 == 0:\n        x = o - k\n        if x >= 0 and x % 2 == 0:\n            print('YES')\n            continue\n        else:\n            print('NO')\n            continue\n    if o % 2 != 0:\n        x = o - k\n        if x >= 0 and x % 2 == 0:\n            print('YES')\n            continue\n        else:\n            print('NO')\n            continue", "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nmod = 10 ** 4\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    ans = []\n    for p in range(2, n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\n\ndef nextPowerOf2(n):\n    count = 0\n    if n and (not n & n - 1):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\nfrom collections import defaultdict\nimport math\n\ndef primeFactors(n):\n    res = set()\n    while n % 2 == 0:\n        res.add(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            res.add(i)\n            n = n // i\n    if n > 2:\n        res.add(n)\n    return res\n\ndef upper_bound(arr, target):\n    start = 0\n    end = len(arr) - 1\n    ans = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] <= target:\n            start = mid + 1\n        else:\n            ans = mid\n            end = mid - 1\n    return ans\n\ndef get_dis(s1, s2):\n    s = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    a1 = s.index(s1)\n    a2 = s.rfind(s1)\n    b1 = s.index(s2)\n    b2 = s.rfind(s2)\n    return min(abs(a1 - b1), abs(a1 - b2), abs(a2 - b1), abs(a2 - b2))\nfrom collections import defaultdict\n\ndef func(l, m):\n    ans = 0\n    s = set()\n    for ele in l:\n        ans += ele % m\n        print(ans, ele % m, ele, m)\n        if ele % m in s:\n            return -1\n    print('tot', len(l) * (len(l) + 1) // 2, ans)\n    if ans == len(l) * (len(l) + 1) // 2:\n        return 1\n    return 0\n\ndef printDivisors(n):\n    i = 1\n    res = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                res.append(i)\n            else:\n                res.append(i)\n                res.append(n // i)\n        i = i + 1\n    return res\n\ndef func(x):\n    c = 0\n    while x != 0 and x % 2 == 0:\n        x = x // 2\n        c += 1\n    return c\nINF = 1000000000000000000000\nfrom collections import deque\n\ndef solve():\n    d = defaultdict(int)\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    c = s.count('1')\n    if c & 1:\n        if k & 1 and c >= k:\n            print('YES')\n        else:\n            print('NO')\n        return\n    else:\n        if c == k or (c >= k and c - k - 1 & 1):\n            print('YES')\n            return\n        on = 0\n        lst = []\n        for (i, ele) in enumerate(s):\n            if on == 0 and ele == '0':\n                lst.append(i)\n            elif on == 0 and ele == '1':\n                on = 1\n            elif on == 1 and ele == '1':\n                on = 0\n                lst.append(i)\n        if len(lst) >= k:\n            print('YES')\n            return\n    print('NO')\nnum_test = 1\nnum_test = int(input())\nfor _ in range(num_test):\n    solve()", "import sys\nfrom collections import defaultdict, deque\nfrom bisect import bisect_left\nimport math\ninput = sys.stdin.readline\n\ndef inp():\n    l = list(map(int, input().split()))\n    return l\nfor _ in range(int(input())):\n    (n, k) = inp()\n    s = list(input().strip())\n    if k == 1:\n        print('YES')\n    else:\n        for i in range(n):\n            s[i] = int(s[i])\n        x = 0\n        xor = 0\n        f = 0\n        lu = -1\n        for i in range(n):\n            xor ^= s[i]\n            if xor == x:\n                lu = i\n                f += 1\n                xor = 0\n        else:\n            if lu != n - 1:\n                f = -float('inf')\n        g = 0\n        x = 1\n        xor = 0\n        lu = -1\n        for i in range(n):\n            xor ^= s[i]\n            if xor == x:\n                lu = i\n                g += 1\n                xor = 0\n        else:\n            if lu != n - 1:\n                for i in range(lu + 1, n):\n                    if s[i] != 0:\n                        g = -float('inf')\n                        break\n        if f >= k:\n            print('YES')\n        elif g >= k:\n            if (g - k) % 2 == 0:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    e = 0\n    ind = 0\n    c = 0\n    h = 0\n    lst1 = []\n    while True:\n        if ind > n - 1 or h == k - 1:\n            break\n        else:\n            if s[ind] == '1':\n                c += 1\n            if c % 2 == 0:\n                c = 0\n                h += 1\n            ind += 1\n    co = s[ind:].count('1')\n    if co % 2 == 0 and h == k - 1 and (s[ind:] != ''):\n        print('YES')\n    else:\n        e = 0\n        ind = 0\n        c = 0\n        h = 0\n        lst1 = []\n        while True:\n            if ind > n - 1 or h == k - 1:\n                break\n            else:\n                if s[ind] == '1':\n                    c += 1\n                if c % 2 != 0:\n                    c = 0\n                    h += 1\n                ind += 1\n        co = s[ind:].count('1')\n        if co % 2 != 0 and h == k - 1 and (s[ind:] != ''):\n            print('YES')\n        else:\n            print('NO')", "def solve(N, K, S):\n    count0 = 0\n    count1 = 0\n    if len(S) < K:\n        print('NO')\n        return\n    if K == 1:\n        print('YES')\n        return\n    found0 = 0\n    found1 = 0\n    count1 = 0\n    i = 0\n    while i < len(S):\n        if S[i] == '0':\n            found0 += 1\n            i += 1\n        else:\n            i += 1\n            count1 += 1\n            while i < len(S) and S[i] != '1':\n                i += 1\n            if i < len(S):\n                found1 += 1\n                count1 += 1\n            i += 1\n    if found0 + found1 >= K:\n        if count1 == 0:\n            print('YES')\n            return\n        elif count1 % 2 == 0:\n            print('YES')\n            return\n    found0 = 0\n    found1 = 0\n    i = 0\n    while i < len(S):\n        if S[i] == '0':\n            i += 1\n        else:\n            found1 += 1\n            i += 1\n    if found1 >= K and (found1 - K) % 2 == 0:\n        print('YES')\n        return\n    print('NO')\n    return\nT = int(input())\nres = []\nfor i in range(T):\n    s = input().split()\n    N = int(s[0])\n    K = int(s[1])\n    S = input()\n    solve(N, K, S)", "ans = ''\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    evenSub = 0\n    oddSub = 0\n    cnt1 = 0\n    cnt2 = 0\n    oneCount = 0\n    for i in range(n):\n        if s[i] == '1':\n            oneCount += 1\n            cnt1 += 1\n            cnt2 += 1\n        if cnt1 % 2 == 0:\n            evenSub += 1\n            cnt1 = 0\n        if cnt2 % 2 == 1:\n            oddSub += 1\n            cnt2 = 0\n    if oneCount % 2 == 0 and evenSub >= k:\n        ans += 'YES\\n'\n    elif oddSub >= k and oddSub % 2 == k % 2:\n        ans += 'YES\\n'\n    else:\n        ans += 'NO\\n'\nprint(ans)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        (n, k) = sep()\n        s = inp()\n        if k == 1:\n            print('YES')\n            continue\n        xo = [0, 1]\n        for xor in xo:\n            p = 0\n            res = 0\n            for j in range(n):\n                p ^= int(s[j])\n                if p == xor:\n                    res += 1\n                    p = 0\n                    if res == k - 1:\n                        break\n            if res == k - 1 and j + 1 < len(s):\n                t = int(s[j + 1])\n                for kk in range(j + 2, len(s)):\n                    t ^= int(s[kk])\n                if t == xor:\n                    print('YES')\n                    break\n        else:\n            print('NO')\nmain()", "t = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    n1 = s.count('1')\n    c1 = n1 + 0\n    g = k + 0\n    if k <= n1:\n        c1 = c1 - k + 1\n        if c1 % 2 == 1:\n            print('YES')\n            continue\n    if n1 % 2 == 1:\n        pass\n    else:\n        twis = 0\n        cont = 0\n        for i in range(n):\n            if s[i] == '1':\n                if twis == 1:\n                    cont += 1\n                    twis = 0\n                    continue\n                if twis == 0:\n                    twis = 1\n            elif twis == 0:\n                cont += 1\n        if cont >= k:\n            print('YES')\n            continue\n    print('NO')", "def ispos(s, k):\n    ss = ''\n    xor = 0\n    for i in s:\n        xor ^= int(i)\n        ss += str(xor)\n    s = ss\n    if s[-1] == '0' and s.count('0') >= k or k == 1:\n        return 'YES'\n    else:\n        if k % 2 == 0 and 1 == int(s[-1]):\n            return 'NO'\n        elif k % 2 == 1 and 0 == int(s[-1]):\n            return 'NO'\n        st = 1\n        i = k - 1\n        for j in s[:-1]:\n            if int(j) == st:\n                i -= 1\n                st ^= 1\n            if i == 0:\n                return 'YES'\n        if i == 0:\n            return 'YES'\n        return 'NO'\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    print(ispos(input(), x))", "from math import *\nfrom collections import *\nimport os\nfrom io import BytesIO, IOBase\nimport sys\nfrom bisect import *\nfrom heapq import *\nMOD = 1000000007\n\ndef subinp():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op1.txt', 'w')\n\ndef subinp_1():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op2.txt', 'w')\n\ndef binpow(a, b, m):\n    a %= m\n    x = 1\n    while b > 0:\n        if b & 1:\n            x = x * a % m\n        a = a * a % m\n        b >>= 1\n    return x\n\ndef binser(arr, l, r, x):\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return mid\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sod(n):\n    l = list(str(n))\n    s = 0\n    for i in l:\n        s += int(i)\n    return s\n\ndef prime_factors(num):\n    l = []\n    if num % 2:\n        l.append(2)\n    while num % 2 == 0:\n        num = num / 2\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if not num % i:\n            l.append(i)\n        while num % i == 0:\n            num = num / i\n    if num > 2:\n        l.append(num)\n    return l\n\ndef factmod(n, p):\n    f = defaultdict(int)\n    f[0] = 1\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] * i % MOD\n    return f\n\ndef largestPower(n, p):\n    x = 0\n    while n:\n        n //= p\n        x += n\n    return x\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    res = 1\n    isPrime = [1] * (n + 1)\n    i = 2\n    while i * i <= n:\n        if isPrime[i]:\n            for j in range(2 * i, n, i):\n                isPrime[j] = 0\n        i += 1\n    for i in range(2, n):\n        if isPrime[i]:\n            k = largestPower(n, i)\n            res = res * binpow(i, k, p) % p\n    return res\n\ndef drec(x, y):\n    if y == x + 1:\n        return 'R'\n    if y == x - 1:\n        return 'L'\n    if x < y:\n        return 'D'\n    return 'U'\n\ndef cellhash(x, y):\n    return (x - 1) * m + y\n\ndef bins(l, x, n):\n    i = bisect_left(l, x)\n    if i < n:\n        return i\n    if i:\n        return i - 1\n    else:\n        return n\n\ndef cond(l):\n    for i in range(len(l) - 1):\n        if l[i] == str(int(l[i + 1]) - 1):\n            return False\n    return True\n\ndef isvowel(s):\n    if s in list('aeiou'):\n        return 1\n    return 0\n\ndef countOdd(L, R):\n    N = (R - L) // 2\n    if R % 2 != 0 or L % 2 != 0:\n        N += 1\n    return N\n\ndef tst(A, B, C):\n    return (A | B) & (B | C) & (C | A)\n\ndef palcheck(n, s):\n    (i, j) = (0, n - 1)\n    while i <= j:\n        if s[i] == s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef sakurajima(n):\n    if n < 9:\n        n = 10\n    l = [0]\n    for i in range(1, n + 1):\n        if i % 2:\n            l.append(i)\n        else:\n            l.append(2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if l[i] == i:\n            for j in range(i * i, n + 1, i):\n                if l[j] == j:\n                    l[j] = i\n    return l\n\ndef getfact(x):\n    ret = []\n    d = defaultdict(int)\n    while x != 1:\n        ret.append(spf[x] ** (d[spf[x]] + 1))\n        d[spf[x]] += 1\n        x = x // spf[x]\n    return ret\n\ndef prchck(n):\n    l = [1] * (n + 1)\n    l[1] = 0\n    for i in range(2, n + 1):\n        for j in range(2, int(sqrt(n)) + 1):\n            if j % i == 0:\n                l[j] = 1\n    return l\n\ndef ispal(s, n):\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef bfs(src, dest, ajl, vis):\n    q = deque([src])\n    vis[src] = True\n    while q:\n        i = q.popleft()\n        if i == dest:\n            return True\n        for j in ajl[i]:\n            if not vis[j]:\n                vis[j] = True\n                q.append(j)\n    return False\n\ndef sieve(n):\n    if n < 9:\n        n = 10\n    l = [1] * (n + 1)\n    for i in range(2, int(n ** 0.5) + 1):\n        if l[i]:\n            for j in range(i ** 2, n + 1, i):\n                if j % i == 0:\n                    l[j] = 0\n    l[1] = 0\n    return l\n\nclass DisjSet:\n\n    def __init__(self, n):\n        self.size = [1] * n\n        self.parent = [i for i in range(n)]\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xset = self.find(x)\n        yset = self.find(y)\n        if xset == yset:\n            return\n        if self.size[xset] < self.size[yset]:\n            self.parent[xset] = yset\n            self.size[yset] += self.size[xset]\n        else:\n            self.parent[yset] = xset\n            self.size[xset] += self.size[yset]\n\ndef dfs(i, ajl, vis, l, x):\n    vis[i] = True\n    l[i] = x\n    for j in ajl[i]:\n        if not vis[j]:\n            dfs(j, ajl, vis, l, x)\n\ndef checkpo3(N):\n    while N > 0:\n        if N % 3 == 2:\n            return False\n        N //= 3\n    return True\n\ndef sumofdig(n):\n    ans = 0\n    s = str(n)\n    for i in s:\n        ans += int(i)\n    return ans\n\ndef convert(set):\n    return [*set]\ninp = lambda : int(input())\nstrin = lambda : input().strip()\nstrl = lambda : list(input().strip())\nstrlst = lambda : list(map(str, input().split()))\nmult = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nlstin = lambda : list(map(int, input().strip().split()))\nflush = lambda : stdout.flush()\nstdpr = lambda x: stdout.write(str(x))\n\ndef panda(n, k, l):\n    o = l.count('1')\n    if not (o - k) % 2 and o >= k:\n        return True\n    if o % 2:\n        return False\n    cnt = 0\n    stp = 0\n    for i in range(n):\n        if l[i] == '1':\n            if not stp:\n                stp += 1\n            else:\n                stp -= 1\n                cnt += 1\n        elif not stp:\n            cnt += 1\n    if cnt >= k:\n        return True\n    return False\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nt = 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = mult()\n    l = strl()\n    ans1 = panda(n, k, l)\n    if ans1:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nfrom collections import *\nimport os\nfrom io import BytesIO, IOBase\nimport sys\nfrom bisect import *\nfrom heapq import *\nMOD = 1000000007\n\ndef subinp():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op1.txt', 'w')\n\ndef subinp_1():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op2.txt', 'w')\n\ndef binpow(a, b, m):\n    a %= m\n    x = 1\n    while b > 0:\n        if b & 1:\n            x = x * a % m\n        a = a * a % m\n        b >>= 1\n    return x\n\ndef binser(arr, l, r, x):\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return mid\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sod(n):\n    l = list(str(n))\n    s = 0\n    for i in l:\n        s += int(i)\n    return s\n\ndef prime_factors(num):\n    l = []\n    if num % 2:\n        l.append(2)\n    while num % 2 == 0:\n        num = num / 2\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if not num % i:\n            l.append(i)\n        while num % i == 0:\n            num = num / i\n    if num > 2:\n        l.append(num)\n    return l\n\ndef factmod(n, p):\n    f = defaultdict(int)\n    f[0] = 1\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] * i % MOD\n    return f\n\ndef largestPower(n, p):\n    x = 0\n    while n:\n        n //= p\n        x += n\n    return x\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    res = 1\n    isPrime = [1] * (n + 1)\n    i = 2\n    while i * i <= n:\n        if isPrime[i]:\n            for j in range(2 * i, n, i):\n                isPrime[j] = 0\n        i += 1\n    for i in range(2, n):\n        if isPrime[i]:\n            k = largestPower(n, i)\n            res = res * binpow(i, k, p) % p\n    return res\n\ndef drec(x, y):\n    if y == x + 1:\n        return 'R'\n    if y == x - 1:\n        return 'L'\n    if x < y:\n        return 'D'\n    return 'U'\n\ndef cellhash(x, y):\n    return (x - 1) * m + y\n\ndef bins(l, x, n):\n    i = bisect_left(l, x)\n    if i < n:\n        return i\n    if i:\n        return i - 1\n    else:\n        return n\n\ndef cond(l):\n    for i in range(len(l) - 1):\n        if l[i] == str(int(l[i + 1]) - 1):\n            return False\n    return True\n\ndef isvowel(s):\n    if s in list('aeiou'):\n        return 1\n    return 0\n\ndef countOdd(L, R):\n    N = (R - L) // 2\n    if R % 2 != 0 or L % 2 != 0:\n        N += 1\n    return N\n\ndef tst(A, B, C):\n    return (A | B) & (B | C) & (C | A)\n\ndef palcheck(n, s):\n    (i, j) = (0, n - 1)\n    while i <= j:\n        if s[i] == s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef sakurajima(n):\n    if n < 9:\n        n = 10\n    l = [0]\n    for i in range(1, n + 1):\n        if i % 2:\n            l.append(i)\n        else:\n            l.append(2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if l[i] == i:\n            for j in range(i * i, n + 1, i):\n                if l[j] == j:\n                    l[j] = i\n    return l\n\ndef getfact(x):\n    ret = []\n    d = defaultdict(int)\n    while x != 1:\n        ret.append(spf[x] ** (d[spf[x]] + 1))\n        d[spf[x]] += 1\n        x = x // spf[x]\n    return ret\n\ndef prchck(n):\n    l = [1] * (n + 1)\n    l[1] = 0\n    for i in range(2, n + 1):\n        for j in range(2, int(sqrt(n)) + 1):\n            if j % i == 0:\n                l[j] = 1\n    return l\n\ndef ispal(s, n):\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef bfs(src, dest, ajl, vis):\n    q = deque([src])\n    vis[src] = True\n    while q:\n        i = q.popleft()\n        if i == dest:\n            return True\n        for j in ajl[i]:\n            if not vis[j]:\n                vis[j] = True\n                q.append(j)\n    return False\n\ndef sieve(n):\n    if n < 9:\n        n = 10\n    l = [1] * (n + 1)\n    for i in range(2, int(n ** 0.5) + 1):\n        if l[i]:\n            for j in range(i ** 2, n + 1, i):\n                if j % i == 0:\n                    l[j] = 0\n    l[1] = 0\n    return l\n\nclass DisjSet:\n\n    def __init__(self, n):\n        self.size = [1] * n\n        self.parent = [i for i in range(n)]\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xset = self.find(x)\n        yset = self.find(y)\n        if xset == yset:\n            return\n        if self.size[xset] < self.size[yset]:\n            self.parent[xset] = yset\n            self.size[yset] += self.size[xset]\n        else:\n            self.parent[yset] = xset\n            self.size[xset] += self.size[yset]\n\ndef dfs(i, ajl, vis, l, x):\n    vis[i] = True\n    l[i] = x\n    for j in ajl[i]:\n        if not vis[j]:\n            dfs(j, ajl, vis, l, x)\n\ndef checkpo3(N):\n    while N > 0:\n        if N % 3 == 2:\n            return False\n        N //= 3\n    return True\n\ndef sumofdig(n):\n    ans = 0\n    s = str(n)\n    for i in s:\n        ans += int(i)\n    return ans\n\ndef convert(set):\n    return [*set]\ninp = lambda : int(input())\nstrin = lambda : input().strip()\nstrl = lambda : list(input().strip())\nstrlst = lambda : list(map(str, input().split()))\nmult = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nlstin = lambda : list(map(int, input().strip().split()))\nflush = lambda : stdout.flush()\nstdpr = lambda x: stdout.write(str(x))\n\ndef panda(n, k, l):\n    o = l.count('1')\n    if not (o - k) % 2 and o >= k:\n        return True\n    if o % 2:\n        return False\n    cnt = 0\n    stp = 0\n    for i in range(n):\n        if l[i] == '1':\n            if not stp:\n                stp += 1\n            else:\n                stp -= 1\n                cnt += 1\n        elif not stp:\n            cnt += 1\n    if cnt >= k:\n        return True\n    return False\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nt = 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = mult()\n    l = strl()\n    ans1 = panda(n, k, l)\n    ans2 = panda(n, k, l[::-1])\n    if ans1 | ans2:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    s = input()\n    a = [int(b) for b in s]\n    val = 0\n    cnt = 0\n    for i in range(n):\n        val ^= a[i]\n        if val == 0:\n            cnt += 1\n            val = 0\n    if val != 1 and cnt >= k:\n        print('YES')\n        continue\n    cnt = s.count('1')\n    if cnt % 2 != k % 2:\n        print('NO')\n        continue\n    if cnt >= k:\n        print('YES')\n    else:\n        print('NO')", "import math\nfrom collections import defaultdict\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    s = input()\n    flag = False\n    one = False\n    tot = 0\n    if s.count('1') % 2 == 0:\n        for j in range(0, len(s)):\n            if one == False:\n                if s[j] == '0':\n                    tot += 1\n                else:\n                    one = True\n            elif s[j] == '0':\n                pass\n            else:\n                one = False\n                tot += 1\n    if tot >= b:\n        flag = True\n    if s.count('1') >= b:\n        if (s.count('1') - b) / 2 == (s.count('1') - b) // 2:\n            flag = True\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "import sys, os.path\nfrom tabnanny import check\nif os.path.exists('input.txt'):\n    sys.stdout = open('output.txt', 'w')\n    sys.stdin = open('input.txt', 'r')\n\ndef calcxor(s):\n    xor = 0\n    for c in s:\n        xor = xor ^ int(c)\n    print(xor)\n\ndef checkXOR(s, k, target, ct):\n    curr = int(s[0])\n    for i in range(1, len(s)):\n        if curr == target:\n            k -= 1\n            curr = None\n        if k == 0:\n            return True\n        c = int(s[i])\n        if curr is None:\n            curr = 0\n        curr = c ^ curr\n    if curr == target:\n        k -= 1\n    return k <= 0\n\ndef solve(s, n, k):\n    ct = s.count('1')\n    if ct % 2 == 0:\n        if checkXOR(s, k, 0, ct) or (k % 2 == 0 and checkXOR(s, k, 1, ct)):\n            return 'YES'\n        else:\n            return 'NO'\n    if k % 2 == 0:\n        return 'NO'\n    if checkXOR(s, k, 1, ct):\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    sys.setrecursionlimit(10 ** 8)\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = input()\n        result = solve(s, n, k)\n        print(result)\nmain()", "import sys, os.path\nfrom tabnanny import check\nif os.path.exists('input.txt'):\n    sys.stdout = open('output.txt', 'w')\n    sys.stdin = open('input.txt', 'r')\n\ndef calcxor(s):\n    xor = 0\n    for c in s:\n        xor = xor ^ int(c)\n    print(xor)\n\ndef checkXOR(s, k, target, ct):\n    curr = int(s[0])\n    for i in range(1, len(s)):\n        if curr == target:\n            k -= 1\n            curr = None\n        if k == 0:\n            return True\n        c = int(s[i])\n        if curr is None:\n            curr = 0\n        curr = c ^ curr\n    if curr == target:\n        k -= 1\n    return k <= 0\n\ndef solve(s, n, k):\n    ct = s.count('1')\n    if ct % 2 == 0:\n        if checkXOR(s, k, 0, ct) or (k % 2 == 0 and checkXOR(s, k, 1, ct)):\n            return 'YES'\n        else:\n            return 'NO'\n    if k % 2 == 0:\n        return 'NO'\n    if checkXOR(s, k, 1, ct):\n        return 'YES'\n    else:\n        return 'NO'\n\ndef main():\n    sys.setrecursionlimit(10 ** 8)\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = input()\n        result = solve(s, n, k)\n        print(result)\nmain()", "def solve():\n    n = l[0]\n    k = l[1]\n    xor = 0\n    for i in range(n):\n        if k == 1:\n            if i == n - 1:\n                if s[i] == '1':\n                    print('YES')\n                    return\n            elif x(s[i:]) == 1:\n                print('YES')\n                return\n        xor ^= int(s[i])\n        if xor == 1:\n            xor = 0\n            k -= 1\n    xor = 0\n    k = l[1]\n    for i in range(n):\n        if k == 1:\n            if i == n - 1:\n                if s[i] == '0':\n                    print('YES')\n                    return\n            elif x(s[i:]) == 0:\n                print('YES')\n                return\n        else:\n            xor ^= int(s[i])\n        if xor == 0:\n            xor = 0\n            k -= 1\n    print('NO')\n\ndef x(s):\n    r = 0\n    for i in s:\n        r ^= int(i)\n    return r\nt = int(input())\nwhile t > 0:\n    l = list(map(int, input().split()))\n    s = input()\n    solve()\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    S = input()\n    s = sum((c == '1' for c in S))\n    if not K & 1 and s & 1:\n        print('NO')\n    elif K & 1:\n        s = s & 1\n        cnt = 0\n        curr = 0\n        works = False\n        for c in S:\n            curr += c == '1'\n            if curr & 1 == s:\n                curr = 0\n                cnt += 1\n                if cnt == K:\n                    works = True\n                    break\n        if works:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        for s in [0, 1]:\n            cnt = 0\n            curr = 0\n            works = False\n            for c in S:\n                curr += c == '1'\n                if curr & 1 == s:\n                    curr = 0\n                    cnt += 1\n                    if cnt == K:\n                        works = True\n                        break\n            if works:\n                print('YES')\n                break\n        if not works:\n            print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ones = s.count('1')\n    zeroes = s.count('0')\n    t0 = 0\n    i = 0\n    summ = 0\n    flag0 = 1\n    while i < len(s):\n        if (summ + int(s[i])) % 2 == 0:\n            t0 += 1\n            summ = 0\n        else:\n            summ += int(s[i])\n        i += 1\n    if summ % 2 != 0:\n        flag0 = 0\n    i = 0\n    t1 = 0\n    summ = 0\n    flag1 = 1\n    while i < len(s):\n        if (summ + int(s[i])) % 2 == 1:\n            t1 += 1\n            summ = 0\n        else:\n            summ += int(s[i])\n        i += 1\n    if flag0 and t0 == k or (flag1 and t1 == k):\n        print('YES')\n    elif t0 < k and t1 < k:\n        print('NO')\n    elif flag0 and t0 > k or (flag1 and t1 > k and ((t1 - k) % 2 == 0)):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    cnt = [0, 0]\n    a = 0\n    b = 0\n    for i in range(n):\n        if s[i] == '1':\n            a += 1\n            b += 1\n        if a == 1:\n            cnt[0] += 1\n            a = 0\n        if s[i] == '0' and b % 2 == 0 or b == 2:\n            cnt[1] += 1\n            b = 0\n    if k <= cnt[0] and (cnt[0] - k) % 2 == 0 or (k <= cnt[1] and b == 0):\n        print('YES')\n    else:\n        print('NO')", "import math\nimport bisect\nimport heapq\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef exponentiation(bas, exp, mod=1000000007):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef process(S, N, K):\n    total = S[0]\n    count = 1 - total\n    for ele in S[1:]:\n        total ^= ele\n        if not total:\n            count += 1\n    if total == 0:\n        temp = S.count(1)\n        if count >= K:\n            return 'YES'\n        elif temp >= K:\n            if not K % 2:\n                return 'YES'\n        return 'NO'\n    else:\n        temp = S.count(1)\n        if temp >= K:\n            if K % 2:\n                return 'YES'\n        return 'NO'\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = mapin()\n        S = list(map(int, list(input())))\n        print(process(S, N, K))\nmain()", "T = int(input())\nfor _ in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    S = input()\n    s = sum((c == '1' for c in S))\n    if not K & 1 and s & 1:\n        print('NO')\n    elif K & 1:\n        s = s & 1\n        cnt = 0\n        curr = 0\n        works = False\n        for c in S:\n            curr += c == '1'\n            if curr & 1 == s:\n                curr = 0\n                cnt += 1\n                if cnt == K:\n                    works = True\n                    break\n        if works:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        for s in [0, 1]:\n            cnt = 0\n            curr = 0\n            works = False\n            for c in S:\n                curr += c == '1'\n                if curr & 1 == s:\n                    curr = 0\n                    cnt += 1\n                    if cnt == K:\n                        works = True\n                        break\n            if works:\n                print('YES')\n                break\n        if not works:\n            print('NO')", "def main():\n    (n, k) = map(int, input().split())\n    b = list(map(int, list(input())))\n    if k == 1:\n        return 'YES'\n    one = 0\n    for z in b:\n        if z:\n            one += 1\n    if one % 2 and k % 2 == 0:\n        return 'NO'\n    if one % 2 and k % 2:\n        if one >= k:\n            return 'YES'\n        return 'NO'\n    if one % 2 == 0 and k % 2 == 0:\n        if one >= k:\n            return 'YES'\n        mx = 0\n        flag = False\n        for z in b:\n            if not z:\n                if not flag:\n                    mx += 1\n            elif not flag:\n                mx += 1\n                flag = True\n            else:\n                flag = False\n        if mx >= k:\n            return 'YES'\n        return 'NO'\n    if one % 2 == 0 and k % 2:\n        mx = 0\n        flag = False\n        for z in b:\n            if not z:\n                if not flag:\n                    mx += 1\n            elif not flag:\n                mx += 1\n                flag = True\n            else:\n                flag = False\n        if mx >= k:\n            return 'YES'\n        return 'NO'\nfor _ in range(int(input())):\n    print(main())", "T = int(input())\nfor _ in range(T):\n    (N, K) = [int(x) for x in input().split()]\n    S = input()\n    s = sum((c == '1' for c in S))\n    if not K & 1 and s & 1:\n        print('NO')\n    elif K & 1:\n        s = s & 1\n        cnt = 0\n        curr = 0\n        works = False\n        for c in S:\n            curr += c == '1'\n            if curr & 1 == s:\n                curr = 0\n                cnt += 1\n                if cnt == K:\n                    works = True\n                    break\n        if works:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        for s in [0, 1]:\n            cnt = 0\n            curr = 0\n            works = False\n            for c in S:\n                curr += c == '1'\n                if curr & 1 == s & 1:\n                    curr = 0\n                    cnt += 1\n                    if cnt == K:\n                        works = True\n                        break\n            if works:\n                print('YES')\n                break\n        if not works:\n            print('NO')", "def count(s):\n    n = len(s)\n    i = 0\n    ans = 0\n    while i < n:\n        if s[i] == '0':\n            ans += 1\n            i += 1\n        else:\n            i += 1\n            while i < n and s[i] != '1':\n                i += 1\n            ans += 1\n            i += 1\n    return ans\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    c = s.count('1')\n    if c % 2 != 0:\n        if k % 2 == 0:\n            print('NO')\n        elif k <= c:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        c = s.count('1')\n        if k % 2 == 0:\n            if k <= c:\n                print('YES')\n            elif k <= count(s):\n                print('YES')\n            else:\n                print('NO')\n        elif k <= count(s):\n            print('YES')\n        else:\n            print('NO')", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    binary_str = input()\n    int_str = []\n    arr = []\n    cur = 0\n    count = {0: 0, 1: 0}\n    int_count = {0: 0, 1: 0}\n    for c in binary_str:\n        cur = int(c) ^ cur\n        arr.append(cur)\n        count[cur] += 1\n        int_count[int(c)] += 1\n    if arr[-1] == 0 and count[0] >= K:\n        print('YES')\n    elif (int_count[1] - K) % 2 == 0 and int_count[1] >= K:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input()))\n    part = 0\n    flag = 0\n    i = 0\n    while i < n:\n        if l[i] == 1:\n            part += 1\n        if part == k - 1:\n            i += 1\n            break\n        i += 1\n    c = 0\n    while i < n:\n        if l[i] == 1:\n            c += 1\n        i += 1\n    if c % 2:\n        flag = 1\n    i = 0\n    part = 0\n    f = 0\n    while i < n:\n        if l[i] == 1:\n            f += 1\n        if f % 2 == 0:\n            part += 1\n        if part == k - 1:\n            i += 1\n            break\n        i += 1\n    c = 0\n    fl = 0\n    while i < n:\n        fl = 1\n        if l[i] == 1:\n            c += 1\n        i += 1\n    if c % 2 == 0 and fl:\n        flag = 1\n    if flag or k == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if n == k:\n        if s.count('1') == n or s.count('1') == 0:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        f = True\n        if s.count('1') % 2:\n            f = False\n        else:\n            c = 0\n            t = 0\n            for ch in s:\n                if ch == '1':\n                    t += 1\n                if t % 2 == 0:\n                    c += 1\n                    t = 0\n            if c < k:\n                f = False\n        if f:\n            print('YES')\n        else:\n            f = True\n            if abs(s.count('1') - k) % 2:\n                f = False\n            else:\n                c = 0\n                t = 0\n                for ch in s:\n                    if ch == '1':\n                        t += 1\n                    if t % 2:\n                        c += 1\n                        t = 0\n                if c < k:\n                    f = False\n            if f:\n                print('YES')\n            else:\n                print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = input()\n    fl = 0\n    now = 0\n    tobe = 0\n    k = x\n    ind = -1\n    for i in range(n):\n        now ^= int(a[i])\n        if tobe == now:\n            k -= 1\n            if k == 0:\n                ind = i\n                break\n            try:\n                now = 0\n            except:\n                pass\n    if ind != -1:\n        if ind == n:\n            if k == 0:\n                fl = 1\n        else:\n            now = ind + 1\n            one = 0\n            for i in range(ind + 1, n):\n                if a[i] == '1':\n                    one += 1\n            if one % 2 == 0:\n                fl = 1\n    now = 0\n    tobe = 1\n    k = x\n    ind = -1\n    for i in range(n):\n        now ^= int(a[i])\n        if tobe == now:\n            k -= 1\n            if k == 0:\n                ind = i\n                break\n            try:\n                now = 0\n            except:\n                pass\n    if ind != -1:\n        if ind == n:\n            if k == 0:\n                fl = 1\n        else:\n            now = ind + 1\n            one = 0\n            for i in range(ind + 1, n):\n                if a[i] == '1':\n                    one += 1\n            if one % 2 == 0:\n                fl = 1\n    if fl == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    one = s.count('1')\n    if one >= k:\n        count = 0\n        for i in range(n):\n            if s[i] == '1':\n                count += 1\n            if count == k:\n                break\n        if count == k and one - k & 1 == 0:\n            print('YES')\n            continue\n    count = 0\n    i = 0\n    while i < n:\n        if s[i] == '0':\n            count += 1\n        elif s[i] == '1':\n            i += 1\n            while i < n and s[i] != '1':\n                i += 1\n            if i < n and s[i] == '1':\n                count += 1\n        i += 1\n        if count == k:\n            break\n    if count == k and one & 1 == 0:\n        print('YES')\n        continue\n    print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    zc = s.count('0')\n    oc = s.count('1')\n    ttl_xor = 0\n    for i in s:\n        ttl_xor ^= int(i)\n    xor = 0\n    count = 0\n    for i in s:\n        u = int(i)\n        xor ^= u\n        if xor == 0:\n            count += 1\n        if count == k:\n            break\n    if count < k:\n        ans1 = False\n    elif xor == ttl_xor:\n        ans1 = True\n    else:\n        ans1 = False\n    xorb = 0\n    xor = 0\n    count = 0\n    for i in s:\n        u = int(i)\n        xor ^= u\n        xorb ^= u\n        if xor == 1:\n            count += 1\n            xor = 0\n        if count == k:\n            break\n    if count < k:\n        ans2 = False\n    elif xorb == ttl_xor:\n        ans2 = True\n    else:\n        ans2 = False\n    if ans1 or ans2:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    xor = [0 for i in range(n)]\n    xor[0] = int(s[0])\n    cnt = 0\n    if s[0] == '0':\n        cnt += 1\n    for i in range(1, n):\n        xor[i] = xor[i - 1] ^ int(s[i])\n        if xor[i] == 0:\n            cnt += 1\n    if xor[-1] == 0:\n        if cnt >= k:\n            print('YES')\n        else:\n            cnt = 0\n            b = 0\n            for i in range(n - 1, -1, -1):\n                if b == 0:\n                    if xor[i] == 0:\n                        cnt += 1\n                        b = 1\n                elif xor[i] == 1:\n                    cnt += 1\n                    b = 0\n            if k % 2 == 0 and cnt >= k:\n                print('YES')\n            else:\n                print('NO')\n    else:\n        cnt = 0\n        b = 1\n        for i in range(n - 1, -1, -1):\n            if b == 0:\n                if xor[i] == 0:\n                    cnt += 1\n                    b = 1\n            elif xor[i] == 1:\n                cnt += 1\n                b = 0\n        if k % 2 != 0 and cnt >= k:\n            print('YES')\n        else:\n            print('NO')"]