["t = int(input())\nfor l in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    nums = []\n    for i in range(n):\n        nums.append([arr[i], ar[i]])\n    nums.sort(key=lambda x: x[0])\n    maxil = [None for _ in range(n)]\n    maxi = 0\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        if maxi < nums[i][1]:\n            maxi = nums[i][1]\n            cnt += 1\n    print(cnt)", "t = int(input())\nfor l in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    nums = []\n    for i in range(n):\n        nums.append([arr[i], ar[i]])\n    nums.sort(key=lambda x: x[0])\n    maxil = [None for _ in range(n)]\n    maxi = 0\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        if maxi < nums[i][1]:\n            maxi = nums[i][1]\n            cnt += 1\n    print(cnt)", "def solve(n, arr, brr):\n    t = []\n    for i in range(n):\n        t.append((arr[i], brr[i]))\n    t.sort(key=lambda x: x[0], reverse=True)\n    count = 0\n    maxn = 0\n    for i in range(0, n):\n        a = t[i][0]\n        b = t[i][1]\n        if b > maxn:\n            maxn = b\n            count += 1\n    print(count)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    solve(n, arr, brr)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ab = sorted([(a[i], b[i]) for i in range(n)])\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if ab[i][1] > mx:\n            ans += 1\n        mx = max(mx, ab[i][1])\n    print(ans)", "import numpy as np\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = np.argsort(a)\n    bar = b[c[n - 1]]\n    co = 1\n    for i in range(n - 2, -1, -1):\n        jump = b[c[i]]\n        if jump > bar:\n            co += 1\n            bar = jump\n    print(co)", "import numpy as np\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = np.argsort(a)\n    bar = b[c[n - 1]]\n    count = 1\n    for i in range(n - 2, -1, -1):\n        jump = b[c[i]]\n        if jump > bar:\n            count += 1\n            bar = jump\n    print(count)", "import numpy as np\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = np.argsort(a)\n    bar = b[c[n - 1]]\n    count = 1\n    for i in range(n - 2, -1, -1):\n        jump = b[c[i]]\n        if jump > bar:\n            count += 1\n            bar = jump\n    print(count)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    Z = list(zip(A, B))\n    Z.sort(key=lambda x: x[0])\n    ans = 0\n    max_ = -1\n    for (X, Y) in reversed(Z):\n        if Y > max_:\n            ans += 1\n            max_ = Y\n    print(ans)", "from bisect import bisect_left\nfrom code import interact\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nfrom pydoc import plain\nfrom re import X\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    n = ii()\n    a = il()\n    b = il()\n    arr = [[a[i], b[i]] for i in range(n)]\n    arr.sort()\n    (res, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if arr[i][1] >= mx:\n            res += 1\n        mx = max(mx, arr[i][1])\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ab = sorted([(a[i], b[i]) for i in range(n)])\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if ab[i][1] > mx:\n            ans += 1\n        mx = max(mx, ab[i][1])\n    print(ans)", "for T in range(int(input())):\n    lent = int(input())\n    land = list(map(lambda x: int(x), input().split()))\n    water = list(map(lambda x: int(x), input().split()))\n    count = 0\n    l = []\n    for i in range(lent):\n        l.append([land[i], water[i]])\n    l.sort(reverse=True)\n    m = 0\n    for i in range(len(l)):\n        if l[i][1] > m:\n            count += 1\n            m = l[i][1]\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ans, m) = (0, 0)\n    for i in reversed(range(n)):\n        if c[i][1] > m:\n            ans += 1\n        m = max(m, c[i][1])\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    X = list(map(int, input().split()))\n    Y = list(map(int, input().split()))\n    Z = list(zip(X, Y))\n    Z.sort(key=lambda x: x[0])\n    answer = 0\n    maximum = -1\n    for (A, B) in reversed(Z):\n        if B > maximum:\n            answer += 1\n            maximum = B\n    print(answer)", "import numpy as np\nT = int(input())\nfor tc in range(T):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    B = list(map(int, input().split(' ')))\n    A_order = np.argsort(A)\n    count = 1\n    bar = B[A_order[n - 1]]\n    for i in range(n - 2, -1, -1):\n        jump = B[A_order[i]]\n        if jump > bar:\n            count += 1\n            bar = jump\n    print(count)", "for _ in range(int(input())):\n    t = int(input())\n    count = 1\n    gPokemon = list(map(int, input().split()))\n    wPokemon = list(map(int, input().split()))\n    trainer = zip(gPokemon, wPokemon)\n    trainer = sorted(trainer)\n    count_max = trainer[-1][1]\n    for i in range(t - 2, -1, -1):\n        if count_max < trainer[i][1]:\n            count += 1\n            count_max = trainer[i][1]\n    print(count)", "for _ in range(int(input())):\n    t = int(input())\n    count = 1\n    gPokemon = list(map(int, input().split()))\n    wPokemon = list(map(int, input().split()))\n    trainer = zip(gPokemon, wPokemon)\n    trainer = sorted(trainer)\n    count_max = trainer[-1][1]\n    for i in range(t - 2, -1, -1):\n        if count_max < trainer[i][1]:\n            count += 1\n            count_max = trainer[i][1]\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    G = list(map(int, input().split()))\n    W = list(map(int, input().split()))\n    tup = []\n    res = 1\n    for i in range(n):\n        tup.append((G[i], W[i]))\n    tup.sort(key=lambda x: x[0], reverse=True)\n    for i in range(1, n):\n        j = i - 1\n        flag = 1\n        while j >= 0:\n            if tup[j][1] > tup[i][1]:\n                flag = 0\n                break\n            j -= 1\n        if flag == 1:\n            res += 1\n    print(res)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    X = list(map(int, input().split()))\n    Y = list(map(int, input().split()))\n    Z = list(zip(X, Y))\n    Z.sort(key=lambda x: x[0])\n    answer = 0\n    maximum = -1\n    for (A, B) in reversed(Z):\n        if B > maximum:\n            answer += 1\n            maximum = B\n    print(answer)", "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return sys.stdin.readline().strip()\n\ndef words():\n    return [i for i in sys.stdin.readline().strip().split()]\n\ndef chars():\n    return [i for i in sys.stdin.readline().strip()]\n\ndef solve():\n    n = inp()\n    l1 = inlsts()\n    l2 = inlsts()\n    z = sorted(zip(l1, l2))\n    ans = 1\n    tmp = z[-1][1]\n    for i in range(n - 2, -1, -1):\n        if z[i][1] > tmp:\n            ans += 1\n            tmp = z[i][1]\n    print(ans)\nfor i in range(inp()):\n    solve()", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a = [(a[i], b[i]) for i in range(n)]\n    a.sort(key=lambda x: x[0])\n    s = 1\n    cm = a[-1][1]\n    for i in range(n - 2, -1, -1):\n        if a[i][1] > cm:\n            s += 1\n            cm = a[i][1]\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = []\n    for i in range(n):\n        x.append([a[i], b[i]])\n    x.sort(key=lambda x: x[0])\n    mx = 0\n    ans = 0\n    for i in range(n - 1, -1, -1):\n        if x[i][1] > mx:\n            ans += 1\n            mx = x[i][1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    arr3 = [(arr1[i], arr2[i]) for i in range(n)]\n    arr3.sort()\n    (ans, temp) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        if arr3[i][1] > temp:\n            ans += 1\n            temp = arr3[i][1]\n    print(ans)", "from collections import OrderedDict\nfor i in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        d1[x[i]] = i\n        d2[y[i]] = i\n    d1 = OrderedDict(sorted(d1.items()))\n    d2 = OrderedDict(sorted(d2.items()))\n    d1 = list(d1.values())\n    d2 = list(d2.values())\n    (z1, z2) = (0, 0)\n    m = [0 for i in range(n)]\n    for i in range(n):\n        m[d1[i]] |= z1\n        z1 = z1 | 1 << d1[i]\n        m[d2[i]] |= z2\n        z2 = z2 | 1 << d2[i]\n    ans = 0\n    mask = (1 << n) - 1\n    for i in m:\n        z = mask ^ i\n        if not z & z - 1:\n            ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    arr3 = [(arr1[i], arr2[i]) for i in range(n)]\n    arr3.sort()\n    (ans, temp) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        if arr3[i][1] > temp:\n            ans += 1\n            temp = arr3[i][1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)", "x = int(input())\nfor i in range(x):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    B = list(map(int, input().split(' ')))\n    b = []\n    vect = []\n    k = 1\n    for i in range(n):\n        vect.append([A[i], B[i]])\n    vect = sorted(vect)\n    for i in range(n):\n        b.append(vect[i][1])\n    c = [0] * n\n    max = b[n - 1]\n    for i in range(n - 1, -1, -1):\n        if b[i] > max:\n            c[i] = 1\n            max = b[i]\n        else:\n            pass\n    for i in range(n):\n        if c[i] == 1:\n            k = k + 1\n    print(k)", "x = int(input())\nfor i in range(x):\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    B = list(map(int, input().split(' ')))\n    b = []\n    vect = []\n    k = 1\n    for i in range(n):\n        vect.append([A[i], B[i]])\n    vect = sorted(vect)\n    for i in range(n):\n        b.append(vect[i][1])\n    c = [0] * n\n    max = b[n - 1]\n    for i in range(n - 1, -1, -1):\n        if b[i] > max:\n            c[i] = 1\n            max = b[i]\n        else:\n            pass\n    for i in range(n):\n        if c[i] == 1:\n            k = k + 1\n    print(k)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    nl = []\n    for i in range(n):\n        nl.append((l1[i], l2[i]))\n    nl.sort()\n    mx = 0\n    cn = 0\n    for i in range(n - 1, -1, -1):\n        if nl[i][1] > mx:\n            cn += 1\n        mx = max(mx, nl[i][1])\n    print(cn)", "for _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[A[i]] = B[i]\n    mx = 0\n    count = 0\n    for i in reversed(sorted(d.keys())):\n        if mx < d[i]:\n            count += 1\n            mx = d[i]\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [(a[i], b[i]) for i in range(n)]\n    l = sorted(l, key=lambda l: l[0])\n    m1 = l[-1][1]\n    answer = 1\n    for i in range(n - 2, -1, -1):\n        if l[i][1] > m1:\n            answer += 1\n            m1 = max(m1, l[i][1])\n    print(answer)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [(a[i], b[i]) for i in range(n)]\n    l = sorted(l, key=lambda l: l[0])\n    m1 = l[-1][1]\n    answer = 1\n    for i in range(n - 2, -1, -1):\n        if l[i][1] > m1:\n            answer += 1\n            m1 = max(m1, l[i][1])\n    print(answer)", "T = int(input())\nfor m in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    d = {}\n    for i in range(N):\n        d[A[i]] = B[i]\n    d = sorted(d.items(), reverse=True)\n    count = 1\n    mx = d[0][1]\n    for i in d:\n        if i[1] > mx:\n            count += 1\n            mx = i[1]\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    ans = 1\n    for i in range(n):\n        l.append([a[i], b[i]])\n    l.sort(key=lambda x: x[0])\n    mx = l[-1][1]\n    for i in range(n - 1, -1, -1):\n        if l[i][1] > mx:\n            ans += 1\n            mx = l[i][1]\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    land = list(map(int, input().split()))\n    water = list(map(int, input().split()))\n    zipArr = sorted(zip(land, water))\n    tempTuple = zip(*zipArr)\n    (newLand, newWater) = [list(element) for element in tempTuple]\n    newLand = newLand[::-1]\n    newWater = newWater[::-1]\n    ans = 1\n    maxWater = newWater[0]\n    for i in range(1, N):\n        if newWater[i - 1] > maxWater:\n            maxWater = newWater[i - 1]\n        if newWater[i] > maxWater:\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    b = list(map(int, input().split()))[:n]\n    c = []\n    for i in range(len(a)):\n        d = 0\n        for j in range(n):\n            if a[i] > a[j] or b[i] > b[j]:\n                d = d + 1\n            elif a[i] < a[j] and b[i] < b[j]:\n                break\n        c.append(d)\n    z = c.count(max(c))\n    t = t - 1\n    print(z)", "from bisect import *\nfor _ in range(int(input())):\n    n = int(input())\n    ground = list(map(int, input().split()))\n    water = list(map(int, input().split()))\n    temp = []\n    len1 = len(ground)\n    for i in range(len1):\n        temp.append([ground[i], water[i]])\n    temp.sort(key=lambda x: x[0], reverse=True)\n    ans = []\n    n = len(temp)\n    ss = []\n    for i in range(n):\n        strength1 = n - (i + 1)\n        ind = bisect(ss, temp[i][1])\n        strength2 = ind - 0\n        insort(ss, temp[i][1])\n        ans.append(strength1 + strength2)\n    maxm = max(ans)\n    print(ans.count(maxm))", "import math\nfor tc in range(int(input())):\n    n = int(input())\n    ground = list(map(int, input().split()))\n    water = list(map(int, input().split()))\n    s = sorted(zip(ground, water))\n    cnt = 1\n    curr_max = s[-1][1]\n    for i in range(n - 2, -1, -1):\n        if curr_max < s[i][1]:\n            cnt += 1\n            curr_max = s[i][1]\n    print(cnt)", "for testcases in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([l1[i], l2[i]])\n    l.sort(reverse=True)\n    m = 0\n    c = 0\n    for i in range(n):\n        if l[i][1] > m:\n            c += 1\n            m = l[i][1]\n    print(c)", "t = int(input())\nfor _ in range(t):\n    length = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    a = [(a[i], b[i]) for i in range(length)]\n    a.sort(key=lambda x: x[0])\n    ans = 1\n    curr_max = a[-1][1]\n    for i in range(length - 2, -1, -1):\n        if a[i][1] > curr_max:\n            ans += 1\n            curr_max = a[i][1]\n    print(ans)", "for i in range(int(input())):\n    n = 0\n    n = int(input())\n    everyones_win = []\n    max1 = 1\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    for i in range(n):\n        win_proper = 0\n        for j in range(n):\n            if a[i] < a[j] and b[i] < b[j]:\n                break\n            elif a[i] > a[j] or b[i] > b[j]:\n                win_proper += 1\n        everyones_win.append(win_proper)\n    print(everyones_win.count(max(everyones_win)))", "def sort_by_wtr_pwr(arr):\n    return arr[1]\n\ndef find_qualifiers(no_of_pokemons, gnd_pwr, wtr_pwr):\n    pokemon_pwr = [(gnd_pwr[i], wtr_pwr[i]) for i in range(no_of_pokemons)]\n    pokemon_pwr.sort(key=sort_by_wtr_pwr, reverse=False)\n    no_of_qualifiers = 1\n    max_gnd_pwr_a_pokemon_has_had = pokemon_pwr[no_of_pokemons - 1][0]\n    for i in range(no_of_pokemons - 1, -1, -1):\n        if pokemon_pwr[i][0] > max_gnd_pwr_a_pokemon_has_had:\n            no_of_qualifiers += 1\n            max_gnd_pwr_a_pokemon_has_had = pokemon_pwr[i][0]\n    return no_of_qualifiers\nfor _ in range(int(input())):\n    no_of_pokemons = int(input())\n    gnd_pwr = list(map(int, input().split()))\n    wtr_pwr = list(map(int, input().split()))\n    print(find_qualifiers(no_of_pokemons, gnd_pwr, wtr_pwr))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = [(A[i], B[i]) for i in range(N)]\n    C.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(N)):\n        if C[i][1] > mx:\n            ans += 1\n        mx = max(mx, C[i][1])\n    print(ans)", "from sys import stdin\n\ndef pokeman(n, arr1, arr2):\n    arr = [(arr1[i], arr2[i]) for i in range(n)]\n    arr.sort(key=lambda x: x[0])\n    maxo = -1\n    count = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i][1] > maxo:\n            count += 1\n            maxo = arr[i][1]\n    return count\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    arr1 = [int(x) for x in stdin.readline().strip().split()]\n    arr2 = [int(x) for x in stdin.readline().strip().split()]\n    print(pokeman(n, arr1, arr2))", "for i in range(int(input())):\n    n_trainer = int(input())\n    pokemon_trainer_powers = [(i, j) for (i, j) in zip(map(int, input().split()), map(int, input().split()))]\n    pokemon_trainer_powers = sorted(pokemon_trainer_powers, key=lambda x: x[0])\n    pokemon_trainer_qualifiers = 0\n    mx_b = 0\n    for ptp in pokemon_trainer_powers[::-1]:\n        if ptp[1] > mx_b:\n            pokemon_trainer_qualifiers += 1\n            mx_b = ptp[1]\n    print(pokemon_trainer_qualifiers)", "t = int(input())\nfor _ in range(t):\n    length = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    a = [(a[i], b[i]) for i in range(length)]\n    a.sort(key=lambda x: x[0])\n    ans = 1\n    curr_max = a[-1][1]\n    for i in range(length - 2, -1, -1):\n        if a[i][1] > curr_max:\n            ans += 1\n            curr_max = a[i][1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    length = int(input())\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    a = [(a[i], b[i]) for i in range(length)]\n    a.sort(key=lambda x: x[0])\n    ans = 1\n    curr_max = a[-1][1]\n    for i in range(length - 2, -1, -1):\n        if a[i][1] > curr_max:\n            ans += 1\n            curr_max = a[i][1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)", "import math\nfor i in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    B = list(map(int, input().split(' ')))\n    C = [(A[i], B[i]) for i in range(N)]\n    C.sort()\n    ans = 0\n    highest = 0\n    for i in range(N - 1, -1, -1):\n        if C[i][1] > highest:\n            ans += 1\n            highest = C[i][1]\n    print(ans)", "def pokemon(n, a, b):\n    count = 0\n    for i in range(len(a)):\n        flag = True\n        for j in range(len(a)):\n            if i == j:\n                pass\n            elif a[i] < a[j] and b[i] < b[j]:\n                flag = False\n                break\n        if flag:\n            count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(pokemon(n, a, b))", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a = [(a[i], b[i]) for i in range(n)]\n    a.sort(key=lambda x: x[0])\n    ans = 1\n    curr_max = a[-1][1]\n    for i in range(n - 2, -1, -1):\n        if a[i][1] > curr_max:\n            ans += 1\n            curr_max = a[i][1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a = [(a[i], b[i]) for i in range(n)]\n    a.sort(key=lambda x: x[0])\n    ans = 1\n    curr_max = a[-1][1]\n    for i in range(n - 2, -1, -1):\n        if a[i][1] > curr_max:\n            ans += 1\n            curr_max = a[i][1]\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = sorted(zip(a, b))\n    ans = 1\n    m = l[-1][1]\n    for i in range(n - 2, -1, -1):\n        if l[i][1] > m:\n            ans += 1\n            m = l[i][1]\n    print(ans)", "import math as m\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return abs(a)\n\ndef ncr(N, R):\n    return m.factorial(N) // (m.factorial(R) * m.factorial(N - R))\n\ndef getL():\n    return [int(i) for i in input().split(' ')]\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    n = getInt()\n    a = getL()\n    b = getL()\n    anb = [[i, j] for (i, j) in zip(a, b)]\n    anb.sort(key=lambda a: a[0])\n    ans = 0\n    mx = -1\n    for i in range(n - 1, -1, -1):\n        if anb[i][1] > mx:\n            mx = anb[i][1]\n            ans += 1\n    print(ans)\nfor _ in range(getInt()):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = sorted(zip(a, b))\n    ans = 1\n    m = l[-1][1]\n    for i in range(n - 2, -1, -1):\n        if l[i][1] > m:\n            ans += 1\n            m = l[i][1]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    gp = list(map(int, input().split(' ')))\n    wp = list(map(int, input().split(' ')))\n    lst = [i for i in range(n)]\n    p = list(zip(gp, lst))\n    p.sort(key=lambda x: x[0])\n    q = [g[1] for g in p]\n    x = n - 2\n    cnt = 1\n    maxi = wp[q[n - 1]]\n    while x >= 0:\n        j = x + 1\n        if wp[q[x]] > max(maxi, wp[q[j]]):\n            cnt += 1\n            maxi = wp[q[x]]\n        else:\n            cnt += 0\n        x = x - 1\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = sorted(zip(a, b))\n    ans = 1\n    m = l[-1][1]\n    for i in range(n - 2, -1, -1):\n        if l[i][1] > m:\n            ans += 1\n            m = l[i][1]\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = [(A[i], B[i]) for i in range(0, N)]\n    (ans, mxn) = (0, 0)\n    C.sort()\n    for i in reversed(range(0, N)):\n        if C[i][1] > mxn:\n            ans += 1\n        mxn = max(mxn, C[i][1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([l1[i], l2[i]])\n    l.sort(reverse=True)\n    (c, m) = (0, 0)\n    for i in l:\n        m = max(m, i[1])\n        if m == i[1]:\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)", "from bisect import bisect_left\nfrom code import interact\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nfrom pydoc import plain\nfrom re import X\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    n = ii()\n    a = il()\n    b = il()\n    arr = [[a[i], b[i]] for i in range(n)]\n    arr.sort()\n    (result, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if arr[i][1] >= mx:\n            result += 1\n        mx = max(mx, arr[i][1])\n    print(result)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (m, ans) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        if c[i][1] > m:\n            m = c[i][1]\n            ans += 1\n    print(ans)", "t = int(input())\ncount = 0\nfor i in range(t):\n    N = int(input())\n    a = list(map(int, input().strip().split()))[:N]\n    b = list(map(int, input().strip().split()))[:N]\n    c = [(a[i], b[i]) for i in range(N)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in range(N - 1, -1, -1):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = sorted([(a[i], b[i]) for i in range(n)], reverse=True)\n    _max = c[0][1]\n    counter = 1\n    for _c in c:\n        if _c[1] > _max:\n            _max = _c[1]\n            counter += 1\n    print(counter)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [[a[i], b[i]] for i in range(n)]\n    c.sort(key=lambda x: x[0])\n    a = [c[i][0] for i in range(n)]\n    b = [c[i][1] for i in range(n)]\n    total = 0\n    max_ = 0\n    for i in range(n - 1, -1, -1):\n        if b[i] > max_:\n            total += 1\n        max_ = max(max_, b[i])\n    print(total)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for i in range(n):\n        c.append((a[i], b[i]))\n    c.sort()\n    s = 1\n    m = c[n - 1][1]\n    for i in reversed(range(n)):\n        if c[i][1] > m:\n            s += 1\n            m = c[i][1]\n    print(s)", "for t in range(int(input())):\n    l = int(input())\n    l1 = [int(i) for i in input().split()]\n    l2 = [int(j) for j in input().split()]\n    z = [x for (_, x) in sorted(zip(l1, l2))]\n    z.reverse()\n    m = z[0]\n    c = 1\n    for i in range(1, l):\n        if m < z[i]:\n            c += 1\n            m = z[i]\n    print(c)", "import math as m\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return abs(a)\n\ndef ncr(N, R):\n    return m.factorial(N) // (m.factorial(R) * m.factorial(N - R))\n\ndef getL():\n    return [int(i) for i in input().split(' ')]\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    n = getInt()\n    a = getL()\n    b = getL()\n    anb = [[i, j] for (i, j) in zip(a, b)]\n    anb.sort(key=lambda a: a[0])\n    ans = 0\n    mx = -1\n    for i in range(n - 1, -1, -1):\n        if anb[i][1] > mx:\n            mx = anb[i][1]\n            ans += 1\n    print(ans)\nfor _ in range(getInt()):\n    solve()", "from heapq import heappop, heappush, heapify\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    z = []\n    for j in range(len(x)):\n        z.append([x[j], y[j]])\n    z.sort(reverse=True)\n    a = z[0][1]\n    ans = 1\n    for j in range(1, len(z)):\n        if z[j][1] > a:\n            ans += 1\n            a = z[j][1]\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = list(map(int, input().split()))\n    w = list(map(int, input().split()))\n    wd = defaultdict(int)\n    for i in range(n):\n        wd[g[i]] = w[i]\n    g.sort(reverse=True)\n    ans = 1\n    a = wd[g[0]]\n    for i in range(1, n):\n        if wd[g[i]] > a:\n            ans += 1\n            a = wd[g[i]]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ret, maxi) = (0, 0)\n    for i in reversed(range(n)):\n        if c[i][1] > maxi:\n            ret += 1\n        maxi = max(maxi, c[i][1])\n    print(ret)", "for t in range(int(input())):\n    n = int(input())\n    l1 = [int(i) for i in input().split()]\n    l2 = [int(j) for j in input().split()]\n    l = [[l1[i], l2[i]] for i in range(n)]\n    l.sort()\n    z = [x[1] for x in l]\n    z.reverse()\n    m = z[0]\n    c = 1\n    for i in range(1, n):\n        if m < z[i]:\n            c += 1\n            m = z[i]\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    p = [(a[i], b[i]) for i in range(n)]\n    p = sorted(p, key=lambda x: x[0])\n    mx = p[n - 1][1]\n    ans = 1\n    for i in reversed(range(n)):\n        if p[i][1] > mx:\n            ans += 1\n        mx = max(p[i][1], mx)\n    print(ans)", "n = int(input())\nfor i in range(n):\n    p = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = []\n    for i in range(len(a)):\n        d.append([a[i], b[i]])\n    d.sort(key=lambda x: x[0], reverse=True)\n    c = 1\n    ma = d[0][1]\n    for i in range(len(d)):\n        if d[i][1] > ma:\n            c += 1\n            ma = d[i][1]\n    print(c)", "cases = int(input())\nwhile cases:\n    cases -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ab = []\n    for i in range(n):\n        ab.append([a[i], b[i]])\n    ab.sort(key=lambda x: x[0], reverse=True)\n    ans = 1\n    leftMax = ab[0][1]\n    for i in range(1, n):\n        if ab[i][1] > leftMax:\n            ans += 1\n            leftMax = ab[i][1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)", "def strength(n, A, B):\n    c = [(A[i], B[i]) for i in range(n)]\n    c.sort()\n    mx = 0\n    count = 0\n    for i in reversed(range(n)):\n        if c[i][1] > mx:\n            count += 1\n        mx = max(mx, c[i][1])\n    print(count)\nfor i in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    strength(n, A, B)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(([A[i], B[i]] for i in range(N)))\n    C.sort()\n    ans = 0\n    mx = 0\n    for i in range(N - 1, -1, -1):\n        if C[i][1] > mx:\n            ans += 1\n            mx = max(mx, C[i][1])\n    print(ans)", "from heapq import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    (h1, h2) = ([], [])\n    res = 0\n    for i in range(n):\n        heappush(h2, [-a[i], -b[i]])\n    heappush(h1, 0)\n    for i in range(n):\n        if h2[0][1] < h1[0]:\n            res += 1\n        p = h2[0][1]\n        heappop(h2)\n        heappush(h1, p)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(zip(map(int, input().split()), map(int, input().split())), reverse=True)\n    ans = 1\n    mx = a[0][1]\n    for (i, j) in a:\n        if j > mx:\n            ans += 1\n            mx = j\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a = [(a[i], b[i]) for i in range(n)]\n    a.sort(key=lambda x: x[0])\n    ans = 1\n    curr_max = a[-1][1]\n    for i in range(n - 2, -1, -1):\n        if a[i][1] > curr_max:\n            ans += 1\n            curr_max = a[i][1]\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    ground = list(map(int, input().split(' ')))\n    water = list(map(int, input().split(' ')))\n    power = [(ground[i], water[i]) for i in range(n)]\n    power.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if power[i][1] > mx:\n            ans += 1\n        mx = max(mx, power[i][1])\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    b = [int(x) for x in input().split()]\n    a = tuple(zip(a, b))\n    a = sorted(a)\n    mx = a[-1][1]\n    cnt = 1\n    for i in range(n - 2, -1, -1):\n        if a[i][1] > mx:\n            cnt += 1\n            mx = max(mx, a[i][1])\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(j) for j in input().split()]\n    b = [int(x) for x in input().split()]\n    c = tuple(zip(a, b))\n    c = sorted(c)\n    mx = c[-1][1]\n    cnt = 1\n    for i in range(n - 2, -1, -1):\n        if c[i][1] > mx:\n            cnt += 1\n            mx = max(mx, c[i][1])\n    print(cnt)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    ground = list(map(int, input().split(' ')))\n    water = list(map(int, input().split(' ')))\n    power = [(ground[i], water[i]) for i in range(n)]\n    power.sort()\n    (ans, mx) = (0, 0)\n    for i in reversed(range(n)):\n        if power[i][1] > mx:\n            ans += 1\n        mx = max(mx, power[i][1])\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([a[i], b[i]])\n    l.sort(key=lambda x: x[0])\n    m_b = l[-1][1]\n    count = 1\n    for i in range(n - 2, -1, -1):\n        if l[i][1] > m_b:\n            count += 1\n            m_b = max(m_b, l[i][1])\n    print(count)", "for _ in range(int(input())):\n    msn = int(input())\n    ground = list(map(int, input().split()))\n    water = list(map(int, input().split()))\n    msl = [(ground[i], water[i]) for i in range(msn)]\n    msl.sort()\n    c = 1\n    mx = msl[msn - 1][1]\n    for j in range(msn - 2, -1, -1):\n        a = msl[j][1]\n        if a > mx:\n            c += 1\n            mx = a\n    print(c)", "for t in range(int(input())):\n    n = int(input())\n    l1 = [int(i) for i in input().split()]\n    l2 = [int(j) for j in input().split()]\n    l = [[l1[i], l2[i]] for i in range(n)]\n    l.sort()\n    z = [x[1] for x in l]\n    z.reverse()\n    m = z[0]\n    c = 1\n    for i in range(1, n):\n        if m < z[i]:\n            c += 1\n            m = z[i]\n    print(c)", "for t in range(int(input())):\n    l = int(input())\n    l1 = [int(i) for i in input().split()]\n    l2 = [int(j) for j in input().split()]\n    z = [x for (_, x) in sorted(zip(l1, l2))]\n    z.reverse()\n    m = z[0]\n    c = 1\n    for i in range(1, l):\n        if m < z[i]:\n            c += 1\n            m = z[i]\n    print(c)", "def sol():\n    n = int(input())\n    ground = list(map(int, input().split()))\n    water = list(map(int, input().split()))\n    c = [(ground[i], water[i]) for i in range(n)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)\nt = int(input())\nwhile t:\n    sol()\n    t -= 1", "for _ in range(int(input())):\n    length = int(input())\n    arena1 = list(map(int, input().split()))\n    arena2 = list(map(int, input().split()))\n    combined = [(arena1[i], arena2[i]) for i in range(length)]\n    combined.sort()\n    ans = 1\n    curr_max_seen = combined[length - 1][1]\n    for i in range(length - 2, -1, -1):\n        if combined[i][1] > curr_max_seen:\n            curr_max_seen = combined[i][1]\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    k = []\n    for i in range(n):\n        k += [[a[i], b[i]]]\n    k.sort(reverse=True)\n    tr = 1\n    g = k[0][1]\n    for i in range(1, n):\n        if k[i][1] > g:\n            tr += 1\n            g = k[i][1]\n    print(tr)", "t = int(input())\nfor i in range(t):\n    tra = 0\n    wtr = 0\n    n = int(input())\n    array_g = list(map(int, input().split()))\n    array_w = list(map(int, input().split()))\n    f = list(zip(array_g, array_w))\n    f.sort()\n    for i in range(-1, -n - 1, -1):\n        if f[i][1] > wtr:\n            wtr = f[i][1]\n            tra += 1\n    print(tra)", "t = int(input())\nfor i in range(t):\n    tra = 0\n    wtr = 0\n    n = int(input())\n    array_g = list(map(int, input().split()))\n    array_w = list(map(int, input().split()))\n    f = list(zip(array_g, array_w))\n    f.sort()\n    for i in range(-1, -n - 1, -1):\n        if f[i][1] > wtr:\n            wtr = f[i][1]\n            tra += 1\n    print(tra)", "def pBattles(n, a, b):\n    trainers = list(zip(a, b))\n    trainers.sort()\n    maxWaterPower = 0\n    nextRoundTrainers = 0\n    for i in reversed(range(n)):\n        if trainers[i][1] > maxWaterPower:\n            maxWaterPower = trainers[i][1]\n            nextRoundTrainers += 1\n    return nextRoundTrainers\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(pBattles(n, a, b))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l1 = [int(x) for x in input().split()]\n    l2 = [int(x) for x in input().split()]\n    l = list(zip(l1, l2))\n    l.sort()\n    max = 0\n    ans = 0\n    for i in reversed(range(n)):\n        if l[i][1] > max:\n            ans += 1\n            max = l[i][1]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [(a[i], b[i]) for i in range(n)]\n    c.sort()\n    (ans, mx) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        if c[i][1] > mx:\n            ans += 1\n        mx = max(mx, c[i][1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    b = [x for (_, x) in sorted(zip(a, b))]\n    a.sort()\n    ans = 1\n    mx = b[n - 1]\n    for i in range(n - 2, -1, -1):\n        if b[i] > mx:\n            ans += 1\n            mx = b[i]\n    print(ans)"]