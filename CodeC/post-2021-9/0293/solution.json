["from collections import Counter\n\ndef solve(s1, s2, m, n):\n    s = s1 + s2\n    dic = {}\n    for i in range(m + n):\n        if s[i] not in dic.keys():\n            dic[s[i]] = 1\n        else:\n            dic[s[i]] += 1\n    c = 0\n    for v in dic.values():\n        if v & 1 == 1:\n            c += 1\n        if c >= 2:\n            return 'NO'\n    if n > m:\n        (s1, s2) = (s2, s1)\n    dic1 = Counter(s1)\n    for ele in s2:\n        if ele not in dic1.keys() or dic1[ele] == 0:\n            return 'NO'\n        dic1[ele] -= 1\n    return 'YES'\nT = int(input())\nfor i in range(T):\n    inpArr = input().split()\n    (m, n) = list(map(int, inpArr))\n    s1 = input()\n    s2 = input()\n    ans = solve(s1, s2, m, n)\n    print(ans)", "from collections import Counter\n\ndef solve(s1, s2, m, n):\n    s = s1 + s2\n    dic = {}\n    if s == '':\n        return 'NO'\n    for i in range(m + n):\n        if s[i] not in dic.keys():\n            dic[s[i]] = 1\n        else:\n            dic[s[i]] += 1\n    c = 0\n    for v in dic.values():\n        if v & 1 == 1:\n            c += 1\n        if c >= 2:\n            return 'NO'\n    if n > m:\n        (s1, s2) = (s2, s1)\n    dic1 = Counter(s1)\n    for ele in s2:\n        if ele not in dic1.keys() or dic1[ele] == 0:\n            return 'NO'\n        dic1[ele] -= 1\n    return 'YES'\nT = int(input())\nfor i in range(T):\n    inpArr = input().split()\n    (m, n) = list(map(int, inpArr))\n    s1 = input()\n    s2 = input()\n    ans = solve(s1, s2, m, n)\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    s1 = input()\n    count = Counter(s + s1)\n    count1 = Counter(s)\n    count2 = Counter(s1)\n    g = True\n    if len(s) >= len(s1):\n        for x in count2:\n            if count1[x] < count2[x]:\n                g = False\n                break\n    else:\n        for x in count1:\n            if count2[x] < count1[x]:\n                g = False\n                break\n    f = 0\n    if (m + n) % 2 == 0 and g:\n        for x in count.keys():\n            if count[x] % 2 != 0:\n                f = 1\n                break\n        if f == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif (m + n) % 2 == 1 and g:\n        for x in count.keys():\n            if count[x] % 2 != 0:\n                f = f + 1\n            if f == 2:\n                break\n        if f == 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    s1 = input()\n    count = Counter(s + s1)\n    count1 = Counter(s)\n    count2 = Counter(s1)\n    g = True\n    if len(s) >= len(s1):\n        for x in count2:\n            if count1[x] < count2[x]:\n                g = False\n                break\n    else:\n        for x in count1:\n            if count2[x] < count1[x]:\n                g = False\n                break\n    f = 0\n    if (m + n) % 2 == 0 and g:\n        for x in count.keys():\n            if count[x] % 2 != 0:\n                f = 1\n                break\n        if f == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif (m + n) % 2 == 1 and g:\n        for x in count.keys():\n            if count[x] % 2 != 0:\n                f = f + 1\n            if f == 2:\n                break\n        if f == 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "def isPalindrome(s):\n    odd = 0\n    for elem in set(s):\n        if s.count(elem) % 2 != 0:\n            odd += 1\n    return odd < 2\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = input()\n    B = input()\n    if n < m:\n        (A, B) = (B, A)\n    for elem in B:\n        if elem not in A:\n            print('NO')\n            break\n        A = A.replace(elem, '', 1)\n    else:\n        if isPalindrome(A):\n            print('YES')\n        else:\n            print('NO')", "def isPalindrome(s):\n    odd = 0\n    for ch in set(s):\n        if s.count(ch) % 2:\n            odd += 1\n    return odd < 2\nT = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    A = str(input())[:n].lower()\n    B = str(input())[:m].lower()\n    if n < m:\n        (A, B) = (B, A)\n    for ch in B:\n        if ch not in A:\n            print('NO')\n            break\n        A = A.replace(ch, '', 1)\n    else:\n        if isPalindrome(A):\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    z = 0\n    if n < m:\n        (a, b) = (b, a)\n    for j in b:\n        if j not in a:\n            print('NO')\n            break\n        a = a.replace(j, '', 1)\n    else:\n        for j in set(a):\n            if a.count(j) % 2:\n                z = z + 1\n        if z < 2:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    s1 = list(input())\n    s2 = list(input())\n    cs = []\n    condition = 'YES'\n    if m > n:\n        (m, n) = (n, m)\n        (s1, s2) = (s2, s1)\n    j = 0\n    while j < len(s2):\n        if s2[j] in s1:\n            cs.append(s2[j])\n            s1.remove(s2[j])\n            s2.pop(j)\n        else:\n            condition = 'NO'\n            break\n    oc = 0\n    tot = 0\n    l = len(s1)\n    for j in 'abcdefghijklmnopqrstuvwxyz':\n        c = s1.count(j)\n        tot += c\n        if c % 2:\n            oc += 1\n        if l % 2 and oc > 1:\n            condition = 'NO'\n        elif l % 2 == 0 and oc > 0:\n            condition = 'NO'\n        if tot == l:\n            break\n    print(condition)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    s1 = list(input())\n    s2 = list(input())\n    cs = []\n    condition = 'YES'\n    if m > n:\n        (m, n) = (n, m)\n        (s1, s2) = (s2, s1)\n    j = 0\n    while j < len(s2):\n        if s2[j] in s1:\n            cs.append(s2[j])\n            s1.remove(s2[j])\n            s2.pop(j)\n        else:\n            condition = 'NO'\n            break\n    oc = 0\n    tot = 0\n    l = len(s1)\n    for j in 'abcdefghijklmnopqrstuvwxyz':\n        c = s1.count(j)\n        tot += c\n        if c % 2:\n            oc += 1\n        if l % 2 and oc > 1:\n            condition = 'NO'\n        elif l % 2 == 0 and oc > 0:\n            condition = 'NO'\n        if tot == l:\n            break\n    print(condition)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(input())\n    b = list(input())\n    c = 0\n    (d, e) = (0, 0)\n    if n > m:\n        (n, m) = (m, n)\n        (a, b) = (b, a)\n    for i in a:\n        if i in b:\n            b.remove(i)\n        else:\n            print('NO')\n            c = 1\n            break\n    if c == 0:\n        s = set(b)\n        for i in s:\n            if b.count(i) % 2 != 0:\n                d += 1\n                if d > 1:\n                    print('NO')\n                    c = 1\n                    break\n        if c == 0:\n            print('YES')", "testcases = int(input())\nfor _ in range(testcases):\n    (length1, length2) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    if length2 > length1:\n        (s1, s2) = (s2, s1)\n    if True:\n        s1 = list(s1)\n        s2 = list(s2)\n        copy_s2 = list(s2)\n        for i in range(0, len(s2)):\n            if copy_s2[i] in s1:\n                s1.remove(copy_s2[i])\n                s2.remove(copy_s2[i])\n        if len(s2) != 0:\n            print('NO')\n        else:\n            b = {}\n            for i in s1:\n                if i in b:\n                    b[i] += 1\n                else:\n                    b[i] = 1\n            count = 0\n            for i in b.values():\n                if i % 2 == 1:\n                    count += 1\n            if count > 1:\n                print('NO')\n            else:\n                print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    if n < m:\n        (n, m) = (m, n)\n        (s1, s2) = (s2, s1)\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        if s1[i] in d1:\n            d1[s1[i]] += 1\n        else:\n            d1[s1[i]] = 1\n    for i in range(m):\n        if s2[i] in d2:\n            d2[s2[i]] += 1\n        else:\n            d2[s2[i]] = 1\n    for i in d2:\n        if i not in d1:\n            print('NO')\n            break\n        elif d2[i] > d1[i]:\n            print('NO')\n            break\n        d1[i] -= d2[i]\n    else:\n        odd = 0\n        for i in d1:\n            if d1[i] % 2:\n                odd += 1\n        if (n - m) % 2:\n            if odd == 1:\n                print('YES')\n            else:\n                print('NO')\n        elif odd == 0:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n1, n2) = list(map(int, input().split()))\n    st1 = input()\n    st = input()\n    if n1 < n2:\n        s1 = st\n        s2 = st1\n    else:\n        s1 = st1\n        s2 = st\n    dic = {}\n    f = 0\n    for i in s1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in s2:\n        if i in dic:\n            dic[i] -= 1\n            if dic[i] == 0:\n                dic.pop(i)\n        else:\n            f = 1\n            break\n    if f == 1:\n        print('NO')\n    else:\n        k = 0\n        for i in dic:\n            if dic[i] % 2 != 0:\n                k += 1\n        if k <= 1:\n            print('YES')\n        else:\n            print('NO')", "for i in range(int(input())):\n    (l, r) = map(int, input().split(' '))\n    left = input()\n    right = input()\n    m = []\n    for j in set(left):\n        if left.count(j) == right.count(j):\n            pass\n        elif left.count(j) > right.count(j):\n            rem = left.count(j) - right.count(j)\n            if rem % 2 == 0:\n                m.append(0)\n            else:\n                m.append(1)\n    n = []\n    for j in set(right):\n        if left.count(j) == right.count(j):\n            pass\n        elif left.count(j) < right.count(j):\n            rem = right.count(j) - left.count(j)\n            if rem % 2 == 0:\n                n.append(0)\n            else:\n                n.append(1)\n    if len(n) == 0 and m.count(1) > 1:\n        print('NO')\n    elif len(m) == 0 and n.count(1) > 1:\n        print('NO')\n    elif len(n) != 0 and len(m) != 0:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\n\ndef solve(a, b, m, n):\n    (a, b) = (b, a) if m < n else (a, b)\n    (ca, cb) = (Counter([c for c in a]), Counter([c for c in b]))\n    if len(cb - ca) > 0:\n        return 'NO'\n    a = ca - cb\n    (l, c) = (0, 0)\n    for v in a.values():\n        l += v\n        c += 1 if v & 1 == 1 else 0\n    if c == l & 1:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    (m, n) = list(map(int, input().split()))\n    a = input()\n    b = input()\n    print(solve(a, b, m, n))", "from collections import Counter\n\ndef solve(a, b, m, n):\n    (a, b) = (b, a) if m < n else (a, b)\n    (ca, cb) = (Counter([c for c in a]), Counter([c for c in b]))\n    if len(cb - ca) > 0:\n        return 'NO'\n    a = ca - cb\n    (l, c) = (0, 0)\n    for v in a.values():\n        l += v\n        c += 1 if v & 1 == 1 else 0\n    if c == 0 or (c == 1 and l & 1 == 1):\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    (m, n) = list(map(int, input().split()))\n    a = input()\n    b = input()\n    print(solve(a, b, m, n))", "for _ in range(int(input())):\n    (n1, n2) = list(map(int, input().split()))\n    st1 = input()\n    st = input()\n    if n1 < n2:\n        s1 = st\n        s2 = st1\n    else:\n        s1 = st1\n        s2 = st\n    dic = {}\n    f = 0\n    for i in s1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    for i in s2:\n        if i in dic:\n            dic[i] -= 1\n            if dic[i] == 0:\n                dic.pop(i)\n        else:\n            f = 1\n            break\n    if f == 1:\n        print('NO')\n    else:\n        k = 0\n        for i in dic:\n            if dic[i] % 2 != 0:\n                k += 1\n        if k <= 1:\n            print('YES')\n        else:\n            print('NO')", "def solve():\n    (m, n) = map(int, input().split())\n    (a, b) = (input().strip(), input().strip())\n    if n > m:\n        (a, b) = (b, a)\n        (m, n) = (n, m)\n    mp = {}\n    for c in a:\n        mp[c] = mp.get(c, 0) + 1\n    for c in b:\n        mp[c] = mp.get(c, 0) - 1\n    odd = 0\n    for val in mp.values():\n        if val < 0:\n            return False\n        if val % 2:\n            odd += 1\n    return odd <= 1\nt = int(input().strip())\nfor _ in range(t):\n    if solve():\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor _ in range(n):\n    (x, y) = map(int, input().split())\n    a = input()\n    b = input()\n    c = dict()\n    d = dict()\n    for i in a:\n        if i in c:\n            c[i] += 1\n        else:\n            c[i] = 1\n    for i in b:\n        if i in c:\n            c[i] -= 1\n            if c[i] == 0:\n                c.pop(i)\n        elif i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    if c != {} and d != {}:\n        print('NO')\n        continue\n    if len(c):\n        odd = 0\n        for i in c:\n            if c[i] % 2 != 0:\n                odd += 1\n        if odd > 1:\n            print('NO')\n            continue\n    elif len(d):\n        odd = 0\n        for i in d:\n            if d[i] % 2 != 0:\n                odd += 1\n        if odd > 1:\n            print('NO')\n            continue\n    print('YES')", "def isPalindrome(s1, s2, m, n):\n    dc1 = {}\n    dc2 = {}\n    for i in s1:\n        if i in dc1:\n            dc1[i] += 1\n        else:\n            dc1[i] = 1\n    for i in s2:\n        if i in dc1:\n            dc1[i] -= 1\n            if dc1[i] == 0:\n                dc1.pop(i)\n        elif i in dc2:\n            dc2[i] += 1\n        else:\n            dc2[i] = 1\n    if dc1 != {} and dc2 != {}:\n        return 'NO'\n    if dc1:\n        od = 0\n        for i in dc1:\n            if dc1[i] % 2 != 0:\n                od += 1\n        if od > 1:\n            return 'NO'\n    elif dc2:\n        od = 0\n        for i in dc2:\n            if dc2[i] % 2 != 0:\n                od += 1\n        if od > 1:\n            return 'NO'\n    return 'YES'\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (m, n) = map(int, input().split())\n        s1 = input()\n        s2 = input()\n        print(isPalindrome(s1, s2, m, n))\nmain()", "def solve():\n    (m, n) = map(int, input().split())\n    (a, b) = (input().strip(), input().strip())\n    if n > m:\n        (a, b) = (b, a)\n        (m, n) = (n, m)\n    mp = {}\n    for c in a:\n        mp[c] = mp.get(c, 0) + 1\n    for c in b:\n        mp[c] = mp.get(c, 0) - 1\n    odd = 0\n    for val in mp.values():\n        if val < 0:\n            return False\n        if val % 2:\n            odd += 1\n    return odd <= 1\nt = int(input().strip())\nfor _ in range(t):\n    if solve():\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nimport math as mt\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    (mp1, mp2) = (defaultdict(int), defaultdict(int))\n    for i in s1:\n        mp1[i] += 1\n    for i in s2:\n        mp2[i] += 1\n    for i in set(s1):\n        if i in mp2:\n            if mp2[i] > mp1[i]:\n                mp2[i] -= mp1[i]\n                del mp1[i]\n            elif mp1[i] > mp2[i]:\n                mp1[i] -= mp2[i]\n                del mp2[i]\n            else:\n                del mp2[i]\n                del mp1[i]\n    if len(mp1) and len(mp2):\n        print('NO')\n    else:\n        cnt = 0\n        for i in mp1:\n            cnt += mp1[i] & 1\n        for i in mp2:\n            cnt += mp2[i] & 1\n        if cnt > 1:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nwhile t > 0:\n    (m, n) = input().split()\n    m = int(m)\n    n = int(n)\n    s1 = input()\n    s2 = input()\n    d = {}\n    d1 = {}\n    d2 = {}\n    for i in range(m):\n        if s1[i] in d.keys():\n            d[s1[i]] += 1\n        else:\n            d[s1[i]] = 1\n        if s1[i] in d1.keys():\n            d1[s1[i]] += 1\n        else:\n            d1[s1[i]] = 1\n    for i in range(n):\n        if s2[i] in d.keys():\n            d[s2[i]] += 1\n        else:\n            d[s2[i]] = 1\n        if s2[i] in d2.keys():\n            d2[s2[i]] += 1\n        else:\n            d2[s2[i]] = 1\n    odd = 0\n    even = 0\n    odd_string = 0\n    for i in d.keys():\n        if d[i] % 2 == 0:\n            even += 1\n        else:\n            if odd_string == 0:\n                odd_string = i\n            odd += 1\n    cnt = 0\n    if odd >= 2:\n        print('NO')\n    else:\n        for i in d.keys():\n            if i not in d1.keys():\n                d1[i] = 0\n            if i not in d2.keys():\n                d2[i] = 0\n            if d1[i] > d2[i] and m <= n or (d1[i] < d2[i] and m >= n):\n                cnt += 1\n        if cnt >= 1:\n            print('NO')\n        else:\n            print('YES')\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (len1, len2) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    if len2 > len1:\n        s = s1\n        s1 = s2\n        s2 = s\n    f = [0] * 26\n    for i in s1:\n        asc = ord(i)\n        f[asc - 97] = f[asc - 97] + 1\n    for i in s2:\n        asc = ord(i)\n        f[asc - 97] = f[asc - 97] - 1\n    flag = 0\n    c = 0\n    for i in range(0, 26):\n        if f[i] < 0:\n            flag = 1\n            break\n        if f[i] % 2 == 0:\n            continue\n        if f[i] % 2 != 0:\n            c = c + 1\n    if flag == 1:\n        print('NO')\n    elif abs(len1 - len2) % 2 == 0 and c == 0:\n        print('YES')\n    elif abs(len1 - len2) % 2 != 0 and c == 1:\n        print('YES')\n    else:\n        print('NO')\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    (len1, len2) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    if len2 > len1:\n        s = s1\n        s1 = s2\n        s2 = s\n    f = [0] * 26\n    for i in s1:\n        asc = ord(i)\n        f[asc - 97] = f[asc - 97] + 1\n    for i in s2:\n        asc = ord(i)\n        f[asc - 97] = f[asc - 97] - 1\n    flag = 1\n    c = 0\n    for i in range(0, 26):\n        if f[i] < 0:\n            flag = 0\n            break\n        if f[i] % 2 == 0:\n            continue\n        if c == 1:\n            flag = 0\n        else:\n            c = 1\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')\n    t = t - 1", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().strip().split())\n    x = input()\n    y = input()\n    if len(x) < len(y):\n        for i in x:\n            if i in y:\n                y = y.replace(i, '', 1)\n                x = x.replace(i, '', 1)\n    else:\n        for i in y:\n            if i in x:\n                x = x.replace(i, '', 1)\n                y = y.replace(i, '', 1)\n    if x == '' or y == '':\n        temp = x + y\n        z = Counter(temp)\n        c = 0\n        for i in z.values():\n            if i % 2 == 1:\n                c += 1\n        if c <= 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    t -= 1", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    if len(s1) < len(s2):\n        (s1, s2) = (s2, s1)\n    d = {}\n    ans = True\n    for i in s1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in s2:\n        if i not in d or d[i] <= 0:\n            ans = False\n            break\n        else:\n            d[i] -= 1\n    if ans:\n        od = 0\n        for i in d:\n            if d[i] & 1:\n                od += 1\n        if n + m & 1:\n            if od == 1:\n                print('YES')\n            else:\n                print('NO')\n        elif od == 0:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().strip().split())\n    x = input()\n    y = input()\n    if len(x) < len(y):\n        for i in x:\n            if i in y:\n                y = y.replace(i, '', 1)\n                x = x.replace(i, '', 1)\n    else:\n        for i in y:\n            if i in x:\n                x = x.replace(i, '', 1)\n                y = y.replace(i, '', 1)\n    if x == '' or y == '':\n        temp = x + y\n        z = Counter(temp)\n        c = 0\n        for i in z.values():\n            if i % 2 == 1:\n                c += 1\n        if c <= 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    t -= 1", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    f = [0] * 128\n    if m > n:\n        (n, m) = (m, n)\n        (s1, s2) = (s2, s1)\n    for ch in s1:\n        f[ord(ch)] += 1\n    for ch in s2:\n        f[ord(ch)] -= 1\n    (flag, cnt) = (True, 0)\n    for i in range(128):\n        if f[i] < 0:\n            flag = False\n            break\n        if f[i] % 2 == 0:\n            continue\n        if cnt:\n            flag = False\n        else:\n            cnt = 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    f = [0] * 128\n    if m > n:\n        (n, m) = (m, n)\n        (s1, s2) = (s2, s1)\n    for ch in s1:\n        f[ord(ch)] += 1\n    for ch in s2:\n        f[ord(ch)] -= 1\n    (flag, cnt) = (True, 0)\n    for i in range(128):\n        if f[i] < 0:\n            flag = False\n            break\n        if f[i] % 2 == 0:\n            continue\n        if cnt:\n            flag = False\n        else:\n            cnt = 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().strip().split())\n    x = input()\n    y = input()\n    if len(x) < len(y):\n        for i in x:\n            if i in y:\n                y = y.replace(i, '', 1)\n                x = x.replace(i, '', 1)\n    else:\n        for i in y:\n            if i in x:\n                x = x.replace(i, '', 1)\n                y = y.replace(i, '', 1)\n    if x == '' or y == '':\n        temp = x + y\n        z = Counter(temp)\n        c = 0\n        for i in z.values():\n            if i % 2 == 1:\n                c += 1\n        if c <= 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    t -= 1", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    odd = 0\n    if n < m:\n        (s1, s2) = (s2, s1)\n    for i in s2:\n        if i not in s1:\n            print('NO')\n            break\n        s1 = s1.replace(i, '', 1)\n    else:\n        for i in set(s1):\n            if s1.count(i) % 2:\n                odd = odd + 1\n        if odd < 2:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    odd = 0\n    if n < m:\n        (s1, s2) = (s2, s1)\n    for i in s2:\n        if i not in s1:\n            print('NO')\n            break\n        s1 = s1.replace(i, '', 1)\n    else:\n        for i in set(s1):\n            if s1.count(i) % 2:\n                odd = odd + 1\n        if odd < 2:\n            print('YES')\n        else:\n            print('NO')", "for t in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 0\n    d = 0\n    s1 = input()\n    s2 = input()\n    if len(s1) < len(s2):\n        for i in s1:\n            if i in s2:\n                s1 = s1.replace(i, '', 1)\n                s2 = s2.replace(i, '', 1)\n    else:\n        for i in s2:\n            if i in s1:\n                s1 = s1.replace(i, '', 1)\n                s2 = s2.replace(i, '', 1)\n    if s1 == '' or s2 == '':\n        s = s1 + s2\n        from collections import Counter\n        d = Counter(s)\n        for j in d.values():\n            if j % 2 != 0:\n                c = c + 1\n        if c == 0 or c == 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "import string\nfrom functools import lru_cache\nimport atexit, io\nimport sys\nfrom math import log2\nimport math\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right, insort\nfrom math import gcd\nfrom math import sqrt\nfrom collections import Counter, defaultdict\nfrom heapq import heappush, heappop, heapify\nimport heapq\n\nclass FenwickTree:\n\n    def __init__(self, n):\n        self.farr = [0] * (n + 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\n    def find(self, k):\n        curr = 0\n        ans = 0\n        prevSum = 0\n        for i in range(log2(n), -1, -1):\n            if self.farr[curr + (i << i)] + prevSum < k:\n                curr += 1 << i\n                prevSum += self.farr[curr]\n        return curr + 1\n\nclass Trie(object):\n\n    def __init__(self):\n        self.trie = {}\n\n    def insert(self, word):\n        t = self.trie\n        for c in word:\n            if c not in t:\n                t[c] = {}\n            t = t[c]\n        t['-'] = True\n\n    def search(self, word):\n        t = self.trie\n        for c in word:\n            if c not in t:\n                return False\n            t = t[c]\n        return '-' in t\n\n    def startsWith(self, prefix):\n        t = self.trie\n        for c in prefix:\n            if c not in t:\n                return False\n            t = t[c]\n        return True\n\n    def query(self, word):\n        ans = 0\n        t = self.trie\n        for i in word:\n            if i not in t:\n                break\n            ans += 1\n            t = t[i]\n        return ans\n\nclass FenvTree:\n\n    def __init__(self, arr):\n        arr.insert(0, 0)\n        self.farr = [0]\n        prefix = [0]\n        for i in arr[1:]:\n            prefix.append(prefix[-1] + i)\n        for i in range(1, len(arr)):\n            idash = i - (i & -i)\n            self.farr.append(prefix[i] - prefix[idash])\n\n    def query(self, l, r):\n        return self.prefixSum(r) - self.prefixSum(l - 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\nclass DSU:\n\n    def __init__(self, n):\n        self.parent = []\n        self.size = []\n        for i in range(n + 1):\n            self.parent.append(i)\n            self.size.append(1)\n\n    def union(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.size[pu] < self.size[pv]:\n            self.parent[pu] = pv\n            self.size[pv] += self.size[pu]\n        else:\n            self.parent[pv] = pu\n            self.size[pu] += self.size[pv]\n\n    def unionByRank(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.rank[pu] < self.rank[pv]:\n            self.parent[pu] = pv\n        elif self.rank[pv] < self.rank[pu]:\n            self.parent[pv] = pu\n        else:\n            self.parent[pu] = pv\n            self.rank[pv] += 1\n\n    def findPar(self, node):\n        if self.parent[node] == node:\n            return node\n        self.parent[node] = self.findPar(self.parent[node])\n        return self.parent[node]\n\nclass info:\n\n    def __init__(self, _open=0, _close=0, _full=0):\n        self.open = _open\n        self.close = _close\n        self.full = _full\n\nclass SGTree:\n\n    def __init__(self, n):\n        self.seg = [0 for _ in range(4 * n)]\n\n    def build(self, ind, low, high, arr):\n        if low == high:\n            self.seg[ind] = arr[low]\n            return\n        mid = (low + high) // 2\n        self.build(2 * ind + 1, low, mid, arr)\n        self.build(2 * ind + 2, mid + 1, high, arr)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\n    def query(self, ind, low, high, l, r):\n        if r < low or l > high:\n            return sys.maxsize\n        if low <= l and r >= high:\n            return self.seg[ind]\n        mid = low + high >> 1\n        left = self.query(2 * ind + 1, 0, mid, l, r)\n        right = self.query(2 * ind + 2, mid + 1, high, l, r)\n        return min(left, right)\n\n    def update(self, ind, low, high, i, val):\n        if low == high:\n            self.seg = val\n            return\n        mid = low + high >> 1\n        if i <= mid:\n            self.update(2 * ind + 1, low, mid, i, val)\n        else:\n            self.update(2 * ind + 1, mid + 1, high, i, val)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\ndef isPalindrome(s):\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef IntList():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef getInts():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef getStrs():\n    return sys.stdin.readline().strip()\n\ndef StrList():\n    list(sys.stdin.readline().strip())\n\ndef FloatList():\n    lis = input().split()\n    lis = list(map(float, lis))\n    return lis\n\ndef SieveOfEratosthenes(n, isPrime):\n    isPrime[0] = isPrime[1] = False\n    for i in range(2, n + 1):\n        isPrime[i] = True\n    p = 2\n    while p * p <= n:\n        if isPrime[p]:\n            i = p * p\n            while i <= n:\n                isPrime[i] = False\n                i += p\n        p += 1\n\ndef findPrimePair(n):\n    isPrime = [0] * (n + 1)\n    SieveOfEratosthenes(n, isPrime)\n    for i in range(0, n):\n        if isPrime[i] and isPrime[n - i]:\n            print(i, n - i)\n            return\n\ndef query(ind, low, high, l, r, seg):\n    if r < low or l > high:\n        return info()\n    if low <= l and r >= high:\n        return self.seg[ind]\n    mid = low + high >> 1\n    left = self.query(2 * ind + 1, 0, mid, l, r, seg)\n    right = self.query(2 * ind + 2, mid + 1, high, l, r, seg)\n    return merge(left, right)\n\ndef merge(left, right):\n    ans = info()\n    ans.full = left.full + right.full + min(left.open, right.close)\n    ans.open = left.open + right.open + min(left.open, right.close)\n    ans.close = left.close + right.close + min(left.open, right.close)\n    return ans\n\ndef build(ind, low, high, s, seg):\n    if low == high:\n        seg[ind] = info(s[low] == '(', s[low] == ')', 0)\n        return\n    mid = (low + high) // 2\n    build(2 * ind + 1, low, mid, s, seg)\n    build(2 * ind + 2, mid + 1, high, s, seg)\n    seg[ind] = merge(seg[2 * ind + 1], seg[2 * ind + 2])\n\ndef countN(lis):\n    ans = 0\n    cnt = 0\n    for i in range(len(lis) - 1, -1, -1):\n        if lis[i] == 0:\n            cnt += 1\n        else:\n            ans += cnt\n    return ans\n\nclass Pair:\n\n    def __init__(self, x, y, gcd):\n        self.x = x\n        self.y = y\n        self.gcd = gcd\n\ndef Euclidean(a, b):\n    if b == 0:\n        return Pair(1, 0, a)\n    dash = Euclidean(b, a % b)\n    return Pair(dash.y, dash.x - a // b * dash.y, dash.gcd)\n\ndef chineseRemainder(a1, n1, a2, n2):\n    p = Euclidean(n1, n2)\n    x = p.x\n    gcd = p.gcd\n    if (a1 - a2) % gcd:\n        return -1\n    k = (a1 - a2) // gcd\n    a = a1 - n1 * (k * x % n2 // gcd)\n    lcm = n1 * n2 // gcd\n    if a < 0:\n        a += lcm\n    return a\nmdd = 998244353\n\ndef ncr(n, k, md):\n    mod = 998244353\n    tab = [[0 for _ in range(k + 1)] for i in range(n + 1)]\n    for i in range(1, len(tab)):\n        tab[i][0] = 1\n    for i in range(1, len(tab)):\n        for j in range(1, min(i + 1, len(tab[0]))):\n            if i == 1 and j == 1:\n                tab[i][j] = 1\n            else:\n                tab[i][j] = (tab[i - 1][j] + tab[i - 1][j - 1]) % mod\n    return tab\n\ndef repeat(i, j, arr):\n    if i > j:\n        return\n    cnt1 = i\n    cnt2 = j\n    while cnt1 < cnt2:\n        (arr[cnt1], arr[cnt2]) = (arr[cnt2], arr[cnt1])\n        cnt1 += 1\n        cnt2 -= 1\n    if i - 1 >= 0:\n        ele = arr[i - 1]\n        if ele > 0:\n            s = int(sqrt(ele - 1)) + 1\n            first = s * s - ele\n            repeat(first, i - 1, arr)\n    return\nspf = []\n\ndef makeSeive(n):\n    for i in range(n + 1):\n        spf.append(i)\n\ndef seive(n):\n    s = int(sqrt(n + 1))\n    for i in range(2, s + 1):\n        if spf[i] == i:\n            for j in range(i * i, n + 1, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = set()\n    while x != 1:\n        ret.add(spf[x])\n        x = x // spf[x]\n    return ret\n\ndef zFunc(patt, txt):\n    st = patt + '#' + txt\n    zArray = [0 for _ in range(len(st))]\n    l = 0\n    r = 0\n    for i in range(1, len(st)):\n        if r >= i:\n            zArray[i] = min(r - i + 1, zArray[i - l])\n        while i + zArray[i] < len(st) and st[zArray[i]] == st[zArray[i] + i]:\n            zArray[i] += 1\n        if zArray[i] + i - 1 > r:\n            l = i\n            r = i + zArray[i] - 1\n    return zArray.count(len(patt))\n\ndef kmp(txt, patt):\n    newString = patt + '#' + txt\n    freqCount = 0\n    freqArray = [0 for _ in range(len(newString))]\n    i = 1\n    length = 0\n    while i < len(newString):\n        if newString[i] == newString[length]:\n            length += 1\n            freqArray[i] = length\n            i += 1\n        elif length > 0:\n            length = freqArray[length - 1]\n        else:\n            freqArray[i] = 0\n            i += 1\n    for i in freqArray:\n        if i == len(patt):\n            freqCount += 1\n    return freqCount\n\ndef getLPS(s):\n    st = '@#' + '#'.join(s) + '#&'\n    c = 0\n    r = 0\n    lps = [0] * len(st)\n    for i in range(1, len(st) - 1):\n        mirror = c - (i - c)\n        if i < r and mirror >= 0:\n            lps[i] = min(lps[mirror], r - i)\n        while st[i + lps[i] + 1] == st[i - lps[i] - 1]:\n            lps[i] += 1\n        if i + lps[i] > r:\n            r = i + lps[i]\n            c = i\n    return max(lps)\nfact = [1 for _ in range(100002)]\nmod = 10 ** 9 + 7\n\ndef getFact(n):\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i % mod\n\ndef getInv(word):\n    num = math.factorial(len(word))\n    for v in Counter(word).values():\n        num = num * pow(math.factorial(v), mod - 2, mod) % mod\n    return int(num) % (10 ** 9 + 7)\n\ndef subarrayXor(arr, n, m):\n    HashTable = defaultdict(bool)\n    HashTable[0] = 1\n    count = 0\n    curSum = 0\n    for i in arr:\n        curSum ^= i\n        if HashTable[curSum ^ m]:\n            count += HashTable[curSum ^ m]\n        HashTable[curSum] += 1\n    return count\n\ndef get2dPrefixSum(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef get2dPrefixSumCnt(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef getSumRange(r1, c1, r2, c2, prefix):\n    cnt = prefix[r2][c2] - prefix[r2][c1 - 1] - prefix[r1 - 1][c2] + prefix[r1 - 1][c1 - 1]\n    return cnt\n\ndef getPrefix(arr):\n    prefix = [0]\n    for i in arr:\n        prefix.append(prefix[-1] + i)\n    return prefix\n\ndef getInv(arr):\n    cnt = 0\n    ans = []\n    for i in arr:\n        ind = bisect_right(ans, i)\n        cnt += len(ans) - ind\n        insort(ans, i)\n    return cnt\nM = 10 ** 5\n\ndef getFactors(x):\n    temp = []\n    k = 1\n    while k * k <= x:\n        if x % k == 0:\n            temp.append(k)\n            if k * k != x:\n                temp.append(x // k)\n        k += 1\n    return temp\n\ndef grayCode(n):\n    if not n:\n        return [0]\n    res = [0, 1]\n    for i in range(2, n + 1):\n        for j in range(len(res) - 1, -1, -1):\n            res.append(res[j] | 1 << i - 1)\n    return res\n\ndef threeSum(nums, target):\n    ans = -1\n    d = dict()\n    for (i, j) in enumerate(nums):\n        d[j] = i + 1\n    nums.sort()\n    for i in range(len(nums) - 2):\n        low = i + 1\n        high = len(nums) - 1\n        while low < high:\n            s = nums[i] + nums[low] + nums[high]\n            if s == target:\n                print(d[nums[low]], d[nums[high]], d[nums[i]])\n                return\n                low += 1\n                high -= 1\n            elif s < 0:\n                low = low + 1\n            else:\n                high -= 1\n    print('IMPOSSIBLE')\n    return\n\ndef FuckCF():\n    (a, b) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    c1 = Counter(s1)\n    c2 = Counter(s2)\n    if b < a:\n        (c1, c2) = (c2, c1)\n    for (i, j) in c1.items():\n        if j > c2[i]:\n            print('NO')\n            return\n    cnt = 0\n    for (i, j) in c2.items():\n        if abs(j - c1[i]) % 2:\n            cnt += 1\n    if cnt > 1:\n        print('NO')\n    else:\n        print('YES')\nt = 1\nt = int(input())\nfor i in range(t):\n    FuckCF()", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().strip().split())\n    x = input()\n    y = input()\n    if len(x) < len(y):\n        for i in x:\n            if i in y:\n                y = y.replace(i, '', 1)\n                x = x.replace(i, '', 1)\n    else:\n        for i in y:\n            if i in x:\n                x = x.replace(i, '', 1)\n                y = y.replace(i, '', 1)\n    if x == '' or y == '':\n        temp = x + y\n        z = Counter(temp)\n        c = 0\n        for i in z.values():\n            if i % 2 == 1:\n                c += 1\n        if c <= 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    t -= 1", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().strip().split())\n    x = input()\n    y = input()\n    if len(x) < len(y):\n        for i in x:\n            if i in y:\n                y = y.replace(i, '', 1)\n                x = x.replace(i, '', 1)\n    else:\n        for i in y:\n            if i in x:\n                x = x.replace(i, '', 1)\n                y = y.replace(i, '', 1)\n    if x == '' or y == '':\n        temp = x + y\n        z = Counter(temp)\n        c = 0\n        for i in z.values():\n            if i % 2 == 1:\n                c += 1\n        if c <= 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    t -= 1", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().strip().split())\n    x = input()\n    y = input()\n    if len(x) < len(y):\n        for i in x:\n            if i in y:\n                y = y.replace(i, '', 1)\n                x = x.replace(i, '', 1)\n    else:\n        for i in y:\n            if i in x:\n                x = x.replace(i, '', 1)\n                y = y.replace(i, '', 1)\n    if x == '' or y == '':\n        temp = x + y\n        z = Counter(temp)\n        c = 0\n        for i in z.values():\n            if i % 2 == 1:\n                c += 1\n        if c <= 1:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')\n    t -= 1", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    dic = {}\n    if b > a:\n        (s1, s2) = (s2, s1)\n    for i in s1:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for i in s2:\n        if i in dic:\n            dic[i] -= 1\n        else:\n            dic[i] = -1\n    count = 0\n    f = 0\n    for i in dic:\n        if dic[i] < 0:\n            f = 1\n            break\n        elif dic[i] % 2 != 0:\n            count += 1\n    if f == 1 or count > 1:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    dic = {}\n    if b > a:\n        (s1, s2) = (s2, s1)\n    for i in s1:\n        if i not in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    for i in s2:\n        if i in dic:\n            dic[i] -= 1\n        else:\n            dic[i] = -1\n    count = 0\n    f = 0\n    for i in dic:\n        if dic[i] < 0:\n            f = 1\n            break\n        if dic[i] % 2 != 0:\n            count += 1\n    if f == 1 or count > 1:\n        print('NO')\n    else:\n        print('YES')", "test = int(input())\nfor _ in range(test):\n    (n, m) = map(int, input().split())\n    s = input()\n    s2 = input()\n    freq = [0] * 128\n    if m > n:\n        (n, m) = (m, n)\n        (s, s2) = (s2, s)\n    for ch in s:\n        freq[ord(ch)] += 1\n    for ch in s2:\n        freq[ord(ch)] -= 1\n    (flag, cnt) = (True, 0)\n    for i in range(128):\n        if freq[i] < 0:\n            flag = False\n            break\n        if freq[i] % 2 == 0:\n            continue\n        if cnt:\n            flag = False\n        else:\n            cnt = 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    odd = 0\n    if n < m:\n        (s1, s2) = (s2, s1)\n    for i in s2:\n        if i not in s1:\n            print('NO')\n            break\n        s1 = s1.replace(i, '', 1)\n    else:\n        for i in set(s1):\n            if s1.count(i) % 2:\n                odd = odd + 1\n        if odd < 2:\n            print('YES')\n        else:\n            print('NO')", "def isPalindrome(s):\n    odd = 0\n    for ch in set(s):\n        if s.count(ch) % 2:\n            odd += 1\n    return odd < 2\nT = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    A = str(input())[:n].lower()\n    B = str(input())[:m].lower()\n    if n < m:\n        (A, B) = (B, A)\n    for ch in B:\n        if ch not in A:\n            print('NO')\n            break\n        A = A.replace(ch, '', 1)\n    else:\n        if isPalindrome(A):\n            print('YES')\n        else:\n            print('NO')", "case = int(input())\nfor _ in range(case):\n    (m, n) = map(int, input().split(' '))\n    s1 = input()\n    s2 = input()\n    s1dic = {}\n    s2dic = {}\n    for i in range(m):\n        if s1[i] not in s1dic:\n            s1dic[s1[i]] = 0\n        s1dic[s1[i]] += 1\n    for i in range(n):\n        if s2[i] not in s2dic:\n            s2dic[s2[i]] = 0\n        s2dic[s2[i]] += 1\n    ans = True\n    if n < m:\n        for key in s2dic:\n            if key not in s1dic:\n                ans = False\n                break\n            if s1dic[key] < s2dic[key]:\n                ans = False\n                break\n            else:\n                s1dic[key] -= s2dic[key]\n        odd = False\n        for key in s1dic:\n            if s1dic[key] & 1 == 1:\n                if not odd:\n                    odd = True\n                else:\n                    ans = False\n                    break\n    else:\n        for key in s1dic:\n            if key not in s2dic:\n                ans = False\n                break\n            if s2dic[key] < s1dic[key]:\n                ans = False\n                break\n            else:\n                s2dic[key] -= s1dic[key]\n        odd = False\n        for key in s2dic:\n            if s2dic[key] & 1 == 1:\n                if not odd:\n                    odd = True\n                else:\n                    ans = False\n                    break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    a = 1\n    c = 0\n    d = {}\n    (x, y) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    l1 = list(s1)\n    l2 = list(s2)\n    if x > y:\n        for j in l2:\n            if j in l1:\n                l1.remove(j)\n            else:\n                a = 0\n                break\n        if a == 0:\n            print('NO')\n        else:\n            for k in l1:\n                if k in d:\n                    d[k] += 1\n                else:\n                    d[k] = 1\n            for q in d.values():\n                if q % 2 != 0:\n                    c += 1\n            if c == 0 or c == 1:\n                print('YES')\n            else:\n                print('NO')\n    else:\n        for j in l1:\n            if j in l2:\n                l2.remove(j)\n            else:\n                a = 0\n                break\n        if a == 0:\n            print('NO')\n        else:\n            for k in l2:\n                if k in d:\n                    d[k] += 1\n                else:\n                    d[k] = 1\n            for q in d.values():\n                if q % 2 != 0:\n                    c += 1\n            if c == 0 or c == 1:\n                print('YES')\n            else:\n                print('NO')", "def isPalindrome(s):\n    odd = 0\n    for ch in set(s):\n        if s.count(ch) % 2:\n            odd += 1\n    return odd < 2\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = str(input())[:n].lower()\n    B = str(input())[:m].lower()\n    if n < m:\n        (A, B) = (B, A)\n    for ch in B:\n        if ch not in A:\n            print('NO')\n            break\n        A = A.replace(ch, '', 1)\n    else:\n        if isPalindrome(A):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (s1, s2) = (input(), input())\n    if a < b:\n        (s1, s2) = (s2, s1)\n        (a, b) = (b, a)\n    hm = {}\n    for i in s1:\n        hm.setdefault(i, 0)\n        hm[i] += 1\n    res = 'YES'\n    for i in s2:\n        if hm.get(i, 0) == 0:\n            res = 'NO'\n            break\n        else:\n            hm[i] -= 1\n    if res != 'NO' and a - b > 0:\n        (o, e) = (0, 0)\n        for i in hm.keys():\n            if hm[i] % 2 == 1:\n                o += 1\n                if o > 1:\n                    res = 'NO'\n            else:\n                e += 1\n    print(res)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (s1, s2) = (input(), input())\n    if a < b:\n        (s1, s2) = (s2, s1)\n        (a, b) = (b, a)\n    hm = {}\n    for i in s1:\n        hm.setdefault(i, 0)\n        hm[i] += 1\n    res = 'YES'\n    for i in s2:\n        if hm.get(i, 0) == 0:\n            res = 'NO'\n            break\n        else:\n            hm[i] -= 1\n    if res != 'NO' and a - b > 0:\n        (o, e) = (0, 0)\n        for i in hm.keys():\n            if hm[i] % 2 == 1:\n                o += 1\n            else:\n                e += 1\n        if o > 1:\n            res = 'NO'\n    print(res)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (s1, s2) = (input(), input())\n    if a < b:\n        (s1, s2) = (s2, s1)\n        (a, b) = (b, a)\n    hm = {}\n    for i in s1:\n        hm.setdefault(i, 0)\n        hm[i] += 1\n    res = 'YES'\n    for i in s2:\n        if hm.get(i, 0) == 0:\n            res = 'NO'\n            break\n        else:\n            hm[i] -= 1\n    if res != 'NO' and a - b > 0:\n        nb = b - a\n        (o, e) = (0, 0)\n        for i in hm.keys():\n            if hm[i] % 2 == 1:\n                o += 1\n            else:\n                e += 1\n        if o > 1:\n            res = 'NO'\n    print(res)", "def isPalindrome(s):\n    odd = 0\n    for ch in set(s):\n        if s.count(ch) % 2:\n            odd += 1\n    return odd < 2\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    if n < m:\n        (s1, s2) = (s2, s1)\n    for ch in s2:\n        if ch not in s1:\n            print('NO')\n            break\n        s1 = s1.replace(ch, '', 1)\n    else:\n        if isPalindrome(s1):\n            print('YES')\n        else:\n            print('NO')", "def soln():\n    (n, m) = [int(x) for x in input().split()]\n    a = input()\n    b = input()\n    d = dict()\n    big = small = ''\n    if n > m:\n        big = a\n        small = b\n    else:\n        big = b\n        small = a\n    for char in big:\n        d[char] = d.get(char, 0) + 1\n    for char in small:\n        if d.get(char, 0) <= 0:\n            return 'NO'\n        else:\n            d[char] -= 1\n    noOdd = 0\n    for char in d:\n        if d[char] % 2 == 1:\n            noOdd += 1\n    if (n + m) % 2 == 1:\n        return 'YES' if noOdd == 1 else 'NO'\n    else:\n        return 'YES' if noOdd == 0 else 'NO'\nt = int(input())\nfor i in range(t):\n    print(soln())", "from collections import defaultdict\n\ndef check(a, b):\n    if len(a) < len(b):\n        (a, b) = (b, a)\n    c = defaultdict(int)\n    for i in a:\n        c[i] += 1\n    for i in b:\n        c[i] -= 1\n        if c[i] < 0:\n            return False\n    f = 0\n    for i in c:\n        if c[i] % 2 == 1:\n            f += 1\n    return f in [0, 1]\nfor _ in range(int(input())):\n    input()\n    print('YES' if check(input(), input()) else 'NO')", "from collections import defaultdict\n\ndef check(a, b):\n    if len(a) < len(b):\n        (a, b) = (b, a)\n    c = defaultdict(int)\n    for i in a:\n        c[i] += 1\n    for i in b:\n        c[i] -= 1\n        if c[i] < 0:\n            return False\n    f = 0\n    for i in c:\n        if c[i] % 2 == 1:\n            f += 1\n    return f in [0, 1]\nfor _ in range(int(input())):\n    input()\n    print('YES' if check(input(), input()) else 'NO')", "def palindrome(s):\n    s1 = set(s)\n    odd = ''\n    for i in s1:\n        if s.count(i) % 2 != 0:\n            odd += i\n    if len(s) % 2 == 0:\n        if len(odd) == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif len(odd) != 1:\n        print('NO')\n    else:\n        print('YES')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    f = 0\n    if len(a) > len(b):\n        s1 = a\n        s2 = b\n    else:\n        s1 = b\n        s2 = a\n    for i in s2:\n        if i not in s1:\n            f = 1\n            break\n        else:\n            s1 = s1.replace(i, '', 1)\n    if f == 1:\n        print('NO')\n    else:\n        palindrome(s1)", "def pal(s):\n    st = set(s)\n    odd = ''\n    for i in st:\n        if s.count(i) % 2 != 0:\n            odd += i\n    if len(s) % 2 == 0:\n        if len(odd) == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif len(odd) != 1:\n        print('NO')\n    else:\n        print('YES')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    f = 0\n    if len(a) > len(b):\n        s1 = a\n        s2 = b\n    else:\n        s1 = b\n        s2 = a\n    for i in s2:\n        if i not in s1:\n            f = 1\n            break\n        else:\n            s1 = s1.replace(i, '', 1)\n    if f == 1:\n        print('NO')\n    else:\n        pal(s1)", "def pal(s):\n    st = set(s)\n    odd = []\n    for i in st:\n        if s.count(i) % 2 != 0:\n            odd.append(i)\n    if len(s) % 2 == 0:\n        if len(odd) == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif len(odd) != 1:\n        print('NO')\n    else:\n        print('YES')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    f = 0\n    if len(a) > len(b):\n        s1 = a\n        s2 = b\n    else:\n        s1 = b\n        s2 = a\n    for i in s2:\n        if i not in s1:\n            f = 1\n            break\n        else:\n            s1 = s1.replace(i, '', 1)\n    if f == 1:\n        print('NO')\n    else:\n        pal(s1)", "def pal(s):\n    st = set(s)\n    sum = 0\n    odd = []\n    for i in st:\n        sum += s.count(i)\n        if s.count(i) % 2 != 0:\n            odd.append(i)\n    if len(s) % 2 == 0:\n        if sum % 2 == 0 and len(odd) == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif sum % 2 != 0 and len(odd) != 1:\n        print('NO')\n    else:\n        print('YES')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    f = 0\n    if len(a) > len(b):\n        s1 = a\n        s2 = b\n    else:\n        s1 = b\n        s2 = a\n    for i in s2:\n        if i not in s1:\n            f = 1\n            break\n        else:\n            s1 = s1.replace(i, '', 1)\n    if f == 1:\n        print('NO')\n    else:\n        pal(s1)", "def pal(s):\n    st = set(s)\n    sum = 0\n    odd = []\n    for i in st:\n        sum += s.count(i)\n        if s.count(i) % 2 != 0:\n            odd.append(i)\n    if len(s) % 2 == 0:\n        if sum % 2 == 0 and len(odd) == 0:\n            print('YES')\n        else:\n            print('NO')\n    elif sum % 2 == 0:\n        print('NO')\n    elif sum % 2 != 0 and len(odd) != 1:\n        print('NO')\n    else:\n        print('YES')\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    f = 0\n    if len(a) > len(b):\n        s1 = a\n        s2 = b\n    else:\n        s1 = b\n        s2 = a\n    for i in s2:\n        if i not in s1:\n            f = 1\n            break\n        else:\n            s1 = s1.replace(i, '', 1)\n    if f == 1:\n        print('NO')\n    else:\n        pal(s1)", "import sys\nsys.setrecursionlimit(10 ** 7)\nmod = 10 ** 9 + 7\n\ndef read_int():\n    return int(input())\n\ndef read_int_list():\n    return list(map(int, input().split()))\n\ndef read_string_list():\n    return list(input())\n\ndef read_string_list_with_space():\n    return list(input().split())\n\ndef read_string():\n    return input()\n\ndef read_graph():\n    (n, m) = read_int_list()\n    graph = [[] for _ in range(n)]\n    for _ in range(m):\n        (u, v) = read_int_list()\n        graph[u].append(v)\n        graph[v].append(u)\n    return graph\n\ndef execute():\n    for _ in range(read_int()):\n        (n, m) = read_int_list()\n        s = read_string()\n        t = read_string()\n        if n == m:\n            s = sorted(s)\n            t = sorted(t)[::-1]\n            res = 1\n            for i in range(n):\n                if s[i] != t[n - i - 1]:\n                    res = 0\n                    break\n            if res:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            (freq_small, freq_big) = ([0 for _ in range(26)], [0 for _ in range(26)])\n            if n > m:\n                (m, n) = (n, m)\n                (t, s) = (s, t)\n            for c in s:\n                freq_small[ord(c) - 97] += 1\n            for c in t:\n                freq_big[ord(c) - 97] += 1\n            res = 1\n            for i in range(26):\n                if freq_small[i] > freq_big[i]:\n                    res = 0\n                    break\n                freq_big[i] -= freq_small[i]\n            if res:\n                odd = 0\n                for i in range(26):\n                    if freq_big[i] % 2 == 1:\n                        odd += 1\n                    if odd > 1:\n                        res = 0\n                        break\n            if res:\n                print('YES')\n            else:\n                print('NO')\nexecute()", "t = int(input())\nfrom collections import Counter\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    if n > m:\n        (n, m) = (m, n)\n        (a, b) = (b, a)\n    cnt1 = Counter(a)\n    cnt2 = Counter(b)\n    check = True\n    for key in cnt1:\n        if cnt1[key] <= cnt2[key]:\n            cnt2[key] -= cnt1[key]\n        else:\n            check = False\n            break\n    if not check:\n        print('NO')\n    else:\n        odd = 0\n        even = 0\n        for key in cnt2:\n            if cnt2[key] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        if odd <= 1:\n            print('YES')\n        else:\n            print('NO')", "for tc in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a > b:\n        s1 = input()\n        s2 = input()\n    else:\n        s2 = input()\n        s1 = input()\n    d = {}\n    di = {}\n    for i in s1:\n        d[i] = 0\n    for i in s2:\n        di[i] = 0\n    for i in s1:\n        d[i] += 1\n    for i in s2:\n        di[i] += 1\n    temp = 0\n    for i in di.keys():\n        if i not in d.keys():\n            temp = 1\n            break\n    if temp:\n        print('NO')\n    else:\n        for i in di.keys():\n            d[i] -= di[i]\n        check = 0\n        for i in d.values():\n            if i < 0:\n                check = 1\n        if check:\n            print('NO')\n        else:\n            count = 0\n            for i in d.values():\n                if i % 2 == 1:\n                    count += 1\n            if count > 1:\n                print('NO')\n            else:\n                print('YES')", "case = int(input())\nfor _ in range(case):\n    (m, n) = map(int, input().split(' '))\n    s1 = input()\n    s2 = input()\n    s1dic = {}\n    s2dic = {}\n    for i in range(m):\n        if s1[i] not in s1dic:\n            s1dic[s1[i]] = 0\n        s1dic[s1[i]] += 1\n    for i in range(n):\n        if s2[i] not in s2dic:\n            s2dic[s2[i]] = 0\n        s2dic[s2[i]] += 1\n    ans = True\n    if n < m:\n        for key in s2dic:\n            if key not in s1dic:\n                ans = False\n                break\n            if s1dic[key] < s2dic[key]:\n                ans = False\n                break\n            else:\n                s1dic[key] -= s2dic[key]\n        odd = False\n        for key in s1dic:\n            if s1dic[key] & 1 == 1:\n                if not odd:\n                    odd = True\n                else:\n                    ans = False\n                    break\n    else:\n        for key in s1dic:\n            if key not in s2dic:\n                ans = False\n                break\n            if s2dic[key] < s1dic[key]:\n                ans = False\n                break\n            else:\n                s2dic[key] -= s1dic[key]\n        odd = False\n        for key in s2dic:\n            if s2dic[key] & 1 == 1:\n                if not odd:\n                    odd = True\n                else:\n                    ans = False\n                    break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    f = [0] * 128\n    if m > n:\n        (n, m) = (m, n)\n        (s1, s2) = (s2, s1)\n    for ch in s1:\n        f[ord(ch)] += 1\n    for ch in s2:\n        f[ord(ch)] -= 1\n    (flag, cnt) = (True, 0)\n    for i in range(128):\n        if f[i] < 0:\n            flag = False\n            break\n        if f[i] % 2 == 0:\n            continue\n        if cnt:\n            flag = False\n        else:\n            cnt = 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    f = [0] * 128\n    if m > n:\n        (n, m) = (m, n)\n        (s1, s2) = (s2, s1)\n    for ch in s1:\n        f[ord(ch)] += 1\n    for ch in s2:\n        f[ord(ch)] -= 1\n    (flag, cnt) = (True, 0)\n    for i in range(128):\n        if f[i] < 0:\n            flag = False\n            break\n        if f[i] % 2 == 0:\n            continue\n        if cnt:\n            flag = False\n        else:\n            cnt = 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\n\ndef checkvalid(a, b, n, m):\n    if n < m:\n        (a, b) = (b, a)\n        (n, m) = (m, n)\n    ac = Counter(a)\n    bc = Counter(b)\n    for i in range(m):\n        if b[i] in ac and ac[b[i]] > 0:\n            ac[b[i]] -= 1\n        else:\n            return False\n    oddFound = False\n    for key in ac:\n        if ac[key] % 2:\n            if oddFound:\n                return False\n            oddFound = True\n    return True\ntests = int(input())\nfor t0 in range(tests):\n    valid = True\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    print(['NO', 'YES'][checkvalid(a, b, n, m)])", "t = int(input())\nfor t in range(t):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    p = ''\n    q = ''\n    if len(a) > len(b):\n        p = a\n        q = b\n    else:\n        p = b\n        q = a\n    flag = 1\n    u = {}\n    v = {}\n    for i in p:\n        if i in u:\n            u[i] = u[i] + 1\n        else:\n            u[i] = 1\n    for i in q:\n        if i in v:\n            v[i] = v[i] + 1\n        else:\n            v[i] = 1\n    for i in v:\n        if u.get(i, 0) < v[i]:\n            flag = 0\n    for i in u:\n        if i in v:\n            u[i] = u[i] - v[i]\n    count_odd = 0\n    for i in u:\n        if u[i] % 2 != 0:\n            count_odd = count_odd + 1\n    if flag == 0:\n        print('NO')\n    elif count_odd > 1:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\n\ndef solve():\n    (n, m) = map(int, input().split())\n    (a, b) = (input(), input())\n    if n < m:\n        (a, b) = (b, a)\n    (cntA, cntB) = (Counter(a), Counter(b))\n    for i in cntB:\n        if cntA[i] < cntB[i]:\n            print('NO')\n            return\n        cntA[i] -= cntB[i]\n    (odd, even) = (0, 0)\n    for i in cntA:\n        if cntA[i] == 0:\n            continue\n        if cntA[i] % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    if odd <= 1:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    solve()", "from collections import Counter\n\ndef checkvalid(a, b, n, m):\n    if n < m:\n        (a, b) = (b, a)\n        (n, m) = (m, n)\n    ac = Counter(a)\n    bc = Counter(b)\n    for i in range(m):\n        if b[i] in ac and ac[b[i]] > 0:\n            ac[b[i]] -= 1\n        else:\n            return False\n    oddFound = False\n    for key in ac:\n        if ac[key] % 2:\n            if oddFound:\n                return False\n            oddFound = True\n    return True\ntests = int(input())\nfor t0 in range(tests):\n    valid = True\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    print(['NO', 'YES'][checkvalid(a, b, n, m)])", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    a = input()\n    b = input()\n    if x < y:\n        (a, b) = (b, a)\n    d = {}\n    flag = True\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in b:\n        if i not in d:\n            flag = False\n            break\n        else:\n            if d[i] == 0:\n                flag = False\n                break\n            d[i] -= 1\n    if flag == False:\n        print('NO')\n        continue\n    count = 0\n    for i in d:\n        if d[i] % 2 != 0:\n            count += 1\n        if count > 1:\n            flag = False\n            break\n    if flag == False:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    d = {}\n    for i in a:\n        val = (n >= m) - (n < m)\n        if i in d:\n            d[i] += val\n        else:\n            d[i] = val\n    for i in b:\n        val = (m > n) - (m <= n)\n        if i in d:\n            d[i] += val\n        else:\n            d[i] = val\n    odd = 0\n    for i in d.values():\n        if i & 1:\n            odd += 1\n    if odd <= 1 and min(d.values()) >= 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    a = input()\n    b = input()\n    if x < y:\n        (a, b) = (b, a)\n    d = {}\n    flag = True\n    for i in a:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in b:\n        if i not in d:\n            flag = False\n            break\n        else:\n            if d[i] == 0:\n                flag = False\n                break\n            d[i] -= 1\n    if flag == False:\n        print('NO')\n        continue\n    count = 0\n    for i in d:\n        if d[i] % 2 != 0:\n            count += 1\n        if count > 1:\n            flag = False\n            break\n    if flag == False:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    d = {}\n    for i in a:\n        val = (n >= m) - (n < m)\n        if i in d:\n            d[i] += val\n        else:\n            d[i] = val\n    for i in b:\n        val = (m > n) - (m <= n)\n        if i in d:\n            d[i] += val\n        else:\n            d[i] = val\n    odd = 0\n    for i in d.values():\n        if i & 1:\n            odd += 1\n    if odd <= 1 and min(d.values()) >= 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    d = {}\n    for i in a:\n        val = (n >= m) - (n < m)\n        if i in d:\n            d[i] += val\n        else:\n            d[i] = val\n    for i in b:\n        val = (m > n) - (m <= n)\n        if i in d:\n            d[i] += val\n        else:\n            d[i] = val\n    odd = 0\n    for i in d.values():\n        if i & 1:\n            odd += 1\n    if odd <= 1 and min(d.values()) >= 0:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    x = input()\n    y = input()\n    s = []\n    if a < b:\n        for i in y:\n            s.append(i)\n        q = 0\n        for i in x:\n            if i in s:\n                s.remove(i)\n            else:\n                q = 1\n                print('NO')\n                break\n        if q == 0:\n            d = {}\n            for i in s:\n                if i not in d:\n                    d[i] = 1\n                else:\n                    d[i] += 1\n            c = 0\n            for i in d:\n                if d[i] % 2 != 0:\n                    c += 1\n            if c <= 1:\n                print('YES')\n            else:\n                print('NO')\n    elif b < a:\n        for i in x:\n            s.append(i)\n        q = 0\n        for i in y:\n            if i in s:\n                s.remove(i)\n            else:\n                q = 1\n                print('NO')\n                break\n        if q == 0:\n            d = {}\n            for i in s:\n                if i not in d:\n                    d[i] = 1\n                else:\n                    d[i] += 1\n            c = 0\n            for i in d:\n                if d[i] % 2 != 0:\n                    c += 1\n            if c <= 1:\n                print('YES')\n            else:\n                print('NO')\n    else:\n        d1 = {}\n        d2 = {}\n        for i in x:\n            if i not in d1:\n                d1[i] = 1\n            else:\n                d1[i] += 1\n        for i in y:\n            if i not in d2:\n                d2[i] = 1\n            else:\n                d2[i] += 1\n        for i in d1:\n            if i not in d2:\n                print('NO')\n                break\n            elif i in d2 and d1[i] != d2[i]:\n                print('NO')\n                break\n        else:\n            print('YES')", "def palindrome(n, m, a, b):\n    d = {}\n    for i in a:\n        val = (n >= m) - (n < m)\n        if i in d:\n            d[i] += val\n        else:\n            d[i] = val\n    for i in b:\n        val = (m > n) - (m <= n)\n        if i in d:\n            d[i] += val\n        else:\n            d[i] = val\n    c = 0\n    for i in d.values():\n        c += i & 1\n    return 'YES' if c <= 1 and min(d.values()) >= 0 else 'NO'\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    print(palindrome(n, m, a, b))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    freq = {}\n    for c in input():\n        add = (n >= m) - (n < m)\n        if c in freq:\n            freq[c] += add\n        else:\n            freq[c] = add\n    for c in input():\n        add = (m > n) - (m <= n)\n        if c in freq:\n            freq[c] += add\n        else:\n            freq[c] = add\n    odd = 0\n    for y in freq.values():\n        odd += y % 2\n    print('YES' if odd <= 1 and min(freq.values()) >= 0 else 'NO')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split(' '))\n    flag = 0\n    a = input()\n    b = input()\n    if len(a) < len(b):\n        lis1 = list(b)\n        lis2 = list(a)\n    else:\n        lis1 = list(a)\n        lis2 = list(b)\n    flag = 0\n    for i in lis2:\n        if i in lis1:\n            lis1.remove(i)\n        else:\n            print('NO')\n            flag = 1\n            break\n    if flag == 1:\n        continue\n    c = ''\n    flag = 0\n    count = 0\n    for i in lis1:\n        if i not in c:\n            c += i\n            x = lis1.count(i)\n            if x % 2 != 0:\n                count += 1\n            if count >= 2:\n                print('NO')\n                flag = 1\n                break\n    if flag == 0:\n        print('YES')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    if n < m:\n        (a, b) = (b, a)\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    ans = True\n    for i in b:\n        if i in d:\n            if d[i] == 0:\n                ans = False\n                break\n            d[i] -= 1\n        else:\n            ans = False\n            break\n    if not ans:\n        print('NO')\n    else:\n        cnt = 0\n        for i in d.keys():\n            j = d[i]\n            if j % 2 != 0:\n                cnt += 1\n        print('NO' if cnt > 1 else 'YES')", "def check(a, b):\n    ca = Counter(a)\n    cb = Counter(b)\n    for i in ca:\n        if ca[i] > cb[i]:\n            return False\n    return True\n\ndef solve(c, leng):\n    cc = Counter(c)\n    o = 0\n    for i in cc.values():\n        if i % 2 == 1:\n            o += 1\n    if o > 1:\n        return 'NO'\n    else:\n        return 'YES'\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    if m < n:\n        (a, b) = (b, a)\n    c = a + b\n    from collections import Counter\n    if check(a, b) == False:\n        print('NO')\n    else:\n        ans = solve(c, len(c))\n        print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    if n < m:\n        (a, b) = (b, a)\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    ans = True\n    for i in b:\n        if i in d:\n            if d[i] == 0:\n                ans = False\n                break\n            d[i] -= 1\n        else:\n            ans = False\n            break\n    if not ans:\n        print('NO')\n    else:\n        cnt = 0\n        for i in d.keys():\n            j = d[i]\n            if j % 2 != 0:\n                cnt += 1\n        print('NO' if cnt > 1 else 'YES')", "from collections import Counter\n\ndef findin(a, b):\n    ca = Counter(a)\n    cb = Counter(b)\n    for i in ca:\n        if ca[i] > cb[i]:\n            return False\n    return True\n\ndef solve(c, n):\n    cnt = Counter(c)\n    v = cnt.values()\n    odds = 0\n    evens = 0\n    for i in v:\n        if i % 2 == 0:\n            evens += 1\n        else:\n            odds += 1\n    if odds > 1:\n        return 'NO'\n    else:\n        return 'YES'\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = input()\n    b = input()\n    if m < n:\n        (a, b) = (b, a)\n    if not findin(a, b):\n        print('NO')\n    else:\n        c = a + b\n        ans = solve(c, len(c))\n        print(ans)", "from collections import Counter\nt = int(input())\nwhile t:\n    (m, n) = list(map(int, input().split()))\n    a = list(input())\n    b = list(input())\n    if m > n:\n        count_a = Counter(a)\n        count_b = Counter(b)\n    else:\n        count_a = Counter(b)\n        count_b = Counter(a)\n    for (k, v) in count_b.items():\n        if count_a[k]:\n            count_b[k] -= min(v, count_a[k])\n            count_a[k] -= v\n    if sum(list(count_b.values())):\n        print('NO')\n        t -= 1\n        continue\n    else:\n        odd = 0\n        for (k, v) in count_a.items():\n            odd += v % 2\n        if odd > 1:\n            print('NO')\n            t -= 1\n            continue\n    print('YES')\n    t -= 1", "t = int(input())\nfor t in range(t):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    p = ''\n    q = ''\n    if len(a) > len(b):\n        p = a\n        q = b\n    else:\n        p = b\n        q = a\n    flag = 1\n    u = {}\n    v = {}\n    for i in p:\n        if i in u:\n            u[i] = u[i] + 1\n        else:\n            u[i] = 1\n    for i in q:\n        if i in v:\n            v[i] = v[i] + 1\n        else:\n            v[i] = 1\n    for i in v:\n        if u.get(i, 0) < v[i]:\n            flag = 0\n    for i in u:\n        if i in v:\n            u[i] = u[i] - v[i]\n    count_odd = 0\n    for i in u:\n        if u[i] % 2 != 0:\n            count_odd = count_odd + 1\n    if flag == 0:\n        print('NO')\n    elif count_odd > 1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor t in range(t):\n    (n, m) = map(int, input().split())\n    a = input()\n    b = input()\n    p = ''\n    q = ''\n    if len(a) > len(b):\n        p = a\n        q = b\n    else:\n        p = b\n        q = a\n    flag = 1\n    u = {}\n    v = {}\n    for i in p:\n        if i in u:\n            u[i] = u[i] + 1\n        else:\n            u[i] = 1\n    for i in q:\n        if i in v:\n            v[i] = v[i] + 1\n        else:\n            v[i] = 1\n    for i in v:\n        if u.get(i, 0) < v[i]:\n            flag = 0\n    for i in u:\n        if i in v:\n            u[i] = u[i] - v[i]\n    count_odd = 0\n    for i in u:\n        if u[i] % 2 != 0:\n            count_odd = count_odd + 1\n    if flag == 0:\n        print('NO')\n    elif count_odd > 1:\n        print('NO')\n    else:\n        print('YES')", "def solve():\n    (n, m) = map(int, input().split())\n    s1 = input()\n    s2 = input()\n    if len(s1) < len(s2):\n        (s1, s2) = (s2, s1)\n    (m1, m2) = ({}, {})\n    for i in s1:\n        if i not in m1:\n            m1[i] = 0\n        m1[i] += 1\n    for i in s2:\n        if i not in m2:\n            m2[i] = 0\n        m2[i] += 1\n    for i in m2.keys():\n        if i not in m1 or m1[i] < m2[i]:\n            print('NO')\n            return\n        m1[i] -= m2[i]\n    (o, e) = (0, 0)\n    for i in m1.keys():\n        if m1[i] % 2 == 1:\n            o += 1\n        else:\n            e += 1\n    if o <= 1:\n        print('YES')\n    else:\n        print('NO')\ntestcase = int(input())\nwhile testcase:\n    solve()\n    testcase -= 1"]