["import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = dict()\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        if a + b in c:\n            c[a + b] += 1\n        else:\n            c[a + b] = 1\n    fl = 1\n    for i in range(2, n + 1):\n        if i in c:\n            if c[i] == i - 1:\n                fl = 0\n                break\n    j = n + 1\n    k = n\n    for i in range(n - 1):\n        if j in c:\n            if c[j] == k:\n                fl = 0\n                break\n        j += 1\n        k -= 1\n    if fl == 0:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = dict()\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        if a + b in c:\n            c[a + b] += 1\n        else:\n            c[a + b] = 1\n    fl = 1\n    for i in range(2, n + 1):\n        if i in c:\n            if c[i] == i - 1:\n                fl = 0\n                break\n    j = n + 1\n    k = n\n    for i in range(n - 1):\n        if j in c:\n            if c[j] == k:\n                fl = 0\n                break\n        j += 1\n        k -= 1\n    if fl == 0:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    obs = []\n    for _ in range(n):\n        obs.append(tuple(map(int, input().split())))\n    obs.sort()\n    ans = 'YES'\n    check = False\n    for i in range(1, n):\n        if obs[i - 1][0] == 1 or obs[i - 1][1] == n:\n            check = True\n        if check:\n            if obs[i - 1][1] - obs[i][1] != 1:\n                check = False\n        if (obs[i][0] == n or obs[i][1] == 1) and check:\n            ans = 'NO'\n            break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    dic = {}\n    a = []\n    for i in range(n):\n        l1 = list(map(int, input().split()))\n        dic[l1[0]] = l1[1]\n        if l1[1] == 1:\n            a = l1\n    fl = 1\n    for i in range(a[0]):\n        if dic[a[0] - i] != i + 1:\n            fl = 0\n            break\n    if fl == 1:\n        print('NO')\n        continue\n    fl = 1\n    for i in range(n - dic[n] + 1):\n        if dic[n - i] != dic[n] + i:\n            fl = 0\n            break\n    if fl == 1:\n        print('NO')\n        continue\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = dict()\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        if a + b in c:\n            c[a + b] += 1\n        else:\n            c[a + b] = 1\n    fl = 1\n    for i in range(2, n + 1):\n        if i in c:\n            if c[i] == i - 1:\n                fl = 0\n                break\n    j = n + 1\n    k = n\n    for i in range(n - 1):\n        if j in c:\n            if c[j] == k:\n                fl = 0\n                break\n        j += 1\n        k -= 1\n    if fl == 0:\n        print('NO')\n    else:\n        print('YES')", "def sol(n, blocks):\n    blocks.sort()\n    top_left = -1\n    for i in range(1, n):\n        if blocks[i][1] == blocks[i - 1][1] - 1:\n            top_left = i\n        else:\n            break\n    bottom_right = -1\n    for i in range(n - 2, -1, -1):\n        if blocks[i][1] == blocks[i + 1][1] + 1:\n            bottom_right = i\n        else:\n            break\n    if top_left != -1 and blocks[top_left][1] == 1 or (bottom_right != -1 and blocks[bottom_right][1] == n):\n        return 'NO'\n    else:\n        return 'YES'\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    blocks = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        blocks.append(temp)\n    print(sol(n, blocks))\n    t = t - 1", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor _ in range(t):\n    n = int(stdin.readline())\n    dict_ = {}\n    for _ in range(n):\n        (a, b) = [int(i) for i in stdin.readline().split()]\n        dict_[a] = b\n    prev = (1, dict_[1] - 1)\n    flag = 0\n    for i in range(2, n + 1):\n        (a, b) = prev\n        prev_diff = b - a + 1\n        col = dict_[i]\n        if prev_diff == 1 and col == a:\n            flag = 1\n            break\n        if b <= col:\n            new = (1, col - 1)\n        elif a < col < b:\n            new = (1, n)\n        else:\n            new = (col + 1, n)\n        prev = new\n    if flag == 1:\n        print('NO')\n    elif prev[1] == n:\n        print('YES')\n    else:\n        print('NO')", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        if x + y in d.keys():\n            d[x + y] += 1\n        else:\n            d[x + y] = 1\n    for (k, v) in d.items():\n        if k > n + 1:\n            k = 2 * n + 2 - k\n        if k - 1 == v:\n            print('NO')\n            break\n    else:\n        print('YES')", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef subHelper(data, n, ind):\n    x = data[ind][0]\n    y = data[ind][1]\n    if x == 1:\n        req = y - 1\n    else:\n        req = n - x\n    ind += 1\n    while req > 0 and ind < n:\n        if data[ind][0] == x + 1 and data[ind][1] == y - 1:\n            req -= 1\n            x = data[ind][0]\n            y = data[ind][1]\n            ind += 1\n        else:\n            return False\n    if req == 0:\n        return True\n    return False\n\ndef helper(data, n):\n    for i in range(n):\n        if data[i][0] == 1 or data[i][1] == n:\n            if subHelper(data, n, i):\n                return True\n    return False\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        data = []\n        for i in range(n):\n            data.append(get_list())\n        data.sort()\n        if helper(data, n):\n            get_print('NO')\n        else:\n            get_print('YES')\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    li = sorted([list(map(int, input().split())) for i in range(n)])\n    k = li[0][0] + li[0][1]\n    for i in range(n):\n        if sum(li[i]) != k:\n            break\n        a = li[i][1]\n    k = sum(li[n - 1])\n    for i in reversed(range(n)):\n        if sum(li[i]) != k:\n            break\n        b = li[i][1]\n    print('NO') if a == 1 or b == n else print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    li = []\n    for i in range(n):\n        (p, q) = map(int, input().split())\n        li.append([p, q])\n    li.sort()\n    k = li[0][0] + li[0][1]\n    for i in range(n):\n        if sum(li[i]) != k:\n            break\n        a = li[i][1]\n    k = sum(li[n - 1])\n    for i in range(n - 1, -1, -1):\n        if sum(li[i]) != k:\n            break\n        b = li[i][1]\n    if a == 1 or b == n:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().strip())):\n        N = int(stdin.readline().rstrip())\n        Y = [0] * N\n        for _ in range(N):\n            (x, y) = map(int, stdin.readline().rstrip().split())\n            Y[x - 1] = y\n        pos = 1\n        ranges = [(1, Y[0])]\n        _pass = 0\n        for y in Y[1:]:\n            if _pass:\n                continue\n            if y > pos:\n                if y < N and ranges[0][1] - 1 > y:\n                    ranges = [(pos, y), (y + 1, N + 1)]\n                else:\n                    tmp = 0\n                    if ranges[-1][1] - 1 > y:\n                        tmp = (max(ranges[-1][0], y + 1), N + 1)\n                    ranges = [(pos, y)]\n                    if tmp:\n                        ranges.append(tmp)\n            elif y < pos:\n                continue\n            elif y < ranges[0][1] - 1:\n                ranges = [(max(y + 1, ranges[0][0]), N + 1)]\n                pos = ranges[0][0]\n            elif y < ranges[-1][1] - 1:\n                ranges = [(max(y + 1, ranges[-1][0]), N + 1)]\n                pos = ranges[0][0]\n            else:\n                found = 0\n                for (i, j) in ranges:\n                    if y + 1 in range(i, j):\n                        pos = y + 1\n                        ranges = [(pos, N + 1)]\n                        found = 1\n                        break\n                if not found:\n                    _pass = 1\n                    continue\n        ans = 'NO'\n        if not _pass:\n            for (i, j) in ranges:\n                if N in range(i, j):\n                    ans = 'YES'\n        print(ans)\nsolve()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = defaultdict(list)\n    flag = 1\n    for i in range(n):\n        (l, k) = map(int, input().split())\n        if l + k in arr:\n            arr[l + k] += 1\n        else:\n            arr[l + k] = 1\n    for i in arr:\n        if i < n + 1:\n            if i - 1 == arr[i]:\n                flag = 0\n                break\n        elif 2 * n - i + 1 == arr[i]:\n            flag = 0\n            break\n    print('YES') if flag else print('NO')", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    points.sort(key=lambda x: x[0])\n    flag = True\n    seq = []\n    seq_start = 0\n    for i in range(1, n):\n        if flag and points[i][1] - points[i - 1][1] == -1 and (points[i][0] - points[i - 1][0] == 1):\n            continue\n        if flag:\n            seq.append([seq_start, i - 1])\n            seq_start = i\n    seq.append([seq_start, n - 1])\n    for sequence in seq:\n        if points[sequence[0]][0] + points[sequence[1]][1] == 2:\n            break\n        if points[sequence[0]][1] + points[sequence[1]][0] == 2 * n:\n            break\n    else:\n        print('YES')\n        continue\n    print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        val = y - 1\n        if x + val <= n:\n            if d.get(x + val) is None:\n                d[x + val] = 1\n            else:\n                d[x + val] += 1\n        else:\n            val = y - (n - x)\n            if d.get(n + val - 1) is None:\n                d[n + val - 1] = 1\n            else:\n                d[n + val - 1] += 1\n    flag = True\n    for i in range(2, n + 1):\n        if d.get(i) is not None and d[i] == i:\n            flag = False\n            break\n    k = n - 1\n    for i in range(n + 1, n + n - 1):\n        if d.get(i) is not None and d[i] == k:\n            flag = False\n            break\n        k -= 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        val = y - 1\n        if x + val <= n:\n            if d.get(x + val) is None:\n                d[x + val] = 1\n            else:\n                d[x + val] += 1\n        else:\n            val = y - (n - x)\n            if d.get(n + val - 1) is None:\n                d[n + val - 1] = 1\n            else:\n                d[n + val - 1] += 1\n    flag = True\n    for i in range(2, n + 1):\n        if d.get(i) is not None and d[i] == i:\n            flag = False\n            break\n    k = n - 1\n    for i in range(n + 1, n + n - 1):\n        if d.get(i) is not None and d[i] == k:\n            flag = False\n            break\n        k -= 1\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    a = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append([x, y])\n    a.sort(key=lambda x: -x[1])\n    i = 0\n    reach = False\n    while i < n:\n        if a[i][0] == 1 or a[i][1] == n:\n            j = i + 1\n            x = a[i][0]\n            y = a[i][1]\n            while j < n:\n                x += 1\n                y -= 1\n                if a[j][0] == x and a[j][1] == y:\n                    pass\n                else:\n                    break\n                if a[j][0] == n or a[j][1] == 1:\n                    reach = True\n                j += 1\n            if reach:\n                break\n            i = j\n        i += 1\n    if reach:\n        print('NO')\n    else:\n        print('YES')", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    blocks = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        blocks.append([x, y])\n    blocks.sort()\n    TopLeft = -1\n    BottomRight = -1\n    for i in range(1, n):\n        if blocks[i][1] == blocks[i - 1][1] - 1:\n            TopLeft = i\n        else:\n            break\n    for i in range(n - 2, -1, -1):\n        if blocks[i][1] == blocks[i + 1][1] + 1:\n            BottomRight = i\n        else:\n            break\n    if TopLeft != -1 and blocks[TopLeft][1] == 1 or (BottomRight != -1 and blocks[BottomRight][1] == n):\n        print('NO')\n    else:\n        print('YES')", "def solve(arr):\n    arr.sort(key=lambda x: x[0])\n    TopTOLeft = -1\n    BottomToRight = -1\n    for i in range(1, len(arr)):\n        if arr[i][1] == arr[i - 1][1] - 1:\n            TopTOLeft = i\n        else:\n            break\n    for i in range(len(arr) - 2, -1, -1):\n        if arr[i][1] == arr[i + 1][1] + 1:\n            BottomToRight = i\n        else:\n            break\n    if TopTOLeft != -1 and arr[TopTOLeft][1] == 1 or (BottomToRight != -1 and arr[BottomToRight][1] == len(arr)):\n        print('NO')\n    else:\n        print('YES')\n\ndef main():\n    for i in range(int(input())):\n        arr = []\n        n = int(input())\n        for i in range(n):\n            a = list(map(int, input().split()))\n            arr.append(a)\n        solve(arr)\nmain()", "for i in range(int(input())):\n    n = int(input())\n    dict = {}\n    for i in range(2, n + n + 1):\n        dict[i] = 0\n    for i in range(n):\n        (j, k) = map(int, input().split())\n        dict[j + k] = dict[j + k] + 1\n    flag = 1\n    for i in range(2, n + 2):\n        if dict[i] >= i - 1:\n            flag = 0\n    x = n - 1\n    for i in range(n + 2, n + n + 1):\n        if dict[i] >= x:\n            flag = 0\n        x = x - 1\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = dict()\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        if a + b in c:\n            c[a + b] += 1\n        else:\n            c[a + b] = 1\n    fl = 1\n    for i in range(2, n + 1):\n        if i in c:\n            if c[i] == i - 1:\n                fl = 0\n                break\n    j = n + 1\n    k = n\n    for i in range(n - 1):\n        if j in c:\n            if c[j] == k:\n                fl = 0\n                break\n        j += 1\n        k -= 1\n    if fl == 0:\n        print('NO')\n    else:\n        print('YES')", "def sol(d, n):\n    i = 1\n    while d[i] == d[i + 1] + 1:\n        i += 1\n        if i == n:\n            break\n    if d[i] == 1:\n        return 'NO'\n    i = n\n    while d[i] == d[i - 1] - 1:\n        i -= 1\n        if i == 1:\n            break\n    if d[i] == n:\n        return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(n):\n        (X, Y) = map(int, input().split())\n        d[Y] = X\n    print(sol(d, n))", "def process(N, blocks):\n    flag = True\n    for i in range(3, N + 2):\n        if i in blocks and blocks[i] == i - 1:\n            return 'NO'\n    k = N - 1\n    for i in range(2 + N, 2 * N):\n        if i in blocks and blocks[i] == k:\n            return 'NO'\n        k -= 1\n    return 'YES'\nfor _ in range(int(input())):\n    N = int(input())\n    blocks = {}\n    for __ in range(N):\n        (x, y) = map(int, input().split())\n        if x + y in blocks:\n            blocks[x + y] += 1\n        else:\n            blocks[x + y] = 1\n    print('NO' if N == 2 else process(N, blocks))", "for _ in range(int(input())):\n    n = int(input())\n    xd = [0] * (2 * n)\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        xd[x + y] += 1\n    ans = 'YES'\n    for i in range(3, n + 2):\n        if xd[i] == i - 1:\n            ans = 'NO'\n            break\n    if ans == 'YES':\n        s = n - 1\n        for i in range(n + 2, 2 * n):\n            if xd[i] == s:\n                ans = 'NO'\n                break\n            s -= 1\n    print(ans)", "import math\nfrom heapq import heappush, heappop, heapify\nimport random\nimport string\nfrom collections import deque\nfrom bisect import bisect, bisect_left, bisect_right, insort\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nH = 1000000000 + 7\nfor _ in range(I()):\n    n = I()\n    d = {}\n    p = []\n    for i in range(n):\n        (a, b) = M()\n        d[a, b] = 1\n        p.append((a, b))\n    p.sort(key=lambda x: x[1])\n    f1 = f2 = 1\n    (i, j) = (p[0][0], p[0][1])\n    t = 0\n    while t < n and 1 <= j <= n and (1 <= i <= n):\n        if p[t][0] != i or p[t][1] != j:\n            f1 = 0\n            break\n        else:\n            t += 1\n        i -= 1\n        j += 1\n    (i, j) = (p[-1][0], p[-1][1])\n    t = n - 1\n    while t >= 0 and 1 <= j <= n and (1 <= i <= n):\n        if p[t][0] != i or p[t][1] != j:\n            f2 = 0\n            break\n        else:\n            t -= 1\n        i += 1\n        j -= 1\n    if f1 == f2 == 0:\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin\nfor i in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    h = {}\n    for j in range(n):\n        (x, y) = map(int, stdin.readline().split())\n        if x + y not in h:\n            h[x + y] = 1\n        else:\n            h[x + y] += 1\n    flag = 1\n    for g in h.keys():\n        if g <= n + 1 and h[g] == g - 1:\n            flag = 0\n        if g > n + 1 and h[g] == 2 * n + 1 - g:\n            flag = 0\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        b = [x, y]\n        a.append(b)\n    a.sort()\n    x = -(10 ** 9 + 7)\n    for i in range(1, n):\n        if a[i][1] == a[i - 1][1] - 1:\n            x = i\n        else:\n            break\n    y = -(10 ** 9 + 7)\n    for i in range(n - 2, -1, -1):\n        if a[i][1] == a[i + 1][1] + 1:\n            y = i\n        else:\n            break\n    if 0 <= x and x < n and (a[x][1] == 1) or (0 <= y and y < n and (a[y][1] == n)):\n        print('NO')\n    else:\n        print('YES')", "for t in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        b = [x, y]\n        a.append(b)\n    a.sort()\n    x = -(10 ** 9 + 7)\n    for i in range(1, n):\n        if a[i][1] == a[i - 1][1] - 1:\n            x = i\n        else:\n            break\n    y = -(10 ** 9 + 7)\n    for i in range(n - 2, -1, -1):\n        if a[i][1] == a[i + 1][1] + 1:\n            y = i\n        else:\n            break\n    if 0 <= x and x < n and (a[x][1] == 1) or (0 <= y and y < n and (a[y][1] == n)):\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for __ in range(n):\n        (x, y) = map(int, input().split())\n        a.append([x, y])\n    a.sort()\n    row = 1\n    col = n\n    d = {}\n    for i in range(n):\n        num = a[i][1] - col\n        if num not in d:\n            d[num] = 0\n        d[num] += 1\n        row += 1\n        col -= 1\n    ans = 1\n    for (k, v) in d.items():\n        if abs(k) + v == n:\n            ans = 0\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = dict()\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        if a + b in c:\n            c[a + b] += 1\n        else:\n            c[a + b] = 1\n    fl = 1\n    for i in range(2, n + 1):\n        if i in c:\n            if c[i] == i - 1:\n                fl = 0\n                break\n    j = n + 1\n    k = n\n    for i in range(n - 1):\n        if j in c:\n            if c[j] == k:\n                fl = 0\n                break\n        j += 1\n        k -= 1\n    if fl == 0:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    obs = {}\n    for _ in range(n):\n        (x, y) = input().split()\n        (x, y) = (int(x), int(y))\n        if x + y - 2 in obs:\n            obs[x + y - 2] += 1\n        else:\n            obs[x + y - 2] = 1\n    for i in obs.keys():\n        if i <= n - 1:\n            if obs[i] == i + 1:\n                print('NO')\n                break\n        if i > n - 1:\n            if obs[i] == n - 1 - (i - n):\n                print('NO')\n                break\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    obs = {}\n    for _ in range(n):\n        (x, y) = input().split()\n        (x, y) = (int(x), int(y))\n        if x + y - 2 in obs:\n            obs[x + y - 2] += 1\n        else:\n            obs[x + y - 2] = 1\n    for i in obs.keys():\n        if i <= n - 1:\n            if obs[i] == i + 1:\n                sys.stdout.write('NO\\n')\n                break\n        if i > n - 1:\n            if obs[i] == n - 1 - (i - n):\n                sys.stdout.write('NO\\n')\n                break\n    else:\n        sys.stdout.write('YES\\n')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        arr.append((x, y))\n    arr.sort()\n    flag1 = False\n    for i in range(n):\n        if arr[i][0] == 1 or arr[i][1] == n:\n            x = arr[i][0]\n            y = arr[i][1]\n            k = i + 1\n            flag2 = False\n            for j in range(arr[i][1] - arr[i][0]):\n                if arr[k] == (x + 1, y - 1):\n                    x += 1\n                    y -= 1\n                    k += 1\n                    continue\n                else:\n                    flag2 = True\n                    break\n            if flag2 == False:\n                flag1 = True\n                break\n    if flag1 == False:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfrom collections import defaultdict\nins = lambda : sys.stdin.readline().strip()\ninarr = lambda s: list(map(s, sys.stdin.readline().strip().split()))\nouts = lambda n: sys.stdout.write(str(n) + '\\n')\noutarr = lambda li: sys.stdout.write(' '.join(map(str, li)) + '\\n')\ngcd = lambda a, b: b if a == 0 else gcd(b % a, a)\n\ndef solve():\n    n = int(ins())\n    d = defaultdict(int)\n    for __ in range(n):\n        (x, y) = inarr(int)\n        d[x + y] += 1\n    for i in range(2, n + 1):\n        if d[i] == i - 1:\n            outs('NO')\n            return\n    diagonal_size = n\n    for i in range(n + 1, 2 * n):\n        if d[i] == diagonal_size:\n            print('NO')\n            return\n        diagonal_size -= 1\n    outs('YES')\nt = int(ins())\nfor _ in range(t):\n    solve()", "for t in range(int(input())):\n    N = int(input())\n    arr = [tuple(map(int, input().split())) for i in range(N)]\n    mp = {}\n    flag = False\n    for (i, j) in arr:\n        if i + j in mp:\n            mp[i + j] += 1\n        else:\n            mp[i + j] = 1\n        if i + j > N + 1:\n            if mp[i + j] == 2 * N - i - j + 1:\n                flag = True\n                break\n        elif mp[i + j] == i + j - 1:\n            flag = True\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "import sys\nfrom collections import defaultdict\nins = lambda : sys.stdin.readline().strip()\ninarr = lambda s: list(map(s, sys.stdin.readline().strip().split()))\nouts = lambda n: sys.stdout.write(str(n) + '\\n')\noutarr = lambda li: sys.stdout.write(' '.join(map(str, li)) + '\\n')\ngcd = lambda a, b: b if a == 0 else gcd(b % a, a)\n\ndef solve():\n    n = int(ins())\n    d = defaultdict(int)\n    for __ in range(n):\n        (x, y) = inarr(int)\n        d[x + y] += 1\n    for i in range(2, n + 1):\n        if d[i] == i - 1:\n            outs('NO')\n            return\n    diagonal_size = n\n    for i in range(n + 1, 2 * n):\n        if d[i] == diagonal_size:\n            print('NO')\n            return\n        diagonal_size -= 1\n    outs('YES')\nt = int(ins())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    bound = []\n    ans = 0\n    for q in range(n):\n        (a, b) = map(int, input().split())\n        arr.append([a - 1, b - 1])\n        if a == 1 or b == 1 or a == n or (b == n):\n            bound.append([a - 1, b - 1])\n    i = 0\n    if n == 2:\n        if [0, 1] in bound and [1, 0] in bound:\n            print('NO')\n        else:\n            print('YES')\n    elif [1, 0] in bound and [0, 1] in bound or ([n - 1, n - 2] in bound and [n - 2, n - 1] in bound):\n        print('NO')\n    else:\n        arr = sorted(arr)\n        while i + 1 < len(arr):\n            x = arr[i][0]\n            y = arr[i][1]\n            nx = arr[i + 1][0]\n            ny = arr[i + 1][1]\n            if nx == 1 + x and ny + 1 == y:\n                st = i\n                while i < len(arr) and nx == 1 + x and (ny + 1 == y):\n                    i += 1\n                    x = arr[i][0]\n                    y = arr[i][1]\n                    try:\n                        nx = arr[i + 1][0]\n                        ny = arr[i + 1][1]\n                    except:\n                        break\n                end = i\n                if arr[st] in bound and arr[end] in bound:\n                    ans = 1\n                    break\n            else:\n                i += 1\n        if ans == 1:\n            print('NO')\n        else:\n            print('YES')", "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\nlogging.basicConfig(format='%(message)s', level=logging.WARNING)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\nfrom collections import defaultdict\nfrom math import ceil\nfor _ in range(*maps()):\n    (n,) = maps()\n    d = defaultdict(int)\n    r1 = c1 = r2 = c2 = None\n    for i in range(n):\n        (x, y) = maps()\n        if x == 1:\n            (r1, c1) = (x, y)\n        if y == n:\n            (r2, c2) = (x, y)\n        d[x, y] += 1\n    ok1 = ok2 = True\n    cc = c1\n    for i in range(cc):\n        if not d[r1, c1]:\n            ok1 = False\n        r1 += 1\n        c1 -= 1\n    cc = n - r2 + 1\n    for i in range(cc):\n        if not d[r2, c2]:\n            ok2 = False\n        r2 += 1\n        c2 -= 1\n    print('NO') if ok1 or ok2 else print('YES')", "from sys import stdin\ninput = stdin.readline\n\ndef down(i, j):\n    count = 0\n    while i <= n and j > 0 and pos.get((i, j), False):\n        count += 1\n        (i, j) = (i + 1, j - 1)\n    return count\n\ndef up(i, j):\n    count = 0\n    while i > 0 and j <= n and pos.get((i, j), False):\n        count += 1\n        (i, j) = (i - 1, j + 1)\n    return count\n\ndef answer():\n    count1 = down(root1[0], root1[1])\n    value1 = root1[1]\n    count2 = up(root2[0], root2[1])\n    value2 = n + 1 - root2[1]\n    if count1 == value1 or count2 == value2:\n        return 'NO'\n    return 'YES'\nfor T in range(int(input())):\n    n = int(input())\n    pos = dict()\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        pos[x, y] = True\n        if x == 1:\n            root1 = [x, y]\n        if x == n:\n            root2 = [x, y]\n    print(answer())", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(10 ** 7)\n\ndef dfs1(i, j):\n    if i > n or j <= 0:\n        return 0\n    if pos.get((i + 1, j - 1), False):\n        return dfs1(i + 1, j - 1) + 1\n    return 1\n\ndef dfs2(i, j):\n    if i <= 0 or j > n:\n        return 0\n    if pos.get((i - 1, j + 1), False):\n        return dfs2(i - 1, j + 1) + 1\n    return 1\n\ndef answer():\n    count1 = dfs1(root1[0], root1[1])\n    value1 = root1[1]\n    count2 = dfs2(root2[0], root2[1])\n    value2 = n + 1 - root2[1]\n    if count1 == value1 or count2 == value2:\n        return 'NO'\n    return 'YES'\nfor T in range(int(input())):\n    n = int(input())\n    pos = dict()\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        pos[x, y] = True\n        if x == 1:\n            root1 = [x, y]\n        if x == n:\n            root2 = [x, y]\n    print(answer())", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    d = dict()\n    for i in range(n):\n        (j, k) = map(int, input().split())\n        if j + k not in d:\n            d[j + k] = 1\n        else:\n            d[j + k] += 1\n    n += 1\n    flag = 0\n    for (i, j) in d.items():\n        if j == i - 1:\n            print('NO')\n            flag = 1\n            break\n        elif i > n and j == n + n - i - 1:\n            print('NO')\n            flag = 1\n            break\n    if flag == 0:\n        print('YES')", "from collections import *\nfrom sys import *\ninput = stdin.readline\nfor u in range(int(input())):\n    n = int(input())\n    f = 0\n    d = defaultdict(int)\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        d[x + y] += 1\n    for i in d:\n        if i != 2 and i != n + n:\n            if d[i] == i - 1 or d[i] + i == 1 + 2 * n:\n                f = 1\n                break\n    if f == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\nfrom collections import defaultdict as dd\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdmap = lambda : map(int, stdstr().split())\nstdarr = lambda : list(map(int, stdstr().split()))\nmod = 1000000007\nfor _ in range(stdint()):\n    n = stdint()\n    c = Counter()\n    top = [-1, -1]\n    end = [-1, -1]\n    for i in range(n):\n        (y, x) = stdmap()\n        c[y, x] += 1\n        if y == 1:\n            top = [y, x]\n        elif x == n:\n            end = [y, x]\n    blocked = True\n    while top[0] <= n and top[1] > 0:\n        if c[tuple(top)] > 0:\n            top[0] += 1\n            top[1] -= 1\n        else:\n            blocked = False\n            break\n    if not blocked and end[0] != -1 and (end[1] != -1):\n        blocked1 = True\n        while end[0] <= n and end[1] > 0:\n            if c[tuple(end)] > 0:\n                end[0] += 1\n                end[1] -= 1\n            else:\n                blocked1 = False\n                break\n        blocked |= blocked1\n    if blocked:\n        print('NO')\n    else:\n        print('YES')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    d = defaultdict(int)\n    for _ in range(n):\n        (x, y) = map(int, input().split())\n        d[x + y] = d[x + y] + 1\n    ans = True\n    for i in range(3, 2 * n):\n        if i <= n + 1:\n            if d[i] == i - 1:\n                ans = False\n                break\n        elif d[i] == n - i % n + 1:\n            ans = False\n            break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    flag = 0\n    ref = list(map(int, '0' * (2 * n + 1)))\n    for i in range(n):\n        l.append(sum(map(int, input().split())))\n    for i in range(n):\n        ref[l[i]] += 1\n    for i in range(2, n + 2):\n        if ref[i] == i - 1:\n            flag = 1\n            break\n    for i in range(n + 2, 2 * n):\n        if ref[i] == n - i % n + 1:\n            flag = 1\n            break\n    print('NO' if flag else 'YES')", "def max_diag_len(coord_sum, n):\n    if coord_sum <= n + 1:\n        return coord_sum - 1\n    else:\n        return 2 * n - coord_sum + 1\n\ndef main():\n    t = int(input())\n    for case_idx in range(t):\n        n = int(input())\n        coord_sums = [0] * (2 * n)\n        can_cross = True\n        for coord_idx in range(n):\n            (i, j) = [int(x) for x in input().split()]\n            coord_sums[i + j] += 1\n            if coord_sums[i + j] >= max_diag_len(i + j, n):\n                can_cross = False\n        if can_cross:\n            print('YES')\n        else:\n            print('NO')\nmain()", "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\nlogging.basicConfig(format='%(message)s', level=logging.WARNING)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\nfrom collections import defaultdict\nfrom math import ceil\nfor _ in range(*maps()):\n    (n,) = maps()\n    (arr, cnt1, cnt2) = ([], 0, 0)\n    diags = 0\n    d = defaultdict(int)\n    (r1, c1) = (None, None)\n    (r2, c2) = (None, None)\n    for i in range(n):\n        (x, y) = maps()\n        if x == 1 and y == 2 or (x == 2 and y == 1):\n            cnt1 += 1\n        if x == n and y == n - 1 or (x == n - 1 and y == n):\n            cnt2 += 1\n        if x == 1:\n            (r1, c1) = (x, y)\n        if y == n:\n            (r2, c2) = (x, y)\n        arr.append([x, y])\n        d[x, y] += 1\n    if cnt1 == 2 or cnt2 == 2:\n        print('NO')\n        continue\n    ok1 = True\n    ok2 = True\n    (C1, C2) = (0, 0)\n    cc = c1\n    for i in range(cc):\n        if d[r1, c1]:\n            C1 += 1\n        else:\n            ok1 = False\n        r1 += 1\n        c1 -= 1\n    cc = n - r2 + 1\n    for i in range(cc):\n        if d[r2, c2]:\n            C2 += 1\n        else:\n            ok2 = False\n        r2 += 1\n        c2 -= 1\n    if ok1 or ok2:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    row = [0] * (n + 1)\n    for i in range(n):\n        (x, y) = list(map(int, input().split()))\n        row[x] = y\n    f = 0\n    strt = row[n]\n    for i in range(n - 1, 0, -1):\n        if row[i] == strt + 1:\n            strt += 1\n            if strt == n:\n                f = 1\n                break\n        else:\n            break\n    strt = row[1]\n    for i in range(2, n + 1):\n        if strt - 1 == row[i]:\n            strt -= 1\n            if strt == 1:\n                f = 1\n                break\n        else:\n            break\n    if f:\n        print('NO')\n        continue\n    print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(tuple(map(int, input().split())))\n    arr.sort()\n    flag = 1\n    ans = 'YES'\n    for i in range(1, n):\n        if arr[i][0] - arr[i - 1][0] == 0:\n            pass\n        elif (arr[i][1] - arr[i - 1][1]) / (arr[i][0] - arr[i - 1][0]) not in [1.0, -1.0]:\n            flag = 0\n        if flag == 1:\n            if arr[i][1] == 1:\n                ans = 'NO'\n        if flag == 1 and i == n - 1:\n            ans = 'NO'\n    arr = arr[::-1]\n    flag = 1\n    for i in range(1, n):\n        if arr[i][0] - arr[i - 1][0] == 0:\n            pass\n        elif (arr[i][1] - arr[i - 1][1]) / (arr[i][0] - arr[i - 1][0]) not in [1.0, -1.0]:\n            flag = 0\n        if flag == 1:\n            if arr[i][1] == n:\n                ans = 'NO'\n        if flag == 1 and i == n - 1:\n            ans = 'NO'\n    print(ans)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    points = []\n    for i in range(n):\n        points.append(list(map(int, input().split())))\n    points.sort(key=lambda x: x[0])\n    flag = True\n    seq = []\n    seq_start = 0\n    for i in range(1, n):\n        if flag and points[i][1] - points[i - 1][1] == -1 and (points[i][0] - points[i - 1][0] == 1):\n            continue\n        if flag:\n            seq.append([seq_start, i - 1])\n            seq_start = i\n    seq.append([seq_start, n - 1])\n    for sequence in seq:\n        if points[sequence[0]][0] + points[sequence[1]][1] == 2:\n            break\n        if points[sequence[0]][1] + points[sequence[1]][0] == 2 * n:\n            break\n    else:\n        print('YES')\n        continue\n    print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    temp = {}\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        if int(x + y) in temp:\n            temp[x + y] += 1\n        else:\n            temp[x + y] = 1\n    flag = 0\n    if n > 2:\n        for i in range(3, 2 * n):\n            if i in temp and temp[i] == min(i - 1, 2 * n - i + 1):\n                print('NO')\n                flag = 1\n                break\n        if flag == 0:\n            print('YES')\n    elif temp[3] == 2:\n        print('NO')\n    else:\n        print('YES')", "from collections import defaultdict\nfor t in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    d = defaultdict(int)\n    for a in l:\n        k = a[0] + a[1]\n        d[k] += 1\n    c = 2\n    for k in range(3, n * 2):\n        if d[k] == c:\n            print('NO')\n            break\n        if k > n:\n            c -= 1\n        else:\n            c += 1\n    else:\n        print('YES')", "t = int(input())\n\ndef f(tup):\n    return tup[0]\nfor _ in range(t):\n    n = int(input())\n    blocks = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        blocks.append((a, b))\n    blocks.sort(key=f)\n    start = True\n    no = False\n    for i in range(1, n):\n        if start:\n            if blocks[i][1] + 1 == blocks[i - 1][1]:\n                if blocks[i][0] == n or blocks[i][1] == 1:\n                    no = True\n                    break\n            else:\n                start = False\n        if blocks[i][1] == n:\n            start = True\n    if no:\n        print('NO')\n    else:\n        print('YES')", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\nfrom collections import defaultdict as dd\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdmap = lambda : map(int, stdstr().split())\nstdarr = lambda : list(map(int, stdstr().split()))\nmod = 1000000007\nfor _ in range(stdint()):\n    n = stdint()\n    c = Counter()\n    top = [-1, -1]\n    end = [-1, -1]\n    for i in range(n):\n        (y, x) = stdmap()\n        c[y, x] += 1\n        if y == 1:\n            top = [y, x]\n        elif x == n:\n            end = [y, x]\n    blocked = True\n    while top[0] <= n and top[1] > 0:\n        if c[tuple(top)] > 0:\n            top[0] += 1\n            top[1] -= 1\n        else:\n            blocked = False\n            break\n    if not blocked and end[0] != -1 and (end[1] != -1):\n        blocked1 = True\n        while end[0] <= n and end[1] > 0:\n            if c[tuple(end)] > 0:\n                end[0] += 1\n                end[1] -= 1\n            else:\n                blocked1 = False\n                break\n        blocked |= blocked1\n    if blocked:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a.append([x - 1, y - 1])\n    a.sort()\n    z = 1\n    r = 0\n    k = a[0][1]\n    for i in range(n):\n        if a[i][1] == k:\n            pass\n        else:\n            z = 0\n        k -= 1\n        if k < 0:\n            break\n    z1 = 1\n    k = a[n - 1][1]\n    r1 = 0\n    for i in range(n - 1, -1, -1):\n        if a[i][1] == k:\n            pass\n        else:\n            z1 = 0\n        k += 1\n        if k >= n:\n            break\n    if z == 0 and z1 == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfor t in range(int(input())):\n    n = int(input())\n    d = set()\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        d.add((a, b))\n    t = False\n    for j in range(2, n + 1):\n        if (1, j) in d:\n            flag = 1\n            i = 1\n            k = j\n            while flag:\n                if k == 0:\n                    t = True\n                    break\n                elif (i, k) not in d:\n                    break\n                else:\n                    i += 1\n                    k -= 1\n            break\n    if t:\n        print('NO')\n    else:\n        for i in range(1, n):\n            if (i, n) in d:\n                j = i\n                k = n\n                while 1:\n                    if j > n:\n                        t = True\n                        break\n                    elif (j, k) not in d:\n                        break\n                    else:\n                        j += 1\n                        k -= 1\n                break\n        if t:\n            print('NO')\n        else:\n            print('YES')", "def func3(n):\n    fm = [0 for i in range(2 * n)]\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        r = x + y\n        fm[r] += 1\n    l = 3\n    r = 2 * n - 1\n    c = 2\n    while l <= r:\n        if fm[l] == c or fm[r] == c:\n            print('NO')\n            return\n        else:\n            l += 1\n            r -= 1\n            c += 1\n    print('YES')\n    return\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    func3(n)", "def main():\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        fmap = [0 for i in range(2 * n)]\n        for i in range(n):\n            c = input().split()\n            row = int(c[0])\n            col = int(c[1])\n            fmap[row + col] += 1\n        left = 3\n        right = 2 * n - 1\n        val = 2\n        ans = False\n        while left <= right:\n            if fmap[left] == val or fmap[right] == val:\n                ans = True\n                break\n            else:\n                left += 1\n                right -= 1\n                val += 1\n        if ans:\n            print('NO')\n        else:\n            print('YES')\n        t -= 1\nmain()", "import io, os, heapq, sys\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        ans = 'YES'\n        N = int(input())\n        diags = {r: r for r in range(1, N + 1)}\n        for c in range(2, N + 1):\n            diags[N + c - 1] = N - c + 1\n        for __ in range(N):\n            (x, y) = [int(x) for x in input().split()]\n            b = y + x - 1\n            diags[b] -= 1\n            if diags[b] <= 0:\n                ans = 'NO'\n        print(ans)\nmain()", "from functools import lru_cache\nimport sys\nimport math\nfrom collections import Counter, deque\nmod = 10 ** 9 + 7\ninf = float('inf')\n\ndef arrInt():\n    return list(map(int, input().split()))\n\ndef solve(n, blocks):\n\n    def inBounds(i, j):\n        return 1 <= i <= n and 1 <= j <= n\n    Q = deque()\n    visisted = set()\n    for j in range(1, n + 1):\n        if (1, j) in blocks:\n            Q.append((1, j))\n        if (j, n) in blocks:\n            Q.append((j, n))\n    for (i, j) in Q:\n        to = (i, j)\n        while to in blocks:\n            to = (to[0] + 1, to[1] - 1)\n            if not inBounds(*to):\n                return 0\n    return 1\nTESTING = False\nif TESTING:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nelse:\n    input = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    blocks = set()\n    for _ in range(n):\n        (a, b) = arrInt()\n        blocks.add((a, b))\n    ans = solve(n, blocks)\n    res = ['NO', 'YES']\n    print(res[ans])", "import sys\nsys.setrecursionlimit(1000000)\nfrom functools import lru_cache\ninput = lambda : sys.stdin.readline().strip()\n\ndef dfs(x, y):\n    if x == 1 or y == n:\n        return True\n    for (dx, dy) in ((0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, 1), (1, -1), (-1, -1)):\n        if 1 <= x + dx <= n and 1 <= y + dy <= n and ((x + dx, y + dy) in blocks) and ((x + dx, y + dy) not in vis):\n            vis.add((x + dx, y + dy))\n            if dfs(x + dx, y + dy):\n                return True\n    return False\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    blocks = set()\n    vis = set()\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        blocks.add((x, y))\n    ok = True\n    for i in range(2, n + 1):\n        if (i, 1) in blocks and (i, 1) not in vis and dfs(i, 1):\n            vis.add((i, 1))\n            ok = False\n            break\n        if (n, n - i + 1) in blocks and (n, n - i + 1) not in vis and dfs(n, n - i + 1):\n            ok = False\n            break\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    N = int(input())\n    ans = True\n    G = [0] * (2 * N - 3)\n    for i in range(N):\n        (X, Y) = map(int, input().split())\n        if ans:\n            j = X + Y - 3\n            G[j] += 1\n            if G[j] == N - abs(X + Y - N - 1):\n                ans = False\n    print('YES' if ans else 'NO')", "from collections import Counter\nimport sys\nfrom collections import defaultdict as dd\nfrom math import *\n\ndef vinp():\n    return map(int, input().split())\n\ndef linp():\n    return list(map(int, input().split()))\n\ndef sinp():\n    return input()\n\ndef inp():\n    return int(input())\n\ndef mod(f):\n    return f % 1000000007\n\ndef pr(*x):\n    print(*x)\n\ndef finp():\n    f = open('input.txt', 'r')\n    f = f.read().split('\\n')\n    return f\n\ndef finp():\n    f = open('input.txt', 'r')\n    f = f.read().split('\\n')\n    return f\n\ndef fout():\n    return open('output.txt', 'w')\n\ndef fpr(f, x):\n    f.write(x + '\\n')\n\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\n\ndef indc(l, n):\n    c = {}\n    for i in range(n):\n        c[l[i]] = c.get(l[i], []) + [i + 1]\n    return c\ncou = inp()\nfor _ in range(cou):\n    n = inp()\n    cnt = [0 for i in range(2 * n + 5)]\n    for i in range(n):\n        (a, b) = vinp()\n        cnt[a + b] += 1\n    flag = 0\n    i = 2\n    j = 1\n    while i <= n and (not flag):\n        if cnt[i] == j:\n            flag = 1\n        i += 1\n        j += 1\n    i = n + 1\n    j = n\n    while i <= 2 * n and (not flag):\n        if cnt[i] == j:\n            flag = 1\n        i += 1\n        j -= 1\n    if flag:\n        pr('NO')\n    else:\n        pr('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    blocks1 = []\n    blockset = set()\n    for _1 in range(n):\n        (x, y) = map(int, input().split())\n        blocks1.append((x, y))\n        blockset.add((x, y))\n    blocks1.sort()\n    (x, y) = blocks1[0]\n    while (x + 1, y - 1) in blockset:\n        x += 1\n        y -= 1\n    if y == 1:\n        print('NO')\n    else:\n        (x, y) = blocks1[-1]\n        while (x - 1, y + 1) in blockset:\n            x -= 1\n            y += 1\n        if y == n:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    blocks1 = []\n    blockset = set()\n    for _1 in range(n):\n        (x, y) = map(int, input().split())\n        blocks1.append((x, y))\n        blockset.add((x, y))\n    blocks1.sort()\n    (x, y) = blocks1[0]\n    while (x + 1, y - 1) in blockset:\n        x += 1\n        y -= 1\n    if y == 1:\n        print('NO')\n    else:\n        (x, y) = blocks1[-1]\n        while (x - 1, y + 1) in blockset:\n            x -= 1\n            y += 1\n        if y == n:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    b = []\n    for i in range(n):\n        b.append([int(i) for i in input().split()])\n    b.sort(key=lambda x: x[1])\n    d = 0\n    i = 0\n    while True:\n        if b[i][0] == 1:\n            d = 1\n            break\n        if b[i][0] == b[i + 1][0] + 1:\n            i += 1\n        else:\n            break\n    if d == 1:\n        print('NO')\n        continue\n    b.sort(key=lambda x: -x[0])\n    i = 0\n    while True:\n        if b[i][1] == n:\n            d = 1\n            break\n        if b[i][1] == b[i + 1][1] - 1:\n            i += 1\n        else:\n            break\n    if d == 1:\n        print('NO')\n        continue\n    print('YES')", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    d = Counter()\n    bol = False\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        d[x + y] += 1\n    for i in range(2, n + 1):\n        if d[i + 1] == i or d[2 * n - i + 1] == i:\n            bol = True\n            break\n    if bol:\n        print('NO')\n    else:\n        print('YES')", "def main():\n    T = int(input())\n    while T > 0:\n        n = int(input())\n        dic = {}\n        dic_row = {}\n        for i in range(n):\n            (r, c) = map(int, input().split())\n            dic[c] = r\n            dic_row[r] = c\n        start = dic[1]\n        col = 1\n        block = True\n        while start > 0:\n            if dic[col] != start:\n                block = False\n                break\n            else:\n                start -= 1\n                col += 1\n        if block is True:\n            print('NO')\n        else:\n            block = True\n            row = n\n            start = dic_row[n]\n            while start <= n:\n                if dic_row[row] != start:\n                    block = False\n                    break\n                else:\n                    start += 1\n                    row -= 1\n            if block is True:\n                print('NO')\n            else:\n                print('YES')\n        T -= 1\nmain()", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    r = [0] * n\n    c = [0] * n\n    for i in range(n):\n        (x, y) = [int(u) for u in input().split()]\n        r[x - 1] = y - 1\n        c[y - 1] = x - 1\n    answer = True\n    for i in range(1, n):\n        if r[i] != r[i - 1] - 1:\n            break\n        if r[i] == 0:\n            answer = False\n            break\n    for i in range(n - 2, -1, -1):\n        if r[i] != r[i + 1] + 1:\n            break\n        if r[i] == n - 1:\n            answer = False\n            break\n    if answer == True:\n        print('YES')\n    else:\n        print('NO')", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = []\n    l2 = [0 for i in range(2 * n + 1)]\n    no = 0\n    for i in range(n):\n        (a, b) = list(map(int, input().split()))\n        l1.append((a, b))\n        l2[a + b] += 1\n        if a + b <= n + 1 and l2[a + b] == a + b - 1:\n            no = 1\n        elif a + b > n + 1 and l2[a + b] == 2 * n - (a + b) + 1:\n            no = 1\n    if no == 1:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    rocks = {tuple(map(int, input().split())) for _ in range(n)}\n    extrems = [rock for rock in rocks if rock[0] == 1 or rock[1] == n]\n    puc = True\n    for ex in extrems:\n        if ex in rocks:\n            rocks.remove(ex)\n            nous = [ex]\n            while nous:\n                (x, y) = nous.pop()\n                for i in range(-1, 2):\n                    for j in range(-1, 2):\n                        if not (i == 0 and j == 0):\n                            (nou_x, nou_y) = (x + i, y + j)\n                            if 1 <= nou_x <= n and 1 <= nou_y <= n:\n                                if (nou_x, nou_y) in rocks:\n                                    if nou_x == n or nou_y == 1:\n                                        puc = False\n                                        break\n                                    nous.append((nou_x, nou_y))\n                                    rocks.remove((nou_x, nou_y))\n                if not puc:\n                    break\n        if not puc:\n            break\n    print('YES' if puc else 'NO')", "q = int(input())\nfor _ in range(q):\n    n = int(input())\n    dic = {}\n    ans = 'YES'\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        a = x + y\n        dic[a] = dic.get(a, 0) + 1\n    for (k, v) in dic.items():\n        if k - v == 1 or k + v == 1 + 2 * n:\n            ans = 'NO'\n            break\n    print(ans)", "from collections import defaultdict\nimport sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor t in range(T):\n    N = int(readline())\n    dct = defaultdict(int)\n    for i in range(N):\n        (X, Y) = map(int, readline().split())\n        dct[X + Y] += 1\n    ans = 'YES'\n    for (x, c) in dct.items():\n        if c == min(x - 1, 2 * N + 1 - x):\n            ans = 'NO'\n    print(ans)"]