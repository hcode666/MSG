["for tcase in range(int(input())):\n    n = int(input())\n    s = [[], []]\n    for si in map(int, input().split()):\n        s[si % 2].append(si)\n    s[0].sort()\n    s[1].sort()\n    r = [[[0, 0], [0, 0]], [[0, 0], [0, 0]]]\n    for ia in range(2):\n        for ib in range(2):\n            (a, b, c) = ([], [], [s[0][:], s[1][:]])\n            (ap, bp) = (ia, ib)\n            if len(c[ap]) > 0:\n                a.append(c[ap].pop())\n                ap ^= 1\n            if len(c[bp]) > 0:\n                b.append(c[bp].pop())\n                bp ^= 1\n            if len(a) > 0 or len(b) > 0:\n                while len(c[ap]) > 0 or len(c[bp]) > 0:\n                    if len(c[ap]) > 0:\n                        a.append(c[ap].pop())\n                        ap ^= 1\n                    if len(c[bp]) > 0:\n                        b.append(c[bp].pop())\n                        bp ^= 1\n            (r[ia][ib][0], r[ia][ib][1]) = (sum(a), sum(b))\n    ascore = [0, 0]\n    for ap in range(2):\n        d = r[ap][0][1] - r[ap][1][1]\n        if d == 0:\n            d = r[ap][0][0] - r[ap][1][0]\n        bp = 0 if d > 0 else 1\n        ascore[ap] = r[ap][bp][0]\n    ans = max(ascore)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    line = input()\n    a = list(map(int, line.split()))\n    a.sort(reverse=True)\n    evens = []\n    odds = []\n    for item in a:\n        if item % 2 == 0:\n            evens.append(item)\n        else:\n            odds.append(item)\n    Alice_Socres = []\n    Bob_Scores_Aeven = []\n    Bob_Scores_Aodd = []\n    for i in range(4):\n        bin_i = bin(i)[2:]\n        if i < 2:\n            bin_i = '0' + bin_i\n        Alice = 0\n        Bob = 0\n        Alice_even = bin_i[0] == '0'\n        Bob_even = bin_i[1] == '0'\n        is_Alice_turn = True\n        Alice_no_moves = False\n        Bob_no_moves = False\n        odds_copy = odds.copy()\n        evens_copy = evens.copy()\n        while True:\n            if is_Alice_turn:\n                if Alice_even:\n                    if len(evens_copy) == 0:\n                        if Bob_no_moves:\n                            break\n                        else:\n                            Alice_no_moves = True\n                    else:\n                        Alice += evens_copy.pop(0)\n                        Alice_even = False\n                elif len(odds_copy) == 0:\n                    if Alice_no_moves:\n                        break\n                    else:\n                        Bob_no_moves = True\n                else:\n                    Alice += odds_copy.pop(0)\n                    Alice_even = True\n            elif Bob_even:\n                if len(evens_copy) == 0:\n                    break\n                else:\n                    Bob += evens_copy.pop(0)\n                    Bob_even = False\n            elif len(odds_copy) == 0:\n                break\n            else:\n                Bob += odds_copy.pop(0)\n                Bob_even = True\n            is_Alice_turn = not is_Alice_turn\n        Alice_Socres.append(Alice)\n        if i < 2:\n            Bob_Scores_Aeven.append(Bob)\n        else:\n            Bob_Scores_Aodd.append(Bob)\n    if Bob_Scores_Aodd[0] > Bob_Scores_Aodd[1]:\n        Alice_Socres.pop(3)\n    elif Bob_Scores_Aodd[0] < Bob_Scores_Aodd[1]:\n        Alice_Socres.pop(2)\n    elif Alice_Socres[2] < Alice_Socres[3]:\n        Alice_Socres.pop(2)\n    else:\n        Alice_Socres.pop(3)\n    if Bob_Scores_Aeven[0] > Bob_Scores_Aeven[1]:\n        Alice_Socres.pop(1)\n    elif Bob_Scores_Aeven[0] < Bob_Scores_Aeven[1]:\n        Alice_Socres.pop(0)\n    elif Alice_Socres[0] < Alice_Socres[1]:\n        Alice_Socres.pop(0)\n    else:\n        Alice_Socres.pop(1)\n    print(max(Alice_Socres))", "def get_ans(a, b, arr, A, B):\n    n = len(arr)\n    d = {0: [], 1: []}\n    for i in range(n):\n        if arr[i] % 2:\n            d[1].append(arr[i])\n        else:\n            d[0].append(arr[i])\n    d[0].sort()\n    d[1].sort()\n    curr = 'a'\n    ap = len(d[a]) > 0\n    bp = len(d[b]) > 0\n    while ap or bp:\n        if curr == 'a':\n            if not ap:\n                curr = 'b'\n                continue\n            else:\n                A += d[a].pop()\n                a = 1 - a\n                curr = 'b'\n        elif not bp:\n            curr = 'a'\n            continue\n        else:\n            B += d[b].pop()\n            b = 1 - b\n            curr = 'a'\n        ap = len(d[a]) > 0\n        bp = len(d[b]) > 0\n    return (A, B)\nfor _ in range(int(input())):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    mo = [float('-inf'), float('-inf')]\n    me = [float('-inf'), float('-inf')]\n    for i in range(n):\n        if A[i] % 2:\n            if A[i] > mo[0]:\n                mo[1] = mo[0]\n                mo[0] = A[i]\n            elif A[i] > mo[1]:\n                mo[1] = A[i]\n        elif A[i] > me[0]:\n            me[1] = me[0]\n            me[0] = A[i]\n        elif A[i] > me[1]:\n            me[1] = A[i]\n    ret = []\n    ans = []\n    if me[0] > float('-inf') and me[1] > float('-inf'):\n        arr = A[:]\n        arr.remove(me[0])\n        arr.remove(me[1])\n        ans.append(get_ans(1, 1, arr, me[0], me[1]))\n    if me[0] > float('-inf') and mo[0] > float('-inf'):\n        arr = A[:]\n        arr.remove(me[0])\n        arr.remove(mo[0])\n        ans.append(get_ans(1, 0, arr, me[0], mo[0]))\n    if len(ans) == 2:\n        (p1, p2) = ans\n        if p1[1] == p2[1]:\n            if p1[0] > p2[0]:\n                ans = [p1]\n            else:\n                ans = [p2]\n        elif p1[1] > p2[1]:\n            ans = [p1]\n        else:\n            ans = [p2]\n    if ans:\n        ret.append(ans[0])\n    ans = []\n    if mo[0] > float('-inf') and me[0] > float('-inf'):\n        arr = A[:]\n        arr.remove(me[0])\n        arr.remove(mo[0])\n        ans.append(get_ans(0, 1, arr, mo[0], me[0]))\n    if mo[0] > float('-inf') and mo[1] > float('-inf'):\n        arr = A[:]\n        arr.remove(mo[0])\n        arr.remove(mo[1])\n        ans.append(get_ans(0, 0, arr, mo[0], mo[1]))\n    if len(ans) == 2:\n        (p1, p2) = ans\n        if p1[1] == p2[1]:\n            if p1[0] > p2[0]:\n                ans = [p1]\n            else:\n                ans = [p2]\n        elif p1[1] > p2[1]:\n            ans = [p1]\n        else:\n            ans = [p2]\n    if ans:\n        ret.append(ans[0])\n    if len(ret) == 1:\n        print(ret[0][0])\n    else:\n        print(ret[0][0] if ret[0][0] >= ret[1][0] else ret[1][0])", "def play(odd_arr, even_arr, sel):\n    alice_playing = True\n    bob_playing = True\n    both_pos = [0, 0]\n    both_arr = [odd_arr, even_arr]\n    (alice_sel, bob_sel) = sel\n    alice_score = 0\n    bob_score = 0\n    while alice_playing or bob_playing:\n        if alice_playing:\n            if both_pos[alice_sel] < len(both_arr[alice_sel]):\n                alice_score += both_arr[alice_sel][both_pos[alice_sel]]\n                both_pos[alice_sel] += 1\n                alice_sel = int(alice_sel ^ 1)\n            else:\n                alice_playing = False\n        if bob_playing:\n            if both_pos[bob_sel] < len(both_arr[bob_sel]):\n                bob_score += both_arr[bob_sel][both_pos[bob_sel]]\n                both_pos[bob_sel] += 1\n                bob_sel = int(bob_sel ^ 1)\n            else:\n                bob_playing = False\n    return (alice_score, bob_score)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    odds = []\n    evens = []\n    for i in a:\n        if i & 1:\n            odds.append(i)\n        else:\n            evens.append(i)\n    odds = sorted(odds, reverse=True)\n    evens = sorted(evens, reverse=True)\n    all_vals = [play(odds, evens, [1, 0]), play(odds, evens, [1, 1]), play(odds, evens, [0, 0]), play(odds, evens, [0, 1])]\n    pos_alice = [i[0] for i in all_vals]\n    pos_bob = [i[1] for i in all_vals]\n    actual_alice = [0, 0]\n    if pos_bob[0] > pos_bob[1]:\n        actual_alice[0] = pos_alice[0]\n    elif pos_bob[1] > pos_bob[0]:\n        actual_alice[0] = pos_alice[1]\n    else:\n        actual_alice[0] = max(pos_alice[:2])\n    if pos_bob[2] > pos_bob[3]:\n        actual_alice[1] = pos_alice[2]\n    elif pos_bob[3] > pos_bob[2]:\n        actual_alice[1] = pos_alice[3]\n    else:\n        actual_alice[1] = max(pos_alice[2:])\n    print(max(actual_alice))", "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = []\n    even = []\n    for e in arr:\n        if e & 1:\n            odd.append(e)\n        else:\n            even.append(e)\n    even.sort(key=lambda x: -x)\n    odd.sort(key=lambda x: -x)\n    (a1, b1) = (0, 0)\n    i = 0\n    while i < len(even):\n        a1 += even[i]\n        if i < len(odd):\n            a1 += odd[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(even):\n        b1 += even[i]\n        if i < len(odd):\n            b1 += odd[i]\n        else:\n            break\n        i += 2\n    (a2, b2) = (0, 0)\n    i = 0\n    while i < len(even):\n        a2 += even[i]\n        if i + 1 < len(odd):\n            a2 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        b2 += odd[i]\n        if i + 1 < len(even):\n            b2 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a3, b3) = (0, 0)\n    i = 0\n    while i < len(even):\n        b3 += even[i]\n        if i + 1 < len(odd):\n            b3 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        a3 += odd[i]\n        if i + 1 < len(even):\n            a3 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a4, b4) = (0, 0)\n    i = 0\n    while i < len(odd):\n        a4 += odd[i]\n        if i < len(even):\n            a4 += even[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(odd):\n        b4 += odd[i]\n        if i < len(even):\n            b4 += even[i]\n        else:\n            break\n        i += 2\n    ans1 = 0\n    b = max(b1, b2)\n    if b == b1 == b2:\n        ans1 = max(a1, a2)\n    elif b == b1:\n        ans1 = a1\n    else:\n        ans1 = a2\n    ans2 = 0\n    b = max(b3, b4)\n    if b == b3 == b4:\n        ans2 = max(a3, a4)\n    elif b == b3:\n        ans2 = a3\n    else:\n        ans2 = a4\n    print(max(ans1, ans2))", "def get(arr, a, b):\n    choices = [[], []]\n    choices[0] = list(filter(lambda x: x % 2 == 0, arr))\n    choices[1] = list(filter(lambda x: x % 2 == 1, arr))\n    score_a = 0\n    score_b = 0\n    while True:\n        if len(choices[a]) == 0 and len(choices[b]) == 0:\n            break\n        if len(choices[a]) != 0:\n            score_a += choices[a].pop()\n            a = 1 - a\n        if len(choices[b]) != 0:\n            score_b += choices[b].pop()\n            b = 1 - b\n    return [score_a, score_b]\n\ndef get_z(arr, a):\n    sc1 = get(arr, a, 0)\n    sc2 = get(arr, a, 1)\n    if sc1[1] == sc2[1]:\n        return max(sc1[0], sc2[0])\n    elif sc1[1] > sc2[1]:\n        return sc1[0]\n    return sc2[0]\n\ndef func(arr):\n    return max(get_z(arr, 0), get_z(arr, 1))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    arr.sort()\n    print(func(arr))", "def func(xx, yy):\n    (od, ev) = ([], [])\n    for i in tt:\n        if i % 2:\n            od.append(i)\n        else:\n            ev.append(i)\n    od.sort()\n    ev.sort()\n    s = [0, 0]\n    (a, b) = (0, 0)\n    while sum(s) < 2:\n        if xx:\n            if len(od):\n                a += od.pop()\n            else:\n                s[0] = 1\n        elif len(ev):\n            a += ev.pop()\n        else:\n            s[0] = 1\n        if yy:\n            if len(od):\n                b += od.pop()\n            else:\n                s[1] = 1\n        elif len(ev):\n            b += ev.pop()\n        else:\n            s[1] = 1\n        if not s[0]:\n            xx ^= 1\n        if not s[1]:\n            yy ^= 1\n    return (b, a)\nfor _ in range(int(input())):\n    n = int(input())\n    tt = [int(x) for x in input().split()]\n    (p, q) = (len([i for i in tt if i % 2]), len([i for i in tt if i % 2 == 0]))\n    (x, y) = ([], [])\n    x.append(func(0, 0))\n    x.append(func(0, 1))\n    y.append(func(1, 0))\n    y.append(func(1, 1))\n    x.sort(reverse=True)\n    y.sort(reverse=True)\n    print(max(x[0][1], y[0][1]))", "def func(xx, yy):\n    (od, ev) = ([], [])\n    for i in tt:\n        if i % 2:\n            od.append(i)\n        else:\n            ev.append(i)\n    od.sort()\n    ev.sort()\n    s = [0, 0]\n    (a, b) = (0, 0)\n    while sum(s) < 2:\n        if xx:\n            if len(od):\n                a += od.pop()\n            else:\n                s[0] = 1\n        elif len(ev):\n            a += ev.pop()\n        else:\n            s[0] = 1\n        if yy:\n            if len(od):\n                b += od.pop()\n            else:\n                s[1] = 1\n        elif len(ev):\n            b += ev.pop()\n        else:\n            s[1] = 1\n        if not s[0]:\n            xx ^= 1\n        if not s[1]:\n            yy ^= 1\n    return (b, a)\nfor _ in range(int(input())):\n    n = int(input())\n    tt = [int(x) for x in input().split()]\n    (p, q) = (len([i for i in tt if i % 2]), len([i for i in tt if i % 2 == 0]))\n    (x, y) = ([], [])\n    x.append(func(0, 0))\n    x.append(func(0, 1))\n    y.append(func(1, 0))\n    y.append(func(1, 1))\n    x.sort(reverse=True)\n    y.sort(reverse=True)\n    print(max(x[0][1], y[0][1]))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    eve = []\n    odd = []\n    for i in l:\n        if i % 2 == 0:\n            eve.append(i)\n        else:\n            odd.append(i)\n    eve.sort(reverse=True)\n    odd.sort(reverse=True)\n\n    def out(la, lb, i, j):\n        flag = 0\n        if la == 0 and i >= len(eve):\n            flag += 1\n        elif la == 1 and j >= len(odd):\n            flag += 1\n        if lb == 0 and i >= len(eve):\n            flag += 1\n        elif lb == 1 and j >= len(odd):\n            flag += 1\n        return flag < 2\n\n    def sol(la, lb):\n        i = 0\n        j = 0\n        a = 0\n        b = 0\n        while out(la, lb, i, j):\n            if la == 0:\n                if i < len(eve):\n                    a += eve[i]\n                    la ^= 1\n                    i += 1\n            elif j < len(odd):\n                a += odd[j]\n                la ^= 1\n                j += 1\n            if lb == 0:\n                if i < len(eve):\n                    b += eve[i]\n                    lb ^= 1\n                    i += 1\n            elif j < len(odd):\n                b += odd[j]\n                lb ^= 1\n                j += 1\n        return (a, b)\n    (a1, b1) = sol(0, 0)\n    (a2, b2) = sol(0, 1)\n    (a3, b3) = sol(1, 0)\n    (a4, b4) = sol(1, 1)\n    ans1 = 0\n    if b2 > b1:\n        ans1 = a2\n    elif b2 == b1:\n        ans1 = max(a1, a2)\n    else:\n        ans1 = a1\n    ans2 = 0\n    if b4 > b3:\n        ans2 = a4\n    elif b4 == b3:\n        ans2 = max(a3, a4)\n    else:\n        ans2 = a3\n    print(max(ans1, ans2))", "t = int(input())\n\ndef mergeSort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L)\n        mergeSort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef get_bns(b, c, x, y):\n    bindi = 0\n    cindi = 0\n    fl = 0\n    al = 0\n    bob = 0\n    bl = 0\n    bbl = 0\n    cbl = 0\n    while (bindi < len(b) or cindi < len(c)) and bl < 2:\n        if fl == 0:\n            if bbl == 0:\n                if x == 0:\n                    if bindi < len(b):\n                        al += b[bindi]\n                        bindi += 1\n                        x = 1\n                    else:\n                        bl += 1\n                        bbl = 1\n                elif cindi < len(c):\n                    al += c[cindi]\n                    cindi += 1\n                    x = 0\n                else:\n                    bl += 1\n                    bbl = 1\n            fl = 1\n        else:\n            if cbl == 0:\n                if y == 0:\n                    if bindi < len(b):\n                        bob += b[bindi]\n                        bindi += 1\n                        y = 1\n                    else:\n                        bl += 1\n                        cbl = 1\n                elif cindi < len(c):\n                    bob += c[cindi]\n                    cindi += 1\n                    y = 0\n                else:\n                    bl += 1\n                    cbl = 1\n            fl = 0\n    return (al, bob)\nwhile t > 0:\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] % 2:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    b.sort()\n    b = b[::-1]\n    c.sort()\n    c = c[::-1]\n    ansi = [[(0, 0), (0, 0)], [(0, 0), (0, 0)]]\n    for i in range(2):\n        for j in range(2):\n            ansi[i][j] = get_bns(b, c, i, j)\n    if ansi[0][0][1] > ansi[0][1][1]:\n        po = ansi[0][0][0]\n    elif ansi[0][0][1] < ansi[0][1][1]:\n        po = ansi[0][1][0]\n    else:\n        po = max(ansi[0][0][0], ansi[0][1][0])\n    if ansi[1][0][1] > ansi[1][1][1]:\n        qo = ansi[1][0][0]\n    elif ansi[1][0][1] < ansi[1][1][1]:\n        qo = ansi[1][1][0]\n    else:\n        qo = max(ansi[1][0][0], ansi[1][1][0])\n    print(max(po, qo))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = []\n    even = []\n    for el in arr:\n        if el % 2:\n            odd.append(el)\n        else:\n            even.append(el)\n    odd.sort()\n    even.sort()\n\n    def solve(i, j, p, q):\n        a = True\n        t1 = i\n        t2 = j\n        b = True\n        o = 0\n        l = 0\n        while a or b:\n            if a:\n                if t1 % 2:\n                    if p:\n                        o += p.pop()\n                        t1 += 1\n                    else:\n                        a = False\n                elif q:\n                    o += q.pop()\n                    t1 += 1\n                else:\n                    a = False\n            if b:\n                if t2 % 2:\n                    if p:\n                        l += p.pop()\n                        t2 += 1\n                    else:\n                        b = False\n                elif q:\n                    l += q.pop()\n                    t2 += 1\n                else:\n                    b = False\n        return (o, l)\n    res = 0\n    p = 0\n    for i in range(2):\n        temp = []\n        for j in range(2):\n            (a, b) = solve(i, j, odd[:], even[:])\n            temp.append([a, b])\n        temp.sort(key=lambda x: (-x[1], -x[0]))\n        res = max(res, temp[0][0])\n    print(res)", "t = int(input())\n\ndef get_ans(b, c, x, y):\n    bind = 0\n    cind = 0\n    fl = 0\n    al = 0\n    bob = 0\n    bl = 0\n    bbl = 0\n    cbl = 0\n    while (bind < len(b) or cind < len(c)) and bl < 2:\n        if fl == 0:\n            if bbl == 0:\n                if x == 0:\n                    if bind < len(b):\n                        al += b[bind]\n                        bind += 1\n                        x = 1\n                    else:\n                        bl += 1\n                        bbl = 1\n                elif cind < len(c):\n                    al += c[cind]\n                    cind += 1\n                    x = 0\n                else:\n                    bl += 1\n                    bbl = 1\n            fl = 1\n        else:\n            if cbl == 0:\n                if y == 0:\n                    if bind < len(b):\n                        bob += b[bind]\n                        bind += 1\n                        y = 1\n                    else:\n                        bl += 1\n                        cbl = 1\n                elif cind < len(c):\n                    bob += c[cind]\n                    cind += 1\n                    y = 0\n                else:\n                    bl += 1\n                    cbl = 1\n            fl = 0\n    return (al, bob)\nwhile t > 0:\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    b = []\n    c = []\n    for i in range(n):\n        if a[i] % 2:\n            b.append(a[i])\n        else:\n            c.append(a[i])\n    b.sort()\n    b = b[::-1]\n    c.sort()\n    c = c[::-1]\n    ans = [[(0, 0), (0, 0)], [(0, 0), (0, 0)]]\n    for i in range(2):\n        for j in range(2):\n            ans[i][j] = get_ans(b, c, i, j)\n    if ans[0][0][1] > ans[0][1][1]:\n        p = ans[0][0][0]\n    elif ans[0][0][1] < ans[0][1][1]:\n        p = ans[0][1][0]\n    else:\n        p = max(ans[0][0][0], ans[0][1][0])\n    if ans[1][0][1] > ans[1][1][1]:\n        q = ans[1][0][0]\n    elif ans[1][0][1] < ans[1][1][1]:\n        q = ans[1][1][0]\n    else:\n        q = max(ans[1][0][0], ans[1][1][0])\n    print(max(p, q))\n    t -= 1", "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = []\n    even = []\n    for e in arr:\n        if e & 1:\n            odd.append(e)\n        else:\n            even.append(e)\n    even.sort(key=lambda x: -x)\n    odd.sort(key=lambda x: -x)\n    (a1, b1) = (0, 0)\n    i = 0\n    while i < len(even):\n        a1 += even[i]\n        if i < len(odd):\n            a1 += odd[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(even):\n        b1 += even[i]\n        if i < len(odd):\n            b1 += odd[i]\n        else:\n            break\n        i += 2\n    (a2, b2) = (0, 0)\n    i = 0\n    while i < len(even):\n        a2 += even[i]\n        if i + 1 < len(odd):\n            a2 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        b2 += odd[i]\n        if i + 1 < len(even):\n            b2 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a3, b3) = (0, 0)\n    i = 0\n    while i < len(even):\n        b3 += even[i]\n        if i + 1 < len(odd):\n            b3 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        a3 += odd[i]\n        if i + 1 < len(even):\n            a3 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a4, b4) = (0, 0)\n    i = 0\n    while i < len(odd):\n        a4 += odd[i]\n        if i < len(even):\n            a4 += even[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(odd):\n        b4 += odd[i]\n        if i < len(even):\n            b4 += even[i]\n        else:\n            break\n        i += 2\n    ans1 = 0\n    b = max(b1, b2)\n    if b == b1 == b2:\n        ans1 = max(a1, a2)\n    elif b == b1:\n        ans1 = a1\n    else:\n        ans1 = a2\n    ans2 = 0\n    b = max(b3, b4)\n    if b == b3 == b4:\n        ans2 = max(a3, a4)\n    elif b == b3:\n        ans2 = a3\n    else:\n        ans2 = a4\n    print(max(ans1, ans2))", "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = []\n    even = []\n    for e in arr:\n        if e & 1:\n            odd.append(e)\n        else:\n            even.append(e)\n    even.sort(key=lambda x: -x)\n    odd.sort(key=lambda x: -x)\n    (a1, b1) = (0, 0)\n    i = 0\n    while i < len(even):\n        a1 += even[i]\n        if i < len(odd):\n            a1 += odd[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(even):\n        b1 += even[i]\n        if i < len(odd):\n            b1 += odd[i]\n        else:\n            break\n        i += 2\n    (a2, b2) = (0, 0)\n    i = 0\n    while i < len(even):\n        a2 += even[i]\n        if i + 1 < len(odd):\n            a2 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        b2 += odd[i]\n        if i + 1 < len(even):\n            b2 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a3, b3) = (0, 0)\n    i = 0\n    while i < len(even):\n        b3 += even[i]\n        if i + 1 < len(odd):\n            b3 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        a3 += odd[i]\n        if i + 1 < len(even):\n            a3 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a4, b4) = (0, 0)\n    i = 0\n    while i < len(odd):\n        a4 += odd[i]\n        if i < len(even):\n            a4 += even[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(odd):\n        b4 += odd[i]\n        if i < len(even):\n            b4 += even[i]\n        else:\n            break\n        i += 2\n    ans1 = 0\n    b = max(b1, b2)\n    if b == b1 == b2:\n        ans1 = max(a1, a2)\n    elif b == b1:\n        ans1 = a1\n    else:\n        ans1 = a2\n    ans2 = 0\n    b = max(b3, b4)\n    if b == b3 == b4:\n        ans2 = max(a3, a4)\n    elif b == b3:\n        ans2 = a3\n    else:\n        ans2 = a4\n    print(max(ans1, ans2))", "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = []\n    even = []\n    for e in arr:\n        if e & 1:\n            odd.append(e)\n        else:\n            even.append(e)\n    even.sort(key=lambda x: -x)\n    odd.sort(key=lambda x: -x)\n    (a1, b1) = (0, 0)\n    i = 0\n    while i < len(even):\n        a1 += even[i]\n        if i < len(odd):\n            a1 += odd[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(even):\n        b1 += even[i]\n        if i < len(odd):\n            b1 += odd[i]\n        else:\n            break\n        i += 2\n    (a2, b2) = (0, 0)\n    i = 0\n    while i < len(even):\n        a2 += even[i]\n        if i + 1 < len(odd):\n            a2 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        b2 += odd[i]\n        if i + 1 < len(even):\n            b2 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a3, b3) = (0, 0)\n    i = 0\n    while i < len(even):\n        b3 += even[i]\n        if i + 1 < len(odd):\n            b3 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        a3 += odd[i]\n        if i + 1 < len(even):\n            a3 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a4, b4) = (0, 0)\n    i = 0\n    while i < len(odd):\n        a4 += odd[i]\n        if i < len(even):\n            a4 += even[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(odd):\n        b4 += odd[i]\n        if i < len(even):\n            b4 += even[i]\n        else:\n            break\n        i += 2\n    ans1 = 0\n    b = max(b1, b2)\n    if b == b1 == b2:\n        ans1 = max(a1, a2)\n    elif b == b1:\n        ans1 = a1\n    else:\n        ans1 = a2\n    ans2 = 0\n    b = max(b3, b4)\n    if b == b3 == b4:\n        ans2 = max(a3, a4)\n    elif b == b3:\n        ans2 = a3\n    else:\n        ans2 = a4\n    print(max(ans1, ans2))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    odd = []\n    even = []\n    for x in a:\n        if x % 2 == 0:\n            even.append(x)\n        else:\n            odd.append(x)\n    even.sort(reverse=True)\n    odd.sort(reverse=True)\n    (a1, b1) = (0, 0)\n    i = 0\n    while i < len(even):\n        a1 += even[i]\n        if i < len(odd):\n            a1 += odd[i]\n        else:\n            break\n        i = i + 2\n    i = 1\n    while i < len(even):\n        b1 += even[i]\n        if i < len(odd):\n            b1 += odd[i]\n        else:\n            break\n        i += 2\n    (a2, b2) = (0, 0)\n    i = 0\n    while i < len(even):\n        a2 += even[i]\n        if i + 1 < len(odd):\n            a2 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        b2 += odd[i]\n        if i + 1 < len(even):\n            b2 += even[i + 1]\n        else:\n            break\n        i += 2\n    (a3, b3) = (0, 0)\n    i = 0\n    while i < len(odd):\n        a3 += odd[i]\n        if i + 1 < len(even):\n            a3 += even[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(even):\n        b3 += even[i]\n        if i + 1 < len(odd):\n            b3 += odd[i + 1]\n        else:\n            break\n        i += 2\n    (a4, b4) = (0, 0)\n    i = 0\n    while i < len(odd):\n        a4 += odd[i]\n        if i < len(even):\n            a4 += even[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(odd):\n        b4 += odd[i]\n        if i < len(even):\n            b4 += even[i]\n        else:\n            break\n        i += 2\n    (ans1, ans2) = (0, 0)\n    b = max(b1, b2)\n    if b == b1 and b == b2:\n        ans1 = max(a1, a2)\n    elif b == b1:\n        ans1 = a1\n    else:\n        ans1 = a2\n    b = max(b3, b4)\n    if b == b3 and b == b4:\n        ans2 = max(a3, a4)\n    elif b == b3:\n        ans2 = a3\n    else:\n        ans2 = a4\n    print(max(ans1, ans2))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    o = []\n    e = []\n    for q in l:\n        if q % 2 == 0:\n            e.append(q)\n        else:\n            o.append(q)\n    e.sort(reverse=True)\n    o.sort(reverse=True)\n    a1 = 0\n    b1 = 0\n    i = 0\n    while i < len(e):\n        a1 = a1 + e[i]\n        if i < len(o):\n            a1 = a1 + o[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(e):\n        b1 = b1 + e[i]\n        if i < len(o):\n            b1 = b1 + o[i]\n        else:\n            break\n        i += 2\n    a2 = 0\n    b2 = 0\n    i = 0\n    while i < len(o):\n        a2 = a2 + o[i]\n        if i < len(e):\n            a2 = a2 + e[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(o):\n        b2 = b2 + o[i]\n        if i < len(e):\n            b2 = b2 + e[i]\n        else:\n            break\n        i += 2\n    a3 = 0\n    b3 = 0\n    i = 0\n    while i < len(o):\n        a3 = a3 + o[i]\n        if i + 1 < len(e):\n            a3 = a3 + e[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(e):\n        b3 = b3 + e[i]\n        if i + 1 < len(o):\n            b3 = b3 + o[i + 1]\n        else:\n            break\n        i += 2\n    a4 = 0\n    b4 = 0\n    i = 0\n    while i < len(e):\n        a4 = a4 + e[i]\n        if i + 1 < len(o):\n            a4 = a4 + o[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(o):\n        b4 = b4 + o[i]\n        if i + 1 < len(e):\n            b4 = b4 + e[i + 1]\n        else:\n            break\n        i += 2\n    ans1 = 0\n    b = max(b1, b4)\n    if b == b1 == b4:\n        ans1 = max(a1, a4)\n    elif b == b1:\n        ans1 = a1\n    else:\n        ans1 = a4\n    ans2 = 0\n    bb = max(b2, b3)\n    if bb == b2 == b3:\n        ans2 = max(a2, a3)\n    elif bb == b2:\n        ans2 = a2\n    else:\n        ans2 = a3\n    ans = max(ans1, ans2)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pt = [[], []]\n    for i in a:\n        if i & 1:\n            pt[1].append(i)\n        else:\n            pt[0].append(i)\n    pt[0] = sorted(pt[0], reverse=True)\n    pt[1] = sorted(pt[1], reverse=True)\n    ans = []\n    for test in range(4):\n        (flag, tr) = (0, 0)\n        par = [test >> 1 & 1, test & 1]\n        count = [0, 0]\n        ln = [len(pt[0]), len(pt[1])]\n        inc = [0, 0]\n        while flag < 2:\n            if inc[par[tr]] < ln[par[tr]]:\n                flag = 0\n                count[tr] += pt[par[tr]][inc[par[tr]]]\n                inc[par[tr]] += 1\n                par[tr] ^= 1\n            else:\n                flag += 1\n            tr ^= 1\n        ans.append(count)\n    if ans[0][1] > ans[1][1]:\n        zero = ans[0][0]\n    elif ans[0][1] < ans[1][1]:\n        zero = ans[1][0]\n    else:\n        zero = max(ans[0][0], ans[1][0])\n    if ans[2][1] > ans[3][1]:\n        one = ans[2][0]\n    elif ans[2][1] < ans[3][1]:\n        one = ans[3][0]\n    else:\n        one = max(ans[2][0], ans[3][0])\n    print(max(zero, one))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pt = [[], []]\n    for i in a:\n        if i & 1:\n            pt[1].append(i)\n        else:\n            pt[0].append(i)\n    pt[0] = sorted(pt[0], reverse=True)\n    pt[1] = sorted(pt[1], reverse=True)\n    ans = []\n    for test in range(4):\n        (flag, tr) = (0, 0)\n        par = [test >> 1 & 1, test & 1]\n        count = [0, 0]\n        ln = [len(pt[0]), len(pt[1])]\n        inc = [0, 0]\n        while flag < 2:\n            if inc[par[tr]] < ln[par[tr]]:\n                flag = 0\n                count[tr] += pt[par[tr]][inc[par[tr]]]\n                inc[par[tr]] += 1\n                par[tr] ^= 1\n            else:\n                flag += 1\n            tr ^= 1\n        ans.append(count)\n    if ans[0][1] > ans[1][1]:\n        zero = ans[0][0]\n    elif ans[0][1] < ans[1][1]:\n        zero = ans[1][0]\n    else:\n        zero = max(ans[0][0], ans[1][0])\n    if ans[2][1] > ans[3][1]:\n        one = ans[2][0]\n    elif ans[2][1] < ans[3][1]:\n        one = ans[3][0]\n    else:\n        one = max(ans[2][0], ans[3][0])\n    print(max(zero, one))", "def diff(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    i = 0\n    j = 0\n    ca = 0\n    cb = 1\n    while True:\n        if i % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i < e and cb == 1:\n                b += ev[i]\n                cb = 0\n        else:\n            if i < o and cb == 0:\n                b += od[i]\n                cb = 1\n            if i < e and ca == 1:\n                a += ev[i]\n                ca = 0\n        if i >= o and i >= e:\n            break\n        i += 1\n    return (a, b)\n\ndef same(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    if o == 0:\n        return (0, 0)\n    i = 0\n    j = 0\n    k = 0\n    ca = 0\n    cb = 0\n    while True:\n        if k % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i + 1 < o and cb == 0:\n                b += od[i + 1]\n                cb = 1\n            i += 2\n        else:\n            if j < e and ca == 1:\n                a += ev[j]\n                ca = 0\n            if j + 1 < e and cb == 1:\n                b += ev[j + 1]\n                cb = 0\n            j += 2\n        if i >= o and j >= e:\n            break\n        k += 1\n    if o == 1:\n        b = 0\n    return (a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ev = []\n    od = []\n    for ele in arr:\n        if ele & 1:\n            od.append(ele)\n        else:\n            ev.append(ele)\n    od.sort(reverse=True)\n    ev.sort(reverse=True)\n    (a1, b1) = diff(od, ev)\n    (a2, b2) = same(od, ev)\n    (a3, b3) = diff(ev, od)\n    (a4, b4) = same(ev, od)\n    a = 0\n    b = 0\n    if b1 > b2:\n        a = a1\n    else:\n        a = a2\n    if b3 > b4:\n        b = a3\n    else:\n        b = a4\n    ans = max(a, b)\n    print(ans)", "def diff(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    i = 0\n    j = 0\n    ca = 0\n    cb = 1\n    while True:\n        if i % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i < e and cb == 1:\n                b += ev[i]\n                cb = 0\n        else:\n            if i < o and cb == 0:\n                b += od[i]\n                cb = 1\n            if i < e and ca == 1:\n                a += ev[i]\n                ca = 0\n        if i >= o and i >= e:\n            break\n        i += 1\n    return (a, b)\n\ndef same(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    if o == 0:\n        return (0, 0)\n    i = 0\n    j = 0\n    k = 0\n    ca = 0\n    cb = 0\n    while True:\n        if k % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i + 1 < o and cb == 0:\n                b += od[i + 1]\n                cb = 1\n            i += 2\n        else:\n            if j < e and ca == 1:\n                a += ev[j]\n                ca = 0\n            if j + 1 < e and cb == 1:\n                b += ev[j + 1]\n                cb = 0\n            j += 2\n        if i >= o and j >= e:\n            break\n        k += 1\n    if o == 1:\n        b = 0\n    return (a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ev = []\n    od = []\n    for ele in arr:\n        if ele & 1:\n            od.append(ele)\n        else:\n            ev.append(ele)\n    od.sort(reverse=True)\n    ev.sort(reverse=True)\n    (a1, b1) = diff(od, ev)\n    (a2, b2) = same(od, ev)\n    (a3, b3) = diff(ev, od)\n    (a4, b4) = same(ev, od)\n    a = 0\n    b = 0\n    if b1 > b2:\n        a = a1\n    else:\n        a = a2\n    if b3 > b4:\n        b = a3\n    else:\n        b = a4\n    ans = max(a, b)\n    print(ans)", "def diff(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    i = 0\n    j = 0\n    ca = 0\n    cb = 1\n    while True:\n        if i % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i < e and cb == 1:\n                b += ev[i]\n                cb = 0\n        else:\n            if i < o and cb == 0:\n                b += od[i]\n                cb = 1\n            if i < e and ca == 1:\n                a += ev[i]\n                ca = 0\n        if i >= o and i >= e:\n            break\n        i += 1\n    return (a, b)\n\ndef same(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    if o == 0:\n        return (0, 0)\n    i = 0\n    j = 0\n    k = 0\n    ca = 0\n    cb = 0\n    while True:\n        if k % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i + 1 < o and cb == 0:\n                b += od[i + 1]\n                cb = 1\n            i += 2\n        else:\n            if j < e and ca == 1:\n                a += ev[j]\n                ca = 0\n            if j + 1 < e and cb == 1:\n                b += ev[j + 1]\n                cb = 0\n            j += 2\n        if i >= o and j >= e:\n            break\n        k += 1\n    if o == 1:\n        b = 0\n    return (a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ev = []\n    od = []\n    for ele in arr:\n        if ele & 1:\n            od.append(ele)\n        else:\n            ev.append(ele)\n    od.sort(reverse=True)\n    ev.sort(reverse=True)\n    (a1, b1) = diff(od, ev)\n    (a2, b2) = same(od, ev)\n    (a3, b3) = diff(ev, od)\n    (a4, b4) = same(ev, od)\n    a = 0\n    b = 0\n    if b1 > b2:\n        a = a1\n    else:\n        a = a2\n    if b3 > b4:\n        b = a3\n    else:\n        b = a4\n    ans = max(a, b)\n    print(ans)", "def diff(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    i = 0\n    j = 0\n    ca = 0\n    cb = 1\n    while True:\n        if i % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i < e and cb == 1:\n                b += ev[i]\n                cb = 0\n        else:\n            if i < o and cb == 0:\n                b += od[i]\n                cb = 1\n            if i < e and ca == 1:\n                a += ev[i]\n                ca = 0\n        if i >= o and i >= e:\n            break\n        i += 1\n    return (a, b)\n\ndef same(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    if o == 0:\n        return (0, 0)\n    i = 0\n    j = 0\n    k = 0\n    ca = 0\n    cb = 0\n    while True:\n        if k % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i + 1 < o and cb == 0:\n                b += od[i + 1]\n                cb = 1\n            i += 2\n        else:\n            if j < e and ca == 1:\n                a += ev[j]\n                ca = 0\n            if j + 1 < e and cb == 1:\n                b += ev[j + 1]\n                cb = 0\n            j += 2\n        if i >= o and j >= e:\n            break\n        k += 1\n    if o == 1:\n        b = 0\n    return (a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ev = []\n    od = []\n    for ele in arr:\n        if ele & 1:\n            od.append(ele)\n        else:\n            ev.append(ele)\n    od.sort(reverse=True)\n    ev.sort(reverse=True)\n    (a1, b1) = diff(od, ev)\n    (a2, b2) = same(od, ev)\n    (a3, b3) = diff(ev, od)\n    (a4, b4) = same(ev, od)\n    a = 0\n    b = 0\n    if b1 > b2:\n        a = a1\n    else:\n        a = a2\n    if b3 > b4:\n        b = a3\n    else:\n        b = a4\n    ans = max(a, b)\n    print(ans)", "def diff(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    i = 0\n    j = 0\n    ca = 0\n    cb = 1\n    while True:\n        if i % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i < e and cb == 1:\n                b += ev[i]\n                cb = 0\n        else:\n            if i < o and cb == 0:\n                b += od[i]\n                cb = 1\n            if i < e and ca == 1:\n                a += ev[i]\n                ca = 0\n        if i >= o and i >= e:\n            break\n        i += 1\n    return (a, b)\n\ndef same(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    if o == 0:\n        return (0, 0)\n    i = 0\n    j = 0\n    k = 0\n    ca = 0\n    cb = 0\n    while True:\n        if k % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i + 1 < o and cb == 0:\n                b += od[i + 1]\n                cb = 1\n            i += 2\n        else:\n            if j < e and ca == 1:\n                a += ev[j]\n                ca = 0\n            if j + 1 < e and cb == 1:\n                b += ev[j + 1]\n                cb = 0\n            j += 2\n        if i >= o and j >= e:\n            break\n        k += 1\n    if o == 1:\n        b = 0\n    return (a, b)\n\ndef f(a):\n    return a[1]\n\ndef ff(a):\n    return a[0]\n\ndef cal(a1, b1, a2, b2):\n    (a, b) = (0, 0)\n    if b1 == b2:\n        a = max(a1, a2)\n        b = b1\n    elif a1 == a2:\n        a = a1\n        b = max(b1, b2)\n    else:\n        check = True\n        if a1 >= b1:\n            if b1 >= b2:\n                (a, b) = (a1, b1)\n                check = False\n        else:\n            (a, b) = (a2, b2)\n            check = False\n        if check:\n            if a2 >= b2:\n                (a, b) = (a2, b2)\n            else:\n                (a, b) = (a1, b1)\n    return (a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ev = []\n    od = []\n    for ele in arr:\n        if ele & 1:\n            od.append(ele)\n        else:\n            ev.append(ele)\n    od.sort(reverse=True)\n    ev.sort(reverse=True)\n    (a1, b1) = diff(od, ev)\n    (a2, b2) = same(od, ev)\n    (a3, b3) = diff(ev, od)\n    (a4, b4) = same(ev, od)\n    a = 0\n    b = 0\n    if b1 > b2:\n        a = a1\n    else:\n        a = a2\n    if b3 > b4:\n        b = a3\n    else:\n        b = a4\n    ans = max(a, b)\n    print(ans)", "def diff(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    i = 0\n    j = 0\n    ca = 0\n    cb = 1\n    while True:\n        if i % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i < e and cb == 1:\n                b += ev[i]\n                cb = 0\n        else:\n            if i < o and cb == 0:\n                b += od[i]\n                cb = 1\n            if i < e and ca == 1:\n                a += ev[i]\n                ca = 0\n        if i >= o and i >= e:\n            break\n        i += 1\n    return (a, b)\n\ndef same(od, ev):\n    (a, b) = (0, 0)\n    e = len(ev)\n    o = len(od)\n    if o == 0:\n        return (0, 0)\n    i = 0\n    j = 0\n    k = 0\n    ca = 0\n    cb = 0\n    while True:\n        if k % 2 == 0:\n            if i < o and ca == 0:\n                a += od[i]\n                ca = 1\n            if i + 1 < o and cb == 0:\n                b += od[i + 1]\n                cb = 1\n            i += 2\n        else:\n            if j < e and ca == 1:\n                a += ev[j]\n                ca = 0\n            if j + 1 < e and cb == 1:\n                b += ev[j + 1]\n                cb = 0\n            j += 2\n        if i >= o and j >= e:\n            break\n        k += 1\n    if o == 1:\n        b = 0\n    return (a, b)\n\ndef f(a):\n    return a[0] - a[1]\n\ndef cal(a1, b1, a2, b2):\n    (a, b) = (0, 0)\n    if b1 == b2:\n        a = max(a1, a2)\n        b = b1\n    elif a1 == a2:\n        a = a1\n        b = max(b1, b2)\n    else:\n        check = True\n        if a1 >= b1:\n            if b1 >= b2:\n                (a, b) = (a1, b1)\n                check = False\n        if a2 >= b2 and check:\n            if b2 >= b1:\n                (a, b) = (a2, b2)\n                check = False\n        if check:\n            if a1 >= b1:\n                (a, b) = (a1, b1)\n            else:\n                (a, b) = (a2, b2)\n    return (a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ev = []\n    od = []\n    for ele in arr:\n        if ele & 1:\n            od.append(ele)\n        else:\n            ev.append(ele)\n    od.sort(reverse=True)\n    ev.sort(reverse=True)\n    (a1, b1) = same(od, ev)\n    (a2, b2) = diff(od, ev)\n    if b2 > b1:\n        a = a2\n        b = b2\n    else:\n        a = a1\n        b = b2\n    (a1, b1) = same(ev, od)\n    (a2, b2) = diff(ev, od)\n    tm = a\n    if b2 > b1:\n        a = a2\n        b = b2\n    else:\n        a = a1\n        b = b2\n    print(max(a, tm))", "def caltwoalt(even, odd):\n    i = 0\n    leno = len(odd)\n    lene = len(even)\n    c = 0\n    f1 = False\n    f2 = False\n    while True:\n        if i % 2 == 0:\n            if i >= lene:\n                break\n            c += even[i]\n        else:\n            if i >= leno:\n                break\n            c += odd[i]\n        i += 1\n    return c\n\ndef calalt(even, odd, i):\n    leno = len(odd)\n    lene = len(even)\n    c = 0\n    while True:\n        if i >= lene:\n            break\n        c += even[i]\n        if i >= leno:\n            break\n        c += odd[i]\n        i += 2\n    return c\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    odd = list()\n    even = list()\n    for x in l:\n        if x & 1 == 1:\n            odd.append(x)\n        else:\n            even.append(x)\n    odd.sort(reverse=True)\n    even.sort(reverse=True)\n    saeven1 = calalt(even, odd, 0)\n    saeven2 = caltwoalt(even, odd)\n    saodd1 = caltwoalt(odd, even)\n    saodd2 = calalt(odd, even, 0)\n    sbeven1 = calalt(even, odd, 1)\n    sbeven2 = caltwoalt(odd, even)\n    sbodd1 = caltwoalt(even, odd)\n    sbodd2 = calalt(odd, even, 1)\n    temp = list()\n    if sbeven1 > sbeven2:\n        temp.append(saeven1)\n    elif sbeven1 < sbeven2:\n        temp.append(saeven2)\n    else:\n        temp.append(max(saeven1, saeven2))\n    if sbodd1 > sbodd2:\n        temp.append(saodd1)\n    elif sbodd1 < sbodd2:\n        temp.append(saodd2)\n    else:\n        temp.append(max(saodd1, saodd2))\n    print(max(temp))", "def caltwoalt(even, odd):\n    i = 0\n    leno = len(odd)\n    lene = len(even)\n    c = 0\n    f1 = False\n    f2 = False\n    while True:\n        if i % 2 == 0:\n            if i >= lene:\n                break\n            c += even[i]\n        else:\n            if i >= leno:\n                break\n            c += odd[i]\n        i += 1\n    return c\n\ndef calalt(even, odd, i):\n    leno = len(odd)\n    lene = len(even)\n    c = 0\n    while True:\n        if i >= lene:\n            break\n        c += even[i]\n        if i >= leno:\n            break\n        c += odd[i]\n        i += 2\n    return c\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    odd = list()\n    even = list()\n    for x in l:\n        if x & 1 == 1:\n            odd.append(x)\n        else:\n            even.append(x)\n    odd.sort(reverse=True)\n    even.sort(reverse=True)\n    saeven1 = calalt(even, odd, 0)\n    saeven2 = caltwoalt(even, odd)\n    saodd1 = caltwoalt(odd, even)\n    saodd2 = calalt(odd, even, 0)\n    sbeven1 = calalt(even, odd, 1)\n    sbeven2 = caltwoalt(odd, even)\n    sbodd1 = caltwoalt(even, odd)\n    sbodd2 = calalt(odd, even, 1)\n    temp = list()\n    if sbeven1 > sbeven2:\n        temp.append(saeven1)\n    elif sbeven1 < sbeven2:\n        temp.append(saeven2)\n    else:\n        temp.append(max(saeven1, saeven2))\n    if sbodd1 > sbodd2:\n        temp.append(saodd1)\n    elif sbodd1 < sbodd2:\n        temp.append(saodd2)\n    else:\n        temp.append(max(saodd1, saodd2))\n    print(max(temp))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    odd = []\n    even = []\n    for num in arr:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n    odd.sort(reverse=True)\n    even.sort(reverse=True)\n    a1 = 0\n    b1 = 0\n    i = 0\n    while i < len(even):\n        a1 += even[i]\n        if i < len(odd):\n            a1 += odd[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(even):\n        b1 += even[i]\n        if i < len(odd):\n            b1 += odd[i]\n        else:\n            break\n        i += 2\n    a2 = 0\n    b2 = 0\n    i = 0\n    while i < len(even):\n        a2 += even[i]\n        if i + 1 < len(odd):\n            a2 += odd[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(odd):\n        b2 += odd[i]\n        if i + 1 < len(even):\n            b2 += even[i + 1]\n        else:\n            break\n        i += 2\n    a3 = 0\n    b3 = 0\n    i = 0\n    while i < len(odd):\n        a3 += odd[i]\n        if i + 1 < len(even):\n            a3 += even[i + 1]\n        else:\n            break\n        i += 2\n    i = 0\n    while i < len(even):\n        b3 += even[i]\n        if i + 1 < len(odd):\n            b3 += odd[i + 1]\n        else:\n            break\n        i += 2\n    a4 = 0\n    b4 = 0\n    i = 0\n    while i < len(odd):\n        a4 += odd[i]\n        if i < len(even):\n            a4 += even[i]\n        else:\n            break\n        i += 2\n    i = 1\n    while i < len(odd):\n        b4 += odd[i]\n        if i < len(even):\n            b4 += even[i]\n        else:\n            break\n        i += 2\n    ans1 = 0\n    b = max(b1, b2)\n    if b == b1 == b2:\n        ans1 = max(a1, a2)\n    elif b == b1:\n        ans1 = a1\n    else:\n        ans1 = a2\n    ans2 = 0\n    b = max(b3, b4)\n    if b == b3 == b4:\n        ans2 = max(a3, a4)\n    elif b == b3:\n        ans2 = a3\n    else:\n        ans2 = a4\n    print(max(ans1, ans2))", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math, heapq\ninput = stdin.readline\n\ndef func(flag1, flag2, arr):\n\n    def sub(temp, flag):\n        if flag:\n            ele = 0\n            if even:\n                ele = -1 * heapq.heappop(even)\n        else:\n            ele = 0\n            if odd:\n                ele = -1 * heapq.heappop(odd)\n        temp += ele\n        if ele == 0:\n            return (temp, -1)\n        else:\n            return (temp, 1 - flag)\n    odd = [-1 * num for num in arr if num % 2 == 1]\n    even = [-1 * num for num in arr if num % 2 == 0]\n    heapq.heapify(odd)\n    heapq.heapify(even)\n    turn = 1\n    (temp1, temp2) = (0, 0)\n    while True:\n        if turn % 2 == 1:\n            if flag1 != -1:\n                (temp1, flag1) = sub(temp1, flag1)\n        elif flag2 != -1:\n            (temp2, flag2) = sub(temp2, flag2)\n        if flag1 == -1 and flag2 == -1:\n            break\n        turn += 1\n    return (temp1, temp2)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    ans = 0\n    pair1 = func(0, 0, arr)\n    pair2 = func(0, 1, arr)\n    if pair1[1] == pair2[1]:\n        ans = max(ans, max(pair1[0], pair2[0]))\n    elif pair1[1] > pair2[1]:\n        ans = max(ans, pair1[0])\n    else:\n        ans = max(ans, pair2[0])\n    pair1 = func(1, 0, arr)\n    pair2 = func(1, 1, arr)\n    if pair1[1] == pair2[1]:\n        ans = max(ans, max(pair1[0], pair2[0]))\n    elif pair1[1] > pair2[1]:\n        ans = max(ans, pair1[0])\n    else:\n        ans = max(ans, pair2[0])\n    print(ans)", "from heapq import *\n\ndef scorer_helper(eh, oh, p1_eve, p2_eve):\n    s1 = 0\n    s2 = 0\n    while True:\n        flag = False\n        if p1_eve and eh:\n            flag = True\n            s1 -= heappop(eh)\n            p1_eve = not p1_eve\n        elif not p1_eve and oh:\n            flag = True\n            s1 -= heappop(oh)\n            p1_eve = not p1_eve\n        if p2_eve and eh:\n            flag = True\n            s2 -= heappop(eh)\n            p2_eve = not p2_eve\n        elif not p2_eve and oh:\n            flag = True\n            s2 -= heappop(oh)\n            p2_eve = not p2_eve\n        if flag == False:\n            break\n    return (s1, s2)\n\ndef scorer(eh, oh, p1_even):\n    (s11, s12) = scorer_helper(eh[:], oh[:], p1_even, True)\n    (s21, s22) = scorer_helper(eh[:], oh[:], p1_even, False)\n    if s12 == s22:\n        return max(s11, s12)\n    elif s12 > s22:\n        return s11\n    return s21\nt = int(input())\nfor _ in range(t):\n    a = int(input())\n    points = list(map(int, input().split()))\n    oddheap = []\n    evenheap = []\n    for e in points:\n        if e % 2 == 1:\n            heappush(oddheap, -e)\n        else:\n            heappush(evenheap, -e)\n    pe = scorer(evenheap[:], oddheap[:], True)\n    po = scorer(evenheap[:], oddheap[:], False)\n    res = max(pe, po)\n    print(res)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(1, how_much_noob_I_am + 1):\n        n = inpu()\n        arr = lis()\n        even = []\n        odd = []\n        for i in arr:\n            if i % 2 == 0:\n                even.append(i)\n            else:\n                odd.append(i)\n        even.sort()\n        odd.sort()\n        p = [[0, 0], [1, 1], [0, 1], [1, 0]]\n        res = [inf] * 2\n        (prevalice, prevbob) = ([-inf] * 2, [-inf] * 2)\n        ans = inf\n        for (i, j) in p:\n            (alice, bob) = (0, 0)\n            (a, b) = (True, True)\n            (aliceflag, bobflag) = (i, j)\n            (p, q) = (even.copy(), odd.copy())\n            while a or b:\n                if a:\n                    if aliceflag % 2 == 0:\n                        if len(even) > 0:\n                            alice += even.pop()\n                        else:\n                            a = False\n                    elif len(odd) > 0:\n                        alice += odd.pop()\n                    else:\n                        a = False\n                    aliceflag ^= 1\n                if b:\n                    if bobflag % 2 == 0:\n                        if len(even) > 0:\n                            bob += even.pop()\n                        else:\n                            b = False\n                    elif len(odd) > 0:\n                        bob += odd.pop()\n                    else:\n                        b = False\n                    bobflag ^= 1\n            (even, odd) = (p.copy(), q.copy())\n            if prevbob[i] < bob or prevalice[i] < alice:\n                res[i] = min(res[i], max(alice, bob))\n                prevalice[i] = max(prevalice[i], alice)\n                prevbob[i] = max(prevbob[i], bob)\n        print(max(res))\nmain()", "for tcase in range(int(input())):\n    n = int(input())\n    s = [[], []]\n    for si in map(int, input().split()):\n        s[si % 2].append(si)\n    s[0].sort()\n    s[1].sort()\n    ans = 0\n    for ia in range(2):\n        scores = []\n        for ib in range(2):\n            (ap, bp) = (ia, ib)\n            (a, b, c) = ([], [], [s[0][:], s[1][:]])\n            while len(c[ap]) > 0 or len(c[bp]) > 0:\n                if len(c[ap]) > 0:\n                    a.append(c[ap].pop())\n                    ap ^= 1\n                if len(c[bp]) > 0:\n                    b.append(c[bp].pop())\n                    bp ^= 1\n            scores.append([sum(a), sum(b)])\n        d = scores[0][1] - scores[1][1]\n        if d == 0:\n            d = scores[0][0] - scores[1][0]\n        bp = 0 if d > 0 else 1\n        ans = max(ans, scores[bp][0])\n    print(ans)", "for tcase in range(int(input())):\n    n = int(input())\n    s = [[], []]\n    for si in map(int, input().split()):\n        s[si % 2].append(si)\n    s[0].sort()\n    s[1].sort()\n    ans = 0\n    for ia in range(2):\n        r = [[0, 0], [0, 0]]\n        for ib in range(2):\n            (ap, bp) = (ia, ib)\n            (a, b, c) = ([], [], [s[0][:], s[1][:]])\n            while len(c[ap]) > 0 or len(c[bp]) > 0:\n                if len(c[ap]) > 0:\n                    a.append(c[ap].pop())\n                    ap ^= 1\n                if len(c[bp]) > 0:\n                    b.append(c[bp].pop())\n                    bp ^= 1\n            (r[ib][0], r[ib][1]) = (sum(a), sum(b))\n        d = r[0][1] - r[1][1]\n        if d == 0:\n            d = r[0][0] - r[1][0]\n        ib = 0 if d > 0 else 1\n        ans = max(ans, r[ib][0])\n    print(ans)", "for tcase in range(int(input())):\n    n = int(input())\n    s = [[], []]\n    for si in map(int, input().split()):\n        s[si % 2].append(si)\n    s[0].sort()\n    s[1].sort()\n    ans = 0\n    for ia in range(2):\n        r = [[0, 0], [0, 0]]\n        for ib in range(2):\n            (ap, bp) = (ia, ib)\n            (a, b, c) = ([], [], [s[0][:], s[1][:]])\n            if len(c[ap]) > 0:\n                a.append(c[ap].pop())\n                ap ^= 1\n            if len(c[bp]) > 0:\n                b.append(c[bp].pop())\n                bp ^= 1\n            if len(a) > 0 or len(b) > 0:\n                while len(c[ap]) > 0 or len(c[bp]) > 0:\n                    if len(c[ap]) > 0:\n                        a.append(c[ap].pop())\n                        ap ^= 1\n                    if len(c[bp]) > 0:\n                        b.append(c[bp].pop())\n                        bp ^= 1\n            (r[ib][0], r[ib][1]) = (sum(a), sum(b))\n        d = r[0][1] - r[1][1]\n        if d == 0:\n            d = r[0][0] - r[1][0]\n        ib = 0 if d > 0 else 1\n        ans = max(ans, r[ib][0])\n    print(ans)"]