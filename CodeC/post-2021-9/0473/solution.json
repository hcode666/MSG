["from collections import Counter\n\ndef solve(n, arr, x):\n    positions = set()\n    for i in range(x.bit_length()):\n        if x & 1 << i > 0:\n            positions.add(i)\n    lookup = Counter()\n    res = 0\n    for num in arr:\n        required = []\n        for i in range(30):\n            if i in positions:\n                if num & 1 << i > 0:\n                    required.append(1)\n                else:\n                    required.append(0)\n        required = tuple(required)\n        res += lookup[required] * 2\n        lookup[required] += 1\n    return res + n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    print(solve(n, arr, x))", "from collections import Counter\n\ndef solve(n, arr, x):\n    positions = set()\n    for i in range(x.bit_length()):\n        if x & 1 << i > 0:\n            positions.add(i)\n    lookup = Counter()\n    res = 0\n    for num in arr:\n        required = []\n        for i in range(30):\n            if i in positions:\n                if num & 1 << i > 0:\n                    required.append(1)\n                else:\n                    required.append(0)\n        required = tuple(required)\n        res += lookup[required] * 2\n        lookup[required] += 1\n    return res + n\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    print(solve(n, arr, x))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    if x == 0:\n        le = len(l)\n        print(le ** 2)\n        continue\n    y = bin(x)\n    x = []\n    for i in range(1, len(y) - 1):\n        if y[-i] == '1':\n            x.append(i)\n    a = {}\n    for i in l:\n        j = bin(i)\n        k = len(j) - 2\n        s = ''\n        for m in x:\n            if k >= m:\n                s = j[-m] + s\n            else:\n                s = '0' + s\n                break\n        k = int(s, 2)\n        if k in a:\n            a[k] += 1\n        else:\n            a[k] = 1\n    c = 0\n    for i in a:\n        c += a[i] ** 2\n    print(c)", "import sys\nimport os\nimport math\nfrom collections import *\nimport bisect\nfrom heapq import *\nfrom itertools import permutations\nif os.path.exists('input.txt') and os.path.exists('output.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    k1 = math.gcd(a, b)\n    k2 = a * b\n    return k2 // k1\n\ndef inp():\n    return map(int, input().strip().split(' '))\n\ndef lis():\n    return list(inp())\nmod = 998244353\n\ndef prim(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nma = 2 * (10 ** 5 + 1)\n\ndef update(ind, val, n):\n    while ind <= n:\n        fenwick[ind] += val\n        ind += ind & -ind\n\ndef qsum(ind):\n    ans = 0\n    while ind > 0:\n        ans += fenwick[ind]\n        ind -= ind & -ind\n    return ans\n\ndef dfs(adj, vis, u, l):\n    vis[u] = 1\n    l.add(u)\n    for i in adj[u]:\n        if vis[i] == 0:\n            dfs(adj, vis, i, l)\nmod = 10 ** 9 + 7\nma = 1002\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\n\ndef dfs(i, j, arr, vis, n, m):\n    vis[i][j] = 1\n    for x in range(4):\n        mx = i + dx[x]\n        my = j + dy[x]\n        if mx >= 0 and mx < n and (my >= 0) and (my < m) and (vis[mx][my] == 0):\n            if arr[i][j] >= arr[mx][my]:\n                dfs(mx, my, arr, vis, n, m)\n\ndef dfs(a, vis, node, c):\n    vis[node] = 1\n    c[0] += 1\n    if vis[a[node]] == 0:\n        dfs(a, vis, a[node], c)\nmod = 998244353\n\ndef f(n):\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\n\ndef cn(n):\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    return False\n\ndef f(n):\n    i = 1\n    res = 0\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if cn(i):\n                res += 1\n            k = n // i\n            if i != k and cn(k):\n                res += 1\n        i = i + 1\n    return res\nmod = 10 ** 9 + 7\n\ndef finv(p, q):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef solve():\n    n = int(input())\n    a = lis()\n    x = int(input())\n    d = {}\n    for i in range(n):\n        k = a[i] & x\n        d[k] = d.get(k, 0) + 1\n    ans = 0\n    for i in d:\n        ans += d[i] ** 2\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    X = int(input())\n    hast = {}\n    for i in A:\n        if i & X in hast:\n            hast[i & X] += 1\n        else:\n            hast[i & X] = 1\n    res = 0\n    for i in hast:\n        res += hast[i] ** 2\n    print(res)", "for t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split(' ')]\n    k = int(input())\n    ans = 0\n    d = {}\n    for i in range(n):\n        a[i] = a[i] & k\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    for k in d:\n        ans += d[k] * d[k]\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    indices_by_and = defaultdict(list)\n    for (idx, i) in enumerate(arr):\n        indices_by_and[i & x].append(idx + 1)\n    ans = 0\n    for v in indices_by_and.values():\n        ans += len(v)\n        ans += (len(v) - 1) * len(v)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    hashmap = {}\n    for i in range(n):\n        a[i] = a[i] & x\n        if a[i] in hashmap:\n            hashmap[a[i]] += 1\n        else:\n            hashmap[a[i]] = 1\n    res = 0\n    for k in hashmap:\n        res += hashmap[k] ** 2\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    d = {}\n    for e in l:\n        andd = e & x\n        if andd in d.keys():\n            d[andd] += 1\n        else:\n            d[andd] = 1\n    count = 0\n    for k in d.keys():\n        count += d[k] * d[k]\n    print(count)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    X = int(input())\n    for i in range(N):\n        A[i] = A[i] & X\n    D = {}\n    for i in range(N):\n        if A[i] not in D:\n            D[A[i]] = 1\n        else:\n            D[A[i]] += 1\n    ans = N\n    for i in D.keys():\n        ans += int(D[i] * (D[i] - 1) / 2) * 2\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    X = int(input())\n    cnt = 0\n    d = {}\n    for i in range(N):\n        A[i] = A[i] & X\n        if A[i] in d:\n            d.update({A[i]: d[A[i]] + 1})\n        else:\n            d.update({A[i]: 1})\n    for i in d.values():\n        cnt += i * i\n    print(cnt)", "for _ in range(int(input())):\n    sdf = input()\n    l = [int(i) for i in input().split()]\n    x = int(input())\n    for i in range(len(l)):\n        l[i] = l[i] & x\n    ans = 0\n    d = dict()\n    for i in range(len(l)):\n        if l[i] in d:\n            d[l[i]] += 1\n        else:\n            d[l[i]] = 1\n    for i in d.values():\n        ans += i * i\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    d = {}\n    for num in arr:\n        if num & x in d:\n            d[num & x] += 1\n        else:\n            d[num & x] = 1\n    res = 0\n    for num in arr:\n        res += d[num & x]\n    print(res)", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = [k for k in map(int, input().split())]\n    x = int(input())\n    ans = []\n    s = dict()\n    c = 0\n    for i in range(0, n):\n        if arr[i] & x in s:\n            s[arr[i] & x] += 1\n        else:\n            s[arr[i] & x] = 1\n    for j in s.values():\n        c = c + j * j\n    print(c)", "from itertools import groupby\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    a = list(map(int, input().split()))\n    X = int(input())\n    b = []\n    for v in a:\n        b.append(v & X)\n    answer = 0\n    b.sort()\n    groups = groupby(b)\n    for g in groups:\n        cnt = len(list(g[1]))\n        answer += cnt ** 2\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        a[i] = a[i] & x\n    dic = {}\n    for i in a:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    ans = 0\n    for i in dic.values():\n        ans += i ** 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        a[i] = a[i] & x\n    dic = {}\n    for i in a:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    ans = 0\n    for i in dic.values():\n        ans += i ** 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        a[i] = a[i] & x\n    dic = {}\n    for i in a:\n        if i in dic.keys():\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    ans = 0\n    for i in dic.values():\n        ans += i ** 2\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    res = 0\n    for i in range(n):\n        a[i] = a[i] & x\n    newa = dict(Counter(a))\n    for j in newa.keys():\n        res += newa[j] * newa[j]\n    print(res)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        a[i] = a[i] & x\n    d = dict(Counter(a))\n    res = 0\n    for k in d.keys():\n        res += d[k] * d[k]\n    print(res)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        a[i] = a[i] & x\n    d = dict(Counter(a))\n    ans = 0\n    for (key, val) in d.items():\n        ans += val * val\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    X = int(input())\n    for i in range(N):\n        A[i] = A[i] & X\n    ans = 0\n    my_dict = Counter(A)\n    for _ in my_dict.values():\n        ans += _ * _\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    N = int(input())\n    a = [int(x) for x in input().split()]\n    X = int(input())\n    A = [i & X for i in a]\n    ans = 0\n    my_dict = Counter(A)\n    for _ in my_dict.values():\n        ans += _ * _\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    N = int(input())\n    a = [int(x) for x in input().split()]\n    X = int(input())\n    A = [i & X for i in a]\n    ans = 0\n    my_dict = Counter(A)\n    for _ in my_dict.values():\n        ans += _ * (_ - 1)\n    print(ans + N)", "def ans(arr, x):\n    i = 0\n    cpy = arr.copy()\n    while i != len(arr):\n        arr[i] = x & arr[i]\n        i += 1\n    dist = set(arr)\n    dict = {}\n    for y in dist:\n        dict[y] = []\n    for (y1, y2) in zip(cpy, arr):\n        dict[y2].append(y1)\n    pairs = 0\n    for y in dict:\n        pairs += len(dict[y]) ** 2\n    return pairs\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = input()\n    d2 = list(map(int, input().split()))\n    d3 = int(input())\n    print(ans(d2, d3))\n    test_cases -= 1", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    x = int(input())\n    y = [int(i) & x for i in a]\n    z = Counter(y)\n    an = 0\n    for i in z.values():\n        an += i * (i - 1)\n    print(an + n)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    d = dict()\n    for i in range(n):\n        temp = x & l[i]\n        if temp in d.keys():\n            d[temp] += 1\n        else:\n            d[temp] = 1\n    ans = 0\n    for (x, y) in d.items():\n        ans += y * y\n    print(ans)", "from collections import Counter\nT = int(input())\nfor tc in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    for i in range(len(arr)):\n        arr[i] = arr[i] & x\n    p = Counter(arr)\n    ans = 0\n    for i in p:\n        ans += p[i] * p[i]\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    mp = {}\n    ans = 0\n    for i in arr:\n        k = i & x\n        mp[k] = mp.get(k, 0) + 1\n    for (i, j) in mp.items():\n        ans += j * j\n    print(ans)", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    d = dict()\n    result = 0\n    for i in l:\n        k = i & x\n        d[k] = d.get(k, 0) + 1\n    for i in d.keys():\n        result += d[i] ** 2\n    print(result)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "def solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    d = dict()\n    result = 0\n    for i in l:\n        k = i & x\n        d[k] = d.get(k, 0) + 1\n    for i in d.keys():\n        result += d[i] ** 2\n    print(result)\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    a = [i & x for i in l]\n    c = Counter(a)\n    t = 0\n    for v in c.values():\n        if v > 1:\n            t += v * (v - 1)\n    print(t + n)", "import sys, math\nfrom tkinter import Y\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    d = {}\n    for i in range(n):\n        y = l[i] & x\n        if y in d:\n            d[y] = d[y] + 1\n        else:\n            d[y] = 1\n    ans = 0\n    for i in d:\n        ans = ans + d[i] * d[i]\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    x = int(input())\n    temp = []\n    for i in li:\n        temp.append(i & x)\n    c = Counter(temp)\n    sum = 0\n    for i in c:\n        sum += c[i] ** 2\n    print(sum)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    x = int(input())\n    cnt = defaultdict(int)\n    for i in range(n):\n        a[i] = a[i] & x\n        cnt[a[i]] += 1\n    ans = 0\n    for i in cnt:\n        ans += cnt[i] ** 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    x = int(input())\n    new_arr = list(map(lambda i: i & x, nums))\n    hash_map = dict()\n    for i in new_arr:\n        if i in hash_map:\n            hash_map[i] = 1 + hash_map.get(i)\n        else:\n            hash_map[i] = 1\n    cnt = 0\n    for (key, value) in hash_map.items():\n        cnt += value * value\n    print(cnt)", "for _ in range(int(input())):\n    coun = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = int(input())\n    l = [i & k for i in l]\n    d = {}\n    for i in l:\n        if i not in d.keys():\n            d[i] = 1\n        else:\n            d[i] += 1\n    for i in d.values():\n        coun += i * i\n    print(coun)", "import math as m\n\ndef ncr(N, R):\n    return m.factorial(N) // (m.factorial(R) * m.factorial(N - R))\n\ndef getL():\n    return [int(i) for i in input().split(' ')]\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    n = getInt()\n    arr = getL()\n    x = getInt()\n    d = {}\n    for i in arr:\n        t = i & x\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    print(sum([v * v for v in d.values()]))\nfor _ in range(getInt()):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = int(input())\n    d = {}\n    for i in a:\n        d[i & k] = d.get(i & k, 0) + 1\n    ans = 0\n    for i in d.values():\n        ans += i * i\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    a = list(map(int, input().split()))\n    x = int(input())\n    d = dict()\n    for i in range(n):\n        d[x & a[i]] = 0\n    for i in range(n):\n        d[x & a[i]] += 1\n    for i in d.values():\n        if i > 1:\n            ans += i * (i - 1) // 2\n    print(ans * 2 + n)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    c = 0\n    for i in range(n):\n        l[i] &= x\n    d = {}\n    for i in l:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    for j in d.values():\n        c += j * j\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    for i in range(len(a)):\n        a[i] = a[i] & x\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    cnt = 0\n    for i in d.values():\n        cnt += i ** 2\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    d = {}\n    ans = 0\n    for i in range(n):\n        arr[i] = arr[i] & x\n    for ele in arr:\n        d[ele] = d.get(ele, 0) + 1\n    for ele in d:\n        n = d[ele]\n        ans += n * n\n    print(ans)", "import math\nfrom collections import Counter\n\ndef solve():\n    a_and = [a_i & x for a_i in a]\n    d = Counter(a_and)\n    return sum([i ** 2 for i in d.values()])\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    print(solve())", "import math\nfrom collections import Counter\n\ndef solve():\n    a_and = [a_i & x for a_i in a]\n    d = Counter(a_and)\n    val = sum([i ** 2 for i in d.values()])\n    return val\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    d = {}\n    for i in a:\n        y = i & x\n        if y in d:\n            d[y] += 1\n        else:\n            d[y] = 1\n    b = 0\n    for i in d:\n        b += d[i] ** 2\n    print(b)", "def calculate():\n    r = []\n    total = 0\n    d = {}\n    for i in range(N):\n        r.append(arr[i] & X)\n    for i in range(N):\n        if d.get(r[i], 0):\n            d[r[i]] += 1\n        else:\n            d[r[i]] = 1\n    for ele in d.values():\n        total = total + ele * ele\n    return total\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    X = int(input())\n    print(calculate())", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    x = int(input())\n    r = []\n    res = n\n    for i in range(len(l)):\n        r.append(l[i] & x)\n    r = sorted(r)\n    k = 0\n    j = 0\n    s = dict(Counter(r))\n    for i in s:\n        k += (s[i] - 1) * s[i]\n    res += k\n    print(res)", "from collections import Counter\nfor i in range(int(input())):\n    (n, s, x) = (int(input()), input(), int(input()))\n    for i in Counter(map(lambda i: int(i) & x, s.split())).values():\n        n += i * (i - 1)\n    print(n)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    x = int(input().strip())\n    temp = list()\n    for num in arr:\n        temp.append(num & x)\n    d = Counter(temp)\n    ans = 0\n    for key in d:\n        val = d[key]\n        ans += val * val\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    dic = defaultdict(int)\n    for i in range(n):\n        dic[a[i] & x] += 1\n    ans = 0\n    for i in dic:\n        ans += dic[i] * (dic[i] - 1)\n    print(ans + n)", "from collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    d = defaultdict(lambda : 0)\n    ans = 0\n    for j in a:\n        c = j & x\n        d[c] += 1\n    for j in d.keys():\n        c = d[j]\n        c = c * (c + 1) - c\n        ans += c\n    print(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef solve(N, A, X):\n    A = [a & X for a in A]\n    frequency = {}\n    for a in A:\n        if a not in frequency:\n            frequency[a] = 0\n        frequency[a] += 1\n    return sum((frequency[f] ** 2 for f in frequency))\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    X = int(input().strip())\n    print(solve(N, A, X))", "import math\nT = int(input())\nfor _ in range(T):\n    X = int(input())\n    l = list(map(int, input().split()))\n    N = int(input())\n    a = 0\n    b = 0\n    d = dict()\n    for i in l:\n        if i & N == 0:\n            a += 1\n        elif i & N == N:\n            b += 1\n        elif i & N in d.keys():\n            d[i & N] += 1\n        else:\n            d[i & N] = 1\n    s = a * (a - 1) + b * (b - 1) + X\n    for i in d.values():\n        s += i * (i - 1)\n    print(s)", "def fact(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n == 1:\n        return 1\n    memo[n] = n * fact(n - 1, memo)\n    return memo[n]\n\ndef main(x, arr):\n    ans = 0\n    d = {}\n    for i in arr:\n        if x & i in d:\n            d[x & i] += 1\n        else:\n            d[x & i] = 1\n    for i in d.values():\n        ans += i * (i - 1)\n    return ans + len(arr)\nt = int(input())\nwhile t:\n    _ = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    print(main(x, arr))\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    c = 0\n    for j in range(n):\n        arr[j] = arr[j] & x\n    dnary = {}\n    for j in range(n):\n        if arr[j] not in dnary:\n            dnary[arr[j]] = 1\n        else:\n            dnary[arr[j]] += 1\n    l = list(dnary.values())\n    ans = 0\n    for k in l:\n        ans += k * k\n    print(ans)", "from collections import Counter\nk = int(input())\nwhile k:\n    k -= 1\n    t = int(input())\n    l = list(map(int, input().split()))\n    m = int(input())\n    f = []\n    for i in l:\n        f.append(i & m)\n    j = Counter(f)\n    sum = 0\n    for i in j:\n        sum += j[i] ** 2\n    print(sum)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    x = int(input())\n    temp = []\n    for i in li:\n        temp.append(i & x)\n    c = Counter(temp)\n    sum = 0\n    for i in c:\n        sum += c[i] ** 2\n    print(sum)", "from collections import Counter\nfor tcase in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    c = Counter([x & y for y in a])\n    print(sum((c[k] * c[k] for k in c)))", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    a = [0] * n\n    for i in range(len(arr)):\n        a[i] = arr[i] & x\n    mp = Counter(a)\n    ans = n\n    for k in mp.keys():\n        if mp[k] > 1:\n            ans += mp[k] * (mp[k] - 1)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    l = []\n    count = 0\n    for i in range(n):\n        flag = 0\n        for j in range(20):\n            if 1 << j & x and 1 << j & a[i]:\n                flag = 1\n                break\n        if flag == 1:\n            l.append(a[i])\n        else:\n            count += 1\n    d = dict()\n    res = count * count\n    for i in l:\n        count = 0\n        for j in range(20):\n            if 1 << j & x:\n                count += 1 << j & i\n        if count in d.keys():\n            d[count] += 1\n        else:\n            d[count] = 1\n    for i in d.values():\n        res += i * i\n    print(res)\n    t -= 1", "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nmod = 10 ** 4\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    ans = []\n    for p in range(2, n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\n\ndef nextPowerOf2(n):\n    count = 0\n    if n and (not n & n - 1):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\nfrom collections import defaultdict\nimport math\n\ndef primeFactors(n):\n    res = []\n    while n % 2 == 0:\n        res.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            res.append(i)\n            n = n // i\n    if n > 2:\n        res.append(n)\n    return res\n\ndef upper_bound(arr, target):\n    start = 0\n    end = len(arr) - 1\n    ans = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if arr[mid] <= target:\n            start = mid + 1\n        else:\n            ans = mid\n            end = mid - 1\n    return ans\n\ndef get_dis(s1, s2):\n    s = 'abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz'\n    a1 = s.index(s1)\n    a2 = s.rfind(s1)\n    b1 = s.index(s2)\n    b2 = s.rfind(s2)\n    return min(abs(a1 - b1), abs(a1 - b2), abs(a2 - b1), abs(a2 - b2))\nfrom collections import defaultdict\n\ndef func(l, m):\n    ans = 0\n    s = set()\n    for ele in l:\n        ans += ele % m\n        print(ans, ele % m, ele, m)\n        if ele % m in s:\n            return -1\n    print('tot', len(l) * (len(l) + 1) // 2, ans)\n    if ans == len(l) * (len(l) + 1) // 2:\n        return 1\n    return 0\n\ndef printDivisors(n):\n    i = 1\n    res = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                res.append(i)\n            else:\n                res.append(i)\n                res.append(n // i)\n        i = i + 1\n    return res\n\ndef func(x):\n    c = 0\n    while x != 0 and x % 2 == 0:\n        x = x // 2\n        c += 1\n    return c\nINF = 1000000000000000000000\nfrom collections import deque\nimport math\n\ndef solve():\n    d = defaultdict(int)\n    n = int(input())\n    lis = list(map(int, input().split()))\n    x = int(input())\n    for i in range(len(lis)):\n        lis[i] &= x\n        d[lis[i]] += 1\n    ans = 0\n    for (k, v) in d.items():\n        ans += v * (v - 1)\n    print(ans + n)\nnum_test = 1\nnum_test = int(input())\nfor _ in range(num_test):\n    solve()", "from collections import Counter, deque, defaultdict\nfrom math import *\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    arr = []\n    ans = 0\n    for i in range(n):\n        if x & a[i]:\n            arr.append(a[i])\n        else:\n            ans += 1\n    ans *= ans\n    d = defaultdict(int)\n    for i in arr:\n        d[i & x] += 1\n    for i in d.keys():\n        ans += d[i] ** 2\n    print(ans)\ntestCases = int(input())\nfor i in range(testCases):\n    solve()", "from typing import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        l[i] &= x\n    d = Counter(l)\n    ans = n\n    for j in d.values():\n        ans += j * (j - 1)\n    print(ans)", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        l = list(map(int, input().split()))\n        x = int(input())\n        c = n\n        d = {}\n        for i in range(n):\n            l[i] &= x\n            d[l[i]] = d.get(l[i], 0) + 1\n        for i in d:\n            c += d[i] * (d[i] - 1) // 2 * 2\n        print(c)\nexcept:\n    pass", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        x = int(input())\n        d = dict()\n        for i in range(n):\n            val = arr[i] & x\n            d[val] = d.get(val, 0) + 1\n        ans = 0\n        for k in d:\n            ans += d[k] * (d[k] - 1)\n        print(ans + n)\nexcept:\n    pass", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    arr = [i & x for i in arr]\n    c = Counter(arr)\n    ans = 0\n    for i in c:\n        ans += c[i] * c[i]\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    new_arr = []\n    for i in arr:\n        new_arr.append(i & x)\n    cntr = Counter(new_arr)\n    s = 0\n    for i in cntr:\n        s += cntr[i] ** 2\n    print(s)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = int(input())\n    b = []\n    for i in l:\n        b.append(i & k)\n    g = Counter(b)\n    s = 0\n    for i in g:\n        s += g[i] ** 2\n    print(s)", "to = int(input())\nimport collections\nwhile to > 0:\n    no = int(input())\n    ao = input().split()\n    for i in range(no):\n        ao[i] = int(ao[i])\n    xo = int(input())\n    d = collections.defaultdict(int)\n    for i in range(no):\n        ao[i] = ao[i] & xo\n        d[ao[i]] += 1\n    anos = 0\n    for i in range(no):\n        if d[ao[i]] > 0:\n            anos += d[ao[i]] * d[ao[i]]\n            d[ao[i]] = 0\n    print(anos)\n    anos = 0\n    a = 0\n    b = 0\n    (c, d, e) = (0, 0, 1)\n    to -= 1", "import math\n\ndef npr(n):\n    return n * (n - 1)\nfor tc in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        l[i] = l[i] & x\n    l.sort()\n    l.append(-1)\n    (c, s) = (1, 0)\n    for i in range(1, n + 1):\n        if l[i] != l[i - 1]:\n            if i != 1:\n                s += npr(c)\n            c = 1\n        else:\n            c += 1\n    print(s + n)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = int(input())\n    for i in range(len(arr)):\n        arr[i] = arr[i] & k\n    setx = Counter(arr)\n    res = 0\n    for (i, c) in setx.items():\n        res += c * c\n    print(res)", "class Node:\n\n    def __init__(self):\n        self.left = None\n        self.right = None\n        self.count = 0\n\nclass Trie:\n\n    def __init__(self):\n        self.master = Node()\n\n    def insert(self, binary):\n        self._insert(binary, 30, self.master)\n\n    def _insert(self, binary, bitNo, node):\n        if bitNo == -1:\n            node.count += 1\n            return\n        if binary & 1 << bitNo:\n            if not node.right:\n                node.right = Node()\n            self._insert(binary, bitNo - 1, node.right)\n        else:\n            if not node.left:\n                node.left = Node()\n            self._insert(binary, bitNo - 1, node.left)\n\n    def search(self, binary):\n        node = self.master\n        for i in range(30, -1, -1):\n            if binary & 1 << i == 0:\n                if node.left:\n                    node = node.left\n                else:\n                    return 0\n            elif node.right:\n                node = node.right\n            else:\n                return 0\n        return node.count\nfrom collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = int(input())\n    for i in range(len(arr)):\n        arr[i] = arr[i] & k\n    setx = Counter(arr)\n    res = 0\n    for (i, c) in setx.items():\n        res += c * c\n    print(res)", "def find_substr(string, indexes):\n    s = ''\n    for i in indexes:\n        if len(string) - i >= 0:\n            s += string[len(string) - i]\n    return s\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    X = int(input())\n    X = '{0:b}'.format(X)\n    b = [len(X) - idx for (idx, v) in enumerate(X) if v == '1']\n    M = len(X)\n    ans = dict()\n    for i in range(N):\n        a = str('{0:b}'.format(A[i])).zfill(M + 1)\n        a = find_substr(a, b)\n        if a in ans.keys():\n            ans[a] += 1\n        else:\n            ans[a] = 1\n    x = 0\n    for k in ans.keys():\n        x += ans[k] ** 2\n    print(x)", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        a[i] = a[i] & x\n    d = Counter(a)\n    a = list(d.keys())\n    ans = 0\n    n = len(a)\n    for i in range(n):\n        b = x & a[i]\n        ans += d[a[i]] * d[b]\n    print(ans)", "class Node:\n\n    def __init__(self):\n        self.left = None\n        self.right = None\n        self.count = 0\n\nclass Trie:\n\n    def __init__(self):\n        self.master = Node()\n\n    def insert(self, binary):\n        self._insert(binary, 30, self.master)\n\n    def _insert(self, binary, bitNo, node):\n        if bitNo == -1:\n            node.count += 1\n            return\n        if binary & 1 << bitNo:\n            if not node.right:\n                node.right = Node()\n            self._insert(binary, bitNo - 1, node.right)\n        else:\n            if not node.left:\n                node.left = Node()\n            self._insert(binary, bitNo - 1, node.left)\n\n    def search(self, binary):\n        node = self.master\n        for i in range(30, -1, -1):\n            if binary & 1 << i == 0:\n                if node.left:\n                    node = node.left\n                else:\n                    return 0\n            elif node.right:\n                node = node.right\n            else:\n                return 0\n        return node.count\nfrom collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = int(input())\n    for i in range(len(arr)):\n        arr[i] = arr[i] & k\n    setx = Counter(arr)\n    res = 0\n    for (i, c) in setx.items():\n        res += c * c\n    print(res)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        a[i] = a[i] & x\n    ans = 0\n    a.sort()\n    cur = 1\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            cur += 1\n        else:\n            ans = ans + cur * cur\n            cur = 1\n    ans = ans + cur * cur\n    print(ans)", "from collections import defaultdict\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    d = defaultdict(lambda : 0)\n    ans = 0\n    for j in a:\n        c = j & x\n        d[c] += 1\n    for j in d.keys():\n        c = d[j]\n        c = c * (c + 1) - c\n        ans += c\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    x = int(input())\n    b = bin(x).replace('0b', '')\n    d = []\n    b = b[::-1]\n    if len(set(s)) == 1:\n        print(n * n)\n        continue\n    for i in range(len(b)):\n        if b[i] == '1':\n            d.append(i)\n    arr = []\n    q1 = [s]\n    di = {}\n    for i in s:\n        q = bin(i).replace('0b', '')\n        q = q[::-1]\n        di[i] = q\n    for i in d:\n        q2 = []\n        for j in q1:\n            mat = []\n            mat1 = []\n            for k in j:\n                z = di[k]\n                if len(z) > i and z[i] == '1':\n                    mat.append(k)\n                else:\n                    mat1.append(k)\n            q2.append(mat)\n            q2.append(mat1)\n        q1 = q2\n    ans = 0\n    for i in q1:\n        q = len(i)\n        ans += q * q\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    x = int(input())\n    lk = {}\n    pos = []\n    target = 0\n    for i in range(30):\n        if 1 << i & x > 0:\n            pos.append(i)\n            target |= 1 << i\n    ans = 0\n    for i in range(n):\n        num = ar[i]\n        curr = 0\n        for bit in pos:\n            curr = curr | 1 << bit & num\n        if curr in lk:\n            ans += lk[curr]\n            lk[curr] += 1\n        else:\n            lk[curr] = 1\n    print(2 * ans + n)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        x = inpu()\n        arr = [i & x for i in arr]\n        c = Counter(arr)\n        ans = 0\n        for i in c:\n            ans += c[i] * c[i]\n        print(ans)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    b = {}\n    s = 0\n    for i in range(n):\n        try:\n            b[a[i] & x] += 1\n        except:\n            b[a[i] & x] = 1\n    for i in b:\n        s += b[i] ** 2\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    l2 = []\n    for i in l:\n        l2.append(i & x)\n    d = dict()\n    for j in l2:\n        if j in d:\n            d[j] += 1\n        else:\n            d[j] = 1\n    sm = 0\n    for k in d:\n        v = d[k]\n        val = v * (v - 1)\n        sm += val\n    sm += n\n    print(sm)", "import collections\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    M = int(input())\n    B = []\n    for i in range(N):\n        B.append(A[i] & M)\n    ans = 0\n    C = collections.Counter(B)\n    val = C.values()\n    for i in val:\n        ans += i * i\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    for i in range(n):\n        l[i] = l[i] & x\n    d = {}\n    for i in range(n):\n        if l[i] not in d:\n            d[l[i]] = 1\n        else:\n            d[l[i]] += 1\n    count = 0\n    for (i, j) in d.items():\n        count += j * j\n    print(count)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = int(input())\n    dcit = {}\n    if x == 0 or a == [0] * n:\n        print(n * n)\n        continue\n    for j in a:\n        ar = j & x\n        if ar in dcit:\n            dcit[ar] += 1\n        else:\n            dcit[ar] = 1\n    ans = 0\n    for j in dcit.values():\n        ans += j * j\n    print(ans)", "t = int(input())\nimport collections\nwhile t > 0:\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    x = int(input())\n    d = collections.defaultdict(int)\n    for i in range(n):\n        a[i] = a[i] & x\n        d[a[i]] += 1\n    ans = 0\n    for i in range(n):\n        if d[a[i]] > 0:\n            ans += d[a[i]] * d[a[i]]\n            d[a[i]] = 0\n    print(ans)\n    t -= 1", "from collections import Counter\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    X = int(input())\n    AX = [a & X for a in A]\n    d = Counter(AX)\n    ans = 0\n    for k in d.keys():\n        ans += d[k] ** 2\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    dit = {}\n    for e in arr:\n        a = e & x\n        if a in dit:\n            dit[a] += 1\n        else:\n            dit[a] = 1\n    ans = 0\n    for e in dit.values():\n        ans += e ** 2\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    x = int(input())\n    s = bin(x).replace('0b', '')\n    l = len(s)\n    s = '0' * (32 - l) + s\n    ind0 = []\n    for j in range(32):\n        if s[j] == '1':\n            ind0.append(j)\n    lst1 = []\n    for j in lst:\n        s = bin(j).replace('0b', '')\n        l = len(s)\n        s = '0' * (32 - l) + s\n        ans = ''\n        for g in ind0:\n            ans += s[g]\n        lst1.append(ans)\n    dic = {}\n    for j in lst1:\n        dic[j] = 0\n    for j in lst1:\n        dic[j] += 1\n    c = 0\n    for j in dic.keys():\n        if dic[j] > 1:\n            ele = dic[j]\n            ad = ele * (ele - 1)\n            c += ad\n    print(c + n)", "T = int(input())\nfrom collections import defaultdict\nfor _ in range(T):\n    N = int(input())\n    lst = list(map(int, input().split()))\n    X = int(input())\n    d = defaultdict(int)\n    ans = 0\n    if X == 0:\n        ans = N * N\n    else:\n        for i in range(N):\n            lst[i] = lst[i] & X\n            d[lst[i]] += 1\n        for v in d.values():\n            ans += v * v\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = int(input())\n    d = {}\n    for i in range(n):\n        a = l[i] & x\n        if a in d.keys():\n            d[a] += 1\n        else:\n            d[a] = 1\n    y = list(d.values())\n    count = 0\n    for j in range(len(y)):\n        b = y[j] ** 2\n        count += b\n    print(count)", "for t in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    k = int(input())\n    data = {}\n    output = 0\n    for i in arr:\n        if i & k in data:\n            data[i & k] += 1\n        else:\n            data[i & k] = 1\n    for i in data:\n        output += data[i] ** 2\n    print(output)", "testcase = int(input())\nwhile testcase > 0:\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    x = int(input())\n    count = {}\n    for i in arr:\n        num = i & x\n        count[num] = count.get(num, 0) + 1\n    res = 0\n    for (i, j) in count.items():\n        res += j * j\n    print(res)\n    testcase -= 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = int(input())\n    m = set()\n    for i in range(32, -1, -1):\n        if x >> i & 1:\n            m.add(i)\n    d = {}\n    ans = 0\n    for el in arr:\n        temp = ''\n        for b in m:\n            if el >> b & 1:\n                temp += '1'\n            else:\n                temp += '0'\n        if temp not in d:\n            d[temp] = 0\n        ans += d[temp]\n        d[temp] += 1\n    print(ans * 2 + n)"]