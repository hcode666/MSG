["from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        dp = [[inf] * 21 for i in range(n)]\n        for i in range(-10, 11):\n            dp[0][i] = 1 << abs(i)\n        for i in range(1, n):\n            for j in range(-10, 11):\n                for k in range(-10, 11):\n                    if math.gcd(arr[i - 1] + j, arr[i] + k) == 1:\n                        dp[i][k] = min(dp[i][k], dp[i - 1][j] + (1 << abs(k))) % M\n        ans = inf\n        for i in range(-10, 11):\n            ans = min(ans, dp[n - 1][i])\n        print(ans % M)\nmain()", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        dp = [[inf] * 21 for i in range(n)]\n        for i in range(-10, 11):\n            dp[0][i] = 1 << abs(i)\n        for i in range(1, n):\n            for j in range(-10, 11):\n                for k in range(-10, 11):\n                    if math.gcd(arr[i - 1] + j, arr[i] + k) == 1:\n                        dp[i][k] = min(dp[i][k], dp[i - 1][j] + (1 << abs(k))) % M\n        ans = inf\n        for i in range(-10, 11):\n            ans = min(ans, dp[n - 1][i])\n        print(ans % M)\nmain()", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        dp = [[inf] * 21 for i in range(n)]\n        for i in range(-10, 11):\n            dp[0][i] = 1 << abs(i)\n        for i in range(1, n):\n            for j in range(-10, 11):\n                for k in range(-10, 11):\n                    if math.gcd(arr[i - 1] + j, arr[i] + k) == 1:\n                        dp[i][k] = min(dp[i][k], dp[i - 1][j] + (1 << abs(k))) % M\n        ans = inf\n        for i in range(-10, 11):\n            ans = min(ans, dp[n - 1][i])\n        print(ans % M)\nmain()", "from math import gcd\nfrom sys import stdin\ninput = stdin.readline\n\ndef solve(N, A):\n    k = 10\n    dp = [None] * N\n    dp[0] = {j: 2 ** abs(j) for j in range(-k, k + 1)}\n    for i in range(1, N):\n        dp[i] = {j: float('inf') for j in range(-k, k + 1)}\n        for j1 in range(-k, k + 1):\n            cost = 2 ** abs(j1)\n            for j2 in range(-k, k + 1):\n                if gcd(A[i - 1] + j2, A[i] + j1) == 1:\n                    dp[i][j1] = min(dp[i][j1], dp[i - 1][j2] + cost)\n    return min((dp[N - 1][j] for j in range(-k, k + 1)))\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A))", "import sys, math\ninput = sys.stdin.readline\nM = int(1000000000.0) + 7\nk = 5\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[float('inf') for _ in range(2 * k + 1)] for _ in range(n)]\n    for j in range(-k, k + 1):\n        dp[0][j + k] = 2 ** abs(j)\n    for i in range(1, n):\n        for j in range(-k, k + 1):\n            for jj in range(-k, k + 1):\n                (x, y) = (a[i] + j, a[i - 1] + jj)\n                if x < 0 or y < 0:\n                    continue\n                if math.gcd(x, y) > 1:\n                    continue\n                if dp[i - 1][jj + k] == float('inf'):\n                    continue\n                dp[i][j + k] = min(dp[i][j + k], dp[i - 1][jj + k] + 2 ** abs(j))\n    return min(dp[-1]) % M\nfor _ in range(int(input())):\n    print(solve())", "import sys, math\ninput = sys.stdin.readline\nM = int(1000000000.0) + 7\nk = 10\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [[float('inf') for _ in range(2 * k + 1)] for _ in range(n)]\n    for j in range(-k, k + 1):\n        dp[0][j + k] = 2 ** abs(j)\n    for i in range(1, n):\n        for j in range(-k, k + 1):\n            for jj in range(-k, k + 1):\n                (x, y) = (a[i] + j, a[i - 1] + jj)\n                if x < 0 or y < 0:\n                    continue\n                if math.gcd(x, y) > 1:\n                    continue\n                if dp[i - 1][jj + k] == float('inf'):\n                    continue\n                dp[i][j + k] = min(dp[i][j + k], dp[i - 1][jj + k] + 2 ** abs(j))\n    return min(dp[-1]) % M\nfor _ in range(int(input())):\n    print(solve())", "import sys\nsys.setrecursionlimit(1000000)\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n\ndef yn(ans):\n    if ans:\n        print('YES')\n    else:\n        print('NO')\nfrom math import gcd\nfor T in range(int(input())):\n    n = ni()\n    a = li()\n    dp = []\n    k = 3\n    from math import inf\n    for i in range(2 * k + 1):\n        dp.append([inf] * n)\n    for i in range(2 * k + 1):\n        dp[i][0] = 2 ** abs(i - k)\n    for i in range(1, n):\n        for j in range(2 * k + 1):\n            for l in range(2 * k + 1):\n                if gcd(a[i] + (j - k), a[i - 1] + l - k) == 1:\n                    dp[j][i] = min(dp[j][i], dp[l][i - 1] + 2 ** abs(j - k))\n    ans = inf\n    for i in dp:\n        ans = min(i[-1], ans)\n    print(ans)", "import sys\nsys.setrecursionlimit(1000000)\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n\ndef yn(ans):\n    if ans:\n        print('YES')\n    else:\n        print('NO')\nfrom math import gcd\nfor T in range(int(input())):\n    n = ni()\n    a = li()\n    dp = []\n    k = 2\n    from math import inf\n    for i in range(2 * k + 1):\n        dp.append([inf] * n)\n    for i in range(2 * k + 1):\n        dp[i][0] = 2 ** abs(i - k)\n    for i in range(1, n):\n        for j in range(2 * k + 1):\n            for l in range(2 * k + 1):\n                if gcd(a[i] + (j - k), a[i - 1] + l - k) == 1:\n                    dp[j][i] = min(dp[j][i], dp[l][i - 1] + 2 ** abs(j - k))\n    ans = inf\n    for i in dp:\n        ans = min(i[-1], ans)\n    print(ans)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        dp = [[inf] * 21 for i in range(n)]\n        for i in range(-10, 11):\n            dp[0][i] = 1 << abs(i)\n        for i in range(1, n):\n            for j in range(-10, 11):\n                for k in range(-10, 11):\n                    if math.gcd(arr[i - 1] + j, arr[i] + k) == 1:\n                        dp[i][k] = min(dp[i][k], dp[i - 1][j] + (1 << abs(k))) % M\n        ans = inf\n        for i in range(-10, 11):\n            ans = min(ans, dp[n - 1][i])\n        print(ans % M)\nmain()"]