["for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    assert all((x > 0 for x in a))\n    sm = sum(a)\n    if sm % 2 != 0:\n        print(-1)\n        continue\n    ps_sm = {0: []}\n    for (i, x) in enumerate(a):\n        ps_sm_new = ps_sm.copy()\n        for (v, indices) in ps_sm.items():\n            if v + x not in ps_sm_new:\n                ps_sm_new[v + x] = indices + [i]\n        ps_sm = ps_sm_new\n    if sm // 2 not in ps_sm:\n        print(-1)\n        continue\n    indices_1 = ps_sm[sm // 2]\n    indices_2 = [i for i in range(len(a)) if i not in indices_1]\n    vals_1 = [[a[i], i] for i in indices_1]\n    vals_2 = [[a[i], i] for i in indices_2]\n    ops = []\n    while len(vals_1) != 0:\n        ops.append([vals_1[0][1], vals_2[0][1]])\n        min_v = min(vals_1[0][0], vals_2[0][0])\n        vals_1[0][0] -= min_v\n        vals_2[0][0] -= min_v\n        if vals_1[0][0] == 0:\n            del vals_1[0]\n        if vals_2[0][0] == 0:\n            del vals_2[0]\n    assert len(vals_2) == 0\n    print(len(ops))\n    for (x, y) in ops:\n        print(x + 1, y + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    assert all((x > 0 for x in a))\n    sm = sum(a)\n    if sm % 2 != 0:\n        print(-1)\n        continue\n    ps_sm = {0: []}\n    for (i, x) in enumerate(a):\n        ps_sm_new = ps_sm.copy()\n        for (v, indices) in ps_sm.items():\n            if v + x not in ps_sm_new:\n                ps_sm_new[v + x] = indices + [i]\n        ps_sm = ps_sm_new\n    if sm // 2 not in ps_sm:\n        print(-1)\n        continue\n    indices_1 = ps_sm[sm // 2]\n    indices_2 = [i for i in range(len(a)) if i not in indices_1]\n    vals_1 = [[a[i], i] for i in indices_1]\n    vals_2 = [[a[i], i] for i in indices_2]\n    ops = []\n    while len(vals_1) != 0:\n        ops.append([vals_1[0][1], vals_2[0][1]])\n        min_v = min(vals_1[0][0], vals_2[0][0])\n        vals_1[0][0] -= min_v\n        vals_2[0][0] -= min_v\n        if vals_1[0][0] == 0:\n            del vals_1[0]\n        if vals_2[0][0] == 0:\n            del vals_2[0]\n    assert len(vals_2) == 0\n    print(len(ops))\n    for (x, y) in ops:\n        print(x + 1, y + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    assert all((x > 0 for x in a))\n    sm = sum(a)\n    if sm % 2 != 0:\n        print(-1)\n        continue\n    ps_sm = {0: []}\n    for (i, x) in enumerate(a):\n        ps_sm_new = ps_sm.copy()\n        for (v, indices) in ps_sm.items():\n            if v + x not in ps_sm_new:\n                ps_sm_new[v + x] = indices + [i]\n        ps_sm = ps_sm_new\n    if sm // 2 not in ps_sm:\n        print(-1)\n        continue\n    indices_1 = ps_sm[sm // 2]\n    indices_2 = [i for i in range(len(a)) if i not in indices_1]\n    vals_1 = [[a[i], i] for i in indices_1]\n    vals_2 = [[a[i], i] for i in indices_2]\n    ops = []\n    while len(vals_1) != 0:\n        ops.append([vals_1[0][1], vals_2[0][1]])\n        min_v = min(vals_1[0][0], vals_2[0][0])\n        vals_1[0][0] -= min_v\n        vals_2[0][0] -= min_v\n        if vals_1[0][0] == 0:\n            del vals_1[0]\n        if vals_2[0][0] == 0:\n            del vals_2[0]\n    assert len(vals_2) == 0\n    print(len(ops))\n    for (x, y) in ops:\n        print(x + 1, y + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    assert all((x > 0 for x in a))\n    sm = sum(a)\n    if sm % 2 != 0:\n        print(-1)\n        continue\n    ps_sm = {0: []}\n    for (i, x) in enumerate(a):\n        ps_sm_new = ps_sm.copy()\n        for (v, indices) in ps_sm.items():\n            if v + x not in ps_sm_new:\n                ps_sm_new[v + x] = indices + [i]\n        ps_sm = ps_sm_new\n    if sm // 2 not in ps_sm:\n        print(-1)\n        continue\n    indices_1 = ps_sm[sm // 2]\n    indices_2 = [i for i in range(len(a)) if i not in indices_1]\n    vals_1 = [[a[i], i] for i in indices_1]\n    vals_2 = [[a[i], i] for i in indices_2]\n    ops = []\n    while len(vals_1) != 0:\n        ops.append([vals_1[0][1], vals_2[0][1]])\n        min_v = min(vals_1[0][0], vals_2[0][0])\n        vals_1[0][0] -= min_v\n        vals_2[0][0] -= min_v\n        if vals_1[0][0] == 0:\n            del vals_1[0]\n        if vals_2[0][0] == 0:\n            del vals_2[0]\n    assert len(vals_2) == 0\n    print(len(ops))\n    for (x, y) in ops:\n        print(x + 1, y + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    assert all((x > 0 for x in a))\n    sm = sum(a)\n    if sm % 2 != 0:\n        print(-1)\n        continue\n    ps_sm = {0: []}\n    for (i, x) in enumerate(a):\n        ps_sm_new = ps_sm.copy()\n        for (v, indices) in ps_sm.items():\n            if v + x not in ps_sm_new:\n                ps_sm_new[v + x] = indices + [i]\n        ps_sm = ps_sm_new\n    if sm // 2 not in ps_sm:\n        print(-1)\n        continue\n    indices_1 = ps_sm[sm // 2]\n    indices_2 = [i for i in range(len(a)) if i not in indices_1]\n    vals_1 = [[a[i], i] for i in indices_1]\n    vals_2 = [[a[i], i] for i in indices_2]\n    ops = []\n    while len(vals_1) != 0:\n        ops.append([vals_1[0][1], vals_2[0][1]])\n        min_v = min(vals_1[0][0], vals_2[0][0])\n        vals_1[0][0] -= min_v\n        vals_2[0][0] -= min_v\n        if vals_1[0][0] == 0:\n            del vals_1[0]\n        if vals_2[0][0] == 0:\n            del vals_2[0]\n    assert len(vals_2) == 0\n    print(len(ops))\n    for (x, y) in ops:\n        print(x + 1, y + 1)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    assert all((x > 0 for x in a))\n    sm = sum(a)\n    if sm % 2 != 0:\n        print(-1)\n        continue\n    ps_sm = {0: []}\n    for (i, x) in enumerate(a):\n        ps_sm_new = ps_sm.copy()\n        for (v, indices) in ps_sm.items():\n            if v + x not in ps_sm_new:\n                ps_sm_new[v + x] = indices + [i]\n        ps_sm = ps_sm_new\n    if sm // 2 not in ps_sm:\n        print(-1)\n        continue\n    indices_1 = ps_sm[sm // 2]\n    indices_2 = [i for i in range(len(a)) if i not in indices_1]\n    vals_1 = [[a[i], i] for i in indices_1]\n    vals_2 = [[a[i], i] for i in indices_2]\n    ops = []\n    while len(vals_1) != 0:\n        ops.append([vals_1[0][1], vals_2[0][1]])\n        min_v = min(vals_1[0][0], vals_2[0][0])\n        vals_1[0][0] -= min_v\n        vals_2[0][0] -= min_v\n        if vals_1[0][0] == 0:\n            del vals_1[0]\n        if vals_2[0][0] == 0:\n            del vals_2[0]\n    assert len(vals_2) == 0\n    print(len(ops))\n    for (x, y) in ops:\n        print(x + 1, y + 1)", "def LII():\n    return [int(x) for x in input().split()]\n\ndef II():\n    return int(input())\nfor _ in range(int(input())):\n    n = II()\n    a = LII()\n    assert len(a) == n\n    assert all((x > 0 for x in a))\n    sm = sum(a)\n    if sm % 2 != 0:\n        print(-1)\n        continue\n    ps_sm = {0: []}\n    for (i, x) in enumerate(a):\n        ps_sm_new = ps_sm.copy()\n        for (v, indices) in ps_sm.items():\n            if v + x not in ps_sm_new:\n                ps_sm_new[v + x] = indices + [i]\n        ps_sm = ps_sm_new\n    if sm // 2 not in ps_sm:\n        print(-1)\n        continue\n    indices_1 = ps_sm[sm // 2]\n    indices_2 = [i for i in range(len(a)) if i not in indices_1]\n    vals_1 = [[a[i], i] for i in indices_1]\n    vals_2 = [[a[i], i] for i in indices_2]\n    vals_1.sort()\n    vals_2.sort()\n    ops = []\n    while len(vals_1) != 0:\n        ops.append([vals_1[0][1], vals_2[0][1]])\n        min_v = min(vals_1[0][0], vals_2[0][0])\n        vals_1[0][0] -= min_v\n        vals_2[0][0] -= min_v\n        if vals_1[0][0] == 0:\n            del vals_1[0]\n        if vals_2[0][0] == 0:\n            del vals_2[0]\n    assert len(vals_2) == 0\n    print(len(ops))\n    for (x, y) in ops:\n        print(x + 1, y + 1)"]