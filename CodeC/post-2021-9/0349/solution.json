["import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        l[i - 1] = abs(l[i - 1] - i)\n    hcf = l[0]\n    for j in range(1, n):\n        hcf = math.gcd(hcf, l[j])\n    print(hcf)", "import math\nfor ii in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        if l[i] != i + 1:\n            l1.append(abs(l[i] - i - 1))\n    if l1 == []:\n        print(0)\n    elif len(l1) == 1:\n        print(l1[0])\n    elif len(l1) == 2:\n        print(math.gcd(l1[0], l1[1]))\n    else:\n        a = math.gcd(l1[0], l1[1])\n        for i in range(2, len(l1)):\n            a = math.gcd(a, l1[i])\n        print(a)", "import math\nfor ii in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for i in range(n):\n        if l[i] != i + 1:\n            l1.append(abs(l[i] - i - 1))\n    if l1 == []:\n        print(0)\n    elif len(l1) == 1:\n        print(l1[0])\n    elif len(l1) == 2:\n        print(math.gcd(l1[0], l1[1]))\n    else:\n        a = math.gcd(l1[0], l1[1])\n        for i in range(2, len(l1)):\n            a = math.gcd(a, l1[i])\n        print(a)", "import math\ntt = int(input())\nfor _ in range(tt):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, abs(a[i] - (i + 1)))\n    print(ans)", "def computeGCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[p[i]] = i + 1\n    a = []\n    for i in d.keys():\n        if i != d[i]:\n            a.append(abs(i - d[i]))\n    g = 0\n    for i in range(len(a)):\n        g = computeGCD(g, a[i])\n    print(g)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = 0\n    for i in range(n):\n        m = math.gcd(m, abs(l[i] - (i + 1)))\n    print(m)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = 0\n    for i in range(n):\n        m = math.gcd(m, abs(l[i] - (i + 1)))\n    print(m)", "import math\nn = int(input())\nfor _ in range(n):\n    n1 = int(input())\n    x = list(map(int, input().split()))\n    x = list(enumerate(x))\n    y = sorted(x, key=lambda z: z[1])\n    z = 0\n    for i in range(n1):\n        k = abs(y[i][0] - x[i][0])\n        z = math.gcd(z, k)\n    print(z)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, i - pos[i])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, i - pos[i])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        count = math.gcd(count, abs(p[i] - (i + 1)))\n    print(count)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        count = math.gcd(count, abs(p[i] - (i + 1)))\n    print(count)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        count = math.gcd(count, abs(p[i] - (i + 1)))\n    print(count)", "import math\ntt = 1\ntt = int(input())\nfor j in range(tt):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, abs(a[i] - (i + 1)))\n    print(ans)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    fv = 0\n    lv = 0\n    l = [int(i) for i in input().split()]\n    sl = []\n    ans = 0\n    for i in range(n):\n        if i + 1 != l[i]:\n            ans = gcd(ans, abs(l[i] - (i + 1)))\n    print(ans)", "from math import gcd\na = int(input())\nfor i in range(a):\n    b = int(input())\n    c = list(map(int, input().split()))\n    a = 0\n    for j in range(0, len(c)):\n        a = gcd(abs(j + 1 - c[j]), a)\n    print(a)", "import math\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lst = [x for x in range(1, n + 1)]\n    dic = dict()\n    r = 0\n    for i in range(n):\n        r = abs(arr[i] - lst[i])\n        if r not in dic:\n            dic[r] = 1\n    gcd = r\n    for i in dic.keys():\n        gcd = math.gcd(i, gcd)\n    print(gcd)\n    T -= 1", "import numpy as np\nfrom collections import Counter\n\ndef find_GCD(numbers):\n    if len(numbers) == 1:\n        return numbers[0]\n    else:\n        baseline = min(numbers)\n        remainings = numbers % baseline\n        together = np.append(remainings[remainings != 0], baseline)\n        return find_GCD(together)\nT = int(input())\nfor tc in range(T):\n    size = int(input())\n    per = input().split(' ')\n    per = np.array(list(map(int, per)))\n    stand = np.array(range(1, size + 1))\n    dif = abs(per - stand)\n    freq = Counter(dif)\n    del freq[0]\n    print(find_GCD(np.array(list(freq.keys()))))", "import math\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    for (i, j) in enumerate(l):\n        l1.append(j - (i + 1))\n    print(reduce(math.gcd, l1))", "def g(n, m):\n    if m == 0:\n        return n\n    return g(m, n % m)\nfor i in range(int(input())):\n    x = int(input())\n    li = list(map(int, input().split()))\n    m = 0\n    for j in range(x):\n        a = abs(li[j] - (j + 1))\n        m = g(m, a)\n    print(m)", "T = int(input())\nvector = lambda x, t: [t(num) for num in x.split()]\nfrom math import gcd\nfor _ in range(T):\n    n = int(input())\n    nums = vector(input(), int)\n    g = 0\n    for (a, b) in zip(nums, sorted(nums)):\n        if a != b:\n            g = gcd(abs(a - b), g)\n    print(g)", "def gcd(a, b):\n    if b == 0:\n        return a\n    aprime = a % b\n    return gcd(b, aprime)\nfor _ in range(int(input())):\n    n = int(input())\n    p = [int(i) for i in input().split()]\n    diffs = []\n    for i in range(len(p)):\n        if p[i] != i + 1:\n            diffs.append(abs(p[i] - 1 - i))\n    a = diffs[0]\n    for i in range(1, len(diffs)):\n        a = gcd(a, diffs[i])\n    print(a)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr = list(map(int, stdin.readline().split()))\n    i = 0\n    num = []\n    while i < n:\n        if arr[i] - i - 1:\n            num.append(abs(arr[i] - i - 1))\n        i += 1\n    gcd = num[0]\n    for i in num[1:]:\n        while i:\n            (gcd, i) = (i, gcd % i)\n    print(gcd)", "def hcfnaive(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return hcfnaive(b, a % b)\na = int(input())\nfor i in range(a):\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = []\n    for i in range(n):\n        if abs(l[i] - 1 - i) > 0:\n            res.append(abs(l[i] - 1 - i))\n    answer = res[0]\n    for i in range(len(res) - 1):\n        answer = hcfnaive(answer, res[i + 1])\n    print(answer)", "try:\n    import math\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        l = list(map(int, input().split()))\n        a = 0\n        for i in range(n):\n            a = math.gcd(a, abs(l[i] - (i + 1)))\n        print(a)\nexcept:\n    pass", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = 0\n    for i in range(n):\n        k = math.gcd(k, i + 1 - a[i])\n    print(k)\n    t = t - 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i + 1 - l[i])\n    print(ans)", "def find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nfor ti in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ls = []\n    ls1 = []\n    cnt = 0\n    flag = 0\n    for i in range(n):\n        ls.append(abs(arr[i] - (i + 1)))\n    num1 = ls[0]\n    num2 = ls[1]\n    gcd = find_gcd(num1, num2)\n    for i in range(2, len(ls)):\n        gcd = find_gcd(gcd, ls[i])\n    print(gcd)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    ans = 0\n    for j in range(n):\n        ans = math.gcd(ans, j + 1 - p[j])\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    dist = []\n    for i in range(len(arr)):\n        curr_pos = i\n        actual_pos = arr[i] - 1\n        dist.append(abs(curr_pos - actual_pos))\n    k = dist[0]\n    for i in range(1, len(dist)):\n        k = math.gcd(k, dist[i])\n    print(k)", "def hcfnaive(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return hcfnaive(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = []\n    for i in range(n):\n        if abs(l[i] - 1 - i) > 0:\n            res.append(abs(l[i] - 1 - i))\n    ans = res[0]\n    for i in range(len(res) - 1):\n        ans = hcfnaive(ans, res[i + 1])\n    print(ans)", "def find_gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return find_gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    unsorted_a = list(map(int, input().split()))\n    num1 = 0\n    for j in range(n):\n        num2 = abs(unsorted_a[j] - (j + 1))\n        res = find_gcd(num1, num2)\n        num1 = res\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, i - pos[i])\n    print(ans)", "from math import gcd as __gcd\nfor test in range(int(input())):\n    n = int(input())\n    arr = [int(char) for char in input().split()]\n    sorted1 = 0\n    for i in range(n):\n        l = abs(arr[i] - i - 1)\n        sorted1 = __gcd(sorted1, l)\n    print(sorted1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for j in range(n):\n        ans = math.gcd(ans, j + 1 - a[j])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i + 1 - a[i])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    ans = 0\n    for i in range(1, a + 1):\n        ans = math.gcd(ans, abs(l[i] - i))\n    print(ans)", "import math\nfor _ in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    ans = 0\n    for i in range(1, a + 1):\n        ans = math.gcd(ans, abs(l[i] - i))\n    print(ans)", "from math import gcd\n\ndef solve(nums):\n    if len(nums) == 1:\n        return nums[0]\n    div = gcd(nums[0], nums[1])\n    if len(nums) == 2:\n        return div\n    for i in range(1, len(nums) - 1):\n        div = gcd(div, nums[i + 1])\n        if div == 1:\n            return div\n    return div\na = int(input())\nfor i in range(a):\n    b = int(input())\n    c = list(map(int, input().split()))\n    d = list.copy(c)\n    d.sort()\n    e = []\n    for j in range(0, len(d)):\n        if c[j] - d[j] != 0:\n            e.append(abs(c[j] - d[j]))\n    print(solve(e))", "from math import gcd\n\ndef solve():\n    n = int(input())\n    li = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(li)):\n        ans = gcd(abs(li[i] - (i + 1)), ans)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "from math import gcd\n\ndef solve():\n    n = int(input())\n    li = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(li)):\n        ans = gcd(abs(li[i] - (i + 1)), ans)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, i - pos[i])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, i - pos[i])\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    p = int(input())\n    li = list(map(int, input().split()))\n    li1 = li[:]\n    li1.sort()\n    li2 = []\n    for j in range(p):\n        li2.append(abs(j + 1 - li[j]))\n    ans = 0\n    for k in range(len(li2)):\n        ans = math.gcd(ans, li2[k])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    a = 0\n    for i in range(n):\n        a = math.gcd(a, i + 1 - p[i])\n    print(a)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i + 1 - a[i])\n    print(ans)", "import math\nfor i in range(int(input())):\n    y = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(y):\n        ans = math.gcd(ans, i + 1 - l[i])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i + 1 - a[i])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    tot = int(input())\n    a = [int(i) for i in input().split()]\n    res = 0\n    for i in range(tot):\n        if a[i] - i - 1:\n            if not res:\n                res = abs(a[i] - i - 1)\n            else:\n                res = math.gcd(res, a[i] - i - 1)\n    print(res)", "from functools import reduce\n\ndef gcd(x, y):\n    if x == 0:\n        return y\n    return gcd(y % x, x)\nfor t in range(int(input())):\n    N = int(input())\n    P = list(map(int, input().split()))\n    A = [abs(P[i - 1] - i) for i in range(1, N + 1)]\n    print(reduce(gcd, A))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        if l[i] != i + 1:\n            a.append(abs(l[i] - (i + 1)))\n    ans = 0\n    for i in a:\n        ans = math.gcd(ans, i)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i + 1 - a[i])\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = list()\n    for i in range(n - 1):\n        if a[i] == i + 1:\n            continue\n        else:\n            l.append(abs(1 + i - a[i]))\n    g = l[0]\n    for i in range(len(l)):\n        g = gcd(g, l[i])\n    print(g)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    l = l[:n]\n    ans = 0\n    for i in range(len(l)):\n        ans = math.gcd(ans, l[i] - i - 1)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    P = list(map(int, input().split()))\n    ans = 0\n    for i in range(N):\n        temp = abs(P[i] - i - 1)\n        ans = math.gcd(ans, temp)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    k = abs(l1[0] - 1)\n    for i in range(1, n):\n        k = math.gcd(k, abs(l1[i] - (i + 1)))\n    print(k)", "import math\n\ndef solution():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, abs(l[i - 1] - i))\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solution()", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if nums[i] - i - 1:\n            if not ans:\n                ans = abs(nums[i] - i - 1)\n            else:\n                ans = gcd(ans, nums[i] - i - 1)\n    print(ans)", "import math\nfor i in range(int(input())):\n    a = int(input())\n    arr = list(map(int, input().split(' ')))\n    max_array = []\n    for i in range(a):\n        max_array.append(abs(arr[i] - (i + 1)))\n    hcf = max_array[0]\n    for i in range(1, len(max_array)):\n        hcf = math.gcd(hcf, max_array[i])\n    print(hcf)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = [int(x) for x in input().split(' ')]\n    y = sorted(x)\n    s = 0\n    h = []\n    for (i, j) in enumerate(x):\n        if j != y[i]:\n            h.append(abs(j - y[i]))\n    for i in range(len(h)):\n        s = math.gcd(s, h[i])\n    print(s)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, abs(i - pos[i]))\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    tmp = []\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    for i in range(n):\n        if l1[i] != i + 1:\n            tmp.append(abs(l1[i] - i - 1))\n    ans = tmp[0]\n    l = len(tmp)\n    for i in range(1, l):\n        ans = math.gcd(ans, tmp[i])\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = []\n    for i in range(n):\n        if arr[i] != i + 1:\n            temp.append(abs(arr[i] - i - 1))\n    ans = temp[0]\n    l = len(temp)\n    for i in range(1, l):\n        ans = math.gcd(ans, temp[i])\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        ans = gcd(ans, abs(l[i] - (i + 1)))\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    i = 0\n    for ctr in arr:\n        import math\n        ans = math.gcd(ans, ctr - (i + 1))\n        i = i + 1\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, i - pos[i])\n    print(ans)", "from math import gcd\nt = int(input())\nwhile t:\n    n = int(input())\n    p = [int(x) for x in input().split()]\n    ans = p[0] - 1\n    for i in range(n):\n        ans = gcd(ans, abs(p[i] - i - 1))\n    print(ans)\n    t -= 1", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef main():\n    for _ in range(int(input())):\n        N = int(input())\n        arr = list(map(int, input().split()))\n        res = []\n        for i in range(N):\n            v = abs(arr[i] - i - 1)\n            if v != 0:\n                res.append(v)\n        g = res[0]\n        for i in res[1:]:\n            g = gcd(g, i)\n        print(g)\nmain()", "import math\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    lst = [x for x in range(1, n + 1)]\n    dic = dict()\n    r = 0\n    for i in range(n):\n        r = abs(arr[i] - lst[i])\n        if r not in dic:\n            dic[r] = 1\n    gcd = r\n    for i in dic.keys():\n        gcd = math.gcd(i, gcd)\n    print(gcd)\n    T -= 1", "import math\nfor i in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split(' ')))\n    gc = abs(1 - lis[0])\n    for j in range(2, num + 1):\n        num1 = abs(lis[j - 1] - j)\n        gc = math.gcd(gc, num1)\n    print(gc)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, arr[i] - i - 1)\n    print(ans)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, abs(a[i] - i - 1))\n    print(ans)\n    t -= 1", "T = int(input())\nimport math\nfor vinay in range(T):\n    N = int(input())\n    P = list(map(int, input().split()))\n    flag = [0] * (N + 1)\n    for i in range(N):\n        flag[P[i]] = i + 1\n    ans = 0\n    for i in range(1, N + 1):\n        ans = math.gcd(ans, i - flag[i])\n    print(ans)", "import math\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    list1 = [int(num) for num in input().split()]\n    flag = 0\n    ans = 0\n    for i in range(0, len(list1)):\n        if list1[i] != i + 1:\n            if flag == 0:\n                ans = abs(list1[i] - 1 - i)\n                flag = 1\n            else:\n                g = abs(list1[i] - 1 - i)\n                ans = math.gcd(ans, g)\n                if ans == 1:\n                    break\n    print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = [0] * (n + 1)\n    for i in range(n):\n        brr[arr[i]] = i + 1\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i - brr[i])\n    print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = [0] * (n + 1)\n    for i in range(n):\n        brr[arr[i]] = i + 1\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i - brr[i])\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))[:n]\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i + 1 - a[i])\n    print(ans)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    new = [0 for i in range(n)]\n    ans = []\n    for i in range(n):\n        if arr[i] != i + 1:\n            new[i] = arr[i]\n        else:\n            continue\n    for i in range(n):\n        if new[i] > 0:\n            v = abs(new[i] - (i + 1))\n            ans.append(v)\n        else:\n            continue\n    g = ans[0]\n    for j in ans:\n        g = math.gcd(g, j)\n    print(g)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    dic = {}\n    for j in range(n):\n        dic[lst[j]] = j\n    arr = []\n    for j in range(n):\n        ele = lst[j]\n        ind = dic[j + 1]\n        ad = abs(ele - j - 1)\n        arr.append(ad)\n    g = arr[0]\n    for j in arr:\n        g = math.gcd(g, j)\n    print(g)", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    ans = 0\n    for i in range(N):\n        ans = gcd(ans, abs(A[i] - 1 - i))\n    print(ans)", "test = int(input())\ncase = 0\nwhile case < test:\n    n = int(input())\n    nums = list(map(lambda x: int(x), input().split()))\n    k = None\n    i = 1\n    while i <= n:\n        if nums[i - 1] == i:\n            pass\n        else:\n            temp = abs(nums[i - 1] - i)\n            if k == None:\n                k = temp\n            else:\n                hcf = min(temp, k)\n                while hcf > 1:\n                    if k % hcf == 0 and temp % hcf == 0:\n                        break\n                    hcf -= 1\n                k = hcf\n                if k == 1:\n                    break\n        i += 1\n    print(k)\n    case += 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    y = [0] * (n + 1)\n    max1 = 0\n    for j in range(len(x)):\n        y[x[j]] = j + 1\n    for j in range(1, n + 1):\n        max1 = math.gcd(max1, abs(j - y[j]))\n    print(max1)", "def gcd(a, b):\n    if a == b:\n        return a\n    (a, b) = (min(a, b), max(a, b))\n    if b % a == 0:\n        return a\n    else:\n        while b % a != 0:\n            t = b % a\n            b = a\n            a = t\n        return t\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if a[i] != i + 1:\n            l.append(abs(a[i] - (i + 1)))\n    c = l[0]\n    for i in l:\n        c = gcd(c, i)\n        if c == 1:\n            break\n    print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l.copy()\n    a.sort()\n    d = {}\n    d1 = {}\n    for i in range(len(l)):\n        d[l[i]] = i\n        d1[a[i]] = i\n    t = []\n    for i in range(len(a)):\n        if d1[a[i]] - d[a[i]] == 0:\n            continue\n        else:\n            t.append(d1[a[i]] - d[a[i]])\n    gcd = math.gcd(t[0], t[1])\n    for i in range(2, len(t)):\n        gcd = math.gcd(gcd, t[i])\n    print(gcd)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        ans = gcd(ans, i + 1 - l[i])\n    print(ans)", "import math\nfor _ in range(0, int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    position = [0] * (n + 1)\n    for i in range(n):\n        position[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, i - position[i])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    k_max = 0\n    for i in range(n):\n        k_max = math.gcd(k_max, i + 1 - lst[i])\n    print(k_max)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = 0\n    for j in range(n):\n        m = math.gcd(m, l[j] - j - 1)\n    print(m)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = 0\n    for j in range(n):\n        m = math.gcd(m, l[j] - j - 1)\n    print(m)", "from math import gcd\n\ndef solve(nums):\n    if len(nums) == 1:\n        return nums[0]\n    div = gcd(nums[0], nums[1])\n    if len(nums) == 2:\n        return div\n    for i in range(1, len(nums) - 1):\n        div = gcd(div, nums[i + 1])\n        if div == 1:\n            return div\n    return div\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    l = arr.copy()\n    l.sort()\n    ans = []\n    for i in range(n):\n        ans.append(abs(l[i] - arr[i]))\n    print(solve(ans))", "from math import gcd\n\ndef solve(li, N):\n    d = 0\n    for (ind, el) in enumerate(li):\n        diff = abs(el - ind - 1)\n        d = gcd(d, diff)\n    return d\nfor case in range(int(input())):\n    N = int(input())\n    li = list(map(int, input().split()))\n    print(solve(li, N))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    arr = arr[::-1]\n    k = n\n    ans = []\n    for i in range(n):\n        if arr[i] != k:\n            ans.append(abs(n - i - arr[i]))\n        k = k - 1\n    num1 = ans[0]\n    num2 = ans[1]\n    gcd = math.gcd(num1, num2)\n    for i in range(2, len(ans)):\n        gcd = math.gcd(gcd, ans[i])\n        if gcd == 1:\n            break\n    print(gcd)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = list(map(int, input().split()))\n    k = 0\n    for i in range(n):\n        if p[i] != i + 1:\n            if not k:\n                k = abs(i + 1 - p[i])\n                continue\n            k = math.gcd(k, abs(i + 1 - p[i]))\n    print(k)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = []\n    per = [i for i in range(1, n + 1)]\n    for i in range(n):\n        if per[i] != a[i]:\n            d.append(abs(per[i] - a[i]))\n    ans = d[0]\n    for i in range(1, len(d)):\n        ans = math.gcd(ans, d[i])\n    print(ans)", "import sys, math\ninput = sys.stdin.readline\nM = int(1000000000.0) + 7\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = abs(a[i] - 1 - i)\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, a[i])\n    return ans\nfor _ in range(int(input())):\n    print(solve())", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = list(map(int, input().strip().split()))\n    res = 0\n    for i in range(n):\n        res = math.gcd(res, abs(p[i] - i - 1))\n    print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dupl = [l[i] for i in range(n)]\n    ans = 0\n    for i in range(n):\n        ans = math.gcd(ans, i + 1 - dupl[i])\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pos = [0] * (n + 1)\n    for i in range(n):\n        pos[a[i]] = i + 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans = math.gcd(ans, i - pos[i])\n    print(ans)"]