["import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, se):\n        (index, ma, mi, sign) = (ini + 1, 0, 0, True)\n        while se[index] != ')':\n            char = se[index]\n            if char == '?':\n                if sign:\n                    ma += 1\n                else:\n                    mi += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(index, se)\n                if sign:\n                    ma += arr[0]\n                    mi += arr[1]\n                else:\n                    ma += arr[1]\n                    mi += arr[0]\n                index = arr[2]\n            index = index + 1\n        dic[ini] = ma\n        return [ma, mi, index]\n    do(0, s)\n    ques = int(input())\n    res = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            res.append(1)\n        else:\n            res.append(dic[ini - 1])\n    print(*res)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, se):\n        (index, ma, mi, sign) = (ini + 1, 0, 0, True)\n        while se[index] != ')':\n            char = se[index]\n            if char == '?':\n                if sign:\n                    ma += 1\n                else:\n                    mi += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(index, se)\n                if sign:\n                    ma += arr[0]\n                    mi += arr[1]\n                else:\n                    ma += arr[1]\n                    mi += arr[0]\n                index = arr[2]\n            index = index + 1\n        dic[ini] = ma\n        return [ma, mi, index]\n    do(0, s)\n    ques = int(input())\n    res = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            res.append(1)\n        else:\n            res.append(dic[ini - 1])\n    print(*res)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    d = {}\n\n    def solve(i, s):\n        (j, max, min, sign) = (i + 1, 0, 0, True)\n        while s[j] != ')':\n            char = s[j]\n            if char == '?':\n                if sign:\n                    max += 1\n                else:\n                    min += 1\n            elif char == '-':\n                sign = False\n            elif char == '+':\n                sign = True\n            elif char == '(':\n                a = solve(j, s)\n                if sign:\n                    max += a[0]\n                    min += a[1]\n                else:\n                    max += a[1]\n                    min += a[0]\n                j = a[2]\n            j += 1\n        d[i] = max\n        return [max, min, j]\n    solve(0, s)\n    ans = []\n    for _ in range(int(input())):\n        (i, f) = map(int, input().split())\n        ans.append(1 if i == f else d[i - 1])\n    print(*ans)", "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\nimport collections\nimport os\n\ndef main():\n    osi = '/home/ps/Documents/cp/input.txt'\n    oso = '/home/ps/Documents/cp/output.txt'\n    if os.path.exists(osi):\n        sys.stdin = open(osi, 'r')\n        sys.stdout = open(oso, 'w')\n\ndef solve():\n    for i in range(*maps()):\n        s = input()\n        q = [list(maps()) for _ in range(*maps())]\n        n = len(s)\n        dp = [1] * n\n        turn = 1\n        st = []\n        for i in range(n):\n            if s[i] == ')':\n                dp[i] = dp[st.pop()]\n                turn = dp[i]\n                continue\n            if s[i] == '-':\n                turn ^= 1\n            if s[i] == '(':\n                st.append(i)\n            dp[i] = turn\n        pre = [[0, 0] for _ in range(n)]\n        for i in range(1, n):\n            pre[i][0] += pre[i - 1][0]\n            pre[i][1] += pre[i - 1][1]\n            if s[i] == '?':\n                pre[i][dp[i]] += 1\n        ans = []\n        for (l, r) in q:\n            if l == r:\n                ans.append(1)\n                continue\n            ans.append(pre[r - 1][dp[r - 1]] - pre[l - 1][dp[l - 1]])\n        print(*ans)\nmain()\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\nlogging.basicConfig(format='%(message)s', level=logging.WARNING)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\nsolve()", "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\nimport collections\n\ndef solve():\n    for _ in range(*maps()):\n        s = input()\n        n = len(s)\n        q = [list(maps()) for _ in range(*maps())]\n        dp = [0] * n\n        curr = True\n        st = []\n        for i in range(n):\n            if s[i] == ')':\n                dp[i] = dp[st.pop()]\n                curr = dp[i]\n                continue\n            dp[i] = curr\n            if s[i] == '(':\n                st.append(i)\n            if s[i] == '-':\n                curr ^= True\n        pre = [[0, 0] for _ in range(n)]\n        for i in range(1, n):\n            pre[i][0] += pre[i - 1][0]\n            pre[i][1] += pre[i - 1][1]\n            if s[i] == '?':\n                pre[i][dp[i]] += 1\n        ans = []\n        for (l, r) in q:\n            if l == r:\n                ans.append(1)\n                continue\n            x = pre[r - 1][dp[r - 1]] - pre[l - 1][dp[l - 1]]\n            ans.append(x)\n        print(*ans)\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\nlogging.basicConfig(format='%(message)s', level=logging.WARNING)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\nsolve()", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    d = {}\n\n    def solve(i, s):\n        (j, max, min, sign) = (i + 1, 0, 0, True)\n        while s[j] != ')':\n            char = s[j]\n            if char == '?':\n                if sign:\n                    max += 1\n                else:\n                    min += 1\n            elif char == '-':\n                sign = False\n            elif char == '+':\n                sign = True\n            elif char == '(':\n                a = solve(j, s)\n                if sign:\n                    max += a[0]\n                    min += a[1]\n                else:\n                    max += a[1]\n                    min += a[0]\n                j = a[2]\n            j += 1\n        d[i] = max\n        return [max, min, j]\n    solve(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (i, f) = map(int, input().split())\n        if i == f:\n            ans.append(1)\n        else:\n            ans.append(d[i - 1])\n    print(*ans)", "def wildcard(s):\n    b = []\n    m = []\n    o = []\n    d = {}\n    for i in range(len(s)):\n        if s[i] == '(':\n            b.append(i + 1)\n        elif s[i] == '?':\n            m.append([0, 1])\n            d[i + 1, i + 1] = 1\n        elif s[i] == '-' or s[i] == '+':\n            o.append(s[i])\n        else:\n            if o[-1] == '+':\n                d[b[-1], i + 1] = max(m[-1]) + max(m[-2])\n                temp = [min(m[-1]) + min(m[-2]), max(m[-1]) + max(m[-2])]\n            else:\n                d[b[-1], i + 1] = max(m[-2]) - min(m[-1])\n                temp = [min(m[-2]) - max(m[-1]), max(m[-2]) - min(m[-1])]\n            b.pop()\n            m.pop()\n            m.pop()\n            m.append(temp)\n            o.pop()\n    return d\nfor _ in range(int(input())):\n    s = input()\n    find = wildcard(s)\n    new = []\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split())\n        new.append(find[x, y])\n    print(*new)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\n\ndef wildcardreplace(L, s):\n    (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n    while s[ind] != ')':\n        C = s[ind]\n        if C == '?':\n            if symb:\n                longg += 1\n            else:\n                shor += 1\n        elif C == '+':\n            symb = True\n        elif C == '-':\n            symb = False\n        elif C == '(':\n            a = wildcardreplace(ind, s)\n            if symb:\n                longg += a[0]\n                shor += a[1]\n            else:\n                longg += a[1]\n                shor += a[0]\n            ind = a[2]\n        ind += 1\n    list1[L] = longg\n    return [longg, shor, ind]\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, se):\n        (index, ma, mi, sign) = (ini + 1, 0, 0, True)\n        while se[index] != ')':\n            char = se[index]\n            if char == '?':\n                if sign:\n                    ma += 1\n                else:\n                    mi += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(index, se)\n                if sign:\n                    ma += arr[0]\n                    mi += arr[1]\n                else:\n                    ma += arr[1]\n                    mi += arr[0]\n                index = arr[2]\n            index = index + 1\n        dic[ini] = ma\n        return [ma, mi, index]\n    do(0, s)\n    ques = int(input())\n    res = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            res.append(1)\n        else:\n            res.append(dic[ini - 1])\n    print(*res)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nT = int(input())\nfor t in range(T):\n    s = input()\n    dic = dict()\n\n    def do(i, s):\n        (idx, maxx, minn, count) = (i + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if count:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                count = True\n            elif char == '-':\n                count = False\n            elif char == '(':\n                arr = do(idx, s)\n                if count:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[i] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (i, fin) = map(int, input().split())\n        if i == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[i - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntt = int(input())\nfor _ in range(tt):\n    ttdeststr = input()\n    ttde = {}\n\n    def do(ttdest, ttdeststr):\n        (op, mvc, mnnc, mncsr) = (ttdest + 1, 0, 0, True)\n        while ttdeststr[op] != ')':\n            char = ttdeststr[op]\n            if char == '?':\n                if mncsr:\n                    mvc += 1\n                else:\n                    mnnc += 1\n            elif char == '+':\n                mncsr = True\n            elif char == '-':\n                mncsr = False\n            elif char == '(':\n                arr = do(op, ttdeststr)\n                if mncsr:\n                    mvc += arr[0]\n                    mnnc += arr[1]\n                else:\n                    mvc += arr[1]\n                    mnnc += arr[0]\n                op = arr[2]\n            op += 1\n        ttde[ttdest] = mvc\n        return [mvc, mnnc, op]\n    do(0, ttdeststr)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ttdest, fin) = map(int, input().split())\n        if ttdest == fin:\n            ans.append(1)\n        else:\n            ans.append(ttde[ttdest - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    mp = {}\n\n    def preCal(inValue, s):\n        (idValue, mx, mn, sg) = (inValue + 1, 0, 0, True)\n        while s[idValue] != ')':\n            c = s[idValue]\n            if c == '?':\n                if sg:\n                    mx += 1\n                else:\n                    mn += 1\n            if c == '+':\n                sg = True\n            if c == '-':\n                sg = False\n            if c == '(':\n                ar = preCal(idValue, s)\n                if sg:\n                    mx += ar[0]\n                    mn += ar[1]\n                else:\n                    mx += ar[1]\n                    mn += ar[0]\n                idValue = ar[2]\n            idValue += 1\n        mp[inValue] = mx\n        return [mx, mn, idValue]\n    preCal(0, s)\n    que = int(input())\n    for _ in range(que):\n        (inValue, fnValue) = map(int, input().split())\n        if inValue == fnValue:\n            print(1, end=' ')\n        else:\n            print(mp[inValue - 1], end=' ')\n    print()", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ngiven_input = int(input())\nfor _ in range(given_input):\n    st = input()\n    temp = {}\n\n    def do(init, st):\n        (idx, maxn, minn, sign) = (init + 1, 0, 0, True)\n        while st[idx] != ')':\n            char = st[idx]\n            if char == '?':\n                if sign:\n                    maxn += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                v = do(idx, st)\n                if sign:\n                    maxn = maxn + v[0]\n                    minn = minn + v[1]\n                else:\n                    maxn = maxn + v[1]\n                    minn = minn + v[0]\n                idx = v[2]\n            idx = idx + 1\n        temp[init] = maxn\n        return [maxn, minn, idx]\n    do(0, st)\n    ques_inp = int(input())\n    final_ans = []\n    for __ in range(ques_inp):\n        (init, fin) = map(int, input().split())\n        if init == fin:\n            final_ans.append(1)\n        else:\n            final_ans.append(temp[init - 1])\n    print(*final_ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntest = int(input())\nfor _ in range(test):\n    inputStr = input()\n    strDic = {}\n\n    def do(start, inputStr):\n        (uniqueX, maxValueC, minValueC, charS) = (start + 1, 0, 0, True)\n        while inputStr[uniqueX] != ')':\n            char = inputStr[uniqueX]\n            if char == '?':\n                if charS:\n                    maxValueC += 1\n                else:\n                    minValueC += 1\n            elif char == '+':\n                charS = True\n            elif char == '-':\n                charS = False\n            elif char == '(':\n                arr = do(uniqueX, inputStr)\n                if charS:\n                    maxValueC += arr[0]\n                    minValueC += arr[1]\n                else:\n                    maxValueC += arr[1]\n                    minValueC += arr[0]\n                uniqueX = arr[2]\n            uniqueX += 1\n        strDic[start] = maxValueC\n        return [maxValueC, minValueC, uniqueX]\n    do(0, inputStr)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (start, fin) = map(int, input().split())\n        if start == fin:\n            ans.append(1)\n        else:\n            ans.append(strDic[start - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(100000000)\nfor _ in range(int(input())):\n    dd = {}\n    ss = input()\n\n    def store(aa, ss):\n        ma = 0\n        mi = 0\n        flag = True\n        i = aa + 1\n        while ss[i] != ')':\n            c = ss[i]\n            if c == '?':\n                if flag:\n                    ma += 1\n                else:\n                    mi += 1\n            elif c == '+':\n                flag = True\n            elif c == '-':\n                flag = False\n            else:\n                ll = store(i, ss)\n                if flag:\n                    mi += ll[1]\n                    ma += ll[0]\n                else:\n                    mi += ll[0]\n                    ma += ll[1]\n                i = ll[2]\n            i += 1\n        dd[aa] = ma\n        return [ma, mi, i]\n    store(0, ss)\n    q = int(input())\n    for _ in range(q):\n        (st, en) = map(int, input().split())\n        if st == en:\n            print(1, end=' ')\n        else:\n            print(dd[st - 1], end=' ')\n    print(end='\\n')", "import sys\nsys.setrecursionlimit(10 ** 8)\nT = int(input())\nfor testCase in range(T):\n    data = input()\n    myList = {}\n    one = 1\n    zero = 0\n    flag = True\n\n    def wildcardreplace(L, data):\n        (index, longData, shortData, sy) = (L + 1, zero, zero, True)\n        while data[index] != ')':\n            C = data[index + zero]\n            if C == '?':\n                if sy:\n                    longData += one - zero\n                else:\n                    shortData += one\n            elif C == '+' and flag:\n                sy = True\n            elif C == '-':\n                sy = False\n            elif C == '(':\n                a = wildcardreplace(index, data)\n                if sy:\n                    longData += a[zero]\n                    shortData += a[one]\n                else:\n                    longData += a[one]\n                    shortData += a[zero]\n                index = a[2]\n                w = 2 * index - 1\n            index += one - zero\n        myList[L] = longData\n        return [longData, shortData, index]\n    wildcardreplace(zero, data)\n    K = int(input())\n    results = []\n    for i in range(K):\n        (L, R) = map(int, input().split())\n        if L == R and flag:\n            results.append(one)\n        else:\n            results.append(myList[L - one])\n    print(*results)", "import sys\nsys.setrecursionlimit(10 ** 8)\nip = int(input())\nfor _ in range(ip):\n    q = input()\n    temp = {}\n\n    def find(p, q):\n        (idx, max, min, x) = (p + 1, 0, 0, True)\n        while q[idx] != ')':\n            char = q[idx]\n            if char == '?':\n                if x:\n                    max = max + 1\n                else:\n                    min = min + 1\n            elif char == '+':\n                x = True\n            elif char == '-':\n                x = False\n            elif char == '(':\n                arr = find(idx, q)\n                if x:\n                    max = max + arr[0]\n                    min = min + arr[1]\n                else:\n                    max = max + arr[1]\n                    min = min + arr[0]\n                idx = arr[2]\n            idx = idx + 1\n        temp[p] = max\n        return [max, min, idx]\n    find(0, q)\n    r = int(input())\n    res = []\n    for _ in range(r):\n        (p, s) = map(int, input().split())\n        if p == s:\n            res.append(1)\n        else:\n            res.append(temp[p - 1])\n    print(*res)", "import sys\nsys.setrecursionlimit(10 ** 8)\none = 1\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(initial, s):\n        (w, maximum, minimum, sgn) = (initial + one, 0, 0, True)\n        while s[w] != ')':\n            character = s[w]\n            if character == '?':\n                if sgn:\n                    maximum += one\n                else:\n                    minimum += one\n            elif character == '+':\n                sgn = True\n            elif character == '-':\n                sgn = False\n            elif character == '(':\n                array = do(w, s)\n                if sgn:\n                    maximum += array[0]\n                    minimum += array[one]\n                else:\n                    maximum += array[one]\n                    minimum += array[0]\n                w = array[2]\n            w += one\n        dic[initial] = maximum\n        return [maximum, minimum, w]\n    do(0, s)\n    q = int(input())\n    final_result = []\n    for _ in range(q):\n        (initial, f) = map(int, input().split())\n        if initial == f:\n            final_result.append(one)\n        else:\n            final_result.append(dic[initial - one])\n    print(*final_result)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, mx, mn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    mx += 1\n                else:\n                    mn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    mx += arr[0]\n                    mn += arr[1]\n                else:\n                    mx += arr[1]\n                    mn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = mx\n        return [mx, mn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def solve(ini, s):\n        (idx, mx, mn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    mx += 1\n                else:\n                    mn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = solve(idx, s)\n                if sign:\n                    mx += arr[0]\n                    mn += arr[1]\n                else:\n                    mx += arr[1]\n                    mn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = mx\n        return [mx, mn, idx]\n    solve(0, s)\n    queries = int(input())\n    ans = []\n    for _ in range(queries):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(inValue, s):\n        (idValue, mx, mn, sg) = (inValue + 1, 0, 0, True)\n        while s[idValue] != ')':\n            char = s[idValue]\n            if char == '?':\n                if sg:\n                    mx += 1\n                else:\n                    mn += 1\n            elif char == '+':\n                sg = True\n            elif char == '-':\n                sg = False\n            elif char == '(':\n                arr = do(idValue, s)\n                if sg:\n                    mx += arr[0]\n                    mn += arr[1]\n                else:\n                    mx += arr[1]\n                    mn += arr[0]\n                idValue = arr[2]\n            idValue += 1\n        dic[inValue] = mx\n        return [mx, mn, idValue]\n    do(0, s)\n    ques = int(input())\n    anVal = []\n    for _ in range(ques):\n        (inValue, fnValue) = map(int, input().split())\n        if inValue == fnValue:\n            anVal.append(1)\n        else:\n            anVal.append(dic[inValue - 1])\n    print(*anVal)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\no = 1\nz = 0\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + o, z, z, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += o\n                else:\n                    shor += o\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[z]\n                    shor += a[o]\n                else:\n                    longg += a[o]\n                    shor += a[z]\n                ind = a[o + o]\n            ind += o\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(z, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(o)\n        else:\n            li.append(list1[L - o])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nZ = int(input())\nfor i in range(Z):\n    S = input()\n    list1 = {}\n\n    def wildcardreplace(L, S):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while S[ind] != ')':\n            P = S[ind]\n            if P == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif P == '+':\n                symb = True\n            elif P == '-':\n                symb = False\n            elif P == '(':\n                K = wildcardreplace(ind, S)\n                if symb:\n                    longg += K[0]\n                    shor += K[1]\n                else:\n                    longg += K[1]\n                    shor += K[0]\n                ind = K[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, S)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    arr = {}\n\n    def solve(L, s):\n        (ind, lgg, srt, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    lgg += 1\n                else:\n                    srt += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = solve(ind, s)\n                if symb:\n                    lgg += a[0]\n                    srt += a[1]\n                else:\n                    lgg += a[1]\n                    srt += a[0]\n                ind = a[2]\n            ind += 1\n        arr[L] = lgg\n        return [lgg, srt, ind]\n    solve(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(arr[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(9 ** 8)\nY = int(input())\nfor i in range(Y):\n    A = input()\n    list1 = {}\n\n    def wildcardreplace(H, A):\n        (ind, longg, shor, symb) = (H + 1, 0, 0, True)\n        while A[ind] != ')':\n            P = A[ind]\n            if P == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif P == '+':\n                symb = True\n            elif P == '-':\n                symb = False\n            elif P == '(':\n                K = wildcardreplace(ind, A)\n                if symb:\n                    longg += K[0]\n                    shor += K[1]\n                else:\n                    longg += K[1]\n                    shor += K[0]\n                ind = K[2]\n            ind += 1\n        list1[H] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, A)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (H, R) = map(int, input().split())\n        if H == R:\n            li.append(1)\n        else:\n            li.append(list1[H - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor _ in range(t):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (x, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[x] != ')':\n            char = s[x]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(x, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                x = arr[2]\n            x += 1\n        dic[ini] = maxx\n        return [maxx, minn, x]\n    do(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (ini, f) = map(int, input().split())\n        if ini == f:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    temp = []\n    for __ in range(ques):\n        (ini, fi) = map(int, input().split())\n        if ini == fi:\n            temp.append(1)\n        else:\n            temp.append(dic[ini - 1])\n    print(*temp)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            c = s[ind]\n            if c == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif c == '+':\n                symb = True\n            elif c == '-':\n                symb = False\n            elif c == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    q = int(input())\n    li = []\n    for i in range(q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    d = {}\n\n    def solve(i, s):\n        (j, max, min, sign) = (i + 1, 0, 0, True)\n        while s[j] != ')':\n            char = s[j]\n            if char == '?':\n                if sign:\n                    max += 1\n                else:\n                    min += 1\n            elif char == '-':\n                sign = False\n            elif char == '+':\n                sign = True\n            elif char == '(':\n                a = solve(j, s)\n                if sign:\n                    max += a[0]\n                    min += a[1]\n                else:\n                    max += a[1]\n                    min += a[0]\n                j = a[2]\n            j += 1\n        d[i] = max\n        return [max, min, j]\n    solve(0, s)\n    q = int(input())\n    ans = []\n    for _ in range(q):\n        (i, f) = map(int, input().split())\n        if i == f:\n            ans.append(1)\n        else:\n            ans.append(d[i - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, max, min, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    max += 1\n                else:\n                    min += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    max += arr[0]\n                    min += arr[1]\n                else:\n                    max += arr[1]\n                    min += arr[0]\n                idx = arr[2]\n            idx += 1\n            dic[ini] = max\n        return [max, min, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def func(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = func(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    func(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor t in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    map1 = {}\n\n    def solve(q1, s):\n        (indx1, mx1, mn1, flag) = (q1 + 1, 0, 0, True)\n        while s[indx1] != ')':\n            ch = s[indx1]\n            if ch == '?':\n                if flag:\n                    mx1 += 1\n                else:\n                    mn1 += 1\n            elif ch == '+':\n                flag = True\n            elif ch == '-':\n                flag = False\n            elif ch == '(':\n                arr = solve(indx1, s)\n                if flag:\n                    mx1 += arr[0]\n                    mn1 += arr[1]\n                else:\n                    mx1 += arr[1]\n                    mn1 += arr[0]\n                indx1 = arr[2]\n            indx1 += 1\n        map1[q1] = mx1\n        return [mx1, mn1, indx1]\n    solve(0, s)\n    qq = int(input())\n    res = []\n    for _ in range(qq):\n        (q1, q2) = map(int, input().split())\n        if q1 == q2:\n            res.append(1)\n        else:\n            res.append(map1[q1 - 1])\n    print(*res)", "import sys\nsys.setrecursionlimit(10 ** 8)\ntotal_input = int(input())\nfor _ in range(total_input):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nti = int(input())\nfor _ in range(ti):\n    s = input()\n    dic = {}\n\n    def do(index, s):\n        (idx, maxm, minm, si) = (index + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if si:\n                    maxm += 1\n                else:\n                    minm += 1\n            elif char == '+':\n                si = True\n            elif char == '-':\n                si = False\n            elif char == '(':\n                arr = do(idx, s)\n                if si:\n                    maxm += arr[0]\n                    minm += arr[1]\n                else:\n                    maxm += arr[1]\n                    minm += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[index] = maxm\n        return [maxm, minm, idx]\n    do(0, s)\n    ques = int(input())\n    a = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            a.append(1)\n        else:\n            a.append(dic[ini - 1])\n    print(*a)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nti = int(input())\nfor _ in range(ti):\n    s = input()\n    dic = {}\n\n    def do(index, s):\n        (idx, maxm, minm, si) = (index + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if si:\n                    maxm += 1\n                else:\n                    minm += 1\n            elif char == '+':\n                si = True\n            elif char == '-':\n                si = False\n            elif char == '(':\n                arr = do(idx, s)\n                if si:\n                    maxm += arr[0]\n                    minm += arr[1]\n                else:\n                    maxm += arr[1]\n                    minm += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[index] = maxm\n        return [maxm, minm, idx]\n    do(0, s)\n    ques = int(input())\n    a = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            a.append(1)\n        else:\n            a.append(dic[ini - 1])\n    print(*a)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def func(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = func(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    func(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    input1 = input()\n    disk = {}\n\n    def do(ini, input1):\n        (idonutx, maximum, minimum, s) = (ini + 1, 0, 0, True)\n        while input1[idonutx] != ')':\n            char = input1[idonutx]\n            if char == '?':\n                if s:\n                    maximum = maximum + 1\n                else:\n                    minimum = minimum + 1\n            elif char == '+':\n                s = True\n            elif char == '-':\n                s = False\n            elif char == '(':\n                arr = do(idonutx, input1)\n                if s:\n                    maximum += arr[0]\n                    minimum += arr[1]\n                else:\n                    maximum += arr[1]\n                    minimum += arr[0]\n                idonutx = arr[2]\n            idonutx += 1\n        disk[ini] = maximum\n        return [maximum, minimum, idonutx]\n    do(0, input1)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(disk[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\n\ndef helper(ind, str):\n    index = ind + 1\n    max = 0\n    min = 0\n    sign = True\n    while str[index] != ')':\n        char = str[index]\n        if char == '?':\n            if sign:\n                max += 1\n            else:\n                min += 1\n        elif char == '+':\n            sign = True\n        elif char == '-':\n            sign = False\n        elif char == '(':\n            arr = helper(index, str)\n            if sign:\n                max += arr[0]\n                min += arr[1]\n            else:\n                max += arr[1]\n                min += arr[0]\n            index = arr[2]\n        index += 1\n    ind_map[ind] = max\n    return [max, min, index]\nT = int(input())\nfor i in range(T):\n    s = input()\n    ind_map = {}\n    helper(0, s)\n    query = int(input())\n    ans = []\n    for k in range(query):\n        (ind, fin) = map(int, input().split())\n        if ind == fin:\n            ans.append(1)\n        else:\n            ans.append(ind_map[ind - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nt = int(input())\nfor i in range(t):\n    s = input()\n    list1 = {}\n\n    def wildcardreplace(L, s):\n        (ind, longg, shor, symb) = (L + 1, 0, 0, True)\n        while s[ind] != ')':\n            C = s[ind]\n            if C == '?':\n                if symb:\n                    longg += 1\n                else:\n                    shor += 1\n            elif C == '+':\n                symb = True\n            elif C == '-':\n                symb = False\n            elif C == '(':\n                a = wildcardreplace(ind, s)\n                if symb:\n                    longg += a[0]\n                    shor += a[1]\n                else:\n                    longg += a[1]\n                    shor += a[0]\n                ind = a[2]\n            ind += 1\n        list1[L] = longg\n        return [longg, shor, ind]\n    wildcardreplace(0, s)\n    Q = int(input())\n    li = []\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        if L == R:\n            li.append(1)\n        else:\n            li.append(list1[L - 1])\n    print(*li)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for _ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    s = input()\n    dic = {}\n\n    def do(ini, s):\n        (idx, maxx, minn, sign) = (ini + 1, 0, 0, True)\n        while s[idx] != ')':\n            char = s[idx]\n            if char == '?':\n                if sign:\n                    maxx += 1\n                else:\n                    minn += 1\n            elif char == '+':\n                sign = True\n            elif char == '-':\n                sign = False\n            elif char == '(':\n                arr = do(idx, s)\n                if sign:\n                    maxx += arr[0]\n                    minn += arr[1]\n                else:\n                    maxx += arr[1]\n                    minn += arr[0]\n                idx = arr[2]\n            idx += 1\n        dic[ini] = maxx\n        return [maxx, minn, idx]\n    do(0, s)\n    ques = int(input())\n    ans = []\n    for __ in range(ques):\n        (ini, fin) = map(int, input().split())\n        if ini == fin:\n            ans.append(1)\n        else:\n            ans.append(dic[ini - 1])\n    print(*ans)"]