["for _ in range(int(input())):\n    (a, x1, y1, x2, y2) = map(int, input().split())\n    iny = abs(x2 - x1) + abs(y2 - y1)\n    f = min(x1, a + 1 - x1, y1, a + 1 - y1)\n    l = min(x2, a + 1 - x2, y2, a + 1 - y2)\n    out = f + l\n    print(min(iny, out))", "for _ in range(int(input())):\n    (n, a, b, c, d) = map(int, input().split())\n    w1 = abs(c - a) + abs(d - b)\n    w2 = min(a, b, n - a + 1, n - b + 1) + min(c, d, n - c + 1, n - d + 1)\n    print(min(w1, w2))", "def getOutside(n, x1, y1, x2, y2):\n    minx1 = min(abs(x1), abs(x1 - n - 1))\n    minx2 = min(abs(x2), abs(x2 - n - 1))\n    miny1 = min(abs(y1), abs(y1 - n - 1))\n    miny2 = min(abs(y2), abs(y2 - n - 1))\n    min2 = min(minx2, miny2)\n    min1 = min(minx1, miny1)\n    return min1 + min2\nt = int(input())\nfor ni in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    inside = abs(x2 - x1) + abs(y2 - y1)\n    outside = getOutside(n, x1, y1, x2, y2)\n    print(min(outside, inside))", "for _ in range(int(input())):\n    (a, b, c, d, e) = map(int, input().split())\n    g = min(b, a - b + 1)\n    h = min(c, a - c + 1)\n    i = min(d, a - d + 1)\n    j = min(e, a - e + 1)\n    k = abs(d - b) + abs(e - c)\n    l = min(i, j) + min(g, h)\n    print(min(k, l))", "for _ in range(int(input())):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    cost1 = abs(x2 - x1) + abs(y2 - y1)\n    cost2 = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(cost1, cost2))", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "for _ in range(int(input())):\n    (a, b, c, d, e) = map(int, input().split())\n    g = min(b, a - b + 1)\n    h = min(c, a - c + 1)\n    i = min(d, a - d + 1)\n    j = min(e, a - e + 1)\n    k = abs(d - b) + abs(e - c)\n    l = min(i, j) + min(g, h)\n    print(min(k, l))", "T = int(input())\nfor i in range(T):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "from math import *\nt = int(input())\nfor _ in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    c1 = abs(x2 - x1) + abs(y2 - y1)\n    c2 = min(n - max(x1, y1) + 1, min(x1, y1)) + min(min(x2, y2), n - max(x2, y2) + 1)\n    print(min(c1, c2))", "from math import *\nf = int(input())\nfor _ in range(f):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    c1 = abs(x2 - x1) + abs(y2 - y1)\n    c2 = min(n - max(x1, y1) + 1, min(x1, y1)) + min(min(x2, y2), n - max(x2, y2) + 1)\n    print(min(c1, c2))", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "for _ in range(int(input())):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    z1 = min(x1, y1, N - x1 + 1, N - y1 + 1)\n    z1 += min(x2, y2, N - x2 + 1, N - y2 + 1)\n    z2 = abs(x2 - x1) + abs(y2 - y1)\n    print(min(z1, z2))", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "T = int(input())\nfor i in range(0, T):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    X = min(N - x1 + 1, x1)\n    Y = min(N - y1 + 1, y1)\n    X2 = min(N - x2 + 1, x2)\n    Y2 = min(N - y2 + 1, y2)\n    print(min(abs(x1 - x2) + abs(y1 - y2), min(X, Y) + min(X2, Y2)))", "t = int(input())\nfor _ in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    step1 = min(x1, y1, n - x1 + 1, n - y1 + 1)\n    step2 = min(x2, y2, n - x2 + 1, n - y2 + 1)\n    ans1 = step1 + step2\n    ans2 = abs(x2 - x1) + abs(y2 - y1)\n    print(min(ans1, ans2))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    inside_cost = abs(x1 - x2) + abs(y1 - y2)\n    outside_cost = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(inside_cost, outside_cost))", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "T = int(input())\nwhile T:\n    T -= 1\n    (n, x1, y1, x2, y2) = list(map(int, input().split()))\n    print(min(abs(x1 - x2) + abs(y1 - y2), min(x1, n - x1 + 1, y1, n - y1 + 1) + min(x2, n - x2 + 1, y2, n - y2 + 1)))", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    in_cost = abs(x1 - x2) + abs(y1 - y2)\n    out_cost = min(x1, y1, n - x1 + 1, n - y1 + 1) + min(x2, y2, n - x2 + 1, n - y2 + 1)\n    print(min(out_cost, in_cost))", "a = int(input(''))\nfor i in range(a):\n    (N, x1, y1, x2, y2) = [int(x) for x in input('').split()]\n    t = min(x1, y1, N - x1 + 1, N - y1 + 1) + min(x2, y2, N - x2 + 1, N - y2 + 1)\n    u = abs(x2 - x1) + abs(y2 - y1)\n    print(min(t, u))", "testcases = int(input())\nfor eachcase in range(testcases):\n    (length, row1, col1, row2, col2) = map(int, input().split())\n    legal = abs(row1 - row2) + abs(col1 - col2)\n    illegal = 2 + min(row1 - 1, col1 - 1, length - row1, length - col1) + min(row2 - 1, col2 - 1, length - row2, length - col2)\n    print(min(legal, illegal))", "for i in range(int(input())):\n    (m, a, b, c, d) = map(int, input().split())\n    mini1 = min(list([a - 1, m - a, b - 1, m - b]))\n    mini2 = min(list([c - 1, m - c, d - 1, m - d]))\n    mini1 += 1\n    mini2 += 1\n    mini3 = abs(c - a) + abs(d - b)\n    print(min(mini1 + mini2, mini3))", "for t in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    c1 = min(n - x1, n - y1, x1 - 1, y1 - 1) + min(n - x2, n - y2, x2 - 1, y2 - 1) + 2\n    c2 = abs(x2 - x1) + abs(y2 - y1)\n    if c1 < c2:\n        print(c1)\n    else:\n        print(c2)", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    direct = abs(x1 - x2) + abs(y1 - y2)\n    to_edge = min(x1, y1, n - x1 + 1, n - y1 + 1)\n    from_edge = min(x2, y2, n - x2 + 1, n - y2 + 1)\n    print(min(direct, to_edge + from_edge))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    l = abs(x1 - x2) + abs(y1 - y2)\n    if l < min(x1, y1, n - y1 + 1, n - x1 + 1) + min(x2, y2, n - y2 + 1, n - x2 + 1):\n        print(l)\n    else:\n        print(min(x1, y1, n - y1 + 1, n - x1 + 1) + min(x2, y2, n - y2 + 1, n - x2 + 1))", "for x in range(int(input())):\n    (n, a, b, c, d) = map(int, input().split())\n    e = 0\n    if abs(a - (n + 1) / 2) < abs(b - (n + 1) / 2):\n        if b < (n + 1) / 2:\n            e += b\n        else:\n            e += n - b + 1\n    elif a < (n + 1) / 2:\n        e += a\n    else:\n        e += n - a + 1\n    if abs(c - (n + 1) / 2) < abs(d - (n + 1) / 2):\n        if d < (n + 1) / 2:\n            e += d\n        else:\n            e += n - d + 1\n    elif c < (n + 1) / 2:\n        e += c\n    else:\n        e += n - c + 1\n    f = abs(c - a) + abs(b - d)\n    if e > f:\n        print(f)\n    else:\n        print(e)", "T = int(input())\nfor i in range(0, T):\n    Lis = [int(k) for k in input().split()]\n    N = Lis[0]\n    x1 = Lis[1]\n    y1 = Lis[2]\n    x2 = Lis[3]\n    y2 = Lis[4]\n    d = abs(x1 - x2) + abs(y1 - y2)\n    l = min(x1, y1, N + 1 - x1, N + 1 - y1) + min(x2, y2, N + 1 - x2, N + 1 - y2)\n    if d < l:\n        print(d)\n    else:\n        print(l)", "T = int(input())\nfor t in range(T):\n    s = input().split()\n    n = int(s[0])\n    x1 = int(s[1])\n    y1 = int(s[2])\n    x2 = int(s[3])\n    y2 = int(s[4])\n    dis1 = 0\n    dis2 = abs(y2 - y1) + abs(x2 - x1)\n    dis1 = min(min(x1 - 1, n - x1), min(y1 - 1, n - y1)) + min(min(x2 - 1, n - x2), min(y2 - 1, n - y2)) + 2\n    print(min(dis1, dis2))", "t = int(input())\nfor i in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    internal_cost = abs(x2 - x1) + abs(y2 - y1)\n    external_cost = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(internal_cost, external_cost))", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "def borderPath(N, x, y):\n    N += 1\n    xd = x if N - x >= x else N - x\n    yd = y if N - y >= y else N - y\n    return xd if xd <= yd else yd\nfor _ in range(int(input())):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    internalPath = abs(x1 - x2) + abs(y1 - y2)\n    externalPath = borderPath(N, x1, y1) + borderPath(N, x2, y2)\n    output = internalPath if internalPath <= externalPath else externalPath\n    print(output)", "def lenToBorder(n, x, y):\n    n += 1\n    xd = x if n - x >= x else n - x\n    yd = y if n - y >= y else n - y\n    return xd if xd <= yd else yd\nt = int(input())\nfor i_ in range(t):\n    (n, x1, y1, x2, y2) = [int(a) for a in input().split()]\n    landlen = abs(x1 - x2) + abs(y1 - y2)\n    borlen = lenToBorder(n, x1, y1) + lenToBorder(n, x2, y2)\n    ans = landlen if landlen <= borlen else borlen\n    print(ans)", "tests = input()\n\ndef dist(x, y):\n    return x - y if x - y >= 0 else y - x\n\ndef inbound(x1, y1, x2, y2):\n    score = 0\n    score += dist(x1, x2)\n    score += dist(y1, y2)\n    return score\n\ndef outbound(N, x1, y1, x2, y2):\n    score = 0\n    bestX1 = dist(x1, 0) if dist(x1, 0) <= dist(x1, N + 1) else dist(x1, N + 1)\n    bestY1 = dist(y1, 0) if dist(y1, 0) <= dist(y1, N + 1) else dist(y1, N + 1)\n    bestX2 = dist(x2, 0) if dist(x2, 0) <= dist(x2, N + 1) else dist(x2, N + 1)\n    bestY2 = dist(y2, 0) if dist(y2, 0) <= dist(y2, N + 1) else dist(y2, N + 1)\n    score += bestX1 if bestX1 <= bestY1 else bestY1\n    score += bestX2 if bestX2 <= bestY2 else bestY2\n    return score\nfor i in range(int(tests)):\n    (A, B, C, D, E) = input().split(' ')\n    (A, B, C, D, E) = (int(A), int(B), int(C), int(D), int(E))\n    inb = inbound(B, C, D, E)\n    outb = outbound(A, B, C, D, E)\n    print(inb if inb <= outb else outb)", "for i in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    p = abs(x1 - x2) + abs(y1 - y2)\n    v = min(x1, y1, n - x1 + 1, n - y1 + 1) + min(x2, y2, n - x2 + 1, n - y2 + 1)\n    print(min(p, v))", "T = int(input())\nfor i in range(0, T):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    Cost = 0\n    print(min(abs(x2 - x1) + abs(y2 - y1), min(x1, N + 1 - x1, y1, N + 1 - y1) + min(x2, N + 1 - x2, y2, N + 1 - y2)))", "def func(n, x1, y1, x2, y2):\n    print(min(abs(x2 - x1) + abs(y2 - y1), min(x1, abs(n - x1 + 1), y1, abs(n - y1 + 1)) + min(x2, abs(n - x2 + 1), y2, abs(n - y2 + 1))))\nn = int(input())\nfor i in range(n):\n    (q, w, e, r, t) = map(int, input().split())\n    func(q, w, e, r, t)", "k = int(input())\nfor i in range(k):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    intcost = abs(x2 - x1) + abs(y2 - y1)\n    extcost = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(intcost, extcost))", "t = int(input())\nfor i in range(0, t):\n    (a, b, c, x, y) = map(int, input().split(' '))\n    s = 0\n    d1 = min(b - 1, a - b) + 1\n    d2 = min(c - 1, a - c) + 1\n    d11 = min(x - 1, a - x) + 1\n    d21 = min(y - 1, a - y) + 1\n    s = min((d11, d21)) + min((d1, d2))\n    r = 0\n    d = abs(x - b)\n    e = abs(y - c)\n    r = d + e\n    if s < r:\n        print(s)\n    else:\n        print(r)", "for _ in range(int(input())):\n    (n, x1, y1, x, y) = tuple(map(int, input().split()))\n    incost = abs(x1 - x) + abs(y1 - y)\n    dx = min(x - 1, n - x) + 1\n    dy = min(y - 1, n - y) + 1\n    dx1 = min(x1 - 1, n - x1) + 1\n    dy1 = min(y1 - 1, n - y1) + 1\n    outcost = min((dx1, dy1)) + min((dx, dy))\n    print(min((incost, outcost)))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    print(min(abs(x1 - x2) + abs(y1 - y2), min(x1, abs(n + 1 - x1), y1, abs(n + 1 - y1)) + min(x2, n + 1 - x2, y2, n + 1 - y2)))", "T = int(input())\nfor i in range(T):\n    (n, x, y, p, q) = map(int, input().split())\n    s1 = abs(p - x) + abs(q - y)\n    s2 = min(x - 1, n - x, y - 1, n - y) + min(p - 1, n - p, q - 1, n - q) + 2\n    print(min(s1, s2))", "def find_distance(grid_size, x1, y1, x2, y2):\n    cost = 0\n    cost_x1 = 0\n    if x1 <= int(grid_size / 2):\n        cost_x1 = x1\n    else:\n        cost_x1 = grid_size + 1 - x1\n    cost_y1 = 0\n    if y1 <= int(grid_size / 2):\n        cost_y1 = y1\n    else:\n        cost_y1 = grid_size + 1 - y1\n    cost_x2 = 0\n    if x2 <= int(grid_size / 2):\n        cost_x2 = x2\n    else:\n        cost_x2 = grid_size + 1 - x2\n    cost_y2 = 0\n    if y2 <= int(grid_size / 2):\n        cost_y2 = y2\n    else:\n        cost_y2 = grid_size + 1 - y2\n    cost1 = min(cost_x1, cost_y1)\n    cost2 = min(cost_x2, cost_y2)\n    cost = min(cost1 + cost2, abs(x1 - x2) + abs(y1 - y2))\n    return cost\ninp = input()\nnum_cases = int(inp)\nfor i in range(num_cases):\n    inp = input()\n    inp = inp.split(' ')\n    grid_size = int(inp[0])\n    x1 = int(inp[1])\n    y1 = int(inp[2])\n    x2 = int(inp[3])\n    y2 = int(inp[4])\n    distance = find_distance(grid_size, x1, y1, x2, y2)\n    print(distance)", "T = int(input())\nfor i in range(0, T):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    cost = 0\n    a = min(abs(x1 - 0), abs(n - x1) + 1, abs(y1 - 0), abs(n - y1) + 1)\n    cost += a\n    b = min(abs(x2 - 0), abs(n - x2) + 1, abs(y2 - 0), abs(n - y2) + 1)\n    cost += b\n    c = abs(y2 - y1) + abs(x2 - x1)\n    print(min(cost, c))", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    pathIn = abs(x2 - x1) + abs(y2 - y1)\n    pathOut = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(pathIn, pathOut))", "for t in range(int(input())):\n    (n, x, y, p, q) = map(int, input().split())\n    s1 = abs(p - x) + abs(q - y)\n    s2 = min(x - 1, n - x, y - 1, n - y) + min(p - 1, n - p, q - 1, n - q) + 2\n    print(min(s1, s2))", "for t in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    c1 = abs(x1 - x2) + abs(y1 - y2)\n    c2 = min(n + 1 - x1, x1, y1, n + 1 - y1) + min(n + 1 - x2, x2, y2, n + 1 - y2)\n    print(min(c1, c2))", "T = int(input())\nfor _ in range(T):\n    (N, x1, y1, x2, y2) = map(int, input().split(' '))\n    inner_moves = abs(x2 - x1) + abs(y2 - y1)\n    move_to_outside = min(x1, y1, N - x1 + 1, N - y1 + 1) + min(x2, y2, N - x2 + 1, N - y2 + 1)\n    print(min(inner_moves, move_to_outside))", "T = int(input())\nfor _ in range(T):\n    (N, x1, y1, x2, y2) = map(int, input().split(' '))\n    inner_moves = abs(x2 - x1) + abs(y2 - y1)\n    move_to_outside = min(x1, y1, N - x1 + 1, N - y1 + 1) + min(x2, y2, N - x2 + 1, N - y2 + 1)\n    print(min(inner_moves, move_to_outside))", "t = int(input())\nwhile t != 0:\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    min1 = abs(x2 - x1) + abs(y2 - y1)\n    min2 = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(min1, min2))\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = input().split(' ')\n    n = int(n)\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    minx = min(x1, x2)\n    maxx = max(x1, x2)\n    miny = min(y1, y2)\n    maxy = max(y1, y2)\n    nx = maxx - minx\n    ny = maxy - miny\n    sumi = nx + ny\n    minxy = min(x1, y1)\n    maxxy = max(x1, y1)\n    minx2y = min(x2, y2)\n    maxx2y = max(x2, y2)\n    out = min(minxy, n - maxxy + 1)\n    inp = min(minx2y, n - maxx2y + 1)\n    ans = out + inp\n    print(min(sumi, ans))", "T = int(input())\nfor _ in range(T):\n    (N, X1, Y1, X2, Y2) = map(int, input().split())\n    P1 = abs(X2 - X1) + abs(Y2 - Y1)\n    P2 = min(min(X1, N + 1 - X1), min(Y1, N + 1 - Y1)) + min(min(X2, N + 1 - X2), min(Y2, N + 1 - Y2))\n    print(min(P1, P2))", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_internal = abs(x2 - x1) + abs(y2 - y1)\n    cost_external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_internal, cost_external))", "testcase = int(input())\nfor i in range(testcase):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    cost1 = abs(x2 - x1) + abs(y2 - y1)\n    cost2 = min(x1, y1, n + 1 - x1, n + 1 - y1) + min(x2, y2, n + 1 - x2, n + 1 - y2)\n    print(cost1 if cost1 < cost2 else cost2)", "for _ in range(int(input())):\n    (n, x, y, a, b) = map(int, input().split())\n    ans = min(abs(x - a) + abs(y - b), min(x, y, n + 1 - x, n + 1 - y) + min(a, b, n + 1 - a, n + 1 - b))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    cost_i = abs(x2 - x1) + abs(y2 - y1)\n    cost_e = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(cost_i, cost_e))", "t = int(input())\nwhile t > 0:\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    res = 0\n    in_dist = abs(x2 - x1) + abs(y2 - y1)\n    od = 0\n    op1 = min(x1 - 1, n - x1)\n    op2 = min(y1 - 1, n - y1)\n    op1_ = min(x2 - 1, n - x2)\n    op2_ = min(y2 - 1, n - y2)\n    od = min(op1, op2) + min(op1_, op2_)\n    out_dist = od + 2\n    res = min(in_dist, out_dist)\n    print(res)\n    t -= 1", "for t in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    opt_min = abs(x1 - x2) + abs(y1 - y2)\n    (xy1, xy2) = (min(x1 - 1, y1 - 1, n - x1, n - y1), min(x2 - 1, y2 - 1, n - x2, n - y2))\n    print(min(opt_min, xy1 + xy2 + 2))", "def Haptprogram():\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    costInternal = abs(x1 - x2) + abs(y1 - y2)\n    costExternal = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(costInternal, costExternal))\nt = int(input())\nwhile t > 0:\n    Haptprogram()\n    t = t - 1", "def Haptprogram():\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    costInternal = abs(x1 - x2) + abs(y1 - y2)\n    costExternal = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(costInternal, costExternal))\nt = int(input())\nwhile t > 0:\n    Haptprogram()\n    t = t - 1", "for t in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    c1 = min(n - x1, n - y1, x1 - 1, y1 - 1) + min(n - x2, n - y2, x2 - 1, y2 - 1) + 2\n    c2 = abs(x2 - x1) + abs(y2 - y1)\n    if c1 < c2:\n        print(c1)\n    else:\n        print(c2)", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    l = abs(x1 - x2) + abs(y1 - y2)\n    if l < min(x1, y1, n - y1 + 1, n - x1 + 1) + min(x2, y2, n - y2 + 1, n - x2 + 1):\n        print(l)\n    else:\n        print(min(x1, y1, n - y1 + 1, n - x1 + 1) + min(x2, y2, n - y2 + 1, n - x2 + 1))", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    pathIn = abs(x2 - x1) + abs(y2 - y1)\n    pathOut = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(pathIn, pathOut))", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    pathIn = abs(x2 - x1) + abs(y2 - y1)\n    pathOut = min(x1 - 1, n - x1, y1 - 1, n - y1) + min(x2 - 1, n - x2, y2 - 1, n - y2) + 2\n    print(min(pathIn, pathOut))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    l = abs(x1 - x2) + abs(y1 - y2)\n    if l < min(x1, y1, n - y1 + 1, n - x1 + 1) + min(x2, y2, n - y2 + 1, n - x2 + 1):\n        print(l)\n    else:\n        print(min(x1, y1, n - y1 + 1, n - x1 + 1) + min(x2, y2, n - y2 + 1, n - x2 + 1))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    l = abs(x1 - x2) + abs(y1 - y2)\n    if l < min(x1, y1, n - y1 + 1, n - x1 + 1) + min(x2, y2, n - y2 + 1, n - x2 + 1):\n        print(l)\n    else:\n        print(min(x1, y1, n - y1 + 1, n - x1 + 1) + min(x2, y2, n - y2 + 1, n - x2 + 1))", "for _ in range(int(input())):\n    (n, x, y, a, b) = map(int, input().split())\n    res1 = abs(a - x) + abs(b - y)\n    k = n - x\n    l = n - y\n    m = n - a\n    n = n - b\n    res2 = min(k + 1, l + 1, x, y) + min(m + 1, n + 1, a, b)\n    print(min(res1, res2))", "for _ in range(int(input())):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    a = abs(x1 - x2)\n    d = abs(y1 - y2)\n    c = a + d\n    c1 = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(c, c1))", "from math import *\nt = int(input())\nfor _ in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    c1 = abs(x2 - x1) + abs(y2 - y1)\n    c2 = min(n - max(x1, y1) + 1, min(x1, y1)) + min(min(x2, y2), n - max(x2, y2) + 1)\n    print(min(c1, c2))", "from collections import Counter, defaultdict\nimport sys\nimport math\n\ndef sol(arr):\n    N = arr[0]\n    (x1, y1, x2, y2) = (arr[1], arr[2], arr[3], arr[4])\n    min_x1 = min(x1, N - x1 + 1)\n    min_x2 = min(x2, N - x2 + 1)\n    min_y1 = min(y1, N - y1 + 1)\n    min_y2 = min(y2, N - y2 + 1)\n    ans = min(min(min_x1, min_y1) + min(min_x2, min_y2), abs(x1 - x2) + abs(y1 - y2))\n    return ans\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return str(input())\n\ndef invr():\n    return map(int, input().split())\nT = inp()\nfor i in range(T):\n    arr = inlt()\n    print(sol(arr))", "T = int(input())\nfor i in range(T):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    A = abs(x1 - x2) + abs(y1 - y2)\n    B = min(N - max(x1, y1) + 1, min(x1, y1)) + min(min(x2, y2), N - max(x2, y2) + 1)\n    print(min(A, B))", "for i in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    a = abs(x1 - x2) + abs(y1 - y2)\n    b = min(n - max(x1, y1) + 1, min(x1, y1)) + min(min(x2, y2), n - max(x2, y2) + 1)\n    print(min(a, b))", "n = int(input())\nfor i in range(n):\n    arr = [int(x) for x in input().split()]\n    N = arr[0]\n    (x1, y1) = (arr[1], arr[2])\n    (x2, y2) = (arr[3], arr[4])\n    arr1 = [x1, y1, N - x1 + 1, N - y1 + 1]\n    arr1.sort()\n    a = arr1[0]\n    arr2 = [x2, y2, N - x2 + 1, N - y2 + 1]\n    arr2.sort()\n    b = arr2[0]\n    final = abs(x2 - x1) + abs(y2 - y1)\n    print(min(a + b, final))", "t = int(input())\ndist_nearest_edge = lambda x, y: min(x - 1, n - x, y - 1, n - y)\nfor _ in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split(' '))\n    c1 = abs(x1 - x2) + abs(y1 - y2)\n    c2 = dist_nearest_edge(x1, y1) + dist_nearest_edge(x2, y2) + 2\n    print(min(c1, c2))", "for _ in range(int(input())):\n    data = input().split(' ')\n    (n, x1, y1, x2, y2) = (int(data[0]), int(data[1]), int(data[2]), int(data[3]), int(data[4]))\n    calc = [abs(x1 - x2) + abs(y1 - y2), min(x1 - 1, abs(n - y1), abs(n - x1), y1 - 1) + min(x2 - 1, abs(n - x2), abs(n - y2), y2 - 1) + 2]\n    print(min(calc))", "t = int(input())\nfor _ in range(t):\n    (n, x1, y1, x2, y2) = list(map(int, input().split()))\n    inside = abs(x2 - x1) + abs(y2 - y1)\n    costOfGoingOut = min(x1 - 0, n - x1 + 1, y1 - 0, n - y1 + 1)\n    costOfComingIn = min(x2 - 0, n - x2 + 1, y2 - 0, n - y2 + 1)\n    outside = costOfComingIn + costOfGoingOut\n    print(min(inside, outside))", "for i in range(int(input())):\n    l = list(map(int, input().split()))\n    r1 = abs(l[3] - l[1]) + abs(l[4] - l[2])\n    r2 = min(l[1], l[2], l[0] + 1 - max(l[1], l[2])) + min(l[0] + 1 - max(l[3], l[4]), l[3], l[4])\n    print(min(r1, r2))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    offgridcost = min(min(n + 1 - y1, y1), min(n + 1 - x1, x1)) + min(min(n + 1 - x2, x2), min(n + 1 - y2, y2))\n    ingridcost = abs(x1 - x2) + abs(y1 - y2)\n    print(min(offgridcost, ingridcost))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    offgridcost = min(min(n + 1 - y1, y1), min(n + 1 - x1, x1)) + min(min(n + 1 - x2, x2), min(n + 1 - y2, y2))\n    ingridcost = abs(x1 - x2) + abs(y1 - y2)\n    print(min(offgridcost, ingridcost))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    side = min(min(x1, n - x1 + 1), min(y1, n - y1 + 1)) + min(min(x2, n - x2 + 1), min(y2, n - y2 + 1))\n    var = abs(x2 - x1) + abs(y2 - y1)\n    print(min(side, var))", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    side = min(min(x1, n - x1 + 1), min(y1, n - y1 + 1)) + min(min(x2, n - x2 + 1), min(y2, n - y2 + 1))\n    var = abs(x2 - x1) + abs(y2 - y1)\n    print(min(side, var))", "tc = int(input())\nfor i in range(tc):\n    (N, x1, y1, x2, y2) = map(int, input().split())\n    internal = abs(x2 - x1) + abs(y2 - y1)\n    external = min(x1 - 1, N - x1, y1 - 1, N - y1) + min(x2 - 1, N - x2, y2 - 1, N - y2) + 2\n    print(min(internal, external))", "t = int(input())\nfor i in range(0, t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    internal_sum = abs(x2 - x1) + abs(y2 - y1)\n    external_sum = min(n - x1, n - y1, x1 - 1, y1 - 1) + min(n - x2, n - y2, x2 - 1, y2 - 1) + 2\n    print(min(internal_sum, external_sum))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if (x1 < 1 or y1 < 1 or x1 > n or (y1 > n)) and (x2 < 1 or y2 < 1 or x2 > n or (y2 > n)):\n        print(0)\n    else:\n        sv = min(x1 - 1, n - x1)\n        sh = min(y1 - 1, n - y1)\n        s = min(sv, sh) + 1\n        dv = min(x2 - 1, n - x2)\n        dh = min(y2 - 1, n - y2)\n        d = min(dv, dh) + 1\n        l = abs(x1 - x2) + abs(y1 - y2)\n        k = s + d\n        print(min(l, k))", "from math import *\nt = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if max(x1, y1) > n:\n        if max(x2, y2) > n:\n            print(0)\n        else:\n            print(min(x2, y2, n + 1 - x2, n + 1 - y2))\n    elif max(x2, y2) > n:\n        if max(x1, y1) > n:\n            print(0)\n        else:\n            print(min(x1, y1, n + 1 - x1, n + 1 - y1))\n    else:\n        print(min(abs(x2 - x1) + abs(y2 - y1), min(x1, y1, n + 1 - x1, n + 1 - y1) + min(x2, y2, n + 1 - x2, n + 1 - y2)))", "from math import *\nt = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if max(x1, y1) > n:\n        if max(x2, y2) > n:\n            print(0)\n        else:\n            print(min(x2, y2, n + 1 - x2, n + 1 - y2))\n    elif max(x2, y2) > n:\n        if max(x1, y1) > n:\n            print(0)\n        else:\n            print(min(x1, y1, n + 1 - x1, n + 1 - y1))\n    else:\n        print(min(abs(x2 - x1) + abs(y2 - y1), min(x1, y1, n + 1 - x1, n + 1 - y1) + min(x2, y2, n + 1 - x2, n + 1 - y2)))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if (x1 < 1 or y1 < 1 or x1 > n or (y1 > n)) and (x2 < 1 or y2 < 1 or x2 > n or (y2 > n)):\n        print(0)\n    else:\n        sv = min(x1 - 1, n - x1)\n        sh = min(y1 - 1, n - y1)\n        s = min(sv, sh) + 1\n        dv = min(x2 - 1, n - x2)\n        dh = min(y2 - 1, n - y2)\n        d = min(dv, dh) + 1\n        l = abs(x1 - x2) + abs(y1 - y2)\n        k = s + d\n        print(min(l, k))", "for i in range(int(input())):\n    (n, x1, y1, x2, y2) = list(map(int, input().split()))\n\n    def minout(x, y):\n        m = min(min(x, n + 1 - x), min(y, n + 1 - y))\n        return m\n    mincostout = minout(x1, y1) + minout(x2, y2)\n    mincostin = abs(x2 - x1) + abs(y2 - y1)\n    print(min(mincostin, mincostout))", "for i in range(int(input())):\n    (n, x1, y1, x2, y2) = list(map(int, input().split()))\n\n    def minoutsteps(x, y):\n        if x < y:\n            min = x\n            if n + 1 - y < x:\n                min = n + 1 - y\n        else:\n            min = y\n            if n + 1 - x < y:\n                min = n + 1 - x\n        return min\n    mincostout = minoutsteps(x1, y1) + minoutsteps(x2, y2)\n    mincostin = abs(x2 - x1) + abs(y2 - y1)\n    if mincostout < mincostin:\n        print(mincostout)\n    else:\n        print(mincostin)", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = [int(i) for i in input().split()]\n    inside_dist = abs(x2 - x1) + abs(y2 - y1)\n    min_start = min(x1, y1, n - x1 + 1, n - y1 + 1)\n    min_end = min(x2, y2, n - x2 + 1, n - y2 + 1)\n    outside_dist = min_start + min_end\n    print(min(inside_dist, outside_dist))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if (x1 < 1 or y1 < 1 or x1 > n or (y1 > n)) and (x2 < 1 or y2 < 1 or x2 > n or (y2 > n)):\n        print(0)\n    else:\n        sv = min(x1 - 1, n - x1)\n        sh = min(y1 - 1, n - y1)\n        s = min(sv, sh) + 1\n        dv = min(x2 - 1, n - x2)\n        dh = min(y2 - 1, n - y2)\n        d = min(dv, dh) + 1\n        l = abs(x1 - x2) + abs(y1 - y2)\n        k = s + d\n        print(min(l, k))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if (x1 < 1 or y1 < 1 or x1 > n or (y1 > n)) and (x2 < 1 or y2 < 1 or x2 > n or (y2 > n)):\n        print(0)\n    else:\n        sv = min(x1 - 1, n - x1)\n        sh = min(y1 - 1, n - y1)\n        s = min(sv, sh) + 1\n        dv = min(x2 - 1, n - x2)\n        dh = min(y2 - 1, n - y2)\n        d = min(dv, dh) + 1\n        l = abs(x1 - x2) + abs(y1 - y2)\n        k = s + d\n        print(min(l, k))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if (x1 < 1 or y1 < 1 or x1 > n or (y1 > n)) and (x2 < 1 or y2 < 1 or x2 > n or (y2 > n)):\n        print(0)\n    else:\n        sv = min(x1 - 1, n - x1)\n        sh = min(y1 - 1, n - y1)\n        s = min(sv, sh) + 1\n        dv = min(x2 - 1, n - x2)\n        dh = min(y2 - 1, n - y2)\n        d = min(dv, dh) + 1\n        l = abs(x1 - x2) + abs(y1 - y2)\n        k = s + d\n        print(min(l, k))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if (x1 < 1 or y1 < 1 or x1 > n or (y1 > n)) and (x2 < 1 or y2 < 1 or x2 > n or (y2 > n)):\n        print(0)\n    else:\n        sv = min(x1 - 1, n - x1)\n        sh = min(y1 - 1, n - y1)\n        s = min(sv, sh) + 1\n        dv = min(x2 - 1, n - x2)\n        dh = min(y2 - 1, n - y2)\n        d = min(dv, dh) + 1\n        l = abs(x1 - x2) + abs(y1 - y2)\n        k = s + d\n        print(min(l, k))", "t = int(input())\nfor i in range(t):\n    (n, x1, y1, x2, y2) = map(int, input().split())\n    if x1 < 1 or y1 < 1 or x2 < 1 or (y2 < 1) or (x1 > n) or (x2 > n) or (y1 > n) or (y2 > n):\n        print(0)\n    else:\n        sv = min(x1 - 1, n - x1)\n        sh = min(y1 - 1, n - y1)\n        s = min(sv, sh) + 1\n        dv = min(x2 - 1, n - x2)\n        dh = min(y2 - 1, n - y2)\n        d = min(dv, dh) + 1\n        l = abs(x1 - x2) + abs(y1 - y2)\n        k = s + d\n        print(min(l, k))", "for i in range(int(input())):\n    (n, x1, y1, x2, y2) = input().split()\n    n = int(n)\n    x1 = int(x1)\n    y1 = int(y1)\n    x2 = int(x2)\n    y2 = int(y2)\n    l1 = [x1, y1, n + 1 - x1, n + 1 - y1]\n    l2 = [x2, y2, n + 1 - x2, n + 1 - y2]\n    l1.sort()\n    l2.sort()\n    a = l1[0] + l2[0]\n    b = abs(x2 - x1) + abs(y2 - y1)\n    if a > b:\n        print(b)\n    else:\n        print(a)", "for _ in range(int(input())):\n    (n, x1, y1, x2, y2) = [int(i) for i in input().split()]\n    direct = abs(x1 - x2) + abs(y1 - y2)\n    exit = min(min(x1, y1), min(n - x1, n - y1) + 1)\n    entry = min(min(x2, y2), min(n - x2, n - y2) + 1)\n    outside = exit + entry\n    print(min(direct, outside))"]