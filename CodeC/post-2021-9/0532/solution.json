["def LII():\n    return [int(x) for x in input().split()]\nfor _ in range(int(input())):\n    (n, m) = LII()\n    a = LII()\n    c = LII()\n    hist = [0] * (m + 1)\n    for x in a:\n        hist[x] += 1\n    for i in reversed(range(m)):\n        hist[i] += hist[i + 1]\n    print(max((c[p - 1] * sum((hist[k * p] for k in range(1, m // p + 1))) for p in range(1, m + 1))))", "def LII():\n    return [int(x) for x in input().split()]\nfor _ in range(int(input())):\n    (n, m) = LII()\n    a = LII()\n    c = LII()\n    hist = [0] * (m + 1)\n    for x in a:\n        hist[x] += 1\n    for i in reversed(range(m)):\n        hist[i] += hist[i + 1]\n    print(max((c[p - 1] * sum((hist[k * p] for k in range(1, m // p + 1))) for p in range(1, m + 1))))", "def LII():\n    return [int(x) for x in input().split()]\nfor _ in range(int(input())):\n    (n, m) = LII()\n    a = LII()\n    c = LII()\n    hist = [0] * (m + 1)\n    for x in a:\n        hist[x] += 1\n    for i in reversed(range(m)):\n        hist[i] += hist[i + 1]\n    print(max((c[p - 1] * sum((hist[k * p] for k in range(1, m // p + 1))) for p in range(1, m + 1))))", "def LII():\n    return [int(x) for x in input().split()]\nfor _ in range(int(input())):\n    (n, m) = LII()\n    a = LII()\n    assert len(a) == n\n    c = LII()\n    assert len(c) == m\n    assert all((x >= 1 and x <= m for x in a))\n    hist = [0] * (m + 1)\n    for x in a:\n        hist[x] += 1\n    for i in range(1, m + 1):\n        hist[i] += hist[i - 1]\n    print(max((c[p - 1] * (n * (m // p) - sum((hist[k * p - 1] for k in range(1, 1 + m // p)))) for p in range(1, m + 1))))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cts = [0] * (m + 1)\n    for cu in a:\n        cts[cu] += 1\n    for i in range(m - 1, 0, -1):\n        cts[i] += cts[i + 1]\n    best = c[0] * sum(cts)\n    for i in range(2, m + 1):\n        upd = 0\n        for j in range(i, m + 1, i):\n            upd += cts[j]\n        best = max(best, upd * c[i - 1])\n    print(best)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    br = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for i in ar:\n        pref[i] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    res = 0\n    for i in range(1, m + 1):\n        val = 0\n        for j in range(i, m + 1, i):\n            x = min(m, j + i - 1)\n            val += j // i * (pref[x] - pref[j - 1])\n        res = max(res, val * br[i - 1])\n    print(res)", "import heapq\nt = int(input())\n\ndef check(p, a, c):\n    s = 0\n    for can in a:\n        sold = can // p\n        s += sold\n    return s * c\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cur_max = -1\n    cur = 0\n    pref = [0] * (m + 1)\n    for i in a:\n        pref[i] += 1\n    for i in range(m + 1):\n        pref[i] += pref[i - 1]\n    for i in range(1, m + 1):\n        val = 0\n        for j in range(i, m + 1, i):\n            val += j // i * (pref[m if m < i + j - 1 else i + j - 1] - pref[j - 1])\n        if val * c[i - 1] > cur_max:\n            cur_max = val * c[i - 1]\n    print(cur_max)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cur_max = -1\n    cur = 0\n    pref = [0] * (m + 1)\n    for i in a:\n        pref[i] += 1\n    for i in range(m + 1):\n        pref[i] += pref[i - 1]\n    for i in range(1, m + 1):\n        val = 0\n        for j in range(i, m + 1, i):\n            val += j // i * (pref[m if m < i + j - 1 else i + j - 1] - pref[j - 1])\n        if val * c[i - 1] > cur_max:\n            cur_max = val * c[i - 1]\n    print(cur_max)", "from itertools import accumulate\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    arrn = list(map(int, input().split()))\n    arrm = list(map(int, input().split()))\n    freq = [0] * (m + 1)\n    for i in arrn:\n        freq[i] += 1\n    pref = list(accumulate(freq))\n    ans = 0\n    for i in range(1, m + 1):\n        candies = 0\n        for j in range(1, m // i + 1):\n            candies += j * (pref[min(i * (j + 1) - 1, m)] - pref[i * j - 1])\n        ans = max(ans, candies * arrm[i - 1])\n    print(ans)", "import math, copy\nfrom sys import stdin\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    nocm = [0] * (m + 1)\n    for i in a:\n        nocm[i] += 1\n    for i in range(m + 1):\n        nocm[i] += nocm[i - 1]\n    maxval = 0\n    for p in range(1, m + 1):\n        val = 0\n        for i in range(p, m + 1, p):\n            val += i // p * (nocm[min(m, i + p - 1)] - nocm[i - 1])\n        maxval = max(maxval, val * c[p - 1])\n    print(maxval)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    C = list(map(int, input().split()))\n    mn = min(C)\n    M = list(map(int, input().split()))\n    C.sort()\n    Lf = [0] * (m + 1)\n    for j in range(n):\n        Lf[C[j]] += 1\n    Lcf = [Lf[0]]\n    L = []\n    for i in range(1, len(Lf)):\n        Lcf.append(Lcf[-1] + Lf[i])\n    for i in range(1, m + 1):\n        s = 0\n        for j in range(i, m + 1, i):\n            s += j // i * Lf[j]\n            e = (Lcf[j] - Lf[j] - Lcf[j - i]) * ((j - i) // i)\n            s += e\n            if j + i > m and j != m:\n                s += (Lcf[-1] - Lcf[j]) * (j // i)\n                continue\n        L.append(s * M[i - 1])\n    print(max(L))", "import sys\nfrom bisect import bisect_left\n\ndef main():\n    tc = int(input())\n    for _ in range(tc):\n        (n, m) = map(int, input().split())\n        price = [int(a) for a in input().split()]\n        bonus = [int(a) for a in input().split()]\n        price.sort()\n        ans = 0\n        for i in range(1, m + 1):\n            tot = 0\n            for j in range(i, m + 1, i):\n                tot += n - bisect_left(price, j)\n            ans = max(ans, tot * bonus[i - 1])\n        print(ans)\nmain()", "import sys\nfrom bisect import bisect_left\n\ndef main():\n    tc = int(input())\n    for _ in range(tc):\n        (n, m) = map(int, input().split())\n        price = [int(a) for a in input().split()]\n        bonus = [int(a) for a in input().split()]\n        price.sort()\n        ans = 0\n        for i in range(1, m + 1):\n            tot = 0\n            for j in range(i, m + 1, i):\n                tot += n - bisect_left(price, j)\n            ans = max(ans, tot * bonus[i - 1])\n        print(ans)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(h) for h in input().split()]\n    A = [int(h) for h in input().split()]\n    C = [int(h) for h in input().split()]\n    freq = [0] * (m + 1)\n    cf = [0] * (m + 1)\n    cS = [0] * (m + 1)\n    for j in A:\n        freq[j] += 1\n    temp = 0\n    for j in range(1, m + 1):\n        temp += freq[j]\n        cf[j] = temp\n    temp = 0\n    for j in range(1, m + 1):\n        temp += freq[j] * j\n        cS[j] = temp\n    ans = cS[-1] * C[0]\n    for j in range(2, m + 1):\n        temp = cS[-1]\n        for k in range(0, m + 1, j):\n            up = min(k + j - 1, m)\n            r = cS[up] - cS[k]\n            g = cf[up] - cf[k]\n            r -= g * k\n            temp -= r\n        ans = max(ans, C[j - 1] * (temp // j))\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    freq = [0] * (m + 1)\n    for el in arr:\n        freq[el] += 1\n    for el in range(1, m + 1):\n        freq[el] += freq[el - 1]\n    ans = 0\n    for pr in range(1, m + 1):\n        i = 0\n        for t in range(1, m // pr + 1):\n            e = freq[min(pr * (t + 1) - 1, m)] - freq[min(pr * t - 1, m)]\n            i += e * t\n        ans = max(ans, i * brr[pr - 1])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "def solve():\n    (n, m) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    cnt = [0 for i in range(m + 1)]\n    for i in a:\n        cnt[i] += 1\n    for i in range(1, m + 1):\n        cnt[i] += cnt[i - 1]\n    ans = 0\n    for p in range(1, m + 1):\n        candies = 0\n        for x in range(1, m + 1):\n            if x > int(m / p):\n                break\n            l = x * p - 1\n            r = min(m, (x + 1) * p - 1)\n            candies += (cnt[r] - cnt[l]) * x\n        ans = max(ans, candies * c[p - 1])\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import math\ntest = int(input())\nfor t in range(test):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    maxi = 0\n    store = 0\n    indices = []\n    for k in range(len(c)):\n        if c[k] > store:\n            indices.append(k)\n            store = c[k]\n    i = 0\n    while i < len(indices) and i <= max(a):\n        sum = 0\n        for h in range(len(a)):\n            sum += a[h] // (indices[i] + 1)\n        maxi = max(maxi, sum * c[indices[i]])\n        i += 1\n    print(maxi)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef lsi():\n    return si().strip().split(' ')\n\ndef ni():\n    return int(input())\nfor _ in range(ni()):\n    (n, m) = mi()\n    a = li()\n    c = li()\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef lsi():\n    return si().strip().split(' ')\n\ndef ni():\n    return int(input())\nfor _ in range(ni()):\n    (n, m) = mi()\n    a = li()\n    c = li()\n    pref = [0] * (m + 1)\n    for x in a:\n        pref[x] += 1\n    for i in range(1, m + 1):\n        pref[i] += pref[i - 1]\n    ans = 0\n    for x in range(1, m + 1):\n        val = 0\n        for y in range(x, m + 1, x):\n            R = min(m, y + x - 1)\n            val += y // x * (pref[R] - pref[y - 1])\n        ans = max(ans, val * c[x - 1])\n    print(ans)", "t = int(input())\nwhile t:\n    (x, y) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = 0\n    n = 0\n    if x > 10 ** 3:\n        for u in range(0, y):\n            n1 = b[u] // (u + 1) + 1\n            if n1 > n:\n                a1 = [u1 // (u + 1) for u1 in a]\n                a2 = sum(a1) * b[u]\n                if a2 > c:\n                    c = a2\n                n = n1\n    else:\n        for u in range(0, y):\n            a1 = [u1 // (u + 1) for u1 in a]\n            a2 = sum(a1) * b[u]\n            if a2 > c:\n                c = a2\n    print(c)\n    t -= 1", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = defaultdict(int)\n    for i in a:\n        d[i] += 1\n    ans = sum(a) * c[0]\n    val = sum(a)\n    a = list(set(a))\n    a.sort(reverse=True)\n    n1 = len(a)\n    c1 = max(c)\n    c2 = 0\n    d1 = defaultdict(int)\n    for i in range(2, m + 1):\n        if c2 >= c[i - 1]:\n            continue\n        else:\n            c2 = c[i - 1]\n        if d1[c[i - 1]] == 1:\n            continue\n        d1[c[i - 1]] = 1\n        j = 0\n        s = 0\n        while j < n1:\n            v = a[j] // i\n            if v == 0:\n                n1 = j\n                break\n            s += v * d[a[j]]\n            j += 1\n        ans = max(ans, s * c[i - 1])\n        if n1 == 0 or c1 == c[i - 1] or ans >= c1 * s or (ans >= c1 * val // i):\n            break\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    mp = max(a)\n    budgets = [0 for i in range(mp + 1)]\n    ac = Counter(a)\n    for j in range(1, mp + 1):\n        if j in ac:\n            budgets[j] = budgets[j - 1] + ac[j]\n        else:\n            budgets[j] = budgets[j - 1]\n    prices = [0 for i in range(m)]\n    prices[0] = sum(a)\n    for i in range(1, m):\n        p = i + 1\n        for j in range(mp // p + 1):\n            if (j + 1) * p - 1 <= mp:\n                prices[i] += j * (budgets[(j + 1) * p - 1] - budgets[j * p - 1])\n            else:\n                prices[i] += j * (budgets[-1] - budgets[j * p - 1])\n    for j in range(m):\n        prices[j] = prices[j] * c[j]\n    print(max(prices))", "T = int(input())\nfor i in range(T):\n    (N, M) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    C = [int(x) for x in input().split()]\n    max_C = 0\n    max_bonus = 0\n    for j in range(M):\n        number_of_candies = 0\n        if C[j] > max_C and C[j] / (j + 1) >= max_C / (j + 1):\n            max_C = C[j]\n            for k in range(N):\n                number_of_candies += A[k] // (j + 1)\n            if number_of_candies * C[j] > max_bonus:\n                max_bonus = number_of_candies * C[j]\n    print(max_bonus)", "import sys, os\nfrom io import BytesIO, IOBase\nmod = 10 ** 9 + 7\nMod = 998244353\nINF = float('inf')\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\ntc = 1\ntc = int(input())\nfor test_cases in range(1, tc + 1):\n    (n, m) = inp()\n    a = inp()\n    c = inp()\n    m_ = m\n    m = 2 * m\n    arr = [0] * (m + 1)\n    for i in a:\n        arr[i] += 1\n    pre = [0] * (m + 1)\n    for i in range(1, m + 1):\n        pre[i] += pre[i - 1] + arr[i]\n    ans = 0\n    for i in range(1, m_ + 1):\n        res = 0\n        cnt = 0\n        mul = 0\n        for j in range(i + i - 1, m + 1, i):\n            res += (pre[j] - pre[j - i]) * (j // i)\n        ans = max(ans, res * c[i - 1])\n    print(ans)"]