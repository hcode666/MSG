["t = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().split())\n    x -= 1\n    y -= 1\n    ans = [[0 for _ in range(8)] for _ in range(8)]\n    ans[x][y] = 1\n    a = [[0, 0], [0, 7], [7, 0], [7, 7]]\n    b = [[-2, -1], [-2, +1], [-1, -2], [-1, +2], [+1, -2], [+1, +2], [+2, -1], [+2, +1]]\n    if [x, y] in a:\n        for i in range(len(b)):\n            if 0 <= x + b[i][0] <= 7 and 0 <= y + b[i][1] <= 7:\n                ans[x + b[i][0]][y + b[i][1]] = 2\n                break\n    elif x == 0:\n        ans[x + 2][y - 1] = 2\n        ans[x + 2][y + 1] = 2\n    elif x == 7:\n        ans[x - 2][y - 1] = 2\n        ans[x - 2][y + 1] = 2\n    elif y == 0:\n        ans[x + 1][y + 2] = 2\n        ans[x - 1][y + 2] = 2\n    elif y == 7:\n        ans[x + 1][y - 2] = 2\n        ans[x - 1][y - 2] = 2\n    elif x == 1 and y == 1:\n        ans[x + 2][y - 1] = 2\n        ans[x - 1][y + 3] = 2\n    elif x == 1 and y == 6:\n        ans[x - 1][y - 3] = 2\n        ans[x + 2][y + 1] = 2\n    elif x == 6 and y == 1:\n        ans[x - 2][y - 1] = 2\n        ans[x + 1][y + 3] = 2\n    elif x == 6 and y == 6:\n        ans[x - 2][y + 1] = 2\n        ans[x + 1][y - 3] = 2\n    elif y == 1 or y == 6:\n        ans[x - 2][y + 1] = 2\n        ans[x + 2][y - 1] = 2\n    elif x == 1 or x == 6:\n        ans[x - 1][y - 2] = 2\n        ans[x + 1][y + 2] = 2\n    else:\n        ans[x - 1][y - 2] = 2\n        ans[x + 1][y + 2] = 2\n    for i in range(8):\n        print(*ans[i])", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    board = []\n    for i in range(8):\n        temp = []\n        for j in range(8):\n            temp.append(0)\n        board.append(temp)\n    a = []\n    if (x == 1 or x == 8) and (y == 1 or y == 8):\n        if x == 1:\n            if y == 1:\n                a.append([3, 2])\n            else:\n                a.append([3, 7])\n        elif y == 1:\n            a.append([6, 2])\n        else:\n            a.append([6, 7])\n    elif x == 1:\n        a.append([3, y - 1])\n        a.append([3, y + 1])\n    elif x == 8:\n        a.append([6, y - 1])\n        a.append([6, y + 1])\n    elif y == 1:\n        a.append([x - 1, 3])\n        a.append([x + 1, 3])\n    elif y == 8:\n        a.append([x - 1, 6])\n        a.append([x + 1, 6])\n    elif x == 2:\n        if y == 2:\n            a.append([x + 3, y - 1])\n            a.append([x - 1, y + 2])\n        elif y == 7:\n            a.append([x + 3, y + 1])\n            a.append([x - 1, y - 2])\n        else:\n            a.append([x + 1, y - 2])\n            a.append([x - 1, y + 2])\n    elif x == 7:\n        if y == 2:\n            a.append([x - 3, y - 1])\n            a.append([x + 1, y + 2])\n        elif y == 7:\n            a.append([x - 3, y + 1])\n            a.append([x + 1, y - 2])\n        else:\n            a.append([x + 1, y - 2])\n            a.append([x - 1, y + 2])\n    else:\n        a.append([x + 2, y - 1])\n        a.append([x - 2, y + 1])\n    board[x - 1][y - 1] = 1\n    for i in a:\n        board[i[0] - 1][i[1] - 1] = 2\n    for i in range(8):\n        for j in range(8):\n            print(board[i][j], end=' ')\n        print('')", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    board = []\n    for i in range(8):\n        temp = []\n        for j in range(8):\n            temp.append(0)\n        board.append(temp)\n    a = []\n    if (x == 1 or x == 8) and (y == 1 or y == 8):\n        if x == 1:\n            if y == 1:\n                a.append([3, 2])\n            else:\n                a.append([3, 7])\n        elif y == 1:\n            a.append([6, 2])\n        else:\n            a.append([6, 7])\n    elif x == 1:\n        a.append([3, y - 1])\n        a.append([3, y + 1])\n    elif x == 8:\n        a.append([6, y - 1])\n        a.append([6, y + 1])\n    elif y == 1:\n        a.append([x - 1, 3])\n        a.append([x + 1, 3])\n    elif y == 8:\n        a.append([x - 1, 6])\n        a.append([x + 1, 6])\n    elif x == 2:\n        if y == 2:\n            a.append([x + 3, y - 1])\n            a.append([x - 1, y + 2])\n        elif y == 7:\n            a.append([x + 3, y + 1])\n            a.append([x - 1, y - 2])\n        else:\n            a.append([x + 1, y - 2])\n            a.append([x - 1, y + 2])\n    elif x == 7:\n        if y == 2:\n            a.append([x - 3, y - 1])\n            a.append([x + 1, y + 2])\n        elif y == 7:\n            a.append([x - 3, y + 1])\n            a.append([x + 1, y - 2])\n        else:\n            a.append([x + 1, y - 2])\n            a.append([x - 1, y + 2])\n    else:\n        a.append([x + 2, y - 1])\n        a.append([x - 2, y + 1])\n    board[x - 1][y - 1] = 1\n    for i in a:\n        board[i[0] - 1][i[1] - 1] = 2\n    for i in range(8):\n        for j in range(8):\n            print(board[i][j], end=' ')\n        print('')", "T = int(input())\nfor t in range(T):\n    (A, B) = map(int, input().split())\n    (A, B) = (A - 1, B - 1)\n    grid = [[0 for j in range(8)] for i in range(8)]\n    grid[A][B] = 1\n    if A in {0, 7} and B in {0, 7}:\n        if A == 0 and B == 0:\n            grid[1][2] = 2\n        elif A == 0 and B == 7:\n            grid[1][5] = 2\n        elif A == 7 and B == 0:\n            grid[6][2] = 2\n        elif A == 7 and B == 7:\n            grid[6][5] = 2\n    elif A in range(1, 7) and B in {0, 7}:\n        if B == 0:\n            grid[A - 1][2] = 2\n            grid[A + 1][2] = 2\n        elif B == 7:\n            grid[A - 1][5] = 2\n            grid[A + 1][5] = 2\n    elif A in {0, 7} and B in range(1, 7):\n        if A == 0:\n            grid[2][B - 1] = 2\n            grid[2][B + 1] = 2\n        elif A == 7:\n            grid[5][B - 1] = 2\n            grid[5][B + 1] = 2\n    elif A in range(1, 5) and B in range(1, 6):\n        grid[A - 1][B + 2] = 2\n        grid[A + 3][B - 1] = 2\n    elif A in range(1, 5) and B == 6:\n        grid[A - 1][B - 2] = 2\n        grid[A + 3][B + 1] = 2\n    elif A == 5 and B in range(1, 7):\n        grid[A - 2][B - 1] = 2\n        grid[A + 2][B + 1] = 2\n    elif A == 6 and B in range(1, 5):\n        grid[A - 2][B - 1] = 2\n        grid[A + 1][B + 3] = 2\n    elif A == 6 and B in {5, 6}:\n        grid[A - 3][B + 1] = 2\n        grid[A + 1][B - 2] = 2\n    for i in range(8):\n        print(*grid[i])", "def main():\n    t = int(input())\n    for i in range(t):\n        (x, y) = tuple(map(int, input().split()))\n        solve(x - 1, y - 1)\n\ndef solve(x, y):\n    m = [[0] * 8 for i in range(8)]\n    m[x][y] = 1\n    if x in range(2, 6) and y in range(1, 7):\n        m[x - 2][y - 1] = 2\n        m[x + 2][y + 1] = 2\n    elif x in range(1, 7) and y in range(2, 6):\n        m[x - 1][y - 2] = 2\n        m[x + 1][y + 2] = 2\n    elif x in (0, 7):\n        if y in (0, 7):\n            u = x + 2 if x == 0 else x - 2\n            v = y + 1 if y == 0 else y - 1\n            m[u][v] = 2\n        else:\n            u = x + 2 if x == 0 else x - 2\n            m[u][y - 1] = 2\n            m[u][y + 1] = 2\n    elif y in (0, 7):\n        if x in (0, 7):\n            u = x + 1 if x == 0 else x - 1\n            v = y + 2 if y == 0 else y - 2\n            m[u][v] = 2\n        else:\n            v = y + 2 if y == 0 else y - 2\n            m[x - 1][v] = 2\n            m[x + 1][v] = 2\n    else:\n        if (x, y) == (1, 1):\n            m[3][0] = 2\n            m[0][4] = 2\n        if (x, y) == (6, 1):\n            m[7][4] = 2\n            m[4][0] = 2\n        if (x, y) == (6, 6):\n            m[4][7] = 2\n            m[7][3] = 2\n        if (x, y) == (1, 6):\n            m[0][3] = 2\n            m[3][7] = 2\n    for row in m:\n        print(' '.join(map(str, row)))\nmain()", "def main():\n    t = int(input())\n    for i in range(t):\n        (x, y) = tuple(map(int, input().split()))\n        solve(x - 1, y - 1)\n\ndef solve(x, y):\n    m = [[0] * 8 for i in range(8)]\n    m[x][y] = 1\n    if x in range(2, 6) and y in range(1, 7):\n        m[x - 2][y - 1] = 2\n        m[x + 2][y + 1] = 2\n    elif x in range(1, 7) and y in range(2, 6):\n        m[x - 1][y - 2] = 2\n        m[x + 1][y + 2] = 2\n    elif x in (0, 7):\n        if y in (0, 7):\n            u = x + 2 if x == 0 else x - 2\n            v = y + 1 if y == 0 else y - 1\n            m[u][v] = 2\n        else:\n            u = x + 2 if x == 0 else x - 2\n            m[u][y - 1] = 2\n            m[u][y + 1] = 2\n    elif y in (0, 7):\n        if x in (0, 7):\n            u = x + 1 if x == 0 else x - 1\n            v = y + 2 if y == 0 else y - 2\n            m[u][v] = 2\n        else:\n            v = y + 2 if y == 0 else y - 2\n            m[x - 1][v] = 2\n            m[x + 1][v] = 2\n    else:\n        if (x, y) == (1, 1):\n            m[3][0] = 2\n            m[0][4] = 2\n        if (x, y) == (6, 1):\n            m[7][4] = 2\n            m[4][0] = 2\n        if (x, y) == (6, 6):\n            m[4][7] = 2\n            m[7][3] = 2\n        if (x, y) == (1, 6):\n            m[0][3] = 2\n            m[3][7] = 2\n    for row in m:\n        print(' '.join(map(str, row)))\nmain()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    arr = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    arr[a][b] = 1\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        if a == 0 and b == 0:\n            arr[2][1] = 2\n        elif a == 0 and b == 7:\n            arr[2][6] = 2\n        elif a == 7 and b == 0:\n            arr[5][1] = 2\n        elif a == 7 and b == 7:\n            arr[5][6] = 2\n    elif b == 0 or a == 0 or b == 7 or (a == 7):\n        if b == 0:\n            arr[a - 1][2] = 2\n            arr[a + 1][2] = 2\n        elif a == 0:\n            arr[2][b - 1] = 2\n            arr[2][b + 1] = 2\n        elif b == 7:\n            arr[a - 1][5] = 2\n            arr[a + 1][5] = 2\n        elif a == 7:\n            arr[5][b + 1] = 2\n            arr[5][b - 1] = 2\n    elif b + 3 <= 7:\n        if a + 2 <= 7:\n            arr[a - 1][b + 3] = 2\n            arr[a + 2][b - 1] = 2\n        else:\n            arr[a + 1][b + 3] = 2\n            arr[a - 2][b - 1] = 2\n    elif a + 3 <= 7:\n        arr[a - 1][b - 2] = 2\n        arr[a + 3][b + 1] = 2\n    else:\n        arr[a + 1][b - 3] = 2\n        arr[a - 2][b + 1] = 2\n    for x in arr:\n        print(*x)\n    print()", "from ctypes import pointer\nmapInput = lambda : map(int, input().split())\nlistInput = lambda : list(mapInput())\n\nclass Point:\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\n    def __add__(self, p):\n        return Point(self.x + p.x, self.y + p.y)\n\n    def __eq__(self, p):\n        return self.x == p.x and self.y == p.y\n\n    def isValid(self):\n        return self.x >= 1 and self.x <= 8 and (self.y >= 1) and (self.y <= 8)\noffsets = [Point(1, 2), Point(-1, 2), Point(1, -2), Point(-1, -2), Point(2, 1), Point(-2, 1), Point(2, -1), Point(-2, -1)]\nfor _ in range(int(input())):\n    (y, x) = mapInput()\n    kingPos = Point(x, y)\n    queenPos = []\n    if x == 1 and y == 1 or (x == 1 and y == 8) or (x == 8 and y == 1) or (x == 8 and y == 8):\n        for offset in offsets:\n            if (kingPos + offset).isValid():\n                queenPos.append(kingPos + offset)\n                break\n    elif x == 1 or y == 1 or x == 8 or (y == 8):\n        if (kingPos + offsets[0]).isValid() and (kingPos + offsets[1]).isValid():\n            queenPos.append(kingPos + offsets[0])\n            queenPos.append(kingPos + offsets[1])\n        elif (kingPos + offsets[2]).isValid() and (kingPos + offsets[3]).isValid():\n            queenPos.append(kingPos + offsets[2])\n            queenPos.append(kingPos + offsets[3])\n        elif (kingPos + offsets[4]).isValid() and (kingPos + offsets[6]).isValid():\n            queenPos.append(kingPos + offsets[4])\n            queenPos.append(kingPos + offsets[6])\n        else:\n            queenPos.append(kingPos + offsets[5])\n            queenPos.append(kingPos + offsets[7])\n    elif x == 2 and y == 2 or (x == 2 and y == 7) or (x == 7 and y == 2) or (x == 7 and y == 7):\n        if x == 2 and y == 2:\n            queenPos.append(kingPos + Point(2, -1))\n            queenPos.append(kingPos + Point(-1, 3))\n        elif x == 2 and y == 7:\n            queenPos.append(kingPos + Point(-1, -2))\n            queenPos.append(kingPos + Point(3, 1))\n        elif x == 7 and y == 2:\n            queenPos.append(kingPos + Point(-3, -1))\n            queenPos.append(kingPos + Point(1, 2))\n        else:\n            queenPos.append(kingPos + Point(-2, 1))\n            queenPos.append(kingPos + Point(1, -3))\n    elif (kingPos + offsets[0]).isValid() and (kingPos + offsets[3]).isValid():\n        queenPos.append(kingPos + offsets[0])\n        queenPos.append(kingPos + offsets[3])\n    else:\n        queenPos.append(kingPos + offsets[4])\n        queenPos.append(kingPos + offsets[7])\n    outputString = ''\n    for y in range(1, 9):\n        for x in range(1, 9):\n            if Point(x, y) == kingPos:\n                outputString += '1'\n            elif Point(x, y) in queenPos:\n                outputString += '2'\n            else:\n                outputString += '0'\n            if x != 8:\n                outputString += ' '\n        outputString += '\\n'\n    print(outputString)", "t = int(input())\nfor k in range(t):\n    rc = list(map(int, input().split()))\n    r = rc[0] - 1\n    c = rc[1] - 1\n    corner = [0, 7]\n    adjcor = [1, 6]\n    matrix = []\n    for i in range(8):\n        a = []\n        for j in range(8):\n            a.append(0)\n        matrix.append(a)\n    matrix[r][c] = 1\n    if r in corner and c in corner:\n        if r <= 4:\n            r = r + 1\n        if r > 4:\n            r = r - 1\n        if c <= 4:\n            c = c + 2\n        if c > 4:\n            c = c - 2\n        matrix[r][c] = 2\n    elif r in adjcor and c in adjcor:\n        if r == 1:\n            matrix[0][4] = 2\n            if c == 1:\n                matrix[3][0] = 2\n            else:\n                matrix[4][7] = 2\n        else:\n            matrix[7][3] = 2\n            if c == 1:\n                matrix[3][0] = 2\n            else:\n                matrix[4][7] = 2\n    elif r == 0:\n        matrix[2][c + 1] = 2\n        matrix[2][c - 1] = 2\n    elif c == 0:\n        matrix[r + 1][2] = 2\n        matrix[r - 1][2] = 2\n    elif r == 7:\n        matrix[5][c + 1] = 2\n        matrix[5][c - 1] = 2\n    elif c == 7:\n        matrix[r + 1][5] = 2\n        matrix[r - 1][5] = 2\n    elif c == 1 or c == 6:\n        matrix[r - 2][c - 1] = 2\n        matrix[r + 2][c + 1] = 2\n    elif r >= 1 and r <= 6:\n        matrix[r - 1][c - 2] = 2\n        matrix[r + 1][c + 2] = 2\n    for i in range(8):\n        for j in range(8):\n            print(matrix[i][j], end=' ')\n        print()\n    print()", "t = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().split())\n    (x, y) = (x - 1, y - 1)\n    B = [[0 for i in range(8)] for j in range(8)]\n    B[x][y] = 1\n    if x == 0:\n        if y == 0:\n            B[1][2] = 2\n        elif y == 7:\n            B[1][5] = 2\n        else:\n            B[x + 2][y - 1] = 2\n            B[x + 2][y + 1] = 2\n    elif x == 7:\n        if y == 0:\n            B[6][2] = 2\n        elif y == 7:\n            B[6][5] = 2\n        else:\n            B[x - 2][y - 1] = 2\n            B[x - 2][y + 1] = 2\n    elif y == 0:\n        B[x + 1][y + 2] = 2\n        B[x - 1][y + 2] = 2\n    elif y == 7:\n        B[x - 1][y - 2] = 2\n        B[x + 1][y - 2] = 2\n    elif x == 1:\n        if y == 1:\n            B[x - 1][y + 3] = 2\n            B[x + 2][y - 1] = 2\n        elif y == 6:\n            B[x - 1][y - 2] = 2\n            B[x + 3][y + 1] = 2\n        else:\n            B[x - 1][y - 2] = 2\n            B[x + 1][y + 2] = 2\n    elif x == 6:\n        if y == 1:\n            B[x + 1][y + 3] = 2\n            B[x - 2][y - 1] = 2\n        elif y == 6:\n            B[x + 1][y - 3] = 2\n            B[x - 2][y + 1] = 2\n        else:\n            B[x - 1][y - 2] = 2\n            B[x + 1][y + 2] = 2\n    elif y == 1:\n        B[x - 2][y - 1] = 2\n        B[x + 2][y + 1] = 2\n    elif y == 6:\n        B[x - 2][y + 1] = 2\n        B[x + 2][y - 1] = 2\n    else:\n        B[x - 1][y - 2] = 2\n        B[x + 1][y + 2] = 2\n    for i in range(8):\n        print(*B[i])", "for i in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    a -= 1\n    b -= 1\n    c = [[0] * 8 for _ in range(8)]\n    c[a][b] = 1\n    if a == 1 and b == 1:\n        c[a - 1][b + 3] = 2\n        c[a + 2][b - 1] = 2\n    elif a == 1 and b == 6:\n        c[a - 1][b - 2] = 2\n        c[a + 3][b + 1] = 2\n    elif a == 6 and b == 1:\n        c[a + 1][b + 3] = 2\n        c[a - 2][b - 1] = 2\n    elif a == 6 and b == 6:\n        c[a + 1][b - 3] = 2\n        c[a - 2][b + 1] = 2\n    elif a == 0 and b == 0:\n        c[a + 1][b + 2] = 2\n    elif a == 0 and b == 7:\n        c[a + 1][b - 2] = 2\n    elif a == 7 and b == 0:\n        c[a - 1][b + 2] = 2\n    elif a == 7 and b == 7:\n        c[a - 1][b - 2] = 2\n    elif a == 0:\n        c[a + 2][b + 1] = 2\n        c[a + 2][b - 1] = 2\n    elif b == 0:\n        c[a + 1][b + 2] = 2\n        c[a - 1][b + 2] = 2\n    elif a == 7:\n        c[a - 2][b + 1] = 2\n        c[a - 2][b - 1] = 2\n    elif b == 7:\n        c[a + 1][b - 2] = 2\n        c[a - 1][b - 2] = 2\n    elif a == 1:\n        c[a - 1][b - 2] = 2\n        c[a + 1][b + 2] = 2\n    elif a == 6:\n        c[a + 1][b - 2] = 2\n        c[a - 1][b + 2] = 2\n    else:\n        c[a + 2][b - 1] = 2\n        c[a - 2][b + 1] = 2\n    for j in c:\n        for k in j:\n            print(k, end=' ')\n        print()", "def print_chessboard(chessboard):\n    for i in range(8):\n        for j in range(8):\n            print(chessboard[i][j], end=' ')\n        print()\n\ndef minqueens(chessboard, a, b):\n    if a == 1 and b == 1:\n        chessboard[1][2] = 2\n        return\n    if a == 1 and b == 8:\n        chessboard[1][5] = 2\n        return\n    if a == 8 and b == 1:\n        chessboard[6][2] = 2\n        return\n    if a == 8 and b == 8:\n        chessboard[6][5] = 2\n        return\n    if a == 1:\n        chessboard[2][b] = 2\n        chessboard[2][b - 2] = 2\n        return\n    if a == 8:\n        chessboard[5][b] = 2\n        chessboard[5][b - 2] = 2\n        return\n    if b == 1:\n        chessboard[a][2] = 2\n        chessboard[a - 2][2] = 2\n        return\n    if b == 8:\n        chessboard[a][5] = 2\n        chessboard[a - 2][5] = 2\n        return\n    if a == 7 and b == 7:\n        chessboard[7][4] = 2\n        chessboard[5][4] = 2\n        chessboard[4][7] = 2\n        return\n    if b == 7:\n        chessboard[a][b - 3] = 2\n        chessboard[a - 2][b - 3] = 2\n        chessboard[a + 1][b] = 2\n        return\n    if a == 7:\n        chessboard[a][b + 1] = 2\n        chessboard[a - 2][b + 1] = 2\n        chessboard[4][b - 2] = 2\n        return\n    chessboard[a][b + 1] = 2\n    chessboard[a - 2][b + 1] = 2\n    chessboard[a + 1][b - 2] = 2\n    return\nfor _ in range(int(input())):\n    (a, b) = list(map(int, input().split()))\n    B = [[0 for i in range(8)] for j in range(8)]\n    B[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        B[1][2] = 2\n    elif a == 1 and b == 8:\n        B[1][5] = 2\n    elif a == 8 and b == 1:\n        B[6][2] = 2\n    elif a == 8 and b == 8:\n        B[6][5] = 2\n    elif a == 1:\n        B[a + 1][b - 2] = 2\n        B[a + 1][b] = 2\n    elif a == 8:\n        B[a - 3][b - 2] = 2\n        B[a - 3][b] = 2\n    elif b == 1:\n        B[a][b + 1] = 2\n        B[a - 2][b + 1] = 2\n    elif b == 8:\n        B[a - 2][b - 3] = 2\n        B[a][b - 3] = 2\n    elif a == 2 and b == 2:\n        B[a - 2][b + 2] = 2\n        B[a + 1][b - 2] = 2\n    elif a == 2 and b == 7:\n        B[a - 2][b - 3] = 2\n        B[a + 2][b] = 2\n    elif a == 7 and b == 2:\n        B[a][b + 2] = 2\n        B[a - 3][b - 2] = 2\n    elif a == 7 and b == 7:\n        B[a][b - 4] = 2\n        B[a - 3][b] = 2\n    elif a == 2:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    elif a == 7:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    elif b == 2:\n        B[a - 3][b - 2] = 2\n        B[a + 1][b] = 2\n    elif b == 7:\n        B[a - 3][b] = 2\n        B[a + 1][b - 2] = 2\n    else:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    for i in range(8):\n        print(*B[i])", "test = int(input())\nfor t in range(test):\n    (a, b) = map(int, input().split())\n    B = [[0 for i in range(8)] for j in range(8)]\n    B[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        B[1][2] = 2\n    elif a == 1 and b == 8:\n        B[1][5] = 2\n    elif a == 8 and b == 1:\n        B[6][2] = 2\n    elif a == 8 and b == 8:\n        B[6][5] = 2\n    elif a == 1:\n        B[a + 1][b - 2] = 2\n        B[a + 1][b] = 2\n    elif a == 8:\n        B[a - 3][b - 2] = 2\n        B[a - 3][b] = 2\n    elif b == 1:\n        B[a][b + 1] = 2\n        B[a - 2][b + 1] = 2\n    elif b == 8:\n        B[a - 2][b - 3] = 2\n        B[a][b - 3] = 2\n    elif a == 2 and b == 2:\n        B[a - 2][b + 2] = 2\n        B[a + 1][b - 2] = 2\n    elif a == 2 and b == 7:\n        B[a - 2][b - 3] = 2\n        B[a + 2][b] = 2\n    elif a == 7 and b == 2:\n        B[a][b + 2] = 2\n        B[a - 3][b - 2] = 2\n    elif a == 7 and b == 7:\n        B[a][b - 4] = 2\n        B[a - 3][b] = 2\n    elif a == 2:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    elif a == 7:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    elif b == 2:\n        B[a - 3][b - 2] = 2\n        B[a + 1][b] = 2\n    elif b == 7:\n        B[a - 3][b] = 2\n        B[a + 1][b - 2] = 2\n    else:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    for i in range(8):\n        print(*B[i])", "for i in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    a -= 1\n    b -= 1\n    c = [[0] * 8 for _ in range(8)]\n    c[a][b] = 1\n    if a == 1 and b == 1:\n        c[a - 1][b + 3] = 2\n        c[a + 2][b - 1] = 2\n    elif a == 1 and b == 6:\n        c[a - 1][b - 2] = 2\n        c[a + 3][b + 1] = 2\n    elif a == 6 and b == 1:\n        c[a + 1][b + 3] = 2\n        c[a - 2][b - 1] = 2\n    elif a == 6 and b == 6:\n        c[a + 1][b - 3] = 2\n        c[a - 2][b + 1] = 2\n    elif a == 0 and b == 0:\n        c[a + 1][b + 2] = 2\n    elif a == 0 and b == 7:\n        c[a + 1][b - 2] = 2\n    elif a == 7 and b == 0:\n        c[a - 1][b + 2] = 2\n    elif a == 7 and b == 7:\n        c[a - 1][b - 2] = 2\n    elif a == 0:\n        c[a + 2][b + 1] = 2\n        c[a + 2][b - 1] = 2\n    elif b == 0:\n        c[a + 1][b + 2] = 2\n        c[a - 1][b + 2] = 2\n    elif a == 7:\n        c[a - 2][b + 1] = 2\n        c[a - 2][b - 1] = 2\n    elif b == 7:\n        c[a + 1][b - 2] = 2\n        c[a - 1][b - 2] = 2\n    elif a == 1:\n        c[a - 1][b - 2] = 2\n        c[a + 1][b + 2] = 2\n    elif a == 6:\n        c[a + 1][b - 2] = 2\n        c[a - 1][b + 2] = 2\n    else:\n        c[a + 2][b - 1] = 2\n        c[a - 2][b + 1] = 2\n    for j in c:\n        for k in j:\n            print(k, end=' ')\n        print()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    arr = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    arr[a][b] = 1\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        if a == 0 and b == 0:\n            arr[2][1] = 2\n        elif a == 0 and b == 7:\n            arr[2][6] = 2\n        elif a == 7 and b == 0:\n            arr[5][1] = 2\n        elif a == 7 and b == 7:\n            arr[5][6] = 2\n    elif b == 0 or a == 0 or b == 7 or (a == 7):\n        if b == 0:\n            arr[a - 1][2] = 2\n            arr[a + 1][2] = 2\n        elif a == 0:\n            arr[2][b - 1] = 2\n            arr[2][b + 1] = 2\n        elif b == 7:\n            arr[a - 1][5] = 2\n            arr[a + 1][5] = 2\n        elif a == 7:\n            arr[5][b + 1] = 2\n            arr[5][b - 1] = 2\n    elif b + 3 <= 7:\n        if a + 2 <= 7:\n            arr[a - 1][b + 3] = 2\n            arr[a + 2][b - 1] = 2\n        else:\n            arr[a + 1][b + 3] = 2\n            arr[a - 2][b - 1] = 2\n    elif a + 3 <= 7:\n        arr[a - 1][b - 2] = 2\n        arr[a + 3][b + 1] = 2\n    else:\n        arr[a + 1][b - 3] = 2\n        arr[a - 2][b + 1] = 2\n    for x in arr:\n        print(*x)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    arr = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    arr[a][b] = 1\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        if a == 0 and b == 0:\n            arr[2][1] = 2\n        elif a == 0 and b == 7:\n            arr[2][6] = 2\n        elif a == 7 and b == 0:\n            arr[5][1] = 2\n        elif a == 7 and b == 7:\n            arr[5][6] = 2\n    elif b == 0 or a == 0 or b == 7 or (a == 7):\n        if b == 0:\n            arr[a - 1][2] = 2\n            arr[a + 1][2] = 2\n        elif a == 0:\n            arr[2][b - 1] = 2\n            arr[2][b + 1] = 2\n        elif b == 7:\n            arr[a - 1][5] = 2\n            arr[a + 1][5] = 2\n        elif a == 7:\n            arr[5][b + 1] = 2\n            arr[5][b - 1] = 2\n    elif b + 3 <= 7:\n        if a + 2 <= 7:\n            arr[a - 1][b + 3] = 2\n            arr[a + 2][b - 1] = 2\n        else:\n            arr[a + 1][b + 3] = 2\n            arr[a - 2][b - 1] = 2\n    elif a + 3 <= 7:\n        arr[a - 1][b - 2] = 2\n        arr[a + 3][b + 1] = 2\n    else:\n        arr[a + 1][b - 3] = 2\n        arr[a - 2][b + 1] = 2\n    for x in arr:\n        print(*x)\n    print()", "def innercircle(x, y):\n    x2 = -1\n    y2 = -1\n    if (x == 2 or x == 7) and (y > 2 and y < 7):\n        x1 = x - 1\n        y1 = y - 2\n        x2 = x + 1\n        y2 = y + 2\n    elif x > 2 and x < 7 and (y >= 2) and (y <= 7):\n        x1 = x - 2\n        y1 = y - 1\n        x2 = x + 2\n        y2 = y + 1\n    elif x == 1 and y > 1 and (y < 8):\n        x1 = x + 2\n        y1 = y - 1\n        x2 = x + 3\n        y2 = y + 1\n    elif x == 8 and (y > 1 and y < 8):\n        x1 = x - 2\n        y1 = y - 1\n        x2 = x - 3\n        y2 = y + 1\n    elif y == 1 and (x > 1 and x < 8):\n        x1 = x - 1\n        y1 = y + 2\n        x2 = x + 1\n        y2 = y + 3\n    elif y == 8 and (x > 1 and x < 8):\n        x1 = x - 1\n        y1 = y - 2\n        x2 = x + 1\n        y2 = y - 3\n    elif x == 1 and y == 1:\n        x1 = 3\n        y1 = 2\n    elif x == 1 and y == 8:\n        x1 = 3\n        y1 = 7\n    elif x == 8 and y == 1:\n        x1 = 6\n        y1 = 2\n    elif x == 8 and y == 8:\n        x1 = 6\n        y1 = 7\n    elif x == 2 and y == 2:\n        x1 = 1\n        y1 = 4\n        x2 = 5\n        y2 = 1\n    elif x == 2 and y == 7:\n        x1 = 1\n        y1 = 5\n        x2 = 5\n        y2 = 8\n    elif x == 7 and y == 2:\n        x1 = 5\n        y1 = 1\n        x2 = 8\n        y2 = 5\n    elif x == 7 and y == 7:\n        x1 = 4\n        y1 = 8\n        x2 = 8\n        y2 = 5\n    for i in range(1, 9):\n        print()\n        for j in range(1, 9):\n            if i == x1:\n                if j == y1:\n                    print(2, end=' ')\n                else:\n                    print(0, end=' ')\n            elif i == x2:\n                if j == y2:\n                    print(2, end=' ')\n                else:\n                    print(0, end=' ')\n            elif i == x:\n                if j == y:\n                    print(1, end=' ')\n                else:\n                    print(0, end=' ')\n            else:\n                print(0, end=' ')\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    innercircle(a, b)", "def innercircle(x, y):\n    if (x == 2 or x == 7) and (y > 2 and y < 7):\n        x1 = x - 1\n        y1 = y - 2\n        x2 = x + 1\n        y2 = y + 2\n    elif x > 2 and x < 7 and (y >= 2) and (y <= 7):\n        x1 = x - 2\n        y1 = y - 1\n        x2 = x + 2\n        y2 = y + 1\n    elif x == 1 and y > 1 and (y < 8):\n        x1 = x + 2\n        y1 = y - 1\n        x2 = x + 3\n        y2 = y + 1\n    elif x == 8 and (y > 1 and y < 8):\n        x1 = x - 2\n        y1 = y - 1\n        x2 = x - 3\n        y2 = y + 1\n    elif y == 1 and (x > 1 and x < 8):\n        x1 = x - 1\n        y1 = y + 2\n        x2 = x + 1\n        y2 = y + 3\n    elif y == 8 and (x > 1 and x < 8):\n        x1 = x - 1\n        y1 = y - 2\n        x2 = x + 1\n        y2 = y - 3\n    elif x == 1 and y == 1:\n        x1 = x + 2\n        y1 = y + 1\n        x2 = -1\n        y2 = -1\n    elif x == 1 and y == 8:\n        x1 = x + 2\n        y1 = y - 1\n        x2 = -1\n        y2 = -1\n    elif x == 8 and y == 1:\n        x1 = x - 2\n        y1 = y + 1\n        x2 = -1\n        y2 = -1\n    elif x == 8 and y == 8:\n        x1 = x - 2\n        y1 = y - 1\n        x2 = -1\n        y2 = -1\n    elif x == 2 and y == 2:\n        x1 = 1\n        y1 = 4\n        x2 = 5\n        y2 = 1\n    elif x == 2 and y == 7:\n        x1 = 1\n        y1 = 5\n        x2 = 5\n        y2 = 8\n    elif x == 7 and y == 2:\n        x1 = 5\n        y1 = 1\n        x2 = 8\n        y2 = 5\n    elif x == 7 and y == 7:\n        x1 = 4\n        y1 = 8\n        x2 = 8\n        y2 = 5\n    for i in range(1, 9):\n        print()\n        for j in range(1, 9):\n            if i == x1:\n                if j == y1:\n                    print(2, end=' ')\n                else:\n                    print(0, end=' ')\n            elif i == x2:\n                if j == y2:\n                    print(2, end=' ')\n                else:\n                    print(0, end=' ')\n            elif i == x:\n                if j == y:\n                    print(1, end=' ')\n                else:\n                    print(0, end=' ')\n            else:\n                print(0, end=' ')\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    innercircle(a, b)", "T = int(input())\nboard = [[0 for i in range(8)] for j in range(8)]\nfor _ in range(T):\n    ans = 0\n    (x, y) = map(int, input().split())\n    board = [[0 for i in range(8)] for j in range(8)]\n    x -= 1\n    y -= 1\n    board[x][y] = 1\n    queenx = 0\n    queeny = 0\n    if x == 0 and y == 0 or (x == 0 and y == 7) or (x == 7 and y == 0) or (x == 7 and y == 7):\n        ans = 1\n        if x == 0 and y == 0:\n            board[1][2] = 2\n        if x == 0 and y == 7:\n            board[1][5] = 2\n        if x == 7 and y == 0:\n            board[6][2] = 2\n        if x == 7 and y == 7:\n            board[6][5] = 2\n    elif x == 0 or x == 7 or y == 0 or (y == 7):\n        ans = 2\n        if x == 0:\n            board[2][y - 1] = 2\n            board[2][y + 1] = 2\n        if x == 7:\n            board[5][y - 1] = 2\n            board[5][y + 1] = 2\n        if y == 0:\n            board[x + 1][2] = 2\n            board[x - 1][2] = 2\n        if y == 7:\n            board[x + 1][5] = 2\n            board[x - 1][5] = 2\n    else:\n        ans = 2\n        if x - 3 >= 0:\n            if y - 2 >= 0:\n                board[x + 1][y - 2] = 2\n                board[x - 3][y + 1] = 2\n            else:\n                board[x + 1][y + 2] = 2\n                board[x - 3][y - 1] = 2\n        elif y - 2 >= 0:\n            board[x - 1][y - 2] = 2\n            board[x + 3][y + 1] = 2\n        else:\n            board[x - 1][y + 2] = 2\n            board[x + 3][y - 1] = 2\n    for i in range(8):\n        for j in range(8):\n            print(board[i][j], end=' ')\n        print('')", "T = int(input())\nboard = [[0 for i in range(8)] for j in range(8)]\nfor _ in range(T):\n    ans = 0\n    (x, y) = map(int, input().split())\n    board = [[0 for i in range(8)] for j in range(8)]\n    x -= 1\n    y -= 1\n    board[x][y] = 1\n    queenx = 0\n    queeny = 0\n    if x == 0 and y == 0 or (x == 0 and y == 7) or (x == 7 and y == 0) or (x == 7 and y == 7):\n        ans = 1\n        if x == 0 and y == 0:\n            board[1][2] = 2\n        if x == 0 and y == 7:\n            board[1][5] = 2\n        if x == 7 and y == 0:\n            board[6][2] = 2\n        if x == 7 and y == 7:\n            board[6][5] = 2\n    elif x == 0 or x == 7 or y == 0 or (y == 7):\n        ans = 2\n        if x == 0:\n            board[2][y - 1] = 2\n            board[2][y + 1] = 2\n        if x == 7:\n            board[5][y - 1] = 2\n            board[5][y + 1] = 2\n        if y == 0:\n            board[x + 1][2] = 2\n            board[x - 1][2] = 2\n        if y == 7:\n            board[x + 1][5] = 2\n            board[x - 1][5] = 2\n    else:\n        ans = 2\n        if x - 3 >= 0:\n            if y - 2 >= 0:\n                board[x + 1][y - 2] = 2\n                board[x - 3][y + 1] = 2\n            else:\n                board[x + 1][y + 2] = 2\n                board[x - 3][y - 1] = 2\n        elif y - 2 >= 0:\n            board[x - 1][y - 2] = 2\n            board[x + 3][y + 1] = 2\n        else:\n            board[x - 1][y + 2] = 2\n            board[x + 3][y - 1] = 2\n    for i in range(8):\n        for j in range(8):\n            print(board[i][j], end=' ')\n        print('')", "def rotate_point(r, c):\n    return (c, 8 - r - 1)\n\ndef rotate_grid(grid):\n    r_grid = [[grid[r][c] for c in range(8)] for r in range(8)]\n    for r in range(8):\n        for c in range(8):\n            (r2, c2) = rotate_point(r, c)\n            r_grid[r2][c2] = grid[r][c]\n    return r_grid\n\ndef get_queens(r, c):\n    if r == 0 and c == 0:\n        return [(1, 2)]\n    elif r == 0:\n        return [(2, c - 1), (2, c + 1)]\n    elif c == 0:\n        return [(r - 1, 2), (r + 1, 2)]\n    else:\n        return [(r + 3, c - 1), (r - 1, c + 2)]\n\ndef get_square(r, c):\n    if r < 4 and c < 4:\n        return 0\n    elif r < 4:\n        return 1\n    elif c >= 4:\n        return 2\n    return 3\n\ndef g(r, c):\n    grid = [[0 for i in range(8)] for j in range(8)]\n    square = get_square(r, c)\n    num_rotations = (4 - square) % 4\n    (r2, c2) = (r, c)\n    for i in range(num_rotations):\n        (r2, c2) = rotate_point(r2, c2)\n    grid[r2][c2] = 1\n    queens = get_queens(r2, c2)\n    for (qr, qc) in queens:\n        grid[qr][qc] = 2\n    for i in range(square):\n        grid = rotate_grid(grid)\n    return grid\n\ndef print_grid(grid):\n    for r in range(len(grid)):\n        row = ' '.join(map(str, grid[r]))\n        print(row)\nt = int(input())\nfor i in range(t):\n    (a, b) = [int(el) for el in input().split(' ')]\n    r = a - 1\n    c = b - 1\n    print_grid(g(r, c))", "def rotate_point(r, c):\n    return (c, 8 - r - 1)\n\ndef rotate_grid(grid):\n    r_grid = [[grid[r][c] for c in range(8)] for r in range(8)]\n    for r in range(8):\n        for c in range(8):\n            (r2, c2) = rotate_point(r, c)\n            r_grid[r2][c2] = grid[r][c]\n    return r_grid\n\ndef get_queens(r, c):\n    if r == 0 and c == 0:\n        return [(1, 2)]\n    elif r == 0:\n        return [(2, c - 1), (2, c + 1)]\n    elif c == 0:\n        return [(r - 1, 2), (r + 1, 2)]\n    else:\n        return [(r + 3, c - 1), (r - 1, c + 2)]\n\ndef get_square(r, c):\n    if r < 4 and c < 4:\n        return 0\n    elif r < 4:\n        return 1\n    elif c >= 4:\n        return 2\n    return 3\n\ndef g(r, c):\n    grid = [[0 for i in range(8)] for j in range(8)]\n    square = get_square(r, c)\n    num_rotations = (4 - square) % 4\n    (r2, c2) = (r, c)\n    for i in range(num_rotations):\n        (r2, c2) = rotate_point(r2, c2)\n    grid[r2][c2] = 1\n    queens = get_queens(r2, c2)\n    for (qr, qc) in queens:\n        grid[qr][qc] = 2\n    for i in range(square):\n        grid = rotate_grid(grid)\n    return grid\n\ndef print_grid(grid):\n    for r in range(len(grid)):\n        row = ' '.join(map(str, grid[r]))\n        print(row)\nt = int(input())\nfor i in range(t):\n    (a, b) = [int(el) for el in input().split(' ')]\n    r = a - 1\n    c = b - 1\n    print_grid(g(r, c))", "def main():\n    T = int(input())\n    board = [[0 for i in range(8)] for j in range(8)]\n    for _ in range(T):\n        ans = 0\n        (x, y) = map(int, input().split())\n        board = [[0 for i in range(8)] for j in range(8)]\n        x -= 1\n        y -= 1\n        board[x][y] = 1\n        queenx = 0\n        queeny = 0\n        if x == 0 and y == 0 or (x == 0 and y == 7) or (x == 7 and y == 0) or (x == 7 and y == 7):\n            ans = 1\n            if x == 0 and y == 0:\n                board[1][2] = 2\n            if x == 0 and y == 7:\n                board[1][5] = 2\n            if x == 7 and y == 0:\n                board[6][2] = 2\n            if x == 7 and y == 7:\n                board[6][5] = 2\n        elif x == 0 or x == 7 or y == 0 or (y == 7):\n            ans = 2\n            if x == 0:\n                board[2][y - 1] = 2\n                board[2][y + 1] = 2\n            if x == 7:\n                board[5][y - 1] = 2\n                board[5][y + 1] = 2\n            if y == 0:\n                board[x + 1][2] = 2\n                board[x - 1][2] = 2\n            if y == 7:\n                board[x + 1][5] = 2\n                board[x - 1][5] = 2\n        else:\n            ans = 2\n            if x - 3 >= 0:\n                if y - 2 >= 0:\n                    board[x + 1][y - 2] = 2\n                    board[x - 3][y + 1] = 2\n                else:\n                    board[x + 1][y + 2] = 2\n                    board[x - 3][y - 1] = 2\n            elif y - 2 >= 0:\n                board[x - 1][y - 2] = 2\n                board[x + 3][y + 1] = 2\n            else:\n                board[x - 1][y + 2] = 2\n                board[x + 3][y - 1] = 2\n        for i in range(8):\n            for j in range(8):\n                print(board[i][j], end=' ')\n            print('')\nmain()", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef valid(x, y):\n    if x <= 0 or x > 8 or y <= 0 or (y > 8):\n        return 0\n    return 1\nt = inp()\nwhile t:\n    t -= 1\n    (x, y) = ma()\n    res = [[0 for i in range(8)] for j in range(8)]\n    res[x - 1][y - 1] = 1\n    if x == 1 and y == 1:\n        res[2][1] = 2\n    elif x == 1 and y == 8:\n        res[2][6] = 2\n    elif x == 8 and y == 1:\n        res[5][1] = 2\n    elif x == 8 and y == 8:\n        res[5][6] = 2\n    elif x in [1, 8] or y in [1, 8]:\n        if x == 1:\n            res[x + 1][y - 2] = 2\n            res[x + 1][y] = 2\n        if x == 8:\n            res[x - 3][y - 2] = 2\n            res[x - 3][y] = 2\n        if y == 1:\n            res[x - 2][y + 1] = 2\n            res[x][y + 1] = 2\n        if y == 8:\n            res[x - 2][y - 3] = 2\n            res[x][y - 3] = 2\n    else:\n        flag = 0\n        for i1 in [-1, 1]:\n            for i2 in [-2, 2]:\n                for i3 in [-3, 3]:\n                    for i4 in [-1, 1]:\n                        (x1, x2) = (x + i1, x + i3)\n                        (y1, y2) = (y + i2, y + i4)\n                        if valid(x1, y1) and valid(x2, y2) and (flag == 0) and (i1 > 0 and i3 < 0 or (i1 < 0 and i3 > 0)) and (i2 > 0 and i4 < 0 or (i2 < 0 and i4 > 0)):\n                            res[x1 - 1][y1 - 1] = 2\n                            res[x2 - 1][y2 - 1] = 2\n                            flag = 1\n    for i in res:\n        print(*i)", "T = int(input())\nfor t in range(T):\n    (x, y) = map(int, input().split())\n    ans = [[0 for i in range(8)] for j in range(8)]\n    extremes = [[1, 1], [8, 8], [8, 1], [1, 8]]\n    threes = [[2, 2], [7, 2], [2, 7], [7, 7]]\n    ans[x - 1][y - 1] = 1\n    if [x, y] in extremes:\n        (a, b) = (0, 0)\n        if x < 4:\n            a = 2\n        else:\n            a = 5\n        if y < 4:\n            b = 1\n        else:\n            b = 6\n        ans[a][b] = 2\n    elif [x, y] in threes:\n        a = b = 0\n        if y < 4:\n            b = 3\n        else:\n            b = 4\n        if x < 4:\n            a = 0\n        else:\n            a = 7\n        ans[a][b] = 2\n        if y < 4:\n            b = 0\n        else:\n            b = 7\n        if x < 4:\n            a = 4\n        else:\n            a = 3\n        ans[a][b] = 2\n    elif x == 1 or x == 8 or y == 1 or (y == 8):\n        if x == 1:\n            ans[2][y - 2] = 2\n            ans[2][y] = 2\n        elif x == 8:\n            ans[5][y - 2] = 2\n            ans[5][y] = 2\n        elif y == 1:\n            ans[x - 2][2] = 2\n            ans[x][2] = 2\n        else:\n            ans[x - 2][5] = 2\n            ans[x][5] = 2\n    elif y == 2 or y == 7:\n        ans[x - 3][y - 2] = 2\n        ans[x + 1][y] = 2\n    else:\n        ans[x - 2][y - 3] = 2\n        ans[x][y + 1] = 2\n    for i in range(8):\n        print(*ans[i])", "T = int(input())\nfor t in range(T):\n    (x, y) = map(int, input().split())\n    ans = [[0 for i in range(8)] for j in range(8)]\n    extremes = [[1, 1], [8, 8], [8, 1], [1, 8]]\n    threes = [[2, 2], [7, 2], [2, 7], [7, 7]]\n    ans[x - 1][y - 1] = 1\n    if [x, y] in extremes:\n        (a, b) = (0, 0)\n        if x < 4:\n            a = 2\n        else:\n            a = 5\n        if y < 4:\n            b = 1\n        else:\n            b = 6\n        ans[a][b] = 2\n    elif [x, y] in threes:\n        a = b = 0\n        if y < 4:\n            b = 3\n        else:\n            b = 4\n        if x < 4:\n            a = 0\n        else:\n            a = 7\n        ans[a][b] = 2\n        if y < 4:\n            b = 0\n        else:\n            b = 7\n        if x < 4:\n            a = 4\n        else:\n            a = 3\n        ans[a][b] = 2\n    elif x == 1 or x == 8 or y == 1 or (y == 8):\n        if x == 1:\n            ans[2][y - 2] = 2\n            ans[2][y] = 2\n        elif x == 8:\n            ans[5][y - 2] = 2\n            ans[5][y] = 2\n        elif y == 1:\n            ans[x - 2][2] = 2\n            ans[x][2] = 2\n        else:\n            ans[x - 2][5] = 2\n            ans[x][5] = 2\n    elif y == 2 or y == 7:\n        ans[x - 3][y - 2] = 2\n        ans[x + 1][y] = 2\n    else:\n        ans[x - 2][y - 3] = 2\n        ans[x][y + 1] = 2\n    for i in range(8):\n        print(*ans[i])", "t = int(input())\nfor _ in range(t):\n    (A, B) = map(int, input().split())\n    board = []\n    for i in range(8):\n        board.append([0] * 8)\n    board[A - 1][B - 1] = 1\n    if A == 1 and B == 1:\n        board[1][2] = 2\n    elif A == 1 and B == 8:\n        board[1][5] = 2\n    elif A == 8 and B == 1:\n        board[6][2] = 2\n    elif A == 8 and B == 8:\n        board[6][5] = 2\n    elif A == 8 and 2 <= B <= 7:\n        board[A - 3][B - 2] = 2\n        board[A - 3][B] = 2\n    elif A == 1 and 2 <= B <= 7:\n        board[A + 1][B - 2] = 2\n        board[A + 1][B] = 2\n    elif 2 <= A <= 7 and B == 1:\n        board[A - 2][B + 1] = 2\n        board[A][B + 1] = 2\n    elif 2 <= A <= 7 and B == 8:\n        board[A - 2][B - 3] = 2\n        board[A][B - 3] = 2\n    elif 2 <= A <= 4 and 2 <= B <= 4:\n        board[A + 1][B - 2] = 2\n        board[A - 2][B + 2] = 2\n    elif 2 <= A <= 4 and 5 <= B <= 7:\n        board[A + 1][B] = 2\n        board[A - 2][B - 4] = 2\n    elif 5 <= A <= 7 and 2 <= B <= 4:\n        board[A - 3][B - 2] = 2\n        board[A][B + 2] = 2\n    elif 5 <= A <= 7 and 5 <= B <= 7:\n        board[A][B - 4] = 2\n        board[A - 3][B] = 2\n    for row in board:\n        for sqr in row:\n            print(sqr, end=' ')\n        print()", "from math import ceil, floor\n\ndef valid(x, y):\n    if x <= 0 or x > 8 or y <= 0 or (y > 8):\n        return 0\n    return 1\n\ndef ma():\n    return map(int, input().split())\n\ndef solve2():\n    (x, y) = ma()\n    res = [[0 for i in range(8)] for j in range(8)]\n    res[x - 1][y - 1] = 1\n    if x == 1 and y == 1:\n        res[2][1] = 2\n    elif x == 1 and y == 8:\n        res[2][6] = 2\n    elif x == 8 and y == 1:\n        res[5][1] = 2\n    elif x == 8 and y == 8:\n        res[5][6] = 2\n    elif x in [1, 8] or y in [1, 8]:\n        if x == 1:\n            res[x + 1][y - 2] = 2\n            res[x + 1][y] = 2\n        if x == 8:\n            res[x - 3][y - 2] = 2\n            res[x - 3][y] = 2\n        if y == 1:\n            res[x - 2][y + 1] = 2\n            res[x][y + 1] = 2\n        if y == 8:\n            res[x - 2][y - 3] = 2\n            res[x][y - 3] = 2\n    else:\n        f = 0\n        for i in [-1, 1]:\n            for j in [-2, 2]:\n                for k in [-3, 3]:\n                    for l in [-1, 1]:\n                        (x1, x2, y1, y2) = (x + i, x + k, y + j, y + l)\n                        if valid(x1, y1) and valid(x2, y2) and (f == 0) and (i > 0 and k < 0 or (i < 0 and k > 0)) and (j > 0 and l < 0 or (j < 0 and l > 0)):\n                            res[x1 - 1][y1 - 1] = 2\n                            res[x2 - 1][y2 - 1] = 2\n                            f = 1\n    for i in res:\n        print(*i)\n\ndef solve1():\n    for _ in range(int(input())):\n        solve2()\nsolve1()", "t = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split(' '))\n    a = a - 1\n    b = b - 1\n    L = [['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0'], ['0', '0', '0', '0', '0', '0', '0', '0']]\n    L[a][b] = '1'\n    if a == 0 and b == 0:\n        L[a + 2][b + 1] = '2'\n    elif a == 7 and b == 0:\n        L[a - 2][b + 1] = '2'\n    elif a == 0 and b == 7:\n        L[a + 2][b - 1] = '2'\n    elif a == 7 and b == 7:\n        L[a - 2][b - 1] = '2'\n    elif a < 7 and b == 0:\n        L[a + 1][b + 2] = '2'\n        L[a - 1][b + 2] = '2'\n    elif a == 0 and b < 7:\n        L[a + 2][b + 1] = '2'\n        L[a + 2][b - 1] = '2'\n    elif a < 7 and b == 7:\n        L[a + 1][b - 2] = '2'\n        L[a - 1][b - 2] = '2'\n    elif a == 7 and b < 7:\n        L[a - 2][b + 1] = '2'\n        L[a - 2][b - 1] = '2'\n    elif a <= 3 and b <= 3:\n        L[a + 3][b - 1] = '2'\n        L[a - 1][b + 2] = '2'\n    elif a > 3 and b <= 3:\n        L[a - 3][b - 1] = '2'\n        L[a + 1][b + 2] = '2'\n    elif a <= 3 and b > 3:\n        L[a + 3][b + 1] = '2'\n        L[a - 1][b - 2] = '2'\n    elif a > 3 and b > 3:\n        L[a - 3][b + 1] = '2'\n        L[a + 1][b - 2] = '2'\n    for j in range(0, 8):\n        print(' '.join(L[j]))", "for Queen in range(int(input())):\n    (x, y) = map(int, input().split())\n    (x, y) = (x - 1, y - 1)\n    l = []\n    for i in range(8):\n        l.append([0] * 8)\n    l[x][y] = 1\n    if x == 0 and y == 0:\n        l[2][1] = 2\n    elif x == 7 and y == 0:\n        l[6][2] = 2\n    elif x == 0 and y == 7:\n        l[2][6] = 2\n    elif x == 7 and y == 7:\n        l[6][5] = 2\n    elif x == 0:\n        l[2][y + 1] = 2\n        l[2][y - 1] = 2\n    elif y == 0:\n        l[x + 1][2] = 2\n        l[x - 1][2] = 2\n    elif x == 7:\n        l[5][y + 1] = 2\n        l[5][y - 1] = 2\n    elif y == 7:\n        l[x + 1][5] = 2\n        l[x - 1][5] = 2\n    elif x > 2 and y > 2:\n        l[x + 1][y - 2] = 2\n        l[x - 3][y + 1] = 2\n    elif x < 3 and y < 3:\n        l[x - 1][y + 2] = 2\n        l[x + 3][y - 1] = 2\n    elif y > 2 and x < 3:\n        l[x - 1][y - 2] = 2\n        l[x + 3][y + 1] = 2\n    elif y < 3 and x > 2:\n        l[x + 1][y + 2] = 2\n        l[x - 3][y - 1] = 2\n    for i in l:\n        print(*i)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef valid(x, y):\n    if x <= 0 or x > 8 or y <= 0 or (y > 8):\n        return 0\n    return 1\nt = inp()\nwhile t:\n    t -= 1\n    (x, y) = ma()\n    res = [[0 for i in range(8)] for j in range(8)]\n    res[x - 1][y - 1] = 1\n    if x == 1 and y == 1:\n        res[2][1] = 2\n    elif x == 1 and y == 8:\n        res[2][6] = 2\n    elif x == 8 and y == 1:\n        res[5][1] = 2\n    elif x == 8 and y == 8:\n        res[5][6] = 2\n    elif x in [1, 8] or y in [1, 8]:\n        if x == 1:\n            res[x + 1][y - 2] = 2\n            res[x + 1][y] = 2\n        if x == 8:\n            res[x - 3][y - 2] = 2\n            res[x - 3][y] = 2\n        if y == 1:\n            res[x - 2][y + 1] = 2\n            res[x][y + 1] = 2\n        if y == 8:\n            res[x - 2][y - 3] = 2\n            res[x][y - 3] = 2\n    else:\n        flag = 0\n        for i1 in [-1, 1]:\n            for i2 in [-2, 2]:\n                for i3 in [-3, 3]:\n                    for i4 in [-1, 1]:\n                        (x1, x2) = (x + i1, x + i3)\n                        (y1, y2) = (y + i2, y + i4)\n                        if valid(x1, y1) and valid(x2, y2) and (flag == 0) and (i1 > 0 and i3 < 0 or (i1 < 0 and i3 > 0)) and (i2 > 0 and i4 < 0 or (i2 < 0 and i4 > 0)):\n                            res[x1 - 1][y1 - 1] = 2\n                            res[x2 - 1][y2 - 1] = 2\n                            flag = 1\n    for i in res:\n        print(*i)", "for t in range(int(input())):\n    (a, b) = map(int, input().split())\n    arr = [[0] * 8 for i in range(8)]\n    arr[a - 1][b - 1] = 1\n    if a in (1, 8) and b in (1, 8):\n        a = a - 1 if a == 8 else a + 1\n        b = b - 2 if b == 8 else b + 2\n        arr[a - 1][b - 1] = 2\n    elif a == 1:\n        arr[a + 1][b - 2] = 2\n        arr[a + 1][b] = 2\n    elif a == 8:\n        arr[a - 3][b - 2] = 2\n        arr[a - 3][b] = 2\n    elif b == 1:\n        arr[a][b + 1] = 2\n        arr[a - 2][b + 1] = 2\n    elif b == 8:\n        arr[a - 2][b - 3] = 2\n        arr[a][b - 3] = 2\n    elif a == 2 and b == 2:\n        arr[a - 2][b + 2] = 2\n        arr[a + 1][b - 2] = 2\n    elif a == 2 and b == 7:\n        arr[a - 2][b - 3] = 2\n        arr[a + 2][b] = 2\n    elif a == 7 and b == 2:\n        arr[a][b + 2] = 2\n        arr[a - 3][b - 2] = 2\n    elif a == 7 and b == 7:\n        arr[a][b - 4] = 2\n        arr[a - 3][b] = 2\n    elif a == 2:\n        arr[a - 2][b - 3] = 2\n        arr[a][b + 1] = 2\n    elif a == 7:\n        arr[a - 2][b - 3] = 2\n        arr[a][b + 1] = 2\n    elif b == 2:\n        arr[a - 3][b - 2] = 2\n        arr[a + 1][b] = 2\n    elif b == 7:\n        arr[a - 3][b] = 2\n        arr[a + 1][b - 2] = 2\n    else:\n        arr[a - 2][b - 3] = 2\n        arr[a][b + 1] = 2\n    for r in arr:\n        print(*r)", "t = int(input())\nfor j in range(t):\n    (a, b) = map(int, input().split())\n    l = []\n    for k in range(8):\n        ans = []\n        for p in range(8):\n            ans.append(0)\n        l.append(ans)\n    a = a - 1\n    b = b - 1\n    l[a][b] = 1\n    if a == 0 and b == 0:\n        l[2][1] = 2\n    elif a == 7 and b == 7:\n        l[5][6] = 2\n    elif a == 7 and b == 0:\n        l[5][1] = 2\n    elif a == 0 and b == 7:\n        l[2][6] = 2\n    elif a == 0:\n        l[2][b - 1] = 2\n        l[2][b + 1] = 2\n    elif a == 7:\n        l[5][b - 1] = 2\n        l[5][b + 1] = 2\n    elif b == 0:\n        l[a + 1][2] = 2\n        l[a - 1][2] = 2\n    elif b == 7:\n        l[a - 1][5] = 2\n        l[a + 1][5] = 2\n    elif a > 3 and b > 3:\n        l[a + 1][b - 2] = 2\n        l[a - 3][b + 1] = 2\n    elif b < 4 and a < 4:\n        l[a - 1][b + 2] = 2\n        l[a + 3][b - 1] = 2\n    elif b > 3 and a < 4:\n        l[a - 1][b - 2] = 2\n        l[a + 3][b + 1] = 2\n    elif b < 4 and a > 3:\n        l[a + 1][b + 2] = 2\n        l[a - 3][b - 1] = 2\n    for p in range(8):\n        for k in range(8):\n            print(l[p][k], end=' ')\n        print()", "def chess(x, y):\n    mat = [[0 for i in range(9)] for j in range(9)]\n    mat[x][y] = 1\n    if x == 1 and y == 1:\n        mat[x + 2][y + 1] = 2\n    elif x == 1 and y == 8:\n        mat[x + 2][y - 1] = 2\n    elif x == 8 and y == 8:\n        mat[x - 2][y - 1] = 2\n    elif x == 8 and y == 1:\n        mat[x - 2][y + 1] = 2\n    elif x in [1, 8] or y in [1, 8]:\n        if x == 1:\n            mat[x + 2][y - 1] = 2\n            mat[x + 2][y + 1] = 2\n        elif x == 8:\n            mat[x - 2][y - 1] = 2\n            mat[x - 2][y + 1] = 2\n        elif y == 1:\n            mat[x + 1][y + 2] = 2\n            mat[x - 1][y + 2] = 2\n        else:\n            mat[x + 1][y - 2] = 2\n            mat[x - 1][y - 2] = 2\n    elif x in [2, 7] and y in [2, 7]:\n        if x == 2 and y == 2:\n            mat[x - 1][y + 2] = 2\n            mat[x + 3][y - 1] = 2\n        elif x == 2 and y == 7:\n            mat[x - 1][y - 2] = 2\n            mat[x + 3][y + 1] = 2\n        elif x == 7 and y == 2:\n            mat[x + 1][y + 2] = 2\n            mat[x - 3][y - 1] = 2\n        elif x == 7 and y == 7:\n            mat[x - 2][y + 1] = 2\n            mat[x + 1][y - 3] = 2\n    elif x - 1 > 0 and y - 2 > 0 and (x + 1 < 9) and (y + 2 < 9):\n        mat[x - 1][y - 2] = 2\n        mat[x + 1][y + 2] = 2\n    else:\n        mat[x - 2][y - 1] = 2\n        mat[x + 2][y + 1] = 2\n    for i in range(1, 9):\n        for j in range(1, 9):\n            print(mat[i][j], end=' ')\n        print('', end='\\n')\nt = int(input())\nfor i in range(t):\n    (x, y) = map(int, input().split())\n    chess(x, y)", "def valid(x, y):\n    return 0 if x <= 0 or x > 8 or y <= 0 or (y > 8) else 1\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    res = [[0 for i in range(8)] for j in range(8)]\n    res[x - 1][y - 1] = 1\n    if x == 1 and y == 1:\n        res[2][1] = 2\n    elif x == 1 and y == 8:\n        res[2][6] = 2\n    elif x == 8 and y == 1:\n        res[5][1] = 2\n    elif x == 8 and y == 8:\n        res[5][6] = 2\n    elif x in [1, 8] or y in [1, 8]:\n        if x == 1:\n            res[x + 1][y - 2] = 2\n            res[x + 1][y] = 2\n        if x == 8:\n            res[x - 3][y - 2] = 2\n            res[x - 3][y] = 2\n        if y == 1:\n            res[x - 2][y + 1] = 2\n            res[x][y + 1] = 2\n        if y == 8:\n            res[x - 2][y - 3] = 2\n            res[x][y - 3] = 2\n    else:\n        flag = 0\n        for i1 in [-1, 1]:\n            for i2 in [-2, 2]:\n                for i3 in [-3, 3]:\n                    for i4 in [-1, 1]:\n                        (x1, x2) = (x + i1, x + i3)\n                        (y1, y2) = (y + i2, y + i4)\n                        if valid(x1, y1) and valid(x2, y2) and (flag == 0) and (i1 > 0 and i3 < 0 or (i1 < 0 and i3 > 0)) and (i2 > 0 and i4 < 0 or (i2 < 0 and i4 > 0)):\n                            res[x1 - 1][y1 - 1] = 2\n                            res[x2 - 1][y2 - 1] = 2\n                            flag = 1\n    for i in res:\n        print(*i)", "def main():\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split(' '))\n        lst = [[0] * 8 for _ in range(8)]\n        lst[x - 1][y - 1] = 1\n        x -= 1\n        y -= 1\n        if x == 0 and y == 0:\n            lst[2][1] = 2\n        elif x == 7 and y == 0:\n            lst[5][1] = 2\n        elif x == 7 and y == 7:\n            lst[5][6] = 2\n        elif x == 0 and y == 7:\n            lst[2][6] = 2\n        elif y == 0:\n            lst[x - 1][2] = 2\n            lst[x + 1][2] = 2\n        elif x == 7:\n            lst[5][y - 1] = 2\n            lst[5][y + 1] = 2\n        elif y == 7:\n            lst[x - 1][5] = 2\n            lst[x + 1][5] = 2\n        elif x == 0:\n            lst[2][y - 1] = 2\n            lst[2][y + 1] = 2\n        elif y == 1 and x < 4:\n            lst[x - 1][3] = 2\n            lst[x + 3][0] = 2\n        elif y == 1 and x >= 4:\n            lst[x + 1][3] = 2\n            lst[x - 3][0] = 2\n        elif x == 6 and y < 4:\n            lst[x - 2][y - 1] = 2\n            lst[x + 1][y + 3] = 2\n        elif x == 6 and y >= 4:\n            lst[x - 2][y + 1] = 2\n            lst[x + 1][y - 3] = 2\n        elif y == 6 and x < 4:\n            lst[x + 2][y + 1] = 2\n            lst[x - 1][y - 3] = 2\n        elif y == 6 and x >= 4:\n            lst[x - 2][y + 1] = 2\n            lst[x + 1][y - 3] = 2\n        elif x == 1 and y < 4:\n            lst[x + 3][y - 1] = 2\n            lst[x - 1][y + 2] = 2\n        elif x == 1 and y >= 4:\n            lst[x - 1][y - 3] = 2\n            lst[x + 2][y + 1] = 2\n        elif x <= 3:\n            lst[x - 1][y + 2] = 2\n            lst[x + 3][y - 1] = 2\n        elif x > 3:\n            lst[x + 1][y + 2] = 2\n            lst[x - 3][y - 1] = 2\n        for i in range(8):\n            for j in range(8):\n                print(lst[i][j], end=' ')\n            print()\nmain()", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    temp = [[i for i in range(8)] for j in range(8)]\n    for i in range(8):\n        for j in range(8):\n            temp[i][j] = 0\n    temp[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        temp[1][2] = 2\n    elif a == 8 and b == 1:\n        temp[6][2] = 2\n    elif a == 1 and b == 8:\n        temp[1][5] = 2\n    elif a == 8 and b == 8:\n        temp[6][5] = 2\n    elif a == 1:\n        temp[2][b - 2] = 2\n        temp[2][b] = 2\n    elif a == 8:\n        temp[5][b - 2] = 2\n        temp[5][b] = 2\n    elif b == 1:\n        temp[a - 2][b + 1] = 2\n        temp[a][b + 1] = 2\n    elif b == 8:\n        temp[a - 2][b - 3] = 2\n        temp[a][b - 3] = 2\n    elif a == 2 and b == 2:\n        temp[0][4] = 2\n        temp[3][0] = 2\n    elif a == 7 and b == 2:\n        temp[7][4] = 2\n        temp[4][0] = 2\n    elif a == 2 and b == 7:\n        temp[0][4] = 2\n        temp[4][7] = 2\n    elif a == 7 and b == 7:\n        temp[4][7] = 2\n        temp[7][3] = 2\n    elif a == 2:\n        temp[a][b + 1] = 2\n        temp[a - 2][b - 3] = 2\n    elif a == 7:\n        temp[a][b + 1] = 2\n        temp[a - 2][b - 3] = 2\n    elif b == 2:\n        temp[a - 3][b - 2] = 2\n        temp[a + 1][b] = 2\n    elif b == 7:\n        temp[a - 3][b] = 2\n        temp[a + 1][b - 2] = 2\n    else:\n        temp[a - 2][b - 3] = 2\n        temp[a][b + 1] = 2\n    for i in range(8):\n        for j in range(8):\n            print(temp[i][j], end=' ')\n        print()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = None\n    d = None\n    if a == 1 or a == 8:\n        c = (2 if a == 1 else 7, b + 2 if b + 2 < 9 else b - 2)\n        d = (3 if a == 1 else 6, b - 1 if 2 <= b <= 7 else 0)\n    elif b == 1 or b == 8:\n        c = (a + 2 if a + 2 < 9 else a - 2, 2 if b == 1 else 7)\n        d = (a + 1 if 2 <= a <= 7 else 0, 3 if b == 1 else 6)\n    elif a == 2 or a == 7:\n        c = (1 if a == 2 else 8, b + 2 if b + 2 < 9 else b - 2)\n        d = (a + 3 if a == 2 else a - 3, b - 1 if b < 7 else 8)\n    elif b == 2 or b == 7:\n        c = (a - 2, 1 if b == 2 else 8)\n        d = (a + 1, b + 3 if b == 2 else b - 3)\n    else:\n        c = (a - 1 if a == 3 else a + 1, b + 2)\n        d = (a + 3 if a == 3 else a - 3, b - 1)\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if i == a and j == b:\n                print('1', end=' ')\n            elif (i, j) == c or (i, j) == d:\n                print('2', end=' ')\n            else:\n                print('0', end=' ')\n        print()", "from collections import defaultdict\nimport sys\n\ndef solve():\n    (a, b) = map(int, input().split())\n    (a, b) = (a - 1, b - 1)\n    hs = defaultdict(lambda : defaultdict(int))\n    hs[a][b] = 1\n    ans = []\n    if b == 0:\n        if a == 0:\n            hs[a + 1][b + 2] = 2\n        elif a == 7:\n            hs[a - 1][b + 2] = 2\n        else:\n            hs[a - 1][b + 2] = 2\n            hs[a + 1][b + 2] = 2\n    elif b == 7:\n        if a == 0:\n            hs[a + 1][b - 2] = 2\n        elif a == 7:\n            hs[a - 1][b - 2] = 2\n        else:\n            hs[a - 1][b - 2] = 2\n            hs[a + 1][b - 2] = 2\n    elif a == 0:\n        if b == 0:\n            hs[a + 2][b + 1] = 2\n        elif b == 7:\n            hs[a + 2][b - 1] = 2\n        else:\n            hs[a + 2][b - 1] = 2\n            hs[a + 2][b + 1] = 2\n    elif a == 7:\n        if b == 0:\n            hs[a - 2][b + 1] = 2\n        elif b == 7:\n            hs[a - 2][b - 1] = 2\n        else:\n            hs[a - 2][b - 1] = 2\n            hs[a - 2][b + 1] = 2\n    elif a == 1 and b == 1:\n        hs[a - 1][b + 3] = 2\n        hs[a + 2][b - 1] = 2\n    elif a == 6 and b == 1:\n        hs[a + 1][b + 3] = 2\n        hs[a - 2][b - 1] = 2\n    elif a == 1 and b == 6:\n        hs[a - 1][b - 3] = 2\n        hs[a + 2][b + 1] = 2\n    elif a == 6 and b == 6:\n        hs[a + 1][b - 3] = 2\n        hs[a - 2][b + 1] = 2\n    elif b - 2 >= 0 and b + 2 <= 7:\n        hs[a - 1][b + 2] = 2\n        hs[a + 1][b - 2] = 2\n    else:\n        hs[a - 2][b + 1] = 2\n        hs[a + 2][b - 1] = 2\n    for x in range(0, 8):\n        A = [hs[x][i] for i in range(0, 8)]\n        print(' '.join(map(str, A)))\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    mat = [[0 for _ in range(8)] for _ in range(8)]\n    mat[a - 1][b - 1] = 1\n    set1 = {(0, 0), (0, 7), (7, 0), (7, 7)}\n    set2 = {(1, 1), (6, 1), (6, 6), (1, 6)}\n    if (a - 1, b - 1) in set1:\n        mat[abs(a - 1 - 2)][abs(b - 1 - 1)] = 2\n    elif (a - 1, b - 1) in set2:\n        dict1 = dict()\n        dict1[1] = 3\n        dict1[6] = 4\n        dict3 = dict()\n        dict3[1] = 0\n        dict3[6] = 7\n        r = dict1[a - 1]\n        c = dict3[b - 1]\n        mat[r][c] = 2\n        r = dict3[a - 1]\n        dict4 = dict()\n        dict4[1] = 4\n        dict4[6] = 3\n        c = dict4[b - 1]\n        mat[r][c] = 2\n    elif a - 1 in (0, 7) or b - 1 in (0, 7):\n        dict2 = dict()\n        dict2[0] = 2\n        dict2[7] = 5\n        if a - 1 in (0, 7):\n            r = dict2[a - 1]\n            mat[r][b - 1 - 1] = 2\n            mat[r][b - 1 + 1] = 2\n        else:\n            c = dict2[b - 1]\n            mat[a - 1 - 1][c] = 2\n            mat[a - 1 + 1][c] = 2\n    elif a - 1 in range(2, 6):\n        mat[a - 1 - 2][b - 1 - 1] = 2\n        mat[a - 1 + 2][b - 1 + 1] = 2\n    else:\n        mat[a - 1 + 1][b - 1 - 2] = 2\n        mat[a - 1 - 1][b - 1 + 2] = 2\n    for i in range(8):\n        for j in range(8):\n            print(mat[i][j], end=' ')\n        print()", "t = int(input())\nwhile t:\n    a = [int(item) for item in input('').split(' ')]\n    i = a[0]\n    j = a[1]\n    lst = [[0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]\n    lst[i][j] = 1\n    if i == 1 and j == 1 or (i == 1 and j == 8) or (i == 8 and j == 1) or (i == 8 and j == 8):\n        if i + 2 >= 1 and i + 2 <= 8:\n            if j + 1 >= 1 and j + 1 <= 8:\n                lst[i + 2][j + 1] = 2\n            elif j - 1 >= 1 and j - 1 <= 8:\n                lst[i + 2][j - 1] = 2\n        elif i - 2 >= 1 and i - 2 <= 8:\n            if j + 1 >= 1 and j + 1 <= 8:\n                lst[i - 2][j + 1] = 2\n            elif j - 1 >= 1 and j - 1 <= 8:\n                lst[i - 2][j - 1] = 2\n    elif i == 1:\n        if j + 2 >= 1 and j + 2 <= 8:\n            lst[i + 1][j + 2] = 2\n            lst[i + 2][j - 1] = 2\n        elif j - 2 >= 1 and j - 2 <= 8:\n            lst[i + 1][j - 2] = 2\n            lst[i + 2][j + 1] = 2\n    elif i == 8:\n        if j + 2 >= 1 and j + 2 <= 8:\n            lst[i - 1][j + 2] = 2\n            lst[i - 2][j - 1] = 2\n        elif j - 2 >= 1 and j - 2 <= 8:\n            lst[i - 1][j - 2] = 2\n            lst[i - 2][j + 1] = 2\n    elif j == 1:\n        if i + 2 >= 1 and i + 2 <= 8:\n            lst[i + 2][j + 1] = 2\n            lst[i - 1][j + 2] = 2\n        elif i - 2 >= 1 and i - 2 <= 8:\n            lst[i - 2][j + 1] = 2\n            lst[i + 1][j - 2] = 2\n    elif j == 8:\n        if i + 2 >= 1 and i + 2 <= 8:\n            lst[i + 2][j - 1] = 2\n            lst[i - 1][j - 2] = 2\n        elif i - 2 >= 1 and i - 2 <= 8:\n            lst[i - 2][j - 1] = 2\n            lst[i + 1][j - 2] = 2\n    elif i == 2 and j == 2:\n        lst[1][5] = 2\n        lst[4][1] = 2\n    elif i == 2 and j == 7:\n        lst[1][4] = 2\n        lst[4][8] = 2\n    elif i == 7 and j == 2:\n        lst[5][1] = 2\n        lst[8][5] = 2\n    elif i == 7 and j == 7:\n        lst[5][8] = 2\n        lst[8][4] = 2\n    elif i - 2 >= 1 and i - 2 <= 8 and (j + 1 >= 1) and (j + 1 <= 8) and (i + 2 >= 1) and (i + 2 <= 8) and (j - 1 >= 1) and (j - 1 <= 8):\n        lst[i - 2][j + 1] = 2\n        lst[i + 2][j - 1] = 2\n    elif i - 1 >= 1 and i - 1 <= 8 and (j - 2 >= 1) and (j - 2 <= 8) and (i + 1 >= 1) and (i + 1 <= 8) and (j + 2 >= 1) and (j + 2 <= 8):\n        lst[i - 1][j - 2] = 2\n        lst[i + 1][j + 2] = 2\n    for ele in lst[1:]:\n        k = 1\n        while k < 9:\n            print(ele[k], end=' ')\n            k = k + 1\n        print()\n    t = t - 1", "from collections import Counter\nimport math\n\ndef solve():\n    (x, y) = map(int, input().split(' '))\n    lst = [[0] * 8 for _ in range(8)]\n    lst[x - 1][y - 1] = 1\n    x -= 1\n    y -= 1\n    if x == 0 and y == 0:\n        lst[2][1] = 2\n    elif x == 7 and y == 0:\n        lst[5][1] = 2\n    elif x == 7 and y == 7:\n        lst[5][6] = 2\n    elif x == 0 and y == 7:\n        lst[2][6] = 2\n    elif y == 0:\n        lst[x - 1][2] = 2\n        lst[x + 1][2] = 2\n    elif x == 7:\n        lst[5][y - 1] = 2\n        lst[5][y + 1] = 2\n    elif y == 7:\n        lst[x - 1][5] = 2\n        lst[x + 1][5] = 2\n    elif x == 0:\n        lst[2][y - 1] = 2\n        lst[2][y + 1] = 2\n    elif y == 1 and x < 4:\n        lst[x - 1][3] = 2\n        lst[x + 3][0] = 2\n    elif y == 1 and x >= 4:\n        lst[x + 1][3] = 2\n        lst[x - 3][0] = 2\n    elif x == 6 and y < 4:\n        lst[x - 2][y - 1] = 2\n        lst[x + 1][y + 3] = 2\n    elif x == 6 and y >= 4:\n        lst[x - 2][y + 1] = 2\n        lst[x + 1][y - 3] = 2\n    elif y == 6 and x < 4:\n        lst[x + 2][y + 1] = 2\n        lst[x - 1][y - 3] = 2\n    elif y == 6 and x >= 4:\n        lst[x - 2][y + 1] = 2\n        lst[x + 1][y - 3] = 2\n    elif x == 1 and y < 4:\n        lst[x + 3][y - 1] = 2\n        lst[x - 1][y + 2] = 2\n    elif x == 1 and y >= 4:\n        lst[x - 1][y - 3] = 2\n        lst[x + 2][y + 1] = 2\n    elif x <= 3:\n        lst[x - 1][y + 2] = 2\n        lst[x + 3][y - 1] = 2\n    elif x > 3:\n        lst[x + 1][y + 2] = 2\n        lst[x - 3][y - 1] = 2\n    for i in range(8):\n        for j in range(8):\n            print(lst[i][j], end=' ')\n        print()\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (i, j) = [int(x) for x in input().split()]\n    grid = [[0 for i in range(8)] for j in range(8)]\n    grid[i - 1][j - 1] = 1\n    if i == 1 and j == 1:\n        grid[2 - 1][3 - 1] = 2\n    elif i == 1 and j == 8:\n        grid[2 - 1][6 - 1] = 2\n    elif i == 8 and j == 1:\n        grid[7 - 1][3 - 1] = 2\n    elif i == 8 and j == 8:\n        grid[7 - 1][6 - 1] = 2\n    elif i == 1:\n        grid[i + 2 - 1][j - 1 - 1] = 2\n        grid[i + 2 - 1][j + 1 - 1] = 2\n    elif i == 8:\n        grid[i - 2 - 1][j - 1 - 1] = 2\n        grid[i - 2 - 1][j + 1 - 1] = 2\n    elif j == 1:\n        grid[i - 1 - 1][j + 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif j == 8:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j - 2 - 1] = 2\n    elif i == 2 and j == 2:\n        grid[i - 1 - 1][j + 3 - 1] = 2\n        grid[i + 2 - 1][j - 1 - 1] = 2\n    elif i == 2 and j == 7:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 3 - 1][j + 1 - 1] = 2\n    elif i == 7 and j == 2:\n        grid[i + 1 - 1][j + 3 - 1] = 2\n        grid[i - 2 - 1][j - 1 - 1] = 2\n    elif i == 7 and j == 7:\n        grid[i + 1 - 1][j - 3 - 1] = 2\n        grid[i - 2 - 1][j + 1 - 1] = 2\n    elif i == 2:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif i == 7:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif j == 2:\n        grid[i - 2 - 1][j - 2] = 2\n        grid[i + 2 - 1][j] = 2\n    elif j == 7:\n        grid[i - 2 - 1][j + 1 - 1] = 2\n        grid[i + 2 - 1][j - 1 - 1] = 2\n    else:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    for i in range(8):\n        print(*grid[i])", "import sys, math, bisect, heapq, collections, itertools, functools\ninum = lambda : int(sys.stdin.readline())\nimap = lambda : map(int, sys.stdin.readline().split())\nitup = lambda : tuple(map(int, sys.stdin.readline().split()))\nisor = lambda : sorted(map(int, sys.stdin.readline().split()))\nisor2 = lambda nums: sorted(nums, key=lambda num1: (num1[0], num1[1]))\nilis = lambda : [int(zz) for zz in sys.stdin.readline().split()]\ndd = lambda : collections.defaultdict(lambda : 0)\nadjlist = lambda : collections.defaultdict(lambda : [])\nlcm = lambda num1, num2: num1 * num2 // math.gcd(num1, num2)\nnpr = lambda num1, num2: math.factorial(num1) // math.factorial(num1 - num2)\nlowerpower = lambda num1, num2: pow(num2, math.floor(math.log(num1, num2)))\nupperpower = lambda num1, num2: pow(num2, math.ceil(math.log(num1, num2)))\nisperfectsquare = lambda num1: math.ceil(math.log(num1, 2)) == math.floor(math.log(num1, 2))\nncr = lambda num1, num2: math.factorial(num1) // (math.factorial(num2) * math.factorial(num1 - num2))\nfiltereven = lambda nums: list(filter(lambda num1: num1 % 2 == 0, nums))\nfilteroddd = lambda nums: list(filter(lambda num1: num1 % 2 != 0, nums))\nfact = lambda num1: functools.reduce(lambda num2, num3: num2 * num3, range(1, num1 + 1))\nfreqarray = lambda nums: collections.Counter(nums)\nbitsetarray = lambda nums: [int(num1) for num1 in bin(nums)[2:]]\nlengthbitset = lambda num1: math.ceil(math.log(num1 + 0.1, 2))\nbit_check = lambda num1, num2: num1 & 1 << num2\nbit_set = lambda num1, num2: num1 | 1 << num2\nbit_unset = lambda num1, num2: num1 & ~(1 << num2)\nbit_toggle = lambda num1, num2: num1 ^ 1 << num2\nminheap = lambda nums: 1 if heapq.heapify(nums) == None else 0\nmaxheap = lambda nums: 1 if heapq._heapify_max(nums) == None else 0\nlowerbound = lambda nums, key, start, stop: bisect.bisect_left(nums, key, lo=start, hi=stop)\nupperbound = lambda nums, key, start, stop: bisect.bisect_right(nums, key, lo=start, hi=stop)\ninorder = lambda root: inorder(root.left) + [root.val] + inorder(root.right) if root else []\nprefixsumarray = lambda nums: list(itertools.accumulate(nums, lambda num1, num2: num1 + num2))\nsuffixsumarray = lambda nums: prefixsum(reversed(nums))\ngrid = lambda rows, cols: [[0 for j in range(cols)] for idx in range(rows)]\npalindromeindices = lambda num1: [(num1 // 2 - i - (0 if num1 & 1 else 1), num1 // 2 + i) for i in range(num1 // 2 + (1 if num1 & 1 else 0))]\nonum = lambda num1: '%d' % num1\nomap = lambda num1, num2: '%d %d' % (num1, num2)\nolis = lambda nums: ' '.join((str(nums[idx]) for idx in range(len(nums))))\nodict = lambda nums: '\\n'.join((str('%idx: %s' % (num1[0], ' '.join((str(num2) for num2 in num1[1])))) for num1 in zip(nums.keys(), nums.values())))\nogrid = lambda grid: '\\n'.join((' '.join((str(num1) for num1 in nums)) for nums in grid))\nmodd = int(1000000000.0) + 7\ntcs = 1 if not True else int(input())\nfor tc in range(1, tcs + 1):\n    (x, y) = imap()\n    board = grid(8, 8)\n    board[x - 1][y - 1] = 1\n    if x == 1 and y == 1:\n        (a, b) = (3, 2)\n        board[a - 1][b - 1] = 2\n    elif x == 1 and y == 8:\n        (a, b) = (3, 7)\n        board[a - 1][b - 1] = 2\n    elif x == 8 and y == 1:\n        (a, b) = (6, 2)\n        board[a - 1][b - 1] = 2\n    elif x == 8 and y == 8:\n        (a, b) = (6, 7)\n        board[a - 1][b - 1] = 2\n    elif x == 2 and y == 2:\n        (a, b) = (1, 4)\n        board[a - 1][b - 1] = 2\n        (a, b) = (5, 1)\n        board[a - 1][b - 1] = 2\n    elif x == 2 and y == 7:\n        (a, b) = (1, 5)\n        board[a - 1][b - 1] = 2\n        (a, b) = (5, 8)\n        board[a - 1][b - 1] = 2\n    elif x == 7 and y == 2:\n        (a, b) = (4, 1)\n        board[a - 1][b - 1] = 2\n        (a, b) = (8, 4)\n        board[a - 1][b - 1] = 2\n    elif x == 7 and y == 7:\n        (a, b) = (5, 8)\n        board[a - 1][b - 1] = 2\n        (a, b) = (8, 4)\n        board[a - 1][b - 1] = 2\n    else:\n        x -= 1\n        y -= 1\n\n        def isValid(x, y):\n            return 0 <= x <= 7 and 0 <= y <= 7\n        points = [(x - 2, y - 1), (x + 2, y + 1), (x - 1, y - 2), (x + 1, y + 2), (x + 1, y - 2), (x - 1, y + 2), (x + 2, y - 1), (x - 2, y + 1)]\n        if x == 0 or x == 7 or y == 0 or (y == 7):\n            cnt = 0\n            for val in points:\n                if isValid(*val):\n                    cnt += 1\n                    (x, y) = val\n                    board[x][y] = 2\n                    if cnt == 2:\n                        break\n        else:\n            for i in range(0, len(points), 2):\n                (x1, y1) = points[i]\n                (x2, y2) = points[i + 1]\n                if isValid(x1, y1) and isValid(x2, y2):\n                    board[x1][y1] = 2\n                    board[x2][y2] = 2\n                    break\n    print(ogrid(board))", "T = int(input())\nwhile T:\n    (X, Y) = map(int, input().split(' '))\n    mat = []\n    for i in range(8):\n        mat.append([0, 0, 0, 0, 0, 0, 0, 0])\n    mat[X - 1][Y - 1] = 1\n    if X == 1 and Y == 1 or (X == 1 and Y == 8) or (X == 8 and Y == 8) or (X == 8 and Y == 1):\n        if X == 1:\n            X1 = 3\n        if X == 8:\n            X1 = 6\n        if Y == 1:\n            Y1 = 2\n        if Y == 8:\n            Y1 = 7\n        mat[X1 - 1][Y1 - 1] = 2\n    elif X == 1 and Y > 1 or (X > 1 and Y == 8) or (X == 8 and Y > 1) or (X > 1 and Y == 1):\n        if X == 1:\n            X1 = 3\n            X2 = 3\n            Y1 = Y - 1\n            Y2 = Y + 1\n        if X == 8:\n            X1 = 6\n            X2 = 6\n            Y1 = Y - 1\n            Y2 = Y + 1\n        if Y == 1:\n            Y1 = 3\n            Y2 = 3\n            X1 = X - 1\n            X2 = X + 1\n        if Y == 8:\n            Y1 = 6\n            Y2 = 6\n            X1 = X - 1\n            X2 = X + 1\n        mat[X1 - 1][Y1 - 1] = 2\n        mat[X2 - 1][Y2 - 1] = 2\n    elif X == 2 and Y == 2 or (X == 2 and Y == 7) or (X == 7 and Y == 2) or (X == 7 and Y == 7):\n        if X == 2 and Y == 2:\n            X1 = 5\n            X2 = 1\n            Y1 = 1\n            Y2 = 4\n        if X == 2 and Y == 7:\n            X1 = 1\n            X2 = 5\n            Y1 = 5\n            Y2 = 8\n        if X == 7 and Y == 7:\n            X1 = 5\n            X2 = 8\n            Y1 = 8\n            Y2 = 4\n        if X == 7 and Y == 2:\n            X1 = 8\n            X2 = 4\n            Y1 = 4\n            Y2 = 1\n        mat[X1 - 1][Y1 - 1] = 2\n        mat[X2 - 1][Y2 - 1] = 2\n    else:\n        if X == 2 or X == 7:\n            X1 = X + 1\n            Y1 = Y - 2\n            X2 = X - 1\n            Y2 = Y + 2\n        elif Y == 2 or Y == 7:\n            Y1 = Y + 1\n            X1 = X - 2\n            Y2 = Y - 1\n            X2 = X + 2\n        else:\n            X1 = X + 1\n            Y1 = Y - 2\n            X2 = X - 1\n            Y2 = Y + 2\n        mat[X1 - 1][Y1 - 1] = 2\n        mat[X2 - 1][Y2 - 1] = 2\n    for i in range(8):\n        print(*mat[i], sep=' ')\n    T -= 1", "t = int(input())\n\ndef print_(x1, y1, x2=-1, y2=-1):\n    for i in range(0, 8):\n        for j in range(0, 8):\n            if i == x and j == y:\n                print('1', end=' ')\n            elif i == x1 and j == y1 or (i == x2 and j == y2):\n                print('2', end=' ')\n            else:\n                print('0', end=' ')\n        print()\nwhile t > 0:\n    t = t - 1\n    s = input().strip()\n    (x, y) = list(map(int, s.split(' ')))\n    x -= 1\n    y -= 1\n    if 1 <= x <= 6 and 2 <= y <= 5:\n        print_(x - 1, y - 2, x + 1, y + 2)\n        continue\n    if 1 <= y <= 6 and 2 <= x <= 5:\n        print_(x - 2, y - 1, x + 2, y + 1)\n        continue\n    if x == 0 and y == 0:\n        print_(1, 2)\n        continue\n    if x == 0 and y == 7:\n        print_(1, 5)\n        continue\n    if x == 7 and y == 0:\n        print_(6, 2)\n        continue\n    if x == 7 and y == 7:\n        print_(6, 5)\n        continue\n    if x == 1 and y == 1:\n        print_(0, 3, 4, 0)\n        continue\n    if x == 1 and y == 6:\n        print_(0, 4, 4, 7)\n        continue\n    if x == 6 and y == 1:\n        print_(3, 0, 7, 3)\n        continue\n    if x == 6 and y == 6:\n        print_(3, 7, 7, 4)\n        continue\n    if x == 0:\n        print_(x + 2, y + 1, x + 2, y - 1)\n        continue\n    if x == 7:\n        print_(x - 2, y + 1, x - 2, y - 1)\n        continue\n    if y == 0:\n        print_(x + 1, y + 2, x - 1, y + 2)\n    else:\n        print_(x + 1, y - 2, x - 1, y - 2)", "for _ in range(int(input())):\n    (i, j) = [int(x) for x in input().split()]\n    grid = [[0 for i in range(8)] for j in range(8)]\n    grid[i - 1][j - 1] = 1\n    if i == 1 and j == 1:\n        grid[2 - 1][3 - 1] = 2\n    elif i == 1 and j == 8:\n        grid[2 - 1][6 - 1] = 2\n    elif i == 8 and j == 1:\n        grid[7 - 1][3 - 1] = 2\n    elif i == 8 and j == 8:\n        grid[7 - 1][6 - 1] = 2\n    elif i == 1:\n        grid[i + 2 - 1][j - 1 - 1] = 2\n        grid[i + 2 - 1][j + 1 - 1] = 2\n    elif i == 8:\n        grid[i - 2 - 1][j - 1 - 1] = 2\n        grid[i - 2 - 1][j + 1 - 1] = 2\n    elif j == 1:\n        grid[i - 1 - 1][j + 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif j == 8:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j - 2 - 1] = 2\n    elif i == 2 and j == 2:\n        grid[i - 1 - 1][j + 3 - 1] = 2\n        grid[i + 2 - 1][j - 1 - 1] = 2\n    elif i == 2 and j == 7:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 3 - 1][j + 1 - 1] = 2\n    elif i == 7 and j == 2:\n        grid[i + 1 - 1][j + 3 - 1] = 2\n        grid[i - 2 - 1][j - 1 - 1] = 2\n    elif i == 7 and j == 7:\n        grid[i + 1 - 1][j - 3 - 1] = 2\n        grid[i - 2 - 1][j + 1 - 1] = 2\n    elif i == 2:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif i == 7:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif j == 2:\n        grid[i - 2 - 1][j - 2] = 2\n        grid[i + 2 - 1][j] = 2\n    elif j == 7:\n        grid[i - 2 - 1][j + 1 - 1] = 2\n        grid[i + 2 - 1][j - 1 - 1] = 2\n    else:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    for i in range(8):\n        print(*grid[i])", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    cb = [[0 for i in range(8)] for j in range(8)]\n    if (x, y) == (1, 1):\n        cb[2][1] = 2\n        cb[x - 1][y - 1] = 1\n    elif (x, y) == (1, 8):\n        cb[1][5] = 2\n        cb[x - 1][y - 1] = 1\n    elif (x, y) == (8, 1):\n        cb[5][1] = 2\n        cb[x - 1][y - 1] = 1\n    elif (x, y) == (8, 8):\n        cb[5][6] = 2\n        cb[x - 1][y - 1] = 1\n    elif x == 1 or x == 8:\n        p = x + 2\n        q1 = y + 1\n        q2 = y - 1\n        if p > 8:\n            p = x - 2\n        cb[x - 1][y - 1] = 1\n        cb[p - 1][q1 - 1] = 2\n        cb[p - 1][q2 - 1] = 2\n    elif y == 1 or y == 8:\n        p = y + 2\n        q1 = x + 1\n        q2 = x - 1\n        if p > 8:\n            p = y - 2\n        cb[x - 1][y - 1] = 1\n        cb[q1 - 1][p - 1] = 2\n        cb[q2 - 1][p - 1] = 2\n    elif x in range(2, 6) and y in range(2, 7):\n        p = x + 3\n        p1 = y - 1\n        q = y + 2\n        q1 = x - 1\n        cb[x - 1][y - 1] = 1\n        cb[p - 1][p1 - 1] = 2\n        cb[q1 - 1][q - 1] = 2\n    elif y == 7 and x in range(2, 5):\n        p = x + 3\n        p1 = y + 1\n        q = y - 2\n        q1 = x - 1\n        cb[x - 1][y - 1] = 1\n        cb[p - 1][p1 - 1] = 2\n        cb[q1 - 1][q - 1] = 2\n    elif x in range(6, 8) and y in range(2, 7):\n        p = x - 3\n        p1 = y - 1\n        q = y + 2\n        q1 = x + 1\n        cb[x - 1][y - 1] = 1\n        cb[p - 1][p1 - 1] = 2\n        cb[q1 - 1][q - 1] = 2\n    else:\n        p = x - 3\n        p1 = y + 1\n        q = y - 2\n        q1 = x + 1\n        cb[x - 1][y - 1] = 1\n        cb[p - 1][p1 - 1] = 2\n        cb[q1 - 1][q - 1] = 2\n    for i in cb:\n        for j in i:\n            print(j, end=' ')\n        print()", "test = int(input())\nfor _ in range(test):\n    (qx1, qy1) = (0, 0)\n    (qx2, qy2) = (-1, -1)\n    (y, x) = list(map(int, input().split(' ')))\n    y = y - 1\n    arr_1_6 = [1, 2, 3, 4, 5, 6]\n    x = x - 1\n    if x == 0 and y == 0:\n        (qx1, qy1) = (2, 1)\n    elif y == 7 and x == 0:\n        (qy1, qx1) = (6, 2)\n    elif y == 7 and x == 7:\n        (qy1, qx1) = (6, 5)\n    elif y == 0 and x == 7:\n        (qy1, qx1) = (1, 5)\n    elif x in arr_1_6 and y == 0:\n        qy1 = qy2 = y + 2\n        qx1 = x - 1\n        qx2 = x + 1\n    elif x == 0 and y in arr_1_6:\n        qx1 = qx2 = x + 2\n        qy1 = y - 1\n        qy2 = y + 1\n    elif x == 7 and y in arr_1_6:\n        qx1 = qx2 = x - 2\n        qy1 = y - 1\n        qy2 = y + 1\n    elif y == 7 and x in arr_1_6:\n        qy1 = qy2 = y - 2\n        qx1 = x - 1\n        qx2 = x + 1\n    elif x <= 4 and y <= 4:\n        qx1 = x + 2\n        qy1 = y - 1\n        qx2 = x - 1\n        qy2 = y + 3\n    elif x <= 4 and y >= 4:\n        qx1 = x + 2\n        qy1 = y + 1\n        qx2 = x - 1\n        qy2 = y - 3\n    elif x >= 4 and y >= 4:\n        qx1 = x + 1\n        qy1 = y - 2\n        qx2 = x - 3\n        qy2 = y + 1\n    elif x >= 4 and y <= 4:\n        qx1 = x + 1\n        qy1 = y + 3\n        qx2 = x - 2\n        qy2 = y - 1\n    for y_temp in range(8):\n        for x_temp in range(8):\n            if y_temp == y and x_temp == x:\n                print(1, end=' ')\n            elif y_temp == qy1 and x_temp == qx1:\n                print(2, end=' ')\n            elif y_temp == qy2 and x_temp == qx2:\n                print(2, end=' ')\n            else:\n                print(0, end=' ')\n        print()", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef valid(x, y):\n    if x <= 0 or x > 8 or y <= 0 or (y > 8):\n        return 0\n    return 1\nt = inp()\nwhile t:\n    t -= 1\n    (x, y) = ma()\n    res = [[0 for i in range(8)] for j in range(8)]\n    res[x - 1][y - 1] = 1\n    if x == 1 and y == 1:\n        res[2][1] = 2\n    elif x == 1 and y == 8:\n        res[2][6] = 2\n    elif x == 8 and y == 1:\n        res[5][1] = 2\n    elif x == 8 and y == 8:\n        res[5][6] = 2\n    elif x in [1, 8] or y in [1, 8]:\n        if x == 1:\n            res[x + 1][y - 2] = 2\n            res[x + 1][y] = 2\n        if x == 8:\n            res[x - 3][y - 2] = 2\n            res[x - 3][y] = 2\n        if y == 1:\n            res[x - 2][y + 1] = 2\n            res[x][y + 1] = 2\n        if y == 8:\n            res[x - 2][y - 3] = 2\n            res[x][y - 3] = 2\n    else:\n        flag = 0\n        for i1 in [-1, 1]:\n            for i2 in [-2, 2]:\n                for i3 in [-3, 3]:\n                    for i4 in [-1, 1]:\n                        (x1, x2) = (x + i1, x + i3)\n                        (y1, y2) = (y + i2, y + i4)\n                        if valid(x1, y1) and valid(x2, y2) and (flag == 0) and (i1 > 0 and i3 < 0 or (i1 < 0 and i3 > 0)) and (i2 > 0 and i4 < 0 or (i2 < 0 and i4 > 0)):\n                            res[x1 - 1][y1 - 1] = 2\n                            res[x2 - 1][y2 - 1] = 2\n                            flag = 1\n    for i in res:\n        print(*i)", "test = int(input())\nwhile test:\n    test -= 1\n    (x, y) = map(int, input().split())\n    grid = []\n    x -= 1\n    y -= 1\n    for i in range(8):\n        row = [0] * 8\n        grid.append(row)\n    grid[x][y] = 1\n    if x == 0 and y == 0:\n        grid[x + 2][y + 1] = 2\n    elif x == 0 and y == 7:\n        grid[x + 1][y - 2] = 2\n    elif x == 7 and y == 0:\n        grid[x - 1][y + 2] = 2\n    elif x == 7 and y == 7:\n        grid[x - 2][y - 1] = 2\n    elif x == 0:\n        grid[x + 2][y + 1] = 2\n        grid[x + 2][y - 1] = 2\n    elif y == 0:\n        grid[x + 1][y + 2] = 2\n        grid[x - 1][y + 2] = 2\n    elif x == 7:\n        grid[x - 2][y + 1] = 2\n        grid[x - 2][y - 1] = 2\n    elif y == 7:\n        grid[x + 1][y - 2] = 2\n        grid[x - 1][y - 2] = 2\n    elif x == 6 and y == 6:\n        grid[4][7] = 2\n        grid[7][3] = 2\n    elif x == 6 and y == 1:\n        grid[3][0] = 2\n        grid[7][3] = 2\n    elif y == 1 and x == 1:\n        grid[3][0] = 2\n        grid[0][4] = 2\n    elif y == 6 and x == 1:\n        grid[0][3] = 2\n        grid[3][7] = 2\n    elif x == 1 or x == 6:\n        grid[x - 1][y + 2] = 2\n        grid[x + 1][y - 2] = 2\n    else:\n        grid[x - 2][y + 1] = 2\n        grid[x + 2][y - 1] = 2\n    for i in grid:\n        for j in i:\n            print(j, end=' ')\n        print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    n -= 1\n    m -= 1\n    board = [[0 for i in range(8)] for j in range(8)]\n    board[n][m] = 1\n    if n == 0 and m == 0 or (n == 0 and m == 7) or (n == 7 and m == 0) or (n == 7 and m == 7):\n        pos = [[n + 1, m + 2], [n - 1, m + 2], [n + 1, m - 2], [n - 1, m - 2]]\n        cnt = 0\n        for (x, y) in pos:\n            if cnt == 1:\n                break\n            if 0 <= x <= 7 and 0 <= y <= 7:\n                board[x][y] = 2\n                cnt += 1\n    elif n == 0 or m == 0 or n == 7 or (m == 7):\n        pos = [[n + 1, m + 2], [n - 1, m + 2], [n + 1, m - 2], [n - 1, m - 2], [n + 2, m - 1], [n + 2, m + 1], [n - 2, m - 1], [n - 2, m + 1]]\n        cnt = 0\n        for (x, y) in pos:\n            if cnt == 2:\n                break\n            if 0 <= x <= 7 and 0 <= y <= 7:\n                board[x][y] = 2\n                cnt += 1\n    elif n == 1 and m == 1 or (n == 6 and m == 6) or (n == 1 and m == 6) or (n == 6 and m == 1):\n        if n == 1 and m == 1:\n            board[n + 3][m - 1] = 2\n            board[n - 1][m + 2] = 2\n        elif n == 6 and m == 6:\n            board[n + 1][m - 3] = 2\n            board[n - 2][m + 1] = 2\n        elif n == 1 and m == 6:\n            board[n + 3][m + 1] = 2\n            board[n - 1][m - 2] = 2\n        elif n == 6 and m == 1:\n            board[n + 1][m + 2] = 2\n            board[n - 3][m - 1] = 2\n    else:\n        if 2 <= m <= 5:\n            pos = [[n + 1, m + 2], [n - 1, m - 2]]\n        else:\n            pos = [[n + 2, m + 1], [n - 2, m - 1]]\n        for (x, y) in pos:\n            board[x][y] = 2\n    for row in board:\n        print(*row)", "import math\nfrom collections import Counter\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nmx = 10 ** 5\ninp = lambda : int(input())\nfor _ in range(inp()):\n    (a, b) = ints()\n    (org_a, org_b) = (a, b)\n    if org_a in (1, 8) and org_b in (1, 8):\n        queens = [[2, 3]]\n    elif org_b in (1, 8):\n        b = 1\n        if org_a > 4:\n            a = 9 - a\n        queens = [[a - 1, b + 2], [a + 1, b + 2]]\n    elif org_a in (1, 8):\n        a = 1\n        if org_b > 4:\n            b = 9 - b\n        queens = [[a + 2, b - 1], [a + 2, b + 1]]\n    else:\n        if org_a > 4:\n            a = 9 - a\n        if org_b > 4:\n            b = 9 - b\n        if a == 2 and b == 2:\n            queens = [[a + 3, b - 1], [a - 1, b + 2]]\n        elif b - 2 > 0 and a - 1 > 0:\n            queens = [[a - 1, b - 2], [a + 1, b + 2]]\n        else:\n            queens = [[a - 2, b - 1], [a + 2, b + 1]]\n    for queen in queens:\n        if org_a > 4:\n            queen[0] = 9 - queen[0]\n        if org_b > 4:\n            queen[1] = 9 - queen[1]\n    board = []\n    for _ in range(8):\n        board.append([0 for _ in range(8)])\n    board[org_a - 1][org_b - 1] = 1\n    for (queen_r, queen_c) in queens:\n        board[queen_r - 1][queen_c - 1] = 2\n    for row in board:\n        print(*row)", "for _ in range(int(input())):\n    coor = [int(i) for i in input().split()]\n    kx = coor[0]\n    ky = coor[1]\n\n    def printoutput(kx, ky, q1x, q1y, q2x=0, q2y=0):\n        mat = [[0] * 8 for _ in range(8)]\n        mat[kx - 1][ky - 1] = 1\n        mat[q1x - 1][q1y - 1] = 2\n        if q2x != 0:\n            mat[q2x - 1][q2y - 1] = 2\n        for row in mat:\n            print(*row)\n    if kx == 1 and ky == 1:\n        q1x = kx + 1\n        q1y = ky + 2\n        printoutput(kx, ky, q1x, q1y)\n        continue\n    elif kx == 1 and ky == 8:\n        q1x = kx + 1\n        q1y = ky - 2\n        printoutput(kx, ky, q1x, q1y)\n        continue\n    elif kx == 8 and ky == 8:\n        q1x = kx - 1\n        q1y = ky - 2\n        printoutput(kx, ky, q1x, q1y)\n        continue\n    elif kx == 8 and ky == 1:\n        q1x = kx - 1\n        q1y = ky + 2\n        printoutput(kx, ky, q1x, q1y)\n        continue\n    if kx == 1:\n        q1x = kx + 2\n        q1y = ky - 1\n        q2x = kx + 2\n        q2y = ky + 1\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    elif kx == 8:\n        q1x = kx - 2\n        q1y = ky - 1\n        q2x = kx - 2\n        q2y = ky + 1\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    elif ky == 1:\n        q1x = kx - 1\n        q1y = ky + 2\n        q2x = kx + 1\n        q2y = ky + 2\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    elif ky == 8:\n        q1x = kx - 1\n        q1y = ky - 2\n        q2x = kx + 1\n        q2y = ky - 2\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    if ky == 2 and kx == 2:\n        q1x = kx - 1\n        q1y = ky + 2\n        q2x = kx + 3\n        q2y = ky - 1\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    elif ky == 2 and kx == 7:\n        q1x = kx + 1\n        q1y = ky + 2\n        q2x = kx - 3\n        q2y = ky - 1\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    elif ky == 7 and kx == 2:\n        q1x = kx - 1\n        q1y = ky - 2\n        q2x = kx + 3\n        q2y = ky + 1\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    elif ky == 7 and kx == 7:\n        q1x = kx + 1\n        q1y = ky - 2\n        q2x = kx - 3\n        q2y = ky + 1\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    elif ky == 2 or ky == 7:\n        q1x = kx - 2\n        q1y = ky - 1\n        q2x = kx + 2\n        q2y = ky + 1\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue\n    else:\n        q1x = kx - 1\n        q1y = ky + 2\n        q2x = kx + 1\n        q2y = ky - 2\n        printoutput(kx, ky, q1x, q1y, q2x, q2y)\n        continue", "test = int(input())\nfor t in range(test):\n    (a, b) = map(int, input().split())\n    B = [[0 for i in range(8)] for j in range(8)]\n    B[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        B[1][2] = 2\n    elif a == 1 and b == 8:\n        B[1][5] = 2\n    elif a == 8 and b == 1:\n        B[6][2] = 2\n    elif a == 8 and b == 8:\n        B[6][5] = 2\n    elif a == 1:\n        B[a + 1][b - 2] = 2\n        B[a + 1][b] = 2\n    elif a == 8:\n        B[a - 3][b - 2] = 2\n        B[a - 3][b] = 2\n    elif b == 1:\n        B[a][b + 1] = 2\n        B[a - 2][b + 1] = 2\n    elif b == 8:\n        B[a - 2][b - 3] = 2\n        B[a][b - 3] = 2\n    elif a == 2 and b == 2:\n        B[a - 2][b + 2] = 2\n        B[a + 1][b - 2] = 2\n    elif a == 2 and b == 7:\n        B[a - 2][b - 3] = 2\n        B[a + 2][b] = 2\n    elif a == 7 and b == 2:\n        B[a][b + 2] = 2\n        B[a - 3][b - 2] = 2\n    elif a == 7 and b == 7:\n        B[a][b - 4] = 2\n        B[a - 3][b] = 2\n    elif a == 2:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    elif a == 7:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    elif b == 2:\n        B[a - 3][b - 2] = 2\n        B[a + 1][b] = 2\n    elif b == 7:\n        B[a - 3][b] = 2\n        B[a + 1][b - 2] = 2\n    else:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    for i in range(8):\n        print(*B[i])", "t = int(input())\n\ndef wtf(x, y):\n    if x == 2 and y == 2:\n        return (1, 1)\n    if x == 2 and y == 7:\n        return (1, 8)\n    if x == 7 and y == 2:\n        return (8, 1)\n    if x == 7 and y == 7:\n        return (8, 8)\n\ndef shift(s, n):\n    if s + n < 9:\n        return s + n\n    else:\n        return s - n\n\ndef print_board(Q, X):\n    b = [[0 for i in range(8)] for j in range(8)]\n    for q in Q:\n        b[q[0] - 1][q[1] - 1] = 2\n    b[X[0] - 1][X[1] - 1] = 1\n    for bb in b:\n        print(*bb)\nfor i in range(t):\n    (x, y) = list(map(int, input().split()))\n    Q = []\n    if x in [1, 8] and y in [1, 8]:\n        Q.append((shift(x, 2), shift(y, 1)))\n    elif x in [1, 8]:\n        Q.append((shift(x, 2), y - 1))\n        Q.append((shift(x, 2), y + 1))\n    elif y in [1, 8]:\n        Q.append((x - 1, shift(y, 2)))\n        Q.append((x + 1, shift(y, 2)))\n    elif x in [3, 4, 5, 6]:\n        Q.append((x + 2, y - 1))\n        Q.append((x - 2, y + 1))\n    elif y in [3, 4, 5, 6]:\n        Q.append((x - 1, y + 2))\n        Q.append((x + 1, y - 2))\n    else:\n        Q.append((shift(x, 2), wtf(x, y)[1]))\n        Q.append((wtf(x, y)[0], shift(y, 3)))\n    print_board(Q, (x, y))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef valid(x, y):\n    if x <= 0 or x > 8 or y <= 0 or (y > 8):\n        return 0\n    return 1\nt = inp()\nwhile t:\n    t -= 1\n    (x, y) = ma()\n    res = [[0 for i in range(8)] for j in range(8)]\n    res[x - 1][y - 1] = 1\n    if x == 1 and y == 1:\n        res[2][1] = 2\n    elif x == 1 and y == 8:\n        res[2][6] = 2\n    elif x == 8 and y == 1:\n        res[5][1] = 2\n    elif x == 8 and y == 8:\n        res[5][6] = 2\n    elif x in [1, 8] or y in [1, 8]:\n        if x == 1:\n            res[x + 1][y - 2] = 2\n            res[x + 1][y] = 2\n        if x == 8:\n            res[x - 3][y - 2] = 2\n            res[x - 3][y] = 2\n        if y == 1:\n            res[x - 2][y + 1] = 2\n            res[x][y + 1] = 2\n        if y == 8:\n            res[x - 2][y - 3] = 2\n            res[x][y - 3] = 2\n    else:\n        flag = 0\n        for i1 in [-1, 1]:\n            for i2 in [-2, 2]:\n                for i3 in [-3, 3]:\n                    for i4 in [-1, 1]:\n                        (x1, x2) = (x + i1, x + i3)\n                        (y1, y2) = (y + i2, y + i4)\n                        if valid(x1, y1) and valid(x2, y2) and (flag == 0) and (i1 > 0 and i3 < 0 or (i1 < 0 and i3 > 0)) and (i2 > 0 and i4 < 0 or (i2 < 0 and i4 > 0)):\n                            res[x1 - 1][y1 - 1] = 2\n                            res[x2 - 1][y2 - 1] = 2\n                            flag = 1\n    for i in res:\n        print(*i)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = None\n    d = None\n    if a == 1 or a == 8:\n        c = (2 if a == 1 else 7, b + 2 if b + 2 < 9 else b - 2)\n        d = (3 if a == 1 else 6, b - 1 if 2 <= b <= 7 else 0)\n    elif b == 1 or b == 8:\n        c = (a + 2 if a + 2 < 9 else a - 2, 2 if b == 1 else 7)\n        d = (a + 1 if 2 <= a <= 7 else 0, 3 if b == 1 else 6)\n    elif a == 2 or a == 7:\n        c = (1 if a == 2 else 8, b + 2 if b + 2 < 9 else b - 2)\n        d = (a + 3 if a == 2 else a - 3, b - 1 if b < 7 else 8)\n    elif b == 2 or b == 7:\n        c = (a - 2, 1 if b == 2 else 8)\n        d = (a + 1, b + 3 if b == 2 else b - 3)\n    else:\n        c = (a - 1 if a == 3 else a + 1, b + 2)\n        d = (a + 3 if a == 3 else a - 3, b - 1)\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if i == a and j == b:\n                print('1', end=' ')\n            elif (i, j) == c or (i, j) == d:\n                print('2', end=' ')\n            else:\n                print('0', end=' ')\n        print()", "for _ in range(int(input())):\n    (i, j) = [int(x) for x in input().split()]\n    grid = [[0 for i in range(8)] for j in range(8)]\n    grid[i - 1][j - 1] = 1\n    if i == 1 and j == 1:\n        grid[2 - 1][3 - 1] = 2\n    elif i == 1 and j == 8:\n        grid[2 - 1][6 - 1] = 2\n    elif i == 8 and j == 1:\n        grid[7 - 1][3 - 1] = 2\n    elif i == 8 and j == 8:\n        grid[7 - 1][6 - 1] = 2\n    elif i == 1:\n        grid[i + 2 - 1][j - 1 - 1] = 2\n        grid[i + 2 - 1][j + 1 - 1] = 2\n    elif i == 8:\n        grid[i - 2 - 1][j - 1 - 1] = 2\n        grid[i - 2 - 1][j + 1 - 1] = 2\n    elif j == 1:\n        grid[i - 1 - 1][j + 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif j == 8:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j - 2 - 1] = 2\n    elif i == 2 and j == 2:\n        grid[i - 1 - 1][j + 3 - 1] = 2\n        grid[i + 2 - 1][j - 1 - 1] = 2\n    elif i == 2 and j == 7:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 3 - 1][j + 1 - 1] = 2\n    elif i == 7 and j == 2:\n        grid[i + 1 - 1][j + 3 - 1] = 2\n        grid[i - 2 - 1][j - 1 - 1] = 2\n    elif i == 7 and j == 7:\n        grid[i + 1 - 1][j - 3 - 1] = 2\n        grid[i - 2 - 1][j + 1 - 1] = 2\n    elif i == 2:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif i == 7:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    elif j == 2:\n        grid[i - 2 - 1][j - 2] = 2\n        grid[i + 2 - 1][j] = 2\n    elif j == 7:\n        grid[i - 2 - 1][j + 1 - 1] = 2\n        grid[i + 2 - 1][j - 1 - 1] = 2\n    else:\n        grid[i - 1 - 1][j - 2 - 1] = 2\n        grid[i + 1 - 1][j + 2 - 1] = 2\n    for i in range(8):\n        print(*grid[i])", "t = int(input())\nfor i in range(t):\n    (x, y) = map(int, input().split())\n    x -= 1\n    y -= 1\n    mat = []\n    for i in range(8):\n        a = [0, 0, 0, 0, 0, 0, 0, 0]\n        mat.append(a)\n    mat[x][y] = 1\n    if x + y == 0:\n        mat[2][1] = 2\n    elif x == 7 and y == 0:\n        mat[5][1] = 2\n    elif x == 0 and y == 7:\n        mat[1][5] = 2\n    elif x == 7 and y == 7:\n        mat[5][6] = 2\n    elif x == 0:\n        mat[2][y - 1] = 2\n        mat[2][y + 1] = 2\n    elif x == 7:\n        mat[5][y - 1] = 2\n        mat[5][y + 1] = 2\n    elif y == 0:\n        mat[x - 1][2] = 2\n        mat[x + 1][2] = 2\n    elif y == 7:\n        mat[x - 1][5] = 2\n        mat[x + 1][5] = 2\n    elif x == 1 and y == 1:\n        mat[0][3] = 2\n        mat[4][0] = 2\n    elif x == 6 and y == 6:\n        mat[4][7] = 2\n        mat[7][3] = 2\n    elif x == 6 and y == 1:\n        mat[4][0] = 2\n        mat[7][4] = 2\n    elif x == 1 and y == 6:\n        mat[0][3] = 2\n        mat[3][7] = 2\n    elif y == 1:\n        mat[x + 2][y - 1] = 2\n        mat[x - 2][y + 1] = 2\n    elif y == 6:\n        mat[x - 2][y - 1] = 2\n        mat[x + 2][y + 1] = 2\n    elif x == 1:\n        mat[x - 1][y - 2] = 2\n        mat[x + 1][y + 2] = 2\n    elif x == 6:\n        mat[x + 1][y - 2] = 2\n        mat[x - 1][y + 2] = 2\n    else:\n        mat[x + 1][y + 2] = 2\n        mat[x - 1][y - 2] = 2\n    for i in range(8):\n        for j in range(8):\n            print(mat[i][j], end=' ')\n        print()", "import math\nfrom bisect import bisect, bisect_left, bisect_right\nimport heapq\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef LIS(arr, n):\n    dp = [10 ** 9] * (n + 1)\n    for ele in arr:\n        dp[bisect_left(dp, ele)] = ele\n    return bisect_left(dp, 10 ** 9)\n\ndef exponentiation(bas, exp, mod=1000000007):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nyes = 'YES'\nno = 'NO'\neven = 'EVEN'\nodd = 'ODD'\n\ndef check(do):\n    (aa, bb) = do\n    if -1 < aa < 8 and -1 < bb < 8:\n        return True\n    return False\n\ndef sett(arr, do):\n    (aa, bb) = do\n    if -1 < aa < 8 and -1 < bb < 8:\n        arr[aa][bb] = 2\n\ndef process(a, b):\n    arr = [[0] * 8 for i in range(8)]\n    n = 8\n    (x, y) = (a - 1, b - 1)\n    arr[x][y] = 1\n    if 1 < x < 6 and 0 < y < 7:\n        arr[x - 2][y - 1] = 2\n        arr[x + 2][y + 1] = 2\n    elif x == 0 and y == 0:\n        arr[x + 1][y + 2] = 2\n    elif x == 0 and y == n - 1:\n        arr[x + 1][y - 2] = 2\n    elif x == n - 1 and y == 0:\n        arr[x - 1][y + 2] = 2\n    elif x == n - 1 and y == n - 1:\n        arr[x - 1][y - 2] = 2\n    elif x == 0:\n        if y <= 5:\n            arr[x + 1][y + 2] = 2\n            arr[x + 2][y - 1] = 2\n        else:\n            arr[x + 1][y - 2] = 2\n            arr[x + 2][y + 1] = 2\n    elif x == 7:\n        if y <= 5:\n            arr[x - 1][y + 2] = 2\n            arr[x - 2][y - 1] = 2\n        else:\n            arr[x - 1][y - 2] = 2\n            arr[x - 2][y + 1] = 2\n    elif x == 1:\n        if y == 0:\n            arr[x + 1][y + 2] = 2\n            arr[x - 1][y + 2] = 2\n        elif y == 7:\n            arr[x + 1][y - 2] = 2\n            arr[x - 1][y - 2] = 2\n        elif y <= 4:\n            arr[x + 2][y - 1] = 2\n            arr[x - 1][y + 3] = 2\n        else:\n            arr[x + 2][y + 1] = 2\n            arr[x - 1][y - 3] = 2\n    elif x == 6:\n        if y == 0:\n            arr[x + 1][y + 2] = 2\n            arr[x - 1][y + 2] = 2\n        elif y == 7:\n            arr[x + 1][y - 2] = 2\n            arr[x - 1][y - 2] = 2\n        elif y <= 4:\n            arr[x - 2][y - 1] = 2\n            arr[x + 1][y + 3] = 2\n        else:\n            arr[x - 2][y + 1] = 2\n            arr[x + 1][y - 3] = 2\n    else:\n        tleft = [x - 1, y - 2]\n        bleft = [x + 1, y - 2]\n        tright = [x - 1, y + 2]\n        bright = [x + 1, y + 2]\n        if check(tleft) and check(bleft):\n            sett(arr, tleft)\n            sett(arr, bleft)\n        elif check(tright) and check(bright):\n            sett(arr, tright)\n            sett(arr, bright)\n        elif check(tleft) and check(tright):\n            sett(arr, tleft)\n            sett(arr, tright)\n        else:\n            sett(arr, bleft)\n            sett(arr, bright)\n    for row in arr:\n        print(*row)\n\ndef main():\n    for _ in range(int(input())):\n        (a, b) = list(mapin())\n        process(a, b)\nmain()", "test = int(input())\nfor t in range(test):\n    (a, b) = map(int, input().split())\n    B = [[0 for i in range(8)] for j in range(8)]\n    B[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        B[1][2] = 2\n    elif a == 1 and b == 8:\n        B[1][5] = 2\n    elif a == 8 and b == 1:\n        B[6][2] = 2\n    elif a == 8 and b == 8:\n        B[6][5] = 2\n    elif a == 1:\n        B[a + 1][b - 2] = 2\n        B[a + 1][b] = 2\n    elif a == 8:\n        B[a - 3][b - 2] = 2\n        B[a - 3][b] = 2\n    elif b == 1:\n        B[a][b + 1] = 2\n        B[a - 2][b + 1] = 2\n    elif b == 8:\n        B[a - 2][b - 3] = 2\n        B[a][b - 3] = 2\n    elif a == 2 and b == 2:\n        B[a - 2][b + 2] = 2\n        B[a + 1][b - 2] = 2\n    elif a == 2 and b == 7:\n        B[a - 2][b - 3] = 2\n        B[a + 2][b] = 2\n    elif a == 7 and b == 2:\n        B[a][b + 2] = 2\n        B[a - 3][b - 2] = 2\n    elif a == 7 and b == 7:\n        B[a][b - 4] = 2\n        B[a - 3][b] = 2\n    elif a == 2:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    elif a == 7:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    elif b == 2:\n        B[a - 3][b - 2] = 2\n        B[a + 1][b] = 2\n    elif b == 7:\n        B[a - 3][b] = 2\n        B[a + 1][b - 2] = 2\n    else:\n        B[a - 2][b - 3] = 2\n        B[a][b + 1] = 2\n    for i in range(8):\n        print(*B[i])", "for tc in range(int(input())):\n    (r, c) = map(int, input().split())\n    if c == 1 and r == 1:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 3 and col == 2:\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 8 and r == 8:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 6 and col == 7:\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 1 and r == 8:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 7 and col == 3:\n                    if col == 8:\n                        print(2, end='')\n                    print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 8 and r == 1:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 3 and col == 7:\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 1:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == r - 1 and col == 3 or (row == r + 1 and col == 3):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 8:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == r - 1 and col == 6 or (row == r + 1 and col == 6):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif r == 1:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 3 and col == c - 1 or (row == 3 and col == c + 1):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif r == 8:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 6 and col == c - 1 or (row == 6 and col == c + 1):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif r == 2 and c == 7:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 1 and col == 4 or (row == 4 and col == 8):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 2 and r == 7:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 4 and col == 1 or (row == 8 and col == 4):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 7 and r == 7:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 4 and col == 8 or (row == 8 and col == 5):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 2 and r == 2:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == 1 and col == 5 or (row == 4 and col == 1):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif r == 2 or r == 7:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == r - 1 and col == c - 2 or (row == r + 1 and col == c + 2):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    elif c == 2 or c == 7:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == r - 2 and col == c - 1 or (row == r + 2 and col == c + 1):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    else:\n        for row in range(1, 9):\n            for col in range(1, 9):\n                if row == r - 2 and col == c - 1 or (row == r + 2 and col == c + 1):\n                    if col == 8:\n                        print(2, end='')\n                    else:\n                        print(2, end=' ')\n                elif row == r and col == c:\n                    if col == 8:\n                        print(1, end='')\n                    else:\n                        print(1, end=' ')\n                elif col == 8:\n                    print(0, end='')\n                else:\n                    print(0, end=' ')\n            if row != 8:\n                print()\n    print()\n    print()", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(a % b, a)\n\ndef swap(a, b):\n    (a, b) = (b, a)\n    return (a, b)\n\ndef fact(n):\n    if n == 1:\n        return 1\n    return n * fact(n - 1)\n\ndef cbits(n):\n    count = 0\n    while n:\n        n = n & n - 1\n        count += 1\n    return count\n\ndef fill(a, b, mat):\n    if a == 1 and b == 1:\n        mat[2 - 1][3 - 1] = 2\n    elif a == 1 and b == 8:\n        mat[2 - 1][6 - 1] = 2\n    elif a == 8 and b == 1:\n        mat[7 - 1][3 - 1] = 2\n    elif a == 8 and b == 8:\n        mat[7 - 1][6 - 1] = 2\n    elif a == 1:\n        mat[a + 2 - 1][b - 1 - 1] = 2\n        mat[a + 2 - 1][b + 1 - 1] = 2\n    elif a == 8:\n        mat[a - 2 - 1][b - 1 - 1] = 2\n        mat[a - 2 - 1][b + 1 - 1] = 2\n    elif b == 1:\n        mat[a - 1 - 1][b + 2 - 1] = 2\n        mat[a + 1 - 1][b + 2 - 1] = 2\n    elif b == 8:\n        mat[a - 1 - 1][b - 2 - 1] = 2\n        mat[a + 1 - 1][b - 2 - 1] = 2\n    elif a == 2 and b == 2:\n        mat[a - 1 - 1][b + 3 - 1] = 2\n        mat[a + 2 - 1][b - 1 - 1] = 2\n    elif a == 2 and b == 7:\n        mat[a - 1 - 1][b - 2 - 1] = 2\n        mat[a + 3 - 1][b + 1 - 1] = 2\n    elif a == 7 and b == 2:\n        mat[a + 1 - 1][b + 3 - 1] = 2\n        mat[a - 2 - 1][b - 1 - 1] = 2\n    elif a == 7 and b == 7:\n        mat[a + 1 - 1][b - 3 - 1] = 2\n        mat[a - 2 - 1][b + 1 - 1] = 2\n    elif a == 2:\n        mat[a - 1 - 1][b - 2 - 1] = 2\n        mat[a + 1 - 1][b + 2 - 1] = 2\n    elif a == 7:\n        mat[a - 1 - 1][b - 2 - 1] = 2\n        mat[a + 1 - 1][b + 2 - 1] = 2\n    elif b == 2:\n        mat[a - 2 - 1][b - 1 - 1] = 2\n        mat[a + 2 - 1][b + 1 - 1] = 2\n    elif b == 7:\n        mat[a - 2 - 1][b + 1 - 1] = 2\n        mat[a + 2 - 1][b - 1 - 1] = 2\n    else:\n        mat[a - 1 - 1][b - 2 - 1] = 2\n        mat[a + 1 - 1][b + 2 - 1] = 2\n\ndef solve(a, b):\n    mat = [[0] * 8 for i in range(8)]\n    mat[a - 1][b - 1] = 1\n    fill(a, b, mat)\n    for i in range(8):\n        for j in range(8):\n            print(mat[i][j], end=' ')\n        print()\nt = int(input())\nwhile t > 0:\n    (a, b) = map(int, input().split())\n    solve(a, b)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    ch = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    a -= 1\n    b -= 1\n    ch[a][b] = 1\n    if a == 0:\n        if b == 0:\n            ch[2][1] = 2\n        elif b == 7:\n            ch[2][6] = 2\n        else:\n            ch[2][b - 1] = 2\n            ch[2][b + 1] = 2\n    elif a == 7:\n        if b == 0:\n            ch[5][1] = 2\n        elif b == 7:\n            ch[5][6] = 2\n        else:\n            ch[5][b - 1] = 2\n            ch[5][b + 1] = 2\n    elif a == 1:\n        if b == 0:\n            ch[a - 1][2] = 2\n            ch[a + 1][2] = 2\n        elif b == 7:\n            ch[a - 1][5] = 2\n            ch[a + 1][5] = 2\n        elif b == 1:\n            ch[0][4] = 2\n            ch[3][0] = 2\n        elif b == 6:\n            ch[0][3] = 2\n            ch[3][7] = 2\n        else:\n            ch[a - 1][b + 2] = 2\n            ch[a + 1][b - 2] = 2\n    elif a == 6:\n        if b == 0:\n            ch[a - 1][2] = 2\n            ch[a + 1][2] = 2\n        elif b == 7:\n            ch[a - 1][5] = 2\n            ch[a + 1][5] = 2\n        elif b == 1:\n            ch[7][4] = 2\n            ch[4][0] = 2\n        elif b == 6:\n            ch[7][3] = 2\n            ch[4][7] = 2\n        else:\n            ch[a - 1][b + 2] = 2\n            ch[a + 1][b - 2] = 2\n    elif b == 0:\n        ch[a - 1][2] = 2\n        ch[a + 1][2] = 2\n    elif b == 7:\n        ch[a - 1][5] = 2\n        ch[a + 1][5] = 2\n    elif b == 1:\n        ch[a - 2][2] = 2\n        ch[a + 2][0] = 2\n    elif b == 6:\n        ch[a - 2][7] = 2\n        ch[a + 2][5] = 2\n    else:\n        ch[a - 1][b + 2] = 2\n        ch[a + 1][b - 2] = 2\n    for j in ch:\n        print(*j)", "def solve(a, b):\n    if a == 1 and b == 1:\n        return [2, 3]\n    if a == 1 and b == 8:\n        return [2, 6]\n    if a == 8 and b == 1:\n        return [7, 3]\n    if a == 8 and b == 8:\n        return [7, 6]\n    if a == 1:\n        return [3, b - 1, 3, b + 1]\n    if a == 8:\n        return [6, b - 1, 6, b + 1]\n    if b == 1:\n        return [a - 1, 3, a + 1, 3]\n    if b == 8:\n        return [a - 1, 6, a + 1, 6]\n    if a == 2 and b == 2:\n        return [1, 4, 5, 1]\n    if a == 2 and b == 7:\n        return [1, 5, 5, 8]\n    if a == 7 and b == 2:\n        return [8, 4, 4, 1]\n    if a == 7 and b == 7:\n        return [8, 5, 4, 8]\n    if a > 2 and a < 7:\n        return [a + 2, b - 1, a - 2, b + 1]\n    return [a + 1, b + 2, a - 1, b - 2]\nfor _ in range(int(input())):\n    grid = []\n    for i in range(8):\n        x = []\n        for j in range(8):\n            x.append(0)\n        grid.append(x)\n    (a, b) = map(int, input().split())\n    alpha = solve(a, b)\n    grid[a - 1][b - 1] = 1\n    i = 0\n    while i < len(alpha):\n        grid[alpha[i] - 1][alpha[i + 1] - 1] = 2\n        i += 2\n    for i in grid:\n        print(*i)", "for _ in range(int(input())):\n    (a, b) = [int(x) for x in input().split()]\n    board = [[0 for i in range(8)] for j in range(8)]\n    board[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        board[2 - 1][3 - 1] = 2\n    elif a == 1 and b == 8:\n        board[2 - 1][6 - 1] = 2\n    elif a == 8 and b == 1:\n        board[7 - 1][3 - 1] = 2\n    elif a == 8 and b == 8:\n        board[7 - 1][6 - 1] = 2\n    elif a == 1:\n        board[a + 2 - 1][b - 1 - 1] = 2\n        board[a + 2 - 1][b + 1 - 1] = 2\n    elif a == 8:\n        board[a - 2 - 1][b - 1 - 1] = 2\n        board[a - 2 - 1][b + 1 - 1] = 2\n    elif b == 1:\n        board[a - 1 - 1][b + 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif b == 8:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b - 2 - 1] = 2\n    elif a == 2 and b == 2:\n        board[a - 1 - 1][b + 3 - 1] = 2\n        board[a + 2 - 1][b - 1 - 1] = 2\n    elif a == 2 and b == 7:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 3 - 1][b + 1 - 1] = 2\n    elif a == 7 and b == 2:\n        board[a + 1 - 1][b + 3 - 1] = 2\n        board[a - 2 - 1][b - 1 - 1] = 2\n    elif a == 7 and b == 7:\n        board[a + 1 - 1][b - 3 - 1] = 2\n        board[a - 2 - 1][b + 1 - 1] = 2\n    elif a == 2:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif a == 7:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif b == 2:\n        board[a - 2 - 1][b - 1 - 1] = 2\n        board[a + 2 - 1][b + 1 - 1] = 2\n    elif b == 7:\n        board[a - 2 - 1][b + 1 - 1] = 2\n        board[a + 2 - 1][b - 1 - 1] = 2\n    else:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    for i in range(len(board)):\n        print(*board[i])", "def func():\n    (a, b) = map(int, input().split())\n    l = []\n    for i in range(8):\n        temp = []\n        for j in range(8):\n            temp.append(0)\n        l.append(temp)\n    l[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        l[1][2] = 2\n    elif a == 1 and b == 8:\n        l[1][5] = 2\n    elif a == 8 and b == 1:\n        l[5][1] = 2\n    elif a == 8 and b == 8:\n        l[5][6] = 2\n    elif a == 1:\n        l[2][b - 2] = 2\n        l[2][b] = 2\n    elif b == 1:\n        l[a][2] = 2\n        l[a - 2][2] = 2\n    elif b == 8:\n        l[a][5] = 2\n        l[a - 2][5] = 2\n    elif a == 8:\n        l[5][b - 2] = 2\n        l[5][b] = 2\n    elif a == 2 and b == 2:\n        l[0][4] = 2\n        l[3][0] = 2\n    elif a == 2 and b == 7:\n        l[0][3] = 2\n        l[3][7] = 2\n    elif a == 7 and b == 2:\n        l[4][0] = 2\n        l[7][4] = 2\n    elif a == 7 and b == 7:\n        l[7][3] = 2\n        l[4][7] = 2\n    elif b == 2 or b == 7:\n        l[a - 3][b - 2] = 2\n        l[a + 1][b] = 2\n    else:\n        l[a - 2][b + 1] = 2\n        l[a][b - 3] = 2\n    for i in range(len(l)):\n        print(*l[i])\nt = int(input())\nwhile t:\n    func()\n    t -= 1", "for tc in range(int(input())):\n    (lailla, glabulous) = map(int, input().split())\n    arr = [[0 for j in range(8)] for i in range(8)]\n    arr[lailla - 1][glabulous - 1] = 1\n    if lailla in [1, 8] and glabulous in [1, 8]:\n        if lailla == 1 and glabulous == 1:\n            (p, a100, r, s) = (3, 2, 3, 2)\n        elif lailla == 1 and glabulous == 8:\n            (p, a100, r, s) = (3, 7, 3, 7)\n        elif lailla == 8 and glabulous == 1:\n            (p, a100, r, s) = (6, 2, 6, 2)\n        elif lailla == 8 and glabulous == 8:\n            (p, a100, r, s) = (6, 7, 6, 7)\n        arr[p - 1][a100 - 1] = 2\n    elif lailla in [2, 7] and glabulous in [2, 7]:\n        if lailla == 2 and glabulous == 2:\n            (p, a100, r, s) = (1, 4, 5, 1)\n        elif lailla == 2 and glabulous == 7:\n            (p, a100, r, s) = (1, 5, 5, 8)\n        elif lailla == 7 and glabulous == 2:\n            (p, a100, r, s) = (4, 1, 8, 4)\n        elif lailla == 7 and glabulous == 7:\n            (p, a100, r, s) = (5, 8, 8, 4)\n    else:\n        (lailla, glabulous) = (lailla - 1, glabulous - 1)\n        chk = lambda lailla, glabulous: 0 <= lailla <= 7 and 0 <= glabulous <= 7\n        pts = [(lailla + 1, glabulous - 2), (lailla - 1, glabulous + 2), (lailla + 2, glabulous - 1), (lailla - 2, glabulous + 1), (lailla - 2, glabulous - 1), (lailla + 2, glabulous + 1), (lailla - 1, glabulous - 2), (lailla + 1, glabulous + 2)]\n        if lailla == 0 or lailla == 7 or glabulous == 0 or (glabulous == 7):\n            tot = 0\n            for pt in pts:\n                if chk(*pt):\n                    tot += 1\n                    (lailla, glabulous) = pt\n                    if tot == 1:\n                        (p, a100) = (lailla + 1, glabulous + 1)\n                    if tot == 2:\n                        (r, s) = (lailla + 1, glabulous + 1)\n                        break\n        else:\n            for i in range(0, len(pts), 2):\n                (lailla1, glabulous1) = pts[i]\n                (lailla2, glabulous2) = pts[i + 1]\n                if chk(lailla1, glabulous1) and chk(lailla2, glabulous2):\n                    (p, a100, r, s) = (lailla1 + 1, glabulous1 + 1, lailla2 + 1, glabulous2 + 1)\n                    break\n    arr[p - 1][a100 - 1] = arr[r - 1][s - 1] = 2\n    for row in arr:\n        print(*row)", "def factorial(n):\n    return 1 if n == 1 or n == 0 else n * factorial(n - 1)\ncase = int(input())\nfor z in range(case):\n    board = []\n    for i in range(8):\n        lst = []\n        for j in range(8):\n            lst.append(0)\n        board.append(lst)\n    (x, y) = map(int, input().split(' '))\n    a = x\n    b = y\n    board[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        board[2 - 1][3 - 1] = 2\n    elif a == 1 and b == 8:\n        board[2 - 1][6 - 1] = 2\n    elif a == 8 and b == 1:\n        board[7 - 1][3 - 1] = 2\n    elif a == 8 and b == 8:\n        board[7 - 1][6 - 1] = 2\n    elif a == 1:\n        board[a + 2 - 1][b - 1 - 1] = 2\n        board[a + 2 - 1][b + 1 - 1] = 2\n    elif a == 8:\n        board[a - 2 - 1][b - 1 - 1] = 2\n        board[a - 2 - 1][b + 1 - 1] = 2\n    elif b == 1:\n        board[a - 1 - 1][b + 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif b == 8:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b - 2 - 1] = 2\n    elif a == 2 and b == 2:\n        board[a - 1 - 1][b + 3 - 1] = 2\n        board[a + 2 - 1][b - 1 - 1] = 2\n    elif a == 2 and b == 7:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 3 - 1][b + 1 - 1] = 2\n    elif a == 7 and b == 2:\n        board[a + 1 - 1][b + 3 - 1] = 2\n        board[a - 2 - 1][b - 1 - 1] = 2\n    elif a == 7 and b == 7:\n        board[a + 1 - 1][b - 3 - 1] = 2\n        board[a - 2 - 1][b + 1 - 1] = 2\n    elif a == 2:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif a == 7:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif b == 2:\n        board[a - 2 - 1][b - 1 - 1] = 2\n        board[a + 2 - 1][b + 1 - 1] = 2\n    elif b == 7:\n        board[a - 2 - 1][b + 1 - 1] = 2\n        board[a + 2 - 1][b - 1 - 1] = 2\n    else:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    for i in range(8):\n        factorial(i)\n    for i in range(8):\n        for j in range(8):\n            print(board[i][j], end=' ')\n        print()", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().split())\n    x -= 1\n    y -= 1\n    ans = [[0 for i in range(8)] for j in range(8)]\n    ans[x][y] = 1\n    a = [[0, 0], [0, 7], [7, 0], [7, 7]]\n    b = [[-2, -1], [-2, +1], [-1, -2], [-1, +2], [+1, -2], [+1, +2], [+2, -1], [+2, +1]]\n    if [x, y] in a:\n        for i in range(len(b)):\n            if 0 <= x + b[i][0] <= 7 and 0 <= y + b[i][1] <= 7:\n                ans[x + b[i][0]][y + b[i][1]] = 2\n                break\n    elif x == 0:\n        ans[x + 2][y - 1] = 2\n        ans[x + 2][y + 1] = 2\n    elif x == 7:\n        ans[x - 2][y - 1] = 2\n        ans[x - 2][y + 1] = 2\n    elif y == 0:\n        ans[x + 1][y + 2] = 2\n        ans[x - 1][y + 2] = 2\n    elif y == 7:\n        ans[x + 1][y - 2] = 2\n        ans[x - 1][y - 2] = 2\n    elif x == 1 and y == 1:\n        ans[x + 2][y - 1] = 2\n        ans[x - 1][y + 3] = 2\n    elif x == 1 and y == 6:\n        ans[x - 1][y - 3] = 2\n        ans[x + 2][y + 1] = 2\n    elif x == 6 and y == 1:\n        ans[x - 2][y - 1] = 2\n        ans[x + 1][y + 3] = 2\n    elif x == 6 and y == 6:\n        ans[x - 2][y + 1] = 2\n        ans[x + 1][y - 3] = 2\n    elif y == 1 or y == 6:\n        ans[x - 2][y + 1] = 2\n        ans[x + 2][y - 1] = 2\n    elif x == 1 or x == 6:\n        ans[x - 1][y - 2] = 2\n        ans[x + 1][y + 2] = 2\n    else:\n        ans[x - 1][y - 2] = 2\n        ans[x + 1][y + 2] = 2\n    for i in range(8):\n        print(*ans[i])", "import numpy as np\nfor _ in range(int(input())):\n    (x, y) = [int(i) for i in input().split()]\n    bd = np.zeros((8, 8))\n    x -= 1\n    y -= 1\n    bd[x][y] = 1\n    if x <= 0 or x >= 7 or y <= 0 or (y >= 7):\n        if x <= 5:\n            if y > 0:\n                bd[x + 2][y - 1] = 2\n            if y < 7:\n                bd[x + 2][y + 1] = 2\n            if x > 0:\n                if y <= 5:\n                    bd[x - 1][y + 2] = 2\n                else:\n                    bd[x - 1][y - 2] = 2\n        else:\n            if y > 0:\n                bd[x - 2][y - 1] = 2\n            if y < 7:\n                bd[x - 2][y + 1] = 2\n            if x < 7:\n                if y <= 5:\n                    bd[x + 1][y + 2] = 2\n                else:\n                    bd[x + 1][y - 2] = 2\n    elif x == 1 or x == 6:\n        if x >= 3:\n            if y >= 2:\n                bd[x + 1][y - 2] = 2\n                bd[x - 3][y + 1] = 2\n            else:\n                bd[x + 1][y + 2] = 2\n                bd[x - 3][y - 1] = 2\n        elif y >= 2:\n            bd[x - 1][y - 2] = 2\n            bd[x + 3][y + 1] = 2\n        else:\n            bd[x - 1][y + 2] = 2\n            bd[x + 3][y - 1] = 2\n    elif y == 1 or y == 6:\n        if y >= 3:\n            if x >= 2:\n                bd[x - 2][y + 1] = 2\n                bd[x + 1][y - 3] = 2\n            else:\n                bd[x + 2][y + 1] = 2\n                bd[x - 1][y - 3] = 2\n        elif x >= 2:\n            bd[x - 2][y - 1] = 2\n            bd[x + 1][y + 3] = 2\n        else:\n            bd[x + 2][y - 1] = 2\n            bd[x - 1][y + 3] = 2\n    else:\n        bd[x - 1][y - 2] = 2\n        bd[x + 1][y + 2] = 2\n    for i in range(8):\n        for j in range(8):\n            print(int(bd[i][j]), end=' ')\n        print()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = None\n    d = None\n    if a == 1 or a == 8:\n        c = (2 if a == 1 else 7, b + 2 if b + 2 < 9 else b - 2)\n        d = (3 if a == 1 else 6, b - 1 if 2 <= b <= 7 else 0)\n    elif b == 1 or b == 8:\n        c = (a + 2 if a + 2 < 9 else a - 2, 2 if b == 1 else 7)\n        d = (a + 1 if 2 <= a <= 7 else 0, 3 if b == 1 else 6)\n    elif a == 2 or a == 7:\n        c = (1 if a == 2 else 8, b + 2 if b + 2 < 9 else b - 2)\n        d = (a + 3 if a == 2 else a - 3, b - 1 if b < 7 else 8)\n    elif b == 2 or b == 7:\n        c = (a - 2, 1 if b == 2 else 8)\n        d = (a + 1, b + 3 if b == 2 else b - 3)\n    else:\n        c = (a - 1 if a == 3 else a + 1, b + 2)\n        d = (a + 3 if a == 3 else a - 3, b - 1)\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if i == a and j == b:\n                print('1', end=' ')\n            elif (i, j) == c or (i, j) == d:\n                print('2', end=' ')\n            else:\n                print('0', end=' ')\n        print()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    ans = []\n    for i in range(8):\n        ans.append([0] * 8)\n    ans[x - 1][y - 1] = 1\n    if x == 1:\n        if y == 1:\n            ans[2][1] = 2\n        elif y == 8:\n            ans[2][6] = 2\n        else:\n            ans[2][y] = 2\n            ans[2][y - 2] = 2\n    elif x == 8:\n        if y == 1:\n            ans[5][1] = 2\n        elif y == 8:\n            ans[5][6] = 2\n        else:\n            ans[5][y - 2] = 2\n            ans[5][y] = 2\n    elif y == 1:\n        ans[x - 2][2] = 2\n        ans[x][2] = 2\n    elif y == 8:\n        ans[x - 2][5] = 2\n        ans[x][5] = 2\n    elif y == 2:\n        if x == 2:\n            ans[3][0] = 2\n            ans[0][4] = 2\n        elif x == 7:\n            ans[3][0] = 2\n            ans[7][3] = 2\n        else:\n            ans[x + 1][y - 2] = 2\n            ans[x - 3][y] = 2\n    elif y == 7:\n        if x == 2:\n            ans[3][7] = 2\n            ans[0][3] = 2\n        elif x == 7:\n            ans[4][7] = 2\n            ans[7][3] = 2\n        else:\n            ans[x + 1][y - 2] = 2\n            ans[x - 3][y] = 2\n    else:\n        ans[x][y - 3] = 2\n        ans[x - 2][y + 1] = 2\n    for i in range(8):\n        print(*ans[i])", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    a -= 1\n    b -= 1\n    ans = []\n    if a == 0 and b == 0 or (a == 0 and b == 7) or (a == 7 and b == 0) or (a == 7 and b == 7):\n        count = 1\n    elif a == 1 and b == 1 or (a == 1 and b == 6) or (a == 6 and b == 1) or (a == 6 and b == 6):\n        count = 0\n        if a == 1 and b == 1:\n            ans = [[0, 4], [3, 0]]\n        elif a == 1 and b == 6:\n            ans = [[0, 4], [4, 7]]\n        elif a == 6 and b == 1:\n            ans = [[3, 0], [7, 3]]\n        else:\n            ans = [[4, 7], [7, 3]]\n    else:\n        count = 2\n    temp = count\n    arr = [[1, 2], [2, 1], [-1, 2], [2, -1]]\n    arr_sec = [[-1, -2], [-2, -1], [1, 2], [2, 1], [-1, 2], [-2, 1], [1, -2], [2, -1]]\n    if count == 2:\n        if a >= 1 and a <= 6 and (b >= 1) and (b <= 6):\n            for i in arr:\n                if count > 0:\n                    if a + i[0] >= 0 and a + i[0] <= 7 and (b + i[1] >= 0) and (b + i[1] <= 7) and (a - i[0] >= 0) and (a - i[0] <= 7) and (b - i[1] >= 0) and (b - i[1] <= 7):\n                        ans.append([a + i[0], b + i[1]])\n                        ans.append([a - i[0], b - i[1]])\n                        count -= 2\n                else:\n                    break\n        else:\n            for i in arr_sec:\n                if count == 0:\n                    break\n                if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                    ans.append([a + i[0], b + i[1]])\n                    count -= 1\n    else:\n        for i in arr_sec:\n            if count == 0:\n                break\n            if a + i[0] >= 0 and b + i[1] >= 0 and (a + i[0] <= 7) and (b + i[1] <= 7):\n                ans.append([a + i[0], b + i[1]])\n                count -= 1\n    mat = []\n    for i in range(8):\n        row = []\n        for j in range(8):\n            row.append(0)\n        mat.append(row)\n    mat[a][b] = 1\n    for i in ans:\n        mat[i[0]][i[1]] = 2\n    for i in mat:\n        print(*i)", "for _ in range(int(input())):\n    (a, b) = [int(x) - 1 for x in input().split()]\n    cb = []\n    c = False\n    for i in range(8):\n        cb.append([0] * 8)\n    cb[a][b] = 1\n    if a == 0 and b == 0:\n        cb[2][1] = 2\n        c = True\n    elif a == 0 and b == 7:\n        cb[1][5] = 2\n        c = True\n    elif a == 7 and b == 0:\n        cb[5][1] = 2\n        c = True\n    elif a == 7 and b == 7:\n        cb[5][6] = 2\n        c = True\n    if 'fjruirjufruif' == 3473448:\n        print('Tanmay')\n    if not c:\n        if a == 0 and b not in [0, 7]:\n            cb[2][b - 1] = 2\n            cb[2][b + 1] = 2\n            c = True\n        elif a == 7 and b not in [0, 7]:\n            cb[5][b - 1] = 2\n            cb[5][b + 1] = 2\n            c = True\n        elif b == 0 and a not in [0, 7]:\n            cb[a - 1][2] = 2\n            cb[a + 1][2] = 2\n            c = True\n        elif b == 7 and a not in [0, 7]:\n            cb[a - 1][5] = 2\n            cb[a + 1][5] = 2\n            c = True\n    if not c:\n        if a in range(1, 6) and b in range(1, 5):\n            cb[a + 2][b - 1] = 2\n            cb[a - 1][b + 3] = 2\n        elif a == 6 and b in range(1, 6):\n            cb[7][b + 2] = 2\n            cb[3][b - 1] = 2\n        elif a in range(1, 6) and b in [5, 6]:\n            cb[a + 2][b + 1] = 2\n            cb[a - 1][b - 3] = 2\n        elif a == b == 6:\n            cb[7][4] = 2\n            cb[3][7] = 2\n    for i in cb:\n        for j in i:\n            print(j, end=' ')\n        print()", "for i in range(1, 1000):\n    pass\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (x1, y1) = (0, 0)\n    (x2, y2) = (0, 0)\n    (x3, y3) = (-1, -1)\n    x1 = x - 2\n    x2 = x + 2\n    y1 = y - 1\n    y2 = y + 1\n    if x == 2:\n        x1 = x - 1\n        x2 = x + 1\n        y1 = y - 2\n        y2 = y + 2\n    if y == 2:\n        x2 = x - 2\n        y2 = y - 1\n        x1 = x + 2\n        y1 = y + 1\n    if x == 7:\n        x1 = x - 1\n        x2 = x + 1\n        y1 = y - 2\n        y2 = y + 2\n    if x == 2 and y == 2:\n        (x1, y1) = (1, 4)\n        (x2, y2) = (5, 1)\n    if x == 7 and y == 7:\n        (x1, y1) = (8, 5)\n        (x2, y2) = (4, 8)\n    if x == 2 and y == 7:\n        (x1, y1) = (1, 5)\n        (x2, y2) = (5, 8)\n    if x == 7 and y == 2:\n        (x1, y1) = (4, 1)\n        (x2, y2) = (8, 4)\n    if x == 1:\n        x1 = x2 = x + 2\n    if x == 8:\n        x1 = x2 = x - 2\n    if y == 1:\n        y1 = y2 = y + 2\n        x1 = x - 1\n        x2 = x + 1\n    if y == 8:\n        y1 = y2 = y - 2\n        x1 = x - 1\n        x2 = x + 1\n    for i in range(1, 1000):\n        pass\n    ar = []\n    for i in range(1, 9):\n        row = []\n        for j in range(1, 9):\n            if i == x1 and j == y1:\n                row.append(2)\n            elif i == x2 and j == y2:\n                row.append(2)\n            elif i == x and j == y:\n                row.append(1)\n            else:\n                row.append(0)\n        ar.append(row)\n    for i in range(1, 1000):\n        pass\n    for i in ar:\n        print(*i)", "import math\n\ndef solve():\n    (a, b) = map(int, input().split(' '))\n    a -= 1\n    b -= 1\n    lst = []\n    for i in range(8):\n        lst1 = []\n        for j in range(8):\n            lst1.append(0)\n        lst.append(lst1)\n    lst[a][b] = 1\n    if a == 0 and b == 0:\n        lst[1][2] = 2\n    elif a == 7 and b == 7:\n        lst[6][5] = 2\n    elif a == 0 and b == 7:\n        lst[1][5] = 2\n    elif a == 7 and b == 0:\n        lst[6][2] = 2\n    elif a == 0:\n        lst[a + 2][b - 1] = 2\n        lst[a + 2][b + 1] = 2\n    elif a == 7:\n        lst[a - 2][b - 1] = 2\n        lst[a - 2][b + 1] = 2\n    elif b == 0:\n        lst[a - 1][b + 2] = 2\n        lst[a + 1][b + 2] = 2\n    elif b == 7:\n        lst[a - 1][b - 2] = 2\n        lst[a + 1][b - 2] = 2\n    elif a == 6:\n        if b == 1:\n            lst[a - 3][b - 1] = 2\n            lst[a + 1][b + 2] = 2\n        else:\n            lst[a - 3][b + 1] = 2\n            lst[a + 1][b - 2] = 2\n    elif a == 1:\n        if b == 6:\n            lst[a - 1][b - 3] = 2\n            lst[a + 2][b + 1] = 2\n        else:\n            lst[a + 3][b - 1] = 2\n            lst[a - 1][b + 2] = 2\n    else:\n        lst[a - 2][b - 1] = 2\n        lst[a + 2][b + 1] = 2\n    for i in lst:\n        for j in i:\n            print(j, end=' ')\n        print()\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "for _ in range(int(input())):\n    (y, x) = map(int, input().split())\n    chess = [[0 for _ in range(8)] for _ in range(8)]\n    chess[y - 1][x - 1] = 1\n    k = 0\n    for d in [[1, 0], [0, 1], [-1, 0], [0, -1]]:\n        if 1 <= y + d[0] <= 8 and 1 <= x + d[1] <= 8:\n            k += 1\n    if k == 2:\n        for d in [[1, 2], [-1, 2], [1, -2], [-1, -2]]:\n            if 1 <= y + d[0] <= 8 and 1 <= x + d[1] <= 8:\n                chess[y + d[0] - 1][x + d[1] - 1] = 2\n                break\n    elif k == 3:\n        for d in [[[-1, 2], [1, 2]], [[-1, -2], [1, -2]], [[2, -1], [2, 1]], [[-2, -1], [-2, 1]]]:\n            if 1 <= y + d[0][0] <= 8 and 1 <= x + d[0][1] <= 8 and (1 <= y + d[1][0] <= 8) and (1 <= x + d[1][1] <= 8):\n                chess[y + d[0][0] - 1][x + d[0][1] - 1] = 2\n                chess[y + d[1][0] - 1][x + d[1][1] - 1] = 2\n                break\n    else:\n        f = False\n        for d in [[[-1, 2], [1, -2]], [[-1, -2], [1, 2]], [[2, -1], [-2, 1]], [[-2, -1], [2, 1]]]:\n            if 1 <= y + d[0][0] <= 8 and 1 <= x + d[0][1] <= 8 and (1 <= y + d[1][0] <= 8) and (1 <= x + d[1][1] <= 8):\n                chess[y + d[0][0] - 1][x + d[0][1] - 1] = 2\n                chess[y + d[1][0] - 1][x + d[1][1] - 1] = 2\n                f = True\n                break\n        if not f:\n            for d in [[[-1, 2], [3, -1]], [[-1, -2], [3, 1]], [[1, -2], [-3, 1]], [[1, 2], [-3, -1]]]:\n                if 1 <= y + d[0][0] <= 8 and 1 <= x + d[0][1] <= 8 and (1 <= y + d[1][0] <= 8) and (1 <= x + d[1][1] <= 8):\n                    chess[y + d[0][0] - 1][x + d[0][1] - 1] = 2\n                    chess[y + d[1][0] - 1][x + d[1][1] - 1] = 2\n                    break\n    for i in range(8):\n        for j in range(8):\n            print(chess[i][j], end=' ')\n        print()", "t = int(input())\nfor i in range(t):\n    chess = []\n    for i in range(8):\n        arr = [0, 0, 0, 0, 0, 0, 0, 0]\n        chess.append(arr)\n    (x, y) = map(int, input().split())\n    chess[x - 1][y - 1] = 1\n    if x == 1 and y == 1:\n        chess[1][2] = 2\n    elif x == 8 and y == 1:\n        chess[5][1] = 2\n    elif x == 8 and y == 8:\n        chess[5][6] = 2\n    elif x == 1 and y == 8:\n        chess[2][6] = 2\n    elif x == 1:\n        chess[2][y - 2] = 2\n        chess[2][y] = 2\n    elif y == 1:\n        chess[x - 2][2] = 2\n        chess[x][2] = 2\n    elif x == 8:\n        chess[5][y - 2] = 2\n        chess[5][y] = 2\n    elif y == 8:\n        chess[x - 2][5] = 2\n        chess[x][5] = 2\n    elif x == 2 and y == 2:\n        chess[0][3] = 2\n        chess[4][0] = 2\n    elif x == 2 and y == 7:\n        chess[0][4] = 2\n        chess[4][7] = 2\n    elif x == 7 and y == 2:\n        chess[7][3] = 2\n        chess[3][0] = 2\n    elif x == 7 and y == 7:\n        chess[7][4] = 2\n        chess[3][7] = 2\n    elif x > 2 and x != 7:\n        chess[x - 3][y - 2] = 2\n        chess[x + 1][y] = 2\n    elif y > 2:\n        chess[x - 2][y - 3] = 2\n        chess[x][y + 1] = 2\n    for i in range(8):\n        for j in range(8):\n            print(chess[i][j], end=' ')\n        print()", "t = int(input())\nfor _ in range(t):\n    arr = [[0 for i in range(8)] for j in range(8)]\n    (A, B) = map(int, input().split())\n    x1 = 0\n    y1 = 0\n    x2 = 0\n    y2 = 0\n    if A == 1 and B == 1:\n        arr[0][0] = 1\n        arr[2][1] = 2\n    elif A == 1 and B == 8:\n        arr[0][7] = 1\n        arr[2][6] = 2\n    elif A == 8 and B == 8:\n        arr[7][7] = 1\n        arr[5][6] = 2\n    elif A == 8 and B == 1:\n        arr[7][0] = 1\n        arr[5][1] = 2\n    elif B == 1:\n        arr[A - 1][0] = 1\n        arr[A - 2][B + 1] = 2\n        arr[A][B + 1] = 2\n    elif B == 8:\n        arr[A - 1][7] = 1\n        arr[A - 2][5] = 2\n        arr[A][5] = 2\n    elif A == 8:\n        arr[7][B - 1] = 1\n        arr[5][B - 2] = 2\n        arr[5][B] = 2\n    elif A == 1:\n        arr[0][B - 1] = 1\n        arr[2][B - 2] = 2\n        arr[2][B] = 2\n    elif B <= 5 and A <= 6:\n        arr[A - 1][B - 1] = 1\n        arr[A - 2][B + 2] = 2\n        arr[A + 1][B - 2] = 2\n    elif B > 5 and A <= 6:\n        arr[A - 1][B - 1] = 1\n        arr[A - 2][B - 4] = 2\n        arr[A + 1][B] = 2\n    elif B <= 5 and A == 7:\n        arr[A - 1][B - 1] = 1\n        arr[A][B + 2] = 2\n        arr[A - 3][B - 2] = 2\n    elif B > 5 and A == 7:\n        arr[A - 1][B - 1] = 1\n        arr[A][B - 4] = 2\n        arr[A - 3][B] = 2\n    print(*arr[0])\n    print(*arr[1])\n    print(*arr[2])\n    print(*arr[3])\n    print(*arr[4])\n    print(*arr[5])\n    print(*arr[6])\n    print(*arr[7])", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    if n == 1 and m == 1:\n        xx = [[1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 1 and m == 2:\n        xx = [[0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 1 and m == 3:\n        xx = [[0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 1 and m == 4:\n        xx = [[0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 1 and m == 5:\n        xx = [[0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 1 and m == 6:\n        xx = [[0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 1 and m == 7:\n        xx = [[0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 1 and m == 8:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 2 and m == 1:\n        xx = [[0, 0, 2, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 2 and m == 2:\n        xx = [[0, 0, 0, 0, 2, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 2 and m == 3:\n        xx = [[2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 2 and m == 4:\n        xx = [[0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 2 and m == 5:\n        xx = [[0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 2 and m == 6:\n        xx = [[0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 2 and m == 7:\n        xx = [[0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 2 and m == 8:\n        xx = [[0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 3 and m == 1:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 3 and m == 2:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 3 and m == 3:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 3 and m == 4:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 3 and m == 5:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 3 and m == 6:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 3 and m == 7:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 3 and m == 8:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 4 and m == 1:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 4 and m == 2:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 4 and m == 3:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 4 and m == 4:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 4 and m == 5:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 4 and m == 6:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 4 and m == 7:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 4 and m == 8:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 5 and m == 1:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 5 and m == 2:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 5 and m == 3:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 5 and m == 4:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 5 and m == 5:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 5 and m == 6:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 5 and m == 7:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 5 and m == 8:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 6 and m == 1:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 6 and m == 2:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 6 and m == 3:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 6 and m == 4:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 6 and m == 5:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 6 and m == 6:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 6 and m == 7:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2]]\n    if n == 6 and m == 8:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0]]\n    if n == 7 and m == 1:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0]]\n    if n == 7 and m == 2:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0]]\n    if n == 7 and m == 3:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 0, 0]]\n    if n == 7 and m == 4:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 0]]\n    if n == 7 and m == 5:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0]]\n    if n == 7 and m == 6:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2]]\n    if n == 7 and m == 7:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0], [0, 0, 0, 0, 2, 0, 0, 0]]\n    if n == 7 and m == 8:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1], [0, 0, 0, 0, 0, 2, 0, 0]]\n    if n == 8 and m == 1:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0]]\n    if n == 8 and m == 2:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [2, 0, 2, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 0, 0, 0]]\n    if n == 8 and m == 3:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 2, 0, 2, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0]]\n    if n == 8 and m == 4:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2, 0, 2, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 1, 0, 0, 0, 0]]\n    if n == 8 and m == 5:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2, 0, 2, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 1, 0, 0, 0]]\n    if n == 8 and m == 6:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 1, 0, 0]]\n    if n == 8 and m == 7:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2, 0, 2], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0]]\n    if n == 8 and m == 8:\n        xx = [[0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 1]]\n    for j in xx:\n        print(*j)", "case = int(input())\nfor z in range(case):\n    board = []\n    for i in range(8):\n        lst = []\n        for j in range(8):\n            lst.append(0)\n        board.append(lst)\n    (x, y) = map(int, input().split(' '))\n    a = x\n    b = y\n    board[a - 1][b - 1] = 1\n    if a == 1 and b == 1:\n        board[2 - 1][3 - 1] = 2\n    elif a == 1 and b == 8:\n        board[2 - 1][6 - 1] = 2\n    elif a == 8 and b == 1:\n        board[7 - 1][3 - 1] = 2\n    elif a == 8 and b == 8:\n        board[7 - 1][6 - 1] = 2\n    elif a == 1:\n        board[a + 2 - 1][b - 1 - 1] = 2\n        board[a + 2 - 1][b + 1 - 1] = 2\n    elif a == 8:\n        board[a - 2 - 1][b - 1 - 1] = 2\n        board[a - 2 - 1][b + 1 - 1] = 2\n    elif b == 1:\n        board[a - 1 - 1][b + 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif b == 8:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b - 2 - 1] = 2\n    elif a == 2 and b == 2:\n        board[a - 1 - 1][b + 3 - 1] = 2\n        board[a + 2 - 1][b - 1 - 1] = 2\n    elif a == 2 and b == 7:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 3 - 1][b + 1 - 1] = 2\n    elif a == 7 and b == 2:\n        board[a + 1 - 1][b + 3 - 1] = 2\n        board[a - 2 - 1][b - 1 - 1] = 2\n    elif a == 7 and b == 7:\n        board[a + 1 - 1][b - 3 - 1] = 2\n        board[a - 2 - 1][b + 1 - 1] = 2\n    elif a == 2:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif a == 7:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    elif b == 2:\n        board[a - 2 - 1][b - 1 - 1] = 2\n        board[a + 2 - 1][b + 1 - 1] = 2\n    elif b == 7:\n        board[a - 2 - 1][b + 1 - 1] = 2\n        board[a + 2 - 1][b - 1 - 1] = 2\n    else:\n        board[a - 1 - 1][b - 2 - 1] = 2\n        board[a + 1 - 1][b + 2 - 1] = 2\n    for i in range(8):\n        for j in range(8):\n            print(board[i][j], end=' ')\n        print()", "def test():\n    N = list(map(int, input().split()))\n    x = N[0]\n    y = N[1]\n    q = []\n    if x != 1 and x != 8 and (y != 1) and (y != 8):\n        if x <= 4 and y <= 4:\n            q.append((x + 2, y - 1))\n            q.append((x - 1, y + 3))\n        if x <= 4 and y > 4:\n            q.append((x + 2, y + 1))\n            q.append((x - 1, y - 3))\n        if x > 4 and y > 4:\n            q.append((x + 1, y - 2))\n            q.append((x - 3, y + 1))\n        if x > 4 and y <= 4:\n            q.append((x - 2, y - 1))\n            q.append((x + 1, y + 3))\n    elif x == 1 and y == 1:\n        q.append((3, 2))\n    elif x == 1 and y == 8:\n        q.append((2, 6))\n    elif x == 8 and y == 1:\n        q.append((6, 2))\n    elif x == 8 and y == 8:\n        q.append((6, 7))\n    elif x == 1:\n        if y < 7:\n            q.append((3, y - 1))\n            q.append((2, y + 2))\n        else:\n            q.append((3, y + 1))\n            q.append((2, y - 2))\n    elif x == 8:\n        if y < 7:\n            q.append((6, y - 1))\n            q.append((7, y + 2))\n        else:\n            q.append((7, y - 2))\n            q.append((6, y + 1))\n    elif y == 1:\n        if x < 7:\n            q.append((x - 1, 3))\n            q.append((x + 2, 2))\n        else:\n            q.append((x + 1, 3))\n            q.append((x - 2, 2))\n    elif y == 8:\n        if x < 7:\n            q.append((x - 1, 6))\n            q.append((x + 2, 7))\n        else:\n            q.append((x - 2, 7))\n            q.append((x + 1, 6))\n    else:\n        print('prob')\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if (i, j) in q:\n                print(2, end=' ')\n            elif i == x and j == y:\n                print(1, end=' ')\n            else:\n                print(0, end=' ')\n        print()\n    print()\ntests = int(input())\nfor i in range(tests):\n    test()", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    cboard = [[0 for i in range(8)] for j in range(8)]\n    cboard[a - 1][b - 1] = 1\n    if a == 2 and b == 2:\n        cboard[3][0] = 2\n        cboard[0][4] = 2\n    elif a == 2 and b == 7:\n        cboard[3][7] = 2\n        cboard[0][3] = 2\n    elif a == 7 and b == 2:\n        cboard[4][0] = 2\n        cboard[7][4] = 2\n    elif a == 7 and b == 7:\n        cboard[4][7] = 2\n        cboard[7][3] = 2\n    elif a == 1 and b == 1:\n        cboard[2][1] = 2\n    elif a == 8 and b == 1:\n        cboard[-3][1] = 2\n    elif a == 8 and b == 8:\n        cboard[-3][-2] = 2\n    elif a == 1 and b == 8:\n        cboard[2][-2] = 2\n    elif a == 1:\n        cboard[2][b] = 2\n        cboard[2][b - 2] = 2\n    elif a == 8:\n        cboard[-3][b] = 2\n        cboard[-3][b - 2] = 2\n    elif b == 1:\n        cboard[a][2] = 2\n        cboard[a - 2][2] = 2\n    elif b == 8:\n        cboard[a][-3] = 2\n        cboard[a - 2][-3] = 2\n    elif a + 1 < 8 and a - 3 >= 0:\n        cboard[a + 1][b] = 2\n        cboard[a - 3][b - 2] = 2\n    else:\n        cboard[a][b + 1] = 2\n        cboard[a - 2][b - 3] = 2\n    for row in cboard:\n        print(*row)", "I = lambda : list(map(int, input().split()))\n(t,) = I()\nfor i in range(t):\n    (a, b) = I()\n    op = [[-2, -1], [2, 1], [2, -1], [-2, 1]]\n    rop = [[1, 2], [-1, -2], [1, -2], [-1, 2]]\n    chess = [[0] * 8 for i in range(8)]\n    chess[a - 1][b - 1] = 1\n    pos = 0\n    ix = 0\n    vis = set()\n    for (dy, dx) in [[-1, -1], [-1, 1], [1, -1], [1, 1], [0, 1], [0, -1], [1, 0], [-1, 0]]:\n        (x, y) = (a + dx, b + dy)\n        if x >= 1 and y >= 1 and (x <= 8) and (y <= 8):\n            vis.add((x, y))\n    noice = set(vis)\n    ans = []\n    for (dy, dx) in op + rop if 1 not in [x, y] else rop + op:\n        (x, y) = (a + dx, b + dy)\n        if x >= 1 and y >= 1 and (x <= 8) and (y <= 8):\n            cs = len(vis)\n            new = set(vis)\n            for i in vis:\n                (mx, my) = i\n                if mx == x or my == y or x + y == mx + my or (x - y == mx - my):\n                    new.remove(i)\n            if len(new) < cs:\n                ans.append((x, y))\n                vis = set(new)\n    if len(ans) == 3:\n        na = []\n        for i in ans:\n            (x, y) = (i[1], i[0])\n            if i == (4, 1):\n                (x, y) = (1, 5)\n            elif i == (1, 5):\n                (x, y) = (5, 8)\n            if i == (5, 1):\n                (x, y) = (8, 5)\n            elif i == (8, 5):\n                (x, y) = (4, 8)\n            if x >= 1 and y >= 1 and (x <= 8) and (y <= 8) and ([x, y] != [i[1], i[0]]):\n                na.append((x, y))\n                na.append(i)\n                break\n        ans = na\n        if not ans:\n            vis = set(noice)\n            for (dy, dx) in rop:\n                (x, y) = (a + dx, b + dy)\n                if x >= 1 and y >= 1 and (x <= 8) and (y <= 8):\n                    cs = len(vis)\n                    new = set(vis)\n                    for i in vis:\n                        (mx, my) = i\n                        if mx == x or my == y or x + y == mx + my or (x - y == mx - my):\n                            new.remove(i)\n                    if len(new) < cs:\n                        ans.append((x, y))\n                        vis = set(new)\n    for (x, y) in ans:\n        chess[x - 1][y - 1] = 2\n    for i in chess:\n        print(*i)", "import math\nimport itertools\nimport heapq\nfrom math import floor, ceil\nfrom collections import deque\nimport sys\nfrom collections import Counter\nI = lambda : list(map(int, input().split()))\nM = lambda : map(int, input().split())\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 6)\nMOD = 10 ** 9 + 7\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef isSubsequence(s, t):\n    for i in range(0, len(s)):\n        try:\n            index = t.index(s[i])\n        except ValueError:\n            return False\n        t = t[index + 1:]\n    return True\n\ndef bisect_right(a, x):\n    (lo, hi) = (0, len(a))\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if a[mid] > x:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n\ndef bisect_left(a, x):\n    (lo, hi) = (0, len(a))\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n\ndef binary_search(nums, target):\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot = left + (right - left) // 2\n        if nums[pivot] == target:\n            return pivot\n        if target < nums[pivot]:\n            right = pivot - 1\n        else:\n            left = pivot + 1\n    return -1\n\ndef prefixSum(arr):\n    dp = [arr[0]]\n    arrLen = len(arr)\n    for i in range(1, arrLen):\n        dp.append(dp[-1] + arr[i])\n    return dp\n\ndef suffixSum(arr):\n    arrLen = len(arr)\n    dp = [0] * arrLen\n    dp[-1] = arr[-1]\n    for i in range(N - 2, -1, -1):\n        dp[i] = dp[i + 1] + arr[i]\n    return dp\n\ndef fun():\n    return\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(n - r)\n\ndef solve():\n    (i, j) = M()\n    mat = []\n    for x in range(8):\n        tmp = []\n        for y in range(8):\n            tmp.append(0)\n        mat.append(tmp)\n    i -= 1\n    j -= 1\n    coveredrow = set()\n    coveredcol = set()\n    mat[i][j] = 1\n    c = 0\n    if i == 0 and j == 0:\n        mat[i + 1][j + 2] = 2\n    elif i == 0 and j == 7:\n        mat[i + 1][j - 2] = 2\n    elif i == 7 and j == 0:\n        mat[i - 1][j + 2] = 2\n    elif i == 7 and j == 7:\n        mat[i - 1][j - 2] = 2\n    elif i == 0:\n        mat[i + 2][j - 1] = 2\n        mat[i + 2][j + 1] = 2\n    elif i == 7:\n        mat[i - 2][j - 1] = 2\n        mat[i - 2][j + 1] = 2\n    elif j == 0:\n        mat[i + 1][j + 2] = 2\n        mat[i - 1][j + 2] = 2\n    elif j == 7:\n        mat[i + 1][j - 2] = 2\n        mat[i - 1][j - 2] = 2\n    else:\n        poss = [[(i + 1, j - 2), (i - 3, j + 1)], [(i + 1, j + 2), (i - 3, j - 1)], [(i - 1, j + 2), (i + 3, j - 1)], [(i - 1, j - 2), (i + 3, j + 1)]]\n        for X in poss:\n            (r1, c1) = (X[0][0], X[0][1])\n            (r2, c2) = (X[1][0], X[1][1])\n            if 0 <= r1 <= 7 and 0 <= r2 <= 7 and (0 <= c1 <= 7) and (0 <= c2 <= 7):\n                mat[r1][c1] = 2\n                mat[r2][c2] = 2\n                break\n    for x in range(8):\n        print(' '.join([str(i) for i in mat[x]]))\nTC = 1\nTC = int(input())\nfor testcases in range(TC):\n    solve()", "test = int(input())\nfor _ in range(test):\n    (n, m) = map(int, input().split())\n    if n == 1 and (m == 1 or m == 8):\n        if m == 1:\n            i = n + 1\n            j = m + 2\n        if m == 8:\n            i = n + 1\n            j = m - 2\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')\n    elif n == 8 and (m == 1 or m == 8):\n        if m == 1:\n            i = n - 1\n            j = m + 2\n        if m == 8:\n            i = n - 1\n            j = m - 2\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')\n    elif n == 1 and m != 1 and (m != 8):\n        i = n + 2\n        j = m - 1\n        j2 = m + 1\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                elif k == i and l == j2:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')\n    elif n == 8 and m != 1 and (m != 8):\n        i = n - 2\n        j = m - 1\n        j2 = m + 1\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                elif k == i and l == j2:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')\n    elif m == 1 and n != 1 and (n != 8):\n        i = n + 1\n        i2 = n - 1\n        j = m + 2\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                elif k == i2 and l == j:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')\n    elif m == 8 and n != 1 and (n != 8):\n        i = n + 1\n        i2 = n - 1\n        j = m - 2\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                elif k == i2 and l == j:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')\n    elif n == 2 and m == 2 or (n == 2 and m == 7) or (n == 7 and m == 2) or (n == 7 and m == 7):\n        if n == 2 and m == 2:\n            i = 1\n            j = 5\n            i2 = 4\n            j2 = 1\n        if n == 2 and m == 7:\n            i = 1\n            j = 5\n            i2 = 5\n            j2 = 8\n        if n == 7 and m == 2:\n            i = 8\n            j = 4\n            i2 = 4\n            j2 = 1\n        if n == 7 and m == 7:\n            i = 8\n            j = 5\n            i2 = 4\n            j2 = 8\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                elif k == i2 and l == j2:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')\n    elif n == 2 or n == 7:\n        i = n + 1\n        i2 = n - 1\n        j = m + 2\n        j2 = m - 2\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                elif k == i2 and l == j2:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')\n    else:\n        i = n + 2\n        i2 = n - 2\n        j = m + 1\n        j2 = m - 1\n        for k in range(1, 9):\n            for l in range(1, 9):\n                if k == n and l == m:\n                    print('1', end=' ')\n                elif k == i and l == j:\n                    print('2', end=' ')\n                elif k == i2 and l == j2:\n                    print('2', end=' ')\n                else:\n                    print('0', end=' ')\n            print('')", "def sq(a, b, q):\n    global printed\n    printed = True\n    for i in range(8):\n        for j in range(8):\n            if (i, j) == (a, b):\n                print(1, '', end='')\n            elif (i, j) in q:\n                print(2, '', end='')\n            else:\n                print(0, '', end='')\n        print()\n\ndef corner(a, b):\n    if a == 1:\n        if b == 1:\n            sq(a - 1, b - 1, [(1, 2)])\n        elif b == 8:\n            sq(a - 1, b - 1, [(1, 5)])\n    elif a == 8:\n        if b == 1:\n            sq(a - 1, b - 1, [(6, 2)])\n        elif b == 8:\n            sq(a - 1, b - 1, [(6, 5)])\n\ndef edge(a, b):\n    if a == 1:\n        sq(a - 1, b - 1, [(a + 1, b - 2), (a + 1, b)])\n    elif a == 8:\n        sq(a - 1, b - 1, [(a - 3, b - 2), (a - 3, b)])\n    elif b == 1:\n        sq(a - 1, b - 1, [(a - 2, b + 1), (a, b + 1)])\n    elif b == 8:\n        sq(a - 1, b - 1, [(a - 2, b - 3), (a, b - 3)])\n\ndef final(a, b):\n    if (a, b) == (2, 2):\n        q = [(3, 0), (0, 4)]\n        sq(a - 1, b - 1, q)\n        return\n    elif (a, b) == (2, 7):\n        q = [(3, 7), (0, 3)]\n        sq(a - 1, b - 1, q)\n        return\n    elif (a, b) == (7, 2):\n        q = [(7, 3), (3, 0)]\n        sq(a - 1, b - 1, q)\n        return\n    elif (a, b) == (7, 7):\n        q = [(7, 3), (4, 7)]\n        sq(a - 1, b - 1, q)\n        return\n\ndef final2(a, b):\n    if a == 2:\n        q1 = (0, b + 1)\n        q2 = (2, b - 3)\n    elif a == 7:\n        q1 = (5, b + 1)\n        q2 = (7, b - 3)\n    elif b == 2:\n        q1 = (a + 1, 0)\n        q2 = (a - 3, 2)\n    elif b == 7:\n        q1 = (a + 1, 5)\n        q2 = (a - 3, 7)\n    else:\n        q1 = (a, b + 1)\n        q2 = (a - 2, b - 3)\n    sq(a - 1, b - 1, [q1, q2])\nt = int(input())\nfor _ in range(t):\n    printed = False\n    (a, b) = map(int, input().split())\n    corner(a, b)\n    if not printed:\n        edge(a, b)\n    if not printed:\n        final(a, b)\n    if not printed:\n        final2(a, b)", "t = int(input())\nfor _ in range(t):\n\n    def retx(ret, x, y):\n        if x > 1 and x < 6 and (y > 1) and (y < 6):\n            ret[x - 1][y - 2] = 2\n            ret[x + 1][y + 2] = 2\n        if x == 0:\n            if y == 0:\n                ret[2][1] = 2\n            elif y == 7:\n                ret[2][6] = 2\n            else:\n                ret[2][y - 1] = 2\n                ret[2][y + 1] = 2\n            return ret\n        if x == 7:\n            if y == 0:\n                ret[5][1] = 2\n            elif y == 7:\n                ret[5][6] = 2\n            else:\n                ret[5][y - 1] = 2\n                ret[5][y + 1] = 2\n            return ret\n        if y == 0:\n            ret[x - 1][2] = 2\n            ret[x + 1][2] = 2\n            return ret\n        if y == 7:\n            ret[x - 1][5] = 2\n            ret[x + 1][5] = 2\n            return ret\n        if x == 1:\n            if y == 1:\n                ret[3][0] = 2\n                ret[0][4] = 2\n            elif y == 6:\n                ret[3][7] = 2\n                ret[0][3] = 2\n            else:\n                ret[x - 1][y - 2] = 2\n                ret[x + 1][y + 2] = 2\n            return ret\n        if x == 6:\n            if y == 1:\n                ret[4][0] = 2\n                ret[7][4] = 2\n            elif y == 6:\n                ret[4][7] = 2\n                ret[7][3] = 2\n            else:\n                ret[x - 1][y - 2] = 2\n                ret[x + 1][y + 2] = 2\n            return ret\n        if y == 6:\n            ret[x - 2][7] = 2\n            ret[x + 2][5] = 2\n        elif y == 1:\n            ret[x - 2][0] = 2\n            ret[x + 2][2] = 2\n        return ret\n    (x, y) = map(int, input().split())\n    (x, y) = (x - 1, y - 1)\n    rett = [[0 for i in range(8)] for j in range(8)]\n    rett[x][y] = 1\n    rett = retx(rett, x, y)\n    for i in rett:\n        print(' '.join(map(str, i)))", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    ans = [[0 for _ in range(8)] for _ in range(8)]\n    x -= 1\n    y -= 1\n    ans[x][y] = 1\n\n    def solve(i, j, tar):\n        c = p = 0\n        dir = [(2, 1), (2, -1), (1, -2), (1, 2), (-1, 2), (-1, -2), (-2, -1), (-2, 1)]\n        while c < tar:\n            (x, y) = dir[p]\n            (ni, nj) = (i + x, j + y)\n            if 0 <= ni < 8 and 0 <= nj < 8:\n                ans[ni][nj] = 2\n                c += 1\n            p += 1\n    if [x, y] in [[0, 0], [7, 7], [0, 7], [7, 0]]:\n        solve(x, y, 1)\n    elif x == 0 or y == 0 or x == 7 or (y == 7):\n        solve(x, y, 2)\n    elif x == 1 and y == 1:\n        ans[4][0] = 2\n        ans[0][3] = 2\n    elif x == 6 and y == 6:\n        ans[7][4] = 2\n        ans[3][7] = 2\n    elif x == 1 and y == 6:\n        ans[3][7] = 2\n        ans[0][3] = 2\n    elif x == 6 and y == 1:\n        ans[3][0] = 2\n        ans[7][3] = 2\n    else:\n        dir = [(2, 1), (2, -1), (1, -2), (1, 2), (-1, 2), (-1, -2), (-2, -1), (-2, 1)]\n        for (i, j) in dir:\n            (nx1, ny1) = (x + i, y + j)\n            (nx2, ny2) = (x - i, y - j)\n            if 0 <= nx1 < 8 and 0 <= nx2 < 8 and (0 <= ny1 < 8) and (0 <= ny2 < 8):\n                ans[nx1][ny1] = 2\n                ans[nx2][ny2] = 2\n                (nx, ny) = (x - i, y - j)\n                break\n    for row in ans:\n        print(*row)"]