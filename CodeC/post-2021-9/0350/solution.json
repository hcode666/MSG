["n = int(input())\nfor _ in range(n):\n    (x, y) = map(int, input().split())\n    n = x - 1\n    s = n * (n + 1) // 2\n    a = n - y\n    m = 0\n    if a != 0 and a > 0:\n        m = m + y\n        q = (a + 1) * (a + 2) // 2\n        e = q - 1\n        m = m + e\n    elif a == 0:\n        m = y\n    else:\n        m = x - 1\n    print(s, m)", "n = int(input())\nfor _ in range(n):\n    (x, y) = map(int, input().split())\n    n = x - 1\n    s = n * (n + 1) // 2\n    a = n - y\n    m = 0\n    if a != 0 and a > 0:\n        m = m + y\n        q = (a + 1) * (a + 2) // 2\n        e = q - 1\n        m = m + e\n    elif a == 0:\n        m = y\n    else:\n        m = x - 1\n    print(s, m)", "n = int(input())\nfor _ in range(n):\n    (x, y) = map(int, input().split())\n    n = x - 1\n    s = n * (n + 1) // 2\n    a = n - y\n    m = 0\n    if a != 0 and a > 0:\n        m = m + y\n        q = (a + 1) * (a + 2) // 2\n        e = q - 1\n        m = m + e\n    elif a == 0:\n        m = y\n    else:\n        m = x - 1\n    print(s, m)", "n = int(input())\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    n = x - 1\n    s = n * (n + 1) // 2\n    a = n - y\n    m = 0\n    if a != 0 and a > 0:\n        m = m + y\n        q = (a + 1) * (a + 2) // 2\n        e = q - 1\n        m = m + e\n    elif a == 0:\n        m = y\n    else:\n        m = x - 1\n    print(s, m)", "n = int(input())\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    n = x - 1\n    s = n * (n + 1) // 2\n    a = n - y\n    m = 0\n    if a != 0 and a > 0:\n        m = m + y\n        q = (a + 1) * (a + 2) // 2\n        e = q - 1\n        m = m + e\n    elif a == 0:\n        m = y\n    else:\n        m = x - 1\n    print(s, m)", "t = int(input())\nfor i in range(t):\n    (n, v) = map(int, input().split())\n    l = []\n    m = n * (n - 1) // 2\n    if v >= n - 1:\n        a = n - 1\n    else:\n        a = v - 1 + (n - v) * (n - v + 1) // 2\n    l.append(int(m))\n    l.append(int(a))\n    print(*l, sep=' ')", "t = int(input())\nfor i in range(t):\n    (n, v) = map(int, input().split())\n    arr = []\n    maxi = n * (n - 1) // 2\n    if v >= n - 1:\n        lo = n - 1\n    else:\n        lo = v - 1 + (n - v) * (n - v + 1) // 2\n    arr.append(int(maxi))\n    arr.append(int(lo))\n    print(*arr, sep=' ')", "t = int(input())\nwhile t:\n    t -= 1\n    (n, v) = map(int, input().split())\n    if v == 1:\n        print((n - 1) * n // 2, (n - 1) * n // 2)\n    elif n <= v:\n        ans = n - 1\n        print((n - 1) * n // 2, ans)\n    else:\n        ans = v - 1 + (n - v) * (n - v + 1) // 2\n        print((n - 1) * n // 2, ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, v) = map(int, input().split())\n    if v == 1:\n        print((n - 1) * n // 2, (n - 1) * n // 2)\n    elif n <= v:\n        ans = n - 1\n        print((n - 1) * n // 2, ans)\n    else:\n        ans = v - 1 + (n - v) * (n - v + 1) // 2\n        print((n - 1) * n // 2, ans)", "t = int(input())\nfor tc in range(0, t):\n    (n, v) = [int(i) for i in input().split()]\n    maxi = n * (n - 1) // 2\n    mini = (n - v) * (n - v + 1) // 2 + (v - 1)\n    if v >= n - 1:\n        mini = n - 1\n    print(maxi, mini)", "for _ in range(int(input())):\n    (N, V) = list(map(int, input().split()))\n    max = int((N - 1) * N // 2)\n    if V >= N - 1:\n        min = N - 1\n    else:\n        min = int(V + (N - V - 1) * (2 + (N - V)) // 2)\n    print(max, min)", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxp = (n - 1) * n // 2\n    minp = 0\n    if v == 1:\n        minp = maxp\n    elif v >= n - 1:\n        minp = n - 1\n    else:\n        minp += v + (n - v) * (n - v + 1) // 2 - 1\n    print(maxp, minp)", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxp = (n - 1) * n // 2\n    minp = 0\n    if v == 1:\n        minp = maxp\n    elif v >= n - 1:\n        minp = n - 1\n    else:\n        minp += v + (n - v) * (n - v + 1) // 2 - 1\n    print(maxp, minp)", "t = int(input())\nwhile t:\n    (n, v) = map(int, input().split())\n    if v >= n - 1:\n        print(n * (n - 1) // 2, end=' ')\n        print(n - 1)\n    else:\n        x = n - 1 - v\n        sum = v + x * (3 + x) // 2\n        print(n * (n - 1) // 2, end=' ')\n        print(sum)\n    t = t - 1", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, v) = map(int, input().split())\n    mx = (n - 1) * n // 2\n    mn = 0\n    if v >= n - 1:\n        mn = min(v, n - 1)\n    else:\n        v1 = n - v\n        mn = v + (v1 * (v1 + 1) // 2 - 1)\n    print(mx, mn)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, v) = map(int, input().split())\n    mx = (n - 1) * n // 2\n    mn = 0\n    if v >= n - 1:\n        mn = min(v, n - 1)\n    else:\n        v1 = n - v\n        mn = v + (v1 * (v1 + 1) // 2 - 1)\n    print(mx, mn)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, v) = map(int, input().split())\n    mx = (n - 1) * n // 2\n    mn = 0\n    if v >= n - 1:\n        mn = min(v, n - 1)\n    else:\n        v1 = n - v\n        mn = v + (v1 * (v1 + 1) // 2 - 1)\n    print(mx, mn)", "import sys\nfor t in range(int(input())):\n    (n, v) = map(int, sys.stdin.readline().strip().split())\n    if n > v:\n        c = n - v\n        minc = v + (c - 1) * (c + 2) // 2\n        k = n - 1\n        maxc = k * (k + 1) // 2\n        print(maxc, minc)\n    else:\n        minc = n - 1\n        k = n - 1\n        maxc = k * (k + 1) // 2\n        print(maxc, minc)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    print(n * (n - 1) // 2, n * (n - 1) // 2 if v == 1 else n - 1 if v >= n - 1 else (n - v) * (n - v + 1) // 2 - 1 + v)", "def solve():\n    (N, V) = map(int, input().split())\n    n = N - 1\n    maxm = n * (n + 1) // 2\n    if N == 1:\n        print(0, 0)\n    elif V == 1:\n        print(maxm, maxm)\n    else:\n        temp = min(N - 1, V)\n        n1 = n - temp\n        n2 = n1 + 1\n        print(maxm, temp + n2 * (n2 + 1) // 2 - 1)\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "for _ in range(int(input())):\n    (n, v) = tuple(map(int, input().split()))\n    maxCost = n * (n - 1) // 2\n    if v >= n - 1:\n        minCost = n - 1\n    else:\n        k = n - v\n        minCost = v - 1 + k * (k + 1) // 2\n    print(maxCost, minCost)", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxp = (n - 1) * n // 2\n    minp = 0\n    if v == 1:\n        minp = maxp\n    elif v >= n - 1:\n        minp = n - 1\n    else:\n        minp += v + (n - v) * (n - v + 1) // 2 - 1\n    print(maxp, minp)", "for i in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    max = 0\n    min = 0\n    max = n * (n - 1) // 2\n    if k == 1:\n        min = max\n        print(min, min)\n    else:\n        if k >= n - 1:\n            min = n - 1\n        else:\n            min = (n - k) * (n - k + 1) // 2 - 1 + k\n        print(max, min)", "def chefCar(n, v):\n    maxCost = n * (n - 1) // 2\n    if v == 1:\n        minCost = maxCost\n    elif n < v:\n        minCost = n - 1\n    else:\n        x = n - v\n        minCost = v - 1 + x * (x + 1) // 2\n    print('{} {}'.format(maxCost, minCost))\nt = int(input())\nfor _ in range(t):\n    (n, v) = map(int, input().strip().split(' '))\n    chefCar(n, v)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    if v >= n - 1:\n        max_cost = n * (n - 1) // 2\n        min_cost = n - 1\n    else:\n        max_cost = n * (n - 1) // 2\n        min_cost = v + (n - v) * (n - v + 1) // 2 - 1\n    print(max_cost, min_cost)", "t = int(input())\nfor _ in range(t):\n    args = [int(x) for x in input().split(' ')]\n    (n, v) = (args[0], args[1])\n    max_value = (n - 1) * n // 2\n    if n - 1 >= v:\n        min_value = v + (n + 2 - v) * (n - v - 1) // 2\n    else:\n        min_value = n - 1\n    print(max_value, min_value, sep=' ')", "t = int(input())\nfor i in range(t):\n    (n, v) = map(int, input().split())\n    dis = n - 1\n    x = dis // v\n    y = dis % v\n    maxi = n * (n - 1) // 2\n    mini = 0\n    if v >= dis:\n        mini = dis\n    else:\n        mini = v + (n - v + 1) * (n - v) // 2 - 1\n    print(maxi, mini)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    m = n - 1\n    if v < n - 1:\n        m = v + (n - v) * (n - v + 1) // 2 - 1\n    print(n * (n - 1) // 2, m)", "tc = int(input())\nfor i in range(tc):\n    aa = input().split()\n    n = int(aa[0])\n    v = int(aa[1])\n    maxx = n * (n - 1) // 2\n    minn = 0\n    if n - 1 <= v:\n        minn = n - 1\n    else:\n        cost = v\n        gg = n - v\n        vk = gg * (gg + 1) // 2\n        minn = cost + vk - 1\n    print(maxx, end=' ')\n    print(minn)", "import io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        N = inp()\n        ans = [1]\n        for i in range(1, N):\n            ans.append(i)\n        else:\n            ans.append(2 ** N - N * (N - 1) // 2 - 1)\n        print(*ans)\n\ndef B():\n    ans = []\n    for _ in range(inp()):\n        (N, V) = invr()\n        ans.append((N * (N - 1) // 2, N - 1 if N - 1 <= V else V + (N - V) * (N - V + 1) // 2 - 1))\n    for a in ans:\n        print(*a)\nB()", "import io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        N = inp()\n        ans = [1]\n        for i in range(1, N):\n            ans.append(i)\n        else:\n            ans.append(2 ** N - N * (N - 1) // 2 - 1)\n        print(*ans)\n\ndef B():\n    ans = []\n    for _ in range(inp()):\n        (N, V) = invr()\n        ans.append((N * (N - 1) // 2, N - 1 if N - 1 <= V else V + (N - V) * (N - V + 1) // 2 - 1))\n    for a in ans:\n        outlt(a)\nB()", "import io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        N = inp()\n        ans = [1]\n        for i in range(1, N):\n            ans.append(i)\n        else:\n            ans.append(2 ** N - N * (N - 1) // 2 - 1)\n        print(*ans)\n\ndef B():\n    ans = []\n    for _ in range(inp()):\n        (N, V) = invr()\n        ans.append((N * (N - 1) // 2, N - 1 if N - 1 <= V else V + (N - V) * (N - V + 1) // 2 - 1))\n    for a in ans:\n        print(*a)\nB()", "import io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        N = inp()\n        ans = [1]\n        for i in range(1, N):\n            ans.append(i)\n        else:\n            ans.append(2 ** N - N * (N - 1) // 2 - 1)\n        print(*ans)\n\ndef B():\n    for _ in range(inp()):\n        (N, V) = invr()\n        print(N * (N - 1) // 2, N - 1 if N - 1 <= V else V + (N - V) * (N - V + 1) // 2 - 1)\nB()", "t = int(input())\nresult = []\nfor _ in range(t):\n    (n, v) = map(int, input().split(' '))\n    minn = 0\n    if v > n:\n        minn = n - 1\n    else:\n        minn = v - 1 + (n - v) * (n - v + 1) // 2\n    print(n * (n - 1) // 2, minn)", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    if v > n:\n        minm = n - 1\n    else:\n        minm = v - 1 + (n - v) * (n - v + 1) // 2\n    maxm = n * (n - 1) // 2\n    print(maxm, end=' ')\n    print(minm)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    d = n - 1\n    maxx = n * (n - 1) // 2\n    minn = n - 1\n    if v < n - 1:\n        minn = v\n        d = d - v\n        summ = (d + 2) * (d + 1) // 2\n        summ = summ - 1\n        minn = minn + summ\n    print(maxx, minn)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nt = int(input())\nfor _ in range(t):\n    (n, v) = map(int, input().split())\n    print(n * (n - 1) // 2, end=' ')\n    if v >= n - 1:\n        print(n - 1)\n    else:\n        print(n * (n - 1) // 2 - ((v - 1) * n - (v - 1) * v // 2) + (v - 1))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if True:\n        print(n * (n - 1) // 2, end=' ')\n        tobe = max(1, n - k)\n        if tobe == 1:\n            print(n - 1)\n            continue\n        ans = k\n        ans = ans + tobe * (tobe + 1) // 2 - 1\n        print(ans)\n        continue", "try:\n    for t in range(int(input())):\n        (N, V) = map(int, input().split())\n        maximum = N * (N - 1) // 2\n        minimum = N - 1\n        maximum = int(maximum)\n        if V < N - 1:\n            minimum = V - 1 + (N - V) * (N - V + 1) // 2\n        minimum = int(minimum)\n        print(maximum, minimum)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    mx = (n - 1) * n // 2\n    if n < v:\n        print(mx, n - 1)\n        continue\n    mn = v - 1 + (n - v) * (n - v + 1) // 2\n    print(mx, mn)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxo = n * (n - 1) // 2\n    price = 0\n    fuel = 0\n    k = 1\n    if v == 1:\n        mino = maxo\n        print(mino, maxo)\n    else:\n        if v >= n:\n            price += n - 1\n        else:\n            price = v + (n - v + 1) * (n - v) // 2 - 1\n        print(maxo, price)", "t = int(input())\nfor _ in range(t):\n    (n, v) = map(int, input().split())\n    if v >= n - 1:\n        min_cost = n - 1\n    else:\n        l = (n - 1 - v) * (4 + (n - 1 - v - 1)) // 2\n        min_cost = v + l\n    max_cost = (n - 1) * n // 2\n    print(max_cost, min_cost)", "for _ in range(int(input())):\n    (n, v) = [int(i) for i in input().split()]\n    maxValue = (n - 1) * n // 2\n    if n <= v:\n        print(str(maxValue) + ' ' + str(n - 1))\n        continue\n    minValue = v + (n - v) * (n - v + 1) // 2 - 1\n    print(str(maxValue) + ' ' + str(minValue))", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxi = n * (n - 1) // 2\n    mini = 0\n    if n - 1 <= v:\n        mini += n - 1\n    else:\n        mini += v + (n - v) * (n - v + 1) // 2 - 1\n    if v == 1:\n        print(maxi, maxi)\n    else:\n        print(maxi, mini)", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxi = n * (n - 1) // 2\n    mini = 0\n    if n - 1 <= v:\n        mini += n - 1\n    else:\n        mini += v + (n - v) * (n - v + 1) // 2 - 1\n    if v == 1:\n        print(maxi, maxi)\n    else:\n        print(maxi, mini)", "for t in range(int(input())):\n    (n, v) = map(int, input().split())\n    mi = 0\n    ma = n * (n - 1) // 2\n    if v == 1:\n        print(ma, ma)\n    else:\n        if v >= n - 1:\n            mi = n - 1\n        else:\n            mi += v + (n - v) * (n - v + 1) // 2 - 1\n        print(ma, mi)", "for t in range(int(input())):\n    (n, v) = map(int, input().split())\n    mi = 0\n    ma = n * (n - 1) // 2\n    i = 1\n    d = n - 1\n    if v == 1:\n        print(ma, ma)\n    else:\n        if v >= n - 1:\n            mi = n - 1\n        else:\n            mi += v + (n - v) * (n - v + 1) // 2 - 1\n        print(ma, mi)", "import sys\nimport math\nfrom collections import defaultdict\nmod = 1000000007\nT = 1\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    (n, v) = map(int, input().split())\n    a = n * (n - 1) >> 1\n    b = 0\n    if v + 1 >= n:\n        b = n - 1\n    else:\n        t = n - v\n        b = t * (t + 1)\n        b >>= 1\n        b += v - 1\n    print(a, b)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k >= n:\n        mini = n - 1\n        n = n - 1\n        maxi = n * (n + 1) // 2\n    else:\n        l = n - k\n        n = n - 1\n        maxi = n * (n + 1) // 2\n        mini = l * (l + 1) // 2 + (k - 1)\n    print(maxi, mini)", "t = int(input())\nwhile t != 0:\n    (n, v) = map(int, input().split())\n    if v == 1:\n        print(n * (n - 1) // 2, n * (n - 1) // 2)\n    elif v >= n - 1:\n        print(n * (n - 1) // 2, n - 1)\n    else:\n        ans = v\n        ans += (n - v - 1) * (2 + n - v) // 2\n        print(n * (n - 1) // 2, ans)\n    t -= 1", "for t in range(int(input())):\n    (n, v) = map(int, input().split())\n    x = n - v\n    maxi = n * (n - 1) // 2\n    if v == 1:\n        mini = maxi\n    elif v > n - 1:\n        mini = n - 1\n    else:\n        mini = x * (x + 1) // 2 + (v - 1)\n    print(maxi, mini)", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxp = (n - 1) * n // 2\n    minp = 0\n    if v == 1:\n        minp = maxp\n    elif v >= n - 1:\n        minp = n - 1\n    else:\n        minp += v + (n - v) * (n - v + 1) // 2 - 1\n    print(maxp, minp)", "for i in range(int(input())):\n    (distance, capacity) = [int(x) for x in input().split()]\n    max_p = 0\n    min_p = 0\n    max_p = distance * (distance - 1) // 2\n    if capacity == 1:\n        min_p = max_p\n    elif capacity >= distance - 1:\n        min_p = distance - 1\n    else:\n        min_p += capacity + (distance - capacity) * (distance - capacity + 1) // 2 - 1\n    print(max_p, min_p)", "for i in range(int(input())):\n    (n, v) = [int(x) for x in input().split()]\n    max_p = 0\n    min_p = 0\n    max_p = n * (n - 1) // 2\n    if v == 1:\n        min_p = max_p\n    elif v >= n - 1:\n        min_p = n - 1\n    else:\n        min_p += v + (n - v) * (n - v + 1) // 2 - 1\n    print(max_p, min_p)", "t = int(input())\nfor _ in range(t):\n    (n, v) = list(map(int, input().strip().split()))\n    l = n - 1\n    excess = l - v\n    max = l * (l + 1) // 2\n    if l < v:\n        min = l\n    else:\n        min = v + (excess + 1) * (excess + 2) // 2 - 1\n    print(max, min)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    a = n - 1\n    mx = a * (a + 1) // 2\n    mn = n - 1 if v > n - 1 else v + (n - v) * (n - v + 1) // 2 - 1\n    print(mx, mn)", "T = int(input())\nfor i in range(T):\n    (N, V) = map(int, input().split())\n    maks = (N - 1) * N // 2\n    min = 0\n    if V == 1:\n        min = maks\n    elif V >= N - 1:\n        min = N - 1\n    else:\n        min += V + (N - V) * (N - V + 1) // 2 - 1\n    print(maks, min)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxi = (n - 1) * n // 2\n    mini = (n - v) * (n - v + 1) // 2 + v - 1 if v < n else n - 1\n    print(maxi, mini)", "t = int(input())\nfor _ in range(0, t):\n    (n, v) = map(int, input().split())\n    if n == 1:\n        print(0, 0)\n        continue\n    if v >= n - 1:\n        ans = n - 1\n        maxc = n * (n - 1) // 2\n        print(maxc, ans)\n        continue\n    maxc = n * (n - 1) // 2\n    x = n - (v - 1)\n    ans = v - 1 + x * (x - 1) // 2\n    print(maxc, ans)", "t = int(input())\nfor i in range(t):\n    (n, v) = map(int, input().split())\n    if n > v:\n        min_ = v + (n - v) * (n - v + 1) // 2 - 1\n        max_ = (n - 1) * n // 2\n    else:\n        min_ = n - 1\n        max_ = (n - 1) * n // 2\n    print(max_, min_)", "t = int(input())\nfor i in range(t):\n    (n, v) = map(int, input().split())\n    max_ = (n - 1) * n // 2\n    min_ = v - 1 + (n - v) * (n - v + 1) // 2\n    if v >= n - 1:\n        min_ = n - 1\n    print(max_, min_)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    max1 = n * (n - 1) // 2\n    min1 = v - 1 + (n - v) * (n - v + 1) // 2\n    if v >= n - 1:\n        min1 = n - 1\n    print(max1, min1)", "t = int(input())\nfor _ in range(t):\n    (n, v) = map(int, input().split())\n    minn = n - 1\n    maxx = n * (n - 1) // 2\n    if v < n - 1:\n        minn = v + (n - v) * (n - v + 1) // 2 - 1\n    print(f'{maxx} {minn}')", "def chefcar(n, v):\n    if v < n:\n        min_cost = (n - v) * (n - v + 1) // 2 - 1 + v\n    else:\n        min_cost = n - 1\n    max_cost = n * (n - 1) // 2\n    print(max_cost, min_cost)\nt = int(input())\nfor i in range(t):\n    (n, v) = map(int, input().split())\n    chefcar(n, v)", "for _ in range(int(input())):\n    (n, v) = list(map(int, input().split()))\n    a = n * (n - 1) // 2\n    f = n - v\n    b = f * (f + 1) // 2 + v - 1\n    if v >= n:\n        print(a, n - 1)\n    else:\n        print(a, b)", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxp = (n - 1) * n // 2\n    minp = 0\n    if v == 1:\n        minp = maxp\n    elif v >= n - 1:\n        minp = n - 1\n    else:\n        minp += (n - v) * (n - v + 1) // 2 + v - 1\n    print(maxp, minp)", "for i in range(int(input())):\n    (N, V) = map(int, input().split())\n    mx = (N - 1) * N // 2\n    if V == 1:\n        mn = mx\n    elif V > N:\n        mn = N - 1\n    else:\n        mn = V + (N - V) * (N - V + 1) // 2 - 1\n    print(mx, mn)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    maximum = int(n * (n - 1) // 2)\n    if v == 1:\n        print(maximum, maximum)\n    else:\n        if v >= n - 1:\n            minimum = n - 1\n        else:\n            minimum = v + (n - v) * (n - v + 1) // 2 - 1\n        print(maximum, int(minimum))", "for test in range(int(input())):\n    [N, V] = map(int, input().split())\n    if N <= V:\n        min_count = N - 1\n    else:\n        min_count = (N - V) * (N - V + 1) // 2 + V - 1\n    max_count = (N - 1) * N // 2\n    print(max_count, min_count)", "for test in range(int(input())):\n    [N, V] = map(int, input().split())\n    if N == 1:\n        print('0 0')\n        continue\n    if N <= V:\n        min_count = N - 1\n    else:\n        min_count = (N - V) * (N - V + 1) // 2 + V - 1\n    max_count = (N - 1) * N // 2\n    print(max_count, min_count)", "for _ in range(int(input())):\n    (N, V) = map(int, input().strip().split())\n    mx = N * (N - 1) // 2\n    if V >= N - 1:\n        print(mx, N - 1)\n        continue\n    mn = V - 1 + (N - V) * (N - V + 1) // 2\n    print(mx, mn)", "from sys import stdin\n\ndef solve():\n    for _ in range(int(stdin.readline().strip())):\n        (N, V) = map(int, stdin.readline().strip().split())\n        mx = N * (N - 1) // 2\n        if V >= N - 1:\n            print(mx, N - 1)\n            continue\n        mn = V - 1 + (N - V) * (N - V + 1) // 2\n        print(mx, mn)\nsolve()", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxp = (n - 1) * n // 2\n    minp = 0\n    if v == 1:\n        minp = maxp\n    elif v >= n - 1:\n        minp = n - 1\n    else:\n        minp += v + (n - v) * (n - v + 1) // 2 - 1\n    print(maxp, minp)", "for _ in range(int(input())):\n    (N, V) = map(int, input().split())\n    max_cost = N * (N - 1) // 2\n    if V == 1:\n        print(max_cost, max_cost)\n    elif V < N - 1:\n        min_cost = (N - V) * (N - V + 1) // 2 + V - 1\n        print(max_cost, min_cost)\n    else:\n        print(max_cost, N - 1)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxi = n * (n - 1) // 2\n    if v == 1:\n        print(maxi, maxi)\n    elif v >= n - 1:\n        print(maxi, n - 1)\n    else:\n        x = n - v\n        mini = v - 1 + x * (x + 1) // 2\n        print(maxi, mini)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    m = n * (n - 1) // 2\n    if n == 1:\n        print(0, 0, sep=' ')\n        continue\n    if v >= n - 1:\n        ans = n - 1\n    else:\n        ans = (n - v) * (n - v + 1) // 2\n        ans += v - 1\n    print(m, ans, sep=' ')", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    k = (n - 1) // v\n    if n - 1 > v:\n        mn = v + (n - v) * (n - v + 1) // 2 - 1\n    else:\n        mn = n - 1\n    print(n * (n - 1) // 2, mn)", "num = int(input())\nfor i in range(num):\n    count = 0\n    (n, v) = map(int, input().split())\n    maxs = n * (n - 1) // 2\n    mins = 0\n    if v == 1:\n        mins = maxs\n    elif v >= n - 1:\n        mins = n - 1\n    else:\n        mins = v + (n - v) * (n - v + 1) // 2 - 1\n    print(maxs, mins)", "tst = int(input())\nfor i in range(tst):\n    (n, v) = list(map(int, input().split()))\n    maxp = (n - 1) * n // 2\n    minp = 0\n    if v == 1:\n        minp = maxp\n    elif v >= n - 1:\n        minp = n - 1\n    else:\n        minp += v + (n - v) * (n - v + 1) // 2 - 1\n    print(maxp, minp)", "import sys\nf = sys.stdin\nnext(f)\nfor s in f:\n    (n, v) = map(int, s.split())\n    d = n - v\n    print(n * (n - 1) // 2, v + d * (max(d, 1) + 1) // 2 - 1)", "import sys\nf = sys.stdin\nnext(f)\nfor s in f:\n    (n, v) = map(int, s.split())\n    d = n - v\n    print(n * (n - 1) // 2, v + d * (max(d, 1) + 1) // 2 - 1)", "from sys import stdin\nimport math\ngetint = lambda : int(stdin.readline().rstrip('\\r\\n'))\ngetints = lambda : map(int, stdin.readline().rstrip('\\r\\n').split())\nlgetints = lambda : list(map(int, stdin.readline().rstrip('\\r\\n').split()))\ngetstrs = lambda : map(str, stdin.readline().rstrip('\\r\\n').split())\n\ndef prog_name():\n    (n, v) = getints()\n    mx = n * (n - 1) // 2\n    mn = 0\n    if v == 1:\n        print(mx, mx)\n    elif v >= n:\n        print(mx, n - 1)\n    else:\n        mn = v + (n - v) * (n - v + 1) // 2 - 1\n        print(mx, mn)\nT = getint()\nfor unique in range(T):\n    prog_name()", "import sys\nf = sys.stdin\nnext(f)\nfor s in f:\n    (n, v) = map(int, s.split())\n    d = n - v\n    print(n * (n - 1) // 2, (v + d * (d + 1) // 2 if d > 0 else n) - 1)", "import sys\nf = sys.stdin\nnext(f)\nfor s in f:\n    (n, v) = map(int, s.split())\n    m = n - v\n    print(n * (n - 1) // 2, (v + m * (m + 1) // 2 if m > 0 else n) - 1)", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    if v >= n:\n        ans = n - 1\n    else:\n        ans = v - 1 + (n - v) * (n - v + 1) // 2\n    return [n * (n - 1) // 2, ans]\nfor T in range(int(input())):\n    (n, v) = map(int, input().split())\n    print(*answer())", "a = int(input())\nfor j in range(a):\n    (n, v) = [int(x) for x in input().split()]\n    max = (n - 1) * n // 2\n    if v > n - 1:\n        min = n - 1\n    else:\n        min = v - 1 + (n - v) * (n - v + 1) // 2\n    print(max, min)", "a = int(input())\nfor j in range(a):\n    (n, v) = [int(x) for x in input().split()]\n    max = (n - 1) * n // 2\n    if v >= n - 1:\n        min = n - 1\n    else:\n        min = v - 1 + (n - v) * (n - v + 1) // 2\n    print(max, min)", "import math\nfrom collections import OrderedDict\nt = int(input())\nwhile t > 0:\n    inp = input()\n    q = list(map(int, inp.split(' ')))\n    n = q[0]\n    v = q[1]\n    k = (n - 1) // v\n    x = (n - 1) % v\n    max = n * (n - 1) // 2\n    mini = (n - v) * (n - v + 1) // 2 + v - 1\n    if v >= n:\n        mini = 1 * (n - 1)\n    print(max, mini)\n    t -= 1", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    cost = 0\n    if n - 1 > v:\n        cost = v + (n - v) * (n - v + 1) // 2 - 1\n    else:\n        cost = n - 1\n    max_cost = (n - 1) * n // 2\n    print(max_cost, cost)", "t = int(input())\nfor i in range(t):\n    (n, v) = map(int, input().split())\n    maxx = n * (n - 1) // 2\n    if v >= n - 1:\n        print(maxx, n - 1)\n    else:\n        minn = v - 1 + (n - v) * (n - v + 1) // 2\n        print(maxx, minn)", "for i in range(int(input())):\n    (n, v) = map(int, input().split())\n    ma = n * (n - 1) // 2\n    mi = 0\n    if v == 1:\n        mi = ma\n    elif n - 1 > v:\n        mi = v\n        k = n - v\n        mi += k * (k + 1) // 2 - 1\n    else:\n        mi = n - 1\n    print(ma, mi)", "def main(t):\n    while t > 0:\n        (n, v) = map(int, input().split())\n        min_cost = 0\n        max_cost = (n - 1) * n // 2\n        if v == 1:\n            min_cost = max_cost\n        elif v <= n - 1:\n            diff = abs(v - (n - 1)) + 1\n            min_cost = diff * (diff + 1) // 2 - 1 + v\n        else:\n            min_cost = n - 1\n        print(max_cost, min_cost)\n        t -= 1\nmain(int(input()))", "T = int(input())\nfor i in range(T):\n    (N, V) = map(int, input().split())\n    max = N * (N - 1) // 2\n    min = 0\n    if V == 1:\n        min = max\n    elif V >= N - 1:\n        min = N - 1\n    else:\n        min += (N - V) * (N - V + 1) // 2 - 1 + V\n    print(max, min)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxval = n * (n - 1) // 2\n    if n - 1 <= v:\n        minval = n - 1\n    else:\n        x = n - v + 1\n        minval = x * (x - 1) // 2 + v - 1\n    print(maxval, minval)", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    maxi = n * (n - 1) // 2\n    mini = v\n    nt = n - 1 - v\n    d = nt - 1\n    val = (4 + d) * nt // 2\n    mini = v + val\n    if n == 1:\n        mini = 0\n    elif v >= n - 1:\n        mini = n - 1\n    print(maxi, mini)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    (n, v) = mp()\n    maxi = n * (n - 1) // 2\n    mini = min(n, v)\n    left = n - mini\n    mini += left * (left + 1) // 2\n    mini -= 1\n    print(maxi, mini)\nfor _ in range(inp()):\n    solve()", "import sys\nimport math\nimport bisect\nfrom collections import *\nimport heapq\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom itertools import *\nfrom functools import *\nimport random\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nINF = float('inf')\nMOD = 1000000007\n\ndef solve():\n    (n, v) = mul()\n    ma = (n - 1) * n // 2\n    if v >= n:\n        print(ma, n - 1)\n        return\n    lo = v - 1 + (n - v + 1) * (n - v) // 2\n    print(ma, lo)\nt = 1\nt = inp()\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, v) = map(int, input().split())\n    t = n - v\n    mincost = t * (t + 1) // 2 - 1\n    mincost = mincost + v\n    if n >= v:\n        print(n * (n - 1) // 2, mincost)\n    else:\n        ans = (n - 1) * 1\n        print(n * (n - 1) // 2, ans)", "a = int(input())\nwhile a > 0:\n    (n, v) = input().split()\n    maximum = (int(n) - 1) * int(n) // 2\n    if int(v) >= int(n) - 1:\n        minimum = int(n) - 1\n    else:\n        minimum = (int(n) - int(v)) * (int(n) - int(v) + 1) // 2 + int(v) - 1\n    print(maximum, minimum)\n    a -= 1"]