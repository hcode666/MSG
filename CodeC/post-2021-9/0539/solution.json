["import sys, os, io\nimport math\nfrom collections import defaultdict, deque\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, m) = li()\na = li()\ng = [[] for i in range(n)]\ns = sum(a)\nfor i in range(m):\n    (a, b) = li()\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\nq = ii()\nc = m\nfor i in range(q):\n    l = [x for x in input().split()]\n    if l[0] == '?':\n        print(s - n * (n - 1) // 2 + 2 * c)\n    elif l[0] == '+':\n        c += 1\n    else:\n        c -= 1", "import sys, os, io\nimport math\nfrom collections import defaultdict, deque\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, m) = li()\na = li()\ng = [[] for i in range(n)]\ns = sum(a)\nfor i in range(m):\n    (a, b) = li()\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\nq = ii()\nc = m\nfor i in range(q):\n    l = [x for x in input().split()]\n    if l[0] == '?':\n        print(s - n * (n - 1) // 2 + 2 * c)\n    elif l[0] == '+':\n        c += 1\n    else:\n        c -= 1", "import sys, os, io\nimport math\nfrom collections import defaultdict, deque\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, m) = li()\na = li()\ng = [[] for i in range(n)]\ns = sum(a)\nfor i in range(m):\n    (a, b) = li()\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\nq = ii()\nc = m\nfor i in range(q):\n    l = [x for x in input().split()]\n    if l[0] == '?':\n        print(s - n * (n - 1) // 2 + 2 * c)\n    elif l[0] == '+':\n        c += 1\n    else:\n        c -= 1", "import sys, os, io\nimport math\nfrom collections import defaultdict, deque\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, m) = li()\na = li()\ng = [[] for i in range(n)]\ns = sum(a)\nfor i in range(m):\n    (a, b) = li()\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\nq = ii()\nc = m\nfor i in range(q):\n    l = [x for x in input().split()]\n    if l[0] == '?':\n        print(s - n * (n - 1) // 2 + 2 * c)\n    elif l[0] == '+':\n        c += 1\n    else:\n        c -= 1", "import sys, os, io\nimport math\nfrom collections import defaultdict, deque\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(n, m) = li()\na = li()\ng = [[] for i in range(n)]\ns = sum(a)\nfor i in range(m):\n    (a, b) = li()\n    a -= 1\n    b -= 1\n    g[a].append(b)\n    g[b].append(a)\nq = ii()\nc = m\nfor i in range(q):\n    l = [x for x in input().split()]\n    if l[0] == '?':\n        print(s - n * (n - 1) // 2 + 2 * c)\n    elif l[0] == '+':\n        c += 1\n    else:\n        c -= 1", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nfor _ in range(m):\n    (x, y) = map(int, input().split())\nans = sum(a)\ntot = n * (n - 1) // 2\nfor _ in range(int(input())):\n    q = list(map(str, input().split()))\n    if len(q) != 3:\n        print(ans + 2 * m - tot)\n        continue\n    if q[0] == '+':\n        m += 1\n    else:\n        m -= 1", "(n, m) = map(int, input().split())\narr = [int(i) for i in input().split()]\nsumo = sum(arr)\nno = m\nfor i in range(m):\n    input()\nq = int(input())\nfor i in range(q):\n    s = input()[0]\n    if s == '+':\n        no += 1\n    elif s == '-':\n        no -= 1\n    else:\n        print(sumo + 2 * no - n * (n - 1) // 2)", "import sys\nimport math\nfrom collections import defaultdict, Counter\nfrom bisect import *\nfrom string import ascii_lowercase\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef solve():\n    (n, m) = readInts()\n    a_c = readList(int)\n    s = sum(a_c)\n    for _ in range(m):\n        input()\n    q = readInts()\n    for _ in range(q):\n        temp = input()\n        if temp[0] == '+':\n            m += 1\n        elif temp[0] == '-':\n            m -= 1\n        else:\n            print(s - n * (n - 1) // 2 + 2 * m)\n\ndef main():\n    t = 1\n    for _ in range(t):\n        solve()\nmain()", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nval = sum(a) - n * (n - 1) // 2\nedge = m\nfor i in range(m):\n    (u, v) = map(int, input().split())\nfor i in range(int(input())):\n    data = list(map(str, input().split()))\n    if data[0] == '?':\n        print(val + 2 * edge)\n    elif data[0] == '+':\n        edge += 1\n    else:\n        edge -= 1", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    s = sum(a)\n    d = sum(deg)\n    nd = sum(nondeg[1:n + 1])\n    for i in range(int(input())):\n        opp = input().split()\n        if opp[0] == '?':\n            print(s + d // 2 - nd // 2)\n        if opp[0] == '+':\n            (u, v) = (int(opp[1]), int(opp[2]))\n            d += 2\n            nd -= 2\n        if opp[0] == '-':\n            (u, v) = (int(opp[1]), int(opp[2]))\n            d -= 2\n            nd += 2\nfor T in range(1):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    deg = [0 for i in range(n + 1)]\n    nondeg = [n - 1 for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        deg[u] += 1\n        deg[v] += 1\n        nondeg[u] -= 1\n        nondeg[v] -= 1\n    answer()", "(n, m) = map(int, input().split())\nx = [int(w) for w in input().split()]\nedges = 0\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    edges += 1\ntotal = n * (n - 1) // 2\nq = int(input())\nans = sum(x)\nfor u in range(q):\n    s = [w for w in input().split()]\n    if s[0] == '?':\n        print(ans + 2 * edges - total)\n    elif s[0] == '+':\n        edges += 1\n    elif s[0] == '-':\n        edges -= 1", "(n, m) = map(int, input().split())\nx = [int(w) for w in input().split()]\nedges = 0\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    edges += 1\nmissing = n * (n - 1) // 2 - edges\nq = int(input())\nans = sum(x)\nfor u in range(q):\n    s = [w for w in input().split()]\n    if s[0] == '?':\n        print(ans + edges - missing)\n    elif s[0] == '+':\n        edges += 1\n        missing -= 1\n    elif s[0] == '-':\n        edges -= 1\n        missing += 1", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nad = {i + 1: 0 for i in range(n)}\nad2 = {i + 1: [] for i in range(n)}\nfor i in range(m):\n    (p, q) = map(int, input().split())\n    ad2[p].append(q)\n    ad2[q].append(p)\n    ad[p] += 1\n    ad[q] += 1\nres = 0\nfor i in a:\n    res += i\ntemp = n\nfor i in ad:\n    res += ad[i] - (temp - 1 - ad[i])\n    for j in ad2[i]:\n        ad[j] -= 1\n    temp -= 1\nfor i in range(int(input())):\n    x = input()\n    if x[0] == '+':\n        res += 2\n    elif x[0] == '-':\n        res -= 2\n    else:\n        print(res)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    for __ in range(how_much_noob_I_am):\n        (n, m) = sep()\n        arr = lis()\n        for i in range(m):\n            sep()\n        tot = n * (n - 1) // 2\n        q = inpu()\n        s = sum(arr)\n        cnt = m\n        for i in range(q):\n            p = stringlis()\n            if p[0] == '?':\n                sub = tot - cnt\n                print(s + (cnt - sub))\n            elif p[0] == '+':\n                cnt += 1\n            else:\n                cnt -= 1\nmain()", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\nx = sum(arr)\nedges = 0\nremain = n * (n - 1) // 2\nfor _ in range(k):\n    (a, b) = map(int, input().split())\n    edges += 1\n    remain -= 1\nq = int(input())\nfor _ in range(q):\n    t = input().split()\n    if t[0] == '+':\n        edges += 1\n        remain -= 1\n    elif t[0] == '-':\n        edges -= 1\n        remain += 1\n    else:\n        print(x + edges - remain)", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nfor _ in range(m):\n    (a, b) = map(int, input().split())\nans = sum(arr)\ntot = n * (n - 1) // 2\nfor _ in range(int(input())):\n    sab = list(map(str, input().split()))\n    if len(sab) != 3:\n        print(ans + 2 * m - tot)\n        continue\n    if sab[0] == '+':\n        m += 1\n    else:\n        m -= 1", "import sys\nimport os\nimport math\nfrom collections import *\nimport bisect\nfrom heapq import *\nfrom itertools import permutations\nif os.path.exists('input.txt') and os.path.exists('output.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    k1 = gcd(a, b)\n    k2 = a * b\n    return k2 // k1\nmod = 10 ** 9 + 7\n\ndef inp():\n    return map(int, input().strip().split(' '))\n\ndef lis():\n    return list(inp())\nmoD = 998244353\nmod = 10 ** 9 + 7\n\ndef powmod(a, b, p):\n    a %= p\n    if a == 0:\n        return 0\n    prod = 1\n    while b > 0:\n        if b & 1:\n            prod *= a\n            prod %= p\n            b -= 1\n        a *= a\n        a %= p\n        b //= 2\n    return prod\n\ndef inv(a, p):\n    return powmod(a, p - 2, p)\n\ndef nck(n, k, p):\n    return fact[n] * inv(fact[k], p) % p * inv(fact[n - k], p) % p\n\ndef last_elem(lvl):\n    return (lvl + 1) * lvl // 2\n\ndef get_lvl(n):\n    lvl = -1\n    idx = -1\n    if n == 1:\n        return [1, 1]\n    st = 2\n    end = 1 + ceil(sqrt(2 * n))\n    while st <= end:\n        lvl = (st + end) // 2\n        if last_elem(lvl) >= n and last_elem(lvl - 1) < n:\n            break\n        elif last_elem(lvl) > n:\n            end = lvl - 1\n        else:\n            st = lvl + 1\n    idx = n - lvl * (lvl - 1) // 2\n    return [lvl, idx]\n\ndef buildTree(a, s, e, tree, ind):\n    if s == e:\n        tree[ind] = a[s]\n        return\n    mid = (s + e) // 2\n    buildTree(a, s, mid, tree, 2 * ind)\n    buildTree(a, mid + 1, e, tree, 2 * ind + 1)\n    tree[ind] = tree[2 * ind] + tree[2 * ind + 1]\n    return\n\ndef query(tree, ss, se, qs, qe, ind):\n    if ss >= qs and se <= qe:\n        return tree[ind]\n    if qe < ss or qs > se:\n        return 0\n    mid = (ss + se) // 2\n    left = query(tree, ss, mid, qs, qe, 2 * ind)\n    right = query(tree, mid + 1, se, qs, qe, 2 * ind + 1)\n    return left + right\nmod = 998244353\nmod = 10 ** 9 + 7\n\ndef prim(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nma = 2 * (10 ** 5 + 1)\n\ndef solve():\n    (n, m) = inp()\n    a = lis()\n    for i in range(m):\n        (u, v) = inp()\n    m *= 2\n    sm = sum(a)\n    sm -= n * (n - 1) // 2\n    q = int(input())\n    for i in range(q):\n        p = list(input().split())\n        if p[0] == '+':\n            m += 2\n        elif p[0] == '-':\n            m -= 2\n        else:\n            print(sm + m)\nt = 1\nfor _ in range(t):\n    solve()", "from sys import stdin, stdout\ninput = stdin.readline\n(n, m) = map(int, input().split())\nmaxi = n * (n - 1) // 2\narr = [int(x) for x in input().split()]\ntot = sum(arr)\nedges = 0\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    edges += 1\nq = int(input())\nfor i in range(q):\n    query = [x for x in input().split()]\n    if query[0] == '+':\n        edges += 1\n    elif query[0] == '-':\n        edges -= 1\n    else:\n        ans = tot + 2 * edges - maxi\n        print(ans)", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\ng = [0 for _ in range(n)]\ns1 = sum(arr)\nfor i in range(m):\n    (x, y) = map(int, input().split())\n    g[min(x, y) - 1] += 1\ns2 = sum([2 * g[i] - (n - i - 1) for i in range(n)])\nt = int(input())\nfor _ in range(t):\n    q = input().split()\n    ans = 0\n    if q[0] == '?':\n        print(s2 + s1)\n    elif q[0] == '+':\n        (x, y) = (int(q[1]) - 1, int(q[2]) - 1)\n        i = min(x, y)\n        s2 -= 2 * g[i] - (n - i - 1)\n        g[i] += 1\n        s2 += 2 * g[i] - (n - i - 1)\n    else:\n        (x, y) = (int(q[1]) - 1, int(q[2]) - 1)\n        i = min(x, y)\n        s2 -= 2 * g[i] - (n - i - 1)\n        g[i] -= 1\n        s2 += 2 * g[i] - (n - i - 1)", "def main():\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    for edges in range(m):\n        (a, b) = map(int, input().split())\n    pre = n * (n - 1) // 2\n    ans = s - pre\n    q = int(input())\n    for i in range(q):\n        que = list(map(str, input().split()))\n        if que[0] == '?':\n            print(ans + 2 * m)\n        elif que[0] == '-':\n            m -= 1\n        elif que[0] == '+':\n            m += 1\nmain()", "(N, M) = list(map(int, input().split()))\na = list(map(int, input().split()))\nanswer = sum(a) - N * (N - 1) // 2\nfor i in range(M):\n    e = input()\nQ = int(input())\nedges = M\nfor i in range(Q):\n    q = input().split()\n    if q[0] == '+':\n        edges += 1\n    elif q[0] == '-':\n        edges -= 1\n    else:\n        print(answer + 2 * edges)", "(n, m) = map(int, input().split())\nA = list(map(int, input().split()))\nfor _ in range(m):\n    input()\ntotal_price = sum(A) - n * (n - 1) // 2 + 2 * m\nq = int(input())\nfor _ in range(q):\n    query = input()\n    if query[0] == '+':\n        total_price += 2\n    elif query[0] == '-':\n        total_price -= 2\n    else:\n        print(total_price)", "import sys\ninput = sys.stdin.readline\n\ndef testcase():\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    price = sum(A)\n    conn = [0] * n\n    for i in range(m):\n        (p, q) = map(int, input().split())\n        conn[p - 1] += 1\n        conn[q - 1] += 1\n    Q = int(input())\n    for i in range(Q):\n        q = input().split()\n        if q[0] == '?':\n            print(price + m + m - n * (n - 1) // 2)\n        elif q[0] == '+':\n            m += 1\n        elif q[0] == '-':\n            m -= 1\ntestcase()", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\ns = sum(l)\nfor i in range(m):\n    (u, v) = map(int, input().split())\nq = int(input())\ntemp = m\nt2 = n * (n - 1) // 2\nwhile q:\n    q -= 1\n    x = input()\n    if x[0] == '?':\n        print(s + 2 * temp - t2)\n    elif x[0] == '-':\n        temp -= 1\n    else:\n        temp += 1", "from collections import Counter\nfrom sys import *\nfrom collections import defaultdict as dd\nfrom math import *\n\ndef inp():\n    return int(stdin.readline().strip())\n\ndef vinp():\n    return map(int, stdin.readline().strip().split())\n\ndef linp():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef sinp(n=1):\n    if n == 1:\n        return stdin.readline().strip()\n    elif n == 2:\n        return list(stdin.readline().strip())\n    else:\n        return list(stdin.readline().strip().split())\n\ndef pr(*x, end='\\n'):\n    print(*x, end=end)\n\ndef mod(f, val=1000000007):\n    return f % val\n\ndef csort(c):\n    sorted(c.items(), key=lambda pair: pair[1], reverse=True)\n\ndef indc(l, n):\n    c = {}\n    for i in range(n):\n        c[l[i]] = c.get(l[i], []) + [i + 1]\n    return c\n(n, m) = vinp()\nl = linp()\nsumm = sum(l)\nfor i in range(m):\n    (u, v) = vinp()\nq = inp()\ntemp = m\nsu = n * (n - 1) // 2\nwhile q:\n    q -= 1\n    s = sinp()\n    if s[0] == '?':\n        pr(summ + temp + temp - su)\n    elif s[0] == '+':\n        temp += 1\n    else:\n        temp -= 1", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nad = {i + 1: [] for i in range(n)}\nad2 = {i + 1: 0 for i in range(n)}\nfor i in range(m):\n    (p, q) = map(int, input().split())\n    ad[p].append(q)\n    ad[q].append(p)\n    ad2[p] += 1\n    ad2[q] += 1\nres = 0\nfor i in a:\n    res += i\ntemp = n\nfor i in ad:\n    res += ad2[i] - (temp - 1 - ad2[i])\n    for j in ad[i]:\n        ad2[j] -= 1\n    temp -= 1\nfor i in range(int(input())):\n    x = input()\n    if x[0] == '+':\n        res += 2\n    elif x[0] == '-':\n        res -= 2\n    else:\n        print(res)", "(N, M) = map(int, input().split())\narr = list(map(int, input().split()))\nsm = sum(arr)\nfor i in range(M):\n    (q, v) = map(int, input().split())\nQ = int(input())\ncnt = M\ntot = N * (N - 1) // 2\nwhile Q:\n    q = list(map(str, input().split()))\n    if q[0] == '?':\n        ad = tot - cnt\n        print(sm + (cnt - ad))\n    elif q[0] == '+':\n        cnt += 1\n    else:\n        cnt -= 1\n    Q -= 1", "nmbr = lambda : int(input())\nlst = lambda : list(map(int, input().split()))\n\ndef fn(x):\n    return x * (x + 1) >> 1\nfor _ in range(1):\n    (n, eg) = lst()\n    price = lst()\n    sm_p = sum(price)\n    sm_d = eg\n    cc = fn(n - 1)\n    for i in range(eg):\n        (u, v) = lst()\n    for i in range(nmbr()):\n        s = input()\n        if s[0] == '?':\n            print(sm_p + 2 * sm_d - n * (n - 1) + cc)\n        elif s[0] == '+':\n            sm_d += 1\n        else:\n            sm_d -= 1", "(n, m) = map(int, input().split())\narr = [int(x) for x in input().split()]\ndp = [0 for i in range(n + 1)]\nfor i in range(m):\n    (a, b) = map(int, input().split())\n    dp[a] = dp[a] + 1\n    dp[b] = dp[b] + 1\nres = sum(arr)\nneb = sum(dp)\ntot = n * (n - 1)\nq = int(input())\nfor i in range(q):\n    l = [x for x in input().split()]\n    if l[0] == '?':\n        print(res + neb // 2 - (tot - neb) // 2)\n    elif l[0] == '+':\n        neb = neb + 2\n    else:\n        neb = neb - 2", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque, Counter, OrderedDict\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\n(n, m) = M()\na = L()\nadj = {i + 1: [] for i in range(n)}\nadj2 = {i + 1: 0 for i in range(n)}\nfor i in range(m):\n    (x, y) = M()\n    adj[x].append(y)\n    adj[y].append(x)\n    adj2[x] += 1\n    adj2[y] += 1\nans = sum(a)\nvar = n\nfor i in adj:\n    ans += adj2[i] - (var - 1 - adj2[i])\n    for j in adj[i]:\n        adj2[j] -= 1\n    var -= 1\nq = I()\nfor i in range(q):\n    s = S().split()\n    if s[0] == '+':\n        ans += 2\n        adj2[int(s[1])] += 1\n        adj2[int(s[2])] += 1\n    elif s[0] == '-':\n        ans -= 2\n        adj2[int(s[1])] -= 1\n        adj2[int(s[2])] -= 1\n    else:\n        print(ans)", "(N, M) = map(int, input().split())\narr = list(map(int, input().split()))\n_sum = sum(arr) - sum([i + 1 for i in range(N - 1)])\nfor _ in range(M):\n    _ = input()\nQ = int(input())\nfor _ in range(Q):\n    query = input().split()\n    if query[0] == '?':\n        print(_sum + M * 2)\n    elif query[0] == '+':\n        M += 1\n    else:\n        M -= 1", "(N, M) = map(int, input().split(' '))\nA = list(map(int, input().split(' ')))\ngraph = [[] for theta in range(N)]\nfor i in range(M):\n    (u, v) = map(int, input().split(' '))\n    graph[u - 1].append(v - 1)\n    graph[v - 1].append(u - 1)\nval = 0\nfor theta in range(N):\n    val += A[theta] - theta\n    for alpha in graph[theta]:\n        A[alpha] += 2\nQ = int(input())\nfor omega in range(Q):\n    query = str(input())\n    if query[0] == '+':\n        val += 2\n    elif query[0] == '-':\n        val -= 2\n    elif query[0] == '?':\n        print(val)", "t = 1\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    adj = [0 for i in range(n)]\n    sm = 0\n    cnt = 0\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        if u < v:\n            adj[u - 1] += 1\n        else:\n            adj[v - 1] += 1\n    for i in range(n):\n        sm += arr[i]\n        sm += adj[i]\n        sm -= n - 1 - i - adj[i]\n    q = int(input())\n    for i in range(q):\n        a = list(map(str, input().split()))\n        if len(a) == 1:\n            print(sm + cnt)\n        elif a[0] == '+':\n            cnt += 2\n        else:\n            cnt -= 2", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    s = sum(a)\n    d = sum(deg)\n    nd = sum(nondeg[1:n + 1])\n    for i in range(int(input())):\n        opp = input().split()\n        if opp[0] == '?':\n            print(s + d // 2 - nd // 2)\n        if opp[0] == '+':\n            (u, v) = (int(opp[1]), int(opp[2]))\n            d += 2\n            nd -= 2\n        if opp[0] == '-':\n            (u, v) = (int(opp[1]), int(opp[2]))\n            d -= 2\n            nd += 2\nfor T in range(1):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    deg = [0 for i in range(n + 1)]\n    nondeg = [n - 1 for i in range(n + 1)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        deg[u] += 1\n        deg[v] += 1\n        nondeg[u] -= 1\n        nondeg[v] -= 1\n    answer()"]