["def LII():\n    return [int(x) for x in input().split()]\nfor _ in range(int(input())):\n    n = int(input())\n    a = LII()\n    assert len(a) == n\n    assert all((x >= 1 and x <= n for x in a))\n    count_right = [0] * (n + 2)\n    count_left = [0] * (n + 2)\n    for x in a:\n        count_right[x + 1] += 1\n    delta_neg_invs = 0\n    maxx = 0\n    for x in a:\n        delta_neg_invs += count_right[x] - count_left[x + 1]\n        if delta_neg_invs > maxx:\n            maxx = delta_neg_invs\n        count_right[x + 1] -= 1\n        count_left[x] += 1\n    print(maxx)", "def LII():\n    return [int(x) for x in input().split()]\nfor _ in range(int(input())):\n    n = int(input())\n    a = LII()\n    assert len(a) == n\n    assert all((x >= 1 and x <= n for x in a))\n    count_right = [0] * (n + 2)\n    count_left = [0] * (n + 2)\n    for x in a:\n        count_right[x + 1] += 1\n    delta_neg_invs = 0\n    maxx = 0\n    for x in a:\n        delta_neg_invs += count_right[x] - count_left[x + 1]\n        if delta_neg_invs > maxx:\n            maxx = delta_neg_invs\n        count_right[x + 1] -= 1\n        count_left[x] += 1\n    print(maxx)", "AcHyTh = 0\nTtT = int(input())\nfor i in range(TtT):\n    NnN = int(input())\n    AmZxx = [int(i) for i in input().split()]\n    m = [0] * (NnN + 2)\n    for i in AmZxx:\n        if m[i] != 0:\n            m[i] += 1\n        else:\n            m[i] = 1\n    AmZx = [0] * (NnN + 2)\n    lst = []\n    ReSZaV = 0\n    for i in range(NnN - 1, -1, -1):\n        j = AmZxx[i]\n        m[j] -= 1\n        j += 1\n        AmZx[j] += 1\n        ReSZaV += m[AmZxx[i] + 1]\n        ReSZaV -= AmZx[AmZxx[i]]\n        lst.append(ReSZaV)\n    print(max(lst))", "AcHyTh = 0\nTtT = int(input())\nfor i in range(TtT):\n    NnN = int(input())\n    AmZxx = [int(i) for i in input().split()]\n    m = [0] * (NnN + 2)\n    for i in AmZxx:\n        if m[i] != 0:\n            m[i] += 1\n        else:\n            m[i] = 1\n    AmZx = [0] * (NnN + 2)\n    lst = []\n    ReSZaV = 0\n    for i in range(NnN - 1, -1, -1):\n        j = AmZxx[i]\n        m[j] -= 1\n        j += 1\n        AmZx[j] += 1\n        ReSZaV += m[AmZxx[i] + 1]\n        ReSZaV -= AmZx[AmZxx[i]]\n        lst.append(ReSZaV)\n    print(max(lst))", "AcHyTh = 0\nTtT = int(input())\nfor i in range(TtT):\n    NnN = int(input())\n    AmZxx = [int(i) for i in input().split()]\n    m = [0] * (NnN + 2)\n    for i in AmZxx:\n        if m[i] != 0:\n            m[i] += 1\n        else:\n            m[i] = 1\n    AmZx = [0] * (NnN + 2)\n    lst = []\n    ReSZaV = 0\n    for i in range(NnN - 1, -1, -1):\n        j = AmZxx[i]\n        m[j] -= 1\n        j += 1\n        AmZx[j] += 1\n        ReSZaV += m[AmZxx[i] + 1]\n        ReSZaV -= AmZx[AmZxx[i]]\n        lst.append(ReSZaV)\n    print(max(lst))", "AcHyTh = 0\nTtT = int(input())\nfor i in range(TtT):\n    NnN = int(input())\n    AmZxx = [int(i) for i in input().split()]\n    m = [0] * (NnN + 2)\n    for i in AmZxx:\n        if m[i] != 0:\n            m[i] += 1\n        else:\n            m[i] = 1\n    AmZx = [0] * (NnN + 2)\n    lst = []\n    ReSZaV = 0\n    for i in range(NnN - 1, -1, -1):\n        j = AmZxx[i]\n        m[j] -= 1\n        j += 1\n        AmZx[j] += 1\n        ReSZaV += m[AmZxx[i] + 1]\n        ReSZaV -= AmZx[AmZxx[i]]\n        lst.append(ReSZaV)\n    print(max(lst))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    l = [int(i) for i in input().split()]\n    m = [0] * (N + 2)\n    for i in l:\n        if m[i] != 0:\n            m[i] += 1\n        else:\n            m[i] = 1\n    m2 = [0] * (N + 2)\n    lst = []\n    ans = 0\n    for i in range(N - 1, -1, -1):\n        j = l[i]\n        m[j] -= 1\n        j += 1\n        m2[j] += 1\n        ans += m[l[i] + 1]\n        ans -= m2[l[i]]\n        lst.append(ans)\n    print(max(lst))", "import math\ncase = int(input())\nfor _ in range(case):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    leftmap = {}\n    rightmap = {}\n    for i in range(n):\n        if arr[i] not in leftmap:\n            leftmap[arr[i]] = 0\n        leftmap[arr[i]] += 1\n    inv = 0\n    i = n - 1\n    res = 0\n    while i >= 0:\n        if arr[i] + 1 in leftmap:\n            inv += leftmap[arr[i] + 1]\n        if arr[i] in rightmap:\n            inv -= rightmap[arr[i]]\n        res = max(res, inv)\n        leftmap[arr[i]] -= 1\n        if arr[i] + 1 not in rightmap:\n            rightmap[arr[i] + 1] = 0\n        rightmap[arr[i] + 1] += 1\n        i -= 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    pref = [0] * (n + 2)\n    last = [0] * (n + 1)\n    for i in l:\n        last[i] += 1\n    (index, m) = (0, 0)\n    for i in l:\n        index += last[i - 1]\n        index -= pref[i + 1]\n        pref[i] += 1\n        last[i] -= 1\n        m = max(m, index)\n    print(m)", "import math\ncase = int(input())\nfor _ in range(case):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    leftmap = {}\n    rightmap = {}\n    for i in range(n):\n        if arr[i] not in leftmap:\n            leftmap[arr[i]] = 0\n        leftmap[arr[i]] += 1\n    inv = 0\n    i = n - 1\n    res = 0\n    while i >= 0:\n        if arr[i] + 1 in leftmap:\n            inv += leftmap[arr[i] + 1]\n        if arr[i] in rightmap:\n            inv -= rightmap[arr[i]]\n        res = max(res, inv)\n        leftmap[arr[i]] -= 1\n        if arr[i] + 1 not in rightmap:\n            rightmap[arr[i] + 1] = 0\n        rightmap[arr[i] + 1] += 1\n        i -= 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref_freq = [0] * (n + 2)\n    suf_freq = [0] * (n + 2)\n    for x in a:\n        pref_freq[x] += 1\n    ans = 0\n    cur = 0\n    for i in reversed(range(1, n)):\n        cur -= pref_freq[a[i]] * suf_freq[a[i] - 1] + pref_freq[a[i] + 1] * suf_freq[a[i]]\n        suf_freq[a[i]] += 1\n        pref_freq[a[i]] -= 1\n        cur += pref_freq[a[i]] * suf_freq[a[i] - 1] + pref_freq[a[i] + 1] * suf_freq[a[i]]\n        ans = max(ans, cur)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    suff = [0] * (n + 1)\n    pref = [0] * (n + 2)\n    for a in arr:\n        suff[a] += 1\n    (inv, max_inv) = (0, 0)\n    for a in arr:\n        inv += suff[a - 1]\n        inv -= pref[a + 1]\n        suff[a] -= 1\n        pref[a] += 1\n        max_inv = max(inv, max_inv)\n    print(max_inv)", "import random\nimport math\nfrom collections import defaultdict, Counter, deque, OrderedDict\nfrom heapq import heapify, heappush, heappop\nfrom functools import lru_cache\nfrom bisect import bisect_left, bisect_right\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\nclass SegmentTree:\n\n    def __init__(self, arr, func=lambda x, y: x + y, defaultvalue=0):\n        self.n = len(arr)\n        self.segmentTree = [0] * self.n + arr\n        self.func = func\n        self.defaultvalue = defaultvalue\n        self.buildSegmentTree(arr)\n\n    def buildSegmentTree(self, arr):\n        for i in range(self.n - 1, 0, -1):\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        res = self.defaultvalue\n        while l < r:\n            if l & 1:\n                res = self.func(res, self.segmentTree[l])\n                l += 1\n            l >>= 1\n            if r & 1:\n                r -= 1\n                res = self.func(res, self.segmentTree[r])\n            r >>= 1\n        return res\n\n    def update(self, i, value):\n        i += self.n\n        self.segmentTree[i] = value\n        while i > 1:\n            i >>= 1\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parents = list(range(n))\n\n    def find(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            self.parents[x] = y\ndire = [0, 1, 0, -1, 0]\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef case(t):\n    print('Case #{}:'.format(t), end=' ')\nRANDOM = random.randrange(2 ** 62)\n\ndef Wrapper(x):\n    return x ^ RANDOM\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = Counter(arr)\n    mapp = Counter()\n    ans = 0\n    curr = 0\n    for i in range(n - 1, -1, -1):\n        c[arr[i]] -= 1\n        curr -= mapp[arr[i]]\n        curr += c[arr[i] + 1]\n        mapp[arr[i] + 1] += 1\n        ans = max(ans, curr)\n    print(ans)\nfor t in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    counts = (n + 1) * [0]\n    processed = (n + 1) * [0]\n    old = []\n    for j in a:\n        counts[j] += 1\n    for j in range(n - 1, -1, -1):\n        o = 0\n        if len(old) > 0:\n            o = old[-1]\n        if a[j] + 1 <= n:\n            new = counts[a[j] + 1] - processed[a[j] - 1] + o\n        else:\n            new = o - processed[a[j] - 1]\n        old.append(new)\n        counts[a[j]] -= 1\n        processed[a[j]] += 1\n    print(max(old))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref_freq = [0] * (n + 2)\n    suf_freq = [0] * (n + 2)\n    for x in a:\n        pref_freq[x] += 1\n    ans = 0\n    cur = 0\n    for i in reversed(range(1, n)):\n        cur -= pref_freq[a[i]] * suf_freq[a[i] - 1] + pref_freq[a[i] + 1] * suf_freq[a[i]]\n        suf_freq[a[i]] += 1\n        pref_freq[a[i]] -= 1\n        cur += pref_freq[a[i]] * suf_freq[a[i] - 1] + pref_freq[a[i] + 1] * suf_freq[a[i]]\n        ans = max(ans, cur)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    pref = [0] * (n + 2)\n    suff = [0] * (n + 2)\n    for i in l:\n        pref[i] += 1\n    ans = 0\n    count = 0\n    for i in range(n - 1, -1, -1):\n        count -= pref[l[i]] * suff[l[i] - 1] + pref[l[i] + 1] * suff[l[i]]\n        pref[l[i]] -= 1\n        suff[l[i]] += 1\n        count += pref[l[i]] * suff[l[i] - 1] + pref[l[i] + 1] * suff[l[i]]\n        ans = max(ans, count)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    suff = [0 for i in range(n + 9)]\n    pre = [0 for i in range(n + 9)]\n    for i in l:\n        suff[i] += 1\n    (ans, res) = (0, 0)\n    for i in l:\n        pre[i] += 1\n        suff[i] -= 1\n        ans += suff[i - 1]\n        ans -= pre[i + 1]\n        res = max(res, ans)\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref_freq = [0] * (n + 2)\n    suf_freq = [0] * (n + 2)\n    for x in a:\n        pref_freq[x] += 1\n    ans = 0\n    cur = 0\n    for i in reversed(range(1, n)):\n        cur -= pref_freq[a[i]] * suf_freq[a[i] - 1] + pref_freq[a[i] + 1] * suf_freq[a[i]]\n        suf_freq[a[i]] += 1\n        pref_freq[a[i]] -= 1\n        cur += pref_freq[a[i]] * suf_freq[a[i] - 1] + pref_freq[a[i] + 1] * suf_freq[a[i]]\n        ans = max(ans, cur)\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    prev = [0] * (n + 2)\n    temp = [0] * (n + 2)\n    ans = 0\n    curr = 0\n    for i in range(n):\n        prev[a[i]] += 1\n    for i in range(n - 1, -1, -1):\n        curr += prev[a[i] + 1]\n        curr -= temp[a[i] - 1]\n        ans = max(ans, curr)\n        prev[a[i]] -= 1\n        temp[a[i]] += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    suff = [0 for i in range(n + 9)]\n    pre = [0 for i in range(n + 9)]\n    for i in l:\n        suff[i] += 1\n    (ans, res) = (0, 0)\n    for i in range(n):\n        pre[l[i]] += 1\n        suff[l[i]] -= 1\n        ans += suff[l[i] - 1]\n        ans -= pre[l[i] + 1]\n        res = max(res, ans)\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    vec = [0] * n\n    mp1 = {}\n    mp2 = {}\n    for j in lst:\n        mp1[j] = 0\n    for j in lst:\n        mp1[j] += 1\n    for j in lst:\n        mp2[j + 1] = 0\n    mp1[lst[-1]] -= 1\n    if lst[-1] + 1 in mp1:\n        vec[-1] = mp1[lst[-1] + 1]\n    else:\n        vec[-1] = 0\n    mp2[lst[-1] + 1] += 1\n    for j in range(n - 2, -1, -1):\n        ele = lst[j]\n        mp1[ele] -= 1\n        if ele + 1 in mp1:\n            a = mp1[ele + 1]\n        else:\n            a = 0\n        if ele in mp2:\n            b = mp2[ele]\n        else:\n            b = 0\n        mp2[ele + 1] += 1\n        ct = vec[j + 1] + a - b\n        vec[j] = ct\n    print(max(vec))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    d1 = {}\n    res = 0\n    for i in range(n - 1, -1, -1):\n        d[l[i]] -= 1\n        if l[i] + 1 in d:\n            ans += d[l[i] + 1]\n        if l[i] - 1 in d1:\n            ans -= d1[l[i] - 1]\n        if l[i] in d1:\n            d1[l[i]] += 1\n        else:\n            d1[l[i]] = 1\n        res = max(ans, res)\n    print(res)", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    aata = int(input())\n    pata = list(map(int, input().split()))\n    pre = [0] * aata\n    suff = [0] * aata\n    zara = defaultdict(int)\n    zara[pata[0]] += 1\n    for i in range(1, aata):\n        if pata[i] + 1 in zara:\n            pre[i] = zara[pata[i] + 1]\n        else:\n            pre[i] = 0\n        zara[pata[i]] += 1\n    zara = defaultdict(int)\n    zara[pata[aata - 1]] += 1\n    suff[aata - 1] = 0\n    for i in range(aata - 2, -1, -1):\n        if pata[i] - 1 in zara:\n            suff[i] = zara[pata[i] - 1]\n        else:\n            suff[i] = 0\n        zara[pata[i]] += 1\n    resta = [0] * aata\n    for i in range(aata):\n        resta[i] = pre[i] - suff[i]\n    ansta = 0\n    current = 0\n    for i in range(aata - 1, -1, -1):\n        current += resta[i]\n        if current < 0:\n            current = 0\n        ansta = max(ansta, current)\n    print(ansta)\nff = int(input())\nfor _ in range(ff):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    pref_freq = [0] * (n + 2)\n    suf_freq = [0] * (n + 2)\n    for x in a:\n        pref_freq[x] += 1\n    ans = 0\n    cur = 0\n    for i in reversed(range(1, n)):\n        cur -= pref_freq[a[i]] * suf_freq[a[i] - 1] + pref_freq[a[i] + 1] * suf_freq[a[i]]\n        suf_freq[a[i]] += 1\n        pref_freq[a[i]] -= 1\n        cur += pref_freq[a[i]] * suf_freq[a[i] - 1] + pref_freq[a[i] + 1] * suf_freq[a[i]]\n        ans = max(ans, cur)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    d1 = {}\n    res = 0\n    for i in range(n - 1, -1, -1):\n        d[l[i]] -= 1\n        if l[i] + 1 in d:\n            ans += d[l[i] + 1]\n        if l[i] - 1 in d1:\n            ans -= d1[l[i] - 1]\n        if l[i] in d1:\n            d1[l[i]] += 1\n        else:\n            d1[l[i]] = 1\n        res = max(ans, res)\n    print(res)", "from collections import defaultdict\n\ndef solve():\n    n = int(input())\n    m = list(map(int, input().split()))\n    mp1 = defaultdict(int)\n    mp = defaultdict(int)\n    for i in range(n):\n        mp1[m[i]] += 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1[m[i] + 1] - mp[m[i] - 1]\n        mp1[m[i]] -= 1\n        mp[m[i]] += 1\n    r = 0\n    for i in range(n):\n        r = max(r, v2[i])\n    print(r)\nt = int(input())\nfor i in range(t):\n    solve()", "from collections import defaultdict\n\ndef solve():\n    n = int(input())\n    m = list(map(int, input().split()))\n    mp1 = defaultdict(int)\n    mp = defaultdict(int)\n    for i in range(n):\n        mp1[m[i]] += 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1[m[i] + 1] - mp[m[i] - 1]\n        mp1[m[i]] -= 1\n        mp[m[i]] += 1\n    r = 0\n    for i in range(n):\n        r = max(r, v2[i])\n    print(r)\nt = int(input())\nfor i in range(t):\n    solve()", "def main():\n    from collections import defaultdict\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = list(map(int, input().split()))\n        ans = 0\n        d = defaultdict(int)\n        ato = defaultdict(int)\n        temp = 0\n        for i in range(n):\n            ato[a[i]] += 1\n        for i in range(n):\n            temp += ato[a[i] - 1] - d[a[i] + 1]\n            ans = max(ans, temp)\n            d[a[i]] += 1\n            ato[a[i]] -= 1\n        print(ans)\nmain()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    aata = int(input())\n    pata = list(map(int, input().split()))\n    pre = [0] * aata\n    suff = [0] * aata\n    zara = defaultdict(int)\n    zara[pata[0]] += 1\n    for i in range(1, aata):\n        if pata[i] + 1 in zara:\n            pre[i] = zara[pata[i] + 1]\n        else:\n            pre[i] = 0\n        zara[pata[i]] += 1\n    zara = defaultdict(int)\n    zara[pata[aata - 1]] += 1\n    suff[aata - 1] = 0\n    for i in range(aata - 2, -1, -1):\n        if pata[i] - 1 in zara:\n            suff[i] = zara[pata[i] - 1]\n        else:\n            suff[i] = 0\n        zara[pata[i]] += 1\n    resta = [0] * aata\n    for i in range(aata):\n        resta[i] = pre[i] - suff[i]\n    ansta = 0\n    current = 0\n    for i in range(aata - 1, -1, -1):\n        current += resta[i]\n        if current < 0:\n            current = 0\n        ansta = max(ansta, current)\n    print(ansta)\nff = int(input())\nfor _ in range(ff):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\no = int(input())\nfor _ in range(o):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "T = int(input())\ny2 = int(1000000000.0 + 7)\nsum = 0\np = [0] * int(1000000.0)\n\ndef fac():\n    for k in range(int(1000000.0)):\n        if k == 0:\n            p[k] = 1\n        else:\n            p[k] = p[k - 1] % y2 * ((k + 1) % y2)\n\ndef pow2(a, b):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a\n        a = a * a\n        b >>= 1\n    return res\n\ndef s():\n    n = int(input())\n    v = list(map(int, input().split()))\n    mp1 = {}\n    mp = {}\n    for z in range(n):\n        mp1[v[z]] = mp1.get(v[z], 0) + 1\n    v2 = [0] * (n + 1)\n    for k in range(n - 1, -1, -1):\n        v2[k] = v2[k + 1] + mp1.get(v[k] + 1, 0) - mp.get(v[k] - 1, 0)\n        mp1[v[k]] -= 1\n        mp[v[k]] = mp.get(v[k], 0) + 1\n    a = 0\n    for j in range(n):\n        a = max(a, v2[j])\n    print(a)\nfor _ in range(T):\n    s()", "from collections import defaultdict\n\ndef b_search(k, arr):\n    (l, hi) = (0, len(arr) - 1)\n    while l <= hi:\n        m = (l + hi) // 2\n        if arr[m] == k:\n            return m\n        elif arr[m] > k:\n            hi = m - 1\n        else:\n            l = m + 1\n    return l\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = defaultdict(int)\n    m1 = defaultdict(int)\n    for i in a:\n        m1[i] += 1\n    a2 = [0 for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        a2[i] = a2[i + 1]\n        a2[i] = a2[i] + m1[a[i] + 1]\n        a2[i] = a2[i] - m[a[i] - 1]\n        m1[a[i]] -= 1\n        m[a[i]] += 1\n    ans = max(a2)\n    print(ans)", "import sys\nfrom collections import defaultdict\n\ndef mini():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    mini()", "import math\ny2 = int(1000000000.0 + 7)\nsum = 0\np = [0] * int(1000000.0)\n\ndef fac():\n    for i in range(int(1000000.0)):\n        if i == 0:\n            p[i] = 1\n        else:\n            p[i] = p[i - 1] % y2 * ((i + 1) % y2)\n\ndef pow2(a, b):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a\n        a = a * a\n        b >>= 1\n    return res\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    mp1 = {}\n    mp = {}\n    for i in range(n):\n        mp1[v[i]] = mp1.get(v[i], 0) + 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1.get(v[i] + 1, 0) - mp.get(v[i] - 1, 0)\n        mp1[v[i]] -= 1\n        mp[v[i]] = mp.get(v[i], 0) + 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, v2[i])\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import defaultdict\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    influence = [0] * N\n    M = 0\n    maxChange = 0\n    d = defaultdict(lambda : list())\n    d2 = defaultdict(lambda : 0)\n    for i in range(N):\n        d[A[i]].append(i)\n    for i in range(N):\n        element = A[N - 1 - i] + 1\n        if element in d:\n            change = len(d[element])\n            M = M + change\n        M = M - d2[element - 1]\n        maxChange = max(M, maxChange)\n        d[element - 1].pop()\n        d2[element] = d2[element] + 1\n        if len(d[element - 1]) == 0:\n            d.pop(element - 1)\n    print(maxChange)", "import math\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    mp1 = {}\n    mp = {}\n    for i in range(n):\n        mp1[v[i]] = mp1.get(v[i], 0) + 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1.get(v[i] + 1, 0) - mp.get(v[i] - 1, 0)\n        mp1[v[i]] -= 1\n        mp[v[i]] = mp.get(v[i], 0) + 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, v2[i])\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "def solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    mp1 = {}\n    mp = {}\n    for i in range(n):\n        mp1[v[i]] = mp1.get(v[i], 0) + 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1.get(v[i] + 1, 0) - mp.get(v[i] - 1, 0)\n        mp1[v[i]] = mp1.get(v[i], 0) - 1\n        mp[v[i]] = mp.get(v[i], 0) + 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, v2[i])\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef mini():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    mini()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import Counter\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return [int(x) for x in input().split()]\n\ndef read_case():\n    n = read_int()\n    a = read_ints()\n    return (n, a)\n\ndef solve(n, a):\n    pre_counts = Counter(a)\n    after_counts = Counter()\n    current = 0\n    best = 0\n    for pos in range(len(a) - 1, -1, -1):\n        value = a[pos]\n        pre_counts[value] -= 1\n        current += pre_counts[value + 1]\n        current -= after_counts[value - 1]\n        after_counts[value] += 1\n        best = max(best, current)\n    return best\ncases = read_int()\nfor case in range(cases):\n    print(solve(*read_case()))", "def solve():\n    num_of_elements = int(input())\n    elements = list(map(int, input().split()))\n    count_dict = {}\n    visited = {}\n    for i in range(num_of_elements):\n        count_dict[elements[i]] = count_dict.get(elements[i], 0) + 1\n    reverse_count = [0] * (num_of_elements + 1)\n    for i in range(num_of_elements - 1, -1, -1):\n        reverse_count[i] += reverse_count[i + 1]\n        reverse_count[i] += count_dict.get(elements[i] + 1, 0)\n        reverse_count[i] -= visited.get(elements[i] - 1, 0)\n        count_dict[elements[i]] -= 1\n        visited[elements[i]] = visited.get(elements[i], 0) + 1\n    max_count = 0\n    for i in range(num_of_elements):\n        max_count = max(max_count, reverse_count[i])\n    print(max_count)\nnum_of_tests = int(input())\nfor i in range(num_of_tests):\n    solve()", "def minInv():\n    n = int(input())\n    v = list(map(int, input().split()))\n    arr = {}\n    arr2 = {}\n    for i in v:\n        arr[i] = arr.get(i, 0) + 1\n    input_list = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        input_list[i] = input_list[i + 1]\n        input_list[i] += arr.get(v[i] + 1, 0)\n        input_list[i] -= arr2.get(v[i] - 1, 0)\n        arr[v[i]] -= 1\n        arr2[v[i]] = arr2.get(v[i], 0) + 1\n    output = 0\n    for i in range(n):\n        output = max(output, input_list[i])\n    print(output)\nfor _ in range(int(input())):\n    minInv()", "from collections import defaultdict\nfor t in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    map1 = defaultdict(int)\n    map2 = defaultdict(int)\n    for i in nums:\n        map1[i] = map1.get(i, 0) + 1\n    arr = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        arr[i] = arr[i + 1]\n        arr[i] = arr[i] + map1[nums[i] + 1]\n        arr[i] = arr[i] - map2[nums[i] - 1]\n        map1[nums[i]] -= 1\n        map2[nums[i]] += 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, arr[i])\n    print(ans)", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    t = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * t\n    suffix = [0] * t\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, t):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[t - 1]] += 1\n    suffix[t - 1] = 0\n    for i in range(t - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * t\n    for i in range(t):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(t - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\n\ndef main():\n    tc = int(input())\n    for _ in range(tc):\n        n = int(input())\n        arr = [int(a) for a in input().split()]\n        if n == 1:\n            print(0)\n            continue\n        (h, h2) = ({}, {})\n        for i in range(n):\n            if arr[i] not in h:\n                h[arr[i]] = 0\n            h[arr[i]] += 1\n            h2[arr[i]] = 0\n        right = [0 for i in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            right[i] = right[i + 1]\n            if arr[i] + 1 in h:\n                right[i] += h[arr[i] + 1]\n            if arr[i] - 1 in h:\n                right[i] -= h2[arr[i] - 1]\n            h[arr[i]] -= 1\n            h2[arr[i]] += 1\n        ans = max(right)\n        print(ans)\nmain()", "import sys\n\ndef main():\n    tc = int(input())\n    for _ in range(tc):\n        n = int(input())\n        arr = [int(a) for a in input().split()]\n        if n == 1:\n            print(0)\n            continue\n        (h, h2) = ({}, {})\n        for i in range(n):\n            if arr[i] not in h:\n                h[arr[i]] = 0\n            h[arr[i]] += 1\n            h2[arr[i]] = 0\n        right = [0 for i in range(n + 1)]\n        for i in range(n - 1, -1, -1):\n            right[i] = right[i + 1]\n            if arr[i] + 1 in h:\n                right[i] += h[arr[i] + 1]\n            if arr[i] - 1 in h:\n                right[i] -= h2[arr[i] - 1]\n            h[arr[i]] -= 1\n            h2[arr[i]] += 1\n        ans = max(right)\n        print(ans)\nmain()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    a = int(input())\n    p = list(map(int, input().split()))\n    prefix = [0] * a\n    suffix = [0] * a\n    zk = defaultdict(int)\n    zk[p[0]] += 1\n    for i in range(1, a):\n        if p[i] + 1 in zk:\n            prefix[i] = zk[p[i] + 1]\n        else:\n            prefix[i] = 0\n        zk[p[i]] += 1\n    zk = defaultdict(int)\n    zk[p[a - 1]] += 1\n    suffix[a - 1] = 0\n    for i in range(a - 2, -1, -1):\n        if p[i] - 1 in zk:\n            suffix[i] = zk[p[i] - 1]\n        else:\n            suffix[i] = 0\n        zk[p[i]] += 1\n    res = [0] * a\n    for i in range(a):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(a - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef krdebhaiabb():\n    raju = int(input())\n    ramu = list(map(int, input().split()))\n    neechewalipower = [0] * raju\n    upperwalipower = [0] * raju\n    arrrreeeee = defaultdict(int)\n    arrrreeeee[ramu[0]] += 1\n    for j in range(1, raju):\n        if ramu[j] + 1 in arrrreeeee:\n            neechewalipower[j] = arrrreeeee[ramu[j] + 1]\n        else:\n            neechewalipower[j] = 0\n        arrrreeeee[ramu[j]] += 1\n    arrrreeeee = defaultdict(int)\n    arrrreeeee[ramu[raju - 1]] += 1\n    upperwalipower[raju - 1] = 0\n    for j in range(raju - 2, -1, -1):\n        if ramu[j] - 1 in arrrreeeee:\n            upperwalipower[j] = arrrreeeee[ramu[j] - 1]\n        else:\n            upperwalipower[j] = 0\n        arrrreeeee[ramu[j]] += 1\n    aaram = [0] * raju\n    for j in range(raju):\n        aaram[j] = neechewalipower[j] - upperwalipower[j]\n    jabab = 0\n    abhikaJoor = 0\n    for j in range(raju - 1, -1, -1):\n        abhikaJoor += aaram[j]\n        if abhikaJoor < 0:\n            abhikaJoor = 0\n        jabab = max(jabab, abhikaJoor)\n    print(jabab)\nnum = int(input())\nfor _ in range(num):\n    krdebhaiabb()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef problem():\n    naac = int(input())\n    aloo = list(map(int, input().split()))\n    pr = [0] * naac\n    sl = [0] * naac\n    Man = defaultdict(int)\n    Man[aloo[0]] += 1\n    for q in range(1, naac):\n        if aloo[q] + 1 in Man:\n            pr[q] = Man[aloo[q] + 1]\n        else:\n            pr[q] = 0\n        Man[aloo[q]] += 1\n    Man = defaultdict(int)\n    Man[aloo[naac - 1]] += 1\n    sl[naac - 1] = 0\n    for q in range(naac - 2, -1, -1):\n        if aloo[q] - 1 in Man:\n            sl[q] = Man[aloo[q] - 1]\n        else:\n            sl[q] = 0\n        Man[aloo[q]] += 1\n    Riya = [0] * naac\n    for n in range(naac):\n        Riya[n] = pr[n] - sl[n]\n    ananta = 0\n    anaa = 0\n    for n in range(naac - 1, -1, -1):\n        anaa += Riya[n]\n        if anaa < 0:\n            anaa = 0\n        ananta = max(ananta, anaa)\n    print(ananta)\nvase = int(input())\nfor _ in range(vase):\n    problem()", "import math\nz2 = int(1000000000.0 + 7)\ntotal = 0\np = [0] * int(1000000.0)\n\ndef factorial():\n    for i in range(int(1000000.0)):\n        if i == 0:\n            p[i] = 1\n        else:\n            p[i] = p[i - 1] % z2 * ((i + 1) % z2)\n\ndef power2(a, b):\n    result = 1\n    while b > 0:\n        if b & 1:\n            result = result * a\n        a = a * a\n        b >>= 1\n    return result\n\ndef solve_problem():\n    n = int(input())\n    v = list(map(int, input().split()))\n    mp1 = {}\n    mp = {}\n    for i in range(n):\n        mp1[v[i]] = mp1.get(v[i], 0) + 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1.get(v[i] + 1, 0) - mp.get(v[i] - 1, 0)\n        mp1[v[i]] -= 1\n        mp[v[i]] = mp.get(v[i], 0) + 1\n    answer = 0\n    for i in range(n):\n        answer = max(answer, v2[i])\n    print(answer)\nt = int(input())\nfor _ in range(t):\n    solve_problem()", "import collections\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    v = list(map(int, input().split()))\n    vv = [0] * (n + 1)\n    mp1 = collections.Counter(v)\n    mp = {}\n    for i in range(n - 1, -1, -1):\n        vv[i] = vv[i + 1]\n        vv[i] += mp1[v[i] + 1]\n        vv[i] -= mp.get(v[i] - 1, 0)\n        mp1[v[i]] -= 1\n        mp[v[i]] = mp.get(v[i], 0) + 1\n    ans = max(vv)\n    print(ans)", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    a = int(input())\n    p = list(map(int, input().split()))\n    prefix = [0] * a\n    suffix = [0] * a\n    zk = defaultdict(int)\n    zk[p[0]] += 1\n    for i in range(1, a):\n        if p[i] + 1 in zk:\n            prefix[i] = zk[p[i] + 1]\n        else:\n            prefix[i] = 0\n        zk[p[i]] += 1\n    zk = defaultdict(int)\n    zk[p[a - 1]] += 1\n    suffix[a - 1] = 0\n    for i in range(a - 2, -1, -1):\n        if p[i] - 1 in zk:\n            suffix[i] = zk[p[i] - 1]\n        else:\n            suffix[i] = 0\n        zk[p[i]] += 1\n    res = [0] * a\n    for i in range(a):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(a - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        try:\n            d1[arr[i]] += 1\n        except:\n            d1[arr[i]] = 1\n    arr2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        arr2[i] = arr2[i + 1]\n        try:\n            arr2[i] = arr2[i] + d1[arr[i] + 1]\n        except:\n            pass\n        try:\n            arr2[i] = arr2[i] - d2[arr[i] - 1]\n        except:\n            pass\n        try:\n            d1[arr[i]] -= 1\n        except:\n            d1[arr[i]] = 0\n        try:\n            d2[arr[i]] += 1\n        except:\n            d2[arr[i]] = 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, arr2[i])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    d = {}\n    cnt = [0] * n\n    for i in range(n):\n        cnt[i] = d.get(arr[i] + 1, 0)\n        d[arr[i]] = d.get(arr[i], 0) + 1\n    d = {}\n    for i in range(n - 1, -1, -1):\n        if i + 1 < n:\n            cnt[i] += cnt[i + 1]\n        cnt[i] -= d.get(arr[i] - 1, 0)\n        d[arr[i]] = d.get(arr[i], 0) + 1\n    print(max(cnt))", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef idjjd():\n    iva = 7\n    dkd = int(input())\n    dwkok = list(map(int, input().split()))\n    wokfwf = [0] * dkd\n    abh = 4\n    smnmnjf = [0] * dkd\n    fnvnvj = defaultdict(int)\n    konde = 2\n    fnvnvj[dwkok[0]] += 1\n    sur = 1\n    for f in range(10):\n        for t in range(4):\n            if konde > abh:\n                abh += 2\n                break\n    for i in range(1, dkd):\n        if dwkok[i] + 1 in fnvnvj:\n            wokfwf[i] = fnvnvj[dwkok[i] + 1]\n        else:\n            wokfwf[i] = 0\n        fnvnvj[dwkok[i]] += 1\n    for l in range(3):\n        for w in range(5):\n            if sur > konde:\n                sur += 3\n                break\n    fnvnvj = defaultdict(int)\n    fnvnvj[dwkok[dkd - 1]] += 1\n    smnmnjf[dkd - 1] = 0\n    while sur == 100:\n        for d in range(15):\n            for s in range(10):\n                if sur > abh:\n                    sur += 2\n                    break\n    for i in range(dkd - 2, -1, -1):\n        if dwkok[i] - 1 in fnvnvj:\n            smnmnjf[i] = fnvnvj[dwkok[i] - 1]\n        else:\n            smnmnjf[i] = 0\n        fnvnvj[dwkok[i]] += 1\n    mjdj = [0] * dkd\n    for i in range(dkd):\n        mjdj[i] = wokfwf[i] - smnmnjf[i]\n    cnnfj = 0\n    snnkfifeio = 0\n    for e in range(20):\n        if abh == 9:\n            abh += konde\n            break\n    for i in range(dkd - 1, -1, -1):\n        snnkfifeio += mjdj[i]\n        if snnkfifeio < 0:\n            snnkfifeio = 0\n        cnnfj = max(cnnfj, snnkfifeio)\n    while abh > iva:\n        for g in range(6):\n            for s in range(2):\n                if iva == 40:\n                    iva += abh\n                    break\n    print(cnnfj)\nfor _ in range(int(input())):\n    idjjd()", "y = 1000000000.0 + 7\nsum = 0\nyo = [0] * int(1000000.0)\n\ndef fun1():\n    for i in range(int(1000000.0)):\n        if i == 0:\n            yo[i] = 1\n        else:\n            yo[i] = yo[i - 1] % y * ((i + 1) % y)\n\ndef fun2(a, b):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a\n        a = a * a\n        b >>= 1\n    return res\n\ndef main():\n    n = int(input())\n    m = [int(x) for x in input().split()]\n    o = {}\n    p = {}\n    for i in range(n):\n        o[m[i]] = o.get(m[i], 0) + 1\n    q = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        q[i] = q[i + 1] + o.get(m[i] + 1, 0) - p.get(m[i] - 1, 0)\n        o[m[i]] = o.get(m[i], 0) - 1\n        p[m[i]] = p.get(m[i], 0) + 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, q[i])\n    print(ans)\nfor _ in range(int(input())):\n    main()\n    print()", "import sys\nfrom collections import defaultdict\n\ndef answer():\n    Nitya = int(input())\n    alue = list(map(int, input().split()))\n    process = [0] * Nitya\n    sol = [0] * Nitya\n    Mum = defaultdict(int)\n    Mum[alue[0]] += 1\n    for l in range(1, Nitya):\n        if alue[l] + 1 in Mum:\n            process[l] = Mum[alue[l] + 1]\n        else:\n            process[l] = 0\n        Mum[alue[l]] += 1\n    Mum = defaultdict(int)\n    Mum[alue[Nitya - 1]] += 1\n    sol[Nitya - 1] = 0\n    for m in range(Nitya - 2, -1, -1):\n        if alue[m] - 1 in Mum:\n            sol[m] = Mum[alue[m] - 1]\n        else:\n            sol[m] = 0\n        Mum[alue[m]] += 1\n    Rhi = [0] * Nitya\n    for m in range(Nitya):\n        Rhi[m] = process[m] - sol[m]\n    samarth = 0\n    chotu = 0\n    for m in range(Nitya - 1, -1, -1):\n        chotu += Rhi[m]\n        if chotu < 0:\n            chotu = 0\n        samarth = max(samarth, chotu)\n    print(samarth)\ncasanova = int(input())\nfor _ in range(casanova):\n    answer()", "import sys\nfrom collections import defaultdict\n\ndef soltion():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    arr = defaultdict(int)\n    arr[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in arr:\n            prefix[i] = arr[v[i] + 1]\n        else:\n            prefix[i] = 0\n        arr[v[i]] += 1\n    arr = defaultdict(int)\n    arr[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in arr:\n            suffix[i] = arr[v[i] - 1]\n        else:\n            suffix[i] = 0\n        arr[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    sum = 0\n    for i in range(n - 1, -1, -1):\n        sum += res[i]\n        if sum < 0:\n            sum = 0\n        ans = max(ans, sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    soltion()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    pehla = int(input())\n    dusra = list(map(int, input().split()))\n    tessra = [0] * pehla\n    chautha = [0] * pehla\n    popo = defaultdict(int)\n    popo[dusra[0]] += 1\n    for f in range(1, pehla):\n        if dusra[f] + 1 in popo:\n            tessra[f] = popo[dusra[f] + 1]\n        else:\n            tessra[f] = 0\n        popo[dusra[f]] += 1\n    popo = defaultdict(int)\n    popo[dusra[pehla - 1]] += 1\n    chautha[pehla - 1] = 0\n    for f in range(pehla - 2, -1, -1):\n        if dusra[f] - 1 in popo:\n            chautha[f] = popo[dusra[f] - 1]\n        else:\n            chautha[f] = 0\n        popo[dusra[f]] += 1\n    res = [0] * pehla\n    for f in range(pehla):\n        res[f] = tessra[f] - chautha[f]\n    hell = 0\n    turnt = 0\n    for f in range(pehla - 1, -1, -1):\n        turnt += res[f]\n        if turnt < 0:\n            turnt = 0\n        hell = max(hell, turnt)\n    print(hell)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nimport sys\nfrom collections import Counter\n\ndef find_good_arrays(A):\n    N = len(A)\n    B = []\n    C = []\n    D = []\n    result = 0\n    for i in range(N):\n        if is_valid(B, C, D, A[i]):\n            B.append(A[i])\n            update_c_and_d(C, D, A[i])\n        else:\n            result += len(B)\n            B = [A[i]]\n            C = []\n            D = []\n            update_c_and_d(C, D, A[i])\n    result += len(B)\n    return result % 10 ** 7\n\ndef is_valid(B, C, D, x):\n    if len(C) == 0:\n        return True\n    if C[-1] == 0:\n        return False\n    if C[-1] * (C[-1] - x) >= 0:\n        return False\n    if Counter(bin(D[-1]))['1'] % 2 == 0:\n        return False\n    return True\n\ndef update_c_and_d(C, D, x):\n    if len(B) > 1:\n        C.append(B[-1] - B[-2])\n        D.append(B[-1] | B[-2])\n\ndef samasya_solving():\n    edo = int(input())\n    modhatidhi = [int(x) for x in input().split()]\n    ento_idi = {}\n    idento_mari = {}\n    for i in range(edo):\n        modhatidhi[i]\n        ento_idi[modhatidhi[i]] = ento_idi.get(modhatidhi[i], 0) + 1\n    anthey_neney = [0] * (edo + 1)\n    for i in range(edo - 1, -1, -1):\n        anthey_neney[i] = anthey_neney[i + 1]\n        anthey_neney[i] = anthey_neney[i] + ento_idi.get(modhatidhi[i] + 1, 0)\n        anthey_neney[i] = anthey_neney[i] - idento_mari.get(modhatidhi[i] - 1, 0)\n        ento_idi[modhatidhi[i]] = ento_idi.get(modhatidhi[i], 0) - 1\n        idento_mari[modhatidhi[i]] = idento_mari.get(modhatidhi[i], 0) + 1\n    sol = 0\n    for i in range(edo):\n        sol = max(sol, anthey_neney[i])\n    print(sol)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    samasya_solving()", "def solve():\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    mp1 = {}\n    mp = {}\n    for i in range(n):\n        mp1[v[i]] = mp1.get(v[i], 0) + 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1.get(v[i] + 1, 0) - mp.get(v[i] - 1, 0)\n        mp1[v[i]] -= 1\n        mp[v[i]] = mp.get(v[i], 0) + 1\n    ans = max(v2)\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def solve():\n    num_of_tests = int(input())\n    arr = [int(x) for x in input().split()]\n    num_count = {}\n    inversions = {}\n    for i in range(num_of_tests):\n        num_count[arr[i]] = num_count.get(arr[i], 0) + 1\n    inverted_nums = [0] * (num_of_tests + 1)\n    for i in range(num_of_tests - 1, -1, -1):\n        inverted_nums[i] = inverted_nums[i + 1] + num_count.get(arr[i] + 1, 0) - inversions.get(arr[i] - 1, 0)\n        num_count[arr[i]] = num_count.get(arr[i], 0) - 1\n        inversions[arr[i]] = inversions.get(arr[i], 0) + 1\n    max_inversions = 0\n    for i in range(num_of_tests):\n        max_inversions = max(max_inversions, inverted_nums[i])\n    print(max_inversions)\nnum_of_cases = int(input())\nfor _ in range(num_of_cases):\n    solve()", "from collections import defaultdict\nm = int(input())\nfor i in range(m):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = [0] * n\n    y = [0] * n\n    q = defaultdict(int)\n    q[a[0]] += 1\n    for j in range(1, n):\n        if a[j] + 1 in q:\n            x[j] = q[a[j] + 1]\n        else:\n            x[j] = 0\n        q[a[j]] += 1\n    q = defaultdict(int)\n    q[a[n - 1]] += 1\n    y[n - 1] = 0\n    for k in range(n - 2, -1, -1):\n        if a[k] - 1 in q:\n            y[k] = q[a[k] - 1]\n        else:\n            y[k] = 0\n        q[a[k]] += 1\n    r = [0] * n\n    for w in range(n):\n        r[w] = x[w] - y[w]\n    s = 0\n    ns = 0\n    for e in range(n - 1, -1, -1):\n        ns += r[e]\n        if ns < 0:\n            ns = 0\n        s = max(s, ns)\n    print(s)", "import sys, threading\nimport math\nfrom os import path\nfrom collections import deque, defaultdict, Counter\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom functools import cmp_to_key\nfrom random import randint\nimport heapq\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\nMAXN = 1123456\n\nclass mydict:\n\n    def __init__(self, func=lambda : 0):\n        self.random = randint(0, 1 << 32)\n        self.default = func\n        self.dict = {}\n\n    def __getitem__(self, key):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            self.dict[mykey] = self.default()\n        return self.dict[mykey]\n\n    def get(self, key, default):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            return default\n        return self.dict[mykey]\n\n    def __setitem__(self, key, item):\n        mykey = self.random ^ key\n        self.dict[mykey] = item\n\n    def getkeys(self):\n        return [self.random ^ i for i in self.dict]\n\n    def __str__(self):\n        return f'{[(self.random ^ i, self.dict[i]) for i in self.dict]}'\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef mod(n):\n    return n % 1000000007\n\ndef solve(t):\n    n = readInts()\n    ar = readList()\n    mp = Counter(ar)\n    prev = set()\n    ans = float('-inf')\n    cur = 0\n    left = mydict(lambda : 0)\n    for i in range(n):\n        cur -= left[ar[i] + 1]\n        cur += mp[ar[i] - 1]\n        prev.add(ar[i])\n        left[ar[i]] += 1\n        mp[ar[i]] -= 1\n        ans = max(ans, cur)\n    print(ans)\n\ndef main():\n    t = 1\n    if path.exists('F:/Comp Programming/input.txt'):\n        sys.stdin = open('F:/Comp Programming/input.txt', 'r')\n        sys.stdout = open('F:/Comp Programming/output1.txt', 'w')\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current = 0\n    for i in range(n - 1, -1, -1):\n        current += res[i]\n        if current < 0:\n            current = 0\n        ans = max(ans, current)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef vikasfun():\n    vikas_num = int(input())\n    vikas_list = list(map(int, input().split()))\n    vikasprefix = [0] * vikas_num\n    vikassuffix = [0] * vikas_num\n    vikas_mp = defaultdict(int)\n    vikas_mp[vikas_list[0]] += 1\n    for vikas in range(1, vikas_num):\n        if vikas_list[vikas] + 1 in vikas_mp:\n            vikasprefix[vikas] = vikas_mp[vikas_list[vikas] + 1]\n        else:\n            vikasprefix[vikas] = 0\n        vikas_mp[vikas_list[vikas]] += 1\n    vikas_mp = defaultdict(int)\n    vikas_mp[vikas_list[vikas_num - 1]] += 1\n    vikassuffix[vikas_num - 1] = 0\n    for vikas in range(vikas_num - 2, -1, -1):\n        if vikas_list[vikas] - 1 in vikas_mp:\n            vikassuffix[vikas] = vikas_mp[vikas_list[vikas] - 1]\n        else:\n            vikassuffix[vikas] = 0\n        vikas_mp[vikas_list[vikas]] += 1\n    vikasres = [0] * vikas_num\n    for vikas in range(vikas_num):\n        vikasres[vikas] = vikasprefix[vikas] - vikassuffix[vikas]\n    vikasans = 0\n    vikassum = 0\n    for vikas in range(vikas_num - 1, -1, -1):\n        vikassum += vikasres[vikas]\n        if vikassum < 0:\n            vikassum = 0\n        vikasans = max(vikasans, vikassum)\n    print(vikasans)\nvikastest = int(input())\nfor x in range(vikastest):\n    vikasfun()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    newvar = int(input())\n    second = list(map(int, input().split()))\n    precode = [0] * newvar\n    postcode = [0] * newvar\n    mp = defaultdict(int)\n    mp[second[0]] += 1\n    for i in range(1, newvar):\n        if second[i] + 1 in mp:\n            precode[i] = mp[second[i] + 1]\n        else:\n            precode[i] = 0\n        mp[second[i]] += 1\n    mp = defaultdict(int)\n    mp[second[newvar - 1]] += 1\n    postcode[newvar - 1] = 0\n    for i in range(newvar - 2, -1, -1):\n        if second[i] - 1 in mp:\n            postcode[i] = mp[second[i] - 1]\n        else:\n            postcode[i] = 0\n        mp[second[i]] += 1\n    res = [0] * newvar\n    for i in range(newvar):\n        res[i] = precode[i] - postcode[i]\n    ans = 0\n    sumofcode = 0\n    for i in range(newvar - 1, -1, -1):\n        sumofcode += res[i]\n        if sumofcode < 0:\n            sumofcode = 0\n        ans = max(ans, sumofcode)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import defaultdict\nff = 1000000000.0 + 7\nsum = 0\n\ndef fac():\n    for i in range(10 ** 6):\n        if i == 0:\n            p[i] = 1\n        else:\n            p[i] = p[i - 1] % ff * ((i + 1) % ff)\n\ndef pow2(a, b):\n    res = 1\n    while b:\n        if b & 1:\n            res *= a\n        a *= a\n        b >>= 1\n    return res\nt = 1\nt = int(input())\nwhile t:\n    n = int(input())\n    lis = list(map(int, input().split()))\n    map0 = defaultdict(int)\n    map1 = defaultdict(int)\n    for i in range(n):\n        if lis[i] in map0:\n            map0[lis[i]] += 1\n        else:\n            map0[lis[i]] = 1\n    lis2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        lis2[i] = lis2[i + 1]\n        lis2[i] += map0[lis[i] + 1]\n        lis2[i] -= map1[lis[i] - 1]\n        map0[lis[i]] -= 1\n        map1[lis[i]] += 1\n    ans = max(lis2)\n    print(ans)\n    t -= 1", "y2 = 1000000000.0 + 7\nsum = 0\np = [0] * int(1000000.0)\n\ndef fac():\n    for i in range(int(1000000.0)):\n        if i == 0:\n            p[i] = 1\n        else:\n            p[i] = p[i - 1] % y2 * ((i + 1) % y2)\n\ndef pow2(a, b):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a\n        a = a * a\n        b >>= 1\n    return res\n\ndef solve():\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    mp1 = {}\n    mp = {}\n    for i in range(n):\n        mp1[v[i]] = mp1.get(v[i], 0) + 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1.get(v[i] + 1, 0) - mp.get(v[i] - 1, 0)\n        mp1[v[i]] = mp1.get(v[i], 0) - 1\n        mp[v[i]] = mp.get(v[i], 0) + 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, v2[i])\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()\n    print()", "import sys\nfrom collections import defaultdict\n\ndef answerfind():\n    rish = int(input())\n    abh = list(map(int, input().split()))\n    prefix = [0] * rish\n    suffix = [0] * rish\n    mpmla = defaultdict(int)\n    mpmla[abh[0]] += 1\n    for i in range(1, rish):\n        if abh[i] + 1 in mpmla:\n            prefix[i] = mpmla[abh[i] + 1]\n        else:\n            prefix[i] = 0\n        mpmla[abh[i]] += 1\n    mpmla = defaultdict(int)\n    mpmla[abh[rish - 1]] += 1\n    suffix[rish - 1] = 0\n    for i in range(rish - 2, -1, -1):\n        if abh[i] - 1 in mpmla:\n            suffix[i] = mpmla[abh[i] - 1]\n        else:\n            suffix[i] = 0\n        mpmla[abh[i]] += 1\n    res = [0] * rish\n    for i in range(rish):\n        res[i] = prefix[i] - suffix[i]\n    answithrish = 0\n    currwithrish = 0\n    for i in range(rish - 1, -1, -1):\n        currwithrish += res[i]\n        if currwithrish < 0:\n            currwithrish = 0\n        answithrish = max(answithrish, currwithrish)\n    print(answithrish)\nt = int(input())\nfor _ in range(t):\n    answerfind()", "import sys\nfrom collections import defaultdict\n\ndef mona():\n    m = int(input())\n    s = list(map(int, input().split()))\n    prefix = [0] * m\n    suffix = [0] * m\n    mp = defaultdict(int)\n    mp[s[0]] += 1\n    for i in range(1, m):\n        if s[i] + 1 in mp:\n            prefix[i] = mp[s[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[s[i]] += 1\n    mp = defaultdict(int)\n    mp[s[m - 1]] += 1\n    suffix[m - 1] = 0\n    for i in range(m - 2, -1, -1):\n        if s[i] - 1 in mp:\n            suffix[i] = mp[s[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[s[i]] += 1\n    res = [0] * m\n    for i in range(m):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(m - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\np = int(input())\nfor _ in range(p):\n    mona()", "from functools import lru_cache\nimport atexit, io\nimport sys\nfrom math import log2\nimport math\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right, insort\nfrom math import gcd\nfrom math import sqrt\nfrom collections import Counter, defaultdict\nfrom heapq import heappush, heappop, heapify\n\nclass FenvickTree:\n\n    def __init__(self, n):\n        self.farr = [0] * (n + 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\nclass FenvTree:\n\n    def __init__(self, arr):\n        arr.insert(0, 0)\n        self.farr = [0]\n        prefix = [0]\n        for i in arr[1:]:\n            prefix.append(prefix[-1] + i)\n        for i in range(1, len(arr)):\n            idash = i - (i & -i)\n            self.farr.append(prefix[i] - prefix[idash])\n\n    def query(self, l, r):\n        return self.prefixSum(r) - self.prefixSum(l - 1)\n\n    def prefixSum(self, idx):\n        s = 0\n        while idx > 0:\n            s += self.farr[idx]\n            idx -= idx & -idx\n        return s\n\n    def update(self, idx, val):\n        while idx < len(self.farr):\n            self.farr[idx] += val\n            idx += idx & -idx\n\nclass DSU:\n\n    def __init__(self, n):\n        self.parent = []\n        self.size = []\n        for i in range(n + 1):\n            self.parent.append(i)\n            self.size.append(1)\n\n    def union(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.size[pu] < self.size[pv]:\n            self.parent[pu] = pv\n            self.size[pv] += self.size[pu]\n        else:\n            self.parent[pv] = pu\n            self.size[pu] += self.size[pv]\n\n    def unionByRank(self, u, v):\n        pu = self.findPar(u)\n        pv = self.findPar(v)\n        if pu == pv:\n            return\n        if self.rank[pu] < self.rank[pv]:\n            self.parent[pu] = pv\n        elif self.rank[pv] < self.rank[pu]:\n            self.parent[pv] = pu\n        else:\n            self.parent[pu] = pv\n            self.rank[pv] += 1\n\n    def findPar(self, node):\n        if self.parent[node] == node:\n            return node\n        self.parent[node] = self.findPar(self.parent[node])\n        return self.parent[node]\n\nclass info:\n\n    def __init__(self, _open=0, _close=0, _full=0):\n        self.open = _open\n        self.close = _close\n        self.full = _full\n\nclass SGTree:\n\n    def __init__(self, n):\n        self.seg = [0 for _ in range(4 * n)]\n\n    def build(self, ind, low, high, arr):\n        if low == high:\n            self.seg[ind] = arr[low]\n            return\n        mid = (low + high) // 2\n        self.build(2 * ind + 1, low, mid, arr)\n        self.build(2 * ind + 2, mid + 1, high, arr)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\n    def query(self, ind, low, high, l, r):\n        if r < low or l > high:\n            return sys.maxsize\n        if low <= l and r >= high:\n            return self.seg[ind]\n        mid = low + high >> 1\n        left = self.query(2 * ind + 1, 0, mid, l, r)\n        right = self.query(2 * ind + 2, mid + 1, high, l, r)\n        return min(left, right)\n\n    def update(self, ind, low, high, i, val):\n        if low == high:\n            self.seg = val\n            return\n        mid = low + high >> 1\n        if i <= mid:\n            self.update(2 * ind + 1, low, mid, i, val)\n        else:\n            self.update(2 * ind + 1, mid + 1, high, i, val)\n        self.seg[ind] = min(self.seg[2 * ind + 1], self.seg[2 * ind + 2])\n\ndef isPalindrome(s):\n    i = 0\n    j = len(s) - 1\n    while i < j:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef IntList():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef getInts():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef getStrs():\n    return sys.stdin.readline().strip()\n\ndef StrList():\n    list(sys.stdin.readline().strip())\n\ndef FloatList():\n    lis = input().split()\n    lis = list(map(float, lis))\n    return lis\n\ndef SieveOfEratosthenes(n, isPrime):\n    isPrime[0] = isPrime[1] = False\n    for i in range(2, n + 1):\n        isPrime[i] = True\n    p = 2\n    while p * p <= n:\n        if isPrime[p]:\n            i = p * p\n            while i <= n:\n                isPrime[i] = False\n                i += p\n        p += 1\n\ndef findPrimePair(n):\n    isPrime = [0] * (n + 1)\n    SieveOfEratosthenes(n, isPrime)\n    for i in range(0, n):\n        if isPrime[i] and isPrime[n - i]:\n            print(i, n - i)\n            return\n\ndef query(ind, low, high, l, r, seg):\n    if r < low or l > high:\n        return info()\n    if low <= l and r >= high:\n        return self.seg[ind]\n    mid = low + high >> 1\n    left = self.query(2 * ind + 1, 0, mid, l, r, seg)\n    right = self.query(2 * ind + 2, mid + 1, high, l, r, seg)\n    return merge(left, right)\n\ndef merge(left, right):\n    ans = info()\n    ans.full = left.full + right.full + min(left.open, right.close)\n    ans.open = left.open + right.open + min(left.open, right.close)\n    ans.close = left.close + right.close + min(left.open, right.close)\n    return ans\n\ndef build(ind, low, high, s, seg):\n    if low == high:\n        seg[ind] = info(s[low] == '(', s[low] == ')', 0)\n        return\n    mid = (low + high) // 2\n    build(2 * ind + 1, low, mid, s, seg)\n    build(2 * ind + 2, mid + 1, high, s, seg)\n    seg[ind] = merge(seg[2 * ind + 1], seg[2 * ind + 2])\n\ndef countN(lis):\n    ans = 0\n    cnt = 0\n    for i in range(len(lis) - 1, -1, -1):\n        if lis[i] == 0:\n            cnt += 1\n        else:\n            ans += cnt\n    return ans\n\nclass Pair:\n\n    def __init__(self, x, y, gcd):\n        self.x = x\n        self.y = y\n        self.gcd = gcd\n\ndef Euclidean(a, b):\n    if b == 0:\n        return Pair(1, 0, a)\n    dash = Euclidean(b, a % b)\n    return Pair(dash.y, dash.x - a // b * dash.y, dash.gcd)\n\ndef chineseRemainder(a1, n1, a2, n2):\n    p = Euclidean(n1, n2)\n    x = p.x\n    gcd = p.gcd\n    if (a1 - a2) % gcd:\n        return -1\n    k = (a1 - a2) // gcd\n    a = a1 - n1 * (k * x % n2 // gcd)\n    lcm = n1 * n2 // gcd\n    if a < 0:\n        a += lcm\n    return a\n\ndef ncr(n, k, md):\n    mod = 998244353\n    tab = [[0 for _ in range(k + 1)] for i in range(n + 1)]\n    for i in range(1, len(tab)):\n        tab[i][0] = 1\n    for i in range(1, len(tab)):\n        for j in range(1, min(i + 1, len(tab[0]))):\n            if i == 1 and j == 1:\n                tab[i][j] = 1\n            else:\n                tab[i][j] = (tab[i - 1][j] + tab[i - 1][j - 1]) % mod\n    return tab\n\ndef repeat(i, j, arr):\n    if i > j:\n        return\n    cnt1 = i\n    cnt2 = j\n    while cnt1 < cnt2:\n        (arr[cnt1], arr[cnt2]) = (arr[cnt2], arr[cnt1])\n        cnt1 += 1\n        cnt2 -= 1\n    if i - 1 >= 0:\n        ele = arr[i - 1]\n        if ele > 0:\n            s = int(sqrt(ele - 1)) + 1\n            first = s * s - ele\n            repeat(first, i - 1, arr)\n    return\nspf = []\n\ndef makeSeive(n):\n    for i in range(n + 1):\n        spf.append(i)\n\ndef seive(n):\n    s = int(sqrt(n + 1))\n    for i in range(2, s + 1):\n        if spf[i] == i:\n            for j in range(i * i, n + 1, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = []\n    while x != 1:\n        ret.append(spf[x])\n        x = x // spf[x]\n    return list(set(ret))\n\ndef getLPS(s):\n    st = '@#' + '#'.join(s) + '#&'\n    c = 0\n    r = 0\n    lps = [0] * len(st)\n    for i in range(1, len(st) - 1):\n        mirror = c - (i - c)\n        if i < r and mirror >= 0:\n            lps[i] = min(lps[mirror], r - i)\n        while st[i + lps[i] + 1] == st[i - lps[i] - 1]:\n            lps[i] += 1\n        if i + lps[i] > r:\n            r = i + lps[i]\n            c = i\n    return max(lps)\nfact = [1]\nmod = 10 ** 9 + 7\n\ndef getFact(n):\n    for i in range(1, n + 1):\n        fact.append(i * fact[-1] % mod)\n\ndef getInv(word):\n    num = math.factorial(len(word))\n    for v in Counter(word).values():\n        num = num * pow(math.factorial(v), mod - 2, mod) % mod\n    return int(num) % (10 ** 9 + 7)\n\ndef subarrayXor(arr, n, m):\n    HashTable = defaultdict(bool)\n    HashTable[0] = 1\n    count = 0\n    curSum = 0\n    for i in arr:\n        curSum ^= i\n        if HashTable[curSum ^ m]:\n            count += HashTable[curSum ^ m]\n        HashTable[curSum] += 1\n    return count\n\ndef get2dPrefixSum(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef get2dPrefixSumCnt(matrix, mid=0):\n    n = len(matrix)\n    m = len(matrix[0])\n    prefix = [[0 for _ in range(m + 1)] for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + matrix[i - 1][j - 1]\n    return prefix\n\ndef getSumRange(r1, c1, r2, c2, prefix):\n    cnt = prefix[r2][c2] - prefix[r2][c1 - 1] - prefix[r1 - 1][c2] + prefix[r1 - 1][c1 - 1]\n    return cnt\n\ndef getPrefix(arr):\n    prefix = [0]\n    for i in arr:\n        prefix.append(prefix[-1] + i)\n    return prefix\n\ndef getInv(arr):\n    cnt = 0\n    ans = []\n    for i in arr:\n        ind = bisect_right(ans, i)\n        cnt += len(ans) - ind\n        insort(ans, i)\n    return cnt\n\ndef solveFor():\n    n = int(input())\n    lis = IntList()\n    c = Counter(lis)\n    c1 = Counter()\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1]\n        v2[i] = v2[i] + c[lis[i] + 1]\n        v2[i] = v2[i] - c1[lis[i] - 1]\n        c[lis[i]] -= 1\n        c1[lis[i]] += 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, v2[i])\n    print(ans)\nt = 1\nt = int(input())\nfor i in range(t):\n    solveFor()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    v = list(map(int, input().split()))\n    second = {}\n    p = {}\n    for i in v:\n        if i in second:\n            second[i] += 1\n        else:\n            second[i] = 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1]\n        v2[i] += second.get(v[i] + 1, 0)\n        v2[i] -= p.get(v[i] - 1, 0)\n        second[v[i]] -= 1\n        if v[i] in p:\n            p[v[i]] += 1\n        else:\n            p[v[i]] = 1\n    ans = 0\n    for i in v2:\n        ans = max(ans, i)\n    print(ans)", "import sys\nfrom collections import defaultdict\n\ndef solution():\n    N = int(input())\n    Val = list(map(int, input().split()))\n    P = [0] * N\n    S = [0] * N\n    M = defaultdict(int)\n    M[Val[0]] += 1\n    for j in range(1, N):\n        if Val[j] + 1 in M:\n            P[j] = M[Val[j] + 1]\n        else:\n            P[j] = 0\n        M[Val[j]] += 1\n    M = defaultdict(int)\n    M[Val[N - 1]] += 1\n    S[N - 1] = 0\n    for k in range(N - 2, -1, -1):\n        if Val[k] - 1 in M:\n            S[k] = M[Val[k] - 1]\n        else:\n            S[k] = 0\n        M[Val[k]] += 1\n    R = [0] * N\n    for j in range(N):\n        R[j] = P[j] - S[j]\n    aastha = 0\n    chini = 0\n    for j in range(N - 1, -1, -1):\n        chini += R[j]\n        if chini < 0:\n            chini = 0\n        aastha = max(aastha, chini)\n    print(aastha)\ncaes = int(input())\nfor _ in range(caes):\n    solution()", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    mpdef1 = defaultdict(int)\n    mpdef = defaultdict(int)\n    for i in range(n):\n        mpdef1[arr[i]] += 1\n    nums = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        nums[i] += nums[i + 1]\n        nums[i] += mpdef1[arr[i] + 1]\n        nums[i] -= mpdef[arr[i] - 1]\n        mpdef1[arr[i]] -= 1\n        mpdef[arr[i]] += 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, nums[i])\n    print(ans)", "from collections import defaultdict\n\ndef N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\n\ndef merge(v, ans, l, mid, h):\n    t = []\n    i = l\n    j = mid + 1\n    while i < mid + 1 and j <= h:\n        if v[i][0] > v[j][0]:\n            ans[v[i][1]] += h - j + 1\n            t.append(v[i])\n            i += 1\n        else:\n            t.append(v[j])\n            j += 1\n    while i <= mid:\n        t.append(v[i])\n        i += 1\n    while j <= h:\n        t.append(v[j])\n        j += 1\n    k = 0\n    i = l\n    while i <= h:\n        v[i] = t[k]\n        i += 1\n        k += 1\n\ndef mergesort(v, ans, i, j):\n    if i < j:\n        mid = (i + j) // 2\n        mergesort(v, ans, i, mid)\n        mergesort(v, ans, mid + 1, j)\n        merge(v, ans, i, mid, j)\n\ndef constructLowerArray(arr, n):\n    v = []\n    for i in range(n):\n        v.append([arr[i], i])\n    ans = [0] * n\n    mergesort(v, ans, 0, n - 1)\n    return (ans, sum(ans))\n\ndef factors(n: int) -> list:\n    s = set()\n    step = 2 if n % 2 else 1\n    for i in range(1, n ** 0.5 + 1, step):\n        if n % i == 0:\n            s.add(i)\n            s.add(n // i)\n    return factors\nfor _ in range(N()):\n    n = N()\n    dp = [0 for i in range(n + 1)]\n    if 'codechef' == 28226329:\n        print('Tanmay')\n    d1 = defaultdict(int)\n    a = A()\n    d2 = defaultdict(int)\n    for i in a:\n        d1[i] += 1\n    for i in range(n - 1, -1, -1):\n        dp[i] = dp[i + 1] - d2[a[i] - 1] + d1[1 + a[i]]\n        d2[a[i]] += 1\n        d1[a[i]] -= 1\n    print(max(dp))", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "from collections import Counter\nfor j in range(int(input())):\n    x = int(input())\n    val = list(map(int, input().split()))\n    mp_1 = Counter(val)\n    m = {}\n    v_2 = [0] * (x + 1)\n    for i in range(x - 1, -1, -1):\n        v_2[i] += v_2[i + 1]\n        v_2[i] += mp_1[val[i] + 1]\n        v_2[i] -= m.get(val[i] - 1, 0)\n        mp_1[val[i]] -= 1\n        m[val[i]] = m.get(val[i], 0) + 1\n    answer = 0\n    for i in range(x):\n        answer = max(answer, v_2[i])\n    print(answer)", "def apple():\n    banana = int(input())\n    orange = list(map(int, input().split()))\n    mercedes = {}\n    porsche = {}\n    for europe in range(banana):\n        mercedes[orange[europe]] = mercedes.get(orange[europe], 0) + 1\n    ford = [0] * (banana + 1)\n    for europe in range(banana - 1, -1, -1):\n        ford[europe] = ford[europe + 1] + mercedes.get(orange[europe] + 1, 0) - porsche.get(orange[europe] - 1, 0)\n        mercedes[orange[europe]] -= 1\n        porsche[orange[europe]] = porsche.get(orange[europe], 0) + 1\n    microsoft = 0\n    for europe in range(banana):\n        microsoft = max(microsoft, ford[europe])\n    print(microsoft)\napple_count = int(input())\nfor i in range(apple_count):\n    apple()", "from collections import Counter\nfor j in range(int(input())):\n    x = int(input())\n    val = list(map(int, input().split()))\n    mp_1 = Counter(val)\n    m = {}\n    v_2 = [0] * (x + 1)\n    for i in range(x - 1, -1, -1):\n        v_2[i] += v_2[i + 1]\n        v_2[i] += mp_1[val[i] + 1]\n        v_2[i] -= m.get(val[i] - 1, 0)\n        mp_1[val[i]] -= 1\n        m[val[i]] = m.get(val[i], 0) + 1\n    answer = 0\n    for i in range(x):\n        answer = max(answer, v_2[i])\n    print(answer)", "def ans(arr):\n    plus = []\n    for i in arr:\n        plus.append(0)\n    mp = {}\n    for ii in range(len(arr)):\n        i = arr[ii]\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n        if i + 1 in mp:\n            plus[ii] = mp[i + 1]\n    j = 0\n    i = 0\n    ans = 0\n    temp = 0\n    c = {}\n    while j < len(arr):\n        if temp <= 0:\n            while i < j:\n                temp -= plus[i]\n                if arr[i] - 1 in c:\n                    temp += c[arr[i] - 1]\n                c[arr[i]] -= 1\n                ans = max(temp, ans)\n                i += 1\n            temp = 0\n            c = {}\n        temp += plus[j]\n        if arr[j] + 1 in c:\n            temp -= c[arr[j] + 1]\n        if arr[j] in c:\n            c[arr[j]] += 1\n        else:\n            c[arr[j]] = 1\n        ans = max(temp, ans)\n        j += 1\n    while i < j:\n        temp -= plus[i]\n        if arr[i] - 1 in c:\n            temp += c[arr[i] - 1]\n        c[arr[i]] -= 1\n        ans = max(temp, ans)\n        i += 1\n    return ans\nfor _ in range(int(input())):\n    input()\n    print(ans(list(map(int, input().split()))))", "t = int(input())\nfor _ in range(t):\n    num_of_elements = int(input())\n    array = list(map(int, input().split()))\n    frequency_map1 = {}\n    frequency_map2 = {}\n    for i in range(num_of_elements):\n        frequency_map1[array[i]] = frequency_map1.get(array[i], 0) + 1\n    result_array = [0] * (num_of_elements + 1)\n    for i in range(num_of_elements - 1, -1, -1):\n        result_array[i] = result_array[i + 1]\n        result_array[i] += frequency_map1.get(array[i] + 1, 0)\n        result_array[i] -= frequency_map2.get(array[i] - 1, 0)\n        frequency_map1[array[i]] = frequency_map1.get(array[i], 0) - 1\n        frequency_map2[array[i]] = frequency_map2.get(array[i], 0) + 1\n    final_result = 0\n    for i in range(num_of_elements):\n        final_result = max(final_result, result_array[i])\n    print(final_result)", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    num = int(input())\n    vv = list(map(int, input().split()))\n    pre = [0] * num\n    suf = [0] * num\n    m = defaultdict(int)\n    m[vv[0]] += 1\n    for i in range(1, num):\n        if vv[i] + 1 in m:\n            pre[i] = m[vv[i] + 1]\n        else:\n            pre[i] = 0\n        m[vv[i]] += 1\n    m = defaultdict(int)\n    m[vv[num - 1]] += 1\n    suf[num - 1] = 0\n    for i in range(num - 2, -1, -1):\n        if vv[i] - 1 in m:\n            suf[i] = m[vv[i] - 1]\n        else:\n            suf[i] = 0\n        m[vv[i]] += 1\n    r = [0] * num\n    for i in range(num):\n        r[i] = pre[i] - suf[i]\n    answer = 0\n    c_sum = 0\n    for i in range(num - 1, -1, -1):\n        c_sum += r[i]\n        if c_sum < 0:\n            c_sum = 0\n        answer = max(answer, c_sum)\n    print(answer)\nT = int(input())\nfor _ in range(T):\n    solve()", "def solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    mp1 = {}\n    mp = {}\n    for i in range(n):\n        mp1[v[i]] = mp1.get(v[i], 0) + 1\n    v2 = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        v2[i] = v2[i + 1] + mp1.get(v[i] + 1, 0) - mp.get(v[i] - 1, 0)\n        mp1[v[i]] -= 1\n        mp[v[i]] = mp.get(v[i], 0) + 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, v2[i])\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def resolve():\n    n = int(input())\n    inp = list(map(int, input().split()))\n    prashu = dict()\n    shivuuu = dict()\n    for i in range(n):\n        if inp[i] in prashu:\n            prashu[inp[i]] += 1\n        else:\n            prashu[inp[i]] = 1\n    chinnuuuuu = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        chinnuuuuu[i] = chinnuuuuu[i + 1]\n        if inp[i] + 1 in prashu:\n            chinnuuuuu[i] += prashu[inp[i] + 1]\n        if inp[i] - 1 in shivuuu:\n            chinnuuuuu[i] -= shivuuu[inp[i] - 1]\n        if inp[i] in prashu:\n            prashu[inp[i]] -= 1\n        if inp[i] in shivuuu:\n            shivuuu[inp[i]] += 1\n        else:\n            shivuuu[inp[i]] = 1\n    samadanam = 0\n    for i in range(n):\n        samadanam = max(samadanam, chinnuuuuu[i])\n    print(samadanam)\nfor _ in range(int(input())):\n    resolve()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    nuna = int(input())\n    vella = list(map(int, input().split()))\n    prefix = [0] * nuna\n    suffix = [0] * nuna\n    mcp = defaultdict(int)\n    mcp[vella[0]] += 1\n    for i in range(1, nuna):\n        if vella[i] + 1 in mcp:\n            prefix[i] = mcp[vella[i] + 1]\n        else:\n            prefix[i] = 0\n        mcp[vella[i]] += 1\n    mcp = defaultdict(int)\n    mcp[vella[nuna - 1]] += 1\n    suffix[nuna - 1] = 0\n    for i in range(nuna - 2, -1, -1):\n        if vella[i] - 1 in mcp:\n            suffix[i] = mcp[vella[i] - 1]\n        else:\n            suffix[i] = 0\n        mcp[vella[i]] += 1\n    res = [0] * nuna\n    for i in range(nuna):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(nuna - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\ntesting = int(input())\nfor _ in range(testing):\n    solve()", "import sys\nfrom collections import defaultdict\n\ndef solve():\n    n = int(input())\n    v = list(map(int, input().split()))\n    prefix = [0] * n\n    suffix = [0] * n\n    mp = defaultdict(int)\n    mp[v[0]] += 1\n    for i in range(1, n):\n        if v[i] + 1 in mp:\n            prefix[i] = mp[v[i] + 1]\n        else:\n            prefix[i] = 0\n        mp[v[i]] += 1\n    mp = defaultdict(int)\n    mp[v[n - 1]] += 1\n    suffix[n - 1] = 0\n    for i in range(n - 2, -1, -1):\n        if v[i] - 1 in mp:\n            suffix[i] = mp[v[i] - 1]\n        else:\n            suffix[i] = 0\n        mp[v[i]] += 1\n    res = [0] * n\n    for i in range(n):\n        res[i] = prefix[i] - suffix[i]\n    ans = 0\n    current_sum = 0\n    for i in range(n - 1, -1, -1):\n        current_sum += res[i]\n        if current_sum < 0:\n            current_sum = 0\n        ans = max(ans, current_sum)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "MOD = int(1000000000.0 + 7)\n\ndef pow2(a, b):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a % MOD\n        a = a * a % MOD\n        b >>= 1\n    return res\n\ndef solve():\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    freq_map = {}\n    count_map = {}\n    for i in range(n):\n        freq_map[arr[i]] = freq_map.get(arr[i], 0) + 1\n    res = [0 for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        res[i] += res[i + 1]\n        res[i] += freq_map.get(arr[i] + 1, 0)\n        res[i] -= count_map.get(arr[i] - 1, 0)\n        freq_map[arr[i]] = freq_map.get(arr[i], 0) - 1\n        count_map[arr[i]] = count_map.get(arr[i], 0) + 1\n    ans = 0\n    for i in range(n):\n        ans = max(ans, res[i])\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()"]