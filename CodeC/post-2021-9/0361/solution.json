["for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "def check_zero(left, right, bit_r, l):\n    for i in range(l):\n        if len(bit_r) - 1 - i > 1:\n            if bit_r[len(bit_r) - 1 - i] == '0':\n                left[l - 1 - i] = 0\n                right[l - 1 - i] = 0\n        else:\n            left[l - 1 - i] = 0\n            right[l - 1 - i] = 0\n\ndef check_one(left, right, bit_r, l):\n    for i in range(l):\n        if left[l - 1 - i] + right[l - 1 - i] == -1:\n            if (len(bit_r) - 1 - i > 1) & (bit_r[len(bit_r) - 1 - i] == '1'):\n                if left[l - 1 - i] == -1:\n                    left[l - 1 - i] = 1\n                if right[l - 1 - i] == -1:\n                    right[l - 1 - i] = 1\n        if left[l - 1 - i] + right[l - 1 - i] == 0:\n            if (len(bit_r) - 1 - i > 1) & (bit_r[len(bit_r) - 1 - i] == '1'):\n                return False\n    return True\nt = int(input())\nfor i in range(t):\n    (P, Q, R) = map(int, input().split())\n    bit_P = bin(P)\n    bit_Q = bin(Q)\n    bit_R = bin(R)\n    l = max(len(bit_P), len(bit_Q), len(bit_R)) - 2\n    list_A = list((-1 for i in range(l)))\n    list_B = list_A.copy()\n    list_C = list_A.copy()\n    check_zero(list_A, list_B, bit_P, l)\n    check_zero(list_C, list_B, bit_Q, l)\n    check_zero(list_A, list_C, bit_R, l)\n    result = 0\n    if all([check_one(list_A, list_B, bit_P, l), check_one(list_C, list_B, bit_Q, l), check_one(list_A, list_C, bit_R, l)]):\n        result = 1\n        for i in range(l):\n            if all(list((clist[i] == -1 for clist in [list_A, list_B, list_C]))):\n                result = result * 4\n    print(result)", "def check_zero(left, right, bit_r, l):\n    for i in range(l):\n        if len(bit_r) - 1 - i > 1:\n            if bit_r[len(bit_r) - 1 - i] == '0':\n                left[l - 1 - i] = 0\n                right[l - 1 - i] = 0\n        else:\n            left[l - 1 - i] = 0\n            right[l - 1 - i] = 0\n\ndef check_one(left, right, bit_r, l):\n    for i in range(l):\n        if left[l - 1 - i] + right[l - 1 - i] == -1:\n            if (len(bit_r) - 1 - i > 1) & (bit_r[len(bit_r) - 1 - i] == '1'):\n                if left[l - 1 - i] == -1:\n                    left[l - 1 - i] = 1\n                if right[l - 1 - i] == -1:\n                    right[l - 1 - i] = 1\n        if left[l - 1 - i] + right[l - 1 - i] == 0:\n            if (len(bit_r) - 1 - i > 1) & (bit_r[len(bit_r) - 1 - i] == '1'):\n                return False\n    return True\nt = int(input())\nfor i in range(t):\n    (P, Q, R) = map(int, input().split())\n    bit_P = bin(P)\n    bit_Q = bin(Q)\n    bit_R = bin(R)\n    l = max(len(bit_P), len(bit_Q), len(bit_R)) - 2\n    list_A = list((-1 for i in range(l)))\n    list_B = list_A.copy()\n    list_C = list_A.copy()\n    check_zero(list_A, list_B, bit_P, l)\n    check_zero(list_C, list_B, bit_Q, l)\n    check_zero(list_A, list_C, bit_R, l)\n    result = 0\n    if all([check_one(list_A, list_B, bit_P, l), check_one(list_C, list_B, bit_Q, l), check_one(list_A, list_C, bit_R, l)]):\n        result = 1\n        for i in range(l):\n            if all(list((clist[i] == -1 for clist in [list_A, list_B, list_C]))):\n                result = result * 4\n    print(result)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = (1, 0, 1, 4)\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "from collections import deque\ncase = int(input())\nfor _ in range(case):\n    (p, q, r) = map(int, input().split(' '))\n    one = 0\n    two = 0\n    three = 0\n    while p > 0 or q > 0 or r > 0:\n        csum = (p & 1) + (q & 1) + (r & 1)\n        if csum == 1:\n            one += 1\n        elif csum == 2:\n            two += 1\n        elif csum == 3:\n            three += 1\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    if one == 0 and two == 0 and (three == 0):\n        print(1)\n        continue\n    if one > 0:\n        print(0)\n        continue\n    elif three == 0:\n        print(1)\n        continue\n    elif three > 0:\n        print(pow(4, three))\n        continue", "for _ in range(int(input())):\n    lst0 = [int(x) for x in input().split()]\n    lst1 = [0 for i in range(20)]\n    for i in range(3):\n        j = 0\n        while lst0[i] > 0:\n            lst1[j] += lst0[i] % 2\n            j += 1\n            lst0[i] //= 2\n    ans = 1\n    for i in range(20):\n        if lst1[i] == 3:\n            ans *= 4\n        elif lst1[i] == 1:\n            ans *= 0\n    print(ans)", "for _ in range(int(input())):\n    lst0 = [int(x) for x in input().split()]\n    lst1 = [0 for i in range(20)]\n    for i in range(3):\n        j = 0\n        while lst0[i] > 0:\n            lst1[j] += lst0[i] % 2\n            j += 1\n            lst0[i] //= 2\n    ans = 1\n    for i in range(20):\n        if lst1[i] == 3:\n            ans *= 4\n        elif lst1[i] == 1:\n            ans *= 0\n    print(ans)", "for _ in range(int(input())):\n    lst0 = [int(x) for x in input().split()]\n    lst1 = [0 for i in range(20)]\n    for i in range(3):\n        j = 0\n        while lst0[i] > 0:\n            lst1[j] += lst0[i] % 2\n            j += 1\n            lst0[i] //= 2\n    ans = 1\n    for i in range(20):\n        if lst1[i] == 3:\n            ans *= 4\n        elif lst1[i] == 1:\n            ans *= 0\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "mat = {(0, 0, 0): 1, (0, 0, 1): 0, (0, 1, 0): 0, (0, 1, 1): 1, (1, 0, 0): 0, (1, 0, 1): 1, (1, 1, 0): 1, (1, 1, 1): 4}\nt = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    ans = 1\n    while p or q or r:\n        x = p % 2\n        y = q % 2\n        z = r % 2\n        ans *= mat[x, y, z]\n        p //= 2\n        q //= 2\n        r //= 2\n    print(ans)", "mat = {(0, 0, 0): 1, (0, 0, 1): 0, (0, 1, 0): 0, (0, 1, 1): 1, (1, 0, 0): 0, (1, 0, 1): 1, (1, 1, 0): 1, (1, 1, 1): 4}\nt = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    ans = 1\n    while p or q or r:\n        x = p % 2\n        y = q % 2\n        z = r % 2\n        ans *= mat[x, y, z]\n        p //= 2\n        q //= 2\n        r //= 2\n    print(ans)", "mat = {(0, 0, 0): 1, (0, 0, 1): 0, (0, 1, 0): 0, (0, 1, 1): 1, (1, 0, 0): 0, (1, 0, 1): 1, (1, 1, 0): 1, (1, 1, 1): 4}\nt = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    ans = 1\n    while p or q or r:\n        x = p % 2\n        y = q % 2\n        z = r % 2\n        ans *= mat[x, y, z]\n        p //= 2\n        q //= 2\n        r //= 2\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (P, Q, R) = map(int, input().split())\n    poss = 1\n    while P != 0 or Q != 0 or R != 0:\n        bP = P & 1\n        bQ = Q & 1\n        bR = R & 1\n        btcnt = 0\n        if bP:\n            if bQ and bR:\n                btcnt += 2\n            if bQ:\n                btcnt += 1\n            if bR:\n                btcnt += 1\n        elif bQ == bR:\n            btcnt += 1\n        P = P >> 1\n        Q = Q >> 1\n        R = R >> 1\n        poss *= btcnt\n    print(poss)", "T = int(input())\nfor _ in range(T):\n    (P, Q, R) = map(int, input().split())\n    poss = 1\n    while P != 0 or Q != 0 or R != 0:\n        bP = P & 1\n        bQ = Q & 1\n        bR = R & 1\n        btcnt = 0\n        if bP:\n            if bQ and bR:\n                btcnt += 2\n            if bQ:\n                btcnt += 1\n            if bR:\n                btcnt += 1\n        elif bQ == bR:\n            btcnt += 1\n        P = P >> 1\n        Q = Q >> 1\n        R = R >> 1\n        poss *= btcnt\n    print(poss)", "T = int(input())\nfor temp in range(T):\n    (P, Q, R) = map(int, input().split())\n    All = P | Q | R\n    a = All ^ Q\n    b = All ^ R\n    c = All ^ P\n    common = All ^ a ^ b ^ c\n    A = a | common\n    B = b | common\n    C = c | common\n    if All != P | Q:\n        output = 0\n    elif All != Q | R:\n        output = 0\n    elif All != R | P:\n        output = 0\n    else:\n        output = 4 ** bin(common).count('1')\n    print(output)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    cnt = 0\n    while p or q or r:\n        (pd, qd, rd) = (p % 2, q % 2, r % 2)\n        sm = pd + qd + rd\n        if sm == 3:\n            cnt += 2\n        elif sm == 1:\n            cnt = -1\n            break\n        p //= 2\n        q //= 2\n        r //= 2\n    if cnt == -1:\n        print(0)\n    else:\n        print(2 ** cnt)", "for _ in range(int(input())):\n    (AVB, BVC, AVC) = map(int, input().split())\n    multiplier = 1\n    for j in range(20):\n        currentBit = 2 ** (20 - j - 1)\n        count = 0\n        if AVB >= currentBit:\n            AVB -= currentBit\n            count += 1\n        if BVC >= currentBit:\n            BVC -= currentBit\n            count += 1\n        if AVC >= currentBit:\n            AVC -= currentBit\n            count += 1\n        if count == 3:\n            multiplier *= 4\n        if count == 1:\n            multiplier *= 0\n            break\n    print(multiplier)", "for _ in range(int(input())):\n    (P, Q, R) = list(map(int, input().split()))\n    p = str(bin(P))[2:]\n    q = str(bin(Q))[2:]\n    r = str(bin(R))[2:]\n    pl = len(p)\n    ql = len(q)\n    rl = len(r)\n    ml = max(pl, ql, rl)\n    p = '0' * (ml - pl) + p\n    r = '0' * (ml - rl) + r\n    q = '0' * (ml - ql) + q\n    ans = 1\n    flag = True\n    for i in range(ml):\n        if int(p[i]) + int(q[i]) + int(r[i]) == 1:\n            flag = False\n            break\n        elif int(p[i]) + int(q[i]) + int(r[i]) == 3:\n            ans *= 4\n    if flag:\n        print(ans)\n    else:\n        print(0)", "POPCOUNT_TABLE10 = [0] * 2 ** 10\nfor index in range(len(POPCOUNT_TABLE10)):\n    POPCOUNT_TABLE10[index] = (index & 1) + POPCOUNT_TABLE10[index >> 1]\n\ndef dpopcount20_table10(v):\n    return POPCOUNT_TABLE10[v & 1023] + POPCOUNT_TABLE10[v >> 10 & 1023] << 1\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(1 << dpopcount20_table10(a) if p ^ q ^ r == (a := (p & q & r)) else 0)", "POPCOUNT_TABLE10 = [0] * 2 ** 10\nfor index in range(len(POPCOUNT_TABLE10)):\n    POPCOUNT_TABLE10[index] = (index & 1) + POPCOUNT_TABLE10[index >> 1]\n\ndef dpopcount20_table10(v):\n    return POPCOUNT_TABLE10[v & 1023] + POPCOUNT_TABLE10[v >> 10 & 1023] << 1\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(1 << dpopcount20_table10(a) if p ^ q ^ r == (a := (p & q & r)) else 0)", "from array import array\nPOPCOUNT_TABLE10 = array('B', [0] * 2 ** 10)\nfor index in range(len(POPCOUNT_TABLE10)):\n    POPCOUNT_TABLE10[index] = (index & 1) + POPCOUNT_TABLE10[index >> 1]\n\ndef dpopcount20_table10(v):\n    return POPCOUNT_TABLE10[v & 1023] + POPCOUNT_TABLE10[v >> 10 & 1023] << 1\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(1 << dpopcount20_table10(a) if p ^ q ^ r == (a := (p & q & r)) else 0)", "POPCOUNT_TABLE10 = [0] * 2 ** 10\nfor index in range(len(POPCOUNT_TABLE10)):\n    POPCOUNT_TABLE10[index] = (index & 1) + POPCOUNT_TABLE10[index >> 1]\n\ndef dpopcount20_table10(v):\n    return POPCOUNT_TABLE10[v & 1023] + POPCOUNT_TABLE10[v >> 10 & 1023] << 1\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(1 << dpopcount20_table10(a) if p ^ q ^ r == (a := (p & q & r)) else 0)", "POPCOUNT_TABLE10 = [0] * 2 ** 10\nfor index in range(len(POPCOUNT_TABLE10)):\n    POPCOUNT_TABLE10[index] = (index & 1) + POPCOUNT_TABLE10[index >> 1]\n\ndef popcount20_table10(v):\n    return POPCOUNT_TABLE10[v & 1023] + POPCOUNT_TABLE10[v >> 10 & 1023] << 1\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(1 << popcount20_table10(a) if p ^ q ^ r == (a := (p & q & r)) else 0)", "POPCOUNT_TABLE10 = [0] * 2 ** 10\nfor index in range(len(POPCOUNT_TABLE10)):\n    POPCOUNT_TABLE10[index] = (index & 1) + POPCOUNT_TABLE10[index >> 1]\n\ndef popcount20_table10(v):\n    return POPCOUNT_TABLE10[v & 1023] + POPCOUNT_TABLE10[v >> 10 & 1023]\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(1 << 2 * popcount20_table10(a) if p ^ q ^ r == (a := (p & q & r)) else 0)", "POPCOUNT_TABLE16 = [0] * 2 ** 16\nfor index in range(len(POPCOUNT_TABLE16)):\n    POPCOUNT_TABLE16[index] = (index & 1) + POPCOUNT_TABLE16[index >> 1]\n\ndef popcount32_table16(v):\n    return POPCOUNT_TABLE16[v & 65535] + POPCOUNT_TABLE16[v >> 16 & 65535]\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(1 << 2 * popcount32_table16(a) if p ^ q ^ r == (a := (p & q & r)) else 0)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(1 << 2 * bin(a).count('1') if p ^ q ^ r == (a := (p & q & r)) else 0)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print((1, 0, 1, 4)[(p & 1) + (q & 1) + (r & 1)] * (1, 0, 1, 4)[(p >> 1 & 1) + (q >> 1 & 1) + (r >> 1 & 1)] * (1, 0, 1, 4)[(p >> 2 & 1) + (q >> 2 & 1) + (r >> 2 & 1)] * (1, 0, 1, 4)[(p >> 3 & 1) + (q >> 3 & 1) + (r >> 3 & 1)] * (1, 0, 1, 4)[(p >> 4 & 1) + (q >> 4 & 1) + (r >> 4 & 1)] * (1, 0, 1, 4)[(p >> 5 & 1) + (q >> 5 & 1) + (r >> 5 & 1)] * (1, 0, 1, 4)[(p >> 6 & 1) + (q >> 6 & 1) + (r >> 6 & 1)] * (1, 0, 1, 4)[(p >> 7 & 1) + (q >> 7 & 1) + (r >> 7 & 1)] * (1, 0, 1, 4)[(p >> 8 & 1) + (q >> 8 & 1) + (r >> 8 & 1)] * (1, 0, 1, 4)[(p >> 9 & 1) + (q >> 9 & 1) + (r >> 9 & 1)] * (1, 0, 1, 4)[(p >> 10 & 1) + (q >> 10 & 1) + (r >> 10 & 1)] * (1, 0, 1, 4)[(p >> 11 & 1) + (q >> 11 & 1) + (r >> 11 & 1)] * (1, 0, 1, 4)[(p >> 12 & 1) + (q >> 12 & 1) + (r >> 12 & 1)] * (1, 0, 1, 4)[(p >> 13 & 1) + (q >> 13 & 1) + (r >> 13 & 1)] * (1, 0, 1, 4)[(p >> 14 & 1) + (q >> 14 & 1) + (r >> 14 & 1)] * (1, 0, 1, 4)[(p >> 15 & 1) + (q >> 15 & 1) + (r >> 15 & 1)] * (1, 0, 1, 4)[(p >> 16 & 1) + (q >> 16 & 1) + (r >> 16 & 1)] * (1, 0, 1, 4)[(p >> 17 & 1) + (q >> 17 & 1) + (r >> 17 & 1)] * (1, 0, 1, 4)[(p >> 18 & 1) + (q >> 18 & 1) + (r >> 18 & 1)] * (1, 0, 1, 4)[(p >> 19 & 1) + (q >> 19 & 1) + (r >> 19 & 1)])", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print((1, 0, 1, 4)[(p & 1) + (q & 1) + (r & 1)] * (1, 0, 1, 4)[(p >> 1 & 1) + (q >> 1 & 1) + (r >> 1 & 1)] * (1, 0, 1, 4)[(p >> 2 & 1) + (q >> 2 & 1) + (r >> 2 & 1)] * (1, 0, 1, 4)[(p >> 3 & 1) + (q >> 3 & 1) + (r >> 3 & 1)] * (1, 0, 1, 4)[(p >> 4 & 1) + (q >> 4 & 1) + (r >> 4 & 1)] * (1, 0, 1, 4)[(p >> 5 & 1) + (q >> 5 & 1) + (r >> 5 & 1)] * (1, 0, 1, 4)[(p >> 6 & 1) + (q >> 6 & 1) + (r >> 6 & 1)] * (1, 0, 1, 4)[(p >> 7 & 1) + (q >> 7 & 1) + (r >> 7 & 1)] * (1, 0, 1, 4)[(p >> 8 & 1) + (q >> 8 & 1) + (r >> 8 & 1)] * (1, 0, 1, 4)[(p >> 9 & 1) + (q >> 9 & 1) + (r >> 9 & 1)] * (1, 0, 1, 4)[(p >> 10 & 1) + (q >> 10 & 1) + (r >> 10 & 1)] * (1, 0, 1, 4)[(p >> 11 & 1) + (q >> 11 & 1) + (r >> 11 & 1)] * (1, 0, 1, 4)[(p >> 12 & 1) + (q >> 12 & 1) + (r >> 12 & 1)] * (1, 0, 1, 4)[(p >> 13 & 1) + (q >> 13 & 1) + (r >> 13 & 1)] * (1, 0, 1, 4)[(p >> 14 & 1) + (q >> 14 & 1) + (r >> 14 & 1)] * (1, 0, 1, 4)[(p >> 15 & 1) + (q >> 15 & 1) + (r >> 15 & 1)] * (1, 0, 1, 4)[(p >> 16 & 1) + (q >> 16 & 1) + (r >> 16 & 1)] * (1, 0, 1, 4)[(p >> 17 & 1) + (q >> 17 & 1) + (r >> 17 & 1)] * (1, 0, 1, 4)[(p >> 18 & 1) + (q >> 18 & 1) + (r >> 18 & 1)] * (1, 0, 1, 4)[(p >> 19 & 1) + (q >> 19 & 1) + (r >> 19 & 1)])", "from functools import reduce\nfrom operator import mul\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(((p & 1) + (q & 1) + (r & 1) - 1) ** 2 * ((p >> 1 & 1) + (q >> 1 & 1) + (r >> 1 & 1) - 1) ** 2 * ((p >> 2 & 1) + (q >> 2 & 1) + (r >> 2 & 1) - 1) ** 2 * ((p >> 3 & 1) + (q >> 3 & 1) + (r >> 3 & 1) - 1) ** 2 * ((p >> 4 & 1) + (q >> 4 & 1) + (r >> 4 & 1) - 1) ** 2 * ((p >> 5 & 1) + (q >> 5 & 1) + (r >> 5 & 1) - 1) ** 2 * ((p >> 6 & 1) + (q >> 6 & 1) + (r >> 6 & 1) - 1) ** 2 * ((p >> 7 & 1) + (q >> 7 & 1) + (r >> 7 & 1) - 1) ** 2 * ((p >> 8 & 1) + (q >> 8 & 1) + (r >> 8 & 1) - 1) ** 2 * ((p >> 9 & 1) + (q >> 9 & 1) + (r >> 9 & 1) - 1) ** 2 * ((p >> 10 & 1) + (q >> 10 & 1) + (r >> 10 & 1) - 1) ** 2 * ((p >> 11 & 1) + (q >> 11 & 1) + (r >> 11 & 1) - 1) ** 2 * ((p >> 12 & 1) + (q >> 12 & 1) + (r >> 12 & 1) - 1) ** 2 * ((p >> 13 & 1) + (q >> 13 & 1) + (r >> 13 & 1) - 1) ** 2 * ((p >> 14 & 1) + (q >> 14 & 1) + (r >> 14 & 1) - 1) ** 2 * ((p >> 15 & 1) + (q >> 15 & 1) + (r >> 15 & 1) - 1) ** 2 * ((p >> 16 & 1) + (q >> 16 & 1) + (r >> 16 & 1) - 1) ** 2 * ((p >> 17 & 1) + (q >> 17 & 1) + (r >> 17 & 1) - 1) ** 2 * ((p >> 18 & 1) + (q >> 18 & 1) + (r >> 18 & 1) - 1) ** 2 * ((p >> 19 & 1) + (q >> 19 & 1) + (r >> 19 & 1) - 1) ** 2)", "from functools import reduce\nfrom operator import mul\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(reduce(mul, [((p >> b & 1) + (q >> b & 1) + (r >> b & 1) - 1) ** 2 for b in range(20)]))", "from functools import reduce\nfrom operator import mul\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print((1, 0, 1, 4)[(p & 1) + (q & 1) + (r & 1)] * (1, 0, 1, 4)[(p >> 1 & 1) + (q >> 1 & 1) + (r >> 1 & 1)] * (1, 0, 1, 4)[(p >> 2 & 1) + (q >> 2 & 1) + (r >> 2 & 1)] * (1, 0, 1, 4)[(p >> 3 & 1) + (q >> 3 & 1) + (r >> 3 & 1)] * (1, 0, 1, 4)[(p >> 4 & 1) + (q >> 4 & 1) + (r >> 4 & 1)] * (1, 0, 1, 4)[(p >> 5 & 1) + (q >> 5 & 1) + (r >> 5 & 1)] * (1, 0, 1, 4)[(p >> 6 & 1) + (q >> 6 & 1) + (r >> 6 & 1)] * (1, 0, 1, 4)[(p >> 7 & 1) + (q >> 7 & 1) + (r >> 7 & 1)] * (1, 0, 1, 4)[(p >> 8 & 1) + (q >> 8 & 1) + (r >> 8 & 1)] * (1, 0, 1, 4)[(p >> 9 & 1) + (q >> 9 & 1) + (r >> 9 & 1)] * (1, 0, 1, 4)[(p >> 10 & 1) + (q >> 10 & 1) + (r >> 10 & 1)] * (1, 0, 1, 4)[(p >> 11 & 1) + (q >> 11 & 1) + (r >> 11 & 1)] * (1, 0, 1, 4)[(p >> 12 & 1) + (q >> 12 & 1) + (r >> 12 & 1)] * (1, 0, 1, 4)[(p >> 13 & 1) + (q >> 13 & 1) + (r >> 13 & 1)] * (1, 0, 1, 4)[(p >> 14 & 1) + (q >> 14 & 1) + (r >> 14 & 1)] * (1, 0, 1, 4)[(p >> 15 & 1) + (q >> 15 & 1) + (r >> 15 & 1)] * (1, 0, 1, 4)[(p >> 16 & 1) + (q >> 16 & 1) + (r >> 16 & 1)] * (1, 0, 1, 4)[(p >> 17 & 1) + (q >> 17 & 1) + (r >> 17 & 1)] * (1, 0, 1, 4)[(p >> 18 & 1) + (q >> 18 & 1) + (r >> 18 & 1)] * (1, 0, 1, 4)[(p >> 19 & 1) + (q >> 19 & 1) + (r >> 19 & 1)])", "from functools import reduce\nfrom operator import mul\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print((1, 0, 1, 4)[(p & 1) + (q & 1) + (r & 1)] * reduce(mul, [(1, 0, 1, 4)[((p := (p >> 1)) & 1) + ((q := (q >> 1)) & 1) + ((r := (r >> 1)) & 1)] for _ in range(19)]))", "from functools import reduce\nfrom operator import mul\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    p <<= 1\n    q <<= 1\n    r <<= 1\n    print(reduce(mul, [(1, 0, 1, 4)[((p := (p >> 1)) & 1) + ((q := (q >> 1)) & 1) + ((r := (r >> 1)) & 1)] for _ in range(20)]))", "from functools import reduce\nfrom operator import mul\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    print(reduce(mul, [(1, 0, 1, 4)[(p >> b & 1) + (q >> b & 1) + (r >> b & 1)] for b in range(20)]))", "from functools import reduce\nfrom operator import mul\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = (1, 0, 1, 4)[(p & 1) + (q & 1) + (r & 1)]\n    for _ in range(20):\n        if not ans:\n            break\n        ans *= (1, 0, 1, 4)[((p := (p >> 1)) & 1) + ((q := (q >> 1)) & 1) + ((r := (r >> 1)) & 1)]\n    print(ans)", "from functools import reduce\nfrom operator import mul\nfor _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = (1, 0, 1, 4)[(p & 1) + (q & 1) + (r & 1)]\n    for _ in range(20):\n        ans *= (1, 0, 1, 4)[((p := (p >> 1)) & 1) + ((q := (q >> 1)) & 1) + ((r := (r >> 1)) & 1)]\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    while p or q or r:\n        p1 = p & 1\n        q1 = q & 1\n        r1 = r & 1\n        if p1 + q1 + r1 == 1:\n            ans = 0\n            break\n        elif p1 + q1 + r1 == 3:\n            ans *= 4\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    print(ans)", "def calculate(arr):\n    p = arr[0]\n    q = arr[1]\n    r = arr[2]\n    pbit = [0 for i in range(21)]\n    qbit = [0 for i in range(21)]\n    rbit = [0 for i in range(21)]\n    i = 20\n    while p > 0:\n        rem = p % 2\n        pbit[i] = rem\n        p = p // 2\n        i -= 1\n    i = 20\n    while q > 0:\n        rem = q % 2\n        qbit[i] = rem\n        q = q // 2\n        i -= 1\n    i = 20\n    while r > 0:\n        rem = r % 2\n        rbit[i] = rem\n        r = r // 2\n        i -= 1\n    ans = 1\n    for i in range(21):\n        sumi = pbit[i] + qbit[i] + rbit[i]\n        if sumi == 3:\n            ans = ans * 4\n        elif sumi == 2 or sumi == 0:\n            ans = ans * 1\n        else:\n            return 0\n    return ans\nt = int(input())\nfor i in range(t):\n    arr = list(map(int, input().split()))\n    v = calculate(arr)\n    print(v)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    for i in range(20):\n        mask = 1 << i\n        count = 0\n        count += mask & p != 0\n        count += mask & q != 0\n        count += mask & r != 0\n        if count == 0:\n            ans *= 1\n        elif count == 1:\n            ans *= 0\n        elif count == 2:\n            ans *= 1\n        else:\n            ans *= 4\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    while p or q or r:\n        p1 = p & 1\n        q1 = q & 1\n        r1 = r & 1\n        if p1 + q1 + r1 == 1:\n            ans = 0\n            break\n        elif p1 + q1 + r1 == 3:\n            ans *= 4\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    for i in range(20):\n        mask = 1 << i\n        count = 0\n        count += mask & p != 0\n        count += mask & q != 0\n        count += mask & r != 0\n        if count == 0:\n            ans *= 1\n        elif count == 1:\n            ans *= 0\n        elif count == 2:\n            ans *= 1\n        else:\n            ans *= 4\n    print(ans)", "T = int(input())\nfor t in range(1, T + 1):\n    ans = 1\n    (P, Q, R) = map(int, input().split())\n    for i in range(20):\n        mask = 1 << i\n        count = 0\n        count += mask & P != 0\n        count += mask & Q != 0\n        count += mask & R != 0\n        if count == 0:\n            ans *= 1\n        elif count == 1:\n            ans *= 0\n        elif count == 2:\n            ans *= 1\n        else:\n            ans *= 4\n    print(ans)", "def countTriples(p, q, r):\n    result = 1\n    while p + q + r > 0:\n        bitSum = (p & 1) + (q & 1) + (r & 1)\n        if bitSum == 1:\n            result *= 0\n        elif bitSum == 3:\n            result *= 4\n        p //= 2\n        q //= 2\n        r //= 2\n    return result\nnumTestCases = int(input())\nfor i in range(numTestCases):\n    (p, q, r) = map(int, input().split(' '))\n    print(countTriples(p, q, r))", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    ans = 1\n    while a or b or c:\n        a1 = a & 1\n        b1 = b & 1\n        c1 = c & 1\n        if a1 + b1 + c1 == 1:\n            ans = 0\n            break\n        elif a1 + b1 + c1 == 3:\n            ans *= 4\n        a >>= 1\n        b >>= 1\n        c >>= 1\n    print(ans)", "for _ in range(int(input())):\n    l = list(map(int, input().split()))\n    ans = 1\n    while l[0] or l[1] or l[2]:\n        a = l[0] & 1\n        b = l[1] & 1\n        c = l[2] & 1\n        if a + b + c == 1:\n            ans = 0\n            break\n        elif a + b + c == 3:\n            ans *= 4\n        l[0] >>= 1\n        l[1] >>= 1\n        l[2] >>= 1\n    print(ans)", "import time\nimport sys\nimport math\n\ndef get_primes(n):\n    sieve = [True] * n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if sieve[i]:\n            sieve[i * i::2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1)\n    return [2] + [i for i in range(3, n, 2) if sieve[i]]\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\ninput = sys.stdin.readline\n(mod, infi) = (1000000007, sys.maxsize)\nfrom collections import deque, Counter, defaultdict as dd\nfrom heapq import heappop, heappush, heapify\nfrom itertools import accumulate\nfrom functools import lru_cache, reduce\nfrom operator import mul, add, sub, truediv, floordiv, lt, le, eq, ne, gt, xor, concat, getitem, lshift\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nnormal = lambda : input().split()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nlogg = lambda a, b: math.log2(a) / math.log2(b)\nacc = lambda x: list(accumulate(x))\nsign = lambda x, y: x >= 0 and y >= 0 or (x < 0 and y < 0)\nT = inty()\nfor _ in range(T):\n    (p, q, r) = mappy()\n    res = 1\n    for bit in range(20):\n        cnt = (p >> bit & 1) + (q >> bit & 1) + (r >> bit & 1)\n        if cnt == 1:\n            res = 0\n            break\n        if cnt == 3:\n            res *= 4\n    print(res)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    ans = 1\n    d = 0\n    for i in range(21):\n        k = 0\n        if p & 1 << i:\n            k += 1\n        if q & 1 << i:\n            k += 1\n        if r & 1 << i:\n            k += 1\n        if k == 3:\n            ans *= 4\n        elif k == 2:\n            pass\n        elif k == 1:\n            d = 1\n        else:\n            pass\n    if d == 0:\n        print(ans)\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    ans = 1\n    d = 0\n    for i in range(21):\n        k = 0\n        if p & 1 << i:\n            k += 1\n        if q & 1 << i:\n            k += 1\n        if r & 1 << i:\n            k += 1\n        if k == 3:\n            ans *= 4\n        elif k == 2:\n            pass\n        elif k == 1:\n            d = 1\n    if d == 0:\n        print(ans)\n    else:\n        print(0)", "ans = []\nfor _ in range(int(input())):\n    N = [bin(int(x))[2:].rjust(20, '0') for x in input().split()]\n    an = 1\n    for i in range(20):\n        s = ''.join((N[x][i] for x in range(3))).count('1')\n        if s in [0, 2]:\n            continue\n        elif s == 3:\n            an *= 4\n        else:\n            an = 0\n            break\n    ans.append(an)\nprint(*ans, sep='\\n')", "ans = []\nfor _ in range(int(input())):\n    N = [bin(int(x))[2:] for x in input().split()]\n    for i in range(3):\n        N[i] = '0' * (20 - len(N[i])) + N[i]\n    an = 1\n    for i in range(20):\n        s = ''.join((N[x][i] for x in [0, 1, 2])).count('1')\n        if s in [0, 2]:\n            continue\n        elif s == 3:\n            an *= 4\n        else:\n            an = 0\n            break\n    ans.append(an)\nprint(*ans, sep='\\n')", "ans = []\nfor _ in range(int(input())):\n    N = [bin(int(x))[2:] for x in input().split()]\n    for i in range(3):\n        N[i] = '0' * (20 - len(N[i])) + N[i]\n    an = 1\n    for i in range(20):\n        s = sum((int(N[x][i]) for x in [0, 1, 2]))\n        if s == 0 or s == 2:\n            continue\n        elif s == 3:\n            an *= 4\n        else:\n            an = 0\n            break\n    ans.append(an)\nprint(*ans, sep='\\n')", "ans = []\nfor _ in range(int(input())):\n    N = [bin(int(x))[2:] for x in input().split()]\n    for i in range(3):\n        x = N[i]\n        N[i] = [0] * 20\n        for (j, b) in enumerate(x[::-1]):\n            N[i][-j - 1] = int(b)\n    an = 1\n    for i in range(20):\n        s = sum((N[x][i] for x in [0, 1, 2]))\n        if s == 0 or s == 2:\n            continue\n        elif s == 3:\n            an *= 4\n        else:\n            an = 0\n            break\n    ans.append(an)\nprint(*ans, sep='\\n')", "d_zeros = {3: 1, 2: 0, 1: 1, 0: 4}\nfor t in range(int(input())):\n    (p, q, r) = [int(x) for x in input().split()]\n    prod = 1\n    for i in range(max(p, q, r).bit_length()):\n        count = 0\n        if int(p >> i & 1) == 0:\n            count += 1\n        if int(q >> i & 1) == 0:\n            count += 1\n        if int(r >> i & 1) == 0:\n            count += 1\n        prod *= d_zeros[count]\n    print(prod)", "import math\ncases = int(input())\nfor _ in range(cases):\n    (p, q, r) = (int(e) for e in input().split(' '))\n    sols = 1\n    while p or q or r:\n        tot = (p & 1) + (q & 1) + (r & 1)\n        if tot == 3:\n            sols *= 4\n        elif tot == 1:\n            sols = 0\n            break\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    print(sols)", "def count(a, b, c):\n    s = a + b + c\n    if s == 0:\n        return 1\n    elif s == 1:\n        return 0\n    elif s == 2:\n        return 1\n    else:\n        return 4\nt = int(input())\nfor test in range(t):\n    (P, Q, R) = list(map(int, input().split()))\n    Pb = list(map(int, bin(P)[2:]))\n    Qb = list(map(int, bin(Q)[2:]))\n    Rb = list(map(int, bin(R)[2:]))\n    max_size = max(len(Pb), len(Qb), len(Rb))\n    Pb = [0] * (max_size - len(Pb)) + Pb\n    Qb = [0] * (max_size - len(Qb)) + Qb\n    Rb = [0] * (max_size - len(Rb)) + Rb\n    prod = 1\n    for i in range(max_size):\n        prod *= count(Pb[i], Qb[i], Rb[i])\n        if prod == 0:\n            break\n    print(prod)", "T = int(input())\nfor i in range(T):\n    (P, Q, R) = map(int, input().split(' '))\n    A = 1\n    for j in range(30):\n        C = (P >> j & 1) + (Q >> j & 1) + (R >> j & 1)\n        if C == 1:\n            A = 0\n        elif C == 3:\n            A *= 4\n    print(A)", "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef valid(i, j, n, m):\n    if i < n and i >= 0 and (j >= 0) and (j < m):\n        return True\n    return False\n\ndef sumn(i, n):\n    return (n - i) * (i + n) / 2\n\ndef sqfun(a, b, c):\n    return (-b + math.sqrt(b * b - 4 * a * c)) / 2 * a\n\ndef getprime(num):\n    if all((num % i != 0 for i in range(2, int(math.sqrt(num)) + 1))):\n        return True\n\ndef value():\n    return tuple(map(int, input().split()))\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlst():\n    return [int(i) for i in input().split()]\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(input())\n\ndef inps():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return input()\n\ndef stlst():\n    return [i for i in input().split()]\n\ndef solve():\n    (p, q, r) = values()\n    mx = max(p, q, r)\n    tot = 1\n    for i in range(mx.bit_length()):\n        (k, h, w) = (p & 1 << i, q & 1 << i, r & 1 << i)\n        if k == 0 or h == 0 or w == 0:\n            if k == 0 and h == w:\n                continue\n            if h == 0 and k == w:\n                continue\n            if w == 0 and h == k:\n                continue\n            return 0\n        else:\n            tot *= 4\n    return tot\nfor i in range(inp()):\n    print(solve())", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    for bit in range(30):\n        ct = (p >> bit & 1) + (q >> bit & 1) + (r >> bit & 1)\n        if ct == 1:\n            ans = 0\n        elif ct == 3:\n            ans *= 4\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    res = [1, 0, 1, 4]\n    for i in range(30):\n        ans *= res[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(ans)", "def solve(p, q, r):\n    (a, b, c) = (0, 0, 0)\n    ans = 1\n    for _ in range(20):\n        (a, b, c) = (p % 2, q % 2, r % 2)\n        k = [a, b, c].count(1)\n        if k == 0:\n            ans *= 1\n        if k == 1:\n            return 0\n        if k == 2:\n            ans *= 1\n        if k == 3:\n            ans *= 4\n        p //= 2\n        q //= 2\n        r //= 2\n    return ans\nt = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    print(solve(p, q, r))", "for i in range(int(input())):\n    (x, y, z) = map(int, input().split())\n    ans = 1\n    for bit in range(20):\n        ct = (x >> bit & 1) + (y >> bit & 1) + (z >> bit & 1)\n        if ct == 1:\n            ans = 0\n        elif ct == 3:\n            ans *= 4\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    ans = 1\n    for bit in range(30):\n        ct = (a >> bit & 1) + (b >> bit & 1) + (c >> bit & 1)\n        if ct == 1:\n            ans = 0\n        if ct == 3:\n            ans *= 4\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    ans = 1\n    flag = 0\n    for i in range(21):\n        k = 0\n        if p & 1 << i:\n            k += 1\n        if q & 1 << i:\n            k += 1\n        if r & 1 << i:\n            k += 1\n        if k == 3:\n            ans *= 4\n        elif k == 2:\n            pass\n        elif k == 1:\n            flag = 1\n        else:\n            pass\n    if flag == 0:\n        print(ans)\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    ans = 1\n    flag = 0\n    for i in range(21):\n        k = 0\n        if p & 1 << i:\n            k += 1\n        if q & 1 << i:\n            k += 1\n        if r & 1 << i:\n            k += 1\n        if k == 3:\n            ans *= 4\n        elif k == 2:\n            pass\n        elif k == 1:\n            flag = 1\n        else:\n            pass\n    if flag == 0:\n        print(ans)\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = list(map(int, input().split()))\n    ans = 1\n    flag = 0\n    for i in range(21):\n        k = 0\n        if p & 1 << i:\n            k += 1\n        if q & 1 << i:\n            k += 1\n        if r & 1 << i:\n            k += 1\n        if k == 3:\n            ans *= 4\n        elif k == 2:\n            pass\n        elif k == 1:\n            flag = 1\n        else:\n            pass\n    if flag == 0:\n        print(ans)\n    else:\n        print(0)", "class T:\n\n    def solve(self):\n        (p, q, r) = map(int, input().split())\n        ans = 1\n        for i in range(64, -1, -1):\n            a = 0\n            if p & 1 << i:\n                a += 1\n            if r & 1 << i:\n                a += 1\n            if q & 1 << i:\n                a += 1\n            if a == 3:\n                ans *= 4\n            elif a == 2:\n                continue\n            elif a == 1:\n                return 0\n            else:\n                continue\n        return ans\nfor t in range(int(input())):\n    obj = T()\n    print(obj.solve())", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    a = [1, 0, 1, 4]\n    answer = 1\n    for i in range(30):\n        answer *= a[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    arr = [1, 0, 1, 4]\n    ans = 1\n    for i in range(20):\n        x = p >> i & 1\n        y = q >> i & 1\n        z = r >> i & 1\n        ans = ans * arr[x + y + z]\n    print(ans, end=' ')\n    print()", "def solve():\n    (p, q, r) = map(int, input().split())\n    a = [1, 0, 1, 4]\n    answer = 1\n    for i in range(30):\n        answer *= a[(p >> i & 1) + (q >> i & 1) + (r >> i & 1)]\n    print(answer)\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (p, q, r) = map(int, input().split())\n    a = [1, 0, 1, 4]\n    ans = 1\n    for j in range(30):\n        x = p >> j & 1\n        y = q >> j & 1\n        z = r >> j & 1\n        ans = ans * a[x + y + z]\n    print(ans)", "n = int(input())\nfor i in range(n):\n    (p, q, r) = list(map(int, input().split()))\n    a = [1, 0, 1, 4]\n    ans = 1\n    for j in range(30):\n        x = p >> j & 1\n        y = q >> j & 1\n        z = r >> j & 1\n        ans = ans * a[x + y + z]\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = list(map(lambda x: bin(x)[2:], list(map(int, input().split()))))\n    s = 1\n    for j in range(max(len(p), len(q), len(r))):\n        i = j + 1\n        if j < len(p):\n            pc = p[0 - i]\n        else:\n            pc = '0'\n        if j < len(q):\n            qc = q[0 - i]\n        else:\n            qc = '0'\n        if j < len(r):\n            rc = r[0 - i]\n        else:\n            rc = '0'\n        if pc == '1' and qc == '1' and (rc == '1'):\n            s = s * 4\n        elif pc == '1' and qc == '1' and (rc == '0'):\n            s = s * 1\n        elif pc == '1' and qc == '0' and (rc == '1'):\n            s = s * 1\n        elif pc == '0' and qc == '1' and (rc == '1'):\n            s = s * 1\n        elif pc == '0' and qc == '0' and (rc == '1'):\n            s = s * 0\n        elif pc == '0' and qc == '1' and (rc == '0'):\n            s = s * 0\n        elif pc == '1' and qc == '0' and (rc == '0'):\n            s = s * 0\n        elif pc == '0' and qc == '0' and (rc == '0'):\n            s = s * 1\n        if s == 0:\n            break\n    print(s)", "for test in range(int(input())):\n    (j, b, c) = [int(x) for x in input().split()]\n    arr = [1, 0, 1, 4]\n    bina = bin(j)[2:]\n    binb = bin(b)[2:]\n    binc = bin(c)[2:]\n    bina = '{0}'.format(str(bina).zfill(20))\n    binb = '{0}'.format(str(binb).zfill(20))\n    binc = '{0}'.format(str(binc).zfill(20))\n    r = 1\n    for i in range(20):\n        r *= arr[(int(bina[i]) + int(binb[i]) + int(binc[i])) % 4]\n    print(r)", "for test in range(int(input())):\n    (j, b, c) = [int(x) for x in input().split()]\n    arr = [1, 0, 1, 4]\n    bina = bin(j)[2:]\n    binb = bin(b)[2:]\n    binc = bin(c)[2:]\n    bina = '{0}'.format(str(bina).zfill(20))\n    binb = '{0}'.format(str(binb).zfill(20))\n    binc = '{0}'.format(str(binc).zfill(20))\n    r = 1\n    for i in range(20):\n        r *= arr[(int(bina[i]) + int(binb[i]) + int(binc[i])) % 4]\n    print(r)", "n = int(input())\nfor _ in range(n):\n    (x, y, z) = map(int, input().split())\n    arr = [1, 0, 1, 4]\n    ans = 1\n    for i in range(20):\n        ans = ans * arr[(x & 1) + (y & 1) + (z & 1)]\n        x = x >> 1\n        y = y >> 1\n        z = z >> 1\n    print(ans)", "for test in range(int(input())):\n    (a, b, c) = [int(x) for x in input().split()]\n    arr = [1, 0, 1, 4]\n    bina = bin(a)[2:]\n    binb = bin(b)[2:]\n    binc = bin(c)[2:]\n    bina = '{0}'.format(str(bina).zfill(20))\n    binb = '{0}'.format(str(binb).zfill(20))\n    binc = '{0}'.format(str(binc).zfill(20))\n    ans = 1\n    for i in range(20):\n        ans *= arr[(int(bina[i]) + int(binb[i]) + int(binc[i])) % 4]\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    while p > 0 or q > 0 or r > 0:\n        P = p & 1\n        Q = q & 1\n        R = r & 1\n        f = P + Q + R\n        if f == 3:\n            ans *= 4\n        if f == 1:\n            ans = 0\n            break\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    while p > 0 or q > 0 or r > 0:\n        P = p & 1\n        Q = q & 1\n        R = r & 1\n        f = P + Q + R\n        if f == 3:\n            ans *= 4\n        if f == 1:\n            ans = 0\n            break\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    while p > 0 or q > 0 or r > 0:\n        P = p & 1\n        Q = q & 1\n        R = r & 1\n        f = P + Q + R\n        if f == 3:\n            ans *= 4\n        if f == 1:\n            ans = 0\n            break\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    print(ans)", "for i in range(int(input())):\n    (x, y, z) = map(int, input().split())\n    ans = 1\n    for bit in range(30):\n        ct = (x >> bit & 1) + (y >> bit & 1) + (z >> bit & 1)\n        if ct == 1:\n            ans = 0\n        elif ct == 3:\n            ans *= 4\n    print(ans)", "for i in range(int(input())):\n    (a, b, c) = [int(x) for x in input().split()]\n    m = max(a, b, c)\n    m1 = bin(m)[2:]\n    p = len(m1)\n    x = bin(a)[2:]\n    x = '0' * (p - len(x)) + x\n    y = bin(b)[2:]\n    y = '0' * (p - len(y)) + y\n    z = bin(c)[2:]\n    z = '0' * (p - len(z)) + z\n    t = 0\n    th = 0\n    for i in range(len(m1)):\n        if int(x[i]) + int(y[i]) + int(z[i]) == 1:\n            print(0)\n            break\n        if x[i] == '1' and y[i] == '1' and (z[i] == '1'):\n            t += 1\n        elif x[i] == '1' and y[i] == '1' or (y[i] == '1' and z[i] == '1') or (z[i] == '1' and x[i] == '1'):\n            th += 1\n    else:\n        if t == 0:\n            print(1)\n        else:\n            print(pow(4, t))", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    ans = 1\n    for bit in range(20):\n        bits = (a >> bit & 1) + (b >> bit & 1) + (c >> bit & 1)\n        if bits == 1:\n            ans = 0\n        elif bits == 3:\n            ans *= 4\n    print(ans)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    answer = 1\n    while p > 0 or q > 0 or r > 0:\n        num = (p & 1) + (q & 1) + (r & 1)\n        if num == 3:\n            answer *= 4\n        if num == 1:\n            answer = 0\n            break\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    print(answer)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    possibility_sum = 1\n    for bit in range(0, 20):\n        temp = (p >> bit & 1) + (q >> bit & 1) + (r >> bit & 1)\n        if temp == 1:\n            possibility_sum = 0\n            break\n        elif temp == 3:\n            possibility_sum *= 4\n    print(possibility_sum)", "for _ in range(int(input())):\n    (p, q, r) = map(int, input().split())\n    possibility_sum = 1\n    for bit in range(0, 20):\n        temp = (p >> bit & 1) + (q >> bit & 1) + (r >> bit & 1)\n        if temp == 1:\n            possibility_sum = 0\n            break\n        if temp == 0:\n            possibility_sum *= 1\n        elif temp == 2:\n            possibility_sum *= 1\n        elif temp == 3:\n            possibility_sum *= 4\n    print(possibility_sum)", "t = int(input())\nfor i in range(t):\n    (p, q, r) = map(int, input().split())\n    ans = 1\n    while p > 0 or q > 0 or r > 0:\n        P = p & 1\n        Q = q & 1\n        R = r & 1\n        f = P + Q + R\n        if f == 3:\n            ans *= 4\n        if f == 1:\n            ans = 0\n            break\n        p >>= 1\n        q >>= 1\n        r >>= 1\n    print(ans)", "for i in range(int(input())):\n    (x, y, z) = map(int, input().split())\n    ans = 1\n    for bit in range(20):\n        ct = (x >> bit & 1) + (y >> bit & 1) + (z >> bit & 1)\n        if ct == 1:\n            ans = 0\n        elif ct == 3:\n            ans *= 4\n    print(ans)", "for i in range(int(input())):\n    (x, y, z) = map(int, input().split())\n    ans = 1\n    for bit in range(20):\n        ct = (x >> bit & 1) + (y >> bit & 1) + (z >> bit & 1)\n        if ct == 1:\n            ans = 0\n        elif ct == 3:\n            ans *= 4\n    print(ans)", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (p, q, r) = R()\n    ans = 1\n    for i in range(20):\n        sum = (p >> i & 1) + (q >> i & 1) + (r >> i & 1)\n        if sum == 3:\n            if ans == 1:\n                ans = 4\n            else:\n                ans *= 4\n        if sum == 1:\n            ans = 0\n    print(ans)", "for i in range(int(input())):\n    (x, y, z) = map(int, input().split())\n    ans = 1\n    for bit in range(30):\n        ct = (x >> bit & 1) + (y >> bit & 1) + (z >> bit & 1)\n        if ct == 1:\n            ans = 0\n        elif ct == 3:\n            ans *= 4\n    print(ans)"]