["from heapq import heapify, heappush, heappop\n\ndef solve():\n    n = int(input())\n    text = [x - 97 for x in map(ord, input().strip())]\n    graph = [[] for _ in range(n)]\n    pos = [[] for _ in range(26)]\n    for i in range(n - 1, -1, -1):\n        pos[text[i]].append(i)\n    heap = []\n    in_degree = [0] * n\n    for (x, neighbors) in zip(text, graph):\n        i = pos[x].pop()\n        if in_degree[i] == 0:\n            heap.append((x, i))\n        for (y, p) in enumerate(pos):\n            if p and abs(x - y) != 1:\n                j = p[-1]\n                neighbors.append(j)\n                in_degree[j] += 1\n    heapify(heap)\n    out = []\n    while heap:\n        (x, i) = heappop(heap)\n        out.append(x + 97)\n        for j in graph[i]:\n            in_degree[j] -= 1\n            if in_degree[j] == 0:\n                heappush(heap, (text[j], j))\n    print(''.join(map(chr, out)))\n\ndef main():\n    n_cases = int(input())\n    for _ in range(n_cases):\n        solve()\nmain()", "from heapq import heapify, heappush, heappop\n\ndef solve():\n    n = int(input())\n    text = [x - 97 for x in map(ord, input().strip())]\n    graph = [[] for _ in range(n)]\n    pos = [[] for _ in range(26)]\n    for i in range(n - 1, -1, -1):\n        pos[text[i]].append(i)\n    heap = []\n    in_degree = [0] * n\n    for (x, neighbors) in zip(text, graph):\n        i = pos[x].pop()\n        if in_degree[i] == 0:\n            heap.append((x, i))\n        for (y, p) in enumerate(pos):\n            if p and abs(x - y) != 1:\n                j = p[-1]\n                neighbors.append(j)\n                in_degree[j] += 1\n    heapify(heap)\n    out = []\n    while heap:\n        (x, i) = heappop(heap)\n        out.append(x + 97)\n        for j in graph[i]:\n            in_degree[j] -= 1\n            if in_degree[j] == 0:\n                heappush(heap, (text[j], j))\n    print(''.join(map(chr, out)))\n\ndef main():\n    n_cases = int(input())\n    for _ in range(n_cases):\n        solve()\nmain()", "from heapq import heapify, heappush, heappop\n\ndef solve():\n    n = int(input())\n    text = [x - 97 for x in map(ord, input().strip())]\n    graph = [[] for _ in range(n)]\n    pos = [[] for _ in range(26)]\n    for i in range(n - 1, -1, -1):\n        pos[text[i]].append(i)\n    heap = []\n    in_degree = [0] * n\n    for (x, neighbors) in zip(text, graph):\n        i = pos[x].pop()\n        if in_degree[i] == 0:\n            heap.append((x, i))\n        for (y, p) in enumerate(pos):\n            if p and abs(x - y) != 1:\n                j = p[-1]\n                neighbors.append(j)\n                in_degree[j] += 1\n    heapify(heap)\n    out = []\n    while heap:\n        (x, i) = heappop(heap)\n        out.append(x + 97)\n        for j in graph[i]:\n            in_degree[j] -= 1\n            if in_degree[j] == 0:\n                heappush(heap, (text[j], j))\n    print(''.join(map(chr, out)))\n\ndef main():\n    n_cases = int(input())\n    for _ in range(n_cases):\n        solve()\nmain()", "from heapq import heapify, heappush, heappop\n\ndef solve():\n    n = int(input())\n    text = [x - 97 for x in map(ord, input().strip())]\n    graph = [[] for _ in range(n)]\n    pos = [[] for _ in range(26)]\n    for i in range(n - 1, -1, -1):\n        pos[text[i]].append(i)\n    heap = []\n    in_degree = [0] * n\n    for (x, neighbors) in zip(text, graph):\n        i = pos[x].pop()\n        if in_degree[i] == 0:\n            heap.append((x, i))\n        for (y, p) in enumerate(pos):\n            if p and abs(x - y) != 1:\n                j = p[-1]\n                neighbors.append(j)\n                in_degree[j] += 1\n    heapify(heap)\n    out = []\n    while heap:\n        (x, i) = heappop(heap)\n        out.append(x + 97)\n        for j in graph[i]:\n            in_degree[j] -= 1\n            if in_degree[j] == 0:\n                heappush(heap, (text[j], j))\n    print(''.join(map(chr, out)))\n\ndef main():\n    n_cases = int(input())\n    for _ in range(n_cases):\n        solve()\nmain()", "from sys import stdin, stdout\nfrom heapq import heapify, heappush, heappop\ninput = stdin.readline\nr_int = lambda : int(input())\nm_int = lambda : map(int, input().split())\nl_int = lambda : list(map(int, input().split()))\n\ndef solve():\n    n = r_int()\n    text = [x - 97 for x in map(ord, input().strip())]\n    graph = [[] for _ in range(n)]\n    pos = [[] for _ in range(26)]\n    for i in range(n - 1, -1, -1):\n        pos[text[i]].append(i)\n    heap = []\n    in_degree = [0] * n\n    for (x, neighbors) in zip(text, graph):\n        i = pos[x].pop()\n        if in_degree[i] == 0:\n            heap.append((x, i))\n        for (y, p) in enumerate(pos):\n            if p and abs(x - y) != 1:\n                j = p[-1]\n                neighbors.append(j)\n                in_degree[j] += 1\n    heapify(heap)\n    out = []\n    while heap:\n        (x, i) = heappop(heap)\n        out.append(x + 97)\n        for j in graph[i]:\n            in_degree[j] -= 1\n            if in_degree[j] == 0:\n                heappush(heap, (text[j], j))\n    print(''.join(map(chr, out)))\n\ndef main():\n    n_cases = r_int()\n    for _ in range(n_cases):\n        solve()\nmain()"]