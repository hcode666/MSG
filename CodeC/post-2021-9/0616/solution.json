["from collections import deque\nt = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    (n, l) = (l[0], l[1:])\n    min_ = l[1] + l[2]\n    c2 = sum(l) - l[2] - l[5]\n    c5 = sum(l) - l[1] - l[4]\n    c6 = sum(l) - l[1]\n    q = deque()\n    q.append((2, c2))\n    q.append((5, c5))\n    q.append((6, c6))\n    while q:\n        (num, cost) = q.popleft()\n        if cost >= min_:\n            continue\n        if n % num == 0:\n            min_ = min(min_, cost)\n        q.append((num * 10 + 2, cost + c2))\n        q.append((num * 10 + 5, cost + c5))\n        q.append((num * 10 + 6, cost + c6))\n    print(min_)", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    (n, l) = (l[0], l[1:])\n    min_ = l[1] + l[2]\n    c2 = sum(l) - l[2] - l[5]\n    c5 = sum(l) - l[1] - l[4]\n    c6 = sum(l) - l[1]\n    if n % 2 == 0:\n        min_ = min(min_, c2)\n    q = deque()\n    q.append((5, c5))\n    q.append((6, c6))\n    while q:\n        (num, cost) = q.popleft()\n        if cost >= min_:\n            continue\n        if n % num == 0:\n            min_ = min(min_, cost)\n        q.append((num * 10 + 5, cost + c5))\n        q.append((num * 10 + 6, cost + c6))\n    print(min_)", "def dfs(a, b):\n    if b >= 12:\n        return\n    __.append(int(a + '6'))\n    dfs(a + '5', b + 1)\n    dfs(a + '6', b + 1)\n\ndef check(cnt5, cnt6, n, p):\n    test = 0\n    if n % p != 0:\n        return 2147483647\n    while p != 0:\n        if p % 10 == 5:\n            test += cnt5\n        elif p % 10 == 6:\n            test += cnt6\n        p //= 10\n    return test\n__ = []\ndfs('', 0)\nfor _ in range(int(input())):\n    Input = input().split()\n    n = int(Input[0])\n    (a, b, c, d, e, f, g) = map(int, [Input[1], Input[2], Input[3], Input[4], Input[5], Input[6], Input[7]])\n    answer = b + c\n    if n % 2 == 0:\n        answer = min(answer, a + b + g + e + d)\n    if n % 5 == 0:\n        answer = min(answer, a + f + g + c + d)\n    c5 = a + f + g + c + d\n    c6 = a + f + g + c + d + e\n    for p in __:\n        answer = min(answer, check(c5, c6, n, p))\n    print(answer)", "def dfs(a, b):\n    if b >= 12:\n        return\n    __.append(int(a + '6'))\n    dfs(a + '5', b + 1)\n    dfs(a + '6', b + 1)\n\ndef check(cnt5, cnt6, n, p):\n    test = 0\n    if n % p != 0:\n        return 2147483647\n    while p != 0:\n        if p % 10 == 5:\n            test += cnt5\n        elif p % 10 == 6:\n            test += cnt6\n        p //= 10\n    return test\n__ = []\ndfs('', 0)\nfor _ in range(int(input())):\n    Input = input().split()\n    n = int(Input[0])\n    (a, b, c, d, e, f, g) = map(int, [Input[1], Input[2], Input[3], Input[4], Input[5], Input[6], Input[7]])\n    answer = b + c\n    if n % 2 == 0:\n        answer = min(answer, a + b + g + e + d)\n    if n % 5 == 0:\n        answer = min(answer, a + f + g + c + d)\n    c5 = a + f + g + c + d\n    c6 = a + f + g + c + d + e\n    for p in __:\n        answer = min(answer, check(c5, c6, n, p))\n    print(answer)", "t = int(input())\nfor tt in range(t):\n    v = list(map(int, input().split()))\n    n = v[0]\n    v1 = v[2] + v[3]\n    v6 = v[1] + v[3] + v[4] + v[5] + v[6] + v[7]\n    v5 = v[1] + v[3] + v[4] + v[6] + v[7]\n    v2 = v[1] + v[2] + v[4] + v[5] + v[7]\n    ans = v1\n    if n % 2 == 0:\n        ans = min(ans, v2)\n    if n % 5 == 0:\n        ans = min(ans, v5)\n    if n % 6 == 0:\n        ans = min(ans, v6)\n    for i in range(1, 2 ** 10):\n        num = 0\n        ic = i\n        curc = 0\n        while ic > 0:\n            num *= 10\n            if ic % 2 == 1:\n                num += 6\n                curc += v6\n            else:\n                num += 5\n                curc += v5\n            ic = ic // 2\n        if n % num == 0:\n            ans = min(ans, curc)\n    print(ans)", "def dfs(a, b):\n    if b >= 12:\n        return\n    __.append(int(a + '6'))\n    dfs(a + '5', b + 1)\n    dfs(a + '6', b + 1)\n\ndef check(cnt5, cnt6, n, p):\n    test = 0\n    if n % p != 0:\n        return 2147483647\n    while p != 0:\n        if p % 10 == 5:\n            test += cnt5\n        elif p % 10 == 6:\n            test += cnt6\n        p //= 10\n    return test\n__ = []\ndfs('', 0)\nfor _ in range(int(input())):\n    Input = input().split()\n    n = int(Input[0])\n    (a, b, c, d, e, f, g) = map(int, [Input[1], Input[2], Input[3], Input[4], Input[5], Input[6], Input[7]])\n    answer = b + c\n    if n % 2 == 0:\n        answer = min(answer, a + b + g + e + d)\n    if n % 5 == 0:\n        answer = min(answer, a + f + g + c + d)\n    c5 = a + f + g + c + d\n    c6 = a + f + g + c + d + e\n    for p in __:\n        answer = min(answer, check(c5, c6, n, p))\n    print(answer)", "def dfs(a, b):\n    if b >= 12:\n        return\n    __.append(int(a + '6'))\n    dfs(a + '5', b + 1)\n    dfs(a + '6', b + 1)\n\ndef check(cnt5, cnt6, n, p):\n    test = 0\n    if n % p != 0:\n        return 2147483647\n    while p != 0:\n        if p % 10 == 5:\n            test += cnt5\n        elif p % 10 == 6:\n            test += cnt6\n        p //= 10\n    return test\n__ = []\ndfs('', 0)\nfor _ in range(int(input())):\n    Input = input().split()\n    n = int(Input[0])\n    (a, b, c, d, e, f, g) = map(int, [Input[1], Input[2], Input[3], Input[4], Input[5], Input[6], Input[7]])\n    answer = b + c\n    if n % 2 == 0:\n        answer = min(answer, a + b + g + e + d)\n    if n % 5 == 0:\n        answer = min(answer, a + f + g + c + d)\n    c5 = a + f + g + c + d\n    c6 = a + f + g + c + d + e\n    for p in __:\n        answer = min(answer, check(c5, c6, n, p))\n    print(answer)", "def helper(cnt5, cnt6, n, p):\n    hh = 0\n    if n % p != 0:\n        return 2147483647\n    while p != 0:\n        if p % 10 == 5:\n            hh += cnt5\n        elif p % 10 == 6:\n            hh += cnt6\n        p //= 10\n    return hh\n__ = []\n\ndef trave(a, b):\n    if b >= 12:\n        return\n    __.append(int(a + '6'))\n    trave(a + '5', b + 1)\n    trave(a + '6', b + 1)\ntrave('', 0)\nfor _ in range(int(input())):\n    Input = input().split()\n    n = int(Input[0])\n    (a, b, c, d, e, f, g) = map(int, [Input[1], Input[2], Input[3], Input[4], Input[5], Input[6], Input[7]])\n    res = b + c\n    if n % 2 == 0:\n        res = min(res, a + b + g + e + d)\n    if n % 5 == 0:\n        res = min(res, a + f + g + c + d)\n    g1 = a + f + g + c + d\n    jj = a + f + g + c + d + e\n    for p in __:\n        res = min(res, helper(g1, jj, n, p))\n    print(res)", "import io, os, time, sys\nt = int(input())\n\ndef solve(num, digits, cost, cost_2, cost_6, cost_5, number):\n    global ans\n    if digits == 0:\n        if ans > cost and number % num == 0:\n            ans = cost\n        return\n    if ans > cost and number % num == 0:\n        ans = cost\n        return\n    num = num * 10 + 2\n    cost += cost_2\n    solve(num, digits - 1, cost, cost_2, cost_6, cost_5, number)\n    num = num // 10\n    num = num * 10 + 5\n    cost -= cost_2\n    cost += cost_5\n    solve(num, digits - 1, cost, cost_2, cost_6, cost_5, number)\n    num = num // 10\n    num = num * 10 + 6\n    cost -= cost_5\n    cost += cost_6\n    solve(num, digits - 1, cost, cost_2, cost_6, cost_5, number)\nfor i in range(t):\n    sample_input = list(map(int, input().split()))\n    global ans\n    num = sample_input[0]\n    ans = sample_input[2] + sample_input[3]\n    cost_2 = sample_input[1] + sample_input[2] + sample_input[4] + sample_input[5] + sample_input[7]\n    cost_5 = sample_input[1] + sample_input[6] + sample_input[7] + sample_input[3] + sample_input[4]\n    cost_6 = sample_input[1] + sample_input[6] + sample_input[7] + sample_input[3] + sample_input[4] + sample_input[5]\n    solve(2, 8, cost_2, cost_2, cost_6, cost_5, num)\n    solve(5, 8, cost_5, cost_2, cost_6, cost_5, num)\n    solve(6, 8, cost_6, cost_2, cost_6, cost_5, num)\n    sys.stdout.write(str(ans) + '\\n')", "def dfs(a, b):\n    if b >= 12:\n        return\n    __.append(int(a + '6'))\n    dfs(a + '5', b + 1)\n    dfs(a + '6', b + 1)\n\ndef check(cnt5, cnt6, n, p):\n    test = 0\n    if n % p != 0:\n        return 2147483647\n    while p != 0:\n        if p % 10 == 5:\n            test += cnt5\n        elif p % 10 == 6:\n            test += cnt6\n        p //= 10\n    return test\n__ = []\ndfs('', 0)\nfor _ in range(int(input())):\n    Input = input().split()\n    n = int(Input[0])\n    (a, b, c, d, e, f, g) = map(int, [Input[1], Input[2], Input[3], Input[4], Input[5], Input[6], Input[7]])\n    answer = b + c\n    if n % 2 == 0:\n        answer = min(answer, a + b + g + e + d)\n    if n % 5 == 0:\n        answer = min(answer, a + f + g + c + d)\n    c5 = a + f + g + c + d\n    c6 = a + f + g + c + d + e\n    for p in __:\n        answer = min(answer, check(c5, c6, n, p))\n    print(answer)", "def depthperbreadth(armstring, bruce):\n    if bruce >= 12:\n        return\n    __.append(int(armstring + '6'))\n    depthperbreadth(armstring + '5', bruce + 1)\n    depthperbreadth(armstring + '6', bruce + 1)\n\ndef checkmate(cnt5, cnt6, nicolas, princes):\n    testcases = 0\n    if nicolas % princes != 0:\n        return 2147483647\n    while princes != 0:\n        if princes % 10 == 5:\n            testcases += cnt5\n        elif princes % 10 == 6:\n            testcases += cnt6\n        princes //= 10\n    return testcases\n__ = []\ndepthperbreadth('', 0)\nfor _ in range(int(input())):\n    idontknowthisvar = input().split()\n    nicolas = int(idontknowthisvar[0])\n    (armstring, bruce, c, d, e, f, g) = map(int, [idontknowthisvar[1], idontknowthisvar[2], idontknowthisvar[3], idontknowthisvar[4], idontknowthisvar[5], idontknowthisvar[6], idontknowthisvar[7]])\n    answer = bruce + c\n    if nicolas % 2 == 0:\n        answer = min(answer, armstring + bruce + g + e + d)\n    if nicolas % 5 == 0:\n        answer = min(answer, armstring + f + g + c + d)\n    c5 = armstring + f + g + c + d\n    c6 = armstring + f + g + c + d + e\n    for princes in __:\n        answer = min(answer, checkmate(c5, c6, nicolas, princes))\n    print(answer)", "from math import gcd\n\ndef dfs(a, b):\n    gcd(3, 8)\n    if b >= 12 and True:\n        gcd(3, 8)\n        return\n    __.append(int(a + '6'))\n    gcd(3, 8)\n    dfs(a + '5', b + 1)\n    gcd(3, 8)\n    dfs(a + '6', b + 1)\n    gcd(3, 8)\n\ndef check(cnt5, cnt6, n, p):\n    test = 0\n    gcd(3, 8)\n    if n % p != 0 and True:\n        gcd(3, 8)\n        return 2147483647\n    while p != 0 and True:\n        gcd(3, 8)\n        if p % 10 == 5:\n            gcd(3, 8)\n            test += cnt5\n            gcd(3, 8)\n        else:\n            gcd(3, 8)\n            if p % 10 == 6 and True:\n                gcd(3, 8)\n                test += cnt6\n                gcd(3, 8)\n        p //= 10\n        gcd(3, 8)\n    return test\n__ = []\ngcd(3, 8)\ndfs('', 0)\ngcd(3, 8)\nfor _ in range(int(input())):\n    gcd(3, 8)\n    Input = input().split()\n    n = int(Input[0])\n    gcd(3, 8)\n    (a, b, c, d, e, f, g) = map(int, [Input[1], Input[2], Input[3], Input[4], Input[5], Input[6], Input[7]])\n    answer = b + c\n    gcd(3, 8)\n    if n % 2 == 0 and True:\n        gcd(3, 8)\n        answer = min(answer, a + b + g + e + d)\n    if n % 5 == 0 and True:\n        gcd(3, 8)\n        answer = min(answer, a + f + g + c + d)\n        gcd(3, 8)\n    c5 = a + f + g + c + d\n    gcd(3, 8)\n    c6 = a + f + g + c + d + e\n    gcd(3, 8)\n    for p in __:\n        gcd(3, 8)\n        gcd(4, 9)\n        answer = min(answer, check(c5, c6, n, p))\n        gcd(3, 8)\n        gcd(4, 9)\n    print(answer)\n    gcd(3, 8)", "def dfs(a, b):\n    if b >= 12:\n        return\n    __.append(int(a + '6'))\n    dfs(a + '5', b + 1)\n    dfs(a + '6', b + 1)\n\ndef check(cnt5, cnt6, n, p):\n    test = 0\n    if n % p != 0:\n        return 2147483647\n    while p != 0:\n        if p % 10 == 5:\n            test += cnt5\n        elif p % 10 == 6:\n            test += cnt6\n        p //= 10\n    return test\n__ = []\ndfs('', 0)\nfor _ in range(int(input())):\n    Input = input().split()\n    n = int(Input[0])\n    (a, b, c, d, e, f, g) = map(int, [Input[1], Input[2], Input[3], Input[4], Input[5], Input[6], Input[7]])\n    answer = b + c\n    if n % 2 == 0:\n        answer = min(answer, a + b + g + e + d)\n    if n % 5 == 0:\n        answer = min(answer, a + f + g + c + d)\n    c5 = a + f + g + c + d\n    c6 = a + f + g + c + d + e\n    for p in __:\n        answer = min(answer, check(c5, c6, n, p))\n    print(answer)", "def getSum(n):\n    sum = 0\n    for digit in str(n):\n        sum += int(digit)\n    return sum\n\ndef solve(n, cur, num, power, ans, five, six):\n    if cur > ans:\n        return 100000000\n    if n % num == 0:\n        return cur\n    return min(solve(n, cur + five, 5 * power + num, power * 10, ans, five, six), solve(n, cur + six, 6 * power + num, 10 * power, ans, five, six))\nt = int(input())\nwhile t > 0:\n    a = list(map(int, input().split()))\n    n = a[0]\n    a = a[1:]\n    two = a[0] + a[1] + a[3] + a[4] + a[6]\n    five = a[0] + a[5] + a[3] + a[2] + a[6]\n    six = a[0] + a[5] + a[3] + a[2] + a[6] + a[4]\n    ans = a[1] + a[2]\n    if n % 2 == 0:\n        ans = min(ans, two)\n        if getSum(n) % 3 == 0:\n            ans = min(ans, six)\n    if n % 5 == 0:\n        ans = min(ans, five)\n    cur = six\n    num = 6\n    power = 10\n    ans = min(solve(n, cur, num, power, ans, five, six), ans)\n    print(ans)\n    t -= 1"]