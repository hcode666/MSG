["for _ in range(int(input())):\n    n = int(input())\n    (arr, ll, rl, lr) = ([i for i in range(1, n + 1)], [0 for i in range(n)], [0 for i in range(n)], [])\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lr.append([l, r])\n        ll[l - 1] += 1\n        rl[r - 1] += 1\n    (ans, l1, r1) = ([max(ll[0], rl[0])], ll[0], rl[0])\n    for i in range(1, n):\n        ans.append(l1 + ll[i] - r1)\n        l1 += ll[i]\n        r1 += rl[i]\n    ans1 = []\n    for i in range(1, n + 1):\n        if lr[i - 1][0] <= i <= lr[i - 1][1]:\n            continue\n        if ans[i - 1] == n - 1:\n            ans1.append(i)\n    print(len(ans1))\n    for i in ans1:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    (arr, ll, rl, lr) = ([i for i in range(1, n + 1)], [0 for i in range(n)], [0 for i in range(n)], [])\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lr.append([l, r])\n        ll[l - 1] += 1\n        rl[r - 1] += 1\n    (ans, l1, r1) = ([max(ll[0], rl[0])], ll[0], rl[0])\n    for i in range(1, n):\n        ans.append(l1 + ll[i] - r1)\n        l1 += ll[i]\n        r1 += rl[i]\n    ans1 = []\n    for i in range(1, n + 1):\n        if lr[i - 1][0] <= i <= lr[i - 1][1]:\n            continue\n        if ans[i - 1] == n - 1:\n            ans1.append(i)\n    print(len(ans1))\n    for i in ans1:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    (arr, ll, rl, lr) = ([i for i in range(1, n + 1)], [0 for i in range(n)], [0 for i in range(n)], [])\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lr.append([l, r])\n        ll[l - 1] += 1\n        rl[r - 1] += 1\n    (ans, l1, r1) = ([max(ll[0], rl[0])], ll[0], rl[0])\n    for i in range(1, n):\n        ans.append(l1 + ll[i] - r1)\n        l1 += ll[i]\n        r1 += rl[i]\n    ans1 = []\n    for i in range(1, n + 1):\n        if lr[i - 1][0] <= i <= lr[i - 1][1]:\n            continue\n        if ans[i - 1] == n - 1:\n            ans1.append(i)\n    print(len(ans1))\n    for i in ans1:\n        print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = [0] * (n + 1)\n    d = dict()\n    for i in range(n):\n        (l, r) = list(map(int, input().split()))\n        l = l - 1\n        r = r - 1\n        res[l] += 1\n        res[r + 1] -= 1\n        d[i] = (l, r)\n    for i in range(1, n):\n        res[i] = res[i - 1] + res[i]\n    op = []\n    for i in range(n):\n        if res[i] == n - 1:\n            (u, v) = d[i]\n            if not (i >= u and i <= v):\n                op.append(i + 1)\n    print(len(op))\n    for i in op:\n        print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    res = [0] * (n + 1)\n    d = dict()\n    for i in range(n):\n        (l, r) = list(map(int, input().split()))\n        l = l - 1\n        r = r - 1\n        res[l] += 1\n        res[r + 1] -= 1\n        d[i] = (l, r)\n    for i in range(1, n):\n        res[i] = res[i - 1] + res[i]\n    op = []\n    for i in range(n):\n        if res[i] == n - 1:\n            (u, v) = d[i]\n            if not (i >= u and i <= v):\n                op.append(i + 1)\n    print(len(op))\n    for i in op:\n        print(i)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    suspicion = [0] * n\n    interogations = []\n    for i in range(n):\n        (x, y) = [int(x) for x in input().split()]\n        interogations.append((x - 1, y - 1))\n        x -= 1\n        suspicion[x] += 1\n        if y < n:\n            suspicion[y] -= 1\n    curSum = 0\n    for i in range(n):\n        curSum += suspicion[i]\n        suspicion[i] = curSum\n    suspects = []\n    for i in range(n):\n        if suspicion[i] == n - 1 and (interogations[i][0] > i or interogations[i][1] < i):\n            suspects.append(i + 1)\n    print(len(suspects))\n    for i in suspects:\n        print(i)", "t = int(input())\nwhile t >= 1:\n    t -= 1\n    n = int(input())\n    arr = [0 for i in range(n + 2)]\n    ind = [True for i in range(n + 2)]\n    for i in range(n):\n        (l, r) = map(int, input().split(' '))\n        arr[l] += 1\n        arr[r + 1] -= 1\n        if i + 1 >= l and i + 1 <= r:\n            ind[i + 1] = False\n    ans = 0\n    l = []\n    for i in range(1, n + 1):\n        arr[i] += arr[i - 1]\n        if arr[i] == n - 1 and ind[i] == True:\n            ans += 1\n            l.append(i)\n    print(ans)\n    for each in l:\n        print(each)", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = [0] * (n + 1)\n    l = [-1] * (n + 1)\n    r = [-1] * (n + 1)\n    for i in range(1, n + 1):\n        (li, ri) = [int(x) for x in input().split()]\n        l[i] = li\n        r[i] = ri\n        arr[li] += 1\n        if ri < n:\n            arr[ri + 1] -= 1\n    for i in range(1, n + 1):\n        arr[i] += arr[i - 1]\n    ans = []\n    for i in range(1, n + 1):\n        if arr[i] == n - 1 and (not (l[i] <= i and i <= r[i])):\n            ans.append(i)\n    print(len(ans))\n    for el in ans:\n        print(el)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0] * (n + 1)\n    d = dict()\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        arr[l] += 1\n        arr[r + 1] -= 1\n        d[i] = (l, r)\n    cur = arr[0]\n    for i in range(1, n + 1):\n        arr[i] = cur + arr[i]\n        cur = arr[i]\n    res = []\n    for i in range(n):\n        if arr[i] == n - 1:\n            (u, v) = d[i]\n            if not (i >= u and i <= v):\n                res.append(i + 1)\n    print(len(res))\n    for i in res:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0] * (n + 1)\n    d = dict()\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        arr[l] += 1\n        arr[r + 1] -= 1\n        d[i] = (l, r)\n    cur = arr[0]\n    for i in range(1, n + 1):\n        arr[i] = cur + arr[i]\n        cur = arr[i]\n    res = []\n    for i in range(n):\n        if arr[i] == n - 1:\n            (u, v) = d[i]\n            if not (i >= u and i <= v):\n                res.append(i + 1)\n    print(len(res))\n    for i in res:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0] * (n + 1)\n    d = dict()\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        arr[l] += 1\n        arr[r + 1] -= 1\n        d[i] = (l, r)\n    cur = arr[0]\n    for i in range(1, n + 1):\n        arr[i] = cur + arr[i]\n        cur = arr[i]\n    res = []\n    for i in range(n):\n        if arr[i] == n - 1:\n            (u, v) = d[i]\n            if not (i >= u and i <= v):\n                res.append(i + 1)\n    print(len(res))\n    for i in res:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0] * (n + 1)\n    d = dict()\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        arr[l] += 1\n        arr[r + 1] -= 1\n        d[i] = (l, r)\n    cur = arr[0]\n    for i in range(1, n + 1):\n        arr[i] = cur + arr[i]\n        cur = arr[i]\n    res = []\n    for i in range(n):\n        if arr[i] == n - 1:\n            (u, v) = d[i]\n            if not (i >= u and i <= v):\n                res.append(i + 1)\n    print(len(res))\n    for i in res:\n        print(i)", "t = int(input())\n\ndef update(l, r, range_sum):\n    if l > r:\n        return\n    range_sum[l] += 1\n    range_sum[r + 1] -= 1\nwhile t:\n    t -= 1\n    n = int(input())\n    range_sum = [0] * (n + 1)\n    curr_person = 0\n    notthief = set()\n    while curr_person < n:\n        (l, r) = [int(x) for x in input().split(' ')]\n        l -= 1\n        r -= 1\n        if curr_person >= l and curr_person <= r:\n            notthief.add(curr_person)\n            update(l, curr_person - 1, range_sum)\n            update(curr_person + 1, r, range_sum)\n        else:\n            update(l, r, range_sum)\n        curr_person += 1\n    cum_sum = 0\n    result = []\n    for curr in range_sum[:-1]:\n        cum_sum += curr\n        result.append(cum_sum)\n    maybe_theif = []\n    for (idx, freq) in enumerate(result):\n        if freq == n - 1:\n            if idx not in notthief:\n                maybe_theif.append(idx)\n    print(len(maybe_theif))\n    for theif in maybe_theif:\n        print(theif + 1)", "from bisect import bisect_right, bisect_left\n\ndef solve(n, claim):\n    starts = []\n    ends = []\n    for (l, r) in claim:\n        starts.append(l)\n        ends.append(r)\n    starts.sort()\n    ends.sort()\n    thieves = []\n    for i in range(1, n + 1):\n        if claim[i - 1][0] <= i <= claim[i - 1][1]:\n            continue\n        s = bisect_right(starts, i)\n        e = bisect_left(ends, i)\n        if s - e == n - 1:\n            thieves.append(i)\n    return thieves\nfor _ in range(int(input())):\n    n = int(input())\n    claim = []\n    for i in range(n):\n        (l, r) = list(map(int, input().split()))\n        claim.append((l, r))\n    thieves = solve(n, claim)\n    print(len(thieves))\n    for person in thieves:\n        print(person)", "for _ in range(int(input())):\n    n = int(input())\n    freq = [0] * (n + 1)\n    ans = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        freq[l] += 1\n        freq[r + 1] -= 1\n        if i < l or i > r:\n            ans.append(i + 1)\n    for i in range(1, n):\n        freq[i] = freq[i] + freq[i - 1]\n    res = []\n    for num in ans:\n        if freq[num - 1] == n - 1:\n            res.append(num)\n    print(len(res))\n    for i in res:\n        print(i)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    votes = [0 for i in range(n)]\n    cand = []\n    for i in range(n):\n        (l, r) = list(map(int, input().split()))\n        l -= 1\n        r -= 1\n        votes[l] = votes[l] + 1\n        if r + 1 < n:\n            votes[r + 1] = votes[r + 1] - 1\n        if i < l or i > r:\n            cand.append(i + 1)\n    for i in range(1, n):\n        votes[i] = votes[i - 1] + votes[i]\n    li = []\n    cnt = 0\n    for i in range(len(votes)):\n        if votes[i] == n - 1 and i + 1 in cand:\n            cnt += 1\n            li.append(i + 1)\n    li.sort()\n    print(cnt)\n    for i in li:\n        print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [0 for _ in range(n + 2)]\n    ranges = {}\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        arr[l] += 1\n        arr[r + 1] -= 1\n        ranges[i + 1] = [l, r]\n    thieves = []\n    ans = 0\n    for i in range(1, n + 1):\n        ans += arr[i]\n        if (i < ranges[i][0] or i > ranges[i][1]) and ans == n - 1:\n            thieves.append(i)\n    print(len(thieves))\n    for t in thieves:\n        print(t)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    call = []\n    mark = [0]\n    mp = {}\n    for i in range(1, n + 1):\n        l.append(i)\n        mp[i] = 0\n        mark.append(0)\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        mark[a - 1] += 1\n        mark[b] -= 1\n        if i + 1 <= b and i + 1 >= a:\n            call.append(-1)\n        else:\n            call.append(1)\n    for i in range(1, n):\n        mark[i] += mark[i - 1]\n    max_ = 0\n    for i in range(n):\n        mark[i] += call[i]\n        max_ = max(max_, mark[i])\n    for i in range(n):\n        mp[l[i]] = mark[i]\n    ans = []\n    for i in range(n):\n        if mp[l[i]] == max_:\n            ans.append(l[i])\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [0 for _ in range(n + 2)]\n    ma = {}\n    for i in range(1, n + 1):\n        [l, r] = [int(x) for x in input().split()]\n        arr[l] += 1\n        arr[r + 1] -= 1\n        if i >= l and i <= r:\n            ma[i] = True\n    ct = 0\n    for i in range(1, n + 1):\n        arr[i] += arr[i - 1]\n        if arr[i] == n - 1 and i not in ma:\n            ct += 1\n    print(str(ct))\n    for i in range(1, n + 1):\n        if arr[i] == n - 1 and i not in ma:\n            print(str(i))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    freq = [0] * (n + 1)\n    ans = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        freq[l] += 1\n        freq[r + 1] -= 1\n        if i < l or i > r:\n            ans.append(i + 1)\n    for i in range(1, n):\n        freq[i] = freq[i] + freq[i - 1]\n    res = []\n    for num in ans:\n        if freq[num - 1] == n - 1:\n            res.append(num)\n    print(len(res))\n    for i in res:\n        print(i)", "def solve(intervals):\n    (start, end) = intervals.pop()\n    ans = [[start, end]]\n    while intervals:\n        (start_temp, end_temp) = intervals.pop()\n        start = max(start, start_temp)\n        end = min(end, end_temp)\n        ans.append([start, end])\n    return ans\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    intervals = []\n    lstt = []\n    ans = []\n    faltu = []\n    for i in range(N):\n        arr = [int(i) for i in input().split()]\n        intervals.append(arr)\n        lstt.append(arr)\n        faltu.append(arr)\n    arr1 = solve(intervals)\n    lstt = lstt[::-1]\n    arr2 = solve(lstt)\n    z = 0\n    for i in range(N):\n        if i == 0:\n            realinfo = arr1[N - 2]\n        elif i == N - 1:\n            realinfo = arr2[N - 2]\n        else:\n            info = solve([arr2[i - 1], arr1[N - i - 2]])\n            realinfo = info[-1]\n        if realinfo[1] < realinfo[0]:\n            pass\n        elif realinfo[0] <= i + 1 <= realinfo[1]:\n            if faltu[i][0] <= i + 1 <= faltu[i][1]:\n                pass\n            else:\n                ans.append(i + 1)\n                z += 1\n        else:\n            pass\n    print(z)\n    for i in ans:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0] * (n + 1)\n    d = dict()\n    for i in range(n):\n        (l, r) = map(int, input().split(' '))\n        (l, r) = (l - 1, r - 1)\n        arr[l] += 1\n        arr[r + 1] -= 1\n        d[i] = (l, r)\n    curr = arr[0]\n    for i in range(1, n + 1):\n        arr[i] = curr + arr[i]\n        curr = arr[i]\n    ans = []\n    for i in range(n):\n        if arr[i] == n - 1:\n            (u, v) = d[i]\n            if not (i >= u and i <= v):\n                ans.append(i + 1)\n    print(len(ans))\n    for item in ans:\n        print(item)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0] * (n + 1)\n    d = dict()\n    for i in range(n):\n        (l, r) = map(int, input().split(' '))\n        (l, r) = (l - 1, r - 1)\n        arr[l] += 1\n        arr[r + 1] -= 1\n        d[i] = (l, r)\n    curr = arr[0]\n    for i in range(1, n + 1):\n        arr[i] = curr + arr[i]\n        curr = arr[i]\n    ans = []\n    for i in range(n):\n        if arr[i] == n - 1:\n            (u, v) = d[i]\n            if not (i >= u and i <= v):\n                ans.append(i + 1)\n    print(len(ans))\n    for item in ans:\n        print(item)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    arr = [0 for _ in range(n + 1)]\n    temp = []\n    for _ in range(n):\n        (l, r) = list(map(int, input().split()))\n        l -= 1\n        arr[l] += 1\n        arr[r] -= 1\n        temp.append([l, r - 1])\n    for i in range(1, n + 1):\n        arr[i] += arr[i - 1]\n    ans = []\n    for i in range(n):\n        if i >= temp[i][0] and i <= temp[i][1]:\n            continue\n        if arr[i] == n - 1:\n            ans.append(i + 1)\n    print(len(ans))\n    for i in ans:\n        print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    votes = [0] * (n + 1)\n    candidates = []\n    for i in range(n):\n        (left, right) = list(map(int, input().split()))\n        left -= 1\n        right -= 1\n        votes[left] += 1\n        votes[right + 1] -= 1\n        if i < left or i > right:\n            candidates.append(i + 1)\n    for i in range(1, n + 1):\n        votes[i] += votes[i - 1]\n    res = []\n    for candidate in candidates:\n        if votes[candidate - 1] == n - 1:\n            res.append(candidate)\n    print(len(res))\n    for candidate in res:\n        print(candidate)", "def segf(arr, n):\n    temp = [0 for i in range(n + 1)]\n    for lst in arr:\n        l = lst[0]\n        r = lst[1]\n        temp[l - 1] += 1\n        temp[r] -= 1\n    for i in range(1, n + 1):\n        temp[i] += temp[i - 1]\n    count = 0\n    ans = []\n    for i in range(1, n + 1):\n        lst = arr[i - 1]\n        if (i < lst[0] or i > lst[1]) and temp[i - 1] == n - 1:\n            count += 1\n            ans.append(i)\n    print(count)\n    for e in ans:\n        print(e)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        arr.append(temp)\n    segf(arr, n)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0] * (n + 1)\n    mapp = {}\n    for i in range(n):\n        (s, e) = map(int, input().split())\n        mapp[i] = (s - 1, e - 1)\n        arr[s - 1] += 1\n        arr[e] -= 1\n    (s, e) = mapp[0]\n    ans = [1] if arr[0] == n - 1 and (not s <= 0 <= e) else []\n    for i in range(1, n):\n        arr[i] += arr[i - 1]\n        (s, e) = mapp[i]\n        if arr[i] == n - 1 and (not s <= i <= e):\n            ans.append(i + 1)\n    print(len(ans))\n    for i in ans:\n        print(i)", "def gcd(a, b):\n    (a, b) = (max(a, b), min(a, b))\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nimport sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    pre = [0 for i in range(n)]\n    isThief = [True for i in range(n)]\n\n    def solve():\n        for i in range(n):\n            (l, r) = get_ints()\n            l -= 1\n            r -= 1\n            pre[l] += 1\n            if r != n - 1:\n                pre[r + 1] -= 1\n            if i >= l and i <= r:\n                isThief[i] = False\n        cnt = [pre[0] for _ in range(n)]\n        for i in range(1, n):\n            cnt[i] = cnt[i - 1] + pre[i]\n        for i in range(n):\n            if cnt[i] != n - 1:\n                isThief[i] = False\n        res = isThief.count(True)\n        print(res)\n        for i in range(n):\n            if isThief[i]:\n                print(i + 1)\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] * (n + 1)\n    nth = set()\n    for i in range(1, n + 1):\n        (l, r) = map(int, input().split())\n        a[l - 1] += 1\n        a[r] -= 1\n        if l <= i <= r:\n            nth.add(i)\n    for i in range(n):\n        a[i + 1] += a[i]\n    th = []\n    for i in range(1, n + 1):\n        if i not in nth and a[i - 1] == n - 1:\n            th.append(i)\n    print(len(th))\n    for t in th:\n        print(t)", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] * (n + 1)\n    nth = set()\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        a[l - 1] += 1\n        a[r] -= 1\n        if l <= i + 1 <= r:\n            nth.add(i + 1)\n    for i in range(n - 1):\n        a[i + 1] += a[i]\n    th = []\n    for i in range(n):\n        if i + 1 not in nth and a[i] == n - 1:\n            th.append(i + 1)\n    print(len(th))\n    for t in th:\n        print(t)", "for i in range(int(input())):\n    a = int(input())\n    l = []\n    for i in range(a):\n        l.append(list(map(int, input().split(' '))))\n    r = [0] * (a + 2)\n    choose = []\n    for i in range(a):\n        if i + 1 < l[i][0] or i + 1 > l[i][1]:\n            choose.append(i + 1)\n    for i in range(a):\n        r[l[i][0] - 1] += 1\n        r[l[i][1]] -= 1\n    sum = [0] * (a + 1)\n    k = 0\n    for i in range(a + 1):\n        k += r[i]\n        sum[i] = k\n    cnt = 0\n    ans = []\n    for i in range(len(choose)):\n        if sum[choose[i] - 1] == a - 1:\n            ans.append(choose[i])\n    print(len(ans))\n    print(*ans, sep='\\n')", "import sys\ninput = sys.stdin.readline\nM = int(1000000000.0) + 7\n\ndef solve():\n    n = int(input())\n    lr = [[int(x) - 1 for x in input().split()] for _ in range(n)]\n    pre = [0] * (n + 1)\n    for (i, j) in lr:\n        pre[i] += 1\n        pre[j + 1] -= 1\n    for i in range(1, n + 1):\n        pre[i] += pre[i - 1]\n    ans = []\n    for i in range(n):\n        if pre[i] == n - 1:\n            if lr[i][0] <= i and i <= lr[i][1]:\n                continue\n            ans.append(i + 1)\n    print(len(ans))\n    for i in ans:\n        print(i)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    freq = [0] * (n + 1)\n    ans = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        freq[l] += 1\n        freq[r + 1] -= 1\n        if i < l or i > r:\n            ans.append(i + 1)\n    for i in range(1, n):\n        freq[i] = freq[i] + freq[i - 1]\n    res = []\n    for num in ans:\n        if freq[num - 1] == n - 1:\n            res.append(num)\n    print(len(res))\n    for i in res:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    ans = []\n    nums = []\n    people = [0] * (n + 1)\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        nums.append([l, r])\n        people[l] += 1\n        if r < n:\n            people[r + 1] -= 1\n    for i in range(2, n + 1):\n        people[i] += people[i - 1]\n    for i in range(1, n + 1):\n        if people[i] == n - 1 and (i < nums[i - 1][0] or i > nums[i - 1][1]):\n            ans.append(i)\n    print(len(ans))\n    for i in ans:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    ans = []\n    nums = []\n    people = [0] * (n + 1)\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        nums.append([l, r])\n        people[l] += 1\n        if r < n:\n            people[r + 1] -= 1\n    for i in range(2, n + 1):\n        people[i] += people[i - 1]\n    for i in range(1, n + 1):\n        if people[i] == n - 1 and (i < nums[i - 1][0] or i > nums[i - 1][1]):\n            ans.append(i)\n    print(len(ans))\n    for i in ans:\n        print(i)", "from itertools import accumulate as acc\n\ndef miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    a = list((list(miis()) for i in range(n)))\n    pref = [0 for i in range(n + 1)]\n    for i in a:\n        (l, r) = i\n        pref[l - 1] += 1\n        pref[r] -= 1\n    ac = list(acc(pref))\n    th = []\n    for i in range(n):\n        if ac[i] == n - 1 and (a[i][0] > i + 1 or a[i][1] < i + 1):\n            th.append(i + 1)\n    print(len(th))\n    print(*th, sep='\\n')", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    d = {}\n    for j in range(0, n + 1):\n        d[j] = 0\n    s = set()\n    for j in range(0, n):\n        (a, b) = map(int, input().split(' '))\n        if a <= j + 1 <= b:\n            s.add(j + 1)\n        d[a - 1] += 1\n        d[b] -= 1\n    ans = []\n    for j in range(1, n + 1):\n        d[j] += d[j - 1]\n    for j in range(0, n):\n        if d[j] == n - 1 and j + 1 not in s:\n            ans.append(j + 1)\n    print(len(ans))\n    for j in ans:\n        print(j)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [0] * (n + 1)\n    s = set()\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        if a <= i + 1 <= b:\n            s.add(i + 1)\n        arr[a - 1] += 1\n        arr[b] -= 1\n    for i in range(1, n + 1):\n        arr[i] += arr[i - 1]\n    ans = []\n    for i in range(len(arr)):\n        if arr[i] == n - 1 and i + 1 not in s:\n            ans += [i + 1]\n    print(len(ans))\n    print(*ans, sep='\\n')", "import math\nimport sys\nfrom collections import deque\n\ndef answer(n):\n    check = []\n    for i in range(n + 2):\n        check.append(0)\n    check2 = []\n    for i in range(n):\n        check2.append(0)\n    for i in range(n):\n        txt = input()\n        (l, r) = list(map(int, txt.split(' ')))\n        check[l] += 1\n        check[r + 1] += -1\n        if i + 1 >= l and i + 1 <= r:\n            check2[i] = 1\n    for i in range(1, n + 1):\n        check[i] = check[i] + check[i - 1]\n    check = deque(check)\n    check.popleft()\n    check.pop()\n    ans = []\n    for i in range(n):\n        if check[i] >= n - 1 and check2[i] == 0:\n            ans.append(i + 1)\n    print(len(ans))\n    for ele in ans:\n        print(ele)\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    answer(n)", "import math\nimport sys\nfrom collections import deque\n\ndef answer(n):\n    check = []\n    for i in range(n + 2):\n        check.append(0)\n    check2 = []\n    for i in range(n):\n        check2.append(0)\n    for i in range(n):\n        txt = input()\n        (l, r) = list(map(int, txt.split(' ')))\n        check[l] += 1\n        check[r + 1] += -1\n        if i + 1 >= l and i + 1 <= r:\n            check2[i] = 1\n    for i in range(1, n + 1):\n        check[i] = check[i] + check[i - 1]\n    check = deque(check)\n    check.popleft()\n    check.pop()\n    ans = []\n    for i in range(n):\n        if check[i] >= n - 1 and check2[i] == 0:\n            ans.append(i + 1)\n    print(len(ans))\n    for ele in ans:\n        print(ele)\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    answer(n)", "import math\nimport collections\nimport sys\nfor _ in range(int(input())):\n    N = int(input())\n    A = []\n    for _ in range(N):\n        A.append(list(map(int, input().split())))\n    l = -sys.maxsize\n    r = sys.maxsize\n    B = [[0, 0] for i in range(N)]\n    for i in range(N - 1, -1, -1):\n        l = max(l, A[i][0])\n        r = min(r, A[i][1])\n        B[i][0] = l\n        B[i][1] = r\n    l = -sys.maxsize\n    r = sys.maxsize\n    E = []\n    for i in range(N):\n        (C, D) = (l, r)\n        if i + 1 < N:\n            C = max(B[i + 1][0], l)\n            D = min(B[i + 1][1], r)\n        if C <= i + 1 and D >= i + 1:\n            if A[i][0] > i + 1 or A[i][1] < i + 1:\n                E.append(i + 1)\n        l = max(A[i][0], l)\n        r = min(A[i][1], r)\n    print(len(E))\n    for i in E:\n        print(i)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append([int(i) for i in input().split()])\n    ls = [a[i][0] for i in range(len(a))]\n    rs = [a[i][1] for i in range(len(a))]\n    (ls, rs) = (sorted(ls), sorted(rs))\n    k = []\n    for i in range(1, n + 1):\n        if i < a[i - 1][0] or i > a[i - 1][1]:\n            (l, r) = (ls[-1], rs[0])\n            if a[i - 1][0] == ls[-1]:\n                l = ls[-2]\n            if a[i - 1][1] == rs[0]:\n                r = rs[1]\n            if i <= r and i >= l:\n                k.append(i)\n    print(len(k))\n    k = sorted(k)\n    for i in range(len(k)):\n        print(k[i])\n    t -= 1", "from collections import defaultdict, Counter, deque\nfrom math import sqrt, log10, log, floor, factorial, gcd, ceil, log2\nfrom bisect import bisect_left, bisect_right, insort\nfrom itertools import permutations, combinations\nimport sys, io, os\ninput = sys.stdin.readline\ninf = float('inf')\nmod = 10 ** 9 + 7\n\ndef yn(a):\n    print('YES' if a else 'NO')\ncl = lambda a, b: (a + b - 1) // b\n\nclass RangeQuery:\n\n    def __init__(self, data, func=min, default=0):\n        self.func = func\n        self._data = _data = [list(data)]\n        self.defualt = default\n        (i, n) = (1, len(_data[0]))\n        while 2 * i <= n:\n            prev = _data[-1]\n            _data.append([func(prev[j], prev[j + i]) for j in range(n - 2 * i + 1)])\n            i <<= 1\n        self.bit_len = [0 for i in range(n + 1)]\n        for i in range(1, n + 1):\n            self.bit_len[i] = self.bit_len[i // 2] + 1\n\n    def query_normal(self, start, stop):\n        ans = self.defualt\n        for j in range(self.bit_len[stop - start] - 1, -1, -1):\n            if 1 << j <= stop - start:\n                ans = self.func(ans, self._data[j][start])\n                start += 1 << j\n        return ans\n\n    def query(self, start, stop):\n        depth = self.bit_len[stop - start] - 1\n        return self.func(self._data[depth][start], self._data[depth][stop - (1 << depth)])\n\n    def __getitem__(self, idx):\n        return self._data[0][idx]\n\ndef fun(l, r):\n    start = max(l[0], r[0])\n    end = min(l[1], r[1])\n    if start > end:\n        return [0, 0]\n    return [start, end]\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        (l, r) = [int(i) for i in input().split()]\n        arr.append([l, r])\n    q = RangeQuery(arr, fun, [1, n])\n    counter = []\n    for i in range(n):\n        (a, b) = ([1, n], [1, n])\n        l = arr[i]\n        if i != 0:\n            a = q.query(0, i)\n        if i != n - 1:\n            b = q.query(i + 1, n)\n        ans = a\n        ans = fun(ans, b)\n        if ans[0] <= i + 1 <= ans[1] and (not l[0] <= i + 1 <= l[1]):\n            counter.append(i)\n    print(len(counter))\n    for i in counter:\n        print(i + 1)", "for _ in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    suff = [[0, 0]] * n\n    (a, b) = (1, n)\n    for i in range(n - 1, -1, -1):\n        (a, b) = (max(a, arr[i][0]), min(b, arr[i][1]))\n        if a <= b:\n            suff[i] = [a, b]\n    suff.append([1, n])\n    (a, b) = (1, n)\n    ans = []\n    for i in range(n):\n        if suff[i + 1] != [0, 0]:\n            (c, d) = (max(a, suff[i + 1][0]), min(b, suff[i + 1][1]))\n            if not arr[i][0] <= i + 1 <= arr[i][1] and c <= i + 1 <= d:\n                ans.append(i + 1)\n        (a, b) = (max(a, arr[i][0]), min(b, arr[i][1]))\n    print(len(ans))\n    for e in ans:\n        print(e)", "import sys\nimport numpy as np\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt(input):\n    return list(map(int, input().split()))\nt = inp()\nfor _ in range(t):\n    n = inp()\n    cand = [0] * (n + 2)\n    store = [None]\n    for _ in range(n):\n        (start, end) = inlt(input)\n        store.append((start, end))\n        cand[start] += 1\n        cand[end + 1] -= 1\n    cumsum = list(np.cumsum(cand))\n    count = []\n    found = -1\n    for i in range(1, n + 1):\n        if cumsum[i] == n - 1:\n            if not store[i][0] <= i <= store[i][1]:\n                count.append(i)\n    print(len(count))\n    for i in range(len(count)):\n        print(count[i])", "def Solution(l1, l2, n):\n    arr = [0 for i in range(n + 2)]\n    for i in range(0, n):\n        arr[l1[i]] += 1\n        arr[l2[i] + 1] -= 1\n    msum = arr[0]\n    for i in range(1, n + 2):\n        arr[i] += arr[i - 1]\n    return arr\nimport collections\nfor _ in range(int(input())):\n    n = int(input())\n    p = []\n    d2 = collections.defaultdict(lambda : 0)\n    for z in range(1, n + 1):\n        (l, r) = map(int, input().split())\n        p.append((l, r))\n    q = p.copy()\n    p.sort()\n    l1 = []\n    l2 = []\n    for (x, y) in p:\n        l1.append(x)\n        l2.append(y)\n    ans = Solution(l1, l2, n)\n    t = []\n    for i in range(n + 1):\n        if ans[i] == n - 1:\n            (a, b) = q[i - 1]\n            if a <= i and i <= b:\n                continue\n            else:\n                t.append(i)\n    print(len(t))\n    for e in t:\n        print(e)", "t = int(input())\nwhile t:\n    k = int(input())\n    m = [0] * (k + 2)\n    low = [0]\n    high = [0]\n    r = []\n    for g in range(1, k + 1):\n        (i, j) = map(int, input().split())\n        low.append(i)\n        high.append(j)\n        m[i] += 1\n        m[j + 1] -= 1\n    for i in range(1, k + 1):\n        m[i] += m[i - 1]\n    for i in range(1, k + 1):\n        if m[i] == k - 1:\n            if not (low[i] <= i and high[i] >= i):\n                r.append(i)\n    print(len(r))\n    for i in sorted(r):\n        print(i, end='\\n')\n    t -= 1", "def fun(l, r, out, x, y, i):\n    if x > r or y < l:\n        if i >= l and i <= r:\n            out.append(i)\n        return\n    if l < x:\n        if i >= l and i < x:\n            out.append(i)\n            return\n    if y < r:\n        if i > y and i <= r:\n            out.append(i)\n    return\nfor t in range(int(input())):\n    n = int(input())\n    a = [list((int(i) for i in input().split())) for i in range(n)]\n    f = [[0, 0] for i in range(n)]\n    prev = [1, n]\n    for i in range(n):\n        f[i][0] = max(prev[0], a[i][0])\n        f[i][1] = min(prev[1], a[i][1])\n        prev[0] = f[i][0]\n        prev[1] = f[i][1]\n    b = [[0, 0] for i in range(n)]\n    b.append([-n - 1, n + 1])\n    prev = [1, n]\n    for i in range(n - 1, -1, -1):\n        b[i][0] = max(prev[0], a[i][0])\n        b[i][1] = min(prev[1], a[i][1])\n        prev[0] = b[i][0]\n        prev[1] = b[i][1]\n    out = []\n    for i in range(1, n):\n        l = max(f[i - 1][0], b[i + 1][0])\n        r = min(f[i - 1][1], b[i + 1][1])\n        if l <= r:\n            fun(l, r, out, a[i][0], a[i][1], i + 1)\n    if b[1][0] <= b[1][1]:\n        fun(b[1][0], b[1][1], out, a[0][0], a[1][0], 1)\n    c = len(out)\n    out.sort()\n    print(c)\n    for i in range(c):\n        print(out[i])", "def craet(n):\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    x = {}\n    for i in arr:\n        a = i[0]\n        b = i[1]\n        if a not in x:\n            x[a] = [0, 0]\n        if b not in x:\n            x[b] = [0, 0]\n        x[a][0] += 1\n        x[b][1] += 1\n    count = {}\n    c = 0\n    for i in range(1, n + 1):\n        if i in x:\n            c += x[i][0]\n        count[i] = c\n        if i in x:\n            c -= x[i][1]\n    ans = []\n    for i in count:\n        if count[i] == n - 1 and (i < arr[i - 1][0] or i > arr[i - 1][1]):\n            ans.append(str(i))\n    print(len(ans))\n    print('\\n'.join(ans))\nfor i in range(int(input())):\n    craet(int(input()))", "from bisect import bisect_left, bisect_right\n\ndef ins(ls, rs, tup):\n    (x, y) = tup\n    if y < x:\n        return\n    ptl = bisect_left(ls, x)\n    ptr = bisect_right(rs, y)\n    if ptl > ptr:\n        return\n    for i in range(ptl, ptr):\n        ls.pop(ptl)\n        rs.pop(ptl)\n    if ptl > 0 and rs[ptl - 1] >= x - 1:\n        ptl -= 1\n        x = ls[ptl]\n        ls.pop(ptl)\n        rs.pop(ptl)\n    if ptl < len(rs) and ls[ptl] <= y + 1:\n        y = rs[ptl]\n        ls.pop(ptl)\n        rs.pop(ptl)\n    ls.insert(ptl, x)\n    rs.insert(ptl, y)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ls = []\n    rs = []\n    for i in range(1, n + 1):\n        (l, r) = map(int, input().split())\n        ns = []\n        if i < l:\n            ns.append((1, i - 1))\n            ns.append((i + 1, l - 1))\n            ns.append((r + 1, n))\n        elif i > r:\n            ns.append((1, l - 1))\n            ns.append((r + 1, i - 1))\n            ns.append((i + 1, n))\n        else:\n            ns.append((1, l - 1))\n            ns.append((i, i))\n            ns.append((r + 1, n))\n        for tup in ns:\n            ins(ls, rs, tup)\n    pos = 0\n    ans = []\n    for i in range(1, n + 1):\n        if pos >= len(ls):\n            ans.append(i)\n        else:\n            if i > rs[pos]:\n                pos += 1\n            if pos >= len(ls):\n                ans.append(i)\n            elif not ls[pos] <= i <= rs[pos]:\n                ans.append(i)\n    print(len(ans))\n    for i in ans:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    (arr, ll, rl, lr) = ([i for i in range(1, n + 1)], [0 for i in range(n)], [0 for i in range(n)], [])\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        lr.append([l, r])\n        ll[l - 1] += 1\n        rl[r - 1] += 1\n    (ans, l1, r1) = ([max(ll[0], rl[0])], ll[0], rl[0])\n    for i in range(1, n):\n        ans.append(l1 + ll[i] - r1)\n        l1 += ll[i]\n        r1 += rl[i]\n    ans1 = []\n    for i in range(1, n + 1):\n        if lr[i - 1][0] <= i <= lr[i - 1][1]:\n            continue\n        if ans[i - 1] == n - 1:\n            ans1.append(i)\n    print(len(ans1))\n    for i in ans1:\n        print(i)", "import math\nfrom collections import Counter\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    mar = [0] * (n + 2)\n    sm = [0] * (n + 1)\n    for i in range(n):\n        a = list(map(int, input().split()))\n        if a[0] <= i + 1 <= a[1]:\n            sm[i + 1] = 1\n        mar[a[0]] += 1\n        mar[a[1] + 1] -= 1\n    su = 0\n    for i in range(n + 2):\n        su += mar[i]\n        mar[i] = su\n    vi = []\n    dd = n - 1\n    for i in range(len(mar)):\n        if mar[i] == dd and sm[i] == 0:\n            vi.append(i)\n    print(len(vi))\n    for i in vi:\n        print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = [0] * (n + 1)\n    M = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        M.append((a, b))\n    for i in range(n):\n        (a, b) = M[i]\n        j = i + 1\n        L[a - 1] += 1\n        L[b] -= 1\n    for i in range(1, n):\n        L[i] += L[i - 1]\n    for i in range(n):\n        (a, b) = M[i]\n        j = i + 1\n        if j < a or j > b:\n            L[i] += 1\n        else:\n            L[i] -= 1\n    ans = []\n    for i in range(n):\n        if L[i] == n:\n            ans.append(i + 1)\n    print(len(ans))\n    for i in range(len(ans)):\n        print(ans[i])", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor T in range(int(input())):\n    n = ni()\n    final = [0] * (n + 1)\n    potential = []\n    for i in range(n):\n        (l, r) = mi()\n        if not (l <= i + 1 and r >= i + 1):\n            potential.append(i)\n        final[l - 1] += 1\n        final[r] -= 1\n    for i in range(1, len(final)):\n        final[i] += final[i - 1]\n    final = final[:-1]\n    count = []\n    for i in potential:\n        if final[i] == n - 1:\n            count.append(i + 1)\n    print(len(count))\n    for i in count:\n        print(i)", "import sys\nreadline = sys.stdin.readline\nimport math\nfrom sys import stdin\nsys_max = sys.maxsize\nfrom collections import Counter\nfrom collections import deque\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    ans = []\n    for i in range(n):\n        (x, y) = [int(x) for x in input().split()]\n        l.append([x, y])\n    pre = [0 for _ in range(n + 2)]\n    vis = [0 for _ in range(n + 1)]\n    for i in range(n):\n        u = l[i][0]\n        v = l[i][1]\n        pre[u] += 1\n        pre[v + 1] -= 1\n        if u > i + 1 or v < i + 1:\n            vis[i + 1] = 1\n    cnt = 0\n    for i in range(1, n + 2):\n        pre[i] += pre[i - 1]\n    for i in range(1, n + 1):\n        if pre[i] == n - 1 and vis[i] == 1:\n            cnt += 1\n            ans.append(i)\n    print(len(ans))\n    for i in ans:\n        print(i)\n    print()", "def initializeDiffArray(A):\n    n = len(A)\n    D = [0 for i in range(0, n + 1)]\n    D[0] = A[0]\n    D[n] = 0\n    for i in range(1, n):\n        D[i] = A[i] - A[i - 1]\n    return D\n\ndef update(D, l, r, x):\n    D[l] += x\n    D[r + 1] -= x\n\ndef printArray(A, D):\n    arr = []\n    for i in range(0, len(A)):\n        if i == 0:\n            A[i] = D[i]\n        else:\n            A[i] = D[i] + A[i - 1]\n        arr.append(A[i])\n    return arr\nT = int(input())\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    k = []\n    d = []\n    A = [0] * (n + 1)\n    D = initializeDiffArray(A)\n    for i in range(1, n + 1):\n        (l, r) = map(int, input().split())\n        if l <= i <= r:\n            pass\n        else:\n            d.append(i)\n        update(D, l, r, 1)\n    p = printArray(A, D)\n    ans = []\n    for i in d:\n        if p[i] == n - 1:\n            ans.append(i)\n    print(len(ans))\n    print(*ans, sep='\\n')", "strng = lambda : input().split()[0]\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nslst = lambda : list(input().split()[0])\nsilst = lambda : list(map(int, input().split()[0]))\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom math import ceil, log, floor, sqrt, gcd, log10\n\ndef merge(a, lo, hi, m):\n    tmp = []\n    i = lo\n    j = m + 1\n    while i <= m and j <= hi:\n        if a[i] > a[j]:\n            tmp += [a[j]]\n            j += 1\n        else:\n            tmp += [a[i]]\n            i += 1\n    while i <= m:\n        tmp += [a[i]]\n        i += 1\n    while j <= hi:\n        tmp += [a[j]]\n        j += 1\n    j = 0\n    for i in range(lo, hi + 1):\n        a[i] = tmp[j]\n        j += 1\n\ndef msrt(arr, lo, hi):\n    if lo < hi:\n        m = (lo + hi) // 2\n        msrt(arr, lo, m)\n        msrt(arr, m + 1, hi)\n        merge(arr, lo, hi, m)\n\ndef part(a, lo, hi):\n    i = lo - 1\n    j = 0\n    while j < hi:\n        if a[j] <= a[hi]:\n            i += 1\n            (a[j], a[i]) = (a[i], a[j])\n        j += 1\n    (a[i + 1], a[hi]) = (a[hi], a[i + 1])\n    return i + 1\n\ndef qsrt(arr, lo, hi):\n    if lo < hi:\n        m = part(arr, lo, hi)\n        print(m)\n        qsrt(arr, lo, m - 1)\n        qsrt(arr, m + 1, hi)\nfor _ in range(inp()):\n    n = inp()\n    a = [0] * n\n    d = defaultdict(lambda : 0)\n    for i in range(n):\n        (l, r) = mul()\n        a[l - 1] += 1\n        if i >= l - 1 and i <= r - 1:\n            d[i] += 1\n        if r < n:\n            a[r] -= 1\n    s = 0\n    for i in range(n):\n        s += a[i]\n        a[i] = s\n    maxi = n - 1\n    ans = 0\n    ansarr = []\n    for i in range(n):\n        if a[i] == maxi and i not in d:\n            ans += 1\n            ansarr += [i + 1]\n    print(ans)\n    print(*ansarr, sep='\\n')", "for _ in range(int(input())):\n    n = int(input())\n    freq = [0 for i in range(n + 1)]\n    l = n\n    h = 0\n    d1 = {}\n    for i in range(1, n + 1):\n        (a, b) = map(int, input().split())\n        if a < l:\n            l = a\n        if b > h:\n            h = b\n        freq[a] = freq[a] + 1\n        if b < n:\n            freq[b + 1] = freq[b + 1] - 1\n        if i >= a and b >= i:\n            d1[i] = 1\n    for i in range(l, h + 1):\n        freq[i] = freq[i] + freq[i - 1]\n    ans = 0\n    l1 = []\n    for i in range(1, n + 1):\n        if freq[i] == n - 1 and d1.get(i) == None:\n            ans += 1\n            l1.append(i)\n    print(ans)\n    for i in l1:\n        print(i)\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] * (n + 2)\n    s = set()\n    for i in range(1, n + 2):\n        a[i] = 0\n    if 443434 == 343434:\n        print('Tanmay')\n    for i in range(1, n + 1):\n        (l, r) = [int(x) for x in input().split()]\n        a[l] += 1\n        a[r + 1] -= 1\n        if i >= l and i <= r:\n            s.add(i)\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    aa = []\n    for i in range(1, n + 1):\n        if a[i] == n - 1 and i not in s:\n            aa.append(i)\n    print(len(aa))\n    for i in aa:\n        print(i)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    rlist = []\n    vals = []\n    for theta in range(N):\n        (L, R) = map(int, input().split(' '))\n        rlist.append((L, R, theta + 1))\n    rlist.sort(key=lambda x: x[0])\n    ub = N\n    for delta in range(N - 1):\n        ub = min(ub, rlist[delta][1])\n    if rlist[-1][2] in range(rlist[-2][0], min(ub + 1, rlist[-1][0])):\n        vals.append(rlist[-1][2])\n    rlist.sort(key=lambda x: x[1])\n    lb = 0\n    for epsilon in range(1, N):\n        lb = max(lb, rlist[epsilon][0])\n    if rlist[0][2] in range(max(rlist[0][1] + 1, lb), rlist[1][1] + 1):\n        vals.append(rlist[0][2])\n    print(len(vals))\n    vals.sort()\n    for alpha in range(len(vals)):\n        print(vals[alpha])", "for _ in range(int(input())):\n    n = int(input())\n    l = [0] * (n + 2)\n    start = [0] * (n + 2)\n    end = [0] * (n + 2)\n    for i in range(1, n + 1):\n        (s, e) = map(int, input().strip().split(' '))\n        start[i] = s\n        end[i] = e\n        l[s] += 1\n        l[e + 1] -= 1\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    res = []\n    for i in range(1, n + 1):\n        if l[i] == n - 1:\n            if not (start[i] <= i and end[i] >= i):\n                res.append(i)\n    print(len(res))\n    for i in res:\n        print(i)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    queries = []\n    a = [0 for _ in range(n + 2)]\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        queries.append((l, r))\n        a[l] += 1\n        a[r + 1] -= 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    st = set()\n    for i in range(1, n + 1):\n        if a[i] == n - 1:\n            (l, r) = queries[i - 1]\n            if l <= i <= r:\n                continue\n            st.add(i)\n    ans = sorted(st)\n    print(len(ans))\n    for i in ans:\n        print(i)", "from bisect import bisect_left, bisect_right\n\nclass Result:\n\n    def __init__(self, index, value):\n        self.index = index\n        self.value = value\n\nclass BinarySearch:\n\n    def __init__(self):\n        pass\n\n    @staticmethod\n    def greater_than(num: int, func, size: int=1):\n        if isinstance(func, list):\n            index = bisect_right(func, num)\n            if index == len(func):\n                return Result(None, None)\n            else:\n                return Result(index, func[index])\n        else:\n            (alpha, omega) = (0, size - 1)\n            if func(omega) <= num:\n                return Result(None, None)\n            while alpha < omega:\n                if func(alpha) > num:\n                    return Result(alpha, func(alpha))\n                if omega == alpha + 1:\n                    return Result(omega, func(omega))\n                mid = (alpha + omega) // 2\n                if func(mid) > num:\n                    omega = mid\n                else:\n                    alpha = mid\n\n    @staticmethod\n    def less_than(num: int, func, size: int=1):\n        if isinstance(func, list):\n            index = bisect_left(func, num) - 1\n            if index == -1:\n                return Result(None, None)\n            else:\n                return Result(index, func[index])\n        else:\n            (alpha, omega) = (0, size - 1)\n            if func(alpha) >= num:\n                return Result(None, None)\n            while alpha < omega:\n                if func(omega) < num:\n                    return Result(omega, func(omega))\n                if omega == alpha + 1:\n                    return Result(alpha, func(alpha))\n                mid = (alpha + omega) // 2\n                if func(mid) < num:\n                    alpha = mid\n                else:\n                    omega = mid\n\ndef Sieve(limit=10 ** 6):\n    isPrime = [1] * (limit + 1)\n    isPrime[0] = isPrime[1] = 0\n    for i in range(2, limit + 1):\n        if isPrime[i] != 1:\n            continue\n        for j in range(i * i, limit + 1, i):\n            isPrime[j] = i\n    return isPrime\n\ndef get_prime_factors(n, isPrime):\n    if n < 2:\n        return []\n    result = []\n    while isPrime[n] != 1:\n        result += [isPrime[n]]\n        n //= isPrime[n]\n    result += [n]\n    return result\n\ndef gcd(a, b):\n    while b != 0:\n        a = a % b\n        (a, b) = (b, a)\n    return a\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        lst = [None]\n        for i in range(n):\n            a = tuple(map(int, input().split()))\n            lst.append(a)\n        fin = []\n        for i in range(1, n + 1):\n            v1 = lst[i][0]\n            v2 = lst[i][1]\n            if i < v1 or i > v2:\n                chk = True\n                for k in range(1, n + 1):\n                    if i != k:\n                        v3 = lst[k][0]\n                        v4 = lst[k][1]\n                        if i < v3 or i > v4:\n                            chk = False\n                            break\n                if chk:\n                    fin.append(i)\n        print(len(fin))\n        for i in fin:\n            print(i)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    diff = [0 for i in range(n + 1)]\n    ranges = []\n    for i in range(n):\n        (u, v) = [int(x) - 1 for x in input().split()]\n        ranges.append([u, v])\n        diff[u] += 1\n        diff[v + 1] -= 1\n    thieves = []\n    for i in range(1, n + 1):\n        diff[i] += diff[i - 1]\n    for i in range(n):\n        if diff[i] == 0 or (i >= ranges[i][0] and i <= ranges[i][1]):\n            continue\n        if diff[i] == n - 1:\n            thieves.append(i + 1)\n    print(len(thieves))\n    for x in thieves:\n        print(x)", "import sys\n\ndef _input():\n    return sys.stdin.readline().strip()\n\ndef main():\n    for _ in range(int(_input())):\n        n = int(_input())\n        l = [None]\n        for i in range(n):\n            x = tuple(map(int, _input().split()))\n            l.append(x)\n        ans = []\n        for i in range(1, n + 1):\n            x1 = l[i][0]\n            y1 = l[i][1]\n            if i >= x1 and i <= y1:\n                pass\n            else:\n                check = True\n                for j in range(1, n + 1):\n                    if i != j:\n                        x2 = l[j][0]\n                        y2 = l[j][1]\n                        if i >= x2 and i <= y2:\n                            pass\n                        else:\n                            check = False\n                            break\n                if check:\n                    ans.append(i)\n        print(len(ans))\n        for i in ans:\n            print(i)\nmain()", "def solve(n, qr):\n    arr = [0 for i in range(n + 1)]\n    for val in qr:\n        arr[val[0] - 1] += 1\n        arr[val[1]] -= 1\n    for i in range(1, n + 1):\n        arr[i] += arr[i - 1]\n    return arr\n\ndef ans(arr, qr, n):\n    te = []\n    for i in range(n):\n        if qr[i][0] - 1 <= i <= qr[i][1] - 1:\n            arr[i] -= 1\n            if arr[i] == n:\n                te.append(i + 1)\n            arr[i] += 1\n        else:\n            arr[i] += 1\n            if arr[i] == n:\n                te.append(i + 1)\n            arr[i] -= 1\n    return te\nfor i in range(int(input())):\n    n = int(input())\n    quer = []\n    for i in range(n):\n        (v1, v2) = map(int, input().split())\n        quer.append((v1, v2))\n    arr = solve(n, quer)\n    sol = ans(arr, quer, n)\n    print(len(sol))\n    for val in sol:\n        print(val)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = [lis() for i in range(n)]\n        p = [0] * (n + 1)\n        s = set()\n        for k in range(len(arr)):\n            (i, j) = arr[k]\n            if i <= k + 1 <= j:\n                s.add(k + 1)\n            i -= 1\n            j -= 1\n            p[i] += 1\n            p[j + 1] -= 1\n        p = list(accumulate(p))\n        ans = []\n        for i in range(n):\n            if p[i] == n - 1:\n                if i + 1 in s:\n                    continue\n                ans.append(i)\n        print(len(ans))\n        for i in ans:\n            print(i + 1)\nmain()", "for h in range(int(input())):\n    n = int(input())\n    x = [0] * (n + 1)\n    vec = []\n    temp = []\n    for j in range(n):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        x[a] += 1\n        x[b + 1] -= 1\n        vec.append([a, b])\n    x[-1] = 0\n    for i in range(n):\n        x[i] += x[i - 1]\n        if (i > vec[i][1] or i < vec[i][0]) and x[i] == n - 1:\n            temp.append(i + 1)\n    print(len(temp))\n    for i in temp:\n        print(i)", "for _ in range(int(input())):\n    n = int(input())\n    thief = [0] * (n + 1)\n    lst = []\n    for x in range(n):\n        (x, y) = map(int, input().split())\n        lst.append([x, y])\n        thief[x - 1] += 1\n        thief[y] -= 1\n    for x in range(1, n + 1):\n        thief[x] += thief[x - 1]\n    rslt = []\n    cnt = 0\n    for x in range(1, 1 + n):\n        y = lst[x - 1][0]\n        z = lst[x - 1][1]\n        if thief[x - 1] == n - 1 and (x < y or x > z):\n            rslt.append(x)\n            cnt += 1\n    print(cnt)\n    print(*rslt, sep='\\n')", "def update(D, l, r, x):\n    D[l] += x\n    D[r + 1] -= x\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = [list(map(int, input().split())) for i in range(n)]\n    a1 = [0] * (n + 1)\n    for r in a:\n        update(a1, r[0] - 1, r[1] - 1, 1)\n    ans = 0\n    aa = []\n    for j in range(1, n):\n        a1[j] = a1[j] + a1[j - 1]\n    for k in range(n):\n        if a1[k] == n - 1 and (a[k][0] > k + 1 or a[k][1] < k + 1):\n            ans += 1\n            aa += [k + 1]\n    print(ans)\n    for y in aa:\n        print(y)", "for _ in range(int(input())):\n    n = int(input())\n    l = [0 for i in range(n + 1)]\n    q = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        q.append((a, b))\n        l[a - 1] += 1\n        l[b] -= 1\n    ans = []\n    for i in range(n):\n        if i > 0:\n            l[i] += l[i - 1]\n        if q[i][0] - 1 <= i <= q[i][1] - 1:\n            l[i] -= 1\n            if l[i] == n:\n                ans.append(i + 1)\n            l[i] += 1\n        else:\n            l[i] += 1\n            if l[i] == n:\n                ans.append(i + 1)\n            l[i] -= 1\n    print(len(ans))\n    for val in ans:\n        print(val)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    newa = set()\n    j = 1\n    for i in a:\n        if i[0] <= j and i[1] >= j:\n            newa.add(j)\n        j += 1\n    now = [0 for i in range(n)]\n    for i in a:\n        now[i[0] - 1] += 1\n        if i[1] < n:\n            now[i[1]] -= 1\n    for i in range(1, n):\n        now[i] = now[i] + now[i - 1]\n    ans = []\n    for i in newa:\n        now[i - 1] = 0\n    c = max(now)\n    for i in range(n):\n        if now[i] == c:\n            ans.append(i + 1)\n    ans.sort()\n    print(len(ans))\n    for i in ans:\n        print(i)", "from itertools import groupby\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    events = []\n    a = []\n    for i in range(N):\n        (L, R) = list(map(int, input().split()))\n        a.append((L, R))\n        events.append((L, 1))\n        events.append((R + 1, -1))\n    for i in range(1, N + 1):\n        events.append((i, 0))\n    events.sort()\n    cnt = 0\n    answer = []\n    for (i, group) in groupby(events, key=lambda x: x[0]):\n        for x in group:\n            cnt += x[1]\n        if i != N + 1:\n            answer.append(cnt)\n    K = 0\n    possible = []\n    for i in range(N):\n        if answer[i] == N - 1 and (i + 1 < a[i][0] or i + 1 > a[i][1]):\n            possible.append(i + 1)\n            K += 1\n    print(K)\n    for p in possible:\n        print(p)", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    b = []\n    c = []\n    for j in range(n + 1):\n        a.append(0)\n    for i in range(n):\n        (j, k) = map(int, input().split())\n        j -= 1\n        k -= 1\n        a[j] += 1\n        a[k + 1] -= 1\n        if i < j or i > k:\n            b.append(1)\n        else:\n            b.append(0)\n    for i in range(n):\n        a[i + 1] = a[i] + a[i + 1]\n        if a[i] == n - 1 and b[i] == 1:\n            c.append(i + 1)\n    print(len(c))\n    for i in c:\n        print(i)", "for h in range(int(input())):\n    n = int(input())\n    x = [0] * (n + 1)\n    z = []\n    v = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        (a, b) = (a - 1, b - 1)\n        z.append([a, b])\n        x[a] += 1\n        x[b + 1] -= 1\n    x[-1] = 0\n    for i in range(n):\n        x[i] += x[i - 1]\n        if x[i] == n - 1 and (i < z[i][0] or i > z[i][1]):\n            v.append(i + 1)\n    print(len(v))\n    for i in v:\n        print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l1 = []\n    ans = []\n    for i in range(n):\n        (j, k) = map(int, input().split())\n        l1.append([j, k])\n    for i in range(0, n):\n        (l, r) = (l1[i][0], l1[i][1])\n        if i + 1 >= l and i + 1 <= r:\n            continue\n        temp = l1.copy()\n        temp.pop(i)\n        for y in temp:\n            (l, r) = (y[0], y[1])\n            if i + 1 < l or i + 1 > r:\n                break\n        else:\n            ans.append(i + 1)\n    print(len(ans))\n    for i in ans:\n        print(i)", "def main():\n    n = int(input())\n    prefix = [0] * (n + 10)\n    notThief = set()\n    for i in range(1, n + 1):\n        (l, r) = map(int, input().split())\n        if i >= l and i <= r:\n            notThief.add(i)\n        prefix[l] += 1\n        prefix[r + 1] -= 1\n    arr = []\n    curr = 0\n    for i in range(1, n + 1):\n        curr += prefix[i]\n        arr.append(curr)\n    ans = []\n    for i in range(n):\n        if i + 1 in notThief:\n            continue\n        if arr[i] == n - 1:\n            ans.append(i + 1)\n    print(len(ans))\n    for z in ans:\n        print(z)\n    return\nfor _ in range(int(input())):\n    main()", "import sys\ninput = lambda : sys.stdin.readline()\nT = int(input())\nfor _ in range(T):\n    n = int(input().strip())\n    L = [0 for i in range(n + 2)]\n    dic = {}\n    for i in range(n):\n        (l, r) = map(int, input().strip().split())\n        dic[i] = [l, r]\n        L[l] += 1\n        L[r + 1] -= 1\n    count = 0\n    ans = 0\n    M = []\n    for i in range(1, n + 1):\n        count += L[i]\n        if count == n - 1 and (dic[i - 1][1] < i or dic[i - 1][0] > i):\n            ans += 1\n            M.append(i)\n    print(ans)\n    for i in M:\n        print(i)", "import sys\nfrom math import sqrt, gcd, factorial, ceil, floor, pi\nfrom collections import deque, Counter, OrderedDict\nfrom heapq import heapify, heappush, heappop\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    (al, ar) = (1, n)\n    arr = [0] * (n + 2)\n    d = {}\n    for i in range(n):\n        (l, r) = M()\n        d[i] = [l, r]\n        arr[l] += 1\n        arr[r + 1] -= 1\n    c = 0\n    (ans, farr) = (0, [])\n    for i in range(1, n + 1):\n        c += arr[i]\n        if c == n - 1 and (d[i - 1][1] < i or d[i - 1][0] > i):\n            ans += 1\n            farr.append(i)\n    print(ans)\n    for i in farr:\n        print(i)"]