["from collections import Counter\nimport sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m, p) = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    d = Counter(b)\n    c = 0\n    for x in a:\n        h = x ^ pow(x, p - 2, p)\n        if x ^ h < p and x % p:\n            c += d.get(h, 0)\n    sys.stdout.write(str(c) + '\\n')", "from collections import Counter\nimport sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m, p) = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    d = Counter(b)\n    c = 0\n    for x in a:\n        h = x ^ pow(x, p - 2, p)\n        if x ^ h < p and x % p:\n            c += d.get(h, 0)\n    sys.stdout.write(str(c) + '\\n')", "from collections import Counter\nimport sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m, p) = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    d = Counter(b)\n    c = 0\n    for x in a:\n        h = x ^ pow(x, p - 2, p)\n        if x ^ h < p and x % p:\n            c += d.get(h, 0)\n    sys.stdout.write(str(c) + '\\n')", "from collections import Counter\nimport sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, m, p) = map(int, sys.stdin.readline().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    d = Counter(b)\n    c = 0\n    for x in a:\n        h = x ^ pow(x, p - 2, p)\n        if x ^ h < p and x % p:\n            c += d.get(h, 0)\n    sys.stdout.write(str(c) + '\\n')", "for _ in range(int(input())):\n    (n, m, p) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    xb = [[b[i], i] for i in range(m)]\n    xb = sorted(xb)\n    b = [xb[0][0], 1]\n    for i in range(1, m):\n        if xb[i][0] == xb[i - 1][0]:\n            b[-1] += 1\n        else:\n            b += [xb[i][0], 1]\n    b = {b[i]: b[i + 1] for i in range(0, len(b), 2)}\n    ans = 0\n    for i in range(n):\n        if a[i] % p > 0:\n            inv = pow(a[i], p - 2, p)\n            temp = a[i] ^ inv\n            ans += b.setdefault(temp, 0)\n    print(ans)", "import sys\ntokens = ''.join(sys.stdin.readlines()).split()[::-1]\n\ndef next():\n    return tokens.pop()\n\ndef nextInt():\n    return int(next())\n\ndef nextFloat():\n    return float(next())\n\ndef getIntArray(n):\n    return [nextInt() for _ in range(n)]\n\ndef getFloatArray(n):\n    return [nextFloat() for _ in range(n)]\n\ndef getStringArray(n):\n    return [next() for _ in range(n)]\ntestcase = True\n\ndef solve(testcase=1):\n    (N, M, P) = map(int, getIntArray(3))\n    A = getIntArray(N)\n    B = getIntArray(M)\n    from collections import Counter\n    counter = Counter(B)\n    ans = 0\n    for itr in A:\n        b = pow(itr, P - 2, P) ^ itr\n        if itr ^ b < P and itr % P:\n            ans += counter.get(b, 0)\n    print(ans)\n    pass\nif testcase is None:\n    testcaseCount = 1\n    while tokens:\n        solve(testcaseCount)\n        testcaseCount += 1\nelse:\n    testcaseCount = nextInt() if testcase else 1\n    for tc in range(testcaseCount):\n        solve(tc + 1)\n    assert not tokens", "for tc in range(int(input())):\n    ls = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    p = ls[-1]\n    ct = 0\n    dis = dict()\n    for x in b:\n        dis[x] = 1 if dis.get(x) is None else dis[x] + 1\n    for x in a:\n        if x % p:\n            minv = pow(x, p - 2, p)\n            if dis.get(minv ^ x) is not None:\n                ct += dis[minv ^ x]\n    print(ct)", "for tc in range(int(input())):\n    ls = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    p = ls[-1]\n    ct = 0\n    dis = dict()\n    for x in b:\n        if dis.get(x) is None:\n            dis[x] = 1\n        else:\n            dis[x] += 1\n    for x in a:\n        if x % p != 0:\n            minv = pow(x, p - 2, p)\n            if dis.get(minv ^ x) is not None:\n                ct += dis[minv ^ x]\n    print(ct)", "from math import gcd\nfrom collections import Counter\nfor i in range(int(input())):\n    (n, m, p) = map(int, input().split())\n    la = list(map(int, input().split()))\n    lb = list(map(int, input().split()))\n    l = []\n    res = dict(Counter(lb))\n    ans = 0\n    for j in la:\n        if gcd(j, p) != 1:\n            continue\n        y = pow(j, p - 2, p)\n        x = y ^ j\n        l.append(x)\n    for j in l:\n        ans += res.get(j, 0)\n    print(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    d = dict()\n    for i in range(m):\n        d[b[i]] = d.get(b[i], 0) + 1\n    ans = 0\n    for i in range(n):\n        if a[i] % p == 0:\n            continue\n        x = pow(a[i], p - 2, p)\n        ans += d.get(a[i] ^ x, 0)\n    return ans\nfor T in range(int(input())):\n    (n, m, p) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(answer())", "def func():\n    (n, m, p) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    dicti = {}\n    for i in B:\n        dicti[i] = dicti.get(i, 0) + 1\n    ans = 0\n    for ai in A:\n        if ai % p != 0:\n            modinv = pow(ai, p - 2, p)\n            b = ai ^ modinv\n            ans += dicti.get(b, 0)\n    return ans\nfor _ in range(int(input())):\n    print(func())"]