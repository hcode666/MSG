["def unique_prime_factors(n):\n    count = 0\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n /= i\n        i += 1\n    if n != 1:\n        count += 1\n    return count\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    prm_fac = unique_prime_factors(m)\n    ans = 0\n    i = prm_fac\n    while i > 0:\n        if n % i == 0:\n            ans = i\n            break\n        i -= 1\n    print(ans)\n    t -= 1", "def unique_prime_factors(n):\n    count = 0\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n /= i\n        i += 1\n    if n != 1:\n        count += 1\n    return count\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    prm_fac = unique_prime_factors(m)\n    ans = 0\n    i = prm_fac\n    while i > 0:\n        if n % i == 0:\n            ans = i\n            break\n        i -= 1\n    print(ans)\n    t -= 1", "def unique_prime_factors(n):\n    count = 0\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n /= i\n        i += 1\n    if n != 1:\n        count += 1\n    return count\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    prm_fac = unique_prime_factors(m)\n    ans = 0\n    i = prm_fac\n    while i > 0:\n        if n % i == 0:\n            ans = i\n            break\n        i -= 1\n    print(ans)\n    t -= 1", "def unique_prime_factors(n):\n    count = 0\n    i = 2\n    while i ** 2 <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n /= i\n        i += 1\n    if n != 1:\n        count += 1\n    return count\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    prm_fac = unique_prime_factors(m)\n    ans = 0\n    i = prm_fac\n    while i > 0:\n        if n % i == 0:\n            ans = i\n            break\n        i -= 1\n    print(ans)\n    t -= 1", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(2, int(m ** 0.5) + 1):\n        if m % i == 0:\n            c += 1\n            while m % i == 0:\n                m = m // i\n    if m != 1:\n        c += 1\n    if c == 0:\n        print(c)\n    elif n % c == 0:\n        print(c)\n    else:\n        while n % c != 0:\n            c -= 1\n        print(c)\n    t -= 1", "t = int(input())\nfor k in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(2, int(m ** 0.5) + 1):\n        if m % i == 0:\n            c += 1\n            while m % i == 0:\n                m = m // i\n    if m != 1:\n        c += 1\n    if c == 0:\n        print(c)\n    elif n % c == 0:\n        print(c)\n    else:\n        while n % c != 0:\n            c -= 1\n        print(c)", "t = int(input())\nfor k in range(t):\n    (n, m) = map(int, input().split())\n    c = 0\n    for i in range(2, int(m ** 0.5) + 1):\n        if m % i == 0:\n            c += 1\n            while m % i == 0:\n                m = m // i\n    if m != 1:\n        c += 1\n    if c == 0:\n        print(c)\n    elif n % c == 0:\n        print(c)\n    else:\n        while n % c != 0:\n            c -= 1\n        print(c)", "def makePr(p_limit):\n    track = [False, True] * (p_limit // 2 + 1)\n    if p_limit % 2 == 0:\n        track.pop()\n    track[0:3] = [False, False, True]\n    pc = 3\n    while pc * pc <= p_limit:\n        if track[pc]:\n            for a in range(pc * pc, p_limit + 1, 2 * pc):\n                track[a] = False\n        pc += 2\n    return [n for (n, p) in enumerate(track) if p]\n\ndef get_cols(N, M, prs):\n    if M == 1:\n        return 0\n    Nlowfac = [1]\n    for f in range(2, 10):\n        if N % f == 0:\n            Nlowfac.append(f)\n    if len(Nlowfac) == 1:\n        return 1\n    Mlim = int((M + 1) ** 0.5)\n    Mred = M\n    dpf = 0\n    for p in prs:\n        if Mred % p == 0:\n            dpf += 1\n            if dpf == Nlowfac[-1]:\n                return dpf\n            while Mred % p == 0:\n                Mred //= p\n            Mlim = int((Mred + 1) ** 0.5)\n        if p > Mlim:\n            break\n    if Mred > 1:\n        dpf += 1\n    while dpf < Nlowfac[-1]:\n        Nlowfac.pop()\n    return Nlowfac[-1]\nprs = makePr(32000)\nT = int(input())\nfor tx in range(T):\n    (N, M) = map(int, input().split())\n    print(get_cols(N, M, prs))", "import math\n\ndef snek(n):\n    z = []\n    while n % 2 == 0:\n        z.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            z.append(i)\n            n = n / i\n    if n > 2:\n        z.append(n)\n    return z\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = len(set(snek(m)))\n    c = 0\n    while l > 0:\n        if n % l == 0:\n            c = 1\n            break\n        else:\n            l -= 1\n    if c == 1:\n        print(l)\n    else:\n        print(0)", "import math\n\ndef primeFactors(n):\n    pf = []\n    while n % 2 == 0:\n        pf.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            pf.append(i)\n            n = n / i\n    if n > 2:\n        pf.append(n)\n    return pf\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = len(set(primeFactors(m)))\n    x = 0\n    while l > 0:\n        if n % l == 0:\n            x = 1\n            break\n        else:\n            l -= 1\n    if x == 1:\n        print(l)\n    else:\n        print(0)", "import math\n\ndef cntfactors(n):\n    cnt = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            cnt += 1\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n != 1:\n        cnt += 1\n    return cnt\n\ndef main():\n    t = int(input())\n    while t > 0:\n        (n, m) = (int(x) for x in input().split())\n        factors = cntfactors(m)\n        while factors > 1:\n            if n % factors == 0:\n                break\n            factors -= 1\n        print(factors)\n        t -= 1\nmain()", "import math\n\ndef getUniquePrimeFactorsCount(m):\n    count = 0\n    for i in range(2, int(math.sqrt(m)) + 1):\n        if m % i == 0:\n            count += 1\n            while m % i == 0:\n                m = m // i\n    if m != 1:\n        count += 1\n    return count\nt = input()\nt = int(t)\nwhile t:\n    (n, m) = map(int, input().split())\n    count = getUniquePrimeFactorsCount(m)\n    ans = 0\n    for i in range(count, 0, -1):\n        if n % i == 0:\n            ans = i\n            break\n    print(ans)\n    t -= 1", "def GetUniquePrimeCount(n):\n    count = 0\n    sqrt = int(n ** 0.5) + 1\n    for i in range(2, sqrt):\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n //= i\n    if n > 1:\n        count += 1\n    return count\n\ndef solve():\n    (n, m) = map(int, input().split())\n    primes = GetUniquePrimeCount(m)\n    ans = int()\n    for i in range(primes, 0, -1):\n        if n % i == 0:\n            ans = i\n            break\n    print(ans)\ntest_case = int(input())\nwhile test_case:\n    solve()\n    test_case -= 1", "from collections import Counter\nfrom math import ceil, floor, log, gcd, sqrt\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\n\ndef primeFactors(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return len(set(l))\nfor _ in range(int(input().strip())):\n    (n, m) = inp_multi()\n    temp = primeFactors(m)\n    ans = 0\n    while temp > 0:\n        if n % temp == 0:\n            ans = temp\n            break\n        temp -= 1\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    k = 0\n    i = 2\n    while i * i < m:\n        if m % i == 0:\n            while m % i == 0:\n                m = m / i\n            k += 1\n        i += 1\n    if m > 1:\n        k += 1\n    if k == 0:\n        print(k)\n    else:\n        for i in range(k, 0, -1):\n            if n % i == 0:\n                print(i)\n                break", "try:\n    import math\n\n    def get_prime_factors(n):\n        i = 2\n        prime_factors = []\n        while i * i <= n:\n            if n % i == 0:\n                prime_factors.append(i)\n                n //= i\n            else:\n                i += 1\n        if n > 1:\n            prime_factors.append(n)\n        return prime_factors\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        z = len(set(get_prime_factors(m)))\n        if z == 0:\n            print(0)\n        else:\n            while n % z != 0:\n                z -= 1\n            print(z)\nexcept:\n    pass", "T = int(input())\nfor t in range(T):\n    (n, m) = map(int, input().split())\n    if m == 1:\n        print(0)\n    else:\n        b = 0\n        i = 2\n        while i * i <= m:\n            c = 0\n            while m % i == 0:\n                m = m // i\n                c = c + 1\n            if c:\n                b = b + 1\n            i = i + 1\n        if m != 1:\n            b += 1\n        for i in range(b, 0, -1):\n            if n % i == 0:\n                print(i)\n                break", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    if m == 1:\n        print(0)\n    else:\n        b = 0\n        i = 2\n        while i * i <= m:\n            c = 0\n            while m % i == 0:\n                m = m // i\n                c = c + 1\n            if c:\n                b = b + 1\n            i = i + 1\n        if m != 1:\n            b += 1\n        for i in range(b, 0, -1):\n            if n % i == 0:\n                print(i)\n                break", "t = int(input())\nfor _t in range(t):\n    arr = list(map(int, input().split(' ')))\n    (n, m) = (arr[0], arr[1])\n    if m == 1:\n        print(0)\n        continue\n    (n_factors, m_prime_factors) = ([], [])\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            n_factors.append(i)\n            n_factors.append(n // i)\n    for i in range(2, int(m ** 0.5) + 1):\n        if m % i == 0:\n            m_prime_factors.append(i)\n            while m % i == 0:\n                m = m // i\n    if m >= 2:\n        m_prime_factors.append(m)\n    answer = 0\n    for factor in n_factors:\n        if len(m_prime_factors) >= factor:\n            answer = max(answer, factor)\n    print(answer)", "def countPrimeFactors(no):\n    factors = set()\n    if no == 0 or no == 1:\n        return 0\n    elif no == 2:\n        return 1\n    while no % 2 == 0:\n        factors.add(2)\n        no = no // 2\n    for i in range(3, int(no ** 0.5) + 1, 2):\n        if no % i == 0:\n            factors.add(i)\n            while no % i == 0:\n                no = no // i\n    if no > 2:\n        factors.add(no)\n    return len(factors)\n\ndef maxColumns(col, total_prime):\n    ans = 1\n    if total_prime == 0:\n        return 0\n    if col == 1:\n        return 1\n    while total_prime:\n        if col % total_prime == 0:\n            ans = total_prime\n            return ans\n        total_prime -= 1\n\ndef main():\n    for _ in range(int(input())):\n        (col, row) = map(int, input().split())\n        total_prime = countPrimeFactors(row)\n        ans = maxColumns(col, total_prime)\n        print(ans)\nmain()", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    primes = 0\n    (i, primes) = (2, 0)\n    while i * i <= m:\n        if m % i == 0:\n            primes += 1\n            while m % i == 0:\n                m /= i\n        i += 1\n    if m != 1:\n        primes += 1\n    ans = 0\n    for i in range(primes, 0, -1):\n        if n % i == 0:\n            ans = i\n            break\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if n == 1:\n        print(1)\n    else:\n        primes = 0\n        (i, primes) = (2, 0)\n        while i * i <= m:\n            if m % i == 0:\n                primes += 1\n                while m % i == 0:\n                    m = m // i\n            i += 1\n        if m != 1:\n            primes += 1\n        ans = 0\n        for i in range(primes, 0, -1):\n            if n % i == 0:\n                ans = i\n                break\n        print(ans)", "def pf(m):\n    (i, c) = (2, 0)\n    while i * i <= m:\n        if m % i == 0:\n            c += 1\n            while m % i == 0:\n                m = m // i\n        i += 1\n    return c + 1 if m > 1 else c\n\ndef find_factor(n, c):\n    i = 1\n    l1 = []\n    while i * i <= n:\n        if n % i == 0:\n            l1.append(i)\n            l1.append(n // i)\n        i += 1\n    maxi = 0\n    for i in range(len(l1)):\n        if l1[i] <= c:\n            maxi = max(l1[i], maxi)\n    return maxi\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    c = pf(m)\n    if n == 1:\n        print(1)\n    else:\n        print(find_factor(n, c))", "import math\nfor _ in range(int(input())):\n    count = 0\n    (x, y) = map(int, input().split())\n    if y == 1:\n        print(0)\n        continue\n    n = y\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n / i\n    if n != 1:\n        count += 1\n    if count == 0:\n        print(1)\n        continue\n    while x % count != 0:\n        count -= 1\n    print(count)", "t = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    prime_count = 0\n    i = 2\n    while i * i <= m:\n        if m % i == 0:\n            prime_count += 1\n            while m % i == 0:\n                m /= i\n        i += 1\n    if m > 1:\n        prime_count += 1\n    ans = 0\n    j = 1\n    while j <= prime_count:\n        if n % j == 0:\n            ans = j\n        j += 1\n    print(ans)\n    t = t - 1", "import math\nt = int(input())\n\ndef prime(x):\n    n = x\n    if x == 1:\n        return 0\n    cnt = 0\n    i = 2\n    while i ** 2 <= n:\n        if x % i == 0:\n            while x % i == 0:\n                x = x // i\n            cnt += 1\n        i += 1\n    if x != 1:\n        cnt += 1\n    return cnt\nfor i in range(t):\n    (a, b) = list(map(int, input().split()))\n    ans = 0\n    pfs = prime(b)\n    for j in range(pfs, 0, -1):\n        if a % j == 0:\n            ans = j\n            break\n    print(ans)", "import math\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    temp = m\n    i = 2\n    while i * i <= m:\n        if not temp % i:\n            ans += 1\n            while not temp % i:\n                temp //= i\n        i += 1\n    if temp > 1:\n        ans += 1\n    i = 1\n    arr = []\n    while i * i <= n:\n        if not n % i:\n            arr.append(i)\n            if i != n // i:\n                arr.append(n // i)\n        i += 1\n    a = 0\n    for j in arr:\n        if j <= ans:\n            a = j\n    print(a)", "import math\n\ndef primefactorobtain(N):\n    primefactors = []\n    while N % 2 == 0:\n        primefactors.append(2)\n        N = N // 2\n    l = math.sqrt(N)\n    l = int(l)\n    for i in range(3, l + 1, 2):\n        while N % i == 0:\n            primefactors.append(i)\n            N = N // i\n    if N > 2:\n        primefactors.append(N)\n    length = list(set(primefactors))\n    return len(length)\nT = int(input())\nwhile T > 0:\n    (n, m) = map(int, input().split())\n    answer = 0\n    if m == 1:\n        p = 0\n    else:\n        p = primefactorobtain(m)\n        for i in range(p, 0, -1):\n            if n % i == 0:\n                answer = i\n                break\n    print(answer)\n    T = T - 1", "import math\nfor i in range(int(input())):\n    (N, M) = map(int, input().split())\n    primeNumbers = []\n    while M % 2 == 0:\n        if 2 not in primeNumbers:\n            primeNumbers.append(2)\n        M = M / 2\n    for i in range(3, int(math.sqrt(M)) + 1, 2):\n        while M % i == 0:\n            if i not in primeNumbers:\n                primeNumbers.append(i)\n            M = M / i\n    if M > 2:\n        if M not in primeNumbers:\n            primeNumbers.append(M)\n    numberOfPrimeNumbers = len(primeNumbers)\n    if numberOfPrimeNumbers == 0:\n        print(0)\n    else:\n        for i in range(min(N, numberOfPrimeNumbers), 0, -1):\n            if N % i == 0:\n                if i <= numberOfPrimeNumbers:\n                    print(i)\n                    break", "import math\nfor i in range(int(input())):\n    (N, M) = map(int, input().split())\n    primeNumbers = []\n    while M % 2 == 0:\n        if 2 not in primeNumbers:\n            primeNumbers.append(2)\n        M = M / 2\n    for i in range(3, int(math.sqrt(M)) + 1, 2):\n        while M % i == 0:\n            if i not in primeNumbers:\n                primeNumbers.append(i)\n            M = M / i\n    if M > 2:\n        if M not in primeNumbers:\n            primeNumbers.append(M)\n    numberOfPrimeNumbers = len(primeNumbers)\n    if numberOfPrimeNumbers == 0:\n        print(0)\n    else:\n        for i in range(min(N, numberOfPrimeNumbers), 0, -1):\n            if N % i == 0:\n                if i <= numberOfPrimeNumbers:\n                    print(i)\n                    break", "import math\n\ndef func(n, m):\n    x = m\n    p = 0\n    if m == 1:\n        return 0\n    for i in range(2, int(math.sqrt(x)) + 1):\n        if m % i == 0:\n            p += 1\n            while m % i == 0:\n                m = m // i\n    if m > 1:\n        p += 1\n    for i in range(p, 0, -1):\n        if n % i == 0:\n            return i\nfor i in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    print(func(n, m))", "import math\nprimes = [2, 3]\nfor i in range(5, int(math.sqrt(10 ** 9)), 2):\n    for j in primes[1:]:\n        if i % j == 0:\n            break\n        if j > math.sqrt(i):\n            primes.append(i)\n            break\nt = int(input())\nfor _ in range(t):\n    (c, r) = list(map(int, input().split()))\n    if r == 1:\n        print(0)\n        continue\n    pc = 0\n    for p in primes:\n        if r % p == 0:\n            pc += 1\n            while r % p == 0:\n                r = r // p\n        if r == 1:\n            break\n    if pc == 0:\n        print(1)\n        continue\n    if r > 1:\n        pc += 1\n    for i in range(pc, 0, -1):\n        if c % i == 0:\n            ans = i\n            break\n    print(ans)", "t = int(input())\nanss = []\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n\n    def primeFactors(n):\n        import math\n        factors = []\n        while n % 2 == 0:\n            factors.append(2)\n            n = n / 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                factors.append(i)\n                n = n / i\n        if n > 2:\n            factors.append(n)\n        return factors\n\n    def uniq(s):\n        uniq = []\n        for c in s:\n            if c not in uniq:\n                uniq.append(c)\n        return uniq\n    uniqprimefactors = uniq(primeFactors(m))\n    if len(uniqprimefactors) == 0:\n        anss.append(0)\n    for i in range(len(uniqprimefactors), 0, -1):\n        if n % i == 0:\n            anss.append(i)\n            break\nfor ans in anss:\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m < 2:\n        print(0)\n    else:\n        k = 0\n        if m % 2 == 0:\n            k += 1\n            while m % 2 == 0:\n                m = m // 2\n        tmp = 3\n        m_new = m\n        while tmp <= m ** 0.5:\n            if m_new % tmp == 0:\n                k += 1\n                while m_new % tmp == 0:\n                    m_new //= tmp\n            tmp += 2\n        if m_new > 1:\n            k += 1\n        while n % k > 0:\n            k -= 1\n        print(k)", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m == 1:\n        print(0)\n        continue\n    if n == 1:\n        print(1)\n        continue\n    cnt = 0\n    for i in range(2, int(math.sqrt(m)) + 1):\n        if m % i == 0:\n            cnt += 1\n            while m % i == 0:\n                m //= i\n    if m > 1:\n        cnt += 1\n    div = 0\n    for i in range(1, cnt + 1):\n        if n % i == 0:\n            div = i\n    print(div)", "import math\n\ndef prime(n):\n    lst = []\n    while n % 2 == 0:\n        (lst.append(2),)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            (lst.append(i),)\n            n = n / i\n    if n > 2:\n        lst.append(n)\n    return list(set(lst))\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m == 1:\n        print(0)\n        continue\n    else:\n        a = len(prime(m))\n        if a > n:\n            print(n)\n        elif n % a == 0:\n            print(a)\n        else:\n            while True:\n                if n % a == 0:\n                    print(a)\n                    break\n                else:\n                    a -= 1", "import sys\ninput = sys.stdin.readline\nflush = sys.stdout.flush\nget_int = lambda : int(input().rstrip())\nget_int_arr = lambda : [int(w) for w in input().split()]\nget_str_arr = lambda : input().split()\nget_str = lambda : input().rstrip()\n\ndef getCountOfPrimeFactors(num):\n    count = 0\n    probableRange = int(num ** 0.5) + 1\n    for i in range(2, probableRange):\n        if num % i == 0:\n            count += 1\n        while num % i == 0:\n            num //= i\n    if num > 1:\n        count += 1\n    return count\n\ndef solve():\n    (base, height) = get_int_arr()\n    if height == 1:\n        print(0)\n        return\n    countOfPrimeFactorsOfHeight = getCountOfPrimeFactors(height)\n    if countOfPrimeFactorsOfHeight == 0:\n        print(1)\n    else:\n        for i in range(countOfPrimeFactorsOfHeight, 0, -1):\n            if base % i == 0:\n                print(i)\n                break\nfor _ in range(get_int()):\n    solve()", "def count_primes(n):\n    ans = 0\n    if n % 2 == 0:\n        ans += 1\n    while n % 2 == 0:\n        n //= 2\n    for i in range(3, int(pow(n, 0.5)) + 1):\n        if n % i == 0:\n            ans += 1\n        while n % i == 0:\n            n //= i\n    if n > 2:\n        ans += 1\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    n1 = count_primes(m)\n    ans = 0\n    for i in range(n1, 0, -1):\n        if n % i == 0:\n            ans = i\n            break\n    print(ans)", "from sys import stdin, stdout\n\ndef is_prime(n):\n    var = 1\n    if n == 1:\n        var = 0\n    else:\n        for i in range(2, int(pow(n, 0.5)) + 1):\n            if n % i == 0:\n                var = 0\n                break\n    return var\n\ndef divisor(res):\n    set_divisor = set()\n    for j in range(1, int(pow(res, 0.5)) + 1):\n        if res % j == 0 and is_prime(j):\n            set_divisor.add(j)\n        if res % j == 0 and is_prime(res // j):\n            set_divisor.add(res // j)\n    return len(set_divisor)\nt = int(stdin.readline().rstrip())\nwhile t > 0:\n    (m, n) = map(int, stdin.readline().rstrip().split())\n    k = divisor(n)\n    if k == 0:\n        count = 0\n    else:\n        count = 0\n        for i in range(1, k + 1):\n            if m % i == 0:\n                if count <= i:\n                    count = i\n    print(count)\n    t -= 1", "from sys import stdin\ninput = stdin.readline\nfrom math import sqrt\n\ndef primeFac(n):\n    if n == 1:\n        return 1\n    ret = 0\n    if n % 2 == 0:\n        ret = ret + 1\n        while n % 2 == 0:\n            n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            ret = ret + 1\n            while n % i == 0:\n                n = n / i\n    if n > 2:\n        ret = ret + 1\n    return ret\n\ndef factors(n, k):\n    for i in range(k, 0, -1):\n        if n % i == 0:\n            return i\n    return 0\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    if m == 1:\n        print(0)\n        continue\n    k = primeFac(m)\n    print(factors(n, k))", "def primefactors(n):\n    net = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            net += 1\n            while n % i == 0:\n                n = n // i\n        i += 1\n    if n != 1:\n        net += 1\n    return net\nt = int(input())\nwhile t != 0:\n    (n, m) = map(int, input().split())\n    x = primefactors(m)\n    while x > 0 and n % x != 0:\n        x -= 1\n    print(x)\n    t -= 1", "import math\n\ndef prime_factors(num):\n    s = set()\n    while num % 2 == 0:\n        s.add(2)\n        num = num / 2\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            s.add(i)\n            num = num / i\n    if num > 2:\n        s.add(num)\n    return s\nfor i in range(int(input())):\n    (N, M) = map(int, input().split())\n    if N > 1 and M == 1:\n        print('0')\n    elif N == 1:\n        print('1')\n    else:\n        s = prime_factors(M)\n        n = len(s)\n        while n > 0 and N % n != 0:\n            n -= 1\n        print(n)", "import math\n\ndef prime_factors(num):\n    s = set()\n    while num % 2 == 0:\n        s.add(2)\n        num = num / 2\n    for i in range(3, int(math.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            s.add(i)\n            num = num / i\n    if num > 2:\n        s.add(num)\n    return s\nfor i in range(int(input())):\n    (N, M) = map(int, input().split())\n    if N == 0 or M == 0:\n        print(0)\n    if N > 1 and M == 1:\n        print('0')\n    elif N == 1:\n        print('1')\n    else:\n        s = prime_factors(M)\n        n = len(s)\n        while n > 0 and N % n != 0:\n            n -= 1\n        print(n)", "import math\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    p = 0\n    if M == 1:\n        print(0)\n        continue\n    if M % 2 == 0:\n        p += 1\n        M = M // 2\n    while M % 2 == 0:\n        M = M // 2\n    for i in range(3, int(math.sqrt(M)) + 1, 2):\n        if M % i == 0:\n            p += 1\n        while M % i == 0:\n            M = M // i\n    if M > 2:\n        p += 1\n    for i in range(p, 0, -1):\n        if N % i == 0:\n            print(i)\n            break", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    p = 0\n    q = b\n    i = 2\n    while i * i <= b:\n        if not q % i:\n            p = p + 1\n            while not q % i:\n                q = q // i\n        i = i + 1\n    if q > 1:\n        p += 1\n    l = []\n    i = 1\n    while i * i <= a:\n        if not a % i:\n            l.append(i)\n            if i != a // i:\n                l.append(a // i)\n        i = i + 1\n    c = 0\n    for i in l:\n        if i <= p:\n            c = i\n    print(c)", "from collections import Counter\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef memodict(f):\n\n    class memodict(dict):\n\n        def __missing__(self, key):\n            ret = self[key] = f(key)\n            return ret\n    return memodict().__getitem__\n\ndef pollard_rho(n):\n    if n & 1 == 0:\n        return 2\n    if n % 3 == 0:\n        return 3\n    s = (n - 1 & 1 - n).bit_length() - 1\n    d = n >> s\n    for a in [2, 325, 9375, 28178, 450775, 9780504, 1795265022]:\n        p = pow(a, d, n)\n        if p == 1 or p == n - 1 or a % n == 0:\n            continue\n        for _ in range(s):\n            prev = p\n            p = p * p % n\n            if p == 1:\n                return gcd(prev - 1, n)\n            if p == n - 1:\n                break\n        else:\n            for i in range(2, n):\n                (x, y) = (i, (i * i + 1) % n)\n                f = gcd(abs(x - y), n)\n                while f == 1:\n                    (x, y) = ((x * x + 1) % n, (y * y + 1) % n)\n                    y = (y * y + 1) % n\n                    f = gcd(abs(x - y), n)\n                if f != n:\n                    return f\n    return n\n\n@memodict\ndef prime_factors(n):\n    if n <= 1:\n        return Counter()\n    f = pollard_rho(n)\n    return Counter([n]) if f == n else prime_factors(f) + prime_factors(n // f)\n\ndef distinct_factors(n):\n    factors = [1]\n    for (p, exp) in prime_factors(n).items():\n        factors += [p ** i * factor for factor in factors for i in range(1, exp + 1)]\n    return factors\n\ndef all_factors(n):\n    (small, large) = ([], [])\n    for i in range(1, int(n ** 0.5) + 1, 2 if n & 1 else 1):\n        if not n % i:\n            small.append(i)\n            large.append(n // i)\n    if small[-1] == large[-1]:\n        large.pop()\n    large.reverse()\n    small.extend(large)\n    return small\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    count = len(prime_factors(M))\n    while count != 0 and N % count != 0:\n        count -= 1\n    print(count)", "import math\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    if M == 1:\n        print(0)\n        continue\n    pf = set()\n    while M % 2 == 0:\n        pf.add(2)\n        M = M // 2\n    for i in range(3, int(math.sqrt(M)) + 1, 2):\n        while M % i == 0:\n            pf.add(i)\n            M = M // i\n    if M > 2:\n        pf.add(M)\n    p = len(pf)\n    for i in range(p, 0, -1):\n        if N % i == 0:\n            print(i)\n            break", "def countPrimeFactors(x):\n    count = 0\n    i = 2\n    while i * i <= x:\n        if x % i == 0:\n            count += 1\n            while x % i == 0:\n                x = x // i\n        i += 1\n    if x != 1:\n        count += 1\n    return count\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    count = countPrimeFactors(m)\n    if count == 0:\n        print(0)\n    else:\n        while True:\n            if n % count == 0:\n                print(count)\n                break\n            count -= 1", "def numberprimefactors(number):\n    i = 0\n    count = 0\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            count += 1\n            while number % i == 0:\n                number /= i\n    if number != 1:\n        count += 1\n    return count\nnuma = int(input())\nfor x in range(0, numa):\n    a1 = input().split()\n    a1 = [int(i) for i in a1]\n    primecount = numberprimefactors(a1[1])\n    while primecount > 0:\n        if a1[0] % primecount == 0:\n            print(primecount)\n            break\n        primecount -= 1\n    if primecount == 0:\n        print('0')", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    p = 0\n    q = b\n    i = 2\n    while i * i <= b:\n        if not q % i:\n            p = p + 1\n            while not q % i:\n                q = q // i\n        i = i + 1\n    if q > 1:\n        p += 1\n    l = []\n    i = 1\n    while i * i <= a:\n        if not a % i:\n            l.append(i)\n            if i != a // i:\n                l.append(a // i)\n        i = i + 1\n    c = 0\n    for i in l:\n        if i <= p:\n            c = i\n    print(c)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = 0\n    om = m\n    if om % 2 == 0:\n        a += 1\n        while om % 2 == 0:\n            om //= 2\n    i = 3\n    for i in range(3, int(om ** 0.5) + 1, 2):\n        if om % i == 0:\n            a += 1\n        while om % i == 0:\n            om //= i\n    if om > 1:\n        a += 1\n    ans = 0\n    for i in range(a, 0, -1):\n        if n % i == 0:\n            ans = i\n            break\n    print(ans)", "import math\n\ndef primeFactors(n):\n    b = []\n    while n % 2 == 0:\n        b.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            b.append(i)\n            n = n / i\n    if n > 2:\n        b.append(n)\n    return len(set(b))\nfor i in range(int(input())):\n    a = input().split()\n    (x, y) = map(int, a)\n    if y == 1:\n        print(0)\n    elif x == 1:\n        print(1)\n    else:\n        n = primeFactors(y)\n        if x % n == 0:\n            print(n)\n        else:\n            while n > 0:\n                if x % n == 0:\n                    print(n)\n                    break\n                n -= 1", "import sys\nfrom sys import stdin, stdout\nfrom math import ceil, floor, sqrt, log, log2, log10\nfrom collections import Counter\nint_max = float('inf')\nint_min = -float('inf')\nANS = []\ninput = stdin.readline\n\ndef solve():\n    pass\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    primes = 0\n    if m % 2 == 0:\n        primes += 1\n        while m % 2 == 0:\n            m /= 2\n    for i in range(3, int(sqrt(m)) + 2, 2):\n        if m % i == 0:\n            primes += 1\n            while m % i == 0:\n                m /= i\n    if m > 2:\n        primes += 1\n    ans = 0\n    for i in range(primes, 0, -1):\n        if n % i == 0:\n            ans = i\n            break\n    print(ans)\nprint('\\n'.join(ANS))", "import math\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split(' '))\n    l = []\n    while m % 2 == 0:\n        l.append(2)\n        m /= 2\n    for i in range(3, int(math.sqrt(m)) + 1, 2):\n        while m % i == 0:\n            l.append(i)\n            m /= i\n    if m > 2:\n        l.append(m)\n    p = len(set(l))\n    while p > 0:\n        if n % p == 0:\n            break\n        else:\n            p -= 1\n    print(p)\n    t -= 1", "import math\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split(' '))\n    l = []\n    while m % 2 == 0:\n        l.append(2)\n        m /= 2\n    for i in range(3, int(math.sqrt(m)) + 1, 2):\n        while m % i == 0:\n            l.append(i)\n            m /= i\n    if m > 2:\n        l.append(m)\n    p = len(set(l))\n    while p > 0:\n        if n % p == 0:\n            break\n        else:\n            p -= 1\n    print(p)\n    t -= 1", "from sys import stdin\nfrom math import sqrt\nfor _ in range(int(stdin.readline())):\n    (n, m) = map(int, stdin.readline().split())\n    l = []\n    while m % 2 == 0:\n        l.append(2)\n        m = m // 2\n    for i in range(3, int(sqrt(m)) + 1, 2):\n        while m % i == 0:\n            l.append(i)\n            m = m // i\n    if m > 2:\n        l.append(m)\n    x = len(set(l))\n    if x == 0:\n        print(0)\n    else:\n        while n % x != 0:\n            x -= 1\n        print(x)", "from sys import stdin\nfrom math import sqrt\nfor _ in range(int(stdin.readline())):\n    (n, m) = map(int, stdin.readline().split())\n    l = []\n    while m % 2 == 0:\n        l.append(2)\n        m = m // 2\n    for i in range(3, int(sqrt(m)) + 1, 2):\n        while m % i == 0:\n            l.append(i)\n            m = m // i\n    if m > 2:\n        l.append(m)\n    x = len(set(l))\n    if x == 0:\n        print(0)\n    elif n % x == 0:\n        print(x)\n    else:\n        while n % x != 0:\n            x -= 1\n        print(x)", "import math\n\ndef primeFactors(n):\n    ans = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            ans += 1\n            while n % i == 0:\n                n = n // i\n    if n != 1:\n        ans += 1\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    prime = primeFactors(m)\n    if prime >= n:\n        print(n)\n    else:\n        out = 0\n        for i in range(prime, 0, -1):\n            if n % i == 0:\n                out = i\n                break\n        print(out)", "def ChefWM(n, m):\n    tot = 0\n    primes = 0\n    i = 2\n    while i * i <= m:\n        if m % i == 0:\n            primes += 1\n            while m % i == 0:\n                m //= i\n        i += 1\n    if m > 1:\n        primes += 1\n    for i in range(primes, 0, -1):\n        if n % i == 0:\n            tot = i\n            break\n    return tot\nT = int(input())\nfor t in range(T):\n    (N, M) = input().split()\n    (N, M) = (int(N), int(M))\n    print(ChefWM(N, M))", "from math import sqrt\n\ndef getDivisors(n):\n    l = []\n    add = []\n    i = 1\n    while i <= sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                l.append(i)\n            else:\n                l.append(i)\n                add.append(n / i)\n        i = i + 1\n    return l + add[::-1]\n\ndef primeFactors(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return l\nfor _ in range(int(input())):\n    (a, b) = list(map(int, input().split()))\n    if b == 1:\n        print(0)\n        continue\n    if a == 1:\n        print(1)\n        continue\n    ans = len(set(primeFactors(b)))\n    for i in range(ans, 0, -1):\n        if a % i == 0:\n            print(i)\n            break", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    temp = m\n    i = 2\n    while i * i <= m:\n        if not temp % i:\n            ans += 1\n            while not temp % i:\n                temp /= i\n        i += 1\n    if temp > 1:\n        ans += 1\n    if ans == 0:\n        print(ans)\n    elif n % ans == 0:\n        print(ans)\n    else:\n        while n % ans != 0:\n            ans -= 1\n        print(ans)", "from math import ceil, gcd, factorial, sqrt, floor, log\nimport queue\nimport re\nfrom itertools import permutations, combinations, accumulate\nfrom collections import Counter, deque\nfrom sys import stdin, stdout\nfrom bisect import bisect, insort, bisect_left, insort_left\nfrom types import CodeType\ninput = lambda : stdin.readline()\n\ndef sieve(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for l1 in range(p * p, n + 1, p):\n                prime[l1] = False\n        p += 1\n    return prime\n\ndef simplesieve(n):\n    prime = [2]\n    mark = [False] * (n + 1)\n    for p in range(3, n + 1, 2):\n        if mark[p] == False:\n            prime.append(p)\n            if p * p <= n:\n                for l1 in range(p * p, n + 1, 2 * p):\n                    mark[l1] = True\n    return prime\n\ndef segementedsieve(low, high):\n    primes = simplesieve(int(high ** 0.5))\n    prime = [True] * (high - low + 1)\n    for l1 in primes:\n        lower = low // l1\n        if lower <= 1:\n            lower = l1 + l1\n        elif low % l1 != 0:\n            lower = lower * l1 + l1\n        else:\n            lower = lower * l1\n        for l2 in range(lower, high + 1, l1):\n            prime[l2 - low] = False\n    s1 = []\n    s = 0\n    for l in range(low, high + 1):\n        if prime[l - low]:\n            s1.append(l)\n    return s1\n\ndef isprime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for l1 in range(3, int(n ** 0.5) + 1, 2):\n        if n % l1 == 0:\n            return False\n    return True\n\ndef binpow(s1, s2, m):\n    r2 = 1\n    s1 = s1 % m\n    while s2 > 0:\n        if s2 & 1:\n            r2 = r2 * s1 % m\n        s1 = s1 * s1 % m\n        s2 >>= 1\n        print(s1, s2, r2)\n    return r2\n\ndef lcm(s1, s2):\n    return s1 // gcd(s1, s2) * s2\n\ndef gcdExtended(s1, s2):\n    if s2 == 0:\n        return (s1, 1, 0)\n    (g, x1, y1) = gcdExtended(s2, s1 % s2)\n    l1 = y1\n    l2 = x1 - s1 // s2 * y1\n    return (g, l1, l2)\n\ndef dfs(graph, s, l1):\n    v = [0] * (s + 1)\n    v[l1] = 1\n    s1 = [l1]\n    z = 0\n    while s1 != []:\n        l = s1.pop()\n        for l1 in graph[l]:\n            if v[l1] == 0:\n                v[l1] = 1\n                s1.append(l1)\n    return 'no'\n\ndef bfs(graph, n, x, dest):\n    v = [0] * (1 + n)\n    d = [0] * (1 + n)\n    d[x] = 0\n    v[x] = 1\n    q = queue.Queue()\n    q.put(x)\n    while not q.empty():\n        z = q.get()\n        for s in graph[z]:\n            if v[s] == 0:\n                v[s] = 1\n                d[s] = d[z] + 1\n                q.put(s)\n    return d[dest]\nglobal iden\niden = [[1, 0], [0, 1]]\n\ndef mul(a, b):\n    n = len(a)\n    ans = []\n    for i in range(n):\n        r = []\n        for j in range(n):\n            s = 0\n            for k in range(n):\n                s += a[i][k] * b[k][j]\n            r.append(s)\n        ans.append(r)\n    return ans\n\ndef pow(a, n):\n    if n == 0:\n        return iden\n    k = pow(a, n // 2)\n    if n % 2 == 0:\n        return mul(k, k)\n    return mul(mul(k, k), a)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    k = m\n    c = 0\n    for i in range(2, int(m ** 0.5) + 1):\n        if k % i == 0:\n            c += 1\n            while k % i == 0:\n                k = k // i\n    if k > 1:\n        c += 1\n    ans = 0\n    for i in range(c, 0, -1):\n        if n % i == 0:\n            ans = i\n            break\n    print(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef count_prime(n):\n    i = 2\n    count = 0\n    while i * i < n:\n        if n % i == 0:\n            count = count + 1\n            while n % i == 0:\n                n = n // i\n        else:\n            i = i + 1\n    if n != 1:\n        count = count + 1\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    count = count_prime(m)\n    while count:\n        if n % count == 0:\n            break\n        count = count - 1\n    print(count)", "test = int(input())\nwhile test:\n    (n, m) = map(int, input().split())\n    ans = 0\n    temp = m\n    i = 2\n    while i * i <= m:\n        if not temp % i:\n            ans += 1\n            while not temp % i:\n                temp //= i\n        i += 1\n    if temp > 1:\n        ans += 1\n    i = 1\n    arr = []\n    while i * i <= n:\n        if not n % i:\n            arr.append(i)\n            if i != n // i:\n                arr.append(n // i)\n        i += 1\n    a = 0\n    for j in arr:\n        if j <= ans:\n            a = j\n    print(a)\n    test -= 1", "import sys\nf = sys.stdin\nnext(f)\nfor s in f:\n    (n, m) = map(int, s.split())\n    r = c = 0\n    i = 2\n    while i * i <= m:\n        d = 1\n        while m % i == 0:\n            c += d\n            d = 0\n            m //= i\n        i += 1\n    if m > 1:\n        c += 1\n    i = 1\n    while i <= c and i * i <= n:\n        if n % i == 0:\n            r = n // i\n            if r <= c:\n                break\n            r = i\n        i += 1\n    print(r)", "import math\n\ndef primefactors(n):\n    lst = []\n    while n % 2 == 0:\n        (lst.append(2),)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            lst.append(i)\n            n = n / i\n    if n > 2:\n        lst.append(int(n))\n    return lst\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    le = len(set(primefactors(m)))\n    c = 0\n    while le > 0:\n        if n % le == 0:\n            c += 1\n            break\n        else:\n            le -= 1\n    if c == 0:\n        print(0)\n    else:\n        print(le)", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    p = 0\n    q = b\n    i = 2\n    while i * i <= b:\n        if not q % i:\n            p = p + 1\n            while not q % i:\n                q = q // i\n        i = i + 1\n    if q > 1:\n        p += 1\n    l = []\n    i = 1\n    while i * i <= a:\n        if not a % i:\n            l.append(i)\n            if i != a // i:\n                l.append(a // i)\n        i = i + 1\n    c = 0\n    for i in l:\n        if i <= p:\n            c = i\n    print(c)", "def factors(n):\n    fact = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            fact += 1\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n != 1:\n        return fact + 1\n    return fact\n\ndef maxdivisor(n, m):\n    if m == 0:\n        return 0\n    for i in range(m, 0, -1):\n        if n % i == 0:\n            return i\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = factors(m)\n    print(maxdivisor(n, ans))", "def factors(n):\n    fact = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            fact += 1\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n != 1:\n        return fact + 1\n    return fact\n\ndef maxdivisor(n, m):\n    if m == 0:\n        return 0\n    for i in range(m, 0, -1):\n        if n % i == 0:\n            return i\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = factors(m)\n    print(maxdivisor(n, ans))", "def factors(n):\n    fact = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            fact += 1\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n != 1:\n        return fact + 1\n    return fact\n\ndef maxdivisor(n, m):\n    if m == 0:\n        return 0\n    for i in range(m, 0, -1):\n        if n % i == 0:\n            return i\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = factors(m)\n    print(maxdivisor(n, ans))", "def factors(n):\n    fact = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            fact += 1\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n != 1:\n        return fact + 1\n    return fact\n\ndef maxdivisor(n, m):\n    if m == 0:\n        return 0\n    for i in range(m, 0, -1):\n        if n % i == 0:\n            return i\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = factors(m)\n    print(maxdivisor(n, ans))", "import sys\nf = sys.stdin\nnext(f)\nfor s in f:\n    (n, m) = map(int, s.split())\n    r = c = 0\n    i = 2\n    while i * i <= m:\n        if m % i == 0:\n            c += 1\n            while m % i == 0:\n                m //= i\n        i += 1\n    if m > 1:\n        c += 1\n    i = 1\n    while i <= c and i * i <= n:\n        if n % i == 0:\n            r = n // i\n            if r <= c:\n                break\n            r = i\n        i += 1\n    print(r)", "import sys\nf = sys.stdin\nnext(f)\nfor s in f:\n    (n, m) = map(int, s.split())\n    r = c = 0\n    i = 2\n    while i * i <= m:\n        if m % i == 0:\n            c += 1\n            while m % i == 0:\n                m //= i\n        i += 1\n    if m > 1:\n        c += 1\n    i = 1\n    while i <= c and i * i <= n:\n        if n % i == 0:\n            r = n // i\n            if r <= c:\n                break\n            r = i\n        i += 1\n    print(r)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    p = 0\n    q = b\n    i = 2\n    while i * i <= b:\n        if not q % i:\n            p = p + 1\n            while not q % i:\n                q = q // i\n        i = i + 1\n    if q > 1:\n        p += 1\n    l = []\n    i = 1\n    while i * i <= a:\n        if not a % i:\n            l.append(i)\n            if i != a // i:\n                l.append(a // i)\n        i = i + 1\n    c = 0\n    for i in l:\n        if i <= p:\n            c = i\n    print(c)", "import sys\nf = sys.stdin\nnext(f)\nfor s in f:\n    (n, m) = map(int, s.split())\n    r = c = 0\n    i = 2\n    while i * i <= m:\n        if m % i == 0:\n            c += 1\n            while m % i == 0:\n                m //= i\n        i += 1\n    if m > 1:\n        c += 1\n    i = 1\n    while i <= c and i * i <= n:\n        if n % i == 0:\n            k = n // i\n            if k <= c:\n                r = k\n                break\n            r = i\n        i += 1\n    print(r)", "t = int(input())\n\ndef primefactors(n: int) -> int:\n    i = 2\n    f = 0\n    while i * i < n:\n        if n % i == 0:\n            f += 1\n        while n % i == 0:\n            n = n // i\n        i += 1\n    if n != 1:\n        f += 1\n    return f\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    max_cols = primefactors(m)\n    if max_cols == 0:\n        print(0)\n        continue\n    for i in range(max_cols, 0, -1):\n        if n % i == 0:\n            print(i)\n            break", "from sys import *\nfrom math import *\ninput = stdin.readline\nfor u in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = set()\n    while k % 2 == 0:\n        s.add(2)\n        k = k // 2\n    for i in range(3, int(sqrt(k)) + 2, 2):\n        while k % i == 0:\n            s.add(i)\n            k = k // i\n    if k > 2:\n        s.add(k)\n    c = len(s)\n    f = 0\n    while c > 0:\n        if n % c == 0:\n            f = c\n            break\n        else:\n            c -= 1\n    print(f)", "import math\n\ndef printDivisors(n):\n    s = list()\n    i = 1\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                s.append(i)\n            else:\n                s.append(i)\n                s.append(n // i)\n        i = i + 1\n    return sorted(s)[:-1]\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    if m == 1:\n        print(0)\n        continue\n    op = printDivisors(m)\n    c = 1\n    for i in range(len(op) - 2, -1, -1):\n        flag = True\n        for j in range(i + 1, len(op)):\n            if op[j] % op[i] == 0:\n                flag = False\n                break\n        if flag:\n            c += 1\n    while n % c != 0:\n        c -= 1\n    print(c)", "def rajeev(n):\n    ans = 0\n    fuck = 1\n    while n % 2 == 0:\n        n //= 2\n        fuck = 2\n    if fuck == 2:\n        ans += 1\n    for r in range(3, int(n ** 0.5) + 1, 2):\n        while n % r == 0:\n            n //= r\n            fuck = r\n        if fuck == r:\n            ans += 1\n    if n > 2:\n        ans += 1\n    return ans\nt = int(input())\nfor tt in range(t):\n    (n, m) = map(int, input().split())\n    g = rajeev(m)\n    if g >= n:\n        print(n)\n    elif g == 0:\n        print(0)\n    else:\n        while n % g != 0:\n            g -= 1\n        print(g)", "import math as mt\n\ndef primeFactors(num):\n    prime = []\n    while num % 2 == 0:\n        prime.append(2)\n        num = num / 2\n    for i in range(3, int(mt.sqrt(num)) + 1, 2):\n        while num % i == 0:\n            prime.append(i)\n            num = num / i\n    if num > 2:\n        prime.append(num)\n    return prime\nfor i in range(int(input())):\n    (num, mus) = map(int, input().split())\n    lis = len(set(primeFactors(mus)))\n    mo = 0\n    while lis > 0:\n        if num % lis == 0:\n            mo = 1\n            break\n        else:\n            lis -= 1\n    if mo == 1:\n        print(lis)\n    else:\n        print(0)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    p = 0\n    q = b\n    i = 2\n    while i * i <= b:\n        if not q % i:\n            p = p + 1\n            while not q % i:\n                q = q // i\n        i = i + 1\n    if q > 1:\n        p += 1\n    l = []\n    i = 1\n    while i * i <= a:\n        if not a % i:\n            l.append(i)\n            if i != a // i:\n                l.append(a // i)\n        i = i + 1\n    c = 0\n    for i in l:\n        if i <= p:\n            c = i\n    print(c)", "test = int(input())\nwhile test:\n    (n, m) = map(int, input().split())\n    ans = 0\n    temp = m\n    i = 2\n    while i * i <= m:\n        if not temp % i:\n            ans += 1\n            while not temp % i:\n                temp //= i\n        i += 1\n    if temp > 1:\n        ans += 1\n    i = 1\n    arr = []\n    while i * i <= n:\n        if not n % i:\n            arr.append(i)\n            if i != n // i:\n                arr.append(n // i)\n        i += 1\n    a = 0\n    for j in arr:\n        if j <= ans:\n            a = j\n    print(a)\n    test -= 1", "import math\n\ndef primeFactors(n):\n    pf = []\n    while n % 2 == 0:\n        pf.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            pf.append(i)\n            n = n / i\n    if n > 2:\n        pf.append(n)\n    return pf\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = len(set(primeFactors(m)))\n    x = 0\n    while l > 0:\n        if n % l == 0:\n            x = 1\n            break\n        else:\n            l -= 1\n    if x == 1:\n        print(l)\n    else:\n        print(0)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    temp = m\n    i = 2\n    while i * i <= m:\n        if not temp % i:\n            ans += 1\n            while not temp % i:\n                temp /= i\n        i += 1\n    if temp > 1:\n        ans += 1\n    arr = []\n    i = 1\n    while i * i <= n:\n        if not n % i:\n            arr.append(i)\n            if i != n // i:\n                arr.append(n // i)\n        i += 1\n    val = 0\n    for i in arr:\n        if i <= ans:\n            val = i\n    print(val)", "def isPrimeFactor(n):\n    count = 0\n    if n % 2 == 0:\n        count += 1\n    while n % 2 == 0:\n        n = n // 2\n    for i in range(3, int(n ** (1 / 2)) + 1, 2):\n        if n % i == 0:\n            count += 1\n        while n % i == 0:\n            n = n // i\n    if n > 2:\n        count += 1\n    return count\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        prime_factors_count = isPrimeFactor(m)\n        if prime_factors_count == 0:\n            print(0)\n            continue\n        elif prime_factors_count > n:\n            print(n)\n        else:\n            while n % prime_factors_count != 0:\n                prime_factors_count -= 1\n            print(prime_factors_count)\nmain()", "def NPrimes(m):\n    count = 0\n    if m % 2 == 0:\n        count += 1\n        while m % 2 == 0:\n            m = m // 2\n    if m % 3 == 0:\n        count += 1\n        while m % 3 == 0:\n            m = m // 3\n    i = 5\n    while i * i <= m:\n        if m % i == 0:\n            count += 1\n            while m % i == 0:\n                m = m // i\n        if m % (i + 2) == 0:\n            count += 1\n            while m % (i + 2) == 0:\n                m = m // (i + 2)\n        i += 6\n    if m > 3:\n        count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    x = NPrimes(m)\n    flag = -1\n    if n == 1:\n        print(1)\n        flag = 0\n    else:\n        for i in reversed(range(1, x + 1)):\n            if n % i == 0:\n                flag = 0\n                print(i)\n                break\n    if flag == -1:\n        print(0)", "import math\n\ndef primeFactors(n):\n    count = 0\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            count = count + 1\n        while n % i == 0:\n            n = n / i\n    if n > 1:\n        count = count + 1\n    return count\nt = int(input())\nwhile t > 0:\n    (n, m) = map(int, input().split())\n    x = primeFactors(m)\n    if n < x:\n        print(n)\n    else:\n        f = 0\n        while f == 0:\n            if x == 0:\n                x = 0\n                break\n            elif n % x == 0 and x != 0:\n                f = 1\n                break\n            else:\n                x = x - 1\n        print(x)\n    t = t - 1", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = 0\n    for i in range(2, int(m ** 0.5) + 1):\n        if m % i == 0:\n            ans += 1\n            while m % i == 0:\n                m //= i\n    if m > 1:\n        ans += 1\n    p = []\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            p.append(i)\n            p.append(n // i)\n    pa = 0\n    for i in p:\n        if i <= ans:\n            pa = i\n    print(pa)", "import math\n\ndef isprime(x):\n    y = int(x ** 0.5 + 2)\n    if x < 4:\n        return True\n    for j in range(2, y):\n        if x % j == 0:\n            return False\n    return True\n\ndef primeFactors(n):\n    seti = set()\n    while n % 2 == 0:\n        seti.add(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            seti.add(i)\n            n = n // i\n    if n > 2:\n        seti.add(n)\n    return len(seti)\nfor i in range(int(input())):\n    (m, n) = map(int, input().split())\n    if n == 1:\n        print(0)\n    elif m == 1 or isprime(n):\n        print(1)\n    else:\n        temp = primeFactors(n)\n        while m % temp != 0:\n            temp -= 1\n        print(temp)", "import math\n\ndef primefactors(n):\n    lis = []\n    while n % 2 == 0:\n        lis.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            lis.append(i)\n            n = n / i\n    if n > 2:\n        lis.append(n)\n    return lis\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    lis = primefactors(y)\n    g = len(set(lis))\n    if g == 0:\n        print(0)\n        continue\n    if x % g == 0:\n        print(g)\n    else:\n        while g >= 1:\n            if x % g == 0:\n                print(g)\n                break\n            else:\n                g -= 1", "import math\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = m\n    nn = []\n    mm = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            nn.append(i)\n            nn.append(n // i)\n    if int(math.sqrt(n)) == math.sqrt(n):\n        nn.remove(int(math.sqrt(n)))\n    if m % 2 == 0:\n        mm.append(2)\n        while m % 2 == 0:\n            m = m / 2\n    for i in range(3, int(math.sqrt(m)) + 1, 2):\n        if m % i == 0:\n            mm.append(i)\n        while m % i == 0:\n            m = m / i\n    if m > 2:\n        mm.append(m)\n    b = len(mm)\n    ans = [1]\n    for hh in nn:\n        if hh <= b:\n            ans.append(hh)\n    if l == 1:\n        print(0)\n    else:\n        print(max(ans))", "import math\nimport os\nimport random\nimport re\nimport sys\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    count = 0\n    a = M\n    i = 2\n    while i * i <= M:\n        if a % i == 0:\n            count += 1\n            while a % i == 0:\n                a /= i\n        i += 1\n    if a > 1:\n        count += 1\n    b = []\n    i = 1\n    while i * i <= N:\n        if N % i == 0:\n            b.append(i)\n            if i != int(N / i):\n                b.append(int(N / i))\n        i += 1\n    ans = 0\n    for j in range(len(b)):\n        if b[j] <= count:\n            ans = b[j]\n    print(ans)", "for k in range(int(input())):\n    (N, M) = map(int, input().split())\n    answerhai = 0\n    tempeory = M\n    i = 2\n    while i * i <= M:\n        if not tempeory % i:\n            answerhai += 1\n            while not tempeory % i:\n                tempeory //= i\n        i += 1\n    if tempeory > 1:\n        answerhai += 1\n    A = []\n    i = 1\n    while i * i <= N:\n        if not N % i:\n            A.append(i)\n            if i != N // i:\n                A.append(N // i)\n        i += 1\n    val = 0\n    for i in A:\n        if i <= answerhai:\n            val = i\n    print(val)", "import math\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return set(factors)\n\ndef divisors(n):\n    large_divisors = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            yield i\n            if i * i != n:\n                large_divisors.append(n / i)\n    for divisor in reversed(large_divisors):\n        yield int(divisor)\nt = input()\nfor case in range(int(t)):\n    (n, m) = [int(c) for c in input().split(' ')]\n    mc = len(prime_factors(m))\n    for d in divisors(n):\n        if n // d <= mc:\n            print(n // d)\n            break\n    else:\n        print(0)", "from functools import reduce\nfrom sys import stdin, stdout\nimport math\n\ndef primeFactors(n):\n    l = []\n    while n % 2 == 0:\n        (l.append(2),)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            (l.append(i),)\n            n = n // i\n    if n > 2:\n        l.append(n)\n    return l\n\ndef factors(n):\n    step = 2 if n % 2 else 1\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1, step) if n % i == 0)))\nt = int(stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, stdin.readline().split())\n    a2 = sorted(factors(m))\n    if len(a2) == 1:\n        print(0)\n    elif len(a2) == 2:\n        print(1)\n    else:\n        a1 = sorted(factors(n))\n        a2 = primeFactors(m)\n        ab = len(set(a2))\n        final = 0\n        for x in range(len(a1)):\n            if a1[x] <= ab:\n                final = a1[x]\n        print(final)", "import math\n\ndef num_div(n):\n    count = 0\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n //= i\n        i += 2\n    if n > 2:\n        count += 1\n    return count\n\ndef get_prm(n, ver):\n    i = 1\n    val = 0\n    while i * i <= n:\n        if n % i == 0:\n            if i <= ver:\n                val = max(val, i)\n            if n // i <= ver:\n                val = max(val, n // i)\n        i += 1\n    return val\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ver = num_div(m)\n    if m == 1 and ver < 2:\n        print(0)\n        continue\n    if n == 1:\n        print(1)\n        continue\n    print(get_prm(n, ver))", "from collections import defaultdict\nimport math\n\ndef solve(N, M):\n    ans = 0\n    temp = M\n    i = 2\n    while i * i <= M:\n        if temp % i == 0:\n            ans += 1\n            while temp % i == 0:\n                temp = temp // i\n        i += 1\n    if temp > 1:\n        ans += 1\n    dp = []\n    i = 1\n    while i * i <= N:\n        if N % i == 0:\n            dp.append(i)\n            if i != N // i:\n                dp.append(N // i)\n        i += 1\n    maxx = 0\n    for i in dp:\n        if i <= ans:\n            maxx = i\n    return maxx\n    pass\nT = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    print(solve(N, M))"]