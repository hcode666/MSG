["for _ in range(int(input())):\n    N = int(input())\n    A = [*map(int, input().split())]\n    (op, dp) = ([pow(10, 9)] * (N + 1), [pow(10, 9)] * (N + 1))\n    op[A[0]] = dp[0] = 0\n    for i in range(1, N):\n        if A[i - 1] <= A[i]:\n            dp[i] = dp[i - 1]\n        dp[i] = min(dp[i], op[A[i]] + 1)\n        op[A[i]] = min(op[A[i]], dp[i])\n    print(dp[N - 1] if dp[N - 1] <= N else -1)", "for _ in range(int(input())):\n    N = int(input())\n    A = [*map(int, input().split())]\n    (op, dp) = ([pow(10, 9)] * (N + 1), [pow(10, 9)] * (N + 1))\n    op[A[0]] = dp[0] = 0\n    for i in range(1, N):\n        if A[i - 1] <= A[i]:\n            dp[i] = dp[i - 1]\n        dp[i] = min(dp[i], op[A[i]] + 1)\n        op[A[i]] = min(op[A[i]], dp[i])\n    print(dp[N - 1] if dp[N - 1] <= N else -1)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [int(1000000000.0)] * (n + 1)\n    prev = collections.defaultdict(lambda : int(1000000000.0))\n    dp[0] = prev[arr[0]] = 0\n    for i in range(1, n):\n        if arr[i - 1] <= arr[i]:\n            dp[i] = dp[i - 1]\n        minn = prev[arr[i]]\n        dp[i] = min(dp[i], minn + 1)\n        prev[arr[i]] = min(minn, dp[i])\n    print(dp[n - 1] if dp[n - 1] <= n - 1 else -1)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [int(1000000000.0)] * (n + 1)\n    prev = collections.defaultdict(lambda : int(1000000000.0))\n    dp[0] = prev[arr[0]] = 0\n    for i in range(1, n):\n        if arr[i - 1] <= arr[i]:\n            dp[i] = dp[i - 1]\n        minn = prev[arr[i]]\n        dp[i] = min(dp[i], minn + 1)\n        prev[arr[i]] = min(minn, dp[i])\n    print(dp[n - 1] if dp[n - 1] <= n - 1 else -1)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [int(1000000000.0)] * (n + 1)\n    prev = collections.defaultdict(lambda : int(1000000000.0))\n    dp[0] = prev[arr[0]] = 0\n    for i in range(1, n):\n        if arr[i - 1] <= arr[i]:\n            dp[i] = dp[i - 1]\n        minn = prev[arr[i]]\n        dp[i] = min(dp[i], minn + 1)\n        prev[arr[i]] = min(minn, dp[i])\n    print(dp[n - 1] if dp[n - 1] <= n - 1 else -1)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (last, ans) = ([-1 for _ in range(n + 1)], [float('inf') for _ in range(n)])\n    (last[l[0]], ans[0]) = (0, 0)\n    for i in range(1, n):\n        if last[l[i]] != -1:\n            if ans[i - 1] == float('inf') or l[i] - l[i - 1] < 0:\n                ans[i] = ans[last[l[i]]] + 1\n            else:\n                ans[i] = min(ans[i - 1], ans[last[l[i]]] + 1)\n        elif l[i] - l[i - 1] >= 0 and ans[i - 1] != float('inf'):\n            (ans[i], last[l[i]]) = (ans[i - 1], i)\n    if ans[-1] == float('inf'):\n        ans[-1] = -1\n    print(ans[-1])", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [int(1000000000.0)] * (n + 1)\n    prev = collections.defaultdict(lambda : int(1000000000.0))\n    dp[0] = prev[arr[0]] = 0\n    for i in range(1, n):\n        if arr[i - 1] <= arr[i]:\n            dp[i] = dp[i - 1]\n        minn = prev[arr[i]]\n        dp[i] = min(dp[i], minn + 1)\n        prev[arr[i]] = min(minn, dp[i])\n    print(dp[n - 1] if dp[n - 1] <= n - 1 else -1)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [int(1000000000.0)] * (n + 1)\n    prev = collections.defaultdict(lambda : int(1000000000.0))\n    dp[0] = prev[arr[0]] = 0\n    for i in range(1, n):\n        if arr[i - 1] <= arr[i]:\n            dp[i] = dp[i - 1]\n        minn = prev[arr[i]]\n        dp[i] = min(dp[i], minn + 1)\n        prev[arr[i]] = min(minn, dp[i])\n    print(dp[n - 1] if dp[n - 1] <= n else -1)", "for _ in range(int(input())):\n    N = int(input())\n    A = [*map(int, input().split())]\n    (op, dp) = ([pow(10, 9)] * (N + 1), [pow(10, 9)] * (N + 1))\n    op[A[0]] = dp[0] = 0\n    for i in range(1, N):\n        if A[i - 1] <= A[i]:\n            dp[i] = dp[i - 1]\n        dp[i] = min(dp[i], op[A[i]] + 1)\n        op[A[i]] = min(op[A[i]], dp[i])\n    print(dp[N - 1] if dp[N - 1] <= N else -1)", "import sys\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [sys.maxsize] * n\n    val = [sys.maxsize] * (max(arr) + 1)\n    dp[0] = 0\n    val[arr[0]] = 0\n    for i in range(1, n):\n        if arr[i] >= arr[i - 1]:\n            dp[i] = dp[i - 1]\n        dp[i] = min(dp[i], val[arr[i]] + 1)\n        val[arr[i]] = min(dp[i], val[arr[i]])\n    if dp[-1] > 10 ** 6:\n        print(-1)\n    else:\n        print(dp[-1])", "from collections import defaultdict\nmaxx = 10000000.0\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    dp = [0]\n    mp = defaultdict(lambda : maxx)\n    mp[nums[0]] = 0\n    for i in range(1, n):\n        dp.append(min(mp[nums[i]] + 1, maxx))\n        if nums[i] >= nums[i - 1]:\n            dp[i] = min(dp[i], dp[i - 1])\n            mp[nums[i]] = min(mp[nums[i]], dp[i])\n    print(-1 if dp[n - 1] == maxx else dp[n - 1])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    dp = [0] * 200001\n    q = [0] * 200001\n    for i in range(2, n + 1):\n        dp[i] = float('inf')\n    for i in range(n + 1):\n        q[i] = float('inf')\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], q[a[i]] + 1)\n        if a[i] >= a[i - 1]:\n            dp[i] = min(dp[i], dp[i - 1])\n        if a[i - 1] <= a[i]:\n            q[a[i]] = min(q[a[i]], dp[i])\n    if dp[n] == float('inf'):\n        print(-1)\n    else:\n        print(dp[n])\n    t = t - 1", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [float('inf')] * n\n    v = [float('inf')] * (n + 1)\n    dp[0] = 0\n    v[a[0]] = 0\n    for i in range(1, n):\n        if a[i - 1] <= a[i]:\n            dp[i] = dp[i - 1]\n        dp[i] = min(dp[i], 1 + v[a[i]])\n        v[a[i]] = min(v[a[i]], dp[i])\n    if dp[n - 1] == float('inf'):\n        print(-1)\n    else:\n        print(dp[n - 1])", "INF = 10 ** 9\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    min_idx = {}\n    for i in range(n):\n        if a[i] not in min_idx:\n            min_idx[a[i]] = INF\n    dp = [INF] * n\n    dp[0] = 0\n    min_idx[a[0]] = 0\n    for i in range(1, n):\n        if a[i] >= a[i - 1]:\n            dp[i] = dp[i - 1]\n        m = min_idx[a[i]]\n        dp[i] = min(dp[i], 1 + m)\n        min_idx[a[i]] = min(min_idx[a[i]], dp[i])\n    if dp[n - 1] >= INF:\n        print(-1)\n    else:\n        print(dp[n - 1])", "for _ in range(int(input())):\n    N = int(input())\n    A = [*map(int, input().split())]\n    (op, dp) = ([pow(10, 9)] * (N + 1), [pow(10, 9)] * (N + 1))\n    op[A[0]] = dp[0] = 0\n    for i in range(1, N):\n        if A[i - 1] <= A[i]:\n            dp[i] = dp[i - 1]\n        dp[i] = min(dp[i], op[A[i]] + 1)\n        op[A[i]] = min(op[A[i]], dp[i])\n    print(dp[N - 1] if dp[N - 1] <= N else -1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    dp = [0] * 200001\n    q = [0] * 200001\n    for i in range(2, n + 1):\n        dp[i] = float('inf')\n    for i in range(n + 1):\n        q[i] = float('inf')\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], q[a[i]] + 1)\n        if a[i] >= a[i - 1]:\n            dp[i] = min(dp[i], dp[i - 1])\n        if a[i - 1] <= a[i]:\n            q[a[i]] = min(q[a[i]], dp[i])\n    if dp[n] == float('inf'):\n        print(-1)\n    else:\n        print(dp[n])\n    t = t - 1", "maxx = 2147483647\nfor _ in range(int(input())):\n    n = int(input())\n    nums = [0] + list(map(int, input().split()))\n    dp = [0, 0] + [maxx] * (n - 1)\n    q = [maxx] * (n + 1)\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], q[nums[i]] + 1)\n        if nums[i] >= nums[i - 1]:\n            dp[i] = min(dp[i], dp[i - 1])\n        if nums[i - 1] <= nums[i]:\n            q[nums[i]] = min(q[nums[i]], dp[i])\n    print(-1 if dp[n] == maxx else dp[n])", "dp = [0] * (int(200000.0) + 1)\nq = [0] * (int(200000.0) + 1)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(a % b, a)\n\ndef swap(a, b):\n    (a, b) = (b, a)\n    return (a, b)\n\ndef fact(n):\n    if n == 1:\n        return 1\n    return n * fact(n - 1)\n\ndef cbits(n):\n    count = 0\n    while n:\n        n = n & n - 1\n        count += 1\n    return count\n\ndef solve(n, arr):\n    for i in range(2, n + 1):\n        dp[i] = int(20000000000.0)\n    for i in range(n + 1):\n        q[i] = int(20000000000.0)\n    for i in range(1, n + 1):\n        dp[i] = min(dp[i], q[arr[i]] + 1)\n        if arr[i] >= arr[i - 1]:\n            dp[i] = min(dp[i], dp[i - 1])\n        if arr[i - 1] <= arr[i]:\n            q[arr[i]] = min(q[arr[i]], dp[i])\n    if dp[n] == int(20000000000.0):\n        print(-1)\n    else:\n        print(dp[n])\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = [0] + arr\n    solve(n, arr)\n    t -= 1", "import sys, math, heapq, bisect\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nfor t in range(int(input())):\n    n = int(input())\n    a = ints()\n    b = [a[0]]\n    for i in a[1:]:\n        if i != b[-1]:\n            b.append(i)\n    a = list(b)\n    a = a[::-1]\n    n = len(a)\n    dp = {}\n    dp[a[0]] = 0\n    prev = 0\n    for i in range(1, n):\n        if a[i] > a[i - 1]:\n            if a[i] in dp:\n                prev = dp[a[i]] + 1\n            else:\n                prev = -1\n        elif prev == -1:\n            if a[i] in dp:\n                prev = dp[a[i]] + 1\n        else:\n            dp[a[i]] = prev\n    ans = prev\n    a = a[::-1]\n    dp = {}\n    dp[a[0]] = 0\n    prev = 0\n    for i in range(1, n):\n        if a[i] < a[i - 1]:\n            if a[i] in dp:\n                prev = dp[a[i]] + 1\n            else:\n                prev = -1\n        elif prev == -1:\n            if a[i] in dp:\n                prev = dp[a[i]] + 1\n        else:\n            dp[a[i]] = prev\n    prev = min(prev, ans)\n    print(prev)", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(5 * 10 ** 5)\ninp = lambda : list(map(int, input().split()))\n\ndef solve(i, j):\n    if i == n:\n        return 0\n    if i - 1 >= 0 and j == 0 and (a[i - 1] > a[i]):\n        return float('inf')\n    if dp[i][j] != -1:\n        return dp[i][j]\n    ans = solve(i + 1, 0)\n    if nind[i] != n:\n        if j == 1:\n            ans = min(ans, solve(nind[i], 1))\n        else:\n            ans = min(ans, solve(nind[i], 1) + 1)\n    dp[i][j] = ans\n    return ans\n\ndef answer():\n    global dp, nind\n    best = [n for i in range(n + 1)]\n    nind = [n for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        nind[i] = best[a[i]]\n        best[a[i]] = i\n    dp = [[-1, -1] for i in range(n)]\n    ans = solve(0, 0)\n    if ans == float('inf'):\n        return -1\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    a = inp()\n    print(answer())"]