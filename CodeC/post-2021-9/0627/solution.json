["import itertools\nm = 10 ** 9 + 7\n\ndef factorize(n):\n\n    def try_divisor(n, k, pfs):\n        if n % k == 0:\n            pfs[k] = 1\n            n //= k\n            while n % k == 0:\n                pfs[k] += 1\n                n //= k\n        return n\n    pfs = {}\n    n = try_divisor(n, 2, pfs)\n    n = try_divisor(n, 3, pfs)\n    for i in itertools.count(start=1):\n        n = try_divisor(n, 6 * i - 1, pfs)\n        n = try_divisor(n, 6 * i + 1, pfs)\n        if (6 * i + 1) ** 2 > n:\n            break\n    if n > 1:\n        pfs[n] = 1\n    return pfs\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    p_lists = {}\n    for x in a:\n        for (p, e) in factorize(x).items():\n            if p not in p_lists:\n                p_lists[p] = []\n            p_lists[p].append(p ** e)\n    for v in p_lists.values():\n        v.sort()\n    sum = 0\n    for __ in range(n):\n        prod = 1\n        for p in list(p_lists):\n            ppow = p_lists[p].pop()\n            if len(p_lists[p]) == 0:\n                del p_lists[p]\n            prod = prod * ppow % m\n        sum = (sum + prod) % m\n    print(sum)", "import itertools\nm = 10 ** 9 + 7\n\ndef factorize(n):\n\n    def try_divisor(n, k, pfs):\n        if n % k == 0:\n            pfs[k] = 1\n            n //= k\n            while n % k == 0:\n                pfs[k] += 1\n                n //= k\n        return n\n    pfs = {}\n    n = try_divisor(n, 2, pfs)\n    n = try_divisor(n, 3, pfs)\n    for i in itertools.count(start=1):\n        n = try_divisor(n, 6 * i - 1, pfs)\n        n = try_divisor(n, 6 * i + 1, pfs)\n        if (6 * i + 1) ** 2 > n:\n            break\n    if n > 1:\n        pfs[n] = 1\n    return pfs\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    p_lists = {}\n    for x in a:\n        for (p, e) in factorize(x).items():\n            if p not in p_lists:\n                p_lists[p] = []\n            p_lists[p].append(p ** e)\n    for v in p_lists.values():\n        v.sort()\n    sum = 0\n    for __ in range(n):\n        prod = 1\n        for p in list(p_lists):\n            ppow = p_lists[p].pop()\n            if len(p_lists[p]) == 0:\n                del p_lists[p]\n            prod = prod * ppow % m\n        sum = (sum + prod) % m\n    print(sum)", "from math import sqrt\nfrom sys import stdin\ninput = stdin.readline\nMODULO = 10 ** 9 + 7\nMAX = 10 ** 6\n\ndef eratosthenes(n):\n    numbers = [True] * (n + 1)\n    (p, p2) = (2, 4)\n    while p2 <= n:\n        if numbers[p]:\n            for i in range(p2, n + 1, p):\n                numbers[i] = False\n        p += 1\n        p2 = p * p\n    return [2] + [number for number in range(3, n + 1, 2) if numbers[number]]\n\ndef factorization(n, primeslist=None):\n    pf = []\n    if primeslist == None:\n        primeslist = eratosthenes(int(sqrt(n)) + 1)\n    for p in primeslist:\n        if p * p > n:\n            break\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        if count > 0:\n            pf.append((p, count))\n    if n > 1:\n        pf.append((n, 1))\n    return pf\n\ndef solve(N, A, primeslist):\n    P = len(primeslist)\n    prime = {p: [] for p in primeslist}\n    for a in A:\n        for (p, c) in factorization(a, primeslist):\n            prime[p].append(c)\n    A = [1] * N\n    for p in prime:\n        for (i, c) in enumerate(sorted(prime[p], reverse=True)):\n            A[i] *= p ** c\n    return sum(A) % MODULO\nT = int(input().strip())\nprimeslist = eratosthenes(MAX)\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A, primeslist))", "from math import sqrt\nfrom sys import stdin\ninput = stdin.readline\nMODULO = 10 ** 9 + 7\nMAX = 10 ** 6\n\ndef eratosthenes(n):\n    numbers = [True] * (n + 1)\n    (p, p2) = (2, 4)\n    while p2 <= n:\n        if numbers[p]:\n            for i in range(p2, n + 1, p):\n                numbers[i] = False\n        p += 1\n        p2 = p * p\n    return [2] + [number for number in range(3, n + 1, 2) if numbers[number]]\n\ndef factorization(n, primeslist=None):\n    pf = []\n    if primeslist == None:\n        primeslist = eratosthenes(int(sqrt(n)) + 1)\n    for p in primeslist:\n        if p * p > n:\n            break\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        if count > 0:\n            pf.append((p, count))\n    if n > 1:\n        pf.append((n, 1))\n    return pf\n\ndef solve(N, A, primeslist):\n    P = len(primeslist)\n    prime = {p: [] for p in primeslist}\n    for a in A:\n        for (p, c) in factorization(a, primeslist):\n            prime[p].append(c)\n    A = [1] * N\n    for p in prime:\n        for (i, c) in enumerate(sorted(prime[p], reverse=True)):\n            A[i] *= p ** c\n    return sum(A) % MODULO\nT = int(input().strip())\nprimeslist = eratosthenes(MAX)\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A, primeslist))", "from math import sqrt\nfrom sys import stdin\ninput = stdin.readline\nMODULO = 10 ** 9 + 7\nMAX = 10 ** 6\n\ndef eratosthenes(n):\n    numbers = [True] * (n + 1)\n    (p, p2) = (2, 4)\n    while p2 <= n:\n        if numbers[p]:\n            for i in range(p2, n + 1, p):\n                numbers[i] = False\n        p += 1\n        p2 = p * p\n    return [2] + [number for number in range(3, n + 1, 2) if numbers[number]]\n\ndef factorization(n, primeslist=None):\n    pf = []\n    if primeslist == None:\n        primeslist = eratosthenes(int(sqrt(n)) + 1)\n    for p in primeslist:\n        if p * p > n:\n            break\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        if count > 0:\n            pf.append((p, count))\n    if n > 1:\n        pf.append((n, 1))\n    return pf\n\ndef solve(N, A, primeslist):\n    P = len(primeslist)\n    prime = {p: [] for p in primeslist}\n    for a in A:\n        for (p, c) in factorization(a, primeslist):\n            prime[p].append(c)\n    A = [1] * N\n    for p in prime:\n        for (i, c) in enumerate(sorted(prime[p], reverse=True)):\n            A[i] *= p ** c\n    return sum(A) % MODULO\nT = int(input().strip())\nprimeslist = eratosthenes(MAX)\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A, primeslist))", "from math import sqrt\nfrom sys import stdin\ninput = stdin.readline\nMODULO = 10 ** 9 + 7\nMAX = 10 ** 6\n\ndef eratosthenes(n):\n    numbers = [True] * (n + 1)\n    (p, p2) = (2, 4)\n    while p2 <= n:\n        if numbers[p]:\n            for i in range(p2, n + 1, p):\n                numbers[i] = False\n        p += 1\n        p2 = p * p\n    return [2] + [number for number in range(3, n + 1, 2) if numbers[number]]\n\ndef factorization(n, primeslist=None):\n    pf = []\n    if primeslist == None:\n        primeslist = eratosthenes(int(sqrt(n)) + 1)\n    for p in primeslist:\n        if p * p > n:\n            break\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        if count > 0:\n            pf.append((p, count))\n    if n > 1:\n        pf.append((n, 1))\n    return pf\n\ndef solve(N, A, primeslist):\n    P = len(primeslist)\n    prime = {p: [] for p in primeslist}\n    for a in A:\n        for (p, c) in factorization(a, primeslist):\n            prime[p].append(c)\n    A = [1] * N\n    for p in prime:\n        for (i, c) in enumerate(sorted(prime[p], reverse=True)):\n            A[i] *= p ** c\n    return sum(A) % MODULO\nT = int(input().strip())\nprimeslist = eratosthenes(MAX)\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A, primeslist))", "from math import sqrt\nfrom sys import stdin\ninput = stdin.readline\nMODULO = 10 ** 9 + 7\nMAX = 10 ** 6\n\ndef eratosthenes(n):\n    numbers = [True] * (n + 1)\n    (p, p2) = (2, 4)\n    while p2 <= n:\n        if numbers[p]:\n            for i in range(p2, n + 1, p):\n                numbers[i] = False\n        p += 1\n        p2 = p * p\n    return [2] + [number for number in range(3, n + 1, 2) if numbers[number]]\n\ndef factorization(n, primeslist=None):\n    pf = []\n    if primeslist == None:\n        primeslist = eratosthenes(int(sqrt(n)) + 1)\n    for p in primeslist:\n        if p * p > n:\n            break\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        if count > 0:\n            pf.append((p, count))\n    if n > 1:\n        pf.append((n, 1))\n    return pf\n\ndef solve(N, A, primeslist):\n    P = len(primeslist)\n    prime = {p: [] for p in primeslist}\n    for a in A:\n        for (p, c) in factorization(a, primeslist):\n            prime[p].append(c)\n    A = [1] * N\n    for p in prime:\n        for (i, c) in enumerate(sorted(prime[p], reverse=True)):\n            A[i] *= p ** c\n    return sum(A) % MODULO\nT = int(input().strip())\nprimeslist = eratosthenes(MAX)\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A, primeslist))", "from math import sqrt\nfrom sys import stdin\ninput = stdin.readline\nMODULO = 10 ** 9 + 7\nMAX = 10 ** 6\n\ndef eratosthenes(n):\n    numbers = [True] * (n + 1)\n    (p, p2) = (2, 4)\n    while p2 <= n:\n        if numbers[p]:\n            for i in range(p2, n + 1, p):\n                numbers[i] = False\n        p += 1\n        p2 = p * p\n    return [2] + [number for number in range(3, n + 1, 2) if numbers[number]]\n\ndef factorization(n, primeslist=None):\n    pf = []\n    if primeslist == None:\n        primeslist = eratosthenes(int(sqrt(n)) + 1)\n    for p in primeslist:\n        if p * p > n:\n            break\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        if count > 0:\n            pf.append((p, count))\n    if n > 1:\n        pf.append((n, 1))\n    return pf\n\ndef solve(N, A, primeslist):\n    P = len(primeslist)\n    prime = {p: [] for p in primeslist}\n    for a in A:\n        for (p, c) in factorization(a, primeslist):\n            prime[p].append(c)\n    A = [1] * N\n    for p in prime:\n        for (i, c) in enumerate(sorted(prime[p], reverse=True)):\n            A[i] *= p ** c\n    return sum(A) % MODULO\nT = int(input().strip())\nprimeslist = eratosthenes(MAX)\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A, primeslist))", "from math import sqrt\nfrom sys import stdin\ninput = stdin.readline\nMODULO = 10 ** 9 + 7\nMAX = 10 ** 6\n\ndef eratosthenes(n):\n    numbers = [True] * (n + 1)\n    (p, p2) = (2, 4)\n    while p2 <= n:\n        if numbers[p]:\n            for i in range(p2, n + 1, p):\n                numbers[i] = False\n        p += 1\n        p2 = p * p\n    return [2] + [number for number in range(3, n + 1, 2) if numbers[number]]\n\ndef factorization(n, primeslist=None):\n    pf = []\n    if primeslist == None:\n        primeslist = eratosthenes(int(sqrt(n)) + 1)\n    for p in primeslist:\n        if p * p > n:\n            break\n        count = 0\n        while n % p == 0:\n            n //= p\n            count += 1\n        if count > 0:\n            pf.append((p, count))\n    if n > 1:\n        pf.append((n, 1))\n    return pf\n\ndef solve(N, A, primeslist):\n    P = len(primeslist)\n    index = {primeslist[i]: i for i in range(P)}\n    prime = {p: [] for p in primeslist}\n    for a in A:\n        for (p, c) in factorization(a, primeslist):\n            prime[p].append(c)\n    A = [1] * N\n    for p in prime:\n        for (i, c) in enumerate(sorted(prime[p], reverse=True)):\n            A[i] *= p ** c\n    return sum(A) % MODULO\nT = int(input().strip())\nprimeslist = eratosthenes(MAX)\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A, primeslist))"]