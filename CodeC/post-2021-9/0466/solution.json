["def sol():\n    (a, b, c) = map(int, input().split())\n    for i in range(31):\n        if a == b and b == c:\n            return 'YES'\n        bit = 1 << i\n        cnt = (a & bit != 0) + (b & bit != 0) + (c & bit != 0)\n        if cnt == 0 or cnt == 3:\n            return 'NO'\n        elif cnt == 2:\n            if a & bit == 0:\n                a += bit\n            elif b & bit == 0:\n                b += bit\n            else:\n                c += bit\n        elif a & bit:\n            a += bit\n        elif b & bit:\n            b += bit\n        else:\n            c += bit\n    return 'NO'\nfor i in range(int(input())):\n    print(sol())", "def sol():\n    (a, b, c) = map(int, input().split())\n    for i in range(31):\n        if a == b and b == c:\n            return 'YES'\n        bit = 1 << i\n        cnt = (a & bit != 0) + (b & bit != 0) + (c & bit != 0)\n        if cnt == 0 or cnt == 3:\n            return 'NO'\n        elif cnt == 2:\n            if a & bit == 0:\n                a += bit\n            elif b & bit == 0:\n                b += bit\n            else:\n                c += bit\n        elif a & bit:\n            a += bit\n        elif b & bit:\n            b += bit\n        else:\n            c += bit\n    return 'NO'\nfor i in range(int(input())):\n    print(sol())", "def sol():\n    (a, b, c) = map(int, input().split())\n    for i in range(31):\n        if a == b and b == c:\n            return 'YES'\n        bit = 1 << i\n        cnt = (a & bit != 0) + (b & bit != 0) + (c & bit != 0)\n        if cnt == 0 or cnt == 3:\n            return 'NO'\n        elif cnt == 2:\n            if a & bit == 0:\n                a += bit\n            elif b & bit == 0:\n                b += bit\n            else:\n                c += bit\n        elif a & bit:\n            a += bit\n        elif b & bit:\n            b += bit\n        else:\n            c += bit\n    return 'NO'\nfor i in range(int(input())):\n    print(sol())", "n = int(input())\nfor _ in range(n):\n    (A, B, C) = map(int, input().split())\n    for i in range(33):\n        if A == B == C:\n            print('YES')\n            break\n        elif A == B < C or A == C < B or B == C < A:\n            print('NO')\n            break\n        bit = 2 ** i\n        A_bit = A & bit\n        B_bit = B & bit\n        C_bit = C & bit\n        if A_bit == B_bit == C_bit:\n            print('NO')\n            break\n        elif A_bit == B_bit:\n            C += bit\n        elif B_bit == C_bit:\n            A += bit\n        elif A_bit == C_bit:\n            B += bit", "import bisect\nimport os, sys, math\nfrom io import BytesIO, IOBase\nfrom collections import defaultdict, deque\nip = lambda : input()\nit = lambda : int(input())\nma = lambda : map(int, input().split())\nli = lambda : list(map(int, input().split()))\nMOD = 10 ** 9 + 7\nMD = 998244353\nmod = 100007\nMIL = 1000000\ninf = float('inf')\nye = 'YES'\nne = 'NO'\n\ndef diff(a, b, c):\n    if a != b:\n        return True\n    if b != c:\n        return True\n    return False\nfor _ in range(it()):\n    (a, b, c) = ma()\n    ans = ye\n    i = 1\n    while diff(a, b, c):\n        (e, f) = (min(a, b, c), max(a, b, c))\n        g = a + b + c - e - f\n        if e == g and e != f:\n            ans = ne\n            break\n        w = 0\n        if i & a:\n            w += 1\n        if i & b:\n            w += 1\n        if i & c:\n            w += 1\n        if w == 0 or w == 3:\n            ans = ne\n            break\n        if w == 1:\n            if i & a > 0:\n                a += i\n            elif i & b > 0:\n                b += i\n            else:\n                c += i\n            i *= 2\n        else:\n            if i & a == 0:\n                a += i\n            elif i & b == 0:\n                b += i\n            else:\n                c += i\n            i *= 2\n    print(ans)", "from math import log2\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    mask = 1\n    for i in range(int(log2(max(a, b, c))) + 2):\n        if a & mask != b & mask == c & mask:\n            a += mask\n        elif a & mask == b & mask != c & mask:\n            c += mask\n        elif a & mask == c & mask != b & mask:\n            b += mask\n        else:\n            break\n        mask <<= 1\n    print(['NO', 'YES'][a == b == c])", "from math import log2\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    m = max(a, b, c)\n    mp = int(log2(m)) + 2\n    s = 1\n    for i in range(mp):\n        if a & s != b & s == c & s:\n            a += s\n        elif b & s != a & s == c & s:\n            b += s\n        elif c & s != b & s == a & s:\n            c += s\n        else:\n            break\n        s <<= 1\n    if a == b == c:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    mask = 1\n    for i in range(64):\n        if a & mask != b & mask == c & mask:\n            a += mask\n        elif b & mask != a & mask == c & mask:\n            b += mask\n        elif c & mask != b & mask == a & mask:\n            c += mask\n        else:\n            break\n        mask <<= 1\n    if a == b == c:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nfrom collections import Counter\nimport math\nimport bisect\n\nclass dsu:\n\n    def __init__(self):\n        self.parent = defaultdict(int)\n        self.size = [0] * (n + 1)\n\n    def start(self):\n        for i in range(1, n + 1):\n            self.parent[i] = i\n\n    def find(self, x):\n        if x != self.parent[x]:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, u, v):\n        (u, v) = (self.find(u), self.find(v))\n        if u != v:\n            self.parent[v] = u\n\n    def treeinput(self, m):\n        for i in range(m):\n            (u, v) = map(int, input().split())\n            self.union(u, v)\n\n    def printt(self):\n        print(self.parent)\n\ndef setbit(arr):\n    mask = 1\n    bit = [0] * 32\n    for i in range(32):\n        for k in arr:\n            if k & mask:\n                bit[i] += 1\n        mask <<= 1\n    return bit\n\ndef prefix_sum(nums):\n    prefix = [0]\n    for i in range(len(nums)):\n        prefix.append(prefix[-1] + nums[i])\n    return prefix\n\ndef mx_lensubarray(nums):\n    res = 0\n    j = 0\n    mp = defaultdict(int)\n    prefix = prefixsum(nums)\n    mxSum = 0\n    for i in range(len(nums)):\n        if nums[i] in mp:\n            temp = mp[nums[i]]\n        else:\n            temp = 0\n        j = max(temp, j)\n        mp[nums[i]] = i + 1\n        res = max(res, i - j + 1)\n        mxSum = max(mxSum, prefix[i + 1] - prefix[j])\n    return res\n\ndef lenOfLongSubarr(self, A, N, k):\n    mp = {}\n    sm = 0\n    mxlen = 0\n    for i in range(N):\n        sm += A[i]\n        if sm == k:\n            mxlen = i + 1\n        if sm - k in mp:\n            mxlen = max(mxlen, i - mp[sm - k])\n        if sm not in mp:\n            mp[sm] = i\n    return mxlen\n\ndef no_of_factor(s):\n    while i <= s ** 0.5:\n        if not s % i:\n            cnt = cnt + 1 if s / i == i else cnt + 2\n    i += 1\n    return cnt\n\ndef primes(n):\n    arr = []\n    i = 2\n    while i * i <= n:\n        if not n % i:\n            cnt = 0\n            while not n % i:\n                cnt += 1\n                n //= i\n            arr.append([i, cnt])\n        i += 1\n    if n > 1:\n        arr.append([n, 1])\n    return arr\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    res = []\n    for i in range(2, n + 1):\n        if prime[i]:\n            res.append(i)\n    return res\n\ndef treeinput():\n    adj = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\ndef dfs_size(node, parent):\n    sum_size[node] = 1\n    for child in adj[node]:\n        if child != parent:\n            dfs_size(child, node)\n            sum_size[node] += sum_size[child]\n\ndef anda(arr):\n    res = arr[0]\n    for i in arr:\n        res &= i\n    return res\n\ndef ora(arr):\n    res = arr[0]\n    for i in arr:\n        res |= i\n    return res\n\ndef xora(arr):\n    res = 0\n    for i in arr:\n        res ^= i\n    return res\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    mask = 1\n    for i in range(64):\n        if a & mask != b & mask == c & mask:\n            a += mask\n        elif b & mask != a & mask == c & mask:\n            b += mask\n        elif c & mask != b & mask == a & mask:\n            c += mask\n        else:\n            break\n        mask <<= 1\n    if a == b == c:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    isSame = False\n    for i in range(40):\n        if a == b and b == c:\n            isSame = True\n            break\n        (x, y, z) = (a >> i & 1, b >> i & 1, c >> i & 1)\n        bitSum = x + y + z\n        if bitSum == 2:\n            if not x:\n                a += 1 << i\n            if not y:\n                b += 1 << i\n            if not z:\n                c += 1 << i\n        elif bitSum == 1:\n            if x:\n                a += 1 << i\n            if y:\n                b += 1 << i\n            if z:\n                c += 1 << i\n        else:\n            break\n    if isSame:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t:\n    (a, b, c) = map(int, input().split())\n    poss = False\n    for i in range(40):\n        if a == b and b == c:\n            poss = True\n            break\n        ct = (a >> i & 1) + (b >> i & 1) + (c >> i & 1)\n        if ct == 2:\n            if a >> i & 1 == 0:\n                a += 1 << i\n            if b >> i & 1 == 0:\n                b += 1 << i\n            if c >> i & 1 == 0:\n                c += 1 << i\n        elif ct == 1:\n            if a >> i & 1:\n                a += 1 << i\n            if b >> i & 1:\n                b += 1 << i\n            if c >> i & 1:\n                c += 1 << i\n        else:\n            break\n    if poss:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "def bits(a, bit):\n    if a & bit > 0:\n        return 1\n    else:\n        return 0\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    flag = True\n    for i in range(31):\n        if a == b == c:\n            break\n        bit = 1 << i\n        cnt = bits(a, bit) + bits(b, bit) + bits(c, bit)\n        if cnt == 0 or cnt == 3:\n            flag = False\n            break\n        elif cnt == 1:\n            if a & bit > 0:\n                a += bit\n            elif b & bit > 0:\n                b += bit\n            else:\n                c += bit\n        elif a & bit == 0:\n            a += bit\n        elif b & bit == 0:\n            b += bit\n        else:\n            c += bit\n        if a & bit != b & bit and a & bit != c & bit:\n            flag = False\n            break\n    if flag and a == b and (b == c):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    run = True\n    for i in range(31):\n        if a == b and b == c:\n            break\n        bit = 1 << i\n        cnt = 0\n        if a & bit:\n            cnt += 1\n        if b & bit:\n            cnt += 1\n        if c & bit:\n            cnt += 1\n        if cnt == 0 or cnt == 3:\n            run = False\n            break\n        if cnt == 1:\n            if a & bit:\n                a += bit\n            elif b & bit:\n                b += bit\n            else:\n                c += bit\n        elif a & bit == 0:\n            a += bit\n        elif b & bit == 0:\n            b += bit\n        else:\n            c += bit\n    if run and a == b == c:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    run = True\n    for i in range(31):\n        if a == b and b == c:\n            break\n        bit = 1 << i\n        cnt = 0\n        if a & bit:\n            cnt += 1\n        if b & bit:\n            cnt += 1\n        if c & bit:\n            cnt += 1\n        if cnt == 0 or cnt == 3:\n            run = False\n            break\n        if cnt == 1:\n            if a & bit:\n                a += bit\n            elif b & bit:\n                b += bit\n            else:\n                c += bit\n        elif a & bit == 0:\n            a += bit\n        elif b & bit == 0:\n            b += bit\n        else:\n            c += bit\n    if run and a == b == c:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    run = True\n    for i in range(31):\n        if a == b and b == c:\n            break\n        bit = 1 << i\n        cnt = 0\n        if a & bit:\n            cnt += 1\n        if b & bit:\n            cnt += 1\n        if c & bit:\n            cnt += 1\n        if cnt == 0 or cnt == 3:\n            run = False\n            break\n        if cnt == 1:\n            if a & bit:\n                a += bit\n            elif b & bit:\n                b += bit\n            else:\n                c += bit\n        elif a & bit == 0:\n            a += bit\n        elif b & bit == 0:\n            b += bit\n        else:\n            c += bit\n    if run and a == b == c:\n        print('YES')\n    else:\n        print('NO')", "def solve(a, b, c):\n    flag = True\n    for i in range(0, 31):\n        if a == b and b == c:\n            break\n        x = 1 << i\n        cnt = (x & a != 0) + (x & b != 0) + (x & c != 0)\n        if cnt == 0 or cnt == 3:\n            flag = False\n            break\n        elif cnt == 1:\n            if x & a:\n                a += x\n            elif x & b:\n                b += x\n            else:\n                c += x\n        elif x & a == 0:\n            a += x\n        elif x & b == 0:\n            b += x\n        else:\n            c += x\n    if flag and a == b and (b == c):\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = list(map(int, input().split()))\n    solve(a, b, c)", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    flag = True\n    for i in range(31):\n        if a == b == c:\n            break\n        bit = 1 << i\n        cnt = (a & bit != 0) + (b & bit != 0) + (c & bit != 0)\n        if cnt in (0, 3):\n            flag = False\n            break\n        elif cnt == 1:\n            if a & bit:\n                a += bit\n            elif b & bit:\n                b += bit\n            else:\n                c += bit\n        elif a & bit == 0:\n            a += bit\n        elif b & bit == 0:\n            b += bit\n        else:\n            c += bit\n    if flag and a == b == c:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (a, b, c) = map(int, input().split())\n    bit = 1\n    flag = True\n    for i in range(0, 31):\n        if a == b and b == c:\n            break\n        bit = 1 << i\n        count = (a & bit != 0) + (b & bit != 0) + (c & bit != 0)\n        if count == 0 or count == 3:\n            flag = False\n            break\n        elif count == 1:\n            if a & bit:\n                a += bit\n            elif b & bit:\n                b += bit\n            else:\n                c += bit\n        elif a & bit == 0:\n            a += bit\n        elif b & bit == 0:\n            b += bit\n        else:\n            c += bit\n    if flag and a == b and (b == c):\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    solve()", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    num = list(map(int, input().split()))\n    if num == [num[0]] * 3:\n        print('YES')\n    else:\n        bin_num = [list(bin(el)[2:]) for el in num]\n        bin_num = [list(map(int, n)) for n in bin_num]\n        mx = 0\n        for bn in bin_num:\n            mx = max(mx, len(bn))\n        mx += 1\n        for i in range(3):\n            bin_num[i] = [0] * (mx - len(bin_num[i])) + bin_num[i]\n        flag = True\n        for i in range(mx - 1, -1, -1):\n            if bin_num == [bin_num[0]] * 3:\n                break\n            bits = [el[i] for el in bin_num]\n            if bits.count(1) % 3 == 0 or (i == 0 and bits.count(1) == 1):\n                flag = False\n                break\n            elif bits.count(1) == 1:\n                ind = bits.index(1)\n                for j in range(i, -1, -1):\n                    bin_num[ind][j] = (bin_num[ind][j] + 1) % 2\n                    if bin_num[ind][j]:\n                        break\n            else:\n                ind = bits.index(0)\n                bin_num[ind][i] = 1\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "import fileinput\nwith fileinput.input() as f:\n    t = int(f.readline().strip())\n    for i in range(t):\n        (a, b, c) = [int(e) for e in f.readline().strip().split(' ', 2)]\n        while int(a == 0) + int(b == 0) + int(c == 0) < 2:\n            r = a % 2 + b % 2 + c % 2\n            if r == 0 or r == 3:\n                break\n            elif r == 1:\n                if a % 2 == 1:\n                    a += 1\n                elif b % 2 == 1:\n                    b += 1\n                elif c % 2 == 1:\n                    c += 1\n            elif r == 2:\n                if a % 2 == 0:\n                    a += 1\n                elif b % 2 == 0:\n                    b += 1\n                elif c % 2 == 0:\n                    c += 1\n            a //= 2\n            b //= 2\n            c //= 2\n        if a == b == c:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    flag = True\n    for i in range(0, 31):\n        if a == b and b == c:\n            break\n        bit = 1 << i\n        cnt = (a & bit != 0) + (b & bit != 0) + (c & bit != 0)\n        if cnt == 0 or cnt == 3:\n            flag = False\n            break\n        if cnt == 2:\n            if a & bit == 0:\n                a += bit\n            elif b & bit == 0:\n                b += bit\n            else:\n                c += bit\n        if cnt == 1:\n            if a & bit != 0:\n                a += bit\n            elif b & bit != 0:\n                b += bit\n            else:\n                c += bit\n    if flag and a == b and (b == c):\n        print('YES')\n    else:\n        print('NO')", "def set_bit(x, i):\n    if 1 << i & x:\n        return 1\n    return 0\nfor _ in range(int(input())):\n    nums = list(map(int, input().split()))\n    flag = 1\n    for i in range(31):\n        if len(set(nums)) == 1:\n            print('YES')\n            flag = 0\n            break\n        bit_sum = sum((set_bit(n, i) for n in nums))\n        if bit_sum == 3 or bit_sum == 0:\n            flag = 1\n            break\n        elif bit_sum == 1:\n            for x in range(3):\n                if set_bit(nums[x], i):\n                    nums[x] += 1 << i\n        else:\n            for x in range(3):\n                if not set_bit(nums[x], i):\n                    nums[x] += 1 << i\n    if flag:\n        print('NO')", "def solve(a, b, c):\n    temp = True\n    for i in range(0, 31):\n        if a == b and b == c:\n            break\n        bit = 1 << i\n        count = (bit & a != 0) + (bit & b != 0) + (bit & c != 0)\n        if count == 0 or count == 3:\n            temp = False\n            break\n        elif count == 1:\n            if bit & a:\n                a += bit\n            elif bit & b:\n                b += bit\n            else:\n                c += bit\n        elif bit & a == 0:\n            a += bit\n        elif bit & b == 0:\n            b += bit\n        else:\n            c += bit\n    if temp and a == b and (b == c):\n        return 'YES'\n    else:\n        return 'NO'\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = list(map(int, input().split()))\n    print(solve(a, b, c))", "for _ in range(int(input())):\n    (a, b, c) = list(map(int, input().split()))\n    flag = False\n    for i in range(40):\n        if a == b and c == b:\n            flag = True\n        else:\n            (p, q, r) = (a >> i & 1, b >> i & 1, c >> i & 1)\n            if p + q + r == 2:\n                if not p:\n                    a += 1 << i\n                if not q:\n                    b += 1 << i\n                if not r:\n                    c += 1 << i\n            elif p + q + r == 1:\n                if p == 1:\n                    a += 1 << i\n                elif q == 1:\n                    b += 1 << i\n                elif r == 1:\n                    c += 1 << i\n            else:\n                break\n    if a == b and c == b:\n        flag = True\n    else:\n        flag = False\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().strip().split(' '))\n    if a == b == c:\n        print('YES')\n        continue\n    f = 0\n    for i in range(31):\n        if a == b and b == c:\n            f = 1\n            break\n        bit = 1 << i\n        cnt = (bit & a != 0) + (bit & b != 0) + (bit & c != 0)\n        if cnt == 0 or cnt == 3:\n            break\n        elif cnt == 2:\n            if bit & a == 0:\n                a += bit\n            elif bit & b == 0:\n                b += bit\n            else:\n                c += bit\n        elif bit & a:\n            a += bit\n        elif bit & b:\n            b += bit\n        else:\n            c += bit\n    if f == 1 and (a == b and b == c):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    (a, b, c) = list(map(int, input().split()))\n    flag = True\n    for i in range(31):\n        if a == b and b == c:\n            break\n        bit = 1 << i\n        cnt = (a & bit != 0) + (b & bit != 0) + (c & bit != 0)\n        if cnt == 0 or cnt == 3:\n            flag = False\n            break\n        if cnt == 1:\n            if a & bit:\n                a += bit\n            elif b & bit:\n                b += bit\n            else:\n                c += bit\n        elif a & bit == 0:\n            a += bit\n        elif b & bit == 0:\n            b += bit\n        else:\n            c += bit\n    if flag and a == b and (a == c):\n        print('YES')\n    else:\n        print('NO')", "def ff(arr):\n    ans = 0\n    for i in range(len(arr)):\n        ans += arr[i] * 2 ** i\n    return ans\n\ndef convert(n):\n    arr = []\n    while n > 0:\n        r = n % 2\n        arr.append(r)\n        n >>= 1\n    return arr\n\ndef f(arr, n):\n    while len(arr) < n:\n        arr.append(0)\n\ndef ad(ar, br, cr, x):\n    c = 1\n    while x != len(ar) and c != 0:\n        tm = ar[x] + c\n        if tm == 1:\n            ar[x] = 1\n            c = 0\n        else:\n            ar[x] = 0\n            c = 1\n        x += 1\n    if c != 0:\n        ar.append(c)\n        br.append(0)\n        cr.append(0)\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    if a <= 0 or b <= 0 or c <= 0:\n        print('NO')\n        continue\n    ar = convert(a)\n    br = convert(b)\n    cr = convert(c)\n    s = max(len(ar), len(br), len(cr))\n    f(ar, s)\n    f(br, s)\n    f(cr, s)\n    ch = False\n    ans = True\n    i = 0\n    while i < len(ar) - 1:\n        tm = ar[i] + br[i] + cr[i]\n        if ch and (tm == 1 or tm == 2):\n            ans = False\n            break\n        if tm == 1:\n            if ar[i] == 1:\n                ad(ar, br, cr, i)\n            elif br[i] == 1:\n                ad(br, ar, cr, i)\n            elif cr[i] == 1:\n                ad(cr, ar, br, i)\n        elif tm == 2:\n            if ar[i] == 0:\n                ad(ar, br, cr, i)\n            elif br[i] == 0:\n                ad(br, ar, cr, i)\n            elif cr[i] == 0:\n                ad(cr, ar, br, i)\n        else:\n            ch = True\n        i += 1\n    x = len(ar)\n    tm = ar[x - 1] + br[x - 1] + cr[x - 1]\n    if tm == 1:\n        ans = False\n    elif tm == 2 and ch == False:\n        if ar[x - 1] == 0:\n            ar[x - 1] = 1\n        if br[x - 1] == 0:\n            br[x - 1] = 1\n        if cr[x - 1] == 0:\n            cr[x - 1] = 1\n    if ans and ar[x - 1] == br[x - 1] == cr[x - 1]:\n        print('YES')\n    else:\n        print('NO')", "import sys\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom heapq import *\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\nMAXN = 1123456\n\ndef dist(x1, x2, y1, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef mergeSort(arr, check=lambda a, b: a < b, reverse=False):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L, check, reverse)\n        mergeSort(R, check, reverse)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if check(L[i], R[j]):\n                if not reverse:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n            elif not reverse:\n                arr[k] = R[j]\n                j += 1\n            else:\n                arr[k] = L[i]\n                i += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef maxSum(arr, k):\n    max_sum = 0\n    max_cur = 0\n    for (i, num) in enumerate(arr):\n        max_cur = max(max_cur + num, num)\n        if max_cur > max_sum:\n            max_sum = max_cur\n    return max_sum\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef get_power(n, m):\n    i = 1\n    p = -1\n    while i <= n:\n        i = i * m\n        p += 1\n    return p\n\ndef fact(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n    return f\n\ndef find_closest(num, ar):\n    min_d = float('inf')\n    for num2 in ar:\n        d = abs(num2 - num)\n        if d < min_d:\n            min_d = d\n    return min_d\n\ndef check_pal(n):\n    s = str(n)\n    j = len(s) - 1\n    i = 0\n    while j > i:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef get_primes():\n    primes = [False for _ in range(MAXN + 1)]\n    used = [False for _ in range(MAXN + 1)]\n    for i in range(2, MAXN + 1):\n        if not used[i]:\n            primes[i] = True\n            for j in range(i, MAXN + 1, i):\n                used[j] = True\n    return primes\n\ndef isPrime(primes, n):\n    if primes[n]:\n        return True\n    return False\n\ndef solve(t, primes=None):\n    (a, b, c) = readInts()\n    cur = 1\n    for _ in range(31):\n        cnt = 0\n        if a & cur:\n            cnt += 1\n        if b & cur:\n            cnt += 1\n        if c & cur:\n            cnt += 1\n        if cnt == 1:\n            if a & cur:\n                a += cur\n            elif b & cur:\n                b += cur\n            else:\n                c += cur\n        elif cnt == 2:\n            if not a & cur:\n                a += cur\n            elif not b & cur:\n                b += cur\n            else:\n                c += cur\n        else:\n            break\n        cur = cur << 1\n    if a == b and b == c:\n        print('YES')\n    else:\n        print('NO')\n\ndef main():\n    t = 1\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "for n in [list(map(int, l.split())) for l in open(0)][1:]:\n    for i in range(30):\n        (k, l, m) = map(lambda x: x % 2, n)\n        if k == l == m:\n            continue\n        if [k, l, m].count(0) == 1:\n            n[[k, l, m].index(0)] += 1\n        if [k, l, m].count(1) == 1:\n            n[[k, l, m].index(1)] += 1\n        for i in range(3):\n            n[i] >>= 1\n    (a, b, c) = n\n    print('YES' if a == b == c else 'NO')", "for _ in range(int(input())):\n    n = list(map(int, input().split()))\n    for i in range(30):\n        (k, l, m) = map(lambda x: x % 2, n)\n        if k == l == m:\n            continue\n        if [k, l, m].count(0) == 1:\n            n[[k, l, m].index(0)] += 1\n        if [k, l, m].count(1) == 1:\n            n[[k, l, m].index(1)] += 1\n        for i in range(3):\n            n[i] >>= 1\n    (a, b, c) = n\n    print('YES' if a == b == c else 'NO')", "from collections import *\nN = 35\nfor _ in range(int(input())):\n    n = list(map(int, input().split()))\n    for i in range(N):\n        (k, l, m) = map(lambda x: x % 2, n)\n        if k == l == m:\n            continue\n        if [k, l, m].count(1) > 1:\n            n[[k, l, m].index(0)] += 1\n        if [k, l, m].count(0) > 1:\n            n[[k, l, m].index(1)] += 1\n        for i in range(3):\n            n[i] >>= 1\n    (a, b, c) = n\n    print('YES' if a == b == c else 'NO')", "import math\nfor i in range(int(input())):\n    (A, B, C) = map(int, input().split())\n    flag = 0\n    if A == B and B == C:\n        flag = 1\n    else:\n        for k in range(1, 61):\n            temp = 2 ** k - 1\n            x = A + B + C + temp\n            if x % 3 != 0:\n                continue\n            else:\n                x //= 3\n                temp1 = x - A\n                temp2 = x - B\n                temp3 = x - C\n                temp4 = temp1 ^ temp2 ^ temp3\n                mx = max([A, B, C])\n                if x >= mx and temp4 == temp:\n                    flag = 1\n                    break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "from math import gcd\npows = [2 ** i for i in range(31)]\n\ndef solve():\n    arr = list(map(int, input().split()))\n    arr.sort()\n    (a, b, c) = (arr[0], arr[1], arr[2])\n    ans = False\n\n    def check(a, b, c, m):\n        a = m - a\n        b = m - b\n        c = m - c\n        if b & a == 0 and a & c == 0 and (b & c == 0):\n            return True\n        return False\n\n    def heck(a, b, c, m):\n        a = m - a\n        b = m - b\n        c = m - c\n        if b & a == 0 and a & c == 0 and (b & c == 0):\n            return True\n        return False\n\n    def ck(a, b, c, m):\n        a = m - a\n        b = m - b\n        c = m - c\n        if b & a == 0 and a & c == 0 and (b & c == 0):\n            return True\n        return False\n    for i in range(31):\n        curr = sum(arr) + pows[i] - 1\n        if curr % 3 == 0:\n            if check(a, b, c, curr // 3):\n                ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')\ntry:\n    for tc in range(int(input())):\n        solve()\nexcept EOFError:\n    pass", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    ans = True\n    ar = True\n    while True:\n        if a == b and b == c:\n            break\n        cnt = 0\n        zer = 0\n        if a == 0:\n            cnt += 1\n            zer += 1\n        if b == 0:\n            cnt += 1\n            zer += 1\n        if c == 0:\n            cnt += 1\n            zer += 1\n        if cnt == 3:\n            break\n        elif zer == 2:\n            ans = False\n            break\n        if a % 2 == 0:\n            aval = 0\n        else:\n            aval = 1\n        if b % 2 == 0:\n            bval = 0\n        else:\n            bval = 1\n        if c % 2 == 0:\n            cval = 0\n        else:\n            cval = 1\n        if aval == bval and bval == cval:\n            ans = False\n            break\n        elif cval == 0 and bval == 0:\n            a += 1\n        elif bval == 0 and aval == 0:\n            c += 1\n        elif cval == 0 and aval == 0:\n            b += 1\n        a = a >> 1\n        b = b >> 1\n        c = c >> 1\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "import atexit, io, sys, math, heapq, collections\nfrom re import I\nfrom importlib.util import find_spec\nfrom turtle import clear\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef write_int(a):\n    sys.stdout.write(str(a) + '\\n')\n\ndef write_str(a):\n    sys.stdout.write(a + '\\n')\n\ndef write_list(arr):\n    sys.stdout.write(' '.join(map(str, arr)) + '\\n')\n\ndef swap(arr, a, b):\n    arr[a] ^= arr[b]\n    arr[b] ^= arr[a]\n    arr[a] ^= arr[b]\n\ndef int_len(a):\n    return math.floor(math.log(a, 10)) + 1\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef Sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    res = []\n    for i in range(2, len(prime)):\n        if prime[i]:\n            res.append(i)\n    return res\n\ndef binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid - 1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\n\ndef search(arr, x):\n    return binarySearch(arr, 0, len(arr) - 1, x)\n\ndef toString(A):\n    return ''.join(A)\n\ndef toArray(str):\n    return str.split()\n\ndef arrSum(Arr):\n    Sum = 0\n    for i in range(len(Arr)):\n        Sum += Arr[i]\n    return Sum\n\ndef computeXOR(n):\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef isSubSequence(string1, string2, m, n):\n    if m == 0:\n        return True\n    if n == 0:\n        return False\n    if string1[m - 1] == string2[n - 1]:\n        return isSubSequence(string1, string2, m - 1, n - 1)\n    return isSubSequence(string1, string2, m, n - 1)\n\ndef Sum(a, b):\n    if b.find('-') != -1:\n        return '-1'\n    L1 = len(a)\n    L2 = len(b)\n    res = ''\n    if L1 < L2:\n        a = '0' * (L2 - L1) + a\n    elif L2 < L1:\n        b = '0' * (L1 - L2) + b\n    for i in range(0, max(L1, L2)):\n        s = a[i]\n        t = b[i]\n        p = int(a[i]) + int(b[i])\n        res += str(p)\n    return res\n\ndef isPalin(s):\n    return s == s[::-1]\n\ndef nextPermutation(nums):\n    i = len(nums) - 1\n    flag = True\n    while i >= 1:\n        if nums[i] > nums[i - 1]:\n            i -= 1\n            flag = False\n            break\n        i -= 1\n    if i == 0 and flag:\n        nums.reverse()\n    else:\n        diff = 10000000\n        index = i\n        j = i\n        while j < len(nums):\n            if nums[j] > nums[i] and diff >= nums[j] - nums[i]:\n                index = j\n                diff = nums[j] - nums[i]\n            j += 1\n        temp = nums[index]\n        nums[index] = nums[i]\n        nums[i] = temp\n        nums[i + 1:] = reversed(nums[i + 1:])\n    return nums\n\ndef pairs(arr, size, n):\n    mpp = {}\n    for i in range(size):\n        if arr[i] in mpp.keys():\n            mpp[arr[i]] += 1\n        else:\n            mpp[arr[i]] = 1\n    for i in range(size):\n        if n + arr[i] in mpp.keys():\n            return True\n    return False\n\ndef lps(s):\n    a = s[-1]\n    if len(s) == 1:\n        return 0\n    elif len(s) == 2:\n        if s[0] == s[1]:\n            return 1\n        return 0\n    k = len(s) - 2\n    while k >= 0:\n        if s[k] == s[-1]:\n            if s[:k + 1] == s[len(s) - k - 1:]:\n                return k + 1\n        k -= 1\n    return 0\n\ndef check(arr):\n    i = 0\n    for i in range(len(arr) - 1):\n        if arr[i] % 2 != arr[i + 1] % 2:\n            return False\n    return True\n\ndef get_sum(mat, x, y):\n    Sum = mat[x][y]\n    i = x + 1\n    j = y + 1\n    while i < len(mat) and j < len(mat[0]):\n        Sum += mat[i][j]\n        i += 1\n        j += 1\n    i = x + 1\n    j = y - 1\n    while i < len(mat) and j >= 0:\n        Sum += mat[i][j]\n        i += 1\n        j -= 1\n    i = x - 1\n    j = y - 1\n    while i >= 0 and j >= 0:\n        Sum += mat[i][j]\n        i -= 1\n        j -= 1\n    i = x - 1\n    j = y + 1\n    while i >= 0 and j < len(mat[0]):\n        Sum += mat[i][j]\n        i -= 1\n        j += 1\n    return Sum\n\ndef get_diff(A, B):\n    ans = 0\n    for i in range(len(A)):\n        a = ord(A[i])\n        b = ord(B[i])\n        if a > b:\n            ans += a - b\n        else:\n            ans += b - a\n    return ans\n\ndef get_min(L, q):\n    low = 0\n    high = len(L) - 1\n    ans = high\n    while low <= high:\n        mid = (low + high) // 2\n        if L[mid] >= q:\n            ans = min(mid, ans)\n            high = mid - 1\n        else:\n            low = mid + 1\n    return ans\n\ndef find_cons(L):\n    low = 0\n    ans = -1\n    i = 1\n    while i < len(L):\n        res = 0\n        m = L[i - 1]\n        flag = True\n        while i < len(L) and L[i] - L[i - 1] == 1:\n            flag = False\n            res += 1\n            i += 1\n        if ans < res:\n            low = m\n            ans = res\n        i += 1\n    return (ans, low)\n\ndef gcd(a, b):\n    if a == b:\n        return a\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if ~a & 1 == 1:\n        if b & 1 == 1:\n            return gcd(a >> 1, b)\n        else:\n            return gcd(a >> 1, b >> 1) << 1\n    if ~b & 1 == 1:\n        return gcd(a, b >> 1)\n    if a > b:\n        return gcd(a - b >> 1, b)\n    return gcd(b - a >> 1, a)\n\ndef countDivisors(n):\n    i = 1\n    count = 0\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                count += 1\n            else:\n                count += 2\n        i = i + 1\n    return count\n\ndef check(mat, x, y):\n    A = [1, -1, 1, -1]\n    B = [-1, 1, 1, -1]\n    flag = True\n    for i in range(4):\n        if x + A[i] < 8 and y + B[i] < 8 and (x + A[i] >= 0) and (y + B[i] >= 0):\n            if mat[x + A[i], y + A[i]] != '#':\n                flag = False\n    return flag\n\ndef update(bits, i, Max, v):\n    l = 0\n    while v != 0:\n        if v & 1 == 1:\n            bits[i][l] = 1\n        else:\n            bits[i][l] = 0\n        if l > Max:\n            Max = l\n        v = v >> 1\n        l += 1\n    return Max\nN = get_int()\nwhile N > 0:\n    bits = []\n    for i in range(3):\n        bits.append([0] * 60)\n    arr = get_list()\n    n = 3\n    Max = 0\n    while n > 0:\n        v = arr[n - 1]\n        i = 0\n        while v != 0:\n            if v & 1 == 1:\n                bits[n - 1][i] += 1\n                if i > Max:\n                    Max = i\n            v = v >> 1\n            i += 1\n        n -= 1\n    n = 0\n    while n <= Max + 1:\n        if bits[0][n] == 0 and bits[1][n] == 0 and (bits[2][n] == 0):\n            break\n        elif bits[0][n] == 0 and bits[1][n] == 0 and (bits[2][n] == 1):\n            arr[2] += 1 << n\n            update(bits, 2, Max, arr[2])\n        elif bits[0][n] == 0 and bits[1][n] == 1 and (bits[2][n] == 0):\n            arr[1] += 1 << n\n            update(bits, 1, Max, arr[1])\n        elif bits[0][n] == 0 and bits[1][n] == 1 and (bits[2][n] == 1):\n            arr[0] += 1 << n\n            update(bits, 0, Max, arr[0])\n        elif bits[0][n] == 1 and bits[1][n] == 0 and (bits[2][n] == 0):\n            arr[0] += 1 << n\n            update(bits, 0, Max, arr[0])\n        elif bits[0][n] == 1 and bits[1][n] == 0 and (bits[2][n] == 1):\n            arr[1] += 1 << n\n            update(bits, 1, Max, arr[1])\n        elif bits[0][n] == 1 and bits[1][n] == 1 and (bits[2][n] == 0):\n            arr[2] += 1 << n\n            update(bits, 2, Max, arr[2])\n        elif bits[0][n] == 1 and bits[1][n] == 1 and (bits[2][n] == 1):\n            break\n        n += 1\n    if arr[1] == arr[2] and arr[1] == arr[0]:\n        print('YES')\n    else:\n        print('NO')\n    N -= 1", "from math import ceil\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (s1, s2, s3) = (list(bin(a)[2:]), list(bin(b)[2:]), list(bin(c)[2:]))\n    l = sorted([len(s1), len(s2), len(s3)])\n    extra = ['0'] * (l[-1] - l[0] + 4)\n    s1 = (extra + s1)[-l[-1] - 2:]\n    s2 = (extra + s2)[-l[-1] - 2:]\n    s3 = (extra + s3)[-l[-1] - 2:]\n\n    def carry(a, i):\n        for p in range(i, -1, -1):\n            if a[p] == '0':\n                a[p] = '1'\n                return a\n            else:\n                a[p] = '0'\n    ans = 'YES'\n    for i in range(l[-1] + 1, 0, -1):\n        temp = int(s1[i]) + int(s2[i]) + int(s3[i])\n        if s1 == s2 == s3:\n            break\n        if temp == 3 or temp == 0:\n            ans = 'NO'\n            break\n        elif temp == 2:\n            if s1[i] == '0':\n                s1[i] = '1'\n            elif s2[i] == '0':\n                s2[i] = '1'\n            else:\n                s3[i] = '1'\n        elif s1[i] == '1':\n            carry(s1, i)\n            s1[i] = '0'\n        elif s2[i] == '1':\n            carry(s2, i)\n            s2[i] = '0'\n        else:\n            s3 = carry(s3, i)\n    if int(s1[0]) + int(s2[0]) + int(s3[0]) != 0:\n        ans = 'NO'\n    print(ans)", "from math import gcd\npows = [2 ** i for i in range(31)]\n\ndef answer():\n    ary = list(map(int, input().split()))\n    ary.sort()\n    (a, b, c) = (ary[0], ary[1], ary[2])\n    solution = False\n\n    def how(a, b, c, m):\n        a = m - a\n        b = m - b\n        c = m - c\n        if b & a == 0 and a & c == 0 and (b & c == 0) and (8 == 8):\n            return True\n        return False\n    for i in range(31):\n        cunt = sum(ary) + pows[i] - 1\n        if cunt % 3 == 0:\n            if how(a, b, c, cunt // 3):\n                solution = True\n    if solution:\n        print('YES')\n    else:\n        print('NO')\ntry:\n    for tc in range(int(input())):\n        answer()\nexcept EOFError:\n    pass", "import sys\ninput = sys.stdin.readline\nM = int(1000000000.0) + 7\n\ndef solve():\n    l = list(map(int, input().split()))\n    while l[1] != 0:\n        ev = 0\n        for num in l:\n            ev += num % 2 == 0\n        if ev == 0 or ev == 3:\n            break\n        if ev == 2:\n            for i in range(3):\n                if l[i] % 2 == 1:\n                    l[i] += 1\n        for i in range(3):\n            l[i] //= 2\n        l.sort()\n    if len(set(l)) == 1:\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "import math\nfor _ in range(int(input())):\n    aa = list(map(int, input().split()))\n    (a, b, c) = sorted(aa)\n    ans = []\n    ok = False\n    s = sum(aa)\n    for i in range(35):\n        x = s + 2 ** i - 1\n        if x % 3 == 0:\n            ans.append([x // 3, i])\n    for x in ans:\n        xx = x[0]\n        i = x[1]\n        a1 = xx - a\n        b1 = xx - b\n        c1 = xx - c\n        if a1 & b1 == 0 and a1 & c1 == 0 and (b1 & c1 == 0):\n            ok = True\n    if ok:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef setbit(a):\n    return a >> 1\n\ndef correct(a):\n    if a == 1:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (a, b, c) = map(int, input().split())\n    i = 1\n    chk = 1\n    while True:\n        j = 0\n        for i in range(1, 2):\n            j = j & i\n        if a == b and b == c:\n            break\n        res = 0\n        if a == 0:\n            res = res + 1\n        if b == 0:\n            res = res + 1\n        if c == 0:\n            res = res + 1\n        if res == 3:\n            break\n        elif res == 2:\n            chk = 0\n            break\n        x = a & 1\n        y = b & 1\n        z = c & 1\n        gm = 6\n        if x == y and y == z:\n            if gm == 6:\n                chk = 0\n                break\n        elif x == 0 and y == 0:\n            if gm == 6:\n                c = c + 1\n        elif y == 0 and z == 0:\n            if gm == 6:\n                a = a + 1\n        elif x == 0 and z == 0:\n            if gm == 6:\n                b = b + 1\n        a = setbit(a)\n        b = setbit(b)\n        c = setbit(c)\n    if chk == 1:\n        correct(1)\n    else:\n        correct(0)", "n = int(input())\n\ndef comp(x, y, z):\n    l = [x, y, z]\n    l.sort()\n    x = l[2]\n    y = l[1]\n    z = l[0]\n    if x == y == z:\n        return 'YES'\n    if y == z or x % 2 == y % 2 == z % 2:\n        return 'NO'\n    if x % 2 + y % 2 + z % 2 == 1:\n        if x % 2 == 1:\n            x = x + 1\n        if y % 2 == 1:\n            y = y + 1\n        if z % 2 == 1:\n            z = z + 1\n    return comp(x // 2, y // 2, z // 2)\nfor i in range(n):\n    (x, y, z) = map(int, input().split())\n    print(comp(x, y, z))", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    ans = 0\n    v = 1\n    for i in range(33):\n        if a == b and b == c:\n            ans = 1\n            break\n        elif a & v == b & v and b & v == c & v:\n            break\n        elif a & v == b & v:\n            c += v\n        elif a & v == c & v:\n            b += v\n        else:\n            a += v\n        v *= 2\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef getbits(n):\n    ans = []\n    while n > 0:\n        ans.append(n % 2)\n        n = n // 2\nwhile t > 0:\n    t = t - 1\n    (a, b, c) = list(map(int, input().split()))\n    ans = 'YES'\n    while a > 0 or b > 0 or c > 0:\n        if a == b == c:\n            break\n        if a < 2 and b < 2 and (c < 2):\n            if a + b + c == 1:\n                ans = 'NO'\n                break\n            else:\n                break\n        if a % 2 + b % 2 + c % 2 == 2:\n            a = a // 2\n            b = b // 2\n            c = c // 2\n        elif a % 2 + b % 2 + c % 2 == 1:\n            a = (a + a % 2) // 2\n            b = (b + b % 2) // 2\n            c = (c + c % 2) // 2\n        else:\n            ans = 'NO'\n            break\n    print(ans)", "import math\n\ndef addToOddOneOut(l, val):\n    if l[0] == l[1] and l[1] < l[2]:\n        return None\n    if l[0] == l[2] and l[2] < l[1]:\n        return None\n    if l[2] == l[1] and l[1] < l[0]:\n        return None\n    oddOne = None\n    b0 = bin(l[0])[2:]\n    b1 = bin(l[1])[2:]\n    b2 = bin(l[2])[2:]\n    b0 = '0' * 30 + b0\n    b1 = '0' * 30 + b1\n    b2 = '0' * 30 + b2\n    pos = -1 * (val + 1)\n    if b0[pos] == b1[pos] and b0[pos] != b2[pos]:\n        oddOne = 2\n    elif b0[pos] != b1[pos] and b0[pos] == b2[pos]:\n        oddOne = 1\n    elif b0[pos] != b1[pos] and b0[pos] != b2[pos]:\n        oddOne = 0\n    if oddOne != None:\n        l[oddOne] += 2 ** val\n        return l\n    else:\n        return None\nt = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    val = 0\n    equal = False\n    while l and (not equal):\n        equal = l[0] == l[1] and l[1] == l[2]\n        l = addToOddOneOut(l, val)\n        val += 1\n    if equal:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    bits = [[0 for _ in range(64)] for _ in range(3)]\n    for i in range(32):\n        if a & 1 << i:\n            bits[0][i] += 1\n        if b & 1 << i:\n            bits[1][i] += 1\n        if c & 1 << i:\n            bits[2][i] += 1\n    if a == b == c:\n        print('YES')\n        continue\n    ans = 'YES'\n    for i in range(64):\n        if bits[0][i] == bits[1][i] == bits[2][i]:\n            if bits[0] == bits[1] == bits[2]:\n                print('YES')\n                break\n            else:\n                print('NO')\n                break\n        if bits[0][i] == 0:\n            if bits[1][i] == 0:\n                bits[2][i] = 0\n                try:\n                    j = i + 1\n                    while bits[2][j] != 0:\n                        bits[2][j] = 0\n                        j += 1\n                    bits[2][j] = 1\n                except:\n                    print('NO')\n            elif bits[2][i] == 0:\n                bits[1][i] = 0\n                try:\n                    j = i + 1\n                    while bits[1][j] != 0:\n                        bits[1][j] = 0\n                        j += 1\n                    bits[1][j] = 1\n                except:\n                    print('NO')\n            else:\n                bits[0][i] = 1\n        elif bits[1][i] == 0:\n            if bits[2][i] == 0:\n                bits[0][i] = 0\n                try:\n                    j = i + 1\n                    while bits[0][j] != 0:\n                        bits[0][j] = 0\n                        j += 1\n                    bits[0][j] = 1\n                except:\n                    print('NO')\n            else:\n                bits[1][i] = 1\n        else:\n            bits[2][i] = 1", "from math import gcd\npows = [2 ** i for i in range(31)]\n\ndef solve():\n    arr1 = list(map(int, input().split()))\n    arr1.sort()\n    (a, b, c) = (arr1[0], arr1[1], arr1[2])\n    ans = False\n\n    def check(a, b, c, s):\n        a = s - a\n        b = s - b\n        c = s - c\n        if b & a == 0 and a & c == 0 and (b & c == 0):\n            return True\n        return False\n    for i in range(31):\n        curr = sum(arr1) + pows[i] - 1\n        if curr % 3 == 0:\n            if check(a, b, c, curr // 3):\n                ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')\ntry:\n    for tc in range(int(input())):\n        solve()\nexcept EOFError:\n    pass", "t = int(input())\nfor i in range(t):\n    (a, b, c) = [int(x) for x in input().split()]\n    x = a\n    y = b\n    z = c\n    i = 0\n    while x and z or (y and x) or (y and z):\n        if a == b and b == c:\n            break\n        if a & 1 << i != 0 and b & 1 << i != 0 and (c & 1 << i == 0):\n            c += 1 << i\n            z += 1\n        elif a & 1 << i == 0 and b & 1 << i != 0 and (c & 1 << i != 0):\n            a += 1 << i\n            x += 1\n        elif a & 1 << i != 0 and b & 1 << i == 0 and (c & 1 << i != 0):\n            b += 1 << i\n            y += 1\n        elif a & 1 << i != 0 and b & 1 << i == 0 and (c & 1 << i == 0):\n            a += 1 << i\n            x += 1\n        elif a & 1 << i == 0 and b & 1 << i != 0 and (c & 1 << i == 0):\n            b += 1 << i\n            y += 1\n        elif a & 1 << i == 0 and b & 1 << i == 0 and (c & 1 << i != 0):\n            c += 1 << i\n            z += 1\n        else:\n            break\n        if a == b and b == c:\n            break\n        x >>= 1\n        y >>= 1\n        z >>= 1\n        i += 1\n    if a == b and b == c:\n        print('YES')\n    else:\n        print('NO')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor T in range(int(input())):\n    (a, b, c) = mi()\n    for i in range(32):\n        (x, y, z) = (a & 1 << i, b & 1 << i, c & 1 << i)\n        if x != y and x != z:\n            a += 2 ** i\n        elif y != x and y != z:\n            b += 2 ** i\n        elif z != x and z != y:\n            c += 2 ** i\n        else:\n            break\n    if a == b == c:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    c1 = 0\n    f = 0\n    while c1 < 32:\n        if a == b and b == c:\n            print('YES')\n            f = 1\n            break\n        val = 1 << c1\n        f1 = a & val\n        f2 = b & val\n        f3 = c & val\n        if f1 == f2 and f2 == f3:\n            print('NO')\n            f = 1\n            break\n        elif f1 == f2:\n            c = c + val\n        elif f1 == f3:\n            b = b + val\n        else:\n            a = a + val\n        c1 += 1\n    if f == 0:\n        print('NO')", "from math import gcd\npows = [2 ** i for i in range(31)]\n\ndef solve():\n    arr = list(map(int, input().split()))\n    arr.sort()\n    (a, b, c) = (arr[0], arr[1], arr[2])\n    ans = False\n\n    def check(a, b, c, m):\n        a = m - a\n        b = m - b\n        c = m - c\n        if b & a == 0 and a & c == 0 and (b & c == 0):\n            return True\n        return False\n    for i in range(31):\n        curr = sum(arr) + pows[i] - 1\n        if curr % 3 == 0:\n            if check(a, b, c, curr // 3):\n                ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')\ntry:\n    for tc in range(int(input())):\n        solve()\nexcept EOFError:\n    pass", "def solve(_in):\n    if _in[0] == _in[1] and _in[0] == _in[2]:\n        return 'YES'\n    _in.sort()\n    if _in[0] == 0:\n        if _in[1] == 0:\n            return 'NO'\n    Sum = sum(_in)\n    remainders = [x % 2 for x in _in]\n    if Sum % 3 in [0, 2] and sum(remainders) in [1, 2]:\n        if sum(remainders) == 1:\n            i = remainders.index(1)\n        else:\n            i = remainders.index(0)\n        _in[i] += 1\n        _in[1] = (_in[1] - _in[0]) // 2\n        _in[2] = (_in[2] - _in[0]) // 2\n        _in[0] = 0\n        return solve(_in)\n    else:\n        return 'NO'\nfor _ in range(int(input())):\n    _in = list(map(int, input().split()))\n    print(solve(_in))", "def fun(ar, i, nar, lar):\n    newar = ''\n    if nar == 1:\n        if i < lar:\n            c = 1\n            for x in range(i, lar):\n                if ar[x] == 0:\n                    newar += '1'\n                    c = 0\n                    for j in range(x + 1, lar):\n                        newar += str(ar[j])\n                    break\n                else:\n                    newar += '0'\n            if c == 1:\n                newar += '1'\n        else:\n            newar = '1'\n    else:\n        for x in range(i, lar):\n            newar += str(ar[x])\n    return newar\n\ndef update(a, b, c, i, na, nb, nc, la, lb, lc):\n    newa = fun(a, i, na, la)\n    newb = fun(b, i, nb, lb)\n    newc = fun(c, i, nc, lc)\n    if newa == newb and newb == newc:\n        return True\n    return False\nfor t in range(int(input())):\n    (a, b, c) = list((bin(int(i))[2:][::-1] for i in input().split()))\n    la = len(a)\n    lb = len(b)\n    lc = len(c)\n    a = [int(i) for i in a]\n    b = [int(i) for i in b]\n    c = [int(i) for i in c]\n    pa = 0\n    pb = 0\n    pc = 0\n    i = 0\n    while True:\n        if i > max(la, lb, lc) + 1:\n            print('NO')\n            break\n        if i > la - 1:\n            ca = 0\n        else:\n            ca = a[i]\n        if i > lb - 1:\n            cb = 0\n        else:\n            cb = b[i]\n        if i > lc - 1:\n            cc = 0\n        else:\n            cc = c[i]\n        na = 0\n        nb = 0\n        nc = 0\n        if pa == 1:\n            if ca == 1:\n                na = 1\n                ca = 0\n            else:\n                ca = 1\n                na = 0\n        if pb == 1:\n            if cb == 1:\n                nb = 1\n                cb = 0\n            else:\n                cb = 1\n                nb = 0\n        if pc == 1:\n            if cc == 1:\n                nc = 1\n                cc = 0\n            else:\n                cc = 1\n                nc = 0\n        if ca == cb and cb != cc:\n            if cc == 1:\n                nc = 1\n        elif cb == cc and cb != ca:\n            if ca == 1:\n                na = 1\n        elif ca == cc and cb != ca:\n            if cb == 1:\n                nb = 1\n        else:\n            if update(a, b, c, i + 1, na, nb, nc, la, lb, lc):\n                print('YES')\n            else:\n                print('NO')\n            break\n        pa = na\n        pb = nb\n        pc = nc\n        i += 1", "for h in range(int(input())):\n    (x, y, z) = map(int, input().split())\n    (i, k) = (0, 1)\n    while i < 31:\n        ze = []\n        o = []\n        if x & k == k:\n            o.append(x)\n        else:\n            ze.append(x)\n        if y & k == k:\n            o.append(y)\n        else:\n            ze.append(y)\n        if z & k == k:\n            o.append(z)\n        else:\n            ze.append(z)\n        if len(ze) == 3 or len(o) == 3:\n            break\n        elif len(ze) == 1:\n            if x == ze[0]:\n                x += k\n            elif y == ze[0]:\n                y += k\n            else:\n                z += k\n        elif x == o[0]:\n            x += k\n        elif y == o[0]:\n            y += k\n        else:\n            z += k\n        k = k << 1\n        i += 1\n    if x == y and y == z:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef solve():\n    a = list(map(int, input().split()))\n    k = 1\n    if a[0] == a[1] and a[1] == a[2]:\n        print('YES')\n        return\n    for _ in range(31):\n        ones = 0\n        if a[0] == a[1] and a[1] == a[2]:\n            print('YES')\n            return\n        for i in range(3):\n            ones += a[i] & k != 0\n        if ones == 1:\n            for i in range(3):\n                if a[i] & k != 0:\n                    a[i] += k\n        elif ones == 2:\n            for i in range(3):\n                if a[i] & k == 0:\n                    a[i] += k\n        else:\n            print('NO')\n            return\n        if a[0] == a[1] and a[1] == a[2]:\n            print('YES')\n            return\n        k <<= 1\n    print('NO')\nfor _ in range(t):\n    solve()", "for t in range(int(input())):\n    n = list(map(int, input().strip().split()))\n    p = 1\n    is_possible = True\n    while is_possible and (not n[0] == n[1] == n[2]):\n        cnt = 0\n        if n[0] & p:\n            cnt += 1\n            i = 0\n        else:\n            j = 0\n        if n[1] & p:\n            cnt += 1\n            i = 1\n        else:\n            j = 1\n        if n[2] & p:\n            cnt += 1\n            i = 2\n        else:\n            j = 2\n        if cnt == 0 or cnt == 3:\n            is_possible = False\n        elif cnt == 2:\n            n[j] += p\n        else:\n            t = p << 1\n            if n[i] < t and n[(i + 1) % 3] < t and (n[(i + 2) % 3] < t):\n                is_possible = False\n            n[i] += p\n        p <<= 1\n    print('YES' if is_possible else 'NO')", "T = int(input())\nfor case in range(T):\n    (a, b, c) = map(int, input().split(' '))\n    while True:\n        (a, b, c) = sorted([a, b, c])\n        if a % 2 == b % 2 == c % 2 or a + b + c == 1:\n            break\n        rem = (a + b + c) % 2\n        if a % 2 == rem:\n            a += 1\n        elif b % 2 == rem:\n            b += 1\n        else:\n            c += 1\n        (a, b, c) = (0, b - a, c - a)\n        (b, c) = (b // 2, c // 2)\n    print('YES' if a == b == c else 'NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    ans = 0\n    for i in range(0, 129):\n        pw2 = 2 ** i - 1\n        num = pw2 + a + b + c\n        if num % 3 == 0:\n            num = num // 3\n            if num >= max({a, b, c}):\n                (aa, bb, cc) = (num - a, num - b, num - c)\n                if aa & bb == 0 and bb & cc == 0 and (aa & cc == 0):\n                    ans = 1\n                    break\n    print(['YES', 'NO'][ans ^ 1])", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    x = min(min(a, b), c)\n    a -= x\n    b -= x\n    c -= x\n    temp = True\n    while temp:\n        if a == 0 and b == 0 and (c == 0):\n            break\n        if a == 0 and b == 0 or (b == 0 and c == 0) or (c == 0 and a == 0) or (a % 2 == b % 2 and a % 2 == c % 2):\n            temp = False\n            continue\n        if a % 2 == b % 2:\n            c += 1\n        elif a % 2 == c % 2:\n            b += 1\n        else:\n            a += 1\n        a = a >> 1\n        b = b >> 1\n        c = c >> 1\n    print('YES') if temp else print('NO')", "def win(a, b, c):\n    if a == b == c:\n        return True\n    elif (a, b, c) in [(0, 0, 1), (0, 1, 0), (1, 0, 0)]:\n        return False\n    elif a % 2 == b % 2 == c % 2:\n        return False\n    elif a % 2 == b % 2:\n        return win(a // 2, b // 2, (c + 1) // 2)\n    elif a % 2 == c % 2:\n        return win(a // 2, (b + 1) // 2, c // 2)\n    elif b % 2 == c % 2:\n        return win((a + 1) // 2, b // 2, c // 2)\nfor _ in range(int(input())):\n    (A, B, C) = map(int, input().split())\n    print({0: 'NO', 1: 'YES'}[win(A, B, C)])", "for _ in range(int(input())):\n    last = None\n    li = list(map(int, input().split()))\n    while True:\n        if li == last:\n            print('NO')\n            break\n        last = li[:]\n        if li[0] == li[1] == li[2]:\n            print('YES')\n            break\n        c0 = 0\n        c1 = 0\n        for i in li:\n            if i % 2 == 0:\n                c0 += 1\n            else:\n                c1 += 1\n        if c1 == 0 or c0 == 0:\n            print('NO')\n            break\n        for i in range(len(li)):\n            if c0 == 1:\n                li[i] = li[i] >> 1\n            elif li[i] % 2 == 1:\n                li[i] = li[i] >> 1\n                li[i] = li[i] + 1\n            else:\n                li[i] = li[i] >> 1", "for _ in range(int(input())):\n    l = list(map(int, input().split()))\n    i = 0\n    while (l[0] >> i, l[1] >> i, l[2] >> i).count(0) < 2:\n        if len(set(l)) == 1:\n            print('YES')\n            break\n        d = (l[0] >> i & 1, l[1] >> i & 1, l[2] >> i & 1)\n        if d.count(1) == 1:\n            l[d.index(1)] += 1 << i\n        elif d.count(0) == 1:\n            l[d.index(0)] += 1 << i\n        else:\n            print('NO')\n            break\n        if len(set(l)) == 1:\n            print('YES')\n            break\n        i += 1\n    else:\n        print('NO')"]