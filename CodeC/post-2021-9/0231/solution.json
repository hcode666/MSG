["import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "import math\nT = int(input())\nfor i in range(T):\n    (A, B) = map(int, input().split())\n    print(A - math.gcd(B, A))", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "def gcd(a, b):\n    k = [a, b]\n    ans = 0\n    k.sort()\n    if k[1] % k[0] == 0:\n        return k[0]\n    else:\n        return gcd(k[0], k[1] % k[0])\n\ndef lcm(a, b):\n    s = gcd(a, b)\n    return a * b // s\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    m = gcd(a, b)\n    print(abs(lcm(a, m) - gcd(b, m)))", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\nT = int(input())\nfor i in range(T):\n    (A, B) = map(int, input().split())\n    print(int(lcm(A, gcd(A, B)) - gcd(A, gcd(A, B))))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a / gcd(a, b) * b\nT = int(input())\nfor i in range(T):\n    (A, B) = map(int, input().split())\n    print(int(lcm(A, gcd(A, B)) - gcd(A, gcd(A, B))))", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = math.gcd(a, b)\n    print(a - c)", "import math\nfor t in range(int(input())):\n    (x, y) = map(int, input().split())\n    c = math.gcd(x, y)\n    print(x - c)", "t = int(input())\nimport math\nfor i in range(t):\n    nums = input().split(' ')\n    (a, b) = (int(nums[0]), int(nums[1]))\n    print(a - math.gcd(a, b))", "import math\nfor t in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = a - math.gcd(a, b)\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    c = math.gcd(a, b)\n    print(a - c)", "import math\nt = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(b, a))", "from collections import Counter\nfrom math import gcd\n\ndef inparr():\n    tmparr = [int(i) for i in input().split()]\n    return tmparr\nfor _ in range(int(input())):\n    (A, B) = inparr()\n    gcdd = gcd(A, B)\n    print(A - gcdd)", "import math\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    c = math.gcd(a, b)\n    print(a - c)", "from functools import reduce\nimport math\n\ndef vout(v):\n    return ' '.join(map(str, v))\n\ndef vin(datatype):\n    return list(map(datatype, input().split()))\n\ndef Filter(a, b):\n    return list(filter(a, b))\n\ndef Map(a, b):\n    return list(map(a, b))\n\ndef Reduce(a, b):\n    return list(reduce(a, b))\n\ndef main(is_testCases=True):\n    testCases = 1\n    if is_testCases:\n        testCases = int(input())\n    for _ in range(testCases):\n        (a, b) = vin(int)\n        print(a - math.gcd(a, b))\nmain()", "import math\nfor agsdjsdkfhfk in range(int(input())):\n    (f, k) = map(int, input().split())\n    print(f - math.gcd(f, k))", "import math\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    x = math.gcd(a, b)\n    print(a - x)", "from math import gcd\nx = int(input())\nfor i in range(x):\n    l = list(map(int, input().split()))\n    lcm = l[0]\n    gcd1 = gcd(l[0], l[1])\n    print(lcm - gcd1)", "from math import gcd\nx = int(input())\nfor i in range(x):\n    l = list(map(int, input().split()))\n    lcm = l[0]\n    gcd1 = gcd(l[0], l[1])\n    print(lcm - gcd1)", "from math import gcd\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    c = gcd(a, b)\n    print(a - c)", "import math\nt = int(input())\nfor _ in range(t):\n    (A, B) = map(int, input().split())\n    print(A - math.gcd(B, A))", "import math\nt = int(input())\nwhile t:\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))\n    t -= 1", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    k = math.gcd(a, b)\n    print(a - k)", "from math import sqrt, ceil, floor, gcd, log2\nimport sys\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, OrderedDict, deque\nfrom itertools import combinations, groupby\nfrom time import time\nfrom heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    print(n - gcd(n, m))", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    ans = math.gcd(a, b)\n    print(a - ans)", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor i in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    number = gcd(a, b)\n    print(a - number)", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    x = gcd(a, b)\n    print(a - x)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    x = gcd(a, b)\n    print(a - x)", "import math\nfor i in range(int(input())):\n    (a, b) = list(map(int, input().split()))\n    print(a - math.gcd(a, b))", "from math import gcd\nfor t in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "from math import gcd\nfor t in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "import math\nfor q in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    print(a - math.gcd(a, b))", "from math import gcd\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "import math\n\ndef solution(a, b):\n    return a - math.gcd(a, b)\n\ndef main():\n    T = int(input())\n    cases = []\n    for _ in range(T):\n        (a, b) = list(map(int, input().split()))\n        cases.append((a, b))\n    for case in cases:\n        (a, b) = case\n        print(solution(a, b))\nmain()", "import math as m\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    if a == b:\n        print(0)\n    elif a > b:\n        x = m.gcd(a, b)\n        print(a - x)\n    else:\n        x = m.gcd(a, b)\n        if x == 1:\n            print(a - 1)\n        elif x == a:\n            print(0)\n        else:\n            print(a - x)", "import math\nt = int(input())\nfor i in range(0, t):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "t = int(input())\nans = []\nimport math\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "import math\nt = int(input())\nwhile t > 0:\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))\n    t -= 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor i in range(int(input())):\n    (a, b) = map(int, input().split(' '))\n    print(a - gcd(a, b))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "from math import *\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    g = gcd(x, y)\n    print(x - g)", "def gcd(a, b):\n    if b == 0:\n        return abs(a)\n    else:\n        return gcd(b, a % b)\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "from math import *\n\ndef solve(a, b):\n    if a % b == 0:\n        return a - b\n    if b % a == 0:\n        return 0\n    return a - gcd(a, b)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(solve(a, b))", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "def LCM(a, x):\n    return abs(a * x) // GCD(a, x)\n\ndef GCD(b, x):\n    while x:\n        (b, x) = (x, b % x)\n    return abs(b)\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    x = GCD(a, b)\n    print(a - x)", "from math import gcd\nT = int(input())\nfor i in range(T):\n    (A, B) = map(int, input().split(' '))\n    print(A - gcd(A, B))", "import math\n\ndef LCM(a, x):\n    return abs(a * x) // GCD(a, x)\n\ndef GCD(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b) = map(int, input().split())\n    x = GCD(a, b)\n    print(a - x)", "import math\nfor t in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = math.gcd(a, b)\n    print(a - c)", "from math import gcd\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        (A, B) = map(int, input().split())\n        print(A - gcd(B, A))\nmain()", "def lcm(x, y):\n    if x > y:\n        (x, y) = (y, x)\n    multi = 1\n    t = y\n    while True:\n        if y % x == 0:\n            break\n        multi += 1\n        y = t * multi\n    return y\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nt = int(input())\nwhile t != 0:\n    s = list(map(int, input().split()))\n    (a, b) = (s[0], s[1])\n    print(a - gcd(a, b))\n    t += -1", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "from math import *\nfor I in range(int(input())):\n    (x, y) = list(map(int, input().split()))\n    print(x - gcd(x, y))", "from math import *\nfor I in range(int(input())):\n    (x, y) = list(map(int, input().split()))\n    print(x - gcd(y, gcd(x, y)))", "from math import gcd\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(a, b))", "import math\nt = int(input())\nfor i in range(t):\n    (a, x) = map(int, input().split())\n    print(a - math.gcd(a, x))", "from math import gcd\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "from math import gcd\nfor i in ' ' * int(input()):\n    (x, y) = map(int, input().split())\n    print(x - gcd(x, y))", "import math\nt = int(input())\nfor i in range(t):\n    l = input()\n    l = l.split()\n    a = int(l[0])\n    b = int(l[1])\n    j = 2\n    k = math.gcd(b, a)\n    print(a - k)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    l = input()\n    l = l.split()\n    a = int(l[0])\n    b = int(l[1])\n    j = 2\n    k = gcd(b, a)\n    print(a - k)", "import random\nimport math\nfrom collections import defaultdict, Counter, deque, OrderedDict\nfrom heapq import heapify, heappush, heappop\nfrom functools import lru_cache\nfrom bisect import bisect_left, bisect_right\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\nclass SegmentTree:\n\n    def __init__(self, arr, func=lambda x, y: x + y, defaultvalue=0):\n        self.n = len(arr)\n        self.segmentTree = [0] * self.n + arr\n        self.func = func\n        self.defaultvalue = defaultvalue\n        self.buildSegmentTree(arr)\n\n    def buildSegmentTree(self, arr):\n        for i in range(self.n - 1, 0, -1):\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        res = self.defaultvalue\n        while l < r:\n            if l & 1:\n                res = self.func(res, self.segmentTree[l])\n                l += 1\n            l >>= 1\n            if r & 1:\n                r -= 1\n                res = self.func(res, self.segmentTree[r])\n            r >>= 1\n        return res\n\n    def update(self, i, value):\n        i += self.n\n        self.segmentTree[i] = value\n        while i > 1:\n            i >>= 1\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parents = list(range(n))\n\n    def find(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            self.parents[x] = y\ndire = [0, 1, 0, -1, 0]\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef case(t):\n    print('Case #{}:'.format(t), end=' ')\nRANDOM = random.randrange(2 ** 62)\n\ndef Wrapper(x):\n    return x ^ RANDOM\n\ndef solve():\n    (a, b) = map(int, input().split())\n    print(a - math.gcd(b, a))\nfor t in range(int(input())):\n    solve()", "import math\nt = int(input())\nfor i in range(t):\n    (x, y) = input().split()\n    x = int(x)\n    y = int(y)\n    hcf = math.gcd(x, y)\n    print(x - hcf)", "def gcd(m, n):\n    (a, b) = (max(m, n), min(m, n))\n    if a % b == 0:\n        return b\n    else:\n        return gcd(b, a % b)\nT = int(input())\nwhile T != 0:\n    (a, b) = list(map(int, input().split()))\n    x = gcd(a, b)\n    lcm = a // gcd(a, x) * x\n    g = gcd(b, x)\n    print(lcm - g)\n    T -= 1", "from math import gcd\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))", "import math\n\ndef ans(arr):\n    return arr[0] - math.gcd(arr[0], arr[1])\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = list(map(int, input().split()))\n    print(ans(d))\n    test_cases -= 1", "from math import gcd\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(a - gcd(a, b))"]