["MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nT = int(input())\nfor i in range(T):\n    (N, K) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c = cpraid.count(0)\n    for i in range(N - c + 1):\n        K += i * C(N - i, c) % MOD\n    ans = K * (c + 1) * cpraid1[N - c] * cpraid1[c] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nT = int(input())\nfor i in range(T):\n    (N, K) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c = cpraid.count(0)\n    for i in range(N - c + 1):\n        K += i * C(N - i, c) % MOD\n    ans = K * (c + 1) * cpraid1[N - c] * cpraid1[c] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nT = int(input())\nfor i in range(T):\n    (N, K) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c = cpraid.count(0)\n    for i in range(N - c + 1):\n        K += i * C(N - i, c) % MOD\n    ans = K * (c + 1) * cpraid1[N - c] * cpraid1[c] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nT = int(input())\nfor i in range(T):\n    (N, K) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c = cpraid.count(0)\n    for i in range(N - c + 1):\n        K += i * C(N - i, c) % MOD\n    ans = K * (c + 1) * cpraid1[N - c] * cpraid1[c] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "def dwr(x, y):\n    if x < 0 or y > x:\n        return 0\n    return aditya[x] * dora[y] % motu * dora[x - y] % motu\nmotu = 998244353\ndora = [0] * 1000001\nbolu = [0] * 1000001\naditya = [0] * 1000001\naditya[0] = bolu[0] = bolu[1] = dora[0] = dora[1] = 1\nfor i in range(1, 1000001):\n    aditya[i] = aditya[i - 1] * i % motu\nfor i in range(2, 1000001):\n    bolu[i] = motu - motu // i * bolu[motu % i] % motu\nfor i in range(2, 1000001):\n    dora[i] = dora[i - 1] * bolu[i] % motu\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * dwr(c1 + c - i, c)) % motu\n    print((((r * (c + 1) - dwr(c1 + c - 2, c - 1)) % motu + motu) % motu + dwr(c1 + c - 2, c - 1)) * aditya[c1] % motu * aditya[c] % motu)", "MOD = 998244353\na = [1] * 100001\nb = [1] * 100001\nc = [1] * 100001\nfor i in range(2, 100001):\n    a[i] = a[i - 1] * i % MOD\n    b[i] = MOD - MOD // i * b[MOD % i] % MOD\n    c[i] = c[i - 1] * b[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else a[x] * c[y] * c[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    A = list(map(int, input().split()))\n    C0 = A.count(0)\n    for i in range(n - C0 + 1):\n        t += i * C(n - i, C0) % MOD\n    ans = t * (C0 + 1) * a[n - C0] * a[C0] % MOD\n    print(ans)", "MOD = 998244353\na = [1] * 100001\nb = [1] * 100001\nc = [1] * 100001\nfor i in range(2, 100001):\n    a[i] = a[i - 1] * i % MOD\n    b[i] = MOD - MOD // i * b[MOD % i] % MOD\n    c[i] = c[i - 1] * b[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else a[x] * c[y] * c[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    A = list(map(int, input().split()))\n    C0 = A.count(0)\n    for i in range(n - C0 + 1):\n        t += i * C(n - i, C0) % MOD\n    ans = t * (C0 + 1) * a[n - C0] * a[C0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\nfact = [0] * (10 ** 5 + 10)\ninv_fact = [0] * (10 ** 5 + 10)\nfact[0] = inv_fact[0] = 1\nfor i in range(1, 10 ** 5 + 10):\n    fact[i] = fact[i - 1] * i % M1\n    inv_fact[i] = pow(fact[i], M1 - 2, M1)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        k = 0\n        for i in range(n):\n            if arr[i]:\n                k += 1\n        if k == 0:\n            print(0)\n            continue\n        ans = fact[k] * fact[n - k + 1] * fact[n + 1] * inv_fact[k - 1] * inv_fact[n - k + 2] % M1\n        print(ans)\nmain()", "from itertools import permutations\nimport math\nm = 998244353\nk = 100001\nf1 = [1] * k\nf2 = [1] * k\nf3 = [1] * k\nfor i in range(2, k):\n    f1[i] = f1[i - 1] * i % m\nfor i in range(2, k):\n    f2[i] = m - m // i * f2[m % i] % m\nfor i in range(2, k):\n    f3[i] = f3[i - 1] * f2[i] % m\nS = lambda x, y: f1[x] * f3[y] * f3[x - y] % m\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = a.count(0)\n    c1 = a.count(1)\n    c2 = math.factorial(c0) * math.factorial(c1)\n    q = 0\n    for i in range(c1 + 1):\n        if n - i >= 0 or n - i >= c0:\n            q += i * S(n - i, c0) % m\n    print((c0 + 1) * q * c2 % m)", "from itertools import permutations\nimport math\nm = 998244353\nk = 100001\nf1 = [1] * k\nf2 = [1] * k\nf3 = [1] * k\nfor i in range(2, k):\n    f1[i] = f1[i - 1] * i % m\nfor i in range(2, k):\n    f2[i] = m - m // i * f2[m % i] % m\nfor i in range(2, k):\n    f3[i] = f3[i - 1] * f2[i] % m\nS = lambda x, y: f1[x] * f3[y] * f3[x - y] % m\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = a.count(0)\n    c1 = a.count(1)\n    c2 = math.factorial(c0) * math.factorial(c1)\n    q = 0\n    for i in range(c1 + 1):\n        if n - i >= 0 or n - i >= c0:\n            q += i * S(n - i, c0) % m\n    print((c0 + 1) * q * c2 % m)", "from itertools import permutations\nimport math\nm = 998244353\nk = 100001\nf1 = [1] * k\nf2 = [1] * k\nf3 = [1] * k\nfor i in range(2, k):\n    f1[i] = f1[i - 1] * i % m\nfor i in range(2, k):\n    f2[i] = m - m // i * f2[m % i] % m\nfor i in range(2, k):\n    f3[i] = f3[i - 1] * f2[i] % m\nS = lambda x, y: f1[x] * f3[y] * f3[x - y] % m\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = a.count(0)\n    c1 = a.count(1)\n    c2 = math.factorial(c0) * math.factorial(c1)\n    q = 0\n    for i in range(c1 + 1):\n        if n - i >= 0 or n - i >= c0:\n            q += i * S(n - i, c0) % m\n    print((c0 + 1) * q * c2 % m)", "import numpy as np\nMOD = 998244353\nMAXN = 10 ** 5 * 2\n(f, finv, inv) = ([1] * (MAXN + 10), [1] * (MAXN + 10), [1] * (MAXN + 10))\nfor i in range(2, MAXN + 1):\n    f[i] = f[i - 1] * i % MOD\n    inv[i] = -(MOD // i) * inv[MOD % i] % MOD\n    finv[i] = finv[i - 1] * inv[i] % MOD\n\ndef C(n, k):\n    if n < 0 or k < 0 or n < k:\n        return 0\n    else:\n        return f[n] * finv[k] % MOD * finv[n - k] % MOD\nfor _ in range(int(input())):\n    N = int(input())\n    A = [*map(int, input().split())]\n    (zero, one, ans) = (A.count(0), A.count(1), 0)\n    A = np.array(A)\n    if zero == 0:\n        print(N * (N + 1) * f[one] % MOD * inv[2] % MOD)\n        continue\n    for i in range(1, one + 1):\n        now = (zero + 1) * (i * (i + 1) // 2) % MOD * C(zero + one - i - 1, one - i) % MOD * f[zero] * f[one] % MOD\n        ans = (ans + now) % MOD\n    print(ans)", "from itertools import permutations\nimport math\nm = 998244353\nk = 100001\nf1 = [1] * k\nf2 = [1] * k\nf3 = [1] * k\nfor i in range(2, k):\n    f1[i] = f1[i - 1] * i % m\nfor i in range(2, k):\n    f2[i] = m - m // i * f2[m % i] % m\nfor i in range(2, k):\n    f3[i] = f3[i - 1] * f2[i] % m\nS = lambda x, y: f1[x] * f3[y] * f3[x - y] % m\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c0 = a.count(0)\n    c1 = a.count(1)\n    c2 = math.factorial(c0) * math.factorial(c1)\n    q = 0\n    for i in range(c1 + 1):\n        if n - i >= 0 or n - i >= c0:\n            q += i * S(n - i, c0) % m\n    print((c0 + 1) * q * c2 % m)", "import sys\nimport os\nimport math\nimport collections\nMod = 998244353\n\ndef dp(A):\n    B = [1] * (3 * A)\n    for i in range(2, A):\n        B[i] = B[i - 1] * i % Mod\n        B[i + A] = Mod - int(Mod / i) * B[Mod % i + A] % Mod\n        B[i + 2 * A] = B[i - 1 + 2 * A] * B[i + A] % Mod\n    return B\n\ndef Comeon(x, y):\n    return B[x] * B[y + 2 * A] * B[x - y + 2 * A] % Mod\nT = int(input())\nA = 100001\nB = dp(A)\nfor _ in range(T):\n    N = int(input())\n    C = list(map(int, input().split()))\n    (D, E) = (0, C.count(0))\n    for i in range(N - E, -1, -1):\n        D += i * Comeon(N - i, E) % Mod\n    F = D * (E + 1) * B[N - E] * B[E] % Mod\n    print(F)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "def dwr(x, y):\n    if x < 0 or y > x:\n        return 0\n    return aditya[x] * dora[y] % motu * dora[x - y] % motu\nmotu = 998244353\ndora = [0] * 1000001\nbolu = [0] * 1000001\naditya = [0] * 1000001\naditya[0] = bolu[0] = bolu[1] = dora[0] = dora[1] = 1\nfor i in range(1, 1000001):\n    aditya[i] = aditya[i - 1] * i % motu\nfor i in range(2, 1000001):\n    bolu[i] = motu - motu // i * bolu[motu % i] % motu\nfor i in range(2, 1000001):\n    dora[i] = dora[i - 1] * bolu[i] % motu\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * dwr(c1 + c - i, c)) % motu\n    print((((r * (c + 1) - dwr(c1 + c - 2, c - 1)) % motu + motu) % motu + dwr(c1 + c - 2, c - 1)) * aditya[c1] % motu * aditya[c] % motu)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    a = tuple(map(int, input().split())).count(0)\n    for i in range(n - a + 1):\n        if not (n - i < 0 or a > n - i):\n            t += i * C(n - i, a) % MOD\n    print(t * (a + 1) * dp[n - a] * dp[a] % MOD)", "M = 998244353\narr1 = [0] * 1000010\narr2 = [0] * 1000010\narr3 = [0] * 1000010\narr1[0] = arr2[0] = arr2[1] = arr3[0] = arr3[1] = 1\nfor i in range(1, 1000001):\n    arr1[i] = arr1[i - 1] * i % M\nfor i in range(2, 1000001):\n    arr2[i] = M - M // i * arr2[M % i] % M\nfor i in range(2, 1000001):\n    arr3[i] = arr3[i - 1] * arr2[i] % M\n\ndef func(a, b):\n    if a < 0 or b > a:\n        return 0\n    return arr1[a] * arr3[b] % M * arr3[a - b] % M\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    x = y = z = 0\n    for i in range(N):\n        if A[i] == 0:\n            x += 1\n        else:\n            y += 1\n    for i in range(y + 1):\n        z = (z + i * func(y + x - i, x)) % M\n    print((((z * (x + 1) - func(y + x - 2, x - 1)) % M + M) % M + func(y + x - 2, x - 1)) * arr1[y] % M * arr1[x] % M)", "e = 100001\n(d, m) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    d[i] = d[i - 1] * i % m\n    d[i + e] = m - m // i * d[m % i + e] % m\n    d[i + 2 * e] = d[i - 1 + 2 * e] * d[i + e] % m\nC = lambda x, y: d[x] * d[y + 2 * e] * d[x - y + 2 * e] % m\nfor _ in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % m\n    print(t * (c0 + 1) * d[n - c0] * d[c0] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f(c1 + c - 2, c - 1)) % m + m) % m + f(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f(c1 + c - 2, c - 1)) % m + m) % m + f(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "global fac, inv, f_inv, mod\nfac = [0] * 100001\ninv = [0] * 100001\nf_inv = [0] * 100001\nmod = 998244353\n\ndef Func(x, y):\n    if x < 0 or y > x:\n        return 0\n    return fac[x] * f_inv[y] % mod * f_inv[x - y] % mod\nfac[0] = inv[0] = inv[1] = f_inv[0] = f_inv[1] = 1\nfor i in range(1, 100001):\n    fac[i] = fac[i - 1] * i % mod\nfor i in range(2, 100001):\n    inv[i] = mod - mod // i * inv[mod % i] % mod\nfor i in range(2, 100001):\n    f_inv[i] = f_inv[i - 1] * inv[i] % mod\nt = int(input())\nwhile t:\n    count_zero = count_one = a = 0\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    for i in range(n):\n        if arr[i] == 0:\n            count_zero += 1\n        else:\n            count_one += 1\n    for i in range(count_one + 1):\n        a = (a + i * Func(count_one + count_zero - i, count_zero)) % mod\n    ans = (((a * (count_zero + 1) - Func(count_one + count_zero - 2, count_zero - 1)) % mod + mod) % mod + Func(count_one + count_zero - 2, count_zero - 1)) * fac[count_one] % mod * fac[count_zero] % mod\n    print(ans)\n    t -= 1", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f(c1 + c - 2, c - 1)) % m + m) % m + f(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "m = 998244353\na_li = [0] * 1000001\nb_li = [0] * 1000001\nd_li = [0] * 1000001\n\ndef sol(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a_li[x] * d_li[y] % m * d_li[x - y] % m\na_li[0] = b_li[0] = b_li[1] = d_li[0] = d_li[1] = 1\nfor i in range(1, 1000001):\n    a_li[i] = a_li[i - 1] * i % m\nfor j in range(2, 1000001):\n    b_li[j] = m - m // j * b_li[m % j] % m\nfor k in range(2, 1000001):\n    d_li[k] = d_li[k - 1] * b_li[k] % m\no = int(input())\nfor _ in range(o):\n    n = int(input())\n    li = list(map(int, input().split()))\n    u = v = r = 0\n    for i in range(n):\n        if li[i] == 0:\n            u += 1\n        else:\n            v += 1\n    for i in range(v + 1):\n        r = (r + i * sol(v + u - i, u)) % m\n    print((((r * (u + 1) - sol(u - 2 + v, u - 1)) % m + m) % m + sol(u - 2 + v, u - 1)) * a_li[v] % m * a_li[u] % m)", "mod = 998244353\narr1 = [1] * 100001\narr2 = [1] * 100001\narr3 = [1] * 100001\nfor i in range(2, 100001):\n    arr1[i] = arr1[i - 1] * i % mod\n    arr2[i] = mod - mod // i * arr2[mod % i] % mod\n    arr3[i] = arr3[i - 1] * arr2[i] % mod\n\ndef helper(x, y):\n    return 0 if x < 0 or y > x else arr1[x] * arr3[y] * arr3[x - y] % mod\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    inp = list(map(int, input().split()))\n    inp0 = inp.count(0)\n    for i in range(n - inp0 + 1):\n        t += i * helper(n - i, inp0) % mod\n    ans = t * (inp0 + 1) * arr1[n - inp0] * arr1[inp0] % mod\n    print(ans)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "fin = 100001\narr = [1] * (3 * fin)\nmod = 998244353\nfor i in range(2, fin):\n    arr[i] = arr[i - 1] * i % mod\n    arr[i + fin] = mod - mod // i * arr[mod % i + fin] % mod\n    arr[i + 2 * fin] = arr[i - 1 + 2 * fin] * arr[i + fin] % mod\nx = lambda a, b: arr[a] * arr[b + 2 * fin] * arr[a - b + 2 * fin] % mod\nfor _ in range(int(input())):\n    n = int(input())\n    tupc = list(map(int, input().split())).count(0)\n    temp = 0\n    for i in range(n - tupc + 1):\n        if (n - i < 0 or tupc > n - i) == False:\n            val = i * x(n - i, tupc)\n            temp += val % mod\n    print(temp * (tupc + 1) * arr[n - tupc] * arr[tupc] % mod)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\nC = lambda x, y: cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef fun(x, y):\n    if x < 0 and y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = 1\nb[0] = 1\nb[1] = 1\nd[0] = 1\nd[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = 0\n    c1 = 0\n    r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * fun(c1 + c - i, c)) % m\n    print((((r * (c + 1) - fun(c1 + c - 2, c - 1)) % m + m) % m + fun(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\n(a[0], b[0], b[1], d[0], d[1]) = (1, 1, 1, 1, 1)\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (c, c1, r) = (0, 0, 0)\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f(c1 + c - 2, c - 1)) % m + m) % m + f(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = 100001\n(vv, MOD) = ([1] * (3 * a), 998244353)\nfor i in range(2, a):\n    vv[i] = vv[i - 1] * i % MOD\n    vv[i + a] = MOD - MOD // i * vv[MOD % i + a] % MOD\n    vv[i + 2 * a] = vv[i - 1 + 2 * a] * vv[i + a] % MOD\nC = lambda x, y: vv[x] * vv[y + 2 * a] * vv[x - y + 2 * a] % MOD\nfor m in range(int(input())):\n    (k, j) = (int(input()), 0)\n    c = tuple(map(int, input().split())).count(0)\n    for i in range(k - c + 1):\n        if not (k - i < 0 or c > k - i):\n            j += i * C(k - i, c) % MOD\n    print(j * (c + 1) * vv[k - c] * vv[c] % MOD)", "hhhhhhhhhhhhhhyyyyyyyyyyyuuuuuuuuuu = [0] * 1000001\nalkjclankcnkeedkskkcnsknkskskllalaaaknakn = [0] * 1000001\nbcbhsbcdhcjdncdncjdncjdcndj = [0] * 1000001\nlllalallalllaluucuucukskkskksalkls = 998244353\n\ndef bchjbsekadkjaljdlaj(dhbcsjcksbkcaklajdla, wwowowkskwokmksmkxs):\n    if dhbcsjcksbkcaklajdla < 0 or wwowowkskwokmksmkxs > dhbcsjcksbkcaklajdla:\n        return 0\n    return hhhhhhhhhhhhhhyyyyyyyyyyyuuuuuuuuuu[dhbcsjcksbkcaklajdla] * bcbhsbcdhcjdncdncjdncjdcndj[wwowowkskwokmksmkxs] % lllalallalllaluucuucukskkskksalkls * bcbhsbcdhcjdncdncjdncjdcndj[dhbcsjcksbkcaklajdla - wwowowkskwokmksmkxs] % lllalallalllaluucuucukskkskksalkls\nhhhhhhhhhhhhhhyyyyyyyyyyyuuuuuuuuuu[0] = alkjclankcnkeedkskkcnsknkskskllalaaaknakn[1] = bcbhsbcdhcjdncdncjdncjdcndj[1] = bcbhsbcdhcjdncdncjdncjdcndj[0] = alkjclankcnkeedkskkcnsknkskskllalaaaknakn[0] = 7 * 7 - 8 * 6\nfor i in range(1, 1000001):\n    hhhhhhhhhhhhhhyyyyyyyyyyyuuuuuuuuuu[i] = hhhhhhhhhhhhhhyyyyyyyyyyyuuuuuuuuuu[i - 1] * i % lllalallalllaluucuucukskkskksalkls\nfor i in range(2, 1000001):\n    alkjclankcnkeedkskkcnsknkskskllalaaaknakn[i] = lllalallalllaluucuucukskkskksalkls - lllalallalllaluucuucukskkskksalkls // i * alkjclankcnkeedkskkcnsknkskskllalaaaknakn[lllalallalllaluucuucukskkskksalkls % i] % lllalallalllaluucuucukskkskksalkls\nfor i in range(2, 1000001):\n    bcbhsbcdhcjdncdncjdncjdcndj[i] = bcbhsbcdhcjdncdncjdncjdcndj[i - 1] * alkjclankcnkeedkskkcnsknkskskllalaaaknakn[i] % lllalallalllaluucuucukskkskksalkls\nfor dash in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = bchdbskjcakndallajlsznjaks = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            bchdbskjcakndallajlsznjaks += 1\n    for i in range(bchdbskjcakndallajlsznjaks + 1):\n        r = (r + i * bchjbsekadkjaljdlaj(bchdbskjcakndallajlsznjaks + c - i, c)) % lllalallalllaluucuucukskkskksalkls\n    print((((r * (c + 1) - bchjbsekadkjaljdlaj(bchdbskjcakndallajlsznjaks + c - 2, c - 1)) % lllalallalllaluucuucukskkskksalkls + lllalallalllaluucuucukskkskksalkls) % lllalallalllaluucuucukskkskksalkls + bchjbsekadkjaljdlaj(bchdbskjcakndallajlsznjaks + c - 2, c - 1)) * hhhhhhhhhhhhhhyyyyyyyyyyyuuuuuuuuuu[bchdbskjcakndallajlsznjaks] % lllalallalllaluucuucukskkskksalkls * hhhhhhhhhhhhhhyyyyyyyyyyyuuuuuuuuuu[c] % lllalallalllaluucuucukskkskksalkls)", "lllkkksssiiit = [0] * 1000001\nlkisyyyhhkka = [0] * 1000001\njsahdaldjlawl = [0] * 1000001\nlflsjfsoeoncoe = 998244353\n\ndef oscosnosnoeosnfe(nsjknslelnlslnc, iwisojocsnnshbd):\n    if nsjknslelnlslnc < 0 or iwisojocsnnshbd > nsjknslelnlslnc:\n        return 0\n    return lllkkksssiiit[nsjknslelnlslnc] * jsahdaldjlawl[iwisojocsnnshbd] % lflsjfsoeoncoe * jsahdaldjlawl[nsjknslelnlslnc - iwisojocsnnshbd] % lflsjfsoeoncoe\nlllkkksssiiit[0] = lkisyyyhhkka[1] = jsahdaldjlawl[1] = jsahdaldjlawl[0] = lkisyyyhhkka[0] = 7 * 7 - 8 * 6\nfor i in range(1, 1000001):\n    lllkkksssiiit[i] = lllkkksssiiit[i - 1] * i % lflsjfsoeoncoe\nfor i in range(2, 1000001):\n    lkisyyyhhkka[i] = lflsjfsoeoncoe - lflsjfsoeoncoe // i * lkisyyyhhkka[lflsjfsoeoncoe % i] % lflsjfsoeoncoe\nfor i in range(2, 1000001):\n    jsahdaldjlawl[i] = jsahdaldjlawl[i - 1] * lkisyyyhhkka[i] % lflsjfsoeoncoe\nfor dash in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = djhskfknskcnkseu = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            djhskfknskcnkseu += 1\n    for i in range(djhskfknskcnkseu + 1):\n        r = (r + i * oscosnosnoeosnfe(djhskfknskcnkseu + c - i, c)) % lflsjfsoeoncoe\n    print((((r * (c + 1) - oscosnosnoeosnfe(djhskfknskcnkseu + c - 2, c - 1)) % lflsjfsoeoncoe + lflsjfsoeoncoe) % lflsjfsoeoncoe + oscosnosnoeosnfe(djhskfknskcnkseu + c - 2, c - 1)) * lllkkksssiiit[djhskfknskcnkseu] % lflsjfsoeoncoe * lllkkksssiiit[c] % lflsjfsoeoncoe)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "(a, b, d) = ([0] * 1000001, [0] * 1000001, [0] * 1000001)\n\ndef foo(temp2, temp3):\n    if temp2 < 0 or temp3 > temp2:\n        return 0\n    return a[temp2] * d[temp3] % 998244353 * d[temp2 - temp3] % 998244353\na[0] = 1\n(b[0], b[1]) = (1, 1)\n(d[0], d[1]) = (1, 1)\ni = 1\nwhile i < 1000001:\n    a[i] = a[i - 1] * i % 998244353\n    i += 1\ni = 2\nwhile i < 1000001:\n    b[i] = 998244353 - 998244353 // i * b[998244353 % i] % 998244353\n    d[i] = d[i - 1] * b[i] % 998244353\n    i += 1\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (c, r) = (0, 0)\n    temp1 = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c = c + 1\n        else:\n            temp1 += 1\n    for i in range(temp1 + 1):\n        r = (r + i * foo(temp1 + c - i, c)) % 998244353\n    print((((r * (c + 1) - foo(temp1 + c - 2, c - 1)) % 998244353 + 998244353) % 998244353 + foo(temp1 + c - 2, c - 1)) * a[temp1] % 998244353 * a[c] % 998244353)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "m = 998244353\nfir = [0] * (10 ** 6 + 1)\nsec = [0] * (10 ** 6 + 1)\nthi = [0] * (10 ** 6 + 1)\n\ndef func(a, b):\n    if a < 0 or b > a:\n        return 0\n    return fir[a] * thi[b] % m * thi[a - b] % m\nfir[0] = sec[0] = sec[1] = thi[0] = thi[1] = 1\nfor i in range(1, 10 ** 6 + 1):\n    fir[i] = fir[i - 1] * i % m\nfor i in range(2, 10 ** 6 + 1):\n    sec[i] = m - m // i * sec[m % i] % m\n    thi[i] = thi[i - 1] * sec[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * func(c1 + c - i, c)) % m\n    print((((r * (c + 1) - func(c1 + c - 2, c - 1)) % m + m) % m + func(c1 + c - 2, c - 1)) * fir[c1] % m * fir[c] % m)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "m = 998244353\nfir = [0] * (10 ** 6 + 1)\nsec = [0] * (10 ** 6 + 1)\nthi = [0] * (10 ** 6 + 1)\n\ndef func(a, b):\n    if a < 0 or b > a:\n        return 0\n    return fir[a] * thi[b] % m * thi[a - b] % m\nfir[0] = sec[0] = sec[1] = thi[0] = thi[1] = 1\nfor i in range(1, 10 ** 6 + 1):\n    fir[i] = fir[i - 1] * i % m\nfor i in range(2, 10 ** 6 + 1):\n    sec[i] = m - m // i * sec[m % i] % m\n    thi[i] = thi[i - 1] * sec[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * func(c1 + c - i, c)) % m\n    print((((r * (c + 1) - func(c1 + c - 2, c - 1)) % m + m) % m + func(c1 + c - 2, c - 1)) * fir[c1] % m * fir[c] % m)", "(A, B, D, M) = ([0] * 1000001, [0] * 1000001, [0] * 1000001, 998244353)\n\ndef function(X, Y):\n    if X < 0 or Y > X:\n        return 0\n    return A[X] * D[Y] % M * D[X - Y] % M\nA[0] = B[0] = B[1] = D[0] = D[1] = 1\nfor i in range(1, 1000001):\n    A[i] = A[i - 1] * i % M\nfor i in range(2, 1000001):\n    B[i] = M - M // i * B[M % i] % M\nfor i in range(2, 1000001):\n    D[i] = D[i - 1] * B[i] % M\nfor j in range(int(input())):\n    N = int(input())\n    AR = list(map(int, input().split()))\n    C = C1 = R = 0\n    for i in range(N):\n        if AR[i] == 0:\n            C += 1\n        else:\n            C1 += 1\n    for i in range(C1 + 1):\n        R = (R + i * function(C1 + C - i, C)) % M\n        ANS = (((R * (C + 1) - function(C1 + C - 2, C - 1)) % M + M) % M + function(C1 + C - 2, C - 1)) * A[C1] % M * A[C] % M\n    print(ANS)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "e = 100001\n(dp, mod) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % mod\n    dp[i + e] = mod - mod // i * dp[mod % i + e] % mod\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % mod\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % mod\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % mod\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % mod)\nmod", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)", "elo = 100001\n(d, M) = ([1] * (3 * elo), 998244353)\nfor ic in range(2, elo):\n    d[ic] = d[ic - 1] * ic % M\n    d[ic + elo] = M - M // ic * d[M % ic + elo] % M\n    d[ic + 2 * elo] = d[ic - 1 + 2 * elo] * d[ic + elo] % M\nC = lambda a, b: d[a] * d[b + 2 * elo] * d[a - b + 2 * elo] % M\nfor _ in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c = tuple(map(int, input().split())).count(0)\n    for i in range(n - c + 1):\n        if not (n - i < 0 or c > n - i):\n            t += i * C(n - i, c) % M\n    print(t * (c + 1) * d[n - c] * d[c] % M)", "fck = 1000001\n(fuck, MOD) = ([1] * (3 * fck), 998244353)\nfor i in range(2, fck):\n    fuck[i] = fuck[i - 1] * i % MOD\n    fuck[i + fck] = MOD - MOD // i * fuck[MOD % i + fck] % MOD\n    fuck[i + 2 * fck] = fuck[i - 1 + 2 * fck] * fuck[i + fck] % MOD\nC = lambda x, y: fuck[x] * fuck[y + 2 * fck] * fuck[x - y + 2 * fck] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    number = tuple(map(int, input().split())).count(0)\n    for i in range(n - number + 1):\n        if not (n - i < 0 or number > n - i):\n            t += i * C(n - i, number) % MOD\n    print(t * (number + 1) * fuck[n - number] * fuck[number] % MOD)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "p = 100001\nm = 998244353\nd = [1] * (3 * p)\nfor i in range(2, p):\n    d[i] = d[i - 1] * i % m\n    d[i + p] = m - m // i * d[m % i + p] % m\n    d[i + 2 * p] = d[2 * p + i - 1] * d[i + p] % m\nA = lambda x, y: d[x] * d[2 * p + y] * d[2 * p + x - y] % m\ntest = int(input())\nfor tc in range(test):\n    n = int(input())\n    ans = 0\n    c = tuple(map(int, input().split())).count(0)\n    for i in range(n - c + 1):\n        if not (n - i < 0 or c > n - i):\n            ans += i * A(n - i, c) % m\n    print(ans * (c + 1) * d[n - c] * d[c] % m)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "mod = 998244353\nx = [0] * 1000001\ny = [0] * 1000001\nz = [0] * 1000001\n\ndef solve(a, b):\n    if a < 0 or b > a:\n        return 0\n    else:\n        return x[a] * z[b] % mod * z[a - b] % mod\nx[0] = 1\ny[0] = 1\ny[1] = 1\nz[0] = 1\nz[1] = 1\nfor i in range(1, 1000001):\n    x[i] = x[i - 1] * i % mod\nfor j in range(2, 1000001):\n    y[j] = mod - mod // j * y[mod % j] % mod\nfor k in range(2, 1000001):\n    z[k] = z[k - 1] * y[k] % mod\nfor ts in range(int(input())):\n    N = int(input())\n    ls = list(map(int, input().split()))[:N]\n    (a, b, c) = (0, 0, 0)\n    for i in range(N):\n        if ls[i] == 0:\n            a += 1\n        else:\n            b += 1\n    for i in range(b + 1):\n        c = (c + i * solve(b + a - i, a)) % mod\n    print((((c * (a + 1) - solve(b + a - 2, a - 1)) % mod + mod) % mod + solve(b + a - 2, a - 1)) * x[b] % mod * x[a] % mod)", "solve = [1] * (3 * 100001)\nmod = 998244353\nfor i in range(2, 100001):\n    solve[i] = solve[i - 1] * i % mod\n    solve[i + 100001] = mod - mod // i * solve[mod % i + 100001] % mod\n    solve[i + 2 * 100001] = solve[i - 1 + 2 * 100001] * solve[i + 100001] % mod\n\ndef ans(x, y):\n    return solve[x] * solve[y + 2 * 100001] * solve[x - y + 2 * 100001] % mod\nfor tc in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    cnt = 0\n    for i in range(n):\n        if ar[i] == 0:\n            cnt += 1\n    p = 0\n    for i in range(n - cnt + 1):\n        if not (n - i < 0 or cnt > n - i):\n            p += i * ans(n - i, cnt) % mod\n    print(p * (cnt + 1) * solve[n - cnt] * solve[cnt] % mod)", "exp = 100001\ndp = [1] * (3 * 100001)\nmod = 998244353\nfor i in range(2, exp):\n    dp[i] = dp[i - 1] * i % mod\n    dp[i + exp] = mod - mod // i * dp[mod % i + exp] % mod\n    dp[i + exp * 2] = dp[i - 1 + exp * 2] * dp[i + exp] % mod\ntemp = lambda j, k: dp[j] * dp[k + exp * 2] * dp[j - k + exp * 2] % mod\nfor test in range(int(input())):\n    n = int(input())\n    ty = 0\n    id = tuple(map(int, input().split())).count(0)\n    for it in range(n - id + 1):\n        if not (n - it < 0 or id > n - it):\n            ty = ty + it * temp(n - it, id) % mod\n    print(ty * (id + 1) * dp[n - id] * dp[id] % mod)", "anti = [0] * 1000001\nbantu = [0] * 1000001\ndrip = [0] * 1000001\nmodu = 998244353\n\ndef fun1(san, man):\n    if san < 0 or man > san:\n        return 0\n    return anti[san] * drip[man] % modu * drip[san - man] % modu\nanti[0] = bantu[1] = drip[1] = drip[0] = bantu[0] = 7 * 7 - 8 * 6\nfor i in range(1, 1000001):\n    anti[i] = anti[i - 1] * i % modu\nfor i in range(2, 1000001):\n    bantu[i] = modu - modu // i * bantu[modu % i] % modu\nfor i in range(2, 1000001):\n    drip[i] = drip[i - 1] * bantu[i] % modu\nfor dash in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * fun1(c1 + c - i, c)) % modu\n    print((((r * (c + 1) - fun1(c1 + c - 2, c - 1)) % modu + modu) % modu + fun1(c1 + c - 2, c - 1)) * anti[c1] % modu * anti[c] % modu)", "global fac, inv, finv, Mod\nfac = [0] * 1000001\ninv = [0] * 1000001\nfinv = [0] * 1000001\nMod = 998244353\n\ndef C(x, y):\n    if x < 0 or y > x:\n        return 0\n    return fac[x] * finv[y] % Mod * finv[x - y] % Mod\nfac[0] = inv[0] = inv[1] = finv[0] = finv[1] = 1\nfor i in range(1, 1000001):\n    fac[i] = fac[i - 1] * i % Mod\nfor i in range(2, 1000001):\n    inv[i] = Mod - Mod // i * inv[Mod % i] % Mod\nfor i in range(2, 1000001):\n    finv[i] = finv[i - 1] * inv[i] % Mod\nfor _ in range(int(input())):\n    c0 = c1 = a = 0\n    n = int(input())\n    lis = list(map(int, input().split()))\n    for i in range(n):\n        if lis[i] == 0:\n            c0 += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        a = (a + i * C(c1 + c0 - i, c0)) % Mod\n    ans = (((a * (c0 + 1) - C(c0 + c1 - 2, c0 - 1)) % Mod + Mod) % Mod + C(c1 + c0 - 2, c0 - 1)) * fac[c1] % Mod * fac[c0] % Mod\n    print(ans)", "aadi = 100001\n(dp, MOD) = ([1] * (3 * aadi), 998244353)\nfor me in range(2, aadi):\n    dp[me] = dp[me - 1] * me % MOD\n    dp[me + aadi] = MOD - MOD // me * dp[MOD % me + aadi] % MOD\n    dp[me + 2 * aadi] = dp[me - 1 + 2 * aadi] * dp[me + aadi] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * aadi] * dp[x - y + 2 * aadi] % MOD\nfor ic in range(int(input())):\n    (n, t) = (int(input()), 0)\n    doo = tuple(map(int, input().split())).count(0)\n    for i in range(n - doo + 1):\n        if not (n - i < 0 or doo > n - i):\n            t += i * C(n - i, doo) % MOD\n    print(t * (doo + 1) * dp[n - doo] * dp[doo] % MOD)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "MOD = 998244353\ncpraid1 = [1] * 100001\ncpraid2 = [1] * 100001\ncpraid3 = [1] * 100001\nfor i in range(2, 100001):\n    cpraid1[i] = cpraid1[i - 1] * i % MOD\n    cpraid2[i] = MOD - MOD // i * cpraid2[MOD % i] % MOD\n    cpraid3[i] = cpraid3[i - 1] * cpraid2[i] % MOD\n\ndef C(x, y):\n    return 0 if x < 0 or y > x else cpraid1[x] * cpraid3[y] * cpraid3[x - y] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    cpraid = list(map(int, input().split()))\n    c0 = cpraid.count(0)\n    for i in range(n - c0 + 1):\n        t += i * C(n - i, c0) % MOD\n    ans = t * (c0 + 1) * cpraid1[n - c0] * cpraid1[c0] % MOD\n    print(ans)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nn = int(input())\nfor tc in range(0, n):\n    (m, t) = (int(input()), 0)\n    temp = tuple(map(int, input().split())).count(0)\n    for i in range(m - temp + 1):\n        if not (m - i < 0 or temp > m - i):\n            t += i * C(m - i, temp) % MOD\n    print(t * (temp + 1) * dp[m - temp] * dp[temp] % MOD)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "N = 1000010\nfact = [0] * N\ninv = [0] * N\nfinal_inv = [0] * N\n\ndef func(a, b):\n    if a < 0 or b > a:\n        return 0\n    return fact[a] * final_inv[b] % mod * final_inv[a - b] % mod\nmod = 998244353\n(fact[0], inv[0], inv[1], final_inv[0], final_inv[1]) = (1, 1, 1, 1, 1)\nfor i in range(1, 1000001):\n    fact[i] = fact[i - 1] * i % mod\nfor i in range(2, 1000001):\n    inv[i] = mod - mod // i * inv[mod % i] % mod\n    final_inv[i] = final_inv[i - 1] * inv[i] % mod\nfor _ in range(int(input())):\n    n = int(input())\n    (ones, zeros, count) = (0, 0, 0)\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        if arr[i] == 0:\n            zeros += 1\n        if arr[i] == 1:\n            ones += 1\n    for i in range(ones + 1):\n        count = (count + i * func(ones + zeros - i, zeros)) % mod\n    ans = (((count * (zeros + 1) - func(ones + zeros - 2, zeros - 1)) % mod + mod) % mod + func(ones + zeros - 2, zeros - 1)) * fact[ones] % mod * fact[zeros] % mod\n    print(ans)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "N = 1000010\nfact = [0] * N\ninv = [0] * N\nfinal_inv = [0] * N\n\ndef func(a, b):\n    if a < 0 or b > a:\n        return 0\n    return fact[a] * final_inv[b] % mod * final_inv[a - b] % mod\nmod = 998244353\n(fact[0], inv[0], inv[1], final_inv[0], final_inv[1]) = (1, 1, 1, 1, 1)\nfor i in range(1, 1000001):\n    fact[i] = fact[i - 1] * i % mod\nfor i in range(2, 1000001):\n    inv[i] = mod - mod // i * inv[mod % i] % mod\nfor i in range(2, 1000001):\n    final_inv[i] = final_inv[i - 1] * inv[i] % mod\nfor _ in range(int(input())):\n    n = int(input())\n    (ones, zeros, count) = (0, 0, 0)\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        if arr[i] == 0:\n            zeros += 1\n        if arr[i] == 1:\n            ones += 1\n    for i in range(ones + 1):\n        count = (count + i * func(ones + zeros - i, zeros)) % mod\n    ans = (((count * (zeros + 1) - func(ones + zeros - 2, zeros - 1)) % mod + mod) % mod + func(ones + zeros - 2, zeros - 1)) * fact[ones] % mod * fact[zeros] % mod\n    print(ans)", "e = 100001\n(dp, MOD) = ([1] * (3 * e), 998244353)\nfor i in range(2, e):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + e] = MOD - MOD // i * dp[MOD % i + e] % MOD\n    dp[i + 2 * e] = dp[i - 1 + 2 * e] * dp[i + e] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * e] * dp[x - y + 2 * e] % MOD\nfor tc in range(int(input())):\n    (n, t) = (int(input()), 0)\n    c0 = tuple(map(int, input().split())).count(0)\n    for i in range(n - c0 + 1):\n        if not (n - i < 0 or c0 > n - i):\n            t += i * C(n - i, c0) % MOD\n    print(t * (c0 + 1) * dp[n - c0] * dp[c0] % MOD)", "a = 100001\n(dp, MOD) = ([1] * (3 * a), 998244353)\nfor i in range(2, a):\n    dp[i] = dp[i - 1] * i % MOD\n    dp[i + a] = MOD - MOD // i * dp[MOD % i + a] % MOD\n    dp[i + 2 * a] = dp[i - 1 + 2 * a] * dp[i + a] % MOD\nC = lambda x, y: dp[x] * dp[y + 2 * a] * dp[x - y + 2 * a] % MOD\nb = int(input())\nfor _ in range(b):\n    (n, t) = (int(input()), 0)\n    c = tuple(map(int, input().split())).count(0)\n    for i in range(n - c + 1):\n        if not (n - i < 0 or c > n - i):\n            t += i * C(n - i, c) % MOD\n    print(t * (c + 1) * dp[n - c] * dp[c] % MOD)", "a = [0] * 1000001\nb = [0] * 1000001\nd = [0] * 1000001\nm = 998244353\n\ndef f_1(x, y):\n    if x < 0 or y > x:\n        return 0\n    return a[x] * d[y] % m * d[x - y] % m\na[0] = b[0] = b[1] = d[0] = d[1] = 1\nfor i in range(1, 1000001):\n    a[i] = a[i - 1] * i % m\nfor i in range(2, 1000001):\n    b[i] = m - m // i * b[m % i] % m\nfor i in range(2, 1000001):\n    d[i] = d[i - 1] * b[i] % m\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    c = c1 = r = 0\n    for i in range(n):\n        if arr[i] == 0:\n            c += 1\n        else:\n            c1 += 1\n    for i in range(c1 + 1):\n        r = (r + i * f_1(c1 + c - i, c)) % m\n    print((((r * (c + 1) - f_1(c1 + c - 2, c - 1)) % m + m) % m + f_1(c1 + c - 2, c - 1)) * a[c1] % m * a[c] % m)"]