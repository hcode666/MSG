["fact_l = [1]\na_vals = [0]\nmod = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    while n + 1 >= len(fact_l):\n        fact_l.append(fact_l[len(fact_l) - 1] * len(fact_l) % mod)\n        a_vals.append((a_vals[len(a_vals) - 1] * len(a_vals) + 1) % mod)\n    P = (a_vals[n + 1] - a_vals[n] - fact_l[n]) % mod\n    Q = fact_l[n] * n % mod\n    Q = pow(Q, -1, mod)\n    print(P * Q % mod)", "fact_l = [1]\na_vals = [0]\nmod = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    while n + 1 >= len(fact_l):\n        fact_l.append(fact_l[len(fact_l) - 1] * len(fact_l) % mod)\n        a_vals.append((a_vals[len(a_vals) - 1] * len(a_vals) + 1) % mod)\n    P = (a_vals[n + 1] - a_vals[n] - fact_l[n]) % mod\n    Q = fact_l[n] * n % mod\n    Q = pow(Q, -1, mod)\n    print(P * Q % mod)", "fact_l = [1]\na_vals = [0]\nmod = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    while n + 1 >= len(fact_l):\n        fact_l.append(fact_l[len(fact_l) - 1] * len(fact_l) % mod)\n        a_vals.append((a_vals[len(a_vals) - 1] * len(a_vals) + 1) % mod)\n    P = (a_vals[n + 1] - a_vals[n] - fact_l[n]) % mod\n    Q = fact_l[n] * n % mod\n    Q = pow(Q, -1, mod)\n    print(P * Q % mod)", "fact_l = [1]\na_vals = [0]\nmod = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    while n + 1 >= len(fact_l):\n        fact_l.append(fact_l[len(fact_l) - 1] * len(fact_l) % mod)\n        a_vals.append((a_vals[len(a_vals) - 1] * len(a_vals) + 1) % mod)\n    P = (a_vals[n + 1] - a_vals[n] - fact_l[n]) % mod\n    Q = fact_l[n] * n % mod\n    Q = pow(Q, -1, mod)\n    print(P * Q % mod)", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "fact_l = [1]\na_vals = [0]\nmod = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    while n + 1 >= len(fact_l):\n        fact_l.append(fact_l[len(fact_l) - 1] * len(fact_l) % mod)\n        a_vals.append((a_vals[len(a_vals) - 1] * len(a_vals) + 1) % mod)\n    P = (a_vals[n + 1] - a_vals[n] - fact_l[n]) % mod\n    Q = fact_l[n] * n % mod\n    Q = pow(Q, -1, mod)\n    print(P * Q % mod)", "fact_l = [1]\na_vals = [0]\nmod = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    while n + 1 >= len(fact_l):\n        fact_l.append(fact_l[len(fact_l) - 1] * len(fact_l) % mod)\n        a_vals.append((a_vals[len(a_vals) - 1] * len(a_vals) + 1) % mod)\n    P = (a_vals[n + 1] - a_vals[n] - fact_l[n]) % mod\n    Q = fact_l[n] * n % mod\n    Q = pow(Q, -1, mod)\n    print(P * Q % mod)", "N = 200001\nmod = 1000000007\n\ndef inv(x):\n    return pow(x, mod - 2, mod)\nfac = [0] * (N + 10)\nisfac = [0] * (N + 10)\nans = [0] * (N + 10)\nlast = [0] * (N + 10)\n\ndef init():\n    fac[0] = 1\n    for i in range(1, N + 1):\n        fac[i] = fac[i - 1] * i % mod\n        isfac[i] = (isfac[i - 1] + inv(fac[i])) % mod\n    ans[1] = 1\n    last[1] = 1\n    for i in range(2, N + 1):\n        last[i] = isfac[i]\n        ans[i] = (ans[i - 1] * (i - 1) + last[i]) * inv(i) % mod\n\ndef work(n):\n    return ans[n]\ninit()\nT = int(input())\nfor _ in range(T):\n    print(work(int(input())))", "N = 200001\nmod = 1000000007\n\ndef inv(x):\n    return pow(x, mod - 2, mod)\nfac = [0] * (N + 10)\nisfac = [0] * (N + 10)\nans = [0] * (N + 10)\nlast = [0] * (N + 10)\n\ndef init():\n    fac[0] = 1\n    for i in range(1, N + 1):\n        fac[i] = fac[i - 1] * i % mod\n        isfac[i] = (isfac[i - 1] + inv(fac[i])) % mod\n    ans[1] = 1\n    last[1] = 1\n    for i in range(2, N + 1):\n        last[i] = isfac[i]\n        ans[i] = (ans[i - 1] * (i - 1) + last[i]) * inv(i) % mod\n\ndef work(n):\n    return ans[n]\ninit()\nT = int(input())\nfor _ in range(T):\n    print(work(int(input())))", "N = 200001\nmod = 1000000007\n\ndef inv(x):\n    return pow(x, mod - 2, mod)\nfac = [0] * (N + 10)\nisfac = [0] * (N + 10)\nans = [0] * (N + 10)\nlast = [0] * (N + 10)\n\ndef init():\n    fac[0] = 1\n    for i in range(1, N + 1):\n        fac[i] = fac[i - 1] * i % mod\n        isfac[i] = (isfac[i - 1] + inv(fac[i])) % mod\n    ans[1] = 1\n    last[1] = 1\n    for i in range(2, N + 1):\n        last[i] = isfac[i]\n        ans[i] = (ans[i - 1] * (i - 1) + last[i]) * inv(i) % mod\n\ndef work(n):\n    return ans[n]\ninit()\nT = int(input())\nfor _ in range(T):\n    print(work(int(input())))", "N = 200001\nmod = 1000000007\n\ndef inv(x):\n    return pow(x, mod - 2, mod)\nfac = [0] * (N + 10)\nisfac = [0] * (N + 10)\nans = [0] * (N + 10)\nlast = [0] * (N + 10)\n\ndef init():\n    fac[0] = 1\n    for i in range(1, N + 1):\n        fac[i] = fac[i - 1] * i % mod\n        isfac[i] = (isfac[i - 1] + inv(fac[i])) % mod\n    ans[1] = 1\n    last[1] = 1\n    for i in range(2, N + 1):\n        last[i] = isfac[i]\n        ans[i] = (ans[i - 1] * (i - 1) + last[i]) * inv(i) % mod\n\ndef work(n):\n    return ans[n]\ninit()\nT = int(input())\nfor _ in range(T):\n    print(work(int(input())))", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(c, d) = [[0], [1]]\nzero = 0\nfor i in range(1, 200010):\n    c.append((c[i - 1] * i + 1 + zero) % 1000000007)\n    d.append(d[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((c[n + 1] - c[n] - d[n]) * pow(d[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(xy, qw) = [[0], [1]]\nfor e in range(1, 200010):\n    xy.append((xy[e - 1] * e + 1) % 1000000007)\n    qw.append(qw[e - 1] * e % 1000000007)\nfor _ in range(int(input())):\n    jk = int(input())\n    print(((xy[jk + 1] - xy[jk] - qw[jk]) * pow(qw[jk] * jk, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "(a, b) = [[0], [1]]\nfor i in range(1, 200010):\n    a.append((a[i - 1] * i + 1) % 1000000007)\n    b.append(b[i - 1] * i % 1000000007)\nfor _ in range(int(input())):\n    n = int(input())\n    print(((a[n + 1] - a[n] - b[n]) * pow(b[n] * n, 1000000005, 1000000007) % 1000000007 + 1000000007) % 1000000007)", "mod = 1000000007\nSIZE = 1000000\nfact = [1] * SIZE\nfact2 = [0] * SIZE\n\ndef factorial():\n    for i in range(1, SIZE):\n        fact[i] = fact[i - 1] * i % mod\n        fact2[i] = (i * fact2[i - 1] + 1) % mod\n\ndef modInverse(A, M):\n    m0 = M\n    y = 0\n    x = 1\n    if M == 1:\n        return 0\n    while A > 1:\n        q = A // M\n        t = M\n        M = A % M\n        A = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\nfactorial()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    inv = modInverse(n * fact[n], 1000000007)\n    g = (fact2[n + 1] - fact2[n] - fact[n]) % 1000000007\n    if g < 0:\n        g += 1000000007\n    print(inv * g % 1000000007)", "mod = 1000000007\nT = int(input())\nb = [0, 1]\nfactorial = [1, 1]\nfor testNum in range(T):\n    n = int(input())\n    if n >= len(b):\n        for i in range(len(b), n + 1):\n            b.append((b[i - 1] * i + 1) % mod)\n            factorial.append(factorial[i - 1] * i % mod)\n    p = n * b[n] + 1 - factorial[n]\n    q = n * factorial[n]\n    q = pow(q, -1, mod)\n    result = p * q % mod\n    print(result)"]