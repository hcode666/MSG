["t = int(input())\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    l = set()\n    v = [ar[0]]\n    for i in range(1, n):\n        while v and v[-1] <= ar[i]:\n            l.add(ar[i] - v[-1])\n            v.pop()\n        if v:\n            l.add(v[-1] - ar[i])\n        v.append(ar[i])\n    print(len(l))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    l = set()\n    v = [ar[0]]\n    for i in range(1, n):\n        while v and v[-1] <= ar[i]:\n            l.add(ar[i] - v[-1])\n            v.pop()\n        if v:\n            l.add(v[-1] - ar[i])\n        v.append(ar[i])\n    print(len(l))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    l = set()\n    v = [ar[0]]\n    for i in range(1, n):\n        while v and v[-1] <= ar[i]:\n            l.add(ar[i] - v[-1])\n            v.pop()\n        if v:\n            l.add(v[-1] - ar[i])\n        v.append(ar[i])\n    print(len(l))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    l = set()\n    v = [ar[0]]\n    for i in range(1, n):\n        while v and v[-1] <= ar[i]:\n            l.add(ar[i] - v[-1])\n            v.pop()\n        if v:\n            l.add(v[-1] - ar[i])\n        v.append(ar[i])\n    print(len(l))", "import sys, heapq, bisect, math\nfrom functools import lru_cache\nfrom collections import defaultdict, Counter, deque\nfrom itertools import permutations, combinations, product\n\ndef _input():\n    return sys.stdin.readline().strip()\n\ndef singleLineArrInt():\n    return [int(n) for n in _input().split(' ')]\n\ndef singleLineArrStr():\n    return [s for s in _input().split(' ')]\n\ndef solve(n, nums):\n    right = [-1] * n\n    stack = []\n    for i in range(n):\n        while stack and nums[stack[-1]] <= nums[i]:\n            right[stack.pop()] = i\n        stack.append(i)\n    left = [-1] * n\n    stack = []\n    for i in range(n - 1, -1, -1):\n        while stack and nums[stack[-1]] <= nums[i]:\n            left[stack.pop()] = i\n        stack.append(i)\n    res = set()\n    for i in range(n):\n        if left[i] != -1:\n            res.add(nums[left[i]] - nums[i])\n        if right[i] != -1:\n            res.add(nums[right[i]] - nums[i])\n    print(len(res))\nt = int(_input())\nfor _ in range(t):\n    n = int(_input())\n    nums = singleLineArrInt()\n    solve(n, nums)", "import sys, threading\nimport math\nfrom os import path\nfrom collections import deque, defaultdict, Counter\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom functools import cmp_to_key\nfrom random import randint\nimport heapq\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\nMAXN = 1123456\n\nclass mydict:\n\n    def __init__(self, func=lambda : 0):\n        self.random = randint(0, 1 << 32)\n        self.default = func\n        self.dict = {}\n\n    def __getitem__(self, key):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            self.dict[mykey] = self.default()\n        return self.dict[mykey]\n\n    def get(self, key, default):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            return default\n        return self.dict[mykey]\n\n    def __setitem__(self, key, item):\n        mykey = self.random ^ key\n        self.dict[mykey] = item\n\n    def getkeys(self):\n        return [self.random ^ i for i in self.dict]\n\n    def __str__(self):\n        return f'{[(self.random ^ i, self.dict[i]) for i in self.dict]}'\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef mod(n):\n    return n % 1000000007\n\ndef solve(t):\n    n = readInts()\n    ar = readList()\n    stack = []\n    ans = set()\n    for num in ar:\n        while stack and stack[-1] < num:\n            cur = stack.pop()\n            ans.add(num - cur)\n        if stack:\n            ans.add(stack[-1] - num)\n        stack.append(num)\n    print(len(ans))\n\ndef main():\n    t = 1\n    if path.exists('/Users/arijitbhaumik/Library/Application Support/Sublime Text/Packages/User/input.txt'):\n        sys.stdin = open('/Users/arijitbhaumik/Library/Application Support/Sublime Text/Packages/User/input.txt', 'r')\n        sys.stdout = open('/Users/arijitbhaumik/Library/Application Support/Sublime Text/Packages/User/output.txt', 'w')\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    l = set()\n    v = [ar[0]]\n    for i in range(1, n):\n        while v and v[-1] <= ar[i]:\n            l.add(ar[i] - v[-1])\n            v.pop()\n        if v:\n            l.add(v[-1] - ar[i])\n        v.append(ar[i])\n    print(len(l))", "from bisect import bisect_left as lower_bound\nfrom bisect import bisect_right as upper_bound\n\nclass FenwickTree:\n\n    def __init__(self, x):\n        bit = self.bit = list(x)\n        size = self.size = len(bit)\n        for i in range(size):\n            j = i | i + 1\n            if j < size:\n                bit[j] += bit[i]\n\n    def update(self, idx, x):\n        while idx < self.size:\n            self.bit[idx] += x\n            idx |= idx + 1\n\n    def __call__(self, end):\n        x = 0\n        while end:\n            x += self.bit[end - 1]\n            end &= end - 1\n        return x\n\n    def find_kth(self, k):\n        idx = -1\n        for d in reversed(range(self.size.bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < self.size and self.bit[right_idx] <= k:\n                idx = right_idx\n                k -= self.bit[idx]\n        return (idx + 1, k)\n\nclass SortedList:\n    block_size = 700\n\n    def __init__(self, iterable=()):\n        self.macro = []\n        self.micros = [[]]\n        self.micro_size = [0]\n        self.fenwick = FenwickTree([0])\n        self.size = 0\n        for item in iterable:\n            self.insert(item)\n\n    def insert(self, x):\n        i = lower_bound(self.macro, x)\n        j = upper_bound(self.micros[i], x)\n        self.micros[i].insert(j, x)\n        self.size += 1\n        self.micro_size[i] += 1\n        self.fenwick.update(i, 1)\n        if len(self.micros[i]) >= self.block_size:\n            self.micros[i:i + 1] = (self.micros[i][:self.block_size >> 1], self.micros[i][self.block_size >> 1:])\n            self.micro_size[i:i + 1] = (self.block_size >> 1, self.block_size >> 1)\n            self.fenwick = FenwickTree(self.micro_size)\n            self.macro.insert(i, self.micros[i + 1][0])\n\n    def pop(self, k=-1):\n        (i, j) = self._find_kth(k)\n        self.size -= 1\n        self.micro_size[i] -= 1\n        self.fenwick.update(i, -1)\n        return self.micros[i].pop(j)\n\n    def __getitem__(self, k):\n        (i, j) = self._find_kth(k)\n        return self.micros[i][j]\n\n    def count(self, x):\n        return self.upper_bound(x) - self.lower_bound(x)\n\n    def __contains__(self, x):\n        return self.count(x) > 0\n\n    def lower_bound(self, x):\n        i = lower_bound(self.macro, x)\n        return self.fenwick(i) + lower_bound(self.micros[i], x)\n\n    def upper_bound(self, x):\n        i = upper_bound(self.macro, x)\n        return self.fenwick(i) + upper_bound(self.micros[i], x)\n\n    def _find_kth(self, k):\n        return self.fenwick.find_kth(k + self.size if k < 0 else k)\n\n    def __len__(self):\n        return self.size\n\n    def __iter__(self):\n        return (x for micro in self.micros for x in micro)\n\n    def __repr__(self):\n        return str(list(self))\nt = int(input())\n\ndef solve():\n    N = int(input())\n    A = [int(x) for x in input().split(' ')]\n    sl = SortedList()\n    indices = [[x, i] for (i, x) in enumerate(A)]\n    indices.sort(reverse=True)\n    ans = set()\n    for (_, i) in indices:\n        idx = sl.lower_bound(i)\n        if idx > 0:\n            ans.add(A[sl[idx - 1]] - A[i])\n        if idx < len(sl):\n            ans.add(A[sl[idx]] - A[i])\n        sl.insert(i)\n    print(len(ans))\nwhile t:\n    solve()\n    t -= 1", "from typing import List\n\ndef solving(arr: List[int], n: int) -> int:\n    first1 = [0] * n\n    second1 = [0] * n\n    st = []\n    s = set()\n    first1[0] = -1\n    st.append(arr[0])\n    for i in range(1, n):\n        while len(st) > 0 and arr[i] > st[-1]:\n            st.pop()\n        if len(st) == 0:\n            first1[i] = -1\n        else:\n            first1[i] = st[-1]\n        st.append(arr[i])\n    while len(st) > 0:\n        st.pop()\n    second1[n - 1] = -1\n    st.append(arr[n - 1])\n    for i in range(n - 2, -1, -1):\n        while len(st) > 0 and arr[i] >= st[-1]:\n            st.pop()\n        if len(st) != 0:\n            second1[i] = st[-1]\n        else:\n            second1[i] = -1\n        st.append(arr[i])\n    for i in range(n):\n        if first1[i] != -1:\n            s.add(first1[i] - arr[i])\n        if second1[i] != -1:\n            s.add(second1[i] - arr[i])\n    return len(s)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solving(a, n))\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    prev = [-1] * n\n    next = [-1] * n\n    stack = []\n    for i in reversed(range(n)):\n        while stack:\n            if l[stack[-1]] < l[i]:\n                stack.pop()\n            else:\n                break\n        if stack:\n            next[i] = stack[-1]\n        stack.append(i)\n    stack = []\n    for i in range(n):\n        while stack:\n            if l[stack[-1]] < l[i]:\n                stack.pop()\n            else:\n                break\n        if stack:\n            prev[i] = stack[-1]\n        stack.append(i)\n    ans = set()\n    for i in range(n):\n        if prev[i] != -1:\n            ans.add(l[prev[i]] - l[i])\n        if next[i] != -1:\n            ans.add(l[next[i]] - l[i])\n    print(len(ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stack = []\n    prev_big = [-1] * n\n    next_big = [-1] * n\n    for i in range(n):\n        while len(stack) > 0:\n            if a[stack[-1]] < a[i]:\n                stack.pop()\n            else:\n                break\n        if len(stack) > 0:\n            prev_big[i] = stack[-1]\n        stack.append(i)\n    stack = []\n    for i in reversed(range(n)):\n        while len(stack) > 0:\n            if a[stack[-1]] < a[i]:\n                stack.pop()\n            else:\n                break\n        if len(stack) > 0:\n            next_big[i] = stack[-1]\n        stack.append(i)\n    difs = set()\n    for i in range(n):\n        if prev_big[i] != -1:\n            difs.add(a[prev_big[i]] - a[i])\n        if next_big[i] != -1:\n            difs.add(a[next_big[i]] - a[i])\n    print(len(difs))", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (pref, suf) = ([None] * n, [None] * n)\n    stack = []\n    for i in range(n):\n        while stack and stack[-1] < arr[i]:\n            stack.pop()\n        if stack:\n            pref[i] = stack[-1]\n        stack.append(arr[i])\n    stack = []\n    for i in range(n - 1, -1, -1):\n        while stack and stack[-1] < arr[i]:\n            stack.pop()\n        if stack:\n            suf[i] = stack[-1]\n        stack.append(arr[i])\n    ans = set()\n    for i in range(n):\n        if pref[i] != None:\n            ans.add(pref[i] - arr[i])\n        if suf[i] != None:\n            ans.add(suf[i] - arr[i])\n    print(len(ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stack = []\n    prev_big = [-1] * n\n    next_big = [-1] * n\n    for i in range(n):\n        while len(stack) > 0:\n            if a[stack[-1]] < a[i]:\n                stack.pop()\n            else:\n                break\n        if len(stack) > 0:\n            prev_big[i] = stack[-1]\n        stack.append(i)\n    stack = []\n    for i in reversed(range(n)):\n        while len(stack) > 0:\n            if a[stack[-1]] < a[i]:\n                stack.pop()\n            else:\n                break\n        if len(stack) > 0:\n            next_big[i] = stack[-1]\n        stack.append(i)\n    difs = set()\n    for i in range(n):\n        if prev_big[i] != -1:\n            difs.add(a[prev_big[i]] - a[i])\n        if next_big[i] != -1:\n            difs.add(a[next_big[i]] - a[i])\n    print(len(difs))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = set()\n    st = []\n    for i in range(n):\n        while len(st) > 0 and st[len(st) - 1] <= l[i]:\n            temp = l[i] - st[len(st) - 1]\n            st.pop()\n            res.add(temp)\n        st.append(l[i])\n    st = []\n    for i in range(n - 1, -1, -1):\n        while len(st) > 0 and st[len(st) - 1] <= l[i]:\n            temp = l[i] - st[len(st) - 1]\n            st.pop()\n            res.add(temp)\n        st.append(l[i])\n    print(len(res))", "from sys import stdin\ninput = stdin.readline\n\ndef previous_greatest_element(A):\n    prev_greatest = [-1] * len(A)\n    stack = []\n    for i in range(len(A)):\n        while stack:\n            if A[i] > A[stack[-1]]:\n                stack.pop()\n            else:\n                break\n        if stack:\n            prev_greatest[i] = stack[-1]\n        stack.append(i)\n    return prev_greatest\n\ndef next_greatest_element(A):\n    next_greatest = [-1] * len(A)\n    stack = []\n    for i in reversed(range(len(A))):\n        while stack:\n            if A[i] > A[stack[-1]]:\n                stack.pop()\n            else:\n                break\n        if stack:\n            next_greatest[i] = stack[-1]\n        stack.append(i)\n    return next_greatest\n\ndef solve(N, A):\n    prev_greatest = previous_greatest_element(A)\n    next_greatest = next_greatest_element(A)\n    values = set()\n    for i in range(N):\n        if prev_greatest[i] != -1:\n            values.add(A[prev_greatest[i]] - A[i])\n        if next_greatest[i] != -1:\n            values.add(A[next_greatest[i]] - A[i])\n    return len(values)\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, A))", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    st = []\n    r = set()\n    for i in range(n):\n        while len(st) > 0 and st[-1] <= arr[i]:\n            temp = arr[i] - st[-1]\n            st.pop()\n            r.add(temp)\n        st.append(arr[i])\n    st = []\n    for i in range(n - 1, -1, -1):\n        while len(st) > 0 and st[-1] <= arr[i]:\n            temp = arr[i] - st[-1]\n            st.pop()\n            r.add(temp)\n        st.append(arr[i])\n    print(len(r))", "def solve(arr, n):\n    s = []\n    ans = set()\n    for i in range(n - 1, -1, -1):\n        if s and s[-1] > arr[i]:\n            ans.add(s[-1] - arr[i])\n        else:\n            while s and s[-1] < arr[i]:\n                s.pop()\n            if s:\n                ans.add(s[-1] - arr[i])\n        s.append(arr[i])\n    s = []\n    for i in range(n):\n        if s and s[-1] > arr[i]:\n            ans.add(s[-1] - arr[i])\n        else:\n            while s and s[-1] < arr[i]:\n                s.pop()\n            if s:\n                ans.add(s[-1] - arr[i])\n        s.append(arr[i])\n    return len(ans)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(solve(a, n))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    stack = [a[0]]\n    base = a[0]\n    se = set()\n    for i in range(1, n):\n        if a[i] >= stack[-1]:\n            while stack[-1] <= a[i]:\n                se.add(a[i] - stack[-1])\n                stack.pop()\n                if len(stack) == 0:\n                    break\n        stack.append(a[i])\n    stack = [a[-1]]\n    base = a[-1]\n    for i in range(n - 2, -1, -1):\n        if a[i] >= stack[-1]:\n            while a[i] >= stack[-1]:\n                se.add(a[i] - stack[-1])\n                stack.pop()\n                if len(stack) == 0:\n                    break\n        stack.append(a[i])\n    print(len(se))", "import heapq\nfor i in range(int(input())):\n    s = set()\n    n = int(input())\n    l = list(map(int, input().split()))\n    nex = [-1 for i in range(n)]\n    prev = [-1 for i in range(n)]\n    st = []\n    for i in range(n):\n        while st and l[st[-1]] <= l[i]:\n            nex[st.pop()] = l[i]\n        st.append(i)\n    st = []\n    for i in range(n - 1, -1, -1):\n        while st and l[st[-1]] <= l[i]:\n            prev[st.pop()] = l[i]\n        st.append(i)\n    for i in range(n):\n        if nex[i] != -1:\n            s.add(nex[i] - l[i])\n        if prev[i] != -1:\n            s.add(prev[i] - l[i])\n    print(len(s))", "import sys\nfrom collections import deque\n\ndef main():\n    tc = int(input())\n    for _ in range(tc):\n        n = int(input())\n        arr = [int(a) for a in input().split()]\n        nge_right = [-1 for i in range(n)]\n        nge_left = [-1 for i in range(n)]\n        stack = deque()\n        for i in range(n - 1, -1, -1):\n            while stack and stack[-1] < arr[i]:\n                stack.pop()\n            if stack:\n                nge_right[i] = stack[-1]\n            stack.append(arr[i])\n        stack.clear()\n        for i in range(n):\n            while stack and stack[-1] < arr[i]:\n                stack.pop()\n            if stack:\n                nge_left[i] = stack[-1]\n            stack.append(arr[i])\n        ans = set()\n        for i in range(n):\n            if nge_left[i] != -1:\n                ans.add(nge_left[i] - arr[i])\n            if nge_right[i] != -1:\n                ans.add(nge_right[i] - arr[i])\n        print(len(ans))\nmain()", "import heapq\nfor i in range(int(input())):\n    s = set()\n    n = int(input())\n    l = list(map(int, input().split()))\n    nex = [-1 for i in range(n)]\n    prev = [-1 for i in range(n)]\n    st = []\n    for i in range(n):\n        while st and l[st[-1]] <= l[i]:\n            nex[st.pop()] = l[i]\n        st.append(i)\n    st = []\n    for i in range(n - 1, -1, -1):\n        while st and l[st[-1]] <= l[i]:\n            prev[st.pop()] = l[i]\n        st.append(i)\n    for i in range(n):\n        if nex[i] != -1:\n            s.add(nex[i] - l[i])\n        if prev[i] != -1:\n            s.add(prev[i] - l[i])\n    print(len(s))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    (l, r) = ([0 for i in range(n)], [0 for i in range(n)])\n    stk = []\n    for i in range(n):\n        while len(stk) and a[stk[-1]] <= a[i]:\n            l[stk[-1]] = a[i]\n            stk.pop()\n        stk.append(i)\n    stk = []\n    for i in range(n - 1, -1, -1):\n        while len(stk) and a[stk[-1]] <= a[i]:\n            r[stk[-1]] = a[i]\n            stk.pop()\n        stk.append(i)\n    ans = set()\n    for i in range(n):\n        if l[i]:\n            ans.add(l[i] - a[i])\n        if r[i]:\n            ans.add(r[i] - a[i])\n    print(len(ans))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    (l, r) = ([0 for i in range(n)], [0 for i in range(n)])\n    stk = []\n    for i in range(n):\n        while len(stk) and a[stk[-1]] <= a[i]:\n            l[stk[-1]] = a[i]\n            stk.pop()\n        stk.append(i)\n    stk = []\n    for i in range(n - 1, -1, -1):\n        while len(stk) and a[stk[-1]] <= a[i]:\n            r[stk[-1]] = a[i]\n            stk.pop()\n        stk.append(i)\n    ans = set()\n    for i in range(n):\n        if l[i]:\n            ans.add(l[i] - a[i])\n        if r[i]:\n            ans.add(r[i] - a[i])\n    print(len(ans))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    u = []\n    left = [0] * n\n    for i in range(n):\n        while len(u) != 0 and u[-1] < arr[i]:\n            u.pop()\n        if len(u) == 0:\n            left[i] = -1\n        else:\n            left[i] = u[-1]\n        u.append(arr[i])\n    mo = []\n    right = [0] * n\n    for i in range(n - 1, -1, -1):\n        while len(mo) != 0 and mo[-1] < arr[i]:\n            mo.pop()\n        if len(mo) == 0:\n            right[i] = -1\n        else:\n            right[i] = mo[-1]\n        mo.append(arr[i])\n    gi = set()\n    ans = 0\n    for i in range(n):\n        g = left[i]\n        h = right[i]\n        if g != -1 and g - arr[i] not in gi:\n            gi.add(g - arr[i])\n            ans += 1\n        if h != -1 and h - arr[i] not in gi:\n            gi.add(h - arr[i])\n            ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    s = set()\n    for i in range(n):\n        while len(b) > 0 and b[-1] <= a[i]:\n            val = a[i] - b[len(b) - 1]\n            b.pop()\n            s.add(val)\n        b.append(a[i])\n    b = []\n    for i in range(n - 1, -1, -1):\n        while len(b) > 0 and b[-1] <= a[i]:\n            val = a[i] - b[len(b) - 1]\n            b.pop()\n            s.add(val)\n        b.append(a[i])\n    print(len(s))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = set()\n    stack = []\n    prev = [-1] * n\n    for i in range(n):\n        while stack and arr[stack[-1]] < arr[i]:\n            stack.pop()\n        if len(stack):\n            prev[i] = stack[-1]\n        stack.append(i)\n    stack = []\n    nxt = [-1] * n\n    for i in range(n - 1, -1, -1):\n        while stack and arr[stack[-1]] < arr[i]:\n            stack.pop()\n        if len(stack):\n            nxt[i] = stack[-1]\n        stack.append(i)\n    for i in range(n):\n        if prev[i] != -1:\n            ans.add(abs(arr[i] - arr[prev[i]]))\n        if nxt[i] != -1:\n            ans.add(abs(arr[i] - arr[nxt[i]]))\n    print(len(ans))", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef lsi():\n    return si().strip().split(' ')\n\ndef ni():\n    return int(input())\nfor _ in range(ni()):\n    n = ni()\n    a = li()\n    stack = []\n    prev_big = [-1] * n\n    next_big = [-1] * n\n    for i in range(n):\n        while len(stack) > 0:\n            if a[stack[-1]] < a[i]:\n                stack.pop()\n            else:\n                break\n        if len(stack) > 0:\n            prev_big[i] = stack[-1]\n        stack.append(i)\n    stack = []\n    for i in reversed(range(n)):\n        while len(stack) > 0:\n            if a[stack[-1]] < a[i]:\n                stack.pop()\n            else:\n                break\n        if len(stack) > 0:\n            next_big[i] = stack[-1]\n        stack.append(i)\n    difs = set()\n    for i in range(n):\n        if prev_big[i] != -1:\n            difs.add(a[prev_big[i]] - a[i])\n        if next_big[i] != -1:\n            difs.add(a[next_big[i]] - a[i])\n    print(len(difs))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = []\n    left = [0] * n\n    for i in range(n):\n        while s and s[-1] < arr[i]:\n            s.pop()\n        if not s:\n            left[i] = -1\n        else:\n            left[i] = s[-1]\n        s.append(arr[i])\n    s = []\n    right = [0] * n\n    for i in range(n - 1, -1, -1):\n        while s and s[-1] < arr[i]:\n            s.pop()\n        if not s:\n            right[i] = -1\n        else:\n            right[i] = s[-1]\n        s.append(arr[i])\n    sg = set()\n    ans = 0\n    for i in range(n):\n        g = left[i]\n        h = right[i]\n        if g != -1 and g - arr[i] not in sg:\n            sg.add(g - arr[i])\n            ans += 1\n        if h != -1 and h - arr[i] not in sg:\n            sg.add(h - arr[i])\n            ans += 1\n    print(ans)", "def countUnique(arr, n):\n    ngl = [0 for i in range(n)]\n    ngr = [0 for i in range(n)]\n    st = []\n    s = set()\n    ngl[0] = -1\n    st.append(arr[0])\n    for i in range(1, n):\n        while len(st) > 0 and arr[i] > st[-1]:\n            st.pop()\n        if len(st) == 0:\n            ngl[i] = -1\n        else:\n            ngl[i] = st[-1]\n        st.append(arr[i])\n    while len(st) > 0:\n        st.pop()\n    ngr[n - 1] = -1\n    st.append(arr[n - 1])\n    for i in range(n - 2, -1, -1):\n        while len(st) > 0 and arr[i] >= st[-1]:\n            st.pop()\n        if len(st) != 0:\n            ngr[i] = st[-1]\n        else:\n            ngr[i] = -1\n        st.append(arr[i])\n    for i in range(n):\n        if ngl[i] != -1:\n            s.add(ngl[i] - arr[i])\n        if ngr[i] != -1:\n            s.add(ngr[i] - arr[i])\n    return len(s)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(countUnique(a, n))\nfor _ in range(int(input())):\n    solve()", "def countUnique(arr, n):\n    ngl = [0 for i in range(n)]\n    ngr = [0 for i in range(n)]\n    st = []\n    s = set()\n    ngl[0] = -1\n    st.append(arr[0])\n    for i in range(1, n):\n        while len(st) > 0 and arr[i] > st[-1]:\n            st.pop()\n        if len(st) == 0:\n            ngl[i] = -1\n        else:\n            ngl[i] = st[-1]\n        st.append(arr[i])\n    while len(st) > 0:\n        st.pop()\n    ngr[n - 1] = -1\n    st.append(arr[n - 1])\n    for i in range(n - 2, -1, -1):\n        while len(st) > 0 and arr[i] >= st[-1]:\n            st.pop()\n        if len(st) != 0:\n            ngr[i] = st[-1]\n        else:\n            ngr[i] = -1\n        st.append(arr[i])\n    for i in range(n):\n        if ngl[i] != -1:\n            s.add(ngl[i] - arr[i])\n        if ngr[i] != -1:\n            s.add(ngr[i] - arr[i])\n    return len(s)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(countUnique(a, n))\nfor _ in range(int(input())):\n    solve()", "def countUnique(arr, n):\n    ngl = [0 for i in range(n)]\n    ngr = [0 for i in range(n)]\n    st = []\n    s = set()\n    ngl[0] = -1\n    st.append(arr[0])\n    for i in range(1, n):\n        while len(st) > 0 and arr[i] > st[-1]:\n            st.pop()\n        if len(st) == 0:\n            ngl[i] = -1\n        else:\n            ngl[i] = st[-1]\n        st.append(arr[i])\n    while len(st) > 0:\n        st.pop()\n    ngr[n - 1] = -1\n    st.append(arr[n - 1])\n    for i in range(n - 2, -1, -1):\n        while len(st) > 0 and arr[i] >= st[-1]:\n            st.pop()\n        if len(st) != 0:\n            ngr[i] = st[-1]\n        else:\n            ngr[i] = -1\n        st.append(arr[i])\n    for i in range(n):\n        if ngl[i] != -1:\n            s.add(ngl[i] - arr[i])\n        if ngr[i] != -1:\n            s.add(ngr[i] - arr[i])\n    return len(s)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(countUnique(a, n))\nfor _ in range(int(input())):\n    solve()", "def countUnique(arr, n):\n    ngl = [0] * n\n    ngr = [0] * n\n    st = []\n    s = set()\n    ngl[0] = -1\n    st.append(arr[0])\n    for i in range(1, n):\n        while len(st) > 0 and arr[i] > st[-1]:\n            st.pop()\n        if len(st) == 0:\n            ngl[i] = -1\n        else:\n            ngl[i] = st[-1]\n        st.append(arr[i])\n    while len(st) > 0:\n        st.pop()\n    ngr[n - 1] = -1\n    st.append(arr[n - 1])\n    for i in range(n - 2, -1, -1):\n        while len(st) > 0 and arr[i] >= st[-1]:\n            st.pop()\n        if len(st) != 0:\n            ngr[i] = st[-1]\n        else:\n            ngr[i] = -1\n        st.append(arr[i])\n    for i in range(n):\n        if ngl[i] != -1:\n            s.add(ngl[i] - arr[i])\n        if ngr[i] != -1:\n            s.add(ngr[i] - arr[i])\n    return len(s)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(countUnique(a, n))\ntestcase = int(input())\nwhile testcase > 0:\n    solve()\n    testcase -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = []\n    left = [0] * n\n    for i in range(n):\n        while s and s[-1] < arr[i]:\n            s.pop()\n        if not s:\n            left[i] = -1\n        else:\n            left[i] = s[-1]\n        s.append(arr[i])\n    s = []\n    right = [0] * n\n    for i in range(n - 1, -1, -1):\n        while s and s[-1] < arr[i]:\n            s.pop()\n        if not s:\n            right[i] = -1\n        else:\n            right[i] = s[-1]\n        s.append(arr[i])\n    sg = set()\n    ans = 0\n    for i in range(n):\n        g = left[i]\n        h = right[i]\n        if g != -1 and g - arr[i] not in sg:\n            sg.add(g - arr[i])\n            ans += 1\n        if h != -1 and h - arr[i] not in sg:\n            sg.add(h - arr[i])\n            ans += 1\n    print(ans)", "for m1 in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr1 = list()\n    arr2 = []\n    minus = -1\n    for i in range(n):\n        arr1.append(0)\n        arr2.append(0)\n    s1 = list()\n    s2 = set([])\n    arr1[0] = minus\n    s1.append(arr[0])\n    start = 1\n    for k in range(start, n):\n        while len(s1) > 0 and arr[k] > s1[minus]:\n            s1.pop()\n        if len(s1) == 0:\n            arr1[k] = minus\n        else:\n            arr1[k] = s1[minus]\n        s23 = 5 + 67\n        s23 += 3\n        s1.append(arr[k])\n    while len(s1) > 0:\n        s1.pop()\n        s234 = 5 + 67\n        s234 += 3\n    arr2[n - 1] = -1\n    s1.append(arr[n - 1])\n    r3 = 67\n    r4 = 56\n    r3 = r3 + r4\n    for i in range(n - 2, -1, -1):\n        while len(s1) > 0 and arr[i] >= s1[-1]:\n            s1.pop()\n        if len(s1) != 0:\n            arr2[i] = s1[-1]\n        else:\n            arr2[i] = minus\n        z = arr[i]\n        s1.append(z)\n    for i in range(n):\n        s = 5 + 67\n        s += 3\n        if arr1[i] != -1:\n            s2.add(arr1[i] - arr[i])\n        if arr2[i] != -1:\n            s2.add(arr2[i] - arr[i])\n        s22 = 5 + 67\n        s += 3\n    count = 0\n    count = len(s2)\n    print(count)", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s1 = list()\n    lmax = 0\n    labmax = a[0]\n    rmax = 0\n    rabmax = a[n - 1]\n    for x in range(1, n):\n        if a[x] > labmax:\n            labmax = a[x]\n        elif a[x] > a[x - 1] and a[x] <= lmax:\n            s1.append(lmax - a[x])\n        else:\n            for xx in range(x - 1, -1, -1):\n                if a[x] <= a[xx]:\n                    s1.append(a[xx] - a[x])\n                    lmax = a[xx]\n                    break\n    for x in range(n - 2, -1, -1):\n        if a[x] > rabmax:\n            rabmax = a[x]\n        elif a[x] > a[x + 1] and a[x] <= rmax:\n            s1.append(rmax - a[x])\n        else:\n            for xx in range(x + 1, n):\n                if a[xx] >= a[x]:\n                    s1.append(a[xx] - a[x])\n                    rmax = a[xx]\n                    break\n    print(len(set(s1)))", "for j in range(int(input())):\n    x = int(input())\n    a = list(map(int, input().split()))\n    supe = []\n    lef = [0] * x\n    for i in range(x):\n        while supe and supe[-1] < a[i]:\n            supe.pop()\n        if not supe:\n            lef[i] = -1\n        else:\n            lef[i] = supe[-1]\n        supe.append(a[i])\n    supe = []\n    r = [0] * x\n    for i in range(x - 1, -1, -1):\n        while supe and supe[-1] < a[i]:\n            supe.pop()\n        if not supe:\n            r[i] = -1\n        else:\n            r[i] = supe[-1]\n        supe.append(a[i])\n    shar = set()\n    answer = 0\n    for i in range(x):\n        l = lef[i]\n        right = r[i]\n        if l != -1 and l - a[i] not in shar:\n            shar.add(l - a[i])\n            answer += 1\n        if right != -1 and right - a[i] not in shar:\n            shar.add(right - a[i])\n            answer += 1\n    print(answer)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    l = [0] * n\n    r = [0] * n\n    stack = []\n    temp = []\n    l[0] = -1\n    stack.append(a[0])\n    for i in range(1, n):\n        while len(stack) > 0 and a[i] > stack[len(stack) - 1]:\n            stack.pop()\n        if len(stack) == 0:\n            l[i] = -1\n        else:\n            l[i] = stack[len(stack) - 1]\n        stack.append(a[i])\n    while len(stack) > 0:\n        stack.pop()\n    r[n - 1] = -1\n    stack.append(a[n - 1])\n    for i in range(n - 2, -1, -1):\n        while len(stack) > 0 and a[i] > stack[len(stack) - 1]:\n            stack.pop()\n        if len(stack) != 0:\n            r[i] = stack[len(stack) - 1]\n        else:\n            r[i] = -1\n        stack.append(a[i])\n    for i in range(n):\n        if l[i] != -1:\n            temp.append(l[i] - a[i])\n        if r[i] != -1:\n            temp.append(r[i] - a[i])\n    temp = set(temp)\n    print(len(temp))", "def hmmmmm(n, arr):\n    (a, b, c, s) = ([0] * n, [0] * n, [], set())\n    a[0] = -1\n    c.append(arr[0])\n    for i in range(0, n - 1):\n        while len(c) > 0 and arr[i + 1] > c[-1]:\n            c.pop()\n        if len(c) == 0:\n            a[i + 1] = -1\n        else:\n            a[i + 1] = c[-1]\n        c.append(arr[i + 1])\n    while len(c) > 0:\n        c.pop()\n    b[n - 1] = -1\n    c.append(arr[n - 1])\n    for i in range(n - 3, -2, -1):\n        while len(c) > 0 and arr[i + 1] >= c[-1]:\n            c.pop()\n        if len(c) != 0:\n            b[i + 1] = c[-1]\n        else:\n            b[i + 1] = -1\n        c.append(arr[i + 1])\n    for i in range(n):\n        if a[i] != -1:\n            s.add(a[i] - arr[i])\n        if b[i] != -1:\n            s.add(b[i] - arr[i])\n    return len(s)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(hmmmmm(n, arr))", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = [l[0]]\n    d = defaultdict(int)\n    for i in range(1, n):\n        while len(l1) and l[i] > l1[-1]:\n            c = l1.pop()\n            d[abs(l[i] - c)] += 1\n        if len(l1):\n            d[abs(l[i] - l1[-1])] += 1\n        l1.append(l[i])\n    ans = 0\n    for i in d:\n        ans += 1\n    print(ans)", "import sys, os\nfrom io import BytesIO, IOBase\nmod = 10 ** 9 + 7\nMod = 998244353\nINF = float('inf')\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\ntc = 1\ntc = int(input())\nfor test_cases in range(1, tc + 1):\n    (n,) = inp()\n    a = inp()\n    ans = set()\n\n    def nge():\n        stack = []\n        for i in a:\n            while stack and stack[-1] <= i:\n                ans.add(i - stack.pop())\n            stack.append(i)\n    nge()\n    a.reverse()\n    nge()\n    print(len(ans))", "def nge(arr):\n    n = len(arr)\n    nge = [-1] * n\n    stack = [arr[-1]]\n    s = 1\n    i = -2\n    while i >= -n:\n        if s > 0:\n            curr = arr[i]\n            while s > 0 and curr > stack[-1]:\n                stack.pop()\n                s -= 1\n            if s > 0:\n                nge[i] = stack[-1]\n        stack.append(arr[i])\n        s += 1\n        i -= 1\n    return nge\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ng1 = nge(arr)\n    arr = arr[::-1]\n    ng2 = nge(arr)\n    ng2 = ng2[::-1]\n    arr = arr[::-1]\n    st = set()\n    for i in range(n):\n        if ng1[i] != -1:\n            st.add(ng1[i] - arr[i])\n        if ng2[i] != -1:\n            st.add(ng2[i] - arr[i])\n    return len(st)\nfor _ in range(int(input())):\n    print(main())", "from itertools import *\n\ndef check(arr, start, end):\n    n = len(arr)\n    if arr[0] == start and arr[1] == end:\n        for i in range(1, n - 1):\n            if arr[i] % (i + 1) != 0:\n                return 0\n        return 1\n    else:\n        return 0\n\ndef func(n, start):\n    lst = []\n    for i in range(1, n + 1):\n        lst.append(i)\n    perm = permutations(lst)\n    end = 1\n    for i in perm:\n        if check(i, start, end) == 1:\n            print(i)\n\ndef pairs(arr):\n    st = []\n    pairs = []\n    st.append(arr[0])\n    for i in range(1, len(arr)):\n        while len(st) != 0 and arr[i] > st[-1]:\n            pairs.append((st[-1], arr[i]))\n            st.pop()\n        if len(st) != 0:\n            pairs.append((min(st[-1], arr[i]), max(st[-1], arr[i])))\n        st.append(arr[i])\n    return pairs\ntestcases = int(input())\nfor i in range(testcases):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    answer = pairs(arr)\n    count = 0\n    dic = {}\n    for i in answer:\n        diff = abs(i[0] - i[1])\n        if diff in dic:\n            dic[diff] += 1\n        else:\n            dic[diff] = 1\n            count += 1\n    print(count)", "def pairs(arr):\n    st = []\n    pairs = []\n    st.append(arr[0])\n    for i in range(1, len(arr)):\n        while len(st) != 0 and arr[i] > st[-1]:\n            pairs.append((st[-1], arr[i]))\n            st.pop()\n        if len(st) != 0:\n            pairs.append((min(st[-1], arr[i]), max(st[-1], arr[i])))\n        st.append(arr[i])\n    return pairs\nt = int(input())\nmod = 1000000007\nfor i in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    pair = pairs(arr)\n    s = set()\n    for i in pair:\n        s.add(abs(i[0] - i[1]))\n    print(len(s))"]