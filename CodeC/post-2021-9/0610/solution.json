["import numpy.fft as fft\n\ndef coeff(p, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    c = [0] * (1 << i + 1)\n    for p in p:\n        c[p] = 1\n    return c\n\ndef invcoeff(p, Max):\n    D = []\n    for i in range(Max + 1, len(p)):\n        if abs(p[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = list(map(int, input().split()[:N]))\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(p, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    c = [0] * (1 << i + 1)\n    for p in p:\n        c[p] = 1\n    return c\n\ndef invcoeff(p, Max):\n    D = []\n    for i in range(Max + 1, len(p)):\n        if abs(p[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = list(map(int, input().split()[:N]))\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(p, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    c = [0] * (1 << i + 1)\n    for p in p:\n        c[p] = 1\n    return c\n\ndef invcoeff(p, Max):\n    D = []\n    for i in range(Max + 1, len(p)):\n        if abs(p[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = list(map(int, input().split()[:N]))\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "import numpy.fft as f\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = f.rfft(coeff(A, M))\n    FFT_M_A = f.rfft(coeff(M_A, M))\n    return invcoeff(f.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor x in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "import numpy.fft as f\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = f.rfft(coeff(A, M))\n    FFT_M_A = f.rfft(coeff(M_A, M))\n    return invcoeff(f.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor x in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "import numpy.fft as fft\n\ndef coeff(P, Max):\n    for i in range(19):\n        if 1 << i > Max:\n            break\n    C = [0] * (1 << i + 1)\n    for p in P:\n        C[p] = 1\n    return C\n\ndef invcoeff(P, Max):\n    D = []\n    for i in range(Max + 1, len(P)):\n        if abs(P[i]) > 1e-09:\n            D.append(i - Max)\n    return D\n\ndef getdiffs(A):\n    M = max(A)\n    M_A = [M - a for a in A]\n    FFT_A = fft.rfft(coeff(A, M))\n    FFT_M_A = fft.rfft(coeff(M_A, M))\n    return invcoeff(fft.irfft(FFT_A * FFT_M_A), M)\nDIVS = [set() for N in range(2 * 10 ** 5)]\nfor i in range(1, 2 * 10 ** 5):\n    for k in range(i, 2 * 10 ** 5, i):\n        DIVS[k].add(i)\n\ndef main(N, A):\n    ABS = getdiffs(A)\n    DIV = set()\n    for absval in ABS:\n        DIV |= DIVS[absval]\n    for d in range(2, 2 * 10 ** 5 + 5):\n        if d not in DIV:\n            return d\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))"]