["for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (a, b, c) = (bin(a)[2:], bin(b)[2:], bin(c)[2:])\n    m = max(len(a), len(b), len(c))\n    a = '0' * (m - len(a)) + a\n    b = '0' * (m - len(b)) + b\n    c = '0' * (m - len(c)) + c\n    f = 0\n    ans = True\n    for i in range(m):\n        if a[i] + b[i] + c[i] == '001' or a[i] + b[i] + c[i] == '110':\n            f += 1\n    if f % 2 == 1:\n        ans = False\n    if ans:\n        print('YES')\n        continue\n    print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (a, b, c) = (bin(a)[2:], bin(b)[2:], bin(c)[2:])\n    m = max(len(a), len(b), len(c))\n    a = '0' * (m - len(a)) + a\n    b = '0' * (m - len(b)) + b\n    c = '0' * (m - len(c)) + c\n    f = 0\n    ans = True\n    for i in range(1, m + 1):\n        if a[-i] + b[-i] + c[-i] == '001' or a[-i] + b[-i] + c[-i] == '110':\n            f += 1\n    if f % 2 == 1:\n        ans = False\n    if ans:\n        print('YES')\n        continue\n    print('NO')", "def bit_gen(x):\n    l = [0 for _ in range(27)]\n    for i in range(1, 28):\n        l[-i] = x % 2\n        x = x // 2\n    return l\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (a, b, c) = (bin(a)[2:], bin(b)[2:], bin(c)[2:])\n    m = max(len(a), len(b), len(c))\n    a = '0' * (m - len(a)) + a\n    b = '0' * (m - len(b)) + b\n    c = '0' * (m - len(c)) + c\n    f = 0\n    ans = True\n    for i in range(1, m + 1):\n        if a[-i] + b[-i] + c[-i] == '001' or a[-i] + b[-i] + c[-i] == '110':\n            f = not f\n    if not f:\n        print('YES')\n        continue\n    print('NO')", "def ans(a, b, c):\n    x = ''\n    carry = 0\n    for i in range(0, len(bin(max(a, b, c))) - 2):\n        ai = a >> i & 1\n        bi = b >> i & 1\n        ci = c >> i & 1\n        if ai == bi == ci == 1:\n            if carry == 0:\n                x += '1'\n            else:\n                x += '0'\n        elif ai == bi == ci == 0:\n            if carry == 0:\n                x += '0'\n            else:\n                x += '1'\n        elif ai != bi and ci == 0:\n            if carry == 0:\n                x += '1'\n            else:\n                x += '0'\n        elif ai != bi and ci == 1:\n            if carry == 0:\n                x += '0'\n            else:\n                x += '1'\n        elif ai == bi == 1 and ci == 0:\n            if carry == 0:\n                carry = 1\n                x += '0'\n            else:\n                x += '1'\n                carry = 0\n        elif carry == 0:\n            x += '1'\n            carry = 1\n        else:\n            carry = 0\n            x += '0'\n    x = x[::-1]\n    x = int(x, 2)\n    if (a ^ x) + (b ^ x) == c ^ x:\n        return 'YES'\n    return 'NO'\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = list(map(int, input().split()))\n    print(ans(d[0], d[1], d[2]))\n    test_cases -= 1", "def bit_gen(x):\n    l = [0 for _ in range(27)]\n    for i in range(1, 28):\n        l[-i] = x % 2\n        x = x // 2\n    return l\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    a_ = bit_gen(a)\n    b_ = bit_gen(b)\n    c_ = bit_gen(c)\n    for i in range(1, 28):\n        if a_[-i] == 0 and b_[-i] == 0 and (c_[-i] == 1) or (a_[-i] == 1 and b_[-i] == 1 and (c_[-i] == 0)):\n            carry = not carry\n    if carry == 1:\n        print('NO')\n    else:\n        print('YES')", "def ans(a, b, c):\n    x = ''\n    carry = 0\n    for i in range(0, len(bin(max(a, b, c))) - 2):\n        ai = a >> i & 1\n        bi = b >> i & 1\n        ci = c >> i & 1\n        if ai == bi == ci == 1:\n            if carry == 0:\n                x += '1'\n            else:\n                x += '0'\n        elif ai == bi == ci == 0:\n            if carry == 0:\n                x += '0'\n            else:\n                x += '1'\n        elif ai != bi and ci == 0:\n            if carry == 0:\n                x += '1'\n            else:\n                x += '0'\n        elif ai != bi and ci == 1:\n            if carry == 0:\n                x += '0'\n            else:\n                x += '1'\n        elif ai == bi == 1 and ci == 0:\n            if carry == 0:\n                carry = 1\n                x += '0'\n            else:\n                x += '1'\n                carry = 0\n        elif carry == 0:\n            x += '1'\n            carry = 1\n        else:\n            carry = 0\n            x += '0'\n    x = x[::-1]\n    x = int(x, 2)\n    if (a ^ x) + (b ^ x) == c ^ x:\n        return 'YES'\n    return 'NO'\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = list(map(int, input().split()))\n    print(ans(d[0], d[1], d[2]))\n    test_cases -= 1", "def bit_gen(x):\n    l = [0 for _ in range(27)]\n    for i in range(1, 28):\n        l[-i] = x % 2\n        x = x // 2\n    return l\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    a_ = bit_gen(a)\n    b_ = bit_gen(b)\n    c_ = bit_gen(c)\n    for i in range(1, 28):\n        if a_[-i] == 0 and b_[-i] == 0 and (c_[-i] == 1) or (a_[-i] == 1 and b_[-i] == 1 and (c_[-i] == 0)):\n            carry = not carry\n    if carry == 1:\n        print('NO')\n    else:\n        print('YES')", "from functools import lru_cache\n\n@lru_cache()\ndef f(a, b, c, x, t):\n    if a == 0 and b == 0 and (c == 0):\n        return t == 0\n    p = (a % 2 ^ x) + (x ^ b % 2) + t\n    if p % 2 != c % 2 ^ x:\n        return False\n    return f(a >> 1, b >> 1, c >> 1, 0, p > 1) or f(a >> 1, b >> 1, c >> 1, 1, p > 1)\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    print('YES' if f(a, b, c, 0, 0) or f(a, b, c, 1, 0) else 'NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    for i in range(30):\n        v1 = a >> i & 1\n        v2 = b >> i & 1\n        v3 = c >> i & 1\n        for x in range(2):\n            if (v1 ^ x) + (v2 ^ x) + carry & 1 == v3 ^ x:\n                carry = int((v1 ^ x) + (v2 ^ x) + carry > 1)\n                break\n    if carry:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    for i in range(30):\n        v1 = a >> i & 1\n        v2 = b >> i & 1\n        v3 = c >> i & 1\n        for x in range(2):\n            if (v1 ^ x) + (v2 ^ x) + carry & 1 == v3 ^ x:\n                carry = int((v1 ^ x) + (v2 ^ x) + carry > 1)\n                break\n    if carry:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    count = 0\n    for i in range(28):\n        x = a >> i & 1\n        y = b >> i & 1\n        z = c >> i & 1\n        if x == y and y != z:\n            count += 1\n        if i > a and i > b and (i > c):\n            break\n    if count % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "def getBitSum(a, b, carry):\n    return a ^ b ^ carry\n\ndef getCarry(a, b, carry):\n    return (a & b) + (carry & (a ^ b))\n\ndef getIthBit(x, i):\n    return x >> i & 1\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b, c) = map(int, input().split())\n    result = 0\n    possibleSum = 0\n    possibleSumWithXor = 0\n    carry = 0\n    (ai, bi, ci) = (0, 0, 0)\n    (aix, bix, cix) = (0, 0, 0)\n    for i in range(27):\n        ai = getIthBit(a, i)\n        bi = getIthBit(b, i)\n        ci = getIthBit(c, i)\n        possibleSum = getBitSum(ai ^ 0, bi ^ 0, carry)\n        aix = ai ^ 1\n        bix = bi ^ 1\n        cix = ci ^ 1\n        possibleSumWithXor = getBitSum(aix, bix, carry)\n        if possibleSum == ci:\n            carry = getCarry(ai, bi, carry)\n        elif possibleSumWithXor == cix:\n            carry = getCarry(aix, bix, carry)\n            result = result | 1 << i\n        else:\n            break\n    if carry == 0:\n        print('YES')\n    else:\n        print('NO')", "def getBitSum(a, b, carry):\n    return a ^ b ^ carry\n\ndef getCarry(a, b, carry):\n    return (a & b) + (carry & (a ^ b))\n\ndef getIthBit(x, i):\n    return x >> i & 1\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b, c) = map(int, input().split())\n    result = 0\n    possibleSum = 0\n    possibleSumWithXor = 0\n    carry = 0\n    (ai, bi, ci) = (0, 0, 0)\n    (aix, bix, cix) = (0, 0, 0)\n    for i in range(27):\n        ai = getIthBit(a, i)\n        bi = getIthBit(b, i)\n        ci = getIthBit(c, i)\n        possibleSum = getBitSum(ai ^ 0, bi ^ 0, carry)\n        aix = ai ^ 1\n        bix = bi ^ 1\n        cix = ci ^ 1\n        possibleSumWithXor = getBitSum(aix, bix, carry)\n        if possibleSum == ci:\n            carry = getCarry(ai, bi, carry)\n        elif possibleSumWithXor == cix:\n            carry = getCarry(aix, bix, carry)\n            result = result | 1 << i\n        else:\n            break\n    if carry == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    for bits in range(28):\n        x = a >> bits & 1\n        y = b >> bits & 1\n        z = c >> bits & 1\n        if x == y and y != z:\n            carry += 1\n        if bits > a and bits > b and (bits > c):\n            break\n    if carry % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "def getBitSum(a, b, carry):\n    return a ^ b ^ carry\n\ndef getCarry(a, b, carry):\n    return (a & b) + (carry & (a ^ b))\n\ndef getIthBit(x, i):\n    return x >> i & 1\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b, c) = map(int, input().split())\n    result = 0\n    possibleSum = 0\n    possibleSumWithXor = 0\n    carry = 0\n    (ai, bi, ci) = (0, 0, 0)\n    (aix, bix, cix) = (0, 0, 0)\n    for i in range(27):\n        ai = getIthBit(a, i)\n        bi = getIthBit(b, i)\n        ci = getIthBit(c, i)\n        possibleSum = getBitSum(ai ^ 0, bi ^ 0, carry)\n        aix = ai ^ 1\n        bix = bi ^ 1\n        cix = ci ^ 1\n        possibleSumWithXor = getBitSum(aix, bix, carry)\n        if possibleSum == ci:\n            carry = getCarry(ai, bi, carry)\n        elif possibleSumWithXor == cix:\n            carry = getCarry(aix, bix, carry)\n            result = result | 1 << i\n        else:\n            break\n    if carry == 0:\n        print('YES')\n    else:\n        print('NO')", "def getBitSum(a, b, carry):\n    return a ^ b ^ carry\n\ndef getCarry(a, b, carry):\n    return (a & b) + (carry & (a ^ b))\n\ndef getIthBit(x, i):\n    return x >> i & 1\nt = int(input())\nwhile t:\n    t -= 1\n    (a, b, c) = map(int, input().split())\n    result = 0\n    possibleSum = 0\n    possibleSumWithXor = 0\n    carry = 0\n    (ai, bi, ci) = (0, 0, 0)\n    (aix, bix, cix) = (0, 0, 0)\n    for i in range(27):\n        ai = getIthBit(a, i)\n        bi = getIthBit(b, i)\n        ci = getIthBit(c, i)\n        possibleSum = getBitSum(ai ^ 0, bi ^ 0, carry)\n        aix = ai ^ 1\n        bix = bi ^ 1\n        cix = ci ^ 1\n        possibleSumWithXor = getBitSum(aix, bix, carry)\n        if possibleSum == ci:\n            carry = getCarry(ai, bi, carry)\n        elif possibleSumWithXor == cix:\n            carry = getCarry(aix, bix, carry)\n            result = result | 1 << i\n        else:\n            break\n    if carry == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = list(map(int, input().split()))\n    ba = bin(a)[2:]\n    bb = bin(b)[2:]\n    bc = bin(c)[2:]\n    m = max(len(ba), len(bb), len(bc))\n    ba = '0' * (m - len(ba)) + ba\n    bb = '0' * (m - len(bb)) + bb\n    bc = '0' * (m - len(bc)) + bc\n    ba = ba[::-1]\n    bb = bb[::-1]\n    bc = bc[::-1]\n    c = 0\n    for i in range(len(ba)):\n        ua = int(ba[i])\n        ub = int(bb[i])\n        uc = int(bc[i])\n        f = c + ua + ub\n        r = f % 2\n        c = f // 2\n        if r != uc:\n            ua = (ua + 1) % 2\n            ub = (ub + 1) % 2\n            uc = (uc + 1) % 2\n            f = c + ua + ub\n            c = f // 2\n    if c == 1:\n        ans = 'NO'\n    else:\n        ans = 'YES'\n    print(ans)", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    for i in range(30):\n        (x, y, z) = (a >> i & 1, b >> i & 1, c >> i & 1)\n        carry ^= x == y and y != z\n    print('YES' if not carry else 'NO')", "import sys, threading\nimport math\nfrom os import path\nfrom collections import deque, defaultdict\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom functools import cmp_to_key\nfrom random import randint\nimport heapq\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\nMAXN = 1123456\n\nclass mydict:\n\n    def __init__(self, func=lambda : 0):\n        self.random = randint(0, 1 << 32)\n        self.default = func\n        self.dict = {}\n\n    def __getitem__(self, key):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            self.dict[mykey] = self.default()\n        return self.dict[mykey]\n\n    def get(self, key, default):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            return default\n        return self.dict[mykey]\n\n    def __setitem__(self, key, item):\n        mykey = self.random ^ key\n        self.dict[mykey] = item\n\n    def getkeys(self):\n        return [self.random ^ i for i in self.dict]\n\n    def values(self):\n        var = []\n        for i in self.dict:\n            var.append(self.dict[i])\n        return var\n\n    def __str__(self):\n        return f'{[(self.random ^ i, self.dict[i]) for i in self.dict]}'\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef mod(n):\n    return n % (1000000000 + 7)\n\ndef solve(t):\n    (a, b, c) = readInts()\n    carry = False\n    for i in range(30):\n        ba = a & 1 << i\n        bb = b & 1 << i\n        bc = c & 1 << i\n        if ba != bb:\n            continue\n        else:\n            if bc == ba == bb:\n                continue\n            if carry:\n                carry = False\n            else:\n                carry = True\n    if carry:\n        print('NO')\n    else:\n        print('YES')\n\ndef main():\n    t = 1\n    if path.exists('F:/Comp Programming/input.txt'):\n        sys.stdin = open('F:/Comp Programming/input.txt', 'r')\n        sys.stdout = open('F:/Comp Programming/output1.txt', 'w')\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    for i in range(30):\n        (x, y, z) = (a >> i & 1, b >> i & 1, c >> i & 1)\n        carry ^= x == y and y != z\n    print('YES' if not carry else 'NO')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    for bit in range(32):\n        (x, y, z) = (a >> bit & 1, b >> bit & 1, c >> bit & 1)\n        if x == y and y != z:\n            carry ^= 1\n    print(['YES', 'NO'][carry])", "from sys import stdin\ninput = stdin.readline\nMAX = 30\n\ndef solve(A, B, C):\n    carry = 0\n    for bit in range(MAX):\n        a = A >> bit & 1\n        b = B >> bit & 1\n        c = C >> bit & 1\n        if (a, b, c) in [(0, 0, 1), (1, 1, 0)]:\n            carry = 1 - carry\n    if carry == 0:\n        return 'YES'\n    else:\n        return 'NO'\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    (A, B, C) = [int(x) for x in input().strip().split()]\n    print(solve(A, B, C))", "from sys import stdin\ninput = stdin.readline\nMAX = 30\n\ndef solve(A, B, C):\n    carry = 0\n    for bit in range(MAX):\n        a = A >> bit & 1\n        b = B >> bit & 1\n        c = C >> bit & 1\n        if carry == 0:\n            if (a, b, c) in [(0, 0, 1), (1, 1, 0)]:\n                carry = 1\n        elif (a, b, c) in [(0, 0, 1), (1, 1, 0)]:\n            carry = 0\n    if carry == 0:\n        return 'YES'\n    else:\n        return 'NO'\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    (A, B, C) = [int(x) for x in input().strip().split()]\n    print(solve(A, B, C))", "def s(a, b, c):\n    r = 0\n    for i in range(28):\n        (x, y, z) = (a >> i & 1, b >> i & 1, c >> i & 1)\n        if x == y and y != z:\n            r ^= 1\n    return r\nt = int(input())\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    p = s(a, b, c)\n    if p:\n        print('NO')\n    else:\n        print('YES')", "def s(a, b, c):\n    r = 0\n    for i in range(28):\n        (x, y, z) = (a >> i & 1, b >> i & 1, c >> i & 1)\n        if x == y and y != z:\n            r ^= 1\n    return r\nt = int(input())\nfor i in range(t):\n    (a, b, c) = map(int, input().split())\n    p = s(a, b, c)\n    if p:\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    i = 0\n    con = 0\n    while i < 28:\n        x = a & 1\n        y = b & 1\n        z = c & 1\n        if x == y and x != z:\n            con = con + 1\n        i = i + 1\n        a = a >> 1\n        b = b >> 1\n        c = c >> 1\n    if con % 2:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (x, y, z) = map(int, input().split())\n    carry = 0\n    for bit in range(28):\n        a = x >> bit & 1\n        b = y >> bit & 1\n        c = z >> bit & 1\n        if a == b and b != c:\n            carry = carry ^ 1\n    if carry:\n        print('NO')\n    else:\n        print('YES')", "def soln(a, b, c):\n\n    def form(s):\n        return '0' * (32 - len(s)) + s\n    a = form(bin(a)[2:])\n    b = form(bin(b)[2:])\n    c = form(bin(c)[2:])\n    count = 0\n    for i in range(31, 0, -1):\n        if a[i] == b[i] and a[i] != c[i]:\n            count += 1\n    return 'YES' if not count & 1 else 'NO'\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    print(soln(a, b, c))", "def soln(a, b, c):\n\n    def form(s):\n        return '0' * (32 - len(s)) + s\n    a = form(bin(a)[2:])\n    b = form(bin(b)[2:])\n    c = form(bin(c)[2:])\n    carry = 0\n    for i in range(31, 0, -1):\n        if not carry:\n            if a[i] == b[i] and a[i] != c[i]:\n                carry = 1\n        elif a[i] == b[i] and a[i] != c[i]:\n            carry = 0\n    return 'YES' if not carry else 'NO'\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    print(soln(a, b, c))", "def solve(a, b, c):\n    carry = 0\n    for i in range(28):\n        if a & 1 == b & 1 and b & 1 != c & 1:\n            carry ^= 1\n        a >>= 1\n        b >>= 1\n        c >>= 1\n    if carry:\n        return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = [int(x) for x in input().split()]\n    ans = solve(a, b, c)\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "def solve(a, b, c):\n    carry = 0\n    for i in range(28):\n        if not carry:\n            if a & 1 == b & 1 and b & 1 != c & 1:\n                carry ^= 1\n        elif a & 1 == b & 1 and b & 1 != c & 1:\n            carry ^= 1\n        a >>= 1\n        b >>= 1\n        c >>= 1\n    if carry:\n        return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = [int(x) for x in input().split()]\n    ans = solve(a, b, c)\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (A, B, C) = map(int, input().split())\n    CARRY = 0\n    for BIT in range(28):\n        (X, Y, Z) = (A >> BIT & 1, B >> BIT & 1, C >> BIT & 1)\n        if X == Y and Y != Z:\n            CARRY ^= 1\n    print('NO' if CARRY else 'YES')", "def get_bin(n):\n    l = [0 for _ in range(28)]\n    for i in range(1, 28):\n        l[-i] = n % 2\n        n //= 2\n    return l\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (a1, b1, c1) = (get_bin(a), get_bin(b), get_bin(c))\n    car = 0\n    for i in range(1, 28):\n        if a1[-i] == b1[-i] and c1[-i] != b1[-i]:\n            car = not car\n    if car:\n        print('NO')\n    else:\n        print('YES')", "def get_bin(n):\n    l = [0 for _ in range(28)]\n    for i in range(1, 28):\n        l[-i] = n % 2\n        n //= 2\n    return l\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (a1, b1, c1) = (get_bin(a), get_bin(b), get_bin(c))\n    car = 0\n    for i in range(1, 28):\n        if a1[-i] == b1[-i] and c1[-i] != b1[-i]:\n            car = not car\n    if car:\n        print('NO')\n    else:\n        print('YES')", "def get_bin(n):\n    l = [0 for _ in range(28)]\n    for i in range(1, 28):\n        l[-i] = n % 2\n        n //= 2\n    return l\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    (a1, b1, c1) = (get_bin(a), get_bin(b), get_bin(c))\n    car = 0\n    for i in range(1, 28):\n        if a1[-i] == b1[-i] and c1[-i] != b1[-i]:\n            car = not car\n    if car:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nwhile t:\n    (a, b, c) = map(int, input().split())\n    k = 0\n    for i in range(28):\n        (x, y, z) = (a >> i & 1, b >> i & 1, c >> i & 1)\n        if x == y and y != z:\n            k ^= 1\n    if k:\n        print('NO')\n    else:\n        print('YES')\n    t -= 1", "t = int(input())\nwhile t:\n    (a, b, c) = map(int, input().split())\n    k = 0\n    for i in range(28):\n        (x, y, z) = (a >> i & 1, b >> i & 1, c >> i & 1)\n        if x == y and y != z:\n            k ^= 1\n    if k:\n        print('NO')\n    else:\n        print('YES')\n    t -= 1", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    p = 1\n    cnt = 0\n    for i in range(30):\n        if a & p == 0 and b & p == 0 and (c & p != 0) or (a & p != 0 and b & p != 0 and (c & p == 0)):\n            cnt += 1\n        p *= 2\n    if cnt % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    p = 1\n    cnt = 0\n    for i in range(30):\n        if a & p == 0 and b & p == 0 and (c & p != 0) or (a & p != 0 and b & p != 0 and (c & p == 0)):\n            cnt += 1\n        p *= 2\n    if cnt % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nsys.setrecursionlimit(10 ** 8)\nfor _ in range(int(input())):\n    (a, b, c) = map(int, input().split())\n    p = 1\n    cnt = 0\n    for i in range(30):\n        if a & p == 0 and b & p == 0 and (c & p != 0) or (a & p != 0 and b & p != 0 and (c & p == 0)):\n            cnt += 1\n        p *= 2\n    if cnt % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "def bit_gen(x):\n    l = [0 for _ in range(27)]\n    for i in range(1, 28):\n        l[-i] = x % 2\n        x = x // 2\n    return l\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    a_ = bit_gen(a)\n    b_ = bit_gen(b)\n    c_ = bit_gen(c)\n    for i in range(1, 28):\n        if a_[-i] == 0 and b_[-i] == 0 and (c_[-i] == 1) or (a_[-i] == 1 and b_[-i] == 1 and (c_[-i] == 0)):\n            carry = not carry\n    if carry == 1:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    bina = str(bin(a))[2:]\n    binb = str(bin(b))[2:]\n    binc = str(bin(c))[2:]\n    lena = len(bina)\n    lenb = len(binb)\n    lenc = len(binc)\n    n = max([lena, lenb, lenc])\n    bina = (n - lena) * '0' + bina\n    binb = (n - lenb) * '0' + binb\n    binc = (n - lenc) * '0' + binc\n    bina = bina[::-1]\n    binb = binb[::-1]\n    binc = binc[::-1]\n    carry = 0\n    for i in range(n):\n        if carry == 0:\n            if bina[i] == binb[i] and binb[i] == binc[i] or bina[i] != binb[i]:\n                continue\n            else:\n                carry = 1\n        elif bina[i] == binb[i] and bina[i] != binc[i]:\n            carry = 0\n            continue\n        elif bina[i] == binb[i] and binb[i] == binc[i]:\n            continue\n        elif bina[i] != binb[i]:\n            continue\n    if carry == 0:\n        print('YES')\n    else:\n        print('NO')", "def bit_gen(x):\n    l = [0 for _ in range(27)]\n    for i in range(1, 28):\n        l[-i] = x % 2\n        x = x // 2\n    return l\nt = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    carry = 0\n    a_ = bit_gen(a)\n    b_ = bit_gen(b)\n    c_ = bit_gen(c)\n    for i in range(1, 28):\n        if a_[-i] == 0 and b_[-i] == 0 and (c_[-i] == 1) or (a_[-i] == 1 and b_[-i] == 1 and (c_[-i] == 0)):\n            carry = not carry\n    if carry == 1:\n        print('NO')\n    else:\n        print('YES')", "def has_ans(a, b, c, s):\n    if a == 0 and b == 0 and (c == 0):\n        return s == 0\n    next_bit = 0\n    if ((next_bit ^ a) + (next_bit ^ b)) % 2 != ((c ^ next_bit) + s) % 2:\n        next_bit = 1\n    s += -(a % 2 ^ next_bit) - (b % 2 ^ next_bit) + (c % 2 ^ next_bit)\n    s /= 2\n    return has_ans(int(a / 2), int(b / 2), int(c / 2), s)\nt = int(input())\nfor t0 in range(t):\n    (a, b, c) = list(map(int, input().split()))\n    if has_ans(a, b, c, 0):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    p = 1\n    cnt = 0\n    for i in range(30):\n        if a & p == 0 and b & p == 0 and (c & p != 0) or (a & p != 0 and b & p != 0 and (c & p == 0)):\n            cnt += 1\n        p *= 2\n    if cnt % 2 == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys, bisect\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (x, y, z) = map(int, input().split())\n    a = '{:027b}'.format(x)\n    b = '{:027b}'.format(y)\n    c = '{:027b}'.format(z)\n    ca = 0\n    for i in range(26, -1, -1):\n        x = int(a[i]) + int(b[i]) + ca\n        t = ca\n        ca = (x - x % 2) // 2\n        if x % 2 == int(c[i]):\n            continue\n        elif a[i] == '1' and b[i] == '1' and (c[i] == '1'):\n            ca -= 1\n        elif a[i] == '0' and b[i] == '0' and (c[i] == '1'):\n            ca += 1\n        elif a[i] == '0' and b[i] == '0' and (c[i] == '0'):\n            ca += 1\n        elif a[i] == '1' and b[i] == '1' and (c[i] == '0'):\n            ca -= 1\n        else:\n            continue\n    if ca == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef possible(a, b, c, carry):\n    if a + b + c == 0:\n        return carry == 0\n    ax = a % 2\n    bx = b % 2\n    cx = c % 2\n    if (ax + bx + carry) % 2 == cx:\n        if possible(a >> 1, b >> 1, c >> 1, (ax + bx + carry) // 2):\n            return True\n    if (1 - ax + 1 - bx + carry) % 2 == 1 - cx:\n        if possible(a >> 1, b >> 1, c >> 1, (1 - ax + 1 - bx + carry) // 2):\n            return True\n    return False\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    print('YES' if possible(a, b, c, 0) else 'NO')", "from collections import *\nfrom itertools import *\nfrom functools import *\nfrom heapq import *\nimport sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (a, b, c) = list(map(int, input().split()))\n    a1 = '{0:b}'.format(a)\n    b1 = '{0:b}'.format(b)\n    c1 = '{0:b}'.format(c)\n    a1 = a1[::-1]\n    b1 = b1[::-1]\n    c1 = c1[::-1]\n    a1 += '0' * (33 - len(a1))\n    b1 += '0' * (33 - len(b1))\n    c1 += '0' * (33 - len(c1))\n    crr = 0\n    for x in range(33):\n        if a1[x] != b1[x]:\n            continue\n        elif a1[x] == c1[x]:\n            continue\n        else:\n            crr = 1 - crr\n    if crr:\n        print('NO')\n    else:\n        print('YES')"]