["import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cd = {}\n    for i in range(32):\n        cd[i] = 0\n    counts = [cd]\n    for j in range(n):\n        newc = counts[j].copy()\n        if a[j] != 0:\n            digs = int(math.log2(a[j])) + 1\n        if a[j] == 0:\n            digs = 0\n        newc[digs] += 1\n        counts.append(newc)\n    q = int(input())\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        if x != 0:\n            xd = int(math.log2(x)) + 1\n        if x == 0:\n            xd = 0\n        print(r - l + 1 - (counts[r][xd] - counts[l - 1][xd]))", "import math as m\n\ndef msb(k):\n    cnt = 0\n    while k:\n        k = k >> 1\n        cnt += 1\n    return cnt\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = msb(a[i])\n    lst = [[None] * n for _ in range(33)]\n    for i in range(33):\n        c = 0\n        for j in range(n):\n            if a[j] == i:\n                c += 1\n                lst[i][j] = c\n            else:\n                lst[i][j] = c\n    q = int(input())\n    for l in range(q):\n        (l, r, x) = map(int, input().split())\n        x = msb(x)\n        l = l - 1\n        r = r - 1\n        if a[l] == x:\n            print(r - l - (lst[x][r] - lst[x][l]))\n        else:\n            print(r - l + 1 - (lst[x][r] - lst[x][l]))", "import math as mt\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    p = {}\n    for i in range(32):\n        p[i] = 0\n    count = [p]\n    for j in range(n):\n        temp = count[j].copy()\n        if a[j] != 0:\n            highestBit = int(mt.log2(a[j])) + 1\n        else:\n            highestBit = 0\n        temp[highestBit] += 1\n        count.append(temp)\n    for _ in range(q):\n        (L, R, X) = map(int, input().split())\n        if X != 0:\n            xd = int(mt.log2(X)) + 1\n        else:\n            xd = 0\n        print(R - L + 1 - (count[R][xd] - count[L - 1][xd]))", "import math as mt\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    p = {}\n    for i in range(32):\n        p[i] = 0\n    count = [p]\n    for j in range(n):\n        temp = count[j].copy()\n        if a[j] != 0:\n            highestBit = int(mt.log2(a[j])) + 1\n        else:\n            highestBit = 0\n        temp[highestBit] += 1\n        count.append(temp)\n    for _ in range(q):\n        (L, R, X) = map(int, input().split())\n        if X != 0:\n            xd = int(mt.log2(X)) + 1\n        else:\n            xd = 0\n        print(R - L + 1 - (count[R][xd] - count[L - 1][xd]))", "import math as mt\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    p = {}\n    for i in range(32):\n        p[i] = 0\n    count = [p]\n    for j in range(n):\n        temp = count[j].copy()\n        if a[j] != 0:\n            highestBit = int(mt.log2(a[j])) + 1\n        else:\n            highestBit = 0\n        temp[highestBit] += 1\n        count.append(temp)\n    for _ in range(q):\n        (L, R, X) = map(int, input().split())\n        if X != 0:\n            xd = int(mt.log2(X)) + 1\n        else:\n            xd = 0\n        print(R - L + 1 - (count[R][xd] - count[L - 1][xd]))", "import math as mt\ntest_case = int(input())\nfor test in range(test_case):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    p = {}\n    for i in range(32):\n        p[i] = 0\n    count = [p]\n    for j in range(n):\n        temp = count[j].copy()\n        if a[j] != 0:\n            highestBit = int(mt.log2(a[j])) + 1\n        else:\n            highestBit = 0\n        temp[highestBit] += 1\n        count.append(temp)\n    for _ in range(q):\n        (L, R, X) = map(int, input().split())\n        if X != 0:\n            xd = int(mt.log2(X)) + 1\n        else:\n            xd = 0\n        print(R - L + 1 - (count[R][xd] - count[L - 1][xd]))", "import math\n\ndef helper(n):\n    if n == 0:\n        return 0\n    bits = 1\n    while n >> 1:\n        n = n >> 1\n        bits += 1\n    return bits\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    que = int(input())\n    res = []\n    for i in range(que):\n        res.append(list(map(int, input().split())))\n    myst = [[0 for p in range(n + 1)] for k in range(33)]\n    for k in range(1, n + 1):\n        ms = helper(arr[k - 1])\n        for j in range(33):\n            myst[j][k] = myst[j][k - 1] + (j == ms)\n    for a in res:\n        s = helper(a[2])\n        print(a[1] - a[0] + 1 - myst[s][a[1]] + myst[s][a[0] - 1])", "from typing import Iterable\nimport numpy as np\nbit_length = lambda arr: np.ceil(np.log2(arr + 1)).astype(int)\n\ndef prepare(n: int, a: Iterable[int]) -> np.ndarray:\n    bit_lengths = bit_length(np.fromiter(a, dtype=int))\n    prefix_counts = (np.hstack(([-1], bit_lengths)) == np.arange(32).reshape(-1, 1)).cumsum(axis=1)\n    return prefix_counts\n\ndef query(prefix_counts: np.ndarray, l: int, r: int, x: int) -> int:\n    bl = x.bit_length()\n    return r - l - (prefix_counts[bl, r] - prefix_counts[bl, l])\n\ndef run():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        a = map(int, input().split())\n        ds = prepare(n, a)\n        q = int(input())\n        for _ in range(q):\n            (l, r, x) = map(int, input().split())\n            answer = query(ds, l - 1, r, x)\n            print(answer)\nrun()", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    mainArray = list(map(int, input().split()))\n    Queries = int(input())\n    P = {}\n    for i in range(32):\n        P[i] = 0\n    counts = [P]\n    for j in range(N):\n        tempArray = counts[j].copy()\n        if mainArray[j] != 0:\n            highestBit = int(math.log2(mainArray[j])) + 1\n        else:\n            highestBit = 0\n        tempArray[highestBit] += 1\n        counts.append(tempArray)\n    for _ in range(Queries):\n        (L, R, X) = map(int, input().split())\n        if X != 0:\n            xd = int(math.log2(X)) + 1\n        else:\n            xd = 0\n        print(R - L + 1 - (counts[R][xd] - counts[L - 1][xd]))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cd = {}\n    for i in range(32):\n        cd[i] = 0\n    counts = [cd]\n    for j in range(n):\n        newc = counts[j].copy()\n        if a[j] != 0:\n            digs = int(math.log2(a[j])) + 1\n        if a[j] == 0:\n            digs = 0\n        newc[digs] += 1\n        counts.append(newc)\n    q = int(input())\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        if x != 0:\n            xd = int(math.log2(x)) + 1\n        if x == 0:\n            xd = 0\n        print(r - l + 1 - (counts[r][xd] - counts[l - 1][xd]))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sett = [[0 for i in range(32)] for j in range(n + 1)]\n    for i in range(n):\n        ele = arr[i]\n        msb = 0\n        while ele > 0:\n            msb += 1\n            ele = ele // 2\n        for k in range(32):\n            sett[i + 1][k] = sett[i][k]\n        sett[i + 1][msb] += 1\n    q = int(input())\n    for i in range(q):\n        count = 0\n        vv = list(map(int, input().split()))\n        l = vv[0]\n        r = vv[1]\n        x = vv[2]\n        ms = 0\n        while x > 0:\n            ms += 1\n            x = x // 2\n        for m in range(32):\n            if m != ms:\n                count += sett[r][m] - sett[l - 1][m]\n        print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = []\n    for k in range(32):\n        L = []\n        c = 0\n        for l in range(n):\n            if k == 0:\n                if arr[l] == 0:\n                    c += 1\n                L.append(c)\n            else:\n                a = bin(arr[l])[2:]\n                if len(a) == k and a != '0':\n                    c += 1\n                L.append(c)\n        res.append(L)\n    q = int(input())\n    for j in range(q):\n        (l, r, x) = list(map(int, input().split()))\n        if x == 0:\n            b = 0\n        else:\n            b = len(bin(x)[2:])\n        if l - 1 == 0:\n            tot = res[b][r - 1]\n        else:\n            tot = res[b][r - 1] - res[b][l - 2]\n        print(r - l + 1 - tot)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = []\n    for k in range(32):\n        L = []\n        c = 0\n        for l in range(n):\n            if k == 0:\n                if arr[l] == 0:\n                    c += 1\n                L.append(c)\n            else:\n                a = bin(arr[l])[2:]\n                if len(a) == k and a != '0':\n                    c += 1\n                L.append(c)\n        res.append(L)\n    q = int(input())\n    for j in range(q):\n        (l, r, x) = list(map(int, input().split()))\n        if x == 0:\n            b = 0\n        else:\n            b = len(bin(x)[2:])\n        if l - 1 == 0:\n            tot = res[b][r - 1]\n        else:\n            tot = res[b][r - 1] - res[b][l - 2]\n        print(r - l + 1 - tot)", "import math\n\ndef msb(s):\n    if s == 0:\n        return 0\n    biti = 1\n    while s >> 1:\n        s = s >> 1\n        biti += 1\n    return biti\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    b = []\n    for i in range(q):\n        b.append(list(map(int, input().split())))\n    prec = [[0 for p in range(n + 1)] for j in range(33)]\n    for k in range(1, n + 1):\n        msbi = msb(a[k - 1])\n        for j in range(33):\n            prec[j][k] = prec[j][k - 1] + (j == msbi)\n    for l in b:\n        s = msb(l[2])\n        print(l[1] - l[0] + 1 - prec[s][l[1]] + prec[s][l[0] - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\n\ndef msb(s):\n    if s == 0:\n        return 0\n    biti = 1\n    while s >> 1:\n        s = s >> 1\n        biti += 1\n    return biti\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    b = []\n    for i in range(q):\n        b.append(list(map(int, input().split())))\n    prec = [[0 for p in range(n + 1)] for j in range(33)]\n    for k in range(1, n + 1):\n        msbi = msb(a[k - 1])\n        for j in range(33):\n            prec[j][k] = prec[j][k - 1] + (j == msbi)\n    for l in b:\n        s = msb(l[2])\n        print(l[1] - l[0] + 1 - prec[s][l[1]] + prec[s][l[0] - 1])", "for i in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    li = []\n    for i in arr:\n        if i == 0:\n            li.append(0)\n        elif i == 1:\n            li.append(1)\n        else:\n            j = 0\n            b = i\n            while b > 0:\n                b = b >> 1\n                j += 1\n            li.append(j)\n    l1 = [[0 for k in range(n)] for j in range(32)]\n    b = li[0]\n    l1[b][0] = 1\n    for j in range(1, n):\n        b = li[j]\n        l1[b][j] = l1[b][j - 1] + 1\n        for k in range(32):\n            if k != b:\n                l1[k][j] = l1[k][j - 1]\n    q = int(input())\n    for i in range(q):\n        (L, R, X) = map(int, input().split())\n        x = 0\n        if X == 0:\n            x = 0\n        elif X == 1:\n            x = 1\n        else:\n            i = 0\n            c = X\n            while c > 0:\n                c = c >> 1\n                i += 1\n            x = i\n        if L > 1:\n            print(R - L + 1 - (l1[x][R - 1] - l1[x][L - 2]))\n        else:\n            print(R - L + 1 - l1[x][R - 1])", "for i in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    li = []\n    for i in arr:\n        if i == 0:\n            li.append(0)\n        elif i == 1:\n            li.append(1)\n        else:\n            j = 0\n            b = i\n            while b > 0:\n                b = b >> 1\n                j += 1\n            li.append(j)\n    l1 = [[0 for k in range(n)] for j in range(32)]\n    b = li[0]\n    l1[b][0] = 1\n    for j in range(1, n):\n        b = li[j]\n        l1[b][j] = l1[b][j - 1] + 1\n        for k in range(32):\n            if k != b:\n                l1[k][j] = l1[k][j - 1]\n    q = int(input())\n    for i in range(q):\n        (L, R, X) = map(int, input().split())\n        x = 0\n        if X == 0:\n            x = 0\n        elif X == 1:\n            x = 1\n        else:\n            i = 0\n            c = X\n            while c > 0:\n                c = c >> 1\n                i += 1\n            x = i\n        if L > 1:\n            print(R - L + 1 - (l1[x][R - 1] - l1[x][L - 2]))\n        else:\n            print(R - L + 1 - l1[x][R - 1])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    A = [int(a) for a in input().split()]\n    B = []\n    for a in A:\n        if a == 0:\n            B.append(0)\n        elif a == 1:\n            B.append(1)\n        else:\n            i = 0\n            b = a\n            while b > 0:\n                b = b >> 1\n                i += 1\n            B.append(i)\n    C = [[0 for j in range(N)] for i in range(32)]\n    b = B[0]\n    C[b][0] = 1\n    for i in range(1, N):\n        b = B[i]\n        C[b][i] = C[b][i - 1] + 1\n        for j in range(32):\n            if j != b:\n                C[j][i] = C[j][i - 1]\n    Q = int(input())\n    for i in range(Q):\n        (L, R, X) = map(int, input().split())\n        x = 0\n        if X == 0:\n            x = 0\n        elif X == 1:\n            x = 1\n        else:\n            i = 0\n            c = X\n            while c > 0:\n                c = c >> 1\n                i += 1\n            x = i\n        if L > 1:\n            print(R - L + 1 - (C[x][R - 1] - C[x][L - 2]))\n        else:\n            print(R - L + 1 - C[x][R - 1])", "from math import log2\n\ndef query(bits, L, R, X):\n    L = L - 1\n    R = R - 1\n    s = 0\n    if X == 0:\n        b = 0\n    else:\n        b = 1 + int(log2(X))\n    for bit in range(32):\n        if bit != b:\n            s += bits[bit][R] - (bits[bit][L - 1] if L != 0 else 0)\n    return s\nfor test in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    bits = [[0 for i in range(N)] for bit in range(32)]\n    for i in range(N):\n        if A[i] == 0:\n            b = 0\n        else:\n            b = 1 + int(log2(A[i]))\n        for bit in range(32):\n            bits[bit][i] = bits[bit][i - 1] + (bit == b) if i != 0 else int(bit == b)\n    M = int(input())\n    for i in range(M):\n        (L, R, X) = map(int, input().split())\n        print(query(bits, L, R, X))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    memo = [[0] for i in range(32)]\n    arrr = [None] + [int(math.log(i, 2)) + 1 if i != 0 else 0 for i in arr]\n    for i in range(32):\n        for j in range(1, n + 1):\n            if i == arrr[j]:\n                memo[i].append(memo[i][-1])\n            else:\n                memo[i].append(memo[i][-1] + 1)\n    for _ in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        x = int(math.log(x, 2)) + 1 if x != 0 else 0\n        print(memo[x][r] - memo[x][l - 1])", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nfrom collections import defaultdict\nimport sys\nimport math\nsys.setrecursionlimit(100000000)\nt = ri()\nfor test in range(t):\n    n = ri()\n    arr = rl()\n    dp = [[0 for i in range(32)] for j in range(n + 1)]\n    for i in range(n):\n        setBit = 0 if arr[i] == 0 else int(math.log(arr[i], 2)) + 1\n        for j in range(32):\n            if setBit == j:\n                dp[i + 1][j] = dp[i][j] + 1\n            else:\n                dp[i + 1][j] = dp[i][j]\n    q = ri()\n    for _ in range(q):\n        (l, r, x) = rl()\n        msb = 0 if x == 0 else int(math.log(x, 2)) + 1\n        print(r - l + 1 - (dp[r][msb] - dp[l - 1][msb]))", "from math import log\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    dp = [[0 for i in range(33)] for j in range(n)]\n    pre = [0] * n\n    for i in range(n):\n        if l[i] != 0:\n            x = int(log(l[i], 2)) + 1\n            dp[i][x] = 1\n        else:\n            dp[i][0] = 1\n    for i in range(1, n):\n        for j in range(33):\n            dp[i][j] = dp[i][j] + dp[i - 1][j]\n    q = int(input())\n    for i in range(q):\n        (l, r, x) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        if x != 0:\n            setbit = int(log(x, 2)) + 1\n        else:\n            setbit = 0\n        if l == 0:\n            print(r - l + 1 - dp[r][setbit])\n        else:\n            print(r - l + 1 - (dp[r][setbit] - dp[l - 1][setbit]))", "from math import log\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    dp = [[0 for i in range(31)] for j in range(n)]\n    pre = [0] * n\n    for i in range(n):\n        if i == 0:\n            if l[i] != 0:\n                pre[i] = 1\n        elif l[i] != 0:\n            pre[i] = pre[i - 1] + 1\n        else:\n            pre[i] = pre[i - 1]\n        if l[i] != 0:\n            x = int(log(l[i], 2))\n            dp[i][x] = 1\n    for i in range(1, n):\n        for j in range(31):\n            dp[i][j] = dp[i][j] + dp[i - 1][j]\n    q = int(input())\n    for i in range(q):\n        (l, r, x) = map(int, input().split())\n        (l, r) = (l - 1, r - 1)\n        if x != 0:\n            setbit = int(log(x, 2))\n            if l == 0:\n                print(r - l + 1 - dp[r][setbit])\n            else:\n                print(r - l + 1 - (dp[r][setbit] - dp[l - 1][setbit]))\n        elif l == 0:\n            print(pre[r])\n        else:\n            print(pre[r] - pre[l - 1])", "def calculateMSB(number):\n    if number == 0:\n        return 0\n    block = 0\n    while number >> block:\n        block += 1\n    return block\n\ndef solution():\n    N = int(input())\n    array = list(map(int, input().split()))\n    p = [[0 for i in range(32)] for i in range(N + 1)]\n    for i in range(N):\n        b = calculateMSB(array[i])\n        for j in range(32):\n            p[i + 1][j] = p[i][j] + (b == j)\n    Q = int(input())\n    while Q:\n        (L, R, X) = map(int, input().split())\n        b = calculateMSB(X)\n        ans = R - L + 1 - (p[R][b] - p[L - 1][b])\n        print(ans)\n        Q -= 1\nT = int(input())\nwhile T:\n    solution()\n    T -= 1", "import math\n\ndef msb(s):\n    if s == 0:\n        return 0\n    biti = 1\n    while s >> 1:\n        s = s >> 1\n        biti += 1\n    return biti\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    b = []\n    for i in range(q):\n        b.append(list(map(int, input().split())))\n    prec = [[0 for p in range(n + 1)] for j in range(33)]\n    for k in range(1, n + 1):\n        msbi = msb(a[k - 1])\n        for j in range(33):\n            prec[j][k] = prec[j][k - 1] + (j == msbi)\n    for l in b:\n        s = msb(l[2])\n        print(l[1] - l[0] + 1 - prec[s][l[1]] + prec[s][l[0] - 1])", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mx = max(arr)\n    lg_mx = math.floor(math.log(mx, 2))\n    ans = [0] * (lg_mx + 1)\n    dic = {}\n    zeros = [0] * n\n    zero = 0\n    for (ind, i) in enumerate(arr):\n        if i == 0:\n            zero += 1\n            zeros[ind] += zero\n            dic[ind] = ans.copy()\n            continue\n        zeros[ind] = zero\n        lg = math.floor(math.log(i, 2))\n        ans[lg] += 1\n        dic[ind] = ans.copy()\n    q = int(input())\n    for i in range(q):\n        (l, r, x) = list(map(int, input().split()))\n        if x == 0:\n            if l > 1:\n                cnt = zeros[r - 1] - zeros[l - 2]\n            else:\n                cnt = zeros[r - 1]\n            if cnt == r - l + 1:\n                print(0)\n                continue\n            else:\n                print(r - l + 1 - cnt)\n                continue\n        lg = math.floor(math.log(x, 2))\n        if lg > lg_mx:\n            print(r - l + 1)\n            continue\n        if l == 1 and r == n:\n            print(r - l + 1 - dic[r - 1][lg])\n        elif l > 1:\n            print(r - l + 1 - dic[r - 1][lg] + dic[l - 2][lg])\n        else:\n            print(r - l + 1 - dic[r - 1][lg])", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mx = max(arr)\n    lg_mx = math.floor(math.log(mx, 2))\n    ans = [0] * (lg_mx + 1)\n    dic = {}\n    zeros = [0] * n\n    zero = 0\n    for (ind, i) in enumerate(arr):\n        if i == 0:\n            zero += 1\n            zeros[ind] += zero\n            dic[ind] = ans.copy()\n            continue\n        zeros[ind] = zero\n        lg = math.floor(math.log(i, 2))\n        ans[lg] += 1\n        dic[ind] = ans.copy()\n    q = int(input())\n    for i in range(q):\n        (l, r, x) = list(map(int, input().split()))\n        if x == 0:\n            if l > 1:\n                cnt = zeros[r - 1] - zeros[l - 2]\n            else:\n                cnt = zeros[r - 1]\n            if cnt == r - l + 1:\n                print(0)\n                continue\n            else:\n                print(r - l + 1 - cnt)\n                continue\n        lg = math.floor(math.log(x, 2))\n        if lg > lg_mx:\n            print(r - l + 1)\n            continue\n        if l == 1 and r == n:\n            print(r - l + 1 - dic[r - 1][lg])\n        elif l > 1:\n            print(r - l + 1 - dic[r - 1][lg] + dic[l - 2][lg])\n        else:\n            print(r - l + 1 - dic[r - 1][lg])", "import math\n\ndef msb(s):\n    if s == 0:\n        return 0\n    biti = 1\n    while s >> 1:\n        s = s >> 1\n        biti += 1\n    return biti\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    b = []\n    for i in range(q):\n        b.append(list(map(int, input().split())))\n    prec = [[0 for p in range(n + 1)] for j in range(33)]\n    for k in range(1, n + 1):\n        msbi = msb(a[k - 1])\n        for j in range(33):\n            prec[j][k] = prec[j][k - 1] + (j == msbi)\n    for l in b:\n        s = msb(l[2])\n        print(l[1] - l[0] + 1 - prec[s][l[1]] + prec[s][l[0] - 1])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    o = {x: [1 for _ in range(n)] for x in range(1, 33)}\n    for (i, item) in enumerate(a):\n        e = bin(item)[2:]\n        index = None\n        for (j, digit) in enumerate(e[::-1]):\n            if digit == '1':\n                index = j + 1\n        if index:\n            o[index][i] = 0\n    u = {}\n    zero_count = [0 for _ in range(n)]\n    for (i, item) in enumerate(a):\n        if item == 0:\n            zero_count[i] = 1\n    zero_count_u = []\n    for (i, item) in enumerate(zero_count):\n        j = item\n        if i:\n            j += zero_count_u[-1]\n        zero_count_u.append(j)\n    for (key, value) in o.items():\n        g = []\n        for (i, item) in enumerate(value):\n            h = item\n            if i:\n                h += g[-1]\n            g.append(h)\n        u[key] = g\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        e = bin(x)[2:]\n        b = len(e)\n        l -= 1\n        r -= 1\n        y = u[b][r]\n        if l:\n            y -= u[b][l - 1]\n        if x == 0:\n            ans = r - l + 1\n            d = zero_count_u[r]\n            if l:\n                d -= zero_count_u[l - 1]\n            print(ans - d)\n            continue\n        print(y)", "import math\n\ndef msb(s):\n    if s == 0:\n        return 0\n    biti = 1\n    while s >> 1:\n        s = s >> 1\n        biti += 1\n    return biti\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    b = []\n    for i in range(q):\n        b.append(list(map(int, input().split())))\n    prec = [[0 for p in range(n + 1)] for j in range(33)]\n    for k in range(1, n + 1):\n        msbi = msb(a[k - 1])\n        for j in range(33):\n            prec[j][k] = prec[j][k - 1] + (j == msbi)\n    for l in b:\n        s = msb(l[2])\n        print(l[1] - l[0] + 1 - prec[s][l[1]] + prec[s][l[0] - 1])", "import sys\nsys.setrecursionlimit(10 ** 5)\n\ndef hsb(x):\n    for i in range(31, -1, -1):\n        if x & 1 << i:\n            return i\n    return 32\n\ndef pro(arr, q):\n    n = len(arr)\n    lst = [[0] * 33]\n    for i in range(n):\n        if i:\n            lst.append(lst[i - 1].copy())\n        lst[i][hsb(arr[i])] += 1\n    for (l, r, x) in q:\n        l -= 1\n        r -= 1\n        R = lst[r][hsb(x)]\n        if l > 0:\n            L = lst[l - 1][hsb(x)]\n        else:\n            L = 0\n        print(r - l + 1 - (R - L))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = []\n    qu = int(input())\n    for i in range(qu):\n        q.append(map(int, input().split()))\n    pro(arr, q)", "import sys\nimport math\nimport bisect\nimport heapq\nfrom bisect import bisect_right\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_of_list(n):\n    return [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef myceil(x, y):\n    return (x + y - 1) // y\n\ndef Solution():\n    pass\n\ndef getValue(a, l, r):\n    i = 0\n    j = len(a) - 1\n    lf = -1\n    while i >= 0 and j < len(a) and (i <= j):\n        md = (i + j) // 2\n        if a[md] >= l:\n            i = md - 1\n            lf = md\n        else:\n            j = md + 1\n    i = 0\n    j = len(a) - 1\n    rf = -1\n    while i >= 0 and j < len(a) and (i <= j):\n        md = (i + j) // 2\n        if a[md] <= r:\n            i = md + 1\n            rf = md\n        else:\n            j = md - 1\n    return max(0, rf - lf + 1)\n\ndef main():\n    for _ in range(get_int()):\n        n = get_int()\n        a = get_ints_in_list()\n        lstBit = []\n        for i in range(n):\n            cnt = 0\n            v = a[i]\n            while v:\n                cnt += 1\n                v = v // 2\n            lstBit.append(cnt)\n        pref = [[] for _ in range(32)]\n        for i in range(32):\n            pref[i] = [0]\n            for j in range(n):\n                pref[i].append(pref[i][-1])\n                if i + 1 == lstBit[j]:\n                    pref[i][-1] += 1\n        zeros = [0]\n        for v in a:\n            zeros.append(zeros[-1])\n            if v == 0:\n                zeros[-1] += 1\n        for _ in range(get_int()):\n            (l, r, x) = get_ints_in_variables()\n            if x == 0:\n                print(r - l + 1 - (zeros[r] - zeros[l - 1]))\n                continue\n            cnt = 0\n            while x:\n                cnt += 1\n                x = x // 2\n            print(r - l + 1 - (pref[cnt - 1][r] - pref[cnt - 1][l - 1]))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    o = {x: [1 for _ in range(n)] for x in range(1, 33)}\n    for (i, item) in enumerate(a):\n        e = bin(item)[2:]\n        index = None\n        for (j, digit) in enumerate(e[::-1]):\n            if digit == '1':\n                index = j + 1\n        if index:\n            o[index][i] = 0\n    u = {}\n    zero_count = [0 for _ in range(n)]\n    for (i, item) in enumerate(a):\n        if item == 0:\n            zero_count[i] = 1\n    zero_count_u = []\n    for (i, item) in enumerate(zero_count):\n        j = item\n        if i:\n            j += zero_count_u[-1]\n        zero_count_u.append(j)\n    for (key, value) in o.items():\n        g = []\n        for (i, item) in enumerate(value):\n            h = item\n            if i:\n                h += g[-1]\n            g.append(h)\n        u[key] = g\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        e = bin(x)[2:]\n        b = len(e)\n        l -= 1\n        r -= 1\n        y = u[b][r]\n        if l:\n            y -= u[b][l - 1]\n        if x == 0:\n            ans = r - l + 1\n            d = zero_count_u[r]\n            if l:\n                d -= zero_count_u[l - 1]\n            print(ans - d)\n            continue\n        print(y)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef msbp(n):\n    return int(math.log2(n)) + 1 if n != 0 else 0\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        prefix_mat = [[0] * 32 for _ in range(n + 1)]\n        for i in range(n):\n            pos = msbp(a[i])\n            for j in range(32):\n                prefix_mat[i + 1][j] = prefix_mat[i][j] + (j == pos)\n        q = nl()\n        for _ in range(q):\n            (l, r, x) = sm()\n            pos = msbp(x)\n            print(r - l + 1 - (prefix_mat[r][pos] - prefix_mat[l - 1][pos]))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef msbp(n):\n    return int(math.log2(n)) + 1 if n != 0 else 0\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        prefix_mat = [[0] * 32 for _ in range(n + 1)]\n        for i in range(n):\n            pos = msbp(a[i])\n            for j in range(32):\n                prefix_mat[i + 1][j] = prefix_mat[i][j] + (j == pos)\n        q = nl()\n        for _ in range(q):\n            (l, r, x) = sm()\n            print(r - l + 1 - (prefix_mat[r][msbp(x)] - prefix_mat[l - 1][msbp(x)]))\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef msbp(n):\n    if n == 0:\n        return 0\n    position = 1\n    while n >> 1:\n        position += 1\n        n >>= 1\n    return position\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        prefix_mat = [[0] * 32 for _ in range(n + 1)]\n        for i in range(n):\n            pos = msbp(a[i])\n            for j in range(32):\n                prefix_mat[i + 1][j] = prefix_mat[i][j] + (j == pos)\n        q = nl()\n        for _ in range(q):\n            (l, r, x) = sm()\n            print(r - l + 1 - (prefix_mat[r][msbp(x)] - prefix_mat[l - 1][msbp(x)]))\nmain()", "from math import log2\n\ndef solveFast():\n    x = int(log2(X)) + 1 if X != 0 else 0\n    return R - L + 1 - l_sum[R][x] + l_sum[L - 1][x]\nans = []\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(log2(int(x))) + 1 if x != '0' else 0 for x in input().split()]\n    old = [0] * 32\n    l_sum = [list(old)]\n    for i in range(N):\n        old[A[i]] += 1\n        l_sum.append(list(old))\n    Q = int(input())\n    for q in range(Q):\n        (L, R, X) = [int(x) for x in input().split()]\n        if L > R:\n            (L, R) = (R, L)\n        ans.append(solveFast())\nfor a in ans:\n    print(a)", "import math\n\ndef msb_pos(n):\n    if n == 0:\n        return 0\n    c = 1\n    while n >> c:\n        c += 1\n    return c\nfor test in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    msb_sum = [[0 for i in range(32)] for i in range(n + 2)]\n    for i in range(n):\n        pos = msb_pos(a[i])\n        for m in range(32):\n            msb_sum[i + 1][m] = msb_sum[i][m] + (m == pos)\n    for i in range(q):\n        (l, r, x) = map(int, input().split())\n        pos = msb_pos(x)\n        print(r - l + 1 - (msb_sum[r][pos] - msb_sum[l - 1][pos]))", "import math\n\ndef msbp(z):\n    if z == 0:\n        return 0\n    c = 1\n    while z >> c:\n        c += 1\n    return c\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    k = [[0 for i in range(32)] for i in range(n + 1)]\n    for i in range(n):\n        j = msbp(a[i])\n        for m in range(32):\n            k[i + 1][m] = k[i][m] + (m == j)\n    q = int(input())\n    for i in range(q):\n        (l, r, x) = map(int, input().split())\n        j = msbp(x)\n        ans = r - l + 1 - k[r][j] + k[l - 1][j]\n        print(ans)", "def msb(n):\n    ans = 0\n    while n > 0:\n        n >>= 1\n        ans += 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr1 = [[0] * 32 for _ in range(n)]\n    arr1[0][msb(arr[0])] += 1\n    for i in range(1, n):\n        temp = msb(arr[i])\n        for j in range(32):\n            arr1[i][j] = arr1[i - 1][j]\n        arr1[i][temp] += 1\n    q = int(input())\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        temp = msb(x)\n        ans = arr1[r - 1][temp] - arr1[l - 1][temp]\n        if msb(arr[l - 1]) == temp:\n            ans += 1\n        ans = r - l + 1 - ans\n        print(ans)", "import math\n\ndef lg(a):\n    if a == 0:\n        return 31\n    else:\n        return math.log2(a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, map(lg, map(int, input().split(' ')))))\n    tbl = [[0 for i in range(n + 1)] for j in range(32)]\n    for i in range(1, n + 1):\n        for j in range(32):\n            tbl[j][i] = tbl[j][i - 1]\n        tbl[a[i - 1]][i] += 1\n    q = int(input())\n    for _ in range(q):\n        (l, r, x) = map(int, input().split(' '))\n        x = int(lg(x))\n        print(r - l + 1 - tbl[x][r] + tbl[x][l - 1])", "def msb(num):\n    if num == 0:\n        return num\n    blk = 1\n    while num >> blk:\n        blk += 1\n    return blk\n\ndef ans():\n    ans = 0\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [[0 for i in range(32)] for i in range(n + 1)]\n    for i in range(n):\n        b = msb(l[i])\n        for j in range(0, 32):\n            dp[i + 1][j] = dp[i][j] + (b == j)\n    q = int(input())\n    for j in range(q):\n        (l, r, x) = map(int, input().split())\n        b = msb(x)\n        ans = r - l + 1 - (dp[r][b] - dp[l - 1][b])\n        print(ans)\nfor _ in range(int(input())):\n    ans()", "def msb_finder(n):\n    if n == 0:\n        return 0\n    msb = 1\n    while n >> msb:\n        msb += 1\n    return msb\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    mat = [[0 for i in range(32)] for i in range(n + 1)]\n    for i in range(n):\n        balancer = msb_finder(l[i])\n        for j in range(32):\n            mat[i + 1][j] = mat[i][j] + (balancer == j)\n    for q in range(int(input())):\n        (L, R, X) = map(int, input().split())\n        x = msb_finder(X)\n        print(R - L + 1 - (mat[R][x] - mat[L - 1][x]))", "def msb(n):\n    ans = 1\n    count = 0\n    while n:\n        n = n >> 1\n        count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [[0 for j in range(32)] for i in range(n + 1)]\n    for i in range(n):\n        res = msb(arr[i])\n        for j in range(32):\n            if res == j:\n                dp[i + 1][j] = dp[i][j] + 1\n            else:\n                dp[i + 1][j] = dp[i][j]\n    q = int(input())\n    for j in range(q):\n        (l, r, x) = [int(i) for i in input().split()]\n        ans = r - l + 1 - (dp[r][msb(x)] - dp[l - 1][msb(x)])\n        print(ans)", "import math as m\n\ndef msb(k):\n    cnt = 0\n    while k:\n        k = k >> 1\n        cnt += 1\n    return cnt\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = msb(a[i])\n    lst = [[None] * n for _ in range(33)]\n    for i in range(33):\n        c = 0\n        for j in range(n):\n            if a[j] == i:\n                c += 1\n                lst[i][j] = c\n            else:\n                lst[i][j] = c\n    q = int(input())\n    for l in range(q):\n        (l, r, x) = map(int, input().split())\n        x = msb(x)\n        l = l - 1\n        r = r - 1\n        if a[l] == x:\n            print(r - l - (lst[x][r] - lst[x][l]))\n        else:\n            print(r - l + 1 - (lst[x][r] - lst[x][l]))", "def msb(n):\n    ans = 0\n    while n > 0:\n        n >>= 1\n        ans += 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr1 = [[0] * 32 for _ in range(n)]\n    arr1[0][msb(arr[0])] += 1\n    for i in range(1, n):\n        temp = msb(arr[i])\n        for j in range(32):\n            arr1[i][j] = arr1[i - 1][j]\n        arr1[i][temp] += 1\n    q = int(input())\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        temp = msb(x)\n        ans = arr1[r - 1][temp] - arr1[l - 1][temp]\n        if msb(arr[l - 1]) == temp:\n            ans += 1\n        ans = r - l + 1 - ans\n        print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    unsets = [[0 for _ in range(n)] for _ in range(32)]\n    zeros = []\n    for ele in arr:\n        if ele != 0:\n            zeros.append(1)\n        else:\n            zeros.append(0)\n    for i in range(1, len(zeros)):\n        zeros[i] += zeros[i - 1]\n    for (j, ele) in enumerate(arr):\n        for i in range(31, -1, -1):\n            if ele & 1 << i:\n                unsets[i][j] = 1\n                break\n    for j in range(len(unsets)):\n        for i in range(1, len(unsets[j])):\n            unsets[j][i] += unsets[j][i - 1]\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        ans = 0\n        if x == 0:\n            if l - 1 == 0:\n                print(zeros[r - 1])\n            else:\n                print(zeros[r - 1] - zeros[l - 2])\n        else:\n            k = int(math.log(x, 2))\n            if l - 1 == 0:\n                print(r - l + 1 - unsets[k][r - 1])\n            else:\n                print(r - l + 1 - (unsets[k][r - 1] - unsets[k][l - 2]))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    unsets = [[0 for _ in range(n)] for _ in range(32)]\n    zeros = []\n    for ele in arr:\n        if ele != 0:\n            zeros.append(1)\n        else:\n            zeros.append(0)\n    for i in range(1, len(zeros)):\n        zeros[i] += zeros[i - 1]\n    for (j, ele) in enumerate(arr):\n        for i in range(31, -1, -1):\n            if ele & 1 << i:\n                unsets[i][j] = 1\n                break\n    for j in range(len(unsets)):\n        for i in range(1, len(unsets[j])):\n            unsets[j][i] += unsets[j][i - 1]\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        ans = 0\n        if x == 0:\n            if l - 1 == 0:\n                print(zeros[r - 1])\n            else:\n                print(zeros[r - 1] - zeros[l - 2])\n        else:\n            k = int(math.log(x, 2))\n            if l - 1 == 0:\n                print(r - l + 1 - unsets[k][r - 1])\n            else:\n                print(r - l + 1 - (unsets[k][r - 1] - unsets[k][l - 2]))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    unsets = [[0 for _ in range(n)] for _ in range(32)]\n    zeros = []\n    for ele in arr:\n        if ele != 0:\n            zeros.append(1)\n        else:\n            zeros.append(0)\n    for i in range(1, len(zeros)):\n        zeros[i] += zeros[i - 1]\n    for (j, ele) in enumerate(arr):\n        for i in range(31, -1, -1):\n            if ele & 1 << i:\n                unsets[i][j] = 1\n                break\n    for j in range(len(unsets)):\n        for i in range(1, len(unsets[j])):\n            unsets[j][i] += unsets[j][i - 1]\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        ans = 0\n        if x == 0:\n            if l - 1 == 0:\n                print(zeros[r - 1])\n            else:\n                print(zeros[r - 1] - zeros[l - 2])\n        else:\n            k = int(math.log(x, 2))\n            if l - 1 == 0:\n                print(r - l + 1 - unsets[k][r - 1])\n            else:\n                print(r - l + 1 - (unsets[k][r - 1] - unsets[k][l - 2]))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = [[0] * (n + 1) for __ in range(33)]\n    for (i, v) in enumerate(a, start=1):\n        po = 32\n        for j in range(33):\n            c[j][i] = c[j][i - 1]\n        if v != 0:\n            po = int(math.log(v, 2))\n        c[po][i] += 1\n    q = int(input())\n    for i in range(q):\n        (l, r, x) = map(int, input().split())\n        (po, l) = (32, l - 1)\n        if x != 0:\n            po = int(math.log(x, 2))\n        print(r - l - (c[po][r] - c[po][l]))", "import math\n\ndef lg(a):\n    if a == 0:\n        return 31\n    else:\n        return math.log2(a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, map(lg, map(int, input().split(' ')))))\n    tbl = [[0 for i in range(n + 1)] for j in range(32)]\n    for i in range(1, n + 1):\n        for j in range(32):\n            tbl[j][i] = tbl[j][i - 1]\n        tbl[a[i - 1]][i] += 1\n    q = int(input())\n    for _ in range(q):\n        (l, r, x) = map(int, input().split(' '))\n        x = int(lg(x))\n        print(r - l + 1 - tbl[x][r] + tbl[x][l - 1])", "import math as m\n\ndef msb(k):\n    cnt = 0\n    while k:\n        k = k >> 1\n        cnt += 1\n    return cnt\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        a[i] = msb(a[i])\n    lst = [[None] * n for _ in range(33)]\n    for i in range(33):\n        c = 0\n        for j in range(n):\n            if a[j] == i:\n                c += 1\n                lst[i][j] = c\n            else:\n                lst[i][j] = c\n    q = int(input())\n    for l in range(q):\n        (l, r, x) = map(int, input().split())\n        x = msb(x)\n        l = l - 1\n        r = r - 1\n        if a[l] == x:\n            print(r - l - (lst[x][r] - lst[x][l]))\n        else:\n            print(r - l + 1 - (lst[x][r] - lst[x][l]))", "import math\n\ndef lg(a):\n    if a == 0:\n        return 31\n    else:\n        return math.log2(a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, map(lg, map(int, input().split(' ')))))\n    tbl = [[0 for i in range(n + 1)] for j in range(32)]\n    for i in range(1, n + 1):\n        for j in range(32):\n            tbl[j][i] = tbl[j][i - 1]\n        tbl[a[i - 1]][i] += 1\n    q = int(input())\n    for _ in range(q):\n        (l, r, x) = map(int, input().split(' '))\n        x = int(lg(x))\n        print(r - l + 1 - tbl[x][r] + tbl[x][l - 1])", "import math\n\ndef lg(a):\n    if a == 0:\n        return 31\n    else:\n        return math.log2(a)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, map(lg, map(int, input().split(' ')))))\n    tbl = [[0 for i in range(n + 1)] for j in range(32)]\n    for i in range(1, n + 1):\n        for j in range(32):\n            tbl[j][i] = tbl[j][i - 1]\n        tbl[a[i - 1]][i] += 1\n    q = int(input())\n    for _ in range(q):\n        (l, r, x) = map(int, input().split(' '))\n        x = int(lg(x))\n        print(r - l + 1 - tbl[x][r] + tbl[x][l - 1])", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        dp = [[0] * (n + 1) for i in range(32)]\n        zero = [0] * (n + 1)\n        for i in range(n):\n            zero[i + 1] = zero[i] + int(arr[i] == 0)\n        for i in range(32):\n            for j in range(n):\n                if len(bin(arr[j]).replace('0b', '')) == i + 1 and arr[j] != 0:\n                    dp[i][j + 1] = dp[i][j]\n                else:\n                    dp[i][j + 1] = dp[i][j] + 1\n        q = inpu()\n        for i in range(q):\n            (l, r, x) = sep()\n            if x == 0:\n                print(r - l + 1 - (zero[r] - zero[l - 1]))\n                continue\n            l -= 1\n            p = len(bin(x).replace('0b', '')) - 1\n            print(dp[p][r] - dp[p][l])\nmain()", "import math\n\ndef main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    queries = []\n    for i in range(q):\n        queries.append(list(map(int, input().split())))\n    lsb = []\n    for i in range(n):\n        if arr[i] != 0:\n            lsb.append(int(math.log(arr[i], 2)))\n        else:\n            lsb.append(-1)\n    dp = [[0 for i in range(33)] for j in range(n)]\n    for i in range(n):\n        if i == 0:\n            if lsb[i] == -1:\n                dp[i][32] = -1\n            else:\n                dp[i][lsb[i]] = 1\n        elif lsb[i] == -1:\n            dp[i][32] = dp[i - 1][32] - 1\n            for j in range(32):\n                dp[i][j] = dp[i - 1][j]\n        else:\n            for j in range(33):\n                dp[i][j] = dp[i - 1][j]\n            dp[i][lsb[i]] += 1\n    ans = []\n    for q in queries:\n        l = q[0] - 1\n        r = q[1] - 1\n        x = q[2]\n        if x == 0:\n            zero = abs(dp[r][32]) - abs(dp[l][32])\n            if arr[l] == 0:\n                zero += 1\n            ans.append(r - l + 1 - zero)\n        else:\n            index = int(math.log(x, 2))\n            total = r - l + 1\n            wasted = dp[r][index] - dp[l][index]\n            if arr[l] != 0:\n                if index == int(math.log(arr[l], 2)):\n                    wasted += 1\n            ans.append(total - wasted)\n    return ans\nt = int(input())\nfor i in range(t):\n    ans = main()\n    for e in ans:\n        print(e)", "import math\n\ndef func1(a, l, r, x):\n    return 0\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    p = []\n    temp = [0 for i in range(32)]\n    p.append(temp.copy())\n    for i in range(n):\n        w = temp.copy()\n        if a[i] != 0:\n            w[math.floor(math.log2(a[i]))] += 1\n        else:\n            w[31] += 1\n        temp = w.copy()\n        p.append(w)\n    q = int(input())\n    for j in range(q):\n        (l, r, x) = map(int, input().split(' '))\n        if x != 0:\n            x = int(math.log2(x))\n        else:\n            x = 31\n        result = p[r][x] - p[l - 1][x]\n        print(r - l + 1 - result)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    d = [[0 for j in range(33)] for k in range(n + 1)]\n    for i in range(1, n + 1):\n        tp = a[i - 1]\n        for j in range(33):\n            d[i][j] = d[i - 1][j]\n        r = 32\n        if tp != 0:\n            r = int(math.log(tp) / math.log(2))\n        d[i][r] += 1\n    q = int(input())\n    for j in range(q):\n        (s, h, x) = map(int, input().split())\n        c = 0\n        pow = 32\n        if x != 0:\n            pow = int(math.log(x) / math.log(2))\n        c = d[h][pow] - d[s - 1][pow]\n        ans = h - s + 1 - c\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    q = int(input())\n    pre = []\n    for i in a:\n        if i == 0:\n            pre.append(0)\n        else:\n            pre.append(len(bin(i)) - 2)\n    mat = []\n    k = [0] * 32\n    mat.append([0] * 32)\n    for i in pre:\n        s = [0] * 32\n        s = k.copy()\n        s[i] += 1\n        k[i] += 1\n        mat.append(s)\n    for i in range(q):\n        (l, r, x) = [int(x) for x in input().split()]\n        k = 0\n        if x != 0:\n            k = len(bin(x)) - 2\n        c = mat[r][k] - mat[l - 1][k]\n        print(r - l + 1 - c)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    st = input().split(' ')\n    dp = [[0] * 33 for _ in range(n + 1)]\n    i = 1\n    for item in st:\n        temp = int(item)\n        j = 0\n        while j < 33:\n            dp[i][j] = dp[i - 1][j]\n            j += 1\n        pwr = 32\n        if temp != 0:\n            pwr = int(math.log(temp) / math.log(2))\n        dp[i][pwr] += 1\n        i += 1\n    q = int(input())\n    i = 0\n    while i < q:\n        (si, ei, x) = map(int, input().split())\n        cnt = 0\n        pwr = 32\n        if x != 0:\n            pwr = int(math.log(x) / math.log(2))\n        cnt = dp[ei][pwr] - dp[si - 1][pwr]\n        ans = ei - si + 1 - cnt\n        print(ans)\n        i += 1\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    o = {x: [1 for _ in range(n)] for x in range(1, 33)}\n    for (i, item) in enumerate(a):\n        e = bin(item)[2:]\n        index = None\n        for (j, digit) in enumerate(e[::-1]):\n            if digit == '1':\n                index = j + 1\n        if index:\n            o[index][i] = 0\n    u = {}\n    zero_count = [0 for _ in range(n)]\n    for (i, item) in enumerate(a):\n        if item == 0:\n            zero_count[i] = 1\n    zero_count_u = []\n    for (i, item) in enumerate(zero_count):\n        j = item\n        if i:\n            j += zero_count_u[-1]\n        zero_count_u.append(j)\n    for (key, value) in o.items():\n        g = []\n        for (i, item) in enumerate(value):\n            h = item\n            if i:\n                h += g[-1]\n            g.append(h)\n        u[key] = g\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        e = bin(x)[2:]\n        b = len(e)\n        l -= 1\n        r -= 1\n        y = u[b][r]\n        if l:\n            y -= u[b][l - 1]\n        if x == 0:\n            ans = r - l + 1\n            d = zero_count_u[r]\n            if l:\n                d -= zero_count_u[l - 1]\n            print(ans - d)\n            continue\n        print(y)", "def log(x, y):\n    coun = 0\n    while x >= y:\n        coun += 1\n        x //= y\n    return coun\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    q = int(input())\n    lst = [[0] * (n + 1) for i in range(32)]\n    for i in range(1, n + 1):\n        for j in range(32):\n            lst[j][i] = lst[j][i - 1]\n        exp = 31\n        if arr[i - 1] != 0:\n            exp = log(arr[i - 1], 2)\n        lst[exp][i] += 1\n    for i in range(q):\n        (l, r, x) = list(map(int, input().split()))\n        exp = 31\n        if x != 0:\n            exp = log(x, 2)\n        coun = lst[exp][r] - lst[exp][l - 1]\n        print(r - l + 1 - coun)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    dd = [[0 for i in range(n + 1)] for j in range(33)]\n    k = list(map(int, input().split()))\n    for i in range(1, n + 1):\n        temp = k[i - 1]\n        for j in range(33):\n            dd[j][i] = dd[j][i - 1]\n        pwr = 32\n        if temp != 0:\n            pwr = int(math.log2(temp))\n        dd[pwr][i] += 1\n    for w in range(int(input())):\n        (l, r, x) = map(int, input().split())\n        c = 0\n        pwr = 32\n        if x != 0:\n            pwr = int(math.log2(x))\n        c = dd[pwr][r] - dd[pwr][l - 1]\n        print(r - l + 1 - c)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    arr = [[0 for i in range(N + 1)] for j in range(33)]\n    for i in range(N):\n        for j in range(33):\n            arr[j][i + 1] = arr[j][i]\n        if A[i] != 0:\n            power = math.floor(math.log(A[i], 2))\n            arr[power][i + 1] = arr[power][i] + 1\n        else:\n            arr[32][i + 1] = arr[32][i] + 1\n    Q = int(input())\n    for i in range(Q):\n        (L, R, X) = [int(x) for x in input().split()]\n        count = 0\n        if X == 0:\n            power = 32\n        else:\n            power = math.floor(math.log(X, 2))\n        total = R - L + 1\n        useless = arr[power][R] - arr[power][L - 1]\n        count = total - useless\n        print(count)", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    comm_sums = dict()\n    for i in range(31):\n        comm_sums[i] = []\n        c = 0\n        for x in arr:\n            comm_sums[i].append(c)\n            if x >= 2 ** i and x < 2 ** (i + 1):\n                c += 1\n        comm_sums[i].append(c)\n    comm_sums[-1] = []\n    c = 0\n    for x in arr:\n        comm_sums[-1].append(c)\n        if x == 0:\n            c += 1\n    comm_sums[-1].append(c)\n    q = int(input())\n    for i in range(q):\n        (l, r, x) = [int(x) for x in input().split()]\n        if x == 0:\n            print(r - l + 1 - (comm_sums[-1][r] - comm_sums[-1][l - 1]))\n            continue\n        p = int(log2(x))\n        print(r - l + 1 - (comm_sums[p][r] - comm_sums[p][l - 1]))", "from math import log2\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    checks = [0 for i in range(32)]\n    d = [tuple(checks)]\n    for i in range(n):\n        if nums[i]:\n            pwr = int(log2(nums[i]))\n            checks[pwr] += 1\n        else:\n            checks[31] += 1\n        d.append(tuple(checks))\n    q = int(input())\n    for i in range(q):\n        (l, r, x) = map(int, input().split())\n        if x:\n            x = int(log2(x))\n        else:\n            x = 31\n        print(r - l + 1 - d[r][x] + d[l - 1][x])", "def top_set_bit(x):\n    if x == 0:\n        return int(0)\n    return 1 + int(top_set_bit(x >> 1))\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    values = [int(i) for i in input().split()]\n    for i in range(N):\n        values[i] = top_set_bit(values[i])\n    dp = []\n    for j in range(32):\n        dp.append([0])\n        for i in range(N):\n            dp[j].append(dp[j][i])\n            if j != values[i]:\n                dp[j][i + 1] += 1\n    Q = int(input())\n    for j in range(Q):\n        (L, R, X) = map(int, input().split())\n        X = top_set_bit(X)\n        print(dp[X][R] - dp[X][L - 1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = []\n    for k in range(32):\n        L = []\n        c = 0\n        for l in range(n):\n            if k == 0:\n                if arr[l] == 0:\n                    c += 1\n                L.append(c)\n            else:\n                a = bin(arr[l])[2:]\n                if len(a) == k and a != '0':\n                    c += 1\n                L.append(c)\n        res.append(L)\n    q = int(input())\n    for j in range(q):\n        (l, r, x) = list(map(int, input().split()))\n        if x == 0:\n            b = 0\n        else:\n            b = len(bin(x)[2:])\n        if l - 1 == 0:\n            tot = res[b][r - 1]\n        else:\n            tot = res[b][r - 1] - res[b][l - 2]\n        print(r - l + 1 - tot)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = input()\n    a = list(a.split(' '))\n    dp = [[0] * 33 for _ in range(n + 1)]\n    i = 1\n    while i <= n:\n        temp = int(a[i - 1])\n        j = 0\n        while j < 33:\n            dp[i][j] = dp[i - 1][j]\n            j += 1\n        pwr = 32\n        if temp != 0:\n            pwr = int(math.log(temp) / math.log(2))\n        dp[i][pwr] += 1\n        i += 1\n    q = int(input())\n    while q > 0:\n        b = input()\n        b = list(b.split(' '))\n        c = 0\n        pr = 32\n        if int(b[2]) != 0:\n            pr = int(math.log(int(b[2])) / math.log(2))\n        c = dp[int(b[1])][pr] - dp[int(b[0]) - 1][pr]\n        ans = int(b[1]) - int(b[0]) + 1 - c\n        print(ans)\n        q -= 1\n    t -= 1", "try:\n    import math\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        dp = []\n        for i in range(n + 1):\n            dp.append([])\n            for _ in range(33):\n                dp[i].append(0)\n        for i in range(1, n + 1):\n            temp = arr[i - 1]\n            for j in range(33):\n                dp[i][j] = dp[i - 1][j]\n            pwr = 32\n            if temp != 0:\n                pwr = int(math.log(temp, 2))\n            dp[i][pwr] += 1\n        q = int(input())\n        for i in range(q):\n            (l, r, x) = map(int, input().split())\n            scnt = 0\n            pwr = 32\n            if x != 0:\n                pwr = int(math.log(x, 2))\n            cnt = dp[r][pwr] - dp[l - 1][pwr]\n            ans = r - l + 1 - cnt\n            print(ans)\nexcept:\n    pass", "try:\n    from debug import debug, timer\nexcept ImportError:\n    pass\nfrom sys import stdin\ninput = stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\n\ndef getvals():\n    while True:\n        yield from input().split()\n\ndef tri(n):\n    return n * (n + 1) // 2\n\ndef smallest_first(m, n):\n    return (min(m, n), max(m, n))\nfrom math import log2\n\ndef ilog(m):\n    if m == 0:\n        return -1\n    else:\n        return int(log2(m))\n\ndef solve(*args):\n    (n, a, l, r, x, logs, zeros) = args\n    c = 0\n    if x == 0:\n        c = zeros[r] - zeros[l - 1]\n    else:\n        log_x = ilog(x)\n        c = logs[log_x][r] - logs[log_x][l - 1]\n    return r - l + 1 - c\n\ndef gen_logs(n, a):\n    logs = [[0 for _ in range(n + 1)] for _ in range(32)]\n    zeros = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(32):\n            logs[j][i] = logs[j][i - 1]\n            zeros[i] = zeros[i - 1]\n        if a[i - 1] != 0:\n            logs[ilog(a[i - 1])][i] += 1\n        else:\n            zeros[i] += 1\n    return (logs, zeros)\n\ndef do_codechef():\n    for t in rii():\n        n = ii()\n        a = lmii()\n        (logs, zeros) = gen_logs(n, a)\n        q = ii()\n        for _ in range(q):\n            (l, r, x) = mii()\n            print(solve(n, a, l, r, x, logs, zeros))\ndo_codechef()\nexit()", "def readInt():\n    return int(input())\n\ndef readInts():\n    return [int(x) for x in input().split()]\n\ndef readString():\n    return input().rstrip()\n\ndef readStrings():\n    return input().split()\n\ndef readCase():\n    n = readInt()\n    numbers = readInts()\n    q = readInt()\n    queries = [readInts() for _ in range(q)]\n    return (n, numbers, q, queries)\n\ndef solve(n, numbers, q, queries):\n    prefix = [[0 for _ in range(32)] for _ in range(n + 1)]\n    for (pos, num) in enumerate(numbers):\n        num_len = num.bit_length()\n        for bit in range(32):\n            if bit == num_len:\n                prefix[pos + 1][bit] = prefix[pos][bit] + 1\n            else:\n                prefix[pos + 1][bit] = prefix[pos][bit]\n    for (l, r, x) in queries:\n        x_bit = x.bit_length()\n        failures = prefix[r][x_bit] - prefix[l - 1][x_bit]\n        print(r - l + 1 - failures)\ncases = readInt()\nfor case in range(cases):\n    solve(*readCase())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = [[0 for i in range(33)] for j in range(n + 1)]\n    l = list(map(int, input().strip().split(' ')))\n    for i in range(n):\n        t = l[i]\n        c = 0\n        while t != 0:\n            t = t // 2\n            c = c + 1\n        for j in range(33):\n            d[i + 1][j] = d[i][j]\n        d[i + 1][c] = d[i + 1][c] + 1\n    k = int(input())\n    for i in range(k):\n        (a, b, h) = map(int, input().split(' '))\n        a = a - 1\n        c = 0\n        while h != 0:\n            h = h // 2\n            c = c + 1\n        ans = n - a\n        print(b - a - d[b][c] + d[a][c])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    dp = [[]]\n    for l in range(33):\n        dp[0].append(0)\n    arr = [int(a) for a in input().split()]\n    for i in range(1, n + 1):\n        dp.append([])\n        for j in range(33):\n            dp[i].append(0)\n            dp[i][j] = dp[i - 1][j]\n        pwr = 32\n        if arr[i - 1] != 0:\n            pwr = int(math.log(arr[i - 1]) / math.log(2))\n        dp[i][pwr] += 1\n    for _ in range(int(input())):\n        (si, ei, x) = [int(a) for a in input().split()]\n        c = 0\n        pwr = 32\n        if x != 0:\n            pwr = int(math.log(x) / math.log(2))\n        c = dp[ei][pwr] - dp[si - 1][pwr]\n        ans = ei - si + 1 - c\n        print(ans)", "from math import floor, log\n\ndef find_2_exp(n):\n    return floor(log(n, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    dp = [[_ for c in range(n + 1)] for r in range(33)]\n    for i in range(n):\n        for j in range(33):\n            dp[j][i] = dp[j][i - 1]\n        power = 32\n        if a[i] != 0:\n            power = find_2_exp(a[i])\n        dp[power][i] += 1\n    for _ in range(q):\n        (l, r, x) = map(int, input().split())\n        power = 32\n        if x != 0:\n            power = find_2_exp(x)\n        mystical = dp[power][r - 1] - dp[power][l - 2]\n        print(r - l + 1 - mystical)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    dp = [[0] * 33 for i in range(n + 1)]\n    for i in range(1, n + 1):\n        t = A[i - 1]\n        for j in range(33):\n            dp[i][j] = dp[i - 1][j]\n        power = 32\n        if t != 0:\n            power = int(math.log(t) / math.log(2))\n        dp[i][power] += 1\n    Q = int(input())\n    for i in range(Q):\n        (L, R, X) = map(int, input().split())\n        cnt = 0\n        pwer = 32\n        if X != 0:\n            pwer = int(math.log(X) / math.log(2))\n        cnt = dp[R][pwer] - dp[L - 1][pwer]\n        print(R - L + 1 - cnt)", "import math\ndp = {0: 32}\n\ndef calc(num):\n    val = dp.get(num, None)\n    if not val:\n        val = math.floor(math.log2(num))\n        dp[num] = val\n    return val\n\ndef pre_process(arr):\n    mid = [[0] * 33 for i in range(len(arr) + 1)]\n    for i in range(1, len(arr) + 1):\n        mid[i] = mid[i - 1][:]\n        log_num = calc(arr[i - 1])\n        mid[i][log_num] += 1\n    return mid\nfor _ in range(int(input().strip())):\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    mem = pre_process(arr)\n    for it in range(int(input().strip())):\n        count = 0\n        (l, r, x) = map(int, input().split(' '))\n        x_log = calc(x)\n        count = mem[r][x_log] - mem[l - 1][x_log]\n        print(r - l + 1 - count)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    mat_dp = [[0 for x in range(33)] for y in range(n + 1)]\n    for i in range(1, n + 1):\n        temp = A[i - 1]\n        for j in range(33):\n            mat_dp[i][j] = mat_dp[i - 1][j]\n        pwr = 32\n        if temp > 0 or temp < 0:\n            pwr = int(math.log(temp) / math.log(2))\n        mat_dp[i][pwr] += 1\n    q = int(input())\n    for z in range(q):\n        (l, r, x) = map(int, input().split())\n        c = 0\n        pwr = 32\n        if x > 0 or x < 0:\n            pwr = int(math.log(x) / math.log(2))\n        c = mat_dp[r][pwr] - mat_dp[l - 1][pwr]\n        ans = r - l + 1 - c\n        print(ans)", "from math import log2\nimport numpy as np\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    q = int(input())\n    matrix = np.zeros((33, n))\n    if a[0] == 0:\n        matrix[0][0] = 1\n    else:\n        matrix[int(log2(a[0]) + 1)][0] = 1\n    for i in range(1, n):\n        if a[i] == 0:\n            matrix[0][i] = matrix[0][i - 1] + 1\n            matrix[1:, i] = matrix[1:, i - 1]\n            continue\n        curr_msb = int(log2(a[i])) + 1\n        if curr_msb == 0:\n            matrix[curr_msb][i] = matrix[curr_msb][i - 1] + 1\n            matrix[1:, i] = matrix[1:, i - 1]\n        else:\n            matrix[:curr_msb, i] = matrix[:curr_msb, i - 1]\n            matrix[curr_msb][i] = matrix[curr_msb][i - 1] + 1\n            matrix[curr_msb + 1:, i] = matrix[curr_msb + 1:, i - 1]\n    for query in range(q):\n        (l, r, x) = map(int, input().split())\n        if x == 0:\n            if l == 1:\n                ans = r - matrix[0][r - 1]\n            elif l == r:\n                ans = 1 - (matrix[0][r - 1] - matrix[0][l - 2])\n            else:\n                ans = r - l + 1 - (matrix[0][r - 1] - matrix[0][l - 2])\n        else:\n            check_msb = int(log2(x)) + 1\n            if l == 1:\n                ans = r - matrix[check_msb][r - 1]\n            elif l == r:\n                ans = 1 - (matrix[check_msb][r - 1] - matrix[check_msb][l - 2])\n            else:\n                ans = r - l + 1 - (matrix[check_msb][r - 1] - matrix[check_msb][l - 2])\n        print(int(ans))", "LIM = 2 * 10 ** 5 + 10\n\ndef HBIT(n):\n    bit = -1\n    while n:\n        bit += 1\n        n >>= 1\n    return bit\nhbitCount = [[0] * LIM for i in range(32)]\ntotalPos = [0] * LIM\n\ndef prep(A, N):\n    for ind in range(N + 1):\n        totalPos[ind] = 0\n        for bit in range(32):\n            hbitCount[bit][ind] = 0\n    for (ind, el) in enumerate(A):\n        totalPos[ind + 1] = totalPos[ind]\n        if el:\n            totalPos[ind + 1] += 1\n            hbitCount[HBIT(el)][ind + 1] = 1\n    for bit in range(32):\n        for ind in range(1, N + 1):\n            hbitCount[bit][ind] += hbitCount[bit][ind - 1]\n\ndef solve(L, R, X):\n    if X == 0:\n        return totalPos[R] - totalPos[L - 1]\n    size = R - L + 1\n    hbit = HBIT(X)\n    sameHighBits = hbitCount[hbit][R] - hbitCount[hbit][L - 1]\n    return size - sameHighBits\nfor case in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    prep(A, N)\n    T = int(input())\n    for i in range(T):\n        (L, R, X) = map(int, input().split())\n        print(solve(L, R, X))", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    myList = list(map(int, input().strip().split()))[:n]\n    myProcessedData = []\n    for i in range(0, 33):\n        temp = []\n        for j in range(0, n + 1):\n            temp.append(0)\n        myProcessedData.append(temp)\n    for j in range(1, n + 1):\n        if j == 1:\n            if myList[j - 1] == 0:\n                myProcessedData[32][j] += 1\n            else:\n                power = len(bin(myList[j - 1])[2:]) - 1\n                myProcessedData[power][j] += 1\n        else:\n            for k in range(0, 33):\n                myProcessedData[k][j] = myProcessedData[k][j - 1]\n            if myList[j - 1] == 0:\n                myProcessedData[32][j] += 1\n            else:\n                power = len(bin(myList[j - 1])[2:]) - 1\n                myProcessedData[power][j] += 1\n    q = int(input())\n    for i in range(0, q):\n        (l, r, x) = map(int, input().split())\n        if x == 0:\n            check = 32\n            print(r - l + 1 - (myProcessedData[check][r] - myProcessedData[check][l - 1]))\n        else:\n            check = len(bin(x)[2:]) - 1\n            res = r - l + 1 - (myProcessedData[check][r] - myProcessedData[check][l - 1])\n            print(res)", "import math\n\ndef lg(n):\n    if n == 0:\n        return 32\n    return int(math.log2(n))\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    LIST = []\n    arr = [0] * 33\n    for i in l:\n        arr[lg(i)] += 1\n        LIST.append(arr.copy())\n    q = int(input())\n    while q:\n        q -= 1\n        (L, R, x) = list(map(int, input().split()))\n        if L == 1:\n            print(R - L + 1 - LIST[R - 1][lg(x)])\n        else:\n            print(R - L + 1 - (LIST[R - 1][lg(x)] - LIST[L - 2][lg(x)]))", "import math\n\ndef dynamic_programming(query, dynamic_p):\n    let = 32\n    (inp1_l, inp2_r, inp3_x) = map(int, input().split())\n    if inp3_x != 0:\n        let = int(math.log(inp3_x) / math.log(2))\n    var1 = dynamic_p[inp2_r][let]\n    var2 = dynamic_p[inp1_l - 1][let]\n    solved = var1 - var2\n    return inp2_r - inp1_l + 1 - solved\ntestcase = int(input())\nfor _ in range(testcase):\n    var_test = int(input())\n    list_inp = list(map(int, input().split()))\n    dynamic_p = [[0] * 33 for _ in range(var_test + 1)]\n    for i in range(1, var_test + 1):\n        temp = list_inp[i - 1]\n        for j in range(33):\n            dynamic_p[i][j] = dynamic_p[i - 1][j]\n        let = 32\n        if temp != 0:\n            var1 = math.log(temp)\n            var2 = math.log(2)\n            let = int(var1 / var2)\n        dynamic_p[i][let] += 1\n    query = int(input())\n    for i in range(query):\n        print(dynamic_programming(query, dynamic_p))"]