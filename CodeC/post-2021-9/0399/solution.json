["for _ in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bigl = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > num:\n            continue\n        bigl = list(sorted(bigl))\n        mount = (3 - (lis[2 ** i] - lis[0]) // 2 ** i) // 2\n        for j in range(mount):\n            bigl[j] += 2 ** i\n    print(bigl[0], bigl[1], bigl[2])", "for _ in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bigl = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > num:\n            continue\n        bigl = list(sorted(bigl))\n        mount = (3 - (lis[2 ** i] - lis[0]) // 2 ** i) // 2\n        for j in range(mount):\n            bigl[j] += 2 ** i\n    print(bigl[0], bigl[1], bigl[2])", "for _ in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bigl = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > num:\n            continue\n        bigl = list(sorted(bigl))\n        mount = (3 - (lis[2 ** i] - lis[0]) // 2 ** i) // 2\n        for j in range(mount):\n            bigl[j] += 2 ** i\n    print(bigl[0], bigl[1], bigl[2])", "for _ in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bigl = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > num:\n            continue\n        bigl = list(sorted(bigl))\n        mount = (3 - (lis[2 ** i] - lis[0]) // 2 ** i) // 2\n        for j in range(mount):\n            bigl[j] += 2 ** i\n    print(bigl[0], bigl[1], bigl[2])", "for _ in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bigl = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > num:\n            continue\n        bigl = list(sorted(bigl))\n        mount = (3 - (lis[2 ** i] - lis[0]) // 2 ** i) // 2\n        for j in range(mount):\n            bigl[j] += 2 ** i\n    print(bigl[0], bigl[1], bigl[2])", "for _ in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bigl = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > num:\n            continue\n        bigl = list(sorted(bigl))\n        mount = (3 - (lis[2 ** i] - lis[0]) // 2 ** i) // 2\n        for j in range(mount):\n            bigl[j] += 2 ** i\n    print(bigl[0], bigl[1], bigl[2])", "for _ in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bigl = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > num:\n            continue\n        bigl = list(sorted(bigl))\n        mount = (3 - (lis[2 ** i] - lis[0]) // 2 ** i) // 2\n        for j in range(mount):\n            bigl[j] += 2 ** i\n    print(bigl[0], bigl[1], bigl[2])", "for _ in range(int(input())):\n    num = int(input())\n    lis = list(map(int, input().split()))\n    bigl = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > num:\n            continue\n        bigl = list(sorted(bigl))\n        mount = (3 - (lis[2 ** i] - lis[0]) // 2 ** i) // 2\n        for j in range(mount):\n            bigl[j] += 2 ** i\n    print(bigl[0], bigl[1], bigl[2])", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nimport math, heapq, bisect\ninput = stdin.readline\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef gcd_list_of_elements(li):\n    n = len(li)\n    res = li[0]\n    for i in range(1, n):\n        res = math.gcd(res, li[i])\n    return res\n\ndef isPalindrome(x):\n    x = str(x)\n    return x == x[::-1]\n\nclass SegmentTree:\n\n    def __init__(self, data, default=0, func=lambda a, b: a + b):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        if start == stop:\n            return self.__getitem__(start)\n        stop += 1\n        start += self._size\n        stop += self._size\n        res = self._default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n\n    def __repr__(self):\n        return 'SegmentTree({0})'.format(self.data)\n\nclass FenwickTreeSum:\n\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.f = [0] * self.n\n        for (i, x) in enumerate(arr):\n            self.increment(i, x)\n\n    def increment(self, j, v):\n        while j < self.n:\n            self.f[j] += v\n            j = j | j + 1\n\n    def range_sum(self, l, r):\n        return self.prefix_sum(r - 1) - self.prefix_sum(l - 1)\n\n    def prefix_sum(self, x):\n        z = x\n        res = 0\n        while z >= 0:\n            res += self.f[z]\n            z = (z & z + 1) - 1\n        return res\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    ans = [0, 0, 0]\n    for i in range(int(math.log2(n)), -1, -1):\n        pw = 1 << i\n        set_bits = (3 + (a[0] - a[pw]) // pw) // 2\n        ans.sort()\n        for i in range(set_bits):\n            ans[i] += pw\n    print(*ans)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = A[0]\n    val = 1\n    ans = [0] * 3\n    while 2 * val <= N:\n        val *= 2\n    i = val\n    while i > 0:\n        C = i\n        if B >= A[C]:\n            cnt = (B - A[C]) // C\n            if cnt == 3:\n                ans[0] += C\n                ans[1] += C\n                ans[2] += C\n            else:\n                ans[0] += C\n                ans[1] += C\n        else:\n            cnt = abs(B - A[C]) // C\n            if cnt == 1:\n                ans[0] += C\n        i //= 2\n        ans.sort()\n    print(*ans)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nimport math, heapq, bisect\ninput = stdin.readline\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef gcd_list_of_elements(li):\n    n = len(li)\n    res = li[0]\n    for i in range(1, n):\n        res = math.gcd(res, li[i])\n    return res\n\ndef isPalindrome(x):\n    x = str(x)\n    return x == x[::-1]\n\nclass SegmentTree:\n\n    def __init__(self, data, default=0, func=lambda a, b: a + b):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        if start == stop:\n            return self.__getitem__(start)\n        stop += 1\n        start += self._size\n        stop += self._size\n        res = self._default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n\n    def __repr__(self):\n        return 'SegmentTree({0})'.format(self.data)\n\nclass FenwickTreeSum:\n\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.f = [0] * self.n\n        for (i, x) in enumerate(arr):\n            self.increment(i, x)\n\n    def increment(self, j, v):\n        while j < self.n:\n            self.f[j] += v\n            j = j | j + 1\n\n    def range_sum(self, l, r):\n        return self.prefix_sum(r - 1) - self.prefix_sum(l - 1)\n\n    def prefix_sum(self, x):\n        z = x\n        res = 0\n        while z >= 0:\n            res += self.f[z]\n            z = (z & z + 1) - 1\n        return res\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    ans = [0, 0, 0]\n    for i in range(int(math.log2(n)), -1, -1):\n        pw = 1 << i\n        set_bits = (3 + (a[0] - a[pw]) // pw) // 2\n        ans.sort()\n        for i in range(set_bits):\n            ans[i] += pw\n    print(*ans)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nimport math, heapq, bisect\ninput = stdin.readline\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef gcd_list_of_elements(li):\n    n = len(li)\n    res = li[0]\n    for i in range(1, n):\n        res = math.gcd(res, li[i])\n    return res\n\ndef isPalindrome(x):\n    x = str(x)\n    return x == x[::-1]\n\nclass SegmentTree:\n\n    def __init__(self, data, default=0, func=lambda a, b: a + b):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        if start == stop:\n            return self.__getitem__(start)\n        stop += 1\n        start += self._size\n        stop += self._size\n        res = self._default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n\n    def __repr__(self):\n        return 'SegmentTree({0})'.format(self.data)\n\nclass FenwickTreeSum:\n\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.f = [0] * self.n\n        for (i, x) in enumerate(arr):\n            self.increment(i, x)\n\n    def increment(self, j, v):\n        while j < self.n:\n            self.f[j] += v\n            j = j | j + 1\n\n    def range_sum(self, l, r):\n        return self.prefix_sum(r - 1) - self.prefix_sum(l - 1)\n\n    def prefix_sum(self, x):\n        z = x\n        res = 0\n        while z >= 0:\n            res += self.f[z]\n            z = (z & z + 1) - 1\n        return res\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    ans = [0, 0, 0]\n    for i in range(int(math.log2(n)), -1, -1):\n        pw = 1 << i\n        set_bits = (3 + (a[0] - a[pw]) // pw) // 2\n        ans.sort()\n        for i in range(set_bits):\n            ans[i] += pw\n    print(*ans)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nimport math, heapq, bisect\ninput = stdin.readline\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef gcd_list_of_elements(li):\n    n = len(li)\n    res = li[0]\n    for i in range(1, n):\n        res = math.gcd(res, li[i])\n    return res\n\ndef isPalindrome(x):\n    x = str(x)\n    return x == x[::-1]\n\nclass SegmentTree:\n\n    def __init__(self, data, default=0, func=lambda a, b: a + b):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        if start == stop:\n            return self.__getitem__(start)\n        stop += 1\n        start += self._size\n        stop += self._size\n        res = self._default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n\n    def __repr__(self):\n        return 'SegmentTree({0})'.format(self.data)\n\nclass FenwickTreeSum:\n\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.f = [0] * self.n\n        for (i, x) in enumerate(arr):\n            self.increment(i, x)\n\n    def increment(self, j, v):\n        while j < self.n:\n            self.f[j] += v\n            j = j | j + 1\n\n    def range_sum(self, l, r):\n        return self.prefix_sum(r - 1) - self.prefix_sum(l - 1)\n\n    def prefix_sum(self, x):\n        z = x\n        res = 0\n        while z >= 0:\n            res += self.f[z]\n            z = (z & z + 1) - 1\n        return res\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    ans = [0, 0, 0]\n    for i in range(int(math.log2(n)), -1, -1):\n        pw = 1 << i\n        set_bits = (3 + (a[0] - a[pw]) // pw) // 2\n        ans.sort()\n        for i in range(set_bits):\n            ans[i] += pw\n    print(*ans)", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = A[0]\n    val = 1\n    ans = [0] * 3\n    while 2 * val <= N:\n        val *= 2\n    i = val\n    while i > 0:\n        C = i\n        if B >= A[C]:\n            cnt = (B - A[C]) // C\n            if cnt == 3:\n                ans[0] += C\n                ans[1] += C\n                ans[2] += C\n            else:\n                ans[0] += C\n                ans[1] += C\n        else:\n            cnt = abs(B - A[C]) // C\n            if cnt == 1:\n                ans[0] += C\n        i //= 2\n        ans.sort()\n    print(*ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    L = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > n:\n            continue\n        L = list(sorted(L))\n        delta = (3 - (arr[2 ** i] - arr[0]) // 2 ** i) // 2\n        for j in range(delta):\n            L[j] += 2 ** i\n    print(L[0], L[1], L[2])", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    L = [0, 0, 0]\n    for i in range(20, -1, -1):\n        if 2 ** i > n:\n            continue\n        L = list(sorted(L))\n        delta = (arr[2 ** i] - arr[0]) // 2 ** i\n        if delta == -3:\n            L[0] = L[0] + 2 ** i\n            L[1] = L[1] + 2 ** i\n            L[2] = L[2] + 2 ** i\n        elif delta == -1:\n            L[0] = L[0] + 2 ** i\n            L[1] = L[1] + 2 ** i\n        elif delta == 1:\n            L[0] = L[0] + 2 ** i\n    print(L[0], L[1], L[2])", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = int(0)\n    b = int(0)\n    c = int(0)\n    pp = 0\n    for pp in range(2000):\n        pp = pp + 1\n    for i in range(20):\n        if 2 ** i > n:\n            break\n        delta = int(arr[2 ** i] - arr[0])\n        delta = int(delta / 2 ** i)\n        if delta == -3:\n            a = a + 2 ** i\n            b = b + 2 ** i\n            c = c + 2 ** i\n        elif delta == -1:\n            a = a + 2 ** i\n            b = b + 2 ** i\n        elif delta == 1:\n            a = a + 2 ** i\n        else:\n            cv = 0\n            cv = cv + 1\n    if a > n:\n        j = 20\n        for i in reversed(range(21)):\n            k = 2 ** i\n            if k & a == 0:\n                continue\n            if b & k and c & k:\n                continue\n            a = a - k\n            c = c + k\n            j = i\n            break\n        if b > n:\n            for i in reversed(range(j)):\n                k = 2 ** i\n                if k & b == 0:\n                    continue\n                if a & k and c & k:\n                    continue\n                if a & k == 0:\n                    a = a + k\n                    b = b - k\n                    break\n                else:\n                    if c + k > n:\n                        continue\n                    b = b - k\n                    c = c + k\n                    break\n    print(a, b, c)", "import math\nfor t in range(int(input())):\n    n = int(input())\n    f = list((int(i) for i in input().split()))\n    (a, b, c) = (0, 0, 0)\n    x = int(math.log(n, 2))\n    k = pow(2, x)\n    while k > 0:\n        if f[k] + 3 * k == f[0]:\n            a += k\n            b += k\n            c += k\n        elif f[k] + k == f[0]:\n            if c == max(a, b, c):\n                a += k\n                b += k\n            elif b == max(a, b, c):\n                a += k\n                c += k\n            else:\n                b += k\n                c += k\n        elif f[k] == f[0] + k:\n            if a == min(a, b, c):\n                a += k\n            elif b == min(a, b, c):\n                b += k\n            else:\n                c += k\n        k = k // 2\n    if max(a, b, c) > n:\n        raise\n    print(a, b, c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = [0, 0, 0]\n    s_b = 0\n    for i in range(20, -1, -1):\n        if 1 << i & n:\n            s_b = i\n            break\n    for i in range(s_b, -1, -1):\n        num = 1 << i\n        diff = l[0] - l[num]\n        ns_b = diff // num\n        ns_b = int((3 + ns_b) // 2)\n        a.sort()\n        t = 0\n        for j in range(3):\n            if a[j] + num > n:\n                continue\n            if t == ns_b:\n                break\n            a[j] += num\n            t += 1\n    print(*a, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    ll = list(map(int, input().split()))\n    x = ll[0]\n    mm = min(ll)\n    c = ll.index(mm)\n    ok = False\n    if x == 0:\n        print(0, 0, 0)\n        ok = True\n    for a in range(x + 1):\n        if ok:\n            break\n        b = x - c - a\n        for i in range(n + 1):\n            if (a ^ i) + (b ^ i) + (c ^ i) != ll[i] or max(a, b, c) > n:\n                break\n            elif i == n:\n                print(b, a, c)\n                ok = True\n                break", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (a, b, c) = ([], [], [])\n    (isA, isB, isC) = (False, False, False)\n    nbin = bin(n)[2:]\n    d = len(nbin)\n    i = 0\n    curr = 2 ** (d - 1)\n    while i < d:\n        diff = (arr[curr] - arr[0]) // curr\n        if diff == 3:\n            if nbin[i] == '1':\n                (isA, isB, isC) = (True, True, True)\n            a.append('0')\n            b.append('0')\n            c.append('0')\n        if diff == 1:\n            if isA:\n                a.append('1')\n                b.append('0')\n                c.append('0')\n                if nbin[i] == '1':\n                    (isB, isC) = (True, True)\n            elif isB:\n                a.append('0')\n                b.append('1')\n                c.append('0')\n                if nbin[i] == '1':\n                    (isA, isC) = (True, True)\n            else:\n                a.append('0')\n                b.append('0')\n                c.append('1')\n                if nbin[i] == '1':\n                    (isA, isB) = (True, True)\n        if diff == -1:\n            if not isA:\n                a.append('0')\n                b.append('1')\n                c.append('1')\n                if nbin[i] == '1':\n                    isA = True\n            elif not isB:\n                a.append('1')\n                b.append('0')\n                c.append('1')\n                if nbin[i] == '1':\n                    isB = True\n            else:\n                a.append('1')\n                b.append('1')\n                c.append('0')\n                if nbin[i] == '1':\n                    isC = True\n        if diff == -3:\n            a.append('1')\n            b.append('1')\n            c.append('1')\n        i += 1\n        curr //= 2\n    (x, y, z) = (int(''.join(a), 2), int(''.join(b), 2), int(''.join(c), 2))\n    print(x, y, z)", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if arr[0] == 0:\n        print('0 0 0')\n        continue\n    (a, b, c) = ([], [], [])\n    (isA, isB, isC) = (False, False, False)\n    nbin = bin(n)[2:]\n    d = len(nbin)\n    i = 0\n    curr = 2 ** (d - 1)\n    while i < d:\n        diff = (arr[curr] - arr[0]) // curr\n        if diff == 3:\n            if nbin[i] == '1':\n                (isA, isB, isC) = (True, True, True)\n            a.append('0')\n            b.append('0')\n            c.append('0')\n        if diff == 1:\n            if isA:\n                a.append('1')\n                b.append('0')\n                c.append('0')\n                if nbin[i] == '1':\n                    (isB, isC) = (True, True)\n            elif isB:\n                a.append('0')\n                b.append('1')\n                c.append('0')\n                if nbin[i] == '1':\n                    (isA, isC) = (True, True)\n            else:\n                a.append('0')\n                b.append('0')\n                c.append('1')\n                if nbin[i] == '1':\n                    (isA, isB) = (True, True)\n        if diff == -1:\n            if not isA:\n                a.append('0')\n                b.append('1')\n                c.append('1')\n                if nbin[i] == '1':\n                    isA = True\n            elif not isB:\n                a.append('1')\n                b.append('0')\n                c.append('1')\n                if nbin[i] == '1':\n                    isB = True\n            else:\n                a.append('1')\n                b.append('1')\n                c.append('0')\n                if nbin[i] == '1':\n                    isC = True\n        if diff == -3:\n            a.append('1')\n            b.append('1')\n            c.append('1')\n        i += 1\n        curr //= 2\n    (x, y, z) = (int(''.join(a), 2), int(''.join(b), 2), int(''.join(c), 2))\n    print(x, y, z)", "for _ in range(int(input())):\n    n = int(input())\n    ll = list(map(int, input().split()))\n    x = ll[0]\n    mm = min(ll)\n    c = ll.index(mm)\n    ok = False\n    if x == 0:\n        print(0, 0, 0)\n        ok = True\n    for a in range(x + 1):\n        if ok:\n            break\n        b = x - c - a\n        for i in range(n + 1):\n            if (a ^ i) + (b ^ i) + (c ^ i) != ll[i] or max(a, b, c) > n:\n                break\n            elif i == n:\n                print(b, a, c)\n                ok = True\n                break", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    x = [0, 0, 0]\n    n_mx = 0\n    for i in range(20, -1, -1):\n        if 1 << i & n:\n            n_mx = i\n            break\n    for i in range(n_mx, -1, -1):\n        num = 1 << i\n        delta = f[0] - f[num]\n        cnt = delta // num\n        cnt = int((3 + cnt) // 2)\n        x.sort()\n        tmp = 0\n        for j in range(3):\n            if x[j] + num > n:\n                continue\n            if tmp == cnt:\n                break\n            x[j] += num\n            tmp += 1\n    print(*x, sep=' ')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    li2 = [0, 0, 0]\n    temp1 = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            temp1 = i\n            break\n    j = temp1\n    while j > 0:\n        x = a[j] - a[0]\n        if x < 0:\n            x = x * -1\n            count = x // j\n            if count == 1:\n                count = 2\n                if li2[0] ^ j <= n:\n                    li2[0] ^= j\n                    count = count - 1\n                if count & (li2[1] ^ j) <= n:\n                    li2[1] ^= j\n                    count = count - 1\n                if count > 0 & (li2[2] ^ j <= n):\n                    li2[2] ^= j\n            elif count == 3:\n                li2[0] ^= j\n                li2[1] ^= j\n                li2[2] ^= j\n        else:\n            count = x // j\n            if count == 1:\n                if li2[0] ^ j <= n:\n                    li2[0] ^= j\n                elif li2[1] ^ j <= n:\n                    li2[1] ^= j\n                else:\n                    li2[2] ^= j\n        li2.sort()\n        j //= 2\n    for i in range(len(li2)):\n        print(li2[i], end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    val = [0] * 3\n    i = res\n    while i > 0:\n        dif = l[i] - l[0]\n        if dif < 0:\n            dif = dif * -1\n            c = dif // i\n            if c == 1:\n                c = 2\n                if val[0] ^ i <= n:\n                    val[0] = val[0] ^ i\n                    c -= 1\n                if c and val[1] ^ i <= n:\n                    val[1] ^= i\n                    c -= 1\n                if c > 0 and val[2] ^ i <= n:\n                    val[2] ^= i\n            elif c == 3:\n                val[0] ^= i\n                val[1] ^= i\n                val[2] ^= i\n        else:\n            c = dif // i\n            if c == 1:\n                if val[0] ^ i <= n:\n                    val[0] ^= i\n                elif val[1] ^ i <= n:\n                    val[1] ^= i\n                else:\n                    val[2] ^= i\n        i = i // 2\n        val.sort()\n    for i in val:\n        print(i, end=' ')\n    print()", "def fun(n):\n    ans = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            ans = i\n            break\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    arr = [0, 0, 0]\n    i = fun(n)\n    while i > 0:\n        diff = a[i] - a[0]\n        if diff < 0:\n            diff *= -1\n            b = diff / i\n            if b == 1:\n                b = 2\n                if arr[0] ^ i <= n:\n                    arr[0] ^= i\n                    b -= 1\n                if b and arr[1] ^ i <= n:\n                    arr[1] ^= i\n                    b -= 1\n                if b > 0 and arr[2] ^ i <= n:\n                    arr[2] ^= i\n            elif b == 3:\n                arr[0] ^= i\n                arr[1] ^= i\n                arr[2] ^= i\n        else:\n            b = diff / i\n            if b == 1:\n                if arr[0] ^ i <= n:\n                    arr[0] ^= i\n                elif arr[1] ^ 1 <= n:\n                    arr[1] ^= i\n                else:\n                    arr[2] ^= i\n        i = int(i / 2)\n        arr = sorted(arr)\n    print(*arr)", "def max2pow(n):\n    po = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            po = i\n            break\n    return po\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = max2pow(n)\n    while i > 0:\n        diff = arr[i] - arr[0]\n        if diff < 0:\n            diff *= -1\n            ct = diff // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] = ans[2] ^ i\n            elif ct == 3:\n                ans[0] = ans[0] ^ i\n                ans[1] = ans[1] ^ i\n                ans[2] = ans[2] ^ i\n        else:\n            ct = diff // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                elif ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                else:\n                    ans[2] = ans[2] ^ i\n        ans.sort()\n        i = i // 2\n    print(f'{ans[0]} {ans[1]} {ans[2]}')", "def highestpowerof2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nfor test in range(int(input())):\n    n = int(input())\n    arr = [int(char) for char in input().split()]\n    ans = [0, 0, 0]\n    i = highestpowerof2(n)\n    while i >= 1:\n        diff = arr[i] - arr[0]\n        if diff < 0:\n            diff *= -1\n            ct = diff // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if (ct and ans[1] ^ i) <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = diff / i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i = i // 2\n    print(ans[0], ans[1], ans[2])", "def find_p(p):\n    for i in range(p, 0, -1):\n        if i & i - 1 == 0:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    li = [int(i) for i in input().split()]\n    i = find_p(n)\n    res = [0] * 3\n    while i > 0:\n        d = li[i] - li[0]\n        if d < 0:\n            d *= -1\n            c = d / i\n            if c == 1:\n                c = 2\n                if res[0] ^ i <= n:\n                    res[0] ^= i\n                    c -= 1\n                if c and res[1] ^ i <= n:\n                    res[1] ^= i\n                    c -= 1\n                if c > 0 and res[2] ^ i <= n:\n                    res[2] ^= i\n            elif c == 3:\n                res[0] ^= i\n                res[1] ^= i\n                res[2] ^= i\n        else:\n            c = d / i\n            if c == 1:\n                if res[0] ^ i <= n:\n                    res[0] ^= i\n                elif res[1] ^ i <= n:\n                    res[1] ^= i\n                else:\n                    res[2] ^= i\n        res.sort()\n        i = int(i / 2)\n    print(res[0], res[1], res[2])", "def power(n):\n    ans = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            ans = i\n            break\n    return ans\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    f = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = power(n)\n    while i > 0:\n        diff = f[i] - f[0]\n        if diff < 0:\n            diff *= -1\n            x = diff // i\n            if x == 1:\n                x = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    x -= 1\n                if x != 0 and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    x -= 1\n                if x > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif x == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            x = diff // i\n            if x == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i = i // 2\n    print(ans[0], ans[1], ans[2])\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    power = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            power = i\n            break\n    j = power\n    while j > 0:\n        x = a[j] - a[0]\n        if x < 0:\n            x = x * -1\n            c = x // j\n            if c == 1:\n                c = 2\n                if ans[0] ^ j <= n:\n                    ans[0] ^= j\n                    c = c - 1\n                if c & (ans[1] ^ j) <= n:\n                    ans[1] ^= j\n                    c = c - 1\n                if c > 0 & (ans[2] ^ j <= n):\n                    ans[2] ^= j\n            elif c == 3:\n                ans[0] ^= j\n                ans[1] ^= j\n                ans[2] ^= j\n        else:\n            c = x // j\n            if c == 1:\n                if ans[0] ^ j <= n:\n                    ans[0] ^= j\n                elif ans[1] ^ j <= n:\n                    ans[1] ^= j\n                else:\n                    ans[2] ^= j\n        ans.sort()\n        j //= 2\n    for i in ans:\n        print(i, end=' ')\n    print()", "def max2power(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = max2power(n)\n    while i > 0:\n        dif = f[i] - f[0]\n        if dif < 0:\n            dif = abs(dif)\n            c = int(dif / i)\n            if c == 1:\n                c = 2\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                    c -= 1\n                if c and ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                    c -= 1\n                if c > 0 and ans[2] ^ i <= n:\n                    ans[2] = ans[2] ^ i\n            elif c == 3:\n                ans[0] = ans[0] ^ i\n                ans[1] = ans[1] ^ i\n                ans[2] = ans[2] ^ i\n        else:\n            c = int(dif / i)\n            if c == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                elif ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                else:\n                    ans[2] = ans[2] ^ i\n        i = int(i / 2)\n        ans.sort()\n    print(*ans)", "def check(n):\n    po = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            po = i\n            break\n    return po\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    val = [0, 0, 0]\n    i = check(n)\n    while i > 0:\n        diff = a[i] - a[0]\n        if diff < 0:\n            diff *= -1\n            cons = diff // i\n            if cons == 1:\n                cons = 2\n                if val[0] ^ i <= n:\n                    val[0] ^= i\n                    cons -= 1\n                if cons and val[1] ^ i <= n:\n                    val[1] ^= i\n                    cons -= 1\n                if cons > 0 and val[2] ^ i <= n:\n                    val[2] ^= i\n            elif cons == 3:\n                val[0] ^= i\n                val[1] ^= i\n                val[2] ^= i\n        else:\n            cons = diff // i\n            if cons == 1:\n                if val[0] ^ i <= n:\n                    val[0] ^= i\n                elif val[1] ^ i <= n:\n                    val[1] ^= i\n                else:\n                    val[2] ^= i\n        val = sorted(val)\n        i = i // 2\n    print(val[0], val[1], val[2])", "def hp(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nT = int(input())\nwhile T > 0:\n    T -= 1\n    n = int(input())\n    st = input()\n    st = st.split(' ')\n    st = [int(i) for i in st]\n    ans = [0, 0, 0]\n    i = hp(n)\n    while i > 0:\n        dif = st[i] - st[0]\n        if dif < 0:\n            dif *= -1\n            ct = dif // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n                    ct -= 1\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = dif / i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i = i // 2\n    print(ans[0], ans[1], ans[2])", "def power(n):\n    ans = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            ans = i\n            break\n    return ans\nfor ts in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ans = [0] * 3\n    i = power(n)\n    while i > 0:\n        d = ls[i] - ls[0]\n        if d < 0:\n            d *= -1\n            ct = d // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = d // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        i = i // 2\n        ans.sort()\n    print(ans[0], ans[1], ans[2])", "import math\nimport itertools\n\ndef finc_max(n):\n    result = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            result = i\n            break\n    return result\n\ndef functionmax(a, b):\n    return min(a, a ^ b)\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    zero_3 = []\n    for i in range(0, 3):\n        zero_3.append(0)\n    a = arr[0]\n    b = arr[1]\n\n    def printt(output):\n        print(*output)\n    final_res = zero_3\n\n    def xorfunction(n, i):\n        return n ^ i\n    i = finc_max(n)\n    ac = 0\n    left = 0\n    right = n\n    while i > 0:\n        minus_1_2 = arr[i] - arr[0]\n        if minus_1_2 < 0:\n            minus_1_2 = minus_1_2 * -1\n            ac = ac + 1\n            pointer = int(minus_1_2 / i)\n            if pointer == 1:\n                left = left + 1\n                pointer = 2\n                ac = ac - 1\n                if final_res[0] ^ i <= n:\n                    final_res[0] = final_res[0] ^ i\n                    pointer = pointer - 1\n                if pointer and final_res[1] ^ i <= n:\n                    c = functionmax(a, b)\n                    if c > 0:\n                        c = c - 1\n                    else:\n                        c = c * 2\n                        ac = ac + 1\n                    final_res[1] = xorfunction(final_res[1], i)\n                    pointer = pointer - 1\n                if pointer > 0 and final_res[2] ^ i <= n:\n                    right = right - 1\n                    final_res[2] = xorfunction(final_res[2], i)\n                    mid = right // 2\n                    pointer = pointer - 1\n            elif pointer == 3:\n                ac = ac * -1\n                final_res[0] = xorfunction(final_res[0], i)\n                final_res[1] = xorfunction(final_res[1], i)\n                final_res[2] = xorfunction(final_res[2], i)\n        else:\n            ac = ac + 1\n            c = functionmax(a, b)\n            if c > 0:\n                c = c - 1\n            else:\n                c = c * 2\n            pointer = int(minus_1_2 / i)\n            if pointer == 1:\n                if final_res[0] ^ i <= n:\n                    final_res[0] ^= i\n                elif final_res[1] ^ i <= n:\n                    final_res[1] ^= i\n                else:\n                    final_res[2] ^= i\n        i = i // 2\n        final_res.sort()\n    printt(final_res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    f = list(map(int, input().split()))\n    abc = [0, 0, 0]\n    j = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            j = i\n            break\n    while j > 0:\n        diff = f[j] - f[0]\n        if diff < 0:\n            diff *= -1\n            count = diff // j\n            if count == 1:\n                count = 2\n                if abc[0] ^ j <= n:\n                    abc[0] ^= j\n                    count -= 1\n                if count != 0 and abc[1] ^ j <= n:\n                    abc[1] ^= j\n                    count -= 1\n                if count != 0 and abc[2] ^ j <= n:\n                    abc[2] ^= j\n            elif count == 3:\n                (abc[0], abc[1], abc[2]) = (abc[0] ^ j, abc[1] ^ j, abc[2] ^ j)\n        else:\n            count = diff // j\n            if count == 1:\n                if abc[0] ^ j <= n:\n                    abc[0] ^= j\n                elif abc[1] ^ j <= n:\n                    abc[1] ^= j\n                else:\n                    abc[2] ^= j\n        abc.sort()\n        j = j // 2\n    print(*abc, sep=' ', end='\\n')", "t = int(input())\nwhile t:\n    n = int(input())\n    array = list(map(int, input().split()))\n    for j in range(n, 0, -1):\n        if j & j - 1 == 0:\n            i = j\n            break\n    res = [0, 0, 0]\n    while i > 0:\n        temp = 0\n        m = array[i] - array[0]\n        if m < 0:\n            m *= -1\n            calino = m / i\n            if calino == 1:\n                calino = 2\n                for alpha in range(10):\n                    temp += alpha\n                if res[0] ^ i <= n:\n                    res[0] ^= i\n                    calino -= 1\n                if calino and res[1] ^ i <= n:\n                    res[1] ^= i\n                    calino -= 1\n                if calino > 0 and res[2] ^ i <= n:\n                    res[2] ^= i\n            elif calino == 3:\n                for alpha in range(10):\n                    temp += alpha\n                res[0] ^= i\n                res[1] ^= i\n                res[2] ^= i\n        else:\n            for alpha in range(10):\n                temp += alpha\n            calino = m / i\n            if calino == 1:\n                for alpha in range(10):\n                    temp += alpha\n                if res[0] ^ i <= n:\n                    res[0] ^= i\n                elif res[1] ^ i <= n:\n                    res[1] ^= i\n                else:\n                    res[2] ^= i\n        temp = temp - res[0]\n        res.sort()\n        i = int(i / 2)\n    name = 'yashvardhan'\n    print(*res)\n    t -= 1\nname += ' Rathore'", "def check(x, y, z, b):\n    for i in range(len(b)):\n        if (x ^ i) + (y ^ i) + (z ^ i) != b[i]:\n            return False\n    return True\nfor x in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    if 0 in b:\n        c = b.index(0)\n        print(c, c, c)\n    else:\n        c = b.index(min(b))\n        d = b[0] - c\n        l = d // 2\n        r = d // 2 + d % 2\n        while l >= 0 and r <= a + 1:\n            if check(c, l, r, b):\n                print(c, l, r)\n                break\n            l -= 1\n            r += 1", "def highestPowerOf2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            return i\nt = int(input())\nwhile t:\n    n = int(input())\n    lis = [int(i) for i in input().strip().split(' ')]\n    ans = [0] * 3\n    i = highestPowerOf2(n)\n    while i > 0:\n        diff = lis[i] - lis[0]\n        if diff < 0:\n            diff *= -1\n            count = diff // i\n            if count == 1:\n                count = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    count -= 1\n                if count and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    count -= 1\n                if count > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif count == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            count = diff // i\n            if count == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i //= 2\n    print(ans[0], ans[1], ans[2])\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    array = list(map(int, input().split()))\n\n    def func(n):\n        val = 0\n        for i in range(n, 0, -1):\n            if i & i - 1 == 0:\n                val = i\n                break\n        return val\n    res = [0, 0, 0]\n    i = func(n)\n    while i > 0:\n        minus = array[i] - array[0]\n        if minus < 0:\n            minus *= -1\n            ct = minus / i\n            if ct == 1:\n                ct = 2\n                if res[0] ^ i <= n:\n                    res[0] ^= i\n                    ct -= 1\n                if ct and res[1] ^ i <= n:\n                    res[1] ^= i\n                    ct -= 1\n                if ct > 0 and res[2] ^ i <= n:\n                    res[2] ^= i\n            elif ct == 3:\n                res[0] ^= i\n                res[1] ^= i\n                res[2] ^= i\n        else:\n            ct = minus / i\n            if ct == 1:\n                if res[0] ^ i <= n:\n                    res[0] ^= i\n                elif res[1] ^ i <= n:\n                    res[1] ^= i\n                else:\n                    res[2] ^= i\n        res.sort()\n        i = int(i / 2)\n    print(res[0], res[1], res[2], sep=' ')\n    t -= 1", "for t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = 1\n    while i <= n:\n        if i << 1 > n:\n            break\n        else:\n            i = i << 1\n    ans = [0, 0, 0]\n    while i > 0:\n        k = arr[i] - arr[0]\n        if k < 0:\n            k *= -1\n            z = k // i\n            if z == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n            elif z == 1:\n                z = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    z -= 1\n                if z and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    z -= 1\n                if z > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n        else:\n            z = k // i\n            if z == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        i = i // 2\n        ans.sort()\n    print(*ans, sep=' ')", "import io\nimport os\nimport sys\nimport math\nsys.setrecursionlimit(10000000)\nfor _ in range(int(input())):\n    n = int(input())\n    func_arr = list(map(int, input().split()))\n    abc_arr = [0, 0, 0]\n    cur_pow2 = 2 ** int(math.log2(n))\n    while cur_pow2 > 0:\n        cur_difference = func_arr[cur_pow2] - func_arr[0]\n        if cur_difference < 0:\n            cur_difference = abs(cur_difference)\n            cur = cur_difference // cur_pow2\n            if cur == 1:\n                cur = 2\n                if abc_arr[0] ^ cur_pow2 <= n:\n                    abc_arr[0] ^= cur_pow2\n                    cur -= 1\n                if cur and abc_arr[1] ^ cur_pow2 <= n:\n                    abc_arr[1] ^= cur_pow2\n                    cur -= 1\n                if cur > 0 and abc_arr[2] ^ cur_pow2 <= n:\n                    abc_arr[2] ^= cur_pow2\n            elif cur == 3:\n                abc_arr[0] ^= cur_pow2\n                abc_arr[1] ^= cur_pow2\n                abc_arr[2] ^= cur_pow2\n        else:\n            cur = cur_difference // cur_pow2\n            if cur == 1:\n                if abc_arr[0] ^ cur_pow2 <= n:\n                    abc_arr[0] ^= cur_pow2\n                elif abc_arr[1] ^ cur_pow2 <= n:\n                    abc_arr[1] ^= cur_pow2\n                else:\n                    abc_arr[2] ^= cur_pow2\n        cur_pow2 = cur_pow2 // 2\n        abc_arr.sort()\n    print(*abc_arr)", "def msb(n):\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = msb(n)\n    while i > 0:\n        d = arr[i] - arr[0]\n        if d < 0:\n            d *= -1\n            ct = d // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = d // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[2] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans = ans[:3]\n        ans.sort()\n        i //= 2\n    print('{} {} {}'.format(ans[0], ans[1], ans[2]))", "def highestPowerof2(n):\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = highestPowerof2(n)\n    while i > 0:\n        d = arr[i] - arr[0]\n        if d < 0:\n            d *= -1\n            ct = d // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = d // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[2] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans = ans[:3]\n        ans.sort()\n        i //= 2\n    print('{} {} {}'.format(ans[0], ans[1], ans[2]))", "def highestPowerof2(n):\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = highestPowerof2(n)\n    while i > 0:\n        d = arr[i] - arr[0]\n        if d < 0:\n            d *= -1\n            ct = d // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = d // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[2] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans = ans[:3]\n        ans.sort()\n        i //= 2\n    print('{} {} {}'.format(ans[0], ans[1], ans[2]))", "def fun(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = fun(n)\n    while i > 0:\n        d = l[i] - l[0]\n        if d < 0:\n            d *= -1\n            ct = d // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = d // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i //= 2\n    print(*ans)\n    t -= 1", "def pow_highest(n):\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    ans = [0] * 3\n    i = pow_highest(n)\n    while i > 0:\n        diff = f[i] - f[0]\n        if diff < 0:\n            ct = -diff // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                    ct -= 1\n                if ct > 0 and ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] = ans[2] ^ i\n            elif ct == 3:\n                ans[0] = ans[0] ^ i\n                ans[1] = ans[1] ^ i\n                ans[2] = ans[2] ^ i\n        else:\n            ct = diff // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                elif ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                else:\n                    ans[2] = ans[2] ^ i\n        ans.sort()\n        i = i // 2\n    print(*ans)", "def power(num):\n    ans = 0\n    for i in range(num, 0, -1):\n        if i & i - 1 == 0:\n            ans = i\n            break\n    return ans\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = power(n)\n    while i > 0:\n        diff = arr[i] - arr[0]\n        if diff < 0:\n            diff *= -1\n            ct = diff // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = diff // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        i = i // 2\n        ans.sort()\n    print(ans[0], ans[1], ans[2])", "def maxPowOf2(n):\n    while n:\n        if n & n - 1 == 0:\n            return n\n        n -= 1\n    return 1\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    x = list(map(int, input().split()))\n    s = x[0]\n    idx = maxPowOf2(n)\n    ans = [0, 0, 0]\n    while idx > 0:\n        ans.sort()\n        if s > x[idx]:\n            noOfOnes = (s - x[idx]) // idx\n            for i in range(noOfOnes):\n                ans[i] = ans[i] + idx\n            if noOfOnes == 1:\n                ans[1] = ans[1] + idx\n        elif (x[idx] - s) // idx < 3:\n            ans[0] = ans[0] + idx\n        idx //= 2\n    for i in ans:\n        if i > n:\n            while 1:\n                print('hlnow')\n        print(i, end=' ')\n    print('')", "def high(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    arr.append(0)\n    ans = [0, 0, 0]\n    i = high(n)\n    while i > 0:\n        diff = arr[i] - arr[0]\n        if diff < 0:\n            diff *= -1\n            ct = diff // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = diff // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        i //= 2\n        ans.sort()\n    print(*ans)", "def hp(n):\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            return i\n            break\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0] * 3\n    i = hp(n)\n    while i > 0:\n        diff = a[i] - a[0]\n        if diff < 0:\n            diff = abs(diff)\n            ct = diff // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                    ct -= 1\n                if ans[1] ^ i <= n and ct <= n:\n                    ans[1] = ans[1] ^ i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] = ans[2] ^ i\n                    ct -= 1\n            elif ct == 3:\n                ans[0] = ans[0] ^ i\n                ans[1] = ans[1] ^ i\n                ans[2] = ans[2] ^ i\n        else:\n            ct = diff // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                elif ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                else:\n                    ans[2] = ans[2] ^ i\n        i = i // 2\n        ans.sort()\n    print(ans[0], ans[1], ans[2])", "def power2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    arr = [0, 0, 0]\n    x = power2(n)\n    while x > 0:\n        dif = l[x] - l[0]\n        if dif < 0:\n            dif *= -1\n            ct = dif / x\n            if ct == 1:\n                ct = 2\n                if arr[0] ^ x <= n:\n                    arr[0] ^= x\n                    ct = ct - 1\n                if (ct and arr[1] ^ x) <= n:\n                    arr[1] ^= x\n                    ct = ct - 1\n                if ct > 0 and arr[2] ^ x <= n:\n                    arr[2] **= x\n            elif ct == 3:\n                arr[0] ^= x\n                arr[1] ^= x\n                arr[2] ^= x\n        else:\n            ct = dif / x\n            if ct == 1:\n                if arr[0] ^ x <= n:\n                    arr[0] ^= x\n                elif arr[1] ^ x <= n:\n                    arr[1] ^= x\n                else:\n                    arr[2] ^= x\n        x = x // 2\n        arr.sort()\n    print(arr[0], arr[1], arr[2])", "import math\n\ndef Log2(x):\n    if x == 0:\n        return False\n    return math.log10(x) / math.log10(2)\n\ndef power2checker(n):\n    if math.ceil(Log2(n)) == math.floor(Log2(n)):\n        return True\n    else:\n        return False\n\ndef hpowercal(n):\n    ans = 0\n    for i in range(n, 0, -1):\n        if power2checker(i) == True:\n            ans = i\n            break\n    return ans\nfor i in range(int(input())):\n    x = int(input())\n    arr = list(map(int, input().split(' ')))\n    final = [0] * 3\n    temp = hpowercal(x)\n    while temp > 0:\n        sub = arr[temp] - arr[0]\n        if sub < 0:\n            sub = sub * -1\n            cross_check = sub // temp\n            if cross_check == 1:\n                cross_check = 2\n                if final[0] ^ temp <= x:\n                    final[0] = final[0] ^ temp\n                    cross_check -= 1\n                if cross_check > 0 and final[1] ^ temp <= x:\n                    final[1] = final[1] ^ temp\n                    cross_check -= 1\n                if cross_check > 0 and final[2] ^ i <= x:\n                    final[2] = final[2] ^ temp\n            elif cross_check == 3:\n                final[0] ^= temp\n                final[1] ^= temp\n                final[2] ^= temp\n        else:\n            cross_check = sub // temp\n            if cross_check == 1:\n                if final[0] ^ temp <= x:\n                    final[0] = final[0] ^ temp\n                elif final[1] ^ temp <= x:\n                    final[1] ^= temp\n                else:\n                    final[2] ^= temp\n        final = sorted(final)\n        temp = temp // 2\n    print(*final, sep=' ')", "def powof2(n):\n    ans = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            ans = i\n            break\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    result = [0] * 3\n    i = powof2(n)\n    while i > 0:\n        difference = arr[i] - arr[0]\n        if difference < 0:\n            difference *= -1\n            count = difference // i\n            if count == 1:\n                count = 2\n                if result[0] ^ i <= n:\n                    result[0] ^= i\n                    count -= 1\n                if count and result[1] ^ i <= n:\n                    result[1] ^= i\n                    count -= 1\n                if count > 0 and result[2] ^ i <= n:\n                    result[2] ^= i\n            elif count == 3:\n                result[0] ^= i\n                result[1] ^= i\n                result[2] ^= i\n        else:\n            count = difference // i\n            if count == 1:\n                if result[0] ^ i <= n:\n                    result[0] ^= i\n                elif result[1] ^ i <= n:\n                    result[1] ^= i\n                else:\n                    result[2] ^= i\n        result = sorted(result)\n        i //= 2\n    print(*result, sep=' ')", "def highestpow2(n):\n    ans = 0\n    for i in range(n):\n        if n - i & n - i - 1 == 0:\n            ans = n - i\n            break\n    return int(ans)\nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = highestpow2(n)\n    while i > 0:\n        differ = x[i] - x[0]\n        if differ < 0:\n            differ = abs(differ)\n            cnt = differ / i\n            if cnt == 1:\n                cnt = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    cnt = cnt - 1\n                if cnt and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    cnt = cnt - 1\n                if cnt > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif cnt == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            cnt = differ / i\n            if cnt == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans = sorted(ans)\n        i = int(i / 2)\n    print(ans[0], ans[1], ans[2])", "def pow2(n):\n    res = 0\n    for i in range(n):\n        if n - i & n - i - 1 == 0:\n            res = n - i\n            break\n    return int(res)\nfor _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = pow2(n)\n    while i > 0:\n        dif = x[i] - x[0]\n        if dif < 0:\n            dif = abs(dif)\n            ct = dif / i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct = ct - 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct = ct - 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = dif / i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans = sorted(ans)\n        i = int(i / 2)\n    print(ans[0], ans[1], ans[2])", "import math\n\ndef highestPowerOf2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    f = [int(i) for i in input().split()]\n    ans = [0, 0, 0]\n    i = highestPowerOf2(n)\n    while i > 0:\n        diff = f[i] - f[0]\n        if diff < 0:\n            diff *= -1\n            c = diff // i\n            if c == 1:\n                c = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    c -= 1\n                if c and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    c -= 1\n                if c > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif c == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            c = diff // i\n            if c == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i //= 2\n    print(*ans)", "def cal(n) -> int:\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\ncase = int(input())\nfor z in range(case):\n    n = int(input())\n    soln = list(map(int, input().split(' ')))\n    ans = [0, 0, 0]\n    i = cal(n)\n    while i > 0:\n        dif = soln[i] - soln[0]\n        if dif < 0:\n            dif *= -1\n            ct = dif / i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = dif / i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        i = i // 2\n        ans.sort()\n    print(ans[0], ans[1], ans[2])", "import itertools as it\nimport math\n\ndef highestpowerof2(n):\n    res = 0\n    for i in range(n + 1)[::-1]:\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\ntry:\n    for _ in it.repeat(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        ans = [0, 0, 0]\n        i = highestpowerof2(n)\n        while i > 0:\n            diff = arr[i] - arr[0]\n            if diff < 0:\n                diff *= -1\n                ct = diff // i\n                if ct == 1:\n                    ct = 2\n                    if ans[0] ^ i <= n:\n                        ans[0] ^= i\n                        ct -= 1\n                    if ct and ans[1] ^ i <= n:\n                        ans[1] ^= i\n                        ct -= 1\n                    if ct > 0 and ans[2] ^ i <= n:\n                        ans[2] ^= i\n                elif ct == 3:\n                    ans[0] ^= i\n                    ans[1] ^= i\n                    ans[2] ^= i\n            else:\n                ct = diff // i\n                if ct == 1:\n                    if ans[0] ^ i <= n:\n                        ans[0] ^= i\n                    elif ans[1] ^ i <= n:\n                        ans[1] ^= i\n                    else:\n                        ans[2] ^= i\n            ans = sorted(ans)\n            i = i // 2\n        print(ans[0], ans[1], ans[2])\nexcept:\n    pass", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    base = arr[0]\n    j = math.floor(math.log2(len(arr) - 1))\n    while 2 ** j >= 1:\n        i = 2 ** j\n        dif = arr[i] - base\n        temp = []\n        if dif == 3 * i:\n            temp = [0, 0, 0]\n        elif dif == -3 * i:\n            temp = [1, 1, 1]\n        elif dif == i:\n            temp = [1, 0, 0]\n        else:\n            temp = [1, 1, 0]\n        for k in range(3):\n            ans[k] = ans[k] * 2 + temp[k]\n        ans.sort()\n        j -= 1\n    print(str(' ').join(map(str, ans)))", "T = int(input())\n\ndef find(v, o, j):\n    if v == o:\n        return -1\n    elif v > o:\n        if v - o == 2 ** j:\n            return 1\n        else:\n            return 0\n    elif o - v == 2 ** j:\n        return 2\n    else:\n        return 3\n\ndef bits(N):\n    i = 0\n    while N >= 2 ** i:\n        i += 1\n    return i\n\ndef algo():\n    N = int(input())\n    A = list(map(int, input().split()))\n    t = A[0]\n    out = [0, 0, 0]\n    bi = bits(N)\n    for j in range(bi - 1, -1, -1):\n        k = find(A[2 ** j], t, j)\n        n = 0\n        for i in range(k):\n            while out[n] + 2 ** j > N:\n                n += 1\n            out[n] += 2 ** j\n            n += 1\n        out.sort()\n    for i in out:\n        print(i, end=' ')\n    print()\nfor i in range(T):\n    algo()", "from math import log\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    bits = int(log(n, 2))\n    x = int(2 ** bits)\n    a = [0, 0, 0]\n    while x > 0:\n        diff = arr[x] - arr[0]\n        if diff < 0:\n            diff *= -1\n            count = diff // x\n            if count == 1:\n                count = 2\n                if a[0] ^ x <= n:\n                    a[0] ^= x\n                    count -= 1\n                if count and a[1] ^ x <= n:\n                    a[1] ^= x\n                    count -= 1\n                if count > 0 and a[2] ^ x <= n:\n                    a[2] ^= x\n            elif count == 3:\n                a[0] ^= x\n                a[1] ^= x\n                a[2] ^= x\n        else:\n            count = diff // x\n            if count == 1:\n                if a[0] ^ x <= n:\n                    a[0] ^= x\n                elif a[1] ^ x <= n:\n                    a[1] ^= x\n                else:\n                    a[2] ^= x\n        a.sort()\n        x //= 2\n    print(a[0], a[1], a[2])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = 2 ** int(math.log2(n))\n    ans = [0, 0, 0]\n    while i > 0:\n        diff = arr[i] - arr[0]\n        if diff < 0:\n            diff = -1 * diff\n            c = diff // i\n            if c == 1:\n                c = 2\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                    c = c - 1\n                if c & (ans[1] ^ i) <= n:\n                    ans[1] = ans[1] ^ i\n                    c = c - 1\n                if c > 0 & ans[2] ^ i <= n:\n                    ans[2] = ans[2] ^ i\n            elif c == 3:\n                ans[0] = ans[0] ^ i\n                ans[1] = ans[1] ^ i\n                ans[2] = ans[2] ^ i\n        else:\n            c = diff // i\n            if c == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                elif ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                else:\n                    ans[2] = ans[2] ^ i\n        ans = sorted(ans)\n        i = i // 2\n    b = ''\n    for i in ans:\n        b = b + str(i) + ' '\n    print(b)", "import math\n\ndef power(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    i = 2 ** int(math.log2(n))\n    a = [0, 0, 0]\n    while i > 0:\n        d = f[i] - f[0]\n        if d < 0:\n            d = -1 * d\n            cnt = d // i\n            if cnt == 1:\n                cnt = 2\n                if a[0] ^ i <= n:\n                    a[0] = a[0] ^ i\n                    cnt = cnt - 1\n                if cnt & (a[1] ^ i) <= n:\n                    a[1] = a[1] ^ i\n                    cnt = cnt - 1\n                if cnt > 0 & a[2] ^ i <= n:\n                    a[2] = a[2] ^ i\n            elif cnt == 3:\n                a[0] = a[0] ^ i\n                a[1] = a[1] ^ i\n                a[2] = a[2] ^ i\n        else:\n            cnt = d // i\n            if cnt == 1:\n                if a[0] ^ i <= n:\n                    a[0] = a[0] ^ i\n                elif a[1] ^ i <= n:\n                    a[1] = a[1] ^ i\n                else:\n                    a[2] = a[2] ^ i\n        a = sorted(a)\n        i = i // 2\n    ans = ''\n    for i in a:\n        ans = ans + str(i) + ' '\n    print(ans)", "def highestPowerof2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = highestPowerof2(n)\n    while i > 0:\n        diff = a[i] - a[0]\n        if diff < 0:\n            diff = diff * -1\n            cost = diff // i\n            if cost == 1:\n                cost = 2\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                    cost -= 1\n                if cost and ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                    cost -= 1\n                if cost > 0 and ans[2] ^ i <= n:\n                    ans[2] = ans[2] ^ i\n            elif cost == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            cost = diff // i\n            if cost == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i = i // 2\n    print(f'{ans[0]} {ans[1]} {ans[2]}')", "def findPowerOf2(n):\n    ans = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            ans = i\n            break\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    val = [0, 0, 0]\n    i = findPowerOf2(n)\n    while i > 0:\n        diff = arr[i] - arr[0]\n        if diff < 0:\n            diff *= -1\n            count = diff / i\n            if count == 1:\n                count = 2\n                if val[0] ^ i <= n:\n                    val[0] ^= i\n                    count -= 1\n                if count and val[1] ^ i <= n:\n                    val[1] ^= i\n                    count -= 1\n                if count > 0 and val[2] ^ i <= n:\n                    val[2] ^= i\n            elif count == 3:\n                val[0] ^= i\n                val[1] ^= i\n                val[2] ^= i\n        else:\n            count = diff // i\n            if count == 1:\n                if val[0] ^ i <= n:\n                    val[0] ^= i\n                elif val[1] ^ i <= n:\n                    val[1] ^= i\n                else:\n                    val[2] ^= i\n        val.sort()\n        i = i // 2\n    print(val[0], val[1], val[2])", "def solve(n):\n    r = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            r = i\n            break\n    return r\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = [0, 0, 0]\n    i = solve(n)\n    while i > 0:\n        d = a[i] - a[0]\n        if d < 0:\n            d *= -1\n            c = int(d / i)\n            if c == 1:\n                c = 2\n                if p[0] ^ i <= n:\n                    p[0] ^= i\n                    c -= 1\n                if c and p[1] ^ i <= n:\n                    p[1] ^= i\n                    c -= 1\n                if c > 0 and p[2] ^ i <= n:\n                    p[2] ^= i\n            elif c == 3:\n                p[0] ^= i\n                p[1] ^= i\n                p[2] ^= i\n        else:\n            c = int(d / i)\n            if c == 1:\n                if p[0] ^ i <= n:\n                    p[0] ^= i\n                elif p[1] ^ i <= n:\n                    p[1] ^= i\n                else:\n                    p[2] ^= i\n        p.sort()\n        i = i // 2\n    print(p[0], p[1], p[2])", "def deep_dive(a, b, c, bundles, base, level):\n    if level == len(bundles):\n        if a <= n and b <= n and (c <= n):\n            return [a, b, c]\n        return False\n    bundle = bundles[level]\n    is_success = deep_dive(a + bundle[0] * base, b + bundle[1] * base, c + bundle[2] * base, bundles, base * 2, level + 1)\n    if is_success:\n        return is_success\n    is_success = deep_dive(a + bundle[1] * base, b + bundle[2] * base, c + bundle[0] * base, bundles, base * 2, level + 1)\n    if is_success:\n        return is_success\n    is_success = deep_dive(a + bundle[2] * base, b + bundle[0] * base, c + bundle[1] * base, bundles, base * 2, level + 1)\n    return is_success\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    values = [int(x) for x in input().split()]\n    two_places = [values[0]]\n    jump = 1\n    while jump < len(values):\n        two_places.append(values[jump])\n        jump = jump * 2\n    (_A, _B, _C) = ([], [], [])\n    for i in range(1, len(two_places)):\n        change = two_places[0] - two_places[i]\n        if abs(change) == 2 ** (i - 1):\n            if change > 0:\n                _A.append(1)\n                _B.append(1)\n                _C.append(0)\n            else:\n                _A.append(1)\n                _B.append(0)\n                _C.append(0)\n        elif change > 0:\n            _A.append(1)\n            _B.append(1)\n            _C.append(1)\n        else:\n            _A.append(0)\n            _B.append(0)\n            _C.append(0)\n    bundles = []\n    for (a, b, c) in zip(_A, _B, _C):\n        bundle = (a, b, c)\n        bundles.append(bundle)\n    final_ans = deep_dive(0, 0, 0, bundles, 1, 0)\n    print(*final_ans, sep=' ')", "def isPowerofTwo(number):\n    while number != 1:\n        if number % 2:\n            return False\n        number /= 2\n    return True\n\ndef hpot(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if isPowerofTwo(i):\n            res = i\n            break\n    return res\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    flag = 0\n    ans = [0, 0, 0]\n    lis = []\n    marker = 0\n    maxi = 123456789\n    i = hpot(N)\n    mini = 0\n    bool = True\n    while i > 0:\n        diff = arr[i] - arr[0]\n        flag += 1\n        if diff < 0:\n            maxi = max(marker, maxi)\n            diff *= -1\n            marker += 2\n            ct = diff // i\n            if ct == 1:\n                ct = 2\n                mini = min(mini, flag)\n                lis.append(marker)\n                if ans[0] ^ i <= N:\n                    ans[0] ^= i\n                    bool = False\n                    ct -= 1\n                if ct and ans[1] ^ i <= N:\n                    flag += 2\n                    ans[1] ^= i\n                    bool = True\n                    ct -= 1\n                    lis.append(marker)\n                if ct > 0 and ans[2] ^ i <= N:\n                    ans[2] ^= i\n                    maxi = max(flag, marker)\n                    mini += 1\n            elif ct == 3:\n                flag += 1\n                marker -= 1\n                ans[0] ^= i\n                check = 0\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = diff // i\n            check = 1\n            lis.append(mini)\n            lis.append(maxi)\n            if ct == 1:\n                if ans[0] ^ i <= N:\n                    ans[0] ^= i\n                    bool = False\n                elif ans[1] ^ i <= N:\n                    check += 2\n                    ans[1] ^= i\n                    bool = False\n                else:\n                    check = 0\n                    lis.append(check)\n                    ans[2] ^= i\n        ans.sort()\n        i //= 2\n        mini = min(flag, marker)\n    print(str(ans[0]) + ' ' + str(ans[1]) + ' ' + str(ans[2]))", "def isPowerofTwo(number):\n    while number != 1:\n        if number % 2:\n            return False\n        number /= 2\n    return True\n\ndef hpot(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if isPowerofTwo(i):\n            res = i\n            break\n    return res\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = hpot(N)\n    while i > 0:\n        diff = arr[i] - arr[0]\n        if diff < 0:\n            diff *= -1\n            ct = diff // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= N:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= N:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= N:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = diff // i\n            if ct == 1:\n                if ans[0] ^ i <= N:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= N:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i //= 2\n    print(str(ans[0]) + ' ' + str(ans[1]) + ' ' + str(ans[2]))", "def highPowOf2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = highPowOf2(n)\n    while i > 0:\n        diff = l[i] - l[0]\n        if diff < 0:\n            diff *= -1\n            ct = diff // i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct != 0 and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = diff // i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i //= 2\n    print(ans[0], ans[1], ans[2])", "def highestPowerNearN(N):\n    result = 0\n    for i in range(N, 1, -1):\n        if i & i - 1 == 0:\n            result = i\n            break\n    return result\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        f = list(map(int, input().split()))\n        ans = [0, 0, 0]\n        i = highestPowerNearN(N)\n        while i > 0:\n            diff = f[i] - f[0]\n            if diff < 0:\n                diff *= -1\n                c = diff // i\n                if c == 1:\n                    c = 2\n                    if ans[0] ^ i <= N:\n                        ans[0] ^= i\n                        c -= 1\n                    if c != 0 and ans[1] ^ i <= N:\n                        ans[1] ^= i\n                        c -= 1\n                    if c > 0 and ans[2] ^ i <= N:\n                        ans[2] ^= i\n                elif c == 3:\n                    ans[0] ^= i\n                    ans[1] ^= i\n                    ans[2] ^= i\n            else:\n                c = diff // i\n                if c == 1:\n                    if ans[0] ^ i <= N:\n                        ans[0] ^= i\n                    elif ans[1] ^ i <= N:\n                        ans[1] ^= i\n                    else:\n                        ans[2] ^= i\n            ans.sort()\n            i //= 2\n        print(ans[0], ans[1], ans[2])\nmain()", "def powerof2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            return res\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    ans = [0] * 3\n    i = powerof2(n)\n    while i > 0:\n        diff = arr[i] - arr[0]\n        if diff < 0:\n            diff = diff * -1\n            ct = diff / i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                    ct -= 1\n                if (ct and ans[1] ^ i) <= n:\n                    ans[1] = ans[1] ^ i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] = ans[2] ^ i\n            elif ct == 3:\n                ans[0] = ans[0] ^ i\n                ans[1] = ans[1] ^ i\n                ans[2] = ans[2] ^ i\n        else:\n            ct = diff / i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] = ans[0] ^ i\n                elif ans[1] ^ i <= n:\n                    ans[1] = ans[1] ^ i\n                else:\n                    ans[2] = ans[2] ^ i\n        i = i // 2\n        ans.sort()\n    print(ans[0], ans[1], ans[2])", "def highestPowerof2(n):\n    res = 0\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            res = i\n            break\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    ans = [0] * 3\n    i = highestPowerof2(n)\n    while i > 0:\n        diff = f[i] - f[0]\n        if diff < 0:\n            diff *= -1\n            cnt = diff // i\n            if cnt == 1:\n                cnt = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    cnt -= 1\n                if cnt & (ans[1] ^ i) <= n:\n                    ans[1] ^= i\n                    cnt -= 1\n                if cnt > 0 & (ans[2] ^ i) <= n:\n                    ans[2] ^= i\n            elif cnt == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            cnt = diff // i\n            if cnt == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i //= 2\n    print(*ans)", "def pow(i):\n    return i & i - 1 == 0\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    (a, b, c) = (0, 0, 0)\n    numXbits = [(f[0] - f[i] + 3 * i) // (2 * i) if i != 0 and pow(i) else 0 for i in range(n + 1)]\n    for i in range(n, -1, -1):\n        if numXbits[i] == 1:\n            if min(a, b, c) == a:\n                a += i\n            elif min(a, b, c) == b:\n                b += i\n            else:\n                c += i\n        elif numXbits[i] == 2:\n            if max(a, b, c) == c:\n                a += i\n                b += i\n            elif max(a, b, c) == a:\n                b += i\n                c += i\n            else:\n                a += i\n                c += i\n        elif numXbits[i] == 3:\n            a += i\n            b += i\n            c += i\n    print(a, b, c)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    ones = []\n    i = 1\n    while i <= n:\n        ones.append((3 - (f[i] - f[0]) // i) // 2)\n        i *= 2\n    while len(ones) > 0:\n        for i in range(3):\n            ans[i] *= 2\n        for i in range(ones[-1]):\n            ans[i] += 1\n        ones.pop()\n        ans.sort()\n    print(ans[0], ans[1], ans[2])", "def high(n):\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            return i\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = high(n)\n    while i > 0:\n        dif = arr[i] - arr[0]\n        if dif < 0:\n            dif *= -1\n            ct = dif / i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = dif / i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i = i // 2\n    print(*ans)", "def high(n):\n    for i in range(n, 0, -1):\n        if i & i - 1 == 0:\n            return i\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = [0, 0, 0]\n    i = high(n)\n    while i > 0:\n        dif = arr[i] - arr[0]\n        if dif < 0:\n            dif *= -1\n            ct = dif / i\n            if ct == 1:\n                ct = 2\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                    ct -= 1\n                if ct and ans[1] ^ i <= n:\n                    ans[1] ^= i\n                    ct -= 1\n                if ct > 0 and ans[2] ^ i <= n:\n                    ans[2] ^= i\n            elif ct == 3:\n                ans[0] ^= i\n                ans[1] ^= i\n                ans[2] ^= i\n        else:\n            ct = dif / i\n            if ct == 1:\n                if ans[0] ^ i <= n:\n                    ans[0] ^= i\n                elif ans[1] ^ i <= n:\n                    ans[1] ^= i\n                else:\n                    ans[2] ^= i\n        ans.sort()\n        i = i // 2\n    print(*ans)", "for test in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    if lst[0] == 0:\n        print('0 0 0')\n    else:\n        a = lst.index(min(lst))\n        lst = [lst[i] - (a ^ i) for i in range(n + 1)]\n        rev = lst[::-1]\n        b = n - rev.index(min(rev))\n        lst = [lst[i] - (b ^ i) for i in range(n + 1)]\n        c = lst.index(0)\n        print(*sorted([a, b, c]), sep=' ')", "def check(x, y, z, b):\n    for i in range(len(b)):\n        if (x ^ i) + (y ^ i) + (z ^ i) != b[i]:\n            return False\n    return True\nfor x in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    if 0 in b:\n        c = b.index(0)\n        print(c, c, c)\n    else:\n        c = b.index(min(b))\n        d = b[0] - c\n        l = d // 2\n        r = d // 2 + d % 2\n        while l >= 0 and r <= a + 1:\n            if check(c, l, r, b):\n                print(c, l, r)\n                break\n            l -= 1\n            r += 1", "from math import log2\n\ndef update_num(nums, index, n, i):\n    nums[index] += i\n    if nums[index] > n:\n        nums[index] -= i\n        return False\n    return True\n\ndef update_nums(nums, n, i, x):\n    if x == 1:\n        if not update_num(nums, 0, n, i):\n            if not update_num(nums, 1, n, i):\n                update_num(nums, 2, n, i)\n    if x == -1:\n        if not update_num(nums, 0, n, i):\n            update_num(nums, 1, n, i)\n            update_num(nums, 2, n, i)\n        elif not update_num(nums, 1, n, i):\n            update_num(nums, 2, n, i)\n\ndef update_nums2(nums, n, i, x):\n    if x == 1:\n        (maxdiff, index) = (0, 0)\n        for z in range(3):\n            if n - nums[z] >= maxdiff:\n                maxdiff = n - nums[z]\n                index = z\n        nums[index] += i\n    if x == -1:\n        (mindiff, index) = (n + 1, 0)\n        for z in range(3):\n            if n - nums[z] < mindiff:\n                mindiff = n - nums[z]\n                index = z\n        for z in range(3):\n            if index == z:\n                continue\n            nums[z] += i\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    f = list(map(int, input().split()))\n    nums = [0, 0, 0]\n    s = f[0]\n    i = int(2 ** (log2(n) // 1))\n    while i > 0:\n        diff = f[i] - s\n        if diff == i:\n            update_nums2(nums, n, i, 1)\n        elif diff == -i:\n            update_nums2(nums, n, i, -1)\n        elif diff == -3 * i:\n            nums = [x + i for x in nums]\n        i //= 2\n    print(' '.join([str(x) for x in nums]))", "from functools import lru_cache\nimport math\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pow = math.floor(math.log2(n))\n    base = arr[0]\n    op = []\n    for i in range(0, pow + 1):\n        pointer = 2 ** i\n        if pointer > n:\n            continue\n        diff = (base + 3 * pointer - arr[pointer]) // (2 * pointer)\n        op.append(int(diff))\n    ans = []\n    ret = [0, 0, 0]\n    for i in range(len(op) - 1, -1, -1):\n        ret.sort()\n        alloc = 2 ** i\n        for i in range(op[i]):\n            ret[i] += alloc\n    print(' '.join([str(x) for x in ret]))", "def check(x, y, z, b):\n    for i in range(len(b)):\n        if (x ^ i) + (y ^ i) + (z ^ i) != b[i]:\n            return False\n    return True\nfor x in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    if 0 in b:\n        c = b.index(0)\n        print(c, c, c)\n    else:\n        c = b.index(min(b))\n        d = b[0] - c\n        l = d // 2\n        r = d // 2 + d % 2\n        while l >= 0 and r <= a + 1:\n            if check(c, l, r, b):\n                print(c, l, r)\n                break\n            l -= 1\n            r += 1", "import math\nimport collections\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = A[0]\n    val = 1\n    ans = [0] * 3\n    while 2 * val <= N:\n        val *= 2\n    i = val\n    while i > 0:\n        C = i\n        if B >= A[C]:\n            cnt = (B - A[C]) // C\n            if cnt == 3:\n                ans[0] += C\n                ans[1] += C\n                ans[2] += C\n            else:\n                ans[0] += C\n                ans[1] += C\n        else:\n            cnt = abs(B - A[C]) // C\n            if cnt == 1:\n                ans[0] += C\n        i //= 2\n        ans.sort()\n    print(*ans)", "def ispow2(i):\n    return i & i - 1 == 0\nfor _ in range(int(input())):\n    N = int(input())\n    f = list(map(int, input().split()))\n    (a, b, c) = (0, 0, 0)\n    numXbits = [(f[0] - f[i] + 3 * i) // (2 * i) if i != 0 and ispow2(i) else 0 for i in range(N + 1)]\n    for i in range(N, -1, -1):\n        if numXbits[i] == 1:\n            if min(a, b, c) == a:\n                a += i\n            elif min(a, b, c) == b:\n                b += i\n            else:\n                c += i\n        elif numXbits[i] == 2:\n            if max(a, b, c) == c:\n                a += i\n                b += i\n            elif max(a, b, c) == a:\n                b += i\n                c += i\n            else:\n                a += i\n                c += i\n        elif numXbits[i] == 3:\n            a += i\n            b += i\n            c += i\n    print(a, b, c)", "def indexes(ar, n):\n    ind = n\n    min = ar[n]\n    for i in range(n, -1, -1):\n        if min > ar[i]:\n            ind = i\n            min = ar[i]\n    return ind\n\ndef valid(ar, a, i, n):\n    b_p = i ^ a\n    c_p = ar[a] - i ^ a\n    if max(b_p, c_p) > n:\n        return False\n    check = 0\n    if (a ^ b_p) + (c_p ^ b_p) == ar[b_p]:\n        check += 1\n    if (a ^ c_p) + (c_p ^ b_p) == ar[c_p]:\n        check += 1\n    if check == 2:\n        return True\n    else:\n        return False\n\ndef cal(ar, a, n):\n    for i in range(ar[a] // 2 + 1):\n        if valid(ar, a, i, n):\n            return [i ^ a, ar[a] - i ^ a]\n    return [a, a]\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    ar = [int(i) for i in input().split(' ')]\n    a = indexes(ar, n)\n    ar2 = []\n    for i in range(n + 1):\n        ar2.append(ar[i] - a ^ i)\n    ans = cal(ar, a, n)\n    print(a, ans[0], ans[1])\n    t -= 1", "T = int(input())\nimport math\nfor test in range(T):\n    n = int(input())\n    F = [int(x) for x in input().split()]\n    ans = [0, 0, 0]\n    d = {3: 0, 1: 1, -1: 2, -3: 3}\n    p = 2 ** math.floor(math.log2(n))\n    while p > 0:\n        for i in range(d[(F[p] - F[0]) // p]):\n            ans[i] += p\n        ans.sort()\n        p //= 2\n    for i in ans:\n        print(i, end=' ')\n    print()", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    L = [int(x) for x in input().split()]\n    s = int(math.log(N, 2))\n    A = 0\n    B = 0\n    C = 0\n    for j in range(s, -1, -1):\n        r = 2 ** j\n        diff = L[r] - L[0]\n        count = 3 - (diff + 3 * r) // (2 * r)\n        R = [A, B, C]\n        R.sort()\n        [A, B, C] = R\n        if count > 0 and A + r <= N:\n            count -= 1\n            A = A + r\n        if count > 0 and B + r <= N:\n            count -= 1\n            B = B + r\n        if count > 0 and C + r <= N:\n            count -= 1\n            C = C + r\n    print(A, B, C)", "import math\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    inp = list(map(int, input().split(' ')))\n    m = int(math.log2(n))\n    arr = [0, 0, 0]\n    res = []\n    for p in range(0, m + 1):\n        c = 2 ** (m - p)\n        t = int((inp[c] - inp[0]) / c)\n        if t == 3:\n            pass\n        elif t == 1:\n            arr[0] = arr[0] + c\n            for i in range(0, 2):\n                for j in range(0, 2 - i):\n                    if arr[j] > arr[j + 1]:\n                        temp = arr[j]\n                        arr[j] = arr[j + 1]\n                        arr[j + 1] = temp\n        elif t == -1:\n            arr[0] = arr[0] + c\n            arr[1] = arr[1] + c\n            for i in range(0, 2):\n                for j in range(0, 2 - i):\n                    if arr[j] > arr[j + 1]:\n                        temp = arr[j]\n                        arr[j] = arr[j + 1]\n                        arr[j + 1] = temp\n        elif t == -3:\n            arr[0] = arr[0] + c\n            arr[1] = arr[1] + c\n            arr[2] = arr[2] + c\n    print(str(arr[0]) + ' ' + str(arr[1]) + ' ' + str(arr[2]))\n    print()", "for _ in range(int(input())):\n    N = int(input())\n    input_list = list(map(int, input().split()))\n    next_idx = 1\n    bits_count = {}\n    for (idx, val) in enumerate(input_list):\n        if idx == next_idx:\n            diff = int((input_list[idx] - input_list[0]) / idx)\n            if diff == -3:\n                bits_count[idx] = 3\n            elif diff == -1:\n                bits_count[idx] = 2\n            elif diff == 1:\n                bits_count[idx] = 1\n            next_idx = idx * 2\n    total = 0\n    for k in bits_count:\n        if bits_count[k] == 3:\n            total = total + k\n    data = [total, total, total]\n    for k in sorted(bits_count, reverse=True):\n        if bits_count[k] == 2:\n            data[0] = data[0] + k\n            data[1] = data[1] + k\n        elif bits_count[k] == 1:\n            data[0] = data[0] + k\n        data.sort()\n    print(f'{data[0]} {data[1]} {data[2]}')", "for _ in range(int(input())):\n    n = int(input())\n    ll = list(map(int, input().split()))\n    x = ll[0]\n    mm = min(ll)\n    c = ll.index(mm)\n    ok = False\n    if x == 0:\n        print(0, 0, 0)\n        ok = True\n    for a in range(x + 1):\n        if ok:\n            break\n        b = x - c - a\n        for i in range(n + 1):\n            if (a ^ i) + (b ^ i) + (c ^ i) != ll[i] or max(a, b, c) > n:\n                break\n            elif i == n:\n                print(b, a, c)\n                ok = True\n                break", "from random import *\n\ndef miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    f = list(miis())\n    (a, b, c) = (0, 0, 0)\n    i = 1\n    z = 0\n    while i < n + 1:\n        if (f[i] - f[0]) // i == 1:\n            a += i\n        elif (f[i] - f[0]) // i == -1:\n            a += i\n            b += i\n        elif (f[i] - f[0]) // i == -3:\n            a += i\n            b += i\n            c += i\n        i *= 2\n        z += 1\n    abc = [a, b, c]\n    while max(abc) > n:\n        maxind = abc.index(max(abc))\n        ind = randint(0, 2)\n        while abc[ind] == abc[maxind]:\n            ind = randint(0, 2)\n        q = randint(0, z)\n        q = 2 ** q\n        if q & abc[maxind] and (not q & abc[ind]):\n            abc[maxind] -= q\n            abc[ind] += q\n    print(*abc)", "from sys import stdin\na = int(stdin.readline())\nfor t in range(0, a):\n    b = int(stdin.readline())\n    c = stdin.readline().split()\n    d = [int(x) for x in c]\n    start = d[0]\n    f = dict()\n    counter = 0\n    solution = 0\n    while 2 ** counter < len(d):\n        f[counter] = 0\n        if d[2 ** counter] - start == 2 ** counter * 3:\n            f[counter] += 0\n        elif d[2 ** counter] - start == 2 ** counter * 1:\n            f[counter] += 1\n        elif d[2 ** counter] - start == 2 ** counter * -1:\n            f[counter] += 2\n        elif d[2 ** counter] - start == 2 ** counter * -3:\n            f[counter] += 0\n            solution += 2 ** counter\n        counter = counter + 1\n        if 2 ** counter >= len(d):\n            counter -= 1\n            break\n    counter2 = counter\n    solution2 = solution\n    while counter2 >= 0:\n        if solution + 2 ** counter2 <= b and f[counter2] > 0:\n            solution += 2 ** counter2\n            f[counter2] -= 1\n        counter2 -= 1\n    counter3 = counter\n    while counter3 >= 0:\n        if f[counter3] == 2:\n            solution2 += 2 ** counter3\n            f[counter3] = 0\n        counter3 -= 1\n    while counter >= 0:\n        if solution2 + 2 ** counter <= b and f[counter] > 0:\n            solution2 += 2 ** counter\n            f[counter] -= 1\n        counter -= 1\n    print(solution, solution2, start - solution - solution2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [0, 0, 0]\n    v = 1\n    dc = {}\n    while v <= n:\n        d = (a[v] - a[0]) // v\n        d = (3 - d) // 2\n        dc[v] = d\n        v = v << 1\n    for k in sorted(dc.keys())[::-1]:\n        d = dc[k]\n        for i in range(d):\n            l[i] |= k\n        l.sort()\n    print(*l)", "import math\nt = int(input())\nfor _ in range(t):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    sum_abc = arr[0]\n    A = 0\n    B = 0\n    C = 0\n    for i in range(int(math.log(N, 2)) + 1, 0, -1):\n        index = 2 ** (i - 1)\n        diff = arr[index] - sum_abc\n        if diff == 3 * index:\n            pass\n        elif diff == index:\n            if A <= B and A <= C:\n                A += index\n            elif B <= A and B <= C:\n                B += index\n            else:\n                C += index\n        elif diff == -index:\n            if A <= B and A <= C:\n                A += index\n                if B <= C:\n                    B += index\n                else:\n                    C += index\n            elif B <= A and B <= C:\n                B += index\n                if A <= C:\n                    A += index\n                else:\n                    C += index\n            else:\n                C += index\n                if A <= B:\n                    A += index\n                else:\n                    B += index\n        else:\n            C += index\n            B += index\n            A += index\n    print(A, B, C)", "from bisect import bisect_left\nfrom re import sub\nimport re\nfrom typing import DefaultDict\nimport math\nfrom collections import defaultdict\nfrom math import sqrt\nimport collections\nfrom sys import maxsize\nfrom itertools import combinations_with_replacement\nimport sys\nimport copy\n\ndef sieve_erasthones(n):\n    cnt = 0\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef count_factors(n):\n    i = 1\n    c = 0\n    ans = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                c += 1\n                ans.append(n // i)\n            else:\n                c += 2\n                ans.append(i)\n                ans.append(n // i)\n        i += 1\n    return ans\n    return c\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d = DefaultDict(lambda : 0)\n    for ele in l:\n        d[ele] += 1\n    return d\n\ndef max_in_dict(d):\n    maxi = 0\n    for ele in d:\n        if d[ele] > maxi:\n            maxi = d[ele]\n    return maxi\n\ndef element_count(s):\n    l = []\n    k = s[0]\n    c = 0\n    for ele in s:\n        if ele == k:\n            c += 1\n        else:\n            l.append([k, c])\n            k = ele\n            c = 1\n    l.append([k, c])\n    return l\n\ndef modular_exponentiation(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 != 0:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef number_of_primefactor(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return list(set(l))\n\ndef twosum(a, n, x):\n    rem = []\n    for i in range(x):\n        rem.append(0)\n    for i in range(n):\n        if a[i] < x:\n            rem[a[i] % x] += 1\n    for i in range(1, x // 2):\n        if rem[i] > 0 and rem[x - i] > 0:\n            return True\n    if i >= x // 2:\n        if x % 2 == 0:\n            if rem[x // 2] > 1:\n                return True\n            else:\n                return False\n        elif rem[x // 2] > 0 and rem[x - x // 2] > 0:\n            return True\n        else:\n            return False\n\ndef divSum(num):\n    result = 0\n    i = 2\n    while i <= math.sqrt(num):\n        if num % i == 0:\n            if i == num / i:\n                result = result + i\n            else:\n                result = result + (i + num / i)\n        i = i + 1\n    return result + 1 + num\n\ndef subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0\n    i = 0\n    while j < m and i < n:\n        if str1[j] == str2[i]:\n            j = j + 1\n        i = i + 1\n    return j == m\n\ndef primeFactors(n):\n    d = defaultdict(lambda : 0)\n    while n % 2 == 0:\n        d[2] += 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d[int(i)] += 1\n            n = n / i\n    if n > 2:\n        d[int(n)] += 1\n    return d\n\ndef modInverse(b, m):\n    g = math.gcd(b, m)\n    if g != 1:\n        return -1\n    else:\n        return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    return inv * a % m\n\ndef count(n):\n    ans = 0\n    while n:\n        ans += n % 10\n        n //= 10\n    return ans\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef check(n):\n    c = 0\n    while n % 2 == 0:\n        n //= 2\n        c += 1\n    return c\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = ['', '', '']\n    for i in range(len(bin(n)) - 3, -1, -1):\n        k = (l[2 ** i] - l[0]) // 2 ** i\n        if k == 3:\n            for j in range(3):\n                ans[j] += '0'\n        elif k == -3:\n            for j in range(3):\n                ans[j] += '1'\n        elif k == -1:\n            for j in range(2):\n                ans[j] += '1'\n            ans[2] += '0'\n        else:\n            for j in range(1, 3):\n                ans[j] += '0'\n            ans[0] += '1'\n        ans.sort()\n    for ele in ans:\n        print(int(ele, 2), end=' ')\n    print()\nfor _ in range(int(input())):\n    solve()", "for t in range(int(input())):\n    n = int(input())\n    f = list(map(int, input().split()))\n    m = bin(n)\n    po = len(m) - 2\n    a = '0b'\n    b = '0b'\n    c = '0b'\n    s = f[0]\n    q = 2 ** (po - 1)\n    saved = [False, False]\n    for i in range(po):\n        r = f[q] - s\n        if r == 3 * q:\n            a += '0'\n            b += '0'\n            c += '0'\n        elif r == -3 * q:\n            a += '1'\n            b += '1'\n            c += '1'\n        elif r == q:\n            quan = saved.count(True)\n            if quan == 0:\n                a += '0'\n                b += '0'\n                c += '1'\n                saved[0] = True\n                saved[1] = True\n            else:\n                a += '1'\n                b += '0'\n                c += '0'\n        else:\n            quan = saved.count(True)\n            if quan == 0:\n                a += '0'\n                b += '1'\n                c += '1'\n                saved[0] = True\n            elif quan == 1:\n                a += '1'\n                b += '0'\n                c += '1'\n                saved[1] = True\n            else:\n                a += '1'\n                b += '1'\n                c += '0'\n        q //= 2\n    print(int(a, 2), int(b, 2), int(c, 2))"]