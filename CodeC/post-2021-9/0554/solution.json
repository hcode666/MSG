["from functools import lru_cache\nmod = 10 ** 9 + 7\n\n@lru_cache(maxsize=None)\ndef f(i, odds, evens, K, prev):\n    if i >= n:\n        return int(K == 1)\n    if p[i] != 0:\n        return f(i + 1, odds, evens, K - (prev != p[i] % 2), p[i] % 2) % mod\n    ans = 0\n    if evens > 0:\n        ans += evens * f(i + 1, odds, evens - 1, K - (prev != 0), 0) % mod\n    if odds > 0:\n        ans += odds * f(i + 1, odds - 1, evens, K - (prev != 1), 1) % mod\n    return ans % mod\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    f.cache_clear()\n    odds = (n + 1) // 2\n    evens = n // 2\n    for v in p:\n        if v != 0:\n            if v % 2:\n                odds -= 1\n            else:\n                evens -= 1\n    if p[0] != 0:\n        print(f(1, odds, evens, k, p[0] % 2))\n    else:\n        ans = evens * f(1, odds, evens - 1, k, 0) % mod\n        f.cache_clear()\n        ans = ans + odds * f(1, odds - 1, evens, k, 1) % mod\n        print(ans % mod)", "from functools import lru_cache\nmod = 10 ** 9 + 7\n\n@lru_cache(maxsize=None)\ndef f(i, odds, evens, K, prev):\n    if i >= n:\n        return int(K == 1)\n    if p[i] != 0:\n        return f(i + 1, odds, evens, K - (prev != p[i] % 2), p[i] % 2) % mod\n    ans = 0\n    if evens > 0:\n        ans += evens * f(i + 1, odds, evens - 1, K - (prev != 0), 0) % mod\n    if odds > 0:\n        ans += odds * f(i + 1, odds - 1, evens, K - (prev != 1), 1) % mod\n    return ans % mod\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    f.cache_clear()\n    odds = (n + 1) // 2\n    evens = n // 2\n    for v in p:\n        if v != 0:\n            if v % 2:\n                odds -= 1\n            else:\n                evens -= 1\n    if p[0] != 0:\n        print(f(1, odds, evens, k, p[0] % 2))\n    else:\n        ans = evens * f(1, odds, evens - 1, k, 0) % mod\n        f.cache_clear()\n        ans = ans + odds * f(1, odds - 1, evens, k, 1) % mod\n        print(ans % mod)", "from functools import lru_cache\nmod = 10 ** 9 + 7\n\n@lru_cache(maxsize=None)\ndef f(i, odds, evens, K, prev):\n    if i >= n:\n        return int(K == 1)\n    if p[i] != 0:\n        return f(i + 1, odds, evens, K - (prev != p[i] % 2), p[i] % 2) % mod\n    ans = 0\n    if evens > 0:\n        ans += evens * f(i + 1, odds, evens - 1, K - (prev != 0), 0) % mod\n    if odds > 0:\n        ans += odds * f(i + 1, odds - 1, evens, K - (prev != 1), 1) % mod\n    return ans % mod\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    f.cache_clear()\n    odds = (n + 1) // 2\n    evens = n // 2\n    for v in p:\n        if v != 0:\n            if v % 2:\n                odds -= 1\n            else:\n                evens -= 1\n    if p[0] != 0:\n        print(f(1, odds, evens, k, p[0] % 2))\n    else:\n        ans = evens * f(1, odds, evens - 1, k, 0) % mod\n        f.cache_clear()\n        ans = ans + odds * f(1, odds - 1, evens, k, 1) % mod\n        print(ans % mod)", "from functools import lru_cache\nmod = 10 ** 9 + 7\n\n@lru_cache(maxsize=None)\ndef f(i, odds, evens, K, prev):\n    if i >= n:\n        return int(K == 1)\n    if p[i] != 0:\n        return f(i + 1, odds, evens, K - (prev != p[i] % 2), p[i] % 2) % mod\n    if odds == 0:\n        return evens * f(i + 1, odds, evens - 1, K - (prev != 0), 0) % mod\n    if evens == 0:\n        return odds * f(i + 1, odds - 1, evens, K - (prev != 1), 1)\n    return evens * f(i + 1, odds, evens - 1, K - (prev != 0), 0) + odds * f(i + 1, odds - 1, evens, K - (prev != 1), 1)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    f.cache_clear()\n    odds = (n + 1) // 2\n    evens = n // 2\n    for v in p:\n        if v != 0:\n            if v % 2:\n                odds -= 1\n            else:\n                evens -= 1\n    if p[0] != 0:\n        print(f(1, odds, evens, k, p[0] % 2))\n    else:\n        ans = evens * f(1, odds, evens - 1, k, 0) % mod\n        f.cache_clear()\n        ans = ans + odds * f(1, odds - 1, evens, k, 1) % mod\n        print(ans % mod)", "from functools import lru_cache\nmod = 10 ** 9 + 7\n\n@lru_cache(maxsize=None)\ndef f(i, odds, evens, K, prev):\n    if i >= n:\n        return int(K == 1)\n    if p[i] != 0:\n        return f(i + 1, odds, evens, K - (prev != p[i] % 2), p[i] % 2) % mod\n    if odds == 0:\n        return evens * f(i + 1, odds, evens - 1, K - (prev != 0), 0) % mod\n    if evens == 0:\n        return odds * f(i + 1, odds - 1, evens, K - (prev != 1), 1)\n    return evens * f(i + 1, odds, evens - 1, K - (prev != 0), 0) + odds * f(i + 1, odds - 1, evens, K - (prev != 1), 1)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = list(map(int, input().split()))\n    f.cache_clear()\n    odds = (n + 1) // 2\n    evens = n // 2\n    for v in p:\n        if v != 0:\n            if v % 2:\n                odds -= 1\n            else:\n                evens -= 1\n    if p[0] != 0:\n        print(f(1, odds, evens, k, p[0] % 2))\n    else:\n        ans = evens * f(1, odds, evens - 1, k, 0) % mod\n        f.cache_clear()\n        ans = ans + odds * f(1, odds - 1, evens, k, 1) % mod\n        print(ans % mod)"]