["for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        same = max(p + (a[i] ^ a[i - 1]), q + (a[i] ^ a[i - 1] + x))\n        change = max(p + (a[i] + x ^ a[i - 1]), q + (a[i] + x ^ a[i - 1] + x))\n        (p, q) = (same, change)\n    print(max(p, q))", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        same = max(p + (a[i] ^ a[i - 1]), q + (a[i] ^ a[i - 1] + x))\n        change = max(p + (a[i] + x ^ a[i - 1]), q + (a[i] + x ^ a[i - 1] + x))\n        (p, q) = (same, change)\n    print(max(p, q))", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        same = max(p + (a[i] ^ a[i - 1]), q + (a[i] ^ a[i - 1] + x))\n        change = max(p + (a[i] + x ^ a[i - 1]), q + (a[i] + x ^ a[i - 1] + x))\n        (p, q) = (same, change)\n    print(max(p, q))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    dp = [[0 for i in range(n)] for i in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n    for i in range(1, n):\n        cur = l[i]\n        prev = l[i - 1]\n        dp[0][i] = max((cur ^ prev) + dp[0][i - 1], (cur ^ prev + k) + dp[1][i - 1])\n        dp[1][i] = max((cur + k ^ prev) + dp[0][i - 1], (cur + k ^ prev + k) + dp[1][i - 1])\n    print(max(dp[0][n - 1], dp[1][n - 1]))", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0 for i in range(n)] for j in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n    for i in range(1, n):\n        val1 = dp[0][i - 1] + (a[i] ^ a[i - 1])\n        val2 = dp[1][i - 1] + (a[i] ^ a[i - 1] + x)\n        dp[0][i] = max(val1, val2)\n        val1 = dp[0][i - 1] + (a[i] + x ^ a[i - 1])\n        val2 = dp[1][i - 1] + (a[i] + x ^ a[i - 1] + x)\n        dp[1][i] = max(val1, val2)\n    print(max(dp[0][n - 1], dp[1][n - 1]))", "T = int(input())\nfor t in range(0, T):\n    (N, X) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp1 = [0 for i in range(0, N)]\n    dp2 = [0 for i in range(0, N)]\n    for i in range(1, N):\n        dp1[i] = max(dp1[i - 1] + (arr[i - 1] ^ arr[i]), dp2[i - 1] + (arr[i - 1] + X ^ arr[i]))\n        dp2[i] = max(dp1[i - 1] + (arr[i - 1] ^ arr[i] + X), dp2[i - 1] + (arr[i - 1] + X ^ arr[i] + X))\n    ans = max(dp1[N - 1], dp2[N - 1])\n    print(ans)", "T = int(input())\nfor t in range(0, T):\n    (N, X) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp1 = [0 for i in range(0, N)]\n    dp2 = [0 for i in range(0, N)]\n    for i in range(1, N):\n        dp1[i] = max(dp1[i - 1] + (arr[i - 1] ^ arr[i]), dp2[i - 1] + (arr[i - 1] + X ^ arr[i]))\n        dp2[i] = max(dp1[i - 1] + (arr[i - 1] ^ arr[i] + X), dp2[i - 1] + (arr[i - 1] + X ^ arr[i] + X))\n    ans = max(dp1[N - 1], dp2[N - 1])\n    print(ans)", "T = int(input())\nfor t in range(0, T):\n    (N, X) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp1 = [0 for i in range(0, N)]\n    dp2 = [0 for i in range(0, N)]\n    for i in range(1, N):\n        dp1[i] = max(dp1[i - 1] + (arr[i - 1] ^ arr[i]), dp2[i - 1] + (arr[i - 1] + X ^ arr[i]))\n        dp2[i] = max(dp1[i - 1] + (arr[i - 1] ^ arr[i] + X), dp2[i - 1] + (arr[i - 1] + X ^ arr[i] + X))\n    ans = max(dp1[N - 1], dp2[N - 1])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        s = max(p + (arr[i] ^ arr[i - 1]), q + (arr[i] ^ arr[i - 1] + x))\n        c = max(p + (arr[i] + x ^ arr[i - 1]), q + (arr[i] + x ^ arr[i - 1] + x))\n        (p, q) = (s, c)\n    print(max(p, q))", "t = int(input())\nfor k in range(t):\n    (n, x) = input().split()\n    (n, x) = (int(n), int(x))\n    s = input().split()\n    if n == 1:\n        print(0)\n        continue\n    for i in range(n):\n        s[i] = int(s[i])\n    dp = []\n    for i in range(n):\n        dp.append([-1, -1])\n    dp[1] = [max(s[0] ^ s[1], s[0] + x ^ s[1]), max(s[0] ^ s[1] + x, s[0] + x ^ s[1] + x)]\n    for i in range(2, n):\n        dp[i][0] = max((s[i] ^ s[i - 1]) + dp[i - 1][0], (s[i] ^ s[i - 1] + x) + dp[i - 1][1])\n        dp[i][1] = max((s[i] + x ^ s[i - 1]) + dp[i - 1][0], (s[i] + x ^ s[i - 1] + x) + dp[i - 1][1])\n    print(max(dp[n - 1][0], dp[n - 1][1]))", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0 for i in range(n)] for j in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n    for i in range(1, n):\n        val1 = dp[0][i - 1] + (a[i] ^ a[i - 1])\n        val2 = dp[1][i - 1] + (a[i] ^ a[i - 1] + x)\n        dp[0][i] = max(val1, val2)\n        val1 = dp[0][i - 1] + (a[i] + x ^ a[i - 1])\n        val2 = dp[1][i - 1] + (a[i] + x ^ a[i - 1] + x)\n        dp[1][i] = max(val1, val2)\n    print(max(dp[0][n - 1], dp[1][n - 1]))", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0 for i in range(n)] for j in range(2)]\n    dp[0][0] = 0\n    dp[1][0] = 0\n    for i in range(1, n):\n        val1 = dp[0][i - 1] + (a[i] ^ a[i - 1])\n        val2 = dp[1][i - 1] + (a[i] ^ a[i - 1] + x)\n        dp[0][i] = max(val1, val2)\n        val1 = dp[0][i - 1] + (a[i] + x ^ a[i - 1])\n        val2 = dp[1][i - 1] + (a[i] + x ^ a[i - 1] + x)\n        dp[1][i] = max(val1, val2)\n    print(max(dp[0][n - 1], dp[1][n - 1]))", "T = int(input())\nfor j in range(T):\n    (N, X) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    dp = [[0 for i in range(N)] for i in range(2)]\n    for i in range(1, N):\n        dp[0][i] = max((A[i] ^ A[i - 1]) + dp[0][i - 1], (A[i] ^ A[i - 1] + X) + dp[1][i - 1])\n        dp[1][i] = max((A[i] + X ^ A[i - 1]) + dp[0][i - 1], (A[i] + X ^ A[i - 1] + X) + dp[1][i - 1])\n    print(max(dp[0][N - 1], dp[1][N - 1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        same = max(p + (a[i] ^ a[i - 1]), q + (a[i] ^ a[i - 1] + x))\n        change = max(p + (a[i] + x ^ a[i - 1]), q + (a[i] + x ^ a[i - 1] + x))\n        (p, q) = (same, change)\n    print(max(p, q))", "n = int(input())\nfor z in range(n):\n    (num, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    ans = [0, 0]\n    (new1, new2) = (0, 0)\n    for i in range(1, num):\n        new1 = max((arr[i] ^ arr[i - 1]) + ans[0], (arr[i] ^ arr[i - 1] + x) + ans[1])\n        new2 = max((arr[i] + x ^ arr[i - 1]) + ans[0], (arr[i] + x ^ arr[i - 1] + x) + ans[1])\n        ans[0] = new1\n        ans[1] = new2\n    print(max(ans))", "n = int(input())\nfor z in range(n):\n    (num, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    ans = [0, 0]\n    (new1, new2) = (0, 0)\n    for i in range(1, num):\n        new1 = max((arr[i] ^ arr[i - 1]) + ans[0], (arr[i] ^ arr[i - 1] + x) + ans[1])\n        new2 = max((arr[i] + x ^ arr[i - 1]) + ans[0], (arr[i] + x ^ arr[i - 1] + x) + ans[1])\n        ans[0] = new1\n        ans[1] = new2\n    print(max(ans))", "for i in range(int(input())):\n    (N, X) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    dp1 = [0] * N\n    dp2 = [0] * N\n    for i in range(1, N):\n        dp1[i] = max(dp1[i - 1] + (arr[i] ^ arr[i - 1]), dp2[i - 1] + (arr[i] ^ arr[i - 1] + X))\n        dp2[i] = max(dp1[i - 1] + (arr[i] + X ^ arr[i - 1]), dp2[i - 1] + (arr[i] + X ^ arr[i - 1] + X))\n    print(max(dp1[N - 1], dp2[N - 1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    s = 0\n    if n == 1:\n        print(0)\n    else:\n        change = 0\n        unchange = 0\n        for i in range(1, n):\n            temp1 = change\n            temp2 = unchange\n            change = max(temp2 + (arr[i - 1] ^ arr[i] + x), temp1 + (arr[i - 1] + x ^ arr[i] + x))\n            unchange = max(temp2 + (arr[i - 1] ^ arr[i]), temp1 + (arr[i - 1] + x ^ arr[i]))\n        print(max(change, unchange))", "from math import ceil\nfrom math import sqrt\nfrom collections import Counter\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    dp1 = [0]\n    dp2 = [0]\n    for i in range(1, n):\n        a = dp2[i - 1] + (l[i - 1] + x ^ l[i])\n        b = dp1[i - 1] + (l[i - 1] ^ l[i])\n        dp1.append(max(a, b))\n        c = dp2[i - 1] + (l[i - 1] + x ^ l[i] + x)\n        d = dp1[i - 1] + (l[i - 1] ^ l[i] + x)\n        dp2.append(max(c, d))\n    ans = max(dp1[-1], dp2[-1])\n    print(ans)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    if n == 1:\n        print(0)\n    else:\n        change = 0\n        unchange = 0\n        for i in range(1, n):\n            temp1 = change\n            temp2 = unchange\n            change = max(temp2 + (arr[i - 1] ^ arr[i] + x), temp1 + (arr[i - 1] + x ^ arr[i] + x))\n            unchange = max(temp2 + (arr[i - 1] ^ arr[i]), temp1 + (arr[i - 1] + x ^ arr[i]))\n        print(max(change, unchange))", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    for i in range(n):\n        dp.append([0, 0])\n    dp[0][0] = 0\n    dp[0][1] = 0\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (a[i - 1] ^ a[i]), dp[i - 1][1] + (a[i - 1] + x ^ a[i]))\n        dp[i][1] = max(dp[i - 1][0] + (a[i - 1] ^ a[i] + x), dp[i - 1][1] + (a[i - 1] + x ^ a[i] + x))\n    print(max(dp[n - 1][0], dp[n - 1][1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        same = max(p + (a[i] ^ a[i - 1]), q + (a[i] ^ a[i - 1] + x))\n        change = max(p + (a[i] + x ^ a[i - 1]), q + (a[i] + x ^ a[i - 1] + x))\n        (p, q) = (same, change)\n    print(max(p, q))", "import time\nimport sys\nimport math\nfrom collections import defaultdict as dd\nfrom functools import lru_cache\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * 2 for _ in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max((a[i] ^ a[i - 1]) + dp[i - 1][0], (a[i] ^ a[i - 1] + x) + dp[i - 1][1])\n        dp[i][1] = max((a[i] + x ^ a[i - 1]) + dp[i - 1][0], (a[i] + x ^ a[i - 1] + x) + dp[i - 1][1])\n    print(max(dp[n - 1][0], dp[n - 1][1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        same = max(p + (a[i] ^ a[i - 1]), q + (a[i] ^ a[i - 1] + x))\n        change = max(p + (a[i] + x ^ a[i - 1]), q + (a[i] + x ^ a[i - 1] + x))\n        (p, q) = (same, change)\n    print(max(p, q))", "import time\nimport sys\nimport math\nfrom collections import defaultdict as dd\nfrom functools import lru_cache\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (prevsame, changeprev) = (0, 0)\n    for i in range(1, n):\n        same = max(prevsame + (a[i] ^ a[i - 1]), changeprev + (a[i] ^ a[i - 1] + x))\n        change = max(prevsame + (a[i] + x ^ a[i - 1]), changeprev + (a[i] + x ^ a[i - 1] + x))\n        (prevsame, changeprev) = (same, change)\n    print(max(prevsame, changeprev))", "n = int(input())\nfor i in range(n):\n    l1 = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    x = l1[1]\n    sum0 = 0\n    sum1 = 0\n    for j in range(1, l1[0]):\n        s0 = max(sum0 + (l[j] ^ l[j - 1]), sum1 + (l[j] ^ l[j - 1] + x))\n        s1 = max(sum0 + (l[j] + x ^ l[j - 1]), sum1 + (l[j] + x ^ l[j - 1] + x))\n        sum0 = s0\n        sum1 = s1\n    print(max(sum0, sum1))", "for x in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    dp = [[0, 0] for i in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (a[i] ^ a[i - 1]), dp[i - 1][1] + (a[i] ^ a[i - 1] + x))\n        dp[i][1] = max(dp[i - 1][0] + (a[i] + x ^ a[i - 1]), dp[i - 1][1] + (a[i] + x ^ a[i - 1] + x))\n    print(max(dp[n - 1][0], dp[n - 1][1]))", "def adjacent_xors(arr, n, X):\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        prev_same = max(p + (arr[i - 1] ^ arr[i]), q + (arr[i] ^ arr[i - 1] + X))\n        prev_change = max(p + (arr[i - 1] ^ arr[i] + X), q + (arr[i - 1] + X ^ arr[i] + X))\n        (p, q) = (prev_same, prev_change)\n    return max(p, q)\nT = int(input())\nfor _ in range(T):\n    (N, X) = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(adjacent_xors(arr, N, X))", "import time\nimport sys\nimport math\nfrom collections import defaultdict as dd\nfrom functools import lru_cache\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        same = max(p + (a[i] ^ a[i - 1]), q + (a[i] ^ a[i - 1] + x))\n        change = max(p + (a[i] + x ^ a[i - 1]), q + (a[i] + x ^ a[i - 1] + x))\n        (p, q) = (same, change)\n    print(max(p, q))", "for i in range(int(input())):\n    (n, x) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    dp = []\n    for i in range(n):\n        dp.append([0, 0])\n    for i in range(1, n):\n        dp[i][0] = max(dp[i][0], (a[i] ^ a[i - 1]) + dp[i - 1][0])\n        dp[i][1] = max(dp[i][1], (a[i] + x ^ a[i - 1]) + dp[i - 1][0])\n        dp[i][0] = max(dp[i][0], (a[i] ^ a[i - 1] + x) + dp[i - 1][1])\n        dp[i][1] = max(dp[i][1], (a[i] + x ^ a[i - 1] + x) + dp[i - 1][1])\n    print(max(dp[n - 1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sum_with_changing_current = 0\n    sum_with_same_current = 0\n    for i in range(1, len(arr)):\n        same = max(sum_with_same_current + (arr[i] ^ arr[i - 1]), sum_with_changing_current + (arr[i] ^ arr[i - 1] + x))\n        change = max(sum_with_same_current + (arr[i] + x ^ arr[i - 1]), sum_with_changing_current + (arr[i] + x ^ arr[i - 1] + x))\n        sum_with_changing_current = change\n        sum_with_same_current = same\n    print(max(sum_with_changing_current, sum_with_same_current))", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(100000000)\nt = ri()\nfor test in range(t):\n    (n, x) = rl()\n    l = rl()\n    dp = [[0, 0] for i in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i][0], (l[i] ^ l[i - 1]) + dp[i - 1][0])\n        dp[i][0] = max(dp[i][0], (l[i] ^ l[i - 1] + x) + dp[i - 1][1])\n        dp[i][1] = max(dp[i][1], (l[i] + x ^ l[i - 1]) + dp[i - 1][0])\n        dp[i][1] = max(dp[i][1], (l[i] + x ^ l[i - 1] + x) + dp[i - 1][1])\n    print(max(dp[n - 1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        s = max(p + (l[i] ^ l[i - 1]), q + (l[i] ^ l[i - 1] + x))\n        c = max(p + (l[i] + x ^ l[i - 1]), q + (l[i] + x ^ l[i - 1] + x))\n        (p, q) = (s, c)\n    print(max(p, q))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (prev, prev2) = (0, 0)\n    for i in range(1, n):\n        pick = max(prev + (arr[i - 1] ^ arr[i]), prev2 + (arr[i] ^ arr[i - 1] + x))\n        pick2 = max(prev + (arr[i] + x ^ arr[i - 1]), prev2 + (arr[i - 1] + x ^ arr[i] + x))\n        (prev, prev2) = (pick, pick2)\n    print(max(prev, prev2))", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [[0] * 2 for _ in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i][0], (arr[i] ^ arr[i - 1]) + dp[i - 1][0])\n        dp[i][0] = max(dp[i][0], (arr[i] ^ arr[i - 1] + x) + dp[i - 1][1])\n        dp[i][1] = max(dp[i][1], (arr[i] + x ^ arr[i - 1]) + dp[i - 1][0])\n        dp[i][1] = max(dp[i][1], (arr[i] + x ^ arr[i - 1] + x) + dp[i - 1][1])\n    print(max(dp[-1][0], dp[-1][1]))", "from sys import *\nsetrecursionlimit(1000000)\n\ndef solve(i, n, x, arr, prev, dp):\n    if i == n:\n        return 0\n    if dp[prev][i] != -1:\n        return dp[prev][i]\n    if prev:\n        c1 = (arr[i - 1] + x ^ arr[i]) + solve(i + 1, n, x, arr, 0, dp)\n        c2 = (arr[i - 1] + x ^ arr[i] + x) + solve(i + 1, n, x, arr, 1, dp)\n    else:\n        c1 = (arr[i - 1] ^ arr[i]) + solve(i + 1, n, x, arr, 0, dp)\n        c2 = (arr[i - 1] ^ arr[i] + x) + solve(i + 1, n, x, arr, 1, dp)\n    dp[prev][i] = max(c1, c2)\n    return dp[prev][i]\nfor t in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [[-1 for i in range(n + 1)] for j in range(2)]\n    print(max(solve(1, n, x, arr, 0, dp), solve(1, n, x, arr, 1, dp)))", "from math import *\nfrom collections import *\nimport io, os\nimport sys\nfrom bisect import *\nfrom heapq import *\nfrom itertools import permutations\nfrom functools import *\nimport re\nMOD = 1000000007\n\ndef subinp():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op1.txt', 'w')\n\ndef subinp_1():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op2.txt', 'w')\n\ndef binpow(a, b, m):\n    a %= m\n    x = 1\n    while b > 0:\n        if b & 1:\n            x = x * a % m\n        a = a * a % m\n        b >>= 1\n    return x\n\ndef binser(arr, l, r, x):\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return mid\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sod(n):\n    l = list(str(n))\n    s = 0\n    for i in l:\n        s += int(i)\n    return s\n\ndef prime_factors(num):\n    l = []\n    if num % 2:\n        l.append(2)\n    while num % 2 == 0:\n        num = num / 2\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if not num % i:\n            l.append(i)\n        while num % i == 0:\n            num = num / i\n    if num > 2:\n        l.append(num)\n    return l\n\ndef factmod(n, p):\n    f = defaultdict(int)\n    f[0] = 1\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] * i % MOD\n    return f\n\ndef largestPower(n, p):\n    x = 0\n    while n:\n        n //= p\n        x += n\n    return x\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\n\ndef drec(x, y):\n    if y == x + 1:\n        return 'R'\n    if y == x - 1:\n        return 'L'\n    if x < y:\n        return 'D'\n    return 'U'\n\ndef cellhash(x, y):\n    return (x - 1) * m + y\n\ndef bins(l, x, n):\n    i = bisect_left(l, x)\n    if i < n:\n        return i\n    if i:\n        return i - 1\n    else:\n        return n\n\ndef cond(l):\n    for i in range(len(l) - 1):\n        if l[i] == str(int(l[i + 1]) - 1):\n            return False\n    return True\n\ndef isvowel(s):\n    if s in list('aeiou'):\n        return 1\n    return 0\n\ndef countOdd(L, R):\n    N = (R - L) // 2\n    if R % 2 != 0 or L % 2 != 0:\n        N += 1\n    return N\n\ndef tst(A, B, C):\n    return (A | B) & (B | C) & (C | A)\n\ndef palcheck(n, s):\n    (i, j) = (0, n - 1)\n    while i <= j:\n        if s[i] == s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef sakurajima(n):\n    if n < 9:\n        n = 10\n    l = [0]\n    for i in range(1, n + 1):\n        if i % 2:\n            l.append(i)\n        else:\n            l.append(2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if l[i] == i:\n            for j in range(i * i, n + 1, i):\n                if l[j] == j:\n                    l[j] = i\n    return l\n\ndef getfact(x):\n    ret = []\n    d = defaultdict(int)\n    while x != 1:\n        ret.append(spf[x] ** (d[spf[x]] + 1))\n        d[spf[x]] += 1\n        x = x // spf[x]\n    return ret\n\ndef prchck(n):\n    if n == 1:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if not n % i:\n            return False\n    return True\n\ndef ispal(s, n):\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef bfs(src, dest, ajl, vis):\n    q = deque([src])\n    vis[src] = True\n    while q:\n        i = q.popleft()\n        if i == dest:\n            return True\n        for j in ajl[i]:\n            if not vis[j]:\n                vis[j] = True\n                q.append(j)\n    return False\n\ndef sieve(n):\n    if n < 9:\n        n = 10\n    l = [1] * (n + 1)\n    for i in range(2, int(n ** 0.5) + 1):\n        if l[i]:\n            for j in range(i ** 2, n + 1, i):\n                if j % i == 0:\n                    l[j] = 0\n    l[1] = 0\n    return l\n\nclass DisjSet:\n\n    def __init__(self, n):\n        self.size = [1] * n\n        self.parent = [i for i in range(n)]\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        xset = self.find(x)\n        yset = self.find(y)\n        if xset == yset:\n            return\n        if self.size[xset] < self.size[yset]:\n            self.parent[xset] = yset\n            self.size[yset] += self.size[xset]\n        else:\n            self.parent[yset] = xset\n            self.size[xset] += self.size[yset]\n\ndef dfs(i, ajl, vis, l, x):\n    vis[i] = True\n    l[i] = x\n    for j in ajl[i]:\n        if not vis[j]:\n            dfs(j, ajl, vis, l, x)\n\ndef checkpo3(N):\n    while N > 0:\n        if N % 3 == 2:\n            return False\n        N //= 3\n    return True\n\ndef sumofdig(n):\n    ans = 0\n    s = str(n)\n    for i in s:\n        ans += int(i)\n    return ans\n\ndef convert(set):\n    return [*set]\n\ndef Divisors(n):\n    i = 1\n    ans = []\n    while i * i < n:\n        if n % i == 0:\n            ans.append(i)\n        i += 1\n    for i in range(int(sqrt(n)), 0, -1):\n        if n % i == 0:\n            ans.append(n // i)\n    return ans\ninp = lambda : int(input())\nstrin = lambda : input().strip()\nstrl = lambda : list(input().rstrip('\\r\\n'))\nstrlst = lambda : list(map(str, input().split()))\nmult = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nlstin = lambda : list(map(int, input().strip().split()))\nflush = lambda : stdout.flush()\nstdpr = lambda x: stdout.write(str(x))\n\ndef isval(s):\n    n = len(s)\n    d = defaultdict(bool)\n    if n == 1:\n        return True\n    if s[0] != s[1]:\n        d[s[0]] = True\n    for i in range(1, n):\n        if s[i] != s[i - 1]:\n            if d[s[i]]:\n                return False\n            d[s[i]] = True\n    return True\n\nclass Point:\n\n    def __init__(self, x, l1):\n        self.x = x\n        self.l1 = l1\n\n    def __lt__(self, b):\n        return self.l1[self.x] < self.l1[b.x]\n\n    def getval(self):\n        return self.x\n\ndef chck(n, l):\n    ans = 0\n    for i in range(n - 1):\n        ans += l[i] ^ l[i + 1]\n    return ans\n\ndef panda(i, n, l, x, k):\n    if i >= n:\n        return 0\n    if dp[k][i] != -1:\n        return dp[k][i]\n    (c1, c2) = (0, 0)\n    if x == 0:\n        c1 = (l[i] ^ l[i - 1]) + panda(i + 1, n, l, 0, k)\n        c2 = (l[i] + k ^ l[i - 1]) + panda(i + 1, n, l, 1, k)\n    else:\n        c1 = (l[i] ^ l[i - 1] + k) + panda(i + 1, n, l, 0, k)\n        c2 = (l[i] + k ^ l[i - 1] + k) + panda(i + 1, n, l, 1, k)\n    dp[k][i] = max(c1, c2)\n    return dp[k][i]\n\ndef redpanda(n, k, l):\n    dp = [[0 for i in range(n + 1)] for j in range(3)]\n    for i in range(1, n):\n        dp[0][i] = max((l[i] ^ l[i - 1]) + dp[0][i - 1], (l[i] ^ l[i - 1] + k) + dp[1][i - 1])\n        dp[1][i] = max((l[i] + k ^ l[i - 1]) + dp[0][i - 1], (l[i] + k ^ l[i - 1] + k) + dp[1][i - 1])\n    return max(dp[0][n - 1], dp[1][n - 1])\nt = 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = mult()\n    l = lstin()\n    ans = redpanda(n, k, l)\n    print(ans)", "for tc in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (globsame, globdiff) = (0, 0)\n    for i in range(1, n):\n        same = max(globsame + (arr[i] ^ arr[i - 1]), globdiff + (arr[i] ^ arr[i - 1] + x))\n        diff = max(globsame + (arr[i] + x ^ arr[i - 1]), globdiff + (arr[i] + x ^ arr[i - 1] + x))\n        globsame = max(same, globsame)\n        globdiff = max(diff, globdiff)\n    print(max(globsame, globdiff))", "for tc in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [[0, 0]]\n    for i in range(1, n):\n        same = max(dp[-1][0] + (arr[i] ^ arr[i - 1]), dp[-1][1] + (arr[i] ^ arr[i - 1] + x))\n        diff = max(dp[-1][0] + (arr[i] + x ^ arr[i - 1]), dp[-1][1] + (arr[i] + x ^ arr[i - 1] + x))\n        dp.append([same, diff])\n    print(max(dp[n - 1]))", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    arr1 = [i + x for i in arr]\n    dp = [[0, 0] for i in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i]), dp[i - 1][1] + (arr1[i - 1] ^ arr[i]))\n        dp[i][1] = max(dp[i - 1][0] + (arr[i - 1] ^ arr1[i]), dp[i - 1][1] + (arr1[i - 1] ^ arr1[i]))\n    print(max(dp[-1][0], dp[-1][1]))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    (added, notAdded) = (0, 0)\n    for i in range(1, n):\n        (v1, v2) = (a[i - 1], a[i])\n        (added, notAdded) = (max((v2 + k ^ v1) + notAdded, (v2 + k ^ v1 + k) + added), max((v2 ^ v1) + notAdded, (v2 ^ v1 + k) + added))\n    print(max(added, notAdded))", "import sys\nsys.setrecursionlimit(10 ** 6)\nfrom functools import lru_cache\n\ndef solve():\n    (N, X) = [int(x) for x in input().split(' ')]\n    A = [int(x) for x in input().split(' ')]\n\n    @lru_cache(None)\n    def go(i, prev):\n        if i == N:\n            return 0\n        pick = (A[i] + X ^ prev) + go(i + 1, A[i] + X)\n        pss = (A[i] ^ prev) + go(i + 1, A[i])\n        if pick > pss:\n            return pick\n        return pss\n    print(max(go(1, A[0] + X), go(1, A[0])))\nfor _ in range(int(input())):\n    solve()", "from sys import stdin, stdout\nread = stdin.readline\nt = int(read())\nfor i in range(t):\n    (a, x) = map(int, read().split())\n    arr = list(map(int, read().split()))\n    a1 = []\n    a2 = []\n    for j in range(a):\n        if j == 0:\n            a1.append(0)\n            a2.append(0)\n        else:\n            n1 = max(a1[-1] + (arr[j - 1] ^ arr[j]), a2[-1] + (arr[j - 1] + x ^ arr[j]))\n            n2 = max(a1[-1] + (arr[j - 1] ^ arr[j] + x), a2[-1] + (arr[j - 1] + x ^ arr[j] + x))\n            a1.append(n1)\n            a2.append(n2)\n    print(max(a1[-1], a2[-1]))", "T = int(input())\nfor _ in range(T):\n    (n, x) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    dp = [[0, 0] for _ in range(n)]\n    for i in range(1, n):\n        cur_val = A[i]\n        prev_val = A[i - 1]\n        a1 = cur_val ^ prev_val + x\n        a2 = cur_val ^ prev_val\n        dp[i][0] = max(dp[i - 1][1] + a1, dp[i - 1][0] + a2)\n        b1 = cur_val + x ^ prev_val + x\n        b2 = cur_val + x ^ prev_val\n        dp[i][1] = max(dp[i - 1][1] + b1, dp[i - 1][0] + b2)\n    print(max(dp[-1][0], dp[-1][1]))", "from sys import stdin, stdout\nread = stdin.readline\nt = int(read())\nfor i in range(t):\n    (a, x) = map(int, read().split())\n    arr = list(map(int, read().split()))\n    a1 = []\n    a2 = []\n    for j in range(a):\n        if j == 0:\n            a1.append(0)\n            a2.append(0)\n        else:\n            n1 = max(a1[-1] + (arr[j - 1] ^ arr[j]), a2[-1] + (arr[j - 1] + x ^ arr[j]))\n            n2 = max(a1[-1] + (arr[j - 1] ^ arr[j] + x), a2[-1] + (arr[j - 1] + x ^ arr[j] + x))\n            a1.append(n1)\n            a2.append(n2)\n    print(max(a1[-1], a2[-1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (p, q) = (0, 0)\n    for i in range(1, n):\n        same = max(p + (a[i] ^ a[i - 1]), q + (a[i] ^ a[i - 1] + x))\n        change = max(p + (a[i] + x ^ a[i - 1]), q + (a[i] + x ^ a[i - 1] + x))\n        (p, q) = (same, change)\n    print(max(p, q))", "T = int(input())\nfor _ in range(T):\n    (n, x) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    dp = [[0, 0] for _ in range(n)]\n    for i in range(1, n):\n        cur_val = A[i]\n        prev_val = A[i - 1]\n        a1 = cur_val ^ prev_val + x\n        a2 = cur_val ^ prev_val\n        dp[i][0] = max(dp[i - 1][1] + a1, dp[i - 1][0] + a2)\n        b1 = cur_val + x ^ prev_val + x\n        b2 = cur_val + x ^ prev_val\n        dp[i][1] = max(dp[i - 1][1] + b1, dp[i - 1][0] + b2)\n    print(max(dp[-1][0], dp[-1][1]))", "import math\nfrom bisect import bisect, bisect_left, bisect_right\nimport heapq\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef LIS(arr, n):\n    dp = [10 ** 9] * (n + 1)\n    for ele in arr:\n        dp[bisect_left(dp, ele)] = ele\n    return bisect_left(dp, 10 ** 9)\n\ndef exponentiation(bas, exp, mod=1000000007):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nyes = 'YES'\nno = 'NO'\neven = 'EVEN'\nodd = 'ODD'\n\ndef process(arr, n, x):\n    ans = sum((arr[i - 1] ^ arr[i] for i in range(1, n)))\n    ans = max(ans, sum((arr[i - 1] + x ^ arr[i] + x for i in range(1, n))))\n    ans1 = [arr[0]]\n    anns1 = 0\n    anns2 = 0\n    for i in range(1, n):\n        y = arr[i - 1]\n        if anns1 + (y ^ arr[i]) > anns2 + (y + x ^ arr[i]):\n            temp1 = anns1 + (y ^ arr[i])\n        else:\n            temp1 = anns2 + (y + x ^ arr[i])\n        if anns1 + (y ^ arr[i] + x) < anns2 + (y + x ^ arr[i] + x):\n            temp2 = anns2 + (y + x ^ arr[i] + x)\n        else:\n            temp2 = anns1 + (y ^ arr[i] + x)\n        anns1 = temp1\n        anns2 = temp2\n    ans = max(ans, anns1, anns2)\n    return ans\n\ndef main():\n    for _ in range(int(input())):\n        (n, x) = mapin()\n        arr = list(mapin())\n        print(max(process(arr, n, x), process(arr[::-1], n, x)))\nmain()", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef sol(prev, i):\n    if i == N:\n        return 0\n    if (prev, i) in dp:\n        return dp[prev, i]\n    num1 = arr[i - 1]\n    if prev == 1:\n        num1 = arr[i - 1] + X\n    dp[prev, i] = max((arr[i] ^ num1) + sol(0, i + 1), (arr[i] + X ^ num1) + sol(1, i + 1))\n    return dp[prev, i]\nT = int(input())\nfor _ in range(T):\n    (N, X) = [int(x) for x in input().split()]\n    arr = [int(s) for s in input().split()]\n    dp = {}\n    ans1 = sol(1, 1)\n    dp = {}\n    ans2 = sol(0, 1)\n    print(max(ans1, ans2))", "import math as m\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return abs(a)\n\ndef ncr(N, R):\n    return m.factorial(N) // (m.factorial(R) * m.factorial(N - R))\n\ndef getL():\n    return [int(i) for i in input().split(' ')]\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    (n, x) = getL()\n    arr = getL()\n    dp = [[0 for i in range(2)] for j in range(n)]\n    withAdd = [i + x for i in arr]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i]), dp[i - 1][1] + (withAdd[i - 1] ^ arr[i]))\n        dp[i][1] = max(dp[i - 1][0] + (arr[i - 1] ^ withAdd[i]), dp[i - 1][1] + (withAdd[i - 1] ^ withAdd[i]))\n    print(max(dp[n - 1][0], dp[n - 1][1]))\nfor _ in range(getInt()):\n    solve()", "testcase = int(input())\nfor _ in range(testcase):\n    (n, x) = [int(num) for num in input().split()]\n    arr = [int(num) for num in input().split()]\n    ans = [[0, 0] for _ in range(n)]\n    for i in range(1, n):\n        for j in range(2):\n            t = arr[i] + x * j\n            p0 = ans[i - 1][0] + (arr[i - 1] ^ t)\n            p1 = ans[i - 1][1] + (arr[i - 1] + x ^ t)\n            ans[i][j] = max(p0, p1)\n    print(max(ans[-1]))", "t = int(input())\nfor k in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    temp = [[0, 0] for i in range(n)]\n    for i in range(1, n):\n        temp[i][0] = max(temp[i - 1][0] + (arr[i - 1] ^ arr[i]), temp[i - 1][1] + (arr[i - 1] + x ^ arr[i]))\n        temp[i][1] = max(temp[i - 1][0] + (arr[i - 1] ^ arr[i] + x), temp[i - 1][1] + (arr[i - 1] + x ^ arr[i] + x))\n    ans = max(temp[n - 1][0], temp[n - 1][1])\n    print(ans)", "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 6)\nt = int(input())\nwhile t:\n    s = input().split()\n    (n, x) = map(int, s)\n    s = input().split()\n    arr = list(map(int, s))\n    dp = [[0 for i in range(n + 1)] for _ in range(2)]\n    for i in range(1, n):\n        dp[0][i] = (arr[i - 1] + x ^ arr[i]) + dp[1][i - 1]\n        dp[0][i] = max(dp[0][i], (arr[i - 1] ^ arr[i]) + dp[0][i - 1])\n        dp[1][i] = (arr[i - 1] + x ^ arr[i] + x) + dp[1][i - 1]\n        dp[1][i] = max(dp[1][i], (arr[i - 1] ^ arr[i] + x) + dp[0][i - 1])\n    ans = max(dp[0][n - 1], dp[1][n - 1])\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    g = [[0] * (n + 1) for _ in range(2)]\n    for i in range(1, n):\n        if i == 1:\n            g[0][i] = max(a[i - 1] ^ a[i], a[i - 1] + x ^ a[i])\n            g[1][i] = max(a[i - 1] ^ a[i] + x, a[i - 1] + x ^ a[i] + x)\n        else:\n            g[0][i] = max(g[0][i - 1] + (a[i - 1] ^ a[i]), g[1][i - 1] + (a[i - 1] + x ^ a[i]))\n            g[1][i] = max(g[0][i - 1] + (a[i - 1] ^ a[i] + x), g[1][i - 1] + (a[i - 1] + x ^ a[i] + x))\n    print(max(g[0][n - 1], g[1][n - 1]))", "maxx = 2 * 10 ** 5\narr = [0] * maxx\narr2 = [[0] * 2 for i in range(maxx)]\nfor _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in range(1, len(l) + 1):\n        arr[i] = l[i - 1]\n    for i in range(2, n1 + 1):\n        arr2[i][0] = max(arr2[i - 1][0] + (arr[i - 1] ^ arr[i]), arr2[i - 1][1] + (arr[i - 1] + n2 ^ arr[i]))\n        arr2[i][1] = max(arr2[i - 1][0] + (arr[i - 1] ^ arr[i] + n2), arr2[i - 1][1] + (arr[i - 1] + n2 ^ arr[i] + n2))\n    print(max(arr2[n1][0], arr2[n1][1]))", "T = int(input())\nimport copy\nfor i in range(T):\n    (N, X) = [int(z) for z in input().strip().split()]\n    arr = [int(z) for z in input().strip().split()]\n    (with_x, without_x) = ([arr[0] + X], [arr[0]])\n    if N >= 2:\n        without_x.append(max(arr[1] ^ arr[0] + X, arr[1] ^ arr[0]))\n        with_x.append(max(arr[1] + X ^ arr[0], arr[1] + X ^ arr[0] + X))\n    for i in range(2, N):\n        wo = copy.deepcopy(max((arr[i] ^ arr[i - 1] + X) + with_x[-1], (arr[i] ^ arr[i - 1]) + without_x[-1]))\n        wi = copy.deepcopy(max((arr[i] + X ^ arr[i - 1] + X) + with_x[-1], (arr[i] + X ^ arr[i - 1]) + without_x[-1]))\n        with_x.append(wi)\n        without_x.append(wo)\n    if N == 1:\n        print(0)\n    else:\n        print(max(without_x[-1], with_x[-1]))", "for i in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    A = [0] * (n + 1)\n    j = 1\n    for x in input().split():\n        A[j] = int(x)\n        j += 1\n    c = [[0 for i in range(2)] for j in range(n + 1)]\n    for i in range(2, n + 1):\n        c[i][0] = max(c[i - 1][0] + (A[i - 1] ^ A[i]), c[i - 1][1] + (A[i - 1] + k ^ A[i]))\n        c[i][1] = max(c[i - 1][0] + (A[i - 1] ^ A[i] + k), c[i - 1][1] + (A[i - 1] + k ^ A[i] + k))\n    print(max(c[n][0], c[n][1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    inputArray = list(map(int, input().split()))\n    dynamic = [[0 for i in range(2)] for j in range(n)]\n    for i in range(1, n):\n        [prev0, prev1] = dynamic[i - 1]\n        (p0, p1) = (inputArray[i], inputArray[i - 1])\n        dynamic[i][1] = max(prev0 + (p1 ^ p0 + x), prev1 + (p1 + x ^ p0 + x))\n        dynamic[i][0] = max(prev0 + (p1 ^ p0), prev1 + (p1 + x ^ p0))\n    print(max(dynamic[n - 1][0], dynamic[n - 1][1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    dp = [[0, 0] for i in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i]), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i]))\n        dp[i][1] = max((arr[i - 1] ^ arr[i] + x) + dp[i - 1][0], dp[i - 1][1] + (arr[i - 1] + x ^ arr[i] + x))\n    print(max(dp[-1][0], dp[-1][1]))", "import threading\nimport sys\nfrom sys import stdin\ninput = stdin.readline\nsys.setrecursionlimit(10 ** 8)\nfrom collections import defaultdict\n\ndef main():\n    from functools import lru_cache\n    for _ in range(int(input())):\n        (n, x) = map(int, input().split())\n        arr = list(map(int, input().split()))\n\n        @lru_cache(None)\n        def solve(i, p):\n            if i == n:\n                return 0\n            elif p == 1:\n                return max(solve(i + 1, 1) + (arr[i] + x ^ arr[i - 1] + x), solve(i + 1, 0) + (arr[i - 1] + x ^ arr[i]))\n            else:\n                return max(solve(i + 1, 1) + (arr[i] + x ^ arr[i - 1]), solve(i + 1, 0) + (arr[i - 1] ^ arr[i]))\n        print(max(solve(1, 0), solve(1, 1)))\nthreading.stack_size(10 ** 8)\nt = threading.Thread(target=main)\nt.start()\nt.join()", "T = int(input())\nfor t in range(T):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    mat = []\n    for i in range(n + 1):\n        q = [0] * 2\n        mat.append(q)\n    for i in range(2, n + 1):\n        mat[i][0] = max(mat[i - 1][0] + (l[i - 1] ^ l[i]), mat[i - 1][1] + (l[i - 1] + x ^ l[i]))\n        mat[i][1] = max(mat[i - 1][0] + (l[i - 1] ^ l[i] + x), mat[i - 1][1] + (l[i - 1] + x ^ l[i] + x))\n    print(max(mat[n][0], mat[n][1]))", "for t in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    dp2 = [[0, 0], [0, 0]]\n    for i in range(2, n + 1):\n        dp2[0].append(max(dp2[0][i - 1] + (arr[i - 2] ^ arr[i - 1]), dp2[1][i - 1] + (arr[i - 2] + x ^ arr[i - 1])))\n        dp2[1].append(max(dp2[0][i - 1] + (arr[i - 2] ^ arr[i - 1] + x), dp2[1][i - 1] + (arr[i - 2] + x ^ arr[i - 1] + x)))\n    print(max(dp2[0][n], dp2[1][n]))", "t = int(input())\nres = []\nfor _ in range(t):\n    (n, X) = [int(x) for x in input().split()]\n    nums = [int(x) for x in input().split()]\n    dp = [[0 for _ in range(2)] for _ in range(n)]\n    for i in range(1, n):\n        choice1 = dp[i - 1][1] + (nums[i - 1] + X ^ nums[i])\n        choice2 = dp[i - 1][1] + (nums[i - 1] + X ^ nums[i] + X)\n        choice3 = dp[i - 1][0] + (nums[i - 1] ^ nums[i] + X)\n        choice4 = dp[i - 1][0] + (nums[i - 1] ^ nums[i])\n        dp[i][0] = max(choice1, choice4)\n        dp[i][1] = max(choice2, choice3)\n    res.append(max(dp[-1][0], dp[-1][1]))\nfor val in res:\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = [int(s) for s in input().split()]\n    dp = []\n    for _ in range(n):\n        dp.append([0, 0])\n    for i in range(1, n):\n        dp1 = dp[i - 1][0] + (a[i - 1] ^ a[i])\n        dp2 = dp[i - 1][1] + (a[i - 1] + x ^ a[i])\n        dp[i][0] = max(dp1, dp2)\n        dp1 = dp[i - 1][0] + (a[i - 1] ^ a[i] + x)\n        dp2 = dp[i - 1][1] + (a[i - 1] + x ^ a[i] + x)\n        dp[i][1] = max(dp1, dp2)\n    print(max(dp[-1][0], dp[-1][1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * 2 for _ in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (a[i - 1] ^ a[i]), dp[i - 1][1] + (a[i - 1] + x ^ a[i]))\n        dp[i][1] = max(dp[i - 1][0] + (a[i - 1] ^ a[i] + x), dp[i - 1][1] + (a[i - 1] + x ^ a[i] + x))\n    print(max(dp[n - 1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if n > 1:\n        a = {}\n        for i in range(1, n + 1):\n            a[i] = l[i - 1]\n        d1 = {}\n        d2 = {}\n        for i in range(2, n + 1):\n            if i - 1 not in d1:\n                d1[i - 1] = 0\n            if i - 1 not in d2:\n                d2[i - 1] = 0\n            d1[i] = max(d1[i - 1] + (a[i - 1] ^ a[i]), d2[i - 1] + (a[i - 1] + x ^ a[i]))\n            d2[i] = max(d1[i - 1] + (a[i - 1] ^ a[i] + x), d2[i - 1] + (a[i - 1] + x ^ a[i] + x))\n        print(max(d1[n], d2[n]))\n    else:\n        print(0)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.insert(0, 0)\n    dp = defaultdict(int)\n    for i in range(2, n + 1):\n        dp[i, 0] = max(dp[i - 1, 0] + (a[i - 1] ^ a[i]), dp[i - 1, 1] + (a[i - 1] + x ^ a[i]))\n        dp[i, 1] = max(dp[i - 1, 0] + (a[i - 1] ^ a[i] + x), dp[i - 1, 1] + (a[i - 1] + x ^ a[i] + x))\n    print(max(dp[n, 0], dp[n, 1]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [[0, 0] for i in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i]), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i]))\n        dp[i][1] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i] + x), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i] + x))\n    print(max(dp[n - 1][0], dp[n - 1][1]))", "def rec(i, A, X, N, prev):\n    if i == 0:\n        return 0\n    if i == N:\n        return max(rec(i - 1, A, X, N, 1), rec(i - 1, A, X, N, 0))\n    if prev == 1:\n        return max((A[i - 1] + X ^ A[i] + X) + rec(i - 1, A, X, N, 1), (A[i - 1] ^ A[i] + X) + rec(i - 1, A, X, N, 0))\n    else:\n        return max((A[i - 1] + X ^ A[i]) + rec(i - 1, A, X, N, 1), (A[i - 1] ^ A[i]) + rec(i - 1, A, X, N, 0))\nT = int(input())\nfor _ in range(T):\n    (N, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    dp = [[-1 for j in range(2)] for i in range(N + 1)]\n    for j in range(2):\n        dp[0][j] = 0\n    for i in range(1, N + 1):\n        for j in range(2):\n            if i == N:\n                dp[i][j] = max(dp[i - 1][0], dp[i - 1][1])\n            elif j == 0:\n                dp[i][j] = max((A[i - 1] + X ^ A[i]) + dp[i - 1][1], (A[i - 1] ^ A[i]) + dp[i - 1][0])\n            else:\n                dp[i][j] = max((A[i - 1] + X ^ A[i] + X) + dp[i - 1][1], (A[i - 1] ^ A[i] + X) + dp[i - 1][0])\n    print(max(dp[N]))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [[0, 0] for i in range(n + 1)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i]), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i]))\n        dp[i][1] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i] + x), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i] + x))\n    print(max(dp[n - 1][0], dp[n - 1][1]))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    if n == 2:\n        print(max([a[0] ^ a[1], a[0] + x ^ a[1], a[0] ^ a[1] + x, a[0] + x ^ a[1] + x]))\n        continue\n    xors = [a[i] ^ a[i + 1] for i in range(n - 1)]\n    matrix = [[0 for i in range(n - 1)] for _ in range(4)]\n    for i in range(n - 1):\n        matrix[1][i] = (a[i] + x ^ a[i + 1]) - xors[i]\n    for i in range(n - 1):\n        matrix[2][i] = (a[i] ^ a[i + 1] + x) - xors[i]\n    for i in range(n - 1):\n        matrix[3][i] = (a[i] + x ^ a[i + 1] + x) - xors[i]\n    for i in range(n - 3, -1, -1):\n        matrix[3][i] = matrix[3][i] + max(matrix[1][i + 1], matrix[3][i + 1])\n        matrix[2][i] = matrix[2][i] + max(matrix[1][i + 1], matrix[3][i + 1])\n        matrix[1][i] = matrix[1][i] + max(matrix[0][i + 1], matrix[2][i + 1])\n        matrix[0][i] = matrix[0][i] + max(matrix[0][i + 1], matrix[2][i + 1])\n    print(sum(xors) + max(0, max([matrix[i][0] for i in range(4)])))", "def miis():\n    return map(int, input().split())\nfor _ in range(int(input())):\n    (n, x) = miis()\n    a = list(miis())\n    dpgive = [0]\n    dpdont = [0]\n    for i in range(1, n):\n        to_d = max(dpgive[-1] + (a[i - 1] + x ^ a[i]), dpdont[-1] + (a[i - 1] ^ a[i]))\n        to_g = max(dpgive[-1] + (a[i - 1] + x ^ a[i] + x), dpdont[-1] + (a[i - 1] ^ a[i] + x))\n        dpgive.append(to_g)\n        dpdont.append(to_d)\n    print(max(dpgive[-1], dpdont[-1]))", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    dp = [[0, 0] for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            dp[i][0] = 0\n            dp[i][1] = 0\n        else:\n            dp[i][0] = max((arr[i] ^ arr[i + 1]) + dp[i + 1][0], (arr[i] ^ arr[i + 1] + x) + dp[i + 1][1])\n            dp[i][1] = max((arr[i] + x ^ arr[i + 1]) + dp[i + 1][0], (arr[i] + x ^ arr[i + 1] + x) + dp[i + 1][1])\n    print(max(dp[0][0], dp[0][1]))", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef fun(i, n, f, arr, x, dp):\n    if i == n:\n        return 0\n    ans = 0\n    if dp[i - 1][f] != -1:\n        return dp[i - 1][f]\n    if f == 1:\n        ans = max(ans, (arr[i - 1] + x ^ arr[i]) + fun(i + 1, n, 0, arr, x, dp), (arr[i - 1] + x ^ arr[i] + x) + fun(i + 1, n, 1, arr, x, dp))\n    else:\n        ans = max(ans, (arr[i - 1] ^ arr[i]) + fun(i + 1, n, 0, arr, x, dp), (arr[i - 1] ^ arr[i] + x) + fun(i + 1, n, 1, arr, x, dp))\n    dp[i - 1][f] = ans\n    return ans\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [[-1] * 2 for i in range(n + 1)]\n    if n == 1:\n        print(0)\n    else:\n        dp = [[-1, -1] for i in range(n + 1)]\n        ans1 = fun(1, n, 0, arr, x, dp)\n        ans2 = fun(1, n, 1, arr, x, dp)\n        print(max(ans1, ans2))", "for _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(0)\n        continue\n    incl = max(a[n - 2] + x ^ a[n - 1], a[n - 2] + x ^ a[n - 1] + x)\n    excl = max(a[n - 2] ^ a[n - 1], a[n - 2] ^ a[n - 1] + x)\n    for i in range(n - 3, -1, -1):\n        (incl, excl) = (max(incl + (a[i] + x ^ a[i + 1] + x), excl + (a[i] + x ^ a[i + 1])), max(incl + (a[i] ^ a[i + 1] + x), excl + (a[i] ^ a[i + 1])))\n    print(max(incl, excl))", "def sol(a, n, x):\n    r = 0\n    for i in range(n - 1):\n        r += a[i] ^ a[i + 1]\n    if x == 0:\n        return r\n    dp1 = [0] * (n + 1)\n    dp0 = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp0[i] = max(dp1[i - 1] + (a[i - 1] ^ a[i - 2] + x), dp0[i - 1] + (a[i - 1] ^ a[i - 2]))\n        dp1[i] = max(dp1[i - 1] + (a[i - 1] + x ^ a[i - 2] + x), dp0[i - 1] + (a[i - 1] + x ^ a[i - 2]))\n    return max(dp1[n], dp0[n])\nfor _ in range(int(input())):\n    (n, x) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    print(sol(a, n, x))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(a % b, a)\n\ndef swap(a, b):\n    (a, b) = (b, a)\n    return (a, b)\n\ndef fact(n):\n    if n == 1:\n        return 1\n    return n * fact(n - 1)\n\ndef cbits(n):\n    count = 0\n    while n:\n        n = n & n - 1\n        count += 1\n    return count\n\ndef solve(n, x, arr):\n    dp = [[0] * 2 for i in range(n + 1)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i]), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i]))\n        dp[i][1] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i] + x), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i] + x))\n    return max(dp[n - 1][0], dp[n - 1][1])\nt = int(input())\nwhile t > 0:\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(solve(n, x, arr))\n    t -= 1", "import math\nts = int(input())\nfor _ in range(ts):\n    (n, x) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    if n == 1:\n        print(0)\n        continue\n    dp = [[], []]\n    for i in range(n):\n        dp[0].append(0)\n        dp[1].append(0)\n    for i in range(1, n, 1):\n        dp[0][i] = max(dp[0][i - 1] + (arr[i - 1] + x ^ arr[i] + x), dp[1][i - 1] + (arr[i - 1] ^ arr[i] + x))\n        dp[1][i] = max(dp[0][i - 1] + (arr[i - 1] + x ^ arr[i]), dp[1][i - 1] + (arr[i - 1] ^ arr[i]))\n    print(max(dp[0][n - 1], dp[1][n - 1]))", "from sys import setrecursionlimit\nfrom functools import lru_cache\nsetrecursionlimit(10 ** 6)\n\ndef solve(n, x, arr):\n\n    @lru_cache(None)\n    def dp(i, prev_added):\n        if i == n:\n            return 0\n        prev = 0\n        if i > 0:\n            prev = arr[i - 1]\n            if prev_added:\n                prev += x\n        res = dp(i + 1, False) + (arr[i] ^ prev)\n        res = max(res, dp(i + 1, True) + (arr[i] + x ^ prev))\n        return res\n    return max(dp(1, False), dp(1, True))\nfor _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(solve(n, x, arr))", "import random\nimport math\nfrom collections import defaultdict, Counter\nfrom functools import lru_cache\nimport bisect\nimport heapq\n\nclass SegmentTree:\n\n    def __init__(self, nums):\n        self._size = len(nums)\n        self._tree = [0] * (4 * self._size)\n        self.build(nums)\n\n    def build(self, a, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if lo == hi:\n            self._tree[v] = a[lo]\n        else:\n            mi = (lo + hi) // 2\n            self.build(a, 2 * v, lo, mi)\n            self.build(a, 2 * v + 1, mi + 1, hi)\n            self._tree[v] = self._tree[2 * v] + self._tree[2 * v + 1]\n\n    def update(self, pos, val, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if lo == hi:\n            self._tree[v] = val\n        else:\n            mi = (lo + hi) // 2\n            if pos <= mi:\n                self.update(pos, val, 2 * v, lo, mi)\n            else:\n                self.update(pos, val, 2 * v + 1, mi + 1, hi)\n            self._tree[v] = self._tree[2 * v] + self._tree[2 * v + 1]\n\n    def query(self, l, h, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if l > h:\n            return 0\n        elif l == lo and h == hi:\n            return self._tree[v]\n        else:\n            mi = (lo + hi) // 2\n            return self.query(l, min(mi, h), 2 * v, lo, mi) + self.query(max(mi + 1, l), h, 2 * v + 1, mi + 1, hi)\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parents = list(range(n))\n\n    def find(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            self.parents[x] = y\ndire = [0, 1, 0, -1, 0]\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef google(t):\n    print('Case #{}:'.format(t), end=' ')\nRANDOM = random.randrange(2 ** 62)\n\ndef Wrapper(x):\n    return x ^ RANDOM\n\ndef solve():\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0 for _ in range(2)] for _ in range(n)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (a[i] ^ a[i - 1]), dp[i - 1][1] + (a[i] ^ a[i - 1] + x))\n        dp[i][1] = max(dp[i - 1][0] + (a[i] + x ^ a[i - 1]), dp[i - 1][1] + (a[i] + x ^ a[i - 1] + x))\n    print(max(dp[-1]))\nfor t in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, x) = input().split(' ')\n    n = int(n)\n    x = int(x)\n    a = [0] + list(map(int, input().split()))\n    t = [[0, 0] for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        t[i][0] = max(t[i - 1][0] + (a[i - 1] ^ a[i]), t[i - 1][1] + (a[i - 1] + x ^ a[i]))\n        t[i][1] = max(t[i - 1][0] + (a[i - 1] ^ a[i] + x), t[i - 1][1] + (a[i - 1] + x ^ a[i] + x))\n    print(max(t[n]))", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    aa = [[0] * 2 for i in range(a)]\n    dp = list(map(int, input().split()))\n    for i in range(1, a):\n        aa[i][0] = max(aa[i - 1][0] + (dp[i - 1] ^ dp[i]), aa[i - 1][1] + (dp[i - 1] + b ^ dp[i]))\n        aa[i][1] = max(aa[i - 1][0] + (dp[i - 1] ^ dp[i] + b), aa[i - 1][1] + (dp[i - 1] + b ^ dp[i] + b))\n    print(max(aa[-1][0], aa[-1][1]))", "t = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    l = [0] + list(map(int, input().split()))\n    c = 0\n    dp = {}\n    for i in range(1, n + 1):\n        dp[i] = [0, 0]\n    for i in range(2, n + 1):\n        dp[i][0] = max(dp[i - 1][0] + (l[i - 1] ^ l[i]), dp[i - 1][1] + (l[i - 1] + x ^ l[i]))\n        dp[i][1] = max(dp[i - 1][0] + (l[i - 1] ^ l[i] + x), dp[i - 1][1] + (l[i - 1] + x ^ l[i] + x))\n    print(max(dp[n][0], dp[n][1]))", "T = int(input())\nfor tr in range(T):\n    (N, X) = map(int, input().split(' '))\n    A = list(map(int, input().split(' ')))\n    dp = [[-1, -1] for i in range(N)]\n    for i in range(N):\n        if i == 0:\n            dp[0][0] = 0\n            dp[0][1] = 0\n        else:\n            dp[i][1] = max(int(A[i] + X ^ A[i - 1]) + dp[i - 1][0], int(A[i] + X ^ A[i - 1] + X) + dp[i - 1][1])\n            dp[i][0] = max(int(A[i] ^ A[i - 1]) + dp[i - 1][0], int(A[i] ^ A[i - 1] + X) + dp[i - 1][1])\n    print(max(dp[N - 1][0], dp[N - 1][1]))", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\nimport sys\n\ndef inp():\n    return sys.stdin.readline()\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = int(input())\n    for _ in range(how_much_noob_I_am):\n        (n, x) = sep()\n        arr = lis()\n        dp = [[0] * 2 for i in range(n)]\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][1] + (arr[i - 1] + x ^ arr[i]), dp[i - 1][0] + (arr[i - 1] ^ arr[i]))\n            dp[i][1] = max(dp[i - 1][1] + (arr[i - 1] + x ^ arr[i] + x), dp[i - 1][0] + (arr[i - 1] ^ arr[i] + x))\n        print(max(dp[n - 1][0], dp[n - 1][1]))\nmain()", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n > 1:\n        prevdp0 = prevdp1 = 0\n        for i in range(n - 1):\n            dp0 = max(prevdp0 + (a[i] ^ a[i + 1]), prevdp1 + (a[i] + x ^ a[i + 1]))\n            dp1 = max(prevdp0 + (a[i] ^ a[i + 1] + x), prevdp1 + (a[i] + x ^ a[i + 1] + x))\n            (prevdp0, prevdp1) = (dp0, dp1)\n        print(max(dp0, dp1))\n    else:\n        print(0)", "from collections import Counter, deque, defaultdict, OrderedDict\nimport math\nfrom bisect import bisect, bisect_left\nimport sys\nimport re\nMOD = 10 ** 9 + 7\nMAX = -sys.maxsize\nMIN = sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve():\n    (n, x) = get.map()\n    a = get.int()\n    dp = [[0 for j in range(n)] for i in range(2)]\n    for i in range(1, n):\n        dp[0][i] = max(dp[0][i - 1] + (a[i] ^ a[i - 1]), dp[1][i - 1] + (a[i] ^ a[i - 1] + x))\n        dp[1][i] = max(dp[0][i - 1] + (a[i] + x ^ a[i - 1]), dp[1][i - 1] + (a[i] + x ^ a[i - 1] + x))\n    print(max(dp[0][-1], dp[1][-1]))\nt = int(input())\nfor tt in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = [0]\n    arr1 = list(map(int, input().split()))\n    arr.extend(arr1)\n    dp = [[0 for i in range(2)] for i in range(n + 1)]\n    for i in range(2, n + 1):\n        dp[i][0] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i]), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i]))\n        dp[i][1] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i] + x), dp[i - 1][1] + (arr[i - 1] + x ^ arr[i] + x))\n    print(max(dp[n][0], dp[n][1]))", "def num():\n    c = int(input())\n    return c\n\ndef stri():\n    c = str(input())\n    return c\n\ndef vector():\n    c = list(map(int, input().split()))\n    return c\n\ndef strvector():\n    c = list(map(str, input().split()))\n    return c\nimport math\n\ndef isprime(num):\n    a = 2\n    while a <= math.sqrt(num):\n        if num % a < 1:\n            return False\n        a = a + 1\n    return num > 1\nt = num()\nwhile t > 0:\n    t -= 1\n    (n, x) = vector()\n    arr = vector()\n    ans = 0\n    matrix = [[arr[i], arr[i] + x] for i in range(n)]\n    val = [[0, 0] for i in range(n)]\n    for i in range(0, len(matrix)):\n        if i == 0:\n            continue\n        else:\n            for j in range(0, 2):\n                if j == 0:\n                    d = matrix[i][j] ^ matrix[i - 1][j]\n                    c = matrix[i][j] ^ matrix[i - 1][j + 1]\n                    val[i][j] = max(val[i - 1][j] + d, val[i - 1][j + 1] + c)\n                else:\n                    d = matrix[i][j] ^ matrix[i - 1][j]\n                    c = matrix[i][j] ^ matrix[i - 1][j - 1]\n                    val[i][j] = max(val[i - 1][j] + d, val[i - 1][j - 1] + c)\n    print(max(val[-1]))", "def num():\n    c = int(input())\n    return c\n\ndef stri():\n    c = str(input())\n    return c\n\ndef vector():\n    c = list(map(int, input().split()))\n    return c\n\ndef strvector():\n    c = list(map(str, input().split()))\n    return c\nimport math\n\ndef isprime(num):\n    a = 2\n    while a <= math.sqrt(num):\n        if num % a < 1:\n            return False\n        a = a + 1\n    return num > 1\nt = num()\nwhile t > 0:\n    t -= 1\n    (n, x) = vector()\n    arr = vector()\n    ans = 0\n    matrix = [[arr[i], arr[i] + x] for i in range(n)]\n    val = [[0, 0] for i in range(n)]\n    for i in range(0, len(matrix)):\n        if i == 0:\n            continue\n        else:\n            for j in range(0, 2):\n                if j == 0:\n                    d = matrix[i][j] ^ matrix[i - 1][j]\n                    c = matrix[i][j] ^ matrix[i - 1][j + 1]\n                    val[i][j] = max(val[i - 1][j] + d, val[i - 1][j + 1] + c)\n                else:\n                    d = matrix[i][j] ^ matrix[i - 1][j]\n                    c = matrix[i][j] ^ matrix[i - 1][j - 1]\n                    val[i][j] = max(val[i - 1][j] + d, val[i - 1][j - 1] + c)\n    print(max(val[-1]))", "for _ in range(int(input())):\n    (n, x) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    sum_orig = 0\n    sum_new = 0\n    current_sum = 0\n    for i in range(n - 1):\n        orig = A[i]\n        new = A[i] + x\n        next_orig = A[i + 1]\n        next_new = A[i + 1] + x\n        a = max((orig ^ next_orig) + sum_orig, (new ^ next_orig) + sum_new)\n        b = max((orig ^ next_new) + sum_orig, (new ^ next_new) + sum_new)\n        sum_orig = a\n        sum_new = b\n    print(max(sum_orig, sum_new))", "for _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    for i in range(n + 1):\n        k = []\n        for j in range(2):\n            k.append(0)\n        dp.append(k)\n    for i in range(2, n + 1):\n        dp[i][0] = max(dp[i - 1][0] + (a[i - 2] ^ a[i - 1]), dp[i - 1][1] + (a[i - 2] + p ^ a[i - 1]))\n        dp[i][1] = max(dp[i - 1][0] + (a[i - 2] ^ a[i - 1] + p), dp[i - 1][1] + (a[i - 2] + p ^ a[i - 1] + p))\n    print(max(dp[n][0], dp[n][1]))", "T = int(input())\nfor _ in range(T):\n    (N, X) = map(int, input().split())\n    flag = 200001\n    check = 1\n    bool = True\n    arr = list(map(int, input().split()))\n    Bool = False\n    dp = [[0, 0] for i in range(N)]\n    for i in range(1, N):\n        flag += check\n        check ^= flag\n        dp[i][0] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i]), dp[i - 1][1] + (arr[i - 1] + X ^ arr[i]))\n        check -= flag\n        dp[i][1] = max(dp[i - 1][0] + (arr[i - 1] ^ arr[i] + X), dp[i - 1][1] + (arr[i - 1] + X ^ arr[i] + X))\n        bool = False\n    Bool = True\n    print(str(max(dp[N - 1][0], dp[N - 1][1])))", "import math\n\ndef solve():\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [[0, 0] for x in range(n + 1)]\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0] + (arr[i] ^ arr[i - 1]), dp[i - 1][1] + (arr[i] ^ arr[i - 1] + m))\n        dp[i][1] = max(dp[i - 1][0] + (arr[i] + m ^ arr[i - 1]), dp[i - 1][1] + (arr[i] + m ^ arr[i - 1] + m))\n    return max(dp[n - 1])\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    (N, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    dp = [[[0 for _ in range(2)] for _ in range(2)] for _ in range(N)]\n    for i in range(N - 1):\n        for j in range(2):\n            for k in range(2):\n                for l in range(2):\n                    dp[i + 1][l][k] = max(dp[i + 1][l][k], dp[i][k][j] + (A[i] + k * X ^ A[i + 1] + l * X))\n    res = 0\n    for i in range(2):\n        for j in range(2):\n            res = max(res, dp[N - 1][i][j])\n    print(res)", "t = int(input())\nfor t_1 in range(t):\n    line = input().split(' ')\n    n = int(line[0])\n    x = int(line[1])\n    numbers = [int(item) for item in input().split(' ')]\n    max_by_added_i = [0]\n    max_not_added_i = [0]\n    for i in range(1, n):\n        max_by_added_i.append(max(max_by_added_i[i - 1] + (numbers[i - 1] + x ^ numbers[i] + x), max_not_added_i[i - 1] + (numbers[i - 1] ^ numbers[i] + x)))\n        max_not_added_i.append(max(max_by_added_i[i - 1] + (numbers[i - 1] + x ^ numbers[i]), max_not_added_i[i - 1] + (numbers[i - 1] ^ numbers[i])))\n    print(max(max_by_added_i[n - 1], max_not_added_i[n - 1]))", "def solve(x, a):\n    res = [0, 0]\n    for i in range(len(a) - 1):\n        oldres = res.copy()\n        res[0] = max((a[i] + x ^ a[i + 1] + x) + oldres[0], (a[i] ^ a[i + 1] + x) + oldres[1])\n        res[1] = max((a[i] + x ^ a[i + 1]) + oldres[0], (a[i] ^ a[i + 1]) + oldres[1])\n    return max(res)\nt = int(input())\nfor i in range(t):\n    (n, x) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    print(solve(x, a))"]