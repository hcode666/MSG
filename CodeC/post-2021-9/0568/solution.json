["import math\nfrom fractions import Fraction\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    M = 998244353\n    n = a + b\n    p = Fraction(int(math.ceil(n / 2)), n)\n    exp = a * p\n    p = exp.numerator\n    q = exp.denominator\n    print(p * pow(q, -1, M) % M)", "import math\nfrom fractions import Fraction\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    M = 998244353\n    n = a + b\n    p = Fraction(int(math.ceil(n / 2)), n)\n    exp = a * p\n    p = exp.numerator\n    q = exp.denominator\n    print(p * pow(q, -1, M) % M)", "import math\nfrom fractions import Fraction\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    M = 998244353\n    n = a + b\n    p = Fraction(int(math.ceil(n / 2)), n)\n    exp = a * p\n    p = exp.numerator\n    q = exp.denominator\n    print(p * pow(q, -1, M) % M)", "import math\nfrom fractions import Fraction\nM = 998244353\n\ndef solve(a, b):\n    n = a + b\n    p = Fraction(int(math.ceil(n / 2)), n)\n    expected = a * p\n    (p, q) = (expected.numerator, expected.denominator)\n    return p * pow(q, -1, M) % M\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    print(solve(a, b))", "mod = 998244353\nfor i in range(int(input())):\n    (x, y) = map(int, input().split())\n    ans = (x + y + 1) // 2 * pow(x + y, mod - 2, mod)\n    print(ans * x % mod)", "import math\nt = int(input())\nmod = 998244353\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    n = a + b\n    print(math.ceil(n / 2) * a * pow(n, mod - 2, mod) % mod)", "import math\nt = int(input())\nmod = 998244353\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    n = a + b\n    print(math.ceil(n / 2) * a * pow(n, mod - 2, mod) % mod)", "mod = 998244353\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    res = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(res * a % mod)", "MOD = 998244353\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    n = a + b\n    k = (n + 1) // 2\n    print(k * a * pow(n, MOD - 2, MOD) % MOD)", "mod = 998244353\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    res = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(res * a % mod)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "MOD = 998244353\n\ndef expSum(a, b):\n    n = a + b\n    k = (n + 1) // 2\n    n_inv = pow(n, MOD - 2, MOD)\n    ans = a * k * n_inv % MOD\n    return ans\nt = int(input())\nfor _ in range(t):\n    (ones, zeros) = [int(x) for x in input().split()]\n    print(expSum(ones, zeros))", "import sys, math\n\ndef _input():\n    return sys.stdin.readline().strip()\n\ndef singleLineArr():\n    return [int(n) for n in input().split()]\n\ndef mulLineArr(lineCnt):\n    return [int(_input()) for _ in range(lineCnt)]\nmod = 998244353\n\ndef solve(a, b):\n    n = a + b\n    return math.ceil(n / 2) * a * pow(n, mod - 2, mod) % mod\nt = int(input())\nfor _ in range(t):\n    (a, b) = singleLineArr()\n    print(solve(a, b))", "import math\nmod = 998244353\n\ndef solve(a, b):\n    n = a + b\n    return math.ceil(n / 2) * a * pow(n, mod - 2, mod) % mod\nt = int(input())\nfor _ in range(t):\n    (a, b) = list(map(int, input().split()))\n    print(solve(a, b))", "MOD = 998244353\ntests = int(input())\nimport math\nfor t0 in range(tests):\n    (a, b) = map(int, input().split())\n    n = a + b\n    n1 = math.ceil(n / 2)\n    n2 = math.floor((a + b) / 2)\n    print(a * n1 * pow(n, -1, MOD) % MOD)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nimport math\n\ndef modInverse(b, m):\n    g = math.gcd(b, m)\n    if g != 1:\n        return -1\n    else:\n        return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    return inv * a % m\nfor t in range(int(input())):\n    (a, b) = mi()\n    n = a + b\n    from math import ceil\n    k = ceil(n / 2)\n    print(modDivide(a * k, n, 998244353))", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "MOD = 998244353\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    n = a + b\n    k = (n + 1) // 2\n    print(k * a * pow(n, MOD - 2, MOD) % MOD)", "MOD = 998244353\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = a + b\n    k = (n + 1) // 2\n    print(k * a * pow(n, MOD - 2, MOD) % MOD)", "mod = 998244353\n\ndef helper(p, q):\n    e = mod - 2\n    while e:\n        if e & 1:\n            p = p * q % mod\n        q = q * q % mod\n        e = e >> 1\n    return p\nt = int(input())\nwhile t > 0:\n    (a, b) = map(int, input().split())\n    k = (a + b + 1) // 2\n    print(helper(k, a + b) * a % mod)\n    t -= 1", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = a + b\n    k = (n + 1) // 2\n    print(k * a * pow(n, 998244351, 998244353) % 998244353)", "t = int(input())\nMOD = 998244353\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    n = a + b\n    k = (n + 1) // 2\n    print(k * a * pow(n, MOD - 2, MOD) % MOD)", "def ans(a, b):\n    if (a + b) % 2 == 0:\n        return a * pow(2, 998244353 - 2, 998244353) % 998244353\n    else:\n        return a * ((a + b) // 2 + 1) * pow(a + b, 998244353 - 2, 998244353) % 998244353\nfor _ in range(int(input())):\n    l = list(map(int, input().strip().split()))\n    print(ans(l[0], l[1]) % 998244353)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "for _ in range(int(input())):\n    (A, B) = list(map(int, input().split()))\n    P = (A + B + 1) // 2\n    P *= A\n    Q = A + B\n    print(pow(Q, -1, 998244353) * P % 998244353)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "test = int(input())\nwhile test:\n    mod = 998244353\n    (a, b) = map(int, input().split())\n    n = a + b\n    k = (n + 1) // 2\n    p1 = a % mod\n    p2 = k % mod\n    p3 = pow(n, -1, 998244353)\n    print(p1 * p2 % mod * p3 % mod)\n    test -= 1", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "t = int(input())\nMOD = 998244353\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    n = a + b\n    k = (n + 1) // 2\n    print(k * a * pow(n, MOD - 2, MOD) % MOD)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (a, b) = [int(v) for v in input().split()]\n    n = a + b\n    (num, den) = (a * ceil(n / 2), n)\n    den = pow(den, -1, 998244353)\n    ans = num * den % 998244353\n    print(ans)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "T = int(input())\nimport math\nP = 998244353\n\ndef binpow(x, n):\n    if n == 0:\n        return 1\n    sub = binpow(x, n // 2)\n    if n % 2:\n        return sub * sub * x % P\n    else:\n        return sub * sub % P\nfor t in range(T):\n    (a, b) = input().split()\n    a = int(a)\n    b = int(b)\n    n = (a + b + 1) // 2\n    numa = a * n\n    deno = a + b\n    dinv = binpow(deno, P - 2) % P\n    print(numa * dinv % P)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "mod = 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef lsi():\n    return si().strip().split(' ')\n\ndef ni():\n    return int(input())\nmod = 998244353\nfor _ in range(ni()):\n    (a, b) = mi()\n    ans = (a + b + 1) // 2 * pow(a + b, mod - 2, mod)\n    print(ans * a % mod)", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    if (m + n) % 2 == 1:\n        if min(m, n) == 0:\n            print((m + 1) // 2 % 998244353)\n        else:\n            print(pow(m + n, 998244351, 998244353) * m * ((m + n) * 499122177 - 499122176) % 998244353)\n    else:\n        print(m * 499122177 % 998244353)", "for _ in range(int(input())):\n    (A, B) = list(map(int, input().split()))\n    N = A + B\n    if N % 2 == 1:\n        P = N // 2 + 1\n    else:\n        P = N // 2\n    P *= A\n    Q = A + B\n    print(pow(Q, -1, 998244353) * P % 998244353)", "def inv(x):\n    return pow(x, 998244351, 998244353)\n\ndef f(a, b):\n    return a * inv(2) % 998244353\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if (a + b) % 2 == 1:\n        if a == 0:\n            print(0)\n        elif b == 0:\n            print((a + 1) // 2 % 998244353)\n        else:\n            print((a * inv(a + b) * (f(a - 1, b) + 1) + b * inv(a + b) * f(a, b - 1)) % 998244353)\n    else:\n        print(f(a, b))", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = (a + b) // 2 + (a + b) % 2\n    m = 998244353\n    p = a * pow(a + b, m - 2, m) % m\n    print(p * n % m)", "import math\nfor _ in range(int(input())):\n    (a, b) = [int(i) for i in input().split()]\n    m = 998244353\n    t = math.ceil((a + b) / 2)\n    y = pow(a + b, -1, m)\n    ans = a * t * y % m\n    print(ans)", "def calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nt = int(input())\nfor cases in range(t):\n    (a, b) = list(map(int, input().split()))\n    if (a + b) % 2:\n        turn = (a + b + 1) // 2\n    else:\n        turn = (a + b) // 2\n    print(calculate(turn * a, a + b))", "def ii():\n    return int(input())\n\ndef li(c=int):\n    return list(map(c, input().split()))\n\ndef lo(arr, sep=' '):\n    arr = [str(i) for i in arr]\n    print(sep.join(arr))\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef solve():\n    (a, b) = li()\n    ct = (a + b) // 2 + (a + b) % 2\n    print(calculate(ct * a, a + b))\nfor testcase in range(int(input())):\n    solve()", "import collections\nimport math\nimport random\nimport sys\nfrom functools import *\nfrom heapq import *\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nints = lambda : list(map(int, input().split()))\nMOD = 998244353\n\ndef solve() -> None:\n    (a, b) = map(int, input().split())\n    n = a + b\n    k = (n + 1) // 2\n    print(k * a * pow(n, MOD - 2, MOD) % MOD)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nbeeg = 998244353\nfor tea in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = a + b\n    (p, q) = ((n + 1) // 2 * a, n)\n    lawl = math.gcd(p, q)\n    (p, q) = (p // lawl, q // lawl)\n    print(p * pow(q, -1, beeg) % beeg)", "import math\nbeeg = 998244353\nfor tea in range(int(input())):\n    (a, b) = map(int, input().split())\n    n = a + b\n    (p, q) = ((n + 1) // 2 * a, n)\n    lawl = math.gcd(p, q)\n    (p, q) = (p // lawl, q // lawl)\n    print(p * pow(q, -1, beeg) % beeg)", "M = 998244353\n\ndef solve():\n    (a, b) = [int(x.strip()) for x in input().strip().split()]\n    pO = a * pow(a + b, -1, M) % M\n    if (a + b) % 2 == 0:\n        ans = pO * (a + b) * pow(2, -1, M)\n    else:\n        ans = pO * (a + b + 1) * pow(2, -1, M)\n    print(ans % M)\nt = int(input())\nfor _ in range(t):\n    solve()"]