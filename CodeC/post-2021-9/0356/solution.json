["import math\nt = int(input())\nwhile t != 0:\n    (x, m) = map(int, input().split())\n    if x == 0:\n        print(0)\n        t = t - 1\n        continue\n    a = math.ceil(math.log(x, 2))\n    ans = m - a\n    if m > a:\n        print(ans)\n    else:\n        print(0)\n    t -= 1", "import math\nt = int(input())\nwhile t != 0:\n    (x, m) = map(int, input().split())\n    if x == 0:\n        print(0)\n        t = t - 1\n        continue\n    a = math.ceil(math.log(x, 2))\n    ans = m - a\n    if m > a:\n        print(ans)\n    else:\n        print(0)\n    t -= 1", "from math import ceil, log\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef main():\n    for i in range(inp()):\n        (X, M) = lis()\n        ans = M - ceil(log(X, 2))\n        if ans < 0:\n            print(0)\n        else:\n            print(ans)\nmain()", "import math\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    required = math.ceil(math.log(n, 2)) + 1\n    print(max(m - required, -1) + 1)", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    i = 1\n    while x > 1:\n        x /= 2\n        i += 1\n    if m < i:\n        print(0)\n    else:\n        print(m - i + 1)", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    i = 1\n    while x > 1:\n        x /= 2\n        i += 1\n    if m < i:\n        print(0)\n    else:\n        print(m - i + 1)", "from math import ceil\n\ndef moves_to_build(h):\n    moves = 1\n    while h > 1:\n        h = ceil(h / 2)\n        moves += 1\n    return moves\nT = int(input())\nfor i in range(T):\n    (h, moves) = map(int, input().split())\n    print(max(0, 1 + moves - moves_to_build(h)))", "from math import ceil\n\ndef moves_to_build(h):\n    moves = 1\n    while h > 1:\n        h = ceil(h / 2)\n        moves += 1\n    return moves\nT = int(input())\nfor i in range(T):\n    (h, moves) = map(int, input().split())\n    print(max(0, 1 + moves - moves_to_build(h)))", "import math\nfor _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    m = math.ceil(math.log2(n)) + 1\n    print(max(0, x - m + 1))", "from sys import stdin\nfrom collections import Counter\n\ndef building_tower():\n    (x, m) = map(int, stdin.readline().strip().split(' '))\n    temp = 2\n    towers = 0\n    while temp <= x:\n        temp <<= 1\n        towers += 1\n    temp /= 2\n    temp2 = towers + 1\n    if temp2 > m:\n        print(0)\n        return\n    if temp == x:\n        print(1 + (m - temp2))\n    else:\n        print(m - temp2)\nt = int(stdin.readline().strip())\nwhile t > 0:\n    building_tower()\n    t -= 1", "import math\nfor tastcas in range(int(input())):\n    (x, m) = list(map(int, input().split()))\n    if x == 1:\n        print(m)\n        continue\n    c = int(math.log(x - 1) / math.log(2)) + 1\n    if c > m:\n        print(0)\n    else:\n        print(m - c)", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    b = 1\n    m -= 1\n    if m == 0 and x > 1:\n        print(0)\n        continue\n    while b < x and m > 0:\n        b *= 2\n        m -= 1\n    if b >= x and m >= 0:\n        print(m + 1)\n    else:\n        print(0)", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    a = 0\n    while 1:\n        if x <= pow(2, a):\n            break\n        a += 1\n    if a > m:\n        print(0)\n    else:\n        print(m - a)", "import sys, os\nfrom sys import stdin, stdout\nio_path = '/Users/kunaldubey/Projects/competitve-programming/IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (x, m) = get_ints()\n    blocks = 1\n    initial_height = 0\n    operation = 0\n    while initial_height < x:\n        initial_height = pow(2, operation)\n        operation += 1\n    if operation <= m:\n        print(m - operation + 1)\n    else:\n        print(0)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = '/Users/kunaldubey/Projects/competitve-programming/IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (x, m) = get_ints()\n    blocks = 1\n    initial_height = 0\n    operation = 0\n    while initial_height < x:\n        initial_height = pow(2, operation)\n        operation += 1\n    if operation <= m:\n        print(m - operation + 1)\n    else:\n        print(0)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = '/Users/kunaldubey/Projects/competitve-programming/IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (x, m) = get_ints()\n    blocks = 1\n    initial_height = 0\n    operation = 0\n    while initial_height < x:\n        initial_height = pow(2, operation)\n        operation += 1\n    if operation <= m:\n        print(m - operation + 1)\n    else:\n        print(0)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = '/Users/kunaldubey/Projects/competitve-programming/IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (x, m) = get_ints()\n    blocks = 1\n    initial_height = 0\n    operation = 0\n    while initial_height < x:\n        initial_height = pow(2, operation)\n        operation += 1\n    if operation <= m:\n        print(m - operation + 1)\n    else:\n        print(0)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = '/Users/kunaldubey/Projects/competitve-programming/IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (x, m) = get_ints()\n    blocks = 1\n    initial_height = 0\n    operation = 0\n    while initial_height < x:\n        initial_height = pow(2, operation)\n        operation += 1\n    if operation <= m:\n        print(m - operation + 1)\n    else:\n        print(0)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = '/Users/kunaldubey/Projects/competitve-programming/IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (x, m) = get_ints()\n    blocks = 1\n    initial_height = 0\n    operation = 0\n    while initial_height < x:\n        initial_height = pow(2, operation)\n        operation += 1\n    if operation <= m:\n        print(m - operation + 1)\n    else:\n        print(0)\n    test_cases -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = '/Users/kunaldubey/Projects/competitve-programming/IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    (x, m) = get_ints()\n    blocks = 1\n    initial_height = 0\n    operation = 0\n    while initial_height < x:\n        initial_height = pow(2, operation)\n        operation += 1\n    if operation <= m:\n        print(m - operation + 1)\n    else:\n        print(0)\n    test_cases -= 1", "import math\nfor t in range(int(input())):\n    (x, m) = map(int, input().split())\n    n = math.ceil(math.log(x, 2))\n    if n > m:\n        print(0)\n    else:\n        print(m - n)", "import math\ntc = int(input())\nfor e in range(tc):\n    l = input().split(' ')\n    l1 = int(l[1])\n    logx = math.log(int(l[0]), 2)\n    if logx >= l1:\n        print(0)\n        continue\n    if logx == int(logx):\n        print(int(l[1]) - int(logx))\n        continue\n    print(int(l[1]) - int(logx) - 1)", "for i in range(int(input())):\n    (x, m) = map(int, input().split())\n    i = 0\n    mh = 0\n    while i < m:\n        if 2 ** i >= x:\n            mh = 1\n            i += 1\n            break\n        i += 1\n    print(mh + m - i)", "import math\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    logval = math.log(x, 2)\n    steps = int(logval) + 1\n    ans = m - steps\n    if ans >= 0:\n        if int(logval) - logval == 0:\n            ans += 1\n    else:\n        ans = 0\n    print(ans)", "import math, os, io, heapq\nfrom functools import reduce\nfrom sys import stdin, stdout\nfrom collections import Counter, deque, defaultdict\nfrom itertools import product\nimport bisect\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    (x, m) = getList()\n    x = int(x)\n    first = x.bit_length() + (x ^ 1 << x.bit_length() - 1 > 0)\n    if first > m:\n        return 0\n    return m - first + 1\nfor _ in range(getInt()):\n    print(solve())", "import math\nfor _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    m = math.ceil(math.log2(n)) + 1\n    print(max(0, x - m + 1))", "def solve():\n    (X, M) = map(int, input().split())\n    blocks = 1\n    while blocks < X and M > 0:\n        M -= 1\n        blocks *= 2\n    return M\nt = int(input())\nfor _ in range(t):\n    print(solve())", "def solve():\n    (X, M) = map(int, input().split())\n    blocks = 1\n    while blocks < X and M > 0:\n        blocks *= 2\n        M -= 1\n    if blocks < X:\n        return 0\n    return M\nt = int(input())\nfor _ in range(t):\n    print(solve())", "import math\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    n = math.ceil(math.log2(x)) + 1\n    if n > m:\n        print(0)\n    else:\n        print(m - n + 1)", "from math import log2\n\ndef solve():\n    (H, M) = map(int, input().split())\n    ops = int(log2(H))\n    if pow(2, ops) < H:\n        ops += 1\n    ops += 1\n    if ops > M:\n        print(0)\n        return\n    print(M - ops + 1)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import log2\n\ndef solve():\n    (H, M) = map(int, input().split())\n    ops = int(log2(H))\n    if pow(2, ops) < H:\n        ops += 1\n    ops += 1\n    if ops > M:\n        print(0)\n        return\n    if ops == M:\n        print(1)\n        return\n    print(M - ops + 1)\nt = int(input())\nfor _ in range(t):\n    solve()", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    (x, m) = map(int, input().split())\n    steps = math.ceil(math.log2(x) + 1)\n    if steps > m:\n        print(0)\n    else:\n        print(m - steps + 1)", "import math\nt = int(input())\nwhile t != 0:\n    (x, m) = [int(i) for i in input().split()]\n    y = math.ceil(math.log2(x)) + 1\n    if m < y:\n        print('0')\n    else:\n        print(m - y + 1)\n    t -= 1", "import math\nt = int(input())\nwhile t != 0:\n    (x, m) = [int(i) for i in input().split()]\n    y = math.ceil(math.log2(x)) + 1\n    if m < y:\n        print('0')\n    else:\n        print(m - y + 1)\n    t -= 1", "t = int(input())\nfor T in range(t):\n    (X, M) = map(int, input().split())\n    H = 0\n    I = 1\n    R = 0\n    K = M + 1\n    while K > 0:\n        if X > H:\n            H += I\n            I = H\n        else:\n            break\n        K -= 1\n    R += K\n    print(R)", "import math\nt = int(input())\nfor _ in range(t):\n    (x, m) = map(int, input().split())\n    c = math.ceil(math.log2(x)) + 1\n    if m < c:\n        print(0)\n    else:\n        print(m - c + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    (x, m) = map(int, input().split())\n    c = math.ceil(math.log2(x)) + 1\n    if m < c:\n        print(0)\n    else:\n        print(m - c + 1)", "import math\n\ndef solve_TOWERTOP(x: int, m: int):\n    inv = 1\n    to_get_to_x_height = math.ceil(math.log2(x))\n    if to_get_to_x_height > m:\n        return 0\n    return m - to_get_to_x_height\nT = int(input())\nfor i in range(T):\n    (x, m) = tuple(map(int, input().split()))\n    print(solve_TOWERTOP(x, m))", "t = int(input())\nfor _ in range(t):\n    (x, m) = list(map(int, input().split()))\n    rem = 1\n    towers = 0\n    h = 0\n    while h < x and m > 0:\n        k = min(x - h, rem)\n        h += k\n        rem = h\n        m -= 1\n    if m == 0 and h < x:\n        ans = 0\n    else:\n        towers += 1\n        ans = towers + m\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    [s1, s2] = input().split()\n    x = int(s1)\n    m = int(s2)\n    op = 1\n    h = 1\n    while h < x:\n        h *= 2\n        op += 1\n    if op > m:\n        print(0)\n    else:\n        print(m - op + 1)", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(inp())):\n    (x, m) = map(int, inp().split())\n    c = 1\n    p = 1\n    while x > p:\n        c += 1\n        p *= 2\n    m = m - c\n    print(m + 1) if m >= 0 else print(0)", "import math\nt = int(input())\nwhile t != 0:\n    (x, m) = map(int, input().split())\n    if x == 0:\n        print(0)\n        t = t - 1\n        continue\n    a = math.ceil(math.log(x, 2))\n    ans = m - a\n    if m > a:\n        print(ans)\n    else:\n        print(0)\n    t -= 1", "from math import log2, ceil\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    n = ceil(log2(x)) + 1\n    if m < n:\n        print(0)\n    else:\n        print(m - n + 1)", "T = int(input())\nfor tx in range(T):\n    (X, M) = map(int, input().split())\n    if X == 1:\n        print(M)\n    else:\n        print(max(0, M - (X - 1).bit_length()))", "import math\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    c = math.ceil(math.log2(x)) + 1\n    if c > y:\n        print(0)\n    else:\n        print(y - c + 1)", "try:\n    T = int(input())\n    XM = []\n    for _ in range(T):\n        (x, y) = map(int, input().split())\n        XM.append([x, y])\n    for element in XM:\n        expo = len(bin(element[0])) - 2\n        if element[0] == pow(2, expo - 1):\n            reqOperations = expo\n        else:\n            reqOperations = expo + 1\n        temp = element[1] - reqOperations\n        if temp >= 0:\n            print(temp + 1)\n        else:\n            print(0)\nexcept EOFError():\n    pass", "import math\nt = int(input())\nfor i in range(t):\n    l = [int(n) for n in input().split()]\n    x = l[0]\n    m = l[1]\n    c = math.ceil(math.log2(x)) + 1\n    if c > m:\n        print(0)\n    else:\n        print(m - c + 1)", "import math\nt = int(input())\nfor i in range(t):\n    l = [int(n) for n in input().split()]\n    x = l[0]\n    m = l[1]\n    c = math.ceil(math.log2(x)) + 1\n    if c > m:\n        print(0)\n    else:\n        print(m - c + 1)", "import math, bisect, heapq, random, sys, itertools\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np = 10 ** 9 + 7\nfor t in range(int(input())):\n    (n, m) = ints()\n    x = n\n    c = -1\n    while x:\n        c += 1\n        x //= 2\n    if 2 ** c != n:\n        c += 1\n    if c > m:\n        print(0)\n    else:\n        print(m - c)", "import math\nt = int(input())\nfor z in range(t):\n    (h, m) = map(int, input().split())\n    k = math.ceil(math.log2(h)) + 1\n    if k > m:\n        print(0)\n    else:\n        print(m - k + 1)", "import math\nt = int(input())\nwhile t > 0:\n    (x, m) = map(int, input().split())\n    y = int(math.log(x, 2))\n    if 2 ** y != x:\n        y += 1\n    if y >= m:\n        print(0)\n    else:\n        print(m - y)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    a = math.ceil(math.log2(x)) + 1\n    if m < a:\n        print(0)\n    elif m == a:\n        print(1)\n    else:\n        print(m - a + 1)", "T = int(input())\nfor i in range(T):\n    arr = list(map(int, input().split()))\n    build = 0\n    height = arr[0]\n    moves = arr[1]\n    inv = 1\n    xh = 0\n    while moves > 0:\n        moves -= 1\n        xh += min(height - xh, inv)\n        inv -= min(height - xh, inv)\n        inv += xh\n        if xh == height:\n            build += 1\n            xh = 0\n        if inv >= height:\n            break\n    build += moves\n    print(str(build))", "from collections import defaultdict\nimport heapq\nimport math\nfrom math import sqrt\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = 0\n    if x == 0:\n        print(0)\n        continue\n    h = 10000\n    while l <= h:\n        m = (l + h) // 2\n        if pow(2, m) >= n:\n            ans = m\n            h = m - 1\n        else:\n            l = m + 1\n    ans += 1\n    if x - ans + 1 < 0:\n        print(0)\n    else:\n        print(x - ans + 1)", "import math\nt = int(int(input()))\nfor i in range(t):\n    (x, m) = map(int, input().split())\n    if m == 0:\n        print(0)\n    else:\n        count = 0\n        for i in range(1, m + 1):\n            power = math.pow(2, i - 1)\n            if power >= x:\n                d = m - i\n                count += d + 1\n                break\n        print(count)", "import math\nt = int(input())\ntest = []\nfor i in range(t):\n    v = [int(j) for j in input().split()]\n    test.append(v)\nfor i in test:\n    h = i[0]\n    x = i[1]\n    c = math.ceil(math.log2(h)) + 1\n    if x < c:\n        print(0)\n    elif x == c:\n        print(1)\n    else:\n        print(x - c + 1)", "import math\nt = int(input())\nwhile t > 0:\n    (x, m) = map(int, input().split())\n    onetow = math.ceil(math.log2(x)) + 1\n    if onetow > m:\n        print(0)\n    else:\n        print(1 + (m - onetow))\n    t -= 1", "from math import log2\nfrom math import ceil\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    res = 10 ** 10\n    if m < ceil(log2(x)) + 1:\n        res = 0\n    else:\n        res = m - ceil(log2(x))\n    print(res)", "import math\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    req = math.ceil(math.log(x, 2)) + 1\n    if m < req:\n        print(0)\n    elif m == req:\n        print(1)\n    else:\n        print(m - req + 1)", "import math\nT = int(input())\nfor i in range(T):\n    (x, m) = [int(X) for X in input().split()]\n    b = math.log(x, 2)\n    if b == int(b):\n        a = int(b) + 1\n    else:\n        a = int(b) + 2\n    if a > m:\n        print(0)\n    else:\n        print(1 + m - a)", "from math import log, ceil\ntest = int(input())\nfor _ in range(test):\n    (H, S) = list(map(int, input().split()))\n    H_log = log(H, 2)\n    base_2 = ceil(H_log)\n    if base_2 > S - 1:\n        print('0')\n    elif base_2 == S - 1:\n        print('1')\n    else:\n        print(S - base_2)", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    i = 0\n    while 2 ** i < x:\n        i += 1\n    if m < i:\n        print(0)\n    else:\n        print(m - i)", "from math import log2, ceil\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    ans = m - ceil(log2(x))\n    if ans > 0:\n        print(ans)\n    else:\n        print(0)", "t = int(input())\nfor T in range(t):\n    (X, M) = map(int, input().split())\n    H = 0\n    I = 1\n    R = 0\n    K = M + 1\n    while K > 0:\n        if X > H:\n            H += I\n            I = H\n        else:\n            break\n        K -= 1\n    R += K\n    print(R)", "for _ in range(int(input())):\n    (x, n) = map(int, input().split())\n    s = bin(x)\n    l = len(s) - 2\n    if x == 1:\n        print(n)\n    elif s.count('1') == 1:\n        if n < l:\n            print(0)\n        else:\n            print(n - l + 1)\n    else:\n        l = l + 1\n        if n < l:\n            print(0)\n        else:\n            print(n - l + 1)", "import math\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    temp = math.ceil(math.log2(n)) + 1\n    if x < temp:\n        print(0)\n    else:\n        print(x - temp + 1)", "import math\nfor _ in range(int(input())):\n    (x, m) = [int(x) for x in input().split()]\n    n = math.ceil(math.log(x, 2)) + 1\n    if m < n:\n        print(0)\n    else:\n        print(m - n + 1)", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    m = math.ceil(math.log2(a) + 1)\n    if b < m:\n        print(0)\n    else:\n        print(b - m + 1)", "import math\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    k = math.log(x, 2)\n    k = math.ceil(k)\n    if m < k:\n        print(0)\n    else:\n        print(m - k)", "from math import log2, ceil\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    min_m = ceil(log2(x) + 1)\n    if m < min_m:\n        print(0)\n    else:\n        print(m - min_m + 1)", "from math import log2, ceil\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    min_m = ceil(log2(x) + 1)\n    if m < min_m:\n        print(0)\n    else:\n        print(m - min_m + 1)", "import math\nfor _ in range(int(input())):\n    (X, M) = map(int, input().strip().split())\n    count = 0\n    N = math.ceil(math.log2(X)) + 1\n    if M < N:\n        print(0)\n    else:\n        print(M - N + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    (X, M) = map(int, input().split())\n    y = math.ceil(math.log(X, 2))\n    if M < math.log(X, 2) + 1:\n        print(0)\n    else:\n        print(M - y)", "import math\nT = int(input())\nfor _ in range(T):\n    (X, M) = map(int, input().split(' '))\n    n = math.ceil(math.log2(X)) + 1\n    if M < n:\n        print(0)\n    else:\n        print(M - n + 1)", "import sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nfrom math import log\nfrom math import gcd\nfrom math import atan2, acos\nfrom random import randint\nsa = lambda : input_()\nsb = lambda : int(input_())\nsc = lambda : input_().split()\nsd = lambda : list(map(int, input_().split()))\nsflo = lambda : list(map(float, input_().split()))\nse = lambda : float(input_())\nsf = lambda : list(input_())\nflsh = lambda : sys.stdout.flush()\nmod = 10 ** 9 + 7\nmod1 = 998244353\ngp = []\ncost = []\ndp = []\nmx = []\nans1 = []\nans2 = []\nspecial = []\nspecnode = []\na = 0\nkthpar = []\n\ndef dfs2(root, par):\n    if par != -1:\n        dp[root] = dp[par] + 1\n    for i in range(1, 20):\n        if kthpar[root][i - 1] != -1:\n            kthpar[root][i] = kthpar[kthpar[root][i - 1]][i - 1]\n    for child in gp[root]:\n        if child == par:\n            continue\n        kthpar[child][0] = root\n        dfs(child, root)\nans = 0\na = []\n(n, k) = (0, 0)\nb = []\nvis = []\ntot = 0\ntime = []\ntime1 = []\nadj = []\nmx = -1\neps = 1e-07\ngp = []\nans = []\n\ndef update_it(bit, i, val):\n    n = len(bit)\n    while i < n:\n        bit[i] += val\n        i += i & -i\n\ndef get_ans(bit, i):\n    n = len(bit)\n    tot = 0\n    while i > 0:\n        tot += bit[i]\n        i -= i & -i\n    return tot\n\ndef flip(a, l, r):\n    for i in range(l, r):\n        a[i] = '0' if a[i] == '1' else '1'\n    return\n\ndef hnbhai(tc):\n    (x, m) = sd()\n    req = 1\n    sz = 1\n    tot = 1\n    while tot < x:\n        tot += sz\n        sz *= 2\n        req += 1\n    left = m - req\n    if left < 0:\n        print(0)\n        return\n    print(left + 1)\nfor _ in range(sb()):\n    hnbhai(_ + 1)", "import math\nfor _ in range(int(input())):\n    arr = [int(i) for i in input().split()]\n    n = math.ceil(math.log(arr[0], 2)) + 1\n    if arr[1] < n:\n        print(0)\n    else:\n        print(arr[1] - n + 1)", "t = int(input())\nfor _ in range(t):\n    (x, m) = map(int, input().split())\n    h = 0\n    prev = 1\n    c = 0\n    while h < x and m > 0:\n        h += prev\n        prev = h\n        m -= 1\n    if h >= x:\n        h = 0\n        c += 1\n    print(c + m)", "import sys\nfrom math import sqrt, ceil, floor, gcd\nfrom collections import Counter, defaultdict\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef get_flo():\n    return map(float, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve():\n    (x, m) = get_int()\n    h = 0\n    prev = 1\n    c = 0\n    while h < x and m > 0:\n        h += prev\n        prev = h\n        m -= 1\n    if h >= x:\n        h = 0\n        c += 1\n    print(c + m)\nT = 1\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    k = 0\n    (x, m) = map(int, input().split())\n    n = math.ceil(math.log(x, 2)) + 1\n    if m < n:\n        print(k)\n    else:\n        print(m - n + 1)", "t = int(input())\nfor i in range(t):\n    [x, m] = list(map(int, input().split()))\n    c = 1\n    f = 0\n    cou = 0\n    while x != f and m != 0:\n        if f + c < x:\n            f = f + c\n            c = f\n            m -= 1\n        elif f + c == x:\n            cou = 1\n            f = x\n            c = x\n            m -= 1\n        else:\n            cou = 1\n            f = x\n            c = x\n            m -= 1\n    if m > 0:\n        cou += m\n    print(cou)", "import math\nfor i in range(int(input())):\n    (height, operations) = [int(z) for z in input().split()]\n    base_operation_cost = math.ceil(math.log(height, 2))\n    if operations < base_operation_cost:\n        print(0)\n    else:\n        print(operations - base_operation_cost)", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    inv = 1\n    ops = 0\n    blocks = 0\n    while blocks < x:\n        blocks += inv\n        inv = blocks\n        ops += 1\n    if ops > m:\n        print(0)\n    else:\n        print(1 + m - ops)", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    (h, op) = (1, 1)\n    while h < x:\n        h *= 2\n        op += 1\n    if op > m:\n        print(0)\n    elif op == m:\n        print(1)\n    else:\n        print(m - op + 1)", "t = int(input())\nwhile t:\n    (x, m) = map(int, input().split(' '))\n    if m == 0:\n        print(0)\n        t -= 1\n        continue\n    (h, m) = (1, m - 1)\n    while m != 0 and h < x:\n        h *= 2\n        m -= 1\n    if h >= x:\n        print(1 + m)\n    else:\n        print(0)\n    t -= 1", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    inv = 1\n    ops = 0\n    blocks = 0\n    while blocks < x:\n        blocks += inv\n        inv = min(blocks, x - blocks)\n        ops += 1\n    if ops > m:\n        print(0)\n    else:\n        print(1 + m - ops)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 1\n    i = 0\n    k = 0\n    while True:\n        if 2 ** i >= a:\n            k = i\n            break\n        i += 1\n    if k < b:\n        print(b - k)\n    else:\n        print(0)", "from math import log, ceil\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    op = ceil(log(x, 2)) + 1\n    op = m - op\n    if op < 0:\n        print(0)\n    else:\n        print(op + 1)", "t = int(input())\nwhile t > 0:\n    (x, m) = map(int, input().split())\n    ht = 1\n    moves = 1\n    while ht < x:\n        moves += 1\n        ht *= 2\n    if moves > m:\n        print('0')\n    else:\n        print(1 + (m - moves))\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    (x, m) = map(int, input().split())\n    y = 1\n    o = 1\n    while y < x:\n        y = y * 2\n        o += 1\n    if o > m:\n        print(0)\n    elif o == m:\n        print(1)\n    else:\n        print(m - o + 1)", "for i in range(int(input())):\n    (x, m) = map(int, input().split())\n    l = 1\n    m -= 1\n    while l < x:\n        l = l * 2\n        m -= 1\n    if m < 0:\n        print(0)\n    else:\n        print(m + 1)", "for _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    inv = 1\n    count = curr_height = steps = 0\n    while curr_height < x:\n        curr_height += min(inv, x - curr_height)\n        inv = inv - min(inv, x - curr_height) + curr_height\n        steps += 1\n    if steps > m:\n        print(0)\n    else:\n        print(m - steps + 1)", "import math\nt = int(input())\nfor ii in range(t):\n    (x, m) = list(map(int, input().split()))\n    a = math.ceil(math.log(x, 2)) + 1\n    if a > m:\n        print(0)\n    else:\n        print(m - a + 1)", "try:\n    x = int(input())\n    for _ in range(x):\n        ip = input()\n        (x, m) = list(map(int, ip.split()))\n        h = 1\n        mo = 1\n        while h < x:\n            h = h * 2\n            mo += 1\n        if mo > m:\n            print(0)\n        else:\n            print(1 + (m - mo))\nexcept:\n    pass", "from math import log, ceil\ntt = int(input())\nfor i in range(tt):\n    (x, m) = tuple(map(int, input().split()))\n    steps = ceil(log(x, 2)) + 1\n    if steps > m:\n        print(0)\n    else:\n        print(m - steps + 1)", "import math\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = math.ceil(math.log2(n))\n    if m < a:\n        print(0)\n    else:\n        print(m - a)", "import math\nfor _ in range(int(input())):\n    (x, m) = map(int, input().split())\n    operations = math.ceil(math.log(x, 2))\n    if operations > m:\n        print(0)\n    elif operations <= m:\n        print(m - operations)"]