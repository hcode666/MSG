["def solve(n, k, arr):\n\n    def moves_needed(m):\n        offset = 0\n        for i in range(m, -1, -1):\n            num = (arr[i] + offset) % 10\n            if num != 0:\n                offset += 10 - num\n        return offset\n    l = 0\n    r = n - 1\n    while l < r:\n        m = (l + r) // 2\n        if moves_needed(m) > k:\n            r = m\n        else:\n            l = m + 1\n    if l == n - 1 and moves_needed(n - 1) <= k:\n        return n\n    return l\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input()))\n    print(solve(n, k, arr))", "def solve(n, k, arr):\n\n    def moves_needed(m):\n        offset = 0\n        for i in range(m, -1, -1):\n            num = (arr[i] + offset) % 10\n            if num != 0:\n                offset += 10 - num\n        return offset\n    l = 0\n    r = n - 1\n    while l < r:\n        m = (l + r) // 2\n        if moves_needed(m) > k:\n            r = m\n        else:\n            l = m + 1\n    if l == n - 1 and moves_needed(n - 1) <= k:\n        return n\n    return l\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input()))\n    print(solve(n, k, arr))", "def solve(n, k, arr):\n\n    def moves_needed(m):\n        offset = 0\n        for i in range(m, -1, -1):\n            num = (arr[i] + offset) % 10\n            if num != 0:\n                offset += 10 - num\n        return offset\n    l = 0\n    r = n - 1\n    while l < r:\n        m = (l + r) // 2\n        if moves_needed(m) > k:\n            r = m\n        else:\n            l = m + 1\n    if l == n - 1 and moves_needed(n - 1) <= k:\n        return n\n    return l\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input()))\n    print(solve(n, k, arr))", "def solve(n, k, arr):\n\n    def moves_needed(m):\n        offset = 0\n        for i in range(m, -1, -1):\n            num = (arr[i] + offset) % 10\n            if num != 0:\n                offset += 10 - num\n        return offset\n    l = 0\n    r = n - 1\n    while l < r:\n        m = (l + r) // 2\n        if moves_needed(m) > k:\n            r = m\n        else:\n            l = m + 1\n    if l == n - 1 and moves_needed(n - 1) <= k:\n        return n\n    return l\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input()))\n    print(solve(n, k, arr))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(input())\n    (low, high) = (0, n + 1)\n    while high - low > 1:\n        mid = low + (high - low) // 2\n        ck = 0\n        for i in range(mid - 1, -1, -1):\n            temp = (ck + int(l[i])) % 10\n            if temp != 0:\n                ck += 10 - temp\n        if ck <= k:\n            low = mid\n        else:\n            high = mid\n    print(low)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = [k]\n    m = int(k / 10)\n    t = 0\n    for i in range(n):\n        remainder = a[i] % 10\n        diff = 10 - int(s[i])\n        if remainder < diff:\n            num = diff + (m - 1) * 10\n            m = int(num / 10)\n            if num < 0:\n                t = 1\n                break\n            else:\n                a.append(num)\n        else:\n            num = diff + m * 10\n            a.append(num)\n            m = int(num / 10)\n    if t == 1:\n        print(i)\n    else:\n        print(n)", "def snek(x):\n    f = 0\n    for i in range(len(x) - 1, -1, -1):\n        z = int(x[i])\n        z = (z + f % 10) % 10\n        f += (10 - z) % 10\n    return f\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    l = 0\n    h = len(s) - 1\n    r = False\n    while l <= h:\n        m = (l + h) // 2\n        f = snek(s[:m + 1])\n        if f > k:\n            h = m - 1\n        elif f <= k:\n            l = m + 1\n    if not r:\n        print(h + 1)", "def calculate_flips(ss):\n    flips = 0\n    for i in range(len(ss) - 1, -1, -1):\n        num = int(ss[i])\n        num = (num + flips % 10) % 10\n        flips += (10 - num) % 10\n    return flips\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    lo = 0\n    hi = len(s) - 1\n    res = False\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        flips = calculate_flips(s[:mid + 1])\n        if flips > k:\n            hi = mid - 1\n        elif flips <= k:\n            lo = mid + 1\n    if not res:\n        print(hi + 1)", "GI = lambda : int(input())\nGIS = lambda : map(int, input().split())\nLGIS = lambda : list(GIS())\n\ndef main():\n    for t in range(GI()):\n        (n, k) = GIS()\n        s = input()\n        print(solve(n, k, s))\n\ndef solve(n, k, s):\n    l = -1\n    r = n - 1\n    while l < r:\n        m = (l + r + 1) // 2\n        if can_prefix_from(s, m, k):\n            l = m\n        else:\n            r = m - 1\n    return l + 1\n\ndef can_prefix_from(s, i, k):\n    rotations = 0\n    for i in range(i, -1, -1):\n        rotated_value = (int(s[i]) + rotations) % 10\n        need_to_rotate = (10 - rotated_value) % 10\n        if need_to_rotate > k:\n            return False\n        k -= need_to_rotate\n        rotations += need_to_rotate\n    return True\nmain()", "GI = lambda : int(input())\nGIS = lambda : map(int, input().split())\nLGIS = lambda : list(GIS())\n\ndef main():\n    for t in range(GI()):\n        (n, k) = GIS()\n        s = input()\n        print(solve(n, k, s))\n\ndef solve(n, k, s):\n    l = 0\n    r = n - 1\n    while l < r:\n        m = (l + r + 1) // 2\n        if can_prefix_from(s, m, k):\n            l = m\n        else:\n            r = m - 1\n    if l > 0 or can_prefix_from(s, 0, k):\n        l += 1\n    return l\n\ndef can_prefix_from(s, i, k):\n    rotations = 0\n    for i in range(i, -1, -1):\n        rotated_value = (int(s[i]) + rotations) % 10\n        need_to_rotate = (10 - rotated_value) % 10\n        if need_to_rotate > k:\n            return False\n        k -= need_to_rotate\n        rotations += need_to_rotate\n    return True\nmain()", "import math\n\ndef calc(s, n, k):\n    ops = 0\n    ii = n - 1\n    while ii >= 0:\n        if (int(s[ii]) + ops) % 10 != 0:\n            ops += 10 - (int(s[ii]) + ops) % 10\n        ii -= 1\n    return ops\n\ndef main():\n    t = int(input())\n    while t > 0:\n        (n, k) = map(int, input().split())\n        s = input()\n        l = 0\n        h = n + 1\n        while h - l > 1:\n            mid = (l + h) // 2\n            val = calc(s, mid, k)\n            if val <= k:\n                l = mid\n            else:\n                h = mid\n        print(l)\n        t -= 1\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    ans = 0\n    for c in s:\n        req = (10 - int(c)) % 10\n        if req > k:\n            break\n        ans += 1\n        k = int((k - req) / 10) * 10 + req\n    print(ans)", "def costf(x):\n    add = 0\n    x1 = 0\n    while x >= 0:\n        if (int(s[x]) + add) % 10 == 0:\n            x -= 1\n        else:\n            x1 = x1 + (10 - (int(s[x]) + add) % 10)\n            add += 10 - (int(s[x]) + add) % 10\n            x -= 1\n    return x1\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    lp = 0\n    l = 0\n    h = n - 1\n    while l <= h:\n        m = (l + h) // 2\n        cost = costf(m)\n        if cost > k:\n            h = m - 1\n        elif cost <= k:\n            lp = m + 1\n            l = m + 1\n    print(lp)", "def countOps(S, L):\n    ret = 0\n    for i in range(L - 1, -1, -1):\n        ret += (10 - (int(S[i]) + ret) % 10) % 10\n    return ret\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        (N, K) = [int(w) for w in input().split()]\n        S = input().strip()\n        (lo, hi) = (0, N)\n        while hi - lo > 1:\n            mid = (lo + hi) // 2\n            if countOps(S, mid) <= K:\n                lo = mid\n            else:\n                hi = mid - 1\n        if countOps(S, hi) > K:\n            hi = lo\n        print(hi)\nmain()", "from collections import Counter\nfrom math import ceil, floor, log, gcd\nimport bisect as bs\nimport sys\ninput = sys.stdin.readline\ninp_lis = lambda : list(map(int, input().split()))\ninp_multi = lambda : map(int, input().split())\ninp_int = lambda : int(input().strip())\nfor _ in range(int(input().strip())):\n    (n, k) = inp_multi()\n    s = input().strip()\n    i = 0\n    while i < n:\n        t = int(s[i])\n        while k > 0 and (k + t) % 10 != 0:\n            k -= 1\n        if k == 0:\n            if t == 0:\n                i += 1\n                continue\n            else:\n                break\n        i += 1\n    print(i)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if n == 1:\n        ans = (10 - int(s[0])) % 10\n        if ans <= k:\n            print(1)\n        else:\n            print(0)\n    elif n == 2:\n        a1 = (10 - int(s[1])) % 10\n        b = (int(s[0]) + a1) % 10\n        a2 = (10 - b) % 10\n        if a1 + a2 <= k:\n            print(2)\n        else:\n            a3 = (10 - int(s[0])) % 10\n            if a3 <= k:\n                print(1)\n            else:\n                print(0)\n    else:\n        li = []\n        val = (10 - int(s[0])) % 10\n        li.append(val)\n        a1 = (10 - int(s[1])) % 10\n        b = (int(s[0]) + a1) % 10\n        a2 = (10 - b) % 10\n        li.append(a1 + a2)\n        for i in range(2, n):\n            c1 = (10 - int(s[i])) % 10\n            d = (int(s[i - 1]) + c1) % 10\n            c2 = (10 - d) % 10\n            c3 = a2\n            li.append(c1 + c2 + c3)\n            a2 = c2 + c3\n        count = 0\n        for i in range(len(li)):\n            if li[i] <= k:\n                count = count + 1\n            else:\n                break\n        print(count)", "def f2(z, s, t=0):\n    for i in range(z, -1, -1):\n        v = (int(s[i]) + t) % 10\n        t += 10 - v if v != 0 else 0\n    return t\nfor tcs in range(int(input())):\n    (n, k) = map(int, input().split())\n    wrd = list(map(int, list(input())))\n    (a, x, y) = (0, 0, n - 1)\n    while x <= y:\n        z = x + (y - x) // 2\n        if f2(z, wrd) <= k:\n            a = z + 1\n            x = a\n        else:\n            y = z - 1\n    print(a)", "def f(m, x):\n    suma = 0\n    for i in range(m, -1, -1):\n        v = (int(s[i]) + suma) % 10\n        if v == 0:\n            continue\n        suma += 10 - v\n    return suma\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    r = n - 1\n    rj = 0\n    while l <= r:\n        mid = (l + r) // 2\n        if f(mid, s) > k:\n            r = mid - 1\n        else:\n            rj = mid + 1\n            l = mid + 1\n    print(rj)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 0\n    for i in s:\n        x = (10 - int(i)) % 10\n        t = k - x\n        if t < 0:\n            break\n        k = t // 10 * 10 + x\n        c += 1\n    print(c)", "def solver(n, k, s):\n    l = 0\n    r = n + 1\n    while l < r - 1:\n        mid = (l + r) // 2\n        count = 0\n        for i in range(mid - 1, -1, -1):\n            req = (int(s[i]) + count) % 10\n            if req != 0:\n                count += 10 - req\n        if count <= k:\n            l = mid\n        else:\n            r = mid\n    print(l)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = list(map(int, input().split(' ')))\n    s = input()\n    solver(n, k, s)", "def f(a, b):\n    c = a % 10\n    b += a\n    b %= 10\n    if b == 0:\n        return 0\n    return 10 - b\n\ndef check(ar, l, p):\n    i = 0\n    for r in range(l, -1, -1):\n        j = f(i, ar[r])\n        if i + j > p:\n            return False\n        i += j\n    return True\nt = int(input())\nfor tt in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    aa = [int(a[i]) for i in range(n)]\n    o = 0\n    u = n - 1\n    ans = 0\n    while o <= u:\n        if check(aa, (o + u) // 2, k):\n            o = (o + u) // 2 + 1\n            ans = o\n        else:\n            u = (o + u) // 2 - 1\n    print(ans)", "case = int(input())\nfor r in range(case):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    count = 0\n    flag = 0\n    for i in s:\n        rem = (10 - int(i)) % 10\n        if k - rem < 0:\n            print(count)\n            flag = 1\n            break\n        k1 = (k - rem) // 10\n        val = 10 * k1 + rem\n        if k >= val:\n            k = val\n            count += 1\n        else:\n            print(count)\n            flag = 1\n            break\n    if flag == 0:\n        print(len(s))", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    for i in range(n):\n        x = int(s[i])\n        k -= (k % 10 + x) % 10\n        if k < 0:\n            break\n        else:\n            ans += 1\n    print(ans)", "try:\n\n    def binarysearch(string, K):\n        X = string[::-1]\n        s = 0\n        p = 0\n        for i in range(0, len(X)):\n            if i == 0:\n                item = (10 - int(X[i])) % 10\n                s = s + item\n            else:\n                item = (10 - (s % 10 + int(X[i])) % 10) % 10\n                s = s + item\n        return s\n    T = int(input())\n    for t in range(0, T):\n        (N, K) = map(int, input().split(' '))\n        S = input()\n        l = 0\n        r = len(S) - 1\n        ans = 0\n        mid = 0\n        while l <= r:\n            mid = (l + r) // 2\n            if binarysearch(S[0:mid + 1], K) <= K:\n                ans = mid + 1\n                l = mid + 1\n            else:\n                r = mid - 1\n        print(ans)\nexcept:\n    pass", "def check(len_tried, k, arr):\n    total_felt = 0\n    for j in range(len_tried - 1, -1, -1):\n        num = arr[j]\n        needed = (10 - (num + total_felt) % 10) % 10\n        if total_felt + needed > k:\n            return False\n        total_felt = total_felt + needed\n    return True\n\ndef solve(n, k, arr) -> int:\n    l = 0\n    r = n\n    while r - l > 1:\n        mid = (l + r) // 2\n        is_possible = check(mid, k, arr)\n        if is_possible:\n            l = mid\n        else:\n            r = mid\n    if check(r, k, arr):\n        return r\n    return l\nT = int(input())\nfor t in range(T):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in list(input())]\n    print(solve(n, k, arr))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    l = []\n    c = 0\n    for i in range(n):\n        l.append(int(s[i]))\n    ll = 0\n    for i in range(n):\n        if l[i] == 0:\n            ll = 0\n            c += 1\n            continue\n        if l[i] >= ll and ll != 0:\n            c += 1\n            ll = l[i]\n            continue\n        ll = l[i]\n        if k - 10 >= 0 and c != 0:\n            k = k - 10\n            c += 1\n        elif k - (10 - ll) >= 0 and c == 0:\n            k = k - (10 - ll)\n            c += 1\n        else:\n            break\n    print(c)", "from sys import stdin\n\ndef good_prefix(s, mid):\n    operations = 0\n    for i in range(mid - 1, -1, -1):\n        req = (operations + int(s[i])) % 10\n        if req != 0:\n            operations += 10 - req\n    return operations\n\ndef binary_search(s, low, high, k):\n    while low < high:\n        mid = low + (high - low) // 2\n        op = good_prefix(s, mid)\n        if op <= k:\n            low = mid + 1\n        else:\n            high = mid\n    return low - 1\nt = int(stdin.readline().strip())\nwhile t > 0:\n    (n, k) = list(map(int, stdin.readline().strip().split(' ')))\n    s = stdin.readline().strip()\n    low = 0\n    high = n + 1\n    result = binary_search(s, low, high, k)\n    print(result)\n    t -= 1", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    st = input()\n    low = 0\n    high = n + 1\n    while high - low > 1:\n        mid = (high + low) // 2\n        op = 0\n        for i in range(mid - 1, -1, -1):\n            req = (op + int(st[i])) % 10\n            if req != 0:\n                op = op + 10 - req\n        if op <= k:\n            low = mid\n        elif op > k:\n            high = mid\n    print(low)", "def zero(m, s):\n    z = 0\n    for i in range(m + 1):\n        b = (int(s[m - i]) - int('0') + z) % 10\n        if b == 0:\n            continue\n        z += 10 - b\n    return z\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    l = 0\n    r = n - 1\n    m = 0\n    while l <= r:\n        m = l + (r - l) // 2\n        if zero(m, s) > k:\n            r = m - 1\n        else:\n            ans = m + 1\n            l = m + 1\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n\n    def calc_val(x):\n        ans = 0\n        for i in range(len(x) - 1, -1, -1):\n            num = (int(x[i]) + ans) % 10\n            if num != 0:\n                req = 10 - num\n                ans += req\n        return ans\n    low = 0\n    high = len(s) + 1\n    while high - low > 1:\n        mid = (low + high) // 2\n        ops = calc_val(s[:mid])\n        if ops <= k:\n            low = mid\n        else:\n            high = mid\n    print(low)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    n += 1\n    low = 0\n    while n - low > 1:\n        mid = (low + n) // 2\n        operations = 0\n        for i in range(mid - 1, -1, -1):\n            w = (int(s[i]) + operations) % 10\n            if w != 0:\n                operations += 10 - w\n        if operations <= k:\n            low = mid\n        else:\n            n = mid\n    print(low)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    arr = -1\n    l = 0\n    b = (10 - int(s[0])) % 10\n    if k - b < 0:\n        print(0)\n        continue\n    m = (k - b) // 10\n    arr = b + m * 10\n    l += 1\n    for i in range(1, n):\n        b = (10 - int(s[i])) % 10\n        if arr - b < 0:\n            break\n        m = (arr + 10 - b) // 10\n        c = b + m * 10\n        if c >= 0 and c <= arr:\n            arr = c\n            l += 1\n        else:\n            m -= 1\n            while m >= 0:\n                c = b + m * 10\n                if c >= 0 and c <= arr:\n                    arr = c\n                    l += 1\n                    break\n                m -= 1\n    print(l)", "def func():\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    r = n - 1\n    ans = 0\n    while l <= r:\n        mid = (l + r) // 2\n        op = 0\n        for i in range(mid, -1, -1):\n            value = (ord(s[i]) - ord('0') + op) % 10\n            if value == 0:\n                continue\n            op += 10 - value\n        if op <= k:\n            l = mid + 1\n            ans = mid + 1\n        else:\n            r = mid - 1\n    return ans\nt = int(input())\nfor i in range(0, t):\n    print(func())", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    r = len(s) - 1\n    ans = 0\n\n    def calc(m):\n        add = 0\n        for i in range(m, -1, -1):\n            v = (ord(s[i]) - ord('0') + add) % 10\n            if v == 0:\n                continue\n            add += 10 - v\n        return add\n    while l <= r:\n        m = (l + r) // 2\n        if calc(m) > k:\n            r = m - 1\n        else:\n            ans = m + 1\n            l = m + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    r = len(s) - 1\n    ans = 0\n\n    def calc(m):\n        add = 0\n        for i in range(m, -1, -1):\n            v = (ord(s[i]) - ord('0') + add) % 10\n            if v == 0:\n                continue\n            add += 10 - v\n        return add\n    while l <= r:\n        m = (l + r) // 2\n        if calc(m) > k:\n            r = m - 1\n        else:\n            ans = m + 1\n            l = m + 1\n    print(ans)", "from sys import stdin, stdout\ninp_num = lambda : int(input())\ninp_lis = lambda : list(map(int, input().split()))\n\ndef cal(s, m):\n    tot = 0\n    for i in range(m, -1, -1):\n        n = (int(s[i]) + tot) % 10\n        if n == 0:\n            continue\n        tot = tot + (10 - n)\n    return tot\nfor _ in range(inp_num()):\n    (n, k) = map(int, input().split())\n    s = input()\n    an = 0\n    (st, en) = (0, n - 1)\n    while st <= en:\n        mid = (st + en) // 2\n        if cal(s, mid) > k:\n            en = mid - 1\n        else:\n            st = mid + 1\n            an = mid + 1\n    print(an)", "def bs(a, m, k):\n    (s, p) = (0, 0)\n    for i in range(m - 1, -1, -1):\n        x = (a[i] + p) % 10\n        y = (10 - x) % 10\n        s = s + y\n        p += y\n    if s <= k:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    a = [int(a[i]) for i in range(n)]\n    l = 0\n    h = n\n    while l <= h:\n        m = (l + h) // 2\n        if bs(a, m, k):\n            ans = m\n            l = m + 1\n        else:\n            h = m - 1\n    print(ans)", "t = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    a = list(input())\n    for i in range(len(a)):\n        a[i] = int(a[i])\n    h = 10 - a[0]\n    g = k\n    while g % 10 != h % 10 and g > 0:\n        g -= 1\n    c = 0\n    if g <= k:\n        for i in range(len(a)):\n            while g % 10 != (10 - a[i]) % 10 and g > 0:\n                g -= 1\n            if g > 0:\n                c += 1\n            else:\n                j = i\n                while j < len(a) and a[j] == 0:\n                    c += 1\n                    j += 1\n                break\n    print(c)", "import math\nt = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    for i in range(n):\n        rem = (10 - int(s[i])) % 10\n        if rem > k:\n            break\n        l += 1\n        k = (k - rem) // 10 * 10 + rem\n    print(l)", "from typing import List\n\ndef find_no_of_op(s: List[int], i):\n    count_op = 0\n    b = 0\n    while i != -1:\n        rem = (s[i] + b) % 10\n        a = (10 - rem) % 10\n        count_op += a\n        b += a\n        i -= 1\n    return count_op\n\ndef linear_search(A: list, k: int) -> int:\n    n = len(A)\n    ans = n\n    for i in range(0, n):\n        n_op = find_no_of_op(A, i)\n        if n_op > k:\n            ans = i\n            break\n    return ans\n\ndef binary_search(A: list, k: int) -> int:\n    n = len(A)\n    low = 0\n    high = n\n    if find_no_of_op(A, low) > k:\n        return 0\n    while high - low != 1:\n        mid = (low + high) // 2\n        if find_no_of_op(A, mid) <= k:\n            low = mid\n        else:\n            high = mid\n    return high\ntest_cases = int(input())\nfor _ in range(test_cases):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    l = [int(c) for c in s]\n    ans = binary_search(l, k)\n    print(ans)", "import re\n\ndef func(n, k, s):\n    low = 0\n    high = n + 1\n    while high - low > 1:\n        mid = (high + low) // 2\n        ops = 0\n        for i in range(mid - 1, -1, -1):\n            req = (ops + int(s[i])) % 10\n            if req != 0:\n                ops += 10 - req\n        if ops <= k:\n            low = mid\n        else:\n            high = mid\n    return low\nt = int(input())\nans = []\nfor i in range(t):\n    li = [int(x) for x in input().split()]\n    (n, k) = (li[0], li[1])\n    s = input()\n    ans.append(func(n, k, s))\nfor i in ans:\n    print(i)", "t = int(input())\n\ndef can_zero_upto_index_m(a, m, k):\n    num_ops_on_prev_elements = 0\n    for i in range(m, -1, -1):\n        x = a[i]\n        x += num_ops_on_prev_elements\n        x %= 10\n        if x == 0:\n            continue\n        if k >= 10 - x:\n            k -= 10 - x\n            num_ops_on_prev_elements += 10 - x\n        else:\n            return False\n    return True\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input()]\n    (i, j, ans) = (0, n - 1, -1)\n    while i <= j:\n        m = (i + j) // 2\n        if can_zero_upto_index_m(a, m, k):\n            ans = m\n            i = m + 1\n        else:\n            j = m - 1\n    ans += 1\n    print(ans)", "try:\n    for _ in range(int(input())):\n        (n, k) = list(map(int, input().split()))\n        s = input()\n        low = 0\n        high = n + 1\n        while high - low > 1:\n            mid = (high + low) // 2\n            ops = 0\n            for i in range(mid - 1, -1, -1):\n                req = (ops + int(s[i])) % 10\n                if req != 0:\n                    ops += 10 - req\n            if ops <= k:\n                low = mid\n            else:\n                high = mid\n        print(low)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n\n    def check(m, s):\n        add = 0\n        for i in range(m, -1, -1):\n            r = (int(s[i]) + add) % 10\n            if r == 0:\n                continue\n            add += 10 - r\n        return add\n    (l, r) = (0, n - 1)\n    ans = 0\n    while l <= r:\n        m = l + (r - l) // 2\n        if check(m, s) <= k:\n            ans = m + 1\n            l = m + 1\n        else:\n            r = m - 1\n    print(ans)", "def possible(S, ind, K):\n    total = 0\n    for i in reversed(range(ind)):\n        req = (10 - int(S[i])) % 10\n        total += (10 + req - total % 10) % 10\n        if total > K:\n            return False\n    return True\nfor _ in range(int(input())):\n    (N, K) = map(int, input().strip().split())\n    S = input().strip()\n    (low, high) = (0, N)\n    ans = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if possible(S, mid, K):\n            ans = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    res = 0\n    for i in range(n):\n        req = (10 - (ord(s[i]) - ord('0'))) % 10\n        if req > k:\n            break\n        res += 1\n        k = (k - req) // 10 * 10 + req\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    low = 0\n    high = n + 1\n    while high - low > 1:\n        mid = (low + high) // 2\n        ops = 0\n        for i in range(mid - 1, -1, -1):\n            ops += (10 - (int(s[i]) + ops) % 10) % 10\n        if ops <= k:\n            low = mid\n        else:\n            high = mid\n    print(low)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    r = len(s) - 1\n    ans = 0\n\n    def calc(m):\n        add = 0\n        for i in range(m, -1, -1):\n            v = (ord(s[i]) - ord('0') + add) % 10\n            if v == 0:\n                continue\n            add += 10 - v\n        return add\n    while l <= r:\n        m = (l + r) // 2\n        if calc(m) > k:\n            r = m - 1\n        else:\n            ans = m + 1\n            l = m + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    u = n - 1\n    ans = 0\n    while l <= u:\n        mid = (u + l) // 2\n        add = 0\n        for i in range(mid, -1, -1):\n            v = (ord(s[i]) - ord('0') + add) % 10\n            if v == 0:\n                continue\n            add = 10 - v + add\n        if add > k:\n            u = mid - 1\n        else:\n            l = mid + 1\n            ans = mid + 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    s = input()\n    low = 0\n    high = n + 1\n    while high - low > 1:\n        mid = (high + low) // 2\n        ops = 0\n        for i in range(mid - 1, -1, -1):\n            c = (int(s[i]) - int('0') + ops) % 10\n            if c == 0:\n                continue\n            ops += 10 - c\n        if ops <= k:\n            low = mid\n        else:\n            high = mid\n    print(low)", "def prefx(s, r):\n    ops = 0\n    for i in range(r - 1, -1, -1):\n        req = (ops + ord(s[i]) - ord('0')) % 10\n        if req != 0:\n            ops += 10 - req\n    return ops\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    r = n + 1\n    while r - l > 1:\n        mid = (l + r) // 2\n        if prefx(s, mid) <= k:\n            l = mid\n        else:\n            r = mid\n    print(l)", "cas = int(input())\nwhile cas != 0:\n    cas -= 1\n    (n, kk) = map(int, input().split())\n    s = input()\n    l = 0\n    r = n + 1\n    while r - l > 1:\n        mid = (l + r) // 2\n        ops = 0\n        for i in range(mid - 1, -1, -1):\n            req = (ops + int(s[i])) % 10\n            if req:\n                ops += 10 - req\n        if ops <= kk:\n            l = mid\n        else:\n            r = mid\n    print(l)", "from xml.dom import minidom\n\ndef tInt():\n    n = int(input())\n    return n\n\ndef tList():\n    a = map(int, input().split())\n    return a\n\ndef tStr():\n    s = input()\n    return s\n\ndef isPos(s, l, k):\n    total = 0\n    for i in range(l - 1, -1, -1):\n        temp = int(s[i]) + total\n        temp %= 10\n        if temp != 0:\n            temp = 10 - temp\n        else:\n            temp = 0\n        total += temp\n        if total > k:\n            return False\n    return True\n\ndef solve():\n    for _ in range(tInt()):\n        (m, k) = tList()\n        s = tStr()\n        left = 1\n        right = m\n        ans = 0\n        while left <= right:\n            mid = (left + right) // 2\n            if isPos(s, mid, k) == True:\n                ans = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        print(ans)\nsolve()", "def find(a):\n    return (10 - a) % 10\nfor t in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = str(input())\n    ans = 0\n    for i in range(N):\n        temp = find(int(S[i]))\n        if temp > K:\n            break\n        ans += 1\n        K = temp + 10 * ((K - temp) // 10)\n    print(ans)", "def find(a):\n    return (10 - a) % 10\n\ndef BS(x, S, K):\n    shift = 0\n    for i in range(x, -1, -1):\n        v = int(S[i])\n        v += shift\n        v %= 10\n        curr = find(v)\n        shift += curr\n    return shift <= K\nfor t in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = str(input())\n    if not BS(0, S, K):\n        print(0)\n        continue\n    l = 0\n    r = int(N - 1)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if BS(mid, S, K):\n            l = mid\n        else:\n            r = mid - 1\n    if BS(r, S, K):\n        print(r + 1)\n    else:\n        print(l + 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    r = len(s) - 1\n    ans = 0\n\n    def calc(m):\n        add = 0\n        for i in range(m, -1, -1):\n            v = (ord(s[i]) - ord('0') + add) % 10\n            if v == 0:\n                continue\n            add += 10 - v\n        return add\n    while l <= r:\n        m = (l + r) // 2\n        if calc(m) > k:\n            r = m - 1\n        else:\n            ans = m + 1\n            l = m + 1\n    print(ans)", "def find(a):\n    return (10 - a) % 10\n\ndef BS(x, S, K):\n    shift = 0\n    for i in range(x, -1, -1):\n        v = int(S[i])\n        v += shift\n        v %= 10\n        curr = find(v)\n        shift += curr\n    return shift <= K\nfor t in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = str(input())\n    if not BS(0, S, K):\n        print(0)\n        continue\n    l = 0\n    r = int(N - 1)\n    while r - l > 1:\n        mid = (l + r) // 2\n        if BS(mid, S, K):\n            l = mid\n        else:\n            r = mid - 1\n    if BS(r, S, K):\n        print(r + 1)\n    else:\n        print(l + 1)", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    l = list(map(int, list(input())))\n    (low, high) = (0, n + 1)\n    f = 0\n    ma = 0\n    while low < high:\n        mid = low + (high - low) // 2\n        new = k\n        gy = 0\n        for j in range(mid - 1, -1, -1):\n            x = (l[j] + gy) % 10\n            if x % 10 != 0:\n                new = new - (10 - x % 10)\n                gy = gy + 10 - x % 10\n        if new >= 0:\n            low = mid + 1\n            ma = mid\n        else:\n            high = mid\n    print(ma)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    l = list(map(int, list(input())))\n    (low, high) = (0, n + 1)\n    f = 0\n    ma = 0\n    while low < high:\n        mid = low + (high - low) // 2\n        new = k\n        gy = 0\n        for j in range(mid - 1, -1, -1):\n            x = (l[j] + gy) % 10\n            if x % 10 != 0:\n                new = new - (10 - x % 10)\n                gy = gy + 10 - x % 10\n        if new >= 0:\n            low = mid + 1\n            ma = mid\n        else:\n            high = mid\n    print(ma)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    l = list(map(int, list(input())))\n    (low, high) = (0, n + 1)\n    f = 0\n    ma = 0\n    while low < high:\n        mid = low + high >> 1\n        new = k\n        gy = 0\n        for j in range(mid - 1, -1, -1):\n            x = (l[j] + gy) % 10\n            if x % 10 != 0:\n                new = new - (10 - x % 10)\n                gy = gy + 10 - x % 10\n        if new >= 0:\n            low = mid + 1\n            ma = mid\n        else:\n            high = mid\n    print(ma)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    l = list(map(int, list(input())))\n    (low, high) = (0, n + 1)\n    f = 0\n    ma = 0\n    while low < high:\n        mid = low + high >> 1\n        f = 0\n        new = k\n        gy = 0\n        for j in range(mid - 1, -1, -1):\n            x = (l[j] + gy) % 10\n            if x % 10 != 0:\n                new = new - (10 - x % 10)\n                gy = gy + 10 - x % 10\n        if new >= 0:\n            f = 1\n        else:\n            f = 0\n        if f == 1:\n            low = mid + 1\n            ma = mid\n        else:\n            high = mid\n    print(ma)\n    t -= 1", "def getop(s):\n    l = len(s)\n    curr = 0\n    idx = l - 1\n    while idx >= 0:\n        req = abs(curr + s[idx]) % 10\n        curr = curr + (10 - req) % 10\n        idx -= 1\n    return curr\n\ndef func():\n    (n, k) = map(int, input().split())\n    l = [int(i) for i in input()]\n    low = 0\n    high = n - 1\n    mx = 0\n    while high >= low:\n        mid = (low + high) // 2\n        curr = getop(l[:mid + 1])\n        if curr > k:\n            high = mid - 1\n        else:\n            low = mid + 1\n            mx = max(mx, mid + 1)\n    print(mx)\nt = int(input())\nfor i in range(t):\n    func()", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input()))\n    ss = [0]\n    cnt = 1\n    for i in range(1, n):\n        if arr[i - 1] <= arr[i]:\n            cnt += 1\n        else:\n            ss.append(ss[-1] + cnt)\n            cnt = 1\n    ss.append(n)\n    (ind, off) = (0, 0)\n    l = len(ss)\n    for i in range(l - 1):\n        if any((el != 0 for el in arr[ss[i]:ss[i + 1]])):\n            if i == 0 and k >= 10 - arr[0]:\n                k -= 10 - arr[0]\n            elif i != 0 and k >= 10:\n                k -= 10\n            else:\n                for k in range(ss[i], ss[i + 1]):\n                    if arr[k] == 0:\n                        off += 1\n                    else:\n                        break\n                break\n        ind += 1\n    print(ss[ind] + off)", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    l = list(map(int, list(input())))\n    (low, high) = (0, n + 1)\n    f = 0\n    ma = 0\n    while low < high:\n        mid = (low + high) // 2\n        f = 0\n        new = k\n        gy = 0\n        for j in range(mid - 1, -1, -1):\n            x = (l[j] + gy) % 10\n            if x % 10 == 0:\n                continue\n            else:\n                new = new - (10 - x % 10)\n                gy = gy + 10 - x % 10\n        if new >= 0:\n            f = 1\n        else:\n            f = 0\n        if f == 1:\n            low = mid + 1\n            ma = mid\n        else:\n            high = mid\n    print(ma)\n    t -= 1", "def solve(n, k, li):\n    ans = 0\n    lo = 0\n    hi = n - 1\n\n    def check(mid):\n        opr = 0\n        last = prev = li[mid]\n        oldval = 0\n        for i in range(mid, -1, -1):\n            if (li[i] + oldval) % 10 <= prev:\n                prev = (li[i] + oldval) % 10\n            else:\n                if prev != 0:\n                    val = 10 - prev\n                elif last == 0:\n                    val = 0\n                else:\n                    val = 10\n                opr += val\n                oldval = (oldval + val) % 10\n                last = prev = (li[i] + oldval) % 10\n        if prev != 0:\n            val = 10 - prev\n        elif last == 0:\n            val = 0\n        else:\n            val = 10\n        opr += val\n        return opr\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if check(mid) <= k:\n            ans = mid + 1\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return ans\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, list(input())))\n    print(solve(n, k, s))", "def chkFunction(ind, st):\n    prev = 0\n    for x in range(ind, -1, -1):\n        new = prev + int(st[x])\n        if new % 10 != 0:\n            prev += 10 - new % 10\n    return prev\nfor tc in range(int(input())):\n    ls = list(map(int, input().split()))\n    (n, k) = (ls[0], ls[1])\n    s = input()\n    ans = -1\n    lo = 0\n    hi = len(s) - 1\n    hope = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        if chkFunction(mid, s) <= k:\n            ans = mid\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    print(ans + 1)", "def check(index, s):\n    temp = 0\n    ans = 0\n    for i in range(index - 1, -1, -1):\n        val = int(s[i])\n        val = (val + temp) % 10\n        temp += (10 - val) % 10\n    return temp\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    low = 0\n    high = n\n    while low <= high:\n        mid = (low + high) // 2\n        val = check(mid, s)\n        if val > k:\n            high = mid - 1\n        elif val <= k:\n            res = mid\n            low = mid + 1\n    print(res)", "N = int(input())\nfor _ in range(N):\n    (n, k) = map(int, input().split())\n    s = input()\n    hi = n\n    lo = 0\n    ans = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        ops = 0\n        for i in range(mid - 1, -1, -1):\n            req = (ops + int(s[i])) % 10\n            if req != 0:\n                ops += 10 - req\n        if ops <= k:\n            ans = mid\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (low, high) = (0, n + 1)\n    while high - low > 1:\n        mid = (low + high) // 2\n        count = 0\n        for i in range(mid - 1, -1, -1):\n            req = (count + int(s[i])) % 10\n            if req != 0:\n                count += 10 - req\n        if count <= k:\n            low = mid\n        else:\n            high = mid\n    print(low)", "from copy import deepcopy\n\ndef run(k, s):\n    max_ops = [k]\n    i = 1\n    while i <= len(s):\n        curr_arr_i = i - 1\n        curr_min_ops = (10 - s[curr_arr_i]) % 10\n        ops_avail = max_ops[i - 1]\n        if curr_min_ops > ops_avail:\n            break\n        n_times = (ops_avail - curr_min_ops) // 10\n        max_ops.append(curr_min_ops + n_times * 10)\n        i += 1\n    return i - 1\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input()))\n    print(run(k, s))", "import sys, os, io\ninput = sys.stdin.readline\nfrom collections import defaultdict\nimport bisect\nimport random\nPI = 3.141592653589793\nINF = float('inf')\nMOD = 1000000007\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x, y):\n    return (x + y) % MOD\n\ndef sub(x, y):\n    return (x - y + MOD) % MOD\n\ndef mul(x, y):\n    return x * y % MOD\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef power(x, y):\n    res = 1\n    x %= MOD\n    while y != 0:\n        if y & 1:\n            res = mul(res, x)\n        y >>= 1\n        x = mul(x, x)\n    return res\n\ndef mod_inv(n):\n    return power(n, MOD - 2)\n\ndef prob(p, q):\n    return mul(p, power(q, MOD - 2))\n\ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\nfor t in range(ii()):\n    t += 1\n    (n, k) = li()\n    s = input().strip()\n    s = [int(i) for i in s]\n    r = (10 - s[0]) % 10\n    while k >= 0 and k % 10 != r:\n        k -= 1\n    ans = 1\n    if k < 0:\n        ans = 0\n    for i in range(1, n):\n        if k < 0:\n            break\n        r = (10 - s[i]) % 10\n        diff = k % 10 - r\n        if diff < 0:\n            k = k // 10 * 10\n            k -= s[i]\n            if k < 0:\n                break\n            ans += 1\n            continue\n        if k < diff:\n            break\n        ans += 1\n        k -= diff\n    print(ans)", "n = int(input())\n\ndef ans(s, k):\n    import math\n    z = k\n    for i in range(len(s)):\n        x = 10 - int(s[i])\n        z -= x\n        ans = math.floor(z / 10)\n        x += 10 * ans\n        z = x\n        if z < 0:\n            return i\n    return len(s)\nfor _ in range(n):\n    arr = [int(i) for i in input().split()]\n    s = input()\n    print(ans(s, arr[1]))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input()))\n    l = 0\n    h = n + 1\n    while h - l > 1:\n        m = (l + h) // 2\n        o = 0\n        for i in reversed(range(m)):\n            r = (o + s[i]) % 10\n            if r != 0:\n                o += 10 - r\n        if o <= k:\n            l = m\n        else:\n            h = m\n    print(l)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    s = input()\n    s = list(map(lambda x: int(x), s))\n    x = 0\n    count = 0\n    (l, h) = (0, a - 1)\n    while l <= h:\n        mid = (l + h) // 2\n        x = 0\n        for j in range(mid, -1, -1):\n            r = (s[j] + x) % 10\n            if r != 0:\n                x += 10 - r\n            if b < x:\n                break\n            if j == 0:\n                count = max(count, mid + 1)\n        if b < x:\n            h = mid - 1\n        else:\n            l = mid + 1\n    print(count)", "def valid(m, s):\n    temp = 0\n    for i in range(m, -1, -1):\n        v = (int(s[i]) + temp) % 10\n        if v == 0:\n            continue\n        temp += 10 - v\n    return temp\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, list(input())))\n    low = 0\n    high = n - 1\n    ans = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if valid(mid, arr) > k:\n            high = mid - 1\n        else:\n            low = mid + 1\n            ans = mid + 1\n    print(ans)", "x = int(input())\nfor i in range(x):\n    (n, k) = list(map(int, input().split()))\n    z = input()\n    ans = 0\n    jj = 0\n    p = 0\n    while jj < n:\n        if z[jj] == '0':\n            p += 1\n        else:\n            break\n        jj += 1\n    if jj < n:\n        flag = 0\n        if jj == 0 and ans + 10 - int(z[jj]) <= k:\n            ans += 10 - int(z[jj])\n            p += 1\n            final = int(z[jj])\n            jj += 1\n            flag = 1\n        elif ans + 10 <= k:\n            ans += 10\n            p += 1\n            final = int(z[jj])\n            jj += 1\n            flag = 1\n        if flag == 1:\n            for kk in range(jj, n):\n                if z[kk] != '0' and (int(z[kk]) < int(z[kk - 1]) or z[kk - 1] == '0'):\n                    final = int(z[kk])\n                    if ans + 10 <= k:\n                        ans += 10\n                        p += 1\n                    else:\n                        break\n                else:\n                    if z[kk] != '0':\n                        final = int(z[kk])\n                    p += 1\n    print(p)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input().split())[0]\n    ls = [int(i) for i in s]\n    l = 0\n    h = n + 1\n    final = 0\n    while l < h:\n        m = l + h >> 1\n        tem = ls[:m]\n        add = 0\n        new = 0\n        for i in range(m - 1, -1, -1):\n            tem[i] = (tem[i] + add) % 10\n            if tem[i] == 0:\n                continue\n            else:\n                add = 10 - tem[i]\n                new += add\n                tem[i] = 0\n                add = new\n        if new <= k:\n            l = m + 1\n            final = len(tem)\n        elif new > k:\n            h = m\n    print(final)", "def compute(s):\n    net = 0\n    for i in s[::-1]:\n        x = (int(i) + net) % 10\n        if x == 0:\n            continue\n        net += 10 - x\n    return net\nt = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    (low, high) = (1, n)\n    while low <= high:\n        mid = (low + high) // 2\n        if compute(s[:mid]) > k:\n            high = mid - 1\n        else:\n            ans = mid\n            low = mid + 1\n    print(ans)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    s = input()\n    A = []\n    for j in range(n):\n        if int(s[j]) != 0:\n            A.append(10 - int(s[j]))\n        else:\n            A.append(0)\n    flag = A[0]\n    if flag > k:\n        print(0)\n        continue\n    for j in range(n - 1):\n        if A[j] < A[j + 1]:\n            flag += 10\n        if flag > k:\n            print(j + 1)\n            break\n    if flag <= k:\n        print(n)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        (n, k) = sep()\n        s = inp()\n        lo = 0\n        hi = n\n        ans = 0\n        s = list(s)\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            res = 0\n            for i in range(mid - 1, -1, -1):\n                cnt = (10 - (int(s[i]) + res) % 10) % 10\n                res += cnt\n            if res <= k:\n                lo = mid + 1\n                ans = mid\n            else:\n                hi = mid - 1\n        print(ans)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    limit = 0\n    n = n + 1\n    while n - limit > 1:\n        mid = (limit + n) // 2\n        operation = 0\n        i = mid - 1\n        while i >= 0:\n            w = (int(s[i]) + operation) % 10\n            if w != 0:\n                operation = operation + (10 - w)\n            i = i - 1\n        if operation <= k:\n            limit = mid\n        else:\n            n = mid\n    print(limit)", "import sys\n\ndef readInt():\n    x = int(sys.stdin.readline().rstrip())\n    return x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef solve():\n    (n, k) = readList()\n    s = read().rstrip('\\n')\n    ops = 0\n    ans = -1\n    lo = 0\n    hi = n - 1\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        ops = 0\n        for i in range(mid, -1, -1):\n            a = (int(s[i]) + ops) % 10\n            if a > 0:\n                ops += 10 - a\n        if ops <= k:\n            ans = max(lo, ans)\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    print(lo)\n\ndef main():\n    t = 1\n    t = readInt()\n    for _ in range(t):\n        solve()\nmain()", "import math\niter = int(input())\nfor z in range(iter):\n    (n, k) = list(map(int, input().split(' ')))\n    arr = input()\n    depth = 0\n    for i in range(n):\n        mul = math.floor((k - (10 - int(arr[i])) % 10) / 10)\n        if mul >= 0:\n            k = (10 - int(arr[i])) % 10 + 10 * mul\n        else:\n            break\n        depth += 1\n    print(depth)", "import math\niter = int(input())\nfor z in range(iter):\n    (n, k) = list(map(int, input().split(' ')))\n    arr = input()\n    depth = 0\n    for i in range(n):\n        mul = math.floor((k - (10 - int(arr[i])) % 10) / 10)\n        if mul >= 0:\n            k = (10 - int(arr[i])) % 10 + 10 * mul\n        else:\n            break\n        depth += 1\n    print(depth)", "t = int(input())\nfor i in range(0, t):\n    s = [int(i) for i in input().split()]\n    (n, k) = (s[0], s[1])\n    l = list(input())\n    for i in range(0, n):\n        l[i] = int(l[i])\n    c = 0\n    for p in range(0, n):\n        f = 0\n        for i in range(k, -1, -1):\n            if (l[p] + i) % 10 == 0:\n                x = i\n                f = 1\n                break\n        if f == 1:\n            c = c + 1\n        else:\n            print(c)\n            break\n        k = x\n        if p == n - 1:\n            print(c)\n            break", "from bisect import bisect\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = list(map(int, input()))\n        a = [(10 - x) % 10 for x in s]\n        b = a[:]\n        for i in range(1, len(a)):\n            if a[i - 1] >= a[i]:\n                b[i] = b[i - 1]\n            else:\n                b[i] = b[i - 1] + 10\n        print(bisect(b, k))\nmain()", "def AbhiSolveKiya(s, N, k):\n    s = list(map(int, list(s)))\n    n = len(s)\n    if s[0] > 0 and k < 10 - s[0]:\n        return 0\n    low = 0\n    high = n - 1\n    best = -1\n    while low <= high:\n        n = (low + high) // 2\n        pre = [0] * (n + 1)\n        total = 0\n        for i in range(n, -1, -1):\n            x = (s[i] + total) % 10\n            if x == 0:\n                x = 10\n            pre[i] = 10 - x\n            total += 10 - x\n            total %= 10\n            if i < n:\n                pre[i] += pre[i + 1]\n        if pre[0] <= k:\n            low = n + 1\n            best = max(n, best)\n        else:\n            high = n - 1\n    return best + 1\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(AbhiSolveKiya(s, n, k))", "from sys import stdin, stdout\n\ndef main():\n    t = int(stdin.readline())\n    for tt in range(t):\n        (n, k) = map(int, stdin.readline().split())\n        s = list(map(int, list(stdin.readline().strip())))\n        if k < 10 - s[0] and s[0] != 0:\n            print(0)\n        else:\n            db = 1\n            if s[0] != 0:\n                k = k - (10 - s[0])\n            for i in range(1, n):\n                if s[i] == 0:\n                    db += 1\n                elif s[i] >= s[i - 1] and s[i - 1] != 0:\n                    db += 1\n                else:\n                    if k >= 10:\n                        db += 1\n                    k -= 10\n                if k < 0:\n                    break\n            print(db)\nmain()", "from sys import stdin, stdout\nt = int(stdin.readline())\nfor tt in range(t):\n    (n, k) = map(int, stdin.readline().split())\n    s = list(map(int, list(stdin.readline().strip())))\n    if k < 10 - s[0] and s[0] != 0:\n        print(0)\n    else:\n        db = 1\n        if s[0] != 0:\n            k = k - (10 - s[0])\n        for i in range(1, n):\n            if s[i] == 0:\n                db += 1\n            elif s[i] >= s[i - 1] and s[i - 1] != 0:\n                db += 1\n            else:\n                if k >= 10:\n                    db += 1\n                k -= 10\n            if k < 0:\n                break\n        print(db)", "def f2(z, s, t=0):\n    for i in range(z, -1, -1):\n        v = (int(s[i]) + t) % 10\n        t += 10 - v if v != 0 else 0\n    return t\nfor tcs in range(int(input())):\n    (n, k) = map(int, input().split())\n    wrd = list(map(int, list(input())))\n    (a, x, y) = (0, 0, n - 1)\n    while x <= y:\n        z = x + (y - x) // 2\n        if f2(z, wrd) <= k:\n            a = z + 1\n            x = a\n        else:\n            y = z - 1\n    print(a)", "def AbhiSolveKiya(s, N, k):\n    s = list(map(int, list(s)))\n    n = len(s)\n    if s[0] > 0 and k < 10 - s[0]:\n        return 0\n    low = 0\n    high = n - 1\n    best = -1\n    while low <= high:\n        n = (low + high) // 2\n        pre = [0] * (n + 1)\n        total = 0\n        for i in range(n, -1, -1):\n            x = (s[i] + total) % 10\n            if x == 0:\n                x = 10\n            pre[i] = 10 - x\n            total += 10 - x\n            total %= 10\n            if i < n:\n                pre[i] += pre[i + 1]\n        if pre[0] <= k:\n            low = n + 1\n            best = max(n, best)\n        else:\n            high = n - 1\n    return best + 1\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(AbhiSolveKiya(s, n, k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = []\n    b = []\n    a.append((10 - int(s[0])) % 10)\n    b.append((10 - int(s[0])) % 10)\n    if a[0] > k:\n        print(0)\n    else:\n        f = 0\n        for i in range(1, n):\n            x = (10 - int(s[i])) % 10\n            b.append(x)\n            if b[i - 1] < x:\n                a.append(10 + a[i - 1])\n            else:\n                a.append(a[i - 1])\n            if a[i] > k:\n                f = i\n                break\n        if f != 0:\n            print(f)\n        else:\n            print(n)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = []\n    b = []\n    a.append((10 - int(s[0])) % 10)\n    b.append((10 - int(s[0])) % 10)\n    if a[0] > k:\n        print(0)\n    else:\n        f = 0\n        for i in range(1, n):\n            x = (10 - int(s[i])) % 10\n            b.append(x)\n            if b[i - 1] < x:\n                a.append(10 + a[i - 1])\n            else:\n                a.append(a[i - 1])\n            if a[i] > k:\n                f = i\n                break\n        if f != 0:\n            print(f)\n        else:\n            print(n)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = []\n    b = []\n    a.append((10 - int(s[0])) % 10)\n    b.append((10 - int(s[0])) % 10)\n    if a[0] > k:\n        print(0)\n    else:\n        f = 0\n        for i in range(1, n):\n            x = (10 - int(s[i])) % 10\n            b.append(x)\n            if b[i - 1] < x:\n                a.append(10 + a[i - 1])\n            else:\n                a.append(a[i - 1])\n            if a[i] > k:\n                f = i\n                break\n        if f != 0:\n            print(f)\n        else:\n            print(n)", "t = int(input())\n\ndef solve(s, m):\n    x = 0\n    for i in range(m, -1, -1):\n        v = (int(s[i]) + x) % 10\n        if v == 0:\n            continue\n        x += 10 - v\n    return x\n\ndef bsrch(s, n, k):\n    (l, r) = (0, n - 1)\n    while l <= r:\n        m = (l + r) // 2\n        if solve(s, m) > k:\n            r = m - 1\n        else:\n            l = m + 1\n    return l\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    print(bsrch(s, n, k))", "t = int(input())\n\ndef solve(s, m):\n    x = 0\n    for i in range(m, -1, -1):\n        v = (int(s[i]) + x) % 10\n        if v == 0:\n            continue\n        x += 10 - v\n    return x\n\ndef bsrch(s, n, k):\n    (l, r) = (0, n - 1)\n    while l <= r:\n        m = (l + r) // 2\n        if solve(s, m) > k:\n            r = m - 1\n        else:\n            l = m + 1\n    return l\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    print(bsrch(s, n, k))", "t = int(input())\n\ndef solve(s, m):\n    x = 0\n    for i in range(m, -1, -1):\n        v = (int(s[i]) + x) % 10\n        if v == 0:\n            continue\n        x += 10 - v\n    return x\n\ndef bsrch(s, n, k):\n    (l, r) = (0, n - 1)\n    while l <= r:\n        m = (l + r) // 2\n        if solve(s, m) > k:\n            r = m - 1\n        else:\n            l = m + 1\n    return l\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    print(bsrch(s, n, k))", "try:\n    for tc in range(int(input())):\n        (n, k) = list(map(int, input().split()))\n        st = input()\n        cnt = 0\n        for i in range(n):\n            curr = 10 - int(st[i]) % 10\n            now = k // 10\n            to = 10 * now + curr\n            if to > k:\n                to -= 10\n            if to <= k and to >= 0:\n                cnt += 1\n                k = to\n            else:\n                break\n        print(cnt)\nexcept:\n    pass"]