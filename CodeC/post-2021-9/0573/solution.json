["def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)", "def do_bitwise_xor(x, y):\n    return (x | y) & (~x | ~y)\n\ndef split_list_to_even_odd(A: list):\n    A_EVEN = []\n    A_ODD = []\n    for item in A:\n        if item % 2 == 0:\n            A_EVEN.append(item)\n        else:\n            A_ODD.append(item)\n    return (A_EVEN, A_ODD)\n\ndef get_xor_times_two_is_sum_count(A: list):\n    length = len(A)\n    count = 0\n    if length == 0:\n        return count\n    for i in range(length):\n        for j in range(i + 1, length):\n            if 2 * do_bitwise_xor(A[i], A[j]) == A[i] + A[j]:\n                count += 1\n    return count\n\ndef xor2ptnr(val):\n    sb = ['0'] + list(bin(val)[2:])\n    sx = len(sb)\n    while sx:\n        sx -= 1\n        if sb[sx] == '1':\n            sx -= 1\n            sb[sx] = '1' if sb[sx] == '0' else '0'\n    return int(''.join(sb), 2)\nN = int(input())\nAys = set(map(int, input().split()))\nprint(len(Ays.intersection((xor2ptnr(a) for a in Ays if not '1' in bin(a).rsplit('11')[-1]))))", "from sys import stdin\nfrom functools import lru_cache\ninput = stdin.readline\n\ndef xor2ptnr_1(inpstr):\n    val = int(inpstr)\n    if '1' in f'{val:b}'.rsplit('11', maxsplit=1)[-1]:\n        return val\n    bit = 1\n    while bit <= val:\n        if bit & val:\n            bit <<= 1\n            val ^= bit\n        bit <<= 1\n    return val\nN = int(input())\nAys = set(map(xor2ptnr_1, input().split()))\nprint(N - len(Ays))", "from sys import stdin\nfrom functools import lru_cache\ninput = stdin.readline\n\ndef xor2ptnr_1(inpstr):\n    val = int(inpstr)\n    if '1' in f'{val:b}'.rsplit('11', maxsplit=1)[-1]:\n        return val\n    bit = 1\n    while bit <= val:\n        if bit & val:\n            bit <<= 1\n            val ^= bit\n        bit <<= 1\n    return val\nN = int(input())\nAys = set(map(xor2ptnr_1, input().split()))\nprint(N - len(Ays))", "from sys import stdin\nfrom functools import lru_cache\ninput = stdin.readline\n\ndef xor2ptnr_1(inpstr):\n    val = int(inpstr)\n    sb = f'0{val:b}'.rsplit('11')\n    if '1' in sb[-1]:\n        return val\n    return int('01'.join((s.replace('01', '11') for s in sb)), 2)\nN = int(input())\nAys = set(map(xor2ptnr_1, input().split()))\nprint(N - len(Ays))", "from sys import stdin\nfrom functools import lru_cache\ninput = stdin.readline\n\ndef xor2ptnr(val):\n    sb = f'0{val:b}'.rsplit('11')\n    return int('01'.join((s.replace('01', '11') for s in sb)), 2)\nN = int(input())\nAys = set(map(int, input().split()))\nprint(len(Ays.intersection((xor2ptnr(a) for a in Ays if not '1' in bin(a).rsplit('11', maxsplit=1)[-1]))))", "from sys import stdin\nfrom functools import lru_cache\ninput = stdin.readline\n\ndef xor2ptnr(val):\n    sb = ('0' + bin(val)[2:]).rsplit('11')\n    return int('01'.join((s.replace('01', '11') for s in sb)), 2)\nN = int(input())\nAys = set(map(int, input().split()))\nprint(len(Ays.intersection((xor2ptnr(a) for a in Ays if not '1' in bin(a).rsplit('11', maxsplit=1)[-1]))))", "from sys import stdin\nfrom functools import lru_cache\ninput = stdin.readline\n\ndef xor2ptnr(val):\n    sb = ['0'] + list(bin(val)[2:])\n    sx = len(sb)\n    while sx:\n        sx -= 1\n        if sb[sx] == '1':\n            sx -= 1\n            sb[sx] = '1' if sb[sx] == '0' else '0'\n    return int(''.join(sb), 2)\nN = int(input())\nAys = set(map(int, input().split()))\nprint(len(Ays.intersection((xor2ptnr(a) for a in Ays if not '1' in bin(a).rsplit('11')[-1]))))", "from sys import stdin\nfrom functools import lru_cache\ninput = stdin.readline\n\ndef xor2ptnr(val):\n    sb = ['0'] + list(bin(val)[2:])\n    sx = len(sb)\n    while sx:\n        sx -= 1\n        if sb[sx] == '1':\n            sx -= 1\n            sb[sx] = '1' if sb[sx] == '0' else '0'\n    return int(''.join(sb), 2)\nN = int(input())\nAys = set(map(int, input().split()))\nprint(len(Ays.intersection((xor2ptnr(a) for a in Ays))) // 2)", "from sys import stdin\nfrom functools import lru_cache\ninput = stdin.readline\n\ndef xor2ptnr(val):\n    sb = ['0'] + list(bin(val)[2:])\n    sp = []\n    while sb:\n        if sb.pop() == '0':\n            sp.append('0')\n        else:\n            sp.append('1')\n            if sb.pop() == '0':\n                sp.append('1')\n            else:\n                sp.append('0')\n    return int(''.join(reversed(sp)), 2)\nN = int(input())\nAys = set(map(int, input().split()))\nprint(len(Ays.intersection((xor2ptnr(a) for a in Ays))) // 2)", "def patt(n):\n    s = format(n, 'b')[1:]\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if i - 1 < 0:\n                return False\n            i -= 2\n        else:\n            i -= 1\n    return True\n\ndef rev(n):\n    s = format(n, 'b')[1:]\n    ans = ''\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            if s[i - 1] == '1':\n                ans = '01' + ans\n            else:\n                ans = '11' + ans\n            i -= 2\n        else:\n            ans = '0' + ans\n            i -= 1\n    ans = '11' + ans\n    return int(ans, 2)\nn = int(input())\nli = list(map(int, input().split()))\nli.sort()\nmapp = {}\nans = 0\nfor i in range(len(li) - 1, -1, -1):\n    p = patt(li[i])\n    if p and rev(li[i]) in mapp:\n        ans += 1\n    mapp[li[i]] = True\nprint(ans)"]