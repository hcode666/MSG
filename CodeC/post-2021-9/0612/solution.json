["from math import log2\n\ndef debug_matrix(a):\n    for row in a:\n        print(row)\n    print()\n\ndef debug_list(a):\n    print(a)\n    print()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = [0] * 21\n    y = [0] * 21\n    cx = [0] * 21\n    cy = [0] * 21\n    result = [0] * 21\n    zx = 0\n    zy = 0\n    for i in range(21):\n        x[i] = [0] * 21\n        y[i] = [0] * 21\n    for num in a:\n        if num == 0:\n            zx += 1\n            continue\n        row = int(log2(num))\n        cx[row] += 1\n        col = 0\n        while num > 0:\n            if num & 1:\n                x[row][col] += 1\n            col += 1\n            num >>= 1\n    for num in b:\n        if num == 0:\n            zy += 1\n            continue\n        row = int(log2(num))\n        cy[row] += 1\n        col = 0\n        while num > 0:\n            if num % 2 == 1:\n                y[row][col] += 1\n            col += 1\n            num >>= 1\n    for i in range(21):\n        if cx[i] == 0:\n            continue\n        for j in range(21):\n            if cy[j] == 0:\n                continue\n            if i == j:\n                for k in range(21):\n                    result[k] += x[i][k] * y[j][k]\n            else:\n                for k in range(21):\n                    result[k] += (cx[i] - x[i][k]) * y[j][k]\n                    result[k] += (cy[j] - y[j][k]) * x[i][k]\n    val = 0\n    pow = 1\n    for i in result:\n        val += pow * i\n        pow <<= 1\n    if zx > 0:\n        val += sum(b) * zx\n    if zy > 0:\n        val += sum(a) * zy\n    print(val)", "from math import log2\n\ndef debug_matrix(a):\n    for row in a:\n        print(row)\n    print()\n\ndef debug_list(a):\n    print(a)\n    print()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = [0] * 21\n    y = [0] * 21\n    cx = [0] * 21\n    cy = [0] * 21\n    result = [0] * 21\n    zx = 0\n    zy = 0\n    for i in range(21):\n        x[i] = [0] * 21\n        y[i] = [0] * 21\n    for num in a:\n        if num == 0:\n            zx += 1\n            continue\n        row = int(log2(num))\n        cx[row] += 1\n        col = 0\n        while num > 0:\n            if num & 1:\n                x[row][col] += 1\n            col += 1\n            num >>= 1\n    for num in b:\n        if num == 0:\n            zy += 1\n            continue\n        row = int(log2(num))\n        cy[row] += 1\n        col = 0\n        while num > 0:\n            if num % 2 == 1:\n                y[row][col] += 1\n            col += 1\n            num >>= 1\n    for i in range(21):\n        if cx[i] == 0:\n            continue\n        for j in range(21):\n            if cy[j] == 0:\n                continue\n            if i == j:\n                for k in range(21):\n                    result[k] += x[i][k] * y[j][k]\n            else:\n                for k in range(21):\n                    result[k] += (cx[i] - x[i][k]) * y[j][k]\n                    result[k] += (cy[j] - y[j][k]) * x[i][k]\n    val = 0\n    pow = 1\n    for i in result:\n        val += pow * i\n        pow <<= 1\n    if zx > 0:\n        val += sum(b) * zx\n    if zy > 0:\n        val += sum(a) * zy\n    print(val)", "from math import log2\n\ndef debug_matrix(a):\n    for row in a:\n        print(row)\n    print()\n\ndef debug_list(a):\n    print(a)\n    print()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = [0] * 21\n    y = [0] * 21\n    cx = [0] * 21\n    cy = [0] * 21\n    result = [0] * 21\n    zx = 0\n    zy = 0\n    for i in range(21):\n        x[i] = [0] * 21\n        y[i] = [0] * 21\n    for num in a:\n        if num == 0:\n            zx += 1\n            continue\n        row = int(log2(num))\n        cx[row] += 1\n        col = 0\n        while num > 0:\n            if num & 1:\n                x[row][col] += 1\n            col += 1\n            num >>= 1\n    for num in b:\n        if num == 0:\n            zy += 1\n            continue\n        row = int(log2(num))\n        cy[row] += 1\n        col = 0\n        while num > 0:\n            if num % 2 == 1:\n                y[row][col] += 1\n            col += 1\n            num >>= 1\n    for i in range(21):\n        if cx[i] == 0:\n            continue\n        for j in range(21):\n            if cy[j] == 0:\n                continue\n            if i == j:\n                for k in range(21):\n                    result[k] += x[i][k] * y[j][k]\n            else:\n                for k in range(21):\n                    result[k] += (cx[i] - x[i][k]) * y[j][k]\n                    result[k] += (cy[j] - y[j][k]) * x[i][k]\n    val = 0\n    pow = 1\n    for i in result:\n        val += pow * i\n        pow <<= 1\n    if zx > 0:\n        val += sum(b) * zx\n    if zy > 0:\n        val += sum(a) * zy\n    print(val)", "from math import log2\n\ndef debug_matrix(a):\n    for row in a:\n        print(row)\n    print()\n\ndef debug_list(a):\n    print(a)\n    print()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = [0] * 21\n    y = [0] * 21\n    cx = [0] * 21\n    cy = [0] * 21\n    result = [0] * 21\n    zx = 0\n    zy = 0\n    for i in range(21):\n        x[i] = [0] * 21\n        y[i] = [0] * 21\n    for num in a:\n        if num == 0:\n            zx += 1\n            continue\n        row = int(log2(num))\n        cx[row] += 1\n        col = 0\n        while num > 0:\n            if num & 1:\n                x[row][col] += 1\n            col += 1\n            num >>= 1\n    for num in b:\n        if num == 0:\n            zy += 1\n            continue\n        row = int(log2(num))\n        cy[row] += 1\n        col = 0\n        while num > 0:\n            if num % 2 == 1:\n                y[row][col] += 1\n            col += 1\n            num >>= 1\n    for i in range(21):\n        if cx[i] == 0:\n            continue\n        for j in range(21):\n            if cy[j] == 0:\n                continue\n            if i == j:\n                for k in range(21):\n                    result[k] += x[i][k] * y[j][k]\n            else:\n                for k in range(21):\n                    result[k] += (cx[i] - x[i][k]) * y[j][k]\n                    result[k] += (cy[j] - y[j][k]) * x[i][k]\n    val = 0\n    pow = 1\n    for i in result:\n        val += pow * i\n        pow <<= 1\n    if zx > 0:\n        val += sum(b) * zx\n    if zy > 0:\n        val += sum(a) * zy\n    print(val)", "import math\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = 0\n    for i in a:\n        s += i\n    bits = [0] * 20\n    msb = [0] * 20\n    t = [[0 for z in range(20)] for j in range(20)]\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        k = int(math.log(a[i], 2))\n        msb[k] += 1\n        for j in range(20):\n            bv = a[i] >> j & 1\n            bits[j] += bv\n            t[k][j] += bv\n    res = 0\n    for i in range(n):\n        if b[i] == 0:\n            res += s\n            continue\n        k = int(math.log(b[i], 2))\n        for j in range(20):\n            bv = b[i] >> j & 1\n            if bv == 0:\n                res += (bits[j] - t[k][j]) * (1 << j)\n            else:\n                res += t[k][j] * (1 << j)\n                res += (n - bits[j] - (msb[k] - t[k][j])) * (1 << j)\n    print(res)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sum1 = 0\n    for i in range(n):\n        sum1 += a[i]\n    msb = [0] * 20\n    bits = [0] * 20\n    t = [[0 for i in range(20)] for j in range(20)]\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        k = int(math.log(a[i], 2))\n        msb[k] += 1\n        for j in range(20):\n            bv = a[i] >> j & 1\n            bits[j] += bv\n            t[k][j] += bv\n    ans = 0\n    for i in range(n):\n        if b[i] == 0:\n            ans += sum1\n            continue\n        k = int(math.log(b[i], 2))\n        for j in range(20):\n            bv = b[i] >> j & 1\n            if bv == 0:\n                ans = ans + (bits[j] - t[k][j]) * (1 << j)\n            else:\n                ans = ans + t[k][j] * (1 << j)\n                ans = ans + (n - bits[j] - (msb[k] - t[k][j])) * (1 << j)\n    print(ans)", "import sys\nimport math\n\ndef List():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef Ints():\n    return map(int, sys.stdi.readline().split())\n\ndef Strs():\n    return map(sys.stdin.readline().strip())\n\ndef Op(s):\n    sys.stdout.write(s + '\\n')\n\ndef Int():\n    return int(sys.stdin.readline())\n\ndef Str():\n    return sys.stdin.readline().strip()\n\ndef NList(n, l):\n    return [n for i in range(l)]\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\nfor _ in range(Int()):\n    n = Int()\n    l1 = List()\n    l2 = List()\n    s = sum(l1)\n    msb = NList(0, 20)\n    bits = NList(0, 20)\n    sets = [NList(0, 20) for i in range(20)]\n    res = 0\n    for i in range(n):\n        if l1[i] == 0:\n            continue\n        k = int(math.log2(l1[i]))\n        msb[k] += 1\n        for j in range(20):\n            if l1[i] >> j & 1 == 1:\n                bits[j] += 1\n                sets[k][j] += 1\n    for i in range(n):\n        if l2[i] == 0:\n            res += s\n        else:\n            msbb = int(math.log2(l2[i]))\n            for j in range(20):\n                if l2[i] >> j & 1:\n                    res += sets[msbb][j] * (1 << j)\n                    res += (n - bits[j] - (msb[msbb] - sets[msbb][j])) * (1 << j)\n                else:\n                    res += (bits[j] - sets[msbb][j]) * (1 << j)\n    Op(str(res))", "import sys\nimport math\n\ndef List():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef Ints():\n    return map(int, sys.stdi.readline().split())\n\ndef Strs():\n    return map(sys.stdin.readline().strip())\n\ndef Op(s):\n    sys.stdout.write(s + '\\n')\n\ndef Int():\n    return int(sys.stdin.readline())\n\ndef Str():\n    return sys.stdin.readline().strip()\n\ndef NList(n, l):\n    return [n for i in range(l)]\n\ndef gcd(a, b):\n    return a if b == 0 else gcd(b, a % b)\nfor _ in range(Int()):\n    n = Int()\n    l1 = List()\n    l2 = List()\n    s = sum(l1)\n    msb = NList(0, 20)\n    bits = NList(0, 20)\n    sets = [NList(0, 20) for i in range(20)]\n    res = 0\n    for i in range(n):\n        if l1[i] == 0:\n            continue\n        k = int(math.log2(l1[i]))\n        msb[k] += 1\n        for j in range(20):\n            if l1[i] >> j & 1 == 1:\n                bits[j] += 1\n                sets[k][j] += 1\n    for i in range(n):\n        if l2[i] == 0:\n            res += s\n        else:\n            msbb = int(math.log2(l2[i]))\n            for j in range(20):\n                if l2[i] >> j & 1:\n                    res += sets[msbb][j] * (1 << j)\n                    res += (n - bits[j] - (msb[msbb] - sets[msbb][j])) * (1 << j)\n                else:\n                    res += (bits[j] - sets[msbb][j]) * (1 << j)\n    print(res)", "import math\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = 0\n    for i in a:\n        s += i\n    bits = [0] * 20\n    msb = [0] * 20\n    t = [[0 for z in range(20)] for j in range(20)]\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        k = int(math.log(a[i], 2))\n        msb[k] += 1\n        for j in range(20):\n            bv = a[i] >> j & 1\n            bits[j] += bv\n            t[k][j] += bv\n    res = 0\n    for i in range(n):\n        if b[i] == 0:\n            res += s\n            continue\n        k = int(math.log(b[i], 2))\n        for j in range(20):\n            bv = b[i] >> j & 1\n            if bv == 0:\n                res += (bits[j] - t[k][j]) * (1 << j)\n            else:\n                res += t[k][j] * (1 << j)\n                res += (n - bits[j] - (msb[k] - t[k][j])) * (1 << j)\n    print(res)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    s = sum(a)\n    msb = [0] * 20\n    bits = [0] * 20\n    t = [[0 for i in range(20)] for j in range(20)]\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        k = int(math.log(a[i], 2))\n        msb[k] += 1\n        for j in range(20):\n            bv = a[i] >> j & 1\n            bits[j] += bv\n            t[k][j] += bv\n    ans = 0\n    for i in range(n):\n        if b[i] == 0:\n            ans += s\n            continue\n        k = int(math.log(b[i], 2))\n        for j in range(20):\n            bv = b[i] >> j & 1\n            if bv == 0:\n                ans = ans + (bits[j] - t[k][j]) * (1 << j)\n            else:\n                ans += t[k][j] * (1 << j)\n                ans += (n - bits[j] - (msb[k] - t[k][j])) * (1 << j)\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sum1 = 0\n    for i in range(n):\n        sum1 += a[i]\n    msb = [0] * 20\n    bits = [0] * 20\n    t = [[0 for i in range(20)] for j in range(20)]\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        k = int(math.log(a[i], 2))\n        msb[k] += 1\n        for j in range(20):\n            bv = a[i] >> j & 1\n            bits[j] += bv\n            t[k][j] += bv\n    ans = 0\n    for i in range(n):\n        if b[i] == 0:\n            ans += sum1\n            continue\n        k = int(math.log(b[i], 2))\n        for j in range(20):\n            bv = b[i] >> j & 1\n            if bv == 0:\n                ans = ans + (bits[j] - t[k][j]) * (1 << j)\n            else:\n                ans = ans + t[k][j] * (1 << j)\n                ans = ans + (n - bits[j] - (msb[k] - t[k][j])) * (1 << j)\n    print(ans)", "import math\ntc = int(input())\nfor i in range(tc):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sum1 = 0\n    for i in range(n):\n        sum1 += a[i]\n    msb = [0] * 20\n    bits = [0] * 20\n    t = [[0 for i in range(20)] for j in range(20)]\n    for i in range(n):\n        if a[i] == 0:\n            continue\n        k = int(math.log(a[i], 2))\n        msb[k] += 1\n        for j in range(20):\n            bv = a[i] >> j & 1\n            bits[j] += bv\n            t[k][j] += bv\n    ans = 0\n    for i in range(n):\n        if b[i] == 0:\n            ans += sum1\n            continue\n        k = int(math.log(b[i], 2))\n        for j in range(20):\n            bv = b[i] >> j & 1\n            if bv == 0:\n                ans = ans + (bits[j] - t[k][j]) * (1 << j)\n            else:\n                ans = ans + t[k][j] * (1 << j)\n                ans = ans + (n - bits[j] - (msb[k] - t[k][j])) * (1 << j)\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    setbit = [0 for i in range(20)]\n    msbbit = [0 for i in range(20)]\n    mat = [[0 for i in range(20)] for j in range(20)]\n    tot = 0\n    for i in range(n):\n        tot += a[i]\n        k = -1\n        for j in range(20):\n            if a[i] & 1 << j != 0:\n                setbit[j] += 1\n                k = j\n        if k != -1:\n            msbbit[k] += 1\n            for j in range(20):\n                if a[i] & 1 << j != 0:\n                    mat[k][j] += 1\n    ans = 0\n    for i in range(n):\n        k = -1\n        for j in range(20):\n            if b[i] & 1 << j != 0:\n                k = j\n        if k == -1:\n            ans += tot\n            continue\n        for j in range(20):\n            if b[i] & 1 << j:\n                ans += (1 << j) * mat[k][j]\n                ans += (1 << j) * (n - msbbit[k] - (setbit[j] - mat[k][j]))\n            else:\n                ans += (1 << j) * (setbit[j] - mat[k][j])\n    sys.stdout.write(str(ans) + '\\n')", "import sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    setbit = [0 for i in range(20)]\n    msbbit = [0 for i in range(20)]\n    mat = [[0 for i in range(20)] for j in range(20)]\n    tot = 0\n    for i in range(n):\n        tot += a[i]\n        k = -1\n        for j in range(20):\n            if a[i] & 1 << j != 0:\n                setbit[j] += 1\n                k = j\n        if k != -1:\n            msbbit[k] += 1\n            for j in range(20):\n                if a[i] & 1 << j != 0:\n                    mat[k][j] += 1\n    ans = 0\n    for i in range(n):\n        k = -1\n        for j in range(20):\n            if b[i] & 1 << j != 0:\n                k = j\n        if k == -1:\n            ans += tot\n            continue\n        for j in range(20):\n            if b[i] & 1 << j:\n                ans += (1 << j) * mat[k][j]\n                ans += (1 << j) * (n - msbbit[k] - (setbit[j] - mat[k][j]))\n            else:\n                ans += (1 << j) * (setbit[j] - mat[k][j])\n    sys.stdout.write(str(ans) + '\\n')", "from math import log2\n\ndef debug_matrix(a):\n    for row in a:\n        print(row)\n    print()\n\ndef debug_list(a):\n    print(a)\n    print()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    x = [0] * 21\n    y = [0] * 21\n    cx = [0] * 21\n    cy = [0] * 21\n    result = [0] * 21\n    zx = 0\n    zy = 0\n    for i in range(21):\n        x[i] = [0] * 21\n        y[i] = [0] * 21\n    for num in a:\n        if num == 0:\n            zx += 1\n            continue\n        row = int(log2(num))\n        cx[row] += 1\n        col = 0\n        while num > 0:\n            if num & 1:\n                x[row][col] += 1\n            col += 1\n            num >>= 1\n    for num in b:\n        if num == 0:\n            zy += 1\n            continue\n        row = int(log2(num))\n        cy[row] += 1\n        col = 0\n        while num > 0:\n            if num % 2 == 1:\n                y[row][col] += 1\n            col += 1\n            num >>= 1\n    for i in range(21):\n        if cx[i] == 0:\n            continue\n        for j in range(21):\n            if cy[j] == 0:\n                continue\n            if i == j:\n                for k in range(21):\n                    result[k] += x[i][k] * y[j][k]\n            else:\n                for k in range(21):\n                    result[k] += (cx[i] - x[i][k]) * y[j][k]\n                    result[k] += (cy[j] - y[j][k]) * x[i][k]\n    val = 0\n    pow = 1\n    for i in result:\n        val += pow * i\n        pow <<= 1\n    if zx > 0:\n        val += sum(b) * zx\n    if zy > 0:\n        val += sum(a) * zy\n    print(val)", "def get_msb(n):\n    ans = -1\n    for j in range(21):\n        if 1 << j & n:\n            ans = j\n    return ans\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    msb = [0] * 21\n    bits = [0] * 21\n    bit_table = [[0] * 21 for j in range(21)]\n    s = 0\n    for i in range(N):\n        a = A[i]\n        s += a\n        k = get_msb(a)\n        if k != -1:\n            msb[k] += 1\n            for j in range(k + 1):\n                if 1 << j & a:\n                    bits[j] += 1\n                    bit_table[k][j] += 1\n    res = 0\n    for i in range(N):\n        if B[i] == 0:\n            res += s\n        else:\n            k = get_msb(B[i])\n            for j in range(21):\n                if 1 << j & B[i]:\n                    res += (1 << j) * bit_table[k][j]\n                    res += (1 << j) * (N - bits[j] - msb[k] + bit_table[k][j])\n                else:\n                    res += (1 << j) * (bits[j] - bit_table[k][j])\n    print(res)"]