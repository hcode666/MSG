["def kni(x, y):\n    lst = []\n    if x > 1 and y > 2:\n        lst.append([x - 1, y - 2])\n    if x < 8 and y > 2:\n        lst.append([x + 1, y - 2])\n    if x > 2 and y > 1:\n        lst.append([x - 2, y - 1])\n    if x < 7 and y > 1:\n        lst.append([x + 2, y - 1])\n    if x > 2 and y < 8:\n        lst.append([x - 2, y + 1])\n    if x < 7 and y < 8:\n        lst.append([x + 2, y + 1])\n    if x > 1 and y < 7:\n        lst.append([x - 1, y + 2])\n    if x < 8 and y < 7:\n        lst.append([x + 1, y + 2])\n    return lst\nt = int(input())\nwhile t > 0:\n    f = 0\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    p1 = kni(x1, y1)\n    p2 = kni(x2, y2)\n    for p in p1:\n        if p in p2:\n            f = 1\n            break\n    if f == 1:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "l = [[0 for i in range(8)] for j in range(8)]\n\ndef che(x, y):\n    fill(x + 1, y + 2)\n    fill(x + 2, y + 1)\n    fill(x - 1, y + 2)\n    fill(x - 1, y - 2)\n    fill(x + 1, y - 2)\n    fill(x + 2, y - 1)\n    fill(x - 2, y + 1)\n    fill(x - 2, y - 1)\n\ndef fill(x, y):\n    if x >= 0 and x < 8 and (y >= 0) and (y < 8):\n        l[y][x] += 1\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (c, d) = map(int, input().split())\n    che(a - 1, b - 1)\n    che(c - 1, d - 1)\n    w = 0\n    for i in range(8):\n        if l[i].count(2) >= 1:\n            w = 1\n            break\n    if w == 0:\n        print('NO')\n    else:\n        print('YES')\n    l = [[0 for i in range(8)] for j in range(8)]", "def isCorner(r, c):\n    if r == 1 or r == 8:\n        if c == 1 or c == 8:\n            return True\n        else:\n            return False\n    else:\n        return False\nT = int(input())\nfor i in range(T):\n    (X1, Y1) = [int(n) for n in input().split()]\n    (X2, Y2) = [int(n) for n in input().split()]\n    if X1 == X2 and abs(Y1 - Y2) == 2 or (Y1 == Y2 and abs(X1 - X2) == 2):\n        print('YES')\n        continue\n    elif X1 == X2 and abs(Y1 - Y2) == 4 or (Y1 == Y2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 2 and abs(Y1 - Y2) == 4 or (abs(Y1 - Y2) == 2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 3 or (abs(Y1 - Y2) == 1 and abs(X1 - X2) == 3):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 3 and abs(Y1 - Y2) == 3:\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 1:\n        if isCorner(X1, Y1) == False and isCorner(X2, Y2) == False:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "def isCorner(r, c):\n    if r == 1 or r == 8:\n        if c == 1 or c == 8:\n            return True\n        else:\n            return False\n    else:\n        return False\nT = int(input())\nfor i in range(T):\n    (X1, Y1) = [int(n) for n in input().split()]\n    (X2, Y2) = [int(n) for n in input().split()]\n    if X1 == X2 and abs(Y1 - Y2) == 2 or (Y1 == Y2 and abs(X1 - X2) == 2):\n        print('YES')\n        continue\n    elif X1 == X2 and abs(Y1 - Y2) == 4 or (Y1 == Y2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 2 and abs(Y1 - Y2) == 4 or (abs(Y1 - Y2) == 2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 3 or (abs(Y1 - Y2) == 1 and abs(X1 - X2) == 3):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 3 and abs(Y1 - Y2) == 3:\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 1:\n        if isCorner(X1, Y1) == False and isCorner(X2, Y2) == False:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "def isCorner(r, c):\n    if r == 1 or r == 8:\n        if c == 1 or c == 8:\n            return True\n        else:\n            return False\n    else:\n        return False\nT = int(input())\nfor i in range(T):\n    (X1, Y1) = [int(n) for n in input().split()]\n    (X2, Y2) = [int(n) for n in input().split()]\n    if X1 == X2 and abs(Y1 - Y2) == 2 or (Y1 == Y2 and abs(X1 - X2) == 2):\n        print('YES')\n        continue\n    elif X1 == X2 and abs(Y1 - Y2) == 4 or (Y1 == Y2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 2 and abs(Y1 - Y2) == 4 or (abs(Y1 - Y2) == 2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 3 or (abs(Y1 - Y2) == 1 and abs(X1 - X2) == 3):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 3 and abs(Y1 - Y2) == 3:\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 1:\n        if isCorner(X1, Y1) == False and isCorner(X2, Y2) == False:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "moves = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]]\nfor i in range(int(input())):\n    boll = False\n    c1 = input().split()\n    c1 = [int(val) for val in c1]\n    c2 = input().split()\n    c2 = [int(val) for val in c2]\n    for move in moves:\n        point = [c1[0] + move[0], c1[1] + move[1]]\n        if point[0] >= 1 and point[0] <= 8 and (point[1] >= 1) and (point[1] <= 8):\n            for move2 in moves:\n                point2 = [c2[0] + move2[0], c2[1] + move2[1]]\n                if point2[0] >= 1 and point2[0] <= 8 and (point2[1] >= 1) and (point2[1] <= 8):\n                    if point2 == point:\n                        boll = True\n                        print('YES')\n                        break\n            if boll:\n                break\n    if not boll:\n        print('NO')", "moves = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]]\nfor i in range(int(input())):\n    boll = False\n    c1 = input().split()\n    c1 = [int(val) for val in c1]\n    c2 = input().split()\n    c2 = [int(val) for val in c2]\n    for move in moves:\n        point = [c1[0] + move[0], c1[1] + move[1]]\n        if point[0] >= 1 and point[0] <= 8 and (point[1] >= 1) and (point[1] <= 8):\n            for move2 in moves:\n                point2 = [c2[0] + move2[0], c2[1] + move2[1]]\n                if point2[0] >= 1 and point2[0] <= 8 and (point2[1] >= 1) and (point2[1] <= 8):\n                    if point2 == point:\n                        boll = True\n                        print('YES')\n                        break\n            if boll:\n                break\n    if not boll:\n        print('NO')", "moves = [[2, 1], [2, -1], [-2, 1], [-2, -1], [1, 2], [1, -2], [-1, 2], [-1, -2]]\nfor i in range(int(input())):\n    boll = False\n    c1 = input().split()\n    c1 = [int(val) for val in c1]\n    c2 = input().split()\n    c2 = [int(val) for val in c2]\n    for move in moves:\n        point = [c1[0] + move[0], c1[1] + move[1]]\n        if point[0] >= 1 and point[0] <= 8 and (point[1] >= 1) and (point[1] <= 8):\n            for move2 in moves:\n                point2 = [c2[0] + move2[0], c2[1] + move2[1]]\n                if point2[0] >= 1 and point2[0] <= 8 and (point2[1] >= 1) and (point2[1] <= 8):\n                    if point2 == point:\n                        boll = True\n                        print('YES')\n                        break\n            if boll:\n                break\n    if not boll:\n        print('NO')", "def isCorner(r, c):\n    if r == 1 or r == 8:\n        if c == 1 or c == 8:\n            return True\n        else:\n            return False\n    else:\n        return False\nT = int(input())\nfor i in range(T):\n    (X1, Y1) = [int(n) for n in input().split()]\n    (X2, Y2) = [int(n) for n in input().split()]\n    if X1 == X2 and abs(Y1 - Y2) == 2 or (Y1 == Y2 and abs(X1 - X2) == 2):\n        print('YES')\n        continue\n    elif X1 == X2 and abs(Y1 - Y2) == 4 or (Y1 == Y2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 2 and abs(Y1 - Y2) == 4 or (abs(Y1 - Y2) == 2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 3 or (abs(Y1 - Y2) == 1 and abs(X1 - X2) == 3):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 3 and abs(Y1 - Y2) == 3:\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 1:\n        if isCorner(X1, Y1) == False and isCorner(X2, Y2) == False:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "def isCorner(r, c):\n    if r == 1 or r == 8:\n        if c == 1 or c == 8:\n            return True\n        else:\n            return False\n    else:\n        return False\nT = int(input())\nfor i in range(T):\n    (X1, Y1) = [int(n) for n in input().split()]\n    (X2, Y2) = [int(n) for n in input().split()]\n    if X1 == X2 and abs(Y1 - Y2) == 2 or (Y1 == Y2 and abs(X1 - X2) == 2):\n        print('YES')\n        continue\n    elif X1 == X2 and abs(Y1 - Y2) == 4 or (Y1 == Y2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 2 and abs(Y1 - Y2) == 4 or (abs(Y1 - Y2) == 2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 3 or (abs(Y1 - Y2) == 1 and abs(X1 - X2) == 3):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 3 and abs(Y1 - Y2) == 3:\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 1:\n        if isCorner(X1, Y1) == False and isCorner(X2, Y2) == False:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "def isCorner(r, c):\n    if r == 1 or r == 8:\n        if c == 1 or c == 8:\n            return True\n        else:\n            return False\n    else:\n        return False\nT = int(input())\nfor i in range(T):\n    (X1, Y1) = [int(n) for n in input().split()]\n    (X2, Y2) = [int(n) for n in input().split()]\n    if X1 == X2 and abs(Y1 - Y2) == 2 or (Y1 == Y2 and abs(X1 - X2) == 2):\n        print('YES')\n        continue\n    elif X1 == X2 and abs(Y1 - Y2) == 4 or (Y1 == Y2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 2 and abs(Y1 - Y2) == 4 or (abs(Y1 - Y2) == 2 and abs(X1 - X2) == 4):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 3 or (abs(Y1 - Y2) == 1 and abs(X1 - X2) == 3):\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 3 and abs(Y1 - Y2) == 3:\n        print('YES')\n        continue\n    elif abs(X1 - X2) == 1 and abs(Y1 - Y2) == 1:\n        if isCorner(X1, Y1) == False and isCorner(X2, Y2) == False:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "rel_pos = [[1, 2], [2, 1], [1, -2], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n\ndef knight_circle(x1, y1):\n    li = []\n    for pos in rel_pos:\n        if x1 + pos[0] >= 1 and x1 + pos[0] <= 8:\n            if y1 + pos[1] >= 1 and y1 + pos[1] <= 8:\n                li.append([x1 + pos[0], y1 + pos[1]])\n    return li\nfor _ in range(int(input())):\n    res = 'NO'\n    (x1, y1) = map(int, input().split(' '))\n    (x2, y2) = map(int, input().split(' '))\n    li1 = knight_circle(x1, y1)\n    li2 = knight_circle(x2, y2)\n    for i in li1:\n        if i in li2:\n            res = 'YES'\n            break\n    print(res)", "rel_pos = [[1, 2], [2, 1], [1, -2], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n\ndef knight_circle(x1, y1):\n    li = []\n    for pos in rel_pos:\n        if x1 + pos[0] >= 1 and x1 + pos[0] <= 8:\n            if y1 + pos[1] >= 1 and y1 + pos[1] <= 8:\n                li.append([x1 + pos[0], y1 + pos[1]])\n    return li\nfor _ in range(int(input())):\n    res = 'NO'\n    (x1, y1) = map(int, input().split(' '))\n    (x2, y2) = map(int, input().split(' '))\n    li1 = knight_circle(x1, y1)\n    li2 = knight_circle(x2, y2)\n    for i in li1:\n        if i in li2:\n            res = 'YES'\n            break\n    print(res)", "rel_pos = [[1, 2], [2, 1], [1, -2], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n\ndef knight_circle(x1, y1):\n    li = []\n    for pos in rel_pos:\n        if x1 + pos[0] >= 1 and x1 + pos[0] <= 8:\n            if y1 + pos[1] >= 1 and y1 + pos[1] <= 8:\n                li.append([x1 + pos[0], y1 + pos[1]])\n    return li\nfor _ in range(int(input())):\n    res = 'NO'\n    (x1, y1) = map(int, input().split(' '))\n    (x2, y2) = map(int, input().split(' '))\n    li1 = knight_circle(x1, y1)\n    li2 = knight_circle(x2, y2)\n    for i in li1:\n        if i in li2:\n            res = 'YES'\n            break\n    print(res)", "t = int(input())\nfor _ in range(t):\n    d = {}\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    dx = [-2, -2, 2, 2, -1, 1, -1, 1]\n    dy = [-1, 1, -1, 1, -2, -2, 2, 2]\n    for i in range(8):\n        kp = (x1 + dx[i], y1 + dy[i])\n        d[kp] = 1\n    for i in range(8):\n        kp = (x2 + dx[i], y2 + dy[i])\n        if kp in d and kp[0] >= 1 and (kp[0] <= 8) and (kp[1] >= 1) and (kp[1] <= 8):\n            print('YES')\n            break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (x1, y1) = list(map(int, input().split()))\n    (x2, y2) = list(map(int, input().split()))\n    n = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\n    for (dx, dy) in n:\n        nx = x1 + dx\n        ny = y1 + dy\n        if (nx - x2, ny - y2) in n:\n            if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n                print('YES')\n                break\n    else:\n        print('NO')", "N_moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\nfor tx in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (dx, dy) in N_moves:\n        nx = x1 + dx\n        ny = y1 + dy\n        if (nx - x2, ny - y2) in N_moves:\n            if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n                print('YES')\n                break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    c = 0\n    a1 = [[x1 - 1, y1 - 2], [x1 - 2, y1 - 1], [x1 + 1, y1 + 2], [x1 + 2, y1 + 1], [x1 - 1, y1 + 2], [x1 - 2, y1 + 1], [x1 + 1, y1 - 2], [x1 + 2, y1 - 1]]\n    a2 = [[x2 - 1, y2 - 2], [x2 - 2, y2 - 1], [x2 + 1, y2 + 2], [x2 + 2, y2 + 1], [x2 - 1, y2 + 2], [x2 - 2, y2 + 1], [x2 + 1, y2 - 2], [x2 + 2, y2 - 1]]\n    for i in a1:\n        for j in a2:\n            if i == j and (i[0] > 0 and i[0] < 9 and (i[1] > 0) and (i[1] < 9)) and (j[0] > 0 and j[0] < 9 and (j[1] > 0) and (j[1] < 9)):\n                print('YES')\n                c = -1\n                break\n        if c == -1:\n            break\n    if c == 0:\n        print('NO')", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    c = False\n    a1 = [[x1 - 1, y1 - 2], [x1 - 2, y1 - 1], [x1 + 1, y1 + 2], [x1 + 2, y1 + 1], [x1 - 1, y1 + 2], [x1 - 2, y1 + 1], [x1 + 1, y1 - 2], [x1 + 2, y1 - 1]]\n    a2 = [[x2 - 1, y2 - 2], [x2 - 2, y2 - 1], [x2 + 1, y2 + 2], [x2 + 2, y2 + 1], [x2 - 1, y2 + 2], [x2 - 2, y2 + 1], [x2 + 1, y2 - 2], [x2 + 2, y2 - 1]]\n    for i in a1:\n        for j in a2:\n            if i == j and (i[0] > 0 and i[0] < 9 and (i[1] > 0) and (i[1] < 9)) and (j[0] > 0 and j[0] < 9 and (j[1] > 0) and (j[1] < 9)):\n                c = True\n                break\n    if c:\n        print('YES')\n    else:\n        print('NO')", "def remove_neg(arr):\n    n = 0\n    while n < len(arr):\n        (i, j) = arr[n]\n        if i < 1 or j < 1 or i > 8 or (j > 8):\n            del arr[n]\n            n -= 1\n        n += 1\n    return arr\nfor _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    c = False\n    a1 = [[x1 - 2, y1 - 1], [x1 - 2, y1 + 1], [x1 - 1, y1 - 2], [x1 - 1, y1 + 2], [x1 + 1, y1 - 2], [x1 + 1, y1 + 2], [x1 + 2, y1 - 1], [x1 + 2, y1 + 1]]\n    a2 = [[x2 - 2, y2 - 1], [x2 - 2, y2 + 1], [x2 - 1, y2 - 2], [x2 - 1, y2 + 2], [x2 + 1, y2 - 2], [x2 + 1, y2 + 2], [x2 + 2, y2 - 1], [x2 + 2, y2 + 1]]\n    remove_neg(a1)\n    remove_neg(a2)\n    for a in a1:\n        for b in a2:\n            if a == b:\n                c = True\n                break\n    if c:\n        print('YES')\n    else:\n        print('NO')", "def remove_neg(arr):\n    n = 0\n    while n < len(arr):\n        (i, j) = arr[n]\n        if i < 1 or j < 1 or i > 8 or (j > 8):\n            del arr[n]\n            n -= 1\n        n += 1\n    return arr\nfor _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    h1 = [[x1 - 2, y1 - 1], [x1 - 2, y1 + 1], [x1 - 1, y1 - 2], [x1 - 1, y1 + 2], [x1 + 1, y1 - 2], [x1 + 1, y1 + 2], [x1 + 2, y1 - 1], [x1 + 2, y1 + 1]]\n    h2 = [[x2 - 2, y2 - 1], [x2 - 2, y2 + 1], [x2 - 1, y2 - 2], [x2 - 1, y2 + 2], [x2 + 1, y2 - 2], [x2 + 1, y2 + 2], [x2 + 2, y2 - 1], [x2 + 2, y2 + 1]]\n    remove_neg(h1)\n    remove_neg(h2)\n    ans = False\n    for a in h1:\n        for b in h2:\n            if a == b:\n                ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "def remove_neg(arr):\n    n = 0\n    while n < len(arr):\n        (i, j) = arr[n]\n        if i < 1 or j < 1 or i > 8 or (j > 8):\n            del arr[n]\n            n -= 1\n        n += 1\n    return arr\nfor _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    h1 = [[x1 - 2, y1 - 1], [x1 - 2, y1 + 1], [x1 - 1, y1 - 2], [x1 - 1, y1 + 2], [x1 + 1, y1 - 2], [x1 + 1, y1 + 2], [x1 + 2, y1 - 1], [x1 + 2, y1 + 1]]\n    h2 = [[x2 - 2, y2 - 1], [x2 - 2, y2 + 1], [x2 - 1, y2 - 2], [x2 - 1, y2 + 2], [x2 + 1, y2 - 2], [x2 + 1, y2 + 2], [x2 + 2, y2 - 1], [x2 + 2, y2 + 1]]\n    remove_neg(h1)\n    remove_neg(h2)\n    ans = False\n    for a in h1:\n        for b in h2:\n            if a == b:\n                ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "(t, n) = (int(input()), 1)\nN_pos = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\nwhile n <= t:\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (cx, cy) in N_pos:\n        nx = x1 + cx\n        ny = y1 + cy\n        if (nx - x2, ny - y2) in N_pos:\n            if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n                print('YES')\n                break\n    else:\n        print('NO')\n    n += 1", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    first = []\n    if x1 - 1 > 0:\n        if y1 - 2 > 0:\n            first.append((x1 - 1, y1 - 2))\n        if y1 + 2 < 9:\n            first.append((x1 - 1, y1 + 2))\n    if x1 - 2 > 0:\n        if y1 - 1 > 0:\n            first.append((x1 - 2, y1 - 1))\n        if y1 + 1 < 9:\n            first.append((x1 - 2, y1 + 1))\n    if x1 + 1 < 9:\n        if y1 - 2 > 0:\n            first.append((x1 + 1, y1 - 2))\n        if y1 + 2 < 9:\n            first.append((x1 + 1, y1 + 2))\n    if x1 + 2 < 9:\n        if y1 - 1 > 0:\n            first.append((x1 + 2, y1 - 1))\n        if y1 + 1 < 9:\n            first.append((x1 + 2, y1 + 1))\n    f1 = set(first)\n    first = []\n    if x2 - 1 > 0:\n        if y2 - 2 > 0:\n            first.append((x2 - 1, y2 - 2))\n        if y2 + 2 < 9:\n            first.append((x2 - 1, y2 + 2))\n    if x2 - 2 > 0:\n        if y2 - 1 > 0:\n            first.append((x2 - 2, y2 - 1))\n        if y2 + 1 < 9:\n            first.append((x2 - 2, y2 + 1))\n    if x2 + 1 < 9:\n        if y2 - 2 > 0:\n            first.append((x2 + 1, y2 - 2))\n        if y2 + 2 < 9:\n            first.append((x2 + 1, y2 + 2))\n    if x2 + 2 < 9:\n        if y2 - 1 > 0:\n            first.append((x2 + 2, y2 - 1))\n        if y2 + 1 < 9:\n            first.append((x2 + 2, y2 + 1))\n    f2 = set(first)\n    if len(f1 & f2) >= 1:\n        print('YES')\n    else:\n        print('NO')", "def remove_neg(arr):\n    n = 0\n    while n < len(arr):\n        (i, j) = arr[n]\n        if i < 1 or j < 1 or i > 8 or (j > 8):\n            del arr[n]\n            n -= 1\n        n += 1\n    return arr\nfor _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    h1 = [[x1 - 2, y1 - 1], [x1 - 2, y1 + 1], [x1 - 1, y1 - 2], [x1 - 1, y1 + 2], [x1 + 1, y1 - 2], [x1 + 1, y1 + 2], [x1 + 2, y1 - 1], [x1 + 2, y1 + 1]]\n    h2 = [[x2 - 2, y2 - 1], [x2 - 2, y2 + 1], [x2 - 1, y2 - 2], [x2 - 1, y2 + 2], [x2 + 1, y2 - 2], [x2 + 1, y2 + 2], [x2 + 2, y2 - 1], [x2 + 2, y2 + 1]]\n    remove_neg(h1)\n    remove_neg(h2)\n    ans = False\n    for a in h1:\n        for b in h2:\n            if a == b:\n                ans = True\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "(t, n) = (int(input()), 1)\nN_pos = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\nwhile n <= t:\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (cx, cy) in N_pos:\n        nx = x1 + cx\n        ny = y1 + cy\n        if (nx - x2, ny - y2) in N_pos:\n            if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n                print('YES')\n                break\n    else:\n        print('NO')\n    n += 1", "import sys\nimport random\nfrom collections import defaultdict\n\nclass DefaultDict:\n\n    def __init__(self, default=None):\n        self.default = default\n        self.x = random.randrange(1, 1 << 31)\n        self.dd = defaultdict(default)\n\n    def __repr__(self):\n        return '{' + ', '.join((f'{k ^ self.x}: {v}' for (k, v) in self.dd.items())) + '}'\n\n    def __eq__(self, other):\n        for k in set(self) | set(other):\n            if self[k] != other[k]:\n                return False\n        return True\n\n    def __or__(self, other):\n        res = DefaultDict(self.default)\n        for (k, v) in self.dd:\n            res[k] = v\n        for (k, v) in other.dd:\n            res[k] = v\n        return res\n\n    def __len__(self):\n        return len(self.dd)\n\n    def __getitem__(self, item):\n        return self.dd[item ^ self.x]\n\n    def __setitem__(self, key, value):\n        self.dd[key ^ self.x] = value\n\n    def __delitem__(self, key):\n        del self.dd[key ^ self.x]\n\n    def __contains__(self, item):\n        return item ^ self.x in self.dd\n\n    def items(self):\n        for (k, v) in self.dd.items():\n            yield (k ^ self.x, v)\n\n    def keys(self):\n        for k in self.dd:\n            yield (k ^ self.x)\n\n    def values(self):\n        for v in self.dd.values():\n            yield v\n\n    def __iter__(self):\n        for k in self.dd:\n            yield (k ^ self.x)\n\nclass Counter(DefaultDict):\n\n    def __init__(self, aa=[]):\n        super().__init__(int)\n        for a in aa:\n            self.dd[a ^ self.x] += 1\n\n    def __add__(self, other):\n        res = Counter()\n        for k in set(self) | set(other):\n            v = self[k] + other[k]\n            if v > 0:\n                res[k] = v\n        return res\n\n    def __sub__(self, other):\n        res = Counter()\n        for k in set(self) | set(other):\n            v = self[k] - other[k]\n            if v > 0:\n                res[k] = v\n        return res\n\n    def __and__(self, other):\n        res = Counter()\n        for k in self:\n            v = min(self[k], other[k])\n            if v > 0:\n                res[k] = v\n        return res\n\n    def __or__(self, other):\n        res = Counter()\n        for k in set(self) | set(other):\n            v = max(self[k], other[k])\n            if v > 0:\n                res[k] = v\n        return res\n\nclass Set:\n\n    def __init__(self, aa=[]):\n        self.x = random.randrange(1, 1 << 31)\n        self.st = set()\n        for a in aa:\n            self.st.add(a ^ self.x)\n\n    def __repr__(self):\n        return '{' + ', '.join((str(k ^ self.x) for k in self.st)) + '}'\n\n    def __len__(self):\n        return len(self.st)\n\n    def add(self, item):\n        self.st.add(item ^ self.x)\n\n    def discard(self, item):\n        self.st.discard(item ^ self.x)\n\n    def __contains__(self, item):\n        return item ^ self.x in self.st\n\n    def __iter__(self):\n        for k in self.st:\n            yield (k ^ self.x)\n\n    def pop(self):\n        return self.st.pop() ^ self.x\n\n    def __or__(self, other):\n        res = Set(self)\n        for a in other:\n            res.add(a)\n        return res\n\n    def __and__(self, other):\n        res = Set()\n        for a in self:\n            if a in other:\n                res.add(a)\n        for a in other:\n            if a in self:\n                res.add(a)\n        return res\nint1 = lambda x: int(x) - 1\npDB = lambda *x: print(*x, end='\\n', file=sys.stderr)\np2D = lambda x: print(*x, sep='\\n', end='\\n\\n', file=sys.stderr)\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ndij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\ninf = (1 << 63) - 1\nmd = 10 ** 9 + 7\n\ndef solve():\n\n    def pos(i, j):\n        res = set()\n        for a in range(1, 3):\n            for c in [1, -1]:\n                for d in [1, -1]:\n                    di = a * c\n                    dj = (3 - a) * d\n                    (ni, nj) = (i + di, j + dj)\n                    if ni < 0 or ni >= n or nj < 0 or (nj >= n):\n                        continue\n                    res.add((ni, nj))\n        return res\n    n = 8\n    (i, j) = LI1()\n    (x, y) = LI1()\n    return pos(i, j) & pos(x, y)\ntestnumber = II()\nfor testcase in range(testnumber):\n    print('YES' if solve() else 'NO')", "rel_pos = [[1, 2], [2, 1], [1, -2], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n\ndef knight_circle(x1, y1):\n    li = []\n    for pos in rel_pos:\n        if x1 + pos[0] >= 1 and x1 + pos[0] <= 8:\n            if y1 + pos[1] >= 1 and y1 + pos[1] <= 8:\n                li.append([x1 + pos[0], y1 + pos[1]])\n    return li\nfor _ in range(int(input())):\n    ret = 'NO'\n    (x1, y1) = map(int, input().split(' '))\n    (x2, y2) = map(int, input().split(' '))\n    li1 = knight_circle(x1, y1)\n    li2 = knight_circle(x2, y2)\n    for i in li1:\n        if i in li2:\n            ret = 'YES'\n            break\n    print(ret)", "import sys\nimport random\nfrom collections import defaultdict\n\nclass DefaultDict:\n\n    def __init__(self, default=None):\n        self.default = default\n        self.x = random.randrange(1, 1 << 31)\n        self.dd = defaultdict(default)\n\n    def __repr__(self):\n        return '{' + ', '.join((f'{k ^ self.x}: {v}' for (k, v) in self.dd.items())) + '}'\n\n    def __eq__(self, other):\n        for k in set(self) | set(other):\n            if self[k] != other[k]:\n                return False\n        return True\n\n    def __or__(self, other):\n        res = DefaultDict(self.default)\n        for (k, v) in self.dd:\n            res[k] = v\n        for (k, v) in other.dd:\n            res[k] = v\n        return res\n\n    def __len__(self):\n        return len(self.dd)\n\n    def __getitem__(self, item):\n        return self.dd[item ^ self.x]\n\n    def __setitem__(self, key, value):\n        self.dd[key ^ self.x] = value\n\n    def __delitem__(self, key):\n        del self.dd[key ^ self.x]\n\n    def __contains__(self, item):\n        return item ^ self.x in self.dd\n\n    def items(self):\n        for (k, v) in self.dd.items():\n            yield (k ^ self.x, v)\n\n    def keys(self):\n        for k in self.dd:\n            yield (k ^ self.x)\n\n    def values(self):\n        for v in self.dd.values():\n            yield v\n\n    def __iter__(self):\n        for k in self.dd:\n            yield (k ^ self.x)\n\nclass Counter(DefaultDict):\n\n    def __init__(self, aa=[]):\n        super().__init__(int)\n        for a in aa:\n            self.dd[a ^ self.x] += 1\n\n    def __add__(self, other):\n        res = Counter()\n        for k in set(self) | set(other):\n            v = self[k] + other[k]\n            if v > 0:\n                res[k] = v\n        return res\n\n    def __sub__(self, other):\n        res = Counter()\n        for k in set(self) | set(other):\n            v = self[k] - other[k]\n            if v > 0:\n                res[k] = v\n        return res\n\n    def __and__(self, other):\n        res = Counter()\n        for k in self:\n            v = min(self[k], other[k])\n            if v > 0:\n                res[k] = v\n        return res\n\n    def __or__(self, other):\n        res = Counter()\n        for k in set(self) | set(other):\n            v = max(self[k], other[k])\n            if v > 0:\n                res[k] = v\n        return res\n\nclass Set:\n\n    def __init__(self, aa=[]):\n        self.x = random.randrange(1, 1 << 31)\n        self.st = set()\n        for a in aa:\n            self.st.add(a ^ self.x)\n\n    def __repr__(self):\n        return '{' + ', '.join((str(k ^ self.x) for k in self.st)) + '}'\n\n    def __len__(self):\n        return len(self.st)\n\n    def add(self, item):\n        self.st.add(item ^ self.x)\n\n    def discard(self, item):\n        self.st.discard(item ^ self.x)\n\n    def __contains__(self, item):\n        return item ^ self.x in self.st\n\n    def __iter__(self):\n        for k in self.st:\n            yield (k ^ self.x)\n\n    def pop(self):\n        return self.st.pop() ^ self.x\n\n    def __or__(self, other):\n        res = Set(self)\n        for a in other:\n            res.add(a)\n        return res\n\n    def __and__(self, other):\n        res = Set()\n        for a in self:\n            if a in other:\n                res.add(a)\n        for a in other:\n            if a in self:\n                res.add(a)\n        return res\nint1 = lambda x: int(x) - 1\npDB = lambda *x: print(*x, end='\\n', file=sys.stderr)\np2D = lambda x: print(*x, sep='\\n', end='\\n\\n', file=sys.stderr)\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ndij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\ninf = (1 << 63) - 1\nmd = 10 ** 9 + 7\n\ndef solve():\n\n    def pos(i, j):\n        res = set()\n        for a in range(1, 3):\n            for c in [1, -1]:\n                for d in [1, -1]:\n                    di = a * c\n                    dj = (3 - a) * d\n                    (ni, nj) = (i + di, j + dj)\n                    if ni < 0 or ni >= n or nj < 0 or (nj >= n):\n                        continue\n                    res.add((ni, nj))\n        return res\n    n = 8\n    (i, j) = LI1()\n    (x, y) = LI1()\n    return pos(i, j) & pos(x, y)\ntestnumber = II()\nfor testcase in range(testnumber):\n    print('YES' if solve() else 'NO')", "from math import gcd, sqrt, ceil, floor, log10, log2\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(1000000000.0) + 7\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\n\ndef inp_graph(n, adj, gtype=0):\n    pass\n\ndef solve(*args, **kwargs):\n    ((x1, y1), (x2, y2)) = args\n    pos1 = [(x1 + 2, y1 + 1), (x1 + 2, y1 - 1), (x1 - 2, y1 + 1), (x1 - 2, y1 - 1), (x1 - 1, y1 + 2), (x1 + 1, y1 + 2), (x1 - 1, y1 - 2), (x1 + 1, y1 - 2)]\n    pos2 = [(x2 + 2, y2 + 1), (x2 + 2, y2 - 1), (x2 - 2, y2 + 1), (x2 - 2, y2 - 1), (x2 - 1, y2 + 2), (x2 + 1, y2 + 2), (x2 - 1, y2 - 2), (x2 + 1, y2 - 2)]\n    for (X1, Y1) in pos1:\n        if X1 <= 0 or X1 > 8 or Y1 <= 0 or (Y1 > 8):\n            continue\n        for (X2, Y2) in pos2:\n            if X2 <= 0 or X2 > 8 or Y2 <= 0 or (Y2 > 8):\n                continue\n            if (X1, Y1) == (X2, Y2):\n                return 'YES'\n    return 'NO'\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        arg2 = inp_vars(int, SPACE)\n        arg3 = inp_vars(int, SPACE)\n        res = solve(*(arg2, arg3))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep=' ')\n        else:\n            print(res)\nmain()", "def solve():\n    (a, b) = map(int, input().split())\n    (x, y) = map(int, input().split())\n    s = set()\n    for d in [b + 1, b - 1]:\n        if d >= 1 and d <= 8:\n            for c in [a + 2, a - 2]:\n                if c >= 1 and c <= 8:\n                    s.add((c, d))\n    for d in [b + 2, b - 2]:\n        if d >= 1 and d <= 8:\n            for c in [a + 1, a - 1]:\n                if c >= 1 and c <= 8:\n                    s.add((c, d))\n    for d in [y + 1, y - 1]:\n        if d >= 1 and d <= 8:\n            for c in [x + 2, x - 2]:\n                if c >= 1 and c <= 8:\n                    if (c, d) in s:\n                        return 'YES'\n    for d in [y + 2, y - 2]:\n        if d >= 1 and d <= 8:\n            for c in [x + 1, x - 1]:\n                if c >= 1 and c <= 8:\n                    if (c, d) in s:\n                        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\n\ndef take_input(type='int'):\n    if type == 'int':\n        return int(input())\n    elif type == 'str':\n        return input()\n    elif type == 'list-int':\n        return list(map(int, input().split()))\n    elif type == 'list-float':\n        return list(map(float, input().split()))\n    else:\n        return None\nfor _ in range(int(input())):\n    (X1, Y1) = take_input('list-int')\n    (X2, Y2) = take_input('list-int')\n    cellsH = [+1, -1, +2, -2]\n    cellsV = [+2, -2, +1, -1]\n    (empty1, empty2) = (set(), set())\n    for i in range(len(cellsH)):\n        for j in range(len(cellsV)):\n            if abs(cellsH[i]) != abs(cellsV[j]):\n                (x1, y1) = (cellsH[i] + X1, cellsV[j] + Y1)\n                (x2, y2) = (cellsH[i] + X2, cellsV[j] + Y2)\n                if x1 >= 1 and x1 <= 8 and (y1 >= 1) and (y1 <= 8):\n                    empty1.add((x1, y1))\n                if x2 >= 1 and x2 <= 8 and (y2 >= 1) and (y2 <= 8):\n                    empty2.add((x2, y2))\n            else:\n                continue\n    cells = empty1.intersection(empty2)\n    if len(cells) > 0:\n        print('YES')\n    else:\n        print('NO')", "def solve():\n    (a, b) = map(int, input().split())\n    (x, y) = map(int, input().split())\n    s = set()\n    for d in [b + 1, b - 1]:\n        if d >= 1 and d <= 8:\n            for c in [a + 2, a - 2]:\n                if c >= 1 and c <= 8:\n                    s.add((c, d))\n    for d in [b + 2, b - 2]:\n        if d >= 1 and d <= 8:\n            for c in [a + 1, a - 1]:\n                if c >= 1 and c <= 8:\n                    s.add((c, d))\n    for d in [y + 1, y - 1]:\n        if d >= 1 and d <= 8:\n            for c in [x + 2, x - 2]:\n                if c >= 1 and c <= 8:\n                    if (c, d) in s:\n                        return 'YES'\n    for d in [y + 2, y - 2]:\n        if d >= 1 and d <= 8:\n            for c in [x + 1, x - 1]:\n                if c >= 1 and c <= 8:\n                    if (c, d) in s:\n                        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    (a, b) = map(int, input().split())\n    (x, y) = map(int, input().split())\n    s = set()\n    for d in [b + 1, b - 1]:\n        if d >= 1 and d <= 8:\n            for c in [a + 2, a - 2]:\n                if c >= 1 and c <= 8:\n                    s.add((c, d))\n    for d in [b + 2, b - 2]:\n        if d >= 1 and d <= 8:\n            for c in [a + 1, a - 1]:\n                if c >= 1 and c <= 8:\n                    s.add((c, d))\n    for d in [y + 1, y - 1]:\n        if d >= 1 and d <= 8:\n            for c in [x + 2, x - 2]:\n                if c >= 1 and c <= 8:\n                    if (c, d) in s:\n                        return 'YES'\n    for d in [y + 2, y - 2]:\n        if d >= 1 and d <= 8:\n            for c in [x + 1, x - 1]:\n                if c >= 1 and c <= 8:\n                    if (c, d) in s:\n                        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    (c, d) = map(int, input().split())\n    l = []\n    l.append(a - 1)\n    l.append(b + 2)\n    l.append(a - 2)\n    l.append(b + 1)\n    l.append(a + 1)\n    l.append(b - 2)\n    l.append(a + 2)\n    l.append(b - 1)\n    l.append(a + 1)\n    l.append(b + 2)\n    l.append(a + 2)\n    l.append(b + 1)\n    l.append(a - 1)\n    l.append(b - 2)\n    l.append(a - 2)\n    l.append(b - 1)\n    flag = 0\n    for i in range(0, len(l) - 1, 2):\n        if c + 1 == l[i] and 1 <= c + 1 <= 8:\n            if d - 2 == l[i + 1] and 1 <= d - 2 <= 8:\n                flag = 1\n        if c + 2 == l[i] and 1 <= c + 2 <= 8:\n            if d - 1 == l[i + 1] and 1 <= d - 1 <= 8:\n                flag = 1\n        if c - 1 == l[i] and 1 <= c - 1 <= 8:\n            if d + 2 == l[i + 1] and 1 <= d + 2 <= 8:\n                flag = 1\n        if c - 2 == l[i] and 1 <= c - 2 <= 8:\n            if d + 1 == l[i + 1] and 1 <= d + 1 <= 8:\n                flag = 1\n        if c + 1 == l[i] and 1 <= c + 1 <= 8:\n            if d + 2 == l[i + 1] and 1 <= d + 2 <= 8:\n                flag = 1\n        if c + 2 == l[i] and 1 <= c + 2 <= 8:\n            if d + 1 == l[i + 1] and 1 <= d + 1 <= 8:\n                flag = 1\n        if c - 1 == l[i] and 1 <= c - 1 <= 8:\n            if d - 2 == l[i + 1] and 1 <= d - 2 <= 8:\n                flag = 1\n        if c - 2 == l[i] and 1 <= c - 2 <= 8:\n            if d - 1 == l[i + 1] and 1 <= d - 1 <= 8:\n                flag = 1\n    if flag == 0:\n        print('NO')\n    else:\n        print('YES')", "(t, n) = (int(input()), 1)\nN_pos = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\nwhile n <= t:\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (cx, cy) in N_pos:\n        nx = x1 + cx\n        ny = y1 + cy\n        if (nx - x2, ny - y2) in N_pos:\n            if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n                print('YES')\n                break\n    else:\n        print('NO')\n    n += 1", "(t, n) = (int(input()), 1)\nN_pos = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\nwhile n <= t:\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (cx, cy) in N_pos:\n        nx = x1 + cx\n        ny = y1 + cy\n        if (nx - x2, ny - y2) in N_pos:\n            if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n                print('YES')\n                break\n    else:\n        print('NO')\n    n += 1", "rel_pos = [[1, 2], [2, 1], [1, -2], [2, -1], [-1, 2], [-1, -2], [-2, 1], [-2, -1]]\n\ndef knight_circle(x1, y1):\n    li = []\n    for pos in rel_pos:\n        if x1 + pos[0] >= 1 and x1 + pos[0] <= 8:\n            if y1 + pos[1] >= 1 and y1 + pos[1] <= 8:\n                li.append([x1 + pos[0], y1 + pos[1]])\n    return li\nfor _ in range(int(input())):\n    ret = 'NO'\n    (x1, y1) = map(int, input().split(' '))\n    (x2, y2) = map(int, input().split(' '))\n    li1 = knight_circle(x1, y1)\n    li2 = knight_circle(x2, y2)\n    for i in li1:\n        if i in li2:\n            ret = 'YES'\n            break\n    print(ret)", "t = int(input())\nfor z in range(t):\n    a = list((int(i) for i in input().split(' ')))\n    b = list((int(i) for i in input().split(' ')))\n    (x, y) = ([], [])\n    (x1, y1, x2, y2) = (a[0], a[1], b[0], b[1])\n    for i in range(2):\n        if i:\n            p = 2\n        else:\n            p = 1\n        if p == 2:\n            q = 1\n        else:\n            q = 2\n        x.append([x1 + p, y1 + q])\n        x.append([x1 - p, y1 - q])\n        x.append([x1 + p, y1 - q])\n        x.append([x1 - p, y1 + q])\n        y.append([x2 + p, y2 + q])\n        y.append([x2 - p, y2 - q])\n        y.append([x2 + p, y2 - q])\n        y.append([x2 - p, y2 + q])\n    ans = 'NO'\n    an = [0, 0]\n    for i in x:\n        if i in y and (not (i[0] > 8 or i[1] < 1 or i[1] > 8 or (i[0] < 1))):\n            ans = 'YES'\n            an = i\n            break\n    print(ans)", "t = int(input())\nfor z in range(t):\n    a = list((int(i) for i in input().split(' ')))\n    b = list((int(i) for i in input().split(' ')))\n    (x, y) = ([], [])\n    (x1, y1, x2, y2) = (a[0], a[1], b[0], b[1])\n    for i in range(2):\n        if i:\n            p = 2\n        else:\n            p = 1\n        if p == 2:\n            q = 1\n        else:\n            q = 2\n        x.append([x1 + p, y1 + q])\n        x.append([x1 - p, y1 - q])\n        x.append([x1 + p, y1 - q])\n        x.append([x1 - p, y1 + q])\n        y.append([x2 + p, y2 + q])\n        y.append([x2 - p, y2 - q])\n        y.append([x2 + p, y2 - q])\n        y.append([x2 - p, y2 + q])\n    ans = 'NO'\n    an = [0, 0]\n    for i in x:\n        if i in y and (not (i[0] > 8 or i[1] < 1 or i[1] > 8 or (i[0] < 1))):\n            ans = 'YES'\n            an = i\n            break\n    print(ans)", "def check(x1, y1, x2, y2):\n    dx = [2, -2, 1, -1, -1, 1, -2, 2]\n    dy = [-1, 1, -2, 2, -2, 2, -1, 1]\n    m1 = []\n    m2 = []\n    for i in range(8):\n        x = x1 + dx[i]\n        y = y1 + dy[i]\n        if x >= 1 and x <= 8 and (y <= 8) and (y >= 1):\n            m1.append([x, y])\n    for i in range(8):\n        x = x2 + dx[i]\n        y = y2 + dy[i]\n        if x >= 1 and x <= 8 and (y <= 8) and (y >= 1):\n            m2.append([x, y])\n    for i in m1:\n        if i in m2:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    check(x1, y1, x2, y2)\n    isPossible = check(x1, y1, x2, y2)\n    if isPossible:\n        print('YES')\n    else:\n        print('NO')", "def pos(x, y):\n    ls = []\n    if x > 1 and y > 2:\n        ls.append([x - 1, y - 2])\n    if x < 8 and y > 2:\n        ls.append([x + 1, y - 2])\n    if x > 2 and y > 1:\n        ls.append([x - 2, y - 1])\n    if x < 7 and y > 1:\n        ls.append([x + 2, y - 1])\n    if x > 2 and y < 8:\n        ls.append([x - 2, y + 1])\n    if x < 7 and y < 8:\n        ls.append([x + 2, y + 1])\n    if x > 1 and y < 7:\n        ls.append([x - 1, y + 2])\n    if x < 8 and y < 7:\n        ls.append([x + 1, y + 2])\n    return ls\nfor t in range(int(input())):\n    f = 0\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    p1 = pos(x1, y1)\n    p2 = pos(x2, y2)\n    for p in p1:\n        if p in p2:\n            f = 1\n            break\n    if f == 1:\n        print('YES')\n    else:\n        print('NO')", "directions = [(1, 2), (-1, 2), (1, -2), (-1, -2), (2, 1), (-2, 1), (2, -1), (-2, -1)]\nfor _ in range(int(input())):\n    found = False\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for i in range(1, 9):\n        for j in range(1, 9):\n            cells = list(map(lambda dir: (i + dir[0], j + dir[1]), directions))\n            if (x1, y1) in cells and (x2, y2) in cells:\n                print('YES')\n                found = True\n                break\n        if found:\n            break\n    if not found:\n        print('NO')", "moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (2, -1), (2, 1), (1, -2), (1, 2)]\nfor _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (dx, dy) in moves:\n        nx = dx + x1\n        ny = dy + y1\n        if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n            if (nx - x2, ny - y2) in moves:\n                print('YES')\n                break\n    else:\n        print('NO')", "moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (2, -1), (2, 1), (1, -2), (1, 2)]\nfor _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (dx, dy) in moves:\n        nx = dx + x1\n        ny = dy + y1\n        if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n            if (nx - x2, ny - y2) in moves:\n                print('YES')\n                break\n    else:\n        print('NO')", "T = int(input())\nans = []\nfor i in range(T):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    if x1 > x2:\n        a = x1 - x2\n    else:\n        a = x2 - x1\n    if y1 > y2:\n        b = y1 - y2\n    else:\n        b = y2 - y1\n    if a > 4 or b > 4:\n        ans.append('NO')\n    elif (x1 == 1 and y1 == 1 or (x2 == 1 and y2 == 1) or (x1 == 1 and y1 == 8) or (x2 == 1 and y2 == 8) or (x1 == 8 and y1 == 8) or (x2 == 8 and y2 == 8) or (x1 == 8 and y1 == 1) or (x2 == 8 and y2 == 1)) and a == 1 and (b == 1):\n        ans.append('NO')\n    elif b == 2 and a == 2 or (b == 4 and a == 4) or (a == 0 and b == 0):\n        ans.append('NO')\n    elif a % 2 == 0 and b % 2 == 0:\n        ans.append('YES')\n    elif a % 2 == 1 and b % 2 == 1:\n        ans.append('YES')\n    else:\n        ans.append('NO')\nfor i in ans:\n    print(i)", "n = int(input())\nmoves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (2, -1), (2, 1), (1, -2), (1, 2)]\nfor _ in range(n):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (dx, dy) in moves:\n        nx = dx + x1\n        ny = dy + y1\n        if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n            if (nx - x2, ny - y2) in moves:\n                print('YES')\n                break\n    else:\n        print('NO')", "n = int(input())\nmoves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (2, -1), (2, 1), (1, -2), (1, 2)]\nfor _ in range(n):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (dx, dy) in moves:\n        nx = dx + x1\n        ny = dy + y1\n        if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n            if (nx - x2, ny - y2) in moves:\n                print('YES')\n                break\n    else:\n        print('NO')", "n = int(input())\nmoves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (2, -1), (2, 1), (1, -2), (1, 2)]\nfor _ in range(n):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (dx, dy) in moves:\n        nx = dx + x1\n        ny = dy + y1\n        if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n            if (nx - x2, ny - y2) in moves:\n                print('YES')\n                break\n    else:\n        print('NO')", "import math as m\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return abs(a)\n\ndef ncr(N, R):\n    return m.factorial(N) // (m.factorial(R) * m.factorial(N - R))\n\ndef getL():\n    return [int(i) for i in input().split(' ')]\n\ndef getInt():\n    return int(input())\n\ndef chk(r, c):\n    if (r > 0 and c > 0) and (r < 9 and c < 9):\n        return True\n    return False\n\ndef findpair(a, b):\n    mypairs = set()\n    r = a - 2\n    c = b - 1\n    if chk(r, c):\n        mypairs.add((r, c))\n    r = a - 1\n    c = b - 2\n    if chk(r, c):\n        mypairs.add((r, c))\n    r = a - 2\n    c = b + 1\n    if chk(r, c):\n        mypairs.add((r, c))\n    r = a - 1\n    c = b + 2\n    if chk(r, c):\n        mypairs.add((r, c))\n    r = a + 2\n    c = b - 1\n    if chk(r, c):\n        mypairs.add((r, c))\n    r = a + 1\n    c = b - 2\n    if chk(r, c):\n        mypairs.add((r, c))\n    r = a + 2\n    c = b + 1\n    if chk(r, c):\n        mypairs.add((r, c))\n    r = a + 1\n    c = b + 2\n    if chk(r, c):\n        mypairs.add((r, c))\n    return mypairs\n\ndef solve():\n    (a, b) = getL()\n    (x, y) = getL()\n    p1 = findpair(a, b)\n    p2 = findpair(x, y)\n    if len(p1.intersection(p2)) == 0:\n        print('NO')\n    else:\n        print('YES')\nfor _ in range(getInt()):\n    solve()", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    flag = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if ((x1 - i == 1 or x1 - i == -1) and (y1 - j == 2 or y1 - j == -2) or ((x1 - i == 2 or x1 - i == -2) and (y1 - j == 1 or y1 - j == -1))) and ((x2 - i == 1 or x2 - i == -1) and (y2 - j == 2 or y2 - j == -2) or ((x2 - i == 2 or x2 - i == -2) and (y2 - j == 1 or y2 - j == -1))):\n                flag = 1\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (p, q) = map(int, input().split())\n    l = []\n    k = []\n    for i in [-2, +2]:\n        for j in [-1, +1]:\n            l.append((a + i, b + j))\n            k.append((p + i, q + j))\n            l.append((a + j, b + i))\n            k.append((p + j, q + i))\n    f = 0\n    for (v, s) in k:\n        if (v, s) in l and v > 0 and (v < 9) and (s > 0) and (s < 9):\n            f = 1\n            break\n    if f == 0:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    h = [2, 2, -2, -2, 1, 1, -1, -1]\n    v = [1, -1, -1, 1, 2, -2, 2, -2]\n    s = set()\n    for i in range(8):\n        nx = x1 + h[i]\n        ny = y1 + v[i]\n        if nx >= 1 and ny >= 1 and (nx <= 8) and (ny <= 8):\n            s.add(tuple([nx, ny]))\n    ff = 0\n    for i in range(8):\n        nx = x2 + h[i]\n        ny = y2 + v[i]\n        if nx >= 1 and ny >= 1 and (nx <= 8) and (ny <= 8):\n            if tuple([nx, ny]) in s:\n                ff = 1\n                break\n    if ff == 0:\n        print('NO')\n    else:\n        print('YES')", "from sys import stdin\nfrom sys import stdout\nT = int(stdin.readline())\nfor i in range(0, T):\n    (X1, Y1) = map(int, stdin.readline().split())\n    (X2, Y2) = map(int, stdin.readline().split())\n    piece1 = [(X1 - 2, Y1 - 1), (X1 - 2, Y1 + 1), (X1 - 1, Y1 + 2), (X1 + 1, Y1 + 2), (X1 + 2, Y1 + 1), (X1 + 2, Y1 - 1), (X1 - 1, Y1 - 2), (X1 + 1, Y1 - 2)]\n    piece2 = [(X2 - 2, Y2 - 1), (X2 - 2, Y2 + 1), (X2 - 1, Y2 + 2), (X2 + 1, Y2 + 2), (X2 + 2, Y2 + 1), (X2 + 2, Y2 - 1), (X2 - 1, Y2 - 2), (X2 + 1, Y2 - 2)]\n    ans = 'NO'\n    while ans == 'NO':\n        for i in piece1:\n            if 1 <= i[0] <= 8 and 1 <= i[1] <= 8:\n                for j in piece2:\n                    if 1 <= j[0] <= 8 and 1 <= j[1] <= 8 and (i == j):\n                        ans = 'YES'\n        break\n    print(ans)", "from sys import stdin\nfrom sys import stdout\nT = int(stdin.readline())\nfor i in range(0, T):\n    (X1, Y1) = map(int, stdin.readline().split())\n    (X2, Y2) = map(int, stdin.readline().split())\n    piece1 = [(X1 - 2, Y1 - 1), (X1 - 2, Y1 + 1), (X1 - 1, Y1 + 2), (X1 + 1, Y1 + 2), (X1 + 2, Y1 + 1), (X1 + 2, Y1 - 1), (X1 - 1, Y1 - 2), (X1 + 1, Y1 - 2)]\n    piece2 = [(X2 - 2, Y2 - 1), (X2 - 2, Y2 + 1), (X2 - 1, Y2 + 2), (X2 + 1, Y2 + 2), (X2 + 2, Y2 + 1), (X2 + 2, Y2 - 1), (X2 - 1, Y2 - 2), (X2 + 1, Y2 - 2)]\n    ans = 'NO'\n    while ans == 'NO':\n        for i in piece1:\n            if 1 <= i[0] <= 8 and 1 <= i[1] <= 8:\n                for j in piece2:\n                    if 1 <= j[0] <= 8 and 1 <= j[1] <= 8 and (i == j):\n                        ans = 'YES'\n        break\n    print(ans)", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    c = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if ((x1 - i == 1 or x1 - i == -1) and (y1 - j == 2 or y1 - j == -2) or ((x1 - i == 2 or x1 - i == -2) and (y1 - j == 1 or y1 - j == -1))) and ((x2 - i == 1 or x2 - i == -1) and (y2 - j == 2 or y2 - j == -2) or ((x2 - i == 2 or x2 - i == -2) and (y2 - j == 1 or y2 - j == -1))):\n                c = c + 1\n    if c >= 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    c = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if ((x1 - i == 1 or x1 - i == -1) and (y1 - j == 2 or y1 - j == -2) or ((x1 - i == 2 or x1 - i == -2) and (y1 - j == 1 or y1 - j == -1))) and ((x2 - i == 1 or x2 - i == -1) and (y2 - j == 2 or y2 - j == -2) or ((x2 - i == 2 or x2 - i == -2) and (y2 - j == 1 or y2 - j == -1))):\n                c = c + 1\n    if c >= 1:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    T = int(input())\n    for _ in range(T):\n        (x1, y1) = map(int, input().split())\n        (x2, y2) = map(int, input().split())\n        attackPosFirst = set([(x1 - 1, y1 - 2), (x1 - 1, y1 + 2), (x1 + 1, y1 - 2), (x1 + 1, y1 + 2), (x1 - 2, y1 - 1), (x1 + 2, y1 - 1), (x1 - 2, y1 + 1), (x1 + 2, y1 + 1)])\n        attackPosSecond = set([(x2 - 1, y2 - 2), (x2 - 1, y2 + 2), (x2 + 1, y2 - 2), (x2 + 1, y2 + 2), (x2 - 2, y2 - 1), (x2 + 2, y2 - 1), (x2 - 2, y2 + 1), (x2 + 2, y2 + 1)])\n        ans = False\n        for (x, y) in attackPosFirst:\n            if 1 <= x <= 8 and 1 <= y <= 8 and ((x, y) in attackPosSecond):\n                ans = True\n                break\n        if ans:\n            print('YES')\n        else:\n            print('NO')\nmain()", "def main():\n    T = int(input())\n    for _ in range(T):\n        (x1, y1) = map(lambda x: int(x) - 1, input().split())\n        (x2, y2) = map(lambda x: int(x) - 1, input().split())\n        arr = [[0 for _ in range(8)] for _ in range(8)]\n        attackPosFirst = set([(x1 - 1, y1 - 2), (x1 - 1, y1 + 2), (x1 + 1, y1 - 2), (x1 + 1, y1 + 2), (x1 - 2, y1 - 1), (x1 + 2, y1 - 1), (x1 - 2, y1 + 1), (x1 + 2, y1 + 1)])\n        attackPosSecond = set([(x2 - 1, y2 - 2), (x2 - 1, y2 + 2), (x2 + 1, y2 - 2), (x2 + 1, y2 + 2), (x2 - 2, y2 - 1), (x2 + 2, y2 - 1), (x2 - 2, y2 + 1), (x2 + 2, y2 + 1)])\n        ans = False\n        for (x, y) in attackPosFirst:\n            if 0 <= x <= 7 and 0 <= y <= 7 and ((x, y) in attackPosSecond):\n                ans = True\n                break\n        if ans:\n            print('YES')\n        else:\n            print('NO')\nmain()", "t = int(input())\nfor T in range(t):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    psbl1 = {(x1 + 1, y1 + 2), (x1 + 2, y1 + 1), (x1 + 1, y1 - 2), (x1 + 2, y1 - 1), (x1 - 1, y1 + 2), (x1 - 2, y1 + 1), (x1 - 1, y1 - 2), (x1 - 2, y1 - 1)}\n    psbl2 = {(x2 + 1, y2 + 2), (x2 + 2, y2 + 1), (x2 + 1, y2 - 2), (x2 + 2, y2 - 1), (x2 - 1, y2 + 2), (x2 - 2, y2 + 1), (x2 - 1, y2 - 2), (x2 - 2, y2 - 1)}\n    k = True\n    for (i, j) in psbl1:\n        if i in range(1, 9) and j in range(1, 9):\n            if (i, j) in psbl2:\n                print('YES')\n                k = False\n                break\n    if k:\n        print('NO')", "t = int(input())\nfor T in range(t):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    psbl1 = {(x1 + 1, y1 + 2), (x1 + 2, y1 + 1), (x1 + 1, y1 - 2), (x1 + 2, y1 - 1), (x1 - 1, y1 + 2), (x1 - 2, y1 + 1), (x1 - 1, y1 - 2), (x1 - 2, y1 - 1)}\n    psbl2 = {(x2 + 1, y2 + 2), (x2 + 2, y2 + 1), (x2 + 1, y2 - 2), (x2 + 2, y2 - 1), (x2 - 1, y2 + 2), (x2 - 2, y2 + 1), (x2 - 1, y2 - 2), (x2 - 2, y2 - 1)}\n    k = True\n    for (i, j) in psbl1:\n        if i in range(1, 9) and j in range(1, 9):\n            if (i, j) in psbl2:\n                print('YES')\n                k = False\n                break\n    if k:\n        print('NO')", "def knight(x1, y1, x2, y2):\n    dx = [2, 2, -2, -2, 1, 1, -1, -1]\n    dy = [1, -1, 1, -1, 2, -2, 2, -2]\n    flag = 0\n    mp = {}\n    n = len(dy)\n    for i in range(n):\n        x = x1 + dx[i]\n        y = y1 + dy[i]\n        if x <= 0 or x > 8 or y <= 0 or (y > 8):\n            continue\n        else:\n            mp[x, y] = i + 1\n    for i in range(n):\n        x = x2 + dx[i]\n        y = y2 + dy[i]\n        if x <= 0 or x > 8 or y <= 0 or (y > 8):\n            continue\n        elif (x, y) in mp:\n            flag = 1\n    if flag == 1:\n        return 'YES'\n    else:\n        return 'NO'\nfor _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    print(knight(x1, y1, x2, y2))", "for i in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    x = [2, 2, -2, -2, 1, -1, 1, -1]\n    y = [1, -1, 1, -1, 2, 2, -2, -2]\n    d = {}\n    for i in range(8):\n        tx1 = x1 + x[i]\n        ty1 = y1 + y[i]\n        if 8 >= tx1 >= 1 and 8 >= ty1 >= 1:\n            d[tx1, ty1] = d.get((tx1, ty1), 1)\n    for i in range(8):\n        tx2 = x2 + x[i]\n        ty2 = y2 + y[i]\n        if 8 >= tx2 >= 1 and 8 >= ty2 >= 1:\n            if d.get((tx2, ty2), 0) == 1:\n                print('YES')\n                break\n    else:\n        print('NO')", "for _ in range(int(input())):\n    cnt = 0\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    ans = []\n    li = []\n    if x1 - 2 >= 1:\n        if y1 - 1 >= 1:\n            t = [x1 - 2, y1 - 1]\n            ans.append(t)\n        if y1 + 1 <= 8:\n            t = [x1 - 2, y1 + 1]\n            ans.append(t)\n    if x1 - 1 >= 1:\n        if y1 - 2 >= 1:\n            t = [x1 - 1, y1 - 2]\n            ans.append(t)\n        if y1 + 2 <= 8:\n            t = [x1 - 1, y1 + 2]\n            ans.append(t)\n    if x1 + 2 <= 8:\n        if y1 - 1 >= 1:\n            t = [x1 + 2, y1 - 1]\n            ans.append(t)\n        if y1 + 1 <= 8:\n            t = [x1 + 2, y1 + 1]\n            ans.append(t)\n    if x1 + 1 <= 8:\n        if y1 - 2 >= 1:\n            t = [x1 + 1, y1 - 2]\n            ans.append(t)\n        if y1 + 2 <= 8:\n            t = [x1 + 1, y1 + 2]\n            ans.append(t)\n    if x2 - 2 >= 1:\n        if y2 - 1 >= 1:\n            t = [x2 - 2, y2 - 1]\n            li.append(t)\n        if y2 + 1 <= 8:\n            t = [x2 - 2, y2 + 1]\n            li.append(t)\n    if x2 - 1 >= 1:\n        if y2 - 2 >= 1:\n            t = [x2 - 1, y2 - 2]\n            li.append(t)\n        if y2 + 2 <= 8:\n            t = [x2 - 1, y2 + 2]\n            li.append(t)\n    if x2 + 2 <= 8:\n        if y2 - 1 >= 1:\n            t = [x2 + 2, y2 - 1]\n            li.append(t)\n        if y2 + 1 <= 8:\n            t = [x2 + 2, y2 + 1]\n            li.append(t)\n    if x2 + 1 <= 8:\n        if y2 - 2 >= 1:\n            t = [x2 + 1, y2 - 2]\n            li.append(t)\n        if y2 + 2 <= 8:\n            t = [x2 + 1, y2 + 2]\n            li.append(t)\n    for i in ans:\n        if i in li:\n            print('YES')\n            cnt = 1\n            break\n    if cnt == 0:\n        print('NO')", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    ans = 'NO'\n    for x in range(1, 9):\n        for y in range(1, 9):\n            mask = 0\n            for dx in [1, -1, 2, -2]:\n                for dy in [1, -1, 2, -2]:\n                    if dx % 2 == dy % 2:\n                        continue\n                    if x + dx == x1 and y + dy == y1:\n                        mask |= 1\n                    if x + dx == x2 and y + dy == y2:\n                        mask |= 2\n            if mask == 3:\n                ans = 'YES'\n    print(ans)", "p = [(1, 2), (-1, -2), (-1, 2), (1, -2), (2, 1), (-2, -1), (-2, 1), (2, -1)]\n\ndef fun(x, y):\n    s = set()\n    for (i, j) in p:\n        a = x + i\n        b = y + j\n        if 1 <= a <= 8 and 1 <= b <= 8:\n            s.add((a, b))\n    return s\nt = int(input())\nfor i in range(t):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    s1 = fun(x1, y1)\n    s2 = fun(x2, y2)\n    s3 = s1.intersection(s2)\n    if s3:\n        print('YES')\n    else:\n        print('NO')", "def possible(x, y):\n    lst1 = [x - 1, x + 2, x - 2, x - 2, x + 1, x + 1, x - 1, x + 2]\n    lst2 = [y - 2, y - 1, y + 1, y - 1, y + 2, y - 2, y + 2, y + 1]\n    return set(zip(lst1, lst2))\nfor i in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    (l1, l2) = (possible(x1, y1), possible(x2, y2))\n    s = l1.intersection(l2)\n    k = set(s)\n    if s == set():\n        print('NO')\n    else:\n        for (i, j) in s:\n            if i <= 0 or j <= 0 or i >= 9 or (j >= 9):\n                k.remove((i, j))\n        if k == set():\n            print('NO')\n        else:\n            print('YES')", "def possible(x, y):\n    lst1 = [x + 2, x + 2, x - 2, x - 2, x + 1, x + 1, x - 1, x - 1]\n    lst2 = [y + 1, y - 1, y + 1, y - 1, y + 2, y - 2, y + 2, y - 2]\n    return set(zip(lst1, lst2))\nfor i in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    (l1, l2) = (possible(x1, y1), possible(x2, y2))\n    s = l1.intersection(l2)\n    k = set(s)\n    if s == set():\n        print('NO')\n    else:\n        for (i, j) in s:\n            if i <= 0 or j <= 0 or i >= 9 or (j >= 9):\n                k.remove((i, j))\n        if k == set():\n            print('NO')\n        else:\n            print('YES')", "corner_points = [((1, 1), (2, 2)), ((8, 8), (7, 7)), ((8, 1), (7, 2)), ((1, 8), (2, 7))]\nT = int(input())\nfor i in range(T):\n    (x1, y1) = [int(x) for x in input().split()]\n    (x2, y2) = [int(x) for x in input().split()]\n    p1 = (x1, y1)\n    p2 = (x2, y2)\n    manhattan_distance = abs(x1 - x2) + abs(y1 - y2)\n    x_manhattan = abs(x1 - x2)\n    y_manhattan = abs(y1 - y2)\n    flag = 0\n    for p in corner_points:\n        if (p1, p2) == p or (p2, p1) == p:\n            print('NO')\n            flag = 1\n            break\n    if flag == 1:\n        pass\n    elif manhattan_distance == 2:\n        print('YES')\n    elif manhattan_distance == 4:\n        if x_manhattan == y_manhattan:\n            print('NO')\n        else:\n            print('YES')\n    elif manhattan_distance == 6:\n        if x_manhattan == 1 or y_manhattan == 1 or x_manhattan == 0 or (y_manhattan == 0):\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "p = [(1, 2), (-1, -2), (-1, 2), (1, -2), (2, 1), (-2, -1), (-2, 1), (2, -1)]\n\ndef fun(x, y):\n    s = set()\n    for (i, j) in p:\n        a = x + i\n        b = y + j\n        if 1 <= a <= 8 and 1 <= b <= 8:\n            s.add((a, b))\n    return s\nt = int(input())\nfor i in range(t):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    s1 = fun(x1, y1) & fun(x2, y2)\n    if s1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    ans = 'NO'\n    for x in range(1, 9):\n        for y in range(1, 9):\n            mask = 0\n            for dx in [1, 2, -1, -2]:\n                for dy in [1, 2, -1, -2]:\n                    if dx % 2 == dy % 2:\n                        continue\n                    if x + dx == x1 and y + dy == y1:\n                        mask |= 1\n                    if x + dx == x2 and y + dy == y2:\n                        mask |= 2\n            if mask == 3:\n                ans = 'YES'\n    print(ans)", "def check(x1, y1, x2, y2):\n    x = [2, -2, 1, -1, -1, 1, -2, 2]\n    y = [-1, 1, -2, 2, -2, 2, -1, 1]\n    m1 = []\n    m2 = []\n    for i in range(8):\n        mx = x1 + x[i]\n        my = y1 + y[i]\n        mx1 = x2 + x[i]\n        my1 = y2 + y[i]\n        if mx > 0 and mx < 9 and (my > 0) and (my < 9):\n            m1.append([mx, my])\n        if mx1 > 0 and mx1 < 9 and (my1 > 0) and (my1 < 9):\n            m2.append([mx1, my1])\n    for i in m1:\n        if i in m2:\n            return 'YES'\n    return 'NO'\nt = int(input())\nfor _ in range(t):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    print(check(x1, y1, x2, y2))", "def check(x1, y1, x2, y2):\n    dx = [2, -2, 1, -1, -1, 1, -2, 2]\n    dy = [-1, 1, -2, 2, -2, 2, -1, 1]\n    m1 = []\n    m2 = []\n    for i in range(8):\n        x = x1 + dx[i]\n        y = y1 + dy[i]\n        if x >= 1 and x <= 8 and (y <= 8) and (y >= 1):\n            m1.append([x, y])\n    for i in range(8):\n        x = x2 + dx[i]\n        y = y2 + dy[i]\n        if x >= 1 and x <= 8 and (y <= 8) and (y >= 1):\n            m2.append([x, y])\n    for i in m1:\n        if i in m2:\n            return True\n    return False\nt = int(input())\nfor i in range(t):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    check(x1, y1, x2, y2)\n    isPossible = check(x1, y1, x2, y2)\n    if isPossible:\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    s = 0\n    h = input()\n    h = h.split()\n    x = int(h[0])\n    y = int(h[1])\n    a = [[x + 2, y + 1], [x + 2, y - 1], [x - 2, y + 1], [x - 2, y - 1], [x + 1, y + 2], [x + 1, y - 2], [x - 1, y - 2], [x - 1, y + 2]]\n    c = []\n    d = []\n    for i in range(8):\n        if a[i][0] in range(1, 9) and a[i][1] in range(1, 9):\n            c.append(a[i])\n    p = input()\n    p = p.split()\n    x1 = int(p[0])\n    y1 = int(p[1])\n    b = [[x1 + 2, y1 + 1], [x1 + 2, y1 - 1], [x1 - 2, y1 + 1], [x1 - 2, y1 - 1], [x1 + 1, y1 + 2], [x1 + 1, y1 - 2], [x1 - 1, y1 - 2], [x1 - 1, y1 + 2]]\n    for i in range(8):\n        if b[i][0] in range(1, 9) and b[i][1] in range(1, 9):\n            d.append(b[i])\n    for i in range(len(c)):\n        if c[i] in d:\n            s = s + 1\n            break\n    if s == 0:\n        print('NO')\n    else:\n        print('YES')", "s = [[1, 1], [1, 8], [8, 1], [8, 8]]\nfor _ in range(int(input())):\n    (r1, c1) = map(int, input().split())\n    (r2, c2) = map(int, input().split())\n    if r2 == r1 and abs(c2 - c1) in [2, 4]:\n        print('YES')\n    elif abs(c2 == c1) == 1 and abs(r2 - r1) in [2, 4]:\n        print('YES')\n    elif abs(r2 - r1) == 2 and abs(c2 - c1) == 4:\n        print('YES')\n    elif abs(r2 - r1) == 4 and abs(c2 - c1) == 2:\n        print('YES')\n    elif abs(r2 - r1) == 3 and abs(c2 - c1) == 3:\n        print('YES')\n    elif abs(r2 - r1) == 1 and abs(c2 - c1) == 3:\n        print('YES')\n    elif abs(r2 - r1) == 3 and abs(c2 - c1) == 1:\n        print('YES')\n    elif abs(r2 - r1) == 1 and abs(c2 - c1) == 1 and ([r1, c1] not in s) and ([r2, c2] not in s):\n        print('YES')\n    else:\n        print('NO')", "N_moves = [(1, 2), (2, 1), (1, -2), (2, -1), (-1, 2), (-2, 1), (-1, -2), (-2, -1)]\nT = int(input())\nfor tx in range(T):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (dx, dy) in N_moves:\n        nx = x1 + dx\n        ny = y1 + dy\n        if (nx - x2, ny - y2) in N_moves:\n            if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n                print('YES')\n                break\n    else:\n        print('NO')", "N_moves = [(-2, -1), (-2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2), (2, -1), (2, 1)]\nT = int(input())\nfor tx in range(T):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    for (dx, dy) in N_moves:\n        nx = x1 + dx\n        ny = y1 + dy\n        if (nx - x2, ny - y2) in N_moves:\n            if nx >= 1 and nx <= 8 and (ny >= 1) and (ny <= 8):\n                print('YES')\n                break\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    (X1, Y1) = map(int, input().split())\n    (X2, Y2) = map(int, input().split())\n    X1 -= 1\n    Y1 -= 1\n    X2 -= 1\n    Y2 -= 1\n    found = False\n    dx = [-2, -2, 2, 2, 1, 1, -1, -1]\n    dy = [1, -1, 1, -1, -2, 2, 2, -2]\n    moves = {}\n    for (x, y) in zip(dx, dy):\n        if 0 <= X1 + x <= 7 and 0 <= Y1 + y <= 7:\n            moves[str((X1 + x, Y1 + y))] = [X1 + x, Y1 + y]\n    for (x, y) in zip(dx, dy):\n        if 0 <= X2 + x <= 7 and 0 <= Y2 + y <= 7:\n            k = str((X2 + x, Y2 + y))\n            if k in moves:\n                val = moves[k]\n                if val[0] != X2 and val[1] != Y2:\n                    found = True\n                    break\n    if found:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "T = int(input())\nfor tx in range(T):\n    (X1, Y1) = map(int, input().split())\n    (X2, Y2) = map(int, input().split())\n    delt = sorted([abs(X1 - X2), abs(Y1 - Y2)])\n    if delt in [[0, 2], [0, 4], [1, 3], [2, 4], [3, 3]]:\n        print('YES')\n    elif delt == [1, 1]:\n        if X1 in [1, 8] and Y1 in [1, 8] or (X2 in [1, 8] and Y2 in [1, 8]):\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('NO')", "t1 = int(input())\nfor _ in range(t1):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    l = [[2, 1], [1, 2], [2, -1], [-1, 2], [-2, 1], [1, -2], [-2, -1], [-1, -2]]\n    flag = 0\n    for i in l:\n        for j in l:\n            if x1 + i[0] == x2 + j[0] and y1 + i[1] == y2 + j[1] and (1 <= x1 + i[0] <= 8) and (1 <= y1 + i[1] <= 8):\n                print('YES')\n                flag = 1\n                break\n        if flag:\n            break\n    if not flag:\n        print('NO')", "T = int(input())\nfor _ in range(T):\n    ans = 'NO'\n    (X1, Y1) = map(int, input().split(' '))\n    (X2, Y2) = map(int, input().split(' '))\n    dx = [2, 2, 1, 1, -2, -2, -1, -1]\n    dy = [1, -1, 2, -2, 1, -1, 2, -2]\n    list_xy1 = []\n    list_xy2 = []\n    for i in range(8):\n        x1 = X1 + dx[i]\n        y1 = Y1 + dy[i]\n        if 1 <= x1 <= 8 and 1 <= y1 <= 8:\n            l1 = [x1, y1]\n            list_xy1.append(l1)\n    for j in range(8):\n        x2 = X2 + dx[j]\n        y2 = Y2 + dy[j]\n        if 1 <= x2 <= 8 and 1 <= y2 <= 8:\n            l2 = [x2, y2]\n            list_xy2.append(l2)\n    for k in range(len(list_xy1)):\n        for l in range(len(list_xy2)):\n            if list_xy1[k] == list_xy2[l]:\n                ans = 'YES'\n    print(ans)", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    lis = [[2, 1], [1, 2], [2, -1], [-1, 2], [-2, 1], [1, -2], [-2, -1], [-1, -2]]\n    flag = 0\n    for i in lis:\n        for j in lis:\n            if x1 + i[0] == x2 + j[0] and y1 + i[1] == y2 + j[1] and (1 <= x1 + i[0] <= 8) and (1 <= y1 + i[1] <= 8):\n                print('YES')\n                flag = 1\n                break\n        if flag:\n            break\n    if not flag:\n        print('NO')", "import math\nimport os\nimport random\nimport re\nimport sys\nfor _ in range(int(input())):\n    (x1, y1) = list(map(int, input().split()))\n    (x2, y2) = list(map(int, input().split()))\n    ans = 'NO'\n    for i in range(1, 9):\n        for j in range(1, 9):\n            count = 0\n            for x in [1, -1, 2, -2]:\n                for y in [1, -1, 2, -2]:\n                    if x % 2 == y % 2:\n                        continue\n                    if i + x == x1 and j + y == y1:\n                        count |= 1\n                    if i + x == x2 and j + y == y2:\n                        count |= 2\n            if count == 3:\n                ans = 'YES'\n    print(ans)", "def movePossible(x, y):\n    if 1 <= x <= 8 and 1 <= y <= 8:\n        return True\n    return False\n\ndef generateMoves(x, y):\n    possible_places = [(-2, -1), (-1, -2), (1, -2), (2, -1), (2, 1), (1, 2), (-1, 2), (-2, 1)]\n    threat_places = []\n    for (a, b) in possible_places:\n        p = x + a\n        q = y + b\n        if movePossible(p, q):\n            threat_places.append((p, q))\n    return threat_places\nt = int(input())\nfor _ in range(t):\n    (x1, y1) = list(map(int, input().split()))\n    (x2, y2) = list(map(int, input().split()))\n    threats = []\n    threats.extend(generateMoves(x1, y1))\n    threats.extend(generateMoves(x2, y2))\n    setThreats = set(threats)\n    if len(threats) > len(setThreats):\n        print('YES')\n    else:\n        print('NO')", "import math\nimport os\nimport random\nimport re\nimport sys\nfor _ in range(int(input())):\n    (x1, y1) = list(map(int, input().split()))\n    (x2, y2) = list(map(int, input().split()))\n    ans = 'NO'\n    for i in range(1, 9):\n        for j in range(1, 9):\n            count = 0\n            for x in [1, -1, 2, -2]:\n                for y in [1, -1, 2, -2]:\n                    if x % 2 == y % 2:\n                        continue\n                    if i + x == x1 and j + y == y1:\n                        count |= 1\n                    if i + x == x2 and j + y == y2:\n                        count |= 2\n            if count == 3:\n                ans = 'YES'\n    print(ans)", "n = int(input())\nfor _ in range(n):\n    resp = 'NO'\n    (x1, y1) = map(int, input().split(' '))\n    (x2, y2) = map(int, input().split(' '))\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if (abs(i - x1) == 2 and abs(j - y1) == 1 or (abs(i - x1) == 1 and abs(j - y1) == 2)) and (abs(i - x2) == 2 and abs(j - y2) == 1 or (abs(i - x2) == 1 and abs(j - y2) == 2)):\n                resp = 'YES'\n                break\n        if resp == 'YES':\n            break\n    print(resp)", "t = int(input())\nfor i in range(t):\n    (x1, y1) = list(map(int, input().split()))\n    (x2, y2) = list(map(int, input().split()))\n    if (abs(x1 - x2) == 2 or abs(x1 - x2) == 4) and y1 == y2 or ((abs(y1 - y2) == 2 or abs(y1 - y2) == 4) and x1 == x2):\n        print('YES')\n    elif abs(x1 - x2) == 2 and abs(y1 - y2) == 4 or (abs(y1 - y2) == 2 and abs(x1 - x2) == 4):\n        print('YES')\n    elif (abs(x1 - x2) == 1 and abs(y1 - y2) == 1) and ((x1, y1) not in ((1, 1), (8, 8), (1, 8), (8, 1)) and (x2, y2) not in ((1, 1), (8, 8), (1, 8), (8, 1))):\n        print('YES')\n    elif abs(x1 - x2) == 1 and abs(y1 - y2) == 3 or (abs(y1 - y2) == 1 and abs(x1 - x2) == 3):\n        print('YES')\n    elif abs(x1 - x2) == 3 and abs(y1 - y2) == 3:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    m = [(2, 1), (2, -1), (-2, 1), (-2, -1)]\n    (a, b) = (set(), set())\n    for (x, y) in m:\n        a.add((x1 + x, y1 + y))\n        a.add((x1 + y, y1 + x))\n        b.add((x2 + x, y2 + y))\n        b.add((x2 + y, y2 + x))\n    a = set(((x, y) for (x, y) in a if x > 0 and y > 0 and (x < 9) and (y < 9)))\n    b = set(((x, y) for (x, y) in b if x > 0 and y > 0 and (x < 9) and (y < 9)))\n    if a.intersection(b):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    (x1, y1) = map(int, input().split())\n    (x2, y2) = map(int, input().split())\n    c = abs(x1 - x2)\n    d = abs(y1 - y2)\n    a = c + d\n    if a == 2:\n        if 0 < x1 + 2 <= 8 and 0 < y1 + 1 <= 8 and (x1 + 2 == x2 + 1) and (y1 + 1 == y2 + 2) or (0 < x1 + 1 <= 8 and 0 < y1 + 2 <= 8 and (x1 + 1 == x2 + 2) and (y1 + 2 == y2 + 1)):\n            print('YES')\n        elif 0 < x1 - 2 <= 8 and 0 < y1 - 1 <= 8 and (x1 - 2 == x2 - 1) and (y1 - 1 == y2 - 2) or (0 < x1 - 1 <= 8 and 0 < y1 - 2 <= 8 and (x1 - 1 == x2 - 2) and (y1 - 2 == y2 - 1)):\n            print('YES')\n        elif 0 < x1 - 2 <= 8 and 0 < y1 + 1 <= 8 and (x1 - 2 == x2 - 1) and (y1 + 1 == y2 + 2) or (0 < x1 - 1 <= 8 and 0 < y1 + 2 <= 8 and (x1 - 1 == x2 - 2) and (y1 + 2 == y2 + 1)):\n            print('YES')\n        elif 0 < x1 + 2 <= 8 and 0 < y1 - 1 <= 8 and (x1 + 2 == x2 + 1) and (y1 - 1 == y2 - 2) or (0 < x1 + 1 <= 8 and 0 < y1 - 2 <= 8 and (x1 + 1 == x2 + 2) and (y1 - 2 == y2 - 1)):\n            print('YES')\n        elif c == 0 and d == 2 or (c == 2 or d == 0):\n            print('YES')\n        else:\n            print('NO')\n    elif a == 4 and c != 2 and (d != 2):\n        print('YES')\n    elif a == 6 and c > 0 and (d > 0) and (c != 5) and (d != 5):\n        print('YES')\n    else:\n        print('NO')", "n = int(input())\nfor i in range(n):\n    (X1, Y1) = map(int, input().split())\n    (X2, Y2) = map(int, input().split())\n    res = 'NO'\n    for row in range(1, 9):\n        for col in range(1, 9):\n            if (abs(row - X1) == 1 and abs(col - Y1) == 2 or (abs(row - X1) == 2 and abs(col - Y1) == 1)) and (abs(row - X2) == 1 and abs(col - Y2) == 2 or (abs(row - X2) == 2 and abs(col - Y2) == 1)):\n                res = 'YES'\n    print(res)"]