["m = 10 ** 5\np = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    b = [0] + list(map(int, input().split()))\n    f = [0] * n\n    g = [0] * n\n    f[1] = 1\n    g[1] = m - b[1]\n    for i in range(2, n):\n        g[i] = f[i - 1] * (m - max(b[i - 1], b[i] + 1) + 1)\n        if b[i - 1] > b[i]:\n            g[i] += g[i - 1]\n        elif b[i - 1] == b[i]:\n            f[i] = f[i - 1] + g[i - 1]\n        else:\n            f[i] = f[i - 1]\n        g[i] %= p\n        f[i] %= p\n    ans = g[n - 1] + f[n - 1] * (m - b[n - 1] + 1)\n    ans %= p\n    print(ans)\nfor t in range(int(input())):\n    solve()", "m = 10 ** 5\np = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    b = [0] + list(map(int, input().split()))\n    f = [0] * n\n    g = [0] * n\n    f[1] = 1\n    g[1] = m - b[1]\n    for i in range(2, n):\n        g[i] = f[i - 1] * (m - max(b[i - 1], b[i] + 1) + 1)\n        if b[i - 1] > b[i]:\n            g[i] += g[i - 1]\n        elif b[i - 1] == b[i]:\n            f[i] = f[i - 1] + g[i - 1]\n        else:\n            f[i] = f[i - 1]\n        g[i] %= p\n        f[i] %= p\n    ans = g[n - 1] + f[n - 1] * (m - b[n - 1] + 1)\n    ans %= p\n    print(ans)\nfor t in range(int(input())):\n    solve()", "m = 10 ** 5\np = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    b = [0] + list(map(int, input().split()))\n    f = [0] * n\n    g = [0] * n\n    f[1] = 1\n    g[1] = m - b[1]\n    for i in range(2, n):\n        g[i] = f[i - 1] * (m - max(b[i - 1], b[i] + 1) + 1)\n        if b[i - 1] > b[i]:\n            g[i] += g[i - 1]\n        elif b[i - 1] == b[i]:\n            f[i] = f[i - 1] + g[i - 1]\n        else:\n            f[i] = f[i - 1]\n        g[i] %= p\n        f[i] %= p\n    ans = g[n - 1] + f[n - 1] * (m - b[n - 1] + 1)\n    ans %= p\n    print(ans)\nfor t in range(int(input())):\n    solve()", "m = 10 ** 5\np = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    b = [0] + list(map(int, input().split()))\n    f = [0] * n\n    g = [0] * n\n    f[1] = 1\n    g[1] = m - b[1]\n    for i in range(2, n):\n        g[i] = f[i - 1] * (m - max(b[i - 1], b[i] + 1) + 1)\n        if b[i - 1] > b[i]:\n            g[i] += g[i - 1]\n        elif b[i - 1] == b[i]:\n            f[i] = f[i - 1] + g[i - 1]\n        else:\n            f[i] = f[i - 1]\n        g[i] %= p\n        f[i] %= p\n    ans = g[n - 1] + f[n - 1] * (m - b[n - 1] + 1)\n    ans %= p\n    print(ans)\nfor t in range(int(input())):\n    solve()", "m = 10 ** 5\np = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    b = [0] + list(map(int, input().split()))\n    f = [0] * n\n    g = [0] * n\n    f[1] = 1\n    g[1] = m - b[1]\n    for i in range(2, n):\n        g[i] = f[i - 1] * (m - max(b[i - 1], b[i] + 1) + 1)\n        if b[i - 1] > b[i]:\n            g[i] += g[i - 1]\n        elif b[i - 1] == b[i]:\n            f[i] = f[i - 1] + g[i - 1]\n        else:\n            f[i] = f[i - 1]\n        g[i] %= p\n        f[i] %= p\n    ans = g[n - 1] + f[n - 1] * (m - b[n - 1] + 1)\n    ans %= p\n    print(ans)\nfor t in range(int(input())):\n    solve()", "m = 10 ** 5\np = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    b = [0] + list(map(int, input().split()))\n    f = [0] * n\n    g = [0] * n\n    f[1] = 1\n    g[1] = m - b[1]\n    for i in range(2, n):\n        g[i] = f[i - 1] * (m - max(b[i - 1], b[i] + 1) + 1)\n        if b[i - 1] > b[i]:\n            g[i] += g[i - 1]\n        elif b[i - 1] == b[i]:\n            f[i] = f[i - 1] + g[i - 1]\n        else:\n            f[i] = f[i - 1]\n        g[i] %= p\n        f[i] %= p\n    ans = g[n - 1] + f[n - 1] * (m - b[n - 1] + 1)\n    ans %= p\n    print(ans)\nfor t in range(int(input())):\n    solve()", "t = int(input())\nmod = 1000000007\nfor tc in range(t):\n    n = int(input())\n    n -= 1\n    arr = list(map(int, input().split()))\n    dp = [[0 for i in range(2)] for j in range(n)]\n    (dp[0][0], dp[0][1]) = (1, 100000 - arr[0])\n    for i in range(1, n):\n        if arr[i] >= arr[i - 1]:\n            dp[i][0] += dp[i - 1][0]\n        if arr[i] == arr[i - 1]:\n            dp[i][0] += dp[i - 1][1]\n        if arr[i] < arr[i - 1]:\n            dp[i][1] += dp[i - 1][1]\n        dp[i][1] += min(100000 - arr[i - 1] + 1, 100000 - arr[i]) * dp[i - 1][0]\n        dp[i][0] %= mod\n        dp[i][1] %= mod\n    ans = dp[n - 1][1] + dp[n - 1][0] * (100000 - arr[n - 1] + 1)\n    ans %= mod\n    print(ans)", "m = 10 ** 5\np = 10 ** 9 + 7\n\ndef solve():\n    n = int(input())\n    b = [0] + list(map(int, input().split()))\n    f = [0] * n\n    g = [0] * n\n    f[1] = 1\n    g[1] = m - b[1]\n    for i in range(2, n):\n        g[i] = f[i - 1] * (m - max(b[i - 1], b[i] + 1) + 1)\n        if b[i - 1] > b[i]:\n            g[i] += g[i - 1]\n        elif b[i - 1] == b[i]:\n            f[i] = f[i - 1] + g[i - 1]\n        else:\n            f[i] = f[i - 1]\n        g[i] %= p\n        f[i] %= p\n    ans = g[n - 1] + f[n - 1] * (m - b[n - 1] + 1)\n    ans %= p\n    print(ans)\nfor t in range(int(input())):\n    solve()", "def il():\n    return list(map(int, input().split()))\n\ndef ii():\n    return int(input())\n\ndef imi():\n    return map(int, input().split())\n\ndef ist():\n    return input()\nm = 10 ** 5\np = 1000000007\nt = ii()\nfor _ in range(t):\n    n = ii()\n    b = [0] + il()\n    f = [0] * n\n    g = [0] * n\n    f[1] = 1\n    g[1] = m - b[1]\n    for i in range(2, n):\n        g[i] = f[i - 1] * (m + 1 - max(b[i - 1], b[i] + 1))\n        if b[i - 1] > b[i]:\n            f[i] = 0\n            g[i] += g[i - 1]\n        elif b[i - 1] == b[i]:\n            f[i] = f[i - 1] + g[i - 1]\n        else:\n            f[i] = f[i - 1]\n        g[i] %= p\n        f[i] %= p\n    x = (g[n - 1] + f[n - 1] * (m - b[n - 1] + 1)) % p\n    print(x)", "MOD = 10 ** 9 + 7\nMAX = 10 ** 5\nfor _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = [[0 for j in range(2)] for i in range(n)]\n    dp[0][0] = 1\n    dp[0][1] = MAX - b[0]\n    for i in range(1, n - 1):\n        if b[i] > b[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n        elif b[i] < b[i - 1]:\n            dp[i][0] = 0\n        else:\n            dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % MOD\n        if b[i] < b[i - 1]:\n            dp[i][1] = (dp[i - 1][1] + dp[i - 1][0] * (MAX - b[i - 1] + 1)) % MOD\n        elif b[i] > b[i - 1]:\n            dp[i][1] = dp[i - 1][0] * (MAX - b[i]) % MOD\n        else:\n            dp[i][1] = dp[i - 1][0] * (MAX - b[i - 1]) % MOD\n    print((dp[n - 2][1] + dp[n - 2][0] * (MAX - b[n - 2] + 1)) % MOD)", "MOD = 10 ** 9 + 7\nMAX = 10 ** 5\nfor _ in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = []\n    for i in range(n):\n        row = []\n        for j in range(2):\n            row.append(0)\n        dp.append(row)\n    dp[0][0] = 1\n    dp[0][1] = MAX - b[0]\n    for i in range(1, n - 1):\n        if b[i] > b[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n        elif b[i] < b[i - 1]:\n            dp[i][0] = 0\n        else:\n            dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % MOD\n        if b[i] < b[i - 1]:\n            dp[i][1] = (dp[i - 1][1] + dp[i - 1][0] * (MAX - b[i - 1] + 1)) % MOD\n        elif b[i] > b[i - 1]:\n            dp[i][1] = dp[i - 1][0] * (MAX - b[i]) % MOD\n        else:\n            dp[i][1] = dp[i - 1][0] * (MAX - b[i - 1]) % MOD\n    ans = (dp[n - 2][1] + dp[n - 2][0] * (MAX - b[n - 2] + 1)) % MOD\n    print(ans)", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(10 ** 6)\nmod = 10 ** 9 + 7\n\ndef mul(a, b):\n    return a % mod * (b % mod) % mod\n\ndef add(a, b):\n    return (a % mod + b % mod) % mod\n\ndef solve(i, took):\n    if i == n - 1:\n        if took == 1:\n            return 100000 - b[i - 1] + 1\n        else:\n            return 1\n    if dp[i][took] != -1:\n        return dp[i][took]\n    ans = 0\n    if took == 0:\n        if b[i - 1] > b[i]:\n            ans = add(ans, solve(i + 1, 0))\n        if b[i - 1] == b[i]:\n            ans = add(ans, solve(i + 1, 1))\n    else:\n        if i == 0 or b[i - 1] <= b[i]:\n            ans = add(ans, solve(i + 1, 1))\n        if i == 0:\n            x = 100000 - b[0]\n        elif b[i - 1] > b[i]:\n            x = 100000 - b[i - 1] + 1\n        else:\n            x = 100000 - b[i]\n        ans = add(ans, mul(x, solve(i + 1, 0)))\n    dp[i][took] = ans\n    return ans\n\ndef answer():\n    ans = solve(0, 1)\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = [[-1, -1] for i in range(n + 1)]\n    print(answer())", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(10 ** 6)\nmod = 10 ** 9 + 7\n\ndef mul(a, b):\n    return a % mod * (b % mod) % mod\n\ndef add(a, b):\n    return (a % mod + b % mod) % mod\n\ndef solve(i, took):\n    if i == n - 1:\n        if took == 1:\n            return 100000 - b[i - 1] + 1\n        else:\n            return 1\n    if dp[i][took] != -1:\n        return dp[i][took]\n    ans = 0\n    if took == 0:\n        if b[i - 1] > b[i]:\n            ans = add(ans, solve(i + 1, 0))\n        if b[i - 1] == b[i]:\n            ans = add(ans, solve(i + 1, 1))\n    else:\n        if i == 0 or b[i - 1] <= b[i]:\n            ans = add(ans, solve(i + 1, 1))\n        if i == 0:\n            x = 100000 - b[0]\n        elif b[i - 1] > b[i]:\n            x = 100000 - b[i - 1] + 1\n        else:\n            x = 100000 - b[i]\n        ans = add(ans, mul(x, solve(i + 1, 0)))\n    dp[i][took] = ans\n    return ans\n\ndef answer():\n    ans = solve(0, 1)\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = [[-1, -1] for i in range(n + 1)]\n    print(answer())", "t = int(input())\nMOD = 1000000007\nMAX = 100000\nwhile t > 0:\n    n = int(input())\n    b = list(map(int, input().split()))\n    dp = []\n    for i in range(n):\n        row = []\n        for j in range(2):\n            row.append(0)\n        dp.append(row)\n    dp[0][0] = 1\n    dp[0][1] = MAX - b[0]\n    for i in range(1, n - 1):\n        if b[i] > b[i - 1]:\n            dp[i][0] = dp[i - 1][0]\n        elif b[i] < b[i - 1]:\n            dp[i][0] = 0\n        else:\n            dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) % MOD\n        if b[i] < b[i - 1]:\n            dp[i][1] = (dp[i - 1][1] + dp[i - 1][0] * (MAX - b[i - 1] + 1)) % MOD\n        elif b[i] > b[i - 1]:\n            dp[i][1] = dp[i - 1][0] * (MAX - b[i]) % MOD\n        else:\n            dp[i][1] = dp[i - 1][0] * (MAX - b[i - 1]) % MOD\n    ans = (dp[n - 2][1] + dp[n - 2][0] * (MAX - b[n - 2] + 1)) % MOD\n    print(ans)\n    t -= 1", "import sys\nfrom bisect import bisect_right as lb\nfrom collections import deque\nsys.setrecursionlimit(10 ** 8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab, bc, cd: ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x: print(x)\nprinT = lambda x: print(x)\nf = lambda : sys.stdout.flush()\ninv = lambda x: pow(x, mod - 2, mod)\nmod = 10 ** 9 + 7\n\ndef find(i, j):\n    if i == n - 1:\n        if j == 1:\n            return 1\n        return 10 ** 5 - a[i - 1] + 1\n    if dp[i][j] != -1:\n        return dp[i][j]\n    dp[i][j] = 0\n    if j == 0:\n        if a[i] >= a[i - 1]:\n            dp[i][j] += find(i + 1, 0)\n        if a[i] >= a[i - 1]:\n            dp[i][j] += find(i + 1, 1) * (10 ** 5 - a[i])\n        else:\n            dp[i][j] += find(i + 1, 1) * (10 ** 5 - a[i - 1] + 1)\n    elif a[i] < a[i - 1]:\n        dp[i][j] += find(i + 1, 1)\n    elif a[i] == a[i - 1]:\n        dp[i][j] += find(i + 1, 0)\n    dp[i][j] %= mod\n    return dp[i][j]\nfor _ in range(ii()):\n    n = ii()\n    a = il()\n    dp = [[-1, -1] for i in range(n + 3)]\n    print((find(1, 0) + find(1, 1) * (10 ** 5 - a[0])) % mod)"]