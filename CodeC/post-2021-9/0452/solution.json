["for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    result = [''] * n\n    map_s = {'R': 'P', 'P': 'S', 'S': 'R'}\n    map_ind = {}\n    for i in range(n - 1, -1, -1):\n        t = map_s[s[i]]\n        if t in map_ind:\n            result[i] = result[map_ind[t]]\n        else:\n            result[i] = s[i]\n        map_ind[s[i]] = i\n    print(''.join((_ for _ in result)))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    result = [''] * n\n    map_s = {'R': 'P', 'P': 'S', 'S': 'R'}\n    map_ind = {}\n    for i in range(n - 1, -1, -1):\n        t = map_s[s[i]]\n        if t in map_ind:\n            result[i] = result[map_ind[t]]\n        else:\n            result[i] = s[i]\n        map_ind[s[i]] = i\n    print(''.join((_ for _ in result)))", "for _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    result = []\n    result.append(s[-1])\n    dp = {}\n    dp[s[-1]] = s[-1]\n    for i in range(n - 1, 0, -1):\n        if s[i - 1] == 'P' and 'S' in dp:\n            result.append(dp['S'])\n            dp['P'] = dp['S']\n        elif s[i - 1] == 'S' and 'R' in dp:\n            result.append(dp['R'])\n            dp['S'] = dp['R']\n        elif s[i - 1] == 'R' and 'P' in dp:\n            result.append(dp['P'])\n            dp['R'] = dp['P']\n        else:\n            result.append(s[i - 1])\n            dp[s[i - 1]] = s[i - 1]\n    result.reverse()\n    print(''.join((_ for _ in result)))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def whowon(s1, s2):\n    if s1 == 'P' and s2 == 'R':\n        return s1\n    elif s1 == 'P' and s2 == 'S':\n        return s2\n    elif s1 == 'P' and s2 == 'P':\n        return s1\n    elif s1 == 'R' and s2 == 'S':\n        return s1\n    elif s1 == 'R' and s2 == 'P':\n        return s2\n    elif s1 == 'R' and s2 == 'R':\n        return s1\n    elif s1 == 'S' and s2 == 'S':\n        return s1\n    elif s1 == 'S' and s2 == 'P':\n        return s1\n    elif s1 == 'S' and s2 == 'R':\n        return s2\n\ndef getarrayrow(x):\n    if x == 'S':\n        return 0\n    if x == 'R':\n        return 1\n    if x == 'P':\n        return 2\nT = int(input())\nfor _ in range(T):\n    answer = ''\n    size = int(input())\n    data = input()\n    data = list(data)\n    arr = [[0 for i in range(size)] for j in range(3)]\n    for i in range(size - 2, -1, -1):\n        j = i\n        x = data[j]\n        while j != size - 1:\n            if arr[getarrayrow(x)][j + 1] == 0:\n                x = whowon(x, data[j + 1])\n                j += 1\n            else:\n                x = arr[getarrayrow(x)][j + 1]\n                break\n        arr[getarrayrow(data[i])][i + 1] = x\n    for i in range(size - 1):\n        answer += str(arr[getarrayrow(data[i])][i + 1])\n    answer += data[size - 1]\n    print(answer)", "def whowon(s1, s2):\n    if s1 == 'P' and s2 == 'R':\n        return s1\n    elif s1 == 'P' and s2 == 'S':\n        return s2\n    elif s1 == 'P' and s2 == 'P':\n        return s1\n    elif s1 == 'R' and s2 == 'S':\n        return s1\n    elif s1 == 'R' and s2 == 'P':\n        return s2\n    elif s1 == 'R' and s2 == 'R':\n        return s1\n    elif s1 == 'S' and s2 == 'S':\n        return s1\n    elif s1 == 'S' and s2 == 'P':\n        return s1\n    elif s1 == 'S' and s2 == 'R':\n        return s2\n\ndef getarrayrow(x):\n    if x == 'S':\n        return 0\n    if x == 'R':\n        return 1\n    if x == 'P':\n        return 2\nT = int(input())\nfor _ in range(T):\n    answer = ''\n    size = int(input())\n    data = input()\n    data = list(data)\n    arr = [[0 for i in range(size)] for j in range(3)]\n    for i in range(size - 2, -1, -1):\n        j = i\n        x = data[j]\n        while j != size - 1:\n            if arr[getarrayrow(x)][j + 1] == 0:\n                x = whowon(x, data[j + 1])\n                j += 1\n            else:\n                x = arr[getarrayrow(x)][j + 1]\n                break\n        arr[getarrayrow(data[i])][i + 1] = x\n    for i in range(size - 1):\n        answer += str(arr[getarrayrow(data[i])][i + 1])\n    answer += data[size - 1]\n    print(answer)", "import sys\ninput = sys.stdin.readline\n\ndef whowon(s1, s2):\n    if s1 == 'P' and s2 == 'R':\n        return s1\n    elif s1 == 'P' and s2 == 'S':\n        return s2\n    elif s1 == 'P' and s2 == 'P':\n        return s1\n    elif s1 == 'R' and s2 == 'S':\n        return s1\n    elif s1 == 'R' and s2 == 'P':\n        return s2\n    elif s1 == 'R' and s2 == 'R':\n        return s1\n    elif s1 == 'S' and s2 == 'S':\n        return s1\n    elif s1 == 'S' and s2 == 'P':\n        return s1\n    elif s1 == 'S' and s2 == 'R':\n        return s2\n\ndef getarrayrow(x):\n    if x == 'S':\n        return 0\n    if x == 'R':\n        return 1\n    if x == 'P':\n        return 2\nT = int(input())\nfor _ in range(T):\n    answer = ''\n    size = int(input())\n    data = input()\n    data = list(data)\n    arr = [[0 for i in range(size)] for j in range(3)]\n    for i in range(size - 2, -1, -1):\n        j = i\n        x = data[j]\n        while j != size - 1:\n            if arr[getarrayrow(x)][j + 1] == 0:\n                x = whowon(x, data[j + 1])\n                j += 1\n            else:\n                x = arr[getarrayrow(x)][j + 1]\n                break\n        arr[getarrayrow(data[i])][i + 1] = x\n    for i in range(size - 1):\n        answer += str(arr[getarrayrow(data[i])][i + 1])\n    answer += data[size - 1]\n    print(answer)", "def winner(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nfor i in range(int(input())):\n    n = int(input())\n    result = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        result[n - 1] = a[n - 1]\n        r[n - 2] = winner('R', a[n - 1])\n        p[n - 2] = winner('P', a[n - 1])\n        s[n - 2] = winner('S', a[n - 1])\n        if a[n - 2] == 'R':\n            result[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            result[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            result[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = winner('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = winner('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = winner('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                result[i] = r[i]\n            elif a[i] == 'P':\n                result[i] = p[i]\n            else:\n                result[i] = s[i]\n        print(''.join(result))", "def winner(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nfor i in range(int(input())):\n    n = int(input())\n    result = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        result[n - 1] = a[n - 1]\n        r[n - 2] = winner('R', a[n - 1])\n        p[n - 2] = winner('P', a[n - 1])\n        s[n - 2] = winner('S', a[n - 1])\n        if a[n - 2] == 'R':\n            result[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            result[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            result[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = winner('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = winner('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = winner('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                result[i] = r[i]\n            elif a[i] == 'P':\n                result[i] = p[i]\n            else:\n                result[i] = s[i]\n        print(''.join(result))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "t = int(input())\nfor i in range(t):\n    d1 = dict(R='P', S='R', P='S')\n    d2 = dict(R=-1, S=-1, P=-1)\n    n = int(input())\n    s = list(input())\n    ans = [0] * n\n    for j in range(n - 1, -1, -1):\n        c = d2[d1[s[j]]]\n        if c == -1:\n            ans[j] = s[j]\n        else:\n            ans[j] = ans[c]\n        d2[s[j]] = j\n    print(''.join(ans))", "for _ in range(int(input())):\n    d = dict(R='P', S='R', P='S')\n    d1 = dict(R=-1, S=-1, P=-1)\n    n = int(input())\n    game = list(input())\n    ans = [0] * n\n    for i in range(n - 1, -1, -1):\n        idx = d1[d[game[i]]]\n        if idx == -1:\n            ans[i] = game[i]\n        else:\n            ans[i] = ans[idx]\n        d1[game[i]] = i\n    print(''.join(ans))", "def battle(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    result = [0] * N\n    a = input()\n    if N == 1:\n        print(a[0])\n    else:\n        R = [0] * N\n        P = [0] * N\n        S = [0] * N\n        ch = ''\n        result[N - 1] = a[N - 1]\n        R[N - 2] = battle('R', a[N - 1])\n        P[N - 2] = battle('P', a[N - 1])\n        S[N - 2] = battle('S', a[N - 1])\n        if a[N - 2] == 'R':\n            result[N - 2] = R[N - 2]\n        elif a[N - 2] == 'P':\n            result[N - 2] = P[N - 2]\n        elif a[N - 2] == 'S':\n            result[N - 2] = S[N - 2]\n        for i in range(N - 3, -1, -1):\n            temp = battle('R', a[i + 1])\n            if temp == 'R':\n                R[i] = R[i + 1]\n            elif temp == 'P':\n                R[i] = P[i + 1]\n            else:\n                R[i] = S[i + 1]\n            temp = battle('P', a[i + 1])\n            if temp == 'R':\n                P[i] = R[i + 1]\n            elif temp == 'P':\n                P[i] = P[i + 1]\n            else:\n                P[i] = S[i + 1]\n            temp = battle('S', a[i + 1])\n            if temp == 'R':\n                S[i] = R[i + 1]\n            elif temp == 'P':\n                S[i] = P[i + 1]\n            else:\n                S[i] = S[i + 1]\n            if a[i] == 'R':\n                result[i] = R[i]\n            elif a[i] == 'P':\n                result[i] = P[i]\n            else:\n                result[i] = S[i]\n        print(''.join(result))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef is_won(p1, p2):\n    result = False\n    if p1 == 'R':\n        return p2 == 'S'\n    elif p1 == 'P':\n        return p2 == 'R'\n    else:\n        return p2 == 'P'\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\n\ndef testcase():\n\n    def roll_win(i, j):\n        result = S[i - 1]\n        while j < N and is_won(S[i - 1], S[j]):\n            j += 1\n        if j < N:\n            result = answer[j]\n        return result\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_won(S[i - 1], S[i]):\n            j = i + 1\n            answer[i - 1] = roll_win(i, j)\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))\nfor _ in range(T):\n    testcase()", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef is_won(p1, p2):\n    result = False\n    if p1 == 'R':\n        return p2 == 'S'\n    elif p1 == 'P':\n        return p2 == 'R'\n    else:\n        return p2 == 'P'\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_won(S[i - 1], S[i]):\n            j = i + 1\n            answer[i - 1] = S[i - 1]\n            while j < N and is_won(S[i - 1], S[j]):\n                j += 1\n            if j < N:\n                answer[i - 1] = answer[j]\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef is_won(p1, p2):\n    result = False\n    if p1 == 'R':\n        result = p2 == 'S'\n    elif p1 == 'P':\n        result = p2 == 'R'\n    else:\n        result = p2 == 'P'\n    return result\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_won(S[i - 1], S[i]):\n            j = i + 1\n            answer[i - 1] = S[i - 1]\n            while j < N and is_won(S[i - 1], S[j]):\n                j += 1\n            if j < N:\n                answer[i - 1] = answer[j]\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef is_won(p1, p2):\n    result = False\n    if p1 == 'R':\n        result = p2 == 'S'\n    elif p1 == 'P':\n        result = p2 == 'R'\n    else:\n        result = p2 == 'P'\n    return result\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_won(S[i - 1], S[i]):\n            j = i + 1\n            answer[i - 1] = S[i - 1]\n            while j < N and is_won(S[i - 1], S[j]):\n                j += 1\n            if j < N:\n                answer[i - 1] = answer[j]\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_a_winner(S[i - 1], S[i]):\n            j = i + 1\n            answer[i - 1] = S[i - 1]\n            while j < N and is_a_winner(S[i - 1], S[j]):\n                j += 1\n            if j < N:\n                answer[i - 1] = answer[j]\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_a_winner(S[i - 1], S[i]):\n            j = i + 1\n            answer[i - 1] = S[i - 1]\n            while j < N and is_a_winner(S[i - 1], S[j]):\n                j += 1\n            if j < N:\n                answer[i - 1] = answer[j]\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_a_winner(S[i - 1], S[i]):\n            j = i + 1\n            answer[i - 1] = S[i - 1]\n            while j < N:\n                if is_a_winner(S[i - 1], S[j]):\n                    j += 1\n                else:\n                    answer[i - 1] = answer[j]\n                    break\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        j = i\n        answer[i - 1] = S[i - 1]\n        while j < N:\n            if is_a_winner(S[i - 1], S[j]):\n                j += 1\n            else:\n                answer[i - 1] = answer[j]\n                break\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        j = i\n        answer[i - 1] = S[i - 1]\n        while j < N:\n            if is_a_winner(S[i - 1], S[j]):\n                j += 1\n            else:\n                answer[i - 1] = answer[j]\n                break\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_a_winner(S[i - 1], S[i]):\n            j = i + 1\n            answer[i - 1] = S[i - 1]\n            while j < N:\n                if is_a_winner(S[i - 1], S[j]):\n                    j += 1\n                else:\n                    answer[i - 1] = answer[j]\n                    break\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_a_winner(S[i - 1], S[i]):\n            j = i + 1\n            ans = S[i - 1]\n            while j < N:\n                if is_a_winner(S[i - 1], S[j]):\n                    j += 1\n                else:\n                    ans = answer[j]\n                    break\n            answer[i - 1] = ans\n        else:\n            answer[i - 1] = answer[i]\n    print(''.join(answer))", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        if is_a_winner(S[i - 1], S[i]):\n            j = i + 1\n            ans = S[i - 1]\n            while j < N:\n                if is_a_winner(S[i - 1], S[j]):\n                    j += 1\n                else:\n                    ans = answer[j]\n                    break\n            answer[i - 1] = ans\n        else:\n            answer[i - 1] = answer[i]\n    print(*answer, sep='')", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef find_winner(a, b):\n    if a == 'R' and b == 'S':\n        return a\n    elif a == 'S' and b == 'P':\n        return a\n    elif a == 'P' and b == 'R':\n        return a\n    else:\n        return b\n\ndef is_a_winner(a, b):\n    if a == 'R' and b == 'S':\n        return True\n    elif a == 'S' and b == 'P':\n        return True\n    elif a == 'P' and b == 'R':\n        return True\n    else:\n        return False\n\ndef find_ans(m, n):\n    global N, S\n    winner_char = find_winner(m, S[n + 10])\n    if n == N - 1:\n        return winner_char\n    else:\n        return find_ans(winner_char, n + 1)\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    answer = [''] * N\n    answer[N - 1] = S[N - 1]\n    for i in range(N - 1, 0, -1):\n        j = i\n        ans = S[i - 1]\n        while j < N:\n            if is_a_winner(S[i - 1], S[j]):\n                j += 1\n            else:\n                ans = answer[j]\n                break\n        answer[i - 1] = ans\n    print(*answer, sep='')", "who_beats = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ind = {'R': -1, 'P': -1, 'S': -1}\n    ans = ['?'] * n\n    for i in reversed(range(n)):\n        indwb = ind[who_beats[s[i]]]\n        ans[i] = s[i] if indwb == -1 else ans[indwb]\n        ind[s[i]] = i\n    print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "try:\n\n    def defence_win(a, b):\n        win = [('R', 'P'), ('P', 'R'), ('R', 'S'), ('S', 'R'), ('S', 'P'), ('P', 'S')]\n        it = win.index((a, b))\n        w = ['P', 'P', 'R', 'R', 'S', 'S']\n        return w[it]\n    for _ in range(int(input())):\n        lat_ner_rr = int(input())\n        S = input()\n        resultant_pro = [0] * lat_ner_rr\n        i = 0\n        if lat_ner_rr == 1:\n            resultant_pro = [S]\n        else:\n            while i < lat_ner_rr:\n                calcacher = [i]\n                if resultant_pro[i] == 0:\n                    a = S[i]\n                    j = i + 1\n                    while j < lat_ner_rr:\n                        b = S[j]\n                        if a == b:\n                            resultant_noob = a\n                        else:\n                            resultant_noob = defence_win(a, b)\n                            a = resultant_noob\n                        if resultant_noob == b and resultant_pro[j] == 0:\n                            calcacher.append(j)\n                        elif resultant_noob == b and resultant_pro[j] != 0:\n                            resultant_noob = resultant_pro[j]\n                            j = lat_ner_rr\n                        j += 1\n                    if i == lat_ner_rr - 1:\n                        resultant_noob = a\n                    for items in calcacher:\n                        resultant_pro[items] = resultant_noob\n                else:\n                    pass\n                i += 1\n        print(''.join(resultant_pro))\nexcept:\n    pass", "try:\n\n    def winner(a, b):\n        win = [('R', 'P'), ('P', 'R'), ('R', 'S'), ('S', 'R'), ('S', 'P'), ('P', 'S')]\n        it = win.index((a, b))\n        w = ['P', 'P', 'R', 'R', 'S', 'S']\n        return w[it]\n    for _ in range(int(input())):\n        N = int(input())\n        S = input()\n        ans = [0] * N\n        i = 0\n        if N == 1:\n            ans = [S]\n        else:\n            while i < N:\n                cache = [i]\n                if ans[i] == 0:\n                    a = S[i]\n                    j = i + 1\n                    while j < N:\n                        b = S[j]\n                        if a == b:\n                            res = a\n                        else:\n                            res = winner(a, b)\n                            a = res\n                        if res == b and ans[j] == 0:\n                            cache.append(j)\n                        elif res == b and ans[j] != 0:\n                            res = ans[j]\n                            j = N\n                        j += 1\n                    if i == N - 1:\n                        res = a\n                    for items in cache:\n                        ans[items] = res\n                else:\n                    pass\n                i += 1\n        print(''.join(ans))\nexcept:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    l = list((x for x in input()))\n    w = [''] * len(l)\n    d = {'R': -1, 'S': -1, 'P': -1}\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 'S':\n            if d['R'] == -1:\n                w[i] = l[i]\n            else:\n                w[i] = w[d['R']]\n            d['S'] = i\n        elif l[i] == 'R':\n            if d['P'] == -1:\n                w[i] = l[i]\n            else:\n                w[i] = w[d['P']]\n            d['R'] = i\n        if l[i] == 'P':\n            if d['S'] == -1:\n                w[i] = l[i]\n            else:\n                w[i] = w[d['S']]\n            d['P'] = i\n    print(''.join(w))", "import sys\ninp_list = list(sys.stdin)\nwin_map = {'R': 'S', 'S': 'P', 'P': 'R'}\nlose_map = {'S': 'R', 'R': 'P', 'P': 'S'}\nall_vals_set = set(['R', 'S', 'P'])\nfor indx in range(1, len(inp_list)):\n    if indx % 2 == 1:\n        continue\n    s = inp_list[indx].rstrip('\\n')\n    single_op_flag = False\n    length = len(s)\n    possible_outputs_set = set([s[-1], lose_map[s[-1]]])\n    op = s[-1]\n    switch_dict = {op: lose_map[op], lose_map[op]: op}\n    for i in range(1, length):\n        if s[length - i] == s[length - i - 1]:\n            op += op[-1]\n            continue\n        if win_map[s[length - i - 1]] == s[length - i]:\n            op += switch_dict[op[-1]]\n        if lose_map[s[length - i - 1]] == s[length - i]:\n            single_op_flag = True\n            break\n    if single_op_flag:\n        op += op[-1] * (length - len(op))\n    op = op[::-1]\n    print(op)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    win_cycle = {'S': 'R', 'R': 'P', 'P': 'S'}\n    indx = {'S': -1, 'R': -1, 'P': -1}\n    ans = [''] * n\n    for j in range(n - 1, -1, -1):\n        ch = indx[win_cycle[s[j]]]\n        if ch == -1:\n            ans[j] = s[j]\n        else:\n            ans[j] = ans[ch]\n        indx[s[j]] = j\n    print(''.join(ans))", "win = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor i in range(int(input())):\n    size = int(input())\n    s = input()\n    ans = ['?'] * size\n    d = {'R': -1, 'P': -1, 'S': -1}\n    for i in range(size - 1, -1, -1):\n        x = d[win[s[i]]]\n        if x == -1:\n            ans[i] = s[i]\n        else:\n            ans[i] = ans[x]\n        d[s[i]] = i\n    for i in ans:\n        print(i, end='')\n    print()", "def win(pl1, pl2):\n    game = pl1 + pl2\n    if game == 'SR' or game == 'RP' or game == 'PS':\n        return False\n    return True\n\ndef SPQR(S):\n    if len(S) == 1:\n        return S\n    res = S[0]\n    order = [(S[0], 0)]\n    for i in range(1, len(S)):\n        if win(order[0][0], S[i]):\n            res = res + res[order[0][1]]\n        elif len(order) == 1:\n            res = res + S[i]\n        else:\n            res = res + res[order[1][1]]\n        if S[i] != order[0][0]:\n            order.insert(0, (S[i], i))\n    return res[::-1]\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    print(SPQR(input()[::-1]))", "def win(pl1, pl2):\n    game = pl1 + pl2\n    if game == 'SR' or game == 'RP' or game == 'PS':\n        return False\n    return True\n\ndef SPQR(S):\n    if len(S) == 1:\n        return S\n    res = S[0]\n    order = [(S[0], 0)]\n    for i in range(1, len(S)):\n        winAll = True\n        for ordr in order:\n            if win(ordr[0], S[i]):\n                res = res + res[ordr[1]]\n                winAll = False\n                break\n        if winAll:\n            res = res + S[i]\n        if S[i] != order[0][0]:\n            order.insert(0, (S[i], i))\n    return res[::-1]\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    S = input()\n    print(SPQR(S[::-1]))", "def findans(s, n, overcome, idx):\n    a = [-1 for k in range(n)]\n    for j in range(n - 1, -1, -1):\n        index = idx[overcome[s[j]]]\n        if index == -1:\n            a[j] = s[j]\n        else:\n            a[j] = a[index]\n        idx[s[j]] = j\n    return ''.join(a)\nt = int(input())\novercome = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor i in range(t):\n    n = int(input())\n    s = input()\n    idx = {'R': -1, 'P': -1, 'S': -1}\n    ans = findans(s, n, overcome, idx)\n    print(ans)", "who_beats = {'R': 'P', 'P': 'S', 'S': 'R'}\nt = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    ind = {'R': -1, 'P': -1, 'S': -1}\n    ans = ['?'] * n\n    for i in reversed(range(n)):\n        indwb = ind[who_beats[s[i]]]\n        ans[i] = s[i] if indwb == -1 else ans[indwb]\n        ind[s[i]] = i\n    print(''.join(ans))\n    t -= 1", "who_beats = {'R': 'P', 'P': 'S', 'S': 'R'}\nt = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    ind = {'R': -1, 'P': -1, 'S': -1}\n    ans = ['?'] * n\n    for i in reversed(range(n)):\n        indwb = ind[who_beats[s[i]]]\n        ans[i] = s[i] if indwb == -1 else ans[indwb]\n        ind[s[i]] = i\n    print(''.join(ans))\n    t -= 1", "who_beats = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ind = {'R': -1, 'P': -1, 'S': -1}\n    ans = ['?'] * n\n    for i in reversed(range(n)):\n        indwb = ind[who_beats[s[i]]]\n        ans[i] = s[i] if indwb == -1 else ans[indwb]\n        ind[s[i]] = i\n    print(''.join(ans))", "who_beats = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ind = {'R': -1, 'P': -1, 'S': -1}\n    ans = ['?'] * n\n    for i in reversed(range(n)):\n        indwb = ind[who_beats[s[i]]]\n        ans[i] = s[i] if indwb == -1 else ans[indwb]\n        ind[s[i]] = i\n    print(''.join(ans))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n\n        def A(a, b):\n            if a == b:\n                return a\n            elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n                return 'P'\n            elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n                return 'S'\n            else:\n                return 'R'\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "test = int(input())\nwho_beat = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor _ in range(test):\n    n = int(input())\n    s = input()\n    ans = ['P'] * n\n    idx = {'R': -1, 'S': -1, 'P': -1}\n    for i in range(n - 1, -1, -1):\n        competitor = who_beat[s[i]]\n        cur = idx[competitor]\n        if cur == -1:\n            ans[i] = s[i]\n        else:\n            ans[i] = ans[cur]\n        idx[s[i]] = i\n    print(''.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    A = input()\n    d = {}\n    d['R'] = 'P'\n    d['P'] = 'S'\n    d['S'] = 'R'\n    ind = {}\n    (ind['R'], ind['S'], ind['P']) = (-1, -1, -1)\n    ans = [0] * n\n    for i in range(n - 1, -1, -1):\n        idx = ind[d[A[i]]]\n        if idx == -1:\n            ans[i] = A[i]\n        else:\n            ans[i] = ans[idx]\n        ind[A[i]] = i\n    a = ''.join(ans)\n    print(a)", "win = {'R': 'P', 'P': 'S', 'S': 'R'}\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    dic = {'S': -1, 'P': -1, 'R': -1}\n    ans = ['?'] * n\n    for i in reversed(range(n)):\n        idx = dic[win[s[i]]]\n        if idx == -1:\n            ans[i] = s[i]\n        else:\n            ans[i] = ans[idx]\n        dic[s[i]] = i\n    print(''.join(ans))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    who_beats = {'R': 'P', 'P': 'S', 'S': 'R'}\n    ind = {'R': -1, 'S': -1, 'P': -1}\n    ans = ['?'] * n\n    for i in reversed(range(n)):\n        indwb = ind[who_beats[s[i]]]\n        ans[i] = s[i] if indwb == -1 else ans[indwb]\n        ind[s[i]] = i\n    print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def w(i):\n    ind = s.find(comp[s[i]], i + 1)\n    if ind == -1:\n        d[f'w({i})'] = s[i]\n        return s[i]\n    else:\n        d[f'w({i})'] = d[f'w({ind})']\n        return d[f'w({ind})']\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = ''\n    d = {}\n    comp = {'R': 'P', 'S': 'R', 'P': 'S'}\n    for i in range(n - 1, -1, -1):\n        ans += w(i)\n    print(ans[::-1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    dp = [0] * n\n    dp[-1] = s[-1]\n    idx = {'R': -1, 'P': -1, 'S': -1}\n    idx[s[-1]] = n - 1\n    if n > 1:\n        wins = {'P': 'R', 'S': 'P', 'R': 'S'}\n        loses = {'P': 'S', 'R': 'P', 'S': 'R'}\n        if s[-1] == s[-2] or s[-2] == wins[s[-1]]:\n            dp[-2] = s[-1]\n        else:\n            dp[-2] = s[-2]\n        idx[s[-2]] = n - 2\n        for i in range(n - 3, -1, -1):\n            idx[s[i]] = i\n            j = idx[loses[s[i]]]\n            if j != -1:\n                dp[i] = dp[j]\n            else:\n                dp[i] = s[i]\n    print(''.join(dp))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "def A(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return 'R'\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ans = [0] * n\n    a = input()\n    if n == 1:\n        print(a[0])\n    else:\n        r = [0] * n\n        p = [0] * n\n        s = [0] * n\n        ch = ''\n        ans[n - 1] = a[n - 1]\n        r[n - 2] = A('R', a[n - 1])\n        p[n - 2] = A('P', a[n - 1])\n        s[n - 2] = A('S', a[n - 1])\n        if a[n - 2] == 'R':\n            ans[n - 2] = r[n - 2]\n        elif a[n - 2] == 'P':\n            ans[n - 2] = p[n - 2]\n        elif a[n - 2] == 'S':\n            ans[n - 2] = s[n - 2]\n        for i in range(n - 3, -1, -1):\n            temp = A('R', a[i + 1])\n            if temp == 'R':\n                r[i] = r[i + 1]\n            elif temp == 'P':\n                r[i] = p[i + 1]\n            else:\n                r[i] = s[i + 1]\n            temp = A('P', a[i + 1])\n            if temp == 'R':\n                p[i] = r[i + 1]\n            elif temp == 'P':\n                p[i] = p[i + 1]\n            else:\n                p[i] = s[i + 1]\n            temp = A('S', a[i + 1])\n            if temp == 'R':\n                s[i] = r[i + 1]\n            elif temp == 'P':\n                s[i] = p[i + 1]\n            else:\n                s[i] = s[i + 1]\n            if a[i] == 'R':\n                ans[i] = r[i]\n            elif a[i] == 'P':\n                ans[i] = p[i]\n            else:\n                ans[i] = s[i]\n        print(''.join(ans))", "N = int(input())\nfor i in range(N):\n    size = int(input())\n    str = input()\n    res = []\n    for i in range(size):\n        res.append(' ')\n    last_r = '$'\n    last_p = '$'\n    last_s = '$'\n    i = size - 1\n    while i >= 0:\n        if str[i] == 'R':\n            if last_p == '$':\n                res[i] = 'R'\n            else:\n                res[i] = last_p\n            last_r = res[i]\n        elif str[i] == 'P':\n            if last_s == '$':\n                res[i] = 'P'\n            else:\n                res[i] = last_s\n            last_p = res[i]\n        elif str[i] == 'S':\n            if last_r == '$':\n                res[i] = 'S'\n            else:\n                res[i] = last_r\n            last_s = res[i]\n        i -= 1\n    to_print = ''\n    for i in range(size):\n        to_print += res[i]\n    print(to_print)", "N = int(input())\nfor i in range(N):\n    size = int(input())\n    str = input()\n    res = []\n    for i in range(size):\n        res.append(' ')\n    last_r = '!'\n    last_p = '!'\n    last_s = '!'\n    i = size - 1\n    while i >= 0:\n        if str[i] == 'R':\n            if last_p == '!':\n                res[i] = 'R'\n            else:\n                res[i] = last_p\n            last_r = res[i]\n        elif str[i] == 'P':\n            if last_s == '!':\n                res[i] = 'P'\n            else:\n                res[i] = last_s\n            last_p = res[i]\n        elif str[i] == 'S':\n            if last_r == '!':\n                res[i] = 'S'\n            else:\n                res[i] = last_r\n            last_s = res[i]\n        i -= 1\n    to_print = ''\n    for i in range(size):\n        to_print += res[i]\n    print(to_print)", "loop = int(input())\nfor i in range(loop):\n    size = int(input())\n    str = input()\n    res = []\n    for i in range(size):\n        res.append(' ')\n    last_r = '!'\n    last_p = '!'\n    last_s = '!'\n    i = size - 1\n    while i >= 0:\n        if str[i] == 'R':\n            if last_p == '!':\n                res[i] = 'R'\n            else:\n                res[i] = last_p\n            last_r = res[i]\n        elif str[i] == 'P':\n            if last_s == '!':\n                res[i] = 'P'\n            else:\n                res[i] = last_s\n            last_p = res[i]\n        elif str[i] == 'S':\n            if last_r == '!':\n                res[i] = 'S'\n            else:\n                res[i] = last_r\n            last_s = res[i]\n        i -= 1\n    to_print = ''\n    for i in range(size):\n        to_print += res[i]\n    print(to_print)", "def match(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'R' and b == 'S' or (a == 'S' and b == 'R'):\n        return 'R'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        assert False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    rdp = [0] * (n + 1)\n    sdp = [0] * (n + 1)\n    pdp = [0] * (n + 1)\n    ans = [0] * (n + 1)\n    ans[n] = s[n - 1]\n    rdp[n] = match('R', s[n - 1])\n    pdp[n] = match('P', s[n - 1])\n    sdp[n] = match('S', s[n - 1])\n    for i in range(n - 1, 0, -1):\n        r_ans = match('R', s[i - 1])\n        if r_ans == 'R':\n            rdp[i] = rdp[i + 1]\n        elif r_ans == 'P':\n            rdp[i] = pdp[i + 1]\n        elif r_ans == 'S':\n            rdp[i] = sdp[i + 1]\n        p_ans = match('P', s[i - 1])\n        if p_ans == 'R':\n            pdp[i] = rdp[i + 1]\n        elif p_ans == 'P':\n            pdp[i] = pdp[i + 1]\n        elif p_ans == 'S':\n            pdp[i] = sdp[i + 1]\n        s_ans = match('S', s[i - 1])\n        if s_ans == 'R':\n            sdp[i] = rdp[i + 1]\n        elif s_ans == 'P':\n            sdp[i] = pdp[i + 1]\n        elif s_ans == 'S':\n            sdp[i] = sdp[i + 1]\n        if s[i - 1] == 'R':\n            ans[i] = rdp[i + 1]\n        elif s[i - 1] == 'P':\n            ans[i] = pdp[i + 1]\n        elif s[i - 1] == 'S':\n            ans[i] = sdp[i + 1]\n    answer = ''.join(map(str, ans[1:]))\n    print(str(answer))", "def rps(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'S' and b == 'P' or (a == 'P' and b == 'S'):\n        return 'S'\n    elif a == 'S' and b == 'R' or (a == 'R' and b == 'S'):\n        return 'R'\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    dpr = [0] * n\n    dpp = [0] * n\n    dps = [0] * n\n    ans = [0] * n\n    ans[n - 1] = s[n - 1]\n    dpr[n - 1] = rps(s[n - 1], 'R')\n    dpp[n - 1] = rps(s[n - 1], 'P')\n    dps[n - 1] = rps(s[n - 1], 'S')\n    for i in range(n - 1, 0, -1):\n        win = rps(s[i - 1], 'R')\n        if win == 'R':\n            dpr[i - 1] = dpr[i]\n        elif win == 'P':\n            dpr[i - 1] = dpp[i]\n        elif win == 'S':\n            dpr[i - 1] = dps[i]\n        win = rps(s[i - 1], 'P')\n        if win == 'R':\n            dpp[i - 1] = dpr[i]\n        elif win == 'P':\n            dpp[i - 1] = dpp[i]\n        elif win == 'S':\n            dpp[i - 1] = dps[i]\n        win = rps(s[i - 1], 'S')\n        if win == 'R':\n            dps[i - 1] = dpr[i]\n        elif win == 'P':\n            dps[i - 1] = dpp[i]\n        elif win == 'S':\n            dps[i - 1] = dps[i]\n        if s[i - 1] == 'R':\n            ans[i - 1] = dpr[i]\n        elif s[i - 1] == 'P':\n            ans[i - 1] = dpp[i]\n        elif s[i - 1] == 'S':\n            ans[i - 1] = dps[i]\n    print(''.join(ans))", "def string(s, n):\n    if s[n - 1] is 'R':\n        res1 = 'R'\n        res2 = 'P'\n    elif s[n - 1] is 'P':\n        res1 = 'P'\n        res2 = 'S'\n    else:\n        res1 = 'S'\n        res2 = 'R'\n    string = s[n - 1]\n    d = {}\n    d[res1] = 0\n    for i in range(1, n):\n        if s[n - 1 - i] is 'P':\n            if 'S' in d:\n                string = string + string[d['S']]\n            else:\n                string = string + 'P'\n            d['P'] = i\n        elif s[n - 1 - i] is 'R':\n            if 'P' in d:\n                string = string + string[d['P']]\n            else:\n                string = string + 'R'\n            d['R'] = i\n        elif s[n - 1 - i] is 'S':\n            if 'R' in d:\n                string = string + string[d['R']]\n            else:\n                string = string + 'S'\n            d['S'] = i\n    print(string[::-1])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    string(s, n)", "try:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = input()\n        b = [0] * n\n        b[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            if a[i] == a[i + 1]:\n                b[i] = b[i + 1]\n            elif a[i] == 'P' and a[i + 1] == 'S' or (a[i] == 'S' and a[i + 1] == 'R') or (a[i] == 'R' and a[i + 1] == 'P'):\n                b[i] = b[i + 1]\n            else:\n                j = i\n                while j < n - 1:\n                    if a[i] == 'P' and a[j + 1] == 'S' or (a[i] == 'S' and a[j + 1] == 'R') or (a[i] == 'R' and a[j + 1] == 'P') or (a[i] == a[j + 1]):\n                        b[i] = b[j + 1]\n                        break\n                    elif j == n - 2:\n                        b[i] = a[i]\n                        j = j + 1\n                    else:\n                        j = j + 1\n        print(*b, sep='')\nexcept:\n    pass", "try:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = input()\n        b = [0] * n\n        b[n - 1] = a[n - 1]\n        for i in range(n - 2, -1, -1):\n            if a[i] == a[i + 1]:\n                b[i] = b[i + 1]\n            elif a[i] == 'P' and a[i + 1] == 'S' or (a[i] == 'S' and a[i + 1] == 'R') or (a[i] == 'R' and a[i + 1] == 'P'):\n                b[i] = b[i + 1]\n            else:\n                j = i\n                while j < n - 1:\n                    if a[i] == 'P' and a[j + 1] == 'S' or (a[i] == 'S' and a[j + 1] == 'R') or (a[i] == 'R' and a[j + 1] == 'P') or (a[i] == a[j + 1]):\n                        b[i] = b[j + 1]\n                        break\n                    elif j == n - 2:\n                        b[i] = a[i]\n                        j = j + 1\n                    else:\n                        j = j + 1\n        print(*b, sep='')\nexcept:\n    pass", "def match(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'R' and b == 'S' or (a == 'S' and b == 'R'):\n        return 'R'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return False\nfor z in range(int(input())):\n    n = int(input())\n    s = input()\n    dp_r = [''] * (n + 1)\n    dp_p = [''] * (n + 1)\n    dp_s = [''] * (n + 1)\n    ans = [''] * (n + 1)\n    ans[n] = s[n - 1]\n    dp_r[n] = match('R', s[n - 1])\n    dp_p[n] = match('P', s[n - 1])\n    dp_s[n] = match('S', s[n - 1])\n    for i in range(n - 1, 0, -1):\n        r_res = match('R', s[i - 1])\n        if r_res == 'R':\n            dp_r[i] = dp_r[i + 1]\n        elif r_res == 'P':\n            dp_r[i] = dp_p[i + 1]\n        elif r_res == 'S':\n            dp_r[i] = dp_s[i + 1]\n        p_res = match('P', s[i - 1])\n        if p_res == 'R':\n            dp_p[i] = dp_r[i + 1]\n        elif p_res == 'P':\n            dp_p[i] = dp_p[i + 1]\n        elif p_res == 'S':\n            dp_p[i] = dp_s[i + 1]\n        s_res = match('S', s[i - 1])\n        if s_res == 'R':\n            dp_s[i] = dp_r[i + 1]\n        elif s_res == 'P':\n            dp_s[i] = dp_p[i + 1]\n        elif s_res == 'S':\n            dp_s[i] = dp_s[i + 1]\n        if s[i - 1] == 'R':\n            ans[i] = dp_r[i + 1]\n        elif s[i - 1] == 'P':\n            ans[i] = dp_p[i + 1]\n        elif s[i - 1] == 'S':\n            ans[i] = dp_s[i + 1]\n    for i in range(n + 1):\n        print(ans[i], end='')\n    print()", "t = int(input())\nmyDict = {('S', 'S'): 'S', ('S', 'P'): 'S', ('S', 'R'): 'R', ('P', 'P'): 'P', ('P', 'S'): 'S', ('P', 'R'): 'P', ('R', 'R'): 'R', ('R', 'P'): 'P', ('R', 'S'): 'R'}\nwhile t:\n    n = int(input())\n    s = input().rstrip()\n    R_array = [''] * n\n    P_array = [''] * n\n    S_array = [''] * n\n    ans = [''] * n\n    ans[n - 1] = s[n - 1]\n    R_array[n - 1] = myDict['R', s[n - 1]]\n    P_array[n - 1] = myDict['P', s[n - 1]]\n    S_array[n - 1] = myDict['S', s[n - 1]]\n    for i in range(n - 2, -1, -1):\n        comb = ('R', s[i])\n        ansOfFight = myDict[comb]\n        if ansOfFight == 'R':\n            R_array[i] = R_array[i + 1]\n        elif ansOfFight == 'P':\n            R_array[i] = P_array[i + 1]\n        else:\n            R_array[i] = S_array[i + 1]\n        comb = ('P', s[i])\n        ansOfFight = myDict[comb]\n        if ansOfFight == 'R':\n            P_array[i] = R_array[i + 1]\n        elif ansOfFight == 'P':\n            P_array[i] = P_array[i + 1]\n        else:\n            P_array[i] = S_array[i + 1]\n        comb = ('S', s[i])\n        ansOfFight = myDict[comb]\n        if ansOfFight == 'R':\n            S_array[i] = R_array[i + 1]\n        elif ansOfFight == 'P':\n            S_array[i] = P_array[i + 1]\n        else:\n            S_array[i] = S_array[i + 1]\n        if s[i] == 'R':\n            ans[i] = R_array[i]\n        elif s[i] == 'P':\n            ans[i] = P_array[i]\n        else:\n            ans[i] = S_array[i]\n    for i in range(len(ans)):\n        print(ans[i], end='')\n    print()\n    t -= 1", "def Matchfunc(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'R' and b == 'S' or (a == 'S' and b == 'R'):\n        return 'R'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    rock = [None] * (n + 1)\n    scissor = [None] * (n + 1)\n    paper = [None] * (n + 1)\n    ans_str = [None] * (n + 1)\n    ans_str[n] = s[n - 1]\n    rock[n] = Matchfunc('R', s[n - 1])\n    paper[n] = Matchfunc('P', s[n - 1])\n    scissor[n] = Matchfunc('S', s[n - 1])\n    for i in range(n - 1, 0, -1):\n        rock_result = Matchfunc('R', s[i - 1])\n        if rock_result == 'R':\n            rock[i] = rock[i + 1]\n        elif rock_result == 'P':\n            rock[i] = paper[i + 1]\n        elif rock_result == 'S':\n            rock[i] = scissor[i + 1]\n        paper_result = Matchfunc('P', s[i - 1])\n        if paper_result == 'R':\n            paper[i] = rock[i + 1]\n        elif paper_result == 'P':\n            paper[i] = paper[i + 1]\n        elif paper_result == 'S':\n            paper[i] = scissor[i + 1]\n        scissor_result = Matchfunc('S', s[i - 1])\n        if scissor_result == 'R':\n            scissor[i] = rock[i + 1]\n        elif scissor_result == 'P':\n            scissor[i] = paper[i + 1]\n        elif scissor_result == 'S':\n            scissor[i] = scissor[i + 1]\n        if s[i - 1] == 'R':\n            ans_str[i] = rock[i + 1]\n        elif s[i - 1] == 'P':\n            ans_str[i] = paper[i + 1]\n        elif s[i - 1] == 'S':\n            ans_str[i] = scissor[i + 1]\n    final_ans = ''\n    for i in range(1, n + 1):\n        final_ans = final_ans + ans_str[i]\n    print(final_ans)", "t = int(input())\nl = []\nwhile t > 0:\n    n = int(input())\n    mov = list(map(str, input()))\n    r = {}\n    p = {}\n    s = {}\n    S = ''\n    if n == 1:\n        l.append(mov[0])\n    else:\n        S += mov[n - 1]\n        if mov[n - 1] == 'R':\n            r[n - 2] = 'R'\n            p[n - 2] = 'P'\n            s[n - 2] = 'R'\n        elif mov[n - 1] == 'P':\n            r[n - 2] = 'P'\n            p[n - 2] = 'P'\n            s[n - 2] = 'S'\n        elif mov[n - 1] == 'S':\n            r[n - 2] = 'R'\n            p[n - 2] = 'S'\n            s[n - 2] = 'S'\n        if mov[n - 2] == 'R':\n            S += r[n - 2]\n        elif mov[n - 2] == 'P':\n            S += p[n - 2]\n        else:\n            S += s[n - 2]\n        for i in range(n - 3, -1, -1):\n            if mov[i + 1] == 'R':\n                r[i] = r[i + 1]\n                p[i] = p[i + 1]\n                s[i] = r[i + 1]\n            elif mov[i + 1] == 'P':\n                r[i] = p[i + 1]\n                p[i] = p[i + 1]\n                s[i] = s[i + 1]\n            elif mov[i + 1] == 'S':\n                r[i] = r[i + 1]\n                p[i] = s[i + 1]\n                s[i] = s[i + 1]\n            if mov[i] == 'P':\n                S += p[i]\n            elif mov[i] == 'R':\n                S += r[i]\n            else:\n                S += s[i]\n        l.append(S[::-1])\n    t -= 1\nprint('\\n'.join(l))", "def ans(l):\n    if l[-1] == l[-2]:\n        return l[-1]\n    if l == ['P', 'R']:\n        return 'P'\n    if l == ['R', 'S']:\n        return 'R'\n    if l == ['P', 'S']:\n        return 'S'\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = s[-1]\n    b = ''\n    for i in range(n - 2, -1, -1):\n        if a != s[i]:\n            b = s[i]\n            break\n    if b == '':\n        print(n * a)\n    elif a == 'P' and b == 'R':\n        print(n * 'P')\n    elif a == 'R' and b == 'S':\n        print(n * 'R')\n    elif a == 'S' and b == 'P':\n        print(n * 'S')\n    else:\n        c = d = o = ''\n        c_ = n - 1\n        p = True\n        y = c_\n        k = {}\n        for i in range(n - 1, -1, -1):\n            if i == n - 1:\n                c = s[i]\n                o += s[i]\n            elif d == '':\n                if c != s[i]:\n                    d = s[i]\n                o += s[i]\n            elif (s[i] == c or s[i] == d) and p is True:\n                o += d\n                if s[i] == c:\n                    y = i\n            elif (s[i] != c and s[i] != d) and p is True:\n                r = s[i]\n                if y == n - 1:\n                    o += c\n                    p = False\n                    k[s[i]] = c\n                else:\n                    o += d\n                    p = False\n                    k[s[i]] = d\n            elif s[i] == r:\n                if k.get(c, 0) == 0:\n                    o += k[s[i]]\n                else:\n                    o += k[c]\n                    k[s[i]] = k[c]\n            elif s[i] == d:\n                o += k[r]\n                k[s[i]] = k[r]\n            elif s[i] == c:\n                if not k.get(d, 0):\n                    k[s[i]] = d\n                    o += d\n                else:\n                    o += k[d]\n                    k[s[i]] = k[d]\n        print(o[::-1])", "def match(a, b):\n    if a == b:\n        return a\n    elif a == 'R' and b == 'P' or (a == 'P' and b == 'R'):\n        return 'P'\n    elif a == 'R' and b == 'S' or (a == 'S' and b == 'R'):\n        return 'R'\n    elif a == 'P' and b == 'S' or (a == 'S' and b == 'P'):\n        return 'S'\n\ndef main():\n    t = int(input())\n    for j in range(t):\n        n = int(input())\n        s = input()\n        res = ''\n        dp_r = [0] * (n + 1)\n        dp_p = [0] * (n + 1)\n        dp_s = [0] * (n + 1)\n        ans = [0] * (n + 1)\n        ans[n] = s[n - 1]\n        dp_r[n] = match('R', s[n - 1])\n        dp_p[n] = match('P', s[n - 1])\n        dp_s[n] = match('S', s[n - 1])\n        for i in range(n - 1, 0, -1):\n            r_res = match('R', s[i - 1])\n            if r_res == 'R':\n                dp_r[i] = dp_r[i + 1]\n            elif r_res == 'P':\n                dp_r[i] = dp_p[i + 1]\n            elif r_res == 'S':\n                dp_r[i] = dp_s[i + 1]\n            p_res = match('P', s[i - 1])\n            if p_res == 'R':\n                dp_p[i] = dp_r[i + 1]\n            elif p_res == 'P':\n                dp_p[i] = dp_p[i + 1]\n            elif p_res == 'S':\n                dp_p[i] = dp_s[i + 1]\n            s_res = match('S', s[i - 1])\n            if s_res == 'R':\n                dp_s[i] = dp_r[i + 1]\n            elif s_res == 'P':\n                dp_s[i] = dp_p[i + 1]\n            elif s_res == 'S':\n                dp_s[i] = dp_s[i + 1]\n            if s[i - 1] == 'R':\n                ans[i] = dp_r[i + 1]\n            elif s[i - 1] == 'P':\n                ans[i] = dp_p[i + 1]\n            elif s[i - 1] == 'S':\n                ans[i] = dp_s[i + 1]\n        for val in ans:\n            if val != 0:\n                res += val\n        print(res)\nmain()", "choices = {'R': ['R', 'S', 'P'], 'P': ['P', 'R', 'S'], 'S': ['S', 'P', 'R']}\nfor test in range(int(input())):\n    N = int(input())\n    S = input()\n    first_answer = S[-1]\n    second_answer = choices[first_answer][2]\n    current_answer = first_answer\n    same = False\n    final_string_list = [first_answer]\n    for x in range(N - 1):\n        if same == True:\n            final_string_list.append(current_answer)\n        elif S[-x - 2] == choices[S[-x - 1]][0]:\n            final_string_list.append(current_answer)\n        elif S[-x - 2] == choices[S[-x - 1]][1]:\n            final_string_list.append(current_answer)\n            same = True\n        elif S[-x - 2] == choices[S[-x - 1]][2]:\n            if current_answer == first_answer:\n                current_answer = second_answer\n            elif current_answer == second_answer:\n                current_answer = first_answer\n            final_string_list.append(current_answer)\n    final_string_list = [final_string_list[-1 - x] for x in range(len(final_string_list))]\n    final_string = ''.join(final_string_list)\n    print(final_string)", "def is_won(p1, p2):\n    result = False\n    if p1 == 'R':\n        result = p2 == 'S'\n    elif p1 == 'P':\n        result = p2 == 'R'\n    else:\n        result = p2 == 'P'\n    return result\n\ndef testcase():\n\n    def roll_win(plyr_idx, opp_idx):\n        result = S[plyr_idx]\n        while opp_idx < N and is_won(S[plyr_idx], S[opp_idx]):\n            opp_idx += 1\n        if opp_idx < N:\n            result = R[opp_idx]\n        return result\n    N = int(input())\n    S = input()\n    R = [None for s in S]\n    R[N - 1] = S[N - 1]\n    for i in range(N - 2, -1, -1):\n        R[i] = roll_win(i, i + 2) if is_won(S[i], S[i + 1]) else R[i + 1]\n    return ''.join(R)\nfor i in range(int(input())):\n    print(testcase())", "import numpy as np\n\ndef who_won(player_1, player_2):\n    if player_2 == 'P' and player_1 == 'R' or (player_2 == 'S' and player_1 == 'P') or (player_2 == 'R' and player_1 == 'S'):\n        return player_2\n    else:\n        return player_1\nnumberOfTests = int(input())\nresults = []\nfor x in range(numberOfTests):\n    n = int(input())\n    gameString = input()\n    R = ['' for x in range(n)]\n    P = ['' for x in range(n)]\n    S = ['' for x in range(n)]\n    res = ['' for x in range(n)]\n    res[n - 1] = gameString[n - 1]\n    R[n - 1] = who_won('R', gameString[n - 1])\n    P[n - 1] = who_won('P', gameString[n - 1])\n    S[n - 1] = who_won('S', gameString[n - 1])\n    for i in range(n - 2, -1, -1):\n        temp = who_won('R', gameString[i])\n        if temp == 'R':\n            R[i] = R[i + 1]\n        elif temp == 'P':\n            R[i] = P[i + 1]\n        else:\n            R[i] = S[i + 1]\n        temp = who_won('P', gameString[i])\n        if temp == 'R':\n            P[i] = R[i + 1]\n        elif temp == 'P':\n            P[i] = P[i + 1]\n        else:\n            P[i] = S[i + 1]\n        temp = who_won('S', gameString[i])\n        if temp == 'R':\n            S[i] = R[i + 1]\n        elif temp == 'P':\n            S[i] = P[i + 1]\n        else:\n            S[i] = S[i + 1]\n        temp = gameString[i]\n        if temp == 'R':\n            res[i] = R[i + 1]\n        elif temp == 'P':\n            res[i] = P[i + 1]\n        else:\n            res[i] = S[i + 1]\n    result = ''\n    print(result.join(res))", "def move_is_rock(move2):\n    if move2 == 'P':\n        return 'P'\n    elif move2 == 'S':\n        return 'R'\n\ndef move_is_paper(move2):\n    if move2 == 'S':\n        return 'S'\n    elif move2 == 'R':\n        return 'P'\n\ndef move_is_scissor(move2):\n    if move2 == 'R':\n        return 'R'\n    elif move2 == 'P':\n        return 'S'\n\ndef single_match(move1, move2):\n    if move1 == move2:\n        return move1\n    elif move1 == 'R':\n        return move_is_rock(move2)\n    elif move1 == 'P':\n        return move_is_paper(move2)\n    elif move1 == 'S':\n        return move_is_scissor(move2)\n    else:\n        exit()\n\ndef templated_check(sign_RPS, s_moves, i, dest_array, rock_array, paper_array, scissor_array):\n    result = single_match(sign_RPS, s_moves[i - 1])\n    if result == 'R':\n        dest_array[i] = rock_array[i + 1]\n    elif result == 'P':\n        dest_array[i] = paper_array[i + 1]\n    elif result == 'S':\n        dest_array[i] = scissor_array[i + 1]\ntests = int(input())\nfor test in range(tests):\n    number_of_players = int(input())\n    s_moves = input()\n    rock_array = [''] * (number_of_players + 1)\n    paper_array = [''] * (number_of_players + 1)\n    scissor_array = [''] * (number_of_players + 1)\n    answer_array = [''] * (number_of_players + 1)\n    answer_array[number_of_players] = s_moves[number_of_players - 1]\n    rock_array[number_of_players] = single_match('R', s_moves[number_of_players - 1])\n    paper_array[number_of_players] = single_match('P', s_moves[number_of_players - 1])\n    scissor_array[number_of_players] = single_match('S', s_moves[number_of_players - 1])\n    for i in range(number_of_players - 1, 0, -1):\n        templated_check('R', s_moves, i, rock_array, rock_array, paper_array, scissor_array)\n        templated_check('P', s_moves, i, paper_array, rock_array, paper_array, scissor_array)\n        templated_check('S', s_moves, i, scissor_array, rock_array, paper_array, scissor_array)\n        paper_result = single_match('P', s_moves[i - 1])\n        if s_moves[i - 1] == 'R':\n            answer_array[i] = rock_array[i + 1]\n        elif s_moves[i - 1] == 'P':\n            answer_array[i] = paper_array[i + 1]\n        elif s_moves[i - 1] == 'S':\n            answer_array[i] = scissor_array[i + 1]\n    for i in range(1, number_of_players + 1):\n        print(answer_array[i], end='')\n    print()", "def move_is_rock(move2):\n    if move2 == 'P':\n        return 'P'\n    elif move2 == 'S':\n        return 'R'\n\ndef move_is_paper(move2):\n    if move2 == 'S':\n        return 'S'\n    elif move2 == 'R':\n        return 'P'\n\ndef move_is_scissor(move2):\n    if move2 == 'R':\n        return 'R'\n    elif move2 == 'P':\n        return 'S'\n\ndef single_match(move1, move2):\n    if move1 == move2:\n        return move1\n    elif move1 == 'R':\n        return move_is_rock(move2)\n    elif move1 == 'P':\n        return move_is_paper(move2)\n    elif move1 == 'S':\n        return move_is_scissor(move2)\n    else:\n        exit()\ntests = int(input())\nfor test in range(tests):\n    number_of_players = int(input())\n    s_moves = input()\n    rock_array = [''] * (number_of_players + 1)\n    paper_array = [''] * (number_of_players + 1)\n    scissor_array = [''] * (number_of_players + 1)\n    answer_array = [''] * (number_of_players + 1)\n    answer_array[number_of_players] = s_moves[number_of_players - 1]\n    rock_array[number_of_players] = single_match('R', s_moves[number_of_players - 1])\n    paper_array[number_of_players] = single_match('P', s_moves[number_of_players - 1])\n    scissor_array[number_of_players] = single_match('S', s_moves[number_of_players - 1])\n    for i in range(number_of_players - 1, 0, -1):\n        rock_result = single_match('R', s_moves[i - 1])\n        if rock_result == 'R':\n            rock_array[i] = rock_array[i + 1]\n        elif rock_result == 'P':\n            rock_array[i] = paper_array[i + 1]\n        elif rock_result == 'S':\n            rock_array[i] = scissor_array[i + 1]\n        paper_result = single_match('P', s_moves[i - 1])\n        if paper_result == 'R':\n            paper_array[i] = rock_array[i + 1]\n        elif paper_result == 'P':\n            paper_array[i] = paper_array[i + 1]\n        elif paper_result == 'S':\n            paper_array[i] = scissor_array[i + 1]\n        scissor_result = single_match('S', s_moves[i - 1])\n        if scissor_result == 'R':\n            scissor_array[i] = rock_array[i + 1]\n        elif scissor_result == 'P':\n            scissor_array[i] = paper_array[i + 1]\n        elif scissor_result == 'S':\n            scissor_array[i] = scissor_array[i + 1]\n        if s_moves[i - 1] == 'R':\n            answer_array[i] = rock_array[i + 1]\n        elif s_moves[i - 1] == 'P':\n            answer_array[i] = paper_array[i + 1]\n        elif s_moves[i - 1] == 'S':\n            answer_array[i] = scissor_array[i + 1]\n    for i in range(1, number_of_players + 1):\n        print(answer_array[i], end='')\n    print()", "R = 0\nP = 1\nS = 2\nfor _ in range(int(input())):\n    input()\n    moves = []\n    for c in input():\n        if c == 'R':\n            moves.append(R)\n        elif c == 'P':\n            moves.append(P)\n        else:\n            moves.append(S)\n    N = len(moves)\n    W = [-1] * N\n    W[-1] = moves[-1]\n    last = [N + 1] * 3\n    last[moves[-1]] = N - 1\n    for i in range(N - 2, -1, -1):\n        if moves[i] == moves[i + 1] or (moves[i] + 1) % 3 == moves[i + 1]:\n            W[i] = W[i + 1]\n        else:\n            nextdiff = min(last[moves[i]], last[(moves[i] + 1) % 3])\n            if nextdiff > N:\n                W[i] = moves[i]\n            else:\n                W[i] = W[nextdiff]\n        last[moves[i]] = i\n    for move in W:\n        if move == R:\n            print('R', end='')\n        elif move == P:\n            print('P', end='')\n        else:\n            print('S', end='')\n    print()", "def logic(list, N):\n    complementary = {'P': 'S', 'R': 'P', 'S': 'R'}\n    answer = ''\n    if N == 1:\n        answer = answer + list[0]\n    else:\n        stop = False\n        unnecessary = 0\n        flipped = True\n        for i in range(N - 1):\n            if list[N - 1 - i] + list[N - 2 - i] == 'SP' or list[N - 1 - i] + list[N - 2 - i] == 'PR' or list[N - 1 - i] + list[N - 2 - i] == 'RS':\n                stop = True\n                unnecessary = i + 1\n            elif list[N - 1 - i] + list[N - 2 - i] == 'PS' or list[N - 1 - i] + list[N - 2 - i] == 'RP' or list[N - 1 - i] + list[N - 2 - i] == 'SR':\n                flipped = not flipped\n            if stop:\n                break\n        if stop:\n            for i in range(N - unnecessary):\n                if flipped:\n                    answer = answer + list[len(list) - 1]\n                    list = list[1:]\n                else:\n                    answer = answer + complementary[list[len(list) - 1]]\n                    list = list[1:]\n            for i in range(unnecessary - 1):\n                if flipped:\n                    answer = answer + list[len(list) - 1]\n                else:\n                    answer = answer + complementary[list[len(list) - 1]]\n                if list[0] != list[1]:\n                    flipped = not flipped\n                list = list[1:]\n        else:\n            for i in range(N - 1):\n                if flipped:\n                    answer = answer + list[len(list) - 1]\n                else:\n                    answer = answer + complementary[list[len(list) - 1]]\n                if list[0] != list[1]:\n                    flipped = not flipped\n                list = list[1:]\n        answer = answer + list[0]\n    return answer\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    moves = input()\n    print(logic(moves, N))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print(s)\n        continue\n    s1 = s[n - 1]\n    for j in range(n - 2, -1, -1):\n        temp = s[j]\n        index = -1\n        for k in range(j + 1, n):\n            if temp == s[k]:\n                index = k\n                break\n            elif temp == 'R' and s[k] == 'P':\n                index = k\n                break\n            elif temp == 'P' and s[k] == 'S':\n                index = k\n                break\n            elif temp == 'S' and s[k] == 'R':\n                index = k\n                break\n        if index != -1:\n            s1 = s1[k - j - 1] + s1\n        else:\n            s1 = temp + s1\n    print(s1)", "def checker(v1, v2):\n    if v1 == v2:\n        return v1\n    if v1 == 'S' and v2 == 'R' or (v1 == 'R' and v2 == 'P') or (v1 == 'P' and v2 == 'S'):\n        return v2\n    if v1 == 'R' and v2 == 'S' or (v1 == 'P' and v2 == 'R') or (v1 == 'S' and v2 == 'P'):\n        return v1\n\ndef solution(ls: list):\n    n = len(ls)\n    dp_r = [0] * (n + 1)\n    dp_p = [0] * (n + 1)\n    dp_s = [0] * (n + 1)\n    ans = [0] * (n + 1)\n    ans[n] = ls[n - 1]\n    dp_r[n] = checker('R', ls[n - 1])\n    dp_p[n] = checker('P', ls[n - 1])\n    dp_s[n] = checker('S', ls[n - 1])\n    for i in range(n - 1, 0, -1):\n        r_res = checker('R', ls[i - 1])\n        if r_res == 'R':\n            dp_r[i] = dp_r[i + 1]\n        elif r_res == 'P':\n            dp_r[i] = dp_p[i + 1]\n        else:\n            dp_r[i] = dp_s[i + 1]\n        p_res = checker('P', ls[i - 1])\n        if p_res == 'R':\n            dp_p[i] = dp_r[i + 1]\n        elif p_res == 'P':\n            dp_p[i] = dp_p[i + 1]\n        else:\n            dp_p[i] = dp_s[i + 1]\n        s_res = checker('S', ls[i - 1])\n        if s_res == 'R':\n            dp_s[i] = dp_r[i + 1]\n        elif s_res == 'P':\n            dp_s[i] = dp_p[i + 1]\n        else:\n            dp_s[i] = dp_s[i + 1]\n        if ls[i - 1] == 'R':\n            ans[i] = dp_r[i + 1]\n        elif ls[i - 1] == 'P':\n            ans[i] = dp_p[i + 1]\n        else:\n            ans[i] = dp_s[i + 1]\n    for i in range(1, n + 1):\n        print(ans[i], end='')\n    print()\nt = int(input())\nwhile t:\n    n = int(input())\n    string = list(input())\n    solution(string)\n    t -= 1", "def match(a, b):\n    if a == b:\n        return a\n    if a == 'S' and b == 'R' or (a == 'R' and b == 'S'):\n        return 'R'\n    elif a == 'S' and b == 'P' or (a == 'P' and b == 'S'):\n        return 'S'\n    elif a == 'P' and b == 'R' or (a == 'R' and b == 'P'):\n        return 'P'\n    else:\n        return None\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    dp_r = [None] * (n + 1)\n    dp_p = [None] * (n + 1)\n    dp_s = [None] * (n + 1)\n    ans = [None] * (n + 1)\n    ans[n] = s[n - 1]\n    dp_r[n] = match('R', s[n - 1])\n    dp_p[n] = match('P', s[n - 1])\n    dp_s[n] = match('S', s[n - 1])\n    for i in range(n - 1, 1 - 1, -1):\n        r_res = match('R', s[i - 1])\n        if r_res == 'R':\n            dp_r[i] = dp_r[i + 1]\n        elif r_res == 'P':\n            dp_r[i] = dp_p[i + 1]\n        elif r_res == 'S':\n            dp_r[i] = dp_s[i + 1]\n        p_res = match('P', s[i - 1])\n        if p_res == 'R':\n            dp_p[i] = dp_r[i + 1]\n        elif p_res == 'P':\n            dp_p[i] = dp_p[i + 1]\n        elif p_res == 'S':\n            dp_p[i] = dp_s[i + 1]\n        s_res = match('S', s[i - 1])\n        if s_res == 'R':\n            dp_s[i] = dp_r[i + 1]\n        elif s_res == 'P':\n            dp_s[i] = dp_p[i + 1]\n        elif s_res == 'S':\n            dp_s[i] = dp_s[i + 1]\n        if s[i - 1] == 'R':\n            ans[i] = dp_r[i + 1]\n        elif s[i - 1] == 'P':\n            ans[i] = dp_p[i + 1]\n        elif s[i - 1] == 'S':\n            ans[i] = dp_s[i + 1]\n    print(''.join(ans[1:]))", "def win(pl1, pl2):\n    game = pl1 + pl2\n    if game == 'SR' or game == 'PS' or game == 'RP' or (pl1 == pl2):\n        return False\n    return True\n\ndef SPQR(s):\n    if len(s) == 1:\n        return s\n    res = s[0]\n    order = [(s[0], 0)]\n    for i in range(1, len(s)):\n        winAll = True\n        for ordr in order:\n            if win(ordr[0], s[i]):\n                res += res[ordr[1]]\n                winAll = False\n                break\n        if winAll:\n            res += s[i]\n        if s[i] != order[0][0]:\n            order.insert(0, (s[i], i))\n    return res[::-1]\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    print(SPQR(S[::-1]))", "def foofafoofa(one, two):\n    if one == two:\n        return one\n    elif one == 'R' and two == 'P' or (one == 'P' and two == 'R'):\n        return 'P'\n    elif one == 'R' and two == 'S' or (one == 'S' and two == 'R'):\n        return 'R'\n    elif one == 'S' and two == 'P' or (one == 'P' and two == 'S'):\n        return 'S'\n    else:\n        return False\nN = int(input())\nfor _ in range(N):\n    n = int(input())\n    s = input()\n    dpRock = [' ' for i in range(n + 1)]\n    dpPaper = [' ' for i in range(n + 1)]\n    dpScissors = [' ' for i in range(n + 1)]\n    output = [' ' for i in range(n + 1)]\n    output[n] = s[n - 1]\n    dpRock[n] = foofafoofa('R', s[n - 1])\n    dpPaper[n] = foofafoofa('P', s[n - 1])\n    dpScissors[n] = foofafoofa('S', s[n - 1])\n    for i in range(n - 1, 0, -1):\n        r_res = foofafoofa('R', s[i - 1])\n        if r_res == 'R':\n            dpRock[i] = dpRock[i + 1]\n        elif r_res == 'S':\n            dpRock[i] = dpScissors[i + 1]\n        elif r_res == 'P':\n            dpRock[i] = dpPaper[i + 1]\n        p_res = foofafoofa('P', s[i - 1])\n        if p_res == 'R':\n            dpPaper[i] = dpRock[i + 1]\n        elif p_res == 'S':\n            dpPaper[i] = dpScissors[i + 1]\n        elif p_res == 'P':\n            dpPaper[i] = dpPaper[i + 1]\n        s_res = foofafoofa('S', s[i - 1])\n        if s_res == 'R':\n            dpScissors[i] = dpRock[i + 1]\n        elif s_res == 'S':\n            dpScissors[i] = dpScissors[i + 1]\n        elif s_res == 'P':\n            dpScissors[i] = dpPaper[i + 1]\n        if s[i - 1] == 'R':\n            output[i] = dpRock[i + 1]\n        elif s[i - 1] == 'P':\n            output[i] = dpPaper[i + 1]\n        else:\n            output[i] = dpScissors[i + 1]\n    for i in range(n + 1):\n        if output[i] != ' ':\n            print(output[i], end='')\n    print()", "def rps(a, b):\n    if a == 'R' and b == 'R' or (a == 'P' and b == 'P') or (a == 'S' and b == 'S') or (a == 'R' and b == 'S') or (a == 'S' and b == 'P') or (a == 'P' and b == 'R'):\n        return a\n    else:\n        return b\nfor i in range(int(input())):\n    n = int(input())\n    s = input()\n    k = [0]\n    k[0] = s[n - 1]\n    for j in range(n - 2, -1, -1):\n        l = j + 1\n        c = 0\n        m = s[j]\n        while 1:\n            if rps(m, s[l]) == s[l] and l != n - 1:\n                k.append(k[-c - 1])\n                break\n            elif l == n - 1:\n                k.append(rps(m, s[l]))\n                break\n            else:\n                m = rps(m, s[l])\n                c += 1\n                l += 1\n    s = ''.join(k)\n    print(s[::-1])", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    ropasci = input()\n    reString = [None] * N\n    reString[N - 1] = ropasci[N - 1]\n    s = p = r = -1\n    if ropasci[N - 1] == 'P':\n        p = N - 1\n    elif ropasci[N - 1] == 'R':\n        r = N - 1\n    else:\n        s = N - 1\n    for i in range(len(ropasci) - 2, -1, -1):\n        if ropasci[i] == 'P':\n            p = i\n            if s != -1:\n                reString[i] = reString[s]\n            else:\n                reString[i] = ropasci[i]\n        elif ropasci[i] == 'S':\n            s = i\n            if r != -1:\n                reString[i] = reString[r]\n            else:\n                reString[i] = ropasci[i]\n        elif ropasci[i] == 'R':\n            r = i\n            if p != -1:\n                reString[i] = reString[p]\n            else:\n                reString[i] = ropasci[i]\n    reString = ''.join(map(str, reString))\n    print(reString)", "def one_game(first, second):\n    if first == second:\n        return first\n    if first == 'P' and second == 'R' or (first == 'R' and second == 'P'):\n        return 'P'\n    if first == 'R' and second == 'S' or (first == 'S' and second == 'R'):\n        return 'R'\n    if first == 'S' and second == 'P' or (first == 'P' and second == 'S'):\n        return 'S'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    rock = [None] * (n + 1)\n    paper = [None] * (n + 1)\n    scissors = [None] * (n + 1)\n    result_str = [None] * (n + 1)\n    result_str[n] = s[n - 1]\n    rock[n] = one_game('R', s[n - 1])\n    paper[n] = one_game('P', s[n - 1])\n    scissors[n] = one_game('S', s[n - 1])\n    for i in range(n - 1, 0, -1):\n        rock_result = one_game('R', s[i - 1])\n        if rock_result == 'R':\n            rock[i] = rock[i + 1]\n        elif rock_result == 'P':\n            rock[i] = paper[i + 1]\n        else:\n            rock[i] = scissors[i + 1]\n        paper_result = one_game('P', s[i - 1])\n        if paper_result == 'R':\n            paper[i] = rock[i + 1]\n        elif paper_result == 'P':\n            paper[i] = paper[i + 1]\n        else:\n            paper[i] = scissors[i + 1]\n        scissors_result = one_game('S', s[i - 1])\n        if scissors_result == 'R':\n            scissors[i] = rock[i + 1]\n        elif scissors_result == 'P':\n            scissors[i] = paper[i + 1]\n        else:\n            scissors[i] = scissors[i + 1]\n        if s[i - 1] == 'R':\n            result_str[i] = rock[i + 1]\n        elif s[i - 1] == 'P':\n            result_str[i] = paper[i + 1]\n        else:\n            result_str[i] = scissors[i + 1]\n    for i in range(1, n + 1, 1):\n        print(result_str[i], end='')\n    print()", "def getWinner(tuple_):\n    if tuple_[0] == tuple_[1]:\n        return tuple_[0]\n    elif 'S' in tuple_ and 'P' in tuple_:\n        return 'S'\n    elif 'S' in tuple_ and 'R' in tuple_:\n        return 'R'\n    else:\n        return 'P'\n\ndef printWinners(si, n):\n    mat_r = ['X' for i in range(n + 1)]\n    mat_p = mat_r.copy()\n    mat_s = mat_r.copy()\n    ans = mat_r.copy()\n    ans[n] = si[n - 1]\n    mat_r[n] = getWinner(('R', si[n - 1]))\n    mat_p[n] = getWinner(('P', si[n - 1]))\n    mat_s[n] = getWinner(('S', si[n - 1]))\n    for i in range(n - 1, 0, -1):\n        r_res = getWinner(('R', si[i - 1]))\n        if r_res == 'R':\n            mat_r[i] = mat_r[i + 1]\n        elif r_res == 'P':\n            mat_r[i] = mat_p[i + 1]\n        else:\n            mat_r[i] = mat_s[i + 1]\n        p_res = getWinner(('P', si[i - 1]))\n        if p_res == 'R':\n            mat_p[i] = mat_r[i + 1]\n        elif p_res == 'P':\n            mat_p[i] = mat_p[i + 1]\n        else:\n            mat_p[i] = mat_s[i + 1]\n        s_res = getWinner(('S', si[i - 1]))\n        if s_res == 'R':\n            mat_s[i] = mat_r[i + 1]\n        elif s_res == 'P':\n            mat_s[i] = mat_p[i + 1]\n        else:\n            mat_s[i] = mat_s[i + 1]\n        if si[i - 1] == 'R':\n            ans[i] = mat_r[i + 1]\n        elif si[i - 1] == 'P':\n            ans[i] = mat_p[i + 1]\n        else:\n            ans[i] = mat_s[i + 1]\n    return ''.join(ans[1:])\nfor _ in range(int(input())):\n    n = int(input())\n    si = input()\n    print(printWinners(si, n))", "ROCK_SIGN = 'R'\nPAPER_SIGN = 'P'\nSCCISORS_SIGN = 'S'\n\ndef make_turn(player1, player2):\n    if player1 == player2:\n        return player1\n    if player1 == ROCK_SIGN and player2 == SCCISORS_SIGN or (player1 == SCCISORS_SIGN and player2 == ROCK_SIGN):\n        return ROCK_SIGN\n    if player1 == ROCK_SIGN and player2 == PAPER_SIGN or (player1 == PAPER_SIGN and player2 == ROCK_SIGN):\n        return PAPER_SIGN\n    if player1 == SCCISORS_SIGN and player2 == PAPER_SIGN or (player1 == PAPER_SIGN and player2 == SCCISORS_SIGN):\n        return SCCISORS_SIGN\nT = int(input())\nfor _ in range(T):\n    numberOfPlayers = int(input())\n    input_str = input()\n    res = [' '] * (numberOfPlayers + 1)\n    rock = [' '] * (numberOfPlayers + 1)\n    paper = [' '] * (numberOfPlayers + 1)\n    sccisors = [' '] * (numberOfPlayers + 1)\n    res[numberOfPlayers] = input_str[numberOfPlayers - 1]\n    rock[numberOfPlayers] = make_turn(ROCK_SIGN, input_str[numberOfPlayers - 1])\n    paper[numberOfPlayers] = make_turn(PAPER_SIGN, input_str[numberOfPlayers - 1])\n    sccisors[numberOfPlayers] = make_turn(SCCISORS_SIGN, input_str[numberOfPlayers - 1])\n    for i in range(numberOfPlayers - 1, 0, -1):\n        iPlusOne = i + 1\n        r_play = make_turn(ROCK_SIGN, input_str[i - 1])\n        if r_play == ROCK_SIGN:\n            rock[i] = rock[iPlusOne]\n        elif r_play == PAPER_SIGN:\n            rock[i] = paper[iPlusOne]\n        elif r_play == SCCISORS_SIGN:\n            rock[i] = sccisors[iPlusOne]\n        p_play = make_turn(PAPER_SIGN, input_str[i - 1])\n        if p_play == ROCK_SIGN:\n            paper[i] = rock[iPlusOne]\n        elif p_play == PAPER_SIGN:\n            paper[i] = paper[iPlusOne]\n        elif p_play == SCCISORS_SIGN:\n            paper[i] = sccisors[iPlusOne]\n        s_play = make_turn(SCCISORS_SIGN, input_str[i - 1])\n        if s_play == ROCK_SIGN:\n            sccisors[i] = rock[iPlusOne]\n        elif s_play == PAPER_SIGN:\n            sccisors[i] = paper[iPlusOne]\n        elif s_play == SCCISORS_SIGN:\n            sccisors[i] = sccisors[iPlusOne]\n        if input_str[i - 1] == ROCK_SIGN:\n            res[i] = rock[iPlusOne]\n        elif input_str[i - 1] == PAPER_SIGN:\n            res[i] = paper[iPlusOne]\n        elif input_str[i - 1] == SCCISORS_SIGN:\n            res[i] = sccisors[iPlusOne]\n    for i in range(1, numberOfPlayers + 1):\n        print(res[i], end='')\n    print()", "ROCK_SIGN = 'R'\nPAPER_SIGN = 'P'\nSCCISORS_SIGN = 'S'\n\ndef make_turn(player1, player2):\n    if player1 == player2:\n        return player1\n    if player1 == ROCK_SIGN and player2 == SCCISORS_SIGN or (player1 == SCCISORS_SIGN and player2 == ROCK_SIGN):\n        return ROCK_SIGN\n    if player1 == ROCK_SIGN and player2 == PAPER_SIGN or (player1 == PAPER_SIGN and player2 == ROCK_SIGN):\n        return PAPER_SIGN\n    if player1 == SCCISORS_SIGN and player2 == PAPER_SIGN or (player1 == PAPER_SIGN and player2 == SCCISORS_SIGN):\n        return SCCISORS_SIGN\nT = int(input())\nfor _ in range(T):\n    numberOfPlayers = int(input())\n    input_str = input()\n    res = [' '] * (numberOfPlayers + 1)\n    rock = [' '] * (numberOfPlayers + 1)\n    paper = [' '] * (numberOfPlayers + 1)\n    sccisors = [' '] * (numberOfPlayers + 1)\n    res[numberOfPlayers] = input_str[numberOfPlayers - 1]\n    rock[numberOfPlayers] = make_turn(ROCK_SIGN, input_str[numberOfPlayers - 1])\n    paper[numberOfPlayers] = make_turn(PAPER_SIGN, input_str[numberOfPlayers - 1])\n    sccisors[numberOfPlayers] = make_turn(SCCISORS_SIGN, input_str[numberOfPlayers - 1])\n    for i in range(numberOfPlayers - 1, 0, -1):\n        r_play = make_turn(ROCK_SIGN, input_str[i - 1])\n        if r_play == ROCK_SIGN:\n            rock[i] = rock[i + 1]\n        elif r_play == PAPER_SIGN:\n            rock[i] = paper[i + 1]\n        elif r_play == SCCISORS_SIGN:\n            rock[i] = sccisors[i + 1]\n        p_play = make_turn(PAPER_SIGN, input_str[i - 1])\n        if p_play == ROCK_SIGN:\n            paper[i] = rock[i + 1]\n        elif p_play == PAPER_SIGN:\n            paper[i] = paper[i + 1]\n        elif p_play == SCCISORS_SIGN:\n            paper[i] = sccisors[i + 1]\n        s_play = make_turn(SCCISORS_SIGN, input_str[i - 1])\n        if s_play == ROCK_SIGN:\n            sccisors[i] = rock[i + 1]\n        elif s_play == PAPER_SIGN:\n            sccisors[i] = paper[i + 1]\n        elif s_play == SCCISORS_SIGN:\n            sccisors[i] = sccisors[i + 1]\n        if input_str[i - 1] == ROCK_SIGN:\n            res[i] = rock[i + 1]\n        elif input_str[i - 1] == PAPER_SIGN:\n            res[i] = paper[i + 1]\n        elif input_str[i - 1] == SCCISORS_SIGN:\n            res[i] = sccisors[i + 1]\n    for i in range(1, numberOfPlayers + 1):\n        print(res[i], end='')\n    print()", "ROCK_SIGN = 'R'\nPAPER_SIGN = 'P'\nSCCISORS_SIGN = 'S'\n\ndef make_turn(player1, player2):\n    if player1 == player2:\n        return player1\n    if player1 == ROCK_SIGN and player2 == SCCISORS_SIGN or (player1 == SCCISORS_SIGN and player2 == ROCK_SIGN):\n        return ROCK_SIGN\n    if player1 == ROCK_SIGN and player2 == PAPER_SIGN or (player1 == PAPER_SIGN and player2 == ROCK_SIGN):\n        return PAPER_SIGN\n    if player1 == SCCISORS_SIGN and player2 == PAPER_SIGN or (player1 == PAPER_SIGN and player2 == SCCISORS_SIGN):\n        return SCCISORS_SIGN\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    input_str = input()\n    res = [' '] * (n + 1)\n    rock = [' '] * (n + 1)\n    paper = [' '] * (n + 1)\n    sccisors = [' '] * (n + 1)\n    res[n] = input_str[n - 1]\n    rock[n] = make_turn(ROCK_SIGN, input_str[n - 1])\n    paper[n] = make_turn(PAPER_SIGN, input_str[n - 1])\n    sccisors[n] = make_turn(SCCISORS_SIGN, input_str[n - 1])\n    for i in range(n - 1, 0, -1):\n        r_play = make_turn(ROCK_SIGN, input_str[i - 1])\n        if r_play == ROCK_SIGN:\n            rock[i] = rock[i + 1]\n        elif r_play == PAPER_SIGN:\n            rock[i] = paper[i + 1]\n        elif r_play == SCCISORS_SIGN:\n            rock[i] = sccisors[i + 1]\n        p_play = make_turn(PAPER_SIGN, input_str[i - 1])\n        if p_play == ROCK_SIGN:\n            paper[i] = rock[i + 1]\n        elif p_play == PAPER_SIGN:\n            paper[i] = paper[i + 1]\n        elif p_play == SCCISORS_SIGN:\n            paper[i] = sccisors[i + 1]\n        s_play = make_turn(SCCISORS_SIGN, input_str[i - 1])\n        if s_play == ROCK_SIGN:\n            sccisors[i] = rock[i + 1]\n        elif s_play == PAPER_SIGN:\n            sccisors[i] = paper[i + 1]\n        elif s_play == SCCISORS_SIGN:\n            sccisors[i] = sccisors[i + 1]\n        if input_str[i - 1] == ROCK_SIGN:\n            res[i] = rock[i + 1]\n        elif input_str[i - 1] == PAPER_SIGN:\n            res[i] = paper[i + 1]\n        elif input_str[i - 1] == SCCISORS_SIGN:\n            res[i] = sccisors[i + 1]\n    for i in range(1, n + 1):\n        print(res[i], end='')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    string = input()\n    (P, R, S) = (-1, -1, -1)\n    res_arr = list(string[:])\n    if string[-1] == 'P':\n        P = n - 1\n    elif string[-1] == 'R':\n        R = n - 1\n    else:\n        S = n - 1\n    for i in range(n - 2, -1, -1):\n        if string[i] == 'P':\n            P = i\n            if S != -1:\n                res_arr[i] = res_arr[S]\n            else:\n                res_arr[i] = string[i]\n        elif string[i] == 'S':\n            S = i\n            if R != -1:\n                res_arr[i] = res_arr[R]\n            else:\n                res_arr[i] = string[i]\n        elif string[i] == 'R':\n            R = i\n            if P != -1:\n                res_arr[i] = res_arr[P]\n            else:\n                res_arr[i] = string[i]\n    new_string = ''.join(res_arr)\n    print(new_string)"]