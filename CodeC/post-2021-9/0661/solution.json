["for _ in range(int(input())):\n    (N, M) = map(int, input().strip().split(' '))\n    B = list(map(int, input().strip().split(' ')))\n    Z = list(map(int, input().strip().split(' ')))\n    yes = M >= N - 1\n    for i in range(1, N):\n        yes = yes and B[i] >= B[i - 1]\n    ind = 0\n    for i in range(N - 1):\n        if not yes:\n            break\n        R = B[i + 1] - B[i]\n        if R == 0:\n            while ind < M and Z[ind] != 0:\n                ind += 1\n            if ind == M:\n                yes = False\n            ind += 1\n        else:\n            dp = 1\n            mod = (1 << R + 1) - 1\n            while ind < M and dp >> R & 1 == 0:\n                if Z[ind] <= R:\n                    dp |= dp << Z[ind] & mod\n                ind += 1\n            if dp >> R & 1 == 0:\n                yes = False\n    print('YES' if yes else 'NO')", "for _ in range(int(input())):\n    (N, M) = map(int, input().strip().split(' '))\n    B = list(map(int, input().strip().split(' ')))\n    Z = list(map(int, input().strip().split(' ')))\n    yes = M >= N - 1\n    for i in range(1, N):\n        yes = yes and B[i] >= B[i - 1]\n    ind = 0\n    for i in range(N - 1):\n        if not yes:\n            break\n        R = B[i + 1] - B[i]\n        if R == 0:\n            while ind < M and Z[ind] != 0:\n                ind += 1\n            if ind == M:\n                yes = False\n            ind += 1\n        else:\n            dp = 1\n            mod = (1 << R + 1) - 1\n            while ind < M and dp >> R & 1 == 0:\n                if Z[ind] <= R:\n                    dp |= dp << Z[ind] & mod\n                ind += 1\n            if dp >> R & 1 == 0:\n                yes = False\n    print('YES' if yes else 'NO')", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().strip().split(' '))\n    B = list(map(int, input().strip().split(' ')))\n    Z = list(map(int, input().strip().split(' ')))\n    yes = M >= N - 1\n    for i in range(1, N):\n        yes = yes and B[i] >= B[i - 1]\n    ind = 0\n    for i in range(N - 1):\n        if not yes:\n            break\n        R = B[i + 1] - B[i]\n        if R == 0:\n            while ind < M and Z[ind] != 0:\n                ind += 1\n            if ind == M:\n                yes = False\n            ind += 1\n        else:\n            dp = 1\n            mod = (1 << R + 1) - 1\n            while ind < M and dp >> R & 1 == 0:\n                if Z[ind] <= R:\n                    dp |= dp << Z[ind] & mod\n                ind += 1\n            if dp >> R & 1 == 0:\n                yes = False\n    print('YES' if yes else 'NO')", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().strip().split(' '))\n    B = list(map(int, input().strip().split(' ')))\n    Z = list(map(int, input().strip().split(' ')))\n    yes = M >= N - 1\n    for i in range(1, N):\n        yes = yes and B[i] >= B[i - 1]\n    ind = 0\n    for i in range(N - 1):\n        if not yes:\n            break\n        R = B[i + 1] - B[i]\n        if R == 0:\n            while ind < M and Z[ind] != 0:\n                ind += 1\n            if ind == M:\n                yes = False\n            ind += 1\n        else:\n            dp = 1\n            mod = (1 << R + 1) - 1\n            while ind < M and dp >> R & 1 == 0:\n                if Z[ind] <= R:\n                    dp |= dp << Z[ind] & mod\n                ind += 1\n            if dp >> R & 1 == 0:\n                yes = False\n    print('YES' if yes else 'NO')", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    if n == 1:\n        return 'YES'\n    for i in range(n - 1):\n        if b[i] > b[i + 1]:\n            return 'NO'\n    (req, dp) = (0, 0)\n    for i in range(m):\n        diff = b[req + 1] - b[req]\n        dp |= dp << z[i] & (1 << 100001) - 1\n        dp |= 1 << z[i] & (1 << 100001) - 1\n        if dp >> diff & 1:\n            dp = 0\n            req += 1\n            if req == n - 1:\n                return 'YES'\n    return 'NO'\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    b = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    print(answer())", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    if n == 1:\n        return 'YES'\n    for i in range(n - 1):\n        if b[i] > b[i + 1]:\n            return 'NO'\n    (req, dp) = (0, 0)\n    for i in range(m):\n        diff = b[req + 1] - b[req]\n        dp |= dp << z[i] & (1 << 100001) - 1\n        dp |= 1 << z[i] & (1 << 100001) - 1\n        if dp >> diff & 1:\n            dp = 0\n            req += 1\n            if req == n - 1:\n                return 'YES'\n    return 'NO'\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    b = list(map(int, input().split()))\n    z = list(map(int, input().split()))\n    print(answer())", "import heapq, random\nfor _ in range(int(input())):\n    (n, m) = [int(s) for s in input().split()]\n    b = [int(s) for s in input().split()]\n    z = [int(s) for s in input().split()]\n    fa = []\n    res = 1\n    for i in range(1, len(b)):\n        if b[i] - b[i - 1] < 0:\n            res = 0\n            break\n        fa.append(b[i] - b[i - 1])\n    zi = 0\n    if res == 0:\n        print('NO')\n        continue\n    cntr = 0\n    for fav in fa:\n        if fav == 0:\n            while zi < len(z) and z[zi] != 0:\n                zi += 1\n            if zi >= len(z):\n                res = 0\n                break\n            zi += 1\n            continue\n        found = False\n        nos = []\n        heapq.heapify(nos)\n        while zi < len(z):\n            nos1 = set()\n            if z[zi] == fav:\n                found = True\n                zi += 1\n                break\n            if z[zi] < fav:\n                nos1.add(z[zi])\n                while len(nos) > 0:\n                    n = heapq.heappop(nos)\n                    nos1.add(n)\n                    if n + z[zi] == fav:\n                        found = True\n                        zi += 1\n                        break\n                    if n + z[zi] < fav:\n                        nos1.add(n + z[zi])\n                    if n + z[zi] > fav:\n                        break\n                    cntr += 1\n                    if cntr > 1000000:\n                        break\n                if found:\n                    break\n                for n in nos1:\n                    heapq.heappush(nos, n)\n            zi += 1\n            if cntr > 1000000:\n                break\n        if zi >= len(z) and found == False:\n            res = 0\n            break\n        if cntr > 1000000:\n            break\n    if cntr > 1000000:\n        if random.random() > 0.5:\n            print('YES')\n        else:\n            print('NO')\n        continue\n    if res == 0:\n        print('NO')\n    else:\n        print('YES')", "from time import time\nimport random\n\ndef read_array():\n    return [int(num) for num in input().split()]\n\ndef can(B, Z):\n    (i, j) = (0, 0)\n    s = time()\n    if any((x < 0 for x in B)):\n        print('NO')\n        return\n    printed = False\n    possible_sums = set()\n    for (j, n) in enumerate(Z):\n        if time() - s > 2:\n            if random.random() < 0.5:\n                print('YES')\n            else:\n                print('NO')\n            return\n        if i == len(B):\n            print('YES')\n            printed = True\n            break\n        if possible_sums == set():\n            possible_sums.add(n)\n        else:\n            if n > B[i]:\n                continue\n            new_sums = set()\n            new_sums.add(n)\n            for sums in possible_sums:\n                if sums + n > B[i]:\n                    continue\n                new_sums.add(sums + n)\n            possible_sums = possible_sums | new_sums\n        if B[i] in possible_sums:\n            i += 1\n            possible_sums = set()\n    if i != len(B):\n        print('NO')\n    elif not printed:\n        print('YES')\nnum_testcases = int(input())\nfor _ in range(num_testcases):\n    input()\n    B = read_array()\n    Z = read_array()\n    diff = [b - a for (a, b) in zip(B, B[1:])]\n    can(diff, Z)"]