["t = int(input())\nfor a in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = [0] * n\n    p = [n ** 2 - sum(l)] * n\n    for i in range(n):\n        if l[i] < n:\n            s[l[i]] += 1\n            p[l[i]] -= n - l[i]\n    for i in range(n):\n        max = p[i]\n        min = s[i]\n        if i < n - 1:\n            s[i + 1] += s[i]\n        max += n - min\n        print(n - min, max)", "t = int(input())\nwhile t:\n    k = int(input())\n    j = 0\n    l = list(map(int, input().split()))\n    (m, p, q) = ([0] * (k + 1), [0] * (k + 1), [0] * (k + 1))\n    while j < k:\n        m[0] = m[0] + 1\n        m[l[j]] = m[l[j]] - 1\n        p[0] = p[0] + (k - l[j] + 1)\n        p[l[j]] = p[l[j]] - (k - l[j] + 1)\n        q[k - 1] = q[k - 1] + (k - l[j])\n        q[l[j]] = q[l[j]] - (k - l[j])\n        j += 1\n    s = 1\n    while s < k:\n        (p[s], m[s]) = (p[s] + p[s - 1], m[s] + m[s - 1])\n        s += 1\n    v = k - 1\n    while v >= 0:\n        q[v] = q[v] + q[v + 1]\n        v -= 1\n    a = 0\n    while a < k:\n        print(m[a], p[a] + q[a])\n        a += 1\n    t -= 1", "def update(d, l, r, x):\n    d[l] += x\n    d[r + 1] -= x\nfor i in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    mn = [0 for i in range(n + 1)]\n    mx = [0 for i in range(n + 1)]\n    for i in a:\n        if i != 0:\n            update(mn, 0, i - 1, 1)\n            update(mx, 0, i - 1, n - (i - 1))\n        if i != n:\n            update(mx, i + 1, n - 1, n - i)\n    for i in range(1, n + 1):\n        mx[i] += mx[i - 1]\n        mn[i] += mn[i - 1]\n    for i in range(n):\n        print(mn[i], end=' ')\n        print(mx[i])", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    maxrarr = [0 for i in range(N + 1)]\n    flag = 0\n    call = 1\n    bool = True\n    arr = list(map(int, input().split()))\n    maxlarr = [0 for i in range(N + 1)]\n    minarr = [0 for i in range(N + 1)]\n    for i in range(N):\n        minarr[0] += 1\n        minarr[arr[i]] -= 1\n        call += 2\n        maxlarr[0] += N - arr[i] + 1\n        maxlarr[arr[i]] -= N - arr[i] + 1\n        flag = 2\n        bool = False\n        maxrarr[N - 1] += N - arr[i]\n        maxrarr[arr[i]] -= N - arr[i]\n    for i in range(1, N + 1):\n        minarr[i] += minarr[i - 1]\n        call = 0\n        maxlarr[i] += maxlarr[i - 1]\n    for i in range(N - 1, -1, -1):\n        maxrarr[i] += maxrarr[i + 1]\n    bool = True\n    call = 6\n    flag += 1\n    ans = ''\n    for i in range(N):\n        ans = maxlarr[i] + maxrarr[i]\n        print(str(minarr[i]) + ' ' + str(ans))", "from collections import defaultdict\nfrom bisect import bisect_right\nfor _ in range(int(input())):\n    dct = defaultdict(int)\n    n = int(input())\n    arr = list(map(int, input().split()))\n    miny = [0 for i in range(n)]\n    maxy = [0 for i in range(n)]\n    total = 0\n    tup = sorted(arr)\n    for i in range(n):\n        num = bisect_right(tup, i)\n        if num < n and tup[num] == i:\n            num += 1\n        miny[i] = n - num\n    for j in range(n):\n        total += n - arr[j]\n        dct[arr[j]] += n - arr[j]\n    for i in range(n):\n        maxy[i] = miny[i] + total - dct[i]\n        print(miny[i], maxy[i])", "for i in range(int(input())):\n    n = int(input())\n    A = [int(k) for k in input().split()]\n    a = [0] * (n + 1)\n    b1 = [0] * (n + 1)\n    b2 = [0] * (n + 1)\n    for k in range(n):\n        a[0] += 1\n        a[A[k]] -= 1\n        b1[0] += n - A[k] + 1\n        b1[A[k]] -= n - A[k] + 1\n        b2[n - 1] += n - A[k]\n        b2[A[k]] -= n - A[k]\n    for k in range(1, n + 1):\n        a[k] += a[k - 1]\n        b1[k] += b1[k - 1]\n    for k in range(n - 1, -1, -1):\n        b2[k] += b2[k + 1]\n    for k in range(n):\n        print(a[k], b1[k] + b2[k])", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    mi = [0 for i in range(n + 2)]\n    ma = [0 for i in range(n + 2)]\n    for i in range(n):\n        mi[0] += 1\n        mi[s[i]] -= 1\n        ma[0] += n - s[i] + 1\n        ma[s[i]] -= n - s[i] + 1\n        ma[s[i] + 1] += n - s[i]\n    for i in range(1, n):\n        mi[i] += mi[i - 1]\n        ma[i] += ma[i - 1]\n    for i in range(n):\n        print(*[mi[i], ma[i]])", "from bisect import bisect_right as br\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    mp = {}\n    for v in a:\n        if v in mp:\n            mp[v] += 1\n        else:\n            mp[v] = 1\n    for i in range(n + 1):\n        if i not in mp:\n            mp[i] = 0\n    pref = [0] * (n + 1)\n    pref[0] = n * mp[0]\n    for i in range(1, n):\n        pref[i] = pref[i - 1] + (n - i) * mp[i]\n    suff = [0] * n\n    suff[n - 1] = mp[n]\n    for i in range(n - 2, -1, -1):\n        suff[i] = suff[i + 1] + (n - i) * mp[i + 1]\n    for i in range(n):\n        mini = n - br(a, i)\n        maxi = pref[i - 1] + suff[i]\n        print(mini, maxi)", "for _ in range(int(input())):\n    n = int(input())\n    x = [int(x) for x in input().split()]\n    mn = [0] * (n + 1)\n    mx = [0] * (n + 1)\n    mr = [0] * (n + 1)\n    for i in range(n):\n        mn[0] += 1\n        mn[x[i]] -= 1\n        mx[0] += n - x[i] + 1\n        mx[x[i]] -= n - x[i] + 1\n        mr[n - 1] += n - x[i]\n        mr[x[i]] -= n - x[i]\n    for i in range(n):\n        mn[i + 1] += mn[i]\n        mx[i + 1] += mx[i]\n    for i in range(n - 1, -1, -1):\n        mr[i] += mr[i + 1]\n    for i in range(n):\n        print(mn[i], end=' ')\n        print(mx[i] + mr[i])", "n = int(input())\nfor w in range(n):\n    n = int(input())\n    li = list(map(int, input().split(' ')))\n    minn = [0 for i in range(n + 1)]\n    maxx = [0 for i in range(n + 1)]\n    maxxr = [0 for i in range(n + 1)]\n    for i in range(n):\n        minn[0] += 1\n        minn[li[i]] -= 1\n        maxx[0] += n - li[i] + 1\n        maxx[li[i]] -= n - li[i] + 1\n        maxxr[n - 1] += n - li[i]\n        maxxr[li[i]] -= n - li[i]\n    for i in range(1, n):\n        minn[i] += minn[i - 1]\n        maxx[i] += maxx[i - 1]\n    for i in reversed(range(n)):\n        maxxr[i] += maxxr[i + 1]\n    for i in range(n):\n        xx = maxx[i] + maxxr[i]\n        print(minn[i], xx)", "for t in range(int(input())):\n    n = int(input())\n    minn = [0] * (n + 1)\n    maxl = [0] * (n + 1)\n    maxr = [0] * (n + 1)\n    x1 = map(int, input().split())\n    for x in x1:\n        minn[0] += 1\n        minn[x] -= 1\n        maxl[0] += n - x + 1\n        maxl[x] -= n - x + 1\n        maxr[n - 1] += n - x\n        maxr[x] -= n - x\n    for i in range(1, n + 1):\n        minn[i] += minn[i - 1]\n        maxl[i] += maxl[i - 1]\n    for i in range(n - 1, -1, -1):\n        maxr[i] += maxr[i + 1]\n    for i in range(0, n):\n        temp = maxl[i] + maxr[i]\n        print(minn[i], temp)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    (mini, maxl, maxr) = ([0] * (n + 1), [0] * (n + 1), [0] * (n + 1))\n    for i in range(n):\n        k = arr[i]\n        mini[0] += 1\n        mini[k] -= 1\n        maxl[0] += n - k + 1\n        maxl[k] -= n - k + 1\n        maxr[n - 1] += n - k\n        maxr[k] -= n - k\n    for i in range(1, n + 1):\n        mini[i] += mini[i - 1]\n        maxl[i] += maxl[i - 1]\n    for i in range(n - 1, -1, -1):\n        maxr[i] += maxr[i + 1]\n    for i in range(n):\n        print(mini[i], maxl[i] + maxr[i])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    minn = [0] * (n + 1)\n    maxl = [0] * (n + 1)\n    maxr = [0] * (n + 1)\n    for i in range(n):\n        x = l[i]\n        minn[0] += 1\n        minn[x] -= 1\n        maxl[0] += n - x + 1\n        maxl[x] -= n - x + 1\n        maxr[n - 1] += n - x\n        maxr[x] -= n - x\n    for i in range(1, n + 1):\n        minn[i] += minn[i - 1]\n        maxl[i] += maxl[i - 1]\n    for i in range(n - 1, -1, -1):\n        maxr[i] += maxr[i + 1]\n    for i in range(n):\n        print(minn[i], maxr[i] + maxl[i])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    vals = {}\n    for x in a:\n        if x in vals:\n            vals[x] += 1\n        else:\n            vals[x] = 1\n    tot = sum(a)\n    lessValues = 0\n    for i in range(n):\n        if i not in vals:\n            mini = n - lessValues\n            maxi = n * n - tot + (n - lessValues)\n        else:\n            mini = n - vals[i] - lessValues\n            worktot = tot - i * vals[i]\n            maxi = n * n - worktot - vals[i] * n + (n - lessValues - vals[i])\n            lessValues += vals[i]\n        print(str(mini) + ' ' + str(maxi))", "def update(D, l, r, x):\n    D[l] += x\n    D[r + 1] -= x\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a1 = [0] * (n + 1)\n    a2 = [0] * (n + 1)\n    for r in range(n):\n        if a[r] >= 1 and a[r] < n:\n            update(a1, a[r] + 1, n - 1, n - a[r])\n            update(a1, 0, a[r] - 1, n - a[r] + 1)\n            update(a2, 0, a[r] - 1, 1)\n        elif a[r] == n:\n            update(a2, 0, a[r] - 1, 1)\n            update(a1, 0, n - 1, 1)\n        else:\n            update(a1, a[r] + 1, n - 1, n - a[r])\n    for i in range(1, n):\n        a1[i] += a1[i - 1]\n        a2[i] += a2[i - 1]\n    for j in range(n):\n        print(a2[j], a1[j])", "from collections import defaultdict\nimport bisect\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = defaultdict(int)\n    ans = []\n    l.sort()\n    for i in l:\n        d[i] += 1\n    count = 0\n    for i in range(n):\n        count += n - l[i]\n    for i in range(n):\n        w = n - bisect.bisect(l, i)\n        x = w\n        y = count - (n - i) * d[i] + w\n        ans.append([x, y])\n    for i in ans:\n        print(*i)", "import sys\nimport math\n\ndef printt(ans):\n    for i in range(0, len(ans)):\n        print(ans[i][0], ans[i][1])\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    minn = n\n    res = [0] * (minn + 5)\n    w = 0\n    vec = []\n    ans = []\n    k_v = [0] * (minn + 5)\n    for i in range(0, minn):\n        temp = arr[i]\n        b = minn - temp\n        if res[temp] == None:\n            res[temp] = 1\n            vec.append(res[temp])\n        else:\n            res[temp] = res[temp] + 1\n            if len(vec) != 0:\n                vec.pop(0)\n        if k_v[temp] == None:\n            k_v[temp] = b\n            vec.append(res[temp])\n        else:\n            k_v[temp] = k_v[temp] + b\n        w = w + b\n    fin = res\n    for i in range(minn, -1, -1):\n        c = fin[i + 1]\n        if c:\n            fin[i] = fin[i] + c\n        else:\n            vec.append(1)\n    for i in range(0, minn):\n        c = fin[i + 1]\n        y = w - k_v[i] + c\n        x = c\n        q = []\n        vec.append(c)\n        q.append(x)\n        q.append(y)\n        ans.append(q)\n    printt(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = 0\n    (arr1, arr2) = ([0] * (n + 9), [0] * (n + 9))\n    for i in range(n):\n        temp = n - arr[i]\n        arr1[arr[i]] += 1\n        arr2[arr[i]] += temp\n        res += temp\n    arr3 = arr1.copy()\n    for i in range(n, -1, -1):\n        arr3[i] += arr3[i + 1]\n    for i in range(0, n):\n        ans1 = res - arr2[i] + arr3[i + 1]\n        ans = arr3[i + 1]\n        print(ans, ans1)\n    count = 0\n    for i in range(n):\n        count += 1\n    for i in range(n):\n        count -= 1", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        p = sorted(arr)\n        ans = []\n        blankp = []\n        for i in p:\n            blankp.append(n - i)\n        blank = list(accumulate(blankp))\n        blankp.reverse()\n        blank2 = list(accumulate(blankp))\n        blank2.insert(0, 0)\n        blank.insert(0, 0)\n        for i in range(n):\n            ind = bisect.bisect(p, i)\n            min1 = n - ind\n            ind2 = bisect.bisect_left(p, i)\n            max1 = blank2[min1] + min1 + blank[ind2]\n            ans.append([min1, max1])\n        for i in ans:\n            print(*i)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    sumVal = sum(a)\n    j = 0\n    for i in range(n):\n        while j < n and a[j] < i:\n            j += 1\n        k = j\n        if j < n and i == a[j]:\n            while k < n and a[k] == i:\n                k += 1\n            k -= 1\n        if j < n and i == a[j]:\n            print(n - k - 1, n * (n - (k - j + 1)) - (sumVal - i * (k - j + 1)) + n - k - 1)\n        else:\n            print(n - j, n * n - sumVal + n - j)", "for h in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    sure = [0] * n\n    r = [0] * n\n    l = [0] * n\n    for i in x:\n        if i + 1 < n:\n            r[i + 1] += n - i\n        if i - 1 >= 0:\n            l[i - 1] += n - i\n        if i - 1 >= 0:\n            sure[i - 1] += 1\n    for i in range(len(sure) - 2, -1, -1):\n        sure[i] += sure[i + 1]\n        l[i] += l[i + 1]\n    for i in range(1, len(r)):\n        r[i] += r[i - 1]\n    for i in range(n):\n        print(sure[i], sure[i] + r[i] + l[i], end=' ')\n        print('')", "T = int(input())\nfor tr in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    BCount = [0] * (N + 1)\n    Bmin = [-1] * N\n    Bmax = [-1] * N\n    for i in range(N):\n        BCount[A[i]] += 1\n    Nmin = N\n    Nmax = 0\n    for i in range(N):\n        Nmin -= BCount[i]\n        Nmax += BCount[i] * (N - i)\n        Bmin[i] = Nmin\n    for i in range(N):\n        Bmax[i] = Nmax - BCount[i] * (N - i) + Bmin[i]\n    for i in range(N):\n        print(Bmin[i], Bmax[i])", "from bisect import bisect_left, bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    pre = [0]\n    curr = 0\n    for i in range(n):\n        curr += arr[i]\n        pre.append(curr)\n    for i in range(n):\n        l = bisect_left(arr, i)\n        r = bisect_right(arr, i)\n        a = n - r\n        b = l * n - pre[l] + (n - r) * (n + 1) - (pre[n] - pre[r])\n        print(a, b)", "from sys import stdin, stdout\ninput = stdin.readline\nimport bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = sorted(a)\n    pre = [a[0] for i in range(n)]\n    for i in range(1, n):\n        pre[i] = pre[i - 1] + a[i]\n    ans1 = [0 for i in range(n)]\n    ans2 = [0 for i in range(n)]\n    for i in range(n):\n        ind = bisect.bisect_left(a, i)\n        ind -= 1\n        if ind >= 0:\n            ans2[i] = (ind + 1) * n - pre[ind]\n        ind = bisect.bisect_right(a, i)\n        ans2[i] += (n - ind) * n - (pre[-1] - (pre[ind - 1] if ind else 0)) + (n - ind)\n        ans1[i] = n - ind\n    for i in range(n):\n        print(ans1[i], ans2[i])", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    least = (n + 1) * [0]\n    most = (n + 69) * [0]\n    for x in arr:\n        least[0] += 1\n        most[0] += n - x + 1\n        least[x] -= 1\n        most[x] -= n - x + 1\n        most[x + 1] += n - x\n    for i in range(n):\n        if i:\n            least[i] += least[i - 1]\n            most[i] += most[i - 1]\n        print(least[i], most[i])", "from bisect import bisect_right\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    p = 0\n    arr = list(map(int, input().split()))\n    d = defaultdict(int)\n    for el in arr:\n        d[el] += n - el\n        p += n - el\n    arr.sort()\n    for i in range(0, n):\n        ind = bisect_right(arr, i)\n        le = n - ind\n        me = le + p - d[i]\n        print(le, me)", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = [0] * (n + 1)\n    r = 0\n    w = [0] * (n + 1)\n    for i in range(n):\n        q[a[i]] += 1\n        w[a[i]] += n - a[i]\n    r = sum(w)\n    for i in range(n):\n        q[n - 1 - i] += q[n - i]\n    for i in range(n):\n        print(q[i + 1], q[i + 1] + r - w[i])", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = [0] * (n + 1)\n    r = 0\n    w = [0] * (n + 1)\n    for i in range(n):\n        q[a[i]] += 1\n        w[a[i]] += n - a[i]\n    r = sum(w)\n    for i in range(n):\n        q[n - 1 - i] += q[n - i]\n    for i in range(n):\n        print(q[i + 1], q[i + 1] + r - w[i])", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = [0] * (n + 1)\n    r = 0\n    w = [0] * (n + 1)\n    for i in range(n):\n        q[a[i]] += 1\n        w[a[i]] += n - a[i]\n    r = sum(w)\n    for i in range(n):\n        q[n - 1 - i] += q[n - i]\n    for i in range(n):\n        print(q[i + 1], q[i + 1] + r - w[i])", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = [0] * (n + 1)\n    r = 0\n    w = [0] * (n + 1)\n    for i in range(n):\n        q[a[i]] += 1\n        w[a[i]] += n - a[i]\n    r = sum(w)\n    for i in range(n):\n        q[n - 1 - i] += q[n - i]\n    for i in range(n):\n        print(q[i + 1], q[i + 1] + r - w[i])", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = [0] * (n + 1)\n    r = 0\n    w = [0] * (n + 1)\n    for i in range(n):\n        q[a[i]] += 1\n        w[a[i]] += n - a[i]\n    r = sum(w)\n    for i in range(n):\n        q[n - 1 - i] += q[n - i]\n    for i in range(n):\n        print(q[i + 1], q[i + 1] + r - w[i])", "from collections import defaultdict\nfrom bisect import bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = defaultdict(lambda : 0)\n    d1 = defaultdict(lambda : 0)\n    for i in range(n):\n        d1[i] = n - bisect_right(l, i)\n    s = 0\n    for i in l:\n        d[i] += 1\n        s += max(0, n - i)\n    for i in range(n):\n        print(d1[i], d1[i] + s - d[i] * max(0, n - i))", "from collections import defaultdict\nfrom bisect import bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    d = defaultdict(lambda : 0)\n    d1 = defaultdict(lambda : 0)\n    for i in range(n):\n        d1[i] = n - bisect_right(l, i)\n    s = 0\n    for i in l:\n        d[i] += 1\n        s += max(0, n - i)\n    for i in range(n):\n        print(d1[i], d1[i] + s - d[i] * max(0, n - i))", "for _ in range(int(input())):\n    n = int(input())\n    a = [*map(int, input().split())]\n    q = [0] * (n + 1)\n    r = 0\n    w = [0] * (n + 1)\n    for i in range(n):\n        q[a[i]] += 1\n        w[a[i]] += n - a[i]\n    r = sum(w)\n    for i in range(n):\n        q[n - 1 - i] += q[n - i]\n    for i in range(n):\n        print(q[i + 1], q[i + 1] + r - w[i])", "for i in range(int(input())):\n    n = int(input())\n    A = [int(k) for k in input().split()]\n    a = [0] * (n + 1)\n    b1 = [0] * (n + 1)\n    b2 = [0] * (n + 1)\n    for k in range(n):\n        a[0] += 1\n        a[A[k]] -= 1\n        b1[0] += n - A[k] + 1\n        b1[A[k]] -= n - A[k] + 1\n        b2[n - 1] += n - A[k]\n        b2[A[k]] -= n - A[k]\n    for k in range(1, n + 1):\n        a[k] += a[k - 1]\n        b1[k] += b1[k - 1]\n    for k in range(n - 1, -1, -1):\n        b2[k] += b2[k + 1]\n    for k in range(n):\n        print(a[k], b1[k] + b2[k])", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    arr.sort()\n    freq = [0 for _ in range(n + 1)]\n    extras = 0\n    for i in range(n):\n        freq[arr[i]] += 1\n        extras += n - arr[i]\n    for i in range(n):\n        ans = [0, 0]\n        index = bisect.bisect_right(arr, i)\n        ans[0] = n - index\n        ans[1] = ans[0] + extras - freq[i] * (n - i)\n        print(*ans)", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    arr.sort()\n    freq = [0 for _ in range(n + 1)]\n    extras = 0\n    for i in range(n):\n        freq[arr[i]] += 1\n        extras += n - arr[i]\n    for i in range(n):\n        ans = [0, 0]\n        index = bisect.bisect_right(arr, i)\n        ans[0] = n - index\n        ans[1] = ans[0] + extras - freq[i] * (n - i)\n        print(*ans)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    mex = input().split(' ')\n    for i in range(n):\n        mex[i] = int(mex[i])\n    mex.sort()\n    pref_l = [mex[0]]\n    cur_l = mex[0]\n    pref_r = [mex[len(mex) - 1]] * n\n    cur_r = mex[len(mex) - 1]\n    for i in range(1, len(mex)):\n        cur_l += mex[i]\n        pref_l.append(cur_l)\n    for i in range(len(mex) - 2, -1, -1):\n        cur_r += mex[i]\n        pref_r[i] = cur_r\n    for i in range(n):\n        t = i\n        l = 0\n        r = len(mex) - 1\n        ind = -1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if mex[mid] <= t:\n                l = mid + 1\n            else:\n                ind = mid\n                r = mid - 1\n        l = 0\n        r = len(mex) - 1\n        ind1 = -1\n        while l <= r:\n            mid = l + (r - l) // 2\n            if mex[mid] >= t:\n                r = mid - 1\n            else:\n                ind1 = mid\n                l = mid + 1\n        least = 0\n        most = 0\n        if ind == -1:\n            least = 0\n        else:\n            least += len(mex) - 1 - ind + 1\n        if ind == -1 and ind1 == -1:\n            most = 0\n        elif ind != -1 and ind1 == -1:\n            most += n * (len(mex) - 1 - ind + 1) - pref_r[ind] + (len(mex) - 1 - ind + 1)\n        elif ind == -1 and ind1 != -1:\n            most += n * (ind1 + 1) - pref_l[ind1]\n        else:\n            most += n * (len(mex) - 1 - ind + 1) - pref_r[ind] + (len(mex) - 1 - ind + 1) + (n * (ind1 + 1) - pref_l[ind1])\n        print(str(least) + ' ' + str(most))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    reqd = [0] * (n + 1)\n    bad = [0] * (n + 1)\n    extra = 0\n    for x in a:\n        if x > 0:\n            reqd[x - 1] += 1\n        bad[x] += n - x\n        extra += n - x\n    for i in range(n):\n        reqd[n - i - 1] += reqd[n - i]\n    for i in range(n):\n        print(reqd[i], reqd[i] + extra - bad[i])", "import sys\nfrom os import path\nfrom math import gcd\nfrom bisect import bisect_left, bisect_right\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef countGreater(arr, k):\n    n = len(arr)\n    l = 0\n    r = n - 1\n    ind = 0\n    leftGreater = n\n    while l <= r:\n        m = int(l + (r - l) / 2)\n        if arr[m] > k:\n            leftGreater = m\n            r = m - 1\n        else:\n            l = m + 1\n    return n - leftGreater\n\ndef countLesser(arr, k):\n    n = len(arr)\n    l = 0\n    r = n - 1\n    ans = -1\n    while l <= r:\n        mid = int(l + (r - l) / 2)\n        if arr[mid] >= k:\n            r = mid - 1\n        else:\n            ans = mid\n            l = mid + 1\n    return ans + 1\n\ndef pos(arr, k):\n    a = bisect_right(arr, k)\n    if a == len(arr):\n        if arr[a - 1] == k:\n            return a - 1\n        return -1\n    if arr[a] > k:\n        a -= 1\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sorteda = sorted(a)\n    greater = {}\n    for i in range(n):\n        greater[i] = countGreater(sorteda, i)\n    ans = {}\n    prefix = [0] * n\n    prefix[0] = sorteda[0]\n    for i in range(1, n):\n        prefix[i] += sorteda[i] + prefix[i - 1]\n    for i in range(n):\n        if i == 99:\n            ksdj = 0\n        p = pos(sorteda, i)\n        s = prefix[-1]\n        if p != -1:\n            s -= prefix[p]\n        ans[i] = (0, 0)\n        less = countLesser(sorteda, i)\n        ans[i] = (greater[i], less * n - prefix[less - 1])\n        if ans[i][1] < 0:\n            ans[i] = (0, 0)\n        if greater[i] > 0:\n            ans[i] = (greater[i], ans[i][1] + greater[i] * n - s + greater[i])\n    for i in ans:\n        print(ans[i][0], ans[i][1])", "for _ in range(int(input())):\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    freq = [0 for i in range(n + 1)]\n    atleast = [0 for i in range(n)]\n    extra = sum([n - e for e in arr])\n    for e in arr:\n        freq[e] += 1\n    tmp = 0\n    for i in range(n, 0, -1):\n        tmp += freq[i]\n        atleast[i - 1] = tmp\n    for i in range(n):\n        print(atleast[i], atleast[i] + extra - freq[i] * (n - i))", "for _ in range(int(input())):\n    n = int(input())\n    arr = sorted(list(map(int, input().split())))\n    countI = [0 for i in range(n + 1)]\n    minX = [0 for i in range(n)]\n    maxX = sum([n - e for e in arr])\n    for e in arr:\n        countI[e] += 1\n    tmp = 0\n    for i in range(n, 0, -1):\n        tmp += countI[i]\n        minX[i - 1] = tmp\n    for i in range(n):\n        print(minX[i], '', minX[i] + maxX - (n - i) * countI[i])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    atleast = [0 for i in range(n)]\n    atmost = [0 for i in range(n)]\n    d = {}\n    for ele in arr:\n        d[ele] = d.get(ele, 0) + 1\n    atleast[0] = n - d.get(0, 0)\n    for i in range(1, n):\n        atleast[i] = atleast[i - 1] - d.get(i, 0)\n        atleast[i] = max(0, atleast[i])\n    tm = n * n - sum(arr)\n    for i in range(n):\n        atmost[i] = tm + atleast[i] - d.get(i, 0) * (n - i)\n    for i in range(n):\n        (a, b) = (atleast[i], atmost[i])\n        print(a, b)", "import bisect\ntest = int(input())\nwhile test:\n    n = int(input())\n    frequency = dict()\n    a = [int(x) for x in input().split()]\n    extra = 0\n    for i in a:\n        extra += n - i\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    a.sort()\n    for i in range(n):\n        k = bisect.bisect_right(a, i)\n        try:\n            print(n - k, n - k + extra - frequency[i] * (n - i))\n        except KeyError:\n            print(n - k, n - k + extra)\n    test -= 1", "import bisect\ntest = int(input())\nwhile test:\n    n = int(input())\n    frequency = [0] * (n + 1)\n    extra = 0\n    a = [int(x) for x in input().split()]\n    for i in a:\n        extra += n - i\n        frequency[i] += 1\n    a.sort()\n    for i in range(n):\n        k = bisect.bisect_right(a, i)\n        print(n - k, n - k + extra - frequency[i] * (n - i))\n    test -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    blanks = sum([n - i for i in a])\n    countI = [0 for i in range(n + 1)]\n    minR = [0 for i in range(n)]\n    for i in range(n):\n        countI[a[i]] += 1\n    r = 0\n    for i in range(n, 0, -1):\n        r += countI[i]\n        minR[i - 1] = r\n    for i in range(n):\n        print(minR[i], ' ', minR[i] + blanks - countI[i] * (n - i))\n    t -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    blanks = sum([n - i for i in a])\n    countI = [0 for i in range(n + 1)]\n    minR = [0 for i in range(n)]\n    for i in range(n):\n        countI[a[i]] += 1\n    r = 0\n    for i in range(n, 0, -1):\n        r += countI[i]\n        minR[i - 1] = r\n    for i in range(n):\n        print(minR[i], ' ', minR[i] + blanks - countI[i] * (n - i))\n    t -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    blanks = sum([n - i for i in a])\n    countI = [0 for i in range(n + 1)]\n    minR = [0 for i in range(n)]\n    maxR = [0 for i in range(n)]\n    for i in range(n):\n        countI[a[i]] += 1\n    r = 0\n    for i in range(n, 0, -1):\n        r += countI[i]\n        minR[i - 1] = r\n    for i in range(n):\n        print(minR[i], ' ', minR[i] + blanks - countI[i] * (n - i))\n    t -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    blanks = sum([n - i for i in a])\n    countI = [0 for i in range(n + 1)]\n    minR = [0 for i in range(n)]\n    maxR = [0 for i in range(n)]\n    for i in range(n):\n        countI[a[i]] += 1\n    r = 0\n    for i in range(n, 0, -1):\n        r += countI[i]\n        minR[i - 1] = r\n    for i in range(n):\n        maxR[i] = minR[i] + blanks - countI[i] * (n - i)\n    for i in range(n):\n        print(minR[i], ' ', maxR[i])\n    t -= 1", "for t in range(int(input())):\n    n = int(input())\n    mex = list(map(int, input().strip().split()))\n    mex.sort()\n    freq = [0 for i in range(n + 1)]\n    atl = []\n    atm = []\n    extra = 0\n    for m in mex:\n        freq[m] += 1\n        extra += n - m\n    j = 0\n    for i in range(n):\n        j += freq[i]\n        atl.append(n - j)\n        atm.append(extra + atl[i] - freq[i] * (n - i))\n    print('\\n'.join(map(lambda x, y: f'{x} {y}', atl, atm)))", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    (B, C) = ([0] * (N + 1), [0] * (N + 1))\n    for i in range(N):\n        if A[i] != 0:\n            B[A[i] - 1] += 1\n    for i in range(N - 1, -1, -1):\n        B[i] = B[i] + B[i + 1]\n    ans = 0\n    for i in range(N):\n        ans += N - A[i]\n        C[A[i]] += N - A[i]\n    for i in range(N):\n        print(B[i], ans - C[i] + B[i])", "for _ in range(int(input())):\n    n = int(input())\n    min1 = [0] * (n + 1)\n    max1 = [0] * (n + 1)\n    l = list(map(int, input().split()))\n    for i in l:\n        if i > 0:\n            min1[i - 1] += 1\n        if i != 0:\n            max1[0] += n - i + 1\n            max1[i] -= n - i + 1\n            if i < n:\n                max1[i + 1] += n - i\n        else:\n            max1[1] += n - i\n    for i in range(n - 1, -1, -1):\n        min1[i] += min1[i + 1]\n    for i in range(1, n):\n        max1[i] += max1[i - 1]\n    for i in range(n):\n        print(min1[i], max1[i])", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = [0 for i in range(n + 1)]\n    l2 = [0 for i in range(n + 1)]\n    _sum = 0\n    for i in range(n):\n        l1[l[i]] += 1\n        _sum += l[i]\n    left_out = n * n - _sum\n    for i in range(n - 1, -1, -1):\n        l2[i] += l2[i + 1] + l1[i + 1]\n    l3 = [0 for i in range(n + 1)]\n    for i in range(n + 1):\n        l3[i] = l2[i] + left_out - l1[i] * (n - i)\n    for i in range(n):\n        print(l2[i], l3[i])", "t = int(input())\nfor i in range(t):\n    N = int(input())\n    k1 = list(map(int, input().split()))\n    LPB = [0] * (N + 5)\n    UPB = [0] * (N + 5)\n    value = 0\n    for i in range(N):\n        b = N - k1[i]\n        LPB[k1[i]] += 1\n        UPB[k1[i]] += b\n        value += b\n    short = LPB\n    for i in range(N, -1, -1):\n        short[i] += short[i + 1]\n    for i in range(N):\n        y = value - UPB[i] + short[i + 1]\n        x = short[i + 1]\n        print(x, y)", "import math\nfrom bisect import bisect, bisect_left, bisect_right\nimport heapq\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef LIS(arr, n):\n    dp = [10 ** 9] * (n + 1)\n    for ele in arr:\n        dp[bisect_left(dp, ele)] = ele\n    return bisect_left(dp, 10 ** 9)\n\ndef exponentiation(bas, exp, mod=1000000007):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nyes = 'YES'\nno = 'NO'\neven = 'EVEN'\nodd = 'ODD'\n\ndef process(arr, n):\n    C = Counter(arr)\n    A = len(arr)\n    MIN = [0] * n\n    for i in range(n):\n        A -= C[i]\n        MIN[i] = A\n    MAX = [0] * n\n    available = 0\n    this = 0\n    for ele in arr:\n        if ele == 0:\n            this += n\n        else:\n            available += n - (ele - 1)\n    MAX[0] = available\n    for i in range(1, n):\n        temp = (n - i) * C[i]\n        available = available - (n - i + 1) * C[i]\n        available += this\n        MAX[i] = available\n        this = temp\n    for i in range(n):\n        print(MIN[i], MAX[i])\n\ndef main():\n    for _ in range(int(input())):\n        n = intin()\n        arr = list(mapin())\n        process(arr, n)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    minn = [0] * (n + 1)\n    maxl = [0] * (n + 1)\n    maxr = [0] * (n + 1)\n    for each in arr:\n        minn[0] += 1\n        minn[each] -= 1\n        maxl[0] += n - each + 1\n        maxl[each] -= n - each + 1\n        maxr[n - 1] += n - each\n        maxr[each] -= n - each\n    for i in range(1, n + 1):\n        minn[i] += minn[i - 1]\n        maxl[i] += maxl[i - 1]\n    for i in range(n - 1, -1, -1):\n        maxr[i] += maxr[i + 1]\n    for i in range(n):\n        print(minn[i], maxl[i] + maxr[i])", "t = int(input())\nfor ti in range(t):\n    n = int(input())\n    mex = list(map(int, input().split()))\n    mexcount = [0] * (n + 1)\n    for m in mex:\n        mexcount[m] = mexcount[m] + 1\n    mexsum = [0] * (n + 1)\n    mexcountsum = [0] * (n + 1)\n    mexsum[0] = 0\n    mexcountsum[0] = mexcount[0]\n    for i in range(1, n + 1):\n        mexsum[i] = mexsum[i - 1] + mexcount[i] * i\n        mexcountsum[i] = mexcountsum[i - 1] + mexcount[i]\n    for i in range(n):\n        min_ = mexcountsum[n] - mexcountsum[i]\n        max_ = (1 + n) * min_ - mexsum[n] + mexsum[i]\n        if i != 0:\n            max_ = max_ + n * mexcountsum[i - 1] - mexsum[i - 1]\n        print(min_, max_)", "from operator import itemgetter\nfrom sys import maxsize, stdin\nfrom collections import Counter, defaultdict\nfrom math import log\nimport ctypes\nimport itertools\nt = int(stdin.readline().strip())\nwhile t > 0:\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().strip().split(' ')))\n    temp1 = [0] * (n + 1)\n    temp2 = [0] * (n + 1)\n    temp3 = [0] * (n + 1)\n    temp1[:] = itertools.repeat(0, len(temp1))\n    temp2[:] = itertools.repeat(0, len(temp2))\n    temp3[:] = itertools.repeat(0, len(temp3))\n    for i in range(n):\n        temp1[0] += 1\n        temp1[arr[i]] -= 1\n        temp2[0] += n - arr[i] + 1\n        temp2[arr[i]] -= n - arr[i] + 1\n        temp3[n - 1] += n - arr[i]\n        temp3[arr[i]] -= n - arr[i]\n    for i in range(1, n + 1):\n        temp1[i] += temp1[i - 1]\n        temp2[i] += temp2[i - 1]\n    for i in range(n - 2, -1, -1):\n        temp3[i] += temp3[i + 1]\n    for i in range(n):\n        print(temp1[i], temp2[i] + temp3[i])\n    t -= 1", "case = int(input())\nfor i in range(case):\n    n = 0\n    x = 0\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    lst8 = [0] * (n + 1)\n    lst4 = [0] * (n + 1)\n    arr = [0] * (n + 1)\n    for i in range(n):\n        x = lst[i]\n        lst8[0] += 1\n        lst8[x] -= 1\n        lst4[0] += n - x + 1\n        lst4[x] -= n - x + 1\n        arr[n - 1] += n - x\n        arr[x] -= n - x\n    for i in range(1, n + 1):\n        lst8[i] += lst8[i - 1]\n        lst4[i] += lst4[i - 1]\n    for i in range(n - 1, -1, -1):\n        arr[i] += arr[i + 1]\n    for i in range(n):\n        x = lst4[i] + arr[i]\n        print(lst8[i], end=' ')\n        print(x)", "import sys\nimport math\nfrom itertools import *\nfrom queue import LifoQueue\nfrom bisect import bisect\nfrom collections import deque, Counter, defaultdict\nmod = 10 ** 9 + 7\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rls():\n    return list(map(str, input().split()))\n\ndef rm():\n    return map(int, input().split())\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef freq(a):\n    return Counter(a)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef d2b(n):\n    s = bin(n).replace('0b', '')\n    return (34 - len(s)) * '0' + s\n\ndef BS(a, x):\n    i = bisect.bisect_left(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(ri()):\n    n = ri()\n    a = rl()\n    l = [0] * (n + 1)\n    for i in a:\n        l[i] += 1\n    min_l = l.copy()\n    for i in range(n - 1, -1, -1):\n        min_l[i] += min_l[i + 1]\n    max1 = l.copy()\n    max1[-1] = max1[-1]\n    for i in range(n - 1, -1, -1):\n        max1[i] = l[i] * (n - i + 1) + max1[i + 1]\n    max2 = l.copy()\n    max2[0] = max2[0] * n\n    for i in range(1, n + 1):\n        max2[i] = l[i] * (n - i) + max2[i - 1]\n    print(min_l[1], max1[1])\n    for i in range(2, n + 1):\n        print(min_l[i], max1[i] + max2[i - 2])", "case = int(input())\nfor i in range(case):\n    n = 0\n    x = 0\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    minn = [0] * (n + 1)\n    maxxl = [0] * (n + 1)\n    maxxr = [0] * (n + 1)\n    for i in range(n):\n        x = lst[i]\n        minn[0] += 1\n        minn[x] -= 1\n        maxxl[0] += n - x + 1\n        maxxl[x] -= n - x + 1\n        maxxr[n - 1] += n - x\n        maxxr[x] -= n - x\n    for i in range(1, n + 1):\n        minn[i] += minn[i - 1]\n        maxxl[i] += maxxl[i - 1]\n    for i in range(n - 1, -1, -1):\n        maxxr[i] += maxxr[i + 1]\n    for i in range(n):\n        x = maxxl[i] + maxxr[i]\n        print(minn[i], end=' ')\n        print(x)", "for _ in range(int(input())):\n    N = int(input())\n    mex = list(map(int, input().split()))\n    lower_bound = [0] * (N + 5)\n    upper_bound = [0] * (N + 5)\n    value = 0\n    for i in range(N):\n        b = N - mex[i]\n        lower_bound[mex[i]] += 1\n        upper_bound[mex[i]] += b\n        value += b\n    short = lower_bound\n    for i in range(N, -1, -1):\n        short[i] += short[i + 1]\n    for i in range(N):\n        y = value - upper_bound[i] + short[i + 1]\n        x = short[i + 1]\n        print(x, y)", "for _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    presum = [0] * n\n    maxl = [0] * n\n    maxr = [0] * n\n    for i in range(n):\n        maxl[0] += n - li[i] + 1\n        maxr[-1] += n - li[i]\n        if li[i] < n:\n            presum[li[i]] -= 1\n            maxl[li[i]] -= n - li[i] + 1\n            maxr[li[i]] -= n - li[i]\n    presum[0] += n\n    for i in range(1, n):\n        presum[i] += presum[i - 1]\n        maxl[i] += maxl[i - 1]\n    for i in range(n - 2, -1, -1):\n        maxr[i] += maxr[i + 1]\n    for i in range(n):\n        x = maxl[i] + maxr[i]\n        print(presum[i], x)", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mn = [0] * (n + 1)\n    mx = [0] * (n + 1)\n    mxr = [0] * (n + 1)\n    for i in range(n):\n        a = arr[i]\n        mn[0] += 1\n        mn[a] -= 1\n        mx[0] += n - a + 1\n        mx[a] -= n - a + 1\n        mxr[n - 1] += n - a\n        mxr[a] -= n - a\n    for i in range(1, n + 1):\n        mn[i] += mn[i - 1]\n        mx[i] += mx[i - 1]\n    i = n - 1\n    while i >= 0:\n        mxr[i] += mxr[i + 1]\n        i -= 1\n    for i in range(n):\n        print(mn[i], mx[i] + mxr[i])\n    return\nfor _ in range(int(input())):\n    main()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    c = [0] * (n + 1)\n    for i in arr:\n        a[0] += 1\n        a[i] -= 1\n        b[0] += n - i + 1\n        b[i] -= n - i + 1\n        c[n - 1] += n - i\n        c[i] -= n - i\n    for i in range(1, n + 1, 1):\n        a[i] += a[i - 1]\n        b[i] += b[i - 1]\n    for i in range(n - 1, -1, -1):\n        c[i] += c[i + 1]\n    for i in range(n):\n        print(a[i], b[i] + c[i], sep=' ', end='\\n')", "def func():\n    inp1 = int(input())\n    let_dp = [0] * (inp1 + 5)\n    let_dp1 = [0] * (inp1 + 5)\n    count = 0\n    list_ = list(map(int, input().split()))\n    for i in list_:\n        var_b = inp1 - i\n        let_dp[i] += 1\n        let_dp1[i] += var_b\n        count += var_b\n    var_c = let_dp\n    for i in reversed(range(inp1)):\n        var_c[i] += var_c[i + 1]\n    for i in range(inp1):\n        var_y = count - let_dp1[i] + var_c[i + 1]\n        var_x = var_c[i + 1]\n        print(var_x, var_y)\nfor i in range(int(input())):\n    func()", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    maxans1 = [0] * (n + 1)\n    maxans2 = [0] * (n + 1)\n    minans = [0] * (n + 1)\n    for j in range(0, len(a)):\n        if a[j] not in d.keys():\n            d[a[j]] = 1\n        else:\n            d[a[j]] = d[a[j]] + 1\n        if a[j] != 0:\n            maxans1[0] = maxans1[0] + (n - (a[j] - 1))\n            minans[0] = minans[0] + 1\n        maxans2[n] = maxans2[n] + (n - a[j])\n    for j in range(1, n):\n        if j in d.keys():\n            maxans1[j] = maxans1[j - 1] - d[j] * (n - (j - 1))\n            minans[j] = minans[j - 1] - d[j]\n        else:\n            maxans1[j] = maxans1[j - 1]\n            minans[j] = minans[j - 1]\n    for j in range(n - 1, -1, -1):\n        if j in d.keys():\n            maxans2[j] = maxans2[j + 1] - d[j] * (n - j)\n        else:\n            maxans2[j] = maxans2[j + 1]\n    for j in range(0, n):\n        print(minans[j], end=' ')\n        print(maxans1[j] + maxans2[j])", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    h = [0 for x in range(n + 1)]\n    d = [0 for x in range(n + 1)]\n    post = [0 for x in range(n + 1)]\n    h[0] = n\n    for i in range(n):\n        x = a[i]\n        h[x] -= 1\n        d[x] = d[x] - n + x - 1\n        post[x] = post[x] - n + x\n        d[0] += n - x + 1\n        post[n - 1] += n - x\n    for i in range(1, n + 1):\n        d[i] += d[i - 1]\n    for i in range(1, 1 + n):\n        h[i] += h[i - 1]\n    for i in range(n - 1, -1, -1):\n        post[i] += post[i + 1]\n    for i in range(n):\n        x = h[i]\n        (m1, m2) = (0, 0)\n        print(h[i], d[i] + post[i])", "for _ in range(int(input())):\n    n = int(input())\n    temp1 = [0] * (n + 5)\n    temp2 = [0] * (n + 5)\n    l = list(map(int, input().split()))\n    for i in range(n):\n        temp1[l[i]] += 1\n        temp2[l[i]] += n - l[i]\n    for i in range(n, -1, -1):\n        temp1[i] += temp1[i + 1]\n    ans = n * n - sum(l)\n    for i in range(n):\n        print(temp1[i + 1], ans + temp1[i + 1] - temp2[i])", "import sys\ninput = lambda : sys.stdin.readline()\nT = int(input())\nfor _ in range(T):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    a.sort()\n    a2 = []\n    dic = {}\n    for i in a:\n        if i not in dic.keys():\n            dic[i] = 1\n            if a2 != n:\n                a2.append(i)\n        else:\n            dic[i] += 1\n    L = [n for i in range(n)]\n    j = 0\n    if a[j] == 0:\n        L[0] -= dic[0]\n        j += 1\n    for i in range(1, n):\n        if j == len(a2):\n            L[i] = L[i - 1]\n            continue\n        if i != a2[j]:\n            L[i] = L[i - 1]\n        else:\n            L[i] = L[i - 1] - dic[a2[j]]\n            j += 1\n    y = n * n - sum(a)\n    M = [y for i in range(n)]\n    for i in range(n):\n        if a[i] != n:\n            M[a[i]] -= n - a[i]\n    for i in range(n):\n        x = L[i]\n        y = M[i] + x\n        print(x, y)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    minn = [0] * (n + 1)\n    maxxl = [0] * (n + 1)\n    maxxr = [0] * (n + 1)\n    for i in range(n):\n        x = l[i]\n        minn[0] += 1\n        minn[x] -= 1\n        maxxl[0] += n - x + 1\n        maxxl[x] -= n - x + 1\n        maxxr[n - 1] += n - x\n        maxxr[x] -= n - x\n    for i in range(1, n + 1):\n        minn[i] += minn[i - 1]\n        maxxl[i] += maxxl[i - 1]\n    for i in range(n - 1, -1, -1):\n        maxxr[i] += maxxr[i + 1]\n    for i in range(0, n):\n        xx = maxxl[i] + maxxr[i]\n        print(str(minn[i]) + ' ' + str(xx))"]