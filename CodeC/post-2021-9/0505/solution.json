["import numpy as np\n\ndef xor(a):\n    ans = 0\n    for i in a:\n        ans = ans ^ i\n    return ans\n\ndef p2(n):\n    ans = 0\n    while n % 2 == 0:\n        n = n // 2\n        ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = np.array(a)\n    m = max(a)\n    x = 0\n    tmp = xor(a)\n    while tmp != 0:\n        tmp2 = int(2 ** p2(tmp))\n        a = a + tmp2\n        x = x + tmp2\n        if x > m:\n            x = -1\n            break\n        tmp = xor(a)\n    print(x)", "import numpy as np\n\ndef xor(a):\n    ans = 0\n    for i in a:\n        ans = ans ^ i\n    return ans\n\ndef p2(n):\n    ans = 0\n    while n % 2 == 0:\n        n = n // 2\n        ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a = np.array(a)\n    m = max(a)\n    x = 0\n    tmp = xor(a)\n    while tmp != 0:\n        tmp2 = int(2 ** p2(tmp))\n        a = a + tmp2\n        x = x + tmp2\n        if x > m:\n            x = -1\n            break\n        tmp = xor(a)\n    print(x)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nn = max(a)\n    if n <= 1000 and nn <= 1000:\n        f = 1\n        for i in range(n):\n            ans = i + a[0]\n            for j in range(1, n):\n                ans = ans ^ i + a[j]\n            if ans == 0:\n                print(i)\n                f = 0\n                break\n        if f:\n            print(-1)\n    else:\n        z = 0\n        u = a[0]\n        c = 0\n        for i in range(n):\n            if i == 0:\n                z += 1\n            if i == u:\n                c += 1\n        if z == n:\n            print(0)\n        elif c == n:\n            print(-1)\n        else:\n            tmp = a[0]\n            for ii in range(1, n):\n                tmp = tmp ^ a[ii]\n            if tmp == 0:\n                print(0)\n            else:\n                t = bin(tmp)\n                t = t[2:]\n                t = t[::-1]\n                tn = len(t)\n                m = max(a)\n                b = bin(m)\n                b = b[2:]\n                m = len(b)\n                mm = m\n\n                def xor(aa, x):\n                    ans = aa[0] + x\n                    aa[0] = aa[0] + x\n                    for i in range(1, n):\n                        ans = ans ^ aa[i] + x\n                        aa[i] = aa[i] + x\n                    return (ans, aa)\n                i = 0\n                ans = 0\n                f = 1\n                while i <= mm and m <= mm:\n                    if t[i] == '1':\n                        (xx, a) = xor(a, 1 << i)\n                        ans += 1 << i\n                        i += 1\n                        if xx == 0:\n                            print(ans)\n                            f = 0\n                            break\n                        else:\n                            t = bin(xx)\n                            t = t[2:]\n                            t = t[::-1]\n                            m = len(t)\n                    else:\n                        i += 1\n                if f:\n                    print(-1)", "T = int(input())\nimport numpy as np\nfor _ in range(T):\n    N = int(input())\n    A = np.array(list(map(int, input().split())))\n    j = 0\n    mans = []\n    old_sam = 0\n    for j in range(61):\n        oddsum = 0\n        jor = np.sum(A) % 2\n        mans.append(jor)\n        A = A + jor >> 1\n        if not any(A) > 0:\n            break\n    if any(A) > 0:\n        print(-1)\n    else:\n        ans = 0\n        mans.reverse()\n        for man in mans:\n            ans = ans * 2 + man\n        print(ans)", "T = int(input())\nimport numpy as np\nfor _ in range(T):\n    N = int(input())\n    A = np.array(list(map(int, input().split())))\n    j = 0\n    mans = []\n    old_sam = 0\n    for j in range(61):\n        oddsum = 0\n        jor = sum(A) % 2\n        mans.append(jor)\n        A = A + jor >> 1\n        if not any(A) > 0:\n            break\n    if any(A) > 0:\n        print(-1)\n    else:\n        ans = 0\n        mans.reverse()\n        for man in mans:\n            ans = ans * 2 + man\n        print(ans)", "T = int(input())\nimport numpy as np\nfor _ in range(T):\n    N = int(input())\n    A = np.array(list(map(int, input().split())))\n    j = 0\n    mans = []\n    old_sam = 0\n    for j in range(61):\n        oddsum = 0\n        jor = np.sum(A & 1) % 2\n        mans.append(jor)\n        A = A + jor >> 1\n        if not any(A) > 0:\n            break\n    if any(A) > 0:\n        print(-1)\n    else:\n        ans = 0\n        mans.reverse()\n        for man in mans:\n            ans = ans * 2 + man\n        print(ans)", "T = int(input())\nimport numpy as np\nfor _ in range(T):\n    N = int(input())\n    A = np.array(list(map(int, input().split())))\n    j = 0\n    mans = []\n    old_sam = 0\n    for j in range(61):\n        jor = np.sum(A) % 2\n        mans.append(jor)\n        A = A + jor >> 1\n        if not any(A) > 0:\n            break\n    if any(A) > 0:\n        print(-1)\n    else:\n        ans = 0\n        mans.reverse()\n        for man in mans:\n            ans = ans * 2 + man\n        print(ans)", "T = int(input())\nimport numpy as np\nfor _ in range(T):\n    N = int(input())\n    A = np.array(list(map(int, input().split())))\n    j = 0\n    mans = []\n    old_sam = 0\n    for j in range(61):\n        jor = sum(A) % 2\n        mans.append(jor)\n        A = A + jor >> 1\n        if not any(A) > 0:\n            break\n    if any(A) > 0:\n        print(-1)\n    else:\n        ans = 0\n        mans.reverse()\n        for man in mans:\n            ans = ans * 2 + man\n        print(ans)", "from math import log\n\ndef SolveE():\n    (x, mx) = ('', len(bin(max(A))[1:]))\n    for pos in range(mx + 1):\n        (xi, res) = (int(x, 2) if len(x) else 0, 0)\n        for a in A:\n            res ^= a + xi\n        x = '1' + x if res % 2 ** (pos + 1) else '0' + x\n    return -1 if x[0] == '1' else int(x, 2)\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    print(SolveE())", "from math import log\n\ndef SolveE():\n    (x, mx) = ('', len(bin(max(A))[1:]))\n    for pos in range(mx + 1):\n        (xi, res) = (int(x, 2) if len(x) else 0, 0)\n        for a in A:\n            res ^= a + xi\n        x = '1' + x if res % 2 ** (pos + 1) else '0' + x\n    return -1 if x[0] == '1' else int(x, 2)\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    print(SolveE())", "def SolveE():\n    (x, mx) = ('', len(bin(max(A))[1:]))\n    for pos in range(mx + 1):\n        (xi, res) = (int(x, 2) if len(x) else 0, 0)\n        for a in A:\n            res ^= a + xi\n        x = '1' + x if res % 2 ** (pos + 1) else '0' + x\n    return -1 if x[0] == '1' else int(x, 2)\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    print(SolveE())", "def solve(A):\n    (x, mx) = ('', len(bin(max(A))[1:]))\n    for pos in range(mx + 1):\n        (xi, res) = (int(x, 2) if len(x) else 0, 0)\n        for a in A:\n            res ^= a + xi\n        x = '1' + x if res % 2 ** (pos + 1) else '0' + x\n    return -1 if x[0] == '1' else int(x, 2)\nAs = []\nfor _ in range(int(input())):\n    N = int(input())\n    As.append([int(x) for x in input().split()])\nfor A in As:\n    print(solve(A))", "def solve(A):\n    (x, mx) = ('', len(bin(max(A))[1:]))\n    for pos in range(mx + 1):\n        (xi, res) = (int(x, 2) if len(x) else 0, 0)\n        for a in A:\n            res ^= a + xi\n        x = '1' + x if res % 2 ** (pos + 1) else '0' + x\n    return -1 if x[0] == '1' else int(x, 2)\nfor _ in range(int(input())):\n    N = int(input())\n    As = []\n    As.append([int(x) for x in input().split()])\n    for A in As:\n        print(solve(A))", "def SolveE():\n    (x, mx) = ('', len(bin(max(A))[1:]))\n    for pos in range(mx + 1):\n        (xi, res) = (int(x, 2) if len(x) else 0, 0)\n        for a in A:\n            res ^= a + xi\n        x = '1' + x if res % 2 ** (pos + 1) else '0' + x\n    return -1 if x[0] == '1' else int(x, 2)\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    print(SolveE())", "t = int(input())\n\ndef isbit(n, i):\n    b = bin(n)[2:]\n    if len(b) < i:\n        return False\n    if int(b[-i]):\n        return True\n    else:\n        return False\n\ndef xorsum(l, x):\n    xum = 0\n    for i in l:\n        xum ^= i + x\n    return xum\n\ndef do(l):\n    x = 0\n    c = xorsum(l, 0)\n    cb = bin(c)[2:]\n    k = bin(max(l))[2:]\n    for i in range(1, max(len(k) + 1, len(cb) + 2)):\n        if isbit(xorsum(l, x), i):\n            x += 2 ** (i - 1)\n    if xorsum(l, x) != 0:\n        print(-1)\n        return\n    print(x)\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    do(l)", "def solve():\n\n    def nextX(pos, x):\n        (xi, res) = (int(x, 2) if len(x) else 0, 0)\n        for a in A:\n            res ^= a + xi\n        return '1' + x if res % 2 ** (pos + 1) else '0' + x\n    (x, mx) = ('', len(bin(max(A))[1:]))\n    for pos in range(mx + 1):\n        x = nextX(pos, x)\n    return -1 if x[0] == '1' else int(x, 2)\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nn = max(a)\n    if n <= 1000 and nn <= 1000:\n        f = 1\n        for i in range(n):\n            ans = i + a[0]\n            for j in range(1, n):\n                ans = ans ^ i + a[j]\n            if ans == 0:\n                print(i)\n                f = 0\n                break\n        if f:\n            print(-1)\n    else:\n        z = 0\n        u = a[0]\n        c = 0\n        for i in range(n):\n            if i == 0:\n                z += 1\n            if i == u:\n                c += 1\n        if z == n:\n            print(0)\n        elif c == n:\n            print(-1)\n        else:\n            tmp = a[0]\n            for ii in range(1, n):\n                tmp = tmp ^ a[ii]\n            if tmp == 0:\n                print(0)\n            else:\n                t = bin(tmp)\n                t = t[2:]\n                t = t[::-1]\n                tn = len(t)\n                m = max(a)\n                b = bin(m)\n                b = b[2:]\n                m = len(b)\n                mm = m\n\n                def xor(aa, x):\n                    ans = aa[0] + x\n                    aa[0] = aa[0] + x\n                    for i in range(1, n):\n                        ans = ans ^ aa[i] + x\n                        aa[i] = aa[i] + x\n                    return (ans, aa)\n                i = 0\n                ans = 0\n                f = 1\n                while i <= mm and m <= mm:\n                    if t[i] == '1':\n                        (xx, a) = xor(a, 1 << i)\n                        ans += 1 << i\n                        i += 1\n                        if xx == 0:\n                            print(ans)\n                            f = 0\n                            break\n                        else:\n                            t = bin(xx)\n                            t = t[2:]\n                            t = t[::-1]\n                            m = len(t)\n                    else:\n                        i += 1\n                if f:\n                    print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nn = max(a)\n    if n <= 1000 and nn <= 1000:\n        f = 1\n        for i in range(n):\n            ans = i + a[0]\n            for j in range(1, n):\n                ans = ans ^ i + a[j]\n            if ans == 0:\n                print(i)\n                f = 0\n                break\n        if f:\n            print(-1)\n    else:\n        z = 0\n        u = a[0]\n        c = 0\n        for i in range(n):\n            if i == 0:\n                z += 1\n            if i == u:\n                c += 1\n        if z == n:\n            print(0)\n        elif c == n:\n            print(-1)\n        else:\n            tmp = a[0]\n            for ii in range(1, n):\n                tmp = tmp ^ a[ii]\n            if tmp == 0:\n                print(0)\n            else:\n                t = bin(tmp)\n                t = t[2:]\n                t = t[::-1]\n                tn = len(t)\n                m = max(a)\n                b = bin(m)\n                b = b[2:]\n                m = len(b)\n                mm = m\n\n                def xor(aa, x):\n                    ans = aa[0] + x\n                    aa[0] = aa[0] + x\n                    for i in range(1, n):\n                        ans = ans ^ aa[i] + x\n                        aa[i] = aa[i] + x\n                    return (ans, aa)\n                i = 0\n                ans = 0\n                f = 1\n                while i <= mm and m <= mm:\n                    if t[i] == '1':\n                        (xx, a) = xor(a, 1 << i)\n                        ans += 1 << i\n                        i += 1\n                        if xx == 0:\n                            print(ans)\n                            f = 0\n                            break\n                        else:\n                            t = bin(xx)\n                            t = t[2:]\n                            t = t[::-1]\n                            m = len(t)\n                    else:\n                        i += 1\n                if f:\n                    print(-1)", "def Solve():\n\n    def calc(pos, ans):\n        (tmp, x) = (0, int('1' + ans, 2))\n        for a in A:\n            tmp ^= a + x\n        return '1' + ans if bin(tmp)[2:][::-1].ljust(mx, '0')[pos] == '0' else '0' + ans\n    mx = len(bin(max(A))[2:])\n    ans = ''\n    for pos in range(mx + 1):\n        ans = calc(pos, ans)\n    if int(ans, 2) >= 2 ** mx:\n        return -1\n    else:\n        return int(ans, 2)\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    print(Solve())", "def Solve():\n\n    def calc(pos, ans):\n        (tmp, x) = (0, int('1' + ans, 2))\n        for a in A:\n            tmp ^= a + x\n        return '1' + ans if bin(tmp)[2:][::-1].ljust(mx, '0')[pos] == '0' else '0' + ans\n    (mx, ans) = (len(bin(max(A))[2:]) + 1, '')\n    for pos in range(mx + 1):\n        ans = calc(pos, ans)\n    return -1 if int(ans, 2) >= 2 ** mx else int(ans, 2)\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    print(Solve())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nn = max(a)\n    if n <= 1000 and nn <= 1000:\n        f = 1\n        for i in range(n):\n            ans = i + a[0]\n            for j in range(1, n):\n                ans = ans ^ i + a[j]\n            if ans == 0:\n                print(i)\n                f = 0\n                break\n        if f:\n            print(-1)\n    else:\n        z = 0\n        u = a[0]\n        c = 0\n        for i in range(n):\n            if i == 0:\n                z += 1\n            if i == u:\n                c += 1\n        if z == n:\n            print(0)\n        elif c == n:\n            print(-1)\n        else:\n            tmp = a[0]\n            for ii in range(1, n):\n                tmp = tmp ^ a[ii]\n            if tmp == 0:\n                print(0)\n            else:\n                t = bin(tmp)\n                t = t[2:]\n                t = t[::-1]\n                tn = len(t)\n                m = max(a)\n                b = bin(m)\n                b = b[2:]\n                m = len(b)\n                mm = m\n\n                def xor(aa, x):\n                    ans = aa[0] + x\n                    aa[0] = aa[0] + x\n                    for i in range(1, n):\n                        ans = ans ^ aa[i] + x\n                        aa[i] = aa[i] + x\n                    return (ans, aa)\n                i = 0\n                ans = 0\n                f = 1\n                while i <= mm and m <= mm:\n                    if t[i] == '1':\n                        (xx, a) = xor(a, 1 << i)\n                        ans += 1 << i\n                        i += 1\n                        if xx == 0:\n                            print(ans)\n                            f = 0\n                            break\n                        else:\n                            t = bin(xx)\n                            t = t[2:]\n                            t = t[::-1]\n                            m = len(t)\n                    else:\n                        i += 1\n                if f:\n                    print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    nn = max(a)\n    if n <= 1000 and nn <= 1000:\n        f = 1\n        for i in range(n):\n            ans = i + a[0]\n            for j in range(1, n):\n                ans = ans ^ i + a[j]\n            if ans == 0:\n                print(i)\n                f = 0\n                break\n        if f:\n            print(-1)\n    else:\n        z = 0\n        u = a[0]\n        c = 0\n        for i in range(n):\n            if i == 0:\n                z += 1\n            if i == u:\n                c += 1\n        if z == n:\n            print(0)\n        elif c == n:\n            print(-1)\n        else:\n            tmp = a[0]\n            for ii in range(1, n):\n                tmp = tmp ^ a[ii]\n            if tmp == 0:\n                print(0)\n            else:\n                t = bin(tmp)\n                t = t[2:]\n                t = t[::-1]\n                tn = len(t)\n                m = max(a)\n                b = bin(m)\n                b = b[2:]\n                m = len(b)\n                mm = m\n\n                def xor(aa, x):\n                    ans = aa[0] + x\n                    aa[0] = aa[0] + x\n                    for i in range(1, n):\n                        ans = ans ^ aa[i] + x\n                        aa[i] = aa[i] + x\n                    return (ans, aa)\n                i = 0\n                ans = 0\n                f = 1\n                while i <= mm and m <= mm:\n                    if t[i] == '1':\n                        (xx, a) = xor(a, 1 << i)\n                        ans += 1 << i\n                        i += 1\n                        if xx == 0:\n                            print(ans)\n                            f = 0\n                            break\n                        else:\n                            t = bin(xx)\n                            t = t[2:]\n                            t = t[::-1]\n                            m = len(t)\n                    else:\n                        i += 1\n                if f:\n                    print(-1)", "import numpy as np\nimport sys\n\ndef compute(input_arr):\n    arr = np.array(input_arr)\n    ans = 0\n    bit_shift = 0\n    carry = np.zeros(len(arr), dtype=int)\n    while np.count_nonzero(arr) > 0:\n        last_bits = arr % 2\n        adder_bit = np.count_nonzero(last_bits ^ carry) % 2\n        ans += adder_bit << bit_shift\n        carry = last_bits * adder_bit | last_bits * carry | adder_bit * carry\n        bit_shift += 1\n        arr = arr // 2\n    if np.bitwise_xor.reduce(np.array(input_arr) + ans) != 0:\n        return -1\n    return ans\nt = int(sys.stdin.readline())\nfor t_itr in range(t):\n    n = int(sys.stdin.readline())\n    arr = list(map(int, sys.stdin.readline().strip().split()))\n    sys.stdout.write(str(compute(arr)) + '\\n')", "t = int(input())\n\ndef func(a):\n    ans = 0\n    xor = 0\n    for _ in range(64):\n        for c in a:\n            xor = xor ^ c + ans\n        if xor == 0:\n            return ans\n        s = '{0:b}'.format(xor)\n        for (i, c) in enumerate(s[::-1]):\n            if int(c) == 1:\n                ans += 2 ** i\n                break\n        xor = 0\n    return -1\nfor zzzz in range(t):\n    n = input()\n    a = [int(x) for x in input().split()]\n    print(func(a))", "def getAns(entries):\n    xorVal = 0\n    answer = 0\n    for num in entries:\n        xorVal ^= num\n    index = 0\n    maxVal = max(entries)\n    while xorVal != 0:\n        if maxVal < 1 << index:\n            break\n        if xorVal & 1 << index:\n            answer += 1 << index\n        index += 1\n        xorVal = 0\n        for num in entries:\n            xorVal ^= num + answer\n    if xorVal != 0:\n        return -1\n    return answer\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        _ = int(input())\n        entries = list(map(int, input().split()))\n        print(getAns(entries))\nmain()", "def binary(c):\n    return '{0:b}'.format(int(c))\n\ndef find_one(a):\n    one_index = 0\n    dup = a\n    while 1:\n        if dup % 10 == 1:\n            return one_index\n        else:\n            one_index += 1\n            dup = dup // 10\n    return None\n\ndef xor(n, arr, i):\n    xor_val = arr[0] + i\n    for l in range(1, n):\n        xor_val = xor_val ^ arr[l] + i\n    return xor_val\n\ndef correct(n, arr):\n    maximum = max(arr)\n    bin_max = binary(maximum)\n    len_bin_max = len(bin_max)\n    ans = 0\n    jump = 0\n    counter = 0\n    while counter < len_bin_max:\n        counter += 1\n        xor_val = xor(n, arr, jump)\n        if xor_val == 0:\n            print(ans)\n            return 0\n        else:\n            bin = binary(xor_val)\n            bin = int(bin)\n            one = find_one(bin)\n            jump += 2 ** one\n            ans += 2 ** one\n    print(-1)\n    return 0\nt = int(input())\nfor l in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    correct(n, arr)", "from sys import stdin\nfrom collections import Counter\n\ndef val_xor(vals, bits):\n    Cval = Counter(vals)\n    red = (v for (v, f) in Cval.items() if f % 2 == 1)\n    x = 0\n    p2 = 1\n    for _ in range(bits):\n        (r, lb) = zip(*(divmod(a, 2) for a in red))\n        add = sum(lb) % 2 == 1\n        if add:\n            red = list((a + b for (a, b) in zip(r, lb)))\n            x += p2\n        else:\n            red = r\n        p2 *= 2\n    thr = p2 - x\n    carry = list((v >= thr for v in vals))\n    return (x, carry)\ninp = stdin.readline\nT = int(inp())\ndiv = 12\npwr = 2 ** div\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Ays = list((int(a) for a in inp().split()))\n    carry = [False] * N\n    x = 0\n    pp = 1\n    add = False\n    while max(Ays) > 0:\n        (Ays, lb) = zip(*(divmod(a + c, pwr) for (a, c) in zip(Ays, carry)))\n        (mx, carry) = val_xor(lb, div)\n        x += pp * mx\n        pp *= pwr\n    if sum(carry) % 2 == 1:\n        ans.append(-1)\n    else:\n        ans.append(x)\nprint(*ans, sep='\\n')", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\n\ndef xor(l):\n    ans = 0\n    for i in l:\n        ans ^= i\n    return ans\n\ndef add(el, l):\n    l1 = list(l)\n    for i in range(len(l)):\n        l1[i] += el\n    return l1\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = max(l)\n    m = len(bin(m)) - 1\n    ans = 0\n    pos = 0\n    while True:\n        _xor = xor(l)\n        if _xor == 0:\n            print(ans)\n            break\n        b = str(bin(_xor))[2:]\n        if b[-pos - 1] == '1':\n            element = 2 ** pos\n            ans += element\n            l = add(element, l)\n        pos += 1\n        if pos >= m - 1:\n            print(-1)\n            break", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(s) for s in input().split()]\n    mx = max(arr)\n    if mx == 0:\n        ml = 1\n    else:\n        ml = math.ceil(math.log2(mx))\n    p = 1\n    r = 0\n    bx = 0\n    ai = set()\n    for ii in range(n):\n        ai.add(ii)\n        bx = bx ^ arr[ii]\n    bx = bin(bx)[::-1]\n    con = bx.find('1')\n    ad = 1\n    conprev = 0\n    while con < ml and con != -1:\n        ad *= pow(2, con - conprev)\n        bx = 0\n        r += ad\n        for i in ai:\n            arr[i] += ad\n            bx = bx ^ arr[i]\n        bx = bin(bx)[::-1]\n        conn = -1\n        if len(bx) > conprev + 1:\n            for j in range(conprev + 1, len(bx)):\n                if bx[j] == '1':\n                    conn = j\n                    break\n        (conprev, con) = (con, conn)\n    if con == -1:\n        print(r)\n    else:\n        print(-1)", "import numpy as np\nt = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    a = np.array(list(map(int, input().split())))\n    cry = np.zeros(n, dtype=int)\n    add = []\n    for lmd in range(64):\n        odd = np.sum((a + cry) % 2)\n        if odd % 2:\n            add.append(1)\n            cry = a % 2 | cry % 2\n            a = a // 2\n        else:\n            add.append(0)\n            cry = a % 2 & cry % 2\n            a = a // 2\n    if sum(cry) > 0:\n        print(-1)\n    else:\n        num = 0\n        add.reverse()\n        for x in add:\n            num = num * 2 + x\n        print(num)", "def compute(A, X):\n    S = 0\n    for a in A:\n        S ^= a + X\n    return S\n\ndef naive(N, A):\n    for x in range(10):\n        S = compute(A, x)\n        if not S:\n            return x\n    return -1\n\ndef main(N, A):\n    X = 0\n    for k in range(64):\n        s = compute(A, X) >> k & 1\n        if s == 1:\n            X += 1 << k\n    if compute(A, X):\n        return -1\n    return X\nT = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    A = [int(x) for x in input().strip().split()[:N]]\n    print(main(N, A))", "try:\n    from debugger import debug\nexcept ImportError:\n\n    def debug(**kwargs):\n        pass\n    pass\n\ndef SolveCase():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mask = 0\n    for bit in range(63):\n        xor = 0\n        for x in arr:\n            xor ^= x + mask\n        if xor == 0:\n            return mask\n        if xor >> bit & 1:\n            mask |= 1 << bit\n    return -1\nfor _ in range(int(input())):\n    print(SolveCase())"]