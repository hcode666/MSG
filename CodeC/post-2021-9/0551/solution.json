["for t in range(int(input())):\n    mod = 1000000007\n    N = int(input())\n    t1 = N * (N + 1) // 2 % mod\n    t2 = t1 * t1 % mod\n    t3 = N * (N + 1) * (2 * N + 1) // 6 % mod\n    t4 = pow(N, mod - 2, mod)\n    print(t4 * (t2 - t3) % mod)", "for t in range(int(input())):\n    mod = 1000000007\n    N = int(input())\n    t1 = N * (N + 1) // 2 % mod\n    t2 = t1 * t1 % mod\n    t3 = N * (N + 1) * (2 * N + 1) // 6 % mod\n    t4 = pow(N, mod - 2, mod)\n    print(t4 * (t2 - t3) % mod)", "for t in range(int(input())):\n    mod = 1000000007\n    N = int(input())\n    t1 = N * (N + 1) // 2 % mod\n    t2 = t1 * t1 % mod\n    t3 = N * (N + 1) * (2 * N + 1) // 6 % mod\n    t4 = pow(N, mod - 2, mod)\n    print(t4 * (t2 - t3) % mod)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = 1000000007\n    s1 = n * (n + 1) // 2 % c\n    s2 = s1 * s1 % c\n    s3 = n * (n + 1) * (2 * n + 1) // 6 % c\n    s4 = pow(n, c - 2, c)\n    print(s4 * (s2 - s3) % c)", "for t in range(int(input())):\n    mod = 1000000007\n    N = int(input())\n    t1 = N * (N + 1) // 2 % mod\n    t2 = t1 * t1 % mod\n    t3 = N * (N + 1) * (2 * N + 1) // 6 % mod\n    t4 = pow(N, mod - 2, mod)\n    print(t4 * (t2 - t3) % mod)", "from fractions import Fraction\nfor i in range(int(input())):\n    n = int(input())\n    s = Fraction((n + 1) * (n - 1) * (3 * n + 2), 12)\n    z = str(s)\n    l = list(z.split('/'))\n    a = int(l[0])\n    b = 1\n    if len(l) == 2:\n        b = int(l[1])\n    y = pow(b, 1000000005, 1000000007)\n    c = a * y % 1000000007\n    print(c)", "def fastPower(a, b):\n    m = b + 2\n    r = 1\n    while b > 0:\n        if b & 1:\n            r = r * a % m\n        a = a % m * a % m % m\n        b >>= 1\n    return r % m\nm = 1000000007\nk2 = fastPower(2, m - 2)\nk6 = fastPower(6, m - 2)\n\ndef s1(n):\n    return n % m * (n + 1) % m % m * k2 % m\n\ndef s2(n):\n    return n % m * ((n + 1) % m) * ((2 * n + 1) % m) % m * k6 % m\n\ndef funcx(n):\n    kn = fastPower(n, m - 2)\n    ans = (s1(n) % m * s1(n) % m % m + m - s2(n) % m) % m * kn % m\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(funcx(n))", "def fastPower(a, b):\n    m = b + 2\n    r = 1\n    while b > 0:\n        if b & 1:\n            r = r * a % m\n        a = a % m * a % m % m\n        b >>= 1\n    return r\nm = 1000000007\nk2 = fastPower(2, m - 2)\nk6 = fastPower(6, m - 2)\n\ndef s1(n):\n    return n % m * (n + 1) % m % m * (k2 % m) % m\n\ndef s2(n):\n    return n % m * ((n + 1) % m) * ((2 * n + 1) % m) % m * (k6 % m) % m\n\ndef funcx(n):\n    kn = fastPower(n, m - 2)\n    ans = (s1(n) % m * s1(n) % m % m + m - s2(n) % m) % m * (kn % m) % m\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(funcx(n))", "def fun(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = (n + 1) * (3 * n * n - n - 2)\n    q = 12\n    print(fun(p, q))", "mod = 1000000007\nx = pow(12, mod - 2, mod)\n\ndef solve():\n    n = int(input())\n    ans = (n * n - 1) % mod\n    z = (3 * n + 2) % mod\n    ans *= z\n    ans %= mod\n    ans *= x\n    ans %= mod\n    print(ans)\nfor iii in range(int(input())):\n    solve()", "mod = 10 ** 9 + 7\nfor tc in range(int(input())):\n    n = int(input())\n    num = (pow(n * (n + 1) // 2, 2, mod) - n * (n + 1) * (2 * n + 1) // 6) % mod\n    den = pow(n, mod - 2, mod)\n    print(num * den % mod)", "import sys\nmod = 10 ** 9 + 7\n\ndef inverse(a):\n    return power(a, mod - 2)\n\ndef power(x, y):\n    ans = 1\n    while y > 0:\n        if y & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        y >>= 1\n    return ans\n\ndef main():\n    test_case = int(sys.stdin.readline())\n    for tc in range(test_case):\n        n = int(sys.stdin.readline())\n        numerator = (power(n * (n + 1) // 2, 2) - n * (n + 1) * (2 * n + 1) // 6) % mod\n        denominator = inverse(n)\n        answer = numerator * denominator % mod\n        print(answer)\nmain()", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = (n ** 2 - 1) * (3 * n + 2) % 1000000007\n    b = 83333334\n    print(a * b % 1000000007)", "for n in [*open(0)][1:]:\n    n = int(n)\n    print(83333334 * (n * n - 1) * (3 * n + 2) % (10 ** 9 + 7))", "def egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        (g, y, x) = egcd(b % a, a)\n        return (g, x - b // a * y, y)\n\ndef modinv(a, m):\n    (g, x, y) = egcd(a, m)\n    if g != 1:\n        raise Exception('modular inverse does not exist')\n    else:\n        return x % m\nT = int(input())\nV = []\nwhile T > 0:\n    N = int(input())\n    y = N * (N + 1) // 2\n    a = (2 * N ** 3 + 3 * N ** 2 + N) // 6\n    x = y ** 2 - a\n    d = x * modinv(N, 1000000007) % 1000000007\n    V.append(int(d))\n    T = T - 1\nfor i in V:\n    print(i)", "def c(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nfor i in range(int(input())):\n    n = int(input())\n    ans = 3 * n ** 4 + 2 * n ** 3 - 3 * n ** 2 - 2 * n\n    print(c(ans // 12, n))", "from fractions import Fraction\nfor _ in range(int(input())):\n    n = int(input())\n    s = (n - 1) * (Fraction(n * (n - 1), 4) + Fraction(2 * n - 1, 3) + Fraction(1, 2))\n    m = 10 ** 9 + 7\n    d = pow(s.denominator, m - 2, m)\n    res = s.numerator % m * d % m\n    print(res)", "from fractions import Fraction\n\ndef modexp(x, n):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return modexp(x * x % (10 ** 9 + 7), n // 2)\n    else:\n        return x * modexp(x * x % (10 ** 9 + 7), (n - 1) / 2) % (10 ** 9 + 7)\nfor _ in range(int(input())):\n    n = int(input())\n    s = (n - 1) * (Fraction(n * (n - 1), 4) + Fraction(2 * n - 1, 3) + Fraction(1, 2))\n    m = 10 ** 9 + 7\n    d = modexp(s.denominator, m - 2)\n    res = s.numerator % m * (d % m) % m\n    print(res)", "MOD = 10 ** 9 + 7\n\ndef mod_mul(a, b):\n    return a % MOD * (b % MOD) % MOD\n\ndef mod_sum(a, b):\n    return (a + b) % MOD\n\ndef mod_inv(a):\n    return pow(a, MOD - 2, MOD)\nimport io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        (N, K) = invr()\n        outp(N // K + 1 if N % K else N // K)\n\ndef B():\n    for _ in range(inp()):\n        N = inp()\n        A = invr()\n        (mn, mx) = (min(A), max(A))\n        outp(0 if mn == mx else mx - mn)\n\ndef C():\n    for _ in range(inp()):\n        N = inp()\n        A = insr()\n        B = insr()\n        (ans, equal) = (0, True)\n        for i in range(1, N + 1):\n            if equal and A[-i] == B[-i]:\n                continue\n            elif A[-i] > B[-i]:\n                equal = True\n                continue\n            else:\n                equal = False\n                ans += 1\n        outp(ans)\n\ndef D():\n    pal = [513, 257, 129, 65, 33, 17, 9, 5, 3, 1]\n    for _ in range(inp()):\n        N = inp()\n        ans = []\n        for p in pal:\n            while N >= p:\n                N -= p\n                ans.append(p)\n            if not N:\n                break\n        outp(len(ans))\n        outlt(ans)\nMOD = 10 ** 9 + 7\n\ndef mod_mul(a, b):\n    return a % MOD * (b % MOD) % MOD\n\ndef mod_sum(a, b):\n    return (a + b) % MOD\n\ndef mod_inv(a):\n    return pow(a, MOD - 2, MOD)\nimport io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        (N, K) = invr()\n        outp(N // K + 1 if N % K else N // K)\n\ndef B():\n    for _ in range(inp()):\n        N = inp()\n        A = invr()\n        (mn, mx) = (min(A), max(A))\n        outp(0 if mn == mx else mx - mn)\n\ndef C():\n    for _ in range(inp()):\n        N = inp()\n        A = insr()\n        B = insr()\n        (ans, equal) = (0, True)\n        for i in range(1, N + 1):\n            if equal and A[-i] == B[-i]:\n                continue\n            elif A[-i] > B[-i]:\n                equal = True\n                continue\n            else:\n                equal = False\n                ans += 1\n        outp(ans)\n\ndef D():\n    pal = [513, 257, 129, 65, 33, 17, 9, 5, 3, 1]\n    for _ in range(inp()):\n        N = inp()\n        ans = []\n        for p in pal:\n            while N >= p:\n                N -= p\n                ans.append(p)\n            if not N:\n                break\n        outp(len(ans))\n        outlt(ans)\n\ndef E():\n    q_inv = mod_inv(12)\n    In = [inp() for _ in range(inp())]\n    Out = ((3 * pow(N, 3, MOD) + 2 * pow(N, 2, MOD) - 3 * N - 2) * q_inv % MOD for N in In)\n    outplt(Out)\nE()", "MOD = 10 ** 9 + 7\n\ndef mod_mul(a, b):\n    return a % MOD * (b % MOD) % MOD\n\ndef mod_sum(a, b):\n    return (a + b) % MOD\n\ndef mod_inv(a):\n    return pow(a, MOD - 2, MOD)\nimport io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        (N, K) = invr()\n        outp(N // K + 1 if N % K else N // K)\n\ndef B():\n    for _ in range(inp()):\n        N = inp()\n        A = invr()\n        (mn, mx) = (min(A), max(A))\n        outp(0 if mn == mx else mx - mn)\n\ndef C():\n    for _ in range(inp()):\n        N = inp()\n        A = insr()\n        B = insr()\n        (ans, equal) = (0, True)\n        for i in range(1, N + 1):\n            if equal and A[-i] == B[-i]:\n                continue\n            elif A[-i] > B[-i]:\n                equal = True\n                continue\n            else:\n                equal = False\n                ans += 1\n        outp(ans)\n\ndef D():\n    pal = [513, 257, 129, 65, 33, 17, 9, 5, 3, 1]\n    for _ in range(inp()):\n        N = inp()\n        ans = []\n        for p in pal:\n            while N >= p:\n                N -= p\n                ans.append(p)\n            if not N:\n                break\n        outp(len(ans))\n        outlt(ans)\nMOD = 10 ** 9 + 7\n\ndef mod_mul(a, b):\n    return a % MOD * (b % MOD) % MOD\n\ndef mod_sum(a, b):\n    return (a + b) % MOD\n\ndef mod_inv(a):\n    return pow(a, MOD - 2, MOD)\nimport io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        (N, K) = invr()\n        outp(N // K + 1 if N % K else N // K)\n\ndef B():\n    for _ in range(inp()):\n        N = inp()\n        A = invr()\n        (mn, mx) = (min(A), max(A))\n        outp(0 if mn == mx else mx - mn)\n\ndef C():\n    for _ in range(inp()):\n        N = inp()\n        A = insr()\n        B = insr()\n        (ans, equal) = (0, True)\n        for i in range(1, N + 1):\n            if equal and A[-i] == B[-i]:\n                continue\n            elif A[-i] > B[-i]:\n                equal = True\n                continue\n            else:\n                equal = False\n                ans += 1\n        outp(ans)\n\ndef D():\n    pal = [513, 257, 129, 65, 33, 17, 9, 5, 3, 1]\n    for _ in range(inp()):\n        N = inp()\n        ans = []\n        for p in pal:\n            while N >= p:\n                N -= p\n                ans.append(p)\n            if not N:\n                break\n        outp(len(ans))\n        outlt(ans)\n\ndef E():\n    q_inv = mod_inv(12)\n    In = [inp() for _ in range(inp())]\n    Out = ((3 * pow(N, 3, MOD) % MOD + 2 * pow(N, 2, MOD) % MOD - 3 * N - 2) * q_inv % MOD for N in In)\n    outplt(Out)\nE()", "MOD = 10 ** 9 + 7\n\ndef mod_mul(a, b):\n    return a % MOD * (b % MOD) % MOD\n\ndef mod_sum(a, b):\n    return (a + b) % MOD\n\ndef mod_inv(a):\n    return pow(a, MOD - 2, MOD)\nimport io, os, sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef A():\n    for _ in range(inp()):\n        (N, K) = invr()\n        outp(N // K + 1 if N % K else N // K)\n\ndef B():\n    for _ in range(inp()):\n        N = inp()\n        A = invr()\n        (mn, mx) = (min(A), max(A))\n        outp(0 if mn == mx else mx - mn)\n\ndef C():\n    for _ in range(inp()):\n        N = inp()\n        A = insr()\n        B = insr()\n        (ans, equal) = (0, True)\n        for i in range(1, N + 1):\n            if equal and A[-i] == B[-i]:\n                continue\n            elif A[-i] > B[-i]:\n                equal = True\n                continue\n            else:\n                equal = False\n                ans += 1\n        outp(ans)\n\ndef D():\n    pal = [513, 257, 129, 65, 33, 17, 9, 5, 3, 1]\n    for _ in range(inp()):\n        N = inp()\n        ans = []\n        for p in pal:\n            while N >= p:\n                N -= p\n                ans.append(p)\n            if not N:\n                break\n        outp(len(ans))\n        outlt(ans)\n\ndef E():\n\n    def fact(N):\n        f = 1\n        for x in range(2, N + 1):\n            f *= x\n        return f\n    MOD = 10 ** 9 + 7\n    (In, Out) = ([], [])\n    for _ in range(inp()):\n        In.append(inp())\n        Out = ((pow(N * (N + 1) // 2, 2, MOD) - N * (N + 1) * (2 * N + 1) // 6 % MOD) * mod_inv(N) % MOD for N in In)\n    outplt(Out)\nE()", "for i in range(int(input())):\n    m = 10 ** 9 + 7\n    n = int(input())\n    s = 0\n    s1 = n * (n + 1) // 2\n    s = (s1 * s1 - n * (n + 1) * (2 * n + 1) // 6 + m) % m\n    print(s * pow(n, m - 2, m) % m)", "mx = 10 ** 5 + 5\nf = [1] * mx\nm = 10 ** 9 + 7\nfor i in range(2, mx):\n    f[i] = i * f[i - 1] % m\nfor i in range(int(input())):\n    n = int(input())\n    s = 0\n    s1 = n * (n + 1) // 2\n    s = (s1 * s1 - n * (n + 1) * (2 * n + 1) // 6 + m) % m\n    print(s * pow(n, m - 2, m) % m)", "a = 1000000007\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    p = (n ** 2 - 1) * (3 * n + 2) % a\n    q = 83333334\n    print(p * q % a)", "from itertools import *\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\nt = inp()\nwhile t:\n    t -= 1\n    n = inp()\n    su = n * (n + 1) * (n - 1) * (3 * n + 2)\n    su = su // 24\n    su *= 2\n    p = 10 ** 9 + 7\n    pr = pow(n, p - 2, p)\n    su = su * pr\n    print(su % p)", "def calculate(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    p = 3 * n ** 3 + 2 * (n * n) - 3 * n - 2\n    q = 12\n    print(calculate(p, q))", "def calculate(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = (3 * n * n - n - 2) * (n + 1)\n    print(calculate(ans, 12) % 1000000007)", "import math\nt = int(input())\n\ndef calculate(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef do(n):\n    p = (n - 1) * (n + 1) * (3 * n + 2)\n    gc = math.gcd(p, 12)\n    print(calculate(p // gc, 12 // gc))\nfor i in range(t):\n    n = int(input())\n    do(n)", "def calculate(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = (3 * n * n - n - 2) * (n + 1)\n    print(calculate(ans, 12) % 1000000007)", "from sys import stdin\ninput = stdin.readline\nmod = 10 ** 9 + 7\n\ndef add(a, b):\n    return (a % mod + b % mod) % mod\n\ndef mul(a, b):\n    return a % mod * (b % mod) % mod\n\ndef sub(a, b):\n    return (a - b + mod) % mod\n\ndef div(a, b):\n    return mul(a, pow(b, mod - 2, mod))\n\ndef answer():\n    v1 = n * (n + 1) // 2\n    v2 = n * (n + 1) * (2 * n + 1) // 6\n    ans = sub(mul(v1, v1), v2)\n    return div(ans, n)\nfor T in range(int(input())):\n    n = int(input())\n    print(answer())", "def gcd(a, b):\n    while a > 0:\n        (a, b) = (b % a, a)\n    return b\n\ndef invfac(x):\n    m = 1000000007\n    return pow(x, m - 2, m)\nfor _ in range(int(input())):\n    n = int(input())\n    ans = -(n * (n - 1)) ** 2 // 2\n    ans -= n * (n - 1) * (2 * n - 1) // 3\n    ans += n ** 2 * (n + 1) * (n - 1)\n    ans //= 2\n    xd = n\n    temp = gcd(ans, xd)\n    ans //= temp\n    xd //= temp\n    print(ans * invfac(xd) % 1000000007)", "def calculate(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    ans = 3 * n ** 3 + 2 * n ** 2 - 3 * n - 2\n    print(calculate(ans, 12))", "from sys import stdin\ninput = stdin.readline\nmod = 10 ** 9 + 7\n\ndef add(a, b):\n    return (a % mod + b % mod) % mod\n\ndef mul(a, b):\n    return a % mod * (b % mod) % mod\n\ndef sub(a, b):\n    return (a - b + mod) % mod\n\ndef div(a, b):\n    return mul(a, pow(b, mod - 2, mod))\n\ndef answer():\n    v1 = n * (n + 1) // 2\n    v2 = n * (n + 1) * (2 * n + 1) // 6\n    ans = sub(mul(v1, v1), v2)\n    return div(ans, n)\nfor T in range(int(input())):\n    n = int(input())\n    print(answer())", "from math import ceil, e, log2, floor, sqrt, gcd\nfrom collections import defaultdict, deque\nimport sys\nimport os.path\nsys.setrecursionlimit(200000)\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r+')\n    sys.stdout = open('output.txt', 'w')\n\ndef MI():\n    return map(int, input().split())\n\ndef find(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef solve(testcase):\n    n = int(input())\n    n1 = n\n    r = n * (n + 1) // 2\n    sqsum = n * (2 * n + 1) * (n + 1) // 6\n    s = r * r - sqsum\n    print(find(s, n))\nt = int(input())\nfor _ in range(t):\n    solve(_ + 1)", "from math import gcd\n\ndef calculate(p, q):\n    mod = 10 ** 9 + 7\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef reduceFraction(x, y):\n    d = gcd(x, y)\n    x = x // d\n    y = y // d\n    return (x, y)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (p, q) = reduceFraction((n - 1) * (n + 1) * (3 * n + 2), 12)\n    print(calculate(p, q))", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    p = (n + 1) % m * (3 * pow(n, 2, m) - n - 2) % m\n    print(p * 83333334 % m)", "def calculate(p, q):\n    mod = 1000000007\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef calc(n):\n    return (n * (n + 1) // 2) ** 2 - n * (n + 1) * (2 * n + 1) // 6\nfor _ in range(int(input())):\n    n = int(input())\n    k = calculate(calc(n), n)\n    print(k)", "import sys\nsys.setrecursionlimit(10 ** 9)\n\ndef inv(a, mod):\n    inverse = pow(a, mod - 2, mod)\n    return inverse\nm = 10 ** 9 + 7\nd = {}\n\ndef fac(n):\n    global d\n    if n < 2:\n        return 1\n    if n in d:\n        return d[n]\n    d[n] = n * fac(n - 1) % m\n    return d[n]\nfor _ in range(int(input())):\n    n = int(input())\n    tot = (n * (n + 1) // 2) ** 2 - n * (n + 1) * (2 * n + 1) // 6\n    p = tot % m\n    q = n\n    print(p * inv(q, m) % m)", "mod = 1000000007\n\ndef expo(a, b):\n    if not b:\n        return 1\n    v = expo(a, b // 2)\n    v = v * v % mod\n    if b % 2:\n        v = v * a % mod\n    return v\n\ndef modinv(a, b):\n    d = expo(b, mod - 2)\n    v = a * d % mod\n    return v\nfor _ in range(int(input())):\n    n = int(input())\n    v = 3 * n * n - n - 2\n    v = (n + 1) * v\n    r = modinv(v, 12)\n    print(r)"]