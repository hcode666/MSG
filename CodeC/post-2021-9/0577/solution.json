["T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n\n    def length(getMask, ignoreMask):\n        assert getMask & ignoreMask == 0\n        C = [0]\n        D = {0: 0}\n        res = float('inf')\n        for (i, elt) in enumerate(A):\n            presum = C[-1] ^ elt & ~ignoreMask\n            C.append(presum)\n            comp = presum ^ getMask\n            if comp in D:\n                l = i + 1 - D[comp]\n                res = min(res, l)\n            D[C[-1]] = i + 1\n        return res\n    res = length(K, 0)\n    ignoreMask = -1 & (1 << 32) - 1\n    getMask = 0\n    for k in range(31, -1, -1):\n        ignoreMask ^= 1 << k\n        if K & 1 << k != 0:\n            getMask |= 1 << k\n        else:\n            getMask |= 1 << k\n            res = min(res, length(getMask, ignoreMask))\n            getMask ^= 1 << k\n    if res == float('inf'):\n        print(-1)\n    else:\n        print(res)"]