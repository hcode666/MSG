["def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(int, input().split())\n    print(c // gcd(b, c))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(int, input().split())\n    print(c // gcd(b, c))", "from math import gcd\nfor t in range(int(input())):\n    (b, c) = map(int, input().split(' '))\n    print(c // gcd(b, c))", "from math import gcd\nfor t in range(int(input())):\n    (b, c) = map(int, input().split(' '))\n    print(c // gcd(b, c))", "import math\nfor t in range(int(input())):\n    (b, c) = map(int, input().split(' '))\n    if b % c == 0:\n        a = 1\n    elif c % b == 0:\n        a = int(c / b)\n    else:\n        num = b // math.gcd(b, c) * c\n        a = int(num / b)\n    print(a)", "import math\nt = int(input())\nfor i in range(t):\n    (b, c) = map(int, input().split())\n    a = int(c / math.gcd(b, c))\n    print(a)", "from sys import stdin\nfrom math import gcd\ninput = stdin.readline\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(c // gcd(b, c))", "def gcd(b, c):\n    if c == 0:\n        return b\n    else:\n        return gcd(c, b % c)\nfor t in range(int(input())):\n    (b, c) = map(int, input().split())\n    a = c / gcd(b, c)\n    print(int(a))", "def gcd(b, d):\n    if d == 0:\n        return b\n    else:\n        return gcd(d, b % d)\nt = int(input())\nfor It in range(t):\n    (b, d) = map(int, input().split())\n    a = d / gcd(b, d)\n    print(int(a))", "import math as m\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(c // m.gcd(b, c))", "import math\nT = int(input())\nfor t in range(T):\n    (b, c) = map(int, input().split())\n    x = math.gcd(b, c)\n    print(c // x)", "import math\nT = int(input())\nfor i in range(T):\n    (b, c) = map(int, input().split())\n    ans = int(c / math.gcd(b, c))\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "import math\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef get_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(get_lcm(b, c) // b)", "def compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef get_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(get_lcm(b, c) // b)", "import math as m\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(int, input().split())\n    print(c // m.gcd(b, c))", "import math\ntry:\n    T = int(input())\n    for i in range(T):\n        (B, C) = map(int, input().split())\n        print(C // math.gcd(B, C))\nexcept:\n    pass", "import numpy\nt = int(input())\nfor i in range(t):\n    (b, c) = map(int, input().split())\n    a = numpy.lcm(b, c)\n    print(a // b)", "import numpy\nt = int(input())\nfor i in range(t):\n    (b, c) = map(int, input().split())\n    a = numpy.lcm(b, c)\n    print(a // b)", "t = int(input())\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\nwhile t > 0:\n    (b, c) = map(int, input().split())\n    n = lcm(b, c)\n    print(n // b)\n    t -= 1", "import math\nt = int(input())\nfor tc in range(t):\n    (b, c) = map(int, input().split())\n    n = math.gcd(b, c)\n    print(c // n)", "import math\nt = int(input())\nfor tc in range(t):\n    (b, c) = map(int, input().split())\n    n = math.gcd(b, c)\n    print(c // n)", "from math import gcd\nfor i in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(int(c / gcd(b, c)))", "import math\nt = int(input(''))\nfor i in range(t):\n    s = list(map(int, input().split(' ')))\n    a = math.gcd(s[0], s[1])\n    print(s[1] // a)", "t = int(input())\nwhile t:\n    t -= 1\n    l = list(map(int, input().split()))\n\n    def hcf(a, b):\n        if b == 0:\n            return a\n        else:\n            return hcf(b, a % b)\n    x = hcf(l[0], l[1])\n    x = l[0] * l[1] // x\n    x = x // l[0]\n    print(x)", "import math\nfor i in range(int(input())):\n    (b, c) = map(int, input().split())\n    x = math.gcd(b, c)\n    print(c // x)", "import math\nh = int(input())\nfor i in range(h):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "import math\nt = int(input())\nwhile t > 0:\n    (B, C) = map(int, input().split())\n    A = C // math.gcd(B, C)\n    print(A)\n    t -= 1", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor i in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(lcm(b, c) // b)", "import math\nt = int(input())\nfor i in range(t):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(int, input().split())\n    print(lcm(b, c) // b)", "def gcd(b, c):\n    if b == 0:\n        return c\n    return gcd(c % b, b)\nt = int(input())\nfor i in range(t):\n    (b, c) = map(int, input().split())\n    lcm = b // gcd(b, c) * c\n    print(lcm // b)", "def gcd(b, c):\n    if b == 0:\n        return c\n    return gcd(c % b, b)\nt = int(input())\nfor i in range(t):\n    (b, c) = map(int, input().split())\n    lcm = b // gcd(b, c) * c\n    print(lcm // b)", "from math import gcd\nfor _ in range(int(input())):\n    (B, C) = map(int, input().split())\n    A = C // gcd(B, C)\n    print(A)", "import math\nT = int(input())\nfor _ in range(T):\n    (b, c) = map(int, input().split())\n    d = math.gcd(b, c)\n    print(c // d)", "import math\nT = int(input())\nfor _ in range(T):\n    (b, c) = map(int, input().split())\n    d = math.gcd(b, c)\n    print(c // d)", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    d = math.gcd(b, c)\n    print(c // d)", "from math import *\nT = int(input())\nfor i in range(T):\n    (B, C) = map(int, input().split())\n    if B >= C and B % C == 0:\n        print(1)\n    else:\n        a = gcd(B, C)\n        print(C // a)", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = list(map(int, input().split()))\n    b = n[0]\n    c = n[1]\n    print(int(c / gcd(b, c)))", "import math\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(int, input().split(' '))\n    myGcd = math.gcd(b, c)\n    a = c // myGcd\n    print(a)", "def hcf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nwhile t != 0:\n    (b, c) = map(int, input().split())\n    h = hcf(b, c)\n    print(c // h)\n    t = t - 1", "import math\nT = int(input())\nfor _ in range(T):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "import math\nT = int(input())\nfor i in range(T):\n    (B, C) = map(int, input().split())\n    print(C // math.gcd(B, C))", "from math import *\n\ndef call(b, c):\n    print(c // gcd(b, c))\nfor i in range(int(input())):\n    (b, c) = map(int, input().split())\n    call(b, c)", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(int(c / math.gcd(b, c)))", "from math import gcd\nfor _ in range(int(input())):\n    (A, B) = map(int, input().split())\n    x = B // gcd(A, B)\n    print(x)", "import math\nt = int(input())\nwhile t > 0:\n    (b, c) = map(int, input().split(' '))\n    a = math.gcd(b, c)\n    print(c // a)\n    t = t - 1", "import math as m\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    lcm = a * b // m.gcd(a, b)\n    print(lcm // a)", "from math import *\na = int(input())\nfor i in range(a):\n    (f, g) = map(int, input().split())\n    print(g // gcd(f, g))", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = list(map(int, input().split()))\n    b = n[0]\n    c = n[1]\n    print(int(c / gcd(b, c)))", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = list(map(int, input().split()))\n    b = n[0]\n    c = n[1]\n    print(int(c / gcd(b, c)))", "from math import gcd\nt = int(input())\nfor ni in range(t):\n    (b, c) = map(int, input().split())\n    a1 = gcd(b, c)\n    print(int(c / a1))", "import math\nn = int(input())\nfor i in range(n):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "import math\nt = int(input())\nfor i in range(t):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    g = gcd(a, b)\n    print(b // g)", "import math\nt = int(input())\nfor _ in range(t):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "import math\n\ndef find_a(b, c):\n    return c // math.gcd(b, c)\nfor _ in range(int(input())):\n    l = list(map(int, input().split()))\n    (b, c) = (l[0], l[1])\n    print(find_a(b, c))", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "import math\nn = int(input())\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    print(b // math.gcd(a, b))", "import math\nn = int(input())\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    print(b // math.gcd(a, b))", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    z = b * c // math.gcd(b, c)\n    print(z // b)", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    z = b * c // math.gcd(b, c)\n    print(z // b)", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    s = []\n    i = 1\n    z = b * c // math.gcd(b, c)\n    print(z // b)", "def hcf(x, y):\n    if x == 0:\n        return y\n    else:\n        return hcf(y % x, x)\nT = int(input())\nfor i in range(0, T):\n    (b, c) = input().split()\n    b = int(b)\n    c = int(c)\n    res = hcf(b, c)\n    a = int(c / res)\n    print(a)", "def computeGCD(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfor i in range(int(input())):\n    (b, c) = map(int, input().split())\n    a = computeGCD(b, c)\n    print(c // a)", "import math\nt = int(input())\nfor dummy in range(t):\n    (b, c) = map(int, input().split())\n    gcd = math.gcd(b, c)\n    print(c // gcd)", "def compute_hcf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    hcf = compute_hcf(b, c)\n    print(c // hcf)", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    print(c // math.gcd(b, c))", "from math import gcd\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    g = gcd(b, c)\n    print(c // g)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    line = input().split(' ')\n    b = int(line[0])\n    c = int(line[1])\n    great = gcd(b, c)\n    res = c // great\n    print(res)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    line = input().split(' ')\n    b = int(line[0])\n    c = int(line[1])\n    great = gcd(b, c)\n    res = c // great\n    print(res)", "from math import gcd\nt = int(input())\nfor _ in range(t):\n    line = input().split(' ')\n    b = int(line[0])\n    c = int(line[1])\n    great = gcd(b, c)\n    res = c // great\n    print(res)", "def hcf(x, y):\n    if x == 0:\n        return y\n    else:\n        return hcf(y % x, x)\nT = int(input())\nfor i in range(0, T):\n    (b, c) = map(int, input().split())\n    res = hcf(b, c)\n    a = int(c / res)\n    print(a)", "from math import gcd\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    greatest = gcd(b, c)\n    print(c // greatest)", "def hcf(x, y):\n    if x == 0:\n        return y\n    else:\n        return hcf(y % x, x)\nT = int(input())\nfor i in range(0, T):\n    (b, c) = map(int, input().split())\n    res = hcf(b, c)\n    a = int(c / res)\n    print(a)", "def hcf(x, y):\n    if x == 0:\n        return y\n    else:\n        return hcf(y % x, x)\nT = int(input())\nfor i in range(0, T):\n    (b, c) = input().split()\n    b = int(b)\n    c = int(c)\n    res = hcf(b, c)\n    a = int(c / res)\n    print(a)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor i in range(int(input())):\n    (x, y) = map(int, input().split())\n    print(y // gcd(x, y))", "def hcf(x, y):\n    if x == 0:\n        return y\n    else:\n        return hcf(y % x, x)\nT = int(input())\nfor i in range(0, T):\n    (b, c) = input().split()\n    b = int(b)\n    c = int(c)\n    res = hcf(b, c)\n    a = int(c / res)\n    print(a)", "from math import gcd\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split(' '))\n    greatest = gcd(b, c)\n    print(c // greatest)", "import math\nfor _ in range(int(input())):\n    (b, c) = map(int, input().split())\n    val = math.gcd(b, c)\n    print(c // val)", "import math\nfor _ in range(int(input())):\n    (b, c) = list(map(int, input().split()))\n    if b % c == 0:\n        print('1')\n    else:\n        d = math.gcd(b, c)\n        print(int(c / d))"]