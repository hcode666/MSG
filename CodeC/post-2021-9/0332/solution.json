["for _ in range(int(input())):\n    n = int(input())\n    s = 0\n    if n == 3:\n        print(10)\n    elif n > 3:\n        print(pow(3, n - 3) * 10 * (n - 2))\n    else:\n        print(0)", "def funk(n):\n    if n == 1:\n        return [[0], [1], [2]]\n    p = funk(n - 1)\n    ans = []\n    for r in p:\n        ans += [r + [0]]\n        ans += [r + [1]]\n        ans += [r + [2]]\n    return ans\n\ndef ffunk(a, n):\n    an = 0\n    if n < 3:\n        return 0\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1] or (a[i] < a[i - 1] and a[i] < a[i + 1]):\n            an += 1\n    return an\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = funk(n)\n    ans = 0\n    for r in a:\n        ans += ffunk(r, n)\n    print(ans)", "def funk(n):\n    if n == 1:\n        return [[0], [1], [2]]\n    p = funk(n - 1)\n    ans = []\n    for r in p:\n        ans += [r + [0]]\n        ans += [r + [1]]\n        ans += [r + [2]]\n    return ans\n\ndef ffunk(a, n):\n    an = 0\n    if n < 3:\n        return 0\n    for i in range(1, n - 1):\n        if a[i] > a[i - 1] and a[i] > a[i + 1] or (a[i] < a[i - 1] and a[i] < a[i + 1]):\n            an += 1\n    return an\nt = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = funk(n)\n    ans = 0\n    for r in a:\n        ans += ffunk(r, n)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(0)\n    elif n == 3:\n        print(10)\n    else:\n        print(3 ** (n - 3) * 10 * (n - 2))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(3 ** (n - 3) * 10 * (n - 2))", "for _ in range(int(input())):\n    N = int(input())\n    if N == 2 or N == 1:\n        print(0)\n        continue\n    print(3 ** (N - 3) * 10 * (N - 2))", "a = int(input())\nfor i in range(a):\n    n = int(input())\n    s = 0\n    if n == 3:\n        print(10)\n    elif n > 3:\n        s = pow(3, n - 3) * 8 * (n - 2)\n        s += s // 4\n        print(s)\n    else:\n        print(0)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        a = 3 ** (n - 3)\n        b = n - 2\n        ans = 10 * b * a\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        a = 3 ** (n - 3)\n        b = n - 2\n        ans = 10 * b * a\n        print(ans)", "read_int = lambda : int(input().strip())\nread_str = lambda : input().strip()\nread_str_arr = lambda : input().strip().split()\nread_int_arr = lambda : [int(x) for x in input().strip().split()]\n\ndef solve():\n    n = read_int()\n    if n < 3:\n        print(0)\n        return\n    ans = 10 * (n - 2) * 3 ** (n - 3)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "read_int = lambda : int(input().strip())\nread_str = lambda : input().strip()\nread_str_arr = lambda : input().strip().split()\nread_int_arr = lambda : [int(x) for x in input().strip().split()]\n\ndef count_ext(seq):\n    count = 0\n    for i in range(1, len(seq) - 1):\n        if seq[i] > seq[i - 1] and seq[i] > seq[i + 1] or (seq[i] < seq[i - 1] and seq[i] < seq[i + 1]):\n            count += 1\n    return count\n\ndef solve():\n    n = read_int()\n    if n < 3:\n        print(0)\n        return\n    seq = [0] * n\n    ans = 0\n    while len(seq) > 0:\n        ans += count_ext(seq)\n        while len(seq) > 0 and seq[-1] == 2:\n            seq.pop()\n        if len(seq) > 0:\n            seq[-1] += 1\n            while len(seq) < n:\n                seq.append(0)\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "def solve(lst):\n    if len(lst) == n:\n        ans = 0\n        for i in range(1, n - 1):\n            if lst[i - 1] > lst[i] < lst[i + 1] or lst[i - 1] < lst[i] > lst[i + 1]:\n                ans += 1\n        return ans\n    ans = 0\n    for i in range(3):\n        lst.append(i)\n        ans += solve(lst)\n        lst.pop()\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve([]))", "def solve(lst):\n    if len(lst) == n:\n        ans = 0\n        for i in range(1, n - 1):\n            if lst[i - 1] > lst[i] < lst[i + 1] or lst[i - 1] < lst[i] > lst[i + 1]:\n                ans += 1\n        return ans\n    ans = 0\n    for i in range(3):\n        lst.append(i)\n        ans += solve(lst)\n        lst.pop()\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve([]))", "def solve(lst, length):\n    if length == n:\n        ans = 0\n        for i in range(1, n - 1):\n            if lst[i - 1] > lst[i] < lst[i + 1] or lst[i - 1] < lst[i] > lst[i + 1]:\n                ans += 1\n        return ans\n    ans = 0\n    for i in range(3):\n        ans += solve(lst + [i], length + 1)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve([], 0))", "from bisect import bisect_left, bisect_right\nfrom heapq import heapify, heappush, heappop\nfrom cmath import pi\nfrom distutils import extension\nimport sys\nimport math\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\n\ndef count(ans, n, st=''):\n    if len(st) == n:\n        for l in range(1, n - 1):\n            if int(st[l - 1]) < int(st[l]) > int(st[l + 1]) or int(st[l - 1]) > int(st[l]) < int(st[l + 1]):\n                ans[0] += 1\n        return\n    for k in ['0', '1', '2']:\n        count(ans, n, st + k)\nfor l in range(ii()):\n    n = ii()\n    if n <= 2:\n        print(0)\n        continue\n    ans = [0]\n    count(ans, n)\n    print(ans[0])", "from bisect import bisect_left, bisect_right\nfrom heapq import heapify, heappush, heappop\nfrom cmath import pi\nfrom distutils import extension\nimport sys\nimport math\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\n\ndef count(ans, n, st=''):\n    if len(st) == n:\n        for l in range(1, n - 1):\n            if int(st[l - 1]) < int(st[l]) > int(st[l + 1]) or int(st[l - 1]) > int(st[l]) < int(st[l + 1]):\n                ans[0] += 1\n        return\n    for k in ['0', '1', '2']:\n        count(ans, n, st + k)\nfor l in range(ii()):\n    n = ii()\n    if n <= 2:\n        print(0)\n        continue\n    ans = [0]\n    count(ans, n)\n    print(ans[0])", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    res = []\n\n    def rec(selected, ind):\n        if ind == N:\n            res.append(selected.copy())\n            return\n        for i in (0, 1, 2):\n            selected.append(i)\n            rec(selected, ind + 1)\n            selected.pop()\n        return\n    rec([], 0)\n    ans = 0\n    for r in res:\n        for j in range(1, N - 1):\n            if r[j - 1] < r[j] and r[j] > r[j + 1] or (r[j - 1] > r[j] and r[j] < r[j + 1]):\n                ans += 1\n    print(ans)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    for _ in tr():\n        n = nl()\n        print(max(0, (n - 2) * 10 * 3 ** (n - 3)))\nmain()", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a >= 3:\n        print(10 * (a - 2) * 3 ** (a - 3))\n    else:\n        print(0)", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a >= 3:\n        print(10 * (a - 2) * 3 ** (a - 3))\n    else:\n        print(0)", "def n(k):\n    if k < 3:\n        return 0\n    else:\n        return 10 * 3 ** (k - 3) * (k - 2)\ntest_cases = int(input())\nwhile test_cases != 0:\n    data = int(input())\n    print(n(data))\n    test_cases -= 1", "def n(k):\n    if k < 3:\n        return 0\n    else:\n        return 10 * 3 ** (k - 3) * (k - 2)\ntest_cases = int(input())\nwhile test_cases != 0:\n    data = int(input())\n    print(n(data))\n    test_cases -= 1", "a = int(input())\nfor i in range(a):\n    n = int(input())\n    s = 0\n    if n == 3:\n        print(10)\n    elif n > 3:\n        s = pow(3, n - 3) * 8 * (n - 2)\n        s += s // 4\n        print(s)\n    else:\n        print(0)", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a >= 3:\n        print(10 * (a - 2) * 3 ** (a - 3))\n    else:\n        print(0)", "n = int(input())\nfor i in range(n):\n    a = int(input())\n    if a >= 3:\n        print(10 * (a - 2) * 3 ** (a - 3))\n    else:\n        print(0)", "for _ in range(int(input())):\n    N = int(input())\n    print(10 * (N - 2) * 3 ** (N - 3) if N >= 3 else 0)", "for _ in range(int(input())):\n    N = int(input())\n    print(10 * (N - 2) * 3 ** (N - 3) if N >= 3 else 0)", "for i in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for i in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "def FindNumOfPeaks(ArrayList, ArraySize):\n    NumOfPeaks = 0\n    for i in range(1, ArraySize - 1):\n        if ArrayList[i] > ArrayList[i + 1] and ArrayList[i] > ArrayList[i - 1] or (ArrayList[i] < ArrayList[i + 1] and ArrayList[i] < ArrayList[i - 1]):\n            NumOfPeaks = NumOfPeaks + 1\n    return NumOfPeaks\nTotalTestCases = int(input())\nfor i in range(TotalTestCases):\n    ArraySize = int(input())\n    TotalPeaks = 0\n    if ArraySize > 2:\n        ArrayList = [0] * ArraySize\n        for i in range(ArraySize):\n            ArrayList[i] = 0\n        for i in range(pow(3, ArraySize)):\n            TotalPeaks = TotalPeaks + FindNumOfPeaks(ArrayList, ArraySize)\n            ArrayList[0] = ArrayList[0] + 1\n            if ArrayList[0] == 3:\n                for i in range(ArraySize - 1):\n                    if ArrayList[i] == 3:\n                        ArrayList[i] = 0\n                        ArrayList[i + 1] = ArrayList[i + 1] + 1\n    print(TotalPeaks)", "def FindNumOfPeaks(ArrayList, ArraySize):\n    NumOfPeaks = 0\n    for i in range(1, ArraySize - 1):\n        if ArrayList[i] > ArrayList[i + 1] and ArrayList[i] > ArrayList[i - 1] or (ArrayList[i] < ArrayList[i + 1] and ArrayList[i] < ArrayList[i - 1]):\n            NumOfPeaks = NumOfPeaks + 1\n    return NumOfPeaks\nTotalTestCases = int(input())\nfor i in range(TotalTestCases):\n    ArraySize = int(input())\n    TotalPeaks = 0\n    if ArraySize > 2:\n        ArrayList = [0] * ArraySize\n        for i in range(ArraySize):\n            ArrayList[i] = 0\n        for i in range(pow(3, ArraySize)):\n            TotalPeaks = TotalPeaks + FindNumOfPeaks(ArrayList, ArraySize)\n            ArrayList[0] = ArrayList[0] + 1\n            if ArrayList[0] == 3:\n                for i in range(ArraySize - 1):\n                    if ArrayList[i] == 3:\n                        ArrayList[i] = 0\n                        ArrayList[i + 1] = ArrayList[i + 1] + 1\n    print(TotalPeaks)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        if n < 3:\n            print(0)\n        else:\n            print(10 * (n - 2) * 3 ** (n - 3))\nexcept:\n    pass", "t = int(input())\narr = []\nfor i in range(t):\n    arr.append(int(input()))\nn = 0\nfor i in range(t):\n    n = arr[i]\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for T in range(int(input())):\n    N = int(input())\n    sum = 0\n    if N == 3:\n        print(10)\n    elif N > 3:\n        sum = pow(3, N - 3) * 8 * (N - 2)\n        sum += sum // 4\n        print(sum)\n    else:\n        print(0)", "t = int(input())\nfor i in range(0, t):\n    k = int(input())\n    if k < 3:\n        print(0)\n    else:\n        k2 = int(10 * (k - 2) * 3 ** (k - 3))\n        print(k2)", "t = int(input())\nfor i in range(0, t):\n    k = int(input())\n    if k < 3:\n        print(0)\n    else:\n        k2 = int(10 * (k - 2) * 3 ** (k - 3))\n        print(k2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = 0\n    if n > 2:\n        c = 10 * (n - 2) * 3 ** (n - 3)\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(0)\n    else:\n        print(3 ** (n - 3) * 10 * (n - 2))", "for _ in range(int(input())):\n    x = int(input())\n    if x > 2:\n        temp = 3 ** (x - 3)\n        print(10 * (x - 2) * temp)\n    else:\n        print(0)", "x = int(input())\nfor l in range(0, x):\n    k = int(input())\n    h = 3 ** (k - 3)\n    if k > 2:\n        print(10 * (k - 2) * h)\n    else:\n        print(0)", "x = int(input())\nfor l in range(0, x):\n    k = int(input())\n    h = 3 ** (k - 3)\n    if k > 2:\n        print(10 * (k - 2) * h)\n    else:\n        print(0)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    count = 0\n    if n == 3:\n        print('10')\n    elif n > 3:\n        count = pow(3, n - 3) * 8 * (n - 2)\n        count += count // 4\n        print(count)\n    else:\n        print('0')", "for _ in range(int(input())):\n    n = int(input())\n    c = 0\n    if n > 2:\n        c = 10 * (n - 2) * 3 ** (n - 3)\n    print(c)", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n < 3:\n            print(0)\n        else:\n            print(10 * (n - 2) * 3 ** (n - 3))\nexcept:\n    pass", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n < 3:\n            print(0)\n        else:\n            print(10 * (n - 2) * 3 ** (n - 3))\nexcept:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    c = 0\n    if n > 2:\n        c = 10 * (n - 2) * 3 ** (n - 3)\n    print(c)", "for i in range(int(input())):\n    n = int(input())\n    sum_e = 0\n    if n > 2:\n        sum_e = 10 * (n - 2) * 3 ** (n - 3)\n    print(sum_e)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for i in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print('0')\n    else:\n        p = 10 * (n - 2) * 3 ** (n - 3)\n        print(p)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print('0')\n    else:\n        x = 10 * (n - 2) * 3 ** (n - 3)\n        print(x)", "def calA(n):\n    if n <= 3:\n        return 0\n    n -= 3\n    return 10 * 3 ** n\n\ndef func(n):\n    if n < 3:\n        return 0\n    if n == 3:\n        return 10\n    return func(n - 1) * 3 + calA(n)\nt = int(input())\na = []\nwhile t:\n    t -= 1\n    a.append(int(input()))\nfor i in a:\n    print(func(i))", "for _ in range(int(input())):\n    n = int(input())\n    print(10 * (n - 2) * pow(3, n - 3) if n > 2 else 0)", "n = int(input())\nfor i in range(n):\n    n1 = int(input())\n    res = 10 * (n1 - 2) * 3 ** (n1 - 3)\n    if n1 < 3:\n        print('0')\n    else:\n        print(res)", "for t in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for i in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print('0')\n    else:\n        print(10 * (n - 2) * pow(3, n - 3))", "for i in range(int(input())):\n    num = int(input())\n    if num < 3:\n        print('0')\n    else:\n        print(10 * (num - 2) * pow(3, num - 3))", "for k in range(int(input())):\n    a = int(input())\n    if a <= 2:\n        print(0)\n    else:\n        print(10 * 3 ** (a - 3) * (a - 2))", "from sys import stdin\na = [0, 0, 10, 60, 270, 1080, 4050, 14580, 51030, 174960]\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    print(a[n - 1])", "for i in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        if n < 3:\n            print(0)\n        else:\n            print(10 * (n - 2) * 3 ** (n - 3))\nexcept:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for test_cases in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "from multiprocessing.connection import answer_challenge\nfor _ in range(int(input())):\n    n = int(input())\n    if n >= 3:\n        ans = (n - 2) * 10 * 3 ** (n - 3)\n        print(ans)\n    else:\n        print(0)", "t = int(input())\nfor c in range(t):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * pow(3, n - 3) * (n - 2))", "t = int(input())\nfor c in range(t):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * pow(3, n - 3) * (n - 2))", "for i in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    N = int(input())\n    print(10 * (N - 2) * pow(3, N - 3) if N > 2 else 0)", "t = int(input())\n\ndef solve(x):\n\n    def peak(ar):\n        cnt = 0\n        for i in range(1, len(ar) - 1):\n            (a, b, c) = (ar[i - 1], ar[i], ar[i + 1])\n            if b > a and b > c or (b < a and b < c):\n                cnt += 1\n        return cnt\n\n    def lsts(tmp, n, ans):\n        if len(tmp) == n:\n            ans.append(tmp)\n            return\n        for i in range(3):\n            lsts(tmp + [i], n, ans)\n    out = []\n    lsts([], x, out)\n    ans = 0\n    for i in out:\n        ans += peak(i)\n    return ans\nfor i in range(t):\n    y = int(input())\n    print(solve(y))", "for T in range(int(input())):\n    N = int(input())\n    if N < 3:\n        print(0)\n    else:\n        print(10 * (N - 2) * 3 ** (N - 3))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 3:\n        print('0')\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    r = 0\n    if n > 2:\n        r = 10 * ((n - 2) * 3 ** (n - 3))\n    print(int(r))", "def sum():\n    global s\n    for j in range(1, n - 1):\n        if l[j] > l[j + 1] and l[j] > l[j - 1] or (l[j] < l[j + 1] and l[j] < l[j - 1]):\n            s += 1\n\ndef iterate(x, y):\n    for i in range(3):\n        l[x] = i\n        if y == 1:\n            sum()\n        else:\n            iterate(x + 1, y - 1)\nfor _ in range(int(input())):\n    global s\n    s = 0\n    l = [-1]\n    n = int(input())\n    l = l * n\n    iterate(0, n)\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        a = n - 2\n        print(10 * a * 3 ** (a - 1))", "def backtracking(arr, latest: int, diff: int, summ: int, n: int):\n    if len(arr) == 1:\n        return sum([backtracking(arr + [x], x, x - latest, summ, n) for x in range(0, 3)])\n    if len(arr) >= n:\n        return summ\n    nextsum = 0\n    for i in range(0, 3):\n        if diff * (latest - i) > 0:\n            nextsum += backtracking(arr + [i], i, i - latest, summ + 1, n)\n        else:\n            nextsum += backtracking(arr + [i], i, i - latest, summ, n)\n    return nextsum\n\ndef solve():\n    t = int(input())\n    for _ in range(0, t):\n        n = int(input())\n        print(sum([backtracking([x], x, 0, 0, n) for x in range(0, 3)]))\nsolve()", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    if n <= 2:\n        print(0)\n    else:\n        ans = 10 * (n - 2) * pow(3, n - 3)\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    if n >= 3:\n        print(10 * (n - 2) * 3 ** (n - 3))\n    else:\n        print('0')", "N = int(input())\narr = []\nfor i in range(N):\n    arr.append(int(input()))\nfor item in arr:\n    if item < 3:\n        print(0)\n    else:\n        val = 10 * (item - 2) * 3 ** (item - 3)\n        print(val)", "for test in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "for _ in range(int(input())):\n    n = int(input())\n    if n <= 10 and n > 2:\n        print(10 * (n - 2) * 3 ** (n - 3))\n    else:\n        print(0)", "for inputs in range(int(input())):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(10 * (n - 2) * 3 ** (n - 3))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(0)\n    else:\n        arr = [0 for i in range(n)]\n        sum = 0\n        for i in range(3 ** n):\n            temp = i\n            for j in range(n):\n                arr[j] = temp % 3\n                temp = int(temp / 3)\n            cnt = 0\n            for j in range(1, n - 1):\n                if arr[j] > arr[j - 1] and arr[j] > arr[j + 1] or (arr[j] < arr[j - 1] and arr[j] < arr[j + 1]):\n                    cnt += 1\n            sum += cnt\n        print(sum)", "import sys\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_string():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_print_int(x):\n    sys.stdout.write(str(x) + '\\n')\n\ndef get_print(x):\n    sys.stdout.write(x + '\\n')\n\ndef get_print_int_same(x):\n    sys.stdout.write(str(x) + ' ')\n\ndef get_print_same(x):\n    sys.stdout.write(x + ' ')\nfrom sys import maxsize\n\ndef subHelper(arr):\n    n = len(arr)\n    ans = 0\n    for i in range(1, n - 1, 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1] or (arr[i] < arr[i - 1] and arr[i] < arr[i + 1]):\n            ans += 1\n    return ans\n\ndef helper(arr, num, ans):\n    if num == 0:\n        ans[0] += subHelper(arr)\n        return\n    elif num > 0:\n        arr.append(0)\n        helper(arr, num - 1, ans)\n        arr.pop()\n        arr.append(1)\n        helper(arr, num - 1, ans)\n        arr.pop()\n        arr.append(2)\n        helper(arr, num - 1, ans)\n        arr.pop()\n\ndef solve():\n    for _ in range(get_int()):\n        n = get_int()\n        arr = []\n        ans = [0]\n        helper(arr, n, ans)\n        get_print_int(ans[0])\nsolve()"]