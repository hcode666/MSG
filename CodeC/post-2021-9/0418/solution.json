["t = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    A = [int(x) for x in input().split()]\n    B = []\n    m = max(A)\n    M = 2 * n\n    count = 0\n    if min(A) != 1:\n        count = 1\n        B.append(1)\n        A.append(1)\n        n += 1\n    sum1 = 0\n    sum2 = 0\n    A.sort()\n    for j in range(n - 1):\n        d = A[j + 1] - A[j]\n        if A[j + 1] - A[j] > 1:\n            for l in range(d - 1):\n                B.append(A[j] + 1 + l)\n                count += 1\n                if count == k:\n                    break\n                    break\n        if count == k:\n            break\n    if count < k:\n        for j in range(k - count):\n            B.append(m + 1 + j)\n    for j in range(k):\n        sum1 += m - B[j]\n        sum2 += M - B[j]\n    sum2 -= M - B[k - 1]\n    print(max(sum1, sum2))", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    A = [int(x) for x in input().split()]\n    B = []\n    m = max(A)\n    M = 2 * n\n    count = 0\n    if min(A) != 1:\n        count = 1\n        B.append(1)\n        A.append(1)\n        n += 1\n    sum1 = 0\n    sum2 = 0\n    A.sort()\n    for j in range(n - 1):\n        d = A[j + 1] - A[j]\n        if A[j + 1] - A[j] > 1:\n            for l in range(d - 1):\n                B.append(A[j] + 1 + l)\n                count += 1\n                if count == k:\n                    break\n                    break\n        if count == k:\n            break\n    if count < k:\n        for j in range(k - count):\n            B.append(m + 1 + j)\n    for j in range(k):\n        sum1 += m - B[j]\n        sum2 += M - B[j]\n    sum2 -= M - B[k - 1]\n    print(max(sum1, sum2))", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    assert len(a) == n\n    a.sort()\n    sum_holes = 0\n    sum_holes_2 = -1\n    last_elt = 0\n    k_left = k - 1\n    for i in range(len(a)):\n        elt = a[i]\n        holes = min(k_left, elt - last_elt - 1)\n        sum_holes += last_elt * holes + holes * (holes + 1) // 2\n        k_left -= holes\n        if k_left == 0:\n            if holes < elt - last_elt - 1:\n                sum_holes_2 = sum_holes + (last_elt + holes + 1)\n            else:\n                j = i\n                while j < n - 1 and a[j + 1] == a[j] + 1:\n                    j += 1\n                if j != n - 1:\n                    sum_holes_2 = sum_holes + (a[j] + 1)\n                else:\n                    sum_holes_2 = -1\n            break\n        last_elt = elt\n    if a[-1] == 2 * n:\n        sum_holes = -1\n    else:\n        sum_holes += a[-1] * k_left + k_left * (k_left + 1) // 2\n    if sum_holes != -1:\n        sum_holes = (k - 1) * (2 * n) - sum_holes\n    if sum_holes_2 != -1:\n        sum_holes_2 = k * a[-1] - sum_holes_2\n    print(max(sum_holes, sum_holes_2))", "import numpy as np\ntestcase = int(input())\nfor _ in range(testcase):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "import numpy as np\ntestcase = int(input())\nfor _ in range(testcase):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "import numpy as np\ntestcase = int(input())\nfor _ in range(testcase):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "import numpy as np\ntestcase = int(input())\nfor _ in range(testcase):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "import numpy as np\ntestcase = int(input())\nfor _ in range(testcase):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "import numpy as np\ntestcase = int(input())\nfor _ in range(testcase):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "import numpy as np\ntestcase = int(input())\nfor _ in range(testcase):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "import numpy as np\ntestcase = int(input())\nfor _ in range(testcase):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "def distinct_numbers(arr, N, K):\n    cur = [0 for _ in range(2 * N + 1)]\n    missing = []\n    for val in arr:\n        cur[val] = 1\n    for i in range(1, 2 * N + 1):\n        if cur[i] == 0:\n            missing.append(i)\n    max_val = max(arr)\n    first = 2 * N * (K - 1) - sum(missing[:K - 1])\n    second = max_val * K - sum(missing[:K])\n    print(max(first, second))\nT = int(input())\nfor _ in range(T):\n    (N, K) = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    distinct_numbers(arr, N, K)", "def calc(start, times):\n    (i, ans) = (start, 0)\n    while times != 0:\n        if i not in st:\n            ans += mx - i\n            times -= 1\n        i += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (mx, st) = (max(arr), set(arr))\n    if mx == 2 * n:\n        print(calc(1, k))\n    else:\n        mx = 2 * n\n        ans1 = calc(1, k - 1)\n        (i, ans2) = (1, 0)\n        mx = max(arr)\n        while k != 0:\n            if i not in st:\n                if i < mx:\n                    ans2 += mx - i\n                    k -= 1\n                elif i == mx + 1:\n                    mx = 2 * n\n                    k -= 1\n                    ans2 += calc(mx + 2, k)\n                    break\n            i += 1\n        print(max(ans1, ans2))", "import numpy as np\ntestcases = int(input())\nfor _ in range(testcases):\n    score = 0\n    (N, K) = map(lambda x: int(x), input().split(' '))\n    A = set(map(lambda x: int(x), input().split(' ')))\n    maxval = N * 2\n    full_list = {i + 1 for i in range(N * 2)}\n    missing_values = sorted(list(A ^ full_list))\n    print(max([(K - 1) * maxval - sum(missing_values[0:K - 1]), K * max(A) - sum(missing_values[0:K])]))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cur = [0 for _ in range(2 * n + 1)]\n    missing = []\n    for val in arr:\n        cur[val] = 1\n    for i in range(1, 2 * n + 1):\n        if cur[i] == 0:\n            missing.append(i)\n    first = 2 * n * (k - 1) - sum(missing[:k - 1])\n    second = max(arr) * k - sum(missing[:k])\n    print(max(first, second))", "def distinct_numbers(arr, N, K):\n    cur = [0 for _ in range(2 * N + 1)]\n    missing = []\n    for val in arr:\n        cur[val] = 1\n    for i in range(1, 2 * N + 1):\n        if cur[i] == 0:\n            missing.append(i)\n    max_val = max(arr)\n    first = 2 * N * (K - 1) - sum(missing[:K - 1])\n    second = max_val * K - sum(missing[:K])\n    print(max(first, second))\nT = int(input())\nfor _ in range(T):\n    (N, K) = tuple(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    distinct_numbers(arr, N, K)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    mar = [0] * (2 * n + 1)\n    b = []\n    for ele in array:\n        mar[ele] = 1\n    for i in range(1, 2 * n + 1):\n        if mar[i] == 0:\n            b.append(i)\n    mxm = max(array)\n    an = int(-10 ** 13)\n    an = max(an, (k - 1) * (2 * n) - sum(b[0:k - 1]))\n    an = max(an, k * mxm - sum(b[0:k]))\n    print(an)", "h = int(input())\nfor _ in range(h):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = n * 2\n    mx = max(l)\n    ansa = 0\n    ansb = 0\n    f = [0] * (m + 1)\n    for i in range(n):\n        f[l[i]] = 1\n    for i in range(1, 2 * n):\n        if f[i] == 1:\n            continue\n        else:\n            ansa += mx - i\n            if k != 1:\n                ansb += 2 * n - i\n                k -= 1\n            else:\n                break\n    print(max(ansa, ansb))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mark = [0] * (2 * n + 1)\n    b = []\n    for elem in arr:\n        mark[elem] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            b.append(i)\n    mx = max(arr)\n    ans = int(-10 ** 13)\n    ans = max(ans, (k - 1) * (2 * n) - sum(b[0:k - 1]))\n    ans = max(ans, k * mx - sum(b[0:k]))\n    print(ans)", "numInp = lambda : int(input())\nlstImp = lambda : list(map(int, input().split()))\nstrImp = lambda : input()\nspacedStrImp = lambda : list(input())\nseperateImp = lambda : map(int, input().split())\nfor i in range(int(input())):\n    (lenOfLst, numOfMoves) = seperateImp()\n    lst = lstImp()\n    limit = lenOfLst * 2\n    maxValue = max(lst)\n    possibleElements = [0] * (limit + 1)\n    possibleOutput1 = 0\n    possibleOutput2 = 0\n    for i in lst:\n        possibleElements[i] += 1\n    for i in range(1, limit):\n        if possibleElements[i] != 1:\n            possibleOutput1 += maxValue - i\n            if numOfMoves == 1:\n                break\n            else:\n                possibleOutput2 += limit - i\n                numOfMoves -= 1\n    print(max(possibleOutput1, possibleOutput2))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = n * 2\n    mx = max(l)\n    ansa = 0\n    ansb = 0\n    f = [0] * (m + 1)\n    for i in range(n):\n        f[l[i]] = 1\n    for i in range(1, 2 * n):\n        if f[i] == 1:\n            continue\n        else:\n            ansa += mx - i\n            if k != 1:\n                ansb += 2 * n - i\n                k -= 1\n            else:\n                break\n    print(max(ansa, ansb))", "from functools import reduce\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split(' '))\n    A = list(map(int, input().split(' ')))\n\n    def solve():\n        max_a = reduce(max, A)\n        elms = set(A)\n        ap1 = 0\n        ap2 = 0\n        moves = 0\n        idx = 0\n        while moves < K:\n            idx += 1\n            if idx in elms:\n                continue\n            if K - moves > 1:\n                ap1 += 2 * N - idx\n            ap2 += max_a - idx\n            moves += 1\n        return max(ap1, ap2)\n    print(solve())", "def solve():\n    (N, K) = map(int, input().split())\n    numbers = sorted(list(map(int, input().split())))\n    sumOfAbsent = 0\n    lastAbsent = 0\n    lastNumber = 0\n    oldK = K\n    for number in numbers:\n        if number - lastNumber - 1 < K:\n            K -= number - lastNumber - 1\n            sumOfAbsent += int((lastNumber + 1 + number - 1) / 2 * (number - lastNumber - 1))\n            lastNumber = number\n        else:\n            sumOfAbsent += int((lastNumber + 1 + lastNumber + K) / 2 * K)\n            lastAbsent = lastNumber + K\n            K = 0\n            break\n    if K > 0:\n        sumOfAbsent += int(K * (lastNumber + 1 + lastNumber + K) / 2)\n        lastAbsent = lastNumber + K\n    optionOne = numbers[-1] * oldK - sumOfAbsent\n    optionTwo = 2 * N * (oldK - 1) - (sumOfAbsent - lastAbsent)\n    print(max(optionOne, optionTwo))\nfor i in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    c = a\n    d = k\n    t = {}\n    for i in a:\n        t[i] = i\n    i = 1\n    ans1 = 0\n    maxi1 = max(a)\n    while k != 0:\n        if i in t:\n            i += 1\n        else:\n            a.append(i)\n            ans1 += maxi1 - i\n            k -= 1\n            i += 1\n    j = 1\n    t[2 * n] = 2 * n\n    maxi2 = 2 * n\n    d -= 1\n    ans2 = 0\n    while d != 0:\n        if j in t:\n            j += 1\n        else:\n            ans2 += maxi2 - j\n            d -= 1\n            j += 1\n    print(max(ans1, ans2))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mark = [0] * (2 * n + 1)\n    a = []\n    for x in arr:\n        mark[x] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            a.append(i)\n    m = max(arr)\n    ans = int(-10 ** 13)\n    ans = max(ans, (k - 1) * (2 * n) - sum(a[0:k - 1]))\n    ans = max(ans, k * m - sum(a[0:k]))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mark = [0] * (2 * n + 1)\n    a = []\n    for x in arr:\n        mark[x] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            a.append(i)\n    m = max(arr)\n    ans = int(-10 ** 13)\n    ans = max(ans, (k - 1) * (2 * n) - sum(a[0:k - 1]))\n    ans = max(ans, k * m - sum(a[0:k]))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mark = [0] * (2 * n + 1)\n    a = []\n    for x in arr:\n        mark[x] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            a.append(i)\n    m = max(arr)\n    ans = int(-10 ** 13)\n    ans = max(ans, (k - 1) * (2 * n) - sum(a[0:k - 1]))\n    ans = max(ans, k * m - sum(a[0:k]))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mark = [0] * (2 * n + 1)\n    a = []\n    for x in arr:\n        mark[x] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            a.append(i)\n    m = max(arr)\n    ans = int(-10 ** 13)\n    ans = max(ans, (k - 1) * (2 * n) - sum(a[0:k - 1]))\n    ans = max(ans, k * m - sum(a[0:k]))\n    print(ans)", "def mgc(arr, k, n):\n    set_arr = set(arr)\n    missing = []\n    for i in range(1, 2 * n + 1):\n        if i not in set_arr:\n            missing.append(i)\n    (ans1, ans2) = (2 * n * (k - 1) - sum(missing[:k - 1]), max(arr) * k - sum(missing[:k]))\n    return max(ans1, ans2)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(mgc(arr, k, n))", "def mgc(arr, k, n):\n    set_arr = set(arr)\n    missing = []\n    for i in range(1, 2 * n + 1):\n        if i not in set_arr:\n            missing.append(i)\n    (ans1, ans2) = (2 * n * (k - 1) - sum(missing[:k - 1]), max(arr) * k - sum(missing[:k]))\n    return max(ans1, ans2)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(mgc(arr, k, n))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\nans = []\nfor _ in range(inp()):\n    (N, K) = inlt()\n    A = invr()\n    N2 = N * 2\n    X = []\n    Ac = set(A)\n    mx = max(Ac)\n    for x in range(1, N2 + 1):\n        if x in Ac:\n            continue\n        X.append(x)\n    for i in range(K):\n        if X[i] > mx:\n            break\n    else:\n        i += 1\n    a1 = mx * i - sum(X[:i])\n    a2 = N2 * (K - 1) - sum(X[:K - 1])\n    ans.append(max(a1, a2))\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\nans = []\nfor _ in range(inp()):\n    (N, K) = inlt()\n    A = invr()\n    N2 = N * 2\n    X = set(list(range(1, N2 + 1)))\n    mx = 0\n    for a in A:\n        X.remove(a)\n        mx = max(mx, a)\n    X = sorted(X)\n    for i in range(K):\n        if X[i] > mx:\n            break\n    else:\n        i += 1\n    a1 = mx * i - sum(X[:i])\n    a2 = N2 * (K - 1) - sum(X[:K - 1])\n    ans.append(max(a1, a2))\noutplt(ans)", "def mgc(arr, k, n):\n    set_arr = set(arr)\n    missing = []\n    for i in range(1, 2 * n + 1):\n        if i not in set_arr:\n            missing.append(i)\n    (ans1, ans2) = (2 * n * (k - 1) - sum(missing[:k - 1]), max(arr) * k - sum(missing[:k]))\n    return max(ans1, ans2)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(mgc(arr, k, n))", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\nans = []\nfor _ in range(inp()):\n    (N, K) = inlt()\n    A = set(invr())\n    (mx, N2) = (max(A), N * 2)\n    X = sorted(set(list(range(1, N2 + 1))) - A)\n    (an1, an2) = (0, 0)\n    for k in range(K - 1):\n        if mx > X[k]:\n            an1 += mx - X[k]\n        an2 += N2 - X[k]\n    if mx > X[K - 1]:\n        an1 += mx - X[K - 1]\n    ans.append(max(an1, an2))\noutplt(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mark = [0] * (2 * n + 1)\n    b = []\n    for x in a:\n        mark[x] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            b.append(i)\n    mx = max(a)\n    ans = int(-10 ** 13)\n    ans = max(ans, (k - 1) * (2 * n) - sum(b[0:k - 1]))\n    ans = max(ans, k * mx - sum(b[0:k]))\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = set(map(int, input().split()))\n    m = sorted(set(range(1, 1 + 2 * n)) - a)\n    strategy1 = max(a) * k - sum(m[:k])\n    strategy2 = 2 * n * (k - 1) - sum(m[:k - 1])\n    print(max(strategy1, strategy2))", "T = int(input())\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    max_A = max(A)\n    not_A = [0] * (2 * N + 1)\n    b = []\n    for i in A:\n        not_A[i] = 1\n    for i in range(1, len(not_A)):\n        if not_A[i] == 0:\n            b.append(i)\n    s1 = K * max_A - sum(b[:K])\n    s2 = (K - 1) * 2 * N - sum(b[:K - 1])\n    if s1 > s2:\n        print(s1)\n    else:\n        print(s2)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    b = []\n    a = [0] * (N * 2 + 1)\n    for i in A:\n        a[i] = i\n    for i in range(1, N * 2 + 1):\n        if a[i] == 0:\n            b.append(i)\n    l = K * max(A) - sum(b[:K])\n    li = (K - 1) * 2 * N - sum(b[:K - 1])\n    if l > li:\n        print(l)\n    else:\n        print(li)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    nl = list(map(int, input().split()))\n    M = max(nl)\n    L = []\n    m = [0] * (2 * n + 1)\n    for j in nl:\n        m[j] = 1\n    for j in range(1, 2 * n + 1):\n        if m[j] == 0:\n            L.append(j)\n    p = k * M - sum(L[:k])\n    q = (k - 1) * 2 * n - sum(L[:k - 1])\n    print(max(p, q))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * (n * 2 + 1)\n    c = []\n    for i in a:\n        b[i] = 1\n    for i in range(1, n * 2 + 1):\n        if b[i] == 0:\n            c.append(i)\n    s1 = k * max(a) - sum(c[:k])\n    s2 = (k - 1) * 2 * n - sum(c[:k - 1])\n    if s1 > s2:\n        print(s1)\n    else:\n        print(s2)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    z = max(a)\n    not_a = []\n    d = [0] * (2 * n + 1)\n    for j in a:\n        d[j] = 1\n    for j in range(1, 2 * n + 1):\n        if d[j] == 0:\n            not_a.append(j)\n    p = k * z - sum(not_a[:k])\n    q = (k - 1) * 2 * n - sum(not_a[:k - 1])\n    print(max(p, q))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = a[:]\n    m = [0] * (n * 2 + 1)\n    for i in a:\n        m[i] = 1\n    l = []\n    for i in range(1, 2 * n + 1):\n        if m[i] == 0:\n            l.append(i)\n    max_a = max(a)\n    t1 = k * max_a - sum(l[:k])\n    t2 = (k - 1) * 2 * n - sum(l[:k - 1])\n    print(max(t1, t2))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    list1 = list(map(int, input().split()))\n    li = [0] * (n * 2 + 1)\n    new = []\n    for i in list1:\n        li[i] = 1\n    for i in range(1, n * 2 + 1):\n        if li[i] == 0:\n            new.append(i)\n    l = k * max(list1) - sum(new[:k])\n    l1 = (k - 1) * 2 * n - sum(new[:k - 1])\n    if l > l1:\n        print(l)\n    else:\n        print(l1)", "for t in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    C = 2 * N\n    (B, D) = ([0] * (C + 1), [])\n    for i in A:\n        B[i] = 1\n    for i in range(1, C + 1):\n        if B[i] == 0:\n            D.append(i)\n    S1 = max(A) * K - sum(D[:K])\n    S2 = (K - 1) * C - sum(D[:K - 1])\n    print(max(S1, S2))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = a[:]\n    m = [0] * (n * 2 + 1)\n    for i in a:\n        m[i] = 1\n    l = []\n    for i in range(1, 2 * n + 1):\n        if m[i] == 0:\n            l.append(i)\n    max_a = max(a)\n    t1 = k * max_a - sum(l[:k])\n    t2 = (k - 1) * 2 * n - sum(l[:k - 1])\n    print(max(t1, t2))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    z = max(a)\n    not_a = []\n    d = [0] * (2 * n + 1)\n    for j in a:\n        d[j] = 1\n    for j in range(1, 2 * n + 1):\n        if d[j] == 0:\n            not_a.append(j)\n    p = k * z - sum(not_a[:k])\n    q = (k - 1) * 2 * n - sum(not_a[:k - 1])\n    print(max(p, q))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    maxElem = max(l)\n    notL = []\n    m = [0] * (2 * n + 1)\n    for i in l:\n        m[i] = 1\n    for i in range(1, 2 * n + 1):\n        if m[i] == 0:\n            notL.append(i)\n    s1 = k * maxElem - sum(notL[:k])\n    s2 = (k - 1) * 2 * n - sum(notL[:k - 1])\n    print(max(s1, s2))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = Counter(l)\n    l2 = []\n    res = max(l)\n    tot = 0\n    tot1 = 0\n    for i in range(1, 2 * n + 1):\n        if l1[i] == 0:\n            l2.append(i)\n    for i in range(m):\n        if res > l2[i]:\n            tot += res - l2[i]\n        if i < m - 1:\n            tot1 += 2 * n - l2[i]\n    print(max(tot, tot1))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    z = Counter(l)\n    l1 = []\n    for i in range(1, 2 * a + 1):\n        if z[i] == 0:\n            l1.append(i)\n    j = k = 0\n    h = max(l)\n    for i in range(b):\n        if h > l1[i]:\n            j += h - l1[i]\n        if i < b - 1:\n            k += 2 * a - l1[i]\n    print(max(j, k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    temp = 1\n    arr.sort()\n    ans = 0\n    x = k\n    for i in range(n):\n        while k > 0:\n            if temp < arr[i]:\n                ans += temp\n                temp += 1\n                k -= 1\n            else:\n                break\n        if k == 0:\n            break\n        temp = arr[i] + 1\n    while k > 0:\n        if temp <= 2 * n:\n            ans += temp\n            temp += 1\n            k -= 1\n        else:\n            break\n    temp -= 1\n    print(max(max(arr) * x - ans, 2 * n * (x - 1) - ans + temp))", "from collections import Counter\nT = int(input())\nfor _ in range(T):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    z = Counter(l)\n    l1 = []\n    for i in range(1, 2 * a + 1):\n        if z[i] == 0:\n            l1.append(i)\n    j = k = 0\n    h = max(l)\n    for i in range(b):\n        if h > l1[i]:\n            j += h - l1[i]\n        if i < b - 1:\n            k += 2 * a - l1[i]\n    print(max(j, k))", "from collections import Counter\nT = int(input())\nfor _ in range(T):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    z = Counter(l)\n    l1 = []\n    for i in range(1, 2 * a + 1):\n        if z[i] == 0:\n            l1.append(i)\n    j = k = 0\n    h = max(l)\n    for i in range(b):\n        if h > l1[i]:\n            j += h - l1[i]\n        if i < b - 1:\n            k += 2 * a - l1[i]\n    print(max(j, k))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    z = Counter(l)\n    l1 = []\n    for i in range(1, 2 * a + 1):\n        if z[i] == 0:\n            l1.append(i)\n    j = k = 0\n    h = max(l)\n    for i in range(b):\n        if h > l1[i]:\n            j += h - l1[i]\n        if i < b - 1:\n            k += 2 * a - l1[i]\n    print(max(j, k))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    a = list(set((int(x) for x in range(1, 2 * n + 1))) - set(l))\n    a.sort()\n    print(max(-1, (k - 1) * (2 * n) - sum(a[:k - 1]), k * max(l) - sum(a[:k])))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    sl = set(l)\n    a = [int(x) for x in range(1, 2 * n + 1)]\n    sa = set(a)\n    a = list(sa - sl)\n    a.sort()\n    m = max(l)\n    b = -1\n    b = max(b, (k - 1) * (2 * n) - sum(a[:k - 1]))\n    b = max(b, k * m - sum(a[:k]))\n    print(b)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    z = Counter(l)\n    l1 = []\n    for i in range(1, 2 * a + 1):\n        if z[i] == 0:\n            l1.append(i)\n    j = k = 0\n    h = max(l)\n    for i in range(b):\n        if h > l1[i]:\n            j += h - l1[i]\n        if i < b - 1:\n            k += 2 * a - l1[i]\n    print(max(j, k))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    a = set(li)\n    b = [i for i in range(1, 2 * n + 1)]\n    b = set(b)\n    a = b.difference(a)\n    a = list(a)\n    a.sort()\n    c = 0\n    c1 = 0\n    x = max(li)\n    for i in range(k):\n        if i < k:\n            c += x - a[i]\n        if i < k - 1:\n            c1 += abs(2 * n - a[i])\n    print(max(c, c1))", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    all = set(list(range(1, 2 * N + 1)))\n    rem = list(all - set(A))\n    rem.sort()\n    met1 = (K - 1) * 2 * N - sum(rem[:K - 1])\n    met2 = K * A[-1] - sum(rem[:K]) if len(rem) >= K else 0\n    print(max(met1, met2))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    a = set(li)\n    b = [i for i in range(1, 2 * n + 1)]\n    b = set(b)\n    a = b.difference(a)\n    a = list(a)\n    a.sort()\n    c = 0\n    c1 = 0\n    x = max(li)\n    for i in range(k):\n        if i < k:\n            c += x - a[i]\n        if i < k - 1:\n            c1 += abs(2 * n - a[i])\n    print(max(c, c1))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(map(int, input().split()))\n    a = set(li)\n    b = [i for i in range(1, 2 * n + 1)]\n    b = set(b)\n    a = b.difference(a)\n    a = list(a)\n    a.sort()\n    c = 0\n    c1 = 0\n    x = max(li)\n    for i in range(k):\n        if i < k:\n            c += x - a[i]\n        if i < k - 1:\n            c1 += abs(2 * n - a[i])\n    print(max(c, c1))", "t = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().split())\n    ma = x * 2\n    lis = list(map(int, input().split()))\n    dic = [0 for i in range(ma + 1)]\n    lis_max = 0\n    for i in lis:\n        dic[i] = 1\n        lis_max = max(i, lis_max)\n    cnt = 0\n    ind = 1\n    ans = 0\n    while cnt < y:\n        if dic[ind] == 0:\n            ans += lis_max - ind\n            cnt += 1\n        ind += 1\n    ans1 = 0\n    if lis_max != ma:\n        cnt = 0\n        ind = 1\n        y -= 1\n        dic[ma] = 1\n        while cnt < y:\n            if dic[ind] == 0:\n                ans1 += ma - ind\n                cnt += 1\n            ind += 1\n    ans = max(ans, ans1)\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = Counter(a)\n    m = max(a)\n    c = []\n    for i in range(1, 2 * n + 1):\n        if b[i] == 0:\n            c.append(i)\n    total1 = 0\n    total2 = 0\n    for i in range(k):\n        if m > c[i]:\n            total1 += m - c[i]\n        if i < k - 1:\n            total2 += 2 * n - c[i]\n    print(max(total1, total2))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = [0 for _ in range(2 * n + 1)]\n    maxelem = 0\n    for ae in a:\n        l[ae] = 1\n        if ae > maxelem:\n            maxelem = ae\n    score1 = 0\n    k1 = k\n    i = 1\n    while i < 2 * n + 1 and k1 > 0:\n        if l[i] == 0:\n            if i > maxelem:\n                maxelem = i\n            score1 += maxelem - i\n            k1 -= 1\n        i += 1\n    score2 = 0\n    if l[-1] == 0:\n        maxelem = 2 * n\n        k2 = k - 1\n        i = 1\n        while i < 2 * n + 1 and k2 > 0:\n            if l[i] == 0:\n                score2 += maxelem - i\n                k2 -= 1\n            i += 1\n    print(max(score1, score2))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    z = Counter(l)\n    l1 = []\n    for i in range(1, 2 * a + 1):\n        if z[i] == 0:\n            l1.append(i)\n    j = k = 0\n    h = max(l)\n    for i in range(b):\n        if h > l1[i]:\n            j += h - l1[i]\n        if i < b - 1:\n            k += 2 * a - l1[i]\n    print(max(j, k))", "mapInput = lambda : map(int, input().split())\nlistInput = lambda : list(mapInput())\nfor _ in range(int(input())):\n    (n, k) = mapInput()\n    a = listInput()\n    rem = list(set(list(range(1, 2 * n + 1))) - set(a))\n    rem.sort()\n    print(max((k - 1) * 2 * n - sum(rem[:k - 1]), k * max(a) - sum(rem[:k])))", "mapInput = lambda : map(int, input().split())\nlistInput = lambda : list(mapInput())\nfor _ in range(int(input())):\n    (n, k) = mapInput()\n    a = listInput()\n    all = set(list(range(1, 2 * n + 1)))\n    rem = list(all - set(a))\n    rem.sort()\n    ansOne = (k - 1) * 2 * n - sum(rem[:k - 1])\n    ansTwo = k * max(a) - sum(rem[:k]) if len(rem) >= k else 0\n    print(max(ansTwo, ansOne))", "mapInput = lambda : map(int, input().split())\nlistInput = lambda : list(mapInput())\nfor _ in range(int(input())):\n    (n, k) = mapInput()\n    a = listInput()\n    a.sort()\n    all = set(list(range(1, 2 * n + 1)))\n    rem = list(all - set(a))\n    rem.sort()\n    ansOne = (k - 1) * 2 * n - sum(rem[:k - 1])\n    ansTwo = k * a[-1] - sum(rem[:k]) if len(rem) >= k else 0\n    print(max(ansTwo, ansOne))", "mapInput = lambda : map(int, input().split())\nlistInput = lambda : list(mapInput())\nfor _ in range(int(input())):\n    (n, k) = mapInput()\n    a = listInput()\n    a.sort()\n    all = set(list(range(1, 2 * n + 1)))\n    rem = list(all - set(a))\n    rem.sort()\n    ansOne = (k - 1) * 2 * n - sum(rem[:k - 1])\n    ansTwo = k * a[-1] - sum(rem[:k]) if len(rem) >= k else 0\n    print(max(ansTwo, ansOne))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = Counter(a)\n    m = max(a)\n    c = []\n    for i in range(1, 2 * n + 1):\n        if b[i] == 0:\n            c.append(i)\n    total1 = 0\n    total2 = 0\n    for i in range(k):\n        if m > c[i]:\n            total1 += m - c[i]\n        if i < k - 1:\n            total2 += 2 * n - c[i]\n    print(max(total1, total2))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = Counter(l)\n    l2 = []\n    res = max(l)\n    tot = 0\n    tot1 = 0\n    for i in range(1, 2 * n + 1):\n        if l1[i] == 0:\n            l2.append(i)\n    for i in range(m):\n        if res > l2[i]:\n            tot += res - l2[i]\n        if i < m - 1:\n            tot1 += 2 * n - l2[i]\n    print(max(tot, tot1))", "def calc1(a, k):\n    m = max(a)\n    n = len(a)\n    s = set(a)\n    ans = 0\n    for i in range(1, 2 * n + 1):\n        if k == 0 or i in s:\n            continue\n        ans += m - i\n        s |= {i}\n        k -= 1\n    return ans\n\ndef calc(a, k):\n    return max(calc1(a + [2 * n], k - 1), calc1(a, k))\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(calc(a, k))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = Counter(a)\n    m = max(a)\n    c = []\n    for i in range(1, 2 * n + 1):\n        if b[i] == 0:\n            c.append(i)\n    total1 = 0\n    total2 = 0\n    for i in range(k):\n        if m > c[i]:\n            total1 += m - c[i]\n        if i < k - 1:\n            total2 += 2 * n - c[i]\n    print(max(total1, total2))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = Counter(l)\n    l2 = []\n    res = max(l)\n    tot = 0\n    tot1 = 0\n    for i in range(1, 2 * n + 1):\n        if l1[i] == 0:\n            l2.append(i)\n    for i in range(m):\n        if res > l2[i]:\n            tot += res - l2[i]\n        if i < m - 1:\n            tot1 += 2 * n - l2[i]\n    print(max(tot, tot1))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = Counter(l)\n    l2 = []\n    res = max(l)\n    tot = 0\n    tot1 = 0\n    for i in range(1, 2 * n + 1):\n        if l1[i] == 0:\n            l2.append(i)\n    for i in range(m):\n        if res > l2[i]:\n            tot += res - l2[i]\n        if i < m - 1:\n            tot1 += 2 * n - l2[i]\n    print(max(tot, tot1))", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = Counter(l)\n    l2 = []\n    res = max(l)\n    tot = 0\n    tot1 = 0\n    for i in range(1, 2 * n + 1):\n        if l1[i] == 0:\n            l2.append(i)\n    for i in range(m):\n        if res > l2[i]:\n            tot += res - l2[i]\n        if i < m - 1:\n            tot1 += 2 * n - l2[i]\n    print(max(tot, tot1))", "from collections import Counter\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list((int(i) for i in input().split()))\n    d = Counter(a)\n    b = []\n    for i in range(1, 2 * n + 1):\n        if d[i] == 0:\n            b.append(i)\n    v1 = 0\n    v2 = 0\n    mx = max(a)\n    for i in range(k):\n        v1 += mx - b[i]\n    if d[2 * n] == 0:\n        for i in range(k - 1):\n            v2 += 2 * n - b[i]\n    print(max(v1, v2))", "tc = int(input())\nwhile tc > 0:\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = max(l)\n    t1 = [0] * (n * 2 + 1)\n    t2 = [0] * (n * 2 + 1)\n    for i in l:\n        t1[i] = 1\n        t2[i] = 1\n    sum1 = 0\n    sum2 = 0\n    (q1, q2) = (k, k)\n    (m1, m2) = (2 * n, m)\n    t1[2 * n] = 1\n    q1 -= 1\n    for i in range(1, n * 2 + 1):\n        if q1 == 0 and q2 == 0:\n            break\n        if q1 != 0 and t1[i] == 0:\n            t1[i] = 1\n            sum1 += m1 - i\n            q1 -= 1\n        if q2 != 0 and t2[i] == 0:\n            if m2 < i:\n                m2 = i\n            t2[i] = 1\n            sum2 += m2 - i\n            q2 -= 1\n    print(max(sum1, sum2))\n    tc -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    flag = [False] * (2 * n + 1)\n    for item in arr:\n        flag[item] = True\n    temp = []\n    for i in range(1, 2 * n + 1):\n        if flag[i] == False:\n            temp.append(i)\n    max_ = max(arr)\n    res = max(2 * n * (k - 1) - sum(temp[0:k - 1]), k * max_ - sum(temp[0:k]))\n    print(res)", "from bisect import bisect_left, bisect_right\nimport math\nfrom collections import defaultdict\nfrom bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nfor _ in range(ii()):\n    (n, k) = il()\n    a = il()\n    sa = set(a)\n    s = [i for i in range(1, 2 * n + 1) if i not in sa]\n    z = max(a)\n    an = 0\n    p = sorted(s)\n    if p[k - 1] < z:\n        print(max(k * z - sum(p[:k]), max(s) * (k - 1) - sum(p[:k - 1])))\n    else:\n        print(max(s) * (k - 1) - sum(p[:k - 1]))", "a = int(input())\nfor i in range(a):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    A.sort()\n    B = [0] * (2 * N + 1)\n    for j in range(N):\n        B[A[j]] = 1\n    x = 0\n    y = 0\n    z = 0\n    for j in range(1, 2 * N + 1):\n        if B[j] == 0:\n            y += 1\n            x += j\n            z = j\n        if y == K:\n            break\n    p = (K - 1) * (2 * N) - (x - z)\n    q = K * A[N - 1] - x\n    if p >= q:\n        print(p)\n    else:\n        print(q)", "def max_score(numbers, k):\n    missing = set(range(1, 2 * len(numbers) + 1)) - numbers\n    max_missing = max(missing)\n    return max(max_score_adding_mins(numbers | {max_missing}, missing - {max_missing}, k - 1), max_score_adding_mins(numbers, missing, k))\n\ndef max_score_adding_mins(numbers, missing, k):\n    if k == 0:\n        return 0\n    missing_mins = list(sorted(missing))\n    max_present = max(numbers)\n    score = 0\n    for i in range(k):\n        score += max_present - missing_mins[i]\n    return score\nfor _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    numbers = set((int(x) for x in input().split()))\n    r = max_score(numbers, k)\n    print(r)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = set(map(int, input().split()))\n    m = sorted(set(range(1, 1 + 2 * n)) - a)\n    maks = max(a)\n    s1 = maks * k - sum(m[:k])\n    s2 = 2 * n * (k - 1) - sum(m[:k - 1])\n    print(max(s1, s2))", "T = int(input())\nfor t in range(T):\n    (N, K) = map(int, input().split())\n    B = list(range(1, 2 * N + 1))\n    A = list(map(int, input().split()))\n    for i in range(N):\n        B[A[i] - 1] = 0\n    (tot, tot2) = (0, 0)\n    Kidx = 1\n    idx = 0\n    mx = max(A)\n    while Kidx <= K:\n        if B[idx] > 0:\n            tot += max(mx - B[idx], 0)\n            if Kidx <= K - 1:\n                tot2 += 2 * N - B[idx]\n            Kidx += 1\n        idx += 1\n    print(max(tot, tot2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mark = [0] * (2 * n + 1)\n    b = []\n    for x in a:\n        mark[x] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            b.append(i)\n    mx = max(a)\n    ans = 0\n    ans = max(ans, (k - 1) * (2 * n) - sum(b[0:k - 1]))\n    ans = max(ans, k * mx - sum(b[0:k]))\n    print(ans)", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    m = {}\n    mx = 0\n    for e in ls:\n        mx = max(mx, e)\n        m[e] = 1\n    arr = []\n    (ans1, ans2, c) = (0, 0, 0)\n    for i in range(1, 2 * n + 1):\n        if i in m.keys():\n            continue\n        mx = max(mx, i)\n        if c < k - 1:\n            ans2 += abs(2 * n - i)\n        if c < k:\n            ans1 += abs(mx - i)\n            c += 1\n    print(max(ans1, ans2))\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    m = {}\n    mx = 0\n    for e in ls:\n        mx = max(mx, e)\n        m[e] = 1\n    arr = []\n    (ans1, ans2, c) = (0, 0, 0)\n    for i in range(1, 2 * n + 1):\n        if i in m.keys():\n            continue\n        mx = max(mx, i)\n        if c < k - 1:\n            ans2 += abs(2 * n - i)\n        if c < k:\n            ans1 += abs(mx - i)\n            c += 1\n    print(max(ans1, ans2))\n    t -= 1", "t = int(input())\nfor T in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = [0 for i in range(2 * n + 1)]\n    for i in range(n):\n        count[a[i]] = 1\n    maxm = max(a)\n    ans1 = ans2 = 0\n    temp = k\n    for i in range(1, 2 * n + 1):\n        if count[i] == 0:\n            if i > maxm:\n                maxm = i\n            ans1 += maxm - i\n            temp -= 1\n        if temp == 0:\n            break\n    k -= 1\n    for i in range(1, 2 * n + 1):\n        if count[i] == 0 and k != 0:\n            ans2 += 2 * n - i\n            k -= 1\n    print(max(ans1, ans2))", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mark = [0] * (2 * n + 1)\n    b = []\n    for x in a:\n        mark[x] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            b.append(i)\n    mx = max(a)\n    ans = int(-10 ** 13)\n    ans = max(ans, (k - 1) * (2 * n) - sum(b[0:k - 1]))\n    ans = max(ans, k * mx - sum(b[0:k]))\n    print(ans)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    d = {}\n    mx1 = 0\n    for n in A:\n        mx1 = max(mx1, n)\n        d[n] = 1\n    mx2 = 2 * N\n    k = 0\n    (res1, res2) = (0, 0)\n    for i in range(1, 2 * N + 1):\n        if i not in d:\n            res1 += mx1 - i\n            if k < K - 1:\n                res2 += mx2 - i\n            k += 1\n            if k == K:\n                break\n    print(max(res1, res2))", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    d = {}\n    mx1 = 0\n    for n in A:\n        mx1 = max(mx1, n)\n        d[n] = 1\n    mx2 = 2 * N\n    k = 0\n    (res1, res2) = (0, 0)\n    for i in range(1, 2 * N + 1):\n        if i not in d:\n            res1 += mx1 - i\n            if k < K - 1:\n                res2 += mx2 - i\n            k += 1\n            if k == K:\n                break\n    print(max(res1, res2))", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    d = {}\n    mx1 = 0\n    for n in A:\n        mx1 = max(mx1, n)\n        d[n] = 1\n    mx2 = 2 * N\n    k = 0\n    (res1, res2) = (0, 0)\n    for i in range(1, 2 * N + 1):\n        if i not in d:\n            res1 += mx1 - i\n            if k < K - 1:\n                res2 += mx2 - i\n            k += 1\n            if k == K:\n                break\n    print(max(res1, res2))", "t = int(input())\nfor T in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = [0 for i in range(2 * n + 1)]\n    for i in range(n):\n        count[a[i]] = 1\n    maxm = max(a)\n    ans1 = ans2 = 0\n    temp = k\n    for i in range(1, 2 * n + 1):\n        if count[i] == 0:\n            if i > maxm:\n                maxm = i\n            ans1 += maxm - i\n            temp -= 1\n        if temp == 0:\n            break\n    k -= 1\n    for i in range(1, 2 * n + 1):\n        if count[i] == 0 and k != 0:\n            ans2 += 2 * n - i\n            k -= 1\n    print(max(ans1, ans2))", "import bisect\nimport math\nimport sys\nfrom collections import Counter, deque\nfor _ in range(int(sys.stdin.readline())):\n    (n, k) = map(int, sys.stdin.readline().split())\n    a = [int(i) for i in sys.stdin.readline().split()]\n    mark = [0] * (2 * n + 1)\n    b = []\n    for x in a:\n        mark[x] = 1\n    for i in range(1, 2 * n + 1):\n        if mark[i] == 0:\n            b.append(i)\n    mx = max(a)\n    ans = int(-10 ** 13)\n    ans = max(ans, (k - 1) * (2 * n) - sum(b[0:k - 1]))\n    ans = max(ans, k * mx - sum(b[0:k]))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    maxNum = max(nums)\n    s = set(nums)\n    ans1 = 0\n    (i, j) = (0, 1)\n    while j <= 2 * n and i < k:\n        if j not in s:\n            s.add(j)\n            maxNum = max(j, maxNum)\n            ans1 += maxNum - j\n            i += 1\n        j += 1\n    s = set(nums)\n    s.add(2 * n)\n    maxNum = 2 * n\n    ans2 = 0\n    (i, j) = (1, 1)\n    while j <= 2 * n and i < k:\n        if j not in s:\n            s.add(j)\n            maxNum = max(j, maxNum)\n            ans2 += maxNum - j\n            i += 1\n        j += 1\n    print(max(ans1, ans2))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    maxNum = max(nums)\n    s = set(nums)\n    ans1 = 0\n    (i, j) = (0, 1)\n    while j <= 2 * n and i < k:\n        if j not in s:\n            s.add(j)\n            maxNum = max(j, maxNum)\n            ans1 += maxNum - j\n            i += 1\n        j += 1\n    s = set(nums)\n    s.add(2 * n)\n    maxNum = 2 * n\n    ans2 = 0\n    (i, j) = (1, 1)\n    while j <= 2 * n and i < k:\n        if j not in s:\n            s.add(j)\n            maxNum = max(j, maxNum)\n            ans2 += maxNum - j\n            i += 1\n        j += 1\n    print(max(ans1, ans2))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    maxNum = max(nums)\n    s = set(nums)\n    ans1 = 0\n    j = 1\n    for i in range(k):\n        while j <= 2 * n:\n            if j not in s:\n                s.add(j)\n                maxNum = max(j, maxNum)\n                ans1 += maxNum - j\n                break\n            j += 1\n    s = set(nums)\n    s.add(2 * n)\n    maxNum = 2 * n\n    ans2 = 0\n    j = 1\n    for i in range(k - 1):\n        while j <= 2 * n:\n            if j not in s:\n                s.add(j)\n                maxNum = max(j, maxNum)\n                ans2 += maxNum - j\n                break\n            j += 1\n    print(max(ans1, ans2))"]