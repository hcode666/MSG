["from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "from collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] = 1 - p_fs[2]\n            n //= 2\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] = 1 - p_fs[ii]\n    if n != 1:\n        p_fs[n] = 1\n    return p_fs\n\ndef add(v1: list, v2: list):\n    ans = list(set(v1).symmetric_difference(set(v2)))\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = set()\n    p_factors = defaultdict(list)\n    n_rows = 0\n    for i in range(N):\n        pfs = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.add(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            n_rows += 1\n    primes = sorted(list(primes))\n    p_to_id = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            f = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (dif, ll) = add(f, e)\n                if ll > i:\n                    w[ll].append(dif)\n                elif ll == -1:\n                    n_rows -= 1\n                else:\n                    raise RuntimeError('FUCK')\n    print(n_rows)", "import sys\nfrom collections import defaultdict\nfrom math import sqrt\n\ndef prime_factors(n):\n    p_fs = dict()\n    ct = 0\n    if n % 2 == 0:\n        p_fs[2] = 0\n        while n % 2 == 0:\n            p_fs[2] += 1\n            n //= 2\n        ct += 1\n    for ii in range(3, int(sqrt(n)) + 1, 2):\n        if n % ii == 0:\n            p_fs[ii] = 0\n            while n % ii == 0:\n                n //= ii\n                p_fs[ii] += 1\n            ct += 1\n    if n != 1:\n        p_fs[n] = 1\n        ct += 1\n    return (p_fs, ct)\n\ndef add(v1: list, v2: list):\n    indices = set(v1).union(set(v2))\n    ans = []\n    for idx in indices:\n        if idx in v1 and idx not in v2 or (idx not in v1 and idx in v2):\n            ans.append(idx)\n    ans.sort()\n    if ans:\n        return (ans, ans[0])\n    else:\n        return (ans, -1)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    primes = []\n    p_factors = defaultdict(list)\n    nrows = 0\n    for i in range(N):\n        (pfs, k) = prime_factors(A[i])\n        for p in pfs:\n            if pfs[p] & 1:\n                p_factors[i].append(p)\n                if p not in primes:\n                    primes.append(p)\n        p_factors[i].sort()\n        if p_factors[i]:\n            nrows += 1\n    primes.sort()\n    p_to_id = defaultdict(int)\n    id_to_p = defaultdict(int)\n    m = 0\n    for p in primes:\n        p_to_id[p] = m\n        id_to_p[m] = p\n        m += 1\n    n_vs = 0\n    w = defaultdict(list)\n    for i in p_factors:\n        if p_factors[i]:\n            p = p_factors[i][0]\n            k = p_to_id[p]\n            v = [p_to_id[p] for p in p_factors[i]]\n            v.sort()\n            w[k].append(v)\n    for i in range(m):\n        if len(w[i]) > 1:\n            first = w[i].pop()\n            while w[i]:\n                e = w[i].pop()\n                (e_, ll) = add(first, e)\n                if ll > i:\n                    w[ll].append(e_)\n                elif ll == -1:\n                    nrows -= 1\n                else:\n                    print('FUCK', ll, first, e)\n            w[i].append(first)\n    print(nrows)"]