["import collections\nMOD = 10 ** 9 + 7\n\ndef mod_pow(a, b):\n    if b == 0:\n        return 1\n    return mod_pow(a * a % MOD, b // 2) if b % 2 == 0 else a * mod_pow(a * a % MOD, b // 2) % MOD\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    freqs = collections.Counter([a % K for a in A])\n    ans = freqs[0] + 1\n    for i in range(1, (K + 1) // 2):\n        ans = ans * (mod_pow(2, freqs[i]) + mod_pow(2, freqs[K - i]) - 1) % MOD\n    if K % 2 == 0:\n        ans = ans * (freqs[K // 2] + 1) % MOD\n    print(ans)", "import collections\nMOD = 10 ** 9 + 7\n\ndef mod_pow(a, b):\n    if b == 0:\n        return 1\n    return mod_pow(a * a % MOD, b // 2) if b % 2 == 0 else a * mod_pow(a * a % MOD, b // 2) % MOD\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    freqs = collections.Counter([a % K for a in A])\n    ans = freqs[0] + 1\n    for i in range(1, (K + 1) // 2):\n        ans = ans * (mod_pow(2, freqs[i]) + mod_pow(2, freqs[K - i]) - 1) % MOD\n    if K % 2 == 0:\n        ans = ans * (freqs[K // 2] + 1) % MOD\n    print(ans)", "import collections\nMOD = 10 ** 9 + 7\n\ndef mod_pow(a, b):\n    if b == 0:\n        return 1\n    return mod_pow(a * a % MOD, b // 2) if b % 2 == 0 else a * mod_pow(a * a % MOD, b // 2) % MOD\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    freqs = collections.Counter([a % K for a in A])\n    ans = freqs[0] + 1\n    for i in range(1, (K + 1) // 2):\n        ans = ans * (mod_pow(2, freqs[i]) + mod_pow(2, freqs[K - i]) - 1) % MOD\n    if K % 2 == 0:\n        ans = ans * (freqs[K // 2] + 1) % MOD\n    print(ans)", "import collections\nMOD = 10 ** 9 + 7\n\ndef mod_pow(a, b):\n    if b == 0:\n        return 1\n    return mod_pow(a * a % MOD, b // 2) if b % 2 == 0 else a * mod_pow(a * a % MOD, b // 2) % MOD\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    freqs = collections.Counter([a % K for a in A])\n    ans = freqs[0] + 1\n    for i in range(1, (K + 1) // 2):\n        ans = ans * (mod_pow(2, freqs[i]) + mod_pow(2, freqs[K - i]) - 1) % MOD\n    if K % 2 == 0:\n        ans = ans * (freqs[K // 2] + 1) % MOD\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\nmod = 10 ** 9 + 7\nans = []\nfor _ in range(inp()):\n    (N, K) = inlt()\n    A = invr()\n    an = 1\n    f = {}\n    for a in A:\n        r = a % K\n        if r in f:\n            f[r] += 1\n        else:\n            f[r] = 1\n    if 0 in f:\n        r = f.pop(0)\n        an *= r + 1\n    if K % 2 == 0 and K // 2 in f:\n        r = f.pop(K // 2)\n        an *= r + 1\n    an %= mod\n    while f:\n        (x, fx) = f.popitem()\n        m = pow(2, fx, mod)\n        if K - x in f:\n            fx = f.pop(K - x)\n            m += pow(2, fx, mod) - 1\n        an = an * m % mod\n    ans.append(an)\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\nmod = 10 ** 9 + 7\nans = []\nfor _ in range(inp()):\n    (N, K) = inlt()\n    A = invr()\n    an = 1\n    f = [0] * K\n    for a in A:\n        f[a % K] += 1\n    for x in range(K // 2 + 1):\n        if 2 * x in [0, K]:\n            an *= f[x] + 1\n        else:\n            an *= pow(2, f[x], mod) + pow(2, f[K - x], mod) - 1\n        an %= mod\n    ans.append(an)\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\n\ndef solve(N, K, A):\n    an = 1\n    rem = [0] * K\n    for a in A:\n        rem[a % K] += 1\n    for x in range(K // 2 + 1):\n        if 2 * x in [0, K]:\n            an = an * (rem[x] + 1) % mod\n        else:\n            an = an * (pow(2, rem[x], mod) + pow(2, rem[K - x], mod) - 1) % mod\n    return an\nmod = 10 ** 9 + 7\nans = []\nfor _ in range(inp()):\n    (N, K) = inlt()\n    A = invr()\n    ans.append(solve(N, K, A))\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\n\ndef solve(N, K, A):\n    an = 1\n    rem = [0] * K\n    for a in A:\n        rem[a % K] += 1\n    for x in range(K // 2 + 1):\n        if 2 * x in [0, K]:\n            an = mod_mul(an, rem[x] + 1)\n        else:\n            an = mod_mul(an, mod_sum(mod_pow(2, rem[x]), mod_pow(2, rem[K - x])) - 1)\n    return an\nmod = 10 ** 9 + 7\n\ndef mod_sum(a, b):\n    return (a + b) % mod\n\ndef mod_mul(a, b):\n    return a * b % mod\n\ndef mod_pow(a, b):\n    return pow(a, b, mod)\nans = []\nfor _ in range(inp()):\n    (N, K) = inlt()\n    A = invr()\n    ans.append(solve(N, K, A))\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\n\ndef solve(N, K, A):\n    an = 1\n    rem = [0] * K\n    for a in A:\n        rem[a % K] += 1\n    for x in range(K // 2 + 1):\n        if 2 * x in [0, K]:\n            an = mod_mul(an, rem[x] + 1)\n        else:\n            an = mod_mul(an, mod_sum(mod_pow(2, rem[x]), mod_pow(2, rem[K - x])) - 1)\n    return an\nmod = 10 ** 9 + 7\n\ndef mod_sum(a, b):\n    return (a + b) % mod\n\ndef mod_mul(a, b):\n    return a * b % mod\n\ndef mod_pow(a, b):\n    return pow(a, b, mod)\nans = []\nfor _ in range(inp()):\n    (N, K) = inlt()\n    A = inlt()\n    ans.append(solve(N, K, A))\noutplt(ans)", "from collections import Counter\n\ndef simple_array(array, k):\n    counter = Counter((x % k for x in array))\n    singles = []\n    pairs = []\n    zeros = counter[0]\n    mids = counter[k // 2] if k % 2 == 0 else 0\n    for key in counter:\n        if key == 0:\n            continue\n        c_key = (k - key) % k\n        if c_key in counter:\n            if key == c_key:\n                continue\n            if key <= k // 2:\n                pairs.append((counter[key], counter[c_key]))\n        else:\n            singles.append(counter[key])\n    acc = 1\n    for single in singles:\n        acc *= 2 ** single\n    for pair in pairs:\n        acc = acc * (2 ** pair[0] - 1) + acc * (2 ** pair[1] - 1) + acc\n    if zeros > 0:\n        acc *= zeros + 1\n    if mids > 0:\n        acc *= mids + 1\n    return acc % (10 ** 9 + 7)\nfor _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    p = simple_array(array, k)\n    print(p)", "from collections import Counter\n\ndef simple_array(array, k):\n    counter = Counter((x % k for x in array))\n    singles = []\n    pairs = []\n    zeros = counter[0]\n    mids = counter[k // 2] if k % 2 == 0 else 0\n    for key in counter:\n        if key == 0:\n            continue\n        c_key = (k - key) % k\n        if c_key in counter:\n            if key == c_key:\n                continue\n            if key <= k // 2:\n                pairs.append((counter[key], counter[c_key]))\n        else:\n            singles.append(counter[key])\n    acc = 1\n    for single in singles:\n        acc *= 2 ** single\n    for pair in pairs:\n        acc = acc * (2 ** pair[0] - 1) + acc * (2 ** pair[1] - 1) + acc\n    if zeros > 0:\n        acc *= zeros + 1\n    if mids > 0:\n        acc *= mids + 1\n    return acc % (10 ** 9 + 7)\nfor _ in range(int(input())):\n    (_, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    p = simple_array(array, k)\n    print(p)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    list1 = [0] * k\n    for i in a:\n        a = i % k\n        list1[a] += 1\n    sum = 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i == k / 2:\n            sum *= list1[i] + 1\n        else:\n            sum *= 2 ** list1[i] + 2 ** list1[k - i] - 1\n    print(sum % (10 ** 9 + 7))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    list1 = [0] * k\n    for i in a:\n        a = i % k\n        list1[a] += 1\n    sum = 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i == k / 2:\n            sum *= list1[i] + 1\n        else:\n            sum *= 2 ** list1[i] + 2 ** list1[k - i] - 1\n    print(sum % (10 ** 9 + 7))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = [0] * k\n    for i in a:\n        a = i % k\n        x[a] += 1\n    sum = 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i == k / 2:\n            sum *= x[i] + 1\n        else:\n            sum *= 2 ** x[i] + (2 ** x[k - i] - 1)\n    print(sum % (10 ** 9 + 7))", "t = int(input())\nd = 0\nwhile t > d:\n    (n, k) = map(int, input().split())\n    n1 = list(map(int, input().split()))\n    j = [0] * k\n    s = 1\n    for i in n1:\n        a = i % k\n        j[a] += 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i == k / 2:\n            s *= j[i] + 1\n        else:\n            s *= 2 ** j[i] + (2 ** j[k - i] - 1)\n    print(s % (10 ** 9 + 7))\n    d += 1", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    list1 = [0] * K\n    for i in A:\n        a = i % K\n        list1[a] += 1\n    ans = 1\n    for i in range(K // 2 + 1):\n        if i == 0 or i == K / 2:\n            ans *= list1[i] + 1\n        else:\n            ans *= 2 ** list1[i] + 2 ** list1[K - i] - 1\n    print(ans % (10 ** 9 + 7))", "T = int(input())\nfor z in range(T):\n    (Nlen, Kel) = map(int, input().split())\n    A = list(map(int, input().split()))\n    l = [0] * Kel\n    i = 0\n    while i < Nlen:\n        a = A[i] % Kel\n        l[a] += 1\n        i += 1\n    ans = 1\n    h = 0\n    while h <= Kel // 2:\n        if h == 0 or h == Kel / 2:\n            ans *= l[h] + 1\n        else:\n            ans *= 2 ** l[h] + (2 ** l[Kel - h] - 1)\n        h += 1\n    print(ans % (10 ** 9 + 7))", "T = int(input())\nfor z in range(T):\n    (Nlen, Kel) = map(int, input().split())\n    A = list(map(int, input().split()))\n    l = [0] * Kel\n    i = 0\n    while i < Nlen:\n        a = A[i] % Kel\n        l[a] += 1\n        i += 1\n    ans = 1\n    h = 0\n    while h <= Kel // 2:\n        if h == 0 or h == Kel / 2:\n            ans *= l[h] + 1\n        else:\n            ans *= 2 ** l[h] + (2 ** l[Kel - h] - 1)\n        h += 1\n    print(ans % (10 ** 9 + 7))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "t = int(input())\nfor _ in range(t):\n    (num, k) = map(int, input().split())\n    array = list(map(int, input().split()))\n    sum = 1\n    list1 = [0] * k\n    for i in array:\n        a = i % k\n        list1[a] += 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i == k / 2:\n            sum *= list1[i] + 1\n        else:\n            sum *= 2 ** list1[i] + (2 ** list1[k - i] - 1)\n    print(sum % (10 ** 9 + 7))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    freq = [0] * k\n    for i in l:\n        freq[i % k] += 1\n    ans = 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i == k / 2:\n            ans *= 1 + freq[i]\n        else:\n            ans *= 2 ** freq[i] + 2 ** freq[k - i] - 1\n    mod = 10 ** 9 + 7\n    print(ans % mod)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    freq = [0] * k\n    for i in l:\n        freq[i % k] += 1\n    ans = 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i == k / 2:\n            ans *= 1 + freq[i]\n        else:\n            ans *= 2 ** freq[i] + 2 ** freq[k - i] - 1\n    mod = 10 ** 9 + 7\n    print(ans % mod)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    freq = [0] * k\n    for i in l:\n        freq[i % k] += 1\n    ans = 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i == k / 2:\n            ans *= 1 + freq[i]\n        else:\n            ans *= 2 ** freq[i] + 2 ** freq[k - i] - 1\n    mod = 10 ** 9 + 7\n    print(ans % mod)", "k = int(input())\nfor l in range(k):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    num_arr = [0 for i in range(k)]\n    for i in range(len(arr)):\n        temp = arr[i] % k\n        num_arr[temp] += 1\n    mod = 1000000007\n    f_ans = 1\n    for i in range((k + 2) // 2):\n        if i == 0:\n            f_ans *= num_arr[0] + 1\n            continue\n        if 2 * i == k:\n            f_ans = f_ans * (num_arr[i] + 1) % mod\n            continue\n        f_ans = f_ans * (pow(2, num_arr[i], mod) + pow(2, num_arr[k - i], mod) - 1) % mod\n    print(f_ans % 1000000007)", "from collections import Counter\n\ndef modMul(a, b, mod):\n    return a % mod * b % mod % mod\n\ndef solve():\n    (n, k) = map(int, input().split())\n    m = Counter(map(lambda x: int(x) % k, input().split()))\n    ans = 1\n    mod = 1000000007\n    for i in range(0, k // 2 + 1):\n        a = m[i]\n        if (i == k - i or i == 0) and a != 0:\n            ans = modMul(ans, a + 1, mod)\n        else:\n            b = m[k - i]\n            temp = (pow(2, a, mod) + pow(2, b, mod) - 1) % mod\n            ans = modMul(ans, temp, mod)\n    print(ans)\ntc = int(input())\nfor _ in range(tc):\n    solve()", "from collections import Counter\n\ndef modMul(a, b, mod):\n    return a % mod * b % mod % mod\n\ndef solve():\n    (n, k) = map(int, input().split())\n    m = Counter(map(lambda x: int(x) % k, input().split()))\n    ans = 1\n    mod = 1000000007\n    for i in range(0, k // 2 + 1):\n        a = m[i]\n        if (i == k - i or i == 0) and a != 0:\n            ans = modMul(ans, a + 1, mod)\n        else:\n            b = m[k - i]\n            temp = (pow(2, a, mod) + pow(2, b, mod) - 1) % mod\n            ans = modMul(ans, temp, mod)\n    print(ans)\ntc = int(input())\nfor _ in range(tc):\n    solve()", "t = int(input())\nmod = 10 ** 9 + 7\nfor g in range(t):\n    f = list(map(int, input().split()))\n    array = list(map(int, input().split()))\n    n = f[0]\n    k = f[1]\n    new = [0] * k\n    for j in array:\n        new[j % k] += 1\n    product = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            product *= new[i] + 1\n            product = product % mod\n        elif i > k - i:\n            break\n        else:\n            product *= 2 ** new[i] % mod + 2 ** new[k - i] % mod - 1\n            product = product % mod\n    print(product % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "def solve(a, n, k):\n    freq = [0] * k\n    for i in range(n):\n        freq[a[i] % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or i * 2 == k:\n            ans *= freq[i] + 1\n        elif i > k - i:\n            break\n        else:\n            ans *= 2 ** freq[i] % mod + 2 ** freq[k - i] % mod - 1\n        ans = ans % mod\n    return ans % mod\nmod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(a, n, k))", "from sys import stdin, stdout\nfrom collections import defaultdict as dd\nstdint = lambda : int(stdin.readline())\nmul = lambda : map(int, stdin.readline().strip().split())\nseq = lambda : list(map(int, stdin.readline().strip().split()))\nfor _ in range(stdint()):\n    (n, k) = mul()\n    nums = seq()\n    m = dd(int)\n    for num in nums:\n        idx = num % k\n        m[idx] += 1\n    ans = 1\n    mod = int(1000000000.0) + 7\n    for i in range(1, (k + 1) // 2):\n        a = m[i]\n        b = m[k - i]\n        if a > 0 or b > 0:\n            temp = (pow(2, a, mod) + pow(2, b, mod) - 1) % mod\n            ans *= temp\n            ans = ans % mod\n    if m[0] > 0:\n        ans *= m[0] + 1\n        ans = ans % mod\n    if k % 2 == 0 and m[k // 2] > 0:\n        ans *= m[k // 2] + 1\n        ans = ans % mod\n    print(ans)", "import math\nmod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    if b == 1:\n        return a\n    res = 1\n    if b % 2 == 1:\n        res = a\n    s = power(a, b / 2)\n    s = s * s % mod\n    s = s * res % mod\n    return s\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    dp = [0] * k\n    for i in range(len(arr)):\n        dp[arr[i] % k] += 1\n    c = math.ceil(len(dp) / 2)\n    ans = 1\n    for j in range(k):\n        if j == 0 or 2 * j == k:\n            ans *= 1 + dp[j]\n        else:\n            if j > k - j:\n                break\n            c1 = k - j\n            ans = ans * (pow(2, dp[j]) + pow(2, dp[c1]) - 1)\n    print(ans % mod)", "from sys import stdin\ninput = stdin.readline\nMODULO = 10 ** 9 + 7\n\ndef solve(N, K, A):\n    frequency = [0] * K\n    for a in A:\n        frequency[a % K] += 1\n    count = (1 + frequency[0]) % MODULO\n    if K % 2 == 0:\n        c = (1 + frequency[K // 2]) % MODULO\n        count = count * c % MODULO\n    for i in range(1, (K + 1) // 2):\n        c = (pow(2, frequency[i], MODULO) + pow(2, frequency[K - i], MODULO) - 1) % MODULO\n        count = count * c % MODULO\n    return count\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    (N, K) = [int(x) for x in input().strip().split()]\n    A = [int(x) for x in input().strip().split()]\n    print(solve(N, K, A))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "import sys\nf = (map(int, s.split()) for s in sys.stdin)\nnext(f)\nfor ((n, k), a) in zip(f, f):\n    c = [0] * k\n    for x in a:\n        c[x % k] += 1\n    k += 1\n    m = k // 2\n    r = c[0] + 1\n    if k % 2:\n        r *= c[m] + 1\n    for i in range(1, m):\n        r = r * (2 ** c[i] + 2 ** c[-i] - 1) % (10 ** 9 + 7)\n    print(r)", "import sys\nf = (map(int, s.split()) for s in sys.stdin)\nnext(f)\nfor ((n, k), a) in zip(f, f):\n    c = [0] * k\n    for x in a:\n        c[x % k] += 1\n    k += 1\n    r = c[0] + 1\n    if k % 2:\n        r *= c[k // 2] + 1\n    for i in range(1, k // 2):\n        r = r * (2 ** c[i] + 2 ** c[-i] - 1) % (10 ** 9 + 7)\n    print(r)", "import sys\nf = (map(int, s.split()) for s in sys.stdin)\nnext(f)\nfor ((n, k), a) in zip(f, f):\n    c = [0] * k\n    for x in a:\n        c[x % k] += 1\n    m = k + 1 >> 1\n    r = c[0] + 1\n    if k % 2 == 0:\n        r *= c[m] + 1\n    for i in range(1, m):\n        r = r * (2 ** c[i] + 2 ** c[-i] - 1) % (10 ** 9 + 7)\n    print(r)", "import sys\nf = (map(int, s.split()) for s in sys.stdin)\nnext(f)\nfor ((n, k), a) in zip(f, f):\n    c = [0] * k\n    for x in a:\n        c[x % k] += 1\n    m = k + 1 >> 1\n    r = c[0] + 1\n    if k % 2 == 0:\n        r *= c[m] + 1\n    for i in range(1, m):\n        r = r * (2 ** c[i] + 2 ** c[-i] - 1) % (10 ** 9 + 7)\n    print(r)", "import sys\nf = (map(int, s.split()) for s in sys.stdin)\nnext(f)\nfor ((n, k), a) in zip(f, f):\n    c = [0] * k\n    for x in a:\n        c[x % k] += 1\n    k += 1\n    r = c[0] + 1\n    if k % 2:\n        r *= c[k // 2] + 1\n    for i in range(1, k // 2):\n        r = r * (2 ** c[i] + 2 ** c[-i] - 1) % (10 ** 9 + 7)\n    print(r)", "from collections import Counter\n\ndef modMul(a, b, mod):\n    return a % mod * b % mod % mod\n\ndef solve():\n    (n, k) = map(int, input().split())\n    m = Counter(map(lambda x: int(x) % k, input().split()))\n    ans = 1\n    mod = 1000000007\n    for i in range(0, k // 2 + 1):\n        a = m[i]\n        if (i == k - i or i == 0) and a != 0:\n            ans = modMul(ans, a + 1, mod)\n        else:\n            b = m[k - i]\n            temp = (pow(2, a, mod) + pow(2, b, mod) - 1) % mod\n            ans = modMul(ans, temp, mod)\n    print(ans)\ntc = int(input())\nfor _ in range(tc):\n    solve()", "from collections import Counter\n\ndef modMul(a, b, mod):\n    return a % mod * b % mod % mod\n\ndef solve():\n    (n, k) = map(int, input().split())\n    m = Counter(map(lambda x: int(x) % k, input().split()))\n    ans = 1\n    mod = 1000000007\n    for i in range(0, k // 2 + 1):\n        a = m[i]\n        if (i == k - i or i == 0) and a != 0:\n            ans = modMul(ans, a + 1, mod)\n        else:\n            b = m[k - i]\n            temp = (pow(2, a, mod) + pow(2, b, mod) - 1) % mod\n            ans = modMul(ans, temp, mod)\n    print(ans)\ntc = int(input())\nfor _ in range(tc):\n    solve()", "from collections import Counter\nMOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    d = Counter()\n    for n in A:\n        d[n % K] += 1\n    res = 1\n    for i in range(1, (K + 1) // 2):\n        a = d[i]\n        b = d[K - i]\n        if a or b:\n            res *= ((1 << a) % MOD + (1 << b) % MOD - 1) % MOD\n            res %= MOD\n    if d[0]:\n        res *= d[0] + 1\n        res %= MOD\n    if K % 2 == 0 and d[K // 2]:\n        res *= d[K // 2] + 1\n        res %= MOD\n    print(res)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "import collections\nMOD = 10 ** 9 + 7\n\ndef mod_pow(a, b):\n    if b == 0:\n        return 1\n    return mod_pow(a * a % MOD, b // 2) if b % 2 == 0 else a * mod_pow(a * a % MOD, b // 2) % MOD\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    freqs = collections.Counter([a % K for a in A])\n    ans = freqs[0] + 1\n    for i in range(1, (K + 1) // 2):\n        ans = ans * (mod_pow(2, freqs[i]) + mod_pow(2, freqs[K - i]) - 1) % MOD\n    if K % 2 == 0:\n        ans = ans * (freqs[K // 2] + 1) % MOD\n    print(ans)", "def getKey(dic, key):\n    if key in dic:\n        return dic[key]\n    else:\n        return 0\n\ndef solve():\n    (n, k) = [int(i) for i in input().split(' ') if i]\n    vec = [int(i) for i in input().split(' ') if i]\n    remainders = {}\n    for i in vec:\n        rm = i % k\n        if rm in remainders:\n            remainders[rm] += 1\n        else:\n            remainders[rm] = 1\n    ans = 1\n    seen = set()\n    for rm in remainders:\n        if rm in seen:\n            continue\n        x = 1\n        seen.add(rm)\n        if k == 2 * rm or rm == 0:\n            x += remainders[rm]\n        else:\n            x += 2 ** remainders[rm] - 1\n            other = getKey(remainders, k - rm)\n            x += 2 ** other - 1\n            seen.add(k - rm)\n        ans *= x\n    print(ans % (10 ** 9 + 7))\nt = int(input())\nfor i in range(t):\n    solve()", "import sys\nf = (map(int, s.split()) for s in sys.stdin)\nnext(f)\nfor ((n, k), a) in zip(f, f):\n    c = [0] * k\n    for x in a:\n        c[x % k] += 1\n    r = c[0] + 1\n    if k % 2 == 0:\n        r *= c[k // 2] + 1\n    for i in range(1, k + 1 >> 1):\n        r = r * (2 ** c[i] + 2 ** c[-i] - 1) % (10 ** 9 + 7)\n    print(r)", "MOD = 10 ** 9 + 7\nfrom collections import Counter\nfor test in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    temp = [i % k for i in arr]\n    cnt = dict(Counter(temp))\n    ans = 1\n    vis = {}\n    for ele in cnt:\n        if ele == 0 or 2 * ele == k:\n            ans *= cnt[ele] + 1\n        else:\n            if vis.get(ele, -1) == 1:\n                continue\n            elif cnt.get(k - ele, -1) != -1:\n                vis[ele] = 1\n                vis[k - ele] = 1\n                ans *= pow(2, cnt[ele], MOD) + pow(2, cnt[k - ele], MOD) - 1\n            else:\n                vis[ele] = 1\n                ans *= pow(2, cnt[ele], MOD)\n            ans %= MOD\n    print(ans % MOD)", "from sys import setrecursionlimit\nmod_ = 10 ** 9 + 7\nsetrecursionlimit(10 ** 7)\n\ndef drive():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = 1\n    cnt = [0] * k\n    for i in a:\n        cnt[i % k] += 1\n    for i in range(k // 2 + 1):\n        if i == 0 or i + i == k:\n            count *= 1 + cnt[i]\n        else:\n            count *= pow(2, cnt[i], mod_) + pow(2, cnt[k - i], mod_) - 1\n        count %= mod_\n    print(count)\nt = int(input())\nfor _ in range(t):\n    drive()", "from collections import Counter\n\ndef readlist():\n    return list(map(int, input().split()))\n\ndef readint():\n    return int(input())\n\ndef printbool(result: bool):\n    print('YES') if result else print('NO')\nmod = 10 ** 9 + 7\nT = readint()\nfor _ in range(T):\n    (N, K) = readlist()\n    A = readlist()\n    lookup = Counter((a % K for a in A))\n    result = lookup[0] + 1\n    if K % 2 == 0:\n        result *= lookup[K // 2] + 1\n    for i in range(1, (K + 1) // 2):\n        result *= pow(2, lookup[i], mod) + pow(2, lookup[K - i], mod) - 1\n        result %= mod\n    result %= mod\n    print(result)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k // 2 + 1):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "MOD = 10 ** 9 + 7\nfor tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        if i % k not in d:\n            d[i % k] = 1\n        else:\n            d[i % k] += 1\n    s = 1\n    if 0 in d:\n        s *= d[0] + 1\n    if k % 2 == 0 and k // 2 in d:\n        s *= 1 + d[k // 2]\n    x = -1\n    if k % 2 == 0:\n        x = k // 2\n    else:\n        x = k // 2 + 1\n    for i in range(1, x):\n        if i in d and k - i in d:\n            s *= (pow(2, d[i], MOD) + pow(2, d[k - i], MOD) - 1) % MOD\n        elif i in d:\n            s *= pow(2, d[i], MOD) % MOD\n        elif k - i in d:\n            s *= pow(2, d[k - i], MOD) % MOD\n    print(int(s % MOD))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    freq = [0] * k\n    for x in a:\n        freq[x % k] += 1\n    ans = 1\n    for i in range(k):\n        if i == 0 or 2 * i == k:\n            ans *= 1 + freq[i]\n        else:\n            if i > k - i:\n                break\n            ans *= pow(2, freq[i], mod) + pow(2, freq[k - i], mod) - 1\n        ans %= mod\n    print(ans % mod)", "MOD = 10 ** 9 + 7\nfrom collections import Counter\nfrom math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [i % k for i in map(int, input().split())]\n    c = Counter(a)\n    remaining = n - c[0]\n    ans = (pow(2, c[0], MOD) - 1 - c[0]) * pow(2, remaining, MOD) % MOD\n    onlyone = c[0] + 1\n    if k % 2 == 0:\n        remaining -= c[k // 2]\n        ans = (ans + (pow(2, c[k // 2], MOD) - 1 - c[k // 2]) * onlyone * pow(2, remaining, MOD)) % MOD\n        onlyone = onlyone * (c[k // 2] + 1) % MOD\n    for i in range(1, ceil(k / 2)):\n        remaining -= c[i] + c[k - i]\n        ans = (ans + (pow(2, c[i], MOD) - 1) * (pow(2, c[k - i], MOD) - 1) * onlyone * pow(2, remaining, MOD)) % MOD\n        onlyone = onlyone * (pow(2, c[i], MOD) - 1 + (pow(2, c[k - i], MOD) - 1) + 1) % MOD\n    print((pow(2, n, MOD) - ans) % MOD)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ayush = [0 for i in range(k)]\n    for i in range(n):\n        ayush[a[i] % k] += 1\n    chaurasia = 1\n    if ayush[0] >= 1:\n        chaurasia *= ayush[0] + 1\n    for i in range(1, k // 2 + 1):\n        if k % 2 == 0 and i == k // 2:\n            if ayush[i] != 0:\n                chaurasia *= ayush[i] + 1\n            chaurasia = chaurasia % m\n            continue\n        if ayush[i] == 0 and ayush[k - i] == 0:\n            continue\n        if ayush[i] == 0:\n            chaurasia *= 2 ** ayush[k - i]\n            chaurasia = chaurasia % m\n            continue\n        if ayush[k - i] == 0:\n            chaurasia *= 2 ** ayush[i]\n            chaurasia = chaurasia % m\n            continue\n        chaurasia *= 2 ** ayush[i] + 2 ** ayush[k - i] - 1\n        chaurasia = chaurasia % m\n    print(chaurasia)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = [0] * k\n    for i in range(n):\n        arr2[arr1[i] % k] += 1\n    Sum = 1\n    if arr2[0] >= 1:\n        Sum *= arr2[0] + 1\n    for i in range(1, int(k / 2 + 1)):\n        if k % 2 == 0 and i == int(k / 2):\n            if arr2[i] != 0:\n                Sum *= arr2[i] + 1\n            Sum %= 1000000007\n            continue\n        if arr2[i] == 0 and arr2[k - i] == 0:\n            continue\n        if arr2[i] == 0:\n            Sum *= pow(2, arr2[k - i])\n            Sum %= 1000000007\n            continue\n        if arr2[k - i] == 0:\n            Sum *= pow(2, arr2[i])\n            Sum %= 1000000007\n            continue\n        Sum *= pow(2, arr2[i]) + pow(2, arr2[k - i]) - 1\n        Sum %= 1000000007\n    print(Sum)", "import sys\nfrom collections import Counter\nf = (map(int, s.split()) for s in sys.stdin)\nnext(f)\nfor ((n, k), a) in zip(f, f):\n    c = Counter((x % k for x in a))\n    r = c[0] + 1\n    if k % 2 == 0:\n        r *= c[k // 2] + 1\n    for i in range(1, k + 1 >> 1):\n        r = r * (2 ** c[i] + 2 ** c[k - i] - 1) % (10 ** 9 + 7)\n    print(r)", "beeg = 10 ** 9 + 7\naa = [1, 2, 4]\n\ndef aaa(n):\n    if n < len(aa):\n        return aa[n]\n    else:\n        for i in range(len(aa), n + 1):\n            aa.append(aa[-1] * 2 % beeg)\n        return aa[-1]\nfor tea in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    count = dict()\n    if k == 1:\n        print(n + 1)\n        continue\n    for i in range(k):\n        count[i] = 0\n    for i in a:\n        awa = i % k\n        count[awa] += 1\n    l = 1\n    r = k - 1\n    ans = 1\n    while l < r:\n        ans *= aaa(count[l]) + aaa(count[r]) - 1\n        ans = ans % beeg\n        l += 1\n        r -= 1\n    if count[0] >= 1:\n        ans = ans * (count[0] + 1) % beeg\n    if k % 2 == 0 and count[k // 2] >= 1:\n        ans = ans * (count[k // 2] + 1) % beeg\n    print(ans % beeg)", "import sys\nf = (map(int, s.split()) for s in sys.stdin)\nnext(f)\nfor ((n, k), a) in zip(f, f):\n    c = [0] * k\n    for x in a:\n        c[x % k] += 1\n    r = c[0] + 1\n    if k % 2 == 0:\n        r *= c[k // 2] + 1\n    for i in range(1, k + 1 >> 1):\n        r = r * (2 ** c[i] + 2 ** c[-i] - 1) % (10 ** 9 + 7)\n    print(r)", "import math\nmod = pow(10, 9) + 7\nT = int(input())\nfor testNum in range(T):\n    (N, K) = map(int, input().split(' '))\n    nums = list(map(int, input().split(' ')))\n    counts = {}\n    for i in range(K):\n        counts[i] = 0\n    for val in nums:\n        counts[val % K] += 1\n    total = 1\n    for i in range(1, math.ceil(K / 2)):\n        c = counts[i]\n        c2 = counts[K - i]\n        total *= pow(2, c) + pow(2, c2) - 1\n        total %= mod\n    if K % 2 == 0:\n        total *= 1 + counts[K / 2]\n        total %= mod\n    total *= counts[0] + 1\n    total %= mod\n    print(total)", "import sys, math\n\ndef get_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nmod = 10 ** 9 + 7\n\ndef countKdivPairs(A, n, K):\n    freq = [0] * K\n    for i in range(n):\n        freq[A[i] % K] += 1\n    val1 = freq[0] + 1\n    if K % 2 == 0:\n        val2 = freq[K // 2] + 1\n    else:\n        val2 = 1\n    ans = 1\n    for i in range(1, (K + 1) // 2):\n        ans = ans * (pow(2, freq[i], mod) + pow(2, freq[K - i], mod) - 1) % mod\n    fans = ans * val1 * val2 % mod\n    return fans\nt = int(sys.stdin.readline())\nfor t2 in range(t):\n    (n, k) = get_ints()\n    a = get_arr()\n    ans = countKdivPairs(a, n, k)\n    print(ans)"]