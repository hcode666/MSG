["for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    mx = max((l.count(x) for x in l))\n    print('YES' if mx - n <= (n + 1) // 2 else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    mx = max((l.count(x) for x in l))\n    print('YES' if mx - n <= (n + 1) // 2 else 'NO')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = sorted(list(map(int, input().split())))\n    d = defaultdict(lambda : 0)\n    m = 0\n    for i in A:\n        d[i] += 1\n        if d[i] > m:\n            m = d[i]\n    if (m - (2 * n - m)) // 2 > 2 * n - m + 1:\n        print('NO')\n    else:\n        print('YES')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = sorted(list(map(int, input().split())))\n    d = defaultdict(lambda : 0)\n    m = 0\n    for i in A:\n        d[i] += 1\n        if d[i] > m:\n            m = d[i]\n    if (m - (2 * n - m)) // 2 > 2 * n - m + 1:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    swap = True\n    for i in c:\n        if c[i] > 2 * n - n // 2:\n            swap = False\n    if swap == False:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    swap = True\n    for i in c:\n        if c[i] > 2 * n - n // 2:\n            swap = False\n    if swap == False:\n        print('NO')\n    else:\n        print('YES')", "def solve(n, arr):\n    temp = {}\n    maximum = 0\n    for i in arr:\n        if i in temp:\n            temp[i] += 1\n            maximum = max(maximum, temp[i])\n        else:\n            temp[i] = 1\n            maximum = max(maximum, temp[i])\n    if maximum - n <= n // 2 + (n & 1):\n        return 'YES'\n    return 'NO'\nfor _ in range(int(input())):\n    print(solve(int(input()), list(map(int, input().split()))))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    lastDistinct = n\n    a.sort()\n    for i in range(0, n):\n        if a[i] == a[2 * n - i - 1]:\n            lastDistinct = i\n            break\n    if n - lastDistinct > lastDistinct + 1:\n        print('NO')\n    else:\n        print('YES')", "import collections\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    most_e = max(collections.Counter(A).values())\n    others = len(A) - most_e\n    pairs = min(others, most_e)\n    if most_e > pairs:\n        max_nb_op = 2 * pairs + 1\n        if max_nb_op >= N:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        d.setdefault(i, 0)\n        d[i] += 1\n    k = max(d.values())\n    if k - n <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "for tc in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    n *= 2\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    m = -1\n    for i in d:\n        if d[i] > m:\n            m = d[i]\n    m -= n - m + (n - m + 1) * 2\n    if m > 0:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        d.setdefault(i, 0)\n        d[i] += 1\n    k = max(d.values())\n    if k - n <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "import statistics\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    m = statistics.mode(l)\n    count = l.count(m)\n    r = 2 * n - count\n    if count // 3 <= r:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    array = [int(i) for i in input().split()]\n    d = {}\n    for i in array:\n        d.setdefault(i, 0)\n        d[i] += 1\n    count = max(d.values())\n    if count - n <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    m = max(d.values())\n    if m - n <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    array = [int(i) for i in input().split()]\n    d = {}\n    for i in array:\n        d.setdefault(i, 0)\n        d[i] += 1\n    count = max(d.values())\n    if count - n <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor T in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = [0 for i in range(n)]\n    for i in range(2 * n):\n        count[a[i] - 1] += 1\n    if max(count) > 2 * n - n // 2:\n        print('NO')\n    else:\n        print('YES')", "from heapq import heapify, heappush, heappop\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    h = {}\n    for i in l:\n        h[i] = 1 + h.get(i, 0)\n    chk = False\n    threshold = n + (n + 3) // 2\n    for i in h.values():\n        if i >= threshold:\n            chk = True\n            break\n    if chk:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\nfor i in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    if len(set(l)) == 1:\n        print('NO')\n    else:\n        c = Counter(l)\n        v = c.values()\n        cutoff = a + (a + 3) // 2\n        if max(v) < cutoff:\n            print('YES')\n        else:\n            print('NO')", "from collections import Counter\nfor tea in range(int(input())):\n    n = int(input())\n    lol = [int(asdff) for asdff in input().split()]\n    aaa = Counter(lol)\n    gg = False\n    cutoff = n + (n + 3) // 2\n    for j in aaa.values():\n        if j >= cutoff:\n            gg = True\n            break\n    if gg == True:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\nfor tea in range(int(input())):\n    n = int(input())\n    lol = [int(asdff) for asdff in input().split()]\n    aaa = Counter(lol)\n    gg = False\n    cutoff = n + (n + 3) // 2\n    for j in aaa.values():\n        if j >= cutoff:\n            gg = True\n            break\n    print('NO' if gg else 'YES')", "for tea in range(int(input())):\n    n = int(input())\n    lol = [int(asdff) for asdff in input().split()]\n    aaa = dict()\n    for i in lol:\n        if i in aaa:\n            aaa[i] += 1\n        else:\n            aaa[i] = 1\n    gg = False\n    cutoff = n + (n + 3) // 2\n    for j in aaa.values():\n        if j >= cutoff:\n            gg = True\n            break\n    print('NO' if gg else 'YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [0] * (2 * n + 5)\n    for i in b:\n        a[i] += 1\n    mx = max(a)\n    if mx > 2 * n - mx + 2 * (2 * n - mx + 1):\n        print('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 0\n    for k in a:\n        m = max(m, a.count(k))\n    if m - n <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\n\ndef distinct():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print('YES' if n * 2 - Counter(arr).most_common(1)[0][1] >= n // 2 else 'NO')\nfor _ in range(int(input())):\n    distinct()", "from collections import Counter\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    d = Counter()\n    for n in A:\n        d[n] += 1\n    l = N + (N + 1) // 2\n    f = True\n    for v in d.values():\n        if v > l:\n            f = False\n            break\n    print('YES' if f else 'NO')", "from collections import Counter\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    d = Counter()\n    for n in A:\n        d[n] += 1\n    l = N + (N + 1) // 2\n    f = True\n    for v in d.values():\n        if v > l:\n            f = False\n            break\n    print('YES' if f else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxx = 0\n    for k in a:\n        maxx = max(maxx, a.count(k))\n    if maxx - n <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxx = 0\n    for k in a:\n        maxx = max(maxx, a.count(k))\n    if maxx - n <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dict1 = {}\n    for i in a:\n        if i not in dict1:\n            dict1[i] = 1\n        else:\n            dict1[i] += 1\n    max1 = max(dict1.values())\n    x = 2 * n - n // 2\n    if max1 <= x:\n        print('YES')\n    else:\n        print('NO')", "from heapq import heappush, heappop, heapify\nfrom collections import Counter\n\ndef solve(n, arr):\n    h = [(-v, k) for (k, v) in Counter(arr).items()]\n    heapify(h)\n    total = 0\n    while len(h) > 1:\n        (count1, val1) = heappop(h)\n        (count2, _) = heappop(h)\n        count1 = -count1\n        count2 = -count2\n        total += count2\n        if count1 - count2 > 0:\n            heappush(h, (-(count1 - count2), val1))\n    if h:\n        if -h[0][0] // 2 <= total or -h[0][0] // 2 == total + 1:\n            return 'YES'\n        return 'NO'\n    return 'YES'\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    my_list = input().split()\n    a = [int(item) for item in my_list]\n    hashMap = Counter(a)\n    count = []\n    for k in hashMap:\n        count.append(hashMap[k])\n    count.sort(reverse=True)\n    rem = count[0]\n    for i in count[1:]:\n        rem = rem - i\n    if rem >= n + 2:\n        print('NO')\n    else:\n        print('YES')", "from itertools import permutations\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom typing import Set\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef listinput(filename):\n    return list(map(int, filename.readline().strip().split()))\n\ndef listinput_str(filename):\n    return list(map(str, filename.readline().strip().split()))\n\ndef multiinput(filename):\n    return map(int, filename.readline().strip().split())\n\ndef multiinput_str(filename):\n    return map(str, filename.readline().strip().split())\n\ndef singleinput(filename):\n    return int(filename.readline().strip())\n\ndef singleinput_str(filename):\n    return filename.readline().strip()\n\ndef writeLine_space(l, filename):\n    newl = []\n    n = len(l)\n    for i in range(n - 1):\n        newl.append(str(l[i]))\n        newl.append(' ')\n    newl.append(str(l[n - 1]))\n    newl.append('\\n')\n    filename.writelines(newl)\n\ndef writeLine_sep(l, filename):\n    newl = []\n    n = len(l)\n    for i in range(n - 1):\n        newl.append(str(l[i]))\n        newl.append('\\n')\n    newl.append(str(l[n - 1]))\n    newl.append('\\n')\n    filename.writelines(newl)\nmod = 1000000007\n\ndef binSearchL(a, x):\n    i = bl(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n\ndef binSearchR(a, x):\n    i = br(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n\ndef getDivisors(n):\n    i = 1\n    li = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                li.append(i)\n            else:\n                li.append(i)\n                li.append(int(n / i))\n        i = i + 1\n    li.sort()\n    return li\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    ans = []\n    for p in range(2, n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\n\ndef solve():\n    n = inp()\n    l = seq()\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    mxk = max(d.values())\n    if mxk - n <= (n + 1) // 2:\n        return 'YES'\n    return 'NO'\nt = inp()\nfor i in range(t):\n    print(solve())", "def solve():\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    m = {}\n    for i in arr:\n        if i not in m.keys():\n            m[i] = 0\n        m[i] += 1\n    limit = n + int((n + 1) / 2)\n    for (key, value) in m.items():\n        if value > limit:\n            print('NO')\n            return\n    print('YES')\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "from collections import Counter\nfrom math import floor, ceil\ntest = int(input())\nwhile test:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    found = 1\n    ct = Counter(a)\n    for (i, j) in ct.items():\n        if j > 2 * ceil(n / 2) + floor(n / 2):\n            found = 0\n            break\n    if found:\n        print('YES')\n    else:\n        print('NO')\n    test -= 1", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = max((a.count(x) for x in a))\n    print('YES' if mx - n <= (n + 1) // 2 else 'NO')", "from itertools import permutations\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom typing import Set\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef listinput(filename):\n    return list(map(int, filename.readline().strip().split()))\n\ndef listinput_str(filename):\n    return list(map(str, filename.readline().strip().split()))\n\ndef multiinput(filename):\n    return map(int, filename.readline().strip().split())\n\ndef multiinput_str(filename):\n    return map(str, filename.readline().strip().split())\n\ndef singleinput(filename):\n    return int(filename.readline().strip())\n\ndef singleinput_str(filename):\n    return filename.readline().strip()\n\ndef writeLine_space(l, filename):\n    newl = []\n    n = len(l)\n    for i in range(n - 1):\n        newl.append(str(l[i]))\n        newl.append(' ')\n    newl.append(str(l[n - 1]))\n    newl.append('\\n')\n    filename.writelines(newl)\n\ndef writeLine_sep(l, filename):\n    newl = []\n    n = len(l)\n    for i in range(n - 1):\n        newl.append(str(l[i]))\n        newl.append('\\n')\n    newl.append(str(l[n - 1]))\n    newl.append('\\n')\n    filename.writelines(newl)\nmod = 1000000007\n\ndef binSearchL(a, x):\n    i = bl(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n\ndef binSearchR(a, x):\n    i = br(a, x)\n    if i != len(a) and a[i] == x:\n        return i\n    else:\n        return -1\n\ndef getDivisors(n):\n    i = 1\n    li = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n / i == i:\n                li.append(i)\n            else:\n                li.append(i)\n                li.append(int(n / i))\n        i = i + 1\n    li.sort()\n    return li\n\ndef compute_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef compute_lcm(x, y):\n    lcm = x * y // compute_gcd(x, y)\n    return lcm\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    ans = []\n    for p in range(2, n + 1):\n        if prime[p]:\n            ans.append(p)\n    return ans\n\ndef solve():\n    n = inp()\n    l = seq()\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    mxk = max(d.values())\n    if mxk - n <= (n + 1) // 2:\n        return 'YES'\n    return 'NO'\nt = inp()\nfor i in range(t):\n    print(solve())", "for ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = set(a)\n    l = []\n    if len(b) == len(a):\n        print('YES')\n    else:\n        for i in b:\n            l.append(a.count(i))\n        x = max(l)\n        if x - 2 <= 3 * (2 * n - x):\n            print('YES')\n        else:\n            print('NO')", "from collections import Counter\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    k = 0\n    (i, j) = (0, 2 * n - 1)\n    l = []\n    while i < j:\n        l.append((-1) ** k * (a[i] - a[j]))\n        i += 1\n        j -= 1\n        k += 1\n    c = Counter(l)\n    c1 = c.most_common(1)[0][1]\n    if c1 <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "for ii in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = set(a)\n    l = []\n    if len(b) == len(a):\n        print('YES')\n    else:\n        for i in b:\n            l.append(a.count(i))\n        x = max(l)\n        if x - 2 <= 3 * (2 * n - x):\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = n\n    if n % 2 == 0:\n        m += n // 2\n    else:\n        m += n // 2 + 1\n    d = {}\n    for i in a:\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    flag = 1\n    for i in d:\n        if d[i] > m:\n            flag = 0\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = n\n    if n % 2 == 0:\n        m += n // 2\n    else:\n        m += n // 2 + 1\n    d = dict()\n    for i in a:\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    flag = 1\n    for i in d:\n        if d[i] > m:\n            flag = 0\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    n = n * 2\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    maxx = 0\n    for (i, j) in d.items():\n        maxx = max(maxx, j)\n    maxx = maxx - ((n - maxx + 1) * 2 + (n - maxx))\n    if maxx > 0:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    l1 = []\n    c = 1\n    for i in range(1, 2 * n):\n        if l[i] == l[i - 1]:\n            c += 1\n        else:\n            l1.append(c)\n            c = 1\n    l1.append(c)\n    s = max(l1)\n    d = 2 * n - s\n    x = s - d\n    if x // 2 - d <= 1:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = [0] * (max(l) + 1)\n    for i in l:\n        c[i] += 1\n    maximum = max(c)\n    if n % 2 == 0:\n        r = 3 / 2 * n\n    if n % 2 != 0:\n        n = n - 1\n        r = 3 / 2 * n\n        r = r + 2\n    if maximum > r:\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    dict = {}\n    maxi = 1\n    for j in range(2 * N):\n        if A[j] not in dict:\n            dict[A[j]] = 1\n        else:\n            dict[A[j]] += 1\n            maxi = max(maxi, dict[A[j]])\n    List = []\n    for (j, k) in dict.items():\n        List.append(k)\n    List.sort()\n    n = len(List)\n    if n == 1:\n        print('NO')\n    else:\n        ans = 0\n        for j in range(n - 1):\n            ans += List[j]\n        if List[-1] > 3 * ans + 2:\n            print('NO')\n        else:\n            print('YES')", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    freq = Counter(a)\n    max1 = max(freq.values())\n    if n % 2 == 0:\n        r = 1.5 * n\n    else:\n        n -= 1\n        r = 1.5 * n\n        r += 2\n    if max1 > r:\n        print('NO')\n    else:\n        print('YES')", "def N():\n    return int(input())\n\ndef A():\n    return [int(x) for x in input().split()]\n\ndef S():\n    return input()\nfor _ in range(N()):\n    n = N()\n    if 'er9fj48gh48gh4' == 14194665565:\n        print('Tanmay')\n    a = A()\n    a.sort()\n    ar = []\n    for i in range(n):\n        ar.append(abs(a[n + i] - a[i]))\n    z = ar.count(0)\n    if z > n // 2 + n % 2:\n        print('NO')\n        continue\n    print('YES')", "def count(x):\n    c = 0\n    for i in lst:\n        if i == x:\n            c += 1\n    return c\n\ndef exe():\n    d = {}\n    for i in lst:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] > 1:\n            break\n    else:\n        return 'YES'\n    lst.sort()\n    s = set(lst)\n    l = [count(i) for i in s]\n    maxi = 0\n    for i in l:\n        if maxi < i:\n            maxi = i\n    if maxi - 2 <= 3 * (sum(l) - maxi):\n        return 'YES'\n    return 'NO'\nfor i in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(exe())", "from collections import *\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (x, max) = map(int, Counter(l).most_common(1)[0])\n    if n % 2 == 0:\n        r = 3 / 2 * n\n    else:\n        n = n - 1\n        r = 3 / 2 * n\n        r = r + 2\n    if max <= r:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter, defaultdict\nimport sys\nimport math\n\ndef sol(n, s):\n    c = Counter(s)\n    max_ = -1\n    for i in c:\n        if c[i] > max_:\n            max_ = c[i]\n    if n % 4 == 0:\n        if max_ > 3 * n / 4:\n            return 'NO'\n    else:\n        k = n // 4 + 1\n        k = 2 * k + (n // 2 - n // 4 - 1)\n        if max_ > k:\n            return 'NO'\n    return 'YES'\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return str(input())\n\ndef invr():\n    return map(int, input().split())\nT = inp()\nfor i in range(T):\n    n = inp()\n    n = 2 * n\n    s = inlt()\n    s = s[:n]\n    print(sol(n, s))", "def findMajority(arr, n):\n    maxCount = 0\n    index = -1\n    for i in range(n):\n        count = 0\n        for j in range(n):\n            if arr[i] == arr[j]:\n                count += 1\n        if count > maxCount:\n            maxCount = count\n            index = i\n    x = n / 2\n    if maxCount <= n / 2 + (x + 1) / 2:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    n = 2 * n\n    arr = [int(x) for x in input().split()]\n    findMajority(arr, n)\n    t -= 1", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    mx_count = 0\n    d = Counter(arr)\n    for i in d:\n        mx_count = max(mx_count, d[i])\n    left = mx_count\n    if left > (2 * n - left) * 3 + 2:\n        print('NO')\n    else:\n        print('YES')", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = [0] * (max(l) + 1)\n    for i in l:\n        count[i] += 1\n    m = max(count)\n    if n % 2 == 0:\n        req = 3 / 2 * n\n    if n % 2 != 0:\n        n = n - 1\n        req = 3 / 2 * n\n        req = req + 2\n    if m > req:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = list(set(l))\n    d = dict()\n    n = n * 2\n    for i in p:\n        d[i] = 0\n    for i in l:\n        d[i] += 1\n    a = max(d.values())\n    if a > (n - a) * 3 + 2:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = 0\n    for i in arr:\n        c = arr.count(i)\n        if c > x:\n            x = c\n    mp = x - n\n    if mp > 2 * n - x + 1:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = 0\n    for i in arr:\n        c = arr.count(i)\n        if c > x:\n            x = c\n    mp = x - n\n    if mp > n - mp + 1:\n        print('NO')\n    else:\n        print('YES')", "def fun(n, m):\n    if m <= n:\n        return 1\n    return 0\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    c = 0\n    for i in l:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n            c += 1\n    m = 0\n    for i in d:\n        if d[i] > m:\n            m = d[i]\n    n = 2 * n\n    n = int(n * 0.76)\n    flag = fun(n, m)\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfor test in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = dict(Counter(arr))\n    max_occur = -1\n    key = -1\n    for i in cnt:\n        if max_occur < cnt[i]:\n            key = i\n            max_occur = cnt[i]\n    del cnt[key]\n    if max_occur > n:\n        temp = max_occur\n        pairs = 0\n        for i in cnt:\n            pairs += cnt[i]\n            temp -= cnt[i]\n        if pairs + 1 < temp // 2:\n            print('NO')\n        else:\n            print('YES')\n    else:\n        print('YES')", "n = int(input())\nfor u in range(n):\n    k = int(input())\n    arr = list(map(int, input().split()))\n    a = {}\n    for i in range(2 * k):\n        a[arr[i]] = 0\n    for i in range(2 * k):\n        a[arr[i]] += 1\n    aa = []\n    ma = 0\n    for kk in a:\n        ma = max(ma, a[kk])\n        aa.append(a[kk])\n    s = sum(aa) - ma\n    if ma - s < 0:\n        print('YES')\n    elif s + 1 < (ma - s) // 2:\n        print('NO')\n    else:\n        print('YES')", "import math\nfor t in range(int(input())):\n    num = int(input())\n    nums = list(map(int, input().split()))\n    nums.sort()\n    i = 0\n    j = 2 * num - 1\n    order = 1\n    b = []\n    while i < j:\n        if order % 2 == 0:\n            b.append(abs(nums[j] - nums[i]))\n        else:\n            b.append(abs(nums[i] - nums[j]) * -1)\n        order += 1\n        i += 1\n        j -= 1\n    d = {}\n    for i in b:\n        d[i] = d.get(i, 0) + 1\n    d = list(sorted(d.items(), key=lambda x: -x[1]))\n    if d[0][1] <= (num + 1) / 2:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    i = 0\n    j = 2 * n - 1\n    f = 1\n    b = []\n    while i < j:\n        if f % 2 == 0:\n            b.append(abs(arr[j] - arr[i]))\n        else:\n            b.append(abs(arr[i] - arr[j]) * -1)\n        f += 1\n        i += 1\n        j -= 1\n    d = {}\n    for i in b:\n        d[i] = d.get(i, 0) + 1\n    d = list(sorted(d.items(), key=lambda x: -x[1]))\n    if d[0][1] <= (n + 1) / 2:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = Counter(map(int, input().split())).most_common()[0][1]\n    if 2 * s > 3 * n + 1:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict(Counter(a))\n    l = []\n    for i in d:\n        l.append(d[i])\n    l = sorted(l, reverse=True)\n    g = sum(l)\n    x = g * 0.76\n    h = l[0]\n    x = int(x)\n    if h <= x:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = Counter(map(int, input().split())).most_common()[0][1]\n    r = 2 * n - s\n    z = (s - r) // 2\n    if z > n - z + 1:\n        print('NO')\n    else:\n        print('YES')", "from collections import Counter\nfor _ in range(int(input())):\n    size = int(input())\n    L = list(map(int, input().split()))\n    C = Counter(L)\n    n = size // 2\n    if len(C) >= n + 1:\n        print('YES')\n        continue\n    else:\n        L = list(C.values())\n        x = max(L)\n        if size * 2 - x >= n:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    n1 = n // 2\n    l = list(map(int, input().split()))\n    s = set(l)\n    l.sort()\n    le = len(l)\n    i = 0\n    j = le - 1\n    new = []\n    flag = 0\n    while i < j:\n        if flag == 0:\n            dif = l[j] - l[i]\n            flag = 1\n        else:\n            dif = l[i] - l[j]\n            flag = 0\n        i += 1\n        j -= 1\n        new.append(dif)\n    d = dict()\n    mx = 0\n    for k in new:\n        if k not in d:\n            d[k] = 0\n        d[k] += 1\n        if d[k] > mx:\n            mx = d[k]\n    zz = (n + 1) // 2\n    if mx <= zz:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    maxx = n\n    if n % 2 == 0:\n        maxx += n // 2\n    else:\n        maxx += n // 2 + 1\n    d = dict()\n    for i in a:\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    flag = 1\n    for i in d:\n        if d[i] > maxx:\n            flag = 0\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = defaultdict(lambda : 0)\n    for i in range(2 * n):\n        d[arr[i]] += 1\n    ans = 0\n    for x in list(d.keys()):\n        ans = abs(ans - d[x])\n    ans = ans // 2\n    val = n // 2 + n % 2\n    if ans > val:\n        print('NO')\n    else:\n        print('YES')", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nt = inp()\nfor i in range(t):\n    n = inp()\n    l = li()\n    d = {}\n    for i in l:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    (s, m) = (0, 0)\n    for i in d:\n        if d[i] > m:\n            m = d[i]\n        s += d[i]\n    t = s - m\n    if m > t * 3 + 2:\n        pr('NO')\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = {}\n    for i in range(len(a)):\n        if a[i] in m:\n            m[a[i]] += 1\n        else:\n            m[a[i]] = 1\n    ans = 0\n    for i in m.keys():\n        ans = max(ans, m[i])\n    if ans > n:\n        left = ans - (2 * n - ans)\n        left /= 2\n        if 2 * n - ans + 1 >= left:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    val = (3 * n + 1) // 2\n    di = {}\n    for item in nums:\n        if item in di:\n            di[item] += 1\n        else:\n            di[item] = 1\n    maxi = -1\n    for key in di:\n        if di[key] > maxi:\n            maxi = di[key]\n    if maxi > val:\n        print('NO')\n    else:\n        print('YES')", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = 0\n    for i in arr:\n        c = arr.count(i)\n        if c > x:\n            x = c\n    diff = 2 * n - x\n    diffpairs = x - diff\n    mp = diffpairs // 2\n    if mp > n - mp + 1:\n        print('NO')\n    else:\n        print('YES')", "import sys, math, random\n\ndef get_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(sys.stdin.readline())\nfor t2 in range(t):\n    n = int(input())\n    a = get_arr()\n    y = 1\n    x = 0\n    fl = 0\n    for i in range(10 ** 3):\n        random.shuffle(a)\n        hq = {}\n        ma = 0\n        for i in range(n):\n            val = a[2 * i] - a[2 * i + 1]\n            if val in hq.keys():\n                hq[val] += 1\n                ma = max(ma, hq[val])\n            else:\n                hq[val] = 1\n        if ma <= (n + 1) // 2:\n            print('YES')\n            fl = 1\n            break\n    if fl == 0:\n        print('NO')", "from collections import deque\nfrom math import ceil, sqrt\n\ndef isSorted(arr):\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return 0\n    return 1\n\ndef func(arr, n):\n    used = [0] * (2 * n)\n    eq = 1\n    d = {}\n    for i in range(2 * n):\n        if arr[i] in d:\n            d[arr[i]] += 1\n        else:\n            d[arr[i]] = 1\n    m = 0\n    for i in d.values():\n        if i > m:\n            m = i\n    zc = m // 2\n    matched = len(arr) - m\n    zc = (m - matched) // 2\n    if zc > matched + 1:\n        return 0\n    return 1\n\ndef primeFactors(n, m):\n    factors = set()\n    while n % 2 == 0:\n        (factors.add(2),)\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            (factors.add(i),)\n            n = n / i\n    if n > 2:\n        factors.add(n)\n    A = 1\n    for i in factors:\n        A *= i\n    return A\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = func(arr, n)\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split()))\n    s.sort()\n    res = []\n    for i in range(n):\n        if i % 2 == 0:\n            res.append(s[i] - s[2 * n - i - 1])\n        else:\n            res.append(s[2 * n - 1 - i] - s[i])\n    x = Counter(res).most_common(1)[0][1]\n    if x <= (n + 1) // 2:\n        print('YES')\n    else:\n        print('NO')"]