["t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    a = input()\n    d = {}\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    s = ''\n    flag = False\n    v = list(d.values())\n    if max(v) - min(v) <= k:\n        while len(s) < len(a):\n            while not flag and d:\n                keys = sorted(list(d.keys()))\n                if d[keys[-1]] <= k:\n                    s = keys[-1] * d[keys[-1]] + s\n                    del d[keys[-1]]\n                else:\n                    s = keys[-1] * (k - 1) + s\n                    d[keys[-1]] -= k - 1\n                    flag = True\n            while flag and d:\n                keys = sorted(list(d.keys()))\n                s = ''.join(sorted(list(d.keys()))) + s\n                l = []\n                for j in d:\n                    d[j] -= 1\n                    if d[j] == 0:\n                        l.append(j)\n                if d[keys[-1]] < 2:\n                    flag = False\n                for j in l:\n                    del d[j]\n        print(s)\n    else:\n        print(-1)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = input()\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n            continue\n        d[i] = 1\n    if max(d.values()) - min(d.values()) > k:\n        print(-1)\n        continue\n    a = ''\n    x = sorted(d.keys())\n    for i in range(n):\n        for j in x:\n            if d[j] == 0:\n                continue\n            d[j] -= 1\n            if max(d.values()) - min(d.values()) <= k:\n                a += j\n                break\n            d[j] += 1\n    print(a)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = input()\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n            continue\n        d[i] = 1\n    if max(d.values()) - min(d.values()) > k:\n        print(-1)\n        continue\n    a = ''\n    x = sorted(d.keys())\n    for i in range(n):\n        for j in x:\n            if d[j] == 0:\n                continue\n            d[j] -= 1\n            if max(d.values()) - min(d.values()) <= k:\n                a += j\n                break\n            d[j] += 1\n    print(a)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = input()\n    d = {}\n    for i in l:\n        if i in d:\n            d[i] += 1\n            continue\n        d[i] = 1\n    if max(d.values()) - min(d.values()) > k:\n        print(-1)\n        continue\n    a = ''\n    x = sorted(d.keys())\n    for i in range(n):\n        for j in x:\n            if d[j] == 0:\n                continue\n            d[j] -= 1\n            if max(d.values()) - min(d.values()) <= k:\n                a += j\n                break\n            d[j] += 1\n    print(a)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    chs = list(set(s))\n    chs.sort()\n    num_chs = len(chs)\n    counts = [s.count(c) for c in chs]\n    max_count = max(counts)\n    max_location = max((i for i in range(num_chs) if counts[i] == max_count))\n    if max_count - min(counts) > k:\n        print(-1)\n        continue\n    output = []\n    min_poss = max_count - k\n    while min_poss > 0:\n        for i in range(max_location):\n            if counts[i] > min_poss:\n                output.append(chs[i] * (counts[i] - min_poss))\n                counts[i] = min_poss\n        output.append(chs[max_location])\n        max_count -= 1\n        min_poss -= 1\n        counts[max_location] -= 1\n        for i in range(max_location, num_chs):\n            if counts[i] == max_count:\n                max_location = i\n    for i in range(num_chs):\n        output.append(chs[i] * counts[i])\n    print(''.join(output))", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    chs = list(set(s))\n    chs.sort()\n    num_chs = len(chs)\n    counts = [s.count(c) for c in chs]\n    max_count = max(counts)\n    max_location = max((i for i in range(num_chs) if counts[i] == max_count))\n    if max_count - min(counts) > k:\n        print(-1)\n        continue\n    output = []\n    min_poss = max_count - k\n    while min_poss > 0:\n        for i in range(max_location):\n            if counts[i] > min_poss:\n                output.append(chs[i] * (counts[i] - min_poss))\n                counts[i] = min_poss\n        output.append(chs[max_location])\n        max_count -= 1\n        min_poss -= 1\n        counts[max_location] -= 1\n        for i in range(max_location, num_chs):\n            if counts[i] == max_count:\n                max_location = i\n    for i in range(num_chs):\n        output.append(chs[i] * counts[i])\n    print(''.join(output))", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    chs = list(set(s))\n    chs.sort()\n    num_chs = len(chs)\n    counts = [s.count(c) for c in chs]\n    max_count = max(counts)\n    max_location = max((i for i in range(num_chs) if counts[i] == max_count))\n    if max_count - min(counts) > k:\n        print(-1)\n        continue\n    output = []\n    min_poss = max_count - k\n    while min_poss > 0:\n        for i in range(max_location):\n            if counts[i] > min_poss:\n                output.append(chs[i] * (counts[i] - min_poss))\n                counts[i] = min_poss\n        output.append(chs[max_location])\n        max_count -= 1\n        min_poss -= 1\n        counts[max_location] -= 1\n        for i in range(max_location, num_chs):\n            if counts[i] == max_count:\n                max_location = i\n    for i in range(num_chs):\n        output.append(chs[i] * counts[i])\n    print(''.join(output))", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    assert len(s) == n\n    chs = list(set(s))\n    chs.sort()\n    cts = dict(((c, s.count(c)) for c in chs))\n    if max(cts.values()) > min(cts.values()) + k:\n        print(-1)\n        continue\n    output = []\n    while n > 0:\n        for c0 in chs:\n            if cts[c0] > 0:\n                cts2 = cts.copy()\n                cts2[c0] -= 1\n                if max(cts2.values()) <= min(cts2.values()) + k:\n                    break\n        output.append(c0)\n        cts[c0] -= 1\n        n -= 1\n    print(''.join(output))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    freq = {}\n    for c in input():\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    if max(freq.values()) - min(freq.values()) > k:\n        print(-1)\n        continue\n    ans = ''\n    alpha = sorted(freq.keys())\n    for i in range(n):\n        for c in alpha:\n            if freq[c] == 0:\n                continue\n            freq[c] -= 1\n            if max(freq.values()) - min(freq.values()) <= k:\n                ans += c\n                break\n            freq[c] += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    freq = {}\n    for c in input():\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    if max(freq.values()) - min(freq.values()) > k:\n        print(-1)\n        continue\n    ans = ''\n    alpha = sorted(freq.keys())\n    for i in range(n):\n        for c in alpha:\n            if freq[c] == 0:\n                continue\n            freq[c] -= 1\n            if max(freq.values()) - min(freq.values()) <= k:\n                ans += c\n                break\n            freq[c] += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    freq = {}\n    for c in input():\n        if c in freq:\n            freq[c] += 1\n        else:\n            freq[c] = 1\n    if max(freq.values()) - min(freq.values()) > k:\n        print(-1)\n        continue\n    ans = ''\n    alpha = sorted(freq.keys())\n    for i in range(n):\n        for c in alpha:\n            if freq[c] == 0:\n                continue\n            freq[c] -= 1\n            if max(freq.values()) - min(freq.values()) <= k:\n                ans += c\n                break\n            freq[c] += 1\n    print(ans)", "from sys import stdin, stdout\nfrom collections import Counter\nfrom string import ascii_lowercase\ninput = stdin.readline\nr_int = lambda : int(input())\nm_int = lambda : map(int, input().split())\nl_int = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n, k) = m_int()\n    text = input().strip()\n    counts = Counter(text)\n    if len(counts) == 1:\n        print(text)\n        return\n    letters = sorted(counts.keys())\n    vmax = -1\n    lmax = None\n    vmin = n + 1\n    for x in letters:\n        c = counts[x]\n        if c > vmax:\n            vmax = c\n            lmax = x\n        if c < vmin:\n            vmin = c\n    if vmax - vmin > k:\n        print(-1)\n        return\n    out = []\n    while len(out) <= n:\n        target = max(vmax - k, 0)\n        for x in letters:\n            if x == lmax:\n                break\n            for _ in range(counts[x] - target):\n                out.append(x)\n            if target != 0:\n                counts[x] = target\n            else:\n                del counts[x]\n        out.append(lmax)\n        if vmax == 1:\n            del counts[lmax]\n        else:\n            counts[lmax] = vmax - 1\n        letters = sorted(counts.keys())\n        vmax = -1\n        lmax = None\n        for x in letters:\n            c = counts[x]\n            if c > vmax:\n                vmax = c\n                lmax = x\n        if len(letters) == 1:\n            out.append(lmax * vmax)\n            break\n    print(''.join(out))\n\ndef main():\n    n_cases = r_int()\n    for _ in range(n_cases):\n        solve()\nmain()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    if len(set(list(s))) == 1:\n        print(s)\n        continue\n    from collections import Counter\n    d = Counter(list(s))\n    if max(d.values()) - min(d.values()) > k:\n        print(-1)\n        continue\n    maxx = max(d.values())\n    for i in range(97, 97 + 26):\n        if i not in d:\n            d[i] = 0\n    ans = ''\n    for i in range(25, -1, -1):\n        curr = chr(97 + i)\n        if d[curr] > 0:\n            if d[curr] <= k:\n                ans += curr * d[curr]\n            else:\n                ans += curr * k\n                do = d[curr] - k\n                for x in range(do):\n                    extra = str(curr)\n                    for j in range(26):\n                        if chr(97 + j) != curr and d[chr(97 + j)] > 0:\n                            d[chr(97 + j)] -= 1\n                            extra += chr(97 + j)\n                    extra = extra[::-1]\n                    ans += extra\n            d[curr] = 0\n    print(ans[::-1])"]