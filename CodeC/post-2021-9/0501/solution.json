["from collections import defaultdict\ncase = int(input())\nfor t in range(case):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    count = defaultdict(int)\n    minim = -1\n    for i in range(length):\n        if arr[i] != -1:\n            if arr[i] > i + 1 or arr[i] < minim:\n                print(-1)\n                break\n            else:\n                minim = arr[i]\n                count[arr[i]] += 1\n    else:\n        smallest = 0\n        ans = [None] * length\n        i = 0\n        next = -1\n        while i < length:\n            if next != -1:\n                if next == smallest:\n                    smallest += 1\n                ans[i] = next\n                next = -1\n                if arr[i] != -1:\n                    count[arr[i]] -= 1\n                    if count[arr[i]] == 0:\n                        next = arr[i]\n                i += 1\n            elif count[smallest] == 0:\n                ans[i] = smallest\n                if arr[i] != -1:\n                    count[arr[i]] -= 1\n                    if count[arr[i]] == 0:\n                        next = arr[i]\n                i += 1\n                smallest += 1\n            else:\n                smallest += 1\n        print(' '.join(map(str, ans)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    if any((b[i] > i + 1 for i in range(n))):\n        print(-1)\n    elif b == [-1] * n:\n        print(' '.join(list(map(str, range(0, n)))))\n    else:\n        flag = True\n        mx = -1\n        for el in b:\n            if el == -1:\n                continue\n            if mx == -1 or el > mx:\n                mx = el\n            elif mx != -1 and el < mx:\n                flag = False\n                break\n        if not flag:\n            print(-1)\n        else:\n            (non_occr, vis) = ([], [0] * (n + 1))\n            for el in b:\n                vis[el] += 1\n            for i in range(n + 1):\n                if vis[i] == 0:\n                    non_occr += [i]\n            (ind, a) = (0, [0] * n)\n            (curr, size) = (non_occr[ind], len(non_occr))\n            mx = max(b) + 1\n            for i in range(n):\n                a[i] = curr\n                if b[i] != -1:\n                    vis[b[i]] -= 1\n                    if vis[b[i]] == 0:\n                        curr = b[i]\n                    else:\n                        ind += 1\n                        curr = non_occr[ind] if ind < size else mx\n                elif ind + 1 < size:\n                    ind += 1\n                    curr = non_occr[ind]\n                else:\n                    curr = mx\n            print(' '.join(list(map(str, a))))", "import math\nfrom math import floor, ceil\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef isSubsequence(s, t):\n    for i in range(0, len(s)):\n        try:\n            index = t.index(s[i])\n        except ValueError:\n            return False\n        t = t[index + 1:]\n    return True\nfor _ in range(int(input())):\n    N = int(input())\n    B = list(map(int, input().split()))\n    poss = True\n    for i in range(N):\n        num = B[i]\n        vac = i + 1\n        if num > -1:\n            num -= 1\n            if vac > num:\n                pass\n            else:\n                poss = False\n                break\n    for i in B:\n        if i > -1:\n            vals = [i]\n            break\n    so = vals[0]\n    for i in range(1, len(B)):\n        if B[i] > -1:\n            if B[i] >= so:\n                so = B[i]\n            else:\n                poss = False\n                break\n    if poss:\n        A = [-100 for i in range(N)]\n        unfilled = []\n        maxIndex = {}\n        for i in range(len(B)):\n            if B[i] > -1:\n                maxIndex[B[i]] = i + 1\n        for i in range(2 * N):\n            if i not in maxIndex:\n                unfilled.append(i)\n        for x in maxIndex:\n            if maxIndex[x] < N:\n                A[maxIndex[x]] = x\n        currI = 0\n        for i in range(len(A)):\n            if A[i] == -100:\n                A[i] = unfilled[currI]\n                currI += 1\n        print(' '.join([str(i) for i in A]))\n    else:\n        print(-1)", "def check(n, a):\n    ar = []\n    mx = -1\n    for i in range(n):\n        if a[i] != -1:\n            if a[i] < mx:\n                return -1\n            if a[i] > i + 1:\n                return -1\n            mx = max(mx, a[i])\n            ar.append([i, a[i]])\n    data = [i for i in range(n + 1)]\n    for i in range(len(ar) - 1, -1, -1):\n        val1 = data[ar[i][0] + 1]\n        data[ar[i][0] + 1] = data[ar[i][1]]\n        data[ar[i][1]] = val1\n    return data\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sharma = check(n, a)\n    if sharma == -1:\n        print(-1)\n    else:\n        print(*sharma[0:n])", "import math\nfrom math import floor, ceil\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef isSubsequence(s, t):\n    for i in range(0, len(s)):\n        try:\n            index = t.index(s[i])\n        except ValueError:\n            return False\n        t = t[index + 1:]\n    return True\nfor _ in range(int(input())):\n    N = int(input())\n    B = list(map(int, input().split()))\n    poss = True\n    for i in range(N):\n        num = B[i]\n        vac = i + 1\n        if num > -1:\n            num -= 1\n            if vac > num:\n                pass\n            else:\n                poss = False\n                break\n    for i in B:\n        if i > -1:\n            vals = [i]\n            break\n    so = vals[0]\n    for i in range(1, len(B)):\n        if B[i] > -1:\n            if B[i] >= so:\n                so = B[i]\n            else:\n                poss = False\n                break\n    if poss:\n        A = [-100 for i in range(N)]\n        unfilled = []\n        maxIndex = {}\n        for i in range(len(B)):\n            if B[i] > -1:\n                maxIndex[B[i]] = i + 1\n        for i in range(2 * N):\n            if i not in maxIndex:\n                unfilled.append(i)\n        for x in maxIndex:\n            if maxIndex[x] < N:\n                A[maxIndex[x]] = x\n        currI = 0\n        for i in range(len(A)):\n            if A[i] == -100:\n                A[i] = unfilled[currI]\n                currI += 1\n        print(' '.join([str(i) for i in A]))\n    else:\n        print(-1)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    b = list(map(int, input().split()))\n    c = [0] * (10 ** 5 + 3)\n    a = []\n    temp = -1\n    flag = 1\n    for i in range(n):\n        if b[i] != -1:\n            if b[i] - 1 > i:\n                flag = 0\n                break\n            if b[i] >= temp:\n                temp = b[i]\n            elif b[i] < temp:\n                flag = 0\n                break\n    if flag:\n        for i in range(n):\n            if b[i] != -1:\n                c[b[i]] += 1\n        k = 0\n        temp = 0\n        for i in range(n):\n            if c[temp] == 0:\n                a.append(temp)\n                c[temp] = 1\n                if b[i] != -1:\n                    temp = b[i]\n                    c[temp] -= 1\n            elif b[i] != -1:\n                temp = b[i]\n                while c[k]:\n                    k += 1\n                a.append(k)\n                c[k] = 1\n                c[temp] -= 1\n            else:\n                while c[k]:\n                    k += 1\n                a.append(k)\n                c[k] = 1\n        print(*a)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input().split()]\n    flag = 0\n    max1 = -1\n    for i in range(n):\n        if s[i] > i + 1:\n            flag = 1\n            break\n        if s[i] < max1 and s[i] != -1:\n            flag = 1\n            break\n        max1 = max(s[i], max1)\n    if flag == 1:\n        print(-1)\n    else:\n        ans = [i for i in range(n + 1)]\n        ar = []\n        for i in range(n):\n            if s[i] != -1:\n                ar.append([i, s[i]])\n        for i in range(len(ar) - 1, -1, -1):\n            temp = ans[ar[i][0] + 1]\n            ans[ar[i][0] + 1] = ans[ar[i][1]]\n            ans[ar[i][1]] = temp\n        print(*ans[0:n])", "import math\nfrom math import floor, ceil\n\ndef lcm(a, b):\n    return abs(a * b) // math.gcd(a, b)\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef isSubsequence(s, t):\n    for i in range(0, len(s)):\n        try:\n            index = t.index(s[i])\n        except ValueError:\n            return False\n        t = t[index + 1:]\n    return True\nfor _ in range(int(input())):\n    N = int(input())\n    B = list(map(int, input().split()))\n    poss = True\n    for i in range(N):\n        num = B[i]\n        vac = i + 1\n        if num > -1:\n            num -= 1\n            if vac > num:\n                pass\n            else:\n                poss = False\n                break\n    for i in B:\n        if i > -1:\n            vals = [i]\n            break\n    so = vals[0]\n    for i in range(1, len(B)):\n        if B[i] > -1:\n            if B[i] >= so:\n                so = B[i]\n            else:\n                poss = False\n                break\n    if poss:\n        A = [-100 for i in range(N)]\n        unfilled = []\n        maxIndex = {}\n        for i in range(len(B)):\n            if B[i] > -1:\n                maxIndex[B[i]] = i + 1\n        for i in range(2 * N):\n            if i not in maxIndex:\n                unfilled.append(i)\n        for x in maxIndex:\n            if maxIndex[x] < N:\n                A[maxIndex[x]] = x\n        currI = 0\n        for i in range(len(A)):\n            if A[i] == -100:\n                A[i] = unfilled[currI]\n                currI += 1\n        print(' '.join([str(i) for i in A]))\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    last_no = arr[0]\n    ans = [-1 for x in range(n + 1)]\n    used = [False for x in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        if arr[i] != -1 and used[arr[i]] == False:\n            ans[i + 1] = arr[i]\n            used[arr[i]] = True\n    j = 0\n    for i in range(n + 1):\n        if ans[i] != -1:\n            continue\n        while used[j] == True:\n            j += 1\n        ans[i] = j\n        j += 1\n    used = [False for x in range(n + 1)]\n    lastMex = 0\n    for i in range(n):\n        used[ans[i]] = True\n        if arr[i] != -1:\n            for j in range(lastMex, i + 1):\n                if used[j] == False:\n                    lastMex = j\n                    break\n            else:\n                lastMex = i + 1\n            if lastMex != arr[i]:\n                print(-1)\n                break\n    else:\n        ans = ans[:-1]\n        if len(set(ans)) == n and ans.count('-1') == 0:\n            for a in ans:\n                print(a, end=' ')\n            print()\n        else:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    mex = list(map(int, input().split()))\n    remmex = {}\n    flag = False\n    for i in range(n):\n        if mex[i] > i + 1:\n            print(-1)\n            flag = True\n            break\n        if mex[i] != -1:\n            if mex[i] not in remmex:\n                remmex[mex[i]] = 1\n            else:\n                remmex[mex[i]] += 1\n    if flag:\n        continue\n    resarr = []\n    used = set()\n    currmin = 0\n    for i in range(n):\n        j = currmin\n        while j in remmex or j in used:\n            j += 1\n        resarr.append(j)\n        used.add(j)\n        if mex[i] != -1:\n            if remmex[mex[i]] == 1:\n                del remmex[mex[i]]\n            else:\n                remmex[mex[i]] -= 1\n        while currmin in used:\n            currmin += 1\n    print(*resarr)", "for _ in range(int(input())):\n    n = int(input())\n    mex = list(map(int, input().split()))\n    remmex = {}\n    flag = False\n    for i in range(n):\n        if mex[i] > i + 1:\n            print(-1)\n            flag = True\n            break\n        if mex[i] != -1:\n            if mex[i] not in remmex:\n                remmex[mex[i]] = 1\n            else:\n                remmex[mex[i]] += 1\n    if flag:\n        continue\n    resarr = []\n    used = set()\n    currmin = 0\n    for i in range(n):\n        j = currmin\n        while j in remmex or j in used:\n            j += 1\n        resarr.append(j)\n        used.add(j)\n        if mex[i] != -1:\n            if remmex[mex[i]] == 1:\n                del remmex[mex[i]]\n            else:\n                remmex[mex[i]] -= 1\n        while currmin in used:\n            currmin += 1\n    print(*resarr)", "import sys\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef dist(x1, x2, y1, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef get_power(n):\n    i = 1\n    p = -1\n    while i <= n:\n        i = i * 2\n        p += 1\n    return p\n\ndef solve(t):\n    n = readInts()\n    ar = readList()\n    ind = {}\n    for i in range(n):\n        num = ar[i]\n        if num - 1 > i:\n            print(-1)\n            return None\n        if num != -1:\n            ind[num] = i\n    res = []\n    rem = [x for x in range(n + 1)]\n    for i in range(n):\n        for j in range(len(rem)):\n            r = rem[j]\n            if r not in ind or ind[r] < i:\n                res.append(r)\n                rem.pop(j)\n                break\n    print(*res)\n\ndef main():\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "import sys\nimport math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nimport heapq\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    flag = False\n    for i in range(n):\n        if arr[i] > i + 1:\n            flag = True\n            break\n    if flag:\n        print(-1)\n        continue\n    q = []\n    count = {}\n    for i in arr:\n        if i >= 0:\n            if i not in count:\n                count[i] = 1\n            else:\n                count[i] += 1\n    for i in range(n + 1):\n        if i not in count:\n            q.append(i)\n    heapq.heapify(q)\n    ans = []\n    for i in arr:\n        ans.append(heapq.heappop(q))\n        if i >= 0:\n            count[i] -= 1\n        if i >= 0 and count[i] == 0:\n            heapq.heappush(q, i)\n            count.pop(i)\n    print(' '.join(list(map(str, ans))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [-1 for i in range(n)]\n    d = dict()\n    j = 1\n    for i in a:\n        d[i] = j\n        j += 1\n    s = set()\n    if a[-1] != -1:\n        s.add(a[-1])\n    for i in d:\n        if i != -1 and d[i] != n:\n            ans[d[i]] = i\n            s.add(i)\n    i = 0\n    now = 0\n    while i < n:\n        while now in s:\n            now += 1\n        if ans[i] != -1:\n            i += 1\n            continue\n        else:\n            ans[i] = now\n            s.add(now)\n    mex = []\n    now = 0\n    s = set()\n    for i in range(n):\n        s.add(ans[i])\n        while now in s:\n            now += 1\n        mex.append(now)\n    fl = 1\n    for i in range(n):\n        if a[i] == -1:\n            continue\n        elif a[i] != mex[i]:\n            fl = 0\n            break\n    if fl == 0:\n        print(-1)\n    else:\n        print(*ans)"]