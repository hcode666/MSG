["for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    num2 = 0\n    while n % 2 == 0:\n        num2 += 1\n        n //= 2\n    if num2 == 0:\n        print(1)\n    elif num2 % 2 == 0 and n != 1:\n        ans = 2\n        for i in range(2, num2 + 1):\n            if num2 % i == 0:\n                if (n ** (1 / i)).is_integer() and (2 ** (num2 / i) * n ** (1 / i) + i) % 2 == 0:\n                    ans = 1\n                    break\n        print(ans)\n    elif num2 % 2 == 0 and n == 1:\n        print(1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    num2 = 0\n    while n % 2 == 0:\n        num2 += 1\n        n //= 2\n    if num2 == 0:\n        print(1)\n    elif num2 % 2 == 0 and n != 1:\n        ans = 2\n        for i in range(2, num2 + 1):\n            if num2 % i == 0:\n                if (n ** (1 / i)).is_integer() and (2 ** (num2 / i) * n ** (1 / i) + i) % 2 == 0:\n                    ans = 1\n                    break\n        print(ans)\n    elif num2 % 2 == 0 and n == 1:\n        print(1)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = math.sqrt(n)\n    if n % 2 == 1:\n        print(min(n - 1, 1))\n    elif r == math.floor(r):\n        print(1)\n    else:\n        while n >= 4 and n % 4 == 0:\n            n /= 4\n        if n == 1:\n            print(1)\n        elif n % 2 == 1:\n            print(2)\n        else:\n            print(-1)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    r = math.sqrt(n)\n    if n % 2 == 1:\n        print(min(n - 1, 1))\n    elif r == math.floor(r):\n        print(1)\n    else:\n        while n >= 4 and n % 4 == 0:\n            n /= 4\n        if n == 1:\n            print(1)\n        elif n % 2 == 1:\n            print(2)\n        else:\n            print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = math.sqrt(n)\n    if n % 2 == 1:\n        print(min(n - 1, 1))\n    elif r == math.floor(r):\n        print(1)\n    else:\n        while n >= 4 and n % 4 == 0:\n            n /= 4\n        if n == 1:\n            print(1)\n        elif n % 2 == 1:\n            print(2)\n        else:\n            print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = math.sqrt(n)\n    if n % 2 == 1:\n        print(min(n - 1, 1))\n    elif r == math.floor(r):\n        print(1)\n    else:\n        while n >= 4 and n % 4 == 0:\n            n /= 4\n        if n == 1:\n            print(1)\n        elif n % 2 == 1:\n            print(2)\n        else:\n            print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = math.sqrt(n)\n    if n % 2 == 1:\n        print(min(n - 1, 1))\n    elif r == math.floor(r):\n        print(1)\n    else:\n        while n >= 4 and n % 4 == 0:\n            n /= 4\n        if n == 1:\n            print(1)\n        elif n % 2 == 1:\n            print(2)\n        else:\n            print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = math.sqrt(n)\n    if n % 2 == 1:\n        print(min(n - 1, 1))\n    elif r == math.floor(r):\n        print(1)\n    else:\n        while n >= 4 and n % 4 == 0:\n            n /= 4\n        if n == 1:\n            print(1)\n        elif n % 2 == 1:\n            print(2)\n        else:\n            print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = math.sqrt(n)\n    if n % 2 == 1:\n        print(min(n - 1, 1))\n    elif r == math.floor(r):\n        print(1)\n    else:\n        while n >= 4 and n % 4 == 0:\n            n /= 4\n        if n == 1:\n            print(1)\n        elif n % 2 == 1:\n            print(2)\n        else:\n            print(-1)", "import math\n\ndef check(n):\n    if n == 1:\n        return 0\n    cnt = 0\n    while n % 2 == 0:\n        n //= 2\n        cnt += 1\n    if cnt == 0:\n        return 1\n    elif cnt % 2 == 1:\n        return -1\n    x = int(math.sqrt(n))\n    if x * x == n:\n        return 1\n    return 2\nfor _ in range(int(input())):\n    n = int(input())\n    print(check(n))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    t = n\n    x = math.sqrt(n)\n    flag = 0\n    count = 0\n    while flag != 1:\n        if t % 2 == 0:\n            t = t // 2\n            count += 1\n        else:\n            flag = 1\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif count % 2 == 1:\n        print(-1)\n    elif int(x) * int(x) == n:\n        print(1)\n    else:\n        print(2)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    if N == 1:\n        print(0)\n        continue\n    (bit, Y) = (0, N)\n    while Y % 2 == 0:\n        Y //= 2\n        bit += 1\n    if bit == 0:\n        print(1)\n    elif bit & 1:\n        print(-1)\n    else:\n        x = int(math.sqrt(N))\n        print(1 if x * x == N else 2)", "import math\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    if m == 1:\n        print('0')\n    elif m % 2 != 0:\n        print('1')\n    elif math.sqrt(m) == int(math.sqrt(m)):\n        print('1')\n    else:\n        a = [2]\n        x = m\n        while x % 2 == 0:\n            x //= 2\n            if x % 2 == 0:\n                a.append(2)\n            elif x != 1:\n                a.append(x)\n        if a.count(2) % 2 != 0:\n            print('-1')\n        elif a[-1] % 2 == 0:\n            print('1')\n        else:\n            print('2')", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    k = 0\n    while n % 2 == 0:\n        n //= 2\n        k += 1\n    if k % 2 == 1:\n        print(-1)\n    elif k == 0:\n        print(1)\n    elif n == int(sqrt(n)) ** 2:\n        print(1)\n    else:\n        print(2)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    count = 0\n    x = n\n    a = int(math.sqrt(n))\n    while x % 2 == 0:\n        x = x // 2\n        count += 1\n    if n == 1:\n        print('0')\n    elif n % 2 != 0:\n        print('1')\n    elif a * a == n:\n        print('1')\n    elif count % 2 != 0:\n        print('-1')\n    elif x == 1:\n        print(1)\n    else:\n        print('2')", "import math\nfor i in range(int(input())):\n    n = int(input())\n    count = 0\n    x = n\n    a = int(math.sqrt(n))\n    while x % 2 == 0:\n        x = x // 2\n        count += 1\n    if n == 1:\n        print('0')\n    elif n % 2 != 0:\n        print('1')\n    elif a * a == n:\n        print('1')\n    elif count % 2 != 0:\n        print('-1')\n    elif x == 1:\n        print(1)\n    else:\n        print('2')", "def np2(x):\n    n = 0\n    while x % 2 == 0:\n        x = x // 2\n        n += 1\n    return (n, x)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        (p, nn) = np2(n)\n        if p % 2 != 0:\n            print(-1)\n        else:\n            nr = nn ** (1 / 2)\n            if nr.is_integer():\n                print(1)\n            else:\n                print(2)", "from math import sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif int(sqrt(n)) ** 2 == n:\n        print(1)\n    else:\n        cnt = 0\n        while n % 2 == 0:\n            cnt += 1\n            n = n // 2\n        if cnt % 2 == 1:\n            print(-1)\n        elif n == 1:\n            print(1)\n        else:\n            print(2)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n = n // 2\n    if count == 0:\n        print(1)\n        continue\n    elif count % 2 == 1:\n        print(-1)\n        continue\n    x = int(n ** (1 / 2))\n    if x * x == n:\n        print(1)\n    else:\n        print(2)", "import sys\nimport os\nimport math\nfrom collections import *\nimport bisect\nfrom heapq import *\nfrom itertools import permutations\nif os.path.exists('input.txt') and os.path.exists('output.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    k1 = math.gcd(a, b)\n    k2 = a * b\n    return k2 // k1\n\ndef inp():\n    return map(int, input().strip().split(' '))\n\ndef lis():\n    return list(inp())\nmod = 998244353\n\ndef prim(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nma = 2 * (10 ** 5 + 1)\n\ndef update(ind, val, n):\n    while ind <= n:\n        fenwick[ind] += val\n        ind += ind & -ind\n\ndef qsum(ind):\n    ans = 0\n    while ind > 0:\n        ans += fenwick[ind]\n        ind -= ind & -ind\n    return ans\n\ndef dfs(adj, vis, u, l):\n    vis[u] = 1\n    l.add(u)\n    for i in adj[u]:\n        if vis[i] == 0:\n            dfs(adj, vis, i, l)\nmod = 10 ** 9 + 7\nma = 1002\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\n\ndef dfs(i, j, arr, vis, n, m):\n    vis[i][j] = 1\n    for x in range(4):\n        mx = i + dx[x]\n        my = j + dy[x]\n        if mx >= 0 and mx < n and (my >= 0) and (my < m) and (vis[mx][my] == 0):\n            if arr[i][j] >= arr[mx][my]:\n                dfs(mx, my, arr, vis, n, m)\n\ndef dfs(a, vis, node, c):\n    vis[node] = 1\n    c[0] += 1\n    if vis[a[node]] == 0:\n        dfs(a, vis, a[node], c)\nmod = 998244353\n\ndef f(n):\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\nmod = 10 ** 9 + 7\n\ndef finv(p, q):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef solve():\n    n = int(input())\n    cnt = 0\n    c = n\n    while c % 2 == 0:\n        cnt += 1\n        c //= 2\n    if n == 1:\n        print(0)\n        return\n    if n & 1:\n        print(1)\n        return\n    if cnt & 1:\n        print(-1)\n        return\n    if math.sqrt(n) % 1 == 0:\n        print(1)\n        return\n    print(2)\nt = int(input())\nfor _ in range(t):\n    solve()", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        cnt = 0\n        while n % 2 == 0:\n            n = n // 2\n            cnt = cnt + 1\n        if cnt == 0:\n            print(1)\n        elif cnt % 2 == 1:\n            print(-1)\n        else:\n            x = int(sqrt(n))\n            if x * x == n:\n                print(1)\n            else:\n                print(2)", "import math\ntry:\n\n    def fun(n):\n        cnt = 0\n        while n % 2 == 0:\n            n = n // 2\n            cnt += 1\n        return cnt\n    for _ in range(int(input())):\n        n = int(input())\n        if n == 1:\n            print(0)\n        elif n & 1:\n            print(1)\n        elif fun(n) & 1:\n            print(-1)\n        elif math.ceil(math.sqrt(n)) == math.floor(math.sqrt(n)):\n            print(1)\n        elif math.ceil(math.sqrt(n)) != math.floor(math.sqrt(n)):\n            print(2)\nexcept:\n    pass", "import math\n\ndef solve():\n    n = int(input())\n    if n == 1:\n        print(0)\n        return\n    if n % 2 == 1:\n        print(1)\n        return\n    cnt = 0\n    while n > 0 and n % 2 == 0:\n        cnt += 1\n        n = n // 2\n    if cnt % 2 == 1:\n        print(-1)\n        return\n    s = int(math.sqrt(n))\n    if s * s == n:\n        print(1)\n    else:\n        print(2)\nfor _ in range(int(input())):\n    solve()", "import itertools\nimport collections, math\nfrom collections import defaultdict\nfrom collections import Counter\nimport sys\nimport heapq\nfrom heapq import *\nfor t in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    if n % 2 == 1:\n        print(1)\n    elif n ** 0.5 == int(n ** 0.5):\n        print(1)\n    else:\n        p2 = 0\n        N = n\n        while n % 2 == 0:\n            p2 += 1\n            n = n // 2\n        if p2 % 2 == 0:\n            print(1 + int(n > 1))\n        else:\n            print(-1)", "t = int(input())\n\ndef fac(n):\n    if n % 2 != 0:\n        return 0\n    return 1 + fac(n // 2)\nimport math\nfor _ in range(t):\n    n = int(input())\n    sq = int(math.sqrt(n))\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    elif n % 2 == 0 and sq * sq == n:\n        print(1)\n    elif n % 2 == 0 and fac(n) % 2 == 0:\n        print(2)\n    else:\n        print(-1)", "t = int(input())\n\ndef fac(n):\n    if n % 2 != 0:\n        return 0\n    return 1 + fac(n // 2)\nimport math\nfor _ in range(t):\n    n = int(input())\n    sq = int(math.sqrt(n))\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    elif n % 2 == 0 and sq * sq == n:\n        print(1)\n    elif n % 2 == 0 and fac(n) % 2 == 0:\n        print(2)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    m = n\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        c = 0\n        while n % 2 == 0:\n            n = n // 2\n            c += 1\n        if c % 2 == 0:\n            n1 = int(math.sqrt(m))\n            if n1 * n1 == m:\n                print(1)\n            else:\n                print(2)\n        else:\n            print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    m = n\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        c = 0\n        while n % 2 == 0:\n            n = n // 2\n            c += 1\n        if c % 2 == 0:\n            n1 = int(math.sqrt(m))\n            if n1 * n1 == m:\n                print(1)\n            else:\n                print(2)\n        else:\n            print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('0')\n        continue\n    c = 0\n    res = 0\n    m = n\n    while m % 2 == 0:\n        c += 1\n        m = m // 2\n    if c == 0:\n        print('1')\n    elif c % 2 == 1:\n        print('-1')\n    else:\n        x = int(math.sqrt(n))\n        if x * x == n:\n            print('1')\n        else:\n            print('2')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = n\n    flag = 0\n    c = 0\n    while m % 2 == 0:\n        c = c + 1\n        m = m // 2\n    chk = int(math.sqrt(n))\n    if n == 1:\n        print(0)\n    elif c == 0:\n        print(1)\n    elif chk * chk == n:\n        print(1)\n    elif c % 2 == 0 and m == 1:\n        print(1)\n    elif c % 2 == 0:\n        print(2)\n    elif c % 2 == 1:\n        print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    res = 0\n    c = 0\n    m = n\n    while m % 2 == 0:\n        c += 1\n        m = m // 2\n    if c == 0:\n        res = 1\n    elif c % 2 == 1:\n        res = -1\n    else:\n        x = int(math.sqrt(n))\n        if x * x == n:\n            res = 1\n        else:\n            res = 2\n    print(res)", "import math as m\n\ndef countTwo(n):\n    c = 0\n    while n % 2 == 0:\n        c += 1\n        n = n // 2\n    return c\nfor t in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        temp = int(m.sqrt(n))\n        if temp * temp == n:\n            print(1)\n        else:\n            x = countTwo(n)\n            if int(x) % 2 == 1:\n                print(-1)\n            else:\n                print(2)", "import math\n\ndef twos(n):\n    cnt = 0\n    while n % 2 == 0:\n        n = n // 2\n        cnt += 1\n    return cnt\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    if n == 1:\n        print('0')\n    elif n % 2 != 0:\n        print('1')\n    else:\n        x = int(math.sqrt(n))\n        if x * x == n:\n            print('1')\n        else:\n            two = twos(n)\n            if two % 2 == 0:\n                print('2')\n            else:\n                print('-1')", "import math\n\ndef countTwo(n):\n    c = 0\n    while n % 2 == 0:\n        c += 1\n        n = n // 2\n    return c\nt = int(input())\ntwos = 0\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        temp = int(math.sqrt(n))\n        if temp * temp == n:\n            print(1)\n        else:\n            twos = countTwo(n)\n            if twos % 2 == 1:\n                print(-1)\n            else:\n                print(2)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    sq = int(math.sqrt(n))\n\n    def fac(n):\n        if n % 2 != 0:\n            return 0\n        return 1 + fac(n // 2)\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    elif n % 2 == 0 and sq * sq == n:\n        print(1)\n    elif n % 2 == 0 and fac(n) % 2 == 0:\n        print(2)\n    else:\n        print(-1)", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        cnt = 0\n        while n % 2 == 0:\n            n = n // 2\n            cnt = cnt + 1\n        if cnt == 0:\n            print(1)\n        elif cnt % 2 == 1:\n            print(-1)\n        else:\n            x = int(sqrt(n))\n            if x * x == n:\n                print(1)\n            else:\n                print(2)", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        cnt = 0\n        while n % 2 == 0:\n            n = n // 2\n            cnt = cnt + 1\n        if cnt == 0:\n            print(1)\n        elif cnt % 2 == 1:\n            print(-1)\n        else:\n            x = int(sqrt(n))\n            if x * x == n:\n                print(1)\n            else:\n                print(2)", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        cnt = 0\n        while n % 2 == 0:\n            n = n // 2\n            cnt = cnt + 1\n        if cnt == 0:\n            print(1)\n        elif cnt % 2 == 1:\n            print(-1)\n        else:\n            x = int(sqrt(n))\n            if x * x == n:\n                print(1)\n            else:\n                print(2)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    if n & 1 or n ** 0.5 == int(n ** 0.5):\n        print(1)\n        continue\n    power_of_two = 0\n    while True:\n        if n % 2 == 0:\n            n = n // 2\n            power_of_two += 1\n        else:\n            break\n    if power_of_two & 1:\n        print(-1)\n        continue\n    else:\n        print(2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n\n    def prime2(n):\n        d2 = {}\n        while n % 2 == 0:\n            if 2 not in d2:\n                d2[2] = 1\n            else:\n                d2[2] = d2[2] + 1\n            n = n // 2\n        return d2\n\n    def isPerfectSquare(x):\n        if x >= 0:\n            sr = int(math.sqrt(x))\n            return sr * sr == x\n        return false\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    elif prime2(n)[2] % 2 != 0:\n        print(-1)\n    elif isPerfectSquare(n) == 1:\n        print(1)\n    else:\n        print(2)", "import math\n\ndef reduce(n):\n    if n == 1:\n        return 0\n    cnt = 0\n    while n % 2 == 0:\n        n //= 2\n        cnt += 1\n    if cnt == 0:\n        return 1\n    elif cnt % 2 == 1:\n        return -1\n    x = math.sqrt(n)\n    if n == x * x:\n        return 1\n    return 2\nfor _ in range(int(input())):\n    n = int(input())\n\n    def prime2(n):\n        d2 = {}\n        while n % 2 == 0:\n            if 2 not in d2:\n                d2[2] = 1\n            else:\n                d2[2] = d2[2] + 1\n            n = n // 2\n        return d2\n\n    def isPerfectSquare(x):\n        if x >= 0:\n            sr = int(math.sqrt(x))\n            return sr * sr == x\n        return false\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    elif prime2(n)[2] % 2 != 0:\n        print(-1)\n    elif isPerfectSquare(n) == 1:\n        print(1)\n    else:\n        print(2)", "import sys\nimport math\nimport bisect\nimport heapq\nfrom bisect import bisect_right\nfrom sys import stdin, stdout\n\ndef get_ints_in_variables():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_int():\n    return int(sys.stdin.readline())\n\ndef get_ints_in_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_list_of_list(n):\n    return [list(map(int, sys.stdin.readline().strip().split())) for _ in range(n)]\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef myceil(x, y):\n    return (x + y - 1) // y\n\ndef Solution():\n    pass\n\ndef main():\n    for _ in range(get_int()):\n        n = get_int()\n        if n == 1:\n            print(0)\n            continue\n        if n % 2:\n            print(1)\n        else:\n            pft = 0\n            t = n\n            while n % 2 == 0:\n                pft += 1\n                n = n // 2\n            if pft % 2:\n                print(-1)\n                continue\n            x = int(math.sqrt(t))\n            if x * x == t:\n                print(1)\n            else:\n                print(2)\nmain()", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        s = int(sqrt(n))\n        if s * s == n:\n            print(1)\n            continue\n        count = 0\n        while n & 1 == 0:\n            n //= 2\n            count += 1\n        if count & 1:\n            print(-1)\n        else:\n            print(2)", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        s = int(sqrt(n))\n        if s * s == n:\n            print(1)\n            continue\n        count = 0\n        while n & 1 == 0:\n            n //= 2\n            count += 1\n        if count & 1:\n            print(-1)\n        else:\n            print(2)", "import math\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 == 1:\n        return 1\n    else:\n        t = math.floor(math.sqrt(n)) - math.ceil(math.sqrt(n))\n        if t == 0:\n            return 1\n        else:\n            num = n\n            cnt = 0\n            while num % 2 == 0:\n                num //= 2\n                cnt += 1\n            if cnt % 2 == 0:\n                return 2\n            else:\n                return -1\nfor test in range(int(input())):\n    n = int(input())\n    print(solve(n))", "from math import sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        s = int(sqrt(n))\n        if s * s == n:\n            print(1)\n            continue\n        c = 0\n        while n & 1 == 0:\n            n //= 2\n            c += 1\n        if c & 1:\n            print(-1)\n        else:\n            print(2)", "from math import sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        s = int(sqrt(n))\n        if s * s == n:\n            print(1)\n            continue\n        c = 0\n        while n & 1 == 0:\n            n //= 2\n            c += 1\n        if c & 1 == 0:\n            print(2)\n        else:\n            print(-1)", "from math import sqrt\nfrom collections import defaultdict\nfrom collections import OrderedDict\nfrom collections import Counter\nfrom collections import ChainMap\n\ndef getlist():\n    return list(map(int, input().split()))\n\ndef getinp():\n    return map(int, input().split())\n\ndef solution(n):\n    if n == 1:\n        return 0\n    count = 0\n    while n % 2 == 0:\n        n = n // 2\n        count += 1\n    if count == 0:\n        return 1\n    if count & 1:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        x = n ** 0.5\n        if x == int(x):\n            return 1\n        return 2\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        print(solution(n))\nmain()", "import math\n\ndef solution(n):\n    if n == 1:\n        return 0\n    count = 0\n    while n % 2 == 0:\n        n = n // 2\n        count += 1\n    if count == 0:\n        return 1\n    if count & 1:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        x = n ** 0.5\n        if x == int(x):\n            return 1\n        return 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solution(n))", "import math\n\ndef solution(n):\n    if n == 1:\n        return 0\n    count = 0\n    while n % 2 == 0:\n        n = n // 2\n        count += 1\n    if count == 0:\n        return 1\n    if count & 1:\n        return -1\n    elif n == 1:\n        return 1\n    else:\n        x = n ** 0.5\n        if x == int(x):\n            return 1\n        return 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solution(n))", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif int(sqrt(n)) ** 2 == n:\n        print(1)\n    else:\n        cc = 0\n        while n % 2 == 0:\n            cc += 1\n            n >>= 1\n        if cc % 2 != 0:\n            print(-1)\n        else:\n            print(2)", "from bisect import bisect_left\nfrom re import sub\nimport re\nfrom typing import DefaultDict\nimport math\nfrom collections import defaultdict\nfrom math import sqrt\nimport collections\nfrom sys import maxsize\nfrom itertools import combinations_with_replacement\nimport sys\n\ndef sieve_erasthones(n):\n    cnt = 0\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    for p in range(n + 1):\n        if prime[p]:\n            cnt += 1\n    return cnt\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef count_factors(n):\n    i = 1\n    c = 0\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                c += 1\n            else:\n                c += 2\n        i += 1\n    return c\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d = DefaultDict(lambda : 0)\n    for ele in l:\n        d[ele] += 1\n    return d\n\ndef max_in_dict(d):\n    maxi = 0\n    for ele in d:\n        if d[ele] > maxi:\n            maxi = d[ele]\n    return maxi\n\ndef element_count(s):\n    l = []\n    k = s[0]\n    c = 0\n    for ele in s:\n        if ele == k:\n            c += 1\n        else:\n            l.append([k, c])\n            k = ele\n            c = 1\n    l.append([k, c])\n    return l\n\ndef modular_exponentiation(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 != 0:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef number_of_primefactor(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return len(set(l))\n\ndef twosum(a, n, x):\n    rem = []\n    for i in range(x):\n        rem.append(0)\n    for i in range(n):\n        if a[i] < x:\n            rem[a[i] % x] += 1\n    for i in range(1, x // 2):\n        if rem[i] > 0 and rem[x - i] > 0:\n            return True\n    if i >= x // 2:\n        if x % 2 == 0:\n            if rem[x // 2] > 1:\n                return True\n            else:\n                return False\n        elif rem[x // 2] > 0 and rem[x - x // 2] > 0:\n            return True\n        else:\n            return False\n\ndef divSum(num):\n    result = 0\n    i = 2\n    while i <= math.sqrt(num):\n        if num % i == 0:\n            if i == num / i:\n                result = result + i\n            else:\n                result = result + (i + num / i)\n        i = i + 1\n    return result + 1 + num\n\ndef subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0\n    i = 0\n    while j < m and i < n:\n        if str1[j] == str2[i]:\n            j = j + 1\n        i = i + 1\n    return j == m\n\ndef primeFactors(n):\n    d = defaultdict(lambda : 0)\n    while n % 2 == 0:\n        d[2] += 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d[int(i)] += 1\n            n = n / i\n    if n > 2:\n        d[int(n)] += 1\n    return d\n\ndef itr(l, k):\n    c = 0\n    for ele in l:\n        if ele % 2 == k:\n            c += 1\n    return c - 1\n\ndef county(l, k):\n    c = 0\n    for ele in l:\n        if ele % 2 == k:\n            c += 1\n    if c == 1:\n        return True\n    return False\n\ndef solve():\n    n = int(input())\n    c = 0\n    if n == 1:\n        return 0\n    while n % 2 == 0:\n        c += 1\n        n //= 2\n    if c % 2 == 1:\n        return -1\n    if math.sqrt(n) == int(math.sqrt(n)):\n        return 1\n    if c == 0:\n        if n == 1:\n            return 0\n        else:\n            return 1\n    if n == 1:\n        return 1\n    return 2\nfor _ in range(int(input())):\n    print(solve())", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2:\n        print(1)\n    elif n & ~(n - 1) == n:\n        if len(bin(n)) % 2:\n            print(1)\n        else:\n            print(-1)\n    elif int(math.sqrt(n)) * int(math.sqrt(n)) == n:\n        print(1)\n    else:\n        count = 0\n        while n % 2 == 0:\n            n //= 2\n            count += 1\n        if count % 2:\n            print(-1)\n        else:\n            print(2)", "for T in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        count = 0\n        while n % 2 == 0:\n            n = n // 2\n            count += 1\n        if count % 2 == 0 and n ** 0.5 == int(n ** 0.5):\n            print(1)\n        elif count % 2 == 0 and n == 1:\n            print(1)\n        elif count % 2 == 0 and n != 1:\n            print(2)\n        else:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        c = 0\n        while not n & 1:\n            c += 1\n            n //= 2\n        if c & 1:\n            print(-1)\n        elif n ** 0.5 == int(n ** 0.5):\n            print(1)\n        elif n > 1:\n            print(2)\n        else:\n            print(1)", "import math\nfor _ in range(int(input())):\n    num = int(input())\n    if num == 1:\n        print(0)\n        continue\n    if num % 2 != 0:\n        print(1)\n        continue\n    else:\n        count = 0\n        n = num\n        while n % 2 == 0:\n            count += 1\n            n //= 2\n        if count % 2:\n            print(-1)\n            continue\n        if int(math.sqrt(num)) ** 2 == num or n == 1:\n            print(1)\n            continue\n    print(2)", "for _ in range(int(input())):\n    n = int(input())\n    num = n\n    if n == 1:\n        print(0)\n        continue\n    count2 = 0\n    if n % 2:\n        print(1)\n        continue\n    while n % 2 == 0:\n        count2 += 1\n        n //= 2\n    if count2 % 2:\n        print(-1)\n        continue\n    x = int(num ** 0.5)\n    if n == 1 or x * x == num:\n        print(1)\n        continue\n    print(2)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    if n == 1:\n        ans = 0\n    elif n % 2:\n        ans = 1\n    else:\n        x = 0\n        temp = n\n        while temp % 2 == 0:\n            x += 1\n            temp = temp // 2\n        if x % 2 == 0:\n            n1 = math.floor(math.sqrt(n))\n            if n1 ** 2 == n:\n                ans = 1\n            else:\n                ans = 2\n        else:\n            ans = -1\n    print(ans)", "import math\naddy = int(input())\nfor i in range(addy):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2:\n        print(1)\n    else:\n        x = 0\n        temp = n\n        while temp % 2 == 0:\n            x += 1\n            temp = temp // 2\n        if x % 2 == 0:\n            a = math.floor(n ** 0.5)\n            b = math.floor(n ** 0.5)\n            if a ** 2 == n or b ** 2 == n:\n                print(1)\n            else:\n                print(2)\n        else:\n            print(-1)", "from math import sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    if n % 2 == 1:\n        print(1)\n        continue\n    ct = 0\n    while n % 2 == 0:\n        ct += 1\n        n //= 2\n    if ct % 2:\n        print(-1)\n        continue\n    sr = int(sqrt(n))\n    if n == 1:\n        print(1)\n    elif sr * sr == n:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif pow(n, 0.5) == int(pow(n, 0.5)):\n        print(1)\n    else:\n        c = 0\n        for i in range(64, 1, -2):\n            p = pow(2, i)\n            while n > 0 and n % p == 0:\n                n //= p\n                c += 1\n        if n == 1:\n            print(c)\n        elif n % 2 == 1:\n            print(c + 1)\n        else:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif pow(n, 0.5) == int(pow(n, 0.5)):\n        print(1)\n    else:\n        c = 0\n        for i in range(64, 1, -2):\n            p = pow(2, i)\n            while n > 0 and n % p == 0:\n                n //= p\n                c += 1\n        if n == 1:\n            print(c)\n        elif n % 2 == 1:\n            print(c + 1)\n        else:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif int(n ** 0.5) * int(n ** 0.5) == n:\n        print(1)\n    else:\n        c = 0\n        while n % 2 == 0:\n            c += 1\n            n = n // 2\n        if c % 2 == 1:\n            print(-1)\n        elif n > 1:\n            print(2)\n        else:\n            print(1)", "for _ in range(int(input())):\n    N = int(input())\n    if N == 1:\n        print(0)\n        continue\n    if N % 2:\n        print(1)\n        continue\n    if int(N ** 0.5) * int(N ** 0.5) == N:\n        print(1)\n        continue\n    ans = 0\n    num2 = 0\n    while N % 2 == 0:\n        N //= 2\n        num2 += 1\n    if num2 % 2:\n        print(-1)\n        continue\n    if num2:\n        ans += 1\n    if N != 1:\n        ans += 1\n    print(ans)", "import sys\nimport re\nf = map(int, sys.stdin)\nnext(f)\nfor n in f:\n    m = re.match('0*', bin(n)[::-1])\n    if m.end() - m.start() & 1:\n        print(-1)\n    else:\n        print(2 - (n == 1) - (n % 2 or n == int(n ** 0.5) ** 2))", "import sys\nf = map(int, sys.stdin)\nnext(f)\nfor n in f:\n    s = bin(n)\n    if len(s) - len(s.rstrip('0')) & 1:\n        print(-1)\n    else:\n        print(2 - (n == 1) - (n % 2 or n == int(n ** 0.5) ** 2))", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(1, how_much_noob_I_am + 1):\n        n = inpu()\n        if n == 1:\n            print(0)\n            continue\n        if n % 2 != 0:\n            print(1)\n            continue\n        res = 0\n        if int(math.sqrt(n)) % 2 == 0 and int(math.sqrt(n)) == math.sqrt(n):\n            print(1)\n            continue\n        while n % 2 == 0:\n            res += 1\n            n //= 2\n        if res % 2 == 0:\n            if n == 1:\n                print(1)\n                continue\n            print(2)\n        else:\n            print(-1)\nmain()", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    if n % 2 == 1:\n        print(1)\n        continue\n    if int(sqrt(n)) * int(sqrt(n)) == n:\n        print(1)\n        continue\n    while n % 4 == 0:\n        n = n // 4\n    if n == 1:\n        print(1)\n        continue\n    if n % 2 == 1:\n        print(2)\n        continue\n    print(-1)", "import math\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2:\n        print(1)\n    elif pow(int(math.sqrt(n)), 2) == n:\n        print(1)\n    else:\n        cnt = 0\n        while n % 2 == 0:\n            cnt += 1\n            n = n // 2\n        if not n & n - 1:\n            if cnt % 2 == 0:\n                print(1)\n            else:\n                print(-1)\n        elif cnt % 2 == 0:\n            print(2)\n        else:\n            print(-1)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    c = 0\n    while n % 2 == 0:\n        n = n // 2\n        c += 1\n    if c == 0:\n        if n == 1:\n            print(0)\n        else:\n            print(1)\n    elif c % 2 == 0:\n        if n == 1:\n            print(1)\n        elif math.sqrt(n) == int(math.sqrt(n)):\n            print(1)\n        else:\n            print(2)\n    else:\n        print(-1)", "from math import sqrt\nt = int(input())\nwhile t:\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        val = 2\n        ind = 1\n        for i in range(1, n):\n            if n // val & 1:\n                ind = i\n                break\n            val <<= 1\n        if ind & 1:\n            print(-1)\n        elif sqrt(n) == int(sqrt(n)):\n            print(1)\n        else:\n            print(2)\n    t -= 1", "def solve():\n    N = int(input())\n    if N == 1:\n        print(0)\n    elif N % 2 == 1:\n        print(1)\n    else:\n        c = 0\n        k = N ** 0.5\n        if k == int(k):\n            print(1)\n            return\n        while N % 2 == 0:\n            c += 1\n            N //= 2\n        if c % 2:\n            print(-1)\n        else:\n            print(1 + int(N > 1))\nfor _ in range(int(input())):\n    solve()", "from math import sqrt\n\ndef soln(n: int) -> int:\n    if n == 1:\n        return 0\n    if n & 1:\n        return 1\n    if int(sqrt(n)) * int(sqrt(n)) == n:\n        return 1\n    cnt = 0\n    while n:\n        if not n & 1:\n            cnt += 1\n            n //= 2\n        else:\n            break\n    if cnt & 1:\n        return -1\n    if n:\n        return 2\n    return 1\ntc = int(input())\nwhile tc:\n    tc -= 1\n    n = int(input())\n    print(soln(n))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif n ** 0.5 % 1 == 0:\n        print(1)\n    elif math.log2(n) % 2 == 0:\n        print(1)\n    elif math.log2(n & ~(n - 1)) % 2 == 0:\n        print(2)\n    else:\n        print(-1)", "import math\n\ndef isSqrt(num):\n    val = num ** 0.5\n    return val == int(val)\n\ndef factorize(n):\n    if n == 1:\n        return 0\n    if n & 1 or isSqrt(n):\n        return 1\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n = n // 2\n    if count & 1:\n        return -1\n    if n == 1:\n        return 1\n    return 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = factorize(n)\n    print(ans)", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdout = open('output.txt', 'w')\n    sys.stdin = open('input.txt', 'r')\n\ndef issqrt(n):\n    sqrt = n ** 0.5\n    return sqrt == int(sqrt)\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 != 0 or issqrt(n):\n        return 1\n    i = 0\n    while n % 2 == 0:\n        n = n // 2\n        i += 1\n    if i % 2 != 0:\n        return -1\n    return 1 if n == 1 or issqrt(n) else 2\n\ndef main():\n    sys.setrecursionlimit(10 ** 8)\n    for _ in range(int(input())):\n        n = int(input())\n        result = solve(n)\n        print(result)\nmain()", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdout = open('output.txt', 'w')\n    sys.stdin = open('input.txt', 'r')\n\ndef issqrt(n):\n    sqrt = n ** 0.5\n    return sqrt == int(sqrt)\n\ndef solve(n):\n    if n == 1:\n        return 0\n    if n % 2 != 0 or issqrt(n):\n        return 1\n    i = 0\n    while n % 2 == 0:\n        n = n // 2\n        i += 1\n    if i % 2 != 0:\n        return -1\n    return 1 if n == 1 or issqrt(n) else 2\n\ndef main():\n    sys.setrecursionlimit(10 ** 8)\n    for _ in range(int(input())):\n        n = int(input())\n        result = solve(n)\n        print(result)\nmain()", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    count = 0\n    m = n\n    if n == 1:\n        print(0)\n    else:\n        while m % 2 == 0:\n            m = m // 2\n            count += 1\n        if n % 2 == 1:\n            print(1)\n        elif count % 2 == 1:\n            print(-1)\n        elif int(math.sqrt(n)) * int(math.sqrt(n)) == n:\n            print(1)\n        else:\n            print(2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        j = 0\n        while True:\n            if n % 2 == 0:\n                n = n // 2\n                j += 1\n            else:\n                break\n        if j % 2:\n            print(-1)\n        elif int(math.sqrt(n)) == math.sqrt(n):\n            print(1)\n        else:\n            print(2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        j = 0\n        while True:\n            if n % 2 == 0:\n                n = n // 2\n                j += 1\n            else:\n                break\n        if j % 2:\n            print(-1)\n        elif int(math.sqrt(n)) == math.sqrt(n):\n            print(1)\n        else:\n            print(2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 != 0:\n        print(1)\n    else:\n        j = 0\n        while True:\n            if n % 2 == 0:\n                n = n // 2\n                j += 1\n            else:\n                break\n        if j % 2:\n            print(-1)\n        elif n == 1:\n            print(1)\n        elif int(math.sqrt(n)) == math.sqrt(n):\n            print(1)\n        else:\n            print(2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        j = 0\n        while True:\n            if n % 2 == 0:\n                n = n // 2\n                j += 1\n            else:\n                break\n        if j % 2:\n            print(-1)\n        elif n == 1:\n            print(1)\n        elif int(math.sqrt(n)) == math.sqrt(n):\n            print(1)\n        else:\n            print(2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        j = 0\n        while True:\n            if n % 2 == 0:\n                n = n // 2\n                j += 1\n            else:\n                break\n        if j % 2:\n            print(-1)\n        elif n == 1:\n            print(1)\n        elif int(math.sqrt(n)) == math.sqrt(n):\n            print(1)\n        else:\n            print(2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        j = 0\n        while True:\n            if n % 2 == 0:\n                n = n // 2\n                j += 1\n            else:\n                break\n        if j % 2:\n            print(-1)\n        elif n == 1:\n            print(1)\n        elif int(math.sqrt(n)) == math.sqrt(n):\n            print(1)\n        else:\n            print(2)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        if n == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        count = 0\n        while n % 2 == 0:\n            count += 1\n            n //= 2\n        if count % 2 == 0 and n > 1:\n            a = math.sqrt(n)\n            if a - int(a) == 0:\n                print(1)\n            else:\n                print(2)\n        elif count % 2 == 0 and n == 1:\n            print(1)\n        else:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        if n == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        i = 2\n        nn = n\n        c = 0\n        while nn % 2 == 0:\n            nn //= 2\n            c += 1\n        if c % 2 == 1:\n            print(-1)\n        else:\n            flag = False\n            sq = pow(n, 0.5)\n            sq = int(sq)\n            if sq * sq == n:\n                flag = True\n            elif nn == 1:\n                flag = True\n            if flag:\n                print(1)\n            else:\n                print(2)", "from sys import stdin, stdout\nfrom collections import defaultdict, Counter\nimport math\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    if n == 1:\n        print(0)\n        continue\n    if n % 2 == 1:\n        print(1)\n        continue\n    if math.ceil(math.sqrt(n)) == math.floor(math.sqrt(n)):\n        print(1)\n        continue\n    cnt = 0\n    while n % 2 == 0:\n        cnt += 1\n        n = n // 2\n    if cnt % 2 == 1:\n        print(-1)\n        continue\n    print(2)", "import sys\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom heapq import *\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef dist(x1, x2, y1, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef mergeSort(arr, check=lambda a, b: a < b, reverse=False):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L, check, reverse)\n        mergeSort(R, check, reverse)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if check(L[i], R[j]):\n                if not reverse:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n            elif not reverse:\n                arr[k] = R[j]\n                j += 1\n            else:\n                arr[k] = L[i]\n                i += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef maxSum(arr):\n    max_sum = float('-inf')\n    max_cur = 0\n    for num in ar:\n        max_cur = max(max_cur + num, num)\n        if max_cur > max_sum:\n            max_sum = max_cur\n    return max_sum\n\ndef hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, b % a)\n\ndef get_power(n, m):\n    i = 1\n    p = -1\n    while i <= n:\n        i = i * m\n        p += 1\n    return p\n\ndef fact(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n    return f\n\ndef find_closest(num, ar):\n    min_d = float('inf')\n    for num2 in ar:\n        d = abs(num2 - num)\n        if d < min_d:\n            min_d = d\n    return min_d\n\ndef solve(t):\n    n = readInts()\n    if n == 1:\n        print(0)\n    elif n & 1:\n        print(1)\n    else:\n        p = 0\n        tmp = n\n        while tmp % 2 == 0:\n            p += 1\n            tmp = tmp // 2\n        if p & 1:\n            print(-1)\n        elif math.floor(math.sqrt(n)) ** 2 == n:\n            print(1)\n        else:\n            print(2)\n\ndef main():\n    t = 1\n    sys.setrecursionlimit(12000)\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1 or math.sqrt(n) % 1.0 == 0:\n        print(1)\n    else:\n        twos = 0\n        while n % 2 ** twos == 0:\n            twos += 1\n        if (twos - 1) % 2 == 0:\n            print(2)\n        else:\n            print(-1)", "def p2(n):\n    ans = 0\n    while n & 1 == 0 and n > 0:\n        ans += 1\n        n >>= 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = p2(n)\n    r = int(n ** 0.5)\n    ans = 0\n    if c & 1:\n        ans = -1\n    elif n == 1:\n        ans = 0\n    elif r * r == n:\n        ans = 1\n    else:\n        if c != 0:\n            ans += 1\n        if n // 2 ** c != 1:\n            ans += 1\n    print(ans)", "def counter(n):\n    c = 0\n    while n % 2 == 0:\n        c += 1\n        n //= 2\n    return c\nfor _ in range(int(input())):\n    x = int(input())\n    sqrt = int(x ** 0.5)\n    if x == 1:\n        print(0)\n    elif x % 2 == 1:\n        print(1)\n    elif sqrt ** 2 == x:\n        print(1)\n    else:\n        count = counter(x)\n        if count % 2 == 0:\n            print(2)\n        else:\n            print(-1)", "for _ in range(int(input())):\n\n    def fac(n):\n        c = 0\n        while n % 2 == 0:\n            c += 1\n            n //= 2\n        return c\n    n = int(input())\n    sq = int(n ** 0.5)\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif n % 2 == 0 and sq ** 2 == n:\n        print(1)\n    elif n % 2 == 0 and fac(n) % 2 == 0:\n        print(2)\n    else:\n        print(-1)", "import math\npow4 = [4 ** x for x in range(1, 31)]\nfor x in range(int(input())):\n    n = int(input())\n    if n & 1:\n        if n == 1:\n            print(0)\n        else:\n            print(1)\n    elif math.sqrt(n) == int(math.sqrt(n)):\n        print(1)\n    else:\n        cnt = 0\n        flag = True\n        while flag:\n            temp = -1\n            for x in pow4:\n                if n % x == 0:\n                    temp = x\n            if temp == -1:\n                flag = False\n            else:\n                n = n // temp\n                cnt += 1\n        if n & 1:\n            if n != 1:\n                cnt += 1\n            print(cnt)\n        else:\n            print(-1)", "def fun(n):\n    if int(n ** 0.5) ** 2 == n:\n        return 1\n    tp = 0\n    while n % 2 == 0:\n        tp += 1\n        n = n // 2\n    if tp % 2 == 0:\n        if n == 1:\n            return 1\n        return 2\n    return -1\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    if n % 2 == 1:\n        print(1)\n        continue\n    print(fun(n))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1 or math.sqrt(n) % 1.0 == 0:\n        print(1)\n    else:\n        twos = 0\n        while n % 2 ** twos == 0:\n            twos += 1\n        if (twos - 1) % 2 == 0:\n            print(2)\n        else:\n            print(-1)", "import math\nt = int(input())\nfor i in range(t):\n    xyz = 0\n    n = int(input())\n    k = math.sqrt(n)\n    k = int(k)\n    if n == 1:\n        print(0)\n        continue\n    if k * k == n:\n        print(1)\n        continue\n    if n & 1:\n        print(1)\n        continue\n    while not n & 1:\n        xyz += 1\n        n >>= 1\n    if xyz % 2 != 0:\n        print(-1)\n    elif n == 1:\n        print(1)\n    else:\n        print(2)", "import math\n\ndef isPerfectSquare(x):\n    if x >= 0:\n        sr = int(math.sqrt(x))\n        return sr * sr == x\n    return false\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif isPerfectSquare(n) == 1:\n        print(1)\n    else:\n        c = 0\n        par = n % 2\n        while par == 0 and n > 0:\n            c += 1\n            n = n // 2\n            par = n % 2\n        par2 = c % 2\n        if par2 == 0:\n            if n == 1:\n                print(1)\n            else:\n                print(2)\n        else:\n            print(-1)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    elif n % 2 == 1:\n        print(1)\n    elif int(sqrt(n)) ** 2 == n:\n        print(1)\n    else:\n        cc = 0\n        while n % 2 == 0:\n            cc += 1\n            n >>= 1\n        if cc % 2 != 0:\n            print(-1)\n        else:\n            print(2)"]