["t = int(input())\nfor i in range(t):\n    s = input()\n    par = {'(': ')'}\n    stack = []\n    i = 0\n    res = []\n    while i < len(s):\n        flag = 0\n        if stack and stack[-1][0] != ')' and (par[stack[-1][0]] == s[i]):\n            (val, index) = stack.pop()\n            res += [index, i]\n            flag = 1\n        if not flag:\n            stack.append((s[i], i))\n        i += 1\n    res.sort()\n    diff = []\n    for i in range(len(res) - 1):\n        diff.append(abs(res[i] - res[i + 1]))\n    if diff:\n        count = 1\n    else:\n        count = 0\n    for i in range(len(diff) - 1):\n        if diff[i] == diff[i + 1] == 1:\n            pass\n        elif diff[i] != 1 and diff[i + 1] == 1:\n            count += 1\n    print(len(stack), count)", "t = int(input())\nfor i in range(t):\n    s = input()\n    par = {'(': ')'}\n    stack = []\n    i = 0\n    res = []\n    while i < len(s):\n        flag = 0\n        if stack and stack[-1][0] != ')' and (par[stack[-1][0]] == s[i]):\n            (val, index) = stack.pop()\n            res += [index, i]\n            flag = 1\n        if not flag:\n            stack.append((s[i], i))\n        i += 1\n    res.sort()\n    diff = []\n    for i in range(len(res) - 1):\n        diff.append(abs(res[i] - res[i + 1]))\n    if diff:\n        count = 1\n    else:\n        count = 0\n    for i in range(len(diff) - 1):\n        if diff[i] == diff[i + 1] == 1:\n            pass\n        elif diff[i] != 1 and diff[i + 1] == 1:\n            count += 1\n    print(len(stack), count)", "t = int(input())\nfor i in range(t):\n    s = input()\n    par = {'(': ')'}\n    stack = []\n    i = 0\n    res = []\n    while i < len(s):\n        flag = 0\n        if stack and stack[-1][0] != ')' and (par[stack[-1][0]] == s[i]):\n            (val, index) = stack.pop()\n            res += [index, i]\n            flag = 1\n        if not flag:\n            stack.append((s[i], i))\n        i += 1\n    res.sort()\n    diff = []\n    for i in range(len(res) - 1):\n        diff.append(abs(res[i] - res[i + 1]))\n    if diff:\n        count = 1\n    else:\n        count = 0\n    for i in range(len(diff) - 1):\n        if diff[i] == diff[i + 1] == 1:\n            pass\n        elif diff[i] != 1 and diff[i + 1] == 1:\n            count += 1\n    print(len(stack), count)", "import math\nT = int(input())\nfor _ in range(T):\n    s = input()\n    l = []\n    N = len(s)\n    for i in range(N):\n        if len(l) == 0:\n            l.append(i)\n            continue\n        if s[i] == ')':\n            if s[l[-1]] == '(':\n                l.pop()\n            else:\n                l.append(i)\n        else:\n            l.append(i)\n    print(len(l), end=' ')\n    i = 0\n    s = 0\n    for j in range(len(l)):\n        if i == l[j]:\n            i += 1\n        else:\n            i = l[j] + 1\n            s += 1\n    if i != N:\n        s += 1\n    print(s)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    stk = [(0, s[0])]\n    ls = 1\n    for i in range(1, n):\n        if ls == 0:\n            stk.append((i, s[i]))\n            ls += 1\n            continue\n        (c1, c2) = (stk[-1][1], s[i])\n        if c1 == '(' and c2 == ')':\n            stk.pop()\n            ls -= 1\n        else:\n            stk.append((i, c2))\n            ls += 1\n    ls = len(stk)\n    ans2 = 0\n    if ls != 0:\n        for i in range(1, ls):\n            if stk[i][0] - stk[i - 1][0] != 1:\n                ans2 += 1\n        if stk[0][0] != 0:\n            ans2 += 1\n        if stk[-1][0] != n - 1:\n            ans2 += 1\n    else:\n        ans2 += 1\n    print(ls, ans2)", "T = int(input())\nfor i in range(T):\n    A = str(input())\n    stack = []\n    top = 0\n    for j in range(len(A)):\n        if top and stack[top - 1][0] == '(' and (A[j] == ')'):\n            stack.pop()\n            top = top - 1\n        else:\n            stack.append((A[j], j))\n            top = top + 1\n    total = 0\n    prev = 0\n    if len(stack):\n        for j in range(len(stack)):\n            if not j:\n                if stack[j][1]:\n                    total = total + 1\n            elif prev < stack[j][1] - 1:\n                total = total + 1\n            prev = stack[j][1]\n        if not stack[len(stack) - 1][1] == len(A) - 1:\n            total = total + 1\n        print(len(stack), total)\n    else:\n        print(0, 1)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    (st, e) = ([], [])\n    for i in range(n):\n        if s[i] == ')':\n            if st:\n                st.pop()\n            else:\n                e.append(i)\n        else:\n            st.append(i)\n    r = st + e\n    if r:\n        r.sort()\n        nr = len(r)\n        c = (r[0] != 0) + (r[nr - 1] != n - 1)\n        for i in range(1, nr):\n            c += r[i] - r[i - 1] > 1\n        print(nr, c)\n    else:\n        print(0, 1)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    track = []\n    prev = []\n    status = [0 for _ in range(n)]\n    for i in range(n):\n        if s[i] == '(':\n            prev.append(i)\n        elif len(prev):\n            if prev[-1] == i - 1:\n                track.append(2)\n            else:\n                track[-1] = track[-1] + 2\n            status[i] = 1\n            temp = prev.pop()\n            if temp != 0 and status[temp - 1] == 1:\n                track[-2] = track[-2] + track[-1]\n                track.pop()\n    print(n - sum(track), len(track))", "t = int(input())\nimport collections\n\ndef solve():\n    a = input()\n    n = len(a)\n    s = []\n    cur = 0\n    for i in range(n):\n        if cur == 0:\n            s.append(i)\n            cur = 1\n        elif a[i] == '(':\n            s.append(i)\n            cur += 1\n        elif a[s[-1]] == '(':\n            s.pop()\n            cur -= 1\n        else:\n            s.append(i)\n            cur += 1\n    r = len(s)\n    st = 0\n    m = 0\n    for i in range(r):\n        if s[i] > st:\n            m += 1\n            st = s[i] + 1\n        else:\n            st = s[i] + 1\n    if r == 0 or s[r - 1] < n - 1:\n        m += 1\n    print(r, m)\nwhile t > 0:\n    solve()\n    t -= 1", "def paran(S):\n    st = [-1]\n    ans = []\n    op = 0\n    for l in range(len(S)):\n        if S[l] == '(':\n            st.append(l)\n        else:\n            st.pop()\n            if len(st) != 0:\n                if len(ans) == 0:\n                    ans.append(st[-1])\n                elif ans[-1] > st[-1]:\n                    ans.pop()\n                    if len(ans) > 0 and ans[-1] != st[-1]:\n                        ans.append(st[-1])\n                    if len(ans) == 0:\n                        ans.append(st[-1])\n                elif ans[-1] < st[-1]:\n                    ans.append(st[-1])\n            else:\n                op = op + 1\n                st.append(l)\n    print(op - 1 + len(st), end=' ')\n    print(len(ans))\nfor _ in range(int(input())):\n    s = input()\n    paran(s)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(1, how_much_noob_I_am + 1):\n        s = inp()\n        n = len(s)\n        stack = []\n        for i in range(n):\n            if s[i] == '(':\n                stack.append(i)\n            elif stack and s[stack[-1]] == '(':\n                stack.pop()\n            else:\n                stack.append(i)\n        (ans, prev) = (0, 0)\n        for i in stack:\n            if i - prev > 1:\n                ans += 1\n            prev = i\n        if prev != len(s) - 1:\n            ans += 1\n        print(len(stack), ans)\nmain()", "for _ in range(int(input())):\n    s = input()\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n        elif len(stack) != 0 and s[stack[-1]] == '(':\n            stack.pop()\n        else:\n            stack.append(i)\n    count = 0\n    prev = 0\n    for i in stack:\n        if i - prev > 1:\n            count += 1\n        prev = i\n    if len(s) - prev > 1:\n        count += 1\n    print(len(stack), count)", "for _ in range(int(input())):\n    s = input()\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append((s[i], i))\n        elif s[i] == ')':\n            if stack != [] and stack[-1][0] == '(':\n                stack.pop()\n            else:\n                stack.append((s[i], i))\n    st = -1\n    ans = 0\n    stack = [('0', -1)] + stack + [('0', len(s))]\n    for i in range(1, len(stack)):\n        if stack[i][1] - stack[i - 1][1] > 1:\n            ans += 1\n    print(len(stack) - 2, ans)", "import sys\nimport os\nfrom sys import stdin, stdout\nio_path = 'E:\\\\Personal\\\\competitve-programming\\\\IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    s = get_string()\n    v = []\n    res = []\n    index = 0\n    while index <= len(s) - 1:\n        if s[index] == '(':\n            v.append(index + 1)\n        else:\n            v.append(-(index + 1))\n        index += 1\n    index = 0\n    while index <= len(v) - 1:\n        if v[index] > 0:\n            res.append(v[index])\n        elif len(res) > 0 and res[-1] > 0:\n            res.pop()\n        else:\n            res.append(v[index])\n        index += 1\n    min_length = len(res)\n    for i in range(len(res)):\n        if res[i] < 0:\n            res[i] *= -1\n        res[i] -= 1\n    operations = 0\n    if len(res) == 0:\n        operations = 1\n    else:\n        if res[0] > 0:\n            operations += 1\n        for i in range(1, len(res)):\n            if res[i] - res[i - 1] > 1:\n                operations += 1\n        if res[-1] < len(s) - 1:\n            operations += 1\n    print(min_length, operations)\n    test_cases -= 1", "t = int(input())\nwhile t > 0:\n    a = input()\n    n = len(a)\n    s = []\n    cur = 0\n    for i in range(n):\n        if cur == 0:\n            s.append(i)\n            cur = 1\n        elif a[i] == '(':\n            s.append(i)\n            cur += 1\n        elif a[s[-1]] == '(':\n            s.pop()\n            cur -= 1\n        else:\n            s.append(i)\n            cur += 1\n    r = len(s)\n    st = 0\n    m = 0\n    for i in range(r):\n        if s[i] > st:\n            m += 1\n            st = s[i] + 1\n        else:\n            st = s[i] + 1\n    if r == 0 or s[r - 1] < n - 1:\n        m += 1\n    print(r, m)\n    t -= 1", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    l = list()\n    l.append([s[0], 0])\n    for i in range(1, n):\n        if len(l) == 0:\n            l.append([s[i], i])\n            continue\n        temp = l[-1][0]\n        if s[i] == ')' and temp == '(':\n            l.pop()\n        else:\n            l.append([s[i], i])\n    rem = len(l)\n    oper = 1\n    if len(l) > 0:\n        oper = 0\n        temp = l[-1]\n        l.pop()\n        if temp[1] != n - 1:\n            oper += 1\n        while len(l) > 0:\n            temp1 = l[-1]\n            if temp1[1] + 1 != temp[1]:\n                oper += 1\n            l.pop()\n            temp = temp1\n        if temp[1] != 0:\n            oper += 1\n    print(rem, oper)", "for _ in range(int(input())):\n    s = input()\n    stack = []\n    rem = []\n    ans = 0\n    for (i, el) in enumerate(s):\n        if el == '(':\n            stack.append(i)\n        elif stack:\n            stack.pop()\n        else:\n            rem.append(i)\n    left = len(stack) + len(rem)\n    if left == len(s):\n        print(left, 0)\n    elif left == 0:\n        print(0, 1)\n    else:\n        ans = 0\n        a = stack + rem\n        res = [-1]\n        prev = res[-1]\n        a.sort()\n        for el in a:\n            if res and prev + 1 == el:\n                pass\n            else:\n                res.append(el)\n            prev = el\n        if prev + 1 != len(s):\n            res.append(len(s) - 1)\n        print(left, len(res) - 1)", "for _ in range(int(input())):\n    A = input()\n    s = []\n    n = len(A)\n    for i in range(n):\n        if A[i] == '(':\n            s.append(i)\n        elif s and A[s[-1]] == '(':\n            s.pop()\n        else:\n            s.append(i)\n    ops = 0\n    curr = 0\n    for i in range(len(s)):\n        if curr == s[i]:\n            curr += 1\n        else:\n            curr = s[i] + 1\n            ops += 1\n    if curr != n:\n        ops += 1\n    print(len(s), ops)", "from collections import deque\n\ndef solve(b):\n    stack = deque()\n    st = []\n    n = len(b)\n    for (i, s) in enumerate(b):\n        if s == '(':\n            st.append(s)\n            stack.append(i)\n        elif len(st) == 0 or st[-1] != '(':\n            st.append(s)\n            stack.append(i)\n        else:\n            st.pop()\n            stack.pop()\n    if len(stack) == 0:\n        print(0, 1)\n    elif len(stack) == 1:\n        top = stack.pop()\n        if top == 0 or top == n - 1:\n            if n > 1:\n                print(1, 1)\n            else:\n                print(1, 0)\n        else:\n            print(1, 2)\n    else:\n        length = len(stack)\n        top = stack.popleft()\n        second = stack[0]\n        count = 0\n        if top == 0:\n            if second - top > 1:\n                count += 1\n        elif second - top == 1:\n            count += 1\n        else:\n            count += 2\n        while len(stack) >= 2:\n            top = stack.popleft()\n            second = stack[0]\n            if second - top > 1:\n                count += 1\n        top = stack.popleft()\n        if top != n - 1:\n            count += 1\n        print(length, count)\nfor _ in range(int(input())):\n    b = input().strip()\n    solve(b)", "import math\nT = int(input())\nfor _ in range(T):\n    s = input()\n    l = []\n    N = len(s)\n    for i in range(N):\n        if len(l) == 0:\n            l.append(i)\n            continue\n        if s[i] == ')':\n            if s[l[-1]] == '(':\n                l.pop()\n            else:\n                l.append(i)\n        else:\n            l.append(i)\n    print(len(l), end=' ')\n    i = 0\n    s = 0\n    for j in range(len(l)):\n        if i == l[j]:\n            i += 1\n        else:\n            i = l[j] + 1\n            s += 1\n    if i != N:\n        s += 1\n    print(s)", "from collections import deque\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    a = [1] * n\n    st = deque()\n    for (i, v) in enumerate(s):\n        if v == '(':\n            st.append(('(', i))\n        elif len(st) > 0:\n            (e, p) = st.pop()\n            a[i] = a[p] = 0\n    b = [a[0]]\n    (count, ones) = (0, 0)\n    for i in range(1, n):\n        if a[i] != a[i - 1]:\n            b.append(a[i])\n    for i in b:\n        if i == 0:\n            count += 1\n    for i in a:\n        if i == 1:\n            ones += 1\n    print(ones, count)", "for _ in range(int(input())):\n    s = input()\n    stack = []\n    for i in range(len(s)):\n        if s[i] == '(':\n            stack.append(i)\n            should_count = True\n        elif len(stack) > 0 and s[stack[-1]] == '(':\n            stack.pop()\n        else:\n            stack.append(i)\n    c = 0\n    prev = 0\n    for idx in stack:\n        if idx - prev > 1:\n            c += 1\n        prev = idx\n    if len(s) - prev > 1:\n        c += 1\n    print(len(stack), c)", "for _ in range(int(input())):\n    s = input()\n    vals = [False for i in s]\n    last_open = [-1]\n    for i in range(len(s)):\n        if s[i] == ')' and last_open[-1] >= 0:\n            vals[last_open[-1]] = True\n            vals[i] = True\n            temp = last_open.pop()\n        elif s[i] == '(':\n            last_open.append(i)\n    prev = False\n    final_len = len(s) - sum(vals)\n    count = 0\n    for i in vals:\n        if i and (not prev):\n            count += 1\n        prev = i\n    print(final_len, count, sep=' ')", "t = int(input())\nfor _ in range(t):\n    s = input()\n    total = 0\n    depth = 0\n    starting = False\n    start_index = -1\n    end_index = -1\n    i = 0\n    while i < len(s):\n        if not starting and s[i] == '(':\n            start_index = i\n            starting = True\n            depth = 1\n        elif starting:\n            if s[i] == '(':\n                depth += 1\n            else:\n                depth -= 1\n                if depth == 0:\n                    end_index = i\n                elif depth == -1:\n                    i -= 1\n                    new_s = ''\n                    if start_index > 0:\n                        new_s = s[0:start_index]\n                    if i < len(s) - 1:\n                        new_s += s[i + 1:]\n                    s = new_s\n                    i = start_index\n                    end_index = start_index\n                    starting = False\n                    total += 1\n        i += 1\n    if end_index > start_index:\n        new_s = ''\n        if start_index > 0:\n            new_s = s[0:start_index]\n        if end_index < len(s) - 1:\n            new_s += s[end_index + 1:]\n        s = new_s\n        starting = False\n        total += 1\n    i = len(s) - 1\n    starting = False\n    while i >= 0:\n        if not starting and s[i] == ')':\n            start_index = i\n            end_index = start_index\n            starting = True\n            depth = 1\n        elif starting:\n            if s[i] == ')':\n                depth += 1\n            else:\n                depth -= 1\n                if depth == 0:\n                    end_index = i\n                elif depth == -1:\n                    i += 1\n                    new_s = ''\n                    if i > 0:\n                        new_s += s[0:i]\n                    if start_index < len(s) - 1:\n                        new_s += s[start_index + 1:]\n                    s = new_s\n                    starting = False\n                    end_index = start_index\n                    total += 1\n        i -= 1\n    if end_index < start_index:\n        new_s = ''\n        if end_index > 0:\n            new_s += s[0:end_index]\n        if start_index < len(s) - 1:\n            new_s += s[start_index + 1:]\n        s = new_s\n        starting = False\n        total += 1\n    print(len(s), total)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    stack = []\n    rest = 0\n    ans = []\n    for (idx, c) in enumerate(s):\n        if c == ')':\n            if stack:\n                ans.append(idx)\n                ans.append(stack[-1])\n                stack.pop()\n            else:\n                rest += 1\n        else:\n            stack.append(idx)\n    rest += len(stack)\n    ans.sort()\n    if ans:\n        cnt = 1\n    else:\n        cnt = 0\n    for i in range(1, len(ans)):\n        if ans[i - 1] + 1 != ans[i]:\n            cnt += 1\n    print(rest, cnt)", "for _ in range(int(input())):\n    s = input()\n    st = []\n    temp = []\n    arr = [0 for _ in range(len(s))]\n    s = list(s)\n    for (i, c) in enumerate(s):\n        if c == '(':\n            st.append(i)\n        elif len(st):\n            arr[i] += 1\n            arr[st[-1]] += 1\n            st.pop()\n    flag = 0\n    ans = 0\n    count = 0\n    for e in arr:\n        if e == 0:\n            ans += 1\n            flag = 0\n        elif flag == 0:\n            count += 1\n            flag = 1\n    print(ans, count)", "import sys\nfrom math import sqrt, gcd, factorial, ceil, floor\nfrom collections import deque, Counter, OrderedDict\nfrom heapq import heapify, heappush, heappop\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    s = S()\n    n = len(s)\n    st = []\n    st2 = []\n    for i in range(n):\n        if s[i] == '(':\n            st.append(i)\n        elif st:\n            st.pop()\n        else:\n            st2.append(i)\n    st += st2\n    st.sort()\n    if not st:\n        print(0, 1)\n        continue\n    ans2 = len(st)\n    ans = 0\n    if st and st[0] != 0:\n        ans += 1\n    if len(st) > 0 and st[-1] != n - 1:\n        ans += 1\n    while st:\n        temp = st.pop()\n        ans += 1\n        while st and st[-1] + 1 == temp:\n            temp = st.pop()\n    print(ans2, ans - 1)"]