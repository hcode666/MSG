["for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) & 1 != 0:\n            s = s[:-1]\n        else:\n            m = len(s) // 2\n            if s[:m] == s[m:]:\n                s = s[:m]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) & 1 != 0:\n            s = s[:-1]\n        else:\n            m = len(s) // 2\n            if s[:m] == s[m:]:\n                s = s[:m]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) & 1 != 0:\n            s = s[:-1]\n        else:\n            m = len(s) // 2\n            if s[:m] == s[m:]:\n                s = s[:m]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) & 1 != 0:\n            s = s[:-1]\n        else:\n            m = len(s) // 2\n            if s[:m] == s[m:]:\n                s = s[:m]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) & 1 != 0:\n            s = s[:-1]\n        else:\n            m = len(s) // 2\n            if s[:m] == s[m:]:\n                s = s[:m]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) != 0:\n        if len(s) % 2:\n            s = s[:-1]\n        else:\n            if s[:len(s) // 2] != s[len(s) // 2:]:\n                print('NO')\n                break\n            s = s[:len(s) // 2]\n    if len(s) == 0:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) != 0:\n        if len(s) % 2:\n            s = s[:-1]\n        else:\n            if s[:len(s) // 2] != s[len(s) // 2:]:\n                print('NO')\n                break\n            s = s[:len(s) // 2]\n    if len(s) == 0:\n        print('YES')", "def isDouble(string):\n    s = len(string)\n    if s % 2 == 0 and string[:s // 2] == string[s // 2:]:\n        return True\n    else:\n        return False\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = input().strip()\n    s = A\n    possible = True\n    while len(s) > 1:\n        if isDouble(s[:-1]) or isDouble(s):\n            s = s[:len(s) // 2]\n        else:\n            possible = False\n            break\n    if possible:\n        print('YES')\n    else:\n        print('NO')", "def checkDouble(s, idx, n):\n    for i in range(idx):\n        if i + idx >= n:\n            return 0\n        if s[i] != s[i + idx]:\n            return 0\n    return 1\n\ndef ans(n, s):\n    while n > 0:\n        n = len(s)\n        if n % 2 == 0:\n            if s[:n // 2] != s[n // 2:]:\n                return 'NO'\n            else:\n                s = s[:n // 2]\n        else:\n            s = s[:n - 1]\n    return 'YES'\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(ans(n, s))", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    flag = False\n    while n > 0:\n        n = len(s)\n        if len(s) % 2 == 0:\n            if s[n // 2:] == s[:n // 2]:\n                s = s[:n // 2]\n            else:\n                flag = True\n                break\n        else:\n            n = n - 1\n            s = s[:n]\n            if s[n // 2:] == s[:n // 2]:\n                s = s[:n // 2]\n            else:\n                flag = True\n                break\n    if flag:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    f = False\n    while s:\n        n = len(s)\n        if n % 2 == 1:\n            s = s[:n - 1]\n            n -= 1\n        if s[:n // 2] == s[n // 2:]:\n            s = s[:n // 2]\n        else:\n            print('NO')\n            f = True\n            break\n    if not f:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    flag = False\n    while s:\n        n = len(s)\n        if n % 2 == 1:\n            s = s[:n - 1]\n            n -= 1\n        if s[:n // 2] == s[n // 2:]:\n            s = s[:n // 2]\n        else:\n            print('NO')\n            flag = True\n            break\n    if not flag:\n        print('YES')", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) != 0:\n        if len(s) % 2:\n            s = s[:-1]\n        else:\n            if s[:len(s) // 2] != s[len(s) // 2:]:\n                print('NO')\n                break\n            s = s[:len(s) // 2]\n    if len(s) == 0:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) % 2 == 1:\n            s = s[:-1]\n        else:\n            k = len(s) // 2\n            if s[:k] == s[k:]:\n                s = s[:k]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) % 2 == 1:\n            s = s[:-1]\n        else:\n            k = len(s) // 2\n            if s[:k] == s[k:]:\n                s = s[:k]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ans = True\n    while n > 0:\n        if n % 2 == 0:\n            if s[:n // 2] == s[n // 2:n]:\n                ans = True\n            else:\n                ans = False\n                break\n            n = n // 2\n        else:\n            n = n - 1\n    if ans == True:\n        print('YES')\n    else:\n        print('NO')", "def canCreateString(s, n):\n    ans = True\n    while n > 0:\n        if n % 2 == 1:\n            n = n - 1\n        else:\n            mid = int(n / 2)\n            if s[0:mid] != s[mid:n]:\n                ans = False\n                break\n            n = mid\n    if ans == True:\n        print('YES')\n    else:\n        print('NO')\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    s = input()\n    canCreateString(s, n)\n    t = t - 1", "def fun(s):\n    if len(s) % 2 == 1:\n        return (1, s[:-1])\n    if s[:len(s) // 2] == s[len(s) // 2:]:\n        return (0, s[:len(s) // 2])\n    return (1, s[:-1])\nfor _ in range(int(input())):\n    l = int(input())\n    s = input()\n    sum = 0\n    ch = True\n    while len(s) > 0:\n        (i, s) = fun(s)\n        sum = (sum + i) * i\n        if sum == 2:\n            print('NO')\n            ch = False\n            break\n    if ch:\n        print('YES')", "for i in range(int(input())):\n    n = int(input())\n    a = input()\n    key = 0\n    l = []\n    for i in a:\n        l.append(i)\n    while True:\n        if len(l) == 1:\n            print('YES')\n            break\n        if len(l) % 2 == 1:\n            if key == 1:\n                print('NO')\n                break\n            key = 1\n            l.pop()\n        elif l[0:len(l) // 2] == l[len(l) // 2:len(l)]:\n            key = 0\n            l = l[0:len(l) // 2]\n        else:\n            print('NO')\n            break", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    flag = 0\n    while n > 1:\n        if n % 2 == 0:\n            if s[0:n // 2] == s[n // 2:]:\n                n = n // 2\n                s = s[0:n]\n            else:\n                flag = 1\n                break\n        elif n % 2 == 1:\n            n = n - 1\n            s = s[0:n]\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    flag = 0\n    while n > 1:\n        if n % 2 == 0:\n            if s[0:n // 2] == s[n // 2:]:\n                n = n // 2\n                s = s[0:n]\n            else:\n                flag = 1\n                break\n        elif n % 2 == 1:\n            n = n - 1\n            s = s[0:n]\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) & 1 != 0:\n            s = s[:-1]\n        else:\n            m = len(s) // 2\n            if s[:m] == s[m:]:\n                s = s[:m]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) % 2 == 1:\n            s = s[:-1]\n        else:\n            k = len(s) // 2\n            if s[:k] == s[k:]:\n                s = s[:k]\n            else:\n                break\n    print('YES' if len(s) == 0 else 'NO')", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\n\ndef solve():\n    n = ri()\n    s = rs()\n    while s:\n        if len(s) & 1:\n            s = s[:-1]\n        else:\n            mid = len(s) // 2\n            if s[:mid] == s[mid:]:\n                s = s[:mid]\n            else:\n                return 'NO'\n    return 'YES'\n\ndef main():\n    for _ in range(ri()):\n        print(solve())\nmain()", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = input()\n    flag = 0\n    while len(A) > 1:\n        if len(A) % 2 == 0:\n            if A[:len(A) // 2] == A[len(A) // 2:]:\n                A = A[:len(A) // 2]\n            else:\n                flag = 1\n                break\n        else:\n            A = A[:-1]\n    if flag == 1:\n        print('NO')\n    elif len(A) == 1:\n        print('YES')", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    while n > 0:\n        if n % 2 == 0:\n            if s[:n // 2] == s[n // 2:n]:\n                n //= 2\n            else:\n                print('NO')\n                break\n        else:\n            n -= 1\n    else:\n        print('YES')", "def checkValidity(stringToBeFormed):\n    length = len(stringToBeFormed)\n    if length < 2:\n        return True\n    if stringToBeFormed[0] != stringToBeFormed[1]:\n        return False\n    if length % 2 == 0:\n        newLen = int(length / 2)\n        if stringToBeFormed[0:newLen] == stringToBeFormed[newLen:]:\n            return True and checkValidity(stringToBeFormed[0:newLen])\n    if length % 2 == 1:\n        newLen = int((length - 1) / 2)\n        if stringToBeFormed[0:newLen] == stringToBeFormed[newLen:newLen * 2]:\n            return True and checkValidity(stringToBeFormed[0:newLen])\n    return False\nfor _ in range(int(input())):\n    length = int(input())\n    stringToBeFormed = input()\n    result = checkValidity(stringToBeFormed)\n    if result:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = input()\n    flag = 0\n    while len(A) > 1:\n        if len(A) % 2 == 0:\n            if A[:len(A) // 2] == A[len(A) // 2:]:\n                A = A[:len(A) // 2]\n            else:\n                flag = 1\n                break\n        else:\n            A = A[:-1]\n    if flag == 1:\n        print('NO')\n    elif len(A) == 1:\n        print('YES')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) % 2 != 0:\n            s = s[:-1]\n        else:\n            ans = len(s) // 2\n            if s[:ans] == s[ans:]:\n                s = s[:ans]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "p = int(input())\nfor i in range(p):\n    n = int(input())\n    s = input()\n    if n == 1:\n        print('YES')\n    else:\n        while n > 1:\n            if n % 2 == 0:\n                if s[:n // 2] == s[n // 2:n]:\n                    n = n // 2\n                    if n == 1:\n                        if s[0] == s[1]:\n                            print('YES')\n                else:\n                    print('NO')\n                    n = 0\n            else:\n                n = n - 1", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    if n == 0 or n == 1:\n        print('YES')\n    else:\n        while n != 1:\n            t = 1\n            if n % 2 == 1:\n                n -= 1\n                s = s[0:n]\n            for i in range(n // 2):\n                if s[i] != s[i + n // 2]:\n                    t = 0\n                    break\n            if t == 0:\n                break\n            n = n // 2\n        if t and s[0] == s[1]:\n            print('YES')\n        else:\n            print('NO')", "def sent(str, n):\n    while n > 1:\n        half = n // 2\n        (a, b) = (str[0:half], str[half:n])\n        if n % 2 == 0:\n            if a == b:\n                n = half\n            else:\n                return 0\n        elif a == b[0:half]:\n            n = half\n        else:\n            return 0\n    return 1\nn = int(input())\nfor _ in range(n):\n    ln = int(input())\n    st = input()\n    if sent(st, ln):\n        print('YES')\n    else:\n        print('NO')", "def fib():\n    n = int(input())\n    s = input()\n    newS = s\n    le = len(newS)\n    while le:\n        if le % 2 == 1:\n            newS = newS[:-1]\n        else:\n            mid = le // 2\n            if newS[0:mid] == newS[mid:]:\n                newS = newS[0:mid]\n            else:\n                print('NO')\n                return\n        le = len(newS)\n    print('YES')\nn = int(input())\nfor i in range(n):\n    fib()", "import sys\n\ndef test_string(target: str):\n    while len(target) > 0:\n        if len(target) % 2 == 0:\n            if target[:len(target) // 2] == target[len(target) // 2:]:\n                target = target[len(target) // 2:]\n            else:\n                return False\n        else:\n            target = target[:-1]\n    return True\nn = int(sys.stdin.readline())\nfor _ in range(n):\n    l = int(sys.stdin.readline())\n    target = sys.stdin.readline().strip()\n    print('YES' if test_string(target) else 'NO')", "def checkString(str, n):\n    while n > 1:\n        halfLen = n // 2\n        (a, b) = (str[0:halfLen], str[halfLen:n])\n        if n % 2 == 0:\n            if a == b:\n                n = halfLen\n            else:\n                return False\n        elif a == b[0:halfLen]:\n            n = halfLen\n        else:\n            return False\n    return True\nn = int(input())\nfor _ in range(n):\n    ln = int(input())\n    st = input()\n    if checkString(st, ln):\n        print('YES')\n    else:\n        print('NO')", "def checkString(str, n):\n    while n > 1:\n        halfLen = n // 2\n        (a, b) = (str[0:halfLen], str[halfLen:n])\n        if n % 2 == 0:\n            if a == b:\n                n = halfLen\n            else:\n                return False\n        elif a == b[0:halfLen]:\n            n = halfLen\n        else:\n            return False\n    return True\nn = int(input())\nfor _ in range(n):\n    ln = int(input())\n    st = input()\n    if checkString(st, ln):\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) % 2 == 1:\n            s = s[:-1]\n        else:\n            k = len(s) // 2\n            if s[:k] == s[k:]:\n                s = s[:k]\n            else:\n                break\n    print('YES' if len(s) == 0 else 'NO')", "def solve(s):\n    if len(s) <= 1:\n        return True\n    if len(s) % 2:\n        return solve(s[:-1])\n    else:\n        n = len(s)\n        return s[:n // 2] == s[n // 2:] and solve(s[n // 2:])\nfor _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    print('YES') if solve(s) else print('NO')", "def solve(s):\n    if not s:\n        return True\n    n = len(s)\n    if n == 1:\n        return True\n    if n % 2:\n        return solve(s[:-1])\n    mid = n // 2\n    if s[:mid] == s[mid:]:\n        return solve(s[:mid])\n    return False\nfor _ in range(int(input())):\n    trash = input()\n    s = list(input().strip())\n    print('YES' if solve(s) else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    flag = 1\n    while len(a) != 1:\n        if len(a) % 2 != 0:\n            a = a[:len(a) - 1]\n        elif a[:len(a) // 2] == a[len(a) // 2:len(a)]:\n            a = a[:len(a) // 2]\n        else:\n            flag = 0\n            break\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "t1 = int(input())\nwhile t1 > 0:\n    n = int(input())\n    t = input()\n    f = 1\n    while len(t) != 1:\n        if len(t) % 2 == 1:\n            t = t[:len(t) - 1]\n        elif t[:len(t) // 2] == t[len(t) // 2:len(t)]:\n            t = t[:len(t) // 2]\n        else:\n            f = 0\n            break\n    if f == 1:\n        print('YES')\n    else:\n        print('NO')\n    t1 -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    a = input().strip()\n    flag = 1\n    i = n - 1\n    while i > -1:\n        if len(a[:i + 1]) & 1 and flag:\n            i -= 1\n            flag = 0\n        elif len(a[:i + 1]) & 1 == 0 and a[:i // 2 + 1] == a[i // 2 + 1:i + 1]:\n            flag = 1\n            i = i // 2\n        else:\n            break\n    if i < 0:\n        print('YES')\n    else:\n        print('NO')\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    c = 0\n    while len(s) > 1:\n        if len(s) % 2 == 0:\n            l = s[0:len(s) // 2]\n            r = s[len(s) // 2:len(s)]\n            if l == r:\n                s = l\n            else:\n                c = 1\n                print('NO')\n                break\n        else:\n            l = s[0:len(s) // 2]\n            r = s[len(s) // 2:len(s) - 1]\n            if l == r:\n                s = l\n            else:\n                c = 1\n                print('NO')\n                break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    N = int(input())\n    A = input()\n    res = 1\n    while N:\n        if N & 1:\n            N -= 1\n            A = A[:-1]\n        else:\n            n = N // 2\n            if A[:n] == A[n:]:\n                A = A[:n]\n                N = n\n            else:\n                res = 0\n                break\n    if res:\n        print('YES')\n    else:\n        print('NO')", "def main():\n    for _ in range(int(input())):\n        N = int(input())\n        A = input()\n        res = 1\n        while N:\n            if N & 1:\n                N -= 1\n                A = A[:-1]\n            else:\n                n = N // 2\n                if A[:n] == A[n:]:\n                    A = A[:n]\n                    N = n\n                else:\n                    res = 0\n                    break\n        if res:\n            print('YES')\n        else:\n            print('NO')\nmain()", "from math import sqrt, ceil, floor, gcd, log2\nimport sys\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, OrderedDict, deque\nfrom itertools import combinations, groupby\nfrom time import time\nfrom heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    for i in range(len(s)):\n        if len(s) % 2 == 1:\n            s = s[:-1]\n        else:\n            k = len(s) // 2\n            if s[:k] == s[k:]:\n                s = s[:k]\n            else:\n                break\n    print('YES' if len(s) == 0 else 'NO')", "for t in range(int(input())):\n    l = int(input())\n    A = str(input())\n    ans = 1\n    while l > 0:\n        if l % 2 == 1:\n            l -= 1\n        else:\n            mid = int(l / 2) - 1\n            a = A[0:mid + 1]\n            b = A[mid + 1:mid + 1 + len(a)]\n            if a == b:\n                l = int(l / 2)\n            else:\n                ans = 0\n                break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    l = int(input())\n    A = str(input())\n    ans = 1\n    while l > 0:\n        if l % 2 == 1:\n            l -= 1\n        else:\n            mid = int(l / 2) - 1\n            a = A[0:mid + 1]\n            b = A[mid + 1:mid + 1 + len(A[0:mid + 1])]\n            if a == b:\n                l = int(l / 2)\n            else:\n                ans = 0\n                break\n    if ans:\n        print('YES')\n    else:\n        print('NO')", "import math\n\ndef aa(d, a):\n    if len(d) == 1 or len(d) == 0:\n        return 'YES'\n    elif len(d) == 2:\n        if d[0] == d[1]:\n            return 'YES'\n    elif len(d) % 2 == 0:\n        if d[:len(d) // 2] == d[len(d) // 2:]:\n            a = aa(d[:len(d) // 2], a)\n    else:\n        d = d[:-1]\n        b = len(d)\n        if d[:b // 2] == d[b // 2:]:\n            a = aa(d[:b // 2], a)\n    return a\nfor i in range(int(input())):\n    n = int(input())\n    d = input()\n    print(aa(d, 'NO'))", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    lastop = 1 if n % 2 == 1 else 2\n    possible = True\n    while n > 0:\n        if lastop == 1:\n            a = a[:n - 1]\n            n -= 1\n            lastop = 2\n            continue\n        if lastop == 2:\n            if a[:n // 2] != a[n // 2:]:\n                possible = False\n                break\n            a = a[:n // 2]\n            n = n // 2\n            lastop = 1 if n % 2 == 1 else 2\n            continue\n    print('YES' if possible else 'NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while n > 0:\n        if n % 2 == 0 and s[:n // 2] != s[n // 2:n]:\n            break\n        if n % 2 == 1:\n            n -= 1\n        else:\n            n //= 2\n    else:\n        print('YES')\n        continue\n    print('NO')", "test = int(input())\nwhile test != 0:\n    n = int(input())\n    string = input()\n    correct = True\n    while len(string) != 0:\n        if len(string) % 2 == 1:\n            string = string[:-1]\n        elif string[:len(string) // 2] == string[len(string) // 2:]:\n            string = string[:len(string) // 2]\n        else:\n            correct = False\n            print('NO')\n            break\n    if correct:\n        print('YES')\n    test -= 1", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) % 2 == 1:\n            s = s[:-1]\n        else:\n            k = len(s) // 2\n            if s[:k] == s[k:]:\n                s = s[:k]\n            else:\n                break\n    print('YES' if len(s) == 0 else 'NO')", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = input()\n    while len(A):\n        if len(A) % 2:\n            B = ''\n            for i in range((len(A) - 1) // 2):\n                B += A[i]\n            C = ''\n            for i in range((len(A) - 1) // 2, len(A) - 1):\n                C += A[i]\n            if B != C:\n                break\n            A = B\n        else:\n            B = ''\n            for i in range(len(A) // 2):\n                B += A[i]\n            C = ''\n            for i in range(len(A) // 2, len(A)):\n                C += A[i]\n            if B != C:\n                break\n            A = B\n    if len(A) == 0:\n        print('YES')\n    else:\n        print('NO')", "from sys import setrecursionlimit\nsetrecursionlimit(100000000)\n\ndef solve(A, N):\n    if len(A) == 2:\n        if A[0] != A[1]:\n            return False\n        return True\n    elif len(A) == 1:\n        return True\n    else:\n        firstHalf = A[:N // 2]\n        secondHalf = A[N // 2:N if N % 2 == 0 else N - 1]\n        if firstHalf != secondHalf:\n            return False\n        return solve(firstHalf, N // 2 - 1 if N // 2 & 1 else N // 2) and solve(secondHalf, N // 2 - 1 if N // 2 & 1 else N // 2)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        S = input()\n        if N == 1:\n            print('YES')\n        else:\n            print('YES' if solve(S[:N - 1 if N & 1 else N], N - 1 if N & 1 else N) else 'NO')\nmain()", "from sys import setrecursionlimit\nsetrecursionlimit(100000000)\n\ndef solve(A, N):\n    if len(A) == 2:\n        if A[0] != A[1]:\n            return False\n        return True\n    elif len(A) == 1:\n        return True\n    else:\n        firstHalf = A[:N // 2]\n        secondHalf = A[N // 2:N if N % 2 == 0 else N - 1]\n        if firstHalf != secondHalf:\n            return False\n        return solve(firstHalf, N // 2 - 1 if N // 2 & 1 else N // 2) and solve(secondHalf, N // 2 - 1 if N // 2 & 1 else N // 2)\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        S = input()\n        if N == 1:\n            print('YES')\n        else:\n            print('YES' if solve(S[:N - 1 if N & 1 else N], N - 1 if N & 1 else N) else 'NO')\nmain()", "N = int(input())\n\ndef can_create(s: str) -> bool:\n    i = len(s) - 1\n    can_append = True\n    while i != -1:\n        is_odd = i % 2 == 0\n        if is_odd and can_append:\n            can_append = False\n            i -= 1\n        elif not is_odd and s[:(i + 1) // 2] == s[(i + 1) // 2:i + 1]:\n            i -= (i + 1) // 2\n            can_append = True\n        else:\n            return False\n    return True\nfor _ in range(N):\n    input()\n    print('YES' if can_create(input().strip()) else 'NO')", "N = int(input())\n\ndef can_create(s: str) -> bool:\n    i = len(s) - 1\n    can_append = True\n    while i != -1:\n        is_odd = i % 2 == 0\n        if is_odd and can_append:\n            can_append = False\n            i -= 1\n        elif not is_odd and s[:(i + 1) // 2] == s[(i + 1) // 2:i + 1]:\n            i -= (i + 1) // 2\n            can_append = True\n        else:\n            return False\n    return True\nfor _ in range(N):\n    input()\n    print('YES' if can_create(input().strip()) else 'NO')", "N = int(input())\n\ndef can_create(s: str) -> bool:\n    i = len(s) - 1\n    can_append = True\n    while i != -1:\n        is_odd = i % 2 == 0\n        if is_odd and can_append:\n            can_append = False\n            i -= 1\n        elif not is_odd and s[:(i + 1) // 2] == s[(i + 1) // 2:i + 1]:\n            i -= (i + 1) // 2\n            can_append = True\n        else:\n            return False\n    return True\nfor _ in range(N):\n    input()\n    print('YES' if can_create(input().strip()) else 'NO')", "import sys\nimport os\nimport math\nimport collections\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = input()\n    while len(A):\n        if len(A) % 2:\n            B = ''\n            for i in range((len(A) - 1) // 2):\n                B += A[i]\n            C = ''\n            for i in range((len(A) - 1) // 2, len(A) - 1):\n                C += A[i]\n            if B != C:\n                break\n            A = B\n        else:\n            B = ''\n            for i in range(len(A) // 2):\n                B += A[i]\n            C = ''\n            for i in range(len(A) // 2, len(A)):\n                C += A[i]\n            if B != C:\n                break\n            A = B\n    if len(A) == 0:\n        print('YES')\n    else:\n        print('NO')", "import sys\nfrom itertools import islice\nfor s in islice(sys.stdin, 2, None, 2):\n    n = len(s) - 1\n    r = 'YES'\n    while n > 1:\n        n //= 2\n        if s[:n] != s[n:n + n]:\n            r = 'NO'\n            break\n    print(r)", "import sys\nfrom itertools import islice\nfor s in islice(sys.stdin, 2, None, 2):\n    n = len(s) - 1\n    r = 'YES'\n    while n:\n        n //= 2\n        if s[:n] != s[n:n + n]:\n            r = 'NO'\n            break\n    print(r)", "import sys\nfrom itertools import islice\nfor s in islice(sys.stdin, 2, None, 2):\n    n = len(s) - 1\n    r = 'YES'\n    while n:\n        m = n // 2\n        if s[:m] != s[m:m + m]:\n            r = 'NO'\n            break\n        n = m\n    print(r)", "import sys\nfrom itertools import islice\nfor s in islice(sys.stdin, 2, None, 2):\n    n = len(s) - 1\n    r = 'YES'\n    while n:\n        m = n // 2\n        if s[:m] != s[m:n - n % 2]:\n            r = 'NO'\n            break\n        n = m\n    print(r)", "T = int(input())\nvector = lambda x, t: [t(num) for num in x.split()]\nglobal cnt\ncnt = 0\n\ndef check(S, clip=False, delete=False):\n    if not S:\n        return True\n    if len(S) & 1:\n        if clip:\n            return False\n        elif check(S[:-1], True, False):\n            return True\n        else:\n            return False\n    elif S[:len(S) // 2] == S[len(S) // 2:] and check(S[:len(S) // 2], False, True):\n        return True\n    return False\nfor _ in range(T):\n    n = int(input())\n    S = input()\n    print('YES' if check(S) else 'NO')", "import sys\nfrom itertools import islice\nfor s in islice(sys.stdin, 2, None, 2):\n    s = s[:-1]\n    n = len(s)\n    r = 'YES'\n    while n:\n        if n & 1:\n            s = s[:-1]\n        n >>= 1\n        t = s[n:]\n        s = s[:n]\n        if s != t:\n            r = 'NO'\n            break\n    print(r)", "import sys\nfrom itertools import islice\nfor s in islice(sys.stdin, 2, None, 2):\n    (*s,) = s[:-1]\n    n = len(s)\n    r = 'YES'\n    while n:\n        if n & 1:\n            del s[-1]\n        n >>= 1\n        if s[:n] != s[n:]:\n            r = 'NO'\n            break\n        del s[n:]\n    print(r)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    while len(s) > 1:\n        if len(s) % 2 == 0:\n            if s[:len(s) // 2] == s[len(s) // 2:]:\n                s = s[:len(s) // 2]\n            else:\n                print('NO')\n                break\n        else:\n            s = s[:len(s) - 1]\n            if s[:len(s) // 2] == s[len(s) // 2:]:\n                s = s[:len(s) // 2]\n            else:\n                print('NO')\n                break\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    while len(s) > 1:\n        if len(s) % 2 == 0:\n            if s[:len(s) // 2] == s[len(s) // 2:]:\n                s = s[:len(s) // 2]\n            else:\n                print('NO')\n                break\n        else:\n            s = s[:len(s) - 1]\n            if s[:len(s) // 2] == s[len(s) // 2:]:\n                s = s[:len(s) // 2]\n            else:\n                print('NO')\n                break\n    else:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    flag = 1\n    while n > 0:\n        if n % 2 != 0:\n            n -= 1\n        else:\n            if s[0:n // 2] != s[n // 2:n]:\n                flag = 0\n                break\n            n = n // 2\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "ans = ''\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if n == 1:\n        ans += 'YES\\n'\n        continue\n    if s[0] != s[1]:\n        ans += 'NO\\n'\n        continue\n    i = n - 1\n    flag = n % 2 == 1\n    poss = True\n    while i >= 0:\n        if (i + 1) % 2 == 0:\n            if s[:(i + 1) // 2] == s[(i + 1) // 2:i + 1]:\n                i = (i - 1) // 2\n                flag = True\n            else:\n                poss = False\n                break\n        elif flag:\n            i -= 1\n            flag = False\n        else:\n            poss = False\n            break\n    if poss:\n        ans += 'YES\\n'\n    else:\n        ans += 'NO\\n'\nprint(ans)", "testcases = int(input())\nfor eachcase in range(testcases):\n    n = int(input())\n    string = input()\n    while n != 0:\n        if n & 1:\n            n = n - 1\n        elif string[0:n // 2] == string[n // 2:n]:\n            n = n // 2\n        else:\n            break\n    if n == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    flag = True\n    while flag:\n        if len(s) % 2 == 0:\n            front = s[:int(len(s) / 2)]\n            back = s[int(len(s) / 2):]\n            if front == back:\n                s = front\n            else:\n                flag = False\n        else:\n            s = s[:int(len(s)) - 1]\n        if s == '':\n            break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def func(s):\n    flag = 1\n    while len(s) != 0:\n        if len(s) % 2 == 0:\n            if s[0:len(s) // 2] == s[len(s) // 2:]:\n                s = s[0:len(s) // 2]\n            else:\n                flag = 0\n                break\n        else:\n            s = s[:len(s) - 1]\n    return flag\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = func(s)\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    while len(s) > 0:\n        if len(s) % 2 == 1:\n            s = s[:-1]\n        else:\n            half = len(s) // 2\n            if s[:half] == s[half:]:\n                s = s[:half]\n            else:\n                break\n    if len(s) == 0:\n        print('YES')\n    else:\n        print('NO')", "def func(s):\n    flag = 1\n    while len(s) != 0:\n        if len(s) % 2 == 0:\n            if s[0:len(s) // 2] == s[len(s) // 2:]:\n                s = s[0:len(s) // 2]\n            else:\n                flag = 0\n                break\n        else:\n            s = s[:len(s) - 1]\n    return flag\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    ans = func(s)\n    if ans == 1:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor __ in range(t):\n    n = int(input())\n    s = input()\n    flag = True\n    while n > 0:\n        if n % 2 != 0:\n            n -= 1\n        else:\n            mid = n // 2\n            x = list(s[0:mid])\n            y = list(s[mid:n])\n            if x == y:\n                n = n // 2\n            else:\n                flag = False\n                break\n    if flag:\n        print('YES')\n    else:\n        print('NO')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n\ndef chk(flag):\n    if flag:\n        print('YES')\n    else:\n        print('NO')\nfor T in range(int(input())):\n    n = ni()\n    s = si()\n    flag = True\n    i = n - 1\n    while i != 0:\n        if (i + 1) % 2 == 1:\n            i -= 1\n        elif s[:(i + 1) // 2] == s[(i + 1) // 2:i + 1]:\n            i //= 2\n        else:\n            flag = False\n            break\n    chk(flag)"]