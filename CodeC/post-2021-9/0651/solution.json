["from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\ninp = stdin.readline\n\ndef get_cycle_profile():\n    prm = tuple((int(s) for s in inp().split()))\n    cyc = defaultdict(int)\n    vis = [False] * (len(prm) + 1)\n    for p in prm:\n        if vis[p]:\n            continue\n        plen = 1\n        vis[p] = True\n        rov = prm[p - 1]\n        while not vis[rov]:\n            vis[rov] = True\n            plen += 1\n            rov = prm[rov - 1]\n        cyc[plen] += 1\n    return tuple(cyc.items())\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = get_cycle_profile()\n    Bcyc = get_cycle_profile()\n    totcyc = sum((af * sum((gcd(ac, bc) * bf for (bc, bf) in Bcyc)) for (ac, af) in Acyc))\n    ans.append(N * N - totcyc)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\ninp = stdin.readline\n\ndef get_cycle_profile():\n    prm = tuple((int(s) for s in inp().split()))\n    cyc = defaultdict(int)\n    vis = [False] * (len(prm) + 1)\n    for p in prm:\n        if vis[p]:\n            continue\n        plen = 1\n        vis[p] = True\n        rov = prm[p - 1]\n        while not vis[rov]:\n            vis[rov] = True\n            plen += 1\n            rov = prm[rov - 1]\n        cyc[plen] += 1\n    return tuple(cyc.items())\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = get_cycle_profile()\n    Bcyc = get_cycle_profile()\n    totcyc = sum((af * sum((gcd(ac, bc) * bf for (bc, bf) in Bcyc)) for (ac, af) in Acyc))\n    ans.append(N * N - totcyc)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\ninp = stdin.readline\n\ndef get_cycle_profile():\n    prm = tuple((int(s) for s in inp().split()))\n    cyc = defaultdict(int)\n    vis = [False] * (len(prm) + 1)\n    for p in prm:\n        if vis[p]:\n            continue\n        plen = 1\n        vis[p] = True\n        rov = prm[p - 1]\n        while not vis[rov]:\n            vis[rov] = True\n            plen += 1\n            rov = prm[rov - 1]\n        cyc[plen] += 1\n    return tuple(cyc.items())\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = get_cycle_profile()\n    Bcyc = get_cycle_profile()\n    totcyc = sum((af * sum((gcd(ac, bc) * bf for (bc, bf) in Bcyc)) for (ac, af) in Acyc))\n    ans.append(N * N - totcyc)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\ninp = stdin.readline\n\ndef get_cycle_profile():\n    prm = tuple((int(s) - 1 for s in inp().split()))\n    cyc = defaultdict(int)\n    vis = [False] * len(prm)\n    for p in prm:\n        if vis[p]:\n            continue\n        plen = 1\n        vis[p] = True\n        rov = prm[p]\n        while not vis[rov]:\n            vis[rov] = True\n            plen += 1\n            rov = prm[rov]\n        cyc[plen] += 1\n    return tuple(cyc.items())\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = get_cycle_profile()\n    Bcyc = get_cycle_profile()\n    totcyc = sum((af * sum((gcd(ac, bc) * bf for (bc, bf) in Bcyc)) for (ac, af) in Acyc))\n    ans.append(N * N - totcyc)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\ninp = stdin.readline\n\ndef get_cycle_profile():\n    prm = tuple((int(s) - 1 for s in inp().split()))\n    cyc = defaultdict(int)\n    vis = [p == x for (x, p) in enumerate(prm)]\n    sv = sum(vis)\n    if sv > 0:\n        cyc[1] = sv\n    for p in prm:\n        if vis[p]:\n            continue\n        plen = 1\n        vis[p] = True\n        rov = prm[p]\n        while not vis[rov]:\n            vis[rov] = True\n            plen += 1\n            rov = prm[rov]\n        cyc[plen] += 1\n    return tuple(cyc.items())\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = get_cycle_profile()\n    Bcyc = get_cycle_profile()\n    totcyc = sum((af * sum((gcd(ac, bc) * bf for (bc, bf) in Bcyc)) for (ac, af) in Acyc))\n    ans.append(N * N - totcyc)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\n\ndef get_cycle_profile():\n    prm = tuple(map(int, inp().split()))\n    cyc = defaultdict(int)\n    tc = [True] * (len(prm) + 1)\n    for p in prm:\n        if tc[p]:\n            plen = 1\n            tc[p] = False\n            rov = prm[p - 1]\n            while tc[rov]:\n                tc[rov] = False\n                plen += 1\n                rov = prm[rov - 1]\n            cyc[plen] += 1\n    return tuple(cyc.items())\ninp = stdin.readline\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = get_cycle_profile()\n    Bcyc = get_cycle_profile()\n    extcyc = sum((af * sum((gcd(ac, bc) * bf for (bc, bf) in Bcyc)) for (ac, af) in Acyc))\n    ans.append(N * N - extcyc)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\n\ndef cycle_prof(prm):\n    cyc = defaultdict(int)\n    tc = [True] * (len(prm) + 1)\n    for p in prm:\n        if tc[p]:\n            plen = 1\n            tc[p] = False\n            rov = prm[p - 1]\n            while tc[rov]:\n                tc[rov] = False\n                plen += 1\n                rov = prm[rov - 1]\n            cyc[plen] += 1\n    return tuple(cyc.items())\ninp = stdin.readline\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = cycle_prof(tuple(map(int, inp().split())))\n    Bcyc = cycle_prof(tuple(map(int, inp().split())))\n    extcyc = sum((af * sum((gcd(ac, bc) * bf for (bc, bf) in Bcyc)) for (ac, af) in Acyc))\n    ans.append(N * N - extcyc)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\n\ndef cycle_prof(prm):\n    cyc = defaultdict(int)\n    tc = [True] * (len(prm) + 1)\n    for p in prm:\n        if tc[p]:\n            plen = 1\n            tc[p] = False\n            rov = prm[p - 1]\n            while tc[rov]:\n                tc[rov] = False\n                plen += 1\n                rov = prm[rov - 1]\n            cyc[plen] += 1\n    return cyc\ninp = stdin.readline\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = cycle_prof(list(map(int, inp().split())))\n    Bcyc = cycle_prof(list(map(int, inp().split())))\n    extcyc = sum((af * sum((gcd(ac, bc) * bf for (bc, bf) in Bcyc.items())) for (ac, af) in Acyc.items()))\n    ans.append(N * N - extcyc)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\n\ndef cycle_prof(prm):\n    cyc = defaultdict(int)\n    tc = [True] * (len(prm) + 1)\n    for p in prm:\n        if tc[p]:\n            plen = 1\n            tc[p] = False\n            rov = prm[p - 1]\n            while tc[rov]:\n                tc[rov] = False\n                plen += 1\n                rov = prm[rov - 1]\n            cyc[plen] += 1\n    return cyc\ninp = stdin.readline\nT = int(inp())\nans = []\nfor tx in range(T):\n    N = int(inp())\n    Acyc = cycle_prof(list(map(int, inp().split())))\n    Bcyc = cycle_prof(list(map(int, inp().split())))\n    swaps = 0\n    for (ac, af) in Acyc.items():\n        swaps += af * sum(((ac * bc - gcd(ac, bc)) * bf for (bc, bf) in Bcyc.items()))\n    ans.append(swaps)\nprint(*ans, sep='\\n')", "from sys import stdin\nfrom collections import defaultdict\nfrom math import gcd\n\ndef cycle_prof(prm):\n    cyc = defaultdict(int)\n    tc = [True] * (len(prm) + 1)\n    for p in prm:\n        if tc[p]:\n            plen = 1\n            tc[p] = False\n            rov = prm[p - 1]\n            while tc[rov]:\n                tc[rov] = False\n                plen += 1\n                rov = prm[rov - 1]\n            cyc[plen] += 1\n    return cyc\ninp = stdin.readline\nT = int(inp())\nfor tx in range(T):\n    N = int(inp())\n    Acyc = cycle_prof(list(map(int, inp().split())))\n    Bcyc = cycle_prof(list(map(int, inp().split())))\n    swaps = 0\n    for (ac, af) in Acyc.items():\n        for (bc, bf) in Bcyc.items():\n            g = gcd(ac, bc)\n            swaps += (ac * bc - g) * af * bf\n    print(swaps)"]