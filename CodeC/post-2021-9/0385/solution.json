["def Test(n, a, k):\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + a[i]\n    s = [0] * k\n    r = 0\n    for i in range(k):\n        s[i] = dp[n - k + i] - r & 1\n        r = dp[i]\n    return s.count(1)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, [*input()]))\n    print(Test(n, a, k))", "def Test(n, a, k):\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + a[i]\n    s = [0] * k\n    r = 0\n    for i in range(k):\n        s[i] = dp[n - k + i] - r & 1\n        r = dp[i]\n    return s.count(1)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, [*input()]))\n    print(Test(n, a, k))", "def Test(n, a, k):\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + a[i]\n    s = [0] * k\n    r = 0\n    for i in range(k):\n        s[i] = dp[n - k + i] - r & 1\n        r = dp[i]\n    return s.count(1)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, [*input()]))\n    print(Test(n, a, k))", "def Test(n, a, k):\n    dp = [0] * n\n    dp[0] = a[0]\n    for i in range(1, n):\n        dp[i] = dp[i - 1] + a[i]\n    s = [0] * k\n    r = 0\n    for i in range(k):\n        s[i] = dp[n - k + i] - r & 1\n        r = dp[i]\n    return s.count(1)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, [*input()]))\n    print(Test(n, a, k))", "from collections import deque\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, [*input()]))\n    q = [0] * n\n    q[0] = a[0]\n    for i in range(1, n):\n        q[i] = q[i - 1] + a[i]\n    w = [0] * k\n    r = 0\n    for i in range(k):\n        w[i] = q[n - k + i] - r & 1\n        r = q[i]\n    print(w.count(1))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = input()\n    nbo = 0\n    k1 = arr[0:n - k + 1].count('1')\n    if k1 % 2 == 1:\n        nbo += 1\n    for i in range(1, k):\n        k1 += int(arr[n - k + 1 + i - 1]) - int(arr[i - 1])\n        if k1 % 2 == 1:\n            nbo += 1\n    print(nbo)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    arr = input()\n    nbo = 0\n    k1 = arr[0:n - k + 1].count('1')\n    if k1 % 2 == 1:\n        nbo += 1\n    for i in range(1, k):\n        k1 += int(arr[n - k + 1 + i - 1]) - int(arr[i - 1])\n        if k1 % 2 == 1:\n            nbo += 1\n    print(nbo)", "import math, sys, collections\ninput = sys.stdin.readline\nistr = lambda : input().strip()\ninum = lambda : int(input().strip())\nimap = lambda : map(int, input().strip().split())\nilist = lambda : list(map(int, input().strip().split()))\ntry:\n    tcs = inum()\n    for i in range(tcs):\n        (n, k) = imap()\n        s = istr()\n        w = '$'\n        w += s\n        res = 0\n        presum = [0] * (n + 2)\n        for i in range(1, n + 1):\n            presum[i] = presum[i - 1] + (w[i] == '1')\n        for i in range(1, k + 1):\n            (start, end) = (i, n - k + i)\n            val = presum[end] - presum[start - 1]\n            res += val % 2\n        print(res)\nexcept Exception as e:\n    pass", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    K = n - k + 1\n    xor = 0\n    ans = 0\n    for (i, char) in enumerate(s):\n        xor ^= int(char)\n        if i >= K - 1:\n            if xor:\n                ans += 1\n            xor ^= int(s[i - K + 1])\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    (n, k) = input().split()\n    s = input()\n    n = int(n)\n    k = int(k)\n    ans = 0\n    c = 0\n    for i in range(0, n - k):\n        if s[i] == '1':\n            c += 1\n    for j in range(0, k):\n        if s[n - k + j] == '1':\n            c += 1\n        if c % 2 != 0:\n            ans += 1\n        if s[j] == '1':\n            c -= 1\n    print(ans)", "def xor(n, k, s):\n    count = 0\n    if n == k:\n        for i in s:\n            if i == '1':\n                count += 1\n        return count\n    temp = 0\n    for i in range(n - k + 1):\n        if s[i] == '1':\n            temp += 1\n    if temp & 1:\n        count += 1\n    for i in range(1, k):\n        if s[i - 1] == '1':\n            temp -= 1\n        if s[n - k + i] == '1':\n            temp += 1\n        if temp & 1:\n            count += 1\n    return count\nt = int(input().strip())\nwhile t:\n    (N, K) = map(int, input().split())\n    S = input()\n    print(xor(N, K, S))\n    t -= 1", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = []\n    c = 0\n    for j in s:\n        if j == '1':\n            c = c + 1\n        l.append(c)\n    x = n - k\n    t = [0] * k\n    p = x + 1\n    t[0] = l[p - 1]\n    for j in range(1, k):\n        t[j] = l[j + p - 1] - l[j - 1]\n    c = 0\n    for j in t:\n        if j % 2 == 1:\n            c = c + 1\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    count = 0\n    if k == 1:\n        cnt = s.count('1')\n        if cnt % 2 == 0:\n            print('0')\n        else:\n            print('1')\n    else:\n        for i in range(n - k + 1):\n            if s[i] == '1':\n                count += 1\n        lst = []\n        lst.append(count)\n        p = n - k + 1\n        start = 0\n        while p < n:\n            if s[start] == '1':\n                count = count - 1\n            if s[p] == '1':\n                count = count + 1\n            start += 1\n            p += 1\n            lst.append(count)\n        ans = 0\n        for i in lst:\n            if i % 2 != 0:\n                ans += 1\n        print(ans)", "for _ in range(int(input())):\n\n    def xor(x, y):\n        if x == '0' and y == '0' or (x == '1' and y == '1'):\n            return '0'\n        else:\n            return '1'\n    (N, K) = map(int, input().split())\n    S = input()\n    ans = 0\n    m = len(S[:N - K + 1].replace('0', ''))\n    prev = 'even'\n    if m % 2 != 0:\n        ans = 1\n        prev = 'odd'\n    for i in range(1, K):\n        if S[i - 1] == '1' and S[i + N - K] == '1':\n            if prev == 'odd':\n                ans += 1\n        elif S[i - 1] == '0' and S[i + N - K] == '0':\n            if prev == 'odd':\n                ans += 1\n        elif S[i - 1] == '0' and S[i + N - K] == '1':\n            if prev == 'even':\n                prev = 'odd'\n                ans += 1\n            elif prev == 'odd':\n                prev = 'even'\n        elif prev == 'even':\n            prev = 'odd'\n            ans += 1\n        elif prev == 'odd':\n            prev = 'even'\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    r = ''\n    h = {'1': 0, '0': 0}\n    j = 0\n    for i in range(n):\n        if i <= n - k:\n            h[s[i]] += 1\n        else:\n            if h['1'] % 2:\n                r += '1'\n            else:\n                r += '0'\n            h[s[i]] += 1\n            h[s[j]] -= 1\n            j = j + 1\n    if h['1'] % 2:\n        r = r + '1'\n    c = 0\n    for i in r:\n        if i == '1':\n            c = c + 1\n    print(c)", "def func():\n    (n, k) = map(int, input().split())\n    c = 0\n    ans = 0\n    s = input()\n    for i in range(n - k + 1):\n        if s[i] == '1':\n            c += 1\n    if c % 2 == 1:\n        ans += 1\n    for i in range(n - k + 1, n):\n        if s[i - n + k - 1] == '1':\n            c -= 1\n        if s[i] == '1':\n            c += 1\n        if c % 2 == 1:\n            ans += 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    func()", "def getInput():\n    return list(map(int, input().split(' ')))\n\ndef main():\n    x = getInput()\n    y = input()\n    res = 0\n    p = 0\n    q = x[0] - x[1] + 2\n    flag = 0\n    if y[:q - 1].count('1') % 2 != 0:\n        res += 1\n        flag = 1\n    while q <= x[0]:\n        if y[p] != y[q - 1]:\n            flag = (flag + 1) % 2\n        if flag == 1:\n            res += 1\n        p += 1\n        q += 1\n    print(res)\nfor _ in range(int(input())):\n    main()", "def getInput():\n    return list(map(int, input().split(' ')))\n\ndef main():\n    x = getInput()\n    y = input()\n    res = 0\n    p = 0\n    q = x[0] - x[1] + 2\n    flag = 0\n    if y[:q - 1].count('1') % 2 != 0:\n        res += 1\n        flag = 1\n    while q <= x[0]:\n        if y[p] != y[q - 1]:\n            flag = (flag + 1) % 2\n        if flag == 1:\n            res += 1\n        p += 1\n        q += 1\n    print(res)\nfor _ in range(int(input())):\n    main()", "T = int(input())\nfor _ in range(T):\n    (n, k) = input().split()\n    s = input()\n    n = int(n)\n    k = int(k)\n    ans = 0\n    c = 0\n    for i in range(0, n - k):\n        if s[i] == '1':\n            c += 1\n    for j in range(0, k):\n        if s[n - k + j] == '1':\n            c += 1\n        if c % 2 != 0:\n            ans += 1\n        if s[j] == '1':\n            c -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    xo = 0\n    for i in range(n - k + 1):\n        xo ^= int(s[i])\n    if xo == 1:\n        ans += 1\n    ibeg = 0\n    iend = n - k + 1\n    while iend < n:\n        xo ^= int(s[ibeg])\n        xo ^= int(s[iend])\n        iend += 1\n        ibeg += 1\n        if xo == 1:\n            ans += 1\n    print(ans)", "from sys import stdin\n\ndef check(n, k, s):\n    ans = 0\n    c = 0\n    for i in range(0, n - k):\n        if s[i] == '1':\n            c += 1\n    for i in range(0, k):\n        if s[n - k + i] == '1':\n            c += 1\n        if c % 2 != 0:\n            ans += 1\n        if s[i] == '1':\n            c -= 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(check(n, k, s))", "for _ in range(int(input())):\n\n    def xor(x, y):\n        if x == '0' and y == '0' or (x == '1' and y == '1'):\n            return '0'\n        else:\n            return '1'\n    (N, K) = map(int, input().split())\n    S = input()\n    ans = 0\n    m = len(S[:N - K + 1].replace('0', ''))\n    prev = 'even'\n    if m % 2 != 0:\n        ans = 1\n        prev = 'odd'\n    for i in range(1, K):\n        if S[i - 1] == '1' and S[i + N - K] == '1':\n            if prev == 'odd':\n                ans += 1\n        elif S[i - 1] == '0' and S[i + N - K] == '0':\n            if prev == 'odd':\n                ans += 1\n        elif S[i - 1] == '0' and S[i + N - K] == '1':\n            if prev == 'even':\n                prev = 'odd'\n                ans += 1\n            elif prev == 'odd':\n                prev = 'even'\n        elif prev == 'even':\n            prev = 'odd'\n            ans += 1\n        elif prev == 'odd':\n            prev = 'even'\n    print(ans)", "for _ in range(int(input())):\n\n    def xor(x, y):\n        if x == '0' and y == '0' or (x == '1' and y == '1'):\n            return '0'\n        else:\n            return '1'\n    (N, K) = map(int, input().split())\n    S = input()\n    ans = 0\n    m = len(S[:N - K + 1].replace('0', ''))\n    prev = 'even'\n    if m % 2 != 0:\n        ans = 1\n        prev = 'odd'\n    for i in range(1, K):\n        if S[i - 1] == '1' and S[i + N - K] == '1':\n            if prev == 'odd':\n                ans += 1\n        elif S[i - 1] == '0' and S[i + N - K] == '0':\n            if prev == 'odd':\n                ans += 1\n        elif S[i - 1] == '0' and S[i + N - K] == '1':\n            if prev == 'even':\n                prev = 'odd'\n                ans += 1\n            elif prev == 'odd':\n                prev = 'even'\n        elif prev == 'even':\n            prev = 'odd'\n            ans += 1\n        elif prev == 'odd':\n            prev = 'even'\n    print(ans)", "for _ in range(int(input())):\n\n    def xor(x, y):\n        if x == '0' and y == '0' or (x == '1' and y == '1'):\n            return '0'\n        else:\n            return '1'\n    (N, K) = map(int, input().split())\n    S = input()\n    ans = 0\n    m = len(S[:N - K + 1].replace('0', ''))\n    prev = 'even'\n    if m % 2 != 0:\n        ans = 1\n        prev = 'odd'\n    for i in range(1, K):\n        if S[i - 1] == '1' and S[i + N - K] == '1' or (S[i - 1] == '0' and S[i + N - K] == '0'):\n            if prev == 'odd':\n                ans += 1\n        elif S[i - 1] == '0' and S[i + N - K] == '1' or (S[i - 1] == '1' and S[i + N - K] == '0'):\n            if prev == 'even':\n                prev = 'odd'\n                ans += 1\n            elif prev == 'odd':\n                prev = 'even'\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = []\n    p = 0\n    for i in range(n - k + 1):\n        p = p ^ int(s[i])\n    ans.append(p)\n    i = 0\n    j = n - k + 1\n    while j < n:\n        p = p ^ int(s[i])\n        p = p ^ int(s[j])\n        i += 1\n        j += 1\n        ans.append(p)\n    print(ans.count(1))", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    xo = 0\n    c = 0\n    for i in range(n - k + 1):\n        xo ^= int(s[i])\n    if xo == 1:\n        c += 1\n    inc = n - k + 1\n    exc = 0\n    while inc < n:\n        xo ^= int(s[exc])\n        xo ^= int(s[inc])\n        exc += 1\n        inc += 1\n        if xo == 1:\n            c += 1\n    print(c)", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    lst = list(map(int, input().split()))\n    s = input()\n    (n, k) = (lst[0], lst[1])\n    lr = [0] * (n + 1)\n    rl = [0] * (n + 1)\n    l = '$' + s\n    for i in range(1, n + 1):\n        if l[i] == '1':\n            lr[i] = lr[i - 1] + 1\n        else:\n            lr[i] = lr[i - 1]\n    r = s + '$'\n    for i in range(n - 1, -1, -1):\n        if r[i] == '1':\n            rl[i] = rl[i + 1] + 1\n        else:\n            rl[i] = rl[i + 1]\n    lr = lr[1:]\n    rl = rl[:-1]\n    ones = lr[-1]\n    ln = n - k + 1\n    i = 0\n    ans = 0\n    while True:\n        end = i + ln - 1\n        if end >= n:\n            break\n        else:\n            one = ones\n            if i > 0:\n                one -= lr[i - 1]\n            if end < n - 1:\n                one -= rl[end + 1]\n            if one % 2 != 0:\n                ans += 1\n        i += 1\n    print(ans)", "from functools import reduce\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    count = 0\n    if n == k:\n        print(s.count('1'))\n    else:\n        s1 = []\n        for c in s:\n            s1.append(int(c))\n        test = s1[:n - k + 1]\n        j = len(test)\n        i = 0\n        res = reduce(lambda x, y: x ^ y, test)\n        while True:\n            if res == 1:\n                count += 1\n            if j < n:\n                res = res ^ s1[i] ^ s1[j]\n                i += 1\n                j += 1\n            else:\n                break\n        print(count)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    A = input()\n    B = [0] * (n + 1)\n    for (i, val) in enumerate(A, start=1):\n        if val == '0':\n            B[i] = B[i - 1]\n        else:\n            B[i] = B[i - 1] + 1\n    ans = 0\n    for i in range(k):\n        ans += (B[n - k + i + 1] - B[i]) % 2\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    li = list(input())\n    ans = [0] * (n + 1)\n    c = 0\n    for i in range(n):\n        c += int(li[i])\n        ans[i + 1] = c\n    t = 0\n    for i in range(1, k + 1):\n        if (ans[i + n - k] - ans[i - 1]) % 2 == 1:\n            t += 1\n    print(t)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    xor = input()\n    prefix = [0] * n\n    prefix[-1] = 1 if xor[-1] == '1' else 0\n    for i in range(n - 2, -1, -1):\n        prefix[i] = prefix[i + 1] + 1 if xor[i] == '1' else prefix[i + 1]\n    prefix.append(0)\n    ans = 0\n    for i in range(m):\n        if (prefix[i] - prefix[n - m + i + 1]) % 2:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    s = [int(x) for x in s]\n    ans = 0\n    tmp = 0\n    for i in range(0, n - k + 1):\n        tmp = tmp ^ s[i]\n    ans += tmp\n    for i in range(n - k + 1, n):\n        tmp = tmp ^ s[i - (n - k + 1)]\n        tmp = tmp ^ s[i]\n        ans += tmp\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = list(map(int, input()))\n    pre = [0] * (len(data) + 1)\n    for i in range(len(data)):\n        pre[i + 1] = pre[i] + data[i]\n    total = 0\n    col_length = len(data) - k + 1\n    for i in range(k):\n        count = pre[i + col_length] - pre[i]\n        total += count % 2\n    print(total)", "t = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split())\n    s = input()\n    pointer = 0\n    c = 0\n    y = int(s[0])\n    for i in range(1, n - k + 1):\n        y = y ^ int(s[i])\n    if y == 1:\n        c = c + 1\n    pointer = 0\n    for i in range(n - k + 1, n):\n        y = y ^ int(s[pointer])\n        y = y ^ int(s[i])\n        pointer = pointer + 1\n        if y == 1:\n            c = c + 1\n    print(c)", "for t in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = str(input())\n    prefixCount = [0]\n    for i in range(N):\n        if S[i] == '1':\n            prefixCount.append(prefixCount[-1] + 1)\n        else:\n            prefixCount.append(prefixCount[-1])\n    count = 0\n    for i in range(K):\n        if (prefixCount[i] - prefixCount[N - K + 1 + i]) % 2 != 0:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input()))\n    if n == k:\n        print(s.count(1))\n    else:\n        a = [0]\n        temp = 0\n        for i in s:\n            a.append(temp + i)\n            temp += i\n        x = n - k + 1\n        set_bits = 0\n        for i in range(k):\n            ones = a[i + x] - a[i]\n            if ones & 1:\n                set_bits += 1\n        print(set_bits)", "import sys\nfrom itertools import accumulate\nfrom operator import xor\ni = iter(sys.stdin)\nnext(i)\nfor (t, s) in zip(i, i):\n    (n, k) = map(int, t.split())\n    a = (0, *accumulate(map(int, s[:-1]), xor))\n    print(sum((x ^ y for (x, y) in zip(a, a[n - k + 1:]))))", "import sys\nfrom itertools import accumulate\nfrom operator import xor\ni = iter(sys.stdin)\nnext(i)\nfor (t, s) in zip(i, i):\n    (n, k) = map(int, t.split())\n    a = (0, *accumulate(map(int, s[:-1]), xor))\n    print(sum((a[i] ^ a[i + n - k + 1] for i in range(k))))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    o = 0\n    t = 0\n    last = 0\n    for j in range(n - k + 1):\n        t += 1 if s[j] == '1' else 0\n        last = t & 1\n        o = last\n    for i in range(1, k):\n        if s[i - 1] != s[n - k + i]:\n            last ^= 1\n        o += last\n    print(o)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = input()\n    c = 0\n    ans = 0\n    for i in range(n - k + 1):\n        if A[i] == '1':\n            c += 1\n    if c % 2 == 1:\n        ans += 1\n    beg = 0\n    end = n - k + 1\n    while end < n:\n        if A[beg] == '1':\n            c -= 1\n        if A[end] == '1':\n            c += 1\n        if c % 2 == 1:\n            ans += 1\n        beg += 1\n        end += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().rstrip()\n    if n == k:\n        print(s.count('1'))\n    else:\n        c = d = 0\n        for i in range(0, n - k + 1):\n            if s[i] == '1':\n                c += 1\n        if c % 2 != 0 and c > 0:\n            d += 1\n        for i in range(n - k + 1, n):\n            if s[i - n + k - 1] == '1' and s[i] == '0':\n                c -= 1\n            elif s[i - n + k - 1] == '0' and s[i] == '1':\n                c += 1\n            if c % 2 != 0 and c > 0:\n                d += 1\n        print(d)", "def do(a, n, k):\n    l = n - k + 1\n    counter = 0\n    c = 0\n    for i in range(l):\n        c ^= a[i]\n    if c == 1:\n        counter += 1\n    (p, q) = (0, l)\n    for i in range(k - 1):\n        c ^= a[p + i]\n        c ^= a[q + i]\n        if c == 1:\n            counter += 1\n    print(counter)\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    a = input()\n    a = [int(i) for i in a]\n    do(a, n, k)", "def do(a, n, k):\n    l = n - k + 1\n    counter = 0\n    c = 0\n    for i in range(l):\n        c ^= a[i]\n    if c == 1:\n        counter += 1\n    (p, q) = (0, l)\n    for i in range(k - 1):\n        c ^= a[p + i]\n        c ^= a[q + i]\n        if c == 1:\n            counter += 1\n    print(counter)\nt = int(input())\nfor i in range(t):\n    (n, k) = list(map(int, input().split()))\n    a = input()\n    a = [int(i) for i in a]\n    do(a, n, k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    pref = []\n    m = 0\n    for i in range(n):\n        if s[i] == '1':\n            m += 1\n        pref.append(m)\n    ans = 0\n    i = 1\n    while k > 0:\n        if k - 2 >= 0:\n            p = pref[-i] - pref[k - 2]\n            if p % 2 != 0:\n                ans += 1\n        else:\n            p = pref[-i]\n            if p % 2 != 0:\n                ans += 1\n        i = i + 1\n        k = k - 1\n    print(ans)", "import collections\nimport sys\nfrom collections import OrderedDict, Counter, defaultdict\nimport math\nimport bisect\nfrom sys import stdin, stdout\n\ndef with_index():\n    a = []\n    i = 0\n    for t in map(int, input().split()):\n        a.append((t, i))\n        i += 1\n    return a\n\ndef get_line():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef in1():\n    return int(input())\n\ndef take_input():\n    return stdin.readline()\n\ndef display_arr(arr):\n    stdout.write(' '.join(map(str, arr)) + '\\n')\n\ndef display_num(num):\n    stdout.write(str(num) + '\\n')\n\ndef factorial(n):\n    return n * factorial(n - 1) if n > 1 else 1\n\ndef percent(c, s):\n    return c / s * 100\n\ndef l2d(a):\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\na = []\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            a.append(p)\n\ndef sol(code, chef):\n    if not code or not chef:\n        return 'WA'\n    elif len(code) != len(chef):\n        return 'WA'\n    n = len(code)\n    for i in range(n):\n        if code[i] > chef[i]:\n            return 'WA'\n    return 'AC'\n\ndef get_substr(s):\n    (code, chef) = ([], [])\n    for i in range(n - 3):\n        if s[i] != 'c':\n            continue\n        sub = ''\n        for j in range(i, n - 3):\n            sub += s[j]\nfor _ in range(in1()):\n    (n, k) = get_line()\n    s = input()\n    xo = 0\n    ans = 0\n    for i in range(n - k + 1):\n        xo ^= int(s[i])\n    if xo == 1:\n        ans += 1\n    i = 0\n    j = n - k + 1\n    while j < n:\n        xo = xo ^ int(s[i])\n        xo = xo ^ int(s[j])\n        i += 1\n        j += 1\n        if xo == 1:\n            ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    curr_xor = 0\n    for i in range(n - k + 1):\n        curr_xor = curr_xor ^ int(s[i])\n    if curr_xor == 1:\n        ans = 1\n    else:\n        ans = 0\n    for i in range(k - 1):\n        curr_xor = curr_xor ^ int(s[i])\n        curr_xor = curr_xor ^ int(s[i + n - k + 1])\n        if curr_xor == 1:\n            ans = ans + 1\n    print(ans)", "try:\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        s = input()\n        xor = 0\n        for i in range(n - k + 1):\n            xor = xor ^ int(s[i])\n        cnt = 0\n        if xor == 1:\n            cnt += 1\n        for i in range(1, k):\n            xor = xor ^ int(s[i - 1]) ^ int(s[n - k + i])\n            if xor == 1:\n                cnt += 1\n        print(cnt)\nexcept:\n    pass", "import math, sys, collections\ninput = sys.stdin.readline\nistr = lambda : input().strip()\ninum = lambda : int(input().strip())\nimap = lambda : map(int, input().strip().split())\nilist = lambda : list(map(int, input().strip().split()))\ntry:\n    tcs = inum()\n    for i in range(tcs):\n        (n, k) = imap()\n        s = istr()\n        w = '$'\n        w += s\n        res = 0\n        presum = [0] * (n + 2)\n        for i in range(1, n + 1):\n            presum[i] = presum[i - 1] + (w[i] == '1')\n        for i in range(1, k + 1):\n            (start, end) = (i, n - k + i)\n            val = presum[end] - presum[start - 1]\n            res += val % 2\n        print(res)\nexcept Exception as e:\n    pass", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = n - k + 1\n    i = 0\n    ans = 0\n    temp = 0\n    j = 0\n    while i < k:\n        while j - i < t and j < n:\n            temp += int(s[j])\n            j += 1\n        if temp != 0 and temp % 2:\n            ans += 1\n        else:\n            ans += 0\n        temp -= int(s[i])\n        i += 1\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = []\n    c = 0\n    for j in s:\n        if j == '1':\n            c = c + 1\n        l.append(c)\n    x = n - k\n    t = [0] * k\n    p = x + 1\n    t[0] = l[p - 1]\n    for j in range(1, k):\n        t[j] = l[j + p - 1] - l[j - 1]\n    c = 0\n    for j in t:\n        if j % 2 == 1:\n            c = c + 1\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input()))\n    if n == k:\n        print(s.count(1))\n    else:\n        lst = [0]\n        temp = 0\n        for i in s:\n            lst.append(temp + i)\n            temp += i\n        x = n - k + 1\n        set_bits = 0\n        for i in range(k):\n            ones = lst[i + x] - lst[i]\n            if ones & 1:\n                set_bits += 1\n        print(set_bits)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input()))\n    if n == k:\n        print(s.count(1))\n    else:\n        lst = [0]\n        temp = 0\n        for i in s:\n            lst.append(temp + i)\n            temp += i\n        x = n - k + 1\n        set_bits = 0\n        for i in range(k):\n            ones = lst[i + x] - lst[i]\n            if ones & 1:\n                set_bits += 1\n        print(set_bits)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(x) for x in input().strip().split()]\n    s = list(input().strip())\n    ans = [int(x) for x in s[:k]]\n    for j in range(1):\n        for l in range(j + 1, n - k + 1 + j):\n            ans[j] = int(ans[j]) ^ int(s[l])\n    for j in range(1, k):\n        ans[j] = ans[j - 1] ^ int(s[j - 1]) ^ int(s[n - k + j])\n    print(sum(ans))", "from sys import stdin, stdout\nfrom collections import defaultdict\ninput = stdin.readline\nfrom random import randint\nimport math\nimport sys\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    a = [int(s[i]) for i in range(n)]\n    p = [0 for i in range(n + 1)]\n    p[1] = a[0]\n    for i in range(2, n + 1):\n        p[i] = p[i - 1] + a[i - 1]\n    final = [0 for i in range(k)]\n    for i in range(0, k):\n        final[i] = (p[n - k + i + 1] - p[i]) % 2\n    print(sum(final))", "def getInput():\n    return list(map(int, input().split(' ')))\n\ndef main():\n    x = getInput()\n    y = input()\n    res = 0\n    p = 0\n    q = x[0] - x[1] + 2\n    flag = 0\n    if y[:q - 1].count('1') % 2 != 0:\n        res += 1\n        flag = 1\n    while q <= x[0]:\n        if y[p] != y[q - 1]:\n            flag = (flag + 1) % 2\n        if flag == 1:\n            res += 1\n        p += 1\n        q += 1\n    print(res)\nfor _ in range(int(input())):\n    main()", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = []\n    c = 0\n    for j in s:\n        if j == '1':\n            c = c + 1\n        l.append(c)\n    x = n - k\n    t = [0] * k\n    p = x + 1\n    t[0] = l[p - 1]\n    for j in range(1, k):\n        t[j] = l[j + p - 1] - l[j - 1]\n    c = 0\n    for j in t:\n        if j % 2 == 1:\n            c = c + 1\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 0\n    answer = 0\n    for i in range(n - k):\n        if s[i] == '1':\n            c += 1\n    for i in range(k):\n        if s[n - k + i] == '1':\n            c += 1\n        if c % 2 != 0:\n            answer += 1\n        if s[i] == '1':\n            c -= 1\n    print(answer)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    c = 0\n    for i in range(0, n - k):\n        if s[i] == '1':\n            c += 1\n    for i in range(0, k):\n        if s[n - k + i] == '1':\n            c += 1\n        if c % 2 != 0:\n            ans += 1\n        if s[i] == '1':\n            c -= 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    c = 0\n    for i in range(0, n - k):\n        if s[i] == '1':\n            c += 1\n    for i in range(0, k):\n        if s[n - k + i] == '1':\n            c += 1\n        if c % 2 != 0:\n            ans += 1\n        if s[i] == '1':\n            c -= 1\n    print(ans)", "t = int(input())\nfor a in range(0, t):\n    (x, y) = [int(x) for x in input().split()]\n    s = input()\n    ans = 0\n    c = 0\n    for i in range(0, x - y):\n        if s[i] == '1':\n            c += 1\n    for i in range(0, y):\n        if s[x - y + i] == '1':\n            c += 1\n        if c % 2 != 0:\n            ans += 1\n        if s[i] == '1':\n            c -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    a = [int(s[i]) for i in range(n)]\n    p = [0 for i in range(n + 1)]\n    p[1] = a[0]\n    for i in range(2, n + 1):\n        p[i] = p[i - 1] + a[i - 1]\n    final = [0 for i in range(k)]\n    for i in range(1, k + 1):\n        final[i - 1] = (p[n - k + i] - p[i - 1]) % 2\n    print(sum(final))", "t = int(input())\nfor a in range(0, t):\n    (x, y) = [int(x) for x in input().split()]\n    s = input()\n    ans = 0\n    c = 0\n    for i in range(0, x - y):\n        if s[i] == '1':\n            c += 1\n    for i in range(0, y):\n        if s[x - y + i] == '1':\n            c += 1\n        if c % 2 != 0:\n            ans += 1\n        if s[i] == '1':\n            c -= 1\n    print(ans)", "try:\n    t = int(input())\n    for i in range(t):\n        (n, k) = list(map(int, input().split()))\n        s = input()\n        answer = 0\n        c = 0\n        for i in range(n - k):\n            if s[i] == '1':\n                c = c + 1\n        for i in range(k):\n            if s[n - k + i] == '1':\n                c = c + 1\n            if c % 2 != 0:\n                answer = answer + 1\n            if s[i] == '1':\n                c = c - 1\n        print(answer)\nexcept:\n    pass", "try:\n    t = int(input())\n    for i in range(t):\n        (n, k) = list(map(int, input().split()))\n        s = input()\n        answer = 0\n        c = 0\n        for i in range(n - k):\n            if s[i] == '1':\n                c = c + 1\n        for i in range(k):\n            if s[n - k + i] == '1':\n                c = c + 1\n            if c % 2 != 0:\n                answer = answer + 1\n            if s[i] == '1':\n                c = c - 1\n        print(answer)\nexcept:\n    pass", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    res = 0\n    ginti = 0\n    for i in range(N - K):\n        if S[i] == '1':\n            ginti += 1\n    for i in range(K):\n        if S[N - K + i] == '1':\n            ginti += 1\n        if ginti % 2 != 0:\n            res += 1\n        if S[i] == '1':\n            ginti -= 1\n    print(res)", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    res = 0\n    ginti = 0\n    for i in range(N - K):\n        if S[i] == '1':\n            ginti += 1\n    for i in range(K):\n        if S[N - K + i] == '1':\n            ginti += 1\n        if ginti % 2 != 0:\n            res += 1\n        if S[i] == '1':\n            ginti -= 1\n    print(res)", "for j in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    o = [0] * (n + 1)\n    for i in range(n):\n        if s[i] == '1':\n            o[i + 1] = o[i] + 1\n        else:\n            o[i + 1] = o[i]\n    s = 0\n    for i in range(k):\n        oo = o[i + (n - k + 1)] - o[i]\n        if oo % 2 == 1:\n            s += 1\n    print(s)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    s = input()\n    arr = [0] * N\n    add = 0\n    for i in range(N):\n        if s[i] == '1':\n            add += 1\n        arr[i] = add\n    x = N - K\n    ans = [0] * K\n    p = x + 1\n    ans[0] = arr[p - 1]\n    for i in range(1, K):\n        ans[i] = arr[i + p - 1] - arr[i - 1]\n    count = 0\n    for i in range(K):\n        if ans[i] % 2 == 1:\n            count += 1\n    print(count)", "from sys import stdin, stdout\nfrom collections import defaultdict\ninput = stdin.readline\nfrom random import randint\nimport math\nimport sys\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    a = [int(s[i]) for i in range(n)]\n    p = [0 for i in range(n + 1)]\n    p[1] = a[0]\n    for i in range(2, n + 1):\n        p[i] = p[i - 1] + a[i - 1]\n    final = [0 for i in range(k)]\n    for i in range(1, k + 1):\n        final[i - 1] = (p[n - k + i] - p[i - 1]) % 2\n    print(sum(final))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    set_bit = 0\n    for i in range(n - k + 1):\n        if s[i] == '1':\n            set_bit = set_bit + 1\n    count = 0\n    if set_bit % 2 == 0:\n        count = 0\n    else:\n        count = 1\n    h = n - k + 1\n    l = 0\n    for i in range(0, k - 1):\n        if h < n and s[l] != s[h]:\n            set_bit = set_bit - 1\n        if set_bit % 2 != 0:\n            count = count + 1\n        h = h + 1\n        l = l + 1\n    print(count)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = 0\n    d = dict()\n    m = [0] * (n + 1)\n    for r in range(n):\n        if s[r] == '1':\n            m[r + 1] = 1\n    for r in range(1, n + 1):\n        m[r] += m[r - 1]\n    for r in range(k):\n        if (m[n - k + r + 1] - m[r]) % 2 == 1:\n            l += 1\n    print(l)", "def againxor(n, k, s):\n    count = 0\n    s = '&' + s\n    dp = [0 for i in range(n + 2)]\n    for i in range(1, n + 1):\n        dp[i] = dp[i - 1] + int(s[i] == '1')\n    for i in range(1, k + 1):\n        start = i\n        end = n - k + i\n        value = dp[end] - dp[start - 1]\n        count += value % 2\n    return count\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(againxor(n, k, s))", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    s = input()\n    ll = list(map(int, s))\n    c1 = 0\n    arr = [0] * n\n    for i in range(n):\n        if ll[i] == 1:\n            c1 += 1\n        arr[i] = c1\n    x = n - k\n    ans = ['\\n'] * k\n    ans[0] = arr[x]\n    for i in range(1, k, 1):\n        ans[i] = arr[i + x] - arr[i - 1]\n    res = 0\n    for i in range(k):\n        if ans[i] % 2 != 0:\n            res += 1\n    print(res)\n    t -= 1", "import math\nfrom collections import Counter\n\ndef calc_slow(data, k):\n    result = 0\n    for i in range(0, len(data) - k + 1):\n        num = int(data[i:i + k], 2)\n        result ^= num\n    return str(bin(result)).count('1')\n\ndef calc_fast(data, k):\n    result = 0\n    slide = 0\n    for i in range(len(data)):\n        slide += int(data[i])\n        if i >= len(data) - k:\n            result += slide % 2\n            slide -= int(data[i - (len(data) - k)])\n    return result\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = input()\n    print(calc_fast(data, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = [int(e) for e in input()]\n    pref = [0] * n\n    pref[0] = s[0]\n    for i in range(1, n):\n        pref[i] = pref[i - 1] + s[i]\n    count = 0\n    if pref[n - k] % 2 != 0:\n        count += 1\n    for i in range(1, k):\n        val = pref[n - k + i] - pref[i - 1]\n        if val % 2 != 0:\n            count += 1\n    print(count)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = [0] * n\n    sum = 0\n    for i in range(n):\n        if s[i] == '1':\n            sum += 1\n        a[i] = sum\n    x = n - k\n    p = x + 1\n    ans = [0] * k\n    ans[0] = a[p - 1]\n    for i in range(1, k):\n        ans[i] = a[i + p - 1] - a[i - 1]\n    count = 0\n    for i in range(k):\n        if ans[i] % 2 == 1:\n            count += 1\n    print(count)", "t = int(input())\nfor u in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    sum = 0\n    a = []\n    for i in range(n):\n        if s[i] == '1':\n            sum = sum + 1\n        a.append(sum)\n    p = n - k + 1\n    ans = []\n    ans.append(a[p - 1])\n    for i in range(1, k):\n        ans.append(a[i + p - 1] - a[i - 1])\n    c = 0\n    for i in range(k):\n        if ans[i] % 2 == 1:\n            c = c + 1\n    print(c)", "for case in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [int(i) for i in input()]\n    sm = sum(s[0:n - k + 1])\n    c = sm % 2\n    for i in range(1, k):\n        sm = sm - s[i - 1] + s[n - k + i]\n        c += sm % 2\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    li = [0] * n\n    if s[0] == '1':\n        li[0] = 1\n    for i in range(1, n):\n        if s[i] == '1':\n            li[i] = li[i - 1] + 1\n        else:\n            li[i] = li[i - 1]\n    cnt = 0\n    x = n - k\n    if li[x] % 2:\n        cnt += 1\n    for i in range(1, k):\n        if (li[i + x] - li[i - 1]) % 2:\n            cnt += 1\n    print(cnt)", "for _ in range(int(input())):\n    pre = [0]\n    (n, k) = map(int, input().split())\n    s = input()\n    pre[0] = int(s[0])\n    for i in range(1, n):\n        pre.append(pre[i - 1] + int(s[i]))\n    ans = pre[n - k] % 2\n    for i in range(1, k):\n        ans += (pre[n - k + i] - pre[i - 1]) % 2\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    set_bit = 0\n    for i in range(n - k + 1):\n        if s[i] == '1':\n            set_bit = set_bit + 1\n    count = 0\n    if set_bit % 2 == 0:\n        count = 0\n    else:\n        count = 1\n    h = n - k + 1\n    l = 0\n    for i in range(0, k - 1):\n        if h < n and s[l] != s[h]:\n            set_bit = set_bit - 1\n        if set_bit % 2 != 0:\n            count = count + 1\n        h = h + 1\n        l = l + 1\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input()))\n    cnt = 0\n    s = ''\n    for x in range(n - k + 1):\n        cnt ^= lst[x]\n    s += str(cnt)\n    for x in range(n - k + 1, n):\n        cnt ^= lst[x - (n - k + 1)]\n        cnt ^= lst[x]\n        s += str(cnt)\n    print(s.count('1'))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = list(map(int, input()))\n    cnt = 0\n    s = ''\n    for x in range(n - k + 1):\n        cnt ^= lst[x]\n    s += str(cnt)\n    for x in range(n - k + 1, n):\n        cnt ^= lst[x - (n - k + 1)]\n        cnt ^= lst[x]\n        s += str(cnt)\n    print(s.count('1'))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    sum = 0\n    l = []\n    for j in range(n):\n        if s[j] == '1':\n            sum += 1\n        l.append(sum)\n    x = n - k\n    ans = [0] * k\n    p = x + 1\n    ans[0] = l[p - 1]\n    for j in range(1, k, 1):\n        ans[j] = l[j + p - 1] - l[j - 1]\n    count = 0\n    for j in range(k):\n        if ans[j] % 2 == 1:\n            count += 1\n    print(count)", "T = int(input())\nfor _ in range(T):\n    [N, K] = list(map(int, input().rstrip().split()))\n    binstring = input()\n    num = []\n    base = binstring[:K]\n    basenum = int(base, 2)\n    left = 0\n    minus = 2 ** (K - 1)\n    temp = basenum\n    ans = basenum\n    for j in range(K, N):\n        if binstring[left] == '1':\n            temp -= minus\n        temp = 2 * temp\n        if binstring[j] == '1':\n            temp += 1\n        ans = ans ^ temp\n        left += 1\n    print(bin(ans).count('1'))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c = 0\n    l = [0] * n\n    for i in range(n):\n        if s[i] == '1':\n            c += 1\n        l[i] = c\n    u = n - k\n    lol = 0\n    g = l[u]\n    if g % 2 == 1:\n        lol += 1\n    for i in range(k - 1):\n        g = l[i + u + 1] - l[i]\n        if g % 2 == 1:\n            lol += 1\n    print(lol)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    L = [0] * N\n    X = 0\n    for i in range(N):\n        if S[i] == '1':\n            X += 1\n        L[i] = X\n    M = [0] * K\n    M[0] = L[N - K]\n    for i in range(1, K):\n        M[i] = L[i + N - K] - L[i - 1]\n    ctr = 0\n    for i in range(K):\n        if M[i] % 2 == 1:\n            ctr += 1\n    print(ctr)", "test = int(input())\nwhile test:\n    (n, k) = map(int, input().split())\n    s = input()\n    i = 0\n    j = n - k\n    c = 0\n    count = s.count('1', i, j + 1)\n    for i in range(k):\n        if count % 2 != 0:\n            c += 1\n        if s[i] == '1':\n            count -= 1\n        i -= 1\n        j += 1\n        if j < len(s) and s[j] == '1':\n            count += 1\n    print(c)\n    test -= 1", "n = int(input())\nfor _ in range(n):\n    (N, K) = map(int, input().split())\n    S = str(input())\n    sum = 0\n    arr = [0] * N\n    ans = [0] * K\n    for i in range(0, N):\n        if S[i] == '1':\n            sum = sum + 1\n        arr[i] = sum\n    x = N - K\n    p = x + 1\n    ans[0] = arr[p - 1]\n    for i in range(1, K):\n        ans[i] = arr[i + p - 1] - arr[i - 1]\n    c = 0\n    for i in range(0, K):\n        if ans[i] % 2 == 1:\n            c = c + 1\n    print(c)", "for _ in range(int(input())):\n    (l, k) = list(map(int, input().split(' ')))\n    s = input()\n    subs = len(s) - (k - 1)\n    presum = [0] if s[0] == '0' else [1]\n    for i in range(1, len(s)):\n        presum.append(presum[i - 1] + (0 if s[i] == '0' else 1))\n    c = 0\n    for i in range(k):\n        ts = s[i:i + subs]\n        ans = presum[i + subs - 1] - (presum[i - 1] if i - 1 >= 0 else 0)\n        if ans & 1 != 0:\n            c += 1\n    print(c)", "tc = int(input())\narr = []\nfor i in range(tc):\n    s = input().split()\n    msize = int(s[0])\n    subsize = int(s[1])\n    m = input()\n    count = 0\n    result = int(m[0])\n    for j in range(1, msize - subsize + 1):\n        result = result ^ int(m[j])\n    if result == 1:\n        count = count + 1\n    for j in range(subsize - 1):\n        result = result ^ int(m[j])\n        result = result ^ int(m[j + msize - subsize + 1])\n        if result == 1:\n            count = count + 1\n    arr.append(count)\nfor i in arr:\n    print(i)", "tc = int(input())\narr = []\nfor i in range(tc):\n    s = input().split()\n    msize = int(s[0])\n    subsize = int(s[1])\n    m = input()\n    count = 0\n    result = int(m[0])\n    for j in range(1, msize - subsize + 1):\n        result = result ^ int(m[j])\n    if result == 1:\n        count = count + 1\n    for j in range(subsize - 1):\n        result = result ^ int(m[j])\n        result = result ^ int(m[j + msize - subsize + 1])\n        if result == 1:\n            count = count + 1\n    arr.append(count)\nfor i in arr:\n    print(i)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    l = [0] * (n + 1)\n    for i in range(1, n + 1):\n        if s[i - 1] == '1':\n            l[i] = l[i - 1] + 1\n        else:\n            l[i] = l[i - 1]\n    lk = [0] * k\n    for i in range(k):\n        lk[i] = l[n - k + i + 1] - l[i]\n    ans = 0\n    for i in lk:\n        if i % 2 == 1:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    if n == k:\n        x = 0\n        for i in s:\n            if i == '1':\n                x += 1\n        print(x)\n        continue\n    window = n - k + 1\n    ones = 0\n    x = 0\n    for i in range(window):\n        if s[i] == '1':\n            x += 1\n    if x % 2 == 1:\n        ones += 1\n    for i in range(k - 1):\n        if s[i] == '1':\n            x -= 1\n        if s[window + i] == '1':\n            x += 1\n        if x % 2 == 1:\n            ones += 1\n    print(ones)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    if n - k == 0:\n        ans = s.count('1')\n    else:\n        a = int(s[0])\n        for j in range(n - k):\n            a = a ^ int(s[j + 1])\n        ans = a\n        for j in range(k - 1):\n            if s[j] != s[j + n - k + 1]:\n                if a == 1:\n                    a = 0\n                else:\n                    a = 1\n            ans += a\n    print(ans)", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    binn = '$' + input()\n    lll = [0] * (x + 2)\n    for i in range(1, x + 1):\n        if binn[i] == '1':\n            lll[i] = lll[i - 1] + 1\n        else:\n            lll[i] = lll[i - 1]\n    ansss = 0\n    for i in range(1, y + 1):\n        ansss += (lll[x - y + i] - lll[i - 1]) % 2\n    print(ansss)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    arr = [0] * n\n    sm = 0\n    for i in range(n):\n        if s[i] == '1':\n            sm += 1\n        arr[i] = sm\n    x = n - k\n    ans = [0] * k\n    p = x + 1\n    ans[0] = arr[p - 1]\n    for i in range(1, k):\n        ans[i] = arr[i + p - 1] - arr[i - 1]\n    cnt = 0\n    for i in ans:\n        if i % 2 != 0:\n            cnt += 1\n    print(cnt)", "import sys\nfrom itertools import islice\ni = iter(sys.stdin)\nnext(i)\nfor (t, s) in zip(i, i):\n    (n, k) = map(int, t.split())\n    a = [0]\n    for x in islice(s, n):\n        a.append(a[-1] ^ (x > '0'))\n    print(sum((x ^ y for (x, y) in zip(a, a[n - k + 1:]))))"]