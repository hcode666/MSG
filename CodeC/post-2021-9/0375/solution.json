["def inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef solve(lent, binn):\n    evens = binn[1::2]\n    odds = binn[::2]\n    odds0 = odds.count('0')\n    odds1 = odds.count('1')\n    evens0 = evens.count('0')\n    evens1 = evens.count('1')\n    val1 = min(odds0, evens1)\n    x = lent & 1\n    valid = max(0, lent // 2 - val1 - 1 + x)\n    val2 = min(odds1, evens0)\n    ans = val1 + min(valid, val2)\n    return ans\n\ndef main():\n    for i in range(inp()):\n        print(solve(inp(), st()))\nmain()", "def inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\n\ndef solve(lent, binn):\n    evens = binn[1::2]\n    odds = binn[::2]\n    odds0 = odds.count('0')\n    odds1 = odds.count('1')\n    evens0 = evens.count('0')\n    evens1 = evens.count('1')\n    val1 = min(odds0, evens1)\n    x = lent & 1\n    valid = max(0, lent // 2 - val1 - 1 + x)\n    val2 = min(odds1, evens0)\n    ans = val1 + min(valid, val2)\n    return ans\n\ndef main():\n    for i in range(inp()):\n        print(solve(inp(), st()))\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    l = str(input())\n    ans = 0\n    a = l.count('1')\n    b = n - a\n    for i in range(1, n):\n        if l[i - 1] == '0' and l[i] == '1':\n            ans += 1\n    ans = max(ans, min(a, b) - int(a == b))\n    print(ans)", "def li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    n = ii()\n    s = ip()\n    o1 = o2 = z1 = z2 = 0\n    i = 0\n    a = s.count('1')\n    b = s.count('0')\n    string = '01' * (n // 2)\n    if s == string:\n        print(n // 2)\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    a = s.count('1')\n    b = s.count('0')\n    string = '01' * (n // 2)\n    if s == string:\n        print(n // 2)\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    a = s.count('1')\n    b = s.count('0')\n    string = '01' * (n // 2)\n    if s == string:\n        print(n // 2)\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    a = s.count('1')\n    b = s.count('0')\n    x = ''\n    s1 = ''\n    for j in range(1, n + 1):\n        if j % 2 == 0:\n            x = '1'\n        else:\n            x = '0'\n        s1 += x\n    if s == s1:\n        print(s.count('01'))\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "def merge(e, o):\n    n = len(e)\n    m = len(o)\n    s = ''\n    for i in range(m):\n        s += e[i] + o[i]\n    if n > m:\n        s += e[n - 1]\n    return s\n\ndef count01(s):\n    zero = 0\n    cnt = 0\n    for x in s:\n        if x == '0':\n            zero = 1\n        elif zero == 1:\n            zero = 0\n            cnt += 1\n    return cnt\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    s = input().strip()\n    odd_pos = n // 2\n    even_pos = n - odd_pos\n    even_0s = 0\n    even_1s = 0\n    odd_0s = 0\n    odd_1s = 0\n    for i in range(0, n, 2):\n        if s[i] == '1':\n            even_1s += 1\n        else:\n            even_0s += 1\n    for i in range(1, n, 2):\n        if s[i] == '1':\n            odd_1s += 1\n        else:\n            odd_0s += 1\n    pair = 0\n    even_s = '0' * even_0s + '1' * even_1s\n    odd_s = '1' * odd_1s + '0' * odd_0s\n    s = merge(even_s, odd_s)\n    a = count01(s)\n    even_s = '0' * even_0s + '1' * even_1s\n    odd_s = '0' * odd_0s + '1' * odd_1s\n    s = merge(even_s, odd_s)\n    b = count01(s)\n    even_s = '1' * even_1s + '0' * even_0s\n    odd_s = '0' * odd_0s + '1' * odd_1s\n    s = merge(even_s, odd_s)\n    c = count01(s)\n    even_s = '1' * even_1s + '0' * even_0s\n    odd_s = '1' * odd_1s + '0' * odd_0s\n    s = merge(even_s, odd_s)\n    d = count01(s)\n    print(max(a, b, c, d))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    S = input()\n    a = S.count('1')\n    b = S.count('0')\n    x = ''\n    S1 = ''\n    for j in range(1, N + 1):\n        if j % 2 == 0:\n            x = '1'\n        else:\n            x = '0'\n        S1 += x\n    if S == S1:\n        print(S.count('01'))\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        (t1, t0) = (0, 0)\n        check = True\n        if n % 2 == 0:\n            for i in range(0, n - 1, 2):\n                if s[i] != '0' or s[i + 1] != '1':\n                    check = False\n                    break\n            if check:\n                print(n // 2)\n                continue\n        for i in s:\n            if i == '0':\n                t0 += 1\n            else:\n                t1 += 1\n        if t0 == t1:\n            print(t0 - 1)\n        else:\n            print(min(t0, t1))\nexcept:\n    pass", "cases = int(input())\nfor t in range(cases):\n    N = int(input())\n    S = input()\n    even = []\n    odd = []\n    merged_list = [None] * len(S)\n    for i in range(len(S)):\n        if i % 2 == 0:\n            even.append(S[i])\n        else:\n            odd.append(S[i])\n\n    def merge(even, odd, merged_list):\n        merged_list[::2] = even\n        merged_list[1::2] = odd\n        return count(merged_list)\n\n    def count(merged_list):\n        count = 0\n        for j in range(len(S) - 1):\n            if merged_list[j] == '0' and merged_list[j + 1] == '1':\n                count += 1\n        return count\n    even.sort()\n    odd.sort(reverse=True)\n    m1 = merge(even, odd, merged_list)\n    odd.reverse()\n    m2 = merge(even, odd, merged_list)\n    even.reverse()\n    m3 = merge(even, odd, merged_list)\n    odd.reverse()\n    m4 = merge(even, odd, merged_list)\n    print(max(m1, m2, m3, m4))", "def initializer(s, n):\n    ev = 0\n    od = 0\n    evones = 0\n    odones = 0\n    for idx in range(n):\n        if (idx + 1) % 2 == 0:\n            if s[idx] == '0':\n                ev += 1\n            else:\n                evones += 1\n        elif s[idx] == '0':\n            od += 1\n        else:\n            odones += 1\n    check = True\n    if n % 2 == 0:\n        for i in range(0, n - 1, 2):\n            if s[i] != '0' or s[i + 1] != '1':\n                check = False\n                break\n        if check:\n            return n // 2\n    ans = min(odones + evones, od + ev)\n    if odones + evones == od + ev:\n        return ans - 1\n    else:\n        return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    print(initializer(s, n))", "def find_number_of_characters_at_odd_and_even_positions(string, character):\n    odd_counts = even_counts = 0\n    for (index, element) in enumerate(string):\n        if (index + 1) % 2 == 0:\n            if character == element:\n                even_counts += 1\n        elif character == element:\n            odd_counts += 1\n    return (odd_counts, even_counts)\n\ndef find_number_of_pairs(string):\n    (zero_odd, zero_even) = find_number_of_characters_at_odd_and_even_positions(string, '0')\n    (one_odd, one_even) = find_number_of_characters_at_odd_and_even_positions(string, '1')\n    pairs = 0\n    odd_even_pairs = min(zero_odd, one_even)\n    pairs += odd_even_pairs\n    zero_odd = zero_odd - odd_even_pairs\n    one_even = one_even - odd_even_pairs\n    if zero_odd > 0:\n        zero_odd = zero_odd - 1\n        even_odd_pair = min(zero_even, one_odd)\n        pairs += even_odd_pair\n    elif one_odd > 0:\n        one_odd -= 1\n        even_odd_pair = min(zero_even, one_odd)\n        pairs += even_odd_pair\n    return pairs\ntest_cases = int(input())\nfor case in range(test_cases):\n    length = input()\n    string = input()\n    no_of_pairs = find_number_of_pairs(string)\n    print(no_of_pairs)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    S = input()\n    a = S.count('1')\n    b = S.count('0')\n    x = ''\n    S1 = ''\n    for j in range(1, N + 1):\n        if j % 2 == 0:\n            x = '1'\n        else:\n            x = '0'\n        S1 += x\n    if S == S1:\n        print(S.count('01'))\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    S = input()\n    a = S.count('1')\n    b = S.count('0')\n    x = ''\n    S1 = ''\n    for j in range(1, N + 1):\n        if j % 2 == 0:\n            x = '1'\n        else:\n            x = '0'\n        S1 += x\n    if S == S1:\n        print(S.count('01'))\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "def merge(e, o, N):\n    string = ''\n    k = 0\n    l = 0\n    for i in range(N):\n        if i % 2 == 0:\n            string += e[k]\n            k += 1\n        else:\n            string += o[l]\n            l += 1\n    return string\n\ndef operation(S, N):\n    even_string = ''\n    odd_string = ''\n    for i in range(N):\n        if i % 2 == 0:\n            even_string = even_string + S[i]\n        else:\n            odd_string = odd_string + S[i]\n    e = sorted(even_string)\n    o = sorted(odd_string)\n    a = merge(e, o, N)\n    e = sorted(even_string)\n    o = sorted(odd_string, reverse=True)\n    b = merge(e, o, N)\n    e = sorted(even_string, reverse=True)\n    o = sorted(odd_string)\n    c = merge(e, o, N)\n    e = sorted(even_string, reverse=True)\n    d = merge(e, o, N)\n    o = sorted(odd_string, reverse=True)\n    return max(a.count('01'), b.count('01'), c.count('01'), d.count('01'))\nt = int(input())\nwhile t > 0:\n    N = int(input())\n    S = input()\n    n = operation(S, N)\n    print(n)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    p = [[0, 0], [0, 0]]\n    for (i, x) in enumerate(input()):\n        p[i & 1][int(x)] += 1\n    a = min(p[0][0], p[1][1])\n    b = min(max(0, n // 2 - a - int(n & 1 == 0)), min(p[1][0], p[0][1]))\n    print(a + b)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    p = [[0, 0], [0, 0]]\n    o = [0, 0]\n    e = [0, 0]\n    for i in range(n):\n        p[i & 1][int(s[i])] += 1\n    for i in range(0, n, 2):\n        e[int(s[i])] += 1\n    for i in range(1, n, 2):\n        o[int(s[i])] += 1\n    a = min(p[0][0], p[1][1])\n    b = min(max(0, n // 2 - a - int(n & 1 == 0)), min(p[1][0], p[0][1]))\n    print(a + b)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    o = [0, 0]\n    e = [0, 0]\n    for i in range(0, n, 2):\n        e[int(s[i])] += 1\n    for i in range(1, n, 2):\n        o[int(s[i])] += 1\n    a = min(e[0], o[1])\n    b = min(max(0, n // 2 - a - int(n & 1 == 0)), min(o[0], e[1]))\n    print(a + b)", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    a = s.count('1')\n    b = s.count('0')\n    string = '01' * (n // 2)\n    if s == string:\n        print(n // 2)\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "from sys import stdin\ninput = stdin.readline\nT = int(input())\nfor tx in range(T):\n    N = int(input())\n    par = 0\n    prof = {'0': [0, 0], '1': [0, 0]}\n    for c in input().strip():\n        prof[c][par] += 1\n        par = 1 - par\n    pat = min(prof['0'][0], prof['1'][1])\n    if prof['0'][0] == prof['1'][1] and prof['1'][0] > 0:\n        prof['1'][0] -= 1\n    pat += min(prof['0'][1], prof['1'][0])\n    print(pat)", "try:\n    for _ in range(int(input())):\n        N = int(input())\n        S = input()\n        (x2, x1) = (0, 0)\n        ans = True\n        if N % 2 == 0:\n            for i in range(0, N - 1, 2):\n                if S[i] != '0' or S[i + 1] != '1':\n                    ans = False\n                    break\n            if ans:\n                print(N // 2)\n                continue\n        for i in S:\n            if i == '0':\n                x1 += 1\n            else:\n                x2 += 1\n        if x1 == x2:\n            print(x1 - 1)\n            continue\n        print(min(x1, x2))\nexcept:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = s.count('0')\n    b = s.count('1')\n    if n % 2 != 0:\n        print(min(b, a))\n    else:\n        c = 0\n        for i in range(0, n - 1):\n            if s[i] == '0' and s[i + 1] == '1':\n                c = c + 1\n        m = min(b, a)\n        if m < n // 2:\n            print(max(c, m))\n        else:\n            print(max(m - 1, c))", "def mer_con(even, odd):\n    st = ''\n    for i in range(max(len(even), len(odd))):\n        if i < len(even):\n            st += str(even[i])\n        if i < len(odd):\n            st += str(odd[i])\n    return st.count('01')\nfor _ in range(int(input())):\n    n = int(input())\n    data = input()\n    even = [int(data[i]) for i in range(0, n, 2)]\n    odd = [int(data[i]) for i in range(1, n, 2)]\n    even.sort()\n    odd.sort()\n    merge_count = mer_con(even, odd)\n    even.sort(reverse=True)\n    odd.sort()\n    temp = mer_con(even, odd)\n    if merge_count < temp:\n        merge_count = temp\n    even.sort(reverse=True)\n    odd.sort(reverse=True)\n    temp = mer_con(even, odd)\n    if merge_count < temp:\n        merge_count = temp\n    even.sort()\n    odd.sort(reverse=True)\n    temp = mer_con(even, odd)\n    if merge_count < temp:\n        merge_count = temp\n    print(merge_count)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    S = input()\n    a = S.count('1')\n    b = S.count('0')\n    x = ''\n    S1 = ''\n    for j in range(1, N + 1):\n        if j % 2 == 0:\n            x = '1'\n        else:\n            x = '0'\n        S1 += x\n    if S == S1:\n        print(S.count('01'))\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    a = []\n    b = []\n    for i in range(n):\n        if i % 2 == 0:\n            a.append(s[i])\n        else:\n            b.append(s[i])\n    a0 = a.count('0')\n    b0 = b.count('0')\n    a1 = a.count('1')\n    b1 = b.count('1')\n    if a0 > b1:\n        print(b1 + min(b0, a1))\n    else:\n        print(a0 + min(b0, max(0, a1 - 1)))", "def count(l1, l2):\n    l = []\n    m = min(len(l1), len(l2))\n    for i in range(m):\n        l.append(l1[i])\n        l.append(l2[i])\n    if len(l1) != len(l2):\n        if m == len(l1):\n            l += l2[m:]\n        else:\n            l += l1[m:]\n    s = ''.join(l)\n    c = s.count('01')\n    return c\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(input())\n    e = [s[i] for i in range(n) if i % 2 == 0]\n    o = [s[i] for i in range(n) if i % 2 != 0]\n    c1 = count(sorted(e), sorted(o))\n    c2 = count(sorted(e, reverse=True), sorted(o))\n    c3 = count(sorted(e), sorted(o, reverse=True))\n    c4 = count(sorted(e, reverse=True), sorted(o, reverse=True))\n    print(max([c1, c2, c3, c4]))", "def merge(a, b):\n    c = []\n    i = 0\n    j = 0\n    while i < len(a) or j < len(b):\n        if i < len(a):\n            c.append(a[i])\n        if j < len(b):\n            c.append(b[j])\n        i += 1\n        j += 1\n    ans = 0\n    for i in range(0, len(c) - 1):\n        if c[i] == 0 and c[i + 1] == 1:\n            ans += 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ev = []\n    od = []\n    ans = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            ev.append(int(s[i]))\n        else:\n            od.append(int(s[i]))\n    ev.sort()\n    od.sort()\n    evr = ev[::-1]\n    odr = od[::-1]\n    s1 = merge(ev, od)\n    s2 = merge(ev, odr)\n    s3 = merge(evr, odr)\n    s4 = merge(evr, od)\n    ans = max(s1, s2, s3, s4)\n    print(ans)", "def merge(a, b):\n    c = []\n    i = 0\n    j = 0\n    while i < len(a) or j < len(b):\n        if i < len(a):\n            c.append(a[i])\n        if j < len(b):\n            c.append(b[j])\n        i += 1\n        j += 1\n    ans = 0\n    for i in range(0, len(c) - 1):\n        if c[i] == 0 and c[i + 1] == 1:\n            ans += 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    ev = []\n    od = []\n    ans = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            ev.append(int(s[i]))\n        else:\n            od.append(int(s[i]))\n    ev.sort()\n    od.sort()\n    evr = ev[::-1]\n    odr = od[::-1]\n    s1 = merge(ev, od)\n    s2 = merge(ev, odr)\n    s3 = merge(evr, odr)\n    s4 = merge(evr, od)\n    ans = max(s1, s2, s3, s4)\n    print(ans)", "t = int(input())\n\ndef merge(odd, even):\n    ol = len(odd)\n    el = len(even)\n    l = []\n    for i in range(max(ol, el)):\n        if i < el:\n            l.append(even[i])\n        if i < ol:\n            l.append(odd[i])\n    return ''.join(l)\nwhile t:\n    n = int(input())\n    s = input()\n    odd = []\n    even = []\n    for i in range(n):\n        if i % 2:\n            odd.append(s[i])\n        else:\n            even.append(s[i])\n    odd.sort()\n    even.sort()\n    l = merge(odd, even)\n    c1 = l.count('01')\n    l = merge(odd[::-1], even)\n    c2 = l.count('01')\n    l = merge(odd, even[::-1])\n    c3 = l.count('01')\n    l = merge(odd[::-1], even[::-1])\n    c4 = l.count('01')\n    print(max(c1, c2, c3, c4))\n    t -= 1", "def merge(even, odd):\n    ans = ''\n    lenE = len(even)\n    lenO = len(odd)\n    for i in range(lenE):\n        ans += even[i]\n        if i < lenO:\n            ans += odd[i]\n    return ans\n\ndef count(s):\n    ans = 0\n    index = 0\n    n = len(s)\n    while index + 1 < n:\n        if s[index] == '0' and s[index + 1] == '1':\n            index += 2\n            ans += 1\n        else:\n            index += 1\n    return ans\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    s = input()\n    odd = []\n    even = []\n    for i in range(n):\n        if i % 2:\n            odd.append(s[i])\n        else:\n            even.append(s[i])\n    even.sort()\n    odd.sort(reverse=True)\n    m1 = merge(even, odd)\n    odd.reverse()\n    m2 = merge(even, odd)\n    even.reverse()\n    m3 = merge(even, odd)\n    odd.reverse()\n    m4 = merge(even, odd)\n    print(max(count(m1), count(m2), count(m3), count(m4)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input().strip()\n    check = True\n    t0 = 0\n    t1 = 0\n    if n % 2 == 0:\n        for i in range(0, n - 1, 2):\n            if s[i] != '0' or s[i + 1] != '1':\n                check = False\n                break\n        if check:\n            print(n // 2)\n            continue\n    for i in s:\n        if i == '0':\n            t0 += 1\n        else:\n            t1 += 1\n    if t0 == t1:\n        print(t1 - 1)\n        continue\n    print(min(t0, t1))", "def merge(odd, even):\n    l = len(odd)\n    z = ''\n    for j in range(l):\n        z = z + odd[j]\n        if j < len(even):\n            z = z + even[j]\n    return z\n\ndef count(m):\n    return m.count('01')\nfor _ in range(int(input())):\n    n = int(input())\n    str = input()\n    odd = []\n    even = []\n    for i in range(n):\n        if i % 2:\n            even.append(str[i])\n        else:\n            odd.append(str[i])\n    odd.sort()\n    even.sort(reverse=True)\n    m1 = merge(odd, even)\n    odd.reverse()\n    even.reverse()\n    m2 = merge(odd, even)\n    print(max(count(m1), count(m2)))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    s = input().strip()\n    s = list(map(int, list(s)))\n    (n0, n1) = (len(s) - sum(s), sum(s))\n    c = 0\n    for i in range(0, len(s) - 1, 2):\n        if s[i:i + 2] == [0, 1]:\n            c += 1\n    if n0 == n1:\n        print(max(c, n0 - 1))\n    elif n0 < n1:\n        print(n0)\n    else:\n        print(n1)", "try:\n    for _ in range(int(input())):\n        N = int(input())\n        S = input()\n        (x2, x1) = (0, 0)\n        ans = True\n        if N % 2 == 0:\n            for i in range(0, N - 1, 2):\n                if S[i] != '0' or S[i + 1] != '1':\n                    ans = False\n                    break\n            if ans:\n                print(N // 2)\n                continue\n        for i in S:\n            if i == '0':\n                x1 += 1\n            else:\n                x2 += 1\n        if x1 == x2:\n            print(x1 - 1)\n            continue\n        print(min(x1, x2))\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        N = int(input())\n        S = input()\n        (x2, x1) = (0, 0)\n        ans = True\n        if N % 2 == 0:\n            for i in range(0, N - 1, 2):\n                if S[i] != '0' or S[i + 1] != '1':\n                    ans = False\n                    break\n            if ans:\n                print(N // 2)\n                continue\n        for i in S:\n            if i == '0':\n                x1 += 1\n            else:\n                x2 += 1\n        if x1 == x2:\n            print(x1 - 1)\n            continue\n        print(min(x1, x2))\nexcept:\n    pass", "def joinf(x, x1):\n    r = len(x) + len(x1)\n    w = 0\n    w1 = 0\n    q = ''\n    for i in range(r):\n        if i % 2 == 0:\n            q += x[w]\n            w += 1\n        else:\n            q += x1[w1]\n            w1 += 1\n    return q.count('01')\nfor j in range(int(input())):\n    n = int(input())\n    l = input()\n    e = ''\n    o = ''\n    for i in range(n):\n        if i % 2 == 0:\n            e += l[i]\n        else:\n            o += l[i]\n    e = sorted(e)\n    o = sorted(o)\n    test1 = joinf(e, o)\n    test2 = joinf(e, o[::-1])\n    test3 = joinf(e[::-1], o)\n    test4 = joinf(e[::-1], o[::-1])\n    print(max(test1, test2, test3, test4))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    s = input()\n    x = s.count('0')\n    y = s.count('1')\n    a = ''\n    z = ''\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            a = '1'\n        else:\n            a = '0'\n        z += a\n    if s == z:\n        print(s.count('01'))\n    elif x < y:\n        print(x)\n    elif x > y:\n        print(y)\n    else:\n        print(x - 1)", "def count(s):\n    cou = 0\n    for i in range(len(s) - 1):\n        if s[i] == '0' and s[i + 1] == '1':\n            cou += 1\n    return cou\n\ndef merge(odd, even):\n    s = ''\n    en = len(even)\n    on = len(odd)\n    for i in range(en):\n        s += even[i]\n        if i < on:\n            s += odd[i]\n    return s\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    odd = []\n    even = []\n    for i in range(n):\n        if i % 2 == 0:\n            even.append(s[i])\n        else:\n            odd.append(s[i])\n    even.sort()\n    odd.sort(reverse=True)\n    s1 = merge(odd, even)\n    odd.reverse()\n    s2 = merge(odd, even)\n    even.reverse()\n    s3 = merge(odd, even)\n    odd.reverse()\n    s4 = merge(odd, even)\n    print(max(count(s1), count(s2), count(s3), count(s4)))", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        (t1, t2) = (0, 0)\n        check = True\n        if n % 2 == 0:\n            for i in range(0, n - 1, 2):\n                if s[i] != '0' or s[i + 1] != '1':\n                    check = False\n                    break\n            if check:\n                print(n // 2)\n                continue\n        for i in s:\n            if i == '0':\n                t2 += 1\n            else:\n                t1 += 1\n        if t1 == t2:\n            print(t1 - 1)\n            continue\n        print(min(t1, t2))\nexcept:\n    pass", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    S = input()\n    a = S.count('1')\n    b = S.count('0')\n    x = ''\n    S1 = ''\n    for j in range(1, N + 1):\n        if j % 2 == 0:\n            x = '1'\n        else:\n            x = '0'\n        S1 += x\n    if S == S1:\n        print(S.count('01'))\n    elif a < b:\n        print(a)\n    elif b < a:\n        print(b)\n    else:\n        print(a - 1)", "try:\n    for _ in range(int(input())):\n        N = int(input())\n        S = input()\n        (x2, x1) = (0, 0)\n        ans = True\n        if N % 2 == 0:\n            for i in range(0, N - 1, 2):\n                if S[i] != '0' or S[i + 1] != '1':\n                    ans = False\n                    break\n            if ans:\n                print(N // 2)\n                continue\n        for i in S:\n            if i == '0':\n                x1 += 1\n            else:\n                x2 += 1\n        if x1 == x2:\n            print(x1 - 1)\n            continue\n        print(min(x1, x2))\nexcept:\n    pass", "import math\nimport bisect\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef exponentiation(bas, exp, mod=1000000007):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef solve(even, odd, n):\n    count = 0\n    while even and odd and (even[0] == '0') and (odd[0] == '1'):\n        count += 1\n        even.pop(0)\n        odd.pop(0)\n    if even and odd and (even[-1] == '1') and (odd[-1] == '0'):\n        while even and odd and (even[-1] == '1') and (odd[-1] == '0'):\n            count += 1\n            even.pop()\n            odd.pop()\n        return count - (1 if not even else 0)\n    else:\n        return count\n\ndef process(arr, n):\n    (odd, even) = ([], [])\n    for i in range(0, n, 2):\n        even.append(arr[i])\n    for i in range(1, n, 2):\n        odd.append(arr[i])\n    even.sort()\n    odd.sort(reverse=True)\n    return solve(even, odd, n)\n\ndef main():\n    for _ in range(int(input())):\n        N = intin()\n        arr = list(input())\n        print(process(arr, N))\nmain()", "try:\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        string = input()\n        (t1, t0) = (0, 0)\n        check = True\n        if n % 2 == 0:\n            for i in range(0, n - 1, 2):\n                if string[i] != '0' or string[i + 1] != '1':\n                    check = False\n                    break\n            if check:\n                print(n // 2)\n                continue\n        for i in string:\n            if i == '0':\n                t0 += 1\n            else:\n                t1 += 1\n        if t1 == t0:\n            a = t1 - 1\n            print(a)\n            continue\n        print(min(t1, t0))\nexcept:\n    pass", "for t in range(int(input())):\n    N = int(input())\n    S = input()\n    ungerade = [S[i] for i in range(N) if i % 2 == 0]\n    gerade = [x for (i, x) in enumerate(S) if i % 2 == 1]\n    anz_0_ungerade = ungerade.count('0')\n    anz_1_ungerade = ungerade.count('1')\n    anz_0_gerade = gerade.count('0')\n    anz_1_gerade = gerade.count('1')\n    nullen = S.count('0')\n    einsen = S.count('1')\n    if nullen == einsen:\n        if anz_0_gerade == 0:\n            solution = N / 2\n        else:\n            solution = N / 2 - 1\n    else:\n        solution = min(nullen, einsen)\n    print(int(solution))", "for _ in range(int(input())):\n    size = int(input())\n    inputList = input()\n    odd_parity = []\n    even_parity = []\n    for i in range(0, size):\n        if i % 2 == 0:\n            even_parity.append(inputList[i])\n        else:\n            odd_parity.append(inputList[i])\n    even_parity.sort()\n    odd_parity.sort()\n    poss1 = ''\n    poss2 = ''\n    poss3 = ''\n    (j, k) = (0, 0)\n    for i in range(0, size):\n        if i % 2 == 0:\n            poss1 += even_parity[j]\n            poss2 += even_parity[j]\n            poss3 += even_parity[len(even_parity) - 1 - j]\n            j += 1\n        else:\n            poss1 += odd_parity[k]\n            poss2 += odd_parity[len(odd_parity) - 1 - k]\n            poss3 += odd_parity[k]\n            k += 1\n    ans = max(poss1.count('01'), poss2.count('01'), poss3.count('01'))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    odd = []\n    even = []\n    for i in range(0, len(s), 2):\n        even.append(s[i])\n        if i + 1 < len(s):\n            odd.append(s[i + 1])\n    even.sort()\n    odd.sort(reverse=True)\n    c1 = ''\n    (j, k) = (0, 0)\n    for i in range(len(s)):\n        if i % 2 == 0:\n            c1 += even[j]\n            j += 1\n        else:\n            c1 += odd[k]\n            k += 1\n    s1 = c1.count('01')\n    odd.sort()\n    even.sort(reverse=True)\n    c1 = ''\n    (j, k) = (0, 0)\n    for i in range(len(s)):\n        if i % 2 == 0:\n            c1 += even[j]\n            j += 1\n        else:\n            c1 += odd[k]\n            k += 1\n    s2 = c1.count('01')\n    print(max(s1, s2))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    m = s.count('01')\n    arr = list(s.split())\n    check = True\n    t0 = 0\n    t1 = 0\n    if n % 2 == 0:\n        for i in range(0, n - 1, 2):\n            if s[i] != '0' or s[i + 1] != '1':\n                check = False\n                break\n        if check:\n            print(n // 2)\n            continue\n    for i in s:\n        if i == '0':\n            t0 += 1\n        else:\n            t1 += 1\n    if t0 == t1:\n        print(t1 - 1)\n        continue\n    print(min(t0, t1))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    e_array = []\n    o_array = []\n    for i in range(n):\n        if i % 2 == 1:\n            o_array.append(s[i])\n        else:\n            e_array.append(s[i])\n    e_array = sorted(e_array)\n    o_array = sorted(o_array, reverse=True)\n    s1 = ''\n    s2 = ''\n    l1 = len(e_array)\n    l2 = len(o_array)\n    N = min(l1, l2)\n    for i in range(N):\n        s1 += e_array[i] + o_array[i]\n        s2 += e_array[l1 - i - 1] + o_array[l2 - i - 1]\n    if l1 > l2:\n        s1 += e_array[-1]\n        s2 += e_array[0]\n    c1 = s1.count('01')\n    c2 = s2.count('01')\n    print(max(c1, c2))", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        st = input()\n        (t1, t0) = (0, 0)\n        check = True\n        if n % 2 == 0:\n            for i in range(0, n - 1, 2):\n                if st[i] != '0' or st[i + 1] != '1':\n                    check = False\n                    break\n            if check:\n                print(n // 2)\n                continue\n        for i in st:\n            if i == '0':\n                t0 += 1\n            else:\n                t1 += 1\n        if t1 == t0:\n            print(t1 - 1)\n            continue\n        print(min(t1, t0))\nexcept:\n    pass", "n = int(input())\nfor _ in range(n):\n    N = int(input())\n    S = input()\n    even = []\n    odd = []\n    for i in range(N):\n        if i % 2:\n            odd.append(S[i])\n        else:\n            even.append(S[i])\n    if N % 2:\n        st1 = ''\n        odd1 = sorted(odd, reverse=True)\n        even1 = sorted(even)\n        for i in range(N // 2):\n            st1 += even1[i]\n            st1 += odd1[i]\n        st1 += even1[-1]\n        q1 = st1.count('01')\n        st2 = ''\n        odd2 = sorted(odd)\n        even2 = sorted(even, reverse=True)\n        for i in range(N // 2):\n            st2 += even2[i]\n            st2 += odd2[i]\n        st2 += even2[-1]\n        q2 = st2.count('01')\n        ans = max(q1, q2)\n        print(ans)\n    else:\n        st1 = ''\n        odd1 = sorted(odd, reverse=True)\n        even1 = sorted(even)\n        for i in range(N // 2):\n            st1 += even1[i]\n            st1 += odd1[i]\n        q1 = st1.count('01')\n        st2 = ''\n        odd2 = sorted(odd)\n        even2 = sorted(even, reverse=True)\n        for i in range(N // 2):\n            st2 += even2[i]\n            st2 += odd2[i]\n        q2 = st2.count('01')\n        ans = max(q1, q2)\n        print(ans)", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        st = input()\n        (t1, t0) = (0, 0)\n        n = len(st)\n        flag1 = True\n        if n % 2 == 0:\n            for i in range(0, n - 1, 2):\n                if st[i] != '0' or st[i + 1] != '1':\n                    flag1 = False\n            if flag1:\n                print(n // 2)\n                continue\n        for i in range(n):\n            if st[i] == '1':\n                t1 += 1\n            if st[i] == '0':\n                t0 += 1\n        if t1 == t0:\n            print(t1 - 1)\n            continue\n        print(min(t1, t0))\nexcept:\n    pass", "n = int(input())\nfor _ in range(n):\n    N = int(input())\n    S = input()\n    even = []\n    odd = []\n    for i in range(N):\n        if i % 2:\n            odd.append(S[i])\n        else:\n            even.append(S[i])\n    if N % 2:\n        st1 = ''\n        odd1 = sorted(odd, reverse=True)\n        even1 = sorted(even)\n        for i in range(N // 2):\n            st1 += even1[i]\n            st1 += odd1[i]\n        st1 += even1[-1]\n        q1 = st1.count('01')\n        st2 = ''\n        odd2 = sorted(odd)\n        even2 = sorted(even, reverse=True)\n        for i in range(N // 2):\n            st2 += even2[i]\n            st2 += odd2[i]\n        st2 += even2[-1]\n        q2 = st2.count('01')\n        ans = max(q1, q2)\n        print(ans)\n    else:\n        st1 = ''\n        odd1 = sorted(odd, reverse=True)\n        even1 = sorted(even)\n        for i in range(N // 2):\n            st1 += even1[i]\n            st1 += odd1[i]\n        q1 = st1.count('01')\n        st2 = ''\n        odd2 = sorted(odd)\n        even2 = sorted(even, reverse=True)\n        for i in range(N // 2):\n            st2 += even2[i]\n            st2 += odd2[i]\n        q2 = st2.count('01')\n        ans = max(q1, q2)\n        print(ans)", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        st = input()\n        (t1, t0) = (0, 0)\n        for i in range(n):\n            if st[i] == '1':\n                t1 += 1\n            if st[i] == '0':\n                t0 += 1\n        n = len(st)\n        if n % 2 == 1:\n            n -= 1\n        flag1 = True\n        for i in range(0, n - 1, 2):\n            if st[i] != '0' or st[i + 1] != '1':\n                flag1 = False\n        if flag1:\n            print(n // 2)\n            continue\n        if t1 == t0:\n            print(t1 - 1)\n            continue\n        print(min(t1, t0))\nexcept:\n    pass", "def count01(arr):\n    c = 0\n    prev = arr[0]\n    for idx in range(1, len(arr)):\n        if prev is None:\n            prev = arr[idx]\n        if prev == 0:\n            if arr[idx] == 1:\n                c += 1\n                prev = None\n            else:\n                prev = arr[idx]\n        if prev == 1:\n            prev = arr[idx]\n    return c\n\ndef maxOcc(n, s):\n    even_list = []\n    odd_list = []\n    even_entry = True\n    for (idx, char) in enumerate(s):\n        if even_entry is True:\n            even_list.append(char)\n            even_entry = False\n        else:\n            odd_list.append(char)\n            even_entry = True\n    c1 = 0\n    even_list = sorted(even_list, reverse=True)\n    odd_list = sorted(odd_list)\n    joined_list = []\n    for idx in range(n // 2 + 1):\n        if idx < len(even_list):\n            joined_list.append(even_list[idx])\n        if idx < len(odd_list):\n            joined_list.append(odd_list[idx])\n    c1 = count01(joined_list)\n    joined_list_2 = []\n    even_list.reverse()\n    odd_list.reverse()\n    for idx in range(n // 2 + 1):\n        if idx < len(even_list):\n            joined_list_2.append(even_list[idx])\n        if idx < len(odd_list):\n            joined_list_2.append(odd_list[idx])\n    c2 = count01(joined_list_2)\n    return max(c1, c2)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input()))\n    print(maxOcc(n, s))", "def getlist():\n    return list(map(int, input().split()))\n\ndef getinp():\n    return map(int, input().split())\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        even1 = 0\n        odd1 = 0\n        even0 = 0\n        odd0 = 0\n        e1 = 0\n        o1 = 0\n        e0 = 0\n        o0 = 0\n        for i in range(n):\n            if i & 1:\n                if s[i] == '0':\n                    odd0 += 1\n                if s[i] == '1':\n                    odd1 += 1\n            else:\n                if s[i] == '1':\n                    even1 += 1\n                if s[i] == '0':\n                    even0 += 1\n        e1 = even1\n        o1 = odd1\n        e0 = even0\n        o0 = odd0\n        s1 = ['0' for i in range(n)]\n        s2 = ['0' for i in range(n)]\n        i = 0\n        j = 1\n        while 1:\n            if e0 > 0:\n                s1[i] = '0'\n                i += 2\n                e0 -= 1\n            elif e1 > 0:\n                s1[i] = '1'\n                i += 2\n                e1 -= 1\n            if o1 > 0:\n                s1[j] = '1'\n                j += 2\n                o1 -= 1\n            elif o0 > 0:\n                s1[j] = '0'\n                j += 2\n                o0 -= 1\n            if e0 == 0 and e1 == 0 and (o0 == 0) and (o1 == 0):\n                break\n        e1 = even1\n        o1 = odd1\n        e0 = even0\n        o0 = odd0\n        i = 0\n        j = 1\n        while 1:\n            if e1 > 0:\n                s2[i] = '1'\n                i += 2\n                e1 -= 1\n            elif e0 > 0:\n                s2[i] = '0'\n                i += 2\n                e0 -= 1\n            if o0 > 0:\n                s2[j] = '0'\n                j += 2\n                o0 -= 1\n            elif o1 > 0:\n                s2[j] = '1'\n                j += 2\n                o1 -= 1\n            if e0 == 0 and e1 == 0 and (o0 == 0) and (o1 == 0):\n                break\n        s1 = ''.join(s1)\n        s2 = ''.join(s2)\n        count1 = s1.count('01')\n        count2 = s2.count('01')\n        print(max(count1, count2))\nmain()", "def getlist():\n    return list(map(int, input().split()))\n\ndef getinp():\n    return map(int, input().split())\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        even1 = 0\n        odd1 = 0\n        even0 = 0\n        odd0 = 0\n        e1 = 0\n        o1 = 0\n        e0 = 0\n        o0 = 0\n        for i in range(n):\n            if i & 1:\n                if s[i] == '0':\n                    odd0 += 1\n                if s[i] == '1':\n                    odd1 += 1\n            else:\n                if s[i] == '1':\n                    even1 += 1\n                if s[i] == '0':\n                    even0 += 1\n        e1 = even1\n        o1 = odd1\n        e0 = even0\n        o0 = odd0\n        s1 = ['0' for i in range(n)]\n        s2 = ['0' for i in range(n)]\n        i = 0\n        j = 1\n        while 1:\n            if e0 > 0:\n                s1[i] = '0'\n                i += 2\n                e0 -= 1\n            elif e1 > 0:\n                s1[i] = '1'\n                i += 2\n                e1 -= 1\n            if o1 > 0:\n                s1[j] = '1'\n                j += 2\n                o1 -= 1\n            elif o0 > 0:\n                s1[j] = '0'\n                j += 2\n                o0 -= 1\n            if e0 == 0 and e1 == 0 and (o0 == 0) and (o1 == 0):\n                break\n        e1 = even1\n        o1 = odd1\n        e0 = even0\n        o0 = odd0\n        i = 0\n        j = 1\n        while 1:\n            if e1 > 0:\n                s2[i] = '1'\n                i += 2\n                e1 -= 1\n            elif e0 > 0:\n                s2[i] = '0'\n                i += 2\n                e0 -= 1\n            if o0 > 0:\n                s2[j] = '0'\n                j += 2\n                o0 -= 1\n            elif o1 > 0:\n                s2[j] = '1'\n                j += 2\n                o1 -= 1\n            if e0 == 0 and e1 == 0 and (o0 == 0) and (o1 == 0):\n                break\n        s1 = ''.join(s1)\n        s2 = ''.join(s2)\n        count1 = s1.count('01')\n        count2 = s2.count('01')\n        print(max(count1, count2))\nmain()", "def getlist():\n    return list(map(int, input().split()))\n\ndef getinp():\n    return map(int, input().split())\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        s = input()\n        even1 = 0\n        odd1 = 0\n        even0 = 0\n        odd0 = 0\n        e1 = 0\n        o1 = 0\n        e0 = 0\n        o0 = 0\n        for i in range(n):\n            if i & 1:\n                if s[i] == '0':\n                    odd0 += 1\n                if s[i] == '1':\n                    odd1 += 1\n            else:\n                if s[i] == '1':\n                    even1 += 1\n                if s[i] == '0':\n                    even0 += 1\n        e1 = even1\n        o1 = odd1\n        e0 = even0\n        o0 = odd0\n        s1 = ['0' for i in range(n)]\n        s2 = ['0' for i in range(n)]\n        i = 0\n        j = 1\n        while 1:\n            if e0 > 0:\n                s1[i] = '0'\n                i += 2\n                e0 -= 1\n            elif e1 > 0:\n                s1[i] = '1'\n                i += 2\n                e1 -= 1\n            if o1 > 0:\n                s1[j] = '1'\n                j += 2\n                o1 -= 1\n            elif o0 > 0:\n                s1[j] = '0'\n                j += 2\n                o0 -= 1\n            if e0 == 0 and e1 == 0 and (o0 == 0) and (o1 == 0):\n                break\n        e1 = even1\n        o1 = odd1\n        e0 = even0\n        o0 = odd0\n        i = 0\n        j = 1\n        while 1:\n            if e1 > 0:\n                s2[i] = '1'\n                i += 2\n                e1 -= 1\n            elif e0 > 0:\n                s2[i] = '0'\n                i += 2\n                e0 -= 1\n            if o0 > 0:\n                s2[j] = '0'\n                j += 2\n                o0 -= 1\n            elif o1 > 0:\n                s2[j] = '1'\n                j += 2\n                o1 -= 1\n            if e0 == 0 and e1 == 0 and (o0 == 0) and (o1 == 0):\n                break\n        s1 = ''.join(s1)\n        s2 = ''.join(s2)\n        count1 = s1.count('01')\n        count2 = s2.count('01')\n        print(max(count1, count2))\nmain()", "tc = int(input())\nwhile tc:\n    length = int(input())\n    string = input()\n    even_index = [i for (j, i) in enumerate(string) if j % 2 == 0]\n    odd_index = [i for (j, i) in enumerate(string) if j % 2 != 0]\n    even_index.sort(reverse=True)\n    odd_index.sort()\n    new_string = ''\n    for i in range(min(len(even_index), len(odd_index))):\n        new_string += even_index[i]\n        new_string += odd_index[i]\n    if len(odd_index) > len(even_index):\n        new_string += odd_index[-1]\n    if len(odd_index) < len(even_index):\n        new_string += even_index[-1]\n    even_index.sort()\n    odd_index.sort(reverse=True)\n    new_string_2 = ''\n    for i in range(min(len(even_index), len(odd_index))):\n        new_string_2 += even_index[i]\n        new_string_2 += odd_index[i]\n    if len(odd_index) > len(even_index):\n        new_string_2 += odd_index[-1]\n    if len(odd_index) < len(even_index):\n        new_string_2 += even_index[-1]\n    pattern = '01'\n    max_01 = 0\n    max_02 = 0\n    j = 1\n    flag = 0\n    for i in range(0, len(new_string) - 1):\n        if pattern == new_string[i:i + 2]:\n            max_01 += 1\n    for i in range(0, len(new_string_2) - 1):\n        if pattern == new_string_2[i:i + 2]:\n            max_02 += 1\n    print(max(max_01, max_02))\n    tc -= 1", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    (o, e) = (Counter(s[1::2]), Counter(s[0::2]))\n    A = e['0']\n    B = o['0']\n    C = e['1']\n    D = o['1']\n    t = 0\n    while A and D:\n        t += 1\n        A -= 1\n        D -= 1\n    if not A:\n        C -= 1\n    if C == -1:\n        C += 1\n    while B and C:\n        t += 1\n        B -= 1\n        C -= 1\n    print(t)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = input()\n    l = [0] * n\n    (even, odd) = ([], [])\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            even.append(s[i - 1])\n        else:\n            odd.append(s[i - 1])\n    o1 = sorted(odd)\n    e1 = sorted(even, reverse=True)\n    (j, k) = (0, 0)\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l[i - 1] = e1[j]\n            j += 1\n        else:\n            l[i - 1] = o1[k]\n            k += 1\n    st1 = ''.join(l)\n    c1 = st1.count('01')\n    e2 = sorted(even)\n    o2 = sorted(odd, reverse=True)\n    (j, k) = (0, 0)\n    l1 = [0] * n\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            l1[i - 1] = e2[j]\n            j += 1\n        else:\n            l1[i - 1] = o2[k]\n            k += 1\n    st2 = ''.join(l1)\n    c2 = st2.count('01')\n    print(max(c1, c2))\n    t -= 1", "test = int(input())\nfor i in range(test):\n    n = int(input())\n    s = input()\n    lst = list(s)\n    count1 = lst.count('1')\n    count0 = lst.count('0')\n    eve1 = 0\n    eve0 = 0\n    odd1 = 0\n    odd0 = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n            if lst[i] == '1':\n                eve1 += 1\n            else:\n                eve0 += 1\n        elif lst[i] == '1':\n            odd1 += 1\n        else:\n            odd0 += 1\n    lst1 = []\n    lst2 = []\n    tempeve0 = eve0\n    tempeve1 = eve1\n    tempodd0 = odd0\n    tempodd1 = odd1\n    while eve0 > 0 or eve1 > 0:\n        if eve0 > 0:\n            lst1.append('0')\n            eve0 -= 1\n        else:\n            lst1.append('1')\n            eve1 -= 1\n    while odd0 > 0 or odd1 > 0:\n        if odd1 > 0:\n            lst2.append('1')\n            odd1 -= 1\n        else:\n            lst2.append('0')\n            odd0 -= 1\n    lst3 = []\n    cnt = 0\n    cnt2 = 0\n    for i in range(n):\n        if i % 2 == 0:\n            lst3.append(lst1[cnt])\n            cnt += 1\n        else:\n            lst3.append(lst2[cnt2])\n            cnt2 += 1\n    ans1 = 0\n    for i in range(len(lst3) - 1):\n        if lst3[i] == '0' and lst3[i + 1] == '1':\n            ans1 += 1\n    eve0 = tempeve0\n    eve1 = tempeve1\n    odd0 = tempodd0\n    odd1 = tempodd1\n    lst4 = []\n    lst5 = []\n    while eve0 > 0 or eve1 > 0:\n        if eve1 > 0:\n            lst4.append('1')\n            eve1 -= 1\n        else:\n            lst4.append('0')\n            eve0 -= 1\n    while odd0 > 0 or odd1 > 0:\n        if odd0 > 0:\n            lst5.append('0')\n            odd0 -= 1\n        else:\n            lst5.append('1')\n            odd1 -= 1\n    lst6 = []\n    cnt4 = 0\n    cnt5 = 0\n    for i in range(n):\n        if i % 2 == 0:\n            lst6.append(lst4[cnt4])\n            cnt4 += 1\n        else:\n            lst6.append(lst5[cnt5])\n            cnt5 += 1\n    ans2 = 0\n    for i in range(len(lst6) - 1):\n        if lst6[i] == '0' and lst6[i + 1] == '1':\n            ans2 += 1\n    print(max(ans1, ans2))", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    s = input()\n    x = list(s)\n    a = []\n    b = []\n    for i in range(0, len(x)):\n        if i % 2 == 0:\n            a.append(x[i])\n        else:\n            b.append(x[i])\n    a.sort()\n    b.sort()\n    c = []\n    for i in b:\n        c.append(i)\n    d = []\n    for i in a:\n        d.append(i)\n    c.reverse()\n    d.reverse()\n    for i in range(len(b)):\n        a.insert(2 * i + 1, c[i])\n    for i in range(len(d)):\n        b.insert(2 * i, d[i])\n    e = 0\n    f = 0\n    for i in range(1, len(a)):\n        if a[i - 1] == '0' and a[i] == '1':\n            e += 1\n    for i in range(1, len(b)):\n        if b[i - 1] == '0' and b[i] == '1':\n            f += 1\n    print(max(e, f))", "def gt(N, B):\n    cnt = 0\n    i = 0\n    while i < N:\n        if i + 1 < N and B[i] == '0' and (B[i + 1] == '1'):\n            cnt += 1\n            i += 2\n        else:\n            i += 1\n    return cnt\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    (Even, Odd) = ([], [])\n    for i in range(N):\n        if i % 2:\n            Even.append(S[i])\n        else:\n            Odd.append(S[i])\n    Odd.sort()\n    Even.sort(reverse=True)\n    B = ''\n    (i, j) = (0, 0)\n    while i < len(Odd) or j < len(Even):\n        if i < len(Odd):\n            B += Odd[i]\n            i += 1\n        if j < len(Even):\n            B += Even[j]\n            j += 1\n    Odd.sort(reverse=True)\n    Even.sort()\n    ans = gt(N, B)\n    P = ''\n    (i, j) = (0, 0)\n    while i < len(Odd) or j < len(Even):\n        if i < len(Odd):\n            P += Odd[i]\n            i += 1\n        if j < len(Even):\n            P += Even[j]\n            j += 1\n    ans = max(ans, gt(N, P))\n    print(ans)", "t = input()\nt = int(t)\nwhile t != 0:\n    t = t - 1\n    x = int(input())\n    s = input()\n    c1 = 0\n    c0 = 0\n    c1o = 0\n    c0o = 0\n    c1e = 0\n    c0e = 0\n    for i in range(0, len(s)):\n        if s[i] == '1' and i % 2 == 0:\n            c1 += 1\n            c1e += 1\n        elif s[i] == '0' and i % 2 == 1:\n            c0 += 1\n            c0e += 1\n        if s[i] == '1' and i % 2 == 1:\n            c1o += 1\n            c1e += 1\n        elif s[i] == '0' and i % 2 == 0:\n            c0o += 1\n            c0e += 1\n    res = 0\n    n = len(s)\n    x1 = True\n    x2 = True\n    i = 0\n    while i <= n - 2:\n        if s[i] == '0' and s[i + 1] == '1':\n            pass\n        else:\n            x1 = False\n        if s[i] == '1' and s[i + 1] == '0':\n            pass\n        else:\n            x2 == False\n        i += 2\n    if x1:\n        try:\n            if len(s) == 2 and s[0] == '1' and (s[1] == '0'):\n                print(0)\n                continue\n            else:\n                print(n // 2)\n                continue\n        except:\n            pass\n    elif x2:\n        try:\n            if s[n] == '1':\n                print(n // 2)\n                continue\n        except:\n            pass\n    if c1e == c0e:\n        res = c1e - 1\n    elif c1e < c0e:\n        res = c1e\n    elif c1e > c0e:\n        res = c0e\n    print(res)", "for i in range(int(input())):\n    odd1s = 0\n    even0s = 0\n    odd0s = 0\n    even1s = 0\n    ln = int(input())\n    rawlist = input()\n    flag = True\n    for i in range(ln):\n        if flag:\n            if int(rawlist[i]) == 0:\n                even0s += 1\n            else:\n                even1s += 1\n        elif int(rawlist[i]) == 1:\n            odd1s += 1\n        else:\n            odd0s += 1\n        flag = not flag\n    mainlst = []\n    m_even0s = even0s\n    m_even1s = even1s\n    m_odd0s = odd0s\n    m_odd1s = odd1s\n    for i in range(ln):\n        if not i & 1:\n            if even0s > 0:\n                mainlst.append(0)\n                even0s -= 1\n            else:\n                mainlst.append(1)\n        elif odd1s > 0:\n            mainlst.append(1)\n            odd1s -= 1\n        else:\n            mainlst.append(0)\n    count = 0\n    i = 0\n    flag = True\n    while i < len(mainlst) - 1:\n        if mainlst[i] == 0:\n            if mainlst[i + 1] == 1:\n                count += 1\n                i += 1\n        i += 1\n    mainlst2 = []\n    i = 0\n    for i in range(ln):\n        if not i & 1:\n            if m_even1s > 0:\n                mainlst2.append(1)\n                m_even1s -= 1\n            else:\n                mainlst2.append(0)\n        elif m_odd0s > 0:\n            mainlst2.append(0)\n            m_odd0s -= 1\n        else:\n            mainlst2.append(1)\n    count2 = 0\n    i = 0\n    while i < len(mainlst2) - 1:\n        if mainlst2[i] == 0:\n            if mainlst2[i + 1] == 1:\n                count2 += 1\n                i += 1\n        i += 1\n    print(max(count2, count))", "import math\nimport os\nimport random\nimport re\nimport sys\n\ndef gt(N, B):\n    cnt = 0\n    i = 0\n    while i < N:\n        if i + 1 < N and B[i] == '0' and (B[i + 1] == '1'):\n            cnt += 1\n            i += 2\n        else:\n            i += 1\n    return cnt\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    S = input()\n    (Ev, Od) = ([], [])\n    for i in range(N):\n        if i % 2:\n            Ev.append(S[i])\n        else:\n            Od.append(S[i])\n    Od.sort()\n    Ev.sort(reverse=True)\n    B = ''\n    (i, j) = (0, 0)\n    while i < len(Od) or j < len(Ev):\n        if i < len(Od):\n            B += Od[i]\n            i += 1\n        if j < len(Ev):\n            B += Ev[j]\n            j += 1\n    Od.sort(reverse=True)\n    Ev.sort()\n    ans = gt(N, B)\n    P = ''\n    (i, j) = (0, 0)\n    while i < len(Od) or j < len(Ev):\n        if i < len(Od):\n            P += Od[i]\n            i += 1\n        if j < len(Ev):\n            P += Ev[j]\n            j += 1\n    ans = max(ans, gt(N, P))\n    print(ans)", "def add(a, b):\n    x = ''\n    for i in range(len(a + b)):\n        if i % 2 == 0:\n            if len(a) != 0:\n                x += str(a.pop())\n        elif len(b) != 0:\n            x += str(b.pop())\n    return x\n\ndef sort_o(s, l):\n    even = []\n    for i in range(1, l, 2):\n        even += [int(s[i])]\n    odd = []\n    for i in range(0, l, 2):\n        odd += [int(s[i])]\n    odd.sort(reverse=True)\n    even.sort()\n    c1 = add(odd, even)\n    return c1\n\ndef sort_e(s, l):\n    even = []\n    for i in range(1, l, 2):\n        even += [int(s[i])]\n    odd = []\n    for i in range(0, l, 2):\n        odd += [int(s[i])]\n    odd.sort()\n    even.sort(reverse=True)\n    c1 = add(odd, even)\n    return c1\nfor i in range(int(input())):\n    l = int(input())\n    s = input()\n    a = sort_e(s, l)\n    b = sort_o(s, l)\n    print(max(a.count('01'), b.count('01')))", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\n\ndef check(s):\n    return s.count('01')\n\ndef alternate(a, b):\n    s = ''\n    p = q = 0\n    for i in range(n):\n        if i % 2 == 0:\n            s += a[p]\n            p += 1\n        else:\n            s += b[q]\n            q += 1\n    return s\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    even_index_count_0 = 0\n    even_index_count_1 = 0\n    odd_index_count_0 = 0\n    odd_index_count_1 = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] == '1':\n                even_index_count_1 += 1\n            else:\n                even_index_count_0 += 1\n        elif s[i] == '1':\n            odd_index_count_1 += 1\n        else:\n            odd_index_count_0 += 1\n    even_elements_1_start = '1' * even_index_count_1 + '0' * even_index_count_0\n    odd_element_1_start = '1' * odd_index_count_1 + '0' * odd_index_count_0\n    even_elements_0_start = '0' * even_index_count_0 + '1' * even_index_count_1\n    odd_element_0_start = '0' * odd_index_count_0 + '1' * odd_index_count_1\n    s1 = alternate(even_elements_1_start, odd_element_0_start)\n    s2 = alternate(even_elements_0_start, odd_element_1_start)\n    ans = max(check(s1), check(s2))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    even = []\n    odd = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            even.append(s[i])\n        else:\n            odd.append(s[i])\n    even.sort()\n    odd.sort(reverse=True)\n    new_str = ''\n    j = 0\n    k = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_str = new_str + even[j]\n            j = j + 1\n        else:\n            new_str = new_str + odd[k]\n            k = k + 1\n    count1 = new_str.count('01')\n    even.sort(reverse=True)\n    odd.sort()\n    new_str = ''\n    j = 0\n    k = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_str = new_str + even[j]\n            j += 1\n        else:\n            new_str = new_str + odd[k]\n            k += 1\n    count2 = new_str.count('01')\n    print(max(count1, count2))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    even = []\n    odd = []\n    for i in range(len(s)):\n        if i % 2 == 0:\n            even.append(s[i])\n        else:\n            odd.append(s[i])\n    even.sort()\n    odd.sort(reverse=True)\n    new_str = ''\n    j = 0\n    k = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_str = new_str + even[j]\n            j = j + 1\n        else:\n            new_str = new_str + odd[k]\n            k = k + 1\n    count1 = new_str.count('01')\n    even.sort(reverse=True)\n    odd.sort()\n    new_str = ''\n    j = 0\n    k = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            new_str = new_str + even[j]\n            j += 1\n        else:\n            new_str = new_str + odd[k]\n            k += 1\n    count2 = new_str.count('01')\n    print(max(count1, count2))", "for _ in range(int(input())):\n    N = int(input())\n    S = input()\n    (count0, count1) = (0, 0)\n    for i in range(N):\n        if S[i] == '0':\n            count0 += 1\n        elif S[i] == '1':\n            count1 += 1\n    (start, end, i, ex1, ex2) = (0, 0, 0, True, True)\n    if len(S) % 2 == 0:\n        end = len(S)\n    elif len(S) % 2 == 1:\n        end = len(S) - 1\n    while i < end:\n        if not (S[i] == '0' and S[i + 1] == '1'):\n            ex1 = False\n        if not (S[i] == '1' and S[i + 1] == '0'):\n            ex2 = False\n        i += 2\n    if ex1 and len(S) % 2 == 0:\n        print(len(S) // 2)\n        continue\n    elif ex1 and len(S) % 2 == 1:\n        print((len(S) - 1) // 2)\n        continue\n    elif ex2 and len(S) % 2 == 0:\n        print(len(S) // 2 - 1)\n        continue\n    elif ex2 and len(S) % 2 == 1:\n        print((len(S) - 1) // 2)\n        continue\n    if count0 == count1:\n        print(count1 - 1)\n    elif count0 < count1:\n        print(count0)\n    elif count0 > count1:\n        print(count1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    x = sorted([s[i] for i in range(0, len(s), 2)])\n    y = sorted([s[i] for i in range(1, len(s), 2)], reverse=True)\n    l = ''\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            l += x[a]\n            a += 1\n        else:\n            l += y[b]\n            b += 1\n    x.reverse()\n    y.reverse()\n    m = ''\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            m += x[a]\n            a += 1\n        else:\n            m += y[b]\n            b += 1\n    print(max(l.count('01'), m.count('01')))", "def countZeroOne(arr, n):\n    ans = 0\n    for i in range(n):\n        if arr[i] == 0 and arr[i + 1] == 1:\n            ans += 1\n    return ans\n\ndef mergeTwoList(arr1, arr2, n):\n    if n & 1:\n        arr = [x for y in zip(arr1, arr2) for x in y] + [arr1[-1]]\n        return arr\n    else:\n        arr = [x for y in zip(arr1, arr2) for x in y]\n        return arr\n\ndef sortSmallerToGreater(arr):\n    arr.sort()\n    return arr\n\ndef sortGreaterToSmaller(arr):\n    return sorted(arr, reverse=True)\n\ndef seprateIntoOddEven(arr, n):\n    oddList = []\n    evenList = []\n    for i in range(n):\n        if i + 1 & 1:\n            oddList += [arr[i]]\n        else:\n            evenList += [arr[i]]\n    return (oddList, evenList)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input()]\n    (oddList, evenList) = seprateIntoOddEven(arr, n)\n    case1OddList = sortSmallerToGreater(oddList)\n    case1EvenList = sortGreaterToSmaller(evenList)\n    ans1 = countZeroOne(mergeTwoList(case1OddList, case1EvenList, n), n - 1)\n    case2OddList = sortGreaterToSmaller(oddList)\n    case2EvenList = sortSmallerToGreater(evenList)\n    ans2 = countZeroOne(mergeTwoList(case2OddList, case2EvenList, n), n - 1)\n    ans = max(ans1, ans2)\n    print(ans)", "def solve():\n    n = int(input())\n    s = input()\n    c1 = 0\n    c2 = 0\n    c3 = 0\n    c4 = 0\n    c5 = 0\n    c6 = 0\n    for i in range(len(s)):\n        if s[i] == '1' and i % 2 == 0:\n            c1 += 1\n            c5 += 1\n        elif s[i] == '0' and i % 2 == 1:\n            c2 += 1\n            c6 += 1\n        if s[i] == '1' and i % 2 == 1:\n            c3 += 1\n            c5 += 1\n        elif s[i] == '0' and i % 2 == 0:\n            c4 += 1\n            c6 += 1\n    ans = 0\n    k = len(s)\n    if k % 2 == 1:\n        k -= 1\n    v1 = True\n    v2 = True\n    for i in range(0, k - 1):\n        if s[i] == '0' and s[i + 1] == '1':\n            continue\n        else:\n            v1 = False\n        if s[i] == '1' and s[i + 1] == '0':\n            continue\n        else:\n            v2 = False\n    if v1 == True:\n        print(k // 2)\n        return\n    elif v2 == True:\n        if s[k - 1] == '1':\n            print(k // 2)\n            return\n    if c5 == c6:\n        ans = c5 - 1\n    elif c5 < c6:\n        ans = c5\n    elif c5 > c6:\n        ans = c6\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    (odd_0, odd_1, even_0, even_1) = (0, 0, 0, 0)\n    for j in range(len(a)):\n        if j % 2 == 0:\n            if a[j] == '0':\n                even_0 += 1\n            else:\n                even_1 += 1\n        elif a[j] == '0':\n            odd_0 += 1\n        else:\n            odd_1 += 1\n    if (min([odd_1, even_0]) + min(odd_0, even_1)) * 2 == n and min(odd_0, even_1) != 0:\n        print(min([odd_1, even_0]) + min(odd_0, even_1) - 1)\n    else:\n        print(min([odd_1, even_0]) + min(odd_0, even_1))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    x = sorted([s[i] for i in range(0, len(s), 2)])\n    y = sorted([s[i] for i in range(1, len(s), 2)], reverse=True)\n    l = ''\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            l += x[a]\n            a += 1\n        else:\n            l += y[b]\n            b += 1\n    x = sorted([s[i] for i in range(0, len(s), 2)], reverse=True)\n    y = sorted([s[i] for i in range(1, len(s), 2)])\n    m = ''\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if i % 2 == 0:\n            m += x[a]\n            a += 1\n        else:\n            m += y[b]\n            b += 1\n    print(max(l.count('01'), m.count('01')))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    lsteven = []\n    lstodd = []\n    for i in range(0, len(s), 2):\n        lsteven.append(s[i])\n    for i in range(1, len(s), 2):\n        lstodd.append(s[i])\n    lsteven.sort()\n    lstodd.sort(reverse=True)\n    s1 = ''\n    (indxeven, indxodd) = (0, 0)\n    for i in range(n):\n        try:\n            if i % 2 == 0:\n                s1 += lsteven[indxeven]\n                indxeven += 1\n            else:\n                s1 += lstodd[indxodd]\n                indxodd += 1\n        except:\n            break\n    lsteven.sort(reverse=True)\n    lstodd.sort()\n    s2 = ''\n    (indxeven, indxodd) = (0, 0)\n    for i in range(n):\n        try:\n            if i % 2 == 0:\n                s2 += lsteven[indxeven]\n                indxeven += 1\n            else:\n                s2 += lstodd[indxodd]\n                indxodd += 1\n        except:\n            break\n    (a, b) = (0, 0)\n    for i in range(n - 1):\n        try:\n            if s1[i] == '0' and s1[i + 1] == '1':\n                a += 1\n            if s2[i] == '0' and s2[i + 1] == '1':\n                b += 1\n        except:\n            continue\n    print(max(a, b))", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    a1 = 0\n    b1 = 0\n    a2 = 0\n    b2 = 0\n    for i in range(n):\n        if i % 2 == 0:\n            if s[i] == '0':\n                a1 += 1\n            else:\n                b1 += 1\n        elif s[i] == '0':\n            a2 += 1\n        else:\n            b2 += 1\n    aa1 = a1 * '0' + b1 * '1'\n    aa2 = min(a1, b2) * '1' + a2 * '0' + (b2 - min(a1, b2)) * '1'\n    i1 = 0\n    i2 = 0\n    ans = ''\n    for i in range(n):\n        if i % 2 == 0:\n            ans += aa1[i1]\n            i1 += 1\n        else:\n            ans += aa2[i2]\n            i2 += 1\n    final_ans1 = ans.count('01')\n    print(final_ans1)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    odd1 = ''\n    even1 = ''\n    odd2 = ''\n    even2 = ''\n    for i in range(n):\n        if i % 2 == 0:\n            odd1 += s[i]\n            odd2 += s[i]\n        else:\n            even1 += s[i]\n            even2 += s[i]\n    odd1 = ''.join(sorted(odd1))\n    odd2 = ''.join(sorted(odd2, reverse=True))\n    even1 = ''.join(sorted(even1, reverse=True))\n    even2 = ''.join(sorted(even2))\n    str1 = ''\n    str2 = ''\n    temp = max(len(odd1), len(even1))\n    j = 0\n    for i in range(n):\n        if i % 2 == 0:\n            str1 += odd1[j]\n            str2 += odd2[j]\n        else:\n            str1 += even1[j]\n            str2 += even2[j]\n            j += 1\n    print(max(str1.count('01'), str2.count('01')))", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    eZero = 0\n    eOne = 0\n    oZero = 0\n    oOne = 0\n    for i in range(n):\n        if i % 2 and s[i] == '1':\n            oOne += 1\n        elif i % 2 and s[i] == '0':\n            oZero += 1\n        elif s[i] == '1':\n            eOne += 1\n        elif s[i] == '0':\n            eZero += 1\n    res = min(oOne, eZero)\n    if eZero - oOne or eOne - oZero:\n        res += min(eOne, oZero)\n    elif min(eOne, oZero):\n        res += min(eOne, oZero) - 1\n    print(res)", "test = int(input())\nwhile test:\n    n = int(input())\n    s = input()\n    i = c = 0\n    even_one = even_zero = odd_one = odd_zero = 0\n    while i < n:\n        if s[i] == '0':\n            if i % 2 == 0:\n                even_zero += 1\n            else:\n                odd_zero += 1\n        elif i % 2 == 0:\n            even_one += 1\n        else:\n            odd_one += 1\n        i += 1\n    stop = 0\n    if even_zero > odd_one:\n        stop = odd_one\n        even_zero -= odd_one\n        odd_one = 0\n    else:\n        stop = even_zero\n        odd_one -= even_zero\n        even_zero = 0\n    for i in range(stop):\n        c += 1\n    if even_zero:\n        even_zero -= 1\n    else:\n        even_one -= 1\n    if odd_zero > even_one:\n        stop = even_one\n        odd_zero -= even_one\n        even_one = 0\n    else:\n        stop = odd_zero\n        even_one -= odd_zero\n        odd_zero = 0\n    for i in range(stop):\n        c += 1\n    print(c)\n    test -= 1", "test = int(input())\nwhile test:\n    n = int(input())\n    s = input()\n    st = ''\n    i = c = 0\n    even_one = even_zero = odd_one = odd_zero = 0\n    while i < n:\n        if s[i] == '0':\n            if i % 2 == 0:\n                even_zero += 1\n            else:\n                odd_zero += 1\n        elif i % 2 == 0:\n            even_one += 1\n        else:\n            odd_one += 1\n        i += 1\n    stop = 0\n    if even_zero > odd_one:\n        stop = odd_one\n        even_zero -= odd_one\n        odd_one = 0\n    else:\n        stop = even_zero\n        odd_one -= even_zero\n        even_zero = 0\n    for i in range(stop):\n        st += '01'\n        c += 1\n    if even_zero:\n        st += '0'\n        even_zero -= 1\n    else:\n        st += '1'\n        even_one -= 1\n    if odd_zero > even_one:\n        stop = even_one\n        odd_zero -= even_one\n        even_one = 0\n    else:\n        stop = odd_zero\n        even_one -= odd_zero\n        odd_zero = 0\n    for i in range(stop):\n        s += '01'\n        c += 1\n    print(c)\n    test -= 1", "def m(a, b):\n    i = 0\n    j = 0\n    c = []\n    while i < len(a) and j < len(b):\n        c.append(a[i])\n        c.append(b[j])\n        i += 1\n        j += 1\n    while i < len(a):\n        c.append(a[i])\n        i += 1\n    while j < len(b):\n        c.append(b[j])\n        j += 1\n    return c\n\ndef fun(n, s):\n    a = []\n    b = []\n    for i in range(n):\n        if i % 2 == 0:\n            a.append(s[i])\n        else:\n            b.append(s[i])\n    a.sort(reverse=True)\n    b.sort()\n    c = m(a, b)\n    c1 = 0\n    for i in range(len(c) - 1):\n        if c[i] == '0' and c[i + 1] == '1':\n            c1 += 1\n    a.sort()\n    b.sort(reverse=True)\n    c = m(a, b)\n    c2 = 0\n    for i in range(len(c) - 1):\n        if c[i] == '0' and c[i + 1] == '1':\n            c2 += 1\n    print(max(c1, c2))\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = input()\n    fun(n, s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    even = []\n    odd = []\n    for i in input():\n        if count % 2:\n            odd.append(int(i))\n        else:\n            even.append(int(i))\n        count += 1\n\n    def calc(even, odd, n):\n        merge = []\n        (a, b) = (0, 0)\n        for i in range(n):\n            if i % 2:\n                merge.append(odd[a])\n                a += 1\n            else:\n                merge.append(even[b])\n                b += 1\n        count = 0\n        for i in range(n):\n            if merge[i] == 0 and i + 1 < n and (merge[i + 1] == 1):\n                count += 1\n        return count\n    print(max(calc(sorted(even), sorted(odd, reverse=True), n), calc(sorted(even, reverse=True), sorted(odd), n)))", "for test in range(int(input())):\n    n = int(input())\n    s = input()\n    odd = []\n    even = []\n    zero = []\n    c = 1\n    ans = 0\n    for i in range(n):\n        if i % 2 == 1:\n            odd.append(s[i])\n        else:\n            even.append(s[i])\n    eo = even.count('1')\n    ez = even.count('0')\n    oo = odd.count('1')\n    oz = odd.count('0')\n    mi = min(ez, oo)\n    ez -= mi\n    oo -= mi\n    if ez > 0:\n        ez -= c\n    else:\n        eo -= c\n    print(mi + max(ans, min(eo, oz)))", "for test in range(int(input())):\n    n = int(input())\n    s = input()\n    odd = []\n    even = []\n    zero = []\n    c = 0\n    ans = -1\n    for i in range(n):\n        if i % 2 == 1:\n            odd.append(s[i])\n        else:\n            even.append(s[i])\n    eo = even.count('1')\n    ez = even.count('0')\n    oo = odd.count('1')\n    oz = odd.count('0')\n    mi = min(ez, oo)\n    ez -= mi\n    oo -= mi\n    if ez > 0:\n        ez -= 1\n    else:\n        eo -= 1\n    print(mi + max(0, min(eo, oz)))", "for _ in range(int(input())):\n    N = int(input())\n    S = input()[:N]\n    (ct1, ct0, k) = (0, 0, 0)\n    s = ''\n    for i in range(N):\n        if S[i] == '1':\n            ct1 += 1\n        else:\n            ct0 += 1\n    if ct1 < ct0:\n        print(ct1)\n        continue\n    elif ct1 > ct0:\n        print(ct0)\n        continue\n    for i in range(1, N + 1):\n        if i % 2 == 1:\n            s += '0'\n        else:\n            s += '1'\n    for j in range(N):\n        if S[j] != s[j]:\n            k = 1\n            break\n    if k == 0:\n        print(ct0)\n    else:\n        print(ct0 - 1)", "import os, sys, math, cmath, time, collections\nfrom collections import deque, Counter, OrderedDict, defaultdict\nfrom heapq import nsmallest, nlargest, heapify, heappop, heappush, heapreplace\nfrom math import ceil, floor, log, log2, sqrt, gcd, factorial, pow, pi\nfrom bisect import bisect_left, bisect_right\n\ndef input_as_array():\n    return list(map(int, input().split()))\nstart_time = time.time()\np = 31\nm = 10 ** 9 + 9\n\ndef compute_hash(s):\n    n = len(s)\n    power_mod = [1]\n    for i in range(n):\n        power_mod.append(power_mod[-1] * p % m)\n    hash_values = [0] * (n + 1)\n    for i in range(n):\n        hash_values[i + 1] = (hash_values[i] + (ord(s[i]) - ord('a') + 1) * power_mod[i]) % m\n    return hash_values\n\ndef count_occurences(text, pattern):\n    text_length = len(text)\n    pattern_length = len(pattern)\n    power_mod = [1]\n    for i in range(text_length):\n        power_mod.append(power_mod[-1] * p % m)\n    hash_values = [0] * (text_length + 1)\n    for i in range(text_length):\n        hash_values[i + 1] = (hash_values[i] + (ord(text[i]) - ord('a') + 1) * power_mod[i]) % m\n    pattern_hash = 0\n    for i in range(pattern_length):\n        pattern_hash += (ord(pattern[i]) - ord('a') + 1) * power_mod[i] % m\n    occurences = []\n    i = 0\n    while i + pattern_length - 1 < text_length:\n        field_hash = (hash_values[i + pattern_length] - hash_values[i] + m) % m\n        if field_hash == pattern_hash * power_mod[i] % m:\n            occurences.append(i)\n        i += 1\n    return len(occurences)\n\ndef main():\n    n = int(input())\n    s = input()\n    even_map = defaultdict(int)\n    odd_map = defaultdict(int)\n    for (i, c) in enumerate(s):\n        if i % 2 == 0:\n            even_map[c] += 1\n        elif i % 2 != 0:\n            odd_map[c] += 1\n    ans = ''\n    switch = False\n    for i in range(n):\n        if i % 2 == 0:\n            if switch == False:\n                if even_map['0'] > 0:\n                    ans += '0'\n                    even_map['0'] -= 1\n                    switch = False\n                else:\n                    ans += '1'\n                    switch = True\n            elif even_map['1'] > 0:\n                ans += '1'\n                even_map['1'] -= 1\n            else:\n                ans += '0'\n        elif i % 2 != 0:\n            if switch == False:\n                if odd_map['1'] > 0:\n                    ans += '1'\n                    odd_map['1'] -= 1\n                    switch = False\n                else:\n                    ans += '0'\n                    switch = True\n            elif switch == True:\n                if odd_map['0'] > 0:\n                    ans += '0'\n                    odd_map['0'] -= 1\n                else:\n                    ans += '1'\n    op = count_occurences(ans, '01')\n    print(op)\nif os.path.exists('data.in'):\n    sys.stdin = open('data.in', 'r')\n    sys.stdout = open('data.out', 'w')\ntestcases = int(input())\nfor i in range(testcases):\n    main()\nif os.path.exists('data.in'):\n    print(f'Time Elapsed: {time.time() - start_time} seconds')\n    sys.stdout.close()", "for _ in range(int(input())):\n    m = int(input())\n    l = input()\n    a = 0\n    b = 0\n    for j in range(m):\n        if j % 2 == 0 and l[j] == '0':\n            a += 1\n        if j % 2 == 1 and l[j] == '1':\n            b += 1\n    if m % 2 == 1:\n        if a <= b:\n            print(a + m // 2 - b)\n        else:\n            print(b + m - m // 2 - a)\n    elif a < b or (a == b and a == m // 2):\n        print(a + m // 2 - b)\n    elif a == b:\n        print(a + m // 2 - b - 1)\n    else:\n        print(b + m // 2 - a)", "def odd(l, lc, c):\n    if l[0] > 0 and l[3] > 0:\n        l[0] -= 1\n        l[3] -= 1\n        c[0] += 1\n        lc[0] += 2\n        return True\n    else:\n        lc[0] += 1\n        return False\n\ndef even(l, lc, c):\n    if l[1] > 0 and l[2] > 0:\n        l[1] -= 1\n        l[2] -= 1\n        c[0] += 1\n        lc[0] += 2\n        return True\n    else:\n        lc[0] += 1\n        return False\nfor _ in range(int(input())):\n    n: int = int(input())\n    s = input()\n    l = [0, 0, 0, 0]\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            if s[i - 1] == '1':\n                l[3] += 1\n            else:\n                l[2] += 1\n        elif s[i - 1] == '1':\n            l[1] += 1\n        else:\n            l[0] += 1\n    t = 'o'\n    c = [0]\n    lc = [0]\n    while lc[0] < n - 1:\n        if t == 'o':\n            if not odd(l, lc, c):\n                t = 'e'\n        elif t == 'e':\n            if not even(l, lc, c):\n                t = 'o'\n    print(c[0])", "t = int(input())\nfor i in range(t):\n    l = input()\n    ele = input()\n    a = []\n    for i in range(0, len(ele), 2):\n        a += ele[i]\n    a.sort()\n    b = []\n    for i in range(1, len(ele), 2):\n        b += ele[i]\n    b.sort(reverse=True)\n    e = []\n    j = 0\n    k = 0\n    for i in range(len(ele)):\n        if i % 2 == 0:\n            e += a[k]\n            k += 1\n        else:\n            e += b[j]\n            j += 1\n    e = ' '.join(e)\n    a = []\n    for i in range(0, len(ele), 2):\n        a += ele[i]\n    a.sort(reverse=True)\n    b = []\n    for i in range(1, len(ele), 2):\n        b += ele[i]\n    b.sort()\n    j = 0\n    k = 0\n    g = []\n    for i in range(len(ele)):\n        if i % 2 == 0:\n            g += a[k]\n            k += 1\n        else:\n            g += b[j]\n            j += 1\n    g = ' '.join(g)\n    print(max(g.count('0 1'), e.count('0 1')))", "for _ in range(int(input())):\n    (n, s) = (int(input()), input())\n    (a, b, x) = (s.count('0'), s.count('1'), s[0])\n    if n % 2 == 0 and a == n // 2 and (b == n // 2):\n        ans = True\n        for i in range(1, n):\n            if s[i] != x:\n                x = s[i]\n            else:\n                ans = False\n                break\n        if s[0] == '0' and ans == True:\n            print(n // 2)\n        else:\n            print(n // 2 - 1)\n    else:\n        print(n - max(a, b))", "t = int(input())\nfor i in range(t):\n    l = input()\n    ele = input()\n    a = []\n    for i in range(0, len(ele), 2):\n        a += ele[i]\n    a.sort()\n    b = []\n    for i in range(1, len(ele), 2):\n        b += ele[i]\n    b.sort(reverse=True)\n    e = []\n    j = 0\n    k = 0\n    for i in range(len(ele)):\n        if i % 2 == 0:\n            e += a[k]\n            k += 1\n        else:\n            e += b[j]\n            j += 1\n    e = ' '.join(e)\n    a = []\n    for i in range(0, len(ele), 2):\n        a += ele[i]\n    a.sort(reverse=True)\n    b = []\n    for i in range(1, len(ele), 2):\n        b += ele[i]\n    b.sort()\n    j = 0\n    k = 0\n    g = []\n    for i in range(len(ele)):\n        if i % 2 == 0:\n            g += a[k]\n            k += 1\n        else:\n            g += b[j]\n            j += 1\n    g = ' '.join(g)\n    print(max(g.count('0 1'), e.count('0 1')))", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    s = str(input())\n    oddzero = 0\n    oddone = 0\n    evenzero = 0\n    evenone = 0\n    for b in range(n):\n        if b % 2 != 0:\n            if s[n - b - 1] == '0':\n                evenzero += 1\n            else:\n                evenone += 1\n        elif s[n - b - 1] == '0':\n            oddzero += 1\n        else:\n            oddone += 1\n    st = 0\n    if True:\n        st += min(oddzero, evenone)\n        st += min(oddone, evenzero)\n    if n % 2 == 0:\n        if evenone == 0 or oddzero == 0:\n            pass\n        elif st == n // 2:\n            st -= 1\n    print(st)"]