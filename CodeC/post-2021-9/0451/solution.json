["from collections import deque\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    visited1 = [False] * N\n    visited0 = [False] * N\n    S = input()\n    q0 = deque()\n    q1 = deque()\n    for i in range(N):\n        if S[i] == '1':\n            q1.append(i)\n            visited1[i] = True\n        else:\n            q0.append(i)\n            visited0[i] = True\n    nrstones = [1] * N\n    nrstzeroes = [1] * N\n    if len(q0) == 0 or len(q1) == 0:\n        print('0' * N)\n        continue\n    t = 0\n    while q0:\n        for i in range(len(q0)):\n            x = q0.popleft()\n            nrstzeroes[x] = t\n            if x > 0 and visited0[x - 1] == False:\n                q0.append(x - 1)\n                visited0[x - 1] = True\n            if x < N - 1 and visited0[x + 1] == False:\n                q0.append(x + 1)\n                visited0[x + 1] = True\n        t += 1\n    t = 0\n    while q1:\n        for i in range(len(q1)):\n            x = q1.popleft()\n            nrstones[x] = t\n            if x > 0 and visited1[x - 1] == False:\n                q1.append(x - 1)\n                visited1[x - 1] = True\n            if x < N - 1 and visited1[x + 1] == False:\n                q1.append(x + 1)\n                visited1[x + 1] = True\n        t += 1\n    s = ''\n    for i in range(N):\n        if S[i] == '1':\n            if nrstzeroes[i] % 2 != K % 2 and K > nrstzeroes[i]:\n                s += '1'\n            else:\n                s += '0'\n        elif nrstones[i] % 2 == K % 2 and K >= nrstones[i]:\n            s += '1'\n        else:\n            s += '0'\n    print(s)", "from collections import deque\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    visited1 = [False] * N\n    visited0 = [False] * N\n    S = input()\n    q0 = deque()\n    q1 = deque()\n    for i in range(N):\n        if S[i] == '1':\n            q1.append(i)\n            visited1[i] = True\n        else:\n            q0.append(i)\n            visited0[i] = True\n    nrstones = [1] * N\n    nrstzeroes = [1] * N\n    if len(q0) == 0 or len(q1) == 0:\n        print('0' * N)\n        continue\n    t = 0\n    while q0:\n        for i in range(len(q0)):\n            x = q0.popleft()\n            nrstzeroes[x] = t\n            if x > 0 and visited0[x - 1] == False:\n                q0.append(x - 1)\n                visited0[x - 1] = True\n            if x < N - 1 and visited0[x + 1] == False:\n                q0.append(x + 1)\n                visited0[x + 1] = True\n        t += 1\n    t = 0\n    while q1:\n        for i in range(len(q1)):\n            x = q1.popleft()\n            nrstones[x] = t\n            if x > 0 and visited1[x - 1] == False:\n                q1.append(x - 1)\n                visited1[x - 1] = True\n            if x < N - 1 and visited1[x + 1] == False:\n                q1.append(x + 1)\n                visited1[x + 1] = True\n        t += 1\n    s = ''\n    for i in range(N):\n        if S[i] == '1':\n            if nrstzeroes[i] % 2 != K % 2 and K > nrstzeroes[i]:\n                s += '1'\n            else:\n                s += '0'\n        elif nrstones[i] % 2 == K % 2 and K >= nrstones[i]:\n            s += '1'\n        else:\n            s += '0'\n    print(s)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = list(map(int, input()))\n    K -= 1\n    new_S = [0] * N\n    for i in range(len(S)):\n        if S[i] == 1:\n            new_S[i] = 0\n            if i > 0 and S[i - 1] == 0:\n                new_S[i - 1] = 1\n            if i < N - 1 and S[i + 1] == 0:\n                new_S[i + 1] = 1\n    S = new_S\n    if 1 not in S:\n        print('0' * N)\n        continue\n    ones = []\n    for i in range(len(S)):\n        if S[i] == 1:\n            ones.append(i)\n    result = ''\n    current_one = 0\n    for i in range(N):\n        diff = abs(ones[current_one] - i)\n        if current_one < len(ones) - 1:\n            next_diff = abs(ones[current_one + 1] - i)\n            if next_diff <= diff:\n                diff = next_diff\n                current_one += 1\n        if diff % 2 == K % 2 and diff <= K:\n            result += '1'\n        else:\n            result += '0'\n    print(result)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = list(map(int, input()))\n    K -= 1\n    new_S = [0] * N\n    for i in range(len(S)):\n        if S[i] == 1:\n            new_S[i] = 0\n            if i > 0 and S[i - 1] == 0:\n                new_S[i - 1] = 1\n            if i < N - 1 and S[i + 1] == 0:\n                new_S[i + 1] = 1\n    S = new_S\n    if 1 not in S:\n        print('0' * N)\n        continue\n    ones = []\n    for i in range(len(S)):\n        if S[i] == 1:\n            ones.append(i)\n    result = ''\n    current_one = 0\n    for i in range(N):\n        diff = abs(ones[current_one] - i)\n        if current_one < len(ones) - 1:\n            next_diff = abs(ones[current_one + 1] - i)\n            if next_diff <= diff:\n                diff = next_diff\n                current_one += 1\n        if diff % 2 == K % 2 and diff <= K:\n            result += '1'\n        else:\n            result += '0'\n    print(result)", "def do_first_step(array):\n    new_array = [0] * len(array)\n    for (k, v) in enumerate(array):\n        if v == 1:\n            if k - 1 >= 0 and array[k - 1] == 0:\n                new_array[k - 1] = 1\n            if k + 1 < len(array) and array[k + 1] == 0:\n                new_array[k + 1] = 1\n    return new_array\n\ndef do_age(array, age):\n    array = do_first_step(array)\n    age -= 1\n    if age == 0:\n        return array\n    new_array = [0] * len(array)\n    distances = [10 ** 8] * len(array)\n    cur_distance = 10 ** 8\n    for (k, el) in enumerate(array):\n        if el == 1:\n            cur_distance = 0\n        else:\n            cur_distance += 1\n        distances[k] = min(distances[k], cur_distance)\n    cur_distance = 10 ** 8\n    for (k, el) in reversed(list(enumerate(array))):\n        if el == 1:\n            cur_distance = 0\n        else:\n            cur_distance += 1\n        distances[k] = min(distances[k], cur_distance)\n    for (k, dist) in enumerate(distances):\n        if age < dist:\n            new_array[k] = 0\n        else:\n            new_array[k] = 1 if (age - dist) % 2 == 0 else 0\n    return new_array\nfor _ in range(int(input())):\n    (_, age) = map(int, input().split())\n    array = list(map(int, input()))\n    array = do_age(array, age)\n    print(''.join(map(str, array)))", "def do_first_step(array):\n    new_array = [0] * len(array)\n    for (k, v) in enumerate(array):\n        if v == 1:\n            if k - 1 >= 0 and array[k - 1] == 0:\n                new_array[k - 1] = 1\n            if k + 1 < len(array) and array[k + 1] == 0:\n                new_array[k + 1] = 1\n    return new_array\n\ndef do_age(array, age):\n    array = do_first_step(array)\n    age -= 1\n    if age == 0:\n        return array\n    new_array = [0] * len(array)\n    distances = [10 ** 8] * len(array)\n    cur_distance = 10 ** 8\n    for (k, el) in enumerate(array):\n        if el == 1:\n            cur_distance = 0\n        else:\n            cur_distance += 1\n        distances[k] = min(distances[k], cur_distance)\n    cur_distance = 10 ** 8\n    for (k, el) in reversed(list(enumerate(array))):\n        if el == 1:\n            cur_distance = 0\n        else:\n            cur_distance += 1\n        distances[k] = min(distances[k], cur_distance)\n    for (k, dist) in enumerate(distances):\n        if age < dist:\n            new_array[k] = 0\n        else:\n            new_array[k] = 1 if (age - dist) % 2 == 0 else 0\n    return new_array\nfor _ in range(int(input())):\n    (_, age) = map(int, input().split())\n    array = list(map(int, input()))\n    array = do_age(array, age)\n    print(''.join(map(str, array)))", "for _ in range(int(input())):\n    (N, K) = map(int, input().split(' '))\n    S = [int(i) for i in input()]\n    K -= 1\n    new_S = [0] * len(S)\n    for (i, s) in enumerate(S):\n        if s == 1:\n            new_S[i] = 0\n            if i > 0 and S[i - 1] == 0:\n                new_S[i - 1] = 1\n            if i < N - 1 and S[i + 1] == 0:\n                new_S[i + 1] = 1\n    S = new_S\n    if 1 not in S:\n        print('0' * N)\n        continue\n    ones = []\n    for (i, s) in enumerate(S):\n        if s == 1:\n            ones.append(i)\n    result = []\n    current_one = 0\n    result = ''\n    for i in range(N):\n        diff = abs(ones[current_one] - i)\n        if current_one < len(ones) - 1:\n            next_diff = abs(ones[current_one + 1] - i)\n            if next_diff <= diff:\n                current_one += 1\n                diff = next_diff\n        if diff % 2 == K % 2 and diff <= K:\n            result += '1'\n        else:\n            result += '0'\n    print(result)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = input()\n    dp = [10 ** 7 for i in range(n)]\n    if l[0] == '1':\n        dp[0] = 0\n    for i in range(1, n):\n        if l[i] == '0':\n            dp[i] = dp[i - 1] + 1\n        else:\n            dp[i] = 0\n    d = [10 ** 7 for i in range(n)]\n    if l[n - 1] == '1':\n        d[n - 1] = 0\n    else:\n        d[n - 1] = dp[n - 1]\n    for i in range(n - 2, -1, -1):\n        if l[i] == '0':\n            d[i] = min(dp[i], d[i + 1] + 1)\n        else:\n            d[i] = 0\n    dp1 = [10 ** 7 for i in range(n)]\n    if l[0] == '0':\n        dp1[0] = 0\n    for i in range(1, n):\n        if l[i] == '1':\n            dp1[i] = dp1[i - 1] + 1\n        else:\n            dp1[i] = 0\n    d1 = [10 ** 7 for i in range(n)]\n    if l[n - 1] == '0':\n        d1[n - 1] = 0\n    else:\n        d1[n - 1] = dp1[n - 1]\n    for i in range(n - 2, -1, -1):\n        if l[i] == '1':\n            d1[i] = min(dp1[i], d1[i + 1] + 1)\n        else:\n            d1[i] = 0\n    if k % 2 == 0:\n        for i in range(n):\n            if l[i] == '1':\n                if d1[i] > k:\n                    print(0, end='')\n                elif d1[i] % 2 == 0:\n                    print(1 - int(l[i]), end='')\n                elif d1[i] % 2 != 0:\n                    print(int(l[i]), end='')\n            if l[i] == '0':\n                if d[i] > k:\n                    print(0, end='')\n                elif d[i] % 2 == 0:\n                    print(1 - int(l[i]), end='')\n                elif d[i] % 2 != 0:\n                    print(int(l[i]), end='')\n    if k % 2 == 1:\n        for i in range(n):\n            if l[i] == '1':\n                if d1[i] > k:\n                    print(0, end='')\n                elif d1[i] % 2 == 0:\n                    print(int(l[i]), end='')\n                elif d1[i] % 2 != 0:\n                    print(1 - int(l[i]), end='')\n            if l[i] == '0':\n                if d[i] > k:\n                    print(0, end='')\n                elif d[i] % 2 == 0:\n                    print(int(l[i]), end='')\n                elif d[i] % 2 != 0:\n                    print(1 - int(l[i]), end='')\n    print(' ')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "import time\nimport sys\nimport math\n\ndef get_primes(n):\n    sieve = [True] * n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if sieve[i]:\n            sieve[i * i::2 * i] = [False] * ((n - i * i - 1) // (2 * i) + 1)\n    return [2] + [i for i in range(3, n, 2) if sieve[i]]\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom functools import reduce\n\ndef factors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\ninput = sys.stdin.readline\n(mod, infi) = (1000000007, sys.maxsize)\nfrom collections import deque, Counter, defaultdict as dd\nfrom heapq import heappop, heappush, heapify\nfrom itertools import accumulate\nfrom functools import lru_cache, reduce\nfrom operator import mul, add, sub, truediv, floordiv, lt, le, eq, ne, gt, xor, concat, getitem, pow, lshift\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nnormal = lambda : input().split()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nlogg = lambda a, b: math.log2(a) / math.log2(b)\nacc = lambda x: list(accumulate(x))\nsign = lambda x, y: x >= 0 and y >= 0 or (x < 0 and y < 0)\n\ndef flipper(s, n):\n    new = ['0'] * n\n    for i in range(n):\n        if s[i] == '1':\n            if i - 1 >= 0:\n                new[i - 1] = str(int(s[i - 1]) ^ 1)\n            if i + 1 < n:\n                new[i + 1] = str(int(s[i + 1]) ^ 1)\n    return new\nT = inty()\nfor _ in range(T):\n    (n, k) = mappy()\n    s = [i for i in stringy()]\n    s = flipper(s, n)\n    k -= 1\n    turn = [n + 1] * n\n    prev = -1\n    for i in range(n):\n        if s[i] == '1':\n            prev = i\n        if prev != -1:\n            turn[i] = i - prev\n    prev = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            prev = i\n        if prev != -1:\n            turn[i] = min(turn[i], prev - i)\n    res = ['0'] * n\n    for i in range(n):\n        if turn[i] != n + 1 and turn[i] <= k:\n            l = k - turn[i]\n            if l & 1:\n                res[i] = '0'\n            else:\n                res[i] = '1'\n    print(''.join(res))", "import collections\nimport heapq\nimport sys\nimport math\nimport itertools\nimport bisect\nfrom io import BytesIO, IOBase\nimport os\n\ndef values():\n    return tuple(map(int, sys.stdin.readline().split()))\n\ndef inlsts():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef instr():\n    return sys.stdin.readline().strip()\n\ndef words():\n    return [i for i in sys.stdin.readline().strip().split()]\n\ndef chars():\n    return [i for i in sys.stdin.readline().strip()]\n\ndef solve():\n    (n, k) = values()\n    s = instr()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n        if i - 1 > -1 and s[i - 1] == '0':\n            t[i - 1] = 1\n    prv = -1\n    des = [n + 1] * n\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            des[i] = i - prv\n    prv = -1\n    for i in range(n - 1, -1, -1):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            des[i] = min(prv - i, des[i])\n    r = ''\n    k -= 1\n    for i in range(n):\n        if des[i] > k or des[i] == n + 1:\n            r += '0'\n        elif (k - des[i]) % 2 == 0:\n            r += '1'\n        else:\n            r += '0'\n    print(r)\nfor i in range(inp()):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    r = input().rstrip()\n    ok = [i for i in r]\n    for i in range(n):\n        if ok[i] == '0' and (i != 0 and ok[i - 1] == '1' or (i != n - 1 and ok[i + 1] == '1')):\n            ok[i] = '2'\n    for i in range(n):\n        if ok[i] == '1':\n            ok[i] = '0'\n        if ok[i] == '2':\n            ok[i] = '1'\n    left = [-1 for i in range(n)]\n    right = [-1 for i in range(n)]\n    for i in range(n):\n        if ok[i] == '1':\n            left[i] = i\n        elif i:\n            left[i] = left[i - 1]\n    for i in range(n - 1, -1, -1):\n        if ok[i] == '1':\n            right[i] = i\n        elif i != n - 1:\n            right[i] = right[i + 1]\n    k -= 1\n    if k:\n        for i in range(n):\n            if ok[i] == '1':\n                if k % 2:\n                    ok[i] = '0'\n            else:\n                (d1, d2) = (-1, -1)\n                if left[i] != -1:\n                    d1 = abs(i - left[i])\n                if right[i] != -1:\n                    d2 = abs(i - right[i])\n                if d1 == -1 and d2 == -1:\n                    continue\n                elif d1 != -1 and d2 != -1:\n                    d1 = min(d1, d2)\n                elif d1 == -1:\n                    d1 = d2\n                else:\n                    pass\n                if d1 > k:\n                    pass\n                elif (d1 - k) % 2 == 0:\n                    ok[i] = '1'\n    res = ''.join(ok)\n    print(res)", "t = int(input())\nfor T in range(t):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    k -= 1\n    for i in range(n):\n        if s[i] == '1':\n            s[i] = '-1'\n            if i > 0 and s[i - 1] == '0':\n                s[i - 1] = '2'\n            if i < n - 1 and s[i + 1] == '0':\n                s[i + 1] = '2'\n    for i in range(n):\n        if s[i] == '-1':\n            s[i] = '0'\n        elif s[i] == '2':\n            s[i] = '1'\n    m = -1\n    left = [0 for i in range(n)]\n    right = [0 for i in range(n)]\n    index = [0 for i in range(n)]\n    for i in range(0, n):\n        if s[i] == '1':\n            m = i\n        elif m != -1:\n            left[i] = i - m\n        else:\n            left[i] = -1\n    m = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            m = i\n        elif m != -1:\n            right[i] = m - i\n        else:\n            right[i] = -1\n    for i in range(n):\n        if s[i] != '1':\n            if right[i] != -1 and left[i] != -1:\n                if right[i] < left[i]:\n                    index[i] = right[i]\n                else:\n                    index[i] = left[i]\n            elif right[i] != -1:\n                index[i] = right[i]\n            else:\n                index[i] = left[i]\n    for i in range(n):\n        if k < index[i]:\n            print(s[i], end='')\n        elif index[i] == -1:\n            print(s[i], end='')\n        elif index[i] == 0:\n            if k % 2 == 1:\n                if s[i] == '1':\n                    print(0, end='')\n                else:\n                    print(1, end='')\n            else:\n                print(s[i], end='')\n        elif index[i] != 0 and (k - 1 - index[i]) % 2 == 0:\n            print(s[i], end='')\n        elif s[i] == '1':\n            print(0, end='')\n        else:\n            print(1, end='')\n    print()", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    a = list(a)\n    t = [0] * n\n    for i in range(n):\n        if a[i] == '0':\n            if i > 0:\n                if i == n - 1:\n                    if a[n - 2] == '1':\n                        t[i] = '1'\n                elif a[i - 1] == '1' or a[i + 1] == '1':\n                    t[i] = '1'\n                else:\n                    t[i] = '0'\n            elif n > 1:\n                if a[i + 1] == '1':\n                    t[i] = '1'\n        else:\n            t[i] = '0'\n    a = t\n    k = k - 1\n    kp = []\n    ks = []\n    mark = 1000000007\n    for i in range(n):\n        if a[i] == '1':\n            mark = i + 1\n            kp.append(mark)\n        else:\n            kp.append(mark)\n    mark = 1000000007\n    for i in reversed(range(n)):\n        if a[i] == '1':\n            mark = i + 1\n            ks.append(mark)\n        else:\n            ks.append(mark)\n    ks = ks[::-1]\n    s = ''\n    for i in range(n):\n        (p1, s1) = (abs(kp[i] - (i + 1)), abs(ks[i] - (i + 1)))\n        x = min(p1, s1)\n        if x == n + 1:\n            s += '0'\n        elif (x + k) % 2 == 0 and x <= k:\n            s += '1'\n        else:\n            s += '0'\n    print(s)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    a = list(a)\n    t = [0] * n\n    for i in range(n):\n        if a[i] == '0':\n            if i > 0:\n                if i == n - 1:\n                    if a[n - 2] == '1':\n                        t[i] = '1'\n                elif a[i - 1] == '1' or a[i + 1] == '1':\n                    t[i] = '1'\n                else:\n                    t[i] = '0'\n            elif n > 1:\n                if a[i + 1] == '1':\n                    t[i] = '1'\n        else:\n            t[i] = '0'\n    a = t\n    k = k - 1\n    kp = []\n    ks = []\n    mark = 1000000007\n    for i in range(n):\n        if a[i] == '1':\n            mark = i + 1\n            kp.append(mark)\n        else:\n            kp.append(mark)\n    mark = 1000000007\n    for i in reversed(range(n)):\n        if a[i] == '1':\n            mark = i + 1\n            ks.append(mark)\n        else:\n            ks.append(mark)\n    ks = ks[::-1]\n    s = ''\n    for i in range(n):\n        (p1, s1) = (abs(kp[i] - (i + 1)), abs(ks[i] - (i + 1)))\n        x = min(p1, s1)\n        if x == n + 1:\n            s += '0'\n        elif (x + k) % 2 == 0 and x <= k:\n            s += '1'\n        else:\n            s += '0'\n    print(s)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    s = input()\n    t = [0] * N\n    for i in range(N):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < N and s[i + 1] == '0':\n            t[i + 1] = 1\n    K -= 1\n    dist = [N + 1] * N\n    pre = -1\n    for i in range(N):\n        if t[i] == 1:\n            pre = i\n        if pre != -1:\n            dist[i] = i - pre\n    pre = -1\n    for i in reversed(range(N)):\n        if t[i] == 1:\n            pre = i\n        if pre != -1:\n            dist[i] = min(dist[i], pre - i)\n    res = ''\n    for i in range(N):\n        b = dist[i]\n        if b == N + 1 or b > K:\n            res += '0'\n        elif (K - b) % 2 == 0:\n            res += '1'\n        else:\n            res += '0'\n    print(res)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    s = input()\n    t = [0] * N\n    for i in range(N):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < N and s[i + 1] == '0':\n            t[i + 1] = 1\n    K -= 1\n    dist = [N + 1] * N\n    pre = -1\n    for i in range(N):\n        if t[i] == 1:\n            pre = i\n        if pre != -1:\n            dist[i] = i - pre\n    pre = -1\n    for i in reversed(range(N)):\n        if t[i] == 1:\n            pre = i\n        if pre != -1:\n            dist[i] = min(dist[i], pre - i)\n    res = ''\n    for i in range(N):\n        b = dist[i]\n        if b == N + 1 or b > K:\n            res += '0'\n        elif (K - b) % 2 == 0:\n            res += '1'\n        else:\n            res += '0'\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    (waktu, sebelum) = ([n + 1] * n, -1)\n    for i in range(n):\n        if t[i]:\n            sebelum = i\n        if sebelum != -1:\n            waktu[i] = min(waktu[i], i - sebelum)\n    sebelum = -1\n    for i in reversed(range(n)):\n        if t[i]:\n            sebelum = i\n        if sebelum != -1:\n            waktu[i] = min(waktu[i], sebelum - i)\n    ans = ''\n    for i in range(n):\n        ans += '0' if waktu[i] > k or waktu[i] == n + 1 or k - waktu[i] & 1 else '1'\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    string = input()\n    if n == 1:\n        print('0')\n    elif string.count('0') == 0 or string.count('1') == 0:\n        print('0' * n)\n    else:\n        temp = ''\n        for j in range(n):\n            if string[j] == '1':\n                temp += '0'\n            elif j - 1 >= 0 and string[j - 1] == '1':\n                temp += '1'\n            elif j + 1 < n and string[j + 1] == '1':\n                temp += '1'\n            else:\n                temp += '0'\n        string = temp\n        k -= 1\n        if k > 0:\n            dist = [n + 1] * n\n            previous = -1\n            for j in range(n):\n                if string[j] == '1':\n                    previous = j\n                if previous != -1:\n                    dist[j] = j - previous\n            previous = -1\n            for j in range(n - 1, -1, -1):\n                if string[j] == '1':\n                    previous = j\n                if previous != -1:\n                    dist[j] = min(dist[j], previous - j)\n            ans = ''\n            for j in range(n):\n                subs = dist[j]\n                if subs > 0:\n                    subs -= 1\n                remaining_secs = k - subs\n                if remaining_secs >= 0:\n                    if remaining_secs % 2 == 0:\n                        ans += string[j]\n                    elif string[j] == '1':\n                        ans += '0'\n                    else:\n                        ans += '1'\n                else:\n                    ans += '0'\n            print(ans)\n        else:\n            print(string)", "tests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    string = input()\n    if n == 1:\n        print('0')\n    elif string.count('0') == 0 or string.count('1') == 0:\n        print('0' * n)\n    else:\n        temp = ''\n        for j in range(n):\n            if string[j] == '1':\n                temp += '0'\n            elif j - 1 >= 0 and string[j - 1] == '1':\n                temp += '1'\n            elif j + 1 < n and string[j + 1] == '1':\n                temp += '1'\n            else:\n                temp += '0'\n        string = temp\n        k -= 1\n        if k > 0:\n            dist = [n + 1] * n\n            previous = -1\n            for j in range(n):\n                if string[j] == '1':\n                    previous = j\n                if previous != -1:\n                    dist[j] = j - previous\n            previous = -1\n            for j in range(n - 1, -1, -1):\n                if string[j] == '1':\n                    previous = j\n                if previous != -1:\n                    dist[j] = min(dist[j], previous - j)\n            ans = ''\n            for j in range(n):\n                subs = dist[j]\n                if subs > 0:\n                    subs -= 1\n                remaining_secs = k - subs\n                if remaining_secs >= 0:\n                    if remaining_secs % 2 == 0:\n                        ans += string[j]\n                    elif string[j] == '1':\n                        ans += '0'\n                    else:\n                        ans += '1'\n                else:\n                    ans += '0'\n            print(ans)\n        else:\n            print(string)", "tests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    string = input()\n    if n == 1:\n        print('0')\n    elif string.count('0') == 0 or string.count('1') == 0:\n        print('0' * n)\n    else:\n        temp = ''\n        for j in range(n):\n            if string[j] == '1':\n                temp += '0'\n            elif j - 1 >= 0 and string[j - 1] == '1':\n                temp += '1'\n            elif j + 1 < n and string[j + 1] == '1':\n                temp += '1'\n            else:\n                temp += '0'\n        string = temp\n        k -= 1\n        if k > 0:\n            dist = [n + 1] * n\n            previous = -1\n            for j in range(n):\n                if string[j] == '1':\n                    previous = j\n                if previous != -1:\n                    dist[j] = j - previous\n            previous = -1\n            for j in range(n - 1, -1, -1):\n                if string[j] == '1':\n                    previous = j\n                if previous != -1:\n                    dist[j] = min(dist[j], previous - j)\n            ans = ''\n            for j in range(n):\n                subs = dist[j]\n                if subs > 0:\n                    subs -= 1\n                remaining_secs = k - subs\n                if remaining_secs >= 0:\n                    if remaining_secs % 2 == 0:\n                        ans += string[j]\n                    elif string[j] == '1':\n                        ans += '0'\n                    else:\n                        ans += '1'\n                else:\n                    ans += '0'\n            print(ans)\n        else:\n            print(string)", "tests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    string = input()\n    if n == 1:\n        print('0')\n    elif string.count('0') == 0 or string.count('1') == 0:\n        print('0' * n)\n    else:\n        temp = ''\n        for j in range(n):\n            if string[j] == '1':\n                temp += '0'\n            elif j - 1 >= 0 and string[j - 1] == '1':\n                temp += '1'\n            elif j + 1 < n and string[j + 1] == '1':\n                temp += '1'\n            else:\n                temp += '0'\n        string = temp\n        k -= 1\n        if k > 0:\n            left_one_dist = []\n            right_one_dist = []\n            left_one = -1\n            right_one = -1\n            for j in range(n):\n                if string[j] == '1':\n                    left_one = 0\n                elif left_one != -1:\n                    left_one += 1\n                left_one_dist.append(left_one)\n            for j in range(n - 1, -1, -1):\n                if string[j] == '1':\n                    right_one = 0\n                elif right_one != -1:\n                    right_one += 1\n                right_one_dist.append(right_one)\n            right_one_dist = right_one_dist[::-1]\n            ans = ''\n            for j in range(n):\n                if min(right_one_dist[j], left_one_dist[j]) == -1:\n                    subs = max(right_one_dist[j], left_one_dist[j])\n                else:\n                    subs = min(right_one_dist[j], left_one_dist[j])\n                if subs > 0:\n                    subs -= 1\n                remaining_secs = k - subs\n                if remaining_secs >= 0:\n                    if remaining_secs % 2 == 0:\n                        ans += string[j]\n                    elif string[j] == '1':\n                        ans += '0'\n                    else:\n                        ans += '1'\n                else:\n                    ans += '0'\n            print(ans)\n        else:\n            print(string)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    (dist, sebelum) = ([n + 1] * n, -1)\n    for i in range(n):\n        if t[i]:\n            sebelum = i\n        if sebelum != -1:\n            dist[i] = min(dist[i], i - sebelum)\n    sebelum = -1\n    for i in range(n - 1, -1, -1):\n        if t[i]:\n            sebelum = i\n        if sebelum != -1:\n            dist[i] = min(dist[i], sebelum - i)\n    ans = ''\n    for i in range(n):\n        if dist[i] > k or dist[i] == n + 1:\n            ans += '0'\n        elif k - dist[i] & 1:\n            ans += '0'\n        else:\n            ans += '1'\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "def give(ans, k):\n    if k % 2 == 0:\n        return 1 if ans % 2 == 0 and ans <= k else 0\n    else:\n        return 1 if ans % 2 == 1 and ans <= k else 0\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [i for i in input()]\n    if len(s) == 1:\n        print('0') if k >= 1 else print(s[0])\n        continue\n    (ini, fin) = (['inf'] * n, ['inf'] * n)\n    m = float('inf')\n    k -= 1\n    duplicate = s.copy()\n    for i in range(n):\n        if i == 0:\n            if s[i] == '1':\n                duplicate[i] = '0'\n            elif s[i + 1] == '1':\n                duplicate[i] = '1'\n            continue\n        if i == n - 1:\n            if s[i] == '1':\n                duplicate[i] = '0'\n            elif s[i - 1] == '1':\n                duplicate[i] = '1'\n            continue\n        if s[i] == '1':\n            duplicate[i] = '0'\n        elif s[i - 1] == '1' or s[i + 1] == '1':\n            duplicate[i] = '1'\n    s = duplicate.copy()\n    for i in range(n):\n        if s[i] == '1':\n            m = 0\n        else:\n            m += 1\n        ini[i] = m\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            m = 0\n        else:\n            m += 1\n        fin[i] = m\n    ans = [None] * n\n    for i in range(n):\n        ans[i] = min(ini[i], fin[i])\n    if ans[0] == float('inf') or ans[-1] == float('inf'):\n        sol = [0] * n\n        print(*sol, sep='')\n        continue\n    elif k % 2:\n        sol = [give(ans[i], k) for i in range(n)]\n    else:\n        sol = [give(ans[i], k) for i in range(n)]\n    print(*sol, sep='')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "import math\nfrom functools import reduce\n\ndef read(func=str, sep=None):\n    return list(map(func, input().split(sep)))\n\ndef read_ints(sep=None):\n    return read(func=int, sep=sep)\n\ndef read_int():\n    return int(input())\n\ndef print_array(arr, sep=' '):\n    print(sep.join(map(str, arr)))\n\ndef setbitcount(num):\n    bits = 0\n    while num:\n        bits += num & 1\n        num >>= 1\n    return bits\ntest_cases = read_int()\nfor _ in range(test_cases):\n    (n, k) = read_ints()\n    s = list(input())\n    pending_up = set()\n    should_not_up = set()\n    i = 0\n    while i < n:\n        item = s[i]\n        if item == '1':\n            s[i] = '0'\n            pending_up.add(i - 1)\n            pending_up.add(i + 1)\n            should_not_up.add(i)\n        else:\n            pass\n        i += 1\n    for item in pending_up - should_not_up:\n        if 0 <= item < n:\n            s[item] = '1'\n    nearest = [100000000.0] * n\n    i = 0\n    last_1 = None\n    while i < n:\n        item = s[i]\n        if item == '1':\n            last_1 = i\n            nearest[i] = 0\n        if item == '0':\n            nearest[i] = min(i - last_1, nearest[i]) if last_1 is not None else nearest[i]\n        i += 1\n    i = n - 1\n    last_1 = None\n    while i >= 0:\n        item = s[i]\n        if item == '1':\n            last_1 = i\n            nearest[i] = 0\n        if item == '0':\n            nearest[i] = min(last_1 - i, nearest[i]) if last_1 is not None else nearest[i]\n        i -= 1\n    if nearest[0] == 100000000.0:\n        print('0' * n)\n    else:\n        out = [''] * n\n        i = 0\n        while i < n:\n            item = s[i]\n            out[i] = str(int((k - nearest[i]) % 2)) if nearest[i] < k else '0'\n            i += 1\n        print(''.join(out))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "from bisect import *\nfrom heapq import *\nfrom math import *\nfrom collections import defaultdict as ddc\nfrom collections import Counter\nfrom functools import *\nfrom itertools import *\nfrom sys import setrecursionlimit\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef hashit(arr, size, mod=10 ** 9 + 7):\n    if not size:\n        return\n    (mul, hashh, div) = (256, 0, (1 << 8 * size - 8) % mod)\n    C = defaultdict(list)\n    for i in range(size):\n        hashh = (mul * hashh + arr[i]) % mod\n    C[hashh].append(0)\n    for i in range(len(arr) - size):\n        hashh = (mul * (hashh - arr[i] * div) + arr[i + size]) % mod\n        C[hashh].append(i + 1)\n    return C\n\ndef LIS(arr, n):\n    dp = [10 ** 9] * (n + 1)\n    for ele in arr:\n        dp[bisect_left(dp, ele)] = ele\n    return bisect_left(dp, 10 ** 9)\n\ndef exponentiation(bas, exp, mod=10 ** 9 + 7):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nyes = 'YES'\nno = 'NO'\neven = 'EVEN'\nodd = 'ODD'\n\ndef graphin(n):\n    zz = defaultdict(set)\n    for i in range(n - 1):\n        (a, b) = mapin()\n        zz[a].add(b)\n        zz[b].add(a)\n    return zz\n\ndef process(arr, n, k):\n    ans = ['1'] * n\n    for i in range(n):\n        if arr[i] == '0' and (i > 0 and arr[i - 1] == '1' or (i < n - 1 and arr[i + 1] == '1')):\n            arr[i] = '2'\n    for i in range(n):\n        if arr[i] == '2':\n            arr[i] = '1'\n        elif arr[i] == '1':\n            arr[i] = '0'\n    k -= 1\n    l = -1\n    r = 0\n    for i in range(n):\n        if i >= r:\n            r += 1\n            while r < n and arr[r] == '0':\n                r += 1\n        if arr[i] == '1':\n            if k % 2:\n                arr[i] = '0'\n            l = i\n        else:\n            if l == -1 and r == n:\n                break\n            elif l == -1:\n                limit = r - i\n            elif r == n:\n                limit = i - l\n            else:\n                limit = min(i - l, r - i)\n            if arr[i] == '1':\n                l = i\n            if limit <= k and k % 2 == limit % 2:\n                arr[i] = '1'\n            else:\n                arr[i] = '0'\n    return ''.join(arr)\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = mapin()\n        arr = list(input())\n        print(process(arr, n, k))\nmain()", "from bisect import *\nfrom heapq import *\nfrom math import *\nfrom collections import defaultdict as ddc\nfrom collections import Counter\nfrom functools import *\nfrom itertools import *\nfrom sys import setrecursionlimit\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef hashit(arr, size, mod=10 ** 9 + 7):\n    if not size:\n        return\n    (mul, hashh, div) = (256, 0, (1 << 8 * size - 8) % mod)\n    C = defaultdict(list)\n    for i in range(size):\n        hashh = (mul * hashh + arr[i]) % mod\n    C[hashh].append(0)\n    for i in range(len(arr) - size):\n        hashh = (mul * (hashh - arr[i] * div) + arr[i + size]) % mod\n        C[hashh].append(i + 1)\n    return C\n\ndef LIS(arr, n):\n    dp = [10 ** 9] * (n + 1)\n    for ele in arr:\n        dp[bisect_left(dp, ele)] = ele\n    return bisect_left(dp, 10 ** 9)\n\ndef exponentiation(bas, exp, mod=10 ** 9 + 7):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nyes = 'YES'\nno = 'NO'\neven = 'EVEN'\nodd = 'ODD'\n\ndef graphin(n):\n    zz = defaultdict(set)\n    for i in range(n - 1):\n        (a, b) = mapin()\n        zz[a].add(b)\n        zz[b].add(a)\n    return zz\n\ndef process(arr, n, k):\n    ans = ['1'] * n\n    for i in range(n):\n        if arr[i] == '0' and (i > 0 and arr[i - 1] == '1' or (i < n - 1 and arr[i + 1] == '1')):\n            arr[i] = '2'\n    for i in range(n):\n        if arr[i] == '2':\n            arr[i] = '1'\n        elif arr[i] == '1':\n            arr[i] = '0'\n    k -= 1\n    l = -1\n    r = 0\n    for i in range(n):\n        if i >= r:\n            r += 1\n            while r < n and arr[r] == '0':\n                r += 1\n        if arr[i] == '1':\n            if k % 2:\n                arr[i] = '0'\n            l = i\n        else:\n            if l == -1 and r == n:\n                break\n            elif l == -1:\n                limit = r - i\n            elif r == n:\n                limit = i - l\n            else:\n                limit = min(i - l, r - i)\n            if arr[i] == '1':\n                l = i\n            if limit <= k and k % 2 == limit % 2:\n                arr[i] = '1'\n            else:\n                arr[i] = '0'\n    return ''.join(arr)\n    Q = []\n    if k % 2:\n        for i in range(n):\n            if arr[i] == '1':\n                (l, r) = (i - 1, i + 1)\n                if l > -1 and ans[l] == '0':\n                    Q.append([l, k - 1])\n                if r < n and ans[r] == '0':\n                    Q.append([r, k - 1])\n    else:\n        limit = 0\n        for i in range(n):\n            if arr[i] == '1':\n                ans[i] = '1'\n                (l, r) = (i - 2, i + 2)\n                while l > -1 and i - l <= k % n and (arr[l] != '1') and (ans[l] == '0'):\n                    ans[l] = '1'\n                    l -= 2\n                while r < n and r - i <= k % n and (arr[r] != '1') and (ans[r] == '0'):\n                    ans[r] = '1'\n                    r += 2\n    while Q:\n        print(Q)\n        (i, kk) = Q.pop(0)\n        if -1 < i < n and kk > 0:\n            ans[i] = '1'\n            (l, r) = (i - 2, i + 2)\n            if l > -1 and ans[l] == '0':\n                Q.append([l, kk - 2])\n            if r < n and ans[r] == '0':\n                Q.append([r, kk - 2])\n    return ''.join(ans)\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = mapin()\n        arr = list(input())\n        print(process(arr, n, k))\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    t = [0] * n\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        t[i] = 0\n        if i > 0 and s[i - 1] == '0':\n            t[i - 1] = 1\n        if i + 1 < n and s[i + 1] == '0':\n            t[i + 1] = 1\n    k -= 1\n    dist = [n + 1] * n\n    prv = -1\n    for i in range(n):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = i - prv\n    prv = -1\n    for i in reversed(range(n)):\n        if t[i] == 1:\n            prv = i\n        if prv != -1:\n            dist[i] = min(dist[i], prv - i)\n    ans = ''\n    for i in range(n):\n        first = dist[i]\n        if first == n + 1 or first > k:\n            ans += '0'\n        elif (k - first) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    arr = [0] * 100001\n    k -= 1\n    s = '.' + s + '.'\n    temp = list(s)\n    for i in range(1, n + 1):\n        if s[i] == '1':\n            temp[i] = '0'\n            if s[i - 1] == '0':\n                temp[i - 1] = '1'\n            if s[i + 1] == '0':\n                temp[i + 1] = '1'\n    s = ''.join(temp[1:n + 1])\n    x = 2 ** 32 - 1\n    for j in range(0, n):\n        if s[j] == '1':\n            x = 0\n        arr[j] = x\n        x += 1\n    x = 2 ** 32 - 1\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            x = 0\n        arr[i] = min(arr[i], x)\n        x += 1\n    ans = ''\n    for i in range(n):\n        if k < arr[i]:\n            ans += '0'\n        elif (k - arr[i]) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "import sys\nimport math\nfrom collections import defaultdict\nfrom itertools import permutations\nfrom collections import deque\n\ndef sin():\n    return int(sys.stdin.readline())\n\ndef array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef two():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef multiple():\n    return [int(x) for x in sys.stdin.readline().split()]\n\ndef string():\n    return sys.stdin.readline().strip()\nt = sin()\nfor _ in range(t):\n    (n, k) = multiple()\n    s = string()\n    one = -1\n    temp = [0] * n\n    if '1' not in s:\n        print(s)\n        continue\n    if '0' not in s:\n        if k >= 1:\n            print('0' * n)\n        continue\n    for i in range(n):\n        if s[i] == '1':\n            one = i\n        elif one != -1:\n            temp[i] = i - one\n    one = 0\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            one = i\n        elif not temp[i]:\n            temp[i] = abs(i - one)\n        else:\n            temp[i] = min(temp[i], abs(i - one))\n    zero = -1\n    for i in range(n):\n        if s[i] == '0':\n            zero = i\n        elif zero != -1:\n            temp[i] = i - zero\n    zero = 0\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            zero = i\n        elif not temp[i]:\n            temp[i] = abs(i - zero)\n        else:\n            temp[i] = min(temp[i], abs(i - zero))\n    for i in range(n):\n        temp[i] = max(temp[i], 1)\n    ans = []\n    for i in range(n):\n        if k < temp[i]:\n            if s[i] == '1':\n                if k >= 1:\n                    ans.append('0')\n                else:\n                    ans.append('1')\n            else:\n                ans.append(s[i])\n            continue\n        x = k - temp[i]\n        if x % 2:\n            if s[i] == '1':\n                ans.append('1')\n            else:\n                ans.append('0')\n        elif s[i] == '0':\n            ans.append('1')\n        else:\n            ans.append('0')\n    print(''.join(ans))", "from collections import defaultdict\ndic = defaultdict(int)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = list('_' + input() + '_')\n    k -= 1\n    copy_string = list(string)\n    for i in range(1, n + 1):\n        if string[i] == '1':\n            copy_string[i] = '0'\n            if string[i - 1] == '0':\n                copy_string[i - 1] = '1'\n            if string[i + 1] == '0':\n                copy_string[i + 1] = '1'\n    string = copy_string[1:n + 1]\n    const = 31474836470\n    for i in range(n):\n        if string[i] == '1':\n            const = 0\n        dic[i] = const\n        const += 1\n    const = 31474836470\n    for i in range(n - 1, -1, -1):\n        if string[i] == '1':\n            const = 0\n        dic[i] = min(dic[i], const)\n        const += 1\n    for i in range(n):\n        print((0, 1 - (k - dic[i]) % 2)[not k < dic[i]], end='')\n    print()", "from collections import defaultdict\ndic = defaultdict(int)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = list('_' + input() + '_')\n    k -= 1\n    copy_string = list(string)\n    for i in range(1, n + 1):\n        if string[i] == '1':\n            copy_string[i] = '0'\n            if string[i - 1] == '0':\n                copy_string[i - 1] = '1'\n            if string[i + 1] == '0':\n                copy_string[i + 1] = '1'\n    string = copy_string[1:n + 1]\n    const = 21474836470\n    for i in range(n):\n        if string[i] == '1':\n            const = 0\n        dic[i] = const\n        const += 1\n    const = 21474836470\n    for i in range(n - 1, -1, -1):\n        if string[i] == '1':\n            const = 0\n        dic[i] = min(dic[i], const)\n        const += 1\n    for i in range(n):\n        print((0, 1 - (k - dic[i]) % 2)[not k < dic[i]], end='')\n    print()", "import sys\na = [0] * 100001\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    k -= 1\n    s = '.' + s + '.'\n    t = list(s)\n    for j in range(1, n + 1):\n        if s[j] == '1':\n            t[j] = '0'\n            if s[j - 1] == '0':\n                t[j - 1] = '1'\n            if s[j + 1] == '0':\n                t[j + 1] = '1'\n    t = ''.join(t)\n    s = t[1:n + 1]\n    x = sys.maxsize\n    for i in range(n):\n        x += 1\n        if s[i] == '1':\n            x = 0\n        a[i] = x\n    x = sys.maxsize\n    for i in range(n - 1, -1, -1):\n        x += 1\n        if s[i] == '1':\n            x = 0\n        a[i] = min(a[i], x)\n    ans = ''\n    for i in range(n):\n        if k < a[i]:\n            ans += '0'\n        elif (k - a[i]) % 2 == 0:\n            ans += '1'\n        else:\n            ans += '0'\n    print(ans)", "from collections import defaultdict\ndic = defaultdict(int)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = input()\n    k -= 1\n    string = '_' + string + '_'\n    string = list(string)\n    copy_string = list(string)\n    for i in range(1, n + 1):\n        if string[i] == '1':\n            copy_string[i] = '0'\n            if string[i - 1] == '0':\n                copy_string[i - 1] = '1'\n            if string[i + 1] == '0':\n                copy_string[i + 1] = '1'\n    string = copy_string[1:n + 1]\n    const = 2147483647\n    for i in range(n):\n        if string[i] == '1':\n            const = 0\n        dic[i] = const\n        const += 1\n    const = 2147483647\n    for i in range(n - 1, -1, -1):\n        if string[i] == '1':\n            const = 0\n        dic[i] = min(dic[i], const)\n        const += 1\n    for i in range(n):\n        print((0, 1 - (k - dic[i]) % 2)[not k < dic[i]], end='')\n    print()", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    s1 = input()\n    s = [i for i in s1]\n    b = [i for i in s]\n    a = [0 for i in range(n)]\n    for i in range(n):\n        if s[i] == '1':\n            b[i] = '0'\n            if i != 0 and s[i - 1] == '0':\n                b[i - 1] = '1'\n            if i != n - 1 and s[i + 1] == '0':\n                b[i + 1] = '1'\n    k -= 1\n    s = [i for i in b]\n    j = 9876543211\n    for i in range(n):\n        if s[i] == '1':\n            j = 0\n        a[i] = j\n        j += 1\n    j = 9876543211\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            j = 0\n        a[i] = min(j, a[i])\n        j += 1\n    for i in range(n):\n        if k < a[i]:\n            print(0, end='')\n        elif (k - a[i]) % 2 != 0:\n            print(0, end='')\n        else:\n            print(1, end='')\n    print()", "import random\nimport math\nfrom collections import defaultdict, Counter, deque, OrderedDict\nfrom functools import lru_cache\nimport bisect\nimport heapq\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\nclass SegmentTree:\n\n    def __init__(self, arr, func=lambda x, y: x + y, defaultvalue=0):\n        self.n = len(arr)\n        self.segmentTree = [0] * self.n + arr\n        self.func = func\n        self.defaultvalue = defaultvalue\n        self.buildSegmentTree(arr)\n\n    def buildSegmentTree(self, arr):\n        for i in range(self.n - 1, 0, -1):\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        res = self.defaultvalue\n        while l < r:\n            if l & 1:\n                res = self.func(res, self.segmentTree[l])\n                l += 1\n            l >>= 1\n            if r & 1:\n                r -= 1\n                res = self.func(res, self.segmentTree[r])\n            r >>= 1\n        return res\n\n    def update(self, i, value):\n        i += self.n\n        self.segmentTree[i] = value\n        while i > 1:\n            i >>= 1\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parents = list(range(n))\n\n    def find(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            self.parents[x] = y\ndire = [0, 1, 0, -1, 0]\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef case(t):\n    print('Case #{}:'.format(t), end=' ')\nRANDOM = random.randrange(2 ** 62)\n\ndef Wrapper(x):\n    return x ^ RANDOM\n\ndef get(og, k):\n    n = len(og)\n    dp = og[:]\n    last1 = math.inf\n    for i in range(n):\n        if last1 <= k and og[i] == '0':\n            if last1 % 2 == 0:\n                dp[i] = '1'\n        if og[i] == '1':\n            last1 = 0\n        last1 += 1\n    last1 = math.inf\n    for i in range(n - 1, -1, -1):\n        if last1 <= k and og[i] == '0':\n            if last1 % 2 == 0:\n                dp[i] = '1'\n        if og[i] == '1':\n            last1 = 0\n        last1 += 1\n    return ''.join(dp)\n\ndef solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    og = list(s)\n    for i in range(n):\n        if s[i] == '1':\n            og[i] = '0'\n            if i > 0 and s[i - 1] == '0':\n                og[i - 1] = '1'\n            if i < n - 1 and s[i + 1] == '0':\n                og[i + 1] = '1'\n    k -= 1\n    s = ''.join(og)\n    if k % 2 == 1:\n        for i in range(n):\n            if s[i] == '1':\n                og[i] = '0'\n                if i > 0 and s[i - 1] == '0':\n                    og[i - 1] = '1'\n                if i < n - 1 and s[i + 1] == '0':\n                    og[i + 1] = '1'\n        k -= 1\n    ans = []\n    l = 0\n    zc = 0\n    start = False\n    for i in range(n):\n        if og[i] == '1':\n            if zc != 0 and zc % 2 == 0 and start:\n                mid = i - zc // 2\n                ans.append(get(og[l:mid], k))\n                l = mid\n            start = True\n            zc = 0\n        else:\n            zc += 1\n    ans.append(get(og[l:], k))\n    print(''.join(ans))\nfor t in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    temp = ''\n    dp = [-1 for i in range(n)]\n    lastZero = -1\n    lastOne = -1\n    for i in range(n):\n        if s[i] == '0':\n            if lastOne != -1:\n                dp[i] = abs(lastOne - i)\n            lastZero = i\n        else:\n            if lastZero != -1:\n                dp[i] = abs(lastZero - i)\n            lastOne = i\n    lastZero = -1\n    lastOne = -1\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            if lastOne != -1:\n                if dp[i] == -1:\n                    dp[i] = abs(lastOne - i)\n                else:\n                    dp[i] = min(dp[i], abs(lastOne - i))\n            lastZero = i\n        else:\n            if lastZero != -1:\n                if dp[i] == -1:\n                    dp[i] = abs(lastZero - i)\n                else:\n                    dp[i] = min(dp[i], abs(lastZero - i))\n            lastOne = i\n    temp = ''\n    for i in range(n):\n        if dp[i] == 1:\n            if k % 2 != 0:\n                if s[i] == '0':\n                    temp += '1'\n                else:\n                    temp += '0'\n            else:\n                temp += s[i]\n        elif dp[i] == -1:\n            temp += '0'\n        elif dp[i] <= k:\n            t = k - dp[i]\n            if t % 2 == 0:\n                if s[i] == '0':\n                    temp += '1'\n                else:\n                    temp += '0'\n            else:\n                temp += s[i]\n        else:\n            temp += '0'\n    print(temp)", "import math\nfrom functools import reduce\n\ndef read(func=str, sep=None):\n    return list(map(func, input().split(sep)))\n\ndef read_ints(sep=None):\n    return read(func=int, sep=sep)\n\ndef read_int():\n    return int(input())\n\ndef print_array(arr, sep=' '):\n    print(sep.join(map(str, arr)))\n\ndef bitcount(num):\n    bits = 0\n    while num:\n        if num & 1:\n            bits += 1\n        num >>= 1\n    return bits\ntest_cases = read_int()\nfor _ in range(test_cases):\n    (n, k) = read_ints()\n    s = list(input())\n    pending_up = set()\n    should_not_up = set()\n    i = 0\n    while i < n:\n        item = s[i]\n        if item == '1':\n            s[i] = '0'\n            pending_up.add(i - 1)\n            pending_up.add(i + 1)\n            should_not_up.add(i)\n        else:\n            pass\n        i += 1\n    for item in pending_up - should_not_up:\n        if 0 <= item < n:\n            s[item] = '1'\n    nearest = [100000000.0] * n\n    i = 0\n    last_1 = None\n    while i < n:\n        item = s[i]\n        if item == '1':\n            last_1 = i\n            nearest[i] = 0\n        if item == '0':\n            nearest[i] = min(i - last_1, nearest[i]) if last_1 is not None else nearest[i]\n        i += 1\n    i = n - 1\n    last_1 = None\n    while i >= 0:\n        item = s[i]\n        if item == '1':\n            last_1 = i\n            nearest[i] = 0\n        if item == '0':\n            nearest[i] = min(last_1 - i, nearest[i]) if last_1 is not None else nearest[i]\n        i -= 1\n    if nearest[0] == 100000000.0:\n        print('0' * n)\n    else:\n        out = [''] * n\n        i = 0\n        while i < n:\n            item = s[i]\n            out[i] = str(int((k - nearest[i]) % 2)) if nearest[i] < k else '0'\n            i += 1\n        print(''.join(out))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    Q = input()\n    k -= 1\n    a = [0] * n\n    string = ['0'] * n\n    for i in range(n):\n        if Q[i] == '1':\n            string[i] = '0'\n            if i > 0 and Q[i - 1] == '0':\n                string[i - 1] = '1'\n            if i < n - 1 and Q[i + 1] == '0':\n                string[i + 1] = '1'\n    Q = string[:]\n    i = 0\n    x = 2147483647\n    while i < n:\n        if Q[i] == '1':\n            x = 0\n        a[i] = x\n        x += 1\n        i += 1\n    i = n - 1\n    x = 2147483647\n    while i > -1:\n        if Q[i] == '1':\n            x = 0\n        a[i] = min(a[i], x)\n        i -= 1\n        x += 1\n    for i in range(n):\n        if k < a[i]:\n            print('0', end='')\n        elif (k - a[i]) % 2 == 0:\n            print('1', end='')\n        else:\n            print('0', end='')\n    print()", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\n\ndef change(s):\n    l = list(s)\n    n = len(l)\n    for i in range(n):\n        if s[i] == '1':\n            l[i] = '0'\n            if i >= 1 and s[i - 1] == '0':\n                l[i - 1] = '1'\n            if i + 1 < n and s[i + 1] == '0':\n                l[i + 1] = '1'\n    return l\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    l1 = change(list(s))\n    s = ''.join(l1)\n    k -= 1\n    if k == 0:\n        print(''.join(l1))\n        continue\n    l = []\n    for i in range(n):\n        if s[i] == '1':\n            l.append(i)\n    l = [-10 ** 10] + l + [10 ** 10]\n    for i in range(len(l) - 1):\n        ind1 = l[i]\n        ind2 = l[i + 1]\n        zer = ind2 - ind1 - 1\n        if zer % 2 == 0:\n            mid1 = ind1 + zer // 2\n            mid2 = ind2 - zer // 2\n            mid1 = min(ind1 + k, mid1)\n            mid2 = max(ind2 - k, mid2)\n        else:\n            mid1 = ind1 + (zer + 1) // 2\n            mid2 = ind2 - (zer + 1) // 2\n            mid1 = min(ind1 + k, mid1)\n            mid2 = max(ind2 - k, mid2)\n        c = 0\n        for j in range(max(0, l[i]), min(n, mid1 + 1)):\n            if c % 2 == 0:\n                if k % 2 == 0:\n                    l1[j] = '1'\n                else:\n                    l1[j] = '0'\n            elif k % 2 == 0:\n                l1[j] = '0'\n            else:\n                l1[j] = '1'\n            c += 1\n        c = 0\n        for j in range(min(n - 1, l[i + 1]), max(-1, mid2 - 1), -1):\n            if c % 2 == 0:\n                if k % 2 == 0:\n                    l1[j] = '1'\n                else:\n                    l1[j] = '0'\n            elif k % 2 == 0:\n                l1[j] = '0'\n            else:\n                l1[j] = '1'\n            c += 1\n    print(''.join(l1))", "for _ in range(int(input())):\n    a = list(map(int, input().strip().split()))\n    s = input()\n    if a[0] == 1:\n        print(0)\n    else:\n        a[1] -= 1\n        sl = []\n        for i in range(a[0]):\n            if s[i] == '1':\n                sl.append(0)\n            elif i == 0:\n                if s[i + 1] == '1':\n                    sl.append(1)\n                else:\n                    sl.append(0)\n            elif i == a[0] - 1:\n                if s[i - 1] == '1':\n                    sl.append(1)\n                else:\n                    sl.append(0)\n            elif s[i + 1] == '1' or s[i - 1] == '1':\n                sl.append(1)\n            else:\n                sl.append(0)\n        c1 = 1000001\n        c2 = 1000001\n        l1 = [0 for i in range(a[0])]\n        l2 = [0 for i in range(a[0])]\n        for i in range(a[0]):\n            if sl[i] == 1:\n                c1 = 0\n            else:\n                c1 += 1\n            if sl[a[0] - i - 1] == 1:\n                c2 = 0\n            else:\n                c2 += 1\n            l1[i] = c1\n            l2[a[0] - i - 1] = c2\n        ans = ''\n        for i in range(a[0]):\n            if min(l1[i], l2[i]) > 1000000:\n                ans += '0'\n            elif min(l1[i], l2[i]) > a[1]:\n                ans += '0'\n            elif min(l1[i], l2[i]) % 2 == a[1] % 2:\n                ans += '1'\n            else:\n                ans += '0'\n        print(ans)", "import collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    prefix_dist = [float('inf')]\n    suffix_dist = collections.deque([float('inf')])\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            prefix_dist.append(prefix_dist[-1] + 1)\n        else:\n            prefix_dist.append(1)\n        if s[-i - 1] == s[-i]:\n            suffix_dist.appendleft(suffix_dist[0] + 1)\n        else:\n            suffix_dist.appendleft(1)\n    res = ''\n    for i in range(n):\n        dist = min(prefix_dist[i], suffix_dist[i])\n        if dist > k:\n            res += '0'\n        elif (k - dist) % 2 == 0:\n            res += str(1 - int(s[i]))\n        else:\n            res += s[i]\n    print(res)", "import collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    prefix_dist = [float('inf')]\n    suffix_dist = collections.deque([float('inf')])\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            prefix_dist.append(prefix_dist[-1] + 1)\n        else:\n            prefix_dist.append(1)\n        if s[-i - 1] == s[-i]:\n            suffix_dist.appendleft(suffix_dist[0] + 1)\n        else:\n            suffix_dist.appendleft(1)\n    dist = [min(prefix_dist[i], suffix_dist[i]) for i in range(n)]\n    res = ''\n    for i in range(n):\n        if dist[i] > k:\n            res += '0'\n        elif (k - dist[i]) % 2 == 0:\n            res += str(1 - int(s[i]))\n        else:\n            res += s[i]\n    print(res)", "import collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    prefix_dist = [float('inf')]\n    suffix_dist = collections.deque([float('inf')])\n    for i in range(1, n):\n        if s[i] == s[i - 1]:\n            prefix_dist.append(prefix_dist[-1] + 1)\n        else:\n            prefix_dist.append(1)\n        if s[-i - 1] == s[-i]:\n            suffix_dist.appendleft(suffix_dist[0] + 1)\n        else:\n            suffix_dist.appendleft(1)\n    dist = [min(prefix_dist[i], suffix_dist[i]) for i in range(n)]\n    res = ''\n    for i in range(n):\n        if dist[i] > k:\n            res += '0'\n        elif (k - dist[i]) % 2 == 0:\n            res += str(1 - int(s[i]))\n        else:\n            res += s[i]\n    print(res)", "from sys import stdin\ninput = stdin.readline\ninp = lambda : list(map(int, input().split()))\n\ndef answer():\n    v = a.count('0')\n    if v == 0 or v == n:\n        return '0' * n\n    front = [[-float('inf'), -float('inf')] for i in range(n + 1)]\n    for i in range(n):\n        front[i + 1] = front[i][:]\n        front[i + 1][int(a[i])] = i\n    back = [[float('inf'), float('inf')] for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        back[i] = back[i + 1][:]\n        back[i][int(a[i])] = i\n    ans = ''\n    for i in range(n):\n        dist = min(i - front[i + 1][int(a[i]) ^ 1], back[i][int(a[i]) ^ 1] - i)\n        if dist > k:\n            ans += '0'\n            continue\n        if k - dist & 1 == 0:\n            if a[i] == '1':\n                ans += '0'\n            else:\n                ans += '1'\n        elif a[i] == '1':\n            ans += '1'\n        else:\n            ans += '0'\n    return ans\nfor T in range(int(input())):\n    (n, k) = inp()\n    a = input().strip()\n    print(answer())", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    Q = str(input())\n    k -= 1\n    Q = '.' + Q + '.'\n    Q = list(Q)\n    b = [x for x in Q]\n    a = [0 for i in range(100001)]\n    for i in range(1, n + 1):\n        if Q[i] == '1':\n            b[i] = '0'\n            if Q[i - 1] == '0':\n                b[i - 1] = '1'\n            if Q[i + 1] == '0':\n                b[i + 1] = '1'\n    Q = b[1:n + 1]\n    x = 2147483647\n    for i in range(n):\n        if Q[i] == '1':\n            x = 0\n        a[i] = x\n        x += 1\n    x = 2147483647\n    for i in range(n - 1, -1, -1):\n        if Q[i] == '1':\n            x = 0\n        a[i] = min(a[i], x)\n        x += 1\n    for i in range(n):\n        if k < a[i]:\n            print('0', end='')\n        elif (k - a[i]) % 2 == 0:\n            print('1', end='')\n        else:\n            print('0', end='')\n    print()", "test = int(input())\nfor k in range(test):\n    (n, s) = map(int, input().split())\n    arr = input()\n    last_zero = -1\n    last_one = -1\n    left_toggel = []\n    for i in range(n):\n        if arr[i] == '0':\n            left_toggel.append(last_one)\n            last_zero = i\n        else:\n            left_toggel.append(last_zero)\n            last_one = i\n    last_zero = -1\n    last_one = -1\n    right_toggel = [0] * n\n    for i in reversed(range(n)):\n        if arr[i] == '0':\n            right_toggel[i] = last_one\n            last_zero = i\n        else:\n            right_toggel[i] = last_zero\n            last_one = i\n    result = ''\n    for i in range(n):\n        left_dist = 10 ** 10\n        right_dist = 10 ** 10\n        if left_toggel[i] != -1:\n            left_dist = i - left_toggel[i]\n        if right_toggel[i] != -1:\n            right_dist = right_toggel[i] - i\n        dist = min(left_dist, right_dist)\n        if arr[i] == '0':\n            if dist > s:\n                result = result + '0'\n                continue\n            else:\n                val = s - dist + 1\n                if val % 2 == 0:\n                    result = result + '0'\n                else:\n                    result = result + '1'\n                continue\n        elif dist >= s:\n            result = result + '0'\n            continue\n        else:\n            val = s - dist + 1\n            if val % 2 == 0:\n                result = result + '1'\n            else:\n                result = result + '0'\n            continue\n    print(result)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    (q, k) = (input(), k - 1)\n    a = [0 for i in range(100001)]\n    q = [x for x in '.' + q + '.']\n    b = [x for x in q]\n    for j in range(1, n + 1):\n        if q[j] == '1':\n            b[j] = '0'\n            if q[j - 1] == '0':\n                b[j - 1] = '1'\n            if q[j + 1] == '0':\n                b[j + 1] = '1'\n    q = b[1:n + 1]\n    x = 2147483647\n    for i in range(0, n):\n        if q[i] == '1':\n            x = 0\n        a[i] = x\n        x += 1\n    x = 2147483647\n    for i in range(n - 1, -1, -1):\n        if q[i] == '1':\n            x = 0\n        a[i] = min(a[i], x)\n        x += 1\n    for i in range(n):\n        if k < a[i]:\n            print('0', end='')\n        elif (k - a[i]) % 2 == 0:\n            print('1', end='')\n        else:\n            print('0', end='')\n    print()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    a = [-1] * n\n    b = [-1] * n\n    ind = -1\n    for i in range(n):\n        if s[i] == '0':\n            ind = i\n        elif ind == -1:\n            pass\n        elif a[i] == -1:\n            a[i] = i - ind - 1\n        else:\n            a[i] = min(a[i], i - ind - 1)\n    ind = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            ind = i\n        elif ind == n:\n            pass\n        elif a[i] == -1:\n            a[i] = ind - i - 1\n        else:\n            a[i] = min(a[i], ind - i - 1)\n    ind = -1\n    for i in range(n):\n        if s[i] == '1':\n            ind = i\n        elif ind == -1:\n            pass\n        elif a[i] == -1:\n            a[i] = i - ind - 1\n        else:\n            a[i] = min(a[i], i - ind - 1)\n    ind = n\n    for i in range(n - 1, -1, -1):\n        if s[i] == '1':\n            ind = i\n        elif ind == n:\n            pass\n        elif a[i] == -1:\n            a[i] = ind - i - 1\n        else:\n            a[i] = min(a[i], ind - i - 1)\n    ans = ''\n    for i in range(n):\n        if s[i] == '0':\n            if a[i] < 0:\n                ans += '0'\n            elif k - a[i] >= 0 and (k - a[i]) % 2 == 1:\n                ans += '1'\n            else:\n                ans += '0'\n        else:\n            c = 1\n            x = k - 1\n            if a[i] < 0:\n                ans += '0'\n            elif x - a[i] >= 0:\n                if (c + (x - a[i]) % 2) % 2 == 0:\n                    ans += '1'\n                else:\n                    ans += '0'\n            else:\n                ans += '0'\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    q = input()\n    k -= 1\n    Q = '.' + q + '.'\n    aux = []\n    a = [0] * 100001\n    for i in range(len(Q)):\n        aux.append(Q[i])\n    b = aux.copy()\n    aux = []\n    for i in range(1, n + 1):\n        if Q[i] == '1':\n            b[i] = '0'\n            if Q[i - 1] == '0':\n                b[i - 1] = '1'\n            if Q[i + 1] == '0':\n                b[i + 1] = '1'\n    b = ''.join(b)\n    for i in range(1, len(b)):\n        aux.append(b[i])\n    Q = ''.join(aux)\n    x = 2147483647\n    for i in range(n):\n        if Q[i] == '1':\n            x = 0\n        a[i] = x\n        x += 1\n    x = 2147483647\n    for i in range(n, -1, -1):\n        if Q[i] == '1':\n            x = 0\n        a[i] = min(a[i], x)\n        x += 1\n    for i in range(n):\n        if k < a[i]:\n            print('0', end='')\n        elif (k - a[i]) % 2 == 0:\n            print('1', end='')\n        else:\n            print('0', end='')\n    print(end='\\n')\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    r = [float('inf') for i in range(n)]\n    l = [float('inf') for i in range(n)]\n    le0 = float('-inf')\n    le1 = float('-inf')\n    for i in range(n):\n        if s[i] == '0':\n            l[i] = min(i - le1, l[i])\n            le0 = i\n        else:\n            l[i] = min(i - le0, l[i])\n            le1 = i\n    re0 = float('inf')\n    re1 = float('inf')\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            r[i] = min(re1 - i, l[i])\n            re0 = i\n        else:\n            r[i] = min(re0 - i, l[i])\n            re1 = i\n    arr = [float('inf') for i in range(n)]\n    for i in range(n):\n        arr[i] = min(l[i], r[i])\n    ans = ''\n    for i in range(n):\n        if s[i] == '0':\n            if arr[i] == float('inf'):\n                ans += '0'\n            elif k < arr[i]:\n                ans += '0'\n            else:\n                t = k - arr[i] + 1\n                if t % 2 == 0:\n                    ans += '0'\n                else:\n                    ans += '1'\n        elif arr[i] == float('inf'):\n            ans += '0'\n        else:\n            t1 = k - 1\n            if t1 < arr[i]:\n                ans += '0'\n            else:\n                t = t1 - arr[i] + 1\n                if t % 2 == 0:\n                    ans += '0'\n                else:\n                    ans += '1'\n    print(ans)", "from collections import deque\nfrom functools import reduce\n\ndef thiccness(s):\n    last = (float('-inf'), float('-inf'))\n    ans = []\n    for i in range(len(s)):\n        x = s[i]\n        last = (i, last[1]) if x == '0' else (last[0], i)\n        ans.append(i - last[0] if x == '1' else i - last[1])\n    return ans\n\ndef solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    a = thiccness(s)\n    b = thiccness(s[::-1])[::-1]\n    c = [min(x, y) for (x, y) in zip(a, b)]\n    ans = ''\n    for i in range(n):\n        if k < c[i]:\n            ans += '0'\n        elif (k - c[i]) % 2 == 0:\n            ans += str(1 - int(s[i]))\n        else:\n            ans += s[i]\n    return ''.join(ans)\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    q = input()\n    k -= 1\n    b = list(q)\n    for i in range(n):\n        if q[i] != '0':\n            b[i] = '0'\n            if i != 0 and q[i - 1] != '1':\n                b[i - 1] = '1'\n            if i != n - 1 and q[i + 1] != '1':\n                b[i + 1] = '1'\n    a = [99999999999] * n\n    m = 2147483647\n    for i in range(n):\n        if b[i] == '1':\n            m = 0\n        a[i] = m\n        m += 1\n    m = 2147483647\n    for i in range(n - 1, -1, -1):\n        if b[i] == '1':\n            m = 0\n        a[i] = min(a[i], m)\n        m += 1\n    for i in range(n):\n        if k < a[i]:\n            print('0', end='')\n        elif (k - a[i]) % 2 == 0:\n            print(1, end='')\n        else:\n            print(0, end='')\n    print()", "import sys\n\ndef prin(a):\n    sys.stdout.write(str(a) + '\\n')\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef sol(s):\n    ans = list(s)\n    n = len(s)\n    for i in range(n):\n        if s[i] == '1':\n            ans[i] = '0'\n        elif i > 0 and s[i - 1] == '1' or (i < n - 1 and s[i + 1] == '1'):\n            ans[i] = '1'\n        else:\n            ans[i] == '0'\n    return ''.join(ans)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    s = sol(s)\n    k -= 1\n    if k == 0:\n        print(s)\n        continue\n    x = [sys.maxsize] * n\n    if s[0] == '1':\n        x[0] = 0\n    for i in range(1, n):\n        if s[i] == '1':\n            x[i] = 0\n        else:\n            x[i] = x[i - 1] + 1\n    y = [sys.maxsize] * n\n    if s[-1] == '1':\n        y[-1] = 0\n    for i in range(n - 2, -1, -1):\n        if s[i] == '1':\n            y[i] = 0\n        else:\n            y[i] = y[i + 1] + 1\n    ans = []\n    for i in range(n):\n        ans.append(min(x[i], y[i]))\n    w = []\n    for i in range(n):\n        if ans[i] > k:\n            w.append('0')\n        else:\n            diff = k - ans[i]\n            if diff % 2 == 0:\n                w.append('1')\n            else:\n                w.append('0')\n    print(''.join(w))", "I = lambda : list(map(int, input().split()))\n(t,) = I()\nfor _ in range(t):\n    (n, k) = I()\n    l = input().strip()\n    n = len(l)\n    z = l.count('0')\n    if z == 0 or z == n:\n        print('0' * n)\n    else:\n        k -= 1\n        s = list(l)\n        for i in range(n):\n            if l[i] == '1':\n                s[i] = '0'\n            elif i > 0 and l[i - 1] == '1':\n                s[i] = '1'\n            elif i < n - 1 and l[i + 1] == '1':\n                s[i] = '1'\n        l = ''.join(s)\n        an = ''\n        dis = [n + 1] * n\n        x = -1\n        for i in range(n):\n            if l[i] == '1':\n                x = i\n                dis[i] = 0\n            elif x != -1:\n                dis[i] = min(i - x, dis[i])\n        x = -1\n        for i in range(n - 1, -1, -1):\n            if l[i] == '1':\n                x = i\n                dis[i] = 0\n            elif x != -1:\n                dis[i] = min(x - i, dis[i])\n        for i in range(n):\n            if l[i] == '1':\n                an += str((k - 1) % 2)\n            else:\n                an += str((k - dis[i] + 1) % 2 if dis[i] <= k else 0)\n        print(an)"]