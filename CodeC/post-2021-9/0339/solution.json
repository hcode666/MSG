["def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\n\ndef main():\n    ones = s.count('1')\n    zeroes = s.count('0')\n    rand = s.count('?')\n    diff = abs(ones - zeroes)\n    added_ones = 0\n    added_zeroes = 0\n    if ones < zeroes:\n        added_ones = diff\n        rand -= diff\n    else:\n        added_zeroes = diff\n        rand -= diff\n    if rand > 0:\n        added_zeroes += rand // 2\n        added_ones += rand - rand // 2\n    ans = ''\n    for ele in s:\n        if ele == '?':\n            if added_ones > 0:\n                ans = ans + '1'\n                added_ones -= 1\n            else:\n                ans = ans + '0'\n        else:\n            ans = ans + ele\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    main()", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\n\ndef main():\n    ones = s.count('1')\n    zeroes = s.count('0')\n    rand = s.count('?')\n    diff = abs(ones - zeroes)\n    added_ones = 0\n    added_zeroes = 0\n    if ones < zeroes:\n        added_ones = diff\n        rand -= diff\n    else:\n        added_zeroes = diff\n        rand -= diff\n    if rand > 0:\n        added_zeroes += rand // 2\n        added_ones += rand - rand // 2\n    ans = ''\n    for ele in s:\n        if ele == '?':\n            if added_ones > 0:\n                ans = ans + '1'\n                added_ones -= 1\n            else:\n                ans = ans + '0'\n        else:\n            ans = ans + ele\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    main()", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\n\ndef main():\n    ones = s.count('1')\n    zeroes = s.count('0')\n    rand = s.count('?')\n    diff = abs(ones - zeroes)\n    added_ones = 0\n    added_zeroes = 0\n    if ones < zeroes:\n        added_ones = diff\n        rand -= diff\n    else:\n        added_zeroes = diff\n        rand -= diff\n    if rand > 0:\n        added_zeroes += rand // 2\n        added_ones += rand - rand // 2\n    ans = ''\n    for ele in s:\n        if ele == '?':\n            if added_ones > 0:\n                ans = ans + '1'\n                added_ones -= 1\n            else:\n                ans = ans + '0'\n        else:\n            ans = ans + ele\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    main()", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\n\ndef main():\n    ones = s.count('1')\n    zeroes = s.count('0')\n    rand = s.count('?')\n    diff = abs(ones - zeroes)\n    added_ones = 0\n    added_zeroes = 0\n    if ones < zeroes:\n        added_ones = diff\n        rand -= diff\n    else:\n        added_zeroes = diff\n        rand -= diff\n    if rand > 0:\n        added_zeroes += rand // 2\n        added_ones += rand - rand // 2\n    ans = ''\n    for ele in s:\n        if ele == '?':\n            if added_ones > 0:\n                ans = ans + '1'\n                added_ones -= 1\n            else:\n                ans = ans + '0'\n        else:\n            ans = ans + ele\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    main()", "def integer_list():\n    return list(map(int, input().split()))\n\ndef string_list():\n    return list(map(str, input().split()))\n\ndef hetro_list():\n    return list(input().split())\nimport math\nfrom collections import Counter\n\ndef main():\n    ones = s.count('1')\n    zeroes = s.count('0')\n    rand = s.count('?')\n    diff = abs(ones - zeroes)\n    added_ones = 0\n    added_zeroes = 0\n    if ones < zeroes:\n        added_ones = diff\n        rand -= diff\n    else:\n        added_zeroes = diff\n        rand -= diff\n    if rand > 0:\n        added_zeroes += rand // 2\n        added_ones += rand - rand // 2\n    ans = ''\n    for ele in s:\n        if ele == '?':\n            if added_ones > 0:\n                ans = ans + '1'\n                added_ones -= 1\n            else:\n                ans = ans + '0'\n        else:\n            ans = ans + ele\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    main()", "from distutils import extension\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n\nclass SegmentTree:\n\n    def __init__(self, arr):\n        self.narr = [-1]\n        narr = [-1]\n        for l in rg(1, 2 * len(arr) + 1 + 1):\n            self.narr.append(-1)\n        self.arr = arr\n\n    def buildTree(self, i, j, l):\n        if i == j:\n            self.narr[l] = self.arr[i]\n            return self.arr[i]\n        mid = (i + j) // 2\n        lt = self.buildTree(self.narr, self.arr, i, mid, 2 * l)\n        ri = self.buildTree(self.narr, self.arr, mid + 1, j, 2 * l + 1)\n        self.narr[l] = lt + ri\n        return lt + ri\n\n    def rangeUpdate(self, i, j, L, R, l, val):\n        mid = (i + j) // 2\n        if L <= i and j <= R:\n            self.narr[l] += val\n            return\n        if L <= i:\n            self.rangeUpdate(i, mid, L, R, 2 * l, val)\n        if mid + 1 <= R:\n            self.rangeUpdate(mid + 1, j, L, R, 2 * l + 1, val)\n\n    def rangeQuery(self, i, j, L, R, l):\n        if L <= i and j <= R:\n            return self.narr[l]\n        mid = (i + j) // 2\n        ans = 0\n        if L <= mid:\n            ans += self.rangeQuery(i, mid, L, R, 2 * l)\n        if mid + 1 <= R:\n            ans += self.rangeQuery(mid + 1, j, L, R, 2 * l + 1)\n        return ans\nmod = 1000000000 + 7\nfor _ in range(ii()):\n    n = ii()\n    s = ip()\n    ones = s.count('1')\n    zeros = s.count('0')\n    ques = s.count('?')\n    extones = 0\n    extzero = 0\n    if ones > zeros:\n        extzero = min(abs(ones - zeros), ques)\n        ques = ques - min(abs(ones - zeros), ques)\n    elif ones < zeros:\n        extones = min(abs(ones - zeros), ques)\n        ques = ques - min(abs(ones - zeros), ques)\n    if ques % 2 != 0:\n        extones = extones + 1\n    extones = extones + ques // 2\n    extzero = extzero + ques // 2\n    res = ''\n    for k in s:\n        if k == '?':\n            if extones > 0:\n                res = res + '1'\n                extones = extones - 1\n            else:\n                res = res + '0'\n        else:\n            res = res + k\n    print(res)"]