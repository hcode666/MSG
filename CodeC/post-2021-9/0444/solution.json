["def setBitNumber(n):\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n = n + 1\n    return n >> 1\n\ndef solve(n):\n    ans = 0\n    while n > 0:\n        if n & n + 1 == 0:\n            ans += n * (n - 1)\n            break\n        else:\n            k = setBitNumber(n)\n            ans += ((k << 2) - 2) * (n - k + 1)\n            n = -n + ((k << 1) - 2)\n    return ans\nfor _ in range(int(input())):\n    print(solve(int(input())))", "def setBitNumber(n):\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n = n + 1\n    return n >> 1\n\ndef solve(n):\n    ans = 0\n    while n > 0:\n        if n & n + 1 == 0:\n            ans += n * (n - 1)\n            break\n        else:\n            k = setBitNumber(n)\n            ans += ((k << 2) - 2) * (n - k + 1)\n            n = -n + ((k << 1) - 2)\n    return ans\nfor _ in range(int(input())):\n    print(solve(int(input())))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = n * (n + 1)\n    m = 1\n    while n > 0:\n        if n & 1:\n            k -= 2 * m\n        else:\n            break\n        m = m * 2\n        n = n >> 1\n    print(k)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = n * (n + 1)\n    m = 1\n    while n > 0:\n        if n & 1:\n            k -= 2 * m\n        else:\n            break\n        m = m * 2\n        n = n >> 1\n    print(k)", "for i in range(int(input())):\n    n = int(input())\n    a = n * (n + 1)\n    p = 1\n    while n > 0:\n        if n & 1:\n            a -= 2 * p\n        else:\n            break\n        p *= 2\n        n = n >> 1\n    print(a)", "from math import log2\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef solve(N):\n    if N == 1 or N == 0:\n        return 0\n    elif N == 2 or N == 3:\n        return 6\n    elif N == 4:\n        return 20\n    if log2(N + 1) == int(log2(N + 1)):\n        return solve(N - 1)\n    pw = 2 ** int(log2(N))\n    distance = N - pw + 1\n    return 2 * distance * (2 * pw - 1) + solve(N - 2 * distance)\nfor t in range(int(input())):\n    N = int(input())\n    print(solve(N))", "for i in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        a = bin(n)[2:]\n        a = a[::-1]\n        b = 0\n        p = 1\n        for j in a:\n            if j == '0':\n                b += p\n            p *= 2\n        if b == 0:\n            n -= 1\n            continue\n        ele = n - b + 1\n        ans += ele * (n ^ b)\n        n = b - 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = [1]\n    while l[-1] <= n:\n        l.append(l[-1] * 2)\n    l.pop()\n    ans = n * (n + 1)\n    for i in l:\n        cnt = n - (i - 1)\n        temp = cnt // i\n        if temp % 2:\n            ext = i\n        else:\n            ext = cnt % i\n        cnt = temp // 2 * i + ext\n        if cnt > n - cnt:\n            ans = ans - 2 * i\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        a = bin(n)[2:]\n        a = a[::-1]\n        b = 0\n        p = 1\n        for j in a:\n            if j == '0':\n                b += p\n            p *= 2\n        if b == 0:\n            n -= 1\n            continue\n        ele = n - b + 1\n        ans += ele * (n ^ b)\n        n = b - 1\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    final_ans = 0\n    while n > 0:\n        hpo2 = int(math.log(n, 2))\n        ans = 2 ** (hpo2 + 1) - 1\n        if n == ans:\n            n = n - 1\n        else:\n            mf = (n - 2 ** hpo2 + 1) * 2\n            final_ans = final_ans + ans * mf\n            n = n - mf\n    print(final_ans)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    n = int(input())\n    power = []\n    for i in range(32):\n        power.append((1 << i) - 1)\n    ans = 0\n    while n > 0:\n        if n & n + 1 == 0:\n            ans += n * (n - 1)\n            break\n        else:\n            for i in range(1, 32):\n                if n > power[i] and n < power[i + 1]:\n                    ans += 2 * (n - power[i]) * power[i + 1]\n                    n = -n + 2 * power[i]\n                    break\n    print(ans)", "for _ in range(int(input())):\n\n    def check2(n):\n        if n and (not n & n - 1):\n            return True\n        return False\n\n    def next2(n):\n        if n and (not n & n - 1):\n            return n\n        p = 1\n        while p < n:\n            p <<= 1\n        return p\n\n    def ans(x):\n        if x == 0:\n            return 0\n        elif check2(x) and x != 1:\n            return x * (x + 1)\n        elif check2(x + 1):\n            return x * (x - 1)\n        else:\n            p = next2(x) - 1\n            val = x * (x + 1) - (p - x) * (p - x - 1)\n            val += ans(p - x - 1)\n            return val\n    x = int(input())\n    print(ans(x))", "test = int(input())\nfor z in range(0, test):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    val = 1\n    while n > 0:\n        d = n % 2\n        n = n // 2\n        if d == 0:\n            break\n        val *= 2\n    val -= 1\n    sum -= val\n    print(sum * 2)", "from math import log2\n\ndef solver(N):\n    ans = 0\n    while N > 1:\n        hsb = int(log2(N))\n        max_value = 2 ** (hsb + 1) - 1\n        min_value = max_value ^ N\n        if min_value == 0:\n            N -= 1\n        else:\n            ans += max_value * (N - min_value + 1)\n            N = min_value - 1\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    solver(n)", "from math import log2\n\ndef solver(n):\n    ans = 0\n    while n > 1:\n        hsb = int(log2(n))\n        max_value = 2 ** (hsb + 1) - 1\n        if max_value == n:\n            n -= 1\n        min_value = max_value ^ n\n        ans += max_value * (n - min_value + 1)\n        n = min_value - 1\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    solver(n)", "from math import log2\n\ndef solver(n):\n    ans = 0\n    while n > 1:\n        hsb = int(log2(n))\n        max_value = 0\n        for i in range(hsb + 1):\n            max_value += 1 << i\n        if max_value == n:\n            n -= 1\n        min_value = max_value ^ n\n        ans += max_value * (n - min_value + 1)\n        n = min_value - 1\n    print(ans)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    solver(n)", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    hsd = 31\n    maxsum = 0\n    while n > 1:\n        while hsd >= 0 and 1 << hsd & n == 0:\n            hsd -= 1\n        maxval = 0\n        for i in range(hsd + 1):\n            maxval += 1 << i\n        if maxval == n:\n            n = n - 1\n            continue\n        lstval = maxval - n\n        maxsum += maxval * (n - lstval + 1)\n        n = lstval - 1\n    print(maxsum)", "import math\nt = int(input())\n\ndef f(n):\n    var = int(math.log(n, 2))\n    xorv = 2 ** (var + 1) - 1\n    return xorv\nwhile t:\n    s = 0\n    n = int(input())\n    if n == 1:\n        print(0)\n        t -= 1\n        continue\n    elif n & n - 1 == 0:\n        print(n * (n + 1))\n        t -= 1\n        continue\n    elif n & n + 1 == 0:\n        print(n * (n - 1))\n        t -= 1\n        continue\n    i = n\n    while i > 1:\n        if i & i + 1 == 0:\n            i -= 1\n        pv = i\n        i = (i ^ f(i)) - 1\n        s += (pv - i) * f(pv)\n    print(s)\n    t -= 1", "import bisect\n\ndef fun(n):\n    if n == 0 or n == -1 or n == 1:\n        return 0\n    k = 2 ** bisect.bisect_left(a, n) - n - 2\n    if k == -1:\n        return fun(n - 1)\n    if k < 0:\n        k = 0\n    return (n + k + 1) * (n - k) + fun(k)\na = []\ni = 0\nn = 1\nwhile n < 1000000000:\n    a.append(n)\n    n = n * 2\nfor t in range(int(input())):\n    i = int(input())\n    print(fun(i))", "case = int(input())\nl = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]\nfor r in range(case):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    count = 0\n    i = 0\n    while n >= l[i]:\n        i += 1\n    i -= 1\n    while n > 0:\n        if n == l[i + 1] - 1:\n            n -= 1\n        count += (n - l[i] + 1) * 2 * (l[i + 1] - 1)\n        n = n - (n - l[i] + 1) * 2\n        while n >= l[i]:\n            i += 1\n        i -= 1\n    print(count)", "for i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    s = 0\n    t = 1\n    while t <= n:\n        t = t * 2\n    if n + 1 == t:\n        print((n - 1) * (t - 1))\n        continue\n    t = t // 2\n    while n > 1:\n        s += (2 * t - 1) * 2 * (n - t + 1)\n        n = t - (n - t + 1) - 1\n        t = 1\n        while t <= n:\n            t = t * 2\n        if n + 1 == t:\n            s += (n - 1) * (t - 1)\n            n = 0\n        t = t // 2\n    print(s)", "for i in range(int(input())):\n    n = int(input())\n    a = n * (n + 1)\n    p = 1\n    while n > 0:\n        if n & 1:\n            a -= 2 * p\n        else:\n            break\n        p *= 2\n        n = n >> 1\n    print(a)", "for i in range(int(input())):\n    n = int(input())\n    ans = 0\n    while 1:\n        if n <= 1:\n            break\n        l = len(bin(n)[2:])\n        hp2 = 2 ** l - 1\n        rem = n % 2 ** (l - 1)\n        n = n - (rem + 1) * 2\n        if n < 0:\n            rem -= 1\n        ans += (rem + 1) * 2 * hp2\n    print(ans)", "import math\nfor i in range(int(input())):\n    x = int(input())\n\n    def Log2(x):\n        if x == 0:\n            return false\n        return math.log10(x) / math.log10(2)\n\n    def isPowerOfTwo(n):\n        return math.ceil(Log2(n)) == math.floor(Log2(n))\n\n    def nextPowerOf2(n):\n        p = 1\n        if n and (not n & n - 1):\n            return n\n        while p < n:\n            p <<= 1\n        return p\n\n    def pow(x):\n        if x == 0:\n            return 0\n        if isPowerOfTwo(x) == True and x != 1:\n            return x * (x + 1)\n        elif isPowerOfTwo(x + 1) == True:\n            return x * (x - 1)\n        else:\n            pz = nextPowerOf2(x) - 1\n            ans = x * (x + 1) - (pz - x - 1) * (pz - x)\n            ans += pow(pz - x - 1)\n            return ans\n    print(pow(x))", "li = [2 ** x for x in range(31)]\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    val = 0\n    x = 30\n    while x >= 0 and n > 1:\n        if li[x] - 1 == n:\n            n -= 1\n        if li[x] <= n:\n            t = (n - li[x] + 1) * 2\n            val = val + (2 * li[x] - 1) * t\n            n = n - t\n        x -= 1\n    print(val)", "y = int(input())\nfor _ in range(y):\n    N = int(input())\n    s = 0\n    i = N\n    d = {}\n    while i > 0:\n        bit = format(i, 'b')\n        l = len(bit)\n        for j in range(l):\n            if bit[j] == '0':\n                c = ['1' for x in range(l)]\n                break\n        else:\n            c = ['1' for x in range(l + 1)]\n        c = ''.join(c)\n        p = int(c, 2)\n        t = i ^ p\n        if t > N:\n            i -= 1\n            continue\n        if t in d:\n            i -= 1\n            continue\n        else:\n            d[t] = 1\n        s += (i - t + 1) * p\n        i = t - 1\n    print(s)", "def xorsum(n):\n    (num, count) = (0, 0)\n    while n > 0:\n        if n % 2 == 0:\n            num += 1 << count\n        n //= 2\n        count += 1\n    return num\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        a = xorsum(n)\n        b = n\n        if b & b + 1 == 0:\n            b -= 1\n        v = b * (b + 1) // 2 - a * (a - 1) // 2\n        ans += v * 2\n        n = a - 1\n    print(int(ans))", "tests = int(input())\nfor t in range(tests):\n    n = int(input())\n    m = n + 1 & -n - 1\n    print(n * (n + 1) - 2 * (m - 1))", "for _ in range(int(input())):\n\n    def check2(n):\n        if n and (not n & n - 1):\n            return True\n        return False\n\n    def next2(n):\n        if n and (not n & n - 1):\n            return n\n        p = 1\n        while p < n:\n            p <<= 1\n        return p\n\n    def ans(x):\n        if x == 0:\n            return 0\n        elif check2(x) and x != 1:\n            return x * (x + 1)\n        elif check2(x + 1):\n            return x * (x - 1)\n        else:\n            p = next2(x) - 1\n            val = x * (x + 1) - (p - x) * (p - x - 1)\n            val += ans(p - x - 1)\n            return val\n    x = int(input())\n    print(ans(x))", "T = int(input())\npower_2 = []\ncur = 2\nwhile cur < 2 * 10 ** 9:\n    power_2.append(cur)\n    cur *= 2\nfor i in range(T):\n    N = int(input())\n    answer = 0\n    pnt = 0\n    while N >= power_2[pnt]:\n        pnt += 1\n    while pnt > 0:\n        if (power_2[pnt] - 1) // 2 > N:\n            pnt -= 1\n            continue\n        pair = N - power_2[pnt - 1] + 1\n        if N == power_2[pnt] - 1:\n            pair -= 1\n        answer += (power_2[pnt] - 1) * pair * 2\n        N = power_2[pnt] - 1 - N - 1\n        pnt -= 1\n    print(answer)", "from math import log2, ceil\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mx = 2 ** (int(log2(n)) + 1) - 1\n    if mx - n <= 1:\n        print(mx * (mx - 1))\n    else:\n        ans = 0\n        while n > 1:\n            mx = 2 ** (int(log2(n)) + 1) - 1\n            mul = min(n - (mx - n) + 1, n if n % 2 == 0 else n - 1)\n            ans += mx * mul\n            n = mx - n - 1\n        print(ans)", "def inversion(nu):\n    nus = str(bin(nu))[2:]\n    st = ''\n    for x in nus:\n        if x == '0':\n            st += '1'\n        else:\n            st += '0'\n    return int(st, 2)\nfor tc in range(int(input())):\n    n = int(input())\n    res = 0\n    num = n\n    while num > 0:\n        inv = inversion(num)\n        if 1 <= inv <= n:\n            req = (num - inv + 1) * (num ^ inv)\n            res += req\n            num = inv - 1\n        else:\n            num -= 1\n    print(res)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        if n % 2 == 0:\n            print(n ** 2 + n)\n        elif n % 4 == 3:\n            b = bin(n).replace('0b', '')\n            b = list(b)\n            res = 0\n            while b and b[-1] == '1':\n                b.pop()\n                res += 1\n            print(n ** 2 + n - int('1' * res, 2) * 2)\n        else:\n            print(n ** 2 + n - 2)\nmain()", "from collections import defaultdict, deque\nfrom typing import Counter\nimport math\nimport sys\nfrom string import ascii_lowercase\n\ndef readInt():\n    x = int(sys.stdin.readline().rstrip())\n    return x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef getcount(n, k):\n    res = n >> k + 1 << k\n    if n >> k & 1:\n        res += n & (1 << k) - 1\n    return res\n\ndef solve():\n    n = readInt()\n    ans = 0\n    for i in range(30):\n        k = getcount(n + 1, i)\n        ans += min(k, n - k) * (1 << i)\n    print(ans * 2)\n\ndef main():\n    t = 1\n    t = readInt()\n    for _ in range(t):\n        solve()\nmain()", "def get_pw_bot(x):\n    sum = 1\n    while sum <= x:\n        sum *= 2\n    sum //= 2\n    return sum\n\ndef solve():\n    n = int(input())\n    ans = 0\n    while n > 0:\n        if n & n + 1 == 0:\n            n -= 1\n            continue\n        bot_pw = get_pw_bot(n)\n        cnt = n - bot_pw + 1\n        val = bot_pw * 2 - 1\n        ans += 2 * cnt * val\n        n -= 2 * cnt\n    print(ans)\ntst = int(input())\nfor tt in range(tst):\n    solve()", "def solve(num, tmp=0, tot=0):\n    while num != 0:\n        if num % 2 == 0:\n            tmp += 1 << tot\n        num //= 2\n        tot += 1\n        if num <= 0:\n            break\n    return tmp\nfor tcs in range(int(input())):\n    num = int(input())\n    res = 0\n    while num > 0:\n        a = solve(num)\n        b = num\n        if b & b + 1 == 0:\n            b -= 1\n        num = (b * (b + 1) >> 1) - (a * (a - 1) >> 1)\n        res += num << 1\n        num = a - 1\n    print(res)", "from collections import defaultdict\nt = int(input())\nvals = defaultdict(lambda : -1)\n\ndef solve(n):\n    if n <= 1:\n        return 0\n    if vals[n] != -1:\n        return vals[n]\n    a = bin(n)[2:]\n    b = ''\n    for x in a:\n        if x == '1':\n            b += '0'\n        else:\n            b += '1'\n    a = int(a, 2)\n    b = int(b, 2)\n    if b == 0:\n        b = 1\n        a -= 1\n    vals[n] = (a ^ b) * (a - b + 1) + solve(b - 1)\n    return vals[n]\nwhile t > 0:\n    n = int(input())\n    print(solve(n))\n    t -= 1", "from collections import defaultdict\nt = int(input())\nvals = defaultdict(lambda : -1)\n\ndef solve(n):\n    if n <= 1:\n        return 0\n    if vals[n] != -1:\n        return vals[n]\n    a = bin(n)[2:]\n    b = ''\n    for x in a:\n        if x == '1':\n            b += '0'\n        else:\n            b += '1'\n    a = int(a, 2)\n    b = int(b, 2)\n    if b == 0:\n        b = 1\n        a -= 1\n    vals[n] = (a ^ b) * (a - b + 1) + solve(b - 1)\n    return vals[n]\nwhile t > 0:\n    n = int(input())\n    print(solve(n))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    pre = n * (n + 1)\n    i = 1\n    while n:\n        if n % 2:\n            pre -= 1 << i\n        else:\n            break\n        n //= 2\n        i += 1\n    print(pre)", "from math import log\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    P1 = []\n    ans = 0\n    i = N\n    while i > 0:\n        x = 2 ** (int(log(i, 2)) + 1) - 1\n        if x == i:\n            i -= 1\n        else:\n            ans += x * (2 * i - x + 1)\n            i = x - i - 1\n            continue\n    print(ans)", "import math\nimport bisect\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\nINF = 10 ** 20\nmod = 1000000007\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef process(N):\n    if not N % 2:\n        return N * (N + 1)\n    else:\n        ans = N * (N + 1)\n        temp = N ^ N + 1\n        return ans - (temp ^ 1)\n\ndef main():\n    for _ in range(int(input())):\n        N = int(input())\n        print(process(N))\nmain()", "test_cases = int(input())\n\ndef nextPowerOf2(n):\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n    return n\n\ndef dum(n, sums):\n    if n == 0:\n        return sums\n    elif n == 1:\n        return sums\n    elif n == 2:\n        sums += 6\n        return sums\n    val = nextPowerOf2(n)\n    if val - n >= 2:\n        sums += (val - 1) * (val - 2 - (val - 2 - n) * 2)\n    else:\n        if val - n == 0:\n            sums += (val + val - 1) * 2\n        elif val - n == 1:\n            sums += 0\n        n = val - 2\n        sums += (val - 1) * (val - 2 - (val - 2 - n) * 2)\n    p1 = val - 2 - n\n    return dum(p1, sums)\nfor lol in range(test_cases):\n    sums = 0\n    n = int(input())\n    print(dum(n, sums))", "import math\nfor i in range(int(input())):\n    x = int(input())\n\n    def Log2(x):\n        if x == 0:\n            return false\n        return math.log10(x) / math.log10(2)\n\n    def isPowerOfTwo(n):\n        return math.ceil(Log2(n)) == math.floor(Log2(n))\n\n    def nextPowerOf2(n):\n        p = 1\n        if n and (not n & n - 1):\n            return n\n        while p < n:\n            p <<= 1\n        return p\n\n    def pow(x):\n        if x == 0:\n            return 0\n        if isPowerOfTwo(x) == True and x != 1:\n            return x * (x + 1)\n        elif isPowerOfTwo(x + 1) == True:\n            return x * (x - 1)\n        else:\n            pz = nextPowerOf2(x) - 1\n            ans = x * (x + 1) - (pz - x - 1) * (pz - x)\n            ans += pow(pz - x - 1)\n            return ans\n    print(pow(x))", "import math\nfor i in range(int(input())):\n    x = int(input())\n\n    def Log2(x):\n        if x == 0:\n            return false\n        return math.log10(x) / math.log10(2)\n\n    def isPowerOfTwo(n):\n        return math.ceil(Log2(n)) == math.floor(Log2(n))\n\n    def nextPowerOf2(n):\n        p = 1\n        if n and (not n & n - 1):\n            return n\n        while p < n:\n            p <<= 1\n        return p\n\n    def pow(x):\n        if x == 0:\n            return 0\n        if isPowerOfTwo(x) == True and x != 1:\n            return x * (x + 1)\n        elif isPowerOfTwo(x + 1) == True:\n            return x * (x - 1)\n        else:\n            pz = nextPowerOf2(x) - 1\n            ans = x * (x + 1) - (pz - x - 1) * (pz - x)\n            ans += pow(pz - x - 1)\n            return ans\n    print(pow(x))", "from math import log2\n\ndef solve(num):\n    if num == 1:\n        return 0\n    if num == 2:\n        return 6\n    if num == 3:\n        return 6\n    finalAnswer = 0\n    numBin = bin(num)[2:]\n    negBin = ''\n    finalSum = 0\n    for i in numBin:\n        finalSum += 1\n        if i == '1':\n            negBin += '0'\n        else:\n            negBin += '1'\n    finalSum = 2 ** (finalSum - 1) - 1\n    numNegBin = int(negBin, 2)\n    if numNegBin == 0:\n        finalAnswer = -2 * num\n    if numNegBin > 1:\n        finalAnswer += solve(numNegBin - 1)\n    xor = num ^ numNegBin\n    finalAnswer += 2 * (num - finalSum) * xor\n    return finalAnswer\n    pass\nfor _ in range(int(input())):\n    num = int(input())\n    print(solve(num))", "from sys import stdin\nfrom collections import defaultdict as dd, deque as dq\nfrom heapq import heappush as hpush, heappop as hpop\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom random import randint\nfrom math import sqrt, ceil, floor, log2\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef text():\n    return stdin.readline().rstrip()\n\ndef num():\n    return int(text())\n\ndef mp(dt):\n    return map(dt, stdin.readline().split())\n\ndef array(dt):\n    return list(mp(dt))\n\ndef flipp(num):\n    x = int(log2(num)) + 1\n    for i in range(x):\n        num = num ^ 1 << i\n    return num\nt = num()\nwhile t > 0:\n    n = num()\n    ans = 0\n    while n >= 1:\n        flipper = flipp(n)\n        curr = n\n        if curr & curr + 1 == 0:\n            curr -= 1\n        ans += 2 * (curr * (curr + 1) // 2 - flipper * (flipper - 1) // 2)\n        n = flipper - 1\n    print(ans)\n    t -= 1", "T = int(input())\npower_2 = []\ncur = 2\nwhile cur < 2 * 10 ** 9:\n    power_2.append(cur)\n    cur *= 2\nfor i in range(T):\n    N = int(input())\n    answer = 0\n    pnt = 0\n    while N >= power_2[pnt]:\n        pnt += 1\n    while pnt > 0:\n        if (power_2[pnt] - 1) // 2 > N:\n            pnt -= 1\n            continue\n        pair = N - power_2[pnt - 1] + 1\n        if N == power_2[pnt] - 1:\n            pair -= 1\n        answer += (power_2[pnt] - 1) * pair * 2\n        N = power_2[pnt] - 1 - N - 1\n        pnt -= 1\n    print(answer)", "def find(n):\n    no = 0\n    c = 0\n    while n > 0:\n        if n % 2 == 0:\n            no = no + (1 << c)\n        n = n // 2\n        c = c + 1\n        if n <= 0:\n            break\n    return no\nt = int(input())\nfor _ in range(t):\n    num = int(input())\n    res = 0\n    while num > 0:\n        x = find(num)\n        y = num\n        if y & y + 1 == 0:\n            y = y - 1\n        temp = y * (y + 1) // 2 - x * (x - 1) // 2\n        res = res + temp + temp\n        num = x - 1\n    print(res)", "pow2 = [1]\nfor i in range(31):\n    pow2.append(2 * pow2[-1])\nfor i in range(len(pow2)):\n    pow2[i] -= 1\nN = len(pow2)\n\ndef AbhiSolveKiya(n):\n    if n == 1:\n        return 0\n    ans = 0\n    while n > 0:\n        j = 0\n        while j < N and n > pow2[j]:\n            j += 1\n        p = pow2[j]\n        xorr = p ^ n\n        if xorr == 0:\n            n -= 1\n        else:\n            ans += p * (n - xorr + 1)\n            n = xorr - 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    print(AbhiSolveKiya(n))", "def solve(n):\n    (t, c) = (0, 0)\n    while n:\n        if n % 2 == 0:\n            t += 1 << c\n        n = n // 2\n        c += 1\n        if n < 0:\n            break\n    return t\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        t = solve(n)\n        temp = n\n        if temp & temp + 1 == 0:\n            temp -= 1\n        val = temp * (temp + 1) // 2 - t * (t - 1) // 2\n        ans += val * 2\n        n = t - 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    power = 1\n    total = 0\n    while n > 1:\n        if power * 2 <= n:\n            power *= 2\n            continue\n        if n == power * 2 - 1:\n            total += (power - 1) * 2 * (power * 2 - 1)\n            break\n        total += (n - (power - 1)) * 2 * (power * 2 - 1)\n        n = power - (n - (power - 2))\n        power = 1\n    print(total)", "def find(n):\n    no = 0\n    c = 0\n    while n > 0:\n        if n % 2 == 0:\n            no = no + (1 << c)\n        n = n // 2\n        c = c + 1\n        if n <= 0:\n            break\n    return no\nt = int(input())\nfor _ in range(t):\n    num = int(input())\n    res = 0\n    while num > 0:\n        x = find(num)\n        y = num\n        if y & y + 1 == 0:\n            y = y - 1\n        temp = y * (y + 1) // 2 - x * (x - 1) // 2\n        res = res + temp + temp\n        num = x - 1\n    print(res)", "import math\n\ndef solve(i):\n    if i == 1:\n        print(0)\n        return\n    curr = i\n    summ = 0\n    val = int(math.log2(curr)) + 1\n    while val > 0:\n        val = int(math.log2(curr)) + 1\n        s = 2 ** val - 1\n        t = s - curr\n        if t == 0:\n            curr -= 1\n            if curr <= 1:\n                break\n            continue\n        summ += (curr - t + 1) // 2 * 2 * s\n        curr = t - 1\n        if curr <= 1:\n            break\n    print(int(summ))\nt = int(input())\nfor i in range(t):\n    v = int(input())\n    solve(v)", "def invert(N):\n    num = shift = 0\n    while N:\n        if N ^ 1 == N + 1:\n            num += 1 << shift\n        N = N // 2\n        shift += 1\n        if N <= 0:\n            break\n    return num\nfor _ in range(int(input())):\n    N = int(input())\n    ans = 0\n    while N > 0:\n        new = invert(N)\n        curr = N\n        if new & curr + 1 == 0:\n            curr -= 1\n        cal = curr * (curr + 1) // 2 - new * (new - 1) // 2\n        ans += cal * 2\n        N = new - 1\n    print(ans)", "def func(N):\n    n = 0\n    cnt = 0\n    while N:\n        if N % 2 == 0:\n            n += 1 << cnt\n        N = N // 2\n        cnt += 1\n        if N <= 0:\n            break\n    return n\nfor _ in range(int(input())):\n    N = int(input())\n    ans = 0\n    while N > 0:\n        a = func(N)\n        b = N\n        if b & b + 1 == 0:\n            b -= 1\n        val = b * (b + 1) // 2 - a * (a - 1) // 2\n        ans += val * 2\n        N = a - 1\n    print(ans)", "def h(n):\n    no = 0\n    cnt = 0\n    while n:\n        if n % 2 == 0:\n            no += 1 << cnt\n        n //= 2\n        cnt += 1\n        if n <= 0:\n            break\n    return no\nt = int(input())\nwhile t:\n    n = int(input())\n    ans = 0\n    while n > 0:\n        a = h(n)\n        b = n\n        if b & b + 1 == 0:\n            b -= 1\n        val = b * (b + 1) // 2 - a * (a - 1) // 2\n        ans += val * 2\n        n = a - 1\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    ans = 0\n\n    def met1(x):\n        (a, c) = (0, 0)\n        while x:\n            if x % 2 == 0:\n                a += 1 << c\n            x = x // 2\n            c += 1\n            if x <= 0:\n                break\n        return a\n    while n > 0:\n        b = met1(n)\n        c = n\n        if c & c + 1 == 0:\n            c = c - 1\n        val = c * (c + 1) // 2 - b * (b - 1) // 2\n        ans += val * 2\n        n = b - 1\n    print(ans)", "from collections import defaultdict\nimport math\n\ndef ok(n):\n    (num, count) = (0, 0)\n    while n > 0:\n        if n % 2 == 0:\n            num += 1 << count\n        n = n // 2\n        count += 1\n    return num\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        a = ok(n)\n        b = n\n        if b & b + 1 == 0:\n            b -= 1\n        c = b * (b + 1) // 2 - a * (a - 1) // 2\n        ans += c * 2\n        n = a - 1\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline().strip()\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    if n % 4 == 0 or n % 4 == 2:\n        print(n * (n + 1))\n    elif n % 4 == 1:\n        print(n * (n + 1) - 2)\n    else:\n        N = list(bin(n)[2:])\n        res = 0\n        while N and N[-1] == '1':\n            N.pop()\n            res += 1\n        print(n * (n + 1) - int('1' * res, 2) * 2)", "def func(n):\n    a = 0\n    cnt = 0\n    while n:\n        if not n % 2:\n            a += 1 << cnt\n        n //= 2\n        cnt += 1\n        if n <= 0:\n            break\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        x = func(n)\n        y = n\n        if not y & y + 1:\n            y -= 1\n        v = y * (y + 1) // 2 - x * (x - 1) // 2\n        ans += v * 2\n        n = x - 1\n    print(ans)", "def conj(n):\n    o = n\n    x = 0\n    while n > 0:\n        x += 1\n        n >>= 1\n    m = (1 << x) - 1\n    return o ^ m\n\ndef func(n):\n    if n <= 1:\n        return 0\n    c = conj(n)\n    if c == 0:\n        return func(n - 1)\n    return (n + c) * (n - c + 1) + func(c - 1)\nfor t in range(int(input())):\n    n = int(input())\n    print(func(n))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        a = int(math.log(n, 2)) + 1\n        v = 2 ** a - 1\n        num = n - (2 ** (a - 1) - 1)\n        gp = min(num, n // 2)\n        ans += gp * 2 * v\n        n -= 2 * gp\n    print(ans)", "def hs(n):\n    q = 0\n    p = 0\n    while n:\n        if n % 2 == 0:\n            q += 1 << p\n        n = n // 2\n        p += 1\n        if n <= 0:\n            break\n    return q\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        a = hs(n)\n        b = n\n        if b & b + 1 == 0:\n            b -= 1\n        v = b * (b + 1) // 2 - a * (a - 1) // 2\n        ans += v * 2\n        n = a - 1\n    print(ans)", "def func(n):\n    c = 0\n    pow = 1\n    while n != 0:\n        c += pow\n        pow *= 2\n        n = n >> 1\n    return c\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        x = func(n)\n        if x - n == 0:\n            n -= 1\n            continue\n        diff = n - (x - n) + 1\n        ans += x * diff\n        n = x - n - 1\n    print(ans)", "from sys import stdin, stdout, maxsize\nfrom math import sqrt, log, factorial as ft, gcd, ceil, floor\nfrom collections import defaultdict\nii = lambda : int(input())\ndi = lambda : defaultdict(lambda : 0)\ndl = lambda : defaultdict(lambda : list())\nli = lambda : list(map(int, stdin.readline().strip().split()))\nmi = lambda : map(int, stdin.readline().strip().split())\nsi = lambda : stdin.readline().strip()\np = 2\nl1 = []\nl2 = [0]\nfor i in range(35):\n    l1.append(p - 1)\n    l2.append(p)\n    p += p\nl2.pop()\nfor _ in range(ii()):\n    n = ii()\n    ans = 0\n    while n > 1:\n        ix = 0\n        for i in range(34, -1, -1):\n            if l2[i] <= n:\n                ix = i\n                break\n        diff = n - l2[ix] + 1\n        if 2 * diff > n:\n            diff -= 1\n        ans += 2 * diff * l1[ix]\n        n -= 2 * diff\n    print(ans)", "t = int(input())\nfor d in range(t):\n    n = int(input())\n    num = 0\n    maxi = 2147483647\n    i = 1\n    while i < maxi:\n        if i > n:\n            num = i\n            break\n        i *= 2\n    ans = 0\n    while n > 1:\n        if n == num - 1:\n            n -= 1\n        mx = num - 1\n        start = mx ^ n\n        ans += mx * (n - start + 1)\n        n = start - 1\n        i = 1\n        while i < maxi:\n            if i > n:\n                num = i\n                break\n            i *= 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    power = 1\n    for i in range(32):\n        arr.append(power)\n        power *= 2\n\n    def low(n, arr):\n        for i in range(32):\n            if arr[i] > n:\n                return i\n        return -1\n\n    def recurse(n):\n        if n <= 1:\n            return 0\n        power = low(n, arr)\n        power -= 1\n        rem = 2 ** power - 1\n        more = n - rem\n        if more > rem:\n            more = rem\n        rem -= more\n        summ = 2 * more * (2 ** (power + 1) - 1)\n        return summ + recurse(rem)\n    print(recurse(n))", "def next_2(n):\n    if n < 2:\n        return 0\n    x = 1\n    while n // x != 0:\n        x *= 2\n    return x\n\ndef fn(n):\n    power = next_2(n)\n    if power == 0:\n        return 0\n    multiplier = power - 1\n    if n == multiplier:\n        return multiplier * (multiplier - 1)\n    remainder = multiplier - 1 - n\n    points = n - remainder\n    return multiplier * points + fn(remainder)\nfor _ in range(int(input())):\n    n = int(input())\n    print(fn(n))", "def f(n):\n    i = 1\n    while 2 * i <= n:\n        i = 2 * i\n    return i\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        x = f(n)\n        if x == n:\n            ans += (2 * x - 1) * 2 + (x - 1) * (n - 2)\n            n = 0\n            continue\n        ans += min(x - 1, n - x + 1) * 2 * (x * 2 - 1)\n        n -= min(x - 1, n - x + 1) * 2\n    print(ans)", "def solve(n):\n    c = 0\n    while n > 0:\n        a = bin(n)\n        a = a[2:]\n        s = ''\n        for i in a:\n            if i == '1':\n                s = s + '0'\n            else:\n                s = s + '1'\n        s = int(s, 2)\n        if s > 0:\n            k = n - s + 1\n            c = c + k * (n ^ s)\n            n = s - 1\n        else:\n            n = n - 1\n    print(c)\nt = int(input())\nfor test in range(t):\n    num = int(input())\n    solve(num)", "def solve(n):\n    c = 0\n    while n > 0:\n        a = bin(n)\n        a = a[2:]\n        s = ''\n        for i in a:\n            if i == '1':\n                s = s + '0'\n            else:\n                s = s + '1'\n        s = int(s, 2)\n        if s > 0:\n            k = n - s + 1\n            c = c + k * (n ^ s)\n            n = s - 1\n        else:\n            n = n - 1\n    print(c)\nt = int(input())\nfor test in range(t):\n    num = int(input())\n    solve(num)", "def sol():\n    n = int(input())\n    c = 0\n    while n > 0:\n        a = bin(n)\n        a = a[2:]\n        s = ''\n        for i in a:\n            if i == '1':\n                s = s + '0'\n            else:\n                s = s + '1'\n        s = int(s, 2)\n        if s > 0:\n            k = n - s + 1\n            c = c + k * (n ^ s)\n            n = s - 1\n        else:\n            n = n - 1\n    print(c)\nt = int(input())\nfor x in range(t):\n    sol()", "def solve(n):\n    c = 0\n    while n > 0:\n        a = bin(n)\n        a = a[2:]\n        s = ''\n        for i in a:\n            if i == '1':\n                s = s + '0'\n            else:\n                s = s + '1'\n        s = int(s, 2)\n        if s > 0:\n            k = n - s + 1\n            c = c + k * (n ^ s)\n            n = s - 1\n        else:\n            n = n - 1\n    print(c)\nt = int(input())\nfor test in range(t):\n    num = int(input())\n    solve(num)", "import math\n\ndef setBitNumber(n):\n    return 1 << int(math.log2(n))\nfor _ in range(int(input())):\n    n = int(input())\n    temp = 0\n    while n > 0:\n        c = n + 1\n        if c & c - 1 == 0:\n            n -= 1\n        if n == 0:\n            break\n        x = setBitNumber(n)\n        a = n - x + 1\n        temp += a * 2 * (x ^ x - 1)\n        n -= 2 * a\n    print(temp)", "meme = {1: 0}\n\ndef cal(n):\n    if n in meme:\n        return meme[n]\n    nn = n\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 2\n    if nn == 2 ** (count - 1):\n        res = nn * (nn + 1)\n    elif nn == 2 ** count - 1 or nn == 2 ** count - 2:\n        res = (2 ** count - 1) * (2 ** count - 2)\n    else:\n        rmd = 2 ** count - 1 - nn\n        m = nn - rmd + 1\n        res = m * (2 ** count - 1) + cal(rmd - 1)\n    meme[nn] = res\n    return res\nt = int(input())\nfor ti in range(t):\n    n = int(input())\n    print(cal(n))", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    c = 0\n    while n > 0:\n        a = bin(n)\n        a = a[2:]\n        s = ''\n        for i in a:\n            if i == '1':\n                s = s + '0'\n            else:\n                s = s + '1'\n        s = int(s, 2)\n        if s > 0:\n            k = n - s + 1\n            c = c + k * (n ^ s)\n            n = s - 1\n        else:\n            n = n - 1\n    print(c)", "import sys\nfrom math import sqrt, gcd\nfrom collections import deque, Counter, OrderedDict\nsys.setrecursionlimit(10 ** 8)\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    ans = 0\n    while n > 1:\n        k = 1\n        while k * 2 <= n:\n            k *= 2\n        if k == n:\n            ans += (2 * k - 1) * 2 + (k - 1) * (n - 2)\n            n = 0\n            continue\n        ans += min(k - 1, n - k + 1) * 2 * (k * 2 - 1)\n        n -= min(k - 1, n - k + 1) * 2\n    print(ans)", "from math import log2, ceil, floor\nt = int(input())\n\ndef solve(N):\n    if N <= 1:\n        return 0\n    if log2(N + 1) % 1 == 0:\n        N -= 1\n    if log2(N) % 1 == 0:\n        return (N * 2 - 1) * 2 + (N - 1) * (N - 2)\n    np2 = 2 ** ceil(log2(N)) - 1\n    lp2 = 2 ** floor(log2(N))\n    n = N - lp2 + 1\n    ans = n * np2 * 2\n    return solve(N - n * 2) + ans\n    return ans\nwhile t:\n    N = int(input())\n    print(solve(N))\n    t -= 1", "arr = []\npo = 1\nfor i in range(32):\n    arr.append(po)\n    po *= 2\n\ndef less(n, arr):\n    for i in range(32):\n        if arr[i] > n:\n            return i\n    return -1\n\ndef recur(n):\n    if n <= 1:\n        return 0\n    po = less(n, arr)\n    po -= 1\n    rem = 2 ** po - 1\n    extra = n - rem\n    if extra > rem:\n        extra = rem\n    rem -= extra\n    su = 2 * extra * (2 ** (po + 1) - 1)\n    return su + recur(rem)\ntry:\n    for tc in range(int(input())):\n        n = int(input())\n        print(recur(n))\nexcept:\n    pass", "import sys\n\ndef rall():\n    return sys.stdin.readlines()\n\ndef rl():\n    return sys.stdin.readline().strip()\n\ndef rl_types(types):\n    str_list = [x for x in sys.stdin.readline().strip().split(' ')]\n    return [types[i](str_list[i]) for i in range(len(str_list))]\n\ndef pr(something=''):\n    sys.stdout.write(str(something) + '\\n')\n\ndef pra(array):\n    sys.stdout.write(' '.join([str(x) for x in array]) + '\\n')\n\ndef solve(array):\n    return array\nNT = int(rl())\n\ndef next_pow2(n):\n    t = 1\n    while t < n:\n        t *= 2\n    return t\n\ndef solve(i):\n    small = [0, 0, 6, 6, 20]\n    if i <= 4:\n        return small[i]\n    allones = next_pow2(i) - 1\n    if i == allones:\n        return solve(i - 1)\n    elif i == allones + 1:\n        allones = (allones + 1) * 2 - 1\n    opp = allones - i\n    return allones * (i - opp + 1) + solve(opp - 1)\nfor ti in range(NT):\n    n = int(rl())\n    pr(solve(n))", "from sys import stdin\nimport math\n\ndef solve(n):\n    if n == 0:\n        return 0\n    b = bin(n).replace('0b', '')\n    x = len(b)\n    if b.count('1') == x:\n        return (n - 1) * n\n    y = int('1' * x, 2)\n    n = y - n - 1\n    return 2 * (y // 2 - n) * y + solve(n)\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    print(solve(n))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 0\n    while n > 0:\n        a = math.floor(math.log(n, 2))\n        num = 2 ** a\n        b = n - num + 1\n        ans = ans + 2 * b * (2 * num - 1)\n        if n == 2 * num - 1:\n            ans = ans - 2 * (2 * num - 1)\n        n = n - 2 * b\n    print(ans)", "from math import log\nfor _ in range(int(input())):\n    n = int(input())\n\n    def solve(n):\n        if n <= 1:\n            return 0\n        p = int(log(n, 2)) + 1\n        val = 2 ** p - 1\n        number = n - (2 ** (p - 1) - 1)\n        grp = min(number, n // 2)\n        ans = grp * 2 * val\n        n -= 2 * grp\n        ans += solve(n)\n        return ans\n    print(solve(n))", "for some_random_name in range(int(input())):\n    n = int(input())\n    p = 1\n    a = []\n    while p <= n:\n        x = (n + 1) // p\n        if x % 2 == 0:\n            ans = x // 2 * p\n        else:\n            ans = x // 2 * p + (n + 1) % p\n        a.append(ans)\n        p *= 2\n    ans = 0\n    for i in range(len(a)):\n        ans += 2 ** i * min(a[i], n - a[i]) * 2\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    ans = 0\n    while n > 1:\n        a = bin(n)[2:]\n        a = a[::-1]\n        b = 0\n        p = 1\n        for j in a:\n            if j == '0':\n                b += p\n            p *= 2\n        if b == 0:\n            n -= 1\n            continue\n        ele = n - b + 1\n        ans += ele * (n ^ b)\n        n = b - 1\n    print(ans)", "def f(N):\n    max_deg = 0\n    M = N + 1\n    while M % 2 == 0:\n        M = M // 2\n        max_deg += 1\n    return max_deg\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    s = f(N)\n    answer = N * (N + 1) - 2 ** (s + 1) + 2\n    print(answer)", "def invert(s):\n    com = bin(s)[2:]\n    bs = ''\n    for i in com:\n        if i == '1':\n            bs += '0'\n        else:\n            bs += '1'\n    return int(bs, 2)\n\ndef solve(n: int):\n    n2 = n\n    sum = 0\n    while n2 > 0:\n        inv_n2 = invert(n2)\n        if inv_n2 == 0:\n            sum += n2 * (n2 - 1)\n        else:\n            sum += (inv_n2 + n2) * (n2 - inv_n2 + 1)\n        n2 = inv_n2 - 1\n    print(sum)\nfor testcase in range(int(input())):\n    n = int(input())\n    solve(n)", "def case(N):\n    n = N\n    sum = 0\n    while n > 0:\n        bit = n.bit_length() - 1\n        pow = 2 ** bit - 1\n        d = n - pow\n        n = n - d * 2\n        sum += ((pow << 1) + 1) * min(d, pow)\n    return sum * 2\nfor _ in range(int(input())):\n    print(case(int(input())))", "def case(N):\n    n = N\n    sum = 0\n    while n > 0:\n        bit = n.bit_length() - 1\n        pow = 2 ** bit - 1\n        d = n - pow\n        n = n - d * 2\n        sum += ((pow << 1) + 1) * min(d, pow)\n    return sum * 2\nfor _ in range(int(input())):\n    print(case(int(input())))", "import sys\ninput = sys.stdin.readline\n\ndef DFS(x):\n    if x == 0:\n        return 0\n    b = bin(x)[2:]\n    if '0' not in b:\n        return DFS(x - 1)\n    full_mask = int('1' * len(b), 2)\n    compliment = full_mask ^ x\n    return (x - compliment + 1) * full_mask + DFS(compliment - 1)\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    n = int(input())\n    print(DFS(n))", "from itertools import permutations\n\ndef solve(x):\n    if x <= 1:\n        return 0\n    if x & x + 1 == 0:\n        return solve(x - 1)\n    pow2 = 1 << len(bin(x)) - 2\n    smallest = pow2 - x - 1\n    res = (x - smallest + 1) * (pow2 - 1) + solve(smallest - 1)\n    return res\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n & n + 1 == 0:\n        print(solve(n - 1))\n    else:\n        print(solve(n))", "import sys\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\nsys.setrecursionlimit(10 ** 8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab, bc, cd: ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x: print(x)\nprinT = lambda x: print(x)\nf = lambda : sys.stdout.flush()\ninv = lambda x: pow(x, mod - 2, mod)\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\nmod = 10 ** 9 + 7\nmod1 = 998244353\n\ndef get(n):\n    if n <= 0:\n        return 0\n    b = len(bin(n)[2:])\n    if 2 ** b - 1 == n:\n        n -= 1\n    le = n - pow(2, b - 1) + 1\n    ans = get(pow(2, b - 1) - le - 1)\n    ans += le * (pow(2, b) - 1)\n    return ans\nfor _ in range(ii()):\n    n = ii()\n    if n == 1:\n        print(0)\n        continue\n    tot = get(n)\n    print(tot * 2)", "import sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nfrom math import log\nfrom math import gcd\nfrom math import atan2, acos\nfrom random import randint\nsa = lambda : input_()\nsb = lambda : int(input_())\nsc = lambda : input_().split()\nsd = lambda : list(map(int, input_().split()))\nsflo = lambda : list(map(float, input_().split()))\nse = lambda : float(input_())\nsf = lambda : list(input_())\nflsh = lambda : sys.stdout.flush()\nmod = 10 ** 9 + 7\nmod1 = 998244353\ngp = []\ncost = []\ndp = []\nmx = []\nans1 = []\nans2 = []\nspecial = []\nspecnode = []\na = 0\nkthpar = []\n\ndef dfs2(root, par):\n    if par != -1:\n        dp[root] = dp[par] + 1\n    for i in range(1, 20):\n        if kthpar[root][i - 1] != -1:\n            kthpar[root][i] = kthpar[kthpar[root][i - 1]][i - 1]\n    for child in gp[root]:\n        if child == par:\n            continue\n        kthpar[child][0] = root\n        dfs(child, root)\nans = 0\na = []\n(n, k) = (0, 0)\nb = []\nvis = []\ntot = 0\ntime = []\ntime1 = []\nadj = []\nmx = -1\neps = 1e-07\ngp = []\nans = []\n\ndef update_it(bit, i, val):\n    n = len(bit)\n    while i < n:\n        bit[i] += val\n        i += i & -i\n\ndef get_ans(bit, i):\n    n = len(bit)\n    tot = 0\n    while i > 0:\n        tot += bit[i]\n        i -= i & -i\n    return tot\n\ndef flip(a, l, r):\n    for i in range(l, r):\n        a[i] = '0' if a[i] == '1' else '1'\n    return\n\ndef get_ans(n):\n    if n <= 0:\n        return 0\n    c = len(bin(n)[2:])\n    if pow(2, c) - 1 == n:\n        n -= 1\n    left = n - pow(2, c - 1) + 1\n    ans = get_ans(pow(2, c - 1) - left - 1)\n    ans += left * (pow(2, c) - 1) * 2\n    return ans\n\ndef hnbhai(tc):\n    n = sb()\n    if n == 1:\n        print(0)\n        return\n    print(get_ans(n))\nfor _ in range(sb()):\n    hnbhai(_ + 1)", "import sys, os\nfrom io import BytesIO, IOBase\nmod = 10 ** 9 + 7\nMod = 998244353\nINF = float('inf')\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\ntc = 1\ntc = int(input())\nfor test_cases in range(1, tc + 1):\n    n = int(input())\n\n    def solve(n):\n        if n < 2:\n            return 0\n        t = len(bin(n)) - 2\n        if 1 << t == n + 1:\n            n -= 1\n        a = (1 << t) - 1 - n - 1\n        b = (1 << t) - 2 * a - 2\n        return b * ((1 << t) - 1) + solve(a)\n    ans = solve(n)\n    print(ans)"]