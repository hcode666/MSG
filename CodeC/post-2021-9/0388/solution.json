["t = int(input())\n\ndef solve():\n    N = int(input())\n    A = [int(x) for x in input().split(' ')]\n    S = input().strip('\\n')\n    sA = list(sorted(A))\n    if sA == A:\n        print('0')\n        return\n    (firsts, firstn, lasts, lastn, firstw, lastw) = [-1] * 6\n    for i in range(N):\n        if S[i] == 'S':\n            if firsts == -1:\n                firsts = i\n            lasts = i\n        else:\n            if firstn == -1:\n                firstn = i\n            lastn = i\n        if sA[i] != A[i]:\n            if firstw == -1:\n                firstw = i\n            lastw = i\n    if (firsts >= 0 and firstn >= 0) and (firstw >= firsts and lastw <= lastn or (firstw >= firstn and lastw <= lasts)):\n        print('1')\n    elif firsts >= 0 and firstn >= 0:\n        print('2')\n    else:\n        print('-1')\nwhile t:\n    solve()\n    t -= 1", "t = int(input())\n\ndef solve():\n    N = int(input())\n    A = [int(x) for x in input().split(' ')]\n    S = input().strip('\\n')\n    sA = list(sorted(A))\n    if sA == A:\n        print('0')\n        return\n    (firsts, firstn, lasts, lastn, firstw, lastw) = [-1] * 6\n    for i in range(N):\n        if S[i] == 'S':\n            if firsts == -1:\n                firsts = i\n            lasts = i\n        else:\n            if firstn == -1:\n                firstn = i\n            lastn = i\n        if sA[i] != A[i]:\n            if firstw == -1:\n                firstw = i\n            lastw = i\n    if (firsts >= 0 and firstn >= 0) and (firstw >= firsts and lastw <= lastn or (firstw >= firstn and lastw <= lasts)):\n        print('1')\n    elif firsts >= 0 and firstn >= 0:\n        print('2')\n    else:\n        print('-1')\nwhile t:\n    solve()\n    t -= 1", "def solve(n, a, s):\n    b = sorted(a)\n    i = 0\n    while i < n and a[i] == b[i]:\n        i += 1\n    if i == n:\n        return 0\n    if s == 'S' * n or s == 'N' * n:\n        return -1\n    j = n - 1\n    while j >= 0 and a[j] == b[j]:\n        j -= 1\n    s = s[:i + 1] + s[j:]\n    if s == 'S' * (i + 1 + n - j) or s == 'N' * (i + 1 + n - j):\n        return 2\n    return 1\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = list(map(int, input().strip().split()))\n    s = input().strip()\n    print(solve(n, a, s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = str(input())\n    f = a.copy()\n    f.sort()\n    if f == a:\n        print(0)\n    elif p.count('S') == 0 or p.count('N') == 0:\n        print(-1)\n    elif p[0] != p[-1]:\n        print(1)\n    elif p[0] == p[-1]:\n        sm = True\n        em = True\n        si = 0\n        while p[si] == p[0] and si < n:\n            if f[si] != a[si] and p[si] == p[0]:\n                sm = False\n            si += 1\n        ei = n - 1\n        while p[ei] == p[0] and ei >= 0:\n            if f[ei] != a[ei] and p[ei] == p[0]:\n                em = False\n            ei -= 1\n        if sm == False and em == False:\n            print(2)\n        else:\n            print(1)", "for _ in range(int(input())):\n    N = input()\n    x = list(map(int, input().split()))\n    weights = input()\n    sx = sorted([(a, b, weights[a]) for (a, b) in enumerate(x)], key=lambda x: x[1])\n    first_N = last_N = first_S = last_S = -1\n    fS = fN = fX = True\n    fu = lu = -1\n    m = [float('inf'), -1]\n    for i in range(len(x)):\n        z = weights[i]\n        if fN:\n            if z == 'N':\n                fN = False\n                first_N = i\n        if fS:\n            if z == 'S':\n                fS = False\n                first_S = i\n        if sx[i][0] != i:\n            m[0] = min(m[0], sx[i][0])\n            m[1] = max(m[1], sx[i][0])\n        if z == 'S':\n            last_S = i\n        if z == 'N':\n            last_N = i\n    if m == [float('inf'), -1]:\n        print(0)\n        continue\n    if first_S == -1 or first_N == -1:\n        print(-1)\n        continue\n    if weights[0] != weights[-1]:\n        print(1)\n        continue\n    if first_S <= m[0] and last_N >= m[1] or (first_N <= m[0] and last_S >= m[1]):\n        print(1)\n        continue\n    print(2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    if a == sorted(a):\n        print(0)\n        continue\n    if not s.count('N') or not s.count('S'):\n        print(-1)\n        continue\n    (firstN, firstS, lastN, lastS) = (-1, -1, -1, -1)\n    for i in range(n):\n        if s[i] == 'N':\n            if firstN == -1:\n                firstN = i\n            lastN = i\n        if s[i] == 'S':\n            if firstS == -1:\n                firstS = i\n            lastS = i\n    b = sorted(a)\n    for i in range(n):\n        if (i < firstN or i > lastS) and a[i] != b[i]:\n            break\n    else:\n        print(1)\n        continue\n    for i in range(n):\n        if (i < firstS or i > lastN) and a[i] != b[i]:\n            break\n    else:\n        print(1)\n        continue\n    print(2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    if a == sorted(a):\n        print(0)\n        continue\n    if not s.count('N') or not s.count('S'):\n        print(-1)\n        continue\n    (firstN, firstS, lastN, lastS) = (-1, -1, -1, -1)\n    for i in range(n):\n        if s[i] == 'N':\n            if firstN == -1:\n                firstN = i\n            lastN = i\n        if s[i] == 'S':\n            if firstS == -1:\n                firstS = i\n            lastS = i\n    b = sorted(a)\n    for i in range(n):\n        if (i < firstN or i > lastS) and a[i] != b[i]:\n            break\n    else:\n        print(1)\n        continue\n    for i in range(n):\n        if (i < firstS or i > lastN) and a[i] != b[i]:\n            break\n    else:\n        print(1)\n        continue\n    print(2)", "a = int(input())\nfor i in range(a):\n    N = int(input())\n    A = list(map(int, input().split()))\n    S = input()\n    if sorted(A) == A:\n        print(0)\n    elif S[0] != S[N - 1]:\n        print(1)\n    elif S.count(S[0]) == N:\n        print(-1)\n    elif S[0] == 'N':\n        k = S.index('S')\n        r = S.rfind('S')\n        C = A[:k]\n        D = A[r + 1:]\n        P = sorted(C)\n        Q = sorted(D)\n        if C != P and D != Q:\n            print(2)\n        elif C == P and D != Q:\n            if max(C) <= min(A[k:]):\n                print(1)\n            else:\n                print(2)\n        elif D == Q and C != P:\n            if max(A[:r + 1]) <= min(D):\n                print(1)\n            else:\n                print(2)\n        elif max(C) <= min(A[k:]) or max(A[:r + 1]) <= min(D):\n            print(1)\n        else:\n            print(2)\n    else:\n        k = S.index('N')\n        r = S.rfind('N')\n        C = A[:k]\n        D = A[r + 1:]\n        P = sorted(C)\n        Q = sorted(D)\n        if C != P and D != Q:\n            print(2)\n        elif C == P and D != Q:\n            if max(C) <= min(A[k:]):\n                print(1)\n            else:\n                print(2)\n        elif D == Q and C != P:\n            if max(A[:r + 1]) <= min(D):\n                print(1)\n            else:\n                print(2)\n        elif max(C) <= min(A[k:]) or max(A[:r + 1]) <= min(D):\n            print(1)\n        else:\n            print(2)", "for i in range(int(input())):\n    n = int(input())\n    A = [int(k) for k in input().split()]\n    s = input()\n    S = 0\n    N = 0\n    for k in s:\n        if k == 'N':\n            N += 1\n        else:\n            S += 1\n    if S == n and A != sorted(A) or (N == n and A != sorted(A)):\n        print(-1)\n    elif A == sorted(A):\n        print(0)\n    elif s[0] != s[-1]:\n        print(1)\n    else:\n        z = 0\n        d = sorted(A)\n        S = A.index(d[-1])\n        P = A.index(d[0])\n        for k in range(n):\n            if A[k] != d[k]:\n                z += 1\n                S = min(k, S)\n                P = max(k, P)\n                if k >= 1:\n                    d.append([s[k - 1], s[k]])\n        S1 = 0\n        P1 = 0\n        for k in range(n):\n            if k < S:\n                if s[k] != s[P]:\n                    S1 = 1\n            if k >= P:\n                if s[k] != s[S]:\n                    P1 = 1\n        if S1 == 1 or P1 == 1 or s[S] != s[P]:\n            print(1)\n        else:\n            print(2)", "a = int(input())\nfor i in range(a):\n    N = int(input())\n    A = list(map(int, input().split()))\n    S = input()\n    if sorted(A) == A:\n        print(0)\n    elif S[0] != S[N - 1]:\n        print(1)\n    elif S.count(S[0]) == N:\n        print(-1)\n    elif S[0] == 'N':\n        k = S.index('S')\n        r = S.rfind('S')\n        C = A[:k]\n        D = A[r + 1:]\n        P = sorted(C)\n        Q = sorted(D)\n        if C != P and D != Q:\n            print(2)\n        elif C == P and D != Q:\n            if max(C) <= min(A[k:]):\n                print(1)\n            else:\n                print(2)\n        elif D == Q and C != P:\n            if max(A[:r + 1]) <= min(D):\n                print(1)\n            else:\n                print(2)\n        elif max(C) <= min(A[k:]) or max(A[:r + 1]) <= min(D):\n            print(1)\n        else:\n            print(2)\n    else:\n        k = S.index('N')\n        r = S.rfind('N')\n        C = A[:k]\n        D = A[r + 1:]\n        P = sorted(C)\n        Q = sorted(D)\n        if C != P and D != Q:\n            print(2)\n        elif C == P and D != Q:\n            if max(C) <= min(A[k:]):\n                print(1)\n            else:\n                print(2)\n        elif D == Q and C != P:\n            if max(A[:r + 1]) <= min(D):\n                print(1)\n            else:\n                print(2)\n        elif max(C) <= min(A[k:]) or max(A[:r + 1]) <= min(D):\n            print(1)\n        else:\n            print(2)", "a = int(input())\nfor i in range(a):\n    N = int(input())\n    A = list(map(int, input().split()))\n    S = input()\n    if sorted(A) == A:\n        print(0)\n    elif S[0] != S[N - 1]:\n        print(1)\n    elif S.count(S[0]) == N:\n        print(-1)\n    elif S[0] == 'N':\n        k = S.index('S')\n        r = S.rfind('S')\n        C = A[:k]\n        D = A[r + 1:]\n        P = sorted(C)\n        Q = sorted(D)\n        if C != P and D != Q:\n            print(2)\n        elif C == P and D != Q:\n            if max(C) <= min(A[k:]):\n                print(1)\n            else:\n                print(2)\n        elif D == Q and C != P:\n            if max(A[:r + 1]) <= min(D):\n                print(1)\n            else:\n                print(2)\n        elif max(C) <= min(A[k:]) or max(A[:r + 1]) <= min(D):\n            print(1)\n        else:\n            print(2)\n    else:\n        k = S.index('N')\n        r = S.rfind('N')\n        C = A[:k]\n        D = A[r + 1:]\n        P = sorted(C)\n        Q = sorted(D)\n        if C != P and D != Q:\n            print(2)\n        elif C == P and D != Q:\n            if max(C) <= min(A[k:]):\n                print(1)\n            else:\n                print(2)\n        elif D == Q and C != P:\n            if max(A[:r + 1]) <= min(D):\n                print(1)\n            else:\n                print(2)\n        elif max(C) <= min(A[k:]) or max(A[:r + 1]) <= min(D):\n            print(1)\n        else:\n            print(2)", "import sys\n\ndef get_arr():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    a = get_arr()\n    s = input()\n    b = []\n    for i in range(n):\n        b.append(a[i])\n    b.sort()\n    fl = -1\n    for i in range(n):\n        if a[i] != b[i]:\n            fl = i\n            break\n    fl2 = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] != b[i]:\n            fl2 = i\n            break\n    if fl == -1:\n        print(0)\n        continue\n    elif s[0] == 'N' and s[n - 1] == 'S' or (s[0] == 'S' and s[n - 1] == 'N'):\n        print(1)\n    else:\n        n2 = 0\n        s2 = 0\n        for i in range(n):\n            if s[i] == 'N':\n                n2 = 1\n            if s[i] == 'S':\n                s2 = 1\n        if n2 == 0 or s2 == 0:\n            print(-1)\n        else:\n            if s[fl] == 'N':\n                val = 0\n                for i in range(fl2, n):\n                    if s[i] == 'S':\n                        print(1)\n                        val = 1\n                        break\n                if val == 1:\n                    continue\n            else:\n                val = 0\n                for i in range(fl2, n):\n                    if s[i] == 'N':\n                        print(1)\n                        val = 1\n                        break\n                if val == 1:\n                    continue\n            if s[fl2] == 'N':\n                val = 0\n                for i in range(fl, -1, -1):\n                    if s[i] == 'S':\n                        print(1)\n                        val = 1\n                        break\n                if val == 1:\n                    continue\n            else:\n                val = 0\n                for i in range(fl, -1, -1):\n                    if s[i] == 'N':\n                        print(1)\n                        val = 1\n                        break\n                if val == 1:\n                    continue\n            print(2)\n            continue", "def solve(n, arr, p):\n    sorted_arr = sorted(arr)\n    if arr == sorted_arr:\n        return 0\n    first_s = -1\n    last_s = -1\n    first_n = -1\n    last_n = -1\n    for i in range(n):\n        if p[i] == 'S':\n            if first_s == -1:\n                first_s = i\n            last_s = i\n        else:\n            if first_n == -1:\n                first_n = i\n            last_n = i\n    for i in range(n):\n        if arr[i] == sorted_arr[i]:\n            continue\n        if p[-1] != p[i]:\n            return 1\n        if p[i] == 'N':\n            if first_s == -1:\n                return -1\n            if first_s < i:\n                return 1\n            return 2 if sorted(arr[:last_s + 1]) + arr[last_s + 1:] != sorted_arr else 1\n        else:\n            if first_n == -1:\n                return -1\n            if first_n < i:\n                return 1\n            return 2 if sorted(arr[:last_n + 1]) + arr[last_n + 1:] != sorted_arr else 1\n    return 0\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    p = input()\n    print(solve(n, arr, p))", "for i in range(int(input())):\n    n = int(input())\n    A = [int(k) for k in input().split()]\n    s = input()\n    S = 0\n    N = 0\n    for k in s:\n        if k == 'N':\n            N += 1\n        else:\n            S += 1\n    if S == n and A != sorted(A) or (N == n and A != sorted(A)):\n        print(-1)\n    elif A == sorted(A):\n        print(0)\n    elif s[0] != s[-1]:\n        print(1)\n    else:\n        z = 0\n        d = sorted(A)\n        S = A.index(d[-1])\n        P = A.index(d[0])\n        for k in range(n):\n            if A[k] != d[k]:\n                z += 1\n                S = min(k, S)\n                P = max(k, P)\n                if k >= 1:\n                    d.append([s[k - 1], s[k]])\n        S1 = 0\n        P1 = 0\n        for k in range(n):\n            if k < S:\n                if s[k] != s[P]:\n                    S1 = 1\n            if k >= P:\n                if s[k] != s[S]:\n                    P1 = 1\n        if S1 == 1 or P1 == 1 or s[S] != s[P]:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    c = sorted(a)\n    if c == a:\n        print(0)\n        continue\n    if 0 in [s.count('N'), s.count('S')]:\n        print(-1)\n        continue\n    l = None\n    r = None\n    for j in range(n):\n        if c[j] != a[j]:\n            r = j\n            if l == None:\n                l = j\n    if s[l] != s[r]:\n        print(1)\n    elif s[l] == 'N':\n        if 'S' in s[:l + 1] or 'S' in s[r:]:\n            print(1)\n            continue\n        else:\n            print(2)\n    elif 'N' in s[:l + 1] or 'N' in s[r:]:\n        print(1)\n    else:\n        print(2)", "strng = lambda : input().split()[0]\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nslst = lambda : list(input().split()[0])\nsilst = lambda : list(map(int, input().split()[0]))\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom math import ceil, log, floor, sqrt, gcd, log10\n\ndef merge(a, lo, hi, m):\n    tmp = []\n    i = lo\n    j = m + 1\n    while i <= m and j <= hi:\n        if a[i] > a[j]:\n            tmp += [a[j]]\n            j += 1\n        else:\n            tmp += [a[i]]\n            i += 1\n    while i <= m:\n        tmp += [a[i]]\n        i += 1\n    while j <= hi:\n        tmp += [a[j]]\n        j += 1\n    j = 0\n    for i in range(lo, hi + 1):\n        a[i] = tmp[j]\n        j += 1\n\ndef msrt(arr, lo, hi):\n    if lo < hi:\n        m = (lo + hi) // 2\n        msrt(arr, lo, m)\n        msrt(arr, m + 1, hi)\n        merge(arr, lo, hi, m)\n\ndef part(a, lo, hi):\n    i = lo - 1\n    j = 0\n    while j < hi:\n        if a[j] <= a[hi]:\n            i += 1\n            (a[j], a[i]) = (a[i], a[j])\n        j += 1\n    (a[i + 1], a[hi]) = (a[hi], a[i + 1])\n    return i + 1\n\ndef qsrt(arr, lo, hi):\n    if lo < hi:\n        m = part(arr, lo, hi)\n        print(m)\n        qsrt(arr, lo, m - 1)\n        qsrt(arr, m + 1, hi)\nfor _ in range(inp()):\n    n = inp()\n    a = lst()\n    s = strng()\n    da = defaultdict(lambda : 0)\n    b = sorted(a)\n    for i in range(n):\n        da[s[i]] += 1\n        if a[i] != b[i]:\n            break\n    else:\n        print(0)\n        continue\n    if len(set(s)) <= 1:\n        print(-1)\n        continue\n    if s[0] != s[n - 1] or len(da) == 2:\n        print(1)\n        continue\n    flag = False\n    for j in range(n - 1, i, -1):\n        if s[j] not in da:\n            flag = True\n            break\n        if a[j] != b[j]:\n            break\n    if flag:\n        print(1)\n    else:\n        print(2)", "strng = lambda : input().split()[0]\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nslst = lambda : list(input().split()[0])\nsilst = lambda : list(map(int, input().split()[0]))\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nimport sys\ninput = sys.stdin.readline\nfrom collections import defaultdict\nfrom math import ceil, log, floor, sqrt, gcd, log10\n\ndef merge(a, lo, hi, m):\n    tmp = []\n    i = lo\n    j = m + 1\n    while i <= m and j <= hi:\n        if a[i] > a[j]:\n            tmp += [a[j]]\n            j += 1\n        else:\n            tmp += [a[i]]\n            i += 1\n    while i <= m:\n        tmp += [a[i]]\n        i += 1\n    while j <= hi:\n        tmp += [a[j]]\n        j += 1\n    j = 0\n    for i in range(lo, hi + 1):\n        a[i] = tmp[j]\n        j += 1\n\ndef msrt(arr, lo, hi):\n    if lo < hi:\n        m = (lo + hi) // 2\n        msrt(arr, lo, m)\n        msrt(arr, m + 1, hi)\n        merge(arr, lo, hi, m)\n\ndef part(a, lo, hi):\n    i = lo - 1\n    j = 0\n    while j < hi:\n        if a[j] <= a[hi]:\n            i += 1\n            (a[j], a[i]) = (a[i], a[j])\n        j += 1\n    (a[i + 1], a[hi]) = (a[hi], a[i + 1])\n    return i + 1\n\ndef qsrt(arr, lo, hi):\n    if lo < hi:\n        m = part(arr, lo, hi)\n        print(m)\n        qsrt(arr, lo, m - 1)\n        qsrt(arr, m + 1, hi)\nfor _ in range(inp()):\n    n = inp()\n    a = lst()\n    s = strng()\n    da = set()\n    b = sorted(a)\n    for i in range(n):\n        if s[i] not in da:\n            da.add(s[i])\n        if a[i] != b[i]:\n            break\n    else:\n        print(0)\n        continue\n    if len(set(s)) <= 1:\n        print(-1)\n        continue\n    if s[0] != s[n - 1] or len(da) == 2:\n        print(1)\n        continue\n    flag = False\n    for j in range(n - 1, i, -1):\n        if s[j] not in da:\n            flag = True\n            break\n        if a[j] != b[j]:\n            break\n    if flag:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    c = sorted(a)\n    if c == a:\n        print(0)\n        continue\n    if 0 in [s.count('N'), s.count('S')]:\n        print(-1)\n        continue\n    l = None\n    r = None\n    for j in range(n):\n        if c[j] != a[j]:\n            r = j\n            if l == None:\n                l = j\n    if s[l] != s[r]:\n        print(1)\n    elif s[l] == 'N':\n        if 'S' in s[:l + 1] or 'S' in s[r:]:\n            print(1)\n            continue\n        else:\n            print(2)\n    elif 'N' in s[:l + 1] or 'N' in s[r:]:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    c = sorted(a)\n    if c == a:\n        print(0)\n        continue\n    if 0 in [s.count('N'), s.count('S')]:\n        print(-1)\n        continue\n    l = None\n    r = None\n    for j in range(n):\n        if c[j] != a[j]:\n            r = j\n            if l == None:\n                l = j\n    if s[l] != s[r]:\n        print(1)\n    elif s[l] == 'N':\n        if 'S' in s[:l + 1] or 'S' in s[r:]:\n            print(1)\n            continue\n        else:\n            print(2)\n    elif 'N' in s[:l + 1] or 'N' in s[r:]:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    c = sorted(a)\n    if c == a:\n        print(0)\n        continue\n    if 0 in [s.count('N'), s.count('S')]:\n        print(-1)\n        continue\n    l = None\n    r = None\n    for j in range(n):\n        if c[j] != a[j]:\n            r = j\n            if l == None:\n                l = j\n    if s[l] != s[r]:\n        print(1)\n    elif s[l] == 'N':\n        if 'S' in s[:l + 1] or 'S' in s[r:]:\n            print(1)\n            continue\n        else:\n            print(2)\n    elif 'N' in s[:l + 1] or 'N' in s[r:]:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    c = sorted(a)\n    if c == a:\n        print(0)\n        continue\n    if 0 in [s.count('N'), s.count('S')]:\n        print(-1)\n        continue\n    l = None\n    r = None\n    for j in range(n):\n        if c[j] != a[j]:\n            r = j\n            if l == None:\n                l = j\n    if s[l] != s[r]:\n        print(1)\n    elif s[l] == 'N':\n        if 'S' in s[:l + 1] or 'S' in s[r:]:\n            print(1)\n            continue\n        else:\n            print(2)\n    elif 'N' in s[:l + 1] or 'N' in s[r:]:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    j = sorted(a)\n    if j == a:\n        print(0)\n        continue\n    if 0 in [s.count('N'), s.count('S')]:\n        print(-1)\n        continue\n    l = None\n    r = None\n    for i in range(n):\n        if j[i] != a[i]:\n            r = i\n            if l == None:\n                l = i\n    if s[l] != s[r]:\n        print(1)\n    elif s[l] == 'N':\n        if 'S' in s[:l + 1] or 'S' in s[r:]:\n            print(1)\n            continue\n        else:\n            print(2)\n    elif 'N' in s[:l + 1] or 'N' in s[r:]:\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    chars = [x for x in input()]\n    num_north = sum([1 if x == 'N' else 0 for x in chars])\n    if all((nums[x] <= nums[x + 1] for x in range(n - 1))):\n        print(0)\n    elif num_north == 0 or num_north == n:\n        print(-1)\n    else:\n        first_north = -1\n        last_north = -1\n        first_south = -1\n        last_south = -1\n        for i in range(n):\n            if chars[i] == 'N':\n                first_north = i\n                break\n        for i in range(n):\n            if chars[i] == 'S':\n                first_south = i\n                break\n        for i in range(n - 1, -1, -1):\n            if chars[i] == 'N':\n                last_north = i\n                break\n        for i in range(n - 1, -1, -1):\n            if chars[i] == 'S':\n                last_south = i\n                break\n        one = nums[:first_north] + sorted(nums[first_north:last_south + 1]) + nums[last_south + 1:]\n        two = nums[:first_south] + sorted(nums[first_south:last_north + 1]) + nums[last_north + 1:]\n        if all((one[i] <= one[i + 1] for i in range(n - 1))) or all((two[i] <= two[i + 1] for i in range(n - 1))):\n            print(1)\n        else:\n            print(2)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    s = input().strip()\n    res = sorted(li[:])\n    if res == li:\n        print(0)\n    elif s.count('S') == 0 or s.count('N') == 0:\n        print(-1)\n    elif s[0] + s[-1] == 'NS' or s[0] + s[-1] == 'SN':\n        print(1)\n    else:\n        (s1, s2, n1, n2) = (-1, -1, -1, -1)\n        for i in range(n):\n            if s[i] == 'N':\n                if n1 == -1:\n                    n1 = i\n                else:\n                    n2 = i\n            elif s1 == -1:\n                s1 = i\n            else:\n                s2 = i\n        if s2 == -1:\n            s2 = s1\n        if n2 == -1:\n            n2 = n1\n        if li[:n1] + sorted(li[n1:s2 + 1]) + li[s2 + 1:] == res or li[:s1] + sorted(li[s1:n2 + 1]) + li[n2 + 1:] == res:\n            print(1)\n        else:\n            print(2)", "for _ in range(int(input())):\n    n = int(input())\n    ai = list(map(int, input().split()))\n    s = input()\n    s1 = -1\n    s2 = -1\n    n1 = -1\n    n2 = -1\n    for i in range(n):\n        if s[i] == 'S':\n            s2 = i\n        else:\n            n2 = i\n        if s[n - i - 1] == 'S':\n            s1 = n - i - 1\n        else:\n            n1 = n - i - 1\n    li = sorted(ai)\n    if ai == li:\n        print(0)\n    elif s.count('N') == n or s.count('N') == 0:\n        print(-1)\n    elif ai[:s1] + sorted(ai[s1:n2 + 1]) + ai[n2 + 1:] == li or ai[:n1] + sorted(ai[n1:s2 + 1]) + ai[s2 + 1:] == li:\n        print(1)\n    else:\n        print(2)", "def solve(n, arr, s):\n    a = list(sorted(arr))\n    if arr == a or n == 1:\n        return 0\n    if len(set(s)) == 1:\n        return -1\n    (i, j) = (0, n - 1)\n    while arr[i] == a[i]:\n        i += 1\n    while arr[j] == a[j]:\n        j -= 1\n    lefts = 'S' in s[:i + 1]\n    leftn = 'N' in s[:i + 1]\n    rights = 'S' in s[j:]\n    rightn = 'N' in s[j:]\n    if lefts and rightn or (leftn and rights):\n        return 1\n    return 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    print(solve(n, arr, s))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    k = l.copy()\n    k.sort()\n    if k == l:\n        print(0)\n    elif len(set(s)) == 1:\n        print(-1)\n    elif s[0] != s[-1]:\n        print(1)\n    else:\n        c = s[-1]\n        ind = 0\n        for i in range(n):\n            if l[i] != k[i]:\n                ind = i\n                break\n        last = n - 1\n        for i in range(n - 1, ind, -1):\n            if k[i] != l[i]:\n                last = i\n                break\n        c2 = s[last]\n        flag = False\n        for i in range(ind + 1):\n            for j in range(last, n):\n                if s[i] != s[j]:\n                    print(1)\n                    flag = True\n                    break\n            if flag:\n                break\n        else:\n            print(2)", "def solve(A, S):\n    arr = sorted(A)\n    if arr == A:\n        return 0\n    n_count = S.count('N')\n    s_count = S.count('S')\n    if n_count == 0 or s_count == 0:\n        return -1\n    l = float('inf')\n    r = 0\n    left_N = False\n    right_N = False\n    left_S = False\n    right_S = False\n    for i in range(len(A)):\n        if A[i] != arr[i]:\n            l = min(l, i)\n            r = max(r, i)\n    for i in range(l + 1):\n        if S[i] == 'N':\n            left_N = True\n        if S[i] == 'S':\n            left_S = True\n    for i in range(r, len(A)):\n        if S[i] == 'N':\n            right_N = True\n        if S[i] == 'S':\n            right_S = True\n    if left_S and right_N or (left_N and right_S):\n        return 1\n    return 2\ntest_cases = int(input())\nfor i in range(int(test_cases)):\n    n = int(input())\n    A = list(map(int, input().split()))\n    S = input()\n    print(solve(A, S))", "import sys\n\ndef check(A, first, last):\n    A[first:last + 1] = sorted(A[first:last + 1])\n    if A == sorted(A):\n        return 1\n    return 0\n\ndef solve(A, S):\n    arr = sorted(A)\n    if arr == A:\n        return 0\n    n_count = S.count('N')\n    s_count = S.count('S')\n    if n_count == 0 or s_count == 0:\n        return -1\n    d = {'leftN': 0, 'leftS': 0, 'rightN': 0, 'rightS': 0}\n    (l, r) = (10 ** 6, 0)\n    n = len(S)\n    temparr = arr\n    s = S\n    a = A\n    for i in range(n):\n        if temparr[i] != a[i]:\n            l = min(l, i)\n            r = max(r, i)\n    for i in range(l + 1):\n        if s[i] == 'N':\n            d['leftN'] += 1\n        if s[i] == 'S':\n            d['leftS'] += 1\n    for i in range(r, n):\n        if s[i] == 'N':\n            d['rightN'] += 1\n        if s[i] == 'S':\n            d['rightS'] += 1\n    if d['leftS'] > 0 and d['rightN'] > 0 or (d['rightS'] > 0 and d['leftN'] > 0):\n        return 1\n    else:\n        return 2\nt = int(input())\nfor i in range(int(t)):\n    n = int(input())\n    A = list(map(int, input().split()))\n    S = input()\n    print(solve(A, S))", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    temparr = sorted(a)\n    s = input()\n    if temparr == a:\n        print(0)\n        continue\n    if s.count('S') == n or s.count('N') == n:\n        print(-1)\n        continue\n    d = {'leftN': 0, 'leftS': 0, 'rightN': 0, 'rightS': 0}\n    (l, r) = (10 ** 6, 0)\n    for i in range(n):\n        if temparr[i] != a[i]:\n            l = min(l, i)\n            r = max(r, i)\n    for i in range(l + 1):\n        if s[i] == 'N':\n            d['leftN'] += 1\n        if s[i] == 'S':\n            d['leftS'] += 1\n    for i in range(r, n):\n        if s[i] == 'N':\n            d['rightN'] += 1\n        if s[i] == 'S':\n            d['rightS'] += 1\n    if d['leftS'] > 0 and d['rightN'] > 0 or (d['rightS'] > 0 and d['leftN'] > 0):\n        print(1)\n    else:\n        print(2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = list(input())\n    if all((a[i - 1] <= a[i] for i in range(1, n))):\n        print(0)\n        continue\n    n_ct = s.count('N')\n    if n_ct == n or n_ct == 0:\n        print(-1)\n        continue\n    (left, right) = (n + 1, -1)\n    b = sorted(a)\n    for (i, (av, bv)) in enumerate(zip(a, b)):\n        if av != bv:\n            left = i\n            break\n    for (i, (av, bv)) in enumerate(zip(a[::-1], b[::-1])):\n        if av != bv:\n            right = n - 1 - i\n            break\n    (lf, rf) = (False, False)\n    for i in range(left):\n        if s[i] != s[right]:\n            lf = True\n            break\n    for i in range(right, n):\n        if s[i] != s[left]:\n            rf = True\n            break\n    if s[left] != s[right] or lf or rf:\n        print(1)\n        continue\n    print(2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = list(input())\n    if all((a[i - 1] <= a[i] for i in range(1, n))):\n        print(0)\n        continue\n    n_ct = s.count('N')\n    if n_ct == n or n_ct == 0:\n        print(-1)\n        continue\n    (left, right) = (n + 1, -1)\n    b = sorted(a)\n    for (i, (av, bv)) in enumerate(zip(a, b)):\n        if av != bv:\n            left = i\n            break\n    for (i, (av, bv)) in enumerate(zip(a[::-1], b[::-1])):\n        if av != bv:\n            right = n - 1 - i\n            break\n    (lf, rf) = (False, False)\n    for i in range(left):\n        if s[i] != s[right]:\n            lf = True\n            break\n    for i in range(right, n):\n        if s[i] != s[left]:\n            rf = True\n            break\n    if s[left] != s[right] or lf or rf:\n        print(1)\n        continue\n    print(2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    string = input()\n    cnt_s = string.count('S')\n    cnt_n = string.count('N')\n    sorted_a = list(sorted(a))\n    if a == sorted_a:\n        print(0)\n    elif cnt_s == 0 or cnt_n == 0:\n        print(-1)\n    else:\n        for i in range(n):\n            if sorted_a[i] != a[i]:\n                diff_index_start = i\n                break\n        for j in range(n - 1, -1, -1):\n            if sorted_a[j] != a[j]:\n                diff_index_end = j\n                break\n        left = string[:diff_index_start + 1]\n        right = string[diff_index_end:]\n        if 'N' in left and 'S' in right or ('S' in left and 'N' in right):\n            ans = 1\n        else:\n            ans = 2\n        print(ans)", "t = int(input())\n\ndef solve(ar, pol):\n    ref = sorted(ar)\n    if ar == ref:\n        return 0\n    if len(set(pol)) == 1:\n        return -1\n    n = len(ar)\n    for i in range(n):\n        if ar[i] != ref[i]:\n            break\n    for j in range(n - 1, -1, -1):\n        if ar[j] != ref[j]:\n            break\n    for k in range(i + 1):\n        for l in range(j, n):\n            if pol[k] != pol[l] and k < l:\n                return 1\n    return 2\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    pol = list(input())\n    print(solve(x, pol))", "for _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    P = input()\n    SA = sorted(A)\n    if A == SA:\n        print(0)\n        continue\n    elif not (P.count('N') and P.count('S')):\n        print(-1)\n        continue\n    elif P[0] != P[-1]:\n        print(1)\n        continue\n    (s, e) = (0, N - 1)\n    while s < e:\n        if P[s] != P[0] or P[e] != P[0]:\n            break\n        if A[s] == SA[s]:\n            s += 1\n        elif A[e] == SA[e]:\n            e -= 1\n        else:\n            break\n    if P[s] != P[0] or P[e] != P[0]:\n        print(1)\n    else:\n        print(2)", "def disturbance(l, p, n):\n    (st, en) = (-1, 0)\n    for i in range(n):\n        if l[i] != p[i]:\n            if st == -1:\n                st = i\n            else:\n                en = i\n    return (st, en)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = str(input())\n    p = []\n    for i in l:\n        p.append(i)\n    p.sort()\n    n_c = s.count('N')\n    if p != l:\n        if n_c == n or n_c == 0:\n            print(-1)\n        else:\n            (start, end) = disturbance(l, p, n)\n            if s[start] != s[end]:\n                print(1)\n            else:\n                ans2 = 10000\n                for i in range(start, end + 1):\n                    if s[i] != s[start]:\n                        ans2 = 2\n                        break\n                (nl, sl) = (0, 0)\n                for i in range(start + 1):\n                    if s[i] == 'N':\n                        nl = 1\n                    elif s[i] == 'S':\n                        sl = 1\n                (nr, sr) = (0, 0)\n                for j in range(end, n):\n                    if s[j] == 'N':\n                        nr = 1\n                    elif s[j] == 'S':\n                        sr = 1\n                ans3 = 10000\n                if nl & sr == 1 or sl & nr == 1:\n                    ans3 = 1\n                print(min(ans2, ans3))\n    else:\n        print(0)", "def check(A, first, last):\n    A[first:last + 1] = sorted(A[first:last + 1])\n    if A == sorted(A):\n        return 1\n    return 0\n\ndef solve(A, S, N):\n    if A == sorted(A):\n        print(0)\n        return\n    countN = 0\n    for ch in S:\n        if ch == 'N':\n            countN += 1\n    if countN == 0 or countN == N:\n        print(-1)\n        return\n    (firstN, lastN, firstS, lastS) = (-1, -1, -1, -1)\n    for i in range(N):\n        if S[i] == 'N':\n            if firstN == -1:\n                firstN = i\n            lastN = i\n        else:\n            if firstS == -1:\n                firstS = i\n            lastS = i\n    ans = 2\n    if check(A[:], firstN, lastS) == 1 or check(A[:], firstS, lastN) == 1:\n        ans = 1\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    S = input()\n    solve(A, S, N)", "try:\n    t = int(input())\n    for q in range(t):\n        n = int(input())\n        l = list(map(int, input().split()))\n        s = input()\n        a = []\n        flag = 0\n        left = 0\n        right = n - 1\n        for v in range(n - 1):\n            if s[v] != s[v + 1]:\n                flag += 1\n        for j in l:\n            a.append(j)\n        l.sort()\n        index = []\n        for i in range(n):\n            if a[i] != l[i]:\n                index.append(i)\n        f = 0\n        if len(index) != 0:\n            for z in range(min(index) + 1):\n                if f == 1:\n                    break\n                for y in range(n - 1, max(index) - 1, -1):\n                    if f == 1:\n                        break\n                    if s[z] != s[y]:\n                        print(1)\n                        f = 1\n            if f == 0:\n                if flag == 0:\n                    print(-1)\n                else:\n                    print(2)\n        else:\n            print(0)\nexcept:\n    pass", "def res1(n, arr, stri):\n    cnt1 = 0\n    cnt2 = 0\n    for i in range(n):\n        if stri[i] == 'N':\n            cnt1 += 1\n        else:\n            cnt2 += 1\n    sarr = sorted(arr)\n    if cnt1 == n and sarr != arr or (cnt2 == n and sarr != arr):\n        return -1\n    if sarr == arr:\n        return 0\n    if stri[0] != stri[-1]:\n        return 1\n    s = arr.index(sarr[-1])\n    p = arr.index(sarr[0])\n    p = 0\n    for i in range(n):\n        if arr[i] != sarr[i]:\n            s = min(s, i)\n            p = max(p, i)\n    s1 = 0\n    p1 = 0\n    for k in range(n):\n        if k < s:\n            if stri[k] != stri[p]:\n                s1 = 1\n        if k >= p:\n            if stri[k] != stri[s]:\n                p1 = 1\n    if s1 == 1 or p1 == 1 or stri[s] != stri[p]:\n        return 1\n    else:\n        return 2\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    stri = input()\n    print(res1(n, arr, stri))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    b = a.copy()\n    b.sort()\n    if a == b:\n        print(0)\n    elif len(set(s)) == 1:\n        print(-1)\n    else:\n        b1 = 0\n        for j in range(0, n - 1):\n            if s[-1] == 'S':\n                if s[j] == 'N':\n                    b1 = j\n                    break\n            elif s[-1] == 'N':\n                if s[j] == 'S':\n                    b1 = j\n                    break\n        l1 = a[b1:]\n        l1.sort()\n        l2 = a[:b1]\n        l3 = l2 + l1\n        b2 = 0\n        for j in range(n - 1, 0, -1):\n            if s[0] == 'S':\n                if s[j] == 'N':\n                    b2 = j\n                    break\n            elif s[0] == 'N':\n                if s[j] == 'S':\n                    b2 = j\n                    break\n        l4 = a[:b2 + 1]\n        l4.sort()\n        l5 = a[b2 + 1:]\n        l6 = l4 + l5\n        ans1 = 0\n        ans2 = 0\n        if l3 == b:\n            ans1 = 1\n        if l3 != b:\n            ans1 = 2\n        if l6 == b:\n            ans2 = 1\n        if l6 != b:\n            ans2 = 2\n        print(min(ans1, ans2))", "t = int(input())\nwhile t:\n    n = int(input())\n    li = list(map(int, input().strip().split()))\n    s = input()\n    lii = li.copy()\n    lii.sort()\n    ans = 2\n    if lii == li:\n        ans = 0\n    elif len(set(s)) == 1:\n        ans = -1\n    elif s[0] == s[n - 1] and len(set(s)) > 1:\n        lis = list(s)\n        for j in range(n - 1, 0, -1):\n            if lis[j] != lis[0]:\n                var = j\n                break\n        for i in range(n):\n            if lis[i] != lis[n - 1]:\n                var2 = i\n                break\n        if lii[var + 1:] == li[var + 1:]:\n            ans = 1\n        elif lii[0:var2] == li[0:var2]:\n            ans = 1\n    elif s[0] != s[n - 1]:\n        ans = 1\n    print(ans)\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    lo = list(map(int, input().split()))\n    s = sorted(lo)\n    c = list(input())\n    r = -1\n    if lo == s:\n        r = 0\n    if 'N' in c and 'S' in c:\n        if lo == s:\n            r = 0\n        elif c[0] != c[-1]:\n            r = 1\n        else:\n            front = n\n            rear = 0\n            for i in range(n):\n                if lo[i] != s[i]:\n                    front = min(i, front)\n                    rear = max(i, rear)\n            f = 0\n            for i in range(front + 1):\n                if c[i] != c[-1]:\n                    f = 1\n                    break\n            for i in range(rear, n):\n                if c[i] != c[-1]:\n                    f = 1\n                    break\n            if f:\n                r = 1\n            else:\n                r = 2\n    print(r)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input().strip()\n    b = sorted(a)\n    if b == a or len(a) == 1:\n        print(0)\n    else:\n        st = 0\n        for i in range(n):\n            if a[i] == b[i]:\n                pass\n            else:\n                st = i\n                break\n        ed = n - 1\n        for i in range(ed, st - 1, -1):\n            if a[i] == b[i]:\n                pass\n            else:\n                ed = i\n                break\n        if s[st] != s[ed]:\n            print(1)\n        elif s[st] == 'N':\n            pres = 0\n            for i in range(st):\n                if s[i] == 'S':\n                    pres = 1\n            for i in range(ed + 1, n):\n                if s[i] == 'S':\n                    pres = 1\n            if pres:\n                print(1)\n            else:\n                for i in range(st + 1, ed):\n                    if s[i] == 'S':\n                        pres = 1\n                if pres:\n                    print(2)\n                else:\n                    print(-1)\n        else:\n            pres = 0\n            for i in range(st):\n                if s[i] == 'N':\n                    pres = 1\n            for i in range(ed + 1, n):\n                if s[i] == 'N':\n                    pres = 1\n            if pres:\n                print(1)\n            else:\n                for i in range(st + 1, ed):\n                    if s[i] == 'N':\n                        pres = 1\n                if pres:\n                    print(2)\n                else:\n                    print(-1)", "t = int(input())\nfor _ in range(t):\n    (ct, n) = (0, int(input()))\n    a = list(map(int, input().split()))\n    (pre, s, f) = (0, input(), True)\n    for i in a:\n        if i < pre:\n            f = False\n            break\n        pre = i\n    if f:\n        print(0)\n        continue\n    for i in s:\n        if i == 'S':\n            ct += 1\n    if ct == n or ct == 0:\n        print(-1)\n        continue\n    b = sorted(a)\n    (mini, maxi) = (10 ** 10, 0)\n    for (i, (av, bv)) in enumerate(zip(a, b)):\n        if av != bv:\n            mini = min(mini, i)\n            maxi = max(maxi, i)\n    (f1, f2) = (False, False)\n    for i in s[:mini]:\n        if i != s[maxi]:\n            f1 = True\n    for i in s[maxi:]:\n        if i != s[mini]:\n            f2 = True\n    if s[mini] != s[maxi] or f1 or f2:\n        print(1)\n    else:\n        print(2)", "def MostMisplaced(arr, arrSorted):\n    for x in range(len(arr)):\n        if arr[x] != arrSorted[x]:\n            return x\n    return None\n\ndef insideRange(val, myRange):\n    if val >= myRange[0] and val <= myRange[1]:\n        return True\n    else:\n        return False\n\ndef areIn(leftMost, rightMost, givenRange):\n    if insideRange(leftMost, givenRange) and insideRange(rightMost, givenRange):\n        return True\n    return False\n\ndef minCost(arr, pole):\n    arrSorted = arr[:]\n    arrSorted.sort()\n    leftMisplace = MostMisplaced(arr, arrSorted)\n    if leftMisplace == None:\n        return 0\n    rightMisplace = len(arr) - 1 - MostMisplaced(arr[::-1], arrSorted[::-1])\n    try:\n        leftMostN = pole.index('N')\n        leftMostS = pole.index('S')\n        rightMostN = len(pole) - 1 - pole[::-1].index('N')\n        rightMostS = len(pole) - 1 - pole[::-1].index('S')\n        NS = (leftMostN, rightMostS)\n        SN = (leftMostS, rightMostN)\n        if areIn(leftMisplace, rightMisplace, NS) or areIn(leftMisplace, rightMisplace, SN):\n            return 1\n        else:\n            return 2\n    except:\n        return -1\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = [int(x) for x in input().split()]\n    pole = [x for x in input()]\n    print(minCost(arr, pole))", "from sys import stdin\nfrom collections import defaultdict as dd, deque as dq\nfrom heapq import heappush as hpush, heappop as hpop\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom random import randint\nfrom math import sqrt, ceil, floor\nfrom time import time\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef text():\n    return stdin.readline().rstrip()\n\ndef num():\n    return int(text())\n\ndef mp(dt):\n    return map(dt, stdin.readline().split())\n\ndef array(dt):\n    return list(mp(dt))\n\ndef SieveOfEratosthenes(n, prime):\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n\ndef timer_func(func):\n\n    def wrap_func(*args, **kwargs):\n        t1 = time()\n        result = func(*args, **kwargs)\n        t2 = time()\n        return result\n    return wrap_func\n\n@timer_func\ndef solve():\n    t = num()\n    while t > 0:\n        n = num()\n        a = array(int)\n        s = text()\n        (no, so) = (0, 0)\n        for i in s:\n            if i == 'N':\n                no += 1\n            else:\n                so += 1\n        sa = sorted(a)\n        c = -1\n        e = -1\n        for i in range(n):\n            if sa[i] != a[i]:\n                if c == -1:\n                    c = i\n                e = i\n        if c == -1:\n            print(0)\n        elif no == 0 or so == 0:\n            print(-1)\n        else:\n            (no, so) = (0, 0)\n            for i in range(c, -1, -1):\n                if s[i] == 'N':\n                    no += 1\n                else:\n                    so += 1\n            for i in range(e, n):\n                if s[i] == 'N':\n                    no += 1\n                else:\n                    so += 1\n            if no == 0 or so == 0:\n                print(2)\n            else:\n                print(1)\n        t -= 1\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    if sorted(arr) == arr:\n        print(0)\n    elif 'N' not in s or 'S' not in s:\n        print(-1)\n    else:\n        begin = -1\n        end = -1\n        temp = sorted(arr)\n        for i in range(n):\n            if temp[i] != arr[i]:\n                begin = i\n                break\n        for i in range(n - 1, -1, -1):\n            if temp[i] != arr[i]:\n                end = i\n                break\n        check = s[:begin + 1] + s[end:]\n        if 'N' in check and 'S' in check:\n            print(1)\n        else:\n            print(2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sorted(a)\n    d = list(input())\n    if a == b:\n        print(0)\n        continue\n    if d.count('N') == n or d.count('N') == 0:\n        print('-1')\n        continue\n    start = -1\n    end = -1\n    for i in range(n):\n        if a[i] != b[i] and start == -1:\n            start = i\n            end = i\n        elif a[i] != b[i]:\n            end = i\n    now = d[:start + 1]\n    now1 = d[end:]\n    now = now + now1\n    now = set(now)\n    if len(now) == 2:\n        print(1)\n    else:\n        print(2)", "_ = int(input())\nwhile _:\n    _ -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    nl = sorted(l)\n    if l == nl:\n        print(0)\n    elif 'N' not in s or 'S' not in s:\n        print(-1)\n    elif s[0] != s[-1]:\n        print(1)\n    else:\n        fn = s.index('N')\n        fs = s.index('S')\n        ln = n - s[::-1].index('N')\n        ls = n - s[::-1].index('S')\n        if l[:fn] + sorted(l[fn:ls]) + l[ls:] == nl or l[:fs] + sorted(l[fs:ln]) + l[ln:] == nl:\n            print(1)\n        else:\n            print(2)", "for _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    pole = input()\n    o = sorted(nums)\n    pre = []\n    for (i, item) in enumerate(pole):\n        k = 0\n        if item == 'N':\n            k = 1\n        if i:\n            k += pre[i - 1]\n        pre.append(k)\n    index = []\n    for (i, item) in enumerate(nums):\n        if item != o[i]:\n            index.append(i)\n    if nums == o:\n        print(0)\n        continue\n    elif pole == 'N' * n or pole == 'S' * n:\n        print(-1)\n        continue\n    if pole[index[0]] != pole[index[-1]]:\n        print(1)\n    elif pole[index[0]] == 'N':\n        if pre[index[0]] < index[0] + 1 or pre[-1] - pre[index[-1]] < len(o) - index[-1] - 1:\n            print(1)\n        else:\n            print(2)\n    elif pre[index[0]] > 0 or pre[-1] - pre[index[-1]] > 0:\n        print(1)\n    else:\n        print(2)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    lo = list(map(int, input().split()))\n    s = sorted(lo)\n    c = list(input())\n    r = -1\n    if lo == s:\n        r = 0\n    if 'N' in c and 'S' in c:\n        if lo == s:\n            r = 0\n        elif c[0] != c[-1]:\n            r = 1\n        else:\n            front = n\n            rear = 0\n            for i in range(n):\n                if lo[i] != s[i]:\n                    front = min(i, front)\n                    rear = max(i, rear)\n            f = 0\n            for i in range(front + 1):\n                if c[i] != c[-1]:\n                    f = 1\n                    break\n            for i in range(rear, n):\n                if c[i] != c[-1]:\n                    f = 1\n                    break\n            if f:\n                r = 1\n            else:\n                r = 2\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    polarity = input()\n    if sorted(a) == a:\n        print(0)\n    elif len(set(polarity)) == 1:\n        print(-1)\n    elif polarity[0] != polarity[-1]:\n        print(1)\n    else:\n        f = 0\n        i = 0\n        p1 = 0\n        p2 = 0\n        while i < n:\n            if f == 0 and polarity[i] == 'N':\n                f = 1\n                p1 = i\n            if polarity[i] == 'S':\n                p2 = i\n            i += 1\n        t1 = a[:p1] + sorted(a[p1:p2 + 1]) + a[p2 + 1:]\n        f = 0\n        i = 0\n        p1 = 0\n        p2 = 0\n        while i < n:\n            if f == 0 and polarity[i] == 'S':\n                f = 1\n                p1 = i\n            if polarity[i] == 'N':\n                p2 = i\n            i += 1\n        t2 = a[:p1] + sorted(a[p1:p2 + 1]) + a[p2 + 1:]\n        if sorted(a) == t1 or sorted(a) == t2:\n            print(1)\n        else:\n            print(2)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef ni():\n    return int(input())\n\ndef si():\n    return str(input())\n\ndef isSorted(A):\n    if not A:\n        return True\n    temp = list(A)\n    temp.sort()\n    return temp == A\nfor t in range(ni()):\n    N = ni()\n    A = li()\n    S = si()\n    new = ''\n    for i in S:\n        if i == 'S':\n            new += '0'\n        else:\n            new += '1'\n    S = new\n    if isSorted(A):\n        print(0)\n        continue\n    if S == '0' * N or S == '1' * N:\n        print(-1)\n        continue\n    if S[0] != S[-1]:\n        print(1)\n        continue\n    st = list(A)\n    st.sort()\n    temp = S[::-1]\n    first = S.find(str(int(S[0]) ^ 1))\n    last = N - 1 - temp.find(str(int(S[0]) ^ 1))\n    if st[:first] == A[:first] or st[last + 1:] == A[last + 1:]:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    opp = {'S': 'N', 'N': 'S'}\n    temp = sorted(a)\n    if a == temp:\n        print(0)\n    elif s[0] != s[-1]:\n        print(1)\n    elif opp[s[0]] not in s:\n        print(-1)\n    else:\n        for i in range(n):\n            if a[i] != temp[i]:\n                s1 = i\n                break\n        for i in range(n - 1, -1, -1):\n            if a[i] != temp[i]:\n                s2 = i\n                break\n        if s[s1] != s[s2] or opp[s[s1]] in s[:s1] + s[s2 + 1:]:\n            print(1)\n        else:\n            print(2)", "def solve(n, s, nums):\n    if sorted(nums) == nums:\n        return 0\n    if 'N' not in s or 'S' not in s:\n        return -1\n    temp = nums.copy()\n    if s[0] == 'N':\n        idx = -1\n        for i in range(n):\n            if s[i] == 'S':\n                idx = i\n        temp[:idx + 1] = sorted(temp[:idx + 1])\n    else:\n        idx = -1\n        for i in range(n):\n            if s[i] == 'N':\n                idx = i\n        temp[:idx + 1] = sorted(temp[:idx + 1])\n    if temp == sorted(temp):\n        return 1\n    temp = nums.copy()\n    if s[-1] == 'N':\n        idx = -1\n        for i in range(n - 1, -1, -1):\n            if s[i] == 'S':\n                idx = i\n        temp[idx:] = sorted(temp[idx:])\n    else:\n        idx = -1\n        for i in range(n - 1, -1, -1):\n            if s[i] == 'N':\n                idx = i\n        temp[idx:] = sorted(temp[idx:])\n    if temp == sorted(temp):\n        return 1\n    return 2\nfor t in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    s = input()\n    print(solve(n, s, li))", "def isSorted(nums):\n    for i in range(1, len(nums)):\n        if nums[i - 1] > nums[i]:\n            return False\n    return True\n\ndef solve(n, s, nums):\n    if isSorted(nums):\n        return 0\n    if 'N' not in s or 'S' not in s:\n        return -1\n    temp = nums.copy()\n    i = s.find('N')\n    j = s.rfind('S')\n    if i < j:\n        temp[i:j + 1] = sorted(temp[i:j + 1])\n        if isSorted(temp):\n            return 1\n    temp = nums.copy()\n    i = s.find('S')\n    j = s.rfind('N')\n    if i < j:\n        temp[i:j + 1] = sorted(temp[i:j + 1])\n        if isSorted(temp):\n            return 1\n    return 2\nfor t in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    s = input()\n    print(solve(n, s, li))", "try:\n    for t in range(int(input())):\n        firstshank = int(input())\n        okaydear = list(map(int, input().split()))\n        starting = input()\n        sorts = sorted(okaydear)\n        if okaydear == sorts:\n            print(0)\n        else:\n            fin = 0\n            phelanhifi = firstshank - 1\n            for i in range(firstshank):\n                if okaydear[i] != sorts[i]:\n                    fin = i\n                    break\n            for i in range(firstshank - 1, -1, -1):\n                if okaydear[i] != sorts[i]:\n                    la = i\n                    break\n            cc = True\n            cc = set()\n            for i in range(fin + 1):\n                cc.add(starting[i])\n            for i in range(firstshank - 1, la - 1, -1):\n                cc.add(starting[i])\n            if len(cc) == 2:\n                print(1)\n            elif starting.count(starting[0]) == firstshank:\n                print(-1)\n            else:\n                print(2)\nexcept EOFError:\n    pass", "alp = 'abcdefghijklmnopqrstuvwxyz'\nALP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nfrom math import ceil, sqrt, factorial, log\nfrom collections import deque\nfrom bisect import bisect_left\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nlis = lambda : list(map(int, input().split()))\nsin = lambda : int(input())\nmany = lambda : map(int, input().split())\nmod = 10 ** 9 + 7\ndp = [[0] * 51 for i in range(51)]\nimport math\n\ndef solve():\n    n = sin()\n    l = lis()\n    s = input()\n    p = l[:]\n    p.sort()\n    if p == l:\n        print(0)\n        return\n    if s[0] != s[-1]:\n        print(1)\n        return\n    se = set(s)\n    if len(se) == 1:\n        print(-1)\n        return\n    ind1 = -1\n    c1 = set()\n    for i in range(n):\n        c1.add(s[i])\n        if p[i] != l[i]:\n            ind1 = i\n            break\n    ind2 = -1\n    c2 = set()\n    for i in range(n - 1, -1, -1):\n        c2.add(s[i])\n        if p[i] != l[i]:\n            ind2 = i\n            break\n    if 'N' in c1 and 'S' in c2 or ('N' in c2 and 'S' in c1):\n        print(1)\n        return\n    print(2)\ntestisisisisisis = int(input())\nfor testis in range(testisisisisisis):\n    solve()", "def arraySortedOrNot(arr, N):\n    if N == 0 or N == 1:\n        return True\n    for i in range(1, N):\n        if arr[i - 1] > arr[i]:\n            return False\n    return True\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    polarityStr = input()\n    boolSort = arraySortedOrNot(A, len(A))\n    if 'S' in polarityStr and 'N' in polarityStr:\n        if boolSort:\n            print(0)\n        elif polarityStr[0] != polarityStr[N - 1]:\n            print(1)\n        else:\n            a = 1\n            b = N - 2\n            while True:\n                if polarityStr[a] != polarityStr[0]:\n                    break\n                a = a + 1\n            while True:\n                if polarityStr[b] != polarityStr[N - 1]:\n                    break\n                b = b - 1\n            l1 = sorted(A)\n            if A[:a] == l1[:a] or A[b + 1:] == l1[b + 1:]:\n                print(1)\n            else:\n                print(2)\n    elif boolSort:\n        print(0)\n    else:\n        print(-1)", "alp = 'abcdefghijklmnopqrstuvwxyz'\nALP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nfrom math import ceil, sqrt, factorial, log\nfrom collections import deque\nfrom bisect import bisect_left\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nlis = lambda : list(map(int, input().split()))\nsin = lambda : int(input())\nmany = lambda : map(int, input().split())\nmod = 10 ** 9 + 7\ndp = [[0] * 51 for i in range(51)]\nimport math\n\ndef solve():\n    n = sin()\n    l = lis()\n    s = input()\n    p = l[:]\n    p.sort()\n    if p == l:\n        print(0)\n        return\n    if s[0] != s[-1]:\n        print(1)\n        return\n    se = set(s)\n    if len(se) == 1:\n        print(-1)\n        return\n    ind1 = -1\n    c1 = set()\n    for i in range(n):\n        c1.add(s[i])\n        if p[i] != l[i]:\n            ind1 = i\n            break\n    ind2 = -1\n    c2 = set()\n    for i in range(n - 1, -1, -1):\n        c1.add(s[i])\n        if p[i] != l[i]:\n            ind2 = i\n            break\n    if 'N' in c1 and 'S' in c1:\n        print(1)\n        return\n    if len(c1) != 2:\n        print(2)\n    else:\n        print(1)\ntestisisisisisis = int(input())\nfor testis in range(testisisisisisis):\n    solve()", "alp = 'abcdefghijklmnopqrstuvwxyz'\nALP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nfrom math import ceil, sqrt, factorial, log\nfrom collections import deque\nfrom bisect import bisect_left\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nlis = lambda : list(map(int, input().split()))\nsin = lambda : int(input())\nmany = lambda : map(int, input().split())\nmod = 10 ** 9 + 7\ndp = [[0] * 51 for i in range(51)]\nimport math\n\ndef solve():\n    n = sin()\n    l = lis()\n    s = input()\n    p = l[:]\n    p.sort()\n    if p == l:\n        print(0)\n        return\n    if s[0] != s[-1]:\n        print(1)\n        return\n    se = set(s)\n    if len(se) == 1:\n        print(-1)\n        return\n    ind1 = -1\n    c1 = set()\n    for i in range(n):\n        c1.add(s[i])\n        if p[i] != l[i]:\n            ind1 = i\n            break\n    ind2 = -1\n    c2 = set()\n    for i in range(n - 1, -1, -1):\n        c1.add(s[i])\n        if p[i] != l[i]:\n            ind2 = i\n            break\n    if 'N' in c1 and 'S' in c2 or ('N' in c1 and 'S' in c2):\n        print(1)\n        return\n    if len(c1) != 2:\n        print(2)\n    else:\n        print(1)\ntestisisisisisis = int(input())\nfor testis in range(testisisisisisis):\n    solve()", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef func():\n    n = inp()\n    l = seq()\n    s = strng()\n    ls = sorted(l)\n    if l == ls:\n        return 0\n    elif s[0] != s[-1]:\n        return 1\n    elif not 'N' in s or not 'S' in s:\n        return -1\n    posmin = -1\n    posmax = -1\n    for i in range(n):\n        if l[i] != ls[i]:\n            posmin = i\n            break\n    for i in range(n - 1, -1, -1):\n        if l[i] != ls[i]:\n            posmax = i\n            break\n    if s[posmin] != s[posmax]:\n        return 1\n    for i in range(posmin):\n        if s[i] != s[posmin]:\n            return 1\n    for i in range(posmax, n):\n        if s[i] != s[posmax]:\n            return 1\n    return 2\nt = inp()\nfor i in range(t):\n    print(func())", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    if 'N' in s and 'S' in s:\n        if l == sorted(l):\n            print('0')\n        else:\n            a = 0\n            b = n - 1\n            if s[a] != s[b]:\n                print('1')\n            else:\n                a = 1\n                b = n - 2\n                while True:\n                    if s[a] != s[0]:\n                        break\n                    a = a + 1\n                while True:\n                    if s[b] != s[n - 1]:\n                        break\n                    b = b - 1\n                l1 = sorted(l)\n                if l[:a] == l1[:a] or l[b + 1:] == l1[b + 1:]:\n                    print('1')\n                else:\n                    print('2')\n    elif l == sorted(l):\n        print('0')\n    else:\n        print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    if 'N' in s and 'S' in s:\n        if l == sorted(l):\n            print('0')\n        else:\n            a = 0\n            b = n - 1\n            if s[a] != s[b]:\n                print('1')\n            else:\n                a = 1\n                b = n - 2\n                while True:\n                    if s[a] != s[0]:\n                        break\n                    a = a + 1\n                while True:\n                    if s[b] != s[n - 1]:\n                        break\n                    b = b - 1\n                l1 = sorted(l)\n                if l[:a] == l1[:a] or l[b + 1:] == l1[b + 1:]:\n                    print('1')\n                else:\n                    print('2')\n    elif l == sorted(l):\n        print('0')\n    else:\n        print('-1')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = input()\n    ele = s[0]\n    c = 0\n    lst1 = lst.copy()\n    lst1.sort()\n    if lst1 == lst:\n        print(0)\n    else:\n        for j in range(1, n):\n            if s[j] != ele:\n                c += 1\n                break\n        if c == 0:\n            print(-1)\n        else:\n            ns = 0\n            sn = 0\n            n1 = s.index('N')\n            s1 = n - s[::-1].index('S') - 1\n            if s1 > n1:\n                l1 = s1 - n1\n            else:\n                l1 = 0\n            n2 = n - s[::-1].index('N') - 1\n            s2 = s.index('S')\n            if n2 > s2:\n                l2 = n2 - s2\n            else:\n                l2 = 0\n            c = 0\n            lsta = lst[:n1]\n            lstb = lst[n1:s1 + 1]\n            lstc = lst[s1 + 1:]\n            lstb.sort()\n            lstf = lsta + lstb + lstc\n            if lstf == lst1:\n                c += 1\n            lsta = lst[:s2]\n            lstb = lst[s2:n2 + 1]\n            lstc = lst[n2 + 1:]\n            lstb.sort()\n            lstf = lsta + lstb + lstc\n            if lstf == lst1:\n                c += 1\n            lsta = lst[:s2]\n            lstb = lst[s2:n2 + 1]\n            lstc = lst[n2 + 1:]\n            lstb.sort()\n            lstf = lsta + lstb + lstc\n            if lstf == lst1:\n                c += 1\n            lsta = lst[:n1]\n            lstb = lst[n1:s1 + 1]\n            lstc = lst[s1 + 1:]\n            lstb.sort()\n            lstf = lsta + lstb + lstc\n            if lstf == lst1:\n                c += 1\n            if c > 0:\n                print(1)\n            else:\n                start = -1\n                pol = 'a'\n                for a in range(1, n):\n                    if lst[a] < lst[a - 1]:\n                        start = a - 1\n                        pol = s[a - 1]\n                        break\n                end = -1\n                for l in range(n - 1, start, -1):\n                    if s[l] != pol:\n                        end = l\n                lsta = lst[:start]\n                lstb = lst[start:end + 1]\n                lstc = lst[end + 1:]\n                lstb.sort()\n                lstf = lsta + lstb + lstc\n                if lstf == lst1:\n                    print(1)\n                else:\n                    print(2)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    if 'N' in s and 'S' in s:\n        if l == sorted(l):\n            print('0')\n        else:\n            a = 0\n            b = n - 1\n            if s[a] != s[b]:\n                print('1')\n            else:\n                a = 1\n                b = n - 2\n                while True:\n                    if s[a] != s[0]:\n                        break\n                    a = a + 1\n                while True:\n                    if s[b] != s[n - 1]:\n                        break\n                    b = b - 1\n                l1 = sorted(l)\n                if l[:a] == l1[:a] or l[b + 1:] == l1[b + 1:]:\n                    print('1')\n                else:\n                    print('2')\n    elif l == sorted(l):\n        print('0')\n    else:\n        print('-1')", "from math import *\nfrom collections import *\nimport os\nfrom io import BytesIO, IOBase\nimport sys\nfrom bisect import *\nfrom heapq import *\nMOD = 1000000007\n\ndef binpow(a, b, m):\n    a %= m\n    x = 1\n    while b > 0:\n        if b & 1:\n            x = x * a % m\n        a = a * a % m\n        b >>= 1\n    return x\n\ndef binser(arr, l, r, x):\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return mid\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sod(n):\n    l = list(str(n))\n    s = 0\n    for i in l:\n        s += int(i)\n    return s\n\ndef prime_factors(num):\n    l = []\n    if num % 2:\n        l.append(2)\n    while num % 2 == 0:\n        num = num / 2\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if not num % i:\n            l.append(i)\n        while num % i == 0:\n            num = num / i\n    if num > 2:\n        l.append(num)\n    return l\n\ndef factmod(n, p):\n    f = defaultdict(int)\n    f[0] = 1\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] * i % MOD\n    return f\n\ndef largestPower(n, p):\n    x = 0\n    while n:\n        n //= p\n        x += n\n    return x\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    res = 1\n    isPrime = [1] * (n + 1)\n    i = 2\n    while i * i <= n:\n        if isPrime[i]:\n            for j in range(2 * i, n, i):\n                isPrime[j] = 0\n        i += 1\n    for i in range(2, n):\n        if isPrime[i]:\n            k = largestPower(n, i)\n            res = res * binpow(i, k, p) % p\n    return res\n\ndef drec(x, y):\n    if y == x + 1:\n        return 'R'\n    if y == x - 1:\n        return 'L'\n    if x < y:\n        return 'D'\n    return 'U'\n\ndef cellhash(x, y):\n    return (x - 1) * m + y\n\ndef bins(l, x, n):\n    i = bisect_left(l, x)\n    if i < n:\n        return i\n    if i:\n        return i - 1\n    else:\n        return n\n\ndef cond(l):\n    for i in range(len(l) - 1):\n        if l[i] == str(int(l[i + 1]) - 1):\n            return False\n    return True\n\ndef isvowel(s):\n    if s in list('aeiou'):\n        return 1\n    return 0\n\ndef countOdd(L, R):\n    N = (R - L) // 2\n    if R % 2 != 0 or L % 2 != 0:\n        N += 1\n    return N\n\ndef tst(A, B, C):\n    return (A | B) & (B | C) & (C | A)\n\ndef palcheck(n, s):\n    (i, j) = (0, n - 1)\n    while i <= j:\n        if s[i] == s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef sakurajima(n):\n    if n < 9:\n        n = 10\n    l = [0]\n    for i in range(1, n + 1):\n        if i % 2:\n            l.append(i)\n        else:\n            l.append(2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if l[i] == i:\n            for j in range(i * i, n + 1, i):\n                if l[j] == j:\n                    l[j] = i\n    return l\n\ndef getfact(x):\n    ret = []\n    while x != 1:\n        ret.append(spf[x])\n        x = x // spf[x]\n    return set(ret)\n\ndef prchck(n):\n    l = [1] * (n + 1)\n    l[1] = 0\n    for i in range(2, n + 1):\n        for j in range(2, int(sqrt(n)) + 1):\n            if j % i == 0:\n                l[j] = 1\n    return l\n\ndef ispal(s, n):\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef bfs(src, dest, ajl, vis):\n    q = deque([src])\n    vis[src] = True\n    while q:\n        i = q.popleft()\n        if i == dest:\n            return True\n        for j in ajl[i]:\n            if not vis[j]:\n                vis[j] = True\n                q.append(j)\n    return False\n\nclass DisjSet:\n\n    def __init__(self, n):\n        self.size = defaultdict(int)\n        self.parent = defaultdict(str)\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def Union(self, x, y):\n        xset = self.find(x)\n        yset = self.find(y)\n        if xset == yset:\n            return\n        if self.size[xset] < self.size[yset]:\n            self.parent[xset] = yset\n            self.size[yset] += self.size[xset]\n        else:\n            self.parent[yset] = xset\n            self.size[xset] += self.size[yset]\n\ndef broly(src, ajl, vis, ans):\n    q = deque([src])\n    while q:\n        i = q.popleft()\n        if not vis[i]:\n            ans.append(i)\n        vis[i] = True\n        for j in ajl[i]:\n            if not vis[j]:\n                q.append(j)\n\ndef dfs(i, ajl, vis, k, par):\n    vis[i] = True\n    if not k:\n        return\n    for j in ajl[i]:\n        if k:\n            print(par, j)\n        if not vis[j]:\n            dfs(j, ajl, vis, k - 1, par)\n\ndef panda(n, l, s):\n    x = s.count('N')\n    print\n    l1 = sorted(l)\n    if l == l1:\n        return 0\n    if not x or x == n:\n        return -1\n    fl = 0\n    if s[0] != s[-1]:\n        return 1\n    (i, j) = (0, n - 1)\n    (fi, fj) = (0, 0)\n    while i < j:\n        if l[i] != l1[i]:\n            if not fi:\n                fi = 1\n        else:\n            i += 1\n        if l[j] != l1[j]:\n            if not fj:\n                fj = 1\n        else:\n            j -= 1\n        if fi and fj:\n            break\n    for i1 in range(i):\n        if s[i1] != s[i1 + 1]:\n            return 1\n    for j1 in range(n - 1, j, -1):\n        if s[j1] != s[j1 - 1]:\n            return 1\n    if i >= j:\n        return 1\n    if s[i] == s[j]:\n        return 2\n    return 1\nt = 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    print(panda(n, l, s))", "from math import *\nfrom collections import *\nimport os\nfrom io import BytesIO, IOBase\nimport sys\nfrom bisect import *\nfrom heapq import *\nMOD = 1000000007\n\ndef binpow(a, b, m):\n    a %= m\n    x = 1\n    while b > 0:\n        if b & 1:\n            x = x * a % m\n        a = a * a % m\n        b >>= 1\n    return x\n\ndef binser(arr, l, r, x):\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return mid\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sod(n):\n    l = list(str(n))\n    s = 0\n    for i in l:\n        s += int(i)\n    return s\n\ndef prime_factors(num):\n    l = []\n    if num % 2:\n        l.append(2)\n    while num % 2 == 0:\n        num = num / 2\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if not num % i:\n            l.append(i)\n        while num % i == 0:\n            num = num / i\n    if num > 2:\n        l.append(num)\n    return l\n\ndef factmod(n, p):\n    f = defaultdict(int)\n    f[0] = 1\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] * i % MOD\n    return f\n\ndef largestPower(n, p):\n    x = 0\n    while n:\n        n //= p\n        x += n\n    return x\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    res = 1\n    isPrime = [1] * (n + 1)\n    i = 2\n    while i * i <= n:\n        if isPrime[i]:\n            for j in range(2 * i, n, i):\n                isPrime[j] = 0\n        i += 1\n    for i in range(2, n):\n        if isPrime[i]:\n            k = largestPower(n, i)\n            res = res * binpow(i, k, p) % p\n    return res\n\ndef drec(x, y):\n    if y == x + 1:\n        return 'R'\n    if y == x - 1:\n        return 'L'\n    if x < y:\n        return 'D'\n    return 'U'\n\ndef cellhash(x, y):\n    return (x - 1) * m + y\n\ndef bins(l, x, n):\n    i = bisect_left(l, x)\n    if i < n:\n        return i\n    if i:\n        return i - 1\n    else:\n        return n\n\ndef cond(l):\n    for i in range(len(l) - 1):\n        if l[i] == str(int(l[i + 1]) - 1):\n            return False\n    return True\n\ndef isvowel(s):\n    if s in list('aeiou'):\n        return 1\n    return 0\n\ndef countOdd(L, R):\n    N = (R - L) // 2\n    if R % 2 != 0 or L % 2 != 0:\n        N += 1\n    return N\n\ndef tst(A, B, C):\n    return (A | B) & (B | C) & (C | A)\n\ndef palcheck(n, s):\n    (i, j) = (0, n - 1)\n    while i <= j:\n        if s[i] == s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef sakurajima(n):\n    if n < 9:\n        n = 10\n    l = [0]\n    for i in range(1, n + 1):\n        if i % 2:\n            l.append(i)\n        else:\n            l.append(2)\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if l[i] == i:\n            for j in range(i * i, n + 1, i):\n                if l[j] == j:\n                    l[j] = i\n    return l\n\ndef getfact(x):\n    ret = []\n    while x != 1:\n        ret.append(spf[x])\n        x = x // spf[x]\n    return set(ret)\n\ndef prchck(n):\n    l = [1] * (n + 1)\n    l[1] = 0\n    for i in range(2, n + 1):\n        for j in range(2, int(sqrt(n)) + 1):\n            if j % i == 0:\n                l[j] = 1\n    return l\n\ndef ispal(s, n):\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef bfs(src, dest, ajl, vis):\n    q = deque([src])\n    vis[src] = True\n    while q:\n        i = q.popleft()\n        if i == dest:\n            return True\n        for j in ajl[i]:\n            if not vis[j]:\n                vis[j] = True\n                q.append(j)\n    return False\n\nclass DisjSet:\n\n    def __init__(self, n):\n        self.size = defaultdict(int)\n        self.parent = defaultdict(str)\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def Union(self, x, y):\n        xset = self.find(x)\n        yset = self.find(y)\n        if xset == yset:\n            return\n        if self.size[xset] < self.size[yset]:\n            self.parent[xset] = yset\n            self.size[yset] += self.size[xset]\n        else:\n            self.parent[yset] = xset\n            self.size[xset] += self.size[yset]\n\ndef broly(src, ajl, vis, ans):\n    q = deque([src])\n    while q:\n        i = q.popleft()\n        if not vis[i]:\n            ans.append(i)\n        vis[i] = True\n        for j in ajl[i]:\n            if not vis[j]:\n                q.append(j)\n\ndef dfs(i, ajl, vis, k, par):\n    vis[i] = True\n    if not k:\n        return\n    for j in ajl[i]:\n        if k:\n            print(par, j)\n        if not vis[j]:\n            dfs(j, ajl, vis, k - 1, par)\n\ndef panda(n, l, s):\n    x = s.count('N')\n    print\n    l1 = sorted(l)\n    if l == l1:\n        return 0\n    if not x or x == n:\n        return -1\n    fl = 0\n    if s[0] != s[-1]:\n        return 1\n    (i, j) = (0, n - 1)\n    (fi, fj) = (0, 0)\n    while i < j:\n        if l[i] != l1[i]:\n            if not fi:\n                fi = 1\n        else:\n            i += 1\n        if l[j] != l1[j]:\n            if not fj:\n                fj = 1\n        else:\n            j -= 1\n        if fi and fj:\n            break\n    for i1 in range(i):\n        if s[i1] != s[i]:\n            return 1\n    for j1 in range(n - 1, j, -1):\n        if s[j1] != s[j]:\n            return 1\n    if i >= j:\n        return 1\n    if s[i] == s[j]:\n        return 2\n    return 1\nt = 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = input()\n    print(panda(n, l, s))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    arr1 = []\n    arr1 = arr.copy()\n    arr1.sort()\n    t1 = 0\n    t2 = 0\n    for i in range(n):\n        if arr[n - 1 - i] != arr1[n - 1 - i] and t2 == 0:\n            tester2 = n - 1 - i\n            t2 = 1\n        if arr[i] != arr1[i] and t1 == 0:\n            tester1 = i\n            t1 = 1\n        if t1 == 1 and t2 == 1:\n            break\n    if arr1 == arr:\n        print(0)\n    elif len(set(s)) == 1:\n        print(-1)\n    elif s[0] != s[n - 1]:\n        print(1)\n    elif set(s[:tester1 + 1]) == set(s[tester2:]) and len(set(s[:tester1 + 1])) == 2:\n        print(1)\n    elif set(s[:tester1 + 1]) != set(s[tester2:]):\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    st = list(input())\n    f = []\n    res = sorted(arr)\n    for i in range(0, n):\n        if arr[i] != res[i]:\n            f.append(i)\n    com = st[0]\n    flag = 0\n    for i in st:\n        if i != com:\n            flag = 1\n    if len(f) == 0:\n        print(0)\n    elif flag == 0:\n        print(-1)\n    else:\n        r = len(f)\n        flag1 = 0\n        for i in range(0, f[0] + 1):\n            for j in range(n - 1, f[r - 1] - 1, -1):\n                if st[i] != st[j]:\n                    print(1)\n                    flag1 = 1\n                    break\n            if flag1 == 1:\n                break\n        if flag1 == 0:\n            print(2)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    lo = list(map(int, input().split()))\n    s = sorted(lo)\n    c = list(input())\n    r = -1\n    if lo == s:\n        r = 0\n    if 'N' in c and 'S' in c:\n        if lo == s:\n            r = 0\n        elif c[0] != c[-1]:\n            r = 1\n        else:\n            front = n\n            rear = 0\n            for i in range(n):\n                if lo[i] != s[i]:\n                    front = min(i, front)\n                    rear = max(i, rear)\n            f = 0\n            for i in range(front + 1):\n                if c[i] != c[-1]:\n                    f = 1\n                    break\n            for i in range(rear, n):\n                if c[i] != c[-1]:\n                    f = 1\n                    break\n            if f:\n                r = 1\n            else:\n                r = 2\n    print(r)", "try:\n    for t in range(int(input())):\n        number = int(input())\n        ant = list(map(int, input().split()))\n        starting = input()\n        sorts = sorted(ant)\n        if ant == sorts:\n            print(0)\n        else:\n            fin = 0\n            last = number - 1\n            for i in range(number):\n                if ant[i] != sorts[i]:\n                    fin = i\n                    break\n            for i in range(number - 1, -1, -1):\n                if ant[i] != sorts[i]:\n                    la = i\n                    break\n            o = True\n            o = set()\n            for i in range(fin + 1):\n                o.add(starting[i])\n            for i in range(number - 1, la - 1, -1):\n                o.add(starting[i])\n            if len(o) == 2:\n                print(1)\n            elif starting.count(starting[0]) == number:\n                print(-1)\n            else:\n                print(2)\nexcept EOFError:\n    pass", "for _ in range(int(input())):\n    N = int(input())\n    l = list(map(int, input().split()))\n    so = sorted(l)\n    c = list(input())\n    ans = -1\n    if l == so:\n        ans = 0\n    if 'N' in c and 'S' in c:\n        if l == so:\n            ans = 0\n        elif c[0] != c[-1]:\n            ans = 1\n        else:\n            front = N\n            rear = 0\n            for i in range(N):\n                if l[i] != so[i]:\n                    front = min(i, front)\n                    rear = max(i, rear)\n            flag = 0\n            for i in range(front + 1):\n                if c[i] != c[-1]:\n                    flag = 1\n                    break\n            for i in range(rear, N):\n                if c[i] != c[-1]:\n                    flag = 1\n                    break\n            if flag:\n                ans = 1\n            else:\n                ans = 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = input()\n    sorted_lst = sorted(lst)\n    if n == 1:\n        print(0)\n    elif lst != sorted_lst:\n        if s[0] != s[-1]:\n            print(1)\n        elif s == 'N' * n or s == 'S' * n:\n            print(-1)\n        else:\n            for i in range(n):\n                if lst[i] != sorted_lst[i]:\n                    start = i\n                    break\n            for i in range(n - 1, -1, -1):\n                if lst[i] != sorted_lst[i]:\n                    end = i\n                    break\n            if s[start] != s[end]:\n                print(1)\n            else:\n                for i in range(start):\n                    if s[i] != s[end]:\n                        print(1)\n                        break\n                else:\n                    for i in range(end, n):\n                        if s[i] != s[start]:\n                            print(1)\n                            break\n                    else:\n                        print(2)\n    else:\n        print(0)", "for i in range(int(input())):\n    n = int(input())\n    A = [int(k) for k in input().split()]\n    s = input()\n    S = 0\n    N = 0\n    for k in s:\n        if k == 'N':\n            N += 1\n        else:\n            S += 1\n    if S == n and A != sorted(A) or (N == n and A != sorted(A)):\n        print(-1)\n    elif A == sorted(A):\n        print(0)\n    elif s[0] != s[-1]:\n        print(1)\n    else:\n        z = 0\n        d = sorted(A)\n        S = A.index(d[-1])\n        P = A.index(d[0])\n        for k in range(n):\n            if A[k] != d[k]:\n                z += 1\n                S = min(k, S)\n                P = max(k, P)\n                if k >= 1:\n                    d.append([s[k - 1], s[k]])\n        S1 = 0\n        P1 = 0\n        for k in range(n):\n            if k < S:\n                if s[k] != s[P]:\n                    S1 = 1\n            if k >= P:\n                if s[k] != s[S]:\n                    P1 = 1\n        if S1 == 1 or P1 == 1 or s[S] != s[P]:\n            print(1)\n        else:\n            print(2)", "n_test_cases = int(input())\nresults = []\nfor _ in range(n_test_cases):\n    n_ints = int(input())\n    A = [int(x) for x in input().split()]\n    polarity = input()\n    A_sorted = sorted(A)\n    if len(A) == 1:\n        results.append(0)\n        continue\n    if A == A_sorted:\n        results.append(0)\n        continue\n    if 'S' not in polarity or 'N' not in polarity:\n        results.append(-1)\n        continue\n    is_ordered = [A_sorted[i] == A[i] for i in range(len(A))]\n    first_false = is_ordered.index(False)\n    last_false = len(is_ordered) - 1 - is_ordered[::-1].index(False)\n    if 'N' in polarity[:first_false + 1] and 'S' in polarity[last_false:] or ('S' in polarity[:first_false + 1] and 'N' in polarity[last_false:]):\n        results.append(1)\n    else:\n        results.append(2)\nfor result in results:\n    print(result)", "T = int(input())\nwhile T:\n    T -= 1\n    N = int(input())\n    arr = list(map(int, input().split()))\n    polar = input()\n    sorted_arr = sorted(arr)\n    if arr == sorted_arr:\n        print(0)\n        continue\n    if polar[0] != polar[-1]:\n        print(1)\n        continue\n    if polar.count('N') == len(polar) or polar.count('S') == len(polar):\n        print(-1)\n        continue\n    start = float('inf')\n    end = float('-inf')\n    for i in range(N):\n        if arr[i] != sorted_arr[i]:\n            start = min(start, i)\n            end = max(end, i)\n    if polar[start] != polar[end]:\n        print(1)\n        continue\n    else:\n        flag = False\n        for i in range(start):\n            if polar[i] != polar[end]:\n                flag = True\n        for j in range(end + 1, N):\n            if polar[j] != polar[start]:\n                flag = True\n        if flag:\n            print(1)\n        else:\n            print(2)", "n_test_cases = int(input())\nresults = []\nfor _ in range(n_test_cases):\n    n_ints = int(input())\n    A = [int(x) for x in input().split()]\n    polarity = input()\n    A_sorted = sorted(A)\n    if len(A) == 1:\n        results.append(0)\n        continue\n    if A == A_sorted:\n        results.append(0)\n        continue\n    if 'S' not in polarity or 'N' not in polarity:\n        results.append(-1)\n        continue\n    is_ordered = [A_sorted[i] == A[i] for i in range(len(A))]\n    first_false = is_ordered.index(False)\n    last_false = len(is_ordered) - 1 - is_ordered[::-1].index(False)\n    if 'N' in polarity[:first_false + 1] and 'S' in polarity[last_false:] or ('S' in polarity[:first_false + 1] and 'N' in polarity[last_false:]):\n        results.append(1)\n    else:\n        results.append(2)\nfor result in results:\n    print(result)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    arr = []\n    for j in a:\n        arr.append(j)\n    arr.sort()\n    c = c1 = c2 = d = e = 0\n    for j in range(n - 1):\n        if a[j] > a[j + 1]:\n            c = 1\n            break\n    if c == 0:\n        print(0)\n    else:\n        for j in range(n):\n            if s[j] == 'N':\n                c1 = c1 + 1\n            else:\n                c2 = c2 + 1\n        if c1 == 0 or c2 == 0:\n            print(-1)\n        else:\n            for j in range(n - 1):\n                if s[j] != s[n - 1]:\n                    p1 = j\n                    break\n            for j in range(n - 1, 0, -1):\n                if s[j] != s[0]:\n                    p2 = j\n                    break\n            for j in range(p1):\n                if a[j] != arr[j]:\n                    d = 1\n                    break\n            for j in range(p2 + 1, n):\n                if a[j] != arr[j]:\n                    e = 1\n                    break\n            if d == 1 and e == 1:\n                print(2)\n            else:\n                print(1)", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import sqrt\n\nclass Solution_Max:\n\n    def __init__(self, maxsize):\n        self.maxsize = maxsize\n        self.size = 0\n        self.Heap = [0] * (self.maxsize + 1)\n        self.Heap[0] = sys.maxsize\n        self.FRONT = 1\n\n    def parent(self, pos):\n        return pos // 2\n\n    def leftChild(self, pos):\n        return 2 * pos\n\n    def rightChild(self, pos):\n        return 2 * pos + 1\n\n    def isLeaf(self, pos):\n        if pos >= self.size // 2 and pos <= self.size:\n            return True\n        return False\n\n    def swap(self, fpos, spos):\n        (self.Heap[fpos], self.Heap[spos]) = (self.Heap[spos], self.Heap[fpos])\n\n    def maxHeapify(self, pos):\n        if not self.isLeaf(pos):\n            if self.Heap[pos] < self.Heap[self.leftChild(pos)] or self.Heap[pos] < self.Heap[self.rightChild(pos)]:\n                if self.Heap[self.leftChild(pos)] > self.Heap[self.rightChild(pos)]:\n                    self.swap(pos, self.leftChild(pos))\n                    self.maxHeapify(self.leftChild(pos))\n                else:\n                    self.swap(pos, self.rightChild(pos))\n                    self.maxHeapify(self.rightChild(pos))\n\n    def insert(self, element):\n        if self.size >= self.maxsize:\n            return\n        self.size += 1\n        self.Heap[self.size] = element\n        current = self.size\n        while self.Heap[current] > self.Heap[self.parent(current)]:\n            self.swap(current, self.parent(current))\n            current = self.parent(current)\n\n    def extractMax(self):\n        popped = self.Heap[self.FRONT]\n        self.Heap[self.FRONT] = self.Heap[self.size]\n        self.size -= 1\n        self.maxHeapify(self.FRONT)\n        return popped\n\nclass Solution_Min:\n\n    def __init__(self, maxsize):\n        self.maxsize = maxsize\n        self.size = 0\n        self.Heap = [0] * (self.maxsize + 1)\n        self.Heap[0] = -1 * sys.maxsize\n        self.FRONT = 1\n\n    def parent(self, pos):\n        return pos // 2\n\n    def leftChild(self, pos):\n        return 2 * pos\n\n    def rightChild(self, pos):\n        return 2 * pos + 1\n\n    def isLeaf(self, pos):\n        return pos * 2 > self.size\n\n    def swap(self, fpos, spos):\n        (self.Heap[fpos], self.Heap[spos]) = (self.Heap[spos], self.Heap[fpos])\n\n    def minHeapify(self, pos):\n        if not self.isLeaf(pos):\n            if self.Heap[pos] > self.Heap[self.leftChild(pos)] or self.Heap[pos] > self.Heap[self.rightChild(pos)]:\n                if self.Heap[self.leftChild(pos)] < self.Heap[self.rightChild(pos)]:\n                    self.swap(pos, self.leftChild(pos))\n                    self.minHeapify(self.leftChild(pos))\n                else:\n                    self.swap(pos, self.rightChild(pos))\n                    self.minHeapify(self.rightChild(pos))\n\n    def insert(self, element):\n        if self.size >= self.maxsize:\n            return\n        self.size += 1\n        self.Heap[self.size] = element\n        current = self.size\n        while self.Heap[current] < self.Heap[self.parent(current)]:\n            self.swap(current, self.parent(current))\n            current = self.parent(current)\n\n    def minHeap(self):\n        for pos in range(self.size // 2, 0, -1):\n            self.minHeapify(pos)\n\n    def remove(self):\n        popped = self.Heap[self.FRONT]\n        self.Heap[self.FRONT] = self.Heap[self.size]\n        self.size -= 1\n        self.minHeapify(self.FRONT)\n        return popped\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef isPowerOf2(x):\n    return x and (not x & x - 1)\n\ndef power2(n):\n    return len(str(bin(n & ~(n - 1))) - 1)\n\ndef sumn(n):\n    return n * (n + 1) // 2\n\ndef sqsum(n):\n    return n * (n + 1) * (2 * n + 1) // 6\n\ndef cusum(n):\n    return sumn(n) ** 2\n\ndef dif(lista, listb):\n    return len(set(lista + listb))\n\ndef prefixSum(arr):\n    for i in range(1, len(arr)):\n        arr[i] = arr[i] + arr[i - 1]\n    return arr\n\ndef countSetBits(n):\n    if n == 0:\n        return 0\n    else:\n        return (n & 1) + countSetBits(n >> 1)\n\ndef Result(arr, s1):\n    mx = 2147483647\n    mn = -2147483648\n    res1 = 1\n    res2 = 2\n    res3 = 0\n    res4 = -1\n    count = 0\n    count1 = 0\n    count3 = 0\n    if arr == sorted(arr):\n        print('0')\n        return\n    elif s1.count('N') == 0 or s1.count('S') == 0:\n        print('-1')\n        return\n    n = len(arr)\n    list1 = arr\n    arr = sorted(arr)\n    a = mx\n    b = mn\n    for i in range(0, n):\n        if arr[i] != list1[i]:\n            a = min(i, a)\n            b = max(i, b)\n    true1 = False\n    true2 = False\n    for i in range(0, a):\n        if s1[i] != s1[b]:\n            true1 = True\n    for i in range(b, n):\n        if s1[i] != s1[a]:\n            true2 = True\n    if s1[a] != s1[b] or (true1 or true2):\n        print(res1)\n        return\n    else:\n        print(res2)\n        return\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    s1 = input()\n    Result(list1, s1)", "n_test_cases = int(input())\nresults = []\nfor _ in range(n_test_cases):\n    n_ints = int(input())\n    A = [int(x) for x in input().split()]\n    polarity = input()\n    A_sorted = sorted(A)\n    if len(A) == 1:\n        results.append(0)\n    elif A == A_sorted:\n        results.append(0)\n    elif 'S' not in polarity or 'N' not in polarity:\n        results.append(-1)\n    elif polarity[0] != polarity[-1]:\n        results.append(1)\n    else:\n        is_ordered = [A_sorted[i] == A[i] for i in range(len(A))]\n        first_false = is_ordered.index(False)\n        last_false = len(is_ordered) - 1 - is_ordered[::-1].index(False)\n        if 'N' in polarity[:first_false + 1] and 'S' in polarity[last_false:] or ('S' in polarity[:first_false + 1] and 'N' in polarity[last_false:]):\n            results.append(1)\n        else:\n            results.append(2)\nfor result in results:\n    print(result)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    s = input()\n    if sorted(arr) == arr:\n        print(0)\n    elif s.count('N') == n or s.count('N') == 0:\n        print(-1)\n    else:\n        a = sorted(arr)\n        b = arr\n        start = 2147483647\n        last = -2147483647 - 1\n        for i in range(n):\n            if a[i] != b[i]:\n                start = min([i, start])\n                last = max([last, i])\n        f1 = False\n        f2 = False\n        for i in range(start):\n            if s[i] != s[last]:\n                f1 = True\n        for i in range(last, n):\n            if s[i] != s[start]:\n                f2 = True\n        if s[start] != s[last] or f1 or f2:\n            print(1)\n        else:\n            print(2)", "def solve(a, p, s):\n    if a == s:\n        return 0\n    elif p[0] != p[-1]:\n        return 1\n    elif ('N' in p) == False or ('S' in p) == False:\n        return -1\n    if p[0] == p[-1]:\n        start = 2147483647\n        last = -2147483648\n        for i in range(n):\n            if s[i] != a[i]:\n                start = min(i, start)\n                last = max(last, i)\n        a1 = False\n        a2 = False\n        for i in range(start):\n            if p[i] != p[start]:\n                a1 = True\n        for i in range(last, n):\n            if p[i] != p[start]:\n                a1 = True\n        if p[start] != p[last] or a1 or a2:\n            return 1\n        else:\n            return 2\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = input()\n    s = sorted(a)\n    print(solve(a, p, s))", "try:\n    for test in range(int(input())):\n        n = int(input())\n        mapp = list(map(int, input().split()))\n        sortedmapp = sorted(mapp)\n        strt = input()\n        if mapp == sortedmapp:\n            print(0)\n        else:\n            fnnn = 0\n            lst = n - 1\n            for i in range(n):\n                if mapp[i] != sortedmapp[i]:\n                    fnnn = i\n                    break\n            for i in range(n - 1, -1, -1):\n                if mapp[i] != sortedmapp[i]:\n                    la = i\n                    break\n            zeus = True\n            zeus = set()\n            for i in range(fnnn + 1):\n                zeus.add(strt[i])\n            for i in range(n - 1, la - 1, -1):\n                zeus.add(strt[i])\n            if len(zeus) == 2:\n                print(1)\n            elif strt.count(strt[0]) == n:\n                print(-1)\n            else:\n                print(2)\nexcept EOFError:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input()\n    d = a.copy()\n    d.sort()\n    flag = 1\n    for i in range(n):\n        if d[i] != a[i]:\n            flag = 0\n            break\n    if flag == 1:\n        print(0)\n    else:\n        countn = 0\n        counts = 0\n        for i in range(n):\n            if s[i] == 'N':\n                countn += 1\n            else:\n                counts += 1\n        if countn == 0 or counts == 0:\n            print(-1)\n        elif s[0] != s[n - 1]:\n            print(1)\n        else:\n            flag = 1\n            for i in range(n - 1, -1, -1):\n                if a[i] != d[i]:\n                    if s[i] == s[0]:\n                        flag = 0\n                    break\n                elif s[i] != s[0]:\n                    break\n            if flag == 1:\n                print(1)\n            else:\n                flag = 1\n                for i in range(n):\n                    if a[i] != d[i]:\n                        if s[i] == s[n - 1]:\n                            flag = 0\n                        break\n                    elif s[i] != s[0]:\n                        break\n                if flag == 1:\n                    print(1)\n                else:\n                    print(2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = input()\n    c = sorted(a)\n    d = 0\n    e = f = 0\n    if a != c:\n        if 'N' not in b or 'S' not in b:\n            print(-1)\n            continue\n        if b[0] != b[-1]:\n            print(1)\n            continue\n        for i in range(n):\n            if a[i] != c[i]:\n                e = i\n                break\n        for i in range(n - 1, 0, -1):\n            if a[i] != c[i]:\n                f = i\n                break\n        if 'N' in b[:e + 1] and 'S' in b[f:] or ('S' in b[:e + 1] and 'N' in b[f:]):\n            print(1)\n        else:\n            print(2)\n    else:\n        print(0)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    A = list(map(int, input().split()))\n    s = input()\n    B = sorted(A)\n    k = set(s)\n    if A == B:\n        print(0)\n        t -= 1\n        continue\n    if 'N' not in k or 'S' not in k:\n        print(-1)\n        t -= 1\n        continue\n    i = 0\n    while i < n and A[i] == B[i]:\n        i += 1\n    j = n - 1\n    while j >= 0 and A[j] == B[j]:\n        j -= 1\n    ok = 0\n    for k in range(i + 1):\n        if s[k] != s[j]:\n            ok = 1\n            break\n    for k in range(n - 1, j - 1, -1):\n        if s[k] != s[i]:\n            ok = 1\n            break\n    if i < j and ok:\n        print(1)\n    else:\n        print(2)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    s = input()\n    arr2 = []\n    for i in arr:\n        arr2.append(i)\n    arr.sort()\n    if arr == arr2:\n        print(0)\n    elif 'S' not in s or 'N' not in s:\n        print(-1)\n    else:\n        start = 99999999999999999\n        end = -999999999999999\n        for i in range(n):\n            if arr[i] != arr2[i]:\n                start = min(i, start)\n                end = max(end, i)\n        f1 = False\n        f2 = False\n        for i in range(start):\n            if s[i] != s[end]:\n                f1 = True\n        for i in range(end, n):\n            if s[i] != s[start]:\n                f2 = True\n        if s[start] != s[end] or f1 or f2:\n            print(1)\n        else:\n            print(2)", "def getCount():\n    for k in range(num):\n        if arr1[k] != sorted[k]:\n            break\n    pol = arr2[k]\n    if pol == 'N':\n        for l in range(num - 1, k, -1):\n            if arr1[l] != sorted[l] and arr2[l] == 'N':\n                break\n            if (arr1[l] != sorted[l] or arr1[l] == sorted[l]) and arr2[l] == 'S':\n                return 1\n    elif pol == 'S':\n        for l in range(num - 1, k, -1):\n            if arr1[l] != sorted[l] and arr2[l] == 'S':\n                break\n            if (arr1[l] != sorted[l] or arr1[l] == sorted[l]) and arr2[l] == 'N':\n                return 1\n    pol2 = arr2[l]\n    if pol2 == 'S':\n        for g in range(k + 1):\n            if arr2[g] == 'N':\n                return 1\n    else:\n        for g in range(k + 1):\n            if arr2[g] == 'S':\n                return 1\n    return 2\nn = int(input())\nfor _ in range(n):\n    num = int(input())\n    arr1 = list(map(int, input().split()))\n    arr2 = input()\n    sorted = []\n    for i in arr1:\n        sorted.append(i)\n    sorted.sort()\n    if sorted == arr1:\n        print('0')\n    elif 'S' not in arr2 or 'N' not in arr2:\n        print('-1')\n    elif arr2[0] == 'S' and arr2[len(arr2) - 1] == 'N' or (arr2[0] == 'N' and arr2[len(arr2) - 1] == 'S'):\n        print('1')\n    else:\n        print(getCount())", "import copy\nt = int(input())\nfor y in range(t):\n    n = int(input())\n    org = list(map(int, input().split()))\n    pol = list(input())\n    srt = copy.deepcopy(org)\n    srt.sort()\n    if srt == org:\n        print(0)\n        continue\n    if 'N' not in pol or 'S' not in pol:\n        print(-1)\n        continue\n    f = 0\n    r = n - 1\n    for y in range(f, r + 1):\n        if org[y] == srt[y]:\n            f += 1\n        else:\n            break\n    for y in range(r, f - 1, -1):\n        if org[y] == srt[y]:\n            r -= 1\n        else:\n            break\n    c = pol[:f]\n    v = pol[r + 1:]\n    m = pol[f:r + 1]\n    a = pol[f]\n    b = pol[r]\n    if a != b:\n        print(1)\n    elif a == 'N' and 'S' in v:\n        print(1)\n    elif a == 'S' and 'N' in v:\n        print(1)\n    elif b == 'N' and 'S' in c:\n        print(1)\n    elif b == 'S' and 'N' in c:\n        print(1)\n    elif 'N' in c and 'S' in v:\n        print(1)\n    elif 'S' in c and 'N' in v:\n        print(1)\n    else:\n        print(2)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = input()\n    arr1 = sorted(arr)\n    if arr == arr1:\n        print(0)\n        continue\n    if s.count('N') in [n, 0]:\n        print(-1)\n        continue\n    (pre, post) = (n + 1, -1)\n    for i in range(n):\n        if arr[i] != arr1[i]:\n            pre = min(i, pre)\n            post = max(i, post)\n    (a, b) = (False, False)\n    for i in range(pre):\n        if s[i] != s[post]:\n            a = True\n    for i in range(post, n):\n        if s[i] != s[pre]:\n            b = True\n    if s[pre] != s[post] or a or b:\n        print(1)\n    else:\n        print(2)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    l = list(map(int, input().split()))\n    so = sorted(l)\n    c = list(input())\n    r = -1\n    if l == so:\n        r = 0\n    if 'N' in c and 'S' in c:\n        if l == so:\n            r = 0\n        elif c[0] != c[-1]:\n            r = 1\n        else:\n            front = N\n            rear = 0\n            for i in range(N):\n                if l[i] != so[i]:\n                    front = min(i, front)\n                    rear = max(i, rear)\n            f = 0\n            for i in range(front + 1):\n                if c[i] != c[-1]:\n                    f = 1\n                    break\n            for i in range(rear, N):\n                if c[i] != c[-1]:\n                    f = 1\n                    break\n            if f:\n                r = 1\n            else:\n                r = 2\n    print(r)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input().strip()\n    if a == sorted(a) or n == 1:\n        print(0)\n        continue\n    if s.count('N') == n or s.count('S') == n:\n        print(-1)\n        continue\n    if s[0] == 'N' and s[-1] == 'S' or (s[0] == 'S' and s[-1] == 'N'):\n        print(1)\n    else:\n        b = sorted(a)\n        start = s[0]\n        (A, B) = (0, 0)\n        for i in range(n):\n            if s[i] != start:\n                A = i\n                break\n        for i in range(n - 1, -1, -1):\n            if s[i] != start:\n                B = i\n                break\n        if b[:A] == a[:A] or b[B + 1:] == a[B + 1:]:\n            print(1)\n        else:\n            print(2)", "for t in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split(' ')))\n    dirc = input()\n    if lst == sorted(lst):\n        print(0)\n    elif dirc[0] != dirc[n - 1]:\n        print(1)\n    elif 'N' in dirc and 'S' in dirc:\n        i = n - 1\n        while dirc[0] == dirc[i]:\n            i -= 1\n        else:\n            if sorted(lst[:i + 1]) + lst[i + 1:] == sorted(lst):\n                print(1)\n            else:\n                i = 0\n                while dirc[n - 1] == dirc[i]:\n                    i += 1\n                else:\n                    if lst[:i] + sorted(lst[i:]) == sorted(lst):\n                        print(1)\n                    else:\n                        print(2)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = input().strip()\n    if a == sorted(a) or n == 1:\n        print(0)\n        continue\n    if s.count('N') == n or s.count('S') == n:\n        print(-1)\n        continue\n    if s[0] == 'N' and s[-1] == 'S' or (s[0] == 'S' and s[-1] == 'N'):\n        print(1)\n    else:\n        for i in range(n - 1, -1, -1):\n            if s[0] != s[i]:\n                y = i\n                break\n        for i in range(n):\n            if s[-1] != s[i]:\n                x = i\n                break\n        a1 = a[:x] + sorted(a[x:])\n        a2 = sorted(a[:y + 1]) + a[y + 1:]\n        b = sorted(a)\n        if b == a1 or b == a2:\n            print(1)\n        else:\n            print(2)"]