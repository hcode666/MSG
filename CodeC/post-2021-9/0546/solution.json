["for _ in range(int(input())):\n    (nn, qqqq) = map(int, input().split())\n    dddd = {i: 0 for i in range(1, nn + 1)}\n    aaaa = {i: [] for i in range(1, nn + 1)}\n    for _ in range(nn - 1):\n        (xxxx, yyyy) = map(int, input().split())\n        dddd[xxxx] += 1\n        dddd[yyyy] += 1\n    answer = 0\n    for i in dddd:\n        answer += dddd[i] * (dddd[i] + 1) // 2\n    answer -= nn - 1\n    print(answer)\n    for _ in range(qqqq):\n        (wwww, xxxx, yyyy, zzzz) = map(int, input().split())\n        cccc = answer\n        cccc -= dddd[wwww]\n        cccc -= dddd[xxxx]\n        cccc += dddd[yyyy]\n        cccc += dddd[zzzz]\n        if wwww == yyyy and xxxx == zzzz or (wwww == zzzz and xxxx == yyyy):\n            cccc += 0\n        elif wwww == yyyy or wwww == zzzz or xxxx == yyyy or (xxxx == zzzz):\n            cccc += 1\n        else:\n            cccc += 2\n        print(cccc)", "for _ in range(int(input())):\n    (nn, qqqq) = map(int, input().split())\n    dddd = {i: 0 for i in range(1, nn + 1)}\n    aaaa = {i: [] for i in range(1, nn + 1)}\n    for _ in range(nn - 1):\n        (xxxx, yyyy) = map(int, input().split())\n        dddd[xxxx] += 1\n        dddd[yyyy] += 1\n    answer = 0\n    for i in dddd:\n        answer += dddd[i] * (dddd[i] + 1) // 2\n    answer -= nn - 1\n    print(answer)\n    for _ in range(qqqq):\n        (wwww, xxxx, yyyy, zzzz) = map(int, input().split())\n        cccc = answer\n        cccc -= dddd[wwww]\n        cccc -= dddd[xxxx]\n        cccc += dddd[yyyy]\n        cccc += dddd[zzzz]\n        if wwww == yyyy and xxxx == zzzz or (wwww == zzzz and xxxx == yyyy):\n            cccc += 0\n        elif wwww == yyyy or wwww == zzzz or xxxx == yyyy or (xxxx == zzzz):\n            cccc += 1\n        else:\n            cccc += 2\n        print(cccc)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for iii in y:\n        sol = sol + y[iii] * (y[iii] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= y[z]\n        a -= y[s]\n        a += y[k]\n        a += y[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    yn = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        yn[s] += 1\n        yn[k] += 1\n    sol = 0\n    for i in yn:\n        sol = sol + yn[i] * (yn[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= yn[z]\n        a -= yn[s]\n        a += yn[k]\n        a += yn[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    d = {i: 0 for i in range(1, n + 1)}\n    a = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        (x, y) = map(int, input().split())\n        d[x] += 1\n        d[y] += 1\n    s = 0\n    for i in d:\n        s = s + d[i] * (d[i] + 1) // 2\n    s -= n - 1\n    print(s)\n    for _ in range(q):\n        (w, x, y, z) = map(int, input().split())\n        c = s\n        c -= d[w]\n        c -= d[x]\n        c += d[y]\n        c += d[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a13 = sol\n        a13 -= y[z]\n        a13 -= y[s]\n        a13 += y[k]\n        a13 += y[t]\n        if z == k and s == t or (z == t and s == k):\n            a13 += 0\n        elif z == k or z == t or s == k or (s == t):\n            a13 += 1\n        else:\n            a13 += 2\n        print(a13)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    x = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        x[s] += 1\n        x[k] += 1\n    sol = 0\n    for i in x:\n        sol = sol + x[i] * (x[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= x[z]\n        a -= x[s]\n        a += x[k]\n        a += x[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a0 = sol\n        a0 -= y[z]\n        a0 -= y[s]\n        a0 += y[k]\n        a0 += y[t]\n        if z == k and s == t or (z == t and s == k):\n            a0 += 0\n        elif z == k or z == t or s == k or (s == t):\n            a0 += 1\n        else:\n            a0 += 2\n        print(a0)", "for _ in range(int(input())):\n    (c, p) = map(int, input().split())\n    m = {i: 0 for i in range(1, c + 1)}\n    n = {i: [] for i in range(1, c + 1)}\n    for _ in range(c - 1):\n        (s, k) = map(int, input().split())\n        m[s] += 1\n        m[k] += 1\n    sol = 0\n    for i in m:\n        sol = sol + m[i] * (m[i] + 1) // 2\n    sol -= c - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= m[z]\n        a -= m[s]\n        a += m[k]\n        a += m[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (nnnn, qqqq) = map(int, input().split())\n    dddd = {i: 0 for i in range(1, nnnn + 1)}\n    aaaa = {i: [] for i in range(1, nnnn + 1)}\n    for _ in range(nnnn - 1):\n        (xxxx, yyyy) = map(int, input().split())\n        dddd[xxxx] += 1\n        dddd[yyyy] += 1\n    answer = 0\n    for i in dddd:\n        answer += dddd[i] * (dddd[i] + 1) // 2\n    answer -= nnnn - 1\n    print(answer)\n    for _ in range(qqqq):\n        (wwww, xxxx, yyyy, zzzz) = map(int, input().split())\n        cccc = answer\n        cccc -= dddd[wwww]\n        cccc -= dddd[xxxx]\n        cccc += dddd[yyyy]\n        cccc += dddd[zzzz]\n        if wwww == yyyy and xxxx == zzzz or (wwww == zzzz and xxxx == yyyy):\n            cccc += 0\n        elif wwww == yyyy or wwww == zzzz or xxxx == yyyy or (xxxx == zzzz):\n            cccc += 1\n        else:\n            cccc += 2\n        print(cccc)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    ep = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (sr, kh) = map(int, input().split())\n        y[sr] += 1\n        y[kh] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, sr, kh, t) = map(int, input().split())\n        a = sol\n        a -= y[z]\n        a -= y[sr]\n        a += y[kh]\n        a += y[t]\n        if z == kh and sr == t or (z == t and sr == kh):\n            a += 0\n        elif z == kh or z == t or sr == kh or (sr == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (mn, pq) = map(int, input().split())\n    jaa = {i: 0 for i in range(1, mn + 1)}\n    dvv = {i: [] for i in range(1, mn + 1)}\n    for _ in range(mn - 1):\n        (s, h) = map(int, input().split())\n        jaa[s] += 1\n        jaa[h] += 1\n    sol = 0\n    for i in jaa:\n        sol = sol + jaa[i] * (jaa[i] + 1) // 2\n    sol -= mn - 1\n    print(sol)\n    for _ in range(pq):\n        (r, s, h, e) = map(int, input().split())\n        y = sol\n        y -= jaa[r]\n        y -= jaa[s]\n        y += jaa[h]\n        y += jaa[e]\n        if r == h and s == e or (r == e and s == h):\n            y += 0\n        elif r == h or r == e or s == h or (s == e):\n            y += 1\n        else:\n            y += 2\n        print(y)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (m, k) = map(int, input().split())\n        y[m] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, m, k, t) = map(int, input().split())\n        a = sol\n        a -= y[z]\n        a -= y[m]\n        a += y[k]\n        a += y[t]\n        if z == k and m == t or (z == t and m == k):\n            a += 0\n        elif z == k or z == t or m == k or (m == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    f = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= y[z]\n        a -= y[s]\n        a += y[k]\n        a += y[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, e) = map(int, input().split())\n        y[s] += 1\n        y[e] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, e, t) = map(int, input().split())\n        a = sol\n        a -= y[z]\n        a -= y[s]\n        a += y[e]\n        a += y[t]\n        if z == e and s == t or (z == t and s == e):\n            a += 0\n        elif z == e or z == t or s == e or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "from copy import deepcopy\nT = int(input())\nfor _ in range(T):\n    (N, P) = map(int, input().split())\n    degree = [0] * (N + 1)\n    degree[0] = N + 1\n    for i in range(N - 1):\n        ed = list(map(int, input().split()))\n        for j in range(2):\n            degree[ed[j]] += 1\n    cost = 1\n    for i in range(1, N + 1):\n        K = degree[i]\n        cost += K * (K + 1) // 2 - 1\n    ini_cost = cost\n    print(cost)\n    for i in range(P):\n        (A, B, C, D) = map(int, input().split())\n        net_add = 0\n        degree[A] -= 1\n        degree[B] -= 1\n        if degree[A] >= 1:\n            net_add -= degree[A] + 1\n        if degree[B] >= 1:\n            net_add -= degree[B] + 1\n        degree[C] += 1\n        degree[D] += 1\n        if degree[C] > 1:\n            net_add += degree[C]\n        if degree[D] > 1:\n            net_add += degree[D]\n        cost += net_add\n        print(cost)\n        cost = ini_cost\n        degree[A] += 1\n        degree[B] += 1\n        degree[C] -= 1\n        degree[D] -= 1", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (v, s, k, t) = map(int, input().split())\n        a = sol\n        a -= y[v]\n        a -= y[s]\n        a += y[k]\n        a += y[t]\n        if v == k and s == t or (v == t and s == k):\n            a += 0\n        elif v == k or v == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (v, u) = map(int, input().split())\n    x = {i: 0 for i in range(1, v + 1)}\n    y = {i: [] for i in range(1, v + 1)}\n    for _ in range(v - 1):\n        (s, k) = map(int, input().split())\n        x[s] += 1\n        x[k] += 1\n    sol = 0\n    for i in x:\n        sol = sol + x[i] * (x[i] + 1) // 2\n    sol -= v - 1\n    print(sol)\n    for _ in range(u):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= x[z]\n        a -= x[s]\n        a += x[k]\n        a += x[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "from copy import deepcopy\nat = int(input())\nfor _ in range(at):\n    (n, q) = map(int, input().split())\n    degree = [0] * (n + 1)\n    degree[0] = n + 1\n    for i in range(n - 1):\n        edge = list(map(int, input().split()))\n        for j in range(2):\n            degree[edge[j]] += 1\n    cost = 1\n    for i in range(1, n + 1):\n        k = degree[i]\n        cost += k * (k + 1) // 2 - 1\n    ini_cost = cost\n    print(cost)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        net_add = 0\n        degree[a] -= 1\n        degree[b] -= 1\n        if degree[a] >= 1:\n            net_add -= degree[a] + 1\n        if degree[b] >= 1:\n            net_add -= degree[b] + 1\n        degree[c] += 1\n        degree[d] += 1\n        if degree[c] > 1:\n            net_add += degree[c]\n        if degree[d] > 1:\n            net_add += degree[d]\n        cost += net_add\n        print(cost)\n        cost = ini_cost\n        degree[a] += 1\n        degree[b] += 1\n        degree[c] -= 1\n        degree[d] -= 1", "for k in range(int(input())):\n    (n, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, n + 1)}\n    avv = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= n - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (nag, qug) = map(int, input().split())\n    daa = {i: 0 for i in range(1, nag + 1)}\n    avv = {i: [] for i in range(1, nag + 1)}\n    for _ in range(nag - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= nag - 1\n    print(sol)\n    for _ in range(qug):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (q, k) = map(int, input().split())\n        y[q] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, q, k, t) = map(int, input().split())\n        a = sol\n        a -= y[z]\n        a -= y[q]\n        a += y[k]\n        a += y[t]\n        if z == k and q == t or (z == t and q == k):\n            a += 0\n        elif z == k or z == t or q == k or (q == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "from copy import deepcopy\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    degree = [0] * (a + 1)\n    degree[0] = a + 1\n    for i in range(a - 1):\n        edge = list(map(int, input().split()))\n        for j in range(2):\n            degree[edge[j]] += 1\n    cost = 1\n    for i in range(1, a + 1):\n        k = degree[i]\n        cost += k * (k + 1) // 2 - 1\n    ini_cost = cost\n    print(cost)\n    for i in range(b):\n        (w, x, y, z) = map(int, input().split())\n        net_add = 0\n        degree[w] -= 1\n        degree[x] -= 1\n        if degree[w] >= 1:\n            net_add -= degree[w] + 1\n        if degree[x] >= 1:\n            net_add -= degree[x] + 1\n        degree[y] += 1\n        degree[z] += 1\n        if degree[y] > 1:\n            net_add += degree[y]\n        if degree[z] > 1:\n            net_add += degree[z]\n        cost += net_add\n        print(cost)\n        cost = ini_cost\n        degree[w] += 1\n        degree[x] += 1\n        degree[y] -= 1\n        degree[z] -= 1", "for i in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "from copy import deepcopy\nfrom collections import deque\n\ndef f(n, Sol):\n    q = deque()\n    for i in range(n):\n        if ind2[i] == 1:\n            q.append(i)\n    while q:\n        t = q.popleft()\n        exp[t] = 1\n        for j in adj[t]:\n            if not exp[j - 1]:\n                Sol += ind2[j - 1]\n        for i in adj[t]:\n            ind2[i - 1] -= 1\n            if ind2[i - 1] == 1:\n                q.append(i - 1)\n    return Sol\nT = int(input())\nfor t in range(T):\n    (n, q) = map(int, input().split())\n    adj = [[] for i in range(n)]\n    ind = [0] * n\n    exp = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u - 1].append(v)\n        adj[v - 1].append(u)\n        ind[u - 1] += 1\n        ind[v - 1] += 1\n    Sol = 0\n    ind2 = ind.copy()\n    Sol = f(n, Sol)\n    print(Sol)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        res2 = deepcopy(Sol)\n        res2 -= ind[a - 1] + ind[b - 1]\n        if a == c or b == c:\n            res2 += ind[c - 1]\n        else:\n            res2 += ind[c - 1] + 1\n        if a == d or b == d:\n            res2 += ind[d - 1]\n        else:\n            res2 += ind[d - 1] + 1\n        print(res2)", "from copy import deepcopy\no = int(input())\nfor _ in range(o):\n    (n, q) = map(int, input().split())\n    degree = [0] * (n + 1)\n    degree[0] = n + 1\n    for i in range(n - 1):\n        edge = list(map(int, input().split()))\n        for j in range(2):\n            degree[edge[j]] += 1\n    cost = 1\n    for i in range(1, n + 1):\n        k = degree[i]\n        cost += k * (k + 1) // 2 - 1\n    ini_cost = cost\n    print(cost)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        net_add = 0\n        degree[a] -= 1\n        degree[b] -= 1\n        if degree[a] >= 1:\n            net_add -= degree[a] + 1\n        if degree[b] >= 1:\n            net_add -= degree[b] + 1\n        degree[c] += 1\n        degree[d] += 1\n        if degree[c] > 1:\n            net_add += degree[c]\n        if degree[d] > 1:\n            net_add += degree[d]\n        cost += net_add\n        print(cost)\n        cost = ini_cost\n        degree[a] += 1\n        degree[b] += 1\n        degree[c] -= 1\n        degree[d] -= 1", "from copy import deepcopy\nfrom collections import deque\n\ndef f(n, res):\n    e = deque()\n    for i in range(n):\n        if ind2[i] == 1:\n            e.append(i)\n    while e:\n        t = e.popleft()\n        exp[t] = 1\n        for j in adj[t]:\n            if not exp[j - 1]:\n                res += ind2[j - 1]\n        for i in adj[t]:\n            ind2[i - 1] -= 1\n            if ind2[i - 1] == 1:\n                e.append(i - 1)\n    return res\nT = int(input())\nfor t in range(T):\n    (n, q) = map(int, input().split())\n    adj = [[] for i in range(n)]\n    ind = [0] * n\n    exp = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u - 1].append(v)\n        adj[v - 1].append(u)\n        ind[u - 1] += 1\n        ind[v - 1] += 1\n    res = 0\n    ind2 = ind.copy()\n    res = f(n, res)\n    print(res)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        res2 = deepcopy(res)\n        res2 -= ind[a - 1] + ind[b - 1]\n        if a == c or b == c:\n            res2 += ind[c - 1]\n        else:\n            res2 += ind[c - 1] + 1\n        if a == d or b == d:\n            res2 += ind[d - 1]\n        else:\n            res2 += ind[d - 1] + 1\n        print(res2)", "for _ in range(int(input())):\n    (qw, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, qw + 1)}\n    avv = {i: [] for i in range(1, qw + 1)}\n    for _ in range(qw - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= qw - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (u, p) = map(int, input().split())\n    Q = {i: 0 for i in range(1, u + 1)}\n    e = {i: [] for i in range(1, u + 1)}\n    for _ in range(u - 1):\n        (s, l) = map(int, input().split())\n        Q[s] += 1\n        Q[l] += 1\n    sol = 0\n    for i in Q:\n        sol = sol + Q[i] * (Q[i] + 1) // 2\n    sol -= u - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, l, t) = map(int, input().split())\n        a = sol\n        a -= Q[z]\n        a -= Q[s]\n        a += Q[l]\n        a += Q[t]\n        if z == l and s == t or (z == t and s == l):\n            a += 0\n        elif z == l or z == t or s == l or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "from copy import deepcopy\nfrom collections import deque\n\ndef f(n, res):\n    y = deque()\n    for i in range(n):\n        if ind2[i] == 1:\n            y.append(i)\n    while y:\n        t = y.popleft()\n        exp[t] = 1\n        for j in adj[t]:\n            if not exp[j - 1]:\n                res += ind2[j - 1]\n        for i in adj[t]:\n            ind2[i - 1] -= 1\n            if ind2[i - 1] == 1:\n                y.append(i - 1)\n    return res\nT = int(input())\nfor t in range(T):\n    (n, q) = map(int, input().split())\n    adj = [[] for i in range(n)]\n    ind = [0] * n\n    exp = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u - 1].append(v)\n        adj[v - 1].append(u)\n        ind[u - 1] += 1\n        ind[v - 1] += 1\n    res = 0\n    ind2 = ind.copy()\n    res = f(n, res)\n    print(res)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        res2 = deepcopy(res)\n        res2 -= ind[a - 1] + ind[b - 1]\n        if a == c or b == c:\n            res2 += ind[c - 1]\n        else:\n            res2 += ind[c - 1] + 1\n        if a == d or b == d:\n            res2 += ind[d - 1]\n        else:\n            res2 += ind[d - 1] + 1\n        print(res2)", "for _ in range(int(input())):\n    (na, tu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(tu):\n        (w, x, y, z) = map(int, input().split())\n        k = sol\n        k -= daa[w]\n        k -= daa[x]\n        k += daa[y]\n        k += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            k += 0\n        elif w == y or w == z or x == y or (x == z):\n            k += 1\n        else:\n            k += 2\n        print(k)", "from copy import deepcopy\nfrom collections import deque\n\ndef f(n, res):\n    z = deque()\n    for i in range(n):\n        if ind2[i] == 1:\n            z.append(i)\n    while z:\n        t = z.popleft()\n        exp[t] = 1\n        for j in adj[t]:\n            if not exp[j - 1]:\n                res += ind2[j - 1]\n        for i in adj[t]:\n            ind2[i - 1] -= 1\n            if ind2[i - 1] == 1:\n                z.append(i - 1)\n    return res\nT = int(input())\nfor t in range(T):\n    (n, q) = map(int, input().split())\n    adj = [[] for i in range(n)]\n    ind = [0] * n\n    exp = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u - 1].append(v)\n        adj[v - 1].append(u)\n        ind[u - 1] += 1\n        ind[v - 1] += 1\n    res = 0\n    ind2 = ind.copy()\n    res = f(n, res)\n    print(res)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        res2 = deepcopy(res)\n        res2 -= ind[a - 1] + ind[b - 1]\n        if a == c or b == c:\n            res2 += ind[c - 1]\n        else:\n            res2 += ind[c - 1] + 1\n        if a == d or b == d:\n            res2 += ind[d - 1]\n        else:\n            res2 += ind[d - 1] + 1\n        print(res2)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    m = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= y[z]\n        a -= y[s]\n        a += y[k]\n        a += y[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(2 * 10 ** 5)\n\ndef dfs(p, prev, lvl):\n    parent[p] = prev\n    level[lvl].append(p)\n    for i in child[p]:\n        if i == prev:\n            continue\n        dfs(i, p, lvl + 1)\n\ndef answer():\n    original_deg = deg[:]\n    ans = 0\n    for p in range(n - 1, 0, -1):\n        for i in level[p]:\n            ans += deg[i] * deg[parent[i]]\n            deg[parent[i]] -= 1\n    print(ans)\n    for query in range(q):\n        (u1, v1, u2, v2) = map(int, input().split())\n        query_ans = ans\n        query_ans -= original_deg[u1] - 1 + original_deg[v1] - 1\n        original_deg[u1] -= 1\n        original_deg[v1] -= 1\n        query_ans += original_deg[u2] + original_deg[v2]\n        original_deg[u1] += 1\n        original_deg[v1] += 1\n        print(query_ans)\nfor T in range(int(input())):\n    (n, q) = map(int, input().split())\n    deg = [0 for i in range(n + 1)]\n    child = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        child[u].append(v)\n        child[v].append(u)\n        deg[u] += 1\n        deg[v] += 1\n    level = [[] for i in range(n)]\n    parent = [-1 for i in range(n + 1)]\n    dfs(1, -1, 0)\n    answer()", "for _ in range(int(input())):\n    (m, q) = map(int, input().split())\n    jvv = {i: 0 for i in range(1, m + 1)}\n    ahh = {i: [] for i in range(1, m + 1)}\n    for _ in range(m - 1):\n        (s, h) = map(int, input().split())\n        jvv[s] += 1\n        jvv[h] += 1\n    sol = 0\n    for i in jvv:\n        sol = sol + jvv[i] * (jvv[i] + 1) // 2\n    sol -= m - 1\n    print(sol)\n    for _ in range(q):\n        (r, s, h, e) = map(int, input().split())\n        v = sol\n        v -= jvv[r]\n        v -= jvv[s]\n        v += jvv[h]\n        v += jvv[e]\n        if r == h and s == e or (r == e and s == h):\n            v += 0\n        elif r == h or r == e or s == h or (s == e):\n            v += 1\n        else:\n            v += 2\n        print(v)", "for i in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for i in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        c = sol\n        c -= y[z]\n        c -= y[s]\n        c += y[k]\n        c += y[t]\n        if z == k and s == t or (z == t and s == k):\n            c += 0\n        elif z == k or z == t or s == k or (s == t):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        c = sol\n        c -= y[z]\n        c -= y[s]\n        c += y[k]\n        c += y[t]\n        if z == k and s == t or (z == t and s == k):\n            c += 0\n        elif z == k or z == t or s == k or (s == t):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    Q = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        Q[s] += 1\n        Q[k] += 1\n    sol = 0\n    for i in Q:\n        sol = sol + Q[i] * (Q[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= Q[z]\n        a -= Q[s]\n        a += Q[k]\n        a += Q[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (nady, qudy) = map(int, input().split())\n    daa = {i: 0 for i in range(1, nady + 1)}\n    avv = {i: [] for i in range(1, nady + 1)}\n    for _ in range(nady - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= nady - 1\n    print(sol)\n    for _ in range(qudy):\n        (w, x, y, z) = map(int, input().split())\n        con = sol\n        con -= daa[w]\n        con -= daa[x]\n        con += daa[y]\n        con += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            con += 0\n        elif w == y or w == z or x == y or (x == z):\n            con += 1\n        else:\n            con += 2\n        print(con)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        i = sol\n        i -= y[z]\n        i -= y[s]\n        i += y[k]\n        i += y[t]\n        if z == k and s == t or (z == t and s == k):\n            i += 0\n        elif z == k or z == t or s == k or (s == t):\n            i += 1\n        else:\n            i += 2\n        print(i)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (a, b) = map(int, input().split())\n        daa[a] += 1\n        daa[b] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (u, a, b, z) = map(int, input().split())\n        c = sol\n        c -= daa[u]\n        c -= daa[a]\n        c += daa[b]\n        c += daa[z]\n        if u == b and a == z or (u == z and a == b):\n            c += 0\n        elif u == b or u == z or a == b or (a == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for smart in range(int(input())):\n    (nani, qit) = map(int, input().split())\n    po = {ma: 0 for ma in range(1, nani + 1)}\n    avv = {ma: [] for ma in range(1, nani + 1)}\n    for smart in range(nani - 1):\n        (xak, yak) = map(int, input().split())\n        po[xak] += 1\n        po[yak] += 1\n    loc = 0\n    for ma in po:\n        loc = loc + po[ma] * (po[ma] + 1) // 2\n    loc -= nani - 1\n    print(loc)\n    for smart in range(qit):\n        (wak, xak, yak, zak) = map(int, input().split())\n        cot = loc\n        cot -= po[wak]\n        cot -= po[xak]\n        cot += po[yak]\n        cot += po[zak]\n        if wak == yak and xak == zak or (wak == zak and xak == yak):\n            cot += 0\n        elif wak == yak or wak == zak or xak == yak or (xak == zak):\n            cot += 1\n        else:\n            cot += 2\n        print(cot)", "for x in range(int(input())):\n    (o, p) = map(int, input().split())\n    r = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for y in range(o - 1):\n        (s, k) = map(int, input().split())\n        r[s] += 1\n        r[k] += 1\n    ans = 0\n    for i in r:\n        ans = ans + r[i] * (r[i] + 1) // 2\n    ans -= o - 1\n    print(ans)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = ans\n        a -= r[z]\n        a -= r[s]\n        a += r[k]\n        a += r[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    y = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        y[s] += 1\n        y[k] += 1\n    sol = 0\n    for i in y:\n        sol = sol + y[i] * (y[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= y[z]\n        a -= y[s]\n        a += y[k]\n        a += y[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "from copy import deepcopy\nfrom collections import deque\n\ndef f(n, res):\n    q = deque()\n    for i in range(n):\n        if ind2[i] == 1:\n            q.append(i)\n    while q:\n        t = q.popleft()\n        exp[t] = 1\n        for j in adj[t]:\n            if not exp[j - 1]:\n                res += ind2[j - 1]\n        for i in adj[t]:\n            ind2[i - 1] -= 1\n            if ind2[i - 1] == 1:\n                q.append(i - 1)\n    return res\nT = int(input())\nfor t in range(T):\n    (n, q) = map(int, input().split())\n    adj = [[] for i in range(n)]\n    ind = [0] * n\n    exp = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u - 1].append(v)\n        adj[v - 1].append(u)\n        ind[u - 1] += 1\n        ind[v - 1] += 1\n    res = 0\n    ind2 = ind.copy()\n    res = f(n, res)\n    print(res)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        res2 = deepcopy(res)\n        res2 -= ind[a - 1] + ind[b - 1]\n        if a == c or b == c:\n            res2 += ind[c - 1]\n        else:\n            res2 += ind[c - 1] + 1\n        if a == d or b == d:\n            res2 += ind[d - 1]\n        else:\n            res2 += ind[d - 1] + 1\n        print(res2)", "for i in range(int(input())):\n    (o, p) = map(int, input().split())\n    r = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        r[s] += 1\n        r[k] += 1\n    sol = 0\n    for i in r:\n        sol = sol + r[i] * (r[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= r[z]\n        a -= r[s]\n        a += r[k]\n        a += r[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    d = {i: 0 for i in range(1, n + 1)}\n    a = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        (x, y) = map(int, input().split())\n        d[x] += 1\n        d[y] += 1\n    sol = 0\n    for i in d:\n        sol = sol + d[i] * (d[i] + 1) // 2\n    sol -= n - 1\n    print(sol)\n    for _ in range(q):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= d[w]\n        c -= d[x]\n        c += d[y]\n        c += d[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    padhu = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        padhu[x] += 1\n        padhu[y] += 1\n    sol = 0\n    for i in padhu:\n        sol = sol + padhu[i] * (padhu[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= padhu[w]\n        c -= padhu[x]\n        c += padhu[y]\n        c += padhu[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (N1, Q1) = map(int, input().split())\n    daa = {i: 0 for i in range(1, N1 + 1)}\n    avv = {i: [] for i in range(1, N1 + 1)}\n    for _ in range(N1 - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= N1 - 1\n    print(sol)\n    for _ in range(Q1):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (ha, ku) = map(int, input().split())\n    paa = {j: 0 for j in range(1, ha + 1)}\n    lvv = {j: [] for j in range(1, ha + 1)}\n    for _ in range(ha - 1):\n        (s, f) = map(int, input().split())\n        paa[s] += 1\n        paa[f] += 1\n    sol = 0\n    for j in paa:\n        sol = sol + paa[j] * (paa[j] + 1) // 2\n    sol -= ha - 1\n    print(sol)\n    for _ in range(ku):\n        (a, s, f, b) = map(int, input().split())\n        d = sol\n        d -= paa[a]\n        d -= paa[s]\n        d += paa[f]\n        d += paa[b]\n        if a == f and s == b or (a == b and s == f):\n            d += 0\n        elif a == f or a == b or s == f or (s == b):\n            d += 1\n        else:\n            d += 2\n        print(d)", "for j in range(int(input())):\n    (num, qum) = map(int, input().split())\n    daa = {i: 0 for i in range(1, num + 1)}\n    avv = {i: [] for i in range(1, num + 1)}\n    for _ in range(num - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= num - 1\n    print(sol)\n    for _ in range(qum):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (o, p) = map(int, input().split())\n    r = {i: 0 for i in range(1, o + 1)}\n    e = {i: [] for i in range(1, o + 1)}\n    for _ in range(o - 1):\n        (s, k) = map(int, input().split())\n        r[s] += 1\n        r[k] += 1\n    sol = 0\n    for i in r:\n        sol = sol + r[i] * (r[i] + 1) // 2\n    sol -= o - 1\n    print(sol)\n    for _ in range(p):\n        (z, s, k, t) = map(int, input().split())\n        a = sol\n        a -= r[z]\n        a -= r[s]\n        a += r[k]\n        a += r[t]\n        if z == k and s == t or (z == t and s == k):\n            a += 0\n        elif z == k or z == t or s == k or (s == t):\n            a += 1\n        else:\n            a += 2\n        print(a)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (nas, qus) = map(int, input().split())\n    daat = {i: 0 for i in range(1, nas + 1)}\n    avv = {i: [] for i in range(1, nas + 1)}\n    for _ in range(nas - 1):\n        (x, y) = map(int, input().split())\n        daat[x] += 1\n        daat[y] += 1\n    sol = 0\n    for i in daat:\n        sol = sol + daat[i] * (daat[i] + 1) // 2\n    sol -= nas - 1\n    print(sol)\n    for _ in range(qus):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daat[w]\n        c -= daat[x]\n        c += daat[y]\n        c += daat[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for j in range(int(input())):\n    (num, qum) = map(int, input().split())\n    daa = {i: 0 for i in range(1, num + 1)}\n    avv = {i: [] for i in range(1, num + 1)}\n    for _ in range(num - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= num - 1\n    print(sol)\n    for _ in range(qum):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    d = {i: 0 for i in range(1, n + 1)}\n    a = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        (x, y) = map(int, input().split())\n        d[x] += 1\n        d[y] += 1\n    ans = 0\n    for i in d:\n        ans += d[i] * (d[i] + 1) // 2\n    ans -= n - 1\n    print(ans)\n    for _ in range(q):\n        (w, x, y, z) = map(int, input().split())\n        c = ans\n        c -= d[w]\n        c -= d[x]\n        c += d[y]\n        c += d[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for i in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    (n, q) = mp()\n    d = defaultdict(list)\n    deg = defaultdict(int)\n    for i in range(n - 1):\n        (a, b) = mp()\n        d[a].append(b)\n        d[b].append(a)\n        deg[a] += 1\n        deg[b] += 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans += deg[i] * (deg[i] + 1) // 2\n    ans -= n - 1\n    pr(ans)\n    for i in range(q):\n        (a, b, c, d) = mp()\n        cur = ans - (deg[a] + deg[b]) + deg[c] + deg[d]\n        for x in [a, b]:\n            for y in [c, d]:\n                cur -= x == y\n        pr(cur + 2)\nfor _ in range(inp()):\n    solve()", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (v, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[v]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if v == y and x == z or (v == z and x == y):\n            c += 0\n        elif v == y or v == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "for _ in range(int(input())):\n    (na, qu) = map(int, input().split())\n    daa = {i: 0 for i in range(1, na + 1)}\n    avv = {i: [] for i in range(1, na + 1)}\n    for _ in range(na - 1):\n        (x, y) = map(int, input().split())\n        daa[x] += 1\n        daa[y] += 1\n    sol = 0\n    for i in daa:\n        sol = sol + daa[i] * (daa[i] + 1) // 2\n    sol -= na - 1\n    print(sol)\n    for _ in range(qu):\n        (w, x, y, z) = map(int, input().split())\n        c = sol\n        c -= daa[w]\n        c -= daa[x]\n        c += daa[y]\n        c += daa[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "from copy import deepcopy\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    degree = [0] * (n + 1)\n    degree[0] = n + 1\n    for i in range(n - 1):\n        edge = list(map(int, input().split()))\n        for j in range(2):\n            degree[edge[j]] += 1\n    cost = 1\n    for i in range(1, n + 1):\n        k = degree[i]\n        cost += k * (k + 1) // 2 - 1\n    ini_cost = cost\n    print(cost)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        net_add = 0\n        degree[a] -= 1\n        degree[b] -= 1\n        if degree[a] >= 1:\n            net_add -= degree[a] + 1\n        if degree[b] >= 1:\n            net_add -= degree[b] + 1\n        degree[c] += 1\n        degree[d] += 1\n        if degree[c] > 1:\n            net_add += degree[c]\n        if degree[d] > 1:\n            net_add += degree[d]\n        cost += net_add\n        print(cost)\n        cost = ini_cost\n        degree[a] += 1\n        degree[b] += 1\n        degree[c] -= 1\n        degree[d] -= 1", "from copy import deepcopy\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    degree = [0] * (n + 1)\n    degree[0] = n + 1\n    for i in range(n - 1):\n        edge = list(map(int, input().split()))\n        for j in range(2):\n            degree[edge[j]] += 1\n    cost = 1\n    for i in range(1, n + 1):\n        k = degree[i]\n        cost += k * (k + 1) // 2 - 1\n    ini_cost = cost\n    print(cost)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        net_add = 0\n        degree[a] -= 1\n        degree[b] -= 1\n        if degree[a] >= 1:\n            net_add -= degree[a] + 1\n        if degree[b] >= 1:\n            net_add -= degree[b] + 1\n        degree[c] += 1\n        degree[d] += 1\n        if degree[c] > 1:\n            net_add += degree[c]\n        if degree[d] > 1:\n            net_add += degree[d]\n        cost += net_add\n        print(cost)\n        cost = ini_cost\n        degree[a] += 1\n        degree[b] += 1\n        degree[c] -= 1\n        degree[d] -= 1", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(2 * 10 ** 5)\n\ndef dfs(p, prev, lvl):\n    parent[p] = prev\n    level[lvl].append(p)\n    for i in child[p]:\n        if i == prev:\n            continue\n        dfs(i, p, lvl + 1)\n\ndef answer():\n    original_deg = deg[:]\n    ans = 0\n    for p in range(n - 1, 0, -1):\n        for i in level[p]:\n            ans += deg[i] * deg[parent[i]]\n            deg[parent[i]] -= 1\n    print(ans)\n    for query in range(q):\n        (u1, v1, u2, v2) = map(int, input().split())\n        query_ans = ans\n        query_ans -= original_deg[u1] - 1 + original_deg[v1] - 1\n        original_deg[u1] -= 1\n        original_deg[v1] -= 1\n        query_ans += original_deg[u2] + original_deg[v2]\n        original_deg[u1] += 1\n        original_deg[v1] += 1\n        print(query_ans)\nfor T in range(int(input())):\n    (n, q) = map(int, input().split())\n    deg = [0 for i in range(n + 1)]\n    child = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        child[u].append(v)\n        child[v].append(u)\n        deg[u] += 1\n        deg[v] += 1\n    level = [[] for i in range(n)]\n    parent = [-1 for i in range(n + 1)]\n    dfs(1, -1, 0)\n    answer()", "from sys import stdin, setrecursionlimit\ninput = stdin.readline\nsetrecursionlimit(2 * 10 ** 5)\n\ndef dfs(p, prev, lvl):\n    parent[p] = prev\n    level[lvl].append(p)\n    for i in child[p]:\n        if i == prev:\n            continue\n        dfs(i, p, lvl + 1)\n\ndef answer():\n    original_deg = deg[:]\n    ans = 0\n    for p in range(n - 1, 0, -1):\n        for i in level[p]:\n            ans += deg[i] * deg[parent[i]]\n            deg[parent[i]] -= 1\n    print(ans)\n    for query in range(q):\n        (u1, v1, u2, v2) = map(int, input().split())\n        query_ans = ans\n        query_ans -= original_deg[u1] - 1 + original_deg[v1] - 1\n        original_deg[u1] -= 1\n        original_deg[v1] -= 1\n        query_ans += original_deg[u2] + original_deg[v2]\n        original_deg[u1] += 1\n        original_deg[v1] += 1\n        print(query_ans)\nfor T in range(int(input())):\n    (n, q) = map(int, input().split())\n    deg = [0 for i in range(n + 1)]\n    child = [[] for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        child[u].append(v)\n        child[v].append(u)\n        deg[u] += 1\n        deg[v] += 1\n    level = [[] for i in range(n)]\n    parent = [-1 for i in range(n + 1)]\n    dfs(1, -1, 0)\n    answer()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    d = {i: 0 for i in range(1, n + 1)}\n    a = {i: [] for i in range(1, n + 1)}\n    for _ in range(n - 1):\n        (x, y) = map(int, input().split())\n        d[x] += 1\n        d[y] += 1\n    ans = 0\n    for i in d:\n        ans += d[i] * (d[i] + 1) // 2\n    ans -= n - 1\n    print(ans)\n    for _ in range(q):\n        (w, x, y, z) = map(int, input().split())\n        c = ans\n        c -= d[w]\n        c -= d[x]\n        c += d[y]\n        c += d[z]\n        if w == y and x == z or (w == z and x == y):\n            c += 0\n        elif w == y or w == z or x == y or (x == z):\n            c += 1\n        else:\n            c += 2\n        print(c)", "from copy import deepcopy\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    degree = [0] * (n + 1)\n    degree[0] = n + 1\n    for i in range(n - 1):\n        edge = list(map(int, input().split()))\n        for j in range(2):\n            degree[edge[j]] += 1\n    cost = 1\n    for i in range(1, n + 1):\n        k = degree[i]\n        cost += k * (k + 1) // 2 - 1\n    ini_cost = cost\n    print(cost)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        net_add = 0\n        degree[a] -= 1\n        degree[b] -= 1\n        if degree[a] >= 1:\n            net_add -= degree[a] + 1\n        if degree[b] >= 1:\n            net_add -= degree[b] + 1\n        degree[c] += 1\n        degree[d] += 1\n        if degree[c] > 1:\n            net_add += degree[c]\n        if degree[d] > 1:\n            net_add += degree[d]\n        cost += net_add\n        print(cost)\n        cost = ini_cost\n        degree[a] += 1\n        degree[b] += 1\n        degree[c] -= 1\n        degree[d] -= 1", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    graph = dict()\n    degree = [0 for i in range(n + 1)]\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        if u not in graph.keys():\n            graph[u] = [v]\n        else:\n            graph[u].append(v)\n        degree[u] += 1\n        if v not in graph.keys():\n            graph[v] = [u]\n        else:\n            graph[v].append(u)\n        degree[v] += 1\n    ansa = 0\n    for x in graph.keys():\n        d = degree[x]\n        if x != 1:\n            ansa -= 1\n        ansa += d * (d + 1) // 2\n    print(ansa)\n    for i in range(q):\n        ansaa = ansa\n        (a, b, c, d) = map(int, input().split())\n        st = set([a, b, c, d])\n        for x in st:\n            temp = degree[x]\n            ansaa -= temp * (temp + 1) // 2\n            if x != 1:\n                ansaa += 1\n        degree[a] -= 1\n        degree[b] -= 1\n        degree[c] += 1\n        degree[d] += 1\n        for x in st:\n            t = degree[x]\n            ansaa += t * (t + 1) // 2\n            if x != 1:\n                ansaa -= 1\n        degree[a] += 1\n        degree[b] += 1\n        degree[c] -= 1\n        degree[d] -= 1\n        print(ansaa)", "from copy import deepcopy\nfrom collections import deque\n\ndef f(n, res):\n    q = deque()\n    for i in range(n):\n        if ind2[i] == 1:\n            q.append(i)\n    while q:\n        t = q.popleft()\n        exp[t] = 1\n        for j in adj[t]:\n            if not exp[j - 1]:\n                res += ind2[j - 1]\n        for i in adj[t]:\n            ind2[i - 1] -= 1\n            if ind2[i - 1] == 1:\n                q.append(i - 1)\n    return res\nT = int(input())\nfor t in range(T):\n    (n, q) = map(int, input().split())\n    adj = [[] for i in range(n)]\n    ind = [0] * n\n    exp = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u - 1].append(v)\n        adj[v - 1].append(u)\n        ind[u - 1] += 1\n        ind[v - 1] += 1\n    res = 0\n    ind2 = ind.copy()\n    res = f(n, res)\n    print(res)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        res2 = deepcopy(res)\n        res2 -= ind[a - 1] + ind[b - 1]\n        if a == c or b == c:\n            res2 += ind[c - 1]\n        else:\n            res2 += ind[c - 1] + 1\n        if a == d or b == d:\n            res2 += ind[d - 1]\n        else:\n            res2 += ind[d - 1] + 1\n        print(res2)", "from copy import deepcopy\nfrom collections import deque\n\ndef f(n, res):\n    q = deque()\n    for i in range(n):\n        if ind2[i] == 1:\n            q.append(i)\n    while q:\n        t = q.popleft()\n        exp[t] = 1\n        for j in adj[t]:\n            if not exp[j - 1]:\n                res += ind2[j - 1]\n        for i in adj[t]:\n            ind2[i - 1] -= 1\n            if ind2[i - 1] == 1:\n                q.append(i - 1)\n    return res\nT = int(input())\nfor t in range(T):\n    (n, q) = map(int, input().split())\n    adj = [[] for i in range(n)]\n    ind = [0] * n\n    exp = [0] * n\n    for i in range(n - 1):\n        (u, v) = map(int, input().split())\n        adj[u - 1].append(v)\n        adj[v - 1].append(u)\n        ind[u - 1] += 1\n        ind[v - 1] += 1\n    res = 0\n    ind2 = ind.copy()\n    res = f(n, res)\n    print(res)\n    for i in range(q):\n        (a, b, c, d) = map(int, input().split())\n        res2 = deepcopy(res)\n        res2 -= ind[a - 1] + ind[b - 1]\n        if a == c or b == c:\n            res2 += ind[c - 1]\n        else:\n            res2 += ind[c - 1] + 1\n        if a == d or b == d:\n            res2 += ind[d - 1]\n        else:\n            res2 += ind[d - 1] + 1\n        print(res2)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    (n, q) = mp()\n    d = defaultdict(list)\n    deg = defaultdict(int)\n    for i in range(n - 1):\n        (a, b) = mp()\n        d[a].append(b)\n        d[b].append(a)\n        deg[a] += 1\n        deg[b] += 1\n    ans = 0\n    for i in range(1, n + 1):\n        ans += deg[i] * (deg[i] + 1) // 2\n    ans -= n - 1\n    pr(ans)\n    for i in range(q):\n        (a, b, c, d) = mp()\n        cur = ans - (deg[a] + deg[b]) + deg[c] + deg[d]\n        for x in [a, b]:\n            for y in [c, d]:\n                cur -= x == y\n        pr(cur + 2)\nfor _ in range(inp()):\n    solve()"]