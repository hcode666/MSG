["for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    pos = [0 for i in range(n)]\n    for i in range(n):\n        pos[l[i]] = i\n    l = pos[0]\n    r = pos[0]\n    ans = 0\n    for i in range(1, n):\n        cu = pos[i]\n        if cu >= l and cu <= r:\n            ans += r - l - i\n        elif cu < l:\n            l = cu\n        else:\n            r = cu\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    pos = [0 for i in range(n)]\n    for i in range(n):\n        pos[l[i]] = i\n    l = pos[0]\n    r = pos[0]\n    ans = 0\n    for i in range(1, n):\n        cu = pos[i]\n        if cu >= l and cu <= r:\n            ans += r - l - i\n        elif cu < l:\n            l = cu\n        else:\n            r = cu\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    line = input()\n    P = line.split()\n    indexs = []\n    for i in range(n):\n        indexs.append(0)\n    for i in range(n):\n        indexs[int(P[i])] = i\n    index0 = indexs[0]\n    index1 = indexs[1]\n    min_ind = min(index0, index1)\n    max_ind = max(index0, index1)\n    total_pair = 0\n    for i in range(2, n):\n        index_i = indexs[i]\n        if index_i < min_ind:\n            min_ind = index_i\n        elif index_i > max_ind:\n            max_ind = index_i\n        else:\n            pairable = max_ind - min_ind - i\n            total_pair += pairable\n    print(total_pair)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    pos = [0 for i in range(n)]\n    for i in range(n):\n        pos[l[i]] = i\n    l = pos[0]\n    r = pos[0]\n    ans = 0\n    for i in range(1, n):\n        cu = pos[i]\n        if cu >= l and cu <= r:\n            ans += r - l - i\n        elif cu < l:\n            l = cu\n        else:\n            r = cu\n    print(ans)", "import sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom queue import PriorityQueue\nfrom queue import Queue\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nfrom math import log\nfrom math import gcd\nfrom math import atan2, acos\nfrom random import randint\nimport random\nsa = lambda : input_()\nsb = lambda : int(input_())\nsc = lambda : input_().split()\nsd = lambda : list(map(int, input_().split()))\nsflo = lambda : list(map(float, input_().split()))\nse = lambda : float(input_())\nsf = lambda : list(input_())\nflsh = lambda : sys.stdout.flush()\nmod = 10 ** 9 + 7\nmod1 = 998244353\ngp = []\ncost = []\ndp = []\nmx = []\nans1 = []\nans2 = []\nspecial = []\nspecnode = []\na = 0\nkthpar = []\n\ndef dfs2(root, par):\n    if par != -1:\n        dp[root] = dp[par] + 1\n    for i in range(1, 20):\n        if kthpar[root][i - 1] != -1:\n            kthpar[root][i] = kthpar[kthpar[root][i - 1]][i - 1]\n    for child in gp[root]:\n        if child == par:\n            continue\n        kthpar[child][0] = root\n        dfs(child, root)\nans = 0\na = []\n(n, k) = (0, 0)\nb = []\nvis = []\ntot = 0\ntime = []\ntime1 = []\nadj = []\nmx = -1\neps = 1e-07\ngp = []\nans = []\n\ndef update_it(bit, i, val):\n    n = len(bit)\n    while i < n:\n        bit[i] += val\n        i += i & -i\n\ndef get_ans(bit, i):\n    n = len(bit)\n    tot = 0\n    while i > 0:\n        tot += bit[i]\n        i -= i & -i\n    return tot\n\ndef flip(a, l, r):\n    for i in range(l, r):\n        a[i] = '0' if a[i] == '1' else '1'\n    return\n\ndef hnbhai(tc):\n    n = sb()\n    a = sd()\n    prefix = [0] * (n + 1)\n    strt = a.index(0)\n    end = a.index(0)\n    for i in range(n):\n        prefix[a[i]] = i\n    inregion = 0\n    ans = 0\n    for i in range(1, n):\n        if prefix[i] > end:\n            ans += inregion * (end - strt + 1 - i)\n            end = prefix[i]\n            ans += inregion * (inregion - 1) // 2\n            inregion = 0\n            continue\n        if prefix[i] < strt:\n            ans += inregion * (end - strt + 1 - i)\n            strt = prefix[i]\n            ans += inregion * (inregion - 1) // 2\n            inregion = 0\n            continue\n        inregion += 1\n    ans += inregion * (inregion - 1) // 2\n    print(ans)\n    return\nfor _ in range(sb()):\n    hnbhai(_ + 1)"]