["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    ans = 0\n    for i in range(n):\n        ans = ans ^ arr[i] % 2 * (n - i - 1)\n    if ans == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    ans = 0\n    for i in range(n):\n        ans = ans ^ arr[i] % 2 * (n - i - 1)\n    if ans == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for i in range(int(input())):\n    n = int(input())\n    lst = [int(val) for val in input().split()]\n    res = 0\n    for i in range(n):\n        res = res ^ (n - i - 1) * (lst[i] % 2)\n    print('Cook' if res == 0 else 'Chef')", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    for i in range(n - 1):\n        if a[i] & 1:\n            x ^= n - i - 1\n    print('Chef' if x else 'Cook')", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    for i in range(n - 1):\n        if a[i] & 1:\n            x ^= n - i - 1\n    print('Chef' if x else 'Cook')", "import collections as clts\nimport math\nimport heapq\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\n\ndef lcm(x, y):\n    return int(x / gcd(x, y) * y)\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    stones = N - 1\n    moves = 0\n    for i in range(N):\n        if A[i] % 2 == 0:\n            moves ^= 0\n        else:\n            moves ^= stones\n        stones -= 1\n    if moves != 0:\n        print('Chef')\n    else:\n        print('Cook')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(n - 1):\n        if a[i] % 2 != 0:\n            c ^= n - i - 1\n    if c <= 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(n - 1):\n        if a[i] % 2 != 0:\n            c ^= n - i - 1\n    if c <= 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = 0\n    for i in range(n - 1):\n        if a[i] % 2 != 0:\n            c ^= n - i - 1\n    if c <= 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    temp = 0\n    for i in range(n - 1):\n        if l[i] % 2 == 1:\n            temp = temp ^ n - i - 1\n    if temp:\n        print('Chef')\n    else:\n        print('Cook')", "test_cases = int(input())\nfor i in range(test_cases):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    temp = 0\n    for i in range(n - 1):\n        if arr[i] % 2 == 1:\n            temp = temp ^ n - i - 1\n    if temp == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    x = 0\n    for i in range(n - 1):\n        if a[i] % 2 == 1:\n            x = x ^ n - i - 1\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 1:\n            x = x ^ n - (i + 1)\n    if x != 0:\n        print('Chef')\n    else:\n        print('Cook')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            ans ^= n - i - 1\n    if ans == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor o in range(t):\n    n = int(input())\n    arr = [k for k in map(int, input().split())]\n    xsum = 0\n    for i in range(0, n):\n        if arr[i] % 2 == 1:\n            xsum = xsum ^ n - (i + 1)\n    if xsum != 0:\n        print('Chef')\n    else:\n        print('Cook')", "t = int(input())\nfor o in range(t):\n    n = int(input())\n    arr = [k for k in map(int, input().split())]\n    xsum = 0\n    for i in range(0, n):\n        if arr[i] % 2 == 1:\n            xsum = xsum ^ n - (i + 1)\n    if xsum != 0:\n        print('Chef')\n    else:\n        print('Cook')", "import time\nimport sys\nimport math\nfrom collections import defaultdict as dd\nfrom functools import lru_cache\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nT = inty()\nfor _ in range(T):\n    n = inty()\n    alist = listy()\n    xor = 0\n    for i in range(n - 1):\n        if alist[i] & 1:\n            xor ^= n - 1 - i\n    print('Chef' if xor > 0 else 'Cook')", "import time\nimport sys\nimport math\nfrom collections import defaultdict as dd\nfrom functools import lru_cache\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nT = inty()\nfor _ in range(T):\n    n = inty()\n    alist = listy()\n    x = 0\n    for i in range(n - 1):\n        if alist[i] & 1:\n            x ^= n - 1 - i\n    print('Chef' if x > 0 else 'Cook')", "import time\nimport sys\nimport math\nfrom collections import defaultdict as dd\nfrom functools import lru_cache\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nT = inty()\nfor _ in range(T):\n    n = inty()\n    alist = listy()\n    x = 0\n    for i in range(n - 1):\n        if alist[i] & 1:\n            x ^= n - 1 - i\n    print('Chef' if x > 0 else 'Cook')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for (i, el) in enumerate(a):\n        ans ^= n - i - 1 if el & 1 else 0\n    print('Chef' if ans else 'Cook')", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    alist = list(map(int, input().split()))\n    x = 0\n    for i in range(n):\n        if alist[i] & 1:\n            x ^= n - i - 1\n    print('Chef' if x > 0 else 'Cook')", "import time\nimport sys\nimport math\nfrom collections import defaultdict as dd\nfrom functools import lru_cache\ninty = lambda : int(input())\nstringy = lambda : input().strip()\nmappy = lambda : map(int, input().strip().split())\nfmappy = lambda : map(float, input().strip().split())\nlisty = lambda : list(map(int, input().strip().split()))\ntick = lambda : time.perf_counter()\nT = inty()\nfor _ in range(T):\n    n = inty()\n    alist = listy()\n    x = 0\n    for i in range(n):\n        if alist[i] & 1:\n            x ^= n - i - 1\n    print('Chef' if x > 0 else 'Cook')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    left = 0\n    right = n - 1\n    for i in range(n):\n        if a[i] % 2 == 1:\n            left = left ^ right\n        right -= 1\n    if left == 0:\n        print('Cook')\n    else:\n        print('Chef')", "testcase = int(input())\nfor _ in range(testcase):\n    n = int(input())\n    arr = [int(num) for num in input().split()]\n    ans = 0\n    for (ind, num) in enumerate(arr[:-1]):\n        ans ^= (n - ind - 1) * (arr[ind] % 2)\n    print('Chef' if ans else 'Cook')", "from functools import reduce\nfor _ in range(int(input())):\n    N = int(input())\n    A = [N - i - 1 for (i, s) in enumerate(input().split()) if int(s) & 1]\n    print('Chef' if reduce(int.__xor__, A, 0) else 'Cook')", "from functools import reduce\nfor _ in range(int(input())):\n    N = int(input())\n    A = [N - i - 1 for (i, s) in enumerate(input().split()) if int(s) & 1]\n    print('Chef' if reduce(int.__xor__, A, 0) else 'Cook')", "for i in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    ans = 0\n    p = N - 1\n    for j in range(N):\n        if A[j] % 2 == 1:\n            ans ^= p\n        p -= 1\n    if ans == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = n - 1\n    ans = 0\n    for i in a:\n        if i % 2 != 0:\n            ans ^= c\n        c -= 1\n    print('Cook' if ans == 0 else 'Chef')", "a = 1\nb = 0\nfor _ in range(int(input())):\n    n = int(input())\n    (i, p) = [n - a, b]\n    for t in list(map(int, input().split())):\n        if t % (a + a) == a:\n            p ^= i\n        i -= 1 * a + b\n    if p == b:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    pranav = 0\n    (i, p) = [n - 1, 0]\n    for KKKT in range(10000):\n        pranav = pranav + 1.5\n    for t in list(map(int, input().split())):\n        if t % 2 == 1:\n            p ^= i\n        i -= 1\n    if p == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = a[::-1]\n    q = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 1:\n            q ^= i\n    if q == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    xor = 0\n    for i in range(n):\n        if arr[i] % 2 != 0:\n            xor ^= n - i - 1\n    if xor == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    (i, p) = [n - 1, 0]\n    for t in list(map(int, input().split())):\n        if t % 2 == 1:\n            p ^= i\n        i -= 1\n    if p == 0:\n        print('Cook')\n    else:\n        print('Chef')\n\ndef fun():\n    a = 1\n    a = 2\n    a = 1\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2\n    a = 1\n    a = 2", "for _ in range(int(input())):\n    n = int(input())\n    (i, p) = [n - 1, 0]\n    for t in list(map(int, input().split())):\n        if t % 2 == 1:\n            p ^= i\n        i -= 1\n    if p == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    list1.reverse()\n    x = 0\n    for i in range(n - 1, -1, -1):\n        if list1[i] % 2 == 1:\n            x = x ^ i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "import numpy\nimport math\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    j = 0\n    for i in range(n - 1, 0, -1):\n        if a[j] % 2 == 1:\n            x = x ^ i\n        j += 1\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "import numpy\nimport math\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    j = 0\n    for i in range(n - 1, 0, -1):\n        if a[j] % 2 == 1:\n            x = x ^ i\n        j += 1\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.reverse()\n    x = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 1:\n            x = x ^ i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.reverse()\n    x = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 1:\n            x = x ^ i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "from collections import Counter, deque, defaultdict, OrderedDict\nimport math\nfrom bisect import bisect, bisect_left\nimport sys\nimport re\nMOD = 10 ** 9 + 7\nMAX = -sys.maxsize\nMIN = sys.maxsize\n\nclass get:\n\n    def int():\n        return list(map(int, input().split()))\n\n    def str():\n        return input().split()\n\n    def float():\n        return list(map(float, input().split()))\n\n    def map():\n        return map(int, input().split())\n\ndef sqrt(x):\n    return int(math.sqrt(x)) + 1\n\ndef gcd(*args):\n    result = args[0]\n    for item in args:\n        result = math.gcd(result, item)\n    return result\n\ndef LCM(a, b):\n    return a * b // math.gcd(a, b)\n\ndef isPrime(n):\n    if n == 1:\n        return False\n    for i in range(2, sqrt(n)):\n        if n % i == 0:\n            return False\n    return True\n\ndef solve():\n    n = int(input())\n    a = get.int()\n    a = a[::-1]\n    x = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2:\n            x ^= i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')\nt = int(input())\nfor tt in range(t):\n    solve()", "import random\nimport math\nfrom collections import defaultdict, Counter\nfrom functools import lru_cache\nimport bisect\nimport heapq\n\nclass SegmentTree:\n\n    def __init__(self, nums):\n        self._size = len(nums)\n        self._tree = [0] * (4 * self._size)\n        self.build(nums)\n\n    def build(self, a, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if lo == hi:\n            self._tree[v] = a[lo]\n        else:\n            mi = (lo + hi) // 2\n            self.build(a, 2 * v, lo, mi)\n            self.build(a, 2 * v + 1, mi + 1, hi)\n            self._tree[v] = self._tree[2 * v] + self._tree[2 * v + 1]\n\n    def update(self, pos, val, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if lo == hi:\n            self._tree[v] = val\n        else:\n            mi = (lo + hi) // 2\n            if pos <= mi:\n                self.update(pos, val, 2 * v, lo, mi)\n            else:\n                self.update(pos, val, 2 * v + 1, mi + 1, hi)\n            self._tree[v] = self._tree[2 * v] + self._tree[2 * v + 1]\n\n    def query(self, l, h, v=1, lo=0, hi=None):\n        if hi is None:\n            hi = self._size - 1\n        if l > h:\n            return 0\n        elif l == lo and h == hi:\n            return self._tree[v]\n        else:\n            mi = (lo + hi) // 2\n            return self.query(l, min(mi, h), 2 * v, lo, mi) + self.query(max(mi + 1, l), h, 2 * v + 1, mi + 1, hi)\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parents = list(range(n))\n\n    def find(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            self.parents[x] = y\ndire = [0, 1, 0, -1, 0]\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef google(t):\n    print('Case #{}:'.format(t), end=' ')\nRANDOM = random.randrange(2 ** 62)\n\ndef Wrapper(x):\n    return x ^ RANDOM\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))[::-1]\n    flag = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 1:\n            flag ^= i\n    if flag == 0:\n        print('Cook')\n    else:\n        print('Chef')\nfor t in range(int(input())):\n    solve()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().rstrip().split()))\n    x = 0\n    for (i, ele) in enumerate(reversed(arr)):\n        if ele % 2 == 1:\n            x = x ^ i\n    print('Cook') if x == 0 else print('Chef')", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = 0\n    a.reverse()\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 1:\n            x = x ^ i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')\n    t = t - 1", "def test():\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.reverse()\n    r = 0\n    for i in range(n):\n        if l[i] % 2 == 1:\n            r ^= i\n    if r == 0:\n        print('Cook')\n    else:\n        print('Chef')\nt = int(input())\nfor _ in range(t):\n    test()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.reverse()\n    x = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 1:\n            x ^= i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "def solve():\n    n = int(input())\n    A = list(map(int, input().split()))\n    (ans, lt) = (0, 0)\n    for i in range(n - 1, -1, -1):\n        if A[lt] % 2 == 1:\n            ans ^= i\n        lt += 1\n    return 'Cook' if ans == 0 else 'Chef'\nfor _ in range(int(input())):\n    print(solve())", "t = int(input())\nfor l in range(t):\n    input()\n    cnt = 0\n    listx = list(map(int, input().split()))\n    listx = listx[::-1]\n    for m in range(len(listx)):\n        if listx[m] % 2 == 1:\n            cnt ^= m\n    if cnt == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    list_1 = list(map(int, input().split()))\n    list_1.reverse()\n    x = 0\n    for i in range(n - 1, -1, -1):\n        if list_1[i] % 2 == 1:\n            x = x ^ i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.reverse()\n    ans = 0\n    for j in range(n):\n        if a[j] % 2 != 0:\n            ans ^= j\n    if ans == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[::-1]\n    cnt = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] % 2 == 1:\n            cnt = cnt ^ i\n    print('Cook' if cnt == 0 else 'Chef')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = 0\n    for i in range(n):\n        if l[i] % 2 == 1:\n            x ^= n - i - 1\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.reverse()\n    x = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 1:\n            x = x ^ i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    a = 0\n    for i in range(n):\n        if l[i] % 2:\n            a ^= n - 1 - i\n    if a != 0:\n        print('Chef')\n    else:\n        print('Cook')", "case = int(input())\nfor z in range(case):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    x = 0\n    a = a[::-1]\n    for i in range(n - 1, -1, -1):\n        if a[i] % 2 == 1:\n            x ^= i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    a = int(input())\n    aa = list(map(int, input().split()))\n    x = 0\n    cd = aa[::-1]\n    for i in reversed(range(a)):\n        if cd[i] % 2 == 1:\n            x ^= i\n    if x != 0:\n        print('Chef')\n    else:\n        print('Cook')", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(a % b, a)\n\ndef swap(a, b):\n    (a, b) = (b, a)\n    return (a, b)\n\ndef fact(n):\n    if n == 1:\n        return 1\n    return n * fact(n - 1)\n\ndef cbits(n):\n    count = 0\n    while n:\n        n = n & n - 1\n        count += 1\n    return count\n\ndef solve(n, arr):\n    c = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] % 2 == 1:\n            c = c ^ i\n    if c == 0:\n        print('Cook')\n    else:\n        print('Chef')\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr = arr[::-1]\n    solve(n, arr)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = a[::-1]\n    x = 0\n    for i in range(n):\n        if a[i] % 2 == 1:\n            x ^= i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    arr.reverse()\n    x = 0\n    for i in range(N - 1, -1, -1):\n        if arr[i] % 2 == 1:\n            x ^= i\n    if x == 0:\n        print('Cook')\n    else:\n        print('Chef')", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = a[::-1]\n    p = 0\n    for x in range(n):\n        if a[x] & 1:\n            p ^= x\n    if not p:\n        print('Cook')\n    else:\n        print('Chef')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    ans = 0\n    for i in range(n):\n        ans = ans ^ arr[i] % 2 * (n - i - 1)\n    if ans == 0:\n        print('Cook')\n    else:\n        print('Chef')"]