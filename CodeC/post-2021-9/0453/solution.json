["for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    good = N\n    A = [1]\n    while good < K:\n        good += len(A)\n        A.append(A[-1] + 1)\n    extra = good - K\n    if extra > 0:\n        A[-1] -= A[-1 - extra]\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)", "for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    good = N\n    A = [1]\n    while good < K:\n        good += len(A)\n        A.append(A[-1] + 1)\n    extra = good - K\n    if extra > 0:\n        A[-1] -= A[-1 - extra]\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)", "for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    good = N\n    A = [1]\n    while good < K:\n        good += len(A)\n        A.append(A[-1] + 1)\n    extra = good - K\n    if extra > 0:\n        A[-1] -= A[-1 - extra]\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)", "for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    good = N\n    A = [1]\n    while good < K:\n        good += len(A)\n        A.append(A[-1] + 1)\n    extra = good - K\n    if extra > 0:\n        A[-1] -= A[-1 - extra]\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)", "for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    good = N\n    A = [1]\n    while good < K:\n        good += len(A)\n        A.append(A[-1] + 1)\n    extra = good - K\n    if extra > 0:\n        A[-1] -= A[-1 - extra]\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)", "for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    good = N\n    A = [1]\n    while good < K:\n        good += len(A)\n        A.append(A[-1] + 1)\n    extra = good - K\n    if extra > 0:\n        A[-1] -= A[-1 - extra]\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)", "for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    good = N\n    A = [1]\n    while good < K:\n        good += len(A)\n        A.append(A[-1] + 1)\n    extra = good - K\n    if extra > 0:\n        A[-1] -= A[-1 - extra]\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)", "def solve(n, k):\n    k -= n\n    arr = []\n    count = 0\n    while k >= count:\n        arr.append(count + 1)\n        k -= count\n        count += 1\n    while len(arr) < n:\n        arr.append(count - k)\n    return arr\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = solve(n, k)\n    print(*arr)", "def solve(N, K):\n    A = []\n    (count, K) = (0, K - N)\n    while K >= count:\n        A.append(count + 1)\n        K -= count\n        count += 1\n    while len(A) < N:\n        A.append(count - K)\n    print(*A)\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    solve(N, K)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    (cnt, k) = (0, k - n)\n    ans = []\n    while k >= cnt:\n        ans.append(cnt + 1)\n        k -= cnt\n        cnt += 1\n    ans += [cnt - k] * (n - len(ans))\n    print(*ans)", "for _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    A = []\n    K = K - N\n    count = 0\n    while K >= count:\n        A.append(count + 1)\n        K -= count\n        count += 1\n    while len(A) < N:\n        A.append(count - K)\n    print(*A)", "import math\nimport bisect\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\nINF = 10 ** 20\nmod = 1000000007\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef process(n, k):\n    Ans = []\n    (count, k) = (0, k - n)\n    while k >= count:\n        Ans.append(count + 1)\n        k -= count\n        count += 1\n        print(Ans[-1], end=' ')\n    while len(Ans) < n:\n        Ans.append(count - k)\n        print(Ans[-1], end=' ')\n    print()\n\ndef main():\n    for _ in range(int(input())):\n        (n, k) = map(int, input().split())\n        process(n, k)\nmain()", "T = int(input())\nfor i in range(T):\n    (n, k) = [int(X) for X in input().split()]\n    t = 1\n    while t * (t + 1) // 2 < k - (n - 1):\n        t += 1\n    val = (t - 1) * t // 2\n    li = [1] * (n - t) + list(range(1, t + 1))\n    if n - t >= 0 and n - t < n and (n - t + k - n - val >= 0) and (n - t + k - n - val < n):\n        (li[n - t], li[n - t + k - n - val]) = (li[n - t + k - n - val], li[n - t])\n    for z in li:\n        print(z, end=' ')\n    print()", "T = int(input())\nfor i in range(T):\n    (n, k) = [int(X) for X in input().split()]\n    t = 1\n    while t * (t + 1) // 2 < k - (n - 1):\n        t += 1\n    val = (t - 1) * t // 2\n    li = [1] * (n - t) + list(range(1, t + 1))\n    if n - t >= 0 and n - t < n and (n - t + k - n - val >= 0) and (n - t + k - n - val < n):\n        (li[n - t], li[n - t + k - n - val]) = (li[n - t + k - n - val], li[n - t])\n    for z in li:\n        print(z, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    m = n - 1\n    ans = 0\n    j = n * (n + 1)\n    j = j // 2\n    j = j - k\n    while j >= m and j != 0:\n        if j >= m:\n            ans += 1\n            j -= m\n            m -= 1\n    a = [0 for i in range(n)]\n    a[0] = 1\n    for i in range(1, ans + 1):\n        a[i] = 1\n    u = 0\n    for i in range(n - 1, -1, -1):\n        u += 1\n        if u == j:\n            a[i] = 1\n    d = max(a) + 1\n    for i in range(n):\n        if a[i] != 1:\n            a[i] = d\n            d += 1\n    print(*a[::-1])", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    if k == n:\n        ans = [1] * n\n    elif k == n * (n + 1) // 2:\n        ans = [i for i in range(1, n + 1)]\n    else:\n        k -= n\n        ans = []\n        count = 0\n        while k >= count:\n            ans.append(count + 1)\n            k -= count\n            count += 1\n        while len(ans) < n:\n            ans.append(count - k)\n    print(*ans)\n    t -= 1", "import math, bisect, heapq, random, sys, itertools\nints = lambda : list(map(int, input().split()))\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\np = 10 ** 9 + 7\npref = [0]\nfor i in range(1, 10 ** 6):\n    pref.append(pref[-1] + i)\nfor t in range(int(input())):\n    (n, k) = ints()\n    arr = []\n    for i in range(1, n + 1):\n        if k - pref[i] >= n - i:\n            arr.append(i)\n            continue\n        break\n    k -= pref[len(arr)]\n    left = n - len(arr)\n    if left:\n        k -= left - 1\n        arr.append(arr[-k])\n        for i in range(left - 1):\n            arr.append(arr[-1])\n    print(*arr)", "T = int(input())\nfor t in range(T):\n    (N, K) = map(int, input().split())\n    K = K - N\n    count = 0\n    A = []\n    while count <= K:\n        A.append(str(count + 1))\n        K -= count\n        count += 1\n    while len(A) < N:\n        A.append(str(count - K))\n    print(' '.join(A))", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(s) for s in input().split(' ')]\n    ans = []\n    count = 0\n    k = k - n\n    while k >= count:\n        ans.append(count + 1)\n        k -= count\n        count += 1\n    while len(ans) < n:\n        ans.append(count - k)\n    print(*ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = k - n\n    (l, i) = ([], 0)\n    while d - i >= 0:\n        z = i + 1\n        l.append(str(z))\n        d = d - i\n        i += 1\n    while len(l) < n:\n        z = i - d\n        l.append(str(z))\n    ans = ' '.join(l)\n    print(ans)", "def solve(n, k):\n    count = 0\n    K = k - n\n    A = []\n    while K >= count:\n        A.append(count + 1)\n        K -= count\n        count += 1\n    while len(A) < n:\n        A.append(count - K)\n    for i in A:\n        print(i, end=' ')\n    print()\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    solve(n, k)", "for t in range(int(input())):\n    (n, k) = [int(c) for c in input().split()]\n    x = 1\n    while x <= n:\n        if x * (x + 1) // 2 + (n - x) > k:\n            break\n        x += 1\n    x -= 1\n    rem = k - (x * (x + 1) // 2 + (n - x))\n    ans = [i for i in range(1, x + 1)] + [x - rem] * (n - x)\n    print(*ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    arr.append(1)\n    k -= n\n    curr = 2\n    for i in range(2, n + 1):\n        if k < len(arr):\n            val = arr[len(arr) - k - 1]\n            arr.append(val)\n            break\n        k -= len(arr)\n        arr.append(curr)\n        curr += 1\n    while len(arr) < n:\n        arr.append(arr[-1])\n    print(*arr, sep=' ')", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    A = []\n    k = k - n\n    cnt = 0\n    while k >= cnt:\n        A.append(cnt + 1)\n        k -= cnt\n        cnt += 1\n    while len(A) < n:\n        A.append(cnt - k)\n    for ele in A:\n        print(ele, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    (s, e) = (1, n)\n    while s <= e:\n        m = (s + e) // 2\n        if m * (m + 1) // 2 + (n - m) > k:\n            e = m - 1\n        else:\n            s = m + 1\n    c = e * (e + 1) // 2 + n - e\n    d = k - c\n    ans = [1] * n\n    for j in range(e):\n        ans[e - 1 - j] = j + 1\n    if d > 0:\n        x = e\n        while x < n:\n            ans[x] = 1 + d\n            x += 1\n    for z in ans:\n        print(z, end=' ')\n    print()", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef testcase():\n    (N, K) = map(int, input().split())\n    (start, end) = (1, N)\n    while start <= end:\n        mid = (start + end) // 2\n        if mid * (mid + 1) // 2 + (N - mid) > K:\n            end = mid - 1\n        else:\n            start = mid + 1\n    cnt = end * (end + 1) // 2 + N - end\n    deficit = K - cnt\n    sol = [1] * N\n    for i in range(end):\n        sol[end - 1 - i] = i + 1\n    if deficit > 0:\n        i = end\n        while i < N:\n            sol[i] = 1 + deficit\n            i += 1\n    for s in sol:\n        print(s, end=' ')\n    print('')\nfor _ in range(T):\n    testcase()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    k = k - n\n    c = 0\n    l = []\n    while k >= c:\n        l.append(c + 1)\n        k -= c\n        c = c + 1\n    while len(l) < n:\n        l.append(c - k)\n    print(*l)", "import sys\ninput = sys.stdin.readline\nT = int(input())\n\ndef testcase():\n    (N, K) = map(int, input().split())\n    (start, end) = (1, N)\n    while start <= end:\n        mid = (start + end) // 2\n        if mid * (mid + 1) // 2 + (N - mid) > K:\n            end = mid - 1\n        else:\n            start = mid + 1\n    cnt = end * (end + 1) // 2 + N - end\n    deficit = K - cnt\n    sol = [1] * N\n    for i in range(end):\n        sol[end - 1 - i] = i + 1\n    if deficit > 0:\n        if end == N - 1:\n            sol[end] = 1 + deficit\n        elif deficit != 1:\n            sol[end] = deficit\n        else:\n            sol[N - 1] = 2\n    for s in sol:\n        print(s, end=' ')\n    print('')\nfor _ in range(T):\n    testcase()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    k = k - n\n    c = 0\n    l = []\n    while k >= c:\n        l.append(c + 1)\n        k -= c\n        c = c + 1\n    while len(l) < n:\n        l.append(c - k)\n    print(*l)", "def func():\n    (n, k) = map(int, input().split())\n    k = k - n\n    if k == 0:\n        print(*[1 for i in range(n)])\n        return\n    x = 1\n    while k >= x * (x - 1) // 2:\n        x += 1\n    x -= 1\n    arr = []\n    for i in range(1, x + 1):\n        arr.append(i)\n    k -= x * (x - 1) // 2\n    req_elem = arr[-(k + 1)]\n    larr = len(arr)\n    while larr < n:\n        arr.append(req_elem)\n        larr += 1\n    print(*arr)\nt = int(input())\nfor i in range(t):\n    func()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    k = k - n\n    a = []\n    cnt = 0\n    while k >= cnt:\n        a.append(cnt + 1)\n        k -= cnt\n        cnt += 1\n    while len(a) < n:\n        a.append(cnt - k)\n    print(*a)", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split(' '))\n    (ele, val, ls) = (0, 0, [])\n    k -= n\n    for i in range(n):\n        if k - val >= 0:\n            k -= val\n            ele += 1\n            val += 1\n            ls.append(ele)\n        elif k > 0:\n            ele = ls[i - k - 1]\n            k = 0\n            ls.append(ele)\n            val = 1\n        else:\n            ls.append(ele)\n    print(' '.join([str(i) for i in ls]))\n    t -= 1", "from bisect import bisect_right as br\nss = [0] * 2 + list(range(1, 10 ** 5 + 1))\nfor i in range(2, 10 ** 5 + 2):\n    ss[i] += ss[i - 1]\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    m = n * (n + 1) // 2\n    if k == n:\n        print(('1 ' * n).strip())\n    elif k == m:\n        print(' '.join(list(map(str, range(1, n + 1)))))\n    else:\n        rem = k - n\n        ind = br(ss, rem)\n        arr = list(range(1, ind)) + [ind - 1] * (n - ind + 1)\n        off = rem - ss[ind - 1]\n        arr = arr[:ind - 1] + [ind - 1 - off] * (n - ind + 1)\n        print(' '.join(list(map(str, arr))))", "import sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nfrom math import log\nfrom math import gcd\nfrom math import atan2, acos\nfrom random import randint\nsa = lambda : input_()\nsb = lambda : int(input_())\nsc = lambda : input_().split()\nsd = lambda : list(map(int, input_().split()))\nsflo = lambda : list(map(float, input_().split()))\nse = lambda : float(input_())\nsf = lambda : list(input_())\nflsh = lambda : sys.stdout.flush()\nmod = 10 ** 9 + 7\nmod1 = 998244353\ngp = []\ncost = []\ndp = []\nmx = []\nans1 = []\nans2 = []\nspecial = []\nspecnode = []\na = 0\nkthpar = []\n\ndef dfs2(root, par):\n    if par != -1:\n        dp[root] = dp[par] + 1\n    for i in range(1, 20):\n        if kthpar[root][i - 1] != -1:\n            kthpar[root][i] = kthpar[kthpar[root][i - 1]][i - 1]\n    for child in gp[root]:\n        if child == par:\n            continue\n        kthpar[child][0] = root\n        dfs(child, root)\nans = 0\na = []\n(n, k) = (0, 0)\nb = []\nvis = []\ntot = 0\ntime = []\ntime1 = []\nadj = []\nmx = -1\neps = 1e-07\ngp = []\nans = []\n\ndef update_it(bit, i, val):\n    n = len(bit)\n    while i < n:\n        bit[i] += val\n        i += i & -i\n\ndef get_ans(bit, i):\n    n = len(bit)\n    tot = 0\n    while i > 0:\n        tot += bit[i]\n        i -= i & -i\n    return tot\n\ndef flip(a, l, r):\n    for i in range(l, r):\n        a[i] = '0' if a[i] == '1' else '1'\n    return\n\ndef hnbhai(tc):\n    (n, k) = sd()\n    ans = []\n    for i in range(n, 0, -1):\n        if i * (i + 1) // 2 + (n - i) <= k:\n            for j in range(i, 0, -1):\n                ans.append(j)\n            left = k - i * (i + 1) // 2 - (n - i)\n            while len(ans) < n:\n                ans.append(left + 1)\n            print(*ans)\n            return\nfor _ in range(sb()):\n    hnbhai(_ + 1)", "def solve(N, K):\n    A = []\n    (count, K) = (0, K - N)\n    while K >= count:\n        A.append(count + 1)\n        K -= count\n        count += 1\n    while len(A) < N:\n        A.append(count - K)\n    for i in A:\n        print(i, end=' ')\n    print()\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    solve(N, K)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    arr.append(1)\n    k -= n\n    curr = 2\n    for i in range(2, n + 1):\n        if k < len(arr):\n            val = arr[len(arr) - k - 1]\n            arr.append(val)\n            break\n        k -= len(arr)\n        arr.append(curr)\n        curr += 1\n    while len(arr) < n:\n        arr.append(arr[-1])\n    print(*arr, sep=' ')", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().strip().split()))\n    arr = [1]\n    k -= n\n    curr = 2\n    for i in range(2, n + 1):\n        if k < len(arr):\n            val = arr[len(arr) - k - 1]\n            arr.append(val)\n            break\n        k -= len(arr)\n        arr.append(curr)\n        curr += 1\n    while len(arr) < n:\n        arr.append(arr[-1])\n    print(*arr)", "test = int(input())\nwhile test:\n    (n, k) = map(int, input().split())\n    l = k - n\n    a = []\n    i = 1\n    while l >= i * (i + 1) // 2:\n        i += 1\n    for j in range(1, i + 1):\n        a.append(j)\n    for j in range(n - i):\n        a.insert(0, 1)\n    num = l - i * (i - 1) // 2\n    ipos = n - i\n    p = a.pop(ipos)\n    a.insert(ipos + num, 1)\n    for m in a:\n        print(m, end=' ')\n    print()\n    test -= 1", "def solution():\n    (N, K) = map(int, input().split())\n    K -= N\n    A = [1]\n    for i in range(2, N + 1):\n        if K < len(A):\n            A.append(A[-(K + 1)])\n            break\n        K -= len(A)\n        A.append(i)\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)\nfor _ in range(int(input())):\n    solution()", "def solution():\n    (N, K) = map(int, input().split())\n    K -= N\n    A = [1]\n    for i in range(2, N + 1):\n        if K < len(A):\n            A.append(A[-(K + 1)])\n            break\n        K -= len(A)\n        A.append(i)\n    while len(A) < N:\n        A.append(A[-1])\n    print(*A)\nfor _ in range(int(input())):\n    solution()", "tcs = int(input())\nwhile tcs:\n    (n, k) = map(int, input().split())\n    if n == k:\n        print(*[1] * k)\n    else:\n        arr = [1] * 1\n        k -= n\n        curr = 2\n        for i in range(2, n + 1):\n            if k < len(arr):\n                val = arr[len(arr) - (k + 1)]\n                arr.append(val)\n                break\n            k -= len(arr)\n            arr.append(curr)\n            curr += 1\n        while len(arr) < n:\n            arr.append(arr[-1])\n        print(*arr)\n    tcs -= 1", "import sys\nRW = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nfrom collections import defaultdict as df\nimport heapq\nfrom math import ceil, floor, log2\nt = int(input())\nfor _ in range(t):\n    (n, k) = RW()\n    k -= n\n    ans = [1] * n\n    cur = 2\n    i = 0\n    add = 1\n    while k - add >= 0:\n        k -= add\n        add += 1\n        ans[i] = cur\n        cur += 1\n        i += 1\n    for i in range(i + 1, n):\n        if k == 0:\n            break\n        ans[i] = cur - k\n    print(*ans)", "import sys\nRW = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nfrom collections import defaultdict as df\nimport heapq\nfrom math import ceil, floor, log2\nt = int(input())\nfor _ in range(t):\n    (n, k) = RW()\n    k -= n\n    i = 0\n    nxt = 1\n    cur = 0\n    while k >= cur:\n        print(cur + 1, end=' ')\n        i += 1\n        k -= cur\n        cur += 1\n    while i < n:\n        print(cur - k, end=' ')\n        i += 1\n    print()", "import sys, os.path, math\nif os.path.exists('Input.txt'):\n    sys.stdin = open('Input.txt', 'r')\n    sys.stdout = open('Output.txt', 'w')\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    Last = N * (N + 1) // 2\n    if K == Last:\n        print(*[i + 1 for i in range(N)])\n    elif K < Last and N < K:\n        (Series, Sum, Part) = (1, N, 0)\n        for i in range(1, N + 1):\n            if Sum + i <= K:\n                Series += 1\n                Sum += i\n            else:\n                Part = K - Sum\n                break\n        Answer = [i + 1 for i in range(1, Series)]\n        if Part > 0:\n            Answer.append(Series - Part)\n        Left = N - len(Answer) + 1\n        Answer = [1 for i in range(1, Left)] + Answer\n        print(*Answer)\n    else:\n        print(*[1 for i in range(N)])", "import sys, os.path, math\nif os.path.exists('Input.txt'):\n    sys.stdin = open('Input.txt', 'r')\n    sys.stdout = open('Output.txt', 'w')\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    Last = N * (N + 1) // 2\n    if K == Last:\n        print(*[i + 1 for i in range(N)])\n    elif K < Last and N < K:\n        (Series, Sum, Part) = (1, N, 0)\n        for i in range(1, N + 1):\n            if Sum + i <= K:\n                Series += 1\n                Sum += i\n            else:\n                Part = K - Sum\n        Answer = [i + 1 for i in range(1, Series)]\n        if Part > 0:\n            Answer.append(Series - Part)\n        Left = N - len(Answer) + 1\n        Answer = [1 for i in range(1, Left)] + Answer\n        print(*Answer)\n    else:\n        print(*[1 for i in range(N)])", "from math import sqrt\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = int(sqrt(2 * k))\n    while n - s + s * (s + 1) // 2 > k:\n        s -= 1\n    arr = list(range(1, s + 1))\n    size = len(arr)\n    k -= s * (s + 1) // 2\n    if k > 0:\n        req = k - (n - size - 1)\n        arr.append(arr[len(arr) - req])\n        size += 1\n        arr.extend([arr[-1]] * (n - size))\n    print(*arr)", "import math\nimport os\nimport random\nimport re\nimport sys\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    K -= N\n    c = 2\n    arr = [1]\n    for i in range(1, N):\n        if K < len(arr):\n            d = arr[len(arr) - K - 1]\n            arr.append(d)\n            break\n        K -= len(arr)\n        arr.append(c)\n        c += 1\n    while len(arr) < N:\n        arr.append(arr[len(arr) - 1])\n    for i in range(len(arr)):\n        print(arr[i], end=' ')\n    print()", "from math import sqrt\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    prev_value = 1\n    arr = []\n    s = int(sqrt(2 * k))\n    while n - s < 0 or n - s + s * (s + 1) // 2 > k:\n        s -= 1\n    arr.extend(list(range(1, s + 1)))\n    size = len(arr)\n    k -= s * (s + 1) // 2\n    if k > 0:\n        req = k - (n - size - 1)\n        arr.append(arr[len(arr) - req])\n        size += 1\n        arr.extend([arr[-1]] * (n - size))\n    print(*arr)", "from math import sqrt\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    prev_value = 1\n    arr = []\n    s = int(sqrt(2 * k))\n    while n - s < 0 or n - s + s * (s + 1) // 2 > k:\n        s -= 1\n    arr.extend(list(range(1, s + 1)))\n    size = len(arr)\n    k -= s * (s + 1) // 2\n    if k > 0:\n        req = k - (n - size - 1)\n        arr.append(arr[len(arr) - req])\n        size += 1\n        arr.extend([arr[-1]] * (n - size))\n    print(*arr)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n(zr, on, tw) = (0, 1, 2)\ntcs = int(input())\nfor tc in range(tcs):\n    (n, k) = map(int, input().split())\n    if n - k == zr:\n        finn = [on] * k\n        for i in range(len(finn)):\n            print(finn[i], end=' ', flush=False)\n        print()\n    else:\n        lis = [on] * on\n        k -= n\n        now = tw\n        sz = len(lis)\n        for i in range(tw, n + on):\n            if k >= len(lis):\n                pass\n            else:\n                tmp = lis[len(lis) - (k + on)]\n                lis += [tmp]\n                break\n            k -= len(lis)\n            lis += [now]\n            now += on\n        while True:\n            if len(lis) >= n:\n                break\n            else:\n                lis += [lis[-on]]\n        for i in range(len(lis)):\n            print(lis[i], end=' ', flush=False)\n        print()", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().strip().split()))\n    arr = [1]\n    k -= n\n    curr = 2\n    for i in range(2, n + 1):\n        if k < len(arr):\n            val = arr[len(arr) - k - 1]\n            arr.append(val)\n            break\n        k -= len(arr)\n        arr.append(curr)\n        curr += 1\n    while len(arr) < n:\n        arr.append(arr[-1])\n    print(*arr)", "import bisect\nimport math\nimport string\nfrom collections import deque, Counter\nimport sys\ninput = lambda : sys.stdin.readline().strip()\nmod = 10 ** 9 + 7\ndp = [[0] * 51 for i in range(51)]\n\ndef solve():\n    (n, k) = map(int, input().split())\n    ans = [1]\n    k = k - n\n    c = 2\n    for i in range(2, n + 1):\n        if k < len(ans):\n            v = ans[len(ans) - k - 1]\n            ans.append(v)\n            break\n        k = k - len(ans)\n        ans.append(c)\n        c = c + 1\n    while len(ans) < n:\n        ans.append(ans[-1])\n    print(*ans)\nfor testis in range(int(input())):\n    solve()", "def calculation(n, p):\n    maximum = n * (n + 1) // 2 + (n + 1)\n    return min(maximum, n + p * (p - 1) // 2)\n\ndef compare(k, n, p):\n    ans = calculation(n, p)\n    return ans <= k\n\ndef search(n, k):\n    x = 1\n    y = n + 1\n    index = y\n    while index >= 1:\n        while compare(k, n, x + index):\n            x = x + index\n        index = index // 2\n    return x\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    p = search(n, k)\n    steps = int(k - calculation(n, p))\n    arr = [1 for _ in range(n)]\n    i = int(n - p)\n    c = 1\n    while i < n:\n        arr[i] = c\n        i += 1\n        c += 1\n    c = int(n - p)\n    i = 0\n    while i < steps:\n        (arr[c], arr[c + 1]) = (arr[c + 1], arr[c])\n        i += 1\n        c += 1\n    print(*arr)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = []\n    arr.append(1)\n    k -= n\n    curr = 2\n    for i in range(2, n + 1):\n        if k < len(arr):\n            val = arr[len(arr) - k - 1]\n            arr.append(val)\n            break\n        k -= len(arr)\n        arr.append(curr)\n        curr += 1\n    while len(arr) < n:\n        arr.append(arr[-1])\n    print(*arr, sep=' ')", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    arr = []\n    arr.append(1)\n    k = k - n\n    temp = 2\n    for i in range(2, n + 1):\n        if k < len(arr):\n            rr = arr[len(arr) - k - 1]\n            arr.append(rr)\n            break\n        k = k - len(arr)\n        arr.append(temp)\n        temp += 1\n    while len(arr) < n:\n        arr.append(arr[len(arr) - 1])\n    print(*arr)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [1]\n    k -= n\n    curr = 2\n    for i in range(2, n + 1):\n        if k < len(arr):\n            val = arr[len(arr) - k - 1]\n            arr.append(val)\n            break\n        k -= len(arr)\n        arr.append(curr)\n        curr += 1\n    while len(arr) < n:\n        arr.append(arr[-1])\n    print(*arr)", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    it = 1\n    bound = n\n    if n == k:\n        for i in range(n):\n            print(1, end=' ')\n        print()\n        continue\n    while k > bound:\n        bound = bound + (n - it)\n        it += 1\n    newnum = it\n    it -= 1\n    arr = [1] * n\n    for i in range(n):\n        arr[i] = i % it + 1\n    lb = bound - (n - it)\n    diff = k - lb\n    cnter = 0\n    markers = []\n    while diff > 0:\n        if cnter == 0:\n            for i in range(len(markers)):\n                ind = markers[i]\n                (arr[ind], arr[ind + 1]) = (arr[ind + 1], arr[ind])\n                markers[i] = ind + 1\n            arr[0] = newnum\n            markers.append(0)\n            cnter += 1\n        else:\n            for i in range(len(markers)):\n                ind = markers[i]\n                (arr[ind], arr[ind + 1]) = (arr[ind + 1], arr[ind])\n                markers[i] = ind + 1\n            cnter += 1\n            cnter = cnter % newnum\n        diff -= 1\n    print(*arr)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (10 ** 9 + 7, 998244353)\n\ndef sieve(MAXN):\n    prime = [True] * (MAXN + 10)\n    (prime[0], prime[1]) = [False] * 2\n    for i in range(2, int(math.sqrt(MAXN + 1)) + 5):\n        if prime[i] == True:\n            for j in range(i * i, MAXN + 5, i):\n                prime[j] = False\n    return prime\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for __ in range(how_much_noob_I_am):\n        (n, k) = sep()\n        k -= n\n        arr = [1]\n        curr = 2\n        for i in range(2, n + 1):\n            if len(arr) > k:\n                val = arr[len(arr) - k - 1]\n                arr.append(val)\n                break\n            k -= len(arr)\n            arr.append(curr)\n            curr += 1\n        while len(arr) < n:\n            arr.append(arr[-1])\n        print(*arr)\nmain()", "t = int(input())\nwhile t != 0:\n    (n, k) = map(int, input().split())\n    if k == n:\n        ans = [1] * n\n    elif k == n * (n + 1) // 2:\n        ans = [i for i in range(1, n + 1)]\n    else:\n        k -= n\n        ans = [1]\n        c = 2\n        for i in range(2, n + 1):\n            if k < len(ans):\n                x = ans[len(ans) - k - 1]\n                ans.append(x)\n                break\n            k -= len(ans)\n            ans.append(c)\n            c += 1\n        while len(ans) < n:\n            x = ans[-1]\n            ans.append(x)\n    print(*ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    array = [1]\n    k -= n\n    right = 2\n    for i in range(2, n + 1):\n        if k < len(array):\n            val = array[len(array) - k - 1]\n            array.append(val)\n            break\n        k -= len(array)\n        array.append(right)\n        right += 1\n    while len(array) < n:\n        array.append(array[-1])\n    for i in array:\n        print(i, end=' ')\n    print()", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lst = [1]\n    k -= n\n    for i in range(2, n + 1):\n        if k < len(lst):\n            val = lst[len(lst) - k - 1]\n            lst.append(val)\n            break\n        k -= len(lst)\n        lst.append(i)\n    while len(lst) < n:\n        lst.append(lst[-1])\n    print(*lst)", "import math\n\ndef func():\n    (n, k) = map(int, input().split())\n    k -= n\n    arr = [1]\n    size = 1\n    idx = 2\n    for i in range(2, n + 1):\n        if k < size:\n            v = arr[size - k - 1]\n            arr.append(v)\n            size += 1\n            break\n        k -= size\n        arr.append(idx)\n        size += 1\n        idx += 1\n    while size < n:\n        arr.append(arr[-1])\n        size += 1\n    print(*arr)\nt = int(input())\nfor i in range(t):\n    func()", "def solve(n, k):\n    a = [1]\n    cur = 2\n    k -= n\n    for i in range(2, n + 1):\n        if k < len(a):\n            val = a[len(a) - k - 1]\n            a.append(val)\n            break\n        k -= len(a)\n        a.append(cur)\n        cur += 1\n    while len(a) < n:\n        a.append(a[-1])\n    for x in a:\n        print(x, end=' ')\n    print()\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    solve(n, k)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        curr = n\n        i = 1\n        while curr < k:\n            curr += i\n            i += 1\n        if curr > k:\n            i -= 1\n            curr -= i\n        i -= 1\n        A = [1] * (n - i)\n        for j in range(i):\n            A.append(j + 2)\n        for x in range(k - curr):\n            (A[n - i + x - 1], A[n - i + x]) = (A[n - i + x], A[n - i + x - 1])\n        for x in A:\n            print(x, end=' ')\n        print()\nexcept:\n    pass", "import math\n\ndef get_input(f):\n    if f is None:\n        nextline = input()\n    else:\n        nextline = f.readline()\n    return nextline\n\ndef TOWERTOP():\n    read_from_file = 0\n    if read_from_file:\n        f = open('input.txt', 'r')\n    else:\n        f = None\n    for _ in range(int(get_input(f))):\n        ins = list(map(int, get_input(f).split()))\n        n = ins[0]\n        k = ins[1]\n        bucket = findBucket(n * (n + 1) / 2 - k + 1)\n        numLetters = n + 1 - bucket\n        maxPrevBucket = int(n * (n + 1) / 2 - bucket * (bucket + 1) / 2)\n        posWithinbucket = k - maxPrevBucket\n        maxLetterUsed = 0\n        res = [0] * n\n        nextLetter = (posWithinbucket - 1) % numLetters\n        if nextLetter == 0:\n            nextLetter = numLetters\n        maxLetterNum = math.ceil(posWithinbucket / numLetters)\n        maxLetterGone = False\n        for i in range(n):\n            res[i] = nextLetter\n            if res[i] == numLetters:\n                maxLetterUsed += 1\n                if maxLetterUsed == maxLetterNum:\n                    maxLetterGone = True\n            nextLetter -= 1\n            if nextLetter == 0:\n                nextLetter = numLetters\n                if maxLetterGone:\n                    nextLetter -= 1\n        print(' '.join(map(str, res)))\n\ndef findBucket(x):\n    return math.ceil((-1 + math.sqrt(1 + 8 * x)) / 2)\nTOWERTOP()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1]\n    k -= n\n    curr = 2\n    for i in range(2, n + 1):\n        if k < len(a):\n            val = a[len(a) - k - 1]\n            a.append(val)\n            break\n        k -= len(a)\n        a.append(curr)\n        curr += 1\n    while len(a) < n:\n        a.append(a[-1])\n    for i in a:\n        print(i, end=' ')\n    print()", "def solve(n, k):\n    a = [1]\n    k -= n\n    c = 2\n    for i in range(2, n + 1):\n        if k < len(a):\n            v = a[len(a) - 1 - k]\n            a.append(v)\n            break\n        k -= len(a)\n        a.append(c)\n        c += 1\n    while len(a) < n:\n        a.append(a[-1])\n    return ' '.join((_ for _ in a))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [1]\n    k -= n\n    c = 2\n    for i in range(2, n + 1):\n        if k < len(a):\n            v = a[len(a) - 1 - k]\n            a.append(v)\n            break\n        k -= len(a)\n        a.append(c)\n        c += 1\n    while len(a) < n:\n        a.append(a[-1])\n    print(*a)", "import math\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = 1\n    b = 1\n    c = -(2 * (k - n))\n    x1 = (-b + (b * b - 4 * a * c) ** (1 / 2)) / 2\n    x2 = (-b - (b * b - 4 * a * c) ** (1 / 2)) / 2\n    p = 0\n    if x1 > 0:\n        p = math.ceil(x1)\n    elif x2 > 0:\n        p = math.ceil(x2)\n    ap = p * (p + 1) // 2 + n\n    ap1 = ap - k\n    anslist = []\n    if ap1 == 0:\n        n1 = p + 1\n    else:\n        n1 = p\n    for j in range(ap1 - 1):\n        anslist.append(n1)\n        n1 -= 1\n    for j in range(n - ap1):\n        if n1 >= 1:\n            anslist.append(n1)\n            n1 -= 1\n        else:\n            anslist.append(1)\n    if ap1 != 0:\n        anslist.insert(ap1 - 1, 1)\n    print(*anslist[::-1])", "import math\n\ndef func(N, K):\n    itr = 2\n    K -= N\n    arr = [1]\n    for i in range(2, N + 1):\n        if K < len(arr):\n            val = arr[len(arr) - K - 1]\n            arr.append(val)\n            break\n        K -= len(arr)\n        arr.append(itr)\n        itr += 1\n    while len(arr) < N:\n        arr.append(arr[-1])\n    return arr\n    pass\nT = int(input())\nfor i in range(T):\n    (X, M) = map(int, input().split())\n    print(*func(X, M))", "tcs = int(input())\nwhile tcs:\n    (n, k) = map(int, input().split())\n    if n == k:\n        print(*[1] * k)\n    else:\n        arr = [1] * 1\n        k -= n\n        curr = 2\n        for i in range(2, n + 1):\n            if k < len(arr):\n                val = arr[len(arr) - (k + 1)]\n                arr.append(val)\n                break\n            k -= len(arr)\n            arr.append(curr)\n            curr += 1\n        while len(arr) < n:\n            arr.append(arr[-1])\n        print(*arr)\n    tcs -= 1", "import math\nt = int(input())\nfor i in range(t):\n    a = list(map(int, input().split()))\n    n = a[0]\n    k = a[1]\n    li = []\n    cnt = n\n    for j in range(n):\n        li.append(1)\n    for j in range(1, n):\n        if cnt + j <= k:\n            li[j] = j + 1\n            cnt += j\n        else:\n            u = k - cnt\n            p = li[j - u - 1]\n            for k in range(j, n):\n                li[k] = p\n            break\n    for j in range(n):\n        print(li[j], end=' ')\n        if j == n - 1:\n            print()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [1] * 1\n    k -= n\n    curr = 2\n    for x in range(2, n + 1):\n        if k < len(l):\n            val = l[len(l) - k - 1]\n            l.append(val)\n            break\n        k -= len(l)\n        l.append(curr)\n        curr += 1\n    while len(l) < n:\n        l.append(l[-1])\n    print(*l)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    k -= n\n    d = 2\n    arr = []\n    arr.append(1)\n    for i in range(2, n + 1):\n        if k < len(arr):\n            v1 = arr[len(arr) - k - 1]\n            arr.append(v1)\n            break\n        k -= len(arr)\n        arr.append(d)\n        d += 1\n    while len(arr) < n:\n        arr.append(arr[len(arr) - 1])\n    for i in arr:\n        print(i, end=' ')\n    print()", "import math\n\ndef main():\n    tc = int(input())\n    while tc > 0:\n        (n, k) = map(int, input().split())\n        if k == n:\n            for i in range(n):\n                print('1', end=' ')\n        else:\n            diff = k - n\n            sum = 1\n            while sum * (sum + 1) <= 2 * diff:\n                sum += 1\n            sum -= 1\n            if diff == (sum + 2) * (sum + 1) // 2 - 1:\n                for i in range(n - sum - 1):\n                    print('1', end=' ')\n                for i in range(sum):\n                    print(str(2 + i), end=' ')\n                print('1')\n            elif diff == sum * (sum + 1) // 2:\n                for i in range(n - sum):\n                    print('1', end=' ')\n                for i in range(sum):\n                    print(str(2 + i), end=' ')\n            else:\n                for i in range(n - sum - 1):\n                    print('1', end=' ')\n                newdiff = int((sum + 2) * (sum + 1) / 2 - 1 - diff)\n                for i in range(sum - newdiff):\n                    last = 2 + i\n                    print(str(2 + i), end=' ')\n                print('1', end=' ')\n                for i in range(newdiff):\n                    print(str(last + i + 1), end=' ')\n        print()\n        tc -= 1\nmain()", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    max1 = n * (n + 1) // 2\n    if k == n:\n        A = [1 for i in range(n)]\n    elif k == max1:\n        A = [int(i) for i in range(1, n + 1)]\n    else:\n        for i in range(n - 1, 0, -1):\n            if k >= max1 - i:\n                A = [int(j) for j in range(1, i)]\n                ref1 = k - (max1 - i)\n                A1 = A[:i - ref1 - 1]\n                A2 = A[i - ref1 - 1:]\n                A1.append(i)\n                A1 = A1 + A2\n                n1 = n - i\n                for j in range(n1):\n                    A1.append(i)\n                A = A1\n                break\n            else:\n                max1 -= i\n    print(*A)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    if n == k:\n        print(*[1] * n)\n    else:\n        x = k - n\n        add = 0\n        flip = 0\n        for i in range(1, n + 1):\n            sum = i * (i + 1) // 2\n            if sum == x:\n                add = i\n                break\n            elif sum > x:\n                add = i - 1\n                flip = x - (sum - i)\n                break\n        l = [1] * (n - add)\n        for i in range(2, add + 2):\n            l.append(i)\n        if flip != 0:\n            i = l.index(2)\n            while flip > 0:\n                (l[i], l[i - 1]) = (l[i - 1], l[i])\n                i += 1\n                flip -= 1\n        print(*l)", "def solver(n, k):\n    i = 0\n    diff = k - n\n    while diff >= i * (i + 1) // 2:\n        i += 1\n    bucket = i\n    index = diff - i * (i - 1) // 2\n    arr = [j for j in range(2, bucket + 1)]\n    arr.insert(index, 1)\n    arr = [1 for _ in range(n - len(arr))] + arr\n    s = [str(l) for l in arr]\n    print(' '.join(s))\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = list(map(int, input().split(' ')))\n    solver(n, k)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    k -= n\n    c = 2\n    arr = [1]\n    ans = 0\n    for i in range(2, n + 1):\n        if k < len(arr):\n            ans = arr[len(arr) - k - 1]\n            arr.append(ans)\n            break\n        k -= len(arr)\n        arr.append(c)\n        c += 1\n    while len(arr) < n:\n        arr.append(arr[-1])\n    print(*arr)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    cur = 1\n    num = [1]\n    K -= 1\n    second_part = []\n    for i in range(1, N):\n        if K > N - 1:\n            num.append(i + 1)\n            K -= i + 1\n        else:\n            repeat = K - (N - i - 1)\n            second_part = [num[i - repeat] for _ in range(N - len(num))]\n            break\n    answer = num + second_part\n    print(' '.join(list(map(str, answer))))", "def ga():\n    return list(map(int, input().split()))\nfor _ in range(int(input())):\n    (n, k) = ga()\n    ans = [1 for i in range(n)]\n    k -= n\n    i = 1\n    while i < n:\n        if k >= i:\n            ans[i] = ans[i - 1] + 1\n            k -= i\n        elif k == 0:\n            ans[i] = ans[i - 1]\n        else:\n            ans[i] = ans[i - 1] - k\n            k = 0\n        i += 1\n    ans = list(map(str, ans))\n    print(' '.join(ans))", "t = int(input())\nfor ti in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    s = 0\n    i = 0\n    while i < n:\n        s += n - i\n        if s >= k:\n            break\n        i += 1\n    s -= n - 1\n    rem = k - s\n    res = []\n    for j in range(k - s + 1):\n        res += (j % (i + 1) + 1,)\n    if i > 0:\n        rep = res[-i:]\n        idx = 0\n        for j in range(k - s + 1, n):\n            res += (rep[idx % i],)\n            idx += 1\n    for r in res:\n        print(r, end=' ')\n    print()", "from bisect import bisect_left, bisect_right\nm = 100005\np2 = [0 for i in range(m)]\np2[m - 1] = m - 1\nfor i in range(m - 2, -1, -1):\n    p2[i] = p2[i + 1] + i\np2 = p2[::-1]\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    y = k + p2[m - 1 - n - 1]\n    ind = bisect_left(p2, y)\n    df = 0\n    if ind > m:\n        ind -= 1\n    if p2[ind] != y:\n        df = y - p2[ind - 1]\n    ind = m - 1 - ind\n    arr = [0 for i in range(n)]\n    num = n - ind + 1\n    for i in range(num):\n        arr[i] = i + 1\n    if df == 0:\n        j = 1\n        for i in range(num, n):\n            arr[i] = j\n            if j + 1 > num:\n                j = 1\n            else:\n                j = j + 1\n    else:\n        j = 1\n        df -= 1\n        for i in range(num, n):\n            if df == 0:\n                lst = i\n                break\n            arr[i] = j\n            if j + 1 > num:\n                j = 1\n            else:\n                j = j + 1\n            df -= 1\n        lft = lst - num + 1\n        rgt = lst - 1\n        j = lft\n        for i in range(lst, n):\n            arr[i] = arr[j]\n            if j == rgt:\n                j = lft\n            else:\n                j += 1\n    print(*arr)", "import math\nt = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    if k == n:\n        for i in range(1, n + 1):\n            print(1, end=' ')\n        print('')\n        continue\n    if k == (n + 1) * (n + 2) // 2:\n        for i in range(1, n + 1):\n            print(i, end=' ')\n        print('')\n        continue\n    k = k - n + 1\n    x = -1 + math.sqrt(1 + 8 * k) / 2\n    if x != int(x):\n        x = int(x) + 1\n    start = (x - 1) * x // 2 + 1\n    final = x * (x + 1) // 2\n    if k > final:\n        x += 1\n        start = (x - 1) * x // 2 + 1\n        final = x * (x + 1) // 2\n    for i in range(n - x):\n        print(1, end=' ')\n    for i in range(x):\n        if k - start == i:\n            print(1, end=' ')\n        elif k - start < i:\n            print(i + 1, end=' ')\n        else:\n            print(i + 2, end=' ')\n    print('')", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [1] * n\n    i = 1\n    while i * (i + 1) // 2 + i - 1 + n - i <= k:\n        arr[i - 1] = i\n        i += 1\n    i = i - 1\n    curr = i * (i + 1) // 2 + i - 1 + n - i\n    if curr == k:\n        print(*arr)\n        continue\n    i += 1\n    arr[i - 1] = i\n    p = i * (i + 1) // 2 + i - 1 + n - i - k\n    (arr[p], arr[0]) = (arr[0], arr[p])\n    print(*arr)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = k - n\n    if x == 0:\n        print(*[1] * n)\n    else:\n        num = int(1 + math.sqrt(1 + 4 * 2 * x)) // 2\n        val = int((math.pow(num, 2) - num) // 2)\n        for i in range(1, num + 1):\n            print(i, end=' ')\n        rem = n - num\n        for i in range(rem):\n            print(num - x + val, end=' ')\n        print()", "import sys\nimport math\nfrom collections import defaultdict, Counter\nfrom bisect import *\nfrom string import ascii_lowercase\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef solve():\n    (n, k) = readInts()\n    a = [1 for _ in range(n)]\n    k -= n\n    i = 2\n    while (i + 1) * i / 2 - i < k:\n        i += 1\n    if (i + 1) * i / 2 - i > k:\n        i -= 1\n    k -= (i + 1) * i / 2 - i\n    p = i\n    for j in range(n - 1, n - i, -1):\n        a[j] = p\n        p -= 1\n    if k:\n        for j in range(n - i, n - i + int(k)):\n            temp = a[j]\n            a[j] = a[j + 1]\n            a[j + 1] = temp\n    print(*a)\n\ndef main():\n    t = 1\n    t = readInts()\n    for _ in range(t):\n        solve()\nmain()"]