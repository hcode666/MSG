["def location(c, p, l, r):\n    mid = (l + r) // 2\n    if p[mid] > c and p[mid - 1] < c:\n        return mid - 1\n    elif p[mid - 1] > c:\n        return location(c, p, l, mid)\n    elif p[mid] < c:\n        return location(c, p, mid, r)\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    if n == 1:\n        if p[0] > c:\n            l = -1\n        else:\n            l = 0\n    elif n == 2:\n        if p[0] > c:\n            l = -1\n        elif p[0] < c and p[1] > c:\n            l = 0\n        else:\n            l = 1\n    elif p[0] > c:\n        l = -1\n    elif p[-1] < c:\n        l = n - 1\n    else:\n        l = location(c, p, 0, n)\n    ans = 0\n    xd = 1\n    if l == -1:\n        for i in range(n):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    elif l == n - 1:\n        for i in range(-1, -n - 1, -1):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    else:\n        a = b = 0\n        for i in range(l, -1, -1):\n            if (c + p[i]) % 2 == 1:\n                a += 1\n            else:\n                xd = -1\n                break\n        for i in range(l + 1, n + 1):\n            if (c + p[i]) % 2 == 1:\n                b += 1\n            else:\n                xd = -1\n                break\n        ans = a + b\n    print(ans, xd)", "def location(c, p, l, r):\n    mid = (l + r) // 2\n    if p[mid] > c and p[mid - 1] < c:\n        return mid - 1\n    elif p[mid - 1] > c:\n        return location(c, p, l, mid)\n    elif p[mid] < c:\n        return location(c, p, mid, r)\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    if n == 1:\n        if p[0] > c:\n            l = -1\n        else:\n            l = 0\n    elif n == 2:\n        if p[0] > c:\n            l = -1\n        elif p[0] < c and p[1] > c:\n            l = 0\n        else:\n            l = 1\n    elif p[0] > c:\n        l = -1\n    elif p[-1] < c:\n        l = n - 1\n    else:\n        l = location(c, p, 0, n)\n    ans = 0\n    xd = 1\n    if l == -1:\n        for i in range(n):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    elif l == n - 1:\n        for i in range(-1, -n - 1, -1):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    else:\n        a = b = 0\n        for i in range(l, -1, -1):\n            if (c + p[i]) % 2 == 1:\n                a += 1\n            else:\n                xd = -1\n                break\n        for i in range(l + 1, n + 1):\n            if (c + p[i]) % 2 == 1:\n                b += 1\n            else:\n                xd = -1\n                break\n        ans = a + b\n    print(ans, xd)", "def location(c, p, l, r):\n    mid = (l + r) // 2\n    if p[mid] > c and p[mid - 1] < c:\n        return mid - 1\n    elif p[mid - 1] > c:\n        return location(c, p, l, mid)\n    elif p[mid] < c:\n        return location(c, p, mid, r)\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    if n == 1:\n        if p[0] > c:\n            l = -1\n        else:\n            l = 0\n    elif n == 2:\n        if p[0] > c:\n            l = -1\n        elif p[0] < c and p[1] > c:\n            l = 0\n        else:\n            l = 1\n    elif p[0] > c:\n        l = -1\n    elif p[-1] < c:\n        l = n - 1\n    else:\n        l = location(c, p, 0, n)\n    ans = 0\n    xd = 1\n    if l == -1:\n        for i in range(n):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    elif l == n - 1:\n        for i in range(-1, -n - 1, -1):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    else:\n        a = b = 0\n        for i in range(l, -1, -1):\n            if (c + p[i]) % 2 == 1:\n                a += 1\n            else:\n                xd = -1\n                break\n        for i in range(l + 1, n + 1):\n            if (c + p[i]) % 2 == 1:\n                b += 1\n            else:\n                xd = -1\n                break\n        ans = a + b\n    print(ans, xd)", "def location(c, p, l, r):\n    mid = (l + r) // 2\n    if p[mid] > c and p[mid - 1] < c:\n        return mid - 1\n    elif p[mid - 1] > c:\n        return location(c, p, l, mid)\n    elif p[mid] < c:\n        return location(c, p, mid, r)\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    if n == 1:\n        if p[0] > c:\n            l = -1\n        else:\n            l = 0\n    elif n == 2:\n        if p[0] > c:\n            l = -1\n        elif p[0] < c and p[1] > c:\n            l = 0\n        else:\n            l = 1\n    elif p[0] > c:\n        l = -1\n    elif p[-1] < c:\n        l = n - 1\n    else:\n        l = location(c, p, 0, n)\n    ans = 0\n    xd = 1\n    if l == -1:\n        for i in range(n):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    elif l == n - 1:\n        for i in range(-1, -n - 1, -1):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    else:\n        a = b = 0\n        for i in range(l, -1, -1):\n            if (c + p[i]) % 2 == 1:\n                a += 1\n            else:\n                xd = -1\n                break\n        for i in range(l + 1, n + 1):\n            if (c + p[i]) % 2 == 1:\n                b += 1\n            else:\n                xd = -1\n                break\n        ans = a + b\n    print(ans, xd)", "def location(c, p, l, r):\n    mid = (l + r) // 2\n    if p[mid] > c and p[mid - 1] < c:\n        return mid - 1\n    elif p[mid - 1] > c:\n        return location(c, p, l, mid)\n    elif p[mid] < c:\n        return location(c, p, mid, r)\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    if n == 1:\n        if p[0] > c:\n            l = -1\n        else:\n            l = 0\n    elif n == 2:\n        if p[0] > c:\n            l = -1\n        elif p[0] < c and p[1] > c:\n            l = 0\n        else:\n            l = 1\n    elif p[0] > c:\n        l = -1\n    elif p[-1] < c:\n        l = n - 1\n    else:\n        l = location(c, p, 0, n)\n    ans = 0\n    xd = 1\n    if l == -1:\n        for i in range(n):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    elif l == n - 1:\n        for i in range(-1, -n - 1, -1):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    else:\n        a = b = 0\n        for i in range(l, -1, -1):\n            if (c + p[i]) % 2 == 1:\n                a += 1\n            else:\n                xd = -1\n                break\n        for i in range(l + 1, n + 1):\n            if (c + p[i]) % 2 == 1:\n                b += 1\n            else:\n                xd = -1\n                break\n        ans = a + b\n    print(ans, xd)", "def location(c, p, l, r):\n    mid = (l + r) // 2\n    if p[mid] > c and p[mid - 1] < c:\n        return mid - 1\n    elif p[mid - 1] > c:\n        return location(c, p, l, mid)\n    elif p[mid] < c:\n        return location(c, p, mid, r)\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    if n == 1:\n        if p[0] > c:\n            l = -1\n        else:\n            l = 0\n    elif n == 2:\n        if p[0] > c:\n            l = -1\n        elif p[0] < c and p[1] > c:\n            l = 0\n        else:\n            l = 1\n    elif p[0] > c:\n        l = -1\n    elif p[-1] < c:\n        l = n - 1\n    else:\n        l = location(c, p, 0, n)\n    ans = 0\n    xd = 1\n    if l == -1:\n        for i in range(n):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    elif l == n - 1:\n        for i in range(-1, -n - 1, -1):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    else:\n        a = b = 0\n        for i in range(l, -1, -1):\n            if (c + p[i]) % 2 == 1:\n                a += 1\n            else:\n                xd = -1\n                break\n        for i in range(l + 1, n + 1):\n            if (c + p[i]) % 2 == 1:\n                b += 1\n            else:\n                xd = -1\n                break\n        ans = a + b\n    print(ans, xd)", "def location(c, p, l, r):\n    mid = (l + r) // 2\n    if p[mid] > c and p[mid - 1] < c:\n        return mid - 1\n    elif p[mid - 1] > c:\n        return location(c, p, l, mid)\n    elif p[mid] < c:\n        return location(c, p, mid, r)\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    if n == 1:\n        if p[0] > c:\n            l = -1\n        else:\n            l = 0\n    elif n == 2:\n        if p[0] > c:\n            l = -1\n        elif p[0] < c and p[1] > c:\n            l = 0\n        else:\n            l = 1\n    elif p[0] > c:\n        l = -1\n    elif p[-1] < c:\n        l = n - 1\n    else:\n        l = location(c, p, 0, n)\n    ans = 0\n    xd = 1\n    if l == -1:\n        for i in range(n):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    elif l == n - 1:\n        for i in range(-1, -n - 1, -1):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    else:\n        a = b = 0\n        for i in range(l, -1, -1):\n            if (c + p[i]) % 2 == 1:\n                a += 1\n            else:\n                xd = -1\n                break\n        for i in range(l + 1, n + 1):\n            if (c + p[i]) % 2 == 1:\n                b += 1\n            else:\n                xd = -1\n                break\n        ans = a + b\n    print(ans, xd)", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    j = n\n    for i in range(n):\n        if c < a[i]:\n            j = i\n            break\n    (ans, i) = (0, j - 1)\n    while i >= 0 and a[i] & 1 != c & 1:\n        ans += 1\n        i -= 1\n    while j < n and a[j] & 1 != c & 1:\n        ans += 1\n        j += 1\n    if ans == n:\n        return [ans, 1]\n    return [ans, -1]\nfor T in range(int(input())):\n    n = int(input())\n    c = int(input())\n    a = sorted(list(map(int, input().split())))\n    print(*answer())", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    j = n\n    for i in range(n):\n        if c < a[i]:\n            j = i\n            break\n    (ans, i) = (0, j - 1)\n    while i >= 0 and a[i] & 1 != c & 1:\n        ans += 1\n        i -= 1\n    while j < n and a[j] & 1 != c & 1:\n        ans += 1\n        j += 1\n    if ans == n:\n        return [ans, 1]\n    return [ans, -1]\nfor T in range(int(input())):\n    n = int(input())\n    c = int(input())\n    a = sorted(list(map(int, input().split())))\n    print(*answer())", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    c = int(input())\n    a = sorted(list(map(int, input().split())) + [c])\n    p = a.index(c)\n    ans = 0\n    for j in range(p + 1, len(a)):\n        if a[j] % 2 == c % 2:\n            break\n        ans += 1\n    for k in reversed(range(p)):\n        if a[k] % 2 == c % 2:\n            break\n        ans += 1\n    print(ans, 1 if ans == n else -1)", "for _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    a = sorted(list(map(int, input().split())) + [c])\n    pos = a.index(c)\n    ans = 0\n    for i in range(pos + 1, len(a)):\n        if a[i] % 2 == c % 2:\n            break\n        ans += 1\n    for i in reversed(range(pos)):\n        if a[i] % 2 == c % 2:\n            break\n        ans += 1\n    print(ans, 1 if ans == n else -1)", "for _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    a = list(map(int, input().split()))\n    a.append(c)\n    a.sort()\n    pos = a.index(c)\n    ans = 0\n    for i in range(pos + 1, len(a)):\n        if a[i] % 2 == c % 2:\n            break\n        ans += 1\n    for i in range(pos - 1, -1, -1):\n        if a[i] % 2 == c % 2:\n            break\n        ans += 1\n    print(ans, end=' ')\n    if ans == n:\n        print(1)\n    else:\n        print(-1)", "import bisect\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    C = int(input())\n    P = list(map(int, input().split()))\n    P.sort()\n    index = bisect.bisect(P, C)\n    c = 0\n    l = index - 1\n    r = index\n    while l >= 0:\n        if P[l] & 1 != C & 1:\n            c += 1\n        else:\n            break\n        l -= 1\n    while r < N:\n        if P[r] & 1 != C & 1:\n            c += 1\n        else:\n            break\n        r += 1\n    print(c, end=' ')\n    print(1 if c == N else -1)", "def location(c, p, l, r):\n    mid = (l + r) // 2\n    if p[mid] > c and p[mid - 1] < c:\n        return mid - 1\n    elif p[mid - 1] > c:\n        return location(c, p, l, mid)\n    elif p[mid] < c:\n        return location(c, p, mid, r)\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p = sorted(p)\n    if n == 1:\n        if p[0] > c:\n            l = -1\n        else:\n            l = 0\n    elif n == 2:\n        if p[0] > c:\n            l = -1\n        elif p[0] < c and p[1] > c:\n            l = 0\n        else:\n            l = 1\n    elif p[0] > c:\n        l = -1\n    elif p[-1] < c:\n        l = n - 1\n    else:\n        l = location(c, p, 0, n)\n    ans = 0\n    xd = 1\n    if l == -1:\n        for i in range(n):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    elif l == n - 1:\n        for i in range(-1, -n - 1, -1):\n            if (c + p[i]) % 2 == 1:\n                ans += 1\n            else:\n                xd = -1\n                break\n    else:\n        a = b = 0\n        for i in range(l, -1, -1):\n            if (c + p[i]) % 2 == 1:\n                a += 1\n            else:\n                xd = -1\n                break\n        for i in range(l + 1, n + 1):\n            if (c + p[i]) % 2 == 1:\n                b += 1\n            else:\n                xd = -1\n                break\n        ans = a + b\n    print(ans, xd)", "from collections import Counter\nfrom sys import stdin, stdout\nimport bisect\nfor _ in range(int(input())):\n    n = int(input())\n    c = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    ind = bisect.bisect(a, c)\n    bisect.insort(a, c)\n    z = 0\n    p = 0\n    for i in range(ind + 1, n + 1):\n        if (a[i] - a[ind]) % 2 != 0:\n            p += 1\n        else:\n            z = 1\n            break\n    for i in range(ind):\n        if (a[ind] - a[ind - 1 - i]) % 2 != 0:\n            p += 1\n        else:\n            z = 1\n            break\n    if z == 1:\n        print(p, -1)\n    else:\n        print(p, 1)", "import sys\nreadline = sys.stdin.readline\nT = int(readline())\nfor t in range(T):\n    ans0 = 0\n    ans1 = 1\n    N = int(readline())\n    C = int(readline())\n    P = sorted(list(map(int, readline().split())))\n    b = 0\n    while b != N and P[b] < C:\n        b += 1\n    (b0, b1) = (b, b)\n    while b0 and P[b0 - 1] % 2 != C % 2:\n        b0 -= 1\n    while b1 != N and P[b1] % 2 != C % 2:\n        b1 += 1\n    ans0 = b1 - b0\n    ans1 = 1 if (b0, b1) == (0, N) else -1\n    print(ans0, ans1)", "for tcase in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    i = 0\n    while i < n and p[i] < c:\n        i += 1\n    (elim, runs_away) = (0, 1)\n    j = i - 1\n    while j >= 0 and (c - p[j]) % 2 == 1:\n        j -= 1\n        elim += 1\n    if j >= 0:\n        runs_away = -1\n    j = i\n    while j < n and (p[j] - c) % 2 == 1:\n        j += 1\n        elim += 1\n    if j < n:\n        runs_away = -1\n    print(elim, runs_away)", "for tcase in range(int(input())):\n    n = int(input())\n    c = int(input())\n    p = list(map(int, input().split()))\n    p.sort()\n    i = 0\n    while i < n and p[i] < c:\n        i += 1\n    elim = 0\n    j = i - 1\n    while j >= 0 and (c - p[j]) % 2 == 1:\n        j -= 1\n        elim += 1\n    caught = j >= 0\n    j = i\n    while j < n and (p[j] - c) % 2 == 1:\n        j += 1\n        elim += 1\n    caught = caught or j < n\n    print(elim, -1 if caught else 1)", "import bisect\nfor _ in range(int(input())):\n    N = int(input())\n    C = int(input())\n    P = list(map(int, input().split()))\n    P.sort()\n    b = bisect.bisect(P, C)\n    (i, j) = (b - 1, b)\n    e = 0\n    while i >= 0 and P[i] - C & 1:\n        i -= 1\n        e += 1\n    while j < N and P[j] - C & 1:\n        j += 1\n        e += 1\n    print('{} {}'.format(e, 1 if e == N else -1))"]