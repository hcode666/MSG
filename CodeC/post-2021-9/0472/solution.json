["def lis_right_dp(nums):\n    n = len(nums)\n    maxv = [0] * (n + 1)\n    (pr, maxv[1]) = (1, nums[-1])\n    dp = [0] * n\n    dp[-1] = 1\n    for j in range(n - 2, -1, -1):\n        (l, r) = (1, pr)\n        while r - l > 2:\n            m = (r + l) // 2\n            if nums[j] >= maxv[m]:\n                r = m - 1\n            else:\n                l = m\n        x = 1\n        for p in range(r, l - 1, -1):\n            if maxv[p] > nums[j]:\n                x = p + 1\n                break\n        maxv[x] = max(maxv[x], nums[j])\n        dp[j] = x\n        pr = max(pr, x)\n    return dp\n\ndef lis_left_dp(nums):\n    n = len(nums)\n    minv = [1000000000.0] * (n + 1)\n    (pr, minv[1]) = (1, nums[0])\n    dp = [0] * n\n    dp[0] = 1\n    for j in range(1, n):\n        (l, r) = (1, pr)\n        while r - l > 2:\n            m = (r + l) // 2\n            if nums[j] < minv[m]:\n                r = m - 1\n            else:\n                l = m\n        x = 1\n        for p in range(r, l - 1, -1):\n            if minv[p] < nums[j]:\n                x = p + 1\n                break\n        minv[x] = min(minv[x], nums[j])\n        dp[j] = x\n        pr = max(pr, x)\n    return dp\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [-x for x in a][::-1]\n    (g, h) = (lis_left_dp(a), lis_right_dp(a))\n    for j in range(n - 2, -1, -1):\n        h[j] = max(h[j], h[j + 1])\n    (p, v) = (max(g), g[0])\n    for j in range(n - 1):\n        v = max(g[j], v)\n        p = max(p, v + h[j + 1])\n    print(p)", "def lis_right_dp(nums):\n    n = len(nums)\n    maxv = [0] * (n + 1)\n    (pr, maxv[1]) = (1, nums[-1])\n    dp = [0] * n\n    dp[-1] = 1\n    for j in range(n - 2, -1, -1):\n        (l, r) = (1, pr)\n        while r - l > 2:\n            m = (r + l) // 2\n            if nums[j] >= maxv[m]:\n                r = m - 1\n            else:\n                l = m\n        x = 1\n        for p in range(r, l - 1, -1):\n            if maxv[p] > nums[j]:\n                x = p + 1\n                break\n        maxv[x] = max(maxv[x], nums[j])\n        dp[j] = x\n        pr = max(pr, x)\n    return dp\n\ndef lis_left_dp(nums):\n    n = len(nums)\n    minv = [1000000000.0] * (n + 1)\n    (pr, minv[1]) = (1, nums[0])\n    dp = [0] * n\n    dp[0] = 1\n    for j in range(1, n):\n        (l, r) = (1, pr)\n        while r - l > 2:\n            m = (r + l) // 2\n            if nums[j] < minv[m]:\n                r = m - 1\n            else:\n                l = m\n        x = 1\n        for p in range(r, l - 1, -1):\n            if minv[p] < nums[j]:\n                x = p + 1\n                break\n        minv[x] = min(minv[x], nums[j])\n        dp[j] = x\n        pr = max(pr, x)\n    return dp\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [-x for x in a][::-1]\n    (g, h) = (lis_left_dp(a), lis_right_dp(a))\n    for j in range(n - 2, -1, -1):\n        h[j] = max(h[j], h[j + 1])\n    (p, v) = (max(g), g[0])\n    for j in range(n - 1):\n        v = max(g[j], v)\n        p = max(p, v + h[j + 1])\n    print(p)", "from bisect import bisect_left\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    dp1 = [1] * n\n    dp2 = [1] * n\n    st = []\n    for i in range(n):\n        it = bisect_left(st, a[i])\n        if it == len(st):\n            st.append(a[i])\n        else:\n            st[it] = a[i]\n        dp1[i] = len(st)\n    st = []\n    for i in range(n - 1, -1, -1):\n        it = bisect_left(st, -1 * a[i])\n        if it == len(st):\n            st.append(-1 * a[i])\n        else:\n            st[it] = -1 * a[i]\n        dp2[i] = len(st)\n    ans = float('-inf')\n    for i in range(1, n):\n        ans = max(ans, dp1[i - 1] + dp2[i])\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "from bisect import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (l, r) = ([0] * n, [0] * n)\n    temp = []\n    for (i, vl) in enumerate(a):\n        ind = bisect_left(temp, vl, 0, len(temp))\n        if ind == len(temp):\n            temp.append(vl)\n        else:\n            temp[ind] = vl\n        l[i] = len(temp)\n    temp = []\n    for (i, vl) in enumerate(a[::-1], start=1):\n        ind = bisect_left(temp, -vl, 0, len(temp))\n        if ind == len(temp):\n            temp.append(-vl)\n        else:\n            temp[ind] = -vl\n        r[-i] = len(temp)\n    ans = l[-1]\n    for i in range(1, n):\n        ans = max(ans, l[i - 1] + r[i])\n    print(ans)", "import bisect\nimport math\nfrom collections import defaultdict\n\ndef lengthOfLIS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp\n\ndef lengthOfLDS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp[::-1]\n\ndef solve(n, l):\n    a = lengthOfLIS(l)\n    for i in range(n):\n        l[i] = -l[i]\n    l = l[::-1]\n    b = lengthOfLDS(l)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    solve(n, a)", "import bisect\n\ndef LDS(arr):\n    x = []\n    temp = [0] * len(arr)\n    for i in range(len(arr)):\n        if not x:\n            x.append(arr[i])\n            temp[i] = len(x)\n            continue\n        idx = bisect.bisect_left(x, arr[i])\n        if idx == len(x):\n            x.append(arr[i])\n        else:\n            x[idx] = arr[i]\n        temp[i] = len(x)\n    return temp[::-1]\n\ndef LIS(arr):\n    x = []\n    temp = [0] * len(arr)\n    for i in range(len(arr)):\n        if not x:\n            x.append(arr[i])\n            temp[i] = len(x)\n            continue\n        idx = bisect.bisect_left(x, arr[i])\n        if idx == len(x):\n            x.append(arr[i])\n        else:\n            x[idx] = arr[i]\n        temp[i] = len(x)\n    return temp\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = LIS(arr)\n    for i in range(n):\n        arr[i] = -1 * arr[i]\n    arr = arr[::-1]\n    b = LDS(arr)\n    res = 0\n    for i in range(n - 1):\n        res = max(res, a[i] + b[i + 1])\n    print(res)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n\n        def fun(arr):\n            l = []\n            temp = [0] * n\n            for i in range(len(arr)):\n                p = bisect.bisect_left(l, arr[i])\n                if p == len(l):\n                    l.append(arr[i])\n                l[p] = arr[i]\n                temp[i] = len(l)\n            return temp\n        temp = fun(arr)\n        for i in range(n):\n            arr[i] = -arr[i]\n        arr.reverse()\n        temp2 = fun(arr)\n        temp2.reverse()\n        ans = 0\n        for i in range(n - 1):\n            ans = max(ans, temp[i] + temp2[i + 1])\n        print(ans)\nmain()", "from bisect import bisect_left\n\ndef lis(a):\n    l = [0] * len(a)\n    mx = 0\n    ans = []\n    for i in range(len(a)):\n        x = bisect_left(ans, a[i])\n        if x >= len(ans):\n            ans.append(a[i])\n        else:\n            ans[x] = a[i]\n        mx = max(mx, x)\n        l[i] = mx\n    return l\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lis1 = lis(a)\n    lis2 = list(map(lambda x: -x, a))[::-1]\n    lis2 = lis(lis2)[::-1]\n    ans = 1\n    for i in range(n - 1):\n        ans = max(ans, lis1[i] + lis2[i + 1] + 2)\n    print(ans)", "from bisect import bisect_left\n\ndef lis(a):\n    l = [0] * len(a)\n    mx = 0\n    ans = []\n    for i in range(len(a)):\n        x = bisect_left(ans, a[i])\n        if x >= len(ans):\n            ans.append(a[i])\n        else:\n            ans[x] = a[i]\n        mx = max(mx, x)\n        l[i] = mx\n    return l\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lis1 = lis(a)\n    lis2 = list(map(lambda x: -x, a))[::-1]\n    lis2 = lis(lis2)[::-1]\n    ans = 1\n    for i in range(n - 1):\n        ans = max(ans, lis1[i] + lis2[i + 1] + 2)\n    print(ans)", "from bisect import bisect_left\n\ndef lis(n):\n    q = []\n    store = [0] * len(n)\n    for i in range(len(n)):\n        if not q:\n            q.append(n[i])\n            store[i] = len(q)\n            continue\n        index = bisect_left(q, n[i])\n        if index == len(q):\n            q.append(n[i])\n        else:\n            q[index] = n[i]\n        store[i] = len(q)\n    return store\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    lis1 = lis(a)\n    lis2 = list(map(lambda x: -x, a))[::-1]\n    lis2 = lis(lis2)[::-1]\n    ans = 1\n    for i in range(n - 1):\n        ans = max(ans, lis1[i] + lis2[i + 1])\n    print(ans)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    prefix = [0 for i in range(n)]\n    suffix = [0 for i in range(n)]\n    temp = []\n    for i in range(n):\n        idx = bisect.bisect_left(temp, lst[i])\n        if idx == len(temp):\n            temp.append(lst[i])\n        else:\n            temp[idx] = lst[i]\n        prefix[i] = len(temp)\n    temp = []\n    for i in range(n - 1, -1, -1):\n        idx = bisect.bisect_left(temp, -lst[i])\n        if idx == len(temp):\n            temp.append(-lst[i])\n        else:\n            temp[idx] = -lst[i]\n        suffix[i] = len(temp)\n    maxi = 0\n    for i in range(1, n):\n        maxi = max(maxi, prefix[i - 1] + suffix[i])\n    print(maxi)", "try:\n    import bisect\n\n    def lis(nums):\n        x = []\n        temp = [0] * len(nums)\n        for i in range(len(nums)):\n            if not x:\n                x.append(nums[i])\n                temp[i] = len(x)\n                continue\n            ind = bisect.bisect_left(x, nums[i])\n            if ind == len(x):\n                x.append(nums[i])\n            else:\n                x[ind] = nums[i]\n            temp[i] = len(x)\n        return temp\n    for tc in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        ans = -1\n        li = lis(arr)\n        arr = [-i for i in arr]\n        di = lis(arr[::-1])[::-1]\n        for i in range(n - 1):\n            ans = max(ans, li[i] + di[i + 1])\n        print(ans)\nexcept EOFError:\n    pass", "try:\n    import bisect\n\n    def lis(nums):\n        x = []\n        temp = [0] * len(nums)\n        for i in range(len(nums)):\n            if not x:\n                x.append(nums[i])\n                temp[i] = len(x)\n                continue\n            ind = bisect.bisect_left(x, nums[i])\n            if ind == len(x):\n                x.append(nums[i])\n            else:\n                x[ind] = nums[i]\n            temp[i] = len(x)\n        return temp\n    for tc in range(int(input())):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        ans = -1\n        li = lis(arr)\n        arr = [-i for i in arr]\n        di = lis(arr[::-1])[::-1]\n        for i in range(n - 1):\n            ans = max(ans, li[i] + di[i + 1])\n        print(ans)\nexcept EOFError:\n    pass", "nmbr = lambda : int(input())\nlst = lambda : list(map(int, input().split()))\nfrom bisect import bisect_left\nfrom collections import deque\n\ndef find_lis(a):\n    lis = []\n    dp = []\n    for i in range(n):\n        v = a[i]\n        if not lis or v > lis[-1]:\n            lis += [v]\n        else:\n            pos = bisect_left(lis, v)\n            lis[pos] = v\n        dp += [len(lis)]\n    return dp\n\ndef find_lds(a):\n    lis = deque()\n    dp = []\n    for i in range(n):\n        v = a[i]\n        if not lis or v < lis[0]:\n            lis.appendleft(v)\n        else:\n            pos = bisect_left(lis, v)\n            if pos >= len(lis) or lis[pos] != v:\n                pos -= 1\n            lis[pos] = v\n        dp += [len(lis)]\n    return dp[::-1]\nfor _ in range(nmbr()):\n    n = nmbr()\n    a = lst()\n    pre = find_lis(a)\n    suf = find_lds(a[::-1])\n    ans = suf[0]\n    for i in range(n - 1):\n        ans = max(ans, pre[i] + suf[i + 1])\n    print(ans)", "import os\nimport bisect\nimport math\nimport io\nimport sys\nfrom collections import defaultdict\n\ndef khdfjkhsdfkh(nums):\n    x = []\n    temp = len(nums) * [0]\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp\n\ndef lengthOfLDS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp[::-1]\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = khdfjkhsdfkh(l)\n    for i in range(n):\n        l[i] = -l[i]\n    l = l[::-1]\n    b = lengthOfLDS(l)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys, os, io\nimport math\nfrom collections import defaultdict\nimport bisect\n\ndef lengthOfLIS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp\n\ndef lengthOfLDS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp[::-1]\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = lengthOfLIS(l)\n    for i in range(n):\n        l[i] = -l[i]\n    l = l[::-1]\n    b = lengthOfLDS(l)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "import sys, os, io\nimport math\nfrom collections import defaultdict\nimport bisect\n\ndef LIS(arr):\n    lst1 = []\n    tmp = [0] * len(arr)\n    for i in range(len(arr)):\n        if not lst1:\n            lst1.append(arr[i])\n            tmp[i] = len(lst1)\n            continue\n        ind = bisect.bisect_left(lst1, arr[i])\n        if ind == len(lst1):\n            lst1.append(arr[i])\n        else:\n            lst1[ind] = arr[i]\n        tmp[i] = len(lst1)\n    return tmp\n\ndef LDS(arr):\n    lst1 = []\n    tmp = [0] * len(arr)\n    for i in range(len(arr)):\n        if not lst1:\n            lst1.append(arr[i])\n            tmp[i] = len(lst1)\n            continue\n        ind = bisect.bisect_left(lst1, arr[i])\n        if ind == len(lst1):\n            lst1.append(arr[i])\n        else:\n            lst1[ind] = arr[i]\n        tmp[i] = len(lst1)\n    return tmp[::-1]\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    tmp1 = LIS(lst)\n    for i in range(n):\n        lst[i] = -lst[i]\n    lst = lst[::-1]\n    tmp2 = LDS(lst)\n    result = 0\n    for i in range(n - 1):\n        result = max(result, tmp1[i] + tmp2[i + 1])\n    print(result)", "try:\n    import bisect\n\n    def lengthOfLIS(nums):\n        x = []\n        temp = [0] * len(nums)\n        for i in range(len(nums)):\n            if not x:\n                x.append(nums[i])\n                temp[i] = len(x)\n                continue\n            ind = bisect.bisect_left(x, nums[i])\n            if ind == len(x):\n                x.append(nums[i])\n            else:\n                x[ind] = nums[i]\n            temp[i] = len(x)\n        return temp\n\n    def lengthOfLDS(nums):\n        x = []\n        temp = [0] * len(nums)\n        for i in range(len(nums)):\n            if not x:\n                x.append(nums[i])\n                temp[i] = len(x)\n                continue\n            ind = bisect.bisect_left(x, nums[i])\n            if ind == len(x):\n                x.append(nums[i])\n            else:\n                x[ind] = nums[i]\n            temp[i] = len(x)\n        return temp[::-1]\n    t = int(input())\n    while t:\n        n = int(input())\n        l = list(map(int, input().split()))\n        a = lengthOfLIS(l)\n        for i in range(n):\n            l[i] = -l[i]\n        l = l[::-1]\n        b = lengthOfLDS(l)\n        ans = 0\n        for i in range(n - 1):\n            ans = max(ans, a[i] + b[i + 1])\n        print(ans)\nexcept:\n    pass", "import bisect\n\ndef loLIS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp\n\ndef loLDS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp[::-1]\nT = int(input())\nfor z in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A = A[:N]\n    a = loLIS(A)\n    for i in range(N):\n        A[i] = -A[i]\n    A = A[::-1]\n    b = loLDS(A)\n    ans = 0\n    for i in range(N - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)", "def subsequence(seq):\n    if not seq:\n        return []\n    answer = [1]\n    M = [None] * len(seq)\n    P = [None] * len(seq)\n    L = 1\n    M[0] = 0\n    for i in range(1, len(seq)):\n        lower = 0\n        upper = L\n        if seq[M[upper - 1]] < seq[i]:\n            j = upper\n        else:\n            while upper - lower > 1:\n                mid = (upper + lower) // 2\n                if seq[M[mid - 1]] < seq[i]:\n                    lower = mid\n                else:\n                    upper = mid\n            j = lower\n        P[i] = M[j - 1]\n        if j == L or seq[i] < seq[M[j]]:\n            M[j] = i\n            L = max(L, j + 1)\n        answer.append(L)\n    return answer\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    a = list(map(int, input().split()))\n    left = subsequence(a)\n    a.reverse()\n    a = [-x for x in a]\n    right = subsequence(a)\n    M = 0\n    for i in range(N - 1):\n        if left[i] + right[N - 2 - i] > M:\n            M = left[i] + right[N - 2 - i]\n    print(M)", "import sys, os, io, math\nfrom collections import defaultdict\nimport bisect\n\ndef lengthLis(nums):\n    x = []\n    tempo = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            tempo[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        tempo[i] = len(x)\n    return tempo\n\ndef lengthLds(nums):\n    x = []\n    tempo = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            tempo[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        tempo[i] = len(x)\n    return tempo[::-1]\n\ndef func():\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = lengthLis(l)\n    for i in range(n):\n        l[i] = -l[i]\n    l = l[::-1]\n    b = lengthLds(l)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)\nt = 1\nt = int(input())\nfor _ in range(t):\n    func()", "def ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nimport bisect\n\ndef lengthOfLIS(nums):\n    y = []\n    t = [0] * len(nums)\n    for i in range(len(nums)):\n        if not y:\n            y.append(nums[i])\n            t[i] = len(y)\n            continue\n        ind = bisect.bisect_left(y, nums[i])\n        if ind == len(y):\n            y.append(nums[i])\n        else:\n            y[ind] = nums[i]\n        t[i] = len(y)\n    return t\n\ndef lengthOfLDS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp[::-1]\n\ndef solve():\n    n = ii()\n    l = li()\n    a = lengthOfLIS(l)\n    for i in range(n):\n        l[i] = -l[i]\n    l = l[::-1]\n    b = lengthOfLDS(l)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)\nt = 1\nt = ii()\nfor _ in range(t):\n    solve()", "import bisect\n\ndef solverl1(n1):\n    z = []\n    rm = [0] * len(n1)\n    for xjk in range(len(n1)):\n        if not z:\n            z.append(n1[xjk])\n            rm[xjk] = len(z)\n            continue\n        pak = bisect.bisect_left(z, n1[xjk])\n        if pak == len(z):\n            z.append(n1[xjk])\n        else:\n            z[pak] = n1[xjk]\n        rm[xjk] = len(z)\n    return rm\n\ndef solverl2(n2):\n    z = []\n    rm = [0] * len(n2)\n    for xjk in range(len(n2)):\n        if not z:\n            z.append(n2[xjk])\n            rm[xjk] = len(z)\n            continue\n        pak = bisect.bisect_left(z, n2[xjk])\n        if pak == len(z):\n            z.append(n2[xjk])\n        else:\n            z[pak] = n2[xjk]\n        rm[xjk] = len(z)\n    return rm[::-1]\n\ndef answer():\n    xk = int(input())\n    a = [int(i) for i in input().split()]\n    mb = solverl1(a)\n    for i in range(xk):\n        a[i] = -a[i]\n    a = a[::-1]\n    wh = solverl2(a)\n    sol = 0\n    for i in range(xk - 1):\n        sol = max(sol, mb[i] + wh[i + 1])\n    print(sol)\nt = int(input())\nfor _ in range(t):\n    answer()", "import bisect\n\ndef length1(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp\n\ndef length2(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp[::-1]\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = length1(l)\n    for i in range(n):\n        l[i] = -l[i]\n    l = l[::-1]\n    b = length2(l)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "import sys, os, io\nimport math\nfrom collections import defaultdict\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nimport bisect\n\ndef lengthLIS(nums):\n    y = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not y:\n            y.append(nums[i])\n            temp[i] = len(y)\n            continue\n        ind = bisect.bisect_left(y, nums[i])\n        if ind == len(y):\n            y.append(nums[i])\n        else:\n            y[ind] = nums[i]\n        temp[i] = len(y)\n    return temp\n\ndef lengthLDS(nums):\n    y = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not y:\n            y.append(nums[i])\n            temp[i] = len(y)\n            continue\n        ind = bisect.bisect_left(y, nums[i])\n        if ind == len(y):\n            y.append(nums[i])\n        else:\n            y[ind] = nums[i]\n        temp[i] = len(y)\n    return temp[::-1]\n\ndef solve():\n    n = ii()\n    l = li()\n    a = lengthLIS(l)\n    for i in range(n):\n        l[i] = -l[i]\n    l = l[::-1]\n    b = lengthLDS(l)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)\nt = 1\nt = ii()\nfor _ in range(t):\n    solve()", "import bisect\n\ndef llis(arr, s):\n    if s == 0:\n        l1 = []\n        l2 = []\n        n = len(arr)\n        for i in range(0, n):\n            l2.append(0)\n        for i in range(len(arr)):\n            if not l1:\n                l1.append(arr[i])\n                l2[i] = len(l1)\n                continue\n            ans = bisect.bisect_left(l1, arr[i])\n            if ans == len(l1):\n                l1.append(arr[i])\n            else:\n                l1[ans] = arr[i]\n            l2[i] = len(l1)\n        return l2\n    else:\n        l1 = []\n        l2 = []\n        n = len(arr)\n        for i in range(0, n):\n            l2.append(0)\n        for i in range(0, n):\n            if not l1:\n                l1.append(arr[i])\n                l2[i] = len(l1)\n                continue\n            ans = bisect.bisect_left(l1, arr[i])\n            if ans == len(l1):\n                l1.append(arr[i])\n            else:\n                l1[ans] = arr[i]\n            l2[i] = len(l1)\n        return l2[::-1]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    l1 = llis(arr, 0)\n    for i in range(n):\n        arr[i] = -arr[i]\n    arr = arr[::-1]\n    l2 = llis(arr, 1)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, l1[i] + l2[i + 1])\n    print(ans)", "import sys, os, io\nimport math\nfrom collections import defaultdict\nimport bisect\n\ndef ii():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\n\ndef lengthOfLIS(nums):\n    x = []\n    temp = [0] * len(nums)\n    length = len(nums)\n    it = 0\n    while it < length:\n        if not x:\n            x.append(nums[it])\n            temp[it] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[it])\n        if ind == len(x):\n            x.append(nums[it])\n        else:\n            x[ind] = nums[it]\n        temp[it] = len(x)\n        it += 1\n    return temp\n\ndef lengthOfLDS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp[::-1]\n\ndef solve():\n    n = ii()\n    l = li()\n    a = lengthOfLIS(l)\n    i = 0\n    while i < n:\n        l[i] = -l[i]\n        i += 1\n    l = l[::-1]\n    b = lengthOfLDS(l)\n    ans = 0\n    j = 0\n    while j < n - 1:\n        ans = max(ans, a[j] + b[j + 1])\n        j += 1\n    print(ans)\nt = 1\nt = ii()\nfor _ in range(t):\n    solve()", "import sys, os, io\nimport math\nfrom collections import defaultdict\n\ndef io():\n    return int(input())\n\ndef lo():\n    return list(map(int, input().split()))\nimport bisect\n\ndef lenofLIS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp\n\ndef lenofLDS(nums):\n    x = []\n    temp = [0] * len(nums)\n    for i in range(len(nums)):\n        if not x:\n            x.append(nums[i])\n            temp[i] = len(x)\n            continue\n        ind = bisect.bisect_left(x, nums[i])\n        if ind == len(x):\n            x.append(nums[i])\n        else:\n            x[ind] = nums[i]\n        temp[i] = len(x)\n    return temp[::-1]\n\ndef solve():\n    n = io()\n    l = lo()\n    a = lenofLIS(l)\n    for i in range(n):\n        l[i] = -l[i]\n    l = l[::-1]\n    b = lenofLDS(l)\n    ans = 0\n    for i in range(n - 1):\n        ans = max(ans, a[i] + b[i + 1])\n    print(ans)\nt = io()\nfor _ in range(t):\n    solve()"]