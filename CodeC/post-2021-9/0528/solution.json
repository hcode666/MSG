["for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cur = res = 0\n    for i in range(n):\n        need = max(0, arr[n - 1 - i] - arr[i])\n        res += max(0, need - cur)\n        cur = need\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cur = res = 0\n    for i in range(n):\n        need = max(0, arr[n - 1 - i] - arr[i])\n        res += max(0, need - cur)\n        cur = need\n    print(res)", "from functools import reduce\n\ndef check(a, b):\n    if a > 0 and b > 0 or (a <= 0 and b <= 0):\n        return True\n    return False\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    diff = [0 for _ in range(0, len(a))]\n    for i in range(len(a)):\n        if a[i] < a[n - i - 1]:\n            diff[i] = a[n - i - 1] - a[i]\n    m = diff[0]\n    for i in range(1, n):\n        m += max(0, diff[i] - diff[i - 1])\n    print(m)", "iterate = int(input())\nfor _ in range(iterate):\n    length = int(input())\n    array = input().split(' ')\n    array = [int(x) for x in array]\n    diff = [0 for _ in range(0, len(array))]\n    for i in range(int(len(array))):\n        if array[i] < array[length - i - 1]:\n            if array[length - i - 1] > array[i]:\n                diff[i] = array[length - i - 1] - array[i]\n    ans = diff[0]\n    for i in range(1, length):\n        ans = ans + max(0, diff[i] - diff[i - 1])\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    diff = [0 for _ in range(0, len(arr))]\n    for i in range(0, n):\n        if arr[i] < arr[n - i - 1]:\n            diff[i] = arr[n - i - 1] - arr[i]\n    ans = diff[0]\n    for i in range(1, n):\n        ans = ans + max(0, diff[i] - diff[i - 1])\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    diff = n * [0]\n    for i in range(n):\n        if a[i] < a[n - i - 1]:\n            diff[i] = a[n - i - 1] - a[i]\n    i = 1\n    count = diff[0]\n    while i < n:\n        count = count + max(0, diff[i] - diff[i - 1])\n        i = i + 1\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    a = [0 for i in range(n)]\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] < arr[j]:\n            a[i] = arr[j] - arr[i]\n        else:\n            a[j] = arr[i] - arr[j]\n        i += 1\n        j -= 1\n    cnt = a[0]\n    for i in range(n - 1):\n        cnt += (a[i + 1] - a[i]) * int(a[i + 1] > a[i])\n    print(cnt)", "import math\nimport sys\nimport random\nsearches = int(sys.stdin.readline())\n\ndef cnt_chng(A, K):\n    max_l = 0\n    max_r = 0\n    count_chng = 0\n    if K % 2 == 0:\n        hlf_dwy = K // 2\n    else:\n        hlf_dwy = K // 2 + 1\n    for i in range(hlf_dwy):\n        if A[i] > A[K - 1 - i]:\n            max_r = 0\n            if max_l <= A[i] - A[K - 1 - i]:\n                count_chng += A[i] - A[K - 1 - i] - max_l\n                max_l = A[i] - A[K - 1 - i]\n            else:\n                max_l = A[i] - A[K - 1 - i]\n        if A[i] == A[K - 1 - i]:\n            count_chng += 0\n            max_r = 0\n            max_l = 0\n        if A[i] < A[K - 1 - i]:\n            max_l = 0\n            if max_r <= -(A[i] - A[K - 1 - i]):\n                count_chng += -(A[i] - A[K - 1 - i]) - max_r\n                max_r = -(A[i] - A[K - 1 - i])\n            else:\n                max_r = -(A[i] - A[K - 1 - i])\n    return count_chng\nfor i in range(searches):\n    num = int(sys.stdin.readline())\n    bounds = sys.stdin.readline()\n    a_list = list(map(int, bounds.split()))\n    print(cnt_chng(a_list, num))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    diff = [0] * n\n    for i in range(n):\n        if l[i] != l[-(i + 1)]:\n            diff[i] = (l[i] - l[-(i + 1)]) * (-1 if l[-(i + 1)] > l[i] else 0)\n    ans = diff[0]\n    for i in range(1, n):\n        ans += max(0, diff[i] - diff[i - 1])\n    print(ans)", "from collections import defaultdict\nimport math as mt\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = [0 for i in range(n)]\n    i = 0\n    j = n - 1\n    while i < j:\n        if a[i] < a[j]:\n            ans[i] = a[j] - a[i]\n        else:\n            ans[j] = a[i] - a[j]\n        i += 1\n        j -= 1\n    cnt = ans[0]\n    for i in range(n - 1):\n        cnt += (ans[i + 1] - ans[i]) * int(ans[i + 1] > ans[i])\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ar = [l[i] - l[n - i - 1] for i in range(n // 2)]\n    (res, curr) = (0, 0)\n    for i in ar:\n        if i > 0:\n            if curr >= 0:\n                res += max(0, i - curr)\n            else:\n                res += i\n        elif i < 0:\n            if curr <= 0:\n                res += max(0, curr - i)\n            else:\n                res += -i\n        curr = i\n    print(res)", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    L = [int(i) for i in input().split()]\n    i = 0\n    j = n - 1\n    ans = 0\n    diff = [0 for i in range(n)]\n    for i in range(n):\n        p = L[n - i - 1] - L[i]\n        if p > 0:\n            diff[i] = p\n    ans = diff[0]\n    for i in range(1, len(diff)):\n        ans += max(0, diff[i] - diff[i - 1])\n    print(ans)\n    t = t - 1", "for _ in range(int(input())):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(length):\n        prevdiff = max(0, arr[length - 1 - i] - arr[i])\n        ans += max(0, prevdiff - cur)\n        cur = prevdiff\n    print(ans)", "for _ in range(int(input())):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(length):\n        prevdiff = max(0, arr[length - 1 - i] - arr[i])\n        ans += max(0, prevdiff - cur)\n        cur = prevdiff\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    L = list(map(int, input().split()))\n    diff = []\n    for i in range(N):\n        (x, y) = (L[i], L[N - 1 - i])\n        if x > y:\n            diff.append(x - y)\n        else:\n            diff.append(0)\n    diff.append(0)\n    t = 0\n    for i in range(N):\n        t += max(0, diff[i] - diff[i + 1])\n    print(t)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    L = list(map(int, input().split()))\n    diff = []\n    for i in range(N):\n        (x, y) = (L[i], L[N - 1 - i])\n        if x > y:\n            diff.append(x - y)\n        else:\n            diff.append(0)\n    diff.append(0)\n    t = 0\n    for i in range(N):\n        t += max(0, diff[i] - diff[i + 1])\n    print(t)", "t = int(input())\n\ndef solution(a, n):\n    b = []\n    for i in range(n):\n        c = a[i] - a[n - 1 - i]\n        if c < 0:\n            b.append(abs(c))\n        else:\n            b.append(0)\n    ans = b[0]\n    for i in range(1, n):\n        ans += max(0, b[i] - b[i - 1])\n    return ans\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solution(arr, n))\n    t -= 1", "import numpy as np\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = np.array(list(map(int, input().split(' '))))\n    diff = np.maximum(A - np.flip(A), np.zeros(N))\n    count = 0\n    local_max = 0\n    decrease = False\n    prec = 0\n    carying = 0\n    for i in range(N):\n        if diff[i] < prec:\n            decrease = True\n        elif diff[i] > prec and decrease:\n            count += local_max - carying\n            local_max = diff[i]\n            carying = prec\n            decrease = False\n        else:\n            local_max = max(local_max, diff[i])\n        prec = diff[i]\n    print(int(count + local_max - carying))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        c = a[i] - a[n - 1 - i]\n        if c < 0:\n            b.append(abs(c))\n        else:\n            b.append(0)\n    ans = b[0]\n    for i in range(1, n):\n        ans += max(0, b[i] - b[i - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = [0 for i in range(n)]\n    (i, j) = (0, n - 1)\n    while i < j:\n        if l[i] < l[j]:\n            d[i] = l[j] - l[i]\n        else:\n            d[j] = l[i] - l[j]\n        i += 1\n        j -= 1\n    ans = d[0]\n    for i in range(1, n):\n        ans += max(0, d[i] - d[i - 1])\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = [0] * n\n    for i in range(n // 2):\n        val = l[i] - l[n - 1 - i]\n        if val < 0:\n            l1[i] = -val\n        else:\n            l1[n - 1 - i] = val\n    if n % 2 != 0:\n        l1.pop(n // 2)\n    count = l1[0]\n    for i in range(1, len(l1)):\n        if l1[i] - l1[i - 1] > 0:\n            count += l1[i] - l1[i - 1]\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "import sys\ninput = sys.stdin.readline\n\ndef print(*args, end='\\n', sep=' ') -> None:\n    sys.stdout.write(sep.join(map(str, args)) + end)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * n\n    for i in range((n + 1) // 2):\n        if a[i] > a[n - 1 - i]:\n            b[n - i - 1] = a[i] - a[n - 1 - i]\n        else:\n            b[i] = -a[i] + a[n - 1 - i]\n    prev = 0\n    ans = 0\n    for i in range(n):\n        if b[i] < prev:\n            prev = b[i]\n        elif b[i] > prev:\n            ans += b[i] - prev\n            prev = b[i]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    b = [0] * n\n    for i in range(n):\n        b[i] = max(ar[n - i - 1] - ar[i], 0)\n    ans = b[0]\n    for i in range(1, n):\n        ans += max(0, b[i] - b[i - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    res = l = 0\n    for i in range(n):\n        m = max(0, a[i] - a[n - 1 - i])\n        res += max(0, m - l)\n        l = m\n    print(res)", "for t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    ans = m = 0\n    for i in range(n):\n        need = max(0, a[n - i - 1] - a[i])\n        ans += max(0, need - m)\n        m = need\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    las = ans = 0\n    for i in range(N):\n        now = max(0, A[N - i - 1] - A[i])\n        ans += max(0, now - las)\n        las = now\n    print(ans)", "for _ in range(int(input())):\n    x = int(input())\n    arr = list(map(int, input().split()))\n    cur = answer = 0\n    for i in range(x):\n        need = max(0, arr[x - 1 - i] - arr[i])\n        answer += max(0, need - cur)\n        cur = need\n    print(answer)", "import sys\nimport math as m\nfrom collections import Counter\n\ndef gcd(a, b):\n    return b if a % b == 0 else gcd(b, a % b)\n\ndef li():\n    return list(map(int, input().split()))\n\ndef print_l(l):\n    return [i for i in l]\n\ndef si():\n    return input()\n\ndef isKthBitSet(n, k):\n    return True if n & 1 << k - 1 else False\n\ndef A():\n    (n, m, k, x) = map(int, input().split())\n    ct = 1\n    s = n\n    while s <= x - 1:\n        s += n\n        ct += 1\n        if ct % k == 0:\n            s += m\n    if ct % k == 0:\n        return 'YES'\n    else:\n        return 'NO'\n\ndef B():\n    s = input()\n    if s[0] == s[-1]:\n        return len(s) - 2\n    else:\n        return 2\n\ndef C():\n    n = int(input())\n    l = li()\n    i = 0\n    j = len(l) - 1\n    ans = 0\n    while i < j:\n        if l[i] != l[j]:\n            if l[i] < l[j]:\n                l[j] = l[j] - l[i]\n                i += 1\n            else:\n                l[i] = l[i] - l[j]\n                j -= 1\n            ans += 1\n        else:\n            i += 1\n            j -= 1\n    return ans\n\ndef D():\n    n = int(input())\n    a = li()\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    return ans\nfor _ in range(int(input())):\n    print(D())", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in range(n):\n        b.append(max(0, a[n - 1 - i] - a[i]))\n    ans = b[0]\n    for i in range(1, n):\n        ans += max(0, b[i] - b[i - 1])\n    print(ans)", "n = int(input())\nfor n2 in range(n):\n    n3 = int(input())\n    a = input().split(' ')\n    b = []\n    c = 0\n    for i in range(n3):\n        b.append(0)\n        if int(a[i]) < int(a[n3 - 1 - i]):\n            b[-1] = int(a[n3 - 1 - i]) - int(a[i])\n            if i > 0 and b[-1] > b[-2]:\n                c += b[-1] - b[-2]\n            elif i == 0:\n                c += b[0]\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    i = 0\n    j = n - 1\n    while i < n:\n        need = max(0, a[j] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n        i += 1\n        j -= 1\n    print(ans)", "def makePal(n, arr):\n    curr = ans = 0\n    for i in range(n):\n        need = max(0, arr[n - 1 - i] - arr[i])\n        ans += max(0, need - curr)\n        curr = need\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    print(makePal(n, arr))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = c = 0\n    for i in range(n):\n        d = max(0, a[n - 1 - i] - a[i])\n        c += max(0, d - b)\n        b = d\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = c = 0\n    for i in range(n):\n        d = max(0, a[n - 1 - i] - a[i])\n        c += max(0, d - b)\n        b = d\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    nlist = list(map(int, input().split()))\n    tlist = []\n    for i in range(n):\n        tlist.append(max(0, nlist[n - 1 - i] - nlist[i]))\n    ans = tlist[0]\n    for i in range(1, n):\n        ans += max(0, tlist[i] - tlist[i - 1])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    nlist = list(map(int, input().split()))\n    tlist = []\n    for i in range(n):\n        tlist.append(max(0, nlist[n - 1 - i] - nlist[i]))\n    ans = tlist[0]\n    for i in range(1, n):\n        ans += max(0, tlist[i] - tlist[i - 1])\n    print(ans)", "def solution(n, a):\n    cost = [0] * n\n    left = 0\n    right = n - 1\n    while left < right:\n        if a[left] < a[right]:\n            cost[left] = a[right] - a[left]\n        elif a[left] > a[right]:\n            cost[right] = a[left] - a[right]\n        left += 1\n        right -= 1\n    dp = cost[0]\n    for i in range(1, n):\n        if cost[i] - cost[i - 1] < 0:\n            continue\n        dp += cost[i] - cost[i - 1]\n    return dp\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))[:n]\n    print(solution(n, a))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    i = 0\n    j = n - 1\n    ans = 0\n    curr = 0\n    for i in range(n):\n        req = max(0, a[n - i - 1] - a[i])\n        ans += max(0, req - curr)\n        curr = req\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    if n % 2 == 1:\n        a.pop(n // 2)\n        n -= 1\n    m = n // 2\n    if n == 0:\n        print(0)\n    else:\n        for i in range(n // 2):\n            if a[i] == a[n - i - 1]:\n                pass\n            elif a[i] < a[n - i - 1]:\n                for p in range(m):\n                    b = a[n - i - 1] - a[i]\n                    if a[i] == a[n - i - 1]:\n                        break\n                    else:\n                        for j in range(i, m):\n                            if a[j] < a[n - j - 1]:\n                                b = min(a[n - j - 1] - a[j], b)\n                            else:\n                                j -= 1\n                                break\n                        for k in range(i, j + 1):\n                            a[k] += b\n                        count += b\n            elif a[i] > a[n - i - 1]:\n                for p in range(m):\n                    b = a[i] - a[n - i - 1]\n                    if a[i] == a[n - i - 1]:\n                        break\n                    else:\n                        for j in range(n - i - 1, m - 1, -1):\n                            if a[j] < a[n - j - 1]:\n                                b = min(a[n - j - 1] - a[j], b)\n                            else:\n                                j += 1\n                                break\n                        for k in range(n - i - 1, j - 1, -1):\n                            a[k] += b\n                        count += b\n        print(count)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = [0 for _ in range(n)]\n    start = 0\n    end = n - 1\n    while start < end:\n        if arr[start] > arr[end]:\n            temp[end] = arr[start] - arr[end]\n        elif arr[start] < arr[end]:\n            temp[start] = arr[end] - arr[start]\n        start += 1\n        end -= 1\n    res = temp[0]\n    for i in range(1, n):\n        if temp[i] - temp[i - 1] <= 0:\n            res += 0\n        else:\n            res += temp[i] - temp[i - 1]\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = o = 0\n    for i in range(n):\n        x = max(0, a[n - 1 - i] - a[i])\n        o += max(0, x - c)\n        c = x\n    print(o)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "j = int(input())\nfor k in range(j):\n    n = int(input())\n    l = list(map(int, input().split()))\n    (s, t) = (0, 0)\n    for i in range(len(l)):\n        m = max(0, l[len(l) - 1 - i] - l[i])\n        s += max(0, m - t)\n        t = m\n    print(s)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    dp = [0] * n\n    l = 0\n    r = len(arr) - 1\n    while r >= l:\n        if arr[l] != arr[r]:\n            if arr[l] > arr[r]:\n                dp[r] = arr[l] - arr[r]\n            else:\n                dp[l] = arr[r] - arr[l]\n        l += 1\n        r -= 1\n    cnt = dp[0]\n    for i in range(1, n):\n        cnt += max(0, dp[i] - dp[i - 1])\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cur = ans = 0\n    for i in range(n):\n        need = max(0, a[n - 1 - i] - a[i])\n        ans += max(0, need - cur)\n        cur = need\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    diff = [a[i] - a[n - i - 1] for i in range(n)]\n    res = 0\n    i = 0\n    while i < n:\n        if diff[i] < 0:\n            j = i\n            m = diff[j]\n            while j < n and diff[j] < 0:\n                m = max(diff[j], m)\n                j += 1\n            for k in range(i, j):\n                diff[k] -= m\n            res -= m\n            i -= 1\n        i += 1\n    print(res)", "def ppp():\n    n = int(input())\n    ax = list(map(int, input().split()))\n    (low, high, l, r, ctr) = (0, n - 1, 0, 0, 0)\n    while low < high:\n        dif = abs(ax[low] - ax[high])\n        if ax[low] < ax[high]:\n            if l <= dif:\n                mp = max(dif - l, 0)\n                ctr = ctr + mp\n            l = dif\n            r = 0\n        elif ax[low] > ax[high]:\n            if r <= dif:\n                mp = max(dif - r, 0)\n                ctr = ctr + mp\n            r = dif\n            l = 0\n        else:\n            l = min(l, r)\n            r = min(l, r)\n        l = max(l, 0)\n        r = max(r, 0)\n        low += 1\n        high -= 1\n    print(ctr)\n\ndef Driver():\n    for _ in range(int(input())):\n        ppp()\nDriver()", "import random\nimport math\nfrom collections import defaultdict, Counter, deque, OrderedDict\nfrom functools import lru_cache\nimport bisect\nimport heapq\nimport sys\ninput = lambda : sys.stdin.readline().strip()\n\nclass SegmentTree:\n\n    def __init__(self, arr, func=lambda x, y: x + y, defaultvalue=0):\n        self.n = len(arr)\n        self.segmentTree = [0] * self.n + arr\n        self.func = func\n        self.defaultvalue = defaultvalue\n        self.buildSegmentTree(arr)\n\n    def buildSegmentTree(self, arr):\n        for i in range(self.n - 1, 0, -1):\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        res = self.defaultvalue\n        while l < r:\n            if l & 1:\n                res = self.func(res, self.segmentTree[l])\n                l += 1\n            l >>= 1\n            if r & 1:\n                r -= 1\n                res = self.func(res, self.segmentTree[r])\n            r >>= 1\n        return res\n\n    def update(self, i, value):\n        i += self.n\n        self.segmentTree[i] = value\n        while i > 1:\n            i >>= 1\n            self.segmentTree[i] = self.func(self.segmentTree[2 * i], self.segmentTree[2 * i + 1])\n\nclass UnionFind:\n\n    def __init__(self, n):\n        self.n = n\n        self.parents = list(range(n))\n\n    def find(self, x):\n        if self.parents[x] == x:\n            return x\n        else:\n            self.parents[x] = self.find(self.parents[x])\n            return self.parents[x]\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n        if x != y:\n            self.parents[x] = y\ndire = [0, 1, 0, -1, 0]\n\ndef is_prime(n):\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef case(t):\n    print('Case #{}:'.format(t), end=' ')\nRANDOM = random.randrange(2 ** 62)\n\ndef Wrapper(x):\n    return x ^ RANDOM\n\ndef solve():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n % 2 == 1:\n        n -= 1\n        arr.pop(n // 2)\n    add = [0] * n\n    (l, r) = (0, n - 1)\n    while l < r:\n        if arr[l] > arr[r]:\n            add[r] += arr[l] - arr[r]\n        else:\n            add[l] += arr[r] - arr[l]\n        l += 1\n        r -= 1\n    ans = 0\n    last = 0\n    for i in range(n):\n        if add[i] > last:\n            ans += add[i] - last\n        last = add[i]\n    print(ans)\nfor t in range(int(input())):\n    solve()", "n = int(input())\n\ndef move(arr):\n    P = []\n    T = []\n    for i in range(len(arr) // 2):\n        P.append(0)\n        T.append(arr[i] - arr[len(arr) - i - 1])\n    difs = [x - y for (x, y) in zip(P, T)]\n    return sum((abs(x - y) for (x, y) in zip(difs + [0], [0] + difs))) // 2\nfor i in range(n):\n    l = int(input())\n    arr = list(map(int, input().split()))\n    print(move(arr))", "n12 = int(input())\nfor k12 in range(n12):\n    n = int(input())\n    l = list(map(int, input().split()))[:n]\n    a = []\n    for i in range(n // 2):\n        x = l[i] - l[n - i - 1]\n        a.append(x)\n    max = 0\n    sum = 0\n    val = a[0]\n    for i in range(n // 2 - 1):\n        if a[i] >= 0:\n            if a[i + 1] > 0:\n                if val > a[i + 1]:\n                    sum += val - a[i + 1]\n                    val = a[i + 1]\n                else:\n                    val = a[i + 1]\n            else:\n                sum += a[i]\n                val = a[i + 1]\n        elif a[i + 1] >= 0:\n            sum -= a[i]\n            val = a[i + 1]\n        elif val < a[i + 1]:\n            sum += a[i + 1] - val\n            val = a[i + 1]\n        else:\n            val = a[i + 1]\n    if val >= 0:\n        print(sum + val)\n    else:\n        print(sum - val)", "def print_minimum_moves(arr):\n    minimum_moves = 0\n    left_index = 0\n    right_index = len(arr) - 1\n    left_free_moves = 0\n    right_free_moves = 0\n    while left_index < right_index:\n        left_value = arr[left_index]\n        right_value = arr[right_index]\n        if left_value < right_value:\n            needed_moves = right_value - left_value\n            discounted_needed_moves = max(0, needed_moves - left_free_moves)\n            minimum_moves += discounted_needed_moves\n            left_free_moves = needed_moves\n            right_free_moves = 0\n        elif left_value > right_value:\n            needed_moves = left_value - right_value\n            discounted_needed_moves = max(0, needed_moves - right_free_moves)\n            minimum_moves += discounted_needed_moves\n            right_free_moves = needed_moves\n            left_free_moves = 0\n        else:\n            left_free_moves = 0\n            right_free_moves = 0\n        left_index += 1\n        right_index -= 1\n    print(minimum_moves)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = input().split()\n    arr = [int(c) for c in arr]\n    print_minimum_moves(arr)", "def print_minimum_moves(arr):\n    minimum_moves = 0\n    left_index = 0\n    right_index = len(arr) - 1\n    left_free_moves = 0\n    right_free_moves = 0\n    while left_index < right_index:\n        left_value = arr[left_index]\n        right_value = arr[right_index]\n        if left_value < right_value:\n            needed_moves = right_value - left_value\n            discounted_needed_moves = max(0, needed_moves - left_free_moves)\n            minimum_moves += discounted_needed_moves\n            left_free_moves = needed_moves\n            right_free_moves = 0\n        elif left_value > right_value:\n            needed_moves = left_value - right_value\n            discounted_needed_moves = max(0, needed_moves - right_free_moves)\n            minimum_moves += discounted_needed_moves\n            right_free_moves = needed_moves\n            left_free_moves = 0\n        else:\n            left_free_moves = 0\n            right_free_moves = 0\n        left_index += 1\n        right_index -= 1\n    print(minimum_moves)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = input().split()\n    arr = [int(c) for c in arr]\n    print_minimum_moves(arr)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [a[i] - a[n - i - 1] for i in range(n // 2)]\n    (ans, curr) = (0, 0)\n    for i in b:\n        if i > 0:\n            if curr >= 0:\n                ans += max(0, i - curr)\n            else:\n                ans += i\n        elif i < 0:\n            if curr <= 0:\n                ans += max(0, curr - i)\n            else:\n                ans += -i\n        curr = i\n    print(ans)", "from math import *\nfrom collections import *\nimport io, os\nimport sys\nMOD = 998244353\n\ndef subinp():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef subinp_1():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('op2.txt', 'w')\n\nclass Point:\n\n    def __init__(self, x, l1):\n        self.x = x\n        self.l1 = l1\n\n    def __lt__(self, b):\n        return self.l1[self.x] < self.l1[b.x]\n\n    def getval(self):\n        return self.x\ninp = lambda : int(input())\nstrin = lambda : input().strip()\nstrl = lambda : list(input().rstrip('\\r\\n'))\nstrlst = lambda : list(map(str, input().split()))\nmult = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nlstin = lambda : list(map(int, input().strip().split()))\nflush = lambda : stdout.flush()\nstdpr = lambda x: stdout.write(str(x))\n\ndef panda(n, arr):\n    dp = [0] * n\n    (i, j) = (0, n - 1)\n    while i < j:\n        if arr[i] < arr[j]:\n            dp[i] += arr[j] - arr[i]\n        elif arr[i] > arr[j]:\n            dp[j] += arr[i] - arr[j]\n        i += 1\n        j -= 1\n    ans = 0\n    res = 0\n    for i in dp:\n        ans += max(0, i - res)\n        res = i\n    return ans\nt = 1\nt = int(input())\nfor _ in range(t):\n    n = inp()\n    arr = lstin()\n    ans = panda(n, arr)\n    print(ans)", "from sys import stdin\nfor t in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    lis = list(map(int, stdin.readline().split()))\n    if n % 2 == 0:\n        s = n // 2 - 1\n        e = n // 2\n    else:\n        s = n // 2 - 1\n        e = n // 2 + 1\n    c = 0\n    last = ['n', 0, 0]\n    while s != -1:\n        if lis[s] == lis[e]:\n            s -= 1\n            e += 1\n            last = ['n', 0, 0]\n        elif lis[s] > lis[e]:\n            if last[0] != 'e':\n                c = c + lis[s] - lis[e]\n            elif lis[s] - lis[e] > last[2]:\n                c = c + lis[s] - lis[e] - last[2]\n            last = ['e', e, lis[s] - lis[e]]\n            s -= 1\n            e += 1\n        elif lis[s] < lis[e]:\n            if last[0] != 's':\n                c = c + lis[e] - lis[s]\n            elif lis[e] - lis[s] > last[2]:\n                c = c + lis[e] - lis[s] - last[2]\n            last = ['s', s, lis[e] - lis[s]]\n            s -= 1\n            e += 1\n    print(c)", "from collections import *\nfrom itertools import *\nfrom functools import *\nfrom heapq import *\nimport sys, math\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p1 = 0\n    p2 = n - 1\n    ans = 0\n    while True:\n        if l[p1] > l[p2]:\n            if p2 - p1 < 1:\n                break\n            crr = l[p1] - l[p2]\n            ans += crr\n            p1 += 1\n            p2 -= 1\n            if p2 - p1 < 1:\n                break\n            while l[p1] >= l[p2]:\n                if l[p1] - l[p2] > crr:\n                    ans += l[p1] - l[p2] - crr\n                    crr = l[p1] - l[p2]\n                else:\n                    crr = l[p1] - l[p2]\n                p1 += 1\n                p2 -= 1\n                if p2 - p1 < 1:\n                    break\n        else:\n            if p2 - p1 < 1:\n                break\n            crr = l[p2] - l[p1]\n            ans += crr\n            p1 += 1\n            p2 -= 1\n            if p2 - p1 < 1:\n                break\n            while l[p2] >= l[p1]:\n                if l[p2] - l[p1] > crr:\n                    ans += l[p2] - l[p1] - crr\n                    crr = l[p2] - l[p1]\n                else:\n                    crr = l[p2] - l[p1]\n                p1 += 1\n                p2 -= 1\n                if p2 - p1 < 1:\n                    break\n    print(ans)", "t = int(input())\n\ndef minops(A):\n    res = pre = 0\n    for a in A:\n        res += max(a - pre, 0)\n        pre = a\n    return res\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    i = 0\n    j = n - 1\n    res = 0\n    ctr = [0] * n\n    while i < j:\n        if arr[i] < arr[j]:\n            ctr[i] = arr[j] - arr[i]\n        elif arr[i] > arr[j]:\n            ctr[j] = arr[i] - arr[j]\n        i += 1\n        j -= 1\n    print(minops(ctr))", "T = int(input())\nfor testNum in range(T):\n    moves = 0\n    excessR = 0\n    excessL = 0\n    N = int(input())\n    nums = list(map(int, input().split(' ')))\n    for i in range(int(N / 2)):\n        valR = nums[i]\n        valL = nums[N - 1 - i]\n        dif = abs(valR - valL)\n        if dif == 0:\n            moves += excessR + excessL\n            excessL = 0\n            excessR = 0\n        elif valR > valL:\n            if excessR > 0:\n                if excessR > dif:\n                    moves += excessR - dif\n                excessR = dif\n            else:\n                moves += excessL\n                excessL = 0\n                excessR = dif\n        elif excessL > 0:\n            if excessL > dif:\n                moves += excessL - dif\n            excessL = dif\n        else:\n            moves += excessR\n            excessR = 0\n            excessL = dif\n    print(moves + excessR + excessL)", "import sys, math, heapq, bisect, random, itertools\ninput = sys.stdin.readline\nsys.setrecursionlimit(10 ** 5)\nints = lambda : list(map(int, input().split()))\np = 10 ** 9 + 7\ninf = 10 ** 20 + 7\nalpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nfor t in range(int(input())):\n    n = int(input())\n    a = ints()\n    (l, r) = (0, n - 1)\n    (ml, mr) = (0, 0)\n    ans = 0\n    while l < r:\n        if a[l] == a[r]:\n            ml = 0\n            mr = 0\n            l += 1\n            r -= 1\n        else:\n            if a[l] < a[r]:\n                if a[r] - a[l] - ml > 0:\n                    ans += a[r] - a[l] - ml\n                ml = a[r] - a[l]\n                mr = 0\n            else:\n                if a[l] - a[r] - mr > 0:\n                    ans += a[l] - a[r] - mr\n                mr = a[l] - a[r]\n                ml = 0\n            l += 1\n            r -= 1\n    print(ans)"]