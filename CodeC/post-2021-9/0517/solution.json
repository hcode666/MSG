["for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    suf = 0\n    pref = 0\n    mxpref = 0\n    for i in range(n):\n        if i % 2 == 0:\n            suf += a[i]\n        else:\n            suf -= a[i]\n    ans = suf\n    for i in range(n):\n        if i % 2 == 0:\n            suf -= a[i]\n            pref += a[i]\n        else:\n            suf += a[i]\n            pref -= a[i]\n        if i % 2 != n % 2:\n            ans = max(ans, pref - suf)\n            mxpref = max(mxpref, pref)\n        else:\n            ans = max(ans, 2 * mxpref - pref - suf)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    suf = 0\n    pref = 0\n    mxpref = 0\n    for i in range(n):\n        if i % 2 == 0:\n            suf += a[i]\n        else:\n            suf -= a[i]\n    ans = suf\n    for i in range(n):\n        if i % 2 == 0:\n            suf -= a[i]\n            pref += a[i]\n        else:\n            suf += a[i]\n            pref -= a[i]\n        if i % 2 != n % 2:\n            ans = max(ans, pref - suf)\n            mxpref = max(mxpref, pref)\n        else:\n            ans = max(ans, 2 * mxpref - pref - suf)\n    print(ans)", "from collections import Counter\nfrom functools import reduce\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    suf = [0] * (n + 1)\n    f = -1 if n % 2 == 0 else 1\n    for i in range(n - 1, -1, -1):\n        suf[i] = f * a[i] + suf[i + 1]\n        f *= -1\n    min_pos = [0] * (n + 1)\n    (min_pos[0], min_pos[1]) = (suf[0], suf[1])\n    for i in range(n + 1):\n        min_pos[i] = min(min_pos[i - 2], suf[i])\n    val = suf[0]\n    ans = val\n    for i in range(n - 1, -1, -1):\n        if (n - i + 1) % 2 != 0:\n            ans = max(ans, val - 2 * suf[i])\n        else:\n            ans = max(ans, val - 2 * min_pos[i - 1])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        if i % 2 == 0:\n            prefix[i] = prefix[i - 1] + arr[i]\n        else:\n            prefix[i] = prefix[i - 1] - arr[i]\n    ind = 0\n    if n % 2 == 0:\n        ind = 1\n    maxsum = 0\n    while ind < n:\n        maxsum = max(maxsum, prefix[ind])\n        ind += 2\n    res = 2 * maxsum - prefix[n - 1]\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    suf = 0\n    pref = 0\n    mxpref = 0\n    for i in range(n):\n        if i % 2 == 0:\n            suf += a[i]\n        else:\n            suf -= a[i]\n    ans = suf\n    for i in range(n):\n        if i % 2 == 0:\n            suf -= a[i]\n            pref += a[i]\n        else:\n            suf += a[i]\n            pref -= a[i]\n        if i % 2 != n % 2:\n            ans = max(ans, pref - suf)\n            mxpref = max(mxpref, pref)\n        else:\n            ans = max(ans, 2 * mxpref - pref - suf)\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l2 = []\n    (o, e) = (0, 0)\n    ans = 0\n    for j in range(n):\n        if j % 2 == 0:\n            o += l[j]\n        else:\n            e += l[j]\n        l2.append((o, e))\n    if n % 2 == 1:\n        for j in range(n):\n            if j % 2 == 0:\n                (o, e) = l2[j]\n                (o, e) = (o + l2[-1][1] - e, e + l2[-1][0] - o)\n            else:\n                (o, e) = l2[j - 1]\n                (o, e) = (o + l2[-1][1] - e, e + l2[-1][0] - o)\n            temp = o - e\n            ans = max(ans, temp)\n    else:\n        (o, e) = l2[-1]\n        ans = e - o\n        for j in range(1, n):\n            if j % 2 == 1:\n                (o, e) = l2[j]\n                (o, e) = (o + l2[-1][1] - e, e + l2[-1][0] - o)\n            else:\n                (o, e) = l2[j - 1]\n                (o, e) = (o + l2[-1][1] - e, e + l2[-1][0] - o)\n            temp = o - e\n            ans = max(ans, temp)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    for i in range(n):\n        dp[i + 1] += a[i] + dp[i] if i % 2 == 0 else -a[i] + dp[i]\n    m = dp[-1]\n    for i in range(n):\n        s1 = dp[i]\n        s2 = dp[-1] - dp[i + 1]\n        if i % 2:\n            m = max(m, s1 - s2 - a[i]) if (n - i - 1) % 2 == 0 else max(m, s1 - s2 + a[i])\n        else:\n            m = max(m, s1 - s2 + a[i]) if (n - i - 1) % 2 == 0 else max(m, s1 - s2 - a[i])\n    print(m)", "import math\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    n = I()\n    a = L()\n    dp = [0] * (n + 1)\n    for i in range(n):\n        if i % 2 == 0:\n            dp[i + 1] += a[i] + dp[i]\n        else:\n            dp[i + 1] += -a[i] + dp[i]\n    m = dp[-1]\n    for i in range(n):\n        s1 = dp[i]\n        s2 = dp[-1] - dp[i + 1]\n        if i % 2 == 1:\n            if (n - i - 1) % 2 == 0:\n                m = max(m, s1 - s2 - a[i])\n            else:\n                m = max(m, s1 - s2 + a[i])\n        elif (n - i - 1) % 2 == 0:\n            m = max(m, s1 - s2 + a[i])\n        else:\n            m = max(m, s1 - s2 - a[i])\n    print(m)", "from itertools import permutations as per\nfrom math import factorial as fact\nfrom difflib import SequenceMatcher\nimport bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    for i in range(1, n):\n        if i % 2:\n            a[i] = a[i - 1] - a[i]\n        else:\n            a[i] = a[i - 1] + a[i]\n    ans = a[-1]\n    if n % 2:\n        for i in range(1, n, 2):\n            ans = max(ans, a[i - 1] - (a[-1] - a[i - 1]))\n    else:\n        for i in range(2, n, 2):\n            ans = max(ans, a[i - 1] - (a[-1] - a[i - 1]))\n        ans = max(ans, -a[-1])\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pre = [0] * n\n    suff = [0] * n\n    pre[0] = arr[0]\n    if (n - 1) % 2 == 0:\n        suff[n - 1] = arr[n - 1]\n    else:\n        suff[n - 1] = -arr[n - 1]\n    for i in range(1, n):\n        if i % 2 == 0:\n            pre[i] = pre[i - 1] + arr[i]\n        else:\n            pre[i] = pre[i - 1] - arr[i]\n    ans = pre[-1]\n    for i in range(n - 2, -1, -1):\n        if i % 2 == 0:\n            suff[i] = suff[i + 1] + arr[i]\n        else:\n            suff[i] = suff[i + 1] - arr[i]\n    ans = max(ans, -suff[0])\n    for i in range(n - 2, 0, -2):\n        ans = max(ans, pre[i - 1] - suff[i])\n    print(ans)", "for tc in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    if n % 2 == 0:\n        sp1 = []\n        sp2 = []\n        for x in range(len(ls)):\n            if x % 2 == 0:\n                if len(sp1) == 0:\n                    sp1.append(ls[x])\n                else:\n                    sp1.append(sp1[-1] + ls[x])\n            elif len(sp2) == 0:\n                sp2.append(ls[x])\n            else:\n                sp2.append(sp2[-1] + ls[x])\n        ma = max(sp1[-1] - sp2[-1], sp2[-1] - sp1[-1])\n        for x in range(len(sp1) - 1):\n            ma = max(ma, sp2[-1] - sp2[x] + sp1[x] - (sp1[-1] - sp1[x] + sp2[x]))\n        print(ma)\n    else:\n        fir = ls[0]\n        sp1 = []\n        sp2 = []\n        for x in range(1, len(ls)):\n            if x % 2 == 0:\n                if len(sp1) == 0:\n                    sp1.append(ls[x])\n                else:\n                    sp1.append(sp1[-1] + ls[x])\n            elif len(sp2) == 0:\n                sp2.append(ls[x])\n            else:\n                sp2.append(sp2[-1] + ls[x])\n        su1 = sp1[-1]\n        su2 = sp2[-1]\n        ma = fir + su1 - su2\n        ma = max(ma, fir + su2 - su1)\n        for x in range(len(sp1) - 1):\n            ma = max(ma, fir + sp1[x] + sp2[-1] - sp2[x] - (sp1[-1] - sp1[x] + sp2[x]))\n        print(ma)", "from sys import stdin\ninput = stdin.readline\nfrom collections import Counter\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    s = 0\n    ai = [0]\n    for i in range(n):\n        if i % 2 == 0:\n            s = s + li[i]\n        else:\n            s = s - li[i]\n        ai.append(s)\n    ans = s\n    for i in range(1, n):\n        if (n + i) % 2:\n            ans = max(ans, 2 * ai[i - 1] - ai[n])\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    b = [int(x) for x in input().split()]\n    if n == 1:\n        print(b[0])\n        continue\n    if n % 2 == 1:\n        pre = {}\n        su = 0\n        for i in range(n - 1, -1, -1):\n            if i % 2 == 0:\n                su += -1 * b[i]\n            else:\n                su += b[i]\n            pre[i + 1] = su\n        ans = []\n        su = 0\n        for i in range(n):\n            if i % 2 == 1:\n                ans.append(su + pre[i + 1])\n            if i % 2 == 0:\n                su += b[i]\n            else:\n                su += -1 * b[i]\n        ans.append(su)\n        print(max(ans))\n    else:\n        pre = {}\n        su = 0\n        for i in range(n - 1, -1, -1):\n            if i % 2 == 0:\n                su += -1 * b[i]\n            else:\n                su += b[i]\n            pre[i + 1] = su\n        ans = []\n        su = 0\n        for i in range(n):\n            if i % 2 == 0:\n                ans.append(su + pre[i + 1])\n            if i % 2 == 0:\n                su += b[i]\n            else:\n                su += -1 * b[i]\n        ans.append(su)\n        print(max(ans))", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = 0\n    i = 0\n    while i < n:\n        s += arr[i]\n        i += 1\n        if i < n:\n            s -= arr[i]\n            i += 1\n    mx = 0\n    if n % 2 == 0:\n        curr = 0\n        i = 1\n        while i <= n:\n            if i % 2 == 0:\n                curr += arr[-i]\n                if curr < mx:\n                    mx = curr\n            else:\n                curr -= arr[-i]\n            i += 1\n    else:\n        curr = 0\n        i = 1\n        while i <= n:\n            if i % 2 == 0:\n                curr -= arr[-i]\n                if curr < mx:\n                    mx = curr\n            else:\n                curr += arr[-i]\n            i += 1\n    return s + 2 * abs(mx)\nfor _ in range(int(input())):\n    print(main())", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    maxx = 0\n    ans = 0\n    prefix = []\n    if n == 1:\n        print(arr[0])\n        continue\n    for j in range(n):\n        if not j % 2:\n            ans += arr[j]\n        else:\n            ans -= arr[j]\n        prefix.append(ans)\n    maxx = prefix[-1]\n    for i in range(n - 1):\n        x = -(prefix[-1] - prefix[i])\n        if i != 0:\n            x += prefix[i - 1]\n        if n % 2:\n            x += arr[i]\n        else:\n            x -= arr[i]\n        maxx = max(x, maxx)\n    print(maxx)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    harshan = inp()\n    harshal = li()\n    harshaans = 0\n    for i in range(harshan):\n        if i % 2 == 0:\n            harshaans += harshal[i]\n        else:\n            harshaans -= harshal[i]\n    harshas = 0\n    cur = harshaans\n    for i in range(harshan):\n        if i % 2 == 0:\n            x = cur - harshal[i]\n        else:\n            x = cur + harshal[i]\n        x -= harshas\n        if harshan % 2 == 0:\n            harshaans = max(harshaans, harshas - x - harshal[i])\n        else:\n            harshaans = max(harshaans, harshas - x + harshal[i])\n        if i % 2 == 0:\n            harshas += harshal[i]\n        else:\n            harshas -= harshal[i]\n    pr(harshaans)\nfor _ in range(inp()):\n    solve()", "import math\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    n = I()\n    a = L()\n    dp = [0] * (n + 1)\n    for i in range(n):\n        if i % 2 == 0:\n            dp[i + 1] += a[i] + dp[i]\n        else:\n            dp[i + 1] += -a[i] + dp[i]\n    m = dp[-1]\n    for i in range(n):\n        s1 = dp[i]\n        s2 = dp[-1] - dp[i + 1]\n        if i % 2 == 1:\n            if (n - i - 1) % 2 == 0:\n                m = max(m, s1 - s2 - a[i])\n            else:\n                m = max(m, s1 - s2 + a[i])\n        elif (n - i - 1) % 2 == 0:\n            m = max(m, s1 - s2 + a[i])\n        else:\n            m = max(m, s1 - s2 - a[i])\n    print(m)", "import heapq\n\nclass MaxHeap:\n\n    def __init__(self):\n        self._heap = []\n        heapq.heapify(self._heap)\n\n    def insert(self, it):\n        heapq.heappush(self._heap, -it)\n\n    def peek(self):\n        val = self._heap[0]\n        return -val\n\ndef solve(A, n):\n    pref = [0] * (n + 1)\n    for i in range(1, n + 1):\n        pref[i] = pref[i - 1]\n        if i % 2:\n            pref[i] += A[i - 1]\n        else:\n            pref[i] -= A[i - 1]\n    suff = [0] * (n + 2)\n    for i in range(n, 0, -1):\n        suff[i] = A[i - 1] - suff[i + 1]\n    ans = suff[1]\n    heaps_1 = [MaxHeap(), MaxHeap()]\n    heaps_2 = [MaxHeap(), MaxHeap()]\n    for R in range(1, n + 1):\n        last = n - R\n        heaps_1[R % 2].insert(pref[R - 1] - suff[R])\n        heaps_2[R % 2].insert(pref[R - 1] + suff[R])\n        max1 = heaps_1[R % 2].peek()\n        max2 = heaps_2[R % 2].peek()\n        if R % 2:\n            if last % 2:\n                ans = max(ans, max1)\n            else:\n                ans = max(ans, max2 + 2 * suff[R + 1])\n        elif last % 2:\n            ans = max(ans, max2)\n        else:\n            ans = max(max1 - 2 * suff[R + 1], ans)\n    return ans\nfor case in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    ans = solve(A, n)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    maxx = 0\n    ans = 0\n    prefix = []\n    if n == 1:\n        print(arr[0])\n        continue\n    for j in range(n):\n        if not j % 2:\n            ans += arr[j]\n        else:\n            ans -= arr[j]\n        prefix.append(ans)\n    maxx = prefix[-1]\n    for i in range(n - 1):\n        x = -(prefix[-1] - prefix[i])\n        if i != 0:\n            x += prefix[i - 1]\n        if n % 2:\n            x += arr[i]\n        else:\n            x -= arr[i]\n        maxx = max(x, maxx)\n    print(maxx)", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    A = list(map(int, input().split()))\n    asum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            asum = asum + A[i]\n        else:\n            asum = asum - A[i]\n    res = 0\n    if n % 2 == 0:\n        a = 0\n        for i in range(n):\n            if i % 2 == 0:\n                a += A[i]\n            else:\n                a -= A[i]\n                t = 2 * a - asum\n                res = max(res, t)\n        a = 0\n        for i in range(n):\n            if (n - 1 - i) % 2 == 0:\n                a += A[n - 1 - i]\n                t = asum - 2 * a\n                res = max(res, t)\n            else:\n                a -= A[n - 1 - i]\n    else:\n        a = 0\n        for i in range(n):\n            if i % 2 == 0:\n                a += A[i]\n                t = 2 * a - asum\n                res = max(res, t)\n            else:\n                a -= A[i]\n        a = 0\n        for i in range(n):\n            if (n - 1 - i) % 2 == 0:\n                a += A[n - 1 - i]\n            else:\n                a -= A[n - 1 - i]\n                t = asum - 2 * a\n                res = max(res, t)\n    print(res)", "from sys import stdin\ninput = stdin.readline\nfrom collections import Counter\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    s = 0\n    ai = [0]\n    for i in range(n):\n        if i % 2 == 0:\n            s = s + li[i]\n        else:\n            s = s - li[i]\n        ai.append(s)\n    ans = s\n    if n % 2 == 0:\n        for i in range(1, n, 2):\n            s = ai[n] - ai[i - 1]\n            ans = max(ans, ai[i - 1] - s)\n    else:\n        for i in range(2, n + 1, 2):\n            s = ai[n] - ai[i - 1]\n            ans = max(ans, ai[n] - 2 * s)\n    print(ans)", "from sys import stdin\ninput = stdin.readline\nfrom collections import Counter\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    s = 0\n    ai = [0]\n    for i in range(n):\n        if i % 2 == 0:\n            s = s + li[i]\n        else:\n            s = s - li[i]\n        ai.append(s)\n    ans = s\n    if n % 2 == 0:\n        for i in range(1, n, 2):\n            s = ai[n] - ai[i - 1]\n            ans = max(ans, ai[i - 1] - s)\n    else:\n        for i in range(2, n + 1, 2):\n            s = ai[n] - ai[i - 1]\n            ans = max(ans, ai[n] - 2 * s)\n    print(ans)", "import math\nimport sys\ninput = sys.stdin.readline\nSD = lambda : input().rstrip()\nAX = lambda : int(SD())\nFR = lambda : map(int, SD().split())\nYH = lambda : list(FR())\nikj4 = 1000000007\nikj5 = 998244353\nfor _ in range(AX()):\n    sxwqe = AX()\n    bghyt = YH()\n    zxsa = [0] * (sxwqe + 1)\n    for nmjik in range(sxwqe):\n        if nmjik % 2 == 0:\n            zxsa[nmjik + 1] += bghyt[nmjik] + zxsa[nmjik]\n        else:\n            zxsa[nmjik + 1] += -bghyt[nmjik] + zxsa[nmjik]\n    okilp = zxsa[-1]\n    for nmjik in range(sxwqe):\n        axsde3 = zxsa[nmjik]\n        axsde4 = zxsa[-1] - zxsa[nmjik + 1]\n        if nmjik % 2 == 1:\n            if (sxwqe - nmjik - 1) % 2 == 0:\n                okilp = max(okilp, axsde3 - axsde4 - bghyt[nmjik])\n            else:\n                okilp = max(okilp, axsde3 - axsde4 + bghyt[nmjik])\n        elif (sxwqe - nmjik - 1) % 2 == 0:\n            okilp = max(okilp, axsde3 - axsde4 + bghyt[nmjik])\n        else:\n            okilp = max(okilp, axsde3 - axsde4 - bghyt[nmjik])\n    print(okilp)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    eve = 0\n    odd = 0\n    for i in range(n):\n        if i % 2 == 1:\n            eve += l[i]\n        else:\n            odd += l[i]\n    ans = odd - eve\n    (a, b) = (0, 0)\n    for i in range(n - 1):\n        if i % 2 == 1:\n            if (n - i - 1) % 2 == 1:\n                x = b - a - (eve - odd)\n                eve -= l[i]\n                a += l[i]\n            else:\n                x = b - a - (eve - odd + 2 * l[i])\n                eve -= l[i]\n                a += l[i]\n        elif (n - i - 1) % 2 == 1:\n            x = b - a + eve - odd\n            odd -= l[i]\n            b += l[i]\n        else:\n            x = b - a + eve - odd + 2 * l[i]\n            odd -= l[i]\n            b += l[i]\n        ans = max(ans, x)\n    print(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    if n & 1 == 0:\n        what = 0\n    else:\n        what = 1\n    value = a[0]\n    for i in range(1, n):\n        if i & 1 == 0:\n            value += a[i]\n        else:\n            value -= a[i]\n    (s, ans) = (0, value)\n    for i in range(n - 1, 0, -1):\n        if what == 0:\n            s -= a[i]\n        else:\n            s += a[i]\n        if n - i & 1 == 0:\n            ans = max(ans, value - s - s)\n        what ^= 1\n    if n & 1 == 0:\n        what = 0\n    else:\n        what = 1\n    if what == 0:\n        s = -a[-1]\n    else:\n        s = a[-1]\n    what ^= 1\n    for i in range(n - 2, -1, -1):\n        if what == 0:\n            s -= a[i]\n        else:\n            s += a[i]\n        if n - i & 1 == 0:\n            ans = max(ans, value - s - s)\n        what ^= 1\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(answer())", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    for i in range(n):\n        if i & 1 == 1:\n            a[i] = -a[i]\n    pr = [0] * n\n    pr[0] = a[0]\n    ma = [0] * n\n    ma[0] = [a[0], 1]\n    for i in range(1, n):\n        pr[i] = pr[i - 1] + a[i]\n        if ma[i - 1][0] < pr[i]:\n            ma[i] = [pr[i], i + 1]\n        else:\n            ma[i] = ma[i - 1]\n    total_sum = pr[n - 1]\n    ans = total_sum\n    for i in range(n - 1, 0, -1):\n        end_sum = pr[n - 1] - pr[i - 1]\n        start_sum = ma[i - 1][0]\n        start_length = ma[i - 1][1]\n        remaining_sum = total_sum - (end_sum + start_sum)\n        if (n - (start_length + (n - i))) % 2 != 0 or n - (start_length + (n - i)) == 0:\n            if (n - i) % 2 != 0:\n                remaining_sum = -1 * remaining_sum\n            if remaining_sum == 0 and start_length % 2 != 0:\n                start_sum = -1 * start_sum\n            ans = max(ans, start_sum + remaining_sum + -1 * end_sum)\n    print(ans)", "import math\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    n = I()\n    a = L()\n    dp = [0] * (n + 1)\n    for i in range(n):\n        if i % 2 == 0:\n            dp[i + 1] += a[i] + dp[i]\n        else:\n            dp[i + 1] += -a[i] + dp[i]\n    m = dp[-1]\n    for i in range(n):\n        s1 = dp[i]\n        s2 = dp[-1] - dp[i + 1]\n        if i % 2 == 1:\n            if (n - i - 1) % 2 == 0:\n                m = max(m, s1 - s2 - a[i])\n            else:\n                m = max(m, s1 - s2 + a[i])\n        elif (n - i - 1) % 2 == 0:\n            m = max(m, s1 - s2 + a[i])\n        else:\n            m = max(m, s1 - s2 - a[i])\n    print(m)", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = 0\n    i = 0\n    while i < n:\n        s += arr[i]\n        i += 1\n        if i < n:\n            s -= arr[i]\n            i += 1\n    mx = 0\n    if n % 2 == 0:\n        curr = 0\n        i = 1\n        while i <= n:\n            if i % 2 == 0:\n                curr += arr[-i]\n                if curr < mx:\n                    mx = curr\n            else:\n                if curr < mx:\n                    mx = curr\n                curr -= arr[-i]\n            i += 1\n    else:\n        curr = 0\n        i = 1\n        while i <= n:\n            if i % 2 == 0:\n                curr -= arr[-i]\n                if curr < mx:\n                    mx = curr\n            else:\n                if curr < mx:\n                    mx = curr\n                curr += arr[-i]\n            i += 1\n    return s + 2 * abs(mx)\nfor _ in range(int(input())):\n    print(main())", "def main():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = 0\n    i = 0\n    while i < n:\n        s += arr[i]\n        i += 1\n        if i < n:\n            s -= arr[i]\n            i += 1\n    mx = 0\n    if n % 2 == 0:\n        curr = 0\n        i = 1\n        while i <= n:\n            if i % 2 == 0:\n                curr += arr[-i]\n                if curr < mx:\n                    mx = curr\n            else:\n                if curr < mx:\n                    mx = curr\n                curr -= arr[-i]\n            i += 1\n    else:\n        curr = 0\n        i = 1\n        while i <= n:\n            if i % 2 == 0:\n                curr -= arr[-i]\n                if curr < mx:\n                    mx = curr\n            else:\n                if curr < mx:\n                    mx = curr\n                curr += arr[-i]\n            i += 1\n    return s + 2 * abs(mx)\nfor _ in range(int(input())):\n    print(main())", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        if i % 2:\n            s -= l[i]\n        else:\n            s += l[i]\n    ans = 0\n    if n % 2 == 0:\n        k1 = 0\n        for i in range(n):\n            if i % 2:\n                k1 -= l[i]\n                ans = max(ans, 2 * k1 - s)\n            else:\n                k1 += l[i]\n        k3 = 0\n        for i in range(n - 1, -1, -1):\n            if i % 2:\n                k3 -= l[i]\n            else:\n                k3 += l[i]\n                ans = max(ans, s - 2 * k3)\n    else:\n        k1 = 0\n        for i in range(n):\n            if i % 2:\n                k1 -= l[i]\n            else:\n                k1 += l[i]\n                ans = max(ans, 2 * k1 - s)\n        k3 = 0\n        for i in range(n - 1, -1, -1):\n            if i % 2:\n                k3 -= l[i]\n                ans = max(ans, s - 2 * k3)\n            else:\n                k3 += l[i]\n    print(ans)", "import math\nimport sys\ninput = sys.stdin.readline\nS = lambda : input().rstrip()\nI = lambda : int(S())\nM = lambda : map(int, S().split())\nL = lambda : list(M())\nmod1 = 1000000007\nmod2 = 998244353\nfor _ in range(I()):\n    n = I()\n    a = L()\n    dp = [0] * (n + 1)\n    for i in range(n):\n        if i % 2 == 0:\n            dp[i + 1] += a[i] + dp[i]\n        else:\n            dp[i + 1] += -a[i] + dp[i]\n    m = dp[-1]\n    for i in range(n):\n        s1 = dp[i]\n        s2 = dp[-1] - dp[i + 1]\n        if i % 2 == 1:\n            if (n - i - 1) % 2 == 0:\n                m = max(m, s1 - s2 - a[i])\n            else:\n                m = max(m, s1 - s2 + a[i])\n        elif (n - i - 1) % 2 == 0:\n            m = max(m, s1 - s2 + a[i])\n        else:\n            m = max(m, s1 - s2 - a[i])\n    print(m)", "from sys import stdin, stdout, setrecursionlimit as srl\nfrom threading import stack_size\nfrom collections import deque, defaultdict as dd\nfrom math import gcd, ceil, sqrt\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nflush = stdout.flush\np = int(1000000000.0 + 7)\ntc = 1\ntc = int(input())\nfor _ in range(1, tc + 1):\n    n = int(input())\n    a = list(map(int, input().split()))\n    suf = a.copy()\n    for i in range(n - 2, -1, -1):\n        suf[i] -= suf[i + 1]\n    ans = suf[0]\n    if n % 2 == 1:\n        mn = float('-inf')\n        for i in range(1, n, 2):\n            mn = max(mn, suf[i])\n        ans = max(ans, suf[0] + 2 * mn)\n        dp = [-1 for i in range(n)]\n        dp[0] = a[0]\n        dp[1] = a[1]\n        for i in range(2, n):\n            dp[i] = max(a[i], a[i] - a[i - 1] + dp[i - 2])\n        mx = float('-inf')\n        for i in range(2, n, 2):\n            mx = max(mx, suf[0] - 2 * suf[i] + 2 * dp[i - 1])\n        ans = max(ans, mx)\n    if n % 2 == 0:\n        mn = float('inf')\n        for i in range(2, n, 2):\n            mn = min(mn, suf[i])\n        ans = max(ans, suf[0] - 2 * mn)\n        dp = [-1 for i in range(n)]\n        dp[0] = a[0]\n        dp[1] = a[1]\n        for i in range(2, n):\n            dp[i] = max(a[i], a[i] - a[i - 1] + dp[i - 2])\n        mx = float('-inf')\n        for i in range(1, n, 2):\n            mx = max(mx, suf[0] + 2 * suf[i] - 2 * dp[i - 1])\n        ans = max(ans, mx)\n    print(ans)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n    sys.stderr = open('error.txt', 'w')\ndepth = 200001\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nlinp = lambda : list(minp())\nminp = lambda : map(int, input().split())\nfrom math import inf, ceil, sqrt, log2, gcd\nfrom collections import defaultdict, deque\ndxy = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n\ndef expo(a, b):\n    if not b:\n        return 1\n    v = expo(a, b // 2)\n    v = v * v % mod\n    if b % 2:\n        v = v * a % mod\n    return v\n\ndef modinv(a, b):\n    d = expo(b, mod - 2)\n    v = a * d % mod\n    return v\n\ndef checkPrime(n):\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    a = [0] + linp()\n    for i in range(n + 1):\n        if i % 2 == 0:\n            a[i] = -a[i]\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    ans = a[n]\n    if n % 2 == 0:\n        for i in range(1, n + 1, 2):\n            val = a[i - 1] + -(a[n] - a[i - 1])\n            ans = max(ans, val)\n        for i in range(2, n + 1, 2):\n            val = a[i] + -(a[n] - a[i])\n            ans = max(ans, val)\n    else:\n        for i in range(1, n + 1, 2):\n            val = a[i] + -(a[n] - a[i])\n            ans = max(ans, val)\n        for i in range(2, n + 1, 2):\n            val = a[i - 1] + -(a[n] - a[i - 1])\n            ans = max(ans, val)\n    print(ans)", "from sys import stdin, stdout\nfrom collections import Counter\nnmbr = lambda : int(input())\nlst = lambda : list(map(int, input().split()))\nfor _ in range(nmbr()):\n    n = nmbr()\n    a = lst()\n    pre = [0] * n\n    pre[0] = a[0]\n    for i in range(n):\n        if i & 1:\n            pre[i] = pre[i - 1] - a[i]\n        else:\n            pre[i] = pre[i - 1] + a[i]\n    suf = [0] * n\n    if n - 1 & 1:\n        suf[-1] = -a[-1]\n    else:\n        suf[-1] = a[-1]\n    for i in range(n - 2, -1, -1):\n        if i & 1:\n            suf[i] = suf[i + 1] - a[i]\n        else:\n            suf[i] = suf[i + 1] + a[i]\n    if n & 1:\n        ans = pre[-1]\n        for i in range(n):\n            left = right = 0\n            if i & 1:\n                if i - 1 >= 0:\n                    left = pre[i - 1]\n                right = suf[i]\n                ans = max(ans, left - right)\n    else:\n        ans = pre[-1]\n        for i in range(n):\n            left = right = 0\n            if i & 1 == 0:\n                if i - 1 >= 0:\n                    left = pre[i - 1]\n                right = suf[i]\n                ans = max(ans, left - right)\n    print(ans)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    n = inp()\n    l = li()\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += l[i]\n        else:\n            ans -= l[i]\n    s = 0\n    cur = ans\n    for i in range(n):\n        if i % 2 == 0:\n            x = cur - l[i]\n        else:\n            x = cur + l[i]\n        x -= s\n        if n % 2 == 0:\n            ans = max(ans, s - x - l[i])\n        else:\n            ans = max(ans, s - x + l[i])\n        if i % 2 == 0:\n            s += l[i]\n        else:\n            s -= l[i]\n    pr(ans)\nfor _ in range(inp()):\n    solve()", "import sys\nimport math\nimport random\nimport heapq\ninput = sys.stdin.readline\n\ndef pow(a, n, m):\n    if n == 0:\n        return 1\n    x = pow(a, n // 2, m)\n    if n % 2 == 0:\n        return x * x % m\n    else:\n        return x * x * a % m\n\ndef gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef bs(arr, le, ri):\n    l = 0\n    arr.sort()\n    r = len(arr) - 1\n    ans = 10000000\n    while l <= r:\n        m = (l + r) // 2\n        if arr[m] >= le and arr[m] <= ri:\n            ans = arr[m]\n            r = m - 1\n        elif arr[m] < le:\n            l = m + 1\n        else:\n            r = m - 1\n    return ans\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    for i in range(n):\n        if i % 2 == 0:\n            ans += a[i]\n        else:\n            ans -= a[i]\n    an = 0\n    c = 0\n    for i in range(n - 2, -1, -2):\n        if i % 2 == 0:\n            c += a[i] - a[i + 1]\n        else:\n            c -= a[i] - a[i + 1]\n        an = min(an, c)\n    print(ans - 2 * an)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (pos, neg) = ([0] * (n + 1), [0] * (n + 1))\n    for i in range(n - 1, -1, -1):\n        if i % 2 == 0:\n            pos[i] = pos[i + 1] + a[i]\n            neg[i] = neg[i + 1]\n        else:\n            pos[i] = pos[i + 1]\n            neg[i] = neg[i + 1] + a[i]\n    ans = pos[0] - neg[0]\n    fans = pos[0] - neg[0]\n    if n % 2 == 0:\n        for i in range(0, n, 2):\n            temp = ans - 2 * pos[i] + 2 * neg[i]\n            fans = max(fans, temp)\n    else:\n        for i in range(1, n, 2):\n            temp = ans - 2 * pos[i] + 2 * neg[i]\n            fans = max(fans, temp)\n    print(fans)"]