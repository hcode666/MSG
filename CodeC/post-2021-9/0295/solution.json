["for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = map(int, input().split())\n    a1 = min(a)\n    ans = x // a1\n    if x % a1 != 0:\n        ans += 1\n    print(max(ans, n))", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, x) = IP()\n    l = I()\n    m = min(l)\n    res = x // m\n    if x % m:\n        res += 1\n    return max(res, n)\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, x) = IP()\n    l = I()\n    m = min(l)\n    res = x // m\n    if x % m:\n        res += 1\n    return max(res, n)\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, x) = IP()\n    l = I()\n    m = min(l)\n    res = x // m\n    if x % m:\n        res += 1\n    return max(res, n)\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, x) = IP()\n    l = I()\n    m = min(l)\n    res = x // m\n    if x % m:\n        res += 1\n    return max(res, n)\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, x) = IP()\n    l = I()\n    m = min(l)\n    res = x // m\n    if x % m:\n        res += 1\n    return max(res, n)\nfor _ in range(IN()):\n    print(f())", "n = int(input())\nwhile n:\n    n -= 1\n    (N, x) = map(int, input().split())\n    l = [int(k) for k in input().split()]\n    mini = min(l)\n    a = x // mini\n    if x % mini != 0:\n        a += 1\n    print(max(a, N))", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = map(int, input().split())\n    a1 = min(a)\n    ans = x // a1\n    if x % a1 != 0:\n        ans += 1\n    print(max(ans, n))", "import math\nt = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    mn = min(l)\n    mn = math.ceil(x / mn)\n    print(max(mn, n))", "import sys, threading\nimport math\nfrom os import path\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom functools import cmp_to_key\nimport heapq\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef solve(t):\n    (N, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = max(N, math.ceil(X / min(A)))\n    return ans\n\ndef main():\n    t = 1\n    if path.exists('/Users/nitishkumar/Documents/Template_Codes/Python/CP/Codechef/input.txt'):\n        sys.stdin = open('/Users/nitishkumar/Documents/Template_Codes/Python/CP/Codechef/input.txt', 'r')\n        sys.stdout = open('/Users/nitishkumar/Documents/Template_Codes/Python/CP/Codechef/output.txt', 'w')\n    sys.setrecursionlimit(10 ** 5)\n    t = int(input())\n    for i in range(t):\n        z = solve(i + 1)\n        print(z)\nmain()", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = map(int, input().split())\n    a1 = min(a)\n    ans = x // a1\n    if x % a1 != 0:\n        ans += 1\n    print(max(ans, n))", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = map(int, input().split())\n    a1 = min(a)\n    ans = x // a1\n    if x % a1 != 0:\n        ans += 1\n    print(max(ans, n))", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = map(int, input().split())\n    a1 = min(a)\n    ans = x // a1\n    if x % a1 != 0:\n        ans += 1\n    print(max(ans, n))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = map(int, input().split())\n    a1 = min(a)\n    ans = x // a1\n    if x % a1 != 0:\n        ans += 1\n    print(max(ans, n))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = map(int, input().split())\n    a1 = min(a)\n    ans = x // a1\n    if x % a1 != 0:\n        ans += 1\n    print(max(ans, n))", "import math\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    a = min(arr)\n    print(max(n, math.ceil(x / a)))", "from math import ceil\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    print(max(ceil(m / min(a)), n))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    minimum_time = math.ceil(x / min(arr))\n    print(max(minimum_time, n))", "import math\ninps = int(input())\nfor i in range(inps):\n    inp1 = input().split(' ')\n    inp2 = input().split(' ')\n    shops = int(inp1[0])\n    admins = int(inp1[1])\n    capacity = []\n    for i in inp2:\n        capacity.append(int(i))\n    print(max(shops, math.ceil(admins / min(capacity))))", "import math\ninps = int(input())\nfor i in range(inps):\n    inp1 = input().split(' ')\n    inp2 = input().split(' ')\n    shops = int(inp1[0])\n    admins = int(inp1[1])\n    capacity = []\n    for i in inp2:\n        capacity.append(int(i))\n    print(max(shops, math.ceil(admins / min(capacity))))", "from math import gcd, sqrt, ceil, floor, log\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(10000000.0) + 9\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\nenum = lambda itr, start: enumerate(itr, start)\n\ndef toposort(graph, n):\n    degree = [0] * n\n    for node in graph:\n        for adj in graph[node]:\n            degree[adj] += 1\n    bfs_queue = [node for node in range(n) if not degree[node]]\n    for node in bfs_queue:\n        for adj in graph[node]:\n            degree[adj] -= 1\n            if not degree[adj]:\n                bfs_queue.append(adj)\n    return (bfs_queue, degree)\n\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for adj in graph[node]:\n        if adj in visited:\n            continue\n        dfs(graph, adj, visited)\n\ndef seive(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n    return is_prime[n]\n\ndef bin_pow(x, y):\n    if y == 0:\n        return 1\n    res = bin_pow(x, y >> 1)\n    if y & 1 == 0:\n        return res * res\n    return x * res * res\n\ndef solve(*args, **kwargs):\n    (n, k, arr) = args\n    min_ = min(arr)\n    time = k // min_ if k % min_ == 0 else k // min_ + 1\n    return max(time, n)\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        arg2 = inp_vars(int, SPACE)\n        arg3 = inp_vars(int, SPACE)\n        res = solve(*(*arg2, arg3))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep=SPACE)\n        else:\n            print(res)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    mn = min(arr)\n    if x % mn == 0:\n        ans = x // mn\n    else:\n        ans = x // mn + 1\n    print(max(ans, n))", "import math as mt\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    m = min(a)\n    print(max(n, mt.ceil(k / m)))", "import math\nT = int(input())\nfor i in range(T):\n    (n, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    min_element = min(A)\n    print(max(math.ceil(x / min_element), n))", "import math\nT = int(input())\nfor i in range(T):\n    (n, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    min_element = min(A)\n    print(max(math.ceil(x / min_element), n))", "t = int(input())\nwhile t > 0:\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    t -= 1\n    a = min(l)\n    b = x / a\n    if b % 1 == 0:\n        b = int(b)\n    else:\n        b = int(b) + 1\n    if b > n:\n        print(b)\n    else:\n        print(n)", "import math\nT = int(input())\nfor i in range(T):\n    (n, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    min_element = min(A)\n    print(max(math.ceil(x / min_element), n))", "import math\nT = int(input())\nfor i in range(T):\n    (n, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    min_element = min(A)\n    print(max(math.ceil(x / min_element), n))", "import math\nT = int(input())\nfor i in range(T):\n    (n, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    min_element = min(A)\n    print(max(math.ceil(x / min_element), n))", "import math\nT = int(input())\nfor i in range(T):\n    (n, x) = map(int, input().split())\n    A = list(map(int, input().split()))\n    min_element = min(A)\n    print(max(math.ceil(x / min_element), n))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(max(math.ceil(c / min(arr)), n))", "import math\ntry:\n    for _ in range(int(input())):\n        (n, x) = list(map(int, input().split()))\n        arr = list(map(int, input().split()))\n        mn = min(arr)\n        ans = math.ceil(x / mn)\n        print(max(n, ans))\nexcept:\n    pass", "t = int(input())\nimport math\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    c_o_s = list(map(int, input().split()))\n    m = min(c_o_s)\n    time = math.ceil(x / m)\n    print(max(time, n))", "import math\nt = int(input())\nfor tc in range(t):\n    (n, x) = map(int, input().split())\n    ans = n\n    a = list(map(int, input().split()))\n    m = min(a)\n    ans = max(ans, math.ceil(x / m))\n    print(ans)", "test = int(input())\nfor i in range(test):\n    (n, x) = map(int, input().split())\n    array = list(map(int, input().split()))\n    array.sort()\n    maa = array[0]\n    answer = x // maa + (x % maa != 0)\n    if n >= answer:\n        print(n)\n    else:\n        print(answer)", "import math\n\ndef sol():\n    (N, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    x = min(A)\n    y = math.ceil(X / x)\n    print(max(N, y))\nfor _ in range(int(input())):\n    sol()", "for T in range(int(input())):\n    (N, X) = map(int, input().split())\n    a = list(map(int, input().split()))\n    minn = min(a)\n    ans1 = N\n    ans2 = X // minn if X % minn == 0 else X // minn + 1\n    ans = max(ans1, ans2)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, p) = map(int, input().split())\n    ans = n\n    a = list(map(int, input().split()))\n    m = min(a)\n    ans = max(ans, math.ceil(p / m))\n    print(ans)", "from math import ceil\nfor _ in range(int(input())):\n    (n, x) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    print(max(ceil(x / min(arr)), n))", "import math\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sm = min(arr)\n    res = math.ceil(x / sm)\n    print(max(res, n))", "t = int(input())\n\ndef ceil(a, b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\nwhile t:\n    t -= 1\n    (n, x) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    res = ceil(x, min(ls))\n    print(max(res, n))", "import math\nT = int(input())\nfor _ in range(T):\n    (N, X) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    val = max(N, math.ceil(X / min(lst)))\n    print(val)", "import math\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    m = min(lst)\n    ans = math.ceil(x / m)\n    print(max(ans, n))", "import math\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    Min = (1 << 32) - 1\n    for ele in map(int, input().split()):\n        if ele < Min:\n            Min = ele\n    if Min < x:\n        ans = math.ceil(x / Min)\n        if ans < n:\n            ans = n\n    else:\n        ans = n\n    print(ans)", "for _ in range(int(input())):\n    (N, X) = map(int, input().split())\n    l = list(map(int, input().split()))\n    min_ = min(l)\n    print(max(X // min_ + (X % min_ != 0), N))", "import math\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    print(max(n, math.ceil(x / min(map(int, input().split())))))", "import math\nfor i in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    p = min(l)\n    s = max(a, math.ceil(b / p))\n    print(s)", "def minimum_time_required(activity, n, x):\n    min_capacity = min(capacity)\n    if x % min_capacity == 0:\n        result = x / min_capacity\n    else:\n        result = x / min_capacity + 1\n    return max(result, n)\nt = int(input())\nwhile t:\n    n_and_x = list(map(int, input().split()))\n    n = n_and_x[0]\n    x = n_and_x[1]\n    capacity = list(map(int, input().split()))\n    print(int(minimum_time_required(capacity, n, x)))\n    t = t - 1", "def minimum_time_required(capacity, n, x):\n    min_capacity = min(capacity)\n    if x % min_capacity == 0:\n        res = x / min_capacity\n    else:\n        res = x / min_capacity + 1\n    return max(res, n)\nt = int(input())\nwhile t:\n    n_and_x = list(map(int, input().split()))\n    n = n_and_x[0]\n    x = n_and_x[1]\n    capacity = list(map(int, input().split()))\n    print(int(minimum_time_required(capacity, n, x)))\n    t = t - 1", "import sys\nimport math\ninput = sys.stdin.readline\nT = int(input())\nfor j in range(T):\n    (N, X) = map(int, input().split())\n    A_i = list(set(map(int, input().split())))\n    ai = min(A_i)\n    r = math.ceil(X / ai)\n    print(max(N, r))", "import math\nfor i in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = 0\n    l = sorted(l)\n    a = max(l)\n    b = min(l)\n    print(max(n, math.ceil(x / b)))", "import math\n\ndef sol():\n    (N, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    x = min(A)\n    y = math.ceil(X / x)\n    print(max(N, y))\nfor _ in range(int(input())):\n    sol()", "import math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    minn = min(l)\n    print(max(math.ceil(m / minn), n))", "for t in range(int(input())):\n    (n, x) = map(int, input().split())\n    A = [int(i) for i in input().split()]\n    if x <= n or x <= min(A):\n        ans = n\n    else:\n        ans = x / min(A)\n        if ans != int(ans):\n            ans = int(ans) + 1\n        ans = int(ans)\n    print(max(n, ans))", "import math\n\ndef Haptprogram():\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mini = math.ceil(float(x) / min(a))\n    print(max(mini, n))\nt = int(input())\nwhile t > 0:\n    Haptprogram()\n    t = t - 1", "import math\nt = int(input())\nfor _ in range(t):\n    (n, x) = [int(a) for a in input().split()]\n    arr = [int(a) for a in input().split()]\n    print(max(n, math.ceil(x / min(arr))))", "test = int(input())\nwhile test:\n    (n, x) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    print(max((x - 1) // min(a) + 1, n))\n    test -= 1", "t = int(input())\nimport math\nfor i in range(t):\n    (n, x) = map(int, input().split(' '))\n    s = input()\n    l1 = list(map(int, s.split(' ')))\n    value = max(n, math.ceil(x / min(l1)))\n    print(value)", "t = int(input())\nimport math\nfor i in range(t):\n    (n, x) = map(int, input().split(' '))\n    s = input()\n    l1 = list(map(int, s.split(' ')))\n    value = max(n, math.ceil(x / min(l1)))\n    print(value)", "t = int(input())\nimport math\nfor i in range(t):\n    (n, x) = map(int, input().split(' '))\n    s = input()\n    l1 = list(map(int, s.split(' ')))\n    value = max(n, math.ceil(x / min(l1)))\n    print(value)", "t = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    res = 0\n    if x % min(a) == 0:\n        res = x // min(a)\n    else:\n        res = x // min(a) + 1\n    print(max(n, res))", "import math\nz = int(input())\nfor i in range(z):\n    (shop, admin) = list(map(int, input().split()))\n    cap = list(map(int, input().split()))\n    x = min(cap)\n    y = math.ceil(admin / x)\n    print(max(shop, y))", "import math as m\nk = int(input())\nwhile k > 0:\n    k -= 1\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    mn = min(l)\n    print(max(n, m.ceil(x / mn)))", "import math\nfor i in range(int(input())):\n    (n, x) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    ai = min(arr)\n    A = math.ceil(x / ai)\n    print(max(n, A))", "import math\nt = int(input())\nwhile t > 0:\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    m = min(arr)\n    ans = math.ceil(x / m)\n    print(max(n, ans))\n    t -= 1", "def ubounddiv(n, m):\n    if n % m == 0:\n        return int(n / m)\n    else:\n        return int(n / m + 1)\nt = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    tmp = list(input().split())\n    lst = [int(v) for v in tmp]\n    z = ubounddiv(x, min(lst))\n    print(max(n, z))", "def ubounddiv(n, m):\n    if n % m == 0:\n        return int(n / m)\n    else:\n        return int(n / m + 1)\nt = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    tmp = list(input().split())\n    lst = [int(v) for v in tmp]\n    z = ubounddiv(x, min(lst))\n    print(max(n, z))", "try:\n    import math\n    t = int(input())\n    for _ in range(t):\n        (n, x) = map(int, input().split())\n        arr = map(int, input().split())\n        minn = min(arr)\n        ans = math.ceil(x / minn)\n        print(max(n, ans))\nexcept:\n    pass", "import math\nfor _ in range(int(input())):\n    (N, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    print(max(N, math.ceil(X / min(A))))", "def p():\n    (n, x) = map(int, input().split())\n    z = min(map(int, input().split()))\n    m = max(n, x // z + (x % z != 0))\n    print(m)\nt = int(input())\nwhile t:\n    t -= 1\n    p()", "import math\nT = int(input())\nfor i in range(T):\n    (N, X) = map(int, input().split())\n    a = min([int(i) for i in input().split()])\n    time = max(N, math.ceil(X / a))\n    print(time)", "import math\n\ndef ans(arr, x):\n    return max(math.ceil(x / min(arr)), len(arr))\nfor _ in range(int(input())):\n    (N, X) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    print(ans(arr, X))", "import math\n\ndef solve(arr, n, x):\n    mini = min(arr)\n    answer = math.ceil(x / mini)\n    return max(n, answer)\nt = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    print(solve(arr, n, x))", "import math\nfor _ in range(int(input())):\n    (n, x) = input().split()\n    n = int(n)\n    x = int(x)\n    l = list(map(int, input().split()))\n    m = x\n    for i in l:\n        if i < m:\n            m = i\n    m = math.ceil(x / m)\n    if m > n:\n        res = m\n    else:\n        res = n\n    print(res)", "import math\nt = int(input())\nfor i in range(t):\n    (n, x) = map(int, input().split())\n    l1 = min(list(map(int, input().split())))\n    s = max(n, math.ceil(x / l1))\n    print(s)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    minimum = min(arr)\n    print(int(max(n, x / minimum + (x % minimum != 0))))", "for _ in range(int(input())):\n    (lan, chu) = map(int, input().split())\n    n = min(map(int, input().split()))\n    m = max(lan, chu // n + (chu % n != 0))\n    print(m)", "def p():\n    (n, x) = map(int, input().split())\n    z = min(map(int, input().split()))\n    m = max(n, x // z + (x % z != 0))\n    print(m)\nt = int(input())\nwhile t:\n    t -= 1\n    p()", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if min(a) * n >= x:\n        print(n)\n    else:\n        print((x + min(a) - 1) // min(a))", "import math\nT = int(input())\nfor a in range(0, T):\n    (N, X) = map(int, input().split())\n    b = [int(n) for n in input().split()]\n    c = min(b)\n    if X % c == 0:\n        ans = max(N, math.ceil(X // c))\n    else:\n        ans = max(N, math.ceil(X // c) + 1)\n    print(ans)", "import sys\ninp = sys.stdin.readline\nfor _ in range(int(inp())):\n    (n, x) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    m = min(a)\n    print(max(n, (x + m - 1) // m))", "import sys\nimport bisect\ninp = sys.stdin.readline\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nfor _ in range(int(inp())):\n    (n, x) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    m = min(a)\n    print(max(n, (x + m - 1) // m))", "import math\nfor _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    mini = min(l)\n    print(max(math.ceil(x / mini), n))", "import math\nt = int(input())\nfor tc in range(t):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mini = min(arr)\n    print(max(math.ceil(x / mini), n))", "import math\nT = int(input())\nfor tc in range(T):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sm = min(arr)\n    ans = math.ceil(x / sm)\n    ans = max(ans, n)\n    print(ans)", "import math\n\ndef solve():\n    (n, x) = (int(i) for i in input().split())\n    a = [int(i) for i in input().split()]\n    minimum = min(a)\n    num_groups = math.ceil(x / minimum)\n    print(max(n, num_groups))\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        solve()\nmain()", "import math\nT = int(input())\nfor t in range(1, T + 1):\n    inp = input().split()\n    N = int(inp[0])\n    X = int(inp[1])\n    A = list(map(int, input().split()))\n    mina = min(A)\n    time_taken = max(N, math.ceil(X / mina))\n    print(time_taken)", "import math\nfor _ in range(int(input())):\n    (nshops, nadmins) = list(map(int, input().split()))\n    shopsCapa = list(map(int, input().split(' ')))\n    ans = min(shopsCapa)\n    print(max(nshops, math.floor((nadmins + ans - 1) / ans)))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    minn = min(arr)\n    tmp = x // minn if x % minn == 0 else x // minn + 1\n    print(max(tmp, n))", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    minn = min(arr)\n    tmp = x // minn if x % minn == 0 else x // minn + 1\n    print(max(tmp, n))", "t = int(input())\nimport math\nfor i in range(t):\n    (n, x) = map(int, input().split(' '))\n    s = input()\n    l1 = list(map(int, s.split(' ')))\n    value = max(n, math.ceil(x / min(l1)))\n    print(value)", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = min(map(int, input().split()))\n    print(max(n, ceil(k / s)))", "from math import ceil\nfor _ in range(int(input())):\n    (N, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    M = min(A)\n    print(max(N, ceil(X / M)))", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = min(a)\n    ans = ceil(x / m)\n    print(max(ans, n))", "import math\nt = int(input())\nans = []\nfor i in range(t):\n    a = input().split()\n    n = int(a[0])\n    x = int(a[1])\n    a = input().split()\n    for j in range(n):\n        a[j] = int(a[j])\n    min_hr = int(math.ceil(x / min(a)))\n    k = max(min_hr, n)\n    ans.append(k)\nif t == 1:\n    print(ans[0], end='')\nelse:\n    for i in range(t - 1):\n        print(ans[i])\n    print(ans[i + 1], end='')", "for i in range(int(input())):\n    (n, x) = map(int, input().split())\n    a = min(map(int, input().split()))\n    print(max(n, x // a + (x % a != 0)))", "import math\ntestcase = int(input())\nfor _ in range(testcase):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    print(max(math.ceil(x / min(l)), n))"]