["for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    m = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            m += 1\n    if n - m & 1:\n        print(0)\n        continue\n    mod = 10 ** 9 + 7\n    ans = pow(2, m, mod)\n    nr = 1\n    dr = 1\n    for i in range(1, n - m + 1):\n        nr = nr * i % mod\n    for i in range(1, (n - m) // 2 + 1):\n        dr = dr * i % mod\n    for i in range(1, (n - m) // 2 + 1):\n        dr = dr * i % mod\n    dr = pow(dr, -1, mod)\n    print(ans * nr * dr % mod)", "import math\nmod = 1000000007\n\ndef fact(n):\n    ans = 1\n    for i in range(2, n + 1):\n        ans = ans * i % mod\n    return ans\n\ndef modInverse(b, m):\n    return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    return inv * a % m\n\ndef comb(n, k):\n    return modDivide(fact(n), fact(k) * fact(n - k), mod)\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    eq = 0\n    no = 0\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            eq += 1\n        else:\n            no += 1\n    if no % 2 == 1:\n        print(0)\n    else:\n        print(pow(2, eq, mod) * comb(no, no // 2) % mod)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    n_e = 0\n    n_ue = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            n_e += 1\n        else:\n            n_ue += 1\n    if n_ue % 2 == 1:\n        print(0)\n    else:\n        ans_e = pow(2, n_e, m)\n        ans_ue = 1\n        for i in range(1, n_ue // 2 + 1):\n            ans_ue = ans_ue * (n_ue - i + 1) * pow(i, -1, m)\n            ans_ue %= m\n        ans = ans_e * ans_ue % m\n        print(int(ans))", "import os\nimport sys\nfrom io import BytesIO, IOBase\nBUFSIZE = 8192\n\nclass FastIO(IOBase):\n    newlines = 0\n\n    def __init__(self, file):\n        self._fd = file.fileno()\n        self.buffer = BytesIO()\n        self.writable = 'x' in file.mode or 'r' not in file.mode\n        self.write = self.buffer.write if self.writable else None\n\n    def read(self):\n        while True:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            if not b:\n                break\n            ptr = self.buffer.tell()\n            (self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\n        self.newlines = 0\n        return self.buffer.read()\n\n    def readline(self):\n        while self.newlines == 0:\n            b = os.read(self._fd, max(os.fstat(self._fd).st_size, BUFSIZE))\n            self.newlines = b.count(b'\\n') + (not b)\n            ptr = self.buffer.tell()\n            (self.buffer.seek(0, 2), self.buffer.write(b), self.buffer.seek(ptr))\n        self.newlines -= 1\n        return self.buffer.readline()\n\n    def flush(self):\n        if self.writable:\n            os.write(self._fd, self.buffer.getvalue())\n            (self.buffer.truncate(0), self.buffer.seek(0))\n\nclass IOWrapper(IOBase):\n\n    def __init__(self, file):\n        self.buffer = FastIO(file)\n        self.flush = self.buffer.flush\n        self.writable = self.buffer.writable\n        self.write = lambda s: self.buffer.write(s.encode('ascii'))\n        self.read = lambda : self.buffer.read().decode('ascii')\n        self.readline = lambda : self.buffer.readline().decode('ascii')\nmod = 1000000007\n\ndef precompute():\n    fuck[0] = factor[0] = 1\n    for i in range(1, z):\n        fuck[i] = nu(fuck[i - 1], i)\n        factor[i] = nu(factor[i - 1], mod_inverse(i))\n\ndef nu(x, y):\n    return x % mod * (y % mod) % mod\n\ndef mod_inverse(a, m=mod):\n    return bp(a, m - 2)\nz = 200001\nfuck = [0] * z\nfactor = [0] * z\n\ndef bp(a, kya):\n    if kya == 0:\n        return 1\n    arey = bp(a, kya // 2)\n    arey = nu(arey, arey)\n    if kya % 2:\n        return nu(arey, a)\n    return arey\n\ndef ans():\n    puku = int(input())\n    A = input()\n    B = input()\n    count = 0\n    for i in range(puku):\n        if A[i] == B[i]:\n            count += 1\n    if (puku - count) % 2:\n        print(0)\n        return\n    puku -= count\n    ans = bp(2, count)\n    ans = nu(ans, nu(fuck[puku], nu(factor[puku // 2], factor[puku // 2])))\n    print(ans)\nprecompute()\nT = int(input())\nwhile T:\n    T -= 1\n    ans()", "MOD = 10 ** 9 + 7\n\ndef fact(n):\n    ans = 1\n    for i in range(2, n + 1):\n        ans = ans * i % MOD\n    return ans\n\ndef modInverse(b, m):\n    return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    return inv * a % m\n\ndef comb(n, k):\n    return modDivide(fact(n), fact(k) * fact(n - k), MOD)\nt = int(input())\nimport math\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    n_diff = 0\n    n_sim = 0\n    for (c1, c2) in zip(a, b):\n        if c1 == c2:\n            n_sim += 1\n        else:\n            n_diff += 1\n    if n_diff % 2 == 1:\n        print(0)\n    else:\n        print(pow(2, n_sim, MOD) * comb(n_diff, n_diff // 2) % MOD)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "mod = 10 ** 9 + 7\n\ndef C(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, mod - 2, mod)\n        ret %= mod\n    return ret\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    differ = 0\n    for i in range(n):\n        differ += a[i] != b[i]\n    if differ % 2 == 1:\n        print(0)\n    else:\n        print(pow(2, n - differ, mod) * C(differ, differ // 2) % mod)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "from math import comb\nmod = 10 ** 9 + 7\n\ndef c(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, -1, mod)\n        ret %= mod\n    return int(ret)\nfor i in range(int(input())):\n    s = int(input())\n    s1 = input()\n    s2 = input()\n    dif = 0\n    for j in range(s):\n        if s1[j] != s2[j]:\n            dif += 1\n    same = s - dif\n    if dif % 2 == 1:\n        ans = 0\n    else:\n        ans = c(dif, int(dif / 2)) * 2 ** same % mod\n    print(ans)", "from math import comb\nmod = 10 ** 9 + 7\n\ndef cb(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, -1, mod)\n        ret %= mod\n    return ret\nfor i in range(int(input())):\n    s = int(input())\n    s1 = input()\n    s2 = input()\n    dif = 0\n    for j in range(s):\n        if s1[j] != s2[j]:\n            dif += 1\n    same = s - dif\n    if dif % 2 == 1:\n        ans = 0\n    else:\n        ans = cb(dif, int(dif / 2)) * 2 ** same % mod\n    print(ans)", "from math import comb\nmod = 10 ** 9 + 7\n\ndef cb(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, mod - 2, mod)\n        ret %= mod\n    return ret\nfor i in range(int(input())):\n    s = int(input())\n    s1 = input()\n    s2 = input()\n    dif = 0\n    for j in range(s):\n        if s1[j] != s2[j]:\n            dif += 1\n    same = s - dif\n    if dif % 2 == 1:\n        ans = 0\n    else:\n        ans = cb(dif, int(dif / 2)) * 2 ** same % mod\n    print(ans)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "md = int(1000000000.0) + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "import math\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(n - r)\n\ndef powermodulo(a, b, mod):\n    res = 1 % mod\n    while b > 0:\n        if b & 1 != 0:\n            res = res % mod * a % mod % mod\n        a = a % mod * a % mod % mod\n        b = b >> 1\n    return res\ncase = int(input())\nmd = 1000000007\nfor _ in range(case):\n    n = int(input())\n    a = input()\n    b = input()\n    count = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            count += 1\n    res = 0\n    if count % 2 == 0:\n        same = n - count\n        ans = powermodulo(2, same, md)\n        res = ans % md * nCr(count, count // 2) % md % md\n    print(res)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "import math\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    diff = 0\n    same = 0\n    for i in range(n):\n        if s1[i] != s2[i]:\n            diff += 1\n        else:\n            same += 1\n    if diff % 2 != 0:\n        print(0)\n    else:\n        first = 2 ** same % 1000000007\n        second = math.factorial(diff) // (math.factorial(diff // 2) * math.factorial(diff // 2))\n        ans = first * second % 1000000007\n        print(ans)", "from math import factorial\n\ndef combination(n, r):\n    num = factorial(n)\n    den = factorial(n - r) * factorial(r)\n    return num // den\n\ndef solve(a, b):\n    not_matching = 0\n    matching = 0\n    for x in range(len(a)):\n        if a[x] == b[x]:\n            matching += 1\n        else:\n            not_matching += 1\n    if not_matching % 2 == 0 and not_matching != 0:\n        return combination(not_matching, not_matching // 2) * 2 ** matching\n    elif not_matching == 0:\n        return 2 ** matching\n    else:\n        return 0\nout = []\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    out.append(solve(a, b))\nfor var in out:\n    print(var % 1000000007)", "from math import factorial\n\ndef combination(n, r):\n    num = factorial(n)\n    den = factorial(n - r) * factorial(r)\n    return num // den\n\ndef solve(a, b):\n    not_matching = 0\n    matching = 0\n    for x in range(len(a)):\n        if a[x] == b[x]:\n            matching += 1\n        else:\n            not_matching += 1\n    if not_matching % 2 == 0 and not_matching != 0:\n        return combination(not_matching, not_matching // 2) * 2 ** matching\n    elif not_matching == 0:\n        return 2 ** matching\n    else:\n        return 0\nout = []\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    out.append(solve(a, b))\nfor var in out:\n    print(var % 1000000007)", "def fact(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i % 1000000007\n    return ans\n\ndef ncr(n, r):\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        if i <= n // 2:\n            a *= i\n        else:\n            b *= i\n    return b // a\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    d = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            d += 1\n    s = n - d\n    if d % 2 == 1:\n        print('0')\n    else:\n        ans = 2 ** s % (10 ** 9 + 7)\n        ans = ans * (ncr(d, d // 2) % (10 ** 9 + 7)) % (10 ** 9 + 7)\n        print(int(ans) % (10 ** 9 + 7))", "modn = 1000000007\nfactorials = [0, 1]\nfor i in range(2, 200001):\n    factorials.append(factorials[i - 1] * i % modn)\nfor _ in range(int(input())):\n    N = int(input())\n    A = input()\n    B = input()\n    same = 0\n    for i in range(N):\n        if A[i] == B[i]:\n            same += 1\n    diff = N - same\n    if diff % 2 == 1:\n        print('0')\n    else:\n        if diff == 0:\n            answ = 1\n        else:\n            halfDiff = diff // 2\n            answ = factorials[diff]\n            multinv = pow(factorials[halfDiff], modn - 2, modn)\n            answ = answ * multinv % modn\n            answ = answ * multinv % modn\n        answ = answ * pow(2, same, modn) % modn\n        print(answ)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    NnN = 0\n    NnN1 = 0\n    AmmYvT = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            NnN += 1\n        else:\n            NnN1 += 1\n    if NnN1 % 2 == 1:\n        print(0)\n    else:\n        NnN2 = pow(2, NnN, m)\n        NnN3 = 1\n        for i in range(1, NnN1 // 2 + 1):\n            NnN3 = NnN3 * (NnN1 - i + 1) * pow(i, -1, m)\n            NnN3 %= m\n        ans = NnN2 * NnN3 % m\n        print(int(ans))", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    n_e = 0\n    n_ue = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            n_e += 1\n        else:\n            n_ue += 1\n    if n_ue % 2 == 1:\n        print(0)\n    else:\n        ans_e = pow(2, n_e, m)\n        ans_ue = 1\n        for i in range(1, n_ue // 2 + 1):\n            ans_ue = ans_ue * (n_ue - i + 1) * pow(i, -1, m)\n            ans_ue %= m\n        ans = ans_e * ans_ue % m\n        print(int(ans))", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    n_e = 0\n    n_ue = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            n_e += 1\n        else:\n            n_ue += 1\n    if n_ue % 2 == 1:\n        print(0)\n    else:\n        ans_e = pow(2, n_e, m)\n        ans_ue = 1\n        for i in range(1, n_ue // 2 + 1):\n            ans_ue = ans_ue * (n_ue - i + 1) * pow(i, -1, m)\n            ans_ue %= m\n        ans = ans_e * ans_ue % m\n        print(int(ans))", "def fact(n):\n    d = 1\n    m = 1\n    k = n // 2\n    for i in range(k):\n        d = d * (n - i) % (10 ** 9 + 7)\n        d = d * pow(i + 1, -1, 10 ** 9 + 7) % (10 ** 9 + 7)\n    return d\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    c = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            c = c + 1\n    k = n - c\n    if (n - c) % 2 == 1:\n        print('0')\n    else:\n        ans = pow(2, c, 10 ** 9 + 7) * fact(k) % (10 ** 9 + 7)\n        print(ans)", "def fact(n):\n    d = 1\n    m = 1\n    k = n // 2\n    for i in range(k):\n        d = d * (n - i) % (10 ** 9 + 7)\n        d = d * pow(i + 1, -1, 10 ** 9 + 7) % (10 ** 9 + 7)\n    return d // m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    c = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            c = c + 1\n    k = n - c\n    if (n - c) % 2 == 1:\n        print('0')\n    else:\n        ans = pow(2, c, 10 ** 9 + 7) * fact(k) % (10 ** 9 + 7)\n        print(ans)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    n_e = 0\n    n_ue = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            n_e += 1\n        else:\n            n_ue += 1\n    if n_ue % 2 == 1:\n        print(0)\n    else:\n        ans_e = pow(2, n_e, m)\n        ans_ue = 1\n        for i in range(1, n_ue // 2 + 1):\n            ans_ue = ans_ue * (n_ue - i + 1) * pow(i, m - 2, m)\n            ans_ue %= m\n        ans = ans_e * ans_ue % m\n        print(ans)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    n_e = 0\n    n_ue = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            n_e += 1\n        else:\n            n_ue += 1\n    if n_ue % 2 == 1:\n        print(0)\n    else:\n        ans_e = pow(2, n_e, m)\n        ans_ue = 1\n        for i in range(1, n_ue // 2 + 1):\n            ans_ue = ans_ue * (n_ue - i + 1) * pow(i, m - 2, m)\n            ans_ue %= m\n        ans = ans_e * ans_ue % m\n        print(ans)", "def fact(n):\n    d = 1\n    m = 1\n    k = n // 2\n    for i in range(k):\n        d = d * (n - i) % (10 ** 9 + 7)\n        d = d * pow(i + 1, -1, 10 ** 9 + 7) % (10 ** 9 + 7)\n    return d // m\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    c = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            c = c + 1\n    k = n - c\n    if (n - c) % 2 == 1:\n        print('0')\n    else:\n        ans = pow(2, c, 10 ** 9 + 7) * fact(k) % (10 ** 9 + 7)\n        print(ans)", "import math\nt = int(input())\np = 10 ** 9 + 7\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    if a == b:\n        print(2 ** n % p)\n    else:\n        unc = 0\n        for j in range(n):\n            if a[j] != b[j]:\n                unc += 1\n        if unc % 2 == 1:\n            print(0)\n        else:\n            print(math.factorial(unc) // math.factorial(unc // 2) ** 2 * 2 ** (n - unc) % p)", "def fact(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i % 1000000007\n    return ans\n\ndef ncr(n, r):\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        if i <= n // 2:\n            a *= i\n        else:\n            b *= i\n    return b // a\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    d = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            d += 1\n    s = n - d\n    if d % 2 == 1:\n        print('0')\n    else:\n        ans = 2 ** s % (10 ** 9 + 7)\n        ans = ans * (ncr(d, d // 2) % (10 ** 9 + 7)) % (10 ** 9 + 7)\n        print(int(ans) % (10 ** 9 + 7))", "def fact(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i % 1000000007\n    return ans\n\ndef ncr(n, r):\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        if i <= n // 2:\n            a *= i\n        else:\n            b *= i\n    return b // a\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    d = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            d += 1\n    s = n - d\n    if d % 2 == 1:\n        print('0')\n    else:\n        ans = 2 ** s % (10 ** 9 + 7)\n        ans = ans * (ncr(d, d // 2) % (10 ** 9 + 7)) % (10 ** 9 + 7)\n        print(int(ans) % (10 ** 9 + 7))", "def fact(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i % 1000000007\n    return ans\n\ndef ncr(n, r):\n    a = 1\n    b = 1\n    for i in range(1, n + 1):\n        if i <= n // 2:\n            a *= i\n        else:\n            b *= i\n    return b // a\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    d = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            d += 1\n    s = n - d\n    if d % 2 == 1:\n        print('0')\n    else:\n        ans = 2 ** s % (10 ** 9 + 7)\n        ans = ans * (ncr(d, d // 2) % (10 ** 9 + 7)) % (10 ** 9 + 7)\n        print(int(ans) % (10 ** 9 + 7))", "import math\n\ndef modInverse(b, m):\n    g = math.gcd(b, m)\n    if g != 1:\n        return -1\n    else:\n        return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    if inv == -1:\n        return -1\n    else:\n        return inv * a % m\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    s = 0\n    d = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            s += 1\n        else:\n            d += 1\n    if d % 2 == 1:\n        print(0)\n        continue\n    ans = 1\n    denom = 1\n    dd = d // 2\n    for i in range(dd):\n        ans = ans * (d - i) % 1000000007\n        denom = denom * (i + 1)\n    ans = modDivide(ans, denom, 1000000007)\n    ans2 = pow(2, s, 1000000007)\n    ans = ans * ans2 % 1000000007\n    print(ans)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    n_e = 0\n    n_ue = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            n_e += 1\n        else:\n            n_ue += 1\n    if n_ue % 2 == 1:\n        print(0)\n    else:\n        ans_e = pow(2, n_e, m)\n        ans_ue = 1\n        for i in range(1, n_ue // 2 + 1):\n            ans_ue = ans_ue * (n_ue - i + 1) * pow(i, m - 2, m)\n            ans_ue %= m\n        ans = ans_e * ans_ue % m\n        print(ans)", "M = 1000000007\n\ndef pow(a, n, m=1000000007):\n    ans = 1\n    while n:\n        if n & 1:\n            ans = ans * a % m\n        a = a * a % m\n        n >>= 1\n    return ans\nfact = [1, 1]\nfor i in range(2, 200001):\n    fact.append(fact[-1] * i % M)\nfor t in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    s = d = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            s += 1\n        else:\n            d += 1\n    if d & 1:\n        print(0)\n        continue\n    ans = (1 << s) % M * (fact[d] % M) * (pow(fact[d // 2] % M, M - 2) % M) ** 2 % M\n    print(int(ans))", "from math import factorial\nmod = 10 ** 9 + 7\nncr = lambda n, r: factorial(n) // (factorial(r) * factorial(n - r))\n\ndef soln(n, a, b):\n    matches = uns = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            uns += 1\n        else:\n            matches += 1\n    if uns & 1:\n        return 0\n    sems = pow(2, matches, mod)\n    return sems * (ncr(uns, uns // 2) % mod) % mod\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    print(soln(n, a, b))", "from math import factorial\nmod = 10 ** 9 + 7\nncr = lambda n, r: factorial(n) // (factorial(r) * factorial(n - r))\n\ndef soln(n, a, b):\n    matches = uns = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            uns += 1\n        else:\n            matches += 1\n    sems = pow(2, matches, mod)\n    if uns & 1:\n        return 0\n    return sems * (ncr(uns, uns // 2) % mod) % mod\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    print(soln(n, a, b))", "from math import factorial\nmod = 10 ** 9 + 7\nncr = lambda n, r: factorial(n) // (factorial(r) * factorial(n - r))\n\ndef soln(n, a, b):\n    matches = uns = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            uns += 1\n        else:\n            matches += 1\n    sems = pow(2, matches, mod)\n    if uns & 1:\n        return 0\n    return sems * (ncr(uns, uns // 2) % mod) % mod\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    print(soln(n, a, b))", "def fact(n):\n    (a, b) = (1, 1)\n    for i in range(1, n + 1):\n        if i <= n // 2:\n            a *= i\n        else:\n            b *= i\n    return b // a\nq = int(input())\nwhile q:\n    q -= 1\n    n = int(input())\n    s = input()\n    t = input()\n    (diff, same) = (0, 0)\n    for i in range(n):\n        if s[i] == t[i]:\n            same += 1\n        else:\n            diff += 1\n    if diff % 2:\n        print(0)\n        continue\n    same = (1 << same) % (10 ** 9 + 7)\n    v = fact(diff) % (10 ** 9 + 7)\n    same *= v\n    print(same % (10 ** 9 + 7))", "def fact(n):\n    (a, b) = (1, 1)\n    for i in range(1, n + 1):\n        if i <= n // 2:\n            a *= i\n        else:\n            b *= i\n    return b // a\nq = int(input())\nwhile q:\n    q -= 1\n    n = int(input())\n    s = input()\n    t = input()\n    (diff, same) = (0, 0)\n    for i in range(n):\n        if s[i] == t[i]:\n            same += 1\n        else:\n            diff += 1\n    if diff % 2:\n        print(0)\n        continue\n    same = (1 << same) % (10 ** 9 + 7)\n    v = fact(diff)\n    same *= v\n    print(same % (10 ** 9 + 7))", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "p = 10 ** 9 + 7\n\ndef bin(x, y, p):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % p\n        rv = rv * pow(i + 1, -1, p) % p\n    return rv\nfor i in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    c = 0\n    for (i, j) in zip(a, b):\n        if i == j:\n            c += 1\n    d = n - c\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, c, p) * bin(d, d // 2, p) % p)", "import math\n\ndef C(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, mod - 2, mod)\n        ret %= mod\n    return ret\n\ndef count_possibilities(n, a, b, mod):\n    differ = 0\n    for i in range(n):\n        differ += a[i] != b[i]\n    if differ % 2 == 1:\n        return 0\n    else:\n        return pow(2, n - differ, mod) * C(differ, differ // 2) % mod\nt = int(input())\nmod = 1000000007\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    print(count_possibilities(n, a, b, mod))", "from math import factorial\nmod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    same = diff = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            same += 1\n    diff = n - same\n    if diff % 2 == 1:\n        print(0)\n    else:\n        nn = diff\n        rr = diff // 2\n        fact = factorial(nn) // (factorial(nn - rr) * factorial(rr))\n        ans = 2 ** same * fact % mod\n        print(ans)", "t = int(input())\n\ndef ncr(n, r):\n    res = 1\n    for i in range(n, n - r, -1):\n        res *= i\n    d = 1\n    for i in range(r, 1, -1):\n        d *= i\n    return res // d\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    diff = 0\n    m = 10 ** 9 + 7\n    for i in range(n):\n        diff += a[i] != b[i]\n    if diff % 2:\n        print(0)\n    else:\n        print(pow(2, n - diff, m) * ncr(diff, diff // 2) % m)", "from math import factorial\nmod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    same = diff = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            same += 1\n    diff = n - same\n    if diff % 2 == 1:\n        print(0)\n    else:\n        nn = diff\n        rr = diff // 2\n        fact = factorial(nn) // (factorial(nn - rr) * factorial(rr))\n        fact %= mod\n        same %= mod\n        ans = 2 ** same * fact % mod\n        print(ans)", "from math import factorial\nmod = 10 ** 9 + 7\n\ndef C(n, r):\n    ret = factorial(n) // (factorial(n - r) * factorial(r))\n    ret %= mod\n    return ret\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    differ = 0\n    for i in range(n):\n        differ += a[i] != b[i]\n    if differ % 2 == 1:\n        print(0)\n    else:\n        print(pow(2, n - differ, mod) * C(differ, differ // 2) % mod)", "mod = 10 ** 9 + 7\n\ndef C(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, mod - 2, mod)\n        ret %= mod\n    return ret\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    differ = 0\n    for i in range(n):\n        differ += a[i] != b[i]\n    if differ % 2 == 1:\n        print(0)\n    else:\n        print(pow(2, n - differ, mod) * C(differ, differ // 2) % mod)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    not_same = 0\n    ans = 1\n    for i in range(n):\n        if a[i] != b[i]:\n            not_same += 1\n        else:\n            ans = ans * 2\n    if not_same % 2 == 0 and not_same != 0:\n        temp1 = math.factorial(not_same)\n        temp2 = math.factorial(not_same / 2)\n        ans = ans * temp1 // (temp2 * temp2)\n    if not_same % 2 != 0:\n        print(0)\n    else:\n        print(int(ans % 1000000007))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    not_same = 0\n    lar = 1000000007\n    ans = 1\n    for i in range(0, len(s1)):\n        if s1[i] == s2[i]:\n            ans = ans * 2\n        else:\n            not_same = not_same + 1\n    if not_same % 2 == 0 and not_same != 0:\n        temp1 = math.factorial(not_same)\n        temp2 = math.factorial(not_same / 2)\n        ans = ans * temp1 // (temp2 * temp2)\n    if not_same % 2 != 0:\n        print(0)\n    else:\n        print(int(ans % lar))", "import math\n\ndef binomial_coeff(n, k, mod):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, k + 1):\n        C[i] = C[i - 1] * (n - (i - 1)) % mod\n        C[i] = C[i] * pow(i, mod - 2, mod) % mod\n    return C[k]\n\ndef count_possibilities(n, a, b, mod):\n    k = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            k += 1\n    if k % 2 != 0:\n        return 0\n    C = binomial_coeff(k, k // 2, mod)\n    res = pow(2, n - k, mod)\n    res = res * C % mod\n    return res\nt = int(input())\nmod = 1000000007\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    print(count_possibilities(n, a, b, mod))", "t = int(input())\nans = []\nmod = 10 ** 9 + 7\n\ndef ncr(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, mod - 2, mod)\n        ret %= mod\n    return ret\nfor i in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    samaan = 0\n    asmaan = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            samaan += 1\n        else:\n            asmaan += 1\n    if asmaan % 2:\n        print(0)\n        continue\n    ans = pow(2, samaan, mod) * ncr(asmaan, asmaan // 2)\n    print(ans % mod)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor T in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "mod = 10 ** 9 + 7\n\ndef C(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, mod - 2, mod)\n        ret %= mod\n    return ret\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    differ = 0\n    for i in range(n):\n        differ += a[i] != b[i]\n    if differ % 2 == 1:\n        print(0)\n    else:\n        print(pow(2, n - differ, mod) * C(differ, differ // 2) % mod)", "mod = 10 ** 9 + 7\n\ndef C(n, r):\n    ret = 1\n    for i in range(1, r + 1):\n        ret = ret * (n - i + 1) * pow(i, mod - 2, mod)\n        ret %= mod\n    return ret\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    differ = 0\n    for i in range(n):\n        differ += a[i] != b[i]\n    if differ % 2 == 1:\n        print(0)\n    else:\n        print(pow(2, n - differ, mod) * C(differ, differ // 2) % mod)", "def ch(a, b):\n    ans = 0\n    for i in range(len(a)):\n        ans += a[i] != b[i]\n    return ans\nimport random as r\nmod = 10 ** 9 + 7\nfact = [1]\ne = 2 * 10 ** 5 + 1\nfor i in range(1, e):\n    fact.append(fact[-1] * i % mod)\n\ndef ncr(n):\n    a = fact[n]\n    b = fact[n // 2]\n    x = pow(b * b, mod - 2, mod)\n    return a * x % mod\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    ans = 0\n    (x, y1, y2) = (0, 0, 0)\n    for i in range(n):\n        if a[i] == b[i]:\n            x += 1\n        elif a[i] == '1':\n            y1 += 1\n        else:\n            y2 += 1\n    if (y1 + y2) % 2:\n        ans = 0\n    else:\n        ans = pow(2, x, mod)\n        x = ncr(y1 + y2)\n        ans = ans * x % mod\n    print(ans)", "import math\nt = int(input())\nmod = 10 ** 9 + 7\nwhile t:\n    t -= 1\n    n = int(input())\n    a = input()\n    b = input()\n    same = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            same += 1\n    diff = n - same\n    if diff % 2:\n        print(0)\n    else:\n        res = 2 ** same % mod\n        res *= math.factorial(diff) // math.factorial(diff // 2) ** 2\n        print(res % mod)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    arr1 = input()\n    arr2 = input()\n    cnt = 0\n    for j in range(n):\n        if arr1[j] != arr2[j]:\n            cnt += 1\n    if cnt % 2 != 0:\n        print(0)\n    else:\n        ans = 2 ** (n - cnt)\n        ans *= math.factorial(cnt) // math.factorial(cnt // 2) ** 2\n        print(ans % (10 ** 9 + 7))", "p = 10 ** 9 + 7\n\ndef bin(x, y, p):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % p\n        rv = rv * pow(i + 1, -1, p) % p\n    return rv\nfor i in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    c = 0\n    for (i, j) in zip(a, b):\n        if i == j:\n            c += 1\n    d = n - c\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, c, p) * bin(d, d // 2, p) % p)", "import math\nfor i in range(int(input())):\n    num = int(input())\n    A = input()\n    B = input()\n    count = 0\n    for j in range(num):\n        if A[j] != B[j]:\n            count += 1\n    if count % 2 != 0:\n        print(0)\n    else:\n        ans = 2 ** (num - count)\n        ans *= math.factorial(count) // math.factorial(count // 2) ** 2\n        print(ans % (10 ** 9 + 7))", "import math\nfor i in range(int(input())):\n    num = int(input())\n    A = input()\n    B = input()\n    count = 0\n    for j in range(num):\n        if A[j] != B[j]:\n            count += 1\n    if count % 2 != 0:\n        print(0)\n    else:\n        ans = 2 ** (num - count)\n        ans *= math.factorial(count) // math.factorial(count // 2) ** 2\n        print(ans % (10 ** 9 + 7))", "MOD = 10 ** 9 + 7\n\ndef ncr(n, r):\n    fact = [1] * (n + 1)\n    for i in range(1, n + 1):\n        fact[i] = fact[i - 1] * i % MOD\n    res = pow(fact[r], MOD - 2, MOD)\n    res *= pow(fact[n - r], MOD - 2, MOD)\n    res %= MOD\n    return fact[n] * res % MOD\nfor _ in range(int(input())):\n    N = int(input())\n    a = input()\n    b = input()\n    s = 0\n    d = 0\n    for i in range(N):\n        if a[i] == b[i]:\n            s += 1\n        else:\n            d += 1\n    if d & 1 == 1:\n        print(0)\n    else:\n        res = pow(2, s, MOD) * ncr(d, d // 2)\n        print(res % MOD)", "MOD = 10 ** 9 + 7\n\ndef mypow(num, p):\n    res = 1\n    while p > 0:\n        if p % 2 == 1:\n            res = res * num\n            res %= MOD\n        num = num * num % MOD\n        p >>= 1\n    return res\n\ndef modInv(num):\n    return mypow(num, MOD - 2)\n\ndef ncr(n, r):\n    fact = [1] * (n + 1)\n    for i in range(2, n + 1):\n        fact[i] = fact[i - 1] * i % MOD\n    m = modInv(fact[r])\n    inv = m * m % MOD\n    return fact[n] * inv % MOD\nfor _ in range(int(input())):\n    N = int(input())\n    a = input()\n    b = input()\n    s = 0\n    d = 0\n    for i in range(N):\n        if a[i] == b[i]:\n            s += 1\n        else:\n            d += 1\n    if d & 1 == 1:\n        print(0)\n    else:\n        res = mypow(2, s) * ncr(d, d // 2)\n        print(res % MOD)", "md = 10 ** 9 + 7\n\ndef bcm(x, y, md):\n    rv = 1\n    for i in range(y):\n        rv = rv * (x - i) % md\n        rv = rv * pow(i + 1, -1, md) % md\n    return rv\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    assert len(a) == n and len(b) == n\n    z = list(zip(a, b))\n    s = z.count(('0', '0')) + z.count(('1', '1'))\n    d = n - s\n    if d % 2 != 0:\n        print(0)\n    else:\n        print(pow(2, s, md) * bcm(d, d // 2, md) % md)", "import math\n\ndef fact(n):\n    return math.factorial(n)\n\ndef mod(t):\n    return t % 1000000007\nfor _ in range(int(input())):\n    (N, A, B) = (mod(int(input())), input(), input())\n    j = 0\n    for i in range(N):\n        if A[i] != B[i]:\n            j += 1\n    j = mod(j)\n    dd = 0\n    if mod(j) % 2 == 0:\n        dd = mod(fact(j) // fact(j // 2) ** 2)\n    print(mod(mod(2 ** (N - j)) * dd))", "fact = [1]\ninv_fact = [1]\nmod = pow(10, 9) + 7\nfor _ in range(int(input())):\n    n = int(input())\n    A = input()\n    B = input()\n    dua = 0\n    for i in range(n):\n        if A[i] == B[i]:\n            dua += 1\n    beda = n - dua\n    if beda % 2 == 1:\n        print(0)\n    else:\n        ans = pow(2, dua, mod)\n        while len(inv_fact) < 1 + (n - dua) // 2:\n            fact.append(fact[-1] * len(fact) % mod)\n            fact.append(fact[-1] * len(fact) % mod)\n            inv_fact.append(inv_fact[-1] * pow(len(inv_fact), -1, mod) % mod)\n        combi = fact[beda] * pow(inv_fact[beda // 2], 2, mod) % mod\n        ans = ans * combi % mod\n        print(ans)", "mod = 10 ** 9 + 7\n\ndef comb(n):\n    (upper, lower) = (1, 1)\n    for i in range(1, n + 1):\n        if i > n // 2:\n            upper *= i\n        else:\n            lower *= i\n    return upper // lower % mod\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    q = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            q += 1\n    if (n - q) % 2:\n        print(0)\n        continue\n    answer = (1 << q) % mod\n    answer *= comb(n - q) % mod\n    print(answer % mod)", "import math\n\ndef fact(n):\n    return math.factorial(n)\n\ndef mod(tt):\n    return tt % 1000000007\nfor _ in range(int(input())):\n    (N, A, B) = (mod(int(input())), input(), input())\n    j = 0\n    for i in range(N):\n        if A[i] != B[i]:\n            j += 1\n    j = mod(j)\n    dd = 0\n    if mod(j) % 2 == 0:\n        dd = mod(fact(j) // fact(j // 2) ** 2)\n    print(mod(mod(2 ** (N - j)) * dd))", "import sys, threading\nimport math\nfrom os import path\nfrom collections import deque, defaultdict, Counter\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom functools import cmp_to_key\nfrom random import randint\nimport heapq\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\nMAXN = 1123456\n\nclass mydict:\n\n    def __init__(self, func=lambda : 0):\n        self.random = randint(0, 1 << 32)\n        self.default = func\n        self.dict = {}\n\n    def __getitem__(self, key):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            self.dict[mykey] = self.default()\n        return self.dict[mykey]\n\n    def get(self, key, default):\n        mykey = self.random ^ key\n        if mykey not in self.dict:\n            return default\n        return self.dict[mykey]\n\n    def __setitem__(self, key, item):\n        mykey = self.random ^ key\n        self.dict[mykey] = item\n\n    def getkeys(self):\n        return [self.random ^ i for i in self.dict]\n\n    def __str__(self):\n        return f'{[(self.random ^ i, self.dict[i]) for i in self.dict]}'\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef mod(n):\n    return n % 1000000007\n\ndef power(bas, exp):\n    if exp == 0:\n        return 1\n    if exp == 1:\n        return bas\n    if exp % 2 == 0:\n        t = power(bas, exp // 2)\n        t = mod(t * t)\n        return t\n    else:\n        return mod(power(bas, exp - 1) * bas)\nfactr = []\nfactr = [1]\nfact = 1\nfor i in range(1, MAXN):\n    fact = mod(mod(fact) * mod(i))\n    factr.append(fact)\n\ndef nCr(n, r):\n    if r > n:\n        return 0\n    n1 = factr[n]\n    d1 = power(factr[r], 1000000005)\n    d2 = power(factr[n - r], 1000000005)\n    return mod(mod(n1) * mod(d1) * mod(d2))\n\ndef solve(t):\n    n = readInts()\n    s1 = readStr()\n    s2 = readStr()\n    difcnt = 0\n    ans = 1\n    for i in range(n):\n        if s1[i] == s2[i]:\n            ans = mod(mod(ans) * 2)\n        else:\n            difcnt += 1\n    if difcnt & 1:\n        print(0)\n        return\n    ans = mod(mod(ans) * mod(nCr(difcnt, difcnt // 2)))\n    print(ans)\n\ndef main():\n    t = 1\n    if path.exists('/Users/arijitbhaumik/Library/Application Support/Sublime Text/Packages/User/input.txt'):\n        sys.stdin = open('/Users/arijitbhaumik/Library/Application Support/Sublime Text/Packages/User/input.txt', 'r')\n        sys.stdout = open('/Users/arijitbhaumik/Library/Application Support/Sublime Text/Packages/User/output.txt', 'w')\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "def ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\nM = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = str(input())\n    b = str(input())\n    cnt = 0\n    for (i, j) in zip(a, b):\n        if i != j:\n            cnt += 1\n    if cnt & 1:\n        print(0)\n        continue\n    ans = 2 ** (n - cnt) % M\n    ans *= ncr(cnt, cnt // 2, M)\n    print(ans % M)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    cnt = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            cnt += 1\n    if cnt % 2 != 0:\n        print(0)\n    else:\n        ans = 1\n        for i in range(n):\n            if a[i] == b[i]:\n                ans *= 2\n        ans *= math.factorial(cnt) // math.factorial(cnt // 2) ** 2\n        print(ans % 1000000007)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    cnt = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            cnt += 1\n    if cnt % 2 != 0:\n        print(0)\n    else:\n        ans = 1\n        for i in range(n):\n            if a[i] == b[i]:\n                ans *= 2\n        ans *= math.factorial(cnt) // math.factorial(cnt // 2) ** 2\n        print(ans % 1000000007)", "def fun(a, b, m):\n    s = 1\n    for i in range(b + 1, a + 1):\n        s *= i % m\n    for i in range(1, b + 1):\n        s = s * pow(i, -1, m) % m\n    return s\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    m = 1000000007\n    d = {'11': 0, '00': 0, '10': 0, '01': 0}\n    for i in range(n):\n        d[f'{a[i]}{b[i]}'] += 1\n    p = d['10'] + d['01']\n    if p % 2 == 0:\n        n = d['11'] + d['00']\n        s = pow(2, n, m)\n        s *= fun(p, p // 2, m) % m\n        print(s % m)\n    else:\n        print(0)", "import math\n\ndef nCr(n, r):\n    a = math.factorial(n)\n    b = math.factorial(r)\n    c = math.factorial(n - r)\n    b = b * c\n    a = a // b\n    a = a % 1000000007\n    return int(a)\ntest = int(input())\nfor tc in range(test):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    dif = 0\n    same = 0\n    for i in range(n):\n        if s1[i] == s2[i]:\n            same = same + 1\n        else:\n            dif = dif + 1\n    if dif % 2 == 0:\n        a = nCr(dif, dif // 2)\n        a = a % 1000000007\n        if a < 1:\n            a = 1\n        b = int(pow(2, same))\n        ans = a * b\n        ans = ans % 1000000007\n        print(ans)\n    else:\n        print(0)", "import math\nmd = 10 ** 9 + 7\n\ndef combination(m, n):\n    temp = 1\n    for i in range(m, n, -1):\n        temp = temp * i\n    return temp // math.factorial(n) % md\n\ndef solve(n, a, b):\n    temp = bin(int(a, 2) ^ int(b, 2)).count('1')\n    return pow(2, n - temp, md) * combination(temp, temp // 2) % md if temp % 2 == 0 else 0\nfor _ in range(int(input())):\n    print(solve(int(input()), input(), input()))", "mod = 10 ** 9 + 7\nimport math\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef nCr(n, r):\n    if r > n:\n        return 0\n    if r == 0 or r == n:\n        return 1\n    return nCr(n - 1, r - 1) + nCr(n - 1, r)\nfor i in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    pro = 0\n    na = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            pro += 1\n        else:\n            na += 1\n    if na % 2 == 1:\n        print(0)\n    else:\n        shit = 1\n        for i in range(pro):\n            shit = 2 * shit % mod\n        haaa = ncr(na, na // 2, mod)\n        if na == 0:\n            print(shit)\n        elif pro == 0:\n            print(haaa % mod)\n        else:\n            print(shit % mod * (haaa % mod) % mod)", "from math import factorial\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = input()\n    b = input()\n    x = int(a, 2)\n    y = int(b, 2)\n    ans = 0\n    if x == y:\n        ans = 2 ** n\n    else:\n        diff = 0\n        for i in range(n):\n            if a[i] != b[i]:\n                diff += 1\n        if diff % 2:\n            ans = 0\n        else:\n            up = factorial(diff)\n            down = factorial(diff // 2)\n            ans = up * 2 ** (n - diff) // (down * down)\n    print(ans % (10 ** 9 + 7))", "from math import factorial\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = input()\n    b = input()\n    x = int(a, 2)\n    y = int(b, 2)\n    ans = 0\n    if x == y:\n        ans = 2 ** n\n    else:\n        diff = 0\n        for i in range(n):\n            if a[i] != b[i]:\n                diff += 1\n        if diff % 2:\n            ans = 0\n        else:\n            up = factorial(diff)\n            down = factorial(diff // 2)\n            ans = up * 2 ** (n - diff) // (down * down)\n    print(ans % (10 ** 9 + 7))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    dist = 0\n    for i in range(n):\n        if a[i] != b[i]:\n            dist += 1\n    if dist % 2 != 0:\n        print(0)\n        continue\n    fact = math.factorial(dist) // (math.factorial(dist // 2) * math.factorial(dist // 2))\n    print(fact * 2 ** (n - dist) % 1000000007)", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    m = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            m += 1\n    if n - m & 1:\n        print(0)\n        continue\n    mod = 10 ** 9 + 7\n    ans = pow(2, m, mod)\n    nr = 1\n    dr = 1\n    for i in range(1, n - m + 1):\n        nr = nr * i % mod\n    for i in range(1, (n - m) // 2 + 1):\n        dr = dr * i % mod\n    for i in range(1, (n - m) // 2 + 1):\n        dr = dr * i % mod\n    dr = pow(dr, -1, mod)\n    print(ans * nr * dr % mod)", "mod = 1000000007\n\ndef hel(a, b):\n    return a % mod * (b % mod) % mod\n\ndef bis(a, b):\n    if b == 0:\n        return 1\n    temp = bis(a, b // 2)\n    temp = hel(temp, temp)\n    if b % 2:\n        return hel(temp, a)\n    return temp\n\ndef mi(a, m=mod):\n    return bis(a, m - 2)\ns = 2 * 10 ** 5 + 1\nfact = [0] * s\nifact = [0] * s\n\ndef pc():\n    fact[0] = ifact[0] = 1\n    for i in range(1, s):\n        fact[i] = hel(fact[i - 1], i)\n        ifact[i] = hel(ifact[i - 1], mi(i))\n\ndef disolve():\n    n = int(input())\n    (k, j) = (input(), input())\n    count = 0\n    for i in range(n):\n        if k[i] == j[i]:\n            count += 1\n    if (n - count) % 2:\n        print(0)\n        return\n    n -= count\n    flag = bis(2, count)\n    flag = hel(flag, hel(fact[n], hel(ifact[n // 2], ifact[n // 2])))\n    print(flag)\npc()\nnothingP = int(input())\nfor _ in range(nothingP):\n    disolve()", "import math\n\ndef nCr(n, r):\n    p = 1\n    k = 1\n    if n - r < r:\n        r = n - r\n    if r != 0:\n        while r:\n            p *= n\n            k *= r\n            m = math.gcd(p, k)\n            p //= m\n            k //= m\n            n -= 1\n            r -= 1\n    else:\n        p = 1\n    return p\n\ndef ncrp(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\nfor _ in range(int(input())):\n    n = int(input())\n    (a, b) = (input(), input())\n    same = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            same += 1\n    diff = n - same\n    ans = 0\n    if diff % 2 == 1:\n        ans = 0\n    elif diff == 0:\n        ans = 2 ** same\n    else:\n        ans = 2 ** same * ncrp(diff, diff // 2, 10 ** 9 + 7)\n    print(ans % (10 ** 9 + 7))", "mod = 1000000007\n\ndef hel(a, b):\n    return a % mod * (b % mod) % mod\n\ndef bis(a, b):\n    if b == 0:\n        return 1\n    temp = bis(a, b // 2)\n    temp = hel(temp, temp)\n    if b % 2:\n        return hel(temp, a)\n    return temp\n\ndef mi(a, m=mod):\n    return bis(a, m - 2)\ns = 2 * 10 ** 5 + 1\nfact = [0] * s\nifact = [0] * s\n\ndef pc():\n    fact[0] = ifact[0] = 1\n    for i in range(1, s):\n        fact[i] = hel(fact[i - 1], i)\n        ifact[i] = hel(ifact[i - 1], mi(i))\n\ndef disolve():\n    n = int(input())\n    (k, j) = (input(), input())\n    count = 0\n    for i in range(n):\n        if k[i] == j[i]:\n            count += 1\n    if (n - count) % 2:\n        print(0)\n        return\n    n -= count\n    flag = bis(2, count)\n    flag = hel(flag, hel(fact[n], hel(ifact[n // 2], ifact[n // 2])))\n    print(flag)\npc()\nnothingP = int(input())\nfor _ in range(nothingP):\n    disolve()", "mod = 1000000007\n\ndef multiply(pin, pop):\n    return pin % mod * (pop % mod) % mod\n\ndef power(pin, pop):\n    if pop == 0:\n        return 1\n    temp = power(pin, pop // 2)\n    temp = multiply(temp, temp)\n    if pop % 2:\n        return multiply(temp, pin)\n    return temp\n\ndef inverse(pin, m=mod):\n    return power(pin, m - 2)\npl = 2 * 10 ** 5 + 1\nfactorial = [0 for i in range(pl)]\ninverse_factorial = [0 for i in range(pl)]\n\ndef precompute():\n    factorial[0] = inverse_factorial[0] = 1\n    for i in range(1, pl):\n        factorial[i] = multiply(factorial[i - 1], i)\n        inverse_factorial[i] = multiply(inverse_factorial[i - 1], inverse(i))\n\ndef solve():\n    n = int(input())\n    (pl1, pl2) = (input(), input())\n    count = 0\n    for i in range(n):\n        if pl1[i] == pl2[i]:\n            count += 1\n    if (n - count) % 2 == 1:\n        print(0)\n        return\n    n -= count\n    result = power(2, count)\n    result = multiply(result, multiply(factorial[n], multiply(inverse_factorial[n // 2], inverse_factorial[n // 2])))\n    print(result)\nprecompute()\nnumber = int(input())\nfor i in range(number):\n    solve()", "MOD = 1000000007\n\ndef mul(a, b):\n    return a % MOD * (b % MOD) % MOD\n\ndef binpow(a, b):\n    if b == 0:\n        return 1\n    tmp = binpow(a, b // 2)\n    tmp = mul(tmp, tmp)\n    if b % 2:\n        return mul(tmp, a)\n    return tmp\n\ndef mod_inverse(a, m=MOD):\n    return binpow(a, m - 2)\nSZ = 2 * 10 ** 5 + 1\nfact = [0] * SZ\ninvfact = [0] * SZ\n\ndef precompute():\n    fact[0] = invfact[0] = 1\n    for i in range(1, SZ):\n        fact[i] = mul(fact[i - 1], i)\n        invfact[i] = mul(invfact[i - 1], mod_inverse(i))\n\ndef solve():\n    n = int(input())\n    A = input()\n    B = input()\n    cnt = 0\n    for i in range(n):\n        if A[i] == B[i]:\n            cnt += 1\n    if (n - cnt) % 2:\n        print(0)\n        return\n    n -= cnt\n    ans = binpow(2, cnt)\n    ans = mul(ans, mul(fact[n], mul(invfact[n // 2], invfact[n // 2])))\n    print(ans)\nprecompute()\nt = int(input())\nfor _ in range(t):\n    solve()", "mod = 1000000007\n\ndef hel(a, b):\n    return a * b % mod\n\ndef bis(a, b):\n    if b == 0:\n        return 1\n    temp = bis(a, b // 2)\n    temp = hel(temp, temp)\n    if b % 2:\n        return hel(temp, a)\n    return temp\n\ndef mi(a):\n    return bis(a, mod - 2)\ns = 2 * 10 ** 5 + 1\nfact = [0] * s\nifact = [0] * s\n\ndef pc():\n    fact[0] = ifact[0] = 1\n    for i in range(1, s):\n        fact[i] = hel(fact[i - 1], i)\n        ifact[i] = hel(ifact[i - 1], mi(i))\n\ndef disolve():\n    n = int(input())\n    k = input()\n    j = input()\n    count = 0\n    for i in range(n):\n        if k[i] == j[i]:\n            count += 1\n    if (n - count) % 2:\n        print(0)\n        return\n    n -= count\n    flag = bis(2, count)\n    flag = hel(flag, hel(fact[n], hel(ifact[n // 2], ifact[n // 2])))\n    print(flag)\npc()\nt = int(input())\nfor _ in range(t):\n    disolve()", "mod = 1000000007\n\ndef hel(a, b):\n    return a * b % mod\n\ndef bis(a, b):\n    if b == 0:\n        return 1\n    temp = bis(a, b // 2)\n    temp = hel(temp, temp)\n    if b % 2:\n        return hel(temp, a)\n    return temp\n\ndef mi(a, m=mod):\n    return bis(a, m - 2)\ns = 2 * 10 ** 5 + 1\nfact = [0] * s\nifact = [0] * s\n\ndef pc():\n    fact[0] = ifact[0] = 1\n    for i in range(1, s):\n        fact[i] = hel(fact[i - 1], i)\n        ifact[i] = hel(ifact[i - 1], mi(i))\n\ndef disolve():\n    n = int(input())\n    (k, j) = (input(), input())\n    count = 0\n    for i in range(n):\n        if k[i] == j[i]:\n            count += 1\n    if (n - count) % 2:\n        print(0)\n        return\n    n -= count\n    flag = bis(2, count)\n    flag = hel(flag, hel(fact[n], hel(ifact[n // 2], ifact[n // 2])))\n    print(flag)\npc()\nplacementlelo = int(input())\nfor _ in range(placementlelo):\n    disolve()", "def multiply(n1, n2):\n    res = n1 % (10 ** 9 + 7) * n2 % (10 ** 9 + 7) % (10 ** 9 + 7)\n    return res\n\ndef power(num1, num2):\n    if num2 == 0:\n        return 1\n    small = power(num1, num2 // 2)\n    small = multiply(small, small)\n    if num2 % 2 == 1:\n        ans = multiply(small, num1)\n        return ans\n    return small\n\ndef inv(a, m=10 ** 9 + 7):\n    f = power(a, m - 2)\n    return f\nlis = []\ninlis = []\nfor i in range(2 * 10 ** 5 + 1):\n    lis.append(0)\n    inlis.append(0)\n\ndef solve():\n    lis[0] = inlis[0] = 1\n    for i in range(1, len(lis)):\n        lis[i] = multiply(lis[i - 1], i)\n        inlis[i] = multiply(inlis[i - 1], inv(i))\nsolve()\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    s1 = input()\n    c = 0\n    for i in range(n):\n        if s[i] == s1[i]:\n            c += 1\n    if (n - c) % 2:\n        print(0)\n    else:\n        n -= c\n        res = power(2, c)\n        d = multiply(lis[n], multiply(inlis[n // 2], inlis[n // 2]))\n        res = multiply(res, d)\n        print(res)", "def f(m):\n    num = den = 1\n    for i in range(1, m // 2 + 1):\n        den *= i\n    for i in range(m // 2 + 1, m + 1):\n        num *= i\n    return num // den\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = input()\n    B = input()\n    n = 0\n    for i in range(N):\n        if A[i] == B[i]:\n            n += 1\n    m = N - n\n    if m % 2 == 1:\n        print(0)\n    else:\n        print(f(m) * 2 ** n % (10 ** 9 + 7))", "t = int(input())\nimport math\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\nwhile t > 0:\n    n = int(input())\n    a = str(input())\n    b = str(input())\n    ham_ab = 0\n    for i in range(0, n):\n        if a[i] != b[i]:\n            ham_ab += 1\n    if ham_ab % 2 == 1:\n        print(0)\n    else:\n        pd1 = pow(2, n - ham_ab, 10 ** 9 + 7)\n        pd2 = 1\n        if ham_ab != 0:\n            pd2 = ncr(ham_ab, int(ham_ab / 2), 10 ** 9 + 7)\n        print(pd1 * pd2 % (10 ** 9 + 7))\n    t -= 1", "import math\nMOD = 1000000007\n\ndef choose(n, k):\n    k = min(k, n - k)\n    result = 1\n    for i in range(k):\n        result = result * (n - i) % MOD\n        result = result * pow(i + 1, -1, MOD) % MOD\n    return result\n\ndef solve(n, a, b):\n    nsame = sum((1 for (aa, bb) in zip(a, b) if aa == bb))\n    ndiff = n - nsame\n    if ndiff % 2 == 1:\n        return 0\n    return pow(2, nsame, MOD) * choose(ndiff, ndiff // 2) % MOD\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = input()\n    b = input()\n    print(solve(n, a, b))", "from math import factorial as fact\nfor a0 in range(int(input())):\n    n = int(input())\n    s1 = input()\n    s2 = input()\n    (pp, a, b) = (0, 0, 0)\n    pp = bin(int(s1, 2) ^ int(s2, 2))[2:].count('1')\n    if pp % 2:\n        print(0)\n        continue\n    if s1 == s2:\n        print(pow(2, n, 1000000007))\n        continue\n    ttl = fact(pp) // (fact(pp // 2) * fact(pp // 2))\n    ans = pow(2, n - pp, 1000000007)\n    print(ans * ttl % 1000000007)", "import math\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i % p\n    return result\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef power(x, y, p):\n    res = 1\n    while y > 0:\n        if y & 1 != 0:\n            res = res * x\n        y = y >> 1\n        x = x * x\n    return res % p\nfor aa in range(int(input())):\n    n = int(input())\n    a = input()\n    b = input()\n    e = 1000000007\n    x = 0\n    y = 0\n    for i in range(n):\n        if a[i] == b[i]:\n            x += 1\n        else:\n            y += 1\n    if y % 2 != 0:\n        print(0)\n        continue\n    else:\n        if y == 0:\n            print(int(power(2, x, e)))\n            continue\n        w = y // 2\n        t = ncr(y, w, e)\n        if x == 0:\n            print(int(t) % e)\n            continue\n        print(int(power(2, x, e) * t) % e)"]