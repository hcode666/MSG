["from math import ceil, log, floor, sqrt, gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = {}\n    for i in l:\n        try:\n            f[i] += 1\n        except:\n            f[i] = 1\n    if max(f.values()) > n // 2 or len(set(l)) <= 2:\n        print('NO')\n    else:\n        print('YES')\n        l.sort()\n        print(*l)\n        print(*l[n // 2:] + l[:n // 2])", "from math import ceil, log, floor, sqrt, gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = {}\n    for i in l:\n        try:\n            f[i] += 1\n        except:\n            f[i] = 1\n    if max(f.values()) > n // 2 or len(set(l)) <= 2:\n        print('NO')\n    else:\n        print('YES')\n        l.sort()\n        print(*l)\n        print(*l[n // 2:] + l[:n // 2])", "import math\nimport bisect\nimport heapq\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as ddc\nfrom collections import Counter\n\ndef intin():\n    return int(input())\n\ndef mapin():\n    return map(int, input().split())\n\ndef strin():\n    return input().split()\nINF = 10 ** 20\nmod = 1000000007\n\ndef exponentiation(bas, exp, mod=1000000007):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef MOD(p, q=1, mod=1000000007):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef process(arr, n):\n    C = Counter(arr)\n    edge = 0\n    for val in C.values():\n        if val > n // 2:\n            print('NO')\n            return\n        elif val == n // 2:\n            edge += 1\n    if len(C.keys()) == edge == 2:\n        print('NO')\n        return\n    print('YES')\n    arr.sort()\n    (B, C) = (arr, arr[(n + 1) // 2:] + arr[:(n + 1) // 2])\n    r = n - 1\n    for i in range(n):\n        if i >= r:\n            break\n        if B[i] == C[i]:\n            (C[i], C[r]) = (C[r], C[i])\n            r -= 1\n    print(*B)\n    print(*C)\n\ndef main():\n    for _ in range(int(input())):\n        n = intin()\n        arr = list(mapin())\n        process(arr, n)\nmain()", "tt = int(input())\nfor _ in range(tt):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        try:\n            d[i] += 1\n        except KeyError:\n            d[i] = 1\n    m = max(list(d.values()))\n    k = len(list(d.keys()))\n    if m > n // 2 or k <= 2:\n        print('NO')\n        continue\n    else:\n        print('YES')\n        a.sort()\n        print(*a)\n        print(*a[m:] + a[:m])", "from bisect import bisect_left\nfrom re import sub\nimport re\nfrom typing import DefaultDict\nimport math\nfrom collections import defaultdict\nfrom math import sqrt\nimport collections\nfrom sys import maxsize\nfrom itertools import combinations_with_replacement\nimport sys\nimport copy\n\ndef sieve_erasthones(n):\n    cnt = 0\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    for p in range(n + 1):\n        if prime[p]:\n            cnt += 1\n    return cnt\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef count_factors(n):\n    i = 1\n    c = 0\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                c += 1\n            else:\n                c += 2\n        i += 1\n    return c\n\ndef ncr_modulo(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef dict_ele_count(l):\n    d = DefaultDict(lambda : 0)\n    for ele in l:\n        d[ele] += 1\n    return d\n\ndef max_in_dict(d):\n    maxi = 0\n    for ele in d:\n        if d[ele] > maxi:\n            maxi = d[ele]\n    return maxi\n\ndef element_count(s):\n    l = []\n    k = s[0]\n    c = 0\n    for ele in s:\n        if ele == k:\n            c += 1\n        else:\n            l.append([k, c])\n            k = ele\n            c = 1\n    l.append([k, c])\n    return l\n\ndef modular_exponentiation(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 != 0:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef number_of_primefactor(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return len(set(l))\n\ndef twosum(a, n, x):\n    rem = []\n    for i in range(x):\n        rem.append(0)\n    for i in range(n):\n        if a[i] < x:\n            rem[a[i] % x] += 1\n    for i in range(1, x // 2):\n        if rem[i] > 0 and rem[x - i] > 0:\n            return True\n    if i >= x // 2:\n        if x % 2 == 0:\n            if rem[x // 2] > 1:\n                return True\n            else:\n                return False\n        elif rem[x // 2] > 0 and rem[x - x // 2] > 0:\n            return True\n        else:\n            return False\n\ndef divSum(num):\n    result = 0\n    i = 2\n    while i <= math.sqrt(num):\n        if num % i == 0:\n            if i == num / i:\n                result = result + i\n            else:\n                result = result + (i + num / i)\n        i = i + 1\n    return result + 1 + num\n\ndef subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0\n    i = 0\n    while j < m and i < n:\n        if str1[j] == str2[i]:\n            j = j + 1\n        i = i + 1\n    return j == m\n\ndef primeFactors(n):\n    d = defaultdict(lambda : 0)\n    while n % 2 == 0:\n        d[2] += 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d[int(i)] += 1\n            n = n / i\n    if n > 2:\n        d[int(n)] += 1\n    return d\n\ndef calc(s):\n    ans = 0\n    for ele in s:\n        ans += ord(ele) - 96\n    return ans\n\ndef modInverse(b, m):\n    g = math.gcd(b, m)\n    if g != 1:\n        return -1\n    else:\n        return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    return inv * a % m\n\ndef solve():\n    n = int(input())\n    d = defaultdict(lambda : 0)\n    l = list(map(int, input().split()))\n    ans = []\n    for ele in l:\n        d[ele] += 1\n    if len(d) <= 2:\n        print('NO')\n        return\n    l = sorted(d.items(), key=lambda kv: (kv[1], kv[0]), reverse=True)\n    for ele in l:\n        if ele[1] > n // 2:\n            print('NO')\n            return\n        else:\n            break\n    ans1 = [l[0][0] for _ in range(l[0][1])]\n    ans2 = [l[0][0] for _ in range(l[0][1])]\n    temp1 = []\n    for i in range(1, len(l)):\n        temp1 += [l[i][0] for _ in range(l[i][1])]\n    ans1 += temp1\n    ans2 = temp1 + ans2\n    print('YES')\n    print(*ans1)\n    print(*ans2)\nfor _ in range(int(input())):\n    solve()", "def go():\n    for i in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        b = a\n        b.sort()\n        f = 0\n        for j in range((n + 1) // 2):\n            if b[j] == b[j + n // 2]:\n                print('NO')\n                f = 1\n                break\n        if f == 1:\n            continue\n        if n % 2 == 0 and b[0] == b[n // 2 - 1] and (b[n // 2] == b[n - 1]):\n            print('NO')\n            continue\n        c = []\n        c.extend(b[int(n / 2):])\n        c.extend(b[:int(n / 2)])\n        print('YES')\n        print(*b)\n        print(*c)\ngo()", "from collections import defaultdict\n\ndef solve():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    cnt = defaultdict(int)\n    for i in a:\n        cnt[i] += 1\n        if cnt[i] > n // 2:\n            print('NO')\n            return\n    if n % 2 == 0 and (a[0] == a[n // 2 - 1] and a[n // 2] == a[n - 1]):\n        print('NO')\n    else:\n        print(f\"YES\\n{' '.join(map(str, a))}\\n{' '.join(map(str, a[n // 2:]))} {' '.join(map(str, a[:n // 2]))}\")\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    x = list(set(arr))\n    flag = True\n    for i in x:\n        if arr.count(i) > n // 2:\n            flag = False\n            break\n    if flag == True:\n        if len(x) == 2 and arr.count(x[0]) == arr.count(x[1]):\n            print('NO')\n        else:\n            print('YES')\n            print(*arr)\n            x1 = n // 2\n            print(*arr[x1:] + arr[:x1])\n    else:\n        print('NO')", "def solution():\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    stat = 1\n    for i in range((N + 1) // 2):\n        if A[i] == A[i + N // 2]:\n            print('NO')\n            stat = 0\n            return\n    if stat and N % 2 == 0 and (A[0] == A[N // 2 - 1]) and (A[N // 2] == A[N - 1]):\n        print('NO')\n    else:\n        print('YES')\n        print(' '.join(map(str, A)))\n        print(' '.join(map(str, A[(N + 1) // 2:])), end=' ')\n        print(' '.join(map(str, A[:(N + 1) // 2])))\nfor _ in range(int(input())):\n    solution()", "from collections import Counter\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    A = list(map(int, input().split()))\n    c = Counter(A)\n    m = max(c.values())\n    if m > n // 2 or len(c) <= 2:\n        print('NO')\n    else:\n        print('YES')\n        A.sort()\n        print(*A)\n        p = n // 2\n        print(*A[p:] + A[:p])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    mx = 0\n    for i in d.values():\n        if i >= mx:\n            mx = i\n    if len(d) == 2:\n        print('NO')\n    elif n % 2 == 0:\n        if mx <= n // 2:\n            print('YES')\n            l.sort()\n            for i in range(n):\n                print(l[i], end=' ')\n            print()\n            for i in range(n // 2, n):\n                print(l[i], end=' ')\n            print(end='')\n            for i in range(0, n // 2):\n                print(l[i], end=' ')\n            print()\n        else:\n            print('NO')\n    elif mx < n // 2 + 1:\n        print('YES')\n        l.sort()\n        for i in range(n):\n            print(l[i], end=' ')\n        print()\n        for i in range(n // 2 + 1, n):\n            print(l[i], end=' ')\n        print(end='')\n        for i in range(0, n // 2 + 1):\n            print(l[i], end=' ')\n        print()\n    else:\n        print('NO')", "tc = int(input())\nfor t in range(0, tc):\n    length = int(input())\n    nums = list(map(int, input().split()))\n    Map = {}\n    for n in nums:\n        Map[n] = Map.setdefault(n, 0) + 1\n        if Map[n] > length // 2:\n            print('NO')\n            break\n    else:\n        if len(Map) == 2 and length % 2 == 0:\n            print('NO')\n        else:\n            freqs = sorted(set(Map.values()), reverse=True)\n            ans = []\n            for freq in freqs:\n                for (key, value) in Map.items():\n                    if value == freq:\n                        ans += [str(key)] * value\n            print('YES')\n            print(' '.join(ans))\n            print(' '.join(ans[Map[int(ans[0])]:] + ans[:Map[int(ans[0])]]))", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    lst2 = lst[n // 2:] + lst[:n // 2]\n    ans = 'YES'\n    for i in range(n):\n        if lst[i] == lst2[i]:\n            ans = 'NO'\n            break\n    p1 = 1\n    p2 = n - 2\n    while p1 < p2:\n        temp1 = sorted(lst[p1:p2 + 1])\n        temp2 = sorted(lst2[p1:p2 + 1])\n        if temp1 == temp2:\n            ans = 'NO'\n            break\n        p1 += 1\n        p2 -= 1\n    print(ans)\n    if ans == 'YES':\n        print(*lst)\n        print(*lst2)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(1, how_much_noob_I_am + 1):\n        n = inpu()\n        arr = lis()\n        c = Counter(arr)\n        p = sum(c.values())\n        m = max(c.values())\n        if p - m < m or (m == n // 2 and len(set(arr)) == 2):\n            print('NO')\n            continue\n        arr.sort()\n        res = arr[(len(arr) + 1) // 2:] + arr[:(len(arr) + 1) // 2]\n        print('YES')\n        print(*arr)\n        print(*res)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    l = input().split()\n    d = {}\n    for i in l:\n        i = int(i)\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    l = []\n    for i in d:\n        l.append([i, d[i]])\n    if len(l) == 1:\n        print('NO')\n    elif len(l) == 2:\n        if l[0][0] == l[1][0] and (l[0][1] == 1 or l[0][1] == 2):\n            print('YES')\n            s = str(l[0][0]) * l[0][1] + str(l[1][0]) * l[0][1]\n        else:\n            print('NO')\n    else:\n        le = n // 2\n        ma = l[0][1]\n        s = []\n        for i in l:\n            s[len(s):] = [i[0]] * i[1]\n            if i[1] > ma:\n                ma = i[1]\n        if ma > le:\n            print('NO')\n        else:\n            print('YES')\n            for i in s:\n                print(i, end=' ')\n            print()\n            s = s[le:] + s[0:le]\n            for i in s:\n                print(i, end=' ')\n            print()", "import sys\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom bisect import *\nfrom string import ascii_lowercase\nfrom heapq import *\n\ndef readInts():\n    x = list(map(int, sys.stdin.readline().rstrip().split()))\n    return x[0] if len(x) == 1 else x\n\ndef readList(type=int):\n    x = sys.stdin.readline()\n    x = list(map(type, x.rstrip('\\n\\r').split()))\n    return x\n\ndef readStr():\n    x = sys.stdin.readline().rstrip('\\r\\n')\n    return x\nwrite = sys.stdout.write\nread = sys.stdin.readline\n\ndef dist(x1, x2, y1, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef mergeSort(arr, check=lambda a, b: a < b, reverse=False):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        mergeSort(L, check, reverse)\n        mergeSort(R, check, reverse)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if check(L[i], R[j]):\n                if not reverse:\n                    arr[k] = L[i]\n                    i += 1\n                else:\n                    arr[k] = R[j]\n                    j += 1\n            elif not reverse:\n                arr[k] = R[j]\n                j += 1\n            else:\n                arr[k] = L[i]\n                i += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n\ndef maxSum(arr):\n    max_sum = float('-inf')\n    max_cur = 0\n    for num in ar:\n        max_cur = max(max_cur + num, num)\n        if max_cur > max_sum:\n            max_sum = max_cur\n    return max_sum\n\ndef hcf(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcf(b, b % a)\n\ndef get_power(n, m):\n    i = 1\n    p = -1\n    while i <= n:\n        i = i * m\n        p += 1\n    return p\n\ndef fact(n):\n    f = 1\n    for i in range(2, n + 1):\n        f *= i\n    return f\n\ndef find_closest(num, ar):\n    min_d = float('inf')\n    for num2 in ar:\n        d = abs(num2 - num)\n        if d < min_d:\n            min_d = d\n    return min_d\n\ndef check_pal(n):\n    s = str(n)\n    j = len(s) - 1\n    i = 0\n    while j > i:\n        if s[i] != s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef solve(t):\n    n = readInts()\n    ar = readList()\n    cnt = 0\n    mx_ele = ar[0]\n    if len(set(ar)) < 3:\n        print('NO')\n        return None\n    for num in ar:\n        if num == mx_ele:\n            cnt += 1\n        else:\n            cnt -= 1\n        if cnt == 0:\n            mx_ele = num\n            cnt = 1\n    if cnt > 0:\n        cnt = 0\n        for num in ar:\n            if num == mx_ele:\n                cnt += 1\n        if cnt > n // 2:\n            print('NO')\n            return None\n    res = []\n    ar.sort()\n    res = ar[n // 2:] + ar[:n // 2]\n    print('YES')\n    print(*ar)\n    print(*res)\n\ndef main():\n    t = 1\n    sys.setrecursionlimit(12000)\n    t = readInts()\n    for i in range(t):\n        solve(i + 1)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = {}\n    for i in range(n):\n        if a[i] in count:\n            count[a[i]] += 1\n        else:\n            count[a[i]] = 1\n    if len(count.keys()) <= 2:\n        print('NO')\n    elif max(count.values()) > n // 2:\n        print('NO')\n    else:\n        print('YES')\n        pairs = list(count.items())\n        pairs.sort(key=lambda x: x[1], reverse=True)\n        array1 = []\n        for pair in pairs:\n            for j in range(pair[1]):\n                array1.append(pair[0])\n        array2 = []\n        shift = pairs[0][1]\n        for i in range(n - shift, n):\n            array2.append(array1[i])\n        for i in range(n - shift):\n            array2.append(array1[i])\n        print(*array1)\n        print(*array2)", "from collections import Counter\nfor tcase in range(int(input())):\n    n = int(input())\n    a = Counter(map(int, input().split())).most_common()\n    b = []\n    for (k, v) in a:\n        b.extend([k] * v)\n    ans = False\n    i = 1\n    while not ans and i * 2 < len(a):\n        c = []\n        for (k, v) in a[i:]:\n            c.extend([k] * v)\n        for (k, v) in a[:i]:\n            c.extend([k] * v)\n        ans = all((bi != ci for (bi, ci) in zip(b, c)))\n        i += 1\n    if ans:\n        print('YES')\n        print(' '.join(map(str, b)))\n        print(' '.join(map(str, c)))\n    else:\n        print('NO')", "def Print(arr):\n    for ele in arr:\n        print(ele, end=' ')\n    print()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ar = arr[n // 2:]\n    for i in range(n // 2):\n        ar.append(arr[i])\n    ans = True\n    for i in range(n):\n        if arr[i] == ar[i]:\n            ans = False\n            break\n    d = {}\n    for ele in arr:\n        d[ele] = d.get(ele, 0) + 1\n    if len(d) == 2:\n        tm = []\n        for ele in d:\n            tm.append(d[ele])\n        if tm[0] == tm[1]:\n            ans = False\n    if ans:\n        print('YES')\n        Print(arr)\n        Print(ar)\n    else:\n        print('NO')", "for _ in range(int(input())):\n    size = int(input())\n    L = list(map(int, input().split()))\n    L.sort()\n    s = set(L)\n    c = 0\n    for i in s:\n        if L.count(i) > size // 2:\n            print('NO')\n            c = 1\n            break\n    if c == 1:\n        continue\n    if len(s) == 2:\n        print('NO')\n        continue\n    print('YES')\n    print(*L)\n    temp = L[(size + 1) // 2:] + L[:(size + 1) // 2]\n    print(*temp)", "for _ in range(int(input())):\n    size = int(input())\n    L = list(map(int, input().split()))\n    L.sort()\n    s = set(L)\n    c = 0\n    for i in s:\n        if L.count(i) > size // 2:\n            print('NO')\n            c = 1\n            break\n    if c == 1:\n        continue\n    if len(s) == 2 and L.count(i) == (size + 1) // 2:\n        print('NO')\n        continue\n    print('YES')\n    print(*L)\n    temp = L[(size + 1) // 2:] + L[:(size + 1) // 2]\n    print(*temp)", "from math import *\na = int(input())\nfor x in range(a):\n    b = int(input())\n    c = list(map(int, input().split()))\n    h = {}\n    for y in range(b):\n        if h.get(c[y]) == None:\n            h[c[y]] = 1\n        else:\n            h[c[y]] += 1\n    o = b // 2\n    l = 0\n    for y in h:\n        if h[y] > o:\n            l = -1\n            break\n    if len(h) <= 2:\n        print('NO')\n    elif l == -1:\n        print('NO')\n    else:\n        print('YES')\n        c.sort()\n        print(*c)\n        j = c[o:] + c[:o]\n        print(*j)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    dit = Counter(arr)\n    f = max(dit.values())\n    if f > n // 2 or len(dit) == 2:\n        print('NO')\n        continue\n    new = arr[n // 2:] + arr[:n // 2]\n    print('YES')\n    print(*arr)\n    print(*new)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    if max(d.values()) > n // 2:\n        print('NO')\n        continue\n    if len(d) == 2:\n        print('NO')\n        continue\n    print('YES')\n    c = []\n    a.sort()\n    c = a[n // 2:] + a[:n // 2]\n    print(*a)\n    print(*c)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    flag = False\n    mp = {}\n    for i in arr:\n        if i not in mp:\n            mp[i] = 1\n        else:\n            mp[i] += 1\n        if mp[i] > n // 2:\n            flag = True\n    if flag:\n        print('NO')\n        continue\n    if len(mp) == 2:\n        print('NO')\n        continue\n    arr.sort()\n    maxxx = 0\n    for k in mp:\n        if mp[k] > maxxx:\n            maxxx = mp[k]\n    num = []\n    num = arr\n    k = maxxx\n    num = num[::-1]\n    xx = num[:k - 1:-1]\n    yy = num[k - 1::-1]\n    num = yy + xx\n    print('YES')\n    print(*arr)\n    print(*num)", "tt = int(input())\nfor _ in range(tt):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        try:\n            d[i] += 1\n        except KeyError:\n            d[i] = 1\n    m = max(list(d.values()))\n    k = len(list(d.keys()))\n    if m > n // 2 or k <= 2:\n        print('NO')\n        continue\n    else:\n        print('YES')\n        a.sort()\n        print(*a)\n        print(*a[m:] + a[:m])", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 0\n    d = {}\n    for x in range(n):\n        if a[x] in d:\n            d[a[x]] = d[a[x]] + 1\n        else:\n            d[a[x]] = 1\n        m = max(d[a[x]], m)\n    if m > n / 2:\n        print('NO')\n    else:\n        d = list(d.items())\n        if len(d) <= 2:\n            print('NO')\n            t -= 1\n            continue\n        print('YES')\n        d = sorted(d, key=lambda x: x[1], reverse=True)\n        for x in d:\n            for y in range(x[1]):\n                print(x[0], end=' ')\n        print()\n        for x in range(1, len(d)):\n            for y in range(d[x][1]):\n                print(d[x][0], end=' ')\n        for y in range(d[0][1]):\n            print(d[0][0], end=' ')\n        print()\n    t -= 1", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    lc = []\n    l.sort()\n    for i in set(l):\n        lc.append(l.count(i))\n    lc.sort(reverse=True)\n    if lc[0] > n // 2:\n        print('NO')\n        continue\n    if lc[0] + lc[1] == n:\n        print('NO')\n        continue\n    e = lc[0]\n    lans = []\n    for j in range(n):\n        lans.append(l[(j + e) % n])\n    print('YES')\n    for j in l:\n        print(j, end=' ')\n    print()\n    for j in lans:\n        print(j, end=' ')\n    print()", "from collections import Counter\ntc = int(input())\nfor case in range(tc):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    nb2 = n // 2\n    mx = max(c.values())\n    if mx > nb2 or len(set(a)) == 2:\n        print('NO')\n        continue\n    else:\n        print('YES')\n        a.sort()\n        print(*a, sep=' ')\n        print(*a[mx:] + a[:mx], sep=' ')", "import math\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    l = list(map(int, input().split()))\n    flag = 'Yes'\n    l.sort()\n    a = 1\n    m = 0\n    for i in range(1, N):\n        if l[i - 1] == l[i]:\n            a += 1\n        else:\n            if m < a:\n                m = a\n            a = 1\n    if m < a:\n        m = a\n    if m > N // 2:\n        print('NO')\n        continue\n    k = m\n    i = 0\n    B = l[k:] + l[:k]\n    if l[0] == B[-1] and l[-1] == B[0]:\n        print('NO')\n        continue\n    print('YES')\n    for i in l:\n        print(i, end=' ')\n    print()\n    for i in B:\n        print(i, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = {}\n    for i in range(n):\n        if a[i] in count:\n            count[a[i]] += 1\n        else:\n            count[a[i]] = 1\n    if len(count.keys()) <= 2:\n        print('NO')\n    elif max(count.values()) > n // 2:\n        print('NO')\n    else:\n        print('YES')\n        pairs = list(count.items())\n        pairs.sort(key=lambda x: x[1], reverse=True)\n        array1 = []\n        for pair in pairs:\n            for j in range(pair[1]):\n                array1.append(pair[0])\n        array2 = []\n        shift = pairs[0][1]\n        for i in range(n - shift, n):\n            array2.append(array1[i])\n        for i in range(n - shift):\n            array2.append(array1[i])\n        print(*array1)\n        print(*array2)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    c = Counter(arr)\n    m = max(c.values())\n    if m >= (n + 1) / 2 or len(set(arr)) <= 2:\n        print('NO')\n    else:\n        for el in c:\n            if c[el] == m:\n                break\n        a = [el] * m\n        b = []\n        for el in c:\n            if el != a[0]:\n                b += [el] * c[el]\n        print('YES')\n        print(*a + b)\n        print(*b + a)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    lst2 = lst[n // 2:] + lst[:n // 2]\n    ans = 'YES'\n    for i in range(n):\n        if lst[i] == lst2[i]:\n            ans = 'NO'\n            break\n    p1 = 1\n    p2 = n - 2\n    while p1 < p2:\n        temp1 = sorted(lst[p1:p2 + 1])\n        temp2 = sorted(lst2[p1:p2 + 1])\n        if temp1 == temp2:\n            ans = 'NO'\n            break\n        p1 += 1\n        p2 -= 1\n    print(ans)\n    if ans == 'YES':\n        print(*lst)\n        print(*lst2)", "for cas in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    if len(set(l)) == 1:\n        print('NO')\n        continue\n    if len(set(l)) == 2 and n % 2 == 0:\n        i = 0\n        j = n - 1\n        flag = 0\n        while i < j:\n            if l[i] == l[j]:\n                flag = 1\n                break\n            i += 1\n            j -= 1\n        if not flag:\n            print('NO')\n            continue\n    d = {}\n    flag = 0\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    mx = 0\n    for i in d:\n        if d[i] > mx:\n            mx = d[i]\n    if mx > n // 2:\n        print('NO')\n        continue\n    else:\n        print('YES')\n        print(*l)\n        print(*l[mx:] + l[:mx])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.sort()\n    pre = 0\n    xx = 0\n    d = dict()\n    flag = False\n    c = 0\n    for x in set(l):\n        d[x] = l.count(x)\n        if d[x] > pre:\n            xx = x\n            pre = d[x]\n        if d[x] > n - d[x]:\n            flag = True\n            break\n        if d[x] == n // 2 and n % 2 == 0:\n            c += 1\n        if c == 2:\n            flag = True\n            break\n    if flag:\n        print('NO')\n    else:\n        print('YES')\n        index = l.index(xx)\n        while index + 1 < n:\n            if l[index + 1] == xx:\n                index += 1\n            else:\n                break\n        print(*l)\n        l = l[n // 2:] + l[:n // 2]\n        print(*l)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    A.sort()\n    L = A[N // 2:]\n    L.extend(A[:N // 2])\n    f = False\n    for i in range(N - 1):\n        if A[i] == L[i]:\n            f = True\n            break\n        if A[i] == L[i + 1] and A[i + 1] == L[i]:\n            f = True\n            break\n    if A[N - 1] == L[N - 1]:\n        f = True\n    if f:\n        print('NO')\n    else:\n        print('YES')\n        print(*A)\n        print(*L)", "import sys\nfrom math import sqrt, gcd, factorial, ceil, floor\nfrom collections import deque, Counter, OrderedDict\nfrom heapq import heapify, heappush, heappop\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    a = L()\n    a.sort()\n    c = a[n // 2:] + a[:n // 2]\n    if any((a[i] == c[i] for i in range(n))) or any((a[i] == c[i + 1] and a[i + 1] == c[i] for i in range(n - 1))):\n        print('NO')\n        continue\n    print('YES')\n    print(*a)\n    print(*c)", "T = int(input())\nfor ts in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    A.sort()\n    C = A.copy()\n    C = C[(N + 1) // 2:N] + C[:(N + 1) // 2]\n    check = True\n    for i in range(N):\n        if A[i] == C[i]:\n            check = False\n            break\n    if N % 2 == 0 and A[N // 2 - 1] == C[N // 2] and (A[N // 2] == C[N // 2 - 1]):\n        check = False\n    if check:\n        print('YES')\n        print(' '.join(map(str, A)))\n        print(' '.join(map(str, C)))\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    line = input()\n    a = list(map(int, line.split()))\n    a.sort()\n    counts = [[a[0], 1]]\n    curr_value = a[0]\n    for i in range(1, n):\n        if a[i] == curr_value:\n            counts[-1][1] += 1\n        else:\n            curr_value = a[i]\n            counts.append([a[i], 1])\n    counts.sort(key=lambda x: x[1], reverse=True)\n    highest_count = counts[0][1]\n    if highest_count > n / 2 or len(counts) == 2:\n        print('NO')\n    else:\n        print('YES')\n        for item in a:\n            print(item, end=' ')\n        print()\n        for i in range(n):\n            index = (i + highest_count) % n\n            print(a[index], end=' ')\n        print()", "def fi():\n    return int(input())\n\ndef li():\n    return list(map(int, input().split()))\nt = fi()\nfor i in range(t):\n    n = fi()\n    a = li()\n    m = {}\n    for e in a:\n        if e not in m:\n            m[e] = 1\n        else:\n            m[e] += 1\n    pos = True\n    firstrot = 0\n    m = dict(sorted(m.items(), key=lambda x: x[1], reverse=True))\n    for (key, value) in m.items():\n        if value > n / 2 or (value == n / 2 and len(m.keys()) == 2):\n            pos = False\n        firstrot = value\n        break\n    if not pos:\n        print('NO')\n    else:\n        print('YES')\n        templist = []\n        for (key, value) in m.items():\n            for j in range(value):\n                templist.append(key)\n        print(*templist)\n        templist = templist[firstrot:] + templist[:firstrot]\n        print(*templist)"]