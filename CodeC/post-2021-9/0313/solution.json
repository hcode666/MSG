["import math\n\ndef badness(s):\n    return abs(s.count('0') - s.count('1'))\n\ndef bp():\n    return int(input())\n\ndef ip():\n    return map(int, input().split())\n\ndef ls():\n    return list(map(int, input().split()))\nt = int(input())\nfor i in range(t):\n    (n, k) = ip()\n    s = input()\n    print(math.ceil(badness(s) / k))", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    z = 0\n    o = 0\n    for j in input():\n        if j == '0':\n            z += 1\n        else:\n            o += 1\n    ans = -(abs(z - o) // -k)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    bad = abs(s.count('1') - s.count('0'))\n    print(math.ceil(bad / k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    c0 = c1 = 0\n    for i in a:\n        if i == '1':\n            c1 += 1\n        else:\n            c0 += 1\n    k1 = max(c1, c0) - min(c1, c0)\n    g = k1 // k\n    a1 = g + (1 if k1 % k != 0 else 0)\n    print(a1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    c0 = c1 = 0\n    for i in a:\n        if i == '1':\n            c1 += 1\n        else:\n            c0 += 1\n    k1 = max(c1, c0) - min(c1, c0)\n    g = k1 // k\n    a1 = g + (1 if k1 % k != 0 else 0)\n    print(a1)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = input()\n    c0 = c1 = 0\n    for i in a:\n        if i == '1':\n            c1 += 1\n        else:\n            c0 += 1\n    k1 = max(c1, c0) - min(c1, c0)\n    a1 = k1 // k + (1 if k1 % k != 0 else 0)\n    print(a1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    c0 = c1 = 0\n    for i in a:\n        if i == '1':\n            c1 += 1\n        else:\n            c0 += 1\n    k1 = max(c1, c0) - min(c1, c0)\n    a1 = k1 // k + (1 if k1 % k != 0 else 0)\n    print(a1)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    arr = input()\n    co = 0\n    cz = 0\n    for i in arr:\n        if i == '1':\n            co += 1\n        else:\n            cz += 1\n    bad = abs(cz - co)\n    if bad == 0:\n        print(0)\n    elif bad % k == 0:\n        print(bad // k)\n    elif bad % k != 0:\n        print(bad // k + 1)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    o = 0\n    z = 0\n    for i in s:\n        if i == '0':\n            z += 1\n        else:\n            o += 1\n    l = abs(z - o)\n    m = int(math.ceil(l / k))\n    print(m)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    o = 0\n    z = 0\n    for i in s:\n        if i == '0':\n            z += 1\n        else:\n            o += 1\n    l = abs(z - o)\n    m = int(math.ceil(l / k))\n    print(m)", "import math\nx = int(input())\nfor i in range(x):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    zeros = s.count('0')\n    ones = n - zeros\n    diff = zeros - ones\n    print(math.ceil(abs(diff) / k))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    c0 = c1 = 0\n    for i in a:\n        if i == '1':\n            c1 += 1\n        else:\n            c0 += 1\n    k1 = max(c1, c0) - min(c1, c0)\n    a1 = k1 // k + (1 if k1 % k != 0 else 0)\n    print(a1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    c0 = c1 = 0\n    for i in a:\n        if i == '1':\n            c1 += 1\n        else:\n            c0 += 1\n    k1 = max(c1, c0) - min(c1, c0)\n    a1 = k1 // k + (1 if k1 % k != 0 else 0)\n    print(a1)", "from math import ceil\nt = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    a = s.count('1')\n    b = n - a\n    c = abs(b - a)\n    print(ceil(c / k))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    o = s.count('0')\n    z = n - o\n    if o < z:\n        (o, z) = (z, o)\n    print((o - z) // k + bool((o - z) % k))", "import math\na = int(input())\nfor _ in range(a):\n    (n, k) = map(int, input().split())\n    arr = list(input())\n    a1 = arr.count('1')\n    a0 = n - a1\n    x = math.ceil(abs(a0 - a1) / k)\n    print(x)", "from math import ceil\ntry:\n    n = int(input())\n    for j in range(n):\n        (a, b) = map(int, input().split())\n        l = list(input())\n        p = abs(l.count('0') - l.count('1'))\n        print(ceil(p / b))\nexcept:\n    pass", "T = int(input())\nwhile T > 0:\n    (n, k) = map(int, input().split())\n    s = input()\n    zeros = s.count('0')\n    ones = s.count('1')\n    s_ = abs(zeros - ones)\n    if s_ >= k:\n        if s_ % k == 0:\n            print(s_ // k)\n        else:\n            print(s_ // k + 1)\n    elif s_ != 0:\n        print(1)\n    else:\n        print(0)\n    T -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = None\n    z = s.count('0')\n    o = s.count('1')\n    d = abs(z - o)\n    if d == 0:\n        a = 0\n    if a == None and k >= d:\n        a = 1\n    elif a == None:\n        a = d // k if d % k == 0 else d // k + 1\n    print(a)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    s = [x for x in input()]\n    m = len(s) - 2 * min(s.count('0'), s.count('1'))\n    badness = 0\n    while m - k >= 0:\n        m -= k\n        badness += 1\n    if m > 0:\n        badness += 1\n    print(badness)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    s = [x for x in input()]\n    m = len(s) - 2 * min(s.count('0'), s.count('1'))\n    badness = 0\n    while m - k >= 0:\n        m -= k\n        badness += 1\n    if m > 0:\n        badness += 1\n    print(badness)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = None\n    zeros = s.count('0')\n    ones = s.count('1')\n    diff = abs(zeros - ones)\n    if diff == 0:\n        ans = 0\n    if ans == None and k >= diff:\n        ans = 1\n    elif ans == None:\n        if diff % k == 0:\n            ans = diff // k\n        else:\n            ans = diff // k + 1\n    print(ans)", "while True:\n    try:\n        for _ in range(int(input())):\n            (x, y) = map(int, input().split())\n            s = input()\n            (one, zero) = (0, 0)\n            for i in s:\n                if i == '1':\n                    one += 1\n                else:\n                    zero += 1\n            m = abs(one - zero)\n            if m % y != 0:\n                print(m // y + 1)\n            else:\n                print(m // y)\n    except EOFError:\n        break", "from math import ceil\nfor i in range(int(input())):\n    ans = 0\n    (n, k) = map(int, input().split())\n    s = input()\n    count0 = s.count('0')\n    count1 = s.count('1')\n    ans = abs(count0 - count1)\n    ans = ceil(ans / k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = input()\n    d = abs(string.count('0') - string.count('1'))\n    if d:\n        predicting_answer = d // k\n        if d % k == 0:\n            print(predicting_answer)\n        else:\n            print(predicting_answer + 1)\n    else:\n        print(0)", "for i in range(int(input())):\n    (N, K) = map(int, input().split(' '))\n    s = str(input())\n    min1 = min(s.count('0'), s.count('1'))\n    max1 = max(s.count('0'), s.count('1'))\n    num = max1 - min1\n    if num == 0:\n        print(0)\n    else:\n        div = num // K\n        rem = num % K\n        if rem == 0:\n            print(div)\n        else:\n            print(div + 1)", "for i in range(int(input())):\n    (a, k) = map(int, input().split())\n    s = input()\n    l = list(s)\n    c0 = l.count('0')\n    c1 = l.count('1')\n    diff = abs(c0 - c1)\n    if diff % k == 0:\n        print(diff // k)\n    else:\n        print(diff // k + 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    o = s.count('1')\n    z = n - o\n    print(-(-abs(z - o) // k))", "import math, re\n\ndef getMaxBadness(S: str, K: int) -> int:\n    try:\n        c_0 = S.count('0')\n        c_1 = S.count('1')\n        B = math.ceil(abs(c_0 - c_1) / K)\n        return B\n    except Exception as e:\n        raise Exception('getMaxBadness: ' + str(e))\nT = int(input())\ntry:\n    for i in range(T):\n        (N, K) = map(int, input().split(' '))\n        S = str(input())\n        if N < 1 or N > 2 * 10 ** 5:\n            raise Exception('Input out of range (N): {}'.format(str(N)))\n        if K < 1 or K > 10 ** 9:\n            raise Exception('Input out of range (K): {}'.format(str(K)))\n        if len(S) != N:\n            raise Exception('Input binary string length mismatch: {N} != {len_S}'.format(N=N, len_S=str(len(S))))\n        print(str(getMaxBadness(S, K)))\nexcept Exception as e:\n    raise Exception(str(e))", "import math, re\n\ndef calBadness(s: str) -> int:\n    try:\n        c_0 = s.count('0')\n        c_1 = s.count('1')\n        return abs(c_0 - c_1)\n    except Exception as e:\n        raise Exception('calBadness: ' + str(e))\n\ndef getMaxBadness(S: str, K: int) -> int:\n    try:\n        c_0 = S.count('0')\n        c_1 = S.count('1')\n        B = math.ceil(abs(c_0 - c_1) / K)\n        return B\n    except Exception as e:\n        raise Exception('getMaxBadness: ' + str(e))\nT = int(input())\ntry:\n    for i in range(T):\n        (N, K) = map(int, input().split(' '))\n        S = str(input())\n        if N < 1 or N > 2 * 10 ** 5:\n            raise Exception('Input out of range (N): {}'.format(str(N)))\n        if K < 1 or K > 10 ** 9:\n            raise Exception('Input out of range (K): {}'.format(str(K)))\n        if len(S) != N:\n            raise Exception('Input binary string length mismatch: {N} != {len_S}'.format(N=N, len_S=str(len(S))))\n        print(str(getMaxBadness(S, K)))\nexcept Exception as e:\n    raise Exception(str(e))", "for i in range(int(input())):\n    (x, y) = map(int, input().split(' '))\n    binarystrin = input()\n    count0 = 0\n    count1 = 0\n    for i in binarystrin:\n        if i == '1':\n            count1 += 1\n        elif i == '0':\n            count0 += 1\n    counts = [count0, count1]\n    counts[0] *= -1\n    final = [0]\n    j = 0\n    while counts[0] != 0:\n        if j == len(final):\n            final += [0]\n        if j == y:\n            j = 0\n        final[j] -= 1\n        counts[0] += 1\n        j += 1\n    j = 0\n    while counts[1] != 0:\n        if j == len(final):\n            final += [0]\n        if j == y:\n            j = 0\n        final[j] += 1\n        counts[1] -= 1\n        j += 1\n    for i in range(len(final)):\n        if final[i] < 0:\n            final[i] *= -1\n    print(max(final))", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    b = input()\n    n = 0\n    for i in b:\n        if i == '1':\n            n += 1\n        else:\n            n -= 1\n    n = abs(n)\n    if n % k != 0:\n        print(n // k + 1)\n    else:\n        print(n // k)", "for p in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (co, cz) = (0, 0)\n    for i in range(n):\n        if s[i] == '1':\n            co += 1\n        else:\n            cz += 1\n    res = abs(co - cz)\n    res += k - 1\n    print(res // k)", "for p in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (co, cz) = (0, 0)\n    for i in range(n):\n        if s[i] == '1':\n            co += 1\n        else:\n            cz += 1\n    res = abs(co - cz)\n    res += k - 1\n    print(res // k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (co, cz) = (0, 0)\n    for i in range(n):\n        if s[i] == '1':\n            co += 1\n        else:\n            cz += 1\n    res = abs(co - cz)\n    res += k - 1\n    print(res // k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    o = s.count('1')\n    z = n - o\n    print(-(-abs(z - o) // k))", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import gcd\nfrom math import sqrt\nfrom collections import Counter\nfor _ in range(int(input())):\n    (a, K) = list(map(int, input().split()))\n    s = input()\n    z = s.count('0')\n    o = s.count('1')\n    x = a - z\n    k = abs(x - z)\n    k += (K - k % K) % K\n    print(k // K)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ones = s.count('1')\n    zeroes = n - ones\n    if ones == zeroes:\n        print(0)\n    else:\n        print(-(-(n - 2 * min(ones, zeroes)) // k))", "def solve():\n    (N, K) = map(int, input().split())\n    s = input()\n    O = s.count('1')\n    Z = N - O\n    k = abs(Z - O)\n    k += (K - k % K) % K\n    print(k // K)\n\ndef main():\n    T = int(input())\n    while T > 0:\n        solve()\n        T = T - 1\nmain()", "def solve():\n    (N, K) = map(int, input().split())\n    s = input()\n    O = s.count('1')\n    Z = N - O\n    k = abs(Z - O)\n    k += (K - k % K) % K\n    print(k // K)\n\ndef main():\n    T = int(input())\n    while T > 0:\n        solve()\n        T = T - 1\nmain()", "def solve():\n    (N, K) = map(int, input().split())\n    s = input()\n    O = s.count('1')\n    Z = N - O\n    k = abs(Z - O)\n    k += (K - k % K) % K\n    print(k // K)\n\ndef main():\n    T = int(input())\n    while T > 0:\n        solve()\n        T = T - 1\nmain()", "import math\n\ndef findAns(string, k):\n    c0 = string.count('0')\n    c1 = string.count('1')\n    remaning = abs(c0 - c1)\n    if remaning > 0 and remaning <= k:\n        print(1)\n    else:\n        print(math.ceil(remaning / k))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = input()\n    findAns(string, k)", "import math\n\ndef findAns(string, k):\n    c0 = string.count('0')\n    c1 = string.count('1')\n    remaning = abs(c0 - c1)\n    if remaning > 0 and remaning <= k:\n        print(1)\n    else:\n        print(math.ceil(remaning / k))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = input()\n    findAns(string, k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    one = 0\n    zero = 0\n    for i in range(n):\n        if s[i] == '1':\n            one += 1\n        else:\n            zero += 1\n    ans = abs(one - zero)\n    if ans == 0:\n        print(ans)\n    elif ans <= k:\n        print(1)\n    else:\n        print(int((ans + k - 1) / k))", "import math\n\ndef solve(n1, n2, string):\n    ones = string.count('1')\n    zeroes = string.count('0')\n    temp = abs(ones - zeroes)\n    if temp == 0:\n        return 0\n    else:\n        return math.ceil(temp / n2)\nn = int(input())\nresults = []\nfor i in range(0, n):\n    (n1, n2) = map(int, input().split())\n    string = input()\n    out = solve(n1, n2, string)\n    results.append(out)\nfor j in results:\n    print(j)", "import math\n\ndef findAns(string, k):\n    c0 = string.count('0')\n    c1 = string.count('1')\n    remaning = abs(c0 - c1)\n    if remaning > 0 and remaning <= k:\n        print(1)\n    else:\n        print(math.ceil(remaning / k))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = input()\n    findAns(string, k)", "import math\n\ndef findAns(string, k):\n    c0 = string.count('0')\n    c1 = string.count('1')\n    remaning = abs(c0 - c1)\n    if remaning > 0 and remaning <= k:\n        print(1)\n    else:\n        print(math.ceil(remaning / k))\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    string = input()\n    findAns(string, k)", "from math import ceil\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    S = input()[:N]\n    list1 = [int(i) for i in S]\n    (count0, count1) = (0, 0)\n    for item in list1:\n        if item == 1:\n            count1 += 1\n        else:\n            count0 += 1\n    z = abs(count0 - count1)\n    print(ceil(z / K))", "import math\nimport collections\nfor case in range(int(input())):\n    (_, subseq_num) = [int(num) for num in input().split()]\n    seq = [int(num) for num in input()]\n    counter = collections.Counter(seq)\n    frequencies = [tup[1] for tup in counter.most_common()]\n    if len(frequencies) > 1:\n        res = math.ceil((frequencies[0] - frequencies[1]) / subseq_num)\n    else:\n        res = math.ceil(frequencies[0] / subseq_num)\n    print(res)", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    o = 0\n    z = 0\n    str1 = input()\n    for i in str1:\n        if i == '0':\n            z = z + 1\n        else:\n            o = o + 1\n    if z > o:\n        diff = z - o\n    else:\n        diff = o - z\n    if diff == 0:\n        print(0)\n    elif diff % k == 0:\n        print(diff // k)\n    else:\n        print(diff // k + 1)", "tc = int(input())\nfor TC in range(tc):\n    (l, k) = map(int, input().split())\n    s = input()\n    z = s.count('0')\n    o = s.count('1')\n    ans = abs(z - o)\n    fin = ans // k\n    if ans % k != 0:\n        fin += 1\n    print(fin)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = input()\n    n0 = l.count('0')\n    n1 = l.count('1')\n    r = abs(n0 - n1)\n    if r == 0:\n        ans = 0\n    elif r <= k:\n        ans = 1\n    elif r % k == 0:\n        ans = r // k\n    else:\n        ans = r // k + 1\n    print(ans)", "test_cases = int(input())\nfor i in range(test_cases):\n    (total, div) = map(int, input().split(' '))\n    bin_whole = input()\n    count = [0, 0]\n    for i in range(len(bin_whole)):\n        if bin_whole[i] == '0':\n            count[0] += 1\n        elif bin_whole[i] == '1':\n            count[1] += 1\n    if abs(count[0] - count[1]) / div > int(abs(count[0] - count[1]) / div):\n        print(int(abs(count[0] - count[1]) / div) + 1)\n    else:\n        print(int(abs(count[0] - count[1]) / div))", "def solve():\n    (n, k) = map(int, input().split())\n    s = input()\n    ones = s.count('1')\n    diff = abs(n - 2 * ones)\n    if not diff:\n        an = 0\n    elif diff % k:\n        an = 1 + diff // k\n    else:\n        an = diff // k\n    return an\ntc = int(input())\nfor t in range(tc):\n    print(solve())", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ones = s.count('1')\n    diff = abs(n - 2 * ones)\n    if not diff:\n        an = 0\n    elif diff % k:\n        an = 1 + diff // k\n    else:\n        an = diff // k\n    print(an)", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    ones = input().count('1')\n    diff = abs(N - 2 * ones)\n    if not diff:\n        an = 0\n    elif diff % K:\n        an = 1 + diff // K\n    else:\n        an = diff // K\n    print(an)", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    ones = input().count('1')\n    diff = abs(N - 2 * ones)\n    if not diff:\n        an = 0\n    elif diff % K:\n        an = 1 + diff // K\n    else:\n        an = diff // K\n    print(an)", "for i in range(int(input())):\n    (N, K) = map(int, input().split())\n    ones = input().count('1')\n    diff = abs(N - 2 * ones)\n    if not diff:\n        an = 0\n    elif diff % K:\n        an = 1 + diff // K\n    else:\n        an = diff // K\n    print(an)", "ans = []\nfor _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    ones = input().count('1')\n    diff = abs(N - 2 * ones)\n    if not diff:\n        an = 0\n    elif diff % K:\n        an = 1 + diff // K\n    else:\n        an = diff // K\n    ans.append(an)\nprint(*ans, sep='\\n')", "ans = []\nfor _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    ones = input().count('1')\n    diff = abs(N - 2 * ones)\n    if not diff:\n        an = 0\n    elif diff == 1:\n        an = 1\n    elif not diff % K:\n        an = diff // K\n    else:\n        an = 1 + diff // K\n    ans.append(an)\nprint(*ans, sep='\\n')", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    z = 0\n    o = 0\n    for j in s:\n        if j == '0':\n            z += 1\n        else:\n            o += 1\n    a = min(z, o)\n    z -= a\n    o -= a\n    r = max(z, o)\n    ans = r // k\n    print(ans if r % k == 0 else ans + 1)", "from collections import Counter\nimport math\nt = int(input())\nfor test in range(t):\n    (N, K) = list(map(int, input().split(' ')))\n    S = input()\n    count = Counter(S)\n    ones = count['1']\n    zeros = count['0']\n    (maximum, minimum) = (max(ones, zeros), min(zeros, ones))\n    remnant = maximum - minimum\n    if remnant == 0:\n        print(0)\n    elif remnant <= K:\n        print(1)\n    else:\n        print(math.ceil(remnant / K))", "T = int(input())\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    S = input()\n    c1 = S.count('1')\n    c0 = S.count('0')\n    ex = abs(c1 - c0)\n    if ex == 0:\n        print(0)\n    elif K > ex:\n        print(1)\n    else:\n        print((ex % K != 0) + ex // K)", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = input()\n    n0 = l.count('0')\n    n1 = l.count('1')\n    r = abs(n0 - n1)\n    if r == 0:\n        ans = 0\n    elif r <= k:\n        ans = 1\n    elif r % k == 0:\n        ans = r // k\n    else:\n        ans = r // k + 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = s.count('0')\n    b = s.count('1')\n    (a, b) = (max(a, b), min(a, b))\n    q = a % k\n    if b < q:\n        print(a // k + 1)\n    elif b == q:\n        print(a // k)\n    else:\n        print(a // k - (b - q) // k)", "import sys\nfrom math import *\nfrom itertools import *\nfrom bisect import bisect, bisect_left\nfrom collections import deque, Counter, defaultdict as dd\nmod = 10 ** 9 + 7\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rls():\n    return list(map(str, input().split()))\n\ndef rm():\n    return map(int, input().split())\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef d2b(n):\n    s = bin(n).replace('0b', '')\n    return (34 - len(s)) * '0' + s\nfor _ in range(ri()):\n    (n, k) = rm()\n    a = input()\n    c0 = a.count('0')\n    c1 = n - c0\n    if c1 == c0:\n        print(0)\n        continue\n    if c0 > c1:\n        ans = (c0 - c1) // k\n        if (c0 - c1) % k != 0:\n            ans += 1\n    else:\n        ans = (c1 - c0) // k\n        if (c1 - c0) % k != 0:\n            ans += 1\n    print(ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split(' ')]\n    s = input()\n    x = 0\n    for i in range(n):\n        if s[i] == '0':\n            x += 1\n        else:\n            x -= 1\n    x = abs(x)\n    print(ceil(x / k))", "import math\ntest_cases = int(input())\nfor i in range(test_cases):\n    (n, k) = map(int, input().split())\n    s = input()\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    diff = abs(count_0 - count_1)\n    if diff == 0:\n        print(0)\n    elif diff <= k:\n        print(1)\n    elif diff > k:\n        print(math.ceil(diff / k))", "import math\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input().strip()\n    zeros = S.count('0')\n    ones = N - zeros\n    x = max(ones, zeros)\n    y = min(ones, zeros)\n    if x == y:\n        print(0)\n    elif x - y <= K:\n        print(1)\n    else:\n        print(math.ceil((x - y) / K))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (n0, n1) = (0, 0)\n    for i in s:\n        if i == '1':\n            n1 += 1\n        else:\n            n0 += 1\n    if k == 1:\n        print(abs(n0 - n1))\n    else:\n        r = abs(n0 - n1)\n        print((r + k - 1) // k)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (n0, n1) = (0, 0)\n    for i in s:\n        if i == '1':\n            n1 += 1\n        else:\n            n0 += 1\n    if k == 1:\n        print(abs(n0 - n1))\n    else:\n        r = abs(n0 - n1)\n        print((r + k - 1) // k)", "from collections import Counter\nimport math\nt = int(input())\nfor test in range(t):\n    (N, K) = list(map(int, input().split(' ')))\n    S = input()\n    count = Counter(S)\n    ones = count['1']\n    zeros = count['0']\n    (maximum, minimum) = (max(ones, zeros), min(zeros, ones))\n    remnant = maximum - minimum\n    if remnant == 0:\n        print(0)\n    elif remnant <= K:\n        print(1)\n    else:\n        print(math.ceil(remnant / K))", "from collections import Counter\nimport math\nt = int(input())\nfor test in range(t):\n    (N, K) = list(map(int, input().split(' ')))\n    S = input()\n    count = Counter(S)\n    ones = count['1']\n    zeros = count['0']\n    (maximum, minimum) = (max(ones, zeros), min(zeros, ones))\n    remnant = maximum - minimum\n    if remnant == 0:\n        print(0)\n    elif remnant <= K:\n        print(1)\n    else:\n        print(math.ceil(remnant / K))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (n0, n1) = (0, 0)\n    for i in s:\n        if i == '1':\n            n1 += 1\n        else:\n            n0 += 1\n    if k == 1:\n        print(abs(n0 - n1))\n    else:\n        r = abs(n0 - n1)\n        print((r + k - 1) // k)", "from collections import Counter\nimport math\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    S = Counter(list(input()))\n    ones = S['1']\n    zeros = S['0']\n    (maximum, minimum) = (max(ones, zeros), min(ones, zeros))\n    remnant = maximum - minimum\n    if remnant == 0:\n        print(0)\n    elif remnant < K:\n        print(1)\n    else:\n        print(math.ceil(remnant / K))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    total_1s = sum(map(int, list(s)))\n    total_0s = n - total_1s\n    each_1s = total_1s // k\n    left_1s = total_1s % k\n    each_0s = total_0s // k\n    left_0s = total_0s % k\n    container = [[each_1s, each_0s] for i in range(k)]\n    for i in range(left_1s):\n        container[i][0] += 1\n    for i in range(left_0s):\n        container[i][1] += 1\n    res = [abs(x - y) for (x, y) in container]\n    print(max(res))", "from collections import Counter\nimport math\nT = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    S = Counter(list(input()))\n    ones = S['1']\n    zeros = S['0']\n    (maximum, minimum) = (max(ones, zeros), min(ones, zeros))\n    remnant = maximum - minimum\n    if remnant == 0:\n        print(0)\n    elif remnant < K:\n        print(1)\n    else:\n        print(math.ceil(remnant / K))", "t = int(input())\nfor i in range(1, t + 1):\n    (n, k) = map(int, input().split())\n    s = input()\n    zeros = 0\n    ones = 0\n    for i in s:\n        if i == '0':\n            zeros += 1\n        else:\n            ones += 1\n    min_val = min(zeros, ones)\n    zeros -= min_val\n    ones -= min_val\n    left = max(zeros, ones)\n    res = left // k\n    if left % k != 0:\n        res += 1\n    print(res)", "import math\nfor t in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    c0 = s.count('0')\n    c1 = s.count('1')\n    a = c0 - c1 if c0 > c1 else c1 - c0\n    b = math.ceil(a / k)\n    print(b)\n    t -= 1", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c0 = s.count('0')\n    c1 = s.count('1')\n    v = abs(c1 - c0)\n    if v == 0:\n        print(0)\n    else:\n        print(math.ceil(v / k))", "import math\n\ndef ans(s, n, k):\n    s = list(s)\n    ones = s.count('1')\n    zeros = s.count('0')\n    return math.ceil(math.fabs(ones - zeros) / k)\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = list(map(int, input().split()))\n    d2 = input()\n    print(ans(d2, d[0], d[1]))\n    test_cases -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    (max_badness, ones_count, zeros_count) = (0, 0, 0)\n    for char in s:\n        if char == '1':\n            ones_count += 1\n        else:\n            zeros_count += 1\n    max_badness = abs(ones_count - zeros_count)\n    for badness in range(max_badness + 1):\n        if badness * k >= max_badness:\n            print(badness)\n            break", "n = int(input())\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    s = input()\n    c = 0\n    d = 0\n    for i in s:\n        if i == '0':\n            c = c + 1\n        else:\n            d = d + 1\n    if abs(c - d) % b == 0:\n        print(abs(c - d) // b)\n    else:\n        print(abs(c - d) // b + 1)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    string = str(input())\n    ones = 0\n    for bit in string:\n        if bit == '1':\n            ones += 1\n    zeros = n - ones\n    diff = abs(ones - zeros)\n    if diff % k == 0:\n        print(diff // k)\n    else:\n        print(diff // k + 1)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    b = input()\n    c0 = b.count('0')\n    c1 = b.count('1')\n    d = abs(c1 - c0)\n    print(math.ceil(d / k))", "import math\nfor i in range(int(input())):\n    (o, z) = (0, 0)\n    (a, b) = map(int, input().split())\n    s = input()\n    for j in s:\n        if j == '1':\n            o = o + 1\n        else:\n            z = z + 1\n    d = abs(o - z)\n    print(math.ceil(d / b))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    c1 = s.count('1')\n    c0 = n - c1\n    bd = abs(c0 - c1)\n    print(math.ceil(bd / k))", "for _ in range(int(input())):\n    (useless, k) = map(int, input().split(' '))\n    binstr = input()\n    c0 = binstr.count('0')\n    c1 = binstr.count('1')\n    d = abs(c1 - c0)\n    if d % k == 0:\n        print(int(d / k))\n    else:\n        print(d // k + 1)", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    x = abs(s.count('1') - s.count('0'))\n    print(ceil(x / k))", "import math as mm\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    a = s.count('1')\n    b = s.count('0')\n    c = abs(a - b)\n    if c == 0:\n        print(0)\n    elif k >= c:\n        print(1)\n    else:\n        print(mm.ceil(c / k))", "import math as mm\nfor _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = input()\n    a = s.count('1')\n    b = s.count('0')\n    c = abs(a - b)\n    if c == 0:\n        print(0)\n    elif k >= c:\n        print(1)\n    else:\n        print(mm.ceil(c / k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    s = str(input())\n    c0 = s.count('0')\n    c1 = s.count('1')\n    x = abs(c0 - c1)\n    (Q, rem) = divmod(x, k)\n    if c0 == c1:\n        print(0)\n    elif x == 1:\n        print(1)\n    elif rem == 0:\n        print(Q)\n    else:\n        print(Q + 1)", "from math import ceil as cl\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(cl(abs(s.count('1') - s.count('0')) / k))", "from math import ceil\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = input()\n    x = abs(a.count('1') - a.count('0'))\n    print(int(ceil(x / k)))", "import math\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    o = 0\n    z = 0\n    c = input()\n    for j in c:\n        if j == '0':\n            z += 1\n        else:\n            o += 1\n    print(math.ceil(abs(z - o) / b))"]