["t = int(input())\nfor i in range(t):\n    s = input()\n    a = 0\n    b = 0\n    c = 0\n    for j in range(len(s)):\n        x = (j + 1) * (len(s) - j)\n        if s[j] == '1':\n            a += x\n            x = x * -1\n        b += x\n        b = max(b, 0)\n        c = max(b, c)\n    print(c + a)", "t = int(input())\nfor i in range(t):\n    s = input()\n    a = 0\n    b = 0\n    c = 0\n    for j in range(len(s)):\n        x = (j + 1) * (len(s) - j)\n        if s[j] == '1':\n            a += x\n            x = x * -1\n        b += x\n        b = max(b, 0)\n        c = max(b, c)\n    print(c + a)", "t = int(input())\nfor i in range(t):\n    s = input()\n    a = 0\n    b = 0\n    c = 0\n    for j in range(len(s)):\n        x = (j + 1) * (len(s) - j)\n        if s[j] == '1':\n            a += x\n            x = x * -1\n        b += x\n        b = max(b, 0)\n        c = max(b, c)\n    print(c + a)", "t = int(input())\nfor i in range(t):\n    s = input()\n    a = 0\n    b = 0\n    c = 0\n    for j in range(len(s)):\n        x = (j + 1) * (len(s) - j)\n        if s[j] == '1':\n            a += x\n            x = x * -1\n        b += x\n        b = max(b, 0)\n        c = max(b, c)\n    print(c + a)", "t = int(input())\nfor i in range(t):\n    s = input()\n    a = 0\n    b = 0\n    c = 0\n    for j in range(len(s)):\n        x = (j + 1) * (len(s) - j)\n        if s[j] == '1':\n            a += x\n            x = x * -1\n        b += x\n        b = max(b, 0)\n        c = max(b, c)\n    print(c + a)", "for tea in range(int(input())):\n    s = [int(qwera) for qwera in list(input())]\n    n = len(s)\n    values = []\n    for i in range(n):\n        if s[i] == 1:\n            values.append(-(i + 1) * (n - i))\n        else:\n            values.append((i + 1) * (n - i))\n    curr = sum([-values[i] if s[i] == 1 else 0 for i in range(n)])\n    pfs = [0]\n    for j in values:\n        pfs.append(pfs[-1] + j)\n    mini = 0\n    best = 0\n    for k in range(1, n + 1):\n        best = max(best, pfs[k] - mini)\n        mini = min(pfs[k], mini)\n    print(best + curr)", "for tea in range(int(input())):\n    s = [int(qwera) for qwera in list(input())]\n    n = len(s)\n    values = []\n    for i in range(n):\n        if s[i] == 1:\n            values.append(-(i + 1) * (n - i))\n        else:\n            values.append((i + 1) * (n - i))\n    curr = sum([-values[i] if s[i] == 1 else 0 for i in range(n)])\n    pfs = [0]\n    for j in values:\n        pfs.append(pfs[-1] + j)\n    mini = 0\n    best = 0\n    for k in range(1, n + 1):\n        best = max(best, pfs[k] - mini)\n        mini = min(pfs[k], mini)\n    print(best + curr)", "for tea in range(int(input())):\n    s = [int(qwera) for qwera in list(input())]\n    n = len(s)\n    values = []\n    for i in range(n):\n        if s[i] == 1:\n            values.append(-(i + 1) * (n - i))\n        else:\n            values.append((i + 1) * (n - i))\n    curr = sum([-values[i] if s[i] == 1 else 0 for i in range(n)])\n    pfs = [0]\n    for j in values:\n        pfs.append(pfs[-1] + j)\n    mini = 0\n    best = 0\n    for k in range(1, n + 1):\n        best = max(best, pfs[k] - mini)\n        mini = min(pfs[k], mini)\n    print(best + curr)", "def maxSubarraySum(l):\n    localMax = globalMax = l[0]\n    for i in range(1, len(l)):\n        localMax = max(l[i], localMax + l[i])\n        if localMax > globalMax:\n            globalMax = localMax\n    return globalMax\nfor _ in range(int(input())):\n    s = input()\n    l = []\n    initialSum = 0\n    n = len(s)\n    for i in range(n):\n        f = (i + 1) * (n - i)\n        if s[i] == '1':\n            initialSum += f\n            l.append(-f)\n        else:\n            l.append(f)\n    m = maxSubarraySum(l)\n    if m > 0:\n        initialSum += m\n    print(initialSum)", "for _ in range(int(input())):\n    s = input()\n    a = 0\n    b = 0\n    c = 0\n    for i in range(len(s)):\n        x = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            a += x\n            x = x * -1\n        b += x\n        b = max(b, 0)\n        c = max(b, c)\n    print(c + a)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    l = len(s)\n    res = ans = m = 0\n    for i in range(l):\n        v = (i + 1) * (l - i)\n        if s[i] == '1':\n            ans += v\n            v = v * -1\n        m += v\n        m = max(m, 0)\n        res = max(m, res)\n    print(res + ans)", "from collections import Counter, defaultdict\nimport sys\nimport math\n\ndef sol(n, s):\n    wt = [0] * n\n    for i in range(n):\n        if i == 0 or i == n - 1:\n            wt[i] = n\n        else:\n            wt[i] = (i + 1) * (n - i)\n    max_end_here = 0\n    max_so_far = 0\n    c_sum = 0\n    for i in range(n):\n        if s[i] == '1':\n            c_sum += wt[i]\n            max_end_here -= wt[i]\n        else:\n            max_end_here += wt[i]\n        if max_end_here < 0:\n            max_end_here = 0\n        max_so_far = max(max_so_far, max_end_here)\n    return c_sum + max_so_far\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return str(input())\n\ndef invr():\n    return map(int, input().split())\nT = inp()\nfor i in range(T):\n    s = insr()\n    x = []\n    for i in range(len(s)):\n        if s[i] == '1' or s[i] == '0':\n            x.append(s[i])\n    s = x\n    n = len(s)\n    print(sol(n, s))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    res = maxi = ans = 0\n    for i in range(n):\n        sub = (i + 1) * (n - i)\n        if s[i] == '1':\n            ans += sub\n            sub = sub * -1\n        res += sub\n        res = max(res, 0)\n        maxi = max(maxi, res)\n    print(maxi + ans)", "for _ in range(int(input())):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor _ in range(ni()):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    cm_array = []\n    cm = 0\n    pv = s[0]\n    n = len(s)\n    tot = 0\n    for i in range(n):\n        v = s[i]\n        if v == '1':\n            tot += (i + 1) * (n - i)\n        if v == pv:\n            cm += (i + 1) * (n - i)\n        else:\n            if pv == '1':\n                cm = -cm\n            cm_array.append(cm)\n            pv = v\n            cm = (i + 1) * (n - i)\n    if pv == '1':\n        cm = -cm\n    cm_array.append(cm)\n    o_max = 0\n    ct = 0\n    for v in cm_array:\n        ct += v\n        if ct > o_max:\n            o_max = ct\n        if ct <= 0:\n            ct = 0\n    ans = tot + o_max\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = list(map(int, list(input())))\n    n = len(s)\n    a = [0] * n\n    c = 0\n    for i in range(n + 1 >> 1):\n        j = (i + 1) * (n - i)\n        c += j * s[i]\n        m = -1 if s[i] else 1\n        a[i] = m * j\n        if i != n - i - 1:\n            c += j * s[n - i - 1]\n            m = -1 if s[n - i - 1] else 1\n            a[n - i - 1] = m * j\n    p = 0\n    q = 0\n    for x in a:\n        p = max(0, p + x)\n        q = max(q, p)\n    print(c + q)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor _ in range(ni()):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor _ in range(ni()):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nfor _ in range(ni()):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "for _ in range(int(input())):\n    S = input()\n    ln = len(S)\n    tot = 0\n    mult = [0] * ln\n    for i in range(ln):\n        t = (i + 1) * (ln - i)\n        mult[i] = t\n        if S[i] == '1':\n            tot += t\n            mult[i] = -t\n    maxSoFar = -999999999999999\n    maxEndingHere = 0\n    for i in range(t):\n        maxEndingHere += mult[i]\n        if maxEndingHere > maxSoFar:\n            maxSoFar = maxEndingHere\n        if maxEndingHere < 0:\n            maxEndingHere = 0\n    if maxSoFar < 0:\n        maxSoFar = 0\n    print(tot + maxSoFar)", "for _ in range(int(input())):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "for _ in range(int(input())):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "for _ in range(int(input())):\n    S = input()\n    N = len(S)\n    res = cur = mx = 0\n    for i in range(N):\n        v = (i + 1) * (N - i)\n        if S[i] == '1':\n            res += v\n            v *= -1\n        cur += v\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(mx + res)", "for _ in range(int(input())):\n    S = input()\n    N = len(S)\n    vals = [0] * N\n    res = 0\n    for i in range(N):\n        if S[i] == '0':\n            vals[i] = (i + 1) * (N - i)\n        else:\n            vals[i] = -(i + 1) * (N - i)\n            res += -vals[i]\n    cur = mx = 0\n    for i in range(N):\n        cur = max(cur + vals[i], vals[i])\n        mx = max(mx, cur)\n    if mx > 0:\n        res += mx\n    print(res)", "for _ in range(int(input())):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "for _ in range(int(input())):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "def kadanes(a, size):\n    max_so_far = -float('inf')\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return (max_so_far, start, end)\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            ans += (i + 1) * (n - i)\n    arr = []\n    for i in range(n):\n        if s[i] == '1':\n            arr.append(-((i + 1) * (n - i)))\n        else:\n            arr.append((i + 1) * (n - i))\n    (maxx, start, end) = kadanes(arr, len(arr))\n    print(ans + max(0, maxx))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    arr = []\n    (prev, ind) = (0, 0)\n    bow = []\n    for i in range(n):\n        front = prev\n        bow.append(int(s[i]) * (i + 1) * (n - i))\n        if s[i] == '1':\n            prev -= (i + 1) * (n - i)\n        else:\n            prev += (i + 1) * (n - i)\n        prev = max(prev, 0)\n        if prev == 0 or front == 0:\n            ind = i\n        arr.append([prev, ind, i])\n    (maxy, start, end) = max(arr, key=lambda x: x[0])\n    print(sum(bow) + maxy)", "for _ in range(int(input())):\n    s = input()\n    ans = mx = cur = 0\n    for i in range(len(s)):\n        subarrays = (i + 1) * (len(s) - i)\n        if s[i] == '1':\n            ans += subarrays\n            subarrays *= -1\n        cur += subarrays\n        cur = max(cur, 0)\n        mx = max(mx, cur)\n    print(ans + mx)", "test = int(input())\nwhile test:\n    s = input()\n    n = len(s)\n    contribution = []\n    original_score = 0\n    for i in range(n):\n        contribution.append((i + 1) * (n - i))\n        if s[i] == '1':\n            original_score += contribution[i]\n            contribution[i] *= -1\n    maxi = curr_sum = 0\n    for i in contribution:\n        curr_sum += i\n        if curr_sum < 0:\n            curr_sum = 0\n        maxi = max(curr_sum, maxi)\n    if maxi > 0:\n        print(original_score + maxi)\n    else:\n        print(original_score)\n    test -= 1", "from sys import stdin\ninput = stdin.readline\n\ndef kadane(A):\n    max_so_far = 0\n    curr_max = 0\n    N = len(A)\n    for i in range(N):\n        curr_max += A[i]\n        if curr_max < 0:\n            curr_max = 0\n        elif max_so_far < curr_max:\n            max_so_far = curr_max\n    return max_so_far\n\ndef solve(S):\n    N = len(S)\n    S = [int(s) for s in S]\n    total = sum((S[i] * (i + 1) * (N - i) for i in range(N)))\n    flip = [(1 - 2 * S[i]) * (i + 1) * (N - i) for i in range(N)]\n    return total + kadane(flip)\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    S = input().strip()\n    print(solve(S))", "t = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    res = 0\n    lst = []\n    for i in range(n):\n        if s[i] == '0':\n            lst.append((i + 1) * (n - i))\n        else:\n            lst.append(-(i + 1) * (n - i))\n            res += (i + 1) * (n - i)\n    d = 0\n    cur = 0\n    for i in range(n):\n        cur += lst[i]\n        if cur <= 0:\n            cur = 0\n        else:\n            d = max(d, cur)\n    print(res + d)", "def I():\n    return input()\n\ndef II():\n    return int(input())\n\ndef solve():\n    s = I()\n    n = len(s)\n    res = 0\n    lst = []\n    for i in range(n):\n        if s[i] == '0':\n            lst.append((i + 1) * (n - i))\n        else:\n            lst.append(-(i + 1) * (n - i))\n            res += (i + 1) * (n - i)\n    d = 0\n    cur = 0\n    for i in range(n):\n        cur += lst[i]\n        if cur <= 0:\n            cur = 0\n        else:\n            d = max(d, cur)\n    print(res + d)\nfor _ in range(II()):\n    solve()", "maxint = 100000000000\n\ndef maxSubArraySum(a, size):\n    max_so_far = -maxint - 1\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\nfor t in range(int(input())):\n    s = str(input())\n    a = []\n    n = len(s)\n    if n % 2 == 0:\n        a.append(n)\n        for i in range(n - 2, 1, -2):\n            a.append(a[-1] + i)\n        a += reversed(a)\n    else:\n        a.append(n)\n        for i in range(n - 2, 0, -2):\n            a.append(a[-1] + i)\n        a += reversed(a)\n        a.pop(len(a) // 2)\n    total = 0\n    for i in range(n):\n        if s[i] == '1':\n            total += a[i]\n            a[i] = -a[i]\n    print(total + max(0, maxSubArraySum(a, n)))", "t = int(input())\nfor i in range(t):\n    s = list(input())\n    n = len(s)\n    score = 0\n    for j in range(n):\n        if s[j] == '1':\n            score = score + (j + 1) * (n - j)\n    maxscorediff = 0\n    max_ending_here = 0\n    for j in range(n):\n        diff = (j + 1) * (n - j)\n        if s[j] == '1':\n            diff = -diff\n        max_ending_here = max_ending_here + diff\n        if maxscorediff < max_ending_here:\n            maxscorediff = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    print(score + maxscorediff)", "from collections import defaultdict\nn = int(input())\nfor i in range(n):\n    p = input()\n    l = []\n\n    def maxSubArraySum(a, size):\n        max_so_far = -float('inf')\n        max_ending_here = 0\n        start = 0\n        end = 0\n        s = 0\n        for i in range(0, size):\n            if a[i] == '1':\n                max_ending_here -= (i + 1) * (len(a) - i)\n            else:\n                max_ending_here += (i + 1) * (len(a) - i)\n            if max_so_far < max_ending_here:\n                max_so_far = max_ending_here\n                start = s\n                end = i\n            if max_ending_here < 0:\n                max_ending_here = 0\n                s = i + 1\n        return (max_so_far, start, end)\n    (c, a, b) = maxSubArraySum(p, len(p))\n    l = []\n    if a == b and p[a] == '1' and (a == 0):\n        l = list(p)\n        ans = 0\n        for i in range(len(l)):\n            if l[i] == '1':\n                ans += (i + 1) * (len(p) - i)\n        print(ans)\n    else:\n        for i in range(len(p)):\n            if a <= i <= b:\n                if p[i] == '1':\n                    l.append('0')\n                    c += (i + 1) * (len(p) - i)\n                else:\n                    l.append('1')\n            else:\n                l.append(p[i])\n                if p[i] == '1':\n                    c += (i + 1) * (len(p) - i)\n        print(c)", "t = int(input())\n\ndef getctr(n):\n    res = [0] * n\n    i = 0\n    j = n - 1\n    v = n\n    while i <= j:\n        if i > 0:\n            res[i] = res[i - 1] + v\n            res[j] = res[j + 1] + v\n        else:\n            res[i] = n\n            res[j] = n\n        i += 1\n        j -= 1\n        v -= 2\n    return res\nfor _ in range(t):\n    s = list(map(int, input()))\n    n = len(s)\n    ctr = getctr(n)\n    p = [0]\n    pall = [0]\n    for i in range(n):\n        p.append(p[-1] + ctr[i] * s[i])\n        pall.append(pall[-1] + ctr[i])\n    newp = [pall[i] - 2 * p[i] for i in range(n + 1)]\n    res = p[-1]\n    minyet = float('inf')\n    for el in newp:\n        minyet = min(minyet, el)\n        res = max(res, el - minyet + p[-1])\n    print(res)", "iter = int(input())\nfor z in range(iter):\n    s = input()\n    n = len(s)\n    score = [0] * n\n    c = 0\n    m = 0\n    neg = 0\n    ans = 0\n    for i in range(len(s)):\n        score[i] = (i + 1) * (n - i)\n        if s[i] == '1':\n            ans += score[i]\n            score[i] = -score[i]\n    for i in range(n):\n        c += score[i]\n        if score[i] < 0:\n            neg += score[i]\n        if c <= 0:\n            c = 0\n            neg = 0\n        m = max(m, c)\n    print(ans + m)", "T = int(input())\nfor t in range(T):\n    S = [int(x) for x in input()]\n    N = len(S)\n    G = [i * (N - i + 1) for i in range(1, N + 1)]\n    G_nop = [G[i - 1] if S[i - 1] == 1 else 0 for i in range(1, N + 1)]\n    s = sum(G_nop)\n    max_diff = 0\n    cur_diff = 0\n    for i in range(N):\n        if S[i] == 0:\n            cur_diff += G[i]\n            max_diff = max(max_diff, cur_diff)\n        else:\n            cur_diff -= G[i]\n            cur_diff = max(cur_diff, 0)\n    print(s + max_diff)", "for _ in range(int(input())):\n    s = input()\n    con = []\n    ans = 0\n    for i in range(len(s)):\n        con.append((i + 1) * (len(s) - i))\n        if s[i] == '1':\n            ans += con[i]\n            con[i] *= -1\n    maxi = 0\n    curr = 0\n    for i in range(len(con)):\n        curr += con[i]\n        if curr < 0:\n            curr = 0\n        maxi = max(maxi, curr)\n    print(ans + maxi)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    arr = [0] * (n + 1)\n    bla = 0\n    for i in range(1, n + 1):\n        if s[i - 1] == '1':\n            arr[i] = -1 * i * (n - i + 1)\n            bla += i * (n - i + 1)\n        else:\n            arr[i] = i * (n - i + 1)\n    fin_ans = 0\n    dp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        x = s[i - 1]\n        dp[i] = max(dp[i - 1] + arr[i], arr[i])\n        fin_ans = max(fin_ans, dp[i])\n    print(bla + fin_ans)", "import sys\ninput = sys.stdin.readline\nfrom math import sqrt, ceil, floor\nfrom collections import defaultdict\n\ndef I():\n    return list(map(int, input().split()))\nfor _ in range(int(input())):\n    s = input().strip()\n    n = len(s)\n    val = [0] * n\n    for i in range(n):\n        val[i] = (i + 1) * (n - i)\n    val_til_now = 0\n    max_val = -1\n    sub = [-1, -1]\n    count = 0\n    for i in range(n):\n        count += 1\n        if s[i] == '1':\n            val_til_now -= val[i]\n        else:\n            val_til_now += val[i]\n        if val_til_now <= 0:\n            val_til_now = 0\n            count = 0\n        elif val_til_now > max_val:\n            max_val = val_til_now\n            sub = [i - count + 1, i]\n    l = []\n    l[:] = s\n    if sub != [-1, -1]:\n        for i in range(sub[0], sub[1] + 1):\n            if l[i] == '0':\n                l[i] = '1'\n            else:\n                l[i] = '0'\n    ans = 0\n    for i in range(n):\n        if l[i] == '1':\n            ans += val[i]\n    print(ans)", "from bisect import bisect_left\nfrom bisect import bisect_right\nfrom getopt import getopt\nimport re\nfrom tempfile import tempdir\nfrom traceback import print_tb\nfrom typing import DefaultDict\nimport math\nfrom collections import Counter, defaultdict\nfrom math import sqrt\nimport collections\nfrom sys import maxsize\nfrom itertools import combinations_with_replacement\nimport copy\nimport heapq\nfrom collections import deque\n\ndef sieve_erasthones(n):\n    cnt = 0\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef count_factors(n):\n    i = 1\n    c = 0\n    ans = []\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if n // i == i:\n                c += 1\n                ans.append(n // i)\n            else:\n                c += 2\n                ans.append(i)\n                ans.append(n // i)\n        i += 1\n    return ans\n\ndef ncr_modulo(n, r, p):\n    num = 1\n    den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef isprime(n):\n    prime_flag = 0\n    if n > 1:\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                prime_flag = 1\n                break\n        if prime_flag == 0:\n            return True\n        else:\n            return False\n    else:\n        return True\n\ndef smallestDivisor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n\n\ndef modular_exponentiation(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 != 0:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef number_of_primefactor(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 2:\n        l.append(n)\n    return l\n\ndef twosum(a, n, x):\n    rem = []\n    for i in range(x):\n        rem.append(0)\n    for i in range(n):\n        if a[i] < x:\n            rem[a[i] % x] += 1\n    for i in range(1, x // 2):\n        if rem[i] > 0 and rem[x - i] > 0:\n            return True\n    if i >= x // 2:\n        if x % 2 == 0:\n            if rem[x // 2] > 1:\n                return True\n            else:\n                return False\n        elif rem[x // 2] > 0 and rem[x - x // 2] > 0:\n            return True\n        else:\n            return False\n\ndef divSum(num):\n    result = 0\n    i = 2\n    while i <= math.sqrt(num):\n        if num % i == 0:\n            if i == num / i:\n                result = result + i\n            else:\n                result = result + (i + num / i)\n        i = i + 1\n    return result + 1 + num\n\ndef subsequence(str1, str2):\n    m = len(str1)\n    n = len(str2)\n    j = 0\n    i = 0\n    while j < m and i < n:\n        if str1[j] == str2[i]:\n            j = j + 1\n        i = i + 1\n    return j == m\n\ndef primeFactors(n):\n    d = defaultdict(lambda : 0)\n    while n % 2 == 0:\n        d[2] += 1\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            d[int(i)] += 1\n            n = n / i\n    if n > 2:\n        d[int(n)] += 1\n    return d\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef modInverse(b, m):\n    return pow(b, m - 2, m)\n\ndef modDivide(a, b, m):\n    a = a % m\n    inv = modInverse(b, m)\n    return inv * a % m\n\ndef gcdList(l):\n    a = l[0]\n    for i in range(1, len(l)):\n        a = math.gcd(a, l[i])\n    return a\n\ndef check(a, size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return [start, end]\n\ndef solve(t):\n    s = input()\n    n = len(s)\n    l = []\n    a = s[0]\n    curr = n\n    for i in range(1, n):\n        if s[i] == a:\n            curr += (i + 1) * (n - i)\n        else:\n            if a == '0':\n                l.append(curr)\n            else:\n                l.append(-curr)\n            a = s[i]\n            curr = (i + 1) * (n - i)\n    if a == '0':\n        l.append(curr)\n    else:\n        l.append(-curr)\n    [start, end] = check(l, len(l))\n    if len(l) == 1:\n        return abs(l[0])\n    ans = 0\n    for i in range(len(l)):\n        if i >= start and i <= end:\n            if l[i] > 0:\n                ans += abs(l[i])\n        elif l[i] < 0:\n            ans += abs(l[i])\n    return ans\nfor t in range(1, int(input()) + 1):\n    print(solve(t))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    s = [el for el in s]\n    diff = []\n    for (i, el) in enumerate(s):\n        if s[i] == '1':\n            diff.append((i + 1) * (n - i))\n            diff[-1] *= -1\n        else:\n            diff.append((i + 1) * (n - i))\n    ans = abs(sum([el for el in diff if el <= 0]))\n    l = 0\n    temp = 0\n    res = 0\n    for r in range(n):\n        temp += diff[r]\n        while temp < 0:\n            temp -= diff[l]\n            l += 1\n        res = max(res, temp)\n    print(ans + res)"]