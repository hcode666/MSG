["def snek(n):\n    return n & n - 1 == 0\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif snek(n) or snek(n + 1):\n        print('Alice')\n    elif snek(n + 2):\n        print('Bob')\n    elif n % 2 == 0:\n        print('Alice')\n    elif n % 2 == 1:\n        print('Bob')", "def snek(n):\n    return n & n - 1 == 0\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif snek(n) or snek(n + 1):\n        print('Alice')\n    elif snek(n + 2):\n        print('Bob')\n    elif n % 2 == 0:\n        print('Alice')\n    elif n % 2 == 1:\n        print('Bob')", "def snek(n):\n    return n & n - 1 == 0\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif snek(n) or snek(n + 1):\n        print('Alice')\n    elif snek(n + 2):\n        print('Bob')\n    elif n % 2 == 0:\n        print('Alice')\n    elif n % 2 == 1:\n        print('Bob')", "def albob(n):\n    return n & n - 1 == 0\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif albob(n) or albob(n + 1):\n        print('Alice')\n    elif albob(n + 2):\n        print('Bob')\n    elif n % 2 == 0:\n        print('Alice')\n    elif n % 2 == 1:\n        print('Bob')", "import math\n\ndef solve(n):\n    if n == 0:\n        return 0\n    elif n & 1:\n        return 1 ^ solve(n - 1)\n    elif n % 4 != 0:\n        return 1 ^ solve(n // 2)\n    return 1\ntry:\n    for _ in range(int(input())):\n        n = int(input())\n        fn = solve(n)\n        if fn:\n            print('Alice')\n        else:\n            print('Bob')\nexcept:\n    pass", "try:\n\n    def nextPowerOf2(n):\n        count = 0\n        if n and (not n & n - 1):\n            return n\n        while n != 0:\n            n >>= 1\n            count += 1\n        return 1 << count\n    for t in range(int(input())):\n        N = int(input())\n        if N == 1:\n            print('Alice')\n        elif N == 2:\n            print('Bob')\n        elif N == 3:\n            print('Alice')\n        elif N == 4:\n            print('Alice')\n        else:\n            temp = nextPowerOf2(N) - N\n            if temp <= 3:\n                if temp == 0 or temp == 1:\n                    print('Alice')\n                elif temp == 2 or temp == 3:\n                    print('Bob')\n            elif N % 2 == 0:\n                print('Alice')\n            else:\n                print('Bob')\nexcept:\n    pass", "def recur(n):\n    if n == 0:\n        return 0\n    if n % 2 != 0:\n        return not recur(n - 1)\n    if n % 4 != 0:\n        return not recur(n // 2)\n    return 1\nfor i in range(int(input())):\n    n = int(input())\n    cnt = recur(n)\n    print('Alice' if cnt != 0 else 'Bob')", "for i in range(int(input())):\n    n = int(input())\n    m = 0\n    while n:\n        if n % 4 == 0:\n            m += 1\n            break\n        if n % 2 == 0 and n % 4 != 0:\n            n //= 2\n            m += 1\n        else:\n            n -= 1\n            m += 1\n    if m % 2 == 1:\n        print('Alice')\n    else:\n        print('Bob')", "def solve():\n\n    def win(n):\n        if n == 0:\n            return 1\n        elif n & 1:\n            return not win(n - 1)\n        elif n % 4:\n            return not win(n // 2)\n        return 0\n    n = int(input())\n    if win(n) == 0:\n        return 'Alice'\n    return 'Bob'\nt = int(input())\nwhile t:\n    print(solve())\n    t -= 1", "def solve(n):\n    if n == 1:\n        return 'Alice'\n    if n == 2:\n        return 'Bob'\n    if n % 2 != 0:\n        if n & n + 1 == 0:\n            return 'Alice'\n        else:\n            return 'Bob'\n    if n + 2 & n + 1 == 0:\n        return 'Bob'\n    else:\n        return 'Alice'\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "def po(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print('Bob')\n    elif n == 1:\n        print('Alice')\n    elif n % 2 == 0:\n        if po(n + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n % 2 != 0:\n        if po(n + 1) == True:\n            print('Alice')\n        else:\n            print('Bob')", "def po(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print('Bob')\n    elif n == 1:\n        print('Alice')\n    elif n % 2 == 0:\n        if po(n + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n % 2 != 0:\n        if po(n + 1) == True:\n            print('Alice')\n        else:\n            print('Bob')", "def f(n):\n    if n == 0:\n        return False\n    if n % 2 == 1:\n        return not f(n - 1)\n    elif n % 4 != 0:\n        return not f(n // 2)\n    return True\nfor i in range(int(input())):\n    n = int(input())\n    ans = f(n)\n    if ans:\n        print('Alice')\n    else:\n        print('Bob')", "def is_a_power_of_two(n):\n    return n & n - 1 == 0\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif is_a_power_of_two(n) or is_a_power_of_two(n + 1):\n        print('Alice')\n    elif is_a_power_of_two(n + 2):\n        print('Bob')\n    elif n % 2 == 0:\n        print('Alice')\n    elif n % 2 == 1:\n        print('Bob')", "def win(n):\n    if n == 0:\n        return False\n    if n % 2 != 0:\n        return not win(n - 1)\n    elif n % 4 != 0:\n        return not win(n // 2)\n    return True\n\ndef main():\n    tc = int(input())\n    while tc > 0:\n        n = int(input())\n        if win(n):\n            print('Alice')\n        else:\n            print('Bob')\n        tc -= 1\nmain()", "def func5(n):\n    if n == 0:\n        return 0\n    elif n % 2 == 1:\n        ans = func5(n - 1)\n        if ans == 0:\n            return 1\n        else:\n            return 0\n    elif n % 4 == 0:\n        return 1\n    elif n % 2 == 0:\n        ans = func5(n // 2)\n        if ans == 0:\n            return 1\n        else:\n            return 0\nt = int(input())\nfor i in range(t):\n    m = int(input())\n    ans = func5(m)\n    if ans == 1:\n        print('Alice')\n    else:\n        print('Bob')", "for _ in range(int(input())):\n    n = int(input())\n    count = 1\n    while True:\n        if n % 2 != 0:\n            n -= 1\n            if n != 0:\n                count += 1\n        elif n % 4 == 0:\n            break\n        else:\n            count += 1\n            n = n // 2\n    if count % 2 != 0:\n        print('Alice')\n    else:\n        print('Bob')", "for _ in range(int(input())):\n    n = int(input())\n\n    def w(n):\n        if not n:\n            return 0\n        if n & 1:\n            return not w(n - 1)\n        if n % 4:\n            return not w(n // 2)\n        return 1\n    print('Alice' if w(n) else 'Bob')", "def memoize(func):\n    mem = {}\n\n    def memoizer(*args, **kwargs):\n        key = str(args) + str(kwargs)\n        if key not in mem:\n            mem[key] = func(*args, **kwargs)\n        return mem[key]\n    return memoizer\n\ndef inIntList():\n    return [int(x) for x in input().split()]\n\ndef inInt():\n    return int(input())\n\ndef outList(lst):\n    for data in lst:\n        print(data)\n\ndef solveA():\n    result = ['Too Early', 'Too Late', 'Take second dose now']\n    for _ in range(inInt()):\n        (D, L, R) = inIntList()\n        if D > R:\n            ans.append(result[1])\n        elif D < L:\n            ans.append(result[0])\n        else:\n            ans.append(result[2])\n\ndef solveB():\n    for _ in range(inInt()):\n        (N, A, B, C) = inIntList()\n        ans.append('YES' if N <= min([A + C, B]) else 'NO')\n\ndef solveC():\n    str_ = [str(i + 1) for i in range(10 ** 5)]\n    for _ in range(inInt()):\n        N = inInt()\n        if N % 4:\n            ans.append('NO')\n        else:\n            ans.append('YES')\n            ans.append(' '.join((a for a in str_[:N][:N // 4] + str_[:N][-N // 4:])))\n            ans.append(' '.join((b for b in str_[:N][N // 4:-N // 4])))\n\ndef solveD():\n    d = [0, 2, 1]\n    for _ in range(inInt()):\n        (L, R) = inIntList()\n        ans.append(1 + (R - L - d[L % 3]) // 3)\n\ndef solveE():\n\n    @memoize\n    def recursive(n):\n        if n == 0:\n            return False\n        elif n % 2:\n            return not recursive(n - 1)\n        elif n % 4 == 0:\n            return True\n        alice_win = False\n        i = 2\n        while n % i == 0:\n            if not recursive(n // i):\n                alice_win = True\n                break\n            i *= 2\n        return alice_win\n    result = ['Bob', 'Alice']\n    for _ in range(inInt()):\n        N = inInt()\n        ans.append(result[recursive(N)])\nans = []\nsolveE()\noutList(ans)", "def win(n):\n    if n == 0:\n        return 0\n    if n & 1:\n        return not win(n - 1)\n    if n % 4 != 0:\n        return not win(n // 2)\n    return 1\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    if win(n):\n        print('Alice')\n    else:\n        print('Bob')", "m = int(input())\nfor i in range(m):\n    n = int(input())\n\n    def win(n):\n        if n == 0:\n            return 0\n        elif n % 2 != 0:\n            return 1 - win(n - 1)\n        elif n % 4 != 0:\n            return 1 - win(n // 2)\n        else:\n            return 1\n    if win(n) == 1:\n        print('Alice')\n    else:\n        print('Bob')", "def win(n):\n    if n == 0:\n        return 0\n    elif n % 2 != 0:\n        return not win(n - 1)\n    elif n % 4 != 0:\n        return not win(n // 2)\n    return 1\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    if win(N):\n        print('Alice')\n    else:\n        print('Bob')", "def solve(n):\n    if n == 0:\n        return 0\n    elif n % 2 != 0:\n        return not solve(n - 1)\n    elif n % 4 != 0:\n        return not solve(n // 2)\n    return 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    flag = solve(n)\n    if flag == 0:\n        print('Bob')\n    else:\n        print('Alice')", "for _ in range(int(input())):\n    n = int(input())\n    msZero = -1\n    lsb = n & 1\n    i = 0\n    while n != 0:\n        if n & 1 == 0:\n            msZero = i\n        n >>= 1\n        i += 1\n    if msZero == -1:\n        print('Alice')\n    elif msZero == 0:\n        print('Bob')\n    elif lsb == 1:\n        print('Bob')\n    else:\n        print('Alice')", "def func(n):\n    if n == 0:\n        return 0\n    if n & 1:\n        return not func(n - 1)\n    if n % 4 != 0:\n        return not func(n // 2)\n    return 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if func(n):\n        print('Alice')\n    else:\n        print('Bob')", "for _ in range(int(input())):\n    a = int(input())\n    b = 0\n    while a:\n        b += 1\n        if a % 4 == 0:\n            break\n        elif a % 2 == 0:\n            a //= 2\n        else:\n            a -= 1\n    print('Alice' if b % 2 else 'Bob')", "NUM = int(input())\nans = []\nfor _ in range(NUM):\n    a = int(input())\n    b = 0\n    while a != 0:\n        b += 1\n        if a % 4 == 0:\n            break\n        elif a % 2 == 0:\n            a //= 2\n        else:\n            a -= 1\n    if b % 2 == 1:\n        ans.append('Alice')\n    else:\n        ans.append('Bob')\nfor i in ans:\n    print(i)", "def pow(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    N = int(input())\n    if N == 2:\n        print('Bob')\n    elif N == 1:\n        print('Alice')\n    elif N % 2 == 0:\n        if pow(N + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n    elif pow(N + 1) == True:\n        print('Alice')\n    else:\n        print('Bob')", "def whoWon(n):\n    if n == 1 or n % 4 == 0:\n        return True\n    if n % 2 == 0:\n        a = whoWon(n // 2)\n    else:\n        a = whoWon(n - 1)\n    if a == True:\n        return False\n    else:\n        return True\nfor i in range(int(input())):\n    n = int(input())\n    if whoWon(n):\n        print('Alice')\n    else:\n        print('Bob')", "def recur(n):\n    if n == 0:\n        return False\n    if n & 1:\n        return not recur(n - 1)\n    if n % 4 != 0:\n        return not recur(n // 2)\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if recur(n):\n        print('Alice')\n    else:\n        print('Bob')", "def solveFunc(n):\n    if n == 0:\n        return False\n    a1 = bin(n).replace('0b', '')\n    a1 = int(a1)\n    if a1 & 1:\n        return solveFunc(n - 1) == False\n    if n % 4 != 0:\n        return solveFunc(n // 2) == False\n    return True\ntestcases = int(input())\nwhile testcases:\n    n = int(input())\n    if solveFunc(n):\n        print('Alice')\n    else:\n        print('Bob')\n    testcases -= 1", "def win(n):\n    if n == 0:\n        return 0\n    if n % 2 != 0:\n        return not win(n - 1)\n    if n % 4 != 0:\n        return not win(n // 2)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    print('Alice' if win(n) else 'Bob')", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    i = 1\n    k = 0\n    while i <= n and k == 0:\n        if n % 2 != 0:\n            j = 0\n            while j <= n and k == 0:\n                if n == 2 * j + 1:\n                    print('Alice')\n                    k = 1\n                    break\n                j = 2 * j + 1\n            if k == 0:\n                print('Bob')\n                k = 1\n                break\n        else:\n            j = 0\n            while j <= n and k == 0:\n                if n == (2 * j + 1) * 2:\n                    print('Bob')\n                    k = 1\n                    break\n                j = 2 * j + 1\n            if k == 0:\n                print('Alice')\n                k = 1\n                break", "def win(n):\n    if n == 0:\n        return 0\n    elif n % 2 != 0:\n        return not win(n - 1)\n    elif n % 4 != 0:\n        return not win(n // 2)\n    return 1\nfor _ in range(int(input())):\n    num = int(input())\n    if win(num):\n        print('Alice')\n    else:\n        print('Bob')", "def win(n):\n    if n == 0:\n        return 0\n    elif n % 2 != 0:\n        return not win(n - 1)\n    elif n % 4 != 0:\n        return not win(n // 2)\n    return 1\nfor _ in range(int(input())):\n    num = int(input())\n    if win(num):\n        print('Alice')\n    else:\n        print('Bob')", "for _ in range(int(input())):\n    n = int(input())\n    x = 1\n    flag = 0\n    while n > 0:\n        if n % 2 != 0:\n            n -= 1\n        elif n % 4 == 0:\n            flag = 1\n        else:\n            n = n // 2\n        if x == 1:\n            x = 0\n        else:\n            x = 1\n        if flag:\n            break\n    if x == 0:\n        print('Alice')\n    else:\n        print('Bob')", "try:\n    T = int(input())\n    for z in range(T):\n        N = int(input())\n        x = -1\n        fl = 0\n        while N > 0:\n            if N % 2 == 1:\n                N -= 1\n            elif N % 4 == 0:\n                fl = 1\n            else:\n                N //= 2\n            if x == -1 or x == 0:\n                x = 1\n            else:\n                x = 0\n            if fl == 1:\n                break\n        if x == 1:\n            print('Alice')\n        else:\n            print('Bob')\nexcept:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    if n & 1:\n        n -= 1\n        flag = 0\n        while n > 0:\n            if n & 1:\n                n -= 1\n            count = 0\n            while n > 0 and n % 2 == 0:\n                n //= 2\n                count += 1\n            if count > 1:\n                flag = 1\n                break\n        if flag:\n            print('Bob')\n        else:\n            print('Alice')\n    else:\n        flag = 0\n        while n > 0:\n            if n & 1:\n                n -= 1\n            count = 0\n            while n > 0 and n % 2 == 0:\n                n //= 2\n                count += 1\n            if count > 1:\n                flag = 1\n                break\n        if flag:\n            print('Alice')\n        else:\n            print('Bob')", "def calc(n):\n    if n == 0:\n        return 0\n    if n % 2 != 0:\n        return not calc(n - 1)\n    if n % 4 != 0:\n        return not calc(n // 2)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    if calc(n):\n        print('Alice')\n    else:\n        print('Bob')", "t = int(input())\n\ndef win(n):\n    if n == 0:\n        return 0\n    if n % 2 != 0:\n        return not win(n - 1)\n    if n % 4 != 0:\n        return not win(n // 2)\n    return 1\nwhile t != 0:\n    n = int(input())\n    if win(n):\n        print('Alice')\n    else:\n        print('Bob')\n    t -= 1", "from functools import lru_cache\ncases = int(input())\nfor _ in range(cases):\n    n = int(input())\n\n    @lru_cache(None)\n    def firstwin(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 0\n        if n % 2 != 0:\n            return 1 - firstwin(n - 1)\n        else:\n            temp = n\n            cnt = 0\n            while temp % 2 == 0:\n                cnt += 1\n                temp //= 2\n            if cnt == 1:\n                return 1 - firstwin(temp)\n            else:\n                return 1\n    if firstwin(n):\n        print('Alice')\n    else:\n        print('Bob')", "from functools import lru_cache\n\n@lru_cache(None)\ndef helper(i):\n    if i == 1:\n        return True\n    if i == 2:\n        return False\n    if i % 2 == 0:\n        if i // 2 % 2 == 0:\n            return True\n        else:\n            return not helper(i // 2)\n    if i % 2 == 1:\n        return not helper(i - 1)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if helper(n):\n        print('Alice')\n    else:\n        print('Bob')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    count = 0\n    while n != 0:\n        count += 1\n        if n % 2 != 0:\n            n -= 1\n        elif n % 4 != 0:\n            n //= 2\n        else:\n            break\n    if count % 2 == 0:\n        print('Bob')\n    else:\n        print('Alice')", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    if N & 1:\n        if '0' in bin(N)[2:]:\n            print('Bob')\n        else:\n            print('Alice')\n    elif '0' in bin(N >> 1)[2:]:\n        print('Alice')\n    else:\n        print('Bob')", "def win(n):\n    if n == 0:\n        return 0\n    if n & 1:\n        return not win(n - 1)\n    if n % 4 != 0:\n        return not win(n // 2)\n    else:\n        return 1\nfor _ in range(int(input())):\n    n = int(input())\n    if win(n):\n        print('Alice')\n    else:\n        print('Bob')", "import math, os, io, heapq\nfrom sys import stdin, stdout\nfrom collections import Counter, deque, defaultdict\nfrom itertools import product\nimport bisect\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    n = getInt()\n    print('Alice' if check(n) else 'Bob')\n\ndef check(n):\n    if n == 1 or n % 4 == 0:\n        return True\n    if n % 2:\n        return not check(n - 1)\n    return not check(n // 2)\nfor _ in range(getInt()):\n    solve()", "def kk(n):\n    if n == 0:\n        return False\n    if n % 2 == 1:\n        return not kk(n - 1)\n    if n % 4 != 0:\n        return not kk(n // 2)\n    return True\nfor _ in range(int(input())):\n    if kk(int(input())):\n        print('Alice')\n    else:\n        print('Bob')", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif n % 2 == 0:\n        if n + 2 & n + 1 == 0:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n + 1 & n == 0:\n        print('Alice')\n    else:\n        print('Bob')", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif n % 2 == 0:\n        if n + 2 != 0 and n + 2 & n + 1 == 0:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n + 1 != 0 and n + 1 & n == 0:\n        print('Alice')\n    else:\n        print('Bob')", "def w(n):\n    if n == 0:\n        return 0\n    elif n % 2:\n        return not w(n - 1)\n    elif n % 4:\n        return not w(n // 2)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    c = w(n)\n    print('Alice' if c else 'Bob')", "def is_a_power_of_two(n):\n    return n & n - 1 == 0\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif is_a_power_of_two(n) or is_a_power_of_two(n + 1):\n        print('Alice')\n    elif is_a_power_of_two(n + 2):\n        print('Bob')\n    elif n % 2 == 0:\n        print('Alice')\n    elif n % 2 == 1:\n        print('Bob')", "def solve(n):\n    if n == 0:\n        return False\n    elif n % 2 == 1:\n        return not solve(n - 1)\n    elif n % 4 == 0:\n        return True\n    else:\n        return not solve(n // 2)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print('Alice' if solve(n) else 'Bob')", "def solve(n):\n    if n == 0:\n        return False\n    if n & 1:\n        return not solve(n - 1)\n    if n % 4 != 0:\n        return not solve(n // 2)\n    return True\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if solve(n):\n        print('Alice')\n    else:\n        print('Bob')", "def solve(n, player):\n    if n == 1:\n        return player\n    if n % 4 == 0:\n        return player\n    if n & 1 == 1:\n        return solve(n - 1, abs(1 - player))\n    return solve(n // 2, abs(1 - player))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = solve(n, 0)\n    if x == 0:\n        print('Alice')\n    else:\n        print('Bob')", "import sys\ninput = sys.stdin.readline\n\ndef I():\n    return input().strip()\n\ndef II():\n    return int(input().strip())\n\ndef LI():\n    return [*map(int, input().strip().split())]\nimport copy, string, math, time, functools, random, fractions\nfrom heapq import heappush, heappop, heapify\nfrom bisect import bisect_left, bisect_right\nfrom collections import deque, defaultdict, Counter, OrderedDict\nfrom itertools import permutations, chain, combinations, groupby\nfrom operator import itemgetter\nfrom types import GeneratorType\nfrom typing import Iterable, TypeVar, Union\nfor _ in range(II()):\n    n = II()\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif n == 3:\n        print('Alice')\n    else:\n        cnt = 0\n        adv = 0\n        fst = False\n        srt = True\n        while n:\n            if n % 2 == 0:\n                if n % 4 == 0:\n                    if not fst:\n                        fst = True\n                        if cnt % 2 == 1:\n                            srt = False\n                    adv += 1\n                while n % 2 == 0:\n                    n //= 2\n                    cnt += 1\n            else:\n                n -= 1\n                cnt += 1\n        if adv:\n            if srt:\n                print('Alice')\n            else:\n                print('Bob')\n        elif cnt % 2 == 1:\n            print('Alice')\n        else:\n            print('Bob')", "T = int(input())\nimport math\nfrom decimal import Decimal as d\nfor i in range(T):\n    n = int(input())\n    c = 0\n    while n != 0:\n        if n % 2 != 0:\n            n = n - 1\n            c += 1\n        elif n % 4 == 0:\n            c += 1\n            break\n        else:\n            n = int(d(n) / d(2))\n            c += 1\n    if c % 2 == 0:\n        print('Bob')\n    else:\n        print('Alice')", "inf = float('inf')\nimport sys\nimport pprint\nimport logging\nfrom logging import getLogger\nimport array\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\nlogging.basicConfig(format='%(message)s', level=logging.WARNING)\nlogger = getLogger(__name__)\nlogger.setLevel(logging.INFO)\n\ndef debug(msg, *args):\n    logger.info(f'{msg}={pprint.pformat(args)}')\n\ndef func():\n    (n,) = maps()\n    turn = 0\n    while n > 0:\n        if n % 2:\n            n -= 1\n        elif n % 4:\n            n //= 2\n        elif n % 4 == 0:\n            turn ^= 1\n            break\n        turn ^= 1\n    print('Alice' if turn else 'Bob')\n(t,) = maps()\nwhile t:\n    t -= 1\n    func()", "def solve(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    return False\nfor u in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif n % 2 == 0:\n        if solve(n + 2):\n            print('Bob')\n        else:\n            print('Alice')\n    elif solve(n + 1):\n        print('Alice')\n    else:\n        print('Bob')", "opps = {'Alice': 'Bob', 'Bob': 'Alice'}\nplayer = ['Alice', 'Bob']\n\ndef solve(n, player='Alice'):\n    if n == 0:\n        return 0\n    if n % 2 != 0:\n        return not solve(n - 1)\n    if n % 4 != 0:\n        return not solve(n // 2)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    if solve(n):\n        print('Alice')\n    else:\n        print('Bob')", "for i in range(int(input())):\n    n = int(input())\n\n    def win(n):\n        if n == 0:\n            return 0\n        if n % 2 != 0:\n            return 0 if win(n - 1) == 1 else 1\n        if n % 4 != 0:\n            return 0 if win(n // 2) == 1 else 1\n        return 1\n    if win(n) == 1:\n        print('Alice')\n    else:\n        print('Bob')", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    turn = True\n    while n > 0:\n        if turn:\n            turn = False\n        else:\n            turn = True\n        if n % 4 == 0:\n            break\n        if n % 2 == 1:\n            n -= 1\n            continue\n        if n % 2 == 0:\n            n //= 2\n            continue\n    if turn:\n        print('Bob')\n    else:\n        print('Alice')", "def check(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\n\ndef solve():\n    n = int(input())\n    i = 2\n    if n == 2:\n        print('Bob')\n        return\n    if n == 1:\n        print('Alice')\n        return\n    if n % 2 == 0:\n        if check(n + 2):\n            print('Bob')\n        else:\n            print('Alice')\n        return\n    if n % 2 != 0:\n        if check(n + 1):\n            print('Alice')\n        else:\n            print('Bob')\n        return\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print('Bob')\n    elif n == 1:\n        print('Alice')\n    elif n % 2 == 0:\n        if n + 2 & n + 1 == 0:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n % 2 != 0:\n        if n + 1 & n == 0:\n            print('Alice')\n        else:\n            print('Bob')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n % 2 != 0:\n        n = n - 1\n        count = 0\n        while n > 0:\n            n -= 1\n            count1 = 0\n            while n % 2 == 0:\n                n = n // 2\n                count1 += 1\n                n = n - 1\n                if count1 >= 2:\n                    count += 1\n        if count >= 2:\n            print('Bob')\n        elif count == 0:\n            print('Alice')\n        else:\n            print('Bob')\n    else:\n        count = 0\n        while n > 0:\n            n -= 1\n            count1 = 0\n            while n % 2 == 0:\n                n = n // 2\n                count1 += 1\n                n = n - 1\n                if count1 >= 2:\n                    count += 1\n        if count >= 2:\n            print('Alice')\n        elif count == 0:\n            print('Bob')\n        else:\n            print('Alice')", "def numCon(a, n):\n    s = ''\n    while a != 0:\n        s = str(a % n) + s\n        a = a // n\n    l1 = list(s)\n    return l1\nfor _ in range(int(input())):\n    n = int(input())\n    l = numCon(n, 2)\n    if l[-1] == '1':\n        if l.count('1') == len(l):\n            print('Alice')\n        else:\n            print('Bob')\n    elif l.count('1') == len(l) - 1:\n        print('Bob')\n    else:\n        print('Alice')", "import math\nimport sys\n\ndef highestPowerof2(n):\n    if n < 1:\n        return 0\n    res = 1\n    for i in range(8 * sys.getsizeof(n)):\n        curr = 1 << i\n        if curr > n:\n            break\n        res = curr\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    flag = 0\n    a = [0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 1, 0]\n    if n <= 20:\n        if a[n - 1] == 0:\n            print('Alice')\n            continue\n        else:\n            print('Bob')\n            continue\n    a1 = highestPowerof2(n)\n    a2 = 2 * a1\n    if n == a1 or n == a2:\n        print('Alice')\n        continue\n    if n == a2 - 2:\n        print('Bob')\n        continue\n    if n == a2 - 1:\n        print('Alice')\n        continue\n    l = n - a1\n    if l % 2 == 0:\n        print('Alice')\n    else:\n        print('Bob')", "def pow(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\nT = int(input())\nwhile T:\n    N = int(input())\n    if N == 2:\n        print('Bob')\n    elif N == 1:\n        print('Alice')\n    elif N % 2 == 0:\n        if pow(N + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n    elif pow(N + 1) == True:\n        print('Alice')\n    else:\n        print('Bob')\n    T -= 1", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif n % 2 == 0:\n        if n + 2 != 0 and n + 2 & n + 1 == 0:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n + 1 != 0 and n + 1 & n == 0:\n        print('Alice')\n    else:\n        print('Bob')", "def pow(x):\n    return x and (not x & x - 1)\nimport math\nt = int(input())\nfor a in range(t):\n    n = int(input())\n\n    def solve(n):\n        if n == 1:\n            return 'Alice'\n        if n == 2:\n            return 'Bob'\n        if n % 2 == 0:\n            if pow(n + 2):\n                return 'Bob'\n            else:\n                return 'Alice'\n        if n % 2 != 0:\n            if pow(n + 1):\n                return 'Alice'\n            else:\n                return 'Bob'\n    print(solve(n))", "def pow(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\nT = int(input())\nwhile T:\n    N = int(input())\n    if N == 2:\n        print('Bob')\n    elif N == 1:\n        print('Alice')\n    elif N % 2 == 0:\n        if pow(N + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n    elif pow(N + 1) == True:\n        print('Alice')\n    else:\n        print('Bob')\n    T -= 1", "t = int(input())\nfor i in range(t):\n    p = int(input())\n    if p == 1:\n        print('Alice')\n    elif p == 2:\n        print('Bob')\n    elif p % 2 != 0:\n        if p + 1 != 0 and p + 1 & p == 0:\n            print('Alice')\n        else:\n            print('Bob')\n    elif p % 2 == 0:\n        if p + 2 != 0 and p + 2 & p + 1 == 0:\n            print('Bob')\n        else:\n            print('Alice')", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = decimalToBinary(n)[::-1]\n    i = 0\n    while s[i] == '0':\n        i += 1\n    if i > 1:\n        print('Alice')\n    else:\n        if i == 0:\n            f = 1\n        else:\n            f = 0\n        for i in range(i, len(s)):\n            if s[i] == '0':\n                if f == 1:\n                    f = 0\n                    break\n                else:\n                    f = 1\n                    break\n        if f == 1:\n            print('Alice')\n        else:\n            print('Bob')", "def is_a_power_of_two(n):\n    return n & n - 1 == 0\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif is_a_power_of_two(n) or is_a_power_of_two(n + 1):\n        print('Alice')\n    elif is_a_power_of_two(n + 2):\n        print('Bob')\n    elif n % 2 == 0:\n        print('Alice')\n    elif n % 2 == 1:\n        print('Bob')", "t = int(input())\nfor i in range(t):\n    p = int(input())\n    if p == 1:\n        print('Alice')\n    elif p == 2:\n        print('Bob')\n    elif p % 2 != 0:\n        if p + 1 != 0 and p + 1 & p == 0:\n            print('Alice')\n        else:\n            print('Bob')\n    elif p % 2 == 0:\n        if p + 2 != 0 and p + 2 & p + 1 == 0:\n            print('Bob')\n        else:\n            print('Alice')", "t = int(input())\nx = []\nfor z in range(t):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n        x.append('W')\n    elif n == 2:\n        print('Bob')\n        x.append('L')\n    elif n % 2 != 0:\n        if n + 1 & n == 0:\n            print('Alice')\n            x.append('W')\n        else:\n            print('Bob')\n            x.append('L')\n    elif n & n - 1 == 0:\n        print('Alice')\n        x.append('W')\n    else:\n        c = 0\n        h = n\n        while h % 2 == 0:\n            h = h // 2\n            c += 1\n        if h + 1 & h == 0:\n            if c >= 2:\n                print('Alice')\n                x.append('W')\n            else:\n                print('Bob')\n                x.append('L')\n        else:\n            print('Alice')", "def hello():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        if n == 1:\n            print('Alice')\n        elif n == 2:\n            print('Bob')\n        elif n % 2 == 0:\n            if helper(n + 2) == True:\n                print('Bob')\n            else:\n                print('Alice')\n        elif helper(n + 1) == True:\n            print('Alice')\n        else:\n            print('Bob')\n\ndef helper(x):\n    if x != 0 and x & x - 1 == 0:\n        return True\n    else:\n        return False\nhello()", "from math import log, ceil\n\ndef solve(n):\n    if n == 1:\n        return 'Alice'\n    if n == 2:\n        return 'Bob'\n    if n == 3:\n        return 'Alice'\n    if n == 4:\n        return 'Alice'\n    k = 2\n    while k < n:\n        k <<= 1\n    c = k\n    if n == c or n == c - 1:\n        return 'Alice'\n    if n == c - 2 or n == c - 3:\n        return 'Bob'\n    if n % 2 == 0:\n        return 'Alice'\n    return 'Bob'\nt = int(input().strip())\ninputs = []\nfor _ in range(t):\n    n = int(input().strip())\n    inputs.append(n)\nfor n in inputs:\n    print(solve(n))", "def check(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\n\ndef solve():\n    n = int(input())\n    i = 2\n    if n == 2:\n        print('Bob')\n        return\n    if n == 1:\n        print('Alice')\n        return\n    if n % 2 == 0:\n        if check(n + 2):\n            print('Bob')\n        else:\n            print('Alice')\n        return\n    if n % 2 != 0:\n        if check(n + 1):\n            print('Alice')\n        else:\n            print('Bob')\n        return\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "def bol(n):\n    if n != 0 and n & n - 1 == 0:\n        return 1\n    else:\n        return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    t = 0\n    if n == 2:\n        print('Bob')\n    elif n == 1:\n        print('Alice')\n    elif n % 2 == 0:\n        if bol(n + 2) == 1:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n % 2 != 0:\n        if bol(n + 1) == 1:\n            print('Alice')\n        else:\n            print('Bob')", "def pow(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    return False\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 2:\n        print('Bob')\n    elif n == 1:\n        print('Alice')\n    elif n % 2 == 0:\n        if pow(n + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n % 2 != 0:\n        if pow(n + 1) == True:\n            print('Alice')\n        else:\n            print('Bob')", "def check(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\n\ndef solve():\n    n = int(input())\n    i = 2\n    if n == 2:\n        print('Bob')\n        return\n    if n == 1:\n        print('Alice')\n        return\n    if n % 2 == 0:\n        if check(n + 2):\n            print('Bob')\n        else:\n            print('Alice')\n        return\n    if n % 2 != 0:\n        if check(n + 1):\n            print('Alice')\n        else:\n            print('Bob')\n        return\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "def check(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\n\ndef solve():\n    n = int(input())\n    hashMap = {}\n    i = 2\n    if n == 2:\n        print('Bob')\n        return\n    if n == 1:\n        print('Alice')\n        return\n    if n % 2 == 0:\n        if check(n + 2):\n            print('Bob')\n        else:\n            print('Alice')\n        return\n    if n % 2 != 0:\n        if check(n + 1):\n            print('Alice')\n        else:\n            print('Bob')\n        return\nt = int(input())\nwhile t:\n    solve()\n    t -= 1", "def power(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\ntry:\n    for T in range(int(input())):\n        N = int(input())\n        if N == 2:\n            print('Bob')\n        elif N == 1:\n            print('Alice')\n        elif N % 2 == 0:\n            if power(N + 2) == True:\n                print('Bob')\n            else:\n                print('Alice')\n        elif N % 2 != 0:\n            if power(N + 1) == True:\n                print('Alice')\n            else:\n                print('Bob')\nexcept:\n    pass", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    f = 0\n    x = n\n    if n % 2:\n        n -= 1\n        c = 0\n        while n != 0:\n            s = 0\n            while n % 2 == 0:\n                s += 1\n                n = n // 2\n            n -= 1\n            if s > 1:\n                c += 1\n        if c > 1:\n            f = 0\n        elif c % 2 == 0:\n            f = 1\n        else:\n            f = 0\n    else:\n        c = 0\n        while n != 0:\n            s = 0\n            while n % 2 == 0:\n                s += 1\n                n = n // 2\n            n -= 1\n            if s > 1:\n                c += 1\n        if c > 1:\n            f = 1\n        elif c % 2 == 0:\n            f = 0\n        else:\n            f = 1\n    if f == 1:\n        sys.stdout.write('Alice\\n')\n    else:\n        sys.stdout.write('Bob\\n')", "def pow(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\n\ndef solve():\n    n = int(input())\n    i = 2\n    if n == 2:\n        print('Bob')\n        return\n    if n == 1:\n        print('Alice')\n        return\n    if n % 2 == 0:\n        if pow(n + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n        return\n    if n % 2 != 0:\n        if pow(n + 1) == True:\n            print('Alice')\n        else:\n            print('Bob')\n        return\nt = int(input())\nfor i in range(t):\n    solve()", "def pow(N):\n    if N != 0 and N & N - 1 == 0:\n        return True\n    return False\n\ndef func(N):\n    if N == 2:\n        return 'Bob'\n    if N == 1:\n        return 'Alice'\n    if N % 2 == 0:\n        if pow(N + 2):\n            return 'Bob'\n        return 'Alice'\n    else:\n        if pow(N + 1):\n            return 'Alice'\n        return 'Bob'\nfor t in range(int(input())):\n    N = int(input())\n    print(func(N))", "def power(n):\n    if n == 0:\n        return False\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n = n // 2\n    return True\ntry:\n    for T in range(int(input())):\n        N = int(input())\n        if N == 2:\n            print('Bob')\n        elif N == 1:\n            print('Alice')\n        elif N % 2 == 0:\n            if power(N + 2) == True:\n                print('Bob')\n            else:\n                print('Alice')\n        elif N % 2 != 0:\n            if power(N + 1) == True:\n                print('Alice')\n            else:\n                print('Bob')\nexcept:\n    pass", "def p(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    n = int(input())\n    i = 2\n    if n == 1:\n        print('Alice')\n        continue\n    if n == 2:\n        print('Bob')\n        continue\n    if n % 2 == 0:\n        if p(n + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n    elif p(n + 1) == True:\n        print('Alice')\n    else:\n        print('Bob')", "def pow(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\n\ndef solve():\n    n = int(input())\n    i = 2\n    if n == 2:\n        print('Bob')\n        return\n    if n == 1:\n        print('Alice')\n        return\n    if n % 2 == 0:\n        if pow(n + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n        return\n    if n % 2 != 0:\n        if pow(n + 1) == True:\n            print('Alice')\n        else:\n            print('Bob')\n        return\nt = int(input())\nfor i in range(t):\n    solve()", "test_cases = int(input())\npowers = {4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976}\nfor test in range(test_cases):\n    A = int(input())\n    if A == 1:\n        print('Alice')\n    elif A == 2:\n        print('Bob')\n    elif A % 2 == 0:\n        if {A + 2}.intersection(powers):\n            print('Bob')\n        else:\n            print('Alice')\n    elif {A - 1 + 2}.intersection(powers):\n        print('Alice')\n    else:\n        print('Bob')", "def func(val):\n    return True if val & val - 1 == 0 else False\ntest = int(input())\nfor t in range(test):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif n % 2 != 0:\n        print('Alice' if func(n + 1) else 'Bob')\n    else:\n        print('Bob' if func(n + 2) else 'Alice')", "def apow(x):\n    if x != 0 and x & x - 1 == 0:\n        return True\n    return False\nfor tc in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('Alice')\n    elif n == 2:\n        print('Bob')\n    elif n % 2 == 0:\n        if apow(n + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n    elif n % 2 != 0:\n        if apow(n + 1) == True:\n            print('Alice')\n        else:\n            print('Bob')", "for _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        if n == 1:\n            print('Alice')\n        else:\n            print('Bob')\n    elif n % 2 != 0:\n        if n + 1 & n == 0:\n            print('Alice')\n        else:\n            print('Bob')\n    elif n + 2 & n + 1 == 0:\n        print('Bob')\n    else:\n        print('Alice')", "import math\nimport random as rd\nimport bisect\nimport collections\n\ndef combination(n, r):\n    return math.comb(n, r)\n\ndef listing():\n    return list(map(int, input().split()))\n\ndef intp():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef inpspl():\n    return input().split()\n\ndef mapping():\n    return map(int, input().split(' '))\n\ndef sqrt(n):\n    return math.sqrt(n)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef p(s):\n    print(f'{s}')\n\ndef lsetl(lst):\n    return list(set(lst))\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(abs(n - r))\n\ndef frequencyofall(lst):\n    return dict(collections.Counter(lst))\n\ndef ispowerof2(n):\n    return n & n - 1 == 0\n\ndef ispowerof3(n):\n    return math.log10(n) / math.log10(3) % 1 == 0\n\ndef dictionarysort(d):\n    return collections.OrderedDict(sorted(d.items()))\n\ndef bintoint(s):\n    return int(s, 2)\n\ndef po(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\n\ndef solve():\n    for _ in range(intp()):\n        n = intp()\n        i = 2\n        if n == 2:\n            p('Bob')\n            continue\n        if n == 1:\n            p('Alice')\n            continue\n        if n % 2 == 0:\n            if po(n + 2) == True:\n                p('Bob')\n            else:\n                p('Alice')\n        elif po(n + 1) == True:\n            p('Alice')\n        else:\n            p('Bob')\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n\n    def f(i):\n        if i == 1:\n            return True\n        if i == 2:\n            return False\n        if i % 2:\n            return i & i + 1 == 0\n        return i + 1 & i + 2 != 0\n    print('Alice' if f(n) else 'Bob')", "def pow(n):\n    if n != 0 and n & n - 1 == 0:\n        return True\n    else:\n        return False\n\ndef solve():\n    n = int(input())\n    i = 2\n    if n == 2:\n        print('Bob')\n        return\n    if n == 1:\n        print('Alice')\n        return\n    if n % 2 == 0:\n        if pow(n + 2) == True:\n            print('Bob')\n        else:\n            print('Alice')\n        return\n    if n % 2 != 0:\n        if pow(n + 1) == True:\n            print('Alice')\n        else:\n            print('Bob')\n        return\nt = int(input())\nfor i in range(t):\n    solve()"]