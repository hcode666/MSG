["testcase = int(input())\nfor case in range(testcase):\n    n = int(input())\n    arr = input()\n    if arr[0] == '0' or arr[1] == '0' or arr[n] == '0':\n        print('No')\n    else:\n        print('Yes')\n        ans = [0]\n        mex = []\n        mex_n = []\n        for i in range(1, n):\n            if arr[i] == '1':\n                mex.append(i)\n            else:\n                mex_n.append(i)\n        ans += mex_n + mex\n        for i in ans:\n            print(i, end=' ')\n        print()", "testcase = int(input())\nfor case in range(testcase):\n    n = int(input())\n    arr = input()\n    if arr[0] == '0' or arr[1] == '0' or arr[n] == '0':\n        print('No')\n    else:\n        print('Yes')\n        ans = [0]\n        mex = []\n        mex_n = []\n        for i in range(1, n):\n            if arr[i] == '1':\n                mex.append(i)\n            else:\n                mex_n.append(i)\n        ans += mex_n + mex\n        for i in ans:\n            print(i, end=' ')\n        print()", "testcase = int(input())\nfor case in range(testcase):\n    n = int(input())\n    arr = input()\n    if arr[0] == '0' or arr[1] == '0' or arr[n] == '0':\n        print('No')\n    else:\n        print('Yes')\n        ans = [0]\n        mex = []\n        mex_n = []\n        for i in range(1, n):\n            if arr[i] == '1':\n                mex.append(i)\n            else:\n                mex_n.append(i)\n        ans += mex_n + mex\n        for i in ans:\n            print(i, end=' ')\n        print()", "testcase = int(input())\nfor case in range(testcase):\n    n = int(input())\n    arr = input()\n    if arr[0] == '0' or arr[1] == '0' or arr[n] == '0':\n        print('No')\n    else:\n        print('Yes')\n        ans = [0]\n        mex = []\n        mex_n = []\n        for i in range(1, n):\n            if arr[i] == '1':\n                mex.append(i)\n            else:\n                mex_n.append(i)\n        ans += mex_n + mex\n        for i in ans:\n            print(i, end=' ')\n        print()", "testcase = int(input())\nfor case in range(testcase):\n    n = int(input())\n    arr = input()\n    if arr[0] == '0' or arr[1] == '0' or arr[n] == '0':\n        print('No')\n    else:\n        print('Yes')\n        ans = [0]\n        mex = []\n        mex_n = []\n        for i in range(1, n):\n            if arr[i] == '1':\n                mex.append(i)\n            else:\n                mex_n.append(i)\n        ans += mex_n + mex\n        for i in ans:\n            print(i, end=' ')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = input()\n    ans = list(range(n))\n    if l[0] == '0' or l[1] == '0' or l[-1] == '0':\n        print('No')\n    else:\n        print('Yes')\n        for i in range(2, n):\n            if l[i] == '0':\n                (ans[i - 1], ans[i]) = (ans[i], ans[i - 1])\n        for i in ans:\n            print(i, end=' ')\n        print()", "import math, os, io, heapq\nfrom functools import reduce\nfrom sys import stdin, stdout\nfrom collections import Counter, deque, defaultdict\nfrom itertools import product\nimport bisect\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    (n, s) = (getInt(), input())\n    if s[-1] == '0' or s[0] == '0' or s[1] == '0':\n        print('No')\n        return\n    (inc, exc) = ([], [])\n    for i in range(2, n):\n        if s[i] == '1':\n            inc.append(i)\n        else:\n            exc.append(i)\n    print('Yes')\n    print(*[0, *exc, 1, *inc])\nfor _ in range(getInt()):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if not (s[0] == '0' or s[1] == '0' or s[n] == '0'):\n        print('Yes')\n        temp = 1\n        index = 2\n        print(0, end=' ')\n        while index < n:\n            if s[index] == '0':\n                print(index, end=' ')\n            else:\n                print(temp, end=' ')\n                temp = index\n            index += 1\n        print(temp, end=' ')\n        print()\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    l = [i for i in range(n)]\n    for i in range(n):\n        if s[i] == '0':\n            (l[i], l[i - 1]) = (l[i - 1], l[i])\n    if s[n] == '1' and s[0] == '1' and (s[1] == '1'):\n        print('Yes')\n        print(*l)\n    else:\n        print('No')", "testcase = int(input())\nfor case in range(testcase):\n    n = int(input())\n    b = input()\n    if b[0] == '0' or b[1] == '0' or b[-1] == '0':\n        print('No')\n    else:\n        print('Yes')\n        mex = []\n        mex_notneeded = []\n        ans = ['0']\n        for i in range(1, n):\n            if b[i] == '1':\n                mex.append(i)\n            else:\n                mex_notneeded.append(i)\n        for j in range(len(mex_notneeded)):\n            ans.append(str(mex_notneeded[j]))\n        for k in range(len(mex)):\n            ans.append(str(mex[k]))\n        print(' '.join(ans))", "for T in range(int(input())):\n    N = int(input())\n    A = input()\n    if A[0] == '0' or A[1] == '0' or A[N] == '0':\n        print('No')\n    else:\n        (L1, L2) = ([0], [1])\n        for i in range(2, N):\n            L1.append(i) if A[i] == '0' else L2.append(i)\n        print('Yes')\n        print(*L1, *L2, sep=' ')", "for T in range(int(input())):\n    N = int(input())\n    A = input()\n    if A[0] == '0' or A[1] == '0' or A[N] == '0':\n        print('No')\n    else:\n        (L1, L2) = ([0], [1])\n        for i in range(2, len(A) - 1):\n            L1.append(i) if A[i] == '0' else L2.append(i)\n        print('Yes')\n        print(*L1, *L2, sep=' ')", "testcase = int(input())\nfor case in range(testcase):\n    n = int(input())\n    b = input()\n    if b[0] == '0' or b[1] == '0' or b[-1] == '0':\n        print('No')\n    else:\n        print('Yes')\n        mex_possible = []\n        mex_notneeded = []\n        for i in range(1, n):\n            if b[i] == '1':\n                mex_possible.append(i)\n            else:\n                mex_notneeded.append(i)\n        ans = [0]\n        for x in range(len(mex_notneeded)):\n            ans.append(mex_notneeded[x])\n        for y in range(len(mex_possible)):\n            ans.append(mex_possible[y])\n        print(*ans)", "import sys\nint1 = lambda x: int(x) - 1\npDB = lambda *x: print(*x, end='\\n', file=sys.stderr)\np2D = lambda x: print(*x, sep='\\n', end='\\n\\n', file=sys.stderr)\n\ndef II():\n    return int(sys.stdin.readline())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef LLI(rows_number):\n    return [LI() for _ in range(rows_number)]\n\ndef LI1():\n    return list(map(int1, sys.stdin.readline().split()))\n\ndef LLI1(rows_number):\n    return [LI1() for _ in range(rows_number)]\n\ndef SI():\n    return sys.stdin.readline().rstrip()\ndij = [(0, 1), (-1, 0), (0, -1), (1, 0)]\ninf = 4294967295\nmd = 10 ** 9 + 7\n\ndef solve():\n    n = II()\n    s = SI()\n    if s[0] == '0' or s[1] == '0' or s[-1] == '0':\n        print('No')\n        return\n    ll = [0]\n    rr = [1]\n    for (i, c) in enumerate(s[2:-1], 2):\n        if c == '0':\n            ll.append(i)\n        else:\n            rr.append(i)\n    print('Yes')\n    print(*ll + rr)\ntestnumber = II()\nfor testcase in range(testnumber):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    if s[0] == '0' or s[1] == '0' or s[-1] == '0':\n        print('No')\n        continue\n    (zr, on) = ([0], [1])\n    for (i, vl) in enumerate(s[2:-1], start=2):\n        if vl == '1':\n            on.append(i)\n        else:\n            zr.append(i)\n    print('Yes')\n    for i in zr + on:\n        print(i, end=' ')\n    print()", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        array = input()\n        ans = []\n        if array == '01':\n            ans = '0'\n        elif array[-1] == '0' or array[0] == '0' or array[1] == '0' or (n == 1):\n            ans = -1\n        else:\n            for i in range(n):\n                if array[i] == '1':\n                    ans.append(i)\n                else:\n                    a = ans.pop(-1)\n                    ans.append(i)\n                    ans.append(a)\n        if ans == -1:\n            print('No')\n        else:\n            print('Yes')\n            print(*ans)\nexcept:\n    pass", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod = 10 ** 9 + 7\nt = inp()\nfor i in range(t):\n    n = inp()\n    s = strng()\n    if s[0] != '1' or s[1] != '1' or s[n] != '1':\n        print('No')\n        continue\n    nmexs = []\n    ymexs = []\n    print('Yes')\n    for i in range(2, n):\n        if s[i] == '1':\n            ymexs.append(i)\n        else:\n            nmexs.append(i)\n    ymexs.sort()\n    print(*[0] + nmexs + [1] + ymexs)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    m = n + 1\n    if s[0] == '0' or s[1] == '0' or s[-1] == '0':\n        print('No')\n    else:\n        ans = [0]\n        aa = []\n        for i in range(1, n):\n            if s[i] == '0':\n                ans.append(i)\n            else:\n                aa.append(i)\n        ans = ans + aa\n        print('Yes')\n        print(*ans, sep=' ')", "for _ in range(int(input())):\n    n = int(input()) + 1\n    s = list(input())\n    out = []\n    if int(s[0]) == 0 or int(s[1]) == 0 or int(s[-1]) == 0:\n        print('No')\n        continue\n    print('Yes')\n    out = []\n    out.append(0)\n    i = 2\n    while int(s[i] == 1) and i < n:\n        out.append(i - 1)\n        i += 1\n    (x, y) = (i, i - 1)\n    while x < n:\n        if int(s[x]) == 0:\n            out.append(x)\n        else:\n            out.append(y)\n            y += 1\n            while int(s[y]) == 0:\n                y += 1\n        x += 1\n    print(*out)", "import math\nimport os\nimport random\nimport re\nimport sys\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = input()\n    B = []\n    if A[0] == '0' or A[1] == '0' or A[N] == '0':\n        print('No')\n    else:\n        B.append(0)\n        c = 1\n        for i in range(2, len(A) - 1):\n            if A[i] == '0':\n                B.append(i)\n            else:\n                B.append(c)\n                c = i\n        B.append(c)\n        print('Yes')\n        print(*B)", "for _ in range(int(input())):\n    n = int(input())\n    s = str(input())\n    if s[0] == '0' or s[1] == '0' or s[-1] == '0':\n        print('No')\n    else:\n        mex = []\n        n_mex = []\n        for i in range(1, len(s)):\n            if s[i] == '1':\n                mex.append(i)\n            else:\n                n_mex.append(i)\n        ans = [0]\n        for i in n_mex:\n            ans.append(i)\n        for j in range(len(mex) - 1):\n            ans.append(mex[j])\n        print('Yes')\n        print(*ans)", "from math import *\nfrom collections import *\nimport os\nfrom io import BytesIO, IOBase\nimport sys\nfrom bisect import *\nfrom heapq import *\nMOD = 1000000007\n\ndef binpow(a, b, m):\n    a %= m\n    x = 1\n    while b > 0:\n        if b & 1:\n            x = x * a % m\n        a = a * a % m\n        b >>= 1\n    return x\n\ndef binser(arr, l, r, x):\n    while l < r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return mid\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef sod(n):\n    l = list(str(n))\n    s = 0\n    for i in l:\n        s += int(i)\n    return s\n\ndef prime_factors(num):\n    l = []\n    if num % 2:\n        l.append(2)\n    while num % 2 == 0:\n        num = num / 2\n    for i in range(3, int(sqrt(num)) + 1, 2):\n        if not num % i:\n            l.append(i)\n        while num % i == 0:\n            num = num / i\n    if num > 2:\n        l.append(num)\n    return l\n\ndef factmod(n, p):\n    f = defaultdict(int)\n    f[0] = 1\n    for i in range(1, n + 1):\n        f[i] = f[i - 1] * i % MOD\n    return f\n\ndef largestPower(n, p):\n    x = 0\n    while n:\n        n //= p\n        x += n\n    return x\n\ndef modFact(n, p):\n    if n >= p:\n        return 0\n    res = 1\n    isPrime = [1] * (n + 1)\n    i = 2\n    while i * i <= n:\n        if isPrime[i]:\n            for j in range(2 * i, n, i):\n                isPrime[j] = 0\n        i += 1\n    for i in range(2, n):\n        if isPrime[i]:\n            k = largestPower(n, i)\n            res = res * binpow(i, k, p) % p\n    return res\n\ndef drec(x, y):\n    if y == x + 1:\n        return 'R'\n    if y == x - 1:\n        return 'L'\n    if x < y:\n        return 'D'\n    return 'U'\n\ndef cellhash(x, y):\n    return (x - 1) * m + y\n\ndef bins(l, x, n):\n    i = bisect_left(l, x)\n    if i < n:\n        return i\n    if i:\n        return i - 1\n    else:\n        return n\n\ndef cond(l):\n    for i in range(len(l) - 1):\n        if l[i] == str(int(l[i + 1]) - 1):\n            return False\n    return True\n\ndef isvowel(s):\n    if s in list('aeiou'):\n        return 1\n    return 0\n\ndef countOdd(L, R):\n    N = (R - L) // 2\n    if R % 2 != 0 or L % 2 != 0:\n        N += 1\n    return N\n\ndef tst(A, B, C):\n    return (A | B) & (B | C) & (C | A)\n\ndef palcheck(n, s):\n    (i, j) = (0, n - 1)\n    while i <= j:\n        if s[i] == s[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n\ndef sakurajima(n):\n    if n < 9:\n        n = 10\n    l = [1] * (n + 1)\n    l[1] = 0\n    for i in range(2, int(n ** 0.5) + 1):\n        if l[i]:\n            for j in range(i * i, n + 1, i):\n                if not j % i:\n                    l[j] = 0\n    return l\n\ndef prchck(n):\n    l = [1] * (n + 1)\n    l[1] = 0\n    for i in range(2, n + 1):\n        for j in range(2, int(sqrt(n)) + 1):\n            if j % i == 0:\n                l[j] = 1\n    return l\n\ndef ispal(s, n):\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            return False\n    return True\n\ndef bfs(src, dest, ajl, vis):\n    q = deque([src])\n    vis[src] = True\n    while q:\n        i = q.popleft()\n        if i == dest:\n            return True\n        for j in ajl[i]:\n            if not vis[j]:\n                vis[j] = True\n                q.append(j)\n    return False\n\ndef dfs(i, ajl, vis):\n    vis[i] = True\n    for j in ajl[i]:\n        if not vis[j]:\n            dfs(j, ajl, vis)\n\nclass DisjSet:\n\n    def __init__(self, n):\n        self.rank = [1] * n\n        self.parent = [i for i in range(n)]\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def Union(self, x, y):\n        xset = self.find(x)\n        yset = self.find(y)\n        if xset == yset:\n            return\n        if self.rank[xset] < self.rank[yset]:\n            self.parent[xset] = yset\n        elif self.rank[xset] > self.rank[yset]:\n            self.parent[yset] = xset\n        else:\n            self.parent[yset] = xset\n            self.rank[xset] = self.rank[xset] + 1\n\ndef snek(i, ajl, vis, x, ds):\n    vis[i] = True\n    for j in ajl[i]:\n        if not vis[j]:\n            ds[j] = x\n            snek(j, ajl, vis, x, ds)\n\ndef panda(n, s):\n    if s[0] == '0' or s[1] == '0' or s[n] == '0':\n        print('No')\n        return\n    ans = [0]\n    x = 1\n    for i in range(2, n):\n        if s[i] == '0':\n            ans.append(i)\n        else:\n            ans.append(x)\n            x = i\n    ans.append(x)\n    print('Yes')\n    print(*ans)\nt = 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input()\n    panda(n, s)", "for _ in range(int(input())):\n    N = int(input())\n    A = input()\n    if A[0] == '0' or A[1] == '0' or A[-1] == '0':\n        print('No')\n    else:\n        Arr = []\n        for i in range(N):\n            Arr.append(i)\n            if A[i] == '0':\n                (Arr[i], Arr[i - 1]) = (Arr[i - 1], Arr[i])\n        print('Yes')\n        for i in Arr:\n            print(i, end=' ')\n        print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    if (s[0] == '0' or s[1] == '0') or s[-1] == '0':\n        print('No')\n    elif n == 1:\n        print('Yes')\n        print(0)\n    elif n == 2:\n        print('Yes')\n        print('0 1')\n    else:\n        print('Yes')\n        l = [0] * n\n        sum = 0\n        a = ''\n        ans = '0 '\n        for i in range(2, len(s)):\n            if s[i] == '0':\n                a = str(i - 1) + ' ' + a\n            else:\n                a = str(i - 1) + ' ' + a\n                ans = ans + a\n                a = ''\n        ans = ans + a\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    m = n + 1\n    if s[0] == '0' or s[1] == '0' or s[-1] == '0':\n        print('No')\n    else:\n        ans = [0]\n        aa = []\n        for i in range(1, n):\n            if s[i] == '0':\n                ans.append(i)\n            else:\n                aa.append(i)\n        ans = ans + aa\n        print('Yes')\n        print(*ans, sep=' ')", "from itertools import permutations\nimport os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nfrom random import randint\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    n = inp()\n    s = st()\n    if s[0] == '0' or s[1] == '0' or s[-1] == '0':\n        pr('No')\n        return\n    ind = -1\n    l = list(range(n))\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            ind = i\n            break\n    if ind == -1:\n        pr('Yes')\n        print(*l)\n    else:\n        index = {i: i for i in range(n)}\n        for i in range(1, ind + 1):\n            if s[i] == '0':\n                (l[i], l[i - 1]) = (l[i - 1], l[i])\n        pr('Yes')\n        print(*l)\nfor _ in range(inp()):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    a = input()\n    if a[n] == '0' or a[1] == '0' or a[0] == '0':\n        print('No')\n    elif a.count('1') == n + 1:\n        print('Yes')\n        for i in range(n):\n            print(i, end=' ')\n        print()\n    else:\n        f = -1\n        c = 0\n        print('Yes')\n        print(0, end=' ')\n        for i in range(2, n + 1):\n            if a[i] == '1' and f == -1:\n                print(i - 1, end=' ')\n            elif a[i] == '1' and f != -1:\n                print(f, end=' ')\n                f = -1\n                c = 0\n            else:\n                print(i, end=' ')\n                if c == 0:\n                    f = i - 1\n                    c = 1\n        print()", "def ri():\n    return int(input())\n\ndef rl():\n    return list(map(int, input().split()))\n\ndef rm():\n    return map(int, input().split())\nfor _ in range(ri()):\n    n = ri()\n    a = input()\n    if a[0] == '0' or a[1] == '0' or a[-1] == '0':\n        print('No')\n        continue\n    print('Yes')\n    j = 1\n    l = []\n    i = 0\n    f = 0\n    for k in range(n + 1):\n        if i == n:\n            break\n        if a[i] == '1':\n            if a[j] == '1':\n                l.append(i)\n                i = j\n                j += 1\n            else:\n                l.append(j)\n                j += 1\n    print(*l)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s[0] == '0' or s[1] == '0' or s[n] == '0':\n        print('No')\n    else:\n        l = []\n        l.append(0)\n        h = 1\n        for i in range(2, len(s) - 1):\n            if s[i] == '0':\n                l.append(i)\n            else:\n                l.append(h)\n                h = i\n        l.append(h)\n        print('Yes')\n        for i in l:\n            print(i, end=' ')\n        print()", "for i in range(int(input())):\n    n = int(input())\n    s = input()\n    if s[n] == '0' or s[0] == '0' or s[1] == '0':\n        print('No')\n        continue\n    nlist = []\n    for j in range(n + 1):\n        nlist.append(j)\n    for j in range(n):\n        if s[j + 1] == '0':\n            (nlist[j], nlist[j + 1]) = (nlist[j + 1], nlist[j])\n    if nlist[n - 1] == 0:\n        print('No')\n    else:\n        print('Yes')\n        print(*nlist[:n])", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s[0] == '0' or s[1] == '0' or s[n] == '0':\n        print('No')\n    else:\n        ans = []\n        ans.append(0)\n        you = 1\n        for i in range(2, len(s) - 1):\n            if s[i] == '0':\n                ans.append(i)\n            else:\n                ans.append(you)\n                you = i\n        ans.append(you)\n        print('Yes')\n        for hh in ans:\n            print(hh, end=' ')\n        print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = input().rstrip()\n    a = []\n    if s[0] == '0' or s[-1] == '0' or s[1] == '0':\n        print('No')\n    else:\n        i = 0\n        while i < n:\n            if s[i] == '1':\n                if s[i + 1] == '1':\n                    a.append(i)\n                    i += 1\n                else:\n                    idx = -1\n                    for j in range(i + 1, n + 1):\n                        if s[j] == '1':\n                            idx = j\n                            break\n                        else:\n                            a.append(j)\n                    a.append(i)\n                    i = idx\n        print('Yes')\n        print(*a)", "for _ in range(int(input())):\n    N = int(input())\n    A = list(input().strip())\n    data = ['0']\n    last = 1\n    if A[1] == '0' or A[0] == '0' or A[-1] == '0':\n        print('No')\n    else:\n        for i in range(1, N):\n            if A[i + 1] == '1':\n                data.append(str(last))\n                last = i + 1\n            else:\n                data.append(str(i + 1))\n        sol = ' '.join(data)\n        print('Yes')\n        print(sol)", "for _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s[0] == '0' or s[1] == '0' or s[n] == '0':\n        print('No')\n    else:\n        res = []\n        res.append(0)\n        temp = 1\n        for i in range(2, len(s) - 1):\n            if s[i] == '0':\n                res.append(i)\n            else:\n                res.append(temp)\n                temp = i\n        res.append(temp)\n        print('Yes')\n        for t in res:\n            print(t, end=' ')\n        print()", "t = int(input())\nfor _ in range(t):\n    h = 1\n    n = int(input())\n    s = input()\n    if s[0] == '0' or s[1] == '0' or s[n] == '0':\n        print('No')\n        continue\n    v = []\n    v.append(0)\n    for i in range(2, len(s) - 1):\n        if s[i] == '0':\n            v.append(i)\n        else:\n            v.append(h)\n            h = i\n    v.append(h)\n    print('Yes')\n    print(*v, sep=' ')", "for _ in range(int(input())):\n    N = int(input())\n    b = input()\n    if b[0] == '0' or b[1] == '0' or b[-1] == '0':\n        print('No')\n    else:\n        ans = [0 for i in range(N)]\n        lf = 1\n        rf = len(ans) - 1\n        b = b[:-1]\n        for i in range(len(b) - 1, 0, -1):\n            if b[i] == '1':\n                ans[rf] = i\n                rf -= 1\n            else:\n                ans[lf] = i\n                lf += 1\n        print('Yes')\n        print(' '.join([str(i) for i in ans]))", "from itertools import permutations\nimport os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nfrom random import randint\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    n = inp()\n    s = st()\n    if s[0] == '0' or s[1] == '0' or s[-1] == '0':\n        pr('No')\n        return\n    pr('Yes')\n    ind = 1\n    l = [0]\n    for i in range(2, n):\n        if s[i] == '1':\n            l.append(ind)\n            ind = i\n        else:\n            l.append(i)\n    l.append(ind)\n    print(*l)\nfor _ in range(inp()):\n    solve()", "import sys\nfrom math import sqrt, ceil, floor, gcd\nfrom collections import Counter, defaultdict\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef get_flo():\n    return map(float, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    s = list(str(input()))\n    if s[0] == '0' or s[-1] == '0' or s[1] == '0':\n        print('No')\n    else:\n        ans = [i for i in range(0, n)]\n        for i in range(1, n):\n            if s[i] == '0':\n                (ans[i], ans[i - 1]) = (ans[i - 1], ans[i])\n        print('Yes')\n        print(*ans)\nT = 1\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "import sys\nfrom math import sqrt, ceil, floor, gcd\nfrom collections import Counter, defaultdict\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef get_flo():\n    return map(float, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve():\n    n = int(input())\n    s = list(str(input()))\n    if s[0] == '0' or s[-1] == '0' or s[1] == '0':\n        print('No')\n    else:\n        ans = [i for i in range(0, n)]\n        for i in range(1, n):\n            if s[i] != s[i - 1]:\n                (s[i], s[i - 1]) = (s[i - 1], s[i])\n                (ans[i], ans[i - 1]) = (ans[i - 1], ans[i])\n        print('Yes')\n        print(*ans)\nT = 1\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    binary = input().rstrip()\n    if binary[0] == '0' or binary[1] == '0' or binary[-1] == '0':\n        print('No')\n        continue\n    dis = []\n    all = []\n    for i in range(n + 1):\n        if binary[i] == '0':\n            dis.append(i)\n        else:\n            all.append(i)\n    ret = []\n    last = -1\n    i = 0\n    while i < len(dis):\n        for j in range(last + 1, dis[i] - 1):\n            ret.append(j)\n        ret.append(dis[i])\n        last = dis[i]\n        add = dis[i] - 1\n        while i < len(dis) - 1 and dis[i] == dis[i + 1] - 1:\n            i += 1\n            ret.append(dis[i])\n            last = dis[i]\n        ret.append(add)\n        i += 1\n    for i in range(last + 1, n):\n        ret.append(i)\n    print('Yes')\n    for i in ret:\n        print(i, end=' ')\n    print()", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        l = input()\n        k = []\n        if l[0] == '0' or l[1] == '0':\n            print('No')\n        elif l[len(l) - 1] == '0':\n            print('No')\n        else:\n            for i in range(n):\n                k.append(i)\n            for i in range(n):\n                if l[i] == '0':\n                    temp = k[i - 1]\n                    k[i - 1] = k[i]\n                    k[i] = temp\n            print('Yes')\n            for i in range(len(k)):\n                print(k[i], end=' ')\n            print()\nexcept:\n    pass", "t = int(input())\nwhile t:\n    n = int(input())\n    s = input()\n    if s[0] == '0' or s[1] == '0':\n        print('No')\n    elif s[-1] == '0':\n        print('No')\n    else:\n        lst = []\n        for i in range(0, n):\n            if s[i] == '1':\n                lst.append(i)\n            else:\n                x = lst[-1]\n                lst.pop()\n                lst.append(i)\n                lst.append(x)\n        print('Yes')\n        print(*lst)\n    t = t - 1", "for t in range(int(input())):\n    n = int(input())\n    s = input()\n    if n == 1:\n        if s[0] == '0':\n            print('No')\n        else:\n            print('Yes')\n            print(0)\n        continue\n    if n == 2:\n        if s[0] == '0' or s[1] == '0':\n            print('No')\n        else:\n            print('Yes')\n            print('0 1')\n        continue\n    if s[0] == '0' or s[1] == '0' or s[-1] == '0':\n        print('No')\n        continue\n    arr = []\n    arr.append(0)\n    cnt = 1\n    for i in range(2, len(s) - 1):\n        if s[i] == '0':\n            arr.append(i)\n        else:\n            arr.append(cnt)\n            cnt = i\n    print('Yes')\n    for i in arr:\n        print(i, end=' ')\n    print(cnt)", "def nCr(n, r):\n    return fact(n) / (fact(r) * fact(n - r))\n\ndef fact(n):\n    res = 1\n    for i in range(2, n + 1):\n        res = res * i\n    return res\nmod = 10 ** 4\nans = 0\n\ndef nextPowerOf2(n):\n    count = 0\n    if n and (not n & n - 1):\n        return n\n    while n != 0:\n        n >>= 1\n        count += 1\n    return 1 << count\nfrom collections import defaultdict\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    s = input()\n    if s[0] != '1' or s[1] != '1':\n        print('No')\n        continue\n    if s.count('0') == 0:\n        print('Yes')\n        ans = [i for i in range(n)]\n        print(*ans)\n        continue\n    ind = s.index('0')\n    ans = []\n    for (i, ele) in enumerate(s):\n        if i < ind - 1:\n            ans.append(i)\n        else:\n            break\n    for (i, ele) in enumerate(s):\n        if ele == '0':\n            ans.append(i)\n    for i in range(ind - 1, len(s)):\n        if s[i] == '1':\n            ans.append(i)\n    ans = ans[:-1]\n    tot = sum(ans)\n    if tot != n * (n - 1) // 2:\n        print('No')\n    else:\n        print('Yes')\n        print(*ans)"]