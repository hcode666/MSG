["for _ in range(int(input())):\n    n = int(input())\n    ri = list(map(int, input().split()))\n    bi = list(map(int, input().split()))\n    s = sum(ri)\n    dp = [[-1 for i in range(s + 1)] for j in range(n)]\n    dp[0][0] = bi[0]\n    dp[0][ri[0]] = 0\n    for i in range(n - 1):\n        for j in range(s + 1):\n            if dp[i][j] != -1:\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + bi[i + 1])\n                dp[i + 1][j + ri[i + 1]] = max(dp[i + 1][j + ri[i + 1]], dp[i][j])\n    ans = 0\n    for i in range(s + 1):\n        if dp[n - 1][i] != -1:\n            ans = max(ans, min(i, dp[n - 1][i]))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ri = list(map(int, input().split()))\n    bi = list(map(int, input().split()))\n    s = sum(ri)\n    dp = [[-1 for i in range(s + 1)] for j in range(n)]\n    dp[0][0] = bi[0]\n    dp[0][ri[0]] = 0\n    for i in range(n - 1):\n        for j in range(s + 1):\n            if dp[i][j] != -1:\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + bi[i + 1])\n                dp[i + 1][j + ri[i + 1]] = max(dp[i + 1][j + ri[i + 1]], dp[i][j])\n    ans = 0\n    for i in range(s + 1):\n        if dp[n - 1][i] != -1:\n            ans = max(ans, min(i, dp[n - 1][i]))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ri = list(map(int, input().split()))\n    bi = list(map(int, input().split()))\n    s = sum(ri)\n    dp = [[-1 for i in range(s + 1)] for j in range(n)]\n    dp[0][0] = bi[0]\n    dp[0][ri[0]] = 0\n    for i in range(n - 1):\n        for j in range(s + 1):\n            if dp[i][j] != -1:\n                dp[i + 1][j] = max(dp[i + 1][j], dp[i][j] + bi[i + 1])\n                dp[i + 1][j + ri[i + 1]] = max(dp[i + 1][j + ri[i + 1]], dp[i][j])\n    ans = 0\n    for i in range(s + 1):\n        if dp[n - 1][i] != -1:\n            ans = max(ans, min(i, dp[n - 1][i]))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    sb = sum(b)\n    sr = sum(r)\n    x = [-1 for i in range(sr + 1000)]\n    x[0] = sb\n    for i in range(len(r)):\n        for j in range(len(x) - 1, -1, -1):\n            if x[j] != -1:\n                x[j + r[i]] = max(x[j + r[i]], x[j] - b[i])\n    m = 0\n    for i in range(len(x)):\n        m = max(m, min(i, x[i]))\n    print(m)", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = {sum(r): 0}\n    for i in range(n):\n        aux = dict(d)\n        for sr in d:\n            (x, y) = (sr - r[i], d[sr] + b[i])\n            if x in aux:\n                aux[x] = max(aux[x], y)\n            else:\n                aux[x] = y\n        d = dict(aux)\n    ans = 0\n    for (sr, sb) in d.items():\n        ans = max(ans, min(sr, sb))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    reds = list(map(int, input().split()))\n    blues = list(map(int, input().split()))\n    su = min(sum(reds), sum(blues))\n    dp = [-10 ** 10 for _ in range(su + 1)]\n    dp[0] = 0\n    for i in range(n):\n        for j in range(su, -1, -1):\n            dp[j] = max(dp[j], dp[j] + blues[i])\n            if j >= reds[i]:\n                dp[j] = max(dp[j], dp[j - reds[i]])\n    ans = max([min(i, dp[i]) for i in range(su + 1)])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    reds = list(map(int, input().split()))\n    blues = list(map(int, input().split()))\n    su = min(sum(reds), sum(blues))\n    dp = [[-10 ** 10 for _ in range(su + 1)] for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(su + 1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j] + blues[i - 1])\n            if j - reds[i - 1] >= 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - reds[i - 1]])\n    ans = max([min(i, dp[n][i]) for i in range(su + 1)])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxS = 20004\n    dp = [-1] * maxS\n    dp[0] = 0\n    for i in range(n):\n        (R, B) = (r[i], b[i])\n        for x in reversed(range(maxS)):\n            val = -1\n            if dp[x] != -1:\n                val = dp[x] + B\n            if x - R >= 0 and dp[x - R] != -1:\n                val = max(val, dp[x - R])\n            dp[x] = val\n    ans = 0\n    for i in range(maxS):\n        if dp[i] == -1:\n            continue\n        ans = max(ans, min(i, dp[i]))\n    print(ans)", "for _ in range(int(input())):\n    z = int(input())\n    o = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    maxS = 20004\n    dp = [-1] * maxS\n    dp[0] = 0\n    for i in range(z):\n        (R, B) = (o[i], c[i])\n        for x in reversed(range(maxS)):\n            val = -1\n            if dp[x] != -1:\n                val = dp[x] + B\n            if x - R >= 0 and dp[x - R] != -1:\n                val = max(val, dp[x - R])\n            dp[x] = val\n    ans = 0\n    for j in range(maxS):\n        if dp[j] == -1:\n            continue\n        ans = max(ans, min(j, dp[j]))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxS = 20004\n    dp = [-1] * maxS\n    dp[0] = 0\n    for i in range(n):\n        (R, B) = (r[i], b[i])\n        for x in reversed(range(maxS)):\n            val = -1\n            if dp[x] != -1:\n                val = dp[x] + B\n            if x - R >= 0 and dp[x - R] != -1:\n                val = max(val, dp[x - R])\n            dp[x] = val\n    ans = 0\n    for i in range(maxS):\n        if dp[i] == -1:\n            continue\n        ans = max(ans, min(i, dp[i]))\n    print(ans)", "def knapsack(dp, cnt_red, red, blue):\n\n    def recur(ind, red_wanted):\n        nonlocal dp\n        if (ind, red_wanted) in dp:\n            return dp[ind, red_wanted]\n        if ind == len(red):\n            if red_wanted > 0:\n                dp[ind, red_wanted] = -float('inf')\n            else:\n                dp[ind, red_wanted] = 0\n        elif red_wanted <= 0:\n            s = 0\n            for i in range(ind, len(red)):\n                s += blue[i]\n            dp[ind, red_wanted] = s\n        else:\n            dp[ind, red_wanted] = max(recur(ind + 1, red_wanted - red[ind]), recur(ind + 1, red_wanted) + blue[ind])\n        return dp[ind, red_wanted]\n    blue_cnt = recur(0, cnt_red)\n    return blue_cnt\nfor t in range(int(input())):\n    n = int(input())\n    red = [int(x) for x in input().split(' ')]\n    blue = [int(x) for x in input().split(' ')]\n    high = sum(red)\n    low = 0\n    dp = {}\n    maxx = 0\n    while low <= high:\n        mid = (low + high) // 2\n        temp_b = knapsack(dp, mid, red, blue)\n        if temp_b < mid:\n            high = mid - 1\n        elif temp_b > mid:\n            low = mid + 1\n        else:\n            maxx = max(maxx, temp_b)\n            break\n        maxx = max(maxx, min(temp_b, mid))\n    print(maxx)", "for _ in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxS = 20004\n    dp = [-1] * maxS\n    dp[0] = 0\n    for i in range(n):\n        (R, B) = (r[i], b[i])\n        for x in reversed(range(maxS)):\n            val = -1\n            if dp[x] != -1:\n                val = dp[x] + B\n            if x - R >= 0 and dp[x - R] != -1:\n                val = max(val, dp[x - R])\n            dp[x] = val\n    ans = 0\n    for i in range(maxS):\n        if dp[i] == -1:\n            continue\n        ans = max(ans, min(i, dp[i]))\n    print(ans)", "for tt in range(int(input())):\n    nn = int(input())\n    red = [int(x) for x in input().split(' ')]\n    blue = [int(x) for x in input().split(' ')]\n    max_Sum = 200 * 100 + 10\n    dp = [-1] * max_Sum\n    dp[0] = 0\n    for i in range(nn):\n        for j in range(max_Sum - 1, -1, -1):\n            if j + red[i] < max_Sum:\n                dp[j + red[i]] = max(dp[j + red[i]], dp[j])\n            if dp[j] >= 0:\n                dp[j] += blue[i]\n    res = 0\n    for i in range(max_Sum):\n        res = max(res, min(i, dp[i]))\n    print(res)", "for trie in range(int(input())):\n    N = int(input())\n    red = list(map(int, input().split()))\n    blue = list(map(int, input().split()))\n    max_sum = 200 * 100 + 10\n    dp = [-1] * max_sum\n    dp[0] = 0\n    for i in range(N):\n        for j in range(max_sum - 1, -1, -1):\n            if j + red[i] < max_sum:\n                dp[j + red[i]] = max(dp[j + red[i]], dp[j])\n            if dp[j] >= 0:\n                dp[j] += blue[i]\n    result = 0\n    for i in range(max_sum):\n        result = max(result, min(i, dp[i]))\n    print(result)", "ans = []\nnq = int(input())\nfor _ in range(nq):\n    n = int(input())\n    R = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    x = sum(R) + 1\n    best = []\n    for i in range(x):\n        best.append([-1] * n)\n    best[R[0]][0] = 0\n    best[0][0] = B[0]\n    for j in range(1, n):\n        for i in range(x):\n            bPick = -1\n            if j - 1 >= 0 and best[i][j - 1] != -1:\n                bPick = best[i][j - 1] + B[j]\n            rPick = -1\n            if i - R[j] >= 0 and best[i - R[j]][j - 1] != -1:\n                rPick = best[i - R[j]][j - 1]\n            best[i][j] = max(rPick, bPick)\n    val = 0\n    for i in range(x):\n        val = max(val, min(i, best[i][n - 1]))\n    ans.append(val)\nprint(*ans, sep='\\n')", "import sys\nimport math\nimport collections\nimport random\nfrom heapq import heappush, heappop\nfrom functools import reduce\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nints = lambda : list(map(int, input().split()))\n\ndef solve() -> None:\n    n = int(input())\n    R = ints()\n    B = ints()\n    mx = 200 * n + 4\n    dp = [-1] * mx\n    dp[0] = 0\n    for (r, b) in zip(R, B):\n        for x in reversed(range(mx)):\n            val = -1\n            if dp[x] != -1:\n                val = dp[x] + b\n            if x - r >= 0 and dp[x - r] != -1:\n                val = max(val, dp[x - r])\n            dp[x] = val\n    ans = 0\n    for i in range(mx):\n        if dp[i] == -1:\n            continue\n        ans = max(ans, min(i, dp[i]))\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dp = [-1] * (200 * n + 1)\n    dp[0] = 0\n    for i in range(n):\n        for j in range(200 * n, -1, -1):\n            dp[j] = max(dp[j - r[i]] if j - r[i] >= 0 else -1, dp[j] + b[i] if dp[j] != -1 else -1)\n    ans = 0\n    for i in range(200 * n + 1):\n        ans = max(ans, min(i, dp[i]))\n    sys.stdout.write(str(ans) + '\\n')", "for t in range(int(input())):\n    n = int(input())\n    red = [int(x) for x in input().split(' ')]\n    blue = [int(x) for x in input().split(' ')]\n    maxSum = 200 * 100 + 10\n    dp = [-1] * maxSum\n    dp[0] = 0\n    for i in range(n):\n        for j in range(maxSum - 1, -1, -1):\n            if j + red[i] < maxSum:\n                dp[j + red[i]] = max(dp[j + red[i]], dp[j])\n            if dp[j] >= 0:\n                dp[j] += blue[i]\n    res = 0\n    for i in range(maxSum):\n        res = max(res, min(i, dp[i]))\n    print(res)", "for T in range(int(input())):\n    n = int(input())\n    red = list(map(int, input().split()))\n    blue = list(map(int, input().split()))\n    mx = 200 * 100 + 10\n    dp = [-1] * mx\n    dp[0] = 0\n    for i in range(n):\n        for j in range(mx - 1, -1, -1):\n            if j + red[i] < mx:\n                dp[j + red[i]] = max(dp[j + red[i]], dp[j])\n            if dp[j] >= 0:\n                dp[j] += blue[i]\n    ans = 0\n    for i in range(mx):\n        ans = max(ans, min(dp[i], i))\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfrom math import sqrt\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef I():\n    return list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    red = I()\n    blue = I()\n    dp = [-1] * (sum(red) + 1)\n    dp[sum(red)] = 0\n    for i in range(n):\n        for j in range(len(dp)):\n            if j + red[i] >= len(dp):\n                break\n            if dp[j + red[i]] != -1:\n                dp[j] = max(dp[j], dp[j + red[i]] + blue[i])\n    ans = 0\n    for i in range(len(dp)):\n        ans = max(ans, min(i, dp[i]))\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfrom math import sqrt\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef I():\n    return list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    red = I()\n    blue = I()\n    dp = [-1] * (sum(red) + 1)\n    dp[sum(red)] = 0\n    for i in range(n):\n        for j in range(len(dp)):\n            if j + red[i] >= len(dp):\n                break\n            if dp[j + red[i]] != -1:\n                dp[j] = max(dp[j], dp[j + red[i]] + blue[i])\n    ans = 0\n    for i in range(len(dp)):\n        ans = max(ans, min(i, dp[i]))\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfrom math import sqrt\nfrom collections import defaultdict\nfrom heapq import heappop, heappush\n\ndef I():\n    return list(map(int, input().split()))\nfor _ in range(int(input())):\n    n = int(input())\n    red = I()\n    blue = I()\n    dp = [-1] * (sum(red) + 1)\n    dp[sum(red)] = 0\n    for i in range(n):\n        for j in range(len(dp)):\n            if j + red[i] >= len(dp):\n                break\n            if dp[j + red[i]] != -1:\n                dp[j] = max(dp[j], dp[j + red[i]] + blue[i])\n    ans = 0\n    for i in range(len(dp)):\n        ans = max(ans, min(i, dp[i]))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    red = list(map(int, input().split()))\n    blue = list(map(int, input().split()))\n    r = sum(red)\n    dp = [[float('inf')] * (sum(red) + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, r + 1):\n            r1 = red[i - 1]\n            dp[i][j] = min(dp[i - 1][j], dp[i][j])\n            if j >= r1:\n                dp[i][j] = min(dp[i][j], dp[i - 1][j - r1] + blue[i - 1])\n    dp1 = [[float('inf') * -1] * (sum(red) + 1) for i in range(n + 1)]\n    for i in range(n + 1):\n        dp1[i][0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, r + 1):\n            r1 = red[i - 1]\n            dp1[i][j] = max(dp1[i - 1][j], dp1[i][j])\n            if j >= r1:\n                dp1[i][j] = max(dp1[i][j], dp1[i - 1][j - r1] + blue[i - 1])\n    ans = 0\n    for i in range(r + 1):\n        if dp[n][i] == float('inf') and dp1[n][i] == float('inf') * -1:\n            continue\n        ans = max(ans, min(i, sum(blue) - dp[n][i]))\n    print(ans)", "from sys import stdin\ninput = stdin.readline\n\ndef knapsack(W, weight, value):\n    n = len(weight)\n    A = [[0] * (W + 1) for i in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            if weight[i - 1] > w:\n                A[i][w] = A[i - 1][w]\n            else:\n                A[i][w] = max(A[i - 1][w], A[i - 1][w - weight[i - 1]] + value[i - 1])\n    return A[n][W]\n\ndef possible(N, target):\n    return knapsack(sum(R) - target, R, B) >= target\n\ndef solve(N):\n    if N == 1:\n        return 0\n    (inf, sup) = (0, min(sum(R), sum(B)))\n    ans = 0\n    while inf <= sup:\n        mid = (inf + sup) // 2\n        if possible(N, mid):\n            ans = mid\n            inf = mid + 1\n        else:\n            sup = mid - 1\n    return ans\nT = int(input().strip())\nfor problem in range(1, T + 1):\n    N = int(input().strip())\n    R = [int(x) for x in input().strip().split()]\n    B = [int(x) for x in input().strip().split()]\n    print(solve(N))", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef solve(r, b, x, y, i):\n    global dict\n    if (x - y, i) in dp:\n        return dp[x - y, i]\n    if i >= len(r):\n        return min(x, y)\n    ans = max(solve(r, b, x + r[i] - y, 0, i + 1) + y, solve(r, b, x - (y + b[i]), 0, i + 1) + y + b[i])\n    dp[x - y, i] = ans\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    r = li()\n    b = li()\n    dp = dict()\n    print(solve(r, b, 0, 0, 0))", "def dp(r, b, sb, i, x, memo):\n    memokey = (i, x)\n    if memokey in memo:\n        return memo[memokey]\n    if i >= len(r):\n        return 0\n    result = dp(r, b, sb, i + 1, x - b[i], memo)\n    if sb[i + 1] >= x:\n        result = max(result, dp(r, b, sb, i + 1, x, memo) + r[i])\n    memo[memokey] = result\n    return result\nfor _ in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sb = [0]\n    for x in reversed(b):\n        sb.append(sb[-1] + x)\n    sb = sb[::-1]\n    memo = dict()\n    result = 0\n    for x in range(1, sb[0]):\n        result = max(min(x, dp(r, b, sb, 0, x, memo)), result)\n    print(result)", "def dp(r, b, sb, i, x, memo):\n    memokey = (i, x)\n    if memokey in memo:\n        return memo[memokey]\n    if i >= len(r):\n        return 0\n    result = dp(r, b, sb, i + 1, x - b[i], memo)\n    if sb[i + 1] >= x:\n        result = max(result, dp(r, b, sb, i + 1, x, memo) + r[i])\n    memo[memokey] = result\n    return result\nfor _ in range(int(input())):\n    n = int(input())\n    r = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    sb = [0]\n    for x in reversed(b):\n        sb.append(sb[-1] + x)\n    sb = sb[::-1]\n    memo = dict()\n    result = 0\n    for x in range(1, sb[0]):\n        result = max(min(x, dp(r, b, sb, 0, x, memo)), result)\n    print(result)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    d = {sum(r): 0}\n    for i in range(n):\n        e = dict(d)\n        for j in d:\n            (p, q) = (j - r[i], d[j] + b[i])\n            if p in e:\n                e[p] = max(e[p], q)\n            else:\n                e[p] = q\n        d = dict(e)\n    ans = 0\n    for i in d:\n        ans = max(ans, min(i, d[i]))\n    print(ans)", "from sys import stdin\ninf = -float('inf')\ninput = stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    dp = [0] + [inf] * sum(a)\n    for i in range(n):\n        for j in range(len(dp) - a[i] - 1, -1, -1):\n            dp[j + a[i]] = max(dp[j + a[i]], dp[j])\n            dp[j] = max(dp[j], dp[j] + b[i])\n    ans = 0\n    for i in range(len(dp)):\n        ans = max(ans, min(i, dp[i]))\n    print(ans)"]