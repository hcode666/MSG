["import math\nimport bisect\n\ndef check(x, l, n):\n    if x < n:\n        return 0\n    sa = set({})\n    for i in range(len(l)):\n        b = l[i] % x\n        if b > n or b == 0 or b in sa:\n            return 0\n        sa.add(b)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    s = sum(l) - n * (n + 1) // 2\n    ans = -1\n    for i in range(1, int(s ** (1 / 2)) + 1):\n        if s % i == 0:\n            if check(i, l, n):\n                ans = i\n                break\n            if check(s // i, l, n):\n                ans = s // i\n                break\n    visit = set()\n    for i in l:\n        if i >= 1 and i <= n:\n            visit.add(i)\n    if len(visit) == n:\n        ans = n + 1\n    if ans != -1:\n        print('YES', ans)\n    else:\n        print('NO')", "from sys import stdin\nfrom bisect import bisect_left\ninp = stdin.readline\n\ndef makePr(p_limit):\n    track = [False, True] * (p_limit // 2 + 1)\n    if p_limit % 2 == 0:\n        track.pop()\n    track[0:3] = [False, False, True]\n    pc = 3\n    while pc * pc <= p_limit:\n        if track[pc]:\n            for a in range(pc * pc, p_limit + 1, 2 * pc):\n                track[a] = False\n        pc += 2\n    return [n for (n, p) in enumerate(track) if p]\n\ndef get_facs(val, prs, lim):\n    facs = [1]\n    if val < lim * lim:\n        px_en = bisect_left(prs, lim)\n    else:\n        px_en = bisect_left(prs, (val + 1) ** 0.5)\n    px = 0\n    while px <= px_en:\n        p = prs[px]\n        if val % p == 0:\n            pfac = [1, p]\n            val //= p\n            while val % p == 0:\n                pfac.append(p * pfac[-1])\n                val //= p\n            facs = [f * pf for pf in pfac for f in facs]\n            px_en = min(px_en, bisect_left(prs, (val + 1) ** 0.5))\n        px += 1\n    if val > 1:\n        facs.extend([val * f for f in facs])\n    return sorted(facs)\n\ndef check_opt(Ays, m, n, res):\n    for a in Ays:\n        am = a % m\n        if am > n or am == 0 or res[am]:\n            return False\n        res[am] = True\n    return True\n\ndef is_mod_perm(prs):\n    N = int(inp())\n    if N == 1:\n        v = int(inp())\n        if v == 1:\n            v = 3\n        return f'YES {v - 1}'\n    Ays = sorted(map(int, inp().split()), reverse=True)\n    if len(set(Ays)) < N:\n        return 'NO'\n    if Ays[0] == N:\n        return f'YES {N + 1}'\n    redsum = sum(Ays) - N * (N + 1) // 2\n    res = [False] * (N + 1)\n    while Ays[-1] <= N:\n        res[Ays.pop()] = True\n    X_lim = Ays[-1] - 1\n    if X_lim == N:\n        return 'NO'\n    possm = get_facs(redsum, prs, X_lim)\n    for m in possm:\n        if m <= N:\n            continue\n        elif m > X_lim:\n            break\n        if check_opt(Ays, m, N, res.copy()):\n            return f'YES {m}'\n    return 'NO'\nprs = makePr(1000000)\nT = int(inp())\nfor tx in range(T):\n    print(is_mod_perm(prs))", "from sys import stdin\nfrom bisect import bisect_left\ninp = stdin.readline\n\ndef makePr(p_limit):\n    track = [False, True] * (p_limit // 2 + 1)\n    if p_limit % 2 == 0:\n        track.pop()\n    track[0:3] = [False, False, True]\n    pc = 3\n    while pc * pc <= p_limit:\n        if track[pc]:\n            for a in range(pc * pc, p_limit + 1, 2 * pc):\n                track[a] = False\n        pc += 2\n    return [n for (n, p) in enumerate(track) if p]\n\ndef get_facs(val, prs, lim):\n    facs = [1]\n    if val < lim * lim:\n        px_en = bisect_left(prs, lim)\n    else:\n        px_en = bisect_left(prs, (val + 1) ** 0.5)\n    px = 0\n    while px <= px_en:\n        p = prs[px]\n        if val % p == 0:\n            pfac = [1, p]\n            val //= p\n            while val % p == 0:\n                pfac.append(p * pfac[-1])\n                val //= p\n            facs = [f * pf for pf in pfac for f in facs]\n            px_en = min(px_en, bisect_left(prs, (val + 1) ** 0.5))\n        px += 1\n    if val > 1:\n        facs.extend([val * f for f in facs])\n    return sorted(facs)\n\ndef check_opt(Ays, m, n, res):\n    for a in Ays:\n        am = a % m\n        if am > n or am == 0 or res[am]:\n            return False\n        res[am] = True\n    return True\n\ndef is_mod_perm(prs):\n    N = int(inp())\n    if N == 1:\n        v = int(inp())\n        if v == 1:\n            v = 3\n        return f'YES {v - 1}'\n    Ays = sorted(map(int, inp().split()), reverse=True)\n    if len(set(Ays)) < N:\n        return 'NO'\n    if Ays[0] == N:\n        return f'YES {N + 1}'\n    redsum = sum(Ays) - N * (N + 1) // 2\n    res = [False] * (N + 1)\n    while Ays[-1] <= N:\n        res[Ays.pop()] = True\n    X_lim = Ays[-1] - 1\n    if X_lim == N:\n        return 'NO'\n    possm = get_facs(redsum, prs, X_lim)\n    for m in possm:\n        if m <= N:\n            continue\n        elif m > X_lim:\n            break\n        if check_opt(Ays, m, N, res.copy()):\n            return f'YES {m}'\n    return 'NO'\nprs = makePr(1000000)\nT = int(inp())\nfor tx in range(T):\n    print(is_mod_perm(prs))", "from sys import stdin\nfrom bisect import bisect_left\ninp = stdin.readline\n\ndef makePr(p_limit):\n    track = [False, True] * (p_limit // 2 + 1)\n    if p_limit % 2 == 0:\n        track.pop()\n    track[0:3] = [False, False, True]\n    pc = 3\n    while pc * pc <= p_limit:\n        if track[pc]:\n            for a in range(pc * pc, p_limit + 1, 2 * pc):\n                track[a] = False\n        pc += 2\n    return [n for (n, p) in enumerate(track) if p]\n\ndef get_facs(val, prs, lim):\n    facs = [1]\n    if val < lim * lim:\n        px_en = bisect_left(prs, lim)\n    else:\n        px_en = bisect_left(prs, (val + 1) ** 0.5)\n    px = 0\n    while px <= px_en:\n        p = prs[px]\n        if val % p == 0:\n            pfac = [1, p]\n            val //= p\n            while val % p == 0:\n                pfac.append(p * pfac[-1])\n                val //= p\n            facs = [f * pf for pf in pfac for f in facs]\n            px_en = min(px_en, bisect_left(prs, (val + 1) ** 0.5))\n        px += 1\n    if val > 1:\n        facs.extend([val * f for f in facs])\n    return sorted(facs)\n\ndef check_opt(Ays, m, n):\n    res = [False] * (n + 1)\n    for a in Ays:\n        am = a % m\n        if am > n or am == 0 or res[am]:\n            return False\n        res[am] = True\n    return True\n\ndef is_mod_perm(prs):\n    N = int(inp())\n    if N == 1:\n        v = int(inp())\n        if v == 1:\n            v = 3\n        return f'YES {v - 1}'\n    Ays = sorted(map(int, inp().split()))\n    if len(set(Ays)) < N:\n        return 'NO'\n    if Ays[-1] == N:\n        return f'YES {N + 1}'\n    X_lim = Ays[bisect_left(Ays, N + 1)] - 1\n    if X_lim == N:\n        return 'NO'\n    possm = get_facs(sum(Ays) - N * (N + 1) // 2, prs, X_lim)\n    for m in possm:\n        if m <= N:\n            continue\n        elif m > X_lim:\n            break\n        if check_opt(Ays, m, N):\n            return f'YES {m}'\n    return 'NO'\nprs = makePr(1000000)\nT = int(inp())\nfor tx in range(T):\n    print(is_mod_perm(prs))", "from sys import stdin\nfrom bisect import bisect_left\ninp = stdin.readline\n\ndef makePr(p_limit):\n    track = [False, True] * (p_limit // 2 + 1)\n    if p_limit % 2 == 0:\n        track.pop()\n    track[0:3] = [False, False, True]\n    pc = 3\n    while pc * pc <= p_limit:\n        if track[pc]:\n            for a in range(pc * pc, p_limit + 1, 2 * pc):\n                track[a] = False\n        pc += 2\n    return [n for (n, p) in enumerate(track) if p]\n\ndef get_facs(val, prs):\n    facs = [1]\n    for p in prs:\n        if val % p == 0:\n            pfac = [1, p]\n            val //= p\n            while val % p == 0:\n                pfac.append(p * pfac[-1])\n                val //= p\n            facs = [f * pf for pf in pfac for f in facs]\n        if val < p * p:\n            break\n    if val > 1:\n        facs.extend([val * f for f in facs])\n    return sorted(facs)\n\ndef check_opt(Ays, m, n):\n    res = [False] * (n + 1)\n    for a in Ays:\n        am = a % m\n        if am > n or am == 0 or res[am]:\n            return False\n        res[am] = True\n    return True\n\ndef is_mod_perm(prs):\n    N = int(inp())\n    if N == 1:\n        v = int(inp())\n        if v == 1:\n            v = 3\n        return f'YES {v - 1}'\n    Ays = sorted(map(int, inp().split()))\n    if len(set(Ays)) < N:\n        return 'NO'\n    if Ays[-1] == N:\n        return f'YES {N + 1}'\n    X_lim = Ays[bisect_left(Ays, N + 1)] - 1\n    if X_lim == N:\n        return 'NO'\n    possm = get_facs(sum(Ays) - N * (N + 1) // 2, prs)\n    for m in possm:\n        if m <= N:\n            continue\n        elif m > X_lim:\n            break\n        if check_opt(Ays, m, N):\n            return f'YES {m}'\n    return 'NO'\nprs = makePr(1000000)\nT = int(inp())\nfor tx in range(T):\n    print(is_mod_perm(prs))", "from sys import stdin\nfrom bisect import bisect_left\ninp = stdin.readline\n\ndef check_opt(Ays, m, n):\n    res = set()\n    for a in Ays:\n        am = a % m\n        if am > n or am == 0 or am in res:\n            return False\n        res.add(am)\n    return True\n\ndef is_mod_perm():\n    N = int(inp())\n    if N == 1:\n        v = int(inp())\n        if v == 1:\n            v = 3\n        return f'YES {v - 1}'\n    Ays = sorted(map(int, inp().split()))\n    if len(set(Ays)) < N:\n        return 'NO'\n    if Ays[-1] == N:\n        return f'YES {N + 1}'\n    X_lim = Ays[bisect_left(Ays, N + 1)] - 1\n    if X_lim == N:\n        return 'NO'\n    redsum = sum(Ays) - N * (N + 1) // 2\n    hilo = int((redsum + 1) ** 0.5)\n    if X_lim > hilo:\n        min_cof = max(1, redsum // X_lim)\n        for cnd in range(min_cof, hilo + 1):\n            if redsum % cnd == 0:\n                f = redsum // cnd\n                if check_opt(Ays, f, N):\n                    return f'YES {f}'\n    for cnd in range(N + 1, hilo + 1):\n        if redsum % cnd == 0:\n            if check_opt(Ays, cnd, N):\n                return f'YES {cnd}'\n    return 'NO'\nT = int(inp())\nfor tx in range(T):\n    print(is_mod_perm())", "def check_valid(a, x):\n    visit = set()\n    for i in a:\n        ok = i % x\n        if ok > n or ok == 0 or ok in visit:\n            return 0\n        visit.add(ok)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    total -= n * (n + 1) // 2\n    flag = 0\n    for i in range(1, int(total ** 0.5) + 1):\n        if total % i == 0:\n            if check_valid(a, i):\n                flag = 1\n                result = i\n                break\n            if check_valid(a, total // i):\n                flag = 1\n                result = total // i\n                break\n    visit = set()\n    for i in a:\n        if i >= 1 and i <= n:\n            visit.add(i)\n    if len(visit) == n:\n        flag = 1\n        result = n + 1\n    if flag:\n        print('YES', result)\n    else:\n        print('NO')", "def divisors(n):\n    i = 1\n    d = []\n    while i * i <= n:\n        if n % i == 0:\n            d.append(i)\n            if i * i != n:\n                d.append(n // i)\n        i += 1\n    return sorted(d)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if sorted(a) == [j for j in range(1, n + 1)]:\n        print('YES', n + 1)\n    else:\n        s = sum(a)\n        sn = n * (n + 1) // 2\n        rs = s - sn\n        f = 0\n        if rs < 0:\n            print('NO')\n        else:\n            d = divisors(rs)\n            for i in d:\n                if i > n:\n                    b = [x % i for x in a]\n                    if sorted(b) == [j for j in range(1, n + 1)]:\n                        f = 1\n                        ans = i\n                        break\n            if f:\n                print('YES', ans)\n            else:\n                print('NO')", "def factor(x):\n    f = []\n    for i in range(1, int(x ** 0.5) + 1):\n        if x % i == 0:\n            f.extend([i, x // i])\n    return f\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    P = set(list(range(1, N + 1)))\n    sA = set(A)\n    for a in A:\n        if a in P:\n            P.remove(a)\n            sA.remove(a)\n    S = sum((x for x in A))\n    Q = S - N * (N + 1) // 2\n    if not Q:\n        print('YES', N + 1)\n        continue\n    factors = [x for x in factor(Q) if x > N]\n    for f in factors:\n        PP = set()\n        for a in sA:\n            if a % f in P:\n                PP.add(a % f)\n        if PP == P:\n            print('YES', f)\n            break\n    else:\n        print('NO')", "def check_valid(a, x):\n    visit = set()\n    for i in a:\n        ok = i % x\n        if ok > n or ok == 0 or ok in visit:\n            return 0\n        visit.add(ok)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    total -= n * (n + 1) // 2\n    flag = 0\n    for i in range(1, int(total ** 0.5) + 1):\n        if total % i == 0:\n            if check_valid(a, i):\n                flag = 1\n                result = i\n                break\n            if check_valid(a, total // i):\n                flag = 1\n                result = total // i\n                break\n    visit = set()\n    for i in a:\n        if i >= 1 and i <= n:\n            visit.add(i)\n    if len(visit) == n:\n        flag = 1\n        result = n + 1\n    if flag:\n        print('YES', result)\n    else:\n        print('NO')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef ni():\n    return int(input())\n\ndef si():\n    return str(input())\n\ndef all_factors(n):\n    (small, large) = ([], [])\n    for i in range(1, int(n ** 0.5) + 1, 2 if n & 1 else 1):\n        if not n % i:\n            small.append(i)\n            large.append(n // i)\n    if small[-1] == large[-1]:\n        large.pop()\n    large.reverse()\n    small.extend(large)\n    return small\nfor t in range(ni()):\n    N = ni()\n    A = li()\n    A.sort()\n    if A == list(range(1, N + 1)):\n        print('YES', N + 1)\n        continue\n    summ = sum(A) - N * (N + 1) // 2\n    if summ < 0:\n        print('NO')\n        continue\n    f = all_factors(summ)\n    found = False\n    for i in f:\n        if i > 2 * 10 ** 7 or i < 1:\n            break\n        new = []\n        for j in A:\n            new.append(j % i)\n        new.sort()\n        if new == list(range(1, N + 1)):\n            print('YES', i)\n            found = True\n            break\n    if not found:\n        print('NO')", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef ni():\n    return int(input())\n\ndef si():\n    return str(input())\n\ndef all_factors(n):\n    (small, large) = ([], [])\n    for i in range(1, int(n ** 0.5) + 1, 2 if n & 1 else 1):\n        if not n % i:\n            small.append(i)\n            large.append(n // i)\n    if small[-1] == large[-1]:\n        large.pop()\n    large.reverse()\n    small.extend(large)\n    return small\nfor t in range(ni()):\n    N = ni()\n    A = li()\n    A.sort()\n    if A == list(range(1, N + 1)):\n        print('YES', N + 1)\n        continue\n    summ = sum(A) - N * (N + 1) // 2\n    if summ < 0:\n        print('NO')\n        continue\n    f = all_factors(summ)\n    found = False\n    for i in f:\n        if i > 2 * 10 ** 7 or i < 1:\n            break\n        new = []\n        for j in A:\n            new.append(j % i)\n        new.sort()\n        if new == list(range(1, N + 1)):\n            print('YES', i)\n            found = True\n            break\n    if not found:\n        print('NO')", "from numpy import diff\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    p = set([i for i in range(1, n + 1)])\n    ans = 0\n\n    def check(i):\n        return i >= n + 1 and set([x % i for x in a]) == p\n    if set(a) == p:\n        print('YES', n + 1)\n    else:\n        diff = sum(a) - n * (n + 1) // 2\n        i = 1\n        while i * i <= diff:\n            if not diff % i:\n                if check(i):\n                    ans = i\n                    break\n                elif i != diff // i and check(diff // i):\n                    ans = diff // i\n                    break\n            i += 1\n        if ans:\n            print('YES', ans)\n        else:\n            print('NO')", "import sys\nreadline = sys.stdin.readline\n\ndef Divisors(N):\n    divisors = []\n    for i in range(1, N + 1):\n        if i ** 2 >= N:\n            break\n        elif N % i == 0:\n            divisors.append(i)\n    if i ** 2 == N:\n        divisors += [i] + [N // i for i in divisors[::-1]]\n    else:\n        divisors += [N // i for i in divisors[::-1]]\n    return divisors\n\ndef main(N, A):\n    X = sum(A) - (1 + N) * N // 2\n    if X < 0:\n        print('NO')\n        return\n    if len(set(A)) < N:\n        print('NO')\n        return\n    if X == 0:\n        print('YES', N + 1)\n        return\n    for d in Divisors(X):\n        used = [False] * N\n        for a in A:\n            a %= d\n            if 1 <= a <= N:\n                used[a - 1] = True\n        if used.count(True) == N:\n            print('YES', d)\n            return\n    else:\n        print('NO')\nT = int(readline())\nfor _ in range(T):\n    N = int(readline())\n    A = list(map(int, readline().split()))\n    main(N, A)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef check(arr, n, mid):\n    visited = [False] * (n + 1)\n    for i in range(n):\n        if arr[i] % mid == 0 or arr[i] % mid > n or visited[arr[i] % mid]:\n            return False\n        visited[arr[i] % mid] = True\n    return True\n\ndef fact(x):\n    res = set()\n    for i in range(1, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            res.add(i)\n            res.add(x // i)\n    return res\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for __ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        s = sum(arr)\n        p = n * (n + 1) // 2\n        diff = s - p\n        if diff == 0:\n            print('YES', 2 * 10 ** 7)\n        elif diff < 0:\n            print('NO')\n        else:\n            factor = fact(diff)\n            f = []\n            for i in factor:\n                if i < n:\n                    continue\n                f.append(i)\n            for mid in f:\n                if check(arr, n, mid):\n                    print('YES', mid)\n                    break\n            else:\n                print('NO')\nmain()", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef check(arr, n, mid):\n    visited = [False] * (n + 1)\n    for i in range(n):\n        if arr[i] % mid == 0 or arr[i] % mid > n or visited[arr[i] % mid]:\n            return False\n        visited[arr[i] % mid] = True\n    return True\n\ndef fact(x):\n    res = set()\n    for i in range(1, int(math.sqrt(x)) + 1):\n        if x % i == 0:\n            res.add(i)\n            res.add(x // i)\n    return res\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for __ in range(how_much_noob_I_am):\n        n = inpu()\n        arr = lis()\n        s = sum(arr)\n        p = n * (n + 1) // 2\n        diff = s - p\n        if diff == 0:\n            print('YES', 2 * 10 ** 7)\n        elif diff < 0:\n            print('NO')\n        else:\n            factor = fact(diff)\n            f = []\n            factor = list(factor)\n            for i in factor:\n                if i < n:\n                    continue\n                f.append(i)\n            for mid in f:\n                if check(arr, n, mid):\n                    print('YES', mid)\n                    break\n            else:\n                print('NO')\nmain()", "import sys\nimport math\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef check(x):\n    memo = {i: False for i in range(1, n + 1)}\n    for i in arr:\n        memo[i % x] = True\n    for i in range(1, n + 1):\n        if not memo[i]:\n            return False\n    return True\n\ndef factors(num):\n    fact = []\n    for i in range(1, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            fact.append(i)\n            fact.append(num // i)\n    return fact\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if len(set(arr)) != n:\n        print('NO')\n    else:\n        to_use = []\n        avail = set(arr)\n        for i in arr:\n            if i > n:\n                to_use.append(i)\n        remain = []\n        for i in range(1, n + 1):\n            if i not in avail:\n                remain.append(i)\n        if to_use:\n            y = min(to_use)\n            flag = False\n            num = sum(arr) - n * (n + 1) // 2\n            fact = factors(num)\n            for f in fact:\n                if check(f):\n                    print('YES', f)\n                    flag = True\n                    break\n            if not flag:\n                print('NO')\n        else:\n            print('YES', n + 1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = list(map(int, input().split()))\n    if len(set(s)) != n:\n        print('NO')\n    else:\n        sum1 = sum(s) - n * (n + 1) // 2\n        flag = 0\n        i = 1\n        if sum1 == 0:\n            print('YES', n + 1)\n            continue\n        b = [x for x in range(1, n + 1)]\n        while i * i <= sum1:\n            if sum1 % i == 0:\n                if sorted([x % i for x in s]) == b:\n                    flag = 1\n                    print('YES', i)\n                    break\n                elif sorted([x % (sum1 // i) for x in s]) == b:\n                    flag = 1\n                    print('YES', sum1 // i)\n                    break\n            i += 1\n        if flag == 0:\n            print('NO')", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set(a)\n    if len(s) != n:\n        print('NO')\n        continue\n    su = sum(a) - n * (n + 1) // 2\n    if su == 0:\n        print('YES', n + 1)\n        continue\n    factors = set()\n    i = 1\n    while i * i <= su:\n        if su % i == 0:\n            if i > n and i <= 20000000:\n                factors.add(i)\n            if su // i > n and su // i <= 20000000:\n                factors.add(su // i)\n        i += 1\n    for x in factors:\n        dummy = set()\n        for i in range(n):\n            if a[i] % x == 0 or a[i] % x > n or a[i] % x in dummy:\n                break\n            dummy.add(a[i] % x)\n        else:\n            print('YES', x)\n            break\n    else:\n        print('NO')", "def check_valid(a, x):\n    visit = set()\n    for i in a:\n        ok = i % x\n        if ok > n or ok == 0 or ok in visit:\n            return 0\n        visit.add(ok)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    total -= n * (n + 1) // 2\n    flag = 0\n    for i in range(1, int(total ** 0.5) + 1):\n        if total % i == 0:\n            if check_valid(a, i):\n                flag = 1\n                result = i\n                break\n            if check_valid(a, total // i):\n                flag = 1\n                result = total // i\n                break\n    visit = set()\n    for i in a:\n        if i >= 1 and i <= n:\n            visit.add(i)\n    if len(visit) == n:\n        flag = 1\n        result = n + 1\n    if flag:\n        print('YES', result)\n    else:\n        print('NO')", "def check_valid(a, x):\n    visit = set()\n    for i in a:\n        ok = i % x\n        if ok > n or ok == 0 or ok in visit:\n            return 0\n        visit.add(ok)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    total -= n * (n + 1) // 2\n    flag = 0\n    for i in range(1, int(total ** 0.5) + 1):\n        if total % i == 0:\n            if check_valid(a, i):\n                flag = 1\n                result = i\n                break\n            if check_valid(a, total // i):\n                flag = 1\n                result = total // i\n                break\n    visit = set()\n    for i in a:\n        if i >= 1 and i <= n:\n            visit.add(i)\n    if len(visit) == n:\n        flag = 1\n        result = n + 1\n    if flag:\n        print('YES', result)\n    else:\n        print('NO')", "def check_valid(a, x):\n    visit = set()\n    for i in a:\n        ok = i % x\n        if ok > n or ok == 0 or ok in visit:\n            return 0\n        visit.add(ok)\n    return 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    total = sum(a)\n    total -= n * (n + 1) // 2\n    flag = 0\n    for i in range(1, int(total ** 0.5) + 1):\n        if total % i == 0:\n            if check_valid(a, i):\n                flag = 1\n                result = i\n                break\n            if check_valid(a, total // i):\n                flag = 1\n                result = total // i\n                break\n    visit = set()\n    for i in a:\n        if i >= 1 and i <= n:\n            visit.add(i)\n    if len(visit) == n:\n        flag = 1\n        result = n + 1\n    if flag:\n        print('YES', result)\n    else:\n        print('NO')", "from sys import stdin, stdout\ninput = stdin.readline\n\ndef check(i):\n    return set([j % i for j in a]) == perm\n\ndef f():\n    i = 1\n    while i * i <= diff:\n        if diff % i == 0:\n            if check(i):\n                return i\n            if diff // i != i and check(diff // i):\n                return diff // i\n        i += 1\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    perm = set([i + 1 for i in range(n)])\n    if set(a) == perm:\n        print('YES', n + 1)\n        continue\n    diff = sum(a) - n * (n + 1) // 2\n    ans = f()\n    if ans:\n        print('YES', ans)\n    else:\n        print('NO')", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = set(a)\n    if len(s) != n:\n        print('NO')\n        continue\n    su = sum(a) - n * (n + 1) // 2\n    if su == 0:\n        print('YES', n + 1)\n        continue\n    factors = set()\n    i = 1\n    while i * i <= su:\n        if su % i == 0:\n            if i > n and i <= 20000000:\n                factors.add(i)\n            if su // i > n and su // i <= 20000000:\n                factors.add(su // i)\n        i += 1\n    for x in factors:\n        demo_s = set()\n        for i in range(n):\n            if a[i] % x == 0 or a[i] % x > n or a[i] % x in demo_s:\n                break\n            demo_s.add(a[i] % x)\n        else:\n            print('YES', x)\n            break\n    else:\n        print('NO')", "import math\n\ndef check(arr, num, n):\n    visit = [0] * (n + 1)\n    for e in arr:\n        if e % num == 0 or e % num > n or visit[e % num]:\n            return 0\n        visit[e % num] = 1\n    return 1\n\ndef fact(n):\n    factor = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            factor.append(i)\n            if n // i != i:\n                factor.append(n // i)\n    return factor\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arrsum = sum(arr)\n    t = n * (n + 1) // 2\n    diff = arrsum - t\n    if diff == 0:\n        print('YES', n + 1)\n    elif diff < 0:\n        print('NO')\n    else:\n        factor = fact(diff)\n        f = []\n        factor.sort(reverse=1)\n        for e in factor:\n            if e <= n:\n                break\n            if e <= 2 * 10 ** 7:\n                f.append(e)\n        for e in f:\n            if check(arr, e, n):\n                print('YES', e)\n                break\n        else:\n            print('NO')", "def div(n):\n    i = 1\n    d = []\n    while i * i <= n:\n        if n % i == 0:\n            if i <= 2 * 10 ** 7:\n                d.append(i)\n            if i * i != n:\n                if n // i <= 2 * 10 ** 7:\n                    d.append(n // i)\n        i += 1\n    return d\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input().split()\n    a = [int(x) for x in a]\n    b = [i for i in range(1, n + 1)]\n    a.sort()\n    if a == b:\n        print('YES', n + 1)\n    else:\n        s = sum(a) - n * (n + 1) // 2\n        if s < 0:\n            print('NO')\n        else:\n            flag = 0\n            d = div(s)\n            d.sort()\n            for i in d:\n                if sorted([x % i for x in a]) == b:\n                    flag = 1\n                    ans = i\n                    break\n            if flag == 1:\n                print('YES', ans)\n            else:\n                print('NO')", "from math import ceil, log, sqrt\n\ndef check(lst, var, n):\n    visited = [0] * (n + 1)\n    for x in lst:\n        if x % var == 0 or x % var > n or visited[x % var]:\n            return 0\n        visited[x % var] = 1\n    return 1\n\ndef factors(x):\n    fact = []\n    for y in range(1, int(sqrt(x) + 1)):\n        if x % y == 0:\n            fact.append(y)\n            if x // y != y:\n                fact.append(x // y)\n    return fact\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    sm = sum(lst)\n    total = n * (n + 1) // 2\n    c = sm - total\n    if c == 0:\n        print('YES', n + 1)\n    elif c < 0:\n        print('NO')\n    else:\n        factor = factors(c)\n        fctrs = []\n        factor.sort(reverse=1)\n        for x in factor:\n            if x <= n:\n                break\n            if x <= 2 * 10 ** 7:\n                fctrs.append(x)\n        for x in fctrs:\n            if check(lst, x, n):\n                print('YES', x)\n                break\n        else:\n            print('NO')", "import sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nfrom math import log\nfrom math import gcd\nfrom math import atan2, acos\nfrom random import randint\nsa = lambda : input_()\nsb = lambda : int(input_())\nsc = lambda : input_().split()\nsd = lambda : list(map(int, input_().split()))\nsflo = lambda : list(map(float, input_().split()))\nse = lambda : float(input_())\nsf = lambda : list(input_())\nflsh = lambda : sys.stdout.flush()\nmod = 10 ** 9 + 7\nmod1 = 998244353\ngp = []\ncost = []\ndp = []\nmx = []\nans1 = []\nans2 = []\nspecial = []\nspecnode = []\na = 0\nkthpar = []\n\ndef dfs2(root, par):\n    if par != -1:\n        dp[root] = dp[par] + 1\n    for i in range(1, 20):\n        if kthpar[root][i - 1] != -1:\n            kthpar[root][i] = kthpar[kthpar[root][i - 1]][i - 1]\n    for child in gp[root]:\n        if child == par:\n            continue\n        kthpar[child][0] = root\n        dfs(child, root)\nans = 0\na = []\n(n, k) = (0, 0)\nb = []\nvis = []\ntot = 0\ntime = []\ntime1 = []\nadj = []\nmx = -1\neps = 1e-07\ngp = []\nans = []\n\ndef update_it(bit, i, val):\n    n = len(bit)\n    while i < n:\n        bit[i] += val\n        i += i & -i\n\ndef get_ans(bit, i):\n    n = len(bit)\n    tot = 0\n    while i > 0:\n        tot += bit[i]\n        i -= i & -i\n    return tot\n\ndef flip(a, l, r):\n    for i in range(l, r):\n        a[i] = '0' if a[i] == '1' else '1'\n    return\n\ndef hnbhai(tc):\n    n = sb()\n    a = sd()\n    d = {}\n    mx = 0\n    b = a.copy()\n    b.sort()\n    c = [i for i in range(1, n + 1)]\n    if b == c:\n        print('YES', 2 * 10 ** 7)\n        return\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n        mx = max(mx, d[i])\n    if mx > 1:\n        print('NO')\n        return\n    sm = sum(a)\n    tot = 0\n    mn = float('inf')\n    for i in a:\n        if i > n:\n            mn = min(mn, i)\n    for i in range(1, n + 1):\n        if d.get(i) is not None:\n            sm -= i\n            continue\n        sm -= i\n    x = 1\n    for i in range(1, sm + 1):\n        if i * i > sm:\n            break\n        if sm % i == 0:\n            x = i\n            e = {}\n            b = a.copy()\n            for j in range(n):\n                b[j] %= x\n                if b[j] > 0 and b[j] <= n:\n                    e[b[j]] = 1\n            if len(e) == n:\n                print('YES', x)\n                return\n            x = sm // i\n            e = {}\n            b = a.copy()\n            for j in range(n):\n                b[j] %= x\n                if b[j] > 0 and b[j] <= n:\n                    e[b[j]] = 1\n            if len(e) == n:\n                print('YES', x)\n                return\n    print('NO')\nfor _ in range(sb()):\n    hnbhai(_ + 1)", "def divisors(m):\n    result = set()\n    for i in range(1, int(m ** 0.5) + 1):\n        if m % i == 0:\n            result.add(i)\n            result.add(m // i)\n    return sorted(result)\n\ndef solve(n, a):\n    if len(set(a)) != n:\n        return 'NO'\n    perm = set(range(1, n + 1))\n    m = sum(a) - n * (n + 1) // 2\n    if m == 0:\n        return 'YES ' + str(n + 1)\n    divs = [d for d in divisors(m) if d > n]\n    for div in divs:\n        if set((x % div for x in a)) == perm:\n            return 'YES ' + str(div)\n    return 'NO'\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    result = solve(n, a)\n    print(result)", "import sys\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab, bc, cd: ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x: print(x)\nprinT = lambda x: print(x)\nf = lambda : sys.stdout.flush()\ninv = lambda x: pow(x, mod - 2, mod)\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\nmod = 10 ** 9 + 7\nmod1 = 998244353\nfor _ in range(ii()):\n    n = ii()\n    a = il()\n    b = [i for i in range(1, n + 1)]\n    if sorted(a) == b:\n        print('YES', n + 1)\n        continue\n    d = {}\n    mx = 0\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n        mx = max(mx, d[i])\n    if mx > 1:\n        print('NO')\n        continue\n    if a.count(n + 1):\n        print('NO')\n        continue\n    d = {}\n    b1 = []\n    for i in range(n):\n        if a[i] >= 1 and a[i] <= n:\n            d[a[i]] = 1\n        else:\n            b1.append(a[i])\n    b = []\n    for i in range(1, n + 1):\n        if not d.get(i):\n            b.append(i)\n    t = 0\n    if len(b) == 1:\n        x = b1[0] - b[0]\n        if x > n:\n            print('YES', x)\n        else:\n            print('NO')\n        continue\n    t = sum(b1) - sum(b)\n    b1.sort()\n    p = 2\n    fl = 0\n    ans = -1\n    while p * p <= t:\n        if t % p == 0:\n            p1 = t // p\n            if p > n and p < b1[0] and (p1 >= len(b1)):\n                e = {}\n                b = a.copy()\n                for j in range(n):\n                    b[j] %= p\n                    if b[j] > 0 and b[j] <= n:\n                        e[b[j]] = 1\n                if len(e) == n:\n                    fl = 1\n                    ans = p\n                    break\n            (p1, p) = (p, p1)\n            if p > n and p < b1[0] and (p1 >= len(b1)):\n                e = {}\n                b = a.copy()\n                for j in range(n):\n                    b[j] %= p\n                    if b[j] > 0 and b[j] <= n:\n                        e[b[j]] = 1\n                if len(e) == n:\n                    fl = 1\n                    ans = p\n                    break\n            (p1, p) = (p, p1)\n        p += 1\n    if fl:\n        print('YES', ans)\n    else:\n        print('NO')", "def divisors(n):\n    i = 1\n    d = []\n    while i * i <= n:\n        if n % i == 0:\n            d.append(i)\n            if i * i != n:\n                d.append(n // i)\n        i += 1\n    return sorted(d)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if sorted(a) == [j for j in range(1, n + 1)]:\n        print('YES', n + 1)\n    else:\n        s = sum(a)\n        sn = n * (n + 1) // 2\n        rs = s - sn\n        f = 0\n        if rs < 0:\n            print('NO')\n        else:\n            d = divisors(rs)\n            for i in d:\n                b = [x % i for x in a]\n                if sorted(b) == [j for j in range(1, n + 1)]:\n                    f = 1\n                    ans = i\n                    break\n            if f:\n                print('YES', ans)\n            else:\n                print('NO')", "def solve(arr, val, n):\n    st = set()\n    for item in arr:\n        ans = item % val\n        if ans > n or ans == 0 or ans in st:\n            return False\n        st.add(ans)\n    return True\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    sm = sum(arr) - n * (n + 1) // 2\n    i = 1\n    temp = 0\n    while i * i <= sm:\n        if sm % i != 0:\n            pass\n        elif solve(arr, i, n):\n            temp = 1\n            ans = i\n            break\n        elif solve(arr, sm // i, n):\n            temp = 1\n            ans = sm // i\n            break\n        i += 1\n    visited = set()\n    for item in arr:\n        if item >= 1 and item <= n:\n            visited.add(item)\n    if len(visited) == n:\n        temp = 1\n        ans = n + 1\n    if temp:\n        print('YES', ans)\n    else:\n        print('NO')\n    t -= 1"]