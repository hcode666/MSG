["mod = 998244353\nfrom sys import stdin\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 6)\n(n, q) = [int(x) for x in stdin.readline().split()]\ngraph = [[] for x in range(n + 1)]\nfor i in range(q):\n    (u, v) = [int(x) for x in stdin.readline().split()]\n    u -= 1\n    v -= 1\n    if u > v:\n        (u, v) = (v, u)\n    v += 1\n    graph[u].append(v)\n    graph[v].append(u)\nans = 1\nvis = {}\n\ndef dfs(curV, ans):\n    if curV in vis:\n        return 0\n    else:\n        vis[curV] = 1\n        ans[0] += 1\n        temp = 1\n        for neighbour in graph[curV]:\n            dfs(neighbour, ans)\nfor i in range(1, n + 1):\n    if i not in vis:\n        temp = [0]\n        dfs(i, temp)\n        ans = ans * 2 ** (temp[0] - 1) % mod\nprint(ans)", "mod = 998244353\nfrom sys import stdin\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 6)\n(n, q) = [int(x) for x in stdin.readline().split()]\ngraph = [[] for x in range(n + 1)]\nfor i in range(q):\n    (u, v) = [int(x) for x in stdin.readline().split()]\n    u -= 1\n    v -= 1\n    if u > v:\n        (u, v) = (v, u)\n    v += 1\n    graph[u].append(v)\n    graph[v].append(u)\nans = 1\nvis = {}\n\ndef dfs(curV, ans):\n    if curV in vis:\n        return 0\n    else:\n        vis[curV] = 1\n        ans[0] += 1\n        temp = 1\n        for neighbour in graph[curV]:\n            dfs(neighbour, ans)\nfor i in range(1, n + 1):\n    if i not in vis:\n        temp = [0]\n        dfs(i, temp)\n        ans = ans * 2 ** (temp[0] - 1) % mod\nprint(ans)", "mod = 998244353\nfrom sys import stdin\nfrom sys import setrecursionlimit\nsetrecursionlimit(10 ** 6)\n(n, q) = [int(x) for x in stdin.readline().split()]\ngraph = [[] for x in range(n + 1)]\nfor i in range(q):\n    (u, v) = [int(x) for x in stdin.readline().split()]\n    u -= 1\n    v -= 1\n    if u > v:\n        (u, v) = (v, u)\n    v += 1\n    graph[u].append(v)\n    graph[v].append(u)\nans = 1\nvis = {}\n\ndef dfs(curV, ans):\n    if curV in vis:\n        return 0\n    else:\n        vis[curV] = 1\n        ans[0] += 1\n        temp = 1\n        for neighbour in graph[curV]:\n            dfs(neighbour, ans)\nfor i in range(1, n + 1):\n    if i not in vis:\n        temp = [0]\n        dfs(i, temp)\n        ans = ans * 2 ** (temp[0] - 1) % mod\nprint(ans)"]