["import math\nfrom statistics import mean\ntc = int(input())\nwhile tc > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sum(a)\n    a.sort()\n    ans = b / n\n    c = 0\n    for i in range(n - 1, 0, -1):\n        b -= a[i]\n        c += a[i]\n        ans = max(ans, (c + b / i) / (n - i + 1))\n    print(ans)\n    tc -= 1", "test = int(input())\nwhile test != 0:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    q = sum(a)\n    p = 0\n    ans = q / n\n    for i in range(n - 1, 0, -1):\n        p += a[i]\n        q -= a[i]\n        ans = max(ans, (q / i + p) / (n - i + 1))\n    print(ans)\n    test -= 1", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    s = sum(A)\n    ans = s / N\n    cur = 0\n    A.sort()\n    for i in range(N - 1, 0, -1):\n        cur += A[i]\n        s -= A[i]\n        ans = max(ans, (cur + s / i) / (N - i + 1))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    sm = sum(a)\n    pls = 0\n    ans = sm / n\n    for i in range(n - 1, 0, -1):\n        pls += a[i]\n        sm -= a[i]\n        ans = max(ans, (sm / i + pls) / (n - i + 1))\n    print(ans)", "from math import inf\nfrom collections import *\nimport math, os, sys, heapq, bisect, random, threading\nfrom functools import lru_cache\nfrom itertools import *\n\ndef inp():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef out(var):\n    sys.stdout.write(str(var))\n\ndef inpu():\n    return int(inp())\n\ndef lis():\n    return list(map(int, inp().split()))\n\ndef stringlis():\n    return list(map(str, inp().split()))\n\ndef sep():\n    return map(int, inp().split())\n\ndef strsep():\n    return map(str, inp().split())\n\ndef fsep():\n    return map(float, inp().split())\n(M, M1) = (1000000007, 998244353)\n\ndef main():\n    how_much_noob_I_am = 1\n    how_much_noob_I_am = inpu()\n    for _ in range(1, how_much_noob_I_am + 1):\n        n = inpu()\n        arr = lis()\n        arr.sort()\n        p = 0\n        q = sum(arr)\n        ans = q / n\n        for i in range(n - 1, 0, -1):\n            p += arr[i]\n            q -= arr[i]\n            ans = max(ans, (q / i + p) / (n - i + 1))\n        print(ans)\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    arr.sort()\n    mean = total / n\n    right = 0\n    index = n - 1\n    while index > 0:\n        total -= arr[index]\n        right += arr[index]\n        mean = max(mean, (total / index + right) / (n - index + 1))\n        index -= 1\n    print(mean)", "T = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list(map(int, input().split()))\n    tot = sum(A)\n    A.sort()\n    A.reverse()\n    ans = tot / N\n    cur = 0\n    for k in range(2, N):\n        tot -= A[k - 2]\n        cur += A[k - 2]\n        ans = max(ans, (cur + tot / (N - k + 1)) / k)\n    if ans.is_integer():\n        print(int(ans))\n    else:\n        print(ans)\n    T -= 1", "import sys, os\nfrom sys import stdin, stdout\nio_path = 'E:\\\\Personal\\\\competitve-programming\\\\IO'\nif os.path.exists(io_path):\n    sys.stdout = open(io_path + '/output.txt', 'w')\n    sys.stdin = open(io_path + '/input.txt', 'r')\n\ndef get_ints():\n    return map(int, input().strip().split())\n\ndef get_ints_list():\n    return list(map(int, input().strip().split()))\n\ndef get_string():\n    return input().strip()\ntest_cases = int(input())\nwhile test_cases > 0:\n    n = int(input())\n    arr = get_ints_list()\n    arr.sort()\n    total = 0\n    for i in arr:\n        total += i\n    mean = total / n\n    index = n - 1\n    indv_sum = 0\n    while index > 0:\n        total -= arr[index]\n        indv_sum += arr[index]\n        mean = max(mean, (total / index + indv_sum) / (n - index + 1))\n        index -= 1\n    print('{0:.6f}'.format(mean))\n    test_cases -= 1", "def cal(l, i, j):\n    if i == j:\n        return l[i]\n    else:\n        return (sum(l[i:j]) / (j - i) + l[j]) / 2\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    pre = 0\n    ans = 0\n    c = 0\n    l.sort()\n    temp = l.count(l[-1])\n    temp1 = temp * l[-1]\n    rem = l[:n - temp]\n    rem.append(0)\n    if n - temp == 0:\n        rem = l[-1]\n    else:\n        rem = sum(rem) / (n - temp)\n    ans = (rem + temp1) / (temp + 1)\n    sume = sum(l)\n    sum1 = 0\n    answer = sume / n\n    for i in range(n - 1, 0, -1):\n        sum1 += l[i]\n        sume -= l[i]\n        temp = sume / i\n        temp += sum1\n        temp /= n - i + 1\n        answer = max(temp, answer)\n    print('{0:.6f}'.format(answer))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    temp = 0\n    s = sum(arr)\n    t = 0\n    ans = 0\n    for el in arr:\n        temp += el\n        t += 1\n        ans = max(ans, (temp / t + (s - temp)) / (n - t + 1))\n    print(ans)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    lks = list(map(int, input().split()))\n    lks.sort()\n    ss = sum(lks)\n    curr = ans = 0\n    for i in range(n):\n        curr += lks[i]\n        ans = max(ans, (ss - curr + curr / (i + 1)) / (n - i))\n    print(ans)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = sum(a)\n    c = ss = ans = 0\n    for i in range(n):\n        ss += a[i]\n        s -= a[i]\n        c += 1\n        ans = max(ans, (s + ss / c) / (n - i))\n    print(ans)", "t = int(input())\nfor test in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = sum(a)\n    c = ss = ans = 0\n    for i in range(n):\n        ss += a[i]\n        c += 1\n        ans = max(ans, (s - ss + ss / c) / (n - i))\n    print(ans)", "test_cases = int(input())\nfor i in range(test_cases):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    mid = n // 2\n    (curr_sum, remainder) = (sum(arr[:mid]), sum(arr[mid:]))\n    curr_max = (curr_sum / mid + remainder) / (n - mid + 1)\n    for j in range(n // 2 + 1, n):\n        curr_sum += arr[j - 1]\n        remainder -= arr[j - 1]\n        curr = (curr_sum / j + remainder) / (n - j + 1)\n        if curr >= curr_max:\n            curr_max = curr\n        else:\n            break\n    print(curr_max)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    n = len(arr)\n    arr.sort()\n    prefixsum = [0] * (n + 1)\n    for i in range(1, len(arr) + 1):\n        prefixsum[i] = prefixsum[i - 1] + arr[i - 1]\n    backwardsum = 0\n    res = 0\n    for i in range(len(arr) - 1, -1, -1):\n        c = (prefixsum[i + 1] / (i + 1) + backwardsum) / (len(arr) - 1 - i + 1)\n        res = max(res, c)\n        backwardsum += arr[i]\n    if int(res) == res:\n        print(int(res))\n    else:\n        print(res)", "import sys\nfrom math import sqrt, gcd, factorial, ceil, floor\nfrom collections import deque, Counter, OrderedDict\nfrom heapq import heapify, heappush, heappop\ninput = lambda : sys.stdin.readline()\nI = lambda : int(input())\nS = lambda : input().strip()\nM = lambda : map(int, input().strip().split())\nL = lambda : list(map(int, input().strip().split()))\nmod = 1000000007\nfor _ in range(I()):\n    n = I()\n    a = L()\n    a.sort()\n    ans = (sum(a) + a[-1] * (n - 2)) / (2 * (n - 1))\n    s = a[-1]\n    s2 = sum(a) - a[-1]\n    for i in range(n - 2, 0, -1):\n        s += a[i]\n        s2 -= a[i]\n        tans = (s + s2 / i) / (n - i + 1)\n        ans = max(ans, tans)\n    print('{:.6f}'.format(ans))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    a.sort()\n    fin = 1.0 * s / n\n    ss1 = 0\n    for i in range(n - 1, 0, -1):\n        ss1 += a[i]\n        s -= a[i]\n        ans1 = 1.0 * s / i + ss1\n        ans1 = ans1 / (n - i + 1)\n        fin = max(fin, ans1)\n    print(fin)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    a.sort()\n    s = sum(a)\n    ss = 0\n    c = 0\n    for i in range(n):\n        ss = ss + a[i]\n        c = c + 1\n        ans = max(ans, (s - ss + ss / c) / (n - i))\n    print(ans)", "nn = int(input())\nfor awd in range(nn):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.sort()\n    vals = []\n    start = 0\n    for (ind, i) in enumerate(l):\n        ind += 1\n        start += i\n        vals.append(start / ind)\n    maxi = 0\n    dp = {}\n    for i in range(len(l) - 1, len(l) // 2 - 2, -1):\n        count = len(l) - i + 1\n        total = l[i] + dp.get(i + 1, 0)\n        dp[i] = total\n        calc = (total + vals[i - 1]) / count\n        maxi = max(maxi, calc)\n    print(maxi)", "for tcase in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    s = [0]\n    for ai in a:\n        s.append(s[-1] + ai)\n    ans = max(((s[n] - s[i] + s[i] / i) / (n - i + 1) for i in range(1, n)))\n    print(ans)", "from collections import deque\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    A.sort()\n    (current_sum, current_len) = (sum(A), len(A))\n    mean = current_sum / current_len\n    a_q = deque(A)\n    combined = 0\n    while True:\n        item_1 = a_q.popleft()\n        item_2 = a_q.popleft()\n        current_len -= 1\n        combined += 1\n        current_sum = current_sum - item_1 - item_2 + (item_1 * combined + item_2) / (combined + 1)\n        mean_after = current_sum / current_len\n        if mean_after > mean:\n            mean = mean_after\n            a_q.appendleft((item_1 * combined + item_2) / (combined + 1))\n        else:\n            print(mean)\n            break\n        if len(a_q) <= 1:\n            print(mean)\n            break", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    (psum, sumi) = (0, sum(a))\n    (maxi, rm) = (sumi / n, n)\n    for (i, v) in enumerate(a, start=1):\n        psum += v\n        sumi -= v\n        maxi = max(maxi, (psum / i + sumi) / rm)\n        rm -= 1\n    print(maxi)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    a.sort()\n    s = sum(a)\n    ans = s / n\n    cur = 0\n    for i in range(n - 1):\n        cur += a[i]\n        avg = (cur / (i + 1) + (s - cur)) / (n - i)\n        if avg < ans:\n            break\n        ans = avg\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = sorted(list(map(int, input().split())))\n    if n == 2:\n        print(sum(a) / 2)\n        continue\n    s = sum(a)\n    curr = a[0]\n    currn = 1\n    currt = s - a[0]\n    ms = [s / n]\n    for i in a[1:]:\n        curr = (curr * currn + i) / (currn + 1)\n        currn += 1\n        currt = currt - i\n        ms.append((currt + curr) / (n - currn + 1))\n    print(max(ms))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ar.sort(reverse=True)\n    s = sum(ar)\n    ans = s / n\n    curr_sz = 1\n    curr = 0\n    for elm in ar:\n        if n == curr_sz:\n            break\n        s -= elm\n        curr += elm\n        avg = (s / (n - curr_sz) + curr) / (curr_sz + 1)\n        curr_sz += 1\n        ans = max(ans, avg)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    line = input()\n    a = list(map(int, line.split()))\n    a.sort(reverse=True)\n    total_sum = sum(a)\n    avg = total_sum / n\n    total_n = 1\n    total_avgs = 0\n    big_avg = avg\n    removed = False\n    while len(a) > 0:\n        if a[0] > big_avg:\n            value = a.pop(0)\n            total_sum -= value\n            n -= 1\n            avg = total_sum / n\n            total_avgs += value\n            total_n += 1\n            temp = big_avg\n            big_avg = (avg + total_avgs) / total_n\n            if temp > big_avg:\n                print(temp)\n                removed = True\n                break\n        else:\n            break\n    if not removed:\n        print(big_avg)", "for _ in range(int(input())):\n    size = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    presum = [0] * size\n    presum[0] = arr[0]\n    for i in range(1, size):\n        presum[i] = presum[i - 1] + arr[i]\n    ans = -1\n    for i in range(0, size):\n        ans = max(ans, (presum[i] / (i + 1) + presum[size - 1] - presum[i]) / (size - i))\n    print(ans)", "T = int(input())\nfor ts in range(T):\n    N = int(input())\n    A = list(map(int, input().split(' ')))\n    A.sort()\n    max_av = 0.5 * sum(A[:N - 1]) / (N - 1) + 0.5 * A[N - 1]\n    for i in range(3, N):\n        av_all = sum(A[:N - i + 1]) / (N - i + 1)\n        av = 1 / i * (sum(A[N - i + 1:]) + av_all)\n        if max_av > av:\n            break\n        else:\n            max_av = av\n    print(max_av)"]