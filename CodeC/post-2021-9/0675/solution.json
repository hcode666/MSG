["import heapq as hq\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [1] * n\n    start = 0\n    time = 1\n    first = [(-a[start], start)]\n    hq.heapify(first)\n    while len(first):\n        x = hq.heappop(first)\n        ans[x[1]] = time\n        time += 1\n        start += 1\n        if start < n:\n            hq.heappush(first, (-a[start], start))\n            start += 1\n        if start < n:\n            hq.heappush(first, (-a[start], start))\n    print(*ans)", "import heapq as hq\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = [1] * n\n    start = 0\n    time = 1\n    first = [(-a[start], start)]\n    hq.heapify(first)\n    while len(first):\n        x = hq.heappop(first)\n        ans[x[1]] = time\n        time += 1\n        start += 1\n        if start < n:\n            hq.heappush(first, (-a[start], start))\n            start += 1\n        if start < n:\n            hq.heappush(first, (-a[start], start))\n    print(*ans)", "import heapq as hq\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = [0] * n\n    ans[0] = 1\n    rank = 2\n    p = 1\n    temp = []\n    hq.heapify(temp)\n    while True:\n        while p < n and p <= 2 * rank - 2:\n            hq.heappush(temp, [-1 * l[p], p])\n            p = p + 1\n        ans[hq.heappop(temp)[1]] = rank\n        rank = rank + 1\n        if p > n - 1:\n            break\n    while len(temp) != 0:\n        ans[hq.heappop(temp)[1]] = rank\n        rank = rank + 1\n    for i in ans:\n        print(i, end=' ')\n    print()", "import heapq\ntestcases = int(input())\nwhile testcases:\n    N = int(input())\n    person_pow = list(map(int, input().split()))\n    time = [1] * N\n    curr_time = 1\n    st = 0\n    front_person = [(-person_pow[st], st)]\n    heapq.heapify(front_person)\n    while len(front_person):\n        person = heapq.heappop(front_person)\n        time[person[1]] = curr_time\n        curr_time += 1\n        st += 1\n        if st < N:\n            heapq.heappush(front_person, (-person_pow[st], st))\n            st += 1\n        if st < N:\n            heapq.heappush(front_person, (-person_pow[st], st))\n    print(*time)\n    testcases -= 1", "import heapq\ntestcases = int(input())\nwhile testcases:\n    N = int(input())\n    person_pow = list(map(int, input().split()))\n    time = [1] * N\n    curr_time = 1\n    st = 0\n    front_person = [(-person_pow[st], st)]\n    heapq.heapify(front_person)\n    while len(front_person):\n        person = heapq.heappop(front_person)\n        time[person[1]] = curr_time\n        curr_time += 1\n        st += 1\n        if st < N:\n            heapq.heappush(front_person, (-person_pow[st], st))\n            st += 1\n        if st < N:\n            heapq.heappush(front_person, (-person_pow[st], st))\n    print(*time)\n    testcases -= 1", "from heapq import *\nfor _ in range(int(input())):\n    n = int(input())\n    power = list(map(int, input().split()))\n    l = [(-1 * power[0], 0)]\n    heapify(l)\n    ans = [0 for i in range(n)]\n    i = 1\n    time = 1\n    while len(l):\n        x = heappop(l)\n        if i < n:\n            heappush(l, (-1 * power[i], i))\n            i += 1\n        if i < n:\n            heappush(l, (-1 * power[i], i))\n            i += 1\n        ans[x[1]] = time\n        time += 1\n    print(' '.join([str(ans[i]) for i in range(n)]))", "from collections import defaultdict\nimport heapq\nfor _ in range(int(input())):\n    n = int(input())\n    power = list(map(int, input().split()))\n    maxHeap = []\n    ansTable = {0: 1}\n    second = 2\n    idx = 1\n    while idx != n:\n        heapq.heappush(maxHeap, [-power[idx], idx])\n        if idx + 1 != n:\n            idx += 1\n            heapq.heappush(maxHeap, [-power[idx], idx])\n        (p, i) = heapq.heappop(maxHeap)\n        ansTable[i] = second\n        second += 1\n        idx += 1\n    while maxHeap:\n        (p, i) = heapq.heappop(maxHeap)\n        ansTable[i] = second\n        second += 1\n    for i in range(n):\n        print(ansTable[i], end=' ')\n    print()", "import heapq\nfor _ in range(int(input())):\n    n = int(input())\n    power = list(map(int, input().split()))\n    l = [(-1 * power[0], 0)]\n    heapq.heapify(l)\n    ans = [0 for i in range(n)]\n    i = 1\n    time = 1\n    while len(l) > 0:\n        x = heapq.heappop(l)\n        if i < n:\n            heapq.heappush(l, (-1 * power[i], i))\n            i += 1\n        if i < n:\n            heapq.heappush(l, (-1 * power[i], i))\n            i += 1\n        ans[x[1]] = time\n        time += 1\n    print(' '.join([str(ans[i]) for i in range(n)]))", "from heapq import heappop, heappush, merge, heapify\nimport sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    power = list(map(int, input().split()))\n    time = 1\n    ans = [0] * n\n    heaps = []\n    heappush(heaps, (-power[0], 0))\n    idx = 1\n    while heaps:\n        (pw, ind) = heappop(heaps)\n        ans[ind] = time\n        if idx < n:\n            heappush(heaps, (-power[idx], idx))\n            idx += 1\n        if idx < n:\n            heappush(heaps, (-power[idx], idx))\n            idx += 1\n        time += 1\n    sys.stdout.write(' '.join((str(x) for x in ans)))\n    sys.stdout.write('\\n')", "import heapq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    power = list(map(int, input().split()))\n    l = [(-1 * power[0], 0)]\n    heapq.heapify(l)\n    ans = [0 for i in range(n)]\n    i = 1\n    time = 1\n    while len(l) > 0:\n        x = heapq.heappop(l)\n        if i < n:\n            heapq.heappush(l, (-1 * power[i], i))\n            i += 1\n        if i < n:\n            heapq.heappush(l, (-1 * power[i], i))\n            i += 1\n        ans[x[1]] = time\n        time += 1\n    print(' '.join([str(ans[i]) for i in range(n)]))"]