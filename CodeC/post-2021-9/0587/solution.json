["from collections import Counter\n\ndef main():\n    (n, x) = map(int, input().split())\n    if n == 2 and x == 2:\n        print(-1)\n        return\n    if n == 2 and x == 3:\n        print(1, 1, 2)\n        return\n    nb = bin(n)[2:]\n    xb = bin(x)[2:]\n    if len(xb) > len(nb):\n        print(-1)\n        return\n    if len(nb) > len(xb):\n        if nb[1:] == '0' * (len(nb) - 1):\n            print(-1)\n            return\n    st_pow = set()\n    i = 1\n    while i <= n:\n        st_pow.add(i)\n        i *= 2\n    curr = 3\n    for i in range(4, n + 1):\n        if i not in st_pow:\n            print(1, curr, i)\n            curr |= i\n    xb = xb[::-1]\n    for i in range(len(xb)):\n        p = pow(2, i)\n        if xb[i] == '0':\n            print(2, curr, p)\n            st_pow.remove(p)\n            curr ^= p\n        else:\n            print(1, curr, p)\n            st_pow.remove(p)\n            curr |= p\n    if len(st_pow) > 0:\n        a = list(st_pow)\n        for z in a:\n            print(2, curr, z)\n            curr ^= z\n    return\nfor _ in range(int(input())):\n    main()", "from collections import Counter\n\ndef main():\n    (n, x) = map(int, input().split())\n    if n == 2 and x == 2:\n        print(-1)\n        return\n    if n == 2 and x == 3:\n        print(1, 1, 2)\n        return\n    nb = bin(n)[2:]\n    xb = bin(x)[2:]\n    if len(xb) > len(nb):\n        print(-1)\n        return\n    if len(nb) > len(xb):\n        if nb[1:] == '0' * (len(nb) - 1):\n            print(-1)\n            return\n    st_pow = set()\n    i = 1\n    while i <= n:\n        st_pow.add(i)\n        i *= 2\n    curr = 3\n    for i in range(4, n + 1):\n        if i not in st_pow:\n            print(1, curr, i)\n            curr |= i\n    xb = xb[::-1]\n    for i in range(len(xb)):\n        p = pow(2, i)\n        if xb[i] == '0':\n            print(2, curr, p)\n            st_pow.remove(p)\n            curr ^= p\n        else:\n            print(1, curr, p)\n            st_pow.remove(p)\n            curr |= p\n    if len(st_pow) > 0:\n        a = list(st_pow)\n        for z in a:\n            print(2, curr, z)\n            curr ^= z\n    return\nfor _ in range(int(input())):\n    main()", "from collections import Counter\n\ndef main():\n    (n, x) = map(int, input().split())\n    if n == 2 and x == 2:\n        print(-1)\n        return\n    if n == 2 and x == 3:\n        print(1, 1, 2)\n        return\n    nb = bin(n)[2:]\n    xb = bin(x)[2:]\n    if len(xb) > len(nb):\n        print(-1)\n        return\n    if len(nb) > len(xb):\n        if nb[1:] == '0' * (len(nb) - 1):\n            print(-1)\n            return\n    st_pow = set()\n    i = 1\n    while i <= n:\n        st_pow.add(i)\n        i *= 2\n    curr = 3\n    for i in range(4, n + 1):\n        if i not in st_pow:\n            print(1, curr, i)\n            curr |= i\n    xb = xb[::-1]\n    for i in range(len(xb)):\n        p = pow(2, i)\n        if xb[i] == '0':\n            print(2, curr, p)\n            st_pow.remove(p)\n            curr ^= p\n        else:\n            print(1, curr, p)\n            st_pow.remove(p)\n            curr |= p\n    if len(st_pow) > 0:\n        a = list(st_pow)\n        for z in a:\n            print(2, curr, z)\n            curr ^= z\n    return\nfor _ in range(int(input())):\n    main()", "from collections import *\nimport bisect\ntc = int(input())\nfor _ in range(1, 1 + tc):\n    (n, x) = list(map(int, input().split()))\n    bk = 0\n    for i in range(20, 0, -1):\n        if n & 1 << i > 0:\n            bk = 1 << i + 1\n            break\n    if x >= bk:\n        print(-1)\n        continue\n    if n & n - 1 == 0 and x & n == 0:\n        print(-1)\n        continue\n    if n == 2:\n        if x == 3:\n            print('1 1 2')\n        else:\n            print(-1)\n        continue\n    s1 = [x for x in range(1, n + 1)]\n    s2 = []\n    for i in range(20):\n        if 1 << i > n:\n            break\n        if 1 << i & x == 0:\n            s1.remove(1 << i)\n            s2.append(1 << i)\n    (orAns, xorAns) = (0, 0)\n    n = len(s1)\n    if n > 0:\n        orAns = s1.pop(0)\n        n -= 1\n        while n > 0:\n            val = s1.pop(0)\n            print(f'1 {orAns} {val}')\n            orAns |= val\n            n -= 1\n        bisect.insort(s2, orAns)\n    m = len(s2)\n    if m > 0:\n        xorAns = s2.pop(0)\n        m -= 1\n        while m > 0:\n            val = s2.pop(0)\n            print(f'2 {xorAns} {val}')\n            xorAns |= val\n            m -= 1", "from collections import *\nimport bisect\ntc = int(input())\nfor _ in range(1, 1 + tc):\n    (n, x) = list(map(int, input().split()))\n    (msbn, msbx) = (0, 0)\n    for i in range(21):\n        if 1 << i & n:\n            msbn = i\n        if i << i & x:\n            msbx = i\n    bk = 0\n    for i in range(20, 0, -1):\n        if n & 1 << i > 0:\n            bk = 1 << i + 1\n            break\n    if x >= bk:\n        print(-1)\n        continue\n    if n & n - 1 == 0 and x & n == 0:\n        print(-1)\n        continue\n    if msbn < msbx:\n        print(-1)\n        continue\n    if n == 2:\n        if x == 3:\n            print('1 1 2')\n        else:\n            print(-1)\n        continue\n    s1 = [x for x in range(1, n + 1)]\n    s2 = []\n    for i in range(20):\n        if 1 << i > n:\n            break\n        if 1 << i & x == 0:\n            s1.remove(1 << i)\n            s2.append(1 << i)\n    (orAns, xorAns) = (0, 0)\n    n = len(s1)\n    if n > 0:\n        orAns = s1.pop(0)\n        n -= 1\n        while n > 0:\n            val = s1.pop(0)\n            print(f'1 {orAns} {val}')\n            orAns |= val\n            n -= 1\n        bisect.insort(s2, orAns)\n    m = len(s2)\n    if m > 0:\n        xorAns = s2.pop(0)\n        m -= 1\n        while m > 0:\n            val = s2.pop(0)\n            print(f'2 {xorAns} {val}')\n            xorAns |= val\n            m -= 1", "from collections import *\nimport bisect\ntc = int(input())\nfor _ in range(1, 1 + tc):\n    (n, x) = list(map(int, input().split()))\n    (msbn, msbx) = (0, 0)\n    for i in range(21):\n        if 1 << i & n:\n            msbn = i\n        if i << i & x:\n            msbx = i\n    bk = 0\n    for i in range(20, 0, -1):\n        if n & 1 << i > 0:\n            bk = 1 << i + 1\n            break\n    if x >= bk:\n        print(-1)\n        continue\n    if n & n - 1 == 0 and x & n == 0:\n        print(-1)\n        continue\n    if msbn < msbx:\n        print(-1)\n        continue\n    if n == 2:\n        if x == 3:\n            print('1 1 2')\n        else:\n            print(-1)\n        continue\n    s1 = [x for x in range(1, n + 1)]\n    s2 = []\n    for i in range(20):\n        if 1 << i > n:\n            break\n        if 1 << i & x == 0:\n            s1.remove(1 << i)\n            s2.append(1 << i)\n    (orAns, xorAns) = (0, 0)\n    n = len(s1)\n    if n > 0:\n        orAns = s1.pop(0)\n        n -= 1\n        while n > 0:\n            val = s1.pop(0)\n            print(f'1 {orAns} {val}')\n            orAns |= val\n            n -= 1\n    m = len(s2)\n    if m > 0:\n        xorAns = s2.pop(0)\n        m -= 1\n        while m > 0:\n            val = s2.pop(0)\n            print(f'2 {xorAns} {val}')\n            xorAns |= val\n            m -= 1\n    if orAns > 0 and xorAns > 0:\n        print(f'2 {xorAns} {orAns}')", "import fileinput\n\ndef is_solvable_old(a, b):\n    if b.bit_length() > a.bit_length():\n        return False\n    msp = 1 << a.bit_length() - 1\n    if a == msp and b & msp == 0:\n        return False\n    if a == 2 and b == 2:\n        return False\n    return True\n\ndef is_p2(a):\n    return a == 1 << a.bit_length() - 1\n\ndef solve(target, n):\n    if n == 2:\n        if target == 3:\n            print('1 1 2')\n        else:\n            print('-1')\n        return\n    if is_p2(n):\n        if n & target == 0:\n            print('-1')\n            return\n    if n.bit_length() < target.bit_length():\n        print('-1')\n        return\n    accumulator = 3\n    for i in range(5, n + 1):\n        if is_p2(i):\n            continue\n        print(f'1 {accumulator} {i}')\n        accumulator = accumulator | i\n    extractor = 1\n    for i in range(1, n.bit_length() + 1):\n        if extractor & target > 0:\n            print(f'1 {accumulator} {extractor}')\n        else:\n            print(f'2 {accumulator} {extractor}')\n            accumulator ^= extractor\n        extractor = extractor << 1\n\ndef solveBad(target, n, xmap):\n    print(f'solve {target}, {n}')\n    msp = 1 << n.bit_length() - 1\n    print(f'msp is {msp}')\n    buffer = msp\n    if n == 1:\n        if target == 0:\n            print(f'2 1 {xmap[1]}')\n        elif target == 1:\n            print(f'1 1 {xmap[1]}')\n        else:\n            raise ValueError('unexpected')\n    for j in range(msp + 1, n):\n        print(f'1 {buffer} {j}')\n        buffer = buffer | j\n    if target & msp == 0:\n        print(f'2 {buffer} {n}')\n        buffer = buffer ^ n\n        print(f'1 {buffer} {buffer}')\n    else:\n        print(f'1 {buffer} {n}')\n        buffer = buffer | n\n        consumer = buffer ^ msp\n        print(f'1 {buffer} {consumer}')\n        target = target ^ msp\n    print(f'consumer {consumer}, target {target}')\n    xmap[consumer]\n    solve(target, msp - 1, xmap)\nwith fileinput.input() as f:\n    t = int(f.readline().strip())\n    for i in range(t):\n        (a, b) = [int(e) for e in f.readline().strip().split(' ', 1)]\n        solve(b, a)", "import sys\n\ndef solve():\n    (n, x) = map(int, sys.stdin.readline().split())\n    maxNum = 0\n    for i in range(20, 0, -1):\n        if n & 1 << i:\n            maxNum = 1 << i + 1\n            break\n    if n == 2 and x != 3 or x >= maxNum or (n & n - 1 == 0 and x & n == 0):\n        print('-1')\n        return\n    if n == 2:\n        print('1 1 2')\n        return\n    arr1 = set()\n    for i in range(1, n + 1):\n        arr1.add(i)\n    arr2 = set()\n    for i in range(0, 21):\n        num = 1 << i\n        if num > n:\n            break\n        if x & num == 0:\n            arr1.remove(num)\n            arr2.add(num)\n    num = 0\n    if len(arr1) > 0:\n        num = arr1.pop()\n        for i in arr1:\n            print('1 ' + str(num) + ' ' + str(i))\n            num = num | i\n    comp = 0\n    if len(arr2) > 0:\n        comp = arr2.pop()\n        for i in arr2:\n            print('1 ' + str(comp) + ' ' + str(i))\n            comp = comp | i\n    if num > 0 and comp > 0:\n        print('2 ' + str(num) + ' ' + str(comp))\nt = int(input()) or 1\nwhile t:\n    solve()\n    t -= 1", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    d = dict.fromkeys(list(range(1, n + 1)))\n    if n == 2:\n        if x == 3:\n            print('1 1 2')\n        else:\n            print(-1)\n    else:\n        for i in range(20):\n            ni = 1 << i\n            d[ni] = True\n            if ni & n:\n                msbn = i\n            if ni & x:\n                msbx = i\n        if msbx > msbn:\n            print(-1)\n        elif not d[n] or x & n:\n            val = 0\n            for i in range(1, n + 1):\n                if not d[i]:\n                    if i > 3:\n                        print('1 {} {}'.format(i, val))\n                    val |= i\n            for i in d.keys():\n                if i > n or not d[i]:\n                    continue\n                if x & i:\n                    print('1 {} {}'.format(i, val))\n                    val |= i\n                else:\n                    print('2 {} {}'.format(i, val))\n                    val ^= i\n        else:\n            print(-1)", "from collections import Counter\n\ndef main():\n    (n, x) = map(int, input().split())\n    if n == 2 and x == 2:\n        print(-1)\n        return\n    if n == 2 and x == 3:\n        print(1, 1, 2)\n        return\n    nb = bin(n)[2:]\n    xb = bin(x)[2:]\n    if len(xb) > len(nb):\n        print(-1)\n        return\n    if len(nb) > len(xb):\n        if nb[1:] == '0' * (len(nb) - 1):\n            print(-1)\n            return\n    st_pow = set()\n    i = 1\n    while i <= n:\n        st_pow.add(i)\n        i *= 2\n    curr = 3\n    for i in range(4, n + 1):\n        if i not in st_pow:\n            print(1, curr, i)\n            curr |= i\n    xb = xb[::-1]\n    for i in range(len(xb)):\n        p = pow(2, i)\n        if xb[i] == '0':\n            print(2, curr, p)\n            st_pow.remove(p)\n            curr ^= p\n        else:\n            print(1, curr, p)\n            st_pow.remove(p)\n            curr |= p\n    if len(st_pow) > 0:\n        a = list(st_pow)\n        for z in a:\n            print(2, curr, z)\n            curr ^= z\n    return\nfor _ in range(int(input())):\n    main()"]