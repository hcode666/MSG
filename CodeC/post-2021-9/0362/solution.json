["import math\n\ndef check(pv, n, r, count):\n    for i in range(n):\n        if r >= pv[i][0]:\n            budget = r - pv[i][0]\n            to_buy = 0\n            if budget > 0:\n                to_buy = math.floor(budget / (pv[i][0] - pv[i][1]))\n            r = r - (to_buy + 1) * (pv[i][0] - pv[i][1])\n            count = count + to_buy + 1\n            return [r, count]\n    return [r, count]\n\ndef get_price(item):\n    return item[0]\n\ndef get_diff(item):\n    return item[0] - item[1]\nt = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    A = list((int(e) for e in input().split()))\n    B = list((int(e) for e in input().split()))\n    pv_list = list(((A[i], B[i]) for i in range(n)))\n    sort_by_p_list = sorted(pv_list, key=get_price)\n    sorted_pv_list = sorted(sort_by_p_list, key=get_diff)\n    count = 0\n    start = check(sorted_pv_list, n, r, count)\n    while (r >= min(A)) & (start[1] > count):\n        r = start[0]\n        count = start[1]\n        start = check(sorted_pv_list, n, r, count)\n    print(count)", "t = int(input())\nfor i in range(t):\n    (n, r) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = 0\n    l = []\n    for j in range(n):\n        l.append(a[j] - b[j])\n    while r >= min(a):\n        p = []\n        for k in range(len(a)):\n            if r >= a[k]:\n                p.append(l[k])\n        x = l.index(min(p))\n        count = (r - a[x]) // l[x] + 1\n        r -= count * l[x]\n        c += count\n        del a[x], b[x], l[x]\n        if a == []:\n            break\n    print(c)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, r) = map(int, input().split())\n    A = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(A)):\n        C[i] = [A[i], C[i] - A[i]]\n    C = sorted(C, key=lambda x: [-1 * x[1], x[0]])\n    while len(C) > 0:\n        temp = C.pop(0)\n        A = temp[0]\n        B = temp[1]\n        flag = False\n        if r > 2 * A:\n            r -= A\n            flag = True\n            ans += r // abs(B)\n            r = r % abs(B)\n        if flag:\n            r += A\n        while r >= A:\n            r = r + B\n            ans += 1\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (sweet_type, money) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    sweet = 0\n    A = sorted(list(zip(A, B)))\n    stack = [A[0]]\n    for i in A:\n        if i[0] > money:\n            break\n        if stack[-1][0] == i[0] and i[1] - i[0] > stack[-1][1] - stack[-1][0]:\n            stack[-1] = i\n        elif i[1] - i[0] > stack[-1][1] - stack[-1][0]:\n            stack.append(i)\n    while stack and money >= stack[-1][0]:\n        sweet_prev = sweet\n        sweet += math.ceil((money - stack[-1][0] + 1) / (stack[-1][0] - stack[-1][1]))\n        money -= (sweet - sweet_prev) * (stack[-1][0] - stack[-1][1])\n        stack.pop()\n    print(sweet)", "import math\nfor _ in range(int(input())):\n    (sweet_type, money) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    sweet = 0\n    A = sorted(list(zip(A, B)))\n    stack = [A[0]]\n    for i in A:\n        if i[0] > money:\n            break\n        if stack[-1][0] == i[0] and i[1] - i[0] > stack[-1][1] - stack[-1][0]:\n            stack[-1] = i\n        elif i[1] - i[0] > stack[-1][1] - stack[-1][0]:\n            stack.append(i)\n    while stack and money >= stack[-1][0]:\n        sweet_prev = sweet\n        sweet += math.ceil((money - stack[-1][0] + 1) / (stack[-1][0] - stack[-1][1]))\n        money -= (sweet - sweet_prev) * (stack[-1][0] - stack[-1][1])\n        stack.pop()\n    print(sweet)", "t = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list((a[x] - b[x] for x in range(n)))\n    l = [[x, y] for (x, y) in zip(l, a)]\n    l.sort()\n    s = 0\n    for i in l:\n        if i[1] <= r:\n            p = (r - i[1]) // i[0] + 1\n            s += p\n            r = r - p * i[0]\n        if r <= 0:\n            break\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list((a[x] - b[x] for x in range(n)))\n    l = [[x, y] for (x, y) in zip(l, a)]\n    l.sort()\n    s = 0\n    for i in l:\n        if i[1] <= r:\n            p = (r - i[1]) // i[0] + 1\n            s += p\n            r = r - p * i[0]\n        if r <= 0:\n            break\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list((a[x] - b[x] for x in range(n)))\n    l = [[x, y] for (x, y) in zip(l, a)]\n    l.sort()\n    s = 0\n    for i in l:\n        if i[1] <= r:\n            p = (r - i[1]) // i[0] + 1\n            s += p\n            r = r - p * i[0]\n        if r <= 0:\n            break\n    print(s)", "for i in range(int(input())):\n    (l, money) = input().split()\n    l = int(l)\n    money = int(money)\n    A = input().split()\n    B = input().split()\n    C = []\n    for i in range(l):\n        A[i] = int(A[i])\n        B[i] = int(B[i])\n        C.append((A[i], B[i], A[i] - B[i]))\n    C = sorted(C, key=lambda x: x[2])\n    res = 0\n    for i in range(l):\n        if money >= C[i][0]:\n            q = (money - C[i][0]) // C[i][2]\n            money -= q * C[i][2]\n            res += q\n        while money >= C[i][0]:\n            res += 1\n            money -= C[i][2]\n    print(res)", "import math\nfor _ in range(int(input())):\n    (sweet_type, money) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    sweet = 0\n    A = sorted(list(zip(A, B)))\n    stack = [A[0]]\n    for i in A:\n        if i[0] > money:\n            break\n        if stack[-1][0] == i[0] and i[1] - i[0] > stack[-1][1] - stack[-1][0]:\n            stack[-1] = i\n        elif i[1] - i[0] > stack[-1][1] - stack[-1][0]:\n            stack.append(i)\n    while stack and money >= stack[-1][0]:\n        sweet_prev = sweet\n        sweet += math.ceil((money - stack[-1][0] + 1) / (stack[-1][0] - stack[-1][1]))\n        money -= (sweet - sweet_prev) * (stack[-1][0] - stack[-1][1])\n        stack.pop()\n    print(sweet)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = list((a[x] - b[x] for x in range(n)))\n    l = [[x, y] for (x, y) in zip(l, a)]\n    l.sort()\n    s = 0\n    for i in l:\n        if i[1] <= r:\n            p = (r - i[1]) // i[0] + 1\n            s += p\n            r = r - p * i[0]\n        if r <= 0:\n            break\n    print(s)", "from heapq import *\nt = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    h = []\n    for i in range(n):\n        heappush(h, (a[i] - b[i], a[i]))\n    cnt = 0\n    while r > 0:\n        if not h:\n            break\n        ele = heappop(h)\n        if r < ele[1]:\n            continue\n        else:\n            c = (r - ele[1]) // ele[0] + 1\n            r -= ele[0] * c\n            cnt += c\n    print(cnt)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, r) = map(int, input().split())\n    A = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(A)):\n        C[i] = [A[i], C[i] - A[i]]\n    C = sorted(C, key=lambda x: [-1 * x[1], x[0]])\n    while len(C) > 0:\n        temp = C.pop(0)\n        A = temp[0]\n        B = temp[1]\n        flag = False\n        if r > 2 * A:\n            r -= A\n            flag = True\n            ans += r // abs(B)\n            r = r % abs(B)\n        if flag:\n            r += A\n        while r >= A:\n            r = r + B\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, r) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = 0\n    C = []\n    for i in range(len(A)):\n        C.append([A[i], B[i] - A[i]])\n    C = sorted(C, key=lambda x: [-1 * x[1], x[0]])\n    while len(A):\n        A.pop()\n        B.pop()\n    while len(C) > 0:\n        temp = C.pop(0)\n        A = temp[0]\n        B = temp[1]\n        flag = False\n        if r > 2 * A:\n            r -= A\n            flag = True\n            ans += r // abs(B)\n            r = r % abs(B)\n        if flag:\n            r += A\n        while r >= A:\n            r = r + B\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, r) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    ans = 0\n    C = []\n    for i in range(len(A)):\n        C.append([A[i], B[i] - A[i]])\n    C = sorted(C, key=lambda x: [-1 * x[1], x[0]])\n    while len(C) > 0:\n        temp = C.pop(0)\n        A = temp[0]\n        B = temp[1]\n        flag = False\n        if r > 2 * A:\n            r -= A\n            flag = True\n            ans += r // abs(B)\n            r = r % abs(B)\n        if flag:\n            r += A\n        while r >= A:\n            r = r + B\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    d = [[a[i], b[i], a[i] - b[i]] for i in range(n)]\n    d.sort(key=lambda x: x[0])\n    d.sort(key=lambda x: x[2])\n    for elem in d:\n        if elem[0] <= r:\n            ans += int((r - elem[0]) / elem[2])\n            r -= int((r - elem[0]) // elem[2] * elem[2])\n            if r >= elem[0]:\n                r -= elem[2]\n                ans += 1\n    print(ans)", "import math\n\ndef cands(t, c, b):\n    return int((t - c) / (c - b)) + 1\nt = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for i in range(n):\n        c.append([a[i] - b[i], a[i], b[i]])\n    c.sort()\n    candy = 0\n    for j in range(n):\n        if c[j][1] <= r:\n            cbuy = cands(r, c[j][1], c[j][2])\n            r -= cbuy * c[j][0]\n            candy += cbuy\n    print(candy)", "for _ in range(int(input())):\n    (N, R) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = [[a - b, a, b] for (a, b) in zip(A, B)]\n    C.sort()\n    x = 0\n    i = 0\n    while i < len(C):\n        if R >= C[i][1]:\n            x += (R - C[i][1]) // C[i][0] + 1\n            R -= ((R - C[i][1]) // C[i][0] + 1) * C[i][0]\n        i = i + 1\n        if R == 0:\n            break\n    print(x)", "for _ in range(int(input())):\n    (n, bal) = map(int, input().split())\n    a = list(map(lambda a, b: [int(a) - int(b), int(a)], input().split(), input().split()))\n    a.sort()\n    c = 0\n    ans = 0\n    while c < n:\n        while bal >= a[c][1]:\n            times = bal // a[c][1]\n            ans += times\n            bal -= a[c][0] * times\n        c += 1\n    print(ans)", "t = int(input())\nfor T in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    count = []\n    for i in range(n):\n        temp = []\n        temp.append(a[i] - b[i])\n        temp.append(a[i])\n        temp.append(b[i])\n        count.append(temp)\n    count.sort()\n    for i in range(n):\n        if r >= count[i][1]:\n            ans += (r - count[i][1]) // count[i][0] + 1\n            r -= ((r - count[i][1]) // count[i][0] + 1) * count[i][0]\n    print(ans)", "t = int(input())\nfor T in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    count = []\n    for i in range(n):\n        temp = []\n        temp.append(a[i] - b[i])\n        temp.append(a[i])\n        temp.append(b[i])\n        count.append(temp)\n    count.sort()\n    for i in range(n):\n        if r >= count[i][1]:\n            ans += (r - count[i][1]) // count[i][0] + 1\n            r -= ((r - count[i][1]) // count[i][0] + 1) * count[i][0]\n    print(ans)", "t = int(input())\nfor T in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    ans = 0\n    count = []\n    for i in range(n):\n        temp = []\n        temp.append(a[i] - b[i])\n        temp.append(a[i])\n        temp.append(b[i])\n        count.append(temp)\n    count.sort()\n    for i in range(n):\n        if r >= count[i][1]:\n            ans += (r - count[i][1]) // count[i][0] + 1\n            r -= ((r - count[i][1]) // count[i][0] + 1) * count[i][0]\n    print(ans)", "import sys\nfrom sys import stdin, stdout\nfor _ in range(int(input())):\n    r = int(sys.stdin.readline().split()[1])\n    c = filter(lambda x: x[1] <= r, sorted([(ai - bi, ai) for (ai, bi) in zip(map(int, sys.stdin.readline().split()), map(int, sys.stdin.readline().split()))]))\n    ans = 0\n    while (c1 := next(c, None)) is not None:\n        t = (r - c1[1]) // c1[0] + 1\n        ans += t\n        r -= t * c1[0]\n        c = filter(lambda x: x[1] <= r, c)\n    print(ans)", "import sys\nfrom sys import stdin, stdout\nfor _ in range(int(input())):\n    r = int(sys.stdin.readline().split()[1])\n    c = filter(lambda x: x[1] <= r, sorted([(ai - bi, ai) for (ai, bi) in zip(map(int, sys.stdin.readline().split()), map(int, sys.stdin.readline().split()))]))\n    ans = 0\n    while (c1 := next(c, False)):\n        t = (r - c1[1]) // c1[0] + 1\n        ans += t\n        r -= t * c1[0]\n        c = filter(lambda x: x[1] <= r, c)\n    print(ans)", "import sys\nfrom sys import stdin, stdout\nfor _ in range(int(input())):\n    (n, r) = map(int, sys.stdin.readline().split())\n    a = [int(x) for x in sys.stdin.readline().split()]\n    b = [int(x) for x in sys.stdin.readline().split()]\n    c = []\n    for i in range(n):\n        c.append((a[i] - b[i], a[i]))\n    c = sorted(c)\n    mn = min(a)\n    ans = 0\n    i = 0\n    while r >= mn:\n        if r >= c[i][1]:\n            t = (r - c[i][1]) // c[i][0] + 1\n            ans += t\n            r -= t * c[i][0]\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = []\n    for i in range(n):\n        c.append((a[i] - b[i], a[i]))\n    c = sorted(c)\n    mn = min(a)\n    ans = 0\n    i = 0\n    while r >= mn:\n        if r >= c[i][1]:\n            t = (r - c[i][1]) // c[i][0] + 1\n            ans += t\n            r -= t * c[i][0]\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = []\n    for i in range(n):\n        c.append([a[i] - b[i], a[i]])\n    c = sorted(c)\n    mn = min(a)\n    ans = 0\n    i = 0\n    while r >= mn:\n        if r >= c[i][1]:\n            t = (r - c[i][1]) // c[i][0] + 1\n            ans += t\n            r -= t * c[i][0]\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = sorted([(a[i] - b[i], a[i]) for i in range(n)])\n    mn = min(a)\n    ans = 0\n    i = 0\n    while r >= mn:\n        if r >= c[i][1]:\n            t = (r - c[i][1]) // c[i][0] + 1\n            ans += t\n            r -= t * c[i][0]\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    r = int(input().split()[1])\n    a = [int(x) for x in input().split()]\n    mn = min(a)\n    c = sorted([(ai, ai - bi) for (ai, bi) in zip(a, map(int, input().split())) if ai <= r], key=lambda x: x[1])\n    ans = 0\n    i = 0\n    while r >= mn:\n        if r >= c[i][0]:\n            t = (r - c[i][0]) // c[i][1] + 1\n            ans += t\n            r -= t * c[i][1]\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    r = int(input().split()[1])\n    a = [int(x) for x in input().split()]\n    mn = min(a)\n    c = iter(sorted([(ai, ai - bi) for (ai, bi) in zip(a, map(int, input().split())) if ai <= r], key=lambda x: x[1]))\n    ans = 0\n    while r >= mn and (c1 := next(c, False)):\n        t = (r - c1[0]) // c1[1] + 1\n        ans += t\n        r -= t * c1[1]\n        c = filter(lambda x: x[0] <= r, c)\n    print(ans)", "for _ in range(int(input())):\n    r = int(input().split()[1])\n    c = iter(sorted([(ai, ai - bi) for (ai, bi) in zip(map(int, input().split()), map(int, input().split())) if ai <= r], key=lambda x: x[1]))\n    ans = 0\n    while (c1 := next(c, False)):\n        t = (r - c1[0]) // c1[1] + 1\n        ans += t\n        r -= t * c1[1]\n        c = filter(lambda x: x[0] <= r, c)\n    print(ans)", "for _ in range(int(input())):\n    r = int(input().split()[1])\n    c = filter(lambda x: x[0] <= r, sorted([(ai, ai - bi) for (ai, bi) in zip(map(int, input().split()), map(int, input().split()))], key=lambda x: x[1]))\n    ans = 0\n    while (c1 := next(c, False)):\n        t = (r - c1[0]) // c1[1] + 1\n        ans += t\n        r -= t * c1[1]\n        c = filter(lambda x: x[0] <= r, c)\n    print(ans)", "for _ in range(int(input())):\n    r = int(input().split()[1])\n    c = filter(lambda x: x[0] <= r, sorted([(ai, ai - bi) for (ai, bi) in zip(map(int, input().split()), map(int, input().split()))], key=lambda x: x[1]))\n    ans = 0\n    while (c1 := next(c, False)):\n        t = (r - c1[0]) // c1[1] + 1\n        ans += t\n        r -= t * c1[1]\n        c = filter(lambda x: x[0] <= r, c)\n    print(ans)", "for _ in range(int(input())):\n    r = int(input().split()[1])\n    c = filter(lambda x: x[0] <= r, sorted([(ai, ai - bi) for (ai, bi) in zip(map(int, input().split()), map(int, input().split()))], key=lambda x: x[1]))\n    ans = 0\n    while (c1 := next(c, False)):\n        t = (r - c1[0]) // c1[1] + 1\n        ans += t\n        r -= t * c1[1]\n        c = filter(lambda x: x[0] <= r, c)\n    print(ans)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = map(int, input().split())\n    b = map(int, input().split())\n    c = sorted([(ai, ai - bi) for (ai, bi) in zip(a, b)], key=lambda x: x[1])\n    ans = 0\n    c = filter(lambda x: x[0] <= r, c)\n    while (c1 := next(c, False)):\n        t = (r - c1[0]) // c1[1] + 1\n        ans += t\n        r -= t * c1[1]\n        c = filter(lambda x: x[0] <= r, c)\n    print(ans)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = map(int, input().split())\n    b = map(int, input().split())\n    c = sorted([(ai, ai - bi) for (ai, bi) in zip(a, b)], key=lambda x: x[1])\n    ans = 0\n    c = filter(lambda x: x[0] <= r, c)\n    while (c1 := next(c, None)) is not None:\n        t = (r - c1[0]) // c1[1] + 1\n        ans += t\n        r -= t * c1[1]\n        c = filter(lambda x: x[0] <= r, c)\n    print(ans)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = map(int, input().split())\n    b = map(int, input().split())\n    c = sorted([(ai, ai - bi) for (ai, bi) in zip(a, b)], key=lambda x: x[1])\n    ans = 0\n    c = list(filter(lambda x: x[0] <= r, c))\n    while bool(c):\n        t = (r - c[0][0]) // c[0][1] + 1\n        ans += t\n        r -= t * c[0][1]\n        c = list(filter(lambda x: x[0] <= r, c))\n    print(ans)", "def sortSecond(val):\n    return val[0] - val[1]\nt = int(input())\nfor i in range(t):\n    ar = list(map(int, input().split()))\n    n = ar[0]\n    amount = ar[1]\n    arr = list(map(int, input().split()))\n    dis = list(map(int, input().split()))\n    pair = [[arr[i], dis[i]] for i in range(n)]\n    pair.sort(key=sortSecond)\n    count = 0\n    for i in range(n):\n        while pair[i][0] <= amount:\n            x = amount // pair[i][0]\n            count += x\n            amount -= x * (pair[i][0] - pair[i][1])\n    print(count)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [[a[i] - b[i], a[i]] for i in range(n)]\n    l.sort()\n    t = 0\n    for i in range(n):\n        while r >= l[i][1]:\n            x = r // l[i][1]\n            t += x\n            r -= x * l[i][0]\n    print(t)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    l = [[x[i] - y[i], x[i]] for i in range(n)]\n    l.sort()\n    items = 0\n    for i in range(n):\n        while m >= l[i][1]:\n            z = m // l[i][1]\n            items += z\n            m -= z * l[i][0]\n    print(items)", "t = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    la = list(map(int, input().split()))\n    lb = list(map(int, input().split()))\n    lc = sorted([(la[i] - lb[i], la[i], lb[i]) for i in range(n)])\n    ans = 0\n    while len(lc) > 0:\n        while r >= lc[0][1]:\n            (d, a, b) = (lc[0][0], lc[0][1], lc[0][2])\n            ans += r // a\n            r -= r // a * d\n        lc.pop(0)\n    print(ans)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [[a[i] - b[i], a[i]] for i in range(n)]\n    l.sort()\n    t = 0\n    for i in range(n):\n        while r >= l[i][1]:\n            x = r // l[i][1]\n            t += x\n            r -= x * l[i][0]\n    print(t)", "def Test(n, r, a, b):\n    arr = [[a[i] - b[i], a[i]] for i in range(n)]\n    count = 0\n    arr.sort()\n    for i in range(n):\n        if arr[i][1] > r:\n            continue\n        res = int((r - (arr[i][1] - arr[i][0])) / arr[i][0])\n        count += res\n        r -= res * arr[i][0]\n    return count\nfor _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    print(Test(n, r, a, b))", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [[a[i] - b[i], a[i]] for i in range(n)]\n    l.sort()\n    t = 0\n    for i in range(n):\n        while r >= l[i][1]:\n            x = r // l[i][1]\n            t += x\n            r -= x * l[i][0]\n    print(t)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [[a[i] - b[i], [a[i], b[i]]] for i in range(n)]\n    l.sort()\n    t = 0\n    for i in range(n):\n        while r >= l[i][1][0]:\n            x = r // l[i][1][0]\n            t += x\n            r -= x * l[i][0]\n    print(t)", "for testcases in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [[a[i] - b[i], [a[i], b[i]]] for i in range(n)]\n    l.sort()\n    res = 0\n    for i in range(n):\n        while r >= l[i][1][0]:\n            x = r // l[i][1][0]\n            res += x\n            r -= x * l[i][1][0]\n            r += x * l[i][1][1]\n    print(res)", "T = int(input())\nfor i in range(T):\n    (N, R) = map(int, input().split())\n    A = [int(a) for a in input().split()]\n    B = [int(b) for b in input().split()]\n    C = sorted([(A[i] - B[i], A[i]) for i in range(N)])\n    n = 0\n    i = 0\n    while i < N and R > 0:\n        if C[i][1] > R:\n            i += 1\n        else:\n            n += (R - C[i][1]) // C[i][0] + 1\n            R -= ((R - C[i][1]) // C[i][0] + 1) * C[i][0]\n            i += 1\n    print(n)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    opr = [[a[i] - b[i], [a[i], b[i]]] for i in range(n)]\n    opr.sort()\n    res = 0\n    for i in range(n):\n        while r >= opr[i][1][0]:\n            temp = r // opr[i][1][0]\n            res += temp\n            r -= temp * opr[i][1][0]\n            r += temp * opr[i][1][1]\n    print(res)", "tests = int(input())\nfor i in range(tests):\n    (sweets, money) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    options = [[a[i] - b[i], [a[i], b[i]]] for i in range(sweets)]\n    options.sort()\n    result = 0\n    for i in range(sweets):\n        while money >= options[i][1][0]:\n            temp = money // options[i][1][0]\n            result += temp\n            money -= temp * options[i][1][0]\n            money += temp * options[i][1][1]\n    print(result)", "for _ in range(int(input())):\n    (N, R) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    cost = [[A[i] - B[i], A[i]] for i in range(N)]\n    cnt1 = 0\n    cost.sort()\n    for i in range(N):\n        if cost[i][1] > R:\n            continue\n        nos = int((R - (cost[i][1] - cost[i][0])) / cost[i][0])\n        cnt1 += nos\n        R -= nos * cost[i][0]\n    print(cnt1)", "tests = int(input())\nfor i in range(tests):\n    (sweets, money) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    options = [[a[i] - b[i], [a[i], b[i]]] for i in range(sweets)]\n    options.sort()\n    result = 0\n    for i in range(sweets):\n        while money >= options[i][1][0]:\n            temp = money // options[i][1][0]\n            result += temp\n            money -= temp * options[i][1][0]\n            money += temp * options[i][1][1]\n    print(result)", "t = int(input())\nfor testcase in range(t):\n    (n, r) = map(int, input().split())\n    cost = [(int(a), int(b), int(a) - int(b)) for (a, b) in zip(input().split(), input().split())]\n    cost.sort(key=lambda x: x[2])\n    ans = 0\n    for i in range(n):\n        if r >= cost[i][0]:\n            sweet_count = int((r - cost[i][1]) / cost[i][2])\n            r -= sweet_count * cost[i][2]\n            ans += sweet_count\n    print(ans)", "t = int(input())\nfor testcase in range(t):\n    (n, r) = map(int, input().split())\n    cost = [(int(a), int(b), int(a) - int(b)) for (a, b) in zip(input().split(), input().split())]\n    cost.sort(key=lambda x: x[2])\n    ans = 0\n    for i in range(n):\n        if r >= cost[i][0]:\n            sweet_count = int((r - cost[i][1]) / cost[i][2])\n            r = r - sweet_count * cost[i][2]\n            ans += sweet_count\n    print(ans)", "t = int(input())\nfor testcase in range(t):\n    (n, r) = map(int, input().split())\n    cost = [(int(a), int(b), int(a) - int(b)) for (a, b) in zip(input().split(), input().split())]\n    cost.sort(key=lambda x: x[2])\n    ans = 0\n    for i in range(n):\n        if r >= cost[i][0]:\n            sweet_count = int((r - cost[i][1]) / cost[i][2])\n            r -= sweet_count * cost[i][2]\n            ans += sweet_count\n    print(ans)", "t = int(input())\nfor testcase in range(t):\n    (n, r) = map(int, input().split())\n    cost = [(int(a), int(b), int(a) - int(b)) for (a, b) in zip(input().split(), input().split())]\n    cost.sort(key=lambda x: x[2])\n    ans = 0\n    for i in range(n):\n        if r >= cost[i][0]:\n            sweet_count = int((r - cost[i][1]) / cost[i][2])\n            r -= sweet_count * cost[i][2]\n            ans += sweet_count\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    v = [[a[i] - b[i], [a[i], b[i]]] for i in range(n)]\n    v.sort()\n    res = 0\n    for i in range(n):\n        while r >= v[i][1][0]:\n            temp = r // v[i][1][0]\n            res += temp\n            r -= temp * v[i][1][0]\n            r += temp * v[i][1][1]\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, rem) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l = [(l1[i], l1[i] - l2[i]) for i in range(n)]\n    l.sort(key=lambda val: val[1])\n    ans = 0\n    for i in l:\n        if rem >= i[0]:\n            cnt = (rem - i[0]) // i[1]\n            rem -= cnt * i[1]\n            if rem >= i[0]:\n                rem -= i[0]\n                rem += i[0] - i[1]\n                cnt += 1\n            ans += cnt\n    print(ans)", "from functools import cmp_to_key\nimport math\nfrom pydoc import doc\n\ndef run(debug=True):\n    for _ in range(int(input())):\n        (n, r) = list(map(int, input().split()))\n        cost = list(map(int, input().split()))\n        discount = list(map(int, input().split()))\n        discountedCost = []\n        for i in range(n):\n            discountedCost.append([cost[i] - discount[i], i])\n        discountedCost.sort(key=lambda x: x[0])\n        ans = 0\n        for i in range(n):\n            [currDiscountedCost, ind] = discountedCost[i]\n            currCost = cost[ind]\n            currDiscount = discount[ind]\n            if currCost > r:\n                continue\n            bought = (r - currDiscount) // currDiscountedCost\n            ans += bought\n            r -= bought * currDiscountedCost\n        print(ans)\nwhile True:\n    try:\n        run(False)\n    except:\n        break", "t = int(input())\nfor _ in range(t):\n    (n, rem) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l = [(l1[i], l1[i] - l2[i]) for i in range(n)]\n    l.sort(key=lambda val: val[1])\n    ans = 0\n    for i in l:\n        if rem >= i[0]:\n            cnt = (rem - i[0]) // i[1]\n            rem -= cnt * i[1]\n            if rem >= i[0]:\n                rem -= i[0]\n                rem += i[0] - i[1]\n                cnt += 1\n            ans += cnt\n    print(ans)", "from functools import cmp_to_key\nimport math\nfrom pydoc import doc\n\ndef run(debug=True):\n    for _ in range(int(input())):\n        (n, r) = list(map(int, input().split()))\n        cost = list(map(int, input().split()))\n        discount = list(map(int, input().split()))\n        discountedCost = []\n        for i in range(n):\n            discountedCost.append([cost[i] - discount[i], i])\n        discountedCost.sort(key=lambda x: x[0])\n        ans = 0\n        for i in range(n):\n            [currDiscountedCost, ind] = discountedCost[i]\n            currCost = cost[ind]\n            currDiscount = discount[ind]\n            if currCost > r:\n                continue\n            bought = (r - currDiscount) // currDiscountedCost\n            ans += bought\n            r -= bought * currDiscountedCost\n        print(ans)\nwhile True:\n    try:\n        run(False)\n    except:\n        break", "from functools import cmp_to_key\nimport math\nfrom pydoc import doc\n\ndef run(debug=True):\n    for _ in range(int(input())):\n        (n, r) = list(map(int, input().split()))\n        cost = list(map(int, input().split()))\n        discount = list(map(int, input().split()))\n        discountedCost = []\n        for i in range(n):\n            discountedCost.append([cost[i] - discount[i], i])\n        discountedCost.sort(key=lambda x: x[0])\n        ans = 0\n        for i in range(n):\n            [currDiscountedCost, ind] = discountedCost[i]\n            currCost = cost[ind]\n            currDiscount = discount[ind]\n            if currCost > r:\n                continue\n            bought = (r - currDiscount) // currDiscountedCost\n            ans += bought\n            r -= bought * currDiscountedCost\n        print(ans)\nwhile True:\n    try:\n        run(False)\n    except:\n        break", "from functools import cmp_to_key\nimport math\nfrom pydoc import doc\n\ndef run(debug=True):\n    for _ in range(int(input())):\n        (n, r) = list(map(int, input().split()))\n        cost = list(map(int, input().split()))\n        discount = list(map(int, input().split()))\n        discountedCost = []\n        for i in range(n):\n            discountedCost.append([cost[i] - discount[i], i])\n        discountedCost.sort(key=lambda x: x[0])\n        ans = 0\n        for i in range(n):\n            [currDiscountedCost, ind] = discountedCost[i]\n            currCost = cost[ind]\n            currDiscount = discount[ind]\n            if currCost > r:\n                continue\n            bought = (r - currDiscount) // currDiscountedCost\n            ans += bought\n            r -= bought * currDiscountedCost\n        print(ans)\nwhile True:\n    try:\n        run(False)\n    except:\n        break", "t = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    p = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    l = []\n    for i in range(n):\n        l.append([p[i] - c[i], p[i]])\n    l.sort()\n    i = 0\n    ans = 0\n    while i < n:\n        while r >= l[i][1]:\n            sc = (r - (l[i][1] - l[i][0])) // l[i][0]\n            ans += sc\n            r -= sc * l[i][0]\n        i += 1\n    print(ans)", "def lisin():\n    a = list(map(int, input().split()))\n    return a\nfor tastcas in range(int(input())):\n    (n, r) = lisin()\n    a = lisin()\n    b = lisin()\n    dic = []\n    ans = 0\n    rem = r\n    mincost = min(a)\n    for i in range(n):\n        dic.append((a[i] - b[i], a[i]))\n    dic.sort()\n    (effcost, buycost) = dic[0]\n    if rem >= buycost:\n        ans += (rem - buycost) // effcost\n        rem -= ans * effcost\n    if rem >= buycost:\n        ans += 1\n        rem -= effcost\n    for i in range(1, n):\n        (effcost, buycost) = dic[i]\n        while rem >= buycost:\n            ans += 1\n            rem -= effcost\n        if rem < mincost:\n            break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for j in range(n):\n        x = a[j] - b[j]\n        l.append([x, a[j], b[j]])\n    l.sort()\n    s = 0\n    for z in range(n):\n        while r >= l[z][1]:\n            c = (r - l[z][2]) // l[z][0]\n            s += c\n            r -= c * l[z][1]\n            r += c * l[z][2]\n    print(s)", "T = int(input())\nfor _ in range(T):\n    (n, r) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        x = A[i] - B[i]\n        arr.append([x, A[i], B[i]])\n    arr.sort()\n    total_sweets = 0\n    for i in range(n):\n        while r >= arr[i][1]:\n            temp = (r - arr[i][2]) // arr[i][0]\n            total_sweets += temp\n            r -= temp * arr[i][1]\n            r += temp * arr[i][2]\n    print(total_sweets)", "T = int(input())\nfor _ in range(T):\n    (n, r) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        x = A[i] - B[i]\n        arr.append([x, A[i], B[i]])\n    arr.sort()\n    total_sweets = 0\n    for i in range(n):\n        while r >= arr[i][1]:\n            temp = (r - arr[i][2]) // arr[i][0]\n            total_sweets += temp\n            r -= temp * arr[i][1]\n            r += temp * arr[i][2]\n    print(total_sweets)", "import math\nfor _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    cost = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    count = 0\n    new = []\n    for i in range(n):\n        diff = cost[i] - cb[i]\n        new.append([cost[i], cb[i], diff])\n    new.sort(key=lambda x: x[2])\n    for i in range(n):\n        if new[i][0] <= r:\n            var1 = (r - new[i][1]) // new[i][2]\n            r = r - var1 * new[i][2]\n            count += var1\n    print(count)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([a[i], b[i], a[i] - b[i]])\n    l.sort(key=lambda x: x[2])\n    count = 0\n    for i in range(n):\n        if l[i][0] <= r:\n            x = (r - l[i][0]) // l[i][2] + 1\n            r -= x * l[i][2]\n            count += x\n    print(count)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([a[i], b[i], a[i] - b[i]])\n    l.sort(key=lambda x: x[2])\n    count = 0\n    for i in range(n):\n        if l[i][0] <= r:\n            x = (r - l[i][0]) // l[i][2] + 1\n            r -= x * l[i][2]\n            count += x\n    print(count)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append((a[i] - b[i], a[i]))\n    arr.sort()\n    ans = 0\n    for i in range(n):\n        ns = max(math.ceil((r - arr[i][1] + 1) / arr[i][0]), 0)\n        ans += ns\n        r -= ns * arr[i][0]\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr, b, r):\n    n = len(arr)\n    for i in range(n):\n        arr[i] = (arr[i], b[i])\n    x = sorted(arr, key=lambda x: x[0] - x[1])\n    print(check(x, r))\n\ndef check(arr, k):\n    c = 0\n    for i in range(len(arr)):\n        if k - arr[i][0] >= 0:\n            ans = (k - arr[i][1]) // (arr[i][0] - arr[i][1])\n            c += ans\n            k = k - ans * (arr[i][0] - arr[i][1])\n    return c\nt = int(input())\nfor i in range(t):\n    (n, r) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    pro(arr, b, r)", "t = int(input())\nwhile t != 0:\n    t -= 1\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    e = []\n    for i in range(0, n):\n        e.append((a[i] - b[i], a[i]))\n    e.sort()\n    ans = 0\n    for i in range(len(e)):\n        eff = e[i][0]\n        actual = e[i][1]\n        if actual <= r:\n            buy_max = (r - actual + eff) // eff\n            ans += buy_max\n            r -= buy_max * eff\n    print(ans)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef main():\n    for _ in tr():\n        (n, r) = sm()\n        a = ln()\n        b = ln()\n        order = []\n        for i in range(n):\n            order.append((a[i] - b[i], a[i]))\n        order.sort()\n        count = 0\n        for i in range(n):\n            if order[i][1] <= r:\n                buy_max = (r - order[i][1] + order[i][0]) // order[i][0]\n                count += buy_max\n                r -= buy_max * order[i][0]\n        print(count)\nmain()", "t = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = []\n    for i in range(n):\n        l.append([a[i] - b[i], a[i]])\n    l = sorted(l)\n    ans = 0\n    for i in range(n):\n        originalcost = l[i][1]\n        effectivecost = l[i][0]\n        cashback = originalcost - effectivecost\n        if r < originalcost:\n            continue\n        ans = ans + 1\n        r = r - originalcost\n        ans = ans + r // effectivecost\n        r = r % effectivecost\n        r = r + cashback\n    print(ans)", "R = lambda : input()\nI = lambda : int(R())\nM = lambda : map(int, R().split())\nRS = lambda : map(str, R().split(' '))\nL = lambda : list(M())\nNsum = lambda n: n * (n + 1) // 2\nDet = lambda a, b, c: (-b + (b * b - 4 * a * c) ** 0.5) / 2\niBit = lambda n, i: n >> i & 1\nDiv2 = lambda x: x & ~(x - 1)\npow2 = lambda x: log(Div2(x), 2)\nlcm = lambda x, y: x * y // gcd(x, y)\nmode = lambda counter: counter.most_common(1)[0]\n\ndef Mapp(arr):\n    d = {}\n    for i in arr:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    return d\n\ndef gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef isPrime(n):\n    if n < 3:\n        return n == 2\n    for i in range(3, n, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef Pow(a, b, mod):\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % mod\n        a *= a\n        b >>= 1\n    return res\n\ndef nCr(n, r):\n    x = y = 1\n    if n - r < r:\n        r = n - r\n    while r:\n        x *= n\n        y *= r\n        g = gcd(x, y)\n        x //= g\n        y //= g\n        n -= 1\n        r -= 1\n    return x\n\ndef Countarr(li, n):\n    arr = []\n    i = 0\n    mx = 0\n    c = li[0]\n    cnt = 0\n    while i < n:\n        if c == li[i]:\n            cnt += 1\n        else:\n            mx = max(mx, cnt)\n            arr.append(cnt)\n            cnt = 1\n            c = li[i]\n        i += 1\n    mx = max(mx, cnt)\n    arr.append(cnt)\n    return (C(arr), mx)\nfor _ in range(I()):\n    (n, r) = M()\n    i = 0\n    cnt = 0\n    w = L()\n    p = L()\n    arr = [[w[i], p[i]] for i in range(n)]\n    arr.sort(key=lambda x: x[0] - x[1])\n    ans = 0\n    for i in arr:\n        if i[0] <= r:\n            while r >= i[0]:\n                c = r // i[0]\n                r = r % i[0] + i[1] * c\n                ans += c\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = sorted([(a[i] - b[i], a[i]) for i in range(n)])\n    count = 0\n    for i in range(n):\n        (eff, org) = c[i]\n        if r < org:\n            continue\n        buy = (r - org) // eff + 1\n        count += buy\n        r -= eff * buy\n    print(count)", "import sys\nimport os\nimport math\nfrom collections import *\nimport bisect\nfrom heapq import *\nfrom itertools import permutations\nif os.path.exists('input.txt') and os.path.exists('output.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ninput = sys.stdin.readline\n\ndef lcm(a, b):\n    k1 = math.gcd(a, b)\n    k2 = a * b\n    return k2 // k1\n\ndef inp():\n    return map(int, input().strip().split(' '))\n\ndef lis():\n    return list(inp())\nmod = 998244353\n\ndef prim(n):\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\nma = 2 * (10 ** 5 + 1)\n\ndef update(ind, val, n):\n    while ind <= n:\n        fenwick[ind] += val\n        ind += ind & -ind\n\ndef qsum(ind):\n    ans = 0\n    while ind > 0:\n        ans += fenwick[ind]\n        ind -= ind & -ind\n    return ans\n\ndef dfs(adj, vis, u, l):\n    vis[u] = 1\n    l.add(u)\n    for i in adj[u]:\n        if vis[i] == 0:\n            dfs(adj, vis, i, l)\nmod = 10 ** 9 + 7\nma = 1002\ndx = [1, 0, -1, 0]\ndy = [0, 1, 0, -1]\n\ndef dfs(i, j, arr, vis, n, m):\n    vis[i][j] = 1\n    for x in range(4):\n        mx = i + dx[x]\n        my = j + dy[x]\n        if mx >= 0 and mx < n and (my >= 0) and (my < m) and (vis[mx][my] == 0):\n            if arr[i][j] >= arr[mx][my]:\n                dfs(mx, my, arr, vis, n, m)\n\ndef dfs(a, vis, node, c):\n    vis[node] = 1\n    c[0] += 1\n    if vis[a[node]] == 0:\n        dfs(a, vis, a[node], c)\nmod = 998244353\n\ndef f(n):\n    if n % 4 == 0:\n        return n\n    if n % 4 == 1:\n        return 1\n    if n % 4 == 2:\n        return n + 1\n    return 0\n\ndef cn(n):\n    s = str(n)\n    if s == s[::-1]:\n        return True\n    return False\n\ndef f(n):\n    i = 1\n    res = 0\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            if cn(i):\n                res += 1\n            k = n // i\n            if i != k and cn(k):\n                res += 1\n        i = i + 1\n    return res\nmod = 10 ** 9 + 7\n\ndef finv(p, q):\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\n\ndef solve():\n    (n, r) = inp()\n    a = lis()\n    b = lis()\n    c = [[a[i] - b[i], a[i]] for i in range(n)]\n    c.sort()\n    ans = 0\n    for i in range(n):\n        if c[i][1] > r:\n            continue\n        res = (r - c[i][1] + c[i][0]) // c[i][0]\n        ans += res\n        r -= res * c[i][0]\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    cost = list(map(int, input().split()))\n    dis = list(map(int, input().split()))\n    crr = sorted(zip(cost, dis), key=lambda a: a[0] - a[1])\n    nosw = 0\n    for (i, j) in crr:\n        d = max(0, (r - j) // (i - j))\n        nosw += d\n        r -= d * (i - j)\n        if r == 0:\n            break\n    print(nosw)", "t = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [(a[i] - b[i], a[i]) for i in range(n)]\n    c.sort(key=lambda x: [-x[0], -x[1]])\n    cnt = 0\n    while c and r:\n        (amt, idx) = c.pop()\n        if r >= idx:\n            x = (r - idx) // amt\n            cnt += x\n            r -= x * amt\n            if r >= idx:\n                cnt += 1\n                r -= amt\n    print(cnt)", "import itertools\nimport collections, math\nfrom collections import defaultdict\nfrom collections import Counter\nimport sys\nimport heapq\nfrom heapq import *\nfor t in range(int(input())):\n    (n, R) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    z = []\n    for (x, y) in zip(a, b):\n        z.append([x - y, x])\n    z.sort()\n    ans = 0\n    i = 0\n    while i < n:\n        (diff, price) = z[i]\n        if R >= price:\n            units = math.ceil((R - price + 1) / diff)\n            ans += units\n            R -= units * diff\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, r) = map(int, input().split())\n    ori = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    eff = []\n    for i in range(n):\n        eff.append([ori[i] - cb[i], i])\n    eff.sort()\n    mini = min(ori)\n    ans = 0\n    while r >= mini:\n        i = 0\n        while i < n and r >= mini:\n            if ori[eff[i][1]] <= r:\n                r -= ori[eff[i][1]]\n                ans += 1\n                ans += r // eff[i][0]\n                r = r % eff[i][0] + cb[eff[i][1]]\n            else:\n                i += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = sorted(((a[j] - b[j], a[j]) for j in range(n)))\n    ans = 0\n    for (x, y) in c:\n        if y <= r:\n            v = (r - y) // x + 1\n            r -= v * x\n            ans += v\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = sorted(((a[j] - b[j], b[j]) for j in range(n)))\n    ans = 0\n    for (x, y) in c:\n        if y <= r:\n            v = (r - y) // x\n            r -= v * x\n            ans += v\n    print(ans)", "def rec(a, b, r):\n    ans = 0\n    s = []\n    for j in range(len(a)):\n        diff = a[j] - b[j]\n        s.append([diff, a[j], b[j]])\n    s.sort(key=getFirst)\n    j = 0\n    while j < len(s):\n        a = s[j][1]\n        b = s[j][2]\n        diff = s[j][0]\n        c = max(0, (r - b) // diff)\n        ans += c\n        if c == 0:\n            j += 1\n        else:\n            r = r - c * diff\n            j = 0\n    return ans\n\ndef getFirst(l):\n    return l[0]\nt = int(input())\nfor i in range(t):\n    l = list(map(int, input().split(' ')))\n    (n, r) = (l[0], l[1])\n    a = list(map(int, input().split(' ')))\n    b = list(map(int, input().split(' ')))\n    s = []\n    print(rec(a, b, r))", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    arr = []\n    m = float('inf')\n    for i in range(n):\n        m = min(m, ar[i])\n        arr.append([ar[i], cb[i], ar[i] - cb[i]])\n    arr.sort(key=lambda x: x[2])\n    ans = 0\n    i = 0\n    while i < n:\n        cost = arr[i][0]\n        cashb = arr[i][1]\n        while r >= cost:\n            q = r // cost\n            rem = r % cost\n            ans += q\n            r = rem + cashb * q\n        i += 1\n    print(ans)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    arr = []\n    m = float('inf')\n    for i in range(n):\n        m = min(m, ar[i])\n        arr.append([ar[i], cb[i], ar[i] - cb[i]])\n    arr.sort(key=lambda x: x[2])\n    ans = 0\n    i = 0\n    while i < n and r >= m:\n        cost = arr[i][0]\n        cashb = arr[i][1]\n        while r >= cost:\n            q = r // cost\n            rem = r % cost\n            ans += q\n            r = rem + cashb * q\n        i += 1\n    print(ans)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    arr = []\n    m = float('inf')\n    for i in range(n):\n        m = min(m, ar[i])\n        arr.append([ar[i], cb[i], ar[i] - cb[i]])\n    arr.sort(key=lambda x: x[2])\n    ans = 0\n    for i in arr:\n        cost = i[0]\n        cashb = i[1]\n        if r < m:\n            break\n        while r >= cost:\n            q = r // cost\n            rem = r % cost\n            ans += q\n            r = rem + cashb * q\n    print(ans)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    arr = []\n    m = float('inf')\n    for i in range(n):\n        m = min(m, ar[i])\n        arr.append([ar[i], cb[i], ar[i] - cb[i]])\n    arr.sort(key=lambda x: x[2])\n    ans = 0\n    for i in arr:\n        cost = i[0]\n        cashb = i[1]\n        if r < 0 or r < m:\n            break\n        while r >= cost:\n            q = r // cost\n            rem = r % cost\n            ans += q\n            r = rem + cashb * q\n    print(ans)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    arr = []\n    m = float('inf')\n    for i in range(n):\n        m = min(m, ar[i])\n        arr.append([ar[i], cb[i], ar[i] - cb[i]])\n    arr.sort(key=lambda x: x[2])\n    ans = 0\n    for i in arr:\n        cost = i[0]\n        cashb = i[1]\n        if r < 0 or r < m:\n            break\n        while r > 0:\n            q = r // cost\n            if q == 0:\n                break\n            r -= q * cost\n            ans += q\n            r += q * cashb\n    print(ans)", "for i in range(int(input())):\n    (n, r) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    cb = list(map(int, input().split()))\n    arr = []\n    m = float('inf')\n    for i in range(n):\n        m = min(m, ar[i])\n        arr.append([ar[i], cb[i], ar[i] - cb[i]])\n    arr.sort(key=lambda x: x[0])\n    arr.sort(key=lambda x: x[2])\n    ans = 0\n    for i in arr:\n        cost = i[0]\n        cashb = i[1]\n        if r < 0 or r < m:\n            break\n        while r > 0:\n            q = r // cost\n            if q == 0:\n                break\n            r -= q * cost\n            ans += q\n            r += q * cashb\n    print(ans)", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    b = []\n    m = l[0]\n    for i in range(x):\n        b.append([l[i] - c[i], i])\n        if l[i] < m:\n            m = l[i]\n    z = sorted(b)\n    count = 0\n    for i in z:\n        a = i[1]\n        if y == 0 or y < m:\n            break\n        while y > 0:\n            s = y // l[a]\n            if s == 0:\n                break\n            y -= s * l[a]\n            count += s\n            y += s * c[a]\n    print(count)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, b_) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [[a[i], b[i], a[i] - b[i]] for i in range(n)]\n    c.sort(key=lambda x: x[2])\n    ans = 0\n    for elem in c:\n        while b_ >= elem[0]:\n            temp = int(b_ / elem[0])\n            ans += temp\n            b_ = b_ - temp * elem[0] + temp * elem[1]\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, b_) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [[a[i], b[i], a[i] - b[i]] for i in range(n)]\n    c.sort(key=lambda x: x[2])\n    ans = 0\n    for elem in c:\n        while b_ >= elem[0]:\n            temp = int(b_ / elem[0])\n            ans += temp\n            b_ = b_ - temp * elem[0] + temp * elem[1]\n    print(ans)", "def buyingSweets():\n    for _ in range(int(input())):\n        (n, r) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        arr = []\n        for i in range(n):\n            arr.append([a[i], b[i]])\n        arr.sort(key=lambda x: x[0])\n        arr.sort(key=lambda x: x[0] - x[1])\n        ans = 0\n        for i in range(n):\n            if r - arr[i][0] >= 0:\n                temp = (r - arr[i][0]) // (arr[i][0] - arr[i][1])\n                ans += temp\n                r -= temp * (arr[i][0] - arr[i][1])\n            while r >= arr[i][0]:\n                ans += 1\n                r -= arr[i][0] - arr[i][1]\n        print(ans)\nbuyingSweets()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ar = [int(x) for x in input().split()]\n    br = [int(x) for x in input().split()]\n    res = [[ar[i] - br[i], ar[i], br[i]] for i in range(n)]\n    ct = 0\n    res.sort()\n    for i in range(n):\n        if m <= 0:\n            break\n        if res[i][1] <= m:\n            q = (m - res[i][1]) // res[i][0] + 1\n            ct += q\n            m -= q * res[i][0]\n    print(ct)", "t = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = [a[i] - b[i] for i in range(n)]\n    d = list(zip(a, c))\n    d.sort(key=lambda x: x[1])\n    cnt = 0\n    for x in d:\n        if x[0] > r:\n            continue\n        r -= x[0]\n        cnt += 1\n        cnt += r // x[1]\n        r = r % x[1]\n        r += x[0] - x[1]\n    print(cnt)", "for _ in range(int(input())):\n    (n, money) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for i in range(n):\n        c.append((a[i] - b[i], a[i]))\n    c.sort()\n    ans = 0\n    for i in range(n):\n        effective_cost = c[i][0]\n        actual_cost = c[i][1]\n        cashback = actual_cost - effective_cost\n        if money < actual_cost:\n            continue\n        money -= actual_cost\n        ans += 1\n        ans += money // effective_cost\n        money %= effective_cost\n        money += cashback\n    print(ans)"]