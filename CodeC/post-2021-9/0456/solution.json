["import math as math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A_array = list(map(int, input().split()))\n    print(math.floor(sum(A_array) / N))", "import math as math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A_array = list(map(int, input().split()))\n    print(math.floor(sum(A_array) / N))", "import math as math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A_array = list(map(int, input().split()))\n    print(math.floor(sum(A_array) / N))", "i = input\nfor j in [0] * int(i()):\n    i()\n    (*a,) = map(int, i().split())\n    print(sum(a) // len(a))", "i = input\nfor j in [0] * int(i()):\n    i()\n    a = list(map(int, i().split()))\n    print(sum(a) // len(a))", "for tea in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(sum(a) // len(a))", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(math.floor(sum(A) / N))", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(math.floor(sum(A) / N))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 1:\n        print(-arr[0])\n        continue\n    s = (n - 1) * sum(arr)\n    print(s // (n * (n - 1)))", "import math\n\ndef main():\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        A = [int(x) for x in input().split()]\n        ss = 0\n        cntt = 0\n        for a in A:\n            ss += (n - 1) * a\n            cntt += n - 1\n        print(ss // cntt)\n        t -= 1\nmain()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(sum(l) // n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    arr = input().split()\n    arr = [int(i) for i in arr]\n    print(int(sum(arr) / len(arr)))", "def func():\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        s += a[i]\n    print(s // n)\nt = int(input())\nfor i in range(t):\n    func()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = sum(arr)\n    print(x // n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = sum(arr)\n    print(x // n)", "from sys import stdin\n\ndef check(n, a):\n    data = sum(a)\n    ans = data // n\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(check(n, a))", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(int(sum(A) / N))", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(int(sum(A) / N))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    ans = sum(x) // n\n    print(ans)", "T = int(input())\nfor tc in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(sum(arr) // n)", "import statistics as st\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = list(map(int, input().split()))\n    print(int(st.mean(s)))", "mod = 1000000007\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a) // n)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    print(sum(list(map(int, input().split()))) // n)\n    t -= 1", "from math import floor\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')[:n]))\n    print(floor(sum(arr) / n))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = sum(map(int, input().split()))\n    print(A // n)", "for _ in range(int(input())):\n    n = int(input())\n    print(sum(list(map(int, input().split()))) // n)", "def fact(n):\n    if n == 1:\n        return 1\n    else:\n        return n * fact(n - 1)\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    s1 = sum(a)\n    print(s1 // n)", "t = int(input(''))\nwhile t:\n    n = int(input(''))\n    l = [int(item) for item in input('').split()]\n    print(sum(l) // len(l))\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    s1 = sum(l)\n    print(s1 // n)", "k = int(input())\nwhile k > 0:\n    s = int(input())\n    l = list(map(int, input().split()))\n    print(sum(l) // s)\n    k -= 1", "try:\n    import math\n    for _ in range(int(input())):\n        n = int(input())\n        array = list(map(int, input().split()))\n        ans = sum(array)\n        fact = math.factorial(n)\n        print(int(ans / n))\nexcept:\n    pass", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = map(int, input().split())\n    print(int(sum(a) / n))", "for t in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    print(int(abs(sum(A) / N)))", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    s = sum(A)\n    print(s // N)", "import math\n\ndef weirdsum(n, arr):\n    if n == 0:\n        return 0\n    if n == 1:\n        return math.ceil(arr[0])\n    sum_ = sum(arr)\n    ans = sum_ // n\n    if ans < 0:\n        return -1 * ans\n    return ans\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = weirdsum(n, arr)\n    print(ans)", "n = int(input())\nfor _ in range(n):\n    n = int(input())\n    x = list(map(int, input().split()))\n    s = sum(x)\n    print(s // n)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = sum(arr) // n\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    s = list(map(int, input().split()))\n    print(sum(s) // n)\n    t -= 1", "for _ in range(int(input())):\n    x = int(input())\n    print(sum(list(map(int, input().split()))) // x)", "test = int(input())\nwhile test:\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(sum(a) // n)\n    test -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(sum(lst) // n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(sum(lst) // n)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n == 2:\n        print(sum(arr) // 2)\n        continue\n    print(sum(arr) // n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a) // n)", "from math import floor\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    a = input().split()\n    for i in range(0, n):\n        a[i] = int(a[i])\n    x = sum(a) / n\n    print(floor(x))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(sum(l) // n)", "from math import floor\nfacts = {}\n\ndef fact(x):\n    if x in facts.keys():\n        return facts[x]\n    elif x <= 1:\n        return 1\n    else:\n        pro = 1\n        for i in range(2, x + 1):\n            pro *= i\n        facts[x] = pro\n        return pro\nfor _ in range(int(input())):\n    x = int(input())\n    summ = sum(list(map(int, input().split())))\n    ansss = summ // x\n    print(ansss)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    x = sum(arr)\n    print(x // n)", "tcs = int(input())\nfor i in range(tcs):\n    n = int(input())\n    ans = sum(list(map(int, input().split()))) // n\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    print(sum(list(map(int, input().split()))) // n)", "t = int(input())\nfor tt in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for u in a:\n        s += u\n    ans = 0\n    for r in range(n):\n        p = ((n - 2) * a[r] + s) // 2\n        if p < 0:\n            p *= -1\n        ans += p\n    k = n * (n - 1)\n    print(ans // k)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(sum(arr) // n)", "for tc in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in a:\n        s += i\n    s /= n\n    print(int(s))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    s = int(sum(l) / n)\n    print(s)", "import math\n\ndef mergeSort(lst, start, end):\n    if start == end:\n        return 0\n    middle = start + (end - start) // 2\n    a = mergeSort(lst, start, middle)\n    b = mergeSort(lst, middle + 1, end)\n    c = merge(lst, start, middle, end)\n    return a + b + c\n\ndef merge(lst, start, middle, end):\n    count = 0\n    Llst = lst[start:middle + 1]\n    Rlst = lst[middle + 1:end + 1]\n    n1 = len(Llst)\n    i = 0\n    j = 0\n    k = start\n    while i < middle - start + 1 and j < end - middle:\n        if Llst[i] <= Rlst[j]:\n            lst[k] = Llst[i]\n            i += 1\n            k += 1\n        else:\n            count += n1 - i\n            lst[k] = Rlst[j]\n            j += 1\n            k += 1\n    while i < middle - start + 1:\n        lst[k] = Llst[i]\n        i += 1\n        k += 1\n    while j < end - middle:\n        lst[k] = Rlst[j]\n        j += 1\n        k += 1\n    return count\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    s = sum(lst)\n    ans = s // n\n    print(ans)", "import sys\ninput = sys.stdin.readline\nfor t in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    print(total // n)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    s = sum(a)\n    s = s // n\n    print(s)", "for i in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    print(int(sum(b) // a))", "for _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    print(int(sum(b) // a))", "for _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    print(int(sum(b) // a))", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(sum(l) // n)", "for _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    print(int(sum(b) // a))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(sum(l) // n)", "for _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    print(int(sum(b) // a))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    sum = 0\n    string = input()\n    for wr in string.split():\n        sum += int(wr)\n    print(int(sum / n))", "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    s //= n\n    print(s)\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    s //= n\n    print(s)\n    t -= 1", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    print(sum(l) // n)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    sum = 0\n    for i in a:\n        sum = sum + i\n    print(sum // n)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    print(sum(a) // n)", "for k in range(int(input())):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    print(sum(A) // n)", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    n = inp()\n    l = li()\n    pr(sum(l) // n)\nfor _ in range(inp()):\n    solve()", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = [int(a) for a in input().split()]\n    print(sum(A) // N)", "test_cases = int(input())\nwhile test_cases != 0:\n    n = int(input())\n    lis = list(map(int, input().split()))\n    count = 0\n    for i in range(n):\n        count += lis[i]\n    print(count // n)\n    test_cases -= 1", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    a = list(map(int, input().split()))\n    print(sum(a) // N)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = sum(a)\n    print(b // n)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    print(sum // n)", "for _ in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    print(sum(x) // n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().strip().split()]\n    if n == 1:\n        print(arr[0])\n    else:\n        S = sum(arr)\n        print(int(S / n))", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    print(sum(l) // n)", "from math import floor\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    t = sum(arr)\n    print(floor(t / n))", "from statistics import mean\nimport sys\ninput = sys.stdin.readline\nnum_test_cases = int(input())\nfor test_case_ittr in range(num_test_cases):\n    size = int(input())\n    arr = [int(x) for x in input().split()]\n    print(int(mean(arr)))", "import heapq\nimport math\nimport sys\nimport collections\nimport bisect\nimport time\nimport random\nimport itertools\nimport string\nfrom collections import Counter, defaultdict\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\nfor t in range(int(input())):\n    n = int(input())\n    arr = get_list()\n    print(sum(arr) // n)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = sum(arr)\n    print(s // n)", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    L = list(map(int, input().strip().split()))[:n]\n    S = sum(L) // len(L)\n    print(S)", "try:\n    T = int(input())\n    while T:\n        n = int(input())\n        a = list(map(int, input().split()))\n        sum_a = sum(a)\n        res = sum_a // n\n        print(int(res))\n        T -= 1\nexcept:\n    pass", "from math import ceil, gcd, factorial, sqrt, floor\nimport queue\nimport re\nfrom itertools import permutations, combinations, accumulate\nfrom collections import Counter, deque\nfrom sys import stdin, stdout\nfrom bisect import bisect, insort, bisect_left, insort_left\ninput = lambda : stdin.readline()\n\ndef sieve(n):\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for l1 in range(p * p, n + 1, p):\n                prime[l1] = False\n        p += 1\n    return prime\n\ndef simplesieve(n):\n    prime = [2]\n    mark = [False] * (n + 1)\n    for p in range(3, n + 1, 2):\n        if mark[p] == False:\n            prime.append(p)\n            if p * p <= n:\n                for l1 in range(p * p, n + 1, 2 * p):\n                    mark[l1] = True\n    return prime\n\ndef segementedsieve(low, high):\n    limit = int(sqrt(high))\n    primes = simplesieve(limit)\n    prime = [True] * (high - low + 1)\n    for l1 in primes:\n        lower = low // l1\n        if lower <= 1:\n            lower = l1 + l1\n        elif low % l1 != 0:\n            lower = lower * l1 + l1\n        else:\n            lower = lower * l1\n        for l2 in range(lower, high + 1, l1):\n            prime[l2 - low] = False\n    s1 = []\n    s = 0\n    for l in range(low, high + 1):\n        if prime[l - low]:\n            s1.append(l)\n    return s1\n\ndef isprime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for l1 in range(3, int(n ** 0.5) + 1, 2):\n        if n % l1 == 0:\n            return False\n    return True\n\ndef binpow(s1, s2, s):\n    r2 = 1\n    s1 = s1 % s\n    while s2 > 0:\n        if s2 & 1:\n            r2 = r2 * s1 % s\n        s1 = s1 * s1 % s\n        s2 >>= 1\n    return r2\n\ndef lcm(s1, s2):\n    return s1 // gcd(s1, s2) * s2\n\ndef gcdExtended(s1, s2):\n    if s2 == 0:\n        return (s1, 1, 0)\n    (g, x1, y1) = gcdExtended(s2, s1 % s2)\n    l1 = y1\n    l2 = x1 - s1 // s2 * y1\n    return (g, l1, l2)\n\ndef dfs(graph, s, l1):\n    v = [0] * (s + 1)\n    v[l1] = 1\n    s1 = [l1]\n    z = 0\n    while s1 != []:\n        l = s1.pop()\n        for l1 in graph[l]:\n            if v[l1] == 0:\n                v[l1] = 1\n                s1.append(l1)\n    return 'no'\n\ndef bfs(graph, n, x, dest):\n    v = [0] * (1 + n)\n    d = [0] * (1 + n)\n    d[x] = 0\n    v[x] = 1\n    q = queue.Queue()\n    q.put(x)\n    while not q.empty():\n        z = q.get()\n        for s in graph[z]:\n            if v[s] == 0:\n                v[s] = 1\n                d[s] = d[z] + 1\n                q.put(s)\n    return d[dest]\nprime = simplesieve(10 ** 5 + 1)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = sum(a)\n    print(c // n)", "for i in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    s = sum(a) // n\n    print(s)", "t = int(input())\ns = ''\nfor i in range(t):\n    n = int(input())\n    v = [0 for _ in range(n)]\n    cnt = 0\n    arr = list(map(int, input().split()))\n    for i in range(n):\n        v[i] = arr[i]\n        cnt += v[i]\n    print(int(cnt / n))", "import itertools\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom collections import Counter\nfrom collections import defaultdict as dd\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nstdmap = lambda : map(int, stdstr().split())\nstdarr = lambda : list(map(int, stdstr().split()))\nmod = 1000000007\n\ndef bf(arr):\n    perms = itertools.permutations(arr)\n    num = 0\n    den = 0\n    for i in perms:\n        x = i[0] + i[-1]\n        num += x\n        den += 1\n    num /= 2\n    return num // den\nfor _ in range(stdint()):\n    n = stdint()\n    arr = stdarr()\n    exp = sum(arr) // n\n    print(exp)", "import sys\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\nfrom collections import deque\nsys.setrecursionlimit(10 ** 8)\nfrom queue import PriorityQueue as pq\nfrom math import gcd\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nlii = lambda : list(map(int, list(ip())))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab, bc, cd: ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x: print(x)\nprinT = lambda x: print(x)\nf = lambda : sys.stdout.flush()\ninv = lambda x: pow(x, mod - 2, mod)\ndx = [0, 0, 1, -1]\ndy = [1, -1, 0, 0]\nmod = 10 ** 9 + 7\nmod1 = 998244353\nfor _ in range(ii()):\n    n = ii()\n    a = il()\n    s = sum(a)\n    print(s // n)", "for i in range(int(input())):\n    n = int(input())\n    l = sum(list(map(int, input().split())))\n    print(l // n)", "import math\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    a = input().split(' ')\n    a = [int(x) for x in a]\n    print(math.floor(abs(sum(a) / n)))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    for i in range(n):\n        s += a[i] * (n - 1)\n    s = s / (n * (n - 1))\n    s = math.floor(s)\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = sum(list(map(int, input().split())))\n    print(int(l / n))", "def sumthisup(n, arr):\n    return sum(arr) // n\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(sumthisup(n, a))"]