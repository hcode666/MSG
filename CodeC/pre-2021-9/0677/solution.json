["d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dine_area = defaultdict(list)\n    for customer in range(n):\n        (s, e, pref) = map(int, input().split())\n        dine_area[pref].append((s, e))\n\n    def process(dine):\n        interval = dine_area[dine]\n        interval.sort(key=lambda x: x[1])\n        customers = 1\n        prev_end = interval[0][1]\n        for (s, e) in interval[1:]:\n            if s >= prev_end:\n                prev_end = e\n                customers += 1\n        return customers\n    total_customers = 0\n    for dine in dine_area:\n        total_customers += process(dine)\n    print(total_customers)", "import sys\nfrom collections import defaultdict\n\ndef ti():\n    return tuple(map(int, input().split()))\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    customers = {}\n    for customer in range(n):\n        temp = [int(x) for x in input().split()]\n        if temp[2] in customers:\n            customers[temp[2]].append(temp)\n        else:\n            customers[temp[2]] = [temp]\n    happy_customers = 0\n    for (comp, booth) in customers.items():\n        booth.sort(key=lambda x: x[1], reverse=False)\n        if len(booth) == 1:\n            happy_customers += 1\n            continue\n        current_end = booth[0][1]\n        happy_customers += 1\n        for cust in booth:\n            if cust[0] >= current_end:\n                happy_customers += 1\n                current_end = cust[1]\n    print(happy_customers)", "def solve(compartments):\n    total = 0\n    for compartment in compartments:\n        people = compartments[compartment]\n        people.sort(key=lambda x: x[1])\n        prevFin = 0\n        for person in people:\n            (start, finish) = person\n            if start >= prevFin:\n                total += 1\n                prevFin = finish\n    return total\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        compartments = {}\n        (N, K) = [int(num) for num in input().split()]\n        for j in range(N):\n            (s, f, p) = [int(num) for num in input().split()]\n            if p not in compartments:\n                compartments[p] = []\n            compartments[p].append((s, f))\n        print(solve(compartments))\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split()]\n    hmap = dict()\n    for _ in range(n):\n        (s, f, p) = [int(x) for x in input().split()]\n        hmap.setdefault(p, []).append((s, f))\n    ans = 0\n    for (key, arr) in hmap.items():\n        ans = ans + 1\n        arr.sort(key=lambda x: x[1])\n        curr = arr[0]\n        for slot in arr:\n            if slot[0] >= curr[1]:\n                curr = slot\n                ans = ans + 1\n    print(ans)", "import sys\nfrom collections import defaultdict\n\ndef ti():\n    return tuple(map(int, input().split()))\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "from collections import defaultdict\n\ndef solve():\n    (n, k) = (int(i) for i in input().strip().split(' '))\n    d = defaultdict(list)\n    for i in range(n):\n        (si, fi, pi) = (int(i) for i in input().strip().split(' '))\n        d[pi].append((fi, si))\n    ans = 0\n    for i in d:\n        d[i].sort()\n    for key in d:\n        c = 0\n        for v in d[key]:\n            (a, b) = v\n            if b >= c:\n                ans += 1\n                c = a\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "from collections import defaultdict\n\ndef solve():\n    (n, k) = (int(i) for i in input().strip().split(' '))\n    d = defaultdict(list)\n    for i in range(n):\n        (s, f, p) = (int(i) for i in input().strip().split(' '))\n        d[p].append((f, s))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (f, s) = ele\n            if s >= t:\n                ans += 1\n                t = f\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "from collections import defaultdict\n\ndef solve():\n    (n, k) = (int(i) for i in input().strip().split(' '))\n    d = defaultdict(list)\n    for i in range(n):\n        (s, f, p) = (int(i) for i in input().strip().split(' '))\n        d[p].append((f, s))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (f, s) = ele\n            if s >= t:\n                ans += 1\n                t = f\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "def find_max(schedule):\n    schedule.sort(key=lambda k: k[1])\n    result = 0\n    free_at = -1\n    for (s, f) in schedule:\n        if s >= free_at:\n            free_at = f\n            result += 1\n    return result\n\ndef solve(customers, K):\n    schedules = {}\n    result = 0\n    for (s, f, p) in customers:\n        if p not in schedules:\n            schedules[p] = []\n        schedules[p].append([s, f])\n    for schedule in schedules.values():\n        result += find_max(schedule)\n    return result\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        customers = [[int(val) for val in input().split()] for _ in range(N)]\n        print(solve(customers, K))\nmain()", "def find_max(schedule):\n    schedule.sort(key=lambda k: k[1])\n    result = 0\n    free_at = -1\n    for (s, f) in schedule:\n        if s >= free_at:\n            free_at = f\n            result += 1\n    return result\n\ndef solve(customers, K):\n    schedules = {}\n    result = 0\n    for (s, f, p) in customers:\n        if p not in schedules:\n            schedules[p] = []\n        schedules[p].append([s, f])\n    for schedule in schedules.values():\n        result += find_max(schedule)\n    return result\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        customers = [[int(val) for val in input().split()] for _ in range(N)]\n        print(solve(customers, K))\nmain()", "def find_max(schedule):\n    schedule.sort(key=lambda k: k[1])\n    result = 0\n    free_at = -1\n    for (s, f) in schedule:\n        if s >= free_at:\n            free_at = f\n            result += 1\n    return result\n\ndef solve(customers, K):\n    schedules = {}\n    result = 0\n    for (s, f, p) in customers:\n        if p not in schedules:\n            schedules[p] = []\n        schedules[p].append([s, f])\n    for schedule in schedules.values():\n        result += find_max(schedule)\n    return result\n\ndef main():\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        customers = [[int(val) for val in input().split()] for _ in range(N)]\n        print(solve(customers, K))\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    mapi = {}\n    for _ in range(n):\n        (arr, dep, comp) = map(int, input().split())\n        if comp in mapi:\n            mapi[comp].append([dep, arr])\n        else:\n            mapi[comp] = [[dep, arr]]\n    count = 0\n    for comp in mapi.values():\n        comp.sort(key=lambda x: x[0])\n        prev = 0\n        for curr in comp:\n            if curr[1] >= prev:\n                prev = curr[0]\n                count += 1\n    print(count)", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "from collections import defaultdict\n\ndef fun():\n    (n, k) = (int(i) for i in input().strip().split(' '))\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in input().strip().split())\n        d[c].append((r, l))\n    for y in d:\n        d[y].sort()\n    ans = 0\n    for y in d:\n        t = 0\n        for e in d[y]:\n            (r, l) = e\n            if l >= t:\n                ans += 1\n                t = r\n    print(ans)\np = int(input())\nfor i in range(p):\n    fun()", "from collections import defaultdict\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    c = defaultdict(list)\n    for _ in range(N):\n        (s, f, p) = map(int, input().split())\n        c[p].append((f, s))\n    cust = 0\n    for k in c:\n        c[k].sort()\n        t = 0\n        for ele in c[k]:\n            (r, l) = ele\n            if l >= t:\n                cust += 1\n                t = r\n    print(cust)", "import sys\nfrom collections import defaultdict\nt = int(sys.stdin.readline())\nfor i in range(t):\n    (n, k) = (int(i) for i in sys.stdin.readline().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in sys.stdin.readline().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    sys.stdout.write(str(ans) + '\\n')", "from collections import defaultdict\nt = int(input())\n\ndef solve():\n    (n, k) = map(int, input().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for i in d[x]:\n            (r, l) = i\n            if l >= t:\n                ans += 1\n                t = r\n    print(ans)\nwhile t:\n    solve()\n    t -= 1", "from collections import defaultdict\n\ndef solve():\n    (n, k) = (int(i) for i in input().strip().split(' '))\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = (int(i) for i in input().strip().split(' '))\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "from collections import defaultdict\n\ndef solve():\n    (n, k) = map(int, input().split())\n    d = defaultdict(list)\n    for i in range(n):\n        (l, r, c) = map(int, input().split())\n        d[c].append((r, l))\n    for x in d:\n        d[x].sort()\n    ans = 0\n    for x in d:\n        t = 0\n        for ele in d[x]:\n            (r, l) = ele\n            if l >= t:\n                ans += 1\n                t = r\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        table = {}\n        for _ in range(n):\n            (start, end, pref) = map(int, input().split())\n            if pref in table.keys():\n                table[pref].add((end, start))\n            else:\n                table[pref] = set()\n                table[pref].add((end, start))\n        cnt = 0\n        for key in table.keys():\n            length = len(table[key])\n            if length > 1:\n                val = sorted(table[key])\n                last_dept = 0\n                for i in range(length):\n                    if val[i][1] >= last_dept:\n                        cnt += 1\n                        last_dept = val[i][0]\n            else:\n                cnt += 1\n        print(cnt)\nexcept:\n    pass", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        table = {}\n        for _ in range(n):\n            (start, end, pref) = map(int, input().split())\n            if pref in table.keys():\n                table[pref].add((end, start))\n            else:\n                table[pref] = set()\n                table[pref].add((end, start))\n        cnt = 0\n        for key in table.keys():\n            length = len(table[key])\n            if length > 1:\n                val = sorted(table[key])\n                last_dept = 0\n                for i in range(length):\n                    if val[i][1] >= last_dept:\n                        cnt += 1\n                        last_dept = val[i][0]\n            else:\n                cnt += 1\n        print(cnt)\nexcept:\n    pass", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    customerslist = {}\n    for j in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in customerslist:\n            customerslist[p].append([f, s])\n        else:\n            customerslist[p] = [[f, s]]\n    count = 0\n    for comp in customerslist.values():\n        comp.sort()\n        last = 0\n        for cust in comp:\n            if cust[1] >= last:\n                last = cust[0]\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list()\n    d = {}\n    for i in range(n):\n        (s, f, p) = list(map(int, input().split()))\n        if p in d:\n            d[p].append([s, f, p])\n        else:\n            d[p] = [[s, f, p]]\n    count = 0\n    for val in d.values():\n        freeat = 0\n        y = sorted(val, key=lambda x: x[1])\n        for i in y:\n            if freeat <= i[0]:\n                freeat = i[1]\n                count += 1\n    print(count)", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    dic = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in dic:\n            dic[p].append((f, s))\n        else:\n            dic[p] = [(f, s)]\n    ans = 0\n    for l in dic:\n        dic[l].sort()\n        temp = -1\n        for m in dic[l]:\n            if m[1] >= temp:\n                ans += 1\n                temp = m[0]\n    print(ans)", "t = int(input())\nfor testcase in range(t):\n    (n, k) = map(int, input().split())\n    rest = {}\n    for cust in range(n):\n        (s, f, p) = list(map(int, input().split()))\n        if p in rest:\n            rest[p].append([f, s])\n        else:\n            rest[p] = [[f, s]]\n    count = 0\n    for comp in rest.values():\n        comp.sort(key=lambda x: x[0])\n        last = 0\n        for cust in comp:\n            if cust[1] >= last:\n                last = cust[0]\n                count += 1\n    print(count)", "t = int(input())\nfor testcase in range(t):\n    (n, k) = map(int, input().split())\n    rest = {}\n    for cust in range(n):\n        (s, f, p) = list(map(int, input().split()))\n        if p in rest:\n            rest[p].append([f, s])\n        else:\n            rest[p] = [[f, s]]\n    count = 0\n    for comp in rest.values():\n        comp.sort(key=lambda x: x[0])\n        last = 0\n        for cust in comp:\n            if cust[1] >= last:\n                last = cust[0]\n                count += 1\n    print(count)", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    mp = {}\n    for cust in range(n):\n        (s, f, p) = list(map(int, input().split()))\n        if p in mp:\n            mp[p].append([s, f])\n        else:\n            mp[p] = [[s, f]]\n    ans = 0\n    for lst in mp.values():\n        lst.sort(key=lambda y: y[1])\n        cnt = 1\n        prev = 0\n        i = 1\n        for val in lst[1:]:\n            if val[0] >= lst[prev][1]:\n                prev = i\n                cnt += 1\n            i += 1\n        ans += cnt\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    m = {}\n    for j in range(n):\n        (arr, dep, k) = list(map(int, input().split()))\n        if k in m:\n            m[k].append([arr, dep])\n        else:\n            m[k] = [[arr, dep]]\n    c = 0\n    for temp in m.values():\n        temp.sort(key=lambda x: x[1])\n        ct = 1\n        curr = 0\n        ct1 = 1\n        for temp1 in temp[1:]:\n            if temp1[0] >= temp[curr][1]:\n                curr = ct1\n                ct += 1\n            ct1 += 1\n        c += ct\n    print(c)", "testcase = int(input())\nfor index in range(testcase):\n    (customerNum, seat) = map(int, input().split())\n    customers = {}\n    for cust in range(customerNum):\n        (custArrive, custDepart, custFavourite) = map(int, input().split())\n        if custFavourite not in customers:\n            customers[custFavourite] = [(custArrive, custDepart)]\n        else:\n            customers[custFavourite].append((custArrive, custDepart))\n    count = 0\n    for values in customers.values():\n        values.sort(key=lambda x: x[1])\n        previous = (0, 0)\n        for item in values:\n            if item[0] >= previous[1]:\n                previous = item\n                count += 1\n    print(count)", "testcase = int(input())\nfor index in range(testcase):\n    (customerNum, seat) = map(int, input().split())\n    customers = {}\n    for cust in range(customerNum):\n        (custArrive, custDepart, custFavourite) = map(int, input().split())\n        if custFavourite not in customers:\n            customers[custFavourite] = [(custArrive, custDepart)]\n        else:\n            customers[custFavourite].append((custArrive, custDepart))\n    count = 0\n    for values in customers.values():\n        values.sort(key=lambda x: x[1])\n        previous = (0, 0)\n        for item in values:\n            if item[0] >= previous[1]:\n                previous = item\n                count += 1\n    print(count)", "t = int(input())\nfor p in range(t):\n    (n, k) = map(int, input().split())\n    l = {}\n    for i in range(n):\n        (a, b, c) = map(int, input().split())\n        if c not in l:\n            l[c] = [(a, b)]\n        else:\n            l[c].append((a, b))\n    co = 0\n    for i in l.values():\n        i.sort(key=lambda x: x[1])\n        pre = (0, 0)\n        for j in i:\n            if j[0] >= pre[1]:\n                co = co + 1\n                pre = j\n    print(co, '\\n')", "testcase = int(input())\nfor index in range(testcase):\n    (customerNum, seat) = map(int, input().split())\n    customers = {}\n    for cust in range(customerNum):\n        (custArrive, custDepart, custFavourite) = map(int, input().split())\n        if custFavourite not in customers:\n            customers[custFavourite] = [(custArrive, custDepart)]\n        else:\n            customers[custFavourite].append((custArrive, custDepart))\n    count = 0\n    for values in customers.values():\n        values.sort(key=lambda x: x[1])\n        previous = (0, 0)\n        for item in values:\n            if item[0] >= previous[1]:\n                previous = item\n                count += 1\n    print(count)", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    cust_preference = {}\n    for c in range(n):\n        (s, f, p) = map(int, input().split())\n        if p not in cust_preference:\n            cust_preference[p] = [(s, f)]\n        else:\n            cust_preference[p].append((s, f))\n    count = 0\n    for v in cust_preference.values():\n        v.sort(key=lambda x: x[1])\n        previous = (0, 0)\n        for item in v:\n            if item[0] >= previous[1]:\n                previous = item\n                count += 1\n    print(count)", "def fn_bonAppetit(t):\n    for test_case in range(t):\n        (n, k) = map(int, input().split())\n        cust_preference = {}\n        for c in range(n):\n            (s, f, p) = map(int, input().split())\n            if p not in cust_preference:\n                cust_preference[p] = [(s, f)]\n            else:\n                cust_preference[p].append((s, f))\n        count = 0\n        for v in cust_preference.values():\n            v.sort(key=lambda x: x[1])\n            previous = (0, 0)\n            for item in v:\n                if item[0] >= previous[1]:\n                    previous = item\n                    count += 1\n        print(count)\nt = int(input())\nfn_bonAppetit(t)", "def fn_bonAppetit(t):\n    for test_case in range(t):\n        (n, k) = map(int, input().split())\n        cust_preference = {}\n        for c in range(n):\n            (s, f, p) = map(int, input().split())\n            if p not in cust_preference:\n                cust_preference[p] = [(s, f)]\n            else:\n                cust_preference[p].append((s, f))\n        count = 0\n        for v in cust_preference.values():\n            v.sort(key=lambda x: x[1])\n            previous = (0, 0)\n            for item in v:\n                if item[0] >= previous[1]:\n                    previous = item\n                    count += 1\n        print(count)\nt = int(input())\nfn_bonAppetit(t)", "def fn_bonAppetit(t):\n    for test_case in range(t):\n        (n, k) = map(int, input().split())\n        cust_preference = {}\n        for c in range(n):\n            (s, f, p) = map(int, input().split())\n            if p not in cust_preference:\n                cust_preference[p] = [(s, f)]\n            else:\n                cust_preference[p].append((s, f))\n        count = 0\n        for v in cust_preference.values():\n            v.sort(key=lambda x: x[1])\n            previous = (0, 0)\n            for item in v:\n                if item[0] >= previous[1]:\n                    previous = item\n                    count += 1\n        print(count)\nt = int(input())\nfn_bonAppetit(t)", "t = int(input())\nfor _ in range(t):\n    (N, K) = map(int, input().split())\n    d = {}\n    for i in range(N):\n        (s, f, p) = map(int, input().split())\n        if p in d:\n            d[p].append((f, s))\n        else:\n            d[p] = [(f, s)]\n    count = 0\n    for i in d:\n        d[i].sort()\n        start = -1\n        for j in d[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)", "d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "d = int(input())\nwhile d > 0:\n    (n, k) = map(int, input().split())\n    t = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in t:\n            t[p].append((f, s))\n        else:\n            t[p] = [(f, s)]\n    count = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                count += 1\n                start = j[0]\n    print(count)\n    d -= 1", "def main(n, k):\n    customers = {}\n    allowed = []\n    for i in range(n):\n        (s, f, p) = tuple(map(int, input().split()))\n        customers.setdefault(p, []).append((s, f))\n    for p in customers:\n        interested = sorted(customers[p], key=lambda x: x[1])\n        allowed.append(interested[0])\n        for i in range(1, len(interested)):\n            prev = allowed[-1]\n            curr = interested[i]\n            if curr[0] >= prev[1]:\n                allowed.append(curr)\n    return len(allowed)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(main(n, k))", "T = int(input())\nfor k in range(T):\n    (N, K) = map(int, input().split())\n    t = {}\n    for i in range(N):\n        (s, f, p) = map(int, input().split())\n        try:\n            t[p].append((f, s))\n        except:\n            t[p] = [(f, s)]\n    c = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                c += 1\n                start = j[0]\n    print(c)", "def main(n, k):\n    customers = {}\n    allowed = []\n    for i in range(n):\n        (s, f, p) = tuple(map(int, input().split()))\n        customers.setdefault(p, []).append((s, f))\n    for p in customers:\n        interested = sorted(customers[p], key=lambda x: x[1])\n        allowed.append(interested[0])\n        for i in range(1, len(interested)):\n            prev = allowed[-1]\n            curr = interested[i]\n            if curr[0] >= prev[1]:\n                allowed.append(curr)\n    return len(allowed)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(main(n, k))", "def main(n, k):\n    customers = {}\n    allowed = []\n    for i in range(n):\n        (s, f, p) = tuple(map(int, input().split()))\n        customers.setdefault(p, []).append((s, f))\n    for p in customers:\n        interested = sorted(customers[p], key=lambda x: x[1])\n        allowed.append(interested[0])\n        for i in range(1, len(interested)):\n            prev = allowed[-1]\n            curr = interested[i]\n            if curr[0] >= prev[1]:\n                allowed.append(curr)\n    return len(allowed)\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    print(main(n, k))", "try:\n    for _ in range(int(input())):\n        (N, K) = map(int, input().split())\n        cell = []\n        count = 0\n        l = []\n        for __ in range(N):\n            inserted = list(map(int, input().split()))\n            cell.append(inserted)\n        cell.sort(key=lambda x: x[1])\n        time = {}\n        for number in cell:\n            if number[2] not in time:\n                time[number[2]] = number[1]\n                count += 1\n            elif number[0] >= time[number[2]]:\n                time[number[2]] = number[1]\n                count += 1\n        print(count)\nexcept:\n    pass", "from sys import stdin\ninput = stdin.readline\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = []\n    c = 0\n    for g in range(n):\n        adc = list(map(int, input().split()))\n        l.append(adc)\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[2])\n    i = 0\n    j = 0\n    while i < n:\n        if i != 0:\n            if l[i][2] != l[i - 1][2]:\n                c += 1\n                j = i\n            elif l[i][0] >= l[j][1]:\n                c += 1\n                j = i\n        else:\n            c += 1\n        i += 1\n    print(c)", "from sys import stdin\ninput = stdin.readline\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = []\n    c = 0\n    for g in range(n):\n        adc = list(map(int, input().split()))\n        l.append(adc)\n    l.sort(key=lambda x: x[1])\n    l.sort(key=lambda x: x[2])\n    i = 0\n    j = 0\n    while i < n:\n        if i != 0:\n            if l[i][2] != l[i - 1][2]:\n                c += 1\n                j = i\n            elif l[i][0] >= l[j][1]:\n                c += 1\n                j = i\n        else:\n            c += 1\n        i += 1\n    print(c)", "def Max_cust(T):\n    for i in range(T):\n        count = 0\n        cus_prefer = {}\n        (n, k) = map(int, input().split())\n        for j in range(n):\n            (s, f, p) = map(int, input().split())\n            if p not in cus_prefer:\n                cus_prefer[p] = [(s, f)]\n            else:\n                cus_prefer[p].append((s, f))\n        for v in cus_prefer.values():\n            v.sort(key=lambda x: x[1])\n            previous = (0, 0)\n            for item in v:\n                if item[0] >= previous[1]:\n                    previous = item\n                    count += 1\n        print(count)\nt = int(input())\nMax_cust(t)", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = []\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        arr.append((s, f, p))\n    arr.sort(key=lambda x: x[1])\n    arr.sort(key=lambda x: x[2])\n    i = 0\n    j = 0\n    cnt = 0\n    while i < n:\n        if i != 0:\n            if arr[i][2] != arr[i - 1][2]:\n                cnt = cnt + 1\n                j = i\n            elif arr[i][0] >= arr[j][1]:\n                cnt = cnt + 1\n                j = i\n        else:\n            cnt = cnt + 1\n        i = i + 1\n    print(cnt)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(n):\n        (s, f, p) = list(map(int, input().split()))\n        d[p].append([s, f])\n    ans = 0\n    for i in d:\n        if len(d[i]) == 1:\n            ans += 1\n        else:\n            d[i].sort(key=lambda x: x[1])\n            t = 0\n            for j in range(len(d[i])):\n                if d[i][j][0] >= t:\n                    ans += 1\n                    t = d[i][j][1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = (int(i) for i in input().split())\n    cust = [[int(i) for i in input().split()] for _ in range(n)]\n    cust.sort(key=lambda x: x[1])\n    compartments = {}\n    ans = 0\n    for x in cust:\n        (s, f, c) = x\n        if c in compartments:\n            if compartments[c] <= s:\n                compartments[c] = f\n                ans += 1\n        else:\n            compartments[c] = f\n            ans += 1\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    d = defaultdict(list)\n    for i in range(n):\n        (s, f, p) = list(map(int, input().split()))\n        d[p].append([s, f])\n    ans = 0\n    for i in d:\n        if len(d[i]) == 1:\n            ans += 1\n        else:\n            d[i].sort(key=lambda x: x[1])\n            t = 0\n            for j in range(len(d[i])):\n                if d[i][j][0] >= t:\n                    ans += 1\n                    t = d[i][j][1]\n    print(ans)", "import sys\nfrom collections import defaultdict\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dic = defaultdict(lambda : [])\n    for i in range(n):\n        (a, d, c) = map(int, input().split())\n        dic[c].append((a, d))\n    out = 0\n    for i in dic:\n        dic[i].sort(key=lambda x: x[1])\n        t = 0\n        j = 0\n        l = len(dic[i])\n        while j < l:\n            if t <= dic[i][j][0]:\n                out += 1\n                t = dic[i][j][1]\n            j += 1\n    print(out)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    aux = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p not in aux:\n            aux[p] = []\n            aux[p].append([s, f])\n        else:\n            aux[p].append([s, f])\n    tot = 0\n    for i in aux:\n        if len(aux[i]) > 1:\n            aux[i].sort(key=lambda x: x[1])\n            t_1 = 0\n            for j in range(len(aux[i])):\n                if aux[i][j][0] >= t_1:\n                    t_1 = aux[i][j][1]\n                    tot += 1\n        else:\n            tot += 1\n    print(tot)", "import sys, math, numpy as np\nfrom sys import stdin, stdout\nmod = int(1000000000.0 + 7)\nfrom collections import deque, defaultdict\nfrom copy import deepcopy\nfrom math import ceil, floor, inf, sqrt, factorial, gcd, log2\nii1 = lambda : int(stdin.readline().strip())\nis1 = lambda : stdin.readline().strip()\niia = lambda : list(map(int, stdin.readline().strip().split()))\nisa = lambda : stdin.readline().strip().split()\nfor _ in range(ii1()):\n    (n, kebin) = iia()\n    arr = []\n    for i in range(n):\n        a = iia()\n        arr.append(a)\n    arr.sort(key=lambda x: x[1])\n    dic = {}\n    count = 0\n    for cus in arr:\n        if cus[2] not in dic:\n            dic[cus[2]] = cus[1]\n            count += 1\n        elif cus[0] >= dic[cus[2]]:\n            dic[cus[2]] = cus[1]\n            count += 1\n    print(count)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    l = []\n    c = 0\n    for i in range(n):\n        (a, d, x) = map(int, input().split())\n        l.append((a, d, x))\n    l.sort(key=lambda x: x[1])\n    d = {}\n    for i in l:\n        if i[2] not in d:\n            d[i[2]] = i[1]\n            c += 1\n        elif i[0] >= d[i[2]]:\n            c += 1\n            d[i[2]] = i[1]\n    print(c)\n    t -= 1", "for _ in range(int(input())):\n    ans = 0\n    (n, k) = map(int, input().split())\n    dic = {}\n    for _ in range(n):\n        (s, f, p) = map(int, input().split())\n        if p not in dic:\n            dic[p] = [(s, f)]\n        else:\n            dic[p].append((s, f))\n    for (key, val) in dic.items():\n        if len(dic[key]) > 1:\n            x = 0\n            for dekho in sorted(dic[key], key=lambda x: x[1]):\n                if dekho[0] >= x:\n                    ans += 1\n                    x = dekho[1]\n        else:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    ans = 0\n    (n, k) = map(int, input().split())\n    dic = {}\n    for _ in range(n):\n        (s, f, p) = map(int, input().split())\n        if p not in dic:\n            dic[p] = [(s, f)]\n        else:\n            dic[p].append((s, f))\n    for (key, val) in dic.items():\n        if len(dic[key]) > 1:\n            x = 0\n            for dekho in sorted(dic[key], key=lambda x: x[1]):\n                if dekho[0] >= x:\n                    ans += 1\n                    x = dekho[1]\n        else:\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    temp = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        if p in temp:\n            temp[p].append([s, f])\n        else:\n            temp[p] = [[s, f]]\n    cnt = 0\n    for k in temp.keys():\n        temp[k].sort(key=lambda x: x[1])\n        prv = [0, 0]\n        for i in range(len(temp[k])):\n            if temp[k][i][0] >= prv[1]:\n                prv = temp[k][i]\n                cnt += 1\n    print(cnt)\n    t -= 1", "def fn_bonAppetit(test):\n    for _ in range(test):\n        (n, k) = map(int, input().split())\n        cust_preference = {}\n        for c in range(n):\n            (s, f, p) = map(int, input().split())\n            if p not in cust_preference:\n                cust_preference[p] = [(s, f)]\n            else:\n                cust_preference[p].append((s, f))\n        count = 0\n        for v in cust_preference.values():\n            v.sort(key=lambda x: x[1])\n            previous = (0, 0)\n            for item in v:\n                if item[0] >= previous[1]:\n                    previous = item\n                    count += 1\n        print(count)\ntest = int(input())\nfn_bonAppetit(test)", "def fn_bonAppetit(t):\n    for test_case in range(t):\n        (n, k) = map(int, input().split())\n        cust_preference = {}\n        for c in range(n):\n            (s, f, p) = map(int, input().split())\n            if p not in cust_preference:\n                cust_preference[p] = [(s, f)]\n            else:\n                cust_preference[p].append((s, f))\n        count = 0\n        for v in cust_preference.values():\n            v.sort(key=lambda x: x[1])\n            previous = (0, 0)\n            for item in v:\n                if item[0] >= previous[1]:\n                    previous = item\n                    count += 1\n        print(count)\nt = int(input())\nfn_bonAppetit(t)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    times = defaultdict(list)\n    for i in range(n):\n        (start, finish, p) = [int(x) for x in input().strip().split()]\n        times[p].append((start, finish))\n    ans = 0\n    for c in times.values():\n        c.sort(key=lambda x: x[1])\n        finish_time = 0\n        for (st, ft) in c:\n            if st >= finish_time:\n                ans += 1\n                finish_time = ft\n    print(ans)", "from sys import stdin, stdout\ntc = int(stdin.readline())\nfor i in range(tc):\n    (n, k) = list(map(int, stdin.readline().split()))\n    dict1 = {}\n    comp_to_iterate = []\n    for j in range(n):\n        (s, f, comp) = list(map(int, stdin.readline().split()))\n        if comp in dict1.keys():\n            dict1[comp].append((s, f))\n            if comp not in comp_to_iterate:\n                comp_to_iterate.append(comp)\n        else:\n            dict1[comp] = [(s, f)]\n    total = len(dict1.keys()) - len(comp_to_iterate)\n    for key in comp_to_iterate:\n        value = dict1[key]\n        value.sort(key=lambda x: x[1])\n        el = value[0]\n        l = 1\n        total += 1\n        while l < len(value):\n            if value[l][0] >= el[1]:\n                total += 1\n                el = value[l]\n            l += 1\n    print(total)", "T = int(input())\nfor k in range(T):\n    (N, K) = map(int, input().split())\n    t = {}\n    for i in range(N):\n        (s, f, p) = map(int, input().split())\n        try:\n            t[p].append((f, s))\n        except:\n            t[p] = [(f, s)]\n    c = 0\n    for i in t:\n        t[i].sort()\n        start = -1\n        for j in t[i]:\n            if j[1] >= start:\n                c += 1\n                start = j[0]\n    print(c)", "for i in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    dict1 = {}\n    for j in range(n):\n        (s, e, p) = list(map(int, input().split()))\n        try:\n            dict1[p].append((e, s))\n        except:\n            dict1[p] = [(e, s)]\n    count = 0\n    for k in dict1:\n        dict1[k].sort()\n        start = -1\n        for j in dict1[k]:\n            if j[1] >= start:\n                start = j[0]\n                count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        try:\n            d[p].append((f, s))\n        except:\n            d[p] = [(f, s)]\n    ans = 0\n    for i in d:\n        d[i].sort()\n        start = -1\n        for j in d[i]:\n            if j[1] >= start:\n                ans += 1\n                start = j[0]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    d = {}\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        try:\n            d[p].append((f, s))\n        except:\n            d[p] = [(f, s)]\n    ans = 0\n    for i in d:\n        d[i].sort()\n        start = -1\n        for j in d[i]:\n            if j[1] >= start:\n                ans += 1\n                start = j[0]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    arr = {}\n    (n, k) = map(int, input().split())\n    for i in range(n):\n        (at, dt, sp) = map(int, input().split())\n        if sp not in arr:\n            arr[sp] = []\n        arr[sp].append((at, dt))\n    count = 0\n    for val in arr.values():\n        val.sort(key=lambda x: x[1])\n        f = 0\n        for x in val:\n            if x[0] >= f:\n                count = count + 1\n                f = x[1]\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    arr = {}\n    for x in range(n):\n        (s, f, p) = map(int, input().strip().split())\n        if p not in arr:\n            arr[p] = []\n        arr[p].append((s, f))\n    ans = 0\n    for c in arr.values():\n        c.sort(key=lambda x: x[1])\n        f = 0\n        for x in c:\n            if x[0] >= f:\n                ans += 1\n                f = x[1]\n    print(ans)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    (n, k) = map(int, stdin.readline().split())\n    m = {}\n    f = {}\n    c = 0\n    for i in range(n):\n        (s, e, c) = map(int, stdin.readline().split())\n        v = [s, e, c]\n        if c in m:\n            m[c].append(v)\n        else:\n            m[c] = [v]\n    c = 0\n    for i in m:\n        t = m[i]\n        t = sorted(t, key=lambda x: x[1])\n        for j in range(len(t)):\n            if t[j][2] not in f:\n                f[t[j][2]] = t[j][1]\n                c += 1\n            elif t[j][0] >= f[t[j][2]]:\n                c += 1\n                f[t[j][2]] = t[j][1]\n    print(c)", "def customer(n, k, cust):\n    total = len(cust)\n    for k in cust:\n        m = len(cust[k])\n        local = cust[k]\n        prev = local[0]\n        (i, n) = (1, m)\n        while i < n:\n            if prev[1] <= local[i][0]:\n                total += 1\n                prev = local[i]\n            i += 1\n    return total\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    cust = {}\n    for _ in range(n):\n        (a, d, p) = map(int, input().split())\n        if p in cust.keys():\n            cust[p].append([a, d])\n        else:\n            cust[p] = [[a, d]]\n    for num in cust:\n        cust[num] = sorted(cust[num], key=lambda x: x[1])\n    out = customer(n, k, cust)\n    print(out)", "def fgfs(n, k, d):\n    count = len(d)\n    for num in d:\n        (i, n) = (1, len(d[num]))\n        times = d[num]\n        initial = times[0]\n        while i < n:\n            if initial[1] <= times[i][0]:\n                count += 1\n                initial = times[i]\n            i += 1\n    return count\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    dic = {}\n    for i in range(N):\n        (s, f, p) = map(int, input().split())\n        if p in dic.keys():\n            dic[p].append([s, f])\n        else:\n            dic[p] = [[s, f]]\n    for num in dic:\n        dic[num] = sorted(dic[num], key=lambda x: x[1])\n    print(fgfs(N, K, dic))", "def fgfs(n, k, d):\n    count = len(d)\n    for num in d:\n        (i, n) = (1, len(d[num]))\n        times = d[num]\n        initial = times[0]\n        while i < n:\n            if initial[1] <= times[i][0]:\n                count += 1\n                initial = times[i]\n            i += 1\n    return count\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    dic = {}\n    for i in range(N):\n        (s, f, p) = map(int, input().split())\n        if p in dic.keys():\n            dic[p].append([s, f])\n        else:\n            dic[p] = [[s, f]]\n    for num in dic:\n        dic[num] = sorted(dic[num], key=lambda x: x[1])\n    print(fgfs(N, K, dic))", "def fgfs(n, k, d):\n    count = len(d)\n    for num in d:\n        (i, n) = (1, len(d[num]))\n        times = d[num]\n        initial = times[0]\n        while i < n:\n            if initial[1] <= times[i][0]:\n                count += 1\n                initial = times[i]\n            i += 1\n    return count\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    dic = {}\n    for i in range(N):\n        (s, f, p) = map(int, input().split())\n        if p in dic.keys():\n            dic[p].append([s, f])\n        else:\n            dic[p] = [[s, f]]\n    for num in dic:\n        dic[num] = sorted(dic[num], key=lambda x: x[1])\n    print(fgfs(N, K, dic))", "def fgfs(n, k, d):\n    count = len(d)\n    for num in d:\n        (i, n) = (1, len(d[num]))\n        times = d[num]\n        initial = times[0]\n        while i < n:\n            if initial[1] <= times[i][0]:\n                count += 1\n                initial = times[i]\n            i += 1\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    d = {}\n    for _ in range(n):\n        (s, f, p) = map(int, input().split())\n        if p not in d:\n            d[p] = [[s, f]]\n        else:\n            d[p].append([s, f])\n    for num in d:\n        d[num] = sorted(d[num], key=lambda x: x[1])\n    print(fgfs(n, k, d))", "T = int(input())\nfor z in range(T):\n    (N, K) = map(int, input().split())\n    lst = []\n    for i in range(N):\n        lst.append(tuple(map(int, input().split())))\n    lst.sort(key=lambda x: x[0])\n    res = 0\n    dct = {}\n    for (start, end, p) in lst:\n        if p in dct.keys():\n            if end <= dct[p][1]:\n                dct[p] = [start, end]\n            elif start >= dct[p][1]:\n                dct[p] = [start, end]\n                res += 1\n        else:\n            dct[p] = [start, end]\n            res += 1\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = []\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        data.append((s, f, p))\n    data.sort(key=lambda x: x[0])\n    compartments = dict()\n    customers = 0\n    for (s, f, p) in data:\n        if p in compartments:\n            if f < compartments[p][1]:\n                compartments[p] = (s, f)\n            elif s >= compartments[p][1]:\n                compartments[p] = (s, f)\n                customers += 1\n        else:\n            compartments[p] = (s, f)\n            customers += 1\n    print(customers)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = []\n    for i in range(n):\n        (s, f, p) = map(int, input().split())\n        data.append((s, f, p))\n    data.sort(key=lambda x: x[0])\n    compartments = dict()\n    customers = 0\n    for (s, f, p) in data:\n        if p in compartments:\n            if f < compartments[p][1]:\n                compartments[p] = (s, f)\n            elif s >= compartments[p][1]:\n                compartments[p] = (s, f)\n                customers += 1\n        else:\n            compartments[p] = (s, f)\n            customers += 1\n    print(customers)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    data = []\n    tab = dict()\n    for _ in range(n):\n        (s, f, p) = map(int, input().split())\n        data.append((s, f, p))\n    data.sort(key=lambda x: x[0])\n    coustomer = 0\n    for (s, f, p) in data:\n        if p in tab:\n            if f <= tab[p][1]:\n                tab[p] = (s, f)\n            elif s >= tab[p][1]:\n                tab[p] = (s, f)\n                coustomer += 1\n        else:\n            tab[p] = (s, f)\n            coustomer += 1\n    print(coustomer)", "from collections import defaultdict\n\ndef main():\n    t = int(input().strip())\n    for _ in range(t):\n        (n, k) = list(map(int, input().strip().split()))\n        customer_list = []\n        for _ in range(n):\n            customer_list.append(list(map(int, input().strip().split())))\n        customer_list.sort(key=lambda x: x[1])\n        count = 0\n        comp = defaultdict(int)\n        for cust in customer_list:\n            if comp[cust[2]] <= cust[0]:\n                comp[cust[2]] = cust[1]\n                count += 1\n        print(count)\nmain()"]