["import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    list1 = list(map(int, input().split()))\n    gcd1 = 0\n    for i in range(N):\n        gcd1 = math.gcd(gcd1, list1[i])\n    print(gcd1)", "def gcd(y, z):\n    while z != 0:\n        (y, z) = (z, y % z)\n    return y\nfor _ in range(int(input())):\n    num = int(input())\n    nums = list(map(int, input().split()))\n    res = nums[0]\n    for i in range(1, num):\n        res = gcd(res, nums[i])\n    print(res)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "def gcd(a, b):\n    while b != 0:\n        (a, b) = (b, a % b)\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    nums = list(map(int, input().split()))\n    result = nums[0]\n    for i in range(1, n):\n        result = gcd(result, nums[i])\n    print(result)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = a[0]\n    for j in a:\n        x = math.gcd(x, j)\n        if x == 1:\n            break\n    print(x)", "def gcd(a, b):\n    rem = b % a\n    b = a\n    a = rem\n    if rem == 0:\n        return b\n    return gcd(a, b)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gc = arr[0]\n    for i in arr[1:]:\n        gc = gcd(gc, i)\n    print(gc)", "from math import gcd\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        A = list(map(int, input().split(' ')))[:n]\n        ans = A[0]\n        for i in A:\n            ans = gcd(ans, i)\n        print(ans)\nmain()", "import math\nfor i in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    gcd = 9999999999\n    r = l[0]\n    for i in range(a):\n        r = math.gcd(r, l[i])\n    print(r)", "import math\nfor _ in range(0, int(input())):\n    x = int(input())\n    l = list(map(int, input().split()))\n    res = l[0]\n    for i in range(0, len(l)):\n        res = math.gcd(res, l[i])\n    print(res)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "import math\nfor tc in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[0]\n    for ele in arr:\n        gcd = math.gcd(gcd, ele)\n        if gcd == 1:\n            break\n    print(gcd)", "import math\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    flag = 0\n    r = l[0]\n    for i in range(len(l)):\n        r = math.gcd(r, l[i])\n    print(r)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "t = int(input())\nimport math\nfor i in range(t):\n    n = int(input())\n    arr = input().split(' ')\n    for j in range(n):\n        arr[j] = int(arr[j])\n    m = math.gcd(arr[0], arr[1])\n    if m == 1:\n        print(1)\n    else:\n        for x in range(2, n):\n            m = math.gcd(m, arr[x])\n            if m == 1:\n                print(1)\n                break\n        else:\n            print(m)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    A = [int(i) for i in input().split()]\n    gcdA = A[0]\n    for i in range(1, N):\n        gcdA = math.gcd(gcdA, A[i])\n    print(gcdA)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for j in l:\n        a = math.gcd(a, j)\n        if a == 1:\n            break\n    print(a)", "import math\nfor tc in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[0]\n    for ele in arr:\n        gcd = math.gcd(gcd, ele)\n        if gcd == 1:\n            break\n    print(gcd)", "import math\nfor tc in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[0]\n    for ele in arr:\n        gcd = math.gcd(gcd, ele)\n        if gcd == 1:\n            break\n    print(gcd)", "import math\nfor tc in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    gcd = arr[0]\n    for ele in arr:\n        gcd = math.gcd(gcd, ele)\n        if gcd == 1:\n            break\n    print(gcd)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    ans = l1[0]\n    for i in range(1, len(l1)):\n        ans = gcd(ans, l1[i])\n    print(ans)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "from math import gcd\n\ndef long(arr):\n    g = gcd(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        g = gcd(g, arr[i])\n    return g\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n == 1:\n        print(a[0])\n    else:\n        print(long(a))", "from math import gcd\n\ndef long(arr):\n    g = gcd(arr[0], arr[1])\n    for i in range(2, len(arr)):\n        g = gcd(g, arr[i])\n    return g\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    if n == 1:\n        print(a[0])\n    else:\n        print(long(a))", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "t = int(input())\nimport math\nwhile t != 0:\n    n = int(input())\n    l = list(map(int, input().split()))\n    h = l[0]\n    hcf = 0\n    for x in range(1, n):\n        hcf = math.gcd(h, l[x])\n        h = hcf\n    print(hcf)\n    t -= 1", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    g = gcd(L[0], L[1])\n    for i in range(2, len(L)):\n        g = gcd(g, L[i])\n    print(g)", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    g = gcd(L[0], L[1])\n    for i in range(2, len(L)):\n        g = gcd(g, L[i])\n    print(g)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    ans = l1[0]\n    for i in range(1, len(l1)):\n        ans = gcd(ans, l1[i])\n    print(ans)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    g = l[0]\n    for i in l:\n        g = gcd(g, i)\n    return g\nfor _ in range(IN()):\n    print(f())", "from math import gcd\nfrom functools import reduce\nfor _ in range(int(input())):\n    n = int(input())\n    arr = set(map(int, input().split()))\n    if len(arr) == 1:\n        print(arr[0])\n    else:\n        res = reduce(lambda a, b: gcd(a, b), arr)\n        print(res)", "from math import gcd\nt = int(input())\nfor t in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    flag = 1\n    for i in range(n - 1):\n        if arr[i] != arr[i + 1]:\n            flag = 0\n            break\n    if flag == 1:\n        print(arr[0])\n    else:\n        j = arr[0]\n        for k in arr:\n            j = gcd(j, k)\n        print(j)", "from math import gcd\nt = int(input())\nfor t in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    flag = 1\n    for i in range(n - 1):\n        if arr[i] != arr[i + 1]:\n            flag = 0\n            break\n    if flag == 1:\n        print(arr[0])\n    else:\n        j = arr[0]\n        for k in arr:\n            j = gcd(j, k)\n        print(j)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n\n    def gcd(a, b):\n        if a == 0:\n            return b\n        else:\n            return gcd(b % a, a)\n    for i in range(n - 1):\n        x = gcd(a[i], a[i + 1])\n        a[i] = a[i + 1] = x\n    print(x)", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(np.gcd.reduce(a))", "for i in range(int(input())):\n    import numpy as np\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(np.gcd.reduce(a))", "for _ in range(int(input())):\n    import numpy as np\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(np.gcd.reduce(a))", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    num = arr[0]\n    for i in arr[1:]:\n        num = gcd(num, i)\n    print(num)", "import numpy as np\nt = int(input())\nfor ni in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    print(np.gcd.reduce(l))", "for _ in range(int(input())):\n    import numpy as np\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(np.gcd.reduce(a))", "for i in range(int(input())):\n    n = int(input())\n\n    def gcd(a, b):\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    lst = list(map(int, input().split()))\n    res = lst[0]\n    for c in lst[1:]:\n        res = gcd(res, c)\n    print(res)", "def gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return abs(x)\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    ans = l1[0]\n    for i in range(1, len(l1)):\n        ans = gcd(ans, l1[i])\n    print(ans)", "import numpy\nt = int(input())\nwhile t:\n    n = int(input())\n    l = sorted(list(map(int, input().split())))\n    print(numpy.gcd.reduce(l))\n    t -= 1", "for _ in range(int(input())):\n    import numpy as np\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(np.gcd.reduce(a))", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(np.gcd.reduce(l))", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(np.gcd.reduce(l))", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(np.gcd.reduce(l))", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(np.gcd.reduce(l))", "import math\n\ndef hcf(d):\n    hcf = a[0]\n    for i in d:\n        hcf = math.gcd(hcf, i)\n    return hcf\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}.fromkeys(a)\n    if len(d) == 1:\n        print(a[0])\n    else:\n        print(hcf(d))", "def hcf(a, b):\n    if a < b:\n        (a, b) = (b, a)\n    while a % b != 0:\n        a = a % b\n        (a, b) = (b, a)\n    else:\n        return b\nfor i in range(int(input())):\n    input()\n    l = list(map(int, input().split()))\n    if len(l) == 1:\n        print(l[0])\n    else:\n        if l[0] == l[1]:\n            h = l[0]\n        else:\n            h = hcf(l[0], l[1])\n        for j in l[2:]:\n            h = hcf(j, h)\n        print(h)", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(np.gcd.reduce(l))", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(np.gcd.reduce(l))", "import numpy as np\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(np.gcd.reduce(l))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    i = list(map(int, input().split()))\n    res = i[0]\n    for x in range(1, n):\n        res = math.gcd(res, i[x])\n    print(res)", "import math\nT = int(input())\nwhile T > 0:\n    T -= 1\n    N = int(input())\n    L = list(map(int, input().split()))[:N]\n    for i in range(N):\n        if i == 0:\n            ans = math.gcd(L[i], L[i + 1])\n        else:\n            ans = math.gcd(L[i], ans)\n    print(ans)", "from math import gcd\nfor tc in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    g = a[0]\n    for i in range(1, n):\n        g = gcd(g, a[i])\n    print(g)", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    g = gcd(L[0], L[1])\n    for i in range(2, len(L)):\n        g = gcd(g, L[i])\n    print(g)", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    g = gcd(L[0], L[1])\n    for i in range(2, len(L)):\n        g = gcd(g, L[i])\n    print(g)", "from math import gcd\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    for i in range(n - 1):\n        a = gcd(a, l[i + 1])\n    print(a)", "import math\nn = int(input())\nfor _ in range(n):\n    x = int(input())\n    l = list(map(int, input().split()))\n    g = math.gcd(0, l[0])\n    for i in range(1, x):\n        g = math.gcd(g, l[i])\n    print(g)", "import math\n\ndef GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, len(l)):\n        g = GCD(g, l[i])\n    print(g)", "import math\n\ndef GCD(a, b):\n    if b == 0:\n        return a\n    return GCD(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, len(l)):\n        g = GCD(g, l[i])\n    print(g)", "import math\n\ndef GCD(a, b):\n    return math.gcd(a, b)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(1, len(l)):\n        g = GCD(g, l[i])\n    print(g)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    g = l[0]\n    for i in range(n - 1):\n        g = gcd(g, l[i + 1])\n    print(g)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    num = list(map(int, input().split()))\n    res = num[0]\n    for i in range(1, len(num), 1):\n        res = math.gcd(res, num[i])\n    print(res)", "import numpy as np\nfor i in range(int(input())):\n    y = int(input())\n    a = list(map(int, input().split(' ')))\n    terminator = np.gcd.reduce(a)\n    print(terminator)", "from math import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    g = A[0]\n    for i in range(N - 1):\n        g = gcd(g, A[i + 1])\n    print(g)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    h = a[0]\n    for i in range(1, n):\n        h = math.gcd(h, a[i])\n    print(h)", "import math\nT = int(input())\nwhile T > 0:\n    T -= 1\n    N = int(input())\n    L = list(map(int, input().split()))[:N]\n    for i in range(N):\n        if i == 0:\n            ans = math.gcd(L[i], L[i + 1])\n        else:\n            ans = math.gcd(L[i], ans)\n    print(ans)", "import math\nT = int(input())\nwhile T > 0:\n    T -= 1\n    N = int(input())\n    L = list(map(int, input().split()))[:N]\n    for i in range(N):\n        if i == 0:\n            ans = math.gcd(L[i], L[i + 1])\n        else:\n            ans = math.gcd(L[i], ans)\n    print(ans)", "def find_hcf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    first_element = a[0]\n    second_element = a[1]\n    hcf = find_hcf(first_element, second_element)\n    for j in range(2, len(a)):\n        hcf = find_hcf(hcf, a[j])\n    print(hcf)", "def find_hcf(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    first_element = a[0]\n    second_element = a[1]\n    hcf = find_hcf(first_element, second_element)\n    for j in range(2, len(a)):\n        hcf = find_hcf(hcf, a[j])\n    print(hcf)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\n\ndef solve():\n    N = int(input())\n    A = list(map(int, input().split()))\n    p = A[0]\n    for i in range(1, N):\n        p = gcd(p, A[i])\n    print(p)\nT = int(input())\nfor _ in range(T):\n    solve()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    p = a[0]\n    for i in range(1, n):\n        p = gcd(p, a[i])\n    print(p)\nfor i in range(int(input())):\n    solve()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    p = a[0]\n    for i in range(1, n):\n        p = gcd(p, a[i])\n    print(p)\nfor i in range(int(input())):\n    solve()", "def gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef solve():\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    p = a[0]\n    for i in range(1, n):\n        p = gcd(p, a[i])\n    print(p)\nfor i in range(int(input())):\n    solve()", "import math\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    h = x[0]\n    for i in x[1:n + 1]:\n        h = math.gcd(h, i)\n        if h == 1:\n            break\n    print(h)", "import math\nt = int(input())\nfor _ in range(0, t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    h = x[0]\n    for i in x[1:n + 1]:\n        h = math.gcd(h, i)\n        if h == 1:\n            break\n    print(h)", "import math\nT = int(input())\nfor i in range(T):\n    X = int(input())\n    list1 = list(map(int, input().split()))\n    d = list1[0]\n    for i in range(1, X):\n        d = math.gcd(d, list1[i])\n    print(d)", "import math\nT = int(input())\nA = []\nfor i in range(T):\n    X = int(input())\n    list1 = list(map(int, input().split()))\n    d = list1[0]\n    for i in range(1, X):\n        d = math.gcd(d, list1[i])\n    A.append(d)\nfor i in A:\n    print(i)", "import math\nT = int(input())\nfor i in range(T):\n    X = int(input())\n    list1 = list(map(int, input().split()))\n    d = list1[0]\n    for i in range(1, X):\n        d = math.gcd(d, list1[i])\n    print(d)"]