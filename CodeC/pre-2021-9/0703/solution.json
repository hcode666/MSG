["import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ar = a[::-1]\n    b = list(map(int, input().split()))\n    larr = [0]\n    rarr = []\n    nrstl = 0 if a[0] == 1 else -1\n    nrstr = -1\n    for i in range(1, n):\n        if a[i] > 0:\n            larr.append(0)\n            if a[i] == 1:\n                nrstl = i\n        else:\n            larr.append(i - nrstl if nrstl != -1 else -1)\n    for i in range(n - 1):\n        if ar[i] > 0:\n            rarr.append(0)\n            if ar[i] == 2:\n                nrstr = i\n        else:\n            rarr.append(i - nrstr if nrstr != -1 else -1)\n    rarr.append(0)\n    rarr = rarr[::-1]\n    for i in range(m):\n        st = b[i] - 1\n        if larr[st] > -1 and rarr[st] > -1:\n            print(min(rarr[st], larr[st]), end=' ')\n        elif larr[st] != rarr[st]:\n            print(max(larr[st], rarr[st]), end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ar = a[::-1]\n    b = list(map(int, input().split()))\n    larr = [0]\n    rarr = []\n    nrstl = 0 if a[0] == 1 else -1\n    nrstr = -1\n    for i in range(1, n):\n        if a[i] > 0:\n            larr.append(0)\n            if a[i] == 1:\n                nrstl = i\n        else:\n            larr.append(i - nrstl if nrstl != -1 else -1)\n    for i in range(n - 1):\n        if ar[i] > 0:\n            rarr.append(0)\n            if ar[i] == 2:\n                nrstr = i\n        else:\n            rarr.append(i - nrstr if nrstr != -1 else -1)\n    rarr.append(0)\n    rarr = rarr[::-1]\n    for i in range(m):\n        st = b[i] - 1\n        if larr[st] > -1 and rarr[st] > -1:\n            print(min(rarr[st], larr[st]), end=' ')\n        elif larr[st] != rarr[st]:\n            print(max(larr[st], rarr[st]), end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    llst = []\n    rlst = []\n    maxl = -1\n    maxr = -1\n    for i in range(n):\n        if a[i] == 1:\n            llst.append(i)\n            maxl = i\n        else:\n            llst.append(maxl)\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            rlst.append(i)\n            maxr = i\n        else:\n            rlst.append(maxr)\n    rlst.reverse()\n    flst = []\n    for i in range(m):\n        if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n            flst.append(0)\n        elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n            flst.append(-1)\n        elif llst[b[i] - 1] == -1:\n            flst.append(rlst[b[i] - 1] - (b[i] - 1))\n        elif rlst[b[i] - 1] == -1:\n            flst.append(b[i] - 1 - llst[b[i] - 1])\n        else:\n            x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n            flst.append(x)\n    print(*flst, sep=' ')", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "ri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input()\nfrom collections import defaultdict\nimport sys\nsys.setrecursionlimit(100000)\nt = ri()\nfor test in range(t):\n    (n, m) = rl()\n    l = rl()\n    d = rl()\n    train = [float('inf')] * n\n    s = float('-inf')\n    for i in range(n):\n        if i == 0:\n            train[i] = 0\n        elif l[i] != 0:\n            train[i] = 0\n        else:\n            train[i] = i - s\n        if l[i] == 1:\n            s = i\n    s = float('inf')\n    for i in range(n - 1, -1, -1):\n        train[i] = min(train[i], s - i)\n        if l[i] == 2:\n            s = i\n    ans = []\n    for i in d:\n        if train[i - 1] == float('inf'):\n            ans.append(-1)\n        else:\n            ans.append(train[i - 1])\n    for i in range(len(ans) - 1):\n        print(ans[i], end=' ')\n    print(ans[-1])", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    l = [n * 2] * n\n    r = [n * 2] * n\n    l[0] = 0\n    st = False\n    for i in range(n):\n        if a[i] == 1:\n            l[i] = 0\n            st = True\n        elif st:\n            l[i] = l[i - 1] + 1\n    en = False\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            r[i] = 0\n            en = True\n        elif en:\n            r[i] = r[i + 1] + 1\n    c = [-1] * n\n    for i in range(n):\n        c[i] = min(l[i], r[i])\n        if c[i] > n:\n            c[i] = -1\n    for i in b:\n        print(c[i - 1] if i != 0 else 0, end=' ')\n    print()", "import sys, math\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr, q):\n    n = len(arr)\n    left = [math.inf] * n\n    right = [math.inf] * n\n    left[0] = 0\n    f = 0\n    for i in range(n):\n        if arr[i] == 1:\n            left[i] = 0\n            f = 1\n            continue\n        if f:\n            left[i] = left[i - 1] + 1\n    f = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 2:\n            right[i] = 0\n            f = 1\n            continue\n        if f:\n            right[i] = right[i + 1] + 1\n    for i in q:\n        ans = min(left[i - 1], right[i - 1])\n        print(-1 if ans == math.inf else ans, end=' ')\n    print()\nn = int(input())\nfor i in range(n):\n    (p, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pro(arr, c)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    trains = list(map(int, input().split()))\n    dest = list(map(int, input().split()))\n    lmin = [1000001 for _ in range(n)]\n    rmin = [1000001 for _ in range(n)]\n    c = 1\n    flag = False\n    for i in range(n):\n        if trains[i] == 1:\n            lmin[i] = 0\n            c = 1\n            flag = True\n        elif flag:\n            lmin[i] = c\n            c += 1\n    c = 1\n    flag = False\n    for i in range(n - 1, -1, -1):\n        if trains[i] == 2:\n            rmin[i] = 0\n            c = 1\n            flag = True\n        elif flag:\n            rmin[i] = c\n            c += 1\n    r = []\n    for ele in dest:\n        if ele == 1:\n            r.append(0)\n        else:\n            res = min(lmin[ele - 1], rmin[ele - 1])\n            r.append(res if res != 1000001 else -1)\n    print(*r)", "NONE = 0\nRIGHT = 1\nLEFT = 2\n\ndef SHROUTE(N, M, As, Bs):\n    closest_left = []\n    closest_right = []\n    for (i, direction) in enumerate(As, start=1):\n        if direction == RIGHT:\n            closest_left.append(i)\n        elif closest_left:\n            closest_left.append(closest_left[-1])\n        else:\n            closest_left.append(-1)\n    for (i, direction) in list(enumerate(As, start=1))[::-1]:\n        if direction == LEFT:\n            closest_right.append(i)\n        elif closest_right:\n            closest_right.append(closest_right[-1])\n        else:\n            closest_right.append(-1)\n    closest_right = closest_right[::-1]\n    result = []\n    for b in Bs:\n        if b == 1:\n            result.append(0)\n            continue\n        left = closest_left[b - 1]\n        right = closest_right[b - 1]\n        dists = []\n        if left != -1:\n            dists.append(abs(b - left))\n        if right != -1:\n            dists.append(abs(b - right))\n        result.append(min(dists, default=-1))\n    print(' '.join((str(x) for x in result)))\nfor _ in range(int(input())):\n    (N, M) = (int(x) for x in input().split())\n    As = [int(x) for x in input().split()]\n    Bs = [int(x) for x in input().split()]\n    SHROUTE(N=N, M=M, As=As, Bs=Bs)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    (l3, l4) = ([-1] * (n + 1), [-1] * (n + 1))\n    (m1, m2) = (-1, -1)\n    for i in range(n):\n        if l1[i] == 1:\n            m1 = i + 1\n        if l1[n - 1 - i] == 2:\n            m2 = n - i\n        l3[i + 1] = m1\n        l4[n - i] = m2\n    for i in l2:\n        if i == 1:\n            print(0, end=' ')\n        elif l3[i] > 0 and l4[i] > 0:\n            print(min(i - l3[i], l4[i] - i), end=' ')\n        elif l3[i] > 0:\n            print(i - l3[i], end=' ')\n        elif l4[i] > 0:\n            print(l4[i] - i, end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    station = list(map(int, input().split()))\n    dest = list(map(int, input().split()))\n    dis1 = [-1] * n\n    dis2 = [-1] * n\n    (right, left) = (-1, -1)\n    for i in range(n):\n        if station[i] == 1:\n            dis1[i] = i\n            right = i\n        else:\n            dis1[i] = right\n    for i in range(n - 1, -1, -1):\n        if station[i] == 2:\n            dis2[i] = i\n            left = i\n        else:\n            dis2[i] = left\n    res = []\n    for i in range(m):\n        d = dest[i]\n        if d == 1:\n            res.append(0)\n            continue\n        if dis1[d - 1] == -1 and dis2[d - 1] == -1:\n            res.append(-1)\n            continue\n        if dis1[d - 1] == -1 and dis2[d - 1] != -1:\n            res.append(abs(dis2[d - 1] - (d - 1)))\n            continue\n        if dis1[d - 1] != -1 and dis2[d - 1] == -1:\n            res.append(abs(dis1[d - 1] - (d - 1)))\n            continue\n        res.append(min(abs(dis2[d - 1] - (d - 1)), abs(dis1[d - 1] - (d - 1))))\n    print(*res)", "t = int(input())\nfor k in range(t):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    s = input().split()\n    for i in range(n):\n        s[i] = int(s[i])\n    _b = input().split()\n    for i in range(m):\n        _b[i] = int(_b[i])\n    prep1 = [-1] * n\n    prep2 = [-1] * n\n    pr1 = -1\n    pr2 = -1\n    for i in range(n):\n        if s[i] == 1:\n            prep1[i] = i\n            pr1 = i\n        else:\n            prep1[i] = pr1\n    for i in range(n - 1, -1, -1):\n        if s[i] == 2:\n            prep2[i] = i\n            pr2 = i\n        else:\n            prep2[i] = pr2\n    ans = ''\n    for i in range(m):\n        b = _b[i]\n        if b == 1:\n            ans += '0 '\n            continue\n        if prep1[b - 1] == -1 and prep2[b - 1] == -1:\n            ans += '-1 '\n            continue\n        if prep1[b - 1] == -1 and prep2[b - 1] != -1:\n            ans += str(abs(prep2[b - 1] - (b - 1))) + ' '\n            continue\n        if prep1[b - 1] != -1 and prep2[b - 1] == -1:\n            ans += str(abs(prep1[b - 1] - (b - 1))) + ' '\n            continue\n        ans += str(min(abs(prep2[b - 1] - (b - 1)), abs(prep1[b - 1] - (b - 1)))) + ' '\n    print(ans[:len(ans) - 1])", "from math import inf\nimport sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = list(map(int, sys.stdin.readline().split()))\n    arr = list(map(int, sys.stdin.readline().split()))\n    q = list(map(int, sys.stdin.readline().split()))\n    left = [inf] * n\n    right = [inf] * n\n    left[0] = 0 if arr[0] == 1 else inf\n    for i in range(1, n):\n        if arr[i] == 1:\n            left[i] = 0\n        else:\n            left[i] = left[i - 1] + 1\n    right[n - 1] = 0 if arr[n - 1] == 2 else inf\n    for i in range(n - 2, -1, -1):\n        if arr[i] == 2:\n            right[i] = 0\n        else:\n            right[i] = right[i + 1] + 1\n    for i in q:\n        if i == 1:\n            print(0, end=' ')\n        else:\n            val = min(left[i - 1], right[i - 1])\n            print(-1 if val == inf else val, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    lst = list(map(int, input().split()))\n    query = list(map(int, input().split()))\n    lst1 = [float('inf')] * n\n    left = -1\n    for i in range(n):\n        if lst[i] == 1:\n            lst1[i] = 0\n            left = i\n        elif left != -1:\n            lst1[i] = i - left\n    lst1[0] = 0\n    right = -1\n    lst2 = [float('inf')] * n\n    for i in range(n - 1, -1, -1):\n        if lst[i] == 2:\n            right = i\n            lst2[i] = 0\n        elif right != -1:\n            lst2[i] = right - i\n    for i in range(m):\n        x = min(lst1[query[i] - 1], lst2[query[i] - 1])\n        if x != float('inf'):\n            print(x, end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    lst = list(map(int, input().split()))\n    query = list(map(int, input().split()))\n    lst1 = [float('inf')] * n\n    left = -1\n    for i in range(n):\n        if lst[i] == 1:\n            lst1[i] = 0\n            left = i\n        elif left != -1:\n            lst1[i] = i - left\n    lst1[0] = 0\n    right = -1\n    lst2 = [float('inf')] * n\n    for i in range(n - 1, -1, -1):\n        if lst[i] == 2:\n            right = i\n            lst2[i] = 0\n        elif right != -1:\n            lst2[i] = right - i\n    for i in range(m):\n        x = min(lst1[query[i] - 1], lst2[query[i] - 1])\n        if x != float('inf'):\n            print(x, end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [10 ** 6 for i in range(n)]\n    M[0] = 0\n    if 1 in L:\n        i = L.index(1)\n        x = i\n        y = x\n        for i in range(y, n):\n            if L[i] == 1:\n                M[i] = 0\n                x = i\n            else:\n                M[i] = i - x\n    if 2 in L:\n        S = L.copy()\n        S.reverse()\n        j = S.index(2)\n        x = n - j - 1\n        y = x\n        for i in range(y, -1, -1):\n            if L[i] == 2:\n                M[i] = 0\n                x = i\n            else:\n                M[i] = min(M[i], x - i)\n    N = list(map(int, input().split()))\n    K = [0 for i in range(m)]\n    for i in range(m):\n        a = N[i]\n        if M[a - 1] == 10 ** 6:\n            K[i] = -1\n        else:\n            K[i] = M[a - 1]\n    print(*K)", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [10 ** 6 for i in range(n)]\n    M[0] = 0\n    if 1 in L:\n        i = L.index(1)\n        x = i\n        y = x\n        for i in range(y, n):\n            if L[i] == 1:\n                M[i] = 0\n                x = i\n            else:\n                M[i] = i - x\n    if 2 in L:\n        S = L.copy()\n        S.reverse()\n        j = S.index(2)\n        x = n - j - 1\n        y = x\n        for i in range(y, -1, -1):\n            if L[i] == 2:\n                M[i] = 0\n                x = i\n            else:\n                M[i] = min(M[i], x - i)\n    N = list(map(int, input().split()))\n    K = [0 for i in range(m)]\n    for i in range(m):\n        a = N[i]\n        if M[a - 1] == 10 ** 6:\n            K[i] = -1\n        else:\n            K[i] = M[a - 1]\n    print(*K)", "T = int(input())\nfor _ in range(T):\n    (n, m) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [10 ** 6 for i in range(n)]\n    M[0] = 0\n    if 1 in L:\n        i = L.index(1)\n        x = i\n        y = x\n        for i in range(y, n):\n            if L[i] == 1:\n                M[i] = 0\n                x = i\n            else:\n                M[i] = i - x\n    if 2 in L:\n        S = L.copy()\n        S.reverse()\n        j = S.index(2)\n        x = n - j - 1\n        y = x\n        for i in range(y, -1, -1):\n            if L[i] == 2:\n                M[i] = 0\n                x = i\n            else:\n                M[i] = min(M[i], x - i)\n    N = list(map(int, input().split()))\n    K = [0 for i in range(m)]\n    for i in range(m):\n        a = N[i]\n        if M[a - 1] == 10 ** 6:\n            K[i] = -1\n        else:\n            K[i] = M[a - 1]\n    print(*K)", "import sys\nMAX = 10000000\n\ndef construct_left(a0, n0):\n    lt = [MAX] * n0\n    if a0[0] == 2:\n        lt[0] = 0\n    if a0[n0 - 1] == 2:\n        lt[n0 - 1] = 0\n    for i in reversed(range(0, n0 - 1)):\n        if a0[i] == 2:\n            lt[i] = 0\n        else:\n            lt[i] = min(lt[i], lt[i + 1] + 1)\n    return lt\n\ndef construct_right(a0, n0):\n    r = [MAX] * n0\n    if a0[0] == 1:\n        r[0] = 0\n    for i in range(1, n):\n        if a0[i] == 1:\n            r[i] = 0\n        else:\n            r[i] = min(r[i], r[i - 1] + 1)\n    return r\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    [n, m] = list(map(int, sys.stdin.readline().split()))\n    a = list(map(int, sys.stdin.readline().split()))\n    b = list(map(int, sys.stdin.readline().split()))\n    left = construct_left(a, n)\n    right = construct_right(a, n)\n    result = [MAX] * n\n    for i in range(n):\n        result[i] = 0 if a[i] != 0 else min(left[i], right[i])\n    for i in range(m):\n        bi = b[i]\n        if bi == 1:\n            print(0, end=' ')\n            continue\n        if result[bi - 1] == MAX:\n            print(-1, end='' if i == m - 1 else ' ')\n        else:\n            print(result[bi - 1], end='' if i == m - 1 else ' ')\n    print('')", "strng = lambda : input()\ninp = lambda : int(input())\nmul = lambda : map(int, input().split())\njn = lambda x, l: x.join(map(str, l))\nstrlst = lambda : list(input())\nlst = lambda : list(map(int, input().split()))\ndd = lambda : defaultdict(lambda : 0)\nfrom collections import defaultdict\nimport sys\nfrom math import ceil, log, floor, sqrt, gcd, log10\nfor _ in range(inp()):\n    (n, k) = mul()\n    a = lst()\n    b = lst()\n    l = []\n    cnt = sys.maxsize\n    for i in range(n):\n        if a[i] == 1:\n            cnt = 0\n        l += [cnt]\n        if cnt != sys.maxsize:\n            cnt += 1\n    cnt = sys.maxsize\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            cnt = 0\n        l[i] = min(l[i], cnt)\n        if cnt != sys.maxsize:\n            cnt += 1\n    for i in range(k):\n        if b[i] == 1:\n            print(0, end=' ')\n            continue\n        if l[b[i] - 1] == sys.maxsize:\n            print(-1, end=' ')\n            continue\n        print(l[b[i] - 1], end=' ')\n    print()", "from math import inf\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    q = [int(x) for x in input().split()]\n    left = [inf] * n\n    right = [inf] * n\n    left[0] = 0 if arr[0] == 1 else inf\n    for i in range(1, n):\n        if arr[i] == 1:\n            left[i] = 0\n        else:\n            left[i] = left[i - 1] + 1\n    right[n - 1] = 0 if arr[n - 1] == 2 else inf\n    for i in range(n - 2, -1, -1):\n        if arr[i] == 2:\n            right[i] = 0\n        else:\n            right[i] = right[i + 1] + 1\n    for i in q:\n        if i == 1:\n            print(0, end=' ')\n        else:\n            val = min(left[i - 1], right[i - 1])\n            print(-1 if val == inf else val, end=' ')\n    print()", "def cal(n, m, c, p):\n    l = [-1] * (n + 1)\n    a = [0]\n    b = []\n    count = 0\n    f = 0\n    for i in c:\n        if (i == 0 or i == 2) and f == 0:\n            a.append(-1)\n        elif i == 1:\n            a.append(0)\n            count = 0\n            f = 1\n        else:\n            count += 1\n            a.append(count)\n    count = 0\n    f = 0\n    c.reverse()\n    for i in c:\n        if (i == 0 or i == 1) and f == 0:\n            b.append(-1)\n        elif i == 2:\n            b.append(0)\n            count = 0\n            f = 1\n        else:\n            count += 1\n            b.append(count)\n    b.reverse()\n    b.insert(0, 0)\n    a[1] = 0\n    b[1] = 0\n    for i in p:\n        if min(a[i], b[i]) != -1:\n            d = min(a[i], b[i])\n        else:\n            d = max(a[i], b[i])\n        print(d, end=' ')\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    city = list(map(int, input().split()))\n    person = list(map(int, input().split()))\n    cal(N, M, city, person)\n    print()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    l = []\n    c = -1\n    for j in range(n):\n        if x[j] == 1:\n            c = j\n        l.append(c)\n    r = [-1 for i in range(n)]\n    c = -1\n    for k in range(n - 1, -1, -1):\n        if x[k] == 2:\n            c = k\n        r[k] = c\n    for z in y:\n        z -= 1\n        a = l[z]\n        b = r[z]\n        if z == 0:\n            print(0, end=' ')\n        elif a == -1 and b == -1:\n            print(-1, end=' ')\n        elif a == -1:\n            print(b - z, end=' ')\n        elif b == -1:\n            print(z - a, end=' ')\n        else:\n            print(min(b - z, z - a), end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    x = list(map(int, input().split()))\n    y = list(map(int, input().split()))\n    l = []\n    c = -1\n    for j in range(n):\n        if x[j] == 1:\n            c = j\n        l.append(c)\n    r = [-1 for i in range(n)]\n    c = -1\n    for k in range(n - 1, -1, -1):\n        if x[k] == 2:\n            c = k\n        r[k] = c\n    for z in y:\n        z -= 1\n        a = l[z]\n        b = r[z]\n        if z == 0:\n            print(0, end=' ')\n        elif a == -1 and b == -1:\n            print(-1, end=' ')\n        elif a == -1:\n            print(b - z, end=' ')\n        elif b == -1:\n            print(z - a, end=' ')\n        else:\n            print(min(b - z, z - a), end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    st = list(map(int, input().split()))\n    ps = list(map(int, input().split()))\n    l = []\n    ind = -1\n    for i in range(n):\n        if st[i] == 1:\n            ind = i\n        l.append(ind)\n    r = [-1 for i in range(n)]\n    ind = -1\n    for i in range(n - 1, -1, -1):\n        if st[i] == 2:\n            ind = i\n        r[i] = ind\n    for ele in ps:\n        ele = ele - 1\n        a = l[ele]\n        b = r[ele]\n        if ele == 0:\n            print(0, end=' ')\n        elif a == -1 and b == -1:\n            print(-1, end=' ')\n        elif a == -1:\n            print(b - ele, end=' ')\n        elif b == -1:\n            print(ele - a, end=' ')\n        else:\n            print(min(b - ele, ele - a), end=' ')\n    print()", "import sys, math\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 5)\n\ndef pro(arr, q):\n    n = len(arr)\n    left = [math.inf] * n\n    right = [math.inf] * n\n    left[0] = 0\n    f = 0\n    for i in range(n):\n        if arr[i] == 1:\n            left[i] = 0\n            f = 1\n            continue\n        if f:\n            left[i] = left[i - 1] + 1\n    f = 0\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 2:\n            right[i] = 0\n            f = 1\n            continue\n        if f:\n            right[i] = right[i + 1] + 1\n    for i in q:\n        ans = min(left[i - 1], right[i - 1])\n        print(-1 if ans == math.inf else ans, end=' ')\n    print()\nn = int(input())\nfor i in range(n):\n    (p, q) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    pro(arr, c)", "import sys\nmaxi = sys.maxsize\nT = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    station = list(map(int, input().split()))\n    city = list(map(int, input().split()))\n    diss1 = [maxi] * N\n    diss2 = [maxi] * N\n    if station[0] == 1:\n        diss1[0] = 0\n    for i in range(1, N):\n        if station[i] == 2:\n            if diss1[i - 1] != maxi:\n                diss1[i] = diss1[i - 1] + 1\n        if station[i] == 0:\n            if diss1[i - 1] != maxi:\n                diss1[i] = diss1[i - 1] + 1\n        if station[i] == 1:\n            diss1[i] = 0\n    if station[N - 1] == 2:\n        diss2[N - 1] = 0\n    for i in range(N - 2, -1, -1):\n        if station[i] == 1:\n            if diss2[i + 1] != maxi:\n                diss2[i] = 1 + diss2[i + 1]\n        if station[i] == 0:\n            if diss2[i + 1] != maxi:\n                diss2[i] = 1 + diss2[i + 1]\n        if station[i] == 2:\n            diss2[i] = 0\n    for i in city:\n        if i == 1:\n            print(0, end=' ')\n            continue\n        if station[i - 1] != 0:\n            print(0, end=' ')\n        elif diss1[i - 1] == maxi and diss2[i - 1] == maxi:\n            print(-1, end=' ')\n        else:\n            print(min(diss2[i - 1], diss1[i - 1]), end=' ')\n    print()", "import bisect\nn_testcase = int(input())\nfor testcase in range(n_testcase):\n    (n, m) = (int(x) for x in input().split())\n    facings = [int(x) for x in input().split()]\n    destinations = [int(x) for x in input().split()]\n    leftward_stations = []\n    rightward_stations = []\n    for (i, facing) in enumerate(facings, start=1):\n        if facing == 1:\n            rightward_stations.append(i)\n        if facing == 2:\n            leftward_stations.append(i)\n    for destination in destinations:\n        if destination == 1:\n            print(0, end=' ')\n            continue\n        min_time = n + 1\n        if leftward_stations and destination <= leftward_stations[-1]:\n            i = bisect.bisect_left(leftward_stations, destination)\n            station = leftward_stations[i]\n            min_time = min(min_time, station - destination)\n        if rightward_stations and destination >= rightward_stations[0]:\n            i = bisect.bisect_right(rightward_stations, destination) - 1\n            station = rightward_stations[i]\n            min_time = min(min_time, destination - station)\n        print(min_time if min_time < n + 1 else -1, end=' ')\n    print()", "import sys\n\ndef inp():\n    return sys.stdin.readline()\n\ndef out(var):\n    sys.stdout.write(str(var) + '\\n')\n\ndef I():\n    return inp()\n\ndef II():\n    return int(inp())\n\ndef FI():\n    return float(inp())\n\ndef SI():\n    return list(str(inp()))\n\ndef MI():\n    return map(int, inp().split())\n\ndef LI():\n    return list(MI())\n\ndef SLI():\n    return sorted(LI())\n\ndef MF():\n    return map(float, inp().split())\n\ndef LF():\n    return list(MF())\n\ndef SLF():\n    return sorted(LF())\nsys.setrecursionlimit(10 ** 9)\nfor t in range(II()):\n    (n, m) = MI()\n    ans = []\n    list1 = LI()[:n]\n    list2 = LI()[:m]\n    start = list1[0]\n    prefix2 = [-1] * (n + 1)\n    prefix1 = [-1] * (n + 1)\n    for i in range(n - 1, 0, -1):\n        if list1[i] == 2:\n            prefix2[i] = i\n            continue\n        prefix2[i] = prefix2[i + 1]\n    if list1[0] == 2:\n        prefix2[0] = 0\n    else:\n        prefix2[0] = prefix2[1]\n    if list1[0] == 1:\n        prefix1[0] = 0\n    for i in range(1, n):\n        if list1[i] == 1:\n            prefix1[i] = i\n            continue\n        prefix1[i] = prefix1[i - 1]\n    for i in range(m):\n        val1 = 2 ** 31\n        val2 = 2 ** 31\n        ind = list2[i] - 1\n        if ind == 0:\n            print(0, end=' ')\n        elif list1[ind] != 0:\n            print(0, end=' ')\n        else:\n            if ind >= prefix1[ind] and prefix1[ind] != -1:\n                val1 = abs(ind - prefix1[ind])\n            if ind <= prefix2[ind] and prefix2[ind] != -1:\n                val2 = abs(ind - prefix2[ind])\n            ans = min(val1, val2)\n            if ans == 2 ** 31:\n                print(-1, end=' ')\n            else:\n                print(ans, end=' ')\n    print()", "import bisect\nn_testcase = int(input())\nfor testcase in range(n_testcase):\n    (n, m) = (int(x) for x in input().split())\n    facings = [int(x) for x in input().split()]\n    destinations = [int(x) for x in input().split()]\n    leftward_stations = []\n    rightward_stations = []\n    for (i, facing) in enumerate(facings, start=1):\n        if facing == 1:\n            rightward_stations.append(i)\n        if facing == 2:\n            leftward_stations.append(i)\n    for destination in destinations:\n        if destination == 1:\n            print(0, end=' ')\n            continue\n        min_time = n + 1\n        if leftward_stations and destination <= leftward_stations[-1]:\n            i = bisect.bisect_left(leftward_stations, destination)\n            station = leftward_stations[i]\n            min_time = min(min_time, station - destination)\n        if rightward_stations and destination >= rightward_stations[0]:\n            i = bisect.bisect_right(rightward_stations, destination) - 1\n            station = rightward_stations[i]\n            min_time = min(min_time, destination - station)\n        print(min_time if min_time < n + 1 else -1, end=' ')\n    print()", "n = int(input())\nwhile n > 0:\n    input()\n    t = input().strip().split(' ')\n    p = input().strip().split(' ')\n    (latest_left, latest_right) = (-1, -1)\n    (left_shortest, right_shortest) = ([0] * len(t), [0] * len(t))\n    for i in range(len(t)):\n        if latest_right != -1:\n            right_shortest[i] = i - latest_right\n        if t[i] == '1':\n            latest_right = i\n    for i in range(len(t) - 1, -1, -1):\n        if latest_left != -1:\n            left_shortest[i] = latest_left - i\n        if t[i] == '2':\n            latest_left = i\n    res = []\n    for p1 in p:\n        dest = int(p1)\n        if dest == 1:\n            res.append('0')\n            continue\n        if t[dest - 1] == '1' or t[dest - 1] == '2':\n            res.append('0')\n            continue\n        min_dist = min(left_shortest[dest - 1], right_shortest[dest - 1])\n        if min_dist == 0:\n            if left_shortest[dest - 1] != 0:\n                res.append(str(left_shortest[dest - 1]))\n            elif right_shortest[dest - 1] != 0:\n                res.append(str(right_shortest[dest - 1]))\n            else:\n                res.append('-1')\n        else:\n            res.append(str(min_dist))\n    print(' '.join(res))\n    n -= 1", "from bisect import bisect, bisect_left\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    (left, right) = ([], [])\n    for i in range(n):\n        if A[i] == 1:\n            right.append(i)\n        elif A[i] == 2:\n            left.append(i)\n    for b in B:\n        b -= 1\n        if b == 0:\n            print('0', end=' ')\n        else:\n            k = bisect_left(left, b)\n            l = bisect(right, b)\n            res = -1\n            if k != len(left):\n                res = left[k] - b\n            if l != 0:\n                if res != -1:\n                    res = min(b - right[l - 1], res)\n                else:\n                    res = b - right[l - 1]\n            print(res, end=' ')\n    print()", "from bisect import bisect_left as bl, bisect_right as br\ninp = lambda x: map(int, x.split())\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(inp(input()))\n    b = list(inp(input()))\n    d = {}\n    (tl, tr) = (set(), set())\n    for i in range(max(m, n)):\n        if i < m:\n            try:\n                d[b[i]].append(i)\n            except:\n                d[b[i]] = [i]\n        if i < n and a[i] != 0:\n            if a[i] == 1:\n                tr.add(i + 1)\n            else:\n                tl.add(i + 1)\n    flags = ['-1'] * m\n    (tl, tr) = (list(tl), list(tr))\n    (l, r) = (len(tl), len(tr))\n    for k in d:\n        if k == 1:\n            for j in d[k]:\n                flags[j] = '0'\n        else:\n            ind_l = bl(tl, k)\n            ind_r = br(tr, k)\n            (p1, p2) = (n, n)\n            if ind_l != l:\n                p1 = abs(k - tl[ind_l])\n            if ind_r != 0:\n                p2 = abs(k - tr[ind_r - 1])\n            v = str(min(p1, p2))\n            if v == str(n):\n                v = '-1'\n            for j in d[k]:\n                flags[j] = v\n    print(' '.join(flags))", "T = int(input())\nfor t in range(T):\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    (R, L) = ([N] * N, [N] * N)\n    for i in range(N):\n        if A[i] == 1:\n            R[i] = 0\n        elif i > 0:\n            R[i] = R[i - 1] + 1\n        if A[N - i - 1] == 2:\n            L[N - i - 1] = 0\n        elif i > 0:\n            L[N - i - 1] = L[N - i] + 1\n    res = [-1] * M\n    for i in range(M):\n        if B[i] == 1:\n            res[i] = 0\n            continue\n        res[i] = min(L[B[i] - 1], R[B[i] - 1])\n        if res[i] >= N:\n            res[i] = -1\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    max = 10 ** 9\n    test = [None] * n\n    test[0] = 0\n    for i in range(1, n):\n        if a[i] != 0:\n            test[i] = 0\n        else:\n            test[i] = max\n    r = -1\n    for i in range(n):\n        if a[i] == 1:\n            r = i\n        elif r != -1:\n            test[i] = min(test[i], i - r)\n    l = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            l = i\n        elif l != -1:\n            test[i] = min(test[i], l - i)\n    for i in range(m):\n        des = b[i] - 1\n        if test[des] == max:\n            print(-1, end=' ')\n        else:\n            print(test[des], end=' ')\n    print()", "def func(A, N, mindr, mindl):\n    timer = 0\n    flagr = -1\n    flagl = -1\n    mindr[0] = 0\n    mindl[0] = 0\n    for m in range(0, N):\n        if A[m] == 1:\n            flagr = m\n            break\n    if flagr != -1:\n        for i in range(flagr, N):\n            if A[i] == 1:\n                timer = 0\n            else:\n                timer += 1\n            mindr[i] = timer\n    timer = 0\n    for n in range(N - 1, -1, -1):\n        if A[n] == 2:\n            flagl = n\n            break\n    if flagl != -1:\n        for j in range(flagl, -1, -1):\n            if A[j] == 2:\n                timer = 0\n            else:\n                timer += 1\n            mindl[j] = timer\nfor t in range(int(input())):\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    mindr = [1000001 for _ in range(N)]\n    mindl = [1000001 for _ in range(N)]\n    func(A, N, mindr, mindl)\n    ans = []\n    for k in range(M):\n        x = B[k] - 1\n        if min(mindr[x], mindl[x]) == 1000001:\n            ans.append(-1)\n        else:\n            ans.append(min(mindr[x], mindl[x]))\n    print(*ans)", "def shortestRoute(N, M, A, B):\n    moving_right = [float('inf')] * (N + 1)\n    for i in range(1, N + 1):\n        if A[i - 1] == 1:\n            moving_right[i] = 0\n        else:\n            moving_right[i] = min(moving_right[i], moving_right[i - 1] + 1)\n    moving_left = [float('inf')] * (N + 1)\n    for i in range(N, 0, -1):\n        if A[i - 1] == 2:\n            moving_left[i] = 0\n        elif i != N:\n            moving_left[i] = min(moving_left[i], moving_left[i + 1] + 1)\n    moving_left[1] = 0\n    moving_right[1] = 0\n    distance = [float('inf')] * (N + 1)\n    for i in range(N + 1):\n        distance[i] = min(moving_left[i], moving_right[i])\n        if distance[i] == float('inf'):\n            distance[i] = -1\n    L = []\n    for i in B:\n        L.append(distance[i])\n    return L\nT = int(input())\nfor case in range(T):\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    for x in shortestRoute(N, M, A, B):\n        print(x, end=' ')\n    print('')", "marker = 1000000000\n\ndef solve():\n    (N, M) = [int(x) for x in str(input()).split(' ')]\n    A = [0]\n    A.extend([int(x) for x in str(input()).split(' ')])\n    B = [int(x) for x in str(input()).split(' ')]\n    C = [marker] * (N + 1)\n    has_train = False\n    train_pos = -1\n    for i in range(1, len(A)):\n        if A[i] == 1:\n            has_train = True\n            train_pos = i\n            C[i] = 0\n        elif has_train:\n            C[i] = i - train_pos\n            i += 1\n    has_train = False\n    train_pos = -1\n    for i in range(len(A) - 1, 0, -1):\n        if A[i] == 2:\n            has_train = True\n            train_pos = i\n            C[i] = 0\n        elif has_train:\n            C[i] = min(C[i], train_pos - i)\n            i += 1\n    C[1] = 0\n    result = ''\n    for i in range(len(B)):\n        if i > 0:\n            result += ' '\n        destination = B[i]\n        if C[destination] == marker:\n            result += '-1'\n        else:\n            result += str(C[destination])\n    print(result)\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "try:\n    for _ in range(int(input())):\n        (n, m) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        llst = []\n        rlst = []\n        maxl = -1\n        maxr = -1\n        for i in range(n):\n            if a[i] == 1:\n                llst.append(i)\n                maxl = i\n            else:\n                llst.append(maxl)\n        for i in range(n - 1, -1, -1):\n            if a[i] == 2:\n                rlst.append(i)\n                maxr = i\n            else:\n                rlst.append(maxr)\n        rlst.reverse()\n        flst = []\n        for i in range(m):\n            if a[b[i] - 1] != 0 or b[i] - 1 == 0:\n                flst.append(0)\n            elif llst[b[i] - 1] == -1 and rlst[b[i] - 1] == -1:\n                flst.append(-1)\n            elif llst[b[i] - 1] == -1:\n                flst.append(rlst[b[i] - 1] - (b[i] - 1))\n            elif rlst[b[i] - 1] == -1:\n                flst.append(b[i] - 1 - llst[b[i] - 1])\n            else:\n                x = min(b[i] - 1 - llst[b[i] - 1], rlst[b[i] - 1] - (b[i] - 1))\n                flst.append(x)\n        print(*flst, sep=' ')\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    r = [-1] * n\n    l = [-1] * n\n    ctr = 0\n    flag = False\n    for i in range(n):\n        if a[i] == 1:\n            ctr = 0\n            r[i] = ctr\n            flag = True\n        elif flag == True:\n            ctr += 1\n            r[i] = ctr\n    ctr = 0\n    flag = False\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            ctr = 0\n            l[i] = ctr\n            flag = True\n        elif flag == True:\n            ctr += 1\n            l[i] = ctr\n    res = []\n    for i in range(m):\n        if b[i] - 1 == 0:\n            x = 0\n        elif l[b[i] - 1] != -1 and r[b[i] - 1] != -1:\n            x = min(l[b[i] - 1], r[b[i] - 1])\n        elif l[b[i] - 1] == -1 and r[b[i] - 1] != -1:\n            x = r[b[i] - 1]\n        elif l[b[i] - 1] != -1 and r[b[i] - 1] == -1:\n            x = l[b[i] - 1]\n        elif l[b[i] - 1] == -1 and r[b[i] - 1] == -1:\n            x = -1\n        res.append(x)\n    print(*res)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().strip().split())\n    a = list(map(int, sys.stdin.readline().strip().split()))\n    b = list(map(int, sys.stdin.readline().strip().split()))\n    distance1 = [0] * n\n    pos = -1\n    for i in range(0, n):\n        if a[i] == 1:\n            distance1[i] = 0\n            pos = i\n        elif a[i] == 0:\n            if pos != -1:\n                distance1[i] = abs(i - pos)\n            else:\n                distance1[i] = -1\n        else:\n            distance1[i] = 0\n    distance2 = [0] * n\n    pos2 = 0\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            distance2[i] = 0\n            pos2 = i\n        elif a[i] == 1:\n            distance2[i] = 0\n        elif pos2 != 0:\n            distance2[i] = abs(i - pos2)\n        else:\n            distance2[i] = -1\n    distance = [0] * n\n    for i in range(n):\n        if distance1[i] == -1 or distance2[i] == -1:\n            distance[i] = max(distance1[i], distance2[i])\n        else:\n            distance[i] = min(distance1[i], distance2[i])\n    ans = []\n    for i in range(0, m):\n        if b[i] == 1:\n            distance[b[i] - 1] = 0\n        ans.append(str(distance[b[i] - 1]))\n    print(' '.join(ans))", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output1.txt', 'w')\nfrom heapq import heappop, heappush, heapify\nfrom math import ceil\nmaxi = 2 * pow(10, 9)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    src = list(map(int, input().split()))\n    dest = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        d[i] = 0\n    for i in range(1, n):\n        if src[i] == 0:\n            d[i] = maxi\n    end = -1 * maxi\n    start = end\n    for i in range(n):\n        if src[i] == 1:\n            end = i\n        if end != start:\n            if not src[i]:\n                d[i] = min(d[i], i - end)\n    end = -1 * maxi\n    for i in range(n - 1, -1, -1):\n        if src[i] == 2:\n            start = i\n        if start != end:\n            if not src[i]:\n                d[i] = min(d[i], start - i)\n    for i in range(m):\n        if d[dest[i] - 1] == maxi:\n            print(-1, end=' ')\n        else:\n            print(d[dest[i] - 1], end=' ')\n    print()", "import sys\nfrom sys import stdin, stdout\n\ndef strictlyGreater(array, number, start, end):\n    ans = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == number:\n            ans = mid\n        if array[mid] < number:\n            start = mid + 1\n        else:\n            ans = mid\n            end = mid - 1\n    return ans\n\ndef strictlyLess(array, number, start, end):\n    ans = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if array[mid] == number:\n            ans = mid\n        if array[mid] > number:\n            end = mid - 1\n        else:\n            ans = mid\n            start = mid + 1\n    return ans\nt = int(stdin.readline())\nfor i in range(t):\n    (n, m) = map(int, stdin.readline().split())\n    trains = list(map(int, stdin.readline().split()))\n    destinations = list(map(int, stdin.readline().split()))\n    right = []\n    left = []\n    for j in range(n):\n        if trains[j] == 1:\n            right.append(j + 1)\n        if trains[j] == 2:\n            left.append(j + 1)\n    for station in destinations:\n        if station == 1:\n            ans = 0\n        else:\n            if len(left) > 0 and station > left[len(left) - 1]:\n                shortestFromLeft = -1\n            else:\n                shortestFromLeft = strictlyGreater(left, station, 0, len(left) - 1)\n            if len(right) > 0 and station < right[0]:\n                shortestFromRight = -1\n            else:\n                shortestFromRight = strictlyLess(right, station, 0, len(right) - 1)\n            if shortestFromRight != -1:\n                shortestFromRight = station - right[shortestFromRight]\n            else:\n                shortestFromRight = sys.maxsize\n            if shortestFromLeft != -1:\n                shortestFromLeft = left[shortestFromLeft] - station\n            else:\n                shortestFromLeft = sys.maxsize\n            ans = min(shortestFromLeft, shortestFromRight)\n            if ans == sys.maxsize:\n                ans = -1\n        print(ans, end=' ')\n    print()", "t = int(input())\nfor t in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    right = [-1] * n\n    left = [-1] * n\n    ans = [0] * n\n    final = []\n    cntl = 0\n    cntr = 0\n    for i in range(n):\n        if a[i] == 1:\n            left[i] = 0\n            cntl = 1\n        elif cntl >= 1:\n            left[i] = cntl\n            cntl += 1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            right[i] = 0\n            cntr = 1\n        elif cntr >= 1:\n            right[i] = cntr\n            cntr += 1\n    for i in range(1, n):\n        ans[i] = min(left[i], right[i])\n        if ans[i] == -1:\n            ans[i] = max(left[i], right[i])\n    for destination in b:\n        final.append(ans[destination - 1])\n    print(*final)", "def BSCeil(ar, key):\n    first = 0\n    last = len(ar) - 1\n    ans = -1\n    while first <= last:\n        mid = (first + last) // 2\n        if ar[mid] >= key:\n            ans = ar[mid]\n            last = mid - 1\n        else:\n            first = mid + 1\n    return ans\n\ndef BSFloor(ar, key):\n    first = 0\n    last = len(ar) - 1\n    ans = -1\n    while first <= last:\n        mid = (first + last) // 2\n        if ar[mid] <= key:\n            ans = ar[mid]\n            first = mid + 1\n        else:\n            last = mid - 1\n    return ans\nt = int(input())\nfor t_cases in range(t):\n    (n, m) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    idx1s = []\n    idx2s = []\n    for i in range(n):\n        if A[i] == 1:\n            idx1s.append(i)\n        if A[i] == 2:\n            idx2s.append(i)\n    for i in B:\n        if A[i - 1] != 0 or i == 1:\n            print('0', end=' ')\n            continue\n        x = -1\n        y = -1\n        ans = []\n        if len(idx1s) != 0:\n            x = BSFloor(idx1s, i - 1)\n            if x != -1:\n                ans.append(abs(i - 1 - x))\n        if len(idx2s) != 0:\n            y = BSCeil(idx2s, i - 1)\n            if y != -1:\n                ans.append(abs(y - i + 1))\n        if x != -1 or y != -1:\n            print(min(ans), end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mp = {}\n    max = 10 ** 9\n    for i in range(n):\n        if i == 0:\n            mp[i] = 0\n        elif a[i] != 0:\n            mp[i] = 0\n        else:\n            mp[i] = max\n    right = -1\n    for i in range(n):\n        if a[i] == 1:\n            right = i\n        if right != -1:\n            if a[i] == 0:\n                mp[i] = min(mp[i], i - right)\n    left = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            left = i\n        if left != -1:\n            if a[i] == 0:\n                mp[i] = min(mp[i], left - i)\n    arr = []\n    for i in range(m):\n        j = b[i] - 1\n        if mp[j] != max:\n            arr.append(mp[j])\n        else:\n            arr.append(-1)\n    print(*arr)", "def main():\n    L = 1000000009\n    for _ in range(int(input())):\n        (N, M) = map(int, input().split())\n        A = list(map(int, input().split()))\n        B = list(map(int, input().split()))\n        solution = [L] * N\n        for i in range(N):\n            if i == 0:\n                solution[i] = 0\n            elif A[i] != 0:\n                solution[i] = 0\n            else:\n                solution[i] = L\n        right = -1\n        for i in range(N):\n            if A[i] == 1:\n                right = i\n            if right != -1 and A[i] == 0:\n                solution[i] = min(i - right, solution[i])\n        left = -1\n        for i in range(N - 1, -1, -1):\n            if A[i] == 2:\n                left = i\n            if left != -1 and A[i] == 0:\n                solution[i] = min(left - i, solution[i])\n        for i in range(M):\n            j = B[i] - 1\n            if solution[j] == L:\n                print(-1, end=' ')\n            else:\n                print(solution[j], end=' ')\n        print()\nmain()", "import sys\nfrom sys import stdin, stdout\nt = int(stdin.readline())\nfor i in range(t):\n    (n, m) = map(int, stdin.readline().split())\n    trains = list(map(int, stdin.readline().split()))\n    destinations = list(map(int, stdin.readline().split()))\n    l2r = [-1 for i in range(n)]\n    r2l = l2r[:]\n    time = -1\n    for i in range(n):\n        if trains[i] == 1:\n            time = 0\n        l2r[i] = time\n        if time != -1:\n            time += 1\n    time = -1\n    for i in range(n - 1, -1, -1):\n        if trains[i] == 2:\n            time = 0\n        r2l[i] = time\n        if time != -1:\n            time += 1\n    shortestTimes = [-1 for i in range(n)]\n    for i in range(n):\n        minTime = min(l2r[i], r2l[i])\n        maxTime = max(l2r[i], r2l[i])\n        if minTime == -1:\n            shortestTimes[i] = maxTime\n        else:\n            shortestTimes[i] = minTime\n    shortestTimes[0] = 0\n    for i in range(m):\n        print(shortestTimes[destinations[i] - 1], end=' ')\n    print()", "import sys\nfrom sys import stdin, stdout\nt = int(stdin.readline())\nfor i in range(t):\n    (n, m) = map(int, stdin.readline().split())\n    trains = list(map(int, stdin.readline().split()))\n    destinations = list(map(int, stdin.readline().split()))\n    station = [(sys.maxsize, sys.maxsize) for x in range(n)]\n    right = []\n    left = []\n    for j in range(n):\n        if trains[j] == 1:\n            right.append(j + 1)\n        if trains[j] == 2:\n            left.append(j + 1)\n    r = 0\n    while r < len(right):\n        x = right[r]\n        station[x - 1] = (0, 0)\n        x += 1\n        if r == len(right) - 1:\n            value = n - right[r]\n        else:\n            value = right[r + 1] - right[r] - 1\n        for r1 in range(value):\n            (leftD, rightD) = station[x - 1]\n            station[x - 1] = (leftD, x - right[r])\n            x += 1\n        r += 1\n    l = 0\n    while l < len(left):\n        y = left[l]\n        station[y - 1] = (0, 0)\n        y -= 1\n        if l == 0:\n            value = left[l] - 1\n        else:\n            value = left[l] - left[l - 1] - 1\n        for l1 in range(value):\n            (leftD, rightD) = station[y - 1]\n            station[y - 1] = (left[l] - y, rightD)\n            y -= 1\n        l += 1\n    for d in destinations:\n        (leftD, rightD) = station[d - 1]\n        ans = min(leftD, rightD)\n        if ans == sys.maxsize:\n            ans = -1\n        if d == 1:\n            ans = 0\n        print(ans, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    n += 1\n    a = list(map(int, input().split()))\n    a = [0] + a\n    b = list(map(int, input().split()))\n    longg = 10000000000\n    d = [longg for i in range(n)]\n    l = -1\n    for i in range(n):\n        if a[i] == 1:\n            l = i\n        if l != -1:\n            d[i] = i - l\n    l = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            l = i\n        if l != -1 and d[i] > l - i:\n            d[i] = l - i\n    for i in b:\n        if i == 1:\n            print(0)\n        else:\n            print(d[i] if d[i] != longg else -1, end=' ')\n    print()", "from bisect import bisect_left, bisect\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    pas = list(map(int, input().split()))\n    left = []\n    left.append(float('inf'))\n    left.append(-float('inf'))\n    right = []\n    right.append(float('inf'))\n    right.append(-float('inf'))\n    for i in range(n):\n        if arr[i] == 1:\n            right.append(i + 1)\n        elif arr[i] == 2:\n            left.append(i + 1)\n    right.sort()\n    left.sort()\n    ans = []\n    for i in range(m):\n        val = pas[i]\n        r = bisect(right, val)\n        l = bisect_left(left, val)\n        if val == 1:\n            ans.append(0)\n        else:\n            a = min(abs(right[r - 1] - val), abs(left[l] - val))\n            if a == float('inf'):\n                ans.append(-1)\n            else:\n                ans.append(a)\n    print(*ans)", "def binary_search(arr, value, side):\n    if len(arr) == 0:\n        return -1\n    if side == 1:\n        start = 0\n        end = len(arr) - 1\n        result = -1\n        while start <= end:\n            mid = start + (end - start) // 2\n            if arr[mid] >= value:\n                result = arr[mid]\n                end = mid - 1\n            else:\n                start = mid + 1\n        if result == -1:\n            return -1\n        else:\n            return result - value\n    else:\n        start = 0\n        end = len(arr) - 1\n        result = -1\n        while start <= end:\n            mid = start + (end - start) // 2\n            if arr[mid] <= value:\n                result = arr[mid]\n                start = mid + 1\n            else:\n                end = mid - 1\n        if result == -1:\n            return -1\n        return value - result\n\ndef solve(n, m, s, p):\n    left_going_trains = []\n    right_going_trains = []\n    for i in range(n):\n        if s[i] == 1:\n            right_going_trains.append(i + 1)\n        elif s[i] == 2:\n            left_going_trains.append(i + 1)\n    for i in range(m):\n        if p[i] == 1:\n            p[i] = 0\n        elif s[p[i] - 1]:\n            p[i] = 0\n        else:\n            ans1 = binary_search(left_going_trains, p[i], 1)\n            ans2 = binary_search(right_going_trains, p[i], 0)\n            if ans1 == -1 and ans2 == -1:\n                p[i] = -1\n            elif ans1 == -1:\n                p[i] = ans2\n            elif ans2 == -1:\n                p[i] = ans1\n            else:\n                p[i] = min(ans1, ans2)\nvaibhav = input\nfor _ in range(int(vaibhav())):\n    (n, m) = map(int, vaibhav().split())\n    s = tuple(map(int, vaibhav().split()))\n    p = list(map(int, vaibhav().split()))\n    solve(n, m, s, p)\n    print(*p)", "t = int(input())\nfor i in range(t):\n    (n, m) = [int(n) for n in input().split()]\n    arr = [int(item) for item in input().split()]\n    brr = [int(item) for item in input().split()]\n    last = -1\n    crr = [0] * n\n    for i in range(n):\n        if arr[i] == 1:\n            last = i\n        else:\n            if last == -1:\n                crr[i] = -1\n            if last != -1:\n                crr[i] = i - last\n    last = -1\n    drr = [0] * n\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 2:\n            last = i\n        else:\n            if last == -1:\n                drr[i] = -1\n            if last != -1:\n                drr[i] = last - i\n    for i in range(m):\n        k = brr[i] - 1\n        if k == 0:\n            print(0, end=' ')\n            continue\n        if arr[k] != 0:\n            print(0, end=' ')\n        elif crr[k] >= 0 and drr[k] >= 0:\n            print(min(crr[k], drr[k]), end=' ')\n        else:\n            print(max(crr[k], drr[k]), end=' ')\n    print(' ')", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfrom bisect import bisect_left\nfrom sys import stdin, stdout\nfrom math import inf\nread_line = lambda : stdin.readline().strip()\noutput_line = lambda x: stdout.write(x)\nread_numbers = lambda : list(map(int, read_line().split()))\n\ndef find_min_dist(A, ones, twos, ones_set, twos_set, v):\n    if v == 0 or v in ones_set or v in twos_set:\n        return 0\n    left = bisect_left(ones, v - 1)\n    if left == len(ones) or ones[left] >= v:\n        left -= 1\n    if left == -1 or A[ones[left]] != 1 or ones[left] >= v:\n        left = inf\n    else:\n        left = ones[left]\n    right = bisect_left(twos, v + 1)\n    if right == len(twos):\n        right = -1\n    if right == -1 or A[twos[right]] != 2 or twos[right] <= v:\n        right = inf\n    else:\n        right = twos[right]\n    if left == right == inf:\n        return -1\n    return min(abs(v - left), abs(right - v))\n\ndef solve(A, B):\n    ones = [i for (i, v) in enumerate(A) if v == 1]\n    twos = [i for (i, v) in enumerate(A) if v == 2]\n    ones_set = set(ones)\n    twos_set = set(twos)\n    params = [A, ones, twos, ones_set, twos_set]\n    solution = [str(find_min_dist(*params, b - 1)) for b in B]\n    return ' '.join(solution) + '\\n'\n\ndef main():\n    for _ in range(int(input())):\n        (N, M) = read_numbers()\n        A = read_numbers()[:N]\n        B = read_numbers()[:M]\n        answer = solve(A, B)\n        output_line(answer)\nmain()", "for iii in range(int(input())):\n    (n, m) = map(int, input().split())\n    q = list(map(int, input().split()))\n    w = [999999 for i in range(n)]\n    found = -1\n    ind = 0\n    for i in range(n):\n        if q[i] == 1:\n            ind = i\n            found = 1\n        if found == -1:\n            continue\n        w[i] = i - ind\n    ind = 0\n    found = -1\n    for i in range(n - 1, -1, -1):\n        if q[i] == 2:\n            ind = i\n            found = 1\n        if found == -1:\n            continue\n        w[i] = min(w[i], ind - i)\n    e = []\n    e = list(map(int, input().split()))\n    r = []\n    for i in e:\n        if i == 1:\n            print(0, end=' ')\n            continue\n        j = i - 1\n        if w[j] == 999999:\n            print(-1, end=' ')\n        else:\n            print(w[j], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    le = -1\n    for i in range(n):\n        if A[i] == 1:\n            A[i] = 3\n            st = i + 1\n            while st < n and A[st] != 1:\n                if A[st] == 0:\n                    A[st] = st + 3 - i\n                st = st + 1\n        elif A[i] == 2:\n            A[i] = 3\n            st = i - 1\n            while st > le:\n                if A[st] == 0 or A[st] > i - st + 3:\n                    A[st] = i - st + 3\n                st = st - 1\n            le = i\n    for i in range(n):\n        if A[i] == 0:\n            A[i] = -1\n        else:\n            A[i] -= 3\n    A[0] = 0\n    for i in B:\n        print(A[i - 1], end=' ')\n    print('')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    max = 1000000000\n    mp = []\n    for i in range(n):\n        if i == 0:\n            mp.append(0)\n        elif a[i] != 0:\n            mp.append(0)\n        else:\n            mp.append(max)\n    ri = -1\n    for i in range(n):\n        if a[i] == 1:\n            ri = i\n        if ri != -1:\n            if a[i] == 0:\n                mp[i] = min(mp[i], i - ri)\n    li = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            li = i\n        if li != -1:\n            if a[i] == 0:\n                mp[i] = min(mp[i], li - i)\n    for i in range(m):\n        j = b[i] - 1\n        if mp[j] != max:\n            print(mp[j], end=' ')\n        else:\n            print(-1, end=' ')\n    print('')", "T = int(input())\n\ndef optimumtime(a, b):\n    if a == -1:\n        return b\n    elif b == -1:\n        return a\n    return min(a, b)\nfor _ in range(T):\n    (N, M) = map(int, input().strip().split())\n    A = list(map(int, input().strip().split()))\n    B = list(map(int, input().strip().split()))\n    A1 = []\n    A2 = []\n    count1 = -1\n    count2 = -1\n    for i in range(N):\n        cur = A[i]\n        revcur = A[N - 1 - i]\n        if cur == 1:\n            count1 = 0\n        if revcur == 2:\n            count2 = 0\n        A1.append(count1)\n        A2.append(count2)\n        if count1 != -1:\n            count1 += 1\n        if count2 != -1:\n            count2 += 1\n    A2.reverse()\n    for (idx, passenger) in enumerate(B):\n        if passenger == 1:\n            print('0', end=' ')\n            continue\n        desttime = optimumtime(A1[passenger - 1], A2[passenger - 1])\n        print(desttime, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    cases = list(map(int, input().split()))\n    (left, right) = ([], [])\n    (one, two) = (-1, -1)\n    max = 1000000000\n    for i in range(n):\n        if lst[i] == 1:\n            right.append(0)\n            one = i\n        elif one == -1:\n            right.append(max)\n        elif lst[i] == 2:\n            right.append(0)\n        else:\n            right.append(i - one)\n    for i in range(n - 1, -1, -1):\n        if lst[i] == 2:\n            left.append(0)\n            two = i\n        elif two == -1 and lst[i] == 0:\n            left.append(max)\n        elif lst[i] == 1:\n            left.append(0)\n        else:\n            left.append(two - i)\n    left.reverse()\n    for i in range(m):\n        curr = cases[i]\n        if lst[0] != 0 and lst[curr - 1] != 0:\n            print('0', end=' ')\n        elif curr == 1:\n            print('0', end=' ')\n        else:\n            ans = 0\n            if right[curr - 1] == max and left[curr - 1] == max:\n                ans = -1\n            else:\n                ans = min(right[curr - 1], left[curr - 1])\n            print(ans, end=' ')\n    print()", "t = int(input())\nwhile t > 0:\n    minval = float('inf')\n    maxval = float('-inf')\n    (n, m) = map(int, input().split())\n    v = []\n    q = []\n    one = []\n    two = []\n    v = list(map(int, input().split()))\n    q = list(map(int, input().split()))\n    for i in range(n):\n        one.append(0)\n    for i in range(n):\n        two.append(0)\n    for i in range(n - 1, -1, -1):\n        if v[i] == 2:\n            minval = min(minval, i)\n        elif v[i] == 0:\n            if minval != float('inf'):\n                one[i] = minval - i\n            else:\n                one[i] = -1\n    for i in range(n):\n        if v[i] == 1:\n            maxval = max(maxval, i)\n        elif v[i] == 0:\n            if maxval != float('-inf'):\n                two[i] = i - maxval\n            else:\n                two[i] = -1\n    for i in range(m):\n        if q[i] == 1:\n            print(0, end=' ')\n            continue\n        if v[q[i] - 1] != 0:\n            print(0, end=' ')\n        elif one[q[i] - 1] >= 0 and two[q[i] - 1] >= 0:\n            print(min(one[q[i] - 1], two[q[i] - 1]), end=' ')\n        else:\n            print(max(one[q[i] - 1], two[q[i] - 1]), end=' ')\n    print()\n    t -= 1", "try:\n    t = int(input())\n    for _ in range(t):\n        n = input()\n        nl = list(map(int, input().strip().split()))\n        ml = list(map(int, input().strip().split()))\n        nla = []\n        x = 'a'\n        for i in range(len(nl)):\n            if nl[i] == 1:\n                x = i\n            if x == 'a':\n                nla.append(999999)\n            else:\n                nla.append(i - x)\n        nra = []\n        nl.reverse()\n        x = 'a'\n        for i in range(len(nl)):\n            if nl[i] == 2:\n                x = i\n            if x == 'a':\n                nra.append(999999)\n            else:\n                nra.append(i - x)\n        nra.reverse()\n        nl.reverse()\n        ans = []\n        for i in ml:\n            if i == 1:\n                ans.append(0)\n            elif nl[i - 1] > 0:\n                ans.append(0)\n            else:\n                k = min(nla[i - 1], nra[i - 1])\n                if k == 999999:\n                    ans.append(-1)\n                else:\n                    ans.append(k)\n        y = ''\n        for i in ans:\n            y = y + ' ' + str(i)\n        print(y[1:])\nexcept:\n    pass", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    maxi = 300000.0 + 5\n    t = [0] * n\n    low = -1\n    high = -1\n    for i in range(n):\n        if i == 0:\n            t[i] = 0\n        elif a[i] != 0:\n            t[i] = 0\n        else:\n            t[i] = maxi\n    for i in range(n):\n        if a[i] == 1:\n            high = i\n        if high != -1:\n            if a[i] == 0:\n                t[i] = min(t[i], i - high)\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            low = i\n        if low != -1:\n            if a[i] == 0:\n                t[i] = min(t[i], low - i)\n    for i in range(m):\n        j = b[i] - 1\n        if t[j] != maxi:\n            print(t[j])\n        else:\n            print(-1, end=' ')", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    maxi = 300000.0 + 5\n    t = [0] * n\n    low = -1\n    high = -1\n    for i in range(n):\n        if i == 0:\n            t[i] = 0\n        elif a[i] != 0:\n            t[i] = 0\n        else:\n            t[i] = maxi\n    for i in range(n):\n        if a[i] == 1:\n            high = i\n        if high != -1:\n            if a[i] == 0:\n                t[i] = min(t[i], i - high)\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            low = i\n        if low != -1:\n            if a[i] == 0:\n                t[i] = min(t[i], low - i)\n    for i in range(m):\n        j = b[i] - 1\n        if t[j] != maxi:\n            print(t[j])\n        else:\n            print(-1, end=' ')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.insert(0, 0)\n    b.insert(0, 0)\n    fleft = [0 for i in range(n + 1)]\n    fright = [0 for i in range(n + 1)]\n    diffrem = [0 for i in range(n + 1)]\n    flag = 1000000\n    for i in range(1, n + 1):\n        if a[i] == 1:\n            fleft[i] = i\n            flag = i\n        else:\n            fleft[i] = flag\n    flag = 1000000\n    for i in range(n, 0, -1):\n        if a[i] == 2:\n            fright[i] = i\n            flag = i\n        else:\n            fright[i] = flag\n    for i in range(1, n + 1):\n        diffrem[i] = min(abs(i - fleft[i]), abs(i - fright[i]))\n    for i in range(1, m + 1):\n        if b[i] == 1:\n            print(0, end=' ')\n        elif diffrem[b[i]] == abs(1000000 - b[i]):\n            print(-1, end=' ')\n        else:\n            print(diffrem[b[i]], end=' ')\n    print()", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    l = []\n    count = -1\n    for i in n:\n        if i == 1:\n            l.append(0)\n            count = 0\n            count = count + 1\n        elif count == -1:\n            l.append(1000000)\n        else:\n            l.append(count)\n            count = count + 1\n    count1 = -1\n    l1 = []\n    for j in range(N - 1, -1, -1):\n        if n[j] == 2:\n            l1.append(0)\n            count1 = 0\n            count1 = count1 + 1\n        elif count1 == -1:\n            l1.append(1000000)\n        else:\n            l1.append(count1)\n            count1 = count1 + 1\n    l1.reverse()\n    ans = []\n    for k in range(N):\n        if l[k] <= l1[k]:\n            ans.append(l[k])\n        elif l[k] == 1000000 and l1[k] == 1000000:\n            ans.append(-1)\n        else:\n            ans.append(l1[k])\n    for z in m:\n        if z == 1:\n            print(0)\n        elif ans[z - 1] == 1000000:\n            print(-1, end=' ')\n        else:\n            print(ans[z - 1], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    max = 10 ** 9\n    newArray = [None] * n\n    newArray[0] = 0\n    for i in range(1, n):\n        if a[i] != 0:\n            newArray[i] = 0\n        else:\n            newArray[i] = max\n    r = -1\n    for i in range(n):\n        if a[i] == 1:\n            r = i\n        if r != -1:\n            if a[i] == 0:\n                newArray[i] = min(newArray[i], i - r)\n    l = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            l = i\n        if l != -1:\n            if a[i] == 0:\n                newArray[i] = min(newArray[i], l - i)\n    for i in range(m):\n        x = b[i] - 1\n        if newArray[x] != max:\n            print(newArray[x], end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    lside = [float('-inf')]\n    rside = [float('inf')]\n    for x in range(len(A)):\n        if A[x] == 1:\n            lside.append(x)\n        else:\n            lside.append(lside[-1])\n    for x in range(len(A) - 1, -1, -1):\n        if A[x] == 2:\n            rside.append(x)\n        else:\n            rside.append(rside[-1])\n    rside.reverse()\n    rside.pop()\n    lside = lside[1:]\n    ans = []\n    for dest in B:\n        dest -= 1\n        if A[dest] != 0 or dest == 0:\n            ans.append('0')\n        else:\n            neaanst_lside = dest - lside[dest]\n            neaanst_rside = rside[dest] - dest\n            dist = min(neaanst_lside, neaanst_rside)\n            if dist == float('inf') or dist == float('-inf'):\n                ans.append('-1')\n            else:\n                ans.append(str(dist))\n    print(' '.join(ans))", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split(' '))\n    A = list(map(int, input().split(' ')[:N]))\n    B = list(map(int, input().split(' ')[:M]))\n    la = [None] * N\n    la[0] = 0\n    mx = 10 ** 9\n    for i in range(1, N):\n        if A[i] != 0:\n            la[i] = 0\n        else:\n            la[i] = mx\n    right = -1\n    for i in range(N):\n        if A[i] == 1:\n            right = i\n        if right != -1:\n            if A[i] == 0:\n                la[i] = min(la[i], i - right)\n    left = -1\n    for i in range(N - 1, 0, -1):\n        if A[i] == 2:\n            left = i\n        if left != -1:\n            if A[i] == 0:\n                la[i] = min(la[i], left - i)\n    for i in range(M):\n        x = B[i] - 1\n        if la[x] != mx:\n            print(la[x], end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "try:\n    t = int(input())\n    for _ in range(t):\n        n = input()\n        nl = list(map(int, input().strip().split()))\n        ml = list(map(int, input().strip().split()))\n        nla = []\n        x = 'a'\n        for i in range(len(nl)):\n            if nl[i] == 1:\n                x = i\n            if x == 'a':\n                nla.append(999999)\n            else:\n                nla.append(i - x)\n        nra = []\n        nl.reverse()\n        x = 'a'\n        for i in range(len(nl)):\n            if nl[i] == 2:\n                x = i\n            if x == 'a':\n                nra.append(999999)\n            else:\n                nra.append(i - x)\n        nra.reverse()\n        nl.reverse()\n        ans = []\n        for i in ml:\n            if i == 1:\n                ans.append(0)\n            elif nl[i - 1] > 0:\n                ans.append(0)\n            else:\n                k = min(nla[i - 1], nra[i - 1])\n                if k == 999999:\n                    ans.append(-1)\n                else:\n                    ans.append(k)\n        y = ''\n        for i in ans:\n            y = y + ' ' + str(i)\n        print(y[1:])\nexcept:\n    pass", "for t in range(int(input())):\n    t1 = -1\n    t2 = -1\n    ma = int(1000000000.0)\n    (n, m) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    mp = {}\n    for i in range(n):\n        if i == 0:\n            mp[i] = 0\n        elif arr1[i] != 0:\n            mp[i] = 0\n        else:\n            mp[i] = ma\n    for i in range(n):\n        k = arr1[i]\n        if k == 1:\n            t1 = i\n        if t1 != -1:\n            if k == 0:\n                mp[i] = min(mp[i], i - t1)\n    for i in range(n - 1, -1, -1):\n        k = arr1[i]\n        if k == 2:\n            t2 = i\n        if t2 != -1:\n            if arr1[i] == 0:\n                mp[i] = min(mp[i], t2 - i)\n    ans = []\n    for i in range(m):\n        if mp[arr2[i] - 1] != ma:\n            ans.append(str(mp[arr2[i] - 1]))\n        else:\n            ans.append(str(-1))\n    print(' '.join(ans))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    p = [0] * n\n    q = [0] * n\n    for i in range(n):\n        if a[i] == 1:\n            p[i] = 1\n        else:\n            p[i] = 0\n    for i in range(n):\n        if a[i] == 2:\n            q[i] = 2\n        else:\n            q[i] = 0\n    s = [-3] * n\n    for i in range(n):\n        if a[i] == 1:\n            s[i] = 0\n    s[0] = 0\n    for i in range(1, n):\n        if s[i] == -3:\n            if i != 1:\n                if s[i - 1] == -1:\n                    s[i] = -1\n                else:\n                    s[i] = s[i - 1] + 1\n            elif a[0] == 1:\n                s[i] = 1\n            else:\n                s[i] = -1\n    t = [-3] * n\n    for i in range(n):\n        if a[i] == 2:\n            t[i] = 0\n    t[0] = 0\n    if a[n - 1] == 0 or a[n - 1] == 1:\n        t[n - 1] = -1\n    else:\n        t[n - 1] = 0\n    for i in range(n - 2, 0, -1):\n        if t[i] == -3:\n            if t[i + 1] == -1:\n                t[i] = -1\n            else:\n                t[i] = t[i + 1] + 1\n    for i in range(n):\n        if a[i] == 1:\n            t[i] = 0\n    for i in range(n):\n        if a[i] == 2:\n            s[i] = 0\n    v = [-3] * n\n    for i in range(n):\n        if a[i] != 0:\n            v[i] = 0\n    for i in range(n):\n        if v[i] == -3:\n            if s[i] == -1 and t[i] == -1:\n                v[i] = -1\n            elif s[i] != -1 and t[i] == -1:\n                v[i] = s[i]\n            elif s[i] == -1 and t[i] != -1:\n                v[i] = t[i]\n            else:\n                v[i] = min(s[i], t[i])\n    for i in range(m):\n        r = b[i] - 1\n        print(v[r], end=' ')\n    print()", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    ans = [None] * n\n    ans[0] = 0\n    max = 10 ** 9\n    for i in range(1, n):\n        if a[i] != 0:\n            ans[i] = 0\n        else:\n            ans[i] = max\n    j = -1\n    for i in range(n):\n        if a[i] == 1:\n            j = i\n        if j != -1:\n            if a[i] == 0:\n                ans[i] = min(ans[i], i - j)\n    j = -1\n    for i in range(n - 1, 0, -1):\n        if a[i] == 2:\n            j = i\n        if j != -1:\n            if a[i] == 0:\n                ans[i] = min(ans[i], j - i)\n    for i in range(m):\n        j = b[i] - 1\n        if ans[j] == max:\n            print(-1, end=' ')\n        else:\n            print(ans[j], end=' ')\n    print()", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, m) = (int(x) for x in input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    (ls, rs) = ([], [])\n    for (i, x) in enumerate(a):\n        if x == 1:\n            rs.append(i + 1)\n        elif x == 2:\n            ls.append(i + 1)\n    for x in b:\n        (t, u) = (bisect_left(rs, x), bisect_left(ls, x))\n        st = set()\n        if rs:\n            if t == 0 and rs[t] == x:\n                st.add(0)\n            if t != 0 and t < len(rs):\n                st.add(0 if rs[t] == x else x - rs[t - 1])\n            elif t:\n                st.add(x - rs[t - 1])\n        if ls:\n            if u < len(ls):\n                st.add(ls[u] - x)\n        if x == 1:\n            print(0, end=' ')\n        elif st:\n            print(min(st), end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "testcasebolo = int(input())\nfor _ in range(testcasebolo):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    max = 10 ** 9\n    kuchbhimatlabkuchbhi = [None] * n\n    kuchbhimatlabkuchbhi[0] = 0\n    for i in range(1, n):\n        if a[i] != 0:\n            kuchbhimatlabkuchbhi[i] = 0\n        else:\n            kuchbhimatlabkuchbhi[i] = max\n    r = -1\n    for i in range(n):\n        if a[i] == 1:\n            r = i\n        if r != -1:\n            if a[i] == 0:\n                kuchbhimatlabkuchbhi[i] = min(kuchbhimatlabkuchbhi[i], i - r)\n    l = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            l = i\n        if l != -1:\n            if a[i] == 0:\n                kuchbhimatlabkuchbhi[i] = min(kuchbhimatlabkuchbhi[i], l - i)\n    for i in range(m):\n        x = b[i] - 1\n        if kuchbhimatlabkuchbhi[x] != max:\n            print(kuchbhimatlabkuchbhi[x], end=' ')\n        else:\n            print(-1, end=' ')\n    print()", "tc = int(input())\nfor _ in range(tc):\n    (n, m) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    answer = list(map(int, input().split(' ')))\n    left = [0] * n\n    right = [0] * n\n    mn = -1\n    mn = 'OUT'\n    for i in range(n):\n        if arr[i] == 1:\n            left[i] = i\n            mn = i\n        elif arr[i] == 2:\n            left[i] = i\n        else:\n            left[i] = mn\n    mx = 'OUT'\n    for i in range(n - 1, -1, -1):\n        if arr[i] == 1:\n            right[i] = i\n        elif arr[i] == 2:\n            right[i] = i\n            mx = i\n        else:\n            right[i] = mx\n    for item in answer:\n        item = item - 1\n        if item == 0:\n            print(0, end=' ')\n        elif arr[item] == 1 or arr[item] == 2:\n            print(0, end=' ')\n        elif left[item] == 'OUT' and right[item] == 'OUT':\n            print('-1', end=' ')\n        elif left[item] == 'OUT':\n            temp = abs(right[item] - item)\n            print(temp, end=' ')\n        elif right[item] == 'OUT':\n            temp = abs(left[item] - item)\n            print(temp, end=' ')\n        else:\n            temp = min(abs(left[item] - item), abs(right[item] - item))\n            print(temp, end=' ')\n    print()", "import sys\nimport time\n\ndef timebata():\n    return time.perf_counter()\n\ndef lis_in():\n    a = list(map(int, input().split()))\n    return a\n\ndef len_arr(a):\n    return len(a)\n\ndef fir_0(arr):\n    arr[0] = 0\n    return arr\n\ndef check_zero(a):\n    if a == 0:\n        return True\n    else:\n        return False\n\ndef check_one(arr, i):\n    if arr[i] == 1:\n        return True\n    else:\n        return False\n\ndef check_m_one(a):\n    if a == -1:\n        return True\n    return False\n\ndef check_two(arr, i):\n    if arr[i] == 2:\n        return True\n    else:\n        return False\nfor pp in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = lis_in()\n    x1 = timebata()\n    query = lis_in()\n    nn = len_arr(arr)\n    left_array = []\n    for i in range(nn):\n        left_array.append(-1)\n    left_array = fir_0(left_array)\n    currmax = -1\n    for i in range(nn):\n        if check_one(arr, i):\n            currmax = i\n        if check_m_one(currmax):\n            left_array[i] = -1\n        if check_m_one(currmax) == False:\n            left_array[i] = i - currmax\n    right_array = []\n    for i in range(nn):\n        right_array.append(-1)\n    currmin = -1\n    for i in range(len(arr) - 1, -1, -1):\n        if check_two(arr, i):\n            currmin = i\n        if check_m_one(currmin):\n            right_array[i] = -1\n        if check_m_one(currmin) == False:\n            right_array[i] = currmin - i\n    x5 = timebata()\n    result = []\n    for q in query:\n        x2 = timebata()\n        q -= 1\n        if check_zero(q):\n            result.append(0)\n            continue\n        if right_array[q] == -1:\n            lulu = left_array[q]\n            result.append(lulu)\n        elif left_array[q] == -1:\n            lulu = right_array[q]\n            result.append(lulu)\n        else:\n            lulu = min(right_array[q], left_array[q])\n            x3 = timebata()\n            result.append(lulu)\n    print(*result, sep=' ')", "import sys\nimport time\n\ndef timebata():\n    return time.perf_counter()\n\ndef lis_in():\n    a = list(map(int, input().split()))\n    return a\n\ndef len_arr(a):\n    return len(a)\n\ndef fir_0(arr):\n    arr[0] = 0\n    return arr\n\ndef check_zero(a):\n    if a == 0:\n        return True\n    else:\n        return False\n\ndef check_one(arr, i):\n    if arr[i] == 1:\n        return True\n    else:\n        return False\n\ndef check_m_one(a):\n    if a == -1:\n        return True\n    return False\n\ndef check_two(arr, i):\n    if arr[i] == 2:\n        return True\n    else:\n        return False\nfor pp in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr = lis_in()\n    query = lis_in()\n    nn = len_arr(arr)\n    left_array = []\n    for i in range(nn):\n        left_array.append(-1)\n    left_array = fir_0(left_array)\n    currmax = -1\n    for i in range(nn):\n        if check_one(arr, i):\n            currmax = i\n        if check_m_one(currmax):\n            left_array[i] = -1\n        if check_m_one(currmax) == False:\n            left_array[i] = i - currmax\n    right_array = []\n    for i in range(nn):\n        right_array.append(-1)\n    currmin = -1\n    for i in range(len(arr) - 1, -1, -1):\n        if check_two(arr, i):\n            currmin = i\n        if check_m_one(currmin):\n            right_array[i] = -1\n        if check_m_one(currmin) == False:\n            right_array[i] = currmin - i\n    result = []\n    for q in query:\n        q -= 1\n        if check_zero(q):\n            result.append(0)\n            continue\n        if right_array[q] == -1:\n            lulu = left_array[q]\n            result.append(lulu)\n        elif left_array[q] == -1:\n            lulu = right_array[q]\n            result.append(lulu)\n        else:\n            lulu = min(right_array[q], left_array[q])\n            result.append(lulu)\n    print(*result, sep=' ')", "for test in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxx = float('inf')\n    listt = dict()\n    for i in range(n):\n        if i == 0 or a[i] != 0:\n            listt[i] = 0\n        else:\n            listt[i] = maxx\n    righty = -10\n    for i in range(n):\n        if a[i] == 1:\n            righty = i\n        if righty != -10 and a[i] == 0:\n            listt[i] = min(listt[i], i - righty)\n    lefty = -10\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            lefty = i\n        if lefty != -10 and a[i] == 0:\n            listt[i] = min(listt[i], lefty - i)\n    for i in range(m):\n        if listt[b[i] - 1] != maxx:\n            print(listt[b[i] - 1], end=' ')\n        else:\n            print('-1', end=' ')\n    print()", "for test in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    maxx = float('inf')\n    listt = dict()\n    for i in range(n):\n        if i == 0 or a[i] != 0:\n            listt[i] = 0\n        else:\n            listt[i] = maxx\n    righty = -10\n    for i in range(n):\n        if a[i] == 1:\n            righty = i\n        if righty != -10 and a[i] == 0:\n            listt[i] = min(listt[i], i - righty)\n    lefty = -10\n    for i in range(n - 1, -1, -1):\n        if a[i] == 2:\n            lefty = i\n        if lefty != -10 and a[i] == 0:\n            listt[i] = min(listt[i], lefty - i)\n    for i in range(m):\n        if listt[b[i] - 1] != maxx:\n            print(listt[b[i] - 1], end=' ')\n        else:\n            print('-1', end=' ')\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    p = [0] * n\n    q = [0] * n\n    for i in range(n):\n        if a[i] == 1:\n            p[i] = 1\n        else:\n            p[i] = 0\n    for i in range(n):\n        if a[i] == 2:\n            q[i] = 2\n        else:\n            q[i] = 0\n    s = [-3] * n\n    for i in range(n):\n        if a[i] == 1:\n            s[i] = 0\n    s[0] = 0\n    for i in range(1, n):\n        if s[i] == -3:\n            if i != 1:\n                if s[i - 1] == -1:\n                    s[i] = -1\n                else:\n                    s[i] = s[i - 1] + 1\n            elif a[0] == 1:\n                s[i] = 1\n            else:\n                s[i] = -1\n    t = [-3] * n\n    for i in range(n):\n        if a[i] == 2:\n            t[i] = 0\n    t[0] = 0\n    if a[n - 1] == 0 or a[n - 1] == 1:\n        t[n - 1] = -1\n    else:\n        t[n - 1] = 0\n    for i in range(n - 2, 0, -1):\n        if t[i] == -3:\n            if t[i + 1] == -1:\n                t[i] = -1\n            else:\n                t[i] = t[i + 1] + 1\n    for i in range(n):\n        if a[i] == 1:\n            t[i] = 0\n    for i in range(n):\n        if a[i] == 2:\n            s[i] = 0\n    v = [-3] * n\n    for i in range(n):\n        if a[i] != 0:\n            v[i] = 0\n    for i in range(n):\n        if v[i] == -3:\n            if s[i] == -1 and t[i] == -1:\n                v[i] = -1\n            elif s[i] != -1 and t[i] == -1:\n                v[i] = s[i]\n            elif s[i] == -1 and t[i] != -1:\n                v[i] = t[i]\n            else:\n                v[i] = min(s[i], t[i])\n    for i in range(m):\n        r = b[i] - 1\n        print(v[r], end=' ')\n    print()"]