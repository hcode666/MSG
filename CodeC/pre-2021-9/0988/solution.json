["import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef solve():\n    n = int(input())\n    adj = [[] for i in range(n + 1)]\n    temp = [[], []]\n    vec = []\n    for i in range(0, n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    def dfs1(v, par, ct):\n        temp[ct].append(v)\n        for i in adj[v]:\n            if i == par:\n                continue\n            dfs1(i, v, ct ^ 1)\n\n    def dfs2(v, par):\n        vec.append(v)\n        for i in adj[v]:\n            if i == par:\n                continue\n            dfs2(i, v)\n    dfs1(1, 0, 0)\n    if len(temp[0]) == len(temp[1]):\n        print(1)\n        print(*temp[0])\n        print(*temp[1])\n    else:\n        print(2)\n        temp[0] = []\n        temp[1] = []\n        vec = []\n        dfs2(1, 0)\n        ct = 0\n        for i in vec:\n            temp[ct].append(i)\n            ct ^= 1\n        print(*temp[0])\n        print(*temp[1])\nT = int(input())\nfor t in range(0, T):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef solve():\n    n = int(input())\n    adj = [[] for i in range(n + 1)]\n    temp = [[], []]\n    vec = []\n    for i in range(0, n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    def dfs1(v, par, ct):\n        temp[ct].append(v)\n        for i in adj[v]:\n            if i == par:\n                continue\n            dfs1(i, v, ct ^ 1)\n\n    def dfs2(v, par):\n        vec.append(v)\n        for i in adj[v]:\n            if i == par:\n                continue\n            dfs2(i, v)\n    dfs1(1, 0, 0)\n    if len(temp[0]) == len(temp[1]):\n        print(1)\n        print(*temp[0])\n        print(*temp[1])\n    else:\n        print(2)\n        temp[0] = []\n        temp[1] = []\n        vec = []\n        dfs2(1, 0)\n        ct = 0\n        for i in vec:\n            temp[ct].append(i)\n            ct ^= 1\n        print(*temp[0])\n        print(*temp[1])\nT = int(input())\nfor t in range(0, T):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef solve():\n    n = int(input())\n    adj = [[] for i in range(n + 1)]\n    temp = [[], []]\n    vec = []\n    for i in range(0, n - 1):\n        (u, v) = map(int, input().split())\n        adj[u].append(v)\n        adj[v].append(u)\n\n    def dfs1(v, par, ct):\n        temp[ct].append(v)\n        for i in adj[v]:\n            if i == par:\n                continue\n            dfs1(i, v, ct ^ 1)\n\n    def dfs2(v, par):\n        vec.append(v)\n        for i in adj[v]:\n            if i == par:\n                continue\n            dfs2(i, v)\n    dfs1(1, 0, 0)\n    if len(temp[0]) == len(temp[1]):\n        print(1)\n        print(*temp[0])\n        print(*temp[1])\n    else:\n        print(2)\n        temp[0] = []\n        temp[1] = []\n        vec = []\n        dfs2(1, 0)\n        ct = 0\n        for i in vec:\n            temp[ct].append(i)\n            ct ^= 1\n        print(*temp[0])\n        print(*temp[1])\nT = int(input())\nfor t in range(0, T):\n    solve()", "import sys\nsys.setrecursionlimit(100000000)\nfrom collections import defaultdict\n\ndef bpdfs(a):\n    for i in graph[a]:\n        if visited[i] == False:\n            visited[i] = True\n            colour[i] = not colour[a]\n            st[colour[i]].append(i)\n            bpdfs(i)\n\ndef aldfs(a, colcurr):\n    for i in graph[a]:\n        if visited[i] == False:\n            visited[i] = True\n            colour[i] = colcurr\n            st[colour[i]].append(i)\n            colcurr = aldfs(i, not colcurr)\n    return colcurr\nt = int(input())\nwhile t:\n    t -= 1\n    graph = defaultdict(list)\n    n = int(input())\n    for i in range(n - 1):\n        (a, b) = map(int, input().strip().split())\n        graph[a].append(b)\n        graph[b].append(a)\n    visited = [False] * (n + 1)\n    a = list(graph.keys())[0]\n    visited[a] = True\n    colour = [-1 for x in range(n + 1)]\n    colour[a] = 0\n    st = [[a], []]\n    for i in graph:\n        bpdfs(i)\n    if len(st[0]) == len(st[1]):\n        k = 1\n    else:\n        k = 2\n    if k == 2:\n        visited = [False] * (n + 1)\n        a = list(graph.keys())[0]\n        visited[a] = True\n        colour = [-1 for x in range(n + 1)]\n        colour[a] = 0\n        colcurr = 1\n        st = [[a], []]\n        for i in graph:\n            colcurr = aldfs(i, colcurr)\n    print(k)\n    print(' '.join(map(str, st[0])))\n    print(' '.join(map(str, st[1])))"]