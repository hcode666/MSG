["T = int(input())\nfor i in range(T):\n    s = input()\n    r = input()\n    val = [i for i in range(len(s)) if s[i] != r[i]]\n    a = [val[i + 1] - val[i] - 1 for i in range(len(val) - 1)]\n    a.sort()\n    (k, l) = (len(val), len(val))\n    n = [k * l]\n    for i in a:\n        k -= 1\n        l += i\n        n.append(k * l)\n    print(min(n))", "T = int(input())\nfor i in range(T):\n    s = input()\n    r = input()\n    val = [i for i in range(len(s)) if s[i] != r[i]]\n    a = [val[i + 1] - val[i] - 1 for i in range(len(val) - 1)]\n    a.sort()\n    (k, l) = (len(val), len(val))\n    n = [k * l]\n    for i in a:\n        k -= 1\n        l += i\n        n.append(k * l)\n    print(min(n))", "for z in range(int(input())):\n    l = input()\n    r = input()\n    di = []\n    d = 0\n    k = 0\n    for i in range(len(l)):\n        if l[i] == r[i]:\n            d = d + 1\n        else:\n            di.append(d)\n            k = k + 1\n            d = 0\n    di = di[1:]\n    di.sort()\n    ans = k * k\n    l = k\n    for ele in di:\n        k = k - 1\n        l = l + ele\n        x = l * k\n        ans = min(x, ans)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    di = []\n    d = 0\n    k = 0\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            d = d + 1\n        else:\n            di.append(d)\n            k = k + 1\n            d = 0\n    di = di[1:]\n    di.sort()\n    ans = k * k\n    l = k\n    for ele in di:\n        k = k - 1\n        l = l + ele\n        x = l * k\n        ans = min(x, ans)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    L = []\n    a = 0\n    b = 0\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            a += 1\n        else:\n            L.append(a)\n            b += 1\n            a = 0\n    L = L[1:]\n    L.sort()\n    sol = b * b\n    a = b\n    for ele in L:\n        b = b - 1\n        a = a + ele\n        x = a * b\n        sol = min(x, sol)\n    print(sol)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    di = []\n    d = 0\n    k = 0\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            d = d + 1\n        else:\n            di.append(d)\n            k = k + 1\n            d = 0\n    di = di[1:]\n    di.sort()\n    ans = k * k\n    l = k\n    for ele in di:\n        k = k - 1\n        l = l + ele\n        x = l * k\n        ans = min(x, ans)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    s = input()\n    r = input()\n    (k, l, f) = (0, 0, 0)\n    ff = []\n    farhan = False\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            if farhan:\n                f += 1\n        else:\n            if not farhan:\n                k += 1\n            farhan = True\n            l += 1\n            if f > 0:\n                k += 1\n                ff.append(f)\n                f = 0\n    ff.sort()\n    sol = k * l\n    for i in range(len(ff)):\n        l += ff[i]\n        k -= 1\n        sol = min(sol, k * l)\n    print(sol)", "for i in range(int(input())):\n    s = input()\n    r = input()\n    (k, l, f) = (0, 0, 0)\n    ff = []\n    farhan = False\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            if farhan:\n                f += 1\n        else:\n            if not farhan:\n                k += 1\n            farhan = True\n            l += 1\n            if f > 0:\n                k += 1\n                ff.append(f)\n                f = 0\n    ff.sort()\n    sol = k * l\n    for i in range(len(ff)):\n        l += ff[i]\n        k -= 1\n        sol = min(sol, k * l)\n    print(sol)", "for t in range(int(input())):\n    s = input()\n    r = input()\n    diff = list()\n    index = list()\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            cnt += 1\n            index.append(i)\n    for i in range(1, len(index)):\n        diff.append(index[i] - index[i - 1] - 1)\n    diff.sort()\n    fmin = cnt ** 2\n    oper = cnt\n    moves = cnt\n    for i in diff:\n        moves += i\n        oper -= 1\n        fmin = min(fmin, moves * oper)\n    print(fmin)", "for t in range(int(input())):\n    s = input()\n    r = input()\n    diff = list()\n    index = list()\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            cnt += 1\n            index.append(i)\n    for i in range(1, len(index)):\n        diff.append(index[i] - index[i - 1] - 1)\n    diff.sort()\n    fmin = cnt ** 2\n    oper = cnt\n    moves = cnt\n    for i in diff:\n        moves += i\n        oper -= 1\n        fmin = min(fmin, moves * oper)\n    print(fmin)", "import sys\nimport math\n\ndef fout(s, end='\\n'):\n    sys.stdout.write(str(s) + end)\n\ndef fin():\n    return sys.stdin.readline().strip()\nt = int(fin())\nwhile t > 0:\n    t -= 1\n    s = fin()\n    r = fin()\n    un = isl = 0\n    count = 0\n    eqisl = []\n    count2 = 0\n    for i in range(len(r)):\n        if s[i] == r[i]:\n            if un == 0:\n                continue\n            count2 += 1\n            if count > 0:\n                isl += 1\n                count = 0\n        else:\n            if count2 > 0:\n                eqisl.append(count2)\n                count2 = 0\n            un += 1\n            count += 1\n    if count > 0:\n        isl += 1\n    eqisl.sort()\n    ans = un * isl\n    for i in range(len(eqisl)):\n        un += eqisl[i]\n        isl -= 1\n        ans = min(ans, un * isl)\n    print(ans)", "for _ in range(int(input())):\n    S = input()\n    R = input()\n    N = len(S)\n    groups = []\n    cont = False\n    for i in range(N):\n        if S[i] != R[i]:\n            if cont:\n                groups[-1][1] += 1\n            else:\n                groups.append([i, i])\n                cont = True\n        else:\n            cont = False\n    k = len(groups)\n    l = 0\n    diff = []\n    for i in range(1, k):\n        diff.append(groups[i][0] - groups[i - 1][1] - 1)\n        l += groups[i][1] - groups[i][0] + 1\n    if len(groups) > 0:\n        l += groups[0][1] - groups[0][0] + 1\n    diff.sort()\n    mx = k * l\n    for i in range(len(groups) - 1):\n        k -= 1\n        l += diff[i]\n        mx = min(mx, k * l)\n    print(mx)", "for _ in range(int(input())):\n    s = list(input())\n    r = list(input())\n    l = []\n    flag = 0\n    eq = 0\n    k = 0\n    s_1 = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            if eq > 0 and flag == 1:\n                l.append(eq)\n                k += 1\n            elif flag == 0:\n                k += 1\n            eq = 0\n            flag = 1\n            s_1 += 1\n        else:\n            eq += 1\n    l.sort()\n    res = 0\n    res = k * s_1\n    for i in range(len(l)):\n        s_1 = s_1 + l[i]\n        k = k - 1\n        res = min(res, s_1 * k)\n    print(res)", "try:\n    t = int(input())\n    for v in range(t):\n        s = input()\n        r = input()\n        i = 0\n        prev = -1\n        top = 0\n        l = 0\n        k = 0\n        gap = []\n        while i < len(s):\n            if s[i] != r[i]:\n                if prev != -1:\n                    gap.append(i - prev - 1)\n                    top += 1\n                k += 1\n                while i < len(s) and s[i] != r[i]:\n                    l += 1\n                    prev = i\n                    i += 1\n            i += 1\n        gap.sort()\n        ans = k * l\n        for i in range(top):\n            l = l + gap[i]\n            k = k - 1\n            if ans > k * l:\n                ans = k * l\n        print(ans)\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    ans = 1000000000000000\n    c = 0\n    l = 0\n    k = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            c += 1\n            l += 1\n            if c == 1:\n                k += 1\n        else:\n            c = 0\n    a = 0\n    b = 0\n    ans = k * l\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] != r[i]:\n            b = i\n            break\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            a = i\n            break\n    gap = []\n    c = 0\n    for i in range(a, b + 1):\n        if s[i] == r[i]:\n            c += 1\n        elif c != 0:\n            gap.append(c)\n            c = 0\n    gap.sort()\n    for i in gap:\n        k -= 1\n        l += i\n        ans = min(ans, k * l)\n    print(ans)", "test = int(input())\nfor _ in range(test):\n    e_islands = []\n    u_islands = []\n    s = input()\n    r = input()\n    gap = 0\n    size = 0\n    mismatches = 0\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            gap += 1\n            if size != 0:\n                u_islands.append(size)\n                size = 0\n        else:\n            size += 1\n            if gap != 0:\n                e_islands.append(gap)\n                gap = 0\n            mismatches += 1\n    if size != 0:\n        u_islands.append(size)\n    if s[0] == r[0]:\n        e_islands = e_islands[1:]\n    e_islands = sorted(e_islands)\n    min_len = mismatches\n    k = len(u_islands)\n    ans = min_len * k\n    for val in e_islands:\n        min_len += val\n        k -= 1\n        ans = min(ans, min_len * k)\n    print(ans)", "for t in range(int(input())):\n    e_islands = []\n    u_islands = []\n    s = input()\n    r = input()\n    gap = 0\n    size = 0\n    mismatches = 0\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            gap += 1\n            if size != 0:\n                u_islands.append(size)\n                size = 0\n        else:\n            size += 1\n            if gap != 0:\n                e_islands.append(gap)\n                gap = 0\n            mismatches += 1\n    if size != 0:\n        u_islands.append(size)\n    if s[0] == r[0]:\n        e_islands = e_islands[1:]\n    e_islands = sorted(e_islands)\n    min_len = mismatches\n    k = len(u_islands)\n    ans = min_len * k\n    for val in e_islands:\n        min_len += val\n        k -= 1\n        ans = min(ans, min_len * k)\n    print(ans)", "for t in range(int(input())):\n    e_islands = []\n    u_islands = []\n    s = input()\n    r = input()\n    gap = 0\n    size = 0\n    mismatches = 0\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            gap += 1\n            if size != 0:\n                u_islands.append(size)\n                size = 0\n        else:\n            size += 1\n            if gap != 0:\n                e_islands.append(gap)\n                gap = 0\n            mismatches += 1\n    if size != 0:\n        u_islands.append(size)\n    if s[0] == r[0]:\n        e_islands = e_islands[1:]\n    e_islands = sorted(e_islands)\n    min_len = mismatches\n    k = len(u_islands)\n    ans = min_len * k\n    for val in e_islands:\n        min_len += val\n        k -= 1\n        ans = min(ans, min_len * k)\n    print(ans)", "t = int(input())\nwhile t != 0:\n    s = input()\n    r = input()\n    n = len(s)\n    k = 0\n    c = 0\n    crlen = 0\n    ans = 0\n    j = 0\n    a = []\n    for i in range(0, n, 1):\n        if s[i] != r[i]:\n            if crlen > 0 and j == 1:\n                a.append(crlen)\n                k = k + 1\n            elif j == 0:\n                k = k + 1\n            crlen = 0\n            j = 1\n            c = c + 1\n        else:\n            crlen = crlen + 1\n    a.sort()\n    ans = c * k\n    for i in a:\n        c = c + i\n        k = k - 1\n        ans = min(ans, c * k)\n    print(ans)\n    t = t - 1", "import heapq\n\ndef minops(s, r):\n    letter = 0\n    heap = []\n    k = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            letter += 1\n            if i + 1 == len(s) or s[i + 1] == r[i + 1]:\n                k += 1\n                g = 0\n        elif k != 0:\n            g += 1\n            if i + 1 != len(s) and s[i + 1] != r[i + 1]:\n                heapq.heappush(heap, g)\n    mini = k * letter\n    while k > 0 and len(heap) > 0:\n        k -= 1\n        gap = heapq.heappop(heap)\n        letter += gap\n        if k * letter < mini:\n            mini = k * letter\n    return mini\nt = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    print(minops(s, r))", "for i in range(int(input())):\n    s = input()\n    r = input()\n    (k, l, f) = (0, 0, 0)\n    ff = []\n    farhan = False\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            if farhan:\n                f += 1\n        else:\n            if not farhan:\n                k += 1\n            farhan = True\n            l += 1\n            if f > 0:\n                k += 1\n                ff.append(f)\n                f = 0\n    ff.sort()\n    sol = k * l\n    for i in range(len(ff)):\n        l += ff[i]\n        k -= 1\n        sol = min(sol, k * l)\n    print(sol)", "for i in range(int(input())):\n    s = input()\n    r = input()\n    (k, l, f) = (0, 0, 0)\n    ff = []\n    farhan = False\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            if farhan:\n                f += 1\n        else:\n            if not farhan:\n                k += 1\n            farhan = True\n            l += 1\n            if f > 0:\n                k += 1\n                ff.append(f)\n                f = 0\n    ff.sort()\n    sol = k * l\n    for i in range(len(ff)):\n        l += ff[i]\n        k -= 1\n        sol = min(sol, k * l)\n    print(sol)", "for i in range(int(input())):\n    s = input()\n    s1 = input()\n    (k, l, g) = (0, 0, 0)\n    gp = []\n    f = False\n    for i in range(len(s)):\n        if s[i] == s1[i]:\n            if f:\n                g += 1\n        else:\n            if not f:\n                k += 1\n            f = True\n            l += 1\n            if g > 0:\n                k += 1\n                gp.append(g)\n                g = 0\n    gp.sort()\n    res = k * l\n    for i in range(len(gp)):\n        l += gp[i]\n        k -= 1\n        res = min(res, k * l)\n    print(res)", "for _ in range(int(input())):\n    s = input()\n    ss = input()\n    ind = [i for i in range(len(s)) if s[i] != ss[i]]\n    a = [ind[i + 1] - ind[i] - 1 for i in range(len(ind) - 1)]\n    a.sort()\n    (ig, ire) = (len(ind), len(ind))\n    b = [ig * ire]\n    for i in a:\n        ig -= 1\n        ire += i\n        b.append(ig * ire)\n    print(min(b))", "from itertools import accumulate\nI = input\nt = int(I())\nfor _ in range(t):\n    s = ''.join(('* '[x != y] for (x, y) in zip(I(), I()))).strip('*')\n    r = min((k * (len(s) - x) for (k, x) in enumerate(accumulate([0] + sorted(map(len, s.split()), reverse=True)), 1)))\n    print(r)", "T = int(input())\nfor j in range(T):\n    s = input()\n    r = input()\n    t = []\n    c = None\n    (n, k) = (0, 0)\n    for i in range(len(s)):\n        if r[i] != s[i]:\n            n += 1\n            if c:\n                t.append(c)\n                k += 1\n            c = 0\n        elif c != None:\n            c += 1\n    k += 1\n    t.sort()\n    m = k * n\n    for (i, j) in enumerate(t):\n        k -= 1\n        n += j\n        m = min(m, k * n)\n    print(m)", "a = int(input())\nfor w in range(a):\n    b = input()\n    c = input()\n    d = len(b)\n    e = []\n    r = 0\n    t = 0\n    p = 0\n    i = 0\n    z = 0\n    y = 1\n    for k in range(d):\n        if b[k] != c[k]:\n            r = r + 1\n            t = 1\n            if i != y:\n                z = z + 1\n                y = 0\n            if p > 0:\n                e.append(p)\n                p = 0\n        elif t == 1 and b[k] == c[k]:\n            p = p + 1\n            y = 1\n    e.sort()\n    n = r * z\n    j = len(e)\n    for it in range(j):\n        r = r + e[it]\n        z = z - 1\n        if r * z < n:\n            n = z * r\n    print(n)", "a = int(input())\nfor w in range(a):\n    b = input()\n    c = input()\n    d = len(b)\n    e = []\n    r = 0\n    t = 0\n    p = 0\n    i = 0\n    z = 0\n    y = 1\n    for k in range(d):\n        if b[k] != c[k]:\n            r = r + 1\n            t = 1\n            if i != y:\n                z = z + 1\n                y = 0\n            if p > 0:\n                e.append(p)\n                p = 0\n        elif t == 1 and b[k] == c[k]:\n            p = p + 1\n            y = 1\n    e.sort()\n    n = r * z\n    j = len(e)\n    for it in range(j):\n        r = r + e[it]\n        z = z - 1\n        if r * z < n:\n            n = z * r\n    print(n)", "import sys\ninput = sys.stdin.readlines\nprint = sys.stdout.write\nt = input()\nfor case in range(1, int(t[0]) * 2, 2):\n    s = t[case]\n    r = t[case + 1]\n    unlike = []\n    curr = None\n    l = 0\n    k = 0\n    for i in range(len(s) - 1):\n        if r[i] != s[i]:\n            l += 1\n            if curr:\n                unlike.append(curr)\n                k += 1\n            curr = 0\n        elif curr != None:\n            curr += 1\n    k += 1\n    unlike.sort()\n    mini = k * l\n    for (i, j) in enumerate(unlike):\n        k -= 1\n        l += j\n        mini = min(mini, k * l)\n    print(str(mini) + '\\n')", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    unlike = []\n    curr = None\n    l = 0\n    k = 0\n    for i in range(len(s)):\n        if r[i] != s[i]:\n            l += 1\n            if curr:\n                unlike.append(curr)\n                k += 1\n            curr = 0\n        elif curr != None:\n            curr += 1\n    k += 1\n    unlike.sort()\n    mini = k * l\n    for (i, j) in enumerate(unlike):\n        k -= 1\n        l += j\n        mini = min(mini, k * l)\n    print(mini)", "T = int(input())\nfor i in range(T):\n    S = input()\n    R = input()\n    cluster_list = []\n    for i in range(len(S)):\n        if len(cluster_list) == 0 or cluster_list[len(cluster_list) - 1][0] != (S[i] == R[i]):\n            cluster_list.append([S[i] == R[i], 1])\n        else:\n            cluster_list[len(cluster_list) - 1][1] += 1\n    t_cluster = []\n    chr_len = 0\n    clstr_len = 0\n    for j in range(len(cluster_list)):\n        if cluster_list[j][0] == True:\n            if j != 0 and j != len(cluster_list) - 1:\n                t_cluster.append((cluster_list[j][1], j))\n        else:\n            chr_len += cluster_list[j][1]\n            clstr_len += 1\n    t_cluster.sort()\n    costs = [chr_len * clstr_len]\n    for k in t_cluster:\n        chr_len += k[0]\n        clstr_len -= 1\n        costs.append(chr_len * clstr_len)\n    print(min(costs))", "for i in range(int(input())):\n    s = input()\n    r = input()\n    n = len(r)\n    gap = []\n    t = 0\n    l = 0\n    for i in range(0, n):\n        if s[i] == r[i]:\n            t += 1\n        else:\n            gap.append(t)\n            l += 1\n            t = 0\n    gap.append(t)\n    gp = len(gap) - 1\n    gap = gap[1:-1]\n    gap.sort()\n    x = l * gp\n    for i in range(len(gap)):\n        gp -= 1\n        l += gap[i]\n        y = gp * l\n        if y < x:\n            x = y\n    print(min(x, n))", "from bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nabd = {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9, 'k': 10, 'l': 11, 'm': 12, 'n': 13, 'o': 14, 'p': 15, 'q': 16, 'r': 17, 's': 18, 't': 19, 'u': 20, 'v': 21, 'w': 22, 'x': 23, 'y': 24, 'z': 25}\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\n\ndef powmod(a, b):\n    a %= mod\n    if a == 0:\n        return 0\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a % mod\n        a = a * a % mod\n        b >>= 1\n    return res\n\ndef main():\n    for _ in range(ii()):\n        s = si()\n        r = si()\n        a = []\n        x = 0\n        for i in range(1, len(s) + 1):\n            if s[i - 1] != r[i - 1]:\n                if x > 0:\n                    a.append(i - x - 1)\n                x = i\n        k = len(a) + 1\n        ans = k * k\n        a.sort()\n        l = len(a) + 1\n        if x == 0:\n            ans = 0\n        for i in a:\n            k -= 1\n            l += i\n            ans = min(ans, k * l)\n        print(ans)\nmain()", "tests = int(input())\nfor _ in range(tests):\n    strA = input()\n    strB = input()\n    minL = 0\n    sections = 0\n    equalGap = 0\n    equalGaps = []\n    previousDiff = False\n    for i in range(len(strA)):\n        letterA = strA[i]\n        letterB = strB[i]\n        if letterA != letterB:\n            minL += 1\n            if equalGap != 0:\n                equalGaps.append(equalGap)\n            if not previousDiff:\n                sections += 1\n            equalGap = 0\n            previousDiff = True\n        else:\n            equalGap += 1\n            previousDiff = False\n    equalGaps.sort(reverse=True)\n    result = sections * minL\n    while sections > 1:\n        removeOneMin = equalGaps.pop()\n        minL += removeOneMin\n        sections -= 1\n        result = min(result, sections * minL)\n    print(result)", "import math\nimport numpy as np\nt = int(input())\nfor i in range(t):\n    arr = list(input())\n    arr2 = list(input())\n    first = len(arr)\n    last = -1\n    for i in range(len(arr)):\n        if arr[i] != arr2[i]:\n            if first > i:\n                first = i\n            if last < i:\n                last = i\n    arr = arr[first:last + 1]\n    arr2 = arr2[first:last + 1]\n    n = len(arr)\n    cnt = 0\n    a = []\n    first = n\n    last = 0\n    for i in range(n):\n        if arr[i] == arr2[i]:\n            cnt = cnt + 1\n            if i == n - 1:\n                a.append(cnt)\n        elif cnt != 0:\n            a.append(cnt)\n            cnt = 0\n    a.sort()\n    a.append(0)\n    p = n\n    ans = []\n    cnt = 1\n    for i in a[::-1]:\n        p = p - i\n        ans.append(p * cnt)\n        cnt = cnt + 1\n    print(min(ans))", "t = int(input())\nwhile t > 0:\n    s = input()\n    r = input()\n    n = len(s)\n    l = []\n    for i in range(n):\n        if s[i] != r[i]:\n            l.append(i)\n    if len(l) == 1 or len(l) == 0:\n        print(len(l))\n        t -= 1\n        continue\n    p = []\n    for i in range(1, len(l)):\n        p.append(l[i] - l[i - 1] - 1)\n    k = len(l)\n    flag = k\n    ans = k * flag\n    p = sorted(p)\n    for i in range(len(p)):\n        flag += p[i]\n        if k > 0:\n            k = k - 1\n        ans = min(ans, flag * k)\n    print(ans)\n    t -= 1", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    s = stdin.readline()\n    r = stdin.readline()\n    prev = cur = -2\n    k = 0\n    l = 0\n    arr = []\n    for i in range(len(r)):\n        if s[i] != r[i]:\n            l += 1\n            prev = cur\n            cur = i\n            if cur - prev - 1 > 0:\n                k += 1\n                arr.append(cur - prev - 1)\n    if prev == -2 and cur == -2:\n        print('0')\n        continue\n    arr[0] = 10000000\n    arr = sorted(arr)\n    ans = k * l\n    for i in range(len(arr) - 1):\n        if ans > (k - 1) * (l + arr[i]) and k > 1:\n            k -= 1\n            l += arr[i]\n            ans = k * l\n        else:\n            k -= 1\n            l += arr[i]\n    print(ans)", "from sys import stdin\nfor _ in range(int(input())):\n    s = input()\n    r = input()\n    prev = cur = -2\n    k = 0\n    l = 0\n    arr = []\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            l += 1\n            prev = cur\n            cur = i\n            if cur - prev - 1 > 0:\n                k += 1\n                arr.append(cur - prev - 1)\n    if prev == -2 and cur == -2:\n        print('0')\n        continue\n    arr[0] = 10000000\n    arr = sorted(arr)\n    ans = k * l\n    for i in range(len(arr) - 1):\n        if ans > (k - 1) * (l + arr[i]) and k > 1:\n            k -= 1\n            l += arr[i]\n            ans = k * l\n        else:\n            k -= 1\n            l += arr[i]\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    n = len(s)\n    l = []\n    (p, i, sum) = (0, 0, 0)\n    while i < n:\n        if s[i] == r[i]:\n            p = 0\n            while s[i] == r[i]:\n                i += 1\n                p += 1\n                if i == n:\n                    break\n            l.append(p)\n        else:\n            i += 1\n    for i in l:\n        sum += i\n    k = len(l)\n    if s[0] == r[0]:\n        del l[0]\n        k -= 1\n    if s[n - 1] == r[n - 1] and k != 0:\n        del l[k - 1]\n        k -= 1\n    l.sort()\n    for i in range(1, k):\n        l[i] += l[i - 1]\n    count = (k + 1) * (n - sum)\n    j = 0\n    for i in range(k, 0, -1):\n        if i * (n - sum + l[j]) < count:\n            count = i * (n - sum + l[j])\n        j += 1\n    print(count)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    g = []\n    (dg, gc, l, k) = (0, 0, 0, 0)\n    for i in range(0, len(s)):\n        if s[i] == r[i]:\n            if dg:\n                gc += 1\n        else:\n            if not dg:\n                k += 1\n            dg = 1\n            l += 1\n            if gc > 0:\n                k += 1\n                g.append(gc)\n                gc = 0\n    ans = k * l\n    g.sort()\n    for i in g:\n        k -= 1\n        l += i\n        ans = min(ans, k * l)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    string_s = input()\n    string_r = input()\n    n = len(string_r)\n    Queue = []\n    gaps = 0\n    candoGaps = 0\n    k = 0\n    l = 0\n    for i in range(n):\n        if string_r[i] == string_s[i]:\n            if candoGaps == 1:\n                gaps += 1\n        else:\n            l += 1\n            if candoGaps == 0:\n                candoGaps = 1\n                k += 1\n            if gaps > 0:\n                Queue.append(gaps)\n                gaps = 0\n                k += 1\n    Queue.sort()\n    res = k * l\n    while k > 0 and Queue:\n        k -= 1\n        l += Queue.pop(0)\n        if res > k * l:\n            res = l * k\n    print(res)\nexit(0)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    a = []\n    b = []\n    k = 0\n    lenth = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            lenth += 1\n            k += 1\n            a.append(i)\n    for j in range(1, len(a)):\n        b.append(a[j] - a[j - 1] - 1)\n    b.sort()\n    ans = k * lenth\n    for i in range(len(b)):\n        lenth += b[i]\n        k = k - 1\n        ans = min(k * lenth, ans)\n    print(ans)", "for _ in range(int(input())):\n    s = str(input())\n    r = str(input())\n    a = []\n    b = []\n    k = 0\n    lenth = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            lenth += 1\n            k += 1\n            a.append(i)\n    for j in range(1, len(a)):\n        b.append(a[j] - a[j - 1] - 1)\n    b.sort()\n    ans = k * lenth\n    for i in range(len(b)):\n        lenth += b[i]\n        k = k - 1\n        ans = min(k * lenth, ans)\n    print(ans)", "for _ in range(int(input())):\n    s = str(input())\n    r = str(input())\n    flag = False\n    a = []\n    b = []\n    k = 0\n    lenth = 0\n    gl = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            lenth += 1\n            k += 1\n            a.append(i)\n    for j in range(1, len(a)):\n        b.append(a[j] - a[j - 1] - 1)\n    b.sort()\n    ans = k * lenth\n    for i in range(len(b)):\n        lenth += b[i]\n        k = k - 1\n        ans = min(k * lenth, ans)\n    print(ans)", "for _ in range(int(input())):\n    s = str(input())\n    r = str(input())\n    flag = False\n    a = []\n    b = []\n    k = 0\n    lenth = 0\n    gl = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            lenth += 1\n            k += 1\n            a.append(i)\n    for j in range(1, len(a)):\n        b.append(a[j] - a[j - 1] - 1)\n    b.sort()\n    ans = k * lenth\n    for i in range(len(b)):\n        lenth += b[i]\n        k = k - 1\n        ans = min(k * lenth, ans)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    if s == r:\n        print(0)\n        continue\n    b = [True for x in range(len(s))]\n    p = []\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            b[i] = False\n    cnt = 0\n    anytobechangedocuuredat = False\n    d = True\n    for i in range(len(s)):\n        if b[i] == False:\n            anytobechangedocuuredat = True\n            if cnt > 0:\n                p.append(cnt)\n                cnt = 0\n        elif anytobechangedocuuredat == True:\n            if d == True:\n                d = False\n                cnt = 1\n            else:\n                cnt += 1\n    p.sort()\n    l = b.count(False)\n    k = len(p) + 1\n    ans = l * k\n    for i in range(0, k - 1):\n        l = l + p[i]\n        k -= 1\n        ans = min(ans, l * k)\n    print(ans)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    n = len(a)\n    x = n\n    for i in range(n):\n        if a[i] != b[i]:\n            x = i\n            break\n    l = []\n    count = 0\n    xx = 0\n    for i in range(x, n):\n        if a[i] == b[i]:\n            count += 1\n        else:\n            xx += 1\n            if count != 0:\n                l.append(count)\n                count = 0\n    l.sort()\n    x = len(l) + 1\n    mini = x * xx\n    while len(l) != 0:\n        xx += l[0]\n        x -= 1\n        l.pop(0)\n        mini = min(mini, xx * x)\n    print(mini)", "t = int(input())\nwhile t:\n    gap = []\n    l = 0\n    k = 0\n    s = input()\n    r = input()\n    flag = True\n    new_flag = False\n    gap_between = 0\n    length = len(s)\n    for i in range(length):\n        if s[i] != r[i]:\n            new_flag = True\n        if new_flag == False:\n            continue\n        if s[i] != r[i]:\n            if gap_between != 0:\n                gap.append(gap_between)\n                gap_between = 0\n            l += 1\n            if flag:\n                k += 1\n                flag = False\n        else:\n            flag = True\n            gap_between += 1\n    minOps = k * l\n    if minOps == 0:\n        print(0)\n    else:\n        gap.sort()\n        for i in range(len(gap)):\n            k -= 1\n            if k <= 0:\n                break\n            l += gap[i]\n            if l * k < minOps:\n                minOps = l * k\n        print(minOps)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    s = input()\n    t = input()\n    diffcount = 0\n    ans = []\n    cont = False\n    l = 0\n    gap = 0\n    k = 0\n    for i in range(len(s)):\n        if s[i] == t[i]:\n            if cont:\n                gap += 1\n        else:\n            if not cont:\n                k += 1\n            cont = True\n            l += 1\n            if gap > 0:\n                ans.append(gap)\n                gap = 0\n                k += 1\n    cs = k * l\n    ans.sort()\n    for i in range(len(ans)):\n        k -= 1\n        if k < 0:\n            break\n        l += ans[i]\n        cs = min(cs, k * l)\n    print(cs)", "for i in range(int(input())):\n    s = input()\n    s1 = input()\n    (k, l, g) = (0, 0, 0)\n    gp = []\n    f = False\n    for i in range(len(s)):\n        if s[i] == s1[i]:\n            if f:\n                g += 1\n        else:\n            if not f:\n                k += 1\n            f = True\n            l += 1\n            if g > 0:\n                k += 1\n                gp.append(g)\n                g = 0\n    gp.sort()\n    res = k * l\n    for i in range(len(gp)):\n        l += gp[i]\n        k -= 1\n        res = min(res, k * l)\n    print(res)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    if s == r:\n        print('0')\n        continue\n    l = [a == b for (a, b) in zip(s, r)]\n    temp = l[0]\n    count = 0\n    dream = []\n    for i in l:\n        if temp == i:\n            count += 1\n        else:\n            dream.append(count)\n            temp = i\n            count = 1\n    dream.append(count)\n    if l[0]:\n        dream.pop(0)\n    if l[-1]:\n        dream.pop(-1)\n    l.clear()\n    p = sum(dream)\n    lenth_dream = len(dream)\n    if lenth_dream == 1:\n        print(dream[0])\n        dream.clear()\n        continue\n    delt = [p for i in range(1, lenth_dream // 2 + 1)]\n    listOfOnes = dream[1::2]\n    listOfOnes.sort(reverse=True)\n    dream.clear()\n    summ = 0\n    for i in range(len(delt)):\n        summ += listOfOnes[i]\n        delt[i] -= summ\n        delt[i] = (i + 2) * delt[i]\n    if min(delt) > p:\n        print(p)\n        delt.clear()\n        listOfOnes.clear()\n        continue\n    print(min(delt))\n    delt.clear()\n    listOfOnes.clear()", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    if s == r:\n        print('0')\n        continue\n    l = [a == b for (a, b) in zip(s, r)]\n    temp = l[0]\n    count = 0\n    dream = []\n    for i in l:\n        if temp == i:\n            count += 1\n        else:\n            dream.append(count)\n            temp = i\n            count = 1\n    dream.append(count)\n    if l[0]:\n        dream.pop(0)\n    if l[-1]:\n        dream.pop(-1)\n    p = sum(dream)\n    lenth_dream = len(dream)\n    if lenth_dream == 1:\n        print(dream[0])\n        continue\n    delt = [p for i in range(1, lenth_dream // 2 + 1)]\n    listOfOnes = dream[1::2]\n    listOfOnes.sort(reverse=True)\n    summ = 0\n    for i in range(len(delt)):\n        summ += listOfOnes[i]\n        delt[i] -= summ\n        delt[i] = (i + 2) * delt[i]\n    if min(delt) > p:\n        print(p)\n        continue\n    print(min(delt))", "for _ in range(int(input())):\n    s = list(map(str, input()))\n    r = list(map(str, input()))\n    d = []\n    flag = 0\n    gl = 0\n    k = 0\n    l = 0\n    for i in range(len(s)):\n        if s[i] == r[i]:\n            if flag == 1:\n                gl += 1\n        else:\n            if flag == 0:\n                k += 1\n            flag = 1\n            l += 1\n            if gl > 0:\n                k += 1\n                d.append(gl)\n                gl = 0\n    d.sort()\n    ans = k * l\n    for i in range(len(d)):\n        l = l + d[i]\n        k -= 1\n        ans = min(ans, k * l)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    S = input()\n    R = input()\n    i = 0\n    while i < len(R) and S[i] == R[i]:\n        i += 1\n    j = len(R) - 1\n    while j >= 0 and S[j] == R[j]:\n        j -= 1\n    if i > j:\n        print(0)\n        continue\n    P = []\n    l = 0\n    prev = -1\n    for k in range(i, j + 1):\n        if R[k] != S[k]:\n            l += 1\n            if prev != -1:\n                P.append(k - prev)\n                prev = -1\n        elif prev == -1:\n            prev = k\n    P.sort()\n    k = len(P) + 1\n    ans = k * l\n    for i in P:\n        b = (k - 1) * (l + i)\n        if b < ans:\n            ans = b\n        k -= 1\n        l += i\n    print(ans)", "for _ in range(int(input())):\n    S = str(input())\n    R = str(input())\n    N = len(S)\n    Gaplist = []\n    (GapLength, Length, NoOfSwap) = (0, 0, 0)\n    flag = False\n    for i in range(N):\n        if S[i] == R[i]:\n            if flag:\n                GapLength += 1\n        else:\n            if not flag:\n                NoOfSwap += 1\n            flag = True\n            Length += 1\n            if GapLength > 0:\n                NoOfSwap += 1\n                Gaplist.append(GapLength)\n                GapLength = 0\n    Gaplist.sort()\n    MinPossibleOutcome = NoOfSwap * Length\n    for i in range(len(Gaplist)):\n        NoOfSwap -= 1\n        Length += Gaplist[i]\n        MinPossibleOutcome = min(MinPossibleOutcome, NoOfSwap * Length)\n    print(MinPossibleOutcome)", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    r = input()\n    k = 0\n    l = 0\n    gap = []\n    g = 0\n    flag = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            l += 1\n            if flag == 0:\n                k += 1\n            flag = 1\n            if g > 0:\n                k += 1\n                gap.append(g)\n                g = 0\n        elif flag == 1:\n            g += 1\n    answer = k * l\n    gap.sort()\n    if k == 1:\n        gap = []\n    for i in range(len(gap)):\n        l += gap[i]\n        k -= 1\n        answer = min(answer, k * l)\n    print(answer)", "t = int(input())\nfor i in range(t):\n    s = input()\n    r = input()\n    n = len(s)\n    a = [i for i in range(n) if s[i] != r[i]]\n    m = len(a)\n    if m == 0:\n        print(0)\n    else:\n        spaces = [a[i] - a[i - 1] - 1 for i in range(1, m) if a[i] - a[i - 1] - 1 != 0]\n        spaces.sort()\n        k = len(spaces) + 1\n        l = a[-1] - a[0] + 1 - sum(spaces)\n        sol = k * l\n        i = 0\n        while k != 1:\n            l += spaces[i]\n            i += 1\n            k -= 1\n            if l * k < sol:\n                sol = l * k\n        print(sol)", "t = int(input())\nfor i in range(t):\n    s = input()\n    r = input()\n    n = len(s)\n    a = [i for i in range(n) if s[i] != r[i]]\n    m = len(a)\n    if m == 0:\n        print(0)\n    else:\n        spaces = [a[i] - a[i - 1] - 1 for i in range(1, m) if a[i] - a[i - 1] - 1 != 0]\n        spaces.sort()\n        k = len(spaces) + 1\n        l = a[-1] - a[0] + 1 - sum(spaces)\n        sol = k * l\n        i = 0\n        while k != 1:\n            l += spaces[i]\n            i += 1\n            k -= 1\n            if l * k < sol:\n                sol = l * k\n        print(sol)", "for j in range(int(input())):\n    s = input()\n    r = input()\n    x = []\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            x.append(i)\n    aman = []\n    k = 1\n    l = len(x)\n    for i in range(len(x) - 1):\n        if x[i + 1] == x[i] + 1:\n            k += 0\n        else:\n            k += 1\n        if x[i + 1] - x[i] - 1 != 0:\n            aman.append(x[i + 1] - x[i] - 1)\n    aman.sort()\n    ans = k * l\n    for i in range(len(aman)):\n        l += aman[i]\n        k = k - 1\n        ans = min(ans, k * l)\n    print(ans)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    n = len(a)\n    l = []\n    i = l1 = k = 0\n    while i < n:\n        if a[i] != b[i]:\n            while i < n and a[i] != b[i]:\n                i += 1\n                l1 += 1\n            k += 1\n        else:\n            c = 0\n            while i < n and a[i] == b[i]:\n                c += 1\n                i += 1\n            l.append(c)\n    if a[0] == b[0] and len(l) > 0:\n        l.pop(0)\n    if a[n - 1] == b[n - 1] and len(l) > 0:\n        l.pop(-1)\n    l.sort()\n    m = k * l1\n    i = 0\n    for j in range(k - 1, 0, -1):\n        l1 = l1 + l[i]\n        i += 1\n        m = min(l1 * j, m)\n    print(m)", "for _ in range(int(input())):\n    a = input()\n    b = input()\n    n = len(a)\n    l = []\n    i = l1 = k = 0\n    while i < n:\n        if a[i] != b[i]:\n            while i < n and a[i] != b[i]:\n                i += 1\n                l1 += 1\n            k += 1\n        else:\n            c = 0\n            while i < n and a[i] == b[i]:\n                c += 1\n                i += 1\n            l.append(c)\n    if k == 0:\n        print(0)\n    else:\n        if a[0] == b[0]:\n            l.pop(0)\n        if a[n - 1] == b[n - 1]:\n            l.pop(-1)\n        l.sort()\n        m = k * l1\n        i = 0\n        for j in range(k - 1, 0, -1):\n            l1 = l1 + l[i]\n            i += 1\n            m = min(l1 * j, m)\n        print(m)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    a = []\n    l = 0\n    k = 0\n    tmp = 0\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            if cnt == 0:\n                k += 1\n            cnt += 1\n            l += 1\n            if tmp:\n                a.append(tmp)\n                tmp = 0\n        else:\n            if k:\n                tmp += 1\n            cnt = 0\n    ans = k * l\n    a.sort()\n    for i in a:\n        k -= 1\n        l += i\n        ans = min(ans, k * l)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    a = []\n    l = 0\n    k = 0\n    tmp = 0\n    cnt = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            if cnt == 0:\n                k += 1\n            cnt += 1\n            l += 1\n            if tmp:\n                a.append(tmp)\n                tmp = 0\n        else:\n            if k:\n                tmp += 1\n            cnt = 0\n    ans = k * l\n    a.sort()\n    if k == 1:\n        print(k * l)\n        continue\n    for i in a:\n        k -= 1\n        l += i\n        ans = min(ans, k * l)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    (n, index) = (len(s), 0)\n    arr = []\n    (l, k, previous) = (0, 0, -1)\n    while index < n:\n        if s[index] != r[index]:\n            l += 1\n            k += 1\n            if previous != -1:\n                arr.append(index - previous - 1)\n            previous = index\n        index += 1\n    arr.sort()\n    ans = l * k\n    for i in arr:\n        l += i\n        k -= 1\n        ans = min(ans, l * k)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s1 = input()\n    s2 = input()\n    n = len(s1)\n    max_k = 0\n    min_l = 0\n    flag = 0\n    lst = []\n    i = 0\n    while i < n:\n        j = i\n        while j < n and s1[j] == s2[j]:\n            j += 1\n        if j == n:\n            break\n        if flag != 0:\n            lst.append(j - i)\n        i = j\n        while j < n and s1[j] != s2[j]:\n            flag = 1\n            j += 1\n        min_l += j - i\n        max_k += 1\n        i = j\n    lst.sort()\n    Min = min_l * max_k\n    index = 0\n    while max_k >= 1 and index < len(lst):\n        max_k -= 1\n        min_l += lst[index]\n        Min = min(Min, max_k * min_l)\n        index += 1\n    print(Min)", "from sys import stdin\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    a = [1]\n    b = []\n    if s[0] == r[0]:\n        b.append(0)\n    else:\n        b.append(1)\n    for i in range(1, len(s)):\n        if s[i] == r[i]:\n            bit = 0\n        else:\n            bit = 1\n        if bit == b[-1]:\n            a[-1] += 1\n        else:\n            b.append(bit)\n            a.append(1)\n    if b[0] == 0:\n        b = b[1:]\n        a = a[1:]\n    if len(b) == 0:\n        print('0')\n        continue\n    if b[-1] == 0:\n        b = b[:len(b) - 1]\n        a = a[:len(a) - 1]\n    if len(b) == 1:\n        print(a[0])\n        continue\n    (p, l) = ([], 0)\n    for i in range(len(b)):\n        if b[i] == 1:\n            l += a[i]\n        else:\n            p.append(a[i])\n    p.sort()\n    k = b.count(1)\n    ans = [k * l]\n    for i in range(len(p)):\n        l += p[i]\n        k -= 1\n        ans.append(l * k)\n    print(min(ans))", "import sys\nfor _ in range(int(input())):\n    s = input()\n    r = input()\n    l = 0\n    length = len(s)\n    for i in range(length):\n        if s[i] != r[i]:\n            l += 1\n    islands = []\n    ind1 = -1\n    ind2 = -1\n    for i in range(length):\n        if s[i] != r[i]:\n            if ind1 == -1:\n                ind1 = i\n                ind2 = i\n            else:\n                ind2 = i\n        elif ind1 != -1 and ind2 != -1:\n            islands.append([ind1, ind2])\n            ind1 = -1\n            ind2 = -1\n    if ind1 != -1 and ind2 != -1:\n        islands.append([ind1, ind2])\n    gap_arr = []\n    for i in range(len(islands) - 1):\n        gap_arr.append(islands[i + 1][0] - islands[i][1] - 1)\n    gap_arr.sort()\n    k = len(islands)\n    ans = l * k\n    for i in range(0, len(islands) - 1):\n        k = k - 1\n        l = l + gap_arr[i]\n        ans = min(ans, l * k)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    pos = []\n    gaps = []\n    roast = [1]\n    l = 0\n    k = 0\n    least = 0\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            pos.append(i)\n            if len(pos) > 1:\n                j = len(pos) - 1\n                if pos[j - 1] + 1 != pos[j]:\n                    gaps.append(pos[j] - pos[j - 1] - 1)\n                    roast.append(1)\n                else:\n                    roast[-1] += 1\n    l = len(pos)\n    k = len(roast)\n    least = l * k\n    gaps.sort()\n    for ele in gaps:\n        l += ele\n        k -= 1\n        if l * k < least:\n            least = l * k\n    print(least)", "for k in range(int(input())):\n    ques = input()\n    comp = input()\n    temp = []\n    zcount = []\n    ocount = 0\n    count = 0\n    for i in range(len(ques)):\n        if ques[i] != comp[i]:\n            temp.append(1)\n            ocount += 1\n            if count != 0:\n                zcount.append(count)\n                count = 0\n        elif ocount >= 1:\n            temp.append(0)\n            count += 1\n    zcount = sorted(zcount)[::-1]\n    zcount.insert(0, 0)\n    temp = temp[:len(temp) - count]\n    ans = ocount ** 2\n    parts = 0\n    num = len(temp)\n    for i in range(len(zcount)):\n        num = num - zcount[i]\n        parts += 1\n        ansp = parts * num\n        ans = min(ans, ansp)\n    print(ans)", "from math import *\nfrom itertools import *\nt = int(input())\nfor i in range(t):\n    s = list(input())\n    r = list(input())\n    n = len(s)\n    l = [i for i in range(n) if s[i] != r[i]]\n    m = len(l)\n    if m == 1 or m == 0:\n        print(m)\n    else:\n        l1 = l[m - 1] - l[0] + 1\n        spaces = [l[i] - l[i - 1] - 1 for i in range(1, m)]\n        spaces.sort(reverse=True)\n        sol = l1\n        for k in range(2, m + 1):\n            l1 = l1 - spaces[k - 2]\n            if k * l1 < sol:\n                sol = k * l1\n        print(sol)", "for _ in range(int(input())):\n    s = list(input())\n    r = list(input())\n    n = len(s)\n    notequal = []\n    for i in range(n):\n        if s[i] != r[i]:\n            notequal.append(i)\n    lenn = len(notequal)\n    ans = lenn * lenn\n    l = []\n    for i in range(lenn - 1):\n        l.append(notequal[i + 1] - notequal[i] - 1)\n    l.sort()\n    letters = lenn\n    div = lenn\n    for i in range(len(l)):\n        div -= 1\n        letters = letters + l[i]\n        ans = min(ans, div * letters)\n    print(ans)", "for k in range(int(input())):\n    ques = input()\n    comp = input()\n    zcount = []\n    count = 0\n    stat = False\n    parts = 0\n    changes = 0\n    for i in range(len(ques)):\n        if ques[i] != comp[i]:\n            if not stat:\n                parts += 1\n            stat = True\n            changes += 1\n            if count > 0:\n                zcount.append(count)\n                count = 0\n                parts += 1\n        elif stat:\n            count += 1\n    zcount = sorted(zcount)\n    ans = changes * parts\n    for i in range(len(zcount)):\n        changes = changes + zcount[i]\n        parts -= 1\n        ansp = parts * changes\n        ans = min(ans, ansp)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    a = []\n    n = len(s)\n    diff = 0\n    for i in range(n):\n        if s[i] != r[i]:\n            a.append(i)\n            diff += 1\n    d = []\n    for i in range(1, diff):\n        d.append(a[i] - a[i - 1] - 1)\n    d.sort()\n    cost = diff * diff\n    k = diff\n    l = diff\n    i = 0\n    for k in range(diff - 1, 0, -1):\n        if i >= len(d):\n            break\n        l += d[i]\n        cost = min(cost, k * l)\n        i += 1\n    print(cost)", "def value_l(l):\n    k = 0\n    for j in range(len(l)):\n        k += l[j][1] - l[j][0] + 1\n    return k\nfor _ in range(int(input())):\n    s = input() + 'a'\n    r = input() + 'a'\n    i = 0\n    l = []\n    while i < len(s):\n        if s[i] != r[i]:\n            w = i\n            while w < len(s):\n                if s[w] == r[w]:\n                    l.append([i, w - 1])\n                    i = w - 1\n                    break\n                w += 1\n        i += 1\n    o = []\n    for i in range(len(l) - 1):\n        o.append(l[i + 1][0] - l[i][1] - 1)\n    o.sort()\n    k = len(l)\n    j = 0\n    ans = k * value_l(l)\n    f = 0\n    h = value_l(l)\n    while j < len(o):\n        k = k - 1\n        h += o[f]\n        ans = min(ans, k * h)\n        f += 1\n        j += 1\n    print(ans)", "for _ in range(int(input())):\n    s = list(input())\n    r = list(input())\n    a = []\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            a.append(i)\n    l = []\n    for i in range(1, len(a)):\n        l.append(a[i] - a[i - 1] - 1)\n    l.sort()\n    k = len(a)\n    m = k\n    y = 0\n    ans = k * k\n    for i in range(len(a) - 1, 0, -1):\n        if y < len(l):\n            m += l[y]\n            ans = min(ans, i * m)\n            y += 1\n        else:\n            break\n    print(ans)", "ipnl = lambda n: [int(input()) for _ in range(n)]\ninp = lambda : int(input())\nip = lambda : [int(w) for w in input().split()]\nmp = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    s = input()\n    r = input()\n    n = len(s)\n    dp = [0 for i in range(n)]\n    for i in range(n):\n        if s[i] != r[i]:\n            dp[i] = 1\n    prev = -1\n    l = dp.count(1)\n    k = 0\n    z = []\n    for i in range(n):\n        if prev != 1 and dp[i] == 1:\n            k += 1\n            z.append([i, i])\n        elif dp[i] == 1:\n            z[-1][1] += 1\n        prev = dp[i]\n    diff = []\n    for i in range(len(z) - 1):\n        (i1, i2) = (z[i], z[i + 1])\n        diff.append(i2[0] - i1[1] - 1)\n    ans = k * l\n    diff.sort()\n    for i in diff:\n        l += i\n        k -= 1\n        ans = min(ans, k * l)\n    print(ans)", "T = int(input())\nwhile T:\n    S = input()\n    R = input()\n    N = len(S)\n    A = []\n    if S == R:\n        print('0')\n    else:\n        final = 0\n        k = 0\n        l = 1\n        i = 0\n        j = 0\n        while S[i] == R[i]:\n            i += 1\n        var1 = i\n        i += 1\n        while i < N:\n            if S[i] != R[i]:\n                A.append(i - var1 - 1)\n                var1 = i\n                l += 1\n            i += 1\n        k = l\n        final = k * l\n        A.sort()\n        i = 0\n        for i in range(len(A)):\n            k -= 1\n            l += A[i]\n            final = min(final, k * l)\n        print(final)\n    T -= 1", "from itertools import accumulate, count\nfrom operator import sub, mul\ntry:\n    t = int(input())\n    for i in range(t):\n        s = input()\n        r = input()\n        z = zip(s, r)\n        s = ''.join(('- '[x != y] for (x, y) in z)).strip('-')\n        a = accumulate([len(s)] + sorted(map(len, s.split()), reverse=True), sub)\n        steps = min(map(mul, count(1), a))\n        print(steps)\nexcept:\n    pass", "from itertools import accumulate, count\nfrom operator import sub, mul\ntry:\n    t = int(input())\n    for i in range(t):\n        s = input()\n        r = input()\n        z = zip(s, r)\n        s = ''.join(('- '[x != y] for (x, y) in z)).strip('-')\n        a = accumulate([len(s)] + sorted(map(len, s.split()), reverse=True), sub)\n        steps = min(map(mul, count(1), a))\n        print(steps)\nexcept:\n    pass", "from itertools import accumulate, count\nfrom operator import sub, mul\ntry:\n    t = int(input())\n    for i in range(t):\n        s = input()\n        r = input()\n        z = zip(s, r)\n        s = ''.join(('* '[x != y] for (x, y) in z)).strip('*')\n        a = accumulate([len(s)] + sorted(map(len, s.split()), reverse=True), sub)\n        steps = min(map(mul, count(1), a))\n        print(steps)\nexcept:\n    pass", "t = int(input())\nfor _ in range(t):\n    s = input()\n    r = input()\n    n = len(s)\n    index = 0\n    (previous, l, k) = (-1, 0, 0)\n    arr = []\n    while index < n:\n        if s[index] != r[index]:\n            l += 1\n            k += 1\n            if previous != -1:\n                arr.append(index - previous - 1)\n            previous = index\n        index += 1\n    ans = l * k\n    arr.sort()\n    for i in arr:\n        l += i\n        k -= 1\n        ans = min(ans, l * k)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    r = input()\n    (k, l, x) = (0, 0, 0)\n    flg = 1\n    ff = 0\n    a = []\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            l += 1\n            if flg:\n                k += 1\n            flg = 0\n            ff = 1\n            if x:\n                a.append(x)\n                x = 0\n        elif ff:\n            x += 1\n            flg = 1\n    a.sort()\n    ans = k * l\n    for i in a:\n        l = l + i\n        k -= 1\n        ans = min(ans, k * l)\n    print(ans)", "import sys\nimport math\nfrom collections import defaultdict\nmod = 1000000007\nT = 1\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    s = input()\n    r = input()\n    (k, l, x) = (0, 0, 0)\n    flg = 1\n    ff = 0\n    a = []\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            l += 1\n            if flg:\n                k += 1\n            flg = 0\n            ff = 1\n            if x:\n                a.append(x)\n                x = 0\n        elif ff:\n            x += 1\n            flg = 1\n    a.sort()\n    ans = k * l\n    for i in a:\n        l = l + i\n        k -= 1\n        ans = min(ans, k * l)\n    print(ans)", "for _ in range(int(input())):\n    s1 = input()\n    s2 = input()\n    (i, j) = (0, len(s1) - 1)\n    while i < len(s1) and s1[i] == s2[i]:\n        i += 1\n    while j >= 0 and s1[j] == s2[j]:\n        j -= 1\n    (l, k) = (0, 0)\n    dif = [0]\n    while i <= j:\n        while s1[i] != s2[i]:\n            i += 1\n            l += 1\n            if i == j + 1:\n                break\n        k += 1\n        if i == j + 1:\n            break\n        while s1[i] == s2[i]:\n            i += 1\n            dif[-1] += 1\n        dif.append(0)\n    dif.sort()\n    while dif[0] == 0:\n        del dif[0]\n        if dif == []:\n            break\n    ans = k * l\n    for i in dif:\n        k -= 1\n        l += i\n        ans = min(k * l, ans)\n    print(ans)", "t = int(input())\nwhile t:\n    s = input()\n    r = input()\n    n = len(s)\n    a = []\n    a1 = 0\n    a2 = 0\n    k = l = 0\n    for i in range(n):\n        if s[i] != r[i]:\n            if a2 > 0 and k > 0:\n                a.append(a2)\n                a2 = 0\n            a2 = 0\n            a1 += 1\n        else:\n            if a1 > 0:\n                k = k + a1\n                l = l + 1\n                a1 = 0\n            a2 += 1\n    if a1 > 0:\n        k = k + a1\n        l = l + 1\n    ans = l * k\n    a.sort()\n    for i in range(len(a)):\n        k = k + a[i]\n        l = l - 1\n        if l == 0:\n            break\n        ans = min(ans, k * l)\n    print(ans)\n    t = t - 1", "from itertools import accumulate as ac\nfor _ in range(int(input())):\n    s = ''.join(('* '[x != y] for (x, y) in zip(input(), input()))).strip('*')\n    print(min((k * (len(s) - x) for (k, x) in enumerate(ac([0] + sorted(map(len, s.split()), reverse=True)), 1))))", "from itertools import accumulate, count\nfrom operator import sub, mul\nI = input\nt = int(I())\nfor _ in range(t):\n    s = ''.join(('* '[x != y] for (x, y) in zip(I(), I()))).strip('*')\n    a = accumulate([len(s)] + sorted(map(len, s.split()), reverse=True), sub)\n    print(min(map(mul, count(1), a)))", "from itertools import accumulate\nfrom operator import sub\nI = input\nt = int(I())\nfor _ in range(t):\n    s = ''.join(('* '[x != y] for (x, y) in zip(I(), I()))).strip('*')\n    a = accumulate([len(s)] + sorted(map(len, s.split()), reverse=True), sub)\n    print(min((k * l for (k, l) in enumerate(a, 1))))", "from itertools import accumulate\nI = input\nt = int(I())\nfor _ in range(t):\n    s = ''.join(('* '[x != y] for (x, y) in zip(I(), I()))).strip('*')\n    a = accumulate([-len(s)] + sorted(map(len, s.split()), reverse=True))\n    print(-max((k * minus_l for (k, minus_l) in enumerate(a, 1))))", "from itertools import accumulate\nI = input\nt = int(I())\nfor _ in range(t):\n    s = ''.join(('* '[x != y] for (x, y) in zip(I(), I()))).strip('*')\n    a = accumulate([-len(s)] + sorted(map(len, s.split()), reverse=True))\n    print(-max((k * x for (k, x) in enumerate(a, 1))))", "for _ in range(int(input())):\n    S = input().strip()\n    R = input().strip()\n    if S == R:\n        print(0)\n        continue\n    arr = []\n    res = 0\n    term = 0\n    leftx = 1\n    ind1 = 0\n    while S[ind1] == R[ind1]:\n        ind1 += 1\n    pntc = ind1\n    ind1 += 1\n    n = len(S)\n    while ind1 < n:\n        if S[ind1] != R[ind1]:\n            arr.append(ind1 - pntc - 1)\n            pntc = ind1\n            leftx += 1\n        ind1 += 1\n    term = leftx\n    res = term * leftx\n    arr = sorted(arr)\n    for i in range(len(arr)):\n        term -= 1\n        leftx += arr[i]\n        res = min(res, term * leftx)\n    print(res)", "from itertools import accumulate\nI = input\nt = int(I())\nfor _ in range(t):\n    s = ''.join(('* '[x != y] for (x, y) in zip(I(), I()))).strip('*')\n    l = s.count(' ')\n    s = s.split()\n    a = accumulate([0] + sorted(map(len, s)))\n    print(min(((len(s) - i) * (l + x) for (i, x) in enumerate(a, -1))))", "for _ in range(int(input())):\n    s = str(input())\n    r = str(input())\n    flag = 0\n    cp = 0\n    k = 0\n    t = 0\n    l = []\n    for i in range(len(s)):\n        if r[i] == s[i]:\n            if flag == 1:\n                cp += 1\n        else:\n            if flag == 0:\n                k += 1\n            flag = 1\n            t += 1\n            if cp > 0:\n                k += 1\n                l.append(cp)\n                cp = 0\n    ans = t * k\n    l.sort()\n    for i in l:\n        k -= 1\n        t += i\n        ans = min(ans, k * t)\n    print(ans)", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    s = input()\n    r = input()\n    st = -1\n    en = -2\n    l = []\n    n = len(s)\n    for i in range(n):\n        if s[i] != r[i]:\n            st = en = i\n            break\n    while True:\n        while i != n:\n            if s[i] == r[i]:\n                break\n            en = i\n            i += 1\n        j = i\n        while j != n:\n            if s[j] != r[j]:\n                break\n            j += 1\n        if j == n:\n            break\n        l.append(j - i)\n        i = j\n    l.sort(reverse=True)\n    c = en - st + 1\n    n = len(l)\n    ans = c\n    for i in range(n):\n        if i > 0:\n            l[i] += l[i - 1]\n        ans = min(ans, (c - l[i]) * (i + 2))\n    print(ans)", "for _ in range(int(input())):\n    a = str(input())\n    b = str(input())\n    if a == b:\n        print(0)\n        continue\n    indices = [i for i in range(len(a)) if a[i] != b[i]]\n    n = len(indices)\n    if n == 1:\n        print(1)\n        continue\n    temp = []\n    for k in range(n - 1):\n        temp.append(indices[k + 1] - indices[k] - 1)\n    temp.sort(reverse=True)\n    ans = indices[-1] - indices[0] + 1\n    length = ans\n    ind = 0\n    for k in range(2, n + 1):\n        length = length - temp[ind]\n        ans = min(ans, k * length)\n        ind += 1\n    print(ans)", "from collections import *\nfrom bisect import *\nfrom math import *\nimport sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t:\n    t -= 1\n    s = input().rstrip()\n    r = input().rstrip()\n    rr = len(s)\n    ind = []\n    for i in range(len(s)):\n        if s[i] != r[i]:\n            ind.append(i + 1)\n    ind1 = []\n    for i in range(len(ind) - 1):\n        ind1.append(ind[i + 1] - ind[i])\n    rr = len(ind) * len(ind)\n    k = len(ind)\n    l = len(ind)\n    ind1.sort()\n    for i in ind1:\n        l += i - 1\n        k -= 1\n        rr = min(rr, k * l)\n    print(rr)"]