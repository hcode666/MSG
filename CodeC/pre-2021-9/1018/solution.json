["for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    queries = [list(map(int, input().split())) for _ in range(q)]\n    prefix_sum = [0] * (n + 1)\n    for (l, r) in queries:\n        prefix_sum[l - 1] += 1\n        prefix_sum[r] -= 1\n    for j in range(1, n):\n        prefix_sum[j] += prefix_sum[j - 1]\n    for (l, r) in queries:\n        prefix_sum[r] -= r - l + 1\n    for i in range(1, n):\n        prefix_sum[i] += prefix_sum[i - 1]\n    print(*prefix_sum[:n])", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    queries = [list(map(int, input().split())) for _ in range(q)]\n    prefix_sum = [0] * (n + 1)\n    for (l, r) in queries:\n        prefix_sum[l - 1] += 1\n        prefix_sum[r] -= 1\n    for j in range(1, n):\n        prefix_sum[j] += prefix_sum[j - 1]\n    for (l, r) in queries:\n        prefix_sum[r] -= r - l + 1\n    for i in range(1, n):\n        prefix_sum[i] += prefix_sum[i - 1]\n    print(*prefix_sum[:n])", "t = int(input())\nwhile t > 0:\n    (n, q) = map(int, input().split())\n    ck = []\n    for _ in range(q):\n        (a, b) = map(int, input().split())\n        ck.append([a, b])\n    l = [0 for i in range(n + 3)]\n    for i in ck:\n        (a, b) = i\n        l[a] += 1\n        l[b + 1] += a - b - 2\n        l[b + 2] += b - a + 1\n    for i in range(1, len(l)):\n        l[i] = l[i] + l[i - 1]\n    for i in range(1, len(l)):\n        l[i] = l[i] + l[i - 1]\n    print(*l[1:len(l) - 2])\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = [0] * (n + 2)\n    queries = []\n    for _ in range(q):\n        (L, R) = map(int, input().split())\n        queries.append((L, R))\n        a[L] += 1\n        a[R + 1] -= 1\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    for (L, R) in queries:\n        a[R + 1] -= R - L + 1\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    for i in range(1, n + 1):\n        print(a[i], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = [0] * (n + 2)\n    queries = []\n    for _ in range(q):\n        (L, R) = map(int, input().split())\n        queries.append((L, R))\n        a[L] += 1\n        a[R + 1] -= 1\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    for (L, R) in queries:\n        a[R + 1] -= R - L + 1\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    for i in range(1, n + 1):\n        print(a[i], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = [0] * (n + 2)\n    queries = []\n    for _ in range(q):\n        (L, R) = map(int, input().split())\n        queries.append((L, R))\n        a[L] += 1\n        a[R + 1] -= 1\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    for (L, R) in queries:\n        a[R + 1] -= R - L + 1\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    for i in range(1, n + 1):\n        print(a[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    des = [0] * (n + 1)\n    ps = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        ps.append((l - 1, r))\n        des[l - 1] += 1\n        des[r] -= 1\n    for i in range(1, len(des)):\n        des[i] += des[i - 1]\n    for (l, r) in ps:\n        des[r] -= r - l\n    for i in range(1, len(des)):\n        des[i] += des[i - 1]\n    des.pop(-1)\n    print(*des)", "def query(l, r):\n    a[l] += 1\n    c[r + 1] += 1\n    b[r + 1] -= r - l + 1\n\ndef answer():\n    inc = 0\n    for i in range(1, n + 1):\n        if a[i]:\n            inc += a[i]\n        if b[i]:\n            inc -= c[i]\n        a[i] = a[i - 1] + b[i] + inc\n    return a[1:n + 1]\nfor T in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [0] * (n + 2)\n    b = [0] * (n + 2)\n    c = [0] * (n + 2)\n    for x in range(q):\n        (l, r) = map(int, input().split())\n        query(l, r)\n    print(*answer())", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    des = [0] * (n + 1)\n    ps = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        ps.append((l - 1, r))\n        des[l - 1] += 1\n        des[r] -= 1\n    for i in range(1, len(des)):\n        des[i] += des[i - 1]\n    for (l, r) in ps:\n        des[r] -= r - l\n    for i in range(1, len(des)):\n        des[i] += des[i - 1]\n    des.pop(-1)\n    print(*des)", "tt = int(input())\nfor _ in range(tt):\n    (n, q) = [int(i) for i in input().split()]\n    queries = []\n    a = [0] * (n + 1)\n    (l, r) = (0, 0)\n    for i in range(q):\n        (l, r) = [int(i) for i in input().split()]\n        queries.append((l, r))\n        a[l] += 1\n        if r + 1 <= n:\n            a[r + 1] -= 1\n    for i in range(2, n + 1):\n        a[i] += a[i - 1]\n    for i in range(q):\n        (l, r) = (queries[i][0], queries[i][1])\n        if r + 1 <= n:\n            a[r + 1] -= r - l + 1\n    for i in range(2, n + 1):\n        a[i] += a[i - 1]\n    for i in range(1, n + 1):\n        print(a[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [0] * (n + 1)\n    b = []\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        a[l - 1] += 1\n        a[r] -= 1\n        b.append([l - 1, r])\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    for (l, r) in b:\n        a[r] -= r - l\n    for i in range(1, len(a)):\n        a[i] += a[i - 1]\n    a.pop()\n    print(*a)", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, q) = map(int, input().split())\n    l1 = [0 for i in range(n + 1)]\n    l2 = [0 for i in range(n + 1)]\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        l1[a - 1] += -a + 2\n        l2[a - 1] += 1\n        l1[b] -= -a + 2\n        l2[b] -= 1\n    for i in range(1, n):\n        l1[i] += l1[i - 1]\n        l2[i] += l2[i - 1]\n    for i in range(n):\n        l2[i] = l1[i] + i * l2[i]\n    print(*l2[:n])", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, q) = map(int, input().split())\n    l1 = [0 for i in range(n + 1)]\n    l2 = [0 for i in range(n + 1)]\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        l1[a - 1] += -a + 2\n        l2[a - 1] += 1\n        l1[b] -= -a + 2\n        l2[b] -= 1\n    for i in range(1, n):\n        l1[i] += l1[i - 1]\n        l2[i] += l2[i - 1]\n    for i in range(n):\n        l2[i] = l1[i] + i * l2[i]\n    print(*l2[:n])", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, q) = map(int, input().split())\n    l1 = [0 for i in range(n + 1)]\n    l2 = [0 for i in range(n + 1)]\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        l1[a - 1] += -a + 2\n        l2[a - 1] += 1\n        l1[b] -= -a + 2\n        l2[b] -= 1\n    for i in range(1, n):\n        l1[i] += l1[i - 1]\n        l2[i] += l2[i - 1]\n    for i in range(n):\n        l2[i] = l1[i] + i * l2[i]\n    print(*l2[:n])", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, q) = map(int, input().split())\n    l1 = [0 for i in range(n + 1)]\n    l2 = [0 for i in range(n + 1)]\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        l1[a - 1] += 1\n        l1[b] -= 1\n        l2[b] -= b - a + 1\n    for i in range(1, len(l1)):\n        l1[i] += l1[i - 1]\n    for i in range(1, len(l1)):\n        l1[i] += l1[i - 1]\n    for i in range(1, len(l2)):\n        l2[i] += l2[i - 1]\n    for i in range(len(l2)):\n        l2[i] += l1[i]\n    print(*l2[:-1])", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    difArray = [[0, 0] for i in range(n + 2)]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        difArray[l][0] += 1\n        difArray[r + 1][0] -= 1\n        difArray[r + 1][1] -= r - l + 1\n    counter = 0\n    ans = [0] * n\n    pre = 0\n    for i in range(1, n + 1):\n        counter += difArray[i][0]\n        ans[i - 1] = pre + counter + difArray[i][1]\n        pre = ans[i - 1]\n    print(*ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    sol = [0] * n\n    left = [0] * n\n    right = defaultdict(lambda : [])\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        left[l] += 1\n        right[r].append(r - l + 1)\n    tot = [0] * n\n    sol[0] = left[0]\n    tot[0] = left[0] - len(right[0])\n    for i in range(1, n):\n        sol[i] = left[i] + sol[i - 1] + tot[i - 1]\n        for el in right[i - 1]:\n            sol[i] -= el\n        tot[i] = tot[i - 1] + left[i] - len(right[i])\n    print(' '.join([str(i) for i in sol]))", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [0] * (n + 3)\n    d = []\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        d.append((a, b))\n        arr[a] += 1\n        arr[b + 1] -= 1\n    for i in range(1, n + 1):\n        arr[i] += arr[i - 1]\n    for i in d:\n        arr[i[1] + 1] -= i[1] + 1 - i[0]\n    for i in range(1, n + 1):\n        arr[i] += arr[i - 1]\n    for i in range(1, n + 1):\n        print(arr[i], end=' ')\n    print()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = [0 for i in range(n + 2)]\n    k = []\n    for i in range(q):\n        (u, v) = map(int, input().split())\n        l[u] += 1\n        l[v + 1] -= 1\n        k.append([u, v + 1])\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in k:\n        l[i[1]] -= i[1] - i[0]\n    for i in range(1, n + 1):\n        l[i] += l[i - 1]\n    for i in range(1, n + 1):\n        print(l[i], end=' ')\n    print()", "from sys import stdin\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [0] * n\n    b = [0] * (n + 1)\n    c = [0] * (n + 1)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        a[l] += 1\n        b[r] += r - l\n        c[r] += 1\n    tot = cnt = 0\n    for i in range(n):\n        cnt += a[i] - c[i]\n        tot += cnt - b[i]\n        print(tot, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [0] * n\n    b = [0] * (n + 1)\n    c = [0] * (n + 1)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        a[l] += 1\n        b[r] += r - l\n        c[r] += 1\n    tot = cnt = 0\n    for i in range(n):\n        cnt += a[i] - c[i]\n        tot += cnt - b[i]\n        print(tot, end=' ')\n    print()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = [[] for _ in range(n + 1)]\n    b = [[] for _ in range(n + 1)]\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        a[l].append(1)\n        b[r].append(r - l)\n    tot = cnt = 0\n    for i in range(n):\n        for j in a[i]:\n            cnt += 1\n        for j in b[i]:\n            tot -= j\n            cnt -= 1\n        tot += cnt\n        print(tot, end=' ')\n    print()", "for k in range(int(input())):\n    a = list(map(int, input().split()))\n    n = a[0]\n    q = a[1]\n    s = [0] * 100002\n    e = [0] * 100002\n    for j in range(q):\n        b = list(map(int, input().split()))\n        s[b[0]] += 1\n        s[b[1] + 1] -= 1\n        e[b[1] + 1] -= b[1] - b[0] + 1\n    for i in range(1, n + 1):\n        s[i] += s[i - 1]\n    for i in range(1, n + 1):\n        e[i] += e[i - 1] + s[i]\n    for i in range(1, n + 1):\n        print(e[i], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, q) = list(map(int, input().split()))\n    d = dict()\n    p = [0] * (n + 2)\n    m = [0] * (n + 2)\n    k = [0] * (n + 2)\n    for _ in range(q):\n        (l, r) = list(map(int, input().split()))\n        p[l] += 1\n        m[r + 1] += 1\n        k[r + 1] += r - l + 1\n    h = []\n    g = []\n    curr = 0\n    times = 0\n    for i in range(1, n + 1):\n        times += p[i]\n        times -= m[i]\n        if m[i]:\n            curr -= k[i]\n        h.append(times)\n        g.append(curr)\n        curr += times\n        print(curr, end=' ')\n    print('')", "import sys\nimport math\nimport bisect\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s)])\n\ndef invr():\n    return map(int, input().split())\n\ndef printlist(var):\n    sys.stdout.write(' '.join(map(str, var)) + '\\n')\nt = inp()\nfor _ in range(t):\n    (N, Q) = invr()\n    d = [[0, 0] for i in range(N)]\n    for _ in range(Q):\n        (L, R) = invr()\n        if R < N:\n            d[R][0] += -(R - L + 2)\n            d[R][1] += -1\n        d[L - 1][0] += 1\n        d[L - 1][1] += 1\n    c = 0\n    x = 0\n    for i in range(1, N):\n        d[i][0] += d[i - 1][0] + d[i - 1][1]\n        d[i][1] += d[i - 1][1]\n    x = []\n    for i in range(N):\n        x.append(d[i][0])\n    print(*x)", "for i in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [0] * (n + 2)\n    for j in range(q):\n        (l, r) = map(int, input().split())\n        arr[l - 1] += 1\n        arr[r] -= r - l + 2\n        arr[r + 1] += r - l + 1\n    extra = [0] * n\n    extra[0] = arr[0]\n    for j in range(1, n):\n        extra[j] = extra[j - 1] + arr[j]\n    for j in range(1, n):\n        extra[j] = extra[j] + extra[j - 1]\n    print(*extra)", "from sys import stdin, stdout\nfrom collections import *\nfrom math import gcd, floor, ceil\n\ndef st():\n    return list(stdin.readline().strip())\n\ndef li():\n    return list(map(int, stdin.readline().split()))\n\ndef mp():\n    return map(int, stdin.readline().split())\n\ndef inp():\n    return int(stdin.readline())\n\ndef pr(n):\n    return stdout.write(str(n) + '\\n')\nmod = 1000000007\nINF = float('inf')\n\ndef solve():\n    (n, q) = mp()\n    l = [0] * (n + 1)\n    k = [li() for i in range(q)]\n    for i in k:\n        (a, b) = i\n        l[a - 1] += 1\n        l[b] -= 1\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    for i in k:\n        (a, b) = i\n        l[b] -= b - a + 1\n    for i in range(1, n):\n        l[i] += l[i - 1]\n    print(*l[:-1])\nfor _ in range(inp()):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    qarr = []\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        qarr.append((a, b))\n    a = [0] * (n + 2)\n    for i in qarr:\n        a[i[0]] += 1\n        a[i[1] + 1] -= 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    for i in qarr:\n        a[i[1] + 1] -= i[1] - i[0] + 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    for i in range(1, n + 1):\n        print(a[i], end=' ')\n    print()", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    ind = defaultdict(list)\n    unique_val = 1\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind[l].append(unique_val)\n        ind[r + 1].append(-unique_val)\n        unique_val += 1\n    no_sts = 0\n    ispeed = 0\n    occ = {}\n    for i in range(n):\n        for j in ind[i]:\n            if j > 0:\n                occ[j] = i\n                ispeed += 1\n            elif j < 0:\n                ispeed -= 1\n                no_sts -= i - occ[-j]\n        no_sts += ispeed\n        print(no_sts, end=' ')\n    print()", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    ind = defaultdict(list)\n    occ = {}\n    unique_val = 1\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        ind[l].append(unique_val)\n        ind[r + 1].append(-unique_val)\n        unique_val += 1\n    no_sts = 0\n    ispeed = 0\n    for i in range(n):\n        for j in ind[i]:\n            if j > 0:\n                occ[j] = i\n                ispeed += 1\n            if j < 0:\n                no_sts -= i - occ[-j]\n                ispeed -= 1\n        no_sts += ispeed\n        print(no_sts, end=' ')\n    print()", "import sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush\nfrom math import *\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\nimport copy\nimport time\nstarttime = time.time()\nmod = int(pow(10, 9) + 7)\nmod2 = 998244353\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef out(*var, end='\\n'):\n    sys.stdout.write(' '.join(map(str, var)) + end)\n\ndef L():\n    return list(sp())\n\ndef sl():\n    return list(ssp())\n\ndef sp():\n    return map(int, data().split())\n\ndef ssp():\n    return map(str, data().split())\n\ndef l1d(n, val=0):\n    return [val for i in range(n)]\n\ndef l2d(n, m, val=0):\n    return [l1d(n, val) for j in range(m)]\ntry:\n    sys.stdin = open('input.txt', 'r')\nexcept:\n    pass\n\ndef pmat(A):\n    for ele in A:\n        print(*ele, end='\\n')\n\ndef seive():\n    prime = [1 for i in range(10 ** 6 + 1)]\n    prime[0] = 0\n    prime[1] = 0\n    for i in range(10 ** 6 + 1):\n        if prime[i]:\n            for j in range(2 * i, 10 ** 6 + 1, i):\n                prime[j] = 0\n    return prime\ntc = 1\ntc = L()[0]\nfor _ in range(tc):\n    (n, q) = L()\n    op = [0 for i in range(n + 2)]\n    cl = [0 for i in range(n + 2)]\n    nop = [0 for i in range(n + 2)]\n    for queries in range(q):\n        (x, y) = L()\n        op[x] += 1\n        cl[y + 1] -= y - x + 1\n        nop[y + 1] -= 1\n    A = [0 for i in range(n + 1)]\n    curr = 0\n    score = 0\n    for i in range(1, n + 1):\n        curr += op[i] + nop[i]\n        score = A[i - 1] + curr + cl[i]\n        A[i] = score\n    print(*A[1:])\nendtime = time.time()", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, q) = map(int, input().split())\n    l1 = [0 for i in range(n + 1)]\n    l2 = [0 for i in range(n + 1)]\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        l1[a - 1] += -a + 2\n        l2[a - 1] += 1\n        l1[b] -= -a + 2\n        l2[b] -= 1\n    for i in range(1, n):\n        l1[i] += l1[i - 1]\n        l2[i] += l2[i - 1]\n    for i in range(n):\n        l2[i] = l1[i] + i * l2[i]\n    print(*l2[:n])", "for t in range(int(input())):\n    (n, q) = map(int, input().strip().split(' '))\n    arr = [[0, 0] for i in range(n + 7)]\n    for i in range(q):\n        (l, r) = map(int, input().strip().split(' '))\n        arr[l][0] += 1\n        arr[r + 1][0] -= r - l + 1\n        arr[l][1] += 1\n        arr[r][1] -= 1\n    for i in range(1, n + 1):\n        arr[i][0] += arr[i - 1][0] + arr[i - 1][1]\n        arr[i][1] += arr[i - 1][1]\n    for i in range(1, n + 1):\n        print(arr[i][0], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, q) = [int(p) for p in input().split()]\n    v1 = [0] * n\n    v2 = [0] * n\n    v3 = [0] * n\n    v4 = [0] * n\n    res = 0\n    cnt = 0\n    for i in range(q):\n        (l, r) = [int(p) for p in input().split()]\n        l -= 1\n        r -= 1\n        v1[r] += r - l + 1\n        v2[r] += 1\n        if l - 1 > -1:\n            v3[l - 1] += 1\n    for i in range(n - 1, -1, -1):\n        v4[i] = v1[i] - cnt + res\n        cnt += v2[i] - v3[i]\n        res = v4[i]\n    print(*v4)", "from math import log2\nimport sys\nsys.setrecursionlimit(10 ** 7)\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    m = [0 for i in range(n + 2)]\n    inc = m[:]\n    distruction = m[:]\n    dec = m[:]\n    answer = m[:]\n    shares = m[:]\n    for j in range(k):\n        (a, b) = map(int, input().split())\n        inc[a] += 1\n        dec[b + 1] += 1\n        distruction[b + 1] += b - a + 1\n    shares[1] = inc[1]\n    answer[1] = inc[1]\n    for i in range(2, len(shares)):\n        shares[i] = shares[i - 1] + inc[i] - dec[i]\n    for i in range(2, len(shares)):\n        answer[i] = answer[i - 1] + shares[i] - distruction[i]\n    ans = answer[1:-1]\n    print(*ans)", "from collections import Counter\nfor i in range(int(input())):\n    (n, q) = map(int, input().split())\n    (s, e, f) = (Counter(), Counter(), Counter())\n    for j in range(q):\n        (a, b) = map(int, input().split())\n        s[a - 1] += 1\n        e[b - 1] += 1\n        f[b - 1] += b - a + 1\n    p = [0] * n\n    p[0] = s[0]\n    an = s[0] - e[0]\n    for j in range(1, n):\n        an += s[j]\n        p[j] = p[j - 1] - f[j - 1] + an\n        an -= e[j]\n    print(*p)", "from collections import Counter\nfor i in range(int(input())):\n    (n, q) = map(int, input().split())\n    (s, e, f) = (Counter(), Counter(), Counter())\n    for j in range(q):\n        (a, b) = map(int, input().split())\n        s[a - 1] += 1\n        e[b - 1] += 1\n        f[b - 1] += b - a + 1\n    p = [0] * n\n    p[0] = s[0]\n    an = s[0] - e[0]\n    for j in range(1, n):\n        an += s[j]\n        p[j] = p[j - 1] - f[j - 1] + an\n        an -= e[j]\n    print(*p)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        m = r - l + 1\n        l -= 1\n        r -= 1\n        sm = m * (m + 1) // 2\n        a[l] += 1\n        a[r + 1] -= 1 + m\n        b[l] += 1\n        b[r + 1] -= 1\n    sm = 0\n    res = []\n    for i in range(n):\n        res.append(a[i] + sm)\n        sm += b[i]\n    for i in range(1, n):\n        res[i] += res[i - 1]\n    print(*res)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    (start_count, end_count) = ([0] * (n + 1), [0] * (n + 1))\n    (start_sum, end_sum) = ([0] * (n + 1), [0] * (n + 1))\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        start_count[l] += 1\n        start_sum[l] += l\n        end_count[r] += 1\n        end_sum[r] += l\n    count = 0\n    x = 0\n    for i in range(1, n + 1):\n        count -= end_count[i - 1]\n        x -= end_sum[i - 1]\n        count += start_count[i]\n        x += start_sum[i]\n        print((i + 1) * count - x, end=' ')\n    print()", "for tc in range(int(input())):\n    (N, Q) = map(int, input().split())\n    add = [[] for i in range(N)]\n    rem = [[] for i in range(N)]\n    for i in range(Q):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        l = b - a + 1\n        add[a].append(1)\n        rem[b].append(l)\n    ans = []\n    currSum = currCnt = 0\n    for i in range(N):\n        while add[i]:\n            currSum += add[i].pop()\n            currCnt += 1\n        ans.append(currSum)\n        while rem[i]:\n            currSum -= rem[i].pop()\n            currCnt -= 1\n        currSum += currCnt\n    print(*ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [0] * (n + 2)\n    e = [0] * (n + 2)\n    for i in range(k):\n        (u, v) = map(int, input().split())\n        a[u] += 1\n        a[v + 1] -= 1\n        e[v + 1] += v - u + 1\n    s = a[1]\n    c = s\n    for i in range(2, n + 1):\n        s += a[i]\n        c += s\n        c -= e[i]\n        a[i] = c\n    print(*a[1:n + 1])", "import sys\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\ninp = lambda : list(map(int, sys.stdin.readline().rstrip('\\r\\n').split()))\ntc = 1\n(tc,) = inp()\nfor _ in range(tc):\n    (n, q) = inp()\n    a = [0] * (n + 1)\n    b = [0] * (n + 1)\n    for k in range(q):\n        (i, j) = inp()\n        a[i - 1] += 1\n        a[j] -= 1\n        b[j] += j - i + 1\n    for i in range(1, n + 1):\n        a[i] += a[i - 1]\n    ans = [0] * n\n    cur = 0\n    for i in range(n):\n        cur = cur - b[i] + a[i]\n        ans[i] = cur\n    print(*ans)", "import sys\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\n\ndef main():\n    for _ in range(int(input())):\n        (n, q) = map(int, input().split())\n        p = [0] * (n + 2)\n        m = [0] * (n + 2)\n        k = [0] * (n + 2)\n        sum = 0\n        for i in range(q):\n            (l, r) = map(int, input().split())\n            p[l] += 1\n            m[r + 1] += 1\n            k[r + 1] += r - l + 1\n        curr = 0\n        times = 0\n        for i in range(1, n + 1):\n            times += p[i]\n            times -= m[i]\n            if m[i]:\n                curr -= k[i]\n            curr += times\n            print(curr, end=' ')\n        print('')\n    return\nmain()", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = {}\n    mp = {}\n    c = 1\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        a[l] = a.get(l, []) + [c]\n        a[r] = a.get(r, []) + [-c]\n        c += 1\n    spd = 0\n    c = 0\n    for i in range(n):\n        r = 0\n        if i in a:\n            for j in a[i]:\n                if j > 0:\n                    mp[j] = i\n                    c += 1\n                if j < 0:\n                    spd -= i - mp[-j] + 1\n                    r += 1\n        spd += c\n        c -= r\n        print(spd, end=' ')\n    print()"]