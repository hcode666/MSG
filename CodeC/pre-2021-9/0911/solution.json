["(N, M) = input().split()\n(N, M) = (int(N), int(M))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nlow = 0\nhigh = A[0] * B[0]\nfor day in range(1, N):\n    high = max(high, A[day] * B[day])\nwhile low < high:\n    mid = (low + high) // 2\n    bal = 0\n    for day in range(N):\n        if B[day] != 0:\n            bal += max(A[day] - mid // B[day], 0)\n    if bal <= M:\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "(N, M) = input().split()\n(N, M) = (int(N), int(M))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nlow = 0\nhigh = A[0] * B[0]\nfor day in range(1, N):\n    high = max(high, A[day] * B[day])\nwhile low < high:\n    mid = (low + high) // 2\n    bal = 0\n    for day in range(N):\n        if B[day] != 0:\n            bal += max(A[day] - mid // B[day], 0)\n    if bal <= M:\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "(N, M) = input().split()\n(N, M) = (int(N), int(M))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nlow = 0\nhigh = A[0] * B[0]\nfor day in range(1, N):\n    high = max(high, A[day] * B[day])\nwhile low < high:\n    mid = (low + high) // 2\n    bal = 0\n    for day in range(N):\n        if B[day] != 0:\n            bal += max(A[day] - mid // B[day], 0)\n    if bal <= M:\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nlow = 0\ntotalNumBalloone = sum(a)\nhigh = max(b) * (totalNumBalloone - m)\nans = -1\n\ndef possible(mid, a, b, n, m):\n    sum = 0\n    for i in range(n):\n        sum += max(0, a[i] - mid // b[i])\n        if sum > m:\n            return False\n    return True\nwhile low <= high:\n    mid = low + (high - low) // 2\n    if possible(mid, a, b, n, m):\n        ans = mid\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(ans)", "def possible(max_candies, a, b, n, m):\n    sum = 0\n    for i in range(n):\n        sum += max(0, a[i] - max_candies // b[i])\n        if sum > m:\n            return False\n    return True\n\ndef solve(a, b, n, m):\n    lo = 0\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    hi = max(b) * (sum - m)\n    ans = -1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if possible(mid, a, b, n, m):\n            ans = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return ans\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nprint(solve(a, b, n, m))", "def possible(max_candies, a, b, n, m):\n    sum = 0\n    for i in range(n):\n        sum += max(0, a[i] - max_candies // b[i])\n        if sum > m:\n            return False\n    return True\n\ndef solve(a, b, n, m):\n    lo = 0\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    hi = max(b) * (sum - m)\n    ans = -1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if possible(mid, a, b, n, m):\n            ans = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return ans\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nprint(solve(a, b, n, m))", "def possible(max_candies, a, b, n, m):\n    sum = 0\n    for i in range(n):\n        sum += max(0, a[i] - max_candies // b[i])\n        if sum > m:\n            return False\n    return True\n\ndef solve(a, b, n, m):\n    lo = 0\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    hi = max(b) * (sum - m)\n    ans = -1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if possible(mid, a, b, n, m):\n            ans = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return ans\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nprint(solve(a, b, n, m))", "def possible(max_candies, a, b, n, m):\n    sum = 0\n    for i in range(n):\n        sum += max(0, a[i] - max_candies // b[i])\n        if sum > m:\n            return False\n    return True\n\ndef solve(a, b, n, m):\n    lo = 0\n    sum = 0\n    for i in range(n):\n        sum += a[i]\n    hi = max(b) * (sum - m)\n    ans = -1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if possible(mid, a, b, n, m):\n            ans = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return ans\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nprint(solve(a, b, n, m))", "def possible(max_candies, a, b, n, m):\n    sum = 0\n    for i in range(n):\n        sum += max(0, a[i] - max_candies // b[i])\n        if sum > m:\n            return False\n    return True\n\ndef solve(a, b, n, m):\n    lo = 0\n    hi = 0\n    for i in range(n):\n        hi = max(hi, a[i] * b[i])\n    ans = -1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if possible(mid, a, b, n, m):\n            ans = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return ans\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nprint(solve(a, b, n, m))", "def snek1(z, n, m, b, c):\n    ans = 0\n    for i in range(n):\n        x = b[i] - z // c[i]\n        ans += max(0, x)\n        if ans > m:\n            return False\n    return True\n\ndef snek2(n, m, b, c):\n    l = 0\n    r = 0\n    for i in range(n):\n        x = b[i] * c[i]\n        if x > r:\n            r = x\n    ans = 0\n    while l <= r:\n        z = (l + r) // 2\n        if snek1(z, n, m, b, c):\n            ans = z\n            r = z - 1\n        else:\n            l = z + 1\n    return ans\n(n, m) = map(int, input().split())\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nprint(snek2(n, m, b, c))", "def snek1(z, n, m, b, c):\n    ans = 0\n    for i in range(n):\n        x = b[i] - z // c[i]\n        ans += max(0, x)\n        if ans > m:\n            return False\n    return True\n\ndef snek2(n, m, b, c):\n    l = 0\n    r = 0\n    for i in range(n):\n        x = b[i] * c[i]\n        if x > r:\n            r = x\n    ans = 0\n    while l <= r:\n        z = (l + r) // 2\n        if snek1(z, n, m, b, c):\n            ans = z\n            r = z - 1\n        else:\n            l = z + 1\n    return ans\n(n, m) = map(int, input().split())\nb = list(map(int, input().split()))\nc = list(map(int, input().split()))\nprint(snek2(n, m, b, c))", "def good(maxcan, n, m, balls, cand):\n    cntballons = 0\n    for i in range(n):\n        ball_Onday = balls[i] - maxcan // cand[i]\n        cntballons += max(0, ball_Onday)\n        if cntballons > m:\n            return False\n    return True\n\ndef minCandiesAppy(n, m, balloons, candies):\n    left = 0\n    right = 0\n    for i in range(n):\n        temp = balloons[i] * candies[i]\n        if temp > right:\n            right = temp\n    ans = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if good(mid, n, m, balloons, candies):\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return ans\n(n, m) = map(int, input().split())\nballoons = list(map(int, input().split()))\ncandies = list(map(int, input().split()))\nprint(minCandiesAppy(n, m, balloons, candies))", "def good(maxcan, n, m, balls, cand):\n    cntballons = 0\n    for i in range(n):\n        ball_Onday = balls[i] - maxcan // cand[i]\n        cntballons += max(0, ball_Onday)\n        if cntballons > m:\n            return False\n    return True\n\ndef minCandiesAppy(n, m, balloons, candies):\n    left = 0\n    right = 0\n    for i in range(n):\n        temp = balloons[i] * candies[i]\n        if temp > right:\n            right = temp\n    ans = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if good(mid, n, m, balloons, candies):\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return ans\n\ndef main():\n    (n, m) = map(int, input().split())\n    balloons = list(map(int, input().split()))\n    candies = list(map(int, input().split()))\n    print(minCandiesAppy(n, m, balloons, candies))\nmain()", "def good(maxcan, n, m, balls, cand):\n    cntballons = 0\n    for i in range(n):\n        ball_Onday = balls[i] - maxcan // cand[i]\n        cntballons += max(0, ball_Onday)\n        if cntballons > m:\n            return False\n    return True\n\ndef minCandiesAppy(n, m, balloons, candies):\n    left = 0\n    right = max(balloons) * max(candies)\n    ans = 0\n    while left <= right:\n        mid = (left + right) // 2\n        if good(mid, n, m, balloons, candies):\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return ans\n\ndef main():\n    (n, m) = map(int, input().split())\n    balloons = list(map(int, input().split()))\n    candies = list(map(int, input().split()))\n    print(minCandiesAppy(n, m, balloons, candies))\nmain()", "import math\n(N, M) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nl = 0\nh = a[0] * b[0]\nfor j in range(1, N):\n    h = max(h, a[j] * b[j])\nans = h\nwhile l <= h:\n    mid = (l + h) // 2\n    tot = 0\n    for i in range(N):\n        tot += max(0, a[i] - mid // b[i])\n    if tot > M:\n        l = mid + 1\n    else:\n        ans = mid\n        h = mid - 1\nprint(ans)", "def isvalid(a, b, m, mid):\n    t = 0\n    for i in range(len(a)):\n        g = a[i] - mid // b[i]\n        t += max(0, g)\n        if t > m:\n            return False\n    return True\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns = 0\ne = 10 ** 18\nans = -1\nwhile s <= e:\n    mid = (s + e) // 2\n    if isvalid(a, b, m, mid):\n        ans = mid\n        e = mid - 1\n    else:\n        s = mid + 1\nprint(int(ans))", "def isvalid(a, b, m, mid):\n    t = 0\n    for i in range(len(a)):\n        g = a[i] - mid // b[i]\n        t += max(0, g)\n        if t > m:\n            return False\n    return True\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns = 0\ne = 10 ** 18\nans = -1\nwhile s <= e:\n    mid = (s + e) // 2\n    if isvalid(a, b, m, mid):\n        ans = mid\n        e = mid - 1\n    else:\n        s = mid + 1\nprint(int(ans))", "def isvalid(a, b, m, mid):\n    t = 0\n    for i in range(len(a)):\n        g = a[i] - mid // b[i]\n        t += max(0, g)\n        if t > m:\n            return False\n    return True\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns = 0\ne = 10 ** 18\nans = -1\nwhile s <= e:\n    mid = (s + e) // 2\n    if isvalid(a, b, m, mid):\n        ans = mid\n        e = mid - 1\n    else:\n        s = mid + 1\nprint(int(ans))", "(n, b) = map(int, input().split())\nbal = list(map(int, input().split()))\ncan = list(map(int, input().split()))\n\ndef is_valid_total_candies(mid, bal, can, b):\n    rem_bal = 0\n    for i in range(len(bal)):\n        if bal[i] * can[i] > mid:\n            bal_mid = mid // can[i]\n            rem_bal += bal[i] - bal_mid\n        if rem_bal > b:\n            return False\n    return True\nlo = 0\nhi = 0\nfor i in range(n):\n    if bal[i] * can[i] >= hi:\n        hi = bal[i] * can[i]\nwhile lo < hi:\n    mid = lo + (hi - lo) // 2\n    valid = is_valid_total_candies(mid, bal, can, b)\n    if valid:\n        hi = mid\n    else:\n        lo = mid + 1\nprint(lo)", "(n, b) = map(int, input().split())\nbal = list(map(int, input().split()))\ncan = list(map(int, input().split()))\n\ndef is_valid_total_candies(mid, bal, can, b):\n    rem_bal = 0\n    for i in range(len(bal)):\n        if bal[i] * can[i] > mid:\n            bal_mid = mid // can[i]\n            rem_bal += bal[i] - bal_mid\n        if rem_bal > b:\n            return False\n    return True\nlo = 0\nhi = 0\nfor i in range(n):\n    if bal[i] * can[i] >= hi:\n        hi = bal[i] * can[i]\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    valid = is_valid_total_candies(mid, bal, can, b)\n    if valid:\n        hi = mid\n    else:\n        lo = mid + 1\nprint(lo)", "(n, b) = map(int, input().split())\nbal = list(map(int, input().split()))\ncan = list(map(int, input().split()))\n\ndef is_valid_total_candies(mid, bal, can, b):\n    rem_bal = 0\n    i = 0\n    while i < len(bal):\n        if bal[i] * can[i] > mid:\n            bal_mid = mid // can[i]\n            rem_bal += bal[i] - bal_mid\n        if rem_bal > b:\n            return False\n        i += 1\n    return True\nhi = 0\nfor i in range(n):\n    if bal[i] * can[i] >= hi:\n        hi = bal[i] * can[i]\nlo = 0\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    valid = is_valid_total_candies(mid, bal, can, b)\n    if valid:\n        hi = mid\n    else:\n        lo = mid + 1\nprint(lo)", "def solve(l1, l2, k, ans, n):\n    w = 0\n    i = 0\n    while i < n:\n        if c[i] > ans:\n            m = ans // b[i]\n            w += a[i] - m\n        if w > k:\n            return 0\n        i += 1\n    return 1\n(n, k) = (int(s) for s in input().split())\na = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [a[i] * b[i] for i in range(n)]\nlow = 0\nhigh = max(c)\nwhile low < high:\n    ans = (high + low) // 2\n    if solve(a, b, k, ans, n):\n        high = ans\n    else:\n        low = ans + 1\nprint(low)", "def solve(l1, l2, k, ans, n):\n    w = 0\n    i = 0\n    while i < n:\n        if c[i] > ans:\n            m = ans // l2[i]\n            w += l1[i] - m\n        if w > k:\n            return 0\n        i += 1\n    return 1\n(n, k) = (int(s) for s in input().split())\na = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [a[i] * b[i] for i in range(n)]\nlow = 0\nhigh = max(c)\nwhile low < high:\n    ans = (high + low) // 2\n    if solve(a, b, k, ans, n):\n        high = ans\n    else:\n        low = ans + 1\nprint(low)", "def solve(l1, l2, k, ans, n):\n    w = 0\n    i = 0\n    while i < n:\n        if l1[i] * l2[i] > ans:\n            m = ans // l2[i]\n            w += l1[i] - m\n        if w > k:\n            return 0\n        i += 1\n    return 1\n(n, k) = (int(s) for s in input().split())\na = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [a[i] * b[i] for i in range(n)]\nlow = 0\nhigh = max(c)\nwhile low < high:\n    ans = (high + low) // 2\n    if solve(a, b, k, ans, n):\n        high = ans\n    else:\n        low = ans + 1\nprint(low)", "def solve(l1, l2, k, ans, n):\n    w = 0\n    i = 0\n    while i < n:\n        if l1[i] * l2[i] > ans:\n            m = ans // l2[i]\n            w += l1[i] - m\n        if w > k:\n            return 0\n        i += 1\n    return 1\n(n, k) = (int(s) for s in input().split())\na = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [a[i] * b[i] for i in range(n)]\nlow = 0\nhigh = max(c)\nans = (high + low) // 2\nwhile low < high:\n    if solve(a, b, k, ans, n):\n        high = ans\n        ans = (high + low) // 2\n    else:\n        low = ans + 1\n        ans = (high + low) // 2\nprint(ans)", "from functools import reduce as rd\nimport operator as optr\nimport math\nimport itertools\ninp = lambda : map(int, input().split())\n\ndef func(n, m, c):\n    val = m\n    i = len(c) - 1\n    while i >= 0:\n        if c[i][0] - n <= 0:\n            i -= 1\n            continue\n        check = (c[i][0] - n) // c[i][1]\n        if (c[i][0] - n) % c[i][1] > 0:\n            check += 1\n        val -= check\n        if val < 0:\n            return 0\n        i -= 1\n    return 1\n(n, m) = inp()\nl = list(inp())\nadd = sum(l)\nb = list(inp())\na = []\nfor i in range(n):\n    a.append(b[i] * l[i])\nc = list(zip(a, b))\nif add <= m:\n    print(0)\nelse:\n    c.sort()\n    left = c[0][0]\n    right = c[n - 1][0]\n    (mid, flag) = (0, 0)\n    while left <= right:\n        mid = (left + right) // 2\n        if func(mid, m, c) == 0:\n            left = mid + 1\n            flag = 0\n        else:\n            right = mid - 1\n            flag = 1\n    print(max(left, right))", "(n, m) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = []\nfor i in range(0, len(A)):\n    C.append(A[i] * B[i])\nD = []\nfor (i, x) in sorted(zip(C, B)):\n    D.append(x)\nC.sort()\nl = 0\nh = max(C)\nwhile l < h:\n    b = 0\n    mid = (h + l) // 2\n    for i in range(len(C)):\n        if C[i] <= mid:\n            continue\n        else:\n            x = (C[i] - mid) // D[i]\n            if C[i] - D[i] * x <= mid:\n                b += x\n            else:\n                b += x + 1\n    if b <= m:\n        h = mid\n    else:\n        l = mid + 1\nprint(l)", "def ans(a, b, n, m, mid, c):\n    i = 0\n    count = 0\n    while i < n:\n        if c[i] > mid:\n            count += a[i] - mid // b[i]\n        if m < count:\n            return False\n        i += 1\n    return True\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nfor i in range(n):\n    c.append(a[i] * b[i])\nlow = 0\nhigh = max(c)\nmid = low + (high - low) // 2\nwhile low < high:\n    if ans(a, b, n, m, mid, c) == True:\n        high = mid\n    elif ans(a, b, n, m, mid, c) == False:\n        low = mid + 1\n    mid = low + (high - low) // 2\nprint(mid)", "def ans(a, b, n, m, mid, c):\n    i = 0\n    count = 0\n    while i < n:\n        if c[i] > mid:\n            count += a[i] - mid // b[i]\n        if m < count:\n            return False\n        i += 1\n    return True\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nfor i in range(n):\n    c.append(a[i] * b[i])\nlow = 0\nhigh = max(c)\nmid = low + (high - low) // 2\nwhile low < high:\n    if ans(a, b, n, m, mid, c) == True:\n        high = mid\n    elif ans(a, b, n, m, mid, c) == False:\n        low = mid + 1\n    mid = low + (high - low) // 2\nprint(mid)", "def check(A, B, maxCi, n, m):\n    count = 0\n    for day in range(n):\n        wants = A[day]\n        f = maxCi // B[day]\n        if f > 0:\n            atleast = max(0, wants - f)\n            count += atleast\n        else:\n            count += wants\n    return count <= m\n\ndef solve(A, B, m, n):\n    (l, h) = (0, 10 ** 18)\n    while l < h:\n        ci = (l + h) // 2\n        if check(A, B, ci, n, m):\n            h = ci\n        else:\n            l = ci + 1\n    return h\n(n, m) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nans = solve(A, B, m, n)\nprint(ans)", "def bs(l, h):\n    while l < h:\n        m = (l + h) // 2\n        if gf(m):\n            h = m\n        else:\n            l = m + 1\n    return l\n\ndef gf(x):\n    d = c\n    for i in range(n):\n        d -= min(a[i], x // b[i])\n    return d <= 0\n(n, m) = map(int, input().split())\na = tuple(map(int, input().split()))\nb = tuple(map(int, input().split()))\nc = sum(a)\nc -= m\nind = 0\nh = 0\nfor i in range(n):\n    h = max(h, a[i] * b[i])\nprint(bs(0, h))", "def isvalid(a, b, m, mid):\n    t = 0\n    for i in range(len(a)):\n        g = a[i] - mid // b[i]\n        t += max(0, g)\n        if t > m:\n            return False\n    return True\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\ns = 0\ne = 10 ** 18\nans = -1\nwhile s <= e:\n    mid = (s + e) // 2\n    if isvalid(a, b, m, mid):\n        ans = mid\n        e = mid - 1\n    else:\n        s = mid + 1\nprint(int(ans))", "(n, m) = map(int, input().split())\nballons = list(map(int, input().split()))\ncandy = list(map(int, input().split()))\n(low, high) = (0, 10 ** 18)\n\ndef check(val):\n    add = 0\n    for i in range(n):\n        add += max(ballons[i] - val // candy[i], 0)\n        if m < add:\n            return False\n    return True\nwhile low <= high:\n    mid = (low + high) // 2\n    if check(mid):\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(low)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n(lo, hi) = (0, 0)\nfor i in range(n):\n    hi += a[i] * b[i]\n\ndef check(mid):\n    x = 0\n    for i in range(n):\n        x += max(a[i] - mid // b[i], 0)\n    if x <= m:\n        return True\n    return False\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if check(mid):\n        res = mid\n        hi = mid - 1\n    else:\n        lo = mid + 1\nprint(res)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\n(lo, hi) = (0, 0)\nfor i in range(n):\n    hi += a[i] * b[i]\n\ndef check(mid):\n    x = 0\n    for i in range(n):\n        x += max(a[i] - mid // b[i], 0)\n    if x <= m:\n        return True\n    return False\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if check(mid):\n        res = mid\n        hi = mid - 1\n    else:\n        lo = mid + 1\nprint(res)", "def check(mid):\n    s = 0\n    for i in range(n):\n        curr = max(0, a[i] - mid // b[i])\n        s += curr\n    return s\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nlow = 0\nhigh = max(a) * max(b)\nwhile low <= high:\n    mid = (low + high) // 2\n    val = check(mid)\n    if val <= m:\n        res = mid\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(res)", "def check(mid):\n    s = 0\n    for i in range(n):\n        curr = max(0, a[i] - mid // b[i])\n        s += curr\n    return s\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nlow = 0\nhigh = 10 ** 18\nwhile low <= high:\n    mid = (low + high) // 2\n    val = check(mid)\n    if val <= m:\n        res = mid\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(res)", "def solve(l1, l2, k, ans, n):\n    w = 0\n    i = 0\n    while i < n:\n        if l1[i] * l2[i] > ans:\n            m = ans // l2[i]\n            w += l1[i] - m\n        if w > k:\n            return 0\n        i += 1\n    return 1\n(n, k) = (int(s) for s in input().split())\na = [int(s) for s in input().split()]\nb = [int(s) for s in input().split()]\nc = [a[i] * b[i] for i in range(n)]\nlow = 0\nhigh = max(c)\nans = (high + low) // 2\nwhile low < high:\n    if solve(a, b, k, ans, n):\n        high = ans\n        ans = (high + low) // 2\n    else:\n        low = ans + 1\n        ans = (high + low) // 2\nprint(ans)", "def balloons_needed(A, B, candies):\n    c = 0\n    for i in range(0, len(A)):\n        if B[i] == 0:\n            continue\n        c += max(A[i] - candies // B[i], 0)\n    return c\n(n, m) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\n(l, r) = (0, 0)\nfor i in range(n):\n    r = max(r, A[i] * B[i])\nwhile l < r:\n    mid = (l + r) // 2\n    balloons = balloons_needed(A, B, mid)\n    if balloons <= m:\n        r = mid\n    else:\n        l = mid + 1\nprint(l)", "def chk(mid, A, B, C, n, c):\n    count = 0\n    for i in range(n):\n        if C[i] > mid:\n            count += A[i] - mid // B[i]\n    if count <= c:\n        return True\n    return False\nfor _ in range(1):\n    (n, c) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = [A[i] * B[i] for i in range(0, n)]\n    start = 0\n    end = max(C)\n    answer = -1\n    while start <= end:\n        mid = (start + end) // 2\n        if chk(mid, A, B, C, n, c):\n            answer = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    print(answer)", "def succeed(mid, m):\n    d = mid\n    z = m\n    k = 0\n    for i in range(n):\n        if a[i] * b[i] > d:\n            v = a[i] * b[i] - d\n            if v % b[i]:\n                u = v // b[i] + 1\n            else:\n                u = v // b[i]\n            z -= u\n        if z < 0:\n            k = 1\n            break\n    if k:\n        return 0\n    else:\n        return 1\n\ndef bsea(l, r, m):\n    while r - l > 1:\n        mid = (l + r) // 2\n        if succeed(mid, m):\n            r = mid\n        else:\n            l = mid\n    return r\n(n, m) = [int(x) for x in input().strip().split(' ')]\na = [int(x) for x in input().strip().split(' ')]\nb = [int(x) for x in input().strip().split(' ')]\nmax = 0\ns = 0\nfor i in range(n):\n    s += a[i]\n    if a[i] * b[i] > max:\n        max = a[i] * b[i]\nif s <= m:\n    print(0)\nelse:\n    l = 0\n    r = max\n    print(bsea(l, r, m))", "def needm(c, k):\n    need = 0\n    for (a, b) in cs:\n        buy = k // b\n        if buy < a:\n            need += a - buy\n    return need\n(n, m) = map(int, input().split())\nays = list(map(int, input().split()))\nbs = list(map(int, input().split()))\nif sum(ays) <= m:\n    print(0)\nelse:\n    cs = list(zip(ays, bs))\n    hi = max((a * b for (a, b) in cs))\n    lo = 0\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        if needm(cs, md) > m:\n            lo = md\n        else:\n            hi = md\n    print(hi)", "def balloons_needed(a, b, candies):\n    need = 0\n    for i in range(len(a)):\n        if b[i] == 0:\n            continue\n        need += max(0, a[i] - candies // b[i])\n    return need\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nr = 0\nfor i in range(n):\n    r = max(r, a[i] * b[i])\nl = 0\nwhile l < r:\n    mid = (l + r) // 2\n    balloons = balloons_needed(a, b, mid)\n    if balloons <= m:\n        r = mid\n    else:\n        l = mid + 1\nprint(l)", "(n, m) = map(int, input().split())\nl1 = list(map(int, input().split()))\nl2 = list(map(int, input().split()))\nlo = 0\nhi = 10000000000000000000\nwhile lo < hi:\n    mid = (lo + hi) // 2\n    now = 0\n    for i in range(n):\n        curr = max(0, l1[i] - mid // l2[i])\n        now += curr\n    if now <= m:\n        hi = mid\n    else:\n        lo = mid + 1\nprint(lo)", "import math\n(n, m) = map(int, input().split())\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nk = 0\nfor i in range(n):\n    k = max(k, a[i] * b[i])\nlow = 0\nhigh = k\nwhile low < high:\n    mid = (low + high) // 2\n    now = 0\n    for i in range(n):\n        curr = max(0, a[i] - mid // b[i])\n        now += curr\n    if now <= m:\n        high = mid\n    else:\n        low = mid + 1\nprint(int(low))", "from math import ceil\n\ndef binary(low, high, b, c, n, m):\n    if low <= high:\n        mid = (low + high) // 2\n        val = 0\n        for i in range(n):\n            if c[i] > mid:\n                if (c[i] - mid) % b[i] == 0:\n                    val += (c[i] - mid) // b[i]\n                else:\n                    val += (c[i] - mid) // b[i] + 1\n        if val <= m:\n            low = binary(low, mid - 1, b, c, n, m)\n        else:\n            low = binary(mid + 1, high, b, c, n, m)\n    return low\n\ndef extend_binary(b, c, n, m):\n    return binary(0, max(c), b, c, n, m)\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [a[i] * b[i] for i in range(n)]\nprint(extend_binary(b, c, n, m))", "import sys\nimport math\ninput = sys.stdin.readline\nfrom collections import defaultdict\nprintf = sys.stdout.write\n(n, m) = map(int, input().split())\nballoons = list(map(int, input().split()))\ncandy = list(map(int, input().split()))\n(l, r) = (0, max(map(lambda x, y: x * y, balloons, candy)))\n\ndef calc(candies):\n    k = 0\n    for i in range(n):\n        if candy[i] == 0:\n            continue\n        k += max(balloons[i] - candies // candy[i], 0)\n    return k\nwhile l < r:\n    mid = (l + r) // 2\n    c = calc(mid)\n    if c <= m:\n        r = mid\n    else:\n        l = mid + 1\nprintf(str(l) + '\\n')", "def balloons(a, b, candy):\n    total = 0\n    for (ai, bi) in zip(a, b):\n        if bi == 0:\n            continue\n        else:\n            total += max(ai - candy // bi, 0)\n    return total\n\ndef main():\n    (n, m) = map(int, input().strip().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    (left, right) = (0, max(a) * max(b))\n    while left < right:\n        mid = (left + right) // 2\n        balloons_needed = balloons(a, b, mid)\n        if balloons_needed <= m:\n            right = mid\n        else:\n            left = mid + 1\n    print(left)\nmain()", "(n, m) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc = [a[i] * b[i] for i in range(n)]\n(lo, hi) = (0, 1000000000000000000)\nimport math\nwhile lo < hi:\n    mi = (lo + hi) // 2\n    temp = 0\n    for i in range(n):\n        if mi <= c[i]:\n            temp += (c[i] - mi) // b[i] + ((c[i] - mi) % b[i] > 0) * 1\n    if temp > m:\n        lo = mi + 1\n    else:\n        hi = mi\nprint((hi + lo) // 2)", "t = input().split()\nN = int(t[0])\nM = int(t[1])\ncandies_list = []\nballoon_list = []\nballoons = input().split()\ncandies = input().split()\nlow = 0\nmid = 0\nmax_val = 0\nfor i in range(N):\n    balloon_list.append(int(balloons[i]))\nfor i in range(N):\n    candies_list.append(int(candies[i]))\nfor i in range(N):\n    cost = balloon_list[i] * candies_list[i]\n    if cost > max_val:\n        max_val = cost\nhigh = max_val\nwhile low < high:\n    mid = (low + high) // 2\n    bal_count = 0\n    for i in range(N):\n        bal_count += max(0, balloon_list[i] - mid // candies_list[i])\n    if bal_count <= M:\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "import math\n(n, m) = map(int, input().split())\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\ncost = [(A[i] * B[i], B[i]) for i in range(n)]\n\ndef is_pzbl(mi):\n    req = 0\n    for i in range(n - 1, -1, -1):\n        if cost[i][0] <= mi or B[i] == 0:\n            pass\n        else:\n            req += A[i] - mi // B[i]\n    return req <= m\nlo = 0\nhi = 10 ** 19\nwhile lo <= hi:\n    mi = lo + hi >> 1\n    if is_pzbl(mi):\n        ans = mi\n        hi = mi - 1\n    else:\n        lo = mi + 1\nmaxi = 0\nfor i in range(n):\n    maxi = max(maxi, cost[i][0])\nprint(min(ans, maxi))", "def satisfy(a, b, m, value):\n    for i in range(n):\n        candies = a[i] * b[i]\n        if candies > value:\n            if a[i] < value // b[i]:\n                continue\n            m -= a[i] - value // b[i]\n            if m < 0:\n                return False\n    return True\n\ndef bsearch(a, b, m, value):\n    lo = 0\n    hi = value\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if satisfy(a, b, m, mid):\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return hi + 1\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmaximum = 0\nfor i in range(n):\n    maximum = max(a[i] * b[i], maximum)\nprint(bsearch(a, b, m, maximum))", "import math\n\ndef check(low, high):\n    if high > low:\n        mid = (high + low) // 2\n        t = 0\n        for i in range(n):\n            if ab[i][1] > mid:\n                t += ab[i][1] / ab[i][2] - mid // ab[i][2]\n            else:\n                break\n        if t > m:\n            return check(mid + 1, high)\n        elif t <= m:\n            return check(low, mid)\n    else:\n        return low\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif sum(a) <= m:\n    print(0)\nelse:\n    ab = list(zip(a, [a[i] * b[i] for i in range(n)], b))\n    ab.sort(key=lambda x: x[1], reverse=True)\n    print(check(1, ab[0][1]))", "import math\n\ndef check(low, high):\n    if high > low:\n        mid = (high + low) // 2\n        t = 0\n        for i in range(n):\n            if ab[i][1] > mid:\n                t += ab[i][0] - mid // ab[i][2]\n            else:\n                break\n        if t > m:\n            return check(mid + 1, high)\n        elif t <= m:\n            return check(low, mid)\n    else:\n        return low\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nif sum(a) <= m:\n    print(0)\nelse:\n    ab = list(zip(a, [a[i] * b[i] for i in range(n)], b))\n    ab.sort(key=lambda x: x[1], reverse=True)\n    print(check(1, ab[0][1]))", "t = input().split()\nN = int(t[0])\nM = int(t[1])\ncandies_list = []\nballoon_list = []\nballoons = input().split()\ncandies = input().split()\nlow = 0\nmid = 0\nmax_val = 0\nfor i in range(N):\n    balloon_list.append(int(balloons[i]))\nfor i in range(N):\n    candies_list.append(int(candies[i]))\nfor i in range(N):\n    cost = balloon_list[i] * candies_list[i]\n    if cost > max_val:\n        max_val = cost\nhigh = max_val\nwhile low < high:\n    mid = (low + high) // 2\n    bal_count = 0\n    for i in range(N):\n        bal_count += max(0, balloon_list[i] - mid // candies_list[i])\n    if bal_count <= M:\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "t = input().split()\nN = int(t[0])\nM = int(t[1])\ncandies_list = []\nballoon_list = []\nballoons = input().split()\ncandies = input().split()\nlow = 0\nmid = 0\nmax_val = 0\nfor i in range(N):\n    balloon_list.append(int(balloons[i]))\nfor i in range(N):\n    candies_list.append(int(candies[i]))\nfor i in range(N):\n    max_val = max(max_val, balloon_list[i] * candies_list[i])\nhigh = max_val\nwhile low < high:\n    mid = (low + high) // 2\n    bal_count = 0\n    for i in range(N):\n        bal_count += max(0, balloon_list[i] - mid // candies_list[i])\n    if bal_count <= M:\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [a[i] * b[i] for i in range(n)]\nans = 0\nlo = 0\nhi = max(c)\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    bal = 0\n    for i in range(n):\n        if b[i] == 0:\n            continue\n        bal += max(0, a[i] - mid // b[i])\n    if bal <= m:\n        ans = mid\n        hi = mid - 1\n    else:\n        lo = mid + 1\nprint(ans)", "def check(a, b, mid, m, n):\n    temp = 0\n    for i in range(n):\n        if a[i] * b[i] > mid:\n            temp += a[i] - mid // b[i]\n        if m < temp:\n            return 0\n    return 1\n(n, m) = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nstart = 0\nend = start\nfor i in range(n):\n    end = max(end, a[i] * b[i])\nans = 0\nwhile start <= end:\n    mid = (start + end) // 2\n    if check(a, b, mid, m, n):\n        end = mid - 1\n        ans = mid\n    else:\n        start = mid + 1\nprint(ans)", "(n, m) = [int(x) for x in input().split()]\n(a, b) = ([], [])\n(ma, mb) = (0, 0)\nfor x in input().split():\n    a.append(int(x))\n    if ma < int(x):\n        ma = int(x)\nfor x in input().split():\n    b.append(int(x))\n    if mb < int(x):\n        mb = int(x)\nl = 0\nr = ma * mb\nwhile l <= r:\n    mid = (r - l) // 2 + l\n    k = 0\n    for i in range(n):\n        j = mid // b[i]\n        k += max(0, a[i] - j)\n    if k <= m:\n        ans = mid\n        r = mid - 1\n    else:\n        l = mid + 1\nprint(int(ans))", "import math\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\nl = 0\nr = max(a) * max(b)\nwhile l <= r:\n    mid = (r - l) // 2 + l\n    k = 0\n    for i in range(n):\n        j = mid // b[i]\n        k += max(0, a[i] - j)\n    if k <= m:\n        ans = mid\n        r = mid - 1\n    else:\n        l = mid + 1\nprint(int(ans))", "def bal_needed(a, b, candies):\n    c = 0\n    for i in range(len(a)):\n        if b[i] == 0:\n            continue\n        c += max(a[i] - candies // b[i], 0)\n    return c\n\ndef solve(a, b, n, m):\n    (right, left) = (0, 0)\n    for i in range(n):\n        right = max(right, a[i] * b[i])\n    while left < right:\n        mid = (left + right) // 2\n        bal = bal_needed(a, b, mid)\n        if bal <= m:\n            right = mid\n        else:\n            left = mid + 1\n    return left\n(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nprint(solve(a, b, n, m))", "from math import ceil\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = sorted([[a[i], b[i], a[i] * b[i]] for i in range(n)], key=lambda x: x[2])[::-1]\n(l, r, t) = (0, c[0][2], -1)\nwhile l < r:\n    t = (l + r) // 2\n    t1 = 0\n    for i in range(n):\n        if b[i] == 0:\n            continue\n        t1 += max(a[i] - t // b[i], 0)\n    if t1 <= m:\n        r = t\n    else:\n        l = t + 1\nprint(l)", "def binary(l, r, baloons, B, P):\n    if l <= r:\n        mid = (l + r) // 2\n        val = 0\n        for i in range(len(P)):\n            if P[i] > mid:\n                if (P[i] - mid) % B[i] == 0:\n                    val = val + (P[i] - mid) // B[i]\n                else:\n                    val = val + (P[i] - mid) // B[i] + 1\n        if val > baloons:\n            l = binary(mid + 1, r, baloons, B, P)\n        else:\n            l = binary(l, mid - 1, baloons, B, P)\n    return l\nn = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\nC = A\nD = B\nP = []\nfor i in range(n[0]):\n    P.append(A[i] * B[i])\nc = n[1] // 2\nk = c // 2\nbaloons = n[1]\nprint(binary(0, max(P), baloons, B, P))", "def binary(l, r, baloons, B, P):\n    if l <= r:\n        mid = (l + r) // 2\n        val = 0\n        for i in range(len(P)):\n            if P[i] > mid:\n                if (P[i] - mid) % B[i] == 0:\n                    val = val + (P[i] - mid) // B[i]\n                else:\n                    val = val + (P[i] - mid) // B[i] + 1\n        if val > baloons:\n            l = binary(mid + 1, r, baloons, B, P)\n        else:\n            l = binary(l, mid - 1, baloons, B, P)\n    return l\nn = [int(i) for i in input().split()]\nA = [int(i) for i in input().split()]\nB = [int(i) for i in input().split()]\nC = A\nD = B\nP = []\nfor i in range(n[0]):\n    P.append(A[i] * B[i])\nc = n[1] // 2\nk = c // 2\nbaloons = n[1]\nprint(binary(0, max(P), baloons, B, P))", "def binary(low, high, b, c, n, m):\n    if low <= high:\n        mid = (low + high) // 2\n        val = 0\n        for i in range(n):\n            if c[i] > mid:\n                if (c[i] - mid) % b[i] == 0:\n                    val += (c[i] - mid) // b[i]\n                else:\n                    val += (c[i] - mid) // b[i] + 1\n        if val <= m:\n            low = binary(low, mid - 1, b, c, n, m)\n        else:\n            low = binary(mid + 1, high, b, c, n, m)\n    return low\n\ndef extend_binary(b, c, n, m):\n    return binary(0, max(c), b, c, n, m)\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [a[i] * b[i] for i in range(n)]\nprint(extend_binary(b, c, n, m))", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [a[i] * b[i] for i in range(len(a))]\nans = 0\n(l, r) = (0, max(c))\nwhile l <= r:\n    mid = (l + r) // 2\n    bl = m\n    flag = 1\n    for i in range(len(c)):\n        if c[i] - mid > 0:\n            bl -= a[i] - mid // b[i]\n        if bl < 0:\n            flag = 0\n            break\n    if flag:\n        r = mid - 1\n        ans = mid\n    else:\n        l = mid + 1\nprint(ans)", "(n, m) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nimport math\nb = [int(i) for i in input().split()]\nc = [a[i] * b[i] for i in range(n)]\n(lo, hi) = (0, 1000000000000000000)\nwhile lo < hi:\n    mi = (lo + hi) // 2\n    temp = 0\n    for i in range(n):\n        if c[i] >= mi:\n            if (c[i] - mi) % b[i] > 0:\n                temp += (c[i] - mi) // b[i] + 1\n            else:\n                temp += (c[i] - mi) // b[i]\n    if temp > m:\n        lo = mi + 1\n    else:\n        hi = mi\nprint((hi + lo) // 2)", "(n, m) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc = [a[i] * b[i] for i in range(n)]\n(lo, hi) = (0, 1000000000000000000)\nimport math\nwhile lo < hi:\n    mi = (lo + hi) // 2\n    temp = 0\n    for i in range(n):\n        if mi <= c[i]:\n            temp += (c[i] - mi) // b[i] + ((c[i] - mi) % b[i] > 0) * 1\n    if temp > m:\n        lo = mi + 1\n    else:\n        hi = mi\nprint((hi + lo) // 2)", "(n, m) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nc = [a[i] * b[i] for i in range(n)]\n(lo, hi) = (0, 1000000000000000000)\nwhile lo < hi:\n    mi = (lo + hi) // 2\n    temp = 0\n    for i in range(n):\n        temp += (c[i] >= mi) * (((c[i] - mi) % b[i] > 0) + (c[i] - mi) // b[i])\n    if temp > m:\n        lo = mi + 1\n    else:\n        hi = mi\nprint(lo)", "def calc(mid, m, C):\n    maxc = 0\n    ballons = m\n    for (c, a, b) in C:\n        if c < mid:\n            break\n        ballons = ballons - (a - mid // b)\n        maxc = max(mid // b * b, maxc)\n    return (ballons, maxc)\n(n, m) = map(int, input().split())\n(A, B) = (list(map(int, input().split())), list(map(int, input().split())))\nC = []\nmaxc = 0\nfor i in range(n):\n    C.append((A[i] * B[i], A[i], B[i]))\nC.sort(reverse=True)\nbeg = 0\nend = C[0][0]\nresult = C[0][0]\nwhile end > beg + 1:\n    mid = (beg + end + 1) // 2\n    (ballons, maxc) = calc(mid, m, C)\n    if ballons < 0:\n        beg = mid\n    elif ballons > 0:\n        end = mid\n        result = maxc\n    else:\n        result = maxc\n        break\nprint(result)", "def check_least(n, m, a, b, c, least):\n    required_m = 0\n    for (index, ci) in enumerate(c):\n        ai = a[index]\n        bi = b[index]\n        if ci > least:\n            diff = ci - least\n            required_m += diff // bi\n            if diff % bi != 0:\n                required_m += 1\n        if required_m > m:\n            return False\n    return True\n\ndef binary_search(n, m, a, b, c, min_range, max_range):\n    mid = (min_range + max_range) // 2\n    possible = check_least(n, m, a, b, c, mid)\n    if possible and min_range == max_range:\n        return mid\n    if possible:\n        (min_range, max_range) = (min_range, mid)\n    else:\n        (min_range, max_range) = (mid + 1, max_range)\n    return binary_search(n, m, a, b, c, min_range, max_range)\n\ndef solve(n, m, a, b, c):\n    min_range = 0\n    max_range = max(c)\n    print(binary_search(n, m, a, b, c, min_range, max_range))\n(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [ai * bi for (ai, bi) in zip(a, b)]\nsolve(n, m, a, b, c)", "from math import ceil\n\ndef binarySearch(c, l, r, b, m):\n    if l <= r:\n        mid = (l + r) // 2\n        val = 0\n        for i in range(len(c)):\n            if c[i] > mid:\n                if (c[i] - mid) % b[i] == 0:\n                    val += (c[i] - mid) // b[i]\n                else:\n                    val += (c[i] - mid) // b[i] + 1\n        if val <= m:\n            l = binarySearch(c, l, mid - 1, b, m)\n        else:\n            l = binarySearch(c, mid + 1, r, b, m)\n    return l\n(n, m) = map(int, input().split())\na = [int(n) for n in input().split()]\nb = [int(n) for n in input().split()]\nc = []\nfor i in range(n):\n    c.append(a[i] * b[i])\nz = max(c)\nif m == 0:\n    print(z)\nelif m >= sum(a):\n    print(0)\nelse:\n    if z < 10 ** 18:\n        result = binarySearch(c, 0, z, b, m)\n    else:\n        result = binarySearch(c, 0, 10 ** 18, b, m)\n    print(result)", "def check_least(n, m, a, b, c, least):\n    required_m = 0\n    for index in range(n):\n        ai = a[index]\n        bi = b[index]\n        ci = c[index]\n        if ci > least:\n            diff = ci - least\n            required_m += diff // bi\n            if diff % bi != 0:\n                required_m += 1\n        if required_m > m:\n            return False\n    return True\n\ndef binary_search(n, m, a, b, c, min_range, max_range):\n    if min_range <= max_range:\n        mid = (min_range + max_range) // 2\n        possible = check_least(n, m, a, b, c, mid)\n        if possible:\n            min_range = binary_search(n, m, a, b, c, min_range, mid - 1)\n        else:\n            min_range = binary_search(n, m, a, b, c, mid + 1, max_range)\n    return min_range\n\ndef solve(n, m, a, b, c):\n    min_range = 0\n    max_range = max(c)\n    print(binary_search(n, m, a, b, c, min_range, max_range))\n(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [ai * bi for (ai, bi) in zip(a, b)]\nsolve(n, m, a, b, c)", "from math import ceil\n\ndef binary(l, h, b, c, n, m):\n    if l <= h:\n        mid = (l + h) // 2\n        val = 0\n        for i in range(n):\n            if c[i] > mid:\n                if (c[i] - mid) % b[i] == 0:\n                    val += (c[i] - mid) // b[i]\n                else:\n                    val += (c[i] - mid) // b[i] + 1\n        if val <= m:\n            l = binary(l, mid - 1, b, c, n, m)\n        else:\n            l = binary(mid + 1, h, b, c, n, m)\n    return l\n\ndef extend_binary(b, c, n, m):\n    return binary(0, max(c), b, c, n, m)\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [a[i] * b[i] for i in range(n)]\nprint(extend_binary(b, c, n, m))", "def solve(low, high, b, c, n, m):\n    if low <= high:\n        mid = (low + high) // 2\n        balloons = 0\n        for i in range(n):\n            if c[i] > mid:\n                if (c[i] - mid) % b[i] == 0:\n                    balloons += (c[i] - mid) // b[i]\n                else:\n                    balloons += (c[i] - mid) // b[i] + 1\n        if balloons <= m:\n            return solve(low, mid - 1, b, c, n, m)\n        else:\n            return solve(mid + 1, high, b, c, n, m)\n    return low\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [a[i] * b[i] for i in range(n)]\nprint(solve(0, max(c), b, c, n, m))", "def cond(n, m, a, b, x):\n    y = 0\n    for i in range(n):\n        if a[i] * b[i] > x:\n            y += a[i] - x // b[i]\n            if y > m:\n                return False\n    return True\n\ndef binSearch(n, m, a, b, x):\n    low = 0\n    high = x\n    r = x\n    while low <= high:\n        mid = (low + high) // 2\n        if cond(n, m, a, b, mid):\n            r = min(r, mid)\n            high = mid - 1\n        else:\n            low = mid + 1\n    return r\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nx = 0\nfor i in range(n):\n    x = max(a[i] * b[i], x)\nprint(binSearch(n, m, a, b, x))", "def succeed(mid, m):\n    d = mid\n    z = m\n    k = 0\n    for i in range(n):\n        if a[i] * b[i] > d:\n            v = a[i] * b[i] - d\n            if v % b[i]:\n                u = v // b[i] + 1\n            else:\n                u = v // b[i]\n            z -= u\n        if z < 0:\n            k = 1\n            break\n    if k:\n        return 0\n    else:\n        return 1\n\ndef bsea(l, r, m):\n    while r - l > 1:\n        mid = (l + r) // 2\n        if succeed(mid, m):\n            r = mid\n        else:\n            l = mid\n    return r\n(n, m) = [int(x) for x in input().strip().split(' ')]\na = [int(x) for x in input().strip().split(' ')]\nb = [int(x) for x in input().strip().split(' ')]\nmax = 0\ns = 0\nfor i in range(n):\n    s += a[i]\n    if a[i] * b[i] > max:\n        max = a[i] * b[i]\nif s <= m:\n    print(0)\nelse:\n    l = 0\n    r = max\n    print(bsea(l, r, m))", "def satisfy(a, b, m, value):\n    for i in range(n):\n        candies = a[i] * b[i]\n        if candies > value:\n            if a[i] < value // b[i]:\n                continue\n            m -= a[i] - value // b[i]\n            if m < 0:\n                return False\n    return True\n\ndef bsearch(a, b, m, value):\n    lo = 0\n    hi = value\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if satisfy(a, b, m, mid):\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return hi + 1\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nmaximum = 0\nfor i in range(n):\n    maximum = max(a[i] * b[i], maximum)\nprint(bsearch(a, b, m, maximum))", "(n, m) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nl = 0\nh = 10 ** 18\nwhile l <= h:\n    midpoint = (l + h) // 2\n    k = 0\n    for i in range(n):\n        j = midpoint // b[i]\n        k += max(0, a[i] - j)\n    if k <= m:\n        output = midpoint\n        h = midpoint - 1\n    else:\n        l = midpoint + 1\nprint(int(output))", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = sorted([[a[i] * b[i], b[i]] for i in range(n)], key=lambda x: x[0])\n\ndef find(i1, i2):\n    if i1 > i2:\n        return i1\n    mid = (i1 + i2) // 2\n    ss = m - sum([(i[0] - mid) // i[1] + (1 if (i[0] - mid) % i[1] else 0) for i in c if i[0] > mid])\n    return find(mid + 1 if ss < 0 else i1, i2 if ss < 0 else mid - 1)\nprint(find(0, c[-1][0] + 1))", "(n, m) = map(int, input().split())\na = [int(x) for x in input().split()]\nb = [int(x) for x in input().split()]\n(L, R) = (0, 10 ** 20)\nwhile L < R:\n    mid = (L + R) // 2\n    temp = m\n    for i in range(n):\n        temp -= max(0, a[i] - mid // b[i])\n    if temp < 0:\n        L = mid + 1\n    else:\n        R = mid\nprint(L)", "from functools import reduce as rd\nimport operator as optr\nimport math\nimport itertools\ninp = lambda : map(int, input().split())\n\ndef func(n, m, c):\n    val = m\n    i = len(c) - 1\n    while i >= 0:\n        if c[i][0] - n <= 0:\n            i -= 1\n            continue\n        check = (c[i][0] - n) // c[i][1]\n        if (c[i][0] - n) % c[i][1] > 0:\n            check += 1\n        val -= check\n        if val < 0:\n            return 0\n        i -= 1\n    return 1\n(n, m) = inp()\nl = list(inp())\nadd = sum(l)\nb = list(inp())\na = []\nfor i in range(n):\n    a.append(b[i] * l[i])\nc = list(zip(a, b))\nif add <= m:\n    print(0)\nelse:\n    c.sort()\n    left = c[0][0]\n    right = c[n - 1][0]\n    (mid, flag) = (0, 0)\n    while left <= right:\n        mid = (left + right) // 2\n        if func(mid, m, c) == 0:\n            left = mid + 1\n            flag = 0\n        else:\n            right = mid - 1\n            flag = 1\n    print(max(left, right))", "from math import ceil\n\ndef binary(low, high, b, c, n, m):\n    if low <= high:\n        mid = (low + high) // 2\n        val = 0\n        for i in range(n):\n            if c[i] > mid:\n                if (c[i] - mid) % b[i] == 0:\n                    val += (c[i] - mid) // b[i]\n                else:\n                    val += (c[i] - mid) // b[i] + 1\n        if val <= m:\n            low = binary(low, mid - 1, b, c, n, m)\n        else:\n            low = binary(mid + 1, high, b, c, n, m)\n    return low\n\ndef extend_binary(b, c, n, m):\n    return binary(0, max(c), b, c, n, m)\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = [a[i] * b[i] for i in range(n)]\nprint(extend_binary(b, c, n, m))", "def calc(mid, m, C):\n    maxc = 0\n    ballons = m\n    for (c, a, b) in C:\n        if c < mid:\n            break\n        ballons = ballons - (a - mid // b)\n        maxc = max(mid // b * b, maxc)\n    return (ballons, maxc)\n(n, m) = map(int, input().split())\n(A, B) = (list(map(int, input().split())), list(map(int, input().split())))\nC = []\nmaxc = 0\nfor i in range(n):\n    C.append((A[i] * B[i], A[i], B[i]))\nC.sort(reverse=True)\nbeg = 0\nend = C[0][0]\nresult = C[0][0]\nwhile end > beg + 1:\n    mid = (beg + end + 1) // 2\n    (ballons, maxc) = calc(mid, m, C)\n    if ballons < 0:\n        beg = mid\n    elif ballons > 0:\n        end = mid\n        result = maxc\n    else:\n        result = maxc\n        break\nprint(result)", "def calc(mid, m, C):\n    maxc = 0\n    ballons = m\n    for (c, a, b) in C:\n        if c < mid:\n            break\n        ballons = ballons - (a - mid // b)\n        maxc = max(mid // b * b, maxc)\n    return (ballons, maxc)\n(n, m) = map(int, input().split())\n(A, B) = (list(map(int, input().split())), list(map(int, input().split())))\nC = []\nmaxc = 0\nfor i in range(n):\n    C.append((A[i] * B[i], A[i], B[i]))\n    maxc = max(maxc, A[i] * B[i])\nelse:\n    C.sort(reverse=True)\n    beg = 0\n    end = maxc\n    result = C[0][0]\n    while end > beg + 1:\n        mid = (beg + end + 1) // 2\n        (ballons, maxc) = calc(mid, m, C)\n        if ballons < 0:\n            beg = mid\n        elif ballons > 0:\n            end = mid\n            result = maxc\n        else:\n            result = maxc\n            break\n    print(result)", "def find(A, B, N, M, k):\n    for i in range(N):\n        b = max(0, A[i] - k // B[i])\n        M -= b\n    return M >= 0\n\ndef binary(A, B, N, M):\n    low = 0\n    high = 10 ** 18\n    while low < high:\n        mid = (low + high) // 2\n        if find(A, B, N, M, mid):\n            high = mid\n        else:\n            low = mid + 1\n    if find(A, B, N, M, mid):\n        return mid\n    else:\n        return high\n(N, M) = list(map(int, input().split()))\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nif M >= sum(A):\n    ans = 0\nelif M == 0:\n    ans = 0\n    for i in range(N):\n        ans = max(ans, A[i] * B[i])\nelse:\n    ans = binary(A, B, N, M)\nprint(ans)", "from math import ceil\n(N, M) = map(int, input().split())\nA = list(map(int, input().split()))\nB = list(map(int, input().split()))\nC = list((A[i] * B[i] for i in range(N)))\nupper_bound = max(C) + 1\nlower_bound = -1\ntest_req = 0\nwhile upper_bound - lower_bound > 1:\n    balloon_dist = [ceil((C[i] - test_req) / B[i]) if C[i] > test_req else 0 for i in range(N)]\n    balloons = sum(balloon_dist)\n    if balloons == M:\n        break\n    if balloons > M:\n        lower_bound = test_req\n    if balloons < M:\n        upper_bound = test_req\n    test_req = (upper_bound - lower_bound) // 2 + lower_bound\nelse:\n    balloon_dist = [ceil((C[i] - upper_bound) / B[i]) if C[i] > upper_bound else 0 for i in range(N)]\nprint(max((C[i] - balloon_dist[i] * B[i] for i in range(N))))", "from functools import reduce as rd\nimport operator as optr\nimport math\nimport itertools\ninp = lambda : map(int, input().split())\n\ndef func(n, m, c):\n    val = m\n    i = len(c) - 1\n    while i >= 0:\n        if c[i][0] - n <= 0:\n            i -= 1\n            continue\n        check = (c[i][0] - n) // c[i][1]\n        if (c[i][0] - n) % c[i][1] > 0:\n            check += 1\n        val -= check\n        if val < 0:\n            return 0\n        i -= 1\n    return 1\n(n, m) = inp()\nl = list(inp())\nadd = sum(l)\nb = list(inp())\na = []\nfor i in range(n):\n    a.append(b[i] * l[i])\nc = list(zip(a, b))\nif add <= m:\n    print(0)\nelse:\n    c.sort()\n    left = c[0][0]\n    right = c[n - 1][0]\n    (mid, flag) = (0, 0)\n    while left <= right:\n        mid = (left + right) // 2\n        if func(mid, m, c) == 0:\n            left = mid + 1\n            flag = 0\n        else:\n            right = mid - 1\n            flag = 1\n    print(max(left, right))", "import math\nimport collections\nimport bisect\nimport heapq\nimport time\nimport random\nimport itertools\nimport sys\n\ndef check(N, M, A, B, C):\n    total = 0\n    for i in range(N):\n        a = max(0, A[i] * B[i] - C)\n        if a % B[i] == 0:\n            total += a // B[i]\n        else:\n            total += a // B[i] + 1\n        if total > M:\n            return False\n    return total <= M\n\ndef solve(N, M, A, B):\n    (lo, hi) = (0, max([A[i] * B[i] for i in range(N)]))\n    while lo < hi:\n        maxc = lo + (hi - lo) // 2\n        if check(N, M, A, B, maxc):\n            hi = maxc\n        else:\n            lo = maxc + 1\n    return lo\n(N, M) = map(int, input().split())\nA = [int(x) for x in input().split()]\nB = [int(x) for x in input().split()]\nprint(solve(N, M, A, B))", "def main():\n    (N, BALLOONS) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    UPPER_BOUND = max([x * y for (x, y) in zip(A, B)]) + 1\n\n    def predicate(MAX_TOFFEES_PER_DAY):\n        required = 0\n        for (ballons_req, toffees_per_ballon) in zip(A, B):\n            LIM = min(ballons_req * toffees_per_ballon, MAX_TOFFEES_PER_DAY)\n            in_exchange_of = LIM // toffees_per_ballon\n            required += ballons_req - in_exchange_of\n        return required <= BALLOONS\n\n    def binary_search(low=0, high=UPPER_BOUND):\n        while low < high:\n            mid = low + (high - low) // 2\n            if predicate(mid):\n                high = mid\n            else:\n                low = mid + 1\n        return low\n    print(binary_search())\nmain()", "def poss(k, inp, h):\n    b = 0\n    for i in range(0, len(inp)):\n        el = inp[i]\n        if el[1] == 0:\n            continue\n        elif k >= 0:\n            v1 = el[0] - k\n            v2 = el[1]\n            chkval = int((v1 + v2 - 1) // v2)\n            if chkval > 0:\n                b += chkval\n    if b <= h:\n        return True\n    else:\n        return False\n\ndef solve(inp, h, t):\n    low = 0\n    high = t\n    ans = t\n    while low <= high:\n        mid = (low + high) // 2\n        if poss(mid, inp, h):\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return ans\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = []\nmax_c = -1\ns = 0\nfor i in range(0, n):\n    tc = a[i] * b[i]\n    s += a[i]\n    c.append([tc, b[i]])\n    if tc > max_c:\n        max_c = tc\nif m >= s:\n    print(0)\nelse:\n    minc = solve(c, m, max_c)\n    print(minc)", "I = lambda : map(int, input().split())\n\ndef C(a, b):\n    return [a // b + 1, a // b][a % b == 0]\n\ndef f(d, k):\n    return sum(((d[i][0] > k) * min(C(d[i][0] - k, d[i][1]), d[i][2]) for i in range(len(d))))\n(n, m) = I()\na = list(I())\nb = list(I())\nd = []\nl = 0\nfor i in range(n):\n    d.append([a[i] * b[i], b[i], a[i]])\n    l = max(l, d[i][0])\nx = 0\nwhile x != l:\n    k = (x + l) // 2\n    if f(d, k) > m:\n        x = k + 1\n    else:\n        l = k\nprint(l)", "import math as ma\nimport sys\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef modInverse(a, m):\n    m0 = m\n    y = 0\n    x = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n(n, m) = num()\na = li()\nb = li()\nz = []\nfor i in range(n):\n    z.append((a[i] * b[i], i))\nz.sort()\nlo = 0\nhi = max(z)[0]\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    ss = 0\n    for i in range(n):\n        if z[i][0] <= mid:\n            continue\n        if (z[i][0] - mid) % b[z[i][1]] == 0:\n            ss += (z[i][0] - mid) // b[z[i][1]]\n        else:\n            ss += (z[i][0] - mid) // b[z[i][1]] + 1\n    if ss > m:\n        lo = mid + 1\n    else:\n        hi = mid - 1\nprint(max(0, lo))", "import math\n\ndef graph():\n    res = 0\n    d.clear()\n    for i in range(n):\n        if c[i] > mid:\n            res += math.ceil((c[i] - mid) / b[i])\n            d.append(c[i] - math.ceil((c[i] - mid) / b[i]) * b[i])\n        else:\n            d.append(c[i])\n    if k == res:\n        return 0\n    if k > res:\n        return 1\n    if k < res:\n        return 2\n(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nb = [int(x) for x in input().split()]\nc = [x * y for (x, y) in zip(a, b)]\nd = []\nmaxx = max(c)\nminn = 0\nans = 0\nwhile maxx >= minn:\n    mid = (maxx + minn) // 2\n    flag = graph()\n    if flag == 0:\n        ans = max(d)\n        break\n    elif flag == 1:\n        ans = max(d)\n        maxx = mid - 1\n    else:\n        minn = mid + 1\nprint(ans)", "import math\n\ndef get_baloons_required(line):\n    (baloons, max_h) = (0, 0)\n    for (product, a, r) in arr3:\n        if product > line:\n            max_h = max(max_h, product - math.ceil((product - line) / r) * r)\n            baloons += math.ceil((product - line) / r)\n        else:\n            max_h = max(max_h, product)\n            break\n    return (baloons, max_h)\n(n, given_baloons) = map(int, input().split())\narray1 = map(int, input().split())\narray2 = map(int, input().split())\narr3 = [(a * b, a, b) for (a, b) in zip(array1, array2)]\narr3.sort(reverse=True)\nupper_limit = arr3[0][0]\n(lower, answer) = (0, arr3[0][0])\nif given_baloons > 0:\n    while lower <= upper_limit:\n        mid_line = (lower + upper_limit) // 2\n        (a, max_h) = get_baloons_required(mid_line)\n        if a <= given_baloons:\n            answer = max_h\n        if a > given_baloons:\n            lower = mid_line + 1\n        elif a < given_baloons:\n            upper_limit = mid_line - 1\n        else:\n            break\nprint(answer)", "def b_search(N, M, a, b):\n    low = 1\n    high = max(a) * max(b)\n    while low < high:\n        mid = low + (high - low) // 2\n        bn = 0\n        for x in range(N):\n            bn += max(0, a[x] - mid // b[x])\n        if bn <= M:\n            high = mid\n        else:\n            low = mid + 1\n    return low\n[N, M] = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nb = [int(i) for i in input().split()]\nprint(b_search(N, M, a, b))"]