["def func(x, y, z):\n    return (x & z) * (y & z)\n\ndef recursion(lo, ans):\n    global l, r\n    if lo & lo - 1 == 0:\n        x = lo | ans\n        return x\n    else:\n        y = recursion(lo & lo - 1, ans)\n        if y >= l:\n            return y\n        return lo | ans\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split(' '))\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxx = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxx:\n                maxx = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxx:\n            maxx = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = recursion(l, s)\n            print(x)", "def func(x, y, z):\n    return (x & z) * (y & z)\n\ndef recursion(lo, ans):\n    global l, r\n    if lo & lo - 1 == 0:\n        x = lo | ans\n        return x\n    else:\n        y = recursion(lo & lo - 1, ans)\n        if y >= l:\n            return y\n        return lo | ans\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split(' '))\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxx = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxx:\n                maxx = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxx:\n            maxx = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = recursion(l, s)\n            print(x)", "def func(x, y, z):\n    return (x & z) * (y & z)\n\ndef recursion(lo, ans):\n    global l, r\n    if lo & lo - 1 == 0:\n        x = lo | ans\n        return x\n    else:\n        y = recursion(lo & lo - 1, ans)\n        if y >= l:\n            return y\n        return lo | ans\nt = int(input())\nwhile t:\n    t -= 1\n    (x, y, l, r) = map(int, input().strip().split(' '))\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxx = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxx:\n                maxx = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxx:\n            maxx = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = recursion(l, s)\n            print(x)", "import math\nfor _ in range(int(input())):\n    str1 = input()\n    lst1 = str1.split()\n    x = int(lst1[0])\n    y = int(lst1[1])\n    l = int(lst1[2])\n    r = int(lst1[3])\n    ans = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n        else:\n            print(ans)\n        continue\n    rbin = str(bin(r)[2:])\n    rlen = len(rbin)\n    maxval = l\n    maxprod = (x & l) * (y & l)\n    for i in range(0, rlen):\n        if rbin[i] == '1':\n            rbin2 = rbin[:i] + '0' + '1' * (rlen - i - 1)\n            val = int(rbin2, 2)\n            prod = (x & val) * (y & val)\n            if prod > maxprod and val >= l:\n                maxprod = prod\n                maxval = val\n    if (x & r) * (y & r) > maxprod:\n        maxprod = (x & r) * (y & r)\n        maxval = r\n    binans = '{0:064b}'.format(ans)\n    binmax = '{0:064b}'.format(maxval)\n    temp = 0\n    for i in range(0, 64):\n        if binmax[i] == '1' and binans[i] == '0':\n            temp = pow(2, 63 - i)\n            if maxval - temp >= l:\n                maxval = maxval - temp\n    print(maxval)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\nt = int(input())\nfor test in range(t):\n    (x, y, l, r) = map(int, input().split())\n    p = x | y\n    p1 = bin(p)\n    fmax = x * y\n    if x == 0 or y == 0:\n        print(l)\n    elif p <= r and p >= l:\n        print(p)\n    else:\n        fmax = (x & r) * (y & r)\n        z = r\n        ans = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if (x & temp) * (y & temp) >= fmax:\n                fmax = (x & temp) * (y & temp)\n                ans = temp\n            z = z & z - 1\n        if (x & l) * (y & l) >= fmax:\n            fmax = (x & l) * (y & l)\n            ans = l\n        s = ans & p\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "for _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    x_or_y = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n            continue\n        print(x_or_y)\n        continue\n    maxp = (x & l) * (y & l)\n    m_val = l\n    binr = bin(r)\n    binr = binr[2:]\n    bl = len(binr)\n    for i in range(bl):\n        if binr[i] == '1':\n            p = binr[:i] + '0' + '1' * (bl - i - 1)\n            p = int(p, 2)\n            if maxp < (x & p) * (y & p) and p >= l:\n                maxp = (x & p) * (y & p)\n                m_val = p\n    p = r\n    if maxp < (x & p) * (y & p):\n        maxp = (x & p) * (y & p)\n        m_val = p\n    bx = '{0:064b}'.format(x_or_y)\n    bm = '{0:064b}'.format(m_val)\n    temp = 0\n    for i in range(0, 64):\n        if bx[i] == '0' and bm[i] == '1':\n            temp = pow(2, 63 - i)\n            if m_val - temp >= l:\n                m_val = m_val - temp\n    print(m_val)", "for _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    x_or_y = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n            continue\n        print(x_or_y)\n        continue\n    maxp = (x & l) * (y & l)\n    m_val = l\n    binr = bin(r)\n    binr = binr[2:]\n    bl = len(binr)\n    for i in range(bl):\n        if binr[i] == '1':\n            p = binr[:i] + '0' + '1' * (bl - i - 1)\n            p = int(p, 2)\n            if maxp < (x & p) * (y & p) and p >= l:\n                maxp = (x & p) * (y & p)\n                m_val = p\n    p = r\n    if maxp < (x & p) * (y & p):\n        maxp = (x & p) * (y & p)\n        m_val = p\n    bx = '{0:064b}'.format(x_or_y)\n    bm = '{0:064b}'.format(m_val)\n    temp = 0\n    for i in range(0, 64):\n        if bx[i] == '0' and bm[i] == '1':\n            temp = pow(2, 63 - i)\n            if m_val - temp >= l:\n                m_val = m_val - temp\n    print(m_val)", "for _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    x_or_y = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n            continue\n        print(x_or_y)\n        continue\n    maxp = (x & l) * (y & l)\n    m_val = l\n    binr = bin(r)\n    binr = binr[2:]\n    bl = len(binr)\n    for i in range(bl):\n        if binr[i] == '1':\n            p = binr[:i] + '0' + '1' * (bl - i - 1)\n            p = int(p, 2)\n            if maxp < (x & p) * (y & p) and p >= l:\n                maxp = (x & p) * (y & p)\n                m_val = p\n    p = r\n    if maxp < (x & p) * (y & p):\n        maxp = (x & p) * (y & p)\n        m_val = p\n    bx = '{0:064b}'.format(x_or_y)\n    bm = '{0:064b}'.format(m_val)\n    temp = 0\n    for i in range(0, 64):\n        if bx[i] == '0' and bm[i] == '1':\n            temp = pow(2, 63 - i)\n            if m_val - temp >= l:\n                m_val = m_val - temp\n    print(m_val)", "for _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    x_or_y = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n            continue\n        print(x_or_y)\n        continue\n    maxp = (x & l) * (y & l)\n    m_val = l\n    binr = bin(r)\n    binr = binr[2:]\n    bl = len(binr)\n    for i in range(bl):\n        if binr[i] == '1':\n            p = binr[:i] + '0' + '1' * (bl - i - 1)\n            p = int(p, 2)\n            if maxp < (x & p) * (y & p) and p >= l:\n                maxp = (x & p) * (y & p)\n                m_val = p\n    p = r\n    if maxp < (x & p) * (y & p):\n        maxp = (x & p) * (y & p)\n        m_val = p\n    bx = '{0:064b}'.format(x_or_y)\n    bm = '{0:064b}'.format(m_val)\n    temp = 0\n    for i in range(0, 64):\n        if bx[i] == '0' and bm[i] == '1':\n            temp = pow(2, 63 - i)\n            if m_val - temp >= l:\n                m_val = m_val - temp\n    print(m_val)", "def xor(x, y, z):\n    return (x & z) * (y & z)\n\ndef find(new_l, ans):\n    global l\n    if new_l & new_l - 1 == 0:\n        x = new_l | ans\n        return x\n    else:\n        y = find(new_l & new_l - 1, ans)\n        if y >= l:\n            return y\n        return new_l | ans\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    diff = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif diff >= l and diff <= r:\n        print(diff)\n    else:\n        maxi = xor(x, y, r)\n        ans = r\n        z = r\n        while z:\n            t = z - 1\n            if t < l:\n                break\n            temp = xor(x, y, t)\n            if temp >= maxi:\n                maxi = temp\n                ans = t\n            z = z & t\n        if xor(x, y, l) >= maxi:\n            maxi = xor(x, y, l)\n            ans = l\n        s = ans & diff\n        if s >= l:\n            print(s)\n        else:\n            z = find(l, s)\n            print(z)", "def findz(l, s):\n    temp = l\n    if temp & temp - 1 == 0:\n        x = temp | s\n        return x\n    else:\n        y = findz(temp & temp - 1, s)\n        if y >= l:\n            return y\n        return temp | s\n\ndef f(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxx = f(x, y, r)\n        a = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if f(x, y, temp) >= maxx:\n                maxx = f(x, y, temp)\n                a = temp\n            z = z & z - 1\n        if f(x, y, l) >= maxx:\n            maxx = f(x, y, l)\n            a = l\n        s = a & q\n        if s >= l:\n            print(s)\n        else:\n            x = findz(l, s)\n            print(x)", "def chandf(x, y, l, r):\n    a = (x & l) * (y & l)\n    id = l\n    Z = x | y\n    for i in range(64):\n        if r & 1 << i:\n            k = r ^ 1 << i | (1 << i) - 1\n            if k < l:\n                continue\n            for j in range(i - 1, -1, -1):\n                if Z & 1 << j == 0:\n                    if k ^ 1 << j >= l:\n                        k = k ^ 1 << j\n            temp = (k & x) * (k & y)\n            if temp > a:\n                a = temp\n                id = k\n            elif temp == a:\n                id = min(id, k)\n    if (x & r) * (y & r) > a:\n        id = r\n    print(id)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    chandf(x, y, l, r)", "dry_run = False\ninputs = [[252, 523, 2, 199], [485, 719, 0, 159], [104, 600, 4, 460], [5, 33, 22, 28], [37, 75, 0, 68], [51, 33, 0, 5], [32, 5, 0, 36], [360, 845, 0, 410], [108, 595, 3, 415], [234, 470, 4, 165], [362, 851, 2, 434], [487, 725, 2, 183], [111, 603, 1, 435], [236, 477, 1, 184], [364, 840, 4, 441], [489, 714, 4, 190], [113, 591, 3, 442], [238, 465, 3, 191], [366, 847, 1, 424], [492, 722, 2, 174], [115, 598, 0, 426], [241, 473, 1, 176], [351, 354, 1, 429], [476, 728, 1, 178], [100, 105, 0, 430], [225, 479, 0, 179], [353, 360, 3, 453], [478, 734, 3, 202], [102, 111, 2, 454], [227, 485, 2, 203], [355, 849, 0, 454], [481, 724, 1, 204], [230, 475, 0, 205], [357, 855, 2, 443], [483, 730, 3, 193], [106, 106, 1, 444], [232, 481, 2, 194], [377, 397, 2, 447], [3, 272, 3, 197], [126, 148, 1, 449], [379, 404, 4, 471], [5, 279, 0, 216], [128, 155, 3, 473], [254, 530, 4, 223], [382, 393, 2, 474], [7, 267, 2, 223], [130, 144, 0, 474], [256, 519, 1, 224], [384, 400, 4, 463], [9, 274, 4, 212], [133, 151, 3, 464], [258, 525, 3, 213], [368, 406, 3, 466], [494, 781, 4, 216], [117, 157, 2, 467], [243, 532, 3, 217], [371, 413, 1, 345], [496, 787, 1, 94], [119, 163, 4, 350], [245, 538, 0, 95], [373, 402, 3, 352], [498, 776, 3, 101], [122, 153, 2, 353], [247, 527, 2, 102], [375, 408, 0, 335], [0, 282, 0, 84], [124, 160, 4, 342], [249, 534, 4, 91], [395, 810, 0, 340], [20, 184, 0, 89], [144, 561, 4, 346], [269, 435, 4, 95], [397, 816, 2, 364], [22, 190, 2, 113], [146, 567, 1, 365], [271, 441, 1, 114], [399, 805, 4, 370], [25, 180, 0, 115], [148, 556, 3, 371], [274, 431, 4, 121], [401, 811, 1, 354], [27, 186, 2, 104], [150, 562, 0, 355], [276, 437, 1, 105], [386, 818, 1, 358], [11, 192, 1, 107], [135, 569, 0, 360], [260, 443, 0, 109], [388, 825, 3, 382], [14, 200, 4, 132], [137, 576, 2, 384], [263, 451, 3, 134], [390, 813, 0, 384], [16, 188, 1, 134], [139, 565, 4, 390], [265, 440, 0, 135], [393, 821, 3, 374], [18, 195, 3, 123], [141, 571, 1, 374], [267, 446, 2, 124], [412, 862, 2, 377], [38, 237, 3, 127], [161, 613, 1, 378], [287, 488, 2, 128], [415, 869, 0, 397], [40, 243, 0, 146], [163, 619, 3, 402], [289, 494, 4, 152], [417, 858, 2, 403], [42, 232, 2, 152], [166, 609, 1, 405], [291, 483, 1, 154], [419, 864, 4, 392], [44, 238, 4, 141], [168, 616, 3, 393], [293, 490, 3, 142], [404, 871, 4, 397], [29, 245, 4, 146], [152, 622, 2, 397], [278, 497, 3, 147], [406, 878, 1, 275], [31, 252, 1, 24], [155, 629, 0, 276], [280, 503, 0, 25], [408, 867, 3, 281], [33, 241, 3, 30], [157, 618, 2, 282], [282, 492, 2, 31], [410, 873, 0, 265], [36, 248, 1, 15], [159, 624, 4, 271], [285, 499, 0, 16], [289, 633, 4, 273], [415, 508, 0, 18], [38, 384, 3, 275], [164, 259, 4, 25], [291, 640, 1, 292], [417, 515, 2, 42], [40, 391, 0, 294], [166, 266, 1, 44], [294, 629, 4, 300], [419, 503, 4, 49], [42, 380, 2, 300], [168, 255, 3, 50], [296, 636, 1, 284], [421, 510, 1, 33], [45, 387, 0, 285], [170, 261, 0, 34], [280, 642, 0, 287], [406, 517, 1, 37], [29, 393, 4, 293], [155, 268, 0, 38], [283, 649, 3, 312], [408, 523, 3, 61], [31, 399, 1, 312], [157, 274, 2, 62], [285, 638, 0, 313], [410, 512, 0, 62], [34, 389, 4, 320], [159, 263, 4, 69], [287, 644, 2, 302], [412, 518, 2, 51], [36, 396, 1, 303], [161, 270, 1, 52], [307, 686, 2, 307], [432, 560, 2, 56], [56, 438, 1, 308], [181, 312, 1, 57], [309, 693, 4, 331], [434, 567, 4, 80], [58, 444, 3, 332], [183, 318, 3, 81], [311, 682, 1, 332], [437, 557, 2, 82], [60, 433, 0, 333], [186, 308, 1, 83], [313, 688, 3, 321], [439, 563, 4, 71], [62, 439, 2, 322], [188, 314, 3, 72], [298, 695, 3, 325], [423, 569, 3, 74], [47, 446, 2, 326], [172, 320, 2, 75], [300, 701, 0, 267], [426, 576, 1, 17], [49, 453, 4, 273], [175, 328, 0, 18], [302, 690, 2, 273], [428, 565, 3, 23], [51, 441, 1, 274], [177, 316, 2, 24], [305, 698, 0, 258], [430, 572, 0, 7], [53, 448, 3, 263], [179, 323, 4, 13], [324, 598, 4, 266], [450, 473, 0, 11], [73, 349, 3, 267], [199, 224, 4, 17], [327, 605, 2, 286], [452, 479, 2, 35], [75, 355, 0, 286], [201, 230, 1, 36], [329, 594, 4, 293], [454, 468, 4, 42], [78, 345, 3, 294], [203, 219, 3, 43], [331, 600, 1, 276], [456, 474, 1, 25], [80, 352, 0, 278], [205, 226, 0, 27], [316, 607, 1, 281], [441, 481, 1, 30], [64, 358, 4, 286], [190, 233, 0, 31], [318, 614, 3, 305], [443, 488, 3, 54], [67, 365, 2, 306], [192, 239, 2, 55], [320, 603, 0, 306], [445, 477, 0, 55], [69, 354, 4, 312], [194, 228, 4, 61], [322, 609, 2, 295], [448, 484, 3, 45], [71, 360, 1, 296], [197, 235, 2, 46], [342, 651, 2, 299], [467, 525, 2, 48], [91, 402, 1, 301], [216, 276, 1, 50], [344, 657, 4, 323], [470, 532, 0, 68], [93, 409, 3, 325], [219, 284, 4, 75], [346, 646, 1, 325], [472, 521, 2, 75], [95, 397, 0, 326], [221, 272, 1, 76], [349, 654, 4, 315], [474, 528, 4, 64], [97, 404, 2, 315], [223, 279, 3, 65], [333, 660, 3, 318], [459, 535, 4, 68], [82, 411, 2, 319], [208, 286, 3, 69], [335, 666, 0, 196], [461, 541, 1, 446], [84, 417, 4, 202], [210, 292, 0, 447], [338, 656, 3, 204], [463, 530, 3, 453], [86, 406, 1, 204], [212, 281, 2, 454], [340, 662, 0, 187], [465, 536, 0, 436], [89, 413, 4, 194], [214, 287, 4, 443], [219, 486, 4, 196], [344, 360, 4, 445], [468, 737, 3, 197], [93, 111, 3, 446], [221, 492, 1, 215], [346, 366, 1, 464], [470, 743, 0, 216], [95, 117, 0, 465], [223, 481, 3, 221], [349, 356, 4, 471], [472, 732, 2, 222], [98, 107, 3, 472], [225, 487, 0, 205], [351, 362, 1, 455], [474, 738, 4, 211], [100, 113, 0, 456], [210, 494, 0, 209], [335, 368, 0, 458], [459, 745, 4, 216], [84, 119, 4, 465], [212, 501, 2, 233], [338, 376, 3, 483], [461, 752, 1, 235], [87, 127, 2, 485], [214, 489, 4, 240], [340, 364, 0, 485], [463, 741, 3, 241], [89, 116, 4, 491], [217, 497, 2, 225], [342, 371, 2, 474], [465, 747, 0, 225], [91, 122, 1, 475], [236, 538, 1, 228], [362, 413, 2, 478], [485, 789, 0, 229], [111, 164, 1, 479], [239, 545, 4, 253], [364, 419, 4, 502], [487, 795, 2, 253], [113, 170, 3, 3], [241, 534, 1, 254], [366, 408, 1, 3], [490, 785, 0, 256], [115, 159, 0, 5], [243, 540, 3, 243], [368, 414, 3, 492], [492, 792, 2, 244], [117, 166, 2, 493], [228, 547, 3, 248], [353, 421, 3, 497], [476, 798, 1, 248], [102, 173, 2, 498], [230, 554, 0, 126], [355, 428, 0, 375], [479, 805, 4, 132], [104, 179, 4, 381], [232, 543, 2, 132], [357, 417, 2, 381], [481, 794, 1, 133], [106, 168, 1, 382], [234, 549, 4, 121], [360, 424, 0, 366], [483, 800, 3, 122], [109, 175, 4, 372], [254, 450, 4, 125], [379, 824, 4, 374], [3, 201, 3, 127], [128, 575, 3, 376], [256, 457, 1, 144], [382, 832, 2, 394], [5, 208, 0, 146], [131, 583, 1, 396], [258, 445, 3, 151], [384, 820, 4, 401], [7, 197, 2, 152], [133, 572, 3, 402], [261, 453, 1, 136], [386, 827, 1, 385], [9, 203, 4, 141], [135, 578, 0, 386], [245, 459, 0, 139], [371, 834, 1, 389], [494, 710, 4, 145], [120, 585, 0, 390], [247, 465, 2, 163], [373, 840, 3, 413], [496, 716, 1, 164], [122, 591, 2, 414], [250, 455, 0, 165], [375, 829, 0, 414], [498, 705, 3, 171], [124, 580, 4, 421], [252, 461, 2, 154], [377, 835, 2, 403], [1, 213, 1, 155], [126, 587, 1, 404], [272, 503, 2, 159], [397, 877, 2, 408], [20, 254, 0, 159], [146, 629, 1, 409], [274, 510, 4, 183], [399, 884, 4, 432], [23, 261, 3, 184], [148, 635, 3, 433], [276, 499, 1, 184], [401, 873, 1, 433], [25, 250, 0, 185], [150, 624, 0, 434], [278, 505, 3, 173], [404, 880, 4, 423], [27, 256, 2, 174], [153, 631, 3, 424], [263, 512, 3, 177], [388, 886, 3, 426], [12, 263, 2, 178], [137, 137, 2, 427], [265, 518, 0, 55], [390, 392, 0, 304], [14, 270, 4, 62], [139, 144, 4, 311], [267, 507, 2, 62], [393, 882, 3, 312], [16, 258, 1, 63], [142, 633, 2, 313], [269, 514, 4, 51], [395, 889, 0, 296], [18, 265, 3, 52], [144, 640, 4, 302], [148, 274, 3, 54], [274, 649, 4, 304], [397, 525, 2, 55], [23, 400, 3, 305], [151, 281, 1, 74], [276, 655, 1, 323], [399, 531, 4, 79], [25, 406, 0, 324], [153, 270, 3, 80], [278, 644, 3, 329], [402, 521, 2, 82], [27, 395, 2, 331], [155, 276, 0, 64], [280, 650, 0, 313], [404, 528, 4, 70], [29, 402, 4, 319], [140, 283, 0, 69], [265, 657, 0, 318], [388, 534, 3, 74], [14, 409, 4, 324], [142, 290, 2, 93], [267, 664, 2, 342], [391, 541, 1, 94], [16, 415, 1, 343], [144, 279, 4, 99], [269, 653, 4, 348], [393, 530, 3, 100], [18, 404, 3, 349], [146, 285, 1, 83], [272, 660, 2, 333], [395, 536, 0, 84], [21, 411, 1, 334], [166, 327, 1, 87], [291, 701, 1, 336], [415, 578, 0, 88], [40, 452, 0, 337], [168, 333, 3, 111], [294, 708, 4, 361], [417, 585, 2, 112], [43, 460, 3, 362], [170, 322, 0, 113], [296, 697, 1, 363], [419, 573, 4, 119], [45, 448, 0, 364], [173, 330, 3, 102], [298, 704, 3, 351], [421, 580, 1, 103], [47, 455, 2, 353], [157, 336, 2, 106], [283, 711, 3, 356], [406, 587, 1, 107], [32, 462, 2, 357], [159, 342, 4, 52], [285, 717, 0, 297], [408, 593, 3, 53], [34, 468, 4, 303], [162, 332, 2, 55], [287, 706, 2, 304], [410, 582, 0, 55], [36, 457, 1, 305], [164, 338, 4, 43], [289, 712, 4, 292], [413, 589, 3, 45], [38, 463, 3, 294], [184, 239, 4, 48], [309, 613, 4, 297], [432, 490, 2, 48], [58, 365, 3, 298], [186, 246, 1, 67], [311, 620, 1, 316], [435, 497, 0, 68], [60, 371, 0, 317], [188, 235, 3, 73], [313, 609, 3, 322], [437, 486, 2, 74], [62, 360, 2, 323], [190, 241, 0, 57], [316, 616, 1, 307], [439, 492, 4, 63], [65, 367, 0, 308], [175, 248, 0, 61], [300, 622, 0, 310], [424, 499, 4, 68], [49, 373, 4, 317], [177, 254, 2, 85], [302, 628, 2, 334], [426, 506, 1, 87], [51, 380, 1, 336], [179, 243, 4, 92], [305, 618, 0, 337], [428, 494, 3, 93], [54, 369, 4, 343], [181, 250, 1, 76], [307, 625, 2, 326], [430, 501, 0, 77], [56, 376, 1, 327], [201, 292, 1, 80], [327, 667, 2, 330], [450, 543, 0, 81], [76, 418, 1, 331], [203, 298, 3, 104], [329, 673, 4, 354], [452, 549, 2, 105], [78, 424, 3, 355], [206, 288, 1, 106], [331, 662, 1, 355], [454, 538, 4, 112], [80, 413, 0, 357], [208, 294, 3, 95], [333, 668, 3, 344], [457, 545, 2, 96], [82, 419, 2, 345], [192, 300, 2, 99], [318, 675, 3, 349], [441, 551, 1, 100], [67, 426, 2, 350], [195, 308, 0, 478], [320, 682, 0, 227], [443, 558, 3, 483], [69, 433, 4, 233], [197, 296, 2, 484], [322, 670, 2, 233], [446, 548, 1, 485], [71, 422, 1, 234], [199, 303, 4, 473], [324, 677, 4, 222], [448, 554, 3, 474], [73, 428, 3, 223], [141, 189, 1, 474], [267, 564, 2, 224], [390, 440, 0, 476], [16, 315, 1, 226], [143, 196, 3, 498], [269, 571, 4, 248], [392, 447, 2, 500], [18, 322, 3, 250], [145, 184, 0, 0], [271, 559, 1, 250], [394, 436, 4, 6], [20, 311, 0, 251], [148, 192, 3, 490], [273, 566, 3, 239], [397, 443, 2, 491], [22, 317, 2, 240], [132, 198, 2, 493], [258, 573, 3, 243], [381, 449, 1, 494], [7, 324, 2, 244], [134, 204, 4, 17], [260, 579, 0, 262], [383, 455, 3, 18], [9, 330, 4, 268], [137, 194, 2, 19], [262, 568, 2, 268], [386, 445, 1, 21], [11, 319, 1, 270], [139, 200, 4, 8], [264, 574, 4, 257], [388, 452, 3, 9], [13, 326, 3, 258], [159, 242, 4, 13], [284, 616, 4, 262], [408, 494, 3, 14], [33, 368, 3, 263], [161, 249, 1, 32], [286, 623, 1, 281], [410, 500, 0, 33], [35, 374, 0, 282], [163, 238, 3, 38], [289, 613, 4, 288], [412, 489, 2, 39], [38, 364, 3, 289], [165, 244, 0, 22], [291, 619, 1, 272], [414, 495, 4, 28], [40, 370, 0, 273], [150, 251, 0, 26], [275, 625, 0, 275], [399, 502, 4, 32], [24, 376, 4, 281], [152, 257, 2, 409], [278, 632, 3, 159], [401, 509, 1, 411], [27, 384, 2, 161], [154, 246, 4, 416], [280, 621, 0, 161], [403, 497, 3, 417], [29, 372, 4, 167], [156, 253, 1, 400], [282, 628, 2, 150], [405, 504, 0, 401], [31, 379, 1, 151], [176, 654, 1, 404], [302, 529, 2, 154], [425, 905, 0, 405], [51, 280, 1, 155], [178, 660, 3, 428], [304, 535, 4, 178], [427, 911, 2, 429], [53, 286, 3, 179], [181, 650, 1, 430], [306, 524, 1, 179], [430, 901, 0, 432], [55, 275, 0, 181], [183, 656, 3, 419], [308, 530, 3, 168], [432, 908, 2, 420], [57, 282, 2, 169], [167, 662, 2, 423], [293, 537, 3, 173], [416, 914, 1, 424], [42, 289, 2, 174], [170, 170, 0, 443], [295, 544, 0, 192], [419, 421, 4, 449], [44, 295, 4, 198], [172, 659, 2, 449], [297, 533, 2, 198], [421, 910, 1, 450], [46, 284, 1, 199], [174, 665, 4, 438], [300, 540, 0, 183], [423, 916, 3, 439], [49, 291, 4, 189], [194, 207, 4, 442], [319, 581, 4, 191], [443, 458, 3, 443], [68, 332, 3, 192], [196, 213, 1, 461], [322, 588, 2, 211], [445, 465, 0, 462], [71, 340, 1, 212], [198, 202, 3, 468], [324, 577, 4, 218], [447, 453, 2, 469], [73, 328, 3, 219], [200, 209, 0, 451], [326, 584, 1, 201], [449, 460, 4, 458], [75, 335, 0, 203], [185, 216, 0, 456], [311, 591, 1, 206], [434, 467, 4, 462], [60, 342, 0, 207], [187, 222, 2, 339], [313, 597, 3, 89], [436, 473, 1, 340], [62, 348, 2, 90], [189, 211, 4, 345], [315, 586, 0, 90], [438, 462, 3, 347], [64, 337, 4, 97], [192, 218, 2, 330], [317, 592, 2, 79], [441, 469, 1, 331], [66, 343, 1, 80], [71, 478, 1, 334], [196, 352, 1, 83], [320, 730, 0, 335], [445, 604, 0, 84], [73, 485, 3, 358], [198, 359, 3, 107], [322, 736, 2, 359], [447, 610, 2, 108], [75, 474, 0, 359], [201, 349, 1, 109], [324, 725, 4, 365], [450, 600, 0, 110], [77, 480, 2, 348], [203, 355, 3, 98], [326, 731, 1, 349], [452, 606, 2, 99], [62, 487, 2, 352], [187, 361, 2, 101], [311, 738, 1, 353], [436, 612, 1, 102], [64, 493, 4, 376], [190, 368, 0, 121], [313, 745, 3, 377], [439, 620, 4, 127], [66, 482, 1, 378], [192, 357, 2, 128], [315, 733, 0, 379], [441, 608, 1, 129], [69, 490, 4, 367], [194, 364, 4, 116], [317, 740, 2, 368], [443, 615, 3, 118], [88, 531, 3, 371], [214, 406, 4, 121], [337, 782, 2, 372], [463, 657, 3, 122], [90, 537, 0, 390], [216, 412, 1, 140], [339, 788, 4, 396], [465, 663, 0, 141], [93, 527, 3, 397], [218, 401, 3, 146], [342, 778, 2, 398], [467, 652, 2, 147], [95, 533, 0, 381], [220, 407, 0, 130], [344, 784, 4, 387], [469, 658, 4, 136], [80, 540, 0, 385], [205, 414, 0, 134], [328, 790, 3, 391], [454, 665, 4, 141], [82, 547, 2, 332], [207, 421, 2, 81], [331, 798, 1, 333], [456, 672, 1, 82], [84, 535, 4, 338], [209, 409, 4, 87], [333, 787, 3, 339], [458, 661, 3, 88], [86, 542, 1, 322], [212, 417, 2, 72], [335, 793, 0, 323], [461, 668, 1, 73], [106, 443, 1, 326], [231, 317, 1, 75], [355, 694, 0, 328], [480, 568, 0, 76], [108, 449, 3, 350], [234, 324, 4, 100], [357, 701, 2, 352], [483, 576, 3, 101], [110, 438, 0, 352], [236, 313, 1, 102], [359, 689, 4, 358], [485, 564, 0, 103], [112, 445, 2, 341], [238, 320, 3, 90], [361, 696, 1, 342], [487, 571, 2, 92], [97, 452, 2, 345], [223, 327, 3, 95], [346, 703, 1, 346], [472, 578, 2, 96], [99, 458, 4, 369], [225, 333, 0, 114], [348, 709, 3, 370], [474, 584, 4, 120], [101, 447, 1, 370], [227, 322, 2, 120], [350, 698, 0, 372], [476, 573, 1, 121], [104, 454, 4, 360], [229, 328, 4, 109], [353, 705, 3, 361], [478, 579, 3, 110], [123, 495, 3, 364], [249, 370, 4, 113], [372, 746, 2, 365], [498, 621, 3, 115], [126, 503, 1, 384], [251, 377, 1, 132], [375, 754, 0, 385], [0, 128, 0, 134], [128, 491, 3, 390], [253, 365, 3, 139], [377, 743, 2, 391], [2, 117, 2, 140], [130, 498, 0, 374], [256, 373, 1, 124], [379, 749, 4, 380], [5, 124, 0, 125], [115, 505, 0, 378], [240, 379, 0, 127], [364, 756, 4, 384], [489, 630, 4, 133], [117, 511, 2, 261], [242, 385, 2, 10], [366, 762, 1, 263], [491, 636, 1, 11], [119, 500, 4, 268], [245, 375, 0, 13], [368, 751, 3, 269], [494, 626, 4, 19], [121, 506, 1, 252], [247, 381, 2, 2], [370, 758, 0, 253], [496, 633, 1, 3], [0, 330, 0, 255], [126, 205, 1, 5], [249, 581, 4, 261], [375, 456, 0, 6], [3, 337, 3, 280], [128, 211, 3, 29], [251, 587, 1, 280], [377, 462, 2, 30], [5, 326, 0, 281], [130, 200, 0, 30], [254, 577, 4, 288], [379, 451, 4, 36], [7, 332, 2, 270], [132, 206, 2, 19], [256, 584, 1, 271], [381, 457, 1, 20], [492, 839, 2, 275], [117, 213, 2, 23], [240, 590, 0, 275], [366, 464, 1, 25], [494, 846, 4, 299], [119, 220, 4, 47], [243, 597, 3, 300], [368, 471, 3, 49], [496, 835, 1, 300], [121, 208, 1, 49], [245, 586, 0, 301], [370, 460, 0, 50], [498, 841, 3, 289], [124, 216, 4, 39], [247, 592, 2, 290], [373, 467, 3, 40], [18, 383, 3, 293], [143, 257, 3, 42], [267, 634, 2, 294], [392, 508, 2, 43], [20, 389, 0, 312], [146, 264, 1, 62], [269, 641, 4, 318], [395, 515, 0, 63], [22, 378, 2, 319], [148, 253, 3, 68], [271, 629, 1, 320], [397, 504, 2, 70], [25, 386, 0, 303], [150, 259, 0, 52], [273, 636, 3, 309], [399, 511, 4, 58], [9, 392, 4, 312], [135, 266, 0, 57], [258, 643, 3, 313], [384, 518, 4, 63], [11, 398, 1, 190], [137, 273, 2, 440], [260, 649, 0, 191], [386, 524, 1, 441], [14, 388, 4, 197], [139, 262, 4, 446], [262, 638, 2, 198], [388, 513, 3, 448], [16, 394, 1, 181], [141, 268, 1, 430], [265, 645, 0, 182], [390, 519, 0, 431], [36, 295, 1, 186], [161, 169, 1, 435], [284, 546, 4, 191], [410, 420, 0, 436], [38, 302, 3, 210], [163, 176, 3, 459], [287, 553, 2, 211], [412, 427, 2, 460], [40, 291, 0, 211], [165, 165, 0, 460], [289, 542, 4, 217], [414, 416, 4, 466], [42, 297, 2, 200], [168, 172, 3, 450], [291, 548, 1, 201], [417, 423, 2, 451], [27, 304, 2, 204], [152, 178, 2, 453], [276, 555, 1, 205], [401, 429, 1, 454], [29, 310, 4, 228], [154, 184, 4, 477], [278, 562, 3, 229], [403, 435, 3, 478], [31, 299, 1, 230], [157, 174, 2, 480], [280, 550, 0, 231], [406, 425, 1, 481], [33, 306, 3, 218], [159, 180, 4, 468], [282, 557, 2, 220], [408, 432, 3, 470], [53, 348, 3, 223], [179, 222, 4, 473], [302, 599, 2, 224], [428, 474, 3, 474], [55, 354, 0, 242], [181, 229, 1, 492], [304, 605, 4, 248], [430, 480, 0, 493], [58, 344, 3, 249], [183, 218, 3, 498], [306, 594, 1, 249], [432, 469, 2, 499], [60, 350, 0, 233], [185, 224, 0, 482], [309, 601, 4, 239], [434, 475, 4, 488], [44, 356, 4, 241], [170, 231, 0, 486], [293, 607, 3, 243], [419, 482, 4, 493], [47, 364, 2, 121], [172, 237, 2, 370], [295, 614, 0, 121], [421, 489, 1, 371], [49, 352, 4, 127], [174, 226, 4, 376], [298, 604, 3, 128], [423, 477, 3, 377], [51, 359, 1, 111], [176, 233, 1, 360], [300, 610, 0, 112], [425, 484, 0, 361], [430, 619, 0, 114], [55, 493, 0, 363], [179, 370, 4, 120], [304, 744, 4, 369], [432, 625, 2, 138], [58, 500, 3, 388], [181, 377, 1, 139], [307, 752, 2, 389], [434, 614, 4, 145], [60, 489, 0, 390], [183, 365, 3, 146], [309, 740, 4, 396], [437, 622, 2, 129], [62, 496, 2, 378], [185, 372, 0, 130], [311, 747, 1, 380], [421, 628, 1, 133], [47, 503, 2, 383], [170, 379, 0, 134], [296, 754, 1, 384], [423, 634, 3, 157], [49, 509, 4, 407], [172, 385, 2, 158], [298, 760, 3, 408], [426, 624, 1, 159], [51, 498, 1, 408], [174, 374, 4, 164], [300, 749, 0, 409], [428, 630, 3, 148], [53, 504, 3, 397], [177, 381, 2, 149], [302, 755, 2, 398], [448, 672, 3, 152], [73, 546, 3, 401], [196, 422, 1, 153], [322, 797, 2, 403], [450, 679, 0, 171], [75, 553, 0, 420], [199, 430, 4, 178], [324, 804, 4, 427], [452, 667, 2, 178], [77, 541, 2, 427], [201, 419, 1, 179], [326, 793, 1, 428], [454, 674, 4, 167], [80, 549, 0, 412], [203, 425, 3, 168], [329, 800, 4, 418], [439, 681, 4, 171], [64, 555, 4, 420], [188, 432, 3, 172], [313, 806, 3, 421], [441, 687, 1, 360], [66, 561, 1, 109], [190, 438, 0, 361], [315, 812, 0, 110], [443, 676, 3, 366], [69, 551, 4, 116], [192, 427, 2, 367], [318, 802, 3, 117], [445, 682, 0, 350], [71, 557, 1, 100], [194, 434, 4, 356], [320, 809, 0, 101], [465, 584, 0, 354], [91, 459, 1, 104], [214, 335, 4, 361], [340, 710, 0, 105], [467, 590, 2, 378], [93, 465, 3, 128], [216, 341, 1, 380], [342, 716, 2, 129], [470, 580, 0, 381], [95, 454, 0, 130], [218, 330, 3, 386], [344, 705, 4, 136], [472, 586, 2, 370], [97, 460, 2, 118], [221, 337, 1, 371], [346, 711, 1, 120], [456, 592, 1, 373], [82, 467, 2, 123], [205, 343, 0, 374], [331, 718, 1, 124], [459, 600, 4, 398], [84, 474, 4, 147], [207, 350, 2, 398], [333, 725, 3, 148], [461, 588, 1, 399], [86, 462, 1, 148], [210, 340, 0, 401], [335, 714, 0, 149], [463, 595, 3, 388], [88, 469, 3, 137], [212, 346, 2, 389], [337, 720, 2, 138], [483, 637, 3, 393], [108, 511, 3, 141], [232, 388, 2, 394], [357, 762, 2, 143], [485, 643, 0, 412], [110, 517, 0, 160], [234, 394, 4, 418], [359, 768, 4, 167]]\nT = len(inputs)\nif not dry_run:\n    T = int(input())\nfull_mask = 2 ** 40 - 1\n\ndef correct_value(x, y, l, r):\n    max_product = 0\n    max_product_z = l\n    for i in range(l, r + 1):\n        z = (x & i) * (y & i)\n        if z > max_product:\n            max_product = z\n            max_product_z = i\n    return max_product_z\n\ndef get_z(x, y, l, r):\n    choices = [l, r]\n    alterable_bits = len(bin(l ^ r)) - 3\n    max_possible_z = x | y\n    max_product = -1\n    max_z = 0\n    set_bit = 2 ** alterable_bits\n    mask = set_bit - 1\n    for i in range(alterable_bits):\n        set_bit = set_bit >> 1\n        mask = mask >> 1\n        masked_or = mask & max_possible_z\n        if l & set_bit == 0 and max_possible_z & set_bit > 0:\n            z = (l | set_bit) ^ l & mask | masked_or\n            choices.append(z)\n    set_bit = 2 ** alterable_bits\n    mask = set_bit - 1\n    for i in range(alterable_bits):\n        set_bit = set_bit >> 1\n        mask = mask >> 1\n        masked_or = mask & max_possible_z\n        if r & set_bit > 0:\n            z = r ^ r & (set_bit << 1) - 1 | masked_or\n            choices.append(z)\n    for z in choices:\n        product = (x & z) * (y & z)\n        if product > max_product:\n            max_product = product\n            max_possible_z = z\n        elif product == max_product and z < max_possible_z:\n            max_possible_z = z\n    return max_possible_z\nfor t in range(T):\n    x = y = l = r = 0\n    if dry_run:\n        (x, y, l, r) = inputs[t]\n    else:\n        (x, y, l, r) = map(int, input().split())\n    my = get_z(x, y, l, r)\n    if dry_run:\n        correct = correct_value(x, y, l, r)\n        if my == correct:\n            print('verified')\n            pass\n        else:\n            print('not-verified     | x : {}, y : {}, l : {}, r : {}, calculated : {}, correct : {}'.format(x, y, l, r, my, correct))\n            print('bin(x) :', bin(x), '\\tbin(y) :', bin(y), '\\tbin(correct) :', bin(correct), '\\tbin(calculated) :', bin(my), '\\n')\n    else:\n        print(my)", "a = int(input())\nfor i in range(a):\n    (x, y, l, r) = map(int, input().split())\n    if x == 0 or y == 0:\n        print(l)\n        continue\n    ans = x | y\n    if l == 0 and r >= ans:\n        print(ans)\n        continue\n    arr = []\n    prev = 0\n    if l == r:\n        print(l)\n        continue\n    for j in range(43):\n        k = 1 << j\n        if ans & k != 0:\n            arr.append(prev + k)\n        else:\n            arr.append(prev)\n        prev = arr[j]\n    z = 0\n    k = 0\n    for j in range(42, -1, -1):\n        m = 1 << j\n        k = j\n        if l & m == r & m:\n            if r & m != 0:\n                z += m\n        else:\n            break\n    p2 = l\n    p1 = r\n    ans1 = (x & p1) * (y & p1)\n    ans2 = (x & p2) * (y & p2)\n    z1 = z + (1 << k)\n    z2 = z\n    k -= 1\n    for j in range(k, 0, -1):\n        m = 1 << j\n        add = arr[j - 1]\n        if r & m != 0:\n            p = z1 + add\n            if (x & p) * (y & p) > ans1 or (ans1 == (x & p) * (y & p) and p < p1):\n                ans1 = (x & p) * (y & p)\n                p1 = p\n            z1 += m\n        if l & m == 0 and ans & m != 0:\n            p = z2 + m + add\n            if (x & p) * (y & p) > ans2 or ((x & p) * (y & p) == ans2 and p < p2):\n                ans2 = (x & p) * (y & p)\n                p2 = p\n        elif l & m != 0:\n            z2 += m\n    add = 0\n    m = 1\n    if r & m != 0:\n        p = z1 + add\n        if (x & p) * (y & p) > ans1 or (ans1 == (x & p) * (y & p) and p < p1):\n            ans1 = (x & p) * (y & p)\n            p1 = p\n    if l & m == 0 and ans & 1 != 0:\n        p = z2 + m + add\n        if (x & p) * (y & p) > ans2 or ((x & p) * (y & p) == ans2 and p < p2):\n            ans2 = (x & p) * (y & p)\n            p2 = p\n    if p1 == p2:\n        print(p1)\n    elif ans1 > ans2:\n        print(p1)\n    elif ans1 < ans2:\n        print(p2)\n    else:\n        print(min(p1, p2))", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "a = int(input())\nfor i in range(a):\n    (x, y, l, r) = map(int, input().split())\n    if x == 0 or y == 0:\n        print(l)\n        continue\n    ans = x | y\n    if l == 0 and r >= ans:\n        print(ans)\n        continue\n    arr = []\n    prev = 0\n    if l == r:\n        print(l)\n        continue\n    for j in range(43):\n        k = 1 << j\n        if ans & k != 0:\n            arr.append(prev + k)\n        else:\n            arr.append(prev)\n        prev = arr[j]\n    z = 0\n    k = 0\n    for j in range(42, -1, -1):\n        m = 1 << j\n        k = j\n        if l & m == r & m:\n            if r & m != 0:\n                z += m\n        else:\n            break\n    p2 = l\n    p1 = r\n    ans1 = (x & p1) * (y & p1)\n    ans2 = (x & p2) * (y & p2)\n    z1 = z + (1 << k)\n    z2 = z\n    k -= 1\n    for j in range(k, 0, -1):\n        m = 1 << j\n        add = arr[j - 1]\n        if r & m != 0:\n            p = z1 + add\n            if (x & p) * (y & p) > ans1 or (ans1 == (x & p) * (y & p) and p < p1):\n                ans1 = (x & p) * (y & p)\n                p1 = p\n            z1 += m\n        if l & m == 0 and ans & m != 0:\n            p = z2 + m + add\n            if (x & p) * (y & p) > ans2 or ((x & p) * (y & p) == ans2 and p < p2):\n                ans2 = (x & p) * (y & p)\n                p2 = p\n        elif l & m != 0:\n            z2 += m\n    add = 0\n    m = 1\n    if r & m != 0:\n        p = z1 + add\n        if (x & p) * (y & p) > ans1 or (ans1 == (x & p) * (y & p) and p < p1):\n            ans1 = (x & p) * (y & p)\n            p1 = p\n    if l & m == 0 and ans & 1 != 0:\n        p = z2 + m + add\n        if (x & p) * (y & p) > ans2 or ((x & p) * (y & p) == ans2 and p < p2):\n            ans2 = (x & p) * (y & p)\n            p2 = p\n    if p1 == p2:\n        print(p1)\n    elif ans1 > ans2:\n        print(p1)\n    elif ans1 < ans2:\n        print(p2)\n    else:\n        print(min(p1, p2))", "import math\nt = int(input())\nfor _ in range(t):\n    x = input().split()\n    list1 = [int(i) for i in x]\n    a = list1[0]\n    b = list1[1]\n    l = list1[2]\n    r = list1[3]\n    if r == 0:\n        print(0)\n    else:\n        list2 = []\n        flag = False\n        x = math.floor(math.log2(r))\n        for i in range(x, -1, -1):\n            x0 = 1 << i\n            r1 = (r & x0) >> i\n            if r1 == 1:\n                l1 = (l & x0) >> i\n                if r1 == l1 and flag == False:\n                    continue\n                else:\n                    flag = True\n                    ans = r & ~x0 | x0 - 1\n                    list2.append(ans)\n        list2.extend([l, r])\n        list2.sort()\n        ans = l\n        for i in list2:\n            if (a & i) * (b & i) > (a & ans) * (b & ans):\n                ans = i\n        if ans == 0:\n            print(0)\n        else:\n            x = math.floor(math.log2(ans))\n            for i in range(x, -1, -1):\n                x0 = 1 << i\n                ans0 = (ans & x0) >> i\n                if ans0 == 1:\n                    a0 = (a & x0) >> i\n                    b0 = (b & x0) >> i\n                    if a0 == 0 and b0 == 0:\n                        ans1 = ans & ~x0\n                        if ans1 >= l:\n                            ans = ans1\n                        else:\n                            continue\n            print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    x = input().split()\n    list1 = [int(i) for i in x]\n    a = list1[0]\n    b = list1[1]\n    l = list1[2]\n    r = list1[3]\n    if r == 0:\n        print(0)\n    else:\n        list2 = []\n        flag = False\n        x = math.floor(math.log2(r))\n        for i in range(x, -1, -1):\n            x0 = 1 << i\n            r1 = (r & x0) >> i\n            if r1 == 1:\n                l1 = (l & x0) >> i\n                if r1 == l1 and flag == False:\n                    continue\n                else:\n                    flag = True\n                    ans = r & ~x0 | x0 - 1\n                    list2.append(ans)\n        list2.extend([l, r])\n        list2.sort()\n        ans = l\n        for i in list2:\n            if (a & i) * (b & i) > (a & ans) * (b & ans):\n                ans = i\n        if ans == 0:\n            print(0)\n        else:\n            x = math.floor(math.log2(ans))\n            for i in range(x, -1, -1):\n                x0 = 1 << i\n                ans0 = (ans & x0) >> i\n                if ans0 == 1:\n                    a0 = (a & x0) >> i\n                    b0 = (b & x0) >> i\n                    if a0 == 0 and b0 == 0:\n                        ans1 = ans & ~x0\n                        if ans1 >= l:\n                            ans = ans1\n                        else:\n                            continue\n            print(ans)", "def F(X, Y, Z):\n    return (X & Z) * (Y & Z)\n\ndef gettingabovel(lm, s):\n    global l\n    if lm & lm - 1 == 0:\n        x = lm | s\n        return x\n    else:\n        y = gettingabovel(lm & lm - 1, s)\n        if y >= l:\n            return y\n        return lm | s\nfor _ in range(int(input())):\n    (x, y, l, r) = list(map(int, input().split()))\n    if not x or not y:\n        print(l)\n        continue\n    q = x | y\n    if q in range(l, r + 1):\n        print(q)\n        continue\n    (m, ans, z) = (F(x, y, r), r, r)\n    while z:\n        temp = z - 1\n        if temp < l:\n            break\n        if F(x, y, temp) >= m:\n            m = F(x, y, temp)\n            ans = temp\n        z = z & z - 1\n    if F(x, y, l) >= m:\n        ans = l\n    s = ans & q\n    if s >= l:\n        print(s)\n        continue\n    x = gettingabovel(l, s)\n    print(x)", "import math\nt = int(input())\nfor _ in range(t):\n    x = input().split()\n    list1 = [int(i) for i in x]\n    a = list1[0]\n    b = list1[1]\n    l = list1[2]\n    r = list1[3]\n    if r == 0:\n        print(0)\n    else:\n        list2 = []\n        flag = False\n        x = math.floor(math.log2(r))\n        for i in range(x, -1, -1):\n            x0 = 1 << i\n            r1 = (r & x0) >> i\n            if r1 == 1:\n                l1 = (l & x0) >> i\n                if r1 == l1 and flag == False:\n                    continue\n                else:\n                    flag = True\n                    ans = r & ~x0 | x0 - 1\n                    list2.append(ans)\n        list2.extend([l, r])\n        list2.sort()\n        ans = l\n        for i in list2:\n            if (a & i) * (b & i) > (a & ans) * (b & ans):\n                ans = i\n        if ans == 0:\n            print(0)\n        else:\n            x = math.floor(math.log2(ans))\n            for i in range(x, -1, -1):\n                x0 = 1 << i\n                ans0 = (ans & x0) >> i\n                if ans0 == 1:\n                    a0 = (a & x0) >> i\n                    b0 = (b & x0) >> i\n                    if a0 == 0 and b0 == 0:\n                        ans1 = ans & ~x0\n                        if ans1 >= l:\n                            ans = ans1\n                        else:\n                            continue\n            print(ans)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "def F(X, Y, Z):\n    return (X & Z) * (Y & Z)\n\ndef solve(X, Y, L, R):\n    Z = 0\n    bits_equal = True\n    possible_zs = [L, R]\n    for bit in range(62, -1, -1):\n        mask = 1 << bit\n        if bits_equal and L & mask == R & mask:\n            Z |= R & mask\n            continue\n        if bits_equal:\n            bits_equal = False\n        if R & mask:\n            possible_zs.append(Z | mask - 1)\n        Z |= R & mask\n    (_, _, Z) = max(((F(X, Y, z), -z, z) for z in possible_zs))\n    for bit in range(62, -1, -1):\n        mask = 1 << bit\n        if Z & mask == 0:\n            continue\n        if X & mask == 0 and Y & mask == 0 and (Z & ~mask >= L):\n            Z &= ~mask\n    return Z\n\ndef main():\n    import sys\n    T = int(sys.stdin.readline())\n    for _ in range(T):\n        (X, Y, L, R) = (int(i) for i in sys.stdin.readline().split())\n        print(solve(X, Y, L, R))\nmain()", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "def calF(zIn):\n    return (x & zIn) * (y & zIn)\n\ndef makeEql(str1, dis):\n    toAdd = ''\n    for _ in range(dis):\n        toAdd += '0'\n    str1 = toAdd + str1\n    return str1\n\ndef calZ(length, dis, ch, curList, binZ):\n    prev = 0\n    pz = l\n    az = r\n    if lenZ < length:\n        binZ = makeEql(binZ, dis)\n        dis = 0\n    for index in indexContainer:\n        newList = curList.copy()\n        newList[index] = ch\n        for j in range(index + 1, length):\n            newList[j] = binZ[j + dis]\n        z = int(''.join(newList), 2)\n        cur = calF(z)\n        if cur >= prev:\n            if cur == prev:\n                if z < az:\n                    pz = z\n                    az = z\n            else:\n                prev = cur\n                pz = z\n                az = z\n    cur = calF(l)\n    if cur >= prev:\n        prev = cur\n        pz = l\n    cur = calF(r)\n    if cur > prev:\n        prev = cur\n        pz = r\n    return pz\nt = int(input())\nfor _ in range(t):\n    (x, y, l, r) = map(int, input().split())\n    if l == r:\n        resZ = l\n    elif min(x, y) == 0:\n        resZ = l\n    else:\n        bestZ = x | y\n        flag = 1\n        if bestZ <= r and bestZ >= l:\n            resZ = bestZ\n            flag = 0\n        binR = bin(r).replace('0b', '')\n        binZ = bin(bestZ).replace('0b', '')\n        lenR = len(binR)\n        lenZ = len(binZ)\n        listR = list(binR)\n        diff = abs(lenZ - lenR)\n        if l == 0 and flag:\n            indexContainer = []\n            for i in range(lenR):\n                if listR[i] == '1':\n                    indexContainer.append(i)\n            resZ = calZ(lenR, diff, '0', listR, binZ)\n        elif flag:\n            binL = bin(l).replace('0b', '')\n            lenL = len(binL)\n            difRL = lenR - lenL\n            binL = makeEql(binL, difRL)\n            lenL = lenR\n            for i in range(lenL):\n                if binL[i] != binR[i]:\n                    break\n            indexContainer = []\n            for m in range(i, lenR):\n                if listR[m] == '1':\n                    indexContainer.append(m)\n            resZ1 = calZ(lenR, diff, '0', listR, binZ)\n            if resZ1 <= r and resZ1 >= l:\n                resZ = resZ1\n            else:\n                listL = list(binL)\n                difL = abs(lenZ - lenL)\n                indexContainer = []\n                for k in range(i + 1, lenL):\n                    if listL[k] == '0':\n                        indexContainer.append(k)\n                resZ = calZ(lenL, difL, '1', listL, binZ)\n    print(resZ)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "for _ in range(int(input())):\n    (x, y, l, r) = list(map(int, input().split()))\n    if l == r:\n        print(l)\n        continue\n    xb = bin(x).replace('0b', '')\n    yb = bin(y).replace('0b', '')\n    rb = bin(r).replace('0b', '')\n    lb = bin(l).replace('0b', '')\n    (t_1, t_2, poss) = ('', '', [])\n    maxLen = max(len(xb), len(yb), len(rb), len(lb))\n    xb = '0' * (maxLen - len(xb)) + xb\n    yb = '0' * (maxLen - len(yb)) + yb\n    rb = '0' * (maxLen - len(rb)) + rb\n    lb = '0' * (maxLen - len(lb)) + lb\n    right = ''\n    for i in range(maxLen):\n        if xb[i] == '1' or yb[i] == '1':\n            right = right + '1'\n        else:\n            right = right + '0'\n    for i in range(maxLen):\n        if lb[i] != rb[i]:\n            ChangeInd = i\n            break\n    j = ChangeInd + 1\n    checkZgreaterThanL = False\n    t_1 = rb[:ChangeInd]\n    tempRor = ''\n    while j < maxLen:\n        if checkZgreaterThanL == False:\n            if lb[j] == '1':\n                tempRor += '1'\n            elif xb[j] == '1' or yb[j] == '1':\n                tempRor += '1'\n                checkZgreaterThanL = True\n            else:\n                tempRor += '0'\n        elif xb[j] == '1' or yb[j] == '1':\n            tempRor += '1'\n        else:\n            tempRor += '0'\n        j += 1\n    t_2 = t_1 + '0' + tempRor\n    poss.append(t_2)\n    t_1 = t_1 + '1'\n    for i in range(ChangeInd + 1, maxLen - 1):\n        Ror = ''\n        if rb[i] == '1':\n            if i + 1 < maxLen:\n                Ror = right[i + 1:]\n            t_2 = t_1 + '0' + Ror\n            poss.append(t_2)\n            t_1 += '1'\n        else:\n            t_1 += '0'\n    poss.append(rb[:-1] + '0')\n    poss.append(rb)\n    poss.append(lb)\n    maxVal = -1\n    z = r + 1\n    pOnce = {}\n    for i in poss:\n        pOnce[int(i, 2)] = True\n    for i in pOnce:\n        fVal = (x & i) * (y & i)\n        if fVal > maxVal:\n            z = i\n            maxVal = fVal\n        elif fVal == maxVal:\n            z = min(i, z)\n            maxVal = fVal\n    if maxVal == 0:\n        z = l\n    print(z)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\nt = int(input())\nfor test in range(t):\n    (x, y, l, r) = map(int, input().split())\n    p = x | y\n    p1 = bin(p)\n    fmax = x * y\n    if x == 0 or y == 0:\n        print(l)\n    elif p <= r and p >= l:\n        print(p)\n    else:\n        fmax = (x & r) * (y & r)\n        z = r\n        ans = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if (x & temp) * (y & temp) >= fmax:\n                fmax = (x & temp) * (y & temp)\n                ans = temp\n            z = z & z - 1\n        if (x & l) * (y & l) >= fmax:\n            fmax = (x & l) * (y & l)\n            ans = l\n        s = ans & p\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\nt = int(input())\nfor test in range(t):\n    (x, y, l, r) = map(int, input().split())\n    p = x | y\n    p1 = bin(p)\n    fmax = x * y\n    if x == 0 or y == 0:\n        print(l)\n    elif p <= r and p >= l:\n        print(p)\n    else:\n        fmax = (x & r) * (y & r)\n        z = r\n        ans = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if (x & temp) * (y & temp) >= fmax:\n                fmax = (x & temp) * (y & temp)\n                ans = temp\n            z = z & z - 1\n        if (x & l) * (y & l) >= fmax:\n            fmax = (x & l) * (y & l)\n            ans = l\n        s = ans & p\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "def recurse(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = recurse(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef f(x, y, z):\n    return (x & z) * (y & z)\nt = int(input())\nfor _ in range(t):\n    (x, y, l, r) = map(int, input().strip().split())\n    bor = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif l <= bor and r >= bor:\n        print(bor)\n    else:\n        maxi = f(x, y, r)\n        ans = r\n        z = r\n        while z:\n            t = z - 1\n            if t < l:\n                break\n            if f(x, y, t) >= maxi:\n                maxi = f(x, y, t)\n                ans = t\n            z = z & z - 1\n        if f(x, y, l) >= maxi:\n            maxi = f(x, y, l)\n            ans = l\n        s = ans & bor\n        if s >= l:\n            print(s)\n        else:\n            x = recurse(l, s)\n            print(x)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "def duvidha(binary, ini):\n    for i in range(ini, len(binary)):\n        a1 = 2 ** (len(binary) - i - 1)\n        if int(binary, 2) + a1 <= l or (i == len(binary) - 1 and (binary_x[i] == '1' or binary_y[i] == '1') and (int(binary, 2) + a1 <= r)):\n            binary = binary[:i] + '1' + binary[i + 1:]\n        elif binary_x[i] == '1' and binary_y[i] == '1':\n            if int(binary, 2) + a1 <= r:\n                binary = binary[:i] + '1' + binary[i + 1:]\n        elif binary_x[i] == '1' or binary_y[i] == '1':\n            if int(binary, 2) + a1 <= r:\n                binary1_x = binary_x[i + 1:]\n                binary1_y = binary_y[i + 1:]\n                a = int(binary1_x, 2) | int(binary1_y, 2)\n                if int(binary, 2) + a1 + a <= r:\n                    binary = binary[:i] + '1' + binary[i + 1:]\n                    binary = int(binary, 2) | a\n                    binary = bin(binary)\n                    binary = binary[2:]\n                    break\n                else:\n                    b = int(binary1_x, 2) | int(binary1_y, 2)\n                    b = b | int(binary, 2)\n                    binary = binary[:i] + '1' + binary[i + 1:]\n                    binary = duvidha(binary, i + 1)\n                    binary1 = bin(b)\n                    binary1 = binary1[2:]\n                    binary1 = '0' * (len(binary_x) - len(binary1)) + binary1\n                    if (int(binary1, 2) & x) * (int(binary1, 2) & y) >= (int(binary, 2) & x) * (int(binary, 2) & y):\n                        binary = binary1\n                    break\n    return binary\n\ndef less_than(binary, l):\n    diff = l - int(binary, 2)\n    for i in range(len(binary)):\n        if binary[i] == '0':\n            a1 = 2 ** (len(binary) - i - 1)\n            if binary[i] == '0':\n                if i == len(binary) - 1:\n                    binary = binary[:i] + '1'\n                else:\n                    temp = binary[i + 1:]\n                    temp = ''.join(('1' if x == '0' else '0' for x in temp))\n                    if int(temp, 2) < diff:\n                        binary = binary[:i] + '1' + binary[i + 1:]\n                        diff = diff - a1\n                        if diff <= 0:\n                            break\n    return binary\nt = int(input())\nfor i in range(t):\n    (x, y, l, r) = [int(x) for x in input().split()]\n    q = x | y\n    if q >= l and q <= r:\n        if q & x == 0 or q & y == 0:\n            print(l)\n        else:\n            print(q)\n    else:\n        binary_r = bin(r)\n        binary_r = binary_r[2:]\n        binary_x = bin(x)\n        binary_x = binary_x[2:]\n        binary_y = bin(y)\n        binary_y = binary_y[2:]\n        binary = '0' * len(binary_r)\n        if len(binary_x) > len(binary_r):\n            binary_x = binary_x[len(binary_x) - len(binary_r):]\n        else:\n            mi = len(binary_r) - len(binary_x)\n            binary_x = '0' * mi + binary_x\n        if len(binary_y) > len(binary_r):\n            binary_y = binary_y[len(binary_y) - len(binary_r):]\n        else:\n            mi = len(binary_r) - len(binary_y)\n            binary_y = '0' * mi + binary_y\n        binary = duvidha(binary, 0)\n        if int(binary, 2) < l:\n            binary = less_than(binary, l)\n        if int(binary, 2) & x == 0 or int(binary, 2) & y == 0:\n            print(l)\n        else:\n            print(int(binary, 2))", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "import sys\nimport math\nfrom collections import Counter\nfrom collections import deque as deq\nfrom functools import lru_cache\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nwhile t:\n    a = inlt()\n    (x, y, l, r) = a\n    zs = []\n    curr = 0\n    eq = True\n    for i in range(62, -1, -1):\n        p = 1 << i\n        if l & p == r & p and eq:\n            curr += r & p\n            continue\n        if eq:\n            eq = not eq\n        if r & p:\n            zs.append(curr + p - 1)\n        curr += r & p\n    zs.append(r)\n    zs.append(l)\n    zs.sort()\n    ans = zs[0]\n    for z in zs:\n        if (x & z) * (y & z) > (x & ans) * (y & ans):\n            ans = z\n    for i in range(62, -1, -1):\n        p = 1 << i\n        if ans & p == 0:\n            continue\n        if x & p == 0 and y & p == 0 and (ans - p >= l):\n            ans -= p\n    print(ans)\n    t -= 1", "import sys\nimport math\nfrom collections import Counter\nfrom collections import deque as deq\nfrom functools import lru_cache\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    s = input()\n    return list(s[:len(s) - 1])\n\ndef invr():\n    return map(int, input().split())\nt = inp()\nwhile t:\n    a = inlt()\n    (x, y, l, r) = a\n    zs = []\n    curr = 0\n    eq = True\n    for i in range(62, -1, -1):\n        p = 1 << i\n        if l & p == r & p and eq:\n            curr += r & p\n            continue\n        if eq:\n            eq = not eq\n        if r & p:\n            zs.append(curr + p - 1)\n        curr += r & p\n    zs.append(r)\n    zs.append(l)\n    zs.sort()\n    ans = zs[0]\n    for z in zs:\n        if (x & z) * (y & z) > (x & ans) * (y & ans):\n            ans = z\n    for i in range(62, -1, -1):\n        p = 1 << i\n        if ans & p == 0:\n            continue\n        if x & p == 0 and y & p == 0 and (ans - p >= l):\n            ans -= p\n    print(ans)\n    t -= 1", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        return lmin | ans\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        (maxi, ans, z) = (func(x, y, r), r, r)\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                (maxi, ans) = (func(x, y, temp), temp)\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            (maxi, ans) = (func(x, y, l), l)\n        s = ans & q\n        print(s) if s >= l else print(rangingl(l, s))", "def rangingl(lmin, ans):\n    global l\n    if lmin & lmin - 1 == 0:\n        x = lmin | ans\n        return x\n    else:\n        y = rangingl(lmin & lmin - 1, ans)\n        if y >= l:\n            return y\n        return lmin | ans\n\ndef func(x, y, z):\n    return (x & z) * (y & z)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().strip().split())\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxi = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxi:\n                maxi = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxi:\n            maxi = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = rangingl(l, s)\n            print(x)", "import math, ctypes\nbit = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808]\n\ndef turnK(n, k):\n    if k <= 0:\n        return n\n    return n & ~(1 << k)\ntc = int(input())\nfor _ in range(tc):\n    (x, y, l, r) = map(int, input().split())\n    if x == 0 or y == 0:\n        print(l)\n        continue\n    if l == r:\n        print(l)\n        continue\n    m = (x & r) * (y & r)\n    z = r\n    t = 1\n    new_r = r\n    flag = 1\n    i = 63\n    while i >= 0:\n        if r & bit[i]:\n            d = bit[i] - t\n            a = (r ^ d) & d\n            b = turnK(r, i) | a\n            if (x & b) * (y & b) > m and b >= l:\n                m = (x & b) * (y & b)\n                z = b\n        new_r = ctypes.c_ulong(new_r - bit[i]).value\n        if new_r != 0:\n            i = int(math.log(new_r, 2))\n        else:\n            i = -2147483648\n    i = 63\n    while i >= 0:\n        if z & bit[i]:\n            x2 = bit[i] - t\n            a2 = (z ^ x2) & x2\n            pp = turnK(z, i) | a2\n            if pp >= l and (x & pp) * (y & pp) >= m:\n                z = pp\n        i -= 1\n    if (x & z) * (y & z) == 0:\n        print(l)\n    else:\n        t1 = (x & z - 1) * (y & z - 1)\n        if t1 == m and z - 1 >= l:\n            print(z - 1)\n        else:\n            print(z)", "import math\nfrom sys import stdin\n\ndef clearBits(num, bits):\n    num &= ~((1 << bits) - 1)\n    return num\n\ndef reducer2(z, cur, l):\n    m = int(math.log(cur, 2))\n    while m >= 0:\n        if z >> m & 1 == 0 and cur >> m & 1:\n            if cur - (1 << m) >= l:\n                cur -= 1 << m\n        m -= 1\n    return cur\n\ndef solver(x, y, l, r):\n    if x == 0 or y == 0 or r == 0:\n        return l\n    elif l == r:\n        return l\n    else:\n        z = x | y\n        if l <= z <= r:\n            return z\n        m = int(math.log(r, 2))\n        max_set_bit = m\n        maxi = (x & r) * (y & r)\n        cur = r\n        while max_set_bit >= 0:\n            if r >> max_set_bit & 1:\n                t1 = (1 << max_set_bit) - 1\n                t2 = clearBits(r, max_set_bit + 1) | t1\n                if (x & t2) * (y & t2) > maxi and t2 >= l:\n                    maxi = (x & t2) * (y & t2)\n                    cur = t2\n                elif (x & t2) * (y & t2) == maxi and t2 >= l:\n                    cur = min(t2, cur)\n            max_set_bit -= 1\n        if (x & cur) * (y & cur) == 0:\n            return l\n        else:\n            m = reducer2(z, cur, l)\n            return m\ntest = int(input())\nfor _ in range(test):\n    (x, y, l, r) = map(int, input().split())\n    print(solver(x, y, l, r))", "def func(x, y, z):\n    return (x & z) * (y & z)\n\ndef recursion(lo, ans):\n    global l, r\n    if lo & lo - 1 == 0:\n        x = lo | ans\n        return x\n    else:\n        y = recursion(lo & lo - 1, ans)\n        if y >= l:\n            return y\n        return lo | ans\nt = int(input())\nwhile t:\n    t -= 1\n    (x, y, l, r) = map(int, input().strip().split(' '))\n    q = x | y\n    if x == 0 or y == 0:\n        print(l)\n    elif q >= l and q <= r:\n        print(q)\n    else:\n        maxx = func(x, y, r)\n        ans = r\n        z = r\n        while z:\n            temp = z - 1\n            if temp < l:\n                break\n            if func(x, y, temp) >= maxx:\n                maxx = func(x, y, temp)\n                ans = temp\n            z = z & z - 1\n        if func(x, y, l) >= maxx:\n            maxx = func(x, y, l)\n            ans = l\n        s = ans & q\n        if s >= l:\n            print(s)\n        else:\n            x = recursion(l, s)\n            print(x)", "for _ in range(int(input())):\n    (x, y, l, r) = list(map(int, input().split()))\n    if l == r:\n        print(l)\n        continue\n    xb = bin(x).replace('0b', '')\n    yb = bin(y).replace('0b', '')\n    rb = bin(r).replace('0b', '')\n    lb = bin(l).replace('0b', '')\n    (t_1, t_2, poss) = ('', '', [])\n    maxLen = max(len(xb), len(yb), len(rb), len(lb))\n    xb = '0' * (maxLen - len(xb)) + xb\n    yb = '0' * (maxLen - len(yb)) + yb\n    rb = '0' * (maxLen - len(rb)) + rb\n    lb = '0' * (maxLen - len(lb)) + lb\n    right = ''\n    for i in range(maxLen):\n        if xb[i] == '1' or yb[i] == '1':\n            right = right + '1'\n        else:\n            right = right + '0'\n    for i in range(maxLen):\n        if lb[i] != rb[i]:\n            ChangeInd = i\n            break\n    j = ChangeInd + 1\n    checkZgreaterThanL = False\n    t_1 = rb[:ChangeInd]\n    tempRor = ''\n    while j < maxLen:\n        if checkZgreaterThanL == False:\n            if lb[j] == '1':\n                tempRor += '1'\n            elif xb[j] == '1' or yb[j] == '1':\n                tempRor += '1'\n                checkZgreaterThanL = True\n            else:\n                tempRor += '0'\n        elif xb[j] == '1' or yb[j] == '1':\n            tempRor += '1'\n        else:\n            tempRor += '0'\n        j += 1\n    t_2 = t_1 + '0' + tempRor\n    poss.append(t_2)\n    t_1 = t_1 + '1'\n    for i in range(ChangeInd + 1, maxLen - 1):\n        Ror = ''\n        if rb[i] == '1':\n            if i + 1 < maxLen:\n                Ror = right[i + 1:]\n            t_2 = t_1 + '0' + Ror\n            poss.append(t_2)\n            t_1 += '1'\n        else:\n            t_1 += '0'\n    poss.append(rb[:-1] + '0')\n    poss.append(rb)\n    poss.append(lb)\n    maxVal = -1\n    z = r + 1\n    pOnce = {}\n    for i in poss:\n        pOnce[int(i, 2)] = True\n    for i in pOnce:\n        fVal = (x & i) * (y & i)\n        if fVal > maxVal:\n            z = i\n            maxVal = fVal\n        elif fVal == maxVal:\n            z = min(i, z)\n            maxVal = fVal\n    if maxVal == 0:\n        z = l\n    print(z)", "power = [1]\nfor i in range(1, 42):\n    power.append(2 * power[i - 1])\n\ndef makebin(n):\n    llist = [0] * 42\n    i = 41\n    temp = n\n    while temp != 0:\n        llist[i] = temp % 2\n        temp = temp // 2\n        i = i - 1\n    return llist\n\ndef recurse(ans, index, x, y, l, r, careL, careR):\n    if index == 41:\n        t = ans\n        p = ans + power[41 - index]\n        if p > R:\n            return t\n        elif t < L:\n            return p\n        else:\n            z1 = (X & t) * (Y & t)\n            z2 = (X & p) * (Y & p)\n            if z1 == z2:\n                return min(t, p)\n            elif z1 > z2:\n                return t\n            else:\n                return p\n    elif careL == 0 and careR == 1:\n        if x[index] == 0 and y[index] == 0:\n            if r[index] == 1:\n                return recurse(ans, index + 1, x, y, l, r, 0, 0)\n            else:\n                return recurse(ans, index + 1, x, y, l, r, 0, 1)\n        elif x[index] == 1 and y[index] == 1:\n            if r[index] == 1:\n                ans = ans + power[41 - index]\n                return recurse(ans, index + 1, x, y, l, r, 0, 1)\n            else:\n                return recurse(ans, index + 1, x, y, l, r, 0, 1)\n        elif r[index] == 0:\n            return recurse(ans, index + 1, x, y, l, r, 0, 1)\n        else:\n            t = recurse(ans + power[41 - index], index + 1, x, y, l, r, 0, 1)\n            p = recurse(ans, index + 1, x, y, l, r, 0, 0)\n            z1 = (X & t) * (Y & t)\n            z2 = (X & p) * (Y & p)\n            if z1 == z2:\n                return min(t, p)\n            elif z1 > z2:\n                return t\n            else:\n                return p\n    elif careL == 1 and careR == 0:\n        if x[index] == 1 and y[index] == 1:\n            ans = ans + power[41 - index]\n            if l[index] == 1:\n                return recurse(ans, index + 1, x, y, l, r, 1, 0)\n            else:\n                return recurse(ans, index + 1, x, y, l, r, 0, 0)\n        elif x[index] == 0 and y[index] == 0:\n            if l[index] == 0:\n                ans = ans\n                return recurse(ans, index + 1, x, y, l, r, 1, 0)\n            else:\n                ans = ans + power[41 - index]\n                return recurse(ans, index + 1, x, y, l, r, 1, 0)\n        elif l[index] == 1:\n            ans = ans + power[41 - index]\n            return recurse(ans, index + 1, x, y, l, r, 1, 0)\n        else:\n            t = recurse(ans + power[41 - index], index + 1, x, y, l, r, 0, 0)\n            p = recurse(ans, index + 1, x, y, l, r, 1, 0)\n            z1 = (X & t) * (Y & t)\n            z2 = (X & p) * (Y & p)\n            if z1 == z2:\n                return min(t, p)\n            elif z1 > z2:\n                return t\n            else:\n                return p\n    elif careL == 1 and careR == 1 and (r[index] == 0) and (l[index] == 0):\n        return recurse(ans, index + 1, x, y, l, r, 1, 1)\n    elif careL == 1 and careR == 1 and (r[index] == 1) and (l[index] == 1):\n        ans = ans + power[41 - index]\n        return recurse(ans, index + 1, x, y, l, r, 1, 1)\n    elif careL == 1 and careR == 1 and (r[index] == 1) and (l[index] == 0):\n        if x[index] == 1 and y[index] == 1:\n            ans = ans + power[41 - index]\n            return recurse(ans, index + 1, x, y, l, r, 0, 1)\n        elif x[index] == 0 and y[index] == 0:\n            return recurse(ans, index + 1, x, y, l, r, 1, 0)\n        else:\n            t = recurse(ans + power[41 - index], index + 1, x, y, l, r, 0, 1)\n            p = recurse(ans, index + 1, x, y, l, r, 1, 0)\n            z1 = (X & t) * (Y & t)\n            z2 = (X & p) * (Y & p)\n            if z1 == z2:\n                return min(t, p)\n            elif z1 > z2:\n                return t\n            else:\n                return p\n    elif x[index] == 1 and y[index] == 1:\n        return recurse(ans + power[41 - index], index + 1, x, y, l, r, 0, 0)\n    elif x[index] == 0 and y[index] == 0:\n        return recurse(ans, index + 1, x, y, l, r, 0, 0)\n    else:\n        return recurse(ans + power[41 - index], index + 1, x, y, l, r, 0, 0)\nfor _ in range(int(input())):\n    (X, Y, L, R) = list(map(int, input().split()))\n    a = X | Y\n    if X == 0 or Y == 0 or L == R:\n        print(L)\n    elif a >= L and a <= R:\n        print(a)\n    else:\n        x = makebin(X)\n        y = makebin(Y)\n        l = makebin(L)\n        r = makebin(R)\n        q = list(bin(R)[2:])\n        careL = 1\n        careR = 1\n        print(recurse(0, 41 - len(q), x, y, l, r, careL, careR))", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nfrom sys import stdin\nt = int(stdin.readline())\nfor test in range(t):\n    (X, Y, L, R) = map(int, stdin.readline().split())\n    maxi = str(decimalToBinary(X | Y))\n    binL = str(decimalToBinary(L))\n    binR = str(decimalToBinary(R))\n    maxLen = max(len(maxi), len(binL), len(binR))\n    maxi0 = maxi.zfill(maxLen)\n    binL0 = binL.zfill(maxLen)\n    binR0 = binR.zfill(maxLen)\n    maxi0Copy = maxi0\n    binL0Copy = binL0\n    binR0Copy = binR0\n    listR = []\n    if X == 0 or Y == 0:\n        print(L)\n        continue\n    elif L == 0:\n        for i in range(len(binR0)):\n            if binR0Copy[i] == '1':\n                binary = '0b' + binR0[0:i] + '0' + maxi0[i + 1:]\n                if L <= int(binary, 2) <= R:\n                    listR.append(int(binary, 2))\n    elif L > 0 and R > 0:\n        for i in range(len(binR0)):\n            if binR0Copy[i] == '1':\n                binary = '0b' + binR0[0:i] + '0' + maxi0[i + 1:]\n                if L <= int(binary, 2) <= R:\n                    listR.append(int(binary, 2))\n        for i in range(len(binL0)):\n            if binL0Copy[i] == '1':\n                binary = '0b' + binL0[0:i + 1] + maxi0[i + 1:]\n                if L <= int(binary, 2) <= R:\n                    listR.append(int(binary, 2))\n    if L not in listR:\n        listR.append(L)\n    if R not in listR:\n        listR.append(R)\n    if L <= X | Y <= R and X | Y not in listR:\n        listR.append(X | Y)\n    ele = {}\n    for i in range(len(listR)):\n        key = (X & listR[i]) * (Y & listR[i])\n        if key in ele:\n            ele[key].append(listR[i])\n        else:\n            ele[key] = [listR[i]]\n    maximum = 0\n    for i in ele:\n        if i > maximum:\n            maximum = i\n    print(min(ele[maximum]))", "import math\nt = int(input())\nfor _ in range(t):\n    (x, y, l, r) = map(int, input().split())\n    if 1:\n        if 1:\n            str_r = bin(r).replace('0b', '')\n            n = len(str_r)\n            mx = (x & r) * (y & r)\n            finalAns = r\n            list_ans = []\n            list_ans.append(r)\n            for i in range(n - 1, -1, -1):\n                if str_r[i] == '1':\n                    str_temp = str_r[:i] + '0' + '1' * (n - i - 1)\n                    temp = int(str_temp, 2)\n                    if temp > r or temp < l:\n                        continue\n                    val = (x & temp) * (y & temp)\n                    if val == mx:\n                        list_ans.append(temp)\n                        mx = val\n                    elif val > mx:\n                        list_ans = []\n                        list_ans.append(temp)\n                        mx = val\n            finalAns = min(list_ans)\n            if mx == (x & l) * (y & l):\n                finalAns = l\n                print(finalAns)\n                continue\n            str_ans = bin(finalAns).replace('0b', '')\n            str_x = bin(x).replace('0b', '')\n            diff = len(str_x) - len(str_r)\n            if diff > 0:\n                str_x = str_x[diff:]\n            elif diff < 0:\n                str_x = '0' * abs(diff) + str_x\n            str_y = bin(y).replace('0b', '')\n            diff = len(str_y) - len(str_r)\n            if diff > 0:\n                str_y = str_y[diff:]\n            elif diff < 0:\n                str_y = '0' * abs(diff) + str_y\n            diff = len(str_ans) - len(str_r)\n            if diff > 0:\n                str_ans = str_ans[diff:]\n            elif diff < 0:\n                str_ans = '0' * abs(diff) + str_ans\n            for i in range(n):\n                if str_x[i] == '0' and str_y[i] == '0':\n                    temp_str_ans = str_ans[:i] + '0' + str_ans[i + 1:]\n                    if int(temp_str_ans, 2) >= l:\n                        str_ans = temp_str_ans\n            finalAns = int(str_ans, 2)\n            if int(str_x, 2) == 0 or int(str_y, 2) == 0:\n                finalAns = l\n            print(finalAns)", "def process(v, l, x, y, m):\n    p = 50\n    while p >= 0:\n        if v >> p & 1 == 1:\n            k = v ^ 1 << p\n            if (k & x) * (k & y) == m and k >= l:\n                v = k\n        p -= 1\n    return v\nt = int(input())\nwhile t > 0:\n    inp = input()\n    inp = inp.split()\n    x = int(inp[0])\n    y = int(inp[1])\n    l = int(inp[2])\n    r = int(inp[3]) + 1\n    ans = set()\n    p = 50\n    curr = 0\n    while p >= 0 and r >> p & 1 == l >> p & 1:\n        if r >> p & 1 == 1:\n            curr = curr | 1 << p\n        p -= 1\n    while p >= 0:\n        if r >> p & 1 == 1:\n            ans.add(curr + ((1 << p) - 1))\n            curr = curr | 1 << p\n        p -= 1\n    m = 0\n    for v in ans:\n        m = max(m, (v & x) * (v & y))\n    res = r\n    for v in ans:\n        if (v & x) * (v & y) == m:\n            res = min(res, process(v, l, x, y, m))\n    print(res)\n    t -= 1", "import math\nt = int(input())\nfor _ in range(0, t):\n    str1 = input()\n    lst1 = str1.split()\n    x = int(lst1[0])\n    y = int(lst1[1])\n    l = int(lst1[2])\n    r = int(lst1[3])\n    ans = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n        else:\n            print(ans)\n        continue\n    rbin = str(bin(r)[2:])\n    rlen = len(rbin)\n    maxval = l\n    maxprod = (x & l) * (y & l)\n    for i in range(0, rlen):\n        if rbin[i] == '1':\n            rbin2 = rbin[:i] + '0' + '1' * (rlen - i - 1)\n            val = int(rbin2, 2)\n            prod = (x & val) * (y & val)\n            if prod > maxprod and val >= l:\n                maxprod = prod\n                maxval = val\n    if (x & r) * (y & r) > maxprod:\n        maxprod = (x & r) * (y & r)\n        maxval = r\n    binans = '{0:064b}'.format(ans)\n    binmax = '{0:064b}'.format(maxval)\n    temp = 0\n    for i in range(0, 64):\n        if binmax[i] == '1' and binans[i] == '0':\n            temp = pow(2, 63 - i)\n            if maxval - temp >= l:\n                maxval = maxval - temp\n    print(maxval)", "import math\nt = int(input())\nfor _ in range(0, t):\n    str1 = input()\n    lst1 = str1.split()\n    x = int(lst1[0])\n    y = int(lst1[1])\n    l = int(lst1[2])\n    r = int(lst1[3])\n    ans = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n        else:\n            print(ans)\n        continue\n    rbin = str(bin(r)[2:])\n    rlen = len(rbin)\n    maxval = l\n    maxprod = (x & l) * (y & l)\n    for i in range(0, rlen):\n        if rbin[i] == '1':\n            rbin2 = rbin[:i] + '0' + '1' * (rlen - i - 1)\n            val = int(rbin2, 2)\n            prod = (x & val) * (y & val)\n            if prod > maxprod and val >= l:\n                maxprod = prod\n                maxval = val\n    if (x & r) * (y & r) > maxprod:\n        maxprod = (x & r) * (y & r)\n        maxval = r\n    binans = '{0:064b}'.format(ans)\n    binmax = '{0:064b}'.format(maxval)\n    temp = 0\n    for i in range(0, 64):\n        if binmax[i] == '1' and binans[i] == '0':\n            temp = pow(2, 63 - i)\n            if maxval - temp >= l:\n                maxval = maxval - temp\n    print(maxval)", "import math\nt = int(input())\nfor _ in range(0, t):\n    str1 = input()\n    lst1 = str1.split()\n    x = int(lst1[0])\n    y = int(lst1[1])\n    l = int(lst1[2])\n    r = int(lst1[3])\n    ans = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n        else:\n            print(ans)\n        continue\n    rbin = str(bin(r)[2:])\n    rlen = len(rbin)\n    maxval = l\n    maxprod = (x & l) * (y & l)\n    for i in range(0, rlen):\n        if rbin[i] == '1':\n            rbin2 = rbin[:i] + '0' + '1' * (rlen - i - 1)\n            val = int(rbin2, 2)\n            prod = (x & val) * (y & val)\n            if prod > maxprod and val >= l:\n                maxprod = prod\n                maxval = val\n    if (x & r) * (y & r) > maxprod:\n        maxprod = (x & r) * (y & r)\n        maxval = r\n    binans = '{0:064b}'.format(ans)\n    binmax = '{0:064b}'.format(maxval)\n    temp = 0\n    for i in range(0, 64):\n        if binmax[i] == '1' and binans[i] == '0':\n            temp = pow(2, 63 - i)\n            if maxval - temp >= l:\n                maxval = maxval - temp\n    print(maxval)", "import math\nt = int(input())\nfor _ in range(0, t):\n    str1 = input()\n    lst1 = str1.split()\n    x = int(lst1[0])\n    y = int(lst1[1])\n    l = int(lst1[2])\n    r = int(lst1[3])\n    ans = x | y\n    if l == 0 and r >= 2 * max(x, y):\n        if x == 0 or y == 0:\n            print(0)\n        else:\n            print(ans)\n        continue\n    rbin = str(bin(r)[2:])\n    rlen = len(rbin)\n    maxval = l\n    maxprod = (x & l) * (y & l)\n    for i in range(0, rlen):\n        if rbin[i] == '1':\n            rbin2 = rbin[:i] + '0' + '1' * (rlen - i - 1)\n            val = int(rbin2, 2)\n            prod = (x & val) * (y & val)\n            if prod > maxprod and val >= l:\n                maxprod = prod\n                maxval = val\n    if (x & r) * (y & r) > maxprod:\n        maxprod = (x & r) * (y & r)\n        maxval = r\n    binans = '{0:064b}'.format(ans)\n    binmax = '{0:064b}'.format(maxval)\n    temp = 0\n    for i in range(0, 64):\n        if binmax[i] == '1' and binans[i] == '0':\n            temp = pow(2, 63 - i)\n            if maxval - temp >= l:\n                maxval = maxval - temp\n    print(maxval)", "for _ in range(int(input())):\n    (x, y, l, r) = list(map(int, input().split()))\n    if l == r:\n        print(l)\n        continue\n    xb = bin(x).replace('0b', '')\n    yb = bin(y).replace('0b', '')\n    rb = bin(r).replace('0b', '')\n    lb = bin(l).replace('0b', '')\n    (t_1, t_2, poss) = ('', '', [])\n    maxLen = max(len(xb), len(yb), len(rb), len(lb))\n    xb = '0' * (maxLen - len(xb)) + xb\n    yb = '0' * (maxLen - len(yb)) + yb\n    rb = '0' * (maxLen - len(rb)) + rb\n    lb = '0' * (maxLen - len(lb)) + lb\n    right = ''\n    for i in range(maxLen):\n        if xb[i] == '1' or yb[i] == '1':\n            right = right + '1'\n        else:\n            right = right + '0'\n    for i in range(maxLen):\n        if lb[i] != rb[i]:\n            ChangeInd = i\n            break\n    j = ChangeInd + 1\n    checkZgreaterThanL = False\n    t_1 = rb[:ChangeInd]\n    tempRor = ''\n    while j < maxLen:\n        if checkZgreaterThanL == False:\n            if lb[j] == '1':\n                tempRor += '1'\n            elif xb[j] == '1' or yb[j] == '1':\n                tempRor += '1'\n                checkZgreaterThanL = True\n            else:\n                tempRor += '0'\n        elif xb[j] == '1' or yb[j] == '1':\n            tempRor += '1'\n        else:\n            tempRor += '0'\n        j += 1\n    t_2 = t_1 + '0' + tempRor\n    poss.append(t_2)\n    t_1 = t_1 + '1'\n    for i in range(ChangeInd + 1, maxLen - 1):\n        Ror = ''\n        if rb[i] == '1':\n            if i + 1 < maxLen:\n                Ror = right[i + 1:]\n            t_2 = t_1 + '0' + Ror\n            poss.append(t_2)\n            t_1 += '1'\n        else:\n            t_1 += '0'\n    poss.append(rb[:-1] + '0')\n    poss.append(rb)\n    poss.append(lb)\n    maxVal = -1\n    z = r + 1\n    pOnce = {}\n    for i in poss:\n        pOnce[int(i, 2)] = True\n    for i in pOnce:\n        fVal = (x & i) * (y & i)\n        if fVal > maxVal:\n            z = i\n            maxVal = fVal\n        elif fVal == maxVal:\n            z = min(i, z)\n            maxVal = fVal\n    if maxVal == 0:\n        z = l\n    print(z)", "import sys\nimport numpy as np\n\ndef find_min(x2, x1, r, l, i):\n    if int(x1, 2) <= int(r, 2) and int(x1, 2) >= int(l, 2):\n        return x1\n    if int(x1, 2) > int(r, 2):\n        v1 = x1[:i] + '0' + '0' * (len(x1) - i - 1)\n        v2 = x1[:i] + '1' + '0' * (len(x1) - i - 1)\n        if int(v1, 2) > int(r, 2):\n            v1 = False\n        if int(v2, 2) > int(r, 2):\n            v2 = False\n    if int(x1, 2) < int(l, 2):\n        v1 = x1[:i] + '0' + '1' * (len(x1) - i - 1)\n        v2 = x1[:i] + '1' + '1' * (len(x1) - i - 1)\n        if int(v1, 2) < int(l, 2):\n            v1 = False\n        if int(v2, 2) < int(l, 2):\n            v2 = False\n    if not v1 and (not v2):\n        return '0' * len(x1)\n    elif not v1:\n        temp2 = find_min(x2, x1[:i] + '1' + x1[i + 1:], r, l, i + 1)\n        return temp2\n    elif not v2:\n        temp1 = find_min(x2, x1[:i] + '0' + x1[i + 1:], r, l, i + 1)\n        return temp1\n    if x2[i] == '1':\n        temp2 = find_min(x2, x1[:i] + '1' + x1[i + 1:], r, l, i + 1)\n        return temp2\n    temp1 = find_min(x2, x1[:i] + '0' + x1[i + 1:], r, l, i + 1)\n    temp2 = find_min(x2, x1[:i] + '1' + x1[i + 1:], r, l, i + 1)\n    atemp1 = int(temp1, 2)\n    btemp2 = int(temp2, 2)\n    a1 = x & atemp1\n    a2 = y & atemp1\n    b1 = x & btemp2\n    b2 = y & btemp2\n    a3 = np.multiply(a1, a2)\n    b3 = np.multiply(b1, b2)\n    done.append(0)\n    if a3 > b3:\n        return temp1\n    elif b3 > a3:\n        return temp2\n    elif atemp1 > btemp2:\n        return temp2\n    else:\n        return temp1\n    if i == len(x1) - 1:\n        return '0' * len(x1)\n    return find_min(x2, x1, r, l, i + 1)\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (x, y, l, r) = map(int, sys.stdin.readline().split())\n    maxi = 0\n    value = 0\n    done = []\n    if x == 0 or y == 0:\n        value = l\n    else:\n        m = x | y\n        m1 = x & y\n        if m >= l and m <= r:\n            value = m\n        elif m >= l:\n            brm = format(m, 'b')\n            brm1 = format(m1, 'b')\n            brr = format(r, 'b')\n            brl = format(l, 'b')\n            if len(brm) > len(brm1):\n                abc = '0' * (len(brm) - len(brm1))\n                brm1 = abc + brm1\n            brm = brm[len(brm) - len(brr):]\n            brm1 = brm1[len(brm1) - len(brr):]\n            if len(brr) > len(brl):\n                abc = '0' * (len(brr) - len(brl))\n                brl = abc + brl\n            brm1 = find_min(brm1, brm, brr, brl, 0)\n            value = int(brm1, 2)\n        elif m < l:\n            brm = format(m, 'b')\n            brm1 = format(m1, 'b')\n            brr = format(r, 'b')\n            brl = format(l, 'b')\n            if len(brr) > len(brl):\n                abc = '0' * (len(brr) - len(brl))\n                brl = abc + brl\n                brl = brl[len(brl) - len(brr):]\n            if len(brr) > len(brm):\n                abc = '0' * (len(brr) - len(brm))\n                brm = abc + brm\n                brm = brm[len(brm) - len(brr):]\n            if len(brr) > len(brm1):\n                abc = '0' * (len(brr) - len(brm1))\n                brm1 = abc + brm1\n                brm1 = brm1[len(brm1) - len(brr):]\n            value = int(find_min(brm1, brm, brr, brl, 0), 2)\n    if x & value == 0 or y & value == 0:\n        value = l\n    sys.stdout.write(str(value) + '\\n')", "t = int(input())\nfor i in range(t):\n    (x, y, l, r) = map(int, input().split(' '))\n    if l > r:\n        t = l\n        l = r\n        r = t\n    a = x | y\n    b = bin(a)[2:]\n    c = bin(l)[2:]\n    r1 = bin(r)[2:]\n    l1 = bin(l)[2:]\n    st = ''\n    st1 = ''\n    if len(r1) < len(b):\n        for k in range(len(b) - len(r1)):\n            st = st + '0'\n        r1 = st + r1\n    if len(l1) < len(b):\n        for k in range(len(b) - len(l1)):\n            st1 = st1 + '0'\n        l1 = st1 + l1\n    st1 = ''\n    if len(b) < len(l1):\n        for k in range(len(l1) - len(b)):\n            st1 = st1 + '0'\n    b = st1 + b\n    fix = list(r1)\n    fix2 = list(l1)\n    s = list()\n    if x == 0 or y == 0:\n        print(l)\n    else:\n        if a <= r and a >= l:\n            s.append(a)\n        for j in range(0, len(r1)):\n            if fix[j] == '0':\n                pass\n            else:\n                binary = '0b' + r1[0:j] + '0' + b[j + 1:]\n                if int(binary, 2) >= l and int(binary, 2) <= r:\n                    s.append(int(binary, 2))\n        s.append(r)\n        s.append(l)\n        for j in range(0, len(l1)):\n            if fix2[j] == '0':\n                pass\n            else:\n                binary = '0b' + l1[0:j] + '1' + b[j + 1:]\n                if int(binary, 2) >= l and int(binary, 2) <= r:\n                    s.append(int(binary, 2))\n        for j in range(len(l1) - 1, -1, -1):\n            if fix2[j] == '0':\n                pass\n            else:\n                binary = '0b' + b[0:j] + '1' + l1[j + 1:]\n                if int(binary, 2) >= l and int(binary, 2) <= r:\n                    s.append(int(binary, 2))\n        s = set(s)\n        d = {}\n        s1 = 0\n        for k in s:\n            s1 = (x & k) * (y & k)\n            if s1 in d:\n                d[s1].append(k)\n            else:\n                d[s1] = [k]\n        c = sorted(d)\n        h = c[-1]\n        print(min(d[h]))", "def initial(x, y, l, r):\n    ton = l\n    isan = 0\n    for i in reversed(range(41)):\n        flag = 1 << i & r\n        if flag >> i == 0:\n            continue\n        mtan = (1 << i) - 1 | r - (1 << i)\n        use = (x & mtan) * (y & mtan)\n        if use > isan and mtan >= l:\n            isan = use\n            ton = mtan\n    here = (x & r) * (y & r)\n    if here > isan:\n        ton = r\n    return ton\n\ndef final(x, y, l, r, ton):\n    left = 0\n    temp = x | y\n    for i in reversed(range(41)):\n        flag = 1 << i\n        if (temp & flag) >> i == 1:\n            continue\n        if ton - flag < l:\n            continue\n        if (ton & flag) >> i == 0:\n            continue\n        ton -= flag\n    for i in reversed(range(41)):\n        left = (x & ton) * (y * ton)\n        if left > r or left < l:\n            left = 0\n        else:\n            continue\n    return ton\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    if x != 0 and y != 0:\n        ton = initial(x, y, l, r)\n        ton = final(x, y, l, r, ton)\n        print(ton)\n    else:\n        print(l)", "def chk(oppo):\n    return (x & oppo) * (y & oppo)\nt = int(input())\nfor _ in range(t):\n    (x, y, l, r) = map(int, input().split())\n    possible_ans = x | y\n    lbin = bin(l)[2:]\n    rbin = bin(r)[2:]\n    lbin = '0' * (len(rbin) - len(lbin)) + lbin\n    if possible_ans > r:\n        possible_ans = possible_ans & 2 ** len(rbin) - 1\n    pbin = bin(possible_ans)[2:]\n    pbin = '0' * (len(rbin) - len(pbin)) + pbin\n    i = 0\n    cur = 2 ** (len(rbin) - 1)\n    ans = 0\n    while i < len(rbin) and lbin[i] == rbin[i]:\n        ans = ans + cur if lbin[i] == '1' else ans\n        i += 1\n        cur = cur >> 1\n    i += 1\n    temp = (cur, i)\n    ansa = ans\n    cur = cur >> 1\n    while i < len(rbin):\n        if lbin[i] == '1' and pbin[i] == '1':\n            ansa += cur\n        elif lbin[i] == '1' and pbin[i] == '0':\n            ansa += cur\n        elif lbin[i] == '0' and pbin[i] == '1':\n            while i < len(rbin):\n                if pbin[i] == '1':\n                    ansa += cur\n                i += 1\n                cur = cur >> 1\n        i += 1\n        cur = cur >> 1\n    (cur, i) = temp\n    ansb = ans + cur\n    cur = cur >> 1\n    while i < len(rbin):\n        if rbin[i] == '1' and pbin[i] == '0':\n            i += 1\n            cur = cur >> 1\n            while i < len(rbin):\n                if pbin[i] == '1':\n                    ansb += cur\n                i += 1\n                cur = cur >> 1\n        elif rbin[i] == '1' and pbin[i] == '1':\n            ansb += cur\n        i += 1\n        cur = cur >> 1\n    anss = [ansb]\n    (cur, i) = temp\n    ansc = ans + cur\n    cur = cur >> 1\n    while i < len(rbin):\n        if rbin[i] == '1' and pbin[i] == '1' and (chk(ansc + (cur - 1 & possible_ans)) >= chk(ansb)):\n            anss.append(ansc + (cur - 1 & possible_ans))\n        if rbin[i] == '1' and pbin[i] == '0':\n            i += 1\n            cur = cur >> 1\n            while i < len(rbin):\n                if pbin[i] == '1':\n                    ansc += cur\n                i += 1\n                cur = cur >> 1\n        elif rbin[i] == '1' and pbin[i] == '1':\n            ansc += cur\n        i += 1\n        cur = cur >> 1\n    anss.append(ansa)\n    anss.append(possible_ans & 2 ** len(rbin) - 1)\n    anss = [l] + anss\n    anss.append(r)\n    anss.append(ans)\n    yo = anss[0]\n    yoop = chk(anss[0])\n    for ea in anss:\n        zc = chk(ea)\n        if l <= ea <= r and (zc == yoop and ea < yo or zc > yoop):\n            (yo, yoop) = (ea, zc)\n    print(yo)", "def solve(x, y, l, r, z, bit):\n    least_reduction = 2 ** 62\n    best_bit = -1\n    right = z - r\n    left = l - z\n    if left <= 0 and right <= 0:\n        return z\n    while bit > right:\n        if left > bit:\n            bit >>= 1\n            continue\n        else:\n            reduction = (x & bit) * (y & ~bit) + (x & ~bit) * (y & bit) + (x & bit) * (y & bit)\n            if reduction < least_reduction and z & ~bit >= l:\n                least_reduction = reduction\n                best_bit = bit\n        bit >>= 1\n    old_z = z & ~best_bit\n    old_right = old_z - r\n    old_left = l - old_z\n    if old_left > 0 or old_right > 0:\n        least_reduction = 2 ** 62\n    new_z = z & ~bit\n    new_z = solve(x & new_z, y & new_z, l, r, new_z, bit >> 1)\n    new_reduction = (x & z) * (y & z) - (x & new_z) * (y & new_z)\n    new_right = new_z - r\n    new_left = l - new_z\n    if new_left > 0 or new_right > 0:\n        new_reduction = 2 ** 62\n    if new_reduction < least_reduction:\n        return new_z\n    return old_z\n\ndef reduce_z(x, y, z, l, r):\n    bit = 2 ** 40\n    while bit > 0:\n        if bit & (x | y) == 0 and z & ~bit >= l:\n            z &= ~bit\n        bit >>= 1\n    return z\n\ndef testcase():\n    (x, y, l, r) = map(int, input().split())\n    z = 2 ** 40 - 1\n    bit = 2 ** 40\n    while bit > r:\n        z &= ~bit\n        bit >>= 1\n    z = solve(x & z, y & z, l, r, z, bit)\n    z = reduce_z(x, y, z, l, r)\n    if (x & z) * (y & z) == 0:\n        return l\n    return z\nt = int(input())\nfor _ in range(t):\n    print(testcase())", "import math\nfor _ in range(int(input())):\n    (x, y, l, r) = input().split(' ')\n    (x, y, l, r) = (int(x), int(y), int(l), int(r))\n    xString = bin(x)[2:]\n    yString = bin(y)[2:]\n    bitsStore = 10 ** 13\n    if x == 0 or y == 0:\n        bitsStore = l\n    elif l == 0 and r == 0:\n        bitsStore = 0\n    else:\n        lengthM = max(int(math.log(x) / math.log(2)) + 1, int(math.log(y) / math.log(2)) + 1)\n        lengthS = min(int(math.log(x) / math.log(2)) + 1, int(math.log(y) / math.log(2)) + 1)\n        bits = int(math.log(r) / math.log(2)) + 1\n        if x < y:\n            temp = x\n            x = y\n            y = temp\n            temp = xString\n            xString = yString\n            yString = temp\n        bitsNum = 2 ** bits - 1\n        maximum = 0\n        if bitsNum >> 1 >= l:\n            temp = bitsNum >> 1\n            maximum = (x & temp) * (y & temp)\n            bitsStore = bitsNum >> 1\n        temp = 1 << bits - 1\n        for i in range(bits - 2, -1, -1):\n            gen = temp | bitsNum >> bits - i\n            if gen < l:\n                temp = temp | 1 << i\n            if gen >= l and gen <= r:\n                if maximum < (gen & x) * (gen & y):\n                    maximum = (gen & x) * (gen & y)\n                    bitsStore = gen\n                elif maximum == (gen & x) * (gen & y):\n                    if gen < bitsStore:\n                        maximum = (gen & x) * (gen & y)\n                        bitsStore = gen\n                temp = temp | 1 << i\n        diff = lengthM - lengthS\n        for i in range(diff):\n            yString = '0' + yString\n        bitsNew = int(math.log(bitsStore) / math.log(2)) + 1\n        bitDiff = 40 - bitsNew\n        tex = 1\n        bex = 2 ** bitsNew - 1\n        bex = bex >> 1\n        kex = bex\n        array = []\n        for i in range(bitsNew - 1, -1, -1):\n            array.append(kex)\n            bex = bex >> 1\n            kex = tex << i | bex\n            tex = tex << 1 | 1\n        for i in range(bitsNew):\n            temp = bitsStore & array[i]\n            if (y & temp) * (x & temp) == maximum and temp >= l and (temp <= r):\n                bitsStore = temp\n    print(bitsStore)", "def findmax(careL, careR, answer, ind):\n    if not careL and (not careR):\n        ans = ''\n        for i in range(ind, lenR):\n            if binX[i] == '1' or binY[i] == '1':\n                ans += '1'\n            else:\n                ans += '0'\n        return ans\n    elif careL and (not careR):\n        if ind == lenR - 1:\n            if binL[ind] == '0':\n                s = ''\n                for i in range(lenR):\n                    s += answer[i]\n                addans = int(s, 2)\n                X1 = 1 + addans\n                X2 = 0 + addans\n                if (X1 & Xo) * (X1 & Yo) > (X2 & Xo) * (X2 & Yo):\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '1'\n        elif binL[ind] == '1':\n            answer[ind] = '1'\n            return '1' + findmax(careL, careR, answer.copy(), ind + 1)\n        elif binX[ind] == '1' and binY[ind] == '1':\n            answer[ind] = '1'\n            return '1' + findmax(False, careR, answer.copy(), ind + 1)\n        elif binX[ind] == '0' and binY[ind] == '0':\n            answer[ind] = '0'\n            return '0' + findmax(careL, careR, answer.copy(), ind + 1)\n        else:\n            s = ''\n            for i in range(lenR):\n                s += answer[i]\n            addans = int(s, 2)\n            answer[ind] = '0'\n            x2 = '0' + findmax(careL, False, answer.copy(), ind + 1)\n            answer[ind] = '1'\n            x1 = '1' + findmax(False, False, answer.copy(), ind + 1)\n            X1 = int(x1, 2) + addans\n            X2 = int(x2, 2) + addans\n            if (X1 & Xo) * (X1 & Yo) > (X2 & Xo) * (X2 & Yo):\n                return x1\n            else:\n                return x2\n    elif not careL and careR:\n        if ind == lenR - 1:\n            if binR[ind] == '1':\n                s = ''\n                for i in range(lenR):\n                    s += answer[i]\n                addans = int(s, 2)\n                X1 = 1 + addans\n                X2 = 0 + addans\n                if (X1 & Xo) * (X1 & Yo) > (X2 & Xo) * (X2 & Yo):\n                    return '1'\n                else:\n                    return '0'\n            else:\n                return '0'\n        elif binR[ind] == '0':\n            answer[ind] = '0'\n            return '0' + findmax(careL, careR, answer.copy(), ind + 1)\n        elif binX[ind] == '1' and binY[ind] == '1':\n            answer[ind] = '1'\n            return '1' + findmax(careL, careR, answer.copy(), ind + 1)\n        elif binX[ind] == '0' and binY[ind] == '0':\n            answer[ind] = '0'\n            return '0' + findmax(careL, False, answer.copy(), ind + 1)\n        else:\n            s = ''\n            for i in range(lenR):\n                s += answer[i]\n            addans = int(s, 2)\n            answer[ind] = '0'\n            x2 = '0' + findmax(careL, False, answer.copy(), ind + 1)\n            answer[ind] = '1'\n            x1 = '1' + findmax(False, careR, answer.copy(), ind + 1)\n            X1 = int(x1, 2) + addans\n            X2 = int(x2, 2) + addans\n            if (X1 & Xo) * (X1 & Yo) > (X2 & Xo) * (X2 & Yo):\n                return x1\n            else:\n                return x2\n    elif ind == lenR - 1:\n        if binL[ind] != binR[ind]:\n            s = ''\n            for i in range(lenR):\n                s += answer[i]\n            addans = int(s, 2)\n            X1 = 1 + addans\n            X2 = 0 + addans\n            if (X1 & Xo) * (X1 & Yo) > (X2 & Xo) * (X2 & Yo):\n                return '1'\n            else:\n                return '0'\n        else:\n            return binL[ind]\n    elif binR[ind] == '1' and binL[ind] == '1':\n        answer[ind] = '1'\n        return '1' + findmax(careL, careR, answer.copy(), ind + 1)\n    elif binR[ind] == '0' and binL[ind] == '0':\n        answer[ind] = '0'\n        return '0' + findmax(careL, careR, answer.copy(), ind + 1)\n    elif binX[ind] == '1' and binY[ind] == '1':\n        answer[ind] = '1'\n        return '1' + findmax(False, careR, answer.copy(), ind + 1)\n    elif binX[ind] == '0' and binY[ind] == '0':\n        answer[ind] = '0'\n        return '0' + findmax(careL, False, answer.copy(), ind + 1)\n    else:\n        s = ''\n        for i in range(lenR):\n            s += answer[i]\n        addans = int(s, 2)\n        answer[ind] = '0'\n        x2 = '0' + findmax(careL, False, answer.copy(), ind + 1)\n        answer[ind] = '1'\n        x1 = '1' + findmax(False, careR, answer.copy(), ind + 1)\n        X1 = int(x1, 2) + addans\n        X2 = int(x2, 2) + addans\n        if (X1 & Xo) * (X1 & Yo) > (X2 & Xo) * (X2 & Yo):\n            return x1\n        else:\n            return x2\nimport math\nfor _ in range(int(input())):\n    (X, Y, L, R) = map(int, input().split())\n    if X == 0 or Y == 0 or L == R:\n        print(L)\n    else:\n        ansor = X | Y\n        if ansor <= R and ansor >= L:\n            print(ansor)\n        else:\n            bR = bin(R)[2:]\n            bL = bin(L)[2:]\n            bX = bin(X)[2:]\n            bY = bin(Y)[2:]\n            global lenR\n            lenR = len(bR)\n            maxl = max(lenR, len(bX), len(bY))\n            global binR\n            binR = ('0' * (maxl - len(bR)) + bR)[-lenR::1]\n            global binX\n            binX = ('0' * (maxl - len(bX)) + bX)[-lenR::1]\n            global binY\n            binY = ('0' * (maxl - len(bY)) + bY)[-lenR::1]\n            global binL\n            binL = ('0' * (maxl - len(bL)) + bL)[-lenR::1]\n            answer = ['0'] * lenR\n            global Xo\n            Xo = X\n            global Yo\n            Yo = Y\n            ans = findmax(True, True, answer, 0)\n            print(int(ans, 2))", "try:\n    for _ in range(int(input())):\n        (x, y, l, r) = map(int, input().split())\n        _or = x | y | l\n        if 0 in [x, y, r]:\n            print(l)\n            continue\n        if l == 0 and r > 2 * max(x, y):\n            print(x | y)\n            continue\n        rBin = bin(r)[2:]\n        lBin = bin(l)[2:]\n        rLen = len(rBin)\n        xLen = len(bin(x)[2:])\n        yLen = len(bin(y)[2:])\n        for i in range(rLen, max(xLen, yLen)):\n            sb = 1 << i\n            ub = ~sb\n            x &= ub\n            y &= ub\n        if x == 0 or y == 0:\n            print(l)\n            continue\n        _or = x | y | l\n        binOr = bin(_or)[2:]\n        bLen = len(binOr)\n        dif = bLen - rLen\n        if dif > 0:\n            binOr = binOr[dif:]\n        elif dif < 0:\n            binOr = '0' * -dif + binOr\n        _or = int(binOr, 2)\n        if _or == 0:\n            print(l)\n            continue\n        maxVal = -1\n        ans = -1\n        bLen = len(binOr)\n        for i in range(bLen):\n            z = int(binOr, 2)\n            if z >= l and z <= r:\n                if (x & z) * (y & z) > maxVal:\n                    maxVal = (x & z) * (y & z)\n                    ans = z\n            temp = binOr\n            binOr = binOr[:i] + '0' + binOr[i + 1:]\n            z = int(binOr, 2)\n            if z >= l and z <= r:\n                if (x & z) * (y & z) > maxVal:\n                    maxVal = (x & z) * (y & z)\n                    ans = z\n            if rBin[i] == '0':\n                binOr = binOr[:i] + '0' + binOr[i + 1:]\n            else:\n                binOr = temp\n        if l == 0:\n            if maxVal == 0:\n                ans = l\n            print(ans)\n            continue\n        binAns = bin(ans)[2:]\n        ansLen = len(binAns)\n        if rLen > ansLen:\n            binAns = '0' * (rLen - ansLen) + binAns\n        else:\n            binAns = binAns[ansLen - rLen:]\n        _or1 = x | y\n        binOr1 = bin(_or1)[2:]\n        orLen = len(binOr1)\n        if rLen > orLen:\n            binOr1 = '0' * (rLen - orLen) + binOr1\n        else:\n            binOr1 = binOr1[orLen - rLen:]\n        for i in range(rLen):\n            if binOr1[i] == '0':\n                tmp = binAns[:i] + '0' + binAns[i + 1:]\n                if int(tmp, 2) >= l:\n                    ans = int(tmp, 2)\n                    binAns = tmp\n        if maxVal == 0:\n            ans = l\n        print(ans)\nexcept Exception as e:\n    print(e)\n    pass", "def get_final_ans(x, y, answers, l, r):\n    mx = -1\n    final_ans = -1\n    for ans in answers:\n        if ans >= l and ans <= r:\n            val = (x & ans) * (y & ans)\n            if val > mx:\n                final_ans = ans\n                mx = val\n            elif val == mx:\n                final_ans = min(final_ans, ans)\n    return final_ans\n\ndef get_ans(i, ans, dp, dp2, nearest, flag):\n    if flag == True:\n        if i == 42:\n            return ans\n        return dp[i + 1] + ans\n    if i + 1 >= 42:\n        return ans\n    next_ind = nearest[i + 1]\n    if next_ind == -1:\n        return ans + dp[i + 1]\n    else:\n        if next_ind == 42:\n            return ans + dp2[i + 1]\n        temp = dp2[i + 1] - dp2[next_ind + 1]\n        temp2 = dp[next_ind + 1]\n        return ans + temp + temp2\nanss = ''\n\ndef solve():\n    (x, y, l, r) = [int(i) for i in input().split()]\n    (x2, y2) = (x, y)\n    (l2, r2) = (l, r)\n    global anss\n    bin_x = list(('0' * 43 + bin(x)[2:])[-43:])\n    bin_y = list(('0' * 43 + bin(y)[2:])[-43:])\n    bin_l = list(('0' * 43 + bin(l)[2:])[-43:])\n    bin_r = list(('0' * 43 + bin(r)[2:])[-43:])\n    dp = [-1] * 43\n    x = 0\n    for i in range(len(bin_l) - 1, -1, -1):\n        if bin_x[i] == '1' or bin_y[i] == '1':\n            x += 2 ** (42 - i)\n        dp[i] = x\n    dp2 = [-1] * 43\n    x = 0\n    for i in range(len(bin_l) - 1, -1, -1):\n        if bin_x[i] == '1' or bin_y[i] == '1' or bin_l[i] == '1':\n            x += 2 ** (42 - i)\n        dp2[i] = x\n    nearest = [-1] * 43\n    for i in range(43):\n        if (bin_x[i] == '1' or bin_y[i] == '1') and bin_l[i] == '0':\n            nearest[i] = i\n    x = -1\n    for i in range(42, -1, -1):\n        if nearest[i] == -1:\n            nearest[i] = x\n        else:\n            x = nearest[i]\n    ans = 0\n    answers = []\n    flag = False\n    for i in range(43):\n        if bin_r[i] == '1':\n            temp_val = get_ans(i, ans, dp, dp2, nearest, flag)\n            answers.append(temp_val)\n            ans += 2 ** (42 - i)\n            if flag == False and bin_l[i] == '0':\n                flag = True\n    answers.append(ans)\n    print(get_final_ans(x2, y2, answers + [l], l2, r2))\nt = int(input())\nwhile t:\n    t -= 1\n    solve()", "def binary(x):\n    return bin(x)[2:]\npower = []\nfor i in range(63):\n    power.append(2 ** i)\nt = int(input())\nfor rep in range(t):\n    (x, y, l, r) = list(map(int, input().split()))\n    if x == 0 or y == 0 or r == l:\n        print(l)\n    else:\n        res = l | x | y\n        c = binary(x | y)\n        c = list(map(int, c))\n        d = binary(res)\n        d = list(map(int, d))\n        c.reverse()\n        d.reverse()\n        pset = [1 * d[0]]\n        for i in range(1, len(d)):\n            pset.append(pset[i - 1] + d[i] * power[i])\n        if res > r:\n            right = binary(r)\n            right = list(map(int, right))\n            right.reverse()\n            covered = 0\n            maxi = 0\n            op = 0\n            if d[0] == 0 and right[0] == 1:\n                r -= 1\n            for i in range(len(right) - 1, 0, -1):\n                if right[i] == 1:\n                    res = pset[i - 1] + covered\n                    if res >= l:\n                        temp = (x & res) * (y & res)\n                        if temp > maxi:\n                            maxi = temp\n                            op = res\n                    covered += power[i]\n            temp = (x & r) * (y & r)\n            if temp > maxi:\n                maxi = temp\n                op = r\n            e = binary(op)\n            e = list(map(int, e))\n            e.reverse()\n            for i in range(min(len(e), len(c))):\n                if e[i] == 1 and c[i] == 0:\n                    if op - power[i] >= l:\n                        e[i] = 0\n                        op -= power[i]\n            print(max(op, l))\n        else:\n            for i in range(len(c)):\n                if d[i] == 1 and c[i] == 0:\n                    if res - power[i] >= l:\n                        d[i] = 0\n                        res -= power[i]\n            print(res)", "def set_bit(value, bit):\n    return value | 1 << bit\n\ndef bit(value, bit):\n    return value & 1 << bit != 0\n\ndef clrandreset(value, bit):\n    return value & ~(1 << bit) | (1 << i) - 1\ntest = int(input())\nfor _ in range(test):\n    (x, y, l, ans) = map(int, input().split())\n    r = ans\n    v = (x & r) * (y & r)\n    for i in range(39, -1, -1):\n        if bit(r, i):\n            s = clrandreset(r, i)\n            if (x & s) * (y & s) > v and s >= l:\n                ans = s\n                v = (x & ans) * (y & ans)\n    for i in range(39, -1, -1):\n        if bit(ans, i):\n            s = clrandreset(ans, i)\n            if s >= l and (x & s) * (y & s) == v:\n                ans = s\n    print(ans)", "MI = lambda : map(int, input().split())\nII = lambda : int(input())\n\ndef convert(listt):\n    value = 0\n    ll = len(listt)\n    for i in range(len(listt)):\n        digit = listt[i]\n        if digit == 1:\n            value = value + pow(2, ll - i - 1)\n    return value\n\ndef binary(alpha):\n    temp = list(bin(alpha))\n    ans = []\n    for item in temp[2:]:\n        ans.append(int(item))\n    return ans\nfor _ in range(II()):\n    (x, y, l, r) = MI()\n    z = x | y\n    Zbin = binary(z)\n    Rbin = binary(r)\n    Lbin = binary(l)\n    Zlen = len(Zbin)\n    Rlen = len(Rbin)\n    poss = set()\n    if x == 0 or y == 0:\n        print(l)\n        continue\n    if z >= l and z <= r:\n        if (x & z) * (y & z) == 0:\n            print(l)\n            continue\n        print(z)\n        continue\n    if l == 0:\n        templist = Zbin[Zlen - Rlen:]\n        z = convert(templist)\n        zbin3 = templist[:]\n        z = convert(zbin3)\n        alpha = 0\n        result = l\n        lenn = len(zbin3)\n        for i in range(lenn):\n            if zbin3[i] == 0 and Rbin[i] == 1:\n                break\n            if zbin3[i] == 1 and Rbin[i] == 0:\n                zbin3[i] = 0\n                z -= pow(2, lenn - i - 1)\n            if zbin3[i] == 1 and Rbin[i] == 1:\n                z -= pow(2, lenn - i - 1)\n                if z >= l:\n                    if (x & z) * (y & z) > alpha:\n                        result = z\n                        alpha = (x & z) * (y & z)\n                z += pow(2, lenn - i - 1)\n                continue\n        if (x & z) * (y & z) > alpha and z >= l:\n            result = z\n        print(result)\n        continue\n    if z > r:\n        templist = Zbin[Zlen - Rlen:]\n        z = convert(templist)\n        if z < l:\n            while len(templist) != len(Rbin):\n                templist.insert(0, 0)\n            while len(Lbin) != len(Rbin):\n                Lbin.insert(0, 0)\n            ans = -1\n            find = z\n            lenn = max(len(Lbin), len(Rbin))\n            gg = 0\n            for j in range(lenn):\n                if templist[j] == 0 and Lbin[j] == 1:\n                    templist[j] = 1\n                    find += pow(2, lenn - j - 1)\n                    continue\n                if templist[j] == 1 and Lbin[j] == 0:\n                    if find > r:\n                        gg = 1\n                        break\n                    else:\n                        break\n            if gg == 1:\n                while len(Lbin) != len(Rbin):\n                    Lbin.insert(0, 0)\n                result = l\n                alpha = 0\n                lenn = len(templist)\n                flag = 0\n                z = find\n                for i in range(lenn):\n                    if z <= r and z >= l:\n                        poss.add(z)\n                    if flag == 1:\n                        if Rbin[i] == 0 and templist[i] == 1:\n                            templist[i] = 0\n                            z -= pow(2, lenn - i - 1)\n                            if z >= l and z <= r:\n                                poss.add(z)\n                            continue\n                        if Rbin[i] == 1 and templist[i] == 1:\n                            z -= pow(2, lenn - i - 1)\n                            poss.add(z)\n                            z += pow(2, lenn - i - 1)\n                            continue\n                    if flag == 0 and Lbin[i] - templist[i] == 0:\n                        continue\n                    if Lbin[i] == 0 and templist[i] == 1:\n                        if Rbin[i] == 0:\n                            templist[i] = 0\n                            z -= pow(2, lenn - i - 1)\n                            flag = 0\n                            if z <= r and z >= l:\n                                poss.add(z)\n                            continue\n                        else:\n                            z -= pow(2, lenn - i - 1)\n                            templist[i] = 0\n                            vc = templist[:]\n                            cv = z\n                            if z >= l:\n                                poss.add(z)\n                            if z < l:\n                                for joint in range(i + 1, lenn):\n                                    if Lbin[joint] == 0 and templist[joint] == 1:\n                                        poss.add(z)\n                                        break\n                                    if Lbin[joint] == 1 and templist[joint] == 0:\n                                        templist[joint] = 1\n                                        z += pow(2, lenn - joint - 1)\n                                        if z >= l:\n                                            poss.add(z)\n                                        continue\n                                    if Lbin[joint] == 0 and templist[joint] == 0:\n                                        z += pow(2, lenn - joint - 1)\n                                        poss.add(z)\n                                        z -= pow(2, lenn - joint - 1)\n                            z = cv\n                            templist = vc\n                            z += pow(2, lenn - i - 1)\n                            templist[i] = 1\n                            flag = 1\n                            continue\n                    if flag == 0 and Lbin[i] == 1 and (templist[i] == 0):\n                        templist[i] = 1\n                        z += pow(2, lenn - i - 1)\n                        if z >= l and z <= r:\n                            poss.add(z)\n                        continue\n                poss.add(z)\n            else:\n                poss.add(find)\n        else:\n            while len(Lbin) != len(Rbin):\n                Lbin.insert(0, 0)\n            result = l\n            alpha = 0\n            lenn = len(templist)\n            flag = 0\n            for i in range(lenn):\n                if z <= r and z >= l:\n                    poss.add(z)\n                if flag == 1:\n                    if Rbin[i] == 0 and templist[i] == 1:\n                        templist[i] = 0\n                        z -= pow(2, lenn - i - 1)\n                        if z >= l and z <= r:\n                            poss.add(z)\n                        continue\n                    if Rbin[i] == 1 and templist[i] == 1:\n                        z -= pow(2, lenn - i - 1)\n                        poss.add(z)\n                        z += pow(2, lenn - i - 1)\n                        continue\n                if flag == 0 and Lbin[i] - templist[i] == 0:\n                    continue\n                if Lbin[i] == 0 and templist[i] == 1:\n                    if Rbin[i] == 0:\n                        templist[i] = 0\n                        z -= pow(2, lenn - i - 1)\n                        flag = 0\n                        if z <= r and z >= l:\n                            poss.add(z)\n                        continue\n                    else:\n                        z -= pow(2, lenn - i - 1)\n                        templist[i] = 0\n                        vc = templist[:]\n                        cv = z\n                        if z >= l:\n                            poss.add(z)\n                        if z < l:\n                            for joint in range(i + 1, lenn):\n                                if Lbin[joint] == 0 and templist[joint] == 1:\n                                    poss.add(z)\n                                    break\n                                if Lbin[joint] == 1 and templist[joint] == 0:\n                                    templist[joint] = 1\n                                    z += pow(2, lenn - joint - 1)\n                                    if z >= l:\n                                        poss.add(z)\n                                    continue\n                                if Lbin[joint] == 0 and templist[joint] == 0:\n                                    z += pow(2, lenn - joint - 1)\n                                    poss.add(z)\n                                    z -= pow(2, lenn - joint - 1)\n                        z = cv\n                        templist = vc\n                        z += pow(2, lenn - i - 1)\n                        templist[i] = 1\n                        flag = 1\n                        continue\n                if flag == 0 and Lbin[i] == 1 and (templist[i] == 0):\n                    templist[i] = 1\n                    z += pow(2, lenn - i - 1)\n                    if z >= l and z <= r:\n                        poss.add(z)\n                    continue\n            poss.add(z)\n    else:\n        templist = Zbin\n        while len(templist) != len(Rbin):\n            templist.insert(0, 0)\n        while len(Lbin) != len(Rbin):\n            Lbin.insert(0, 0)\n        ans = -1\n        find = z\n        lenn = len(Rbin)\n        gg = 0\n        for j in range(lenn):\n            if templist[j] == 0 and Lbin[j] == 1:\n                templist[j] = 1\n                find += pow(2, lenn - j - 1)\n                continue\n            if templist[j] == 1 and Lbin[j] == 0:\n                if find > r:\n                    gg = 1\n                    break\n                else:\n                    break\n        if gg == 1:\n            while len(Lbin) != len(Rbin):\n                Lbin.insert(0, 0)\n            result = l\n            alpha = 0\n            lenn = len(templist)\n            flag = 0\n            z = find\n            for i in range(lenn):\n                if z <= r and z >= l:\n                    poss.add(z)\n                if flag == 1:\n                    if Rbin[i] == 0 and templist[i] == 1:\n                        templist[i] = 0\n                        z -= pow(2, lenn - i - 1)\n                        if z >= l and z <= r:\n                            poss.add(z)\n                        continue\n                    if Rbin[i] == 1 and templist[i] == 1:\n                        z -= pow(2, lenn - i - 1)\n                        poss.add(z)\n                        z += pow(2, lenn - i - 1)\n                        continue\n                if flag == 0 and Lbin[i] - templist[i] == 0:\n                    continue\n                if Lbin[i] == 0 and templist[i] == 1:\n                    if Rbin[i] == 0:\n                        templist[i] = 0\n                        z -= pow(2, lenn - i - 1)\n                        flag = 0\n                        if z <= r and z >= l:\n                            poss.add(z)\n                        continue\n                    else:\n                        z -= pow(2, lenn - i - 1)\n                        templist[i] = 0\n                        vc = templist[:]\n                        cv = z\n                        if z >= l:\n                            poss.add(z)\n                        if z < l:\n                            for joint in range(i + 1, lenn):\n                                if Lbin[joint] == 0 and templist[joint] == 1:\n                                    poss.add(z)\n                                    break\n                                if Lbin[joint] == 1 and templist[joint] == 0:\n                                    templist[joint] = 1\n                                    z += pow(2, lenn - joint - 1)\n                                    if z >= l:\n                                        poss.add(z)\n                                    continue\n                                if Lbin[joint] == 0 and templist[joint] == 0:\n                                    z += pow(2, lenn - joint - 1)\n                                    poss.add(z)\n                                    z -= pow(2, lenn - joint - 1)\n                        z = cv\n                        templist = vc\n                        z += pow(2, lenn - i - 1)\n                        templist[i] = 1\n                        flag = 1\n                        continue\n                if flag == 0 and Lbin[i] == 1 and (templist[i] == 0):\n                    templist[i] = 1\n                    z += pow(2, lenn - i - 1)\n                    if z >= l and z <= r:\n                        poss.add(z)\n                    continue\n            poss.add(z)\n        else:\n            poss.add(find)\n    ans = l\n    prod = 0\n    poss = sorted(poss)\n    for i in poss:\n        if (x & i) * (y & i) > prod:\n            prod = (x & i) * (y & i)\n            ans = i\n    print(ans)", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\ntestcase = int(input())\nfor i in range(testcase):\n    (X, Y, L, R) = input().split()\n    (X, Y, L, R) = (int(X), int(Y), int(L), int(R))\n    K = 0\n    F_max = 0\n    probable_answer = X | Y\n    p_answer = R + 1\n    R_binary = decimalToBinary(R)\n    L_binary = decimalToBinary(L)\n    F_atL = (X & L) * (Y & L)\n    if X == 0 or Y == 0 or R == 0 or (R == L):\n        K = L\n        F_max = F_atL\n    else:\n        if probable_answer <= R:\n            if probable_answer >= L:\n                K = probable_answer\n                F_max = (X & probable_answer) * (Y & probable_answer)\n            else:\n                L_binary_length = len(L_binary)\n                probable_answer_binary = decimalToBinary(probable_answer)\n                probable_answer_binary_list = list(probable_answer_binary)\n                L_binary_list = list(L_binary)\n                start_index = L_binary_length - len(probable_answer_binary)\n                F_max = (X & L) * (Y & L)\n                K = L\n                for j in range(len(probable_answer_binary)):\n                    if L_binary_list[start_index + j] == '0':\n                        p_answer = L_binary_list[:start_index + j] + ['1'] + probable_answer_binary_list[j + 1:]\n                        p_answer = ''.join(p_answer)\n                        p_answer = int(p_answer, 2)\n                        F_p = (X & p_answer) * (Y & p_answer)\n                        if F_p == F_max and K > p_answer and (p_answer >= L) and (p_answer <= R):\n                            F_max = F_p\n                            K = p_answer\n                        elif F_p > F_max and p_answer >= L and (p_answer <= R):\n                            F_max = F_p\n                            K = p_answer\n        else:\n            R_binary_length = len(R_binary)\n            ones_R = 2 ** R_binary_length - 1\n            probable_answer_short = probable_answer & ones_R\n            if probable_answer_short <= R:\n                if probable_answer_short >= L:\n                    K = probable_answer_short\n                    F_max = (X & probable_answer_short) * (Y & probable_answer_short)\n                else:\n                    L_binary_length = len(L_binary)\n                    probable_answer_binary = decimalToBinary(probable_answer_short)\n                    probable_answer_binary_list = list(probable_answer_binary)\n                    L_binary_list = list(L_binary)\n                    start_index = L_binary_length - len(probable_answer_binary)\n                    F_max = (X & L) * (Y & L)\n                    K = L\n                    for j in range(len(probable_answer_binary)):\n                        if L_binary_list[start_index + j] == '0':\n                            p_answer = L_binary_list[:start_index + j] + ['1'] + probable_answer_binary_list[j + 1:]\n                            p_answer = ''.join(p_answer)\n                            p_answer = int(p_answer, 2)\n                            F_p = (X & p_answer) * (Y & p_answer)\n                            if F_p == F_max and K > p_answer and (p_answer >= L) and (p_answer <= R):\n                                F_max = F_p\n                                K = p_answer\n                            elif F_p > F_max and p_answer >= L and (p_answer <= R):\n                                F_max = F_p\n                                K = p_answer\n            else:\n                probable_answer_binary = decimalToBinary(probable_answer_short)\n                probable_answer_binary_list = list(probable_answer_binary)\n                R_binary_list = list(R_binary)\n                F_max = (X & R) * (Y & R)\n                K = R\n                for j in range(R_binary_length):\n                    if R_binary_list[j] == '1':\n                        p_answer = R_binary_list[:j] + ['0'] + probable_answer_binary_list[j + 1:]\n                        p_answer = ''.join(p_answer)\n                        p_answer = int(p_answer, 2)\n                        F_p = (X & p_answer) * (Y & p_answer)\n                        if F_p == F_max and K > p_answer and (p_answer >= L) and (p_answer <= R):\n                            F_max = F_p\n                            K = p_answer\n                        elif F_p > F_max and p_answer >= L and (p_answer <= R):\n                            F_max = F_p\n                            K = p_answer\n        L_binary_length = len(L_binary)\n        ones_L = 2 ** L_binary_length - 1\n        probable_answer_short = probable_answer & ones_L\n        probable_answer_binary_short = decimalToBinary(probable_answer_short)\n        probable_answer_binary_list = list(probable_answer_binary_short)\n        L_binary_list = list(L_binary)\n        start_index = L_binary_length - len(probable_answer_binary_short)\n        for j in range(len(probable_answer_binary_short)):\n            if L_binary_list[start_index + j] == '0':\n                p_answer = L_binary_list[:start_index + j] + ['1'] + probable_answer_binary_list[j + 1:]\n                p_answer = ''.join(p_answer)\n                p_answer = int(p_answer, 2)\n                F_p = (X & p_answer) * (Y & p_answer)\n                if F_p == F_max and K > p_answer and (p_answer >= L) and (p_answer <= R):\n                    F_max = F_p\n                    K = p_answer\n                elif F_p > F_max and p_answer >= L and (p_answer <= R):\n                    F_max = F_p\n                    K = p_answer\n        R_binary_length = len(R_binary)\n        ones_R = 2 ** R_binary_length - 1\n        probable_answer_short = probable_answer & ones_R\n        probable_answer_binary_short = decimalToBinary(probable_answer_short)\n        probable_answer_binary_list = list(probable_answer_binary_short)\n        R_binary_list = list(R_binary)\n        start_index = R_binary_length - len(probable_answer_binary_short)\n        for j in range(len(probable_answer_binary_short)):\n            if R_binary_list[start_index + j] == '1':\n                p_answer = R_binary_list[:start_index + j] + ['0'] + probable_answer_binary_list[j + 1:]\n                p_answer = ''.join(p_answer)\n                p_answer = int(p_answer, 2)\n                F_p = (X & p_answer) * (Y & p_answer)\n                if F_p == F_max and K > p_answer and (p_answer >= L) and (p_answer <= R):\n                    F_max = F_p\n                    K = p_answer\n                elif F_p > F_max and p_answer >= L and (p_answer <= R):\n                    F_max = F_p\n                    K = p_answer\n    F_atR = (X & R) * (Y & R)\n    if F_atL >= F_max:\n        K = L\n        F_max = F_atL\n    if F_atR > F_max:\n        K = R\n        F_max = F_atR\n    print(K)", "try:\n    for _ in range(int(input())):\n        (x, y, l, r) = map(int, input().split())\n        _or = x | y | l\n        if 0 in [x, y, r]:\n            print(l)\n            continue\n        if l == 0 and r > 2 * max(x, y):\n            print(x | y)\n            continue\n        rBin = bin(r)[2:]\n        lBin = bin(l)[2:]\n        rLen = len(rBin)\n        xLen = len(bin(x)[2:])\n        yLen = len(bin(y)[2:])\n        for i in range(rLen, max(xLen, yLen)):\n            sb = 1 << i\n            ub = ~sb\n            x &= ub\n            y &= ub\n        if x == 0 or y == 0:\n            print(l)\n            continue\n        _or = x | y | l\n        binOr = bin(_or)[2:]\n        bLen = len(binOr)\n        lLen = len(lBin)\n        if rLen > lLen:\n            lBin = '0' * (rLen - lLen) + lBin\n        dif = bLen - rLen\n        if dif > 0:\n            binOr = binOr[dif:]\n        elif dif < 0:\n            binOr = '0' * -dif + binOr\n        _or = int(binOr, 2)\n        maxVal = -1\n        ans = -1\n        bLen = len(binOr)\n        for i in range(bLen):\n            z = int(binOr, 2)\n            if z >= l and z <= r:\n                if (x & z) * (y & z) > maxVal:\n                    maxVal = (x & z) * (y & z)\n                    ans = z\n            temp = binOr\n            binOr = binOr[:i] + '0' + binOr[i + 1:]\n            z = int(binOr, 2)\n            if z >= l and z <= r:\n                if (x & z) * (y & z) > maxVal:\n                    maxVal = (x & z) * (y & z)\n                    ans = z\n            if rBin[i] == '0':\n                binOr = binOr[:i] + '0' + binOr[i + 1:]\n            else:\n                binOr = temp\n        if l == 0:\n            if maxVal == 0:\n                ans = l\n            print(ans)\n            continue\n        binAns = bin(ans)[2:]\n        ansLen = len(binAns)\n        if rLen > ansLen:\n            binAns = '0' * (rLen - ansLen) + binAns\n        else:\n            binAns = binAns[ansLen - rLen:]\n        _or1 = x | y\n        binOr1 = bin(_or1)[2:]\n        orLen = len(binOr1)\n        if rLen > orLen:\n            binOr1 = '0' * (rLen - orLen) + binOr1\n        else:\n            binOr1 = binOr1[orLen - rLen:]\n        for i in range(rLen):\n            if binOr1[i] == '0':\n                tmp = binAns[:i] + '0' + binAns[i + 1:]\n                if int(tmp, 2) >= l:\n                    ans = int(tmp, 2)\n                    binAns = tmp\n        if maxVal == 0:\n            ans = l\n        print(ans)\nexcept Exception as e:\n    print(e)\n    pass", "import bisect\nimport itertools\n\ndef f(x, y, z):\n    return (x & z) * (y & z)\n\ndef solve(x, y, l, r):\n    z = x | y\n    sr = bin(r)[2:]\n    lr = len(sr)\n    sx = bin(x)[2:].zfill(40)[40 - lr:]\n    sy = bin(y)[2:].zfill(40)[40 - lr:]\n    x = int(sx, 2)\n    y = int(sy, 2)\n    if x == 0 or y == 0 or r == 0 or (r == l):\n        k = l\n    elif l <= z and r >= z:\n        k = z\n    else:\n        k = r\n        p = f(x, y, k)\n        for i in range(lr - 1, -1, -1):\n            if sr[i] == '1' and (sx[i] == '0' or sy[i] == '0'):\n                sk = sr[:i] + '0' + '1' * (lr - i - 1)\n                k = int(sk, 2)\n                np = f(x, y, k)\n                if np >= p and k >= l:\n                    (p, sr) = (np, sk)\n        sk = sr\n        for i in range(lr):\n            if sr[i] == '1':\n                if sx[i] == '0' and sy[i] == '0':\n                    sk = sk[:i] + '0' + sk[i + 1:]\n                else:\n                    sr = sk[:i] + '0' + sk[i + 1:]\n                    k = int(sr, 2)\n                    np = f(x, y, k)\n                    if np >= p:\n                        sk = sr\n        k = int(sk, 2)\n        if k < l:\n            li1 = [1 << i for i in range(lr) if sk[lr - 1 - i] == '0']\n            li2 = list(itertools.accumulate(li1))\n            d1 = l - k\n            while d1 > 0:\n                p1 = bisect.bisect_left(li2, d1)\n                v1 = li1[p1]\n                k += v1\n                d1 -= v1\n    return k\nt = int(input())\nfor j in range(t):\n    (x, y, l, r) = map(int, input().split(' '))\n    z = solve(x, y, l, r)\n    print(z)", "def solve(X, Y, L, R):\n    (mx, mxz) = (-1, -1)\n\n    def search(i, Z, freeL, freeR):\n        nonlocal mx, mxz\n        if i < 0:\n            res = (X & Z) * (Y & Z)\n            if res > mx or (res == mx and Z < mxz):\n                (mx, mxz) = (res, Z)\n            return\n        if freeL and freeR:\n            Z = Z << i + 1 | (X | Y) & (1 << i + 1) - 1\n            res = (X & Z) * (Y & Z)\n            if res > mx or (res == mx and Z < mxz):\n                (mx, mxz) = (res, Z)\n            return\n        (x, y, l, r) = (X >> i & 1, Y >> i & 1, L >> i & 1, R >> i & 1)\n        Z <<= 1\n        if freeL:\n            if not r:\n                search(i - 1, Z, True, False)\n            else:\n                search(i - 1, Z + 1, True, False)\n                search(i - 1, Z, True, True)\n            return\n        if freeR:\n            if l:\n                search(i - 1, Z + 1, False, True)\n            else:\n                search(i - 1, Z + 1, True, True)\n                search(i - 1, Z, False, True)\n            return\n        if l == r:\n            Z += r\n            search(i - 1, Z, False, False)\n            return\n        assert l < r\n        search(i - 1, Z, False, True)\n        search(i - 1, Z + 1, True, False)\n    search(42, 0, False, False)\n    return mxz\n\ndef main():\n    from sys import stdin\n    T = int(stdin.readline().strip())\n    for t in range(T):\n        (X, Y, L, R) = list(map(int, stdin.readline().strip().split()))\n        out = solve(X, Y, L, R)\n        print(out)\nmain()", "def f(x, y, z):\n    return (x & z) * (y & z)\n\ndef jp(i, l, m):\n    j = i & (i ^ m)\n    while j > 0:\n        maxb = h(j)\n        if i - maxb >= l:\n            i -= maxb\n        j -= maxb\n    return i\n\ndef f2(p):\n    x = p ^ p + 1\n    x = h(x)\n    return p - x\n\ndef h(n):\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32\n    n = n + 1\n    return n >> 1\nt = int(input())\nfor _ in range(t):\n    for mkp in range(1):\n        continue\n    (x, y, l, r) = map(int, input().split())\n    p = r\n    ans = []\n    while p >= l:\n        ans.append([f(x, y, p), p])\n        p = f2(p)\n    temp = ans[0][1]\n    maxm = ans[0][0]\n    temp = []\n    for i in ans:\n        if i[0] > maxm:\n            maxm = i[0]\n            temp = [i[1]]\n        elif i[0] == maxm:\n            temp.append(i[1])\n    if maxm == 0:\n        print(l)\n    else:\n        m = x | y\n        minm = temp[0]\n        for i in temp:\n            q = jp(i, l, m)\n            if q < minm:\n                minm = q\n        print(minm)", "def check(x, y, z):\n    return (x & z) * (y & z)\n\ndef biggerThanL(v, l):\n    vBin = list(format(v, 'b'))\n    lBin = list(format(l, 'b'))\n    vLen = len(vBin)\n    lLen = len(lBin)\n    leftovers = ['0' for i in range(lLen - vLen)]\n    vBin = leftovers + vBin\n    for i in range(lLen):\n        if vBin[i] != lBin[i]:\n            if vBin[i] == '0':\n                vBin[i] = '1'\n            else:\n                break\n    return int(''.join(vBin), 2)\n\ndef tryOther(v, l, r):\n    vBin = list(format(v, 'b'))\n    rBin = list(format(r, 'b'))\n    maxProd = 0\n    ans = l\n    for i in range(len(vBin)):\n        if vBin[i] == '1' and rBin[i] == '1':\n            tv = int(''.join(vBin), 2)\n            if tv < l:\n                tv = biggerThanL(tv, l)\n            if tv <= r:\n                newProd = check(x, y, tv)\n                if newProd == maxProd:\n                    ans = min(tv, ans)\n                if newProd > maxProd:\n                    maxProd = newProd\n                    ans = tv\n            temp = vBin.copy()\n            temp[i] = '0'\n            tv = int(''.join(temp), 2)\n            if tv < l:\n                tv = biggerThanL(tv, l)\n            if tv <= r:\n                newProd = check(x, y, tv)\n                if newProd == maxProd:\n                    ans = min(tv, ans)\n                if newProd > maxProd:\n                    maxProd = newProd\n                    ans = tv\n        if vBin[i] == '1' and rBin[i] == '0':\n            vBin[i] = '0'\n            temp = vBin.copy()\n            tv = int(''.join(temp), 2)\n            if tv < l:\n                tv = biggerThanL(tv, l)\n            if tv <= r:\n                newProd = check(x, y, tv)\n                if newProd == maxProd:\n                    ans = min(tv, ans)\n                if newProd > maxProd:\n                    maxProd = newProd\n                    ans = tv\n    return ans\nt = int(input())\nfor z in range(t):\n    (x, y, l, r) = map(int, input().split())\n    ans = x | y\n    if ans > r:\n        ans = int(''.join(list(format(ans, 'b')[-len(list(format(r, 'b'))):])), 2)\n    if ans < l:\n        ans = biggerThanL(ans, l)\n    if ans > r:\n        ans = tryOther(ans, l, r)\n    if check(x, y, ans) == 0:\n        ans = l\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (x, y, l, r) = [int(x) for x in input().split()]\n    if min(x, y) == 0 or r == 0:\n        print(l)\n        continue\n    else:\n        b = bin(r)\n        br = b[2:]\n        le = len(br)\n        A = []\n        arr = []\n        sum1 = 0\n        for i in range(le):\n            if br[i] == '0':\n                continue\n            isum = 2 ** (le - i - 1)\n            sum1 += isum\n            v1 = sum1\n            v2 = sum1 - 1\n            a1 = v1 & x\n            b1 = v1 & y\n            ans = a1 | b1\n            if ans >= l and ans <= r:\n                arr.append(ans)\n            else:\n                r1 = l | ans\n                k = int(r1 - l)\n                if k != 0:\n                    k = int(math.log2(k))\n                k = int(2 ** k) - 1\n                kandl = k & l\n                r1 = r1 - kandl\n                r1 = r1 | ans\n                if r1 >= l and r1 <= r:\n                    arr.append(r1)\n            a1 = v2 & x\n            b1 = v2 & y\n            ans = a1 | b1\n            if ans >= l and ans <= r:\n                arr.append(ans)\n            else:\n                r1 = l | ans\n                r2 = int(r1 - l)\n                if r2 != 0:\n                    r2 = int(math.log2(r2))\n                r2 = int(2 ** r2) - 1\n                r2andl = r2 & l\n                r1 = r1 - r2andl\n                r1 = r1 | ans\n                if r1 >= l and r1 <= r:\n                    arr.append(r1)\n        tup = set(arr.copy())\n        arr = list(tup)\n        for i in range(len(arr)):\n            v = arr[i]\n            p1 = v & x\n            p2 = v & y\n            A.append([v, p1 * p2])\n        mi = l\n        pro = 0\n        for i in range(0, len(A)):\n            ans1 = A[i][0]\n            pro1 = A[i][1]\n            if pro == pro1 and ans1 <= r:\n                mi = min(mi, ans1)\n            elif pro1 > pro and ans1 <= r:\n                mi = ans1\n                pro = pro1\n        print(mi)", "import math\nt = int(input())\nwhile True:\n    try:\n        (x, y, l, r) = map(int, input().strip().split())\n        if r == 0:\n            print(0)\n            continue\n        binary = bin(r)[2:]\n        k = len(binary)\n        val = l ^ r\n        if val == 0:\n            pos = 0\n        else:\n            binary = bin(val)[2:]\n            pos = len(binary)\n        k = k - 1\n        pos = pos - 1\n        if pos == -1:\n            print(l)\n        else:\n            z = 0\n            for i in range(k, pos, -1):\n                if r & 1 << i:\n                    z = z | 1 << i\n            pl = (x & l) * (y & l)\n            pr = (x & r) * (y & r)\n            if pr > pl:\n                max_pro = pr\n                zmin = r\n            else:\n                max_pro = pl\n                zmin = l\n            z1 = z\n            z1 = z1 | 1 << pos\n            for i in range(pos - 1, -1, -1):\n                if r & 1 << i:\n                    temp = z1\n                    temp += x & (1 << i) - 1 | y & (1 << i) - 1\n                    pro = (x & temp) * (y & temp)\n                    if pro > max_pro:\n                        max_pro = pro\n                        zmin = temp\n                    elif pro == max_pro:\n                        zmin = min(zmin, temp)\n                    z1 = z1 | 1 << i\n            z2 = z\n            for i in range(pos - 1, -1, -1):\n                if l & 1 << i:\n                    z2 = z2 | 1 << i\n                else:\n                    temp = z2\n                    temp = z2 | 1 << i\n                    temp += x & (1 << i) - 1 | y & (1 << i) - 1\n                    pro = (x & temp) * (y & temp)\n                    if pro > max_pro:\n                        max_pro = pro\n                        zmin = temp\n                    elif pro == max_pro:\n                        zmin = min(zmin, temp)\n            print(zmin)\n            t = t - 1\n    except EOFError as e:\n        break", "mxB = 1 << 40\n\ndef f(x, y, z):\n    return (z & x) * (z & y)\n\ndef lcomp(a, b):\n    return a & -b - 1\n\ndef find(x, y, l, r, b=mxB):\n    z = x | y\n    w = x & y\n    ans = z\n    lans = lcomp(z, l)\n    while b > 0 and r & b == 0:\n        b >>= 1\n    z = 0 if b == 0 else z & 2 * b - 1\n    rb = b\n    pv = 0\n    while b > 0 and (r < z or z < l):\n        if z < l and l & b:\n            z |= b\n        if z & b:\n            if r < z and r & b == 0:\n                z -= b\n            if r & b and (l & b == 0 or z - b > l):\n                v = f(x, y, z - b)\n                lz = lcomp(z - b, l)\n                if v > pv or (v == pv and lz < lans):\n                    ans = z - b\n                    lans = lz\n                    pv = v\n        b >>= 1\n    v = f(x, y, z)\n    lz = lcomp(z, l)\n    if v > pv or (v == pv and lz < lans):\n        ans = z\n        pv = v\n    b = rb\n    while b > 0 and ans < l:\n        if l & b:\n            ans |= b\n        b >>= 1\n    if pv == 0:\n        ans = l\n    return ans\nfor t in range(int(input().strip())):\n    (x, y, l, r) = tuple(map(int, input().strip().split()))\n    ans = 0\n    z = x | y\n    ans = find(x, y, l, r)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    if x == 0 or y == 0:\n        print(l)\n        continue\n    val = x | y\n    z = []\n    if l == 0:\n        if val > r:\n            for i in range(63, -1, -1):\n                if val <= r:\n                    break\n                tmp = 1 << i\n                if val & tmp:\n                    if val & ~(1 << i) > r:\n                        val = val & ~(1 << i)\n                    else:\n                        z.append(val & ~(1 << i))\n        if val < r:\n            print(val)\n        else:\n            (ans, mx) = (l, 0)\n            for i in z:\n                if (x & i) * (y & i) > mx:\n                    mx = (x & i) * (y & i)\n                    ans = i\n            print(ans)\n    else:\n        tmp = bin(val)[2:].zfill(63)\n        r = bin(r)[2:].zfill(63)\n        l = bin(l)[2:].zfill(63)\n        final = ''\n        for i in range(63):\n            if l[i] == '1':\n                final += '1'\n            elif l[i] == '0' and tmp[i] == '1':\n                final += tmp[i:]\n                break\n            else:\n                final += '0'\n        if int(final, 2) <= int(r, 2):\n            print(int(final, 2))\n        else:\n            a = ''\n            for i in range(63):\n                if r[i] == '1':\n                    if int(a[:i], 2) > int(l[:i], 2):\n                        z.append(a + '0' + final[i + 1:])\n                    else:\n                        temp = ''\n                        for j in range(i + 1, 63):\n                            if l[j] == '1':\n                                temp += '1'\n                            elif l[j] == '0' and final[j] == '1':\n                                temp += tmp[j:]\n                                break\n                            else:\n                                temp += '0'\n                        z.append(a + '0' + temp)\n                    a += '1'\n                elif r[i] == '0':\n                    a += '0'\n            z.append(a)\n            z = [int(i, 2) for i in z if int(i, 2) > int(l, 2)]\n            mx = (x & int(l, 2)) * (y & int(l, 2))\n            final = int(l, 2)\n            for i in z:\n                tmp = (x & i) * (y & i)\n                if tmp > mx:\n                    mx = tmp\n                    final = i\n            print(final)", "import math\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    if x == 0 or y == 0:\n        print(l)\n        continue\n    val = x | y\n    z = []\n    if l == 0:\n        if val > r:\n            for i in range(63, -1, -1):\n                if val <= r:\n                    break\n                tmp = 1 << i\n                if val & tmp:\n                    if val & ~(1 << i) > r:\n                        val = val & ~(1 << i)\n                    else:\n                        z.append(val & ~(1 << i))\n        if val < r:\n            print(val)\n        else:\n            (ans, mx) = (l, 0)\n            for i in z:\n                if (x & i) * (y & i) > mx:\n                    mx = (x & i) * (y & i)\n                    ans = i\n            print(ans)\n    else:\n        tmp = bin(val)[2:].zfill(63)\n        r = bin(r)[2:].zfill(63)\n        l = bin(l)[2:].zfill(63)\n        final = ''\n        for i in range(63):\n            if l[i] == '1':\n                final += '1'\n            elif l[i] == '0' and tmp[i] == '1':\n                final += tmp[i:]\n                break\n            else:\n                final += '0'\n        if int(final, 2) <= int(r, 2):\n            print(int(final, 2))\n        else:\n            a = ''\n            for i in range(63):\n                if r[i] == '1':\n                    if int(a[:i], 2) > int(l[:i], 2):\n                        z.append(a + '0' + final[i + 1:])\n                    else:\n                        temp = ''\n                        for j in range(i + 1, 63):\n                            if l[j] == '1':\n                                temp += '1'\n                            elif l[j] == '0' and final[j] == '1':\n                                temp += tmp[j:]\n                                break\n                            else:\n                                temp += '0'\n                        z.append(a + '0' + temp)\n                    a += '1'\n                elif r[i] == '0':\n                    a += '0'\n            z.append(a)\n            z = [int(i, 2) for i in z if int(i, 2) > int(l, 2)]\n            mx = (x & int(l, 2)) * (y & int(l, 2))\n            final = int(l, 2)\n            for i in z:\n                tmp = (x & i) * (y & i)\n                if tmp > mx:\n                    mx = tmp\n                    final = i\n            print(final)", "shifts = [2 ** p for p in range(62, -1, -1)]\n\ndef solve(x, y, l, r):\n    if l == 0 and r >= 2 * max(x, y):\n        if x * y == 0:\n            return 0\n        return x | y\n    result = l\n    current = l\n    best = (x & current) * (y & current)\n    while True:\n        last0 = ~current\n        last0 = last0 & -last0\n        current += last0\n        if current > r:\n            current -= last0 - 1\n        if current > r:\n            break\n        val = (x & current) * (y & current)\n        if val > best:\n            best = val\n            result = current\n    for shift in shifts:\n        tmp = result ^ shift\n        if tmp > result or tmp < l or (tmp & x) * (tmp & y) != best:\n            continue\n        result = tmp\n    return result\ntests = int(input())\nfor t in range(tests):\n    (x, y, l, r) = map(int, input().split())\n    print(solve(x, y, l, r))", "def rcom(no, x, y):\n    orr = x | y\n    return no & orr\n\ndef samelen(b, l):\n    m = max(len(b), len(l))\n    b = '0' * (m - len(b)) + b\n    l = '0' * (m - len(l)) + l\n    return (b, l)\n\ndef round1(x, y, l, r):\n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n    rini = r\n    mv = (int(x, 2) & int(r, 2)) * (int(y, 2) & int(r, 2))\n    no = int(r, 2)\n    c = 0\n    for i in range(1, len(r)):\n        if r[i] == '1' and int(r[0:i] + '0' + '1' * (len(r) - i - 1), 2) >= int(l, 2):\n            new = r[0:i] + '0' + '1' * (len(r) - i - 1)\n            fv = (int(x, 2) & int(new, 2)) * (int(y, 2) & int(new, 2))\n            if fv >= mv and c == 0:\n                c = 1\n                mv = fv\n                no = int(new, 2)\n            elif fv > mv:\n                mv = fv\n                no = int(new, 2)\n    r = rini\n    for i in range(len(r)):\n        if r[i] == '1' and int(r[0:i] + '0' + '1' * (len(r) - i - 1), 2) >= int(l, 2):\n            new = r[0:i] + '0' + '1' * (len(r) - i - 1)\n            fv = (int(x, 2) & int(new, 2)) * (int(y, 2) & int(new, 2))\n            if fv >= mv:\n                mv = fv\n                no = int(new, 2)\n            else:\n                break\n            r = new\n    no = rcom(no, int(x, 2), int(y, 2))\n    if no < int(l, 2):\n        b = bin(no)[2:]\n        (b, l) = samelen(b, l)\n        for i in range(len(b)):\n            if b[i] == '1' and l[i] == '0':\n                return int(b, 2)\n            if b[i] == '0' and l[i] == '1':\n                b = b[:i] + '1' + b[i + 1:]\n        return int(b, 2)\n    return no\nt = int(input())\nfor _ in range(t):\n    st = input()\n    (x, y, l, r) = st.split()\n    print(round1(int(x), int(y), int(l), int(r)))", "def f(q):\n    fi = []\n    ch = False\n    for i in range(q, 0, -1):\n        if b[-i] == a[-i]:\n            fi.append(a[-i])\n        elif b[-i] == '1':\n            if ch:\n                fi.append('0')\n            else:\n                fi.append('1')\n        elif b[-i] == '0':\n            ch = True\n            fi.append('1')\n    return ''.join(fi)\nfor _ in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    z = x | y\n    a = bin(z)[2:]\n    b = bin(l)[2:]\n    c = bin(r)[2:]\n    q = len(a)\n    if x == 0 or y == 0:\n        print(l)\n        continue\n    if r - l <= 1:\n        if (x & l) * (y & l) >= (x & r) * (y & r):\n            print(l)\n        else:\n            print(r)\n        continue\n    elif l <= z <= r:\n        print(z)\n        continue\n    elif l > z:\n        t = int(b[:-q] + a, 2)\n        t1 = int(b[-q:], 2)\n        if t1 <= z and r >= t:\n            print(t)\n            continue\n        elif t1 > z:\n            t = int(b[:-q] + f(q), 2)\n            if t <= r:\n                print(t)\n                continue\n    b = b.rjust(q, '0')\n    c = c.rjust(q, '0')\n    for i in range(q, 1, -1):\n        if b[-i] != c[-i]:\n            break\n    fi = b[:-i + 1] + f(i - 1)\n    t = int(fi, 2)\n    m = (x & t) * (y & t)\n    if a[-i] == '0' and m != 0:\n        print(t)\n    else:\n        for j in range(i - 1, 0, -1):\n            if a[-j] == '0' and c[-j] == '1':\n                t1 = int(c[:-j] + a[-j:], 2)\n                m1 = (x & t1) * (y & t1)\n                if m1 > m:\n                    m = m1\n                    t = t1\n                break\n            elif a[-j] == '1' and c[-j] == '1' and (j != 1):\n                t1 = int(c[:-j] + '0' + a[-j + 1:], 2)\n                m1 = (x & t1) * (y & t1)\n                if m1 > m:\n                    m = m1\n                    t = t1\n            else:\n                continue\n        if (x & r) * (y & r) > m:\n            print(r)\n        elif m == 0:\n            print(l)\n        else:\n            print(t)", "import math\n\ndef ctb(p):\n    bl = list(bin(p))\n    bl = list(map(int, bl[2:len(bl)]))\n    return bl\n\ndef ctd(binl):\n    s = ''.join(map(str, binl))\n    return int(s, 2)\nt = int(input())\nfor _ in range(t):\n    dg = 0\n    (x, y, l, r) = map(int, input().split())\n    xb = ctb(x)\n    yb = ctb(y)\n    lb = ctb(l)\n    rb = ctb(r)\n    nx = len(xb)\n    ny = len(yb)\n    nr = len(rb)\n    nl = len(lb)\n    ansb = rb[0:nr]\n    if nx < nr:\n        dx = nr - nx\n        xb = [0] * dx + xb\n    elif nx > nr:\n        dx = nx - nr\n        xb = xb[dx:nx]\n    if ny < nr:\n        dy = nr - ny\n        yb = [0] * dy + yb\n    elif ny > nr:\n        dy = ny - nr\n        yb = yb[dy:ny]\n    if nl < nr:\n        dl = nr - nl\n        lb = [0] * dl + lb\n    change = 0\n    for i in range(nr):\n        if xb[i] == 0 and yb[i] == 0:\n            if lb[i] == 0 or dg > 0:\n                if ansb[i] == 1:\n                    change = 1\n                ansb[i] = 0\n            else:\n                ansb[i] = 1\n        if xb[i] == 1 and yb[i] == 1:\n            if change > 0:\n                ansb[i] = 1\n            if ansb[i] == 1 and lb[i] == 0:\n                dg = 1\n        if xb[i] * yb[i] == 0 and xb[i] + yb[i] > 0:\n            if change == 0:\n                if ansb[i] == 1 and i < nr - 1 and (dg > 0 or lb[i] == 0):\n                    zb = ansb[0:nr]\n                    zb[i] = 0\n                    for j in range(i + 1, nr):\n                        zb[j] = 1\n                    z = ctd(zb)\n                    na = (x & z) * (y & z)\n                    zb = ansb[0:nr]\n                    z = ctd(zb)\n                    ca = (z & x) * (z & y)\n                    if ca > na:\n                        if lb[i] == 0:\n                            dg = 1\n                        continue\n                    for ci in range(i + 1, nr):\n                        if ansb[ci] == 1:\n                            if xb[ci] == 0 and yb[ci] == 0 and (dg > 0 or lb[ci] == 0):\n                                xyb = ansb[0:ci + 1]\n                                xyb[ci] = 0\n                                xyb.extend([1] * (nr - 1 - ci))\n                                xy = ctd(xyb)\n                                ca = (xy & x) * (xy & y)\n                                break\n                            elif xb[ci] == 1 and yb[ci] == 1:\n                                continue\n                            xyb = ansb[0:ci + 1]\n                            xyb[ci] = 0\n                            xyb.extend([1] * (nr - 1 - ci))\n                            xy = ctd(xyb)\n                            temp = (xy & x) * (xy & y)\n                            if temp > ca:\n                                ca = temp\n                            if ca > na:\n                                break\n                    if na >= ca and (dg > 0 or lb[i] == 0):\n                        ansb[i] = 0\n                        change = 1\n                    elif lb[i] == 0:\n                        dg = 1\n            else:\n                ansb[i] = 1\n                if lb[i] == 0:\n                    dg = 1\n    ans = ctd(ansb)\n    z = (x & ans) * (y & ans)\n    if z == 0:\n        ans = l\n    print(int(ans))", "def solve(ind, restriction, ans):\n    sol = []\n    flag = 0\n    for i in range(ind, m):\n        if x[i] == '1' or y[i] == '1':\n            if not restriction:\n                ans += '1'\n            elif r[i] == '0':\n                ans += '0'\n            else:\n                sol.extend(solve(i + 1, 1, ans + '1'))\n                sol.extend(solve(i + 1, 0, ans + '0'))\n                flag = 1\n                break\n        else:\n            if l[0:len(ans)] == ans and l[i] == '1':\n                ans += '1'\n                continue\n            ans += '0'\n            if r[i] == '1':\n                restriction = 0\n    if not flag:\n        sol.append(ans)\n    return sol\nfor nt in range(int(input())):\n    (x, y, l, r) = map(int, input().split())\n    if True:\n        if True:\n            if True:\n                if x == 0 or y == 0:\n                    print(l)\n                    continue\n                (x, y) = (bin(x)[2:], bin(y)[2:])\n                (l, r) = (bin(l)[2:], bin(r)[2:])\n                m = max(len(x), len(y), len(l), len(r))\n                x = '0' * (m - len(x)) + x\n                y = '0' * (m - len(y)) + y\n                l = '0' * (m - len(l)) + l\n                r = '0' * (m - len(r)) + r\n                answer = solve(0, 1, '')\n                ans = 0\n                num = int(l, 2)\n                for i in answer:\n                    if (int(x, 2) & int(i, 2)) * (int(y, 2) & int(i, 2)) > ans and int(i, 2) >= int(l, 2):\n                        ans = (int(x, 2) & int(i, 2)) * (int(y, 2) & int(i, 2))\n                        num = int(i, 2)\n                    elif (int(x, 2) & int(i, 2)) * (int(y, 2) & int(i, 2)) == ans and int(i, 2) >= int(l, 2):\n                        num = min(int(i, 2), num)\n                print(num)", "def dec(x):\n    n = len(x)\n    ans = 0\n    for i in range(n):\n        if x[n - 1 - i] == '1':\n            ans += arr[i]\n    return ans\n\ndef maker(tmp, r, pos):\n    for i in range(len(tmp)):\n        if pos == i:\n            continue\n        if tmp[i] == '1' and r[i] == '0':\n            return tmp\n        if tmp[i] == '0' and r[i] == '1':\n            tmp[i] = '1'\n    return tmp\narr = []\ntmp = 1\nfor i in range(45):\n    arr.append(tmp)\n    tmp *= 2\nt = int(input())\nfor _ in range(t):\n    (x, y, l, r) = map(int, input().split())\n    if x == 0 or y == 0:\n        print(l)\n    else:\n        k = x | y\n        if k <= r and k >= l:\n            print(k)\n            continue\n        if r - l <= 1000:\n            mans = 0\n            ans = l\n            for i in range(l, r + 1):\n                mk = (i & x) * (i & y)\n                if mans < mk:\n                    mans = mk\n                    ans = i\n            print(ans)\n            continue\n        t1 = bin(r).replace('0b', '')\n        t2 = bin(k).replace('0b', '')\n        t3 = bin(l).replace('0b', '')\n        n = len(t1)\n        if len(t2) > n:\n            t2 = t2[-n:]\n        else:\n            t2 = '0' * (n - len(t2)) + t2\n        t3 = '0' * (n - len(t3)) + t3\n        ans = int(t2, 2)\n        if ans <= r and ans >= l:\n            if ans & x and ans & y:\n                print(ans)\n            else:\n                print(l)\n            continue\n        l1 = list(t1)\n        l2 = list(t2)\n        l3 = list(t3)\n        if ans < l:\n            l2 = maker(l2, l3, -1)\n        ma = 0\n        mans = 0\n        for i in range(n):\n            if l1[i] == '1' and l2[i] == '1':\n                tmp = l2[:]\n                tmp[i] = 0\n                ans = dec(tmp)\n                if ans >= l:\n                    mk = (ans & x) * (ans & y)\n                    if ma < mk:\n                        ma = mk\n                        mans = ans\n                else:\n                    tmp = maker(tmp, l3, i)\n                    ans = dec(tmp)\n                    mk = (ans & x) * (ans & y)\n                    if ma < mk and ans >= l:\n                        ma = mk\n                        mans = ans\n            if l1[i] == '0' and l2[i] == '1':\n                l2[i] = '0'\n            if l1[i] == '1' and l2[i] == '0':\n                ans = dec(l2)\n                if ans >= l:\n                    mk = (ans & x) * (ans & y)\n                    if ma < mk:\n                        ma = mk\n                        mans = ans\n                    break\n                else:\n                    l2 = maker(l2, l3, -1)\n                    ans = dec(l2)\n                    mk = (ans & x) * (ans & y)\n                    if ma < mk and ans >= l and (ans <= r):\n                        ma = mk\n                        mans = ans\n        ans = dec(l2)\n        if ans < l:\n            l2 = maker(l2, l3, -1)\n            ans = dec(l2)\n        if ma < (ans & x) * (ans & y) and ans >= l:\n            mans = ans\n        if mans & x and mans & y and (mans >= l):\n            print(mans)\n        else:\n            print(l)", "import math\nimport collections\nfrom sys import stdin, stdout\nT = int(stdin.readline())\n\ndef or_s(x, y):\n    s = ''\n    for i in range(len(x)):\n        if x[i] == '1' or y[i] == '1':\n            s = s + '1'\n        else:\n            s = s + '0'\n    return s\n\ndef makegreater(x, y):\n    s = ''\n    for i in range(len(x)):\n        if x[i] == '1' and y[i] == '0':\n            s = s + x[i:]\n            return s\n        if x[i] == '0' and y[i] == '1':\n            s = s + '1'\n            continue\n        s = s + x[i]\n    return s\nfor _ in range(T):\n    (x, y, l, r) = list(map(int, stdin.readline().split()))\n    if x == 0 or y == 0 or l == r:\n        print(l)\n        continue\n    if x | y >= l and x | y <= r:\n        print(x | y)\n        continue\n    ml = len(bin(max(x, y, l, r))) - 2\n    l = bin(l)[2:]\n    r = bin(r)[2:]\n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    fun = lambda l: '0' * (ml - len(l)) + l\n    l = fun(l)\n    r = fun(r)\n    x = fun(x)\n    y = fun(y)\n    req = or_s(x, y)\n    for i in range(ml):\n        if l[i] != r[i]:\n            ind = i\n            break\n    pos = [l]\n    ans = l[:ind]\n    for i in range(ind, ml - 1):\n        if r[i] == '0':\n            ans = ans + '0'\n            continue\n        if i == ind:\n            wo = makegreater(req[i + 1:], l[i + 1:])\n            pos.append(ans + '0' + wo)\n        else:\n            wo = req[i + 1:]\n            pos.append(ans + '0' + wo)\n            pos.append(ans + '0' * (ml - i))\n        ans = ans + '1'\n    pos.append(r)\n    pos.append(r[:-1] + '0')\n    d = {}\n    for po in pos:\n        tmp = int('0b' + po, 2)\n        d[tmp] = True\n    x = int('0b' + x, 2)\n    y = int('0b' + y, 2)\n    ans = int('0b' + l, 2)\n    mx = (x & ans) * (y & ans)\n    for k in d:\n        tmp = (x & k) * (y & k)\n        if tmp > mx:\n            mx = tmp\n            ans = k\n        if tmp == mx:\n            if k < ans:\n                ans = k\n    print(ans)", "def ctn(s):\n    final = 0\n    s = s[::-1]\n    for i in range(len(s)):\n        if s[i] == '1':\n            final += 2 ** i\n    return final\n\ndef fun(a, b, c):\n    return (a & c) * (b & c)\nt = int(input())\nwhile t:\n    t -= 1\n    (x, y, l, r) = [int(i) for i in input().split()]\n\n    def solve():\n        if x == 0 or y == 0:\n            return 0\n        else:\n            ans = x | y\n            br = bin(r)[2:]\n            bans = bin(ans)[2:]\n            if len(br) > len(bans):\n                return ans\n            else:\n                bans = bans[len(bans) - len(br):]\n                st = ''\n                temp = len(br)\n                for i in range(len(br)):\n                    if br[i] == '1' and bans[i] == '0':\n                        temp = i\n                        break\n                for i in range(temp):\n                    if br[i] == '1' and bans[i] == '1':\n                        st += '1'\n                    else:\n                        st += '0'\n                for i in range(temp, len(br)):\n                    if bans[i] == '1':\n                        st += '1'\n                    else:\n                        st += '0'\n                check1 = ctn(st)\n                if br.count('0') == 0:\n                    if fun(x, y, check1) == 0:\n                        return 0\n                    else:\n                        return check1\n                else:\n                    bx = bin(x)[2:]\n                    by = bin(y)[2:]\n                    if len(bx) > len(br):\n                        bx = bx[len(bx) - len(br):]\n                    while len(bx) < len(br):\n                        bx = '0' + bx\n                    if len(by) > len(br):\n                        by = by[len(by) - len(br):]\n                    while len(by) < len(br):\n                        by = '0' + by\n                    maxi = fun(x, y, check1)\n                    maxians = check1\n                    flag = -1\n                    for i in range(len(br)):\n                        if br[i] == '1' and (bx[i] == '0' and by[i] == '1' or (bx[i] == '1' and by[i] == '0')):\n                            flag = i\n                            st2 = st[:flag] + '0' + bans[flag + 1:]\n                            check2 = int('0b' + st2, 2)\n                            if maxi < fun(x, y, check2):\n                                maxi = fun(x, y, check2)\n                                maxians = check2\n                            elif maxi == fun(x, y, check2):\n                                maxians = min(check1, check2)\n                    if maxi == 0:\n                        return 0\n                    else:\n                        return maxians\n\n    def solve2():\n        maxi = -1\n        ans = -1\n        for i in range(l, r + 1):\n            if fun(x, y, i) > maxi:\n                ans = i\n                maxi = fun(x, y, i)\n        return ans\n\n    def final():\n        ans = solve()\n        if fun(x, y, ans) == 0:\n            return l\n        if ans >= l:\n            return ans\n        else:\n            bl = bin(l)[2:]\n            br = bin(r)[2:]\n            bx = bin(x)[2:]\n            by = bin(y)[2:]\n            if len(bx) > len(br):\n                bx = bx[len(bx) - len(br):]\n            while len(bx) < len(br):\n                bx = '0' + bx\n            if len(by) > len(br):\n                by = by[len(by) - len(br):]\n            while len(by) < len(br):\n                by = '0' + by\n            bans = bin(ans)[2:]\n            if len(br) > len(bl):\n                if len(bl) > len(bans):\n                    bans = bl[:len(bl) - len(bans)] + bans\n                for i in range(len(bl)):\n                    if bl[i] == '1' and bans[i] == '0':\n                        bans = bans[:i] + '1' + bans[i + 1:]\n                    if bl[i] == '0' and bans[i] == '1':\n                        break\n                ans = int('0b' + bans, 2)\n                if fun(x, y, ans) == 0:\n                    return l\n                else:\n                    return ans\n            else:\n                if len(bl) > len(bans):\n                    bans = bl[:len(bl) - len(bans)] + bans\n                st1 = bans[:]\n                check1 = int('0b' + st1, 2)\n                while check1 > r or check1 < l:\n                    for i in range(len(bans)):\n                        if br[i] == '1' and st1[i] == '0':\n                            break\n                        if br[i] == '0' and st1[i] == '1':\n                            st1 = st1[:i] + '0' + st1[i + 1:]\n                    for i in range(len(bl)):\n                        if bl[i] == '1' and st1[i] == '0':\n                            st1 = st1[:i] + '1' + st1[i + 1:]\n                        if bl[i] == '0' and st1[i] == '1':\n                            break\n                    check1 = int('0b' + st1, 2)\n                check1 = int('0b' + st1, 2)\n                maxi = fun(x, y, check1)\n                maxians = check1\n                flag = -1\n                for i in range(len(br)):\n                    if br[i] == '1' and (bx[i] == '0' and by[i] == '1' or (bx[i] == '1' and by[i] == '0')):\n                        flag = i\n                        st2 = st1[:flag] + '0' + bans[flag + 1:]\n                        check2 = int('0b' + st2, 2)\n                        if check2 < l:\n                            for i in range(i + 1, len(bl)):\n                                if bl[i] == '1' and st2[i] == '0':\n                                    st2 = st2[:i] + '1' + st2[i + 1:]\n                                if bl[i] == '0' and st2[i] == '1':\n                                    break\n                        check2 = int('0b' + st2, 2)\n                        if check2 < l:\n                            continue\n                        if maxi < fun(x, y, check2):\n                            maxi = fun(x, y, check2)\n                            maxians = check2\n                        elif maxi == fun(x, y, check2):\n                            maxians = min(check1, check2)\n                maxians = int(maxians)\n                if fun(x, y, maxians) == 0:\n                    return l\n                else:\n                    return maxians\n    print(final())", "def checkset(n, k):\n    if n & 1 << k - 1:\n        return 1\n    else:\n        return 0\n\ndef setKthBit(n, k):\n    return 1 << k | n\n\ndef correct(a, b, l, r):\n    ans = -1\n    cur = 0\n    for i in range(l, r + 1):\n        if (a & i) * (b & i) > ans:\n            ans = (a & i) * (b & i)\n            cur = i\n        elif (a & i) * (b & i) == ans:\n            if i < cur:\n                cur = i\n    return cur\n\ndef myfunc(a, b, pos, precompute):\n    ans = 0\n    for i in range(pos, 0, -1):\n        x = checkset(a, i)\n        y = checkset(b, i)\n        if x == 1 and y == 0:\n            ans += precompute[i + 1]\n            break\n        if x == 0 and y == 1:\n            ans = setKthBit(ans, i - 1)\n        if x == 1 and y == 1:\n            ans = setKthBit(ans, i - 1)\n    return ans\n\ndef func(x, y, l, r):\n    temp = x | y\n    if x == 0 or y == 0:\n        return l\n    if temp >= l and temp <= r:\n        return temp\n    precompute = [0, 0]\n    prel = [0, 0]\n    val = 0\n    lval = 0\n    curr = 1\n    for i in range(1, 44):\n        if checkset(temp, i):\n            val += curr\n        precompute.append(val)\n        if checkset(l, i):\n            lval += curr\n        prel.append(lval)\n        curr *= 2\n    res = 0\n    myarr = [l]\n    for i in range(44, 0, -1):\n        a = checkset(x, i)\n        b = checkset(y, i)\n        c = checkset(r, i)\n        if c == 0:\n            continue\n        elif a == 0 and b == 0:\n            val = res + precompute[i]\n            if val < l:\n                temp = res + (precompute[i] | prel[i])\n                if temp < l:\n                    res = setKthBit(res, i - 1)\n                    continue\n                else:\n                    val = res + myfunc(precompute[i], prel[i], i, precompute)\n            myarr.append(val)\n            res = 0\n            break\n        elif a == 1 and b == 1:\n            res = setKthBit(res, i - 1)\n        else:\n            val = res + precompute[i]\n            if val < l:\n                temp = res + (precompute[i] | prel[i])\n                if temp < l:\n                    res = setKthBit(res, i - 1)\n                    continue\n                val = res + myfunc(precompute[i], prel[i], i, precompute)\n            myarr.append(val)\n            res = setKthBit(res, i - 1)\n    myarr.append(res)\n    ans = -1\n    res1 = l\n    for val in myarr:\n        if val >= l and val <= r:\n            a = x & val\n            b = y & val\n            cur = a * b\n            if cur > ans:\n                ans = cur\n                res1 = val\n            if cur == ans and val < res1:\n                res1 = val\n    return res1\nt = int(input())\nwhile t > 0:\n    x = input().split(' ')\n    a = int(x[0])\n    b = int(x[1])\n    l = int(x[2])\n    r = int(x[3])\n    print(func(a, b, l, r))\n    t -= 1"]