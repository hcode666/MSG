["from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "def solve(v):\n    dp[0] = 0\n    dp[1] = 10 ** 9\n    dp[2] = v[1] - v[0]\n    for i in range(3, len(v) + 1):\n        dp[i] = min(v[i - 1] - v[i - 2] + dp[i - 2], v[i - 1] - v[i - 3] + dp[i - 3])\n    return dp[len(v)]\ndp = [0 for i in range(10 ** 6 + 10)]\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    v = []\n    for i in range(n):\n        if ls[i] == 1:\n            v.append(i)\n    if len(v) == 0:\n        print(0)\n        continue\n    if len(v) == 1:\n        print(-1)\n        continue\n    ans = 10 ** 9\n    ans = min(ans, solve(v))\n    temp = v[0]\n    for i in range(len(v) - 1):\n        v[i] = v[i + 1] - (temp + 1)\n    v[-1] = n - 1\n    ans = min(ans, solve(v))\n    temp = v[0]\n    for i in range(len(v) - 1):\n        v[i] = v[i + 1] - (temp + 1)\n    v[-1] = n - 1\n    ans = min(ans, solve(v))\n    print(ans)", "def main():\n\n    def solve():\n        n = int(input())\n        aa = [int(a) for a in input().split()]\n        onepos = []\n        for (i, a) in enumerate(aa):\n            if a == 1:\n                onepos.append(i)\n        lo = len(onepos)\n        if lo == 0:\n            print(0)\n            return\n        if lo == 1:\n            print(-1)\n            return\n        costs = (0, n)\n        for i in range(1, lo):\n            costs = (costs[1], min(costs[0], costs[1]) + onepos[i] - onepos[i - 1])\n        c0 = costs[1]\n        costs = (0, n)\n        for i in range(2, lo + 1):\n            costs = (costs[1], min(costs[0], costs[1]) + (onepos[i % lo] - onepos[(i - 1) % lo]) % n)\n        c1 = costs[1]\n        costs = (0, n)\n        for i in range(3, lo + 2):\n            costs = (costs[1], min(costs[0], costs[1]) + (onepos[i % lo] - onepos[(i - 1) % lo]) % n)\n        c2 = costs[1]\n        print(min(c0, c1, c2))\n    q = int(input())\n    for _ in range(q):\n        solve()\nmain()", "def solve(ar):\n    dp = [0] + [9223372036854775807] + [0] * (len(ar) - 1)\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef cr(arr, ar):\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    (n, ls) = (int(input()), list(map(int, input().split())))\n    ar = cr(ls, [])\n    print(-len(ar)) if len(ar) == 0 or len(ar) == 1 else print(min((solve(ar), solve(cr(ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])], [])), solve(cr(ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])], [])))))", "def solve(ar):\n    dp = [0] + [9223372036854775807] + [0] * (len(ar) - 1)\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr, ar):\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    (n, ls) = (int(input()), list(map(int, input().split())))\n    ar = construct_arr(ls, [])\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        print(min((solve(ar), solve(construct_arr(ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])], [])), solve(construct_arr(ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])], [])))))", "def solve(ar):\n    dp = [0] + [9223372036854775807] + [0] * (len(ar) - 1)\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr, ar):\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    (n, ls) = (int(input()), list(map(int, input().split())))\n    ar = construct_arr(ls, [])\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1, [])), solve(construct_arr(temp2, [])))))", "def solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[1] = 9223372036854775807\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr, ar):\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    (n, ls) = (int(input()), list(map(int, input().split())))\n    ar = construct_arr(ls, [])\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1, [])), solve(construct_arr(temp2, [])))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr, ar):\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    (n, ls) = (int(input()), list(map(int, input().split())))\n    ar = construct_arr(ls, [])\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1, [])), solve(construct_arr(temp2, [])))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "from sys import maxsize\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))", "from sys import maxsize\nfrom copy import deepcopy\nfrom math import gcd\n\ndef leftRotate(arr, d):\n    n = len(arr)\n    d = d % n\n    g_c_d = gcd(d, n)\n    for i in range(g_c_d):\n        temp = arr[i]\n        j = i\n        while 1:\n            k = j + d\n            if k >= n:\n                k = k - n\n            if k == i:\n                break\n            arr[j] = arr[k]\n            j = k\n        arr[j] = temp\n\ndef solve(ar):\n    dp = [0] * (len(ar) + 1)\n    dp[0] = 0\n    dp[1] = maxsize\n    dp[2] = ar[1] - ar[0]\n    for i in range(3, len(ar) + 1):\n        dp[i] = min(dp[i - 2] + ar[i - 1] - ar[i - 2], dp[i - 3] + ar[i - 1] - ar[i - 3])\n    return dp[len(ar)]\n\ndef construct_arr(arr):\n    ar = []\n    for i in range(len(arr)):\n        if arr[i]:\n            ar.append(i)\n    return ar\nfor _ in range(int(input())):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    ar = construct_arr(ls)\n    if len(ar) == 0:\n        print(0)\n    elif len(ar) == 1:\n        print(-1)\n    else:\n        ans1 = solve(ar)\n        temp1 = ls[-(n - ar[-1]):] + ls[:-(n - ar[-1])]\n        temp2 = ls[-(n - ar[-2]):] + ls[:-(n - ar[-2])]\n        print(min((solve(ar), solve(construct_arr(temp1)), solve(construct_arr(temp2)))))"]