["t = int(input())\nm = 1000000007\nfor ijirj in range(t):\n    k = int(input())\n    print(5 * pow(2, k, m) % m)", "m = 1000000007\nfor _ in range(int(input())):\n    k = int(input())\n    print(5 * pow(2, k, m) % m)", "import math as mt\nimport heapq\nfrom functools import lru_cache\n\n@lru_cache(maxsize=1 << 20)\ndef modex(a, b, m):\n    r = 1\n    while b:\n        if b & 1:\n            r = r * a % m\n        b >>= 1\n        a = a * a % m\n    return r\nimport sys\nintinp = lambda : int(input())\n\ndef listinp(func=int):\n    return list(map(func, input().split()))\n\ndef nsepline(n, func=str):\n    return [func(input()) for _ in range(n)]\n\ndef printlist(li, glue=' '):\n    return glue.join(list(map(str, li)))\n\ndef fop(s, end='\\n'):\n    sys.stdout.write(str(s) + end)\n\ndef fip():\n    return sys.stdin.readline().strip()\nfintinp = lambda : int(fip())\n\ndef flistinp(func=int):\n    return list(map(func, fip().split()))\n\ndef fnsepline(n, func=str):\n    return [func(fip()) for _ in range(n)]\nntc = fintinp()\nmod = int(1000000000.0 + 7)\nfor _ in range(ntc):\n    k = fintinp()\n    fop(5 * modex(2, k, mod) % mod)", "MOD = 1000000007\n\ndef powmod(n, m):\n    pow2 = 2\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = result * pow2 % m\n        pow2 = pow2 * pow2 % m\n        n >>= 1\n    return result\nfor _ in range(int(input())):\n    k = int(input())\n    sol = powmod(k - 1, MOD)\n    print(sol * 10 % MOD)", "MOD = 1000000007\n\ndef powmod(n, m):\n    pow2 = 2\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = result * pow2 % m\n        pow2 = pow2 * pow2 % m\n        n >>= 1\n    return result\nfor _ in range(int(input())):\n    k = int(input())\n    sol = powmod(k - 1, MOD)\n    print(sol * 10 % MOD)", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    m = int(1000000000.0 + 7)\n    a = 10\n    r = 2\n    s = a * pow(r, k - 1, m)\n    ans = s % m\n    print(ans)", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    m = int(1000000000.0 + 7)\n    a = 10\n    r = 2\n    s = a * pow(r, k - 1, m)\n    ans = s % m\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    k = int(input())\n    m = int(1000000000.0 + 7)\n    a = 10\n    r = 2\n    t = a * pow(r, k - 1, m)\n    ans = t % m\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    k = int(input())\n    m = int(1000000000.0 + 7)\n    a = 10\n    r = 2\n    t = a * pow(r, k - 1, m)\n    ans = t % m\n    print(ans)", "from heapq import heapify, heappush, heappop\nfrom cmath import pi\nfrom distutils import extension\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil\nfrom collections import deque, defaultdict\nfrom tkinter.tix import Tree\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\nfor l in rg(ii()):\n    k = ii()\n    print(5 % mod * a_pwr_n(2, k, mod) % mod % mod)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    m = int(1000000000.0 + 7)\n    a = 10\n    r = 2\n    t = a * pow(r, k - 1, m)\n    ans = t % m\n    print(ans)", "def get_power(n, m, D):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n in D:\n        return D[n]\n    else:\n        D[n] = get_power(n // 2, m, D) % m * (get_power(n - n // 2, m, D) % m) % m\n        return D[n]\nT = int(input())\nans = []\nm = 10 ** 9 + 7\nfor _ in range(T):\n    K = int(input())\n    ans.append(get_power(K, m, {}) * 5 % m)\nfor i in ans:\n    print(i)", "def get_power(n, m, D):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    elif n in D:\n        return D[n]\n    else:\n        D[n] = get_power(n // 2, m, D) % m * (get_power(n - n // 2, m, D) % m) % m\n        return D[n]\nT = int(input())\nans = []\nm = 10 ** 9 + 7\nfor _ in range(T):\n    K = int(input())\n    ans.append(get_power(K, m, {}) * 5 % m)\nfor i in ans:\n    print(i)", "from sys import stdin\n\ndef szybkie_pot(p, w, m):\n    wynik = 1\n    while w > 0:\n        if w % 2:\n            wynik = wynik * p % m\n        w = w // 2\n        p = p * p % m\n    return wynik\nil_t = int(stdin.readline())\nfor i in range(il_t):\n    k = int(stdin.readline())\n    print(10 * szybkie_pot(2, k - 1, 1000000007) % 1000000007)", "import math\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    res = pow(2, k, 1000000007) * 5 % 1000000007\n    print(res)", "__author__ = 'Prateek'\n\ndef test():\n    k = int(input())\n    ans = pow(2, k - 1, int(10 ** 9 + 7)) * 10 % int(10 ** 9 + 7)\n    print(ans)\nif __author__ == 'Prateek':\n    t = int(input())\n    for _ in range(t):\n        test()", "def power(val, p, mod):\n    ans = 1\n    while p:\n        if p & 1:\n            ans = ans * val % mod\n        val = val * val % mod\n        p >>= 1\n    return ans\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    print(10 * power(2, k - 1, 1000000007) % 1000000007)", "t = int(input())\nfor _ in range(t):\n    K = int(input())\n    K -= 1\n    A = 2\n    B = 10\n    M = 10 ** 9 + 7\n    while K > 0:\n        if K % 2 != 0:\n            B = B * A % M\n            K -= 1\n        else:\n            A = A ** 2 % M\n            K //= 2\n    print(B)", "t = int(input())\nfor _ in range(t):\n    K = int(input())\n    K -= 1\n    A = 2\n    B = 10\n    M = 10 ** 9 + 7\n    while K > 0:\n        if K % 2 != 0:\n            B = B * A % M\n            K -= 1\n        else:\n            A = A ** 2 % M\n            K //= 2\n    print(B)", "def bigpow(n, p, m):\n    if p == 0:\n        return 1\n    elif p == 1:\n        return n\n    elif p % 2 == 0:\n        tmp = bigpow(n, p // 2, m)\n        return tmp * tmp % m\n    else:\n        return n * (bigpow(n, p - 1, m) % m) % m\ntc = int(input().strip())\nfor t in range(tc):\n    k = int(input().strip())\n    m = int(1000000000.0 + 7)\n    ans = 10 * bigpow(2, k - 1, m) % m\n    print(ans)", "T = input()\nt = int(T)\nans = []\nfor i in range(t):\n    K = input()\n    k = int(K)\n    ans.append(10 % (pow(10, 9) + 7) * pow(2, k - 1, pow(10, 9) + 7) % (pow(10, 9) + 7))\nfor i in range(t):\n    print(ans[i])", "from sys import stdin, stdout\n\ndef power(x, p):\n    res = 1\n    while p:\n        if p & 1:\n            res = res * x % 1000000007\n        x = x * x % 1000000007\n        p >>= 1\n    return res\nfor _ in range(int(stdin.readline())):\n    k = int(stdin.readline())\n    mod = 10 ** 9 + 7\n    result = 5 * power(2, k)\n    result = result % mod\n    print(result)", "m = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = 10 * pow(2, k - 1, m) % m\n    print(a)", "m = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    a = 10 * pow(2, k - 1, m) % m\n    print(a)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    K = int(input())\n    a = 10 * pow(2, K - 1, m) % m\n    print(a)", "for _ in range(int(input())):\n    k = int(input())\n    mod = 1000000007\n    print(10 * pow(2, k - 1, mod) % mod)", "try:\n    import sys\n\n    def power(x, p):\n        res = 1\n        while p:\n            if p & 1:\n                res = res * x % 1000000007\n            x = x * x % 1000000007\n            p >>= 1\n        return res\n    test = int(sys.stdin.readline())\n    for _test in range(test):\n        K = int(sys.stdin.readline())\n        answer = 5 * power(2, K) % 1000000007\n        print(answer)\nexcept:\n    pass", "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    a = 10\n    r = 2\n    k = int(input())\n    print(a * power(r, k - 1, 10 ** 9 + 7) % (10 ** 9 + 7))", "c = 10 ** 9 + 7\n\ndef exponentMod(a, b):\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    y = 0\n    if b % 2 == 0:\n        y = exponentMod(a, b // 2)\n        y = y * y % c\n    else:\n        y = a % c\n        y = y * exponentMod(a, b - 1) % c % c\n    return (y + c) % c\nfor _ in range(int(input())):\n    n = int(input())\n    a = 2\n    b = n - 1\n    val = exponentMod(a, b)\n    print(val * 10 % c)", "c = 10 ** 9 + 7\n\ndef exponentMod(a, b):\n    if a == 0:\n        return 0\n    if b == 0:\n        return 1\n    y = 0\n    if b % 2 == 0:\n        y = exponentMod(a, b // 2)\n        y = y * y % c\n    else:\n        y = a % c\n        y = y * exponentMod(a, b - 1) % c % c\n    return (y + c) % c\nfor _ in range(int(input())):\n    n = int(input())\n    a = 2\n    b = n - 1\n    val = exponentMod(a, b)\n    print(val * 10 % c)", "mod = 1000000000 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    a = 10 * pow(2, n - 1, mod)\n    print(a % mod)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    k = int(input())\n    ans = 5 * pow(2, k, mod) % mod\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    m = int(1000000000.0 + 7)\n    a = 10\n    r = 2\n    t = a * pow(r, k - 1, m)\n    ans = t % m\n    print(ans)", "MOD = 1000000007\n\ndef fast_power(base, power):\n    if power == 0:\n        return 1\n    temp = fast_power(base, power // 2)\n    if power % 2 == 0:\n        return temp * temp % MOD\n    else:\n        return base * temp * temp % MOD\nfor i in range(int(input())):\n    K = int(input())\n    if K == 1:\n        print(10)\n    elif K == 2:\n        print(20)\n    else:\n        t = fast_power(2, K - 3)\n        print(40 * t % MOD)", "mod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    print(10 * pow(2, k - 1, mod) % mod)", "t = int(input())\na = 10 ** 9 + 7\n\ndef fun(n, k, a):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return n\n    else:\n        x = fun(n, int(k / 2), a)\n        if k % 2 == 0:\n            return x % a * (x % a) % a\n        else:\n            return x % a * (x % a) * (n % a) % a\nfor i in range(t):\n    n = int(input())\n    x = fun(2, n, a)\n    x = 5 * x % a\n    print(x)", "t = int(input())\nmod = 10 ** 9 + 7\n\ndef fun(x, p):\n    ret = 1\n    while p:\n        if p & 1:\n            ret = ret * x % mod\n        x = x * x % mod\n        p >>= 1\n    return ret\nfor i in range(t):\n    n = int(input())\n    x = fun(2, n)\n    x = 5 * x % mod\n    print(x)", "mod = 1000000007\nt = int(input())\nwhile t > 0:\n    k = int(input())\n    print(10 * pow(2, k - 1, mod) % mod)\n    t = t - 1", "t = int(input())\nwhile t != 0:\n    k = int(input())\n    f = pow(2, k - 1, 1000000007)\n    f = f * 10 % 1000000007\n    print(f)\n    t -= 1", "for _ in range(int(input())):\n    k = int(input())\n    mod = 1000000007\n    print(10 * pow(2, k - 1, mod) % mod)", "m = 10 ** 9 + 7\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    print(5 * pow(2, k, m) % m)", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    p = pow(2, n - 1, 1000000007)\n    p = p * 10\n    p = p % 1000000007\n    print(p)\n    t = t - 1", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    p = pow(2, n - 1, 1000000007) * 10\n    p = p % 1000000007\n    print(p)\n    t = t - 1", "mod = 10 ** 9 + 7\nfor t in range(int(input())):\n    n = int(input())\n    print(pow(2, n - 1, mod) * 10 % mod)", "mod = 10 ** 9 + 7\n\ndef power(x, p):\n    ans = 1\n    while p:\n        if p & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        p >>= 1\n    return ans\nfor z in range(int(input())):\n    k = int(input())\n    ans = 10 * power(2, k - 1) % mod\n    print(ans)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nt = int(input())\nmod = 10 ** 9 + 7\nfor i in range(t):\n    k = int(input())\n    print(10 * power(2, k - 1, mod) % mod)", "def Modular(x, n, m):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        y = Modular(x, n / 2, m)\n        return y * y % m\n    else:\n        return x % m * Modular(x, n - 1, m) % m\ntest = int(input())\nr = 2\na = 10\nfor i in range(test):\n    n = int(input())\n    ans = 10 % (10 ** 9 + 7) * Modular(r, n - 1, 10 ** 9 + 7) % (10 ** 9 + 7)\n    print(ans)", "T = int(input())\nwhile T:\n    K = int(input())\n    print(10 * pow(2, K - 1, 1000000007) % 1000000007)\n    T -= 1", "for t in range(int(input())):\n    k = int(input())\n    num = 10\n    d = pow(2, k - 1, 1000000007)\n    print(10 * d % 1000000007)", "p = int(1000000000.0 + 7)\n\ndef moduloMultiplication(a, b, mod):\n    res = 0\n    a = a % mod\n    while b:\n        if b & 1:\n            res = (res + a) % mod\n        a = 2 * a % mod\n        b >>= 1\n    return res\nt = int(input())\nwhile t:\n    k = int(input())\n    ans = moduloMultiplication(10, pow(2, k - 1, p), p)\n    print(ans)\n    t -= 1", "MOD = 10 ** 9 + 7\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(10 * pow(2, n - 1, MOD) % MOD)\n    t -= 1", "import math\nmod = 10 ** 9 + 7\nfor i in range(int(input())):\n    k = int(input())\n    print(5 * pow(2, k, mod) % mod)", "for _ in range(int(input())):\n    x = int(input())\n    print(5 * pow(2, x, 10 ** 9 + 7) % (10 ** 9 + 7))", "for _ in range(int(input())):\n    x = int(input())\n    print(5 * pow(2, x, 10 ** 9 + 7) % (10 ** 9 + 7))", "mod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    re = pow(2, k, mod)\n    re = re * 5\n    re = re % mod\n    print(re)", "for _ in range(int(input())):\n    k = int(input())\n    x = 10 * pow(2, k - 1, 1000000007)\n    print(x % 1000000007)", "mod = 1000000007\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    a = pow(2, k - 1, mod)\n    b = 10 * a % mod\n    print(b)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    mod = 1000000007\n    ans = pow(2, k - 1, mod)\n    ans = ans * 10\n    ans = ans % 1000000007\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    mod = 1000000007\n    ans = pow(2, k - 1, mod)\n    ans = ans * 10\n    ans = ans % 1000000007\n    print(ans)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    k = int(input())\n    ans = 5 * pow(2, k, mod) % mod\n    print(ans)", "mod = 1000000007\n\ndef pw(x, y):\n    ans = 1\n    while y:\n        if y & 1:\n            ans = ans * x % mod\n        x = x * x % mod\n        y = y // 2\n    return ans\nt = int(input())\nwhile t:\n    n = int(input())\n    print(10 * pw(2, n - 1) % mod)\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    n = 1000000007\n    m = int(input())\n    r = pow(2, m, n)\n    r = r * 5 % n\n    print(r)\n    t = t - 1", "from sys import stdin, stdout\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nt = int(stdin.readline())\nAllInp = stdin.readlines()\nA = []\nfor Inp in AllInp:\n    k = int(Inp)\n    A.append(str(10 * power(2, k - 1, 10 ** 9 + 7) % (10 ** 9 + 7)))\nprint('\\n'.join(A))", "T = int(input())\nfor qweqww in range(T):\n    k = int(input())\n    an = pow(2, k - 1, 10 ** 9 + 7)\n    an = an * 10\n    an = an % (10 ** 9 + 7)\n    print(an)", "T = int(input())\nfor qweqww in range(T):\n    k = int(input())\n    an = pow(2, k - 1, 10 ** 9 + 7)\n    an = an * 10\n    an = an % (10 ** 9 + 7)\n    print(an)", "t = int(input())\nm = 1000000007\nfor i in range(0, t):\n    n = int(input())\n    print(pow(2, n - 1, m) * 10 % m)", "import sys\nM = int(1000000000.0) + 7\nfor i in range(int(sys.stdin.readline())):\n    k = int(sys.stdin.readline())\n    ans = 5 * pow(2, k, M) % M\n    print(ans)", "import sys\nM = 1000000007\n\ndef pow_mod(x, y):\n    n = 1\n    while y:\n        if y & 1:\n            n = n * x % M\n        x = x * x % M\n        y >>= 1\n    return n\nfor i in range(int(sys.stdin.readline())):\n    k = int(sys.stdin.readline())\n    ans = 5 * pow_mod(2, k) % M\n    print(ans)", "[print(pow(2, int(input()) - 1, 1000000007) * 10 % 1000000007) for _ in range(int(input()))]", "[print(pow(2, int(input()) - 1, 1000000007) * 10 % 1000000007) for _ in range(int(input()))]", "T = int(input())\nwhile T:\n    K = int(input())\n    m = 1000000007\n    res = 5 * pow(2, K, m)\n    res = res % m\n    print(res)\n    T -= 1", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    m = 1000000007\n    ans = 5 * pow(2, x, m)\n    ans = ans % m\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    MOD = 1000000007\n\n    def powerLL(x, n):\n        result = 1\n        while n:\n            if n & 1:\n                result = result * x % MOD\n            n = int(n / 2)\n            x = x * x % MOD\n        return result\n    sa = 2\n    k = int(input())\n    k = k - 1\n    sb = int(k)\n    result = 10 % MOD * powerLL(sa, sb) % MOD\n    print(result)", "mod = 10 ** 9 + 7\n\ndef fun(x, y):\n    m = 1\n    a = 1\n    while y > 0:\n        if y & m == 1:\n            a = a * x\n        y = y >> 1\n        x = x % 1000000007 * (x % 1000000007) % 1000000007\n    return a % mod\nt = int(input())\nwhile t:\n    n = int(input())\n    a = 10\n    r = 2\n    print(a % mod * fun(2, n - 1) % mod % mod)\n    t -= 1", "def power(x, y):\n    s = 1\n    while y:\n        if y & 1:\n            s = s * x % k\n        y >>= 1\n        x = x * x % k\n    return s % k\nt = int(input())\nk = 1000000007\nwhile t:\n    t -= 1\n    n = int(input())\n    ans = power(2, n - 1) * 10\n    print(int(ans % k))", "l = int(input())\nfor x in range(l):\n    a = int(input())\n    print(10 * pow(2, a - 1, int(1000000000.0 + 7)) % int(1000000000.0 + 7))", "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nt = int(input())\nfor x in range(t):\n    k = int(input())\n    val = power(2, k - 1, 1000000007) * 10\n    val = val % 1000000007\n    print(val)", "def intpow(base, exp):\n    if exp == 0:\n        return 1\n    elif exp == 1:\n        return base\n    elif exp & 1 != 0:\n        return base * intpow(base * base % 1000000007, exp >> 1) % 1000000007\n    else:\n        return intpow(base * base % 1000000007, exp >> 1) % 1000000007\nmod = 1000000007\nT = int(input())\nfor _t in range(T):\n    K = int(input())\n    answer = 5 * intpow(2, K) % mod\n    print(answer)", "def pw(x, p):\n    ret = 1\n    while p:\n        if p & 1:\n            ret = ret * x % mod\n        x = x * x % mod\n        p >>= 1\n    return ret\nmod = 1000000007\nT = int(input())\nfor _t in range(T):\n    K = int(input())\n    answer = 5 * pw(2, K) % mod\n    print(answer)", "m = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    k = int(input())\n    x = 2\n    res = 10\n    a = res * pow(x, k - 1, m)\n    t = a % m\n    print(t)", "[print(10 * pow(2, int(input()) - 1, int(1000000000.0 + 7)) % int(1000000000.0 + 7)) for i in range(int(input()))]", "mod = int(1000000000.0 + 7)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ans = 10 * pow(2, n - 1, mod) % mod\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    mod = 10 ** 9 + 7\n    print(10 * pow(2, n - 1, mod) % mod)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = int(1000000000.0 + 7)\n    t = 5 * pow(2, n, m)\n    a = t % 1000000007\n    print(a)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = int(1000000000.0 + 7)\n    t = 5 * pow(2, n, m)\n    a = t % m\n    print(a)", "def power(x, p):\n    ret = 1\n    while p:\n        if p & 1:\n            ret = ret * x % 1000000007\n        x = x * x % 1000000007\n        p >>= 1\n    return ret\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(10 * power(2, n - 1) % 1000000007)", "while True:\n    try:\n        T = int(input())\n        for i in range(T):\n            K = int(input())\n            a = pow(2, K - 1, 1000000007)\n            print(a * 10 % 1000000007)\n    except EOFError:\n        break", "p = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    r = pow(2, k - 1, p)\n    print(r * 10 % p)", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    m = int(1000000000.0 + 7)\n    a = 10\n    r = 2\n    t = a * pow(r, k - 1, m)\n    ans = t % m\n    print(ans)", "p = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n1 = int(input()) - 1\n    k = pow(2, n1, p)\n    print(10 * k % p)", "p = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    n1 = int(input()) - 1\n    k = pow(2, n1, p)\n    print(10 * k % p)", "tests = int(input())\nmod_num = 1000000007\n\ndef get_power_of_two(power):\n    res = 1\n    x = 2\n    while power > 0:\n        if power & 1 == 1:\n            res = res * x % mod_num\n        power = power >> 1\n        x = x * x % mod_num\n    return res\nfor _ in range(tests):\n    K = int(input())\n    print('{}'.format(10 * get_power_of_two(K - 1) % mod_num))", "def power(x, y, mod):\n    res = 1\n    x = x % mod\n    while y > 0:\n        if y & 1:\n            res = res * x % mod\n        y = y >> 1\n        x = x * x % mod\n    return res\nT = int(input())\nfor x in range(T):\n    k = int(input())\n    b = str(k - 1)\n    remainderB = 0\n    MOD = 1000000007\n    for i in range(len(b)):\n        remainderB = (remainderB * 10 + int(b[i])) % (MOD - 1)\n    ans = power(2, remainderB, MOD) * 10\n    print(ans % MOD)", "def power(x, y):\n    if y == 0:\n        return 1\n    temp = power(x, y // 2)\n    if y % 2 == 0:\n        return temp * temp % 1000000007\n    else:\n        return x * temp * temp % 1000000007\nt = int(input())\nans = []\nfor j in range(t):\n    k = int(input())\n    c = 10 * power(2, k - 1)\n    ans.append(c)\nfor i in range(len(ans)):\n    print(ans[i] % 1000000007)", "t = int(input())\nM = 10 ** 9 + 7\nfor _ in range(t):\n    k = int(input())\n    n = pow(2, k, M)\n    n = n * 5 % M\n    print(n)", "t = int(input())\nfor tt in range(t):\n    num = int(input())\n    print(10 * pow(2, num - 1, 10 ** 9 + 7) % (10 ** 9 + 7))", "t = int(input())\nfor _ in range(t):\n    k = int(input())\n    m = int(1000000000.0 + 7)\n    print(10 * pow(2, k - 1, m) % m)"]