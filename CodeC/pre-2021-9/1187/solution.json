["for _ in range(int(input())):\n    (k, Q) = map(int, input().split())\n    lis1 = list(map(int, input().split()))\n    lis2 = list(map(int, input().split()))\n    lis1.sort()\n    lis2.sort()\n    lis = []\n    for i in range(min(k, 10001)):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            lis.append(lis1[i] + lis2[j])\n    lis.sort()\n    while Q > 0:\n        pos = int(input())\n        print(lis[pos - 1])\n        Q -= 1", "for _ in range(int(input())):\n    (k, Q) = map(int, input().split())\n    lis1 = list(map(int, input().split()))\n    lis2 = list(map(int, input().split()))\n    lis1.sort()\n    lis2.sort()\n    lis = []\n    for i in range(min(k, 10001)):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            lis.append(lis1[i] + lis2[j])\n    lis.sort()\n    while Q > 0:\n        pos = int(input())\n        print(lis[pos - 1])\n        Q -= 1", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    l = []\n    for i in range(min(n, 1001)):\n        for j in range(min(n, 1001)):\n            l.append(l1[i] + l2[j])\n    l.sort()\n    for i in range(q):\n        k = int(input())\n        print(l[k - 1])", "from heapq import heapify as heap, heappush as push, heappop as pop\n\ndef pre_compute(k, mov, sat):\n    result = []\n    arr = []\n    mov.sort()\n    sat.sort()\n    for i in range(k):\n        end = min(k, 10001 // (i + 1))\n        for j in range(end):\n            push(arr, mov[i] + sat[j])\n    c = 10000\n    while bool(arr) and c != 0:\n        result.append(pop(arr))\n        c -= 1\n    return result\nt = int(input())\nfor _ in range(t):\n    (k, q) = list(map(int, input().split()))\n    mov = list(map(int, input().split()))\n    sat = list(map(int, input().split()))\n    arr = pre_compute(k, mov, sat)\n    for _ in range(q):\n        ith = int(input())\n        print(arr[ith - 1])", "from heapq import heapify as heap, heappush as push, heappop as pop\n\ndef pre_compute(k, mov, sat):\n    arr = []\n    mov.sort()\n    sat.sort()\n    for i in range(k):\n        end = min(k, 10001 // (i + 1))\n        for j in range(end):\n            arr.append(mov[i] + sat[j])\n    arr.sort()\n    return arr\nt = int(input())\nfor _ in range(t):\n    (k, q) = list(map(int, input().split()))\n    mov = list(map(int, input().split()))\n    sat = list(map(int, input().split()))\n    arr = pre_compute(k, mov, sat)\n    for _ in range(q):\n        ith = int(input())\n        print(arr[ith - 1])", "from heapq import heapify as heap, heappush as push, heappop as pop\n\ndef pre_compute(k, mov, sat):\n    arr = []\n    for i in range(k):\n        end = min(k, 10001 // (i + 1))\n        for j in range(end):\n            arr.append(mov[i] + sat[j])\n    arr.sort()\n    return arr\nt = int(input())\nfor _ in range(t):\n    (k, q) = list(map(int, input().split()))\n    mov = sorted(list(map(int, input().split())))\n    sat = sorted(list(map(int, input().split())))\n    arr = pre_compute(k, mov, sat)\n    for _ in range(q):\n        ith = int(input())\n        print(arr[ith - 1])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    ls = list()\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            ls.append(a[i] + b[j])\n    ls.sort()\n    for i in range(m):\n        print(ls[int(input()) - 1])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    ls = list()\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            ls.append(a[i] + b[j])\n    ls.sort()\n    for i in range(m):\n        print(ls[int(input()) - 1])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    ls = list()\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            ls.append(a[i] + b[j])\n    ls.sort()\n    for i in range(m):\n        print(ls[int(input()) - 1])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    ls = list()\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            ls.append(a[i] + b[j])\n    ls.sort()\n    for i in range(m):\n        print(ls[int(input()) - 1])", "from heapq import heapify, heappush, heappop\nfor _ in range(int(input())):\n    (k, Q) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    s = []\n    li = []\n    for i in range(k):\n        for j in range(min(k, 10000 // (i + 1))):\n            s.append(a[i] + b[j])\n    heapify(s)\n    for i in range(len(s)):\n        li.append(heappop(s))\n    for i in range(Q):\n        q = int(input())\n        print(li[q - 1])", "x = int(input())\nfor i in range(x):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "x = int(input())\nfor i in range(x):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        m = min(n, 10001 // (i + 1))\n        for j in range(m):\n            ans.append(s[i] + a[j])\n    ans.sort()\n    for i in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "for t in range(int(input())):\n    (k, q) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    brr = list(map(int, input().split()))\n    arr.sort()\n    brr.sort()\n    qrr = []\n    for i in range(q):\n        qrr.append(int(input()))\n    sums = []\n    for i in range(min(k, 10001)):\n        for j in range(min(k, 10001 // (i + 1))):\n            sums.append(arr[i] + brr[j])\n    sums.sort()\n    for i in qrr:\n        print(sums[i - 1])", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    f = list(map(int, input().split()))\n    f.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    ans = []\n    for i in range(min(n, 10001)):\n        minN = min(n, 10001 // (i + 1))\n        for j in range(minN):\n            ans.append(s[i] + f[j])\n    ans.sort()\n    for _ in range(k):\n        print(ans[int(input()) - 1])", "def in1():\n    return int(input())\nfor _ in range(in1()):\n    (k, q) = map(int, input().split())\n    arr1 = list(map(int, input().split()))\n    arr2 = list(map(int, input().split()))\n    arr1.sort()\n    arr2.sort()\n    ans = []\n    for i in range(min(k, 10001)):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            ans.append(arr1[i] + arr2[j])\n    ans.sort()\n    for qu in range(q):\n        query = int(input())\n        print(ans[query - 1])", "t = int(input())\nfor _ in range(t):\n    (k, q) = map(int, input().split())\n    motivation = sorted(list(map(int, input().split())))\n    satisfaction = sorted(list(map(int, input().split())))\n    ans = []\n    for i in range(min(len(motivation), 10000)):\n        for j in range(min(len(satisfaction), 10000 // (i + 1))):\n            ans.append(motivation[i] + satisfaction[j])\n    ans.sort()\n    for _ in range(q):\n        query = int(input())\n        print(ans[query - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    s = []\n    for i in range(k):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            s.append(l1[i] + l2[j])\n    s.sort()\n    for x in range(q):\n        i = int(input())\n        print(s[i - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    s = []\n    for i in range(k):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            s.append(l1[i] + l2[j])\n    s.sort()\n    for x in range(q):\n        i = int(input())\n        print(s[i - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    s = []\n    for i in range(k):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            s.append(l1[i] + l2[j])\n    s.sort()\n    for x in range(q):\n        i = int(input())\n        print(s[i - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    s = []\n    for i in range(k):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            s.append(l1[i] + l2[j])\n    s.sort()\n    for x in range(q):\n        i = int(input())\n        print(s[i - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    s = []\n    for i in range(k):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            s.append(l1[i] + l2[j])\n    s.sort()\n    for x in range(q):\n        i = int(input())\n        print(s[i - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    arr = []\n    for i in range(min(10001, k)):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(min(10001, nn)):\n            arr.append(a[i] + b[j])\n    arr.sort()\n    for k in range(q):\n        query = int(input())\n        print(arr[query - 1])", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    m = list(map(int, input().split()))\n    m.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    d = []\n    for i in range(n):\n        b = min(n, 10001 // (i + 1))\n        for j in range(b):\n            d.append(m[i] + s[j])\n    d.sort()\n    for i in range(q):\n        c = int(input())\n        print(d[c - 1])", "t = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    m = list(map(int, input().split()))\n    m.sort()\n    s = list(map(int, input().split()))\n    s.sort()\n    d = []\n    for i in range(n):\n        b = min(n, 10001 // (i + 1))\n        for j in range(b):\n            d.append(m[i] + s[j])\n    d.sort()\n    for i in range(q):\n        c = int(input())\n        print(d[c - 1])", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    ml = list(map(int, input().split()))\n    ml.sort()\n    sl = list(map(int, input().split()))\n    sl.sort()\n    summ = []\n    for i in range(min(n, 10001)):\n        nn = min(n, 10001 // (i + 1))\n        for j in range(nn):\n            summ.append(sl[i] + ml[j])\n    summ.sort()\n    for i in range(k):\n        q = int(input())\n        print(summ[q - 1])", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    ml = list(map(int, input().split()))\n    ml.sort()\n    sl = list(map(int, input().split()))\n    sl.sort()\n    summ = []\n    for i in range(min(n, 10001)):\n        nn = min(n, 10001 // (i + 1))\n        for j in range(nn):\n            summ.append(sl[i] + ml[j])\n    summ.sort()\n    for i in range(k):\n        q = int(input())\n        print(summ[q - 1])", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    ml = list(map(int, input().split()))\n    ml.sort()\n    sl = list(map(int, input().split()))\n    sl.sort()\n    summ = []\n    for i in range(n):\n        nn = min(n, 10001 // (i + 1))\n        for j in range(nn):\n            summ.append(sl[i] + ml[j])\n    summ.sort()\n    for i in range(k):\n        q = int(input())\n        print(summ[q - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    s = []\n    for i in range(k):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            s.append(l1[i] + l2[j])\n    s.sort()\n    for x in range(q):\n        i = int(input())\n        print(s[i - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    s = []\n    for i in range(k):\n        nn = min(k, 10001 // (i + 1))\n        for j in range(nn):\n            s.append(l1[i] + l2[j])\n    s.sort()\n    for x in range(q):\n        i = int(input())\n        print(s[i - 1])", "from heapq import heapify, heappush, heappop\nfor _ in range(int(input())):\n    (k, Q) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    s = []\n    li = []\n    for i in range(k):\n        for j in range(min(k, 10000 // (i + 1))):\n            s.append(a[i] + b[j])\n    heapify(s)\n    for i in range(len(s)):\n        li.append(heappop(s))\n    for i in range(Q):\n        q = int(input())\n        print(li[q - 1])", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    ml = list(map(int, input().split()))\n    ml.sort()\n    sl = list(map(int, input().split()))\n    sl.sort()\n    summ = []\n    for i in range(n):\n        nn = min(n, 10001 // (i + 1))\n        for j in range(nn):\n            summ.append(sl[i] + ml[j])\n    summ.sort()\n    for i in range(k):\n        q = int(input())\n        print(summ[q - 1])", "for _ in range(int(input())):\n    (k, q) = map(int, input().split())\n    l = sorted(list(map(int, input().split())))\n    l1 = sorted(list(map(int, input().split())))\n    a = []\n    b = []\n    for i in range(k):\n        m = min(k, 10001 // (i + 1))\n        for j in range(m):\n            b.append(l[i] + l1[j])\n    b.sort()\n    for i in range(q):\n        query = int(input())\n        print(b[query - 1])", "from sys import stdin\ninput = stdin.readline\nimport heapq\n\ndef answer():\n    ans = []\n    for i in range(n):\n        for j in range(min(n, 10000 // (i + 1))):\n            ans.append(a[i] + b[j])\n    ans.sort()\n    for x in range(q):\n        ind = int(input())\n        print(ans[ind - 1])\nfor T in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    answer()", "tc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    ml = list(map(int, input().split()))\n    ml.sort()\n    sl = list(map(int, input().split()))\n    sl.sort()\n    summ = []\n    for i in range(n):\n        nn = min(n, 10001 // (i + 1))\n        for j in range(nn):\n            summ.append(sl[i] + ml[j])\n    summ.sort()\n    for i in range(k):\n        q = int(input())\n        print(summ[q - 1])", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ml = list(map(int, input().split()))\n    ml.sort()\n    sl = list(map(int, input().split()))\n    sl.sort()\n    summ = []\n    for i in range(n):\n        nn = min(n, 10001 // (i + 1))\n        for j in range(nn):\n            summ.append(sl[i] + ml[j])\n    summ.sort()\n    for i in range(k):\n        q = int(input())\n        print(summ[q - 1])", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    ml = sorted(list(map(int, input().split())))\n    sl = sorted(list(map(int, input().split())))\n    summ = []\n    for i in range(n):\n        nn = min(n, 10001 // (i + 1))\n        for j in range(nn):\n            summ.append(sl[i] + ml[j])\n    summ.sort()\n    for i in range(k):\n        q = int(input())\n        print(summ[q - 1])", "try:\n    for _ in range(int(input())):\n        (K, Q) = map(int, input().split())\n        m = list(map(int, input().split()))\n        s = list(map(int, input().split()))\n        m.sort()\n        s.sort()\n        Q_list = []\n        memory = []\n        total = 0\n        for __ in range(Q):\n            Q_list.append(int(input()))\n        for l in range(1, len(s) + 1):\n            for j in range(min(len(s), 10001 // l)):\n                memory.append(m[l - 1] + s[j])\n        memory.sort()\n        for i in range(len(Q_list)):\n            print(memory[Q_list[i] - 1])\nexcept:\n    pass", "def nSmall():\n    l = []\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            l.append(a[i] + b[j])\n    return l\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    arr = sorted(nSmall())\n    for _ in range(q):\n        print(arr[int(input()) - 1])", "from queue import PriorityQueue\nfor __ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    A.sort()\n    B.sort()\n    qarr = []\n    for i in range(Q):\n        qarr.append(int(input()))\n    maxQ = max(qarr)\n    pq = PriorityQueue()\n    for i in range(N):\n        pq.put((A[i] + B[0], i, 0))\n    ans = [0] * (maxQ + 1)\n    for i in range(1, maxQ + 1):\n        temp = pq.get()\n        ans[i] = temp[0]\n        if temp[2] + 1 < N:\n            pq.put((A[temp[1]] + B[temp[2] + 1], temp[1], temp[2] + 1))\n    for i in range(Q):\n        print(ans[qarr[i]])", "class BinHeap:\n\n    def __init__(self):\n        self.heaplist = [0]\n        self.currentSize = 0\n\n    def percUp(self, i):\n        while i // 2 > 0:\n            if self.heaplist[i][0] < self.heaplist[i // 2][0]:\n                tmp = self.heaplist[i // 2]\n                self.heaplist[i // 2] = self.heaplist[i]\n                self.heaplist[i] = tmp\n            i = i // 2\n\n    def insert(self, k):\n        self.heaplist.append(k)\n        self.currentSize = self.currentSize + 1\n        self.percUp(self.currentSize)\n\n    def percDown(self, i):\n        while i * 2 <= self.currentSize:\n            mc = self.minChild(i)\n            if self.heaplist[i][0] > self.heaplist[mc][0]:\n                tmp = self.heaplist[i]\n                self.heaplist[i] = self.heaplist[mc]\n                self.heaplist[mc] = tmp\n            i = mc\n\n    def minChild(self, i):\n        if i * 2 + 1 > self.currentSize:\n            return i * 2\n        elif self.heaplist[i * 2][0] < self.heaplist[i * 2 + 1][0]:\n            return i * 2\n        else:\n            return i * 2 + 1\n\n    def delMin(self):\n        retval = self.heaplist[1]\n        self.heaplist[1] = self.heaplist[self.currentSize]\n        self.currentSize = self.currentSize - 1\n        self.heaplist.pop()\n        self.percDown(1)\n        return retval\n\n    def buildHeap(self, alist):\n        i = len(alist) // 2\n        self.currentSize = len(alist)\n        self.heaplist = [0] + alist[:]\n        while i > 0:\n            self.percDown(i)\n            i = i - 1\nfor _ in range(int(input().strip())):\n    (k, q) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    a.sort()\n    b = list(map(int, input().strip().split()))\n    b.sort()\n    queries = [int(input().strip()) for i in range(q)]\n    max_query = max(queries)\n    ptr = [0 for i in range(k)]\n    list_of_sums = [(a[i] + b[ptr[i]], i) for i in range(k)]\n    bh = BinHeap()\n    bh.buildHeap(list_of_sums)\n    answer = [-1 for i in range(max_query + 1)]\n    for i in range(1, max_query + 1):\n        (ans, idx) = bh.delMin()\n        ptr[idx] += 1\n        answer[i] = ans\n        if ptr[idx] < k:\n            bh.insert((a[idx] + b[ptr[idx]], idx))\n    for query in queries:\n        print(answer[query])", "t = int(input())\nfor i in range(0, t):\n    (K, Q) = [int(x) for x in input().split()]\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    sum = []\n    for i in range(K):\n        end = min(K, 10001 // (i + 1))\n        for j in range(end):\n            sum.append(l1[i] + l2[j])\n    sum.sort()\n    for i in range(Q):\n        print(sum[int(input()) - 1])", "for t in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    l3 = []\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            l3.append(l1[i] + l2[j])\n    l3.sort()\n    for i in range(q):\n        print(l3[int(input()) - 1])", "for t in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    l3 = []\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            l3.append(l1[i] + l2[j])\n    l3.sort()\n    for i in range(q):\n        print(l3[int(input()) - 1])", "for t in range(int(input())):\n    (n, q) = list(map(int, input().split()))\n    l1 = sorted(list(map(int, input().split())))\n    l2 = sorted(list(map(int, input().split())))\n    l3 = []\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            l3.append(l1[i] + l2[j])\n    l3.sort()\n    for i in range(q):\n        print(l3[int(input()) - 1])", "for i in range(int(input())):\n    (k, q) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    sumlist = []\n    for j in range(k):\n        end = min(k, 10001 // (j + 1))\n        for l in range(end):\n            sumlist.append(a[j] + b[l])\n    sumlist.sort()\n    for s in range(q):\n        print(sumlist[int(input()) - 1])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = sorted(list(map(int, input().split())))\n    B = sorted(list(map(int, input().split())))\n    ls = list()\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            ls.append(A[i] + B[j])\n    ls.sort()\n    for i in range(m):\n        print(ls[int(input()) - 1])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    Z = []\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            Z.append(a[i] + b[j])\n    Z.sort()\n    for i in range(m):\n        print(Z[int(input()) - 1])", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    b = sorted(list(map(int, input().split())))\n    ls = list()\n    for i in range(n):\n        end = min(n, 10001 // (i + 1))\n        for j in range(end):\n            ls.append(a[i] + b[j])\n    ls.sort()\n    for i in range(m):\n        print(ls[int(input()) - 1])", "import heapq\n\ndef get_ind(c, n):\n    lo = 0\n    hi = len(c) - 1\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if c[mid] >= n:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\nfor z in range(int(input())):\n    (k, qu) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.sort()\n    b.sort()\n    c = [0 for i in range(k)]\n    candi = [(a[i] + b[c[i]], i) for i in range(k)]\n    heapq.heapify(candi)\n    min_ar = []\n    for i in range(min(10000, k * k)):\n        ans = heapq.heappop(candi)\n        min_ar.append(ans[0])\n        if c[ans[1]] < k - 1:\n            c[ans[1]] += 1\n            heapq.heappush(candi, (a[ans[1]] + b[c[ans[1]]], ans[1]))\n    for p in range(qu):\n        n = int(input())\n        print(min_ar[n - 1])", "import heapq\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    A = [int(i) for i in input().split()]\n    B = [int(i) for i in input().split()]\n    A.sort()\n    B.sort()\n    qry = [int(input()) for i in range(q)]\n    leftb = [0] * n\n    l = [[A[i] + B[0], i] for i in range(n)]\n    heapq.heapify(l)\n    m = max(qry)\n    ans = [0] * (m + 2)\n    z = 0\n    for i in range(1, m + 1):\n        a = heapq.heappop(l)\n        ans[z] = a[0]\n        z += 1\n        bind = a[1]\n        leftb[bind] += 1\n        if leftb[bind] != n and bind != n:\n            heapq.heappush(l, [A[bind] + B[leftb[bind]], bind])\n    for i in qry:\n        print(ans[i - 1])", "import heapq\nraw_input = input\nfor _ in range(int(raw_input())):\n    (k, q) = map(int, raw_input().split())\n    A = sorted([int(x) for x in raw_input().split()])\n    B = sorted([int(x) for x in raw_input().split()])\n    query = [int(raw_input()) for i in range(q)]\n    maxi = max(query)\n    left = [0] * k\n    L = [(A[i] + B[0], i) for i in range(k)]\n    heapq.heapify(L)\n    ans = [None] * (maxi + 1)\n    for i in range(1, maxi + 1):\n        (temp, idx) = heapq.heappop(L)\n        ans[i] = temp\n        left[idx] += 1\n        if left[idx] < k:\n            heapq.heappush(L, (A[idx] + B[left[idx]], idx))\n    for i in query:\n        print(ans[i])", "import heapq\nfor _ in range(int(input().strip())):\n    (k, q) = map(int, input().strip().split())\n    l1 = list(map(int, input().strip().split()))\n    l1.sort()\n    l2 = list(map(int, input().strip().split()))\n    l2.sort()\n    lq = []\n    for i in range(q):\n        lq.append(int(input().strip()))\n    q_max = max(lq)\n    ptr = [0] * k\n    heap_list = [(l1[i] + l2[0], i) for i in range(k)]\n    heapq.heapify(heap_list)\n    ans_list = [-1] * (q_max + 1)\n    for i in range(1, q_max + 1):\n        (su, j) = heapq.heappop(heap_list)\n        ans_list[i] = su\n        ptr[j] += 1\n        if ptr[j] < k:\n            heapq.heappush(heap_list, (l1[j] + l2[ptr[j]], j))\n    for i in range(q):\n        print(ans_list[lq[i]])", "class BinHeap:\n\n    def __init__(self):\n        self.heaplist = [0]\n        self.currentSize = 0\n\n    def percUp(self, i):\n        while i // 2 > 0:\n            if self.heaplist[i][0] < self.heaplist[i // 2][0]:\n                tmp = self.heaplist[i // 2]\n                self.heaplist[i // 2] = self.heaplist[i]\n                self.heaplist[i] = tmp\n            i = i // 2\n\n    def insert(self, k):\n        self.heaplist.append(k)\n        self.currentSize = self.currentSize + 1\n        self.percUp(self.currentSize)\n\n    def percDown(self, i):\n        while i * 2 <= self.currentSize:\n            mc = self.minChild(i)\n            if self.heaplist[i][0] > self.heaplist[mc][0]:\n                tmp = self.heaplist[i]\n                self.heaplist[i] = self.heaplist[mc]\n                self.heaplist[mc] = tmp\n            i = mc\n\n    def minChild(self, i):\n        if i * 2 + 1 > self.currentSize:\n            return i * 2\n        elif self.heaplist[i * 2][0] < self.heaplist[i * 2 + 1][0]:\n            return i * 2\n        else:\n            return i * 2 + 1\n\n    def delMin(self):\n        retval = self.heaplist[1]\n        self.heaplist[1] = self.heaplist[self.currentSize]\n        self.currentSize = self.currentSize - 1\n        self.heaplist.pop()\n        self.percDown(1)\n        return retval\n\n    def buildHeap(self, alist):\n        i = len(alist) // 2\n        self.currentSize = len(alist)\n        self.heaplist = [0] + alist[:]\n        while i > 0:\n            self.percDown(i)\n            i = i - 1\nfor _ in range(int(input().strip())):\n    (k, q) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    a.sort()\n    b = list(map(int, input().strip().split()))\n    b.sort()\n    queries = [int(input().strip()) for i in range(q)]\n    max_query = max(queries)\n    ptr = [0 for i in range(k)]\n    list_of_sums = [(a[i] + b[ptr[i]], i) for i in range(k)]\n    bh = BinHeap()\n    bh.buildHeap(list_of_sums)\n    answer = [-1 for i in range(max_query + 1)]\n    for i in range(1, max_query + 1):\n        (ans, idx) = bh.delMin()\n        ptr[idx] += 1\n        answer[i] = ans\n        if ptr[idx] < k:\n            bh.insert((a[idx] + b[ptr[idx]], idx))\n    for query in queries:\n        print(answer[query])", "from heapq import *\ncases = int(input())\nfor _ in range(cases):\n    (k, q) = tuple(map(int, input().split()))\n    mot = list(map(int, input().split()))\n    sat = list(map(int, input().split()))\n    mot.sort()\n    sat.sort()\n    (ans, heap) = ([], [])\n    lim = 10001\n    for j in range(k):\n        heappush(heap, (mot[0] + sat[j], 0, sat[j]))\n    while heap and lim > 0:\n        (sm, x, toadd) = heappop(heap)\n        ans.append(sm)\n        if x + 1 < k:\n            heappush(heap, (mot[x + 1] + toadd, x + 1, toadd))\n        lim -= 1\n    for i in range(q):\n        rank = int(input())\n        print(ans[rank - 1])"]