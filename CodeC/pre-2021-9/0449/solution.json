["t = int(input())\nfor dhff in range(t):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        (s, num) = input().split()\n        newnum = int(num)\n        if s in d:\n            d[s] += newnum\n        else:\n            d[s] = newnum\n    l = len(d)\n    x = list(d.values())\n    x.sort()\n    for i in x:\n        print(i, end=' ')\n    print('')", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    hm = {}\n    for i in range(0, 3 * n):\n        (st, nm) = input().split()\n        nm = int(nm)\n        if st in hm:\n            hm[st] = hm[st] + nm\n        else:\n            hm[st] = nm\n    print_line = ''\n    for k in sorted(hm, key=hm.get):\n        print_line += str(hm[k]) + ' '\n    print(print_line)\n    t -= 1", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    inp = {}\n    for i in range(3 * n):\n        (code, a) = map(str, input().split())\n        if code not in inp:\n            inp[code] = int(a)\n        else:\n            inp[code] += int(a)\n    for i in sorted(inp.values()):\n        print(i, end=' ')\n    print()", "t = int(input())\nfor i in range(0, t):\n    ls = int(input())\n    d = {}\n    for j in range(ls * 3):\n        (c, n) = input().split(' ')\n        d[c] = d.get(c, 0) + int(n)\n    k = d.values()\n    n = []\n    for m in k:\n        n.append(m)\n    for m in sorted(n):\n        print(m, end=' ')\n    print()", "t = int(input())\nfor i in range(0, t):\n    ls = int(input())\n    d = {}\n    for j in range(ls * 3):\n        (c, n) = input().split(' ')\n        d[c] = d.get(c, 0) + int(n)\n    k = d.values()\n    n = []\n    for m in k:\n        n.append(m)\n    for m in sorted(n):\n        print(m, end=' ')\n    print()", "for _ in range(int(input())):\n    d = {}\n    n = int(input())\n    for i in range(n * 3):\n        (c, s) = map(str, input().split())\n        if c not in d:\n            d[c] = int(s)\n        else:\n            d[c] += int(s)\n    lis = list(d.values())\n    lis.sort()\n    print(*lis)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    codes = {}\n    for j in range(3 * n):\n        (code, num) = list(map(str, input().split()))\n        if code in codes:\n            codes[code] += int(num)\n        else:\n            codes[code] = int(num)\n    solution = sorted(list(codes.values()))\n    solution = list(map(str, solution))\n    print(' '.join(solution))", "for _ in range(int(input())):\n    d = {}\n    n = int(input())\n    for i in range(n * 3):\n        (c, s) = map(str, input().split())\n        if c not in d:\n            d[c] = int(s)\n        else:\n            d[c] += int(s)\n    lis = list(d.values())\n    lis.sort()\n    print(*lis)", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        (a, b) = map(str, input().split())\n        b = int(b)\n        if a not in d:\n            d[a] = b\n        else:\n            d[a] += b\n    l = list(d.values())\n    l.sort()\n    print(*l)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    codes = {}\n    for j in range(3 * n):\n        (code, num) = list(map(str, input().split()))\n        if code in codes:\n            codes[code] += int(num)\n        else:\n            codes[code] = int(num)\n    solution = sorted(list(codes.values()))\n    solution = list(map(str, solution))\n    print(' '.join(solution))", "for t in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        a = list(input().split())\n        d[a[0]] = d.get(a[0], 0) + int(a[1])\n    v = list(d.values())\n    v.sort()\n    for i in v:\n        print(i, end=' ')\n    print()", "t = int(input())\noutput = ''\nfor i in range(t):\n    n = int(input())\n    dict = {}\n    for k in range(3 * n):\n        string_list = input().split(' ')\n        (code, number) = (string_list[0], int(string_list[1]))\n        if code not in dict:\n            dict[code] = number\n        else:\n            dict[code] = dict.get(code) + number\n    output += f\"{' '.join(map(str, sorted(dict.values())))}\\n\"\nprint(output)", "for _ in range(int(input())):\n    n = int(input())\n    x = []\n    d = {}\n    for i in range(3 * n):\n        s = [str(i) for i in input().split()]\n        x.append(s)\n    for i in range(len(x)):\n        if x[i][0] not in d:\n            d[x[i][0]] = int(x[i][1])\n        else:\n            d[x[i][0]] += int(x[i][1])\n    k = list(d.values())\n    k.sort()\n    print(*k)", "t = int(input())\noutput = ''\nfor i in range(t):\n    n = int(input())\n    dict = {}\n    for k in range(3 * n):\n        string_list = input().split(' ')\n        (code, number) = (string_list[0], int(string_list[1]))\n        if code not in dict:\n            dict[code] = number\n        else:\n            dict[code] = dict.get(code) + number\n    output += f\"{' '.join(map(str, sorted(dict.values())))}\\n\"\nprint(output)", "n_cases = int(input())\nfor _ in range(n_cases):\n    n_probs_per_div = int(input())\n    ctr = {}\n    for _ignore in range(3 * n_probs_per_div):\n        (code, score_st) = input().split()\n        ctr[code] = ctr.get(code, 0) + int(score_st)\n    print(' '.join((str(x) for x in sorted(ctr.values()))))", "for _ in range(int(input())):\n    N = int(input())\n    dc = {}\n    for i in range(3 * N):\n        (s, c) = input().split()\n        if s in dc:\n            dc[s] = dc[s] + int(c)\n        else:\n            dc[s] = int(c)\n    for i in sorted(dc.values()):\n        print(i, end=' ')\n    print('\\n')", "for _ in range(int(input())):\n    n = int(input())\n    dic = {}\n    for i in range(n * 3):\n        (a, b) = input().split(' ')\n        if a in dic:\n            dic[a] += int(b)\n        else:\n            dic[a] = int(b)\n    l = list(dic.values())\n    l.sort()\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    dic = {}\n    for i in range(n * 3):\n        (a, b) = input().split(' ')\n        if a in dic:\n            dic[a] += int(b)\n        else:\n            dic[a] = int(b)\n    l = list(dic.values())\n    l.sort()\n    print(*l)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    d = defaultdict(int)\n    for i in range(3 * n):\n        (s1, s2) = map(str, input().split())\n        d[s1] += int(s2)\n    v = list(d.values())\n    v.sort()\n    print(*v)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    d = defaultdict(int)\n    for i in range(3 * n):\n        (s1, s2) = map(str, input().split())\n        d[s1] += int(s2)\n    v = list(d.values())\n    v.sort()\n    print(*v)", "for _ in range(int(input())):\n    questions = {}\n    for num in range(int(input()) * 3):\n        lift = list(input().split())\n        lift[1] = int(lift[1])\n        if lift[0] not in questions:\n            questions[lift[0]] = lift[1]\n        else:\n            questions[lift[0]] += lift[1]\n    new_list = sorted(questions.values())\n    to_print = ''\n    for thing in new_list:\n        to_print = to_print + str(thing) + ' '\n    print(to_print)", "for _ in range(int(input())):\n    d = {}\n    for i in range(3 * int(input())):\n        (code, sub) = input().split()\n        sub = int(sub)\n        if code in d:\n            d[code] += sub\n        else:\n            d[code] = sub\n    values = list(d.values())\n    values.sort()\n    print(*values)", "n = int(input())\nfor i in range(1, n + 1):\n    k = int(input())\n    dict = {}\n    for j in range(k * 3):\n        (x, y) = input().split()\n        try:\n            dict[x] += int(y)\n        except:\n            dict[x] = int(y)\n    z = list(dict.values())\n    z.sort()\n    for j in z:\n        print(j, end=' ')\n    print()", "num = int(input())\nfor i in range(num):\n    n = int(input())\n    case = []\n    for j in range(n * 3):\n        c = input().split()\n        case.append(c)\n    count = {}\n    for prob in case:\n        count[prob[0]] = 0\n    for prob in case:\n        count[prob[0]] += int(prob[1])\n    arr = count.values()\n    arr = sorted(arr)\n    print(*arr)", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    d = {}\n    for ii in range(x * 3):\n        (xx, xxx) = input().split()\n        xxx = int(xxx)\n        if xx in d:\n            d[xx] += xxx\n        else:\n            d[xx] = xxx\n    print(*sorted([d[i] for i in d]))", "for i in range(int(input())):\n    n = int(input())\n    d = {}\n    for j in range(n * 3):\n        l = input().split()\n        l[1] = int(l[1])\n        if l[0] not in d:\n            d[l[0]] = l[1]\n        else:\n            d[l[0]] += l[1]\n    for k in sorted(d.values()):\n        print(f'{k} ', end='')\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    n = 3 * n\n    dictQuest = {}\n    for i in range(n):\n        (q, c) = [i for i in input().split()]\n        if q in dictQuest.keys():\n            dictQuest[q] = dictQuest[q] + int(c)\n        else:\n            dictQuest[q] = int(c)\n    ans = list(dictQuest.values())\n    for i in sorted(ans):\n        print(i, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = {}\n    for j in range(3 * n):\n        (s, c) = map(str, input().split())\n        if s in d:\n            d[s] += int(c)\n        else:\n            d[s] = int(c)\n    l = []\n    for j in d:\n        l += [d[j]]\n    l.sort()\n    print(*l)", "for t in range(int(input())):\n    n = int(input())\n    l = {}\n    for j in range(n * 3):\n        (x, y) = input().split()\n        y = int(y)\n        if x not in l:\n            l[x] = y\n        else:\n            l[x] += y\n    for i in sorted(l.values()):\n        print(i, end=' ')\n    print()", "n = int(input())\nfor i in range(n):\n    n1 = int(input())\n    d = {}\n    for i in range(n1 * 3):\n        (k, y) = input().split()\n        if k not in d:\n            d[k] = int(y)\n        else:\n            d[k] += int(y)\n    for i in sorted(d.values()):\n        print(i, end=' ')\n    print()", "n = int(input())\nfor i in range(n):\n    n1 = int(input())\n    d = {}\n    for i in range(n1 * 3):\n        (k, y) = input().split()\n        if k not in d:\n            d[k] = int(y)\n        else:\n            d[k] += int(y)\n    for i in sorted(d.values()):\n        print(i, end=' ')\n    print()", "for row_number in range(0, int(input())):\n    number_of_problems = int(input()) * 3\n    problems_to_correct_solutions_dict = dict()\n    for _ in range(0, number_of_problems):\n        (problem_name, correct_solutions_string) = input().split(' ')\n        correct_solutions = int(correct_solutions_string)\n        if problem_name in problems_to_correct_solutions_dict:\n            correct_solutions += problems_to_correct_solutions_dict[problem_name]\n        problems_to_correct_solutions_dict[problem_name] = correct_solutions\n    sortedList = sorted(problems_to_correct_solutions_dict.values())\n    print(*sortedList)", "T = int(input())\nwhile T > 0:\n    N = int(input())\n    lt = []\n    dic = {}\n    for i in range(3 * N):\n        (s, c) = input().split()\n        if s not in dic:\n            dic[s] = int(c)\n        else:\n            dic[s] += int(c)\n    for i in dic.values():\n        lt.append(i)\n    lt.sort()\n    for i in lt:\n        print(i, end=' ')\n    print()\n    T = T - 1", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        (a, b) = map(str, input().split())\n        if a in d:\n            d[a] += int(b)\n        else:\n            d[a] = int(b)\n    l = []\n    for i in d:\n        l.append(d[i])\n    l.sort()\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    num_solutions = dict()\n    for _ in range(3 * n):\n        data = input().split()\n        if data[0] not in num_solutions:\n            num_solutions[data[0]] = 0\n        num_solutions[data[0]] += int(data[1])\n    output = [str(x) for x in sorted(list(num_solutions.values()))]\n    print(' '.join(output))", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        (a, b) = map(str, input().split())\n        if a in d:\n            d[a] += int(b)\n        else:\n            d[a] = int(b)\n    l = []\n    for i in d:\n        l.append(d[i])\n    l.sort()\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        (a, b) = map(str, input().split())\n        if a in d:\n            d[a] += int(b)\n        else:\n            d[a] = int(b)\n    l = []\n    for i in d:\n        l.append(d[i])\n    l.sort()\n    print(*l)", "for x in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        (code, correct) = input().rstrip().split()\n        correct = int(correct)\n        d[code] = d[code] + correct if code in d else correct\n    print(' '.join(list(map(str, sorted(d.values())))))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = {}\n    for j in range(3 * n):\n        l = list(input().split())\n        (b, c) = (l[0], int(l[1]))\n        if b not in a:\n            a[b] = c\n        else:\n            a[b] += c\n    g = list(a.values())\n    g.sort()\n    for j in g:\n        print(j, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    a = {}\n    for i in range(3 * n):\n        (p, q) = map(str, input().split())\n        q = int(q)\n        if p not in a.keys():\n            a[p] = q\n        else:\n            a[p] += q\n    x = list(a.values())\n    x.sort()\n    for i in range(len(x)):\n        print(x[i], end=' ')\n    print(' ')", "for _ in range(int(input())):\n    N = int(input())\n    B = {}\n    for i in range(3 * N):\n        (c, ch) = input().split(' ')\n        B[c] = B.get(c, 0) + int(ch)\n    for t in sorted(list(B.values())):\n        print(t, end=' ')\n    print('\\n')", "for _ in range(int(input())):\n    N = int(input())\n    d = {}\n    X = []\n    Y = []\n    for i in range(3 * N):\n        (x, y) = map(str, input().split())\n        X.append(x)\n        Y.append(int(y))\n    for i in X:\n        d[i] = 0\n    for (i, j) in zip(X, Y):\n        d[i] += j\n    xxx = list(d.values())\n    xxx.sort()\n    xx = ''\n    for i in xxx:\n        xx += str(i) + ' '\n    print(xx[:-1])", "for _ in range(int(input())):\n    n = int(input())\n    problem_dict = {}\n    for _ in range(3):\n        for _ in range(n):\n            (code, sub) = input().split(' ')\n            sub = int(sub)\n            if code in problem_dict.keys():\n                problem_dict[code] += sub\n            else:\n                problem_dict[code] = sub\n    ans = list(problem_dict.values())\n    ans.sort()\n    print(' '.join(map(str, ans)))", "a = input()\nfor _ in range(int(a)):\n    b = {}\n    n = int(input())\n    for i in range(3 * n):\n        (c, ch) = input().split(' ')\n        b[c] = b.get(c, 0) + int(ch)\n    for t in sorted(list(b.values())):\n        print(t, end=' ')\n    print('\\n')", "test_cases = input()\nfor _ in range(int(test_cases)):\n    ques_obj = {}\n    n = int(input())\n    for i in range(3 * n):\n        (question, choice) = input().split(' ')\n        ques_obj[question] = ques_obj.get(question, 0) + int(choice)\n    for val in sorted(list(ques_obj.values())):\n        print(val, end=' ')\n    print('\\n')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d = {}\n    for j in range(3 * n):\n        (s, k) = input().split()\n        k = int(k)\n        if s in d:\n            d[s] += k\n        else:\n            d[s] = k\n    p = list(d.values())\n    p.sort()\n    for i in p:\n        print(i, end=' ')\n    print()", "for t in range(int(input())):\n    n = int(input())\n    (s1, s2, s3, c1, c2, c3) = ([], [], [], [], [], [])\n    for i in range(n):\n        x = input().split()\n        s3.append(x[0])\n        c3.append(int(x[1]))\n    for i in range(n):\n        x = input().split()\n        s2.append(x[0])\n        c2.append(int(x[1]))\n    for i in range(n):\n        x = input().split()\n        s1.append(x[0])\n        c1.append(int(x[1]))\n    d = {}\n    for i in range(n):\n        if s3[i] in d.keys():\n            d[s3[i]] += c3[i]\n        else:\n            d[s3[i]] = c3[i]\n    for i in range(n):\n        if s2[i] in d.keys():\n            d[s2[i]] += c2[i]\n        else:\n            d[s2[i]] = c2[i]\n    for i in range(n):\n        if s1[i] in d.keys():\n            d[s1[i]] += c1[i]\n        else:\n            d[s1[i]] = c1[i]\n    ans = list(d.values())\n    ans.sort()\n    for i in ans:\n        print(i, end=' ')\n    print()", "for t in range(int(input())):\n    n = int(input())\n    dictmain = {}\n    for i in range(3 * n):\n        a = input().split()\n        if a[0] in dictmain:\n            dictmain[a[0]] += int(a[1])\n        else:\n            dictmain[a[0]] = int(a[1])\n    a = list(dictmain.values())\n    a.sort()\n    for i in range(len(a) - 1):\n        print(a[i], end=' ')\n    print(a[-1])", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        (a, b) = input().split()\n        if a in d:\n            d[a] += int(b)\n        else:\n            d[a] = int(b)\n    d = sorted(d.values())\n    for i in d:\n        print(i, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    solutions = {}\n    for i in range(3):\n        for j in range(n):\n            (code, count) = input().split()\n            count = int(count)\n            solutions[code] = solutions.get(code, 0) + count\n    solutions = {k: v for (k, v) in sorted(solutions.items(), key=lambda item: item[1])}\n    for code in solutions:\n        print(solutions[code], end=' ')\n    print()", "from collections import defaultdict\ntest_cases = int(input())\nfor _ in range(test_cases):\n    problems = int(input())\n    dictionary = defaultdict(int)\n    for _ in range(problems * 3):\n        user_input = input().split()\n        dictionary[user_input[0]] += int(user_input[1])\n    arr = [value for (_, value) in dictionary.items()]\n    arr.sort()\n    for elem in arr:\n        print(elem, end=' ')\n    print()", "dic = {}\nfor _ in range(int(input())):\n    dic = {}\n    n = int(input())\n    for i in range(n * 3):\n        l = input().split()\n        if l[0] in dic:\n            dic[l[0]] += int(l[1])\n        else:\n            dic[l[0]] = int(l[1])\n    lst = []\n    for i in dic:\n        lst.append(dic[i])\n    for i in sorted(lst):\n        print(i, end=' ')\n    print()", "t = int(input())\nfor i in range(0, t):\n    n = int(input())\n    d = {}\n    for i in range(0, 3 * n):\n        a = input().split()\n        (a, b) = a\n        b = int(b)\n        if a in d:\n            d[a] += b\n        else:\n            d[a] = b\n    l = []\n    for i in d:\n        l += [d[i]]\n    l.sort()\n    for i in l:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    N = int(input())\n    mydict = {}\n    string = ''\n    for i in range(3):\n        for i in range(N):\n            problem = str(input())\n            stringWithChar = ''\n            stringWithInt = ''\n            for _ in problem:\n                if _.isdigit() == True:\n                    stringWithInt += str(_)\n                else:\n                    stringWithChar += str(_)\n            if stringWithChar in mydict:\n                mydict[stringWithChar] += int(stringWithInt)\n            else:\n                mydict[stringWithChar] = int(stringWithInt)\n    sortedDict = {k: v for (k, v) in sorted(mydict.items(), key=lambda item: item[1])}\n    for i in sortedDict.values():\n        string = string + ' ' + str(i)\n    print(string)", "def solve(codes, corrSol, n):\n    mp = {}\n    for i in range(n * 3):\n        if codes[i] not in mp:\n            mp[codes[i]] = corrSol[i]\n        else:\n            mp[codes[i]] += corrSol[i]\n    res = sorted(mp.values())\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    codes = []\n    corrSol = []\n    for i in range(n * 3):\n        (v1, v2) = input().split()\n        codes.append(v1)\n        corrSol.append(int(v2))\n    print(*solve(codes, corrSol, n))", "for _ in range(int(input())):\n    d = {}\n    for i in range(3 * int(input())):\n        p = input().split()\n        (p, s) = p\n        s = int(s)\n        if p in d:\n            d[p] += s\n        else:\n            d[p] = s\n    l = []\n    for i in d:\n        l += [d[i]]\n    l.sort()\n    for i in l:\n        print(i, end=' ')\n    print()", "dic = {}\nfor _ in range(int(input())):\n    dic = {}\n    n = int(input())\n    for i in range(n * 3):\n        l = input().split()\n        if l[0] in dic:\n            dic[l[0]] += int(l[1])\n        else:\n            dic[l[0]] = int(l[1])\n    lst = []\n    for i in dic:\n        lst.append(dic[i])\n    for i in sorted(lst):\n        print(i, end=' ')\n    print()", "testCases = int(input())\nfor tc in range(testCases):\n    n = int(input())\n    submission_map = {}\n    for i in range(3 * n):\n        (prob_code, submissions) = map(str, input().split())\n        if prob_code in submission_map:\n            submission_map[prob_code] += int(submissions)\n        else:\n            submission_map[prob_code] = int(submissions)\n    submission_map = dict(sorted(submission_map.items(), key=lambda x: x[1]))\n    for key in submission_map:\n        print(submission_map[key], end=' ')\n    print()", "for t in range(int(input())):\n    d = {}\n    for i in range(3 * int(input())):\n        p = input().split()\n        (p, s) = p\n        s = int(s)\n        if p in d:\n            d[p] += s\n        else:\n            d[p] = s\n    l = []\n    for i in d:\n        l += [d[i]]\n    l.sort()\n    for i in l:\n        print(i, end=' ')\n    print()", "for ii in range(int(input())):\n    No = int(input())\n    Dict = {}\n    for i in range(No * 3):\n        List = input().split()\n        if List[0] in Dict:\n            Dict[List[0]] += int(List[1])\n        else:\n            Dict[List[0]] = int(List[1])\n    for val in sorted(Dict.values()):\n        print(val, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    dict = {}\n    for i in range(3 * n):\n        x = input().split(' ')\n        if x[0] not in dict.keys():\n            dict[x[0]] = int(x[1])\n        else:\n            v = dict[x[0]]\n            dict[x[0]] = v + int(x[1])\n    dl = list(dict.values())\n    dl.sort()\n    print(*dl)", "for _ in range(int(input())):\n    n = 3 * int(input())\n    d = {}\n    for _ in range(n):\n        (problem, count) = input().split()\n        count = int(count)\n        if problem not in d:\n            d[problem] = count\n        else:\n            d[problem] += count\n    strvals = list(map(str, sorted(list(d.values()))))\n    print(' '.join(strvals))", "import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 5)\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    d = dd(int)\n    for i in range(3 * n):\n        (nm, c) = input().strip().split(' ')\n        d[nm] += int(c)\n    l = []\n    for i in d:\n        l.append(d[i])\n    l.sort()\n    print(*l)", "tc = int(input())\nwhile tc > 0:\n    tc = tc - 1\n    dic = {}\n    shared_problems = int(input()) * 3\n    while shared_problems > 0:\n        shared_problems = shared_problems - 1\n        div = input().split(' ')\n        if div[0] in dic.keys():\n            val = dic[div[0]]\n            dic[div[0]] = val + int(div[1])\n        else:\n            dic[div[0]] = int(div[1])\n    mylist = list(dic.values())\n    mylist.sort()\n    print(*mylist)", "t = int(input())\nfor i in range(t):\n    d = {}\n    n = int(input())\n    for i in range(3):\n        for j in range(n):\n            k = list(input().split())\n            if k[0] not in d.keys():\n                d[k[0]] = int(k[1])\n            else:\n                d[k[0]] += int(k[1])\n    l = list(d.values())\n    l.sort()\n    print(*l)", "for _ in range(int(input())):\n    n = int(input())\n    f = lambda : map(str, input().split())\n    h = {}\n    for j in range(3):\n        for i in range(n):\n            (a, b) = f()\n            b = int(b)\n            if a in h:\n                h[a] += b\n            else:\n                h[a] = b\n    sorredh = sorted(h.items(), key=lambda x: x[1])\n    result = []\n    for i in range(len(sorredh)):\n        result.append(sorredh[i][1])\n    print(*result, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    f = lambda : map(str, input().split())\n    h = {}\n    for j in range(3):\n        for i in range(n):\n            (a, b) = f()\n            b = int(b)\n            if a in h:\n                h[a] += b\n            else:\n                h[a] = b\n    sorredh = sorted(h.items(), key=lambda x: x[1])\n    result = []\n    for i in range(len(sorredh)):\n        result.append(sorredh[i][1])\n    print(*result, sep=' ')", "for testcases in range(int(input())):\n    n = int(input()) * 3\n    d = {}\n    for i in range(n):\n        (a, b) = map(str, input().split())\n        if a in d:\n            d[a] += int(b)\n        else:\n            d[a] = int(b)\n    l = list((int(x) for x in d.values()))\n    l.sort()\n    print(*l)", "t = int(input())\nfor test in range(t):\n    N = int(input())\n    submissionsDictionary = {}\n    for submission in range(N * 3):\n        (key, number) = input().split(' ')\n        number = int(number)\n        if key in submissionsDictionary:\n            submissionsDictionary[key] += number\n        else:\n            submissionsDictionary.update({key: number})\n    submissionsList = []\n    for submission in submissionsDictionary:\n        submissionsList.append(submissionsDictionary[submission])\n    submissionsList.sort()\n    submissionsString = ''\n    for submission in submissionsList:\n        submissionsString += f'{submission} '\n    print(submissionsString)", "for testcases in range(int(input())):\n    n = int(input()) * 3\n    d = {}\n    for i in range(n):\n        (a, b) = map(str, input().split())\n        if a in d:\n            d[a] += int(b)\n        else:\n            d[a] = int(b)\n    l = list((int(x) for x in d.values()))\n    l.sort()\n    print(*l)", "for _ in range(int(input())):\n    N = int(input())\n    submissions = {}\n    divisions = []\n    i = 0\n    while i < 3:\n        for _ in range(N):\n            (code, number) = input().split()\n            number = int(number)\n            dic = {code: number}\n            divisions.append(dic)\n            submissions[code] = 0\n        i += 1\n    for dic in divisions:\n        for key in dic:\n            submissions[key] += dic[key]\n    divisions.clear()\n    for key in submissions:\n        divisions.append(submissions[key])\n    divisions.sort()\n    for successful in divisions:\n        print(successful, end=' ')\n    print()", "T = int(input())\nfor iter in range(T):\n    N = int(input())\n    storage = {}\n    for x in range(N * 3):\n        (codeTag, solutions) = input().split()\n        if codeTag not in storage.keys():\n            storage[codeTag] = int(solutions)\n        else:\n            storage[codeTag] += int(solutions)\n    freq = list(storage.values())\n    freq.sort()\n    print(' '.join(map(str, freq)))", "def solve():\n    d = {}\n    N = int(input())\n    for i in range(3 * N):\n        (s, c) = input().split()\n        ci = int(c)\n        if s in d:\n            d[s] += ci\n        else:\n            d[s] = ci\n    a = list(d.values())\n    a.sort()\n    print(*a)\nT = int(input())\nfor _ in range(T):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for _ in range(n * 3):\n        (a, b) = input().split()\n        if a in d:\n            d[a] += int(b)\n        else:\n            d[a] = int(b)\n    val = d.values()\n    print(' '.join(list(map(str, sorted(val)))))", "for t in range(int(input())):\n    n = int(input())\n    l = {}\n    for i in range(3 * n):\n        (x, y) = input().split()\n        y = int(y)\n        if x in l:\n            l[x] += y\n        else:\n            l[x] = y\n    for i in sorted(l.values()):\n        print(i, end=' ')\n    print()", "n_divs = 3\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    p = dict()\n    for j in range(n_divs):\n        for k in range(n):\n            (s, c) = input().split()\n            c = int(c)\n            if s in p:\n                p[s] += c\n            else:\n                p[s] = c\n    for c in sorted(p.values()):\n        print(c, end=' ')\n    print()", "tests = int(input())\nfor i in range(tests):\n    num = int(input())\n    unique_dict = {}\n    for j in range(num * 3):\n        (problem, solved) = input().split()\n        if problem in unique_dict:\n            unique_dict[problem] += int(solved)\n        else:\n            unique_dict[problem] = int(solved)\n    ans = sorted(list(unique_dict.values()))\n    print(*ans)", "for _ in range(int(input())):\n    code_dict = {}\n    n = int(input())\n    for i in range(3):\n        for j in range(n):\n            (s, c) = map(str, input().split())\n            if s in code_dict:\n                code_dict[s] += int(c)\n            else:\n                code_dict[s] = int(c)\n    values = list(code_dict.values())\n    values.sort()\n    for i in values:\n        print(i, end=' ')\n    print()", "t = int(input())\nwhile t:\n    n = int(input())\n    d = {}\n    while n:\n        temp = []\n        (one, key1) = input().split()\n        (two, key2) = input().split()\n        (three, key3) = input().split()\n        temp.append(int(key1))\n        temp.append(int(key2))\n        temp.append(int(key3))\n        temp1 = []\n        temp1.append(one)\n        temp1.append(two)\n        temp1.append(three)\n        for i in range(3):\n            if temp1[i] in d:\n                d[temp1[i]] += temp[i]\n            else:\n                d[temp1[i]] = temp[i]\n        n -= 1\n    x = list(d.values())\n    x.sort()\n    print(*x, sep=' ')\n    t -= 1", "for t in range(int(input())):\n    d = {}\n    for t in range(int(input()) * 3):\n        (s, n) = input().split(' ')\n        n = int(n)\n        if s in d:\n            d[s] += n\n        else:\n            d[s] = n\n    l = list(d.values())\n    l.sort()\n    for a in l:\n        print(a, end=' ')\n    print()", "for t in range(int(input())):\n    d = {}\n    for t in range(int(input()) * 3):\n        (s, n) = input().split(' ')\n        n = int(n)\n        if s in d:\n            d[s] += n\n        else:\n            d[s] = n\n    l = list(d.values())\n    l.sort()\n    for a in l:\n        print(a, end=' ')\n    print()", "for t in range(int(input())):\n    d = {}\n    for t in range(int(input()) * 3):\n        (s, n) = input().split(' ')\n        n = int(n)\n        if s in d:\n            d[s] += n\n        else:\n            d[s] = n\n    l = list(d.values())\n    l.sort()\n    for a in l:\n        print(a, end=' ')\n    print()", "for t in range(int(input())):\n    d = {}\n    for t in range(int(input()) * 3):\n        (s, n) = input().split(' ')\n        n = int(n)\n        if s in d:\n            d[s] += n\n        else:\n            d[s] = n\n    l = list(d.values())\n    l.sort()\n    for a in l:\n        print(a, end=' ')\n    print()", "for _ in range(int(input())):\n    N = int(input())\n    problems = {}\n    total_lines = 3 * N\n    for problem in range(total_lines):\n        (prob_code, crt_solutions) = input().split(' ')\n        crt_solutions = int(crt_solutions)\n        if prob_code in problems:\n            problems[prob_code] += crt_solutions\n        else:\n            problems[prob_code] = crt_solutions\n    list_crt_sol = list(problems.values())\n    list_crt_sol.sort()\n    print(*list_crt_sol, sep=' ')", "for _ in range(int(input())):\n    p = int(input())\n    d = {}\n    for i in range(0, 3 * p):\n        s = input().split()\n        if s[0] not in d:\n            d[s[0]] = int(s[1])\n        else:\n            d[s[0]] += int(s[1])\n    l = list(d.values())\n    l.sort()\n    for i in l:\n        print(i, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    npindiv = int(input())\n    dat = dict()\n    for __ in range(npindiv * 3):\n        cur = list(map(str, input().split(' ')))\n        ch = cur[0]\n        n = int(cur[1])\n        if ch in dat.keys():\n            dat[ch] += n\n        else:\n            dat[ch] = n\n    l = []\n    for i in dat.keys():\n        l.append(dat[i])\n    l = sorted(l)\n    print(*l, sep=' ')", "for _ in range(int(input())):\n    n = int(input())\n    dic = {}\n    for i in range(3 * n):\n        (s, k) = input().split()\n        if s not in dic:\n            dic[s] = int(k)\n        else:\n            dic[s] += int(k)\n    u = list(dic.values())\n    u.sort()\n    print(*u)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    keys = []\n    for j in range(n):\n        x = input().split(' ')\n        d3[x[0]] = int(x[1])\n        keys.append(x[0])\n    for j in range(n):\n        x = input().split(' ')\n        d2[x[0]] = int(x[1])\n        keys.append(x[0])\n    for j in range(n):\n        x = input().split(' ')\n        d1[x[0]] = int(x[1])\n        keys.append(x[0])\n    unq_keys = list(set(keys))\n    ans = []\n    for j in unq_keys:\n        c = 0\n        if j in d1.keys():\n            c += d1[j]\n        if j in d2.keys():\n            c += d2[j]\n        if j in d3.keys():\n            c += d3[j]\n        ans.append(c)\n    ans.sort()\n    for m in ans:\n        print(m, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    d = {}\n    for i in range(3 * n):\n        (x, y) = input().split()\n        if x not in d:\n            d.update({x: int(y)})\n        else:\n            d[x] += int(y)\n    print(*sorted(d.values()))", "import sys\nfor i in range(int(input())):\n    n = int(input())\n    a = dict()\n    for x in range(3 * n):\n        (s, c) = sys.stdin.readline().split()\n        c = int(c)\n        if s not in a:\n            a[s] = c\n        else:\n            a[s] += c\n    a = list(a.values())\n    print(*sorted(a))", "for i in range(int(input())):\n    n = int(input())\n    a = dict()\n    for x in range(3 * n):\n        (s, c) = input().split()\n        c = int(c)\n        if s not in a:\n            a[s] = c\n        else:\n            a[s] += c\n    a = list(a.values())\n    print(*sorted(a))"]