["import sys\nMOD = 1000000007\n\ndef multiply(m1):\n    a = m1[0][0] * m1[0][0] + m1[0][1] * m1[1][0]\n    b = m1[0][0] * m1[0][1] + m1[0][1] * m1[1][1]\n    c = m1[1][0] * m1[0][0] + m1[1][1] * m1[1][0]\n    d = m1[1][0] * m1[0][1] + m1[1][1] * m1[1][1]\n    m1[0][0] = a % MOD\n    m1[0][1] = b % MOD\n    m1[1][0] = c % MOD\n    m1[1][1] = d % MOD\n\ndef solve(n, m):\n    m = m % MOD\n    if n == 1:\n        return m\n    if n == 2:\n        return m ** 2 % MOD\n    if m == 1:\n        return 0\n    mat = [[m - 1, m - 1], [1, 0]]\n    res = [m ** 2 % MOD, m]\n    n -= 2\n    while n:\n        if n % 2:\n            t0 = res[0]\n            res[0] = (mat[0][0] * res[0] + mat[0][1] * res[1]) % MOD\n            res[1] = (mat[1][0] * t0 + mat[1][1] * res[1]) % MOD\n            n -= 1\n        else:\n            multiply(mat)\n            n >>= 1\n    return res[0]\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    sys.stdout.write('{}\\n'.format(solve(n, m)))", "import sys\nMOD = 1000000007\n\ndef multiply(m1):\n    a = m1[0][0] * m1[0][0] + m1[0][1] * m1[1][0]\n    b = m1[0][0] * m1[0][1] + m1[0][1] * m1[1][1]\n    c = m1[1][0] * m1[0][0] + m1[1][1] * m1[1][0]\n    d = m1[1][0] * m1[0][1] + m1[1][1] * m1[1][1]\n    m1[0][0] = a % MOD\n    m1[0][1] = b % MOD\n    m1[1][0] = c % MOD\n    m1[1][1] = d % MOD\n\ndef solve(n, m):\n    m = m % MOD\n    if n == 1:\n        return m\n    if n == 2:\n        return m ** 2 % MOD\n    if m == 1:\n        return 0\n    mat = [[m - 1, m - 1], [1, 0]]\n    res = [m ** 2 % MOD, m]\n    n -= 2\n    while n:\n        if n % 2:\n            t0 = res[0]\n            res[0] = (mat[0][0] * res[0] + mat[0][1] * res[1]) % MOD\n            res[1] = (mat[1][0] * t0 + mat[1][1] * res[1]) % MOD\n            n -= 1\n        else:\n            multiply(mat)\n            n >>= 1\n    return res[0]\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    sys.stdout.write('{}\\n'.format(solve(n, m)))", "import sys\nMOD = 1000000007\n\ndef multiply(m1):\n    a = m1[0][0] * m1[0][0] + m1[0][1] * m1[1][0]\n    b = m1[0][0] * m1[0][1] + m1[0][1] * m1[1][1]\n    c = m1[1][0] * m1[0][0] + m1[1][1] * m1[1][0]\n    d = m1[1][0] * m1[0][1] + m1[1][1] * m1[1][1]\n    m1[0][0] = a % MOD\n    m1[0][1] = b % MOD\n    m1[1][0] = c % MOD\n    m1[1][1] = d % MOD\n\ndef solve(n, m):\n    m = m % MOD\n    if n == 1:\n        return m\n    if n == 2:\n        return m ** 2 % MOD\n    if m == 1:\n        return 0\n    mat = [[m - 1, m - 1], [1, 0]]\n    ans = [m ** 2 % MOD, m]\n    n -= 2\n    while n:\n        if n % 2 == 1:\n            t0 = ans[0]\n            ans[0] = (mat[0][0] * ans[0] + mat[0][1] * ans[1]) % MOD\n            ans[1] = (mat[1][0] * t0 + mat[1][1] * ans[1]) % MOD\n            n -= 1\n        else:\n            multiply(mat)\n            n >>= 1\n    return ans[0]\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    sys.stdout.write('{}\\n'.format(solve(n, m)))", "import sys\nMOD = 1000000007\n\ndef multiply(m1):\n    a = m1[0][0] * m1[0][0] + m1[0][1] * m1[1][0]\n    b = m1[0][0] * m1[0][1] + m1[0][1] * m1[1][1]\n    c = m1[1][0] * m1[0][0] + m1[1][1] * m1[1][0]\n    d = m1[1][0] * m1[0][1] + m1[1][1] * m1[1][1]\n    m1[0][0] = a % MOD\n    m1[0][1] = b % MOD\n    m1[1][0] = c % MOD\n    m1[1][1] = d % MOD\n\ndef solve(n, m):\n    m = m % MOD\n    if n == 1:\n        return m\n    if n == 2:\n        return m ** 2 % MOD\n    if m == 1:\n        return 0\n    mat = [[m - 1, m - 1], [1, 0]]\n    ans = [m ** 2 % MOD, m]\n    n -= 2\n    while n:\n        if n % 2 == 1:\n            t0 = ans[0]\n            ans[0] = (mat[0][0] * ans[0] + mat[0][1] * ans[1]) % MOD\n            ans[1] = (mat[1][0] * t0 + mat[1][1] * ans[1]) % MOD\n            n -= 1\n        else:\n            multiply(mat)\n            n >>= 1\n    return ans[0]\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    sys.stdout.write('{}\\n'.format(solve(n, m)))", "import sys\nMOD = 1000000007\n\ndef multiply(m1):\n    a = m1[0][0] * m1[0][0] + m1[0][1] * m1[1][0]\n    b = m1[0][0] * m1[0][1] + m1[0][1] * m1[1][1]\n    c = m1[1][0] * m1[0][0] + m1[1][1] * m1[1][0]\n    d = m1[1][0] * m1[0][1] + m1[1][1] * m1[1][1]\n    m1[0][0] = a % MOD\n    m1[0][1] = b % MOD\n    m1[1][0] = c % MOD\n    m1[1][1] = d % MOD\n\ndef solve(n, m):\n    m = m % MOD\n    if n == 1:\n        return m\n    elif n == 2:\n        return m ** 2 % MOD\n    elif m == 1:\n        return 0\n    else:\n        mat = [[m - 1, m - 1], [1, 0]]\n        ans = [m ** 2 % MOD, m]\n        n -= 2\n        while n:\n            if n % 2 == 1:\n                t0 = ans[0]\n                ans[0] = (mat[0][0] * ans[0] + mat[0][1] * ans[1]) % MOD\n                ans[1] = (mat[1][0] * t0 + mat[1][1] * ans[1]) % MOD\n                n -= 1\n            else:\n                multiply(mat)\n                n >>= 1\n        return ans[0]\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    sys.stdout.write('{}\\n'.format(solve(n, m)))", "import sys\nPRIME = 1000000007\n\ndef multiply(m1):\n    a = m1[0][0] * m1[0][0] + m1[0][1] * m1[1][0]\n    b = m1[0][0] * m1[0][1] + m1[0][1] * m1[1][1]\n    c = m1[1][0] * m1[0][0] + m1[1][1] * m1[1][0]\n    d = m1[1][0] * m1[0][1] + m1[1][1] * m1[1][1]\n    m1[0][0] = a % PRIME\n    m1[0][1] = b % PRIME\n    m1[1][0] = c % PRIME\n    m1[1][1] = d % PRIME\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().split())\n    m = m % PRIME\n    if n == 1:\n        sys.stdout.write('{}\\n'.format(m))\n    elif n == 2:\n        sys.stdout.write('{}\\n'.format(m ** 2 % PRIME))\n    elif m == 1:\n        sys.stdout.write('{}\\n'.format(0))\n    else:\n        mat = [[m - 1, m - 1], [1, 0]]\n        ans = [m ** 2 % PRIME, m]\n        n -= 2\n        while n:\n            if n % 2 == 1:\n                t0 = ans[0]\n                ans[0] = (mat[0][0] * ans[0] + mat[0][1] * ans[1]) % PRIME\n                ans[1] = (mat[1][0] * t0 + mat[1][1] * ans[1]) % PRIME\n                n -= 1\n            else:\n                multiply(mat)\n                n >>= 1\n        sys.stdout.write('{}\\n'.format(ans[0]))"]