["t = int(input())\nwhile t:\n    n = int(input())\n    a = []\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        a.append(arr)\n    for i in range(n - 1, -1, -1):\n        for j in range(i):\n            a[i - 1][j] += max(a[i][j + 1], a[i][j])\n    print(a[0][0])\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        a.append(arr)\n    for i in range(n - 1, -1, -1):\n        for j in range(i):\n            a[i - 1][j] += max(a[i][j + 1], a[i][j])\n    print(a[0][0])\n    t -= 1", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        x.append(a)\n    for _ in range(n - 2, -1, -1):\n        for __ in range(_ + 1):\n            x[_][__] += max(x[_ + 1][__], x[_ + 1][__ + 1])\n    print(x[0][0])", "t = int(input())\nwhile t:\n    n = int(input())\n    a = []\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        a.append(arr)\n    for i in range(n - 1, -1, -1):\n        for j in range(i):\n            a[i - 1][j] += max(a[i][j + 1], a[i][j])\n    print(a[0][0])\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            a[i][j] += max(a[i + 1][j], a[i + 1][j + 1])\n    print(a[0][0])", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            a[i][j] += max(a[i + 1][j], a[i + 1][j + 1])\n    print(a[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "n = int(input())\nfor i in range(n):\n    n1 = int(input())\n    dp = []\n    for i in range(n1):\n        dp.append(list(map(int, input().split(' '))))\n    for i in range(1, n1):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + dp[i][j]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + dp[i][j]\n    print(max(dp[-1]))", "n = int(input())\nfor i in range(n):\n    n1 = int(input())\n    dp = []\n    for i in range(n1):\n        dp.append(list(map(int, input().split(' '))))\n    for i in range(1, n1):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + dp[i][j]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j]) + dp[i][j]\n    print(max(dp[-1]))", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for y in range(n - 2, -1, -1):\n        for x in range(y + 1):\n            a[y][x] = a[y][x] + max(a[y + 1][x], a[y + 1][x + 1])\n    print(a[0][0])", "t = int(input())\nwhile t:\n    n = int(input())\n    a = []\n    for i in range(n):\n        arr = list(map(int, input().split()))\n        a.append(arr)\n    for i in range(n - 1, -1, -1):\n        for j in range(i):\n            a[i - 1][j] += max(a[i][j + 1], a[i][j])\n    print(a[0][0])\n    t -= 1", "for i in range(int(input())):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "for i in range(int(input())):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "def ijoin(array, char=' '):\n    return char.join([str(x) for x in array])\n\ndef solve(n, a):\n    for y in range(n - 2, -1, -1):\n        for x in range(y + 1):\n            a[y][x] = a[y][x] + max(a[y + 1][x], a[y + 1][x + 1])\n    print(a[0][0])\nfor t in range(int(input())):\n    n = int(input())\n    a = [[int(x) for x in input().split()] for _ in range(n)]\n    solve(n, a)", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    triangle = []\n    max_sum = []\n    for j in range(n):\n        row = list(map(int, input().split()))\n        triangle.append(row)\n        max_sum.append([0] * len(row))\n    for j in range(n):\n        for k in range(j + 1):\n            if j == 0:\n                max_sum[j][k] = triangle[j][k]\n            elif k == 0:\n                max_sum[j][k] = max_sum[j - 1][k] + triangle[j][k]\n            elif k == j:\n                max_sum[j][k] = max_sum[j - 1][k - 1] + triangle[j][k]\n            else:\n                max_sum[j][k] = max(max_sum[j - 1][k - 1], max_sum[j - 1][k]) + triangle[j][k]\n    print(max(max_sum[n - 1]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        a.append(row)\n    dp = [[0] * n for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1):\n            if i == n - 1:\n                dp[i][j] = a[i][j]\n            else:\n                dp[i][j] = a[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1])\n    print(dp[0][0])", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    l = []\n    for j in range(N):\n        Arr = list(map(int, input().split()))\n        l.append(Arr)\n    for j in range(N - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "def array_safe_get(arr, i):\n    if 0 <= i < len(arr):\n        return arr[i]\n    return 0\n\ndef handle(lines):\n    c = [0]\n    for line in lines:\n        c = [max(array_safe_get(c, index) + element, array_safe_get(c, index - 1) + element) for (index, element) in enumerate(line)]\n    return max(c)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sums = []\n    lines = [list(map(int, input().split())) for i in range(n)]\n    print(handle(lines))", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "t = int(input())\nfor i in range(t):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "class Solution:\n\n    def solve(self, matrix, rows, cols):\n        prev_row = matrix[0]\n        next_row = []\n        for row in range(1, rows):\n            next_row = matrix[row][:]\n            for (key, value) in enumerate(prev_row):\n                next_row[key] = max(next_row[key], matrix[row][key] + value)\n                next_row[key + 1] = max(next_row[key + 1], matrix[row][key + 1] + value)\n            prev_row = next_row[:]\n        return max(prev_row)\n\nclass Driver:\n\n    def __init__(self):\n        self._solver = Solution()\n\n    def drive(self):\n        test_cases = int(input().strip())\n        for _ in range(test_cases):\n            rows = int(input().strip())\n            matrix = []\n            for row in range(rows):\n                array = list(map(int, input().strip().split(' ')))\n                matrix.append(array)\n            ans = self._solver.solve(matrix, rows, rows)\n            print(ans)\nDriver().drive()", "def largest_sum(triangle):\n    n = len(triangle)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[n - 1][i] = triangle[n - 1][i]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] = triangle[i][j] + max(dp[i + 1][j], dp[i + 1][j + 1])\n    return dp[0][0]\nfor _ in range(int(input())):\n    n = int(input())\n    triangle = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        triangle.append(row)\n    print(largest_sum(triangle))", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "def f(a, i, j, dp):\n    if i == len(a) - 1:\n        return a[i][j]\n    if dp[i][j] != -1:\n        return dp[i][j]\n    down = a[i][j] + f(a, i + 1, j, dp)\n    diag = a[i][j] + f(a, i + 1, j + 1, dp)\n    maxPathSum = max(down, diag)\n    dp[i][j] = maxPathSum\n    return maxPathSum\nT = int(input())\nwhile T > 0:\n    T -= 1\n    N = int(input())\n    bigList = []\n    dp = []\n    while N > 0:\n        N -= 1\n        bigList.append(list(map(int, input().split())))\n    dp = [[-1 for col in row] for row in bigList]\n    print(f(bigList, 0, 0, dp))", "def f(a, i, j, dp):\n    if i == len(a) - 1:\n        return a[i][j]\n    if dp[i][j] != -1:\n        return dp[i][j]\n    down = a[i][j] + f(a, i + 1, j, dp)\n    diag = a[i][j] + f(a, i + 1, j + 1, dp)\n    maxPathSum = max(down, diag)\n    dp[i][j] = maxPathSum\n    return maxPathSum\nT = int(input())\nwhile T > 0:\n    T -= 1\n    N = int(input())\n    bigList = []\n    dp = []\n    while N > 0:\n        N -= 1\n        bigList.append(list(map(int, input().split())))\n    dp = [[-1 for col in row] for row in bigList]\n    print(f(bigList, 0, 0, dp))", "for i in range(int(input())):\n    l = []\n    n = int(input())\n    for j in range(n):\n        z = list(map(int, input().split()))\n        l.append(z)\n    for j in range(n - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "for _ in range(int(input())):\n    n = int(input())\n    li = list()\n    for i in range(n):\n        li.append(list(map(int, input().split())))\n    for i in range(1, n):\n        li[i][0] += li[i - 1][0]\n    for i in range(1, n):\n        for j in range(1, i + 1):\n            if j == i:\n                li[i][j] += li[i - 1][j - 1]\n            else:\n                li[i][j] = li[i][j] + max(li[i - 1][j], li[i - 1][j - 1])\n    print(max(li[-1]))", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "for i in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    k = [[0 for i in range(n)] for j in range(1, n + 1)]\n    k[0][0] = l[0][0]\n    for i in range(1, n):\n        k[i][0] = k[i - 1][0] + l[i][0]\n    for i in range(1, n):\n        for j in range(1, i + 1):\n            k[i][j] = l[i][j] + max(k[i - 1][j], k[i - 1][j - 1])\n    print(max(k[-1]))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = []\n    for j in range(n):\n        a = [int(j) for j in input().split()]\n        lst.append(a)\n    for i in range(n - 1, -1, -1):\n        for j in range(0, i):\n            if lst[i][j] <= lst[i][j + 1]:\n                lst[i - 1][j] = lst[i - 1][j] + lst[i][j + 1]\n            else:\n                lst[i - 1][j] = lst[i - 1][j] + lst[i][j]\n    print(lst[0][0])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst = []\n    for j in range(n):\n        a = [int(j) for j in input().split()]\n        lst.append(a)\n    for i in range(n - 1, -1, -1):\n        for j in range(0, i):\n            if lst[i][j] <= lst[i][j + 1]:\n                lst[i - 1][j] = lst[i - 1][j] + lst[i][j + 1]\n            else:\n                lst[i - 1][j] = lst[i - 1][j] + lst[i][j]\n    print(lst[0][0])", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    lst = []\n    for i in range(N):\n        temp = [int(i) for i in input().split()]\n        lst.append(temp)\n    for i in range(N - 1, -1, -1):\n        for j in range(0, i):\n            if lst[i][j] >= lst[i][j + 1]:\n                lst[i - 1][j] = lst[i - 1][j] + lst[i][j]\n            else:\n                lst[i - 1][j] = lst[i - 1][j] + lst[i][j + 1]\n    print(lst[0][0])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    for i in range(1, n):\n        arr[i][0] = arr[i][0] + arr[i - 1][0]\n        arr[i][-1] = arr[i][-1] + arr[i - 1][-1]\n        for j in range(1, i):\n            arr[i][j] = arr[i][j] + max(arr[i - 1][j], arr[i - 1][j - 1])\n    print(max(arr[-1]))", "def dp(triangle):\n    n = len(triangle)\n    table = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    table[0][0] = triangle[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                table[i][j] = table[i - 1][j] + triangle[i][j]\n            elif j == i:\n                table[i][j] = table[i - 1][j - 1] + triangle[i][j]\n            else:\n                table[i][j] = max(table[i - 1][j - 1], table[i - 1][j]) + triangle[i][j]\n    return max(table[n - 1])\nfor _ in range(int(input())):\n    triangle = []\n    for i in range(int(input())):\n        triangle.append(list(map(int, input().strip().split())))\n    print(dp(triangle))", "def dp(triangle):\n    n = len(triangle)\n    table = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    table[0][0] = triangle[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                table[i][j] = table[i - 1][j] + triangle[i][j]\n            elif j == i:\n                table[i][j] = table[i - 1][j - 1] + triangle[i][j]\n            else:\n                table[i][j] = max(table[i - 1][j - 1], table[i - 1][j]) + triangle[i][j]\n    return max(table[n - 1])\nfor _ in range(int(input())):\n    triangle = []\n    for i in range(int(input())):\n        triangle.append(list(map(int, input().strip().split())))\n    print(dp(triangle))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for _ in range(n):\n        arr.append(list(map(int, input().strip().split())))\n    for i in range(1, n):\n        arr[i][0] = arr[i][0] + arr[i - 1][0]\n        arr[i][-1] = arr[i][-1] + arr[i - 1][-1]\n        for j in range(1, i):\n            arr[i][j] = arr[i][j] + max(arr[i - 1][j], arr[i - 1][j - 1])\n    print(max(arr[-1]))", "def best_path(r, c, n, triangle, memo=None):\n    if memo is None:\n        memo = {}\n    if f'{r}-{c}' in memo:\n        return memo[f'{r}-{c}']\n    if r == n or c == r + 1:\n        memo[f'{r}-{c}'] = 0\n        return 0\n    ans = triangle[r][c] + max(best_path(r + 1, c, n, triangle, memo), best_path(r + 1, c + 1, n, triangle, memo))\n    memo[f'{r}-{c}'] = ans\n    return ans\nt = int(input())\nfor _ in range(t):\n    triangle = []\n    n = int(input())\n    for i in range(n):\n        vals = list(map(int, input().split()))\n        triangle.append(vals)\n    print(best_path(0, 0, n, triangle))", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "for t in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(1, n + 1):\n        a = []\n        a = [int(i) for i in input().split()]\n        l.append(a)\n    i = n - 1\n    k = 1\n    while i > 0:\n        for j in range(n - k):\n            m = max(l[i][j], l[i][j + 1])\n            l[i - 1][j] = l[i - 1][j] + m\n        i = i - 1\n        k = k + 1\n    print(l[0][0])", "for t in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(1, n + 1):\n        a = []\n        a = [int(i) for i in input().split()]\n        l.append(a)\n    i = n - 1\n    k = 1\n    while i > 0:\n        for j in range(n - k):\n            m = max(l[i][j], l[i][j + 1])\n            l[i - 1][j] = l[i - 1][j] + m\n        i = i - 1\n        k = k + 1\n    print(l[0][0])", "for i in range(int(input())):\n    c = []\n    for i in range(int(input())):\n        c.append([*map(int, input().split())])\n    for x in range(len(c) - 2, -1, -1):\n        for y in range(x + 1):\n            c[x][y] += max(c[x + 1][y], c[x + 1][y + 1])\n    print(c[0][0])", "for i in range(int(input())):\n    c = []\n    for i in range(int(input())):\n        c.append([*map(int, input().split())])\n    for x in range(len(c) - 2, -1, -1):\n        for y in range(x + 1):\n            c[x][y] += max(c[x + 1][y], c[x + 1][y + 1])\n    print(c[0][0])", "def max_path_sum(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n    return triangle[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    triangle = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        triangle.append(row)\n    print(max_path_sum(triangle))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    triangle = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        triangle.append(row)\n    dp = triangle[-1]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[j] = max(dp[j], dp[j + 1]) + triangle[i][j]\n    print(dp[0])", "for _ in range(int(input())):\n    n = int(input())\n    c = []\n    a = []\n    for i in range(n):\n        c.append([0] * n)\n        a.append([0] * n)\n    for i in range(n):\n        x = input().split()\n        for j in range(i + 1):\n            a[i][j] = int(x[j])\n    c[0][0] = a[0][0]\n    for i in range(1, n):\n        c[i][0] = c[i - 1][0] + a[i][0]\n    for i in range(1, n):\n        for j in range(1, i + 1):\n            c[i][j] = max(c[i - 1][j], c[i - 1][j - 1]) + a[i][j]\n    print(max(c[n - 1]))", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = []\n    for x in range(N):\n        a = list(map(int, input().split()))\n        A.append(a)\n    for x in range(N - 2, -1, -1):\n        for y in range(0, x + 1):\n            A[x][y] = A[x][y] + max(A[x + 1][y], A[x + 1][y + 1])\n    print(A[0][0])", "def max_path_sum(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n    return triangle[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    triangle = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        triangle.append(row)\n    print(max_path_sum(triangle))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = []\n    for x in range(n):\n        a = [int(x) for x in input().split()]\n        arr.append(a)\n    for x in range(n - 2, -1, -1):\n        for y in range(0, x + 1):\n            arr[x][y] = arr[x][y] + max(arr[x + 1][y], arr[x + 1][y + 1])\n    print(arr[0][0])", "def solve(i, j):\n    if i == n - 1:\n        return grid[i][j]\n    if j >= len(grid[i]):\n        return -1\n    if dp[i][j] == -1:\n        dp[i][j] = grid[i][j] + max(solve(i + 1, j), solve(i + 1, j + 1))\n    return dp[i][j]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    dp = []\n    grid = []\n    for i in range(n):\n        row = list(map(int, input().split(' ')))\n        grid.append(row)\n        dp.append([-1] * (i + 1))\n    print(solve(0, 0))", "def max_path_sum(triangle):\n    n = len(triangle)\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n    return triangle[0][0]\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        triangle = []\n        for i in range(n):\n            row = list(map(int, input().split()))\n            triangle.append(row)\n        print(max_path_sum(triangle))\nmain()", "import sys\n\ndef dp_max_sum(row, col, n, triangle, cache):\n    if cache[row][col] is not None:\n        return cache[row][col]\n    elif row == n - 1:\n        return triangle[row][col]\n    else:\n        down = dp_max_sum(row + 1, col, n, triangle, cache)\n        down_right = dp_max_sum(row + 1, col + 1, n, triangle, cache)\n        cache[row][col] = triangle[row][col] + max(down, down_right)\n        return cache[row][col]\ntest = int(input())\nwhile test:\n    n = int(sys.stdin.readline().rstrip('\\n'))\n    triangle = []\n    for _ in range(n):\n        line = [int(x) for x in sys.stdin.readline().rstrip('\\n').split()]\n        triangle.append(line)\n    cache = [[None] * n for _ in range(n)]\n    print(dp_max_sum(0, 0, n, triangle, cache))\n    test -= 1", "def max_path_sum(n, arr):\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + arr[i][j]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j - 1] + arr[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + arr[i][j]\n    return max(dp[n - 1])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    print(max_path_sum(n, arr))", "EP = int(input())\nfor i in range(EP):\n    ep = []\n    pc = int(input())\n    for j in range(pc):\n        epc = list(map(int, input().split()))\n        ep.append(epc)\n    for j in range(pc - 2, -1, -1):\n        for k in range(0, j + 1):\n            ep[j][k] += max(ep[j + 1][k], ep[j + 1][k + 1])\n    print(ep[0][0])", "def max_path_sum(n, arr):\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + arr[i][j]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j - 1] + arr[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + arr[i][j]\n    return max(dp[n - 1])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    print(max_path_sum(n, arr))", "EP = int(input())\nfor i in range(EP):\n    ep = []\n    pc = int(input())\n    for j in range(pc):\n        epc = list(map(int, input().split()))\n        ep.append(epc)\n    for j in range(pc - 2, -1, -1):\n        for k in range(0, j + 1):\n            ep[j][k] += max(ep[j + 1][k], ep[j + 1][k + 1])\n    print(ep[0][0])", "def max_path_sum(n, arr):\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = arr[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + arr[i][j]\n            elif j == i:\n                dp[i][j] = dp[i - 1][j - 1] + arr[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + arr[i][j]\n    return max(dp[n - 1])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    print(max_path_sum(n, arr))", "T = int(input())\nres = []\nfor i in range(T):\n    arr = []\n    N = int(input())\n    for x in range(N):\n        arr.append([int(i) for i in input().split()])\n    for i in reversed(range(len(arr) - 1)):\n        for j in range(i + 1):\n            arr[i][j] += max(arr[i + 1][j], arr[i + 1][j + 1])\n    res.append(arr[0][0])\nfor x in res:\n    print(x)", "T = int(input())\nres = []\nfor _ in range(T):\n    arr = []\n    N = int(input())\n    for x in range(N):\n        arr.append([int(i) for i in input().split()])\n    for i in reversed(range(len(arr) - 1)):\n        for j in range(i + 1):\n            arr[i][j] += max(arr[i + 1][j], arr[i + 1][j + 1])\n    res.append(arr[0][0])\nfor x in res:\n    print(x)", "for _ in range(int(input())):\n    n = int(input())\n    c = []\n    a = []\n    for i in range(n):\n        c.append([0] * n)\n        a.append([0] * n)\n    for i in range(n):\n        x = input().split()\n        for j in range(i + 1):\n            a[i][j] = int(x[j])\n    c[0][0] = a[0][0]\n    for i in range(1, n):\n        c[i][0] = c[i - 1][0] + a[i][0]\n    for i in range(1, n):\n        for j in range(1, i + 1):\n            c[i][j] = max(c[i - 1][j], c[i - 1][j - 1]) + a[i][j]\n    print(max(c[n - 1]))", "x = int(input())\nfor i in range(x):\n    y = int(input())\n    l = []\n    for j in range(y):\n        p = list(map(int, input().split()))\n        l.append(p)\n    a = y\n    for _ in range(y - 1, -1, -1):\n        for k in range(0, _):\n            l[_ - 1][k] += max(l[_][k], l[_][k + 1])\n    print(l[0][0])", "def sumintri(arr, n):\n    for i in range(n - 1, -1, -1):\n        for j in range(i):\n            if arr[i][j] > arr[i][j + 1]:\n                arr[i - 1][j] += arr[i][j]\n            else:\n                arr[i - 1][j] += arr[i][j + 1]\n    return arr[0][0]\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for x in range(n):\n        t = list(map(int, input().split()))\n        l.append(t)\n    print(sumintri(l, n))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [list(map(int, input().split())) for i in range(n)]\n    table = [[0 for j in range(i + 1)] for i in range(n)]\n    for i in range(n - 1, -1, -1):\n        for j in range(i, -1, -1):\n            if i == n - 1:\n                table[i][j] = l[i][j]\n            else:\n                table[i][j] = max(l[i][j] + table[i + 1][j], l[i][j] + table[i + 1][j + 1])\n    print(table[0][0])", "def maxTri(i, j, dp):\n    if (i, j) in dp:\n        return dp[i, j]\n    if i >= n or j >= n:\n        return 0\n    dp[i, j] = max(l[i][j] + maxTri(i + 1, j, dp), l[i][j] + maxTri(i + 1, j + 1, dp))\n    return dp[i, j]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [list(map(int, input().split())) for i in range(n)]\n    dp = {}\n    print(maxTri(0, 0, dp))", "def max_path_sum(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n    return triangle[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    triangle = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        triangle.append(row)\n    print(max_path_sum(triangle))", "def max_path_sum(triangle):\n    for i in range(len(triangle) - 2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n    return triangle[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    triangle = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        triangle.append(row)\n    print(max_path_sum(triangle))", "def ans(arr, N):\n    while N:\n        for i in range(N):\n            arr[N - 1][i] += max(arr[N][i], arr[N][i + 1])\n        N -= 1\n    return arr[0][0]\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = []\n    for i in range(N):\n        item = list(map(int, input().split()))\n        arr.append(item)\n    print(ans(arr, N - 1))", "for i in range(int(input())):\n    n = int(input())\n    l = [[int(j) for j in input().split()] for i in range(n)]\n    dp = [[0 for i in range(j + 1)] for j in range(n)]\n    dp[0][0] = l[0][0]\n    for i in range(1, n):\n        for j in range(i + 1):\n            if j == 0:\n                dp[i][j] = dp[i - 1][j] + l[i][j]\n            elif i == j:\n                dp[i][j] = dp[i - 1][j - 1] + l[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1]) + l[i][j]\n    m = 0\n    for i in range(n):\n        if dp[n - 1][i] > m:\n            m = dp[n - 1][i]\n    print(m)", "def ans(arr, N):\n    while N:\n        for i in range(N):\n            arr[N - 1][i] += max(arr[N][i], arr[N][i + 1])\n        N -= 1\n    return arr[0][0]\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = []\n    for i in range(N):\n        item = list(map(int, input().split()))\n        arr.append(item)\n    print(ans(arr, N - 1))", "def max_path_sum(triangle):\n    n = len(triangle)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[n - 1][i] = triangle[n - 1][i]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] = max(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j]\n    return dp[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    triangle = [list(map(int, input().split())) for _ in range(n)]\n    print(max_path_sum(triangle))", "def max_path_sum(triangle):\n    n = len(triangle)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[n - 1][i] = triangle[n - 1][i]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] = max(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j]\n    return dp[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    triangle = [list(map(int, input().split())) for _ in range(n)]\n    print(max_path_sum(triangle))", "def max_path_sum(triangle):\n    n = len(triangle)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[n - 1][i] = triangle[n - 1][i]\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            dp[i][j] = max(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j]\n    return dp[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    triangle = [list(map(int, input().split())) for _ in range(n)]\n    print(max_path_sum(triangle))", "t = int(input())\nfor i in range(t):\n    l = []\n    a = int(input())\n    for j in range(a):\n        b = list(map(int, input().split()))\n        l.append(b)\n    for j in range(a - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "for i in range(int(input())):\n    l = []\n    a = int(input())\n    for j in range(a):\n        b = list(map(int, input().split()))\n        l.append(b)\n    for j in range(a - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "t = int(input())\nfor i in range(t):\n    l = []\n    a = int(input())\n    for j in range(a):\n        b = list(map(int, input().split()))\n        l.append(b)\n    for j in range(a - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "def max_path_sum(triangle):\n    n = len(triangle)\n    for i in range(n - 2, -1, -1):\n        for j in range(i + 1):\n            triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1])\n    return triangle[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    triangle = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        triangle.append(row)\n    print(max_path_sum(triangle))", "t = int(input())\nfor i in range(t):\n    l = []\n    a = int(input())\n    for j in range(a):\n        b = list(map(int, input().split()))\n        l.append(b)\n    for j in range(a - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = []\n    for i in range(n):\n        a = list(map(int, input().split()))\n        m.append(a)\n    k = n - 2\n    for j in range(k, -1, -1):\n        for i in range(len(m[j])):\n            m[j][i] += max(m[j + 1][i], m[j + 1][i + 1])\n    print(m[0][0])", "def fun(arr):\n    new = [[1 for j in range(len(i))] for i in arr]\n    new[-1] = [i for i in arr[-1]]\n    for i in range(len(arr) - 2, -1, -1):\n        for j in range(len(arr[i])):\n            new[i][j] = arr[i][j] + max(new[i + 1][j], new[i + 1][j + 1])\n    return new[0][0]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [list(map(int, input().split())) for _ in range(n)]\n    print(fun(arr))", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "t = int(input())\nfor _ in range(t):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "t = int(input())\nfor i in range(t):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "T = int(input())\nfor i in range(T):\n    l = []\n    m = int(input())\n    for j in range(m):\n        n = list(map(int, input().split()))\n        l.append(n)\n    for j in range(m - 2, -1, -1):\n        for k in range(0, j + 1):\n            l[j][k] += max(l[j + 1][k], l[j + 1][k + 1])\n    print(l[0][0])", "for _ in range(int(input())):\n    n = int(input())\n    k = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        k.append(a)\n    for i in range(n - 2, -1, -1):\n        for o in range(i + 1):\n            k[i][o] += max(k[i + 1][o], k[i + 1][o + 1])\n    print(k[0][0])", "for i in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        g = list(map(int, input().split()))\n        a.append(g)\n    ma = 0\n    for j in range(n - 2, -1, -1):\n        for k in range(j + 1):\n            a[j][k] += max(a[j + 1][k], a[j + 1][k + 1])\n    print(a[0][0])", "def solve():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        a = []\n        for j in range(n):\n            a.append(list(map(int, input().split())))\n        dp = [[0 for j in range(n)] for i in range(n)]\n        dp[0][0] = a[0][0]\n        for i in range(1, n):\n            for j in range(i + 1):\n                if j == 0:\n                    dp[i][j] = dp[i - 1][j] + a[i][j]\n                elif j == i:\n                    dp[i][j] = dp[i - 1][j - 1] + a[i][j]\n                else:\n                    dp[i][j] = a[i][j] + max(dp[i - 1][j - 1], dp[i - 1][j])\n        ans = -1000000000\n        for i in range(n):\n            ans = max(ans, dp[n - 1][i])\n        print(ans)\nsolve()", "for _ in range(int(input())):\n    n = int(input())\n    k = []\n    for j in range(n):\n        a = list(map(int, input().split()))\n        k.append(a)\n    for i in range(n - 2, -1, -1):\n        for o in range(i + 1):\n            k[i][o] += max(k[i + 1][o], k[i + 1][o + 1])\n    print(k[0][0])", "t = int(input())\n\ndef answer(a, b, lookup, x):\n    lookup[0][0] = x[0][0]\n    if a == 1:\n        lookup[1][b] = x[1][b] + x[0][0]\n    if lookup[a][b] == None:\n        if b == 0:\n            lookup[a][0] = x[a][0] + answer(a - 1, 0, lookup, x)\n        else:\n            if b == len(lookup[a]) - 1:\n                ddd = answer(a - 1, b - 1, lookup, x)\n            else:\n                ddd = max(answer(a - 1, b, lookup, x), answer(a - 1, b - 1, lookup, x))\n            lookup[a][b] = x[a][b] + ddd\n    return lookup[a][b]\nfor i in range(t):\n    n = int(input())\n    lookup = [[None for i in range(j + 1)] for j in range(n)]\n    x = []\n    y = []\n    for i in range(n):\n        x.append(list(map(int, input().split())))\n    for yay in range(n):\n        y.append(answer(n - 1, yay, lookup, x))\n    print(max(y))", "def maximum_sum(triangle, N):\n    dp = [0 for i in range(N)]\n    max_sum = 0\n    for i in range(0, N):\n        for j in range(i, -1, -1):\n            dp[j] = max(dp[j], 0 if j == 0 else dp[j - 1]) + triangle[i][j]\n            max_sum = max(dp[j], max_sum)\n    return max(dp)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    triangle = []\n    dp = [[0 for i in range(N * (N - 1) // 2)] for j in range(N)]\n    for times in range(N):\n        triangle.append(list(map(int, input().split())))\n    print(maximum_sum(triangle, N))", "def maximum_sum(triangle, N):\n    dp = [0 for i in range(N)]\n    max_sum = 0\n    for i in range(0, N):\n        for j in range(i, -1, -1):\n            dp[j] = max(dp[j], 0 if j == 0 else dp[j - 1]) + triangle[i][j]\n            max_sum = max(dp[j], max_sum)\n    return max(dp)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    triangle = []\n    dp = [[0 for i in range(N * (N - 1) // 2)] for j in range(N)]\n    for times in range(N):\n        triangle.append(list(map(int, input().split())))\n    print(maximum_sum(triangle, N))"]