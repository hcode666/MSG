["import bisect\nprimes = {2}\nprimes = [False, False] + [True] * 10 ** 6\np = 2\ndp = []\nwhile p * p <= 10 ** 6:\n    if primes[p] == True:\n        for i in range(2 * p, 10 ** 6, p):\n            primes[i] = False\n    p += 1\nfor i in range(2, i):\n    if primes[i] and primes[i - 2]:\n        dp.append(i)\nfor _ in range(int(input())):\n    print(bisect.bisect_right(dp, int(input())))", "import bisect\nprimes = {2}\nprimes = [False, False] + [True] * 10 ** 6\np = 2\ndp = []\nwhile p * p <= 10 ** 6:\n    if primes[p] == True:\n        for i in range(2 * p, 10 ** 6, p):\n            primes[i] = False\n    p += 1\nfor i in range(2, i):\n    if primes[i] and primes[i - 2]:\n        dp.append(i)\nfor _ in range(int(input())):\n    print(bisect.bisect_right(dp, int(input())))", "import bisect\nprimes = {2}\nprimes = [False, False] + [True] * 10 ** 6\np = 2\ndp = []\nwhile p * p <= 10 ** 6:\n    if primes[p] == True:\n        for i in range(2 * p, 10 ** 6, p):\n            primes[i] = False\n    p += 1\nfor i in range(2, i):\n    if primes[i] and primes[i - 2]:\n        dp.append(i)\nfor _ in range(int(input())):\n    print(bisect.bisect_right(dp, int(input())))", "import bisect\nprimes = {2}\nprimes = [False, False] + [True] * 10 ** 6\np = 2\ndp = []\nwhile p * p <= 10 ** 6:\n    if primes[p] == True:\n        for i in range(2 * p, 10 ** 6, p):\n            primes[i] = False\n    p += 1\nfor i in range(2, i):\n    if primes[i] and primes[i - 2]:\n        dp.append(i)\nfor _ in range(int(input())):\n    print(bisect.bisect_right(dp, int(input())))", "import bisect\nprimes = {2}\nprimes = [False, False] + [True] * 10 ** 6\np = 2\ndp = []\nwhile p * p <= 10 ** 6:\n    if primes[p] == True:\n        for i in range(2 * p, 10 ** 6, p):\n            primes[i] = False\n    p += 1\nfor i in range(2, i):\n    if primes[i] and primes[i - 2]:\n        dp.append(i)\nfor _ in range(int(input())):\n    print(bisect.bisect_right(dp, int(input())))", "e = 10 ** 6 + 1\nsieve = [1] * e\nsieve[0] = sieve[1] = 0\nfor i in range(2, e):\n    for j in range(i * i, e, i):\n        sieve[j] = 0\ndp = [0] * e\nfor i in range(2, e):\n    dp[i] += dp[i - 1]\n    if sieve[i] and sieve[i - 2]:\n        dp[i] += 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(dp[n])", "def get_seive(n):\n    seive = [0] * (n + 1)\n    seive[0] = 1\n    seive[1] = 1\n    for i in range(2, n):\n        if seive[i] != 0:\n            continue\n        for j in range(2, n // i + 1):\n            seive[i * j] += 1\n    primes = []\n    for i in range(n + 1):\n        if seive[i] == 0:\n            primes.append(i)\n    return (seive, primes)\n\ndef get_dp(seive, primes, n):\n    dp = [0] * (n + 1)\n    for p in primes:\n        if 2 + p <= n and seive[2 + p] == 0:\n            dp[2 + p] = 1\n    sdp = [0] * (n + 1)\n    for i in range(1, n + 1):\n        sdp[i] = sdp[i - 1] + dp[i]\n    return sdp\n(SEIVE, PRIMES) = get_seive(1000007)\nDP = get_dp(SEIVE, PRIMES, 1000007)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    print(DP[n])", "import bisect\nprimes = {2}\nprimes = [False, False] + [True] * 10 ** 6\np = 2\ndp = []\nwhile p * p <= 10 ** 6:\n    if primes[p] == True:\n        for i in range(2 * p, 10 ** 6, p):\n            primes[i] = False\n    p += 1\nfor i in range(2, i):\n    if primes[i] and primes[i - 2]:\n        dp.append(i)\nfor _ in range(int(input())):\n    print(bisect.bisect_right(dp, int(input())))", "def Solve(n, ans):\n    primeL = [True for i in range(n + 1)]\n    primeL[0] = False\n    primeL[1] = False\n    p = 2\n    while p * p <= n:\n        if primeL[p] == True:\n            for i in range(p * p, n + 1, p):\n                primeL[i] = False\n        p += 1\n    for i in range(n + 1):\n        if primeL[i] and primeL[i - 2]:\n            ans[i] = ans[i - 1] + 1\n        else:\n            ans[i] = ans[i - 1]\n    return ans\nans = [0] * 1000001\nL = Solve(1000000, ans)\nfor _ in range(int(input())):\n    print(L[int(input())])", "def Solve(n, ans):\n    primeL = [True for i in range(n + 1)]\n    primeL[0] = False\n    primeL[1] = False\n    p = 2\n    while p * p <= n:\n        if primeL[p] == True:\n            for i in range(p * p, n + 1, p):\n                primeL[i] = False\n        p += 1\n    for i in range(n + 1):\n        if primeL[i] and primeL[i - 2]:\n            ans[i] = ans[i - 1] + 1\n        else:\n            ans[i] = ans[i - 1]\n    return ans\nans = [0] * 1000001\nL = Solve(1000000, ans)\nfor _ in range(int(input())):\n    print(L[int(input())])", "def Solve(n, ans):\n    primeL = [True for i in range(n + 1)]\n    primeL[0] = False\n    primeL[1] = False\n    p = 2\n    while p * p <= n:\n        if primeL[p] == True:\n            for i in range(p * p, n + 1, p):\n                primeL[i] = False\n        p += 1\n    for i in range(n + 1):\n        if primeL[i] and primeL[i - 2]:\n            ans[i] = ans[i - 1] + 1\n        else:\n            ans[i] = ans[i - 1]\n    return ans\nans = [0] * 1000001\nL = Solve(1000000, ans)\nfor _ in range(int(input())):\n    print(L[int(input())])", "N = 10 ** 6\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, 1001):\n    if dp[i] == 0:\n        j = i * i\n        while j <= N:\n            dp[j] = 1\n            j = j + i\npre = [0] * (N + 1)\nfor i in range(2, N + 1):\n    pre[i] = pre[i - 1]\n    if dp[i] == 0 and dp[i - 2] == 0:\n        pre[i] = pre[i] + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(pre[n])", "N = 10 ** 6\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, 1001):\n    if dp[i] == 0:\n        j = i * i\n        while j <= N:\n            dp[j] = 1\n            j = j + i\npre = [0] * (N + 1)\nfor i in range(2, N + 1):\n    pre[i] = pre[i - 1]\n    if dp[i] == 0 and dp[i - 2] == 0:\n        pre[i] = pre[i] + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(pre[n])", "N = 10 ** 6\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, 1001):\n    if dp[i] == 0:\n        j = i * i\n        while j <= N:\n            dp[j] = 1\n            j = j + i\npre = [0] * (N + 1)\nfor i in range(2, N + 1):\n    pre[i] = pre[i - 1]\n    if dp[i] == 0 and dp[i - 2] == 0:\n        pre[i] = pre[i] + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(pre[n])", "N = 10 ** 6\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, 1001):\n    if dp[i] == 0:\n        j = i * i\n        while j <= N:\n            dp[j] = 1\n            j = j + i\npre = [0] * (N + 1)\nfor i in range(2, N + 1):\n    pre[i] = pre[i - 1]\n    if dp[i] == 0 and dp[i - 2] == 0:\n        pre[i] = pre[i] + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(pre[n])", "N = 10 ** 6\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, 1001):\n    if dp[i] == 0:\n        j = i * i\n        while j <= N:\n            dp[j] = 1\n            j = j + i\npre = [0] * (N + 1)\nfor i in range(2, N + 1):\n    pre[i] = pre[i - 1]\n    if dp[i] == 0 and dp[i - 2] == 0:\n        pre[i] = pre[i] + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(pre[n])", "N = 10 ** 6\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, 1001):\n    if dp[i] == 0:\n        j = i * i\n        while j <= N:\n            dp[j] = 1\n            j = j + i\npre = [0] * (N + 1)\nfor i in range(2, N + 1):\n    pre[i] = pre[i - 1]\n    if dp[i] == 0 and dp[i - 2] == 0:\n        pre[i] = pre[i] + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(pre[n])", "prime = [True for i in range(1000000 + 1)]\n(prime[0], prime[1]) = (False, False)\np = 2\nwhile p * p <= 1000000:\n    if prime[p] == True:\n        for i in range(p * p, 1000000 + 1, p):\n            prime[i] = False\n    p += 1\narr = [0] * 1000001\ncnt = 0\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        cnt += 1\n    arr[i] = cnt\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    print(arr[n])", "prime = [True for i in range(1000000 + 1)]\n(prime[0], prime[1]) = (False, False)\np = 2\nwhile p * p <= 1000000:\n    if prime[p] == True:\n        for i in range(p * p, 1000000 + 1, p):\n            prime[i] = False\n    p += 1\narr = [0] * 1000001\ncnt = 0\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        cnt += 1\n    arr[i] = cnt\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    print(arr[n])", "prime = [True for i in range(1000000 + 1)]\n(prime[0], prime[1]) = (False, False)\np = 2\nwhile p * p <= 1000000:\n    if prime[p] == True:\n        for i in range(p * p, 1000000 + 1, p):\n            prime[i] = False\n    p += 1\narr = [0] * 1000001\ncnt = 0\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        cnt += 1\n    arr[i] = cnt\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    print(arr[n])", "prime = [True for i in range(1000000 + 1)]\n(prime[0], prime[1]) = (False, False)\np = 2\nwhile p * p <= 1000000:\n    if prime[p] == True:\n        for i in range(p * p, 1000000 + 1, p):\n            prime[i] = False\n    p += 1\narr = [0] * 1000001\ncnt = 0\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        cnt += 1\n    arr[i] = cnt\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    print(arr[n])", "import math\n\ndef SieveOfEratosthenes(num):\n    prime = [True for i in range(num + 1)]\n    p = 2\n    while p * p <= num:\n        if prime[p] == True:\n            for i in range(p * p, num + 1, p):\n                prime[i] = False\n        p += 1\n    return prime\n\ndef preprocess_dp(N):\n    primes = SieveOfEratosthenes(N)\n    dp = [0 for i in range(N + 1)]\n    for i in range(5, N + 1):\n        dp[i] = dp[i - 1]\n        if primes[i] and primes[i - 2]:\n            dp[i] = dp[i] + 1\n    return dp\ndp = preprocess_dp(1000000)\nfor _ in range(int(input())):\n    N = int(input())\n    print(dp[N])", "prime = [True for i in range(1000000 + 1)]\n(prime[0], prime[1]) = (False, False)\np = 2\nwhile p * p <= 1000000:\n    if prime[p] == True:\n        for i in range(p * p, 1000000 + 1, p):\n            prime[i] = False\n    p += 1\narr = [0] * 1000001\ncnt = 0\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        cnt += 1\n    arr[i] = cnt\nt = int(input())\nfor h in range(t):\n    n = int(input())\n    print(arr[n])", "import math\n\ndef sieveOfEratosthenes(n):\n    primes = [0, 0] + [1] * (n - 1)\n    p = 2\n    while p ** 2 <= n:\n        if primes[p]:\n            for i in range(p ** 2, n + 1, p):\n                primes[i] = 0\n        p += 1\n    return primes\n\ndef precompute():\n    MAX = 10 ** 6\n    ans = {}\n    primes = sieveOfEratosthenes(MAX)\n    c = 0\n    for i in range(2, MAX + 1):\n        if primes[i] and primes[i - 2]:\n            c += 1\n        ans[i] = c\n    return ans\nans = precompute()\nfor T in range(int(input())):\n    n = int(input())\n    print(ans[n])", "N = [None] * (10 ** 6 + 1)\nfor i in range(2, len(N)):\n    if N[i] == None:\n        N[i] = 1\n        for i in range(2 * i, len(N), i):\n            N[i] = 0\nans = [0] * (10 ** 6 + 1)\nans1 = 0\nfor i in range(3, 10 ** 6 + 1, 1):\n    if N[i] and N[i - 2]:\n        ans1 += 1\n    ans[i - 1] = ans1\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(ans[n - 1])", "N = [None] * (10 ** 6 + 1)\nfor i in range(2, len(N)):\n    if N[i] == None:\n        N[i] = 1\n        for i in range(2 * i, len(N), i):\n            N[i] = 0\nans = [0] * (10 ** 6 + 1)\nans1 = 0\nfor i in range(3, 10 ** 6 + 1, 1):\n    if N[i] and N[i - 2]:\n        ans1 += 1\n    ans[i - 1] = ans1\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(ans[n - 1])", "k = 1000000\na = []\nans = [0] * (k + 1)\n\ndef SieveOfEratosthenes(n, ans):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for i in range(5, k + 1):\n        if prime[i]:\n            if prime[i - 2]:\n                ans[i] = ans[i - 1] + 1\n            else:\n                ans[i] = ans[i - 1]\n        else:\n            ans[i] = ans[i - 1]\nSieveOfEratosthenes(k, ans)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    print(ans[n])", "def snek(n):\n    s = [1 for i in range(n + 1)]\n    p = 2\n    s[0] = 0\n    s[1] = 0\n    while p * p <= n:\n        if s[p] == 1:\n            j = 2\n            for i in range(p * j, n + 1, p):\n                s[i] = 0\n                j += 1\n        p += 1\n    l = []\n    for i in range(2, n + 1):\n        if s[i]:\n            l.append(i)\n    return s\nx = 1000000\nres = snek(x)\nc = 0\nl = [0] * 1000001\nl[0] = 0\nl[1] = 0\nfor i in range(2, x + 1):\n    if res[i] == 1 and res[i - 2] == 1 and (i - (i - 2) == 2):\n        c += 1\n    l[i] = c\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(l[n])", "def SieveOfEratosthenes(n):\n    prime = [1 for i in range(n + 1)]\n    p = 2\n    prime[0] = 0\n    prime[1] = 0\n    while p * p <= n:\n        if prime[p] == 1:\n            j = 2\n            for i in range(p * j, n + 1, p):\n                prime[i] = 0\n                j += 1\n        p += 1\n    l = []\n    for i in range(2, n + 1):\n        if prime[i]:\n            l.append(i)\n    return prime\nX = 1000000\nres = SieveOfEratosthenes(X)\nc = 0\nl = [0] * 1000001\nl[0] = 0\nl[1] = 0\nfor i in range(2, X + 1):\n    if res[i] == 1 and res[i - 2] == 1 and (i - (i - 2) == 2):\n        c += 1\n    l[i] = c\nfor i in range(int(input())):\n    print(l[int(input())])", "primes = [1] * (10 ** 6 + 1)\nprimes[0] = primes[1] = 0\nfor i in range(2, 10 ** 6 + 1):\n    if primes[i] == 1:\n        x = 2\n        while x * i < 10 ** 6 + 1:\n            primes[i * x] = 0\n            x += 1\nans = [0] * (10 ** 6 + 1)\ns = 1\nfor i in range(2, 10 ** 6 + 1):\n    if primes[i] == 1 and primes[i - 2] == 1:\n        ans[i] = s\n        s += 1\n    else:\n        ans[i] = s\nfor _ in range(int(input())):\n    x = int(input())\n    print(ans[x] - 1)", "prime_rn = 1000001\nprime = [True] * prime_rn\nprime[0] = prime[1] = False\nfor i in range(2, 10 ** 6 + 1):\n    if prime[i] == 1:\n        y = 2\n        while y * i < 10 ** 6 + 1:\n            prime[i * y] = 0\n            y += 1\nans = [0] * 1000001\nstring = 1\nfor i in range(2, 10 ** 6 + 1):\n    if prime[i] == 1 and prime[i - 2] == 1:\n        ans[i] = string\n        string += 1\n    else:\n        ans[i] = string\nT = int(input())\nfor j in range(T):\n    N = int(input())\n    print(ans[N] - 1)", "Prange = 10 ** 6 + 1\nprime = [True] * Prange\ncount = [0] * Prange\nprime[0] = prime[1] = False\nfor i in range(2, int(Prange / 2) + 1):\n    if prime[i]:\n        for j in range(i * 2, Prange, i):\n            prime[j] = False\nfor i in range(2, Prange):\n    if prime[i] and prime[i - 2]:\n        count[i] = count[i - 1] + 1\n    else:\n        count[i] = count[i - 1]\nT = int(input())\nfor id in range(T):\n    N = int(input())\n    print(count[N])", "l = [True] * 1000001\nans = [0] * 1000001\nl[0] = l[1] = False\nfor i in range(2, 500001):\n    if l[i]:\n        for j in range(i + i, 1000001, i):\n            l[j] = False\nans[0] = ans[1] = 0\nfor i in range(2, 1000001):\n    if l[i] and l[i - 2]:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nT = int(input())\nfor tc in range(T):\n    N = int(input())\n    print(ans[N])", "l = 10 ** 6 + 1\nis_prime = [True] * l\ncount = [0] * l\nis_prime[0] = is_prime[1] = False\nfor i in range(2, int(l / 2) + 1):\n    if is_prime[i]:\n        for j in range(i * 2, l, i):\n            is_prime[j] = False\nfor i in range(2, l):\n    if is_prime[i] and is_prime[i - 2]:\n        count[i] = count[i - 1] + 1\n    else:\n        count[i] = count[i - 1]\nT = int(input())\nfor tc in range(T):\n    N = int(input())\n    print(count[N])", "n = 1000000 + 1\nans = []\nfor j in range(n + 1):\n    ans.append(0)\nprime = [True for i in range(n + 1)]\np = 2\nwhile p * p <= n:\n    if prime[p] == True:\n        for i in range(p * p, n + 1, p):\n            prime[i] = False\n    p += 1\nfor p in range(5, n + 1):\n    if prime[p]:\n        if prime[p - 2]:\n            ans[p] = ans[p - 1] + 1\n        else:\n            ans[p] = ans[p - 1]\n    else:\n        ans[p] = ans[p - 1]\nt = int(input())\nfor i in range(t):\n    a = int(input())\n    print(ans[a])", "from re import L\nimport sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nprime = [True for i in range(10 ** 6 + 1)]\n\ndef SieveOfEratosthenes(n):\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\nSieveOfEratosthenes(10 ** 6)\ncount = 0\na = [0] * (10 ** 6 + 1)\nfor i in range(5, 10 ** 6 + 1):\n    if prime[i - 2] and prime[i]:\n        count += 1\n    a[i] = count\nt = int(input())\nfor i in range(t):\n    n = inp()\n    print(a[n])", "primes = [1] * (10 ** 6 + 1)\nprimes[0] = primes[1] = 0\nfor i in range(2, 10 ** 6 + 1):\n    if primes[i] == 1:\n        x = 2\n        while x * i < 10 ** 6 + 1:\n            primes[i * x] = 0\n            x += 1\nans = [0] * (10 ** 6 + 1)\ns = 1\nfor i in range(2, 10 ** 6 + 1):\n    if primes[i] == 1 and primes[i - 2] == 1:\n        ans[i] = s\n        s += 1\n    else:\n        ans[i] = s\nfor _ in range(int(input())):\n    x = int(input())\n    print(ans[x] - 1)", "v = [True] * 1000001\nans = [0] * 1000001\nv[0] = v[1] = False\nfor i in range(2, 500001):\n    if v[i]:\n        for j in range(i + i, 1000001, i):\n            v[j] = False\nans[0] = ans[1] = 0\nfor i in range(2, 1000001):\n    if v[i] and v[i - 2]:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nT = int(input())\nfor tc in range(T):\n    N = int(input())\n    print(ans[N])", "v = [1] * 1000001\nans = [0] * 1000001\nv[0] = 0\nv[1] = 0\np = []\nfor i in range(2, 500001):\n    if v[i] == 1:\n        p.append(i)\n        for j in range(i + i, 1000001, i):\n            v[j] = 0\nans[0] = ans[1] = 0\nfor i in range(2, 1000001):\n    if v[i] > 0 and v[i - 2] > 0:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nT = int(input())\nfor tc in range(T):\n    N = int(input())\n    print(ans[N])", "tests = int(input())\nmx = 10 ** 6 + 1\nprimes = [0, 0] + [1] * mx\nfor i in range(2, int(mx ** 0.5) + 1):\n    if primes[i]:\n        for j in range(i ** 2, mx, i):\n            primes[j] = 0\ncount = 0\na = [0] * mx\nfor i in range(mx):\n    if primes[i - 2] and primes[i]:\n        count += 1\n    a[i] = count\nfor t in range(tests):\n    N = int(input())\n    print(a[N])", "t = int(input())\nl = [True] * 1000001\nl[0] = False\nl[1] = False\nans = [0] * 1000001\nfor i in range(2, int(1000001 ** 0.5) + 1):\n    if l[i] == True:\n        for j in range(i * i, 1000001, i):\n            l[j] = False\ncount = 0\nfor i in range(5, 1000001):\n    if l[i] and l[i - 2]:\n        count = count + 1\n    ans[i] = count\nfor _ in range(t):\n    n = int(input())\n    print(ans[n])", "try:\n    n = 1000000\n    t = int(input())\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p ** 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    prime_set = []\n    last_prime = 2\n    for x in range(n + 1):\n        if prime[x]:\n            last_prime = x\n            prime_set.append(x)\n        else:\n            prime_set.append(last_prime)\n    result_set = []\n    count = 0\n    for (i, el) in enumerate(prime_set[:-1]):\n        if el + 2 == prime_set[i + 1]:\n            count += 1\n        result_set.append(count)\n    for _ in range(t):\n        n = int(input())\n        print(result_set[n - 1])\nexcept Exception:\n    pass", "import bisect\nfrom functools import lru_cache\nimport sys\nfrom bisect import bisect_right\nimport math\nfrom collections import Counter, deque\nmod = 10 ** 9 + 7\ninf = float('inf')\nsieve_limit = 10 ** 6\n\ndef arrInt():\n    return list(map(int, input().split()))\n\ndef generateSieve():\n    primes = []\n    arr = [1] * (sieve_limit + 1)\n    arr[0] = 0\n    arr[1] = 0\n    for i in range(2, sieve_limit + 1):\n        if arr[i] == 0:\n            continue\n        primes.append(i)\n        j = i * i\n        while j <= sieve_limit:\n            arr[j] = 0\n            j += i\n    return primes\nprimes = generateSieve()\nans_arr = [0] * len(primes)\ncounter = Counter()\nfor i in range(1, len(primes)):\n    ans_arr[i] = counter[primes[i] - 2] + ans_arr[i - 1]\n    counter[primes[i]] += 1\nTESTING = False\nif TESTING:\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nelse:\n    input = sys.stdin.readline\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    m = bisect.bisect_right(primes, n)\n    print(ans_arr[m - 1])", "primes = [True] * 1000001\nprimes[0] = False\nprimes[1] = False\nfor i in range(2, 1001):\n    if primes[i]:\n        for j in range(i * i, 1000001, i):\n            primes[j] = False\nans = [0] * 1000001\nfor i in range(2, 1000001):\n    if primes[i] and primes[i - 2]:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\ntc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    print(ans[n])", "def prime(n, final):\n    arr = [True for i in range(n + 1)]\n    p = 2\n    arr[0] = False\n    arr[1] = False\n    while p * p <= n:\n        if arr[p] == True:\n            for i in range(p * 2, n + 1, p):\n                arr[i] = False\n        p += 1\n    for i in range(2, n + 1):\n        if arr[i] == True and arr[i - 2] == True:\n            final[i] = final[i - 1] + 1\n        else:\n            final[i] = final[i - 1]\nfinal = [0 for i in range(1000001)]\nprime(1000000, final)\nfor _ in range(int(input())):\n    print(final[int(input())])", "prime = [1] * 1000001\n(prime[0], prime[1]) = (0, 0)\nfor i in range(2, 1000001):\n    if prime[i] == 1:\n        for j in range(i * i, 1000001, i):\n            prime[j] = 0\nans = [0, 0]\ncur = 0\nfor i in range(2, len(prime)):\n    if prime[i] and prime[i - 2]:\n        cur += 1\n    ans.append(cur)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(ans[n])", "def some(n):\n    my_babys = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if my_babys:\n            for i in range(p * p, n + 1, p):\n                my_babys[i] = False\n        p += 1\n    ans = [0] * (n + 1)\n    c = 0\n    for i in range(5, n + 1):\n        if my_babys[i] and my_babys[i - 2]:\n            c += 1\n        ans[i] = c\n    return ans\nans = some(10 ** 6)\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans[n])", "t = int(input())\n\ndef soe(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    ans = [0 for i in range(n + 1)]\n    c = 0\n    for i in range(5, n + 1):\n        if prime[i] and prime[i - 2]:\n            c += 1\n        ans[i] = c\n    return ans\nans = soe(10 ** 6)\nfor i in range(t):\n    n = int(input())\n    print(ans[n])", "t = int(input())\n\ndef soe(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    ans = [0 for i in range(n + 1)]\n    c = 0\n    for i in range(5, n + 1):\n        if prime[i] and prime[i - 2]:\n            c += 1\n        ans[i] = c\n    return ans\nans = soe(10 ** 6)\nfor i in range(t):\n    n = int(input())\n    print(ans[n])", "N = 10 ** 6\ndp = [0] * (N + 1)\ndp[0] = 1\ndp[1] = 1\nfor i in range(2, 1001):\n    if dp[i] == 0:\n        j = i * i\n        while j <= N:\n            dp[j] = 1\n            j = j + i\npre = [0] * (N + 1)\nfor i in range(2, N + 1):\n    pre[i] = pre[i - 1]\n    if dp[i] == 0 and dp[i - 2] == 0:\n        pre[i] = pre[i] + 1\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    print(pre[n])", "arr = [0] * (10 ** 6 + 1)\n\ndef seive(n=10 ** 6 + 1):\n    prime = [True] * n\n    (prime[0], prime[1]) = (False, False)\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n, p):\n                prime[i] = False\n        p += 1\n    for i in range(2, n):\n        if prime[i] and prime[i - 2]:\n            arr[i] += arr[i - 1] + 1\n        else:\n            arr[i] = arr[i - 1]\nseive()\nfor _ in range(int(input())):\n    print(arr[int(input())])", "from math import sqrt\nfrom bisect import bisect\n\ndef sieve(n):\n    k = sqrt(n)\n    d = list(range(n + 1))\n    p = []\n    i = 2\n    if n == 1:\n        return []\n    while d[i] <= k:\n        if d[i] != 0:\n            for j in range(i * i, n + 1, i):\n                d[j] = 0\n            p.append(i)\n        i += 1\n    return [i for i in range(3, n + 1) if d[i] != 0]\nprimes = sieve(10 ** 6)\nplimit = len(primes)\nprectpl = []\nfor i in range(1, plimit):\n    if primes[i] - primes[i - 1] == 2:\n        prectpl.append(primes[i])\nfor _ in range(int(input())):\n    n = int(input())\n    print(bisect(prectpl, n))", "def isprime(n):\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sol():\n    p = [0, 0, 0, 0, 0, 1, 1, 2, 2]\n    prev = True\n    count = 2\n    for i in range(9, 10 ** 6 + 2, 2):\n        if isprime(i):\n            if prev:\n                count += 1\n            prev = True\n        else:\n            prev = False\n        p.extend([count, count])\n    return p\ngood = sol()\nfor t in range(int(input())):\n    print(good[int(input())])", "def isprime(n):\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sol():\n    p = [0, 0, 0, 0, 0, 1, 1, 2, 2]\n    prev = True\n    count = 2\n    for i in range(9, 10 ** 6 + 1, 2):\n        if isprime(i):\n            if prev:\n                count += 1\n            prev = True\n        else:\n            prev = False\n        p.extend([count, count])\n    return p\ngood = sol()\nfor t in range(int(input())):\n    n = int(input())\n    print(good[n])", "def isprime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef sol():\n    p = [0, 0, 0, 0, 0, 1, 1, 2, 2]\n    prev = True\n    count = 2\n    for i in range(9, 10 ** 6 + 1, 2):\n        if isprime(i):\n            if prev:\n                count += 1\n            prev = True\n        else:\n            prev = False\n        p.extend([count, count])\n    return p\ngood = sol()\nfor t in range(int(input())):\n    n = int(input())\n    print(good[n])", "def SieveOfEratosthenes(n, ans):\n    primeL = [True for i in range(n + 1)]\n    primeL[0] = False\n    primeL[1] = False\n    p = 2\n    while p * p <= n:\n        if primeL[p] == True:\n            for i in range(p * p, n + 1, p):\n                primeL[i] = False\n        p += 1\n    for i in range(n + 1):\n        if primeL[i] and primeL[i - 2]:\n            ans[i] = ans[i - 1] + 1\n        else:\n            ans[i] = ans[i - 1]\n    return ans\nans = [0] * 1000001\nL = SieveOfEratosthenes(1000000, ans)\nfor _ in range(int(input())):\n    print(L[int(input())])", "def SieveOfEratosthenes(n, ans):\n    primeL = [True for i in range(n + 1)]\n    primeL[0] = False\n    primeL[1] = False\n    p = 2\n    while p * p <= n:\n        if primeL[p] == True:\n            for i in range(p * p, n + 1, p):\n                primeL[i] = False\n        p += 1\n    for i in range(n + 1):\n        if primeL[i] and primeL[i - 2]:\n            ans[i] = ans[i - 1] + 1\n        else:\n            ans[i] = ans[i - 1]\n    return ans\nans = [0] * 1000001\nL = SieveOfEratosthenes(1000000, ans)\nfor _ in range(int(input())):\n    print(L[int(input())])", "import sys\nsys.setrecursionlimit(10 ** 5 + 1)\ninf = int(10 ** 20)\nmax_val = inf\nmin_val = -inf\nRW = lambda : sys.stdin.readline().strip()\nRI = lambda : int(RW())\nRMI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nRWI = lambda : [x for x in sys.stdin.readline().strip().split()]\n\ndef Sieve(N):\n    primes = [True] * (N + 1)\n    primes[0] = False\n    primes[1] = False\n    i = 2\n    while i * i < N:\n        if primes[i]:\n            for j in range(i * i, N + 1, i):\n                primes[j] = False\n        i += 1\n    cnt = [0] * (N + 1)\n    for i in range(2, N + 1):\n        cnt[i] = cnt[i - 1]\n        if primes[i] and primes[i - 2]:\n            cnt[i] += 1\n    return cnt\ncnt = Sieve(1000005)\nfor _ in range(RI()):\n    N = RI()\n    print(cnt[int(N)])", "from collections import defaultdict\nans = defaultdict(lambda : 0)\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    (prime[0], prime[1]) = (False, False)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    count = 0\n    for i in range(2, n + 1):\n        if prime[i - 2] and prime[i]:\n            count += 1\n        ans[i] = count\nSieveOfEratosthenes(10 ** 6 + 10)\nfor i in range(int(input())):\n    n = int(input())\n    print(ans[n])", "def Prime(n):\n    if n & 1 == 0:\n        return False\n    d = 3\n    while d * d <= n:\n        if n % d == 0:\n            return False\n        d = d + 2\n    return True\nans = []\nfor i in range(1000002):\n    ans.append(0)\nfor i in range(5, 1000001):\n    if Prime(i - 2) and Prime(i):\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nt = int(input())\nwhile t:\n    n = int(input())\n    print(ans[n])\n    t -= 1", "ans = set()\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    c = 0\n    for p in range(2, n):\n        if prime[p]:\n            ans.add(p)\nSieveOfEratosthenes(1000001)\nansf = [0] * 1000006\nc = 0\nfor i in range(5, 1000001):\n    if i in ans and i - 2 in ans:\n        c += 1\n    ansf[i] = c\nfor _ in range(int(input())):\n    n = int(input())\n    print(ansf[n - 1])", "l = [True] * 1000001\n(l[0], l[1]) = (False, False)\nfor i in range(2, 1000):\n    if l[i] == True:\n        for j in range(i * i, 1000001, i):\n            l[j] = False\nl1 = [0] * 1000001\nfor i in range(5, 1000001):\n    if l[i] and l[i - 2]:\n        l1[i] = l1[i - 1] + 1\n    else:\n        l1[i] = l1[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    print(l1[n])", "prime = [True] * 1000001\nprime[0] = prime[1] = False\nfor num in range(2, 1000):\n    for x in range(num * num, 1000001, num):\n        prime[x] = False\nanswer = [0] * 1000001\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        answer[i] = answer[i - 1] + 1\n    else:\n        answer[i] = answer[i - 1]\nprintAns = []\nfor _ in range(int(input())):\n    N = printAns.append(answer[int(input())])\nfor x in printAns:\n    print(x)", "prime = [True] * 1000001\nprime[0] = prime[1] = False\nfor num in range(2, 1000):\n    for x in range(num * num, 1000001, num):\n        prime[x] = False\nanswer = [0] * 1000001\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        answer[i] = answer[i - 1] + 1\n    else:\n        answer[i] = answer[i - 1]\nfor _ in range(int(input())):\n    N = print(answer[int(input())])", "RANGE = 10 ** 6 + 1\nsieve = [True] * RANGE\nsieve[1] = False\nsieve[0] = False\nfor i in range(2, RANGE):\n    if sieve[i]:\n        j = 2\n        while i * j < RANGE:\n            sieve[i * j] = False\n            j += 1\ncandidate = [0] * RANGE\nfor i in range(2, RANGE):\n    if sieve[i] and sieve[i - 2]:\n        candidate[i] = 1\nfor i in range(1, RANGE):\n    candidate[i] += candidate[i - 1]\nfor __ in range(int(input())):\n    n = int(input())\n    print(candidate[n])", "def prime(n, a):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    prime[0] = False\n    prime[1] = False\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    for i in range(2, n + 1):\n        if prime[i] == True and prime[i - 2] == True:\n            a[i] = a[i - 1] + 1\n        else:\n            a[i] = a[i - 1]\na = [0 for i in range(1000001)]\nprime(1000000, a)\nfor _ in range(int(input())):\n    print(a[int(input())])", "t = int(input())\nn = 10 ** 6 + 5\ntemp = {i: True for i in range(2, n)}\ntemp[1] = False\nls = [0, 0, 0, 0, 0]\nfor i in range(2, n):\n    if temp[i]:\n        j = i * 2\n        while j <= n:\n            temp[j] = False\n            j += i\nfor i in range(5, n):\n    if temp[i] and temp[i - 2]:\n        ls.append(ls[i - 1] + 1)\n    else:\n        ls.append(ls[i - 1])\nfor i in range(t):\n    s = int(input())\n    print(ls[s])", "n = int(1000000.0) + 1\nprime = [0] * n\ni = 2\nwhile i * i < n:\n    if prime[i] == 0:\n        j = 2\n        while j * i < n:\n            prime[i * j] = 1\n            j += 1\n    i += 1\nprime_lis = [x for x in range(2, n) if prime[x] == 0]\nlen_prime = len(prime_lis)\nans = [0] * n\nfor i in range(len_prime - 1):\n    if prime_lis[i] + 2 < n and prime[prime_lis[i] + 2] == 0:\n        ans[prime_lis[i] + 2] += 1\nfor i in range(1, n):\n    ans[i] += ans[i - 1]\nfor _ in range(int(input())):\n    N = int(input())\n    print(ans[N])", "def sieve():\n    n = 1000000\n    prime = [True for i in range(n + 1)]\n    pList = [0 for i in range(n + 1)]\n    i = 3\n    last_prime = 3\n    count = 0\n    while i <= n:\n        if prime[i] == True:\n            if i - last_prime == 2:\n                count += 1\n            last_prime = i\n            pList[i] = count\n            if i != n:\n                pList[i + 1] = count\n            j = i * i\n            while j <= n:\n                prime[j] = False\n                j += i\n        else:\n            pList[i] = pList[i - 2]\n            pList[i + 1] = pList[i - 2]\n        i += 2\n    return pList\nprimes = sieve()\nfor _ in range(0, int(input())):\n    n = int(input())\n    print(primes[n])", "isprime = [True] * (10 ** 6 + 5)\nisprime[0] = isprime[1] = False\nprimes = []\nans = [0] * (10 ** 6 + 5)\nfor i in range(2, 10 ** 6 + 5):\n    if isprime[i]:\n        primes.append(i)\n        j = i + i\n        while j < 10 ** 6 + 5:\n            isprime[j] = False\n            j += i\n    ans[i] = ans[i - 1]\n    if isprime[i] and isprime[i - 2]:\n        ans[i] += 1\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans[n])", "a = 10 ** 6 + 1\nIsPrime = [True] * a\nIsPrime[0] = False\nIsPrime[1] = False\nPrimeNumbers = []\nfor i in range(2, a):\n    if IsPrime[i]:\n        PrimeNumbers.append(i)\n        for j in range(i * i, a, i):\n            IsPrime[j] = False\nans = [0] * a\nfor i in range(2, a):\n    if IsPrime[i] and IsPrime[i - 2]:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nn = int(input())\nfor _ in range(n):\n    m = int(input())\n    print(ans[m])", "a = 10 ** 6 + 1\nIsPrime = [True] * a\nIsPrime[0] = False\nIsPrime[1] = False\nPrimeNumbers = []\nfor i in range(2, a):\n    if IsPrime[i]:\n        PrimeNumbers.append(i)\n        for j in range(i * i, a, i):\n            IsPrime[j] = False\nans = [0] * a\nfor i in range(2, a):\n    if IsPrime[i] and IsPrime[i - 2]:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nn = int(input())\nfor _ in range(n):\n    m = int(input())\n    print(ans[m])", "import math\nn = 1000005\nl = [1 for _ in range(n + 1)]\n(l[0], l[1]) = (0, 0)\nans = [0 for _ in range(n + 1)]\n(ans[0], ans[1]) = (0, 0)\nfor i in range(2, math.ceil(math.sqrt(n))):\n    if l[i] != 0:\n        for j in range(i * i, n + 1, i):\n            l[j] = 0\nfor i in range(2, n + 1):\n    if l[i] == 1 and l[i - 2] == 1:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans[n])", "from collections import defaultdict\nans = defaultdict(lambda : 0)\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    (prime[0], prime[1]) = (False, False)\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    count = 0\n    for i in range(2, n + 1):\n        if prime[i - 2] and prime[i]:\n            count += 1\n        ans[i] = count\nSieveOfEratosthenes(10 ** 6 + 10)\nfor i in range(int(input())):\n    n = int(input())\n    print(ans[n])", "def calculate(n):\n    return ans[n]\n\ndef prime_number(prime, ans):\n    for i in range(2, 10 ** 6 + 1):\n        if prime[i]:\n            for j in range(2, 10 ** 6):\n                if i * j > 10 ** 6:\n                    break\n                prime[i * j] = False\n        ans[i] = ans[i - 1]\n        if prime[i] == True and prime[i - 2] == True:\n            ans[i] += 1\nprime = [True] * (10 ** 6 + 1)\nprime[0] = False\nprime[1] = False\nans = [0] * (10 ** 6 + 1)\nprime_number(prime, ans)\nT = int(input())\nwhile T:\n    n = int(input())\n    print(calculate(n))\n    T -= 1", "prime = [True for i in range(1000001)]\np = 2\nwhile p * p <= 1000000:\n    if prime[p] == True:\n        for i in range(p * p, 1000001, p):\n            prime[i] = False\n    p += 1\nans = [0] * 1000001\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans[n])", "prime = [True for i in range(1000001)]\np = 2\nwhile p * p <= 1000000:\n    if prime[p] == True:\n        for i in range(p * p, 1000001, p):\n            prime[i] = False\n    p += 1\nans = [0] * 1000001\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        ans[i] = ans[i - 1] + 1\n    else:\n        ans[i] = ans[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans[n])", "n = 1000007\nprime = [True] * (n + 1)\nprime[0] = False\nprime[1] = False\nfor p in range(2, n + 1):\n    if prime[p] == True:\n        for i in range(p * p, n + 1, p):\n            prime[i] = False\na = [0] * (n + 1)\nfor i in range(2, n + 1):\n    if prime[i] and prime[i - 2]:\n        a[i] = a[i - 1] + 1\n    else:\n        a[i] = a[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    print(a[n])", "n = 10 ** 6\nprime = [1 for i in range(n + 1)]\ni = 2\nwhile i * i <= n:\n    if prime[i] == 1:\n        for j in range(i * i, n + 1, i):\n            prime[j] = 0\n    i += 1\nprime[0] = 0\nprime[1] = 0\ntuples = [0 for i in range(n + 1)]\nfor i in range(2, n + 1):\n    if prime[i] == 1 and prime[i - 2] == 1:\n        tuples[i] = tuples[i - 1] + 1\n    else:\n        tuples[i] = tuples[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    count = tuples[n]\n    print(count)", "s = set()\n\ndef Ssss(x):\n    pr = [True for i in range(x + 1)]\n    p = 2\n    while p * p <= x:\n        if pr[p] == True:\n            for i in range(p * 2, x + 1, p):\n                pr[i] = False\n        p += 1\n    pr[0] = False\n    pr[1] = False\n    for p in range(x + 1):\n        if pr[p]:\n            s.add(p)\nSsss(1000001)\narrr = [0] * 10000000\ncount = 0\nfor z in range(5, 1000001):\n    if z in s and z - 2 in s:\n        count += 1\n        arrr[z] = count\n    else:\n        arrr[z] = count\nfor _ in range(int(input())):\n    n = int(input())\n    print(arrr[n])", "def primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, n + 1):\n        if is_prime[i] and i * i <= n:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    pairs = [0] * (n + 1)\n    count = 0\n    pairs[3] = 1\n    pairs[4] = 1\n    for i in range(5, len(pairs)):\n        if is_prime[i] and is_prime[i - 2]:\n            count += 1\n        pairs[i] = count\n    return pairs\nt = int(input())\nnums = []\nfor _ in range(t):\n    n = int(input())\n    nums.append(n)\nbiggest = max(nums)\npairs = primes(biggest)\nfor i in range(t):\n    n = nums[i]\n    if n < 5:\n        print(0)\n        continue\n    print(pairs[n])", "def primes(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, n + 1):\n        if is_prime[i] and i * i <= n:\n            for j in range(i * i, n, i):\n                is_prime[j] = False\n    pairs = [0] * (n + 1)\n    count = 0\n    pairs[3] = 1\n    pairs[4] = 1\n    for i in range(5, len(pairs)):\n        if is_prime[i] and is_prime[i - 2]:\n            count += 1\n        pairs[i] = count\n    return pairs\nt = int(input())\nnums = []\nfor _ in range(t):\n    n = int(input())\n    nums.append(n)\nbiggest = max(nums)\npairs = primes(biggest)\nfor i in range(t):\n    n = nums[i]\n    if n < 5:\n        print(0)\n        continue\n    print(pairs[n])", "def sieve(n, choice):\n    ans = (n + 1) * [True]\n    for i in range(2, int(n ** 0.5) + 1):\n        if ans[i]:\n            for j in range(2 * i, n + 1, i):\n                ans[j] = False\n    if choice:\n        return ans\n    res = []\n    for i in range(2, n + 1):\n        if ans[i]:\n            res.append(i)\n    return res\ns = sieve(10 ** 6, True)\nans = 5 * [0]\nfor i in range(5, 10 ** 6 + 1):\n    if s[i] and s[i - 2]:\n        ans.append(ans[-1] + 1)\n    else:\n        ans.append(ans[-1])\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans[n])", "import math\nt = int(input())\na = [0] * 1000001\nprime = [2, 3]\nfirst = 3\nsecond = 0\ncount = 0\nfor j in range(5, 1000001, 2):\n    flag = False\n    for k in prime:\n        if j % k == 0:\n            flag = True\n            break\n        if k > math.sqrt(j):\n            break\n    if not flag:\n        second = j\n        if second - first == 2:\n            count += 1\n        first = j\n        prime.append(j)\n    a[j] = count\n    a[j + 1] = count\nfor i in range(t):\n    num = int(input())\n    print(a[num])", "n = 1000000 + 1\nans = []\nfor j in range(n + 1):\n    ans.append(0)\nprime = [True for i in range(n + 1)]\np = 2\nwhile p * p <= n:\n    if prime[p] == True:\n        for i in range(p * p, n + 1, p):\n            prime[i] = False\n    p += 1\ncount = 0\nfor p in range(5, n + 1):\n    if prime[p]:\n        if prime[p - 2]:\n            count += 1\n    ans[p] = count\nt = int(input())\nfor i in range(t):\n    a = int(input())\n    print(ans[a])", "import math\nar = [1] * 1000002\n\ndef fg(n):\n    k = 2\n    while k < n + 1:\n        if ar[k] == 1:\n            for j in range(k * k, n + 1, k):\n                ar[j] = 0\n        k += 1\nns = [0] * 1000002\n\ndef gh():\n    k = 0\n    for i in range(5, 1000001):\n        if ar[i] == 1 and ar[i - 2] == 1:\n            k += 1\n        ns[i] = k\nfg(1000001)\ngh()\nfor _ in range(int(input())):\n    n = int(input())\n    print(ns[n])", "import sys\nsys.setrecursionlimit(10 ** 7)\n\ndef I():\n    return int(sys.stdin.readline().rstrip())\n\ndef MI():\n    return map(int, sys.stdin.readline().rstrip().split())\n\ndef LI():\n    return list(map(int, sys.stdin.readline().rstrip().split()))\n\ndef LI2():\n    return list(map(int, sys.stdin.readline().rstrip()))\n\ndef S():\n    return sys.stdin.readline().rstrip()\n\ndef LS():\n    return list(sys.stdin.readline().rstrip().split())\n\ndef LS2():\n    return list(sys.stdin.readline().rstrip())\n\ndef T():\n    return tuple(map(int, sys.stdin.readline().rstrip().split()))\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\nmaxN = int(10000000.0) + 5\nprime = sieve(maxN)\nans = [0] * (maxN + 1)\nfor i in range(1, maxN + 1):\n    ans[i] = ans[i - 1] + (prime[i] and prime[i - 2])\nfor _ in range(I()):\n    n = I()\n    print(ans[n])", "import math\nmx = 10 ** 6 + 1\npr = [1] * mx\npr[0] = 0\npr[1] = 0\nfor i in range(2, int(math.sqrt(mx)) + 1):\n    if pr[i]:\n        for j in range(i * i, mx, i):\n            pr[j] = 0\ncount = 0\nans = [0, 0, 0, 0]\nfor i in range(4, mx):\n    if pr[i] and pr[i - 2]:\n        count += 1\n    ans.append(count)\nfor _ in range(int(input().strip())):\n    n = int(input().strip())\n    print(ans[n])", "def sievePrime(N):\n    prime = [True for i in range(N + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, N + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\nn = 1000000 + 1\npr = sievePrime(n)\nans = []\nfor i in range(n + 1):\n    ans.append(0)\nfor i in range(5, n + 1):\n    if pr[i]:\n        if pr[i - 2]:\n            ans[i] = ans[i - 1] + 1\n        else:\n            ans[i] = ans[i - 1]\n    else:\n        ans[i] = ans[i - 1]\nfor _ in range(int(input())):\n    n = int(input())\n    print(ans[n])", "n = 1000000\nprime = [True for i in range(n + 1)]\np = 2\nwhile p * p <= n:\n    if prime[p] == True:\n        for i in range(p * p, n + 1, p):\n            prime[i] = False\n    p += 1\ndp = []\nfor i in range(1000001):\n    dp.append(0)\nfor i in range(5, 1000001):\n    if prime[i] and prime[i - 2]:\n        dp[i] = dp[i - 1] + 1\n    else:\n        dp[i] = dp[i - 1]\nfor _ in range(int(input())):\n    a = int(input())\n    print(dp[a])", "def seive(b):\n    b += 1\n    pr = [True] * b\n    ret = []\n    pr[0] = pr[1] = False\n    for i in range(2, b):\n        if pr[i]:\n            for j in range(i * i, b, i):\n                pr[j] = False\n            if pr[i - 2]:\n                ret.append(i)\n    return ret\nfrom bisect import bisect_left\n\ndef solve():\n    x = int(input())\n    return bisect_left(pr, x + 1)\npr = seive(10 ** 6)\nfor i in range(int(input())):\n    print(solve())", "def binSearch(a, k):\n    n = len(a)\n    (l, u) = (0, n - 1)\n    while l <= u:\n        mid = (l + u) // 2\n        if a[mid] == k:\n            return mid + 1\n        if a[mid] > k:\n            u = mid - 1\n        else:\n            l = mid + 1\n    return u + 1\ntc = int(input())\nq = []\nfor t in range(tc):\n    q.append(int(input()))\nn = max(q)\nsieve = [True for _ in range(n + 1)]\nsieve[1] = False\nfor i in range(2, int(n ** 0.5) + 1):\n    if sieve[i] == False:\n        continue\n    for j in range(2 * i, n + 1, i):\n        sieve[j] = False\npp = []\nfor i in range(2, n - 1):\n    if sieve[i] and sieve[i + 2]:\n        pp.append(i + 2)\nfor n in q:\n    print(binSearch(pp, n))"]