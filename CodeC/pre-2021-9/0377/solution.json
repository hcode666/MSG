["t = int(input())\nfor _ in range(t):\n    n = int(input())\n    knight_positions = []\n    for i in range(n):\n        (knight_pos_x, knight_pos_y) = map(int, input().split())\n        knight_positions.append((knight_pos_x - 1, knight_pos_y + 2))\n        knight_positions.append((knight_pos_x + 1, knight_pos_y + 2))\n        knight_positions.append((knight_pos_x + 2, knight_pos_y + 1))\n        knight_positions.append((knight_pos_x + 2, knight_pos_y - 1))\n        knight_positions.append((knight_pos_x + 1, knight_pos_y - 2))\n        knight_positions.append((knight_pos_x - 1, knight_pos_y - 2))\n        knight_positions.append((knight_pos_x - 2, knight_pos_y - 1))\n        knight_positions.append((knight_pos_x - 2, knight_pos_y + 1))\n    knight_pos = set(knight_positions)\n    king_pos = []\n    (king_pos_x, king_pos_y) = map(int, input().split())\n    king_pos.append((king_pos_x - 1, king_pos_y + 1))\n    king_pos.append((king_pos_x, king_pos_y + 1))\n    king_pos.append((king_pos_x + 1, king_pos_y + 1))\n    king_pos.append((king_pos_x + 1, king_pos_y))\n    king_pos.append((king_pos_x + 1, king_pos_y - 1))\n    king_pos.append((king_pos_x, king_pos_y - 1))\n    king_pos.append((king_pos_x - 1, king_pos_y - 1))\n    king_pos.append((king_pos_x - 1, king_pos_y))\n    king_pos.append((king_pos_x, king_pos_y))\n    ans = 'YES'\n    for j in king_pos:\n        if j not in knight_pos:\n            ans = 'NO'\n            break\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    knight = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        knight.append([x, y])\n    (kingx, kingy) = map(int, input().split())\n    posmov = [[kingx - 1, kingy + 1], [kingx - 1, kingy], [kingx - 1, kingy - 1], [kingx + 1, kingy + 1], [kingx + 1, kingy], [kingx + 1, kingy - 1], [kingx, kingy - 1], [kingx, kingy + 1], [kingx, kingy]]\n    for k in knight:\n        if len(posmov):\n            if abs(k[0] - kingx) <= 3 and abs(k[1] - kingy) <= 3:\n                try:\n                    posmov.remove([k[0] - 1, k[1] - 2])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] + 1, k[1] - 2])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] - 1, k[1] + 2])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] + 1, k[1] + 2])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] - 2, k[1] - 1])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] - 2, k[1] + 1])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] + 2, k[1] - 1])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] + 2, k[1] + 1])\n                except:\n                    pass\n        else:\n            break\n    print('NO' if len(posmov) else 'YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    (l_k, c) = ([], 0)\n    for j in range(n):\n        (x, y) = map(int, input().split())\n        l_k.append([x, y])\n    (a, b) = map(int, input().split())\n    for x in range(n):\n        if l_k[x][0] == a or l_k[x][1] == b or abs(l_k[x][0] - a) == abs(l_k[x][1] - b):\n            c += 1\n            break\n    if c != 0:\n        (l, n_c) = ([[a + 1, b], [a - 1, b], [a, b + 1], [a, b - 1], [a + 1, b + 1], [a - 1, b - 1], [a + 1, b - 1], [a - 1, b + 1]], 0)\n        for y in range(8):\n            for k in range(n):\n                if l_k[k][0] == l[y][0] or l_k[k][1] == l[y][1] or abs(l_k[k][0] - l[y][0]) == abs(l_k[k][1] - l[y][1]):\n                    n_c += 1\n        if n_c >= 8:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(0, int(input())):\n    h = int(input())\n    z = []\n    c = 0\n    for i in range(0, h):\n        (k, p) = map(int, input().split())\n        z.append((k - 2, p + 1))\n        z.append((k - 2, p - 1))\n        z.append((k + 2, p + 1))\n        z.append((k + 2, p - 1))\n        z.append((k + 1, p - 2))\n        z.append((k - 1, p - 2))\n        z.append((k + 1, p + 2))\n        z.append((k - 1, p + 2))\n    (a, b) = map(int, input().split())\n    l = [(a, b - 1), (a, b + 1), (a - 1, b), (a + 1, b), (a + 1, b - 1), (a + 1, b + 1), (a - 1, b + 1), (a - 1, b - 1), (a, b)]\n    for i in l:\n        if i in set(z):\n            c = c + 1\n    if c == 9:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    l = []\n    g = 0\n    r = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l.append(str(a + 1) + ' ' + str(b + 2))\n        l.append(str(a - 1) + ' ' + str(b + 2))\n        l.append(str(a - 2) + ' ' + str(b + 1))\n        l.append(str(a - 2) + ' ' + str(b - 1))\n        l.append(str(a + 2) + ' ' + str(b - 1))\n        l.append(str(a + 2) + ' ' + str(b + 1))\n        l.append(str(a - 1) + ' ' + str(b - 2))\n        l.append(str(a + 1) + ' ' + str(b - 2))\n    (x, y) = map(int, input().split())\n    r.append(str(x) + ' ' + str(y))\n    r.append(str(x + 1) + ' ' + str(y + 1))\n    r.append(str(x + 1) + ' ' + str(y - 1))\n    r.append(str(x + 1) + ' ' + str(y))\n    r.append(str(x - 1) + ' ' + str(y))\n    r.append(str(x) + ' ' + str(y - 1))\n    r.append(str(x) + ' ' + str(y + 1))\n    r.append(str(x - 1) + ' ' + str(y - 1))\n    r.append(str(x - 1) + ' ' + str(y + 1))\n    for i in r:\n        if i in set(l):\n            g += 1\n    if g == 9:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        l.append(x)\n    king = list(map(int, input().split()))\n    kingpos = kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in l:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "def knight_moves(x, y):\n    offsets = [(1, 2), (2, 1), (-1, 2), (-2, 1), (1, -2), (2, -1), (-1, -2), (-2, -1)]\n    for (dx, dy) in offsets:\n        nx = x + dx\n        ny = y + dy\n        attacked.add((nx, ny))\nfor _ in range(int(input())):\n    n = int(input())\n    attacked = set()\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        knight_moves(x, y)\n    (a, b) = map(int, input().split())\n    ans = 'YES'\n    offsets = [(0, 0), (1, 0), (0, 1), (-1, 0), (0, -1), (1, 1), (-1, 1), (1, -1), (-1, -1)]\n    for (da, db) in offsets:\n        nx = a + da\n        ny = b + db\n        if (nx, ny) not in attacked:\n            ans = 'NO'\n            break\n    print(ans)", "for _ in range(int(input())):\n    ze = int(input())\n    notsafe = []\n    knightmoves = [(2, 1), (1, 2), (-1, 2), (1, -2), (-1, -2), (-2, 1), (2, -1), (-2, -1)]\n    for _ in range(ze):\n        (r1, c1) = map(int, input().split(' '))\n        for (x, y) in knightmoves:\n            i = r1 + x\n            j = c1 + y\n            notsafe.append((i, j))\n    (a, b) = map(int, input().split(' '))\n    fl = 1\n    kingmoves = [(0, 0), (1, 0), (0, 1), (-1, 0), (0, -1), (1, 1), (-1, 1), (1, -1), (-1, -1)]\n    for (k, l) in kingmoves:\n        s = a + k\n        g = b + l\n        if (s, g) in notsafe:\n            fl = 0\n    if fl == 0:\n        print('YES')\n    else:\n        print('NO')", "def knight_moves(x, y):\n    offsets = [(1, 2), (2, 1), (-1, 2), (-2, 1), (1, -2), (2, -1), (-1, -2), (-2, -1)]\n    for (dx, dy) in offsets:\n        nx = x + dx\n        ny = y + dy\n        attacked.add((nx, ny))\nfor _ in range(int(input())):\n    n = int(input())\n    attacked = set()\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        knight_moves(x, y)\n    (a, b) = map(int, input().split())\n    ans = 'YES'\n    offsets = [(0, 0), (1, 0), (0, 1), (-1, 0), (0, -1), (1, 1), (-1, 1), (1, -1), (-1, -1)]\n    for (da, db) in offsets:\n        nx = a + da\n        ny = b + db\n        if (nx, ny) not in attacked:\n            ans = 'NO'\n            break\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    knight = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        knight.append([x, y])\n    (kingx, kingy) = map(int, input().split())\n    posmov = [[kingx - 1, kingy + 1], [kingx - 1, kingy], [kingx - 1, kingy - 1], [kingx + 1, kingy + 1], [kingx + 1, kingy], [kingx + 1, kingy - 1], [kingx, kingy - 1], [kingx, kingy + 1], [kingx, kingy]]\n    for k in knight:\n        if len(posmov):\n            if abs(k[0] - kingx) <= 3 and abs(k[1] - kingy) <= 3:\n                try:\n                    posmov.remove([k[0] - 1, k[1] - 2])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] + 1, k[1] - 2])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] - 1, k[1] + 2])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] + 1, k[1] + 2])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] - 2, k[1] - 1])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] - 2, k[1] + 1])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] + 2, k[1] - 1])\n                except:\n                    pass\n                try:\n                    posmov.remove([k[0] + 2, k[1] + 1])\n                except:\n                    pass\n        else:\n            break\n    print('NO' if len(posmov) else 'YES')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "for tc in range(int(input())):\n    n = int(input())\n    k = set()\n    poss = True\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        k.add(str(x - 2) + str(y + 1))\n        k.add(str(x - 2) + str(y - 1))\n        k.add(str(x + 2) + str(y + 1))\n        k.add(str(x + 2) + str(y - 1))\n        k.add(str(x + 1) + str(y + 2))\n        k.add(str(x + 1) + str(y - 2))\n        k.add(str(x - 1) + str(y + 2))\n        k.add(str(x - 1) + str(y - 2))\n    (x, y) = map(int, input().split())\n    if str(x) + str(y) not in k:\n        poss = False\n    if str(x) + str(y - 1) not in k:\n        poss = False\n    if str(x) + str(y + 1) not in k:\n        poss = False\n    if str(x - 1) + str(y) not in k:\n        poss = False\n    if str(x - 1) + str(y + 1) not in k:\n        poss = False\n    if str(x - 1) + str(y - 1) not in k:\n        poss = False\n    if str(x + 1) + str(y) not in k:\n        poss = False\n    if str(x + 1) + str(y + 1) not in k:\n        poss = False\n    if str(x + 1) + str(y - 1) not in k:\n        poss = False\n    print('YES' if poss else 'NO')", "for _ in range(int(input())):\n    pos = []\n    for i in range(int(input())):\n        (a, b) = map(int, input().split())\n        pos.append([a, b])\n    (x, y) = map(int, input().split())\n    l = [(x, y), (x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1), (x + 1, y + 1), (x - 1, y - 1), (x + 1, y - 1), (x - 1, y + 1)]\n    l = set(l)\n    for i in pos:\n        if (i[0] + 1, i[1] + 2) in l:\n            l.remove((i[0] + 1, i[1] + 2))\n        if (i[0] + 1, i[1] - 2) in l:\n            l.remove((i[0] + 1, i[1] - 2))\n        if (i[0] - 1, i[1] + 2) in l:\n            l.remove((i[0] - 1, i[1] + 2))\n        if (i[0] - 1, i[1] - 2) in l:\n            l.remove((i[0] - 1, i[1] - 2))\n        if (i[0] + 2, i[1] + 1) in l:\n            l.remove((i[0] + 2, i[1] + 1))\n        if (i[0] + 2, i[1] - 1) in l:\n            l.remove((i[0] + 2, i[1] - 1))\n        if (i[0] - 2, i[1] + 1) in l:\n            l.remove((i[0] - 2, i[1] + 1))\n        if (i[0] - 2, i[1] - 1) in l:\n            l.remove((i[0] - 2, i[1] - 1))\n    if len(l):\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    chp = set()\n    for pk in range(n):\n        (m, n) = tuple(map(int, input().split()))\n        chp.add((m + 2, n + 1))\n        chp.add((m + 2, n - 1))\n        chp.add((m - 2, n + 1))\n        chp.add((m - 2, n - 1))\n        chp.add((m + 1, n + 2))\n        chp.add((m - 1, n + 2))\n        chp.add((m + 1, n - 2))\n        chp.add((m - 1, n - 2))\n    (k, p) = tuple(map(int, input().split()))\n    tbc = set()\n    tbc.add((k, p))\n    tbc.add((k + 1, p))\n    tbc.add((k - 1, p))\n    tbc.add((k, p + 1))\n    tbc.add((k, p - 1))\n    tbc.add((k + 1, p + 1))\n    tbc.add((k + 1, p - 1))\n    tbc.add((k - 1, p + 1))\n    tbc.add((k - 1, p - 1))\n    if tbc.issubset(chp):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\n\ndef altPos(pos):\n    (x, y) = pos\n    ar = [[x + 1, y + 2], [x - 1, y + 2], [x + 2, y + 1], [x + 2, y - 1], [x + 1, y - 2], [x - 1, y - 2], [x - 2, y + 1], [x - 2, y - 1]]\n    return ar\n\ndef kPos(x, y):\n    xpos = [[x - 1, y], [x - 1, y + 1], [x, y + 1], [x + 1, y + 1], [x + 1, y], [x + 1, y - 1], [x, y - 1], [x - 1, y - 1]]\n    return xpos\nfor _ in range(t):\n    n = int(input())\n    pos = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        pos += altPos([x, y])\n    (kx, ky) = map(int, input().split())\n    kpos = kPos(kx, ky)\n    cond = False\n    for i in kpos:\n        if i not in pos:\n            cond = True\n            break\n    if not cond:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    pos = []\n    for i in range(int(input())):\n        (a, b) = map(int, input().split())\n        pos.append([a, b])\n    (x, y) = map(int, input().split())\n    l = [(x, y), (x + 1, y), (x - 1, y), (x, y + 1), (x, y - 1), (x + 1, y + 1), (x - 1, y - 1), (x + 1, y - 1), (x - 1, y + 1)]\n    l = set(l)\n    for i in pos:\n        if (i[0] + 1, i[1] + 2) in l:\n            l.remove((i[0] + 1, i[1] + 2))\n        if (i[0] + 1, i[1] - 2) in l:\n            l.remove((i[0] + 1, i[1] - 2))\n        if (i[0] - 1, i[1] + 2) in l:\n            l.remove((i[0] - 1, i[1] + 2))\n        if (i[0] - 1, i[1] - 2) in l:\n            l.remove((i[0] - 1, i[1] - 2))\n        if (i[0] + 2, i[1] + 1) in l:\n            l.remove((i[0] + 2, i[1] + 1))\n        if (i[0] + 2, i[1] - 1) in l:\n            l.remove((i[0] + 2, i[1] - 1))\n        if (i[0] - 2, i[1] + 1) in l:\n            l.remove((i[0] - 2, i[1] + 1))\n        if (i[0] - 2, i[1] - 1) in l:\n            l.remove((i[0] - 2, i[1] - 1))\n    if len(l):\n        print('NO')\n    else:\n        print('YES')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    invalid = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        invalid.append((x + 1, y - 2))\n        invalid.append((x + 2, y + 1))\n        invalid.append((x + 1, y + 2))\n        invalid.append((x + 2, y - 1))\n        invalid.append((x - 2, y + 1))\n        invalid.append((x - 2, y - 1))\n        invalid.append((x - 1, y - 2))\n        invalid.append((x - 1, y + 2))\n    (a, b) = map(int, input().split())\n    valid = [(a, b)]\n    valid.append((a + 1, b + 1))\n    valid.append((a + 1, b))\n    valid.append((a + 1, b - 1))\n    valid.append((a, b - 1))\n    valid.append((a - 1, b - 1))\n    valid.append((a - 1, b))\n    valid.append((a - 1, b + 1))\n    valid.append((a, b + 1))\n    flag = 0\n    for i in valid:\n        if i not in invalid:\n            flag = 1\n            break\n    if flag == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "t = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    knight = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        knight.append(l)\n    king = list(map(int, input().split()))\n    kingpos = [king, [king[0] - 1, king[1] - 1], [king[0] + 1, king[1] + 1], [king[0] - 1, king[1] + 1], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1], [king[0] + 1, king[1]], [king[0], king[1] + 1]]\n    for k in knight:\n        knightpos = [[k[0] + 2, k[1] + 1], [k[0] + 2, k[1] - 1], [k[0] + 1, k[1] + 2], [k[0] + 1, k[1] - 2], [k[0] - 2, k[1] + 1], [k[0] - 2, k[1] - 1], [k[0] - 1, k[1] + 2], [k[0] - 1, k[1] - 2]]\n        for j in knightpos:\n            if j in kingpos:\n                kingpos.remove(j)\n    if len(kingpos) == 0:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    list1 = []\n    for z in range(n):\n        (a, b) = map(int, input().split())\n        list1.append((a - 2, b - 1))\n        list1.append((a - 2, b + 1))\n        list1.append((a - 1, b + 2))\n        list1.append((a - 1, b - 2))\n        list1.append((a + 1, b - 2))\n        list1.append((a + 1, b + 2))\n        list1.append((a + 2, b - 1))\n        list1.append((a + 2, b + 1))\n    (x, y) = map(int, input().split())\n    ans = 'YES'\n    for z1 in range(x - 1, x + 2):\n        for z2 in range(y - 1, y + 2):\n            if (z1, z2) not in list1:\n                ans = 'NO'\n    print(ans)", "for i in range(int(input())):\n    n = int(input())\n    list1 = []\n    for z in range(n):\n        (a, b) = map(int, input().split())\n        list1.append((a - 2, b - 1))\n        list1.append((a - 2, b + 1))\n        list1.append((a - 1, b + 2))\n        list1.append((a - 1, b - 2))\n        list1.append((a + 1, b - 2))\n        list1.append((a + 1, b + 2))\n        list1.append((a + 2, b - 1))\n        list1.append((a + 2, b + 1))\n    (x, y) = map(int, input().split())\n    ans = 'YES'\n    for z1 in range(x - 1, x + 2):\n        for z2 in range(y - 1, y + 2):\n            if (z1, z2) not in list1:\n                ans = 'NO'\n    print(ans)", "for _ in range(int(input())):\n    xx = []\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        xx.append([x + 1, y + 2])\n        xx.append([x + 2, y + 1])\n        xx.append([x + 2, y - 1])\n        xx.append([x + 1, y - 2])\n        xx.append([x - 1, y - 2])\n        xx.append([x - 2, y - 1])\n        xx.append([x - 2, y + 1])\n        xx.append([x - 1, y + 2])\n    (a, b) = map(int, input().split())\n    f = True\n    for i in [[a + 1, b], [a + 1, b + 1], [a, b + 1], [a - 1, y + 1], [a - 1, b], [a - 1, b - 1], [a, b - 1], [a + 1, b - 1]]:\n        if i in xx:\n            f = False\n            break\n    print('NO' if f else 'YES')", "for _ in range(int(input())):\n    xx = []\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        xx.append([x + 1, y + 2])\n        xx.append([x + 2, y + 1])\n        xx.append([x + 2, y - 1])\n        xx.append([x + 1, y - 2])\n        xx.append([x - 1, y - 2])\n        xx.append([x - 2, y - 1])\n        xx.append([x - 2, y + 1])\n        xx.append([x - 1, y + 2])\n    (a, b) = map(int, input().split())\n    f = True\n    for i in [[a + 1, b], [a + 1, b + 1], [a, b + 1], [a - 1, y + 1], [a - 1, b], [a - 1, b - 1], [a, b - 1], [a + 1, b - 1]]:\n        if i in xx:\n            f = False\n            break\n    print('NO' if f else 'YES')", "for _ in range(int(input())):\n    xx = []\n    for i in range(int(input())):\n        (x, y) = map(int, input().split())\n        xx.append([x + 1, y + 2])\n        xx.append([x + 2, y + 1])\n        xx.append([x + 2, y - 1])\n        xx.append([x + 1, y - 2])\n        xx.append([x - 1, y - 2])\n        xx.append([x - 2, y - 1])\n        xx.append([x - 2, y + 1])\n        xx.append([x - 1, y + 2])\n    (a, b) = map(int, input().split())\n    f = True\n    for i in [[a + 1, b], [a + 1, b + 1], [a, b + 1], [a - 1, y + 1], [a - 1, b], [a - 1, b - 1], [a, b - 1], [a + 1, b - 1]]:\n        if i in xx:\n            f = False\n            break\n    print('NO' if f else 'YES')", "T = int(input())\nl = [(1, 2), (2, 1), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)]\nm = [(1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, -1)]\nwhile T:\n    T -= 1\n    n = int(input())\n    d = {}\n    for i in range(n):\n        (x, y) = list(map(int, input().split()))\n        for (a, b) in l:\n            d[x + a, y + b] = 1\n    (a, b) = list(map(int, input().split()))\n    t = 0\n    try:\n        d[a, b] = d[a, b]\n        t = 1\n    except KeyError:\n        print('NO')\n    if t:\n        for (x, y) in m:\n            try:\n                d[a + x, b + y] = d[a + x, b + y]\n                print('YES')\n                break\n            except KeyError:\n                pass\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    chp = set()\n    for pk in range(n):\n        (m, n) = tuple(map(int, input().split()))\n        chp.add((m + 2, n + 1))\n        chp.add((m + 2, n - 1))\n        chp.add((m - 2, n + 1))\n        chp.add((m - 2, n - 1))\n        chp.add((m + 1, n + 2))\n        chp.add((m - 1, n + 2))\n        chp.add((m + 1, n - 2))\n        chp.add((m - 1, n - 2))\n    (k, p) = tuple(map(int, input().split()))\n    tbc = set()\n    tbc.add((k, p))\n    tbc.add((k + 1, p))\n    tbc.add((k - 1, p))\n    tbc.add((k, p + 1))\n    tbc.add((k, p - 1))\n    tbc.add((k + 1, p + 1))\n    tbc.add((k + 1, p - 1))\n    tbc.add((k - 1, p + 1))\n    tbc.add((k - 1, p - 1))\n    if tbc.issubset(chp):\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    chp = set()\n    for pk in range(n):\n        (m, n) = tuple(map(int, input().split()))\n        chp.add((m + 2, n + 1))\n        chp.add((m + 2, n - 1))\n        chp.add((m - 2, n + 1))\n        chp.add((m - 2, n - 1))\n        chp.add((m + 1, n + 2))\n        chp.add((m - 1, n + 2))\n        chp.add((m + 1, n - 2))\n        chp.add((m - 1, n - 2))\n    (k, p) = tuple(map(int, input().split()))\n    tbc = set()\n    tbc.add((k, p))\n    tbc.add((k + 1, p))\n    tbc.add((k - 1, p))\n    tbc.add((k, p + 1))\n    tbc.add((k, p - 1))\n    tbc.add((k + 1, p + 1))\n    tbc.add((k + 1, p - 1))\n    tbc.add((k - 1, p + 1))\n    tbc.add((k - 1, p - 1))\n    if tbc.issubset(chp):\n        print('YES')\n    else:\n        print('NO')", "cases = int(input())\nfor case in range(cases):\n    knights = int(input())\n    attacked_squares = []\n    king_sqaures = []\n    for line in range(knights):\n        (x, y) = map(int, input().split())\n        attacked_squares.extend([[x + 2, y - 1], [x + 2, y + 1], [x - 2, y - 1], [x - 2, y + 1], [x - 1, y - 2], [x + 1, y - 2], [x - 1, y + 2], [x + 1, y + 2]])\n    (x, y) = map(int, input().split())\n    king_sqaures.extend([[x + 1, y - 1], [x + 1, y], [x + 1, y + 1], [x, y - 1], [x, y + 1], [x - 1, y - 1], [x - 1, y], [x - 1, y + 1]])\n    if [x, y] in attacked_squares:\n        if all((position in attacked_squares for position in king_sqaures)):\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "cases = int(input())\nfor case in range(cases):\n    knights = int(input())\n    attacked_squares = []\n    king_sqaures = []\n    for line in range(knights):\n        (x, y) = map(int, input().split())\n        attacked_squares.extend([[x + 2, y - 1], [x + 2, y + 1], [x - 2, y - 1], [x - 2, y + 1], [x - 1, y - 2], [x + 1, y - 2], [x - 1, y + 2], [x + 1, y + 2]])\n    (x, y) = map(int, input().split())\n    king_sqaures.extend([[x + 1, y - 1], [x + 1, y], [x + 1, y + 1], [x, y - 1], [x, y + 1], [x - 1, y - 1], [x - 1, y], [x - 1, y + 1]])\n    if [x, y] in attacked_squares:\n        if all((position in attacked_squares for position in king_sqaures)):\n            print('YES')\n        else:\n            print('')\n    else:\n        print('NO')", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    pos_knights = []\n    for i in range(n):\n        pos = [int(x) for x in input().split()]\n        pos_knights.append(pos)\n    pos_king = [int(x) for x in input().split()]\n    king_area = []\n    for i in range(3):\n        for j in range(3):\n            king_area.append([pos_king[0] - 1 + i, pos_king[1] - 1 + j])\n    for pos in pos_knights:\n        if [pos[0] + 2, pos[1] + 1] in king_area:\n            king_area.remove([pos[0] + 2, pos[1] + 1])\n        if [pos[0] + 2, pos[1] - 1] in king_area:\n            king_area.remove([pos[0] + 2, pos[1] - 1])\n        if [pos[0] - 2, pos[1] + 1] in king_area:\n            king_area.remove([pos[0] - 2, pos[1] + 1])\n        if [pos[0] - 2, pos[1] - 1] in king_area:\n            king_area.remove([pos[0] - 2, pos[1] - 1])\n        if [pos[0] + 1, pos[1] + 2] in king_area:\n            king_area.remove([pos[0] + 1, pos[1] + 2])\n        if [pos[0] + 1, pos[1] - 2] in king_area:\n            king_area.remove([pos[0] + 1, pos[1] - 2])\n        if [pos[0] - 1, pos[1] + 2] in king_area:\n            king_area.remove([pos[0] - 1, pos[1] + 2])\n        if [pos[0] - 1, pos[1] - 2] in king_area:\n            king_area.remove([pos[0] - 1, pos[1] - 2])\n    if king_area == []:\n        print('YES')\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    knights = []\n    for _ in range(n):\n        (a, b) = map(int, input().split())\n        knights.append((a + 2, b + 1))\n        knights.append((a + 2, b - 1))\n        knights.append((a + 1, b + 2))\n        knights.append((a + 1, b - 2))\n        knights.append((a - 1, b + 2))\n        knights.append((a - 1, b - 2))\n        knights.append((a - 2, b + 1))\n        knights.append((a - 2, b - 1))\n    (a, b) = map(int, input().split())\n    for i in [(a - 1, b - 1), (a - 1, b), (a - 1, b + 1), (a, b - 1), (a, b), (a, b + 1), (a + 1, b - 1), (a + 1, b), (a + 1, b + 1)]:\n        for k in knights:\n            if i == k:\n                break\n        else:\n            continue\n        print('YES')\n        break\n    else:\n        print('NO')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    knights = []\n    for _ in range(n):\n        (a, b) = map(int, input().split())\n        knights.append((a + 2, b + 1))\n        knights.append((a + 2, b - 1))\n        knights.append((a + 1, b + 2))\n        knights.append((a + 1, b - 2))\n        knights.append((a - 1, b + 2))\n        knights.append((a - 1, b - 2))\n        knights.append((a - 2, b + 1))\n        knights.append((a - 2, b - 1))\n    (a, b) = map(int, input().split())\n    for i in [(a - 1, b - 1), (a - 1, b), (a - 1, b + 1), (a, b - 1), (a, b), (a, b + 1), (a + 1, b - 1), (a + 1, b), (a + 1, b + 1)]:\n        for k in knights:\n            if i == k:\n                break\n        else:\n            continue\n        print('YES')\n        break\n    else:\n        print('NO')", "def in_check(x, y, knight_coors):\n    knight_attacks = [(x - 2, y - 1), (x - 2, y + 1), (x + 2, y - 1), (x + 2, y + 1), (x - 1, y - 2), (x - 1, y + 2), (x + 1, y - 2), (x + 1, y + 2)]\n    for i in knight_attacks:\n        if i in knight_coors:\n            return True\n    return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    knight_coors = []\n    for _ in range(n):\n        knight_coors.append(tuple(map(int, input().split())))\n    (a, b) = list(map(int, input().split()))\n    squares = [(a, b), (a - 1, b), (a + 1, b), (a, b - 1), (a, b + 1), (a - 1, b - 1), (a + 1, b - 1), (a + 1, b + 1), (a - 1, b + 1)]\n    in_checkmate = 'YES'\n    for (x, y) in squares:\n        if not in_check(x, y, knight_coors):\n            in_checkmate = 'NO'\n            break\n    print(in_checkmate)", "for i in range(int(input())):\n    n = int(input())\n    List = []\n    for i in range(n):\n        List.append([int(x) for x in input().split()])\n    (X, Y) = map(int, input().split())\n    Check = False\n    for i in List:\n        x = i[0]\n        y = i[1]\n        if abs(X - x) == 2 and abs(Y - y) == 1:\n            Check = True\n            break\n        elif abs(X - x) == 1 and abs(Y - y) == 2:\n            Check = True\n            break\n    if Check:\n        print('YES')\n    else:\n        print('NO')", "t = input()\nfor c in range(0, int(t)):\n    n = int(input())\n    li = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        li.append((a - 1, b - 2))\n        li.append((a - 1, b + 2))\n        li.append((a - 2, b - 1))\n        li.append((a - 2, b + 1))\n        li.append((a + 1, b - 2))\n        li.append((a + 1, b + 2))\n        li.append((a + 2, b - 1))\n        li.append((a + 2, b + 1))\n    ans = 'YES'\n    (x, y) = map(int, input().split())\n    for u in range(x - 1, x + 2):\n        for v in range(y - 1, y + 2):\n            if (u, v) not in li:\n                ans = 'NO'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    li = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        li.append((a - 1, b - 2))\n        li.append((a - 1, b + 2))\n        li.append((a - 2, b - 1))\n        li.append((a - 2, b + 1))\n        li.append((a + 1, b - 2))\n        li.append((a + 1, b + 2))\n        li.append((a + 2, b - 1))\n        li.append((a + 2, b + 1))\n    ans = 'YES'\n    (x, y) = map(int, input().split())\n    for u in range(x - 1, x + 2):\n        for v in range(y - 1, y + 2):\n            if (u, v) not in li:\n                ans = 'NO'\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    li = []\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        li.append((a - 1, b - 2))\n        li.append((a - 1, b + 2))\n        li.append((a - 2, b - 1))\n        li.append((a - 2, b + 1))\n        li.append((a + 1, b - 2))\n        li.append((a + 1, b + 2))\n        li.append((a + 2, b - 1))\n        li.append((a + 2, b + 1))\n    ans = 'YES'\n    (x, y) = map(int, input().split())\n    for u in range(x - 1, x + 2):\n        for v in range(y - 1, y + 2):\n            if (u, v) not in li:\n                ans = 'NO'\n    print(ans)", "from collections import defaultdict\nget_int = lambda : int(input())\nget_mint = lambda : list(map(int, input().split()))\nfor _ in range(get_int()):\n    N = get_int()\n    d = defaultdict(set)\n    for _ in range(N):\n        (xi, yi) = get_mint()\n        d[xi].add(yi)\n    (A, B) = get_mint()\n    knight_moves = [(-2, 1), (-2, -1), (2, 1), (2, -1), (1, 2), (1, -2), (-1, 2), (-1, -2)]\n    check = False\n    for (ai, bi) in knight_moves:\n        if A + ai in d and B + bi in d[A + ai]:\n            check = True\n            break\n    if not check:\n        print('NO')\n        continue\n    else:\n        print('YES')\n        continue\n    king_moves = [(-1, 0), (1, 0), (0, 1), (0, -1), (-1, -1), (-1, 1), (1, 1), (1, -1)]\n    for (ai, bi) in king_moves:\n        (Ai, Bi) = (ai + A, bi + B)\n        for (xi, yi) in knight_moves:\n            if Ai + xi in d and Bi + yi in d[Ai + xi]:\n                break\n        else:\n            check = False\n            break\n    if check:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    List = []\n    for i in range(n):\n        List.append([int(x) for x in input().split()])\n    (X, Y) = map(int, input().split())\n    Check = False\n    for i in List:\n        x = i[0]\n        y = i[1]\n        if abs(X - x) == 2 and abs(Y - y) == 1:\n            Check = True\n            break\n        elif abs(X - x) == 1 and abs(Y - y) == 2:\n            Check = True\n            break\n    if Check:\n        print('YES')\n    else:\n        print('NO')", "defaultKnight = [(1, 2), (1, -2), (-1, 2), (-1, -2), (2, 1), (2, -1), (-2, 1), (-2, -1)]\ndefaultKing = [(0, 1), (0, -1), (1, 0), (-1, 0), (1, 1), (-1, 1), (-1, -1), (1, -1)]\nfor _ in range(int(input())):\n    n = int(input())\n    pos = []\n    for _ in range(n):\n        pos.append(list(map(int, input().split())))\n    king = list(map(int, input().split()))\n    dangerPos = []\n    for each in pos:\n        for eachPos in defaultKnight:\n            dangerPos.append([each[0] + eachPos[0], each[1] + eachPos[1]])\n    kingPos = []\n    for eachPos in defaultKing:\n        temp = [king[0] + eachPos[0], king[1] + eachPos[1]]\n        if temp in dangerPos:\n            kingPos.append(temp)\n    if len(kingPos) < 8:\n        print('NO')\n    else:\n        print('YES')", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    overall = set()\n    for j in range(n):\n        (a, b) = map(int, input().split())\n        knight_pos = {(a - 2, b - 1), (a - 2, b + 1), (a - 1, b - 2), (a - 1, b + 2), (a + 1, b - 2), (a + 1, b + 2), (a + 2, b - 1), (a + 2, b + 1)}\n        overall.update(knight_pos)\n    (x, y) = map(int, input().split())\n    king_pos = {(x - 1, y - 1), (x - 1, y), (x - 1, y + 1), (x, y - 1), (x, y), (x, y + 1), (x + 1, y - 1), (x + 1, y), (x + 1, y + 1)}\n    net = overall.intersection(king_pos)\n    if net == king_pos:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    List = []\n    for i in range(n):\n        List.append([int(x) for x in input().split()])\n    (X, Y) = map(int, input().split())\n    Check = False\n    for i in List:\n        x = i[0]\n        y = i[1]\n        if abs(X - x) == 2 and abs(Y - y) == 1:\n            Check = True\n            break\n        elif abs(X - x) == 1 and abs(Y - y) == 2:\n            Check = True\n            break\n    if Check:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    N = int(input())\n    (kX, kY) = ([], [])\n    for i in range(N):\n        (t1, t2) = map(int, input().split())\n        kX.append(t1)\n        kY.append(t2)\n    (A, B) = map(int, input().split())\n    if A in kX or B in kY:\n        print('YES')\n    else:\n        print('NO')", "import sys\n\ndef inp():\n    return sys.stdin.readline().strip()\n\ndef iinp():\n    return int(inp())\n\ndef mp():\n    return map(int, inp().split())\n\ndef liinp():\n    return list(mp())\n\ndef lmps():\n    return list(map(str, inp()))\n\ndef removeDuplicates(list1):\n    return list(set(list1))\n\ndef lcm(obscureX, obscureY):\n    if obscureX > obscureY:\n        greater = obscureX\n    else:\n        obscuregreater = obscureY\n    while True:\n        if obscuregreater % obscureX == 0 and obscuregreater % obscureY == 0:\n            obscurelcm = greater\n            break\n        obscuregreater += 1\n    return obscurelcm\n\ndef knightPositions(a, b):\n    return [[a + 2, b + 1], [a + 2, b - 1], [a - 2, b + 1], [a - 2, b - 1], [a + 1, b + 2], [a + 1, b - 2], [a - 1, b + 2], [a - 1, b - 2]]\nfor a in range(iinp()):\n    n = iinp()\n    knights = []\n    for a in range(n):\n        knights.append(liinp())\n    k = liinp()\n    positions = [[k[0] + 1, k[1] + 1], [k[0] + 1, k[1] - 1], [k[0] + 1, k[1] + 0], [k[0] + 0, k[1] + 1], [k[0] + 0, k[1] - 1], [k[0] + 0, k[1] + 0], [k[0] - 1, k[1] + 1], [k[0] - 1, k[1] - 1], [k[0] - 1, k[1] + 0]]\n    all = 0\n    for c in range(9):\n        a = positions[c]\n        for b in knights:\n            if b in knightPositions(a[0], a[1]):\n                all += 1\n                break\n        if all != c + 1:\n            print('NO')\n            break\n    if all == 9:\n        print('YES')", "import sys\n\ndef inp():\n    return sys.stdin.readline().strip()\n\ndef iinp():\n    return int(inp())\n\ndef mp():\n    return map(int, inp().split())\n\ndef liinp():\n    return list(mp())\n\ndef lmps():\n    return list(map(str, inp()))\n\ndef removeDuplicates(list1):\n    return list(set(list1))\n\ndef lcm(obscureX, obscureY):\n    if obscureX > obscureY:\n        greater = obscureX\n    else:\n        obscuregreater = obscureY\n    while True:\n        if obscuregreater % obscureX == 0 and obscuregreater % obscureY == 0:\n            obscurelcm = greater\n            break\n        obscuregreater += 1\n    return obscurelcm\n\ndef knightPositions(a, b):\n    return [[a + 2, b + 1], [a + 2, b - 1], [a - 2, b + 1], [a - 2, b - 1], [a + 1, b + 2], [a + 1, b - 2], [a - 1, b + 2], [a - 1, b - 2]]\nfor a in range(iinp()):\n    n = iinp()\n    knights = []\n    for a in range(n):\n        knights.append(liinp())\n    k = liinp()\n    positions = [[k[0] + 1, k[1] + 1], [k[0] + 1, k[1] - 1], [k[0] + 1, k[1] + 0], [k[0] + 0, k[1] + 1], [k[0] + 0, k[1] - 1], [k[0] + 0, k[1] + 0], [k[0] - 1, k[1] + 1], [k[0] - 1, k[1] - 1], [k[0] - 1, k[1] + 0]]\n    all = 0\n    for c in range(9):\n        a = positions[c]\n        for b in knights:\n            if b in knightPositions(a[0], a[1]):\n                all += 1\n                break\n        if all != c + 1:\n            print('NO')\n            break\n    if all == 9:\n        print('YES')", "mapInput = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    lst = []\n    for i in range(n):\n        xy = input().split()\n        lst.append([int(j) for j in xy])\n    (a, b) = mapInput()\n    c = 0\n    for i in lst:\n        p = i[0]\n        q = i[1]\n        if abs(p - a) == 2 and abs(q - b) == 1:\n            c = 1\n            break\n        elif abs(p - a) == 1 and abs(q - b) == 2:\n            c = 1\n            break\n    if c == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    lst = []\n    for i in range(n):\n        xy = input().split()\n        lst.append([int(j) for j in xy])\n    (a, b) = map(int, input().split())\n    c = 0\n    for i in lst:\n        p = i[0]\n        q = i[1]\n        if abs(p - a) == 2 and abs(q - b) == 1:\n            c = 1\n            break\n        elif abs(p - a) == 1 and abs(q - b) == 2:\n            c = 1\n            break\n    if c == 1:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    ini = []\n    for _ in range(n):\n        pos = list(map(int, input().split(' ')))\n        ini.append(pos)\n    king = list(map(int, input().split(' ')))\n    status = not any((abs(king[0] - ini[i][0]) == 1 and abs(king[1] - ini[i][1]) == 2 or (abs(king[0] - ini[i][0]) == 2 and abs(king[1] - ini[i][1]) == 1) for i in range(len(ini))))\n    if not status:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        l.append([int(x) for x in input().split()])\n    (x, y) = map(int, input().split())\n    c = False\n    for j in l:\n        a = j[0]\n        b = j[1]\n        if abs(x - a) == 2 and abs(y - b) == 1:\n            c = True\n            break\n        elif abs(x - a) == 1 and abs(y - b) == 2:\n            c = True\n            break\n    if c:\n        print('YES')\n    else:\n        print('NO')", "for ii in range(int(input())):\n    nn = int(input())\n    List = []\n    for ii in range(nn):\n        List.append([int(xx) for xx in input().split()])\n    (XX, YY) = map(int, input().split())\n    Check = False\n    for ii in List:\n        xx = ii[0]\n        yy = ii[1]\n        if abs(XX - xx) == 2 and abs(YY - yy) == 1:\n            Check = True\n            break\n        elif abs(XX - xx) == 1 and abs(YY - yy) == 2:\n            Check = True\n            break\n    if Check:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    List = []\n    for i in range(n):\n        List.append([int(x) for x in input().split()])\n    (X, Y) = map(int, input().split())\n    Check = False\n    for i in List:\n        x = i[0]\n        y = i[1]\n        if abs(X - x) == 2 and abs(Y - y) == 1:\n            Check = True\n            break\n        elif abs(X - x) == 1 and abs(Y - y) == 2:\n            Check = True\n            break\n    if Check:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    n = int(input())\n    (x, y) = ([0] * n, [0] * n)\n    for i in range(n):\n        (x[i], y[i]) = map(int, input().split())\n    (a, b) = map(int, input().split())\n    c = [a, a, a, a + 1, a + 1, a + 1, a - 1, a - 1, a - 1]\n    d = [b, b + 1, b - 1, b, b + 1, b - 1, b, b + 1, b - 1]\n    e = 0\n    for i in range(9):\n        for j in range(n):\n            if abs(c[i] - x[j]) + abs(d[i] - y[j]) == 3:\n                e += 1\n                break\n    if e == 9:\n        print('YES')\n    else:\n        print('NO')", "for t in range(int(input())):\n    n = int(input())\n    (x, y) = ([0] * n, [0] * n)\n    for i in range(n):\n        (x[i], y[i]) = map(int, input().split())\n    (a, b) = map(int, input().split())\n    c = [a, a, a + 1, a + 1, a + 1, a - 1, a - 1, a - 1]\n    d = [b + 1, b - 1, b, b + 1, b - 1, b, b + 1, b - 1]\n    e = 0\n    for i in range(n):\n        if abs(a - x[i]) + abs(b - y[i]) == 3:\n            e += 1\n            break\n    for i in range(8):\n        for j in range(n):\n            if abs(c[i] - x[j]) + abs(d[i] - y[j]) == 3:\n                e += 1\n                break\n    if e == 9:\n        print('YES')\n    else:\n        print('NO')", "testCases = int(input())\nfor testCase in range(testCases):\n    n = int(input())\n    knightPos = []\n    for _ in range(n):\n        knightPos.append(list(map(int, input().split())))\n    kingPos = list(map(int, input().split()))\n    knightMove = []\n    for i in knightPos:\n        knightMove.append([i[0] + 1, i[1] + 2])\n        knightMove.append([i[0] + 2, i[1] + 1])\n        knightMove.append([i[0] - 1, i[1] - 2])\n        knightMove.append([i[0] - 2, i[1] - 1])\n        knightMove.append([i[0] - 1, i[1] + 2])\n        knightMove.append([i[0] - 2, i[1] + 1])\n        knightMove.append([i[0] + 1, i[1] - 2])\n        knightMove.append([i[0] + 2, i[1] - 1])\n    kingMove = []\n    kingMove.append([kingPos[0], kingPos[1]])\n    kingMove.append([kingPos[0] + 1, kingPos[1] + 0])\n    kingMove.append([kingPos[0] + 0, kingPos[1] + 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] - 0])\n    kingMove.append([kingPos[0] - 0, kingPos[1] - 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] - 1])\n    kingMove.append([kingPos[0] + 1, kingPos[1] + 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] + 1])\n    kingMove.append([kingPos[0] + 1, kingPos[1] - 1])\n    canMove = False\n    for i in kingMove:\n        if i not in knightMove:\n            canMove = True\n            print('NO')\n            break\n    if canMove is False:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    knight_pos = []\n    for __ in range(n):\n        knight_pos.append(tuple(map(int, input().split())))\n    king_pos = tuple(map(int, input().split()))\n    king_moves = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            king_moves.append((king_pos[0] + i, king_pos[1] + j))\n\n    def f(king_moves, knight_pos):\n        for a in knight_pos:\n            for i in (-1, 1):\n                for j in (-2, 2):\n                    try:\n                        if (a[0] + i, a[1] + j) in king_moves:\n                            king_moves.pop(king_moves.index((a[0] + i, a[1] + j)))\n                    except IndexError:\n                        return 'YES'\n            for i in (-2, 2):\n                for j in (-1, 1):\n                    try:\n                        if (a[0] + i, a[1] + j) in king_moves:\n                            king_moves.pop(king_moves.index((a[0] + i, a[1] + j)))\n                    except IndexError:\n                        return 'YES'\n        if len(king_moves) == 0:\n            return 'YES'\n        else:\n            return 'NO'\n    print(f(king_moves, knight_pos))", "try:\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        l1 = []\n        for i in range(n):\n            (a, b) = list(map(int, input().split()))\n            l1.append((a + 1, b + 2))\n            l1.append((a + 2, b + 1))\n            l1.append((a - 2, b - 1))\n            l1.append((a - 1, b - 2))\n            l1.append((a + 1, b - 2))\n            l1.append((a - 2, b + 1))\n            l1.append((a + 2, b - 1))\n            l1.append((a - 1, b + 2))\n        (x, y) = list(map(int, input().split()))\n        ans = 'YES'\n        for u in range(x - 1, x + 2):\n            for v in range(y - 1, y + 2):\n                if (u, v) not in l1:\n                    ans = 'NO'\n        print(ans)\nexcept:\n    pass", "try:\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        l1 = []\n        for i in range(n):\n            (a, b) = list(map(int, input().split()))\n            l1.append((a + 1, b + 2))\n            l1.append((a + 2, b + 1))\n            l1.append((a - 2, b - 1))\n            l1.append((a - 1, b - 2))\n            l1.append((a + 1, b - 2))\n            l1.append((a - 2, b + 1))\n            l1.append((a + 2, b - 1))\n            l1.append((a - 1, b + 2))\n        (x, y) = list(map(int, input().split()))\n        ans = 'YES'\n        for u in range(x - 1, x + 2):\n            for v in range(y - 1, y + 2):\n                if (u, v) not in l1:\n                    ans = 'NO'\n        print(ans)\nexcept:\n    pass", "try:\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        l1 = []\n        for i in range(n):\n            (a, b) = list(map(int, input().split()))\n            l1.append((a + 1, b + 2))\n            l1.append((a + 2, b + 1))\n            l1.append((a - 2, b - 1))\n            l1.append((a - 1, b - 2))\n            l1.append((a + 1, b - 2))\n            l1.append((a - 2, b + 1))\n            l1.append((a + 2, b - 1))\n            l1.append((a - 1, b + 2))\n        (x, y) = list(map(int, input().split()))\n        ans = 'YES'\n        for u in range(x - 1, x + 2):\n            for v in range(y - 1, y + 2):\n                if (u, v) not in l1:\n                    ans = 'NO'\n        print(ans)\nexcept:\n    pass", "for i in range(int(input())):\n    mylist = []\n    F = []\n    count = 0\n    for i in range(int(input())):\n        (i, j) = list(map(int, input().split()))\n        L = [[i + 1, j + 2], [i - 1, j + 2], [i + 2, j + 1], [i + 2, j - 1], [i + 1, j - 2], [i - 1, j - 2], [i - 2, j + 1], [i - 2, j - 1]]\n        F.extend(L)\n    (A, B) = list(map(int, input().split()))\n    X = [[A, B], [A + 1, B + 1], [A - 1, B - 1], [A + 1, B - 1], [A - 1, B + 1], [A, B + 1], [A + 1, B], [A, B - 1], [A - 1, B]]\n    for i in X:\n        for j in F:\n            if i == j:\n                count += 1\n                break\n    if count == 9:\n        print('YES')\n    else:\n        print('NO')", "for i in range(int(input())):\n    mylist = []\n    F = []\n    count = 0\n    for i in range(int(input())):\n        (i, j) = list(map(int, input().split()))\n        L = [[i + 1, j + 2], [i - 1, j + 2], [i + 2, j + 1], [i + 2, j - 1], [i + 1, j - 2], [i - 1, j - 2], [i - 2, j + 1], [i - 2, j - 1]]\n        F.extend(L)\n    (A, B) = list(map(int, input().split()))\n    X = [[A, B], [A + 1, B + 1], [A - 1, B - 1], [A + 1, B - 1], [A - 1, B + 1], [A, B + 1], [A + 1, B], [A, B - 1], [A - 1, B]]\n    for i in X:\n        for j in F:\n            if i == j:\n                count += 1\n                break\n    if count == 9:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\n\ndef addXY(dict, x, y):\n    if x not in dict:\n        dict[x] = {}\n        dict[x][y] = True\n    else:\n        dict[x][y] = True\nfor _ in range(T):\n    N = int(input())\n    knightsPositions = []\n    notAllowed = {}\n    for _2 in range(N):\n        (x, y) = [int(i) for i in input().split(' ')]\n        x1 = x - 1\n        y1 = y + 2\n        addXY(notAllowed, x1, y1)\n        x1 = x - 2\n        y1 = y + 1\n        addXY(notAllowed, x1, y1)\n        x1 = x - 2\n        y1 = y - 1\n        addXY(notAllowed, x1, y1)\n        x1 = x - 1\n        y1 = y - 2\n        addXY(notAllowed, x1, y1)\n        x1 = x + 1\n        y1 = y - 2\n        addXY(notAllowed, x1, y1)\n        x1 = x + 2\n        y1 = y - 1\n        addXY(notAllowed, x1, y1)\n        x1 = x + 2\n        y1 = y + 1\n        addXY(notAllowed, x1, y1)\n        x1 = x + 1\n        y1 = y + 2\n        addXY(notAllowed, x1, y1)\n    (x, y) = [int(i) for i in input().split(' ')]\n    if x in notAllowed:\n        if y in notAllowed[x]:\n            print('YES')\n        else:\n            print('NO')\n    else:\n        print('NO')", "try:\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        l1 = []\n        for i in range(n):\n            (a, b) = list(map(int, input().split()))\n            l1.append((a + 1, b + 2))\n            l1.append((a + 2, b + 1))\n            l1.append((a - 2, b - 1))\n            l1.append((a - 1, b - 2))\n            l1.append((a + 1, b - 2))\n            l1.append((a - 2, b + 1))\n            l1.append((a + 2, b - 1))\n            l1.append((a - 1, b + 2))\n        (x, y) = list(map(int, input().split()))\n        ans = 'YES'\n        for u in range(x - 1, x + 2):\n            for v in range(y - 1, y + 2):\n                if (u, v) not in l1:\n                    ans = 'NO'\n        print(ans)\nexcept:\n    pass", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [list(map(int, input().split())) for i in range(n)]\n    (a, b) = map(int, input().split())\n    c = True\n    for i in arr:\n        if i[0] == a or i[1] == b:\n            print('YES')\n            c = False\n            break\n    if c:\n        print('NO')", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    c = True\n    x = [list(map(int, input().split())) for i in range(n)]\n    (a, b) = map(int, input().split())\n    for i in x:\n        if i[0] == a or i[1] == b:\n            print('YES')\n            c = False\n            break\n    if c:\n        print('NO')", "tests = int(input())\nfor i in range(tests):\n    knights = int(input())\n    knights_arr = []\n    for j in range(knights):\n        knight_pos = list(map(int, input().split()))\n        knights_arr.append(knight_pos)\n    king_pos = list(map(int, input().split()))\n    req_checkmate_pos = {(king_pos[0], king_pos[1]), (king_pos[0] - 1, king_pos[1]), (king_pos[0] - 1, king_pos[1] - 1), (king_pos[0], king_pos[1] - 1), (king_pos[0] + 1, king_pos[1] - 1), (king_pos[0] + 1, king_pos[1]), (king_pos[0] + 1, king_pos[1] + 1), (king_pos[0], king_pos[1] + 1), (king_pos[0] - 1, king_pos[1] + 1)}\n    for j in knights_arr:\n        if (j[0] + 1, j[1] - 2) in req_checkmate_pos:\n            req_checkmate_pos.remove((j[0] + 1, j[1] - 2))\n        if (j[0] - 1, j[1] - 2) in req_checkmate_pos:\n            req_checkmate_pos.remove((j[0] - 1, j[1] - 2))\n        if (j[0] + 1, j[1] + 2) in req_checkmate_pos:\n            req_checkmate_pos.remove((j[0] + 1, j[1] + 2))\n        if (j[0] - 1, j[1] + 2) in req_checkmate_pos:\n            req_checkmate_pos.remove((j[0] - 1, j[1] + 2))\n        if (j[0] + 2, j[1] + 1) in req_checkmate_pos:\n            req_checkmate_pos.remove((j[0] + 2, j[1] + 1))\n        if (j[0] + 2, j[1] - 1) in req_checkmate_pos:\n            req_checkmate_pos.remove((j[0] + 2, j[1] - 1))\n        if (j[0] - 2, j[1] + 1) in req_checkmate_pos:\n            req_checkmate_pos.remove((j[0] - 2, j[1] + 1))\n        if (j[0] - 2, j[1] - 1) in req_checkmate_pos:\n            req_checkmate_pos.remove((j[0] - 2, j[1] - 1))\n        if len(req_checkmate_pos) == 0:\n            break\n    if len(req_checkmate_pos) == 0:\n        print('YES')\n    else:\n        print('NO')", "tests = int(input())\nfor i in range(tests):\n    knights = int(input())\n    knights_arr = []\n    for j in range(knights):\n        knight_pos = list(map(int, input().split()))\n        knights_arr.append(knight_pos)\n    king_pos = list(map(int, input().split()))\n    req_checkmate_pos_list = [king_pos, [king_pos[0] - 1, king_pos[1]], [king_pos[0] - 1, king_pos[1] - 1], [king_pos[0], king_pos[1] - 1], [king_pos[0] + 1, king_pos[1] - 1], [king_pos[0] + 1, king_pos[1]], [king_pos[0] + 1, king_pos[1] + 1], [king_pos[0], king_pos[1] + 1], [king_pos[0] - 1, king_pos[1] + 1]]\n    req_checkmate_pos = set()\n    for j in req_checkmate_pos_list:\n        req_checkmate_pos.add(str(j))\n    for j in knights_arr:\n        if str([j[0] + 1, j[1] - 2]) in req_checkmate_pos:\n            req_checkmate_pos.remove(str([j[0] + 1, j[1] - 2]))\n        if str([j[0] - 1, j[1] - 2]) in req_checkmate_pos:\n            req_checkmate_pos.remove(str([j[0] - 1, j[1] - 2]))\n        if str([j[0] + 1, j[1] + 2]) in req_checkmate_pos:\n            req_checkmate_pos.remove(str([j[0] + 1, j[1] + 2]))\n        if str([j[0] - 1, j[1] + 2]) in req_checkmate_pos:\n            req_checkmate_pos.remove(str([j[0] - 1, j[1] + 2]))\n        if str([j[0] + 2, j[1] + 1]) in req_checkmate_pos:\n            req_checkmate_pos.remove(str([j[0] + 2, j[1] + 1]))\n        if str([j[0] + 2, j[1] - 1]) in req_checkmate_pos:\n            req_checkmate_pos.remove(str([j[0] + 2, j[1] - 1]))\n        if str([j[0] - 2, j[1] + 1]) in req_checkmate_pos:\n            req_checkmate_pos.remove(str([j[0] - 2, j[1] + 1]))\n        if str([j[0] - 2, j[1] - 1]) in req_checkmate_pos:\n            req_checkmate_pos.remove(str([j[0] - 2, j[1] - 1]))\n        if len(req_checkmate_pos) == 0:\n            break\n    if len(req_checkmate_pos) == 0:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    x = []\n    z = n\n    Flag = True\n    while z:\n        (x1, y1) = map(int, input().split())\n        x.append((x1, y1))\n        z = z - 1\n    (a, b) = map(int, input().split())\n    kimove = [(a + 1, b), (a - 1, b), (a, b + 1), (a + 1, b - 1), (a + 1, b + 1), (a + 1, b - 1), (a - 1, b + 1), (a - 1, b - 1)]\n    knmove = []\n    for i in range(n):\n        (x1, y1) = x[i]\n        knmove.append((x1 + 2, y1 - 1))\n        knmove.append((x1 + 2, y1 + 1))\n        knmove.append((x1 - 2, y1 - 1))\n        knmove.append((x1 - 2, y1 + 1))\n        knmove.append((x1 - 1, y1 - 2))\n        knmove.append((x1 + 1, y1 - 2))\n        knmove.append((x1 + 1, y1 + 2))\n        knmove.append((x1 - 1, y1 + 1))\n    knmove = set(knmove)\n    knmove = list(knmove)\n    for i in kimove:\n        if i in knmove:\n            Flag = True\n        else:\n            Flag = False\n    if Flag:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    x = int(input())\n    arr1 = []\n    arr2 = []\n    for i in range(x):\n        (a, b) = list(map(int, input().split()))\n        arr1.append(a)\n        arr2.append(b)\n    (a, b) = map(int, input().split())\n    arrx = [a, a - 1, a + 1]\n    arry = [b, b - 1, b + 1]\n    for i in arrx:\n        if i in arr1:\n            print('YES')\n            break\n    else:\n        for i in arry:\n            if i in arr2:\n                print('YES')\n                break\n        else:\n            print('NO')", "for _ in range(int(input())):\n    x = int(input())\n    arr1 = []\n    arr2 = []\n    for i in range(x):\n        (a, b) = list(map(int, input().split()))\n        arr1.append(a)\n        arr2.append(b)\n    (a, b) = list(map(int, input().split()))\n    arrx = [a, a - 1, a + 1]\n    arry = [b, b - 1, b + 1]\n    for i in arrx:\n        if i in arr1:\n            print('YES')\n            break\n    else:\n        for i in arry:\n            if i in arr2:\n                print('YES')\n                break\n        else:\n            print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    a = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        a.append(temp)\n    (x, y) = map(int, input().split())\n\n    def moves(x, y):\n        l = []\n        l.append([x + 1, y + 2])\n        l.append([x + 2, y + 1])\n        l.append([x - 2, y + 1])\n        l.append([x - 1, y + 2])\n        l.append([x + 1, y - 2])\n        l.append([x + 2, y - 1])\n        l.append([x - 2, y - 1])\n        l.append([x - 1, y - 2])\n        return l\n    l = [[x, y]]\n    l.append([x + 1, y + 1])\n    l.append([x, y + 1])\n    l.append([x + 1, y])\n    l.append([x - 1, y + 1])\n    l.append([x - 1, y])\n    l.append([x, y - 1])\n    l.append([x + 1, y - 1])\n    l.append([x - 1, y - 1])\n    for i in a:\n        move = moves(i[0], i[1])\n        if len(l):\n            for j in move:\n                if j in l:\n                    l.remove(j)\n        else:\n            break\n    if len(l):\n        print('NO')\n        continue\n    print('YES')", "for _ in range(int(input())):\n    moves_li = []\n    k_moves_li = []\n    n = int(input())\n    ans = 'YES'\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        moves = [(x - 1, y + 2), (x + 1, y + 2), (x + 2, y + 1), (x + 2, y - 1), (x + 1, y - 2), (x - 1, y - 2), (x - 2, y - 1), (x - 2, y + 1)]\n        moves_li.extend(moves)\n    (x, y) = map(int, input().split())\n    k_moves_li = [(x, y), (x, y + 1), (x + 1, y + 1), (x + 1, y), (x + 1, y - 1), (x, y - 1), (x - 1, y - 1), (x - 1, y), (x - 1, y + 1)]\n    for km in k_moves_li:\n        if km not in moves_li:\n            ans = 'NO'\n            break\n    print(ans)", "testCases = int(input())\nfor testCase in range(testCases):\n    n = int(input())\n    knightPos = []\n    for _ in range(n):\n        knightPos.append(list(map(int, input().split())))\n    kingPos = list(map(int, input().split()))\n    knightMove = []\n    for i in knightPos:\n        knightMove.append([i[0] + 1, i[1] + 2])\n        knightMove.append([i[0] + 2, i[1] + 1])\n        knightMove.append([i[0] - 1, i[1] - 2])\n        knightMove.append([i[0] - 2, i[1] - 1])\n        knightMove.append([i[0] - 1, i[1] + 2])\n        knightMove.append([i[0] - 2, i[1] + 1])\n        knightMove.append([i[0] + 1, i[1] - 2])\n        knightMove.append([i[0] + 2, i[1] - 1])\n    kingMove = []\n    kingMove.append([kingPos[0], kingPos[1]])\n    kingMove.append([kingPos[0] + 1, kingPos[1] + 0])\n    kingMove.append([kingPos[0] + 0, kingPos[1] + 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] - 0])\n    kingMove.append([kingPos[0] - 0, kingPos[1] - 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] - 1])\n    kingMove.append([kingPos[0] + 1, kingPos[1] + 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] + 1])\n    kingMove.append([kingPos[0] + 1, kingPos[1] - 1])\n    canMove = False\n    for i in kingMove:\n        if i not in knightMove:\n            canMove = True\n            print('NO')\n            break\n    if canMove is False:\n        print('YES')", "testCases = int(input())\nfor testCase in range(testCases):\n    n = int(input())\n    knightPos = []\n    for _ in range(n):\n        knightPos.append(list(map(int, input().split())))\n    kingPos = list(map(int, input().split()))\n    knightMove = []\n    for i in knightPos:\n        knightMove.append([i[0] + 1, i[1] + 2])\n        knightMove.append([i[0] + 2, i[1] + 1])\n        knightMove.append([i[0] - 1, i[1] - 2])\n        knightMove.append([i[0] - 2, i[1] - 1])\n        knightMove.append([i[0] - 1, i[1] + 2])\n        knightMove.append([i[0] - 2, i[1] + 1])\n        knightMove.append([i[0] + 1, i[1] - 2])\n        knightMove.append([i[0] + 2, i[1] - 1])\n    kingMove = []\n    kingMove.append([kingPos[0], kingPos[1]])\n    kingMove.append([kingPos[0] + 1, kingPos[1] + 0])\n    kingMove.append([kingPos[0] + 0, kingPos[1] + 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] - 0])\n    kingMove.append([kingPos[0] - 0, kingPos[1] - 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] - 1])\n    kingMove.append([kingPos[0] + 1, kingPos[1] + 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] + 1])\n    kingMove.append([kingPos[0] + 1, kingPos[1] - 1])\n    canMove = False\n    for i in kingMove:\n        if i not in knightMove:\n            canMove = True\n            print('NO')\n            break\n    if canMove is False:\n        print('YES')", "import math\nfrom collections import Counter\nfrom itertools import combinations, permutations\n\ndef solve():\n    N = int(input())\n    lis = []\n    for i in range(N):\n        X = list(map(int, input().split()))\n        lis.append(X)\n    (A, B) = list(map(int, input().split()))\n    ans = True\n    for i in range(N):\n        if abs(A - lis[i][0]) + abs(B - lis[i][1]) == 3:\n            ans = False\n            break\n    if ans == False:\n        print('YES')\n    else:\n        all_pos = [[A + 1, B + 1], [A - 1, B - 1], [A - 1, B], [A + 1, B], [A + 1, B - 1], [A - 1, B + 1]]\n        for j in range(len(lis)):\n            for k in range(len(all_pos)):\n                if abs(lis[j][0] - all_pos[k][0]) + abs(lis[j][1] - all_pos[k][1]) == 3:\n                    ans = False\n                    break\n        if ans == False:\n            print('YES')\n        else:\n            print('NO')\nfor _ in range(int(input())):\n    solve()", "import math\nfrom collections import Counter\nfrom itertools import combinations, permutations\n\ndef solve():\n    N = int(input())\n    lis = []\n    for i in range(N):\n        X = list(map(int, input().split()))\n        lis.append(X)\n    (A, B) = list(map(int, input().split()))\n    ans = True\n    for i in range(N):\n        if abs(A - lis[i][0]) + abs(B - lis[i][1]) == 3:\n            ans = False\n            break\n    if ans == False:\n        print('YES')\n    else:\n        all_pos = [[A + 1, B + 1], [A - 1, B - 1], [A - 1, B], [A + 1, B], [A + 1, B - 1], [A - 1, B + 1]]\n        for j in range(len(lis)):\n            for k in range(len(all_pos)):\n                if abs(lis[j][0] - all_pos[k][0]) + abs(lis[j][1] - all_pos[k][1]) == 3:\n                    ans = False\n                    break\n        if ans == False:\n            print('YES')\n        else:\n            print('NO')\nfor _ in range(int(input())):\n    solve()", "def check(p1, p2):\n    (x1, y1) = p1\n    (x2, y2) = p2\n    if abs(x1 - x2) == 2 and abs(y1 - y2) == 1 or (abs(x1 - x2) == 1 and abs(y1 - y2) == 2):\n        return True\n    else:\n        return False\nT = int(input())\nfor k in range(T):\n    n = int(input())\n    knights = []\n    for r in range(n):\n        kn = tuple(map(int, input().split(' ')))\n        knights.append(kn)\n    (A, B) = tuple(map(int, input().split(' ')))\n    check_mate = 1\n    for x in [A - 1, A, A + 1]:\n        for y in [B - 1, B, B + 1]:\n            c = 0\n            for kn in knights:\n                if check(kn, (x, y)):\n                    c = 1\n                    break\n            if c == 0:\n                check_mate = 0\n                break\n        if check_mate == 0:\n            break\n    if check_mate == 0:\n        print('NO')\n    elif check_mate == 1:\n        print('YES')", "for t in range(int(input())):\n    tot = int(input()) + 1\n    check = False\n    l = []\n    for _ in range(tot):\n        (x, y) = map(int, input().split())\n        l.append([x, y])\n    (k_x, k_y) = (l[-1][0], l[-1][1])\n    l.pop()\n    for i in range(tot - 1):\n        if abs(l[i][0] - k_x) == 1 and abs(l[i][1] - k_y) == 2 or (abs(l[i][0] - k_x) == 2 and abs(l[i][1] - k_y) == 1):\n            check = True\n            break\n    if not check:\n        print('NO')\n    else:\n        cnt = 0\n        move = [[k_x - 1, k_y], [k_x + 1, k_y], [k_x, k_y - 1], [k_x, k_y + 1], [k_x - 1, k_y - 1], [k_x - 1, k_y + 1], [k_x + 1, k_y - 1], [k_x + 1, k_y + 1]]\n        for i in range(8):\n            for j in range(tot - 1):\n                if abs(l[j][0] - move[i][0]) == 1 and abs(l[j][1] - move[i][1]) == 2 or (abs(l[j][0] - move[i][0]) == 2 and abs(l[j][1] - move[i][1]) == 1):\n                    cnt += 1\n        if cnt >= 8:\n            print('YES')\n        else:\n            print('NO')", "for t in range(int(input())):\n    tot = int(input()) + 1\n    check = False\n    l = []\n    for _ in range(tot):\n        (x, y) = map(int, input().split())\n        l.append([x, y])\n    (k_x, k_y) = (l[-1][0], l[-1][1])\n    l.pop()\n    for i in range(tot - 1):\n        if abs(l[i][0] - k_x) == 1 and abs(l[i][1] - k_y) == 2 or (abs(l[i][0] - k_x) == 2 and abs(l[i][1] - k_y) == 1):\n            check = True\n            break\n    if not check:\n        print('NO')\n    else:\n        cnt = 0\n        move = [[k_x - 1, k_y], [k_x + 1, k_y], [k_x, k_y - 1], [k_x, k_y + 1], [k_x - 1, k_y - 1], [k_x - 1, k_y + 1], [k_x + 1, k_y - 1], [k_x + 1, k_y + 1]]\n        for i in range(8):\n            for j in range(tot - 1):\n                if abs(l[j][0] - move[i][0]) == 1 and abs(l[j][1] - move[i][1]) == 2 or (abs(l[j][0] - move[i][0]) == 2 and abs(l[j][1] - move[i][1]) == 1):\n                    cnt += 1\n        if cnt >= 8:\n            print('YES')\n        else:\n            print('NO')", "testCases = int(input())\nfor testCase in range(testCases):\n    n = int(input())\n    knightPos = []\n    for _ in range(n):\n        knightPos.append(list(map(int, input().split())))\n    kingPos = list(map(int, input().split()))\n    knightMove = []\n    for i in knightPos:\n        knightMove.append([i[0] + 1, i[1] + 2])\n        knightMove.append([i[0] + 2, i[1] + 1])\n        knightMove.append([i[0] - 1, i[1] - 2])\n        knightMove.append([i[0] - 2, i[1] - 1])\n        knightMove.append([i[0] - 1, i[1] + 2])\n        knightMove.append([i[0] - 2, i[1] + 1])\n        knightMove.append([i[0] + 1, i[1] - 2])\n        knightMove.append([i[0] + 2, i[1] - 1])\n    kingMove = []\n    kingMove.append([kingPos[0], kingPos[1]])\n    kingMove.append([kingPos[0] + 1, kingPos[1] + 0])\n    kingMove.append([kingPos[0] + 0, kingPos[1] + 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] - 0])\n    kingMove.append([kingPos[0] - 0, kingPos[1] - 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] - 1])\n    kingMove.append([kingPos[0] + 1, kingPos[1] + 1])\n    kingMove.append([kingPos[0] - 1, kingPos[1] + 1])\n    kingMove.append([kingPos[0] + 1, kingPos[1] - 1])\n    canMove = False\n    for i in kingMove:\n        if i not in knightMove:\n            canMove = True\n            print('NO')\n            break\n    if canMove is False:\n        print('YES')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    kmove = []\n    for i in range(n):\n        (x, y) = list(map(int, input().split()))\n        kmove.append([x + 1, y + 2])\n        kmove.append([x + 1, y - 2])\n        kmove.append([x + 2, y + 1])\n        kmove.append([x + 2, y - 1])\n        kmove.append([x - 1, y - 2])\n        kmove.append([x - 1, y + 2])\n        kmove.append([x - 2, y - 1])\n        kmove.append([x - 2, y + 1])\n    (a, b) = list(map(int, input().split()))\n    ok = 0\n    king = [[a, b], [a + 1, b + 1], [a + 1, b], [a + 1, b - 1], [a, b + 1], [a, b - 1], [a - 1, b], [a - 1, b - 1], [a - 1, b + 1]]\n    for i in king:\n        if i not in kmove:\n            print('NO')\n            ok = 1\n            break\n    if ok == 0:\n        print('YES')", "for _ in range(int(input())):\n    n = int(input())\n    blocked = set()\n    count = 0\n    for k in range(n):\n        j = list(map(int, input().split()))\n        blocked |= {(j[0] + 1, j[1] + 2), (j[0] + 2, j[1] + 1), (j[0] - 2, j[1] + 1), (j[0] - 1, j[1] + 2), (j[0] + 2, j[1] - 1), (j[0] + 1, j[1] - 2), (j[0] - 1, j[1] - 2), (j[0] - 2, j[1] - 1)}\n    king = tuple(map(int, input().split()))\n    kings = [(king[0] + 1, king[1] + 1), (king[0], king[1] + 1), (king[0] + 1, king[1]), (king[0] + 1, king[1] - 1), (king[0] - 1, king[1] + 1), (king[0] - 1, king[1] - 1), (king[0] - 1, king[1]), (king[0], king[1] - 1)]\n    for i in kings:\n        if i in blocked:\n            count += 1\n    if king in blocked and count == 8:\n        print('YES')\n    else:\n        print('NO')", "for _ in range(int(input())):\n    n = int(input())\n    lst = [list(map(int, input().split())) for i in range(n)]\n    (a, b) = map(int, input().split())\n    for i in lst:\n        if i[0] == a or i[1] == b:\n            print('YES')\n            break\n    else:\n        print('NO')", "for i in range(int(input())):\n    n = int(input())\n    blocked = []\n    count = 0\n    for k in range(n):\n        j = list(map(int, input().split()))\n        blocked += [[j[0] + 1, j[1] + 2], [j[0] + 2, j[1] + 1], [j[0] - 2, j[1] + 1], [j[0] - 1, j[1] + 2], [j[0] + 2, j[1] - 1], [j[0] + 1, j[1] - 2], [j[0] - 1, j[1] - 2], [j[0] - 2, j[1] - 1]]\n    king = list(map(int, input().split()))\n    kings = [[king[0] + 1, king[1] + 1], [king[0], king[1] + 1], [king[0] + 1, king[1]], [king[0] + 1, king[1] - 1], [king[0] - 1, king[1] + 1], [king[0] - 1, king[1] - 1], [king[0] - 1, king[1]], [king[0], king[1] - 1]]\n    for i in kings:\n        if i in blocked:\n            count += 1\n    if king in blocked and count == 8:\n        print('YES')\n    else:\n        print('NO')", "T = int(input())\nfor x in range(T):\n    n = int(input())\n    tim = True\n    l = [list(map(int, input().split())) for i in range(n)]\n    (a, b) = map(int, input().split())\n    for i in l:\n        if i[0] == a or i[1] == b:\n            print('YES')\n            tim = False\n            break\n    if tim:\n        print('NO')", "T = int(input())\nfor x in range(T):\n    n = int(input())\n    tim = True\n    l = [list(map(int, input().split())) for i in range(n)]\n    (a, b) = map(int, input().split())\n    for i in l:\n        if i[0] == a or i[1] == b:\n            print('YES')\n            tim = False\n            break\n    if tim:\n        print('NO')", "for _ in range(int(input())):\n    (n, flag) = (int(input()), 0)\n    l = [list(map(int, input().split())) for _ in range(n)]\n    (a, b) = map(int, input().split())\n    for i in l:\n        if i[0] == a or i[1] == b:\n            flag = 1\n    if flag == 1:\n        print('YES')\n    else:\n        print('NO')", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lis.append((x + 1, y + 2))\n        lis.append((x + 1, y - 2))\n        lis.append((x + 2, y + 1))\n        lis.append((x + 2, y - 1))\n        lis.append((x - 1, y - 2))\n        lis.append((x - 1, y + 2))\n        lis.append((x - 2, y + 1))\n        lis.append((x - 2, y - 1))\n    (i, j) = map(int, input().split())\n    ans = 'YES'\n    for u in range(i - 1, i + 2):\n        for v in range(j - 1, j + 2):\n            if (u, v) not in lis:\n                ans = 'NO'\n                break\n    print(ans)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lis.append((x + 1, y + 2))\n        lis.append((x + 1, y - 2))\n        lis.append((x + 2, y + 1))\n        lis.append((x + 2, y - 1))\n        lis.append((x - 1, y - 2))\n        lis.append((x - 1, y + 2))\n        lis.append((x - 2, y + 1))\n        lis.append((x - 2, y - 1))\n    (i, j) = map(int, input().split())\n    ans = 'YES'\n    for u in range(i - 1, i + 2):\n        for v in range(j - 1, j + 2):\n            if (u, v) not in lis:\n                ans = 'NO'\n                break\n    print(ans)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lis.append((x + 1, y + 2))\n        lis.append((x + 1, y - 2))\n        lis.append((x + 2, y + 1))\n        lis.append((x + 2, y - 1))\n        lis.append((x - 1, y - 2))\n        lis.append((x - 1, y + 2))\n        lis.append((x - 2, y + 1))\n        lis.append((x - 2, y - 1))\n    (i, j) = map(int, input().split())\n    ans = 'YES'\n    for u in range(i - 1, i + 2):\n        for v in range(j - 1, j + 2):\n            if (u, v) not in lis:\n                ans = 'NO'\n                break\n    print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    x = []\n    y = []\n    for j in range(n):\n        a = [int(x) for x in input().split()]\n        x.append(a[0])\n        y.append(a[1])\n    k = [int(x) for x in input().split()]\n    c = 'NO'\n    for l in range(n):\n        if x[l] + 2 == k[0] and (y[l] + 1 == k[1] or y[l] - 1 == k[1]):\n            c = 'YES'\n        if x[l] - 2 == k[0] and (y[l] + 1 == k[1] or y[l] - 1 == k[1]):\n            c = 'YES'\n        if y[l] - 2 == k[1] and (x[l] + 1 == k[0] or x[l] - 1 == k[0]):\n            c = 'YES'\n        if y[l] + 2 == k[1] and (x[l] + 1 == k[0] or x[l] - 1 == k[0]):\n            c = 'YES'\n    print(c)", "tc = int(input())\nfor _ in range(tc):\n    n = int(input())\n    lis = []\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        lis.append((x + 1, y + 2))\n        lis.append((x + 1, y - 2))\n        lis.append((x + 2, y + 1))\n        lis.append((x + 2, y - 1))\n        lis.append((x - 1, y - 2))\n        lis.append((x - 1, y + 2))\n        lis.append((x - 2, y + 1))\n        lis.append((x - 2, y - 1))\n    (i, j) = map(int, input().split())\n    ans = 'YES'\n    for u in range(i - 1, i + 2):\n        for v in range(j - 1, j + 2):\n            if (u, v) not in lis:\n                ans = 'NO'\n                break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    knight_moves = set()\n    king_moves = set()\n    for _ in range(n):\n        (x_i, y_i) = map(int, input().split())\n        knight_moves.add((x_i + 2, y_i + 1))\n        knight_moves.add((x_i + 2, y_i - 1))\n        knight_moves.add((x_i - 2, y_i + 1))\n        knight_moves.add((x_i - 2, y_i - 1))\n        knight_moves.add((x_i + 1, y_i + 2))\n        knight_moves.add((x_i - 1, y_i + 2))\n        knight_moves.add((x_i + 1, y_i - 2))\n        knight_moves.add((x_i - 1, y_i - 2))\n    (k_x, k_y) = map(int, input().split())\n    knight_moves.add((k_x + 1, k_y))\n    knight_moves.add((k_x - 1, k_y))\n    knight_moves.add((k_x, k_y + 1))\n    knight_moves.add((k_x, k_y - 1))\n    knight_moves.add((k_x + 1, k_y + 1))\n    knight_moves.add((k_x + 1, k_y - 1))\n    knight_moves.add((k_x - 1, k_y + 1))\n    knight_moves.add((k_x - 1, k_y - 1))\n    if (k_x, k_y) in knight_moves and knight_moves.intersection(king_moves) == king_moves:\n        print('YES')\n    else:\n        print('NO')"]