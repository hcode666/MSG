["def binary_search(end, arr, val):\n    start = 0\n    while start <= end:\n        mid = int((start + end) / 2)\n        if arr[mid] > val:\n            ans = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return ans\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    stack = []\n    stack.append(A[0])\n    for j in range(1, N):\n        if stack[-1] > A[j]:\n            stack[binary_search(len(stack) - 1, stack, A[j])] = A[j]\n        else:\n            stack.append(A[j])\n    print(len(stack), *stack)", "def binary_search(end, arr, val):\n    start = 0\n    while start <= end:\n        mid = int((start + end) / 2)\n        if arr[mid] > val:\n            ans = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return ans\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    stack = []\n    stack.append(A[0])\n    for j in range(1, N):\n        if stack[-1] > A[j]:\n            stack[binary_search(len(stack) - 1, stack, A[j])] = A[j]\n        else:\n            stack.append(A[j])\n    print(len(stack), *stack)", "def binary_search(end, arr, val):\n    start = 0\n    while start <= end:\n        mid = int((start + end) / 2)\n        if arr[mid] > val:\n            ans = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return ans\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    stack = []\n    stack.append(A[0])\n    for j in range(1, N):\n        if stack[-1] > A[j]:\n            stack[binary_search(len(stack) - 1, stack, A[j])] = A[j]\n        else:\n            stack.append(A[j])\n    print(len(stack), *stack)", "from bisect import bisect_right\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    brr = []\n    for i in range(n):\n        if len(brr) == 0:\n            brr.append(arr[i])\n        elif arr[i] >= brr[-1]:\n            brr.append(arr[i])\n        elif arr[i] < brr[0]:\n            brr[0] = arr[i]\n        else:\n            x = bisect_right(brr, arr[i])\n            brr[x] = arr[i]\n    print(len(brr), *brr)\n    t -= 1", "from bisect import bisect_left, bisect_right\nn_cases = int(input())\nfor _ in range(n_cases):\n    input()\n    arr = [int(x) for x in input().split()]\n    tops = [arr[0]]\n    for x in arr[1:]:\n        ix = bisect_right(tops, x)\n        if ix < len(tops):\n            tops[ix] = x\n        else:\n            tops.append(x)\n    print(' '.join((str(x) for x in [len(tops)] + tops)))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    disks = list(map(int, input().strip().split()))[:n]\n    stack = []\n    for i in disks:\n        if len(stack) < 1:\n            stack.append(i)\n        else:\n            s = 0\n            e = len(stack) - 1\n            p = -1\n            while s <= e:\n                m = (s + e) // 2\n                if stack[m] > i:\n                    e = m - 1\n                    p = m\n                else:\n                    s = m + 1\n            if p == -1:\n                stack.append(i)\n            else:\n                stack[p] = i\n    print(len(stack), *stack)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    disks = list(map(int, input().strip().split()))[:n]\n    stack = []\n    for i in disks:\n        if len(stack) < 1:\n            stack.append(i)\n        else:\n            s = 0\n            e = len(stack) - 1\n            p = -1\n            while s <= e:\n                m = (s + e) // 2\n                if stack[m] > i:\n                    e = m - 1\n                    p = m\n                else:\n                    s = m + 1\n            if p == -1:\n                stack.append(i)\n            else:\n                stack[p] = i\n    print(len(stack), *stack)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    disks = list(map(int, input().strip().split()))[:n]\n    stack = []\n    for i in disks:\n        if len(stack) < 1:\n            stack.append(i)\n        else:\n            s = 0\n            e = len(stack) - 1\n            p = -1\n            while s <= e:\n                m = (s + e) // 2\n                if stack[m] > i:\n                    e = m - 1\n                    p = m\n                else:\n                    s = m + 1\n            if p == -1:\n                stack.append(i)\n            else:\n                stack[p] = i\n    print(len(stack), *stack)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    disks = list(map(int, input().strip().split()))[:n]\n    stack = []\n    for i in disks:\n        if len(stack) < 1:\n            stack.append(i)\n        else:\n            s = 0\n            e = len(stack) - 1\n            p = -1\n            while s <= e:\n                m = (s + e) // 2\n                if stack[m] > i:\n                    e = m - 1\n                    p = m\n                else:\n                    s = m + 1\n            if p == -1:\n                stack.append(i)\n            else:\n                stack[p] = i\n    print(len(stack), *stack)", "def bin_search(arr, x, l, h):\n    if l == h:\n        return l if arr[l] > x else l + 1\n    m = (l + h) // 2\n    if arr[m] > x:\n        return bin_search(arr, x, l, m)\n    return bin_search(arr, x, m + 1, h)\n\ndef stack_append(a, x):\n    i = bin_search(a, x, 0, len(a) - 1)\n    if i == len(a):\n        a.append(x)\n    else:\n        a[i] = x\n    return a\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    a = [int(i.strip()) for i in input().split()]\n    stack = [a[0]]\n    for i in range(1, n):\n        x = a[i]\n        stack = stack_append(stack, x)\n    print(len(stack), ' '.join(map(str, stack)))", "testCases = int(input())\nfor tc in range(testCases):\n    n = int(input())\n    disks = list(map(int, input().split()))\n    topDisks = []\n    for disk in disks:\n        if topDisks == []:\n            topDisks.append(disk)\n        else:\n            s = len(topDisks)\n            l = 0\n            h = s - 1\n            ind = -1\n            while l <= h:\n                m = (l + h) // 2\n                if topDisks[m] > disk:\n                    h = m - 1\n                    ind = m\n                else:\n                    l = m + 1\n            if ind == -1:\n                topDisks.append(disk)\n            else:\n                topDisks[ind] = disk\n    print(len(topDisks), end=' ')\n    for i in topDisks:\n        print(i, end=' ')\n    print()", "testCases = int(input())\nfor tc in range(testCases):\n    n = int(input())\n    disks = list(map(int, input().split()))\n    topDisks = []\n    for disk in disks:\n        if topDisks == []:\n            topDisks.append(disk)\n        else:\n            s = len(topDisks)\n            l = 0\n            h = s - 1\n            ind = -1\n            while l <= h:\n                m = (l + h) // 2\n                if topDisks[m] > disk:\n                    h = m - 1\n                    ind = m\n                else:\n                    l = m + 1\n            if ind == -1:\n                topDisks.append(disk)\n            else:\n                topDisks[ind] = disk\n    print(len(topDisks), end=' ')\n    for i in topDisks:\n        print(i, end=' ')\n    print()", "import bisect\nfor z in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = []\n    for i in range(n):\n        j = bisect.bisect(b, a[i])\n        if j == len(b):\n            b.append(a[i])\n        else:\n            b[j] = a[i]\n    for i in range(len(b)):\n        b[i] = str(b[i])\n    print(str(len(b)), ' '.join(b))", "store = []\n\ndef solve(n, arr):\n    for i in arr:\n        i = int(i)\n        if not store or i >= int(store[-1]):\n            store.append(str(i))\n        else:\n            aid(i, len(store) - 1, 0)\n    return ' '.join([str(len(store)), *store])\n\ndef aid(i, a, b):\n    if a == b:\n        store[b] = str(i)\n    elif int(store[(a + b) // 2]) > i:\n        aid(i, (a + b) // 2, b)\n    else:\n        aid(i, a, (a + b) // 2 + 1)\nfor _ in range(int(input())):\n    print(solve(input(), list(input().split())))\n    store = []", "store = []\n\ndef solve(n, arr):\n    for i in arr:\n        if not store or i >= store[-1]:\n            store.append(i)\n        else:\n            aid(i, len(store) - 1, 0)\n    return ' '.join(map(str, [len(store), *store]))\n\ndef aid(i, a, b):\n    if a == b:\n        store[b] = i\n    elif store[(a + b) // 2] > i:\n        aid(i, (a + b) // 2, b)\n    else:\n        aid(i, a, (a + b) // 2 + 1)\nfor _ in range(int(input())):\n    print(solve(int(input()), list(map(int, input().split()))))\n    store = []", "import bisect\nfor z in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = []\n    for i in range(n):\n        j = bisect.bisect(b, a[i])\n        if j == len(b):\n            b.append(a[i])\n        else:\n            b[j] = a[i]\n    for i in range(len(b)):\n        b[i] = str(b[i])\n    print(str(len(b)), ' '.join(b))", "def binary_search(end, arr, val):\n    start = 0\n    while start <= end:\n        mid = int((start + end) / 2)\n        if arr[mid] > val:\n            ans = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return ans\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    stack = []\n    stack.append(A[0])\n    for j in range(1, N):\n        if stack[-1] > A[j]:\n            stack[binary_search(len(stack) - 1, stack, A[j])] = A[j]\n        else:\n            stack.append(A[j])\n    print(len(stack), *stack)", "from bisect import bisect\nt = int(input())\nfor _ in range(t):\n    _ = int(input())\n    lst = list(map(int, input().split()))\n    stack = list()\n    for disk in lst:\n        idx = bisect(stack, disk)\n        if idx == len(stack):\n            stack.append(disk)\n        else:\n            stack[idx] = disk\n    print(len(stack), ' '.join((str(disk) for disk in stack)))", "def put(arr, x, l, h):\n    if h >= l:\n        mid = (l + h) // 2\n        if arr[mid] > x:\n            if mid == 0 or arr[mid - 1] <= x:\n                arr[mid] = x\n            else:\n                put(arr, x, l, mid - 1)\n        else:\n            put(arr, x, mid + 1, h)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    st = []\n    for i in range(n):\n        if len(st) == 0:\n            st.append(l1[i])\n        else:\n            top = st[-1]\n            if top <= l1[i]:\n                st.append(l1[i])\n            else:\n                put(st, l1[i], 0, len(st))\n    res = ' '.join((str(x) for x in st))\n    print(f'{len(st)} {res}')", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list()\n    for i in range(0, len(a)):\n        if i == 0:\n            b.append(a[i])\n            continue\n        j = 0\n        k = len(b)\n        while j < k:\n            mid = (j + k) // 2\n            if a[i] < b[mid]:\n                k = mid\n            else:\n                j = mid + 1\n        if j >= len(b):\n            b.append(a[i])\n        else:\n            b[j] = a[i]\n    print(len(b), *b)", "from bisect import bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    stack_set = []\n    for i in arr:\n        ind = bisect_right(stack_set, i)\n        if ind >= len(stack_set):\n            stack_set.append(i)\n        else:\n            stack_set[ind] = i\n    print(len(stack_set), end=' ')\n    print(*stack_set)", "from bisect import bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    stack_set = []\n    for i in arr:\n        ind = bisect_right(stack_set, i)\n        if ind >= len(stack_set):\n            stack_set.append(i)\n        else:\n            stack_set[ind] = i\n    print(len(stack_set), end=' ')\n    print(*stack_set)", "class SortedList:\n\n    def __init__(self, iterable=[], _load=200):\n        values = sorted(iterable)\n        self._len = _len = len(values)\n        self._load = _load\n        self._lists = _lists = [values[i:i + _load] for i in range(0, _len, _load)]\n        self._list_lens = [len(_list) for _list in _lists]\n        self._mins = [_list[0] for _list in _lists]\n        self._fen_tree = []\n        self._rebuild = True\n\n    def _fen_build(self):\n        self._fen_tree[:] = self._list_lens\n        _fen_tree = self._fen_tree\n        for i in range(len(_fen_tree)):\n            if i | i + 1 < len(_fen_tree):\n                _fen_tree[i | i + 1] += _fen_tree[i]\n        self._rebuild = False\n\n    def _fen_update(self, index, value):\n        if not self._rebuild:\n            _fen_tree = self._fen_tree\n            while index < len(_fen_tree):\n                _fen_tree[index] += value\n                index |= index + 1\n\n    def _fen_query(self, end):\n        if self._rebuild:\n            self._fen_build()\n        _fen_tree = self._fen_tree\n        x = 0\n        while end:\n            x += _fen_tree[end - 1]\n            end &= end - 1\n        return x\n\n    def _fen_findkth(self, k):\n        _list_lens = self._list_lens\n        if k < _list_lens[0]:\n            return (0, k)\n        if k >= self._len - _list_lens[-1]:\n            return (len(_list_lens) - 1, k + _list_lens[-1] - self._len)\n        if self._rebuild:\n            self._fen_build()\n        _fen_tree = self._fen_tree\n        idx = -1\n        for d in reversed(range(len(_fen_tree).bit_length())):\n            right_idx = idx + (1 << d)\n            if right_idx < len(_fen_tree) and k >= _fen_tree[right_idx]:\n                idx = right_idx\n                k -= _fen_tree[idx]\n        return (idx + 1, k)\n\n    def _delete(self, pos, idx):\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n        self._len -= 1\n        self._fen_update(pos, -1)\n        del _lists[pos][idx]\n        _list_lens[pos] -= 1\n        if _list_lens[pos]:\n            _mins[pos] = _lists[pos][0]\n        else:\n            del _lists[pos]\n            del _list_lens[pos]\n            del _mins[pos]\n            self._rebuild = True\n\n    def _loc_left(self, value):\n        if not self._len:\n            return (0, 0)\n        _lists = self._lists\n        _mins = self._mins\n        (lo, pos) = (-1, len(_lists) - 1)\n        while lo + 1 < pos:\n            mi = lo + pos >> 1\n            if value <= _mins[mi]:\n                pos = mi\n            else:\n                lo = mi\n        if pos and value <= _lists[pos - 1][-1]:\n            pos -= 1\n        _list = _lists[pos]\n        (lo, idx) = (-1, len(_list))\n        while lo + 1 < idx:\n            mi = lo + idx >> 1\n            if value <= _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n        return (pos, idx)\n\n    def _loc_right(self, value):\n        if not self._len:\n            return (0, 0)\n        _lists = self._lists\n        _mins = self._mins\n        (pos, hi) = (0, len(_lists))\n        while pos + 1 < hi:\n            mi = pos + hi >> 1\n            if value < _mins[mi]:\n                hi = mi\n            else:\n                pos = mi\n        _list = _lists[pos]\n        (lo, idx) = (-1, len(_list))\n        while lo + 1 < idx:\n            mi = lo + idx >> 1\n            if value < _list[mi]:\n                idx = mi\n            else:\n                lo = mi\n        return (pos, idx)\n\n    def add(self, value):\n        _load = self._load\n        _lists = self._lists\n        _mins = self._mins\n        _list_lens = self._list_lens\n        self._len += 1\n        if _lists:\n            (pos, idx) = self._loc_right(value)\n            self._fen_update(pos, 1)\n            _list = _lists[pos]\n            _list.insert(idx, value)\n            _list_lens[pos] += 1\n            _mins[pos] = _list[0]\n            if _load + _load < len(_list):\n                _lists.insert(pos + 1, _list[_load:])\n                _list_lens.insert(pos + 1, len(_list) - _load)\n                _mins.insert(pos + 1, _list[_load])\n                _list_lens[pos] = _load\n                del _list[_load:]\n                self._rebuild = True\n        else:\n            _lists.append([value])\n            _mins.append(value)\n            _list_lens.append(1)\n            self._rebuild = True\n\n    def discard(self, value):\n        _lists = self._lists\n        if _lists:\n            (pos, idx) = self._loc_right(value)\n            if idx and _lists[pos][idx - 1] == value:\n                self._delete(pos, idx - 1)\n\n    def remove(self, value):\n        _len = self._len\n        self.discard(value)\n        if _len == self._len:\n            raise ValueError('{0!r} not in list'.format(value))\n\n    def pop(self, index=-1):\n        (pos, idx) = self._fen_findkth(self._len + index if index < 0 else index)\n        value = self._lists[pos][idx]\n        self._delete(pos, idx)\n        return value\n\n    def bisect_left(self, value):\n        (pos, idx) = self._loc_left(value)\n        return self._fen_query(pos) + idx\n\n    def bisect_right(self, value):\n        (pos, idx) = self._loc_right(value)\n        return self._fen_query(pos) + idx\n\n    def count(self, value):\n        return self.bisect_right(value) - self.bisect_left(value)\n\n    def __len__(self):\n        return self._len\n\n    def __getitem__(self, index):\n        (pos, idx) = self._fen_findkth(self._len + index if index < 0 else index)\n        return self._lists[pos][idx]\n\n    def __delitem__(self, index):\n        (pos, idx) = self._fen_findkth(self._len + index if index < 0 else index)\n        self._delete(pos, idx)\n\n    def __contains__(self, value):\n        _lists = self._lists\n        if _lists:\n            (pos, idx) = self._loc_left(value)\n            return idx < len(_lists[pos]) and _lists[pos][idx] == value\n        return False\n\n    def __iter__(self):\n        return (value for _list in self._lists for value in _list)\n\n    def __reversed__(self):\n        return (value for _list in reversed(self._lists) for value in reversed(_list))\n\n    def __repr__(self):\n        return 'SortedList({0})'.format(list(self))\nt = int(input())\nfor j in range(t):\n    length = int(input())\n    a = list(map(int, input().split()))\n    stacks = SortedList([])\n    for el in a:\n        ind = stacks.bisect_right(el)\n        if ind < len(stacks):\n            stacks.remove(stacks[ind])\n            stacks.add(el)\n        else:\n            stacks.add(el)\n    print(len(stacks), end=' ')\n    print(*stacks)", "from bisect import insort, bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = []\n    for i in a:\n        curr = bisect(s, i)\n        if curr < len(s):\n            del s[curr]\n        insort(s, i)\n    print(len(s), end=' ')\n    for i in s:\n        print(i, end=' ')\n    print()", "def insert(arr: list, x: int, low: int, high: int):\n    if high >= low:\n        mid = (high + low) // 2\n        if arr[mid] > x:\n            if mid == 0 or arr[mid - 1] <= x:\n                arr[mid] = x\n            else:\n                insert(arr, x, low, mid - 1)\n        else:\n            return insert(arr, x, mid + 1, high)\nt = int(input())\nfor __ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stack = []\n    for disk in a:\n        if len(stack) == 0:\n            stack.append(disk)\n        elif disk >= stack[-1]:\n            stack.append(disk)\n        else:\n            insert(stack, disk, 0, len(stack))\n    result = ' '.join((str(x) for x in stack))\n    print(f'{len(stack)} {result}')", "def mike():\n    N = int(input())\n    A = input().split()\n    S = []\n    S.append(int(A[0]))\n    for i in range(1, len(A)):\n        lo = 0\n        hi = len(S) - 1\n        while hi >= lo:\n            mid = (lo + hi) // 2\n            if S[mid] > int(A[i]):\n                hi = mid\n            else:\n                lo = mid + 1\n            if hi == lo:\n                if S[mid] > int(A[i]):\n                    hi = mid\n                    break\n        if hi <= len(S) - 1 and S[hi] > int(A[i]):\n            S[hi] = int(A[i])\n        else:\n            S.append(int(A[i]))\n    print(len(S), *S)\nt = int(input())\nwhile t > 0:\n    mike()\n    t -= 1", "def mike():\n    N = int(input())\n    A = input().split()\n    S = []\n    S.append(int(A[0]))\n    for i in range(1, len(A)):\n        lo = 0\n        hi = len(S) - 1\n        while hi >= lo:\n            mid = (lo + hi) // 2\n            if S[mid] > int(A[i]):\n                hi = mid\n            else:\n                lo = mid + 1\n            if hi == lo:\n                if S[mid] > int(A[i]):\n                    hi = mid\n                    break\n        if hi <= len(S) - 1 and S[hi] > int(A[i]):\n            S[hi] = int(A[i])\n        else:\n            S.append(int(A[i]))\n    print(len(S), *S)\nt = int(input())\nwhile t > 0:\n    mike()\n    t -= 1", "def mike():\n    N = int(input())\n    A = input().split()\n    S = []\n    S.append(int(A[0]))\n    for i in range(1, len(A)):\n        lo = 0\n        hi = len(S) - 1\n        while hi >= lo:\n            mid = (lo + hi) // 2\n            if S[mid] > int(A[i]):\n                hi = mid\n            else:\n                lo = mid + 1\n            if hi == lo:\n                if S[mid] > int(A[i]):\n                    hi = mid\n                    break\n        if hi <= len(S) - 1 and S[hi] > int(A[i]):\n            S[hi] = int(A[i])\n        else:\n            S.append(int(A[i]))\n    print(len(S), *S)\nt = int(input())\nwhile t > 0:\n    mike()\n    t -= 1", "def mike():\n    N = int(input())\n    A = input().split()\n    S = []\n    S.append(int(A[0]))\n    for i in range(1, len(A)):\n        lo = 0\n        hi = len(S) - 1\n        while hi >= lo:\n            mid = (lo + hi) // 2\n            if S[mid] > int(A[i]):\n                hi = mid\n            else:\n                lo = mid + 1\n            if hi == lo:\n                if S[mid] > int(A[i]):\n                    hi = mid\n                    break\n        if hi <= len(S) - 1 and S[hi] > int(A[i]):\n            S[hi] = int(A[i])\n        else:\n            S.append(int(A[i]))\n    print(len(S), *S)\nt = int(input())\nwhile t > 0:\n    mike()\n    t -= 1", "def li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\n\ndef binSer(a, x):\n    low = 0\n    high = len(a) - 2\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if a[mid] <= x and a[mid + 1] > x:\n            a[mid + 1] = x\n            return a\n        if a[mid] <= x:\n            low = mid + 1\n        elif a[mid] > x:\n            high = mid - 1\nfor tastcas in range(int(input())):\n    n = ii()\n    a = li()\n    s = [a[0]]\n    for i in range(1, n):\n        if a[i] < s[0]:\n            s[0] = a[i]\n        elif a[i] >= s[-1]:\n            s.append(a[i])\n        else:\n            s = binSer(s, a[i])\n    print(len(s), end=' ')\n    for i in range(len(s)):\n        print(s[i], end=' ')\n    print()", "import math\n\ndef bin(arr, x):\n    low = 0\n    high = len(arr) - 2\n    mid = 0\n    while low <= high:\n        mid = (high + low) // 2\n        if arr[mid] <= x and arr[mid + 1] > x:\n            arr[mid + 1] = x\n            return arr\n        if arr[mid] <= x:\n            low = mid + 1\n        elif arr[mid] > x:\n            high = mid - 1\n\ndef solve():\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = [l[0]]\n    for i in range(1, n):\n        if l[i] < s[0]:\n            s[0] = l[i]\n        elif l[i] >= s[-1]:\n            s.append(l[i])\n        else:\n            s = bin(s, l[i])\n    print(len(s), end=' ')\n    for i in range(len(s)):\n        print(s[i], end=' ')\n    print()\nT = int(input())\nfor t in range(T):\n    solve()", "import bisect\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    st = []\n    flag = True\n    for each in arr:\n        if flag:\n            st.append(each)\n            flag = False\n            continue\n        if each >= st[-1]:\n            st.append(each)\n        else:\n            idx = bisect.bisect_right(st, each)\n            st[idx] = each\n    st = [len(st)] + st\n    print(*st)", "import bisect\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    st = []\n    flag = True\n    for each in arr:\n        if flag:\n            st.append(each)\n            flag = False\n            continue\n        if each >= st[-1]:\n            st.append(each)\n        else:\n            idx = bisect.bisect_right(st, each)\n            st[idx] = each\n    st = [len(st)] + st\n    print(*st)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    D = [L[0]]\n    for i in L[1:]:\n        if i >= D[-1]:\n            D.append(i)\n        else:\n            ind = bisect.bisect(D, i)\n            D[ind] = i\n    D.insert(0, len(D))\n    print(*D)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    D = [L[0]]\n    for i in L[1:]:\n        if i >= D[-1]:\n            D.append(i)\n        else:\n            ind = bisect.bisect(D, i)\n            D[ind] = i\n    D.insert(0, len(D))\n    print(*D)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    D = []\n    for i in L:\n        if len(D) == 0 or i >= D[-1]:\n            D.append(i)\n        else:\n            ind = bisect.bisect(D, i)\n            D[ind] = i\n    D.insert(0, len(D))\n    print(*D)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list()\n    for i in range(0, len(a)):\n        if i == 0:\n            b.append(a[i])\n            continue\n        j = 0\n        k = len(b)\n        while j < k:\n            mid = (j + k) // 2\n            if a[i] < b[mid]:\n                k = mid\n            else:\n                j = mid + 1\n        if j >= len(b):\n            b.append(a[i])\n        else:\n            b[j] = a[i]\n    print(len(b), *b)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = []\n    placed = 0\n    for i in range(n):\n        if ans == []:\n            ans.append([arr[i]])\n        else:\n            (beg, end) = (0, len(ans) - 1)\n            while beg <= end:\n                mid = (beg + end) // 2\n                if arr[i] < ans[mid][-1]:\n                    end = mid - 1\n                    placed += 1\n                else:\n                    beg = mid + 1\n            if not placed:\n                ans.append([arr[i]])\n            elif arr[i] < ans[mid][-1]:\n                ans[mid].append(arr[i])\n            elif mid != len(ans) - 1:\n                ans[mid + 1].append(arr[i])\n            else:\n                ans.append([arr[i]])\n    res = [row[-1] for row in ans]\n    print(*[len(ans)] + res)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = []\n    placed = 0\n    for i in range(n):\n        if ans == []:\n            ans.append([arr[i]])\n        else:\n            (beg, end) = (0, len(ans) - 1)\n            while beg <= end:\n                mid = (beg + end) // 2\n                if arr[i] < ans[mid][-1]:\n                    end = mid - 1\n                    placed += 1\n                else:\n                    beg = mid + 1\n            if not placed:\n                ans.append([arr[i]])\n            elif arr[i] < ans[mid][-1]:\n                ans[mid].append(arr[i])\n            elif mid != len(ans) - 1:\n                ans[mid + 1].append(arr[i])\n            else:\n                ans.append([arr[i]])\n    res = [row[-1] for row in ans]\n    print(*[len(ans)] + res)", "import bisect\nimport math\nfrom posixpath import split\nmod = 10 ** 9 + 7\n\ndef findind(l, r, ans, val):\n    ind = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if ans[mid] <= val:\n            l = mid + 1\n        else:\n            ind = mid\n            r = mid - 1\n    return ind\n\ndef findans(n, a):\n    ans = []\n    for i in range(0, n):\n        l = 0\n        r = len(ans)\n        ind = findind(l, r - 1, ans, a[i])\n        if ind == -1:\n            ind1 = bisect.bisect_left(ans, a[i], 0, len(ans))\n            ans.insert(ind1, a[i])\n        else:\n            ans[ind] = a[i]\n    return ans\n\ndef main():\n    t = int(input())\n    while t != 0:\n        t -= 1\n        n = int(input())\n        a = list(map(int, input().strip().split()))[:n]\n        ans = findans(n, a)\n        anslen = len(ans)\n        print(anslen, end=' ')\n        for i in range(0, anslen):\n            print(ans[i], end=' ')\n        print()\nmain()", "import bisect\nfor T in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    newArr = [l[0]]\n    for i in range(1, n):\n        if l[i] >= newArr[-1]:\n            newArr.append(l[i])\n        else:\n            index = bisect.bisect(newArr, l[i])\n            newArr[index] = l[i]\n    print(len(newArr), *newArr)", "import bisect\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stack = []\n    for el in a:\n        if len(stack) == 0 or el >= stack[-1]:\n            stack.append(el)\n        else:\n            min_index = bisect.bisect(stack, el)\n            stack[min_index] = el\n    stack.insert(0, len(stack))\n    print(*stack)", "import bisect\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stack = []\n    for el in a:\n        if len(stack) == 0 or el >= stack[-1]:\n            stack.append(el)\n        else:\n            min_index = bisect.bisect(stack, el)\n            stack[min_index] = el\n    stack.insert(0, len(stack))\n    print(*stack)", "import bisect\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stack = []\n    for el in a:\n        if len(stack) == 0 or el >= stack[-1]:\n            stack.append(el)\n        else:\n            min_index = bisect.bisect(stack, el)\n            stack[min_index] = el\n    stack.insert(0, len(stack))\n    print(*stack)", "import bisect\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    stack = []\n    for el in a:\n        if len(stack) == 0 or el >= stack[-1]:\n            stack.append(el)\n        else:\n            min_index = bisect.bisect(stack, el)\n            stack[min_index] = el\n    stack.insert(0, len(stack))\n    print(*stack)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    stack = [[A[0]]]\n    for i in A[1:]:\n        if stack[-1][0] > i:\n            (l, r) = (0, len(stack) - 1)\n            while l <= r:\n                mid = l + (r - l) // 2\n                if stack[mid][0] <= i:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            stack[l][0] = i\n        else:\n            stack.append([i])\n    print(len(stack), end=' ')\n    for s in stack:\n        print(s[-1], end=' ')\n    print('')", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    stack = [[A[0]]]\n    for i in A[1:]:\n        if stack[-1][0] > i:\n            (l, r) = (0, len(stack) - 1)\n            while l <= r:\n                mid = l + (r - l) // 2\n                if stack[mid][0] <= i:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            stack[l][0] = i\n        else:\n            stack.append([i])\n    print(len(stack), end=' ')\n    for s in stack:\n        print(s[-1], end=' ')\n    print('')", "def bound_search(x, lst, compare):\n    (lo, up) = (0, len(lst))\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list(map(int, input().split()))\n    lst = []\n    for i in range(len(A)):\n        if i == 0:\n            lst.append(A[i])\n            continue\n        ind = bound_search(A[i], lst, upper)\n        if ind == len(lst):\n            lst.append(A[i])\n        else:\n            lst[ind] = A[i]\n    print(len(lst), end=' ')\n    print(*lst)\n    T -= 1", "def bound_search(x, lst, compare):\n    (lo, up) = (0, len(lst))\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list(map(int, input().split()))\n    lst = []\n    for i in range(len(A)):\n        if i == 0:\n            lst.append(A[i])\n            continue\n        ind = bound_search(A[i], lst, upper)\n        if ind == len(lst):\n            lst.append(A[i])\n        else:\n            lst[ind] = A[i]\n    print(len(lst), end=' ')\n    print(*lst)\n    T -= 1", "def bound_search(x, lst, compare):\n    (lo, up) = (0, len(lst))\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list(map(int, input().split()))\n    lst = []\n    for i in range(len(A)):\n        if i == 0:\n            lst.append(A[i])\n            continue\n        ind = bound_search(A[i], lst, upper)\n        if ind == len(lst):\n            lst.append(A[i])\n        else:\n            lst[ind] = A[i]\n    print(len(lst), end=' ')\n    print(*lst)\n    T -= 1", "def bound_search(x, lst, compare):\n    (lo, up) = (0, len(lst))\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list(map(int, input().split()))\n    lst = []\n    for i in range(len(A)):\n        if i == 0:\n            lst.append(A[i])\n            continue\n        ind = bound_search(A[i], lst, upper)\n        if ind == len(lst):\n            lst.append(A[i])\n        else:\n            lst[ind] = A[i]\n    print(len(lst), end=' ')\n    print(*lst)\n    T -= 1", "def bound_search(x, lst, compare):\n    (lo, up) = (0, len(lst))\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list(map(int, input().split()))\n    lst = []\n    for i in range(len(A)):\n        if i == 0:\n            lst.append(A[i])\n            continue\n        ind = bound_search(A[i], lst, upper)\n        if ind == len(lst):\n            lst.append(A[i])\n        else:\n            lst[ind] = A[i]\n    print(len(lst), end=' ')\n    print(*lst)\n    T -= 1", "def bound_search(x, lst, compare):\n    (lo, up) = (0, len(lst))\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list(map(int, input().split()))\n    lst = []\n    for i in range(len(A)):\n        if i == 0:\n            lst.append(A[i])\n            continue\n        ind = bound_search(A[i], lst, upper)\n        if ind == len(lst):\n            lst.append(A[i])\n        else:\n            lst[ind] = A[i]\n    print(len(lst), end=' ')\n    print(*lst)\n    T -= 1", "def bound_search(x, lst, compare):\n    (lo, up) = (0, len(lst))\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    A = list(map(int, input().split()))\n    lst = []\n    for i in range(len(A)):\n        if i == 0:\n            lst.append(A[i])\n            continue\n        ind = bound_search(A[i], lst, upper)\n        if ind == len(lst):\n            lst.append(A[i])\n        else:\n            lst[ind] = A[i]\n    print(len(lst), end=' ')\n    print(*lst)\n    T -= 1", "from bisect import bisect_right\nfor test_case in range(int(input())):\n    N = int(input())\n    S = 0\n    stacks = []\n    for A in map(int, input().split()):\n        p = bisect_right(stacks, A)\n        if p < S:\n            stacks[p] = A\n        else:\n            stacks += [A]\n            S += 1\n    print(S, end=' ')\n    for A in stacks:\n        print(A, end=' ')\n    print()", "from bisect import bisect_right\nfor test_case in range(int(input())):\n    N = int(input())\n    S = 0\n    stacks = []\n    for A in map(int, input().split()):\n        p = bisect_right(stacks, A)\n        if p == S:\n            stacks += [A]\n            S += 1\n        else:\n            stacks[p] = A\n    print(S, end=' ')\n    for A in stacks:\n        print(A, end=' ')\n    print()", "from bisect import bisect_right\nfor test_case in range(int(input())):\n    N = int(input())\n    S = 0\n    stacks = []\n    for A in list(map(int, input().split())):\n        p = bisect_right(stacks, A)\n        if p == S:\n            stacks += [A]\n            S += 1\n        else:\n            stacks[p] = A\n    print(S, end=' ')\n    for A in stacks:\n        print(A, end=' ')\n    print()", "from bisect import bisect_right\nfor test_case in range(int(input())):\n    N = int(input())\n    S = 0\n    stack = []\n    for A in list(map(int, input().split())):\n        p = bisect_right(stack, A)\n        if p == S:\n            stack += [A]\n            S += 1\n        else:\n            stack[p] = A\n    print(S, end=' ')\n    for A in stack:\n        print(A, end=' ')\n    print()", "for test_case in range(int(input())):\n    N = int(input())\n    S = 0\n    stack = []\n    for A in list(map(int, input().split())):\n        r = S - 1\n        if r < 0 or A >= stack[r]:\n            stack += [A]\n            S += 1\n        else:\n            l = 0\n            p = S\n            while l <= r:\n                m = (l + r) // 2\n                if stack[m] > A:\n                    r = m - 1\n                    p = min(p, m)\n                else:\n                    l = m + 1\n            stack[p] = A\n    print(S, end=' ')\n    for A in stack:\n        print(A, end=' ')\n    print()", "for test_case in range(int(input())):\n    N = int(input())\n    n = 0\n    stack = []\n    for A in list(map(int, input().split())):\n        r = n - 1\n        if r < 0 or A >= stack[r]:\n            stack += [A]\n            n += 1\n        else:\n            l = 0\n            p = n\n            while l <= r:\n                m = (l + r) // 2\n                if stack[m] > A:\n                    r = m - 1\n                    p = min(p, m)\n                else:\n                    l = m + 1\n            stack[p] = A\n    print(n, end=' ')\n    for a in stack:\n        print(a, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    ls = []\n    ls.append(a[0])\n    for i in range(1, n):\n        n1 = len(ls)\n        find = a[i]\n        if ls[n1 - 1] <= find:\n            ls.append(a[i])\n        else:\n            left = 0\n            right = n1\n            flag = 1\n            while flag:\n                middle = (left + right) // 2\n                if find < ls[middle] and find >= ls[middle - 1]:\n                    flag = 0\n                elif find < ls[middle]:\n                    right = middle\n                else:\n                    left = middle\n                if left == right:\n                    flag = 0\n            ls[middle] = find\n    print(len(ls), *ls)", "def binarySearch(arr, key):\n    l = 0\n    r = len(arr) - 1\n    ans = r + 1\n    while l <= r:\n        mid = (l + r) // 2\n        isFound = arr[mid] > key\n        if isFound:\n            (ans, r) = (mid, mid - 1)\n        else:\n            l = mid + 1\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    stacks = list(map(int, input().split()))\n    temp = [stacks[0]]\n    for i in range(1, n):\n        idx = binarySearch(temp, stacks[i])\n        if idx == len(temp):\n            temp += [stacks[i]]\n        else:\n            temp[idx] = stacks[i]\n    print(len(temp), *temp)", "T = int(input())\nfor i in range(T):\n    n1 = int(input())\n    A = list(map(int, input().split(' ')))\n    lis = []\n    lis.append(A[0])\n    for i in range(1, n1):\n        n = len(lis)\n        find = A[i]\n        if lis[n - 1] <= find:\n            lis.append(A[i])\n        else:\n            left = 0\n            right = n\n            flag = 1\n            while flag:\n                middle = (left + right) // 2\n                if find < lis[middle] and find >= lis[middle - 1]:\n                    flag = 0\n                elif find < lis[middle]:\n                    right = middle\n                else:\n                    left = middle\n                if left == right:\n                    flag = 0\n            lis[middle] = find\n    print(len(lis), *lis)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    stk = [li[0]]\n    for i in range(1, n):\n        a = 0\n        b = len(stk) - 1\n        f = 0\n        while a <= b:\n            m = (a + b) // 2\n            if stk[m] > li[i]:\n                ans = m\n                b = m - 1\n                f = 1\n            else:\n                a = m + 1\n        if f == 1:\n            stk[ans] = li[i]\n        else:\n            stk.append(li[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    s = 0\n    for i in range(n):\n        if s == 0:\n            l1.append(l[i])\n            s += 1\n            continue\n        if l1[s - 1] <= l[i]:\n            l1.append(l[i])\n            s += 1\n            continue\n        else:\n            t = 0\n            h = s - 1\n            lo = 0\n            t = (lo + h) // 2\n            while lo <= h:\n                m = (lo + h) // 2\n                if l1[m] > l[i]:\n                    t = m\n                    h = m - 1\n                else:\n                    lo = m + 1\n            l1[t] = l[i]\n    print(s, *l1)", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ll = []\n    s = 0\n    for i in range(n):\n        if s == 0:\n            ll.append(a[i])\n            s += 1\n            continue\n        if a[i] >= ll[s - 1]:\n            ll.append(a[i])\n            s += 1\n            continue\n        else:\n            t = 0\n            h = s - 1\n            l = 0\n            t = (l + h) // 2\n            while l <= h:\n                m = (l + h) // 2\n                if ll[m] > a[i]:\n                    t = m\n                    h = m - 1\n                else:\n                    l = m + 1\n            ll[t] = a[i]\n    print(s, *ll)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    stk = [li[0]]\n    for i in range(1, n):\n        a = 0\n        b = len(stk) - 1\n        f = 0\n        while a <= b:\n            m = (a + b) // 2\n            if stk[m] > li[i]:\n                ans = m\n                b = m - 1\n                f = 1\n            else:\n                a = m + 1\n        if f == 1:\n            stk[ans] = li[i]\n        else:\n            stk.append(li[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = []\n    for i in l:\n        if len(k) == 0 or k[-1] <= i:\n            k.append(i)\n        else:\n            pos = bisect.bisect(k, i)\n            k[pos] = i\n    k.insert(0, len(k))\n    print(*k)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    k = []\n    for i in lst:\n        if len(k) == 0 or k[-1] <= i:\n            k.append(i)\n        else:\n            pos = bisect.bisect(k, i)\n            k[pos] = i\n    k.insert(0, len(k))\n    print(*k)", "import bisect\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    k = []\n    for i in lst:\n        if len(k) == 0 or k[-1] <= i:\n            k.append(i)\n        else:\n            pos = bisect.bisect(k, i)\n            k[pos] = i\n    print(len(k), *k)", "def binary_search(stk_tops, key):\n    (l, r) = (0, len(stk_tops) - 1)\n    index = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if stk_tops[mid] <= key:\n            l = mid + 1\n        else:\n            index = mid\n            r = mid - 1\n    return index\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    stk_tops = []\n    for radii in A:\n        index = binary_search(stk_tops, radii)\n        if index == -1:\n            stk_tops.append(radii)\n        else:\n            stk_tops[index] = radii\n    print(len(stk_tops), *stk_tops)", "def binary_search(stk_tops, key):\n    (l, r) = (0, len(stk_tops) - 1)\n    index = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if stk_tops[mid] <= key:\n            l = mid + 1\n        else:\n            index = mid\n            r = mid - 1\n    return index\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    stk_tops = []\n    for radii in A:\n        index = binary_search(stk_tops, radii)\n        if index == -1:\n            stk_tops.append(radii)\n        else:\n            stk_tops[index] = radii\n    print(len(stk_tops), *stk_tops)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    res = []\n    res.append(l[0])\n    for i in range(1, len(l)):\n        (s, r) = (0, len(res) - 1)\n        ans = -1\n        while s <= r:\n            mid = (s + r) // 2\n            if res[mid] > l[i]:\n                ans = mid\n                r = mid - 1\n            else:\n                s = mid + 1\n        if ans == -1:\n            res.append(l[i])\n        else:\n            res[ans] = l[i]\n    print(len(res), *res)", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    res = []\n    res.append(l[0])\n    for i in range(1, len(l)):\n        (s, r) = (0, len(res) - 1)\n        ans = -1\n        while s <= r:\n            mid = (s + r) // 2\n            if res[mid] > l[i]:\n                ans = mid\n                r = mid - 1\n            else:\n                s = mid + 1\n        if ans == -1:\n            res.append(l[i])\n        else:\n            res[ans] = l[i]\n    print(len(res), *res)", "for _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    res = []\n    res.append(l[0])\n    for i in range(1, len(l)):\n        (s, r) = (0, len(res) - 1)\n        ans = -1\n        while s <= r:\n            mid = (s + r) // 2\n            if res[mid] > l[i]:\n                ans = mid\n                r = mid - 1\n            else:\n                s = mid + 1\n        if ans == -1:\n            res.append(l[i])\n        else:\n            res[ans] = l[i]\n    print(len(res), *res)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    stk = [l[0]]\n    for i in range(1, n):\n        p1 = 0\n        p2 = len(stk) - 1\n        f = 0\n        while p1 <= p2:\n            m = (p1 + p2) // 2\n            if stk[m] > l[i]:\n                ans = m\n                p2 = m - 1\n                f = 1\n            else:\n                p1 = m + 1\n        if f == 1:\n            stk[ans] = l[i]\n        else:\n            stk.append(l[i])\n    print(len(stk), end=' ')\n    for i in stk:\n        print(i, end=' ')\n    print()", "def binary_search(stk_tops, key):\n    (l, r) = (0, len(stk_tops) - 1)\n    index = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if stk_tops[mid] <= key:\n            l = mid + 1\n        else:\n            index = mid\n            r = mid - 1\n    return index\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    stk_tops = []\n    for radii in A:\n        index = binary_search(stk_tops, radii)\n        if index == -1:\n            stk_tops.append(radii)\n        else:\n            stk_tops[index] = radii\n    print(len(stk_tops), *stk_tops)", "import bisect\nT = int(input())\nfor _ in range(T):\n    size = int(input())\n    disks = list(map(int, input().split()))\n    stack = [disks[0]]\n    for i in range(len(disks) - 1):\n        if disks[i] < disks[i + 1]:\n            pos = bisect.bisect(stack, disks[i + 1])\n            if pos == len(stack):\n                stack.append(disks[i + 1])\n            else:\n                stack[pos] = disks[i + 1]\n        elif disks[i] >= disks[i + 1]:\n            ppos = bisect.bisect(stack, disks[i + 1])\n            try:\n                stack[ppos] = disks[i + 1]\n            except:\n                stack.append(disks[i + 1])\n    print(len(stack), *stack)", "from sys import stdin, stdout\ninput = stdin.readline\n\ndef binarySearch(arr, term):\n    n = len(arr)\n    low = 0\n    high = n - 1\n    (ele, pos) = (-1, -1)\n    while high >= low:\n        mid = (low + high) // 2\n        if arr[mid] <= term:\n            low = mid + 1\n        else:\n            high = mid - 1\n            ele = arr[mid]\n            pos = mid\n    return (ele, pos)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    temp = list()\n    for i in range(n):\n        (ele, pos) = binarySearch(temp, arr[i])\n        if ele == -1:\n            temp.append(arr[i])\n        else:\n            temp[pos] = arr[i]\n    num = len(temp)\n    res = [num] + temp\n    print(*res)", "import bisect\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    stack = []\n    for i in arr:\n        if len(stack) == 0 or stack[-1] <= i:\n            stack.append(i)\n        else:\n            ind = bisect.bisect(stack, i)\n            stack[ind] = i\n    stack.insert(0, len(stack))\n    print(*stack)\n    t -= 1", "from bisect import bisect_left\nfrom bisect import bisect_right\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    top = []\n    top.append(arr[0])\n    count = 0\n    for i in range(1, n):\n        if top[len(top) - 1] <= arr[i]:\n            top.append(arr[i])\n            count += 1\n        else:\n            idx = bisect_left(top, arr[i])\n            if top[idx] == arr[i]:\n                idx = bisect_right(top, arr[i], idx, len(top) - 1)\n            top[idx] = arr[i]\n    print(len(top), end=' ')\n    for i in top:\n        print(i, end=' ')\n    print()\n    t -= 1", "import bisect\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    stack = [arr[0]]\n    stack_count = 1\n    for i in arr[1:]:\n        if i >= stack[-1]:\n            stack.append(i)\n            stack_count = stack_count + 1\n        else:\n            pos = bisect.bisect(stack, i)\n            stack[pos] = i\n    print(stack_count, end=' ')\n    for i in stack:\n        print(i, end=' ')\n    print('')", "import bisect\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    stack = []\n    for i in arr:\n        if len(stack) == 0 or stack[-1] <= i:\n            stack.append(i)\n        else:\n            ind = bisect.bisect(stack, i)\n            stack[ind] = i\n    stack.insert(0, len(stack))\n    print(*stack)\n    t -= 1", "def binary_search(arr, element):\n    l = 0\n    h = len(arr) - 1\n    ans = -1\n    while l <= h:\n        mid = (l + h) // 2\n        if arr[mid] <= element:\n            l = mid + 1\n        else:\n            ans = mid\n            h = mid - 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    alist = list(map(int, input().split()))\n    l = []\n    for i in alist:\n        found = binary_search(l, i)\n        if found == -1:\n            l.append(i)\n        else:\n            l[found] = i\n    print(len(l), *l)", "def bin_search(List, x):\n    first = 0\n    last = len(List) - 1\n    found = False\n    while first <= last:\n        mid = (first + last) // 2\n        if List[mid] <= x:\n            if List[mid + 1] > x:\n                return mid + 1\n            else:\n                first = mid\n        elif List[mid] > x:\n            if List[mid - 1] <= x:\n                return mid\n            else:\n                last = mid\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    top = [l[0]]\n    for i in range(1, n):\n        if l[i] >= top[-1]:\n            top.append(l[i])\n        elif l[i] < top[0]:\n            top[0] = l[i]\n        else:\n            index = bin_search(top, l[i])\n            top[index] = l[i]\n    print(len(top), end=' ')\n    for i in top:\n        print(i, end=' ')\n    print()", "t = int(input())\n\ndef binarySearch(arr, d):\n    n = len(arr)\n    l = 0\n    r = n - 1\n    result = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] > d:\n            result = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    return result\nfor i in range(t):\n    N = int(input())\n    A = list(map(int, input().split()))\n    tops = [A[0]]\n    for disk in A[1:]:\n        n = binarySearch(tops, disk)\n        if n == -1:\n            tops.append(disk)\n        else:\n            tops[n] = disk\n    print(len(tops), ' '.join(map(str, tops)))", "def binarySearch(arr, element):\n    n = len(arr)\n    l = 0\n    r = n - 1\n    result = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if arr[mid] > element:\n            result = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    return result\nfor _ in range(int(input())):\n    n = int(input())\n    s = list(map(int, input().split(' ')))\n    heads = [s[0]]\n    for v in s[1:]:\n        nextGreatest = binarySearch(heads, v)\n        if nextGreatest == -1:\n            heads.append(v)\n        else:\n            heads[nextGreatest] = v\n    print(len(heads), ' '.join(map(str, heads)))", "def binarySearch(arr, val):\n    l = 0\n    r = len(arr) - 1\n    ans = len(arr)\n    while l <= r:\n        mid = (l + r) // 2\n        isOne = arr[mid] > val\n        if isOne:\n            ans = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(s) for s in input().split(' ')]\n    stacks = [a[0]]\n    for i in range(1, n):\n        val = a[i]\n        idx = binarySearch(stacks, val)\n        if idx == len(stacks):\n            stacks.append(val)\n        else:\n            stacks[idx] = val\n    print(len(stacks), *stacks)", "import bisect\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().strip().split()))[:n]\n    a = l[0]\n    l1 = []\n    for i in range(0, len(l)):\n        if len(l1) > bisect.bisect(l1, l[i]):\n            l1[bisect.bisect(l1, l[i])] = l[i]\n        else:\n            l1.append(l[i])\n    print(len(l1), end=' ')\n    for i in l1:\n        print(i, end=' ')\n    print('')", "from bisect import bisect_right\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    s = []\n    for a in arr:\n        idx = bisect_right(s, a)\n        if not s:\n            s.append(a)\n        elif idx <= len(s) - 1:\n            s[idx] = a\n        else:\n            s.insert(idx, a)\n    print(len(s), *s)", "from bisect import bisect_right as br\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    s = []\n    for x in a:\n        ind = br(s, x)\n        if not s:\n            s.append(x)\n        elif ind <= len(s) - 1:\n            s[ind] = x\n        else:\n            s.insert(ind, x)\n    print(len(s), *s)", "from bisect import bisect_left, bisect_right\nfor _ in range(int(input())):\n    n = int(input())\n    A = [int(i) for i in input().strip().split(' ')]\n    stacks = []\n    while len(A) != 0:\n        ele = A[0]\n        A.pop(0)\n        flag = False\n        ind = bisect_right(stacks, ele)\n        if ind != len(stacks):\n            stacks[ind] = ele\n        else:\n            stacks.append(ele)\n    print(len(stacks), end=' ')\n    for ele in stacks:\n        print(ele, end=' ')\n    print('')"]