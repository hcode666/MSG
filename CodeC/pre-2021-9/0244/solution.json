["for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = dict()\n    for _ in range(n):\n        (c, l) = map(int, input().split())\n        if l in s:\n            s[l] += -c\n        else:\n            s[l] = -c\n    for _ in range(m):\n        (c, l) = map(int, input().split())\n        s[l] += c\n    m = 0\n    for i in s:\n        if s[i] > 0:\n            m += s[i]\n    print(m)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = dict()\n    for _ in range(n):\n        (c, l) = map(int, input().split())\n        if l in s:\n            s[l] += -c\n        else:\n            s[l] = -c\n    for _ in range(m):\n        (c, l) = map(int, input().split())\n        s[l] += c\n    m = 0\n    for i in s:\n        if s[i] > 0:\n            m += s[i]\n    print(m)", "t = int(input())\nfor tc in range(t):\n    (n, m) = map(int, input().split())\n    d = dict()\n    for j in range(n):\n        (ci, li) = map(int, input().split())\n        if li in d:\n            d[li] += -ci\n        else:\n            d[li] = -ci\n    for k in range(m):\n        (cf, lf) = map(int, input().split())\n        d[lf] += cf\n    x = 0\n    for j in d:\n        if d[j] > 0:\n            x += d[j]\n    print(x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = dict()\n    for _ in range(n):\n        (c, l) = map(int, input().split())\n        if l in s:\n            s[l] += -c\n        else:\n            s[l] = -c\n    for _ in range(m):\n        (c, l) = map(int, input().split())\n        s[l] += c\n    m = 0\n    for i in s:\n        if s[i] > 0:\n            m += s[i]\n    print(m)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    (dn, dm) = ({}, {})\n    for t in range(n):\n        (c, l) = map(int, input().split())\n        dn[l] = dn.get(l, 0) + c\n    for t in range(m):\n        (c, l) = map(int, input().split())\n        dm[l] = dm.get(l, 0) + c\n    ans = 0\n    for (x, y) in dn.items():\n        ans += max([0, dm[x] - y])\n    print(ans)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    d1 = {}\n    d = {}\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        if b not in d1.keys():\n            d1[b] = a\n        else:\n            x = d1[b]\n            d1[b] = x + a\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        if b not in d.keys():\n            d[b] = a\n        else:\n            x = d[b]\n            d[b] = x + a\n    c = 0\n    count = 0\n    for i in d:\n        if d1[i] > d[i]:\n            c = 1\n        elif d1[i] < d[i]:\n            count += d[i] - d1[i]\n        else:\n            continue\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ci = {}\n    cm = {}\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        if l not in ci.keys():\n            ci[l] = c\n        else:\n            ci[l] += c\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        if l not in cm.keys():\n            cm[l] = c\n        else:\n            cm[l] += c\n    count = 0\n    for i in ci.keys():\n        if ci[i] < cm[i]:\n            count += cm[i] - ci[i]\n    print(count)", "t = int(input())\nfor ni in range(t):\n    (n, m) = map(int, input().split())\n    dn = dict()\n    dm = dict()\n    for nj in range(n):\n        (j, i) = map(int, input().split())\n        if i not in dn.keys():\n            dn[i] = j\n        else:\n            dn[i] += j\n    for mj in range(m):\n        (j, i) = map(int, input().split())\n        if i not in dm.keys():\n            dm[i] = j\n        else:\n            dm[i] += j\n    count = 0\n    for i in dn.keys():\n        if dn[i] < dm[i]:\n            count = count + dm[i] - dn[i]\n    print(count)", "t = int(input())\nfor ni in range(t):\n    (n, m) = map(int, input().split())\n    dn = dict()\n    dm = dict()\n    for nj in range(n):\n        (j, i) = map(int, input().split())\n        if i not in dn.keys():\n            dn[i] = j\n        else:\n            dn[i] += j\n    for mj in range(m):\n        (j, i) = map(int, input().split())\n        if i not in dm.keys():\n            dm[i] = j\n        else:\n            dm[i] += j\n    count = 0\n    for i in dn.keys():\n        if dn[i] < dm[i]:\n            count = count + dm[i] - dn[i]\n    print(count)", "t = int(input())\nfor ni in range(t):\n    (n, m) = map(int, input().split())\n    dn = dict()\n    dm = dict()\n    for nj in range(n):\n        (j, i) = map(int, input().split())\n        if i not in dn.keys():\n            dn[i] = j\n        else:\n            dn[i] += j\n    for mj in range(m):\n        (j, i) = map(int, input().split())\n        if i not in dm.keys():\n            dm[i] = j\n        else:\n            dm[i] += j\n    count = 0\n    for i in dn.keys():\n        if dn[i] < dm[i]:\n            count = count + dm[i] - dn[i]\n    print(count)", "for tc in range(int(input())):\n    (n, m) = map(int, input().split())\n    (so, sof) = ([], [])\n    (ip, fp) = (0, 0)\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        so.append(['i', c, l])\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        so.append(['f', c, l])\n    levels = set([l for (a, c, l) in so])\n    chakra = []\n    for level in levels:\n        a = [(a, c) for (a, c, l) in so if l == level]\n        (ip, fp) = (0, 0)\n        for i in a:\n            if i[0] == 'i':\n                ip += i[1]\n            else:\n                fp += i[1]\n        if ip - fp < 0:\n            chakra.append(abs(ip - fp))\n    print(sum(chakra))", "for tc in range(int(input())):\n    (n, m) = map(int, input().split())\n    (so, sof) = ([], [])\n    (ip, fp) = (0, 0)\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        so.append(['i', c, l])\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        so.append(['f', c, l])\n    levels = set([l for (a, c, l) in so])\n    chakra = []\n    for level in levels:\n        a = [(a, c) for (a, c, l) in so if l == level]\n        (ip, fp) = (0, 0)\n        for i in a:\n            if i[0] == 'i':\n                ip += i[1]\n            else:\n                fp += i[1]\n        if ip - fp < 0:\n            chakra.append(abs(ip - fp))\n    print(sum(chakra))", "for tc in range(int(input())):\n    (n, m) = map(int, input().split())\n    (so, sof) = ([], [])\n    (ip, fp) = (0, 0)\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        so.append(['i', c, l])\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        so.append(['f', c, l])\n    levels = set([l for (a, c, l) in so])\n    chakra = []\n    for level in levels:\n        a = [(a, c) for (a, c, l) in so if l == level]\n        (ip, fp) = (0, 0)\n        for i in a:\n            if i[0] == 'i':\n                ip += i[1]\n            else:\n                fp += i[1]\n        if ip - fp < 0:\n            chakra.append(abs(ip - fp))\n    print(sum(chakra))", "for tc in range(int(input())):\n    (n, m) = map(int, input().split())\n    (so, sof) = ([], [])\n    (ip, fp) = (0, 0)\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        so.append(['i', c, l])\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        so.append(['f', c, l])\n    levels = set([l for (a, c, l) in so])\n    chakra = []\n    for level in levels:\n        a = [(a, c) for (a, c, l) in so if l == level]\n        (ip, fp) = (0, 0)\n        for i in a:\n            if i[0] == 'i':\n                ip += i[1]\n            else:\n                fp += i[1]\n        if ip - fp < 0:\n            chakra.append(abs(ip - fp))\n    print(sum(chakra))", "from collections import defaultdict as dt\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    soints = dt(list)\n    for i in range(n):\n        (k, p) = map(int, input().split())\n        soints[p].append(k)\n    sofl = dt(list)\n    for i in range(m):\n        (k, p) = map(int, input().split())\n        sofl[p].append(k)\n    so = dt(int)\n    for i in soints.keys():\n        for j in soints[i]:\n            so[i] += j\n    sof = dt(int)\n    for i in sofl.keys():\n        for j in sofl[i]:\n            sof[i] += j\n    count = 0\n    for i in so:\n        if so[i] < sof[i]:\n            count += sof[i] - so[i]\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = dict()\n    for _ in range(n):\n        (c, l) = map(int, input().split())\n        if l in s:\n            s[l] += -c\n        else:\n            s[l] = -c\n    for _ in range(m):\n        (c, l) = map(int, input().split())\n        s[l] += c\n    m = 0\n    for i in s:\n        if s[i] > 0:\n            m += s[i]\n    print(m)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = dict()\n    for _ in range(n):\n        (c, l) = map(int, input().split())\n        if l in s:\n            s[l] += -c\n        else:\n            s[l] = -c\n    for _ in range(m):\n        (c, l) = map(int, input().split())\n        s[l] += c\n    m = 0\n    for i in s:\n        if s[i] > 0:\n            m += s[i]\n    print(m)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = dict()\n    for _ in range(n):\n        (c, l) = map(int, input().split())\n        if l in s:\n            s[l] += -c\n        else:\n            s[l] = -c\n    for _ in range(m):\n        (c, l) = map(int, input().split())\n        s[l] += c\n    m = 0\n    for i in s:\n        if s[i] > 0:\n            m += s[i]\n    print(m)", "from collections import Counter\nfor t in range(int(input())):\n    w = Counter()\n    z = Counter()\n    (n, m) = map(int, input().split())\n    x = []\n    y = []\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        x.append((str(l), c))\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        y.append((str(l), c))\n    for (l, c) in x:\n        w[l] += c\n    for (l, c) in y:\n        z[l] += c\n    x = sorted(list(w.items()))\n    y = sorted(list(z.items()))\n    k = []\n    for i in x:\n        for j in y:\n            if i[1] - j[1] < 0:\n                k.append(i[1] - j[1])\n            y.pop(0)\n            break\n    print(sum(k) * -1)", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    dick = {}\n    dicky = {}\n    for i in range(N):\n        (C, L) = map(int, input().split())\n        if L not in dick:\n            dick[L] = C\n        else:\n            dick[L] += C\n    for i in range(M):\n        (c, l) = map(int, input().split())\n        if l not in dicky:\n            dicky[l] = c\n        else:\n            dicky[l] += c\n    for ele in dicky:\n        if ele in dick:\n            if dicky[ele] > dick[ele]:\n                dicky[ele] -= dick[ele]\n            else:\n                dicky[ele] = 0\n    x = sum(dicky.values())\n    print(x)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    si = [0] * 101\n    sf = [0] * 101\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        si[l] = si[l] + c\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        sf[l] = sf[l] + c\n    cnt = 0\n    win = False\n    for i in range(1, 101):\n        if si[i] > sf[i]:\n            win = True\n        elif si[i] == sf[i]:\n            continue\n        elif si[i] < sf[i]:\n            cnt = cnt + sf[i] - si[i]\n    print(cnt)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    soInt = {}\n    for n in range(N):\n        (c, l) = map(int, input().split())\n        if l in soInt:\n            soInt[l] += c\n        else:\n            soInt[l] = c\n    soFloat = {}\n    for m in range(M):\n        (c, l) = map(int, input().split())\n        if l in soFloat:\n            soFloat[l] += c\n        else:\n            soFloat[l] = c\n    for i in soFloat:\n        if i in soInt:\n            if soFloat[i] > soInt[i]:\n                soFloat[i] -= soInt[i]\n            else:\n                soFloat[i] = 0\n    print(sum(soFloat.values()))", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (d1, d2) = ({}, {})\n    for i in range(a + b):\n        (d, c) = map(int, input().split())\n        if i < a:\n            if c not in d1:\n                d1[c] = d\n            else:\n                d1[c] += d\n        elif c not in d2:\n            d2[c] = d\n        else:\n            d2[c] += d\n    for i in d2:\n        if i in d1:\n            if d2[i] > d1[i]:\n                d2[i] = d2[i] - d1[i]\n            else:\n                d2[i] = 0\n    print(sum(d2.values()))", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    soldiers = dict()\n    for __ in range(N):\n        (c, l) = map(int, input().split())\n        if l in soldiers:\n            soldiers[l][0] += c\n        else:\n            soldiers[l] = [c, 0]\n    for __ in range(M):\n        (c, l) = map(int, input().split())\n        soldiers[l][1] += c\n    magic = 0\n    for level in soldiers:\n        magic += max(0, soldiers[level][1] - soldiers[level][0])\n    print(magic)", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    soldiers = dict()\n    for __ in range(N):\n        (c, l) = map(int, input().split())\n        if l in soldiers:\n            soldiers[l] += -c\n        else:\n            soldiers[l] = -c\n    for __ in range(M):\n        (c, l) = map(int, input().split())\n        soldiers[l] += c\n    magic = 0\n    for level in soldiers:\n        if soldiers[level] > 0:\n            magic += soldiers[level]\n    print(magic)", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    soldiers = dict()\n    for __ in range(N):\n        (c, l) = map(int, input().split())\n        if l in soldiers:\n            soldiers[l][0] += c\n        else:\n            soldiers[l] = [c, 0]\n    for __ in range(M):\n        (c, l) = map(int, input().split())\n        soldiers[l][1] += c\n    magic = 0\n    for level in soldiers:\n        magic += max(0, soldiers[level][1] - soldiers[level][0])\n    print(magic)", "from collections import defaultdict as dt\nt = input()\nfor cc in range(0, int(t)):\n    (n, m) = map(int, input().split())\n    soints = dt(list)\n    for i in range(n):\n        (k, p) = map(int, input().split())\n        soints[p].append(k)\n    sofl = dt(list)\n    for i in range(m):\n        (k, p) = map(int, input().split())\n        sofl[p].append(k)\n    so = dt(int)\n    for i in soints.keys():\n        for j in soints[i]:\n            so[i] += j\n    sof = dt(int)\n    for i in sofl.keys():\n        for j in sofl[i]:\n            sof[i] += j\n    count = 0\n    for i in so:\n        if so[i] < sof[i]:\n            count += sof[i] - so[i]\n    print(count)", "from collections import defaultdict as dt\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    soints = dt(list)\n    for i in range(n):\n        (k, p) = map(int, input().split())\n        soints[p].append(k)\n    sofl = dt(list)\n    for i in range(m):\n        (k, p) = map(int, input().split())\n        sofl[p].append(k)\n    so = dt(int)\n    for i in soints.keys():\n        for j in soints[i]:\n            so[i] += j\n    sof = dt(int)\n    for i in sofl.keys():\n        for j in sofl[i]:\n            sof[i] += j\n    count = 0\n    for i in so:\n        if so[i] < sof[i]:\n            count += sof[i] - so[i]\n    print(count)", "from collections import defaultdict as dt\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    soints = dt(list)\n    for i in range(n):\n        (k, p) = map(int, input().split())\n        soints[p].append(k)\n    sofl = dt(list)\n    for i in range(m):\n        (k, p) = map(int, input().split())\n        sofl[p].append(k)\n    so = dt(int)\n    for i in soints.keys():\n        for j in soints[i]:\n            so[i] += j\n    sof = dt(int)\n    for i in sofl.keys():\n        for j in sofl[i]:\n            sof[i] += j\n    count = 0\n    for i in so:\n        if so[i] < sof[i]:\n            count += sof[i] - so[i]\n    print(count)", "tests = int(input())\nfor i in range(tests):\n    (n, m) = map(int, input().split())\n    soints_dict = {}\n    for j in range(n):\n        (c, l) = map(int, input().split())\n        if l in soints_dict:\n            soints_dict[l] += c\n        else:\n            soints_dict[l] = c\n    ans = 0\n    for j in range(m):\n        (c, l) = map(int, input().split())\n        temp = soints_dict[l] - c\n        if temp < 0:\n            soints_dict[l] = 0\n            ans += abs(temp)\n        else:\n            soints_dict[l] -= c\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    (n, m) = map(int, input().split())\n    soints_dict = {}\n    for j in range(n):\n        (c, l) = map(int, input().split())\n        if l in soints_dict:\n            soints_dict[l] += c\n        else:\n            soints_dict[l] = c\n    ans = 0\n    for j in range(m):\n        (c, l) = map(int, input().split())\n        temp = soints_dict[l] - c\n        if temp < 0:\n            soints_dict[l] = 0\n            ans += abs(temp)\n        else:\n            soints_dict[l] -= c\n    print(ans)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (d1, d2) = ({}, {})\n    for i in range(a + b):\n        (d, c) = map(int, input().split())\n        if i < a:\n            if c not in d1:\n                d1[c] = d\n            else:\n                d1[c] += d\n        elif c not in d2:\n            d2[c] = d\n        else:\n            d2[c] += d\n    for i in d2:\n        if i in d1:\n            if d2[i] > d1[i]:\n                d2[i] = d2[i] - d1[i]\n            else:\n                d2[i] = 0\n    print(sum(d2.values()))", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (d1, d2) = ({}, {})\n    for i in range(a + b):\n        (d, c) = map(int, input().split())\n        if i < a:\n            if c not in d1:\n                d1[c] = d\n            else:\n                d1[c] += d\n        elif c not in d2:\n            d2[c] = d\n        else:\n            d2[c] += d\n    for i in d2:\n        if i in d1:\n            if d2[i] > d1[i]:\n                d2[i] = d2[i] - d1[i]\n            else:\n                d2[i] = 0\n    print(sum(d2.values()))", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (d1, d2) = ({}, {})\n    for i in range(a + b):\n        (d, c) = map(int, input().split())\n        if i < a:\n            if c not in d1:\n                d1[c] = d\n            else:\n                d1[c] += d\n        elif c not in d2:\n            d2[c] = d\n        else:\n            d2[c] += d\n    for i in d2:\n        if i in d1:\n            if d2[i] > d1[i]:\n                d2[i] = d2[i] - d1[i]\n            else:\n                d2[i] = 0\n    s = 0\n    for i in d2.values():\n        s += i\n    print(s)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    ans = 0\n    for i in l:\n        if i < 0:\n            ans += abs(i)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    ans = 0\n    for i in l:\n        if i < 0:\n            ans += abs(i)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "T = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    a = [0 for j in range(101)]\n    for i in range(n):\n        (b, c) = map(int, input().split())\n        a[c] += b\n    for i in range(m):\n        (k, l) = map(int, input().split())\n        a[l] -= k\n    sum = 0\n    for x in range(101):\n        if a[x] < 0:\n            sum += a[x]\n    print(abs(sum))", "for j in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0 for j in range(101)]\n    for i in range(n):\n        (b, c) = map(int, input().split())\n        a[c] += b\n    for i in range(m):\n        (k, l) = map(int, input().split())\n        a[l] -= k\n    sum = 0\n    for x in range(101):\n        if a[x] < 0:\n            sum += a[x]\n    print(abs(sum))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = [0] * 101\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[b] += a\n    for j in range(m):\n        (a, b) = map(int, input().split())\n        l[b] -= a\n    s = 0\n    for i in l:\n        if i < 0:\n            s += i\n    print(s * -1)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    (soint_arr, sofloat_arr) = ([], [])\n    for i in range(n):\n        temp = tuple(map(int, input().split()))\n        soint_arr.append(temp)\n    for i in range(m):\n        temp = tuple(map(int, input().split()))\n        sofloat_arr.append(temp)\n    sofloat_arr.sort(key=lambda x: x[1])\n    soint_arr.sort(key=lambda x: x[1])\n    level = []\n    for ele in soint_arr:\n        if ele[1] not in level:\n            level.append(ele[1])\n    chakra = 0\n    (i, j) = (0, 0)\n    for ele in level:\n        (count1, count2) = (0, 0)\n        while i < len(soint_arr) and soint_arr[i][1] == ele:\n            count1 += soint_arr[i][0]\n            i += 1\n        while j < len(sofloat_arr) and sofloat_arr[j][1] == ele:\n            count2 += sofloat_arr[j][0]\n            j += 1\n        if count1 < count2:\n            chakra += count2 - count1\n    print(chakra)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    d = [0] * 101\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        d[l] += c\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        d[l] -= c\n    ans = 0\n    for i in range(101):\n        if d[i] < 0:\n            ans -= d[i]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(i) for i in input().split()]\n    (soints, sofloats) = ({}, {})\n    for i in range(n):\n        (c, l) = [int(k) for k in input().split()]\n        soints[l] = soints.get(l, 0) + c\n    for i in range(m):\n        (c, l) = [int(k) for k in input().split()]\n        sofloats[l] = sofloats.get(l, 0) + c\n    chakra = 0\n    for i in soints:\n        if soints[i] < sofloats[i]:\n            chakra = chakra + sofloats[i] - soints[i]\n    print(chakra)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [0 for i in range(101)]\n    for k in range(n):\n        (c, l) = map(int, input().split())\n        a[l] += c\n    for k in range(m):\n        (c, l) = map(int, input().split())\n        a[l] -= c\n    ans = 0\n    for i in range(101):\n        if a[i] < 0:\n            ans += abs(a[i])\n    print(ans)", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    a = [0 for j in range(101)]\n    for i in range(n):\n        (b, c) = map(int, input().split())\n        a[c] += b\n    for i in range(m):\n        (k, l) = map(int, input().split())\n        a[l] -= k\n    sum = 0\n    for x in range(101):\n        if a[x] < 0:\n            sum += a[x]\n    print(abs(sum))", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    si = {}\n    sf = {}\n    a = []\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        if l not in a:\n            a.append(l)\n        if l in si:\n            si[l] += c\n        else:\n            si[l] = c\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        if l in sf:\n            sf[l] += c\n        else:\n            sf[l] = c\n    x = 0\n    for i in a:\n        if si[i] < sf[i]:\n            x += sf[i] - si[i]\n    print(x)\n    t -= 1", "from collections import defaultdict\nfor _ in range(int(input())):\n    dic1 = defaultdict(list)\n    dic2 = defaultdict(list)\n    (n, m) = map(int, input().split())\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n        dic1[a[i][1]].append(a[i][0])\n    b = []\n    for i in range(m):\n        b.append(list(map(int, input().split())))\n        dic2[b[i][1]].append(b[i][0])\n    su = 0\n    for i in dic1.keys():\n        s1 = sum(dic1[i])\n        s2 = sum(dic2[i])\n        if s2 > s1:\n            su += s2 - s1\n    print(su)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = {}\n    for j in range(n):\n        (v, k) = map(int, input().split())\n        try:\n            a[k] += v\n        except:\n            a[k] = v\n    for j in range(m):\n        (v, k) = map(int, input().split())\n        a[k] -= v\n    p = 0\n    for j in a.keys():\n        if a[j] < 0:\n            p += abs(a[j])\n    print(p)", "for _ in range(int(input())):\n    so = []\n    si = []\n    for i in range(100):\n        so.append([])\n        si.append([])\n    ma = -1\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    while n:\n        (p, l) = input().split()\n        p = int(p)\n        l = int(l)\n        if l - 1 > ma:\n            ma = l - 1\n        si[l - 1].append(p)\n        n -= 1\n    while m:\n        (p, l) = input().split()\n        p = int(p)\n        l = int(l)\n        so[l - 1].append(p)\n        m -= 1\n    c = 0\n    for i in range(ma + 1):\n        if sum(so[i]) > sum(si[i]):\n            c += sum(so[i]) - sum(si[i])\n    print(c)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = {}\n    for j in range(n):\n        (v, k) = map(int, input().split())\n        try:\n            a[k] += v\n        except:\n            a[k] = v\n    for j in range(m):\n        (v, k) = map(int, input().split())\n        a[k] -= v\n    p = 0\n    for j in a.keys():\n        if a[j] < 0:\n            p += abs(a[j])\n    print(p)", "test = int(input())\nfor _ in range(test):\n    (n, m) = list(map(int, input().strip().split()))\n    d = dict()\n    for j in range(n):\n        (a, b) = list(map(int, input().strip().split()))\n        if b in d:\n            d[b] += a\n        else:\n            d[b] = a\n    for k in range(m):\n        (a, b) = list(map(int, input().strip().split()))\n        d[b] -= a\n    ans = 0\n    for val in d:\n        if d[val] < 0:\n            ans += -1 * d[val]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    d = dict()\n    for j in range(n):\n        (a, b) = list(map(int, input().strip().split()))\n        if b in d:\n            d[b] += a\n        else:\n            d[b] = a\n    for k in range(m):\n        (a, b) = list(map(int, input().strip().split()))\n        d[b] -= a\n    ans = 0\n    for val in d:\n        if d[val] < 0:\n            ans += -1 * d[val]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    dic = dict()\n    for _ in range(n):\n        (a, b) = list(map(int, input().strip().split()))\n        if b in dic:\n            dic[b] += a\n        else:\n            dic[b] = a\n    for _ in range(m):\n        (a, b) = list(map(int, input().strip().split()))\n        dic[b] -= a\n    req = 0\n    for value in dic:\n        if dic[value] < 0:\n            req += -1 * dic[value]\n    print(req)", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    dic = dict()\n    for _ in range(n):\n        (a, b) = list(map(int, input().strip().split()))\n        if b in dic:\n            dic[b] += a\n        else:\n            dic[b] = a\n    for _ in range(m):\n        (a, b) = list(map(int, input().strip().split()))\n        dic[b] -= a\n    req = 0\n    for value in dic:\n        if dic[value] < 0:\n            req += -1 * dic[value]\n    print(req)", "for j in range(int(input())):\n    (n, m) = map(int, input().split())\n    (x, y) = ({}, {})\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        if b in x:\n            x[b] += a\n        else:\n            x[b] = a\n    for i in range(m):\n        (c, d) = map(int, input().split())\n        if d in y:\n            y[d] += c\n        else:\n            y[d] = c\n    z = []\n    for i in x:\n        a = x[i] - y[i]\n        if a <= 0:\n            z.append(a)\n    print(abs(sum(z)))", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    soint = []\n    for i in range(N):\n        (p, l) = map(int, input().split())\n        soint.append([p, l])\n    sofloat = []\n    for i in range(M):\n        (p, l) = map(int, input().split())\n        sofloat.append([p, l])\n    chakra = 0\n    for i in sofloat:\n        power_sofloat = i[0]\n        level_sofloat = i[1]\n        for j in soint:\n            power_soint = j[0]\n            level_soint = j[1]\n            if j[1] == i[1]:\n                if j[0] < i[0]:\n                    i[0] -= j[0]\n                    j[0] = 0\n                elif i[0] < j[0]:\n                    j[0] -= i[0]\n                    i[0] = 0\n                else:\n                    i[0] = 0\n                    j[0] = 0\n    for i in sofloat:\n        chakra += i[0]\n    print(chakra)", "T = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    (s, t) = ({}, {})\n    for j in range(n):\n        (c, l) = map(int, input().split())\n        if l in s.keys():\n            s[l] += c\n        else:\n            s[l] = c\n    for j in range(m):\n        (c, l) = map(int, input().split())\n        if l in t.keys():\n            t[l] += c\n        else:\n            t[l] = c\n    d = 0\n    for key in s.keys():\n        if s[key] < t[key]:\n            d += t[key] - s[key]\n    print(d)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    soi = {}\n    sof = {}\n    for __ in range(n):\n        (c, l) = map(int, input().split())\n        if l in soi.keys():\n            soi[l] += c\n        else:\n            soi[l] = c\n    for __ in range(m):\n        (c, l) = map(int, input().split())\n        if l in sof.keys():\n            sof[l] += c\n        else:\n            sof[l] = c\n    chakra = 0\n    for key in soi.keys():\n        if soi[key] < sof[key]:\n            chakra += sof[key] - soi[key]\n    print(chakra)", "t = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    soi = {}\n    sof = {}\n    for j in range(0, n):\n        (c, l) = map(int, input().split())\n        if not l in soi.keys():\n            soi[l] = c\n        else:\n            soi[l] += c\n    for j in range(0, m):\n        (c, l) = map(int, input().split())\n        if not l in sof.keys():\n            sof[l] = c\n        else:\n            sof[l] += c\n    sum = 0\n    for i in soi.keys():\n        if soi[i] < sof[i]:\n            sum += sof[i] - soi[i]\n    print(sum)", "try:\n    t = int(input())\nexcept:\n    t = 0\nfor i in range(t):\n    try:\n        x = list(map(int, input().split()))\n        soint = [0] * 101\n        sofloat = [0] * 101\n        for j in range(x[0]):\n            try:\n                y = list(map(int, input().split()))\n            except:\n                y = [0, 0]\n            soint[y[1]] += y[0]\n        for k in range(x[1]):\n            try:\n                z = list(map(int, input().split()))\n            except:\n                z = [0, 0]\n            sofloat[z[1]] += z[0]\n        ans = 0\n        for l in range(101):\n            if sofloat[l] > soint[l]:\n                ans = ans + (sofloat[l] - soint[l])\n        print(ans)\n    except:\n        pass", "try:\n    tst = int(input())\nexcept:\n    tst = 0\nfor j in range(tst):\n    t = list(map(int, input().split()))\n    war = {}\n    for i in range(t[0]):\n        soint = list(map(int, input().split()))\n        if soint[1] in war.keys():\n            war[soint[1]][0].append(soint[0])\n        else:\n            war[soint[1]] = [[], []]\n            war[soint[1]][0].append(soint[0])\n    for i in range(t[1]):\n        sofloat = list(map(int, input().split()))\n        war[sofloat[1]][1].append(sofloat[0])\n    ans = 0\n    for i in war.keys():\n        a = sum(war[i][0])\n        b = sum(war[i][1])\n        if b > a:\n            ans = ans + b - a\n    print(ans)", "try:\n    t = int(input())\nexcept:\n    t = 0\nfor i in range(t):\n    try:\n        x = list(map(int, input().split()))\n        soint = [0] * 101\n        sofloat = [0] * 101\n        for j in range(x[0]):\n            try:\n                y = list(map(int, input().split()))\n            except:\n                y = [0, 0]\n            soint[y[1]] += y[0]\n        for k in range(x[1]):\n            try:\n                z = list(map(int, input().split()))\n            except:\n                z = [0, 0]\n            sofloat[z[1]] += z[0]\n        ans = 0\n        for l in range(101):\n            if sofloat[l] > soint[l]:\n                ans = ans + (sofloat[l] - soint[l])\n        print(ans)\n    except:\n        pass", "try:\n    t = int(input())\nexcept:\n    t = 0\nfor i in range(t):\n    try:\n        x = list(map(int, input().split()))\n        soint = [0] * 101\n        sofloat = [0] * 101\n        for j in range(x[0]):\n            try:\n                y = list(map(int, input().split()))\n            except:\n                y = [0, 0]\n            soint[y[1]] += y[0]\n        for k in range(x[1]):\n            try:\n                z = list(map(int, input().split()))\n            except:\n                z = [0, 0]\n            sofloat[z[1]] += z[0]\n        ans = 0\n        for l in range(101):\n            if sofloat[l] > soint[l]:\n                ans = ans + (sofloat[l] - soint[l])\n        print(ans)\n    except:\n        pass", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    Si = []\n    Sf = []\n    cntd = []\n    for _ in range(N):\n        [C, L] = list(input().split())\n        Si += [[C, L]]\n    for _ in range(M):\n        [C, L] = list(input().split())\n        Sf += [[C, L]]\n    t = 0\n    ans = 0\n    for x in Si:\n        if len(cntd) >= 1:\n            for a in cntd:\n                if a == x[1]:\n                    t = 1\n                    break\n        if t == 1:\n            t = 0\n            continue\n        totSi = 0\n        cntd += [x[1]]\n        for a in Si:\n            if a[1] == x[1]:\n                totSi += int(a[0])\n        totSf = 0\n        for b in Sf:\n            if b[1] == x[1]:\n                totSf += int(b[0])\n        if totSi >= totSf:\n            continue\n        else:\n            ans += totSf - totSi\n            continue\n    print(ans)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    soints = {}\n    sofloats = {}\n    while n:\n        (c, l) = map(int, input().split())\n        if l in soints.keys():\n            soints[l] += c\n        else:\n            soints[l] = c\n        n -= 1\n    while m:\n        (c, l) = map(int, input().split())\n        if l in sofloats.keys():\n            sofloats[l] += c\n        else:\n            sofloats[l] = c\n        m -= 1\n    c = 0\n    for l in soints.keys():\n        if sofloats[l] >= soints[l]:\n            c += sofloats[l] - soints[l]\n    print(c)\n    t -= 1", "for _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    INTS = {}\n    FLOATS = {}\n    for i in range(1, 101):\n        INTS[i] = 0\n        FLOATS[i] = 0\n    for i in range(N):\n        (C, L) = map(int, input().split())\n        INTS[L] += C\n    for i in range(M):\n        (C, L) = map(int, input().split())\n        FLOATS[L] += C\n    ans = 0\n    for i in range(1, 101):\n        if FLOATS[i] > INTS[i]:\n            ans += FLOATS[i] - INTS[i]\n    print(ans)", "class Solution(object):\n\n    def __init__(self):\n        self.t = int(input())\n        self.num_ints = 0\n        self.num_floats = 0\n        self.int_power = []\n        self.int_level = []\n        self.float_power = []\n        self.float_level = []\n        for _ in range(self.t):\n            self.get_data()\n            self.solve()\n            self.clear_data()\n    pass\n\n    def get_data(self):\n        (self.num_ints, self.num_floats) = map(int, input().split())\n        Solution.fill_data(self.num_ints, self.int_power, self.int_level)\n        Solution.fill_data(self.num_floats, self.float_power, self.float_level)\n        pass\n\n    @classmethod\n    def fill_data(cls, num_ints, int_power, int_level):\n        for _ in range(num_ints):\n            (x, y) = map(int, input().split())\n            int_power.append(x)\n            int_level.append(y)\n        pass\n\n    def clear_data(self):\n        self.int_level.clear()\n        self.int_power.clear()\n        self.float_level.clear()\n        self.float_power.clear()\n        pass\n\n    def solve(self):\n        int_level_to_power = Solution.get_level_to_power(self.int_level, self.int_power)\n        float_level_to_power = Solution.get_level_to_power(self.float_level, self.float_power)\n        for (x, y) in int_level_to_power.items():\n            pf = float_level_to_power[x]\n            if pf <= y:\n                del float_level_to_power[x]\n            else:\n                float_level_to_power[x] -= y\n        print(sum(float_level_to_power.values()))\n        pass\n\n    @classmethod\n    def get_level_to_power(cls, int_level, int_power):\n        out = dict()\n        for i in range(len(int_level)):\n            if int_level[i] in out:\n                out[int_level[i]] += int_power[i]\n            else:\n                out[int_level[i]] = int_power[i]\n        return out\n        pass\n\ndef main():\n    Solution()\n    pass\nmain()", "t = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    soi = {}\n    sof = {}\n    for j in range(0, n):\n        (c, l) = map(int, input().split())\n        if not l in soi.keys():\n            soi[l] = c\n        else:\n            soi[l] += c\n    for j in range(0, m):\n        (c, l) = map(int, input().split())\n        if not l in sof.keys():\n            sof[l] = c\n        else:\n            sof[l] += c\n    sum = 0\n    for i in soi.keys():\n        if soi[i] < sof[i]:\n            sum += sof[i] - soi[i]\n    print(sum)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    add = [0] * 101\n    for i in range(n):\n        (takat, index) = map(int, input().split())\n        add[index] = add[index] + takat\n    for i in range(m):\n        (takat, index) = map(int, input().split())\n        add[index] = add[index] - takat\n    sum1 = 0\n    for i in add:\n        if i < 0:\n            sum1 = sum1 + abs(i)\n    print(sum1)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    dicn = {}\n    dicm = {}\n    for j in range(n):\n        (c, l) = map(int, input().split())\n        if l in dicn.keys():\n            dicn[l] += c\n        else:\n            dicn[l] = c\n    for j in range(m):\n        (c, l) = map(int, input().split())\n        if l in dicm.keys():\n            dicm[l] += c\n        else:\n            dicm[l] = c\n    sum = 0\n    for j in dicn.keys():\n        if dicn[j] >= dicm[j]:\n            continue\n        else:\n            sum += abs(dicn[j] - dicm[j])\n    print(sum)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    power_l = [[0, 0] for _ in range(101)]\n    check_add = 0\n    add = 0\n    fight_level = []\n    for _ in range(n):\n        (c, l) = map(int, input().split())\n        power_l[l][0] += c\n        if l not in fight_level:\n            fight_level.append(l)\n    for _ in range(m):\n        (c, l) = map(int, input().split())\n        power_l[l][1] += c\n    for f in fight_level:\n        v = power_l[f]\n        if v[1] > v[0]:\n            add += v[1] - v[0]\n    print(add)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    sointGang = {}\n    soflatGang = {}\n    chakra = 0\n    for i in range(n):\n        (C, L) = map(int, input().split())\n        if L not in sointGang.keys():\n            sointGang[L] = C\n        else:\n            sointGang[L] += C\n    for i in range(m):\n        (C, L) = map(int, input().split())\n        if L not in soflatGang.keys():\n            soflatGang[L] = C\n        else:\n            soflatGang[L] += C\n    for level in soflatGang.keys():\n        if soflatGang[level] > sointGang[level]:\n            chakra += abs(soflatGang[level] - sointGang[level])\n    print(chakra)", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    (soint, sofloat) = ({}, {})\n    for _ in range(n):\n        (c, l) = [int(x) for x in input().split()]\n        if soint.get(l):\n            soint[l] += c\n        else:\n            soint[l] = c\n    for _ in range(m):\n        (c, l) = [int(x) for x in input().split()]\n        if sofloat.get(l):\n            sofloat[l] += c\n        else:\n            sofloat[l] = c\n    ans = 0\n    for i in soint:\n        sofloat[i] -= soint[i]\n        if sofloat[i] > 0:\n            ans += sofloat[i]\n    print(ans)", "t = int(input())\nwhile t != 0:\n    (n, m) = map(int, input().split())\n    c1 = [0] * 105\n    c2 = [0] * 105\n    h = 0\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        c1[l] += c\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        c2[l] += c\n    for i in range(0, 101):\n        if c2[i] > c1[i]:\n            h += c2[i] - c1[i]\n    print(h)\n    t -= 1", "for _ in range(int(input())):\n    net = [0] * 101\n    levs = set()\n    z = input().split()\n    (n, m) = map(int, z[:2])\n    for _ in range(n):\n        z = input().split()\n        (ch, lv) = map(int, z[:2])\n        levs |= {lv}\n        net[lv] += ch\n    for _ in range(m):\n        z = input().split()\n        (ch, lv) = map(int, z[:2])\n        net[lv] -= ch\n    boost = 0\n    for lv in levs:\n        if net[lv] < 0:\n            boost -= net[lv]\n    print(boost)", "test = int(input())\nfor case in range(test):\n    (n_i, n_f) = [int(val) for val in input().split(' ')]\n    I = {}\n    F = {}\n    for k in range(n_i):\n        wrior = [int(val) for val in input().split(' ')]\n        if wrior[1] in I.keys():\n            I[wrior[1]] += wrior[0]\n        else:\n            I[wrior[1]] = wrior[0]\n    for k in range(n_f):\n        wrior = [int(val) for val in input().split(' ')]\n        if wrior[1] in F.keys():\n            F[wrior[1]] += wrior[0]\n        else:\n            F[wrior[1]] = wrior[0]\n    cmn = []\n    for val in I.keys():\n        if val in F.keys():\n            cmn.append(val)\n    chk = 0\n    for val in cmn:\n        if I[val] < F[val]:\n            chk += F[val] - I[val]\n    print(chk)", "from collections import defaultdict\na = int(input())\nfor _ in range(a):\n    table1 = defaultdict(int)\n    table2 = defaultdict(int)\n    b = list(map(int, input().split()))\n    for i in range(b[0]):\n        aa = list(map(int, input().split()))\n        table1[aa[1]] += aa[0]\n    for i in range(b[1]):\n        ba = list(map(int, input().split()))\n        table2[ba[1]] += ba[0]\n    count = 0\n    for i in table1:\n        if table1[i] >= table2[i]:\n            pass\n        else:\n            count += table2[i] - table1[i]\n    print(count)", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    warriors = {}\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        if l in warriors.keys():\n            warriors[l] += c\n        else:\n            warriors[l] = c\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        warriors[l] -= c\n    magic = 0\n    for v in warriors.values():\n        if v < 0:\n            magic -= v\n    print(magic)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = list(map(int, input().split()))\n    ints = [0] * 101\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        ints[temp[1]] += temp[0]\n    floats = [0] * 101\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        floats[temp[1]] += temp[0]\n    ans = 0\n    for i in range(101):\n        ans += max(0, floats[i] - ints[i])\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    (n, m) = input().strip().split()\n    n = int(n)\n    m = int(m)\n    a = [0] * 101\n    b = [0] * 101\n    for j in range(0, n):\n        (s, d) = input().strip().split()\n        s = int(s)\n        d = int(d)\n        a[d] += s\n    for k in range(0, m):\n        (g, h) = input().strip().split()\n        g = int(g)\n        h = int(h)\n        b[h] += g\n    add = 0\n    for v in range(0, 101):\n        if b[v] > a[v]:\n            add += b[v] - a[v]\n    print(add)", "for t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    m = temp[1]\n    lsoi = []\n    lsof = []\n    csoi = []\n    csof = []\n    for i in range(101):\n        lsoi.append(0)\n        csoi.append(0)\n        lsof.append(0)\n        csof.append(0)\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        csoi[temp[1]] += 1\n        lsoi[temp[1]] += temp[0]\n    for i in range(m):\n        temp = list(map(int, input().split()))\n        csof[temp[1]] += 1\n        lsof[temp[1]] += temp[0]\n    ans = 0\n    for i in range(1, 101):\n        if lsoi[i] == lsof[i]:\n            csoi[i] = 0\n        elif lsoi[i] < lsof[i]:\n            csoi[i] = 0\n            ans += lsof[i] - lsoi[i]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    s_i = {}\n    for j in range(n):\n        (c, l) = map(int, input().split())\n        if l in s_i:\n            s_i[l] = s_i[l] + c\n        else:\n            s_i[l] = c\n    s_f = {}\n    for j in range(m):\n        (c, l) = map(int, input().split())\n        if l in s_f:\n            s_f[l] = s_f[l] + c\n        else:\n            s_f[l] = c\n    need = 0\n    for j in s_i:\n        (ci, cf) = (s_i[j], s_f[j])\n        if ci < cf:\n            need += cf - ci\n    print(need)", "T = int(input())\nwhile T:\n    LI = [0 for _ in range(100)]\n    LF = [0 for _ in range(100)]\n    SC = 0\n    (N, M) = map(int, input().split())\n    for i in range(N):\n        (c, l) = map(int, input().split())\n        LI[l - 1] += c\n    for i in range(M):\n        (c, l) = map(int, input().split())\n        LF[l - 1] += c\n    for i in range(100):\n        if LI[i] < LF[i]:\n            SC += LF[i] - LI[i]\n    print(SC)\n    T -= 1", "from sys import stdin\nfrom operator import add\nfrom functools import reduce\nT = int(stdin.readline().strip())\nwhile T > 0:\n    [N, M] = [int(n) for n in stdin.readline().strip().split()]\n    dict1 = {}\n    for i in range(0, N):\n        [C, L] = [int(n) for n in stdin.readline().strip().split()]\n        if L not in dict1:\n            dict1[L] = C\n        else:\n            dict1[L] += C\n    for i in range(0, M):\n        [C, L] = [int(n) for n in stdin.readline().strip().split()]\n        dict1[L] -= C\n    print(-reduce(add, [n for n in dict1.values() if n < 0], 0))\n    T -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    soint = [0] * 101\n    sofloat = [0] * 101\n    count = 0\n    for i in range(n):\n        (c, l) = map(int, input().split())\n        soint[l] += c\n    for i in range(m):\n        (c, l) = map(int, input().split())\n        sofloat[l] += c\n    for i in range(1, 101):\n        if sofloat[i] > soint[i]:\n            count += sofloat[i] - soint[i]\n    print(count)", "t = int(input())\nfor t0 in range(t):\n    (n, m) = [int(i) for i in input().strip().split(' ')]\n    a = dict()\n    b = dict()\n    st = set()\n    for n0 in range(n):\n        (v, k) = [int(i) for i in input().strip().split(' ')]\n        if k in a:\n            a[k] += v\n        else:\n            a[k] = v\n    for m0 in range(m):\n        (v, k) = [int(i) for i in input().strip().split(' ')]\n        if k in b:\n            b[k] += v\n        else:\n            b[k] = v\n    ct = 0\n    for i in a:\n        x = a[i]\n        y = b[i]\n        if x >= y:\n            continue\n        else:\n            z = y - x\n            ct += z\n    print(ct)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    di = {}\n    df = {}\n    level = set()\n    for j in range(n):\n        (c, l) = map(int, input().split())\n        level.add(l)\n        if di.get(l) == None:\n            di[l] = c\n        else:\n            di[l] = di[l] + c\n    for j in range(m):\n        (c, l) = map(int, input().split())\n        if df.get(l) == None:\n            df[l] = c\n        else:\n            df[l] = df[l] + c\n    point = 0\n    level = list(level)\n    for j in range(len(level)):\n        if di.get(level[j]) < df.get(level[j]):\n            point += df[level[j]] - di[level[j]]\n    print(point)", "t = int(input())\nwhile t > 0:\n    nm = str(input())\n    (n, m) = nm.split(' ')\n    n = int(n)\n    m = int(m)\n    sn = []\n    sm = []\n    s = {}\n    i = 0\n    j = 0\n    temp = []\n    while i < n:\n        sn.append([])\n        sn[i] = str(input()).split(' ')\n        sn[i] = [int(i) for i in sn[i]]\n        try:\n            s[sn[i][1]] = s[sn[i][1]] + sn[i][0]\n        except:\n            s[sn[i][1]] = sn[i][0]\n        if not sn[i][1] in temp:\n            temp.append(sn[i][1])\n            j += 1\n        i += 1\n    i = 0\n    while i < m:\n        sm.append([])\n        sm[i] = str(input()).split(' ')\n        sm[i] = [int(i) for i in sm[i]]\n        s[sm[i][1]] = s[sm[i][1]] - sm[i][0]\n        i += 1\n    ans = 0\n    i = 0\n    l = len(temp)\n    while i < l:\n        if s[temp[i]] < 0:\n            ans = ans + s[temp[i]]\n        i += 1\n    print(abs(ans))\n    t -= 1", "def drgnbool():\n    t = int(input())\n    while t:\n        (n, m) = map(int, input().split())\n        soints = {}\n        sofloats = {}\n        while n:\n            (ch, level) = map(int, input().split())\n            if level in soints.keys():\n                soints.get(level).append(ch)\n            else:\n                soints[level] = [ch]\n            n -= 1\n        while m:\n            (ch, level) = map(int, input().split())\n            if level in sofloats.keys():\n                sofloats.get(level).append(ch)\n            else:\n                sofloats[level] = [ch]\n            m -= 1\n        reinforcement = 0\n        for key in soints.keys():\n            sum1 = sum(soints.get(key))\n            sum2 = sum(sofloats.get(key))\n            if sum2 > sum1:\n                reinforcement += sum2 - sum1\n        print(reinforcement)\n        t -= 1\ndrgnbool()", "t = int(input())\nfor _ in range(t):\n    (n, m) = (int(x) for x in input().split())\n    a = []\n    b = []\n    for _ in range(101):\n        a.append([])\n        b.append([])\n    for _ in range(n):\n        (c, l) = (int(x) for x in input().split())\n        a[l].append(c)\n    for _ in range(m):\n        (c, l) = (int(x) for x in input().split())\n        b[l].append(c)\n    count = 0\n    for i in range(1, 101):\n        tmp_a = sum(a[i])\n        tmp_b = sum(b[i])\n        if tmp_b > tmp_a:\n            count += tmp_b - tmp_a\n    print(count)", "def drgnbool():\n    t = int(input())\n    while t:\n        (n, m) = map(int, input().split())\n        soints = {}\n        sofloats = {}\n        while n:\n            (ch, level) = map(int, input().split())\n            if level in soints.keys():\n                soints.get(level).append(ch)\n            else:\n                soints[level] = [ch]\n            n -= 1\n        while m:\n            (ch, level) = map(int, input().split())\n            if level in sofloats.keys():\n                sofloats.get(level).append(ch)\n            else:\n                sofloats[level] = [ch]\n            m -= 1\n        reinforcement = 0\n        for key in soints.keys():\n            sum1 = sum(soints.get(key))\n            sum2 = sum(sofloats.get(key))\n            if sum2 > sum1:\n                reinforcement += sum2 - sum1\n        print(reinforcement)\n        t -= 1\ndrgnbool()"]