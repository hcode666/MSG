["def getDivisors(n):\n    divisors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef test_case():\n    n = int(input())\n    arr = [int(x) for x in input()]\n    divisors = getDivisors(n)\n    ones = sum(arr)\n    minm = 1000000000\n    for d in divisors:\n        freq = {}\n        for i in range(d):\n            freq[i] = sum(arr[i:n:d])\n        req = n // d\n        for i in range(d):\n            ans = req - freq[i] + ones - freq[i]\n            minm = min(minm, ans)\n    return minm\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(test_case())\nmain()", "import math\n\ndef getDivisors(n):\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input()]\n    divisors = getDivisors(n)\n    ones = sum(arr)\n    minm = 1000000000\n    for d in divisors:\n        freq = {}\n        for i in range(d):\n            freq[i] = sum(arr[i:n:d])\n        req = n // d\n        for i in range(d):\n            ans = req - freq[i] + ones - freq[i]\n            minm = min(minm, ans)\n    print(minm)", "import math\n\ndef getDivisors(n):\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input()]\n    divisors = getDivisors(n)\n    ones = sum(arr)\n    minm = 1000000000\n    for d in divisors:\n        freq = {}\n        for i in range(d):\n            freq[i] = sum(arr[i:n:d])\n        req = n // d\n        for i in range(d):\n            ans = req - freq[i] + ones - freq[i]\n            minm = min(minm, ans)\n    print(minm)", "import math\n\ndef getDivisors(n):\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input()]\n    divisors = getDivisors(n)\n    ones = sum(arr)\n    minm = 1000000000\n    for d in divisors:\n        freq = {}\n        for i in range(d):\n            freq[i] = sum(arr[i:n:d])\n        req = n // d\n        for i in range(d):\n            ans = req - freq[i] + ones - freq[i]\n            minm = min(minm, ans)\n    print(minm)", "import math, sys\n\ndef find_in_pos(x, s):\n    l = len(s)\n    count = 0\n    temp_count = 0\n    for j in range(0, x):\n        temp_count = 0\n        for i in range(j, l, x):\n            if s[i] == 1:\n                temp_count += 1\n        count = max(count, temp_count)\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input()]\n    one_c = sum(s)\n    if one_c == 0:\n        print(1)\n        continue\n    if one_c == 1:\n        print(0)\n        continue\n    factors = set()\n    for i in range(1, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sys.maxsize\n    for i in factors:\n        have = {}\n        for j in range(i):\n            have[j] = sum(s[j:n:i])\n        req = n // i\n        for j in range(i):\n            temp = req - have[j] + one_c - have[j]\n            ans = min(ans, temp)\n    print(ans)", "import math, sys\n\ndef find_in_pos(x, s):\n    l = len(s)\n    count = 0\n    temp_count = 0\n    for j in range(0, x):\n        temp_count = 0\n        for i in range(j, l, x):\n            if s[i] == 1:\n                temp_count += 1\n        count = max(count, temp_count)\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input()]\n    one_c = sum(s)\n    if one_c == 0:\n        print(1)\n        continue\n    if one_c == 1:\n        print(0)\n        continue\n    factors = set()\n    for i in range(1, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sys.maxsize\n    for i in factors:\n        have = {}\n        for j in range(i):\n            have[j] = sum(s[j:n:i])\n        req = n // i\n        for j in range(i):\n            temp = req - have[j] + one_c - have[j]\n            ans = min(ans, temp)\n    print(ans)", "import math, sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef print(*args, **kwargs):\n    (sep, file) = (kwargs.pop('sep', ' '), kwargs.pop('file', sys.stdout))\n    at_start = True\n    for x in args:\n        if not at_start:\n            file.write(sep)\n        file.write(str(x))\n        at_start = False\n    file.write(kwargs.pop('end', '\\n'))\n    if kwargs.pop('flush', False):\n        file.flush()\n\ndef find_in_pos(x, s):\n    l = len(s)\n    count = 0\n    temp_count = 0\n    for j in range(0, x):\n        temp_count = 0\n        for i in range(j, l, x):\n            if s[i] == 1:\n                temp_count += 1\n        count = max(count, temp_count)\n    return count\nfor _ in range(int(input())):\n    n = int(input())\n    s = [int(x) for x in input()]\n    one_c = sum(s)\n    if one_c == 0:\n        print(1)\n        continue\n    if one_c == 1:\n        print(0)\n        continue\n    factors = set()\n    for i in range(1, math.ceil(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.add(i)\n            factors.add(n // i)\n    ans = sys.maxsize\n    for i in factors:\n        have = {}\n        for j in range(i):\n            have[j] = sum(s[j:n:i])\n        req = n // i\n        for j in range(i):\n            temp = req - have[j] + one_c - have[j]\n            ans = min(ans, temp)\n    print(ans)", "def getDivisors(n):\n    divisors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef test_case():\n    n = int(input())\n    arr = [int(x) for x in input()]\n    divisors = getDivisors(n)\n    ones = sum(arr)\n    minm = 1000000000\n    for d in divisors:\n        freq = {}\n        for i in range(d):\n            freq[i] = sum(arr[i:n:d])\n        req = n // d\n        for i in range(d):\n            ans = req - freq[i] + ones - freq[i]\n            minm = min(minm, ans)\n    return minm\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(test_case())\nmain()", "def getDivisors(n):\n    divisors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef test_case():\n    n = int(input())\n    arr = [int(x) for x in input()]\n    divisors = getDivisors(n)\n    ones = sum(arr)\n    minm = 1000000000\n    for d in divisors:\n        freq = {}\n        for i in range(d):\n            freq[i] = sum(arr[i:n:d])\n        req = n // d\n        for i in range(d):\n            ans = req - freq[i] + ones - freq[i]\n            minm = min(minm, ans)\n    return minm\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        print(test_case())\nmain()", "import math\nT = input()\nfor _ in range(int(T)):\n    N = int(input())\n    arr = [int(x) for x in input()]\n    ones = sum(arr)\n    factors = []\n    for i in range(1, int(math.sqrt(N)) + 1):\n        if N % i == 0:\n            factors.append(N // i)\n            factors.append(i)\n    ans = 1000000000.0\n    for fact in factors:\n        freq = {}\n        for i in range(fact):\n            freq[i] = sum(arr[i:N:fact])\n        req = N // fact\n        for i in range(fact):\n            to_convert = req - freq[i]\n            to_convert += ones - freq[i]\n            mnm = req - freq[i] + ones - freq[i]\n            ans = min(ans, mnm)\n    print(int(ans))", "from array import array\nimport math\nmod = 1000000007\n\ndef getDivisors(n):\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef test_case():\n    n = int(input())\n    arr = [int(x) for x in input()]\n    divisors = getDivisors(n)\n    ones = sum(arr)\n    minm = 1000000000\n    for d in divisors:\n        freq = {}\n        for i in range(d):\n            freq[i] = sum(arr[i:n:d])\n        req = n // d\n        for i in range(d):\n            ans = req - freq[i] + ones - freq[i]\n            minm = min(minm, ans)\n    return minm\nfor _ in range(int(input())):\n    print(test_case())", "from array import array\nimport math\nmod = 1000000007\n\ndef getDivisors(n):\n    divisors = set()\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\n\ndef test_case():\n    n = int(input())\n    arr = [int(x) for x in input()]\n    divisors = getDivisors(n)\n    ones = sum(arr)\n    minm = 1000000000\n    for d in divisors:\n        freq = {}\n        for i in range(d):\n            freq[i] = sum(arr[i:n:d])\n        req = n // d\n        for i in range(d):\n            ans = req - freq[i] + ones - freq[i]\n            minm = min(minm, ans)\n    return minm\nfor _ in range(int(input())):\n    print(test_case())", "def get_factors(n):\n    divisors = set()\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            divisors.add(i)\n            divisors.add(n // i)\n    return divisors\nt = int(input())\nwhile t:\n    n = int(input())\n    s = [int(x) for x in input()]\n    final_flips = 1000000\n    ones = sum(s)\n    for factor in get_factors(n):\n        set_bits = 0\n        for temp in range(factor):\n            set_bits = sum(s[temp:n:factor])\n            req = n // factor\n            flips = req - set_bits + ones - set_bits\n            final_flips = min(final_flips, flips)\n    print(final_flips)\n    t -= 1"]