["def frequency_check(dictionary):\n    for item in range(len(dictionary.keys()) - 1):\n        if dictionary.keys()[item] != dictionary.keys()[item + 1]:\n            return False\n    return True\n\ndef max_key(dictionary):\n    Max = 0\n    for item in dictionary:\n        if dictionary[item] > Max:\n            Max = dictionary[item]\n    return Max\n\ndef func():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        return 0\n    empt = {}\n    for i in range(n):\n        if arr[i] not in empt:\n            empt[arr[i]] = 1\n        else:\n            empt[arr[i]] += 1\n    if max_key(empt) == 1:\n        return n - 2\n    return n - max_key(empt)\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    print(func())", "def frequency_check(dictionary):\n    for item in range(len(dictionary.keys()) - 1):\n        if dictionary.keys()[item] != dictionary.keys()[item + 1]:\n            return False\n    return True\n\ndef max_key(dictionary):\n    Max = 0\n    for item in dictionary:\n        if dictionary[item] > Max:\n            Max = dictionary[item]\n    return Max\n\ndef func():\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        return 0\n    empt = {}\n    for i in range(n):\n        if arr[i] not in empt:\n            empt[arr[i]] = 1\n        else:\n            empt[arr[i]] += 1\n    if max_key(empt) == 1:\n        return n - 2\n    return n - max_key(empt)\nt = int(input())\nwhile t != 0:\n    t = t - 1\n    print(func())", "from statistics import mode\nT = int(input())\nwhile T:\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = mode(a)\n    m = a.count(c)\n    if n <= 2:\n        print(0)\n    elif m == 1:\n        print(n - 2)\n    else:\n        print(n - m)\n    T = T - 1", "t = int(input())\nfor z in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n <= 2:\n        print(0)\n    else:\n        max_freq = 0\n        freq_map = dict()\n        for ele in arr:\n            freq_map[ele] = freq_map.get(ele, 0) + 1\n            if freq_map[ele] > max_freq:\n                max_freq = freq_map[ele]\n        if len(freq_map) == n:\n            print(n - 2)\n        else:\n            print(n - max_freq)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        d[i] = d.get(i, 0) + 1\n    ans = d[max(d, key=lambda x: d[x])]\n    print(n + int(n == 1) - int(ans == 1) - ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n        continue\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n    z = max(d.values())\n    if z == 1:\n        print(n - 2)\n    else:\n        print(n - z)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n        continue\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n    z = max(d.values())\n    if z == 1:\n        print(n - 2)\n    else:\n        print(n - z)", "from collections import Counter\nn = int(input())\nfor i in range(n):\n    a = int(input())\n    l = list(map(int, input().split()))\n    x = max(Counter(l).values())\n    if a <= 2:\n        print('0')\n    elif x == 1:\n        print(a - 2)\n    elif x > 1:\n        print(a - x)", "test_cases = int(input())\nlist_final = []\nfor t in range(test_cases):\n    n = int(input())\n    data = input()\n    if n > 2:\n        list_data = []\n        a = 0\n        for j in range(len(data)):\n            if data[j] == ' ':\n                list_data.append(data[a:j])\n                a = j + 1\n        list_data.append(data[a:])\n        list_data.sort()\n        list_count = []\n        count = 1\n        for k in range(1, n):\n            if list_data[k] == list_data[k - 1]:\n                count = count + 1\n            else:\n                list_count.append(count)\n                count = 1\n        list_count.append(count)\n        max_count = int(list_count[0])\n        for i in range(len(list_count)):\n            if int(list_count[i]) > max_count:\n                max_count = int(list_count[i])\n        if len(list_count) != n:\n            req_ans = n - max_count\n            list_final.append(req_ans)\n        else:\n            list_final.append(n - 2)\n    else:\n        list_final.append(0)\nfor k in range(len(list_final)):\n    print(list_final[k])", "T: int = int(input())\nfor x in range(T):\n    N: int = int(input())\n    inp: list = list(map(int, input().split(' ')))\n    count: dict = {}\n    if len(inp) <= 2:\n        print(0)\n    else:\n        for i in range(0, N):\n            n = inp[i]\n            if n in count:\n                k = count[n] + 1\n                count.update({n: k})\n            else:\n                count[n] = 1\n        maxcount: int = max(count.values())\n        if maxcount == 1:\n            print(N - 2)\n        else:\n            print(N - maxcount)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for i in arr:\n        d[i] = d.get(i, 0) + 1\n    odd_count = 0\n    even_count = 0\n    m = max(d.values())\n    if n <= 2:\n        print('0')\n    elif m == 1:\n        print(n - 2)\n    elif m > 1:\n        print(n - m)", "from statistics import mode\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    r = mode(a)\n    fre = a.count(r)\n    if n <= 2:\n        print(0)\n    elif fre == 1:\n        print(n - 2)\n    else:\n        print(n - fre)\n    t = t - 1", "from statistics import mode\n\ndef grab_input():\n    N = int(input())\n    A = list(map(int, input().split()))\n    return (N, A)\nT = int(input())\nwhile T > 0:\n    (N, A) = grab_input()\n    m = mode(A)\n    freq = A.count(m)\n    if N <= 2:\n        print('0')\n    elif freq == 1:\n        print(N - 2)\n    else:\n        print(N - freq)\n    T -= 1", "for temp in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    freq = {}\n    for i in arr:\n        try:\n            freq[i] += 1\n        except:\n            freq[i] = 1\n    m1 = 0\n    l = len(freq)\n    if n <= 2:\n        print(0)\n    elif n == 3:\n        if l == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        for j in freq.values():\n            if j > m1:\n                m1 = j\n        if m1 == 1:\n            print(n - 2)\n        else:\n            print(n - m1)", "for temp in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    freq = {}\n    for i in arr:\n        try:\n            freq[i] += 1\n        except:\n            freq[i] = 1\n    m1 = 0\n    l = len(freq)\n    if n <= 2:\n        print(0)\n    elif n == 3:\n        if l == 1:\n            print(0)\n        else:\n            print(1)\n    else:\n        for j in freq.values():\n            if j > m1:\n                m1 = j\n        if m1 == 1:\n            print(n - 2)\n        else:\n            print(n - m1)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        print(n - n)\n        continue\n    freq = defaultdict(int)\n    for num in arr:\n        freq[num] += 1\n    a = sorted(freq.items(), key=lambda x: x[1])[-1]\n    if a[1] == 1:\n        print(n - 2)\n    else:\n        print(n - a[1])", "from statistics import mode\nk = int(input())\nfor _ in range(k):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    p = mode(arr)\n    s = arr.count(p)\n    if n <= 2:\n        print(0)\n    elif s == 1:\n        print(n - 2)\n    else:\n        print(n - s)", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    if len(lst) > 2:\n        counts = {}\n        for item in lst:\n            if item in counts:\n                counts[item] += 1\n            else:\n                counts[item] = 1\n        max_count = 0\n        max_item = None\n        for (item, count) in counts.items():\n            if count > max_count:\n                max_count = count\n                max_item = item\n        if max_count == 1:\n            print(len(lst) - 2)\n        else:\n            print(len(lst) - max_count)\n    else:\n        print(0)", "for _ in range(int(input())):\n    n = int(input())\n    lst = [int(x) for x in input().split()]\n    if len(lst) > 2:\n        counts = {}\n        for item in lst:\n            if item in counts:\n                counts[item] += 1\n            else:\n                counts[item] = 1\n        max_count = 0\n        max_item = None\n        for (item, count) in counts.items():\n            if count > max_count:\n                max_count = count\n                max_item = item\n        if max_count == 1:\n            print(len(lst) - 2)\n        else:\n            print(len(lst) - max_count)\n    else:\n        print(0)", "from statistics import mode\nn = int(input())\nfor t in range(n):\n    n = int(input())\n    A = [int(a) for a in input().split()]\n    c = mode(A)\n    m = A.count(c)\n    if n <= 2:\n        print(0)\n    elif m == 1:\n        print(n - 2)\n    else:\n        print(n - m)", "from statistics import mode\nk = int(input())\nfor _ in range(k):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    p = mode(arr)\n    s = arr.count(p)\n    if n <= 2:\n        print(0)\n    elif s == 1:\n        print(n - 2)\n    else:\n        print(n - s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    numbers.sort()\n    max_occuring_number = None\n    current_num_occurence = 0\n    max_occurence = None\n    last_number = None\n    for (index, number) in enumerate(numbers):\n        if index == 0:\n            last_number = number\n            num_count = 1\n            max_occurence = 1\n            continue\n        if number == last_number:\n            num_count += 1\n        else:\n            if num_count > max_occurence:\n                max_occurence = num_count\n            num_count = 1\n        last_number = number\n    if num_count > max_occurence:\n        max_occurence = num_count\n    if n == 2 and max_occurence == 1:\n        print(0)\n    elif max_occurence == 1 and n > 1:\n        print(n - max_occurence - 1)\n    else:\n        print(n - max_occurence)", "import statistics\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = statistics.mode(a)\n    y = a.count(x)\n    if n <= 2:\n        print(0)\n    elif y == 1:\n        print(n - 2)\n    else:\n        print(n - y)", "get_int = lambda : int(input())\nget_mint = lambda : list(map(int, input().split()))\nfor _ in range(get_int()):\n    N = get_int()\n    A = get_mint()\n    if N < 3:\n        print(0)\n        continue\n    if len(set(A)) == N:\n        print(N - 2)\n        continue\n    d = dict()\n    for Ai in A:\n        if Ai not in d:\n            d[Ai] = 0\n        d[Ai] += 1\n    print(N - max([v for v in d.values()]))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n        continue\n    from statistics import mode\n    f = arr.count(mode(arr))\n    if f != 1:\n        print(n - f)\n    else:\n        print(n - 2)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    m = [0, 0]\n    for i in a:\n        d.setdefault(i, 0)\n        d[i] += 1\n        if d[i] > m[0]:\n            m[0] = d[i]\n            m[1] = i\n    if n < 3:\n        print(0)\n    elif m[0] == 1:\n        print(n - 2)\n    else:\n        print(n - m[0])", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = defaultdict(int)\n    q = 0\n    for i in l:\n        d[i] += 1\n        if d[i] > q:\n            q = d[i]\n    if n == 2 or n == 1 or q == n:\n        print(0)\n    elif q == 1:\n        print(n - 2)\n    else:\n        print(n - q)", "from statistics import mode\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    c = mode(A)\n    m = A.count(c)\n    if n <= 2:\n        print(0)\n    elif m == 1:\n        print(n - 2)\n    else:\n        print(n - m)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        s = set(arr)\n        set_len = len(s)\n        if n == set_len:\n            print(n - 2)\n        else:\n            c = Counter(arr)\n            m = max(c.values())\n            print(n - m)", "def min_deletions(arr):\n    freq = {}\n    for num in arr:\n        freq[num] = freq.get(num, 0) + 1\n    max_freq = max(freq.values())\n    if max_freq == len(arr):\n        return 0\n    if max_freq == 1:\n        return len(arr) - 2\n    return len(arr) - max_freq\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(min_deletions(arr))", "from collections import Counter\nt = int(input())\nlist_input = []\nfor i in range(t):\n    n = int(input())\n    list1 = list(map(int, input().split(' ')))\n    list_input.append([n, list1])\nfor i in range(t):\n    ele_count = Counter(list_input[i][1])\n    val = max(ele_count.values())\n    length = len(list_input[i][1])\n    if val == 1 and length == 1:\n        print(0)\n    elif val == 1 and length > 1:\n        print(length - 2)\n    else:\n        print(length - val)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        d = {}\n        x = 0\n        for i in range(n):\n            d[a[i]] = d.get(a[i], 0) + 1\n        for i in d.values():\n            if i > x:\n                x = i\n        if x == 1:\n            print(n - 2)\n        else:\n            print(n - x)\n    t = t - 1", "def solve(array):\n    if len(array) <= 2:\n        return 0\n    max_count = 0\n    hashing = {}\n    for x in array:\n        try:\n            hashing[x] += 1\n        except:\n            hashing[x] = 1\n        if hashing[x] > max_count:\n            max_count = hashing[x]\n    if max_count == 1:\n        return len(array) - 2\n    return len(array) - max_count\ntest = int(input())\nfor _ in range(test):\n    x = int(input())\n    array = [int(x) for x in input().split()]\n    print(solve(array))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        d = {}\n        for i in range(n):\n            d[a[i]] = d.get(a[i], 0) + 1\n        v = list(d.values())\n        m = 0\n        for i in v:\n            if i > m:\n                m = i\n        if m == 1:\n            print(n - 2)\n        else:\n            print(n - m)", "from os import path\nimport sys\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfrom collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = Counter(a)\n    if len(list(set(a))) == 1:\n        print(0)\n    else:\n        mx = max(c.values())\n        if mx > 1:\n            print(n - mx)\n        elif mx == 1:\n            print(n - 2)", "import statistics\nfor t in range(int(input())):\n    l = int(input())\n    n = list(map(int, input().split()))\n    if l <= 2:\n        print(0)\n    else:\n        rep = n.count(statistics.mode(n))\n        if rep == 1:\n            print(l - 2)\n        else:\n            print(l - rep)", "from collections import Counter\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict(Counter(l))\n    ct = max(d.values())\n    if n <= 2:\n        print(0)\n    elif ct == 1:\n        print(n - 2)\n    else:\n        print(n - ct)", "from collections import Counter\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = dict(Counter(l))\n    ct = max(d.values())\n    if n <= 2:\n        print(0)\n    elif ct == 1:\n        print(n - 2)\n    else:\n        print(n - ct)", "from collections import Counter\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ct = 0\n    if n <= 2:\n        print(0)\n    else:\n        d = dict(Counter(a))\n        ct = max(d.values())\n        if ct == 1:\n            print(n - 2)\n        else:\n            print(n - ct)", "import statistics\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        m = statistics.mode(l)\n        if l.count(m) > 1:\n            print(n - l.count(m))\n        else:\n            print(n - 2)", "import statistics\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        m = statistics.mode(l)\n        if l.count(m) > 1:\n            print(n - l.count(m))\n        else:\n            print(n - 2)", "from statistics import mode\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    m = A.count(mode(A))\n    if N < 3:\n        print(0)\n    elif m == 1:\n        print(N - 2)\n    else:\n        print(N - m)", "import statistics\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        m = statistics.mode(l)\n        if l.count(m) > 1:\n            print(n - l.count(m))\n        else:\n            print(n - 2)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 2 or n == 1:\n        print(0)\n    else:\n        dic = {}\n        for i in a:\n            if i not in dic:\n                dic[i] = 1\n            else:\n                dic[i] += 1\n        maxi = max(dic.values())\n        sumi = sum(dic.values())\n        if maxi == 1:\n            print(n - 2)\n        else:\n            print(sumi - maxi)", "from statistics import mode\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    res = mode(l)\n    if n <= 2:\n        print(0)\n    elif l.count(res) > 1:\n        print(n - l.count(res))\n    else:\n        print(n - 2)", "import statistics\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        m = statistics.mode(l)\n        if l.count(m) > 1:\n            print(n - l.count(m))\n        else:\n            print(n - 2)", "import statistics\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        m = statistics.mode(l)\n        if l.count(m) > 1:\n            print(n - l.count(m))\n        else:\n            print(n - 2)", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = Counter(map(int, input().split()))\n    if n < 3:\n        print(0)\n        continue\n    print(min(n - max(a.values()), n - 2))", "test = int(input())\nfor z in range(test):\n    n = int(input())\n    A = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n        continue\n    d = {}\n    Max = 1\n    for i in A:\n        if i in d:\n            d[i] += 1\n            if Max < d[i]:\n                Max = d[i]\n        else:\n            d[i] = 1\n    if Max == 1:\n        print(n - 2)\n    else:\n        print(n - Max)", "for _ in range(int(input())):\n    numofp = int(input())\n    arr = list(map(int, input().split()))\n    setr = {}\n    for i in range(numofp):\n        mur = arr[i]\n        if mur in setr:\n            setr[mur] += 1\n        else:\n            setr[mur] = 1\n    kon = max(setr, key=lambda x: setr[x])\n    if numofp <= 2:\n        print(0)\n    elif setr[kon] == 1:\n        print(numofp - 2)\n    else:\n        print(numofp - setr[kon])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    val = input().split()\n    dict = {}\n    greatest = 0\n    for i in val:\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n        greatest = max(dict[i], greatest)\n    if greatest > 2:\n        print(n - greatest)\n    else:\n        print(max(0, n - 2))", "from statistics import mode\nt = int(input())\nfor i in range(t):\n    a = int(input())\n    b = list(map(int, input().split()))\n    c = mode(b)\n    d = b.count(c)\n    if len(b) <= 2:\n        print(0)\n    elif d == 1:\n        print(a - 2)\n    else:\n        print(a - d)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    val = input().split()\n    dict = {}\n    greatest = 0\n    for i in val:\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n        greatest = max(dict[i], greatest)\n    if greatest > 2:\n        print(n - greatest)\n    else:\n        print(max(0, n - 2))", "for i in range(int(input())):\n    n = int(input())\n    array = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        counter = {}\n        for i in array:\n            if i in counter.keys():\n                counter[i] += 1\n            else:\n                counter[i] = 1\n        max_ = max(counter.values())\n        if max_ == 1:\n            print(n - 2)\n        else:\n            print(n - max_)", "def sol():\n    a = int(input())\n    b = list(map(int, input().split()))\n    if a < 3:\n        return 0\n    else:\n        z = {}\n        for i in b:\n            if i in z:\n                z[i] += 1\n            else:\n                z[i] = 1\n        y = max(z.values())\n        if y == 1:\n            return a - 2\n        else:\n            return a - max(z.values())\nn = int(input())\nfor _ in range(n):\n    print(sol())", "from statistics import mode\nt = int(input())\nwhile t:\n    n = int(input())\n    l = list(map(int, input().split()))[:n]\n    m = 0\n    if n <= 2:\n        print('0')\n    else:\n        m = l.count(mode(l))\n        print(n - m) if m > 1 else print(n - 2)\n    t -= 1", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    cnt = Counter(arr)\n    if n == 1 or n == 2:\n        print(0)\n    else:\n        print(min(n - max(cnt.values()), n - 2))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    else:\n        d = {}\n        for i in range(n):\n            d[a[i]] = d.get(a[i], 0) + 1\n        v = list(d.values())\n        m = 0\n        for i in v:\n            if i > m:\n                m = i\n        if m == 1:\n            print(n - 2)\n        else:\n            print(n - m)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freq = {}\n    for i in arr:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    maxi = 0\n    for i in freq:\n        maxi = max(maxi, freq[i])\n    if n == 1 or n == 2:\n        print(0)\n    elif maxi == 1:\n        print(n - 2)\n    else:\n        print(n - maxi)", "for na in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = set(l)\n    if n <= 2:\n        print(0)\n    elif n == len(s):\n        print(n - 2)\n    else:\n        x = {}\n        for i in l:\n            if i in x:\n                x[i] += 1\n            else:\n                x[i] = 1\n        maxi = 0\n        for i in x:\n            maxi = max(maxi, x[i])\n        print(n - maxi)", "import collections\n\ndef calc_min_deletion(A, n):\n    if n <= 2:\n        return 0\n    c = collections.Counter(A)\n    return min(n - c.most_common(1)[0][1], n - 2)\nfor _ in range(int(input())):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    print(calc_min_deletion(A, n))", "from statistics import mode\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = mode(a)\n    k = a.count(c)\n    if n <= 2:\n        print(0)\n    elif k == 1:\n        print(n - 2)\n    else:\n        print(n - k)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n    elif len(set(arr)) == len(arr):\n        print(n - 2)\n    else:\n        d = {}\n        for i in arr:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        m = 0\n        for i in d:\n            m = max(m, d[i])\n        print(n - m)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = [int(k) for k in input().split()]\n    a.sort()\n    m = 2\n    c = 0\n    ox = 0\n    for x in a:\n        if x == ox:\n            c += 1\n            if c > m:\n                m = c\n        else:\n            c = 1\n        ox = x\n    if n > 1:\n        print(n - m)\n    else:\n        print(0)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    counts = Counter(arr)\n    if n <= 2:\n        print(0)\n    else:\n        print(n - max(2, max(counts.values())))", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    c = Counter(x)\n    s = max(c.values())\n    print(max(min(n - s, n - 2), 0))", "import sys, collections\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n <= 2:\n        print(0)\n        continue\n    freq = collections.Counter(a)\n    ans = n - max(2, max(freq.values()))\n    print(ans)", "for i in range(int(input())):\n    a = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    if a > 2:\n        for i in range(a):\n            if l[i] not in d:\n                d[l[i]] = 0\n            d[l[i]] += 1\n        fre = list(d.values())\n        m = max(fre)\n        if m == 1:\n            print(a - 2)\n        else:\n            print(a - m)\n    else:\n        print(0)", "for _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    if N <= 2:\n        print(0)\n    else:\n        dc = {}\n        max = 1\n        for i in range(N):\n            dc[A[i]] = 0\n        for i in range(N):\n            dc[A[i]] += 1\n        for i in dc:\n            if dc[i] > max:\n                max = dc[i]\n        if max > 2:\n            print(N - max)\n        else:\n            print(N - 2)", "for _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    if N <= 2:\n        print(0)\n    else:\n        dc = {}\n        max = 1\n        for i in range(N):\n            dc[A[i]] = 0\n        for i in range(N):\n            dc[A[i]] += 1\n        for i in dc:\n            if dc[i] > max:\n                max = dc[i]\n        if max > 2:\n            print(N - max)\n        else:\n            print(N - 2)", "import collections\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = collections.defaultdict(lambda : 0)\n    if n <= 2:\n        print('0')\n    else:\n        mx = 0\n        for x in a:\n            d[x] += 1\n            mx = max(mx, d[x])\n        if mx == 1:\n            print(n - 2)\n        else:\n            print(n - mx)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n <= 2:\n        print(0)\n    else:\n        data = Counter(arr)\n        ma = data.most_common(1)[0][1]\n        if ma > 2:\n            print(n - ma)\n        else:\n            print(n - 2)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n <= 2:\n        print(0)\n    else:\n        data = Counter(arr)\n        ma = data.most_common(1)[0][1]\n        if ma > 2:\n            print(n - ma)\n        else:\n            print(n - 2)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n <= 2:\n        print(0)\n    else:\n        data = Counter(arr)\n        ma = data.most_common(1)[0][1]\n        if ma > 2:\n            print(n - ma)\n        else:\n            print(n - 2)", "from collections import Counter\nfor temp in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n <= 2:\n        print(0)\n    else:\n        data = Counter(arr)\n        max_freq = data.most_common(1)[0][1]\n        if max_freq > 2:\n            print(n - max_freq)\n        else:\n            print(n - 2)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    counts = Counter(arr)\n    if n <= 2:\n        print(0)\n    else:\n        print(n - max(2, max(counts.values())))", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    counts = Counter(arr)\n    if n <= 2:\n        print(0)\n    else:\n        print(n - max(2, max(counts.values())))", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    counts = Counter(arr)\n    if n <= 2:\n        print(0)\n    else:\n        print(n - max(2, max(counts.values())))", "for i in range(int(input())):\n    n = int(input())\n    lis = list(map(int, input().strip().split(' ')))\n    lis.sort()\n    a = []\n    if n == 2 or n == 1:\n        print(0)\n    else:\n        while lis:\n            x = 0\n            s = lis[0]\n            while lis and s == lis[0]:\n                x += 1\n                lis.pop(0)\n            a.append(x)\n        a.sort()\n        if a[-1] != 1:\n            print(n - a[-1])\n        else:\n            print(n - 2)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    counts = Counter(arr)\n    if n <= 2:\n        print(0)\n    else:\n        print(n - max(2, max(counts.values())))", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    counts = Counter(arr)\n    if n <= 2:\n        print(0)\n    else:\n        print(n - max(2, max(counts.values())))", "T = int(input())\nwhile T > 0:\n    n = int(input())\n    a = list(map(int, input().split()[:n]))\n    dict = {}\n    for i in range(n):\n        if a[i] in dict:\n            dict[a[i]] += 1\n        else:\n            dict[a[i]] = 1\n    l = []\n    for i in dict:\n        l.append(dict[i])\n    l.sort()\n    if len(l) == n:\n        if len(l) > 1:\n            print(n - 2)\n        else:\n            print(0)\n    else:\n        print(n - l[-1])\n    T -= 1", "t = int(input())\nfrom collections import Counter\nfor _ in range(t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    col = Counter(lst)\n    if len(col) == len(lst):\n        if n > 1:\n            print(n - 2)\n        else:\n            print(0)\n    else:\n        mx = 0\n        for i in col:\n            val = col[i]\n            mx = max(val, mx)\n        print(n - mx)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    s = set(l)\n    if n <= 2:\n        print(0)\n    else:\n        d = Counter(l)\n        res = 0\n        f = 0\n        m = max(d.values())\n        if m == 1:\n            print(n - 2)\n        else:\n            print(n - m)", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    nc = {}\n    count = 0\n    if n <= 2:\n        print(0)\n        continue\n    for i in lst:\n        c = nc.get(i, 0) + 1\n        count = max(c, count)\n        nc[i] = nc.get(i, 0) + 1\n    if count == 1:\n        count += 1\n    print(n - count)", "repeats = int(input())\nfor _ in range(0, repeats):\n    input()\n    nums = list(map(int, input().split()))\n    if len(nums) <= 2:\n        print(0)\n        continue\n    nc = {}\n    count_max = 0\n    for n in nums:\n        c = nc.get(n, 0) + 1\n        count_max = max(c, count_max)\n        nc[n] = nc.get(n, 0) + 1\n    if count_max == 1:\n        count_max += 1\n    print(len(nums) - count_max)", "repeats = int(input())\nfor _ in range(0, repeats):\n    input()\n    nums = list(map(int, input().split()))\n    if len(nums) <= 2:\n        print(0)\n        continue\n    nc = {}\n    count_max = 0\n    for n in nums:\n        c = nc.get(n, 0) + 1\n        count_max = max(c, count_max)\n        nc[n] = nc.get(n, 0) + 1\n    if count_max == 1:\n        count_max += 1\n    print(len(nums) - count_max)", "t = int(input())\nfor _ in range(t):\n    N = int(input())\n    A = input().split()\n    unique = {}\n    if N <= 2:\n        print(0)\n        continue\n    maxi_nb = 0\n    for i in A:\n        if i in unique:\n            unique[i] = unique[i] + 1\n        else:\n            unique[i] = 1\n        if unique[i] > maxi_nb:\n            maxi_nb = unique[i]\n    if maxi_nb >= 2:\n        print(N - maxi_nb)\n    else:\n        print(N - 2)", "import sys\nt = int(input())\nfor i in range(t):\n    while t > 0:\n        n = int(input())\n        l1 = list(map(int, input().split()))\n        l = len(l1)\n        d = {}\n        m = 0\n        if l <= 2:\n            print(0)\n        else:\n            for i in l1:\n                if i not in d:\n                    d[i] = 1\n                else:\n                    d[i] += 1\n                m = max(m, d[i])\n            if m == 1:\n                print(l - 2)\n            else:\n                print(l - m)\n        t -= 1", "test_cases = int(input())\nfor i in range(test_cases):\n    num_integers = int(input())\n    arr = [int(x) for x in input().split()]\n    frequency = {}\n    for i in range(num_integers):\n        if arr[i] not in frequency:\n            frequency[arr[i]] = 1\n        else:\n            frequency[arr[i]] += 1\n    if num_integers == 1 or num_integers == 2:\n        print('0')\n    else:\n        max_frequency = 0\n        for i in frequency.values():\n            max_frequency = max(max_frequency, i)\n        if max_frequency == 1:\n            max_frequency += 1\n        print(num_integers - max_frequency)", "import statistics\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n > 2:\n        b = a.count(statistics.mode(a))\n        if b == 1:\n            print(n - 2)\n        else:\n            print(n - b)\n    else:\n        print(0)", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    nums = list(map(int, input().split()))\n    mp = {}\n    mx = 0\n    for j in range(n):\n        x = nums[j]\n        if x not in mp:\n            mp[x] = 1\n        else:\n            mp[x] += 1\n        mx = max(mx, mp[x])\n    if n <= 2:\n        print(0)\n    else:\n        print(min(n - 2, n - mx))", "import sys\nfrom collections import deque\nimport math\nt = int(input())\nfor i in range(t):\n    while t > 0:\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l = len(arr)\n        dict = {}\n        maxi = 0\n        if l == 1 or l == 2:\n            print(0)\n        else:\n            for i in arr:\n                if i not in dict:\n                    dict[i] = 1\n                else:\n                    dict[i] += 1\n                maxi = max(maxi, dict[i])\n            if maxi == 1:\n                print(l - 2)\n            else:\n                print(l - maxi)\n        t -= 1"]