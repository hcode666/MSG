["MOD = 1000000007\n\ndef fill_nks(N, mod):\n    nd = [[0 for j in range(N + 1)] for i in range(N + 1)]\n    for i in range(N + 1):\n        nd[i][0] = 1\n        nd[i][1] = 1\n    for n in range(1, N + 1):\n        for k in range(2, n + 1):\n            nd[n][k] = (nd[n - 1][k - 1] + k * nd[n - 1][k]) % mod\n    return nd\nKS = fill_nks(1000, MOD)\n\ndef dishes_exact_k(n, mpk, k, mod):\n    return mpk * KS[n][k] % mod\n\ndef dishes(n, m, k, mod):\n    k = min(n, m, k)\n    res = 0\n    mk = 1\n    for i in range(1, k + 1):\n        mk = mk * (m - i + 1) % mod\n        kdishes = dishes_exact_k(n, mk, i, mod)\n        res = (res + kdishes) % mod\n    return res\ntest_case = int(input())\nfor test in range(test_case):\n    (n, m, k) = map(int, input().split())\n    print(dishes(n, m, k, MOD))", "MOD = 1000000007\n\ndef fill_nks(N, mod):\n    nd = [[0 for j in range(N + 1)] for i in range(N + 1)]\n    for i in range(N + 1):\n        nd[i][0] = 1\n        nd[i][1] = 1\n    for n in range(1, N + 1):\n        for k in range(2, n + 1):\n            nd[n][k] = (nd[n - 1][k - 1] + k * nd[n - 1][k]) % mod\n    return nd\nKS = fill_nks(1000, MOD)\n\ndef dishes_exact_k(n, mpk, k, mod):\n    return mpk * KS[n][k] % mod\n\ndef dishes(n, m, k, mod):\n    k = min(n, m, k)\n    res = 0\n    mk = 1\n    for i in range(1, k + 1):\n        mk = mk * (m - i + 1) % mod\n        kdishes = dishes_exact_k(n, mk, i, mod)\n        res = (res + kdishes) % mod\n    return res\ntest_case = int(input())\nfor test in range(test_case):\n    (n, m, k) = map(int, input().split())\n    print(dishes(n, m, k, MOD))", "class Sol:\n\n    @staticmethod\n    def solver():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSol.solver()", "class Sol:\n\n    @staticmethod\n    def solver():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSol.solver()", "class Sol:\n\n    @staticmethod\n    def solver():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSol.solver()", "MOD = 1000000007\n\ndef fill_nks(N, mod):\n    nks = [[0 for j in range(N + 1)] for i in range(N + 1)]\n    for i in range(N + 1):\n        nks[i][0] = 1\n        nks[i][1] = 1\n    for n in range(1, N + 1):\n        for k in range(2, n + 1):\n            nks[n][k] = (nks[n - 1][k - 1] + k * nks[n - 1][k]) % mod\n    return nks\nNKS = fill_nks(1000, MOD)\n\ndef dishes_exact_k(n, mpk, k, mod):\n    return mpk * NKS[n][k] % mod\n\ndef dishes(n, m, k, mod):\n    k = min(n, m, k)\n    res = 0\n    mpk = 1\n    for i in range(1, k + 1):\n        mpk = mpk * (m - i + 1) % mod\n        kdishes = dishes_exact_k(n, mpk, i, mod)\n        res = (res + kdishes) % mod\n    return res\ntest_case = int(input())\nfor test in range(test_case):\n    (n, m, k) = map(int, input().split())\n    print(dishes(n, m, k, MOD))", "MOD = 1000000007\n\ndef fill_nks(N, mod):\n    nks = [[0 for j in range(N + 1)] for i in range(N + 1)]\n    for i in range(N + 1):\n        nks[i][0] = 1\n        nks[i][1] = 1\n    for n in range(1, N + 1):\n        for k in range(2, n + 1):\n            nks[n][k] = (nks[n - 1][k - 1] + k * nks[n - 1][k]) % mod\n    return nks\nNKS = fill_nks(1000, MOD)\n\ndef dishes_exact_k(n, mpk, k, mod):\n    return mpk * NKS[n][k] % mod\n\ndef dishes(n, m, k, mod):\n    k = min(n, m, k)\n    res = 0\n    mpk = 1\n    for i in range(1, k + 1):\n        mpk = mpk * (m - i + 1) % mod\n        kdishes = dishes_exact_k(n, mpk, i, mod)\n        res = (res + kdishes) % mod\n    return res\ntest_case = int(input())\nfor test in range(test_case):\n    (n, m, k) = map(int, input().split())\n    print(dishes(n, m, k, MOD))", "MOD = 1000000007\n\ndef fill_nks(N, mod):\n    nks = [[0 for j in range(N + 1)] for i in range(N + 1)]\n    for i in range(N + 1):\n        nks[i][0] = 1\n        nks[i][1] = 1\n    for n in range(1, N + 1):\n        for k in range(2, n + 1):\n            nks[n][k] = (nks[n - 1][k - 1] + k * nks[n - 1][k]) % mod\n    return nks\nNKS = fill_nks(1000, MOD)\n\ndef dishes_exact_k(n, mpk, k, mod):\n    return mpk * NKS[n][k] % mod\n\ndef dishes(n, m, k, mod):\n    k = min(n, m, k)\n    res = 0\n    mpk = 1\n    for i in range(1, k + 1):\n        mpk = mpk * (m - i + 1) % mod\n        kdishes = dishes_exact_k(n, mpk, i, mod)\n        res = (res + kdishes) % mod\n    return res\nt = int(input().strip())\nfor _ in range(t):\n    (n, m, k) = (int(i.strip()) for i in input().split())\n    print(dishes(n, m, k, MOD))", "mod = 1000000007\ndp = [[0] * 1001 for _ in range(1001)]\ndp[0][0] = 1\nfor day in range(1, 1001):\n    for dish in range(1, day + 1):\n        dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\nfor _ in range(int(input())):\n    (n, m, k) = list(map(int, input().split()))\n    k = m if k > m else n if k > n else k\n    factorial = 1\n    total = 0\n    for dishes in range(1, k + 1):\n        factorial = factorial * (m - dishes + 1) % mod\n        total = (factorial * dp[n][dishes] + total) % mod\n    print(total)", "mod = 1000000007\ndp = [[0] * 1001 for _ in range(1001)]\ndp[0][0] = 1\nfor day in range(1, 1001):\n    for dish in range(1, day + 1):\n        dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\ntest = int(input())\nfor t in range(test):\n    (n, m, k) = list(map(int, input().split(' ')))\n    k = m if k > m else n if k > n else k\n    factorial = 1\n    total = 0\n    for dishes in range(1, k + 1):\n        factorial = factorial * (m - dishes + 1) % mod\n        total = (factorial * dp[n][dishes] + total) % mod\n    print(total)", "mod = 1000000007\ndp = [[0] * 1001 for _ in range(1001)]\ndp[0][0] = 1\nfor day in range(1, 1001):\n    for dish in range(1, day + 1):\n        dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\ntest = int(input())\nfor t in range(test):\n    (n, m, k) = list(map(int, input().split(' ')))\n    k = m if k > m else n if k > n else k\n    factorial = 1\n    total = 0\n    for dishes in range(1, k + 1):\n        factorial = factorial * (m - dishes + 1) % mod\n        total = (factorial * dp[n][dishes] + total) % mod\n    print(total)", "mod = 1000000007\ndp = [[0] * 1001 for _ in range(1001)]\ndp[0][0] = 1\nfor day in range(1, 1001):\n    for dish in range(1, day + 1):\n        dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\ntest = int(input())\nfor t in range(test):\n    (n, m, k) = list(map(int, input().split(' ')))\n    k = m if k > m else n if k > n else k\n    factorial = 1\n    total = 0\n    for dishes in range(1, k + 1):\n        factorial = factorial * (m - dishes + 1) % mod\n        total = (factorial * dp[n][dishes] + total) % mod\n    print(total)", "mod = 1000000007\ndp = [[0] * 1001 for _ in range(1001)]\ndp[0][0] = 1\nfor day in range(1, 1001):\n    for dish in range(1, day + 1):\n        dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\ntest = int(input())\nfor t in range(test):\n    (n, m, k) = list(map(int, input().split(' ')))\n    k = m if k > m else n if k > n else k\n    factorial = 1\n    total = 0\n    for dishes in range(1, k + 1):\n        factorial = factorial * (m - dishes + 1) % mod\n        total = (factorial * dp[n][dishes] + total) % mod\n    print(total)", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            k = m if k > m else n if k > n else k\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            if k > m:\n                k = m\n            if k > n:\n                k = n\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            if k > m:\n                k = m\n            if k > n:\n                k = n\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            if k > m:\n                k = m\n            if k > n:\n                k = n\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            if k > m:\n                k = m\n            if k > n:\n                k = n\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            if k > m:\n                k = m\n            if k > n:\n                k = n\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()", "class Solution:\n\n    @staticmethod\n    def worker():\n        T = int(input())\n        mod = 1000000007\n        dp = [[0] * 1001 for _ in range(1001)]\n        dp[0][0] = 1\n        for day in range(1, 1001):\n            for dish in range(1, day + 1):\n                dp[day][dish] = (dp[day - 1][dish - 1] + dp[day - 1][dish] * dish) % mod\n        while T:\n            T -= 1\n            (n, m, k) = list(map(int, input().split(' ')))\n            if k > m:\n                k = m\n            if k > n:\n                k = n\n            factorial = 1\n            total = 0\n            for dishes in range(1, k + 1):\n                factorial = factorial * (m - dishes + 1) % mod\n                total = (factorial * dp[n][dishes] + total) % mod\n            print(total)\nSolution.worker()"]