["t = int(input())\nfor _ in range(t):\n    (r, c, k) = map(int, input().split())\n    a = min(8, r + k) - max(1, r - k)\n    b = min(8, c + k) - max(1, c - k)\n    print((a + 1) * (b + 1))", "t = int(input())\nfor _ in range(t):\n    (R, C, K) = [int(x) for x in input().split()]\n    up = min(8, R + K) - max(1, R - K)\n    lr = min(8, C + K) - max(1, C - K)\n    print((up + 1) * (lr + 1))", "t = int(input())\nfor _ in range(t):\n    (a, b, c) = map(int, input().split())\n    x = min(8, a + c) - max(1, a - c)\n    y = min(8, b + c) - max(1, b - c)\n    print((x + 1) * (y + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    a = min(8, r + k) - max(1, r - k)\n    b = min(8, c + k) - max(1, c - k)\n    print((a + 1) * (b + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    a = min(8, r + k) - max(1, r - k)\n    b = min(8, c + k) - max(1, c - k)\n    print((a + 1) * (b + 1))", "t = int(input())\nfor _ in range(t):\n    (r, c, k) = map(int, input().strip().split())\n    l = 0\n    b = 0\n    if r + k > 8:\n        a = r + k - 8\n        l += k - a\n    else:\n        l += k\n    if r - k < 1:\n        a = 1 - (r - k)\n        l += k - a\n    else:\n        l += k\n    if c + k > 8:\n        a = c + k - 8\n        b += k - a\n    else:\n        b += k\n    if c - k < 1:\n        a = 1 - (c - k)\n        b += k - a\n    else:\n        b += k\n    print((l + 1) * (b + 1))", "def moves(x, y, k):\n    if k < 0 or x < 1 or y < 1 or (x > 8) or (y > 8):\n        return 0\n    (u, d) = (x - k, x + k)\n    (l, r) = (y - k, y + k)\n    if u < 1:\n        u = 1\n    if d > 8:\n        d = 8\n    if l < 1:\n        l = 1\n    if r > 8:\n        r = 8\n    a = (d - u + 1) * (r - l + 1)\n    return a\nt = int(input())\nwhile t:\n    t -= 1\n    (x, y, k) = map(int, input().split())\n    print(moves(x, y, k))", "def moves(x, y, k):\n    if k < 0 or x < 1 or y < 1 or (x > 8) or (y > 8):\n        return 0\n    (u, d) = (x - k, x + k)\n    (l, r) = (y - k, y + k)\n    if u < 1:\n        u = 1\n    if d > 8:\n        d = 8\n    if l < 1:\n        l = 1\n    if r > 8:\n        r = 8\n    a = (d - u + 1) * (r - l + 1)\n    return a\nt = int(input())\nwhile t:\n    t -= 1\n    (x, y, k) = map(int, input().split())\n    print(moves(x, y, k))", "def f(r, c, k):\n    olist = []\n    dx = [-1, -1, -1, 0, 0, 1, 1, 1]\n    dy = [-1, 0, 1, -1, 1, -1, 0, 1]\n    for i in range(0, 8):\n        ilist = []\n        for j in range(0, 8):\n            ilist.append(0)\n        olist.append(ilist)\n    pos = []\n    ans = 1\n    pos.append([r - 1, c - 1])\n    olist[r - 1][c - 1] = 1\n    while len(pos) and k > 0:\n        cnt = len(pos)\n        while cnt > 0:\n            (i, j) = pos[0]\n            pos = pos[1:]\n            for l in range(0, 8):\n                ni = i + dx[l]\n                nj = j + dy[l]\n                if ni >= 0 and nj >= 0 and (ni < 8) and (nj < 8) and (olist[ni][nj] == 0):\n                    ans += 1\n                    olist[ni][nj] = 1\n                    pos.append([ni, nj])\n            cnt -= 1\n        k -= 1\n    return ans\nt = int(input())\nfor i in range(0, t):\n    (r, c, k) = list(map(int, input().split()))\n    print(f(r, c, k))", "l = []\ncur = []\nfor i in range(8):\n    a = []\n    for j in range(8):\n        a.append(0)\n    l.append(a)\n    cur.append(a)\n\ndef der(r, c, x, y, k):\n    if k <= 0 or r < 0 or c < 0 or (c > 7) or (r > 7):\n        return\n    else:\n        if r == x and c == y:\n            l[r][c + 1] = 1\n            der(r, c + 1, x, y, k - 1)\n            l[r + 1][c] = 1\n            der(r + 1, c, x, y, k - 1)\n            l[r + 1][c + 1] = 1\n            der(r + 1, c + 1, x, y, k - 1)\n            l[r - 1][c] = 1\n            der(r - 1, c, x, y, k - 1)\n            l[r - 1][c + 1] = 1\n            der(r - 1, c + 1, x, y, k - 1)\n            l[r - 1][c - 1] = 1\n            der(r - 1, c - 1, x, y, k - 1)\n            l[r][c - 1] = 1\n            der(r, c - 1, x, y, k - 1)\n            l[r + 1][c - 1] = 1\n            der(r + 1, c - 1, x, y, k - 1)\n        if r == x and c > y:\n            l[r][c + 1] = 1\n            der(r, c + 1, x, y, k - 1)\n        if r == x and c < y:\n            l[r][c - 1] = 1\n            der(r, c - 1, x, y, k - 1)\n        if c == y and r > x:\n            l[r + 1][c] = 1\n            der(r + 1, c, x, y, k - 1)\n        if c == y and r < x:\n            l[r - 1][c] = 1\n            der(r - 1, c, x, y, k - 1)\n        if c > y and r > x:\n            l[r][c + 1] = 1\n            der(r, c + 1, x, y, k - 1)\n            l[r + 1][c] = 1\n            der(r + 1, c, x, y, k - 1)\n            l[r + 1][c + 1] = 1\n            der(r + 1, c + 1, x, y, k - 1)\n        if c > y and r < x:\n            l[r][c + 1] = 1\n            der(r, c + 1, x, y, k - 1)\n            l[r - 1][c] = 1\n            der(r - 1, c, x, y, k - 1)\n            l[r - 1][c + 1] = 1\n            der(r - 1, c + 1, x, y, k - 1)\n        if c < y and r < x:\n            l[r - 1][c] = 1\n            der(r - 1, c, x, y, k - 1)\n            l[r - 1][c - 1] = 1\n            der(r - 1, c - 1, x, y, k - 1)\n            l[r][c - 1] = 1\n            der(r, c - 1, x, y, k - 1)\n        if c < y and r > x:\n            l[r + 1][c] = 1\n            der(r + 1, c, x, y, k - 1)\n            l[r + 1][c - 1] = 1\n            der(r + 1, c - 1, x, y, k - 1)\n            l[r][c - 1] = 1\n            der(r, c - 1, x, y, k - 1)\n\ndef newder(r, c, k):\n    if k < 0 or r < 0 or c < 0 or (c > 7) or (r > 7):\n        return\n    else:\n        l[r][c] = 1\n        newder(r, c + 1, k - 1)\n        newder(r + 1, c, k - 1)\n        newder(r + 1, c + 1, k - 1)\n        newder(r - 1, c, k - 1)\n        newder(r - 1, c + 1, k - 1)\n        newder(r - 1, c - 1, k - 1)\n        newder(r, c - 1, k - 1)\n        newder(r + 1, c - 1, k - 1)\nfor _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    r = r - 1\n    c = c - 1\n    ans = (min(7, c + k) - max(0, c - k) + 1) * (min(7, r + k) - max(0, r - k) + 1)\n    print(ans)", "def f(r, c, k):\n    olist = []\n    dx = [-1, -1, -1, 0, 0, 1, 1, 1]\n    dy = [-1, 0, 1, -1, 1, -1, 0, 1]\n    for i in range(0, 8):\n        ilist = []\n        for j in range(0, 8):\n            ilist.append(0)\n        olist.append(ilist)\n    pos = []\n    ans = 1\n    pos.append([r - 1, c - 1])\n    olist[r - 1][c - 1] = 1\n    while len(pos) and k > 0:\n        cnt = len(pos)\n        while cnt > 0:\n            (i, j) = pos[0]\n            pos = pos[1:]\n            for l in range(0, 8):\n                ni = i + dx[l]\n                nj = j + dy[l]\n                if ni >= 0 and nj >= 0 and (ni < 8) and (nj < 8) and (olist[ni][nj] == 0):\n                    ans += 1\n                    olist[ni][nj] = 1\n                    pos.append([ni, nj])\n            cnt -= 1\n        k -= 1\n    return ans\nt = int(input())\nfor i in range(0, t):\n    (r, c, k) = list(map(int, input().split()))\n    print(f(r, c, k))", "def f(r, c, k):\n    olist = []\n    dx = [-1, -1, -1, 0, 0, 1, 1, 1]\n    dy = [-1, 0, 1, -1, 1, -1, 0, 1]\n    for i in range(0, 8):\n        ilist = []\n        for j in range(0, 8):\n            ilist.append(0)\n        olist.append(ilist)\n    pos = []\n    ans = 1\n    pos.append([r - 1, c - 1])\n    olist[r - 1][c - 1] = 1\n    while len(pos) and k > 0:\n        cnt = len(pos)\n        while cnt > 0:\n            (i, j) = pos[0]\n            pos = pos[1:]\n            for l in range(0, 8):\n                ni = i + dx[l]\n                nj = j + dy[l]\n                if ni >= 0 and nj >= 0 and (ni < 8) and (nj < 8) and (olist[ni][nj] == 0):\n                    ans += 1\n                    olist[ni][nj] = 1\n                    pos.append([ni, nj])\n            cnt -= 1\n        k -= 1\n    return ans\nt = int(input())\nfor i in range(0, t):\n    (r, c, k) = list(map(int, input().split()))\n    print(f(r, c, k))", "def f(r, c, k):\n    olist = []\n    dx = [-1, -1, -1, 0, 0, 1, 1, 1]\n    dy = [-1, 0, 1, -1, 1, -1, 0, 1]\n    for i in range(0, 8):\n        ilist = []\n        for j in range(0, 8):\n            ilist.append(0)\n        olist.append(ilist)\n    pos = []\n    ans = 1\n    pos.append([r - 1, c - 1])\n    olist[r - 1][c - 1] = 1\n    while len(pos) and k > 0:\n        cnt = len(pos)\n        while cnt > 0:\n            (i, j) = pos[0]\n            pos = pos[1:]\n            for l in range(0, 8):\n                ni = i + dx[l]\n                nj = j + dy[l]\n                if ni >= 0 and nj >= 0 and (ni < 8) and (nj < 8) and (olist[ni][nj] == 0):\n                    ans += 1\n                    olist[ni][nj] = 1\n                    pos.append([ni, nj])\n            cnt -= 1\n        k -= 1\n    return ans\nt = int(input())\nfor i in range(0, t):\n    (r, c, k) = list(map(int, input().split()))\n    print(f(r, c, k))", "def f(r, c, k):\n    olist = []\n    dx = [-1, -1, -1, 0, 0, 1, 1, 1]\n    dy = [-1, 0, 1, -1, 1, -1, 0, 1]\n    for i in range(0, 8):\n        ilist = []\n        for j in range(0, 8):\n            ilist.append(0)\n        olist.append(ilist)\n    pos = []\n    ans = 1\n    pos.append([r - 1, c - 1])\n    olist[r - 1][c - 1] = 1\n    while len(pos) and k > 0:\n        cnt = len(pos)\n        while cnt > 0:\n            (i, j) = pos[0]\n            pos = pos[1:]\n            for l in range(0, 8):\n                ni = i + dx[l]\n                nj = j + dy[l]\n                if ni >= 0 and nj >= 0 and (ni < 8) and (nj < 8) and (olist[ni][nj] == 0):\n                    ans += 1\n                    olist[ni][nj] = 1\n                    pos.append([ni, nj])\n            cnt -= 1\n        k -= 1\n    return ans\nt = int(input())\nfor i in range(0, t):\n    (r, c, k) = list(map(int, input().split()))\n    print(f(r, c, k))", "n = int(input())\nfor i in range(n):\n    lst = list(map(int, input().split()))\n    r = lst[0]\n    c = lst[1]\n    k = lst[2]\n    r1 = max(1, r - k)\n    r2 = min(8, r + k)\n    c1 = max(1, c - k)\n    c2 = min(8, c + k)\n    ans = r2 - r1 + 1\n    ans1 = c2 - c1 + 1\n    print(ans * ans1)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "T = int(input())\nwhile T > 0:\n    (R, C, K) = list(map(int, input().split()))\n    count = 0\n    i = R - K\n    while i <= R + K:\n        j = C - K\n        while j <= C + K:\n            if 0 < i < 9 and 0 < j < 9:\n                count += 1\n            j += 1\n        i += 1\n    print(count)\n    T -= 1", "T = int(input())\nwhile T > 0:\n    (R, C, K) = list(map(int, input().split()))\n    count = 0\n    i = R - K\n    while i <= R + K:\n        j = C - K\n        while j <= C + K:\n            if 0 < i < 9 and 0 < j < 9:\n                count += 1\n            j += 1\n        i += 1\n    print(count)\n    T -= 1", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    visited = []\n    g = [[None for i in range(8)] for j in range(8)]\n    ans = 0\n    for i in range(r - k, r + k + 1):\n        for j in range(c - k, c + k + 1):\n            if 0 < i < 9 and 0 < j < 9:\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    (a, b, c, d) = (max(1, r - k), min(8, r + k), max(1, c - k), min(8, c + k))\n    print((b - a + 1) * (d - c + 1))", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    x1 = 8 if r + k > 8 else r + k\n    y1 = 8 if c + k > 8 else c + k\n    x2 = 1 if r - k < 1 else r - k\n    y2 = 1 if c - k < 1 else c - k\n    print((x1 - x2 + 1) * (y1 - y2 + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    ans = 0\n    for i in range(r - k, r + k + 1):\n        for j in range(c - k, c + k + 1):\n            if 0 < i < 9 and 0 < j < 9:\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    nb = 0\n    for i in range(r - k, r + k + 1):\n        for j in range(c - k, c + k + 1):\n            if 0 < i < 9 and 0 < j < 9:\n                nb += 1\n    print(nb)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    ans = 0\n    for i in range(r - k, r + k + 1):\n        for j in range(c - k, c + k + 1):\n            if 0 < i < 9 and 0 < j < 9:\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    ans = 0\n    for i in range(r - k, r + k + 1):\n        for j in range(c - k, c + k + 1):\n            if 0 < i < 9 and 0 < j < 9:\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (Y, X, K) = map(int, input().split())\n    l = X - K if X - K > 0 else 1\n    r = X + K if X + K < 9 else 8\n    u = Y - K if Y - K > 0 else 1\n    d = Y + K if Y + K < 9 else 8\n    print((r - l + 1) * (d - u + 1))", "def check(i, j):\n    if i < 0 or i > 7 or j < 0 or (j > 7):\n        return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (r, c, k) = list(map(int, input().split()))\n    chess = [[0 for i in range(8)] for j in range(8)]\n    chess[r - 1][c - 1] = 1\n    q = [(r - 1, c - 1)]\n    d = [(1, 0), (0, 1), (0, -1), (-1, 0), (-1, -1), (-1, 1), (1, -1), (1, 1)]\n    while k:\n        n = len(q)\n        while n:\n            (i, j) = q.pop(0)\n            for (y, z) in d:\n                (ni, nj) = (i + y, j + z)\n                if check(ni, nj) and chess[ni][nj] == 0:\n                    chess[ni][nj] = 1\n                    q.append((ni, nj))\n            n -= 1\n        k -= 1\n    count = 0\n    for i in range(8):\n        for j in range(8):\n            if chess[i][j]:\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    minr = max(1, r - k)\n    maxr = min(8, r + k)\n    minc = max(1, c - k)\n    maxc = min(8, c + k)\n    print((maxr - minr + 1) * (maxc - minc + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    if r - k >= 1:\n        y1 = r - k\n    else:\n        y1 = 1\n    if r + k <= 8:\n        y2 = r + k\n    else:\n        y2 = 8\n    if c + k <= 8:\n        x2 = c + k\n    else:\n        x2 = 8\n    if c - k > 1:\n        x1 = c - k\n    else:\n        x1 = 1\n    print((y2 - y1 + 1) * (x2 - x1 + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    if r - k >= 1:\n        y1 = r - k\n    else:\n        y1 = 1\n    if r + k <= 8:\n        y2 = r + k\n    else:\n        y2 = 8\n    if c + k <= 8:\n        x2 = c + k\n    else:\n        x2 = 8\n    if c - k > 1:\n        x1 = c - k\n    else:\n        x1 = 1\n    print((y2 - y1 + 1) * (x2 - x1 + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    r1 = max(r - k, 1)\n    r2 = min(r + k, 8)\n    c1 = max(c - k, 1)\n    c2 = min(c + k, 8)\n    print((r2 - r1 + 1) * (c2 - c1 + 1))", "for _ in range(int(input())):\n    (Y, X, K) = map(int, input().split())\n    l = X - K if X - K > 0 else 1\n    r = X + K if X + K < 9 else 8\n    u = Y - K if Y - K > 0 else 1\n    d = Y + K if Y + K < 9 else 8\n    print((r - l + 1) * (d - u + 1))", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    v1 = max(r - k, 1)\n    v2 = min(8, r + k)\n    h1 = max(c - k, 1)\n    h2 = min(c + k, 8)\n    print((v2 - v1 + 1) * (h2 - h1 + 1))", "for tc in range(1, int(input()) + 1):\n    if tc:\n        (x, y, k) = list(map(int, input().split()))\n        b2 = min(x + k, 8)\n        b1 = max(x - k, 1)\n        h2 = min(y + k, 8)\n        h1 = max(y - k, 1)\n        length = b2 - b1 + 1\n        breadth = h2 - h1 + 1\n        print(length * breadth)", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    v1 = max(r - k, 1)\n    v2 = min(8, r + k)\n    h1 = max(c - k, 1)\n    h2 = min(c + k, 8)\n    print((v2 - v1 + 1) * (h2 - h1 + 1))", "T = int(input(''))\nfor t in range(T):\n    a = list(map(int, input('').strip().split()))\n    (r, c, k) = (a[0], a[1], a[2])\n    rtl = max(r - k, 1)\n    ctl = max(c - k, 1)\n    rbr = min(r + k, 8)\n    cbr = min(c + k, 8)\n    print((rbr - rtl + 1) * (cbr - ctl + 1))", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    v1 = max(r - k, 1)\n    v2 = min(8, r + k)\n    h1 = max(c - k, 1)\n    h2 = min(c + k, 8)\n    print((v2 - v1 + 1) * (h2 - h1 + 1))", "for tc in range(1, int(input()) + 1):\n    if tc:\n        (x, y, k) = list(map(int, input().split()))\n        b2 = min(x + k, 8)\n        b1 = max(x - k, 1)\n        h2 = min(y + k, 8)\n        h1 = max(y - k, 1)\n        length = b2 - b1 + 1\n        breadth = h2 - h1 + 1\n        print(length * breadth)", "from collections import deque\nt = int(input())\nwhile t:\n    t -= 1\n    res = 1\n    (r, c, k) = map(int, input().split())\n    (n, m) = (8, 8)\n    q = deque([(r, c)])\n    s = set()\n    s.add((r, c))\n    cnt = 1\n    dist = [[-1, -1], [-1, 0], [-1, 1], [0, -1], [0, 1], [1, -1], [1, 0], [1, 1]]\n\n    def isSafe(a, b):\n        if a >= 1 and a <= 8 and (b >= 1) and (b <= 8):\n            return True\n        return False\n    while q and k != 0:\n        if k != 0:\n            for _ in range(cnt):\n                temp = 0\n                (x, y) = q.popleft()\n                for (a, b) in dist:\n                    if (x + a >= 1 and x + a <= 8 and (y + b >= 1) and (y + b <= 8)) and (x + a, y + b) not in s:\n                        s.add((x + a, y + b))\n                        res += 1\n                        q.append((x + a, y + b))\n            k -= 1\n            cnt = len(q)\n    print(res)", "nbofcases = int(input())\nnbofblocks = 0\nfor i in range(nbofcases):\n    (R, C, K) = [int(x) for x in input().split()]\n    right = R + K\n    left = R - K\n    up = C - K\n    down = C + K\n    if up <= 0:\n        up = 1\n    if down > 8:\n        down = 8\n    if right > 8:\n        right = 8\n    if left <= 0:\n        left = 1\n    w = right - left + 1\n    l = down - up + 1\n    print(w * l)", "nbofcases = int(input())\nnbofblocks = 0\nfor i in range(nbofcases):\n    (R, C, K) = [int(x) for x in input().split()]\n    right = R + K\n    left = R - K\n    up = C - K\n    down = C + K\n    if up <= 0:\n        up = 1\n    if down > 8:\n        down = 8\n    if right > 8:\n        right = 8\n    if left <= 0:\n        left = 1\n    w = right - left + 1\n    l = down - up + 1\n    print(w * l)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    left = c - k\n    if left <= 0:\n        left = 1\n    right = c + k\n    if right > 8:\n        right = 8\n    top = r - k\n    if top <= 0:\n        top = 1\n    bottom = r + k\n    if bottom > 8:\n        bottom = 8\n    length = bottom - top + 1\n    width = right - left + 1\n    print(length * width)", "import math\nt = int(input())\nfor j in range(t):\n    (r, c, k) = list(map(int, input().split()))\n    b2 = min(r + k, 8)\n    b1 = max(r - k, 1)\n    h2 = min(c + k, 8)\n    h1 = max(c - k, 1)\n    length = b2 - b1 + 1\n    breadth = h2 - h1 + 1\n    print(length * breadth)", "t = int(input())\nfor iui in range(t):\n    arr = list(map(int, input().split()))\n    start = [arr[0] - 1, arr[1] - 1]\n    grid = [[0 for k in range(8)] for l in range(8)]\n    m = arr[2]\n    count = 0\n    previous = [start]\n    current = []\n    for o in range(m):\n        for item in previous:\n            for i in [-1, 0, 1]:\n                for j in [-1, 0, 1]:\n                    if not (0 <= item[0] + i <= 7 and 0 <= item[1] + j <= 7):\n                        continue\n                    if grid[item[0] + i][item[1] + j] == 0:\n                        grid[item[0] + i][item[1] + j] = 1\n                        current.append([item[0] + i, item[1] + j])\n                        count += 1\n        previous = current[:]\n        current.clear()\n    print(count)", "t = int(input())\nfor j in range(t):\n    (r, c, k) = map(int, input().split())\n    b1 = min(r + k, 8)\n    b2 = max(r - k, 1)\n    h1 = min(c + k, 8)\n    h2 = max(c - k, 1)\n    print((b1 - b2 + 1) * (h1 - h2 + 1))", "from math import gcd, sqrt, ceil, floor, log10, log2\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(1000000000.0) + 7\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\nenum = lambda itr: enumerate(itr)\n\ndef toposort(graph, n):\n    degree = [0] * n\n    for node in graph:\n        for adj in graph[node]:\n            degree[adj] += 1\n    bfs_queue = [node for node in range(n) if not degree[node]]\n    for node in bfs_queue:\n        for adj in graph[node]:\n            degree[adj] -= 1\n            if not degree[adj]:\n                bfs_queue.append(adj)\n    return (bfs_queue, degree)\n\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for adj in graph[node]:\n        if adj in visited:\n            continue\n        dfs(graph, adj, visited)\n\ndef solve(*args, **kwargs):\n    (r, c, k) = args[0]\n    visited = set()\n    q = deque([(r - 1, c - 1, k)])\n    res = k == 1\n    while q:\n        (x, y, cnt) = q.popleft()\n        if not cnt:\n            continue\n        for (dx, dy) in [(1, 0), (0, 1), (-1, 0), (0, -1), (1, 1), (1, -1), (-1, 1), (-1, -1)]:\n            (nx, ny) = (x + dx, y + dy)\n            if 0 <= nx < 8 and 0 <= ny < 8 and ((nx, ny) not in visited):\n                visited.add((nx, ny))\n                q.append((nx, ny, cnt - 1))\n                res += 1\n    return res\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        arg3 = inp_vars(int, SPACE)\n        res = solve(*(arg3,))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep=' ')\n        else:\n            print(res)\nmain()", "n = int(input())\nwhile n:\n    (x, y, k) = map(int, input().split())\n    count = 1\n    l = [[x - 1, y - 1]]\n    while k:\n        prev = 0\n        for i in range(prev, len(l)):\n            x = l[i][0]\n            y = l[i][1]\n            temp = [[x - 1, y - 1], [x - 1, y], [x - 1, y + 1], [x, y - 1], [x, y + 1], [x + 1, y - 1], [x + 1, y], [x + 1, y + 1]]\n            prev = len(l)\n            for i in temp:\n                if i not in l:\n                    if i[0] >= 0 and i[0] < 8 and (i[1] >= 0) and (i[1] < 8):\n                        l.append(i)\n        if len(l) == 64:\n            break\n        k -= 1\n    print(len(l))\n    n -= 1", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    b2 = min(r + k, 8)\n    b1 = max(r - k, 1)\n    h2 = min(c + k, 8)\n    h1 = max(c - k, 1)\n    length = b2 - b1 + 1\n    breadth = h2 - h1 + 1\n    print(length * breadth)", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    b2 = min(r + k, 8)\n    b1 = max(r - k, 1)\n    h2 = min(c + k, 8)\n    h1 = max(c - k, 1)\n    length = b2 - b1 + 1\n    breadth = h2 - h1 + 1\n    print(length * breadth)", "tn = int(input())\nfor _ in range(tn):\n    (r, c, k) = map(int, input().split())\n    l1 = min(8, c + k) - max(1, c - k) + 1\n    l2 = min(8, r + k) - max(1, r - k) + 1\n    print(l1 * l2)", "for tc in range(1, int(input()) + 1):\n    if tc:\n        (x, y, k) = list(map(int, input().split()))\n        b2 = min(x + k, 8)\n        b1 = max(x - k, 1)\n        h2 = min(y + k, 8)\n        h1 = max(y - k, 1)\n        length = b2 - b1 + 1\n        breadth = h2 - h1 + 1\n        print(length * breadth)", "for tc in range(1, int(input()) + 1):\n    if tc:\n        (x, y, k) = list(map(int, input().split()))\n        b2 = min(x + k, 8)\n        b1 = max(x - k, 1)\n        h2 = min(y + k, 8)\n        h1 = max(y - k, 1)\n        length = b2 - b1 + 1\n        breadth = h2 - h1 + 1\n        print(length * breadth)", "for tc in range(1, int(input()) + 1):\n    if tc:\n        (x, y, k) = list(map(int, input().split()))\n        b2 = min(x + k, 8)\n        b1 = max(x - k, 1)\n        h2 = min(y + k, 8)\n        h1 = max(y - k, 1)\n        length = b2 - b1 + 1\n        breadth = h2 - h1 + 1\n        print(length * breadth)", "for tc in range(1, int(input()) + 1):\n    if tc:\n        ans = 0\n        (x, y, k) = list(map(int, input().split()))\n        for i in range(1, 8 + 1):\n            for j in range(1, 8 + 1):\n                if max(abs(i - x), abs(j - y)) <= k:\n                    ans += 1\n        print(ans)", "for tc in range(1, int(input()) + 1):\n    if tc:\n        (x, y, k) = list(map(int, input().split()))\n        b2 = min(x + k, 8)\n        b1 = max(x - k, 1)\n        h2 = min(y + k, 8)\n        h1 = max(y - k, 1)\n        length = b2 - b1 + 1\n        breadth = h2 - h1 + 1\n        print(length * breadth)", "def squaresInRange(r, c, k):\n    topLeft = [min(8, r + k), max(1, c - k)]\n    bottomRight = [max(1, r - k), min(8, c + k)]\n    return (abs(topLeft[0] - bottomRight[0]) + 1) * (abs(topLeft[1] - bottomRight[1]) + 1)\ntestCount = int(input())\nfor i in range(testCount):\n    (r, c, k) = [int(x) for x in input().split()]\n    print(squaresInRange(r, c, k))", "def squaresInRange(r, c, k):\n    topLeft = [min(8, r + k), max(1, c - k)]\n    bottomRight = [max(1, r - k), min(8, c + k)]\n    return (abs(topLeft[0] - bottomRight[0]) + 1) * (abs(topLeft[1] - bottomRight[1]) + 1)\ntestCount = int(input())\nfor i in range(testCount):\n    (r, c, k) = [int(x) for x in input().split()]\n    print(squaresInRange(r, c, k))", "for t in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    res = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if max(abs(i - r), abs(j - c)) <= k:\n                res += 1\n    print(res)", "def read_input():\n    t = int(input())\n    test_cases = []\n    for i in range(t):\n        test_case = [int(item) for item in input().split()]\n        test_cases.append(test_case)\n    return (t, test_cases)\n\ndef solve_cases(t, test_cases):\n    for (r, c, k) in test_cases:\n        print(count_squares(r, c, k))\n\ndef count_squares(r, c, k):\n    visited = set()\n    to_visit = {(r, c)}\n    for i in range(k):\n        to_visit_next = set()\n        for (x, y) in to_visit:\n            visited.add((x, y))\n            for h in range(-1, 2):\n                new_x = x + h\n                if new_x > 0 and new_x < 9:\n                    for k in range(-1, 2):\n                        new_y = y + k\n                        new_visited = (new_x, new_y)\n                        if new_y > 0 and new_y < 9 and (new_visited not in visited):\n                            to_visit_next.add(new_visited)\n        to_visit = to_visit_next\n    return len(visited.union(to_visit))\n(t, test_cases) = read_input()\nsolve_cases(t, test_cases)", "t = int(input())\nwhile t > 0:\n    count = 1\n    (r, c, k) = map(int, input().split(' '))\n    l = min(8, r + k) - max(1, r - k) + 1\n    b = min(8, c + k) - max(1, c - k) + 1\n    print(l * b)\n    t -= 1", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    ans = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if max(abs(i - r), abs(j - c)) <= k:\n                ans += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (r, c, k) = map(int, input().split())\n    count = 0\n    for i in range(-k, k + 1):\n        for j in range(-k, k + 1):\n            x = r + i\n            y = c + j\n            if x >= 1 and x <= 8 and (y >= 1) and (y <= 8):\n                count += 1\n    print(count)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (r, c, k) = map(int, input().split())\n    cnt = 0\n    for i in range(-k, k + 1):\n        for j in range(-k, k + 1):\n            x = r + i\n            y = c + j\n            if x >= 1 and x <= 8 and (y >= 1) and (y <= 8):\n                cnt += 1\n    print(cnt)", "import collections\n\ndef Helper(row, col, visited, k):\n    Q = collections.deque()\n    Q.append((row, col))\n    i = 0\n    s = 1\n    while len(Q) > 0 and k >= 0:\n        if i < s:\n            i += 1\n            (row, col) = Q.popleft()\n            if row < 0 or col < 0 or row >= 8 or (col >= 8):\n                continue\n            if visited[row][col]:\n                continue\n            visited[row][col] = 1\n            Q.append((row - 1, col))\n            Q.append((row + 1, col))\n            Q.append((row, col - 1))\n            Q.append((row, col + 1))\n            Q.append((row - 1, col - 1))\n            Q.append((row - 1, col + 1))\n            Q.append((row + 1, col - 1))\n            Q.append((row + 1, col + 1))\n        else:\n            i = 0\n            s = len(Q)\n            k -= 1\n    return\n\ndef function(R, C, K):\n    visited = [[0 for i in range(8)] for j in range(8)]\n    Helper(R - 1, C - 1, visited, K)\n    ans = sum([sum(x) for x in visited])\n    return ans\n\ndef main():\n    T = int(input())\n    for index in range(T):\n        (R, C, K) = list(map(int, input().split(' ')))\n        val = function(R, C, K)\n        print(val)\nmain()", "t = int(input())\nfor _ in range(t):\n    (r, c, k) = list(map(int, input().split()))\n    dx = min(c + k, 8) - max(c - k, 1) + 1\n    dy = min(r + k, 8) - max(r - k, 1) + 1\n    print(dx * dy)", "t = int(input())\nfor _ in range(t):\n    (r, c, k) = list(map(int, input().split()))\n    dx = min(c + k, 8) - max(c - k, 1) + 1\n    dy = min(r + k, 8) - max(r - k, 1) + 1\n    print(dx * dy)", "def main():\n    T = int(input())\n    for counter in range(T):\n        (r, c, k) = map(int, input().split())\n        corner_points = [[min(r + k, 8), min(c + k, 8)], [min(r + k, 8), max(c - k, 1)], [max(r - k, 1), min(c + k, 8)], [max(r - k, 1), max(c - k, 1)]]\n        ans = abs(corner_points[0][1] - corner_points[1][1] + 1) * abs(corner_points[1][0] - corner_points[2][0] + 1)\n        print(ans)\nmain()", "t = int(input())\nfor _ in range(t):\n    (r, c, k) = map(int, input().split())\n    r = r - 1\n    c = c - 1\n    r_max = r + k if r + k < 8 else 7\n    c_max = c + k if c + k < 8 else 7\n    r_min = r - k if r - k >= 0 else 0\n    c_min = c - k if c - k >= 0 else 0\n    print((r_max - r_min + 1) * (c_max - c_min + 1))", "adj = [(1, 0), (1, 1), (0, 1), (-1, 1), (-1, 0), (-1, -1), (0, -1), (1, -1)]\nnum_test_cases = int(input())\nfor _ in range(num_test_cases):\n    (R, C, K) = [int(x) for x in input().split(' ')]\n    visited = set([(R, C)])\n    frontier = [(R, C, 1)]\n    while len(frontier) > 0:\n        (curr_r, curr_c, curr_k) = frontier.pop(0)\n        dk = curr_k + 1\n        for (adj_r, adj_c) in adj:\n            (dr, dc) = (curr_r + adj_r, curr_c + adj_c)\n            if dr < 1 or 8 < dr or dc < 1 or (8 < dc) or ((dr, dc) in visited):\n                continue\n            visited.add((dr, dc))\n            if dk <= K:\n                frontier.append((dr, dc, dk))\n    print(len(visited))", "T = int(input())\nfor _ in range(T):\n    (r, c, k) = map(int, input().split())\n    count = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if max(abs(r - i), abs(c - j)) <= k:\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    print((min(c + k, 8) - max(c - k, 1) + 1) * (min(r + k, 8) - max(r - k, 1) + 1))", "from queue import deque\nt = int(input())\nfor _ in range(t):\n    (r, c, k) = map(int, input().split())\n    r = r - 1\n    c = c - 1\n    direc = [(0, 0), (0, 1), (0, -1), (-1, 0), (1, 0), (1, 1), (-1, -1), (-1, 1), (1, -1)]\n    moves = [[0] * 8 for i in range(8)]\n    visited = set()\n    q = deque()\n    q.append((r, c))\n    while q:\n        (r, c) = q.popleft()\n        for d in direc:\n            ni = r + d[0]\n            nj = c + d[1]\n            if 0 <= ni <= 7 and 0 <= nj <= 7 and ((ni, nj) not in visited):\n                visited.add((ni, nj))\n                moves[ni][nj] = 1 + moves[r][c]\n                q.append((ni, nj))\n    cnt = 0\n    for i in range(len(moves)):\n        for j in range(len(moves[0])):\n            if moves[i][j] <= k + 1:\n                cnt += 1\n    print(cnt)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    print((min(c + k, 8) - max(c - k, 1) + 1) * (min(r + k, 8) - max(r - k, 1) + 1))", "for _ in range(int(input())):\n    (row, col, k) = map(int, input().split())\n    (l, r, u, d) = (0, 0, 0, 0)\n    d = row + k if row + k < 8 else 8\n    u = row - k if row - k > 0 else 1\n    r = col + k if col + k < 8 else 8\n    l = col - k if col - k > 0 else 1\n    print(abs(d - u + 1) * abs(r - l + 1))", "for _ in range(int(input())):\n    (row, col, k) = map(int, input().split())\n    (l, r, u, d) = (0, 0, 0, 0)\n    d = row + k if row + k < 8 else 8\n    u = row - k if row - k > 0 else 1\n    r = col + k if col + k < 8 else 8\n    l = col - k if col - k > 0 else 1\n    print(abs(d - u + 1) * abs(r - l + 1))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    top = max(1, r - k)\n    bot = min(8, r + k)\n    left = max(1, c - k)\n    rig = min(8, c + k)\n    p = bot - top + 1\n    q = rig - left + 1\n    m = p * q\n    print(m)", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    top = max(1, r - k)\n    bottom = min(8, r + k)\n    right = min(8, c + k)\n    left = max(1, c - k)\n    print((bottom - top + 1) * (right - left + 1))", "def solution(r, c, k):\n    ans = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if max(abs(r - i), abs(c - j)) <= k:\n                ans += 1\n    return ans\nt = int(input())\nfor _ in range(t):\n    (r, c, k) = [int(e) for e in input().split()]\n    print(solution(r, c, k))", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    q = [(r - 1, c - 1)]\n    tx = [-1, 1, 0, 0, 1, -1, 1, -1]\n    ty = [0, 0, 1, -1, 1, 1, -1, -1]\n    a = [[False for _ in range(8)] for _ in range(8)]\n    final = 0\n    while k >= 0 and q:\n        q.append(-1)\n        c = 0\n        while q[0] != -1:\n            t = q.pop(0)\n            a[t[0]][t[1]] = True\n            c += 1\n            for x in range(8):\n                txx = t[0] + tx[x]\n                tyy = t[1] + ty[x]\n                if 0 <= txx < 8 and 0 <= tyy < 8 and (a[txx][tyy] == False):\n                    q.append((txx, tyy))\n                    a[txx][tyy] = True\n        q.pop(0)\n        k -= 1\n        final += c\n    print(final)", "t = int(input())\nfor i in range(t):\n    (r, c, k) = map(int, input().split())\n    count = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if max(abs(i - r), abs(j - c)) <= k:\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (r, c, k) = list(map(int, input().split()))\n    count = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if max(abs(i - r), abs(j - c)) <= k:\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    moves = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if max(abs(i - r), abs(j - c)) <= k:\n                moves += 1\n    print(moves)", "for _ in range(int(input())):\n    (r, c, k) = map(int, input().split())\n    Row1 = max(r - k, 1)\n    Row2 = min(r + k, 8)\n    Col1 = max(c - k, 1)\n    Col2 = min(c + k, 8)\n    print((Row2 - Row1 + 1) * (Col2 - Col1 + 1))", "t = int(input())\nfor _ in range(t):\n    (r, c, k) = map(int, input().split())\n    sRow = max(r - k, 1)\n    eRow = min(r + k, 8)\n    sCol = max(c - k, 1)\n    eCol = min(c + k, 8)\n    print((eRow - sRow + 1) * (eCol - sCol + 1))", "t = int(input())\nfor i in range(t):\n    rck = list(map(int, input().split()))\n    r = rck[0]\n    c = rck[1]\n    k = rck[2]\n    if c - k < 1:\n        left = 1\n    else:\n        left = c - k\n    if c + k > 8:\n        right = 8\n    else:\n        right = c + k\n    if r - k < 1:\n        top = 1\n    else:\n        top = r - k\n    if r + k > 8:\n        bot = 8\n    else:\n        bot = r + k\n    print((right - left + 1) * (bot - top + 1))", "def isvalid(x, y):\n    if 1 <= x <= 8 and 1 <= y <= 8:\n        return True\n    else:\n        return False\nT = int(input())\nfor _ in range(T):\n    (r, c, k) = map(int, input().split())\n    xmoves = [1, 1, 1, 0, 0, -1, -1, -1]\n    ymoves = [1, 0, -1, 1, -1, 0, -1, 1]\n    distance = [[9 for i in range(9)] for i in range(9)]\n    visited = [[0 for _i in range(9)] for i in range(9)]\n    idx = 0\n    L = [(r, c)]\n    visited[r][c] = 1\n    distance[r][c] = 0\n    while idx < len(L):\n        current_distance = distance[L[idx][0]][L[idx][1]]\n        for i in range(8):\n            x = L[idx][0] + xmoves[i]\n            y = L[idx][1] + ymoves[i]\n            if isvalid(x, y):\n                if not visited[x][y]:\n                    visited[x][y] = 1\n                    L.append((x, y))\n                    distance[x][y] = current_distance + 1\n        idx += 1\n    ans = 0\n    for i in range(1, 9):\n        for j in range(1, 9):\n            if distance[i][j] <= k:\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c, m) = map(int, input().split())\n    t = r - m if r - m >= 1 else 1\n    b = r + m if r + m < 8 else 8\n    l = c - m if c - m >= 1 else 1\n    r = c + m if c + m < 8 else 8\n    print((b - t + 1) * (r - l + 1))"]