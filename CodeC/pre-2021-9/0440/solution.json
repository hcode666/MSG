["tests = int(input())\nfor i in range(tests):\n    (rows, cols) = map(int, input().split())\n    input_arr = []\n    rows_arr = []\n    ans = 0\n    for j in range(rows):\n        row = list(input())\n        input_arr.append(row)\n    for j in range(rows):\n        for k in range(cols):\n            if j - 2 >= 0 and j + 2 < rows and (k - 2 >= 0) and (k + 2 < cols) and (input_arr[j][k] == '^') and (input_arr[j][k - 1] == '^') and (input_arr[j][k - 2] == '^') and (input_arr[j][k + 1] == '^') and (input_arr[j][k + 2] == '^') and (input_arr[j - 1][k] == '^') and (input_arr[j - 2][k] == '^') and (input_arr[j + 1][k] == '^') and (input_arr[j + 2][k] == '^'):\n                ans += 1\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    (rows, cols) = map(int, input().split())\n    input_arr = []\n    rows_arr = []\n    ans = 0\n    for j in range(rows):\n        row = list(input())\n        input_arr.append(row)\n    for j in range(rows):\n        for k in range(cols):\n            if j - 2 >= 0 and j + 2 < rows and (k - 2 >= 0) and (k + 2 < cols) and (input_arr[j][k] == '^') and (input_arr[j][k - 1] == '^') and (input_arr[j][k - 2] == '^') and (input_arr[j][k + 1] == '^') and (input_arr[j][k + 2] == '^') and (input_arr[j - 1][k] == '^') and (input_arr[j - 2][k] == '^') and (input_arr[j + 1][k] == '^') and (input_arr[j + 2][k] == '^'):\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = [int(i) for i in input().split()]\n    m = []\n    for _ in range(r):\n        m.append(input())\n    ans = 0\n    for i in range(2, r - 2):\n        for j in range(2, c - 2):\n            if m[i][j] == '^' and m[i - 2][j] == '^' and (m[i - 1][j] == '^') and (m[i + 1][j] == '^') and (m[i + 2][j] == '^') and (m[i][j - 2] == '^') and (m[i][j - 1] == '^') and (m[i][j + 1] == '^') and (m[i][j + 2] == '^'):\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = [int(i) for i in input().split()]\n    m = []\n    for _ in range(r):\n        m.append(input())\n    ans = 0\n    for i in range(2, r - 2):\n        for j in range(2, c - 2):\n            if m[i][j] == '^' and m[i - 2][j] == '^' and (m[i - 1][j] == '^') and (m[i + 1][j] == '^') and (m[i + 2][j] == '^') and (m[i][j - 2] == '^') and (m[i][j - 1] == '^') and (m[i][j + 1] == '^') and (m[i][j + 2] == '^'):\n                ans += 1\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    (rows, cols) = map(int, input().split())\n    input_arr = []\n    rows_arr = []\n    ans = 0\n    for j in range(rows):\n        row = list(input())\n        input_arr.append(row)\n    for j in range(rows):\n        for k in range(cols):\n            if j - 2 >= 0 and j + 2 < rows and (k - 2 >= 0) and (k + 2 < cols) and (input_arr[j][k] == '^') and (input_arr[j][k - 1] == '^') and (input_arr[j][k - 2] == '^') and (input_arr[j][k + 1] == '^') and (input_arr[j][k + 2] == '^') and (input_arr[j - 1][k] == '^') and (input_arr[j - 2][k] == '^') and (input_arr[j + 1][k] == '^') and (input_arr[j + 2][k] == '^'):\n                ans += 1\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    (rows, cols) = map(int, input().split())\n    input_arr = []\n    rows_arr = []\n    ans = 0\n    for j in range(rows):\n        row = list(input())\n        input_arr.append(row)\n    for j in range(rows):\n        for k in range(cols):\n            if j - 2 >= 0 and j + 2 < rows and (k - 2 >= 0) and (k + 2 < cols) and (input_arr[j][k] == '^') and (input_arr[j][k - 1] == '^') and (input_arr[j][k - 2] == '^') and (input_arr[j][k + 1] == '^') and (input_arr[j][k + 2] == '^') and (input_arr[j - 1][k] == '^') and (input_arr[j - 2][k] == '^') and (input_arr[j + 1][k] == '^') and (input_arr[j + 2][k] == '^'):\n                ans += 1\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    (rows, cols) = map(int, input().split())\n    input_arr = []\n    rows_arr = []\n    ans = 0\n    for j in range(rows):\n        row = list(input())\n        input_arr.append(row)\n    for j in range(rows):\n        for k in range(cols):\n            if j - 2 >= 0 and j + 2 < rows and (k - 2 >= 0) and (k + 2 < cols) and (input_arr[j][k] == '^') and (input_arr[j][k - 1] == '^') and (input_arr[j][k - 2] == '^') and (input_arr[j][k + 1] == '^') and (input_arr[j][k + 2] == '^') and (input_arr[j - 1][k] == '^') and (input_arr[j - 2][k] == '^') and (input_arr[j + 1][k] == '^') and (input_arr[j + 2][k] == '^'):\n                ans += 1\n    print(ans)", "tests = int(input())\nfor i in range(tests):\n    (rows, cols) = map(int, input().split())\n    input_arr = []\n    rows_arr = []\n    ans = 0\n    for j in range(rows):\n        row = list(input())\n        input_arr.append(row)\n    for j in range(rows):\n        for k in range(cols):\n            if j - 2 >= 0 and j + 2 < rows and (k - 2 >= 0) and (k + 2 < cols) and (input_arr[j][k] == '^') and (input_arr[j][k - 1] == '^') and (input_arr[j][k - 2] == '^') and (input_arr[j][k + 1] == '^') and (input_arr[j][k + 2] == '^') and (input_arr[j - 1][k] == '^') and (input_arr[j - 2][k] == '^') and (input_arr[j + 1][k] == '^') and (input_arr[j + 2][k] == '^'):\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    arr = []\n    for __ in range(r):\n        arr.append(input())\n    count = 0\n    for i in range(2, r - 2):\n        for j in range(2, c - 2):\n            if arr[i - 2][j] == arr[i - 1][j] == arr[i][j - 2] == arr[i][j - 1] == arr[i + 1][j] == arr[i + 2][j] == arr[i][j + 1] == arr[i][j + 2] == arr[i][j] == '^':\n                count += 1\n    print(count)", "def is_CPC(grid, j, k):\n    l = k - 1\n    L = 0\n    while l >= 0:\n        if grid[j][l] == '^':\n            L = L + 1\n        else:\n            break\n        l = l - 1\n    if L < 2:\n        return False\n    l = k + 1\n    R = 0\n    while l < n:\n        if grid[j][l] == '^':\n            R = R + 1\n        else:\n            break\n        l = l + 1\n    if R < 2:\n        return False\n    l = j - 1\n    T = 0\n    while l >= 0:\n        if grid[l][k] == '^':\n            T = T + 1\n        else:\n            break\n        l = l - 1\n    if T < 2:\n        return False\n    l = j + 1\n    B = 0\n    while l < m:\n        if grid[l][k] == '^':\n            B = B + 1\n        else:\n            break\n        l = l + 1\n    if B < 2:\n        return False\n    return True\nT = int(input())\nfor i in range(T):\n    (m, n) = input().split()\n    m = int(m)\n    n = int(n)\n    grid = []\n    for j in range(m):\n        row = str(input())\n        grid.append(row)\n    monsters = 0\n    for j in range(m):\n        for k in range(n):\n            if grid[j][k] == '^' and is_CPC(grid, j, k):\n                monsters = monsters + 1\n    print(monsters)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        st = input()\n        mat.append(st)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if i >= 2 and i <= r - 3 and (j >= 2) and (j <= c - 3):\n                if mat[i][j] == '^' and mat[i - 1][j] == '^' and (mat[i - 2][j] == '^') and (mat[i + 1][j] == '^') and (mat[i + 2][j] == '^') and (mat[i][j - 1] == '^') and (mat[i][j - 2] == '^') and (mat[i][j + 1] == '^') and (mat[i][j + 2] == '^'):\n                    ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        st = input()\n        mat.append(st)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if i >= 2 and i <= r - 3 and (j >= 2) and (j <= c - 3):\n                if mat[i][j] == '^' and mat[i - 1][j] == '^' and (mat[i - 2][j] == '^') and (mat[i + 1][j] == '^') and (mat[i + 2][j] == '^') and (mat[i][j - 1] == '^') and (mat[i][j - 2] == '^') and (mat[i][j + 1] == '^') and (mat[i][j + 2] == '^'):\n                    ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    arr = []\n    for i in range(r):\n        arr.append([i for i in input()])\n    count = 0\n    if r <= 4 or c <= 4:\n        print(0)\n    else:\n        for i in range(2, r - 2):\n            for j in range(2, c - 2):\n                if arr[i][j] == '^' and arr[i][j + 1] == '^' and (arr[i][j + 2] == '^') and (arr[i][j - 1] == '^') and (arr[i][j - 2] == '^') and (arr[i][j] == '^') and (arr[i + 1][j] == '^') and (arr[i + 2][j] == '^') and (arr[i - 1][j] == '^') and (arr[i - 2][j] == '^'):\n                    count += 1\n        print(count)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        st = input()\n        mat.append(st)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if i >= 2 and i <= r - 3 and (j >= 2) and (j <= c - 3):\n                if mat[i][j] == '^' and mat[i - 1][j] == '^' and (mat[i - 2][j] == '^') and (mat[i + 1][j] == '^') and (mat[i + 2][j] == '^') and (mat[i][j - 1] == '^') and (mat[i][j - 2] == '^') and (mat[i][j + 1] == '^') and (mat[i][j + 2] == '^'):\n                    ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        st = input()\n        mat.append(st)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if i >= 2 and i <= r - 3 and (j >= 2) and (j <= c - 3):\n                if mat[i][j] == '^' and mat[i - 1][j] == '^' and (mat[i - 2][j] == '^') and (mat[i + 1][j] == '^') and (mat[i + 2][j] == '^') and (mat[i][j - 1] == '^') and (mat[i][j - 2] == '^') and (mat[i][j + 1] == '^') and (mat[i][j + 2] == '^'):\n                    ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        st = input()\n        mat.append(st)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if i >= 2 and i <= r - 3 and (j >= 2) and (j <= c - 3):\n                if mat[i][j] == '^' and mat[i - 1][j] == '^' and (mat[i - 2][j] == '^') and (mat[i + 1][j] == '^') and (mat[i + 2][j] == '^') and (mat[i][j - 1] == '^') and (mat[i][j - 2] == '^') and (mat[i][j + 1] == '^') and (mat[i][j + 2] == '^'):\n                    ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        st = input()\n        mat.append(st)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if i >= 2 and i <= r - 3 and (j >= 2) and (j <= c - 3):\n                if mat[i][j] == '^' and mat[i - 1][j] == '^' and (mat[i - 2][j] == '^') and (mat[i + 1][j] == '^') and (mat[i + 2][j] == '^') and (mat[i][j - 1] == '^') and (mat[i][j - 2] == '^') and (mat[i][j + 1] == '^') and (mat[i][j + 2] == '^'):\n                    ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        st = input()\n        mat.append(st)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if i >= 2 and i <= r - 3 and (j >= 2) and (j <= c - 3):\n                if mat[i][j] == '^' and mat[i - 1][j] == '^' and (mat[i - 2][j] == '^') and (mat[i + 1][j] == '^') and (mat[i + 2][j] == '^') and (mat[i][j - 1] == '^') and (mat[i][j - 2] == '^') and (mat[i][j + 1] == '^') and (mat[i][j + 2] == '^'):\n                    ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (r, c) = map(int, input().split())\n    mat = []\n    for _ in range(r):\n        st = input()\n        mat.append(st)\n    ans = 0\n    for i in range(r):\n        for j in range(c):\n            if i >= 2 and i <= r - 3 and (j >= 2) and (j <= c - 3):\n                if mat[i][j] == '^' and mat[i - 1][j] == '^' and (mat[i - 2][j] == '^') and (mat[i + 1][j] == '^') and (mat[i + 2][j] == '^') and (mat[i][j - 1] == '^') and (mat[i][j - 2] == '^') and (mat[i][j + 1] == '^') and (mat[i][j + 2] == '^'):\n                    ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    b = []\n    for j in range(l):\n        a = list(input())\n        b.append(a)\n    c = []\n    d = []\n    for i in range(l):\n        e = []\n        f = []\n        for j in range(r):\n            if b[i][j] == '^':\n                if j == 0:\n                    e.append(1)\n                else:\n                    s = e[j - 1] + 1\n                    e.append(s)\n            elif b[i][j] == '#':\n                e.append(0)\n            if b[i][j] == '^':\n                if i == 0:\n                    f.append(1)\n                else:\n                    f.append(d[i - 1][j] + 1)\n            elif b[i][j] == '#':\n                f.append(0)\n        c.append(e)\n        d.append(f)\n    ans = 0\n    for i in range(2, l - 2):\n        for j in range(2, r - 2):\n            z = 1\n            if c[i][j] <= 2:\n                z = 0\n            if d[i][j] <= 2:\n                z = 0\n            if c[i][j + 2] != c[i][j] + 2:\n                z = 0\n            if d[i + 2][j] != d[i][j] + 2:\n                z = 0\n            if z == 1:\n                ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (l, r) = map(int, input().split())\n    b = []\n    for j in range(l):\n        a = list(input())\n        b.append(a)\n    c = []\n    d = []\n    for i in range(l):\n        e = []\n        f = []\n        for j in range(r):\n            if b[i][j] == '^':\n                if j == 0:\n                    e.append(1)\n                else:\n                    s = e[j - 1] + 1\n                    e.append(s)\n            elif b[i][j] == '#':\n                e.append(0)\n            if b[i][j] == '^':\n                if i == 0:\n                    f.append(1)\n                else:\n                    f.append(d[i - 1][j] + 1)\n            elif b[i][j] == '#':\n                f.append(0)\n        c.append(e)\n        d.append(f)\n    ans = 0\n    for i in range(2, l - 2):\n        for j in range(2, r - 2):\n            z = 1\n            if c[i][j] <= 2:\n                z = 0\n            if d[i][j] <= 2:\n                z = 0\n            if c[i][j + 2] != c[i][j] + 2:\n                z = 0\n            if d[i + 2][j] != d[i][j] + 2:\n                z = 0\n            if z == 1:\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    st = input().split()\n    R = int(st[0])\n    C = int(st[1])\n    A = [[0 for x in range(C)] for y in range(R)]\n    for y in range(R):\n        st = input().strip()\n        for x in range(C):\n            if st[x] == '^':\n                A[y][x] = 1\n    r = 0\n    if R > 4 and C > 4:\n        for y in range(2, R - 2):\n            for x in range(2, C - 2):\n                n = A[y][x] + A[y][x + 1] + A[y][x + 2] + A[y][x - 1] + A[y][x - 2] + A[y + 1][x] + A[y + 2][x] + A[y - 1][x] + A[y - 2][x]\n                if n == 9:\n                    r += 1\n    print(r)", "t = int(input())\nwhile t:\n    t -= 1\n    (l, r) = map(int, input().split())\n    b = []\n    for i in range(l):\n        a = input()\n        a = list(a)\n        b.append(a)\n    c = []\n    d = []\n    for i in range(l):\n        e = []\n        f = []\n        for j in range(r):\n            if b[i][j] == '^':\n                if j == 0:\n                    e.append(1)\n                else:\n                    cc = e[j - 1] + 1\n                    e.append(cc)\n            elif b[i][j] == '#':\n                e.append(0)\n            if b[i][j] == '^':\n                if i == 0:\n                    f.append(1)\n                else:\n                    f.append(d[i - 1][j] + 1)\n            elif b[i][j] == '#':\n                f.append(0)\n        c.append(e)\n        d.append(f)\n    ans = 0\n    for i in range(2, l - 2):\n        for j in range(2, r - 2):\n            z = 1\n            if c[i][j] <= 2:\n                z = 0\n            if d[i][j] <= 2:\n                z = 0\n            if c[i][j + 2] != c[i][j] + 2:\n                z = 0\n            if d[i + 2][j] != d[i][j] + 2:\n                z = 0\n            if z == 1:\n                ans += 1\n    print(ans)", "for i in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    for x in range(r):\n        a.append(str(input()))\n    m = 0\n    for x in range(2, r - 2):\n        for y in range(2, c - 2):\n            if a[x][y] == '^' and a[x][y + 1] == '^' and (a[x][y + 2] == '^') and (a[x][y - 1] == '^') and (a[x][y - 2] == '^') and (a[x + 1][y] == '^') and (a[x + 2][y] == '^') and (a[x - 1][y] == '^') and (a[x - 2][y] == '^'):\n                m += 1\n    print(m)", "for i in range(int(input())):\n    (r, c) = map(int, input().split())\n    a = []\n    for x in range(r):\n        a.append(str(input()))\n    mons = 0\n    for x in range(2, r - 2):\n        for y in range(2, c - 2):\n            if a[x][y] == '^' and a[x][y + 1] == '^' and (a[x][y + 2] == '^') and (a[x][y - 1] == '^') and (a[x][y - 2] == '^') and (a[x + 1][y] == '^') and (a[x + 2][y] == '^') and (a[x - 1][y] == '^') and (a[x - 2][y] == '^'):\n                mons += 1\n    print(mons)", "for tt in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    m = temp[1]\n    ans = 0\n    a = []\n    grid = []\n    for i in range(n):\n        a.append(input())\n    l = []\n    r = []\n    t = []\n    b = []\n    for i in range(n):\n        grid.append([])\n        l.append([])\n        r.append([])\n        t.append([])\n        b.append([])\n    for i in range(n):\n        for j in range(m):\n            grid[i].append(0)\n            l[i].append(0)\n            r[i].append(0)\n            t[i].append(0)\n            b[i].append(0)\n    for i in range(n):\n        l[i][0] = 0\n        r[i][m - 1] = 0\n    for i in range(n):\n        count = 0\n        maxx = 0\n        for j in range(1, m):\n            if a[i][j - 1] == '^':\n                count += 1\n                l[i][j] = max(maxx, count)\n            else:\n                count = 0\n                l[i][j] = max(maxx, count)\n    for i in range(n):\n        maxx = 0\n        count = 0\n        j = m - 2\n        while j >= 0:\n            if a[i][j + 1] == '^':\n                count += 1\n                r[i][j] = max(maxx, count)\n            else:\n                count = 0\n                r[i][j] = max(maxx, count)\n            j -= 1\n    for j in range(m):\n        t[0][j] = 0\n        b[n - 1][j] = 0\n    for j in range(m):\n        maxx = 0\n        count = 0\n        for i in range(1, n):\n            if a[i - 1][j] == '^':\n                count += 1\n                t[i][j] = max(maxx, count)\n            else:\n                count = 0\n                t[i][j] = max(maxx, count)\n    for j in range(m):\n        maxx = 0\n        count = 0\n        i = n - 2\n        while i >= 0:\n            if a[i + 1][j] == '^':\n                count += 1\n                b[i][j] = max(maxx, count)\n            else:\n                count = 0\n                b[i][j] = max(maxx, count)\n            i -= 1\n    for i in range(n):\n        for j in range(m):\n            grid[i][j] = min(l[i][j], r[i][j], t[i][j], b[i][j])\n    for i in range(n):\n        for j in range(m):\n            if a[i][j] != '#' and grid[i][j] >= 2:\n                ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (nrow, ncol) = map(int, input().split())\n    s = []\n    for __ in range(nrow):\n        s.append(input())\n    if nrow * ncol < 25:\n        print(0)\n    else:\n        row = 2\n        count = 0\n        while row < nrow - 2:\n            col = 2\n            while col < ncol - 2:\n                if s[row][col] == '^':\n                    j = col - 1\n                    while j >= 0:\n                        if s[row][j] == '#':\n                            break\n                        j -= 1\n                    l = col - 1 - j\n                    j = col + 1\n                    while j < ncol:\n                        if s[row][j] == '#':\n                            break\n                        j += 1\n                    r = j - (col + 1)\n                    i = row - 1\n                    while i >= 0:\n                        if s[i][col] == '#':\n                            break\n                        i -= 1\n                    t = row - 1 - i\n                    i = row + 1\n                    while i < nrow:\n                        if s[i][col] == '#':\n                            break\n                        i += 1\n                    b = i - (row + 1)\n                    p = min(l, r, t, b)\n                    if p > 1:\n                        count += 1\n                col += 1\n            row += 1\n        print(count)", "T = int(input())\nfor i in range(T):\n    (R, C) = [int(x) for x in input().split()]\n    M = [[1 for x in range(C)] for y in range(R)]\n    for j in range(R):\n        row = list(input())\n        for k in range(C):\n            if row[k] == '#':\n                M[j][k] = 0\n                try:\n                    M[j - 1][k] = 0\n                except:\n                    pass\n                try:\n                    M[j - 2][k] = 0\n                except:\n                    pass\n                try:\n                    M[j + 1][k] = 0\n                except:\n                    pass\n                try:\n                    M[j + 2][k] = 0\n                except:\n                    pass\n                try:\n                    M[j][k - 1] = 0\n                except:\n                    pass\n                try:\n                    M[j][k - 2] = 0\n                except:\n                    pass\n                try:\n                    M[j][k + 1] = 0\n                except:\n                    pass\n                try:\n                    M[j][k + 2] = 0\n                except:\n                    pass\n    count = 0\n    if min(R, C) < 5:\n        print(count)\n        continue\n    for j in range(2, R - 2):\n        for k in range(2, C - 2):\n            if M[j][k] == 1:\n                count += 1\n    print(count)", "def check_tile(game_map, row, column):\n    (l_r, l_c) = (len(game_map), len(game_map[0]))\n    positions = ((0, 1), (0, -1), (-1, 0), (1, 0))\n    for i in range(1, 2 + 1):\n        for position in positions:\n            c = column + position[0] * i\n            r = row + position[1] * i\n            if not game_map[r][c] == '^':\n                return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (r, c) = (int(x) for x in input().split())\n    game_map = []\n    for _ in range(r):\n        game_map.append(list(input()))\n    count = 0\n    for i in range(2, r - 2):\n        for j in range(2, c - 2):\n            if game_map[i][j] == '^' and check_tile(game_map, i, j):\n                count += 1\n    print(count)", "n = int(input())\nfor t in range(0, n):\n    str = input().split(' ')\n    r = int(str[0])\n    c = int(str[1])\n    mat = []\n    for i in range(0, r):\n        lst = input()\n        mat.append(lst)\n    L = [[0 for x in range(c)] for x in range(r)]\n    R = [[0 for x in range(c)] for x in range(r)]\n    T = [[0 for x in range(c)] for x in range(r)]\n    B = [[0 for x in range(c)] for x in range(r)]\n    for i in range(0, r):\n        count = 0\n        for j in range(0, c):\n            L[i][j] = count\n            if mat[i][j] == '^':\n                count += 1\n            else:\n                count = 0\n    for i in range(0, r):\n        count = 0\n        for j in range(c - 1, -1, -1):\n            R[i][j] = count\n            if mat[i][j] == '^':\n                count += 1\n            else:\n                count = 0\n    for i in range(0, c):\n        count = 0\n        for j in range(0, r):\n            T[j][i] = count\n            if mat[j][i] == '^':\n                count += 1\n            else:\n                count = 0\n    for i in range(0, c):\n        count = 0\n        for j in range(r - 1, -1, -1):\n            B[j][i] = count\n            if mat[j][i] == '^':\n                count += 1\n            else:\n                count = 0\n    result = 0\n    for i in range(0, r):\n        for j in range(0, c):\n            if min(L[i][j], R[i][j], T[i][j], B[i][j]) >= 2 and mat[i][j] == '^':\n                result += 1\n    print(result)", "def valid(grid, r, c):\n    return r >= 2 and c >= 2 and (r < len(grid) - 2) and (c < len(grid[0]) - 2) and (grid[r][c] != '#') and (grid[r - 1][c] == '^') and (grid[r - 2][c] == '^') and (grid[r + 1][c] == '^') and (grid[r + 2][c] == '^') and (grid[r][c + 1] == '^') and (grid[r][c + 2] == '^') and (grid[r][c - 1] == '^') and (grid[r][c - 2] == '^')\nntest = int(input())\nfor test in range(ntest):\n    monsters = 0\n    (rows, cols) = map(int, input().split())\n    grid = []\n    for r in range(rows):\n        grid.append(input())\n    for r in range(2, rows - 2):\n        for c in range(2, cols - 2):\n            if valid(grid, r, c):\n                monsters += 1\n    print(monsters)", "def count(grid, r, c, dr, dc):\n    result = 0\n    (r1, c1) = (r + dr, c + dc)\n    while 0 <= r1 < len(grid) and 0 <= c1 < len(grid[0]) and (grid[r1][c1] == '^'):\n        result += 1\n        (r, c) = (r1, c1)\n        (r1, c1) = (r + dr, c + dc)\n    return result\nntest = int(input())\nfor test in range(ntest):\n    monsters = 0\n    (rows, cols) = map(int, input().split())\n    grid = []\n    for r in range(rows):\n        grid.append(input())\n    for r in range(2, rows - 2):\n        for c in range(2, cols - 2):\n            if grid[r][c] != '#':\n                best = 999999\n                for (dr, dc) in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                    best = min(best, count(grid, r, c, dr, dc))\n                    if best < 2:\n                        break\n                if best >= 2:\n                    monsters += 1\n    print(monsters)", "def count(grid, r, c, dr, dc):\n    result = 0\n    (r1, c1) = (r + dr, c + dc)\n    while 0 <= r1 < len(grid) and 0 <= c1 < len(grid[0]) and (grid[r1][c1] == '^'):\n        result += 1\n        (r, c) = (r1, c1)\n        (r1, c1) = (r + dr, c + dc)\n    return result\nntest = int(input())\nfor test in range(ntest):\n    monsters = 0\n    (rows, cols) = map(int, input().split())\n    grid = []\n    for r in range(rows):\n        grid.append(input())\n    for r in range(rows):\n        for c in range(cols):\n            if grid[r][c] != '#':\n                best = 999999\n                for (dr, dc) in [(0, 1), (1, 0), (-1, 0), (0, -1)]:\n                    best = min(best, count(grid, r, c, dr, dc))\n                if best >= 2:\n                    monsters += 1\n    print(monsters)", "import sys\nf = sys.stdin\nT = int(f.readline())\nwhile T:\n    (R, C) = map(int, f.readline().split())\n    grid = []\n    for i in range(R):\n        grid.append(f.readline().strip())\n    count = 0\n    for i in range(2, R - 2):\n        for j in range(2, C - 2):\n            if grid[i][j] == '^' and grid[i - 1][j] == '^' and (grid[i - 2][j] == '^') and (grid[i + 1][j] == '^') and (grid[i + 2][j] == '^') and (grid[i][j - 1] == '^') and (grid[i][j - 2] == '^') and (grid[i][j + 1] == '^') and (grid[i][j + 2] == '^'):\n                count += 1\n    print(count)\n    T -= 1", "test = int(input())\nfor t in range(test):\n    data = input().split()\n    rows = int(data[0])\n    cols = int(data[1])\n    grid = []\n    count = 0\n    for r in range(rows):\n        grid.append(input())\n    if rows <= 4 or cols <= 4:\n        print(0)\n    else:\n        for r in range(2, rows - 2):\n            for c in range(2, cols - 2):\n                if grid[r][c] == '^':\n                    if grid[r][c - 1] == '^' and grid[r][c - 2] == '^' and (grid[r][c + 1] == '^') and (grid[r][c + 2] == '^'):\n                        if grid[r - 1][c] == '^' and grid[r - 2][c] == '^' and (grid[r + 1][c] == '^') and (grid[r + 2][c] == '^'):\n                            count += 1\n        print(count)", "import sys\nt = int(sys.stdin.readline())\nfor tc in range(t):\n    (r, c) = map(int, sys.stdin.readline().split())\n    grid = [sys.stdin.readline() for i in range(r)]\n\n    def isFreeC(ij, grid=grid):\n        (i, j) = ij\n        return 0 <= i < r and 0 <= j < c and (grid[i][j] == '^')\n\n    def isMcell(i, j):\n        return all(map(isFreeC, ((i - 2, j), (i - 1, j), (i, j), (i + 1, j), (i + 2, j), (i, j - 2), (i, j - 1), (i, j + 1), (i, j + 2))))\n    mcell = [(i, j) for i in range(r) for j in range(c) if isMcell(i, j)]\n    print(len(mcell))", "t = int(input())\nwhile t > 0:\n    count = 0\n    t -= 1\n    (rows, columns) = map(int, input().split())\n    a = [[0 for i in range(columns)] for j in range(rows)]\n    for i in range(0, rows):\n        a[i] = input()\n    for i in range(2, rows - 2):\n        for j in range(2, columns - 2):\n            (top, bottom) = (i - 1, i + 1)\n            (L, R, T, B) = (0, 0, 0, 0)\n            (left, right) = (j - 1, j + 1)\n            if a[i][j] == '#':\n                continue\n            else:\n                while top >= 0 and a[top][j] != '#':\n                    T += 1\n                    top -= 1\n                while bottom <= rows - 1 and a[bottom][j] != '#':\n                    B += 1\n                    bottom += 1\n                while left >= 0 and a[i][left] != '#':\n                    L += 1\n                    left -= 1\n                while right <= columns - 1 and a[i][right] != '#':\n                    R += 1\n                    right += 1\n                ans = min(L, R, T, B)\n                if ans >= 2:\n                    count += 1\n    print(count)", "T = int(input())\nfor test_case in range(T):\n    (R, C) = map(int, input().split())\n    grid_giv = []\n    for _ in range(R):\n        grid_giv.append(input())\n    monsters = 0\n    grid_trans = [''.join([grid_giv[roo][c] for roo in range(R)]) for c in range(C)]\n    made_giv = []\n    made_trans = []\n    for (grid, made) in ((grid_giv, made_giv), (grid_trans, made_trans)):\n        for r in range(len(grid)):\n            row_max = grid[r].count('^')\n            if row_max >= 5:\n                made.append([0 for _ in range(len(grid[0]))])\n                for c in range(2, len(grid[0]) - 2):\n                    if grid[r][c - 2:c + 3] == '^^^^^':\n                        made[r][c] = 1\n            else:\n                made.append([0 for _ in range(len(grid[0]))])\n    for r in range(2, R - 2):\n        for c in range(2, C - 2):\n            if min(made_giv[r][c], made_trans[c][r]) > 0 and grid_giv[r][c] == '^':\n                monsters += 1\n    print(monsters)", "import sys\nT = int(sys.stdin.readline())\nAns = ''\nfor t in range(T):\n    L = []\n    (R, C) = map(int, sys.stdin.readline().split())\n    ans = 0\n    for i in range(R):\n        s = sys.stdin.readline().split()[0]\n        L.append(s)\n    for i in range(2, R - 2):\n        for j in range(2, C - 2):\n            if L[i][j] == L[i + 1][j] == L[i + 2][j] == L[i - 1][j] == L[i - 2][j] == L[i][j + 1] == L[i][j + 2] == L[i][j - 1] == L[i][j - 2] == '^':\n                ans += 1\n    Ans += str(ans) + '\\n'\nsys.stdout.write(Ans)"]