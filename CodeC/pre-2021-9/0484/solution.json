["t = int(input())\narr = []\nfor i in range(1, 33):\n    for j in range(i):\n        arr.append((1 << i) + (1 << j))\narr.sort()\n\ndef ans(n):\n    (low, high) = (0, len(arr))\n    (res, diff) = (float('inf'), float('inf'))\n    while low <= high:\n        mid = (low + high) // 2\n        currdiff = abs(n - arr[mid])\n        if currdiff < diff:\n            diff = currdiff\n            res = mid\n        if arr[mid] == n:\n            return n\n        if arr[mid] > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[res]\nfor _ in range(t):\n    n = int(input())\n    print(abs(n - ans(n)))", "t = int(input())\narr = []\nfor i in range(1, 33):\n    for j in range(i):\n        arr.append((1 << i) + (1 << j))\narr.sort()\n\ndef ans(n):\n    (low, high) = (0, len(arr))\n    (res, diff) = (float('inf'), float('inf'))\n    while low <= high:\n        mid = (low + high) // 2\n        currdiff = abs(n - arr[mid])\n        if currdiff < diff:\n            diff = currdiff\n            res = mid\n        if arr[mid] == n:\n            return n\n        if arr[mid] > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[res]\nfor _ in range(t):\n    n = int(input())\n    print(abs(n - ans(n)))", "import bisect\ns = set()\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            s.add(2 ** i + 2 ** j)\ns = list(s)\ns.sort()\nfor _ in range(int(input())):\n    n = int(input())\n    x = bisect.bisect_left(s, n)\n    if s[x] == n:\n        print(0)\n    elif x != 0:\n        print(min(s[x] - n, n - s[x - 1]))\n    else:\n        print(3 - n)", "import bisect\ns = set()\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            s.add(2 ** i + 2 ** j)\ns = list(s)\ns.sort()\nfor _ in range(int(input())):\n    n = int(input())\n    x = bisect.bisect_left(s, n)\n    if s[x] == n:\n        print(0)\n    elif x != 0:\n        print(min(s[x] - n, n - s[x - 1]))\n    else:\n        print(3 - n)", "import bisect\ns = set()\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            s.add(2 ** i + 2 ** j)\ns = list(s)\ns.sort()\nfor _ in range(int(input())):\n    n = int(input())\n    x = bisect.bisect_left(s, n)\n    if s[x] == n:\n        print(0)\n    elif x != 0:\n        print(min(s[x] - n, n - s[x - 1]))\n    else:\n        print(3 - n)", "import bisect\ns = set()\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            s.add(2 ** i + 2 ** j)\ns = list(s)\ns.sort()\nfor _ in range(int(input())):\n    n = int(input())\n    x = bisect.bisect_left(s, n)\n    if s[x] == n:\n        print(0)\n    elif x != 0:\n        print(min(s[x] - n, n - s[x - 1]))\n    else:\n        print(3 - n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = bin(n)[2:]\n    c = s.count('1')\n    if n == 1:\n        print(2)\n    else:\n        k = 1\n        while k <= n:\n            k = k << 1\n        k = k >> 1\n        if k == n:\n            print('1')\n        else:\n            n = n - k\n            j = 1\n            while j <= n:\n                j = j << 1\n            j = j >> 1\n            if j * 2 != k:\n                print(min(abs(j * 2 - n), abs(j - n)))\n            else:\n                print(min(abs(j - n), abs(j * 2 + 1 - n)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = bin(n)[2:]\n    c = s.count('1')\n    if n == 1:\n        print(2)\n    else:\n        k = 1\n        while k <= n:\n            k = k << 1\n        k = k >> 1\n        if k == n:\n            print('1')\n        else:\n            n = n - k\n            j = 1\n            while j <= n:\n                j = j << 1\n            j = j >> 1\n            if j * 2 != k:\n                print(min(abs(j * 2 - n), abs(j - n)))\n            else:\n                print(min(abs(j - n), abs(j * 2 + 1 - n)))", "for _ in range(int(input())):\n    n = int(input())\n    s = bin(n)[2:]\n    coun = s.count('1')\n    if n == 1:\n        print(2)\n    else:\n        cnt = 1\n        while cnt <= n:\n            cnt = cnt << 1\n        cnt = cnt >> 1\n        if cnt == n:\n            print('1')\n        else:\n            n = n - cnt\n            cnt2 = 1\n            while cnt2 <= n:\n                cnt2 = cnt2 << 1\n            cnt2 = cnt2 >> 1\n            if cnt2 * 2 != cnt:\n                print(min(abs(cnt2 * 2 - n), abs(cnt2 - n)))\n            else:\n                print(min(abs(cnt2 - n), abs(cnt2 * 2 + 1 - n)))", "for _ in range(int(input())):\n    n = int(input())\n    s = bin(n)[2:]\n    coun = s.count('1')\n    if n == 1:\n        print(2)\n    else:\n        cnt = 1\n        while cnt <= n:\n            cnt = cnt << 1\n        cnt = cnt >> 1\n        if cnt == n:\n            print('1')\n        else:\n            n = n - cnt\n            cnt2 = 1\n            while cnt2 <= n:\n                cnt2 = cnt2 << 1\n            cnt2 = cnt2 >> 1\n            if cnt2 * 2 != cnt:\n                print(min(abs(cnt2 * 2 - n), abs(cnt2 - n)))\n            else:\n                print(min(abs(cnt2 - n), abs(cnt2 * 2 + 1 - n)))", "import math\ntests = int(input())\nfor i in range(tests):\n    num = int(input())\n    log = math.log(num, 2)\n    if num == 1:\n        print(2)\n    elif int(log) == log:\n        print(1)\n    else:\n        remaining = num - 2 ** int(log)\n        remaining_log = math.floor(math.log(remaining, 2))\n        substract = remaining - 2 ** remaining_log\n        remaining_log += 1\n        add = 2 ** remaining_log - remaining\n        ans = min(add, substract)\n        if math.log(remaining - ans, 2) != int(math.log(remaining - ans, 2)) and remaining + ans == num - remaining:\n            ans += 1\n        print(ans)", "import math\ntests = int(input())\nfor i in range(tests):\n    num = int(input())\n    log = math.log(num, 2)\n    if num == 1:\n        print(2)\n    elif int(log) == log:\n        print(1)\n    else:\n        remaining = num - 2 ** int(log)\n        remaining_log = math.floor(math.log(remaining, 2))\n        substract = remaining - 2 ** remaining_log\n        remaining_log += 1\n        add = 2 ** remaining_log - remaining\n        ans = min(add, substract)\n        if math.log(remaining - ans, 2) != int(math.log(remaining - ans, 2)) and remaining + ans == num - remaining:\n            ans += 1\n        print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    h = int(math.log(n, 2))\n    if n == 1:\n        print(2)\n    elif n & 1 << h - 1 != 0:\n        a = (1 << h) + (1 << h - 1)\n        b = (1 << h + 1) + 1\n        print(min(n - a, b - n))\n    else:\n        c = None\n        for i in range(h - 1, -1, -1):\n            if n & 1 << i != 0:\n                c = i\n                break\n        if c == None:\n            print(1)\n        elif c == 0:\n            print(0)\n        else:\n            a = (1 << h) + (1 << c + 1)\n            b = (1 << h) + (1 << c)\n            print(min(a - n, n - b))", "import math\nL = []\nfor i in range(31):\n    L.append(2 ** i)\nA = []\nfor i in range(31):\n    for j in range(i):\n        A.append(L[i] + L[j])\nA.sort()\n\ndef binary_search(A, l, r, x):\n    if abs(r - l) <= 1 and l > r:\n        if A[l] <= x or r == -1:\n            return l\n        else:\n            return r\n    if r >= l:\n        mid = l + (r - l) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            return binary_search(A, l, mid - 1, x)\n        else:\n            return binary_search(A, mid + 1, r, x)\nfor i in range(int(input())):\n    N = int(input())\n    x = binary_search(A, 0, len(A), N)\n    if A[x] <= N:\n        print(min(abs(A[x + 1] - N), abs(A[x] - N)))\n    else:\n        print(min(abs(A[x - 1] - N), abs(A[x] - N)))", "L = []\nfor i in range(31):\n    L.append(2 ** i)\nA = []\nfor i in range(31):\n    for j in range(i):\n        A.append(L[i] + L[j])\nA.sort()\n\ndef binary_search(A, l, r, x):\n    if abs(r - l) <= 1 and l > r:\n        if A[l] <= x or r == -1:\n            return l\n        else:\n            return r\n    if r >= l:\n        mid = l + (r - l) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            return binary_search(A, l, mid - 1, x)\n        else:\n            return binary_search(A, mid + 1, r, x)\nfor i in range(int(input())):\n    N = int(input())\n    x = binary_search(A, 0, len(A), N)\n    if A[x] == N:\n        print(N - A[x])\n    elif A[x] < N:\n        print(min(abs(A[x + 1] - N), abs(A[x] - N)))\n    else:\n        print(min(abs(A[x - 1] - N), abs(A[x] - N)))", "from math import log2, ceil, floor, inf\n\ndef soln(n):\n    if n == 1:\n        return 2\n    res = inf\n    prev = floor(log2(n))\n    prev_num = 1 << prev\n    diff = n - prev_num\n    if diff == 0:\n        return 1\n    nex_diff = (1 << ceil(log2(diff))) - diff\n    prev_diff = diff - (1 << floor(log2(diff)))\n    if nex_diff < prev_diff:\n        res = nex_diff\n        if diff + nex_diff == prev_num:\n            res += 1\n    else:\n        res = prev_diff\n        if diff - prev_diff == prev_num:\n            res += 1\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    print(soln(n))", "from math import log2, ceil, floor, inf\n\ndef soln(n):\n    if n == 1:\n        return 2\n    res = inf\n    prev = floor(log2(n))\n    prev_num = 1 << prev\n    diff = n - prev_num\n    if diff == 0:\n        return 1\n    prev_diff = 1 << floor(log2(diff))\n    if prev_diff * 2 != prev_num:\n        res = min(abs(prev_diff * 2 - diff), abs(prev_diff - diff))\n    else:\n        res = min(abs(prev_diff - diff), abs(prev_diff * 2 + 1 - diff))\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    print(soln(n))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    n_bin = bin(n)[2:]\n    count = 0\n    i = 0\n    while i < len(n_bin):\n        if n_bin[i] == '1':\n            count += 1\n        if count == 2:\n            break\n        i += 1\n    if count == 1:\n        if n == 1:\n            print(2)\n        else:\n            print(1)\n    elif count == 2 and i == len(n_bin) - 1:\n        print(0)\n    elif i == 1:\n        ans_1 = pow(2, len(n_bin)) + 1\n        ans_2 = int('0b' + n_bin[i + 1:], 2)\n        print(min(ans_1 - n, ans_2))\n    else:\n        ans_1 = pow(2, len(n_bin[i:])) - int('0b' + n_bin[i:], 2)\n        ans_2 = int('0b' + n_bin[i + 1:], 2)\n        print(min(ans_1, ans_2))", "n = int(input())\nqueries = [int(input()) for i in range(n)]\n\ndef binary_search(A, value):\n    if len(A) == 0:\n        return 0\n    mid = len(A) // 2\n    if A[mid] == value:\n        return mid\n    elif value < A[mid]:\n        return binary_search(A[:mid], value)\n    else:\n        return mid + 1 + binary_search(A[mid + 1:], value)\nA = []\nfor i in range(0, 40):\n    for j in range(i + 1, 40):\n        A.append(2 ** i + 2 ** j)\nA = sorted(A)\nfor query in queries:\n    value = query\n    index = binary_search(A, value)\n    print(min([abs(A[i] - value) for i in range(max(0, index - 5), index + 5)]))", "from math import log\nt = int(input())\nfor i in range(t):\n    a = int(input())\n    if log(a, 2) // 1 == log(a, 2):\n        if a == 1:\n            print(2)\n        else:\n            print(1)\n    else:\n        lower = abs(a - 2 ** (log(a, 2) // 1))\n        if log(a, 2) // 1 == log(lower, 2) // 1:\n            lowerlower = 10000000000\n        else:\n            lowerlower = abs(lower - 2 ** (log(lower, 2) // 1))\n        if log(lower, 2) // 1 + 1 == log(a, 2) // 1:\n            lowerupper = 10000000000\n        else:\n            lowerupper = abs(lower - 2 ** (log(lower, 2) // 1 + 1))\n        upper = abs(a - 2 ** (log(a, 2) // 1 + 1)) + 1\n        print(int(min((lowerlower, lowerupper, upper))))", "def bs(arr, l, h, x):\n    if h >= l:\n        mid = (h + l) // 2\n        if arr[mid] == x:\n            return 1\n        elif arr[mid] > x:\n            return bs(arr, l, mid - 1, x)\n        else:\n            return bs(arr, mid + 1, h, x)\n    else:\n        return -1\n\ndef bss(arr, l, h, x):\n    if h >= l:\n        mid = (h + l) // 2\n        if arr[mid] > x:\n            if arr[mid - 1] < x:\n                print(min(x - arr[mid - 1], arr[mid] - x))\n            else:\n                bss(arr, l, mid - 1, x)\n        elif arr[mid] < x:\n            if arr[mid + 1] > x:\n                print(min(x - arr[mid], arr[mid + 1] - x))\n            else:\n                bss(arr, mid + 1, h, x)\na = []\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            a.append(2 ** j + 2 ** i)\na = list(set(a))\na.sort()\nfor _ in range(int(input())):\n    n = int(input())\n    m = bs(a, 0, len(a) - 1, n)\n    if m == 1:\n        print('0')\n    elif m == -1 and n >= 3:\n        p = bss(a, 0, len(a) - 1, n)\n    else:\n        print(3 - n)", "def bs(arr, l, h, x):\n    if h >= l:\n        mid = (h + l) // 2\n        if arr[mid] == x:\n            return 1\n        elif arr[mid] > x:\n            return bs(arr, l, mid - 1, x)\n        else:\n            return bs(arr, mid + 1, h, x)\n    else:\n        return -1\n\ndef bss(arr, l, h, x):\n    if h >= l:\n        mid = (h + l) // 2\n        if arr[mid] > x:\n            if arr[mid - 1] < x:\n                print(min(x - arr[mid - 1], arr[mid] - x))\n            else:\n                bss(arr, l, mid - 1, x)\n        elif arr[mid] < x:\n            if arr[mid + 1] > x:\n                print(min(x - arr[mid], arr[mid + 1] - x))\n            else:\n                bss(arr, mid + 1, h, x)\na = []\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            a.append(2 ** j + 2 ** i)\na = list(set(a))\na.sort()\nfor _ in range(int(input())):\n    n = int(input())\n    m = bs(a, 0, len(a) - 1, n)\n    if m == 1:\n        print('0')\n    elif m == -1 and n >= 3:\n        p = bss(a, 0, len(a) - 1, n)\n    else:\n        print(3 - n)", "def bs(arr, l, h, x):\n    if h >= l:\n        mid = (h + l) // 2\n        if arr[mid] == x:\n            return 1\n        elif arr[mid] > x:\n            return bs(arr, l, mid - 1, x)\n        else:\n            return bs(arr, mid + 1, h, x)\n    else:\n        return -1\n\ndef bss(arr, l, h, x):\n    if h >= l:\n        mid = (h + l) // 2\n        if arr[mid] > x:\n            if arr[mid - 1] < x:\n                print(min(x - arr[mid - 1], arr[mid] - x))\n            else:\n                bss(arr, l, mid - 1, x)\n        elif arr[mid] < x:\n            if arr[mid + 1] > x:\n                print(min(x - arr[mid], arr[mid + 1] - x))\n            else:\n                bss(arr, mid + 1, h, x)\na = []\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            a.append(2 ** j + 2 ** i)\na = list(set(a))\na.sort()\nfor _ in range(int(input())):\n    n = int(input())\n    m = bs(a, 0, len(a) - 1, n)\n    if m == 1:\n        print('0')\n    elif m == -1 and n >= 3:\n        p = bss(a, 0, len(a) - 1, n)\n    else:\n        print(3 - n)", "from bisect import bisect, insort\n\ndef bisect_right(a, x, lo=0, hi=None):\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return a[i - 1]\n    raise ValueError\n\ndef find_gt(a, x):\n    i = bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\npossible_m = []\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            possible_m.append(2 ** i + 2 ** j)\npossible_m = sorted(possible_m)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n < 3:\n        print(3 - n)\n    else:\n        print(min(n - find_le(possible_m, n), find_gt(possible_m, n) - n))", "from bisect import bisect, insort\n\ndef bisect_right(a, x, lo=0, hi=None):\n    if lo < 0:\n        raise ValueError('lo must be non-negative')\n    if hi is None:\n        hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n\ndef find_le(a, x):\n    i = bisect_right(a, x)\n    if i:\n        return a[i - 1]\n    raise ValueError\n\ndef find_gt(a, x):\n    i = bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\npossible_m = []\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            possible_m.append(2 ** i + 2 ** j)\npossible_m = sorted(possible_m)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n < 3:\n        print(3 - n)\n    else:\n        print(min(n - find_le(possible_m, n), find_gt(possible_m, n) - n))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    n_bin = bin(n)[2:]\n    count = 0\n    i = 0\n    while i < len(n_bin):\n        if n_bin[i] == '1':\n            count += 1\n        if count == 2:\n            break\n        i += 1\n    if count == 1:\n        if n == 1:\n            print(2)\n        else:\n            print(1)\n    elif count == 2 and i == len(n_bin) - 1:\n        print(0)\n    elif i == 1:\n        ans_1 = pow(2, len(n_bin)) + 1\n        ans_2 = int('0b' + n_bin[i + 1:], 2)\n        print(min(ans_1 - n, ans_2))\n    else:\n        ans_1 = pow(2, len(n_bin[i:])) - int('0b' + n_bin[i:], 2)\n        ans_2 = int('0b' + n_bin[i + 1:], 2)\n        print(min(ans_1, ans_2))", "import sys\nimport os\nimport math\nimport collections\n\ndef search(N, ans):\n    (l, r) = (0, len(ans))\n    while l <= r:\n        mid = (l + r) // 2\n        if ans[mid] == N:\n            return mid\n        elif ans[mid] < N:\n            l = mid + 1\n        else:\n            r = mid - 1\n        if l == len(ans):\n            return l\n    return l\nT = int(input())\nans = []\nfor i in range(31):\n    for j in range(i + 1, 31):\n        x = (1 << i) + (1 << j)\n        ans.append(x)\nans.sort()\nfor _ in range(T):\n    N = int(input())\n    A = search(N, ans)\n    print(min(abs(ans[A] - N), abs(ans[A - 1] - N)))", "T = int(input())\nlst = []\nfor i in range(31):\n    for j in range(i):\n        lst.append(2 ** i + 2 ** j)\nlst.sort()\n\ndef bound_search(lst, x, compare):\n    lo = 0\n    up = len(lst)\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nwhile T > 0:\n    N = int(input())\n    nxt = bound_search(lst, N, upper)\n    prev = bound_search(lst, N, upper) - 1\n    ans = min(abs(N - lst[nxt]), abs(N - lst[prev]))\n    print(ans)\n    T -= 1", "T = int(input())\nlst = []\nfor i in range(33):\n    for j in range(i):\n        lst.append(2 ** i + 2 ** j)\nlst.sort()\n\ndef bound_search(lst, x, compare):\n    lo = 0\n    up = len(lst)\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nwhile T > 0:\n    N = int(input())\n    nxt = bound_search(lst, N, upper)\n    prev = bound_search(lst, N, upper) - 1\n    ans = min(abs(N - lst[nxt]), abs(N - lst[prev]))\n    print(ans)\n    T -= 1", "T = int(input())\nlst = []\nfor i in range(33):\n    for j in range(i):\n        lst.append(2 ** i + 2 ** j)\nlst.sort()\n\ndef bound_search(lst, x, compare):\n    lo = 0\n    up = len(lst)\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nwhile T > 0:\n    N = int(input())\n    nxt = bound_search(lst, N, upper)\n    prev = bound_search(lst, N, upper) - 1\n    ans = min(abs(N - lst[nxt]), abs(N - lst[prev]))\n    print(ans)\n    T -= 1", "T = int(input())\nlst = []\nfor i in range(33):\n    for j in range(i):\n        lst.append(2 ** i + 2 ** j)\nlst.sort()\n\ndef bound_search(lst, x, compare):\n    lo = 0\n    up = len(lst)\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nwhile T > 0:\n    N = int(input())\n    nxt = bound_search(lst, N, upper)\n    prev = bound_search(lst, N, upper) - 1\n    ans = min(abs(N - lst[nxt]), abs(N - lst[prev]))\n    print(ans)\n    T -= 1", "T = int(input())\nlst = []\nfor i in range(33):\n    for j in range(i):\n        lst.append(2 ** i + 2 ** j)\nlst.sort()\n\ndef bound_search(lst, x, compare):\n    lo = 0\n    up = len(lst)\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nwhile T > 0:\n    N = int(input())\n    nxt = bound_search(lst, N, upper)\n    prev = bound_search(lst, N, upper) - 1\n    ans = min(abs(N - lst[nxt]), abs(N - lst[prev]))\n    print(ans)\n    T -= 1", "T = int(input())\nlst = []\nfor i in range(33):\n    for j in range(i):\n        lst.append(2 ** i + 2 ** j)\nlst.sort()\n\ndef bound_search(lst, x, compare):\n    lo = 0\n    up = len(lst)\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nwhile T > 0:\n    N = int(input())\n    nxt = bound_search(lst, N, upper)\n    prev = bound_search(lst, N, upper) - 1\n    ans = min(abs(N - lst[nxt]), abs(N - lst[prev]))\n    print(ans)\n    T -= 1", "T = int(input())\nlst = []\nfor i in range(33):\n    for j in range(i):\n        lst.append(2 ** i + 2 ** j)\nlst.sort()\n\ndef bound_search(lst, x, compare):\n    lo = 0\n    up = len(lst)\n    while lo < up:\n        mid = (lo + up) // 2\n        if compare(x, lst[mid]):\n            up = mid\n        else:\n            lo = mid + 1\n    return lo\nupper = lambda x, elem: x < elem\nwhile T > 0:\n    N = int(input())\n    nxt = bound_search(lst, N, upper)\n    prev = bound_search(lst, N, upper) - 1\n    ans = min(abs(N - lst[nxt]), abs(N - lst[prev]))\n    print(ans)\n    T -= 1", "lst = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            lst.append(2 ** i + 2 ** j)\nl = sorted(list(set(lst)))\n\ndef bin_search(x):\n    low = 0\n    high = len(l) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if x < l[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return min(abs(x - l[low]), abs(x - l[low - 1]), abs(x - l[low + 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = bin_search(n)\n    if n not in d:\n        print(a)\n        d[n] = a\n    else:\n        print(d[n])", "def bin(arr, i, j, val):\n    while i <= j:\n        mid = (i + j) // 2\n        if arr[mid] == val or (arr[mid] < val and val < arr[mid + 1]):\n            return mid\n        elif arr[mid] < val:\n            i = mid + 1\n        elif arr[mid] > val:\n            j = mid - 1\nli = []\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            li.append(2 ** i + 2 ** j)\nli.sort()\nfor l in range(int(input())):\n    N = int(input())\n    if N == 1:\n        print(2)\n    elif N == 2:\n        print(1)\n    else:\n        i = bin(li, 0, len(li) - 1, N)\n        print(min(N - li[i], li[i + 1] - N))", "lst = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            lst.append(2 ** i + 2 ** j)\nlst.sort()\n\ndef bin_search(x, low, high):\n    if low > high:\n        return min(abs(x - lst[low]), abs(x - lst[low - 1]), abs(x - lst[low + 1]))\n    else:\n        mid = low + (high - low) // 2\n        if x == lst[mid]:\n            return 0\n        elif x < lst[mid]:\n            return bin_search(x, low, mid - 1)\n        else:\n            return bin_search(x, mid + 1, high)\nd = {}\nT = int(input())\nfor k in range(T):\n    N = int(input())\n    a = bin_search(N, 0, len(lst) - 1)\n    if N not in d:\n        print(a)\n        d[N] = a\n    else:\n        print(d[N])", "lst = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            lst.append(2 ** i + 2 ** j)\nl = sorted(list(set(lst)))\n\ndef bin_search(x):\n    low = 0\n    high = len(l) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if x < l[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return min(abs(x - l[low]), abs(x - l[low - 1]), abs(x - l[low + 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = bin_search(n)\n    if n not in d:\n        print(a)\n        d[n] = a\n    else:\n        print(d[n])", "t = int(input())\narr = []\nfor i in range(33):\n    for j in range(i):\n        arr.append((1 << i) + (1 << j))\narr.sort()\n\ndef ans(n):\n    (low, high) = (0, len(arr))\n    (res, diff) = (float('inf'), float('inf'))\n    while low <= high:\n        mid = low + (high - low) // 2\n        currdiff = abs(n - arr[mid])\n        if currdiff < diff:\n            diff = currdiff\n            res = mid\n        if arr[mid] == n:\n            return n\n        if arr[mid] > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[res]\nfor _ in range(t):\n    n = int(input())\n    print(abs(n - ans(n)))", "t = int(input())\narr = []\nfor i in range(33):\n    for j in range(i):\n        arr.append((1 << i) + (1 << j))\narr.sort()\n\ndef ans(n):\n    (low, high) = (0, len(arr))\n    (res, diff) = (float('inf'), float('inf'))\n    while low <= high:\n        mid = low + (high - low) // 2\n        currdiff = abs(n - arr[mid])\n        if currdiff < diff:\n            diff = currdiff\n            res = mid\n        if arr[mid] == n:\n            return n\n        if arr[mid] > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[res]\nfor _ in range(t):\n    n = int(input())\n    print(abs(n - ans(n)))", "from bisect import bisect_left\n\ndef twsqr():\n    sqrs = []\n    for i in range(33):\n        for j in range(33):\n            sqrs.append(2 ** i + 2 ** j)\n    sqrs = list(set(sqrs))\n    sqrs.sort()\n    for k in range(1, 33):\n        n = int(2 ** k)\n        sqrs.remove(n)\n    return sqrs\nsqrs = twsqr()\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    if n == 1:\n        ans = 2\n    elif n == 2:\n        ans = 1\n    elif n in sqrs:\n        ans = 0\n    else:\n        leftind = bisect_left(sqrs, n)\n        f1 = int(n - sqrs[leftind - 1])\n        f2 = int(sqrs[leftind] - n)\n        if f1 > f2:\n            ans = f2\n        else:\n            ans = f1\n    print(ans)", "nums = []\nfor x in range(33):\n    for y in range(33):\n        if x == y:\n            continue\n        nums.append(2 ** x + 2 ** y)\nnums.sort()\n\ndef binary_search(lo, hi, condition, target):\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        result = condition(mid)\n        if result == 'found':\n            if nums[mid] == target:\n                return 0\n            elif nums[mid] < target < nums[mid + 1]:\n                return min(abs(nums[mid + 1] - target), abs(nums[mid] - target))\n            else:\n                return min(abs(nums[mid - 1] - target), abs(nums[mid] - target))\n        elif result == 'left':\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return -1\n\ndef find_num(nums, target):\n\n    def condition(mid):\n        if nums[mid] == target or nums[mid] < target < nums[mid + 1] or nums[mid - 1] < target < nums[mid]:\n            return 'found'\n        elif nums[mid] < target:\n            return 'right'\n        else:\n            return 'left'\n    return binary_search(0, len(nums) - 1, condition, target)\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(2)\n    elif n == 2:\n        print(1)\n    else:\n        print(find_num(nums, n))", "t = int(input())\narr = []\nfor i in range(33):\n    for j in range(i):\n        arr.append((1 << i) + (1 << j))\narr.sort()\n\ndef ans(n):\n    (low, high) = (0, len(arr))\n    (res, diff) = (float('inf'), float('inf'))\n    while low <= high:\n        mid = low + (high - low) // 2\n        currdiff = abs(n - arr[mid])\n        if currdiff < diff:\n            diff = currdiff\n            res = mid\n        if arr[mid] == n:\n            return n\n        if arr[mid] > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[res]\nfor _ in range(t):\n    n = int(input())\n    print(abs(n - ans(n)))", "t = int(input())\narr = []\nfor i in range(1, 33):\n    for j in range(i):\n        arr.append((1 << i) + (1 << j))\narr.sort()\n\ndef ans(n):\n    (low, high) = (0, len(arr))\n    (res, diff) = (float('inf'), float('inf'))\n    while low <= high:\n        mid = (low + high) // 2\n        currdiff = abs(n - arr[mid])\n        if currdiff < diff:\n            diff = currdiff\n            res = mid\n        if arr[mid] == n:\n            return n\n        if arr[mid] > n:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return arr[res]\nfor _ in range(t):\n    n = int(input())\n    print(abs(n - ans(n)))", "from bisect import bisect_right, bisect_left\nlst = set()\nfor i in range(31):\n    for j in range(31):\n        if i != j:\n            lst.add(2 ** i + 2 ** j)\nlst = sorted(list(lst))\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    t1 = bisect_left(lst, n)\n    t2 = bisect_right(lst, n)\n    print(min(abs(lst[t1] - n), abs(lst[t2 - 1] - n)))", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    l = 0\n    h = 1\n    while math.floor(N / 2 ** h) > 0:\n        h += 1\n    ans = 10 ** 9 + 1\n    while l < h:\n        cnt = 2 ** l + 2 ** h\n        ans = min(abs(cnt - N), ans)\n        if cnt == N:\n            break\n        elif cnt < N:\n            l += 1\n        else:\n            h -= 1\n    print(ans)", "lst = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            lst.append(2 ** i + 2 ** j)\nl = sorted(list(set(lst)))\n\ndef bin_search(x):\n    low = 0\n    high = len(l) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if x < l[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return min(abs(x - l[low]), abs(x - l[low - 1]), abs(x - l[low + 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = bin_search(n)\n    if n not in d:\n        print(a)\n        d[n] = a\n    else:\n        print(d[n])", "lst = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            lst.append(2 ** i + 2 ** j)\nl = sorted(list(set(lst)))\n\ndef bin_search(x):\n    low = 0\n    high = len(l) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if x < l[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return min(abs(x - l[low]), abs(x - l[low - 1]), abs(x - l[low + 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = bin_search(n)\n    if n not in d:\n        print(a)\n        d[n] = a\n    else:\n        print(d[n])", "lst = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            lst.append(2 ** i + 2 ** j)\nl = sorted(list(set(lst)))\n\ndef bin_search(x):\n    low = 0\n    high = len(l) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if x < l[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return min(abs(x - l[low]), abs(x - l[low - 1]), abs(x - l[low + 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = bin_search(n)\n    if n not in d:\n        print(a)\n        d[n] = a\n    else:\n        print(d[n])", "lst = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            lst.append(2 ** i + 2 ** j)\nl = sorted(list(set(lst)))\n\ndef bin_search(x):\n    low = 0\n    high = len(l) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if x < l[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return min(abs(x - l[low]), abs(x - l[low - 1]), abs(x - l[low + 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = bin_search(n)\n    if n not in d:\n        print(a)\n        d[n] = a\n    else:\n        print(d[n])", "lst = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            lst.append(2 ** i + 2 ** j)\nl = sorted(list(set(lst)))\n\ndef bin_search(x):\n    low = 0\n    high = len(l) - 1\n    while low < high:\n        mid = low + (high - low) // 2\n        if x < l[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return min(abs(x - l[low]), abs(x - l[low - 1]), abs(x - l[low + 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    a = bin_search(n)\n    if n not in d:\n        print(a)\n        d[n] = a\n    else:\n        print(d[n])", "l = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            l.append(2 ** i + 2 ** j)\nla = sorted(list(set(l)))\n\ndef binary(x):\n    lo = 0\n    high = len(la) - 1\n    while lo < high:\n        mid = (lo + high) // 2\n        if x < la[mid]:\n            high = mid - 1\n        else:\n            lo = mid + 1\n    return min(abs(x - la[lo]), abs(x - la[lo + 1]), abs(x - la[lo - 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    p = binary(n)\n    if n not in d:\n        print(p)\n        d[n] = p\n    else:\n        print(d[n])", "l = []\nfor i in range(32):\n    for j in range(32):\n        if i != j:\n            l.append(2 ** i + 2 ** j)\nla = sorted(list(set(l)))\n\ndef binary(x):\n    lo = 0\n    high = len(la) - 1\n    while lo < high:\n        mid = (lo + high) // 2\n        if x < la[mid]:\n            high = mid - 1\n        else:\n            lo = mid + 1\n    return min(abs(x - la[lo]), abs(x - la[lo + 1]), abs(x - la[lo - 1]))\nd = {}\nfor _ in range(int(input())):\n    n = int(input())\n    p = binary(n)\n    if n not in d:\n        print(p)\n        d[n] = p\n    else:\n        print(d[n])", "from sys import stdin, stdout, maxsize\nfrom bisect import bisect_left, bisect_right, bisect\nl = []\nfor i in range(0, 31):\n    for j in range(0, 31):\n        if i != j:\n            l.append(2 ** i + 2 ** j)\nla = sorted(list(set(l)))\n\ndef binary(x):\n    lo = 0\n    high = len(la) - 1\n    while lo < high:\n        mid = (lo + high) // 2\n        if la[mid] < n:\n            lo = mid + 1\n        else:\n            high = mid - 1\n    return min(abs(x - la[lo]), abs(x - la[lo + 1]), abs(x - la[lo - 1]))\nq = int(stdin.readline())\nd = {}\nfor _ in range(q):\n    n = int(stdin.readline())\n    if n not in d:\n        z = binary(n)\n        print(z)\n        d[n] = z\n    else:\n        print(d[n])", "import math\ntest = int(input())\nwhile test != 0:\n    data = int(input())\n    if data == 1:\n        print(2)\n        test -= 1\n        continue\n    low = math.floor(math.log(data, 2))\n    high = math.ceil(math.log(data, 2))\n    if high == low:\n        print(1)\n        test -= 1\n        continue\n    pvt = math.log(abs(data - pow(2, low)), 2)\n    low1 = math.floor(pvt)\n    high1 = math.ceil(pvt)\n    a = abs(data - (pow(2, low1) + pow(2, low)))\n    b = abs(data - (pow(2, low) + pow(2, high1)))\n    to_sub = 0\n    flag = 0\n    if high1 != low:\n        if a <= b:\n            to_sub = a\n        else:\n            to_sub = b\n    else:\n        to_sub = a\n    if to_sub <= abs(data - (pow(2, high) + 1)):\n        print(to_sub)\n    else:\n        print(abs(data - (pow(2, high) + 1)))\n    test -= 1", "l = []\nfor i in range(31):\n    for j in range(i + 1, 31):\n        l.append(2 ** i + 2 ** j)\nl.sort()\n\ndef getClosest(val1, val2, target):\n    if target - val1 >= val2 - target:\n        return val2\n    else:\n        return val1\n\ndef findClosest(l1, target):\n    i = 0\n    j = l1\n    mid = 0\n    while i < j:\n        mid = (i + j) // 2\n        if l[mid] == target:\n            return l[mid]\n        if target < l[mid]:\n            if mid > 0 and target > l[mid - 1]:\n                return getClosest(l[mid - 1], l[mid], target)\n            j = mid\n        else:\n            if mid < n - 1 and target < l[mid + 1]:\n                return getClosest(l[mid], l[mid + 1], target)\n            i = mid + 1\n    return arr[mid]\nfor t in range(int(input())):\n    n = int(input())\n    l1 = len(l)\n    ans = 0\n    if n <= 3:\n        print(3 - n)\n    else:\n        print(abs(findClosest(l1, n) - n))", "l = []\nfor i in range(31):\n    for j in range(i + 1, 31):\n        l.append(2 ** i + 2 ** j)\nl1 = len(l)\nl.sort()\nfor t in range(int(input())):\n    n = int(input())\n    ans = 0\n    if n <= 3:\n        print(3 - n)\n    else:\n        for i in range(l1):\n            if l[i] >= n:\n                ans = min(l[i] - n, n - l[i - 1])\n                break\n        print(ans)", "import math\nt = int(input())\nfor x in range(t):\n    p = int(input())\n    a = int(math.log(p, 2))\n    b = int(pow(2, a))\n    l = abs(p - b)\n    if p == 1:\n        print(2)\n        continue\n    if p == 4:\n        print(1)\n        continue\n    if p == 2:\n        print(1)\n        continue\n    if l == 0:\n        print(1)\n        continue\n    else:\n        c = math.ceil(math.log(l) / math.log(2))\n        d = math.floor(math.log(l) / math.log(2))\n        e = abs(p - (b + pow(2, c)))\n        f = abs(p - (b + pow(2, d)))\n        if a == c and abs(p - (1 + pow(2, c + 1))) < f:\n            print(min(e, f) + 1)\n        else:\n            print(min(e, f))", "def bin(start, end):\n    while start < end:\n        mid = (start + end) // 2\n        if la[mid] < n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return min(abs(n - la[start]), abs(n - la[start + 1]), abs(n - la[start - 1]))\nla = []\nfor i in range(35):\n    for j in range(35):\n        if i != j:\n            la.append(2 ** i + 2 ** j)\nla = sorted(list(set(la)))\nhash = {}\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mini = 10 ** 18\n    if n not in hash:\n        z = bin(0, len(la) - 1)\n        print(z)\n        hash[n] = z\n    else:\n        print(hash[n])", "a = [1, 2]\nfor i in range(29):\n    a.append(a[-1] * 2)\nc = []\nfor i in range(len(a) - 1):\n    k = a[i]\n    for j in range(i + 1, len(a)):\n        c.append(k + a[j])\nc.sort()\nfor i in range(int(input())):\n    l = int(input())\n    if l <= 3:\n        print(3 - l)\n    else:\n        for j in range(465):\n            if c[j] >= l:\n                print(min(c[j] - l, l - c[j - 1]))\n                break", "import bisect\na = []\nfor i in range(0, 31):\n    for j in range(i + 1, 31):\n        x = (1 << i) + (1 << j)\n        a.append(x)\na = sorted(a)\nfor i in range(int(input())):\n    N = int(input())\n    k = bisect.bisect(a, N, 0, len(a))\n    if k <= 464 and k >= 1:\n        print(min(a[k] - N, N - a[k - 1]))\n    elif k < 1:\n        print(a[k] - N)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    c1 = math.ceil(math.log(n, 2))\n    c2 = math.floor(math.log(n, 2))\n    if n == 1:\n        print(2)\n    elif c1 == c2:\n        print(1)\n    else:\n        k = n - pow(2, c2)\n        c3 = math.ceil(math.log(k, 2))\n        c4 = math.floor(math.log(k, 2))\n        if c3 == c4:\n            print(0)\n        else:\n            if c2 != c3:\n                ans = pow(2, c3) + pow(2, c2) - n\n            else:\n                ans = pow(2, c3) + pow(2, c2) + 1 - n\n            res = n - pow(2, c4) - pow(2, c2)\n            if ans >= res:\n                print(res)\n            else:\n                print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    c1 = math.ceil(math.log(n, 2))\n    c2 = math.floor(math.log(n, 2))\n    if n == 1:\n        print(2)\n    elif c1 == c2:\n        print(1)\n    else:\n        k = n - pow(2, c2)\n        c3 = math.ceil(math.log(k, 2))\n        c4 = math.floor(math.log(k, 2))\n        if c3 == c4:\n            print(0)\n        else:\n            if c2 != c3:\n                ans = pow(2, c3) + pow(2, c2) - n\n            else:\n                ans = pow(2, c3) + pow(2, c2) + 1 - n\n            res = n - pow(2, c4) - pow(2, c2)\n            if ans >= res:\n                print(res)\n            else:\n                print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    c1 = math.ceil(math.log(n, 2))\n    c2 = math.floor(math.log(n, 2))\n    if n == 1:\n        print(2)\n    elif c1 == c2:\n        print(1)\n    else:\n        k = n - pow(2, c2)\n        c3 = math.ceil(math.log(k, 2))\n        c4 = math.floor(math.log(k, 2))\n        if c3 == c4:\n            print(0)\n        else:\n            if c2 != c3:\n                ans = pow(2, c3) + pow(2, c2) - n\n            else:\n                ans = pow(2, c3) + pow(2, c2) + 1 - n\n            res = n - pow(2, c4) - pow(2, c2)\n            if ans >= res:\n                print(res)\n            else:\n                print(ans)", "import bisect\n\ndef find_le(a, x):\n    i = bisect.bisect_right(a, x)\n    if i:\n        return a[i - 1]\n\ndef find_gr(a, x):\n    i = bisect.bisect_right(a, x)\n    if i != len(a):\n        return a[i]\nl = list()\nfor i in range(0, 31):\n    for j in range(0, 31):\n        if i != j:\n            l.append(2 ** i + 2 ** j)\nl.sort()\nt = int(input())\nfor i in range(0, t):\n    N = int(input())\n    ans = 0\n    if N < 3:\n        ans = 3 - N\n    else:\n        ans = min(N - find_le(l, N), find_gr(l, N) - N)\n    print(ans)", "from bisect import bisect\nvals = []\nfor i in range(0, 32):\n    for j in range(i + 1, 32):\n        x = (1 << i) + (1 << j)\n        vals.append(x)\nvals.sort()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    index = bisect(vals, n)\n    if index <= 528 and index >= 1:\n        min1 = vals[index] - n\n        min2 = n - vals[index - 1]\n        print(min(min1, min2))\n    elif index < 1:\n        print(vals[index] - n)\n    else:\n        print(n - vals[528])", "import bisect\na = []\nfor i in range(0, 31):\n    for j in range(i + 1, 31):\n        x = (1 << i) + (1 << j)\n        a.append(x)\na = sorted(a)\nfor i in range(int(input())):\n    N = int(input())\n    k = bisect.bisect(a, N, 0, len(a))\n    if k <= 464 and k >= 1:\n        print(min(a[k] - N, N - a[k - 1]))\n    elif k < 1:\n        print(a[k] - N)\n    else:\n        print(N - a[464])", "from bisect import bisect\nvals = []\nfor i in range(0, 31):\n    for j in range(i + 1, 31):\n        x = (1 << i) + (1 << j)\n        vals.append(x)\nvals.sort()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    index = bisect(vals, n)\n    if index <= 464 and index >= 1:\n        min1 = vals[index] - n\n        min2 = n - vals[index - 1]\n        print(min(min1, min2))\n    elif index < 1:\n        print(vals[index] - n)\n    else:\n        print(n - vals[464])", "from bisect import bisect\nvals = []\nfor i in range(0, 31):\n    for j in range(i + 1, 31):\n        x = (1 << i) + (1 << j)\n        vals.append(x)\nvals.sort()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    j = 0\n    while True:\n        if vals[j] >= n:\n            break\n        j = j + 1\n    print(min(abs(vals[j] - n), abs(vals[j - 1] - n)))", "from bisect import bisect\nvals = []\nfor i in range(0, 32):\n    for j in range(i + 1, 32):\n        x = (1 << i) + (1 << j)\n        vals.append(x)\nvals.sort()\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    index = bisect(vals, n)\n    if index <= 528 and index >= 1:\n        min1 = vals[index] - n\n        min2 = n - vals[index - 1]\n        print(min(min1, min2))\n    elif index < 1:\n        print(vals[index] - n)\n    else:\n        print(n - vals[528])", "from bisect import bisect\nvals = []\nfor i in range(0, 31):\n    for j in range(i + 1, 31):\n        x = (1 << i) + (1 << j)\n        vals.append(x)\nvals.sort()\nt = int(input())\nl = len(vals)\nfor i in range(t):\n    n = int(input())\n    index = bisect(vals, n)\n    if index <= l - 1 and index >= 1:\n        min1 = vals[index] - n\n        min2 = n - vals[index - 1]\n        print(min(min1, min2))\n    elif index < 1:\n        print(vals[index] - n)\n    else:\n        print(n - vals[l - 1])", "from sys import stdin\nNum = [3, 5, 6, 9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96, 129, 130, 132, 136, 144, 160, 192, 257, 258, 260, 264, 272, 288, 320, 384, 513, 514, 516, 520, 528, 544, 576, 640, 768, 1025, 1026, 1028, 1032, 1040, 1056, 1088, 1152, 1280, 1536, 2049, 2050, 2052, 2056, 2064, 2080, 2112, 2176, 2304, 2560, 3072, 4097, 4098, 4100, 4104, 4112, 4128, 4160, 4224, 4352, 4608, 5120, 6144, 8193, 8194, 8196, 8200, 8208, 8224, 8256, 8320, 8448, 8704, 9216, 10240, 12288, 16385, 16386, 16388, 16392, 16400, 16416, 16448, 16512, 16640, 16896, 17408, 18432, 20480, 24576, 32769, 32770, 32772, 32776, 32784, 32800, 32832, 32896, 33024, 33280, 33792, 34816, 36864, 40960, 49152, 65537, 65538, 65540, 65544, 65552, 65568, 65600, 65664, 65792, 66048, 66560, 67584, 69632, 73728, 81920, 98304, 131073, 131074, 131076, 131080, 131088, 131104, 131136, 131200, 131328, 131584, 132096, 133120, 135168, 139264, 147456, 163840, 196608, 262145, 262146, 262148, 262152, 262160, 262176, 262208, 262272, 262400, 262656, 263168, 264192, 266240, 270336, 278528, 294912, 327680, 393216, 524289, 524290, 524292, 524296, 524304, 524320, 524352, 524416, 524544, 524800, 525312, 526336, 528384, 532480, 540672, 557056, 589824, 655360, 786432, 1048577, 1048578, 1048580, 1048584, 1048592, 1048608, 1048640, 1048704, 1048832, 1049088, 1049600, 1050624, 1052672, 1056768, 1064960, 1081344, 1114112, 1179648, 1310720, 1572864, 2097153, 2097154, 2097156, 2097160, 2097168, 2097184, 2097216, 2097280, 2097408, 2097664, 2098176, 2099200, 2101248, 2105344, 2113536, 2129920, 2162688, 2228224, 2359296, 2621440, 3145728, 4194305, 4194306, 4194308, 4194312, 4194320, 4194336, 4194368, 4194432, 4194560, 4194816, 4195328, 4196352, 4198400, 4202496, 4210688, 4227072, 4259840, 4325376, 4456448, 4718592, 5242880, 6291456, 8388609, 8388610, 8388612, 8388616, 8388624, 8388640, 8388672, 8388736, 8388864, 8389120, 8389632, 8390656, 8392704, 8396800, 8404992, 8421376, 8454144, 8519680, 8650752, 8912896, 9437184, 10485760, 12582912, 16777217, 16777218, 16777220, 16777224, 16777232, 16777248, 16777280, 16777344, 16777472, 16777728, 16778240, 16779264, 16781312, 16785408, 16793600, 16809984, 16842752, 16908288, 17039360, 17301504, 17825792, 18874368, 20971520, 25165824, 33554433, 33554434, 33554436, 33554440, 33554448, 33554464, 33554496, 33554560, 33554688, 33554944, 33555456, 33556480, 33558528, 33562624, 33570816, 33587200, 33619968, 33685504, 33816576, 34078720, 34603008, 35651584, 37748736, 41943040, 50331648, 67108865, 67108866, 67108868, 67108872, 67108880, 67108896, 67108928, 67108992, 67109120, 67109376, 67109888, 67110912, 67112960, 67117056, 67125248, 67141632, 67174400, 67239936, 67371008, 67633152, 68157440, 69206016, 71303168, 75497472, 83886080, 100663296, 134217729, 134217730, 134217732, 134217736, 134217744, 134217760, 134217792, 134217856, 134217984, 134218240, 134218752, 134219776, 134221824, 134225920, 134234112, 134250496, 134283264, 134348800, 134479872, 134742016, 135266304, 136314880, 138412032, 142606336, 150994944, 167772160, 201326592, 268435457, 268435458, 268435460, 268435464, 268435472, 268435488, 268435520, 268435584, 268435712, 268435968, 268436480, 268437504, 268439552, 268443648, 268451840, 268468224, 268500992, 268566528, 268697600, 268959744, 269484032, 270532608, 272629760, 276824064, 285212672, 301989888, 335544320, 402653184, 536870913, 536870914, 536870916, 536870920, 536870928, 536870944, 536870976, 536871040, 536871168, 536871424, 536871936, 536872960, 536875008, 536879104, 536887296, 536903680, 536936448, 537001984, 537133056, 537395200, 537919488, 538968064, 541065216, 545259520, 553648128, 570425344, 603979776, 671088640, 805306368, 1073741825, 1073741826, 1073741828, 1073741832, 1073741840, 1073741856, 1073741888, 1073741952, 1073742080, 1073742336, 1073742848, 1073743872, 1073745920, 1073750016, 1073758208, 1073774592, 1073807360, 1073872896, 1074003968, 1074266112, 1074790400, 1075838976, 1077936128, 1082130432, 1090519040, 1107296256, 1140850688, 1207959552, 1342177280, 1610612736]\nt = len(Num)\nT = int(stdin.readline())\nfor _ in range(T):\n    n = int(stdin.readline())\n    (l, h) = (0, t - 1)\n    while l < h:\n        m = (l + h) // 2\n        if n == Num[m]:\n            break\n        elif n > Num[m]:\n            l = m + 1\n        else:\n            h = m\n    print(min(abs(n - Num[m - 1]), abs(n - Num[m]), abs(Num[m + 1] - n)))", "Num = [3, 5, 6, 9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96, 129, 130, 132, 136, 144, 160, 192, 257, 258, 260, 264, 272, 288, 320, 384, 513, 514, 516, 520, 528, 544, 576, 640, 768, 1025, 1026, 1028, 1032, 1040, 1056, 1088, 1152, 1280, 1536, 2049, 2050, 2052, 2056, 2064, 2080, 2112, 2176, 2304, 2560, 3072, 4097, 4098, 4100, 4104, 4112, 4128, 4160, 4224, 4352, 4608, 5120, 6144, 8193, 8194, 8196, 8200, 8208, 8224, 8256, 8320, 8448, 8704, 9216, 10240, 12288, 16385, 16386, 16388, 16392, 16400, 16416, 16448, 16512, 16640, 16896, 17408, 18432, 20480, 24576, 32769, 32770, 32772, 32776, 32784, 32800, 32832, 32896, 33024, 33280, 33792, 34816, 36864, 40960, 49152, 65537, 65538, 65540, 65544, 65552, 65568, 65600, 65664, 65792, 66048, 66560, 67584, 69632, 73728, 81920, 98304, 131073, 131074, 131076, 131080, 131088, 131104, 131136, 131200, 131328, 131584, 132096, 133120, 135168, 139264, 147456, 163840, 196608, 262145, 262146, 262148, 262152, 262160, 262176, 262208, 262272, 262400, 262656, 263168, 264192, 266240, 270336, 278528, 294912, 327680, 393216, 524289, 524290, 524292, 524296, 524304, 524320, 524352, 524416, 524544, 524800, 525312, 526336, 528384, 532480, 540672, 557056, 589824, 655360, 786432, 1048577, 1048578, 1048580, 1048584, 1048592, 1048608, 1048640, 1048704, 1048832, 1049088, 1049600, 1050624, 1052672, 1056768, 1064960, 1081344, 1114112, 1179648, 1310720, 1572864, 2097153, 2097154, 2097156, 2097160, 2097168, 2097184, 2097216, 2097280, 2097408, 2097664, 2098176, 2099200, 2101248, 2105344, 2113536, 2129920, 2162688, 2228224, 2359296, 2621440, 3145728, 4194305, 4194306, 4194308, 4194312, 4194320, 4194336, 4194368, 4194432, 4194560, 4194816, 4195328, 4196352, 4198400, 4202496, 4210688, 4227072, 4259840, 4325376, 4456448, 4718592, 5242880, 6291456, 8388609, 8388610, 8388612, 8388616, 8388624, 8388640, 8388672, 8388736, 8388864, 8389120, 8389632, 8390656, 8392704, 8396800, 8404992, 8421376, 8454144, 8519680, 8650752, 8912896, 9437184, 10485760, 12582912, 16777217, 16777218, 16777220, 16777224, 16777232, 16777248, 16777280, 16777344, 16777472, 16777728, 16778240, 16779264, 16781312, 16785408, 16793600, 16809984, 16842752, 16908288, 17039360, 17301504, 17825792, 18874368, 20971520, 25165824, 33554433, 33554434, 33554436, 33554440, 33554448, 33554464, 33554496, 33554560, 33554688, 33554944, 33555456, 33556480, 33558528, 33562624, 33570816, 33587200, 33619968, 33685504, 33816576, 34078720, 34603008, 35651584, 37748736, 41943040, 50331648, 67108865, 67108866, 67108868, 67108872, 67108880, 67108896, 67108928, 67108992, 67109120, 67109376, 67109888, 67110912, 67112960, 67117056, 67125248, 67141632, 67174400, 67239936, 67371008, 67633152, 68157440, 69206016, 71303168, 75497472, 83886080, 100663296, 134217729, 134217730, 134217732, 134217736, 134217744, 134217760, 134217792, 134217856, 134217984, 134218240, 134218752, 134219776, 134221824, 134225920, 134234112, 134250496, 134283264, 134348800, 134479872, 134742016, 135266304, 136314880, 138412032, 142606336, 150994944, 167772160, 201326592, 268435457, 268435458, 268435460, 268435464, 268435472, 268435488, 268435520, 268435584, 268435712, 268435968, 268436480, 268437504, 268439552, 268443648, 268451840, 268468224, 268500992, 268566528, 268697600, 268959744, 269484032, 270532608, 272629760, 276824064, 285212672, 301989888, 335544320, 402653184, 536870913, 536870914, 536870916, 536870920, 536870928, 536870944, 536870976, 536871040, 536871168, 536871424, 536871936, 536872960, 536875008, 536879104, 536887296, 536903680, 536936448, 537001984, 537133056, 537395200, 537919488, 538968064, 541065216, 545259520, 553648128, 570425344, 603979776, 671088640, 805306368, 1073741825, 1073741826, 1073741828, 1073741832, 1073741840, 1073741856, 1073741888, 1073741952, 1073742080, 1073742336, 1073742848, 1073743872, 1073745920, 1073750016, 1073758208, 1073774592, 1073807360, 1073872896, 1074003968, 1074266112, 1074790400, 1075838976, 1077936128, 1082130432, 1090519040, 1107296256, 1140850688, 1207959552, 1342177280, 1610612736]\nt = len(Num)\nfor _ in range(int(input())):\n    n = int(input())\n    (l, h) = (0, t - 1)\n    while l < h:\n        m = (l + h) // 2\n        if n == Num[m]:\n            break\n        elif n > Num[m]:\n            l = m + 1\n        else:\n            h = m\n    print(min(abs(n - Num[m - 1]), abs(n - Num[m]), abs(n - Num[m + 1])))", "myList = [3, 5, 6, 9, 10, 12, 17, 18, 20, 24, 33, 34, 36, 40, 48, 65, 66, 68, 72, 80, 96, 129, 130, 132, 136, 144, 160, 192, 257, 258, 260, 264, 272, 288, 320, 384, 513, 514, 516, 520, 528, 544, 576, 640, 768, 1025, 1026, 1028, 1032, 1040, 1056, 1088, 1152, 1280, 1536, 2049, 2050, 2052, 2056, 2064, 2080, 2112, 2176, 2304, 2560, 3072, 4097, 4098, 4100, 4104, 4112, 4128, 4160, 4224, 4352, 4608, 5120, 6144, 8193, 8194, 8196, 8200, 8208, 8224, 8256, 8320, 8448, 8704, 9216, 10240, 12288, 16385, 16386, 16388, 16392, 16400, 16416, 16448, 16512, 16640, 16896, 17408, 18432, 20480, 24576, 32769, 32770, 32772, 32776, 32784, 32800, 32832, 32896, 33024, 33280, 33792, 34816, 36864, 40960, 49152, 65537, 65538, 65540, 65544, 65552, 65568, 65600, 65664, 65792, 66048, 66560, 67584, 69632, 73728, 81920, 98304, 131073, 131074, 131076, 131080, 131088, 131104, 131136, 131200, 131328, 131584, 132096, 133120, 135168, 139264, 147456, 163840, 196608, 262145, 262146, 262148, 262152, 262160, 262176, 262208, 262272, 262400, 262656, 263168, 264192, 266240, 270336, 278528, 294912, 327680, 393216, 524289, 524290, 524292, 524296, 524304, 524320, 524352, 524416, 524544, 524800, 525312, 526336, 528384, 532480, 540672, 557056, 589824, 655360, 786432, 1048577, 1048578, 1048580, 1048584, 1048592, 1048608, 1048640, 1048704, 1048832, 1049088, 1049600, 1050624, 1052672, 1056768, 1064960, 1081344, 1114112, 1179648, 1310720, 1572864, 2097153, 2097154, 2097156, 2097160, 2097168, 2097184, 2097216, 2097280, 2097408, 2097664, 2098176, 2099200, 2101248, 2105344, 2113536, 2129920, 2162688, 2228224, 2359296, 2621440, 3145728, 4194305, 4194306, 4194308, 4194312, 4194320, 4194336, 4194368, 4194432, 4194560, 4194816, 4195328, 4196352, 4198400, 4202496, 4210688, 4227072, 4259840, 4325376, 4456448, 4718592, 5242880, 6291456, 8388609, 8388610, 8388612, 8388616, 8388624, 8388640, 8388672, 8388736, 8388864, 8389120, 8389632, 8390656, 8392704, 8396800, 8404992, 8421376, 8454144, 8519680, 8650752, 8912896, 9437184, 10485760, 12582912, 16777217, 16777218, 16777220, 16777224, 16777232, 16777248, 16777280, 16777344, 16777472, 16777728, 16778240, 16779264, 16781312, 16785408, 16793600, 16809984, 16842752, 16908288, 17039360, 17301504, 17825792, 18874368, 20971520, 25165824, 33554433, 33554434, 33554436, 33554440, 33554448, 33554464, 33554496, 33554560, 33554688, 33554944, 33555456, 33556480, 33558528, 33562624, 33570816, 33587200, 33619968, 33685504, 33816576, 34078720, 34603008, 35651584, 37748736, 41943040, 50331648, 67108865, 67108866, 67108868, 67108872, 67108880, 67108896, 67108928, 67108992, 67109120, 67109376, 67109888, 67110912, 67112960, 67117056, 67125248, 67141632, 67174400, 67239936, 67371008, 67633152, 68157440, 69206016, 71303168, 75497472, 83886080, 100663296, 134217729, 134217730, 134217732, 134217736, 134217744, 134217760, 134217792, 134217856, 134217984, 134218240, 134218752, 134219776, 134221824, 134225920, 134234112, 134250496, 134283264, 134348800, 134479872, 134742016, 135266304, 136314880, 138412032, 142606336, 150994944, 167772160, 201326592, 268435457, 268435458, 268435460, 268435464, 268435472, 268435488, 268435520, 268435584, 268435712, 268435968, 268436480, 268437504, 268439552, 268443648, 268451840, 268468224, 268500992, 268566528, 268697600, 268959744, 269484032, 270532608, 272629760, 276824064, 285212672, 301989888, 335544320, 402653184, 536870913, 536870914, 536870916, 536870920, 536870928, 536870944, 536870976, 536871040, 536871168, 536871424, 536871936, 536872960, 536875008, 536879104, 536887296, 536903680, 536936448, 537001984, 537133056, 537395200, 537919488, 538968064, 541065216, 545259520, 553648128, 570425344, 603979776, 671088640, 805306368, 1073741825, 1073741826, 1073741828, 1073741832, 1073741840, 1073741856, 1073741888, 1073741952, 1073742080, 1073742336, 1073742848, 1073743872, 1073745920, 1073750016, 1073758208, 1073774592, 1073807360, 1073872896, 1074003968, 1074266112, 1074790400, 1075838976, 1077936128, 1082130432, 1090519040, 1107296256, 1140850688, 1207959552, 1342177280, 1610612736]\nfor _ in range(int(input())):\n    N = int(input())\n    if N in myList:\n        print(0)\n    else:\n        index_high = 0\n        index_low = 0\n        for i in range(len(myList)):\n            if myList[i] > N:\n                index_high = i\n                index_low = i - 1\n                break\n        print(min(abs(N - myList[index_high]), abs(N - myList[index_low])))", "var = []\nfor i in range(0, 32):\n    for j in range(i + 1, 32):\n        var.append(2 ** i + 2 ** j)\nvar.sort()\nfor i in range(int(input())):\n    n = int(input())\n    j = 0\n    while True:\n        if var[j] >= n:\n            break\n        j += 1\n    print(min(abs(var[j] - n), abs(var[j - 1] - n)))", "vals = []\nfor i in range(0, 32):\n    for j in range(i + 1, 32):\n        num = (1 << i) + (1 << j)\n        vals.append(num)\nvals.sort()\nfor t in range(int(input())):\n    num = int(input())\n    i = 0\n    while True:\n        if vals[i] >= num:\n            break\n        i += 1\n    print(min(abs(vals[i] - num), abs(vals[i - 1] - num)))", "def close(n):\n    for i in range(31):\n        if n == arr[i]:\n            return (arr[i], arr[i])\n        if n > arr[i] and n < arr[i + 1]:\n            return (arr[i], arr[i + 1])\n\ndef calx(n, min):\n    (a, b) = close(n)\n    if a == b and b == min:\n        return b / 2\n    if a == b:\n        return a\n    if b == min:\n        return a\n    if a == min:\n        return a / 2\n    if b - n >= n - a:\n        return a if a != min else a / 2\n    if b - n < n - a:\n        return b if b != min else b / 2\narr = []\nfor i in range(31):\n    arr.append(2 ** i)\nt = int(input())\nfor i in range(t):\n    num = int(input())\n    (min, max) = close(num)\n    if num == 1:\n        print('2')\n    elif min == max:\n        print('1')\n    else:\n        maxd = max + 1 - num\n        mind = abs(min + calx(num - min, min) - num)\n        diff = maxd if maxd < mind else mind\n        print(diff)", "import math\nT = int(input())\nfor i in range(0, T):\n    N = int(input())\n    if N == 1:\n        print(2)\n    elif N - 2 ** int(math.log2(N)) == 0:\n        print(1)\n    else:\n        x = int(math.log2(N))\n        diff1 = N - 2 ** x\n        y = int(math.log2(diff1))\n        diff2 = diff1 - 2 ** y\n        if diff2 <= 2 ** y - diff2:\n            print(diff2)\n        elif diff2 > 2 ** y - diff2 and x - y == 1:\n            print(2 ** y - diff2 + 1)\n        elif diff2 > 2 ** y - diff2:\n            print(2 ** y - diff2)", "import bisect\n\ndef find_le(a, x):\n    i = bisect.bisect_right(a, x)\n    if i:\n        return a[i - 1]\n    raise ValueError\n\ndef find_gt(a, x):\n    i = bisect.bisect_right(a, x)\n    if i != len(a):\n        return a[i]\n    raise ValueError\nl = list()\nfor i in range(0, 31):\n    for j in range(0, 31):\n        if i != j:\n            l.append(2 ** i + 2 ** j)\nl.sort()\nt = int(input())\nfor i in range(0, t):\n    N = int(input())\n    ans = 0\n    if N < 3:\n        ans = 3 - N\n    else:\n        ans = min(N - find_le(l, N), find_gt(l, N) - N)\n    print(ans)", "def cal(num):\n    x = 0\n    while pow(2, x) < num:\n        x = x + 1\n    return x - 1\nn = int(input())\nfor i in range(0, n):\n    num = int(input())\n    if num == 1:\n        print(2)\n    elif num == 2:\n        print(1)\n    else:\n        x = cal(num)\n        num1 = num - pow(2, x)\n        y = cal(num1)\n        if num > pow(2, x - 1) + pow(2, x):\n            print(min(num1 - pow(2, y), pow(2, x + 1) + 1 - num))\n        else:\n            print(min(num1 - pow(2, y), pow(2, y + 1) - num1))", "n = int(input())\nfor i in range(0, n):\n    num = int(input())\n    if num == 1:\n        print(2)\n    elif num == 2:\n        print(1)\n    else:\n        x = 0\n        while pow(2, x) < num:\n            x = x + 1\n        x = x - 1\n        num1 = num - pow(2, x)\n        y = 0\n        while pow(2, y) < num1:\n            y = y + 1\n        y = y - 1\n        if num > pow(2, x - 1) + pow(2, x):\n            print(min(num1 - pow(2, y), pow(2, x + 1) + 1 - num))\n        else:\n            print(min(num1 - pow(2, y), pow(2, y + 1) - num1))", "n = int(input())\nfor i in range(0, n):\n    num = int(input())\n    if num == 1:\n        print(2)\n    elif num == 2:\n        print(1)\n    else:\n        x = 0\n        while pow(2, x) < num:\n            x = x + 1\n        x = x - 1\n        num1 = num - pow(2, x)\n        y = 0\n        while pow(2, y) < num1:\n            y = y + 1\n        y = y - 1\n        if num > pow(2, x - 1) + pow(2, x):\n            print(min(num1 - pow(2, y), pow(2, x + 1) + 1 - num))\n        else:\n            print(min(num1 - pow(2, y), pow(2, y + 1) - num1))", "t = int(input())\nx = []\nfor i in range(0, 31):\n    for j in range(i + 1, 31):\n        k = (1 << i) + (1 << j)\n        x.append(k)\nx.sort()\n\ndef search(n):\n    i = int(0)\n    while i < len(x):\n        if x[i] > n:\n            break\n        i = i + 1\n    return i\nwhile t > 0:\n    n = int(input())\n    result = search(n)\n    m = int(0)\n    if result == 0:\n        m = x[0] - n\n    elif result == len(x):\n        m = n - x[result]\n    else:\n        a = x[result] - n\n        b = n - x[result - 1]\n        if a < b:\n            m = a\n        else:\n            m = b\n    print(m)\n    t -= 1", "import math\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    b = math.log(a, 2)\n    val = int(b)\n    if a == 1:\n        print('2')\n    elif val == b:\n        print('1')\n    else:\n        l = a - 2 ** val\n        c = int(math.log(l, 2))\n        g = l - 2 ** c\n        g3 = abs(l - 2 ** (c + 1))\n        g2 = 2 ** (val + 1) + 1\n        val_net = g2 - a\n        if c + 1 == val:\n            print(min(val_net, g))\n        else:\n            print(min(val_net, g, g3))", "import math\nT = int(input())\nfor i in range(T):\n    a = int(input())\n    b = math.log(a) / math.log(2)\n    val = int(b)\n    if a == 1:\n        print('2')\n    elif val == b:\n        print('1')\n    else:\n        rem = a - 2 ** val\n        c = int(math.log(rem) / math.log(2))\n        val_1 = rem - 2 ** c\n        val_3 = abs(rem - 2 ** (c + 1))\n        val_2 = 2 ** (val + 1) + 1\n        val_net = val_2 - a\n        if c + 1 == val:\n            print(min(val_net, val_1))\n        else:\n            print(min(val_net, val_1, val_3))", "from functools import reduce\nt = int(input())\nfor _ in range(t):\n    test_case = int(input())\n    if test_case != 1:\n        bin_test = bin(test_case)[2:]\n        n = reduce(lambda x, y: int(x) + int(y), bin_test)\n        index_first = len(bin_test) - 1\n        index_second = -1\n        for i in range(1, len(bin_test)):\n            if bin_test[i] == '1':\n                index_second = len(bin_test) - i - 1\n                break\n        output = 1 if n == 1 else 0\n        if n > 2:\n            mask = (1 << index_second) - 1\n            output = test_case & mask\n            shift = 1 << index_second + 1\n            mask2 = shift - 1\n            output2 = shift - (test_case & mask2)\n            if index_first == index_second + 1:\n                output2 += 1\n            if output > output2:\n                output = output2\n    else:\n        output = 2\n    print(output)"]