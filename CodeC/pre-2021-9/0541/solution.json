["def generate_sums(array):\n    cur_sum = 0\n    sums = [0] * len(array)\n    for i in range(len(array)):\n        cur_sum += array[i]\n        sums[i] = cur_sum\n    return sums\n\ndef dishdis(foods, cooks):\n    cook = cooks.pop()\n    previous = [1 if cook[0] <= food_count <= cook[1] else 0 for food_count in range(foods + 1)]\n    previous_sums = generate_sums(previous)\n    while cooks:\n        cook = cooks.pop()\n        current = [0] * (foods + 1)\n        for i in range(0, foods + 1):\n            interval_start = max(-1, i - cook[1] - 1)\n            interval_end = i - cook[0]\n            if interval_end < 0:\n                current[i] = 0\n            elif interval_start < 0:\n                current[i] = previous_sums[interval_end]\n            else:\n                current[i] = previous_sums[interval_end] - previous_sums[interval_start]\n        previous = current\n        previous_sums = generate_sums(previous)\n    return previous[foods] % 1000000007\nfor _ in range(int(input())):\n    (foods, cook_count) = [int(x) for x in input().split()]\n    cooks = [[int(x) for x in input().split()] for _ in range(cook_count)]\n    print(dishdis(foods, cooks))", "def generate_sums(array):\n    cur_sum = 0\n    sums = [0] * len(array)\n    for i in range(len(array)):\n        cur_sum += array[i]\n        sums[i] = cur_sum\n    return sums\n\ndef dishdis(foods, cooks):\n    cook = cooks.pop()\n    previous = [1 if cook[0] <= food_count <= cook[1] else 0 for food_count in range(foods + 1)]\n    previous_sums = generate_sums(previous)\n    while cooks:\n        cook = cooks.pop()\n        current = [0] * (foods + 1)\n        for i in range(0, foods + 1):\n            interval_start = max(-1, i - cook[1] - 1)\n            interval_end = i - cook[0]\n            if interval_end < 0:\n                current[i] = 0\n            elif interval_start < 0:\n                current[i] = previous_sums[interval_end]\n            else:\n                current[i] = previous_sums[interval_end] - previous_sums[interval_start]\n            current[i] %= 1000000007\n        previous = current\n        previous_sums = generate_sums(previous)\n    return previous[foods]\nfor _ in range(int(input())):\n    (foods, cook_count) = [int(x) for x in input().split()]\n    cooks = [[int(x) for x in input().split()] for _ in range(cook_count)]\n    print(dishdis(foods, cooks))", "def generate_sums(array):\n    cur_sum = 0\n    sums = [0] * len(array)\n    for i in range(len(array)):\n        cur_sum += array[i]\n        sums[i] = cur_sum\n    return sums\n\ndef dishdis(foods, cooks):\n    cook = cooks.pop()\n    previous = [1 if cook[0] <= food_count <= cook[1] else 0 for food_count in range(foods + 1)]\n    previous_sums = generate_sums(previous)\n    while cooks:\n        cook = cooks.pop()\n        current = [0] * (foods + 1)\n        for i in range(0, foods + 1):\n            interval_start = max(-1, i - cook[1] - 1)\n            interval_end = i - cook[0]\n            if interval_end < 0:\n                current[i] = 0\n            elif interval_start < 0:\n                current[i] = previous_sums[interval_end]\n            else:\n                current[i] = previous_sums[interval_end] - previous_sums[interval_start]\n            current[i] %= 1000000007\n        previous = current\n        previous_sums = generate_sums(previous)\n    return previous[foods]\nfor _ in range(int(input())):\n    (foods, cook_count) = [int(x) for x in input().split()]\n    cooks = [[int(x) for x in input().split()] for _ in range(cook_count)]\n    print(dishdis(foods, cooks))", "def generate_sums(array):\n    cur_sum = 0\n    sums = [0] * len(array)\n    for i in range(len(array)):\n        cur_sum += array[i]\n        sums[i] = cur_sum\n    return sums\n\ndef dishdis(foods, cooks):\n    cook = cooks.pop()\n    previous = [1 if cook[0] <= food_count <= cook[1] else 0 for food_count in range(foods + 1)]\n    previous_sums = generate_sums(previous)\n    while cooks:\n        cook = cooks.pop()\n        current = [0] * (foods + 1)\n        for i in range(0, foods + 1):\n            interval_start = max(-1, i - cook[1] - 1)\n            interval_end = i - cook[0]\n            if interval_end < 0:\n                current[i] = 0\n            elif interval_start < 0:\n                current[i] = previous_sums[interval_end]\n            else:\n                current[i] = previous_sums[interval_end] - previous_sums[interval_start]\n            current[i] %= 1000000007\n        previous = current\n        previous_sums = generate_sums(previous)\n    return previous[foods]\nfor _ in range(int(input())):\n    (foods, cook_count) = [int(x) for x in input().split()]\n    cooks = [[int(x) for x in input().split()] for _ in range(cook_count)]\n    print(dishdis(foods, cooks))", "def generate_sums(array):\n    cur_sum = 0\n    sums = [0] * len(array)\n    for i in range(len(array)):\n        cur_sum += array[i]\n        sums[i] = cur_sum\n    return sums\n\ndef dishdis(foods, cooks):\n    cook = cooks.pop()\n    previous = [1 if cook[0] <= food_count <= cook[1] else 0 for food_count in range(foods + 1)]\n    previous_sums = generate_sums(previous)\n    while cooks:\n        cook = cooks.pop()\n        current = [0] * (foods + 1)\n        for i in range(0, foods + 1):\n            interval_start = max(-1, i - cook[1] - 1)\n            interval_end = i - cook[0]\n            if interval_end < 0:\n                current[i] = 0\n            elif interval_start < 0:\n                current[i] = previous_sums[interval_end]\n            else:\n                current[i] = previous_sums[interval_end] - previous_sums[interval_start]\n            current[i] %= 1000000007\n        previous = current\n        previous_sums = generate_sums(previous)\n    return previous[foods]\nfor _ in range(int(input())):\n    (foods, cook_count) = [int(x) for x in input().split()]\n    cooks = [[int(x) for x in input().split()] for _ in range(cook_count)]\n    print(dishdis(foods, cooks))", "def generate_sums(array):\n    cur_sum = 0\n    sums = [0] * len(array)\n    for i in range(len(array)):\n        cur_sum += array[i]\n        sums[i] = cur_sum\n    return sums\n\ndef dishdis(foods, cooks):\n    cook = cooks.pop()\n    previous = [1 if cook[0] <= food_count <= cook[1] else 0 for food_count in range(foods + 1)]\n    previous_sums = generate_sums(previous)\n    while cooks:\n        cook = cooks.pop()\n        current = [0] * (foods + 1)\n        for i in range(0, foods + 1):\n            interval_start = max(-1, i - cook[1] - 1)\n            interval_end = i - cook[0]\n            if interval_end < 0:\n                current[i] = 0\n            elif interval_start < 0:\n                current[i] = previous_sums[interval_end]\n            else:\n                current[i] = previous_sums[interval_end] - previous_sums[interval_start]\n            current[i] %= 1000000007\n        previous = current\n        previous_sums = generate_sums(previous)\n    return previous[foods]\nfor _ in range(int(input())):\n    (foods, cook_count) = [int(x) for x in input().split()]\n    cooks = [[int(x) for x in input().split()] for _ in range(cook_count)]\n    print(dishdis(foods, cooks))"]