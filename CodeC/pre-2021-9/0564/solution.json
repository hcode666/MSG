["case = int(input())\nfor _ in range(case):\n    (n, m, q) = map(int, input().split(' '))\n    rows = {}\n    col = {}\n    for i in range(q):\n        (x, y) = map(int, input().split(' '))\n        if x not in rows:\n            rows[x] = 0\n        if y not in col:\n            col[y] = 0\n        rows[x] += 1\n        col[y] += 1\n    rowodds = 0\n    for key in rows:\n        if rows[key] & 1 == 1:\n            rowodds += 1\n    colodds = 0\n    for key in col:\n        if col[key] & 1 == 1:\n            colodds += 1\n    res = rowodds * m + colodds * n - rowodds * colodds * 2\n    print(res)", "tc = int(input())\nfor _ in range(tc):\n    inp = list(map(int, input().split()))\n    n = inp[0]\n    m = inp[1]\n    q = inp[2]\n    rows = [0] * (n + 1)\n    cols = [0] * (m + 1)\n    for i in range(q):\n        inp = list(map(int, input().split()))\n        x = inp[0]\n        y = inp[1]\n        rows[x] = not rows[x]\n        cols[y] = not cols[y]\n    colodd = 0\n    rowodd = 0\n    for i in cols:\n        if i:\n            colodd += 1\n    for i in rows:\n        if i:\n            rowodd += 1\n    print(colodd * (n - rowodd) + rowodd * (m - colodd))", "T = int(input())\nfor t in range(T):\n    (n, m, q) = map(int, input().split())\n    x = [0] * n\n    y = [0] * m\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        x[a] += 1\n        y[b] += 1\n    x_even_num = sum([i % 2 == 0 for i in x])\n    x_odd_num = n - x_even_num\n    y_even_num = sum([i % 2 == 0 for i in y])\n    y_odd_num = m - y_even_num\n    print(x_even_num * y_odd_num + x_odd_num * y_even_num)", "T = int(input())\nfor t in range(T):\n    (n, m, q) = map(int, input().split())\n    x = [0] * n\n    y = [0] * m\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        x[a] += 1\n        y[b] += 1\n    x_even_num = sum([i % 2 == 0 for i in x])\n    x_odd_num = n - x_even_num\n    y_even_num = sum([i % 2 == 0 for i in y])\n    y_odd_num = m - y_even_num\n    print(x_even_num * y_odd_num + x_odd_num * y_even_num)", "for _ in range(int(input())):\n    (N, M, Q) = list(map(int, input().split()))\n    (cols, rows) = [[0] * M, [0] * N]\n    for i in range(Q):\n        (X, Y) = [int(m) - 1 for m in input().split()]\n        cols[Y] += 1\n        rows[X] += 1\n    (nco, nro) = [0, 0]\n    for i in cols:\n        nco += i % 2\n    for j in rows:\n        nro += j % 2\n    print((len(rows) - nro) * nco + (len(cols) - nco) * nro)", "from collections import defaultdict\nfor _ in range(int(input())):\n    (N, M, Q) = list(map(int, input().split()))\n    cols = [0] * M\n    rows = [0] * N\n    for i in range(Q):\n        (X, Y) = list(map(int, input().split()))\n        X -= 1\n        Y -= 1\n        cols[Y] += 1\n        rows[X] += 1\n    nco = 0\n    nce = 0\n    nro = 0\n    nre = 0\n    for i in cols:\n        if i % 2 == 0:\n            nce += 1\n        else:\n            nco += 1\n    for j in rows:\n        if j % 2 == 0:\n            nre += 1\n        else:\n            nro += 1\n    print(nro * nce + nco * nre)", "from collections import Counter\n\ndef soln(n, m, q, rows, cols):\n    res = 0\n    r_counts = [0] * n\n    for i in rows:\n        r_counts[i - 1] += 1\n    c_counts = [0] * m\n    for i in cols:\n        c_counts[i - 1] += 1\n    r_odds = r_eves = 0\n    for i in r_counts:\n        if i & 1:\n            r_odds += 1\n        else:\n            r_eves += 1\n    c_odds = c_eves = 0\n    for i in c_counts:\n        if i & 1:\n            c_odds += 1\n        else:\n            c_eves += 1\n    res = r_odds * c_eves + r_eves * c_odds\n    return res\nfor _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = []\n    cols = []\n    for i in range(q):\n        (r, c) = map(int, input().split())\n        rows.append(r)\n        cols.append(c)\n    print(soln(n, m, q, rows, cols))", "for z in range(int(input())):\n    (n, m, o) = [int(x) for x in input().split()]\n    r = [0] * n\n    c = [0] * m\n    for i in range(o):\n        (p, q) = [int(x) for x in input().split()]\n        r[p - 1] += 1\n        c[q - 1] += 1\n    (re, ce) = (0, 0)\n    for x in r:\n        if x % 2 == 0:\n            re += 1\n    for x in c:\n        if x % 2 == 0:\n            ce += 1\n    print(re * (m - ce) + ce * (n - re))", "for z in range(int(input())):\n    (n, m, o) = [int(x) for x in input().split()]\n    r = [0] * n\n    c = [0] * m\n    for i in range(o):\n        (p, q) = [int(x) for x in input().split()]\n        r[p - 1] += 1\n        c[q - 1] += 1\n    (re, ce) = (0, 0)\n    for x in r:\n        if x % 2 == 0:\n            re += 1\n    for x in c:\n        if x % 2 == 0:\n            ce += 1\n    print(re * (m - ce) + ce * (n - re))", "for z in range(int(input())):\n    (n, m, o) = [int(x) for x in input().split()]\n    r = [0] * n\n    c = [0] * m\n    for i in range(o):\n        (p, q) = [int(x) for x in input().split()]\n        r[p - 1] += 1\n        c[q - 1] += 1\n    (re, ce) = (0, 0)\n    for x in r:\n        if x % 2 == 0:\n            re += 1\n    for x in c:\n        if x % 2 == 0:\n            ce += 1\n    print(re * (m - ce) + ce * (n - re))", "for z in range(int(input())):\n    (n, m, o) = [int(x) for x in input().split()]\n    r = [0] * n\n    c = [0] * m\n    for i in range(o):\n        (p, q) = [int(x) for x in input().split()]\n        r[p - 1] += 1\n        c[q - 1] += 1\n    (re, ce) = (0, 0)\n    for x in r:\n        if x % 2 == 0:\n            re += 1\n    for x in c:\n        if x % 2 == 0:\n            ce += 1\n    print(re * (m - ce) + ce * (n - re))", "t = int(input())\nfor _ in range(t):\n    (N, M, Q) = map(int, input().split())\n    x_count = [0 for i in range(N)]\n    y_count = [0 for j in range(M)]\n    for _ in range(Q):\n        (x, y) = input().split()\n        x_count[int(x) - 1] += 1\n        y_count[int(y) - 1] += 1\n    x_count_odd = 0\n    x_count_eve = 0\n    y_count_odd = 0\n    y_count_eve = 0\n    for i in range(N):\n        if x_count[i] % 2 == 1:\n            x_count_odd += 1\n        else:\n            x_count_eve += 1\n    for j in range(M):\n        if y_count[j] % 2 == 1:\n            y_count_odd += 1\n        else:\n            y_count_eve += 1\n    print(x_count_odd * y_count_eve + x_count_eve * y_count_odd)", "T = int(input())\nfor i in range(T):\n    (N, M, Q) = map(int, input().split())\n    r = [0] * N\n    c = [0] * M\n    for k in range(Q):\n        (X, Y) = map(lambda a: int(a) - 1, input().split())\n        r[X] += 1\n        c[Y] += 1\n    (odd, even) = (0, 0)\n    for l in range(N):\n        if r[l] & 1:\n            odd += 1\n    for m in range(M):\n        if c[m] & 1 == 0:\n            even += 1\n    print(odd * even + (N - odd) * (M - even))", "T = int(input())\nfor _ in range(T):\n    (N, M, Q) = map(int, input().strip().split())\n    row = [0] * (N + 1)\n    col = [0] * (M + 1)\n    for _ in range(Q):\n        (X, Y) = map(int, input().strip().split())\n        row[X] += 1\n        col[Y] += 1\n    (row_e, row_o, col_e, col_o) = (0, 0, 0, 0)\n    for i in range(1, N + 1):\n        if row[i] & 1 == 0:\n            row_e += 1\n        else:\n            row_o += 1\n    for i in range(1, M + 1):\n        if col[i] & 1 == 0:\n            col_e += 1\n        else:\n            col_o += 1\n    val = row_e * col_o + col_e * row_o\n    print(val)", "T = int(input())\nfor _ in range(T):\n    (N, M, Q) = map(int, input().strip().split())\n    row = [0] * (N + 1)\n    col = [0] * (M + 1)\n    for _ in range(Q):\n        (X, Y) = map(int, input().strip().split())\n        row[X] += 1\n        col[Y] += 1\n    (row_e, row_o, col_e, col_o) = (0, 0, 0, 0)\n    for i in range(1, N + 1):\n        if row[i] & 1 == 0:\n            row_e += 1\n        else:\n            row_o += 1\n    for i in range(1, M + 1):\n        if col[i] & 1 == 0:\n            col_e += 1\n        else:\n            col_o += 1\n    val = row_e * col_o + col_e * row_o\n    print(val)", "T = int(input())\nfor _ in range(T):\n    (N, M, Q) = map(int, input().strip().split())\n    row = [0] * (N + 1)\n    col = [0] * (M + 1)\n    for _ in range(Q):\n        (X, Y) = map(int, input().strip().split())\n        row[X] += 1\n        col[Y] += 1\n    (row_e, row_o, col_e, col_o) = (0, 0, 0, 0)\n    for i in range(1, N + 1):\n        if row[i] & 1 == 0:\n            row_e += 1\n        else:\n            row_o += 1\n    for i in range(1, M + 1):\n        if col[i] & 1 == 0:\n            col_e += 1\n        else:\n            col_o += 1\n    val = row_e * col_o + col_e * row_o\n    print(val)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    x = dict.fromkeys(list(range(1, n + 1)), True)\n    y = dict.fromkeys(list(range(1, m + 1)), True)\n    xc = yc = 0\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        x[a] = not x[a]\n        y[b] = not y[b]\n    for i in x:\n        if x[i]:\n            xc += 1\n    for i in y:\n        if y[i]:\n            yc += 1\n    print(xc * (m - yc) + yc * (n - xc))", "T = int(input())\nfor _ in range(T):\n    (N, M, Q) = map(int, input().split())\n    x_count = [0 for i in range(N)]\n    y_count = [0 for j in range(M)]\n    for _ in range(Q):\n        (x, y) = input().split()\n        x_count[int(x) - 1] += 1\n        y_count[int(y) - 1] += 1\n    x_count_odd = 0\n    x_count_eve = 0\n    y_count_odd = 0\n    y_count_eve = 0\n    for i in range(N):\n        if x_count[i] % 2 == 1:\n            x_count_odd += 1\n        else:\n            x_count_eve += 1\n    for j in range(M):\n        if y_count[j] % 2 == 1:\n            y_count_odd += 1\n        else:\n            y_count_eve += 1\n    print(x_count_odd * y_count_eve + x_count_eve * y_count_odd)", "T = int(input())\nfor _ in range(T):\n    (N, M, Q) = map(int, input().split())\n    x_count = [0 for i in range(N)]\n    y_count = [0 for j in range(M)]\n    for _ in range(Q):\n        (x, y) = input().split()\n        x_count[int(x) - 1] += 1\n        y_count[int(y) - 1] += 1\n    x_count_odd = 0\n    x_count_eve = 0\n    y_count_odd = 0\n    y_count_eve = 0\n    for i in range(N):\n        if x_count[i] % 2 == 1:\n            x_count_odd += 1\n        else:\n            x_count_eve += 1\n    for j in range(M):\n        if y_count[j] % 2 == 1:\n            y_count_odd += 1\n        else:\n            y_count_eve += 1\n    print(x_count_odd * y_count_eve + x_count_eve * y_count_odd)", "t = int(input())\nfor i in range(t):\n    (n, m, q) = map(int, input().split())\n    a = [0] * n\n    b = [0] * m\n    for j in range(q):\n        (r, c) = map(int, input().split())\n        a[r - 1] += 1\n        b[c - 1] += 1\n    o1 = 0\n    e1 = 0\n    for k in a:\n        if k % 2 == 0:\n            e1 += 1\n        else:\n            o1 += 1\n    o2 = 0\n    e2 = 0\n    for z in b:\n        if z % 2 == 0:\n            e2 += 1\n        else:\n            o2 += 1\n    print(e2 * o1 + e1 * o2)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = [0] * n\n    cols = [0] * m\n    for i in range(q):\n        (row, col) = map(int, input().split())\n        rows[row - 1] += 1\n        cols[col - 1] += 1\n    countOddr = 0\n    countEvenr = 0\n    for num in rows:\n        if num % 2 == 0:\n            countEvenr += 1\n        else:\n            countOddr += 1\n    countOddc = 0\n    countEvenc = 0\n    for num in cols:\n        if num % 2 == 0:\n            countEvenc += 1\n        else:\n            countOddc += 1\n    print(countEvenc * countOddr + countEvenr * countOddc)", "T = int(input())\nfor t in range(T):\n    (n, m, Q) = map(int, input().split())\n    arrx = [0 for i in range(n)]\n    arry = [0 for i in range(m)]\n    for q in range(Q):\n        (a, b) = map(int, input().split())\n        arrx[a - 1] += 1\n        arry[b - 1] += 1\n    dic = {'cnt_ev': 0, 'cnt_odd': 0}\n    for i in arrx:\n        if i % 2 == 0:\n            dic['cnt_ev'] += 1\n        else:\n            dic['cnt_odd'] += 1\n    ans = 0\n    for i in arry:\n        if i % 2 == 0:\n            ans += dic['cnt_odd']\n        else:\n            ans += dic['cnt_ev']\n    print(ans)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = [0 for i in range(n)]\n    cols = [0 for i in range(m)]\n    for k in range(q):\n        (x, y) = map(int, input().split())\n        if rows[x - 1] == 1:\n            rows[x - 1] = 0\n        else:\n            rows[x - 1] = 1\n        if cols[y - 1] == 1:\n            cols[y - 1] = 0\n        else:\n            cols[y - 1] = 1\n    one_rows = 0\n    one_cols = 0\n    for i in rows:\n        if i == 1:\n            one_rows += 1\n    for j in cols:\n        if j == 1:\n            one_cols += 1\n    res = one_rows * m + one_cols * n - 2 * (one_rows * one_cols)\n    print(res)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rn = [0] * n\n    rm = [0] * m\n    for __ in range(q):\n        (i, j) = map(int, input().split())\n        rn[i - 1] ^= 1\n        rm[j - 1] ^= 1\n    r = rn.count(1)\n    c = rm.count(1)\n    print(r * m + c * n - 2 * r * c)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rn = [0 for i in range(n)]\n    rm = [0 for i in range(m)]\n    for __ in range(q):\n        (i, j) = map(int, input().split())\n        rn[i - 1] ^= 1\n        rm[j - 1] ^= 1\n    r = rn.count(1)\n    c = rm.count(1)\n    print(r * m + c * n - 2 * r * c)", "T = int(input())\nfor _ in range(T):\n    (N, M, Q) = map(int, input().strip().split())\n    row = [0] * (N + 1)\n    col = [0] * (M + 1)\n    for _ in range(Q):\n        (X, Y) = map(int, input().strip().split())\n        row[X] += 1\n        col[Y] += 1\n    (row_e, row_o, col_e, col_o) = (0, 0, 0, 0)\n    for i in range(1, N + 1):\n        if row[i] & 1 == 0:\n            row_e += 1\n        else:\n            row_o += 1\n    for i in range(1, M + 1):\n        if col[i] & 1 == 0:\n            col_e += 1\n        else:\n            col_o += 1\n    val = row_e * col_o + col_e * row_o\n    print(val)", "T = int(input())\nfor _ in range(T):\n    (N, M, Q) = map(int, input().strip().split())\n    row = [0] * (N + 1)\n    col = [0] * (M + 1)\n    for _ in range(Q):\n        (X, Y) = map(int, input().strip().split())\n        row[X] += 1\n        col[Y] += 1\n    (row_e, row_o, col_e, col_o) = (0, 0, 0, 0)\n    for i in range(1, N + 1):\n        if row[i] & 1 == 0:\n            row_e += 1\n        else:\n            row_o += 1\n    for i in range(1, M + 1):\n        if col[i] & 1 == 0:\n            col_e += 1\n        else:\n            col_o += 1\n    val = row_e * col_o + col_e * row_o\n    print(val)", "def solve():\n    odds = len(x_cha) * m - 2 * len(x_cha) * len(y_cha) + n * len(y_cha)\n    print(odds)\nt = int(input())\nfor _ in range(t):\n    (n, m, q) = list(map(int, input().split()))\n    x_cha = set()\n    y_cha = set()\n    for i in range(q):\n        (x, y) = list(map(int, input().split()))\n        if x in x_cha:\n            x_cha.remove(x)\n        else:\n            x_cha.add(x)\n        if y in y_cha:\n            y_cha.remove(y)\n        else:\n            y_cha.add(y)\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "def solve():\n    odds = len(x_cha) * m - 2 * len(x_cha) * len(y_cha) + n * len(y_cha)\n    print(odds)\nt = int(input())\nfor _ in range(t):\n    (n, m, q) = list(map(int, input().split()))\n    x_cha = set()\n    y_cha = set()\n    for i in range(q):\n        (x, y) = list(map(int, input().split()))\n        if x in x_cha:\n            x_cha.remove(x)\n        else:\n            x_cha.add(x)\n        if y in y_cha:\n            y_cha.remove(y)\n        else:\n            y_cha.add(y)\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    for _ in tr():\n        (n, m, q) = sm()\n        rows = [0] * n\n        cols = [0] * m\n        for __ in range(q):\n            (x, y) = sm()\n            rows[x - 1] += 1\n            cols[y - 1] += 1\n        row_odd = 0\n        col_odd = 0\n        for i in rows:\n            if i & 1:\n                row_odd += 1\n        for i in cols:\n            if i & 1:\n                col_odd += 1\n        print((m - col_odd) * row_odd + (n - row_odd) * col_odd)\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows_cnt = [0] * (n + 1)\n    cols_cnt = [0] * (m + 1)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows_cnt[x] += 1\n        cols_cnt[y] += 1\n    odd_rows = 0\n    odd_cols = 0\n    even_rows = 0\n    even_cols = 0\n    for i in range(1, n + 1):\n        if rows_cnt[i] % 2 == 0:\n            even_rows += 1\n        else:\n            odd_rows += 1\n    for i in range(1, m + 1):\n        if cols_cnt[i] % 2 == 0:\n            even_cols += 1\n        else:\n            odd_cols += 1\n    val = odd_cols * even_rows + even_cols * odd_rows\n    print(val)", "T = int(input())\nfrom collections import Counter\n\ndef is_even(n):\n    if n % 2 == 0:\n        return True\n    else:\n        return False\nfor _ in range(T):\n    (N, M, Q) = list(map(int, input().split()))\n    (ls_xi, ls_yi) = ([], [])\n    (ctr_xi, ctr_yi) = (Counter(), Counter())\n    for _ in range(Q):\n        (xi, yi) = list(map(int, input().split()))\n        ctr_xi.update([xi])\n        ctr_yi.update([yi])\n    evenx = len(list(filter(is_even, ctr_xi.values())))\n    if len(ctr_xi) < N:\n        evenx = evenx + N - len(ctr_xi)\n    oddx = N - evenx\n    eveny = len(list(filter(is_even, ctr_yi.values())))\n    if len(ctr_yi) < M:\n        eveny = eveny + M - len(ctr_yi)\n    oddy = M - eveny\n    print(evenx * oddy + oddx * eveny)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, m, q) = map(int, input().split())\n        rows_cnt = [0] * (n + 1)\n        cols_cnt = [0] * (m + 1)\n        for _ in range(q):\n            (x, y) = map(int, input().split())\n            rows_cnt[x] += 1\n            cols_cnt[y] += 1\n        odd_rows = 0\n        odd_cols = 0\n        even_rows = 0\n        even_cols = 0\n        for i in range(1, n + 1):\n            if rows_cnt[i] % 2 == 0:\n                even_rows += 1\n            else:\n                odd_rows += 1\n        for i in range(1, m + 1):\n            if cols_cnt[i] % 2 == 0:\n                even_cols += 1\n            else:\n                odd_cols += 1\n        val = odd_cols * even_rows + even_cols * odd_rows\n        print(val)\nexcept:\n    pass", "def operationsOnMatrix():\n    t = int(input())\n    for _ in range(t):\n        (n, m, q) = map(int, input().split())\n        rows = [0 for i in range(n)]\n        cols = [0 for i in range(m)]\n        for i in range(q):\n            (row, col) = map(int, input().split())\n            rows[row - 1] += 1\n            cols[col - 1] += 1\n        countEvenR = 0\n        countOddR = 0\n        for num in rows:\n            if num % 2:\n                countOddR += 1\n            else:\n                countEvenR += 1\n        countOddC = 0\n        countEvenC = 0\n        for num in cols:\n            if num % 2:\n                countOddC += 1\n            else:\n                countEvenC += 1\n        print(countOddR * countEvenC + countOddC * countEvenR)\noperationsOnMatrix()", "T = int(input())\nfor i in range(T):\n    (n, m, q) = map(int, input().split())\n    row = [0] * n\n    column = [0] * m\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        row[a - 1] += 1\n        column[b - 1] += 1\n    (even1, even2, odd1, odd2) = (0, 0, 0, 0)\n    for i in range(n):\n        if row[i] % 2 == 0:\n            even1 += 1\n        if row[i] % 2 != 0:\n            odd1 += 1\n    for i in range(m):\n        if column[i] % 2 == 0:\n            even2 += 1\n        if column[i] % 2 != 0:\n            odd2 += 1\n    print(even1 * odd2 + even2 * odd1)", "t = int(input())\nwhile t:\n    (n, m, q) = map(int, input().split())\n    row = [0] * n\n    column = [0] * m\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        row[a - 1] += 1\n        column[b - 1] += 1\n    (even1, even2, odd1, odd2) = (0, 0, 0, 0)\n    for i in range(n):\n        if row[i] % 2 == 0:\n            even1 += 1\n        if row[i] % 2 != 0:\n            odd1 += 1\n    for i in range(m):\n        if column[i] % 2 == 0:\n            even2 += 1\n        if column[i] % 2 != 0:\n            odd2 += 1\n    print(even1 * odd2 + even2 * odd1)\n    t -= 1", "for t in range(int(input())):\n    (n, m, Q) = map(int, input().split())\n    arrx = [0 for x in range(n)]\n    arry = [0 for x in range(m)]\n    for q in range(Q):\n        (a, b) = map(int, input().split())\n        arrx[a - 1] += 1\n        arry[b - 1] += 1\n        dic = {'even': 0, 'odd': 0}\n    for i in arrx:\n        if i % 2 == 0:\n            dic['even'] += 1\n        else:\n            dic['odd'] += 1\n    count = 0\n    for i in arry:\n        if i % 2 == 0:\n            count += dic['odd']\n        else:\n            count += dic['even']\n    print(count)", "try:\n    T = int(input())\n    for t in range(T):\n        (n, m, Q) = map(int, input().split())\n        arrx = [0 for x in range(n)]\n        arry = [0 for x in range(m)]\n        for q in range(Q):\n            (a, b) = map(int, input().split())\n            arrx[a - 1] += 1\n            arry[b - 1] += 1\n        dic = {'even': 0, 'odd': 0}\n        for i in arrx:\n            if i % 2 == 0:\n                dic['even'] += 1\n            else:\n                dic['odd'] += 1\n        count = 0\n        for i in arry:\n            if i % 2 == 0:\n                count += dic['odd']\n            else:\n                count += dic['even']\n        print(count)\nexcept:\n    pass", "T = int(input())\nfor i in range(T):\n    (N, M, Q) = map(int, input().split())\n    rows = [0] * (N + 1)\n    columns = [0] * (M + 1)\n    for i in range(Q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        columns[c] += 1\n    i = 1\n    count = 0\n    odd = 0\n    even = 0\n    zero = 0\n    while i <= N:\n        if rows[i] != 0:\n            if rows[i] % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        else:\n            zero += 1\n        i += 1\n    i = 1\n    while i <= M:\n        if columns[i] != 0:\n            if columns[i] % 2 != 0:\n                count += even + zero\n            else:\n                count += odd\n        else:\n            count += odd\n        i += 1\n    print(count)", "t = int(input())\nfor k in range(t):\n    (a, b, c) = map(int, input().split())\n    (rl, cl) = ([0] * a, [0] * b)\n    for i in range(c):\n        (r, c) = map(int, input().split())\n        rl[r - 1] += 1\n        cl[c - 1] += 1\n    xe = xo = ye = yo = 0\n    for i in rl:\n        if i % 2 == 0:\n            xe += 1\n        else:\n            xo += 1\n    for i in cl:\n        if i % 2 == 0:\n            ye += 1\n        else:\n            yo += 1\n    p = ye * xo\n    q = yo * xe\n    print(p + q)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    a = [0] * n\n    b = [0] * m\n    odds = 0\n    while q:\n        q -= 1\n        (x, y) = map(int, input().split())\n        a[x - 1] += 1\n        b[y - 1] += 1\n        a[x - 1] %= 2\n        b[y - 1] %= 2\n    rows = 0\n    cols = 0\n    for i in range(n):\n        if a[i] > 0:\n            rows += 1\n    for i in range(m):\n        if b[i] > 0:\n            cols += 1\n    odds += (m - cols) * rows\n    odds += (n - rows) * cols\n    print(odds)", "for _ in range(int(input())):\n    (n, m, q) = list(map(int, input().split()))\n    row = [0] * n\n    col = [0] * m\n    (re, ro, ce, co) = (0, 0, 0, 0)\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        row[x - 1] += 1\n        col[y - 1] += 1\n    for i in row:\n        if i % 2 == 0:\n            re += 1\n        else:\n            ro += 1\n    for i in col:\n        if i % 2 == 0:\n            ce += 1\n        else:\n            co += 1\n    print(ro * ce + re * co)", "t = int(input())\nwhile t:\n    (n, m, q) = map(int, input().split())\n    ans = 0\n    r = []\n    c = []\n    o1 = o2 = e1 = e2 = 0\n    for i in range(n):\n        r.append(0)\n    for i in range(m):\n        c.append(0)\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        r[x - 1] += 1\n        c[y - 1] += 1\n    for i in range(len(r)):\n        if r[i] % 2 == 0:\n            e1 += 1\n        else:\n            o1 += 1\n    for i in range(len(c)):\n        if c[i] % 2 == 0:\n            e2 += 1\n        else:\n            o2 += 1\n    print(o2 * e1 + o1 * e2)\n    t = t - 1", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    (rows, cols) = ({}, {})\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        (rows[r], cols[c]) = (rows[r] + 1, cols[c] + 1)\n    (odd1, even1, odd2, even2, ans) = (0, 0, 0, 0, 0)\n    for i in cols.values():\n        if i % 2 == 1:\n            odd2 += 1\n        else:\n            even2 += 1\n    for i in rows.values():\n        if i % 2 == 1:\n            ans += even2\n        else:\n            ans += odd2\n    print(ans)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = {}\n    cols = {}\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        cols[c] += 1\n    ans = 0\n    (odd1, even1, odd2, even2) = (0, 0, 0, 0)\n    for i in cols.values():\n        if i % 2 == 1:\n            odd2 += 1\n        else:\n            even2 += 1\n    for i in rows.values():\n        if i % 2 == 1:\n            ans += even2\n        else:\n            ans += odd2\n    print(ans)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = {}\n    cols = {}\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        cols[c] += 1\n    ans = 0\n    (odd1, even1, odd2, even2) = (0, 0, 0, 0)\n    for i in cols.values():\n        if i % 2 == 1:\n            odd2 += 1\n        else:\n            even2 += 1\n    for i in rows.values():\n        if i % 2 == 1:\n            ans += even2\n        else:\n            ans += odd2\n    print(ans)", "test = int(input())\n\ndef solve():\n    entries = list(map(int, input().split()))\n    (a, b, c, d) = (0, 0, 0, 0)\n    row = []\n    col = []\n    for i in range(entries[0]):\n        row.append(0)\n    for j in range(entries[1]):\n        col.append(0)\n    for p in range(entries[2]):\n        cells = input().split()\n        row[int(cells[0]) - 1] += 1\n        col[int(cells[1]) - 1] += 1\n        row[int(cells[0]) - 1] %= 2\n        col[int(cells[1]) - 1] %= 2\n    for k in range(entries[0]):\n        if row[k] == 1:\n            a += 1\n        else:\n            b += 1\n    for l in range(entries[1]):\n        if col[l] == 1:\n            c += 1\n        else:\n            d += 1\n    result = a * d + c * b\n    print(result)\nfor q in range(test):\n    solve()", "import numpy as np\nt = int(input())\nwhile t > 0:\n    (n, m, q) = map(int, input().split())\n    A = [0 for x in range(n)]\n    B = [0 for x in range(m)]\n    while q != 0:\n        (x, y) = map(int, input().split())\n        x = x - 1\n        y -= 1\n        A[x] += 1\n        B[y] += 1\n        q -= 1\n    od1 = 0\n    eve1 = 0\n    od2 = 0\n    eve2 = 0\n    for i in range(0, len(A)):\n        if A[i] % 2 == 0:\n            eve1 += 1\n        else:\n            od1 += 1\n    for j in range(0, len(B)):\n        if B[j] % 2 == 0:\n            eve2 += 1\n        else:\n            od2 += 1\n    print(eve1 * od2 + eve2 * od1)\n    t -= 1", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = {}\n    cols = {}\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        cols[c] += 1\n    ans = 0\n    (o1, e1, o2, e2) = (0, 0, 0, 0)\n    for i in cols.values():\n        if i % 2 == 1:\n            o2 += 1\n        else:\n            e2 += 1\n    for i in rows.values():\n        if i % 2 == 1:\n            ans += e2\n        else:\n            ans += o2\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (N, M, Q) = map(int, input().split())\n    oddN = 0\n    oddM = 0\n    r = [0] * N\n    c = [0] * M\n    for i in range(Q):\n        (X, Y) = map(int, input().split())\n        r[X - 1] += 1\n        c[Y - 1] += 1\n    for i in r:\n        if i % 2 == 1:\n            oddN += 1\n    for i in c:\n        if i % 2 == 1:\n            oddM += 1\n    count = oddN * (M - oddM) + oddM * (N - oddN)\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = list(map(int, input().split()))\n    arrn = [0] * n\n    arrm = [0] * m\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        arrn[x - 1] = arrn[x - 1] ^ 1\n        arrm[y - 1] = arrm[y - 1] ^ 1\n    countn = arrn.count(1)\n    countm = arrm.count(1)\n    print((m - countm) * countn + (n - countn) * countm)", "t = int(input())\nfor i in range(t):\n    (n, m, q) = map(int, input().split())\n    l = [0] * n\n    l1 = [0] * m\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        l[x - 1] += 1\n        l1[y - 1] += 1\n    c = 0\n    c1 = 0\n    for i in range(n):\n        if l[i] % 2 == 0:\n            c = c + 1\n        else:\n            c1 = c1 + 1\n    c2 = 0\n    c3 = 0\n    for i in range(m):\n        if l1[i] % 2 == 0:\n            c2 = c2 + 1\n        else:\n            c3 = c3 + 1\n    print(c * c3 + c1 * c2)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = list(map(int, input().split()))\n    arrn = [0] * n\n    arrm = [0] * m\n    for _ in range(q):\n        (x, y) = list(map(int, input().split()))\n        arrn[x - 1] = arrn[x - 1] ^ 1\n        arrm[y - 1] = arrm[y - 1] ^ 1\n    countn = arrn.count(1)\n    countm = arrm.count(1)\n    print((m - countm) * countn + (n - countn) * countm)", "for i in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    row = [0 for i in range(n)]\n    col = [0 for i in range(m)]\n    (r, c) = (0, 0)\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        row[a - 1] += 1\n        col[b - 1] += 1\n    for i in row:\n        if i % 2 != 0:\n            r += 1\n    for i in col:\n        if i % 2 != 0:\n            c += 1\n    print(r * m + c * n - 2 * r * c)", "for iterator in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    col = [0] * n\n    row = [0] * m\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        col[x - 1] += 1\n        row[y - 1] += 1\n    o1 = 0\n    o2 = 0\n    e1 = 0\n    e2 = 0\n    for x in col:\n        if x % 2 == 0:\n            e1 += 1\n        else:\n            o1 += 1\n    for x in row:\n        if x % 2 == 0:\n            e2 += 1\n        else:\n            o2 += 1\n    ans = e1 * o2 + e2 * o1\n    print(ans)", "try:\n    t = int(input())\n    while t > 0:\n        (n, m, q) = map(int, input().split())\n        n1 = [0] * m\n        m1 = [0] * n\n        while q > 0:\n            (x, y) = input().split()\n            (x, y) = (int(x) - 1, int(y) - 1)\n            n1[y] = (n1[y] + 1) % 2\n            m1[x] = (m1[x] + 1) % 2\n            q -= 1\n        n2 = n1.count(1)\n        m2 = m1.count(1)\n        print(n * n2 + m * m2 - 2 * (m2 * n2))\n        t += 1\nexcept:\n    pass", "t = int(input())\nwhile t != 0:\n    t -= 1\n    (n, m, q) = [int(x) for x in input().split()]\n    r = [0 for x in range(n)]\n    c = [0 for x in range(m)]\n    while q != 0:\n        q -= 1\n        (a, b) = [int(x) for x in input().split()]\n        r[a - 1] += 1\n        c[b - 1] += 1\n    count1 = 0\n    for i in range(n):\n        if r[i] % 2 != 0:\n            count1 += 1\n    count2 = 0\n    for i in range(m):\n        if c[i] % 2 != 0:\n            count2 += 1\n    print(count1 * (m - count2) + (n - count1) * count2)", "try:\n    t = int(input())\n    while t > 0:\n        (n, m, q) = map(int, input().split())\n        n1 = [0] * m\n        m1 = [0] * n\n        while q > 0:\n            (x, y) = input().split()\n            (x, y) = (int(x) - 1, int(y) - 1)\n            n1[y] = (n1[y] + 1) % 2\n            m1[x] = (m1[x] + 1) % 2\n            q -= 1\n        n2 = n1.count(1)\n        m2 = m1.count(1)\n        print(n * n2 + m * m2 - 2 * (m2 * n2))\n        t += 1\nexcept:\n    pass", "p = int(input())\nfor i in range(p):\n    (n, m, q) = map(int, input().split())\n    h = [0] * n\n    k = [0] * m\n    a = 0\n    b = 0\n    for j in range(q):\n        (x, y) = map(int, input().split())\n        h[x - 1] = h[x - 1] + 1\n        k[y - 1] = k[y - 1] + 1\n    for j in h:\n        if j % 2 != 0:\n            a = a + 1\n    for j in k:\n        if j % 2 != 0:\n            b = b + 1\n    u = a * (len(k) - b) + b * (len(h) - a)\n    print(u)", "t = int(input())\nwhile t > 0:\n    (r, c, q) = map(int, input().split())\n    rowl = [0 for i in range(c)]\n    coll = [0 for i in range(r)]\n    while q > 0:\n        (x, y) = map(int, input().split())\n        coll[x - 1] += 1\n        rowl[y - 1] += 1\n        q -= 1\n    codd = 0\n    rodd = 0\n    for i in range(c):\n        if rowl[i] % 2 != 0:\n            rodd += 1\n    for i in range(r):\n        if coll[i] % 2 != 0:\n            codd += 1\n    reven = c - rodd\n    ceven = r - codd\n    c = rodd * ceven + reven * codd\n    t = t - 1\n    print(c)", "for i in range(int(input())):\n    (n, m, q) = list(map(int, input().split(' ')))\n    r = [0] * n\n    c = [0] * m\n    for j in range(q):\n        (x, y) = list(map(int, input().split(' ')))\n        r[x - 1] += 1\n        c[y - 1] += 1\n    (rec, ro, ce, co) = (0, 0, 0, 0)\n    for k in range(n):\n        if r[k] % 2 == 0:\n            rec += 1\n        else:\n            ro += 1\n    for k in range(m):\n        if c[k] % 2 == 0:\n            ce += 1\n        else:\n            co += 1\n    print(ro * ce + rec * co)", "for i in range(int(input())):\n    (n, m, q) = list(map(int, input().split(' ')))\n    r = [0] * n\n    c = [0] * m\n    for j in range(q):\n        (x, y) = list(map(int, input().split(' ')))\n        r[x - 1] += 1\n        c[y - 1] += 1\n    (re, ro, ce, co) = (0, 0, 0, 0)\n    for k in range(n):\n        if r[k] % 2 == 0:\n            re += 1\n        else:\n            ro += 1\n    for k in range(m):\n        if c[k] % 2 == 0:\n            ce += 1\n        else:\n            co += 1\n    print(ro * ce + re * co)", "for _ in range(int(input())):\n    (n, m, q) = list(map(int, input().split()))\n    row = [0] * n\n    col = [0] * m\n    for i in range(q):\n        (x, y) = list(map(int, input().split()))\n        row[x - 1] += 1\n        col[y - 1] += 1\n    (row_even, row_odd) = (0, 0)\n    (col_even, col_odd) = (0, 0)\n    for i in row:\n        if i % 2 == 0:\n            row_even += 1\n        else:\n            row_odd += 1\n    for i in col:\n        if i % 2 == 0:\n            col_even += 1\n        else:\n            col_odd += 1\n    print(col_even * row_odd + row_even * col_odd)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = {}\n    cols = {}\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        cols[c] += 1\n    ans = 0\n    (odd1, even1, odd2, even2) = (0, 0, 0, 0)\n    for i in cols.values():\n        if i % 2 == 1:\n            odd2 += 1\n        else:\n            even2 += 1\n    for i in rows.values():\n        if i % 2 == 1:\n            ans += even2\n        else:\n            ans += odd2\n    print(ans)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = [0 for i in range(n)]\n    cols = [0 for i in range(m)]\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r - 1] += 1\n        cols[c - 1] += 1\n    ans = 0\n    (odd1, even1, odd2, even2) = (0, 0, 0, 0)\n    for i in cols:\n        if i % 2 == 1:\n            odd2 += 1\n        else:\n            even2 += 1\n    for i in rows:\n        if i % 2 == 1:\n            ans += even2\n        else:\n            ans += odd2\n    print(ans)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    e = 0\n    o = 0\n    ans = 0\n    r = [0 for i in range(n)]\n    c = [0 for i in range(m)]\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        r[x - 1] += 1\n        c[y - 1] += 1\n    for i in range(n):\n        if r[i] % 2 == 0:\n            e += 1\n        else:\n            o += 1\n    for i in range(m):\n        if c[i] % 2 == 0:\n            ans += o\n        else:\n            ans += e\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    [N, M, Q] = list(map(int, input().split()))\n    rows = set()\n    cols = set()\n    for _ in range(Q):\n        [x, y] = list(map(int, input().split()))\n        if x in rows:\n            rows.remove(x)\n        else:\n            rows.add(x)\n        if y in cols:\n            cols.remove(y)\n        else:\n            cols.add(y)\n    r = len(rows)\n    c = len(cols)\n    print(r * M + c * N - 2 * r * c)", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = list(map(int, input().strip().split(' ')))\n    r = []\n    c = []\n    for i in range(q):\n        l = list(map(int, input().strip().split(' ')))[:2]\n        (r.append(l[0] - 1), c.append(l[1] - 1))\n    r = sorted(r)\n    c = sorted(c)\n    row = []\n    column = []\n    for i in range(n):\n        row.append(0)\n    for i in range(m):\n        column.append(0)\n    for i in r:\n        row[i] += 1\n    for i in c:\n        column[i] += 1\n    count1 = 0\n    count2 = 0\n    count3 = 0\n    count4 = 0\n    for i in row:\n        if i % 2 == 1:\n            count1 += 1\n        else:\n            count3 += 1\n    for i in column:\n        if i % 2 == 1:\n            count2 += 1\n        else:\n            count4 += 1\n    print(count1 * count4 + count2 * count3)", "from collections import Counter\n\ndef find(n, m, N, M):\n    z = sum(n.values())\n    c = 0\n    for i in range(M):\n        if m[i]:\n            c += N - z\n        else:\n            c += z\n    return c\n\ndef main():\n    for _ in range(int(input())):\n        (N, M, Q) = list(map(int, input().split()))\n        an = Counter()\n        am = Counter()\n        for __ in range(Q):\n            (a, b) = list(map(int, input().split()))\n            an[a - 1] = 1 - an[a - 1]\n            am[b - 1] = 1 - am[b - 1]\n        print(find(an, am, N, M))\nmain()", "t = int(input())\nfor _ in range(t):\n    (m, n, q) = [int(x) for x in input().split()]\n    query = []\n    for i in range(q):\n        query.append([int(x) for x in input().split()])\n    row = [0 for x in range(m)]\n    column = [0 for x in range(n)]\n    for i in query:\n        row[i[0] - 1] += 1\n        column[i[1] - 1] += 1\n    odd = 0\n    even_row = 0\n    odd_row = 0\n    even_column = 0\n    odd_column = 0\n    for i in row:\n        if i % 2:\n            odd_row += 1\n        else:\n            even_row += 1\n    for i in column:\n        if i % 2:\n            odd_column += 1\n        else:\n            even_column += 1\n    answer = odd_row * even_column + even_row * odd_column\n    print(answer)", "try:\n    for t in range(int(input())):\n        (n, m, q) = map(int, input().split())\n        row = [0] * n\n        col = [0] * m\n        for i in range(q):\n            (x, y) = map(int, input().split())\n            (x, y) = (x - 1, y - 1)\n            row[x] = (row[x] + 1) % 2\n            col[y] = (col[y] + 1) % 2\n        (even1, even2, odd1, odd2) = (0, 0, 0, 0)\n        for i in row:\n            if i == 0:\n                even1 += 1\n            else:\n                odd1 += 1\n        for j in col:\n            if j == 0:\n                even2 += 1\n            else:\n                odd2 += 1\n        ans = even1 * odd2 + even2 * odd1\n        print(ans)\nexcept:\n    pass", "t = int(input())\nwhile t > 0:\n    odc = odr = ec = er = 0\n    (n, m, q) = map(int, input().split(' '))\n    r = [0] * n\n    c = [0] * m\n    for i in range(q):\n        (row, col) = map(int, input().split(' '))\n        r[row - 1] = r[row - 1] + 1\n        c[col - 1] = c[col - 1] + 1\n    for i in r:\n        if i % 2 == 0:\n            er = er + 1\n        else:\n            odr = odr + 1\n    for j in c:\n        if j % 2 == 0:\n            ec = ec + 1\n        else:\n            odc = odc + 1\n    print(er * odc + ec * odr)\n    t = t - 1", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    (row, col) = ({}, {})\n    for i in range(1, n + 1):\n        row[i] = 0\n    for i in range(1, m + 1):\n        col[i] = 0\n    for k in range(q):\n        (x, y) = map(int, input().split())\n        row[x] += 1\n        col[y] += 1\n    (countr, countc) = (0, 0)\n    ans = 0\n    for i in row:\n        if row[i] % 2 == 0:\n            countr += 1\n    for i in col:\n        if col[i] % 2 == 0:\n            countc += 1\n    ans += countr * m\n    ans -= 2 * (countr * countc)\n    ans += countc * n\n    print(ans)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    dr = {}\n    dc = {}\n    cs = set()\n    for i in range(q):\n        (e1, e2) = input().split()\n        e1 = int(e1)\n        e2 = int(e2)\n        cs.add(e1)\n        if e1 in dr:\n            if e2 in dc:\n                dr[e1] = dr[e1] + 1\n                dc[e2] = dc[e2] + 1\n            else:\n                dr[e1] = dr[e1] + 1\n                dc[e2] = 1\n        elif e2 in dc:\n            dr[e1] = 1\n            dc[e2] = dc[e2] + 1\n        else:\n            dr[e1] = 1\n            dc[e2] = 1\n    cs = list(cs)\n    odd = 0\n    for u in cs:\n        no = dr[u]\n        if no % 2 != 0:\n            odd = odd + 1\n    even = n - odd\n    res = 0\n    i = 1\n    while i <= m:\n        if i in dc:\n            nok = dc[i]\n        else:\n            nok = 0\n        if nok % 2 != 0:\n            res = res + even\n        else:\n            res = res + odd\n        i = i + 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    inp = input().split()\n    n = int(inp[0])\n    m = int(inp[1])\n    q = int(inp[2])\n    rr = [0 for i in range(n)]\n    cc = [0 for i in range(m)]\n    for i in range(q):\n        inp = input().split()\n        r = int(inp[0]) - 1\n        c = int(inp[1]) - 1\n        rr[r] = (rr[r] + 1) % 2\n        cc[c] = (cc[c] + 1) % 2\n    er = rr.count(0)\n    od = len(rr) - er\n    ec = cc.count(0)\n    oc = len(cc) - ec\n    c = od * ec + er * oc\n    print(c)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = {}\n    cols = {}\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        cols[c] += 1\n    ocount = ecount = 0\n    for i in range(1, n + 1):\n        (ocount, ecount) = (ocount + 1, ecount) if rows[i] % 2 != 0 else (ocount, ecount + 1)\n    res = 0\n    for j in range(1, m + 1):\n        res += ecount if cols[j] % 2 != 0 else ocount\n    print(res)", "T = int(input())\nfor i in range(T):\n    (N, M, Q) = map(int, input().split())\n    lr = []\n    lc = []\n    for j in range(N):\n        lr.append(0)\n    for j in range(M):\n        lc.append(0)\n    for j in range(Q):\n        (x, y) = map(int, input().split())\n        lr[x - 1] = (lr[x - 1] + 1) % 2\n        lc[y - 1] = (lc[y - 1] + 1) % 2\n    a = 0\n    b = 0\n    for j in range(N):\n        if lr[j] == 1:\n            a += 1\n    for j in range(M):\n        if lc[j] == 1:\n            b += 1\n    print(a * M + b * N - 2 * a * b)", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, m, q) = map(int, input().split())\n        rows = [0] * n\n        columns = [0] * m\n        for i in range(q):\n            (x, y) = map(int, input().split())\n            rows[x - 1] += 1\n            columns[y - 1] += 1\n        r = 0\n        c = 0\n        for i in rows:\n            if i % 2 == 1:\n                r += 1\n        for i in columns:\n            if i % 2 == 1:\n                c += 1\n        print(r * m + c * n - 2 * r * c)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = {}\n    cols = {}\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        cols[c] += 1\n    os = es = 0\n    for i in range(1, n + 1):\n        (os, es) = (os + 1, es) if rows[i] % 2 == 1 else (os, es + 1)\n    rs = 0\n    for i in range(1, m + 1):\n        rs += es if cols[i] % 2 == 1 else os\n    print(rs)", "from sys import stdin, stdout\nimport numpy as np\nT = int(stdin.readline())\nfor _ in range(T):\n    (N, M, Q) = stdin.readline().split()\n    N = int(N)\n    M = int(M)\n    Q = int(Q)\n    XX = np.zeros(N)\n    YY = np.zeros(M)\n    for i in range(Q):\n        (X, Y) = stdin.readline().split()\n        X = int(X) - 1\n        Y = int(Y) - 1\n        XX[X] += 1\n        YY[Y] += 1\n    y_odd = 0\n    count = 0\n    x_odd = 0\n    if len(YY) <= len(XX):\n        for d in range(len(YY)):\n            if YY[d] % 2 != 0:\n                y_odd += 1\n        for j in range(len(XX)):\n            if XX[j] % 2 == 0:\n                count += y_odd\n            else:\n                count += M - y_odd\n    else:\n        for s in range(len(XX)):\n            if XX[s] % 2 != 0:\n                x_odd += 1\n        for w in range(len(YY)):\n            if YY[w] % 2 == 0:\n                count += x_odd\n            else:\n                count += N - x_odd\n    print(int(count))", "t = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows = {i: 0 for i in range(1, n + 1)}\n    cols = {i: 0 for i in range(1, m + 1)}\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows[x] += 1\n        cols[y] += 1\n    evenr = sum((1 for i in rows.values() if not i & 1))\n    oddr = sum((1 for i in rows.values() if i & 1))\n    evenc = sum((1 for i in cols.values() if not i & 1))\n    oddc = sum((1 for i in cols.values() if i & 1))\n    print(evenr * oddc + oddr * evenc)", "import random\nt = int(input())\nfor _ in range(t):\n    (n, m, q) = map(int, input().split())\n    rows = {i: 0 for i in range(1, n + 1)}\n    cols = {i: 0 for i in range(1, m + 1)}\n    for _ in range(q):\n        (x, y) = map(int, input().split())\n        rows[x] += 1\n        cols[y] += 1\n    evenr = sum((1 for i in rows.values() if not i & 1))\n    oddr = sum((1 for i in rows.values() if i & 1))\n    evenc = sum((1 for i in cols.values() if not i & 1))\n    oddc = sum((1 for i in cols.values() if i & 1))\n    print(evenr * oddc + oddr * evenc)", "import numpy as np\nfor _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    mat = np.zeros(n)\n    mat2 = np.zeros(m)\n    l = []\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        mat[x - 1] = mat[x - 1] + 1\n        mat2[y - 1] = mat2[y - 1] + 1\n    e = 0\n    o = 0\n    for i in range(n):\n        if mat[i] % 2 == 0:\n            e = e + 1\n        else:\n            o = o + 1\n    c = 0\n    for i in range(m):\n        if mat2[i] % 2 == 0:\n            c = c + o\n        else:\n            c = c + e\n    print(c)", "import numpy as np\nfor _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    mat = np.zeros(n)\n    mat2 = np.zeros(m)\n    l = []\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        l.append((x, y))\n    for i in range(q):\n        mat[l[i][0] - 1] = mat[l[i][0] - 1] + 1\n        mat2[l[i][1] - 1] = mat2[l[i][1] - 1] + 1\n    e = 0\n    o = 0\n    for i in range(n):\n        if mat[i] % 2 == 0:\n            e = e + 1\n        else:\n            o = o + 1\n    c = 0\n    for i in range(m):\n        if mat2[i] % 2 == 0:\n            c = c + o\n        else:\n            c = c + e\n    print(c)", "t = int(input(''))\nfor xxx in range(t):\n    s = input('').split(' ')\n    r = int(s[0])\n    c = int(s[1])\n    q = int(s[2])\n    a = [0] * r\n    b = [0] * c\n    for i in range(q):\n        s = input('').split(' ')\n        x = int(s[0])\n        y = int(s[1])\n        a[x - 1] += 1\n        b[y - 1] += 1\n    even1 = 0\n    odd1 = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            even1 += 1\n        else:\n            odd1 += 1\n    even2 = 0\n    odd2 = 0\n    for i in range(len(b)):\n        if b[i] % 2 == 0:\n            even2 += 1\n        else:\n            odd2 += 1\n    print(even1 * odd2 + even2 * odd1)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = {}\n    cols = {}\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        cols[c] += 1\n    os = es = 0\n    for i in range(1, n + 1):\n        (os, es) = (os + 1, es) if rows[i] % 2 == 1 else (os, es + 1)\n    rs = 0\n    for i in range(1, m + 1):\n        rs += es if cols[i] % 2 == 1 else os\n    print(rs)", "for _ in range(int(input())):\n    (n, m, q) = map(int, input().split())\n    rows = {}\n    cols = {}\n    for i in range(1, n + 1):\n        rows[i] = 0\n    for i in range(1, m + 1):\n        cols[i] = 0\n    for _ in range(q):\n        (r, c) = map(int, input().split())\n        rows[r] += 1\n        cols[c] += 1\n    ans = 0\n    (odd1, even1, odd2, even2) = (0, 0, 0, 0)\n    for i in cols.values():\n        if i % 2 == 1:\n            odd2 += 1\n        else:\n            even2 += 1\n    for i in rows.values():\n        if i % 2 == 1:\n            ans += even2\n        else:\n            ans += odd2\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (m, n, q) = map(int, input().split())\n    row = [0 for i in range(m)]\n    col = [0 for i in range(n)]\n    for i in range(q):\n        (x, y) = map(int, input().split())\n        row[x - 1] = (row[x - 1] + 1) % 2\n        col[y - 1] = (col[y - 1] + 1) % 2\n    x = row.count(1)\n    y = col.count(1)\n    abc = n * x + (m - x) * y - x * y\n    print(abc)"]