["a = 10 ** 9 + 7\nfor _ in range(int(input())):\n    m = input()\n    n = int(m)\n    o = pow(10, len(m)) % a\n    p = 0\n    for i in m:\n        i = int(i)\n        p = (p * o + n) % a\n        n = (n * 10 - (o - 1) * i) % a\n    print(p)", "a = 10 ** 9 + 7\nfor _ in range(int(input())):\n    m = input()\n    n = int(m)\n    o = pow(10, len(m)) % a\n    p = 0\n    for i in m:\n        i = int(i)\n        p = (p * o + n) % a\n        n = (n * 10 - (o - 1) * i) % a\n    print(p)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = input()\n    p = int(s)\n    m = '1' + '0' * len(s)\n    m = int(m) % M\n    r = 0\n    for d in s:\n        d = int(d)\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "a = 10 ** 9 + 7\nfor _ in range(int(input())):\n    m = input()\n    n = int(m)\n    o = pow(10, len(m)) % a\n    p = 0\n    for i in m:\n        i = int(i)\n        p = (p * o + n) % a\n        n = (n * 10 - (o - 1) * i) % a\n    print(p)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = input()\n    cur_n = n[-1] + n[:-1]\n    n1 = len(cur_n)\n    ans = 0\n    a = 1\n    c = pow(10, n1, mod)\n    d = pow(10, n1 - 1, mod)\n    t = pow(10, mod - 2, mod)\n    for i in cur_n[::-1]:\n        cur_n = int(cur_n)\n        ans += cur_n * a % mod\n        cur_n -= int(i)\n        cur_n = cur_n * t % mod\n        cur_n += int(i) * d\n        cur_n = cur_n % mod\n        a *= c\n        a = a % mod\n    print(ans % mod)", "for _ in range(int(input())):\n    n = input()\n    mod = 10 ** 9 + 7\n    cur_n = n[-1] + n[:-1]\n    n1 = len(cur_n)\n    ans = 0\n    a = 1\n    c = 10 ** n1 % mod\n    d = 10 ** (n1 - 1) % mod\n    t = pow(10, mod - 2, mod)\n    for i in cur_n[::-1]:\n        cur_n = int(cur_n)\n        ans += cur_n * a % mod\n        cur_n -= int(i)\n        cur_n = cur_n * t % mod\n        cur_n += int(i) * d\n        cur_n = cur_n % mod\n        a *= c\n        a = a % mod\n    print(ans % mod)", "import sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    n = input()\n    mod = 10 ** 9 + 7\n    cur_n = n[-1] + n[:-1]\n    n1 = len(cur_n)\n    ans = 0\n    a = 1\n    c = 10 ** n1 % mod\n    d = 10 ** (n1 - 1) % mod\n    t = pow(10, mod - 2, mod)\n    for i in cur_n[::-1]:\n        cur_n = int(cur_n)\n        ans += cur_n * a % mod\n        cur_n -= int(i)\n        cur_n = cur_n * t % mod\n        cur_n += int(i) * d\n        cur_n = cur_n % mod\n        a *= c\n        a = a % mod\n    print(ans % mod)", "import sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    n = input()\n    mod = 10 ** 9 + 7\n    cur_n = n[-1] + n[:-1]\n    n1 = len(cur_n)\n    ans = 0\n    a = pow(10, 0, mod)\n    c = 10 ** n1 % mod\n    d = 10 ** (n1 - 1) % mod\n    for i in cur_n[::-1]:\n        cur_n = int(cur_n)\n        ans += cur_n * a % mod\n        cur_n -= int(i)\n        cur_n = cur_n * pow(10, mod - 2, mod) % mod\n        cur_n += int(i) * d\n        cur_n = cur_n % mod\n        a *= c\n        a = a % mod\n    print(ans % mod)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = input()\n    p = int(s)\n    m = '1' + '0' * len(s)\n    m = int(m) % M\n    r = 0\n    for d in s:\n        d = int(d)\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "for a in range(int(input())):\n    n = input()\n    size = len(n)\n    N = int(n)\n    modulous = 10 ** 9 + 7\n    (NSH, resultSH) = (10 ** (size - 1) % modulous, 10 ** size % modulous)\n    N %= modulous\n    result = N\n    for x in range(size - 1):\n        tmp = int(n[x]) * NSH % modulous\n        tmp = (N - tmp) % modulous\n        tmp = tmp * 10 % modulous\n        tmp = (tmp + int(n[x])) % modulous\n        N = tmp\n        result = (result * resultSH + N) % modulous\n    print(result)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = input()\n    p = int(s)\n    m = '1' + '0' * len(s)\n    m = int(m) % M\n    r = 0\n    for d in s:\n        d = int(d)\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p = p + d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (s, p, m, r) = (list(map(int, input())), 0, 1, 0)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "T = int(input())\nm = 10 ** 9 + 7\nwhile T > 0:\n    num = list(map(int, input()))\n    n = 0\n    for i in range(len(num)):\n        n = n * 10\n        n = (n + num[i]) % m\n    rs = n\n    y = 10 ** len(num) % m\n    for i in range(len(num) - 1):\n        n = (n * 10 - (y - 1) * num[i]) % m\n        rs = (rs * y + n) % m\n    print(rs)\n    T -= 1", "m = 10 ** 9 + 7\nT = int(input())\nwhile T > 0:\n    num = list(map(int, input()))\n    n = 0\n    for i in range(len(num)):\n        n = n * 10 % m\n        n = (n + num[i]) % m\n    rs = n\n    y = 10 ** len(num) % m\n    for i in range(len(num) - 1):\n        n = (n * 10 - (y - 1) * num[i]) % m\n        rs = (rs * y + n) % m\n    print(rs)\n    T -= 1", "M = 10 ** 9 + 7\nfor _ in range(int(input())):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "t = int(input())\ndecimal = [1]\nmod = 10 ** 9 + 7\nfor i in range(10 ** 5 + 1):\n    decimal.append(decimal[-1] * 10 % mod)\n\ndef num(n):\n    ans = 0\n    length = len(n)\n    for i in range(0, length):\n        ans += int(n[i]) * decimal[length - i - 1] % mod\n    return ans\nfor i in range(0, t):\n    n = input()\n    length = len(n)\n    p = 10 ** length % mod\n    p1 = 10 ** (length - 1) % mod\n    mul = [1]\n    for j in range(0, length - 1):\n        mul.append(mul[-1] * p % mod)\n    value = num(n)\n    ans = 0\n    for j in range(length - 1, -1, -1):\n        temp = value * mul[j] % mod\n        ans += temp\n        value = value - int(n[length - 1 - j]) * p1\n        value = (value * 10 + int(n[length - 1 - j])) % mod\n    print(ans % mod)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = input()\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += (ord(d) - 48) * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * (ord(d) - 48)) % M\n    print(r)", "from bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nfrom collections import defaultdict\nfrom itertools import combinations\nimport functools\nimport sys\nimport math\nMAX = sys.maxsize\nMAXN = 10 ** 6 + 10\nMOD = 10 ** 9 + 7\n\ndef isprime(n):\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n & 1:\n        return False\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef mhd(a, b, x, y):\n    return abs(a - x) + abs(b - y)\n\ndef numIN():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef charIN():\n    return sys.stdin.readline().strip().split()\nt = [0] * 1000010\n\ndef create(a, n):\n    global t\n    for i in range(n, 2 * n):\n        t[i] = a[i - n]\n    for i in range(n - 1, 0, -1):\n        t[i] = t[2 * i] + t[2 * i + 1]\n\ndef cal(n, k):\n    res = 1\n    c = [0] * (k + 1)\n    c[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            c[j] = (c[j] + c[j - 1]) % MOD\n    return c[k]\nfor i in range(int(input())):\n    n = int(input())\n    a = str(n)\n    l = len(a)\n    ans = n\n    p1 = pow(10, l, MOD)\n    p2 = pow(10, l - 1, MOD)\n    for j in range(l - 1):\n        n -= int(a[j]) * p2\n        n %= MOD\n        n *= 10\n        n %= MOD\n        n += int(a[j])\n        n %= MOD\n        ans *= p1\n        ans %= MOD\n        ans += n\n        ans %= MOD\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    if len(s) == 1:\n        print(s)\n    else:\n        mod = 10 ** 9 + 7\n        l = len(s)\n        curr = 0\n        for i in s:\n            curr *= 10\n            curr += int(i)\n            curr %= mod\n        ans = curr\n        p1 = 1\n        p2 = 1\n        for i in range(l):\n            p1 *= 10\n            p1 %= mod\n        for i in range(l - 1):\n            p2 *= 10\n            p2 %= mod\n        for i in range(l - 1):\n            curr -= p2 * int(s[i]) % mod\n            curr *= 10\n            curr += int(s[i])\n            curr %= mod\n            ans *= p1\n            ans %= mod\n            ans += curr\n            ans %= mod\n        print(ans)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    ans = 0\n    for d in s:\n        ans = (ans * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(ans)", "t = int(input())\nmodval = 10 ** 9 + 7\nfor _ in range(t):\n    val = list(input())\n    inp = 0\n    res = 0\n    multiplier = 1\n    for i in val:\n        inp = (inp * 10 + int(i)) % modval\n        multiplier = multiplier * 10 % modval\n    for i in val:\n        res = (res * multiplier + inp) % modval\n        inp = (inp * 10 - (multiplier - 1) * int(i)) % modval\n    print(res)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "MOD = 10 ** 9 + 7\nINF = float('+inf')\n\ndef si():\n    return str(stdin.readline())\n\ndef ii():\n    return int(raw_input())\n\ndef mi():\n    return map(int, raw_input().split())\n\ndef li():\n    return [int(i) for i in raw_input().split()]\n\ndef debug(x):\n    return stdout.write(str(x))\n\ndef limul(list):\n    return eval('*'.join((str(item) for item in list)))\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        s = list(map(int, input()))\n        (p, m) = (0, 1)\n        for d in reversed(s):\n            p += d * m\n            m = m * 10 % MOD\n        r = 0\n        for d in s:\n            r = (r * m + p) % MOD\n            p = (p * 10 - (m - 1) * d) % MOD\n        print(r)\nmain()", "MOD = 10 ** 9 + 7\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        s = list(map(int, input()))\n        (p, m) = (0, 1)\n        for d in reversed(s):\n            p += d * m\n            m = m * 10 % MOD\n        r = 0\n        for d in s:\n            r = (r * m + p) % MOD\n            p = (p * 10 - (m - 1) * d) % MOD\n        print(r)\nmain()", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "from operator import mul\nM = 10 ** 9 + 7\nN = 100001\np10 = [None] * N\nk = 1\nfor i in range(N):\n    p10[i] = k\n    k = k * 10 % M\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    m = p10[len(s)]\n    p = sum(map(mul, reversed(s), p10))\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "from operator import mul\nM = 10 ** 9 + 7\nN = 100001\np10 = [None] * N\np10[0] = 1\nfor i in range(1, N):\n    p10[i] = p10[i - 1] * 10 % M\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    m = p10[len(s)]\n    p = sum(map(mul, reversed(s), p10))\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nN = 100001\np10 = [None] * N\np10[0] = 1\nfor i in range(1, N):\n    p10[i] = p10[i - 1] * 10 % M\nt = int(input())\nfor _ in range(t):\n    s = list(map(ord, input()))\n    p = sum(((x - 48) * y for (x, y) in zip(reversed(s), p10)))\n    m = p10[len(s)]\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * (d - 48)) % M\n    print(r)", "from operator import mul\nM = 10 ** 9 + 7\nN = 100001\np10 = [None] * N\np10[0] = 1\nfor i in range(1, N):\n    p10[i] = p10[i - 1] * 10 % M\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    p = sum(map(mul, reversed(s), p10))\n    m = p10[len(s)]\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    ans = N\n    M = N\n    L = len(str(N))\n    ls = list(str(N))\n    key = 10 ** L % (10 ** 9 + 7)\n    for i in range(L - 1):\n        a0 = int(ls[i])\n        M = (10 * M + a0 * (1 - key)) % (10 ** 9 + 7)\n        ans = (ans * key + M) % (10 ** 9 + 7)\n    print(ans % (10 ** 9 + 7))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    ans = N\n    M = N\n    L = len(str(N))\n    ls = list(str(N))\n    key = 10 ** L % (10 ** 9 + 7)\n    for i in range(L - 1):\n        a0 = int(ls[i])\n        M = (10 * M + a0 * (1 - key)) % (10 ** 9 + 7)\n        ans = (ans * key + M) % (10 ** 9 + 7)\n    print(ans % (10 ** 9 + 7))", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    N = input()\n    I = N\n    l = len(N)\n    N = int(N)\n    Y = S = N\n    e1 = 10 ** (l - 1) % mod\n    e2 = e1 * 10 % mod\n    for i in range(l - 1):\n        k = int(I[i])\n        S = ((S - k * e1) * 10 + k) % mod\n        Y = (Y * e2 % mod + S) % mod\n    print(Y % mod)", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    N = input()\n    I = N\n    l = len(N)\n    N = int(N)\n    Y = S = N\n    e1 = 10 ** (l - 1) % mod\n    e2 = e1 * 10 % mod\n    for i in range(l - 1):\n        k = ord(I[i]) - 48\n        S = ((S - k * e1) * 10 + k) % mod\n        Y = (Y * e2 % mod + S) % mod\n    print(Y % mod)", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfor _ in range(int(input())):\n    N = input()\n    I = N\n    l = len(N)\n    N = int(N)\n    Y = N\n    S = N\n    mod = 10 ** 9 + 7\n    e1 = 10 ** (l - 1) % mod\n    e2 = e1 * 10 % mod\n    for i in range(l - 1):\n        k = ord(I[i]) - 48\n        S = ((S - k * e1) * 10 + k) % mod\n        Y = (Y * e2 % mod + S) % mod\n    print(Y % mod)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(ord, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += (d - 48) * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * (d - 48)) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(ord, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += (d - 48) * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * (d - 48)) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(ord, input()))\n    (p, m) = (0, 1)\n    for i in range(len(s) - 1, -1, -1):\n        s[i] -= 48\n        p += s[i] * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(ord, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += (d - 48) * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * (d - 48)) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = input()\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += (ord(d) - 48) * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * (ord(d) - 48)) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(ord, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += (d - 48) * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * (d - 48)) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(lambda x: ord(x) - 48, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(ord, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += (d - 48) * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * (d - 48)) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = input()\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += int(d) * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * int(d)) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - m * d + d) % M\n    print(r)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    num = 0\n    k = pow(10, n, mod)\n    kk = pow(10, n - 1, mod)\n    for i in range(n):\n        num += pow(10, n - 1 - i, mod) * int(s[i])\n        num %= mod\n    ans1 = num\n    for i in range(n - 1):\n        ans = (num - kk * int(s[i])) * 10 % mod + int(s[i])\n        ans1 = (ans1 * k + ans) % mod\n        num = ans\n    print(ans1 % mod)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p = (p + d * m) % M\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in reversed(s):\n        p += d * m\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "M = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    s = list(map(int, input()))\n    (p, m) = (0, 1)\n    for d in s:\n        p = (p * 10 + d) % M\n        m = m * 10 % M\n    r = 0\n    for d in s:\n        r = (r * m + p) % M\n        p = (p * 10 - (m - 1) * d) % M\n    print(r)", "a = [1]\nz = 10 ** 9 + 7\nfor i in range(1, 10 ** 5 + 1):\n    a.append(10 * a[i - 1] % z)\nt = int(input())\nfor i in range(t):\n    p = input()\n    n = len(p)\n    b = int(p)\n    s = b\n    for i in range(n - 1):\n        b = b - a[n - 1] * int(p[i]) % z\n        if b < 0:\n            b = b + z\n        b = (10 * b + int(p[i])) % z\n        s = (s * a[n] + b) % z\n    print(s)", "M = 10 ** 9 + 7\nN = 100001\np10 = [None] * N\nk = 1\nfor i in range(N):\n    p10[i] = k\n    k = k * 10 % M\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    if n == 1:\n        print(s)\n    else:\n        s = s[-2::-1] + s[-1]\n        m = p10[n - 1]\n        pm = [None] * (n + 2)\n        k = 1\n        for i in range(n + 2):\n            pm[i] = k\n            k = k * m % M\n        r = sum((d * (p10[i] * (pm[i + 1] - 1) + pm[i + 2] * p10[i + 1] * (pm[n - i - 1] - 1)) for (i, d) in enumerate(map(int, s))))\n        im = pow(m - 1, M - 2, M)\n        print(im * r % M)", "M = 10 ** 9 + 7\nN = 100001\np10 = [None] * N\nk = 1\nfor i in range(N):\n    p10[i] = k\n    k = k * 10 % M\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    if n == 1:\n        print(s)\n    else:\n        s = s[-2::-1] + s[-1]\n        m = p10[n - 1]\n        pm = [None] * (n + 2)\n        k = 1\n        for i in range(n + 2):\n            pm[i] = k\n            k = k * m % M\n        im = pow(m - 1, M - 2, M)\n        r = sum((d * im * (p10[i] * (pm[i + 1] - 1) + pm[i + 2] * p10[i + 1] * (pm[n - i - 1] - 1)) for (i, d) in enumerate(map(int, s))))\n        print(r % M)", "t = int(input())\n\ndef func(st):\n    ans = 0\n    for i in range(k):\n        temp = int(n[i]) * decimal[k - i - 1]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n    return ans\nmod = 10 ** 9 + 7\ndecimal = [1]\nfor i in range(10 ** 5 + 1):\n    temp = decimal[-1] * 10\n    if temp >= mod:\n        temp %= mod\n    decimal.append(temp)\nwhile t:\n    t -= 1\n    n = input()\n    k = len(n)\n    mul = [1]\n    power = 10 ** k % mod\n    power_1 = 10 ** (k - 1) % mod\n    for i in range(k):\n        temp = mul[-1] * power\n        if temp >= mod:\n            temp %= mod\n        mul.append(temp)\n    flag = k < 10\n    ans = 0\n    val = func(n)\n    for i in range(k - 1, -1, -1):\n        temp = val * mul[i]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n        val = val - int(n[k - 1 - i]) * power_1\n        val = (val * 10 + int(n[k - 1 - i])) % mod\n    print(ans % mod)", "t = int(input())\nmod = 10 ** 9 + 7\nfor i in range(t):\n    n = input()\n    l = len(n)\n    power10 = [None for j in range(l + 1)]\n    power10[0] = 1\n    prod = 1\n    for j in range(1, l + 1):\n        prod = prod * 10\n        if prod >= mod:\n            prod %= mod\n        power10[j] = prod\n    front = [None for j in range(l)]\n    end = [None for j in range(l)]\n    num = [None for j in range(l)]\n    end[0] = 0\n    front[l - 1] = int(n[l - 1])\n    for j in range(1, l):\n        end[j] = (end[j - 1] * 10 % mod + int(n[j - 1])) % mod\n    for j in range(l - 2, -1, -1):\n        front[j] = (int(n[j]) * power10[l - j - 1] % mod + int(front[j + 1])) % mod\n    for j in range(l):\n        num[j] = (front[j] * power10[j] % mod + end[j]) % mod\n    ans = 0\n    for j in range(l):\n        ans = (ans * power10[l] % mod + num[j]) % mod\n    print(ans)", "for _ in range(int(input())):\n    N = input()\n    (M, l, ans, x) = (10 ** 9 + 7, len(N), 0, 1)\n    for i in range(l):\n        ans = (ans * 10 + ord(N[i]) - 48) % M\n        if i != l - 1:\n            x = x * 10 % M\n    result = ans\n    for i in range(l - 1):\n        result = ((result - (ord(N[i]) - 48) * x) * 10 + ord(N[i]) - 48) % M\n        ans = (ans * x * 10 + result) % M\n    print(ans)", "T = int(input())\nmod = int(1000000000.0 + 7)\nwhile T > 0:\n    T -= 1\n    n = input()\n    k = len(n)\n    mul = [1]\n    power = 10 ** k % mod\n    power_1 = 10 ** (k - 1) % mod\n    for i in range(k):\n        temp = mul[-1] * power\n        if temp >= mod:\n            temp %= mod\n        mul.append(temp)\n    ans = 0\n    val = int(n)\n    for i in range(k - 1, -1, -1):\n        temp = val * mul[i]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n        val = val - int(n[k - 1 - i]) * power_1\n        val = (val * 10 + int(n[k - 1 - i])) % mod\n    print(ans % mod)", "T = int(input())\nmod = int(1000000000.0 + 7)\nwhile T > 0:\n    T -= 1\n    n = input()\n    k = len(n)\n    mul = [1]\n    power = 10 ** k % mod\n    power_1 = 10 ** (k - 1) % mod\n    for i in range(k):\n        temp = mul[-1] * power\n        if temp >= mod:\n            temp %= mod\n        mul.append(temp)\n    ans = 0\n    val = int(n)\n    for i in range(k - 1, -1, -1):\n        temp = val * mul[i]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n        val = val - int(n[k - 1 - i]) * power_1\n        val = (val * 10 + int(n[k - 1 - i])) % mod\n    print(ans % mod)", "t = int(input())\n\ndef func(st):\n    ans = 0\n    for i in range(k):\n        temp = int(n[i]) * decimal[k - i - 1]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n    return ans\nmod = 10 ** 9 + 7\ndecimal = [1]\nfor i in range(10 ** 5 + 1):\n    temp = decimal[-1] * 10\n    if temp >= mod:\n        temp %= mod\n    decimal.append(temp)\nwhile t:\n    t -= 1\n    n = input()\n    k = len(n)\n    mul = [1]\n    power = 10 ** k % mod\n    power_1 = 10 ** (k - 1) % mod\n    for i in range(k):\n        temp = mul[-1] * power\n        if temp >= mod:\n            temp %= mod\n        mul.append(temp)\n    flag = k < 10\n    ans = 0\n    val = func(n)\n    for i in range(k - 1, -1, -1):\n        temp = val * mul[i]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n        val = val - int(n[k - 1 - i]) * power_1\n        val = (val * 10 + int(n[k - 1 - i])) % mod\n    print(ans % mod)", "mod = 1000000007\nfor _ in range(int(input())):\n    s = input()\n    l = len(s)\n    n = int(s) % mod\n    q = pow(10, l - 1, mod)\n    x = 0\n    for i in range(l):\n        x = x * (q * 10) % mod % mod\n        x = (x + n) % mod\n        n = (n - int(s[i]) * q) % mod * 10 + int(s[i]) % mod\n    print(x % mod)", "mod = 1000000007\nfor _ in range(int(input())):\n    s = input()\n    l = len(s)\n    n = int(s) % mod\n    q = pow(10, l - 1, mod)\n    x = 0\n    for i in range(l):\n        x = x * (q * 10) % mod % mod\n        x = (x + n) % mod\n        n = ((n - int(s[i]) * q % mod) * 10 + int(s[i])) % mod\n    print(x % mod)", "mod = 1000000007\nfor _ in range(int(input())):\n    s = input()\n    l = len(s)\n    n = int(s) % mod\n    q = pow(10, l - 1, mod)\n    x = 0\n    for i in range(l):\n        x = x * (q * 10) % mod % mod\n        x = (x + n) % mod\n        n = (n - int(s[i]) * q + mod) % mod * 10 + int(s[i]) % mod\n    print(x % mod)", "t = int(input())\nmod10 = [1]\np = 10 ** 9 + 7\nfor i in range(1, 10 ** 5 + 1):\n    temp = 10 * mod10[i - 1] % p\n    mod10.append(temp)\n\ndef res(n):\n    l = len(n)\n    a = [int(n[l - 1])]\n    for j in range(l - 2, -1, -1):\n        a.append((mod10[l - 1 - j] * int(n[j]) + a[-1]) % p)\n    return a\n\ndef res1(n):\n    l = len(n)\n    a = [0, int(n[0])]\n    for j in range(1, l - 1):\n        a.append((10 * a[-1] + int(n[j])) % p)\n    return a\nfor i in range(t):\n    n = input()\n    x = ''\n    l = len(n)\n    a = res(n)\n    b = res1(n)\n    count = 0\n    y = 0\n    while count < l:\n        y = (y + (mod10[l - count - 1] * a[count] % p + b[l - count - 1]) * pow(10, count * l, p)) % p\n        count = count + 1\n    print(y % p)", "t = int(input())\nmod10 = [1]\np = 10 ** 9 + 7\nfor i in range(1, 10 ** 5 + 1):\n    temp = 10 * mod10[i - 1] % p\n    mod10.append(temp)\n\ndef res(n):\n    l = len(n)\n    a = [int(n[l - 1])]\n    for j in range(l - 2, -1, -1):\n        a.append((mod10[l - 1 - j] * int(n[j]) + a[-1]) % p)\n    return a\n\ndef res1(n):\n    l = len(n)\n    a = [0, int(n[0])]\n    for j in range(1, l - 1):\n        a.append((10 * a[-1] + int(n[j])) % p)\n    return a\nfor i in range(t):\n    n = input()\n    x = ''\n    l = len(n)\n    a = res(n)\n    b = res1(n)\n    count = 0\n    y = 0\n    while count < l:\n        y = (y + (mod10[l - count - 1] * a[count] % p + b[l - count - 1]) * pow(10, count * l, p)) % p\n        count = count + 1\n    print(y % p)", "t = int(input())\nmod = 10 ** 9 + 7\nwhile t:\n    t -= 1\n    n = input()\n    k = len(n)\n    mul = [1]\n    power = 10 ** k % mod\n    power_1 = 10 ** (k - 1) % mod\n    for i in range(k):\n        temp = mul[-1] * power\n        if temp >= mod:\n            temp %= mod\n        mul.append(temp)\n    ans = 0\n    val = int(n) % mod\n    for i in range(k - 1, -1, -1):\n        temp = val * mul[i]\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n        val = val - int(n[k - 1 - i]) * power_1\n        val = (val * 10 + int(n[k - 1 - i])) % mod\n    print(ans % mod)", "def mody(num, a):\n    res = 0\n    for i in range(0, len(num)):\n        res = (res * 10 + int(num[i])) % a\n    return res\nt = int(input())\nmod = 10 ** 9 + 7\nwhile t:\n    t -= 1\n    n = input()\n    k = len(n)\n    mul = [1]\n    powe = 10 ** k % mod\n    pew = 10 ** (k - 1) % mod\n    for i in range(k):\n        temp = mul[-1] * powe\n        if temp >= mod:\n            temp %= mod\n        mul.append(temp)\n    flag = k < 10\n    ans = 0\n    val = mody(n, mod)\n    for i in range(k - 1, -1, -1):\n        temp = val * mul[i]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n        val = val - int(n[k - 1 - i]) * pew\n        val = (val * 10 + int(n[k - 1 - i])) % mod\n    print(ans % mod)", "for t in range(int(input())):\n    s = input()\n    t = 0\n    mod = 10 ** 9 + 7\n    n = len(s)\n    d1 = {0: 0 for i in range(len(s))}\n    d2 = {0: 0 for i in range(len(s))}\n    pow = 1\n    mu = 1\n    for i in range(1, len(s)):\n        d1[i] = d1[i - 1] * 10 % mod + int(s[i - 1])\n        pow = pow * 10 % mod\n    c = 0\n    for i in reversed(range(len(s))):\n        d2[i] = (int(s[i]) * mu % mod + c % mod) % mod\n        c = d2[i]\n        mu = mu * 10 % mod\n    mu = 1\n    for i in range(len(s)):\n        t = (t * pow * 10 % mod + d2[i] * mu % mod + d1[i] % mod) % mod\n        mu = mu * 10 % mod\n    print(t)", "t = int(input())\n\ndef func(st):\n    ans = 0\n    for i in range(k):\n        temp = int(n[i]) * decimal[k - i - 1]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n    return ans\nmod = 10 ** 9 + 7\ndecimal = [1]\nfor i in range(10 ** 5 + 1):\n    temp = decimal[-1] * 10\n    if temp >= mod:\n        temp %= mod\n    decimal.append(temp)\nwhile t:\n    t -= 1\n    n = input()\n    k = len(n)\n    mul = [1]\n    power = 10 ** k % mod\n    power_1 = 10 ** (k - 1) % mod\n    for i in range(k):\n        temp = mul[-1] * power\n        if temp >= mod:\n            temp %= mod\n        mul.append(temp)\n    flag = k < 10\n    ans = 0\n    val = func(n)\n    for i in range(k - 1, -1, -1):\n        temp = val * mul[i]\n        if temp >= mod:\n            temp %= mod\n        ans += temp\n        if ans >= mod:\n            ans %= mod\n        val = val - int(n[k - 1 - i]) * power_1\n        val = (val * 10 + int(n[k - 1 - i])) % mod\n    print(ans % mod)", "m = 10 ** 9 + 7\npowers_of_10_mod_m = [None for _ in range(10 ** 5 + 1)]\n\ndef precompute_10_power_n_mod_m():\n    powers_of_10_mod_m[0] = 1\n    for i in range(1, 10 ** 5 + 1):\n        powers_of_10_mod_m[i] = 10 * powers_of_10_mod_m[i - 1] % m\nT = int(input())\nprecompute_10_power_n_mod_m()\nwhile T:\n    N = input()\n    mod_N = len(N)\n    int_N = int(N)\n    N_mod_m = 0\n    for i in range(mod_N):\n        temp = int(N[i]) * powers_of_10_mod_m[mod_N - (i + 1)] % m\n        N_mod_m = (N_mod_m + temp) % m\n    Y_N = N_mod_m * pow(powers_of_10_mod_m[mod_N], mod_N - 1, m)\n    curr_N_mod_m = N_mod_m\n    for i in range(mod_N - 1):\n        temp1 = int(N[i]) * powers_of_10_mod_m[mod_N - 1] % m\n        temp2 = (curr_N_mod_m - temp1) % m\n        temp3 = temp2 * 10 % m\n        temp4 = (temp3 + int(N[i])) % m\n        curr_N_mod_m = temp4\n        Y_N = (Y_N + curr_N_mod_m * pow(powers_of_10_mod_m[mod_N], mod_N - (i + 2), m) % m) % m\n    print(Y_N)\n    T -= 1", "from math import *\nMOD = 1000000007\nt = int(input())\nfor f in range(t):\n    s = input()\n    t_y = 0\n    y = 0\n    pow = 1\n    n = len(s)\n    for i in range(n):\n        t_y = (t_y * 10 % MOD + int(s[i])) % MOD\n        if i:\n            pow = pow * 10 % MOD\n    y = t_y\n    for i in range(n - 1):\n        t_y = (t_y - pow * int(s[i]) % MOD % MOD) % MOD\n        if t_y < 0:\n            t_y += MOD\n        t_y = (t_y * 10 % MOD + int(s[i])) % MOD\n        y = (y * (pow * 10) % MOD % MOD + t_y) % MOD\n    print(y)", "def modulo(s, x):\n    y = 0\n    l = len(s)\n    for i in range(0, l):\n        y = (y * 10 + ord(s[i]) - 48) % x\n    return y\nfor _ in range(int(input())):\n    s = input()\n    l = len(s)\n    x = 1\n    for i in range(1, l):\n        x = x * 10 % 1000000007\n    result = modulo(s, 1000000007)\n    res = result\n    for i in range(0, l - 1):\n        result = ((result - (ord(s[i]) - 48) * x) * 10 + (ord(s[i]) - 48)) % 1000000007\n        res = (res * x * 10 + result) % 1000000007\n    print(res % 1000000007)", "t = int(input())\nfor _ in range(t):\n    mod = 10 ** 9 + 7\n    n = input()\n    ans = 0\n    for i in n:\n        ans = ans * 10 % mod\n        ans += int(i)\n        ans = ans % mod\n    ini = 0\n    main = [ans]\n    while ini < len(n) - 1:\n        current = main[-1]\n        power = pow(10, len(n) - 1, mod)\n        ans = (current - power * int(n[ini]) % mod) % mod\n        ans = (ans * 10 + int(n[ini])) % mod\n        main.append(ans)\n        ini += 1\n    power = pow(10, len(n), mod)\n    final_ans = 0\n    for i in range(len(main)):\n        final_ans *= power\n        final_ans = final_ans % mod\n        final_ans += main[i]\n        final_ans = final_ans % mod\n    print(final_ans)"]