["li = list(map(int, input().split()))\nli.sort()\nprint('Possible' if li[0] / li[1] == li[2] / li[3] else 'Impossible')", "l = [int(x) for x in input().split(' ')]\nl.sort()\nprint('Possible') if l[0] * l[3] == l[1] * l[2] else print('Impossible')", "x = list(map(int, input().split(' ')))\nx.sort()\nif x[0] / x[1] == x[2] / x[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a / b == c / d or a / b == d / c:\n    print('Possible')\nelif b / a == c / d or b / a == d / c:\n    print('Possible')\nelif a / c == b / d or a / c == d / b:\n    print('Possible')\nelif c / a == b / d or c / a == d / b:\n    print('Possible')\nelif a / d == b / c or a / d == c / b:\n    print('Possible')\nelif d / a == b / c or d / a == c / b:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] / l[2] == l[1] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] / l[2] == l[1] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = list(map(int, input().split()))\na.sort()\nif a[0] / a[1] == a[2] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = sorted(list(map(int, input().split())))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "arr = list(map(int, input().split()))\narr.sort()\nif arr[0] / arr[2] == arr[1] / arr[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "arr = list(map(int, input().split()))\narr.sort()\nprint('Possible' if arr[0] / arr[2] == arr[1] / arr[3] else 'Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nc1 = a * b == c * d\nc2 = a * c == b * d\nc3 = a * d == b * c\nif c1 or c2 or c3:\n    print('Possible ')\nelse:\n    print('Impossible')", "life = sorted(list(map(int, input().split())))\nprint('Possible' if life[0] / life[2] == life[1] / life[3] else 'Impossible')", "a = sorted(map(int, input().split()))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "a = [int(x) for x in input().split()]\na.sort()\nif a[0] / a[2] == a[1] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = [int(x) for x in input().split()]\na.sort()\nif a[0] / a[2] == a[1] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = sorted(list(map(int, input().split())))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] * l[2] == l[1] * l[3] or l[0] * l[3] == l[1] * l[2]:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] / l[2] == l[1] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = sorted(list(map(int, input().split())))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "x = input().split()\nl = []\nfor i in x:\n    i = int(i)\n    l.append(i)\nll = []\nm = 0\nfor i in range(len(l)):\n    for f in range(len(l)):\n        for j in range(len(l)):\n            for k in range(len(l)):\n                if i not in ll:\n                    ll.append(i)\n                if f not in ll:\n                    ll.append(f)\n                if j not in ll:\n                    ll.append(j)\n                if k not in ll:\n                    ll.append(k)\n                if len(ll) == len(l):\n                    a = []\n                    for h in ll:\n                        a.append(l[h])\n                    if a[0] / a[1] == a[2] / a[3]:\n                        m = 1\n            ll = []\nif m == 1:\n    print('Possible')\nelse:\n    print('Impossible')", "a = sorted(list(map(int, input().split())))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "A = list(map(int, input().split()))\nA.sort()\nif A[0] * A[3] == A[1] * A[2]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = sorted(list(map(int, input().split())))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "a = sorted(list(map(int, input().split())))\nif a[0] / a[2] == a[1] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "lst = list(map(int, input().split()))\nlst.sort()\nif lst[0] / lst[1] == lst[2] / lst[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "li = list(map(int, input().split()))\nli.sort()\nif li[0] / li[1] == li[2] / li[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "(w, x, y, z) = map(int, input().split())\nif w * x == y * z or x * z == w * y or x * y == w * z:\n    print('Possible')\nelse:\n    print('Impossible')", "a = sorted(list(map(int, input().split())))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "a = sorted(list(map(int, input().split())))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "a = sorted(list(map(int, input().split())))\nprint('Possible' if a[0] / a[2] == a[1] / a[3] else 'Impossible')", "l = list(map(int, input().split()))\nl.sort()\na = l[0] / l[2]\nb = l[1] / l[3]\nif a == b:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl1 = l.sort()\nif l[3] / l[2] == l[1] / l[0]:\n    print('Possible')\nelif l[2] / l[1] == l[1] / l[0]:\n    print('Posiible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nl = [a, b, c, d]\nl1 = l.sort()\nif l[3] / l[2] == l[1] / l[0]:\n    print('Possible')\nelif l[2] / l[1] == l[1] / l[0]:\n    print('Posiible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nlistnos = [a, b, c, d]\nmin1 = min(listnos)\nind = listnos.index(min1)\nlistnos.pop(ind)\nmin2 = min(listnos)\nind2 = listnos.index(min2)\nlistnos.pop(ind2)\nmax2 = max(listnos)\nind3 = listnos.index(max2)\nlistnos.pop(ind3)\nstrrea = [min2, max2, min1, listnos[0]]\nif strrea[1] / strrea[0] == strrea[3] / strrea[2]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nlistnos = [a, b, c, d]\nmin1 = min(listnos)\nind = listnos.index(min1)\nlistnos.pop(ind)\nmin2 = min(listnos)\nind2 = listnos.index(min2)\nlistnos.pop(ind2)\nmax2 = max(listnos)\nind3 = listnos.index(max2)\nlistnos.pop(ind3)\nstrrea = [min2, max2, min1, listnos[0]]\nif strrea[1] / strrea[0] == strrea[3] / strrea[2]:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\na = l[0] / l[2]\nb = l[1] / l[3]\nif a == b:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nd = l[0] * l[3]\ne = l[1] * l[2]\nif d == e:\n    print('Possible')\nelse:\n    print('Impossible')", "from itertools import permutations\nnumbers = list(map(int, input().split()))\n\ndef check_proportion(x, y, z, w):\n    return x * w == y * z\nfor (x, y, z, w) in permutations(numbers, 4):\n    if check_proportion(x, y, z, w):\n        print('Possible')\n        break\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nm1 = min(l)\nm2 = max(l)\nl.remove(m1)\nl.remove(m2)\n(a, b) = l\nif a * b == m1 * m2:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nl = []\nl.append(a)\nl.append(b)\nl.append(c)\nl.append(d)\nl.sort()\nd = l[0] * l[3]\ne = l[1] * l[2]\nif d == e:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a / b == c / d or a / b == d / c:\n    print('Possible')\nelif b / a == c / d or b / a == d / c:\n    print('Possible')\nelif a / c == b / d or a / c == d / b:\n    print('Possible')\nelif c / a == b / d or c / a == d / b:\n    print('Possible')\nelif a / d == b / c or a / d == c / b:\n    print('Possible')\nelif d / a == b / c or d / a == c / b:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a / b == c / d or a / b == d / c:\n    print('Possible')\nelif a / c == b / d or a / c == d / b:\n    print('Possible')\nelif a / d == b / c or a / d == c / b:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a / b == c / d or a / b == d / c:\n    print('Possible')\nelif a / c == b / d or a / c == d / b:\n    print('Possible')\nelif a / d == b / c or a / d == c / b:\n    print('Possible')\nelse:\n    print('Impossible')", "def solve():\n    if a[0] / a[1] == a[2] / a[3]:\n        return 'Possible'\n    else:\n        return 'Impossible'\na = list(map(int, input().split()))\na.sort()\nprint(solve())", "def solve():\n    if a[0] / a[1] == a[2] / a[3]:\n        return 'Possible'\n    else:\n        return 'Impossible'\na = list(map(int, input().split()))\na.sort()\nprint(solve())", "a = list(map(int, input().split()))\nb = sorted(a)\nif b[0] / b[1] == b[2] / b[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a / b == c / d or a / c == b / d or a / d == b / c or (a / b == d / c) or (a / c == d / b) or (a / d == c / b):\n    print('Possible')\nelif b / a == c / d or b / c == a / d or b / d == a / c or (b / a == d / c) or (b / c == d / a) or (b / d == c / a):\n    print('Possible')\nelif c / a == b / d or c / b == a / d or c / d == a / b or (c / a == d / b) or (c / b == d / a) or (c / d == b / a):\n    print('Possible')\nelif d / a == b / c or d / b == a / c or d / c == a / b or (d / a == c / b) or (d / b == c / a) or (d / c == b / a):\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a / b == c / d or a / c == b / d or a / d == b / c or (a / b == d / c) or (a / c == d / b) or (a / d == c / b):\n    print('Possible')\nelif b / a == c / d or b / c == a / d or b / d == a / c or (b / a == d / c) or (b / c == d / a) or (b / d == c / a):\n    print('Possible')\nelif c / a == b / d or c / b == a / d or c / d == a / b or (c / a == d / b) or (c / b == d / a) or (c / d == b / a):\n    print('Possible')\nelif d / a == b / c or d / b == a / c or d / c == a / b or (d / a == c / b) or (d / b == c / a) or (d / c == b / a):\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a / b == c / d or a / c == b / d or a / d == b / c or (a / b == d / c) or (a / c == d / b) or (a / d == c / b):\n    print('Possible')\nelif b / a == c / d or b / c == a / d or b / d == a / c or (b / a == d / c) or (b / c == d / a) or (b / d == c / a):\n    print('Possible')\nelif c / a == b / d or c / b == a / d or c / d == a / b or (c / a == d / b) or (c / b == d / a) or (c / d == b / a):\n    print('Possible')\nelif d / a == b / c or d / b == a / c or d / c == a / b or (d / a == c / b) or (d / b == c / a) or (d / c == b / a):\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = sorted(list(map(int, input().split())))\nif b / a == d / c or c / a == d / b or d / a == c / b:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * c == b * d or a * d == c * b or a * b == c * d:\n    print('Possible')\nelse:\n    print('Impossible')", "a = list(map(int, input().split()))\na = sorted(a)\nif a[0] / a[1] == a[2] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "import math\nlis = list(map(int, input().split(' ')))\nlis.sort()\nif lis[0] / lis[1] == lis[2] / lis[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = [int(x) for x in input().split()]\na = sorted(a)\nif a[0] / a[1] == a[2] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = [int(x) for x in input().split()]\na = sorted(a)\nif a[0] / a[1] == a[2] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = [int(x) for x in input().split()]\na = sorted(a)\nif a[0] / a[1] == a[2] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "lis = list(map(int, input().split()))\nlis.sort()\nif lis[0] / lis[1] == lis[2] / lis[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] / l[1] == l[2] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a / b == c / d or a / b == d / c:\n    print('Possible')\nelse:\n    print('Impossible')", "a = list(map(int, input().split()))\na.sort()\nif a[1] / a[0] == a[3] / a[2] or a[2] / a[0] == a[3] / a[1]:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] / l[1] == l[2] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] / l[1] == l[2] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "lst = list(map(int, input().split()))\nlst.sort()\nif lst[0] / lst[1] == lst[2] / lst[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "lst = list(map(int, input().split()))\nlst.sort()\nif lst[0] / lst[1] == lst[2] / lst[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\nl = I()\nl.sort()\nif l[0] / l[1] == l[2] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "A = list(map(int, input().split()))\nA.sort()\nprint('Possible') if A[0] / A[1] == A[2] / A[3] else print('Impossible')", "a = list(map(int, input().split()))\na.sort()\nif a[0] / a[1] == a[2] / a[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nprint('Possible' if a / b == c / d or b / a == c / d or c / a == b / d else 'Impossible')", "(a, b, c, d) = map(int, input().split())\nprint('Possible' if a / b == c / d or b / a == c / d or c / a == b / d else 'Impossible')", "(a, b, c, d) = (int(item) for item in input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "a = list(map(int, input().split()))\na.sort()\nif a[0] * a[3] == a[1] * a[2]:\n    print('Possible')\nelse:\n    print('Impossible')", "a = list(map(int, input().split()))\na.sort()\nif a[0] * a[3] == a[1] * a[2]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = sorted([int(x) for x in input().split()])\nif a * d == c * b:\n    print('Possible')\nelse:\n    print('Impossible')", "A = list(map(int, input().split()))\nA.sort()\nprint('Possible') if A[0] / A[1] == A[2] / A[3] else print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] / l[1] == l[2] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "l = list(map(int, input().split()))\nl.sort()\nif l[0] / l[1] == l[2] / l[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nprint('Possible' if a * b == c * d or a * c == b * d or a * d == b * c else 'Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * d == b * c or b * d == a * c or a * b == c * d:\n    print('Possible')\nelse:\n    print('Impossible')", "import sys\nx = sorted(list(map(int, sys.stdin.readline().split())))\nsys.stdout.write('Possible\\n' if x[0] / x[2] == x[1] / x[3] or x[0] / x[1] == x[2] / x[3] else 'Impossible\\n')", "import sys\nx = sorted(list(map(int, sys.stdin.readline().split())))\nif x[0] / x[2] == x[1] / x[3]:\n    sys.stdout.write('Possible\\n')\nelif x[0] / x[1] == x[2] / x[3]:\n    sys.stdout.write('Possible\\n')\nelse:\n    sys.stdout.write('Impossible\\n')", "(x, y, z, w) = map(int, input().split())\nif x * y == z * w or x * z == y * w or x * w == y * z:\n    print('Possible')\nelse:\n    print('Impossible')", "(x, y, z, w) = map(int, input().split())\nif x * y == z * w or x * z == y * w or x * w == y * z:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "s = list(map(int, input().split()))\ns.sort()\nif s[0] / s[1] == s[2] / s[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == c * b:\n    print('Possible')\nelse:\n    print('Impossible')", "lst = list(map(int, input().split()))\nlst.sort()\nif lst[0] / lst[1] == lst[2] / lst[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "lst = list(map(int, input().split()))\nlst.sort()\nlst[1] = lst[1] / lst[0]\nlst[0] = lst[0] / lst[0]\nlst[3] = lst[3] / lst[2]\nlst[2] = lst[2] / lst[2]\nif lst[0] == lst[2] and lst[1] == lst[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "lst = list(map(int, input().split()))\nlst.sort()\nlst[1] = lst[1] / lst[0]\nlst[0] = lst[0] / lst[0]\nlst[3] = lst[3] / lst[2]\nlst[2] = lst[2] / lst[2]\nif lst[0] == lst[2] and lst[1] == lst[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "lst = list(map(int, input().split()))\nlst.sort()\nif lst[0] / lst[1] == lst[2] / lst[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a / b == c / d or a / b == d / c or a / c == b / d or (a / c == d / b) or (a / d == b / c) or (a / d == c / b):\n    print('Possible')\nelse:\n    print('Impossible')", "(x, y, z, w) = map(int, input().split())\nif x / y == z / w or y / x == z / w or x / y == w / z or (y / w == z / x):\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nif a * b == c * d or a * c == b * d or a * d == b * c:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nai = [a, b, c, d]\nai.sort()\nif ai[0] / ai[1] == ai[2] / ai[3]:\n    print('Possible')\nelse:\n    print('Impossible')", "(a, b, c, d) = map(int, input().split())\nai = [a, b, c, d]\nai.sort()\nif ai[0] / ai[1] == ai[2] / ai[3]:\n    print('Possible')\nelse:\n    print('Impossible')"]