["for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    x = 10 ** 9 + 7\n    print(pow(pow(2, a, x) - 1, b, x))", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    x = 10 ** 9 + 7\n    print(pow(pow(2, a, x) - 1, b, x))", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    x = 10 ** 9 + 7\n    print(pow(pow(2, a, x) - 1, b, x))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, mod) - 1, m, mod))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, mod) - 1, m, mod))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    p = pow(pow(2, n, 1000000007) - 1, m, 1000000007)\n    print(p)", "testcases = int(input())\nfor eachcase in range(testcases):\n    (length, limit) = map(int, input().split())\n    combos = pow(pow(2, length, 1000000007) - 1, limit, 1000000007)\n    print(combos)", "def soln(n, m):\n    mod = 10 ** 9 + 7\n    return pow(pow(2, n, mod) - 1, m, mod)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(soln(n, m))", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (N, M) = list(map(int, input().split()))\n    print(pow(pow(2, N, mod) - 1, M, mod))", "t = int(input())\nwhile t:\n    (a, b) = map(int, input().split())\n    print(pow(pow(2, a, 1000000007) - 1, b, 1000000007))\n    t = t - 1", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, MOD) - 1, m, MOD))", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    comp = pow(2, N, 10 ** 9 + 7) - 1\n    res = pow(comp, M, 10 ** 9 + 7)\n    print(res)", "T = int(input())\nfor i in range(T):\n    (N, M) = map(int, input().split())\n    comp = pow(2, N, 10 ** 9 + 7) - 1\n    res = pow(comp, M, 10 ** 9 + 7)\n    print(res)", "md = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    nm = pow(2, n, md) - 1\n    ans = pow(nm, m, md)\n    print(ans)", "md = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    nm = pow(2, n, md) - 1\n    ans = pow(nm, m, md)\n    print(ans)", "mod = 10 ** 9 + 7\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    ans = pow((pow(2, n, mod) - 1) % mod, m, mod)\n    print(ans)", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    ans = pow((pow(2, N, MOD) - 1) % MOD, M, MOD)\n    print(ans)", "mod = 10 ** 9 + 7\nn = int(input())\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    print(pow(pow(2, x, mod) - 1, y, mod))", "def solve():\n    ans = pow(pow(2, n, mod) - 1, m, mod)\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    mod = 10 ** 9 + 7\n    (n, m) = list(map(int, input().split()))\n    solve()", "M = 1000000007\n\ndef mpow(x, p):\n    r = 1\n    while p:\n        if p % 2:\n            r = r * x % M\n        x = x * x % M\n        p >>= 1\n    return r\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(mpow(mpow(2, n) - 1, m))", "mod = 10 ** 9 + 7\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, mod) - 1, m, mod))", "mod = 10 ** 9 + 7\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, mod) - 1, m, mod))", "mod = 10 ** 9 + 7\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, mod) - 1, m, mod))", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, MOD) - 1, m, MOD))", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef main():\n    modulo = 1000000007\n    for _ in tr():\n        (n, m) = sm()\n        print(pow(pow(2, n, modulo) - 1, m, modulo))\nmain()", "x = int(input())\nfor i in range(x):\n    (n, m) = map(int, input().split())\n    r = pow(2, n, 1000000007) - 1\n    t = pow(r, m, 1000000007)\n    print(t)", "x = int(input())\nfor i in range(x):\n    (n, m) = map(int, input().split())\n    r = pow(2, n, 1000000007) - 1\n    t = pow(r, m, 1000000007)\n    print(t)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "MOD = 10 ** 9 + 7\nn_testcase = int(input())\nfor testcase in range(n_testcase):\n    (n, m) = (int(x) for x in input().split())\n    n_tuples = pow(pow(2, n, MOD) - 1, m, MOD)\n    print(n_tuples)", "large_prime = 1000000007\ntwopows = list()\n\ndef init_twopows(l=1000000):\n    twopows.append(1)\n    for _ in range(l):\n        twopows.append(twopows[-1] * 2 % large_prime)\n\ndef fast_exp(a, p):\n    ret = 1\n    api = a\n    while p > 0:\n        if p & 1:\n            ret = ret * api % large_prime\n        p >>= 1\n        api = api * api % large_prime\n    return ret\n\ndef f(n, m):\n    print(fast_exp(twopows[n] - 1, m) % large_prime)\nt = int(input())\ninit_twopows()\nfor _ in range(t):\n    (n, m) = input().split()\n    f(int(n), int(m))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    x = pow(2, n, 1000000007) - 1\n    print(pow(x, m, 1000000007))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = pow(2, n, 1000000007) - 1\n    print(pow(x, m, 1000000007))", "t = int(input())\nNUM = 1000000007\nwhile t:\n    (N, M) = input().split()\n    N = int(N)\n    M = int(M)\n    ans = pow(2, N, NUM) - 1\n    print(pow(ans, M, NUM))\n    t = t - 1\nexit()", "MOD = 1000000007\nn_testcase = int(input())\nfor testcase in range(n_testcase):\n    (n, m) = (int(x) for x in input().split())\n    n_tuples = pow(pow(2, n, MOD) - 1, m, MOD)\n    print(n_tuples)", "for i in range(int(input())):\n    l = list(map(int, input().split()))\n    c = pow(2, l[0], 1000000007) - 1\n    print(pow(c, l[1], 1000000007))", "t = int(input())\nmod = 10 ** 9 + 7\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    coef1 = pow(2, n, mod) - 1\n    ans = pow(coef1, m, mod)\n    print(ans)", "mod = pow(10, 9) + 7\nfor i in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    a = pow(2, n, mod) - 1\n    b = pow(a, m, mod)\n    print(int(b))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    mod = pow(10, 9) + 7\n    answer = pow(2, n, mod) - 1\n    print(pow(answer, m, mod))", "mo = 1000000007\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    b = pow(2, n, mo) - 1\n    print(pow(b, m, mo))", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = pow(2, a, 1000000007) - 1\n    print(pow(c, b, 1000000007))", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, MOD) - 1, m, MOD))", "tc = int(input())\nwhile tc != 0:\n    (n, m) = map(int, input().split())\n    k = pow(2, n, 1000000007) - 1\n    print(pow(k, m, 1000000007))\n    tc -= 1", "tc = int(input())\nwhile tc != 0:\n    (n, m) = map(int, input().split())\n    k = pow(2, n, 1000000007) - 1\n    l = pow(k, m, 1000000007)\n    print(l)\n    tc -= 1", "def power(a, b, m):\n    a %= m\n    res = 1\n    while b:\n        if b & 1:\n            res = res * a % m\n        a = a * a % m\n        b >>= 1\n    return res\nt = int(input())\nmod = 1000000007\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    print(power(power(2, n, mod) - 1, m, mod))", "p = 10 ** 9 + 7\n\ndef power(x, y):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y:\n        if y & 1:\n            res = res * x % p\n        x = x * x % p\n        y = y // 2\n    return res\nfor t in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = power(power(2, n) - 1, m)\n    print(ans)", "MOD = 1000000007\n\ndef binExpo(a, n, mod):\n    res = 1\n    a %= mod\n    while n > 0:\n        if n & 1:\n            res *= a % mod\n        a *= a % mod\n        n >>= 1\n    return res\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    ans = binExpo(2, N, MOD) - 1\n    print(binExpo(ans, M, MOD) % MOD)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(a) for a in input().split()]\n    mod = 1000000007\n    res = pow(pow(2, n, mod) - 1, m, mod)\n    print(res)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, m) = tuple(map(int, input().split()))\n    mod = 1000000007\n    a = pow(2, n, mod) - 1\n    print(pow(a, m, mod))", "from math import log2\n\ndef bin_exp(a, b, EXP):\n    lim = int(log2(b)) + 1\n    val = 1\n    for i in range(lim):\n        if 2 ** i & b != 0:\n            val = val * EXP[i + 1] % MOD\n    return val\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, m) = map(int, input().split())\n        a1 = (bin_exp(2, n, EXP) - 1) % MOD\n        EXPT[1] = a1\n        for i in range(2, P):\n            EXPT[i] = EXPT[i - 1] ** 2 % MOD\n        a2 = bin_exp(a1, m, EXPT) % MOD\n        print(a2)\nMOD = 10 ** 9 + 7\nP = int(log2(10 ** 6)) + 2\nEXP = [1] * P\nEXPT = [1] * P\nEXP[1] = 2\nfor i in range(2, P):\n    EXP[i] = EXP[i - 1] ** 2 % MOD\nmain()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = pow(2, n, 1000000007) - 1\n    print(pow(a, m, 1000000007))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split(' '))\n    temp = pow(2, n, 1000000007) - 1\n    print(pow(temp, m, 1000000007))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    x = pow(2, n, 10 ** 9 + 7)\n    print(pow(x - 1, m, 10 ** 9 + 7))", "def power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nfor _ in range(int(input())):\n    [N, M] = [int(i) for i in input().split(' ')]\n    ans = power(power(2, N, 1000000007) - 1, M, 1000000007)\n    print(ans)", "MOD = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, MOD) - 1, m, MOD))", "MOD = 10 ** 9 + 7\n\ndef NoOfZeroBitwiseAndTuples(N, M):\n    twoPowerN = pow(2, N, MOD)\n    subOne = (twoPowerN - 1) % MOD if twoPowerN - 1 > 0 else MOD + twoPowerN - 1\n    count = pow(subOne, M, MOD)\n    return count\nT = int(input())\nfor case in range(T):\n    (N, M) = map(int, input().split())\n    print(NoOfZeroBitwiseAndTuples(N, M))", "def modular_exponentiation(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\ntry:\n    t = int(input())\n    p = 10 ** 9 + 7\n    while t:\n        t -= 1\n        (n, m) = map(int, input().split())\n        a = pow(2, n, p) - 1\n        b = pow(a, m, p)\n        print(b)\nexcept:\n    pass", "import sys\nt = int(sys.stdin.readline())\nfor i in range(t):\n    listed = sys.stdin.readline().strip().split(' ')\n    N = int(listed[0])\n    M = int(listed[1])\n    print(pow(pow(2, N, 1000000007) - 1, M, 1000000007) % 1000000007)", "MOD = int(1000000000.0 + 7)\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, MOD) - 1, m, MOD))", "t = int(input())\nmod = 1000000007\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    tmp = pow(2, a, mod) - 1\n    res = pow(tmp, b, mod)\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split(' '))\n    print(pow(pow(2, n, 1000000007) - 1, m, 1000000007))", "t = int(input())\nans = []\nfor _ in range(t):\n    mod = 1000000007\n    (n, m) = map(int, input().split())\n    base = pow(2, n, mod) - 1\n    count = pow(base, m, mod)\n    ans.append(count)\nfor _ in ans:\n    print(_)", "def pow(x, n):\n    if n == 1:\n        return x\n    elif n == 0:\n        return 1\n    else:\n        ans = pow(x, n // 2) % (10 ** 9 + 7)\n        ans = ans * ans % (10 ** 9 + 7)\n        if n % 2 != 0:\n            ans = ans * x % (10 ** 9 + 7)\n        return ans\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow((pow(2, n) - 1) % (10 ** 9 + 7), m))", "d = {}\n\ndef pow(x, y, m=10 ** 9 + 7):\n    if y == 0:\n        return 1\n    elif y % 2 == 0:\n        abc = pow(x, y // 2, m)\n        return abc % m * abc % m % m\n    else:\n        abc = pow(x, y // 2, m)\n        return x * abc % m * abc % m % m\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow((pow(2, n) - 1) % (10 ** 9 + 7), m))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    k = pow(2, n, 1000000007) - 1\n    a = pow(k, m, 1000000007)\n    print(a)", "t = int(input())\nwhile t > 0:\n    (aval, bval) = map(int, input().split())\n    cval = pow(2, aval, 1000000007)\n    dval = cval - 1\n    xval = pow(dval, bval, 1000000007)\n    print(xval)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    va = pow(2, n, 1000000007) - 1\n    ans = pow(va, m, 1000000007)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    ans = int(pow(2, n, 1000000007)) - 1\n    ans = int(pow(ans, m, 1000000007))\n    print(ans)", "t = int(input())\nmod = 1000000007\nwhile t:\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    base = pow(2, n, mod) - 1\n    print(pow(base, m, mod))\n    t -= 1", "t = int(input())\nmod = 1000000007\nwhile t:\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    base = pow(2, n, mod) - 1\n    print(pow(base, m, mod))\n    t -= 1", "for i in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    mod = 10 ** 9 + 7\n    x = pow(2, n, mod) - 1\n    ans = pow(x, m, mod)\n    print(ans)", "testcase = int(input())\nfor ele in range(testcase):\n    (N, M) = list(map(int, input().rstrip().split()))\n    mod = 10 ** 9 + 7\n    x = pow(2, N, mod) - 1\n    ans = pow(x, M, mod)\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, 1000000007) - 1, m, 1000000007))", "import sys\nfrom os import path\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output1.txt', 'w')\nfrom heapq import heappop, heappush, heapify\nfrom math import ceil\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ans = pow(2, n, mod) - 1\n    print(pow(ans, m, mod))", "t = int(input())\nmod = 1000000007\nwhile t > 0:\n    (N, M) = input().split()\n    N = int(N)\n    M = int(M)\n    i = pow(2, N, mod) - 1\n    i = pow(i, M, mod)\n    print(i)\n    t -= 1", "t = int(input())\nmod = 1000000007\nwhile t > 0:\n    (N, M) = input().split()\n    N = int(N)\n    M = int(M)\n    i = pow(2, N, mod) % mod - 1\n    i = pow(i, M, mod)\n    print(i)\n    t -= 1", "def binexp(N, M, K):\n    if M == 1:\n        return N\n    res = binexp(N * N % K, M // 2, K)\n    if M % 2 == 1:\n        res = N * res % K\n    return res\n\ndef run_one_test_case():\n    (N, M) = list(map(int, input().split()))\n    K = 10 ** 9 + 7\n    B = binexp(2, N, K)\n    B = (B - 1) % K\n    print(binexp(B, M, K))\n\ndef run_one_test_case1():\n    (N, M) = list(map(int, input().split()))\n    K = 10 ** 9 + 7\n    P = (2 ** N - 1) % K\n    print(P ** M % K)\n\ndef main():\n    for _ in range(int(input())):\n        run_one_test_case()\nmain()", "mod = 10 ** 9 + 7\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    f = 1\n    x = 2\n    while n > 0:\n        if n & 1 == 1:\n            f = f * x % mod\n        n = n >> 1\n        x = x * x % mod\n    f = f - 1\n    f = f % mod\n    x = f\n    ans = 1\n    while m > 0:\n        if m & 1 == 1:\n            ans = ans * x % mod\n        m = m >> 1\n        x = x * x % mod\n    ans = ans % mod\n    print(ans)", "def power(x, y):\n    x %= 10 ** 9 + 7\n    res = 1\n    while y:\n        if y % 2:\n            res = res * x % (10 ** 9 + 7)\n        y >>= 1\n        x *= x % (10 ** 9 + 7)\n    return res\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print(power(power(2, n) - 1, m) % (10 ** 9 + 7))", "t = int(input())\nmod = 1000000007\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    print(pow(pow(2, n, mod) - 1, m, mod))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    total = pow(2, n, 1000000007) - 1\n    total = pow(total, m, 1000000007)\n    print(total)", "T = int(input())\nwhile T > 0:\n    arr = list(map(int, input().split()))\n    n = arr[0]\n    m = arr[1]\n    a = pow(2, n, 1000000007) - 1\n    b = pow(a, m, 1000000007)\n    print(b)\n    T -= 1", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    c = pow(2, a, 1000000007) - 1\n    print(pow(c, b, 1000000007))", "from sys import stdin, stdout\n\ndef power(a, b, mod=1000000007):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res = res * a % mod\n        b = b >> 1\n        a = a * a % mod\n    return res\nfor _ in range(int(stdin.readline())):\n    (N, M) = map(int, stdin.readline().split())\n    print(power(power(2, N) - 1, M))", "t = int(input())\nmod = pow(10, 9) + 7\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    ans = pow(pow(2, n, mod) - 1, m, mod)\n    print(ans)", "test = int(input())\nmod = 1000000007\nwhile test:\n    (N, M) = input().split()\n    N = int(N)\n    M = int(M)\n    base = pow(2, N, mod) - 1\n    print(pow(base, M, mod))\n    test -= 1", "import collections\nfrom collections import defaultdict\nimport math\nfrom math import gcd\nfrom collections import Counter\nmod = 1000000007\nfor _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    temp = pow(2, n, mod) - 1\n    print(pow(temp, m, mod))", "t = int(input())\nmod = 1000000007\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    print(pow(pow(2, n, mod) - 1, m, mod) % mod)", "import sys\n\ndef modexpo1(base, power, mod):\n    if power == 0:\n        return 1\n    elif power % 2 == 0:\n        v = modexpo1(base, power // 2, mod) % mod\n        return v * v % mod\n    elif power % 2 != 0:\n        return base % mod * modexpo1(base, power - 1, mod) % mod % mod\nfor k in range(int(input())):\n    (n, m) = map(int, sys.stdin.readline().split())\n    mod = pow(10, 9) + 7\n    va = 1\n    va1 = modexpo1(2, n, mod) - 1\n    va2 = modexpo1(va1, m, mod)\n    print(va2)", "try:\n    for i in range(int(input())):\n        (a, b) = map(int, input().split())\n        c = pow(2, a, 1000000007) - 1\n        print(pow(c, b, 1000000007))\nexcept:\n    pass", "try:\n    for i in range(int(input())):\n        (a, b) = map(int, input().split())\n        c = pow(2, a, 1000000007) - 1\n        print(pow(c, b, 1000000007))\nexcept:\n    pass"]