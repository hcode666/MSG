["from sys import stdin\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    (m, x, y) = map(int, stdin.readline().split())\n    a = 1\n    b = 2\n    for i in range(2, int(m / 2 + 1)):\n        mark = int(i * x / y)\n        if a < mark + 1:\n            a = 2 * a - 1\n        elif a < i:\n            a = 2 * a + 1\n        elif a < mark + i:\n            a = 2 * (a - i + 1)\n        else:\n            a = 2 * (a - i + 2)\n        if b < mark + 1:\n            b = 2 * b - 1\n        elif b < i:\n            b = 2 * b + 1\n        elif b < mark + i:\n            b = 2 * (b - i + 1)\n        else:\n            b = 2 * (b - i + 2)\n    print(a ^ b)", "from sys import stdin\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    (m, x, y) = map(int, stdin.readline().split())\n    a = 1\n    b = 2\n    for i in range(2, int(m / 2 + 1)):\n        mark = int(i * x / y)\n        if a < mark + 1:\n            a = 2 * a - 1\n        elif a < i:\n            a = 2 * a + 1\n        elif a < mark + i:\n            a = 2 * (a - i + 1)\n        else:\n            a = 2 * (a - i + 2)\n        if b < mark + 1:\n            b = 2 * b - 1\n        elif b < i:\n            b = 2 * b + 1\n        elif b < mark + i:\n            b = 2 * (b - i + 1)\n        else:\n            b = 2 * (b - i + 2)\n    print(a ^ b)", "def f(val, x, y, subsize):\n    rem = int(subsize * (x / y))\n    if val < rem:\n        val = 2 * val\n    elif val < subsize - 1:\n        val = 2 * val + 2\n    elif val < rem + subsize - 1:\n        val = 2 * (val - (subsize - 1)) + 1\n    else:\n        val = 2 * (val - (subsize - 1)) + 3\n    return val\nfor _ in range(int(input())):\n    (m, x, y) = [int(i) for i in input().split()]\n    a = 0\n    b = 1\n    for i in range(2, m // 2 + 1):\n        a = f(a, x, y, i)\n        b = f(b, x, y, i)\n    print(a + 1 ^ b + 1)", "def f(val, x, y, subsize):\n    rem = int(subsize * (x / y))\n    if val < rem:\n        val = 2 * val\n    elif val < subsize - 1:\n        val = 2 * val + 2\n    elif val < rem + subsize - 1:\n        val = 2 * (val - (subsize - 1)) + 1\n    else:\n        val = 2 * (val - (subsize - 1)) + 3\n    return val\nfor _ in range(int(input())):\n    (m, x, y) = [int(i) for i in input().split()]\n    a = 0\n    b = 1\n    for i in range(2, m // 2 + 1):\n        a = f(a, x, y, i)\n        b = f(b, x, y, i)\n    print(a + 1 ^ b + 1)", "def f(val, x, y, subsize):\n    rem = int(subsize * (x / y))\n    if val < rem:\n        val = 2 * val\n    elif val < subsize - 1:\n        val = 2 * val + 2\n    elif val < rem + subsize - 1:\n        val = 2 * (val - (subsize - 1)) + 1\n    else:\n        val = 2 * (val - (subsize - 1)) + 3\n    return val\nfor _ in range(int(input())):\n    (m, x, y) = [int(i) for i in input().split()]\n    a = 0\n    b = 1\n    for i in range(2, m // 2 + 1):\n        a = f(a, x, y, i)\n        b = f(b, x, y, i)\n    print(a + 1 ^ b + 1)", "T = int(input())\nfor _ in range(T):\n    (M, X, Y) = [int(x) for x in input().split()]\n    vPosition = 1\n    wPosition = 2\n    for arrayLength in range(2, M - 1, 2):\n        evenT_Length = arrayLength // 2\n        even_Length = arrayLength // 2 + 1\n        odd_Length = arrayLength // 2 + 1\n        positionGoing = even_Length * X // Y\n        if vPosition < even_Length:\n            new_vPosition = vPosition\n            if new_vPosition > positionGoing:\n                new_vPosition += 1\n            new_vPosition = new_vPosition * 2 - 1\n        else:\n            new_vPosition = vPosition - evenT_Length\n            if new_vPosition > positionGoing:\n                new_vPosition += 1\n            new_vPosition = new_vPosition * 2\n        vPosition = new_vPosition\n        if wPosition < even_Length:\n            new_wPosition = wPosition\n            if new_wPosition > positionGoing:\n                new_wPosition += 1\n            new_wPosition = new_wPosition * 2 - 1\n        else:\n            new_wPosition = wPosition - evenT_Length\n            if new_wPosition > positionGoing:\n                new_wPosition += 1\n            new_wPosition = new_wPosition * 2\n        wPosition = new_wPosition\n    print(wPosition ^ vPosition)", "def solve(M, X, Y):\n    pos = [0, 1]\n    l = 1\n    while l < M // 2:\n        pos = [2 * x if x < l else 2 * (x - l) + 1 for x in pos]\n        l += 1\n        rm = l * X // Y * 2\n        pos = [x + 2 if x >= rm else x for x in pos]\n    return pos[0] + 1 ^ pos[1] + 1\nT = int(input())\nfor _ in range(T):\n    (M, X, Y) = map(int, input().split())\n    print(solve(M, X, Y))", "def add(ind, half_cards, X, Y):\n    cut = (half_cards + 1) * X // Y\n    if ind < half_cards:\n        if ind >= cut:\n            return ind + 1\n        else:\n            return ind\n    elif ind - half_cards >= cut:\n        return ind + 2\n    else:\n        return ind + 1\nT = int(input())\nfor case in range(T):\n    (M, X, Y) = [int(val) for val in input().split()]\n    cards = 2\n    half_cards = 1\n    ind1 = 0\n    ind2 = 1\n    while cards < M:\n        ind1 = add(ind1, half_cards, X, Y)\n        ind2 = add(ind2, half_cards, X, Y)\n        cards += 2\n        half_cards += 1\n        if ind1 < half_cards:\n            ind1 *= 2\n        else:\n            ind1 = (ind1 - half_cards) * 2 + 1\n        if ind2 < half_cards:\n            ind2 *= 2\n        else:\n            ind2 = (ind2 - half_cards) * 2 + 1\n    print(ind1 + 1 ^ ind2 + 1)", "def solve1(m, a, b):\n    ret = [0, 1]\n    for n in range(4, m + 2, 2):\n        p = a * (n // 2) // b\n        ret = [a if a < p else a + 1 if a < p + n // 2 - 1 else a + 2 for a in ret]\n        ret = [2 * (a % (n // 2)) + (1 if a >= n // 2 else 0) for a in ret]\n    return ret\n\ndef solve(m, a, b):\n    (a, b) = solve1(m, a, b)\n    return a + 1 ^ b + 1\nimport sys\nf = sys.stdin\nt = int(f.readline())\nfor i in range(t):\n    (m, a, b) = map(int, f.readline().split())\n    print(solve(m, a, b))"]