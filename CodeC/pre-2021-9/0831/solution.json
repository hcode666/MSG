["import math\nfor t in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    l11 = []\n    l22 = []\n    l33 = []\n    for i in range(0, 2 * n, 2):\n        s = math.sqrt((x - l1[i]) ** 2 + (y - l1[i + 1]) ** 2)\n        l11.append((s, (l1[i], l1[i + 1])))\n    l11.sort(key=lambda x: x[0])\n    for i in range(0, 2 * m, 2):\n        s = math.sqrt((l11[0][1][0] - l2[i]) ** 2 + (l11[0][1][1] - l2[i + 1]) ** 2)\n        l22.append((s, (l2[i], l2[i + 1])))\n    l22.sort(key=lambda x: x[0])\n    for i in range(0, 2 * k, 2):\n        s = math.sqrt((l22[0][1][0] - l3[i]) ** 2 + (l22[0][1][1] - l3[i + 1]) ** 2)\n        l33.append((s, (l3[i], l3[i + 1])))\n    l33.sort(key=lambda x: x[0])\n    ans1 = ans2 = 999999999999999999\n    if n > 35:\n        n = 35\n    if m > 70:\n        m = 70\n    if k > 50:\n        k = 50\n    for i in range(0, n):\n        s = math.sqrt((x - l11[i][1][0]) ** 2 + (y - l11[i][1][1]) ** 2)\n        for j in range(0, m):\n            s1 = s\n            s += math.sqrt((l11[i][1][0] - l22[j][1][0]) ** 2 + (l11[i][1][1] - l22[j][1][1]) ** 2)\n            for q in range(0, k):\n                s2 = s\n                s += math.sqrt((l22[j][1][0] - l33[q][1][0]) ** 2 + (l22[j][1][1] - l33[q][1][1]) ** 2)\n                if s < ans1:\n                    ans1 = s\n                s = s2\n            s = s1\n    for i in range(0, m):\n        s = math.sqrt((x - l22[i][1][0]) ** 2 + (y - l22[i][1][1]) ** 2)\n        for j in range(0, n):\n            s1 = s\n            s += math.sqrt((l22[i][1][0] - l11[j][1][0]) ** 2 + (l22[i][1][1] - l11[j][1][1]) ** 2)\n            for q in range(0, k):\n                s2 = s\n                s += math.sqrt((l11[j][1][0] - l33[q][1][0]) ** 2 + (l11[j][1][1] - l33[q][1][1]) ** 2)\n                if s < ans2:\n                    ans2 = s\n                s = s2\n            s = s1\n    print(min(ans1, ans2))", "import math\nfor t in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    l11 = []\n    l22 = []\n    l33 = []\n    for i in range(0, 2 * n, 2):\n        s = math.sqrt((x - l1[i]) ** 2 + (y - l1[i + 1]) ** 2)\n        l11.append((s, (l1[i], l1[i + 1])))\n    l11.sort(key=lambda x: x[0])\n    for i in range(0, 2 * m, 2):\n        s = math.sqrt((l11[0][1][0] - l2[i]) ** 2 + (l11[0][1][1] - l2[i + 1]) ** 2)\n        l22.append((s, (l2[i], l2[i + 1])))\n    l22.sort(key=lambda x: x[0])\n    for i in range(0, 2 * k, 2):\n        s = math.sqrt((l22[0][1][0] - l3[i]) ** 2 + (l22[0][1][1] - l3[i + 1]) ** 2)\n        l33.append((s, (l3[i], l3[i + 1])))\n    l33.sort(key=lambda x: x[0])\n    ans1 = ans2 = 999999999999999999\n    if n > 35:\n        n = 35\n    if m > 70:\n        m = 70\n    if k > 50:\n        k = 50\n    for i in range(0, n):\n        s = math.sqrt((x - l11[i][1][0]) ** 2 + (y - l11[i][1][1]) ** 2)\n        for j in range(0, m):\n            s1 = s\n            s += math.sqrt((l11[i][1][0] - l22[j][1][0]) ** 2 + (l11[i][1][1] - l22[j][1][1]) ** 2)\n            for q in range(0, k):\n                s2 = s\n                s += math.sqrt((l22[j][1][0] - l33[q][1][0]) ** 2 + (l22[j][1][1] - l33[q][1][1]) ** 2)\n                if s < ans1:\n                    ans1 = s\n                s = s2\n            s = s1\n    for i in range(0, m):\n        s = math.sqrt((x - l22[i][1][0]) ** 2 + (y - l22[i][1][1]) ** 2)\n        for j in range(0, n):\n            s1 = s\n            s += math.sqrt((l22[i][1][0] - l11[j][1][0]) ** 2 + (l22[i][1][1] - l11[j][1][1]) ** 2)\n            for q in range(0, k):\n                s2 = s\n                s += math.sqrt((l11[j][1][0] - l33[q][1][0]) ** 2 + (l11[j][1][1] - l33[q][1][1]) ** 2)\n                if s < ans2:\n                    ans2 = s\n                s = s2\n            s = s1\n    print(min(ans1, ans2))", "import math\nfor t in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    l11 = []\n    l22 = []\n    l33 = []\n    for i in range(0, 2 * n, 2):\n        s = math.sqrt((x - l1[i]) ** 2 + (y - l1[i + 1]) ** 2)\n        l11.append((s, (l1[i], l1[i + 1])))\n    l11.sort(key=lambda x: x[0])\n    for i in range(0, 2 * m, 2):\n        s = math.sqrt((l11[0][1][0] - l2[i]) ** 2 + (l11[0][1][1] - l2[i + 1]) ** 2)\n        l22.append((s, (l2[i], l2[i + 1])))\n    l22.sort(key=lambda x: x[0])\n    for i in range(0, 2 * k, 2):\n        s = math.sqrt((l22[0][1][0] - l3[i]) ** 2 + (l22[0][1][1] - l3[i + 1]) ** 2)\n        l33.append((s, (l3[i], l3[i + 1])))\n    l33.sort(key=lambda x: x[0])\n    ans1 = ans2 = 999999999999999999\n    if n > 40:\n        n = 40\n    if m > 70:\n        m = 70\n    if k > 50:\n        k = 50\n    for i in range(0, n):\n        s = math.sqrt((x - l11[i][1][0]) ** 2 + (y - l11[i][1][1]) ** 2)\n        for j in range(0, m):\n            s1 = s\n            s += math.sqrt((l11[i][1][0] - l22[j][1][0]) ** 2 + (l11[i][1][1] - l22[j][1][1]) ** 2)\n            for q in range(0, k):\n                s2 = s\n                s += math.sqrt((l22[j][1][0] - l33[q][1][0]) ** 2 + (l22[j][1][1] - l33[q][1][1]) ** 2)\n                if s < ans1:\n                    ans1 = s\n                s = s2\n            s = s1\n    for i in range(0, m):\n        s = math.sqrt((x - l22[i][1][0]) ** 2 + (y - l22[i][1][1]) ** 2)\n        for j in range(0, n):\n            s1 = s\n            s += math.sqrt((l22[i][1][0] - l11[j][1][0]) ** 2 + (l22[i][1][1] - l11[j][1][1]) ** 2)\n            for q in range(0, k):\n                s2 = s\n                s += math.sqrt((l11[j][1][0] - l33[q][1][0]) ** 2 + (l11[j][1][1] - l33[q][1][1]) ** 2)\n                if s < ans2:\n                    ans2 = s\n                s = s2\n            s = s1\n    print(min(ans1, ans2))", "def distance(c1, c2):\n    (x, y) = c1\n    (x1, y1) = c2\n    dist = ((x - x1) ** 2 + (y - y1) ** 2) ** 0.5\n    return dist\n\ndef solve(x, y, ab, cd, ef):\n    ans = float('inf')\n    d = {}\n    for a in ab:\n        dist = distance((x, y), a)\n        d[a] = dist\n        if dist < ans:\n            for c in cd:\n                dist = distance(a, c) + d[a]\n                d[c] = dist\n                if dist < ans:\n                    for e in ef:\n                        dist = distance(c, e) + d[c]\n                        if dist < ans:\n                            ans = dist\n    return ans\nt = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    ab = [int(i) for i in input().split()]\n    ab = [(ab[i], ab[i + 1]) for i in range(2 * n) if i % 2 == 0]\n    cd = [int(i) for i in input().split()]\n    cd = [(cd[i], cd[i + 1]) for i in range(2 * m) if i % 2 == 0]\n    ef = [int(i) for i in input().split()]\n    ef = [(ef[i], ef[i + 1]) for i in range(2 * k) if i % 2 == 0]\n    ans1 = solve(x, y, ab, cd, ef)\n    ans2 = solve(x, y, cd, ab, ef)\n    print(min(ans1, ans2))", "import sys\nt = int(input())\n\ndef dist(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\nwhile t:\n    t -= 1\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    low = sys.maxsize\n    for i in range(n):\n        probable_low = dist(x, y, a[2 * i], a[2 * i + 1])\n        if probable_low < low:\n            for j in range(m):\n                step1_low = probable_low + dist(a[2 * i], a[2 * i + 1], b[2 * j], b[j * 2 + 1])\n                if step1_low < low:\n                    for l in range(k):\n                        step2_low = step1_low + dist(b[2 * j], b[j * 2 + 1], c[2 * l], c[l * 2 + 1])\n                        if step2_low < low:\n                            low = step2_low\n    low_2 = sys.maxsize\n    for i in range(m):\n        probable_low = dist(x, y, b[2 * i], b[2 * i + 1])\n        if probable_low < low_2:\n            for j in range(n):\n                step1_low = probable_low + dist(b[2 * i], b[2 * i + 1], a[2 * j], a[2 * j + 1])\n                if step1_low < low_2:\n                    for l in range(k):\n                        step2_low = step1_low + dist(a[2 * j], a[j * 2 + 1], c[2 * l], c[l * 2 + 1])\n                        if step2_low < low_2:\n                            low_2 = step2_low\n    print(min(low, low_2))", "import sys\nt = int(input())\n\ndef dist(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\nwhile t:\n    t -= 1\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    low = sys.maxsize\n    for i in range(n):\n        probable_low = dist(x, y, a[2 * i], a[2 * i + 1])\n        if probable_low < low:\n            for j in range(m):\n                step1_low = probable_low + dist(a[2 * i], a[2 * i + 1], b[2 * j], b[j * 2 + 1])\n                if step1_low < low:\n                    for l in range(k):\n                        step2_low = step1_low + dist(b[2 * j], b[j * 2 + 1], c[2 * l], c[l * 2 + 1])\n                        if step2_low < low:\n                            low = step2_low\n    low_2 = sys.maxsize\n    for i in range(m):\n        probable_low = dist(x, y, b[2 * i], b[2 * i + 1])\n        if probable_low < low_2:\n            for j in range(n):\n                step1_low = probable_low + dist(b[2 * i], b[2 * i + 1], a[2 * j], a[2 * j + 1])\n                if step1_low < low_2:\n                    for l in range(k):\n                        step2_low = step1_low + dist(a[2 * j], a[j * 2 + 1], c[2 * l], c[l * 2 + 1])\n                        if step2_low < low_2:\n                            low_2 = step2_low\n    print(min(low, low_2))", "def distance(c1, c2):\n    (x, y) = c1\n    (x1, y1) = c2\n    dist = ((x - x1) ** 2 + (y - y1) ** 2) ** 0.5\n    return dist\n\ndef solve(x, y, ab, cd, ef):\n    ans = float('inf')\n    dab = {}\n    dcd = {}\n    for a in ab:\n        dist = distance((x, y), a)\n        dab[a] = dist\n        if dist < ans:\n            for c in cd:\n                dist = distance(a, c) + dab[a]\n                dcd[c] = dist\n                if dist < ans:\n                    for e in ef:\n                        dist = distance(c, e) + dcd[c]\n                        if dist < ans:\n                            ans = dist\n    return ans\nt = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    ab = [int(i) for i in input().split()]\n    ab = [(ab[i], ab[i + 1]) for i in range(2 * n) if i % 2 == 0]\n    cd = [int(i) for i in input().split()]\n    cd = [(cd[i], cd[i + 1]) for i in range(2 * m) if i % 2 == 0]\n    ef = [int(i) for i in input().split()]\n    ef = [(ef[i], ef[i + 1]) for i in range(2 * k) if i % 2 == 0]\n    ans1 = solve(x, y, ab, cd, ef)\n    ans2 = solve(x, y, cd, ab, ef)\n    print(min(ans1, ans2))", "import sys\nt = int(input())\n\ndef dist(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\nwhile t:\n    t -= 1\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    low = sys.maxsize\n    for i in range(n):\n        probable_low = dist(x, y, a[2 * i], a[2 * i + 1])\n        if probable_low < low:\n            for j in range(m):\n                step1_low = probable_low + dist(a[2 * i], a[2 * i + 1], b[2 * j], b[j * 2 + 1])\n                if step1_low < low:\n                    for l in range(k):\n                        step2_low = step1_low + dist(b[2 * j], b[j * 2 + 1], c[2 * l], c[l * 2 + 1])\n                        if step2_low < low:\n                            low = step2_low\n    low_2 = sys.maxsize\n    for i in range(m):\n        probable_low = dist(x, y, b[2 * i], b[2 * i + 1])\n        if probable_low < low_2:\n            for j in range(n):\n                step1_low = probable_low + dist(b[2 * i], b[2 * i + 1], a[2 * j], a[j * 2 + 1])\n                if step1_low < low_2:\n                    for l in range(k):\n                        step2_low = step1_low + dist(a[2 * j], a[j * 2 + 1], c[2 * l], c[l * 2 + 1])\n                        if step2_low < low_2:\n                            low_2 = step2_low\n    print(min(low, low_2))", "import math\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().strip().split())\n    (N, M, K) = map(int, input().strip().split())\n    A = list(map(int, input().strip().split()))\n    B = list(map(int, input().strip().split()))\n    C = list(map(int, input().strip().split()))\n    min_dist_1 = math.inf\n    for i in range(0, 2 * N - 1, 2):\n        total_dist_1 = math.sqrt((x - A[i]) ** 2 + (y - A[i + 1]) ** 2)\n        if total_dist_1 < min_dist_1:\n            for j in range(0, 2 * M - 1, 2):\n                total_dist_2 = total_dist_1 + math.sqrt((A[i] - B[j]) ** 2 + (A[i + 1] - B[j + 1]) ** 2)\n                if total_dist_2 < min_dist_1:\n                    for k in range(0, 2 * K - 1, 2):\n                        total_dist_3 = total_dist_2 + math.sqrt((B[j] - C[k]) ** 2 + (B[j + 1] - C[k + 1]) ** 2)\n                        if total_dist_3 < min_dist_1:\n                            min_dist_1 = total_dist_3\n    min_dist_2 = math.inf\n    for j in range(0, 2 * M - 1, 2):\n        key_a = -1\n        total_dist_1 = math.sqrt((x - B[j]) ** 2 + (y - B[j + 1]) ** 2)\n        if total_dist_1 < min_dist_2:\n            for i in range(0, 2 * N - 1, 2):\n                key_a += 1\n                total_dist_2 = total_dist_1 + math.sqrt((A[i] - B[j]) ** 2 + (A[i + 1] - B[j + 1]) ** 2)\n                if total_dist_2 < min_dist_2:\n                    for k in range(0, 2 * K - 1, 2):\n                        total_dist_3 = total_dist_2 + math.sqrt((A[i] - C[k]) ** 2 + (A[i + 1] - C[k + 1]) ** 2)\n                        if total_dist_3 < min_dist_2:\n                            min_dist_2 = total_dist_3\n    print(round(min(min_dist_1, min_dist_2), 10))", "import math\n\ndef distance(a, b, l1, l2):\n    return math.sqrt((a - l1) ** 2 + (b - l2) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    nn = list(map(int, input().split()))\n    mm = list(map(int, input().split()))\n    kk = list(map(int, input().split()))\n    p1 = 99999999999999999\n    for i in range(0, n * 2, 2):\n        z1 = distance(x, y, nn[i], nn[i + 1])\n        if z1 < p1:\n            for j in range(0, m * 2, 2):\n                z2 = z1 + distance(nn[i], nn[i + 1], mm[j], mm[j + 1])\n                if z2 < p1:\n                    for l in range(0, k * 2, 2):\n                        z3 = z2 + distance(mm[j], mm[j + 1], kk[l], kk[l + 1])\n                        if z3 < p1:\n                            p1 = min(p1, z3)\n    for i in range(0, m * 2, 2):\n        z4 = distance(x, y, mm[i], mm[i + 1])\n        if z4 < p1:\n            for j in range(0, n * 2, 2):\n                z5 = z4 + distance(mm[i], mm[i + 1], nn[j], nn[j + 1])\n                if z5 < p1:\n                    for l in range(0, k * 2, 2):\n                        z6 = z5 + distance(nn[j], nn[j + 1], kk[l], kk[l + 1])\n                        if z6 < p1:\n                            p1 = min(p1, z6)\n    print(round(p1, 10))", "import math\n\ndef euc_dist(a1, b1, a2, b2):\n    return math.sqrt((a2 - a1) ** 2 + (b2 - b1) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    path1 = math.inf\n    for i in range(0, n * 2, 2):\n        p_a = euc_dist(x, y, a[i], a[i + 1])\n        if p_a < path1:\n            for j in range(0, m * 2, 2):\n                p_a_b = p_a + euc_dist(a[i], a[i + 1], b[j], b[j + 1])\n                if p_a_b < path1:\n                    for l in range(0, k * 2, 2):\n                        p_a_b_c = p_a_b + euc_dist(b[j], b[j + 1], c[l], c[l + 1])\n                        if p_a_b_c < path1:\n                            path1 = p_a_b_c\n    path2 = math.inf\n    for i in range(0, m * 2, 2):\n        p_b = euc_dist(x, y, b[i], b[i + 1])\n        if p_b < path2:\n            for j in range(0, n * 2, 2):\n                p_b_a = p_b + euc_dist(b[i], b[i + 1], a[j], a[j + 1])\n                if p_b_a < path2:\n                    for l in range(0, k * 2, 2):\n                        p_b_a_c = p_b_a + euc_dist(a[j], a[j + 1], c[l], c[l + 1])\n                        if p_b_a_c < path2:\n                            path2 = p_b_a_c\n    print(min(path1, path2))", "def dist(x, y, p, q):\n    return ((x - p) ** 2 + (y - q) ** 2) ** 0.5\nfor _ in range(int(input())):\n    xy = list(map(int, input().split()))\n    nmk = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    min_d = 99999999999999999\n    for i in range(0, nmk[0] * 2, 2):\n        d1 = dist(xy[0], xy[1], n[i], n[i + 1])\n        if d1 < min_d:\n            for j in range(0, nmk[1] * 2, 2):\n                d2 = d1 + dist(n[i], n[i + 1], m[j], m[j + 1])\n                if d2 < min_d:\n                    for l in range(0, nmk[2] * 2, 2):\n                        d3 = d2 + dist(m[j], m[j + 1], k[l], k[l + 1])\n                        min_d = min(min_d, d3)\n    for i in range(0, nmk[1] * 2, 2):\n        d1 = dist(xy[0], xy[1], m[i], m[i + 1])\n        if d1 < min_d:\n            for j in range(0, nmk[0] * 2, 2):\n                d2 = d1 + dist(m[i], m[i + 1], n[j], n[j + 1])\n                if d2 < min_d:\n                    for l in range(0, nmk[2] * 2, 2):\n                        d3 = d2 + dist(n[j], n[j + 1], k[l], k[l + 1])\n                        min_d = min(min_d, d3)\n    print(min_d)", "from math import sqrt\n\ndef distance(a, b, m, n):\n    return sqrt((a - m) ** 2 + (b - n) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    N = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    min_dis = distance(x, y, N[0], N[1]) + distance(N[0], N[1], M[0], M[1]) + distance(M[0], M[1], K[0], K[1])\n    for a in range(0, n * 2, 2):\n        curr1 = distance(x, y, N[a], N[a + 1])\n        if curr1 > min_dis:\n            continue\n        else:\n            for b in range(0, m * 2, 2):\n                curr2 = distance(N[a], N[a + 1], M[b], M[b + 1])\n                if curr1 + curr2 > min_dis:\n                    continue\n                else:\n                    for c in range(0, k * 2, 2):\n                        curr3 = distance(M[b], M[b + 1], K[c], K[c + 1])\n                        if min_dis > curr1 + curr2 + curr3:\n                            min_dis = curr1 + curr2 + curr3\n    for a in range(0, m * 2, 2):\n        curr1 = distance(x, y, M[a], M[a + 1])\n        if curr1 > min_dis:\n            continue\n        else:\n            for b in range(0, n * 2, 2):\n                curr2 = distance(M[a], M[a + 1], N[b], N[b + 1])\n                if curr1 + curr2 > min_dis:\n                    continue\n                else:\n                    for c in range(0, k * 2, 2):\n                        curr3 = distance(N[b], N[b + 1], K[c], K[c + 1])\n                        if min_dis > curr1 + curr2 + curr3:\n                            min_dis = curr1 + curr2 + curr3\n    print(min_dis)", "import sys\nimport math\n\ndef calculateDistance(x1, x2, y1, y2):\n    x1 = round(x1, 6)\n    x2 = round(x2, 6)\n    y1 = round(y1, 6)\n    y2 = round(y2, 6)\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef bruteForce():\n    tests = int(input())\n    for i in range(tests):\n        initialPosition = list(map(int, input().split(' ')))\n        numberOfPoints = list(map(int, input().split(' ')))\n        pointsN = list(map(int, input().split(' ')))\n        pointsM = list(map(int, input().split(' ')))\n        pointsK = list(map(int, input().split(' ')))\n        sumDistanceList = list()\n        minSumDistance = sys.maxsize\n        for numberN in range(numberOfPoints[0]):\n            firstWalk = calculateDistance(initialPosition[0], pointsN[numberN * 2], initialPosition[1], pointsN[numberN * 2 + 1])\n            if firstWalk < minSumDistance:\n                for numberM in range(numberOfPoints[1]):\n                    secondWalk = calculateDistance(pointsN[numberN * 2], pointsM[numberM * 2], pointsN[numberN * 2 + 1], pointsM[numberM * 2 + 1])\n                    initialToSecond = firstWalk + secondWalk\n                    if initialToSecond < minSumDistance:\n                        for numberK in range(numberOfPoints[2]):\n                            thirdWalk = calculateDistance(pointsM[numberM * 2], pointsK[numberK * 2], pointsM[numberM * 2 + 1], pointsK[numberK * 2 + 1])\n                            initialToThird = initialToSecond + thirdWalk\n                            if initialToThird < minSumDistance:\n                                minSumDistance = initialToThird\n        for numberM in range(numberOfPoints[1]):\n            firstWalk = calculateDistance(initialPosition[0], pointsM[numberM * 2], initialPosition[1], pointsM[numberM * 2 + 1])\n            if firstWalk < minSumDistance:\n                for numberN in range(numberOfPoints[0]):\n                    secondWalk = calculateDistance(pointsM[numberM * 2], pointsN[numberN * 2], pointsM[numberM * 2 + 1], pointsN[numberN * 2 + 1])\n                    initialToSecond = firstWalk + secondWalk\n                    if initialToSecond < minSumDistance:\n                        for numberK in range(numberOfPoints[2]):\n                            thirdWalk = calculateDistance(pointsN[numberN * 2], pointsK[numberK * 2], pointsN[numberN * 2 + 1], pointsK[numberK * 2 + 1])\n                            initialToThird = initialToSecond + thirdWalk\n                            if initialToThird < minSumDistance:\n                                minSumDistance = initialToThird\n        print(minSumDistance)\nbruteForce()", "import math\n\ndef takingInput():\n    (a, b) = ([], [])\n    s = input().split(' ')\n    for i in range(0, len(s), 2):\n        a.append(int(s[i]))\n        b.append(int(s[i + 1]))\n    return (a, b)\n\ndef findDist(x1, x2, x3, x4):\n    a = x3 - x1\n    b = x4 - x2\n    return math.sqrt(a * a + b * b)\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (x, y) = [int(i) for i in input().split(' ')]\n    (N, M, K) = [int(i) for i in input().split(' ')]\n    (a, b) = takingInput()\n    (c, d) = takingInput()\n    (e, f) = takingInput()\n    min1 = 10 ** 19 + 1\n    for i in range(N):\n        dist = findDist(x, y, a[i], b[i])\n        if dist < min1:\n            for j in range(M):\n                dist2 = dist + findDist(a[i], b[i], c[j], d[j])\n                if dist2 < min1:\n                    for k in range(K):\n                        min1 = min(min1, dist2 + findDist(c[j], d[j], e[k], f[k]))\n    for i in range(M):\n        dist = findDist(x, y, c[i], d[i])\n        if dist < min1:\n            for j in range(N):\n                dist2 = dist + findDist(c[i], d[i], a[j], b[j])\n                if dist2 < min1:\n                    for k in range(K):\n                        min1 = min(min1, dist2 + findDist(a[j], b[j], e[k], f[k]))\n    print(min1)", "from math import sqrt\nimport heapq\n\ndef arr_maker(stg):\n    l = list(map(int, input().split()))\n    arr = []\n    for i in range(0, len(l), 2):\n        arr.append([l[i], l[i + 1], stg])\n    return arr\n\ndef dist_finder(x1, y1, x2, y2):\n    return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef dist_calci(ta, tb, tc, x, y, r=0):\n    ch = []\n    pts = ta + tb + tc\n    visited = [0] * len(pts)\n    dis = [float('inf')] * len(pts)\n    heapq.heapify(ch)\n    ans = float('inf')\n    for i in range(len(ta)):\n        dis[i] = dist_finder(pts[i][0], pts[i][1], x, y)\n        heapq.heappush(ch, [dis[i], i, pts[i][-1]])\n    while len(ch):\n        cur = heapq.heappop(ch)\n        if not visited[cur[1]]:\n            visited[cur[1]] = 1\n        else:\n            continue\n        if r:\n            if cur[-1] == 'a':\n                cur[-1] = 'b'\n            elif cur[-1] == 'b':\n                cur[-1] = 'a'\n        if cur[-1] == 'a':\n            (s, e) = (len(ta), len(ta) + len(tb))\n            (x, y) = (pts[cur[1]][0], pts[cur[1]][1])\n        elif cur[-1] == 'b':\n            (s, e) = (len(ta) + len(tb), len(ta) + len(tb) + len(tc))\n            (x, y) = (pts[cur[1]][0], pts[cur[1]][1])\n        elif cur[-1] == 'c':\n            ans = min(ans, dis[cur[1]])\n            return ans\n            break\n        for (i, d) in enumerate(pts[s:e], s):\n            if not visited[i]:\n                dist = dist_finder(d[0], d[1], x, y)\n                dis[i] = min(dis[i], dis[cur[1]] + dist)\n                heapq.heappush(ch, [dis[i], i, pts[i][-1]])\ntc = int(input())\nfor _ in range(tc):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    ta = arr_maker('a')\n    tb = arr_maker('b')\n    tc = arr_maker('c')\n    a = dist_calci(ta, tb, tc, x, y)\n    b = dist_calci(tb, ta, tc, x, y, 1)\n    m = min(a, b)\n    print('{0:.10f}'.format(m))", "import math\nimport sys\n\ndef dist(x1, y1, x2, y2):\n    ans = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return ans\nt = int(input())\nfor ti in range(t):\n    ans = 0\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    nl = list(map(int, input().split()))\n    ml = list(map(int, input().split()))\n    kl = list(map(int, input().split()))\n    low = sys.maxsize\n    for i in range(0, n * 2 - 1, 2):\n        d1 = dist(x, y, nl[i], nl[i + 1])\n        if d1 < low:\n            for j in range(0, 2 * m - 1, 2):\n                d2 = d1 + dist(nl[i], nl[i + 1], ml[j], ml[j + 1])\n                if d2 < low:\n                    for u in range(0, 2 * k - 1, 2):\n                        d3 = d2 + dist(ml[j], ml[j + 1], kl[u], kl[u + 1])\n                        if d3 < low:\n                            low = d3\n    lower = sys.maxsize\n    for i in range(0, 2 * m - 1, 2):\n        d1 = dist(x, y, ml[i], ml[i + 1])\n        if d1 < lower:\n            for j in range(0, 2 * n - 1, 2):\n                d2 = d1 + dist(ml[i], ml[i + 1], nl[j], nl[j + 1])\n                if d2 < lower:\n                    for u in range(0, 2 * k - 1, 2):\n                        d3 = d2 + dist(nl[j], nl[j + 1], kl[u], kl[u + 1])\n                        if d3 < lower:\n                            lower = d3\n    print(min(low, lower))", "import math\n\ndef calculateDistance(x1, y1, x2, y2):\n    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return distance\nfor t in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    num = list(map(int, input().split()))\n    n1 = []\n    n2 = []\n    for i in range(len(num)):\n        if i % 2 == 0:\n            n1.append(num[i])\n        else:\n            n2.append(num[i])\n    num = list(map(int, input().split()))\n    m1 = []\n    m2 = []\n    for i in range(len(num)):\n        if i % 2 == 0:\n            m1.append(num[i])\n        else:\n            m2.append(num[i])\n    num = list(map(int, input().split()))\n    k1 = []\n    k2 = []\n    for i in range(len(num)):\n        if i % 2 == 0:\n            k1.append(num[i])\n        else:\n            k2.append(num[i])\n    mina = float('inf')\n    for i in range(n):\n        dist1 = calculateDistance(n1[i], n2[i], x, y)\n        if dist1 < mina:\n            for j in range(m):\n                dist2 = dist1 + calculateDistance(m1[j], m2[j], n1[i], n2[i])\n                if dist2 < mina:\n                    for l in range(k):\n                        dist3 = dist2 + calculateDistance(m1[j], m2[j], k1[l], k2[l])\n                        if dist3 < mina:\n                            mina = dist3\n    minb = float('inf')\n    for i in range(m):\n        dist1 = calculateDistance(m1[i], m2[i], x, y)\n        if dist1 < minb:\n            for j in range(n):\n                dist2 = dist1 + calculateDistance(n1[j], n2[j], m1[i], m2[i])\n                if dist2 < minb:\n                    for l in range(k):\n                        dist3 = dist2 + calculateDistance(n1[j], n2[j], k1[l], k2[l])\n                        if dist3 < minb:\n                            minb = dist3\n    if minb < mina:\n        print('{0:.10f}'.format(minb))\n    else:\n        print('{0:.10f}'.format(mina))", "from sys import stdin\nimport math\nt = int(stdin.readline())\nwhile t:\n    (x, y) = [int(x) for x in stdin.readline().split()]\n    (n, m, k) = [int(x) for x in stdin.readline().split()]\n    s1 = [int(x) for x in stdin.readline().split()]\n    s2 = [int(x) for x in stdin.readline().split()]\n    s3 = [int(x) for x in stdin.readline().split()]\n    ans1 = float('inf')\n    for i in range(0, 2 * n, 2):\n        d1 = math.sqrt((x - s1[i]) ** 2 + (y - s1[i + 1]) ** 2)\n        if d1 < ans1:\n            for j in range(0, 2 * m, 2):\n                d2 = d1 + math.sqrt((s2[j] - s1[i]) ** 2 + (s2[j + 1] - s1[i + 1]) ** 2)\n                if d2 < ans1:\n                    for l in range(0, 2 * k, 2):\n                        d3 = d2 + math.sqrt((s2[j] - s3[l]) ** 2 + (s2[j + 1] - s3[l + 1]) ** 2)\n                        if d3 < ans1:\n                            ans1 = d3\n    ans2 = float('inf')\n    for i in range(0, 2 * m, 2):\n        d1 = math.sqrt((x - s2[i]) ** 2 + (y - s2[i + 1]) ** 2)\n        if d1 < ans2:\n            for j in range(0, 2 * n, 2):\n                d2 = d1 + math.sqrt((s2[i] - s1[j]) ** 2 + (s2[i + 1] - s1[j + 1]) ** 2)\n                if d2 < ans2:\n                    for l in range(0, 2 * k, 2):\n                        d3 = d2 + math.sqrt((s1[j] - s3[l]) ** 2 + (s1[j + 1] - s3[l + 1]) ** 2)\n                        if d3 < ans2:\n                            ans2 = d3\n    print(min(ans1, ans2))\n    t -= 1", "import math\n\ndef distance(x, y, x1, y1):\n    return math.sqrt((x - x1) ** 2 + (y - y1) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    low = math.inf\n    for i in range(0, len(A), 2):\n        d = distance(x, y, A[i], A[i + 1])\n        if d < low:\n            for j in range(0, len(B), 2):\n                d1 = d + distance(A[i], A[i + 1], B[j], B[j + 1])\n                if d1 < low:\n                    for l in range(0, len(C), 2):\n                        d2 = d1 + distance(B[j], B[j + 1], C[l], C[l + 1])\n                        if d2 < low:\n                            low = d2\n    lowest = math.inf\n    for i in range(0, len(B), 2):\n        d = distance(x, y, B[i], B[i + 1])\n        if d < lowest:\n            for j in range(0, len(A), 2):\n                d1 = d + distance(B[i], B[i + 1], A[j], A[j + 1])\n                if d1 < lowest:\n                    for l in range(0, len(C), 2):\n                        d2 = d1 + distance(A[j], A[j + 1], C[l], C[l + 1])\n                        if d2 < lowest:\n                            lowest = d2\n    print(min(low, lowest))", "try:\n    tc = int(input())\nexcept:\n    exit()\n\ndef dist(a, b, c, d):\n    return ((a - c) ** 2 + (b - d) ** 2) ** 0.5\nfor _ in range(tc):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    ln = list(map(int, input().split()))\n    lm = list(map(int, input().split()))\n    lk = list(map(int, input().split()))\n    mindis = 10000000000\n    for i in range(n):\n        dis = dist(x, y, ln[2 * i], ln[2 * i + 1])\n        if dis < mindis:\n            for j in range(m):\n                dis2 = dis + dist(ln[2 * i], ln[2 * i + 1], lm[2 * j], lm[2 * j + 1])\n                if dis2 < mindis:\n                    for c in range(k):\n                        dis3 = dis2 + dist(lm[2 * j], lm[2 * j + 1], lk[2 * c], lk[2 * c + 1])\n                        if dis3 < mindis:\n                            mindis = dis3\n    for i in range(m):\n        dis = dist(x, y, lm[2 * i], lm[2 * i + 1])\n        if dis < mindis:\n            for j in range(n):\n                dis2 = dis + dist(lm[2 * i], lm[2 * i + 1], ln[2 * j], ln[2 * j + 1])\n                if dis2 < mindis:\n                    for c in range(k):\n                        dis3 = dis2 + dist(ln[2 * j], ln[2 * j + 1], lk[2 * c], lk[2 * c + 1])\n                        if dis3 < mindis:\n                            mindis = dis3\n    print(mindis)", "from math import sqrt\ninf = 9e+18\nsq = lambda a: a * a\ndist = lambda x1, y1, x2, y2: sqrt(sq(x1 - x2) + sq(y1 - y2))\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    ans = inf\n    for i in range(n):\n        ina = i << 1\n        (aix, aiy) = (a[ina], a[ina | 1])\n        xa = dist(x, y, aix, aiy)\n        if xa < ans:\n            for j in range(m):\n                inb = j << 1\n                (bjx, bjy) = (b[inb], b[inb | 1])\n                xab = xa + dist(aix, aiy, bjx, bjy)\n                if xab < ans:\n                    for l in range(k):\n                        inc = l << 1\n                        (clx, cly) = (c[inc], c[inc | 1])\n                        xabc = xab + dist(bjx, bjy, clx, cly)\n                        ans = min(ans, xabc)\n    for j in range(m):\n        inb = j << 1\n        (bjx, bjy) = (b[inb], b[inb | 1])\n        xb = dist(x, y, bjx, bjy)\n        if xb < ans:\n            for i in range(n):\n                ina = i << 1\n                (aix, aiy) = (a[ina], a[ina | 1])\n                xba = xb + dist(bjx, bjy, aix, aiy)\n                if xba < ans:\n                    for l in range(k):\n                        inc = l << 1\n                        (clx, cly) = (c[inc], c[inc | 1])\n                        xbac = xba + dist(aix, aiy, clx, cly)\n                        ans = min(ans, xbac)\n    print(ans)", "from math import sqrt\ninf = 9e+18\nsq = lambda a: a * a\ndist = lambda x1, y1, x2, y2: sqrt(sq(x1 - x2) + sq(y1 - y2))\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    ans = inf\n    for i in range(n):\n        ina = i << 1\n        (aix, aiy) = (a[ina], a[ina | 1])\n        xa = dist(x, y, aix, aiy)\n        if xa < ans:\n            for j in range(m):\n                inb = j << 1\n                (bjx, bjy) = (b[inb], b[inb | 1])\n                xab = xa + dist(aix, aiy, bjx, bjy)\n                if xab < ans:\n                    for l in range(k):\n                        inc = l << 1\n                        (clx, cly) = (c[inc], c[inc | 1])\n                        xabc = xab + dist(bjx, bjy, clx, cly)\n                        ans = min(ans, xabc)\n    for j in range(m):\n        inb = j << 1\n        (bjx, bjy) = (b[inb], b[inb | 1])\n        xb = dist(x, y, bjx, bjy)\n        if xb < ans:\n            for i in range(n):\n                ina = i << 1\n                (aix, aiy) = (a[ina], a[ina | 1])\n                xba = xb + dist(bjx, bjy, aix, aiy)\n                if xba < ans:\n                    for l in range(k):\n                        inc = l << 1\n                        (clx, cly) = (c[inc], c[inc | 1])\n                        xbac = xba + dist(aix, aiy, clx, cly)\n                        ans = min(ans, xbac)\n    print('{:.6f}'.format(ans))", "from math import sqrt\n\ndef distance(x1, y1, x2, y2):\n    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\nT = int(input())\nfor _ in range(T):\n    S = list(map(int, input().split()))\n    G = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    m = 10 ** 11\n    for i in range(0, len(N), 2):\n        d1 = distance(N[i], N[i + 1], S[0], S[1])\n        if m < d1:\n            continue\n        else:\n            for j in range(0, len(M), 2):\n                d2 = distance(N[i], N[i + 1], M[j], M[j + 1])\n                if m < d1 + d2:\n                    continue\n                else:\n                    for r in range(0, len(K), 2):\n                        d3 = distance(M[j], M[j + 1], K[r], K[r + 1])\n                        if d1 + d2 + d3 < m:\n                            m = d1 + d2 + d3\n    n = 10 ** 11\n    for i in range(0, len(M), 2):\n        d1 = distance(M[i], M[i + 1], S[0], S[1])\n        if n < d1:\n            continue\n        else:\n            for j in range(0, len(N), 2):\n                d2 = distance(M[i], M[i + 1], N[j], N[j + 1])\n                if n < d1 + d2:\n                    continue\n                else:\n                    for r in range(0, len(K), 2):\n                        d3 = distance(N[j], N[j + 1], K[r], K[r + 1])\n                        if d1 + d2 + d3 < n:\n                            n = d1 + d2 + d3\n    print(min(m, n))", "from math import sqrt\nimport sys\n\ndef find_dist(x1, y1, x2, y2):\n    return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\ndef test_case():\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    set_n = list(map(int, input().split()))\n    set_m = list(map(int, input().split()))\n    set_k = list(map(int, input().split()))\n    min1 = sys.maxsize\n    for i in range(0, 2 * n - 1, 2):\n        sn = find_dist(x, y, set_n[i], set_n[i + 1])\n        if sn < min1:\n            for j in range(0, 2 * m - 1, 2):\n                snm = sn + find_dist(set_n[i], set_n[i + 1], set_m[j], set_m[j + 1])\n                if snm < min1:\n                    for e in range(0, 2 * k - 1, 2):\n                        snme = snm + find_dist(set_m[j], set_m[j + 1], set_k[e], set_k[e + 1])\n                        if snme < min1:\n                            min1 = snme\n    min2 = sys.maxsize\n    for i in range(0, 2 * m - 1, 2):\n        sm = find_dist(x, y, set_m[i], set_m[i + 1])\n        if sm < min2:\n            for j in range(0, 2 * n - 1, 2):\n                smn = sm + find_dist(set_m[i], set_m[i + 1], set_n[j], set_n[j + 1])\n                if smn < min2:\n                    for e in range(0, 2 * k - 1, 2):\n                        smne = smn + find_dist(set_n[j], set_n[j + 1], set_k[e], set_k[e + 1])\n                        if smne < min2:\n                            min2 = smne\n    print(min(min1, min2))\nt = int(input())\nfor tc in range(t):\n    test_case()", "from math import sqrt, inf\nrr = lambda : input().strip()\nrri = lambda : int(rr())\nrrm = lambda : [int(x) for x in rr().split()]\n\ndef dist(x1, y1, x2, y2):\n    return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef sol(n, m, k, x):\n    ca = rrm()\n    cb = rrm()\n    cc = rrm()\n    res = inf\n    for i in range(n):\n        q = dist(x[0], x[1], ca[2 * i], ca[2 * i + 1])\n        if q < res:\n            for j in range(m):\n                w = q + dist(ca[2 * i], ca[2 * i + 1], cb[2 * j], cb[2 * j + 1])\n                if w < res:\n                    for l in range(k):\n                        e = w + dist(cb[2 * j], cb[2 * j + 1], cc[2 * l], cc[2 * l + 1])\n                        if e < res:\n                            res = e\n    for i in range(m):\n        q = dist(x[0], x[1], cb[2 * i], cb[2 * i + 1])\n        if q < res:\n            for j in range(n):\n                w = q + dist(cb[2 * i], cb[2 * i + 1], ca[2 * j], ca[2 * j + 1])\n                if w < res:\n                    for l in range(k):\n                        e = w + dist(ca[2 * j], ca[2 * j + 1], cc[2 * l], cc[2 * l + 1])\n                        if e < res:\n                            res = e\n    return res\nT = rri()\nfor _ in range(T):\n    x = rrm()\n    (n, m, k) = rrm()\n    ans = sol(n, m, k, x)\n    print(ans)", "import sys\nimport math\n\ndef dis(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (N, M, K) = map(int, input().split())\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    d = sys.maxsize\n    for i in range(0, 2 * N, 2):\n        a = dis(x, y, n[i], n[i + 1])\n        if a < d:\n            for j in range(0, 2 * M, 2):\n                b = a + dis(n[i], n[i + 1], m[j], m[j + 1])\n                if b < d:\n                    for l in range(0, 2 * K, 2):\n                        c = b + dis(m[j], m[j + 1], k[l], k[l + 1])\n                        if c < d:\n                            d = c\n    e = sys.maxsize\n    for i in range(0, 2 * M, 2):\n        a = dis(x, y, m[i], m[i + 1])\n        if a < e:\n            for j in range(0, 2 * N, 2):\n                b = a + dis(m[i], m[i + 1], n[j], n[j + 1])\n                if b < e:\n                    for l in range(0, 2 * K, 2):\n                        c = b + dis(n[j], n[j + 1], k[l], k[l + 1])\n                        if c < e:\n                            e = c\n    print(min(d, e))", "import math\nimport sys\n\ndef dist(x, y, a, b):\n    d = math.sqrt((x - a) ** 2 + (y - b) ** 2)\n    return d\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split(' '))\n    (n, m, k) = map(int, input().split(' '))\n    li1 = list(map(int, input().split(' ')))\n    li2 = list(map(int, input().split(' ')))\n    li3 = list(map(int, input().split(' ')))\n    mindist = sys.maxsize\n    for i in range(0, len(li1) - 1, 2):\n        d1 = dist(x, y, li1[i], li1[i + 1])\n        if d1 < mindist:\n            for j in range(0, len(li2) - 1, 2):\n                d2 = dist(li1[i], li1[i + 1], li2[j], li2[j + 1]) + d1\n                if d2 < mindist:\n                    for k in range(0, len(li3) - 1, 2):\n                        d3 = d2 + dist(li2[j], li2[j + 1], li3[k], li3[k + 1])\n                        if d3 < mindist:\n                            mindist = min(mindist, d3)\n    mindist2 = sys.maxsize\n    for i in range(0, len(li2) - 1, 2):\n        d1 = dist(x, y, li2[i], li2[i + 1])\n        if d1 < mindist2:\n            for j in range(0, len(li1) - 1, 2):\n                d2 = dist(li2[i], li2[i + 1], li1[j], li1[j + 1]) + d1\n                if d2 < mindist2:\n                    for k in range(0, len(li3) - 1, 2):\n                        d3 = dist(li1[j], li1[j + 1], li3[k], li3[k + 1]) + d2\n                        if d3 < mindist2:\n                            mindist2 = min(mindist, d3)\n    print(min(mindist, mindist2))", "import math\n\ndef dis(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef ted(f, s, l, x, y):\n    mn = 10000000000\n    m1 = 10000000000\n    m2 = 10000000000\n    m3 = 10000000000\n    for i in range(0, len(f), 2):\n        m1 = dis(x, y, f[i], f[i + 1])\n        if m1 > mn:\n            continue\n        for j in range(0, len(s), 2):\n            m2 = m1 + dis(f[i], f[i + 1], s[j], s[j + 1])\n            if m2 > mn:\n                continue\n            for k in range(0, len(l), 2):\n                m3 = m2 + dis(s[j], s[j + 1], l[k], l[k + 1])\n                if m3 < mn:\n                    mn = m3\n    return mn\nt = int(input())\nfor ts in range(t):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    ln = list(map(int, input().split()))\n    lm = list(map(int, input().split()))\n    lk = list(map(int, input().split()))\n    a = ted(ln, lm, lk, x, y)\n    b = ted(lm, ln, lk, x, y)\n    print(min(a, b))", "t = int(input())\nfor i in range(t):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    mindis = 10000000000\n    b = []\n    o = []\n    p = []\n    for i in range(n):\n        l = ((x - a[2 * i]) ** 2 + (y - a[2 * i + 1]) ** 2) ** (1 / 2)\n        if l < mindis:\n            for j in range(m):\n                f = l + ((c[2 * j] - a[2 * i]) ** 2 + (c[2 * j + 1] - a[2 * i + 1]) ** 2) ** (1 / 2)\n                if f < mindis:\n                    for d in range(k):\n                        g = f + ((e[2 * d] - c[2 * j]) ** 2 + (e[2 * d + 1] - c[2 * j + 1]) ** 2) ** (1 / 2)\n                        if g < mindis:\n                            mindis = g\n    for i in range(m):\n        l = ((x - c[2 * i]) ** 2 + (y - c[2 * i + 1]) ** 2) ** (1 / 2)\n        if l < mindis:\n            for j in range(n):\n                f = l + ((c[2 * i] - a[2 * j]) ** 2 + (c[2 * i + 1] - a[2 * j + 1]) ** 2) ** (1 / 2)\n                if f < mindis:\n                    for d in range(k):\n                        g = f + ((e[2 * d] - a[2 * j]) ** 2 + (e[2 * d + 1] - a[2 * j + 1]) ** 2) ** (1 / 2)\n                        if g < mindis:\n                            mindis = g\n    print(mindis)", "def distance(x1, y1, x2, y2):\n    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5\ntest = int(input())\nfor i in range(test):\n    (x, y) = map(int, input().split())\n    string = list(map(int, input().strip().split()))\n    n = string[0]\n    m = string[1]\n    k = string[2]\n    lst1 = list(map(int, input().strip().split()))\n    lst2 = list(map(int, input().strip().split()))\n    lst3 = list(map(int, input().strip().split()))\n    minn1 = 1000000000000\n    for j in range(0, 2 * n, +2):\n        dist = distance(lst1[j], lst1[j + 1], x, y)\n        if dist < minn1:\n            for ll in range(0, 2 * m, +2):\n                adha = dist + distance(lst1[j], lst1[j + 1], lst2[ll], lst2[ll + 1])\n                if adha < minn1:\n                    for kk in range(0, 2 * k, +2):\n                        pura = adha + distance(lst3[kk], lst3[kk + 1], lst2[ll], lst2[ll + 1])\n                        if minn1 >= pura:\n                            minn1 = pura\n    minn2 = 1000000000000\n    for j in range(0, 2 * m, +2):\n        dist = distance(lst2[j], lst2[j + 1], x, y)\n        if dist < minn2:\n            for ll in range(0, 2 * n, +2):\n                adha = dist + distance(lst2[j], lst2[j + 1], lst1[ll], lst1[ll + 1])\n                if adha < minn1:\n                    for kk in range(0, 2 * k, +2):\n                        pura = adha + distance(lst3[kk], lst3[kk + 1], lst1[ll], lst1[ll + 1])\n                        if minn2 >= pura:\n                            minn2 = pura\n    if minn2 <= minn1:\n        print(minn2)\n    else:\n        print(minn1)", "t = int(input())\nimport math\nimport sys\n\ndef dis(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nwhile t:\n    t -= 1\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    low = sys.maxsize\n    for i in range(0, 2 * n - 1, 2):\n        sa = dis(x, y, a[i], a[i + 1])\n        if sa < low:\n            for j in range(0, 2 * m - 1, 2):\n                sab = sa + dis(a[i], a[i + 1], b[j], b[j + 1])\n                if sab < low:\n                    for l in range(0, 2 * k - 1, 2):\n                        sabc = sab + dis(b[j], b[j + 1], c[l], c[l + 1])\n                        if sabc < low:\n                            low = sabc\n    mini = sys.maxsize\n    for i in range(0, 2 * m - 1, 2):\n        sb = dis(x, y, b[i], b[i + 1])\n        if sb < mini:\n            for j in range(0, 2 * n - 1, 2):\n                sba = sb + dis(b[i], b[i + 1], a[j], a[j + 1])\n                if sba < mini:\n                    for l in range(0, 2 * k - 1, 2):\n                        sbac = sba + dis(a[j], a[j + 1], c[l], c[l + 1])\n                        if sbac < mini:\n                            mini = sbac\n    print(min(mini, low))", "class Point:\n\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n\ndef calc_dist(p1, p2):\n    return ((p1.x - p2.x) ** 2 + (p1.y - p2.y) ** 2) ** 0.5\n\ndef read_points():\n    (x, y) = input().split()\n    start = Point(int(x), int(y))\n    (n, m, k) = list(map(int, input().split()))\n    parts = []\n    for (i, lenth) in enumerate((n, m, k)):\n        nums = input().split()\n        part = []\n        for j in range(lenth):\n            part.append(Point(int(nums[2 * j]), int(nums[2 * j + 1])))\n        parts.append(part)\n    return (start, parts)\n\ndef calc_total_distance(stages, order, total_dist):\n    (a, b, c) = order\n    for p1 in stages[a]:\n        d1 = calc_dist(start, p1)\n        if d1 >= total_dist:\n            continue\n        for p2 in stages[b]:\n            d2 = d1 + calc_dist(p1, p2)\n            if d2 >= total_dist:\n                continue\n            for end in stages[c]:\n                d3 = d2 + calc_dist(p2, end)\n                if d3 < total_dist:\n                    total_dist = d3\n    return total_dist\ntry:\n    test_num = int(input())\n    for _ in range(test_num):\n        (start, stages) = read_points()\n        total = float('inf')\n        for order in [[0, 1, 2], [1, 0, 2]]:\n            total = min(total, calc_total_distance(stages, order, total))\n        print(total)\nexcept EOFError:\n    pass", "import math\n\ndef calculate_distance(x1, y1, x2, y2):\n    distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return distance\nfor t in range(int(input())):\n    (x, y) = map(int, input().strip().split())\n    (n, m, k) = map(int, input().strip().split())\n    arrN = list(map(int, input().strip().split()))\n    arrM = list(map(int, input().strip().split()))\n    arrK = list(map(int, input().strip().split()))\n    min_n = 9999999999999999\n    min_m = 9999999999999999\n    for j in range(1, 2 * n, 2):\n        distStartToNJ = calculate_distance(x, y, arrN[j - 1], arrN[j])\n        if distStartToNJ > min_n:\n            continue\n        for a in range(1, 2 * m, 2):\n            distNtoM = calculate_distance(arrN[j - 1], arrN[j], arrM[a - 1], arrM[a])\n            totaldistSNM = distStartToNJ + distNtoM\n            if totaldistSNM > min_n:\n                continue\n            for b in range(1, 2 * k, 2):\n                distMK = totaldistSNM + calculate_distance(arrM[a - 1], arrM[a], arrK[b - 1], arrK[b])\n                if distMK < min_n:\n                    min_n = distMK\n    for j in range(1, 2 * m, 2):\n        distStartToMJ = calculate_distance(x, y, arrM[j - 1], arrM[j])\n        if distStartToMJ > min_m:\n            continue\n        for a in range(1, 2 * n, 2):\n            distMtoN = calculate_distance(arrM[j - 1], arrM[j], arrN[a - 1], arrN[a])\n            totaldistSMN = distStartToMJ + distMtoN\n            if totaldistSMN > min_m:\n                continue\n            for b in range(1, 2 * k, 2):\n                distNtoK = calculate_distance(arrN[a - 1], arrN[a], arrK[b - 1], arrK[b])\n                distNK = totaldistSMN + distNtoK\n                if distNK < min_m:\n                    min_m = distNK\n    print(min(min_n, min_m))", "t = int(input())\nimport math\nimport sys\n\ndef dis(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nwhile t:\n    t -= 1\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    low = sys.maxsize\n    for i in range(0, 2 * n - 1, 2):\n        sa = dis(x, y, a[i], a[i + 1])\n        if sa < low:\n            for j in range(0, 2 * m - 1, 2):\n                sab = sa + dis(a[i], a[i + 1], b[j], b[j + 1])\n                if sab < low:\n                    for l in range(0, 2 * k - 1, 2):\n                        sabc = sab + dis(b[j], b[j + 1], c[l], c[l + 1])\n                        if sabc < low:\n                            low = sabc\n    mini = sys.maxsize\n    for i in range(0, 2 * m - 1, 2):\n        sb = dis(x, y, b[i], b[i + 1])\n        if sb < mini:\n            for j in range(0, 2 * n - 1, 2):\n                sba = sb + dis(b[i], b[i + 1], a[j], a[j + 1])\n                if sba < mini:\n                    for l in range(0, 2 * k - 1, 2):\n                        sbac = sba + dis(a[j], a[j + 1], c[l], c[l + 1])\n                        if sbac < mini:\n                            mini = sbac\n    print(min(mini, low))", "import math\nimport sys\nt = int(input())\nfor _ in range(t):\n    input1 = [int(i) for i in input().split()]\n    x = input1[0]\n    y = input1[1]\n    input2 = [int(i) for i in input().split()]\n    n = input2[0]\n    m = input2[1]\n    k = input2[2]\n    n_co = [int(i) for i in input().split()]\n    m_co = [int(i) for i in input().split()]\n    k_co = [int(i) for i in input().split()]\n    sp1 = []\n    sp2 = []\n    low = sys.maxsize\n    for i in range(0, 2 * n, 2):\n        dist1 = math.sqrt((x - n_co[i]) * (x - n_co[i]) + (y - n_co[i + 1]) * (y - n_co[i + 1]))\n        dist = dist1\n        if dist < low:\n            for j in range(0, 2 * m, 2):\n                dist2 = math.sqrt((n_co[i] - m_co[j]) * (n_co[i] - m_co[j]) + (n_co[i + 1] - m_co[j + 1]) * (n_co[i + 1] - m_co[j + 1]))\n                if dist1 + dist2 < low:\n                    for t1 in range(0, 2 * k, 2):\n                        dist3 = math.sqrt((m_co[j] - k_co[t1]) * (m_co[j] - k_co[t1]) + (m_co[j + 1] - k_co[t1 + 1]) * (m_co[j + 1] - k_co[t1 + 1]))\n                        if dist1 + dist2 + dist3 < low:\n                            low = dist1 + dist2 + dist3\n    low1 = sys.maxsize\n    for i in range(0, 2 * m, 2):\n        dist1 = math.sqrt((x - m_co[i]) * (x - m_co[i]) + (y - m_co[i + 1]) * (y - m_co[i + 1]))\n        if dist1 < low1:\n            for j in range(0, 2 * n, 2):\n                dist2 = math.sqrt((m_co[i] - n_co[j]) * (m_co[i] - n_co[j]) + (m_co[i + 1] - n_co[j + 1]) * (m_co[i + 1] - n_co[j + 1]))\n                if dist1 + dist2 < low1:\n                    for t1 in range(0, 2 * k, 2):\n                        dist3 = math.sqrt((n_co[j] - k_co[t1]) * (n_co[j] - k_co[t1]) + (n_co[j + 1] - k_co[t1 + 1]) * (n_co[j + 1] - k_co[t1 + 1]))\n                        if dist1 + dist2 + dist3 < low1:\n                            low1 = dist1 + dist2 + dist3\n    print(min(low, low1))", "import math\nimport sys\nt = int(input())\nfor _ in range(t):\n    input1 = [int(i) for i in input().split()]\n    x = input1[0]\n    y = input1[1]\n    input2 = [int(i) for i in input().split()]\n    n = input2[0]\n    m = input2[1]\n    k = input2[2]\n    n_co = [int(i) for i in input().split()]\n    m_co = [int(i) for i in input().split()]\n    k_co = [int(i) for i in input().split()]\n    sp1 = []\n    sp2 = []\n    low = sys.maxsize\n    for i in range(0, 2 * n, 2):\n        dist1 = math.sqrt((x - n_co[i]) * (x - n_co[i]) + (y - n_co[i + 1]) * (y - n_co[i + 1]))\n        dist = dist1\n        if dist < low:\n            for j in range(0, 2 * m, 2):\n                dist2 = math.sqrt((n_co[i] - m_co[j]) * (n_co[i] - m_co[j]) + (n_co[i + 1] - m_co[j + 1]) * (n_co[i + 1] - m_co[j + 1]))\n                if dist1 + dist2 < low:\n                    for t1 in range(0, 2 * k, 2):\n                        dist3 = math.sqrt((m_co[j] - k_co[t1]) * (m_co[j] - k_co[t1]) + (m_co[j + 1] - k_co[t1 + 1]) * (m_co[j + 1] - k_co[t1 + 1]))\n                        if dist1 + dist2 + dist3 < low:\n                            low = dist1 + dist2 + dist3\n    low1 = sys.maxsize\n    for i in range(0, 2 * m, 2):\n        dist1 = math.sqrt((x - m_co[i]) * (x - m_co[i]) + (y - m_co[i + 1]) * (y - m_co[i + 1]))\n        if dist1 < low1:\n            for j in range(0, 2 * n, 2):\n                dist2 = math.sqrt((m_co[i] - n_co[j]) * (m_co[i] - n_co[j]) + (m_co[i + 1] - n_co[j + 1]) * (m_co[i + 1] - n_co[j + 1]))\n                if dist1 + dist2 < low1:\n                    for t1 in range(0, 2 * k, 2):\n                        dist3 = math.sqrt((n_co[j] - k_co[t1]) * (n_co[j] - k_co[t1]) + (n_co[j + 1] - k_co[t1 + 1]) * (n_co[j + 1] - k_co[t1 + 1]))\n                        if dist1 + dist2 + dist3 < low1:\n                            low1 = dist1 + dist2 + dist3\n    print(min(low, low1))", "t = int(input())\nimport math\nimport sys\n\ndef dis(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nwhile t:\n    t -= 1\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    low = sys.maxsize\n    for i in range(0, 2 * n - 1, 2):\n        sa = dis(x, y, a[i], a[i + 1])\n        if sa < low:\n            for j in range(0, 2 * m - 1, 2):\n                sab = sa + dis(a[i], a[i + 1], b[j], b[j + 1])\n                if sab < low:\n                    for l in range(0, 2 * k - 1, 2):\n                        sabc = sab + dis(b[j], b[j + 1], c[l], c[l + 1])\n                        if sabc < low:\n                            low = sabc\n    mini = sys.maxsize\n    for i in range(0, 2 * m - 1, 2):\n        sb = dis(x, y, b[i], b[i + 1])\n        if sb < mini:\n            for j in range(0, 2 * n - 1, 2):\n                sba = sb + dis(b[i], b[i + 1], a[j], a[j + 1])\n                if sba < mini:\n                    for l in range(0, 2 * k - 1, 2):\n                        sbac = sba + dis(a[j], a[j + 1], c[l], c[l + 1])\n                        if sbac < mini:\n                            mini = sbac\n    print(min(mini, low))", "t = int(input())\nimport math\nimport sys\n\ndef dis(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nwhile t:\n    t -= 1\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    low = sys.maxsize\n    for i in range(0, 2 * n - 1, 2):\n        sa = dis(x, y, a[i], a[i + 1])\n        if sa < low:\n            for j in range(0, 2 * m - 1, 2):\n                sab = sa + dis(a[i], a[i + 1], b[j], b[j + 1])\n                if sab < low:\n                    for l in range(0, 2 * k - 1, 2):\n                        sabc = sab + dis(b[j], b[j + 1], c[l], c[l + 1])\n                        if sabc < low:\n                            low = sabc\n    mini = sys.maxsize\n    for i in range(0, 2 * m - 1, 2):\n        sb = dis(x, y, b[i], b[i + 1])\n        if sb < mini:\n            for j in range(0, 2 * n - 1, 2):\n                sba = sb + dis(b[i], b[i + 1], a[j], a[j + 1])\n                if sba < mini:\n                    for l in range(0, 2 * k - 1, 2):\n                        sbac = sba + dis(a[j], a[j + 1], c[l], c[l + 1])\n                        if sbac < mini:\n                            mini = sbac\n    print(min(mini, low))", "from bisect import bisect_left as ins\nimport sys\n\ndef dist(p1, p2):\n    return ((p1[2] - p2[2]) ** 2 + (p1[3] - p2[3]) ** 2) ** 0.5\n\ndef litu(n, li, f, p):\n    a = [[0, f, 0, 0] for j in range(n)]\n    for i in range(2 * n):\n        a[i // 2][2 + i % 2] = int(li[i])\n        if i % 2 == 1:\n            a[i // 2][0] = dist(p, a[i // 2])\n    return sorted(a)\n\ndef main():\n    t = int(sys.stdin.readline().strip())\n    for _ in range(t):\n        (x, y) = map(int, sys.stdin.readline().strip().split())\n        p = (0, -1, x, y)\n        (n, m, k) = map(int, sys.stdin.readline().strip().split())\n        an = litu(n, sys.stdin.readline().strip().split(), 1, p)\n        am = litu(m, sys.stdin.readline().strip().split(), 2, p)\n        ak = litu(k, sys.stdin.readline().strip().split(), 0, p)\n        anm = sorted(an + am)\n        mi = 10 ** 12\n        i = 0\n        while i < len(anm):\n            (mi, anm, ak) = do(anm[i], anm, ak, mi)\n            i += 1\n        print(mi)\n\ndef do(point, anm, ak, mi):\n    j = 0\n    while j < len(anm):\n        i = anm[j]\n        if i[1] != point[1]:\n            if dist(point, i) + point[0] > mi:\n                j += 1\n                continue\n            k = 0\n            while k < len(ak):\n                ik = ak[k]\n                reached = dist(i, ik) + dist(point, i) + point[0]\n                if reached < mi:\n                    mi = reached\n                    (anm, ak) = cut(mi, anm, ak)\n                k += 1\n        j += 1\n    return (mi, anm, ak)\n\ndef cut(mi, anm, ak):\n    x = ins(anm, [mi, 0, 0, 0])\n    anm = anm[:x]\n    x = ins(ak, [mi, 0, 0, 0])\n    ak = ak[:x]\n    return (anm, ak)\nmain()", "from bisect import bisect_left as ins\nimport atexit\nfrom io import StringIO\nfrom sys import stdin, stdout, __stdout__\n_I_B = stdin.read().splitlines()\ninput = iter(_I_B).__next__\n_O_B = StringIO()\nstdout = _O_B\n\n@atexit.register\ndef write():\n    __stdout__.write(_O_B.getvalue())\n\ndef dist(p1, p2):\n    return ((p1[2] - p2[2]) ** 2 + (p1[3] - p2[3]) ** 2) ** 0.5\n\ndef litu(n, li, f, p):\n    a = [[0, f, 0, 0] for j in range(n)]\n    for i in range(2 * n):\n        a[i // 2][2 + i % 2] = int(li[i])\n        if i % 2 == 1:\n            a[i // 2][0] = dist(p, a[i // 2])\n    return sorted(a)\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (x, y) = map(int, input().split())\n        p = (0, -1, x, y)\n        (n, m, k) = map(int, input().split())\n        an = litu(n, input().split(), 1, p)\n        am = litu(m, input().split(), 2, p)\n        ak = litu(k, input().split(), 0, p)\n        anm = sorted(an + am)\n        mi = 10 ** 12\n        i = 0\n        while i < len(anm):\n            (mi, anm, ak) = do(anm[i], anm, ak, mi)\n            i += 1\n        print(mi)\n\ndef do(point, anm, ak, mi):\n    j = 0\n    while j < len(anm):\n        i = anm[j]\n        if i[1] != point[1]:\n            if dist(point, i) + point[0] > mi:\n                j += 1\n                continue\n            k = 0\n            while k < len(ak):\n                ik = ak[k]\n                reached = dist(i, ik) + dist(point, i) + point[0]\n                if reached < mi:\n                    mi = reached\n                    (anm, ak) = cut(mi, anm, ak)\n                k += 1\n        j += 1\n    return (mi, anm, ak)\n\ndef cut(mi, anm, ak):\n    x = ins(anm, [mi, 0, 0, 0])\n    anm = anm[:x]\n    x = ins(ak, [mi, 0, 0, 0])\n    ak = ak[:x]\n    return (anm, ak)\nmain()", "from math import sqrt\n\ndef distance(a, b, m, n):\n    return sqrt((a - m) ** 2 + (b - n) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    N = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    min_dis = distance(x, y, N[0], N[1]) + distance(N[0], N[1], M[0], M[1]) + distance(M[0], M[1], K[0], K[1])\n    for a in range(0, n * 2, 2):\n        curr1 = distance(x, y, N[a], N[a + 1])\n        if curr1 > min_dis:\n            continue\n        else:\n            for b in range(0, m * 2, 2):\n                curr2 = distance(N[a], N[a + 1], M[b], M[b + 1])\n                if curr1 + curr2 > min_dis:\n                    continue\n                else:\n                    for c in range(0, k * 2, 2):\n                        curr3 = distance(M[b], M[b + 1], K[c], K[c + 1])\n                        if min_dis > curr1 + curr2 + curr3:\n                            min_dis = curr1 + curr2 + curr3\n    for a in range(0, m * 2, 2):\n        curr1 = distance(x, y, M[a], M[a + 1])\n        if curr1 > min_dis:\n            continue\n        else:\n            for b in range(0, n * 2, 2):\n                curr2 = distance(M[a], M[a + 1], N[b], N[b + 1])\n                if curr1 + curr2 > min_dis:\n                    continue\n                else:\n                    for c in range(0, k * 2, 2):\n                        curr3 = distance(N[b], N[b + 1], K[c], K[c + 1])\n                        if min_dis > curr1 + curr2 + curr3:\n                            min_dis = curr1 + curr2 + curr3\n    print(min_dis)", "import math\n\ndef dist(x1, y1, x2, y2):\n    return math.sqrt(math.pow(x1 - x2, 2) + math.pow(y1 - y2, 2))\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (N, M, K) = map(int, input().split())\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    ans = 10 ** 12\n    for i in range(N):\n        d1 = dist(x, y, n[2 * i], n[2 * i + 1])\n        for j in range(M):\n            if d1 > ans:\n                break\n            d2 = d1 + dist(n[2 * i], n[2 * i + 1], m[2 * j], m[2 * j + 1])\n            for u in range(K):\n                if d2 > ans:\n                    break\n                d = d2 + dist(m[2 * j], m[2 * j + 1], k[2 * u], k[2 * u + 1])\n                if d < ans:\n                    ans = d\n    for i in range(M):\n        d1 = dist(x, y, m[2 * i], m[2 * i + 1])\n        for j in range(N):\n            if d1 > ans:\n                break\n            d2 = d1 + dist(m[2 * i], m[2 * i + 1], n[2 * j], n[2 * j + 1])\n            for u in range(K):\n                if d2 > ans:\n                    break\n                d = d2 + dist(n[2 * j], n[2 * j + 1], k[2 * u], k[2 * u + 1])\n                if d < ans:\n                    ans = d\n    print(ans)", "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (len1, len2, len3) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    m1 = 10000000000\n    md2 = 10000000000\n    c1 = 0\n    c2 = 0\n    a1 = 0\n    a2 = 0\n    m2 = 10000000000\n    m3 = 10000000000\n    md = 10000000000\n    for i in range(0, 2 * len1, 2):\n        m1 = distance(x, y, l1[i], l1[i + 1])\n        if m1 > md:\n            continue\n        for j in range(0, 2 * len2, 2):\n            m2 = m1 + distance(l1[i], l1[i + 1], l2[j], l2[j + 1])\n            if m2 > md:\n                continue\n            for k in range(0, 2 * len3, 2):\n                m3 = m2 + distance(l2[j], l2[j + 1], l3[k], l3[k + 1])\n                if m3 < md:\n                    md = m3\n    for i in range(0, 2 * len2, 2):\n        m1 = distance(x, y, l2[i], l2[i + 1])\n        if m1 > md2:\n            continue\n        for j in range(0, 2 * len1, 2):\n            m2 = m1 + distance(l2[i], l2[i + 1], l1[j], l1[j + 1])\n            if m2 > md2:\n                continue\n            for k in range(0, 2 * len3, 2):\n                m3 = m2 + distance(l1[j], l1[j + 1], l3[k], l3[k + 1])\n                if m3 < md2:\n                    md2 = m3\n    if md < md2:\n        print('{0:.10f}'.format(md))\n    else:\n        print('{0:.10f}'.format(md2))", "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (len1, len2, len3) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    m1 = 10000000000\n    md2 = 10000000000\n    c1 = 0\n    c2 = 0\n    a1 = 0\n    a2 = 0\n    m2 = 10000000000\n    m3 = 10000000000\n    md = 10000000000\n    for i in range(0, 2 * len1, 2):\n        m1 = distance(x, y, l1[i], l1[i + 1])\n        if m1 > md:\n            continue\n        for j in range(0, 2 * len2, 2):\n            m2 = m1 + distance(l1[i], l1[i + 1], l2[j], l2[j + 1])\n            if m2 > md:\n                continue\n            for k in range(0, 2 * len3, 2):\n                m3 = m2 + distance(l2[j], l2[j + 1], l3[k], l3[k + 1])\n                if m3 < md:\n                    md = m3\n    for i in range(0, 2 * len2, 2):\n        m1 = distance(x, y, l2[i], l2[i + 1])\n        if m1 > md2:\n            continue\n        for j in range(0, 2 * len1, 2):\n            m2 = m1 + distance(l2[i], l2[i + 1], l1[j], l1[j + 1])\n            if m2 > md2:\n                continue\n            for k in range(0, 2 * len3, 2):\n                m3 = m2 + distance(l1[j], l1[j + 1], l3[k], l3[k + 1])\n                if m3 < md2:\n                    md2 = m3\n    if md < md2:\n        print('{0:.10f}'.format(md))\n    else:\n        print('{0:.10f}'.format(md2))", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    N = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    min1 = ((x - N[0]) ** 2 + (y - N[1]) ** 2) ** 0.5 + ((M[0] - N[0]) ** 2 + (M[1] - N[1]) ** 2) ** 0.5 + ((K[0] - M[0]) ** 2 + (K[1] - M[1]) ** 2) ** 0.5\n    for i in range(0, 2 * n, 2):\n        start = ((x - N[i]) ** 2 + (y - N[i + 1]) ** 2) ** 0.5\n        if start < min1:\n            for j in range(0, 2 * m, 2):\n                dist1 = start + ((M[j] - N[i]) ** 2 + (M[j + 1] - N[i + 1]) ** 2) ** 0.5\n                if dist1 < min1:\n                    for a in range(0, 2 * k, 2):\n                        dist2 = dist1 + ((K[a] - M[j]) ** 2 + (K[a + 1] - M[j + 1]) ** 2) ** 0.5\n                        if dist2 < min1:\n                            min1 = dist2\n    min2 = ((x - M[0]) ** 2 + (y - M[1]) ** 2) ** 0.5 + ((M[0] - N[0]) ** 2 + (M[1] - N[1]) ** 2) ** 0.5 + ((K[0] - N[0]) ** 2 + (K[1] - N[1]) ** 2) ** 0.5\n    for i in range(0, 2 * m, 2):\n        start = ((x - M[i]) ** 2 + (y - M[i + 1]) ** 2) ** 0.5\n        if start < min2:\n            for j in range(0, 2 * n, 2):\n                dist1 = start + ((N[j] - M[i]) ** 2 + (N[j + 1] - M[i + 1]) ** 2) ** 0.5\n                if dist1 < min2:\n                    for a in range(0, 2 * k, 2):\n                        dist2 = dist1 + ((K[a] - N[j]) ** 2 + (K[a + 1] - N[j + 1]) ** 2) ** 0.5\n                        if dist2 < min2:\n                            min2 = dist2\n    if min1 < min2:\n        print(min1)\n    else:\n        print(min2)", "def dist(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\ntest = int(input())\nwhile test:\n    (x, y) = input().split()\n    (x, y) = (int(x), int(y))\n    (f, s, t) = input().split()\n    (f, s, t) = (int(f), int(s), int(t))\n    l = [int(i) for i in input().split()]\n    a = l[::2]\n    b = l[1::2]\n    l = [int(i) for i in input().split()]\n    c = l[::2]\n    di = l[1::2]\n    l = [int(i) for i in input().split()]\n    e = l[::2]\n    fi = l[1::2]\n    m = 10000000000000000000000\n    for i in range(f):\n        d = dist(x, y, a[i], b[i])\n        if d < m:\n            for j in range(s):\n                d1 = d + dist(a[i], b[i], c[j], di[j])\n                if d1 < m:\n                    for k in range(t):\n                        d2 = d1 + dist(c[j], di[j], e[k], fi[k])\n                        if d2 < m:\n                            m = d2\n    for i in range(s):\n        d = dist(x, y, c[i], di[i])\n        if d < m:\n            for j in range(f):\n                d1 = d + dist(c[i], di[i], a[j], b[j])\n                if d1 < m:\n                    for k in range(t):\n                        d2 = d1 + dist(a[j], b[j], e[k], fi[k])\n                        if d2 < m:\n                            m = d2\n    print('%.10f' % m)\n    test = test - 1", "import math\n\ndef dist(x, y, p, q):\n    return math.sqrt((x - p) ** 2 + (y - q) ** 2)\n\ndef dis(a, b, c, x1, y1):\n    ans = 100000000000\n    for i in a:\n        p = dist(i[0], i[1], x1, y1)\n        if p > ans:\n            continue\n        for j in b:\n            q = dist(i[0], i[1], j[0], j[1])\n            if p + q > ans:\n                continue\n            for k in c:\n                r = dist(k[0], k[1], j[0], j[1])\n                ans = min(ans, p + q + r)\n    return ans\nfor i in range(int(input())):\n    (x1, y1) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = []\n    b = []\n    c = []\n    x = [int(n) for n in input().split()]\n    for i in range(0, n * 2, 2):\n        a.append([x[i], x[i + 1]])\n    x = [int(n) for n in input().split()]\n    for i in range(0, m * 2, 2):\n        b.append([x[i], x[i + 1]])\n    x = [int(n) for n in input().split()]\n    for i in range(0, k * 2, 2):\n        c.append([x[i], x[i + 1]])\n    print(round(min(dis(a, b, c, x1, y1), dis(b, a, c, x1, y1)), 10))", "import math as m\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (x, y) = map(int, input().split(' '))\n    (N, M, K) = map(int, input().split(' '))\n    c1 = list(map(int, input().split(' ')))\n    c2 = list(map(int, input().split(' ')))\n    c3 = list(map(int, input().split(' ')))\n    p1 = []\n    p2 = []\n    p3 = []\n    for i in range(0, len(c1), 2):\n        p1.append(c1[i:i + 2])\n    for i in range(0, len(c2), 2):\n        p2.append(c2[i:i + 2])\n    for i in range(0, len(c3), 2):\n        p3.append(c3[i:i + 2])\n    d = m.inf\n    for i in range(len(p1)):\n        d1 = ((x - p1[i][0]) ** 2 + (y - p1[i][1]) ** 2) ** 0.5\n        if d1 >= d:\n            continue\n        for j in range(len(p2)):\n            d2 = ((p2[j][0] - p1[i][0]) ** 2 + (p2[j][1] - p1[i][1]) ** 2) ** 0.5\n            if d1 + d2 >= d:\n                continue\n            for k in range(len(p3)):\n                d3 = ((p3[k][0] - p2[j][0]) ** 2 + (p3[k][1] - p2[j][1]) ** 2) ** 0.5\n                d5 = d1 + d2 + d3\n                if d5 < d:\n                    d = d5\n    for i in range(len(p2)):\n        d1 = ((x - p2[i][0]) ** 2 + (y - p2[i][1]) ** 2) ** 0.5\n        if d1 >= d:\n            continue\n        for j in range(len(p1)):\n            d2 = ((p1[j][0] - p2[i][0]) ** 2 + (p1[j][1] - p2[i][1]) ** 2) ** 0.5\n            if d1 + d2 >= d:\n                continue\n            for k in range(len(p3)):\n                d3 = ((p3[k][0] - p1[j][0]) ** 2 + (p3[k][1] - p1[j][1]) ** 2) ** 0.5\n                d5 = d1 + d2 + d3\n                if d5 < d:\n                    d = d5\n    print('%.10f' % d)", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    (x, y, z) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    p = ((a[0] - m) ** 2 + (a[1] - n) ** 2) ** 0.5 + ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5 + ((c[0] - b[0]) ** 2 + (c[1] - b[1]) ** 2) ** 0.5\n    t = 0\n    for i in range(0, 2 * x, 2):\n        t += ((a[i] - m) ** 2 + (a[i + 1] - n) ** 2) ** 0.5\n        if t > p:\n            t = 0\n            continue\n        o = t\n        for j in range(0, 2 * y, 2):\n            o += ((a[i] - b[j]) ** 2 + (a[i + 1] - b[j + 1]) ** 2) ** 0.5\n            if o > p:\n                o = t\n                continue\n            d = o\n            for k in range(0, 2 * z, 2):\n                d += ((c[k] - b[j]) ** 2 + (c[k + 1] - b[j + 1]) ** 2) ** 0.5\n                ee = ((c[k] - b[j]) ** 2 + (c[k + 1] - b[j + 1]) ** 2) ** 0.5\n                if d < p:\n                    p = d\n                d = o\n            o = t\n        t = 0\n    t = 0\n    for i in range(0, 2 * y, 2):\n        t += ((b[i] - m) ** 2 + (b[i + 1] - n) ** 2) ** 0.5\n        if t > p:\n            t = 0\n            continue\n        o = t\n        for j in range(0, 2 * x, 2):\n            o += ((a[j] - b[i]) ** 2 + (a[j + 1] - b[i + 1]) ** 2) ** 0.5\n            if o > p:\n                o = t\n                continue\n            d = o\n            for k in range(0, 2 * z, 2):\n                d += ((c[k] - a[j]) ** 2 + (c[k + 1] - a[j + 1]) ** 2) ** 0.5\n                if d < p:\n                    p = d\n                d = o\n            o = t\n        t = 0\n    print(p)", "import math\nfor tc in range(int(input())):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    res = 10 ** 10\n    for i in range(0, 2 * n, 2):\n        r1 = pow(pow(x - a[i], 2) + pow(y - a[i + 1], 2), 1 / 2)\n        for j in range(0, 2 * m, 2):\n            if r1 > res:\n                break\n            r2 = pow(pow(a[i] - b[j], 2) + pow(a[i + 1] - b[j + 1], 2), 1 / 2)\n            for l in range(0, 2 * k, 2):\n                if r1 + r2 > res:\n                    break\n                r3 = pow(pow(b[j] - c[l], 2) + pow(b[j + 1] - c[l + 1], 2), 1 / 2)\n                if r1 + r2 + r3 < res:\n                    res = r1 + r2 + r3\n    for i in range(0, 2 * m, 2):\n        r1 = pow(pow(x - b[i], 2) + pow(y - b[i + 1], 2), 1 / 2)\n        for j in range(0, 2 * n, 2):\n            if r1 > res:\n                break\n            r2 = pow(pow(b[i] - a[j], 2) + pow(b[i + 1] - a[j + 1], 2), 1 / 2)\n            for l in range(0, 2 * k, 2):\n                if r1 + r2 > res:\n                    break\n                r3 = pow(pow(a[j] - c[l], 2) + pow(a[j + 1] - c[l + 1], 2), 1 / 2)\n                if r1 + r2 + r3 < res:\n                    res = r1 + r2 + r3\n    print('{0:.10f}'.format(res))", "import math\nt = int(input())\nfor _ in range(t):\n    (x, y) = list(map(int, input().split()))\n    (n, m, k) = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    mi = 999999999999\n    s = 0\n    for i in range(0, n * 2, 2):\n        d1 = math.sqrt((x - N[i]) ** 2 + (y - N[i + 1]) ** 2)\n        if d1 >= mi:\n            continue\n        for j in range(0, m * 2, 2):\n            d2 = math.sqrt((N[i] - M[j]) ** 2 + (N[i + 1] - M[j + 1]) ** 2)\n            if d1 + d2 >= mi:\n                continue\n            for z in range(0, k * 2, 2):\n                d3 = math.sqrt((M[j] - K[z]) ** 2 + (M[j + 1] - K[z + 1]) ** 2)\n                s = d1 + d2 + d3\n                if s < mi:\n                    mi = s\n    mi2 = 99999999999\n    s = 0\n    for i in range(0, m * 2, 2):\n        d1 = math.sqrt((x - M[i]) ** 2 + (y - M[i + 1]) ** 2)\n        if d1 >= mi2:\n            continue\n        for j in range(0, n * 2, 2):\n            d2 = math.sqrt((M[i] - N[j]) ** 2 + (M[i + 1] - N[j + 1]) ** 2)\n            if d1 + d2 >= mi2:\n                continue\n            for z in range(0, k * 2, 2):\n                d3 = math.sqrt((N[j] - K[z]) ** 2 + (N[j + 1] - K[z + 1]) ** 2)\n                s = d1 + d2 + d3\n                if s < mi2:\n                    mi2 = s\n    ans = min(mi, mi2)\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    (x, y) = list(map(int, input().split()))\n    (n, m, k) = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    mi = 999999999999\n    s = 0\n    for i in range(0, n * 2, 2):\n        d1 = math.sqrt((x - N[i]) ** 2 + (y - N[i + 1]) ** 2)\n        if d1 >= mi:\n            continue\n        for j in range(0, m * 2, 2):\n            d2 = math.sqrt((N[i] - M[j]) ** 2 + (N[i + 1] - M[j + 1]) ** 2)\n            if d1 + d2 >= mi:\n                continue\n            for z in range(0, k * 2, 2):\n                d3 = math.sqrt((M[j] - K[z]) ** 2 + (M[j + 1] - K[z + 1]) ** 2)\n                s = d1 + d2 + d3\n                if s < mi:\n                    mi = s\n    mi2 = 99999999999\n    s = 0\n    for i in range(0, m * 2, 2):\n        d1 = math.sqrt((x - M[i]) ** 2 + (y - M[i + 1]) ** 2)\n        if d1 >= mi2:\n            continue\n        for j in range(0, n * 2, 2):\n            d2 = math.sqrt((M[i] - N[j]) ** 2 + (M[i + 1] - N[j + 1]) ** 2)\n            if d1 + d2 >= mi2:\n                continue\n            for z in range(0, k * 2, 2):\n                d3 = math.sqrt((N[j] - K[z]) ** 2 + (N[j + 1] - K[z + 1]) ** 2)\n                s = d1 + d2 + d3\n                if s < mi2:\n                    mi2 = s\n    ans = min(mi, mi2)\n    print(ans)", "from math import sqrt\nimport heapq\n\ndef arr_maker(stg):\n    l = list(map(int, input().split()))\n    arr = []\n    for i in range(0, len(l), 2):\n        arr.append([l[i], l[i + 1], stg])\n    return arr\n\ndef dist_finder(x1, y1, x2, y2):\n    return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n\ndef dist_calci(ta, tb, tc, x, y, r=0):\n    ch = []\n    pts = ta + tb + tc\n    visited = [0] * len(pts)\n    dis = [float('inf')] * len(pts)\n    heapq.heapify(ch)\n    ans = float('inf')\n    for i in range(len(ta)):\n        dis[i] = dist_finder(pts[i][0], pts[i][1], x, y)\n        heapq.heappush(ch, [dis[i], i, pts[i][-1]])\n    while len(ch):\n        cur = heapq.heappop(ch)\n        if not visited[cur[1]]:\n            visited[cur[1]] = 1\n        else:\n            continue\n        if r:\n            if cur[-1] == 'a':\n                cur[-1] = 'b'\n            elif cur[-1] == 'b':\n                cur[-1] = 'a'\n        if cur[-1] == 'a':\n            (s, e) = (len(ta), len(ta) + len(tb))\n            (x, y) = (pts[cur[1]][0], pts[cur[1]][1])\n        elif cur[-1] == 'b':\n            (s, e) = (len(ta) + len(tb), len(ta) + len(tb) + len(tc))\n            (x, y) = (pts[cur[1]][0], pts[cur[1]][1])\n        elif cur[-1] == 'c':\n            ans = min(ans, dis[cur[1]])\n            return ans\n            break\n        for (i, d) in enumerate(pts[s:e], s):\n            if not visited[i]:\n                dist = dist_finder(d[0], d[1], x, y)\n                dis[i] = min(dis[i], dis[cur[1]] + dist)\n                heapq.heappush(ch, [dis[i], i, pts[i][-1]])\ntc = int(input())\nfor _ in range(tc):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    ta = arr_maker('a')\n    tb = arr_maker('b')\n    tc = arr_maker('c')\n    a = dist_calci(ta, tb, tc, x, y)\n    b = dist_calci(tb, ta, tc, x, y, 1)\n    m = min(a, b)\n    print('{0:.10f}'.format(m))", "from math import sqrt\n\ndef findd(S, A, B, C):\n    (x1, y1) = (S[0], S[1])\n    (x2, y2) = (A[0], A[1])\n    (x3, y3) = (B[0], B[1])\n    (x4, y4) = (C[0], C[1])\n    res = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    res += sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2)\n    res += sqrt((x4 - x3) ** 2 + (y4 - y3) ** 2)\n    return res\n\ndef findd1(S, A):\n    (x1, y1) = (S[0], S[1])\n    (x2, y2) = (A[0], A[1])\n    res = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return res\nfor _ in range(int(input())):\n    (x, y) = list(map(int, input().split()))\n    (m, n, k) = list(map(int, input().split()))\n    mina = 34.3 * 10 ** 8\n    minb = 34.3 * 10 ** 8\n    M = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    for p in range(m):\n        (a, b) = (M[2 * p], M[2 * p + 1])\n        d1 = findd1([x, y], [a, b])\n        if d1 > mina:\n            continue\n        else:\n            for q in range(n):\n                (c, d) = (N[2 * q], N[2 * q + 1])\n                d2 = findd1([a, b], [c, d])\n                if d1 + d2 > mina:\n                    continue\n                else:\n                    for r in range(k):\n                        (e, f) = (K[2 * r], K[2 * r + 1])\n                        D1 = findd([x, y], [a, b], [c, d], [e, f])\n                        D2 = findd([x, y], [c, d], [a, b], [e, f])\n                        if min(D1, D2) < mina:\n                            mina = min(D1, D2)\n    for p in range(n):\n        (a, b) = (N[2 * p], N[2 * p + 1])\n        d1 = findd1([x, y], [a, b])\n        if d1 > minb:\n            continue\n        else:\n            for q in range(m):\n                (c, d) = (M[2 * q], M[2 * q + 1])\n                d2 = findd1([a, b], [c, d])\n                if d1 + d2 > minb:\n                    continue\n                else:\n                    for r in range(k):\n                        (e, f) = (K[2 * r], K[2 * r + 1])\n                        D1 = findd([x, y], [a, b], [c, d], [e, f])\n                        D2 = findd([x, y], [c, d], [a, b], [e, f])\n                        if min(D1, D2) < minb:\n                            minb = min(D1, D2)\n    print(min(mina, minb))", "from math import sqrt\n\ndef findd(S, A, B, C):\n    (x1, y1) = (S[0], S[1])\n    (x2, y2) = (A[0], A[1])\n    (x3, y3) = (B[0], B[1])\n    (x4, y4) = (C[0], C[1])\n    res = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    res += sqrt((x3 - x2) ** 2 + (y3 - y2) ** 2)\n    res += sqrt((x4 - x3) ** 2 + (y4 - y3) ** 2)\n    return res\n\ndef findd1(S, A):\n    (x1, y1) = (S[0], S[1])\n    (x2, y2) = (A[0], A[1])\n    res = sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return res\nfor _ in range(int(input())):\n    (x, y) = list(map(int, input().split()))\n    (m, n, k) = list(map(int, input().split()))\n    mina = 34.3 * 10 ** 8\n    minb = 34.3 * 10 ** 8\n    M = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    for p in range(m):\n        (a, b) = (M[2 * p], M[2 * p + 1])\n        d1 = findd1([x, y], [a, b])\n        if d1 > mina:\n            continue\n        else:\n            for q in range(n):\n                (c, d) = (N[2 * q], N[2 * q + 1])\n                d2 = findd1([a, b], [c, d])\n                if d1 + d2 > mina:\n                    continue\n                else:\n                    for r in range(k):\n                        (e, f) = (K[2 * r], K[2 * r + 1])\n                        D1 = findd([x, y], [a, b], [c, d], [e, f])\n                        D2 = findd([x, y], [c, d], [a, b], [e, f])\n                        if min(D1, D2) < mina:\n                            mina = min(D1, D2)\n    for p in range(n):\n        (a, b) = (N[2 * p], N[2 * p + 1])\n        d1 = findd1([x, y], [a, b])\n        if d1 > minb:\n            continue\n        else:\n            for q in range(m):\n                (c, d) = (M[2 * q], M[2 * q + 1])\n                d2 = findd1([a, b], [c, d])\n                if d1 + d2 > minb:\n                    continue\n                else:\n                    for r in range(k):\n                        (e, f) = (K[2 * r], K[2 * r + 1])\n                        D1 = findd([x, y], [a, b], [c, d], [e, f])\n                        D2 = findd([x, y], [c, d], [a, b], [e, f])\n                        if min(D1, D2) < minb:\n                            minb = min(D1, D2)\n    print(min(mina, minb))", "def pClosest(points, K, x, y):\n    points.sort(key=lambda K: (K[0] - x) ** 2 + (K[1] - y) ** 2)\n    return points[:K]\n\ndef dis(x, y, x1, y1):\n    c = pow(x - x1, 2)\n    c += pow(y - y1, 2)\n    c = pow(c, 0.5)\n    return c\nt = int(input())\nwhile t:\n    t -= 1\n    (sx, sy) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    (nc1, mc1, kc1) = ([], [], [])\n    nc = list(map(int, input().split()))\n    for i in range(0, n, 2):\n        nc1.append([nc[i], nc[i + 1]])\n    mc = list(map(int, input().split()))\n    for i in range(0, m, 2):\n        mc1.append([mc[i], mc[i + 1]])\n    kc = list(map(int, input().split()))\n    for i in range(0, k, 2):\n        kc1.append([kc[i], kc[i + 1]])\n    f = pClosest(nc1, 1, sx, sy)\n    f1 = pClosest(mc1, 1, sx, sy)\n    f2 = pClosest(kc1, 1, f1[0][0], f1[0][1])\n    d = dis(sx, sy, f[0][0], f[0][1])\n    d += dis(f[0][0], f[0][1], f1[0][0], f1[0][1])\n    d += dis(f1[0][0], f1[0][1], f2[0][0], f2[0][1])\n    for i in range(0, n * 2, 2):\n        a = dis(sx, sy, nc[i], nc[i + 1])\n        if a > d:\n            continue\n        for j in range(0, m * 2, 2):\n            b = dis(sx, sy, mc[j], mc[j + 1])\n            x = dis(nc[i], nc[i + 1], mc[j], mc[j + 1])\n            if b > d or x > d or (a + x > d and b + x > d):\n                continue\n            for z in range(0, k * 2, 2):\n                y = dis(kc[z], kc[z + 1], mc[j], mc[j + 1])\n                h = dis(kc[z], kc[z + 1], nc[i], nc[i + 1])\n                d = min(d, a + x + y, b + x + h)\n    print(d)", "import math\n\ndef st(z, y):\n    return math.sqrt((z[0] - y[0]) ** 2 + (z[1] - y[1]) ** 2)\ntry:\n    t = int(input())\n    for _ in range(t):\n        (x, y) = map(int, input().split())\n        (n, m, k) = map(int, input().split())\n        n1 = list(map(int, input().split()))\n        m1 = list(map(int, input().split()))\n        k1 = list(map(int, input().split()))\n        (n2, m2, k2) = ([], [], [])\n        for i in range(0, 2 * n, 2):\n            n2.append([n1[i], n1[i + 1]])\n        for i in range(0, 2 * m, 2):\n            m2.append([m1[i], m1[i + 1]])\n        for i in range(0, 2 * k, 2):\n            k2.append([k1[i], k1[i + 1]])\n        m = 10 ** 20\n        for i in n2:\n            a1 = st(i, [x, y])\n            if a1 > m:\n                continue\n            for j in m2:\n                a2 = st(i, j)\n                a12 = a1 + a2\n                if a12 > m:\n                    continue\n                for l in k2:\n                    a3 = st(l, j)\n                    a = a1 + a2 + a3\n                    if i == n2[0] and j == m2[0] and (l == k2[0]):\n                        m = a\n                    if m < a:\n                        continue\n                    elif m > a:\n                        m = a\n        for i in m2:\n            a1 = st(i, [x, y])\n            if a1 > m:\n                continue\n            for j in n2:\n                a2 = st(i, j)\n                a21 = a1 + a2\n                if a21 > m:\n                    continue\n                for l in k2:\n                    a3 = st(l, j)\n                    a = a1 + a2 + a3\n                    if a > m:\n                        continue\n                    elif m > a:\n                        m = a\n        print(m)\nexcept:\n    pass", "import math\nimport sys\n\ndef calc(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nfor i in range(int(input())):\n    (x, y) = map(int, input().split())\n    li0 = [x, y]\n    (n, m, k) = map(int, input().split())\n    N = list()\n    M = list()\n    K = list()\n    Nn = [int(x) for x in input().split()]\n    Mm = [int(x) for x in input().split()]\n    Kk = [int(x) for x in input().split()]\n    Nd = {}\n    Md = {}\n    Kd = {}\n    for i in range(0, len(Nn), 2):\n        N.append([Nn[i], Nn[i + 1]])\n        Nd[Nn[i], Nn[i + 1]] = calc(x, y, Nn[i], Nn[i + 1])\n    for i in range(0, len(Mm), 2):\n        M.append([Mm[i], Mm[i + 1]])\n        Md[Mm[i], Mm[i + 1]] = calc(x, y, Mm[i], Mm[i + 1])\n    for i in range(0, len(Kk), 2):\n        K.append([Kk[i], Kk[i + 1]])\n        Kd[Kk[i], Kk[i + 1]] = calc(x, y, Kk[i], Kk[i + 1])\n    mini = sys.maxsize\n    for i in range(n):\n        li1 = tuple(N[i])\n        if Nd[li1] >= mini:\n            continue\n        for j in range(m):\n            li2 = tuple(M[j])\n            f = calc(li1[0], li1[1], li2[0], li2[1])\n            if Nd[li1] + f >= mini:\n                continue\n            for p in range(k):\n                li3 = K[p]\n                mini = min(mini, Nd[li1] + f + calc(li2[0], li2[1], li3[0], li3[1]))\n    for i in range(m):\n        li1 = tuple(M[i])\n        if Md[li1] >= mini:\n            continue\n        for j in range(n):\n            li2 = tuple(N[j])\n            f = calc(li1[0], li1[1], li2[0], li2[1])\n            if Md[li1] + f >= mini:\n                continue\n            for p in range(k):\n                li3 = K[p]\n                mini = min(mini, Md[li1] + f + calc(li2[0], li2[1], li3[0], li3[1]))\n    print('{0:.10f}'.format(mini))", "from math import *\nT = int(input())\nfor t in range(T):\n    [x, y] = list((int(i) for i in input().split()))\n    [N, M, K] = list((int(i) for i in input().split()))\n    pN = []\n    pM = []\n    pK = []\n    l = list((int(i) for i in input().split()))\n    for n in range(0, 2 * N, 2):\n        pN.append((l[n], l[n + 1]))\n    l = list((int(i) for i in input().split()))\n    for n in range(0, 2 * M, 2):\n        pM.append((l[n], l[n + 1]))\n    l = list((int(i) for i in input().split()))\n    for n in range(0, 2 * K, 2):\n        pK.append((l[n], l[n + 1]))\n    d = 99999999999999999\n    for n in pN:\n        dn = sqrt((x - n[0]) ** 2 + (y - n[1]) ** 2)\n        if dn > d:\n            continue\n        for m in pM:\n            dm = sqrt((m[0] - n[0]) ** 2 + (m[1] - n[1]) ** 2)\n            if dm + dn > d:\n                continue\n            for k in pK:\n                dk = sqrt((m[0] - k[0]) ** 2 + (m[1] - k[1]) ** 2)\n                d = min(d, dn + dm + dk)\n    for m in pM:\n        dm = sqrt((x - m[0]) ** 2 + (y - m[1]) ** 2)\n        if dm > d:\n            continue\n        for n in pN:\n            dn = sqrt((m[0] - n[0]) ** 2 + (m[1] - n[1]) ** 2)\n            if dm + dn > d:\n                continue\n            for k in pK:\n                dk = sqrt((n[0] - k[0]) ** 2 + (n[1] - k[1]) ** 2)\n                d = min(d, dn + dm + dk)\n    print(d)", "import math\nt = int(input())\nfor i in range(t):\n    (x, y) = map(int, input().split(' '))\n    (n, m, g) = map(int, input().split(' '))\n    red = [int(red) for red in input().split(' ')]\n    blue = [int(blue) for blue in input().split(' ')]\n    green = [int(green) for green in input().split(' ')]\n    minimum = 10000000000\n    total = 0\n    for choice in range(2):\n        if choice == 0:\n            for i in range(0, 2 * n, 2):\n                d1 = math.sqrt(math.pow(x - red[i], 2) + math.pow(y - red[i + 1], 2))\n                total += d1\n                cxpos = red[i]\n                cypos = red[i + 1]\n                if total < minimum:\n                    for j in range(0, 2 * m, 2):\n                        d2 = math.sqrt(math.pow(blue[j] - cxpos, 2) + math.pow(blue[j + 1] - cypos, 2))\n                        total += d2\n                        sxpos = blue[j]\n                        sypos = blue[j + 1]\n                        if total < minimum:\n                            for k in range(0, 2 * g, 2):\n                                d3 = math.sqrt(math.pow(green[k] - sxpos, 2) + math.pow(green[k + 1] - sypos, 2))\n                                total += d3\n                                txpos = green[k]\n                                typos = green[k + 1]\n                                if total < minimum:\n                                    minimum = total\n                                total -= d3\n                        total -= d2\n                total = 0\n        elif choice == 1:\n            for j in range(0, 2 * m, 2):\n                d2 = math.sqrt(math.pow(blue[j] - x, 2) + math.pow(blue[j + 1] - y, 2))\n                total += d2\n                cxpos = blue[j]\n                cypos = blue[j + 1]\n                if total < minimum:\n                    for i in range(0, 2 * n, 2):\n                        d1 = math.sqrt(math.pow(cxpos - red[i], 2) + math.pow(cypos - red[i + 1], 2))\n                        total += d1\n                        sxpos = red[i]\n                        sypos = red[i + 1]\n                        if total < minimum:\n                            for k in range(0, 2 * g, 2):\n                                d3 = math.sqrt(math.pow(green[k] - sxpos, 2) + math.pow(green[k + 1] - sypos, 2))\n                                total += d3\n                                txpos = green[k]\n                                typos = green[k + 1]\n                                if total < minimum:\n                                    minimum = total\n                                total -= d3\n                        total -= d1\n                total = 0\n    print(minimum)", "def distance(a, b):\n    return ((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2) ** 0.5\nfor _ in range(int(input())):\n    xy = tuple(list(map(int, input().split())))\n    (n, m, k) = list(map(int, input().split()))\n    axy = list(map(int, input().split()))\n    axy = [(axy[i], axy[i + 1]) for i in range(0, len(axy), 2)]\n    bxy = list(map(int, input().split()))\n    bxy = [(bxy[i], bxy[i + 1]) for i in range(0, len(bxy), 2)]\n    cxy = list(map(int, input().split()))\n    cxy = [(cxy[i], cxy[i + 1]) for i in range(0, len(cxy), 2)]\n    dif = 1e+50\n    for a in axy:\n        cur1 = distance(xy, a)\n        if cur1 > dif:\n            continue\n        for b in bxy:\n            cur2 = distance(a, b)\n            if cur1 + cur2 > dif:\n                continue\n            for c in cxy:\n                x = cur1 + cur2 + distance(b, c)\n                dif = min(x, dif)\n    dif2 = 1e+50\n    for b in bxy:\n        cur1 = distance(xy, b)\n        if cur1 > dif2:\n            continue\n        for a in axy:\n            cur2 = distance(b, a)\n            if cur1 + cur2 > dif2:\n                continue\n            for c in cxy:\n                x = cur1 + cur2 + distance(a, c)\n                dif2 = min(dif2, x)\n    print(min(dif, dif2))", "import math\nEuclidianDistance = lambda x1, y1, x2, y2: math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (x, y) = map(int, input().split())\n        (n, m, k) = map(int, input().split())\n        n_l = list(map(int, input().split()))\n        m_l = list(map(int, input().split()))\n        k_l = list(map(int, input().split()))\n        n_x = []\n        n_y = []\n        m_x = []\n        m_y = []\n        k_x = []\n        k_y = []\n        for i in range(2 * n):\n            if i % 2 == 0:\n                n_x.append(n_l[i])\n            else:\n                n_y.append(n_l[i])\n        for i in range(2 * m):\n            if i % 2 == 0:\n                m_x.append(m_l[i])\n            else:\n                m_y.append(m_l[i])\n        for i in range(2 * k):\n            if i % 2 == 0:\n                k_x.append(k_l[i])\n            else:\n                k_y.append(k_l[i])\n        final = EuclidianDistance(x, y, n_x[0], n_y[0]) + EuclidianDistance(n_x[0], n_y[0], m_x[0], m_y[0]) + EuclidianDistance(m_x[0], m_y[0], k_x[0], k_y[0])\n        for i in range(n):\n            if EuclidianDistance(x, y, n_x[i], n_y[i]) < final:\n                for j in range(m):\n                    if EuclidianDistance(x, y, n_x[i], n_y[i]) + EuclidianDistance(n_x[i], n_y[i], m_x[j], m_y[j]) < final:\n                        for h in range(k):\n                            if EuclidianDistance(x, y, n_x[i], n_y[i]) + EuclidianDistance(n_x[i], n_y[i], m_x[j], m_y[j]) + EuclidianDistance(m_x[j], m_y[j], k_x[h], k_y[h]) < final:\n                                final = EuclidianDistance(x, y, n_x[i], n_y[i]) + EuclidianDistance(n_x[i], n_y[i], m_x[j], m_y[j]) + EuclidianDistance(m_x[j], m_y[j], k_x[h], k_y[h])\n        for i in range(m):\n            if EuclidianDistance(x, y, m_x[i], m_y[i]) < final:\n                for j in range(n):\n                    if EuclidianDistance(x, y, m_x[i], m_y[i]) + EuclidianDistance(m_x[i], m_y[i], n_x[j], n_y[j]) < final:\n                        for h in range(k):\n                            if EuclidianDistance(x, y, m_x[i], m_y[i]) + EuclidianDistance(m_x[i], m_y[i], n_x[j], n_y[j]) + EuclidianDistance(n_x[j], n_y[j], k_x[h], k_y[h]) < final:\n                                final = EuclidianDistance(x, y, m_x[i], m_y[i]) + EuclidianDistance(m_x[i], m_y[i], n_x[j], n_y[j]) + EuclidianDistance(n_x[j], n_y[j], k_x[h], k_y[h])\n        print(final)\nmain()", "import numpy as np\nfrom numpy.linalg import norm\nfor _ in range(int(input())):\n    p1 = np.array(list(map(int, input().split())))\n    (n, m, k) = map(int, input().split())\n    ps1 = list(map(int, input().split()))\n    ps2 = list(map(int, input().split()))\n    ps3 = list(map(int, input().split()))\n    (mps1, mps2, mps3) = ([], [], [])\n    thing = iter(ps1)\n    for val in thing:\n        mps1.append(np.array((val, next(thing))))\n    thing = iter(ps2)\n    for val in thing:\n        mps2.append(np.array((val, next(thing))))\n    thing = iter(ps3)\n    for val in thing:\n        mps3.append(np.array((val, next(thing))))\n    min_dist = norm(p1 - mps1[0]) + norm(mps1[0] - mps2[0]) + norm(mps2[0] - mps3[0])\n    for j in mps1:\n        d0 = norm(p1 - j)\n        if d0 < min_dist:\n            for k in mps2:\n                d1 = norm(j - k)\n                if d0 + d1 < min_dist:\n                    for l in mps3:\n                        d2 = norm(k - l)\n                        if d0 + d1 + d2 < min_dist:\n                            min_dist = d0 + d1 + d2\n    for j in mps2:\n        d0 = norm(p1 - j)\n        if d0 < min_dist:\n            for k in mps1:\n                d1 = norm(j - k)\n                if d0 + d1 < min_dist:\n                    for l in mps3:\n                        d2 = norm(k - l)\n                        if d0 + d1 + d2 < min_dist:\n                            min_dist = d0 + d1 + d2\n    print(min_dist)", "import math\nimport sys\nt = int(input())\nfor i in range(t):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    l1 = []\n    l2 = []\n    l3 = []\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    r = sys.maxsize\n    for i in range(0, 2 * n - 1, 2):\n        r1 = math.sqrt(pow(x - l1[i], 2) + pow(y - l1[i + 1], 2))\n        x1 = l1[i]\n        y1 = l1[i + 1]\n        if r1 < r:\n            for j in range(0, 2 * m - 1, 2):\n                r2 = r1 + math.sqrt(pow(x1 - l2[j], 2) + pow(y1 - l2[j + 1], 2))\n                x2 = l2[j]\n                y2 = l2[j + 1]\n                if r2 < r:\n                    for _ in range(0, 2 * k - 1, 2):\n                        r3 = r2 + math.sqrt(pow(x2 - l3[_], 2) + pow(y2 - l3[_ + 1], 2))\n                        r = min(r, r3)\n    res = sys.maxsize\n    for i in range(0, 2 * m - 1, 2):\n        r1 = math.sqrt(pow(x - l2[i], 2) + pow(y - l2[i + 1], 2))\n        x2 = l2[i]\n        y2 = l2[i + 1]\n        if r1 < r:\n            for j in range(0, 2 * n - 1, 2):\n                r2 = r1 + math.sqrt(pow(x2 - l1[j], 2) + pow(y2 - l1[j + 1], 2))\n                x1 = l1[j]\n                y1 = l1[j + 1]\n                if r2 < r:\n                    for _ in range(0, 2 * k - 1, 2):\n                        r3 = r2 + math.sqrt(pow(x1 - l3[_], 2) + pow(y1 - l3[_ + 1], 2))\n                        res = min(res, r3)\n    print(min(r, res))", "import math\n\ndef dis(a, b, c, d):\n    k = math.sqrt((a - c) ** 2 + (b - d) ** 2)\n    return round(k, 10)\nz = int(input())\nfor i in range(z):\n    (x, y) = map(int, input().split())\n    (N, M, K) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    e = [int(x) for x in input().split()]\n    t = 10 ** 11\n    for i in range(0, len(a), 2):\n        d = dis(x, y, a[i], a[i + 1])\n        if d >= t:\n            continue\n        for j in range(0, len(c), 2):\n            f = dis(a[i], a[i + 1], c[j], c[j + 1])\n            if d + f >= t:\n                continue\n            for k in range(0, len(e), 2):\n                g = dis(c[j], c[j + 1], e[k], e[k + 1])\n                if d + f + g >= t:\n                    continue\n                ff = d + f + g\n                t = min(t, ff)\n    q = 10 ** 11\n    for i in range(0, len(c), 2):\n        h = dis(x, y, c[i], c[i + 1])\n        if h >= q:\n            continue\n        for j in range(0, len(a), 2):\n            l = dis(c[i], c[i + 1], a[j], a[j + 1])\n            if h + l >= q:\n                continue\n            for k in range(0, len(e), 2):\n                m = dis(a[j], a[j + 1], e[k], e[k + 1])\n                if h + l + m >= q:\n                    continue\n                fff = h + l + m\n                q = min(q, fff)\n    print(min(t, q))", "import math\nt = int(input())\nwhile t:\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    alpha = 10000000000000000000000000000000000000000000\n    alpha1 = 1000000000000000000000000000000000000000000\n    beta = 10000000000000000000000000000000000\n    beta1 = 10000000000000000000000000000000000\n    zeta = 10000000000000000000000000000000000\n    zeta1 = 10000000000000000000000000000000000\n    for i in range(0, 2 * n, 2):\n        x1 = a[i]\n        y1 = a[i + 1]\n        sqn = math.sqrt(abs(x1 - x) ** 2 + abs(y1 - y) ** 2)\n        if sqn < alpha:\n            f_x1 = a[i]\n            f_y1 = a[i + 1]\n            for j in range(0, 2 * m, 2):\n                x2 = b[j]\n                y2 = b[j + 1]\n                sqm = math.sqrt(abs(f_x1 - x2) ** 2 + abs(f_y1 - y2) ** 2)\n                if sqm + sqn < alpha:\n                    m_x = b[j]\n                    m_y = b[j + 1]\n                    for z in range(0, 2 * k, 2):\n                        x3 = c[z]\n                        y3 = c[z + 1]\n                        sqk = math.sqrt(abs(x3 - m_x) ** 2 + abs(y3 - m_y) ** 2)\n                        if sqk + sqm + sqn < alpha:\n                            alpha = sqk + sqm + sqn\n    for i in range(0, 2 * m, 2):\n        x11 = b[i]\n        y11 = b[i + 1]\n        sqn1 = math.sqrt(abs(x11 - x) ** 2 + abs(y11 - y) ** 2)\n        if sqn1 < alpha1:\n            f_x11 = b[i]\n            f_y11 = b[i + 1]\n            for j in range(0, 2 * n, 2):\n                x22 = a[j]\n                y22 = a[j + 1]\n                sqm1 = math.sqrt(abs(f_x11 - x22) ** 2 + abs(f_y11 - y22) ** 2)\n                if sqm1 + sqn1 < alpha1:\n                    m_x1 = a[j]\n                    m_y1 = a[j + 1]\n                    for z in range(0, 2 * k, 2):\n                        x33 = c[z]\n                        y33 = c[z + 1]\n                        sqk1 = math.sqrt(abs(x33 - m_x1) ** 2 + abs(y33 - m_y1) ** 2)\n                        if sqk1 + sqm1 + sqn1 < alpha1:\n                            alpha1 = sqk1 + sqm1 + sqn1\n    res1 = alpha\n    res2 = alpha1\n    if res1 < res2:\n        print('%.10f' % res1)\n    else:\n        print('%.10f' % res2)\n    t -= 1", "from math import *\nT = int(input())\nfor t in range(T):\n    [x, y] = list((int(i) for i in input().split()))\n    [N, M, K] = list((int(i) for i in input().split()))\n    pN = []\n    pM = []\n    pK = []\n    l = list((int(i) for i in input().split()))\n    for n in range(0, 2 * N, 2):\n        pN.append((l[n], l[n + 1]))\n    l = list((int(i) for i in input().split()))\n    for n in range(0, 2 * M, 2):\n        pM.append((l[n], l[n + 1]))\n    l = list((int(i) for i in input().split()))\n    for n in range(0, 2 * K, 2):\n        pK.append((l[n], l[n + 1]))\n    d = 99999999999999999\n    for n in pN:\n        dn = sqrt((x - n[0]) ** 2 + (y - n[1]) ** 2)\n        if dn > d:\n            continue\n        for m in pM:\n            dm = sqrt((m[0] - n[0]) ** 2 + (m[1] - n[1]) ** 2)\n            if dm + dn > d:\n                continue\n            for k in pK:\n                dk = sqrt((m[0] - k[0]) ** 2 + (m[1] - k[1]) ** 2)\n                d = min(d, dn + dm + dk)\n    for m in pM:\n        dm = sqrt((x - m[0]) ** 2 + (y - m[1]) ** 2)\n        if dm > d:\n            continue\n        for n in pN:\n            dn = sqrt((m[0] - n[0]) ** 2 + (m[1] - n[1]) ** 2)\n            if dm + dn > d:\n                continue\n            for k in pK:\n                dk = sqrt((n[0] - k[0]) ** 2 + (n[1] - k[1]) ** 2)\n                d = min(d, dn + dm + dk)\n    print(d)", "import math\n\ndef pair(set=[]):\n    return [(set[i], set[i + 1]) for i in range(0, len(set) - 1, 2)]\n\ndef power(a, b):\n    res = 1\n    while b > 0:\n        if b % 2:\n            res = res * a\n        b = b >> 1\n        a = a * a\n    return res\n\ndef distance(p=(), q=()):\n    x = abs(q[0] - p[0])\n    y = abs(q[1] - p[1])\n    x = power(x, 2)\n    y = power(y, 2)\n    r = math.sqrt(x + y)\n    return r\nfor _ in range(int(input())):\n    (x, y) = [int(i) for i in input().split()]\n    (n, m, k) = [int(i) for i in input().split()]\n    set1 = [int(i) for i in input().split()]\n    set2 = [int(i) for i in input().split()]\n    set3 = [int(i) for i in input().split()]\n    set1 = pair(set1)\n    set2 = pair(set2)\n    set3 = pair(set3)\n    min1 = float('inf')\n    for i in set1:\n        distA = distance((x, y), (i[0], i[1]))\n        if distA > min1:\n            continue\n        for j in set2:\n            distAB = distance((i[0], i[1]), (j[0], j[1]))\n            if distA + distAB > min1:\n                continue\n            for k in set3:\n                distBC = distance((j[0], j[1]), (k[0], k[1]))\n                final_dist = distA + distAB + distBC\n                if final_dist < min1:\n                    min1 = final_dist\n    for i in set2:\n        distB = distance((x, y), (i[0], i[1]))\n        if distB > min1:\n            continue\n        for j in set1:\n            distBA = distance((i[0], i[1]), (j[0], j[1]))\n            if distB + distBA > min1:\n                continue\n            for k in set3:\n                distAC = distance((j[0], j[1]), (k[0], k[1]))\n                final_dist = distB + distBA + distAC\n                if final_dist < min1:\n                    min1 = final_dist\n    print(round(min1, 10))", "try:\n    import math\n    for _ in range(int(input())):\n        (a, b) = map(int, input().split())\n        (n, m, k) = map(int, input().split())\n        N = list(map(int, input().split()))\n        M = list(map(int, input().split()))\n        K = list(map(int, input().split()))\n        ans = float('inf')\n        for (i, j) in zip(N[0::2], N[1::2]):\n            dist = math.sqrt((a - i) ** 2 + (b - j) ** 2)\n            if dist > ans:\n                continue\n            for (x, y) in zip(M[0::2], M[1::2]):\n                dist1 = dist + math.sqrt((i - x) ** 2 + (j - y) ** 2)\n                if dist1 > ans:\n                    continue\n                for (e, f) in zip(K[0::2], K[1::2]):\n                    dist2 = dist1 + math.sqrt((x - e) ** 2 + (y - f) ** 2)\n                    if dist2 > ans:\n                        continue\n                    ans = dist2\n        ans1 = float('inf')\n        dist = dist1 = dist2 = 0\n        for (i, j) in zip(M[0::2], M[1::2]):\n            dist = math.sqrt((a - i) ** 2 + (b - j) ** 2)\n            if dist > ans1:\n                continue\n            for (x, y) in zip(N[0::2], N[1::2]):\n                dist1 = dist + math.sqrt((i - x) ** 2 + (j - y) ** 2)\n                if dist1 > ans1:\n                    continue\n                for (e, f) in zip(K[0::2], K[1::2]):\n                    dist2 = dist1 + math.sqrt((x - e) ** 2 + (y - f) ** 2)\n                    if dist2 > ans1:\n                        continue\n                    ans1 = dist2\n        if ans < ans1:\n            print(ans)\n        else:\n            print(ans1)\nexcept:\n    pass", "import sys\nt = int(input())\nfor i in range(t):\n    (x, y) = map(int, input().split())\n    nmk = input().split()\n    n = int(nmk[0])\n    m = int(nmk[1])\n    k = int(nmk[2])\n    N = list(map(int, input().split()))\n    M = list(map(int, input().split()))\n    K = list(map(int, input().split()))\n    mini = sys.maxsize\n    for i in range(0, 2 * m, 2):\n        x1 = M[i]\n        y1 = M[i + 1]\n        d1 = ((x - x1) ** 2 + (y - y1) ** 2) ** 0.5\n        if d1 > mini:\n            continue\n        for j in range(0, 2 * n, 2):\n            x2 = N[j]\n            y2 = N[j + 1]\n            d2 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if d1 + d2 > mini:\n                continue\n            for p in range(0, 2 * k, 2):\n                x3 = K[p]\n                y3 = K[p + 1]\n                d3 = ((x3 - x2) ** 2 + (y2 - y3) ** 2) ** 0.5\n                d = d1 + d2 + d3\n                if d < mini:\n                    mini = d\n    mi = sys.maxsize\n    for i in range(0, 2 * n, 2):\n        x1 = N[i]\n        y1 = N[i + 1]\n        d1 = ((x - x1) ** 2 + (y - y1) ** 2) ** 0.5\n        if d1 > mi:\n            continue\n        for j in range(0, 2 * m, 2):\n            x2 = M[j]\n            y2 = M[j + 1]\n            d2 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n            if d1 + d2 > mi:\n                continue\n            for p in range(0, 2 * k, 2):\n                x3 = K[p]\n                y3 = K[p + 1]\n                d3 = ((x3 - x2) ** 2 + (y2 - y3) ** 2) ** 0.5\n                dd = d1 + d2 + d3\n                if dd < mi:\n                    mi = dd\n    if mini < mi:\n        print(mini)\n    else:\n        print(mi)", "def main():\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split())\n        (n, m, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        b = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        a = [a[i:i + 2] for i in range(0, len(a), 2)]\n        b = [b[i:i + 2] for i in range(0, len(b), 2)]\n        c = [c[i:i + 2] for i in range(0, len(c), 2)]\n        min = 10 ** 12\n        for q in a:\n            d1 = ((q[0] - x) ** 2 + (q[1] - y) ** 2) ** 0.5\n            if d1 > min:\n                continue\n            for r in b:\n                d2 = ((r[0] - q[0]) ** 2 + (r[1] - q[1]) ** 2) ** 0.5\n                if d1 + d2 > min:\n                    continue\n                for s in c:\n                    d3 = ((s[0] - r[0]) ** 2 + (s[1] - r[1]) ** 2) ** 0.5\n                    sum = d1 + d2 + d3\n                    if sum < min:\n                        min = sum\n        for r in b:\n            d2 = ((r[0] - x) ** 2 + (r[1] - y) ** 2) ** 0.5\n            if d2 > min:\n                continue\n            for q in a:\n                d1 = ((q[0] - r[0]) ** 2 + (q[1] - r[1]) ** 2) ** 0.5\n                if d1 + d2 > min:\n                    continue\n                for s in c:\n                    d3 = ((s[0] - q[0]) ** 2 + (s[1] - q[1]) ** 2) ** 0.5\n                    sum = d1 + d2 + d3\n                    if sum < min:\n                        min = sum\n        print(min)\nmain()", "def distance(x, y, a, b):\n    dist = (x - a) ** 2 + (y - b) ** 2\n    return dist ** 0.5\nt = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    ng = list(map(int, input().split()))\n    mg = list(map(int, input().split()))\n    kg = list(map(int, input().split()))\n    ng = [[ng[i], ng[i + 1]] for i in range(0, 2 * n, 2)]\n    mg = [[mg[i], mg[i + 1]] for i in range(0, 2 * m, 2)]\n    kg = [[kg[i], kg[i + 1]] for i in range(0, 2 * k, 2)]\n    req = distance(x, y, ng[0][0], ng[0][1]) + distance(ng[0][0], ng[0][1], mg[0][0], mg[0][1]) + distance(kg[0][0], kg[0][1], mg[0][0], mg[0][1])\n    for i in range(n):\n        d1 = distance(x, y, ng[i][0], ng[i][1])\n        if d1 >= req:\n            continue\n        for j in range(m):\n            d2 = d1 + distance(ng[i][0], ng[i][1], mg[j][0], mg[j][1])\n            if d2 >= req:\n                continue\n            for r in range(k):\n                d = d2 + distance(kg[r][0], kg[r][1], mg[j][0], mg[j][1])\n                req = min(req, d)\n    for j in range(m):\n        d1 = distance(x, y, mg[j][0], mg[j][1])\n        if d1 >= req:\n            continue\n        for i in range(n):\n            d2 = d1 + distance(ng[i][0], ng[i][1], mg[j][0], mg[j][1])\n            if d2 >= req:\n                continue\n            for r in range(k):\n                d = d2 + distance(kg[r][0], kg[r][1], ng[i][0], ng[i][1])\n                req = min(req, d)\n    print(req)", "T = int(input())\nfor t in range(T):\n    min = 1000000000000\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    nl = list(map(int, input().split()))\n    ml = list(map(int, input().split()))\n    kl = list(map(int, input().split()))\n    for i in range(0, 2 * n, 2):\n        a1 = ((nl[i] - x) ** 2 + (nl[i + 1] - y) ** 2) ** 0.5\n        if a1 >= min:\n            continue\n        for j in range(0, 2 * m, 2):\n            a2 = ((nl[i] - ml[j]) ** 2 + (nl[i + 1] - ml[j + 1]) ** 2) ** 0.5\n            if a1 + a2 >= min:\n                continue\n            for h in range(0, 2 * k, 2):\n                dist = a1 + a2 + ((ml[j] - kl[h]) ** 2 + (ml[j + 1] - kl[h + 1]) ** 2) ** 0.5\n                if dist < min:\n                    min = dist\n    for i in range(0, 2 * m, 2):\n        a1 = ((ml[i] - x) ** 2 + (ml[i + 1] - y) ** 2) ** 0.5\n        if a1 >= min:\n            continue\n        for j in range(0, 2 * n, 2):\n            a2 = ((nl[j] - ml[i]) ** 2 + (nl[j + 1] - ml[i + 1]) ** 2) ** 0.5\n            if a1 + a2 >= min:\n                continue\n            for h in range(0, 2 * k, 2):\n                dist = a1 + a2 + ((nl[j] - kl[h]) ** 2 + (nl[j + 1] - kl[h + 1]) ** 2) ** 0.5\n                if dist < min:\n                    min = dist\n    print('%.8f' % min)", "import sys\nt = int(input())\nfor __ in range(t):\n    xy = input().split()\n    x = int(xy[0])\n    y = int(xy[1])\n    nmk = input().split()\n    n = int(nmk[0])\n    m = int(nmk[1])\n    k = int(nmk[2])\n    ab = [int(x) for x in input().split()]\n    cd = [int(x) for x in input().split()]\n    ef = [int(x) for x in input().split()]\n    min1 = sys.maxsize\n    for i in range(0, len(cd), 2):\n        s = ((x - cd[i]) ** 2 + (y - cd[i + 1]) ** 2) ** 0.5\n        if s >= min1:\n            continue\n        for j in range(0, len(ab), 2):\n            si = ((cd[i] - ab[j]) ** 2 + (cd[i + 1] - ab[j + 1]) ** 2) ** 0.5\n            if si + s > min1:\n                continue\n            for q in range(0, len(ef), 2):\n                sis = ((ab[j] - ef[q]) ** 2 + (ab[j + 1] - ef[q + 1]) ** 2) ** 0.5\n                x1 = s + si + sis\n                if x1 < min1:\n                    min1 = x1\n    min2 = sys.maxsize\n    for i in range(0, len(ab), 2):\n        d = ((x - ab[i]) ** 2 + (y - ab[i + 1]) ** 2) ** 0.5\n        if d > min2:\n            continue\n        for j in range(0, len(cd), 2):\n            di = ((ab[i] - cd[j]) ** 2 + (ab[i + 1] - cd[j + 1]) ** 2) ** 0.5\n            if di + d > min2:\n                continue\n            for q in range(0, len(ef), 2):\n                dis = ((cd[j] - ef[q]) ** 2 + (cd[j + 1] - ef[q + 1]) ** 2) ** 0.5\n                y1 = d + di + dis\n                if y1 < min2:\n                    min2 = y1\n    if min1 <= min2:\n        print(min1)\n    else:\n        print(min2)", "import math\n\ndef cal(p1, p2):\n    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)\nfor _ in range(int(input())):\n    (x, y) = input().split()\n    (x, y) = (int(x), int(y))\n    (n, m, k) = input().split()\n    (n, m, k) = (int(n), int(m), int(k))\n    a = input().split()\n    b = input().split()\n    c = input().split()\n    (l1, l2) = ([], [])\n    minl1 = 11111111111\n    minl2 = 11111111111\n    for i in range(0, n * 2, 2):\n        a1 = cal([x, y], [int(a[i]), int(a[i + 1])])\n        if minl2 < a1:\n            continue\n        for j in range(0, m * 2, 2):\n            a2 = a1 + cal([int(a[i]), int(a[i + 1])], [int(b[j]), int(b[j + 1])])\n            if minl2 < a2:\n                continue\n            for l in range(0, k * 2, 2):\n                a3 = a2 + cal([int(b[j]), int(b[j + 1])], [int(c[l]), int(c[l + 1])])\n                if a3 < minl2:\n                    minl2 = a3\n    for i in range(0, m * 2, 2):\n        a1 = cal([x, y], [int(b[i]), int(b[i + 1])])\n        if minl1 < a1:\n            continue\n        for j in range(0, n * 2, 2):\n            a2 = a1 + cal([int(b[i]), int(b[i + 1])], [int(a[j]), int(a[j + 1])])\n            if minl1 < a2:\n                continue\n            for l in range(0, k * 2, 2):\n                a3 = a2 + cal([int(a[j]), int(a[j + 1])], [int(c[l]), int(c[l + 1])])\n                if a3 < minl1:\n                    minl1 = a3\n    print(min(minl1, minl2))", "t = int(input().strip())\nd1 = [None] * 5000\nfor aa in range(t):\n    (x, y) = map(int, input().strip().split())\n    (n, m, o) = map(int, input().strip().split())\n    a = list(map(int, input().strip().split()))\n    c = list(map(int, input().strip().split()))\n    e = list(map(int, input().strip().split()))\n    min_so_far = float('inf')\n    for i in range(n):\n        d1[i] = (abs(a[2 * i] - x) ** 2 + abs(a[2 * i + 1] - y) ** 2) ** 0.5\n        if d1[i] > min_so_far:\n            continue\n        for j in range(m):\n            last = d1[i] + (abs(a[2 * i] - c[2 * j]) ** 2 + abs(a[2 * i + 1] - c[2 * j + 1]) ** 2) ** 0.5\n            if last > min_so_far:\n                continue\n            for k in range(o):\n                current = last + (abs(e[2 * k] - c[2 * j]) ** 2 + abs(e[2 * k + 1] - c[2 * j + 1]) ** 2) ** 0.5\n                if current < min_so_far:\n                    min_so_far = current\n    for i in range(m):\n        d1[i] = (abs(c[2 * i] - x) ** 2 + abs(c[2 * i + 1] - y) ** 2) ** 0.5\n        if d1[i] > min_so_far:\n            continue\n        for j in range(n):\n            last = d1[i] + (abs(c[2 * i] - a[2 * j]) ** 2 + abs(c[2 * i + 1] - a[2 * j + 1]) ** 2) ** 0.5\n            if last > min_so_far:\n                continue\n            for k in range(o):\n                current = last + (abs(e[2 * k] - a[2 * j]) ** 2 + abs(e[2 * k + 1] - a[2 * j + 1]) ** 2) ** 0.5\n                if current < min_so_far:\n                    min_so_far = current\n    print(min_so_far)", "import math\nt = int(input())\nfor i in range(t):\n    (x, y) = input().split(' ')\n    x = int(x)\n    y = int(y)\n    inp = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    total1 = 100000000000000\n    for j in range(0, 2 * inp[0], 2):\n        dis1 = math.sqrt((x - n[j]) * (x - n[j]) + (y - n[j + 1]) * (y - n[j + 1]))\n        a = n[j]\n        b = n[j + 1]\n        if dis1 < total1 and dis1 < 10000000000 and (a < 1000000000) and (b < 1000000000):\n            for l in range(0, 2 * inp[1], 2):\n                dis2 = math.sqrt((a - m[l]) * (a - m[l]) + (b - m[l + 1]) * (b - m[l + 1]))\n                c = m[l]\n                d = m[l + 1]\n                if dis2 < total1 and dis2 < 10000000000 and (dis1 + dis2 < total1):\n                    for p in range(0, 2 * inp[2], 2):\n                        dis = math.sqrt((c - k[p]) * (c - k[p]) + (d - k[p + 1]) * (d - k[p + 1]))\n                        if dis + dis1 + dis2 < total1:\n                            total1 = dis + dis1 + dis2\n    total2 = 10000000000000\n    for j in range(0, 2 * inp[1], 2):\n        dis1 = math.sqrt((x - m[j]) * (x - m[j]) + (y - m[j + 1]) * (y - m[j + 1]))\n        c1 = m[j]\n        d1 = m[j + 1]\n        if dis1 < total2 and dis1 < total1 and (dis1 < 10000000000):\n            for l in range(0, 2 * inp[0], 2):\n                dis2 = math.sqrt((c1 - n[l]) * (c1 - n[l]) + (d1 - n[l + 1]) * (d1 - n[l + 1]))\n                a1 = n[l]\n                b1 = n[l + 1]\n                if dis2 < total2 and dis2 < total1 and (dis2 < 10000000000) and (dis1 + dis2 < total2):\n                    for p in range(0, 2 * inp[2], 2):\n                        dis = math.sqrt((a1 - k[p]) * (a1 - k[p]) + (b1 - k[p + 1]) * (b1 - k[p + 1]))\n                        if dis + dis1 + dis2 < total2:\n                            total2 = dis + dis1 + dis2\n    if total1 < total2:\n        print(total1)\n    else:\n        print(total2)", "import math\nt = int(input())\nfor i in range(t):\n    (x, y) = input().split(' ')\n    x = int(x)\n    y = int(y)\n    inp = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    total1 = 100000000000000\n    for j in range(0, 2 * inp[0], 2):\n        dis1 = math.sqrt((x - n[j]) * (x - n[j]) + (y - n[j + 1]) * (y - n[j + 1]))\n        a = n[j]\n        b = n[j + 1]\n        if dis1 < total1 and dis1 < 10000000000 and (a < 1000000000) and (b < 1000000000):\n            for l in range(0, 2 * inp[1], 2):\n                dis2 = math.sqrt((a - m[l]) * (a - m[l]) + (b - m[l + 1]) * (b - m[l + 1]))\n                c = m[l]\n                d = m[l + 1]\n                if dis2 < total1 and dis2 < 10000000000 and (dis1 + dis2 < total1):\n                    for p in range(0, 2 * inp[2], 2):\n                        dis = math.sqrt((c - k[p]) * (c - k[p]) + (d - k[p + 1]) * (d - k[p + 1]))\n                        if dis + dis1 + dis2 < total1:\n                            total1 = dis + dis1 + dis2\n    total2 = 10000000000000\n    for j in range(0, 2 * inp[1], 2):\n        dis1 = math.sqrt((x - m[j]) * (x - m[j]) + (y - m[j + 1]) * (y - m[j + 1]))\n        c1 = m[j]\n        d1 = m[j + 1]\n        if dis1 < total2 and dis1 < total1 and (dis1 < 10000000000):\n            for l in range(0, 2 * inp[0], 2):\n                dis2 = math.sqrt((c1 - n[l]) * (c1 - n[l]) + (d1 - n[l + 1]) * (d1 - n[l + 1]))\n                a1 = n[l]\n                b1 = n[l + 1]\n                if dis2 < total2 and dis2 < total1 and (dis2 < 10000000000) and (dis1 + dis2 < total2):\n                    for p in range(0, 2 * inp[2], 2):\n                        dis = math.sqrt((a1 - k[p]) * (a1 - k[p]) + (b1 - k[p + 1]) * (b1 - k[p + 1]))\n                        if dis + dis1 + dis2 < total2:\n                            total2 = dis + dis1 + dis2\n    if total1 < total2:\n        print(total1)\n    else:\n        print(total2)", "def main():\n    from math import sqrt\n\n    def dist(x1, y1, x2, y2):\n        return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1))\n\n    def backdfs1(abd, cdd, efd, ans, sm, x, y, p):\n        if p == 3:\n            if sm < ans[0]:\n                ans[0] = sm\n            return\n        elif p == 0:\n            if sm >= ans[0]:\n                return\n            for i in range(len(abd)):\n                d = dist(x, y, abd[i][0], abd[i][1])\n                backdfs1(abd, cdd, efd, ans, sm + d, abd[i][0], abd[i][1], 1)\n        elif p == 1:\n            if sm >= ans[0]:\n                return\n            for i in range(len(cdd)):\n                d = dist(x, y, cdd[i][0], cdd[i][1])\n                backdfs1(abd, cdd, efd, ans, sm + d, cdd[i][0], cdd[i][1], 2)\n        elif p == 2:\n            if sm >= ans[0]:\n                return\n            for i in range(len(efd)):\n                d = dist(x, y, efd[i][0], efd[i][1])\n                backdfs1(abd, cdd, efd, ans, sm + d, efd[i][0], efd[i][1], 3)\n\n    def backdfs2(abd, cdd, efd, ans1, sm, x, y, p):\n        if p == 3:\n            if sm < ans1[0]:\n                ans1[0] = sm\n            return\n        elif p == 0:\n            if sm >= ans1[0]:\n                return\n            for i in range(len(cdd)):\n                d = dist(x, y, cdd[i][0], cdd[i][1])\n                backdfs2(abd, cdd, efd, ans1, sm + d, cdd[i][0], cdd[i][1], 1)\n        elif p == 1:\n            if sm >= ans1[0]:\n                return\n            for i in range(len(abd)):\n                d = dist(x, y, abd[i][0], abd[i][1])\n                backdfs2(abd, cdd, efd, ans1, sm + d, abd[i][0], abd[i][1], 2)\n        elif p == 2:\n            if sm >= ans1[0]:\n                return\n            for i in range(len(efd)):\n                d = dist(x, y, efd[i][0], efd[i][1])\n                backdfs2(abd, cdd, efd, ans1, sm + d, efd[i][0], efd[i][1], 3)\n    for _ in range(int(input().strip())):\n        (x, y) = map(int, input().strip().split())\n        (n, m, K) = map(int, input().strip().split())\n        ab = list(map(int, input().strip().split()))\n        cd = list(map(int, input().strip().split()))\n        ef = list(map(int, input().strip().split()))\n        abd = []\n        for i in range(0, 2 * n, 2):\n            abd.append([ab[i], ab[i + 1]])\n        cdd = []\n        for i in range(0, 2 * m, 2):\n            cdd.append([cd[i], cd[i + 1]])\n        efd = []\n        for i in range(0, 2 * K, 2):\n            efd.append([ef[i], ef[i + 1]])\n        ans = [1000000000000]\n        ans1 = [1000000000000]\n        backdfs1(abd, cdd, efd, ans, 0, x, y, 0)\n        backdfs2(abd, cdd, efd, ans1, 0, x, y, 0)\n        print(min(ans[0], ans1[0]))\nmain()", "for i in range(int(input())):\n    (x, y) = list(map(int, input().split()))\n    (n, m, k) = list(map(int, input().split()))\n    ab = []\n    cd = []\n    ef = []\n    a1b1 = list(map(int, input().split()))\n    i = 0\n    l = []\n    while i < 2 * n:\n        if i % 2 == 0:\n            l.append(a1b1[i])\n        else:\n            l.append(a1b1[i])\n            ab.append(l)\n            l = []\n        i += 1\n    c1d1 = list(map(int, input().split()))\n    i = 0\n    l = []\n    while i < 2 * m:\n        if i % 2 == 0:\n            l.append(c1d1[i])\n        else:\n            l.append(c1d1[i])\n            cd.append(l)\n            l = []\n        i += 1\n    e1f1 = list(map(int, input().split()))\n    i = 0\n    l = []\n    while i < 2 * k:\n        if i % 2 == 0:\n            l.append(e1f1[i])\n        else:\n            l.append(e1f1[i])\n            ef.append(l)\n            l = []\n        i += 1\n    ans = 10 ** 11\n    for i in ab:\n        d = 0\n        (a, b) = (i[0], i[1])\n        d1 = pow(pow(x - a, 2) + pow(y - b, 2), 0.5)\n        if d1 > ans:\n            continue\n        for j in cd:\n            d2 = d1\n            (c, d) = (j[0], j[1])\n            d2 += pow(pow(a - c, 2) + pow(b - d, 2), 0.5)\n            if d2 > ans:\n                continue\n            for k in ef:\n                d3 = d2\n                (e, f) = (k[0], k[1])\n                d3 += pow(pow(c - e, 2) + pow(d - f, 2), 0.5)\n                if d3 < ans:\n                    ans = d3\n    for i in cd:\n        d = 0\n        (c, d) = (i[0], i[1])\n        d1 = pow(pow(x - c, 2) + pow(y - d, 2), 0.5)\n        if d1 > ans:\n            continue\n        for j in ab:\n            d2 = d1\n            (a, b) = (j[0], j[1])\n            d2 += pow(pow(a - c, 2) + pow(b - d, 2), 0.5)\n            if d2 > ans:\n                continue\n            for k in ef:\n                d3 = d2\n                (e, f) = (k[0], k[1])\n                d3 += pow(pow(a - e, 2) + pow(b - f, 2), 0.5)\n                if d3 < ans:\n                    ans = d3\n    print(ans)", "from math import pow, sqrt\nfor _ in range(int(input())):\n    a1 = []\n    b1 = []\n    a2 = []\n    b2 = []\n    a3 = []\n    b3 = []\n    c = [1000000000000000]\n    (x, y) = map(int, input().split())\n    (n, m, k) = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    f = list(map(int, input().split()))\n    g = list(map(int, input().split()))\n    for i in range(len(e)):\n        if i % 2 == 0:\n            a1.append(e[i])\n        else:\n            b1.append(e[i])\n    for i in range(len(f)):\n        if i % 2 == 0:\n            a2.append(f[i])\n        else:\n            b2.append(f[i])\n    for i in range(len(g)):\n        if i % 2 == 0:\n            a3.append(g[i])\n        else:\n            b3.append(g[i])\n    for i in range(len(a1)):\n        x1 = pow(x - a1[i], 2)\n        y1 = pow(y - b1[i], 2)\n        t = sqrt(x1 + y1)\n        if t < min(c):\n            for j in range(len(a2)):\n                x1 = pow(a1[i] - a2[j], 2)\n                y1 = pow(b1[i] - b2[j], 2)\n                t1 = sqrt(x1 + y1)\n                if t + t1 < min(c):\n                    for k in range(len(a3)):\n                        l = 0\n                        x1 = pow(a2[j] - a3[k], 2)\n                        y1 = pow(b2[j] - b3[k], 2)\n                        t2 = sqrt(x1 + y1)\n                        l = t + t1 + t2\n                        if l < min(c):\n                            c.append(l)\n    for i in range(len(a2)):\n        x1 = pow(x - a2[i], 2)\n        y1 = pow(y - b2[i], 2)\n        t = sqrt(x1 + y1)\n        if t < min(c):\n            for j in range(len(a1)):\n                x1 = pow(a2[i] - a1[j], 2)\n                y1 = pow(b2[i] - b1[j], 2)\n                t1 = sqrt(x1 + y1)\n                if t + t1 < min(c):\n                    for k in range(len(a3)):\n                        l = 0\n                        x1 = pow(a1[j] - a3[k], 2)\n                        y1 = pow(b1[j] - b3[k], 2)\n                        t2 = sqrt(x1 + y1)\n                        l = t + t1 + t2\n                        if l < min(c):\n                            c.append(l)\n    print(min(c))", "import math\n\ndef calculateDistance(x1, y1, x2, y2):\n    dist = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n    return dist\nfor i in range(int(input())):\n    (X, Y) = input().split()\n    x = int(X)\n    y = int(Y)\n    (N, M, K) = input().split()\n    n = int(N)\n    m = int(M)\n    k = int(K)\n    lst_n = list(map(int, input().split()))\n    lst_m = list(map(int, input().split()))\n    lst_k = list(map(int, input().split()))\n    min_n = 9999999999999999\n    min_m = 9999999999999999\n    for j in range(1, 2 * n, 2):\n        nn = calculateDistance(x, y, lst_n[j - 1], lst_n[j])\n        if nn > min_n:\n            continue\n        for a in range(1, 2 * m, 2):\n            mm = calculateDistance(lst_n[j - 1], lst_n[j], lst_m[a - 1], lst_m[a])\n            to = mm + nn\n            if to > min_n:\n                continue\n            for b in range(1, 2 * k, 2):\n                ans_n = to + calculateDistance(lst_m[a - 1], lst_m[a], lst_k[b - 1], lst_k[b])\n                if ans_n < min_n:\n                    min_n = ans_n\n    for a in range(1, 2 * m, 2):\n        mmm = calculateDistance(x, y, lst_m[a - 1], lst_m[a])\n        if mmm > min_m:\n            continue\n        for j in range(1, 2 * n, 2):\n            nnn = calculateDistance(lst_m[a - 1], lst_m[a], lst_n[j - 1], lst_n[j])\n            to_n = mmm + nnn\n            if to_n > min_m:\n                continue\n            for b in range(1, 2 * k, 2):\n                ans_m = to_n + calculateDistance(lst_n[j - 1], lst_n[j], lst_k[b - 1], lst_k[b])\n                if ans_m < min_m:\n                    min_m = ans_m\n    if min_n > min_m:\n        print(min_m)\n    else:\n        print(min_n)", "import math\n\ndef dis(x, y, x1, y1):\n    x = math.sqrt((x - x1) ** 2 + (y - y1) ** 2)\n    return x\nt = int(input())\nwhile t > 0:\n    (x, y) = input().split()\n    x = int(x)\n    y = int(y)\n    (n, m, k) = input().split()\n    n = int(n)\n    m = int(m)\n    k = int(k)\n    a = list(map(int, input().strip().split()))\n    b = list(map(int, input().strip().split()))\n    c = list(map(int, input().strip().split()))\n    m = 10 ** 20\n    m1 = 10 ** 20\n    for i in range(0, len(a) - 1, 2):\n        d1 = dis(x, y, a[i], a[i + 1])\n        if d1 > m:\n            continue\n        for j in range(0, len(b) - 1, 2):\n            d2 = dis(a[i], a[i + 1], b[j], b[j + 1])\n            d21 = d2 + d1\n            if d21 > m:\n                continue\n            for k in range(0, len(c) - 1, 2):\n                v = dis(b[j], b[j + 1], c[k], c[k + 1])\n                d3 = d1 + d2 + v\n                if (i == 0 and j == 0) and k == 0:\n                    m = d3\n                elif d3 > m:\n                    continue\n                elif m > d3:\n                    m = d3\n    for i in range(0, len(b) - 1, 2):\n        d1 = dis(x, y, b[i], b[i + 1])\n        if d1 > m:\n            continue\n        for j in range(0, len(a) - 1, 2):\n            d2 = dis(a[j], a[j + 1], b[i], b[i + 1])\n            d12 = d1 + d2\n            if d12 > m:\n                continue\n            for k in range(0, len(c) - 1, 2):\n                v = dis(a[j], a[j + 1], c[k], c[k + 1])\n                d3 = d1 + d2 + v\n                if d3 > m:\n                    continue\n                elif m > d3:\n                    m = d3\n    print(m)\n    t = t - 1", "t = int(input())\n\ndef dis(a, b):\n    return pow((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2, 0.5)\nwhile t > 0:\n    t -= 1\n    (x, y) = list(map(int, input().split()))\n    (n, m, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    A = []\n    for i in range(0, n):\n        A.append((a[2 * i], a[2 * i + 1]))\n    B = []\n    for i in range(0, m):\n        B.append((b[2 * i], b[2 * i + 1]))\n    C = []\n    for i in range(0, k):\n        C.append((c[2 * i], c[2 * i + 1]))\n    p = (x, y)\n    mn = dis(A[0], B[0]) + dis(p, A[0]) + dis(B[0], C[0])\n    for i in A:\n        dpi = dis(p, i)\n        if dpi < mn:\n            for j in B:\n                dpj = dis(p, j)\n                if dpj < mn:\n                    dij = dis(i, j)\n                    if dij + dpi < mn or dij + dpj < mn:\n                        for k in C:\n                            d = min(dpi + dis(j, k), dpj + dis(i, k)) + dij\n                            if mn > d:\n                                mn = d\n    print(mn)", "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\nfor _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    (len1, len2, len3) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l3 = list(map(int, input().split()))\n    m1 = 10000000000\n    md2 = 10000000000\n    c1 = 0\n    c2 = 0\n    a1 = 0\n    a2 = 0\n    m2 = 10000000000\n    m3 = 10000000000\n    md = 10000000000\n    for i in range(0, 2 * len1, 2):\n        m1 = distance(x, y, l1[i], l1[i + 1])\n        if m1 > md:\n            continue\n        for j in range(0, 2 * len2, 2):\n            m2 = m1 + distance(l1[i], l1[i + 1], l2[j], l2[j + 1])\n            if m2 > md:\n                continue\n            for k in range(0, 2 * len3, 2):\n                m3 = m2 + distance(l2[j], l2[j + 1], l3[k], l3[k + 1])\n                if m3 < md:\n                    md = m3\n    for i in range(0, 2 * len2, 2):\n        m1 = distance(x, y, l2[i], l2[i + 1])\n        if m1 > md2:\n            continue\n        for j in range(0, 2 * len1, 2):\n            m2 = m1 + distance(l2[i], l2[i + 1], l1[j], l1[j + 1])\n            if m2 > md2:\n                continue\n            for k in range(0, 2 * len3, 2):\n                m3 = m2 + distance(l1[j], l1[j + 1], l3[k], l3[k + 1])\n                if m3 < md2:\n                    md2 = m3\n    if md < md2:\n        print('{0:.10f}'.format(md))\n    else:\n        print('{0:.10f}'.format(md2))", "import math\nfor t in range(int(input())):\n    (x, y) = [float(i) for i in input().split()]\n    (n, m, k) = [int(i) for i in input().split()]\n    z = input().split()\n    (a, c, e) = ([], [], [])\n    for i in range(0, 2 * n, 2):\n        a.append((float(z[i]), float(z[i + 1])))\n    z = input().split()\n    for i in range(0, 2 * m, 2):\n        c.append((float(z[i]), float(z[i + 1])))\n    z = input().split()\n    for i in range(0, 2 * k, 2):\n        e.append((float(z[i]), float(z[i + 1])))\n    mini = -1\n    for i in a:\n        curri = math.sqrt((x - i[0]) ** 2 + (y - i[1]) ** 2)\n        if curri > mini and mini != -1:\n            continue\n        for j in c:\n            currj = curri + math.sqrt((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2)\n            if currj > mini and mini != -1:\n                continue\n            for l in e:\n                currk = currj + math.sqrt((j[0] - l[0]) ** 2 + (j[1] - l[1]) ** 2)\n                if currk > mini and mini != -1:\n                    continue\n                else:\n                    mini = currk\n    for i in c:\n        curri = math.sqrt((x - i[0]) ** 2 + (y - i[1]) ** 2)\n        if curri > mini:\n            continue\n        for j in a:\n            currj = curri + math.sqrt((i[0] - j[0]) ** 2 + (i[1] - j[1]) ** 2)\n            if currj > mini:\n                continue\n            for l in e:\n                currk = currj + math.sqrt((j[0] - l[0]) ** 2 + (j[1] - l[1]) ** 2)\n                if currk > mini:\n                    continue\n                else:\n                    mini = currk\n    print(mini)", "import math\nt = int(input())\nwhile t:\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    ab = list(map(int, input().split()))\n    cd = list(map(int, input().split()))\n    ef = list(map(int, input().split()))\n    m1 = float('inf')\n    m2 = float('inf')\n    d11 = []\n    d22 = []\n    for i in range(0, 2 * n, 2):\n        d1 = math.sqrt((x - ab[i]) ** 2 + (y - ab[i + 1]) ** 2)\n        if d1 >= m1:\n            continue\n        else:\n            for j in range(0, 2 * m, 2):\n                d2 = math.sqrt((ab[i] - cd[j]) ** 2 + (ab[i + 1] - cd[j + 1]) ** 2)\n                if d1 + d2 >= m1:\n                    continue\n                else:\n                    for l in range(0, 2 * k, 2):\n                        d3 = math.sqrt((cd[j] - ef[l]) ** 2 + (cd[j + 1] - ef[l + 1]) ** 2)\n                        m1 = min(m1, d1 + d2 + d3)\n    for i in range(0, 2 * m, 2):\n        d1 = math.sqrt((x - cd[i]) ** 2 + (y - cd[i + 1]) ** 2)\n        if d1 >= m2:\n            continue\n        else:\n            for j in range(0, 2 * n, 2):\n                d2 = math.sqrt((cd[i] - ab[j]) ** 2 + (cd[i + 1] - ab[j + 1]) ** 2)\n                if d1 + d2 >= m2:\n                    continue\n                else:\n                    for l in range(0, 2 * k, 2):\n                        d3 = math.sqrt((ab[j] - ef[l]) ** 2 + (ab[j + 1] - ef[l + 1]) ** 2)\n                        d22.append(d1 + d2 + d3)\n                        m2 = min(m2, d1 + d2 + d3)\n    print(round(min(m1, m2), 10))\n    t -= 1", "def find(x1, y1, x2, y2):\n    return math.sqrt((y2 - y1) ** 2 + (x2 - x1) ** 2)\nt = int(input())\nimport math\nwhile t:\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    i = 0\n    arr1 = []\n    arr2 = []\n    arr3 = []\n    while i < len(a):\n        arr1.append((a[i], a[i + 1]))\n        i += 2\n    i = 0\n    while i < len(c):\n        arr2.append((c[i], c[i + 1]))\n        i += 2\n    i = 0\n    while i < len(e):\n        arr3.append((e[i], e[i + 1]))\n        i += 2\n    minn = 10000000000000000000000000000\n    for i in range(len(arr1)):\n        (x1, y1) = arr1[i]\n        dis1 = find(x, y, x1, y1)\n        if dis1 > minn:\n            continue\n        for j in range(len(arr2)):\n            (x2, y2) = arr2[j]\n            dis2 = find(x1, y1, x2, y2)\n            if dis1 + dis2 > minn:\n                continue\n            for k in range(len(arr3)):\n                (x3, y3) = arr3[k]\n                dis3 = find(x2, y2, x3, y3)\n                if dis1 + dis2 + dis3 < minn:\n                    minn = dis1 + dis2 + dis3\n    for i in range(len(arr2)):\n        (x2, y2) = arr2[i]\n        dis1 = find(x, y, x2, y2)\n        if dis1 > minn:\n            continue\n        for j in range(len(arr1)):\n            (x1, y1) = arr1[j]\n            dis2 = find(x2, y2, x1, y1)\n            if dis1 + dis2 > minn:\n                continue\n            for k in range(len(arr3)):\n                (x3, y3) = arr3[k]\n                dis3 = find(x1, y1, x3, y3)\n                if dis1 + dis2 + dis3 < minn:\n                    minn = dis1 + dis2 + dis3\n    print(round(minn, 10))\n    t -= 1", "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\nt = int(input())\nwhile t:\n    t -= 1\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    tem = list(map(int, input().split()))\n    a = []\n    b = []\n    for i in range(0, 2 * n, 2):\n        a.append(tem[i])\n        b.append(tem[i + 1])\n    tem = list(map(int, input().split()))\n    c = []\n    d = []\n    for i in range(0, 2 * m, 2):\n        c.append(tem[i])\n        d.append(tem[i + 1])\n    tem = list(map(int, input().split()))\n    e = []\n    f = []\n    for i in range(0, 2 * k, 2):\n        e.append(tem[i])\n        f.append(tem[i + 1])\n    tilln = 0\n    tillm = 0\n    mink = 0\n    inmk1 = inmk2 = inmk3 = imnk1 = imnk2 = imnk3 = 0\n    ik2 = 0\n    minim = 1000000000000\n    for i in range(n):\n        inmk1 = distance(x, y, a[i], b[i])\n        if inmk1 > minim:\n            continue\n        for j in range(m):\n            imnk1 = distance(x, y, c[j], d[j])\n            ik2 = distance(a[i], b[i], c[j], d[j])\n            if imnk1 + ik2 > minim and inmk1 + ik2 > minim:\n                continue\n            for l in range(k):\n                minim = min(inmk1 + ik2 + distance(c[j], d[j], e[l], f[l]), minim, imnk1 + ik2 + distance(a[i], b[i], e[l], f[l]))\n    print('{:.10f}'.format(round(minim, 10)))", "def dist(x1, y1, x2, y2):\n    return ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5\n\ndef get_min_dist(x, y, n, m, k, n_arr, m_arr, k_arr):\n    n_coords = []\n    for i in range(0, 2 * n, 2):\n        n_coords.append((n_arr[i], n_arr[i + 1]))\n    m_coords = []\n    for i in range(0, 2 * m, 2):\n        m_coords.append((m_arr[i], m_arr[i + 1]))\n    k_coords = []\n    for i in range(0, 2 * k, 2):\n        k_coords.append((k_arr[i], k_arr[i + 1]))\n    min_start_n = dist(x, y, n_coords[0][0], n_coords[0][1]) + dist(n_coords[0][0], n_coords[0][1], m_coords[0][0], m_coords[0][1]) + dist(m_coords[0][0], m_coords[0][1], k_coords[0][0], k_coords[0][1])\n    for i in range(n):\n        d1 = dist(x, y, n_coords[i][0], n_coords[i][1])\n        if d1 < min_start_n:\n            for j in range(m):\n                d2 = dist(n_coords[i][0], n_coords[i][1], m_coords[j][0], m_coords[j][1])\n                if d1 + d2 < min_start_n:\n                    for l in range(k):\n                        d3 = dist(m_coords[j][0], m_coords[j][1], k_coords[l][0], k_coords[l][1])\n                        if d1 + d2 + d3 < min_start_n:\n                            min_start_n = d1 + d2 + d3\n    min_start_m = dist(x, y, m_coords[0][0], m_coords[0][1]) + dist(n_coords[0][0], n_coords[0][1], m_coords[0][0], m_coords[0][1]) + dist(n_coords[0][0], n_coords[0][1], k_coords[0][0], k_coords[0][1])\n    for i in range(m):\n        d1 = dist(x, y, m_coords[i][0], m_coords[i][1])\n        if d1 < min_start_m:\n            for j in range(n):\n                d2 = dist(n_coords[j][0], n_coords[j][1], m_coords[i][0], m_coords[i][1])\n                if d1 + d2 < min_start_m:\n                    for l in range(k):\n                        d3 = dist(n_coords[j][0], n_coords[j][1], k_coords[l][0], k_coords[l][1])\n                        if d1 + d2 + d3 < min_start_m:\n                            min_start_m = d1 + d2 + d3\n    return min(min_start_n, min_start_m)\nT = int(input())\nfor _ in range(T):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    n_arr = list(map(int, input().split()))\n    m_arr = list(map(int, input().split()))\n    k_arr = list(map(int, input().split()))\n    ans = get_min_dist(x, y, n, m, k, n_arr, m_arr, k_arr)\n    print(ans)", "import math\nfor _ in range(int(input())):\n    mn = math.inf\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    for i in range(n):\n        x1 = a[2 * i]\n        y1 = a[2 * i + 1]\n        lng1 = ((x - x1) ** 2 + (y - y1) ** 2) ** 0.5\n        if lng1 < mn:\n            for j in range(m):\n                x2 = b[2 * j]\n                y2 = b[2 * j + 1]\n                length1 = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 + lng1\n                if length1 <= mn:\n                    for ij in range(k):\n                        x3 = c[2 * ij]\n                        y3 = c[2 * ij + 1]\n                        length3 = length1 + ((x3 - x2) ** 2 + (y3 - y2) ** 2) ** 0.5\n                        mn = min(length3, mn)\n    for j in range(m):\n        x2 = b[2 * j]\n        y2 = b[2 * j + 1]\n        lng2 = ((x - x2) ** 2 + (y - y2) ** 2) ** 0.5\n        if lng2 < mn:\n            for i in range(n):\n                x1 = a[2 * i]\n                y1 = a[2 * i + 1]\n                length2 = ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5 + lng2\n                if length2 < mn:\n                    for ij in range(k):\n                        x3 = c[2 * ij]\n                        y3 = c[2 * ij + 1]\n                        length4 = length2 + ((x3 - x1) ** 2 + (y3 - y1) ** 2) ** 0.5\n                        mn = min(length4, mn)\n    print(mn)", "def distance(x, y):\n    return ((x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2) ** 0.5\nMAX = 10 ** 20\nt = int(input())\nfor _ in range(t):\n    (x, y) = map(int, input().split())\n    (n, m, k) = map(int, input().split())\n    nSetOfPoints = list(map(int, input().split()))\n    mSetOfPoints = list(map(int, input().split()))\n    kSetOfPoints = list(map(int, input().split()))\n    nSetOfPoints = [[nSetOfPoints[i], nSetOfPoints[i + 1]] for i in range(0, 2 * n, 2)]\n    mSetOfPoints = [[mSetOfPoints[i], mSetOfPoints[i + 1]] for i in range(0, 2 * m, 2)]\n    kSetOfPoints = [[kSetOfPoints[i], kSetOfPoints[i + 1]] for i in range(0, 2 * k, 2)]\n    (ans1, ans2, ans3, ans4) = (0, 0, 0, 0)\n    previousAnswer = MAX\n    for i in range(n):\n        ans1 = distance([x, y], nSetOfPoints[i])\n        if ans1 < previousAnswer:\n            for j in range(m):\n                ans2 = distance(nSetOfPoints[i], mSetOfPoints[j])\n                if ans1 + ans2 < previousAnswer:\n                    for h in range(k):\n                        ans3 = distance(mSetOfPoints[j], kSetOfPoints[h])\n                        if ans1 + ans2 + ans3 < previousAnswer:\n                            previousAnswer = ans1 + ans2 + ans3\n    for i in range(m):\n        ans1 = distance([x, y], mSetOfPoints[i])\n        if ans1 < previousAnswer:\n            for j in range(n):\n                ans2 = distance(mSetOfPoints[i], nSetOfPoints[j])\n                if ans1 + ans2 < previousAnswer:\n                    for h in range(k):\n                        ans3 = distance(nSetOfPoints[j], kSetOfPoints[h])\n                        if ans1 + ans2 + ans3 < previousAnswer:\n                            previousAnswer = ans1 + ans2 + ans3\n    print('%.10f' % previousAnswer)", "from math import sqrt\n\ndef distance(a, b):\n    return sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef getDistance(point, AB, CD, EF, N, M, K):\n    AB.sort(key=lambda x: distance(x, point))\n    CD.sort(key=lambda x: distance(x, point))\n    ans = 10 ** 10\n    for i in range(N):\n        firstdist = distance(point, AB[i])\n        if firstdist > ans:\n            break\n        CD_copy = CD[:]\n        CD_copy.sort(key=lambda x: distance(AB[i], x))\n        for j in range(min(15, M)):\n            seconddist = firstdist + distance(AB[i], CD_copy[j])\n            if seconddist > ans:\n                break\n            EF_copy = EF[:]\n            EF_copy.sort(key=lambda x: distance(CD_copy[j], x))\n            totaldist = seconddist + distance(CD_copy[j], EF_copy[0])\n            ans = min(totaldist, ans)\n    for i in range(M):\n        firstdist = distance(point, CD[i])\n        if firstdist > ans:\n            break\n        AB_copy = AB[:]\n        AB_copy.sort(key=lambda x: distance(CD[i], x))\n        for j in range(min(15, N)):\n            seconddist = firstdist + distance(CD[i], AB_copy[j])\n            if seconddist > ans:\n                break\n            EF_copy = EF[:]\n            EF_copy.sort(key=lambda x: distance(AB_copy[j], x))\n            totaldist = seconddist + distance(AB_copy[j], EF_copy[0])\n            ans = min(totaldist, ans)\n    return ans\nT = int(input().rstrip())\nfor _ in range(T):\n    point = tuple(map(int, input().rstrip().split()))\n    (N, M, K) = map(int, input().rstrip().split())\n    arr = list(map(int, input().rstrip().split()))\n    AB = [(arr[i], arr[i + 1]) for i in range(0, 2 * N, 2)]\n    arr = list(map(int, input().rstrip().split()))\n    CD = [(arr[i], arr[i + 1]) for i in range(0, 2 * M, 2)]\n    arr = list(map(int, input().rstrip().split()))\n    EF = [(arr[i], arr[i + 1]) for i in range(0, 2 * K, 2)]\n    print(getDistance(point, AB, CD, EF, N, M, K))", "from math import sqrt\n\ndef distance(a, b):\n    return sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef getDistance(point, AB, CD, EF, N, M, K):\n    AB.sort(key=lambda x: distance(x, point))\n    CD.sort(key=lambda x: distance(x, point))\n    ans = 10 ** 10\n    for i in range(N):\n        firstdist = distance(point, AB[i])\n        if firstdist > ans:\n            break\n        CD_copy = CD[:]\n        CD_copy.sort(key=lambda x: distance(AB[i], x))\n        for j in range(min(15, M)):\n            seconddist = firstdist + distance(AB[i], CD_copy[j])\n            EF_copy = EF[:]\n            EF_copy.sort(key=lambda x: distance(CD_copy[j], x))\n            totaldist = seconddist + distance(CD_copy[j], EF_copy[0])\n            ans = min(totaldist, ans)\n    for i in range(M):\n        firstdist = distance(point, CD[i])\n        if firstdist > ans:\n            break\n        AB_copy = AB[:]\n        AB_copy.sort(key=lambda x: distance(CD[i], x))\n        for j in range(min(15, N)):\n            seconddist = firstdist + distance(CD[i], AB_copy[j])\n            EF_copy = EF[:]\n            EF_copy.sort(key=lambda x: distance(AB_copy[j], x))\n            totaldist = seconddist + distance(AB_copy[j], EF_copy[0])\n            ans = min(totaldist, ans)\n    return ans\nT = int(input().rstrip())\nfor _ in range(T):\n    point = tuple(map(int, input().rstrip().split()))\n    (N, M, K) = map(int, input().rstrip().split())\n    arr = list(map(int, input().rstrip().split()))\n    AB = [(arr[i], arr[i + 1]) for i in range(0, 2 * N, 2)]\n    arr = list(map(int, input().rstrip().split()))\n    CD = [(arr[i], arr[i + 1]) for i in range(0, 2 * M, 2)]\n    arr = list(map(int, input().rstrip().split()))\n    EF = [(arr[i], arr[i + 1]) for i in range(0, 2 * K, 2)]\n    print(getDistance(point, AB, CD, EF, N, M, K))", "from math import sqrt\n\ndef distance(a, b):\n    return sqrt((a[0] - b[0]) ** 2 + (a[1] - b[1]) ** 2)\n\ndef getDistance(point, AB, CD, EF, N, M, K):\n    AB.sort(key=lambda x: distance(x, point))\n    CD.sort(key=lambda x: distance(x, point))\n    ans = 10 ** 10\n    for i in range(N):\n        firstdist = distance(point, AB[i])\n        if firstdist > ans:\n            break\n        CD_copy = CD[:]\n        CD_copy.sort(key=lambda x: distance(AB[i], x))\n        for j in range(min(20, M)):\n            seconddist = firstdist + distance(AB[i], CD_copy[j])\n            EF_copy = EF[:]\n            EF_copy.sort(key=lambda x: distance(CD_copy[j], x))\n            totaldist = seconddist + distance(CD_copy[j], EF_copy[0])\n            ans = min(totaldist, ans)\n    for i in range(M):\n        firstdist = distance(point, CD[i])\n        if firstdist > ans:\n            break\n        AB_copy = AB[:]\n        AB_copy.sort(key=lambda x: distance(CD[i], x))\n        for j in range(min(20, N)):\n            seconddist = firstdist + distance(CD[i], AB_copy[j])\n            EF_copy = EF[:]\n            EF_copy.sort(key=lambda x: distance(AB_copy[j], x))\n            totaldist = seconddist + distance(AB_copy[j], EF_copy[0])\n            ans = min(totaldist, ans)\n    return ans\nT = int(input().rstrip())\nfor _ in range(T):\n    point = tuple(map(int, input().rstrip().split()))\n    (N, M, K) = map(int, input().rstrip().split())\n    arr = list(map(int, input().rstrip().split()))\n    AB = [(arr[i], arr[i + 1]) for i in range(0, 2 * N, 2)]\n    arr = list(map(int, input().rstrip().split()))\n    CD = [(arr[i], arr[i + 1]) for i in range(0, 2 * M, 2)]\n    arr = list(map(int, input().rstrip().split()))\n    EF = [(arr[i], arr[i + 1]) for i in range(0, 2 * K, 2)]\n    print(getDistance(point, AB, CD, EF, N, M, K))"]