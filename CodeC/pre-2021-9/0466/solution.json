["import heapq as heap\n(n, m) = map(int, input().split())\nname_country = {}\nname = {}\ncountry = {}\nfor i in range(n):\n    (na, cou) = input().split()\n    name_country[na] = cou\nfor i in range(m):\n    s = input()\n    cou = name_country[s]\n    if s in name:\n        name[s] += 1\n    else:\n        name[s] = 1\n    if cou in country:\n        country[cou] += 1\n    else:\n        country[cou] = 1\n(countryWinner, chef) = ([], [])\nheap.heapify(countryWinner)\nheap.heapify(chef)\nfor (x, y) in name.items():\n    heap.heappush(chef, [-y, x])\nfor (x, y) in country.items():\n    heap.heappush(countryWinner, [-y, x])\nprint(heap.heappop(countryWinner)[1], heap.heappop(chef)[1], sep='\\n')", "(n, m) = map(int, input().split())\nname_country = {}\ncountrys = {}\nnames = {}\nfor i in range(n):\n    (name, country) = map(str, input().split())\n    name_country[name] = country\n    countrys[country] = 0\n    names[name] = 0\nfor i in range(m):\n    n = input()\n    names[n] += 1\n    countrys[name_country[n]] += 1\nchef = []\nci = []\nfor name in names:\n    c = (names[name], name)\n    chef.append(c)\n    ci.append(names[name])\nd = []\ndi = []\nfor country in countrys:\n    c = (countrys[country], country)\n    d.append(c)\n    di.append(countrys[country])\nchef.sort()\nci.sort()\nd.sort()\ndi.sort()\ni = di.index(d[-1][0])\nj = ci.index(chef[-1][0])\nprint(d[i][1])\nprint(chef[j][1])", "(n, k) = map(int, input().split())\ntop_chef = {}\ncontry = {}\ntop_cont = {}\nfor _ in range(n):\n    (chef, cont) = input().split()\n    contry[chef] = cont\nfor _ in range(k):\n    chef = input()\n    cont = contry[chef]\n    try:\n        top_chef[chef] += 1\n    except:\n        top_chef[chef] = 1\n    try:\n        top_cont[cont] += 1\n    except:\n        top_cont[cont] = 1\ncont_ans = sorted(list(top_cont.items()), key=lambda x: [-x[1], x[0]], reverse=True)\nchef_ans = sorted(list(top_chef.items()), key=lambda x: [-x[1], x[0]], reverse=True)\nprint(cont_ans[-1][0])\nprint(chef_ans[-1][0])", "(n, m) = map(int, input().split())\nchefcon = {}\ncon = {}\nchef = {}\nfor i in range(n):\n    s = input().split()\n    chefcon[s[0]] = s[1]\ncounmax = -1\nchefmax = -1\nfor i in range(m):\n    na = input()\n    country = chefcon[na]\n    if country not in con:\n        con[country] = 1\n    else:\n        con[country] += 1\n    counmax = max(counmax, con[country])\n    if na not in chef:\n        chef[na] = 1\n    else:\n        chef[na] += 1\n    chefmax = max(chefmax, chef[na])\ncontries = ''\nfor (k, v) in con.items():\n    if v == counmax:\n        if contries == '':\n            contries = k\n        elif k < contries:\n            contries = k\nprint(contries)\nchefs = ''\nfor (k, v) in chef.items():\n    if v == chefmax:\n        if chefs == '':\n            chefs = k\n        elif k < chefs:\n            chefs = k\nprint(chefs)", "(n, m) = map(int, input().split())\nchefcon = {}\ncon = {}\nchef = {}\nfor i in range(n):\n    s = input().split()\n    chefcon[s[0]] = s[1]\ncounmax = -1\nchefmax = -1\nfor i in range(m):\n    na = input()\n    country = chefcon[na]\n    if country not in con:\n        con[country] = 1\n    else:\n        con[country] += 1\n    counmax = max(counmax, con[country])\n    if na not in chef:\n        chef[na] = 1\n    else:\n        chef[na] += 1\n    chefmax = max(chefmax, chef[na])\ncontries = ''\nfor (k, v) in con.items():\n    if v == counmax:\n        if contries == '':\n            contries = k\n        elif k < contries:\n            contries = k\nprint(contries)\nchefs = ''\nfor (k, v) in chef.items():\n    if v == chefmax:\n        if chefs == '':\n            chefs = k\n        elif k < chefs:\n            chefs = k\nprint(chefs)", "(n, m) = map(int, input().split())\nchefcon = {}\ncon = {}\nchef = {}\nfor i in range(n):\n    s = input().split()\n    chefcon[s[0]] = s[1]\ncounmax = -1\nchefmax = -1\nfor i in range(m):\n    na = input()\n    country = chefcon[na]\n    if country not in con:\n        con[country] = 1\n    else:\n        con[country] += 1\n    counmax = max(counmax, con[country])\n    if na not in chef:\n        chef[na] = 1\n    else:\n        chef[na] += 1\n    chefmax = max(chefmax, chef[na])\ncontries = ''\nfor (k, v) in con.items():\n    if v == counmax:\n        if contries == '':\n            contries = k\n        elif k < contries:\n            contries = k\nprint(contries)\nchefs = ''\nfor (k, v) in chef.items():\n    if v == chefmax:\n        if chefs == '':\n            chefs = k\n        elif k < chefs:\n            chefs = k\nprint(chefs)", "(n, m) = map(int, input().split())\nname_country = {}\ncountrys = {}\nnames = {}\nfor i in range(n):\n    (name, country) = map(str, input().split())\n    name_country[name] = country\n    countrys[country] = 0\n    names[name] = 0\nfor i in range(m):\n    n = input()\n    names[n] += 1\n    countrys[name_country[n]] += 1\nchef = []\nci = []\nfor name in names:\n    c = (names[name], name)\n    chef.append(c)\n    ci.append(names[name])\nd = []\ndi = []\nfor country in countrys:\n    c = (countrys[country], country)\n    d.append(c)\n    di.append(countrys[country])\nchef.sort()\nci.sort()\nd.sort()\ndi.sort()\ni = di.index(d[-1][0])\nj = ci.index(chef[-1][0])\nprint(d[i][1])\nprint(chef[j][1])", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().split())\ncd = {}\npd = {}\nc = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    cd[chef] = country\nfor i in range(m):\n    n = input()\n    pd[n] = pd.get(n, 0) + 1\n    co = cd[n]\n    c[co] = c.get(co, 0) + 1\nc = sorted(c.items(), key=lambda x: (-x[1], x[0]))\npd = sorted(pd.items(), key=lambda x: (-x[1], x[0]))\nprint(c[0][0])\nprint(pd[0][0])", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().split())\nchef_map = {}\ncoun_map = {}\nfor i in range(n):\n    (chef, coun) = map(str, input().split())\n    chef_map[chef] = [0, coun]\n    coun_map[coun] = 0\nfor mail in range(m):\n    c = str(input())\n    chef_map[c][0] += 1\n    coun_map[chef_map[c][1]] += 1\ncoun_map = dict(sorted(coun_map.items(), key=lambda x: x[0], reverse=True))\ncoun_map = dict(sorted(coun_map.items(), key=lambda x: x[1]))\nchef_map = dict(sorted(chef_map.items(), key=lambda x: x[0], reverse=True))\nchef_map = dict(sorted(chef_map.items(), key=lambda x: x[1][0]))\nx = list(coun_map.items())[-1]\ny = list(chef_map.items())[-1]\nprint(x[0])\nprint(y[0])", "(n, m) = map(int, input().split())\nchef_map = {}\ncoun_map = {}\nfor i in range(n):\n    (chef, coun) = map(str, input().split())\n    chef_map[chef] = [0, coun]\n    coun_map[coun] = 0\nfor mail in range(m):\n    c = str(input())\n    chef_map[c][0] += 1\n    coun_map[chef_map[c][1]] += 1\ncoun_map = dict(sorted(coun_map.items(), key=lambda x: x[0], reverse=True))\ncoun_map = dict(sorted(coun_map.items(), key=lambda x: x[1]))\nchef_map = dict(sorted(chef_map.items(), key=lambda x: x[0], reverse=True))\nchef_map = dict(sorted(chef_map.items(), key=lambda x: x[1][0]))\nx = list(coun_map.items())[-1]\ny = list(chef_map.items())[-1]\nprint(x[0])\nprint(y[0])", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().split())\nchef_map = {}\ncoun_map = {}\nfor i in range(n):\n    (chef, coun) = map(str, input().split())\n    chef_map[chef] = [0, coun]\n    coun_map[coun] = 0\nfor mail in range(m):\n    c = str(input())\n    chef_map[c][0] += 1\n    coun_map[chef_map[c][1]] += 1\ncoun_map = dict(sorted(coun_map.items(), key=lambda x: x[0], reverse=True))\ncoun_map = dict(sorted(coun_map.items(), key=lambda x: x[1]))\nchef_map = dict(sorted(chef_map.items(), key=lambda x: x[0], reverse=True))\nchef_map = dict(sorted(chef_map.items(), key=lambda x: x[1][0]))\nx = list(coun_map.items())[-1]\ny = list(chef_map.items())[-1]\nprint(x[0])\nprint(y[0])", "(n, k) = map(int, input().split())\n(l, r, s) = ({}, {}, {})\nfor _ in range(n):\n    (a, b) = map(str, input().split())\n    l[a] = b\nfor i in range(k):\n    j = input()\n    if j in r:\n        r[j] += 1\n    else:\n        r[j] = 1\n    if l[j] in s:\n        s[l[j]] += 1\n    else:\n        s[l[j]] = 1\n(a, b) = (max(s.values()), max(r.values()))\nprint(min((x for x in s if s[x] == a)))\nprint(min((x for x in r if r[x] == b)))", "(a, b) = map(int, input().split())\nd = {}\nfor i in range(a):\n    (name, country) = input().split()\n    d[name] = country\nd1 = {}\nd2 = {}\nfor i in range(b):\n    vote = input()\n    if vote in d1:\n        d1[vote] += 1\n    else:\n        d1[vote] = 1\n    if d[vote] in d2:\n        d2[d[vote]] += 1\n    else:\n        d2[d[vote]] = 1\nm1 = max(d2.values())\nm2 = max(d1.values())\nprint(min((x for x in d2 if d2[x] == m1)))\nprint(min((x for x in d1 if d1[x] == m2)))", "import os, sys, io, math\nfrom array import array\nfrom math import *\nfrom bisect import *\nfrom heapq import *\nfrom functools import *\nfrom itertools import *\nfrom collections import Counter, defaultdict\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n(n, k) = map(int, input().split())\n(l, r, s) = ({}, {}, {})\nfor _ in range(n):\n    (a, b) = map(str, input().split())\n    l[a] = b\nfor i in range(k):\n    j = IS()\n    if j in r:\n        r[j] += 1\n    else:\n        r[j] = 1\n    if l[j] in s:\n        s[l[j]] += 1\n    else:\n        s[l[j]] = 1\n(a, b) = (max(s.values()), max(r.values()))\nprint(min((x for x in s if s[x] == a)))\nprint(min((x for x in r if r[x] == b)))", "(n, m) = map(int, input().split())\ndic = {}\nfor i in range(n):\n    (x, y) = input().split()\n    dic[x] = y\nind = {}\ncount = {}\nfor i in range(m):\n    a = input()\n    if a in ind:\n        ind[a] += 1\n    else:\n        ind[a] = 1\n    if dic[a] in count:\n        count[dic[a]] += 1\n    else:\n        count[dic[a]] = 1\nm1 = max(count.values())\nm2 = max(ind.values())\nprint(min((x for x in count if count[x] == m1)))\nprint(min((x for x in ind if ind[x] == m2)))", "(n, m) = map(int, input().split())\ncache = {}\nfor i in range(n):\n    (x, y) = input().split()\n    cache[x] = y\nind = {}\ncount = {}\nfor i in range(m):\n    a = input()\n    if a in ind:\n        ind[a] += 1\n    else:\n        ind[a] = 1\n    if cache[a] in count:\n        count[cache[a]] += 1\n    else:\n        count[cache[a]] = 1\nm1 = max(count.values())\nm2 = max(ind.values())\nprint(min((x for x in count if count[x] == m1)))\nprint(min((x for x in ind if ind[x] == m2)))", "(n, m) = map(int, input().split())\ndic = {}\nfor i in range(n):\n    (x, y) = input().split()\n    dic[x] = y\nind = {}\ncount = {}\nfor i in range(m):\n    a = input()\n    if a in ind:\n        ind[a] += 1\n    else:\n        ind[a] = 1\n    if dic[a] in count:\n        count[dic[a]] += 1\n    else:\n        count[dic[a]] = 1\nm1 = max(count.values())\nm2 = max(ind.values())\nprint(min((x for x in count if count[x] == m1)))\nprint(min((x for x in ind if ind[x] == m2)))", "(n, m) = map(int, input().split())\ncache = {}\nfor i in range(n):\n    (x, y) = input().split()\n    cache[x] = y\nind = {}\ncount = {}\nfor i in range(m):\n    a = input()\n    if a in ind:\n        ind[a] += 1\n    else:\n        ind[a] = 1\n    if cache[a] in count:\n        count[cache[a]] += 1\n    else:\n        count[cache[a]] = 1\nm1 = max(count.values())\nm2 = max(ind.values())\nprint(min((x for x in count if count[x] == m1)))\nprint(min((x for x in ind if ind[x] == m2)))", "(n, m) = map(int, input().split())\ncache = {}\nfor i in range(n):\n    (x, y) = input().split()\n    cache[x] = y\nind = {}\ncount = {}\nfor i in range(m):\n    a = input()\n    if a in ind:\n        ind[a] += 1\n    else:\n        ind[a] = 1\n    if cache[a] in count:\n        count[cache[a]] += 1\n    else:\n        count[cache[a]] = 1\nm1 = max(count.values())\nm2 = max(ind.values())\nprint(min((x for x in count if count[x] == m1)))\nprint(min((x for x in ind if ind[x] == m2)))", "(n, m) = map(int, input().split())\ncache = {}\nfor i in range(n):\n    (x, y) = input().split()\n    cache[x] = y\nind = {}\ncount = {}\nfor i in range(m):\n    a = input()\n    if a in ind:\n        ind[a] += 1\n    else:\n        ind[a] = 1\n    if cache[a] in count:\n        count[cache[a]] += 1\n    else:\n        count[cache[a]] = 1\nprint(min((x for x in count if count[x] == max(count.values()))))\nprint(min((x for x in ind if ind[x] == max(ind.values()))))", "(n, m) = map(int, input().split())\ncache = {}\nfor i in range(n):\n    (x, y) = input().split()\n    cache[x] = y\nind = {x: 0 for x in cache}\ncount = {y: 0 for y in cache.values()}\nfor i in range(m):\n    a = input()\n    ind[a] += 1\n    count[cache[a]] += 1\nprint(min(list((x for x in count if count[x] == max(count.values())))))\nprint(min(list((x for x in ind if ind[x] == max(ind.values())))))", "(n, m) = map(int, input().split())\nchef_dict = {}\ncountry_dict = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    chef_dict[chef] = [country, 0]\n    country_dict[country] = 0\nfor i in range(m):\n    chef = input()\n    chef_dict[chef][1] += 1\n    country_dict[chef_dict[chef][0]] += 1\nans_country = ''\nans_chef = ''\nfor i in country_dict.keys():\n    if ans_country == '':\n        ans_country = i\n    elif country_dict[ans_country] < country_dict[i] or (country_dict[ans_country] == country_dict[i] and ans_country > i):\n        ans_country = i\nfor i in chef_dict.keys():\n    if ans_chef == '':\n        ans_chef = i\n    elif chef_dict[i][1] > chef_dict[ans_chef][1] or (chef_dict[i][1] == chef_dict[ans_chef][1] and ans_chef > i):\n        ans_chef = i\nprint(ans_country)\nprint(ans_chef)", "(n, m) = map(int, input().split())\nchef_dict = {}\ncountry_dict = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    chef_dict[chef] = [country, 0]\n    country_dict[country] = 0\nfor i in range(m):\n    chef = input()\n    chef_dict[chef][1] += 1\n    country_dict[chef_dict[chef][0]] += 1\nans_country = ''\nans_chef = ''\nfor i in country_dict.keys():\n    if ans_country == '':\n        ans_country = i\n    elif country_dict[ans_country] < country_dict[i] or (country_dict[ans_country] == country_dict[i] and ans_country > i):\n        ans_country = i\nfor i in chef_dict.keys():\n    if ans_chef == '':\n        ans_chef = i\n    elif chef_dict[i][1] > chef_dict[ans_chef][1] or (chef_dict[i][1] == chef_dict[ans_chef][1] and ans_chef > i):\n        ans_chef = i\nprint(ans_country)\nprint(ans_chef)", "(n, m) = map(int, input().split())\nd = {}\nfor _ in range(n):\n    (a, b) = input().split()\n    if b in d:\n        d[b].append(a)\n    else:\n        d.update({b: [a]})\nv = {}\nfor _ in range(m):\n    a = input()\n    if a in v:\n        v[a] += 1\n    else:\n        v.update({a: 1})\nd1 = {}\nfor i in d.keys():\n    x = 0\n    for j in d[i]:\n        if j in v:\n            x += v[j]\n    if x in d1:\n        d1[x].append(i)\n    else:\n        d1.update({x: [i]})\ns = sorted(d1, reverse=True)\nd1[s[0]].sort()\nprint(d1[s[0]][0])\nv1 = {}\nfor i in v.keys():\n    if v[i] in v1:\n        v1[v[i]].append(i)\n    else:\n        v1.update({v[i]: [i]})\ns1 = sorted(v1, reverse=True)\nv1[s1[0]].sort()\nprint(v1[s1[0]][0])", "(n, m) = [int(x) for x in input().split(' ')]\nd1 = {}\nfor _ in range(n):\n    (s1, s2) = [str(x) for x in input().split(' ')]\n    d1[s1] = s2\nd2 = {}\nd3 = {}\nfor _ in range(m):\n    s1 = input()\n    if d1[s1] in d2:\n        d2[d1[s1]] += 1\n    else:\n        d2[d1[s1]] = 1\n    if s1 in d3:\n        d3[s1] += 1\n    else:\n        d3[s1] = 1\ncon_vote = max(d2.values())\nchef_vote = max(d3.values())\ntemp = 'zzzzzzzzzzz'\nfor i in d2:\n    if d2[i] == con_vote and i < temp:\n        temp = i\nprint(temp)\ntemp = 'zzzzzzzzzzz'\nfor i in d3:\n    if d3[i] == chef_vote and i < temp:\n        temp = i\nprint(temp)", "(n, m) = [int(x) for x in input().split(' ')]\nd1 = {}\nfor _ in range(n):\n    (s1, s2) = [str(x) for x in input().split(' ')]\n    d1[s1] = s2\nd2 = {}\nd3 = {}\nfor _ in range(m):\n    s1 = input()\n    if d1[s1] in d2:\n        d2[d1[s1]] += 1\n    else:\n        d2[d1[s1]] = 1\n    if s1 in d3:\n        d3[s1] += 1\n    else:\n        d3[s1] = 1\ncon_vote = max(d2.values())\nchef_vote = max(d3.values())\ntemp = 'zzzzzzzzzzz'\nfor i in d2:\n    if d2[i] == con_vote and i < temp:\n        temp = i\nprint(temp)\ntemp = 'zzzzzzzzzzz'\nfor i in d3:\n    if d3[i] == chef_vote and i < temp:\n        temp = i\nprint(temp)", "(n, m) = [int(x) for x in input().split(' ')]\nd1 = {}\nfor _ in range(n):\n    (s1, s2) = [str(x) for x in input().split(' ')]\n    d1[s1] = s2\nd2 = {}\nd3 = {}\nfor _ in range(m):\n    s1 = input()\n    if d1[s1] in d2:\n        d2[d1[s1]] += 1\n    else:\n        d2[d1[s1]] = 1\n    if s1 in d3:\n        d3[s1] += 1\n    else:\n        d3[s1] = 1\ncon_vote = max(d2.values())\nchef_vote = max(d3.values())\ntemp = 'zzzzzzzzzzz'\nfor i in d2:\n    if d2[i] == con_vote and i < temp:\n        temp = i\nprint(temp)\ntemp = 'zzzzzzzzzzz'\nfor i in d3:\n    if d3[i] == chef_vote and i < temp:\n        temp = i\nprint(temp)", "def solver(input_dict):\n    sorted_d_by_keys = {k: v for (k, v) in sorted(input_dict.items(), key=lambda item: item[0])}\n    return list({k: v for (k, v) in sorted(sorted_d_by_keys.items(), key=lambda item: item[1], reverse=True)}.keys())[0]\n(n, m) = map(int, input().split())\nd_of_chefs_and_nationalities = {}\nd_of_votes_to_chefs = {}\nd_of_votes_to_countries = {}\nfor i in range(n):\n    (chef, nation) = input().split()\n    d_of_chefs_and_nationalities[chef] = nation\n    d_of_votes_to_chefs[chef] = 0\n    d_of_votes_to_countries[nation] = 0\nfor i in range(m):\n    chef_voted = input()\n    d_of_votes_to_chefs[chef_voted] += 1\n    d_of_votes_to_countries[d_of_chefs_and_nationalities[chef_voted]] += 1\nprint(solver(d_of_votes_to_countries))\nprint(solver(d_of_votes_to_chefs))", "def solver(input_dict):\n    sorted_d_by_keys = {k: v for (k, v) in sorted(input_dict.items(), key=lambda item: item[0])}\n    return list({k: v for (k, v) in sorted(sorted_d_by_keys.items(), key=lambda item: item[1], reverse=True)}.keys())[0]\n(n, m) = map(int, input().split())\nd_of_chefs_and_nationalities = {}\nd_of_votes_to_chefs = {}\nd_of_votes_to_countries = {}\nfor i in range(n):\n    (chef, nation) = input().split()\n    d_of_chefs_and_nationalities[chef] = nation\n    d_of_votes_to_chefs[chef] = 0\n    d_of_votes_to_countries[nation] = 0\nfor i in range(m):\n    chef_voted = input()\n    d_of_votes_to_chefs[chef_voted] += 1\n    d_of_votes_to_countries[d_of_chefs_and_nationalities[chef_voted]] += 1\nprint(solver(d_of_votes_to_countries))\nprint(solver(d_of_votes_to_chefs))", "(n, m) = map(int, input().split())\nd1 = {}\nfor i in range(n):\n    (x, y) = map(str, input().split())\n    d1[x] = [0, y]\nfor i in range(m):\n    x = input()\n    d1[x][0] += 1\nans = [0, 'zzzzzzzzzzzz']\nans2 = {}\nfor i in d1:\n    if d1[i][0] > ans[0]:\n        ans[0] = d1[i][0]\n        ans[1] = i\n    elif int(d1[i][0]) == int(ans[0]):\n        if i < ans[1]:\n            ans[1] = i\n    if d1[i][1] in ans2:\n        ans2[d1[i][1]] += d1[i][0]\n    else:\n        ans2[d1[i][1]] = d1[i][0]\ncans = [0, 'zzzzzzzzzzzz']\nfor i in ans2:\n    if ans2[i] > cans[0]:\n        cans[0] = ans2[i]\n        cans[1] = i\n    elif ans2[i] == cans[0] and i < cans[1]:\n        cans[1] = i\nprint(cans[1])\nprint(ans[1])", "(n, m) = map(int, input().split())\nd1 = {}\nfor i in range(n):\n    (x, y) = map(str, input().split())\n    d1[x] = [0, y]\nfor i in range(m):\n    x = input()\n    d1[x][0] += 1\nans = [0, 'zzzzzzzzzzzz']\nans2 = {}\nfor i in d1:\n    if d1[i][0] > ans[0]:\n        ans[0] = d1[i][0]\n        ans[1] = i\n    elif int(d1[i][0]) == int(ans[0]):\n        if i < ans[1]:\n            ans[1] = i\n    if d1[i][1] in ans2:\n        ans2[d1[i][1]] += d1[i][0]\n    else:\n        ans2[d1[i][1]] = d1[i][0]\ncans = [0, 'zzzzzzzzzzzz']\nfor i in ans2:\n    if ans2[i] > cans[0]:\n        cans[0] = ans2[i]\n        cans[1] = i\n    elif ans2[i] == cans[0] and i < cans[1]:\n        cans[1] = i\nprint(cans[1])\nprint(ans[1])", "(n, m) = map(int, input().split())\nchef_info = dict()\ncvalue = dict()\ncovalue = dict()\ncountry_list = []\nfor i in range(n):\n    (chef_name, country) = map(str, input().split())\n    chef_info[chef_name] = country\n    cvalue[chef_name] = 0\n    covalue[country] = 0\nfor i in range(m):\n    s = input()\n    cvalue[s] += 1\n    covalue[chef_info[s]] += 1\nanswer1keys = [i for i in covalue]\nanswer1values = [covalue[i] for i in covalue]\nanswer2keys = [i for i in cvalue]\nanswer2values = [cvalue[i] for i in cvalue]\nanswer1 = []\nanswer2 = []\nfor i in range(len(answer1keys)):\n    answer1.append([answer1keys[i], answer1values[i]])\nfor i in range(len(answer2keys)):\n    answer2.append([answer2keys[i], answer2values[i]])\nanswer1.sort(key=lambda x: x[0])\nanswer1.sort(key=lambda x: x[1], reverse=True)\nanswer2.sort(key=lambda x: x[0])\nanswer2.sort(key=lambda x: x[1], reverse=True)\nprint(answer1[0][0])\nprint(answer2[0][0])", "(a, b) = map(int, input().split())\nd = {}\nfor i in range(a):\n    (che, cou) = input().split()\n    d.update({che: cou})\nch = {}\nco = {}\nfor i in range(b):\n    q = input()\n    if q in ch.keys():\n        ch.update({q: ch[q] + 1})\n    else:\n        ch.update({q: 1})\n    s = d[q]\n    if s in co.keys():\n        co.update({s: co[s] + 1})\n    else:\n        co.update({s: 1})\nma = 0\nh = {}\no = {}\nfor (i, j) in ch.items():\n    if j > ma:\n        h.clear()\n        h.update({j: [i]})\n        ma = j\n    elif j == ma:\n        h[j].append(i)\n        h[j].sort()\nmaa = 0\nfor (i, j) in co.items():\n    if j > maa:\n        o.clear()\n        o.update({j: [i]})\n        maa = j\n    elif j == maa:\n        o[j].append(i)\n        o[j].sort()\nfor i in o.values():\n    print(i[0])\nfor i in h.values():\n    print(i[0])", "(a, b) = map(int, input().split())\nd = {}\nfor i in range(a):\n    (che, cou) = input().split()\n    d.update({che: cou})\nch = {}\nco = {}\nfor i in range(b):\n    q = input()\n    if q in ch.keys():\n        ch.update({q: ch[q] + 1})\n    else:\n        ch.update({q: 1})\n    s = d[q]\n    if s in co.keys():\n        co.update({s: co[s] + 1})\n    else:\n        co.update({s: 1})\nma = 0\nh = {}\no = {}\nfor (i, j) in ch.items():\n    if j > ma:\n        h.clear()\n        h.update({j: [i]})\n        ma = j\n    elif j == ma:\n        h[j].append(i)\n        h[j].sort()\nmaa = 0\nfor (i, j) in co.items():\n    if j > maa:\n        o.clear()\n        o.update({j: [i]})\n        maa = j\n    elif j == maa:\n        o[j].append(i)\n        o[j].sort()\nfor i in o.values():\n    print(i[0])\nfor i in h.values():\n    print(i[0])", "(n, m) = map(int, input().split())\nd1 = {}\nfor i in range(n):\n    (x, y) = map(str, input().split())\n    d1[x] = [0, y]\nfor i in range(m):\n    x = input()\n    d1[x][0] += 1\nans = [0, 'zzzzzzzzzzzz']\nans2 = {}\nfor i in d1:\n    if d1[i][0] > ans[0]:\n        ans[0] = d1[i][0]\n        ans[1] = i\n    elif int(d1[i][0]) == int(ans[0]):\n        if i < ans[1]:\n            ans[1] = i\n    if d1[i][1] in ans2:\n        ans2[d1[i][1]] += d1[i][0]\n    else:\n        ans2[d1[i][1]] = d1[i][0]\ncans = [0, 'zzzzzzzzzzzz']\nfor i in ans2:\n    if ans2[i] > cans[0]:\n        cans[0] = ans2[i]\n        cans[1] = i\n    elif ans2[i] == cans[0] and i < cans[1]:\n        cans[1] = i\nprint(cans[1])\nprint(ans[1])", "(n, m) = map(int, input().split())\ndict1 = {}\ndict2 = {}\ndict3 = {}\np = []\nq = []\nfor j in range(n):\n    (x, y) = map(str, input().split())\n    dict1[x] = y\nfor j in range(m):\n    s = input()\n    if s not in dict2:\n        dict2[s] = 1\n    else:\n        dict2[s] += 1\n    o = dict1[s]\n    if o not in dict3:\n        dict3[o] = 1\n    else:\n        dict3[o] += 1\nr = 0\nb_chef = ''\nfor (k, i) in dict2.items():\n    if r < i:\n        r = i\n        b_chef = k\nfor (k, i) in dict2.items():\n    if r == i:\n        p.append(k)\np.sort()\nl = 0\nb_c = ''\nfor (k, i) in dict3.items():\n    if l < i:\n        l = i\n        b_c = k\nfor (k, i) in dict3.items():\n    if l == i:\n        q.append(k)\nq.sort()\nprint(q[0])\nprint(p[0])", "from collections import Counter\n(n, m) = map(int, input().split())\nd = dict()\nfor _ in range(n):\n    (x, y) = input().split()\n    d[x] = y\nsci = [input() for _ in range(m)]\ncou = [d[i] for i in sci]\n(cs, cc) = (Counter(sci), Counter(cou))\n(ms, mc) = (cs.most_common(1)[0][1], cc.most_common(1)[0][1])\n(s, c) = ([], [])\nfor (k, v) in cs.items():\n    if v == ms:\n        s.append(k)\nfor (k, v) in cc.items():\n    if v == mc:\n        c.append(k)\ns.sort()\nc.sort()\nprint(c[0])\nprint(s[0])", "from collections import Counter\n(n, m) = map(int, input().split())\nd = dict()\nfor _ in range(n):\n    (x, y) = input().split()\n    d[x] = y\nsci = [input() for _ in range(m)]\ncou = [d[i] for i in sci]\n(cs, cc) = (Counter(sci), Counter(cou))\n(ms, mc) = (cs.most_common(1)[0][1], cc.most_common(1)[0][1])\n(s, c) = ([], [])\nfor (k, v) in cs.items():\n    if v == ms:\n        s.append(k)\nfor (k, v) in cc.items():\n    if v == mc:\n        c.append(k)\ns.sort()\nc.sort()\nprint(c[0])\nprint(s[0])", "(n, m) = map(int, input().strip().split())\na = {}\nfor _ in range(n):\n    (r, s) = input().strip().split()\n    a.update({r: s})\nd1 = dict.fromkeys(sorted([a[i] for i in a]), 0)\nd2 = dict.fromkeys(sorted([i for i in a]), 0)\nfor i in range(m):\n    r = input().strip()\n    d1[a[r]] += 1\n    d2[r] += 1\nr = max(d1, key=d1.get)\ns = max(d2, key=d2.get)\nprint(r)\nprint(s)", "(n, m) = map(int, input().strip().split())\na = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    a.update({p: q})\nd1 = dict.fromkeys(sorted([a[i] for i in a]), 0)\nd2 = dict.fromkeys(sorted([i for i in a]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[a[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().split())\nd = {}\nfor i in range(n):\n    (ch, co) = input().split()\n    d[ch] = co\ndch = dict.fromkeys(sorted([i for i in d]), 0)\ndco = dict.fromkeys(sorted([d[i] for i in d]), 0)\nfor i in range(m):\n    ans = input()\n    dch[ans] += 1\n    dco[d[ans]] += 1\nprint(max(dco, key=dco.get))\nprint(max(dch, key=dch.get))", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    (n, m) = rv(int)\n    ch_con = {}\n    con = dd(int)\n    ch = dd(int)\n    for _ in range(n):\n        x = ra(str)\n        ch_con[x[0]] = x[1]\n    for _ in range(m):\n        x = rs()\n        ch[x] += 1\n        con[ch_con[x]] += 1\n    country = 'zzzzzzzzzz'\n    c = 0\n    for i in con:\n        if con[i] > c:\n            country = i\n            c = con[i]\n        elif con[i] == c:\n            if i < country:\n                country = i\n    chef = 'zzzzzzzzzz'\n    c = 0\n    for i in ch:\n        if ch[i] > c:\n            chef = i\n            c = ch[i]\n        elif ch[i] == c:\n            if i < chef:\n                chef = i\n    print(country)\n    print(chef)\nmain()", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (r, q) = input().strip().split()\n    d.update({r: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    r = input().strip()\n    d1[d[r]] += 1\n    d2[r] += 1\nr = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(r)\nprint(q)", "(n, m) = map(int, input().strip().split())\na = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    a.update({p: q})\nd1 = dict.fromkeys(sorted([a[i] for i in a]), 0)\nd2 = dict.fromkeys(sorted([i for i in a]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[a[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "from sys import stdin\nfrom math import log, floor, ceil, gcd\nfrom collections import defaultdict as dd\ninput = stdin.readline\ninp = lambda : int(stdin.readline())\nrs = lambda : stdin.readline().strip()\n\ndef ra(typ):\n    return list(map(typ, stdin.readline().split()))\n\ndef rv(typ):\n    return map(typ, stdin.readline().split())\n\ndef main():\n    (n, m) = rv(int)\n    ch_con = {}\n    con = dd(int)\n    ch = dd(int)\n    for _ in range(n):\n        x = ra(str)\n        ch_con[x[0]] = x[1]\n    for _ in range(m):\n        x = rs()\n        ch[x] += 1\n        con[ch_con[x]] += 1\n    country = 'zzzzzzzzzz'\n    c = 0\n    for i in con:\n        if con[i] > c:\n            country = i\n            c = con[i]\n        elif con[i] == c:\n            if i < country:\n                country = i\n    chef = 'zzzzzzzzzz'\n    c = 0\n    for i in ch:\n        if ch[i] > c:\n            chef = i\n            c = ch[i]\n        elif ch[i] == c:\n            if i < chef:\n                chef = i\n    print(country)\n    print(chef)\nmain()", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "d = {}\n(n, m) = map(int, input().split())\nfor i in range(0, n):\n    (chef, country) = input().split()\n    d[chef] = country\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nfor i in range(0, m):\n    mail = input()\n    d2[mail] += 1\n    d1[d[mail]] += 1\nans1 = max(d1, key=d1.get)\nans2 = max(d2, key=d2.get)\nprint(ans1)\nprint(ans2)", "d = {}\n(n, m) = map(int, input().split())\nfor i in range(0, n):\n    (chef, country) = input().split()\n    d[chef] = country\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nfor i in range(0, m):\n    mail = input()\n    d2[mail] += 1\n    d1[d[mail]] += 1\nans1 = max(d1, key=d1.get)\nans2 = max(d2, key=d2.get)\nprint(ans1)\nprint(ans2)", "(n, m) = map(int, input().split())\ncd = {}\npd = {}\nc = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    cd[chef] = country\nfor i in range(m):\n    name = input()\n    pd[name] = pd.get(name, 0) + 1\n    co = cd[name]\n    c[co] = c.get(co, 0) + 1\nc = sorted(c.items(), key=lambda x: (-x[1], x[0]))\npd = sorted(pd.items(), key=lambda x: (-x[1], x[0]))\nprint(c[0][0])\nprint(pd[0][0])", "(n, m) = map(int, input().split())\ncd = {}\npd = {}\nc = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    cd[chef] = country\nfor i in range(m):\n    name = input()\n    pd[name] = pd.get(name, 0) + 1\n    co = cd[name]\n    c[co] = c.get(co, 0) + 1\nc = sorted(c.items(), key=lambda x: (-x[1], x[0]))\npd = sorted(pd.items(), key=lambda x: (-x[1], x[0]))\nprint(c[0][0])\nprint(pd[0][0])", "(n, m) = map(int, input().split())\ncd = {}\npd = {}\nc = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    cd[chef] = country\nfor i in range(m):\n    name = input()\n    pd[name] = pd.get(name, 0) + 1\n    co = cd[name]\n    c[co] = c.get(co, 0) + 1\nc = sorted(c.items(), key=lambda x: (-x[1], x[0]))\npd = sorted(pd.items(), key=lambda x: (-x[1], x[0]))\nprint(c[0][0])\nprint(pd[0][0])", "(n, m) = map(int, input().split())\ncd = {}\npd = {}\nc = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    cd[chef] = country\nfor i in range(m):\n    name = input()\n    pd[name] = pd.get(name, 0) + 1\n    co = cd[name]\n    c[co] = c.get(co, 0) + 1\nc = sorted(c.items(), key=lambda x: (-x[1], x[0]))\npd = sorted(pd.items(), key=lambda x: (-x[1], x[0]))\nprint(c[0][0])\nprint(pd[0][0])", "(n, m) = map(int, input().split())\ncd = {}\npd = {}\nc = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    cd[chef] = country\nfor i in range(m):\n    name = input()\n    pd[name] = pd.get(name, 0) + 1\n    co = cd[name]\n    c[co] = c.get(co, 0) + 1\nc = sorted(c.items(), key=lambda x: (-x[1], x[0]))\npd = sorted(pd.items(), key=lambda x: (-x[1], x[0]))\nprint(c[0][0])\nprint(pd[0][0])", "(n, m) = map(int, input().split())\ncd = {}\npd = {}\nc = {}\nfor i in range(n):\n    (chef, country) = input().split()\n    cd[chef] = country\nfor i in range(m):\n    name = input()\n    pd[name] = pd.get(name, 0) + 1\n    co = cd[name]\n    c[co] = c.get(co, 0) + 1\nc = sorted(c.items(), key=lambda x: (-x[1], x[0]))\npd = sorted(pd.items(), key=lambda x: (-x[1], x[0]))\nprint(c[0][0])\nprint(pd[0][0])", "(n, k) = map(int, input().split())\nl = []\nd = {}\ne = {}\np = {}\nfor i in range(n):\n    (s, pi) = map(str, input().split())\n    d[s] = pi\n    p[s] = 0\n    e[pi] = 0\nfor i in range(k):\n    s = input()\n    p[s] += 1\n    e[d[s]] += 1\nl = [(i, j) for (i, j) in p.items()]\nl.sort(key=lambda x: (x[1], x[0]))\np = [(i, j) for (i, j) in e.items()]\np.sort(key=lambda x: (x[1], x[0]))\nc1 = p[len(p) - 1][1]\nfor (i, j) in p:\n    if j == c1:\n        print(i)\n        break\nc1 = l[len(l) - 1][1]\nfor (i, k) in l:\n    if k == c1:\n        print(i)\n        break", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (x, y) = input().strip().split()\n    d.update({x: y})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    x = input().strip()\n    d1[d[x]] += 1\n    d2[x] += 1\nx = max(d1, key=d1.get)\ny = max(d2, key=d2.get)\nprint(x)\nprint(y)", "(n, k) = map(int, input().split())\nl = []\nd = {}\ne = {}\np = {}\nfor i in range(n):\n    (s, pi) = map(str, input().split())\n    d[s] = pi\n    p[s] = 0\n    e[pi] = 0\nfor i in range(k):\n    s = input()\n    p[s] += 1\n    e[d[s]] += 1\nl = [(i, j) for (i, j) in p.items()]\nl.sort(key=lambda x: (x[1], x[0]))\np = [(i, j) for (i, j) in e.items()]\np.sort(key=lambda x: (x[1], x[0]))\nc1 = p[len(p) - 1][1]\nfor (i, j) in p:\n    if j == c1:\n        print(i)\n        break\nc1 = l[len(l) - 1][1]\nfor (i, j) in l:\n    if j == c1:\n        print(i)\n        break", "(m, n) = map(int, input().split(' '))\n(d, chef, country) = ({}, {}, {})\nfor i in range(m):\n    (a, b) = input().split(' ')\n    d[a] = b\n    chef[a] = 0\n    country[b] = 0\nfor i in range(n):\n    x = input()\n    chef[x] = chef[x] + 1\n    country[d[x]] = country[d[x]] + 1\np = sorted(sorted(chef.items(), key=lambda x: x[0]), key=lambda x: x[1], reverse=True)\nq = sorted(sorted(country.items(), key=lambda x: x[0]), key=lambda x: x[1], reverse=True)\nprint(str(next(iter(q[0]))))\nprint(str(next(iter(p[0]))))", "(n, m) = map(int, input().split())\nd = {}\nfor i in range(0, n):\n    (chef, country) = input().split()\n    d[chef] = country\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nfor i in range(0, m):\n    mail = input()\n    d2[mail] = d2[mail] + 1\n    d1[d[mail]] += 1\nans1 = max(d1, key=d1.get)\nans2 = max(d2, key=d2.get)\nprint(ans1)\nprint(ans2)", "(n, m) = map(int, input().split())\nd = {}\nfor i in range(0, n):\n    (chef, country) = input().split()\n    d[chef] = country\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nfor i in range(0, m):\n    mail = input()\n    d2[mail] = d2[mail] + 1\n    d1[d[mail]] += 1\nans1 = max(d1, key=d1.get)\nans2 = max(d2, key=d2.get)\nprint(ans1)\nprint(ans2)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (x, y) = input().strip().split()\n    d.update({x: y})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    x = input().strip()\n    d1[d[x]] += 1\n    d2[x] += 1\nx = max(d1, key=d1.get)\ny = max(d2, key=d2.get)\nprint(x)\nprint(y)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (p, q) = input().strip().split()\n    d.update({p: q})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    p = input().strip()\n    d1[d[p]] += 1\n    d2[p] += 1\np = max(d1, key=d1.get)\nq = max(d2, key=d2.get)\nprint(p)\nprint(q)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (x, y) = input().strip().split()\n    d.update({x: y})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    x = input().strip()\n    d1[d[x]] += 1\n    d2[x] += 1\nx = max(d1, key=d1.get)\ny = max(d2, key=d2.get)\nprint(x)\nprint(y)", "(akank, pranava) = map(int, input().split())\nc_31809 = {}\nfor i in range(akank):\n    a = input().split()\n    c_31809[a[0]] = a[1]\nv = {}\ncon = {}\nfor i in range(pranava):\n    a = input()\n    if a in v:\n        v[a] += 1\n    else:\n        v[a] = 1\n    if c_31809[a] in con:\n        con[c_31809[a]] += 1\n    else:\n        con[c_31809[a]] = 1\nwc_31809 = sorted([i for i in v.keys() if v[i] == max(v.values())])\nwcon_31809 = sorted([i for i in con.keys() if con[i] == max(con.values())])\nprint(wcon_31809[0])\nprint(wc_31809[0])", "(m, n) = map(int, input().split())\nc = {}\nfor i in range(m):\n    a = input().split()\n    c[a[0]] = a[1]\nv = {}\ncon = {}\nfor i in range(n):\n    a = input()\n    if a in v:\n        v[a] += 1\n    else:\n        v[a] = 1\n    if c[a] in con:\n        con[c[a]] += 1\n    else:\n        con[c[a]] = 1\nwc = sorted([i for i in v.keys() if v[i] == max(v.values())])\nwcon = sorted([i for i in con.keys() if con[i] == max(con.values())])\nprint(wcon[0])\nprint(wc[0])", "import sys\n\ndef prin(a):\n    sys.stdout.write(str(a) + '\\n')\n\ndef input():\n    return sys.stdin.readline().strip()\n(a, b) = map(int, input().split())\ndis = {}\nd = {}\nc = {}\n(k, m) = (0, 0)\nfor i in range(a):\n    (g, h) = map(str, input().split())\n    dis[g] = h\nfor i in range(b):\n    s = input()\n    d.setdefault(dis[s], 0)\n    c.setdefault(s, 0)\n    d[dis[s]] += 1\n    c[s] += 1\n    if k < d[dis[s]]:\n        k = d[dis[s]]\n        g = dis[s]\n    if m < c[s]:\n        m = c[s]\n        h = s\nfor i in d:\n    if d[i] == k and i < g:\n        g = i\nfor i in c:\n    if c[i] == m and i < h:\n        h = i\nprint(g, h, sep='\\n')", "(a, b) = map(int, input().split())\nyy = {}\nx = {}\np = {}\nfor i in range(a):\n    y = input().split()\n    yy[y[0]] = y[1]\n    p[y[1]] = 0\nfor i in range(b):\n    y = input()\n    p[yy[y]] += 1\n    if y in x:\n        x[y] += 1\n    else:\n        x[y] = 1\ndd = x.values()\nq = []\nfor i in x:\n    if x[i] == max(dd):\n        q.append(i)\ndq = []\naa = max(p.values())\nfor i in p:\n    if p[i] == aa:\n        dq.append(i)\ndq.sort()\nprint(dq[0])\nq.sort()\nprint(q[0])", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (x, y) = input().strip().split()\n    d.update({x: y})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    x = input().strip()\n    d1[d[x]] += 1\n    d2[x] += 1\nx = max(d1, key=d1.get)\ny = max(d2, key=d2.get)\nprint(x)\nprint(y)", "a = {}\nb = {}\nc = {}\nindice1 = 0\nindice2 = 0\nvotoParziale = 0\n(N, M) = input().split()\nN = int(N)\nM = int(M)\nfor i in range(N):\n    (chiave, valore) = input().split()\n    a[chiave] = valore\n    b[chiave] = 0\n    c[valore] = 0\nfor i in range(M):\n    chef = input()\n    votoParziale = b[chef]\n    votoParziale += 1\n    b[chef] = votoParziale\nfor i in a.keys():\n    votoParziale = c[a[i]]\n    c[a[i]] = b[i] + votoParziale\nmass = b[list(a.keys())[0]]\nindice2 = list(a.keys())[0]\nfor chiave in a.keys():\n    if b[chiave] > mass:\n        indice2 = chiave\n        mass = b[chiave]\n    elif b[chiave] == mass:\n        if chiave < indice2:\n            indice2 = chiave\nmass = c[a[list(a.keys())[0]]]\nindice1 = list(c.keys())[0]\nfor chiave in c.keys():\n    if c[chiave] > mass:\n        indice1 = chiave\n        mass = c[chiave]\n    elif c[chiave] == mass:\n        if chiave < indice1:\n            indice1 = chiave\nprint(indice1)\nprint(indice2)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (x, y) = input().strip().split()\n    d.update({x: y})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    x = input().strip()\n    d1[d[x]] += 1\n    d2[x] += 1\nx = max(d1, key=d1.get)\ny = max(d2, key=d2.get)\nprint(x)\nprint(y)", "(y, m) = map(int, input().split())\nd = {}\nfor j in range(y):\n    (c, h) = input().split()\n    d[c] = h\nv = {}\nfor j in range(m):\n    c = input()\n    if c in v:\n        v[c] += 1\n    else:\n        v[c] = 1\ncv = {}\nw = 0\nfor j in v:\n    if d[j] in cv:\n        cv[d[j]] += v[j]\n    else:\n        cv[d[j]] = v[j]\n    if cv[d[j]] > w:\n        w = cv[d[j]]\n        wc = d[j]\n    elif cv[d[j]] == w:\n        if d[j] < wc:\n            wc = d[j]\nprint(wc)\nwv = 0\nfor j in v:\n    if v[j] > wv:\n        wv = v[j]\n        wc = j\n    elif v[j] == wv:\n        if j < wc:\n            wc = j\nprint(wc)", "(n, m) = map(int, input().strip().split())\nd = {}\nfor _ in range(n):\n    (x, y) = input().strip().split()\n    d.update({x: y})\nd1 = dict.fromkeys(sorted([d[i] for i in d]), 0)\nd2 = dict.fromkeys(sorted([i for i in d]), 0)\nfor i in range(m):\n    x = input().strip()\n    d1[d[x]] += 1\n    d2[x] += 1\nx = max(d1, key=d1.get)\ny = max(d2, key=d2.get)\nprint(x)\nprint(y)", "a = {}\nb = {}\nc = {}\nindice1 = 0\nindice2 = 0\nvotoParziale = 0\nk = 0\n(N, M) = input().split()\nN = int(N)\nM = int(M)\nfor i in range(N):\n    (chiave, valore) = input().split()\n    a[chiave] = valore\n    b[chiave] = 0\n    c[valore] = 0\nfor j in range(M):\n    chef = input()\n    votoParziale = b[chef]\n    votoParziale += 1\n    b[chef] = votoParziale\nfor i in a.keys():\n    votoParziale = c[a[i]]\n    c[a[i]] = b[i] + votoParziale\nmass = b[list(a.keys())[0]]\nindice2 = list(a.keys())[0]\nfor chiave in a.keys():\n    if b[chiave] > mass:\n        indice2 = chiave\n        mass = b[chiave]\n    elif b[chiave] == mass:\n        if chiave < indice2:\n            indice2 = chiave\nmass = c[a[list(a.keys())[0]]]\nindice1 = list(c.keys())[0]\nfor chiave in c.keys():\n    if c[chiave] > mass:\n        indice1 = chiave\n        mass = c[chiave]\n    elif c[chiave] == mass:\n        if chiave < indice1:\n            indice1 = chiave\nprint(indice1)\nprint(indice2)", "a = {}\nb = {}\nc = {}\nindice1 = 0\nindice2 = 0\nvotoParziale = 0\nk = 0\n(N, M) = input().split()\nN = int(N)\nM = int(M)\nfor i in range(N):\n    (chiave, valore) = input().split()\n    a[chiave] = valore\n    b[chiave] = 0\n    c[valore] = 0\nfor j in range(M):\n    chef = input()\n    votoParziale = b[chef]\n    votoParziale += 1\n    b[chef] = votoParziale\nfor i in a.keys():\n    votoParziale = c[a[i]]\n    c[a[i]] = b[i] + votoParziale\nmass = b[list(a.keys())[0]]\nindice2 = list(a.keys())[0]\nfor chiave in a.keys():\n    if b[chiave] > mass:\n        indice2 = chiave\n        mass = b[chiave]\n    elif b[chiave] == mass:\n        if chiave < indice2:\n            indice2 = chiave\nmass = c[a[list(a.keys())[0]]]\nindice1 = list(c.keys())[0]\nfor chiave in c.keys():\n    if c[chiave] > mass:\n        indice1 = chiave\n        mass = c[chiave]\n    elif c[chiave] == mass:\n        if chiave < indice1:\n            indice1 = chiave\nprint(indice1)\nprint(indice2)", "a = {}\nb = {}\nc = {}\nindice1 = 0\nindice2 = 0\nvotoParziale = 0\nk = 0\n(N, M) = input().split()\nN = int(N)\nM = int(M)\nfor i in range(N):\n    (chiave, valore) = input().split()\n    a[chiave] = valore\n    b[chiave] = 0\n    c[valore] = 0\nfor i in range(M):\n    chef = input()\n    votoParziale = b[chef]\n    votoParziale += 1\n    b[chef] = votoParziale\nfor i in a.keys():\n    votoParziale = c[a[i]]\n    c[a[i]] = b[i] + votoParziale\nmass = b[list(a.keys())[0]]\nindice2 = list(a.keys())[0]\nfor chiave in a.keys():\n    if b[chiave] > mass:\n        indice2 = chiave\n        mass = b[chiave]\n    elif b[chiave] == mass:\n        if chiave < indice2:\n            indice2 = chiave\nmass = c[a[list(a.keys())[0]]]\nindice1 = list(c.keys())[0]\nfor chiave in c.keys():\n    if c[chiave] > mass:\n        indice1 = chiave\n        mass = c[chiave]\n    elif c[chiave] == mass:\n        if chiave < indice1:\n            indice1 = chiave\nprint(indice1)\nprint(indice2)", "a = {}\nb = {}\nc = {}\nindice1 = 0\nindice2 = 0\nvotoParziale = 0\n(N, M) = input().split()\nN = int(N)\nM = int(M)\nfor i in range(N):\n    (chiave, valore) = input().split()\n    a[chiave] = valore\n    b[chiave] = 0\n    c[valore] = 0\nfor i in range(M):\n    chef = input()\n    votoParziale = b[chef]\n    votoParziale += 1\n    b[chef] = votoParziale\nfor i in a.keys():\n    votoParziale = c[a[i]]\n    c[a[i]] = b[i] + votoParziale\nmass = b[list(a.keys())[0]]\nindice2 = list(a.keys())[0]\nfor chiave in a.keys():\n    if b[chiave] > mass:\n        indice2 = chiave\n        mass = b[chiave]\n    elif b[chiave] == mass:\n        if chiave < indice2:\n            indice2 = chiave\nmass = c[a[list(a.keys())[0]]]\nindice1 = list(c.keys())[0]\nfor chiave in c.keys():\n    if c[chiave] > mass:\n        indice1 = chiave\n        mass = c[chiave]\n    elif c[chiave] == mass:\n        if chiave < indice1:\n            indice1 = chiave\nprint(indice1)\nprint(indice2)", "a = {}\nb = {}\nc = {}\nindice1 = 0\nindice2 = 0\nvotoParziale = 0\n(N, M) = input().split()\nN = int(N)\nM = int(M)\nfor i in range(N):\n    (chiave, valore) = input().split()\n    a[chiave] = valore\n    b[chiave] = 0\n    c[valore] = 0\nfor i in range(M):\n    chef = input()\n    votoParziale = b[chef]\n    votoParziale += 1\n    b[chef] = votoParziale\nfor i in a.keys():\n    votoParziale = c[a[i]]\n    c[a[i]] = b[i] + votoParziale\nmass = b[list(a.keys())[0]]\nindice2 = list(a.keys())[0]\nfor chiave in a.keys():\n    if b[chiave] > mass:\n        indice2 = chiave\n        mass = b[chiave]\n    elif b[chiave] == mass:\n        if chiave < indice2:\n            indice2 = chiave\nmass = c[a[list(a.keys())[0]]]\nindice1 = list(c.keys())[0]\nfor chiave in c.keys():\n    if c[chiave] > mass:\n        indice1 = chiave\n        mass = c[chiave]\n    elif c[chiave] == mass:\n        if chiave < indice1:\n            indice1 = chiave\nprint(indice1)\nprint(indice2)", "(n, m) = map(int, input().split())\ndi = {}\nfor i1 in range(n):\n    (na, co) = input().split()\n    di[na] = co\nk = {}\np = {}\nfor i1 in range(m):\n    q = input()\n    if q in k:\n        k[q] += 1\n    else:\n        k[q] = 1\n    if di[q] in p:\n        p[di[q]] += 1\n    else:\n        p[di[q]] = 1\nm1 = max(k.values())\nm2 = max(p.values())\nl1 = sorted(p)\nl2 = sorted(k)\nfor i1 in l1:\n    if m2 == p[i1]:\n        print(i1)\n        break\nfor i1 in l2:\n    if m1 == k[i1]:\n        print(i1)\n        break", "(n, m) = map(int, input().split())\ndi = {}\nfor i in range(n):\n    (na, co) = input().split()\n    di[na] = co\ne = {}\np = {}\nfor i in range(m):\n    q = input()\n    if q in e:\n        e[q] += 1\n    else:\n        e[q] = 1\n    if di[q] in p:\n        p[di[q]] += 1\n    else:\n        p[di[q]] = 1\nm1 = max(e.values())\nm2 = max(p.values())\nl1 = sorted(p)\nl2 = sorted(e)\nfor i in l1:\n    if m2 == p[i]:\n        print(i)\n        break\nfor i in l2:\n    if m1 == e[i]:\n        print(i)\n        break", "(n, m) = map(int, input().split())\ndi = {}\nfor i in range(n):\n    (na, co) = input().split()\n    di[na] = co\nk = {}\np = {}\nfor i in range(m):\n    q = input()\n    if q in k:\n        k[q] += 1\n    else:\n        k[q] = 1\n    if di[q] in p:\n        p[di[q]] += 1\n    else:\n        p[di[q]] = 1\nm1 = max(k.values())\nm2 = max(p.values())\nl1 = sorted(p)\nl2 = sorted(k)\nfor i in l1:\n    if m2 == p[i]:\n        print(i)\n        break\nfor i in l2:\n    if m1 == k[i]:\n        print(i)\n        break", "(n, m) = map(int, input().split())\nd = {}\nfor i in range(n):\n    (a, b) = input().split()\n    d[a] = b\nk = {}\na = {}\nfor i in range(m):\n    b = input()\n    if b in k:\n        k[b] += 1\n    else:\n        k[b] = 1\n    if d[b] in a:\n        a[d[b]] += 1\n    else:\n        a[d[b]] = 1\nch = max(k.values())\nco = max(a.values())\nfor i in sorted(a):\n    if co == a[i]:\n        print(i)\n        break\nfor i in sorted(k):\n    if ch == k[i]:\n        print(i)\n        break", "(n, m) = map(int, input().split())\nd = {}\nfor i in range(n):\n    (a, b) = input().split()\n    d[a] = b\nk = {}\na = {}\nfor i in range(m):\n    b = input()\n    if b in k:\n        k[b] += 1\n    else:\n        k[b] = 1\n    if d[b] in a:\n        a[d[b]] += 1\n    else:\n        a[d[b]] = 1\nch = max(k.values())\nco = max(a.values())\nfor i in sorted(a):\n    if co == a[i]:\n        print(i)\n        break\nfor i in sorted(k):\n    if ch == k[i]:\n        print(i)\n        break", "(n, m) = map(int, input().split())\nd = {}\nfor i in range(n):\n    (a, b) = input().split()\n    d[a] = b\nk = {}\na = {}\nfor i in range(m):\n    b = input()\n    if b in k:\n        k[b] += 1\n    else:\n        k[b] = 1\n    if d[b] in a:\n        a[d[b]] += 1\n    else:\n        a[d[b]] = 1\nch = max(k.values())\nco = max(a.values())\nfor i in sorted(a):\n    if co == a[i]:\n        print(i)\n        break\nfor i in sorted(k):\n    if ch == k[i]:\n        print(i)\n        break", "(n, m) = map(int, input().split())\ncntry = {}\nchf = {}\nchf2 = {}\ncntry2 = {}\nfor i in range(n):\n    (chef, ct) = map(str, input().split())\n    cntry2[ct] = 0\n    try:\n        cntry[ct].update({chef: 0})\n    except:\n        cntry[ct] = {chef: 0}\n    chf[chef] = ct\n    chf2[chef] = 0\nfor i in range(m):\n    chef = input()\n    cntry[chf[chef]][chef] += 1\n    cntry2[chf[chef]] += 1\n    chf2[chef] += 1\ncntry2 = {k: v for (k, v) in sorted(cntry2.items(), key=lambda item: item[1])}\nmx_cntry = list(cntry2.values())[-1]\nres_cntry = '{'\nfor (k, v) in cntry2.items():\n    if v == mx_cntry:\n        res_cntry = min(k, res_cntry)\nchf2 = {k: v for (k, v) in sorted(chf2.items(), key=lambda item: item[1])}\nmx_chef = list(chf2.values())[-1]\nres_chef = '{'\nfor (k, v) in chf2.items():\n    if v == mx_chef:\n        res_chef = min(k, res_chef)\nprint(res_cntry)\nprint(res_chef)", "(n, m) = map(int, input().split())\nd = {}\nfor i in range(n):\n    (a, b) = input().split()\n    d[a] = b\nk = {}\na = {}\nfor i in range(m):\n    b = input()\n    if b in k:\n        k[b] += 1\n    else:\n        k[b] = 1\n    if d[b] in a:\n        a[d[b]] += 1\n    else:\n        a[d[b]] = 1\nch = max(k.values())\nco = max(a.values())\nfor i in sorted(a):\n    if co == a[i]:\n        print(i)\n        break\nfor i in sorted(k):\n    if ch == k[i]:\n        print(i)\n        break", "a = {}\nb = {}\nc = {}\nindice1 = 0\nindice2 = 0\nvotoParziale = 0\n(N, M) = input().split()\nN = int(N)\nM = int(M)\nfor i in range(N):\n    (chiave, valore) = input().split()\n    a[chiave] = valore\n    b[chiave] = 0\n    c[valore] = 0\nfor i in range(M):\n    chef = input()\n    votoParziale = b[chef]\n    votoParziale += 1\n    b[chef] = votoParziale\nfor i in a.keys():\n    votoParziale = c[a[i]]\n    c[a[i]] = b[i] + votoParziale\nmass = b[list(a.keys())[0]]\nindice2 = list(a.keys())[0]\nfor chiave in a.keys():\n    if b[chiave] > mass:\n        indice2 = chiave\n        mass = b[chiave]\n    elif b[chiave] == mass:\n        if chiave < indice2:\n            indice2 = chiave\nmass = c[a[list(a.keys())[0]]]\nindice1 = list(c.keys())[0]\nfor chiave in c.keys():\n    if c[chiave] > mass:\n        indice1 = chiave\n        mass = c[chiave]\n    elif c[chiave] == mass:\n        if chiave < indice1:\n            indice1 = chiave\nprint(indice1)\nprint(indice2)", "def main():\n    try:\n        (N, M) = map(int, input().split())\n        participants: dict = {}\n        for i in range(N):\n            value = input().split()\n            chef = value[0]\n            country = value[1]\n            participants[chef] = country\n        votes: list = []\n        for i in range(M):\n            votes.append(input())\n        sol = resolve(participants, votes)\n        print(sol[0])\n        print(sol[1])\n    except EOFError:\n        return\n\ndef resolve(participants: dict, votes: list):\n    winnerCountry: str = ''\n    winnerChef: str = ''\n    chefVotes: dict[str, int] = {}\n    countyVotes: dict[str, int] = {}\n    for i in range(len(votes)):\n        if votes[i] not in chefVotes:\n            chefVotes[votes[i]] = 1\n        else:\n            chefVotes[votes[i]] += 1\n        chef = votes[i]\n        country = participants[chef]\n        if country not in countyVotes:\n            countyVotes[country] = 1\n        else:\n            countyVotes[country] += 1\n    max: int = 0\n    for (chef, count) in chefVotes.items():\n        if count > max or (count == max and chef < winnerChef):\n            max = count\n            winnerChef = chef\n    maxCountry: int = 0\n    for (country, count) in countyVotes.items():\n        if count > maxCountry or (count == maxCountry and country < winnerCountry):\n            maxCountry = count\n            winnerCountry = country\n    return [winnerCountry, winnerChef]\nmain()", "(y, m) = map(int, input().split())\nd = {}\nfor j in range(y):\n    (c, h) = input().split()\n    d[c] = h\nv = {}\nfor j in range(m):\n    c = input()\n    if c in v:\n        v[c] += 1\n    else:\n        v[c] = 1\ncv = {}\nw = 0\nfor j in v:\n    if d[j] in cv:\n        cv[d[j]] += v[j]\n    else:\n        cv[d[j]] = v[j]\n    if cv[d[j]] > w:\n        w = cv[d[j]]\n        wc = d[j]\n    elif cv[d[j]] == w:\n        if d[j] < wc:\n            wc = d[j]\nprint(wc)\nwv = 0\nfor j in v:\n    if v[j] > wv:\n        wv = v[j]\n        wc = j\n    elif v[j] == wv:\n        if j < wc:\n            wc = j\nprint(wc)"]