["import math\nt = int(input())\nres1 = []\nres2 = []\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    l = list(map(int, input().split(' ')))\n    x = k // 2\n    l1 = sorted(l)\n    med = l1[-x - 1]\n    c = 0\n    lc = 1\n    hc = 1\n    print(med)\n    for m in l:\n        if c == k:\n            break\n        if m < med and lc <= math.ceil(k / 2) - 1:\n            print(m, end=' ')\n            lc = lc + 1\n            c = c + 1\n        if m == med:\n            print(m, end=' ')\n        if m > med and hc < math.ceil((k + 1) / 2):\n            print(m, end=' ')\n            hc = hc + 1\n            c = c + 1", "import math\ntry:\n    no_of_testcases = int(input())\n    for i in range(no_of_testcases):\n        (n, k) = map(int, input().split())\n        l = list(map(int, input().split()))\n        sl = sorted(l, reverse=True)\n        nk = math.ceil((k + 1) / 2)\n        (count, low_count, high_count) = (0, 1, 1)\n        req_max = sl[nk - 1]\n        print(req_max)\n        for m in l:\n            if count == k:\n                break\n            if m < req_max and low_count <= math.ceil(k / 2) - 1:\n                print(m, end=' ')\n                low_count = low_count + 1\n                count = count + 1\n            if m == req_max:\n                print(m, end=' ')\n                count = count + 1\n            if m > req_max and high_count <= nk - 1:\n                print(m, end=' ')\n                high_count = high_count + 1\n                count = count + 1\n        print()\nexcept:\n    pass", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (N, K) = (int(num) for num in input().split())\n    a = [int(num) for num in input().split()]\n    if N == 1:\n        print(a[0])\n        print(a[0])\n        continue\n    arr = a[:]\n    arr.sort()\n    median = None\n    for i in range(N - 1, -1, -1):\n        L = i - 0\n        R = N - i - 1\n        if K % 2 == 0:\n            if L >= K // 2 - 1 and R + 1 >= K // 2 + 1:\n                median = arr[i]\n                break\n        else:\n            req = K // 2\n            if L >= req and R >= req:\n                median = arr[i]\n                break\n    res = []\n    if K % 2 == 0:\n        L = K // 2 - 1\n        R = K // 2\n    else:\n        L = K // 2\n        R = K // 2\n    for i in range(N):\n        if L > 0 and a[i] < median:\n            L -= 1\n            res.append(str(a[i]))\n        if R > 0 and a[i] > median:\n            R -= 1\n            res.append(str(a[i]))\n        if a[i] == median:\n            res.append(str(a[i]))\n    print(median)\n    print(' '.join(res))", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    reverseSortedA = sorted(A, reverse=True)\n    maxMedian = reverseSortedA[K // 2]\n    if K % 2 == 0:\n        left = K // 2 - 1\n        right = K // 2\n    else:\n        left = right = K // 2\n    subsequence = []\n    for i in A:\n        if i < maxMedian and left > 0:\n            subsequence.append(i)\n            left -= 1\n        elif i == maxMedian:\n            subsequence.append(i)\n        elif i > maxMedian and right > 0:\n            subsequence.append(i)\n            right -= 1\n    print(maxMedian)\n    print(*subsequence, sep=' ')", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    reverseSortedA = sorted(A, reverse=True)\n    if K == 1:\n        print(reverseSortedA[0])\n        print(reverseSortedA[0])\n    else:\n        maxMedian = reverseSortedA[K // 2]\n        if K % 2 == 0:\n            left = K // 2 - 1\n            right = K // 2\n        else:\n            left = right = K // 2\n        subsequence = []\n        for i in A:\n            if i < maxMedian and left > 0:\n                subsequence.append(i)\n                left -= 1\n            elif i == maxMedian:\n                subsequence.append(i)\n            elif i > maxMedian and right > 0:\n                subsequence.append(i)\n                right -= 1\n        print(maxMedian)\n        print(*subsequence, sep=' ')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()[:n]))\n    arrSort = sorted(arr, reverse=True)\n    if k % 2 == 0:\n        a = k // 2\n        countPrv = k // 2 - 1\n        countNext = countPrv + 1\n    else:\n        a = k // 2\n        countPrv = k // 2\n        countNext = countPrv\n    median = arrSort[a]\n    print(median)\n    for item in arr:\n        if item > arrSort[a] and countNext > 0:\n            print(item, end=' ')\n            countNext -= 1\n        elif item < arrSort[a] and countPrv > 0:\n            print(item, end=' ')\n            countPrv -= 1\n        elif item == arrSort[a]:\n            print(item, end=' ')\n    print()", "from sys import stdin\n\ndef get_med_subseq(vals, sublen):\n    mx = (sublen - 1) // 2\n    med = sorted(vals)[-sublen + mx]\n    if sublen == len(vals):\n        return (med, vals)\n    sseq = []\n    for v in vals:\n        if v >= med:\n            sseq.append(v)\n        elif mx:\n            sseq.append(v)\n            mx -= 1\n    return (med, sseq)\ninput = stdin.readline\nT = int(input())\nfor tx in range(T):\n    (N, K) = map(int, input().split())\n    Ays = list(map(int, input().split()))\n    (mdn, seq) = get_med_subseq(Ays, K)\n    print(mdn, ' '.join(map(str, seq)), sep='\\n')", "from sys import stdin\n\ndef get_med_subseq(vals, sublen):\n    tseq = sorted(vals)[-sublen:]\n    mx = (sublen - 1) // 2\n    med = tseq[mx]\n    if sublen == len(vals):\n        return (med, vals)\n    sseq = []\n    for v in vals:\n        if v >= med:\n            sseq.append(v)\n        elif mx:\n            sseq.append(v)\n            mx -= 1\n    return (med, sseq)\ninput = stdin.readline\nT = int(input())\nfor tx in range(T):\n    (N, K) = map(int, input().split())\n    Ays = list(map(int, input().split()))\n    (mdn, seq) = get_med_subseq(Ays, K)\n    print(mdn)\n    print(*seq)", "for iii in range(int(input())):\n    (n, k) = map(int, input().split())\n    q = list(map(int, input().split()))\n    w = [q[i] for i in range(n)]\n    w.sort(reverse=True)\n    ww = []\n    for i in range(k):\n        ww.append(w[i])\n    ww = ww[::-1]\n    x = (k + 1) // 2\n    y = x - 1\n    x = x - 1\n    x = ww[x]\n    count = 0\n    print(x)\n    for i in range(n):\n        if q[i] >= x:\n            print(q[i], end=' ')\n        elif count < y:\n            print(q[i], end=' ')\n            count += 1\n    print()", "for _ in range(int(input())):\n    (N, K) = (int(num) for num in input().split())\n    a = [int(num) for num in input().split()]\n    if N == 1:\n        print(a[0])\n        print(a[0])\n        continue\n    arr = a[:]\n    arr.sort()\n    median = None\n    for i in range(N - 1, -1, -1):\n        L = i - 0\n        R = N - i - 1\n        if K % 2 == 0:\n            if L >= K // 2 - 1 and R + 1 >= K // 2 + 1:\n                median = arr[i]\n                break\n        else:\n            req = K // 2\n            if L >= req and R >= req:\n                median = arr[i]\n                break\n    res = []\n    if K % 2 == 0:\n        L = K // 2 - 1\n        R = K // 2\n    else:\n        L = K // 2\n        R = K // 2\n    for i in range(N):\n        if L > 0 and a[i] < median:\n            L -= 1\n            res.append(str(a[i]))\n        if R > 0 and a[i] > median:\n            R -= 1\n            res.append(str(a[i]))\n        if a[i] == median:\n            res.append(str(a[i]))\n    print(median)\n    print(' '.join(res))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(map(int, input().split()))\n    x = (k - 1) // 2\n    a = s.copy()\n    a.sort()\n    m = a[n + x - k]\n    st = ''\n    print(m)\n    t = 0\n    for i in s:\n        if i >= m:\n            st += str(i) + ' '\n        elif t < x:\n            st += str(i) + ' '\n            t += 1\n    print(st)", "import math\nm = 0\no = 0\nfor _ in range(int(input())):\n    m = 0\n    o = 0\n    (n, k) = map(int, input().split())\n    s = list(map(int, input().split()))\n    x = (k - 1) // 2\n    a = s.copy()\n    a.sort()\n    m = a[n + x - k]\n    st = ''\n    print(m)\n    n = 0\n    for i in s:\n        if i >= m:\n            st += str(i) + ' '\n        elif n < x:\n            st += str(i) + ' '\n            n += 1\n    print(st)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (N, K) = (int(num) for num in input().split())\n    a = [int(num) for num in input().split()]\n    if N == 1:\n        print(a[0])\n        print(a[0])\n        continue\n    arr = a[:]\n    arr.sort()\n    median = None\n    for i in range(N - 1, -1, -1):\n        L = i - 0\n        R = N - i - 1\n        if K % 2 == 0:\n            if L >= K // 2 - 1 and R + 1 >= K // 2 + 1:\n                median = arr[i]\n                break\n        else:\n            req = K // 2\n            if L >= req and R >= req:\n                median = arr[i]\n                break\n    res = []\n    if K % 2 == 0:\n        L = K // 2 - 1\n        R = K // 2\n    else:\n        L = K // 2\n        R = K // 2\n    for i in range(N):\n        if L > 0 and a[i] < median:\n            L -= 1\n            res.append(str(a[i]))\n        if R > 0 and a[i] > median:\n            R -= 1\n            res.append(str(a[i]))\n        if a[i] == median:\n            res.append(str(a[i]))\n    print(median)\n    print(' '.join(res))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (N, K) = (int(num) for num in input().split())\n    a = [int(num) for num in input().split()]\n    if N == 1:\n        print(a[0])\n        print(a[0])\n        continue\n    arr = a[:]\n    arr.sort()\n    median = None\n    for i in range(N - 1, -1, -1):\n        L = i - 0\n        R = N - i - 1\n        if K % 2 == 0:\n            if L >= K // 2 - 1 and R + 1 >= K // 2 + 1:\n                median = arr[i]\n                break\n        else:\n            req = K // 2\n            if L >= req and R >= req:\n                median = arr[i]\n                break\n    res = []\n    if K % 2 == 0:\n        L = K // 2 - 1\n        R = K // 2\n    else:\n        L = K // 2\n        R = K // 2\n    for i in range(N):\n        if L > 0 and a[i] < median:\n            L -= 1\n            res.append(str(a[i]))\n        if R > 0 and a[i] > median:\n            R -= 1\n            res.append(str(a[i]))\n        if a[i] == median:\n            res.append(str(a[i]))\n    print(median)\n    print(' '.join(res))", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    b = sorted(a)\n    f = []\n    if k % 2 == 0:\n        le = k // 2 - 1\n        se = k // 2\n        m = k // 2 + 1\n    else:\n        le = se = k // 2\n        m = k // 2 + 1\n    me = b[-m]\n    for i in a:\n        if len(f) == k:\n            break\n        if i == me:\n            f.append(str(i))\n        elif i > me:\n            if se != 0:\n                se -= 1\n                f.append(str(i))\n        elif i < me:\n            if le != 0:\n                le -= 1\n                f.append(str(i))\n    print(me)\n    print(' '.join(f))", "for _ in range(int(input())):\n    (n, k) = input().split()\n    L = list(map(int, input().split()))\n    X = sorted(L)\n    r = len(L) - 1\n    l = r - int(k) + 1\n    mid = (l + r) // 2\n    print(X[mid])\n    arr = []\n    if int(k) % 2 == 0:\n        x = (int(k) - 1) // 2\n        y = int(k) // 2\n    elif int(k) % 2 != 0:\n        x = (int(k) - 1) // 2\n        y = (int(k) - 1) // 2\n    for i in range(int(n)):\n        if L[i] < X[mid] and x > 0:\n            arr.append(L[i])\n            x -= 1\n        elif L[i] > X[mid] and y > 0:\n            arr.append(L[i])\n            y -= 1\n        elif L[i] == X[mid]:\n            arr.append(L[i])\n    for k in arr:\n        print(k, end=' ')", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\n\ndef A():\n    for _ in range(*maps()):\n        a = [*maps()]\n        b = [*maps()]\n        if a.count(1) == b.count(1) and a.count(0) == b.count(0):\n            print('Pass')\n        else:\n            print('Fail')\n\ndef B():\n    from collections import defaultdict\n    for _ in range(*maps()):\n        (n, k, l) = maps()\n        a = [*maps()]\n        mx = 0\n        d = defaultdict(int)\n        for i in a:\n            d[i] += 1\n            mx = max(mx, i)\n        if d[mx] == 1 and a[-1] == mx:\n            print('Yes')\n            continue\n        if a[-1] != mx and k <= 0:\n            print('No')\n            continue\n        f = a[-1] + k * (l - 1)\n        if f > mx:\n            print('Yes')\n        else:\n            print('No')\nresult = []\n\ndef backtrack(nums, start, curr_set):\n    result.append(list(curr_set))\n    for i in range(start, len(nums)):\n        if i > start and nums[i] == nums[i - 1]:\n            continue\n        curr_set.append(nums[i])\n        backtrack(nums, i + 1, curr_set)\n        curr_set.pop()\n\ndef AllSubsets(nums):\n    curr_set = []\n    nums.sort()\n    backtrack(nums, 0, curr_set)\n\ndef naive(n, k, a):\n    mx = 0\n    if k % 2:\n        idx = k // 2\n    else:\n        idx = k // 2 - 1\n    AllSubsets(a)\n    for i in result:\n        if len(i) == k:\n            f = sorted(i)\n            if f[idx] > mx:\n                mx = f[idx]\n                A = i\n    result.clear()\n    return (mx, A)\n\ndef C():\n    for _ in range(*maps()):\n        (n, k) = maps()\n        a = [*maps()]\n        if k == n:\n            print(sorted(a)[k // 2 - (1 if k % 2 == 0 else 0)])\n            print(*a)\n            continue\n        if k == 1:\n            idx = a.index(max(a))\n            print(a[idx], a[idx], sep='\\n')\n            continue\n        d = {}\n        for i in range(n):\n            d[a[i]] = i\n        if k % 2:\n            idx = k // 2\n            l = k // 2 - 1\n            r = n - k // 2\n        else:\n            idx = k // 2 - 1\n            l = idx\n            r = n - idx - 1\n        mx = 0\n        d = {}\n        A = sorted(a)\n        for i in range(n):\n            d[A[i]] = i\n        for i in range(n):\n            if a[i] > mx and d[a[i]] < r:\n                mx = a[i]\n                idx = i\n        t = []\n        F = k // 2 - (1 if k % 2 == 0 else 0)\n        for i in range(n):\n            if len(t) == F:\n                break\n            if a[i] < mx:\n                t.append((a[i], i))\n        t.append((a[idx], idx))\n        for i in range(n):\n            if len(t) == k:\n                break\n            if a[i] > mx:\n                t.append((a[i], i))\n        t.sort(key=lambda x: x[1])\n        X = [i for (i, j) in t]\n        Y = sorted(X)[k // 2 - (1 if k % 2 == 0 else 0)]\n        print(Y)\n        print(*X)\nC()", "te = int(input())\nfor t in range(te):\n    test = input().split(' ')\n    N = int(test[0])\n    K = int(test[1])\n    arr = list(map(int, input().split(' ')))\n    arrSorted = arr.copy()\n    arrSorted.sort()\n    if K == 0:\n        print(max(arr))\n    median = arrSorted[N - K // 2 - 1]\n    c = 0\n    print(median)\n    res = ''\n    for n in arr:\n        if n < median and c < (K + 1) // 2 - 1:\n            c += 1\n            res += str(n) + ' '\n        elif n >= median:\n            res += str(n) + ' '\n    print(res)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = []\n    array_of_ints = [int(num) for num in input().split()]\n    arr += array_of_ints\n    x = k // 2 + 1\n    arr1 = sorted(arr)\n    arr1.reverse()\n    y = k - x\n    z = k - y - 1\n    res = []\n    tar = arr1[x - 1]\n    for i in arr:\n        if y > 0 and i < tar:\n            res.append(i)\n            y -= 1\n        if z > 0 and i > tar:\n            res.append(i)\n            z -= 1\n        if tar == i:\n            res.append(i)\n    print(tar)\n    for i in res:\n        print(i, end=' ')", "def solve():\n    (n, k) = list(map(int, input().split()))\n    p = k\n    l1 = list(map(int, input().split()))\n    l2 = l1.copy()\n    l2.sort()\n    eve = False\n    if k % 2 == 0:\n        k += 1\n        eve = True\n    num = k // 2\n    check = True\n    first = True\n    while check:\n        mid = l2[-1 * (num + 1)]\n        print(mid)\n        l = 0\n        l_t = num\n        r_t = k - num - 1\n        if eve:\n            l_t -= 1\n        res = []\n        for ele in l1:\n            if l_t > 0 and ele < mid:\n                res.append(ele)\n                l += 1\n                l_t -= 1\n            elif r_t > 0 and ele > mid:\n                res.append(ele)\n                l += 1\n                r_t -= 1\n            elif ele == mid:\n                res.append(ele)\n                l += 1\n            if l == p:\n                print(*res)\n                return\n        num += 1\nfor _ in range(int(input())):\n    solve()", "import math\nt = int(input())\nm = 0\no = 0\nfor _ in range(t):\n    m = 0\n    o = 0\n    (n, k) = map(int, input().split())\n    s = list(map(int, input().split()))\n    x = (k - 1) // 2\n    a = s.copy()\n    a.sort()\n    m = a[n + x - k]\n    st = ''\n    print(m)\n    n = 0\n    for i in s:\n        if i >= m:\n            st += str(i) + ' '\n        elif n < x:\n            st += str(i) + ' '\n            n += 1\n    print(st)", "import sys\ntestcases = int(input())\nwhile testcases > 0:\n    (n, k) = map(int, sys.stdin.readline().split())\n    el = list(map(int, sys.stdin.readline().split()))\n    el2 = sorted(el)\n    median = 0\n    el2 = el2[n - k:n]\n    if k % 2 == 0:\n        median = el2[k // 2 - 1]\n        l = k // 2 - 1\n        r = k // 2\n    else:\n        median = el2[k // 2]\n        l = k // 2\n        r = k // 2\n    print(median)\n    for i in el:\n        if i < median and l > 0:\n            print(i, end=' ')\n            l -= 1\n        elif i == median:\n            print(i, end=' ')\n        elif i > median and r > 0:\n            print(i, end=' ')\n            r -= 1\n    print()\n    testcases -= 1", "for t in range(int(input())):\n    (N, K) = input().split()\n    (n, k) = (int(N), int(K))\n    arr = [int(x) for x in input().split()]\n    a = sorted(arr)\n    ans = [0] * k\n    if k % 2 == 0:\n        f = k // 2 - 1\n        b = k // 2 + 1\n    else:\n        f = k // 2\n        b = k // 2 + 1\n    for i in range(f):\n        ans[i] = a[i]\n    for j in range(b):\n        ans[k - j - 1] = a[n - j - 1]\n    if k % 2 == 0:\n        m = ans[k // 2 - 1]\n    else:\n        m = ans[k // 2]\n    i = 0\n    cf = 0\n    cb = 0\n    l = []\n    while i < n and cf < f and (cb < b):\n        if arr[i] < m:\n            cf += 1\n            l.append(arr[i])\n        else:\n            l.append(arr[i])\n            cb += 1\n        i += 1\n    if cf == f:\n        while i < n and cb < b:\n            if arr[i] >= m:\n                cb += 1\n                l.append(arr[i])\n            i += 1\n    else:\n        while i < n and cf < f:\n            if arr[i] < m:\n                cf += 1\n                l.append(arr[i])\n            i += 1\n    print(m)\n    print(*l)", "def get_subseq(a, n, k):\n    b = [i for i in range(n)]\n    b.sort(key=lambda x: -a[x])\n    ind = b[k // 2]\n    before = (k - 1) // 2\n    after = k // 2\n    ans = []\n    c = 0\n    d = 0\n    for i in range(len(a)):\n        if i == ind:\n            ans.append(a[i])\n        elif c < before and a[i] < a[ind]:\n            ans.append(a[i])\n            c += 1\n        elif d < after and a[i] > a[ind]:\n            ans.append(a[i])\n            d += 1\n    print(a[ind])\n    print(' '.join(map(str, ans)))\nfor i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    get_subseq(a, n, k)", "import heapq\nimport math\nfor i in range(0, int(input())):\n    (uuu, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    s = []\n    counter = 0\n    n = [0]\n    for j in range(0, uuu):\n        s.append(0)\n    heapq.heapify(n)\n    b = math.ceil(k / 2)\n    l = sorted(arr)\n    counter = 0\n    t = 0\n    for i in range(uuu - 1, -1, -1):\n        counter = counter + 1\n        if counter == b:\n            if k % 2 == 0:\n                t = l[i - 1]\n            else:\n                t = l[i]\n    if k % 2 == 0:\n        req = k / 2 - 1\n    else:\n        req = k // 2\n    p = []\n    for i in range(0, uuu):\n        if req > 0 and arr[i] < t:\n            p.append(arr[i])\n            req = req - 1\n        elif arr[i] >= t:\n            p.append(arr[i])\n    print(t)\n    for i in range(0, len(p)):\n        print(p[i], end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ss = sorted(l)\n    t = n - k\n    x = ss[t:]\n    med = 0\n    if k % 2 == 0:\n        med = x[int(k / 2) - 1]\n    else:\n        med = x[k // 2]\n    print(med)\n    bef = 0\n    af = 0\n    if k % 2 != 0:\n        bef = k // 2\n        af = k // 2\n    else:\n        bef = int(k / 2) - 1\n        af = int(k / 2)\n    see = 0\n    for i in range(n):\n        if bef == 0 and af == 0:\n            break\n        elif l[i] < med and bef > 0:\n            print(l[i], end=' ')\n            bef -= 1\n            continue\n        elif l[i] > med and af > 0:\n            print(l[i], end=' ')\n            af -= 1\n            continue\n        elif l[i] == med:\n            print(med, end=' ')\n            see = 1\n    if see == 0:\n        print(med, end=' ')\n    print()", "import math\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = sorted(l, reverse=True)\n    ans = m[b // 2]\n    if b & 1:\n        (x, y) = (b // 2, (b + 1) // 2)\n    else:\n        (x, y) = (b // 2 - 1, b // 2 + 1)\n    sol = []\n    c = 0\n    for i in l:\n        if x == 0 and y == 0 and (c == 1):\n            break\n        if i < ans and x != 0:\n            sol += [i]\n            x -= 1\n        if i > ans and y != 0:\n            sol += [i]\n            y -= 1\n        if i == ans:\n            sol += [i]\n            c += 1\n    print(ans)\n    print(*sol)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = sorted(a)[n - k:][k - 1 >> 1]\n    print(x)\n    y = k - 1 >> 1\n    z = k - y - 1\n    for b in a:\n        if b < x and y > 0:\n            print(b, end=' ')\n            y -= 1\n        elif b > x and z > 0:\n            print(b, end=' ')\n            z -= 1\n        elif b == x:\n            print(b, end=' ')", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = []\n    c = []\n    x = y = 0\n    for j in a:\n        b.append(j)\n    a.sort()\n    for j in range(n - k, n):\n        c.append(a[j])\n    med = c[(k + 1) // 2 - 1]\n    print(med)\n    for j in b:\n        if x < (k + 1) // 2 - 1 and j < med:\n            print(j, end=' ')\n            x = x + 1\n        if y < k - (k + 1) // 2 and j > med:\n            print(j, end=' ')\n            y = y + 1\n        if j == med:\n            print(j, end=' ')\n    print()", "import math, os, io, heapq\nfrom sys import stdin, stdout\nfrom collections import Counter, deque, defaultdict\nfrom itertools import product\nimport bisect\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    (n, k) = getList()\n    a = getList()\n    idmap = {v: i for (i, v) in enumerate(a)}\n    b = sorted(a)\n    (med, bef) = (b[n - k // 2 - 1], k // 2 if k % 2 else k // 2 - 1)\n    vals = []\n    for i in range(bef):\n        vals.append(idmap[b[i]])\n    for i in range(n - k // 2 - 1, n):\n        vals.append(idmap[b[i]])\n    vals.sort()\n    for i in range(len(vals)):\n        vals[i] = a[vals[i]]\n    print(med)\n    print(*vals)\nfor _ in range(getInt()):\n    solve()", "t = int(input())\nwhile t > 0:\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    B = []\n    for i in range(N):\n        B.append(A[i])\n    B.sort()\n    C = B[N - K:]\n    if K % 2 == 0:\n        median = C[K // 2 - 1]\n    else:\n        median = C[K // 2]\n    m = A.index(median)\n    countsmall = 0\n    countlarge = 0\n    ans = []\n    if K % 2 == 0:\n        for j in range(N):\n            if j < m:\n                if A[j] < median:\n                    if countsmall < K // 2 - 1:\n                        ans.append(A[j])\n                        countsmall += 1\n                if A[j] > median:\n                    if countlarge < K // 2:\n                        ans.append(A[j])\n                        countlarge += 1\n            elif j == m:\n                ans.append(median)\n            elif j > m:\n                if A[j] < median:\n                    if countsmall < K // 2 - 1:\n                        ans.append(A[j])\n                        countsmall += 1\n                if A[j] > median:\n                    if countlarge < K // 2:\n                        ans.append(A[j])\n                        countlarge += 1\n    if K % 2 != 0:\n        for j in range(N):\n            if j < m:\n                if A[j] < median:\n                    if countsmall < K // 2:\n                        ans.append(A[j])\n                        countsmall += 1\n                if A[j] > median:\n                    if countlarge < K // 2:\n                        ans.append(A[j])\n                        countlarge += 1\n            elif j == m:\n                ans.append(median)\n            elif j > m:\n                if A[j] < median:\n                    if countsmall < K // 2:\n                        ans.append(A[j])\n                        countsmall += 1\n                if A[j] > median:\n                    if countlarge < K // 2:\n                        ans.append(A[j])\n                        countlarge += 1\n    print(median)\n    print(*ans, end=' ')\n    print()\n    t = t - 1", "import sys\nfrom statistics import median\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    b = sorted(a)\n    m = 0\n    b = b[n - k:n]\n    if k % 2 == 0:\n        m = b[k // 2 - 1]\n        print(m)\n        x = k // 2 - 1\n        y = k // 2\n        for i in a:\n            if i < m and x > 0:\n                print(i, end=' ')\n                x -= 1\n            elif i == m:\n                print(i, end=' ')\n            elif i > m and y > 0:\n                print(i, end=' ')\n                y -= 1\n        print()\n    else:\n        m = b[k // 2]\n        print(m)\n        x = k // 2\n        y = k // 2\n        for i in a:\n            if i < m and x > 0:\n                print(i, end=' ')\n                x -= 1\n            elif i == m:\n                print(i, end=' ')\n            elif i > m and y > 0:\n                print(i, end=' ')\n                y -= 1\n        print()\n    t -= 1"]