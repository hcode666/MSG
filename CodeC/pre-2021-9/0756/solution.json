["def solve():\n    n = int(input())\n    if n < 7:\n        x = (1 - 1 / 10 ** n) / 18\n    else:\n        x = (1 - 1 / 10 ** 7) / 18\n    print(n / 2 - x)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    if n < 7:\n        x = (1 - 1 / 10 ** n) / 18\n    else:\n        x = (1 - 1 / 10 ** 7) / 18\n    print(n / 2 - x)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    if n < 7:\n        x = (1 - 1 / 10 ** n) / 18\n    else:\n        x = (1 - 1 / 10 ** 7) / 18\n    print(n / 2 - x)\nfor _ in range(int(input())):\n    solve()", "def solve():\n    n = int(input())\n    if n < 7:\n        x = (1 - 1 / 10 ** n) / 9\n    else:\n        x = (1 - 1 / 10 ** 7) / 9\n    print((n - x) / 2)\nfor _ in range(int(input())):\n    solve()", "for _ in range(int(input())):\n    n = int(input())\n    if n < 7:\n        x = (1 - 1 / 10 ** n) / 9\n    else:\n        x = (1 - 1 / 10 ** 7) / 9\n    print((n - x) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 7:\n        tmp = pow(10, n)\n        x = (tmp - 1) / (9 * tmp)\n    else:\n        tmp = pow(10, 7)\n        x = (tmp - 1) / (9 * tmp)\n    print((n - x) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 7:\n        x = (10 ** n - 1) / (9 * 10 ** n)\n    else:\n        x = (10 ** 7 - 1) / (9 * 10 ** 7)\n    print((n - x) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 7:\n        x = (1 - 1 / 10 ** n) / 9\n    else:\n        x = (1 - 1 / 10 ** 7) / 9\n    print((n - x) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 7:\n        x = (1 - 1 / 10 ** n) / 9\n    else:\n        x = (1 - 1 / 10 ** 7) / 9\n    print((n - x) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 7:\n        x = float('0.' + '1' * n)\n    else:\n        x = float('0.' + '1' * 7)\n    print((n - x) / 2)", "def solve():\n    n = int(input())\n    if n < 7:\n        x = float('0.' + '1' * n)\n    else:\n        x = float('0.' + '1' * 7)\n    return (n - x) / 2\nfor _ in range(int(input())):\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    x = 0\n    for i in range(1, n + 1):\n        x += 1 / pow(10, i)\n        if i > 6:\n            break\n    print((n - x) / 2)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 7:\n        x = float('0.' + '1' * n)\n    else:\n        x = float('0.' + '1' * 7)\n    print((n - x) / 2)", "def solve():\n    n = int(input())\n    if n < 7:\n        x = float('0.' + '1' * n)\n    else:\n        x = float('0.' + '1' * 7)\n    return (n - x) / 2\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    n = int(input())\n    if n < 7:\n        x = int('1' * n) / 10 ** n\n    else:\n        x = int('1' * 7) / 10 ** 7\n    return (n - x) / 2\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    n = int(input())\n    if n <= 7:\n        x = '1' * n\n        x = int(x) / 10 ** n\n    else:\n        x = '1' * 7\n        x = int('1' * 7) / 10 ** 7\n    return (n - x) / 2\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    n = int(input())\n    if n == 1:\n        return 0.45\n    if n == 2:\n        return 0.945\n    if n == 3:\n        return 1.4445\n    if n == 4:\n        return 1.94445\n    if n == 5:\n        return 2.444445\n    if n == 6:\n        return 2.9444445\n    if n % 2 == 1:\n        return n // 2 + 0.444444444\n    else:\n        return n // 2 - 1 + 0.944444444\nfor _ in range(int(input())):\n    print(solve())", "def solve():\n    n = int(input())\n    if n == 1:\n        return 0.45\n    if n == 2:\n        return 0.945\n    if n == 3:\n        return 1.4445\n    if n == 4:\n        return 1.94445\n    if n == 5:\n        return 2.444445\n    if n == 6:\n        return 2.9444445\n    if n % 2 == 1:\n        return str(n // 2) + '.444444444'\n    else:\n        return str(n // 2 - 1) + '.944444444'\nfor _ in range(int(input())):\n    print(solve())", "def solve(n):\n    ans = 0\n    for i in range(n, 0, -1):\n        ans += i / pow(10, n - i)\n        if n - i == 10:\n            break\n    return 0.45 * ans\nfor _ in range(int(input())):\n    print(solve(int(input())))", "N = 100005\nT = int(input())\nprob_carry = [0 for i in range(N)]\nfor i in range(1, N):\n    prob_carry[i] = prob_carry[i - 1] * 0.1 + 0.45\nfor i in range(1, N):\n    prob_carry[i] += prob_carry[i - 1]\nfor i in range(T):\n    n = int(input())\n    print(f'{prob_carry[n]:.8f}')", "N = 100005\nT = int(input())\nprob_carry = [0 for i in range(N)]\nfor i in range(1, N):\n    prob_carry[i] = prob_carry[i - 1] * 0.1 + 0.45\nfor i in range(1, N):\n    prob_carry[i] += prob_carry[i - 1]\nfor i in range(T):\n    n = int(input())\n    print(f'{prob_carry[n]:.8f}')", "dp = [0] * 100000\ndp[0] = 0.45\nfor i in range(1, 100000):\n    dp[i] = dp[i - 1] + 0.5 - 5 * pow(10, -(i + 2))\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    print('{0:.6f}\\n'.format(dp[n - 1]))", "for _ in range(int(input())):\n    n = int(input())\n    if n <= 6:\n        if n == 1:\n            print(0.45)\n        elif n == 2:\n            print(0.945)\n        elif n == 3:\n            print(1.4445)\n        elif n == 4:\n            print(1.94445)\n        elif n == 5:\n            print(2.444445)\n        else:\n            print(2.9444445)\n    elif n % 2 == 1:\n        print(str(n // 2) + '.444444444')\n    else:\n        print(str(n // 2 - 1) + '.944444444')", "N = 100005\nT = int(input())\nprob_carry = [0 for i in range(N)]\nfor i in range(1, N):\n    prob_carry[i] = prob_carry[i - 1] * 0.1 + 0.45\nfor i in range(1, N):\n    prob_carry[i] += prob_carry[i - 1]\nfor i in range(T):\n    n = int(input())\n    print(f'{prob_carry[n]:.8f}')", "N = 100005\nT = int(input())\nprob_carry = [0 for i in range(N)]\nfor i in range(1, N):\n    prob_carry[i] = prob_carry[i - 1] * 0.1 + 0.45\nfor i in range(1, N):\n    prob_carry[i] += prob_carry[i - 1]\nfor i in range(T):\n    n = int(input())\n    print(f'{prob_carry[n]:.8f}')", "N = 100005\nT = int(input())\nprob_carry = [0 for i in range(N)]\nfor i in range(1, N):\n    prob_carry[i] = prob_carry[i - 1] * 0.1 + 0.45\nfor i in range(1, N):\n    prob_carry[i] += prob_carry[i - 1]\nfor i in range(T):\n    n = int(input())\n    print(f'{prob_carry[n]:.8f}')", "a = [0.45, 0.945, 1.4445, 1.94445]\na1 = 0.444444\na2 = 0.944444\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 4:\n        print(a[n - 1])\n    elif n % 2 == 1:\n        print(a1 + n // 2)\n    else:\n        print(a2 + (n - 1) // 2)", "a = 10 ** 5 + 9\nz = [0] * a\nz.append(0)\nz.append(0.45)\nfor i in range(2, a):\n    z[i] = 0.45 + 10 * z[i - 1] / 100\nf = [0] * a\nfor i in range(1, a):\n    f[i] = f[i - 1] + z[i]\nfor j in range(int(input())):\n    n = int(input())\n    print(f[n + 1])", "a = 10 ** 5 + 9\nz = [0] * a\nz.append(0)\nz.append(0.45)\nfor i in range(2, a):\n    z[i] = 0.45 + 10 * z[i - 1] / 100\nf = [0] * a\nfor i in range(1, a):\n    f[i] = f[i - 1] + z[i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(f[n + 1])", "a = 10 ** 5 + 9\ninitial = [0] * a\ninitial.append(0)\ninitial.append(0.45)\nfor i in range(2, a):\n    initial[i] = 0.45 + 10 * initial[i - 1] / 100\nfinal = [0] * a\nfor i in range(1, a):\n    final[i] = final[i - 1] + initial[i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(final[n + 1])", "k = 10 ** 5 + 9\naman = [0] * k\naman.append(0)\naman.append(0.45)\nfor i in range(2, k):\n    aman[i] = 0.45 + 10 * aman[i - 1] / 100\nravan = [0] * k\nfor i in range(1, k):\n    ravan[i] = ravan[i - 1] + aman[i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(ravan[n + 1])", "p = 10 ** 5 + 9\n(dp, pre) = ([0] * p, [0] * p)\ndp.append(0)\ndp.append(0.45)\nfor i in range(2, p):\n    dp[i] = 0.45 + 10 * dp[i - 1] / 100\nfor i in range(1, p):\n    pre[i] = pre[i - 1] + dp[i]\nfor _ in range(int(input())):\n    print(pre[int(input()) + 1])", "p = 10 ** 5 + 9\ndp = [0] * p\ndp.append(0)\ndp.append(0.45)\nfor i in range(2, p):\n    dp[i] = 0.45 + 10 * dp[i - 1] / 100\npre = [0] * p\nfor i in range(1, p):\n    pre[i] = pre[i - 1] + dp[i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(pre[n + 1])", "p = 10 ** 5 + 9\ndp = [0] * p\ndp.append(0)\ndp.append(0.45)\nfor i in range(2, p):\n    dp[i] = 0.45 + 10 * dp[i - 1] / 100\npre = [0] * p\nfor i in range(1, p):\n    pre[i] = pre[i - 1] + dp[i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(pre[n + 1])", "p = 10 ** 5 + 9\ndp = [0] * p\ndp.append(0)\ndp.append(0.45)\nfor i in range(2, p):\n    dp[i] = 0.45 + 10 * dp[i - 1] / 100\npre = [0] * p\nfor i in range(1, p):\n    pre[i] = pre[i - 1] + dp[i]\nfor _ in range(int(input())):\n    n = int(input())\n    print(pre[n + 1])", "def AaddBCarryOvers(A, B):\n    C = 0\n    carryOvers = 0\n    column = 0\n    lastCarryOver = 0\n    while A != 0 or B != 0:\n        newValue = A % 10 + B % 10\n        A //= 10\n        B //= 10\n        if newValue + lastCarryOver >= 10:\n            carryOvers += 1\n        C += newValue * 10 ** column\n        column += 1\n        lastCarryOver = (newValue + lastCarryOver) // 10\n    return carryOvers\nanswers = [0]\nx = 0\nfor i in range(1, 10 ** 2):\n    x += i * 10 ** (i - 1)\n    answers.append(x * 45 / 10 ** (i + 1))\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    if N < 100:\n        print(answers[N])\n    else:\n        print(N / 2 - 1 / 18)", "dp = []\ndp.append(0)\ndp.append(45 / 100)\nfor i in range(2, 100001):\n    val = 10 / 100 * dp[-1]\n    val += 45 / 100\n    dp.append(val)\ns = []\ns.append(0)\nfor i in range(1, 100001):\n    s.append(dp[i] + s[i - 1])\nfor t in range(int(input())):\n    n = int(input())\n    print('%.6f' % s[n])", "t = int(input(''))\nb = []\nfor i in range(0, t):\n    n = int(input(''))\n    m = (9 * n - 1 + 10.0 ** (-n)) / 18\n    b.append(m)\nfor j in range(0, t):\n    print(round(b[j], 6))", "Solutions = [0] * 100001\nfor i in range(1, 100):\n    Solutions[i] = 0.5 - 1 / (2 * pow(10, i)) + Solutions[i - 1]\nfor i in range(100, 100001):\n    Solutions[i] = Solutions[i - 1] + 0.5\ncases = int(input())\nfor i in range(cases):\n    case = int(input())\n    print(str(Solutions[case]))", "d = {1: 0.45}\nfor i in range(2, 10 ** 5 + 1):\n    d[i] = 0.45 + 0.1 * d[i - 1]\nf = [0]\nfor i in range(1, 10 ** 5 + 1):\n    f.append(d[i] + f[-1])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(f[n])", "t = int(input())\nfor it in range(t):\n    n = int(input())\n    res = (9 * n - 1 + 10.0 ** (-n)) / 18\n    print(res)"]