["for i in range(int(input())):\n    n = int(input())\n    ans = 2\n    if n % 2 == 0:\n        x = pow(2, n // 2, 1000000007)\n        ans += 3 * x - 4\n    else:\n        x = pow(2, n // 2 + 1, 1000000007)\n        ans += 2 * x - 4\n    print(int(ans % 1000000007))", "def solve():\n    n = int(input())\n    mod = 10 ** 9 + 7\n    res = 0\n    if n % 2 == 0:\n        res += pow(2, n // 2, mod)\n        n -= 1\n    res += 4 * (pow(2, n // 2, mod) - 1)\n    res += 2\n    return res % mod\nT = int(input())\nwhile T:\n    print(solve())\n    T -= 1", "def solve():\n    n = int(input())\n    mod = 10 ** 9 + 7\n    res = 0\n    if n % 2 == 0:\n        res += pow(2, n // 2, mod)\n        n -= 1\n    res += 4 * (pow(2, n // 2, mod) - 1)\n    res += 2\n    return res % mod\nT = int(input())\nwhile T:\n    print(solve())\n    T -= 1", "for i in range(int(input())):\n    n = int(input())\n    ans = 2\n    if n % 2 == 0:\n        x = pow(2, n // 2, 1000000007)\n        ans += 3 * x - 4\n    else:\n        x = pow(2, n // 2 + 1, 1000000007)\n        ans += 2 * x - 4\n    print(int(ans % 1000000007))", "for i in range(int(input())):\n    N = int(input())\n    NAS = 2\n    NAS = 2\n    if N % 2 == 0:\n        N = pow(2, N // 2, 1000000007)\n        NAS += N * 3 - 4\n    else:\n        N = pow(2, N // 2 + 1, 1000000007)\n        NAS += N * 2 - 4\n    NAS = NAS % 1000000007\n    print(NAS)", "for test in range(int(input())):\n    n = int(input())\n    m = 2\n    if n % 2 != 0:\n        n = pow(2, n // 2 + 1, 1000000007)\n        m += 2 * n - 4\n    else:\n        n = pow(2, n // 2, 1000000007)\n        m += 3 * n - 4\n    m = m % 1000000007\n    print(m)", "for i in range(int(input())):\n    n = int(input())\n    k = 2\n    if n % 2 != 0:\n        n = pow(2, n // 2 + 1, 1000000007)\n        k += 2 * n - 4\n    else:\n        n = pow(2, n // 2, 1000000007)\n        k += 3 * n - 4\n    k = k % 1000000007\n    print(k)", "for i in range(int(input())):\n    n = int(input())\n    k = 2\n    if n % 2 != 0:\n        n = pow(2, n // 2 + 1, 1000000007)\n        k += 2 * n - 4\n    else:\n        n = pow(2, n // 2, 1000000007)\n        k += 3 * n - 4\n    k = k % 1000000007\n    print(k)", "for i in range(int(input())):\n    n = int(input())\n    k = 2\n    if n % 2 != 0:\n        n = pow(2, n // 2 + 1, 1000000007)\n        k += 2 * n - 4\n    else:\n        n = pow(2, n // 2, 1000000007)\n        k += 3 * n - 4\n    k = k % 1000000007\n    print(k)", "for i in range(int(input())):\n    n = int(input())\n    k = 2\n    if n % 2 != 0:\n        n = pow(2, n // 2 + 1, 1000000007)\n        k += 2 * n - 4\n    else:\n        n = pow(2, n // 2, 1000000007)\n        k += 3 * n - 4\n    k = k % 1000000007\n    print(k)", "t = int(input())\nm = 1000000007\nfor x in range(t):\n    n = int(input())\n\n    def pw2(n):\n        if n == 0:\n            return 1\n        r = pw2(int(n / 2))\n        r = r * r % m\n        if n % 2 != 0:\n            r = 2 * r % m\n        return r\n    if n % 2 == 1:\n        k = (n + 1) // 2\n        print(2 * pw2(k) % m - 2)\n    else:\n        k = n // 2\n        print(3 * pw2(k) % m - 2)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    n += 1\n\n    def pw2(n):\n        if n == 0:\n            return 1\n        r = pw2(int(n / 2))\n        r = r * r % m\n        if n % 2 != 0:\n            r = 2 * r % m\n        return r\n    print((pw2(n // 2) % m + pw2(n - n // 2) % m - 2) % m)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    n += 1\n\n    def pw2(n):\n        if n == 0:\n            return 1\n        r = pw2(int(n / 2))\n        r = r * r % m\n        if n % 2 != 0:\n            r = 2 * r % m\n        return r\n    print((pw2(n // 2) % m + pw2(n - n // 2) % m - 2) % m)", "modulo = 1000000007\n\ndef pw2(n):\n    if n == 0:\n        return 1\n    r = pw2(int(n / 2))\n    r = r * r % modulo\n    if n % 2 != 0:\n        r = 2 * r % modulo\n    return r\n\ndef solve(n):\n    n1 = int(n / 2)\n    n2 = n - n1\n    return (pw2(n1) + pw2(n2) - 2) % modulo\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(solve(n + 1) % modulo)\n    t -= 1", "modulo = 1000000007\n\ndef pw2(n):\n    if n == 0:\n        return 1\n    r = pw2(int(n / 2))\n    r = r * r % modulo\n    if n % 2 != 0:\n        r = 2 * r % modulo\n    return r\n\ndef solve(n):\n    n1 = int(n / 2)\n    n2 = n - n1\n    return (pw2(n1) + pw2(n2) - 2) % modulo\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    print(solve(n + 1) % modulo)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 1:\n        k = (n + 1) // 2\n        ans = 2 * pow(2, k, 1000000007) - 2\n        ans = ans % 1000000007\n        print(ans)\n    else:\n        k = (n + 2) // 2\n        p = pow(2, k, 1000000007)\n        ans = 2 * p % 1000000007 - pow(2, k - 1, 1000000007) - 2\n        ans = ans % 1000000007\n        print(ans)", "import bisect\nimport sys\nimport math\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef solve():\n    n = get_int()\n    M = 10 ** 9 + 7\n    if n == 1:\n        print(2)\n        return\n    ans = 2\n    if n % 2 == 0:\n        c = (n - 1) // 2\n        ans += pow(2, c + 2, M)\n        ans += pow(2, n // 2, M)\n        ans -= 4\n        ans = ans % M\n        print(ans)\n    else:\n        c = n // 2\n        ans += pow(2, c + 2, M)\n        ans -= 4\n        ans = ans % M\n        print(ans)\nT = get_int()\nwhile T:\n    solve()\n    T -= 1", "M = 1000000007\n\ndef solve(b):\n    if b == 0:\n        return 1\n    r = solve(b // 2)\n    r = r * r % M\n    if b % 2 == 1:\n        r = r * 2 % M\n    return r\nfor i in range(int(input())):\n    n = int(input())\n    n += 1\n    ans = (solve(n // 2) + solve(n - n // 2) - 2) % M\n    print(ans)", "NT = int(input())\nMOD = 1000000007\nwhile NT > 0:\n    NT -= 1\n    N = int(input())\n    ans = 1\n    if N % 2 == 0:\n        k = N // 2\n        ans = (3 * pow(2, k, MOD) - 2) % MOD\n    else:\n        k = (N + 1) // 2\n        ans = (pow(2, k + 1, MOD) - 2) % MOD\n    ans = (ans + MOD) % MOD\n    print(ans)", "import math\nm = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    i = math.ceil((n + 1) / 2)\n    j = (n + 1) // 2\n    i1 = pow(2, i, m)\n    j1 = pow(2, j, m)\n    count = (i1 + j1 - 2) % m\n    print(int(count))", "import math\nT = int(input())\nmod = 1000000007\nfor _ in range(T):\n    N = int(input())\n    A = math.ceil((N + 1) / 2)\n    B = (N + 1) // 2\n    C = pow(2, A, mod)\n    D = pow(2, B, mod)\n    ans = (C + D - 2) % mod\n    print(int(ans))", "mod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print((3 * pow(2, n // 2, mod) % mod - 2) % mod)\n    else:\n        print((2 * pow(2, (n + 1) // 2, mod) % mod - 2) % mod)", "mod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print((3 * pow(2, n // 2, mod) % mod - 2) % mod)\n    else:\n        print((2 * pow(2, (n + 1) // 2, mod) % mod - 2) % mod)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    K = 0\n    if N > 0:\n        K = 2\n        if N % 2 == 1:\n            n = pow(2, N // 2 + 1, 1000000007)\n            K += 2 * n - 4\n        else:\n            n = pow(2, N // 2, 1000000007)\n            K += 3 * n - 4\n    K = K % 1000000007\n    print(K)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    K = 0\n    if N > 0:\n        K = 2\n        if N % 2 == 1:\n            n = pow(2, N // 2 + 1, 1000000007)\n            K += 2 * n - 4\n        else:\n            n = pow(2, N // 2, 1000000007)\n            K += 3 * n - 4\n    K = K % 1000000007\n    print(K)", "def power(a, b):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res *= a\n            res %= mod\n        a *= a\n        a %= mod\n        b >>= 1\n    return res % mod\nt = int(input())\nmod = 1000000007\nfor test in range(t):\n    n = int(input())\n    if n == 1:\n        print(2)\n        continue\n    res = power(2, n // 2)\n    ans = res - 2\n    ans %= mod\n    ans = 2 + 2 * ans\n    ans += res\n    ans %= mod\n    if n % 2 == 1:\n        ans += res\n        ans %= mod\n    ans %= mod\n    print(ans)", "def power(a, b):\n    res = 1\n    while b > 0:\n        if b & 1:\n            res *= a\n            res %= mod\n        a *= a\n        a %= mod\n        b >>= 1\n    return res % mod\nt = int(input())\nmod = 1000000007\nfor test in range(t):\n    n = int(input())\n    if n == 1:\n        print(2)\n        continue\n    res = power(2, n // 2)\n    ans = res - 2\n    ans %= mod\n    ans = 2 + 2 * ans\n    ans += res\n    ans %= mod\n    if n % 2 == 1:\n        ans += res\n        ans %= mod\n    ans %= mod\n    print(ans)", "import math\nimport os\nimport random\nimport re\nimport sys\nT = int(input())\nmod = 1000000007\nfor _ in range(T):\n    N = int(input())\n    A = math.ceil((N + 1) / 2)\n    B = (N + 1) // 2\n    C = pow(2, A, mod)\n    D = pow(2, B, mod)\n    ans = (C + D - 2) % mod\n    print(int(ans))", "import sys\nimport math\nsys.setrecursionlimit(10 ** 7)\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef exp(x, n, m):\n    if n == 0:\n        return 1\n    ans = exp(x, n // 2, m)\n    ans = ans * ans % m\n    if n % 2 == 1:\n        ans *= x\n        ans = ans % m\n    return ans\n\ndef solve(n):\n    n += 1\n    n1 = n // 2\n    n2 = n - n1\n    ans = exp(2, n1, 10 ** 9 + 7) + exp(2, n2, 10 ** 9 + 7) - 2\n    ans = ans % (10 ** 9 + 7)\n    print(ans)\n    return\nT = get_int()\nwhile T:\n    n = get_int()\n    solve(n)\n    T -= 1", "import sys\nimport math\nsys.setrecursionlimit(10 ** 7)\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef get_string():\n    return sys.stdin.readline().strip()\n\ndef get_int():\n    return int(sys.stdin.readline().strip())\n\ndef get_list_strings():\n    return list(map(str, sys.stdin.readline().strip().split()))\n\ndef exp(x, n, m):\n    if n == 0:\n        return 1\n    ans = exp(x, n // 2, m)\n    ans = ans * ans % m\n    if n % 2 == 1:\n        ans *= x\n        ans = ans % m\n    return ans\n\ndef solve(n):\n    n += 1\n    n1 = n // 2\n    n2 = n - n1\n    ans = exp(2, n1, 10 ** 9 + 7) + exp(2, n2, 10 ** 9 + 7) - 2\n    ans = ans % (10 ** 9 + 7)\n    print(ans)\n    return\nT = get_int()\nwhile T:\n    n = get_int()\n    solve(n)\n    T -= 1", "mod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print((3 * pow(2, n // 2, mod) % mod - 2) % mod)\n    else:\n        print((2 * pow(2, (n + 1) // 2, mod) % mod - 2) % mod)", "from math import log2 as log\nimport math\n\ndef power(a, b):\n    res = 1\n    while b > 0:\n        if b & 1 == 1:\n            res = res * a % 1000000007\n        a = a * a % 1000000007\n        b = b >> 1\n    return res\nt = int(input())\nlim = 1000000007\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(2)\n    else:\n        k = 1\n        if n % 2 == 0:\n            n = n - 1\n            k = 2 + 4 * (power(2, n // 2) - 1) + power(2, n // 2 + 1)\n        else:\n            k = 2 + 4 * (power(2, n // 2) - 1)\n        print(k % lim)", "def power(a, b):\n    res = 1\n    while b > 0:\n        if b & 1 == 1:\n            res = res * a % 1000000007\n        a = a * a % 1000000007\n        b = b >> 1\n    return res\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    s = 0\n    n = n - 1\n    if n % 2 == 0:\n        term = n // 2\n        s = 4 * (power(2, term) - 1) % 1000000007\n    else:\n        term = (n - 1) // 2\n        s = 4 * (power(2, term) - 1) % 1000000007\n        s = (s + power(2, term + 1)) % 1000000007\n    print((s + 2) % 1000000007)", "def power(a, b):\n    res = 1\n    while b > 0:\n        if b & 1 == 1:\n            res = res * a % 1000000007\n        a = a * a % 1000000007\n        b = b >> 1\n    return res\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n == 1:\n        print(2)\n    elif n == 2:\n        print(4)\n    elif n == 3:\n        print(6)\n    else:\n        s = 0\n        n = n - 1\n        if n % 2 == 0:\n            term = n // 2\n            s = 4 * (power(2, term) - 1) % 1000000007\n        else:\n            term = (n - 1) // 2\n            s = 4 * (power(2, term) - 1) % 1000000007\n            s = (s + power(2, term + 1)) % 1000000007\n        print((s + 2) % 1000000007)", "import math\n\ndef repeated(a, b):\n    res = 1\n    while b > 0:\n        if b % 2 == 1:\n            res = res * a % m\n        a = a * a % m\n        b = b // 2\n    return res\nm = 10 ** 9 + 7\nfor _ in range(int(input())):\n    N = int(input())\n    print((repeated(2, (N + 1) // 2) + repeated(2, math.ceil((N + 1) / 2)) - 2) % m)", "mod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print((3 * pow(2, n // 2, mod) % mod - 2) % mod)\n    else:\n        print((2 * pow(2, (n + 1) // 2, mod) % mod - 2) % mod)", "mod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print((3 * pow(2, n // 2, mod) % mod - 2) % mod)\n    else:\n        print((2 * pow(2, (n + 1) // 2, mod) % mod - 2) % mod)", "mod = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        print((3 * pow(2, n // 2, mod) % mod - 2) % mod)\n    else:\n        print((2 * pow(2, (n + 1) // 2, mod) % mod - 2) % mod)", "def power(t, q, u):\n    x = int(t)\n    y = int(q)\n    p = int(u)\n    x = x % p\n    res = 1\n    while y > 0:\n        if y % 2 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\ntestc = int(input())\nfor i in range(testc):\n    a = int(input())\n    ans = 0\n    z = 0\n    if a % 2 == 0:\n        z = a // 2\n        ans = power(2, z, 1000000007) + power(2, z + 1, 1000000007) - 2\n        print(ans % 1000000007)\n    else:\n        z = (a + 1) // 2\n        ans = power(2, z, 1000000007) + power(2, z, 1000000007) - 2\n        print(ans % 1000000007)", "import math\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    a = pow(2, (n + 1) // 2, 10 ** 9 + 7)\n    b = pow(2, math.ceil((n + 1) / 2), 10 ** 9 + 7)\n    c = (a + b - 2) % (10 ** 9 + 7)\n    print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = pow(2, (n + 1) // 2, 10 ** 9 + 7)\n    b = pow(2, math.ceil((n + 1) / 2), 10 ** 9 + 7)\n    c = (a + b - 2) % (10 ** 9 + 7)\n    print(c)", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    e = (n + 1) // 2\n    o = math.ceil((n + 1) / 2)\n    a1 = pow(2, e, mod)\n    a2 = pow(2, o, mod)\n    ans = (a1 + a2 - 2) % mod\n    print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = pow(2, (n + 1) // 2, 10 ** 9 + 7)\n    b = pow(2, math.ceil((n + 1) / 2), 10 ** 9 + 7)\n    c = (a + b - 2) % (10 ** 9 + 7)\n    print(c)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = pow(2, (n + 1) // 2, 10 ** 9 + 7)\n    b = pow(2, math.ceil((n + 1) / 2), 10 ** 9 + 7)\n    c = (a + b - 2) % (10 ** 9 + 7)\n    print(c)", "mod = 10 ** 9 + 7\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    e = (n + 1) // 2\n    o = math.ceil((n + 1) / 2)\n    a1 = pow(2, e, mod)\n    a2 = pow(2, o, mod)\n    ans = (a1 + a2 - 2) % mod\n    print(ans)", "m = 1000000007\n\ndef pow(n):\n    (r, x) = (1, 2)\n    while n:\n        if n & 1:\n            r = r * x % m\n        n >>= 1\n        x = x * x % m\n    return r\nfor t in range(int(input())):\n    n = int(input()) + 2\n    if n & 1:\n        print((pow(n // 2) - 1) * 2 % m)\n    else:\n        print(((pow(n // 2) - 1) * 2 % m - pow((n - 1) // 2)) % m)", "m = 1000000007\n\ndef pow(n):\n    (r, x) = (1, 2)\n    while n:\n        if n & 1:\n            r = r * x % m\n        n >>= 1\n        x = x * x % m\n    return r\nfor t in range(int(input())):\n    n = int(input()) + 2\n    if n & 1:\n        print((pow(n // 2) - 1) * 2 % m)\n    else:\n        print(((pow(n // 2) - 1) * 2 % m - pow((n - 1) // 2)) % m)", "def power(no, times, m):\n    if times == 0:\n        return 1\n    val = power(no, times // 2, m) % m\n    val = val * val % m\n    if times % 2 == 0:\n        return val\n    else:\n        return no * val % m\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    m = 1000000007\n    no = 2\n    if n % 2 == 0:\n        print((2 * (power(no, n // 2, m) - 1) + power(no, n // 2, m)) % m)\n    else:\n        print(2 * (power(no, n // 2 + 1, m) - 1) % 1000000007)\n    t -= 1", "import math\nfor u in range(int(input())):\n    n = int(input())\n    m = 10 ** 9 + 7\n    x = math.ceil((n + 1) / 2)\n    y = math.floor((n + 1) / 2)\n    xx = pow(2, x, m)\n    yy = pow(2, y, m)\n    print((xx + yy - 2) % m)", "mod = int(1000000000.0) + 7\nfor _ in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(2 * n)\n        continue\n    till = n >> 1\n    ans = 2\n    if n % 2 == 0:\n        ans += pow(2, till, mod)\n        till -= 1\n    ans = (ans + 4 * pow(2, till, mod) - 4) % mod\n    print(ans)", "import math\nmod = 10 ** 9 + 7\nt = int(input())\nwhile t:\n    n = int(input())\n    p1 = math.floor((n + 1) / 2)\n    p2 = math.ceil((n + 1) / 2)\n    ans1 = pow(2, p1, mod)\n    ans2 = pow(2, p2, mod)\n    ans = (ans1 + ans2 - 2) % mod\n    print(ans)\n    t -= 1", "import math\nmod = 10 ** 9 + 7\nt = int(input())\nwhile t:\n    n = int(input())\n    p1 = math.ceil((n + 1) / 2)\n    p2 = math.floor((n + 1) / 2)\n    ans1 = pow(2, p1, mod)\n    ans2 = pow(2, p2, mod)\n    ans = (ans1 + ans2 - 2) % mod\n    print(ans)\n    t -= 1", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    p1 = math.ceil((n + 1) / 2)\n    p2 = math.floor((n + 1) / 2)\n    ans1 = pow(2, p1, mod)\n    ans2 = pow(2, p2, mod)\n    ans = ans1 + ans2 - 2\n    print(ans % mod)", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    op1 = pow(2, math.ceil((n + 1) / 2), mod)\n    op2 = pow(2, math.floor((n + 1) / 2), mod) - 2\n    print((op1 + op2) % mod)", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    op1 = pow(2, math.ceil((n + 1) / 2), mod)\n    op2 = pow(2, math.floor((n + 1) / 2), mod) - 2\n    print((op1 + op2) % mod)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    p = (pow(2, math.ceil((n + 1) / 2), 10 ** 9 + 7) + pow(2, math.floor((n + 1) / 2), 10 ** 9 + 7) - 2) % (10 ** 9 + 7)\n    print(p)", "import math\nmod = 10 ** 9 + 7\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    print((pow(2, math.ceil((n + 1) / 2), mod) + pow(2, math.floor((n + 1) / 2), mod) - 2) % mod)", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    print((pow(2, math.ceil((n + 1) / 2), mod) + pow(2, math.floor((n + 1) / 2), mod) - 2) % mod)", "import math\ntry:\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        s = 1000000007\n        a = math.ceil((N + 1) / 2)\n        b = (N + 1) // 2\n        print((pow(2, a, s) + pow(2, b, s) - 2) % s)\nexcept:\n    pass", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    s = 1000000007\n    a = math.ceil((N + 1) / 2)\n    b = (N + 1) // 2\n    print((pow(2, a, s) + pow(2, b, s) - 2) % s)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    s = 1000000007\n    a = math.ceil((N + 1) / 2)\n    b = (N + 1) // 2\n    print((pow(2, a, s) + pow(2, b, s) - 2) % s)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    a = math.ceil((n + 1) / 2)\n    b = (n + 1) // 2\n    print((pow(2, a, 1000000007) + pow(2, b, 1000000007) - 2) % 1000000007)", "import math\nimport sys\ninp = sys.stdin.readlines()\nleninp = len(inp) - 1\ni = 1\nt = int(inp[0])\nfor _ in range(t):\n    init = 2\n    n = int(inp[i])\n    i += 1\n    init1 = math.ceil((n + 1) / 2)\n    init2 = (n + 1) // 2\n    output = pow(2, init1, 1000000007) + pow(2, init2, 1000000007) - 2\n    print(output % 1000000007)", "import sys\nfrom random import choice, randint\ninp = sys.stdin.readline\nout = sys.stdout.write\nflsh = sys.stdout.flush\nsys.setrecursionlimit(10 ** 9)\ninf = 10 ** 20\neps = 1.0 / 10 ** 10\nmod = 10 ** 9 + 7\ndd = [(-1, 0), (0, 1), (1, 0), (0, -1)]\nddn = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]\n\ndef MI():\n    return map(int, inp().strip().split())\n\ndef LI():\n    return list(map(int, inp().strip().split()))\n\ndef LLI():\n    return [list(map(int, l.split())) for l in sys.stdin.readlines().strip()]\n\ndef LI_():\n    return [int(x) - 1 for x in inp().strip().split()]\n\ndef LF():\n    return [float(x) for x in inp().strip().split()]\n\ndef LS():\n    return inp().strip().split()\n\ndef I():\n    return int(inp().strip())\n\ndef F():\n    return float(inp().strip())\n\ndef S():\n    return inp().strip()\n\ndef pf(s):\n    return out(s + '\\n')\n\ndef JA(a, sep):\n    return sep.join(map(str, a))\n\ndef JAA(a, s, t):\n    return s.join((t.join(map(str, b)) for b in a))\n\ndef main():\n    from math import ceil, floor\n\n    def fast_exponentiation(base, exp):\n        res = 1\n        while exp:\n            if exp & 1:\n                res = res * base % mod\n            base = base * base % mod\n            exp >>= 1\n        return res % mod\n    t = I()\n    l = []\n    for _ in range(t):\n        n = I()\n        ans = fast_exponentiation(2, ceil((n + 1) / 2)) + fast_exponentiation(2, floor((n + 1) / 2)) - 2\n        l.append(ans % mod)\n    for i in range(t):\n        pf(str(l[i]))\nmain()", "from math import ceil, floor\nfor _ in range(int(input())):\n    N = int(input())\n    A = (pow(2, ceil((N + 1) / 2), 1000000007) + pow(2, floor((N + 1) / 2), 1000000007) - 2) % 1000000007\n    print(A)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = 0\n    if n == 1:\n        print(2)\n    elif n == 2:\n        print(4)\n    elif n % 2 != 0:\n        c = int(pow(2, n // 2 + 1, 1000000007)) - 1\n        print(2 * c % 1000000007)\n    else:\n        c = int(pow(2, n // 2, 1000000007))\n        ans = (2 * (c - 1) + c) % 1000000007\n        print(ans % 1000000007)", "def f(base, exp, mod=1000000007):\n    res = 1\n    while exp > 0:\n        if exp % 2 == 1:\n            res = res * base % mod\n        base = base * base % mod\n        exp = int(exp / 2)\n    return res % mod\n\ndef count(n):\n    if n == 1:\n        return 2\n    exp = int(n / 2)\n    p = f(2, exp, 1000000007)\n    gp = 2 * (p - 1) % 1000000007\n    ans = 2 + 2 * gp\n    if n % 2 == 0:\n        ans -= p\n    return ans % 1000000007\n\ndef c(N):\n    MOD = 1000000007\n    if N % 2 == 0:\n        k = int(N / 2)\n        ans = 3 * pow(2, k, MOD) - 2\n    else:\n        k = int((N + 1) / 2)\n        ans = pow(2, k + 1, MOD) - 2\n    ans = (ans + MOD) % MOD\n    return ans\nfor case in range(int(input())):\n    N = int(input())\n    print(count(N))", "from math import ceil, floor\nfor _ in range(int(input())):\n    N = int(input())\n    print((pow(2, ceil((N + 1) / 2), 1000000007) + pow(2, floor((N + 1) / 2), 1000000007) - 2) % 1000000007)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print((pow(2, math.ceil((n + 1) / 2), 1000000007) + pow(2, math.floor((n + 1) / 2), 1000000007) - 2) % 1000000007)", "mod = 1000000007\nfor _ in range(int(input())):\n    N = int(input())\n    p = N // 2\n    if N % 2 == 1:\n        print((pow(2, p + 2, mod) - 2) % mod)\n    else:\n        print((3 * pow(2, p, mod) - 2) % mod)", "mod = 1000000007\nfor _ in range(int(input())):\n    N = int(input())\n    p = N // 2\n    if N % 2 == 1:\n        print((pow(2, p + 2, mod) - 2) % mod)\n    else:\n        print((3 * pow(2, p, mod) - 2) % mod)", "def ckisshug(n):\n\n    def binary_exponentiation(a, b, p):\n        r = 1\n        while b:\n            if b % 2:\n                r = r * a % p\n            a = a * a % p\n            b >>= 1\n        return r\n    p = 1000000007\n    if n == 1:\n        return 2\n    elif n & 1:\n        A = 4 * (binary_exponentiation(2, n // 2 - 1, p) - 1) % p % p\n        B = 2 * binary_exponentiation(2, n // 2, p) % p\n        return (A % p + B % p) % p + 2\n    else:\n        A = 4 * (binary_exponentiation(2, n // 2 - 1, p) - 1) % p % p\n        B = binary_exponentiation(2, n // 2, p)\n        return (A % p + B % p) % p + 2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(ckisshug(n))", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        ans = (pow(2, (n - 1) // 2 + 1, 1000000007) - 1) * 2 + pow(2, n // 2, 1000000007)\n    else:\n        ans = (pow(2, (n - 1) // 2 + 1, 1000000007) - 1) * 2\n    print(ans % 1000000007)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print((pow(2, math.ceil((n + 1) / 2), 1000000007) + pow(2, math.floor((n + 1) / 2), 1000000007) - 2) % 1000000007)", "mod = int(1000000000.0 + 7)\n\ndef exp(pw):\n    base = 2\n    res = 1\n    while pw > 0:\n        if pw % 2 == 1:\n            res = res * base % mod\n        base = base * base % mod\n        pw //= 2\n    return res % mod\nfor _ in range(int(input())):\n    n = int(input())\n    k = n\n    f = 0\n    if n % 2 == 0:\n        f = 1\n        n = n // 2 - 1\n        n += 2\n    else:\n        n = n // 2\n        n += 2\n    a = exp(n)\n    if f == 1:\n        a = (a + exp(k // 2)) % mod\n    a = (a - 2 % mod) % mod\n    print(a)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print((pow(2, math.ceil((n + 1) / 2), 1000000007) + pow(2, math.floor((n + 1) / 2), 1000000007) - 2) % 1000000007)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print((pow(2, math.ceil((n + 1) / 2), 1000000007) + pow(2, math.floor((n + 1) / 2), 1000000007) - 2) % 1000000007)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        n1 = n // 2\n        print((pow(2, n1 + 1, 1000000007) - 1 + 2 * (pow(2, n1, 1000000007) - 1) + 1) % 1000000007)\n    else:\n        n1 = n // 2\n        print((pow(2, n1 + 1, 1000000007) - 1 + 2 * (pow(2, n1 - 1, 1000000007) - 1) + 1) % 1000000007)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    print((pow(2, math.ceil((n + 1) / 2), 1000000007) + pow(2, math.floor((n + 1) / 2), 1000000007) - 2) % 1000000007)", "from math import ceil, floor\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    x1 = ceil((n + 1) / 2)\n    x2 = floor((n + 1) / 2)\n    print((pow(2, x1, mod) + pow(2, x2, mod) - 2) % mod)", "import math\n\ndef abc(n):\n    e = 10 ** 9 + 7\n    k = math.ceil(n / 2)\n    x = (pow(2, k + 1, e) - 2) % e\n    if n % 2 != 0:\n        return x\n    return (x + pow(2, k, e)) % e\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(abc(n))", "MOD = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    k = 0\n    ans = 0\n    if n % 2 == 0:\n        k = n // 2\n        ans = 3 * pow(2, k, MOD) - 2\n    else:\n        k = (n + 1) // 2\n        ans = pow(2, k + 1, MOD) - 2\n    ans = (ans + MOD) % MOD\n    print(ans)", "import math\n\ndef abc(n):\n    e = 10 ** 9 + 7\n    k = math.ceil(n / 2)\n    x = (pow(2, k + 1, e) - 2) % e\n    if n % 2 != 0:\n        return x\n    return (x + pow(2, k, e)) % e\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(abc(n))", "for i in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        sum = 2 * (pow(2, (n + 1) // 2, 1000000007) - 1)\n    else:\n        val = pow(2, n // 2, 1000000007)\n        sum = 3 * val - 2\n    print(sum % 1000000007)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        sum = 2 * (pow(2, (n + 1) // 2, 1000000007) - 1)\n    else:\n        val = pow(2, n // 2, 1000000007)\n        sum = 3 * val - 2\n    print(sum % 1000000007)", "for _ in range(int(input())):\n    n = int(input())\n    if n % 2 != 0:\n        sum = 2 * (pow(2, (n + 1) // 2, 1000000007) - 1)\n    else:\n        val = pow(2, n // 2, 1000000007)\n        sum = 3 * val - 2\n    print(sum % 1000000007)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        ans = 2 * (pow(2, ceil(n / 2), 10 ** 9 + 7) - 1) % (10 ** 9 + 7)\n    else:\n        ans = (2 * (pow(2, ceil(n / 2), 10 ** 9 + 7) - 1) + pow(2, n // 2, 10 ** 9 + 7)) % (10 ** 9 + 7)\n    print(ans)", "from math import ceil\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2:\n        ans = 2 * (pow(2, ceil(n / 2), 10 ** 9 + 7) - 1) % (10 ** 9 + 7)\n    else:\n        ans = (2 * (pow(2, ceil(n / 2), 10 ** 9 + 7) - 1) + pow(2, n // 2, 10 ** 9 + 7)) % (10 ** 9 + 7)\n    print(ans)", "import math\nt = int(input())\nfor j in range(t):\n    a = int(input())\n    if a % 2 == 0:\n        n = int(a / 2)\n        ans = pow(2, n, 1000000007) - 1\n        ans = 3 * (ans % 1000000007) % 1000000007\n        print(ans + 1)\n    else:\n        n = int((a + 1) / 2)\n        ans = pow(2, n, 1000000007) - 1\n        ans = 2 * (ans % 1000000007) % 1000000007\n        print(ans)", "import math\nt = int(input())\nfor j in range(t):\n    a = int(input())\n    if a % 2 == 0:\n        n = int(a / 2)\n        ans = pow(2, n, 1000000007) - 1\n        ans = 3 * (ans % 1000000007) % 1000000007\n        print(ans + 1)\n    else:\n        n = int((a + 1) / 2)\n        ans = pow(2, n, 1000000007) - 1\n        ans = 2 * (ans % 1000000007) % 1000000007\n        print(ans)", "def poww(power, base):\n    res = 1\n    while power:\n        if power & 1:\n            res *= base % mod\n        base *= base % mod\n        power >>= 1\n    return res\nt = int(input())\nmod = 1000000007\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(2)\n        continue\n    terms = n // 2\n    terms -= 1\n    temp = poww(terms, 2)\n    sumGP = 2 + 4 * (temp - 1)\n    if n % 2 == 0:\n        print((sumGP + temp * 2) % mod)\n    else:\n        print((sumGP + temp * 4) % mod)", "def poww(power, base):\n    res = 1\n    while power:\n        if power & 1:\n            res *= base % mod\n        base *= base % mod\n        power >>= 1\n    return res\nt = int(input())\nmod = 1000000007\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(2)\n        continue\n    terms = n // 2\n    terms -= 1\n    temp = poww(terms, 2)\n    sumGP = 2 + 4 * (temp - 1) % mod\n    if n % 2 == 0:\n        print((sumGP + temp * 2 % mod) % mod)\n    else:\n        print((sumGP + temp * 4 % mod) % mod)", "t = int(input())\nm = 1000000007\nwhile t > 0:\n    n = int(input())\n    if n % 2 == 0:\n        ans = 3 * pow(2, n // 2, m) - 2\n    else:\n        ans = 2 * pow(2, (n + 1) // 2, m) - 2\n    print(ans % m)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    m = 1000000007\n    if n % 2 == 0:\n        z = pow(2, n // 2, m)\n        z = 3 * z - 2\n    else:\n        z = pow(2, (n + 1) // 2, m)\n        z = 2 * z - 2\n    print(z % m)", "test_cases = int(input())\nfor i in range(test_cases):\n    n = int(input())\n    m = 1000000007\n    if n % 2 == 0:\n        z = pow(2, n // 2, m)\n        z = 3 * z - 2\n    else:\n        z = pow(2, (n + 1) // 2, m)\n        z = 2 * z - 2\n    print(z % m)", "def fun(base, exp):\n    res = 1\n    mod = 10 ** 9 + 7\n    while exp > 0:\n        if exp & 1:\n            res = res * base % mod\n        base = base * base % mod\n        exp = exp >> 1\n    return res % mod\nt = int(input())\nMOD = 10 ** 9 + 7\nwhile t > 0:\n    t -= 1\n    N = int(input())\n    ans = 1\n    if N % 2 == 0:\n        k = N // 2\n        ans = 3 * fun(2, k) - 2\n    else:\n        k = (N + 1) // 2\n        ans = fun(2, k + 1) - 2\n    ans = (ans + MOD) % MOD\n    print(int(ans))", "mod = 1000000007\n\ndef power(b, y):\n    result = 1\n    while y > 0:\n        if y % 2 == 1:\n            result = result * b % mod\n        b = b * b % mod\n        y //= 2\n    return result % mod\nfor i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(2)\n        continue\n    if n & 1:\n        d = n // 2\n        c = n // 2\n    else:\n        d = n // 2\n        c = n // 2 - 1\n    ans = 2 + 2 * (power(2, d) + power(2, c) - 2)\n    print(ans % mod)", "M = 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 2 == 0:\n        ans = 3 * pow(2, n // 2, M) - 2\n    else:\n        ans = 2 * pow(2, (n + 1) // 2, M) - 2\n    print(ans % M)", "N = 1000000007\n\ndef power(bas, exp):\n    if exp == 0:\n        return 1\n    if exp == 1:\n        return bas % N\n    t = power(bas, int(exp / 2))\n    t = t * t % N\n    if exp % 2 == 0:\n        return t\n    else:\n        return bas % N * t % N\nfor _ in range(int(input())):\n    n = int(input())\n    res = 2\n    if (n - 1) % 2 == 1:\n        exp = int(n / 2)\n        res += power(2, exp) + 2 * 2 * (power(2, int((n - 2) / 2)) - 1)\n    else:\n        exp = int((n - 1) / 2)\n        res += 2 * 2 * (power(2, exp) - 1)\n    if res > N:\n        print(res % N)\n    else:\n        print(res)"]