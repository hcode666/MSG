["def toneMerge(tone, n):\n    if n == 2:\n        return sum(tone)\n    n = n * 2\n    tone = tone + tone\n    dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n    sk = [[None] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        (dp[i][i], sk[i][i]) = (0, i)\n    sm = [tone[0]]\n    for i in range(1, n):\n        sm.append(sm[i - 1] + tone[i])\n    for gap in range(1, n // 2):\n        for i in range(n - gap):\n            j = i + gap\n            tmp = sm[j] - [0, sm[i - 1]][i > 0]\n            (i1, j1) = (sk[i][j - 1], sk[i + 1][j] + 1)\n            for k in range(i1, j1):\n                if dp[i][j] > dp[i][k] + dp[k + 1][j] + tmp:\n                    (dp[i][j], sk[i][j]) = (dp[i][k] + dp[k + 1][j] + tmp, k)\n    return min([dp[i][i + n // 2 - 1] for i in range(n // 2)])\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(toneMerge(lst, n))", "def toneMerge(tone, n):\n    if n == 2:\n        return sum(tone)\n    n = n * 2\n    tone = tone + tone\n    dp = [[float('inf')] * (n + 1) for _ in range(n + 1)]\n    sk = [[None] * (n + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        (dp[i][i], sk[i][i]) = (0, i)\n    sm = [tone[0]]\n    for i in range(1, n):\n        sm.append(sm[i - 1] + tone[i])\n    for gap in range(1, n // 2):\n        for i in range(n - gap):\n            j = i + gap\n            tmp = sm[j] - [0, sm[i - 1]][i > 0]\n            (i1, j1) = (sk[i][j - 1], sk[i + 1][j] + 1)\n            for k in range(i1, j1):\n                if dp[i][j] > dp[i][k] + dp[k + 1][j] + tmp:\n                    (dp[i][j], sk[i][j]) = (dp[i][k] + dp[k + 1][j] + tmp, k)\n    return min([dp[i][i + n // 2 - 1] for i in range(n // 2)])\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    print(toneMerge(lst, n))", "def f(a):\n    n = len(a)\n    c = [[0 for x in range(n)] for y in range(n)]\n    for i in range(n):\n        c[i][i] = a[i]\n    for i in range(n):\n        for j in range(i + 1, n):\n            c[i][j] = c[i][j - 1] + a[j]\n    for i in range(n):\n        for j in range(i):\n            c[i][j] = c[i][j - 1] + a[j]\n    return c\n\ndef g(a, c):\n    n = len(a)\n    z = [[0 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        z[i][i] = i\n    m = [[1 for x in range(n)] for x in range(n)]\n    for i in range(n):\n        m[i][i] = 0\n    for l in range(2, n + 1):\n        for i in range(n):\n            j = i + l - 1\n            m[i % n][j % n] = 10 ** 15\n            k = z[i % n][(j - 1) % n]\n            while k != (z[(i + 1) % n][j % n] + 1) % n:\n                q = m[i % n][k % n] + m[(k + 1) % n][j % n] + c[i % n][j % n]\n                if q < m[i % n][j % n]:\n                    m[i % n][j % n] = q\n                    z[i % n][j % n] = k\n                k = (k + 1) % n\n    b = []\n    for i in range(n + 1):\n        b.append(m[i % n][(i - 1) % n])\n    return min(b)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = f(a)\n    print(g(a, s))"]