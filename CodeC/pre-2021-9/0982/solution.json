["for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    l.reverse()\n    (i, j) = (0, 1)\n    (cs, ans) = (sum(l), sum(l))\n    while k > 0:\n        p = l[i] + l[i + 1]\n        cs -= p\n        if j * x + cs < ans:\n            ans = j * x + cs\n        i += 2\n        j += 1\n        k -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    l.reverse()\n    (i, j) = (0, 1)\n    (cs, ans) = (sum(l), sum(l))\n    while k > 0:\n        p = l[i] + l[i + 1]\n        cs -= p\n        if j * x + cs < ans:\n            ans = j * x + cs\n        i += 2\n        j += 1\n        k -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    l.reverse()\n    (i, j) = (0, 1)\n    (cs, ans) = (sum(l), sum(l))\n    while k > 0:\n        p = l[i] + l[i + 1]\n        cs -= p\n        if j * x + cs < ans:\n            ans = j * x + cs\n        i += 2\n        j += 1\n        k -= 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    j = 0\n    s = 0\n    while j < n:\n        if k == 0:\n            break\n        if j + 1 < n:\n            a = l[j] + l[j + 1]\n            if a > x:\n                s += x\n                j += 2\n                k -= 1\n            else:\n                break\n    z = l[j:]\n    s += sum(z)\n    print(s)", "t = int(input())\nfor i in range(t):\n    (n, k, x) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    lis.sort(reverse=True)\n    j = 0\n    sumi = 0\n    while j < n:\n        if k == 0:\n            break\n        if j + 1 < n:\n            temp = lis[j] + lis[j + 1]\n            if temp > x:\n                sumi += x\n                j += 2\n                k = k - 1\n            else:\n                break\n    z = lis[j:]\n    sumi += sum(z)\n    print(sumi)", "import math\nfor q in range(int(input())):\n    (n, k, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    sum1 = 0\n    index = -1\n    for i in range(n - 1):\n        if a[i] + a[i + 1] > x and i > n - 2 * k - 1:\n            index = i\n            break\n        sum1 += a[i]\n        if i == n - 2:\n            sum1 += a[i + 1]\n    if index != -1:\n        temp = n - index\n        if temp % 2 == 0:\n            sum1 += x * (temp // 2)\n        elif index == n - 1:\n            sum1 += a[index]\n        else:\n            sum1 += a[index]\n            sum1 += x * (temp // 2)\n    print(sum1)", "for _ in range(int(input())):\n    (N, K, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    cost = 0\n    done = 1\n    A.sort()\n    while len(A) > 2 * K:\n        cost += A[0]\n        A.pop(0)\n    if K == 0:\n        print(cost)\n    else:\n        while A:\n            if A[0] + A[1] < X:\n                cost += A[0] + A[1]\n                A.pop(0)\n                A.pop(0)\n            else:\n                cost += X\n                A.pop(0)\n                A.pop(0)\n        print(cost)", "for i in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=1)\n    i = 0\n    ans = 0\n    while i + 1 < n and a[i] + a[i + 1] > x and (k > 0):\n        ans += x\n        i += 2\n        k -= 1\n        if k == 0:\n            break\n    if i == n:\n        print(ans)\n    else:\n        print(ans + sum(a[i:]))", "t = int(input())\nfor i in range(t):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    ans = 0\n    while k and len(a) > 1 and (a[-1] + a[-2] > x):\n        ans += x\n        k -= 1\n        a.pop(-1)\n        a.pop(-1)\n    ans += sum(a)\n    print(ans)", "from sys import stdin\nfrom collections import deque\nimport sys\nfrom functools import lru_cache\nsys.setrecursionlimit(10 ** 6)\n\ndef solve(n, k, x, nums):\n    nums.sort()\n    pair = []\n    result = 0\n    while nums:\n        pair.append(nums.pop())\n        if len(pair) == 2 and sum(pair) >= x and (k > 0):\n            k -= 1\n            result += x\n            pair = []\n    result = result + sum(pair) + sum(nums)\n    print(result)\ninput = stdin.readline\nln = int(input())\nfor _ in range(ln):\n    (n, k, x) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    solve(n, k, x, nums)", "for _ in range(int(input())):\n    (n, k, v) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a = sorted(a)\n    ans = 0\n    while k and len(a) > 1 and (a[-1] + a[-2] > v):\n        ans += v\n        k -= 1\n        a.pop(-1)\n        a.pop(-1)\n    ans += sum(a)\n    print(ans)", "for _ in range(int(input())):\n    (n, k, v) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a = sorted(a)\n    ans = 0\n    while k and len(a) > 1 and (a[-1] + a[-2] > v):\n        ans += v\n        k -= 1\n        a.pop(-1)\n        a.pop(-1)\n    ans += sum(a)\n    print(ans)", "def mincost(k, l):\n    n = k[0]\n    t = k[1]\n    x = k[2]\n    cost = 0\n    l = sorted(l)\n    c = 0\n    i = n - 1\n    while c == 0 and i >= 1:\n        if l[i] + l[i - 1] >= x and t != 0:\n            cost += x\n            t = t - 1\n            i = i - 2\n        else:\n            c += 1\n    if i == -1:\n        return cost\n    for m in range(i + 1):\n        cost += l[m]\n    return cost\nt = int(input())\nfor i in range(t):\n    k = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    print(mincost(k, l))", "t = int(input())\nfor i in range(t):\n    (n, k, x) = map(int, input().split())\n    numbers = [int(x) for x in input().split()]\n    numbers.sort(reverse=True)\n    minCost = 0\n    for j in range(k):\n        if len(numbers) >= 2:\n            first = numbers[0]\n            second = numbers[1]\n            s = first + second\n            if x < s:\n                minCost += x\n                numbers.remove(first)\n                numbers.remove(second)\n            else:\n                break\n        else:\n            break\n    minCost += sum(numbers)\n    print(minCost)", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = sum(a)\n    for i in range(0, 2 * k, 2):\n        if a[i] + a[i + 1] > x:\n            ans = ans - (a[i] + a[i + 1] - x)\n    print(ans)", "test = int(input())\nfor t in range(test):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr, reverse=True)\n    i = 0\n    sm = 0\n    while k > 0 and i < n - 1:\n        if arr[i] + arr[i + 1] < x:\n            break\n        sm += x\n        i += 2\n        k -= 1\n    print(sm + sum(arr[i:]))", "T = int(input())\nfor t in range(T):\n    (n, k, x) = [int(i) for i in str(input()).split()]\n    arr = [int(i) for i in str(input()).split()]\n    arr = sorted(arr, reverse=True)\n    final = 0\n    idx = 0\n    while True:\n        if arr[idx] + arr[idx + 1] > x and k > 0:\n            final += x\n            k -= 1\n            idx += 2\n        else:\n            final += arr[idx] + arr[idx + 1]\n            idx += 2\n        if idx == len(arr):\n            break\n        if idx == len(arr) - 1:\n            final += arr[idx]\n            break\n    print(final)", "t = int(input())\nfor _ in range(t):\n    (N, K, X) = [int(x) for x in input().split()]\n    sequence = [int(x) for x in input().split()]\n    sequence.sort()\n    cost = sum(sequence[0:N - 2 * K])\n    if K > 0:\n        for i in range(N - 2 * K, N, 2):\n            total = sequence[i] + sequence[i + 1]\n            cost += min(total, X)\n    else:\n        cost += sum(sequence[N - 2 * K:])\n    print(cost)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    clear = [0]\n    clear.extend(sorted(list(map(int, input().split()))))\n    count = 0\n    while n - 1 >= 0:\n        if clear[n] + clear[n - 1] > x and k != 0:\n            count += x\n            k -= 1\n            n -= 2\n        else:\n            count += clear[n]\n            n -= 1\n    print(count)", "from queue import PriorityQueue\nt = int(input())\nwhile t:\n    (n, k, x) = map(int, input().split())\n    a = []\n    pq = PriorityQueue()\n    ans = 0\n    for j in input().split():\n        j = int(j)\n        a.append(j)\n        pq.put(-1 * j)\n    while k and pq.qsize() > 1:\n        k -= 1\n        c = -1 * pq.get()\n        d = -1 * pq.get()\n        if c + d < x:\n            pq.put(-1 * c)\n            pq.put(-1 * d)\n            break\n        ans += x\n    while not pq.empty():\n        z = -1 * pq.get()\n        ans += z\n    print(ans)\n    t -= 1", "t = int(input())\nwhile t:\n    (N, K, X) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    count = 0\n    arr.sort()\n    n = N\n    if N == 0:\n        print(0)\n    if N == 1:\n        print(arr[0])\n    while K > 0 and len(arr) > 1:\n        sz = len(arr)\n        if X < arr[sz - 1] + arr[sz - 2]:\n            arr.pop()\n            arr.pop()\n            count += X\n            K -= 1\n        else:\n            break\n    for i in range(len(arr)):\n        count += arr[i]\n    print(count)\n    t -= 1", "from collections import deque\nt = int(input())\nfor _ in range(0, t):\n    (n, k, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    a = deque(a)\n    if len(a) == 1:\n        print(a[0])\n        continue\n    if k == 0:\n        print(sum(a))\n        continue\n    s = 0\n    for i in range(0, k):\n        if len(a) <= 1:\n            break\n        if a[0] + a[1] > x:\n            s += x\n            a.popleft()\n            a.popleft()\n        else:\n            break\n    s += sum(a)\n    print(s)", "t = int(input())\nfor tt in range(t):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    i = n - 1\n    result = 0\n    for j in range(k):\n        if arr[i] + arr[i - 1] >= x:\n            result += x\n            i -= 2\n        else:\n            break\n    while i >= 0:\n        result += arr[i]\n        i -= 1\n    print(result)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().strip().split())\n    l = list(map(int, input().strip().split()))\n    if k == 0:\n        print(sum(l))\n        continue\n    l.sort()\n    ll = l[-2 * k:]\n    total = sum(l[:-2 * k])\n    for i in range(0, len(ll) - 1, 2):\n        if ll[i] + ll[i + 1] < x:\n            total += ll[i] + ll[i + 1]\n        else:\n            total += x\n    print(total)", "for _ in range(int(input())):\n    (n, k, x) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    l.sort()\n    cost = 0\n    a = len(l)\n    d = a - 2 * k\n    i = 0\n    while i < a:\n        if i < d:\n            cost += l[i]\n            i += 1\n        elif l[i] + l[i + 1] < x:\n            cost += l[i] + l[i + 1]\n            i += 2\n            k -= 1\n        else:\n            cost += x * k\n            break\n    print(cost)", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = sum(a)\n    for i in range(0, 2 * k, 2):\n        if i + 1 < n and a[i] + a[i + 1] > x:\n            ans = ans - (a[i] + a[i + 1] - x)\n    print(ans)", "for i in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    pos = -1\n    for j in range(0, n - 1, 2):\n        if k == 0:\n            break\n        s1 = a[j] + a[j + 1]\n        ans += min(s1, x)\n        k -= 1\n        pos = j + 1\n    for j in range(pos + 1, n):\n        ans += a[j]\n    print(ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    l = sorted(list(map(int, input().split())), reverse=True)\n    cost = i = 0\n    while True:\n        if i == len(l) - 1:\n            cost += l[i]\n            break\n        elif i >= len(l):\n            break\n        elif l[i] + l[i + 1] > x and k > 0:\n            cost += x\n            k -= 1\n        elif l[i] + l[i + 1] <= x or k == 0:\n            cost += l[i] + l[i + 1]\n        i += 2\n    print(cost)", "import collections\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    li = list(map(int, input().split()))\n    li.sort(reverse=True)\n    ans = 0\n    dq = collections.deque(li)\n    for i in range(k):\n        if len(dq) < 2:\n            break\n        a = dq.popleft()\n        b = dq.popleft()\n        if a + b < x:\n            ans += a + b\n            break\n        ans += x\n    print(sum(dq) + ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())))\n    s = 0\n    for i in range(n):\n        if i == n - 2 * k:\n            break\n        s += arr[i]\n    else:\n        i += 1\n    print(sum([min(x, arr[i] + arr[i + 1]) for i in range(i, n, 2)]) + s)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    s = 0\n    for i in range(n):\n        if i == n - 2 * k:\n            break\n        s += arr[i]\n    else:\n        i += 1\n    pairDel = 0\n    for i in range(i, n, 2):\n        if arr[i] + arr[i + 1] > x:\n            pairDel += x\n        else:\n            pairDel += arr[i] + arr[i + 1]\n    print(pairDel + s)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    ans = 0\n    while len(arr) >= 2 and arr[-1] + arr[-2] >= x and (k > 0):\n        arr.pop()\n        arr.pop()\n        ans += x\n        k -= 1\n    ans += sum(arr)\n    print(ans)", "def solution(arr, k, x):\n    if k == 0:\n        return sum(arr)\n    min_cost = 0\n    for i in range(k):\n        if len(arr) < 2:\n            return sum(arr) + min_cost\n        S = arr[-1]\n        arr.pop()\n        S += arr[-1]\n        arr.pop()\n        if S < x:\n            return min_cost + S + sum(arr)\n        min_cost += x\n    return min_cost + sum(arr)\nfor i in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    print(solution(arr, k, x))", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    d = dict()\n    l = [int(i) for i in input().split()]\n    l = sorted(l)\n    ans = 0\n    while len(l) > 1:\n        f = 0\n        if len(l) > 1 and l[-1] + l[-2] > x and k:\n            ans += x\n            f = 1\n            l = l[:-2]\n            k -= 1\n        if f == 0:\n            ans += l[-1]\n            l = l[:-1]\n    print(ans + sum(l))", "def solveF(N, K, X, A):\n    A.sort()\n    index = 0\n    single_remove = len(A) - 2 * K\n    cost = 0\n    while index < single_remove:\n        cost += A[index]\n        index += 1\n    if (len(A) - index) % 2:\n        cost += A[index]\n        index += 1\n    while index <= N - 2 and A[index] + A[index + 1] < X:\n        cost += A[index] + A[index + 1]\n        index += 2\n    cost += X * (len(A) - index) // 2\n    return cost\nfor _ in range(int(input())):\n    (N, K, X) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    print(solveF(N, K, X, A))", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    ans = 0\n    a = sorted(arr)\n    ind = len(a) - 1\n    while k > 0 and len(a) > 1:\n        m = len(a)\n        sum1 = a[m - 1] + a[m - 2]\n        if x <= sum1:\n            a.pop(m - 1)\n            a.pop(m - 2)\n            ans += x\n            k -= 1\n        else:\n            break\n    ans += sum(a[:])\n    print(ans)", "def clearArr(arr, n, k, x):\n    sumi = sum(arr)\n    if k == 0:\n        return sumi\n    arr.sort(reverse=True)\n    prs = []\n    i = 0\n    while i + 1 < n and k:\n        if arr[i] + arr[i + 1] > x:\n            prs.append(arr[i])\n            prs.append(arr[i + 1])\n            k -= 1\n        i += 2\n    suma = sum(prs)\n    le = len(prs)\n    return sumi - suma + x * (le // 2)\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    print(clearArr(arr, n, k, x))", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if k == 0:\n        print(sum(l))\n        continue\n    l = sorted(l, reverse=True)\n    ans = 0\n    i = 0\n    while i < len(l) - 1 and k > 0:\n        if l[i] + l[i + 1] > x:\n            ans += x\n            l[i] = 0\n            l[i + 1] = 0\n            i += 2\n            k -= 1\n        else:\n            break\n    ans += sum(l)\n    print(ans)", "import heapq\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ls = []\n    heapq.heapify(ls)\n    for i in a:\n        heapq.heappush(ls, -1 * i)\n    ans = 0\n    for i in range(k):\n        p = -1 * heapq.heappop(ls)\n        q = -1 * heapq.heappop(ls)\n        if q + p < x:\n            ans += p + q\n            break\n        ans += x\n    for i in ls:\n        ans += -1 * i\n    print(ans)", "import heapq\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ls = []\n    heapq.heapify(ls)\n    for i in a:\n        heapq.heappush(ls, -1 * i)\n    ans = 0\n    for i in range(k):\n        p = -1 * heapq.heappop(ls)\n        q = -1 * heapq.heappop(ls)\n        if q + p < x:\n            ans += p + q\n            break\n        ans += x\n    for i in ls:\n        ans += -1 * i\n    print(ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    cost = sum(arr[:n - 2 * k])\n    arr = arr[n - 2 * k:]\n    for i in range(k):\n        cost += min(arr[2 * i] + arr[2 * i + 1], x)\n    print(cost)", "for __ in range(int(input())):\n    (N, K, X) = map(int, input().split())\n    A = list(map(int, input().split()))\n    cost = sum(A)\n    A.sort(reverse=True)\n    for i in range(0, 2 * K, 2):\n        if X <= A[i] + A[i + 1]:\n            cost += X - (A[i] + A[i + 1])\n    print(cost)", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    cost = 0\n    i = 0\n    while k > 0 and len(a) > 1:\n        i = len(a)\n        if a[i - 1] + a[i - 2] >= x:\n            cost += x\n            a.pop(-1)\n            a.pop(-1)\n            k -= 1\n        else:\n            break\n    cost += sum(a)\n    print(cost)", "for tc in range(int(input())):\n    ls = list(map(int, input().split()))\n    lk = list(map(int, input().split()))\n    lk.sort(reverse=True)\n    val = ls[2]\n    k = ls[1]\n    su = 0\n    for x in range(0, len(lk) - 1, 2):\n        if k > 0:\n            if lk[x] + lk[x + 1] > val:\n                su += val\n                k -= 1\n            else:\n                su += lk[x] + lk[x + 1]\n        else:\n            su += lk[x] + lk[x + 1]\n    if len(lk) % 2 == 1:\n        su += lk[-1]\n    print(su)", "import heapq\nt = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    t = k\n    nos = list(map(int, input().split()))\n    q = []\n    rems = []\n    nos.sort(reverse=True)\n    ans = sum(nos)\n    for i in range(0, 2 * k, 2):\n        if nos[i] + nos[i + 1] > x:\n            ans += x - nos[i] - nos[i + 1]\n    print(ans)", "for t in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    A = [int(i) for i in input().split()]\n    A.sort()\n    res = 0\n    while k > 0:\n        res += min(x, A.pop() + A.pop())\n        k -= 1\n    while len(A) > 0:\n        res += A.pop()\n    print(res)", "import sys\n\ndef yn(val):\n    re = ['Yes', 'No']\n    return re[val]\n\ndef Ajay():\n    aj = chr(65) + chr(74) + chr(64) + chr(165)\n    return aj\n\ndef main():\n    (a, b, c) = map(int, sys.stdin.readline().split())\n    arr = list(map(int, input().split()))\n    if b == 0:\n        return sum(arr)\n    arr.sort(reverse=True)\n    ans = 0\n    for i in range(0, b * 2, 2):\n        if i + 1 < a:\n            ans += min(c, arr[i] + arr[i + 1])\n    ans += sum(arr[b * 2:])\n    return ans\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    print(main())", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    s = 0\n    sss = 0\n    for i in range(0, 2 * k, 2):\n        sss += l[i] + l[i + 1]\n        if l[i] + l[i + 1] > x:\n            s += x\n        else:\n            sss -= l[i] + l[i + 1]\n            break\n    ss = sum(l)\n    print(ss - sss + s)", "def solve():\n    (n, k, x) = [int(i) for i in input().split(' ')]\n    arr = [int(i) for i in input().split(' ')]\n    arr.sort(reverse=True)\n    sol = 0\n    for i in range(0, n, 2):\n        if k <= 0:\n            ind = i\n            break\n        if arr[i] + arr[i + 1] > x:\n            sol += x\n            k -= 1\n            ind = i + 2\n        else:\n            ind = i\n            break\n    sol += sum(arr[ind:])\n    print(sol)\n    return\nt = int(input())\nfor tests in range(t):\n    solve()", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = [int(i) for i in input().split()]\n    l = [int(i) for i in input().split()]\n    l.sort(reverse=True)\n    (i, s) = (0, 0)\n    while i < n - 1 and k != 0:\n        if l[i] > x:\n            s += x\n            k -= 1\n            i += 2\n        elif l[i] + l[i + 1] > x:\n            s += x\n            k -= 1\n            i += 2\n        else:\n            break\n    s += sum(l[i:])\n    print(s)", "def solve(array, k, sub):\n    array.sort()\n    cost = 0\n    index = len(array) - 1\n    while index >= 0:\n        if k > 0 and index > 0 and (sub <= array[index] + array[index - 1]):\n            cost += sub\n            index -= 2\n            k -= 1\n        else:\n            cost += sum(array[:index + 1])\n            break\n    return cost\ntest = int(input())\nfor _ in range(test):\n    (n, k, xx) = [int(x) for x in input().split()]\n    array = [int(x) for x in input().split()]\n    print(solve(array, k, xx))", "T = int(input())\nfor t in range(T):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    pair = 0\n    ts = 0\n    s = 0\n    i = n - 1\n    while pair < k and i >= 0:\n        if arr[i] + arr[i - 1] >= x:\n            s += x\n            pair += 1\n            i -= 2\n        else:\n            break\n    rest = sum(arr[:i + 1])\n    print(rest + s)", "from collections import Counter\nt = int(input())\nwhile t:\n    ans = 0\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = sum(l)\n    l = sorted(l, reverse=1)\n    for q in range(k):\n        s = l[q * 2] + l[q * 2 + 1]\n        if s > x:\n            ans = ans - s + x\n        else:\n            break\n    print(ans)\n    t = t - 1", "from collections import Counter\nt = int(input())\nwhile t:\n    ans = 0\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = sum(l)\n    l = sorted(l, reverse=1)\n    for q in range(k):\n        s = l[q * 2] + l[q * 2 + 1]\n        if s > x:\n            ans = ans - s + x\n        else:\n            break\n    print(ans)\n    t = t - 1", "t = int(input())\nwhile t:\n    ans = 0\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = sum(l)\n    l = sorted(l, reverse=1)\n    for q in range(k):\n        s = l[q * 2] + l[q * 2 + 1]\n        if s > x:\n            ans = ans - s + x\n        else:\n            break\n    print(ans)\n    t = t - 1", "for i in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    a.sort(reverse=True)\n    (ans, j) = (0, 0)\n    while j < len(a):\n        if j + 1 < len(a) and a[j] + a[j + 1] >= x and (k > 0):\n            ans += x\n            j += 2\n            k -= 1\n        else:\n            ans += a[j]\n            j += 1\n    print(ans)", "import sys\nimport math\nfrom collections import defaultdict\nmod = 1000000007\nT = 1\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort(reverse=True)\n    s = 0\n    pos = 0\n    flg = 1\n    for i in range(0, k):\n        t = l[i << 1] + l[i << 1 | 1]\n        if t <= x:\n            pos = i << 1\n            flg = 1\n            break\n        s += x\n        flg = 0\n    if flg == 0:\n        pos = k << 1\n    s += sum(l[pos:])\n    print(s)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    cost = 0\n    length = n\n    while length:\n        if length >= 2 and arr[-1] + arr[-2] >= x and (k > 0):\n            length -= 2\n            cost += x\n            arr = arr[0:len(arr) - 2]\n            k -= 1\n        elif length >= 1:\n            length -= 1\n            cost += arr[-1]\n            arr = arr[0:len(arr) - 1]\n    print(cost)", "def costClrArr(n, k, x, arr):\n    totalCost = 0\n    if n == 1:\n        return arr[0]\n    if n == 2:\n        return min(x, arr[0] + arr[1])\n    arr = arr[::-1]\n    i = 0\n    while k > 0:\n        c = arr[i] + arr[i + 1]\n        if x <= c:\n            totalCost = totalCost + x\n            k -= 1\n            i += 2\n        else:\n            k = 0\n    for idx in range(i, n):\n        totalCost = totalCost + arr[idx]\n    return totalCost\nt = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().strip().split(' '))\n    arr = sorted(list(map(int, input().strip().split(' '))))\n    print(costClrArr(n, k, x, arr))", "t = int(input())\nfor test in range(t):\n    (n, k, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    i = n - 2\n    j = n - 1\n    res = 0\n    while i >= 0:\n        if a[i] + a[j] >= x and k > 0:\n            res += x\n            i -= 2\n            j -= 2\n            k -= 1\n        else:\n            res += a[i] + a[j]\n            i -= 2\n            j -= 2\n    if j == 0:\n        res += a[j]\n    print(res)", "for i in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    pos = -1\n    for j in range(0, n - 1, 2):\n        if k == 0:\n            break\n        s1 = a[j] + a[j + 1]\n        ans += min(s1, x)\n        k -= 1\n        pos = j + 1\n    for j in range(pos + 1, n):\n        ans += a[j]\n    print(ans)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nlim = mod * mod\nsys.setrecursionlimit(depth)\nfrom math import inf, ceil, sqrt\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a, reverse=True)\n    (ans, i) = (0, 1)\n    while i < n and k and (a[i - 1] + a[i] >= x):\n        ans += x\n        k -= 1\n        i += 2\n    i -= 1\n    while i < n:\n        ans += a[i]\n        i += 1\n    print(ans)", "import copy\n\ndef minimumcost(arr, n, k, x):\n    sumi = sum(arr)\n    arr.sort(reverse=True)\n    if k == 0:\n        return sumi\n    prs = []\n    i = 0\n    while i < n and k:\n        if arr[i] + arr[i + 1] > x:\n            prs.append(arr[i])\n            prs.append(arr[i + 1])\n        k -= 1\n        i += 2\n    sumb = sum(prs)\n    sumi = sumi - sumb + len(prs) * x // 2\n    return sumi\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    print(minimumcost(arr, n, k, x))", "def prog_name():\n    (n, k, const) = map(int, input().split())\n    l = list(map(int, input().split()))\n    if k == 0:\n        print(sum(l))\n    else:\n        l.sort()\n        cost = 0\n        l.reverse()\n        ind = 0\n        while k > 0:\n            k -= 1\n            cost += min(l[ind] + l[ind + 1], const)\n            ind += 2\n        cost += sum(l[ind:])\n        print(cost)\nT = int(input())\nfor unique in range(T):\n    prog_name()", "import math\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if k == 0:\n        print(sum(a))\n    else:\n        a.sort(reverse=True)\n        new1 = a[:2 * k]\n        new = a[2 * k:]\n        price = 0\n        price += sum(new)\n        for i in range(0, 2 * k, 2):\n            price += min(new1[i] + new1[i + 1], x)\n        print(price)", "for t in range(int(input())):\n    (N, K, X) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cost = 0\n    i = N - 1\n    arr.sort()\n    while K:\n        if arr[i] + arr[i - 1] > X:\n            cost += X\n            K -= 1\n            i -= 2\n        else:\n            break\n    cost += sum(arr[:i + 1])\n    print(cost)", "import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 5)\nT = int(input())\nfor _ in range(T):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    ans = 0\n    c = 0\n    for i in range(0, n - 1, 2):\n        if k:\n            xx = arr[i] + arr[i + 1]\n            if x >= xx:\n                break\n            else:\n                ans += x\n                k -= 1\n                c += 2\n    for j in range(c, n):\n        ans += arr[j]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    j = n - 1\n    a.sort()\n    j = n - 1\n    ans = 0\n    for i in range(k):\n        q = a[j] + a[j - 1]\n        if q < x:\n            break\n        else:\n            ans += x\n            j -= 2\n    while j != -1:\n        ans += a[j]\n        j -= 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    cost = 0\n    i = n - 1\n    while k > 0 and i > 0:\n        if a[i] + a[i - 1] >= x:\n            k -= 1\n            cost += x\n        else:\n            break\n        i -= 2\n    for j in range(0, i + 1):\n        cost += a[j]\n    print(cost)", "t = int(input())\nwhile t > 0:\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = sum(a)\n    for i in range(0, 2 * k, 2):\n        if i + 1 < n and a[i] + a[i + 1] > x:\n            ans = ans - (a[i] + a[i + 1] - x)\n    print(ans)\n    t = t - 1", "import heapq\ntest = int(input())\nfor i in range(0, test):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for i in range(0, n):\n        arr[i] = 0 - arr[i]\n    heapq.heapify(arr)\n    counter = 0\n    for i in range(0, k):\n        s = heapq.heappop(arr)\n        t = heapq.heappop(arr)\n        if abs(s) + abs(t) >= x:\n            counter = counter + x\n        else:\n            counter = counter + abs(s) + abs(t)\n    g = list(arr)\n    for i in g:\n        counter = counter + abs(i)\n    print(counter)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    s = 0\n    l = list(map(int, input().split()))\n    l.sort()\n    while k > 0 and len(l) > 1:\n        if l[-1] + l[-2] > x:\n            s += x\n            k -= 1\n            l.pop()\n            l.pop()\n        else:\n            break\n    s = sum(l) + s\n    print(s)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    i = len(arr) - 1\n    j = len(arr) - 2\n    cost = 0\n    if k == 0:\n        print(sum(arr))\n    else:\n        while k > 0:\n            if arr[i] + arr[j] > x:\n                cost += x\n            else:\n                break\n            i -= 2\n            j -= 2\n            k -= 1\n        for i in range(i + 1):\n            cost += arr[i]\n        print(cost)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    s = 0\n    l = list(map(int, input().split()))\n    l.sort()\n    while k > 0 and len(l) > 1:\n        if l[-1] + l[-2] > x:\n            s += x\n            k -= 1\n            l.pop()\n            l.pop()\n        else:\n            break\n    s = sum(l) + s\n    print(s)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split(' '))\n    arr = [int(w) for w in input().split(' ')]\n    arr.sort(reverse=True)\n    ans = sum(arr)\n    i = 0\n    while i < n and i + 1 < n:\n        if k == 0:\n            break\n        if arr[i] + arr[i + 1] > x:\n            ans = ans - (arr[i] + arr[i + 1] - x)\n            k = k - 1\n        else:\n            break\n        if k == 0:\n            break\n        i = i + 2\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sum = 0\n    arr.sort(reverse=True)\n    pos = -1\n    for j in range(0, n - 1, 2):\n        if k == 0:\n            break\n        s = arr[j] + arr[j + 1]\n        sum += min(s, x)\n        k -= 1\n        pos = j + 1\n    for j in range(pos + 1, n):\n        sum += arr[j]\n    print(sum)", "for _ in range(int(input())):\n    (n, k, x) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    a.sort()\n    cost = 0\n    lenth = len(a)\n    krange = lenth - 2 * k\n    i = 0\n    while i < lenth:\n        if i < krange:\n            cost += a[i]\n            i += 1\n        elif a[i] + a[i + 1] < x:\n            cost += a[i] + a[i + 1]\n            i += 2\n            k -= 1\n        else:\n            cost += x * k\n            break\n    print(cost)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    flag = 1\n    i = 0\n    ans = 0\n    while i < n:\n        if i + 1 < n and k > 0 and flag:\n            if a[i] + a[i + 1] > x:\n                ans += x\n                i += 2\n                k -= 1\n            else:\n                flag = 0\n                ans += a[i]\n                i += 1\n        else:\n            ans += a[i]\n            i += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = sum(a)\n    a.sort(reverse=True)\n    t1 = 0\n    r = 0\n    while t1 == 0:\n        if a[r] + a[r + 1] > x and k > 0:\n            c = c - (a[r] + a[r + 1]) + x\n            k = k - 1\n            r = r + 2\n        else:\n            r = r + 1\n        if k == 0:\n            t1 == 1\n            break\n        if r >= n - 1:\n            t1 == 1\n            break\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    i = n - 1\n    ans = 0\n    while i >= 1 and k > 0:\n        temp = arr[i] + arr[i - 1]\n        if temp <= x:\n            ans = ans + temp\n        else:\n            ans = ans + x\n            k = k - 1\n        i = i - 2\n    if i != -1:\n        for i in range(i, -1, -1):\n            ans += arr[i]\n    print(ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    lst.sort(reverse=True)\n    s = 0\n    i = 0\n    while k > 0:\n        if lst[i] + lst[i + 1] > x and k > 0:\n            s += x\n            i += 2\n            k -= 1\n        else:\n            break\n    for j in range(i, len(lst)):\n        s += lst[j]\n    print(s)", "mod = 1000000007\nfrom math import factorial, ceil, pow, sqrt, floor\nfrom sys import stdin, stdout\nfrom collections import defaultdict, Counter, deque\nfor _ in range(int(stdin.readline())):\n    (n, k, x) = map(int, stdin.readline().split())\n    li = list(map(int, stdin.readline().split()))\n    li.sort()\n    i = n\n    ans = 0\n    while i > 1:\n        if k > 0:\n            if x > li[i - 1] + li[i - 2]:\n                ans += li[i - 1] + li[i - 2]\n            else:\n                ans += x\n                k -= 1\n            i -= 2\n        else:\n            ans += li[i - 1]\n            i -= 1\n    if i == 1:\n        ans += li[0]\n    print(ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    cost = 0\n    while k > 0 and len(arr) > 1:\n        sumc = arr[-1] + arr[-2]\n        if sumc >= x:\n            arr.pop(-1)\n            arr.pop(-1)\n            cost += x\n            k -= 1\n        else:\n            break\n    cost += sum(arr)\n    print(cost)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    li = list(map(int, input().split()))\n    li.sort(reverse=True)\n    s = 0\n    i = 0\n    while i < n and k > 0:\n        if i + 1 < n and li[i] + li[i + 1] >= x:\n            s = s + x\n            i = i + 2\n            k = k - 1\n        else:\n            break\n    while i < n:\n        s = s + li[i]\n        i = i + 1\n    print(s)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    (n, k, x) = map(int, sys.stdin.readline().split())\n    l = list(map(int, sys.stdin.readline().split()))\n    new = sorted(l, reverse=True)\n    ans = 0\n    f = 0\n    if n % 2:\n        f = 1\n        n -= 1\n    for i in range(0, n, 2):\n        if k == 0:\n            for i in range(i, n):\n                ans += new[i]\n            break\n        if new[i] + new[i + 1] <= x:\n            ans += new[i] + new[i + 1]\n        else:\n            ans += x\n            k -= 1\n    if f == 1:\n        ans += new[-1]\n    print(ans)", "import sys\nfrom math import sqrt, ceil, floor, gcd\nfrom collections import Counter\ninput = lambda : sys.stdin.readline()\n\ndef int_arr():\n    return list(map(int, input().split()))\n\ndef str_arr():\n    return list(map(str, input().split()))\n\ndef get_str():\n    return map(str, input().split())\n\ndef get_int():\n    return map(int, input().split())\n\ndef get_flo():\n    return map(float, input().split())\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\nmod = 1000000007\n\ndef solve(n, k, x, arr):\n    arr.sort(reverse=True)\n    kpoint = 2 * k\n    no = -1\n    c = 0\n    for i in range(0, 2 * k, 2):\n        if arr[i] + arr[i + 1] < x:\n            no = i\n            break\n        else:\n            c += x\n    if no != -1:\n        for i in range(no, n):\n            c += arr[i]\n        print(c)\n    else:\n        for i in range(2 * k, n):\n            c += arr[i]\n        print(c)\nfor _ in range(int(input())):\n    (n, k, x) = get_int()\n    arr = int_arr()\n    solve(n, k, x, arr)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr = sorted(arr)\n    ans = 0\n    i = n - 1\n    while i >= 1:\n        if k >= 1 and arr[i] + arr[i - 1] > x:\n            ans += x\n            i -= 2\n            k -= 1\n        else:\n            ans += arr[i]\n            i -= 1\n    if i == 0:\n        ans += arr[i]\n    print(ans)", "import math, os, io, sys\nfrom sys import stdin, stdout\nfrom collections import Counter, deque, defaultdict\nfrom itertools import product\n\ndef getList(method=int):\n    return list(map(method, input().split()))\n\ndef getInt():\n    return int(input())\n\ndef solve():\n    (n, k, x) = getList()\n    a = sorted(getList(), reverse=True)\n    (i, k_) = (0, 0)\n    while i + 1 < n:\n        if a[i] + a[i + 1] < x or k_ == k:\n            break\n        k_ += 1\n        i += 2\n    return k_ * x + sum(a[i:])\nfor _ in range(getInt()):\n    print(solve())", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    (n, k, x) = mp()\n    l = sorted(li(), reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += min(l[2 * i] + l[2 * i + 1], x)\n    for i in range(2 * k, n):\n        ans += l[i]\n    pr(ans)\nfor _ in range(inp()):\n    solve()", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    (n, k, x) = mp()\n    l = sorted(li(), reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += min(l[2 * i] + l[2 * i + 1], x)\n    for i in range(2 * k, n):\n        ans += l[i]\n    pr(ans)\nfor _ in range(inp()):\n    solve()", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    change = 0\n    remove = 0\n    for i in range(0, n, 2):\n        if k > 0:\n            if arr[i] + arr[i + 1] > x:\n                change += x\n                remove += arr[i] + arr[i + 1]\n                k -= 1\n            else:\n                break\n        else:\n            break\n    print(sum(arr) - remove + change)", "for i in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    ans = 0\n    pos = -1\n    for j in range(0, n - 1, 2):\n        if k == 0:\n            break\n        s1 = a[j] + a[j + 1]\n        ans += min(s1, x)\n        k -= 1\n        pos = j + 1\n    for j in range(pos + 1, n):\n        ans += a[j]\n    print(ans)"]