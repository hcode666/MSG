["t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * 30\n    for j in a:\n        c = j\n        r = 0\n        while c:\n            b[r] += c % 2\n            c //= 2\n            r += 1\n    u = []\n    s = 1\n    for z in range(30):\n        b[z] *= s\n        u.append(b[z])\n        s *= 2\n    u.sort(reverse=True)\n    d = []\n    ans = 0\n    for p in range(k):\n        h = u[p]\n        for r in range(30):\n            if b[r] == h and r not in d:\n                d.append(r)\n                break\n        ans += 2 ** r\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * 30\n    for j in a:\n        c = j\n        r = 0\n        while c:\n            b[r] += c % 2\n            c //= 2\n            r += 1\n    u = []\n    s = 1\n    for z in range(30):\n        b[z] *= s\n        u.append(b[z])\n        s *= 2\n    u.sort(reverse=True)\n    d = []\n    ans = 0\n    for p in range(k):\n        h = u[p]\n        for r in range(30):\n            if b[r] == h and r not in d:\n                d.append(r)\n                break\n        ans += 2 ** r\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * 30\n    for j in a:\n        c = j\n        r = 0\n        while c:\n            b[r] += c % 2\n            c //= 2\n            r += 1\n    u = []\n    s = 1\n    for z in range(30):\n        b[z] *= s\n        u.append(b[z])\n        s *= 2\n    u.sort(reverse=True)\n    d = []\n    ans = 0\n    for p in range(k):\n        h = u[p]\n        for r in range(30):\n            if b[r] == h and r not in d:\n                d.append(r)\n                break\n        ans += 2 ** r\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * 30\n    for j in a:\n        c = j\n        r = 0\n        while c:\n            b[r] += c % 2\n            c //= 2\n            r += 1\n    u = []\n    s = 1\n    for z in range(30):\n        b[z] *= s\n        u.append(b[z])\n        s *= 2\n    u.sort(reverse=True)\n    d = []\n    ans = 0\n    for p in range(k):\n        h = u[p]\n        for r in range(30):\n            if b[r] == h and r not in d:\n                d.append(r)\n                break\n        ans += 2 ** r\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [0] * 30\n    for i in a:\n        temp = i\n        j = 0\n        while temp:\n            b[j] += temp % 2\n            temp = temp // 2\n            j += 1\n    c = []\n    ss = 1\n    for i in range(30):\n        b[i] = b[i] * ss\n        c.append(b[i])\n        ss = ss * 2\n    c.sort(reverse=True)\n    d = []\n    ans = 0\n    for i in range(k):\n        t = c[i]\n        for j in range(30):\n            if b[j] == t and j not in d:\n                d.append(j)\n                break\n        ans += 2 ** j\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    count = [0] * 30\n    ar = list(map(int, input().split()))\n    for elm in ar:\n        for i in range(30):\n            if elm & 1 << i > 0:\n                count[i] += 1\n    val = []\n    for i in range(30):\n        val.append((-count[i] * (1 << i), i))\n    val.sort()\n    ans = 0\n    for i in range(k):\n        ans = ans | 1 << val[i][1]\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    count = [0] * 30\n    ar = list(map(int, input().split()))\n    for elm in ar:\n        for i in range(30):\n            if elm & 1 << i > 0:\n                count[i] += 1\n    val = []\n    for i in range(30):\n        val.append((-count[i] * (1 << i), i))\n    val.sort()\n    ans = 0\n    for i in range(k):\n        ans = ans | 1 << val[i][1]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(k) for k in input().split()]\n    bits = [0] * 30\n    for i in range(n):\n        for j in range(0, 30):\n            if arr[i] & 1 << j:\n                bits[j] += 1\n    sm = [0] * 30\n    for i in range(30):\n        sm[i] = bits[i] * (1 << i)\n    tup = []\n    for i in range(30):\n        tup.append([sm[i], i])\n    tup = sorted(tup, key=lambda x: -x[0])\n    ans = 0\n    for i in range(k):\n        ans += 1 << tup[i][1]\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    count = [0] * 30\n    ar = list(map(int, input().split()))\n    for elm in ar:\n        for i in range(30):\n            if elm & 1 << i > 0:\n                count[i] += 1\n    val = []\n    for i in range(30):\n        val.append((-count[i] * (1 << i), i))\n    val.sort()\n    ans = 0\n    for i in range(k):\n        ans = ans | 1 << val[i][1]\n    print(ans)", "from heapq import heappop, heappush, heapify\n\ndef method_1(arr, n, k):\n    heap = []\n    for i in range(30):\n        temp = 0\n        for j in range(n):\n            temp = temp + (arr[j] & 2 ** i)\n        heap.append((-1 * temp, i))\n    heapify(heap)\n    res = 0\n    for i in range(k):\n        res = res + 2 ** heappop(heap)[1]\n    print(res)\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    method_1(arr, n, k)", "import sys\nimport math\n\ndef fout(s, end='\\n'):\n    sys.stdout.write(str(s) + end)\n\ndef fin():\n    return sys.stdin.readline().strip()\nt = int(fin())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, fin().split())\n    a = [bin(int(x))[2:] for x in fin().split()]\n    le = len(max(a, key=lambda x: len(x)))\n    temp = [0] * le\n    for num in a:\n        c = -1\n        for i in range(len(num) - 1, -1, -1):\n            if num[i] == '1':\n                temp[c] += 1\n            c -= 1\n    for i in range(le):\n        temp[i] = [temp[i] * 2 ** (le - i - 1), i]\n    temp.sort(reverse=True)\n    ans = ['0'] * le\n    for i in range(min(le, k)):\n        ans[temp[i][1]] = '1'\n    k -= le\n    if k > 0:\n        ans = ['1'] * k + ans\n    print(int(''.join(ans), 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0] * 30\n    for i in range(n):\n        b = bin(a[i]).replace('0b', '')\n        b = b[::-1]\n        for j in range(len(b)):\n            c[j] += int(b[j])\n    for i in range(30):\n        c[i] = c[i] * 2 ** i\n    d = [[i, c[i]] for i in range(30)]\n    d = sorted(d, key=lambda x: (x[1], -x[0]))\n    e = [0 for i in range(30)]\n    for i in range(k):\n        e[d[30 - i - 1][0]] = 1\n    ans = ''.join((str(i) for i in e))\n    ans = ans[::-1]\n    print(int(ans, 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0] * 30\n    for i in range(n):\n        b = bin(a[i]).replace('0b', '')\n        b = b[::-1]\n        for j in range(len(b)):\n            c[j] += int(b[j])\n    for i in range(30):\n        c[i] = c[i] * 2 ** i\n    d = [[i, c[i]] for i in range(30)]\n    d = d[::-1]\n    d = sorted(d, key=lambda x: x[1])\n    e = [0 for i in range(30)]\n    for i in range(k):\n        e[d[30 - i - 1][0]] = 1\n    ans = ''.join((str(i) for i in e))\n    ans = ans[::-1]\n    print(int(ans, 2))", "def insert(a):\n    for i in range(1, len(a)):\n        key = a[i].copy()\n        j = i - 1\n        while j >= 0 and a[j][1] >= key[1]:\n            a[j + 1][0] = a[j][0]\n            a[j + 1][1] = a[j][1]\n            j -= 1\n        a[j + 1][0] = key[0]\n        a[j + 1][1] = key[1]\n    return a\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0] * 30\n    for i in range(n):\n        b = bin(a[i]).replace('0b', '')\n        b = b[::-1]\n        for j in range(len(b)):\n            c[j] += int(b[j])\n    for i in range(30):\n        c[i] = c[i] * 2 ** i\n    d = [[i, c[i]] for i in range(30)]\n    d = insert(d)\n    e = [0 for i in range(30)]\n    for i in range(k):\n        e[d[30 - i - 1][0]] = 1\n    ans = ''.join((str(i) for i in e))\n    ans = ans[::-1]\n    print(int(ans, 2))", "for z in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    x = len(bin(max(a))[2:])\n    y = []\n    for i in a:\n        t = len(bin(i)[2:])\n        val = '0' * (x - t) + bin(i)[2:]\n        y.append(val)\n    s = []\n    for i in range(x):\n        st = ''\n        for j in range(n):\n            st += y[j][i]\n        s.append(st)\n    fin = []\n    for i in range(x):\n        p = [s[i].count('1') * 2 ** (x - i - 1), i]\n        fin.append(p)\n    fin.sort(reverse=True)\n    res = [0 for i in range(x)]\n    for i in range(min(x, k)):\n        res[fin[i][1]] = 1\n    ans = ''\n    for i in res:\n        ans += str(i)\n    ans = '1' * (k - min(k, x)) + ans\n    print(int(ans, 2))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    s = []\n    x = len(bin(max(l))[2:])\n    for i in l:\n        y = bin(i)[2:]\n        y = (x - len(y)) * '0' + y\n        s.append(y)\n    y = []\n    for i in range(x):\n        z = ''\n        for j in range(n):\n            z += s[j][i]\n        y.append(z)\n    s = []\n    for i in range(x):\n        p = [y[i].count('1') * 2 ** (x - 1 - i), i]\n        s.append(p)\n    s.sort(reverse=True)\n    res = [0 for i in range(x)]\n    for i in range(min(k, x)):\n        res[s[i][1]] = 1\n    ans = ''\n    for i in res:\n        ans += str(i)\n    ans = '1' * (k - min(k, x)) + ans\n    print(int(ans, 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = [0] * 30\n    c = [0] * 30\n    power = 2 ** 29\n    for i in range(30):\n        c[i] = power\n        power = power // 2\n    for i in a:\n        s = bin(i).replace('0b', '')\n        l = len(s)\n        j = -1\n        while l > 0:\n            if s[j] == '1':\n                b[j] += 1\n            j -= 1\n            l -= 1\n    d = [0] * 30\n    for i in range(30):\n        d[i] = b[i] * c[i]\n    count = 0\n    for i in range(k):\n        m = max(d)\n        l = len(d)\n        j = -1\n        while l > 0:\n            if d[j] == m:\n                count += c[j]\n                del c[j]\n                del d[j]\n                break\n            l -= 1\n            j -= 1\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(lambda x: bin(int(x))[2:], input().split()))\n    arr = list(map(lambda x: '0' * (32 - len(str(x))) + str(x), arr))\n    y = [0] * 32\n    for i in range(32):\n        for ele in arr:\n            y[i] += int(ele[i])\n    arr1 = []\n    for i in range(32):\n        ans = int(y[i]) * pow(2, 31 - i)\n        arr1.append([31 - i, ans])\n    gain = sorted(arr1, key=lambda x: x[1])[::-1]\n    ans = 0\n    for i in range(k):\n        ans += pow(2, gain[i][0])\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    l1 = [0] * 32\n    for t in l:\n        for i in range(32):\n            if t % 2 == 1:\n                l1[i] += 2 ** i\n            t = t // 2\n            if t == 0:\n                break\n    l2 = l1[:]\n    l2.sort()\n    l3 = l2[32 - k:]\n    ans = 0\n    for i in l3:\n        a = l1.index(i)\n        ans += 2 ** a\n        l1[a] = -1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    temp = []\n    for i in range(32):\n        count = 0\n        for j in range(n):\n            if a[j] & 1 << i:\n                count += 1\n        temp.append([count * (1 << i), i])\n    temp.sort(key=lambda x: x[0], reverse=True)\n    res = 0\n    for i in range(k):\n        res += 1 << temp[i][1]\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    temp = []\n    for i in range(32):\n        count = 0\n        for j in range(n):\n            if a[j] & 1 << i:\n                count += 1\n        temp.append([count * (1 << i), i])\n    temp.sort(key=lambda x: x[0], reverse=True)\n    res = 0\n    for i in range(k):\n        res += 1 << temp[i][1]\n    print(res)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    cont = []\n    for i in range(32):\n        count = 0\n        for j in range(n):\n            if a[j] & 1 << i:\n                count += 1\n        cont.append([count * (1 << i), i])\n    cont.sort(key=lambda x: x[0], reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += 1 << cont[i][1]\n    print(ans)", "class SlotInfo:\n    pos = 0\n    count = 0\n    unitValue = 0\n    totalValue = 0\n\n    def __repr__(self):\n        return repr(self.__dict__)\n\ndef debug(*args, **kwargs):\n    pass\n\ndef main():\n    noOfTests = int(input())\n    for i in range(noOfTests):\n        print(runATest(i))\n\ndef runATest(_testIndex):\n    [aCount, oneBitCount] = [int(x) for x in input().split()]\n    if aCount == 0 or oneBitCount == 0:\n        return 0\n    aList = [int(x) for x in input().split()]\n    maxA = max(aList)\n    maxABinStr = '{0:0b}'.format(maxA)\n    bitscape = len(maxABinStr)\n    debug(maxA=maxA, maxABinStr=maxABinStr, bitscape=bitscape, oneBitCount=oneBitCount)\n    if bitscape <= oneBitCount:\n        return int('1' * oneBitCount, 2)\n    slotInfoList = []\n    for i in range(bitscape):\n        slotInfo = SlotInfo()\n        slotInfo.pos = i\n        slotInfo.unitValue = 2 ** i\n        slotInfoList.append(slotInfo)\n    for i in aList:\n        iStr = '{0:0b}'.format(i)\n        for j in range(len(iStr)):\n            value = iStr[-1 - j]\n            if value == '1':\n                slotInfo = slotInfoList[j]\n                slotInfo.count += 1\n    for slotInfo in slotInfoList:\n        slotInfo.totalValue = slotInfo.unitValue * slotInfo.count + (99 - slotInfo.pos) / 100\n    slotInfoList.sort(key=lambda x: x.totalValue, reverse=True)\n    debug(slotInfoList)\n    xList = ['0'] * bitscape\n    for i in range(oneBitCount):\n        slotInfo = slotInfoList[i]\n        xList[bitscape - slotInfoList[i].pos - 1] = '1'\n    debug(xList)\n    output = int(''.join(xList), 2)\n    return output\nmain()", "for test in range(int(input())):\n    bits = [0 for i in range(32)]\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    for i in l:\n        c = 0\n        t = i\n        while t:\n            if t & 1:\n                bits[c] += 1\n            c += 1\n            t >>= 1\n    val = [bits[i] * 2 ** i for i in range(32)]\n    dup = [bits[i] * 2 ** i for i in range(32)]\n    dup.sort(reverse=True)\n    b = [0 for i in range(32)]\n    res = 0\n    tem = []\n    for i in dup[:k]:\n        for j in range(32):\n            if i == val[j] and b[j] == 0:\n                b[j] = 1\n                tem.append(j)\n    for i in tem[:k]:\n        res = res | 1 << i\n    print(res)", "from sys import stdin, stdout\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter\nfrom bisect import bisect_left, bisect_right\nii1 = lambda : int(stdin.readline().strip())\nis1 = lambda : stdin.readline().strip()\niia = lambda : list(map(int, stdin.readline().strip().split()))\nisa = lambda : stdin.readline().strip().split()\nmod = 1000000007\ntc = ii1()\nfor _ in range(tc):\n    (n, k) = iia()\n    arr = iia()\n    count = [0] * 32\n    for i in arr:\n        b = bin(i)[2:][::-1]\n        for j in range(len(b)):\n            if b[j] == '1':\n                count[j] += 1\n    vals = []\n    for i in range(32):\n        vals.append([2 ** i * count[i], i])\n    vals.sort(key=lambda x: (-x[0], x[1]))\n    res = 0\n    for i in range(k):\n        res += 2 ** vals[i][-1]\n    print(res)", "def to_bin(num, pad=None):\n    bin_rep = []\n    i = 0\n    while True:\n        if num < 2 ** i:\n            break\n        if num & 2 ** i:\n            bin_rep.append(1)\n        else:\n            bin_rep.append(0)\n        i += 1\n    if pad:\n        while len(bin_rep) < pad:\n            bin_rep.append(0)\n    return bin_rep\nfor _ in range(int(input())):\n    (n, set_b) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    req_len = len(to_bin(max(nums)))\n    all_bin = [to_bin(i, req_len) for i in nums]\n    if req_len < set_b:\n        x = 0\n        for i in range(set_b):\n            x += 2 ** i\n    else:\n        count_pos = [[0, i] for i in range(req_len)]\n        for i in range(req_len):\n            for j in range(len(all_bin)):\n                count_pos[i][0] += all_bin[j][i] * 2 ** i\n        count_pos.sort(key=lambda x: (-x[0], x[1]))\n        x = 0\n        for i in range(set_b):\n            x += 2 ** count_pos[i][1]\n    print(x)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(lambda x: int(x), input().split()))\n    a = list(map(lambda x: int(x), input().split()))\n    values = {i: 0 for i in range(0, 32)}\n    for number in a:\n        for (i, bit) in enumerate(bin(number)[2:][::-1]):\n            if bit == '1':\n                values[i] += 1\n    all_values = []\n    for pos in values:\n        all_values.append((pow(2, pos) * values[pos], pos))\n    all_values.sort(key=lambda x: x[0], reverse=True)\n    string = ['0'] * 32\n    for value in all_values[0:k]:\n        string[value[1]] = '1'\n    print(int(''.join(string[::-1]), 2))", "def binary(array, k):\n    bits = [0 for i in range(32)]\n    for i in range(len(array)):\n        j = 31\n        while array[i] != 0:\n            a = array[i] % 2\n            array[i] = array[i] // 2\n            bits[j] += a\n            j -= 1\n    j = 0\n    for i in range(len(bits) - 1, -1, -1):\n        bits[i] = bits[i] * pow(2, j)\n        j += 1\n    for i in range(len(bits) // 2):\n        (bits[i], bits[len(bits) - 1 - i]) = (bits[len(bits) - 1 - i], bits[i])\n    bits = sorted(zip(bits, range(32)), key=lambda x: x[0], reverse=True)\n    if k == 1:\n        return 2 ** bits[0][1]\n    elif k == 2:\n        return 2 ** bits[0][1] + 2 ** bits[1][1]\n    else:\n        out = 0\n        for i in range(k):\n            out += 2 ** bits[i][1]\n        return out\nt = int(input())\nfor _ in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    array = [int(temp) for temp in input().split()]\n    print(binary(array, k))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    bits = [[] for i in range(35)]\n    for i in range(n):\n        temp = a[i]\n        for j in range(35):\n            bits[j].append(temp % 2)\n            temp //= 2\n    profit = []\n    for i in range(35):\n        profit.append(bits[i].count(1) * 2 ** i)\n    x = [0 for i in range(35)]\n    for i in range(k):\n        (maximum, index) = (0, -1)\n        for j in range(35):\n            if profit[j] > maximum:\n                index = j\n                maximum = profit[j]\n        if maximum > 0:\n            x[index] = 1\n            profit[index] = -1\n        else:\n            for j in range(35):\n                if x[j] == 0:\n                    x[j] = 1\n                    break\n    final_x = 0\n    for i in range(34, -1, -1):\n        final_x *= 2\n        final_x += x[i]\n    print(final_x)", "def binary(x):\n    l = []\n    while x >= 1:\n        rem = x % 2\n        x = x // 2\n        l.append(rem)\n    return l\nfor i in range(int(input())):\n    (a, k) = map(int, input().split())\n    m = []\n    l = []\n    p = list(map(int, input().split()))\n    for c in p:\n        m.append(binary(c))\n    count = 0\n    for i in range(30):\n        for j in range(len(m)):\n            if len(m[j]) > i:\n                if m[j][i] == 1:\n                    count += 1\n        l.append([count * 2 ** i, i])\n        count = 0\n    l = sorted(l, key=lambda x: x[0], reverse=True)\n    c = 0\n    for i in range(k):\n        c += 2 ** l[i][1]\n    print(c)", "from os import path\nimport sys\nfrom heapq import heappush, heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input().rstrip()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\n\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 1\n\ndef func(a, b):\n    if a[0] == b[0]:\n        if a[1] < b[1]:\n            return -1\n        else:\n            return 1\n    if a[0] > b[0]:\n        return -1\n    else:\n        return 1\n\ndef solve():\n    for _ in range(ii()):\n        (n, k) = mi()\n        a = li()\n        f = [0] * 32\n        for i in a:\n            for j in range(32):\n                if i >> j & 1:\n                    f[j] += 1\n        ans = 0\n        x = [[(1 << i) * f[i], i] for i in range(32)]\n        x.sort(key=ctk(func))\n        ans = 0\n        for i in range(k):\n            ans |= 1 << x[i][1]\n        print(ans)\nif file:\n    if path.exists('input.txt'):\n        sys.stdin = open('input.txt', 'r')\n        sys.stdout = open('output.txt', 'w')\n    else:\n        input = sys.stdin.readline\nsolve()", "import math, sys\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, deque\ninput = stdin.readline\nI = lambda : int(input())\nli = lambda : list(map(int, input().split()))\n\ndef solve():\n    (n, k) = li()\n    a = li()\n    x = a[0]\n    b = [0] * 30\n    for i in range(n):\n        p = bin(a[i])[2:].zfill(30)\n        for j in range(30):\n            b[j] += int(p[j])\n    b = b[::-1]\n    for i in range(30):\n        b[i] = [b[i] * 2 ** i, -i]\n    b.sort(reverse=True)\n    c = [0] * 30\n    for i in range(k):\n        c[-b[i][1]] = 1\n    c = ''.join(map(str, c))\n    c = c[::-1]\n    print(int(c, 2))\nfor _ in range(I()):\n    solve()", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (lola, mx, ans) = (0, 0, '')\n    bits = [0 for i in range(31)]\n    for i in range(n):\n        (lp, start) = (arr[i], 0)\n        while lp != 0:\n            bits[start] += (lp & 1) * 2 ** start\n            lp >>= 1\n            mx = max(arr[i], mx)\n            start += 1\n    de = bin(mx).lstrip('0b')\n    if len(de) <= k:\n        ans = 2 ** k - 1\n    else:\n        (lo, ko, lim) = (k, [], 0)\n        while lo > 0 and max(bits) > 0:\n            ind = bits.index(max(bits))\n            ko.append(ind)\n            lo -= 1\n            bits[ind] = 0\n        while len(ko) < k and lim < 31:\n            for i in range(31):\n                if i not in ko:\n                    ko.append(i)\n                    break\n            lim += 1\n        for i in range(31):\n            if i in ko:\n                ans = '1' + ans\n            else:\n                ans = '0' + ans\n        while ans.count('1') < k:\n            ans = '1' + ans\n        ans = int(ans, 2)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    binary = []\n    setbit = 0\n    for i in range(32):\n        count = 0\n        for j in range(N):\n            if A[j] % 2:\n                count += 1\n            A[j] = A[j] // 2\n        if count:\n            setbit += 1\n        binary.append((count * 2 ** i, 2 ** i))\n    binary = sorted(binary, key=lambda x: x[0], reverse=True)\n    num = 0\n    for i in range(K):\n        num += binary[i][1]\n    print(num)", "t = int(input())\nfor _ in range(t):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    binary = []\n    setbit = 0\n    for i in range(32):\n        count = 0\n        for j in range(N):\n            if A[j] % 2:\n                count += 1\n            A[j] = A[j] // 2\n        if count:\n            setbit += 1\n        binary.append((count * 2 ** i, 2 ** i))\n    binary = sorted(binary, key=lambda x: x[0], reverse=True)\n    num = 0\n    bits = 0\n    for i in range(setbit):\n        if bits < K:\n            num += binary[i][1]\n            bits += 1\n        else:\n            break\n    i = 0\n    while i < 32 and bits < K:\n        if binary[i][0] == 0:\n            bits += 1\n            num += binary[i][1]\n        i += 1\n    print(num)", "def binary(x):\n    l = []\n    while x >= 1:\n        rem = x % 2\n        x = x // 2\n        l.append(rem)\n    return l\nfor i in range(int(input())):\n    (a, k) = map(int, input().split())\n    m = []\n    l = []\n    p = list(map(int, input().split()))\n    for c in p:\n        m.append(binary(c))\n    count = 0\n    for i in range(30):\n        for j in range(len(m)):\n            if len(m[j]) > i:\n                if m[j][i] == 1:\n                    count += 1\n        l.append([count * 2 ** i, i])\n        count = 0\n    l = sorted(l, key=lambda x: x[0], reverse=True)\n    if k == 1:\n        print(2 ** l[0][1])\n    elif k == 2:\n        print(2 ** l[0][1] + 2 ** l[1][1])\n    else:\n        c = 0\n        for i in range(k):\n            c += 2 ** l[i][1]\n        print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    _map = {i: 0 for i in range(31)}\n    for val in a:\n        i = 0\n        while val > 0:\n            if val & 1:\n                _map[i] += 1\n            val = val >> 1\n            i += 1\n    arr = []\n    for i in range(31):\n        arr.append((_map[i] * (1 << i), i))\n    arr.sort(reverse=True, key=lambda x: (x[0], -x[1]))\n    ans = 0\n    for i in range(k):\n        ans = ans ^ 1 << arr[i][1]\n    print(ans)", "test = int(input())\nfor _ in range(test):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    count = [[0, i] for i in range(64)]\n    for i in a:\n        for j in range(64):\n            count[-1 - j][0] += (i >> j & 1) * 2 ** j\n    count.sort(reverse=True)\n    num = ['0'] * 64\n    for k in range(k):\n        num[count[k][1]] = '1'\n    print(int(''.join(num), 2))", "for T in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    count = [[0, i] for i in range(64)]\n    for a in A:\n        for i in range(64):\n            count[-1 - i][0] += (a >> i & 1) * 2 ** i\n    count.sort(reverse=True)\n    num = ['0'] * 64\n    for k in range(K):\n        num[count[k][1]] = '1'\n    print(int(''.join(num), 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    mask = 1\n    t = [0] * 30\n    for j in range(30):\n        for (i, x) in enumerate(l):\n            if x & mask << j:\n                t[j] += 1\n    c = 1\n    for (i, x) in enumerate(t):\n        t[i] *= c\n        c *= 2\n    t = sorted(zip(t, range(30)), key=lambda x: (-x[0], x[1]))\n    ans = [0] * 30\n    for i in range(k):\n        x = t[i][1]\n        ans[x] = 1\n    ans = ans[::-1]\n    s = ''\n    for i in ans:\n        s += str(i)\n    print(int(s, 2))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    binary = []\n    maxlen = int(math.log(max(nums), 2)) + 1\n    placeval = [0 for i in range(maxlen)]\n    ans = [0 for i in range(maxlen)]\n    for i in range(n):\n        num = nums[i]\n        num = bin(num)\n        num = num[2:]\n        num = '0' * (maxlen - len(num)) + num\n        binary.append(num)\n    for j in range(maxlen):\n        for i in range(n):\n            if binary[i][j] == '0':\n                continue\n            else:\n                placeval[j] += 1\n    for i in range(maxlen):\n        placeval[i] = [placeval[i] * 2 ** (maxlen - i - 1), i]\n    placeval.sort()\n    for i in range(1, maxlen + 1):\n        if k == 0:\n            break\n        ans[placeval[-i][1]] = 1\n        k -= 1\n    if k > 0:\n        for i in range(1, maxlen + 1):\n            if k == 0:\n                break\n            if ans[-i] == 0:\n                ans[-i] = 1\n                k -= 1\n    ans = ''.join(map(str, ans))\n    ans = '1' * k + ans\n    print(int(ans, 2))", "T = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    for i in range(31):\n        s = 0\n        for j in range(n):\n            if a[j] & 1 << i:\n                s += 1\n        l.append((s * (1 << i), 1 << i))\n    l.sort(key=lambda x: (-x[0], x[1]))\n    x = l[:k]\n    ans = 0\n    for i in range(k):\n        ans += x[i][1]\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    d = dict.fromkeys(range(30), 0)\n    for i in range(n):\n        x = bin(a[i]).replace('0b', '')\n        p = len(x)\n        for j in range(p):\n            if x[p - j - 1] == '1':\n                d[j] += pow(2, j)\n    l = [0 for i in range(30)]\n    m = list(d.values())\n    m.sort(reverse=True)\n    for i in range(k):\n        for j in d:\n            if d[j] == m[i]:\n                l[j] = 1\n                d[j] = -1\n                break\n    count = 0\n    for i in range(len(l)):\n        if l[i] == 1:\n            count += pow(2, i)\n    print(count)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    maximum = max(a)\n    maxLength = len(bin(maximum)) - 2\n    if k >= maxLength:\n        print(2 ** k - 1)\n    else:\n        oneCount = [0 for i in range(maxLength)]\n        for num in a:\n            reversedBinary = bin(num)[2:][::-1]\n            for (i, bit) in enumerate(reversedBinary):\n                oneCount[i] += int(bit)\n        weights = []\n        base = 0\n        for count in oneCount:\n            weights.append(count * 2 ** base)\n            base += 1\n        x = 0\n        for i in range(k):\n            index = weights.index(max(weights))\n            x += 2 ** index\n            weights[index] = -1\n        print(x)", "import sys\n\ndef finp():\n    return sys.stdin.readline()\n\ndef fop(s):\n    return sys.stdout.write(str(s) + '\\n')\n\ndef fintinp():\n    return int(sys.stdin.readline())\n\ndef flistintinp():\n    return list(map(int, finp().split()))\n\ndef op(s):\n    return s\n\ndef inp():\n    return input()\n\ndef intop(s):\n    return int(s)\n\ndef intinp():\n    return int(input())\n\ndef listintinp():\n    return list(map(int, inp().split()))\n\ndef listinp():\n    return list(map(str, inp().split()))\nimport math\nprimelists = []\nmaxprecomprimeval = 100001\nfrom math import ceil, sqrt\nmysievelists = [i for i in range(maxprecomprimeval)]\n\ndef primeprecomputer():\n    for i in range(2, math.ceil(math.sqrt(maxprecomprimeval))):\n        if mysievelists[i] == i:\n            for j in range(i * i, maxprecomprimeval, i):\n                if mysievelists[j] == j:\n                    mysievelists[j] = i\n    for i in range(2, maxprecomprimeval):\n        if mysievelists[i] == i:\n            primelists.append(mysievelists[i])\n    return primelists\nfrom bisect import bisect_right, bisect_left\n\ndef bisectright(lists, nbr):\n    return bisect_right(lists, nbr)\n\ndef bisectleft(lists, nbr):\n    return bisect_left(lists, nbr)\nMOD = 100000007\nmpflists = []\n\ndef mpf(n):\n    k = 0\n    primeprecomputer()\n    while n != 1:\n        print(mysievelists[n])\n        mpflists.append(mysievelists[n])\n        n //= mysievelists[n]\n        k += 1\n    return mpflists\n\ndef binary(n):\n    l = []\n    for i in range(31, -1, -1):\n        if n >> i & 1 == 1:\n            l.append(1)\n        else:\n            l.append(0)\n    return l\n\ndef makebin(lists, n):\n    p = [0] * 32\n    for i in lists:\n        m = binary(i)\n        for j in range(32):\n            p[j] += m[j]\n    return p\nfor __ in range(intinp()):\n    (n, k) = map(int, inp().split())\n    lists = listintinp()\n    l = makebin(lists, n)\n    weightage = [0] * 32\n    val = [0] * 32\n    for w in range(32):\n        ind = 32 - w - 1\n        weight = 2 ** ind\n        weightage[w] = l[w] * weight\n        val[w] = weight\n    v = [i[0] for i in sorted(enumerate(weightage), key=lambda x: x[1])]\n    v.reverse()\n    for i in range(32):\n        v[i] = 32 - 1 - v[i]\n    sums = 0\n    for j in range(k):\n        sums += 2 ** v[j]\n    print(sums)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = [bin(int(x)).replace('0b', '') for x in input().split()]\n    num = [0 for x in range(30)]\n    for j in a:\n        for m in range(len(j)):\n            ti = len(j) - 1 - m\n            if j[ti] == '1':\n                num[m] += 1\n    d = {}\n    for j in range(30):\n        num[j] *= pow(2, j)\n        d[j] = num[j]\n    sorte = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    total = 0\n    for j in range(k):\n        total += pow(2, sorte[j][0])\n    print(total)", "def decimalToBinary(n):\n    return bin(n).replace('0b', '')\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    array = list(map(int, input().split()))\n    for j in range(0, len(array)):\n        ans = decimalToBinary(array[j])\n        array[j] = '0' * (30 - len(ans)) + ans\n    lookup = {}\n    for i in range(30):\n        if i not in lookup:\n            lookup[i] = 0\n    for i in range(len(array)):\n        for j in range(len(array[i])):\n            if array[i][j] == '1':\n                lookup[29 - j] += 1\n    answer = list(lookup.values())\n    for j in range(len(answer)):\n        answer[j] = [answer[j] * 2 ** j, j]\n    answer.sort(key=lambda x: x[0], reverse=True)\n    ans = answer[:K]\n    total = 0\n    for i in range(len(ans)):\n        total += 2 ** ans[i][1]\n    print(total)", "try:\n    for _ in range(int(input())):\n        (n, k) = list(map(int, input().split(' ')))\n        A = list(map(int, input().split(' ')))\n        contrOfEachPlc = [0] * 31\n        for i in range(n):\n            a = format(A[i], '031b')\n            A[i] = a\n        po = 30\n        for i in range(31):\n            for j in range(n):\n                contrOfEachPlc[i] += int(A[j][i])\n            contrOfEachPlc[i] = contrOfEachPlc[i] * pow(2, po)\n            po -= 1\n        reversingContrOfEachPlc = [0] * 31\n        pos = 0\n        d = {}\n        for i in range(30, -1, -1):\n            reversingContrOfEachPlc[pos] = contrOfEachPlc[i]\n            d[pos] = reversingContrOfEachPlc[pos]\n            pos += 1\n        d = sorted(d.items(), key=lambda kv: (kv[1], kv[0]), reverse=True)\n        x = 0\n        lst = []\n        i = 0\n        while i < 30:\n            if d[i][1] > 0:\n                flag = 0\n                srt = i\n                while d[i][1] == d[i + 1][1]:\n                    flag = 1\n                    i += 1\n                if flag == 1:\n                    for a in range(i, srt - 1, -1):\n                        lst.append(d[a])\n                    i += 1\n                if flag == 0:\n                    lst.append(d[i])\n                    i += 1\n            else:\n                break\n        for i in range(30, -1, -1):\n            if d[i][1] == 0:\n                lst.append(d[i])\n        for i in range(k):\n            x += pow(2, lst[i][0])\n        print(x)\nexcept:\n    pass", "try:\n    for _ in range(int(input())):\n        (n, k) = list(map(int, input().split(' ')))\n        A = list(map(int, input().split(' ')))\n        contrOfEachPlc = [0] * 31\n        for i in range(n):\n            a = format(A[i], '031b')\n            A[i] = a\n        po = 30\n        for i in range(31):\n            for j in range(n):\n                contrOfEachPlc[i] += int(A[j][i])\n            contrOfEachPlc[i] = contrOfEachPlc[i] * pow(2, po)\n            po -= 1\n        reversingContrOfEachPlc = [0] * 31\n        pos = 0\n        d = {}\n        for i in range(30, -1, -1):\n            reversingContrOfEachPlc[pos] = contrOfEachPlc[i]\n            d[pos] = reversingContrOfEachPlc[pos]\n            pos += 1\n        d = sorted(d.items(), key=lambda kv: (kv[1], kv[0]), reverse=True)\n        x = 0\n        lst = []\n        i = 0\n        while i < 30:\n            if d[i][1] > 0:\n                flag = 0\n                srt = i\n                while d[i][1] == d[i + 1][1]:\n                    flag = 1\n                    i += 1\n                if flag == 1:\n                    for a in range(i, srt - 1, -1):\n                        lst.append(d[a])\n                    i += 1\n                if flag == 0:\n                    lst.append(d[i])\n                    i += 1\n            else:\n                break\n        for i in range(30, -1, -1):\n            if d[i][1] == 0:\n                lst.append(d[i])\n        for i in range(k):\n            x += pow(2, lst[i][0])\n        print(x)\nexcept:\n    pass", "from collections import Counter\nfrom operator import itemgetter\n\ndef solve(A, K):\n    vals = [0] * 30\n    for a in A:\n        for (i, bit) in enumerate(bin(a)[-1:1:-1]):\n            if bit == '1':\n                vals[i] += 1 << i\n    to_sort = [(val, i) for (i, val) in enumerate(vals)]\n    to_sort.sort(key=itemgetter(0), reverse=True)\n    ans = 0\n    for (_, i) in to_sort[:K]:\n        ans += 1 << i\n    return ans\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = map(int, input().split())\n    ans = solve(A, K)\n    print(ans)", "def Solve(k, arr):\n    a = [0] * 30\n    s = ''\n    for i in range(len(arr)):\n        s = bin(arr[i])[2:]\n        j = 0\n        for ones in range(len(s) - 1, -1, -1):\n            if s[ones] == '1':\n                a[j] += 1\n            j += 1\n    sums = [0] * 30\n    kk = 0\n    for i in a:\n        sums[kk] = i * 2 ** kk\n        kk += 1\n    vals = sorted(zip(sums, range(len(sums))), key=lambda x: x[0], reverse=True)\n    if k == 1:\n        return 2 ** vals[0][1]\n    elif k == 2:\n        return 2 ** vals[0][1] + 2 ** vals[1][1]\n    else:\n        out = 0\n        for i in range(k):\n            out += 2 ** vals[i][1]\n        return out\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(Solve(k, arr))", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    brep = []\n    length = 30\n    for ele in arr:\n        brep.append('0' * (length - len(bin(ele)[2:])) + bin(ele)[2:])\n    dic = dict()\n    for i in range(0, length):\n        count = 0\n        for ele in brep:\n            if ele[length - i - 1] == '1':\n                count += 1\n        dic[i] = count * pow(2, i)\n    dic = sorted(dic.items(), key=lambda kv: (-kv[1], kv[0]))\n    print(sum((pow(2, ele[0]) for ele in dic[:k])))\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    brep = []\n    length = 30\n    for ele in arr:\n        brep.append('0' * (length - len(bin(ele)[2:])) + bin(ele)[2:])\n    dic = dict()\n    for i in range(0, length):\n        count = 0\n        for ele in brep:\n            if ele[length - i - 1] == '1':\n                count += 1\n        dic[i] = count * pow(2, i)\n    dic = sorted(dic.items(), key=lambda kv: kv[1], reverse=True)\n    print(sum((pow(2, ele[0]) for ele in dic[:k])))\n    t -= 1", "t = int(input())\nfor i in range(t):\n    a = list(input().split())\n    n = int(a[0])\n    kk = int(a[1])\n    a = list(input().split())\n    dic = {}\n    for k in a:\n        m = int(k)\n        c = -1\n        while m > 0:\n            c += 1\n            if m & 1 == 1:\n                dic[c] = dic.get(c, 0) + pow(2, c)\n            else:\n                dic[c] = dic.get(c, 0)\n            m = m >> 1\n    dic_l = sorted(dic, key=lambda x: (-dic[x], x))\n    co = 0\n    res = 0\n    for k in dic_l:\n        res = res + pow(2, k)\n        co = co + 1\n        if co == kk:\n            break\n    while co != kk:\n        res = res + pow(2, co)\n        co = co + 1\n    print(res)", "import sys, io, os, time\nfrom collections import defaultdict\nfrom collections import OrderedDict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\nimport bisect, math, heapq\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\ninput = sys.stdin.readline\nfor ii in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    cnt = [0] * 32\n    for i in arr:\n        for j in range(32):\n            if i & 1 << j:\n                cnt[j] += 1\n    ans = 0\n    cnt = [(cnt[i] * 2 ** i, i) for i in range(32)]\n    cnt.sort(key=lambda x: x[0], reverse=True)\n    cnt = cnt[0:k]\n    for i in cnt:\n        ans |= 1 << i[1]\n    print(ans)", "t = int(input())\nwhile t:\n    s = input().split()\n    (n, k) = (int(s[0]), int(s[1]))\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    count = []\n    for i in range(31):\n        count.append(0)\n    for i in a:\n        bit = 0\n        while i != 0:\n            if i % 2 == 1:\n                count[bit] += 1\n            i = i // 2\n            bit += 1\n    contribution = dict()\n    for i in range(31):\n        contribution[i] = count[i] * 2 ** i\n    contribution = sorted(contribution.items(), key=lambda x: x[1], reverse=True)\n    x = 0\n    for i in range(k):\n        x += 2 ** contribution[i][0]\n    print(x)\n    t -= 1", "import math\nt = int(input())\nwhile t:\n    s = input().split()\n    (n, k) = (int(s[0]), int(s[1]))\n    a = input().split()\n    for i in range(n):\n        a[i] = int(a[i])\n    count = []\n    for i in range(31):\n        count.append(0)\n    for i in a:\n        bit = 0\n        while i != 0:\n            if i % 2 == 1:\n                count[bit] += 1\n            i = i // 2\n            bit += 1\n    contribution = dict()\n    for i in range(31):\n        contribution[i] = count[i] * 2 ** i\n    contribution = sorted(contribution.items(), key=lambda x: x[1], reverse=True)\n    x = 0\n    for i in range(k):\n        x += 2 ** contribution[i][0]\n    print(x)\n    t -= 1", "import collections\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    List = list(map(int, input().split()))\n    bits = collections.defaultdict(int)\n    for each in List:\n        s = bin(each)[:1:-1]\n        for x in range(len(s)):\n            if s[x] == '1':\n                bits[x] += 1\n    setbit = list(bits.keys())\n    setbit.sort(reverse=True, key=lambda x: [bits[x] * 2 ** x, -x])\n    ans = ['0'] * 33\n    sett = 0\n    for b in setbit[:k]:\n        ans[b] = '1'\n    if k > len(setbit):\n        rem = k - len(setbit)\n        i = 0\n        while i < len(ans) and rem > 0:\n            if ans[i] == '0':\n                ans[i] = '1'\n                rem -= 1\n            i += 1\n    print(int(''.join(ans[::-1]), 2))", "try:\n    t = int(input())\n    for _ in range(t):\n        (n, z) = map(int, input().split())\n        l = [int(a) for a in input().split()]\n        b = [bin(c)[2:] for c in l]\n        m = max((len(i) for i in b))\n        final_sum = []\n        for j in range(m):\n            k = sum((2 ** j & i for i in l))\n            final_sum.append((-k, j))\n        final_sum.sort()\n        h = len(final_sum)\n        for i in range(h, 32):\n            final_sum.append((0, i))\n        ans = 0\n        for i in range(z):\n            ans += 2 ** final_sum[i][1]\n        print(ans)\nexcept:\n    pass", "from collections import defaultdict as dd\nl = []\ni = 1\nct = 0\nwhile ct <= 31:\n    l.append(i)\n    i *= 2\n    ct += 1\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = [0] * 31\n    h = k\n    for i in range(0, 31):\n        b = l[i]\n        for j in a:\n            if j & b == b:\n                c[i] += 1\n    d = dd(list)\n    for i in range(0, 31):\n        if l[i] == 0:\n            continue\n        b = l[i] * c[i]\n        if b not in d:\n            d[b] = [i]\n        else:\n            d[b] += [i]\n    s = []\n    ans = 0\n    fg = 0\n    vis = [0] * 31\n    for i in sorted(d.keys(), reverse=True):\n        for j in d[i]:\n            k -= 1\n            s.append(j)\n            ans = ans | l[j]\n            vis[j] = 1\n            if k == 0:\n                fg = 1\n                break\n        if fg == 1:\n            break\n    if k != 0:\n        for i in range(0, 31):\n            if vis[i] == 0:\n                k -= 1\n                ans = ans | l[i]\n            if k == 0:\n                break\n    print(ans)", "from copy import deepcopy\n\ndef solve(n):\n    c = 0\n    while n:\n        if n & 1:\n            b[c] += 1\n        n >>= 1\n        c += 1\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    b = [0] * 32\n    for i in l:\n        solve(i)\n    for i in range(32):\n        b[i] = pow(2, i) * b[i]\n    el = deepcopy(b)\n    el.sort(reverse=True)\n    sum = 0\n    for i in range(k):\n        v = el[i]\n        for j in range(31):\n            if v == b[j]:\n                b[j] = -1\n                sum += pow(2, j)\n                break\n    print(sum)", "import sys\nfrom math import log2\nread = sys.stdin.readline\nfor i in range(int(read())):\n    (n, k) = list(map(int, read().split()))\n    l = list(map(int, read().split()))\n    d = dict()\n    max_p = int(log2(max(l)))\n    bit = 1\n    for pos in range(max_p + 1):\n        t = 0\n        for e in l:\n            t += e & bit\n        d[pos] = t\n        bit <<= 1\n    if k > len(d):\n        for i in range(max_p + 1, k + 1):\n            d[i] = 0\n    s = 0\n    max_val = sorted(d, key=d.get, reverse=True)\n    for i in range(k):\n        s += 2 ** max_val[i]\n    print(s)", "for _ in range(int(input())):\n    values = [[0, 2 ** i] for i in range(30)]\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    for a in arr:\n        for value in values:\n            value[0] += value[1] & a\n    values.sort(key=lambda x: x[0], reverse=True)\n    ans = 0\n    for i in range(k):\n        ans = ans | values[i][1]\n    print(ans)", "for _ in range(int(int(input()))):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    f = [0 for i in range(30)]\n    for i in a:\n        for j in range(30):\n            f[j] += i >> j & 1\n    vals = []\n    for i in range(30):\n        vals.append((f[i] * (1 << i), -i))\n    vals.sort(reverse=True)\n    res = 0\n    for i in range(k):\n        res |= 1 << -vals[i][1]\n    print(res)", "from functools import cmp_to_key\n\ndef maximum(a, b):\n    if a[0] == b[0]:\n        return a[1] - b[1]\n    return b[0] - a[0]\nt = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    temp = []\n    mul = 1\n    for i in range(31):\n        c = 0\n        for j in range(n):\n            if a[j] & 1 << i:\n                c += 1\n        temp.append([c * mul, i])\n        mul *= 2\n    temp = sorted(temp, key=cmp_to_key(maximum))\n    ans = 0\n    for i in range(k):\n        ans += pow(2, temp[i][1])\n    print(ans)\n    t -= 1", "from math import pow\nimport heapq\n\ndef power(x, n):\n    if n == 0:\n        return 1\n    temp = power(x, int(n / 2))\n    if n % 2 == 0:\n        return temp * temp\n    elif n > 0:\n        return x * temp * temp\n    else:\n        return temp * temp / x\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    i = 31\n    temp = [0 for i in range(32)]\n    po = power(2, i)\n    while i >= 0:\n        for j in range(n):\n            if arr[j] & po == po:\n                temp[i] += 1\n        temp[i] = temp[i] * po\n        i -= 1\n        po = po >> 1\n    while k > 0:\n        ele = max(temp)\n        ind = temp.index(ele)\n        temp[ind] = -1\n        ans += power(2, ind)\n        k -= 1\n    print(ans)", "t = int(input())\nwhile t != 0:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a1 = [0] * 30\n    for i in a:\n        s1 = bin(i)\n        n1 = len(s1)\n        for j in range(n1 - 1, 1, -1):\n            a1[n1 - 1 - j] = a1[n1 - 1 - j] + int(s1[j])\n    flag = 1\n    for i in range(30):\n        a1[i] = a1[i] * flag\n        flag = flag * 2\n    a2 = list()\n    for i in range(30):\n        a3 = list()\n        a3.append(a1[i])\n        a3.append(i)\n        a2.append(a3)\n    a2.sort(key=lambda ff: (-ff[0], ff[1]))\n    sum1 = 0\n    for i in range(k):\n        sum1 = sum1 + pow(2, a2[i][1])\n    print(sum1)", "for _ in range(int(input())):\n    (N, K) = [int(i) for i in input().split(' ')]\n    A = [int(i) for i in input().split(' ')]\n    H = max(A)\n    sett = len(str(bin(H))) - 2\n    tab = [0] * sett\n    for i in range(N):\n        for j in range(1, len(str(bin(A[i]))) - 1):\n            if str(bin(A[i]))[-j] == '1':\n                tab[j - 1] += 1\n    for i in range(len(tab)):\n        tab[i] *= 2 ** i\n    D = []\n    for i in tab:\n        D += [i]\n    Inex = []\n    tab.sort()\n    TruthTable = [True] * len(D)\n    for i in range(1, K + 1):\n        for j in range(len(D)):\n            if TruthTable[j]:\n                if D[j] == tab[-i]:\n                    TruthTable[j] = False\n                    Inex += [j]\n                    break\n    final = 0\n    if len(Inex) == K:\n        for i in Inex:\n            final += 2 ** i\n    elif K > sett:\n        for i in range(K):\n            final += 2 ** i\n    print(final)", "for test in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [0] * 30\n    for A in input().split():\n        A = int(A)\n        for i in range(30):\n            if 1 << i & A:\n                a[i] += 1 << i\n    ans = 0\n    for i in sorted(list(range(30)), key=lambda i: (-a[i], i))[:k]:\n        ans |= 1 << i\n    print(ans)", "for t in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    arr = [int(x) for x in input().split()]\n    pairs = []\n    for b in range(30):\n        mysum = 0\n        for i in range(len(arr)):\n            if arr[i] >> b & 1 == 1:\n                mysum += 2 ** b\n        pairs.append((mysum, 50 - b))\n    pairs.sort(reverse=True)\n    mynum = 0\n    for i in range(k):\n        mynum += 2 ** (50 - pairs[i][1])\n    print(mynum)", "import sys\nimport math\nimport collections\nimport operator as op\nfrom collections import deque\nfrom math import gcd, inf, sqrt\nfrom bisect import bisect_right, bisect_left\nfrom functools import reduce\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(2 ** 20)\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return len(set(factors))\n\ndef isPowerOfTwo(x):\n    return x and (not x & x - 1)\n\ndef factors(n):\n    return list(set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0))))\n\ndef printp(p):\n    for i in p:\n        print(i)\nMOD = 10 ** 9 + 7\nT = 1\nT = int(stdin.readline())\nfor _ in range(T):\n    (n, k) = list(map(int, stdin.readline().split()))\n    a = list(map(int, stdin.readline().split()))\n    cnt = []\n    for i in range(31):\n        cnt.append([0, i])\n    for i in range(n):\n        b = bin(a[i])[2:]\n        for i in range(1, len(b) + 1):\n            cnt[i - 1][0] -= int(b[-i])\n    for i in range(31):\n        cnt[i][0] = cnt[i][0] * 2 ** i\n    cnt.sort()\n    x = ['0'] * 31\n    for i in range(k):\n        x[30 - cnt[i][1]] = '1'\n    print(int(''.join(x), 2))", "try:\n    from operator import itemgetter\n    t = int(input())\n    for v in range(t):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        arr = [0 for i in range(30)]\n        ind = [i for i in range(30)]\n        for i in range(n):\n            x = a[i]\n            j = 0\n            while x > 0:\n                if x % 2 != 0:\n                    arr[j] = arr[j] + pow(2, j)\n                x = x // 2\n                j += 1\n        ans = 0\n        res = [list(p) for p in zip(*sorted(zip(arr, ind), key=itemgetter(0), reverse=True))]\n        for i in range(k):\n            ans += pow(2, res[1][i])\n        print(ans)\nexcept:\n    pass", "import math\nimport os\nimport random\nimport re\nimport sys\nimport heapq\nimport random\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    contri = [0] * 35\n    for a in arr:\n        curr = a\n        loc = 0\n        mask = 1\n        while curr != 0:\n            if curr & mask != 0:\n                contri[loc] += 1\n                curr = curr & ~mask\n            mask *= 2\n            loc += 1\n    pow = 0\n    for i in range(len(contri)):\n        contri[i] *= 2 ** pow\n        pow += 1\n    res = 0\n    contri2 = [(contri[i], len(contri) - i) for i in range(len(contri))]\n    contri2 = sorted(contri2, reverse=True)\n    for i in contri2[:k]:\n        res += 2 ** (len(contri) - i[1])\n    print(res)", "def f(n):\n    l = []\n    while n > 0:\n        l.append(n % 2)\n        n = n // 2\n    return l\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    a = input()\n    A = list(map(int, list(a.split())))\n    y = 0\n    d = [0] * 30\n    for i in range(n):\n        l = f(A[i])\n        m = len(l)\n        y = max(y, m)\n        for j in range(m):\n            if l[j] == 1:\n                d[j] = d[j] + 1\n    val = [(1 << i) * d[i] for i in range(30)]\n    s = 0\n    while k > 0:\n        k = k - 1\n        i = val.index(max(val))\n        s = s + (1 << i)\n        val[i] = -1\n    print(s)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split(' '))\n    arr = list(map(int, input().split(' ')))\n    bit_set = [0] * 30\n    for i in range(30):\n        for j in arr:\n            if j & 1 << i:\n                bit_set[i] += 1\n    sum_arr = []\n    digit_arr = []\n    for i in range(30):\n        dig = 0 | 1 << i\n        digit_arr.append(dig)\n        sum_arr.append(dig * bit_set[i])\n    sum_digit = list(zip(sum_arr, digit_arr))\n    sum_digit.sort(key=lambda x: x[0], reverse=True)\n    x = 0\n    for i in range(k):\n        x += sum_digit[i][1]\n    print(x)", "from operator import itemgetter\nfrom itertools import islice\nR = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, k) = R()\n    a = zip(*(f'{x:031b}' for x in R()))\n    a = (x.count('1') for x in a)\n    a = sorted(((-x << i, 1 << i) for (i, x) in zip(range(30, -1, -1), a)))\n    print(sum(map(itemgetter(1), islice(a, k))))", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dic = [0 for i in range(30)]\n    for i in arr:\n        temp = bin(i)[2:][::-1]\n        for j in range(len(temp)):\n            if temp[j] == '1':\n                dic[j] += 1\n    lis = []\n    for (index, count) in enumerate(dic):\n        lis.append((2 ** index * count, index))\n    lis.sort(key=lambda x: x[0], reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += 2 ** lis[i][1]\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    d = [0] * 35\n    for i in range(n):\n        c = a[i]\n        i = 0\n        while c > 0:\n            e = c % 2\n            z = e * pow(2, i)\n            d[i] += z\n            c = c // 2\n            i += 1\n    sum1 = 0\n    for i in range(k):\n        max1 = -1\n        z = 0\n        for j in range(30):\n            if d[j] > max1:\n                max1 = d[j]\n                z = j\n        sum1 += pow(2, z)\n        d[z] = -1\n    print(sum1)\n    t -= 1", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    high_bits = [0 for i in range(30)]\n    for i in arr:\n        bin_n = bin(i)[2:]\n        bin_n = bin_n[::-1]\n        for (index, bit) in enumerate(bin_n):\n            if bit == '1':\n                high_bits[index] += 1\n    high_include = 0\n    ans_arr = []\n    for (pow, frq) in enumerate(high_bits):\n        ans_arr.append([2 ** pow * frq, pow])\n    ans_arr.sort(key=lambda x: x[0], reverse=True)\n    ans = 0\n    while high_include < k:\n        ans += 2 ** ans_arr[high_include][-1]\n        high_include += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    set_bits = [0] * 30\n    for i in arr:\n        x = bin(i)[2:]\n        x = x[::-1]\n        for j in range(len(x)):\n            if x[j] == '1':\n                set_bits[j] += 1\n    dct = {}\n    for i in range(30):\n        cal = set_bits[i] * 2 ** i\n        set_bits[i] = [i, cal]\n        if cal in dct:\n            dct[cal].append(i)\n        else:\n            dct[cal] = [i]\n    set_bits.sort(key=lambda y: y[1], reverse=True)\n    ans = 0\n    chc = list(range(30))\n    l = 0\n    for i in range(k):\n        if set_bits[i][1] == 0:\n            ans += 2 ** chc[l]\n            l += 1\n        else:\n            mn = min(dct[set_bits[i][1]])\n            ans += 2 ** mn\n            chc.remove(mn)\n            dct[set_bits[i][1]].remove(mn)\n    print(ans)", "import math\ntemp = {}\n\ndef myfunction(e):\n    global temp\n    return (1 << e) * temp[e]\n\ndef sol(arr, N, K):\n    global temp\n    temp = dict()\n    max_index = int(math.log2(max(arr)))\n    for x in range(0, max_index + 1):\n        for y in arr:\n            try:\n                temp[x] += (1 << x & y) >> x\n            except:\n                temp[x] = (1 << x & y) >> x\n    myl = list(temp.keys())\n    myl.sort(key=myfunction, reverse=True)\n    ans = 0\n    if K <= max_index + 1:\n        for _ in range(K):\n            ans += 1 << myl[_]\n    else:\n        ans = int('1' * K, 2)\n    return ans\nfor _ in range(int(input())):\n    (N, K) = map(int, input().strip().split(' '))\n    arr = list(map(int, input().strip().split(' ')))\n    print(sol(arr, N, K))", "from math import *\nt = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    bits = [0] * 31\n    bits[0] = 1\n    d = {}\n    for i in range(1, 31):\n        bits[i] = 2 * bits[i - 1]\n    for i in range(len(bits)):\n        re = 0\n        for j in range(n):\n            if bits[i] & l[j]:\n                re += bits[i]\n        d[i] = re\n    d = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    s = 0\n    for i in range(k):\n        s += 2 ** d[i][0]\n    print(s)", "t = int(input())\n\ndef isSet(elem, k):\n    if elem & 1 << k:\n        return 1\n    return 0\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    gem = [0] * 30\n    kii = [0] * 30\n    for i in range(len(x)):\n        for j in range(30):\n            if isSet(x[i], j):\n                gem[j] += 1\n    for i in range(30):\n        kii[i] = gem[i] * 2 ** i\n    z = []\n    for i in range(k):\n        r = max(kii)\n        indo = kii.index(r)\n        z.append(indo)\n        kii[indo] = -1\n    ans = 0\n    for ele in z:\n        ans += 1 << ele\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, b) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    o = 0\n    for i in range(n):\n        o |= arr[i]\n    m = {}\n    for k in range(0, 30):\n        m[k] = 0\n    for i in range(n):\n        s = bin(arr[i])[2:][::-1]\n        for j in range(len(s)):\n            if s[j] == '1':\n                m[j] += 2 ** j\n    a1 = sorted(zip(m.values(), m.keys()), key=lambda x: (x[0], -x[1]), reverse=True)\n    a2 = a1[::-1]\n    ans1 = 0\n    for (v, p) in a1:\n        if b:\n            ans1 += 2 ** p\n            b -= 1\n    print(ans1)", "import sys\ninput = sys.stdin.readline\n(inp, ip) = (lambda : int(input()), lambda : [int(w) for w in input().split()])\n\ndef func(a, b):\n    if a[0] > b[0]:\n        return -1\n    elif a[0] < b[0]:\n        return 1\n    elif a[1] < b[1]:\n        return -1\n    else:\n        return 1\nfor _ in range(inp()):\n    (n, k) = ip()\n    x = ip()\n    K = [0] * 30\n    for i in x:\n        t = bin(i)[-1:1:-1]\n        for j in range(len(t)):\n            K[j] += int(t[j])\n    for i in range(30):\n        K[i] *= 1 << i\n    K = [[K[i], i] for i in range(30)]\n    from functools import cmp_to_key as c2k\n    ind = sorted(K, key=c2k(func))\n    ind = [j for (i, j) in ind][:k]\n    K = ['0'] * 30\n    for i in ind:\n        K[i] = '1'\n    K = K[::-1]\n    print(int(''.join(K), 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = max(a)\n    s = bin(m)[2:]\n    l = len(s)\n    v = []\n    for i in range(n):\n        p = bin(a[i])[2:]\n        v.append(p)\n    z = [0] * l\n    for i in range(n):\n        for j in range(len(v[i]) - 1, -1, -1):\n            if v[i][j] == '1':\n                z[len(v[i]) - 1 - j] += 1\n    v = []\n    for i in range(l):\n        v.append(2 ** i * z[i])\n    ans = 0\n    if k > l:\n        for i in range(l, k):\n            ans += 2 ** i\n        for i in range(l):\n            mi = v.index(max(v))\n            ans += 2 ** mi\n            v[mi] = -1\n    else:\n        for i in range(k):\n            mi = v.index(max(v))\n            ans += 2 ** mi\n            v[mi] = -1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    d = {}\n    for j in range(30):\n        c = 0\n        t = 1 << j\n        for i in l:\n            if i & t:\n                c += 1\n        d[j] = c * 2 ** j\n    sd = sorted(d.items(), key=lambda x: x[1], reverse=True)\n    ans = 0\n    for i in range(k):\n        ans += 2 ** sd[i][0]\n    print(ans)", "from copy import deepcopy\n\ndef solve(n):\n    c = 0\n    while n:\n        if n & 1:\n            b[c] += 1\n        n >>= 1\n        c += 1\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    b = [0] * 32\n    for i in l:\n        solve(i)\n    for i in range(32):\n        b[i] = pow(2, i) * b[i]\n    el = deepcopy(b)\n    el.sort(reverse=True)\n    sum = 0\n    for i in range(k):\n        v = el[i]\n        for j in range(31):\n            if v == b[j]:\n                b[j] = -1\n                sum += pow(2, j)\n                break\n    print(sum)", "import sys\nimport math\nimport heapq\nfrom collections import defaultdict, deque\ninput = sys.stdin.readline\n\ndef r():\n    return int(input())\n\ndef rm():\n    return map(int, input().split())\n\ndef rl():\n    return list(map(int, input().split()))\nfor _ in range(r()):\n    (n, k) = rm()\n    a = rl()\n    c = [0] * 30\n    d = ['0'] * 30\n    b = []\n    for i in a:\n        bb = list(bin(i))\n        bb = bb[2:]\n        b.append(bb)\n        bc = bb[::-1]\n        for i in range(len(bc)):\n            c[29 - i] += 1 if bc[i] == '1' else 0\n    e = []\n    for i in range(30):\n        e.append([c[i] * 2 ** (29 - i), i])\n    e.sort(reverse=True)\n    for i in range(k):\n        d[e[i][1]] = '1'\n    print(int(''.join(d), 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    bins = []\n    bit = [0] * 30\n    ans = [0] * 30\n    w = [i for i in range(29, -1, -1)]\n    for i in range(n):\n        b = bin(arr[i])[2:]\n        bins.append('0' * (30 - len(b)) + b)\n    for i in range(30):\n        count = 0\n        for j in range(n):\n            if bins[j][i] == '1':\n                count += 1\n        bit[i] = 2 ** (29 - i) * count\n    x = zip(bit, w)\n    x = sorted(x, key=lambda x: (-x[0], x[1]))\n    i = 0\n    while k > 0:\n        k -= 1\n        ans[29 - x[i][1]] = 1\n        i += 1\n    ans = ''.join((str(i) for i in ans))\n    print(int(ans, 2))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    final = []\n    for i in range(31):\n        final.append([0, -i, 0])\n    for x in a:\n        tmp = bin(x)[2:]\n        tmp = tmp[::-1]\n        for i in range(len(tmp)):\n            if tmp[i] == '1':\n                final[i][2] += 1\n                final[i][0] += 1 << i\n    final.sort(reverse=True)\n    ans = 0\n    for i in range(k):\n        ans |= 1 << abs(final[i][1])\n    print(ans)"]