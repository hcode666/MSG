["from math import inf\nimport sys\n\ndef possiblewithdist(intervals, dist):\n    first = prevplaced = intervals[1][0] - dist\n    if not (first >= intervals[0][0] and first <= intervals[0][1]):\n        if first > intervals[0][1]:\n            first = prevplaced = intervals[0][1]\n        else:\n            first = prevplaced = intervals[0][0]\n    for i in range(1, len(intervals)):\n        nextpos = prevplaced + dist\n        if nextpos < intervals[i][0]:\n            prevplaced = intervals[i][0]\n        elif not nextpos <= intervals[i][1]:\n            return False\n        else:\n            prevplaced = nextpos\n    if first + m - prevplaced < dist:\n        return False\n    return True\n\ndef upperbound(intervals):\n    (lo, hi) = (1, m)\n    while lo < hi:\n        mid = lo + (hi - lo + 1) // 2\n        if possiblewithdist(intervals, mid):\n            lo = mid\n        else:\n            hi = mid - 1\n    if not possiblewithdist(intervals, lo):\n        return None\n    return lo\n(m, n) = map(int, input().split())\nintervals = [tuple(map(int, input().split())) for i in range(n)]\nprint(upperbound(intervals))", "from math import inf\nimport sys\n\ndef possiblewithdist(intervals, dist):\n    first = prevplaced = intervals[1][0] - dist\n    if not (first >= intervals[0][0] and first <= intervals[0][1]):\n        if first > intervals[0][1]:\n            first = prevplaced = intervals[0][1]\n        else:\n            first = prevplaced = intervals[0][0]\n    for i in range(1, len(intervals)):\n        nextpos = prevplaced + dist\n        if nextpos < intervals[i][0]:\n            prevplaced = intervals[i][0]\n        elif not nextpos <= intervals[i][1]:\n            return False\n        else:\n            prevplaced = nextpos\n    if first + m - prevplaced < dist:\n        return False\n    return True\n\ndef upperbound(intervals):\n    (lo, hi) = (1, m)\n    while lo < hi:\n        mid = lo + (hi - lo + 1) // 2\n        if possiblewithdist(intervals, mid):\n            lo = mid\n        else:\n            hi = mid - 1\n    if not possiblewithdist(intervals, lo):\n        return None\n    return lo\n(m, n) = map(int, input().split())\nintervals = [tuple(map(int, input().split())) for i in range(n)]\nprint(upperbound(intervals))"]