["from math import factorial\nmod = 10 ** 9 + 7\n\ndef exponentiation(bas, exp, mod=10 ** 9 + 7):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef soln(n: int) -> int:\n    if n <= 2:\n        return 0\n    return (exponentiation(2, n - 1, mod) - 2) % mod\nfor _ in range(int(input())):\n    n = int(input())\n    print(soln(n))", "from math import factorial\nmod = 10 ** 9 + 7\n\ndef exponentiation(bas, exp, mod=10 ** 9 + 7):\n    t = 1\n    while exp > 0:\n        if exp % 2 != 0:\n            t = t * bas % mod\n        bas = bas * bas % mod\n        exp //= 2\n    return t % mod\n\ndef soln(n: int) -> int:\n    if n <= 2:\n        return 0\n    return (pow(2, n - 1, mod) - 2) % mod\nfor _ in range(int(input())):\n    n = int(input())\n    print(soln(n))", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    if n > 2:\n        ans = pow(2, n - 1, mod)\n        print(ans - 2)\n    else:\n        print(0)", "import math\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    if n > 2:\n        ans = pow(2, n - 1, mod)\n        print(ans - 2)\n    else:\n        print(0)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        rem = pow(2, n - 1, 1000000007)\n        print((rem - 2) % 1000000007)", "for i in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        ans = pow(2, n - 1, 1000000007)\n        print((ans - 2) % 1000000007)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        ans = pow(2, n - 1, 1000000007)\n        print((ans - 2) % 1000000007)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        ans = pow(2, n - 1, 1000000007)\n        print((ans - 2) % 1000000007)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        ans = pow(2, n - 1, 1000000007)\n        print((ans - 2) % 1000000007)", "mod = 10 ** 9 + 7\n\ndef main():\n    if n == 1 or n == 2:\n        print(0)\n        return\n    print((pow(2, n - 1, mod) - 2) % mod)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    main()", "t = int(input(''))\nfor i in range(t):\n    n = int(input(''))\n    if n == 1:\n        print('0')\n    else:\n        ans = pow(2, n - 1, 1000000007)\n        print((ans - 2) % 1000000007)", "t = int(input(''))\nfor i in range(t):\n    n = int(input(''))\n    if n == 1:\n        print('0')\n    else:\n        ans = pow(2, n - 1, 1000000007)\n        print((ans - 2) % 1000000007)", "T = int(input(''))\nfor i in range(T):\n    N = int(input(''))\n    if N == 1:\n        print('0')\n    else:\n        ans = pow(2, N - 1, 1000000007)\n        print((ans - 2) % 1000000007)", "def power(a, b, m):\n    if b == 0:\n        return 1\n    res = power(a, b // 2, m)\n    if b % 2:\n        return res * res * a % m\n    else:\n        return res * res % m\nfor _ in range(int(input())):\n    n = int(input())\n    mod = 1000000007\n    if n == 1:\n        print(0)\n    else:\n        print((power(2, n - 1, mod) - 2) % mod)", "def power(a, b, m):\n    if b == 0:\n        return 1\n    res = power(a, b // 2, m)\n    if b % 2:\n        return res * res * a % m\n    else:\n        return res * res % m\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(power(2, n - 1, 1000000007) - 2)", "mod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        ans = pow(2, n - 1, mod)\n        ans -= 2\n        print(ans)", "try:\n    for _ in range(int(input())):\n        n = int(input())\n        print(0) if n == 1 else print(pow(2, n - 1, 10 ** 9 + 7) - 2)\nexcept EOFError:\n    pass", "for _ in range(int(input())):\n    n = int(input())\n    print(0) if n == 1 else print(pow(2, n - 1, 10 ** 9 + 7) - 2)", "for _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(pow(2, n - 1, 10 ** 9 + 7) - 2)", "m = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        g = pow(2, n - 1, m) - 2\n        print(g)", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    a = int(input())\n    if a == 0 or a == 1 or a == 2:\n        print(0)\n    else:\n        print((pow(2, a - 1, MOD) - 2) % MOD)", "bf = int(input())\nfor bf in range(bf):\n    h = int(input())\n    if h > 1:\n        h = h - 1\n    d = pow(2, h, 1000000007)\n    print(d - 2)", "import sys\nMOD = 10 ** 9 + 7\nt = int(sys.stdin.readline())\nfor _t in range(t):\n    n = int(sys.stdin.readline())\n    sys.stdout.write('{}\\n'.format(0 if n < 3 else pow(2, n - 1, MOD) - 2))", "M = 1000000007\ntests = int(input())\nresults = []\nfor i in range(0, tests):\n    n = int(input())\n    if n <= 2:\n        results.append(0)\n    else:\n        val = pow(2, n - 1, M)\n        results.append(val - 2)\nfor xx in results:\n    print(xx)", "for i in range(int(input())):\n    n = int(input())\n    if n > 2:\n        print((pow(2, n - 1, 1000000007) - 2) % 1000000007)\n    else:\n        print(0)", "for i in range(int(input())):\n    n = int(input())\n    if n > 2:\n        print((pow(2, n - 1, 1000000007) + 1000000005) % 1000000007)\n    else:\n        print(0)", "i = int(input())\nMOD = int(1000000000.0 + 7)\nwhile i:\n    n = int(input())\n    if n <= 2:\n        print(0)\n    else:\n        print(pow(2, n - 1, MOD) - 2)\n    i -= 1", "for t in range(int(input())):\n    n = int(input())\n    print(pow(2, n - 1, 1000000007) - 2) if n > 2 else print(0)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print('0')\n    else:\n        ans = pow(2, n - 1, 1000000007) - 2\n        print(ans)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        ans = pow(2, n - 1, 1000000007)\n        print(ans - 2)", "for t in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(0)\n    else:\n        print((pow(2, n - 1, 1000000007) - 2) % 1000000007)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n > 1:\n        n = n - 1\n    a = pow(2, n, 1000000007)\n    a = a - 2\n    print(a)", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    N = int(input()) - 1\n    if N <= 1:\n        print(0)\n        continue\n    val = 1\n    dva = 2\n    while N:\n        if N & 1:\n            val *= dva\n            val %= MOD\n        dva *= dva\n        dva %= MOD\n        N >>= 1\n    val -= 2\n    if val < 0:\n        val += MOD\n    print(val)", "t = int(input())\np = 1000000007\nfor i in range(t):\n    n = int(input())\n    n -= 1\n    if n > 1:\n        print((pow(2, n, p) - 2 + p) % p)\n    else:\n        print('0')", "mod = 1000000007\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    if N < 3:\n        print(0)\n    else:\n        print((pow(2, N - 1, mod) + mod - 2) % mod)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    if n == 1 or n == 2:\n        print(0)\n    else:\n        print((pow(2, n - 1, 10 ** 9 + 7) - 2) % (10 ** 9 + 7))\n    t -= 1", "def main():\n    mod = 10 ** 9 + 7\n    for _ in range(int(input())):\n        n = int(input())\n        res = pow(2, n - 1, mod)\n        res = res - 2\n        if res < 0:\n            res = 0\n        print(res)\nmain()", "def modularExponentiation(x, n, M):\n    result = 1\n    while n > 0:\n        if n % 2 == 1:\n            result = result * x % M\n        x = x * x % M\n        n = n // 2\n    return result\nfor _ in range(int(input())):\n    n = int(input())\n    print('0') if n <= 2 else print((modularExponentiation(2, n - 1, 1000000007) - 2) % 1000000007)", "t = int(input())\nmod = 10 ** 9 + 7\nwhile t:\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print((pow(2, n - 1, mod) - 2) % mod)\n    t -= 1", "mod = 10 ** 9 + 7\n\ndef modexp(base, exp):\n    res = 1\n    base = base % mod\n    while exp > 0:\n        if exp % 2 == 1:\n            res = res * base % mod\n        exp >>= 1\n        base = base * base % mod\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        ans = (modexp(2, n - 1) - 2 + mod) % mod\n        print(ans)", "MOD = 10 ** 9 + 7\n\ndef powerMod(b, e, m):\n    x = 1\n    while e > 0:\n        if e % 2 == 1:\n            x = x * b % m\n            e = e - 1\n        else:\n            b = b * b % m\n            e = e // 2\n    return x\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        ans = powerMod(2, n - 1, MOD) - 2\n        if ans < 1:\n            ans = ans + MOD\n        print(ans)\n    t = t - 1", "t = int(input().strip())\nfor i in range(0, t):\n    n = int(input().strip())\n    if n < 3:\n        print(0)\n    else:\n        print(pow(2, n - 1, 1000000007) - 2)", "t = int(input())\nfor i in range(t):\n    x = int(input())\n    if x <= 2:\n        print(0)\n    else:\n        print(pow(2, x - 1, 1000000007) - 2)", "MOD = 1000000007\n\ndef power(x, n):\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return power(x * x % MOD, n / 2)\n    else:\n        return x * power(x * x % MOD, int(n / 2)) % MOD\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        ans = 0\n    else:\n        ans = (power(2, n - 1) - 2) % MOD\n    print(ans)", "cases = int(input())\nfor _ in range(cases):\n    N = int(input())\n    print(max(0, pow(2, N - 1, 10 ** 9 + 7) - 2))", "t = int(input())\nM = 10 ** 9 + 7\nwhile t:\n    x = 2\n    result = 1\n    t -= 1\n    n = int(input())\n    if n <= 2:\n        print(0)\n    else:\n        y = n - 1\n        while y:\n            if y % 2 == 1:\n                result = result * x % M\n            y = y // 2\n            x = x * x % M\n        print(result - 2)", "MOD = int(1000000000.0 + 7)\nfor _ in range(int(input())):\n    n = input()\n    n = int(n)\n    if n <= 2:\n        print('0')\n        continue\n    print(pow(2, n - 1, MOD) - 2)", "def modular_pow(base, exponent, modulus):\n    if modulus == 1:\n        return 0\n    result = 1\n    base = base % modulus\n    while exponent > 0:\n        if exponent % 2 == 1:\n            result = result * base % modulus\n        exponent = exponent >> 1\n        base = base * base % modulus\n    return result\nfor tests in range(int(input())):\n    N = int(input())\n    if N < 3:\n        print(0)\n    else:\n        a = modular_pow(2, N - 1, 10 ** 9 + 7) - 2\n        if a < 0:\n            print(a + 10 ** 9 + 7)\n        else:\n            print(a)", "def poww(a, b, m):\n    if b == 0:\n        return 1 % m\n    elif b == 1:\n        return a % m\n    elif b % 2 == 0:\n        temp = poww(a, b // 2, m)\n        return temp * temp % m\n    else:\n        temp = poww(a, b // 2, m)\n        return temp * temp * a % m\nt = int(input())\nmodd = 10 ** 9 + 7\nwhile t:\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print((poww(2, n - 1, modd) % modd - 2) % modd)\n    t -= 1", "modulo = 1000000007\n\ndef pow(a, n):\n    res = 1\n    while n > 0:\n        if n & 1:\n            res *= a\n            res %= modulo\n        a *= a\n        a %= modulo\n        n //= 2\n    return res\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    if n > 2:\n        print((pow(2, n - 1) - 2) % modulo)\n    else:\n        print(0)", "def pow(a, b):\n    if b == 0:\n        m = 1\n    elif b == 1:\n        m = 2\n    else:\n        m = pow(a, b // 2)\n        m = m * m % (1000000000 + 7)\n        if b % 2 == 1:\n            m = m * a % (1000000000 + 7)\n    return m\nfor i in range(int(input())):\n    c = int(input())\n    p = pow(2, c - 1)\n    p = (p - 2) % (1000000000 + 7)\n    if c == 1:\n        print(0)\n    else:\n        print(p)", "mod = int(10 ** 9 + 7)\nt = int(input())\nwhile t:\n    n = int(input())\n    if n > 2:\n        total_combination = pow(2, n - 1, mod) - 2\n    else:\n        total_combination = 0\n    print(int(total_combination))\n    t -= 1", "test = int(input(''))\nwhile test:\n    n = int(input(''))\n    if n == 1 or n == 2:\n        print(0)\n    else:\n        n = n - 1\n        kok = pow(2, n, 1000000007)\n        kok = kok - 2\n        print(kok)\n    test = test - 1", "t = int(input())\nmod = 1000000007\nwhile t:\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        f = n - 1\n        ans = pow(2, f, mod) - 2\n        print(ans)\n    t = t - 1", "def main():\n    from sys import stdin, stdout\n    MOD = int(1000000000.0) + 7\n\n    def power(a, b):\n        if b == 0:\n            return 1\n        if b & 1:\n            return a * power(a, b - 1) % MOD\n        else:\n            return power(a * a % MOD, b >> 1) % MOD\n    for _ in range(int(stdin.readline())):\n        n = int(stdin.readline())\n        n -= 2\n        if n > 0:\n            n = ((power(2, n) - 1) % MOD << 1) % MOD\n        else:\n            n = 0\n        stdout.write(str(n) + '\\n')\nmain()", "import sys, math, string, fractions, functools, collections\nsys.setrecursionlimit(10 ** 7)\nRI = lambda x=' ': list(map(int, input().rstrip().split(x)))\nRS = lambda x=' ': input().rstrip().split(x)\ndX = [-1, 1, 0, 0, -1, 1, -1, 1]\ndY = [0, 0, -1, 1, 1, -1, -1, 1]\nmod = int(1000000000.0 + 7)\neps = 1e-06\nMAX = 1010\nT = RI()[0]\nfor i in range(T):\n    N = RI()[0]\n    if N == 1 or N == 2:\n        print(0)\n    else:\n        print((pow(2, N - 1, mod) + (mod - 2)) % mod)", "def modexp_rl(a, b, n):\n    r = 1\n    while b > 0:\n        if b % 2 == 1:\n            r = r * a % n\n        a = a * a % n\n        b = b // 2\n    return r % n\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    if n > 2:\n        n = (modexp_rl(2, n - 1, 1000000007) - 2) % 1000000007\n    elif n <= 2:\n        n = 0\n    print(n)", "t = int(input())\nm = pow(10, 9) + 7\n\ndef calcPower(x, y):\n    v = 1\n    while y > 0:\n        if y % 2 == 1:\n            v = v * x % m\n        x = x * x % m\n        y = y // 2\n    return v\nwhile t != 0:\n    n = int(input())\n    if n in [1, 2]:\n        print(0)\n    else:\n        f = calcPower(2, n - 2)\n        print((2 * f - 2) % m)\n    t -= 1", "import sys\nsys.setrecursionlimit(50000000)\n\ndef read(var_type=int):\n    n = var_type(input())\n    return n\n\ndef read_array(var_type=int):\n    arr = tuple((var_type(n) for n in input().split()))\n    return arr\nPRIME = 10 ** 9 + 7\n\ndef mod_pow(b, e):\n    if e == 0:\n        return 1\n    p = mod_pow(b, e // 2)\n    p = p * p % PRIME\n    if e % 2 == 1:\n        p = p * b % PRIME\n    return p\nt = read()\nfor i in range(t):\n    n = read()\n    if n <= 2:\n        print(0)\n    else:\n        ans = mod_pow(2, n - 1)\n        ans = (ans + PRIME - 2) % PRIME\n        print(ans)", "mod = 10 ** 9 + 7\n\ndef pow(a, b):\n    x = 1\n    while b:\n        if b % 2 == 1:\n            x *= a\n            x %= mod\n        b //= 2\n        a *= a\n        a %= mod\n    return x\nfor t in range(int(input())):\n    n = int(input())\n    if n <= 2:\n        print(0)\n    else:\n        y = pow(2, n - 1) - 2\n        print(y)", "mod = 7 + 10 ** 9\n\ndef pow_mod(x, y, z):\n    number = 1\n    while y:\n        if y & 1:\n            number = number * x % z\n        y >>= 1\n        x = x * x % z\n    return number\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    if n < 3:\n        ans = 0\n    elif n == 3:\n        ans = 2\n    else:\n        ans = 2 * (pow_mod(2, n - 2, mod) - 1)\n        ans %= mod\n    print(ans)", "def calcMod(b):\n    a1 = 2\n    p = 1\n    while b > 0:\n        if b % 2 != 0:\n            p = p * a1\n            p = p % 1000000007\n        b = b // 2\n        a1 = a1 * a1 % 1000000007\n    return p\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n < 3:\n        print(0)\n    else:\n        print(calcMod(n - 1) - 2)", "for t in range(int(input())):\n    n = int(input())\n    print(0 if n == 1 or n == 2 else pow(2, n - 1, 1000000007) - 2)", "for t in range(int(input())):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(0)\n    else:\n        print(pow(2, n - 1, 1000000007) - 2)", "def mod_exp(num, pow, mod):\n    answer = 1\n    while pow > 0:\n        if pow & 1 == 1:\n            answer = answer * num % mod\n        num = num * num % mod\n        pow = pow >> 1\n    return answer\nmodulo = 1000000007\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    answer = mod_exp(2, n - 1, modulo)\n    answer = answer - 2\n    if answer < 0:\n        answer = answer + n\n    print(answer)", "MOD = 1000000007\n\ndef modex(a, p, m):\n    if int(p) is 0:\n        return 1\n    if int(p) & 1:\n        k = modex(a, p / 2, m)\n        return k * k % m * a % m\n    k = modex(a, p / 2, m)\n    return k * k % m\n\ndef main():\n    t = int(input())\n    while t is not 0:\n        t -= 1\n        n = int(input())\n        if n is 1:\n            print(0)\n        else:\n            print((modex(2, n - 1, MOD) - 2 + MOD) % MOD)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    print(pow(2, n - 1, 10 ** 9 + 7) - 2) if n > 2 else print(0)", "def pow_mod(x, y, z):\n    nn = 1\n    while y:\n        if y & 1:\n            nn = nn * x % z\n        y >>= 1\n        x = x * x % z\n    return nn\nmod = 1000000007\nt = int(input().strip())\nwhile t > 0:\n    n = int(input().strip())\n    if n is 1 or n is 2:\n        print(0)\n    else:\n        n -= 1\n        ans = pow_mod(2, n, mod)\n        print(ans - 2)\n    t -= 1", "for t in range(int(input())):\n    print((pow(2, max(int(input()) - 1, 1), 1000000007) - 2 + 1000000007) % 1000000007)", "m = int(1000000000.0) + 7\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    if N == 1:\n        N = 2\n    print((pow(2, N - 1, m) - 2 + m) % m)", "from sys import stdin\nt = int(stdin.readline())\nwhile t:\n    n = int(stdin.readline())\n    if n == 1:\n        print(0)\n    else:\n        print((pow(2, n - 1, 1000000007) - 2) % 1000000007)\n    t -= 1", "def twop(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    k = n // 2\n    if n % 2 == 0:\n        return (twop(k) % 1000000007) ** 2 % 1000000007\n    else:\n        return (twop(k) % 1000000007) ** 2 * 2 % 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print('0')\n        continue\n    print(twop(n - 1) - 2)", "mod = 1000000007\n\ndef pow(base, exp):\n    X = base\n    E = exp\n    Y = 1\n    while E > 0:\n        if E % 2 == 0:\n            X = X * X % mod\n            E = E / 2\n        else:\n            Y = X * Y % mod\n            E = E - 1\n    return Y\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    if n == 1:\n        print(0)\n    else:\n        print(pow(2, n - 1) - 2)", "def power(a, b, p=1000000007):\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        x = power(a, b // 2) % p\n        if b % 2 == 0:\n            return x * x % p\n        else:\n            return x * x * a % p\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    print((power(2, n - 1) - 2) % 1000000007)", "R = 1000000007\n\ndef power12(a, b):\n    if b == 0:\n        return 1\n    temp = power12(a, b // 2) % R\n    if b % 2 == 0:\n        return temp * temp % R\n    if b % 2 == 1:\n        return temp * temp % R * a % R\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    if n <= 2:\n        ans = 0\n    else:\n        ans = (power12(2, n - 1) - 2) % R\n    print(ans)", "import math\nr = 1000000007\n\ndef func1(i):\n    if i < 50:\n        return (1 << i) % r\n    f = func1(i // 2) % r\n    if i % 2:\n        return 2 * f * f % r\n    else:\n        return f * f % r\nt = int(input())\nans = []\nfor _ in range(t):\n    i = int(input())\n    if i in (1, 2):\n        ans.append(0)\n    else:\n        ans.append(func1(i - 1) - 2)\nfor a in ans:\n    print(a)", "t = int(input())\n\ndef pow_mod(x, y, z):\n    number = 1\n    while y:\n        if y & 1:\n            number = number * x % z\n        y >>= 1\n        x = x * x % z\n    return number\nout = []\nc = 1000000007\nfor i in range(0, t):\n    n = int(input())\n    if n == 1 or n == 2:\n        out.append(0)\n    else:\n        out.append(pow_mod(2, n - 1, c) - 2)\nfor i in out:\n    print(i)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(0)\n        continue\n    n -= 1\n    ans = pow(2, n, 10 ** 9 + 7) - 2\n    if ans < 0:\n        ans += 10 ** 9 + 7\n    print(ans)", "import sys, math\nMOD = 10 ** 9 + 7\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    print((pow(2, n - 1, MOD) - 2) % MOD if n > 2 else 0)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n <= 2:\n        print(0)\n        continue\n    ans = 1\n    sq = 2\n    n -= 1\n    while n > 0:\n        if n % 2 == 1:\n            ans = ans * sq % 1000000007\n        sq = sq * sq % 1000000007\n        n //= 2\n    ans -= 2\n    ans %= 1000000007\n    if ans < 0:\n        ans += 1000000007\n    print(ans)"]