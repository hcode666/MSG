["import sys\nsys.setrecursionlimit(1000000)\n(t, mod) = (int(sys.stdin.readline()), 1000000007)\nwhile t:\n    n = int(sys.stdin.readline())\n    a = [[0 for _ in range(101)] for _ in range(n + 1)]\n    for i in range(n):\n        cur = [int(x) for x in sys.stdin.readline().split()]\n        for x in cur:\n            a[i][x] = 1\n    t -= 1\n    lim = 1 << n\n    dp = [[-1 for _ in range(lim + 1)] for _ in range(101)]\n\n    def tshirt(shirt, mask):\n        if mask == lim - 1:\n            return 1\n        if shirt > 100:\n            return 0\n        if dp[shirt][mask] != -1:\n            return dp[shirt][mask]\n        ans = 0\n        for ppl in range(n):\n            chk = 1 << ppl\n            if chk & mask:\n                continue\n            if not a[ppl][shirt]:\n                continue\n            ans += tshirt(shirt + 1, chk | mask) % mod\n        ans += tshirt(shirt + 1, mask) % mod\n        dp[shirt][mask] = ans\n        return ans\n    print(tshirt(0, 0))", "md = 10 ** 9 + 7\nbook = dict()\nids = [set()] * 10\nn = 0\n\ndef poss(i, a):\n    if (i, tuple(a)) in book.keys():\n        return book[i, tuple(a)]\n    elif i == 101:\n        if all(a):\n            return 1\n        else:\n            return 0\n    else:\n        res = poss(i + 1, a)\n        for j in range(n):\n            if i in ids[j] and (not a[j]):\n                b = a.copy()\n                b[j] = True\n                res = (res + poss(i + 1, b)) % md\n        book[i, tuple(a)] = res\n        return res\nfor _ in range(int(input())):\n    N = int(input())\n    n = N\n    idlst = []\n    for k in range(N):\n        e = set(list(map(int, input().split())))\n        idlst.append(e)\n    ids = idlst\n    print(poss(1, [False] * N) % md)\n    book.clear()", "md = 10 ** 9 + 7\nbook = dict()\nids = [set()] * 10\nn = 0\n\ndef poss(i, a):\n    if (i, tuple(a)) in book.keys():\n        return book[i, tuple(a)]\n    elif i == 101:\n        if all(a):\n            return 1\n        else:\n            return 0\n    else:\n        res = poss(i + 1, a)\n        for j in range(n):\n            if i in ids[j] and (not a[j]):\n                b = a.copy()\n                b[j] = True\n                res = (res + poss(i + 1, b)) % md\n        book[i, tuple(a)] = res\n        return res\nfor _ in range(int(input())):\n    N = int(input())\n    n = N\n    idlst = []\n    for k in range(N):\n        e = set(list(map(int, input().split())))\n        idlst.append(e)\n    ids = idlst\n    print(poss(1, [False] * N) % md)\n    book.clear()", "mod = 1000000000.0 + 7\nimport numpy as np\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ingr = [0] * 101\n    for i in range(n):\n        for shirt in map(int, input().split(' ')):\n            ingr[shirt] |= 1 << i\n    dp = [[0 for _ in range((1 << n) + 1)] for _ in range(101)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        for mask in range(1 << n):\n            dp[i][mask] += int(dp[i - 1][mask])\n            dp[i][mask] %= mod\n            tmask = mask\n            while tmask != 0:\n                bit = tmask & -tmask\n                if bit & ingr[i]:\n                    dp[i][mask] += int(dp[i - 1][mask ^ bit])\n                    dp[i][mask] %= mod\n                tmask -= bit\n    print(int(dp[100][(1 << n) - 1]))", "import sys\nsys.setrecursionlimit(10 ** 6)\nip = sys.stdin.readline\nop = sys.stdout.write\n\ndef recursive_thinking(shirts, n, t_id, mask, tb):\n    if mask == 2 ** n - 1:\n        return 1\n    if t_id == 101:\n        return 0\n    if (t_id, mask) in tb:\n        return tb[t_id, mask]\n    ways = recursive_thinking(shirts, n, t_id + 1, mask, tb)\n    for j in range(n):\n        if mask & 1 << j == 0 and t_id in shirts[j]:\n            ways += recursive_thinking(shirts, n, t_id + 1, mask | 1 << j, tb)\n    tb[t_id, mask] = ways\n    return ways\nt = int(ip())\nres = []\nmod = 1000000007\nfor _ in range(t):\n    n = int(ip())\n    shirts = {}\n    for i in range(n):\n        lst = [int(x) for x in ip().split()]\n        shirts[i] = set(lst)\n    ways = recursive_thinking(shirts, n, 1, 0, {})\n    res.append(ways % mod)\nfor val in res:\n    op(str(val) + '\\n')", "import sys\nsys.setrecursionlimit(10 ** 6)\nip = sys.stdin.readline\nop = sys.stdout.write\n\ndef recursive_thinking(shirts, n, t_id, mask, tb):\n    if mask == 2 ** n - 1:\n        return 1\n    if t_id == 101:\n        return 0\n    if (t_id, mask) in tb:\n        return tb[t_id, mask]\n    ways = recursive_thinking(shirts, n, t_id + 1, mask, tb)\n    for j in range(n):\n        if mask & 1 << j == 0 and t_id in shirts[j]:\n            mask |= 1 << j\n            ways += recursive_thinking(shirts, n, t_id + 1, mask, tb)\n            mask &= ~(1 << j)\n    tb[t_id, mask] = ways\n    return ways\nt = int(ip())\nres = []\nmod = 1000000007\nfor _ in range(t):\n    n = int(ip())\n    shirts = {}\n    for i in range(n):\n        lst = [int(x) for x in ip().split()]\n        shirts[i] = set(lst)\n    ways = recursive_thinking(shirts, n, 1, 0, {})\n    res.append(ways % mod)\nfor val in res:\n    op(str(val) + '\\n')", "mod = 1000000007\n\ndef solve(shirt, people, dp, mask, n):\n    if mask == 0:\n        return 1\n    if shirt > 100:\n        return 0\n    if dp[shirt][mask] != -1:\n        return dp[shirt][mask]\n    ans = 0\n    for i in range(1, n + 1):\n        if mask & 1 << i - 1 != 0 and people[i][shirt]:\n            ans = ans + solve(shirt + 1, people, dp, mask ^ 1 << i - 1, n) % mod\n    ans = (ans + solve(shirt + 1, people, dp, mask, n)) % mod\n    dp[shirt][mask] = ans\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    people = []\n    dp = []\n    for i in range(101):\n        dp.append([-1 for j in range(1025)])\n    for i in range(11):\n        people.append([False for j in range(101)])\n    for i in range(1, n + 1):\n        temp = list(map(int, input().split()))\n        for x in temp:\n            people[i][x] = True\n    print(solve(1, people, dp, (1 << n) - 1, n))", "from functools import lru_cache\nmod = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    mapping = []\n    for i in range(n):\n        tshirts = {int(tshirt) for tshirt in input().split()}\n        mapping.append(tshirts)\n\n    @lru_cache(maxsize=None)\n    def comp(mask, tshirt):\n        if tshirt == 101:\n            if mask == 0:\n                return 1\n            else:\n                return 0\n        ans = comp(mask, tshirt + 1) % mod\n        for i in range(n):\n            if mask & 1 << i:\n                if tshirt in mapping[i]:\n                    ans += comp(mask ^ 1 << i, tshirt + 1)\n                    ans %= mod\n        return ans\n    print(comp(2 ** n - 1, 1))", "mod = 1000000000.0 + 7\nimport numpy as np\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ingr = [0] * 101\n    for i in range(n):\n        for shirt in map(int, input().split(' ')):\n            ingr[shirt] |= 1 << i\n    dp = [[0 for _ in range((1 << n) + 1)] for _ in range(101)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        for mask in range(1 << n):\n            dp[i][mask] += int(dp[i - 1][mask])\n            dp[i][mask] %= mod\n            tmask = mask\n            while tmask != 0:\n                bit = tmask & -tmask\n                if bit & ingr[i]:\n                    dp[i][mask] += int(dp[i - 1][mask ^ bit])\n                    dp[i][mask] %= mod\n                tmask -= bit\n    print(int(dp[100][(1 << n) - 1]))", "from collections import defaultdict\nmod = 10 ** 9 + 7\n\ndef solve(shirt, mask, N):\n    if mask == (1 << N) - 1:\n        return 1\n    if shirt > 100:\n        return 0\n    if dp[shirt][mask] != -1:\n        return dp[shirt][mask]\n    ans = 0\n    for i in range(1, N + 1):\n        if mask & 1 << i - 1 != 0:\n            continue\n        if people[i][shirt] == 1:\n            ans += solve(shirt + 1, mask | 1 << i - 1, N)\n            ans %= mod\n    ans += solve(shirt + 1, mask, N)\n    ans %= mod\n    dp[shirt][mask] = ans\n    return ans\nfor t in range(int(input())):\n    N = int(input())\n    people = [[-1] * 101 for i in range(11)]\n    dp = [[-1] * 1025 for i in range(101)]\n    for j in range(N):\n        lst = list(map(int, input().split()))\n        for k in lst:\n            people[j + 1][k] = 1\n    print(solve(1, 0, N))", "MOD = 1000000007\n\ndef findAns(mask, tid, n, people, dp):\n    if mask == (1 << n) - 1:\n        return 1\n    if tid >= 101:\n        return 0\n    if dp[tid][mask] != -1:\n        return dp[tid][mask]\n    ans = findAns(mask, tid + 1, n, people, dp)\n    for i in range(n):\n        if mask & 1 << i:\n            continue\n        if tid in people[i]:\n            ans += findAns(mask | 1 << i, tid + 1, n, people, dp)\n            ans %= MOD\n    dp[tid][mask] = ans\n    return dp[tid][mask] % MOD\nfor _ in range(int(input())):\n    n = int(input())\n    people = []\n    dp = [[-1 for i in range(1 << n)] for j in range(101)]\n    for j in range(n):\n        arr = [int(c) for c in input().split()]\n        s = set(arr)\n        people.append(s)\n    print(findAns(0, 1, n, people, dp) % MOD)", "MOD = 1000000007\n\ndef findAns(mask, tid, n, people, dp):\n    if mask == (1 << n) - 1:\n        return 1\n    if tid >= 101:\n        return 0\n    if dp[tid][mask] != -1:\n        return dp[tid][mask]\n    ans = findAns(mask, tid + 1, n, people, dp)\n    for i in range(n):\n        if mask & 1 << i:\n            continue\n        if tid in people[i]:\n            ans += findAns(mask | 1 << i, tid + 1, n, people, dp)\n            ans %= MOD\n    dp[tid][mask] = ans\n    return dp[tid][mask] % MOD\nfor _ in range(int(input())):\n    n = int(input())\n    people = []\n    dp = [[-1 for i in range(1 << n)] for j in range(101)]\n    for j in range(n):\n        arr = [int(c) for c in input().split()]\n        s = set(arr)\n        people.append(s)\n    print(findAns(0, 1, n, people, dp) % MOD)", "from collections import defaultdict\nmod = 10 ** 9 + 7\n\ndef solve(shirt, mask, N):\n    if mask == (1 << N) - 1:\n        return 1\n    if shirt > 100:\n        return 0\n    if dp[shirt][mask] != -1:\n        return dp[shirt][mask]\n    ans = 0\n    for i in range(1, N + 1):\n        if mask & 1 << i - 1 != 0:\n            continue\n        if people[i][shirt] == 1:\n            ans += solve(shirt + 1, mask | 1 << i - 1, N)\n            ans %= mod\n    ans += solve(shirt + 1, mask, N)\n    ans %= mod\n    dp[shirt][mask] = ans\n    return ans\nfor t in range(int(input())):\n    N = int(input())\n    people = [[-1] * 101 for i in range(11)]\n    dp = [[-1] * 1025 for i in range(101)]\n    for j in range(N):\n        lst = list(map(int, input().split()))\n        for k in lst:\n            people[j + 1][k] = 1\n    print(solve(1, 0, N))", "for _ in range(int(input())):\n    n = int(input())\n    arr = [[] for j in range(100)]\n    memo = {}\n    for i in range(n):\n        for j in input().split():\n            arr[int(j) - 1].append(i)\n    arr = [i for i in arr if i]\n\n    def helper(index, mask):\n        if index == len(arr):\n            return 1 if not mask else 0\n        if not mask:\n            return 1\n        if (index, mask) in memo:\n            return memo[index, mask]\n        count = 0\n        for i in arr[index]:\n            if mask & 1 << i:\n                count += helper(index + 1, mask ^ 1 << i)\n        count += helper(index + 1, mask)\n        memo[index, mask] = count % 1000000007\n        return memo[index, mask]\n    print(helper(0, (1 << n) - 1) % 1000000007)", "MAX_T_SHIRT = 100\nt_shirts_elephant_map = []\ndp = []\n\ndef find(mask, t_shirt_id):\n    if mask == 0:\n        return 1\n    if t_shirt_id < 0:\n        return 0\n    if dp[mask][t_shirt_id] != -1:\n        return dp[mask][t_shirt_id]\n    ans = find(mask, t_shirt_id - 1)\n    for e_id in t_shirts_elephant_map[t_shirt_id]:\n        if mask & 1 << e_id > 0:\n            ans += find(mask ^ 1 << e_id, t_shirt_id - 1)\n    ans %= 1000000007\n    dp[mask][t_shirt_id] = ans\n    return ans\nfor t in range(int(input())):\n    elephant_count = int(input())\n    t_shirts_elephant_map = [list() for i in range(MAX_T_SHIRT)]\n    dp = [[-1 for i in range(MAX_T_SHIRT)] for i in range(1 << elephant_count)]\n    for elephant_id in range(elephant_count):\n        t_shirts = [int(x) for x in input().split()]\n        for t_shirt in t_shirts:\n            t_shirts_elephant_map[t_shirt - 1].append(elephant_id)\n    print(find((1 << elephant_count) - 1, MAX_T_SHIRT - 1))", "from collections import defaultdict\nmod = 10 ** 9 + 7\n\ndef solve(shirt, mask, N):\n    if mask == (1 << N) - 1:\n        return 1\n    if shirt > 100:\n        return 0\n    if dp[shirt][mask] != -1:\n        return dp[shirt][mask]\n    ans = 0\n    for i in range(1, N + 1):\n        if mask & 1 << i - 1 != 0:\n            continue\n        if people[i][shirt] == 1:\n            ans += solve(shirt + 1, mask | 1 << i - 1, N)\n            ans %= mod\n    ans += solve(shirt + 1, mask, N)\n    ans %= mod\n    dp[shirt][mask] = ans\n    return ans\nfor t in range(int(input())):\n    N = int(input())\n    people = [[-1] * 101 for i in range(11)]\n    dp = [[-1] * 1025 for i in range(101)]\n    for j in range(N):\n        lst = list(map(int, input().split()))\n        for k in lst:\n            people[j + 1][k] = 1\n    print(solve(1, 0, N))", "mod = 1000000000.0 + 7\nimport numpy as np\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ingr = [0] * 101\n    for i in range(n):\n        for shirt in map(int, input().split(' ')):\n            ingr[shirt] |= 1 << i\n    dp = [[0 for _ in range((1 << n) + 1)] for _ in range(101)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        for mask in range(1 << n):\n            dp[i][mask] += int(dp[i - 1][mask])\n            dp[i][mask] %= mod\n            tmask = mask\n            while tmask != 0:\n                bit = tmask & -tmask\n                if bit & ingr[i]:\n                    dp[i][mask] += int(dp[i - 1][mask ^ bit])\n                    dp[i][mask] %= mod\n                tmask -= bit\n    print(int(dp[100][(1 << n) - 1]))", "mod = 1000000000.0 + 7\nimport numpy as np\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ingr = [0] * 101\n    for i in range(n):\n        for shirt in map(int, input().split(' ')):\n            ingr[shirt] |= 1 << i\n    dp = [[0 for _ in range((1 << n) + 1)] for _ in range(101)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        for mask in range(1 << n):\n            dp[i][mask] += int(dp[i - 1][mask])\n            dp[i][mask] %= mod\n            tmask = mask\n            while tmask != 0:\n                bit = tmask & -tmask\n                if bit & ingr[i]:\n                    dp[i][mask] += int(dp[i - 1][mask ^ bit])\n                    dp[i][mask] %= mod\n                tmask -= bit\n    print(int(dp[100][(1 << n) - 1]))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "mod = 1000000000.0 + 7\nimport numpy as np\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    ingr = [0] * 101\n    for i in range(n):\n        for shirt in map(int, input().split(' ')):\n            ingr[shirt] |= 1 << i\n    dp = [[0 for _ in range((1 << n) + 1)] for _ in range(101)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        for mask in range(1 << n):\n            dp[i][mask] += int(dp[i - 1][mask])\n            dp[i][mask] %= mod\n            tmask = mask\n            while tmask != 0:\n                bit = tmask & -tmask\n                if bit & ingr[i]:\n                    dp[i][mask] += int(dp[i - 1][mask ^ bit])\n                    dp[i][mask] %= mod\n                tmask -= bit\n    print(int(dp[100][(1 << n) - 1]))", "dp = []\nmod = 1000000007\np = 0\n\ndef solve(shirtNum, li, mask):\n    if shirtNum == 101:\n        if mask == p - 1:\n            return 1\n        else:\n            return 0\n    if dp[shirtNum][mask] != -1:\n        return dp[shirtNum][mask]\n    count = solve(shirtNum + 1, li, mask)\n    for i in li[shirtNum]:\n        if mask & 1 << i:\n            continue\n        count += solve(shirtNum + 1, li, mask | 1 << i)\n    dp[shirtNum][mask] = count % mod\n    return count % mod\nfor _ in range(int(input())):\n    n = int(input())\n    li = [[]] * 101\n    dp = [[-1] * (1 << n) for i in range(102)]\n    p = 1 << n\n    for i in range(n):\n        for ele in list(map(int, input().split())):\n            if li[ele]:\n                li[ele].append(i)\n            else:\n                li[ele] = [i]\n    print(solve(1, li, 0))", "dp = []\nmod = 1000000007\np = 0\n\ndef solve(shirtNum, li, mask):\n    if shirtNum == 101:\n        if mask == p - 1:\n            dp[shirtNum][mask] = 1\n            return 1\n        else:\n            dp[shirtNum][mask] = 0\n            return 0\n    if dp[shirtNum][mask] != -1:\n        return dp[shirtNum][mask]\n    count = solve(shirtNum + 1, li, mask)\n    for i in li[shirtNum]:\n        if mask & 1 << i:\n            continue\n        count += solve(shirtNum + 1, li, mask | 1 << i)\n    dp[shirtNum][mask] = count % mod\n    return count % mod\nfor _ in range(int(input())):\n    n = int(input())\n    li = [[]] * 101\n    dp = [[-1] * (1 << n) for i in range(102)]\n    p = 1 << n\n    for i in range(n):\n        for ele in list(map(int, input().split())):\n            if li[ele]:\n                li[ele].append(i)\n            else:\n                li[ele] = [i]\n    print(solve(1, li, 0))", "t = int(input())\nm = int(1000000000.0) + 7\nallmask = 0\n\ndef solve(tss, dp, mask, tid):\n    if mask == allmask:\n        return 1\n    if tid > 100:\n        return 0\n    if dp[mask][tid] != -1:\n        return dp[mask][tid]\n    ways = solve(tss, dp, mask, tid + 1)\n    size = len(tss[tid])\n    for j in range(size):\n        if mask & 1 << tss[tid][j]:\n            continue\n        else:\n            ways += solve(tss, dp, mask | 1 << tss[tid][j], tid + 1)\n            ways %= m\n    dp[mask][tid] = ways\n    return ways\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    tss = [[] for i in range(101)]\n    for i in range(n):\n        for tshirt in map(int, input().split()):\n            tss[tshirt].append(i)\n    dp = [[-1 for _ in range(101)] for _ in range((1 << n) + 1)]\n    allmask = (1 << n) - 1\n    print(solve(tss, dp, 0, 1))", "t = int(input())\nm = int(1000000000.0) + 7\nallmask = 0\n\ndef solve(tss, dp, mask, tid):\n    if mask == allmask:\n        return 1\n    if tid > 100:\n        return 0\n    if dp[mask][tid] != -1:\n        return dp[mask][tid]\n    ways = solve(tss, dp, mask, tid + 1)\n    size = len(tss[tid])\n    for j in range(size):\n        if mask & 1 << tss[tid][j]:\n            continue\n        else:\n            ways += solve(tss, dp, mask | 1 << tss[tid][j], tid + 1)\n            ways %= m\n    dp[mask][tid] = ways\n    return ways\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    tss = [[] for i in range(101)]\n    for i in range(n):\n        for tshirt in map(int, input().split()):\n            tss[tshirt].append(i)\n    dp = [[-1 for _ in range(101)] for _ in range((1 << n) + 1)]\n    allmask = (1 << n) - 1\n    print(solve(tss, dp, 0, 1))", "import os, sys, math\nfrom threading import Thread, stack_size\nfrom collections import defaultdict as dd, deque\nfrom bisect import bisect_left as bl, bisect as br\nfrom heapq import heappush as push, heappop as pop, heapify\nsys.setrecursionlimit(10 ** 6 + 999)\nstack_size(2 ** 27)\nBUFSIZE = 8192\nmod = int(1000000000.0) + 7\nmod2 = 998244353\nyes = 'YES'\nno = 'NO'\nYes = 'Yes'\nNo = 'No'\ninput = lambda : sys.stdin.readline().rstrip('\\r\\n')\n\ndef si():\n    return input()\n\ndef msi():\n    return input().split()\n\ndef mii():\n    return [int(i) for i in input().split()]\n\ndef main():\n\n    def solve(mask, tid):\n        if mask == all_done:\n            return 1\n        if tid == 101:\n            return 0\n        if dp[mask, tid] != -1:\n            return dp[mask, tid]\n        else:\n            ans = solve(mask, tid + 1)\n            for i in d[tid]:\n                if mask & 1 << i == 0:\n                    nmask = mask | 1 << i\n                    ans = ans % mod + solve(nmask, tid + 1) % mod\n        dp[mask, tid] = ans % mod\n        return ans % mod\n    n = int(si())\n    d = dd(list)\n    all_done = (1 << n) - 1\n    for i in range(n):\n        for tshirts in msi():\n            d[int(tshirts)].append(i)\n    dp = dd(lambda : -1)\n    ans = solve(0, 1) % mod\n    print(ans)\nTC = int(si())\nfor tc in range(TC):\n    t = Thread(target=main)\n    t.start()\n    t.join()", "def fun(tshirt, n, curTshirt, mask, dp):\n    if mask == (1 << n) - 1:\n        return 1\n    if curTshirt > 100:\n        return 0\n    if (curTshirt, mask) in dp:\n        return dp[curTshirt, mask]\n    ans = fun(tshirt, n, curTshirt + 1, mask, dp)\n    for i in tshirt[curTshirt]:\n        if 1 << i & mask > 0:\n            continue\n        else:\n            ans += fun(tshirt, n, curTshirt + 1, mask | 1 << i, dp)\n    ans %= int(1000000000.0) + 7\n    dp[curTshirt, mask] = ans\n    return dp[curTshirt, mask]\nfor _ in range(int(input())):\n    n = int(input())\n    from collections import defaultdict\n    tshirt = defaultdict(set)\n    for i in range(n):\n        lis = list(map(int, input().split()))\n        for j in lis:\n            tshirt[j].add(i)\n    print(fun(tshirt, n, 1, 0, dict()))", "def Util(tshirt, n, curTshirt, mask, dp):\n    if mask == (1 << n) - 1:\n        return 1\n    if curTshirt > 100:\n        return 0\n    if (curTshirt, mask) in dp:\n        return dp[curTshirt, mask]\n    ans = Util(tshirt, n, curTshirt + 1, mask, dp)\n    for i in tshirt[curTshirt]:\n        if 1 << i & mask > 0:\n            continue\n        else:\n            ans += Util(tshirt, n, curTshirt + 1, mask | 1 << i, dp)\n    ans %= int(1000000000.0) + 7\n    dp[curTshirt, mask] = ans\n    return dp[curTshirt, mask]\nfor _ in range(int(input())):\n    n = int(input())\n    from collections import defaultdict\n    tshirt = defaultdict(set)\n    for i in range(n):\n        lis = list(map(int, input().split()))\n        for j in lis:\n            tshirt[j].add(i)\n    print(Util(tshirt, n, 1, 0, dict()))", "MAX_T_SHIRT = 100\nt_shirts_elephant_map = []\ndp = []\n\ndef find(mask, t_shirt_id):\n    if mask == 0:\n        return 1\n    if t_shirt_id < 0:\n        return 0\n    if dp[mask][t_shirt_id] != -1:\n        return dp[mask][t_shirt_id]\n    ans = find(mask, t_shirt_id - 1)\n    for e_id in t_shirts_elephant_map[t_shirt_id]:\n        if mask & 1 << e_id > 0:\n            ans += find(mask ^ 1 << e_id, t_shirt_id - 1)\n    ans %= 1000000007\n    dp[mask][t_shirt_id] = ans\n    return ans\nfor t in range(int(input())):\n    elephant_count = int(input())\n    t_shirts_elephant_map = [list() for i in range(MAX_T_SHIRT)]\n    dp = [[-1 for i in range(MAX_T_SHIRT)] for i in range(1 << elephant_count)]\n    for elephant_id in range(elephant_count):\n        t_shirts = [int(x) for x in input().split()]\n        for t_shirt in t_shirts:\n            t_shirts_elephant_map[t_shirt - 1].append(elephant_id)\n    print(find((1 << elephant_count) - 1, MAX_T_SHIRT - 1))", "MAX_T_SHIRT = 100\nt_shirts_elephant_map = []\ndp = []\n\ndef find(mask, t_shirt_id):\n    if mask == 0:\n        return 1\n    if t_shirt_id < 0:\n        return 0\n    if dp[mask][t_shirt_id] != -1:\n        return dp[mask][t_shirt_id]\n    ans = find(mask, t_shirt_id - 1)\n    for e_id in t_shirts_elephant_map[t_shirt_id]:\n        if mask & 1 << e_id > 0:\n            ans += find(mask ^ 1 << e_id, t_shirt_id - 1)\n    ans %= 1000000007\n    dp[mask][t_shirt_id] = ans\n    return ans\nfor t in range(int(input())):\n    elephant_count = int(input())\n    t_shirts_elephant_map = [list() for i in range(MAX_T_SHIRT)]\n    dp = [[-1 for i in range(MAX_T_SHIRT)] for i in range(1 << elephant_count)]\n    for elephant_id in range(elephant_count):\n        t_shirts = [int(x) for x in input().split()]\n        for t_shirt in t_shirts:\n            t_shirts_elephant_map[t_shirt - 1].append(elephant_id)\n    print(find((1 << elephant_count) - 1, MAX_T_SHIRT - 1))", "try:\n    mt = 100\n    tsem = []\n    ele = []\n\n    def egt(m, tid):\n        if m == 0:\n            return 1\n        if tid < 0:\n            return 0\n        if ele[m][tid] != -1:\n            return ele[m][tid]\n        result = egt(m, tid - 1)\n        for eid in tsem[tid]:\n            if m & 1 << eid > 0:\n                result += egt(m ^ 1 << eid, tid - 1)\n        result %= 1000000007\n        ele[m][tid] = result\n        return result\n    for t in range(int(input())):\n        ecnt = int(input())\n        tsem = [list() for i in range(mt)]\n        ele = [[-1 for i in range(mt)] for i in range(1 << ecnt)]\n        for e_id in range(ecnt):\n            tsh = [int(x) for x in input().split()]\n            for ts in tsh:\n                tsem[ts - 1].append(e_id)\n        print(egt((1 << ecnt) - 1, mt - 1))\nexcept EOFError as e:\n    print(end='')", "MAX_T_SHIRT = 100\nt_shirts_elephant_map = []\ndp = []\n\ndef find(mask, t_shirt_id):\n    if mask == 0:\n        return 1\n    if t_shirt_id < 0:\n        return 0\n    if dp[mask][t_shirt_id] != -1:\n        return dp[mask][t_shirt_id]\n    ans = find(mask, t_shirt_id - 1)\n    for e_id in t_shirts_elephant_map[t_shirt_id]:\n        if mask & 1 << e_id > 0:\n            ans += find(mask ^ 1 << e_id, t_shirt_id - 1)\n    ans %= 1000000007\n    dp[mask][t_shirt_id] = ans\n    return ans\nfor t in range(int(input())):\n    elephant_count = int(input())\n    t_shirts_elephant_map = [list() for i in range(MAX_T_SHIRT)]\n    dp = [[-1 for i in range(MAX_T_SHIRT)] for i in range(1 << elephant_count)]\n    for elephant_id in range(elephant_count):\n        t_shirts = [int(x) for x in input().split()]\n        for t_shirt in t_shirts:\n            t_shirts_elephant_map[t_shirt - 1].append(elephant_id)\n    print(find((1 << elephant_count) - 1, MAX_T_SHIRT - 1))", "MAX_T_SHIRT = 100\nt_shirts_elephant_map = []\ndp = []\n\ndef find(mask, t_shirt_id):\n    if mask == 0:\n        return 1\n    if t_shirt_id < 0:\n        return 0\n    if dp[mask][t_shirt_id] != -1:\n        return dp[mask][t_shirt_id]\n    ans = find(mask, t_shirt_id - 1)\n    for e_id in t_shirts_elephant_map[t_shirt_id]:\n        if mask & 1 << e_id > 0:\n            ans += find(mask ^ 1 << e_id, t_shirt_id - 1)\n    ans %= 1000000007\n    dp[mask][t_shirt_id] = ans\n    return ans\nfor t in range(int(input())):\n    elephant_count = int(input())\n    t_shirts_elephant_map = [list() for i in range(MAX_T_SHIRT)]\n    dp = [[-1 for i in range(MAX_T_SHIRT)] for i in range(1 << elephant_count)]\n    for elephant_id in range(elephant_count):\n        t_shirts = [int(x) for x in input().split()]\n        for t_shirt in t_shirts:\n            t_shirts_elephant_map[t_shirt - 1].append(elephant_id)\n    print(find((1 << elephant_count) - 1, MAX_T_SHIRT - 1))", "mod = 1000000007\n\ndef solve(mask, i):\n    if dp[mask][i] != -1:\n        return dp[mask][i]\n    if mask == 2 ** n - 1:\n        return 1\n    if i == 101:\n        return 0\n    ways = solve(mask, i + 1)\n    for p in c[i]:\n        if mask & 1 << p:\n            continue\n        ways = (ways % mod + solve(mask | 1 << p, i + 1) % mod) % mod\n    dp[mask][i] = ways\n    return ways\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    dp = [[-1] * 102 for i in range(1026)]\n    c = [[] for i in range(101)]\n    for z in range(n):\n        inp = list(map(int, input().split(' ')))\n        for tshirt in inp:\n            c[tshirt].append(z)\n    print(solve(0, 0))", "import collections\nfrom functools import lru_cache\nfrom collections import defaultdict\nfrom collections import Counter\nimport sys\nsys.setrecursionlimit(10 ** 9)\n\ndef solve(n, arr):\n    t2p = defaultdict(list)\n    for (i, tshirtid) in enumerate(arr):\n        for t in tshirtid:\n            t2p[t].append(i)\n\n    @lru_cache(None)\n    def helper(k, mask):\n        if mask == 2 ** n - 1:\n            return 1\n        if k == 101:\n            return 0\n        ans = helper(k + 1, mask)\n        for p in t2p[k]:\n            if mask & 1 << p:\n                continue\n            ans += helper(k + 1, mask | 1 << p)\n        return ans % (10 ** 9 + 7)\n    print(helper(1, 0))\nt = int(input())\nfor _ in range(t):\n    arr = []\n    n = int(input())\n    for _ in range(n):\n        arr.append(list(map(int, input().split())))\n    solve(n, arr)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "mod = 1000000007\n\ndef solve(mask, i):\n    if dp[mask][i] != -1:\n        return dp[mask][i]\n    if mask == 2 ** n - 1:\n        return 1\n    if i == 101:\n        return 0\n    ways = solve(mask, i + 1)\n    for p in c[i]:\n        if mask & 1 << p:\n            continue\n        ways = (ways % mod + solve(mask | 1 << p, i + 1) % mod) % mod\n    dp[mask][i] = ways\n    return ways\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    dp = [[-1] * 102 for i in range(1026)]\n    c = [[] for i in range(101)]\n    for z in range(n):\n        inp = list(map(int, input().split(' ')))\n        for tshirt in inp:\n            c[tshirt].append(z)\n    print(solve(0, 0))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "I = input\nt = int(I())\nmod = int(1000000000.0 + 7)\nend = 0\ndp = []\n\ndef fun(mask, tid, ls):\n    if mask == end:\n        return 1\n    if tid == 101:\n        return 0\n    if not dp[mask][tid] == -1:\n        return dp[mask][tid]\n    ans = 0\n    ans += fun(mask, tid + 1, ls)\n    for p in ls[tid]:\n        if not mask >> p & 1:\n            ans += fun(mask | 1 << p, tid + 1, ls)\n    ans %= mod\n    dp[mask][tid] = ans\n    return ans\nwhile t:\n    n = int(I())\n    end = (1 << n) - 1\n    ls = []\n    dp = []\n    for i in range(1025):\n        dp.append([-1] * 101)\n    for i in range(101):\n        ls.append([])\n    for i in range(n):\n        str = list(map(int, I().strip().split(' ')))\n        for j in str:\n            ls[j].append(i)\n    print(fun(0, 1, ls))\n    t -= 1", "MOD = 1000000007\nadj = [[] for x in range(101)]\ndp = {}\n\ndef solve(tid, mask, n):\n    if mask == (1 << n) - 1:\n        return 1\n    if tid >= 101:\n        return 0\n    if (tid, mask) in dp:\n        return dp[tid, mask] % MOD\n    c = 0\n    c += solve(tid + 1, mask, n)\n    for x in adj[tid]:\n        if not 1 << x & mask:\n            c = (c + solve(tid + 1, mask | 1 << x, n) % MOD) % MOD\n    dp[tid, mask] = c % MOD\n    return c % MOD\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    mask = 0\n    dp = {}\n    adj = [[] for x in range(101)]\n    for t in range(n):\n        for x in input().split(' '):\n            adj[int(x)].append(t)\n    print(solve(1, mask, n) % MOD)", "MOD = 1000000007\nadj = [[] for x in range(101)]\ndp = {}\n\ndef solve(tid, mask, n):\n    if mask == (1 << n) - 1:\n        return 1\n    if tid >= 101:\n        return 0\n    if (tid, mask) in dp:\n        return dp[tid, mask] % MOD\n    c = 0\n    c += solve(tid + 1, mask, n)\n    for x in adj[tid]:\n        if not 1 << x & mask:\n            c = (c + solve(tid + 1, mask | 1 << x, n) % MOD) % MOD\n    dp[tid, mask] = c % MOD\n    return c % MOD\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mask = 0\n    dp = {}\n    adj = [[] for x in range(101)]\n    for t in range(n):\n        for x in input().split(' '):\n            adj[int(x)].append(t)\n    print(solve(1, mask, n) % MOD)", "MAX_T_SHIRT = 100\nt_shirts_elephant_map = []\ndp = []\n\ndef find(mask, t_shirt_id):\n    if mask == 0:\n        return 1\n    if t_shirt_id < 0:\n        return 0\n    if dp[mask][t_shirt_id] != -1:\n        return dp[mask][t_shirt_id]\n    ans = find(mask, t_shirt_id - 1)\n    for e_id in t_shirts_elephant_map[t_shirt_id]:\n        if mask & 1 << e_id > 0:\n            ans += find(mask ^ 1 << e_id, t_shirt_id - 1)\n    ans %= 1000000007\n    dp[mask][t_shirt_id] = ans\n    return ans\nfor t in range(int(input())):\n    elephant_count = int(input())\n    t_shirts_elephant_map = [list() for i in range(MAX_T_SHIRT)]\n    dp = [[-1 for i in range(MAX_T_SHIRT)] for i in range(1 << elephant_count)]\n    for elephant_id in range(elephant_count):\n        t_shirts = [int(x) for x in input().split()]\n        for t_shirt in t_shirts:\n            t_shirts_elephant_map[t_shirt - 1].append(elephant_id)\n    print(find((1 << elephant_count) - 1, MAX_T_SHIRT - 1))", "MOD = 1000000007\nn = tshirt = dp = None\nass = set()\n\ndef allocate(mask, tid):\n    if mask == (1 << n) - 1:\n        return 1\n    if tid == 101:\n        return 0\n    if dp[mask][tid] != -1:\n        return dp[mask][tid]\n    ans = allocate(mask, tid + 1)\n    for p in tshirt[tid]:\n        if mask >> p & 1:\n            continue\n        ans += allocate(mask | 1 << p, tid + 1)\n    dp[mask][tid] = ans % MOD\n    return ans % MOD\nfor _ in range(int(input())):\n    tshirt = [[] for _ in range(101)]\n    n = int(input())\n    for p in range(n):\n        for t in map(int, input().split()):\n            tshirt[t].append(p)\n    dp = [[-1] * 101 for _ in range(1 << n)]\n    print(allocate(0, 1))", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = []\n    mod = 10 ** 9 + 7\n    ff = {}\n    a = [[] for i in range(105)]\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        for j in b:\n            a[j].append(i)\n            ff[j] = 1\n    dp = [[0 for i in range(1025)] for j in range(105)]\n    dp[0][0] = 1\n    for i in range(1, 101):\n        dp[i][0] = 1\n        for j in range(len(a[i])):\n            for mask in range(1024):\n                if dp[i - 1][mask]:\n                    if mask & 1 << a[i][j] == 0:\n                        dp[i][mask | 1 << a[i][j]] += dp[i - 1][mask]\n        for mask in range(1, 1024):\n            if dp[i - 1][mask]:\n                dp[i][mask] += dp[i - 1][mask]\n    c = 0\n    c = dp[100][(1 << n) - 1]\n    c %= mod\n    print(c)", "MOD = 1000000007\nadj = [[] for x in range(101)]\ndp = {}\n\ndef solve(tid, mask, n):\n    if mask == (1 << n) - 1:\n        return 1\n    if tid >= 101:\n        return 0\n    if (tid, mask) in dp:\n        return dp[tid, mask] % MOD\n    c = 0\n    c += solve(tid + 1, mask, n)\n    for x in adj[tid]:\n        if not 1 << x & mask:\n            c = (c + solve(tid + 1, mask | 1 << x, n) % MOD) % MOD\n    dp[tid, mask] = c % MOD\n    return c % MOD\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    mask = 0\n    dp = {}\n    adj = [[] for x in range(101)]\n    for t in range(n):\n        for x in input().split(' '):\n            adj[int(x)].append(t)\n    print(solve(1, mask, n) % MOD)", "mod = 1000000007\n\ndef solve(mask, i):\n    if dp[mask][i] != -1:\n        return dp[mask][i]\n    if mask == 2 ** n - 1:\n        return 1\n    if i == 101:\n        return 0\n    ways = solve(mask, i + 1)\n    for p in c[i]:\n        if mask & 1 << p:\n            continue\n        ways = (ways % mod + solve(mask | 1 << p, i + 1) % mod) % mod\n    dp[mask][i] = ways\n    return ways\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    dp = [[-1] * 102 for i in range(1026)]\n    c = [[] for i in range(101)]\n    for z in range(n):\n        inp = list(map(int, input().split(' ')))\n        for tshirt in inp:\n            c[tshirt].append(z)\n    print(solve(0, 0))", "m = 10 ** 9 + 7\n\ndef bitmask(mask, tid):\n    if mask == 2 ** n - 1:\n        return 1\n    if tid == 101:\n        return 0\n    if dp[mask][tid] != -1:\n        return dp[mask][tid]\n    ans = bitmask(mask, tid + 1)\n    for h in ts[tid]:\n        if mask & 1 << h:\n            continue\n        ans = (ans % m + bitmask(mask | 1 << h, tid + 1) % m) % m\n    dp[mask][tid] = ans\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    dp = [[-1] * 102 for o in range(1024)]\n    ts = [[] for i in range(101)]\n    for j in range(n):\n        l = list(map(int, input().split()))\n        for k in l:\n            ts[k].append(j)\n    print(bitmask(0, 0))", "mod = 1000000007\n\ndef solve(mask, i):\n    if dp[mask][i] != -1:\n        return dp[mask][i]\n    if mask == 2 ** n - 1:\n        return 1\n    if i == 101:\n        return 0\n    ways = solve(mask, i + 1)\n    for p in c[i]:\n        if mask & 1 << p:\n            continue\n        ways = (ways % mod + solve(mask | 1 << p, i + 1) % mod) % mod\n    dp[mask][i] = ways\n    return ways\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    dp = [[-1] * 102 for i in range(1026)]\n    c = [[] for i in range(101)]\n    for z in range(n):\n        inp = list(map(int, input().split(' ')))\n        for tshirt in inp:\n            c[tshirt].append(z)\n    print(solve(0, 0))", "def cek(mask, n):\n    if mask == maxmask:\n        return 1\n    if n > 100:\n        return 0\n    if dp[mask][n] != -1:\n        return dp[mask][n]\n    ans = cek(mask, n + 1)\n    for i in shirts[n]:\n        if mask & 1 << i == 0:\n            ans += cek(mask | 1 << i, n + 1)\n    ans %= 10 ** 9 + 7\n    dp[mask][n] = ans\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    shirts = [[] for x in range(101)]\n    maxmask = (1 << n) - 1\n    dp = [[-1 for x in range(101)] for y in range((1 << n) + 1)]\n    for i in range(n):\n        for j in sorted(map(int, input().split())):\n            shirts[j].append(i)\n    print(cek(0, 1))", "from collections import defaultdict\nmod = 10 ** 9 + 7\n\ndef solve(mask, i, n, new, res):\n    if mask == 2 ** n - 1:\n        return 1\n    if i > 100:\n        return 0\n    if res[mask][i] >= 0:\n        return res[mask][i]\n    ans = solve(mask, i + 1, n, new, res)\n    for j in new[i]:\n        if mask & 1 << j == 0:\n            ans += solve(mask | 1 << j, i + 1, n, new, res)\n            ans %= mod\n    res[mask][i] = ans\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = defaultdict(list)\n    res = [[-1 for i in range(102)] for j in range(2 ** n + 1)]\n    for i in range(n):\n        t = [int(k) for k in input().split()]\n        for j in t:\n            l[i].append(j)\n    new = defaultdict(list)\n    for i in range(n):\n        for j in l[i]:\n            new[j].append(i)\n    ans = solve(0, 1, n, new, res)\n    print(ans % mod)", "mod = 1000000007\n\ndef solve(mask, i):\n    if dp[mask][i] != -1:\n        return dp[mask][i]\n    if mask == 2 ** n - 1:\n        return 1\n    if i == 101:\n        return 0\n    ways = solve(mask, i + 1)\n    for p in c[i]:\n        if mask & 1 << p:\n            continue\n        ways = (ways % mod + solve(mask | 1 << p, i + 1) % mod) % mod\n    dp[mask][i] = ways\n    return ways\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    dp = [[-1] * 102 for i in range(1026)]\n    c = [[] for i in range(101)]\n    for z in range(n):\n        inp = list(map(int, input().split(' ')))\n        for tshirt in inp:\n            c[tshirt].append(z)\n    print(solve(0, 0))", "(M, Mod) = (105, 1000000007)\nT = int(input())\nfor _ in range(0, T):\n    n = int(input())\n    b = [[] for i in range(M)]\n    for i in range(0, n):\n        a = list(map(int, input().split()))\n        for j in range(0, len(a)):\n            b[a[j]].append(i)\n    dp = [[0] for i in range(M)]\n    for i in range(0, M):\n        dp[i] = [0] * (1 << n)\n    dp[0][0] = 1\n    for i in range(1, 101):\n        for S in range(0, 1 << n):\n            if dp[i - 1][S] == 0:\n                continue\n            dp[i][S] = (dp[i][S] + dp[i - 1][S]) % Mod\n            for x in b[i]:\n                if S & 1 << x:\n                    continue\n                dp[i][S | 1 << x] = (dp[i][S | 1 << x] + dp[i - 1][S]) % Mod\n    print(dp[100][(1 << n) - 1])", "(M, Mod) = (105, 1000000007)\nT = int(input())\nfor _ in range(0, T):\n    n = int(input())\n    b = [[] for i in range(M)]\n    for i in range(0, n):\n        a = list(map(int, input().split()))\n        for j in range(0, len(a)):\n            b[a[j]].append(i)\n    dp = [[0] for i in range(M)]\n    for i in range(0, M):\n        dp[i] = [0] * (1 << n)\n    dp[0][0] = 1\n    for i in range(1, 101):\n        for S in range(0, 1 << n):\n            if dp[i - 1][S] == 0:\n                continue\n            dp[i][S] = (dp[i][S] + dp[i - 1][S]) % Mod\n            for x in b[i]:\n                if S & 1 << x:\n                    continue\n                dp[i][S | 1 << x] = (dp[i][S | 1 << x] + dp[i - 1][S]) % Mod\n    print(dp[100][(1 << n) - 1])", "import sys\nt = int(sys.stdin.readline().strip())\nfor tc in range(t):\n    n = int(sys.stdin.readline().strip())\n    A = []\n    for i in range(n):\n        A.append(set([int(c) for c in sys.stdin.readline().split()]))\n    DP = []\n    DP.append([1] + [0] * 100)\n    for i in range(1, 2 ** n):\n        DP.append([0] * 101)\n    for t in range(1, 101):\n        for mask in range(2 ** n):\n            DP[mask][t] = DP[mask][t - 1]\n        for mask in range(2 ** n):\n            for p in range(n):\n                if DP[mask][t - 1] == 0:\n                    continue\n                if mask & 1 << p > 0:\n                    continue\n                if t not in A[p]:\n                    continue\n                DP[mask | 1 << p][t] += DP[mask][t - 1]\n    print(DP[2 ** n - 1][100] % 1000000007)", "mod = int(1000000000.0 + 7)\nn = 0\n\ndef solve(mask, i, tshirt, dp):\n    if mask == (1 << n) - 1:\n        return 1\n    if i > 100:\n        return 0\n    if dp[mask][i] != -1:\n        return dp[mask][i]\n    ways = solve(mask, i + 1, tshirt, dp)\n    for j in tshirt[i]:\n        j -= 1\n        if mask & 1 << j:\n            continue\n        ways += solve(mask | 1 << j, i + 1, tshirt, dp)\n        ways = ways % mod\n    dp[mask][i] = ways\n    return ways\nfor i in range(int(input())):\n    tshirt = [[] for i in range(102)]\n    dp = [[-1 for i in range(102)] for j in range((1 << 10) + 2)]\n    n = int(input())\n    for i in range(1, n + 1):\n        l = list(map(int, input().split()))\n        for j in l:\n            tshirt[j].append(i)\n    print(solve(0, 1, tshirt, dp))", "from collections import defaultdict\n\nclass Dp_bit_masking_caps:\n\n    def __init__(self):\n        self.total_caps = 100\n        self.cap_to_person_map = defaultdict(list)\n        self.total_people = 0\n        self.all_mask = 0\n\n    def read_inputs_and_calculate_ways(self):\n        self.total_people = int(input())\n        self.all_mask = (1 << self.total_people) - 1\n        for ppl in range(self.total_people):\n            for cap in map(int, input().split()):\n                self.cap_to_person_map[cap].append(ppl)\n        self.cache = [[-1] * (self.total_caps + 1) for _ in range(2 ** self.total_people)]\n        print(self.count_number_of_ways(0, 1))\n\n    def count_number_of_ways(self, mask, cap_num):\n        if mask == self.all_mask:\n            return 1\n        if cap_num > self.total_caps:\n            return 0\n        if self.cache[mask][cap_num] != -1:\n            return self.cache[mask][cap_num]\n        ways = self.count_number_of_ways(mask, cap_num + 1)\n        for people_with_this_cap in self.cap_to_person_map[cap_num]:\n            if mask & 1 << people_with_this_cap:\n                continue\n            ways += self.count_number_of_ways(mask | 1 << people_with_this_cap, cap_num + 1)\n        ways = ways % (10 ** 9 + 7)\n        self.cache[mask][cap_num] = ways\n        return self.cache[mask][cap_num]\n\ndef main():\n    number_of_test_cases = int(input())\n    for i in range(number_of_test_cases):\n        Dp_bit_masking_caps().read_inputs_and_calculate_ways()\nmain()", "MOD = 1000000007\nT = int(input())\nSHIRTS = 101\nfor t in range(T):\n    N = int(input())\n    owns = [[False] * SHIRTS for _ in range(N)]\n    for i in range(0, N):\n        for s in map(int, input().split()):\n            owns[i][s] = True\n    dp = [[0] * (1 << N) for _ in range(SHIRTS)]\n    dp[0][0] = 1\n    for s in range(1, SHIRTS):\n        for m in range(1 << N):\n            dp[s][m] = dp[s - 1][m]\n            for b in range(N):\n                if m & 1 << b and owns[b][s]:\n                    dp[s][m] = (dp[s][m] + dp[s - 1][m ^ 1 << b]) % MOD\n    print(dp[SHIRTS - 1][(1 << N) - 1])"]