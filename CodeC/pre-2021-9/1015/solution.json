["n = 4000001\ns = [i for i in range(n + 1)]\n\ndef test():\n    p = 2\n    while p * p <= n:\n        if s[p] == p:\n            for i in range(p * p, n + 1, p):\n                if s[i] >= p:\n                    s[i] = p\n        p += 1\ntest()\n\ndef f(x):\n    d = dict()\n    while x != 1:\n        t = s[x]\n        if t in d:\n            d[t] += 1\n        else:\n            d[t] = 1\n        x = x // t\n    return d\n\ndef A(k):\n    ans = 1\n    d = f(4 * k + 1)\n    for i in d:\n        ans *= d[i] + 1 - d[i] / i\n    return round(4 * k + (ans - 1) / 2 * (4 * k + 1))\nL = [1]\nfor i in range(1, 10 ** 6 + 1):\n    L.append(A(i))\nT = int(input())\nfor n1 in range(T):\n    k = int(input())\n    print(L[k])", "n = 4 * 10 ** 6 + 1\ns = [i for i in range(n + 1)]\n\ndef sieve():\n    p = 2\n    while p * p <= n:\n        if s[p] == p:\n            for i in range(p * p, n + 1, p):\n                if s[i] >= p:\n                    s[i] = p\n        p += 1\nsieve()\n\ndef f(x):\n    d = dict()\n    while x != 1:\n        t = s[x]\n        if t in d:\n            d[t] += 1\n        else:\n            d[t] = 1\n        x = x // t\n    return d\n\ndef A(k):\n    ans = 1\n    d = f(4 * k + 1)\n    for i in d:\n        ans *= d[i] + 1 - d[i] / i\n    return round(4 * k + (ans - 1) / 2 * (4 * k + 1))\nL = [1]\nfor i in range(1, 10 ** 6 + 1):\n    L.append(A(i))\nT = int(input())\nfor n1 in range(T):\n    k = int(input())\n    print(L[k])", "def readInt():\n    return int(input())\n\ndef readInts():\n    return [int(x) for x in input().split()]\n\ndef readString():\n    return input().rstrip()\n\ndef readStrings():\n    return input().split()\nnum_cases = readInt()\ncases = [readInt() for _ in range(num_cases)]\nlimit = max(cases)\n\ndef factor_table(limit):\n    table = list(range(limit + 1))\n    for n in range(2, limit + 1):\n        if table[n] == n:\n            for m in range(n * n, limit + 1, n):\n                table[m] = min(table[m], n)\n    return table\ntable = factor_table(4 * limit + 1)\n\ndef factors(n):\n    result = []\n    while n != 1:\n        factor = table[n]\n        result.append(factor)\n        n //= factor\n    return result\n\ndef solve(k):\n    k = 4 * k + 1\n    facts = factors(k)\n    (count, current) = (1, facts[0])\n    result = 1\n    for f in facts[1:]:\n        if f != current:\n            result *= (count + 1) * current ** count - count * current ** (count - 1)\n            (current, count) = (f, 1)\n        else:\n            count += 1\n    result *= (count + 1) * current ** count - count * current ** (count - 1)\n    tail = result - k\n    return result - (tail // 2 + 1)\nfor case in cases:\n    print(solve(case))"]