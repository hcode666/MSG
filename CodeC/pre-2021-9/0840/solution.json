["t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * 1024 for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ a[i - 1]]\n    ans = 0\n    for i in range(1024):\n        ans = max(ans, dp[n][i] * (i ^ k))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * 1024 for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ a[i - 1]]\n    ans = 0\n    for i in range(1024):\n        ans = max(ans, dp[n][i] * (i ^ k))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * 1024 for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ a[i - 1]]\n    ans = 0\n    for i in range(1024):\n        ans = max(ans, dp[n][i] * (i ^ k))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * 1024 for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ a[i - 1]]\n    ans = 0\n    for i in range(1024):\n        ans = max(ans, dp[n][i] * (i ^ k))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * 1024 for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ a[i - 1]]\n    ans = 0\n    for i in range(1024):\n        ans = max(ans, dp[n][i] * (i ^ k))\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [[0] * 1024 for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ a[i - 1]]\n    ans = 0\n    for i in range(1024):\n        ans = max(ans, dp[n][i] * (i ^ k))\n    print(ans)", "T = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    arr = [0] + [int(_) for _ in input().split()]\n    ans = 0\n    check = [0 for _ in range(1024)]\n    check[0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            index = j ^ arr[i]\n            if check[j]:\n                check[index] = 1\n    for i in range(1024):\n        if check[i]:\n            ans = max(ans, k ^ i)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = [0 for i in range(1024)]\n    dp[0] = 1\n    l = list(map(int, input().split()))\n    for i in l:\n        for j in range(1024):\n            if dp[j]:\n                val = i ^ j\n                dp[val] = 1\n    ans = k\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, i ^ k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = [0 for i in range(1024)]\n    dp[0] = 1\n    l = list(map(int, input().split()))\n    for i in l:\n        for j in range(1024):\n            if dp[j]:\n                val = i ^ j\n                dp[val] = 1\n    ans = k\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, i ^ k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    a = list(map(int, input().split()))\n    lis = [0 for i in range(1024)]\n    lis[0] = True\n    for i in range(n):\n        for j in range(1024):\n            lis[j ^ a[i]] |= lis[j]\n    ans = k\n    for i in range(1024):\n        if lis[i]:\n            ans = max(ans, k ^ i)\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef rec(i, xor):\n    if i >= n:\n        return xor\n    if (i, xor) in dp:\n        return dp[i, xor]\n    dp[i, xor] = max(rec(i + 1, xor ^ a[i]), rec(i + 1, xor))\n    return dp[i, xor]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = {}\n    ans = rec(0, k)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (N, K) = map(int, input().split())\n    A = list(map(int, input().split()))\n    n = 1023\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(N):\n        for j in range(n + 1):\n            x = j ^ A[i]\n            if dp[j] == 1:\n                dp[x] = 1\n    Max = 0\n    for i in range(n + 1):\n        if dp[i] == 1:\n            Max = max(Max, i ^ K)\n    print(Max)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    N = 1023\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(N + 1):\n            x = j ^ arr[i]\n            if dp[j] == 1:\n                dp[x] = 1\n    Max = 0\n    for i in range(N + 1):\n        if dp[i] == 1:\n            Max = max(Max, i ^ k)\n    print(Max)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    N = 1023\n    dp = [0] * (N + 1)\n    dp[0] = 1\n    for i in range(n):\n        for j in range(N + 1):\n            x = j ^ arr[i]\n            if dp[j] == 1:\n                dp[x] = 1\n    Max = 0\n    for i in range(N + 1):\n        if dp[i] == 1:\n            Max = max(Max, i ^ k)\n    print(Max)", "for t in range(0, int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))[:n]\n    N = 1024\n    dp = [0] * 1024\n    dp[0] = 1\n    for i in range(0, n):\n        for j in range(0, N):\n            if dp[j] == 1:\n                value = j ^ arr[i]\n                dp[value] = 1\n    ans = 0\n    for i in range(0, N):\n        if dp[i] == 1:\n            ans = max(ans, i ^ k)\n    print(ans)", "def calc(arr, k):\n    dp = [0] * 1024\n    dp[0] = 1\n    for ele in arr:\n        for j in range(1023, -1, -1):\n            neval = j ^ ele\n            if dp[j]:\n                dp[neval] = 1\n    ans = k\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, i ^ k)\n    return ans\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = calc(arr, k)\n    print(ans)\n    t -= 1", "for t in range(0, int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))[:n]\n    N = 1024\n    dp = [0] * 1024\n    dp[0] = 1\n    for i in range(0, n):\n        for j in range(0, N):\n            if dp[j] == 1:\n                value = j ^ arr[i]\n                dp[value] = 1\n    ans = 0\n    for i in range(0, N):\n        if dp[i] == 1:\n            ans = max(ans, i ^ k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    dp = [0 for i in range(1024)]\n    dp[0] = 1\n    l = list(map(int, input().split()))\n    for i in l:\n        for j in range(1024):\n            if dp[j]:\n                val = i ^ j\n                dp[val] = 1\n    ans = k\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, i ^ k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    dp = [0] * 1025\n    dp[0] = 1\n    for i in arr:\n        for j in range(1024):\n            if dp[j]:\n                dp[j ^ i] = 1\n    ans = 0\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, i ^ k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [int(x) for x in input().split()]\n    dp = [0] * 1025\n    dp[0] = 1\n    for i in arr:\n        temp = [0] * 1025\n        temp[0] = 1\n        for j in range(1024):\n            if dp[j]:\n                temp[j ^ i] = 1\n        for x in range(1024):\n            if dp[x] == 0:\n                dp[x] = temp[x]\n    ans = 0\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, i ^ k)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    some = list(map(int, input().split()))\n    some1 = set()\n    some1.add(k)\n    for i in some:\n        some2 = set()\n        for j in some1:\n            some2.add(i ^ j)\n        for j in some2:\n            some1.add(j)\n    print(max(some1))", "from collections import defaultdict\nT = int(input())\noutput = []\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    As = list(map(int, input().split()))\n    dp = [[0 for _ in range(1024)] for _ in range(N + 1)]\n    dp[0][0] = 1\n    for i in range(1, N + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ As[i - 1]]\n    max_v = -1\n    for j in range(1024):\n        if dp[N][j] == 1:\n            max_v = max(K ^ j, max_v)\n    output.append(max_v)\nfor o in output:\n    print(o)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = [0] * 1024\n    dp[0] = 1\n    dp1 = [dp] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1024):\n            if dp1[i - 1][j] == 1 or dp1[i - 2][j ^ a[i - 2]] == 1:\n                dp1[i][j] = 1\n    ans = k\n    for i in range(1024):\n        if dp1[n][i] == 1:\n            ans = max(ans, k ^ i)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    dp = [[0 for _ in range(1024)] for _ in range(n + 1)]\n    dp[0][0] = 1\n    ans = k\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ A[i - 1]]\n            if i == n and dp[i][j]:\n                ans = max(ans, k ^ j)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    dp = [0] * 1024\n    dp[0] = 1\n    dp1 = []\n    dp1 = [dp] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(1024):\n            if dp1[i - 1][j] == 1 or dp1[i - 1][j ^ a[i - 1]] == 1:\n                dp1[i][j] = 1\n    ans = k\n    for i in range(1024):\n        if dp1[n][i] == 1:\n            ans = max(ans, k ^ i)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    dp = [0] * 1024\n    dp[0] = 1\n    dp1 = []\n    dp1 = [dp] * (n + 1)\n    for i in range(1, n + 1):\n        for j in range(0, 1024):\n            if dp1[i - 1][j] == 1 or dp1[i - 1][j ^ a[i - 1]] == 1:\n                dp1[i][j] = 1\n    ans = k\n    for i in range(0, 1024):\n        if dp1[n][i] == 1:\n            ans = max(ans, k ^ i)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    dp = []\n    dp = [0] * 1024\n    dp[0] = 1\n    for i in a:\n        for j in range(0, 1024):\n            if dp[j] == 1:\n                dp[j ^ i] = 1\n    ans = k\n    for i in range(0, 1024):\n        if dp[i] == 1:\n            ans = max(ans, k ^ i)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    dp = [[0 for i in range(1024)] for j in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ l[i - 1]]\n    maxo = 0\n    for j in range(1023, -1, -1):\n        if dp[n][j] == 1:\n            maxo = max(maxo, j ^ k)\n    print(maxo)", "def solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    vis = set()\n    vis.add(k)\n    for i in arr:\n        temp = set()\n        for j in vis:\n            temp.add(i ^ j)\n        vis = vis.union(temp)\n    print(max(vis))\nfor t in range(int(input())):\n    solve()", "import sys\nsys.setrecursionlimit(10 ** 9)\n\ndef rec(a, i, curr, k, dp):\n    global mxor\n    if i >= len(a) - 1:\n        mxor = max(mxor, k ^ curr)\n        return mxor\n    if (curr, i) in dp:\n        return dp[curr, i]\n    for j in range(i + 1, len(a)):\n        curr ^= a[j]\n        r1 = rec(a, j, curr, k, dp)\n        curr ^= a[j]\n        r2 = rec(a, j, curr, k, dp)\n    dp[curr, i] = max(r1, r2)\n    return dp[curr, i]\n\ndef calc_max(n):\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mxor = 0\n    mmxor = 1025\n    dp = [[0 for i in range(mmxor)] for j in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(mmxor):\n            x = a[i - 1]\n            dp[i][j] = dp[i - 1][j] | dp[i][j]\n            if dp[i][j]:\n                dp[i][j ^ x] = 1\n    for (i, v) in enumerate(dp[-1]):\n        if v:\n            mxor = max(mxor, i ^ k)\n    print(mxor)", "def answer():\n    dp = [[False for i in range(1025)] for i in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(1025):\n            dp[i][j] = dp[i][j] | dp[i - 1][j]\n            if dp[i][j]:\n                dp[i][j ^ a[i - 1]] = True\n    ans = 0\n    for i in range(1025):\n        if dp[-1][i]:\n            ans = max(ans, i ^ k)\n    return ans\nfor T in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(answer())", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef max_xor(i, K, N, A, D):\n    if i == N:\n        return K\n    elif (i, K) in D:\n        return D[i, K]\n    else:\n        D[i, K] = max(max_xor(i + 1, K, N, A, D), max_xor(i + 1, K ^ A[i], N, A, D))\n        return D[i, K]\nT = int(input())\nans = []\nfor _ in range(T):\n    (N, K) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    ans.append(max_xor(0, K, N, A, {}))\nfor i in ans:\n    print(i)", "for u in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = set()\n    s.add(k)\n    for i in l:\n        d = s.copy()\n        for j in d:\n            s.add(i ^ j)\n    print(max(s))", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef fun(i, ar, k, n, d):\n    if i == n:\n        return k\n    elif (i, k) in d:\n        return d[i, k]\n    else:\n        d[i, k] = max(fun(i + 1, ar, k ^ ar[i], n, d), fun(i + 1, ar, k, n, d))\n        return d[i, k]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = [int(x) for x in input().split()]\n    print(fun(0, ar, k, n, {}))", "import sys\nsys.setrecursionlimit(10 ** 6)\n\ndef max_xor(i, K, N, A, D):\n    if i == N:\n        return K\n    elif (i, K) in D:\n        return D[i, K]\n    else:\n        D[i, K] = max(max_xor(i + 1, K, N, A, D), max_xor(i + 1, K ^ A[i], N, A, D))\n        return D[i, K]\nT = int(input())\nans = []\nfor _ in range(T):\n    (N, K) = [int(i) for i in input().split()]\n    A = [int(i) for i in input().split()]\n    ans.append(max_xor(0, K, N, A, {}))\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    dp = [[False] * 1024 for _ in range(n + 1)]\n    dp[0][0] = True\n    for i in range(1, n + 1):\n        for j in range(0, 1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ a[i - 1]]\n    mx = k\n    for i in range(1024):\n        if dp[n][i]:\n            mx = max(mx, i ^ k)\n    print(mx)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    s = set([0])\n    for i in a:\n        e = set(s)\n        for x in s:\n            e.add(x ^ i)\n        s = e\n    mx = k\n    for i in s:\n        mx = max(mx, i ^ k)\n    print(mx)", "for _ in range(int(input())):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    dp = [[0] * 1024 for i in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            if dp[i - 1][j] == 1:\n                dp[i][j] = 1\n                dp[i][a[i - 1] ^ j] = 1\n    m = k\n    for i in range(1024):\n        if dp[n][i] == 1:\n            m = max(m, k ^ i)\n    print(m)", "for u in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = set()\n    s.add(k)\n    for i in l:\n        d = s.copy()\n        for j in d:\n            s.add(i ^ j)\n    print(max(s))", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = set()\n    a.add(k)\n    for i in l:\n        temp = a.copy()\n        for j in temp:\n            a.add(i ^ j)\n    print(max(a))", "for tc in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = set()\n    a.add(k)\n    for i in l:\n        temp = a.copy()\n        for j in temp:\n            a.add(i ^ j)\n    print(max(a))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = set()\n    a.add(k)\n    for i in l:\n        temp = a.copy()\n        for j in temp:\n            a.add(i ^ j)\n    print(max(a))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = set()\n    a.add(k)\n    for i in l:\n        c = a.copy()\n        for j in c:\n            a.add(i ^ j)\n    print(max(a))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    a = set()\n    a.add(k)\n    for i in l:\n        c = a.copy()\n        for j in c:\n            a.add(i ^ j)\n    print(max(a))", "t = int(input())\nfor it in range(t):\n    (n, k) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = set()\n    b.add(k)\n    for i in a:\n        c = b.copy()\n        for j in c:\n            b.add(i ^ j)\n    print(max(b))", "def solve():\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = {0}\n    for i in range(n):\n        temp = {0}\n        for j in ans:\n            temp.update({arr[i] ^ j})\n        temp.update({arr[i]})\n        ans.update(temp)\n    ans_1 = 0\n    ans = list(ans)\n    for m in ans:\n        if ans_1 < m ^ k:\n            ans_1 = m ^ k\n    print(ans_1)\nt = int(input())\nwhile t != 0:\n    solve()\n    t -= 1", "T = int(input())\nfor _ in range(T):\n    [n, k] = [int(s) for s in input().split()]\n    a = [int(s) for s in input().split()]\n    dp = [[0] * 1024] * (n + 1)\n    for i in range(n + 1):\n        for j in range(1024):\n            dp[i][j] = 0\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][a[i - 1] ^ j]\n    res = 0\n    for j in range(1024):\n        res = max(res, dp[n][j] * (j ^ k))\n    print(res)", "for i in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = list(map(int, input().split()))\n    s = {k}\n    for i in l:\n        a = []\n        for j in s:\n            a.append(j ^ i)\n        for d in a:\n            s.add(d)\n    print(max(s))", "for i in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    l = list(map(int, input().split()))\n    s = {k}\n    for i in l:\n        a = []\n        for j in s:\n            a.append(j ^ i)\n        for d in a:\n            s.add(d)\n    print(max(s))", "def mp():\n    return map(int, input().split(' '))\n\ndef lst():\n    return list(mp())\nfor _ in range(int(input())):\n    (n, k) = mp()\n    a = lst()\n    pre = [0 for i in range(n)]\n    pre[0] = a[0]\n    h = [0 for i in range(2026)]\n    h[0] = 1\n    for i in range(n):\n        h[a[i]] = 1\n        for j in range(1024):\n            if h[j] == 1:\n                h[a[i] ^ j] = 1\n    for i in range(1024, -1, -1):\n        e = k ^ i\n        if h[e] == 1:\n            print(i)\n            break", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n\n    def GaussianElimination(nums, k):\n\n        def length(num):\n            count = 0\n            while num:\n                num >>= 1\n                count += 1\n            return count\n        d = dd(list)\n        for num in nums:\n            l = length(num)\n            d[l].append(num)\n        modified_array = []\n        for i in reversed(range(64)):\n            if d[i]:\n                first = d[i][0]\n                modified_array.append(first)\n                for j in range(1, len(d[i])):\n                    temp = first ^ d[i][j]\n                    l = length(temp)\n                    d[l].append(temp)\n        ans = k\n        for num in modified_array:\n            ans = max(ans, ans ^ num)\n        return ans\n    (n, k) = map(int, input().split())\n    nums = list(map(int, input().split()))\n    print(GaussianElimination(nums, k))", "t = int(input())\nfor i in range(t):\n    (n, p) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = [[0] * 1024 for x in range(n + 1)]\n    m[0][0] = 1\n    max1 = 0\n    for j in range(1, n + 1):\n        for k in range(0, 1024):\n            m[j][k] = m[j - 1][k] + m[j - 1][k ^ a[j - 1]]\n    for (j, each) in enumerate(m[n]):\n        if each > 0 and max1 < j ^ p:\n            max1 = j ^ p\n    print(max1)", "import functools\nfrom sys import stdin\n\ndef powerset(lst):\n    return functools.reduce(lambda result, x: result + [subset + [x] for subset in result], lst, [[]])\ntc = int(stdin.readline())\nfor i in range(tc):\n    (n, k) = map(int, stdin.readline().split())\n    list1 = list(set(map(int, stdin.readline().split())))\n    dp = [[0] * 1024 for x in range(n + 1)]\n    dp[0][0] = 1\n    n = len(list1)\n    for i in range(1, n + 1):\n        for j in range(0, 1024):\n            dp[i][j] = dp[i - 1][j] + dp[i - 1][j ^ list1[i - 1]]\n    n_list = [x for x in dp[n]]\n    maxi = 0\n    for (i, each) in enumerate(dp[n]):\n        if each > 0 and maxi < i ^ k:\n            maxi = i ^ k\n    print(maxi)", "test = int(input())\nfor _ in range(test):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    z = {k}\n    for i in x:\n        t = []\n        for k in z:\n            t.append(i ^ k)\n        for k in t:\n            z.add(k)\n    print(max(z))", "for j in range(int(input())):\n    (n, k) = map(int, input().split())\n    x = list(map(int, input().split()))\n    z = {k}\n    for i in x:\n        t = []\n        for k in z:\n            t.append(i ^ k)\n        for k in t:\n            z.add(k)\n    print(max(z))", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    b = [False] * 1024\n    b[0] = True\n    for elements in a:\n        for j in range(1024):\n            b[j] = b[j] or b[j ^ elements]\n    max_value = k\n    for i in range(1024):\n        if b[i]:\n            max_value = max(max_value, i ^ k)\n    print(max_value)", "t = int(input())\nwhile t:\n    n_k = [int(i) for i in input().split()]\n    n = n_k[0]\n    k = n_k[1]\n    arr = [int(i) for i in input().split()]\n    msb = max(arr)\n    index = 0\n    for i in range(31, -1, -1):\n        maxInd = index\n        maxEle = -2147483648\n        for j in range(index, n):\n            if arr[j] & 1 << i != 0 and arr[j] > maxEle:\n                maxEle = arr[j]\n                maxInd = j\n        if maxEle == -2147483648:\n            continue\n        temp = arr[index]\n        arr[index] = arr[maxInd]\n        arr[maxInd] = temp\n        maxInd = index\n        for j in range(n):\n            if j != maxInd and arr[j] & 1 << i != 0:\n                arr[j] = arr[j] ^ arr[maxInd]\n        index = index + 1\n    res = k\n    for i in range(n):\n        if res < res ^ arr[i]:\n            res = res ^ arr[i]\n    print(res)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    W = [int(x) for x in input().split()]\n    S = {k}\n    for i in W:\n        _t = []\n        for j in S:\n            _t.append(i ^ j)\n        for x in _t:\n            S.add(x)\n    print(max(S))", "for case in range(int(input())):\n    (N, K) = map(int, input().split())\n    L = list(map(int, input().split()))\n    dp = [0] * 1024\n    dp[0] = 1\n    for i in range(N):\n        for j in range(1024):\n            dp[L[i] ^ j] |= dp[j]\n    ans = K\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, K ^ i)\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    dp = [[0 for i in range(1024)] for j in range(1024)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] | dp[i - 1][j ^ l[i - 1]]\n    print(max([dp[n][j] * (j ^ k) for j in range(1024)]))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = [0] * 1024\n    for i in a:\n        ans[i] = 1\n    for i in range(1024):\n        for j in range(1024):\n            if ans[i] and ans[j]:\n                ans[i ^ j] = 1\n    maxi = 0\n    for i in range(1024):\n        if ans[i] == 1:\n            maxi = max(maxi, i ^ k)\n    print(maxi)", "for _ in range(int(input())):\n    (array_size, k) = map(int, input().split())\n    array = map(int, input().split())\n    possible_xors = [False] * 1024\n    possible_xors[0] = True\n    for element in array:\n        for i in range(1024):\n            possible_xors[i] = possible_xors[i] or possible_xors[i ^ element]\n    max_value = k\n    for i in range(1024):\n        if possible_xors[i]:\n            max_value = max(max_value, i ^ k)\n    print(max_value)", "for _ in range(int(input())):\n    (array_size, k) = map(int, input().split())\n    array = map(int, input().split())\n    possible_xors = [False] * 1024\n    possible_xors[0] = True\n    for element in array:\n        for i in range(1024):\n            possible_xors[i] = possible_xors[i] or possible_xors[i ^ element]\n    max_value = k\n    for i in range(1024):\n        if possible_xors[i]:\n            max_value = max(max_value, i ^ k)\n    print(max_value)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ad = set(arr)\n    w = [k]\n    ans = k\n    v = set()\n    v.add(k)\n    for i in ad:\n        for j in range(len(w)):\n            x = w[j] ^ i\n            ans = max(ans, x)\n            v.add(x)\n        w = list(v)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    dp = [False] * 1024\n    dp[0] = True\n    for i in l:\n        for j in range(1024):\n            dp[i ^ j] = dp[j] or dp[j ^ i]\n    ans = k\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, k ^ i)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    temp = [[0 for i in range(1024)] for i in range(n + 1)]\n    temp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            temp[i][j] = temp[i - 1][j] or temp[i - 1][j ^ arr[i - 1]]\n    maxx = -float('inf')\n    for i in range(1024):\n        if temp[n][i] == 1:\n            maxx = max(maxx, k ^ i)\n    print(maxx)", "from math import log, floor\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort(reverse=True)\n    (row, col) = (0, int(floor(log(arr[0], 2))))\n    while row < N and col >= 0:\n        pivot = None\n        colval = 1 << col\n        for i in range(row, N):\n            if arr[i] & colval:\n                pivot = i\n                break\n        if pivot == None:\n            col -= 1\n            continue\n        if pivot != row:\n            (arr[pivot], arr[row]) = (arr[row], arr[pivot])\n        for i in range(row + 1, N):\n            if arr[i] & colval:\n                arr[i] ^= arr[row]\n        row += 1\n        col -= 1\n    ans = K\n    for val in arr:\n        ans = max(ans, ans ^ val)\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 9)\n\ndef solve(arr, index, N, K, ans, sub):\n    if index < 0:\n        return ans ^ K\n    if ans in sub[index]:\n        return sub[index][ans]\n    sub[index][ans] = max(solve(arr, index - 1, N, K, ans, sub), solve(arr, index - 1, N, K, ans ^ arr[index], sub))\n    return sub[index][ans]\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    sub = []\n    for i in range(N):\n        sub.append({})\n    print(max(K, solve(arr, N - 1, N, K, 0, sub)))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(o) for o in input().split()]\n    dp = [False] * 1024\n    dp[0] = True\n    for x in a:\n        for i in range(1024):\n            dp[i ^ x] = dp[i] or dp[i ^ x]\n    ma = k\n    for i in range(1024):\n        if dp[i]:\n            ma = max(ma, i ^ k)\n    print(ma)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(o) for o in input().split()]\n    dp = [False] * 1024\n    dp[0] = True\n    for x in a:\n        for i in range(1024):\n            dp[i ^ x] = dp[i] or dp[i ^ x]\n    ma = k\n    for i in range(1024):\n        if dp[i]:\n            ma = max(ma, i ^ k)\n    print(ma)", "t = int(input())\nfor i in range(0, t):\n    (n, b) = map(int, input().split())\n    li = [int(k) for k in input().split()]\n    dp = [False] * 1024\n    dp[0] = True\n    for j in range(0, len(li)):\n        for l in range(0, 1023):\n            dp[l ^ li[j]] = dp[l ^ li[j]] | dp[l]\n    ans = 0\n    for a in range(0, 1024):\n        if dp[a]:\n            ans = max(ans, b ^ a)\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    (n, b) = map(int, input().split())\n    li = [int(k) for k in input().split()]\n    dp = [False] * 1024\n    dp[0] = True\n    for j in range(0, len(li)):\n        for l in range(0, 1023):\n            dp[l ^ li[j]] = dp[l ^ li[j]] | dp[l]\n    ans = 0\n    for a in range(0, 1024):\n        if dp[a]:\n            ans = max(ans, b ^ a)\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    (n, b) = map(int, input().split())\n    li = [int(k) for k in input().split()]\n    dp = [False] * 1024\n    dp[0] = True\n    for j in range(0, len(li)):\n        for l in range(0, 1023):\n            dp[l ^ li[j]] = dp[l ^ li[j]] | dp[l]\n    ans = 0\n    for a in range(0, 1024):\n        if dp[a]:\n            ans = max(ans, b ^ a)\n    print(ans)", "import sys\nsys.setrecursionlimit(10 ** 7)\n\nclass Codechef:\n    dp = []\n\n    def __init__(self):\n        self.dp = [-1] * 1024\n        self.dp = [self.dp] * 1024\n\n    def maxXor(self, arr, n, k):\n        if n == 0:\n            return k\n        if self.dp[n][k] != -1:\n            return self.dp[n][k]\n        self.dp[n][k] = max(self.maxXor(arr, n - 1, k ^ arr[n - 1]), self.maxXor(arr, n - 1, k))\n        return self.dp[n][k]\nT = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    c = Codechef()\n    arr = list(map(int, input().split()))\n    print(c.maxXor(arr, n, k))", "t = int(input())\nfor T in range(t):\n    s = []\n    e = []\n    s = list(map(int, input().split()))\n    e = list(map(int, input().split()))\n    dp = [False] * 1024\n    dp[0] = True\n    for i in e:\n        for x in range(int(1024)):\n            if dp[x]:\n                dp[x ^ i] = True\n    ans = 0\n    for i in range(1024):\n        if dp[i]:\n            ans = max(i ^ s[1], ans)\n    print(ans)", "for tnum in range(int(input())):\n    (nvar, kvar) = map(int, input().strip().split(' '))\n    elarr = []\n    elarr = [int(elem) for elem in input().strip().split(' ')]\n    dp = [False] * 1024\n    dp[0] = True\n    for iterv in range(nvar):\n        for jterv in range(1024):\n            dp[jterv ^ elarr[iterv]] = dp[jterv ^ elarr[iterv]] | dp[jterv]\n    ans = kvar\n    for iterv in range(1024):\n        if dp[iterv]:\n            ans = max(iterv ^ kvar, ans)\n    print(ans)", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\n\ndef solve(A, K):\n    (m, n) = (len(A), 2 ** len(bin(max(max(A), K))[2:]))\n    dp = [[False for _ in range(n)] for _ in range(m)]\n    dp[0][0] = True\n    maxi = 0\n    for i in range(1, m):\n        for j in range(n):\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][A[i] ^ j]\n            if dp[i][j]:\n                maxi = max(j ^ K, maxi)\n    return maxi\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    print(solve([0] + A, K))", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\n\ndef solve(A, K):\n    m = 2 ** len(bin(max(max(A), K))[2:])\n    n = len(A)\n    dp = [[False for _ in range(m)] for _ in range(n)]\n    dp[0][0] = True\n    maxi = 0\n    for i in range(1, n):\n        for j in range(m):\n            dp[i][j] = True if dp[i - 1][j] else dp[i - 1][A[i] ^ j]\n            if dp[i][j]:\n                maxi = max(j ^ K, maxi)\n    return maxi\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    print(solve([0] + A, K))", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\n\ndef f(A, K):\n    m = 2 ** len(bin(max(max(A), K))[2:])\n    n = len(A)\n    x = [[False for _ in range(m)] for _ in range(n)]\n    x[0][0] = True\n    maxi = 0\n    for i in range(1, n):\n        for j in range(m):\n            x[i][j] = 1 if x[i - 1][j] else x[i - 1][A[i] ^ j]\n            if x[i][j]:\n                maxi = max(j ^ K, maxi)\n    return maxi\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    print(f([0] + A, K))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    dp = [[0] * 1024 for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(len(A)):\n        dp[i][0] = 1\n    for elem in A:\n        dp[1][elem] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][j ^ A[i - 1]]\n    maxi = 0\n    for i in range(1024):\n        if dp[n][i]:\n            maxi = max(maxi, i ^ k)\n    print(maxi)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ls = list(map(int, input().split()))\n    dp = [False] * 1024\n    dp[0] = True\n    for i in range(n):\n        for j in range(1024):\n            dp[j ^ ls[i]] = dp[j ^ ls[i]] | dp[j]\n    dp = [i ^ k for i in range(1024) if dp[i]]\n    print(max(dp))", "def read():\n    return input().strip()\n\ndef readint():\n    return int(read())\nt = readint()\nfor i in range(t):\n    (n, k) = map(int, read().split())\n    arr = [0] * 1025\n    a = [int(x) for x in read().split()]\n    for x in a:\n        arr[x] = 1\n    maxvalue = k\n    for x in a:\n        for j in range(1024):\n            if arr[j] == 1:\n                exor = x ^ j\n                arr[exor] = 1\n    for j in range(1024):\n        if arr[j] == 1:\n            maxvalue = max(maxvalue, j ^ k)\n    print(maxvalue)", "for z in range(int(input())):\n    (n, k) = tuple(map(int, input().split()))\n    ar = list(map(int, input().split()))\n    dp = [[0 for i in range(1024)] for j in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1024):\n            dp[i][j] = dp[i - 1][j] or dp[i - 1][ar[i - 1] ^ j]\n    sol = [dp[n][j] * (j ^ k) for j in range(1024)]\n    print(max(sol))", "for _ in range(int(input())):\n    (n, k) = map(int, input().strip().split())\n    S = list(map(int, input().strip().split()))\n    dp = [0 for i in range(1024)]\n    dp[0] = True\n    for i in range(n):\n        for j in range(1024):\n            dp[j ^ S[i]] |= dp[j]\n    ans = k\n    for i in range(1024):\n        if dp[i]:\n            ans = max(ans, k ^ i)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().strip().split()))\n    a = list(map(int, input().strip().split()))\n    dp = []\n    for i in range(n):\n        dp.append([])\n        for j in range(1024):\n            dp[i].append(0)\n    dp[0][0] = 1\n    dp[0][a[0]] = 1\n    for i in range(1, n):\n        for j in range(1024):\n            if dp[i - 1][j]:\n                dp[i][j] = dp[i - 1][j]\n                dp[i][j ^ a[i]] = dp[i - 1][j]\n    ma = 0\n    val = n - 1\n    for i in range(1024):\n        if dp[val][i]:\n            ma = max(ma, k ^ i)\n    print(ma)", "t = int(input())\nfor _ in range(t):\n    (N, K) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    max_ele = max(A)\n    max_len = len(bin(max_ele)) - 2\n    buckets = {}\n    for j in range(1, max_len + 1):\n        buckets[j] = []\n    for a in A:\n        l = len(bin(a)) - 2\n        buckets[l].append(a)\n    m_A = []\n    for k in reversed(range(1, max_len + 1)):\n        if buckets[k] != []:\n            temp = buckets[k].pop()\n            m_A.append(temp)\n            while buckets[k] != []:\n                n = buckets[k].pop()\n                nx = n ^ temp\n                if nx != 0:\n                    buckets[len(bin(nx)) - 2].append(nx)\n    sol = K\n    for i in range(len(m_A)):\n        if sol ^ m_A[i] > sol:\n            sol = sol ^ m_A[i]\n    print(sol)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    dp = [0] * 1024\n    dp[0] = 1\n    for i in range(n):\n        for j in range(1024):\n            dp[j ^ l[i]] = dp[j] | dp[j ^ l[i]]\n    maxi = 0\n    for i in range(1024):\n        if dp[i]:\n            maxi = max(maxi, i ^ k)\n    print(maxi)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [int(i) for i in input().split()]\n    ans = k\n    s = {k}\n    for i in l:\n        temp = set()\n        for j in s:\n            curr = i ^ j\n            ans = max(curr, ans)\n            temp.add(curr)\n        s = s | temp\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    ar = list(map(int, input().split()))\n    ans = k\n    s = {k}\n    for i in ar:\n        temp = set()\n        for j in s:\n            cur = i ^ j\n            ans = max(ans, cur)\n            temp.add(cur)\n        s = s | temp\n    print(ans)", "raw_input = input\nfor _ in range(int(raw_input())):\n    (n, k) = map(int, raw_input().split())\n    A = [int(x) for x in raw_input().split()]\n    dp = [False] * 1024\n    dp[k] = True\n    for i in A:\n        dp[i ^ k] = True\n        for j in range(1024):\n            if dp[j]:\n                dp[j ^ i] = True\n    for i in range(1023, -1, -1):\n        if dp[i]:\n            print(i)\n            break", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ad = set(arr)\n    w = set()\n    w = []\n    w.append(k)\n    ans = k\n    v = set()\n    v.add(k)\n    for i in ad:\n        for j in range(len(w)):\n            x = w[j] ^ i\n            ans = max(ans, x)\n            v.add(x)\n        w = v\n        w = list(w)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    dp = [0] * 1024\n    dp[0] = True\n    for i in range(len(arr)):\n        for j in range(0, 1024):\n            dp[arr[i] ^ j] |= dp[j]\n    ans = k\n    for i in range(0, 1024):\n        if dp[i]:\n            ans = max(ans, k ^ i)\n    print(ans)", "for _ in range(int(input().strip())):\n    (n, k) = map(int, input().strip().split())\n    lst = list(map(int, input().strip().split()))\n    Matrix = [[0 for x in range(1024)] for y in range(n + 1)]\n    for i in lst:\n        Matrix[1][i] = 1\n    for i in range(2, n + 1):\n        for j in range(1024):\n            if Matrix[i - 1][j]:\n                Matrix[i][j] = 1\n            elif Matrix[i - 1][lst[i - 1] ^ j]:\n                Matrix[i][j] = 1\n    master_max = k\n    for i in range(1024):\n        master_max = max(master_max, (k ^ i) * Matrix[n][i])\n    print(master_max)"]