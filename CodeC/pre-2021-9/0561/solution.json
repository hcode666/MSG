["for _ in range(int(input())):\n    K = int(input()) - 1\n    digits = []\n    if K == 0:\n        print('0')\n    else:\n        while K:\n            digits.append(2 * int(K % 5))\n            K //= 5\n        print(''.join([str(m) for m in digits][::-1]))", "for _ in range(int(input())):\n    K = int(input()) - 1\n    digits = []\n    if K == 0:\n        print('0')\n    else:\n        while K:\n            digits.append(2 * int(K % 5))\n            K //= 5\n        print(''.join([str(m) for m in digits][::-1]))", "case = int(input())\nfor _ in range(case):\n    k = int(input()) - 1\n    res = 0\n    mul = 1\n    while k > 0:\n        remai = k % 5\n        res = res + 2 * remai * mul\n        k = k // 5\n        mul *= 10\n    print(res)", "import math\nfor _ in range(int(input())):\n    k = int(input())\n    if k == 1:\n        print(0)\n    else:\n        k -= 1\n        s = ''\n        p = int(math.log(k, 5))\n        m = pow(5, p)\n        for i in range(p, -1, -1):\n            s += str(k // m * 2)\n            k %= m\n            m //= 5\n        print(int(s))", "for _ in range(int(input())):\n    K = int(input()) - 1\n    digits = []\n    if K == 0:\n        print('0')\n    else:\n        while K:\n            digits.append(2 * int(K % 5))\n            K //= 5\n        print(''.join([str(m) for m in digits][::-1]))", "for _ in range(int(input())):\n    K = int(input()) - 1\n    digits = []\n    if K == 0:\n        print('0')\n    else:\n        while K:\n            digits.append(2 * int(K % 5))\n            K //= 5\n        print(''.join([str(m) for m in digits][::-1]))", "def soln(num):\n    if num == 0 or num == 1:\n        return 0\n    num -= 1\n    res = ''\n    while num > 0:\n        (div, mod) = divmod(num, 5)\n        res += str(mod)\n        num = div\n    return int(res[::-1]) * 2\nfor _ in range(int(input())):\n    print(soln(int(input())))", "for t in range(int(input())):\n    k = int(input())\n    k -= 1\n    res = 0\n    i = 1\n    while k != 0:\n        res += k % 5 * i\n        k //= 5\n        i *= 10\n    print(res * 2)", "for t in range(int(input())):\n    k = int(input())\n    k -= 1\n    res = 0\n    i = 1\n    while k != 0:\n        res += k % 5 * i\n        k //= 5\n        i *= 10\n    print(res * 2)", "for t in range(int(input())):\n    k = int(input())\n    k -= 1\n    res = 0\n    i = 1\n    while k != 0:\n        res += k % 5 * i\n        k //= 5\n        i *= 10\n    print(res * 2)", "for t in range(int(input())):\n    k = int(input())\n    k -= 1\n    res = 0\n    i = 1\n    while k != 0:\n        res += k % 5 * i\n        k //= 5\n        i *= 10\n    print(res * 2)", "for _ in range(int(input())):\n    k = int(input())\n    k = k - 1\n    ans = 0\n    mul = 1\n    while k:\n        ans += k % 5 * 2 * mul\n        k = k // 5\n        mul = mul * 10\n    print(ans)", "for _ in range(int(input())):\n    k = int(input())\n    k = k - 1\n    ans = 0\n    mul = 1\n    while k:\n        ans += k % 5 * 2 * mul\n        k = k // 5\n        mul = mul * 10\n    print(ans)", "for _ in range(int(input())):\n    k = int(input())\n    k = k - 1\n    ans = 0\n    mul = 1\n    while k:\n        ans += k % 5 * 2 * mul\n        k = k // 5\n        mul = mul * 10\n    print(ans)", "def decimal_to_quinary(n):\n    if n == 0:\n        return '0'\n    digits = ''\n    while n:\n        digits += str(n % 5)\n        n //= 5\n    return digits[::-1]\nT = int(input())\nfor t in range(T):\n    K = int(input())\n    print(''.join([str(2 * int(d)) for d in decimal_to_quinary(K - 1)]))", "def numberTobase(n, b):\n    if n == 0:\n        return ['0']\n    digits = []\n    while n:\n        digits.append(str(int(n % b)))\n        n //= b\n    return digits[::-1]\nfor _ in range(int(input())):\n    k = int(input())\n    print(2 * int(''.join(numberTobase(k - 1, 5))))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    n = n - 1\n    mul = 1\n    res = 0\n    while n:\n        res += 2 * (n % 5) * mul\n        n = n // 5\n        mul *= 10\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    n = n - 1\n    mul = 1\n    res = 0\n    while n:\n        res += 2 * (n % 5) * mul\n        n = n // 5\n        mul *= 10\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    n = n - 1\n    mul = 1\n    res = 0\n    while n:\n        res += 2 * (n % 5) * mul\n        n = n // 5\n        mul *= 10\n    print(res)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef to_base(n, base):\n    if n == 0:\n        return 0\n    r = ''\n    while n > 0:\n        r = str(n % base) + r\n        n //= 5\n    return int(r)\n\ndef main():\n    for _ in tr():\n        n = to_base(nl() - 1, 5)\n        print(n * 2)\nmain()", "def MagicalNum(k):\n    if 1 <= k <= 5:\n        return 2 * (k - 1)\n    elif k == 0:\n        return 0\n    elif k % 5 == 0:\n        v1 = k // 5\n        return 10 * MagicalNum(v1) + 8\n    else:\n        v1 = k // 5\n        v2 = k % 5\n        return 10 * MagicalNum(v1 + 1) + MagicalNum(v2)\nT = int(input())\nfor _ in range(T):\n    k = int(input())\n    print(MagicalNum(k))", "def base5(k):\n    s = ''\n    while k:\n        s += str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nfor _ in range(int(input())):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k = k - 1\n    ans = base5(k)\n    print(int(ans) * 2)", "def tb5(k):\n    s = ''\n    while k:\n        s = s + str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nfor t in range(int(input())):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k -= 1\n    a = tb5(k)\n    print(int(a) * 2)", "def tb5(k):\n    s = ''\n    while k:\n        s = s + str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nfor t in range(int(input())):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k -= 1\n    a = tb5(k)\n    print(int(a) * 2)", "def tb5(k):\n    s = ''\n    while k:\n        s = s + str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nfor t in range(int(input())):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k -= 1\n    a = tb5(k)\n    print(int(a) * 2)", "def tb5(k):\n    s = ''\n    while k:\n        s = s + str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nfor t in range(int(input())):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k -= 1\n    a = tb5(k)\n    print(int(a) * 2)", "def tb5(k):\n    s = ''\n    while k:\n        s = s + str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nfor t in range(int(input())):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k -= 1\n    a = tb5(k)\n    print(int(a) * 2)", "def snek(k):\n    s = ' '\n    while k:\n        s += str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nt = int(input())\nfor i in range(t):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k -= 1\n    a = snek(k)\n    print(int(a) * 2)", "def tb5(k):\n    s = ''\n    while k:\n        s = s + str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nfor t in range(int(input())):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k -= 1\n    a = tb5(k)\n    print(int(a) * 2)", "def tb5(k):\n    s = ''\n    while k:\n        s = s + str(k % 5)\n        k //= 5\n    s = s[::-1]\n    return s\nfor t in range(int(input())):\n    k = int(input())\n    if k == 0 or k == 1:\n        print(0)\n        continue\n    k -= 1\n    a = tb5(k)\n    print(int(a) * 2)", "for _ in range(int(input())):\n    x = int(input())\n    if x == 0:\n        print(0)\n    elif x == 1:\n        print(0)\n    else:\n        x = x - 1\n        s = ''\n        p = x\n        while p != 0:\n            d = p % 5\n            s += str(d)\n            p = p // 5\n        print(2 * int(s[::-1]))", "def to_base5(n):\n    res = []\n    while n:\n        c = n % 5\n        res.append(c)\n        n //= 5\n    res = res[::-1]\n    return int(''.join((str(i) for i in res)))\nfor _ in range(int(input())):\n    n = int(input())\n    n = n - 1\n    if n == 0:\n        print(0)\n    else:\n        print(2 * to_base5(n))", "for t in range(int(input())):\n    k = int(input())\n    k -= 1\n    res = 0\n    i = 1\n    while k != 0:\n        res += k % 5 * i\n        k //= 5\n        i *= 10\n    print(res * 2)", "def base5(n):\n    ans = 0\n    i = 1\n    while n != 0:\n        ans = ans + n % 5 * i\n        n = n // 5\n        i *= 10\n    return ans\nfor _ in range(int(input())):\n    k = int(input())\n    k -= 1\n    i = base5(k)\n    print(i * 2)", "converter = '01234'\n\ndef convert(n):\n    if n < 5:\n        return converter[n]\n    return convert(n // 5) + converter[n % 5]\nfor i in range(int(input())):\n    n = int(input()) - 1\n    print(2 * int(convert(n)))", "n = int(input())\nfor i in range(n):\n    x = int(input())\n    x = x - 1\n    a = [0] * 100\n    if x == 0:\n        print('0')\n    else:\n        i = 0\n        while x:\n            a[i] = int(x % 5)\n            x = int(x / 5)\n            i = i + 1\n        str1 = ''\n        for j in range(0, i):\n            str1 = str(2 * a[j]) + str1\n        print(str1)", "OddDigitList = ['1', '3', '5', '7', '9']\n\ndef GetMultiSetNoRecursion(num):\n    lst = []\n    multiset = []\n    for x in str(num):\n        lst.append(x)\n    T = list(lst)\n    T2 = list(lst)\n    multiset.append(lst[0])\n    nextDig = 1\n    while len(T2) > 1:\n        while len(lst) > 1:\n            for x in range(1, len(lst)):\n                multiset.append(lst[0] + lst[x])\n            print(multiset)\n            input()\n            lst[0] = lst[0] + lst[1]\n            lst.remove(lst[1])\n            if len(lst) == 1:\n                T.remove(T[1])\n                lst = list(T)\n                if len(lst) == 1:\n                    break\n                else:\n                    lst[0] = lst[0] + lst[1]\n                    lst.remove(lst[1])\n        T2.remove(T2[0])\n        multiset.append(T2[0])\n        T = list(T2)\n        lst = list(T2)\n    return multiset\n\ndef GetProductofDigit(N):\n    c = 1\n    for x in N:\n        if x == '0':\n            return 0\n        c = c * int(x)\n    return c\n\ndef GetProductSet(multiset):\n    productSet = []\n    for x in multiset:\n        y = GetProductofDigit(x)\n        productSet.append(y)\n    return productSet\n\ndef GetMultiSetNoRecursionStringMethod(num):\n    numList = []\n    for x in str(num):\n        numList.append(x)\n    Charlist = list(numList)\n    Fullmultiset = []\n    LastCharacterPosition = []\n    for x in range(0, len(numList)):\n        multiset = []\n        multiset.append(numList[x])\n        LastCharacterPosition.append(x)\n        lengthMultiset = len(multiset)\n        indexCheckStart = 0\n        for y in multiset:\n            for pos in range(LastCharacterPosition[multiset.index(y, indexCheckStart)] + 1, len(Charlist)):\n                multiset.append(y + Charlist[pos])\n                LastCharacterPosition.append(pos)\n            indexCheckStart += 1\n        Fullmultiset = Fullmultiset + multiset\n        LastCharacterPosition = []\n    return Fullmultiset\n\ndef MagicNumberCheckMathematicalMethod(num):\n    numList = []\n    for x in str(num):\n        if x in OddDigitList:\n            return False\n    return True\n\ndef IsMagicNumberTrue(num):\n    multiset = GetMultiSetNoRecursionStringMethod(num)\n    productSet = []\n    for x in multiset:\n        y = GetProductofDigit(x)\n        productSet.append(y)\n    Sum = 0\n    for x in productSet:\n        Sum = Sum + x\n    if Sum % 2 == 0:\n        return True\n    else:\n        return False\n\ndef FindNthMagicalNumber(num):\n    num = num - 1\n    quotient = 1\n    base5list = []\n    while num != 0:\n        remainder = num % 5\n        base5list.append(remainder)\n        num = int(num / 5)\n    base5Num = 0\n    for x in reversed(base5list):\n        base5Num = base5Num * 10 + x\n    return base5Num * 2\n\ndef main2():\n    n = int(input())\n    print(GetMultiSetNoRecursionStringMethod(n))\n    print('Number of Elements in set: ' + str(len(GetMultiSetNoRecursionStringMethod(n))))\n    print('Product Set:' + str(GetProductSet(GetMultiSetNoRecursionStringMethod(n))))\n    print(IsMagicNumberTrue(n))\n\ndef main():\n    T = int(input())\n    inp = []\n    result = []\n    for xx in range(0, T):\n        inp.append(int(input()))\n    largestInput = 0\n    for xx in inp:\n        if largestInput < xx:\n            largestInput = xx\n    InputSet = set(inp)\n    magicNumberCount = 0\n    N = 0\n    while magicNumberCount != largestInput:\n        if IsMagicNumberTrue(N):\n            magicNumberCount += 1\n            if magicNumberCount in InputSet:\n                result.append(N)\n        N = N + 1\n    for x in result:\n        print(x)\n\ndef main3():\n    T = int(input())\n    inp = []\n    for xx in range(0, T):\n        Num = int(input())\n        inp.append(Num)\n    magicNumberCount = 0\n    N = -1\n    greatest = 0\n    for x in inp:\n        if x > greatest:\n            greatest = x\n    result = [None] * greatest\n    while magicNumberCount != greatest:\n        N = N + 1\n        if MagicNumberCheckMathematicalMethod(N):\n            magicNumberCount += 1\n            if magicNumberCount in inp:\n                result[inp.index(magicNumberCount)] = N\n    for x in result:\n        if x == None:\n            continue\n        else:\n            print(x)\n\ndef main4():\n    T = int(input())\n    result = []\n    for x in range(0, T):\n        N = int(input())\n        result.append(FindNthMagicalNumber(N))\n    for x in result:\n        print(x)\nmain4()", "import sys\nimport math\nt = int(input())\narr = [8, 0, 2, 4, 6]\nwhile t > 0:\n    t -= 1\n    k = int(input())\n    result = str(arr[k % 5])\n    power = 1\n    if k % 5 == 0:\n        k -= 1\n    while power <= 20:\n        num = 5 ** power\n        if num > k:\n            break\n        add = int(k / num) % 5\n        result = str(arr[(add + 1) % 5]) + result\n        power += 1\n    print(result)", "def seq(n):\n    return 10 * seq(n // 5) + n % 5 * 2 if n else 0\nt = int(input())\nwhile t:\n    q = int(input())\n    print(seq(q - 1))\n    t -= 1", "from math import log\n\ndef power(k):\n    if log(k, 5) == int(log(k, 5)):\n        return int(log(k, 5)) - 1\n    else:\n        return int(log(k, 5))\nl = [0, 2, 4, 6, 8, 20, 22, 24, 26, 28, 40, 42, 44, 46, 48, 60, 62, 64, 66, 68, 80, 82, 84, 86, 88]\nfor t in range(int(input())):\n    k = int(input())\n    n = power(k)\n    a = 5 ** n\n    ans = 0\n    val = 1\n    while k > 24:\n        if k % a == 0:\n            k = k - 1\n            val = 0\n        ans += l[k // a] * 10 ** n\n        k = k % a\n        n -= 1\n        a = 5 ** n\n    ans += l[k - val]\n    print(ans)", "t = int(input())\nfor i in range(t):\n    z = 1\n    ans = 0\n    n = 0\n    s = int(input())\n    while s != 0:\n        power = 10 ** n\n        s = s - z\n        x = s % 5\n        s = s // 5\n        ans = ans + power * x\n        n = n + 1\n        z = 0\n    ans = ans * 2\n    print(ans)", "def func(j):\n    if j == 0:\n        return 0\n    else:\n        return j % 5 * 2 + func(j // 5) * 10\nt = int(input())\nfor i in range(0, t):\n    k = int(input())\n    m = func(k - 1)\n    print(m)", "def seq(n):\n    return 10 * seq(n // 5) + n % 5 * 2 if n else 0\nt = int(input())\nwhile t > 0:\n    i = int(input())\n    print(seq(i - 1))\n    t = t - 1", "def base5(n):\n    if n == 0:\n        return\n    for x in base5(n // 5):\n        yield x\n    yield (n % 5)\n\ndef seq(n):\n    return 10 * seq(n // 5) + n % 5 * 2 if n else 0\nt = int(input())\nwhile t > 0:\n    i = int(input())\n    print(seq(i - 1))\n    t = t - 1", "def base5(n):\n    if n == 0:\n        return\n    for x in base5(n // 5):\n        yield x\n    yield (n % 5)\n\ndef seq(n):\n    return int(''.join((str(2 * x) for x in base5(n))) or '0')\nt = int(input())\nwhile t > 0:\n    i = int(input())\n    print(seq(i - 1))\n    t = t - 1", "def sum1(a, b):\n    return a + b\n\ndef num(n):\n    if n == 0:\n        return 0\n    else:\n        l = 10 * num(n // 5)\n        m = n % 5 * 2\n        return sum1(l, m)\nt = int(input())\nfor i in range(0, t):\n    k = int(input())\n    k = k - 1\n    print(num(k))\n    print('\\n')", "import sys\nT = int(sys.stdin.readline().rstrip())\n\ndef baseN(num, b, numerals='02468'):\n    return num == 0 and numerals[0] or baseN(num // b, b, numerals).lstrip(numerals[0]) + numerals[num % b]\nfor _ in range(0, T):\n    K = sys.stdin.readline().rstrip()\n    print(baseN(int(K) - 1, 5))", "t = int(input())\nwhile t:\n    t -= 1\n    k = int(input())\n    k -= 1\n    j = 18\n    div = 0\n    ans = 0\n    while j >= 0:\n        div = 5 ** j\n        if k // div != 0:\n            ans += k // div * 10 ** j\n            k = k % div\n        j -= 1\n    print(ans * 2)", "from math import log\nm = 1\n\ndef b(j, n):\n    global m\n    x = (n - 1 - 5 ** m) // 5 ** j\n    return int(x)\n\ndef oeis(n):\n    if n <= 1:\n        return 0\n    global m\n    m = int(log(n - 1, 5))\n    sumi = 0\n    for j in range(m):\n        sumi += 2 * b(j, n) % 10 * 10 ** j\n    x = (2 * b(m, n) % 8 + 2) * 10 ** m + sumi\n    return int(x)\nT = int(input())\nfor t in range(T):\n    n = int(input())\n    print(oeis(n))", "def magic(k):\n    if k == 0:\n        return 0\n    ans = 0\n    expo = 1\n    while k > 0:\n        ans += k % 5 * expo\n        expo *= 10\n        k //= 5\n    return 2 * ans\nT = int(input())\nfor i in range(T):\n    k = int(input())\n    print(magic(k - 1))", "from math import log\nt = int(input())\narr = [0, 2, 4, 6, 8]\nfor i in range(t):\n    k = int(input())\n    x = log(k, 5)\n    m = int(x)\n    a = []\n    if m == 0:\n        print(arr[k - 1])\n    else:\n        k -= 1\n        while m >= 0:\n            c = int(k / 5 ** m)\n            k = k % 5 ** m\n            a += [str(arr[c])]\n            m -= 1\n        if a[0] == '0':\n            p = ''.join(a[1:])\n        else:\n            p = ''.join(a)\n        print(p)", "power_count = 18\npowers = [0] * 18\npowers[0] = 1\nfor i in range(1, power_count):\n    powers[i] = powers[i - 1] * 5\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    K -= 1\n    ans = ''\n    for i in range(power_count - 1, -1, -1):\n        dv = K // powers[i]\n        if ans != '' or dv != 0:\n            ans += str(dv * 2)\n        K -= dv * powers[i]\n    if ans == '':\n        print(0)\n    else:\n        print(ans)", "T = int(input())\nfor t in range(T):\n    n = int(input()) - 1\n    digits = []\n    while n > 0:\n        digits.append(n % 5)\n        n = n // 5\n    s = 0\n    for dg in reversed(digits):\n        s *= 10\n        s += dg\n    print(2 * s)", "import math\nimport sys\nglobal temp\nglobal multilper\nglobal sm\nglobal i\nsm = 0\nmultilper = 10\nt = int(input())\nwhile t > 0:\n    i = 5\n    t = t - 1\n    k = int(input())\n    sm = (k - 1) * 2\n    while i >= 5 and i <= k:\n        temp = k / float(i)\n        temp = temp - 1\n        temp = math.ceil(temp)\n        sm = sm + temp * multilper\n        multilper = multilper * 10\n        i = i * 5\n    multilper = 10\n    print(int(sm))", "def base5(n):\n    if n == 0:\n        return\n    for x in base5(n // 5):\n        yield x\n    yield (n % 5)\n\ndef seq(n):\n    return int(''.join((str(2 * x) for x in base5(n))) or '0')\nfor t in range(int(input())):\n    n = int(input())\n    print(seq(n - 1))", "def base5(n):\n    if n == 0:\n        return\n    for x in base5(n // 5):\n        yield x\n    yield (n % 5)\n\ndef seq(n):\n    return int(''.join((str(2 * x) for x in base5(n))) or '0')\nfor t in range(int(input())):\n    n = int(input())\n    print(seq(n - 1))", "t = int(input())\nwhile t:\n    val = int(input())\n    faltu = []\n    val = val - 1\n    while val > 0:\n        faltu.append(val % 5)\n        val //= 5\n    s = 0\n    for i in range(len(faltu)):\n        s = s + faltu[i] * 10 ** i\n    print(s * 2)\n    t -= 1", "t = 0\nk = 0\nt = int(input())\nd = 0\nnum = ''\nfor i in range(0, t):\n    num = ''\n    k = int(input())\n    k = k - 1\n    if k == 0:\n        print(0)\n    else:\n        while k > 0:\n            d = k % 5\n            num = str(d * 2) + num\n            k = int(k / 5)\n        print(num)", "t = 0\nk = 0\nt = int(input())\nd = 0\nnum = 0\nfor i in range(0, t):\n    num = 0\n    mult = 1\n    k = int(input())\n    k = k - 1\n    if k == 0:\n        print(0)\n    else:\n        while k > 0:\n            d = k % 5 * 2\n            k = int(k / 5)\n            num = d * mult + num\n            mult = mult * 10\n        print(num)", "t = int(input())\na = [0, 2, 4, 6, 8]\nfor i in range(0, t):\n    n = int(input()) - 1\n    if n == 0:\n        print('0')\n        continue\n    x = []\n    while n:\n        r = n % 5\n        x.append(a[r])\n        n //= 5\n    for j in range(len(x) - 1, -1, -1):\n        print(x[j], end='')\n    print()", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = []\n    temp = n - 1\n    if n == 1:\n        print(0)\n    else:\n        while temp > 0:\n            d = temp % 5\n            s.append(d)\n            temp //= 5\n        s = list(map(str, s))\n        s = ''.join(s)\n        s = s[::-1]\n        s = int(s)\n        print(s * 2)", "def b5(n):\n    if n > 0:\n        return 10 * b5(n // 5) + n % 5 * 2\n    else:\n        return 0\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    x = b5(n - 1)\n    print(x)\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    x = n - 1\n    s = ''\n    if x == 0:\n        print(0)\n    else:\n        while x:\n            mod = x % 5\n            x = x // 5\n            s = chr(48 + mod + 7 * (mod > 10)) + s\n        print(int(s) * 2)\n    t = t - 1", "from math import log, floor, ceil\ndigit = [8, 6, 4, 2, 0]\nT = int(input().strip())\nfor each in range(T):\n    x = int(input().strip())\n    if x == 1:\n        print(0)\n        continue\n    d = ceil(log(x, 5))\n    ans = ''\n    while d > 0:\n        dis = 5 ** d - x\n        gap = 5 ** (d - 2) * 5\n        c = floor(dis / gap)\n        ans += str(digit[c])\n        d -= 1\n        x = x - gap * (4 - c)\n    print(int(ans))", "for t in range(int(input())):\n    n = int(input())\n    j = 5\n    c = 1\n    while True:\n        if n // j == 0:\n            j //= 5\n            c -= 1\n            break\n        j *= 5\n        c += 1\n    num = ''\n    for i in range(c):\n        num += '1'\n    num += '2'\n    num = int(num)\n    div = 10 ** c\n    sum = op_sum = 0\n    while True:\n        if c == 0:\n            break\n        k = n // j - op_sum\n        if n % j == 0:\n            k -= 1\n        op_sum += k\n        j //= 5\n        c -= 1\n        sum += k * num\n        num -= div\n        div //= 10\n        if c == 0:\n            break\n    k = n - (op_sum + 1)\n    print(sum + k * 2)", "t = int(input())\nwhile t:\n    t -= 1\n    k = int(input())\n    k -= 1\n    power = 20\n    sum = 0\n    while power != -1:\n        pfl = 5 ** power\n        if pfl <= k:\n            temp = k // pfl\n            temp = temp * 2\n            k = k % pfl\n            sum += 10 ** power * temp\n        power -= 1\n    print(sum)", "def tobase5(x):\n    if x == 0:\n        return '0'\n    a = ''\n    while x > 0:\n        a += str(2 * (x % 5))\n        x //= 5\n    return a[::-1]\nfor i in range(int(input())):\n    print(tobase5(int(input()) - 1))", "t = int(input())\nfor i in range(t):\n    k = int(input())\n    k -= 1\n    arr = []\n    while True:\n        arr += [str(2 * (k % 5))]\n        k = int(k / 5)\n        if k == 0:\n            break\n    arr = reversed(arr)\n    print(int(''.join(arr)))", "for _ in range(int(input())):\n    n = int(input())\n    n -= 1\n    a = []\n    while n > 0:\n        a.append(2 * (n % 5))\n        n //= 5\n    n = len(a)\n    if n == 0:\n        print('0')\n        continue\n    for i in range(n):\n        print(a[n - 1 - i], end='')\n    print()", "t = int(input().strip())\nwhile t:\n    k = int(input().strip()) - 1\n    if k == 0:\n        print(0)\n        t -= 1\n        continue\n    mu = 2\n    car = 0\n    no = k % 10\n    ans = ''\n    ch = k\n    while ch != 0:\n        temp = no * mu + car\n        mu *= 2\n        ans = str(temp % 10) + ans\n        car = int(temp / 10) * 2\n        ch = int(ch / 10)\n        no = ch % 10\n    if car:\n        ch = car\n        temp = car % 10\n        while ch != 0:\n            temp = ch % 10\n            ans = str(temp) + ans\n            ch = int(ch / 10) * 2\n    print(ans)\n    t -= 1", "from math import log\nT = int(input())\nfor _ in range(T):\n    X = int(input()) - 1\n    magic = 0\n    if X:\n        loga = int(log(X, 5))\n        if loga:\n            for macht in range(loga):\n                if X > 0:\n                    macht = loga - macht\n                    aantal = X // 5 ** macht\n                    magic += aantal * 2 * 10 ** int(log(X, 5))\n                    X -= aantal * 5 ** macht\n        magic += 2 * X\n        print(magic)\n    else:\n        print(0)", "from math import log, floor\n\ndef is_magical(N):\n    while N != 0:\n        if N % 10 % 2 != 0:\n            return False\n        N = N // 10\n    return True\nT = int(input())\nfor _ in range(T):\n    K = int(input())\n    ans = 0\n    while K != 0:\n        l5 = floor(log(K, 5))\n        five_pow = 5 ** l5\n        (K, quot) = (K % five_pow, K // five_pow)\n        ans += 10 ** l5 * 2 * quot\n    if ans % 10 == 0:\n        l10 = 1\n        while ans % 10 ** l10 == 0:\n            l10 += 1\n        sub = 1\n        for _ in range(l10 - 1):\n            sub = sub * 10 + 1\n        sub += 1\n        ans -= sub\n    else:\n        ans -= 2\n    print(ans)", "def special(n):\n    L = []\n    if n == 0:\n        print(0)\n    while n != 0:\n        L.append(n % 5)\n        n //= 5\n    L = reversed([2 * i for i in L])\n    print(*L, sep='')\nt = int(input())\nfor _ in range(t):\n    k = int(input())\n    special(k - 1)", "T = int(input())\nfor t in range(T):\n    K = int(input()) - 1\n    b = 2\n    ans = 0\n    while K:\n        ans += K % 5 * b\n        b *= 10\n        K //= 5\n    print(ans)", "import sys\n\ndef getk(x):\n    if x == 0:\n        return 0\n    return getk(x // 5) * 10 + x % 5 * 2\nf = sys.stdin\nn = int(f.readline())\nfor i in range(n):\n    print(getk(int(f.readline()) - 1))", "from math import log\ntcase = int(input())\nfor t in range(0, tcase):\n    flag = 1\n    n = int(input())\n    if n == 5 or n == 25 or n == 125 or (n == 625) or (n == 3125) or (n == 15625) or (n == 78125) or (n == 390625) or (n == 1953125) or (n == 9765625) or (n == 48828125) or (n == 244140625) or (n == 1220703125) or (n == 6103515625) or (n == 30517578125) or (n == 152587890625) or (n == 762939453125):\n        flag = 0\n        n = n - 1\n    m = int(log(n) / log(5))\n    w = (2 * int((n - 1 - 5 ** m) / 5 ** m) % 8 + 2) * 10 ** m\n    for i in range(0, m):\n        w += 2 * int((n - 1 - 5 ** m) / 5 ** i) % 10 * 10 ** i\n    if n == 1:\n        print('0\\n')\n    elif n != 1 and flag == 0:\n        print(int(w + 2))\n    else:\n        print(w)", "cases = int(input())\nfor _ in range(cases):\n    n = int(input())\n    n -= 1\n    if n == 0:\n        print(0)\n    else:\n        digits = []\n        while n:\n            digits.append(str(int(n % 5)))\n            n //= 5\n        print(int(''.join(digits[::-1])) * 2)", "def kthmagical(k):\n    if k == 1:\n        return 0\n    k -= 1\n    i = 0\n    if k >= cs[0]:\n        for i in range(len(cs)):\n            if cs[i] > k:\n                k -= cs[i - 1]\n                break\n    ld = i\n    ans = []\n    while i >= 0:\n        if i == 0 and ld > 0:\n            ans.append(fdigits[k % 4])\n        elif i == 0 and ld == 0:\n            return even[k % 5]\n        else:\n            ans.append(even[k % 5])\n        k //= 5\n        i -= 1\n    return ''.join((str(e) for e in reversed(ans)))\neven = [0, 2, 4, 6, 8]\nfdigits = [2, 4, 6, 8]\ncs = [5]\ni = 1\nwhile cs[-1] < 10 ** 12 + 5:\n    cs.append(cs[-1] + 5 ** i * 4)\n    i += 1\nT = int(input())\nwhile T > 0:\n    T -= 1\n    k = int(input())\n    print(kthmagical(k))", "POWERS_OF_FIVE = [1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125, 6103515625, 30517578125, 152587890625, 762939453125, 3814697265625]\nDIGITS = ['0', '2', '4', '6', '8']\nT = int(input())\n\ndef pretty(number):\n    str = ''.join(number).lstrip('0')\n    return str if str != '' else '0'\n\ndef kth(k):\n    number = []\n    for base in reversed(POWERS_OF_FIVE):\n        number.append(DIGITS[k // base])\n        k = k % base\n    return number\nfor i in range(0, T):\n    K = int(input())\n    print(pretty(kth(K - 1)))", "def mod5(n):\n    if n == 0:\n        return 0\n    else:\n        return 10 * mod5(n // 5) + n % 5\n\ndef ans(n):\n    n -= 1\n    return 2 * mod5(n)\nt = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    print(ans(n))", "def base10toN(num, base):\n    (converted_string, modstring) = ('', '')\n    currentnum = num\n    if not 1 < base < 37:\n        raise ValueError('base must be between 2 and 36')\n    if not num:\n        return '0'\n    while currentnum:\n        mod = currentnum % base\n        currentnum = currentnum // base\n        converted_string = chr(48 + mod + 7 * (mod > 10)) + converted_string\n    return converted_string\nt = int(input())\nwhile t:\n    x = int(input())\n    ans = base10toN(x - 1, 5)\n    ans = [int(x) * 2 for x in ans]\n    s = ''.join(map(str, ans))\n    print(int(s))\n    t -= 1", "import sys\nl = [0, 2, 4, 6, 8]\nfor _ in range(int(sys.stdin.readline())):\n    x = int(sys.stdin.readline()) - 1\n    g = ''\n    while x:\n        g = str(x % 5 << 1) + g\n        x //= 5\n    if g == '':\n        sys.stdout.write('0\\n')\n    else:\n        sys.stdout.write(g + '\\n')", "def main():\n    from sys import stdin, stdout\n    l = [0, 2, 4, 6, 8]\n    for _ in range(int(stdin.readline())):\n        x = int(stdin.readline()) - 1\n        g = ''\n        while x:\n            g = str(x % 5) + g\n            x //= 5\n        k = 0\n        for i in g:\n            k = k * 10 + l[int(i)]\n        stdout.write(str(k) + '\\n')\nmain()", "def main():\n    testCases = int(input())\n    results = []\n    for i in range(testCases):\n        n = int(input())\n        results.append(find(n))\n    for i in results:\n        print(i)\n\ndef find(n):\n    factor = 2\n    answer = 0\n    divisor = 1\n    while n - 1 >= divisor:\n        answer += factor * (int((n - 1) / divisor) % 5)\n        divisor *= 5\n        factor *= 10\n    return answer\nmain()", "t = int(input().strip())\n\ndef bass(n):\n    s = ''\n    while n != 0:\n        tt = n % 5\n        s += str(tt)\n        n = int(n // 5)\n    if s == '':\n        s = '0'\n    return s[::-1]\nfor i in range(t):\n    k = int(input().strip())\n    k -= 1\n    ans = 2 * int(bass(k))\n    print(ans)", "for t in range(int(input())):\n    x = int(input())\n    y = x - 1\n    a = []\n    while y != 0:\n        a.append(y % 5)\n        y = y // 5\n    le = len(a)\n    if x == 1:\n        print('0')\n    else:\n        for o in range(le):\n            print(2 * a[le - o - 1], end='')\n    print()", "def convertToBase5(n):\n    ans = []\n    while n:\n        ans.append(n % 5)\n        n = n // 5\n    return ans[::-1]\nT = int(input())\nfor i in range(T):\n    K = int(input())\n    answerList = convertToBase5(K - 1)\n    if K == 1:\n        print('0')\n    else:\n        s = ''\n        for x in answerList:\n            s = s + str(2 * int(x))\n        print(s)", "xx = [5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125, 6103515625, 30517578125, 152587890625, 762939453125]\nt = int(input())\nwhile t > 0:\n    a = int(input())\n    b = ''\n    flag = True\n    for i in range(16, -1, -1):\n        c = xx[i]\n        if a > c:\n            if a % c == 0:\n                b += str(a // c * 2 - 2)\n                b = b + '8' * (i + 1)\n                flag = False\n                break\n            else:\n                b += str(a // c * 2)\n                a = a % c\n        else:\n            b += '0'\n    if flag:\n        b += str((a - 1) * 2)\n    print(int(b))\n    t -= 1", "def get_number_of_digits(n):\n    d = 0\n    while int(n) > 0:\n        n = n / 5\n        d += 1\n    return d\n\ndef get_digits(K):\n    num = 0\n    d = get_number_of_digits(K) - 1\n    p = 1\n    for i in range(d):\n        p = p * 5\n    while p > 0:\n        num = num * 10 + int(K / p) * 2\n        K = K % p\n        p = int(p / 5)\n    return num\nT = int(input())\nfor t in range(T):\n    K = int(input())\n    print(get_digits(K - 1))", "import sys\nl = [0, 2, 4, 6, 8]\n\ndef main():\n    t = int(input())\n    while t > 0:\n        k = int(input())\n        print(result(k))\n        t -= 1\n\ndef result(k):\n    if k == 1:\n        return 0\n    else:\n        if k % 5 == 0:\n            a = k // 5\n        else:\n            a = k // 5\n            a += 1\n        ans = 10 * result(a) + 2 * (k + 4 - 5 * a)\n        return ans\nmain()", "import math\nP5 = [1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125, 6103515625, 30517578125, 152587890625, 762939453125, 3814697265625]\nt = int(input())\nfor _t in range(t):\n    k = int(input())\n    if k == 1:\n        print(0)\n        continue\n    (l, d, lim) = (k - 1, [], math.ceil(math.log(k) / math.log(5)))\n    for i in range(lim):\n        d.append(l // P5[i] % 5)\n    for x in d[::-1]:\n        print(2 * x, end='')\n    print()", "for _ in range(int(input())):\n    k = int(input())\n    if k == 1:\n        print(0)\n        continue\n    k -= 1\n    ans = ''\n    while k != 0:\n        ans += str(k % 5)\n        k = k // 5\n    ans = int(ans[::-1])\n    print(ans * 2)", "def toDigits(n, b):\n    if n == 0:\n        return 0\n    digits = []\n    while n > 0:\n        digits.insert(0, str(n % b))\n        n = n // b\n    return int(''.join(digits))\nT = int(input())\nfor i in range(T):\n    T = int(input())\n    print(toDigits(T - 1, 5) * 2)", "t = int(input())\nfor T in range(t):\n    n = int(input())\n    ans = n * 2 - 2\n    p = 5\n    m = 10\n    while n > p:\n        if n % p == 0:\n            ans = ans + (n // p - 1) * m\n        else:\n            ans = ans + n // p * m\n        p = p * 5\n        m = m * 10\n    print(ans)", "t = int(input())\nfor T in range(t):\n    n = int(input())\n    ans = n * 2 - 2\n    p = 5\n    m = 10\n    while n > p:\n        if n % p == 0:\n            ans = ans + (n // p - 1) * m\n        else:\n            ans = ans + n // p * m\n        p = p * 5\n        m = m * 10\n    print(ans)", "case = int(input())\nvalid = ['0', '2', '4', '6', '8']\n\ndef base5(n):\n    result = 0\n    i = 0\n    while n > 0:\n        result += n % 5 * 10 ** i\n        i += 1\n        n = n // 5\n    return result\nwhile case != 0:\n    n = int(input())\n    n = str(base5(n - 1))\n    for digit in n:\n        print(valid[int(digit)], end='')\n    print('\\n', end='')\n    case -= 1", "case = int(input())\nvalid = ['0', '2', '4', '6', '8']\n\ndef base5(n):\n    result = 0\n    i = 0\n    while n > 0:\n        result += n % 5 * 10 ** i\n        i += 1\n        n = n // 5\n    return result\nwhile case != 0:\n    n = int(input())\n    n = str(base5(n - 1))\n    for digit in n:\n        print(valid[int(digit)], end='')\n    print('\\n', end='')\n    case -= 1", "T = int(input())\nwhile T > 0:\n    K = int(input())\n    myK = K - 1\n    if myK == 0:\n        x = 0\n        print(x)\n    else:\n        myList = []\n        while myK > 0:\n            myList.append(myK % 5)\n            myK = myK // 5\n        myList.reverse()\n        length = len(myList)\n        num = 0\n        for i in range(length):\n            num = myList[i] + num * 10\n        print(num * 2)\n    T = T - 1"]