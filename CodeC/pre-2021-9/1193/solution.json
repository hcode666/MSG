["from collections import defaultdict\n(n, m, b) = map(int, input().split())\nd = defaultdict(list)\nfor i in range(n):\n    (a, p, v) = map(int, input().split())\n    d[a].append((p, v))\nalb = list(map(int, input().split()))\ndp = [[0 for x in range(b + 1)] for y in range(n + 1)]\ns = 1\ni = 1\nwhile i <= m:\n    j = 0\n    sg = 0\n    while j < len(d[i]):\n        k = b\n        ps = d[i][j][0]\n        gs = d[i][j][1]\n        sg += gs\n        while k >= ps:\n            dp[s][k] = max(dp[s - 1][k], dp[s - 1][k - ps] + gs)\n            k -= 1\n        k = 0\n        while k < ps:\n            dp[s][k] = dp[s - 1][k]\n            k += 1\n        j += 1\n        s += 1\n    k = b\n    while k >= alb[i - 1]:\n        dp[s - 1][k] = max(dp[s - 1 - j][k - alb[i - 1]] + sg, dp[s - 1][k])\n        k -= 1\n    i += 1\nprint(dp[n][b])", "class node:\n\n    def __init__(self):\n        self.price = 0\n        self.greatness = 0\n        self.next = None\n\nclass node1:\n\n    def __init__(self, val1, val2):\n        self.price = val1\n        self.greatness = val2\n        self.next = None\n\ndef funn(n, m, p, l):\n    list1 = [0] * (p + 1)\n    list2 = [0] * (p + 1)\n    for i in range(m):\n        price = 0\n        greatness = 0\n        ref = l[i].next\n        while ref != None:\n            price = price + ref.price\n            greatness = greatness + ref.greatness\n            for j in range(p - ref.price, -1, -1):\n                if ref.greatness + list1[j] > list1[ref.price + j]:\n                    list1[ref.price + j] = ref.greatness + list1[j]\n            ref = ref.next\n        l[i].greatness = greatness\n        for j in range(p + 1):\n            if j + l[i].price <= p and l[i].greatness + list2[j] > list1[l[i].price + j]:\n                list1[l[i].price + j] = l[i].greatness + list2[j]\n            if j + l[i].price >= p:\n                break\n        list2 = list1.copy()\n    return list1[p]\ns = input().split(' ')\nN = int(s[0])\nM = int(s[1])\nP = int(s[2])\nl = []\nm = 0\nwhile m < M:\n    l.append(node())\n    m += 1\nn = 0\nwhile n < N:\n    s = input().split(' ')\n    m = node1(int(s[1]), int(s[2]))\n    m.next = l[int(s[0]) - 1].next\n    l[int(s[0]) - 1].next = m\n    n += 1\ns = input().split(' ')\nfor i in range(M):\n    l[i].price = int(s[i])\nresult = funn(N, M, P, l)\nprint(result)", "(n, m, P) = map(int, input().split())\nd = {}\nfor _ in range(n):\n    (a, p, v) = map(int, input().split())\n    if a in d:\n        d[a].append([p, v])\n    else:\n        d[a] = [[p, v]]\nx = sorted(d.items(), key=lambda y: y[0])\nb = []\nap = list(map(int, input().split()))\nfor i in x:\n    s = 0\n    for j in i[1]:\n        b.append([i[0], j[0], j[1], False])\n        s += j[1]\n    b.append([i[0], ap[i[0] - 1], s, True])\ndp = [[0] * (P + 1) for _ in range(len(b) + 1)]\nfor i in range(1, len(b) + 1):\n    (ano, p, v, album) = (b[i - 1][0], b[i - 1][1], b[i - 1][2], b[i - 1][3])\n    for j in range(1, P + 1):\n        if not album:\n            if j >= p:\n                dp[i][j] = max(v + dp[i - 1][j - p], dp[i - 1][j])\n            else:\n                dp[i][j] = dp[i - 1][j]\n        elif j >= p:\n            dp[i][j] = max(v + dp[i - len(d[ano]) - 1][j - p], dp[i - 1][j])\n        else:\n            dp[i][j] = dp[i - 1][j]\nprint(dp[-1][-1])", "(n, m, P) = map(int, input().split())\nd = []\nfor i in range(n):\n    (a, p, v) = tuple(map(int, input().split()))\n    d.append((a - 1, p, v))\nb = list(map(int, input().split()))\nd.sort()\nprev = [-1] * m\nalbum_v = [0] * m\nfor i in range(n):\n    album_v[d[i][0]] += d[i][2]\n    if i + 1 < n and d[i][0] != d[i + 1][0]:\n        prev[d[i + 1][0]] = i\ndp = []\nfor _ in range(P + 1):\n    dp.append([])\n    for _ in range(n):\n        dp[-1].append(0)\nans = 0\nfor i in range(n):\n    (album, price, value) = d[i]\n    album_price = b[album]\n    album_value = album_v[album]\n    prev_i = prev[album]\n    for budget in range(1, P + 1):\n        res = dp[budget][i - 1] if i - 1 >= 0 else 0\n        if budget >= price:\n            res = max(res, (dp[budget - price][i - 1] if i - 1 >= 0 else 0) + value)\n        if budget >= album_price and (i == n - 1 or d[i + 1][0] != album):\n            res = max(res, (dp[budget - album_price][prev_i] if prev_i >= 0 else 0) + album_value)\n        dp[budget][i] = res\n        ans = max(ans, res)\nprint(ans)"]