["t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if '1' not in s:\n        print(0)\n    else:\n        c = 1\n        r = s.index('1') + 1\n        for j in range(n):\n            if s[j] == '1':\n                if j == r + k:\n                    r = j\n                elif j < r + k:\n                    r = j + 1\n                elif j == r + k + 1:\n                    r = j - 1\n                else:\n                    c += 1\n                    r = j + 1\n        print(c)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if '1' not in s:\n        print(0)\n    else:\n        c = 1\n        r = s.index('1') + 1\n        for j in range(n):\n            if s[j] == '1':\n                if j == r + k:\n                    r = j\n                elif j < r + k:\n                    r = j + 1\n                elif j == r + k + 1:\n                    r = j - 1\n                else:\n                    c += 1\n                    r = j + 1\n        print(c)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    if '1' not in s:\n        print(0)\n    else:\n        c = 1\n        r = s.index('1') + 1\n        for j in range(n):\n            if s[j] == '1':\n                if j == r + k:\n                    r = j\n                elif j < r + k:\n                    r = j + 1\n                elif j == r + k + 1:\n                    r = j - 1\n                else:\n                    c += 1\n                    r = j + 1\n        print(c)", "def solution(n, k, S):\n    if '1' not in S:\n        return 0\n    groupCount = 1\n    rightMostFriendIndex = S.index('1') + 1\n    for i in range(n):\n        if S[i] == '1':\n            if i == rightMostFriendIndex + k:\n                rightMostFriendIndex = i\n            elif i < rightMostFriendIndex + k:\n                rightMostFriendIndex = i + 1\n            elif i == rightMostFriendIndex + k + 1:\n                rightMostFriendIndex = i - 1\n            else:\n                groupCount += 1\n                rightMostFriendIndex = i + 1\n    return groupCount\nt = int(input())\nfor _ in range(t):\n    inputs = [int(item) for item in input().split()]\n    n = inputs[0]\n    k = inputs[1]\n    S = input()\n    print(solution(n, k, S))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    p = -1000000.0\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            continue\n        if i - p <= k + 1:\n            p = min(i + 1, p + k)\n        else:\n            ans += 1\n            p = i + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (ans, last) = (0, -10 ** 9)\n    for i in range(len(s)):\n        if s[i] == '1':\n            if i - last <= k + 1:\n                last = min(last + k, i + 1)\n            else:\n                last = i + 1\n                ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    (ans, last) = (0, -10 ** 9)\n    for i in range(len(s)):\n        if s[i] == '1':\n            if i - last <= k + 1:\n                last = min(last + k, i + 1)\n            else:\n                last = i + 1\n                ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    last = -99999\n    for x in range(n):\n        if s[x] == '1':\n            if x - last <= k + 1:\n                last = min(last + k, x + 1)\n            else:\n                ans += 1\n                last = x + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    low = -1\n    count = 1\n    if s.count('1') == 0:\n        print(0)\n    else:\n        j = 0\n        while j < n:\n            if s[j] == '1':\n                if low == -1:\n                    low = j + 1\n                elif j - low < k:\n                    low = j + 1\n                elif j - low == k:\n                    low = j\n                elif j - low == k + 1:\n                    low = j - 1\n                elif j - low > k + 1:\n                    low = j + 1\n                    count += 1\n            j += 1\n        print(count)", "T = int(input())\nfor t in range(T):\n    (n, k) = [int(i) for i in input().split()]\n    s = input()\n    found = False\n    tot = 0\n    for i in range(n):\n        if s[i] == '1':\n            if found == False:\n                latest = i + 1\n                tot = 1\n                found = True\n            elif i - latest < k:\n                latest = i + 1\n            elif i - latest == k:\n                latest = i\n            elif i - latest == k + 1:\n                latest = i - 1\n            else:\n                latest = i + 1\n                tot += 1\n    print(tot)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    last = -99999\n    for x in range(n):\n        if s[x] == '1':\n            if x - last <= k + 1:\n                last = min(last + k, x + 1)\n            else:\n                ans += 1\n                last = x + 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    l = []\n    for i in range(n):\n        if s[i] == '1':\n            l.append(i + 1)\n    n = len(l)\n    ans = 1\n    prev = -1\n    for i in range(n):\n        if prev == -1:\n            l[i] += 1\n            prev = l[i]\n        elif l[i] - prev < k:\n            l[i] += 1\n            prev = l[i]\n        elif l[i] - prev == k:\n            prev = l[i]\n        elif l[i] - prev > k:\n            if l[i] - prev - k == 1:\n                l[i] -= 1\n                prev = l[i]\n            else:\n                l[i] += 1\n                prev = l[i]\n                ans += 1\n    if not l:\n        print(0)\n    else:\n        print(ans)", "def solveD():\n    for i in range(len(S)):\n        if i == 0:\n            if S[i] < N:\n                S[i] += 1\n        elif S[i] - S[i - 1] == K + 1:\n            S[i] -= 1\n        elif S[i] - S[i - 1] < K and S[i] < N or (S[i] - S[i - 1] > K and S[i] < N):\n            S[i] += 1\n    if not K:\n        return len(set(S))\n    ans = 0\n    friends = True\n    for i in range(len(S) - 1):\n        if friends:\n            if S[i + 1] - S[i] <= K:\n                continue\n            else:\n                friends = False\n                ans += 1\n        elif S[i + 1] - S[i] > K:\n            ans += 1\n            continue\n        else:\n            friends = True\n    if len(S):\n        ans += 1\n    return ans\nfor _ in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    S = [i for (i, x) in enumerate(input()) if x == '1']\n    print(solveD())", "t = int(input())\nfor tc in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    prev = -1000000007\n    gps = 0\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i - prev <= k + 1:\n            prev = min(k + prev, i + 1)\n        else:\n            gps += 1\n            prev = i + 1\n    print(gps)", "t = int(input())\nfor z in range(0, t):\n    (n, k) = map(int, input().split())\n    arr = input()\n    prev1 = -5\n    dist = 0\n    count = 0\n    for i in range(0, n):\n        if arr[i] == '1':\n            if count == 0:\n                count += 1\n                prev1 = i + 1\n            else:\n                dist = abs(prev1 - i)\n                if dist < k:\n                    prev1 = i + 1\n                elif dist == k:\n                    prev1 = i\n                elif dist == k + 1:\n                    prev1 = i - 1\n                else:\n                    count += 1\n                    prev1 = i + 1\n    print(count)", "import sys\ninput = lambda : sys.stdin.readline()\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    last = -10 ** 6\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i - last <= k + 1:\n            last = min(last + k, i + 1)\n        else:\n            ans += 1\n            last = i + 1\n    print(ans)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    res = 0\n    last = -math.inf\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i - last <= k + 1:\n            last = min(last + k, i + 1)\n        else:\n            res += 1\n            last = i + 1\n    print(res)", "t = int(input())\nfor i in range(t):\n    ans = 0\n    (n, k) = map(int, input().split())\n    str = input()\n    last = -float('inf')\n    for i in range(0, len(str)):\n        if str[i] == '1':\n            if i - last <= k + 1:\n                if i - last == k + 1:\n                    last = i - 1\n                elif i - last == k:\n                    last = i\n                else:\n                    last = i + 1\n            else:\n                ans += 1\n                last = i + 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = [int(x) for x in input()]\n    indices = []\n    last = -1\n    ans = 0\n    for x in range(len(s)):\n        if s[x] == 0:\n            continue\n        if last == -1:\n            last = x + 1\n            ans += 1\n            continue\n        if x - last < k:\n            last = x + 1\n        elif x - last == k:\n            last = x\n        elif x - last == k + 1:\n            last = x - 1\n        else:\n            if x + 1 - last > k:\n                ans += 1\n            last = x + 1\n    print(ans)", "for m in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    a = input()\n    s = list(a)\n    power = 0\n    group = 0\n    pre = 0\n    for i in range(n):\n        if not group and s[i] == '1':\n            pre = i + 1\n            power = k + 1\n            group += 1\n        elif s[i] == '1':\n            if abs(pre - (i + 1)) <= power:\n                if abs(pre - (i + 1)) == power:\n                    pre = i + 1\n                    power = k\n                else:\n                    pre = i + 1\n                    power = k + 1\n            elif abs(pre - (i + 1)) > power:\n                if abs(pre - (i + 1)) == power + 1:\n                    pre = i + 1\n                    power = k - 1\n                else:\n                    pre = i + 1\n                    power = k + 1\n                    group += 1\n    print(group)", "for t in range(int(input())):\n    (n, k) = list(map(int, input().strip().split()))\n    s = input()\n    i = 0\n    last = -1\n    c = 0\n    while i < n:\n        if s[i] == '1':\n            if last == -1:\n                c += 1\n                last = i + 1\n            elif i - last <= k + 1:\n                last = min(last + k, i + 1)\n            else:\n                c += 1\n                last = i + 1\n        i += 1\n    print(c)", "def solve(n, k, s):\n    ans = [i for i in range(n) if s[i] == '1']\n    if ans == []:\n        print(0)\n        return\n    c = 1\n    ans[0] += 1\n    for i in range(1, len(ans)):\n        if abs(ans[i] + 1 - ans[i - 1]) <= k:\n            ans[i] += 1\n        elif abs(ans[i] - ans[i - 1]) <= k:\n            pass\n        elif abs(ans[i] - 1 - ans[i - 1]) <= k:\n            ans[i] -= 1\n        else:\n            ans[i] += 1\n            c += 1\n    print(c)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    solve(n, k, s)", "try:\n    t = int(input())\n    for z in range(0, t):\n        (n, k) = map(int, input().split())\n        arr = input()\n        prev1 = 0\n        dist = 0\n        count = 0\n        for i in range(0, n):\n            if arr[i] == '1':\n                if count == 0:\n                    count += 1\n                    prev1 = i + 1\n                else:\n                    dist = abs(prev1 - i)\n                    if dist < k:\n                        prev1 = i + 1\n                    elif dist == k:\n                        prev1 = i\n                    elif dist == k + 1:\n                        prev1 = i - 1\n                    else:\n                        count += 1\n                        prev1 = i + 1\n        print(count)\nexcept:\n    pass", "import math\nfrom bisect import bisect_left\nimport collections\n\ndef combination(n, r):\n    return math.comb(n, r)\n\ndef listing():\n    return list(map(int, input().split()))\n\ndef intp():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef inpspl():\n    return input().split()\n\ndef mapping():\n    return map(int, input().split())\n\ndef sqrt(n):\n    return math.sqrt(n)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef p(s):\n    print(f'{s}')\n\ndef lsetl(lst):\n    return list(set(lst))\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(abs(n - r))\n\ndef frequencyofall(lst):\n    dict(collections.Counter(lst))\n\ndef ispowerof2(n):\n    return n & n - 1 == 0\n\ndef dictionarysort(d):\n    return collections.OrderedDict(sorted(d.items()))\n\ndef solve():\n    for _ in range(intp()):\n        (n, k) = mapping()\n        s = inp()\n        if s.count('1') == 0:\n            p(0)\n        else:\n            ans = 0\n            last = -1 * (10 ** 9 + 7)\n            for i in range(len(s)):\n                if s[i] == '1':\n                    if i - last <= k + 1:\n                        last = min(last + k, i + 1)\n                    else:\n                        ans += 1\n                        last = i + 1\n            p(ans)\nsolve()", "import math\nfrom bisect import bisect_left\nimport collections\n\ndef combination(n, r):\n    return math.comb(n, r)\n\ndef listing():\n    return list(map(int, input().split()))\n\ndef intp():\n    return int(input())\n\ndef inp():\n    return input()\n\ndef inpspl():\n    return input().split()\n\ndef mapping():\n    return map(int, input().split())\n\ndef sqrt(n):\n    return math.sqrt(n)\n\ndef gcd(a, b):\n    return math.gcd(a, b)\n\ndef lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef p(s):\n    print(f'{s}')\n\ndef lsetl(lst):\n    return list(set(lst))\n\ndef nCr(n, r):\n    f = math.factorial\n    return f(n) // f(r) // f(abs(n - r))\n\ndef frequencyofall(lst):\n    dict(collections.Counter(lst))\n\ndef ispowerof2(n):\n    return n & n - 1 == 0\n\ndef dictionarysort(d):\n    return collections.OrderedDict(sorted(d.items()))\n\ndef solve():\n    for _ in range(intp()):\n        (n, k) = mapping()\n        s = inp()\n        ans = 0\n        last = -1 * (10 ** 9 + 7)\n        for i in range(len(s)):\n            if s[i] == '1':\n                if i - last <= k + 1:\n                    last = min(last + k, i + 1)\n                else:\n                    ans += 1\n                    last = i + 1\n        p(ans)\nsolve()", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    last = -1000000\n    for i in range(n):\n        if s[i] == '1':\n            if i - last <= k + 1:\n                last = min(last + k, i + 1)\n            else:\n                ans += 1\n                last = i + 1\n    print(ans)\n    t -= 1", "def solve():\n    (n, k) = [int(x) for x in input().split(' ')]\n    s = input()\n    s = list(s)\n    prev = -1\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if prev == -1:\n            prev = i + 1\n            ans = 1\n            continue\n        if i - prev == k:\n            prev = i\n        elif i - prev == k + 1:\n            prev = i - 1\n        else:\n            if i + 1 - prev > k:\n                ans += 1\n            prev = i + 1\n    print(ans)\n    return\nt = int(input())\nfor i in range(t):\n    solve()", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    groups = 0\n    last = -sys.maxsize\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i - last <= k + 1:\n            last = min(last + k, i + 1)\n        else:\n            groups += 1\n            last = i + 1\n    print(groups)", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    S = input()\n    ans = 0\n    last = -99999999\n    for i in range(len(S)):\n        if S[i] == '0':\n            continue\n        if i - last <= K + 1:\n            last = min(last + K, i + 1)\n        else:\n            ans += 1\n            last = i + 1\n    print(ans)", "for i in range(int(input())):\n    linput = tuple(map(int, input().split()))\n    (N, K) = linput\n    linput = input()\n    fandgrp = 0\n    lastperson = 0 - K - 10\n    for j in range(N):\n        if int(linput[j]) == 1:\n            if not abs(j - lastperson) <= K + 1:\n                fandgrp += 1\n                lastperson = j + 1\n            else:\n                lastperson = min(K + lastperson, j + 1)\n    print(fandgrp)", "for T in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    pre = -10 ** 6\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        distance = i - pre\n        if distance <= k + 1:\n            if distance == k:\n                pre = i\n            elif distance < k:\n                pre = i + 1\n            else:\n                pre = i - 1\n        else:\n            ans += 1\n            pre = i + 1\n    print(ans)", "for T in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    pre = -10 ** 6\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        distance = i - pre\n        if distance <= k + 1:\n            pre = min(pre + k, i + 1)\n        else:\n            ans += 1\n            pre = i + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    groups = 0\n    prev = -1\n    i = 0\n    while i < n:\n        if s[i] == '1':\n            if prev == -1:\n                prev = i + 1\n                groups += 1\n            elif i - prev < k:\n                prev = i + 1\n            elif i - prev == k:\n                prev = i\n            elif i - prev == k + 1:\n                prev = i - 1\n            else:\n                prev = i + 1\n                groups += 1\n        i += 1\n    print(groups)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    string = input()\n    grp = 0\n    last = -1000000.0\n    for idx in range(n):\n        if string[idx] == '0':\n            continue\n        if idx - last <= k + 1:\n            last = min(last + k, idx + 1)\n        else:\n            grp += 1\n            last = idx + 1\n    print(grp)\n    t = t - 1", "t = int(input())\n\ndef same(lst, val):\n    return [i for (i, x) in enumerate(lst) if x == val]\nfor _ in range(t):\n    out = 0\n    last = -1000000\n    (n, k) = map(int, input().split())\n    s = str(input())\n    pos = same(s, '1')\n    for x in pos:\n        if x - last <= k + 1:\n            last = min(last + k, x + 1)\n        else:\n            out += 1\n            last = x + 1\n    print(out)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    s = input()\n    last_person_idx = -1\n    dist = []\n    for i in range(len(s)):\n        if s[i] == '1':\n            if last_person_idx != -1:\n                dist.append(i - last_person_idx)\n            last_person_idx = i\n    if last_person_idx == -1:\n        print(0)\n        t = t - 1\n        continue\n    ans = 1\n    dist.append(1000000)\n    dist[0] = dist[0] - 1\n    for i in range(1, len(dist)):\n        if dist[i - 1] == k + 1:\n            dist[i] = dist[i] + 1\n        else:\n            if dist[i - 1] > k + 1:\n                ans = ans + 1\n            if dist[i - 1] != k:\n                dist[i] = dist[i] - 1\n    print(ans)\n    t = t - 1", "T = int(input())\nfor t in range(T):\n    (n, k) = map(int, input().split())\n    s = input()\n    last = -1\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            if last == -1:\n                last = i + 1\n                ans += 1\n            elif i - last < k:\n                last = i + 1\n            elif i - last == k:\n                last = i\n            elif i - last == k + 1:\n                last = i - 1\n            elif i - last > k + 1:\n                last = i + 1\n                ans += 1\n    print(ans)", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, k, s):\n    ans = [i for i in range(n) if s[i] == '1']\n    if ans == []:\n        print(0)\n        return\n    c = 1\n    ans[0] += 1\n    for i in range(1, len(ans)):\n        if abs(ans[i] + 1 - ans[i - 1]) <= k:\n            ans[i] += 1\n        elif abs(ans[i] - ans[i - 1]) <= k:\n            pass\n        elif abs(ans[i] - 1 - ans[i - 1]) <= k:\n            ans[i] -= 1\n        else:\n            ans[i] += 1\n            c += 1\n    print(c)\nfor _ in range(int(input())):\n    (n, k) = get_int()\n    s = str(input())[:-1]\n    solve(n, k, s)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    a = list(input())\n    y = -1\n    if a.count('1') == 0:\n        print(0)\n    else:\n        c = 1\n        for i in range(n):\n            if a[i] == '1':\n                if y == -1:\n                    y = i + 1\n                elif i - y > k:\n                    if i - 1 - y <= k:\n                        y = i - 1\n                    else:\n                        c += 1\n                        y = i + 1\n                elif i - y < k:\n                    y = i + 1\n                else:\n                    y = i\n        print(c)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    last = -1000000\n    ans = 0\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i - last <= k + 1:\n            last = min(last + k, i + 1)\n        else:\n            ans += 1\n            last = i + 1\n    print(ans)", "import sys\nimport os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndepth = 1000005\nmod = 1000000007\nsys.setrecursionlimit(depth)\nfrom math import inf, ceil\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = str(input())\n    (last, ans) = (-1, 0)\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if last == -1:\n            (last, ans) = (i + 1, 1)\n            continue\n        if i - last == k:\n            last = i\n        elif i - last == k + 1:\n            last = i - 1\n        else:\n            if i - last > k + 1:\n                ans += 1\n            last = i + 1\n    print(ans)", "def prog_name():\n    (n, k) = map(int, input().split())\n    s = input()\n    s = list(s)\n    l = -9999999\n    cnt = 0\n    for x in range(n):\n        if s[x] == '1':\n            if abs(x - l) <= k + 1:\n                l = min(l + k, x + 1)\n            else:\n                cnt += 1\n                l = x + 1\n    print(cnt)\nT = int(input())\nfor unique in range(T):\n    prog_name()", "from collections import defaultdict\nfrom itertools import permutations\nfrom sys import stdin, stdout, setrecursionlimit\nsetrecursionlimit(10 ** 6)\ninput = stdin.readline\ncout = stdout.write\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    last = 0\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            last = i + 1\n            ans = 1\n            break\n    st = last\n    for i in range(st, n):\n        if s[i] == '1':\n            dist = i - last\n            if dist == k:\n                last = i\n            elif dist == k + 1:\n                last = i - 1\n            elif dist < k:\n                last = i + 1\n            elif dist > k + 1:\n                ans += 1\n                last = i + 1\n    print(ans)", "def prog_name():\n    (n, k) = map(int, input().split())\n    s = input()\n    s = list(s)\n    l = -9999999\n    cnt = 0\n    for x in range(n):\n        if s[x] == '1':\n            if abs(x - l) <= k + 1:\n                l = min(l + k, x + 1)\n            else:\n                cnt += 1\n                l = x + 1\n    print(cnt)\nT = int(input())\nfor unique in range(T):\n    prog_name()", "def sol(s, n, k):\n    last = float('-inf')\n    res = 0\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i - last <= k + 1:\n            last = min(last + k, i + 1)\n        else:\n            last = i + 1\n            res += 1\n    return res\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    print(sol(s, n, k))", "t = int(input())\nwhile t:\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = 0\n    l = -1000000.0\n    for i in range(0, len(s)):\n        if s[i] == '0':\n            continue\n        elif i - l <= k + 1:\n            l = min(k + l, i + 1)\n        else:\n            ans = ans + 1\n            l = i + 1\n    print(ans)\n    t = t - 1", "t = int(input(' '))\nfor i in range(0, t):\n    (n, k) = map(int, input(' ').split())\n    s = input(' ')\n    c = 0\n    lindex = 0\n    for i in range(0, len(s)):\n        if s[i] == '1':\n            if c == 0:\n                c = 1\n                lindex = i + 1\n            elif i - lindex <= k + 1:\n                lindex = min(lindex + k, i + 1)\n            else:\n                c = c + 1\n                lindex = i + 1\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    a = 0\n    l = -1000000000.0\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if i - l <= k + 1:\n            l = min(l + k, i + 1)\n        else:\n            a += 1\n            l = i + 1\n    print(a)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    count = 0\n    prevIndex = float('-inf')\n    for (index, char) in enumerate(s):\n        if char == '1':\n            if index - prevIndex <= k + 1:\n                prevIndex = min(prevIndex + k, index + 1)\n            else:\n                prevIndex = index + 1\n                count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    prev = -10 ** 9\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            if i - prev <= k + 1:\n                prev = min(prev + k, i + 1)\n            else:\n                ans += 1\n                prev = i + 1\n    print(ans)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    ans = 0\n    last = -float('inf')\n    for i in range(N):\n        if S[i] == '1':\n            if i - last <= K + 1:\n                last = min(last + K, i + 1)\n            else:\n                ans += 1\n                last = i + 1\n    print(ans)", "import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 5)\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    xx = s.count('1')\n    if xx == 0:\n        print(0)\n        continue\n    ll = []\n    f = 0\n    c = 0\n    for i in s:\n        if i == '1':\n            ll.append(c)\n        c += 1\n    gr = 1\n    ll[0] += 1\n    for i in range(len(ll) - 1):\n        if ll[i + 1] - ll[i] == k:\n            continue\n        if ll[i + 1] - ll[i] < k:\n            ll[i + 1] += 1\n            continue\n        if ll[i + 1] - ll[i] == k + 1:\n            ll[i + 1] -= 1\n            continue\n        else:\n            gr += 1\n            ll[i + 1] += 1\n    print(gr)", "import math\ninf = int(10000000000.0 + 7)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if '1' not in s:\n        print(0)\n        continue\n    index = -1\n    g = 0\n    for i in range(n):\n        if s[i] == '1':\n            if index == -1:\n                index = i + 1\n            elif i - index > k:\n                if i - index <= k + 1:\n                    index = i - 1\n                else:\n                    index = i + 1\n                    g += 1\n            elif i - index < k:\n                index = i + 1\n            else:\n                index = i\n    print(g + 1)", "import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 5)\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    xx = s.count('1')\n    if xx == 0:\n        print(0)\n        continue\n    ll = []\n    f = 0\n    c = 0\n    for i in s:\n        if i == '1':\n            ll.append(c)\n        c += 1\n    gr = 1\n    ll[0] += 1\n    for i in range(len(ll) - 1):\n        if ll[i + 1] - ll[i] == k:\n            continue\n        if ll[i + 1] - ll[i] < k:\n            ll[i + 1] += 1\n            continue\n        if ll[i + 1] - ll[i] == k + 1:\n            ll[i + 1] -= 1\n            continue\n        else:\n            gr += 1\n            ll[i + 1] += 1\n    print(gr)", "import math\ninf = int(10000000000.0 + 7)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if '1' not in s:\n        print(0)\n        continue\n    index = -1\n    g = 0\n    for i in range(n):\n        if s[i] == '1':\n            if index == -1:\n                index = i + 1\n            elif i - index > k:\n                if i - index <= k + 1:\n                    index = i - 1\n                else:\n                    index = i + 1\n                    g += 1\n            elif i - index < k:\n                index = i + 1\n            else:\n                index = i\n    print(g + 1)", "import math\ninf = int(10000000000.0 + 7)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if '1' not in s:\n        print(0)\n        continue\n    index = -1\n    g = 0\n    for i in range(n):\n        if s[i] == '1':\n            if index == -1:\n                index = i + 1\n            elif i - index > k:\n                if i - index <= k + 1:\n                    index = i - 1\n                else:\n                    index = i + 1\n                    g += 1\n            elif i - index < k:\n                index = i + 1\n            else:\n                index = i\n    print(g + 1)", "import sys\nimport math\nimport heapq\nfrom collections import defaultdict as dd\nfrom collections import OrderedDict as od\nfrom collections import deque\nfrom itertools import permutations as pp\nfrom itertools import combinations as cc\nfrom sys import stdin\nfrom functools import cmp_to_key\nfrom functools import lru_cache\nfrom bisect import bisect_left as bs_l\nfrom bisect import bisect_right as bs_r\ninput = sys.stdin.readline\nmod = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 5)\nT = int(input())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    xx = s.count('1')\n    if xx == 0:\n        print(0)\n        continue\n    ll = []\n    f = 0\n    c = 0\n    for i in s:\n        if i == '1':\n            ll.append(c)\n        c += 1\n    gr = 1\n    ll[0] += 1\n    for i in range(len(ll) - 1):\n        if ll[i + 1] - ll[i] == k:\n            continue\n        if ll[i + 1] - ll[i] < k:\n            ll[i + 1] += 1\n            continue\n        if ll[i + 1] - ll[i] == k + 1:\n            ll[i + 1] -= 1\n            continue\n        else:\n            gr += 1\n            ll[i + 1] += 1\n    print(gr)", "import math\ninf = int(10000000000.0 + 7)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = list(input())\n    if '1' not in s:\n        print(0)\n        continue\n    index = -1\n    g = 0\n    for i in range(n):\n        if s[i] == '1':\n            if index == -1:\n                index = i + 1\n            elif i - index > k:\n                if i - index <= k + 1:\n                    index = i - 1\n                else:\n                    index = i + 1\n                    g += 1\n            elif i - index < k:\n                index = i + 1\n            else:\n                index = i\n    print(g + 1)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    mc = -1\n    gc = 1\n    if s.count('1') == 0:\n        print(0)\n        continue\n    for i in range(n):\n        if s[i] == '1':\n            if mc == -1:\n                mc = i + 1\n            elif i - mc > k:\n                if i - 1 - mc <= k:\n                    mc = i - 1\n                else:\n                    gc += 1\n                    mc = i + 1\n            elif i - mc < k:\n                mc = i + 1\n            else:\n                mc = i\n    print(gc)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\nt = inp()\nwhile t:\n    t -= 1\n    (n, k) = ma()\n    s = st()\n    pr = -1\n    co = 0\n    (lf, rf) = (0, 0)\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        elif pr == -1:\n            co = 1\n            pr = i + 1\n            lf = 1\n            continue\n        else:\n            if i - pr == k:\n                pr = i\n                lf = 1\n                continue\n            if i - pr < k:\n                pr = 1 + i\n                lf = 1\n                continue\n            elif i - pr - 1 == k and lf == 0:\n                lf = 1\n                pr = i\n                continue\n            elif i - pr - 1 == k and lf:\n                pr = i - 1\n                continue\n            else:\n                co += 1\n                pr = i + 1\n                lf = 1\n    print(co)", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    start = -1\n    for i in range(n):\n        if s[i] == '1':\n            start = i\n            break\n    if start == -1:\n        return 0\n    (ans, prev) = (1, start + 1)\n    for i in range(start + 1, n):\n        if s[i] == '1':\n            if i - prev > k + 1:\n                ans += 1\n                prev = i + 1\n            elif i - prev == k + 1:\n                prev = i - 1\n            elif i - prev < k:\n                prev = i + 1\n            else:\n                prev = i\n    return ans\nfor T in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    print(answer())", "import sys\ninput = lambda : sys.stdin.readline()\nint_arr = lambda : list(map(int, input().split()))\nstr_arr = lambda : list(map(str, input().split()))\nget_str = lambda : map(str, input().split())\nget_int = lambda : map(int, input().split())\nget_flo = lambda : map(float, input().split())\nmod = 1000000007\n\ndef solve(n, k, s):\n    ans = [i for i in range(n) if s[i] == '1']\n    if ans == []:\n        print(0)\n        return\n    c = 1\n    ans[0] += 1\n    for i in range(1, len(ans)):\n        if abs(ans[i] + 1 - ans[i - 1]) <= k:\n            ans[i] += 1\n        elif abs(ans[i] - ans[i - 1]) <= k:\n            pass\n        elif abs(ans[i] - 1 - ans[i - 1]) <= k:\n            ans[i] -= 1\n        else:\n            ans[i] += 1\n            c += 1\n    print(c)\nfor _ in range(int(input())):\n    (n, k) = get_int()\n    s = str(input())[:-1]\n    solve(n, k, s)", "from sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input().strip()\n    s = [int(i) for i in s]\n    ans = 0\n    last = -float('inf')\n    move = 0\n    for i in range(n):\n        if s[i] == 0:\n            continue\n        else:\n            if move and s[i] == 1:\n                move = 0\n                continue\n            move = 0\n            if abs(last - i) <= k:\n                if abs(i + 1 - last) <= k and i + 1 < n:\n                    s[i + 1] += 1\n                    s[i] -= 1\n                    last = i + 1\n                    move = 1\n                else:\n                    last = i\n            elif abs(i - 1 - last) <= k:\n                s[i - 1] += 1\n                s[i] -= 1\n                last = i - 1\n                move = 0\n            elif i + 1 < n:\n                s[i + 1] += 1\n                last = i + 1\n                s[i] -= 1\n                move = 1\n    last = float('inf')\n    for i in range(n):\n        if s[i]:\n            if abs(last - i) > k:\n                ans += 1\n            last = i\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    s = list(s)\n    ans = 0\n    idx = -1\n    for i in range(n):\n        if i - idx > k + 1:\n            idx = -1\n        if s[i] == '1':\n            if idx == -1:\n                ans += 1\n                idx = i + 1\n            elif i - idx < k:\n                idx = i + 1\n            elif i - idx == k + 1:\n                idx = i - 1\n            elif i - idx == k:\n                idx = i\n            else:\n                idx = i + 1\n                ans += 1\n    print(ans)", "import sys\nimport bisect\nfrom bisect import bisect_left as lb\nfrom bisect import bisect_right as rb\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nfrom math import log\nfrom math import gcd\nfrom math import atan2, acos\nfrom random import randint\nsa = lambda : input_()\nsb = lambda : int(input_())\nsc = lambda : input_().split()\nsd = lambda : list(map(int, input_().split()))\nsflo = lambda : list(map(float, input_().split()))\nse = lambda : float(input_())\nsf = lambda : list(input_())\nflsh = lambda : sys.stdout.flush()\nmod = 10 ** 9 + 7\nmod1 = 998244353\ngp = []\ncost = []\ndp = []\nmx = []\nans1 = []\nans2 = []\nspecial = []\nspecnode = []\na = 0\nkthpar = []\n\ndef dfs2(root, par):\n    if par != -1:\n        dp[root] = dp[par] + 1\n    for i in range(1, 20):\n        if kthpar[root][i - 1] != -1:\n            kthpar[root][i] = kthpar[kthpar[root][i - 1]][i - 1]\n    for child in gp[root]:\n        if child == par:\n            continue\n        kthpar[child][0] = root\n        dfs(child, root)\nans = 0\nb = []\nvis = []\ntot = 0\ntime = []\ntime1 = []\nadj = []\nmx = -1\neps = 1e-07\n\ndef dfs(a, b, p, c):\n    if a == b:\n        return c\n    for (i, j) in adj[a]:\n        if i == p:\n            continue\n        temp = dfs(i, b, a, c + j)\n        if dfs(i, b, a):\n            mx = max(i, mx)\n            return 1\n    return tot\n\ndef hnbhai(tc):\n    (n, k) = sd()\n    s = list(sa())\n    (tot, strt) = (0, -1)\n    abe = 0\n    for i in range(n):\n        if s[i] == '1':\n            if strt != -1:\n                if strt > i:\n                    strt = i + k + 1\n                elif strt < i:\n                    if strt == i - 1:\n                        strt = i + k - 1\n                    else:\n                        strt = i + k + 1\n                        tot += 1\n                else:\n                    strt = i + k\n            else:\n                strt = i + k + 1\n    print(tot + (s.count('1') > 0))\nfor _ in range(sb()):\n    hnbhai(_ + 1)", "cases = int(input())\nfor _ in range(cases):\n    (n, k) = map(int, input().split())\n    s = input()\n    people = [i for (i, char) in enumerate(s) if char == '1']\n    prev_dis = 0\n    stack = []\n    for p in people:\n        if not stack:\n            stack.append(p + 1)\n        else:\n            dif = p - stack[-1]\n            if dif < k:\n                stack.append(p + 1)\n            elif dif == k:\n                stack.append(p)\n            elif dif == k + 1:\n                stack.append(p - 1)\n            else:\n                stack.append(p + 1)\n    if not people:\n        ans = 0\n    else:\n        ans = 1\n    ln = len(stack)\n    for i in range(1, ln):\n        if stack[i] - stack[i - 1] > k:\n            ans += 1\n    print(ans)", "import sys\nfrom bisect import bisect_left as lb\nfrom collections import deque\nfrom queue import PriorityQueue as pq\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\nii = lambda : int(input_())\nil = lambda : list(map(int, input_().split()))\nilf = lambda : list(map(float, input_().split()))\nip = lambda : input_()\nfi = lambda : float(input_())\nap = lambda ab, bc, cd: ab[bc].append(cd)\nli = lambda : list(input_())\npr = lambda x: print(x)\nprinT = lambda x: print(x)\nf = lambda : sys.stdout.flush()\ninv = lambda x: pow(x, mod - 2, mod)\nmod = 10 ** 9 + 7\nfor _ in range(ii()):\n    (n, k) = il()\n    s = list(ip())\n    t = -1\n    g = 0\n    ans = 0\n    for i in range(n):\n        if s[i] == '1':\n            if t == -1:\n                t = i + k + 1\n                g = 1\n            elif t > i:\n                t = i + k + 1\n            elif t == i:\n                t = i + k\n            elif t == i - 1:\n                t = i + k - 1\n            else:\n                t = i + k + 1\n                ans += 1\n                g = 1\n    if g == 1:\n        ans += 1\n    s1 = s.copy()\n    s = s1[::-1]\n    t = -1\n    g = 0\n    ans1 = 0\n    for i in range(n):\n        if i > t:\n            t = -1\n            if g == 1:\n                ans1 += 1\n                g = 0\n        if s[i] == '1':\n            if t == -1:\n                t = i + k + 1\n                g = 1\n            elif t > i:\n                t = i + k + 1\n            elif t == i:\n                t = i + k\n            elif t == i - 1:\n                t = i + k - 1\n            else:\n                t = i + k + 1\n                ans += 1\n                g = 0\n    if g:\n        ans1 += 1\n    print(min(ans1, ans))", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    b = input()\n    a = []\n    if b.count('1') == 1 or b.count('1') == 0:\n        print(b.count('1'))\n        continue\n    for i in range(n):\n        if b[i] == '1':\n            a.append(i)\n    a[0] += 1\n    a[-1] -= 1\n    for i in range(1, len(a) - 1):\n        if a[i] - a[i - 1] + 1 <= k:\n            a[i] += 1\n        elif a[i] - a[i - 1] <= k:\n            continue\n        elif a[i] - 1 - a[i - 1] == k:\n            a[i] -= 1\n        else:\n            a[i] += 1\n    ans = 1\n    for i in range(1, len(a)):\n        if a[i] - a[i - 1] > k:\n            ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    prev = None\n    i = 0\n    count = 0\n    adder = 0\n    while i < n:\n        if s[i] == '1':\n            if prev == None:\n                count = count + 1\n                adder = 1\n                prev = i + 1\n            elif i - prev < k:\n                prev = i + 1\n            elif i - prev == k:\n                prev = i\n            elif i - prev == k + 1:\n                prev = i - 1\n            elif i - prev > k + 1:\n                count = count + 1\n                prev = i + 1\n                adder = 0\n        i = i + 1\n    print(count)", "t = int(input())\nfor z in range(0, t):\n    (n, k) = map(int, input().split())\n    arr = input()\n    prev1 = -5\n    dist = 0\n    count = 0\n    for i in range(0, n):\n        if arr[i] == '1':\n            if count == 0:\n                count += 1\n                prev1 = i + 1\n            else:\n                dist = abs(prev1 - i)\n                if dist < k:\n                    prev1 = i + 1\n                elif dist == k:\n                    prev1 = i\n                elif dist == k + 1:\n                    prev1 = i - 1\n                else:\n                    count += 1\n                    prev1 = i + 1\n    print(count)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    s = list(input())\n    prev = -1\n    dist = []\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if prev == -1:\n            prev = i\n        else:\n            dist.append(i - prev)\n            prev = i\n    if len(dist) == 0:\n        if prev == -1:\n            print(0)\n        else:\n            print(1)\n        continue\n    c = 0\n    prev = -1\n    dist[0] -= 1\n    for i in range(n):\n        if s[i] == '0':\n            continue\n        if prev == -1:\n            prev = i\n            continue\n        if dist[c] > k:\n            if dist[c] - 1 == k:\n                dist[c] -= 1\n                if c != len(dist) - 1:\n                    dist[c + 1] += 1\n            else:\n                dist[c] += 1\n                if c != len(dist) - 1:\n                    dist[c + 1] -= 1\n        elif dist[c] < k:\n            dist[c] += 1\n            if c != len(dist) - 1:\n                dist[c + 1] -= 1\n        else:\n            pass\n        c += 1\n    c = 1\n    for i in dist:\n        if i > k:\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    (last, count) = (False, 0)\n    for (i, c) in enumerate(s):\n        if not last and c == '1':\n            last = i + 1\n        if last:\n            if c == '1':\n                if i + 1 - k <= last:\n                    last = i + 1\n                elif i - k == last:\n                    last = i\n                elif i - 1 - k == last:\n                    last = i - 1\n                else:\n                    (last, count) = (i + 1, count + 1)\n    print(count if not last else count + 1)", "import sys, os, io\ninput = sys.stdin.readline\nPI = 3.141592653589793\nINF = float('inf')\nMOD = 1000000007\n\ndef bin32(num):\n    return '{0:032b}'.format(num)\n\ndef add(x, y):\n    return (x + y) % MOD\n\ndef sub(x, y):\n    return (x - y + MOD) % MOD\n\ndef mul(x, y):\n    return x * y % MOD\n\ndef gcd(x, y):\n    if y == 0:\n        return x\n    return gcd(y, x % y)\n\ndef lcm(x, y):\n    return x * y // gcd(x, y)\n\ndef power(x, y):\n    res = 1\n    x %= MOD\n    while y != 0:\n        if y & 1:\n            res = mul(res, x)\n        y >>= 1\n        x = mul(x, x)\n    return res\n\ndef mod_inv(n):\n    return power(n, MOD - 2)\n\ndef prob(p, q):\n    return mul(p, power(q, MOD - 2))\n\ndef ii():\n    return int(input())\n\ndef li():\n    return [int(i) for i in input().split()]\n\ndef ls():\n    return [i for i in input().split()]\nfor t in range(ii()):\n    t += 1\n    (n, k) = li()\n    s = input()\n    a = []\n    diff = []\n    for i in range(n):\n        if s[i] == '1':\n            a.append(i)\n    if len(a) == 0:\n        print(0)\n        continue\n    if len(a) == 1:\n        print(1)\n        continue\n    ans = 1\n    a[0] += 1\n    a[-1] -= 1\n    for i in range(1, len(a)):\n        x = a[i] - a[i - 1]\n        if x == k:\n            continue\n        elif x == k + 1:\n            if i == len(a) - 1:\n                ans += 1\n            a[i] -= 1\n        else:\n            if x > k + 1:\n                ans += 1\n            a[i] += 1\n    print(ans)", "from sys import stdin, stdout\nnmbr = lambda : int(input())\nlst = lambda : list(map(int, input().split()))\nPI = float('inf')\nfor _ in range(nmbr()):\n    (n, lim) = lst()\n    s = input()\n    a = [i for i in range(n) if s[i] == '1']\n    n = len(a)\n    if n == 0:\n        print(0)\n        continue\n    dp = [[PI for i in range(3)] for i in range(n)]\n    dp[0][0] = dp[0][1] = dp[0][2] = 1\n    for i in range(1, n):\n        for j in range(3):\n            p2 = a[i] + (j - 1)\n            for k in range(3):\n                p1 = a[i - 1] + (k - 1)\n                if p2 - p1 <= lim:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][k])\n                else:\n                    dp[i][j] = min(dp[i][j], dp[i - 1][k] + 1)\n    print(min(dp[-1]))"]