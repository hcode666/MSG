["t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = 0\n    for x in l:\n        s += x\n        if s % k != 0:\n            s += 1\n    if s % k == 0:\n        print(int(s / k))\n    else:\n        print(int(s / k + 1))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    su = 0\n    for i in range(n):\n        su += a[i]\n        if su % k != 0:\n            su += 1\n    print(math.ceil(su / k))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    su = 0\n    for i in range(n):\n        su += a[i]\n        if su % k != 0:\n            su += 1\n    print(math.ceil(su / k))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    su = 0\n    for i in range(n):\n        su += a[i]\n        if su % k != 0:\n            su += 1\n    print(math.ceil(su / k))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    su = 0\n    for i in range(n):\n        su += a[i]\n        if su % k != 0:\n            su += 1\n    print(math.ceil(su / k))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    su = 0\n    for i in range(n):\n        su += a[i]\n        if su % k != 0:\n            su += 1\n    print(math.ceil(su / k))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    su = 0\n    for i in range(n):\n        su += a[i]\n        if su % k != 0:\n            su += 1\n    print(math.ceil(su / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    for j in arr:\n        if ans % k != 0:\n            ans += 1\n        ans += j\n    print(math.ceil(ans / k))", "import math\ntests = int(input())\nfor i in range(tests):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = 0\n    remaining = 0\n    for j in arr:\n        if remaining % k != 0:\n            ans += 1\n            remaining += 1\n        remaining += j\n        ans += j\n        remaining %= k\n    print(math.ceil(ans / k))", "from math import ceil\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    r = 0\n    ans = 0\n    for j in range(n):\n        if l[j] == k:\n            ans += 1\n            continue\n        else:\n            if r >= l[j]:\n                r -= l[j]\n            else:\n                b = ceil((l[j] - r) / k)\n                ans += b\n                r = k * b - (l[j] - r)\n            if r > 0:\n                r -= 1\n    print(ans)", "from math import ceil\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    r = 0\n    ans = 0\n    for j in range(n):\n        if l[j] == k:\n            ans += 1\n            continue\n        else:\n            if r >= l[j]:\n                r -= l[j]\n            else:\n                b = ceil((l[j] - r) / k)\n                ans += b\n                r = k * b - (l[j] - r)\n            if r > 0:\n                r -= 1\n    print(ans)", "from math import ceil\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    r = 0\n    ans = 0\n    for j in range(n):\n        if l[j] == k:\n            ans += 1\n            continue\n        else:\n            if r >= l[j]:\n                r -= l[j]\n            else:\n                b = ceil((l[j] - r) / k)\n                ans += b\n                r = k * b - (l[j] - r)\n            if r > 0:\n                r -= 1\n    print(ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    remBread = 0\n    ans = 0\n    for i in range(n):\n        if l[i] == k:\n            ans += 1\n            continue\n        else:\n            if remBread >= l[i]:\n                remBread -= l[i]\n            else:\n                reqBreadPacket = ceil((l[i] - remBread) / k)\n                ans += reqBreadPacket\n                remBread = k * reqBreadPacket - (l[i] - remBread)\n            if remBread > 0:\n                remBread -= 1\n    print(ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    remBread = 0\n    ans = 0\n    for i in range(n):\n        if l[i] == k:\n            ans += 1\n            continue\n        else:\n            if remBread >= l[i]:\n                remBread -= l[i]\n            else:\n                reqBreadPacket = ceil((l[i] - remBread) / k)\n                ans += reqBreadPacket\n                remBread = k * reqBreadPacket - (l[i] - remBread)\n            if remBread > 0:\n                remBread -= 1\n    print(ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    remBread = 0\n    ans = 0\n    for i in range(n):\n        if l[i] == k:\n            ans += 1\n            continue\n        else:\n            if remBread >= l[i]:\n                remBread -= l[i]\n            else:\n                reqBreadPacket = ceil((l[i] - remBread) / k)\n                ans += reqBreadPacket\n                remBread = k * reqBreadPacket - (l[i] - remBread)\n            if remBread > 0:\n                remBread -= 1\n    print(ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = [int(x) for x in input().split()]\n    remBread = 0\n    ans = 0\n    for i in range(n):\n        if remBread >= l[i]:\n            remBread -= l[i]\n        else:\n            reqBreadPacket = ceil((l[i] - remBread) / k)\n            ans += reqBreadPacket\n            remBread = k * reqBreadPacket - (l[i] - remBread)\n        if remBread > 0:\n            remBread -= 1\n    print(ans)", "import math\nt = int(input())\nfor tc in range(0, t):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    cur = 0\n    ans = 0\n    for i in range(0, n):\n        if a[i] < cur:\n            cur = cur - a[i]\n        else:\n            x = math.ceil((a[i] - cur) / k)\n            ans = ans + int(x)\n            cur = cur + (x * k - a[i])\n        if cur > 0:\n            cur = cur - 1\n    print(ans)", "import math\nt = int(input())\nfor tc in range(0, t):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    cur = 0\n    ans = 0\n    for i in range(0, n):\n        if a[i] < cur:\n            cur = cur - a[i]\n        else:\n            x = math.ceil((a[i] - cur) / k)\n            ans = ans + int(x)\n            cur = cur + (x * k - a[i])\n        if cur > 0:\n            cur = cur - 1\n    print(ans)", "from math import ceil\nt = int(input())\nfor tc in range(0, t):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    cur = 0\n    ans = 0\n    for i in range(0, n):\n        if a[i] < cur:\n            cur = cur - a[i]\n        else:\n            x = ceil((a[i] - cur) / k)\n            ans = ans + int(x)\n            cur = cur + (x * k - a[i])\n        if cur > 0:\n            cur = cur - 1\n    print(ans)", "T = int(input())\nfor ti in range(T):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    res = 0\n    nump = 0\n    for ai in range(len(A)):\n        if A[ai] >= res:\n            fd = A[ai] - res\n            pi = fd // k\n            nump += pi\n            if pi > 0:\n                if fd % k == 0:\n                    res = 0\n                else:\n                    res = k - fd % k - 1\n                    nump += 1\n            elif fd % k == 0:\n                res = 0\n            else:\n                res = k - fd - 1\n                nump += 1\n        else:\n            fd = res - A[ai]\n            res = fd - 1\n    print(nump)", "T = int(input())\nfor ti in range(T):\n    (n, k) = map(int, input().split())\n    A = list(map(int, input().split()))\n    res = 0\n    nump = 0\n    for ai in range(len(A)):\n        if A[ai] >= res:\n            fd = A[ai] - res\n            pi = fd // k\n            nump += pi\n            if pi > 0:\n                if fd % k == 0:\n                    res = 0\n                else:\n                    res = k - fd % k - 1\n                    nump += 1\n            elif fd % k == 0:\n                res = 0\n            else:\n                res = k - fd - 1\n                nump += 1\n        else:\n            fd = res - A[ai]\n            res = fd - 1\n    print(nump)", "t = int(input())\nfor _ in range(t):\n    (N, K) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    total = 0\n    remaining = 0\n    i = 0\n    spare = 0\n    while i < N:\n        total = total + arr[i]\n        if total % K != 0:\n            total = total + 1\n        i = i + 1\n    if total % K == 0:\n        print(total // K)\n    else:\n        print(total // K + 1)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = 0\n    for i in a:\n        b += i\n        if b % k == 0:\n            pass\n        else:\n            b += 1\n    if b % k == 0:\n        print(b // k)\n    else:\n        print(b // k + 1)", "t = int(input())\nfor j in range(t):\n    nk = [int(word) for word in input().split() if word.isdigit()]\n    eat = [int(word) for word in input().split() if word.isdigit()]\n    pieces = 0\n    for i in eat:\n        pieces += i\n        if pieces % nk[1] != 0:\n            pieces += 1\n    if pieces % nk[1] == 0:\n        print(pieces // nk[1])\n    else:\n        print(pieces // nk[1] + 1)", "import math\nfor t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    k = temp[1]\n    a = list(map(int, input().split()))\n    re = 0\n    count = 0\n    for i in range(n):\n        if re > 0:\n            re -= 1\n        if re >= a[i]:\n            re -= a[i]\n            continue\n        else:\n            a[i] -= re\n            re = 0\n            need = math.ceil(a[i] / k)\n            count += need\n            re = need * k\n            re -= a[i]\n            continue\n    print(count)", "import math\nfor t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    k = temp[1]\n    a = list(map(int, input().split()))\n    rem = 0\n    count = 0\n    for i in range(n):\n        if rem > 0:\n            rem -= 1\n        if rem >= a[i]:\n            rem -= a[i]\n            continue\n        else:\n            a[i] -= rem\n            rem = 0\n            need = math.ceil(a[i] / k)\n            count += need\n            rem = need * k\n            rem -= a[i]\n            continue\n    print(count)", "from sys import stdin\nT = int(stdin.readline().strip())\nwhile T > 0:\n    [N, K] = [int(n) for n in stdin.readline().strip().split()]\n    A = [int(n) for n in stdin.readline().strip().split()]\n    remaining = K\n    count = 0\n    for elem in A:\n        if remaining == K:\n            count += elem // K\n            elem %= K\n            if elem:\n                remaining = remaining - elem - 1\n        elif elem > remaining:\n            elem -= remaining\n            remaining = K\n            count += elem // K + 1\n            elem %= K\n            if elem:\n                remaining = remaining - elem - 1\n        else:\n            remaining -= elem\n            if remaining == 0:\n                remaining = K\n                count += 1\n            else:\n                remaining -= 1\n    if remaining != K:\n        count += 1\n    print(count)\n    T -= 1", "import math\nfor _ in range(int(input())):\n    (days, size) = input().split()\n    days = int(days)\n    size = int(size)\n    deList = []\n    deList = input().split()\n    package = 1\n    liCP = size\n    for day in range(days):\n        check = 0\n        todayPack = 0\n        tbE = int(deList[day])\n        if liCP < tbE:\n            tbE = tbE - liCP\n            liCP = 0\n            check = 0\n        else:\n            liCP = liCP - tbE\n            check = 1\n        if check == 0:\n            todayPack = int(math.ceil(tbE * 1.0 / size))\n            liCP = todayPack * size - tbE\n        if liCP > 0:\n            liCP -= 1\n        package += todayPack\n    print(package)", "import math\nt = int(input())\nwhile t > 0:\n    x = input().split()\n    n = int(x[0])\n    k = int(x[1])\n    x = input().split()\n    a = []\n    for i in range(n):\n        a.append(int(x[i]))\n    remain = 0\n    count = 0\n    for i in range(n):\n        if remain > a[i]:\n            remain = remain - a[i]\n        else:\n            a[i] = a[i] - remain\n            remain = 0\n            if a[i] > 0:\n                c = int(math.ceil(a[i] / k))\n                count = count + c\n                extra = int(a[i] % k)\n                if extra > 0:\n                    remain = k - extra\n        if remain > 0:\n            remain = remain - 1\n    print(count)\n    t = t - 1", "for T in range(int(input())):\n    S = input().split()\n    k = int(S[1])\n    left = 0\n    ans = 0\n    for S in input().split():\n        eat = int(S)\n        if left > 0:\n            left -= 1\n        if eat <= left:\n            left -= eat\n            continue\n        eat -= left\n        left = 0\n        ans += eat // k\n        if eat % k > 0:\n            left = k - eat % k\n            ans += 1\n    print(ans)", "for T in range(int(input())):\n    S = input().split()\n    k = int(S[1])\n    left = 0\n    ans = 0\n    for S in input().split():\n        eat = int(S)\n        if left > 0:\n            left -= 1\n        if eat <= left:\n            left -= eat\n            continue\n        eat -= left\n        left = 0\n        ans += eat // k\n        if eat % k > 0:\n            left = k - eat % k\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, k) = tuple([int(x) for x in input().split()])\n    ans = 0\n    left = 1\n    for i in input().split():\n        x = int(i)\n        if left > 0:\n            left -= 1\n        nu_pkgs = (x - left) // k\n        rem = (x - left) % k\n        left = 0\n        if rem != 0:\n            nu_pkgs += 1\n            left = k - rem\n        ans += nu_pkgs\n    print(ans)\n    t -= 1", "def solve(K, a):\n    fromYest = 0\n    toBuy = 0\n    for v in a:\n        eatFromTest = min(v, fromYest)\n        v -= eatFromTest\n        fromYest -= eatFromTest\n        (q, r) = divmod(v, K)\n        toBuy += q\n        if r > 0:\n            toBuy += 1\n            fromYest = K - r\n        if fromYest > 0:\n            fromYest -= 1\n    return toBuy\nT = int(input())\nfor _ in range(T):\n    (_, K) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(solve(K, a))", "import math\nt = int(input())\nwhile t > 0:\n    c = 0\n    (n, k) = [int(x) for x in input().split()]\n    a = []\n    a = [int(x) for x in input().split()]\n    for i in range(len(a)):\n        d = math.ceil(a[i] / k)\n        c = c + d\n        e = 0\n        if a[i] % k != 0 and a[i] % k != k - 1:\n            e = d * k - a[i] - 1\n        if i != len(a) - 1:\n            a[i + 1] = a[i + 1] - e\n    print(c)\n    t = t - 1", "import math\nt = int(input())\nwhile t:\n    inp = input().split()\n    n = int(inp[0])\n    k = int(inp[1])\n    (z, s, i) = (0, 0, 0)\n    inp1 = input().split()\n    while n:\n        x = int(inp1[i])\n        if z > 0:\n            z -= 1\n            s += 1\n        else:\n            pass\n        if z < x:\n            x1 = x\n            x1 -= z\n            y = math.ceil(x1 / k)\n            z += k * y\n            z -= x\n            s += x\n        else:\n            z -= x\n            s += x\n        i += 1\n        n -= 1\n    print(math.ceil(s / k))\n    t -= 1", "T = int(input())\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    x = list(map(int, input().split()))\n    ans = 0\n    bag = 0\n    for j in x:\n        if bag != 0:\n            if j <= bag:\n                bag = bag - j\n                if bag != 0:\n                    bag -= 1\n                continue\n            else:\n                j = j - bag\n                bag = 0\n        if j <= K:\n            ans += 1\n            bag = K - j\n            if bag != 0:\n                bag -= 1\n        else:\n            if j % K == 0:\n                p = j // K\n            else:\n                p = j // K + 1\n            ans = ans + p\n            bag = p * K - j\n            if bag != 0:\n                bag -= 1\n    print(ans)", "import math\ncases = int(input())\nfor case in range(0, cases):\n    (tourDays, piecesPerPackage) = [int(x) for x in input().split()]\n    dayPieces = [int(x) for x in input().split()]\n    piecesNeeded = 0\n    moldyPieces = 0\n    for day in range(0, tourDays):\n        piecesToEat = dayPieces[day]\n        if piecesToEat > 0:\n            piecesNeeded += piecesToEat + moldyPieces\n            moldyPieces = 0\n        if piecesNeeded % piecesPerPackage != 0:\n            moldyPieces += 1\n    packagesNeeded = math.ceil(piecesNeeded / piecesPerPackage)\n    print(packagesNeeded)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    x = k\n    c = 0\n    for i in range(n):\n        if arr[i] == x - 1 or arr[i] == x:\n            c += 1\n            x = k\n        elif arr[i] < x - 1:\n            x -= arr[i] + 1\n        else:\n            p = arr[i] - x\n            c += 1\n            y = p // k\n            c += y\n            z = k - p % k\n            if z == k:\n                x = k\n            elif z == 1:\n                c += 1\n                x = k\n            else:\n                x = z - 1\n    if x != k:\n        c += 1\n    print(c)", "import math\nt = int(input())\nfor it in range(t):\n    inp = input()\n    inp = inp.rstrip(' ')\n    (n, k) = map(int, inp.split(' '))\n    a = input()\n    a = a.rstrip(' ')\n    a = list(map(int, a.split(' ')))\n    rem = 0\n    count = 0\n    for i in range(n):\n        if rem <= a[i] and rem != 0:\n            a[i] = a[i] - rem\n            count = count + 1\n        elif rem != 0:\n            rem = rem - a[i] - 1\n            if rem <= 0:\n                rem = 0\n                count = count + 1\n            continue\n        if a[i] > k:\n            count = count + a[i] // k\n            a[i] = a[i] % k\n        if a[i] != 0:\n            rem = k - a[i] - 1\n            if rem <= 0:\n                rem = 0\n                count = count + 1\n        else:\n            rem = 0\n    if rem != 0:\n        count += 1\n    print(count)", "from math import ceil\ntests = int(input())\nfor t in range(tests):\n    (n, k) = [int(i) for i in input().split()]\n    a = [int(i) for i in input().split()]\n    packages = 1\n    remaining = k\n    for ai in a:\n        if ai > remaining:\n            ai -= remaining\n            toopen = ceil(ai / k)\n            packages += toopen\n            remaining = toopen * k - ai - 1\n        else:\n            remaining -= ai + 1\n        remaining = max(remaining, 0)\n    print(packages)", "import math\nt = int(input())\nfor j in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    arr = input().split()\n    arr = [int(i) for i in arr]\n    pack = 0\n    breadsleft = 0\n    for i in range(n):\n        new = arr[i]\n        if breadsleft > new:\n            breadsleft = breadsleft - new - 1\n        elif breadsleft == new:\n            breadsleft = 0\n        else:\n            new = new - breadsleft\n            pack = pack + math.ceil(new / k)\n            if new % k != 0:\n                breadsleft = k - 1 - new % k\n            else:\n                breadsleft = 0\n    print(pack)", "import math\n\ndef main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = map(int, input().split())\n        arr = list(map(int, input().split()))\n        sum = 0\n        for a in arr:\n            sum = sum + a\n            if sum % k != 0:\n                sum = sum + 1\n        print(math.ceil(sum / k))\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    a = input().split()\n    a = list(map(int, a))\n    left = 0\n    count = 0\n    for i in range(n):\n        if left < a[i]:\n            p = int((a[i] - left) / k)\n            q = p * k\n            if a[i] - left > q:\n                p = p + 1\n            count += p\n            left = p * k - a[i] + left\n            if left > 0:\n                left = left - 1\n        elif a[i] < left:\n            left = left - a[i] - 1\n        elif a[i] == left:\n            left = 0\n    print(count)", "T = int(input())\nwhile T:\n    (N, K) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    sum = 0\n    left = 0\n    for x in A:\n        sum += x\n        if x <= left:\n            left -= x\n        elif (x - left) % K:\n            left = K - (x - left) % K\n        else:\n            left = 0\n        if left:\n            left -= 1\n            sum += 1\n    if sum % K:\n        print(sum // K + 1)\n    else:\n        print(sum // K)\n    T -= 1", "import sys\n\ndef solve(n, k, A):\n    (bags, resto) = (0, 0)\n    for value in A:\n        if resto >= value:\n            resto -= value + 1\n            resto = max(resto, 0)\n            continue\n        value -= resto\n        resto = 0\n        bags += value // k\n        if value % k != 0:\n            bags += 1\n            resto = k - value % k - 1\n    return bags\ncasos = int(input())\nfor i in range(casos):\n    line = input()\n    (n, k) = tuple([int(x) for x in line.split()])\n    line = input()\n    A = [int(x) for x in line.split()]\n    answer = solve(n, k, A)\n    print(answer)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    a = input().split()\n    ans = 0\n    for i in range(n):\n        if ans % k != 0:\n            ans += 1\n        ans += int(a[i])\n    if ans % k == 0:\n        print(ans // k)\n    else:\n        print(ans // k + 1)", "import sys\nfrom itertools import *\nfrom pprint import pprint\n\ndef solve():\n    (N, K) = tuple((int(x) for x in sys.stdin.readline().split()))\n    AS = tuple((int(x) for x in sys.stdin.readline().split()))\n    assert len(AS) == N\n    total = 0\n    left = 0\n    for a in AS:\n        if left > 0:\n            left -= 1\n        total += a // K\n        a = a % K\n        while left < a:\n            a -= left\n            left = K\n            total += 1\n        left -= a\n    return total\n\ndef perr(*ns):\n    pprint(ns, stream=sys.stderr)\nfor _ in range(int(sys.stdin.readline())):\n    print(solve())", "t = int(input())\nfor it in range(t):\n    (n, k) = [int(word) for word in input().split()]\n    a = [int(word) for word in input().split()]\n    bcum = a[0]\n    for i in range(1, n):\n        if bcum % k == 0:\n            bcum += a[i]\n        else:\n            bcum += a[i] + 1\n    if bcum % k == 0:\n        print(bcum // k)\n    else:\n        print(bcum // k + 1)", "import math\na = int(input())\nwhile a > 0:\n    a -= 1\n    b = input()\n    (n, k) = [int(n) for n in b.split()]\n    c1 = input()\n    c = [int(n) for n in c1.split()]\n    (q, r) = (0, 0)\n    for i in range(n - 1):\n        q += c[i]\n        if q % k != 0:\n            q += 1\n    q += c[n - 1]\n    r = q / k\n    r = math.ceil(r)\n    print(r)", "def cal(a, n, k):\n    (now, nk) = (0, k)\n    for i in range(n):\n        tmp = a[i]\n        if nk != k:\n            if tmp <= nk:\n                nk -= tmp\n                nk -= 1\n                tmp = 0\n                if nk <= 0:\n                    nk = k\n                    now += 1\n            else:\n                tmp -= nk\n                nk = k\n                now += 1\n        if tmp != 0:\n            nd = tmp // k\n            now += nd\n            tmp %= k\n        if tmp != 0:\n            nk -= tmp\n            nk -= 1\n            tmp = 0\n    if nk != k:\n        now = now + 1\n    return now\ntimes = int(input())\nwhile times > 0:\n    times -= 1\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (l, r, mid) = (0, 100000000000, 0)\n    ans = cal(a, n, k)\n    print(ans)", "from copy import deepcopy as dc\nfrom math import ceil\ntCase = int(input())\nfor times in range(tCase):\n    (noOfDays, biscuitsInEACHPack) = [int(x) for x in input().split()]\n    listOfConsumption = [int(x) for x in input().split()]\n    (counter, leftOver) = (0, 0)\n    for item in listOfConsumption:\n        copyy = item\n        if leftOver >= copyy:\n            leftOver -= copyy\n        else:\n            if leftOver > 0:\n                copyy -= leftOver\n                leftOver = 0\n            counter += ceil(copyy / biscuitsInEACHPack)\n            leftOver = ceil(copyy / biscuitsInEACHPack) * biscuitsInEACHPack - copyy\n        if leftOver > 0:\n            leftOver -= 1\n    print(counter)", "t = int(input())\nfor i in range(t):\n    s = input().split()\n    n = int(s[0])\n    k = int(s[1])\n    count = 0\n    s = input().split()\n    d = int(s[0]) / k\n    if d.is_integer():\n        count += d\n        x = d * k - int(s[0])\n    else:\n        count += int(d) + 1\n        x = (int(d) + 1) * k - int(s[0])\n    l = x\n    j = 1\n    while j < n:\n        if l > 0:\n            l = l - 1\n        if l >= int(s[j]):\n            l = l - int(s[j])\n            j += 1\n            continue\n        l = int(s[j]) - l\n        d = l / k\n        if d.is_integer():\n            count += d\n            l = d * k - l\n        else:\n            count += int(d) + 1\n            l = (int(d) + 1) * k - l\n        j += 1\n    print(int(count))", "cas = int(input())\nfor i in range(cas):\n    (n, k) = map(int, input().split())\n    a = map(int, input().split())\n    last = co = 0\n    for i in a:\n        s = i\n        if last >= s:\n            last = last - s\n            s = 0\n        elif last < s:\n            s -= last\n            last = 0\n        co += int(s / k)\n        s = s % k\n        if s >= 1:\n            co += 1\n            last = k - s\n        if last >= 1:\n            last -= 1\n    print(int(co))", "import math\nt = int(input())\nfor ele in range(t):\n    (n, k) = input().split()\n    (n, k) = (int(n), int(k))\n    arr = input().split()\n    arr = [int(i) for i in arr]\n    (packets, leftOver) = (0, 0)\n    for i in range(n):\n        today = arr[i]\n        if leftOver > today:\n            leftOver = leftOver - today - 1\n        elif leftOver == today:\n            leftOver = 0\n        else:\n            today -= leftOver\n            packets += math.ceil(today / k)\n            leftOver = k - today % k - 1 if today % k != 0 else 0\n    print(packets)", "import math\ntc = int(input())\nans = []\nfor i in range(tc):\n    inp = input()\n    N = int(inp.split()[0])\n    K = int(inp.split()[1])\n    brd = [int(x) for x in input().split()]\n    res = 0\n    nbread = 0\n    for x in brd:\n        if x > res:\n            a = math.ceil((x - res) / K)\n            res = a * K - x + res\n            nbread = nbread + a\n        else:\n            res = res - x\n        if res != 0:\n            res = res - 1\n    ans.append(nbread)\nfor i in ans:\n    print(i)", "for q in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (extra, cnt) = (0, 0)\n    for i in range(len(a)):\n        temp = min(extra, a[i])\n        extra -= temp\n        a[i] -= temp\n        cnt += a[i] // m\n        x = a[i] % m\n        if x > 0:\n            cnt += 1\n            extra += m - x\n        if extra > 0:\n            extra -= 1\n    print(cnt)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    rem = 0\n    packs = 0\n    for i in range(n):\n        if rem > 0:\n            rem -= 1\n        if rem > a[i]:\n            rem -= a[i]\n            need = 0\n        else:\n            need = a[i] - rem\n            rem = 0\n        cur = math.ceil(need / k)\n        rem += max(cur * k - need, 0)\n        packs += cur\n    print(packs)", "t = int(input())\nfor j in range(t):\n    l = input().split()\n    n = int(l[0])\n    k = int(l[1])\n    ar = list(map(int, input().split()))\n    count = 0\n    t = k\n    for i in range(n):\n        while ar[i] != 0:\n            if ar[i] >= t:\n                if t == k:\n                    count += ar[i] // t\n                    ar[i] = ar[i] % t\n                    t = k\n                else:\n                    ar[i] -= t\n                    t = k\n                    count += 1\n            else:\n                t = t - ar[i]\n                ar[i] = 0\n                t = t - 1\n                if t <= 0:\n                    count += 1\n                    t = k\n                elif t > 0 and i == n - 1:\n                    count += 1\n    print(count)", "def main():\n    T = int(input())\n    for t in range(T):\n        (N, K) = [int(x) for x in input().split()]\n        A = [int(x) for x in input().split()]\n        ans = 0\n        remaining_from_last = 0\n        for x in A:\n            if remaining_from_last > 0:\n                m = min(remaining_from_last, x)\n                remaining_from_last -= m\n                x -= m\n            if x == 0:\n                if remaining_from_last > 0:\n                    remaining_from_last -= 1\n                continue\n            full_loaves_used = x // K\n            ans += full_loaves_used\n            x -= full_loaves_used * K\n            if x == 0:\n                continue\n            remaining_from_last = K - x - 1\n            ans += 1\n        print(ans)\nmain()"]