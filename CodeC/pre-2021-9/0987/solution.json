["T = int(input())\nfor i in range(T):\n    N = int(input())\n    lst = [int(x) for x in input().strip().split()]\n    prefix_sum = []\n    for j in lst:\n        if len(prefix_sum) > 0:\n            prefix_sum.append(prefix_sum[-1] + j)\n        else:\n            prefix_sum.append(j)\n    (U, V) = [int(x) - 1 for x in input().strip().split()]\n    j = U\n    temp = 0\n    sum_1 = 0\n    max_sub_1 = 0\n    while True:\n        sum_1 += lst[j]\n        temp += lst[j]\n        if temp < 0:\n            temp = 0\n        max_sub_1 = max(max_sub_1, temp)\n        if (j + 1) % N == V:\n            break\n        j += 1\n        j %= N\n    j = U\n    sum_2 = 0\n    max_sub_2 = 0\n    temp = 0\n    j -= 1\n    if j < 0:\n        j = N - 1\n    while True:\n        sum_2 += lst[j]\n        temp += lst[j]\n        if temp < 0:\n            temp = 0\n        max_sub_2 = max(max_sub_2, temp)\n        if j == V:\n            break\n        j -= 1\n        j %= N\n    ans1 = sum_1 + 2 * (sum_2 - max_sub_2)\n    ans2 = sum_2 + 2 * (sum_1 - max_sub_1)\n    print(min(ans1, ans2))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    lst = [int(x) for x in input().strip().split()]\n    prefix_sum = []\n    for j in lst:\n        if len(prefix_sum) > 0:\n            prefix_sum.append(prefix_sum[-1] + j)\n        else:\n            prefix_sum.append(j)\n    (U, V) = [int(x) - 1 for x in input().strip().split()]\n    j = U\n    temp = 0\n    sum_1 = 0\n    max_sub_1 = 0\n    while True:\n        sum_1 += lst[j]\n        temp += lst[j]\n        if temp < 0:\n            temp = 0\n        max_sub_1 = max(max_sub_1, temp)\n        if (j + 1) % N == V:\n            break\n        j += 1\n        j %= N\n    j = U\n    sum_2 = 0\n    max_sub_2 = 0\n    temp = 0\n    j -= 1\n    if j < 0:\n        j = N - 1\n    while True:\n        sum_2 += lst[j]\n        temp += lst[j]\n        if temp < 0:\n            temp = 0\n        max_sub_2 = max(max_sub_2, temp)\n        if j == V:\n            break\n        j -= 1\n        j %= N\n    ans1 = sum_1 + 2 * (sum_2 - max_sub_2)\n    ans2 = sum_2 + 2 * (sum_1 - max_sub_1)\n    print(min(ans1, ans2))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    lst = [int(x) for x in input().strip().split()]\n    prefix_sum = []\n    for j in lst:\n        if len(prefix_sum) > 0:\n            prefix_sum.append(prefix_sum[-1] + j)\n        else:\n            prefix_sum.append(j)\n    (U, V) = [int(x) - 1 for x in input().strip().split()]\n    j = U\n    temp = 0\n    sum_1 = 0\n    max_sub_1 = 0\n    while True:\n        sum_1 += lst[j]\n        temp += lst[j]\n        if temp < 0:\n            temp = 0\n        max_sub_1 = max(max_sub_1, temp)\n        if (j + 1) % N == V:\n            break\n        j += 1\n        j %= N\n    j = U\n    sum_2 = 0\n    max_sub_2 = 0\n    temp = 0\n    j -= 1\n    if j < 0:\n        j = N - 1\n    while True:\n        sum_2 += lst[j]\n        temp += lst[j]\n        if temp < 0:\n            temp = 0\n        max_sub_2 = max(max_sub_2, temp)\n        if j == V:\n            break\n        j -= 1\n        j %= N\n    ans1 = sum_1 + 2 * (sum_2 - max_sub_2)\n    ans2 = sum_2 + 2 * (sum_1 - max_sub_1)\n    print(min(ans1, ans2))", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    lst = [int(x) for x in input().strip().split()]\n    prefix_sum = []\n    for j in lst:\n        if len(prefix_sum) > 0:\n            prefix_sum.append(prefix_sum[-1] + j)\n        else:\n            prefix_sum.append(j)\n    (U, V) = [int(x) - 1 for x in input().strip().split()]\n    j = U\n    temp = 0\n    sum_1 = 0\n    max_sub_1 = 0\n    while True:\n        sum_1 += lst[j]\n        temp += lst[j]\n        if temp < 0:\n            temp = 0\n        max_sub_1 = max(max_sub_1, temp)\n        if (j + 1) % N == V:\n            break\n        j += 1\n        j %= N\n    j = U\n    sum_2 = 0\n    max_sub_2 = 0\n    temp = 0\n    j -= 1\n    if j < 0:\n        j = N - 1\n    while True:\n        sum_2 += lst[j]\n        temp += lst[j]\n        if temp < 0:\n            temp = 0\n        max_sub_2 = max(max_sub_2, temp)\n        if j == V:\n            break\n        j -= 1\n        j %= N\n    ans1 = sum_1 + 2 * (sum_2 - max_sub_2)\n    ans2 = sum_2 + 2 * (sum_1 - max_sub_1)\n    print(min(ans1, ans2))", "def maxsum(R):\n    curmax = 0\n    cursum = 0\n    curmin = 0\n    for v in R:\n        cursum += v\n        if cursum < curmin:\n            curmin = cursum\n        if cursum - curmin > curmax:\n            curmax = cursum - curmin\n    return curmax\n\ndef dist(R, x, y, z):\n    return sum(R[x:y]) + 2 * (sum(R[y:z]) - maxsum(R[y:z]))\n    s2 = 0\n    s3 = 0\n    curS = 0\n    xx = x + N\n    for i in range(x + N - 1, y - 1, -1):\n        curS += R[i]\n        if curS < s2:\n            s2 = curS\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    R = list(map(int, input().split()))\n    R.extend(R)\n    (x, y) = map(int, input().split())\n    x -= 1\n    y -= 1\n    print(min(dist(R, x, y, x + N), dist(R, y, x + N, y + N)))", "import sys\nT = int(input())\nfor z in range(0, T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    temp = list(map(int, input().split()))\n    start = temp[0] - 1\n    end = temp[1] - 1\n    counter1 = 1000000000000000000\n    sum1 = 0\n    for i in range(start, end):\n        sum1 = sum1 + arr[i]\n        if sum1 < counter1:\n            counter1 = sum1\n    halfArr = [0] * N\n    j = 0\n    for i in range(end, N):\n        halfArr[j] = arr[i]\n        j = j + 1\n    for i in range(0, start):\n        halfArr[j] = arr[i]\n        j = j + 1\n    M = j\n    min1 = [0] * N\n    min2 = [0] * N\n    sum = 0\n    x1 = 1000000000000000000\n    x2 = 1000000000000000000\n    for i in range(0, M):\n        sum = sum + halfArr[i]\n        if sum < x1:\n            x1 = sum\n        min1[i] = x1\n    sum = 0\n    for i in range(M - 1, -1, -1):\n        sum = sum + halfArr[i]\n        if sum < x2:\n            x2 = sum\n        min2[i] = x2\n    stuff = 1000000000000000000\n    for i in range(0, M - 1):\n        if min1[i] + min2[i + 1] < stuff:\n            stuff = min1[i] + min2[i + 1]\n    if x1 < stuff:\n        stuff = x1\n    if x2 < stuff:\n        stuff = x2\n    if stuff < 0:\n        sum1 = sum1 + stuff * 2\n    sum2 = 0\n    counter2 = 1000000000000000000\n    for i in range(start - 1, -1, -1):\n        sum2 = sum2 + arr[i]\n        if sum2 < counter2:\n            counter2 = sum2\n    for i in range(N - 1, end - 1, -1):\n        sum2 = sum2 + arr[i]\n        if sum2 < counter2:\n            counter2 = sum2\n    j = 0\n    for i in range(end - 1, start - 1, -1):\n        halfArr[j] = arr[i]\n        j = j + 1\n    M = j\n    x1 = 1000000000000000000\n    x2 = 1000000000000000000\n    sum = 0\n    for i in range(0, M):\n        sum = sum + halfArr[i]\n        if sum < x1:\n            x1 = sum\n        min1[i] = x1\n    sum = 0\n    for i in range(M - 1, -1, -1):\n        sum = sum + halfArr[i]\n        if sum < x2:\n            x2 = sum\n        min2[i] = x2\n    stuff = 1000000000000000000\n    for i in range(0, M - 1):\n        if min1[i] + min2[i + 1] < stuff:\n            stuff = min1[i] + min2[i + 1]\n    if x1 < stuff:\n        stuff = x1\n    if x2 < stuff:\n        stuff = x2\n    if stuff < 0:\n        sum2 = sum2 + stuff * 2\n    if sum1 > sum2:\n        print(sum2)\n    else:\n        print(sum1)", "T = int(input())\nanswers = []\nfor ii in range(T):\n    length = int(input())\n    data = list(map(int, input().split()))\n    (m, n) = map(int, input().split())\n    (s1, s2) = (0, 0)\n    for i in range(m, n):\n        s1 = s1 + data[i - 1]\n    for i in range(n - 1, m + length - 1):\n        s2 = s2 + data[i % length]\n    if s1 > s2:\n        s3 = s1 + 2 * s2\n    else:\n        s3 = 2 * s1 + s2\n    answer = min(s1, s2, s3)\n    end_forward = {}\n    end_forward[n] = 0\n    index = n\n    s = 0\n    (min1, min2) = (0, 0)\n    for i in range(n, length + m - 1):\n        tempindex = index\n        s = s + data[index - 1]\n        index = index % length + 1\n        if end_forward[tempindex] < s:\n            end_forward[index] = end_forward[tempindex]\n            if end_forward[index] < min1:\n                min1 = int(end_forward[index])\n        else:\n            end_forward[index] = s\n            if end_forward[index] < min1:\n                min1 = int(end_forward[index])\n    end_backward = {}\n    end_backward[n] = 0\n    s = 0\n    for i in range(n - 1, m, -1):\n        s = s + data[i - 1]\n        if end_backward[i + 1] < s:\n            end_backward[i] = end_backward[i + 1]\n            if end_backward[i] < min2:\n                min2 = int(end_backward[i])\n        else:\n            end_backward[i] = s\n            if end_backward[i] < min2:\n                min2 = int(end_backward[i])\n    s = 0\n    for i in range(m + 1, n):\n        s = s + data[i - 2]\n        ans = 2 * s + s2 + 2 * end_backward[i + 1]\n        if ans < answer:\n            answer = ans\n    index = m\n    s = 0\n    for i in range(length - (n - m + 1)):\n        index = index - 1\n        if index == 0:\n            index = length\n        index2 = index - 1\n        if index2 == 0:\n            index2 = length\n        s = s + data[index - 1]\n        ans = 2 * s + s1 + 2 * end_forward[index2]\n        if ans < answer:\n            answer = ans\n        answer = min(answer, s1 + 2 * min1, s2 + 2 * min2)\n    answers.append(answer)\nfor answer in answers:\n    print(answer)", "import sys\ncases = int(input())\nwhile cases > 0:\n    cases -= 1\n    lsize = int(input())\n    data = list(map(int, input().split()))\n    [start, end] = list(map(int, input().split()))\n    start -= 1\n    end -= 1\n    pt = start\n    cw = 0\n    ccw = 0\n    mincw = 0\n    maxcw = 0\n    maxccw = 0\n    minccw = 0\n    cw_max_till_now = 0\n    cw_max_ending_here = 0\n    ccw_max_till_now = 0\n    ccw_max_ending_here = 0\n    tobc = []\n    while pt != end:\n        cw += data[pt]\n        if mincw > cw:\n            mincw = cw\n        if maxcw < cw:\n            maxcw = cw\n        cw_max_ending_here = cw_max_ending_here + data[pt]\n        if cw_max_ending_here < 0:\n            cw_max_ending_here = 0\n        if cw_max_till_now < cw_max_ending_here:\n            cw_max_till_now = cw_max_ending_here\n        pt = pt + 1\n        if pt == lsize:\n            pt = 0\n    pt = start\n    maxcw = cw - maxcw\n    tobc.append(cw)\n    while pt != end:\n        if pt == 0:\n            ccw += data[lsize - 1]\n        else:\n            ccw += data[pt - 1]\n        if minccw > ccw:\n            minccw = ccw\n        if maxccw < ccw:\n            maxccw = ccw\n        if pt == 0:\n            ccw_max_ending_here = ccw_max_ending_here + data[lsize - 1]\n        else:\n            ccw_max_ending_here = ccw_max_ending_here + data[pt - 1]\n        if ccw_max_ending_here < 0:\n            ccw_max_ending_here = 0\n        if ccw_max_till_now < ccw_max_ending_here:\n            ccw_max_till_now = ccw_max_ending_here\n        pt = pt - 1\n        if pt == -1:\n            pt = lsize - 1\n    maxccw = ccw - maxccw\n    tobc.append(ccw)\n    tobc.append(2 * cw + ccw)\n    tobc.append(2 * ccw + cw)\n    tobc.append(2 * mincw + ccw)\n    tobc.append(2 * minccw + cw)\n    tobc.append(2 * maxccw + cw)\n    tobc.append(2 * maxcw + ccw)\n    tobc.append(ccw + 2 * (cw - cw_max_till_now))\n    tobc.append(cw + 2 * (ccw - ccw_max_till_now))\n    print(min(tobc))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (u, v) = map(int, input().split())\n    fwd = []\n    u -= 1\n    v -= 1\n    for i in range(u - 1, -1, -1):\n        fwd.append(a[i])\n    for i in range(n - 1, v - 1, -1):\n        fwd.append(a[i])\n    sumF = 0\n    for i in range(u, v):\n        sumF += a[i]\n    minmF = [0] * len(fwd)\n    minmR = [0] * len(fwd)\n    minmF[0] = fwd[0]\n    temp = fwd[0]\n    for i in range(1, len(fwd)):\n        temp += fwd[i]\n        if temp < minmF[i - 1]:\n            minmF[i] = temp\n        else:\n            minmF[i] = minmF[i - 1]\n    minmR[len(fwd) - 1] = fwd[len(fwd) - 1]\n    temp = fwd[len(fwd) - 1]\n    for i in range(len(fwd) - 2, -1, -1):\n        temp += fwd[i]\n        if temp < minmR[i + 1]:\n            minmR[i] = temp\n        else:\n            minmR[i] = minmR[i + 1]\n    minm = 0\n    for i in range(len(fwd) - 1):\n        if minmF[i] + minmR[i + 1] < minm:\n            minm = minmF[i] + minmR[i + 1]\n    minm = min(minm, minmR[0], minmF[len(fwd) - 1])\n    sumF = sumF + 2 * minm\n    sumR = 0\n    for i in range(len(fwd)):\n        sumR += fwd[i]\n    elem = v - u\n    minmF = [0] * elem\n    minmR = [0] * elem\n    minmF[0] = a[u]\n    temp = a[u]\n    for i in range(1, elem):\n        temp += a[u + i]\n        if temp < minmF[i - 1]:\n            minmF[i] = temp\n        else:\n            minmF[i] = minmF[i - 1]\n    minmR[elem - 1] = a[v - 1]\n    temp = a[v - 1]\n    for i in range(elem - 2, -1, -1):\n        temp += a[u + i]\n        if temp < minmR[i + 1]:\n            minmR[i] = temp\n        else:\n            minmR[i] = minmR[i + 1]\n    minm = 0\n    for i in range(elem - 1):\n        if minmF[i] + minmR[i + 1] < minm:\n            minm = minmF[i] + minmR[i + 1]\n    minm = min(minm, minmR[0], minmF[elem - 1])\n    sumR = sumR + 2 * minm\n    print(min(sumF, sumR))", "def main():\n    testCases = int(input())\n    for i in range(testCases):\n        solve()\n\ndef solve():\n    N = int(input())\n    node = [int(i) for i in input().strip().split(' ')]\n    (start, end) = [int(i) - 1 for i in input().strip().split(' ')]\n    i = start\n    path1 = []\n    while i != end:\n        path1.append(node[i])\n        i = nextIndex(i, N)\n    path2 = []\n    i = prevIndex(start, N)\n    while i != prevIndex(end, N):\n        path2.append(node[i])\n        i = prevIndex(i, N)\n    cost1 = getBestPath(path1, path2)\n    cost2 = getBestPath(path2, path1)\n    print(min(cost1, cost2))\n\ndef getBestPath(path1, path2):\n    directPathCost = sum(path2)\n    f1 = [0]\n    f1Sum = [0]\n    f2 = [0]\n    f2Sum = [0]\n    for pathCost in path1:\n        f1Sum.append(f1Sum[-1] + pathCost)\n    path1.reverse()\n    for pathCost in path1:\n        f2Sum.append(f2Sum[-1] + pathCost)\n    f1Sum = f1Sum[1:]\n    f2Sum = f2Sum[1:]\n    for pathCost in f1Sum:\n        f1.append(min(f1[-1], pathCost))\n    for pathCost in f2Sum:\n        f2.append(min(f2[-1], pathCost))\n    c = 0\n    for i in range(len(f2)):\n        c = min(c, f1[i] + f2[len(f2) - i - 1])\n    return 2 * c + directPathCost\n\ndef nextIndex(i, N):\n    return (i + 1) % N\n\ndef prevIndex(i, N):\n    return (i - 1 + N) % N\nmain()", "def maxSum(x):\n    total = 0\n    mn = 0\n    ret = 0\n    for k in x:\n        total += k\n        ret = max(ret, total - mn)\n        mn = min(mn, total)\n    return ret\n\ndef solve(a, b, x):\n    x0 = x[a:b]\n    x1 = x[b:] + x[:a]\n    s0 = sum(x0)\n    s1 = sum(x1)\n    q0 = maxSum(x0)\n    q1 = maxSum(x1)\n    ret0 = s0 + 2 * (s1 - q1)\n    ret1 = s1 + 2 * (s0 - q0)\n    return min(ret0, ret1)\nimport sys\nf = sys.stdin\nt = int(f.readline())\nfor i in range(t):\n    n = int(f.readline())\n    r = list(map(int, f.readline().split()))\n    (a, b) = map(int, f.readline().split())\n    print(solve(a - 1, b - 1, r))", "def path(s, e, l, n):\n    a = 0\n    while s != e:\n        a += l[s]\n        s += 1\n        s = s % n\n    return a\n\ndef minpath(s, e, l, n):\n    l1 = [0] * (n + 1)\n    a = 0\n    k = 0\n    (k1, k2) = (s, e)\n    while s != e:\n        a += l[s]\n        k = min(a, k)\n        s = (s + 1) % n\n        l1[s] += k\n    (e, s) = (k1, k2)\n    a = 0\n    k = 0\n    while s != e:\n        s -= 1\n        s = s % n\n        a += l[s]\n        k = min(a, k)\n        l1[s] += k\n    return 2 * min(0, min(l1))\ntest = int(input())\nwhile test != 0:\n    test -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    (s, e) = map(int, input().split())\n    s -= 1\n    e -= 1\n    print(min(path(s, e, l, n) + minpath(e, s, l, n), path(e, s, l, n) + minpath(s, e, l, n)))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    r = []\n    r = map(int, input().split())\n    r = list(r)\n    (s, e) = map(int, input().split())\n    s = s - 1\n    e = e - 1\n    tot1 = 100000000\n    tot2 = 100000000\n    tot3 = 100000000\n    tot4 = 100000000\n    tot5 = 100000000\n    tot6 = 100000000\n    x1 = 0\n    cir1 = 0\n    c1 = dict()\n    x2 = 0\n    cir2 = 0\n    c2 = dict()\n    x3 = 0\n    cir3 = 0\n    c3 = dict()\n    x4 = 0\n    cir4 = 0\n    c4 = dict()\n    i = s\n    c1[i] = 0\n    while i != e:\n        x1 = x1 + r[i]\n        if x1 < tot1 and x1 <= 0:\n            tot1 = x1\n            cir1 = 2 * tot1\n        i = (i + 1) % n\n        c1[i] = cir1\n    i = s\n    c2[i] = 0\n    while i != e:\n        j = (i - 1 + n) % n\n        x2 = x2 + r[j]\n        if x2 < tot2 and x2 <= 0:\n            tot2 = x2\n            cir2 = 2 * tot2\n        i = (i - 1 + n) % n\n        c2[i] = cir2\n    i = e\n    c3[i] = 0\n    while i != s:\n        x3 = x3 + r[i]\n        if x3 < tot3 and x3 <= 0:\n            tot3 = x3\n            cir3 = 2 * tot3\n        i = (i + 1) % n\n        c3[i] = cir3\n    i = e\n    c4[i] = 0\n    while i != s:\n        j = (i - 1 + n) % n\n        x4 = x4 + r[j]\n        if x4 < tot4 and x4 <= 0:\n            tot4 = x4\n            cir4 = 2 * tot4\n        i = (i - 1 + n) % n\n        c4[i] = cir4\n    i = s\n    while i != e:\n        x = min(c1[i], c4[i], c1[i] + c4[i])\n        if tot5 > x:\n            tot5 = x\n        i = (i + 1) % n\n    i = s\n    while i != e:\n        x = min(c2[i], c3[i], c3[i] + c2[i])\n        if tot6 > x:\n            tot6 = x\n        i = (i - 1 + n) % n\n    print(min(x2 + tot5, x1 + tot6))", "def calcDist(s, R):\n    n = len(R)\n    dist1 = [[0 for _ in range(n)] for _ in range(2)]\n    (i, j) = ((s + 1) % n, (s - 1) % n)\n    while i != s:\n        dist1[0][i] = dist1[0][(i - 1) % n] + R[(i - 1) % n]\n        dist1[1][j] = dist1[1][(j + 1) % n] + R[j]\n        i = (i + 1) % n\n        j = (j - 1) % n\n    dist1[0][s] = dist1[1][s] = sum(R)\n    return dist1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    R = [int(i) for i in input().split()]\n    (s, e) = [int(i) for i in input().split()]\n    s -= 1\n    e -= 1\n    dist1 = calcDist(s, R)\n    dist2 = calcDist(e, R)\n    ans = min(dist1[0][e], dist1[1][e])\n    i = (s + 1) % n\n    prev = R[s]\n    maxsl = R[s]\n    while i != e:\n        cur = max(R[i], R[i] + prev)\n        prev = cur\n        maxsl = max(maxsl, cur)\n        i = (i + 1) % n\n    ans = min(ans, dist1[1][e] + 2 * dist1[0][e] - 2 * maxsl)\n    i = (s - 1) % n\n    prev = R[i % n]\n    maxsl = prev\n    while i != e:\n        cur = max(R[(i - 1) % n], R[(i - 1) % n] + prev)\n        prev = cur\n        maxsl = max(maxsl, cur)\n        i = (i - 1) % n\n    ans = min(ans, dist1[0][e] + 2 * dist1[1][e] - 2 * maxsl)\n    i = s - 1\n    for i in range(n):\n        a = min(dist1[0][i], dist1[1][i]) + min(dist2[0][i], dist2[1][i])\n        ans = min(ans, a)\n    print(ans)", "def getbest(ar):\n    (psum, ssum) = (list(ar), list(ar))\n    (pref, suff) = ([0] * len(ar), [0] * len(ar))\n    pref[0] = min(0, ar[0])\n    suff[len(ar) - 1] = min(0, ar[len(ar) - 1])\n    for i in range(1, len(ar)):\n        psum[i] += psum[i - 1]\n        pref[i] = min(pref[i - 1], psum[i])\n    for (i, e) in reversed(list(enumerate(ar))):\n        if i < len(ar) - 1:\n            ssum[i] += ssum[i + 1]\n            suff[i] = min(suff[i + 1], ssum[i])\n    ret = min(0, suff[0], pref[len(ar) - 1])\n    for i in range(len(ar) - 1):\n        ret = min(ret, pref[i] + suff[i + 1])\n    return ret\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    A = list(map(int, input().split()))\n    (st, en) = map(int, input().split())\n    allsum = sum(A)\n    st -= 1\n    en -= 1\n    ar_cw = []\n    i = st\n    while i != en:\n        ar_cw.append(A[i])\n        i = (i + 1) % n\n    ar_ccw = []\n    i = st\n    while i != en:\n        i = (i + n - 1) % n\n        ar_ccw.append(A[i])\n    cwsum = sum(ar_cw)\n    ccwsum = sum(ar_ccw)\n    bestcw = getbest(ar_cw)\n    bestccw = getbest(ar_ccw)\n    if st == en:\n        print(min(0, allsum * 2))\n    else:\n        print(min(cwsum + 2 * bestccw, ccwsum + 2 * bestcw, min(cwsum, ccwsum) + allsum))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (start, end) = map(int, input().split())\n    start -= 1\n    end -= 1\n    (fr, fl) = (0, 0)\n    i = start\n    while i != end:\n        fr += arr[i]\n        i = i + 1\n    i = end\n    while i != start:\n        fl += arr[i]\n        i = (i + 1) % n\n    lent = end - start\n    fr_sum = [0] * (lent + 1)\n    fr_mini = [0] * (lent + 1)\n    fr_sum[0] = 0\n    fr_mini[0] = 0\n    for i in range(1, lent + 1):\n        fr_sum[i] = fr_sum[i - 1] + 2 * arr[start + i - 1]\n        fr_mini[i] = min(fr_mini[i - 1], fr_sum[i])\n    br_sum = [0] * (lent + 1)\n    br_mini = [0] * (lent + 1)\n    br_sum[lent] = 0\n    br_mini[lent] = 0\n    for i in range(lent - 1, -1, -1):\n        br_sum[i] = br_sum[i + 1] + 2 * arr[start + i]\n        br_mini[i] = min(br_mini[i + 1], br_sum[i])\n    bent = n - lent\n    fl_sum = [0] * (bent + 1)\n    fl_mini = [0] * (bent + 1)\n    fl_sum[0] = 0\n    fl_mini[0] = 0\n    for i in range(1, bent + 1):\n        fl_sum[i] = fl_sum[i - 1] + 2 * arr[(start - i + n) % n]\n        fl_mini[i] = min(fl_mini[i - 1], fl_sum[i])\n    bl_sum = [0] * (bent + 1)\n    bl_mini = [0] * (bent + 1)\n    bl_sum[bent] = 0\n    bl_mini[bent] = 0\n    for i in range(bent - 1, -1, -1):\n        bl_sum[i] = bl_sum[i + 1] + 2 * arr[(start - (i + 1) + n) % n]\n        bl_mini[i] = min(bl_mini[i + 1], bl_sum[i])\n    miniall = 0\n    for i in range(lent + 1):\n        miniall = min(miniall, fr_mini[i] + br_mini[i])\n    fl += miniall\n    miniall = 0\n    for i in range(bent + 1):\n        miniall = min(miniall, fl_mini[i] + bl_mini[i])\n    fr += miniall\n    print(min(fl, fr))", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    (start, end) = map(int, input().split())\n    start -= 1\n    end -= 1\n    (fr, fl) = (0, 0)\n    i = start\n    while i != end:\n        fr += arr[i]\n        i = i + 1\n    i = end\n    while i != start:\n        fl += arr[i]\n        i = (i + 1) % n\n    lent = end - start\n    fr_sum = [0] * (lent + 1)\n    fr_mini = [0] * (lent + 1)\n    fr_sum[0] = 0\n    fr_mini[0] = 0\n    for i in range(1, lent + 1):\n        fr_sum[i] = fr_sum[i - 1] + 2 * arr[start + i - 1]\n        fr_mini[i] = min(fr_mini[i - 1], fr_sum[i])\n    br_sum = [0] * (lent + 1)\n    br_mini = [0] * (lent + 1)\n    br_sum[lent] = 0\n    br_mini[lent] = 0\n    for i in range(lent - 1, -1, -1):\n        br_sum[i] = br_sum[i + 1] + 2 * arr[start + i]\n        br_mini[i] = min(br_mini[i + 1], br_sum[i])\n    bent = n - lent\n    fl_sum = [0] * (bent + 1)\n    fl_mini = [0] * (bent + 1)\n    fl_sum[0] = 0\n    fl_mini[0] = 0\n    for i in range(1, bent + 1):\n        fl_sum[i] = fl_sum[i - 1] + 2 * arr[(start - i + n) % n]\n        fl_mini[i] = min(fl_mini[i - 1], fl_sum[i])\n    bl_sum = [0] * (bent + 1)\n    bl_mini = [0] * (bent + 1)\n    bl_sum[bent] = 0\n    bl_mini[bent] = 0\n    for i in range(bent - 1, -1, -1):\n        bl_sum[i] = bl_sum[i + 1] + 2 * arr[(start - (i + 1) + n) % n]\n        bl_mini[i] = min(bl_mini[i + 1], bl_sum[i])\n    miniall = 0\n    for i in range(lent + 1):\n        miniall = min(miniall, fr_mini[i] + br_mini[i])\n    fl += miniall\n    miniall = 0\n    for i in range(bent + 1):\n        miniall = min(miniall, fl_mini[i] + bl_mini[i])\n    fr += miniall\n    print(min(fl, fr))", "t = int(input())\nfor q in range(0, t):\n    n = int(input())\n    str_arr = input().split()\n    arr = [int(num) for num in str_arr]\n    (st, en) = input().split()\n    st = int(st)\n    en = int(en)\n    st = st - 1\n    en = en - 1\n    s1 = 0\n    s2 = 0\n    tmp = st\n    j = (tmp + n - 1) % n\n    k = st\n    v1 = []\n    v2 = []\n    vis = []\n    for i in range(0, n):\n        vis.append(0)\n    while True:\n        vis[k] = 1\n        v1.append(arr[k])\n        s1 += arr[k]\n        k = (k + 1 + n) % n\n        if k == en:\n            break\n    while True:\n        if vis[j] == 1:\n            break\n        v2.append(arr[j])\n        s2 += arr[j]\n        j = (j - 1 + n) % n\n    if len(v1) == 0:\n        print(s2)\n        continue\n    if len(v2) == 0:\n        print(s1)\n        continue\n    dp1 = []\n    dp2 = []\n    dp3 = []\n    dp4 = []\n    for i in range(0, n):\n        dp1.append(0)\n        dp2.append(0)\n        dp3.append(0)\n        dp4.append(0)\n    t1 = 0\n    t2 = 0\n    dp1[0] = min(0, v1[0])\n    t1 = v1[0]\n    for i in range(1, len(v1)):\n        t1 += v1[i]\n        dp1[i] = min(dp1[i - 1], t1)\n    dp2[len(v1) - 1] = min(0, v1[len(v1) - 1])\n    t2 = v1[len(v1) - 1]\n    for i in range(len(v1) - 2, 0, -1):\n        t2 += v1[i]\n        dp2[i] = min(dp2[i + 1], t2)\n    b1 = 0\n    b1 = min(0, dp2[0])\n    for i in range(0, len(v1) - 1):\n        b1 = min(b1, dp1[i] + dp2[i + 1])\n    b1 = min(b1, dp1[len(v1) - 1])\n    ans1 = s2 + 2 * b1\n    t1 = 0\n    t2 = 0\n    dp3[0] = min(0, v2[0])\n    t1 = v2[0]\n    for i in range(1, len(v2)):\n        t1 += v2[i]\n        dp3[i] = min(dp3[i - 1], t1)\n    dp4[len(v2) - 1] = min(0, v2[len(v2) - 1])\n    t2 = v2[len(v2) - 1]\n    for i in range(len(v2) - 2, 0, -1):\n        t2 += v2[i]\n        dp4[i] = min(dp4[i + 1], t2)\n    b1 = 0\n    b1 = min(0, dp4[0])\n    for i in range(0, len(v2) - 1):\n        b1 = min(b1, dp3[i] + dp4[i + 1])\n    b1 = min(b1, dp3[len(v1) - 1])\n    ans2 = s1 + 2 * b1\n    ans = min(ans1, ans2)\n    print(ans)", "T = int(input().strip())\nfor i in range(T):\n    N = int(input().strip())\n    R = list(map(int, input().strip().split(' ')))\n    [start, end] = map(int, input().strip().split(' '))\n    end = end - 1\n    left = start - 1\n    goleft = 0\n    goleft_back = 0\n    end_left_back = 0\n    start_end_back = 0\n    while left % N != end:\n        goleft += R[left % N]\n        left += 1\n    left = start - 1\n    goleft_1 = 0\n    while left % N != end:\n        goleft_1 += R[left % N]\n        goleft_back = min(goleft_1, goleft_back)\n        end_left_back = goleft - goleft_1\n        start_end_back = min(start_end_back, goleft_back + end_left_back)\n        left += 1\n    right = start - 1\n    goright = 0\n    goright_back = 0\n    end_right_back = 0\n    start_end_back_right = 0\n    while right % N != end:\n        goright += R[(right - 1) % N]\n        right -= 1\n    right = start - 1\n    goright_1 = 0\n    while right % N != end:\n        goright_1 += R[right - 1 % N]\n        goright_back = min(goright_1, goright_back)\n        end_right_back = goright - goright_1\n        start_end_back_right = min(start_end_back_right, goright_back + end_right_back)\n        right -= 1\n    SS1 = goleft + 2 * start_end_back_right\n    SS2 = goright + 2 * start_end_back\n    SS3 = 2 * goleft + goright\n    SS4 = 2 * goright + goleft\n    print(str(min([SS1, SS2, SS3, SS4])))", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    a = []\n    b = []\n    c = []\n    x = []\n    y = []\n    a.extend(map(int, input().split()))\n    (s, e) = map(int, input().split())\n    s1 = sum(a[s - 1:e - 1])\n    s2 = sum(a[0:s - 1]) + sum(a[e - 1:])\n    if s != 1:\n        b.extend(a[e - 2:s - 2:-1])\n    else:\n        b.extend(a[e - 2:s - 1:-1])\n        b.append(a[0])\n    c.extend(a[e - 1:n])\n    c.extend(a[0:s - 1])\n    m = 0\n    mi = 0\n    for j in range(e - s):\n        if mi + b[j] <= m:\n            m = mi + b[j]\n        mi = mi + b[j]\n        x.append(m)\n    m = 0\n    mi = 0\n    for j in range(n - e + s):\n        if mi + c[j] <= m:\n            m = mi + c[j]\n        mi = mi + c[j]\n        y.append(m)\n    m1 = s1\n    k1 = s1\n    for j in range(e - s):\n        if m1 + x[j] - b[j] <= k1:\n            k1 = m1 + x[j] - b[j]\n        m1 = m1 - b[j]\n    m2 = s2\n    k2 = s2\n    for j in range(n - e + s):\n        if m2 + y[j] - c[j] <= k2:\n            k2 = m2 + y[j] - c[j]\n        m2 = m2 - c[j]\n    ans.append(min(s1, s2, s1 + 2 * k2, s2 + 2 * k1))\nfor i in ans:\n    print(i)", "T = int(input().strip())\nfor i in range(T):\n    N = int(input().strip())\n    R = list(map(int, input().strip().split(' ')))\n    [start, end] = map(int, input().strip().split(' '))\n    end = end - 1\n    left = start - 1\n    goleft = 0\n    goleft_back = 0\n    end_left_back = 0\n    start_end_back = 0\n    while left % N != end:\n        goleft += R[left % N]\n        left += 1\n    left = start - 1\n    goleft_1 = 0\n    while left % N != end:\n        goleft_1 += R[left % N]\n        goleft_back = min(goleft_1, goleft_back)\n        end_left_back = goleft - goleft_1\n        start_end_back = min(start_end_back, goleft_back + end_left_back)\n        left += 1\n    right = start - 1\n    goright = 0\n    goright_back = 0\n    end_right_back = 0\n    start_end_back_right = 0\n    while right % N != end:\n        goright += R[(right - 1) % N]\n        right -= 1\n    right = start - 1\n    goright_1 = 0\n    while right % N != end:\n        goright_1 += R[right - 1 % N]\n        goright_back = min(goright_1, goright_back)\n        end_right_back = goright - goright_1\n        start_end_back_right = min(start_end_back_right, goright_back + end_right_back)\n        right -= 1\n    SS1 = goleft + 2 * start_end_back_right\n    SS2 = goright + 2 * start_end_back\n    SS3 = 2 * goleft + goright\n    SS4 = 2 * goright + goleft\n    print(min([SS1, SS2, SS3, SS4]))", "T = int(input().strip())\nfor i in range(T):\n    N = int(input().strip())\n    R = list(map(int, input().strip().split(' ')))\n    [start, end] = map(int, input().strip().split(' '))\n    end = end - 1\n    left = start - 1\n    goleft = 0\n    goleft_back = 0\n    end_left_back = 0\n    start_end_back = 0\n    while left % N != end:\n        goleft += R[left % N]\n        left += 1\n    left = start - 1\n    goleft_1 = 0\n    while left % N != end:\n        goleft_1 += R[left % N]\n        goleft_back = min(goleft_1, goleft_back)\n        end_left_back = goleft - goleft_1\n        start_end_back = min(start_end_back, goleft_back + end_left_back)\n        left += 1\n    right = start - 1\n    goright = 0\n    goright_back = 0\n    end_right_back = 0\n    start_end_back_right = 0\n    while right % N != end:\n        goright += R[(right - 1) % N]\n        right -= 1\n    right = start - 1\n    goright_1 = 0\n    while right % N != end:\n        goright_1 += R[right - 1 % N]\n        goright_back = min(goright_1, goright_back)\n        end_right_back = goright - goright_1\n        start_end_back_right = min(start_end_back_right, goright_back + end_right_back)\n        right -= 1\n    SS1 = goleft + 2 * start_end_back_right\n    SS2 = goright + 2 * start_end_back\n    SS3 = 2 * goleft + goright\n    SS4 = 2 * goright + goleft\n    print(min([SS1, SS2, SS3, SS4]))", "for t in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    (start, finish) = [int(i) - 1 for i in input().split()]\n    bestrightsstart = [0]\n    bestleftsstart = [0]\n    bestrightsfinish = [0]\n    bestleftsfinish = [0]\n    s = 0\n    best = 0\n    for i in range(start, finish):\n        s += a[i]\n        best = min(best, s)\n        bestrightsstart.append(best)\n    lefttorightsum = s\n    s = 0\n    best = 0\n    for i in range(finish - 1, start - 1, -1):\n        s += a[i]\n        best = min(best, s)\n        bestleftsfinish.append(best)\n    s = 0\n    best = 0\n    for i in range(start - 1, finish - n - 1, -1):\n        s += a[i % n]\n        best = min(best, s)\n        bestleftsstart.append(best)\n    righttoleftsum = s\n    s = 0\n    best = 0\n    for i in range(finish, start + n):\n        s += a[i % n]\n        best = min(best, s)\n        bestrightsfinish.append(best)\n    bestleftsfinish.reverse()\n    bestrightsfinish.reverse()\n    outersum = [i + j for (i, j) in zip(bestleftsstart, bestrightsfinish)]\n    innersum = [i + j for (i, j) in zip(bestrightsstart, bestleftsfinish)]\n    (minouter, mininner) = (min(outersum), min(innersum))\n    print(min(lefttorightsum + minouter * 2, righttoleftsum + mininner * 2))"]