["import queue\nupper = queue.PriorityQueue()\nunder = queue.PriorityQueue()\nn = int(input())\nnreview = 0\nfor _ in range(n):\n    s = input()\n    if len(s) != 1:\n        (a, b) = map(int, s.split())\n        nreview += 1\n        if nreview < 3:\n            under.put(-b)\n        elif nreview == 3:\n            under.put(-b)\n            upper.put(-under.get())\n        else:\n            c = upper.queue[0]\n            d = -under.queue[0]\n            if upper.qsize() == nreview // 3:\n                if c >= b:\n                    under.put(-b)\n                else:\n                    upper.get()\n                    upper.put(b)\n                    under.put(-c)\n            elif d > b:\n                upper.put(-under.get())\n                under.put(-b)\n            else:\n                upper.put(b)\n    elif nreview < 3:\n        print('No reviews yet')\n    else:\n        print(upper.queue[0])", "import queue\nupper = queue.PriorityQueue()\nunder = queue.PriorityQueue()\nn = int(input())\nnreview = 0\nfor _ in range(n):\n    s = input()\n    if len(s) != 1:\n        (a, b) = map(int, s.split())\n        nreview += 1\n        if nreview < 3:\n            under.put(-b)\n        elif nreview == 3:\n            under.put(-b)\n            upper.put(-under.get())\n        else:\n            c = upper.queue[0]\n            d = -under.queue[0]\n            if upper.qsize() == nreview // 3:\n                if c >= b:\n                    under.put(-b)\n                else:\n                    upper.get()\n                    upper.put(b)\n                    under.put(-c)\n            elif d > b:\n                upper.put(-under.get())\n                under.put(-b)\n            else:\n                upper.put(b)\n    elif nreview < 3:\n        print('No reviews yet')\n    else:\n        print(upper.queue[0])", "import heapq\nimport sys\n\ndef FILE_IO():\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n\ndef solve():\n    N = int(input())\n    no_reviews = 0\n    min_heap = []\n    max_heap = []\n    for _ in range(N):\n        line = input()\n        if line[0] == '1':\n            x = int(line[2:])\n            no_reviews += 1\n            if len(min_heap) != 0 and min_heap[0] < x:\n                heapq.heappush(min_heap, x)\n                heapq.heappush(max_heap, -heapq.heappop(min_heap))\n            else:\n                heapq.heappush(max_heap, -x)\n            if no_reviews % 3 == 0:\n                heapq.heappush(min_heap, -heapq.heappop(max_heap))\n        elif len(min_heap) == 0:\n            print('No reviews yet')\n        else:\n            print(min_heap[0])\nsolve()", "from heapq import *\nn = 0\n(minheap, maxheap) = ([], [])\nfor _ in range(int(input())):\n    arr = list(map(int, input().split()))\n    if len(arr) == 2:\n        heappush(minheap, arr[1])\n        n += 1\n        if len(minheap) > n // 3:\n            heappush(maxheap, -heappop(minheap))\n        elif -maxheap[0] > minheap[0]:\n            heappush(minheap, -heappop(maxheap))\n            heappush(maxheap, -heappop(minheap))\n    elif n < 3:\n        print('No reviews yet')\n    else:\n        print(minheap[0])", "from heapq import *\nn = 0\n(minheap, maxheap) = ([], [])\nfor _ in range(int(input())):\n    arr = list(map(int, input().split()))\n    if len(arr) == 2:\n        heappush(minheap, arr[1])\n        n += 1\n        if len(minheap) > n // 3:\n            heappush(maxheap, -heappop(minheap))\n        elif -maxheap[0] > minheap[0]:\n            heappush(minheap, -heappop(maxheap))\n            heappush(maxheap, -heappop(minheap))\n    elif n < 3:\n        print('No reviews yet')\n    else:\n        print(minheap[0])", "import heapq\nh = []\not = []\nc = 0\nn = int(input())\nfor i in range(n):\n    lis = [int(o) for o in input().split()]\n    a = lis[0]\n    if a == 1:\n        b = lis[1]\n        c += 1\n        if ot and ot[0] < b:\n            heapq.heappush(h, -heapq.heappop(ot))\n            heapq.heappush(ot, b)\n        else:\n            heapq.heappush(h, -b)\n        if c % 3 == 0:\n            heapq.heappush(ot, -heapq.heappop(h))\n    else:\n        d = c // 3\n        if d == 0:\n            print('No reviews yet')\n        else:\n            print(ot[0])", "import heapq\nn = int(input())\nh = []\nlength = 0\npopTemp = []\nwhile n > 0:\n    rawInput = list(map(int, input().split()))\n    if rawInput[0] == 1:\n        length += 1\n        val = rawInput[1]\n        if length > 3 and h[0] < val and (length % 3 != 0):\n            val = heapq.heapreplace(h, val)\n        heapq.heappush(popTemp, -1 * val)\n        if length % 3 == 0:\n            heapq.heappush(h, -1 * heapq.heappop(popTemp))\n    elif length >= 3:\n        print(h[0])\n    else:\n        print('No reviews yet', end='\\n')\n    n -= 1", "import heapq\nn = int(input())\nres = []\nres1 = []\nct = 0\nheapq.heapify(res)\nheapq.heapify(res1)\nfor i in range(n):\n    lis = list(map(int, input().split()))\n    if len(lis) == 1:\n        j = ct // 3\n        if j == 0:\n            print('No reviews yet')\n        else:\n            print(res[0])\n    else:\n        x = lis[1]\n        heapq.heappush(res1, -x)\n        ct += 1\n        j = ct // 3\n        if j == 0:\n            continue\n        if len(res) == j:\n            if x > res[0]:\n                z = heapq.heappop(res)\n                heapq.heappush(res, x)\n                heapq.heappop(res1)\n                heapq.heappush(res1, -z)\n        else:\n            m = heapq.heappop(res1)\n            heapq.heappush(res, -m)", "import heapq\nn = int(input())\nsize = 0\n(minheap, maxheap) = ([], [])\nfor i in range(n):\n    query = input()\n    if query == '2':\n        if size < 3:\n            print('No reviews yet')\n        else:\n            print(minheap[0])\n    else:\n        (x, val) = query.split()\n        val = int(val)\n        size += 1\n        heapq.heappush(maxheap, -val)\n        if size >= 3:\n            if size % 3 == 0:\n                heapq.heappush(minheap, -heapq.heappop(maxheap))\n            elif -maxheap[0] > minheap[0]:\n                replaced_val = heapq.heapreplace(minheap, -heapq.heappop(maxheap))\n                heapq.heappush(maxheap, -replaced_val)", "import heapq\nimport math\n\nclass RestaurantRating:\n\n    def process(self):\n        n = int(input())\n        heap_max = []\n        heap_min = []\n        for _ in range(n):\n            data = input()\n            if data[0] == '1':\n                v = int(data.split()[1])\n                if len(heap_min) > 0 and heap_min[0] < v:\n                    temp = heap_min[0]\n                    heapq.heappop(heap_min)\n                    heapq.heappush(heap_min, v)\n                    v = temp\n                heapq.heappush(heap_max, -v)\n                if (len(heap_max) + len(heap_min)) % 3 == 0:\n                    heapq.heappush(heap_min, -heap_max[0])\n                    heapq.heappop(heap_max)\n                elif len(heap_min) > 0 and -heap_max[0] > heap_min[0]:\n                    (max_arr, min_top_k) = (-heap_max[0], heap_min[0])\n                    heapq.heappop(heap_max)\n                    heapq.heappop(heap_min)\n                    heapq.heappush(heap_max, -min_top_k)\n                    heapq.heappush(heap_min, max_arr)\n            elif len(heap_min) == 0:\n                print('No reviews yet')\n            else:\n                print(heap_min[0])\nrestaurantRate = RestaurantRating()\nrestaurantRate.process()", "import heapq\nimport math\n\nclass RestaurantRating:\n\n    def process(self):\n        n = int(input())\n        heap_max = []\n        heap_min = []\n        for _ in range(n):\n            data = input()\n            if data[0] == '1':\n                v = int(data.split()[1])\n                if len(heap_min) > 0 and heap_min[0] < v:\n                    temp = heap_min[0]\n                    heapq.heappop(heap_min)\n                    heapq.heappush(heap_min, v)\n                    v = temp\n                heapq.heappush(heap_max, -v)\n                if (len(heap_max) + len(heap_min)) % 3 == 0:\n                    heapq.heappush(heap_min, -heap_max[0])\n                    heapq.heappop(heap_max)\n                elif len(heap_min) > 0 and -heap_max[0] > heap_min[0]:\n                    (max_arr, min_top_k) = (-heap_max[0], heap_min[0])\n                    heapq.heappop(heap_max)\n                    heapq.heappop(heap_min)\n                    heapq.heappush(heap_max, -min_top_k)\n                    heapq.heappush(heap_min, max_arr)\n            elif len(heap_min) == 0:\n                print('No reviews yet')\n            else:\n                print(heap_min[0])\nrestaurantRate = RestaurantRating()\nrestaurantRate.process()", "import heapq\n\ndef method_2():\n    N = int(input())\n    min_heap = []\n    max_heap = []\n    size_post = 0\n    for _ in range(N):\n        query = input()\n        if query == '2':\n            if size_post > 2:\n                print(min_heap[0])\n            else:\n                print('No reviews yet')\n        else:\n            (op, val_string) = query.split()\n            val = int(val_string)\n            size_post += 1\n            if size_post == 1:\n                heapq.heappush(max_heap, -val)\n                continue\n            if -max_heap[0] >= val:\n                heapq.heappush(max_heap, -val)\n            else:\n                heapq.heappush(min_heap, val)\n            if len(min_heap) < size_post // 3:\n                heapq.heappush(min_heap, -heapq.heappop(max_heap))\n            elif len(min_heap) > size_post // 3:\n                heapq.heappush(max_heap, -heapq.heappop(min_heap))\nmethod_2()", "import heapq\nN = int(input())\nmin_heap_top = []\nmax_heap_remain = []\nsize_post = 0\nfor _ in range(N):\n    input_text = input()\n    if input_text == '2':\n        if size_post < 3:\n            print('No reviews yet')\n        else:\n            print(-max_heap_remain[0])\n    else:\n        (operation, value) = map(int, input_text.split())\n        size_post += 1\n        if len(max_heap_remain) > 2:\n            if -max_heap_remain[0] > value:\n                heapq.heappush(max_heap_remain, -value)\n            else:\n                heapq.heappush(min_heap_top, value)\n            while len(min_heap_top) > size_post // 3 - 1:\n                pop_value = heapq.heappop(min_heap_top)\n                heapq.heappush(max_heap_remain, -pop_value)\n            while len(min_heap_top) < size_post // 3 - 1:\n                pop_value = heapq.heappop(max_heap_remain)\n                heapq.heappush(min_heap_top, -pop_value)\n        else:\n            heapq.heappush(max_heap_remain, -value)", "import heapq\nN = int(input())\n(heap1, minheap) = ([], [])\nn = 0\nfor _ in range(N):\n    z = input().split()\n    if int(z[0]) == 2:\n        if n < 3:\n            print('No reviews yet')\n        else:\n            print(minheap[0])\n    else:\n        n += 1\n        x = int(z[1])\n        if n > 3 and minheap[0] < x and (n % 3 != 0):\n            x = heapq.heapreplace(minheap, x)\n        heapq.heappush(heap1, -x)\n        if n % 3 == 0:\n            heapq.heappush(minheap, -heapq.heappop(heap1))", "import heapq\nN = int(input())\nmin_heap = []\nmax_heap = []\nreview_count = 0\nfor _ in range(N):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        value = query[1]\n        review_count += 1\n        if min_heap and min_heap[0] < value:\n            heapq.heappush(min_heap, value)\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        else:\n            heapq.heappush(max_heap, -value)\n        if review_count % 3 == 0:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n    if query[0] == 2:\n        if min_heap:\n            print(min_heap[0])\n        else:\n            print('No reviews yet')", "import heapq\nN = int(input())\nmin_heap = []\nmax_heap = []\nreview_count = 0\nfor _ in range(N):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        value = query[1]\n        review_count += 1\n        if min_heap and min_heap[0] < value:\n            heapq.heappush(min_heap, value)\n            heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        else:\n            heapq.heappush(max_heap, -value)\n        if review_count % 3 == 0:\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n    if query[0] == 2:\n        if min_heap:\n            print(min_heap[0])\n        else:\n            print('No reviews yet')", "import heapq\nn = int(input())\nh = []\nlength = 0\npopTemp = []\nwhile n > 0:\n    rawInput = list(map(int, input().split()))\n    if rawInput[0] == 1:\n        length += 1\n        val = rawInput[1]\n        if length > 3 and h[0] < val and (length % 3 != 0):\n            val = heapq.heapreplace(h, val)\n        heapq.heappush(popTemp, -1 * val)\n        if length % 3 == 0:\n            heapq.heappush(h, -1 * heapq.heappop(popTemp))\n    elif length >= 3:\n        print(h[0])\n    else:\n        print('No reviews yet', end='\\n')\n    n -= 1", "import heapq\nn = int(input())\nnumber_reviews = 0\nall_reviews = []\nheapq.heapify(all_reviews)\nhighest_reviews = []\nheapq.heapify(highest_reviews)\nfor i in range(n):\n    inp = list(map(int, input().split()))\n    if inp[0] == 1:\n        number_reviews += 1\n        heapq.heappush(all_reviews, -inp[1])\n        top = number_reviews // 3\n        while len(highest_reviews) < top:\n            rating = heapq.heappop(all_reviews) * -1\n            heapq.heappush(highest_reviews, rating)\n        if top > 0:\n            right = highest_reviews[0]\n            left = all_reviews[0] * -1\n            while right < left:\n                heapq.heappush(all_reviews, right * -1)\n                heapq.heappush(highest_reviews, left)\n                left = heapq.heappop(all_reviews)\n                right = heapq.heappop(highest_reviews)\n            val = highest_reviews[0]\n    else:\n        top = number_reviews // 3\n        if top == 0:\n            print('No reviews yet')\n            continue\n        else:\n            print(highest_reviews[0])", "import heapq\nn = int(input())\nnumber_reviews = 0\nall_reviews = []\nheapq.heapify(all_reviews)\nhighest_reviews = []\nheapq.heapify(highest_reviews)\nfor i in range(n):\n    inp = list(map(int, input().split()))\n    if inp[0] == 1:\n        number_reviews += 1\n        heapq.heappush(all_reviews, -inp[1])\n        top = number_reviews // 3\n        while len(highest_reviews) < top:\n            rating = heapq.heappop(all_reviews) * -1\n            heapq.heappush(highest_reviews, rating)\n        if top > 0:\n            right = highest_reviews[0]\n            left = all_reviews[0] * -1\n            while right < left:\n                heapq.heappop(all_reviews)\n                heapq.heappop(highest_reviews)\n                heapq.heappush(all_reviews, right * -1)\n                heapq.heappush(highest_reviews, left)\n                right = highest_reviews[0]\n                left = all_reviews[0] * -1\n            val = highest_reviews[0]\n    else:\n        top = number_reviews // 3\n        if top == 0:\n            print('No reviews yet')\n            continue\n        else:\n            print(highest_reviews[0])", "from heapq import heappush, heappop, heapify, heapreplace\nh = []\nn = 0\nnew = []\nfor t in range(int(input())):\n    a = input()\n    if a[0] == '1':\n        (a, val) = map(int, a.split())\n    else:\n        a = int(a)\n    if a == 1:\n        n += 1\n        if n > 3 and h[0] < val and (n % 3 != 0):\n            val = heapreplace(h, val)\n        heappush(new, -1 * val)\n        if n % 3 == 0:\n            heappush(h, -1 * heappop(new))\n    elif n >= 3:\n        print(h[0])\n    else:\n        print('No reviews yet')", "from bisect import insort\nimport heapq as he\nsize = 0\nminheap = []\nmaxheap = []\nfor _ in range(int(input())):\n    li = list(map(int, input().split()))\n    if li[0] == 2:\n        if size < 3:\n            print('No reviews yet')\n            continue\n        print(minheap[0])\n    else:\n        size += 1\n        if size % 3 == 0:\n            he.heappush(maxheap, -li[1])\n            he.heappush(minheap, -he.heappop(maxheap))\n        elif size > 3:\n            if li[1] > minheap[0]:\n                he.heappush(maxheap, -he.heappop(minheap))\n                he.heappush(minheap, li[1])\n            else:\n                he.heappush(maxheap, -li[1])\n        else:\n            he.heappush(maxheap, -li[1])", "import heapq\nimport math\nn = int(input())\nA = []\nB = []\ntemp = 0\nfor _ in range(n):\n    q = input().split()\n    if len(q) > 1:\n        (a, b) = map(int, q)\n    else:\n        a = map(int, q)\n    if a == 1:\n        k = (len(A) + 1 + len(B)) // 3\n        if k > len(B):\n            heapq.heappush(A, -b)\n            heapq.heappush(B, -heapq.heappop(A))\n        elif len(B) > 0 and b > B[0]:\n            heapq.heappush(B, b)\n            heapq.heappush(A, -heapq.heappop(B))\n        else:\n            heapq.heappush(A, -b)\n    elif len(B) == 0:\n        print('No reviews yet')\n    else:\n        print(B[0])", "import heapq\nN = int(input())\nmax_h = []\nmin_h = []\ni = 0\nfor _ in range(N):\n    operation = list(input().split())\n    if operation[0] == '1':\n        review = int(operation[1])\n        i += 1\n        if i % 3 == 0:\n            if review > -max_h[0]:\n                heapq.heappush(min_h, review)\n            else:\n                heapq.heappush(min_h, -heapq.heappop(max_h))\n                heapq.heappush(max_h, -review)\n        elif len(min_h) and review > min_h[0]:\n            heapq.heappush(max_h, -heapq.heappop(min_h))\n            heapq.heappush(min_h, review)\n        else:\n            heapq.heappush(max_h, -review)\n    elif len(min_h) > 0:\n        print(min_h[0])\n    else:\n        print('No reviews yet')", "import heapq\n\nclass PQEntityMax:\n\n    def __init__(self, value):\n        self.value = value\n\n    def __lt__(self, other):\n        return self.value > other.value\nn = int(input())\ncount = 0\npqMax = []\npqMin = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    type = data[0]\n    if type == 1:\n        count += 1\n        if count // 3 != len(pqMin):\n            if data[1] >= pqMax[0].value:\n                heapq.heappush(pqMin, data[1])\n            else:\n                t = heapq.heappop(pqMax)\n                heapq.heappush(pqMax, PQEntityMax(data[1]))\n                heapq.heappush(pqMin, t.value)\n        elif len(pqMin) > 0 and data[1] > pqMin[0]:\n            h = heapq.heappop(pqMin)\n            heapq.heappush(pqMax, PQEntityMax(h))\n            heapq.heappush(pqMin, data[1])\n        else:\n            heapq.heappush(pqMax, PQEntityMax(data[1]))\n    elif count < 3:\n        print('No reviews yet')\n    else:\n        print(pqMin[0])", "import heapq as h\nimport sys\nimport math\nfrom collections import defaultdict\nimport bisect\n\ndef alele():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef ilele():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef input():\n    return sys.stdin.readline().strip()\nmaxi = []\nmini = []\nc = 0\nfor _ in range(int(input())):\n    S = list(input().split(' '))\n    if S[0] == '1':\n        c += 1\n        d = int(S[1])\n        if len(mini) == 0 or c // 3 > len(mini):\n            h.heappush(maxi, -d)\n            h.heappush(mini, abs(h.heappop(maxi)))\n        elif mini[0] < d:\n            h.heappush(maxi, -h.heappop(mini))\n            h.heappush(mini, d)\n        else:\n            h.heappush(maxi, -d)\n    else:\n        print(mini[0]) if c >= 3 else print('No reviews yet')", "from heapq import heapify, heappush, heappop\nli = []\nh = []\ncount = 0\nfor _ in range(int(input())):\n    a = list(map(int, input().split()))\n    if a[0] == 1:\n        count += 1\n        heappush(li, -1 * a[1])\n        if len(h) < count // 3:\n            heappush(h, -li[0])\n            heappop(li)\n        if len(h) == 0:\n            continue\n        elif -li[0] > h[0]:\n            temp = h[0]\n            heappop(h)\n            heappush(h, -li[0])\n            heappop(li)\n            heappush(li, -temp)\n    elif len(h) == 0:\n        print('No reviews yet')\n    else:\n        print(h[0])", "import heapq\nQ = int(input())\nmaxheap = []\nminheap = []\ncnt = 0\nfor _ in range(Q):\n    q = list(map(int, input().split()))\n    if q[0] == 1:\n        if len(minheap) > 0 and q[1] > minheap[0]:\n            heapq.heappush(minheap, q[1])\n            top = heapq.heappop(minheap)\n            heapq.heappush(maxheap, (-top, top))\n        else:\n            heapq.heappush(maxheap, (-q[1], q[1]))\n        cnt += 1\n        temp = cnt // 3\n        if len(minheap) < temp:\n            top = heapq.heappop(maxheap)\n            heapq.heappush(minheap, top[1])\n    elif len(minheap) == 0:\n        print('No reviews yet')\n    else:\n        print(minheap[0])", "import heapq\n\nclass PQEntityMax:\n\n    def __init__(self, value):\n        self.value = value\n\n    def __lt__(self, other):\n        return self.value > other.value\nn = int(input())\ncount = 0\npqMax = []\npqMin = []\nfor i in range(n):\n    data = list(map(int, input().split()))\n    type = data[0]\n    if type == 1:\n        count += 1\n        if count // 3 != len(pqMin):\n            if data[1] >= pqMax[0].value:\n                heapq.heappush(pqMin, data[1])\n            else:\n                t = heapq.heappop(pqMax)\n                heapq.heappush(pqMax, PQEntityMax(data[1]))\n                heapq.heappush(pqMin, t.value)\n        elif len(pqMin) > 0 and data[1] > pqMin[0]:\n            h = heapq.heappop(pqMin)\n            heapq.heappush(pqMax, PQEntityMax(h))\n            heapq.heappush(pqMin, data[1])\n        else:\n            heapq.heappush(pqMax, PQEntityMax(data[1]))\n    elif count < 3:\n        print('No reviews yet')\n    else:\n        print(pqMin[0])", "import heapq as hp\nh = []\nm = []\ncount = 0\nfor _ in range(int(input())):\n    a = [int(i) for i in input().split()]\n    if len(a) == 2:\n        count += 1\n        x = a[1]\n        hp.heappush(m, -x)\n        if len(h) < count // 3:\n            hp.heappush(h, -m[0])\n            hp.heappop(m)\n        if len(h) == 0:\n            continue\n        elif -m[0] > h[0]:\n            temp = h[0]\n            hp.heappop(h)\n            hp.heappush(h, -m[0])\n            hp.heappop(m)\n            hp.heappush(m, -temp)\n    elif len(h) == 0:\n        print('No reviews yet')\n    else:\n        print(h[0])", "import heapq\nn = int(input())\nnoReviews = 0\nminHeap = []\nmaxHeap = []\nfor _ in range(n):\n    line = list(map(int, input().split()))\n    if line[0] == 1:\n        noReviews += 1\n        if len(minHeap) != 0 and minHeap[0] < line[1]:\n            heapq.heappush(minHeap, line[1])\n            heapq.heappush(maxHeap, -heapq.heappop(minHeap))\n        else:\n            heapq.heappush(maxHeap, -line[1])\n        if noReviews % 3 == 0:\n            heapq.heappush(minHeap, -heapq.heappop(maxHeap))\n    elif len(minHeap) == 0:\n        print('No reviews yet')\n    else:\n        print(minHeap[0])", "import heapq as hq\nn = int(input())\ncount = 0\nh = []\ni = 0\nm = []\nfor g in range(n):\n    a = [int(i) for i in input().split()]\n    if len(a) == 2:\n        hq.heappush(m, -a[1])\n        i += 1\n        if i // 3 == 0:\n            pass\n        elif count < i // 3 and i // 3 > 0:\n            hq.heappush(h, -m[0])\n            count += 1\n            hq.heappop(m)\n        elif -m[0] > h[0]:\n            hq.heappush(h, -m[0])\n            temp = h[0]\n            hq.heappop(h)\n            hq.heappop(m)\n            hq.heappush(m, -temp)\n    elif i // 3 == 0:\n        print('No reviews yet')\n    else:\n        print(h[0])", "from sys import stdin\nfrom heapq import heappush, heappop\n\ndef manage_top_reviews(top_reviews, remaining_reviews, x):\n    if len(remaining_reviews) == 0:\n        heappush(remaining_reviews, -x)\n    else:\n        top_count = (len(top_reviews) + len(remaining_reviews) + 1) // 3\n        if top_count > 0:\n            if len(top_reviews) == 0:\n                heappush(remaining_reviews, -x)\n                heappush(top_reviews, -heappop(remaining_reviews))\n            elif len(top_reviews) == top_count:\n                if top_reviews[0] < x:\n                    heappush(remaining_reviews, -heappop(top_reviews))\n                    heappush(top_reviews, x)\n                else:\n                    heappush(remaining_reviews, -x)\n            elif len(top_reviews) < top_count:\n                heappush(remaining_reviews, -x)\n                heappush(top_reviews, -heappop(remaining_reviews))\n        elif top_count == 0:\n            heappush(remaining_reviews, -x)\nN = int(stdin.readline())\ntop_reviews = []\nremaining_reviews = []\nfor _ in range(N):\n    query = list(map(int, stdin.readline().strip().split(' ')))\n    if len(query) == 2:\n        query_type = query[0]\n        x = query[1]\n    else:\n        query_type = 2\n    if query_type == 1:\n        manage_top_reviews(top_reviews, remaining_reviews, x)\n    elif query_type == 2:\n        if len(top_reviews) == 0:\n            print('No reviews yet')\n        else:\n            print(top_reviews[0])", "import heapq\nheapMax = []\nheapMin = []\nn = int(input())\nnreviews = 0\nfor i in range(n):\n    a = list(map(int, input().split()))\n    if a[0] == 1:\n        nreviews += 1\n        x = a[1]\n        if len(heapMin) != 0 and heapMin[0] < x:\n            heapq.heappush(heapMax, -heapq.heappop(heapMin))\n            heapq.heappush(heapMin, x)\n        else:\n            heapq.heappush(heapMax, -x)\n        if nreviews % 3 == 0:\n            heapq.heappush(heapMin, -heapq.heappop(heapMax))\n    elif len(heapMin) == 0:\n        print('No reviews yet')\n    else:\n        print(heapMin[0])", "import heapq\n\nclass maxHeap:\n    value = 0\n\n    def __init__(self, value):\n        self.value = value\n\n    def __lt__(self, other):\n        return self.value > other.value\nonethird = []\ntwothird = []\nnopt = int(input())\nnrev = 0\nfor _ in range(nopt):\n    inp = list(input().split())\n    if len(inp) != 1:\n        nrev += 1\n        value = int(inp[1])\n        if len(onethird) != 0 and value > onethird[0]:\n            heapq.heappush(onethird, value)\n            value = onethird[0]\n            heapq.heappush(twothird, maxHeap(value))\n            heapq.heappop(onethird)\n        else:\n            heapq.heappush(twothird, maxHeap(value))\n        if nrev % 3 == 0:\n            value = twothird[0].value\n            heapq.heappush(onethird, value)\n            heapq.heappop(twothird)\n    elif nrev < 3:\n        print('No reviews yet')\n    else:\n        print(onethird[0])", "import heapq\nimport math\n\nclass PQEntry:\n\n    def __init__(self, value):\n        self.value = value\n\n    def __lt__(self, other):\n        return self.value > other.value\nt = int(input(''))\nreviews = []\ntops = []\ncnt = 0\nresults = []\nfor i in range(t):\n    rq = list(map(int, input('').split()))\n    t = rq[0]\n    if t == 1:\n        cnt += 1\n        v = rq[1]\n        if len(tops) > 0:\n            if v > tops[0]:\n                heapq.heappush(reviews, PQEntry(heapq.heappop(tops)))\n                heapq.heappush(tops, v)\n            else:\n                heapq.heappush(reviews, PQEntry(v))\n        else:\n            heapq.heappush(reviews, PQEntry(v))\n        if cnt % 3 == 0:\n            heapq.heappush(tops, heapq.heappop(reviews).value)\n    elif t == 2:\n        if len(tops) > 0:\n            results.append(tops[0])\n        else:\n            results.append('No reviews yet')\nfor result in results:\n    print(result)", "import heapq\ntop3 = []\nrest = []\nnreviews = 0\nn = int(input())\nfor _ in range(n):\n    line = list(map(int, input().split()))\n    type = line[0]\n    if type == 1:\n        x = line[1]\n        nreviews += 1\n        if len(top3) != 0 and top3[0] < x:\n            heapq.heappush(rest, -heapq.heappop(top3))\n            heapq.heappush(top3, x)\n        else:\n            heapq.heappush(rest, -x)\n        if nreviews % 3 == 0:\n            heapq.heappush(top3, -heapq.heappop(rest))\n    elif len(top3) == 0:\n        print('No reviews yet')\n    else:\n        print(top3[0])", "n = int(input())\nimport heapq\nminHeap = []\nmaxHeap = []\ni = 0\nfor _ in range(n):\n    lineGrab = list(input().split())\n    if lineGrab[0] == '1':\n        i += 1\n        val = int(lineGrab[1])\n        if minHeap != []:\n            if val > minHeap[0]:\n                x = heapq.heappop(minHeap)\n                heapq.heappush(minHeap, val)\n                heapq.heappush(maxHeap, -x)\n            else:\n                heapq.heappush(maxHeap, -val)\n        else:\n            heapq.heappush(maxHeap, -val)\n        if i % 3 == 0:\n            y = heapq.heappop(maxHeap)\n            heapq.heappush(minHeap, -y)\n    elif minHeap:\n        print(minHeap[0])\n    else:\n        print('No reviews yet')", "import heapq\nt = int(input())\nh1 = []\nh2 = []\nn = 0\nwhile t:\n    inp = input().split()\n    if inp[0] == '1':\n        x = int(inp[1])\n        if len(h1) == 0 or h1[0] <= x:\n            heapq.heappush(h1, x)\n        else:\n            heapq.heappush(h2, -x)\n        n += 1\n        if len(h1) == n // 3 and n == 3:\n            heapq.heappush(h2, -heapq.heappop(h1))\n        while len(h1) < n // 3:\n            heapq.heappush(h1, -heapq.heappop(h2))\n        while len(h1) > n // 3:\n            heapq.heappush(h2, -heapq.heappop(h1))\n    else:\n        print('No reviews yet' if n // 3 == 0 else h1[0])\n    t -= 1", "import heapq\ntop = []\nrest = []\nfor _ in range(int(input())):\n    x = [int(s) for s in input().split()]\n    if len(x) == 2:\n        curr = -1\n        if rest:\n            curr = heapq.heappop(rest)\n            curr = curr * -1\n        if x[1] >= curr:\n            if curr != -1:\n                heapq.heappush(rest, -1 * curr)\n            heapq.heappush(top, x[1])\n            if len(top) != (len(rest) + len(top)) // 3:\n                shift = heapq.heappop(top)\n                heapq.heappush(rest, -1 * shift)\n        else:\n            if curr != -1:\n                heapq.heappush(rest, -1 * curr)\n            heapq.heappush(rest, -1 * x[1])\n            if len(top) != (len(rest) + len(top)) // 3:\n                shift = heapq.heappop(rest)\n                heapq.heappush(top, -1 * shift)\n    elif (len(top) + len(rest)) // 3 > 0:\n        ans = heapq.heappop(top)\n        print(ans)\n        heapq.heappush(top, ans)\n    else:\n        print('No reviews yet')", "import heapq\nn = int(input())\nmaxh = []\nminh = []\nl = 0\nwhile n != 0:\n    q = list(map(int, input().split()))\n    if q[0] == 1:\n        x = heapq.heappushpop(minh, q[1])\n        heapq.heappush(maxh, -x)\n        l += 1\n        if l % 3 == 0:\n            x = heapq.heappop(maxh)\n            heapq.heappush(minh, -x)\n    elif len(minh) > 0:\n        x = heapq.heappop(minh)\n        print(x)\n        heapq.heappush(minh, x)\n    else:\n        print('No reviews yet')\n    n -= 1", "import heapq\nh = []\not = []\nc = 0\nn = int(input())\nfor i in range(n):\n    lis = [int(o) for o in input().split()]\n    a = lis[0]\n    if a == 1:\n        b = lis[1]\n        c += 1\n        if ot and ot[0] < b:\n            heapq.heappush(h, -heapq.heappop(ot))\n            heapq.heappush(ot, b)\n        else:\n            heapq.heappush(h, -b)\n        if c % 3 == 0:\n            heapq.heappush(ot, -heapq.heappop(h))\n    else:\n        d = c // 3\n        if d == 0:\n            print('No reviews yet')\n        else:\n            print(ot[0])", "import heapq\nh = []\not = []\nc = 0\nn = int(input())\nfor i in range(n):\n    lis = [int(o) for o in input().split()]\n    a = lis[0]\n    if a == 1:\n        b = lis[1]\n        c += 1\n        if ot and ot[0] < b:\n            heapq.heappush(h, -heapq.heappop(ot))\n            heapq.heappush(ot, b)\n        else:\n            heapq.heappush(h, -b)\n        if c % 3 == 0:\n            heapq.heappush(ot, -heapq.heappop(h))\n    else:\n        d = c // 3\n        if d == 0:\n            print('No reviews yet')\n        else:\n            print(ot[0])", "import heapq\none_third = []\nar = []\nn = 0\nfor _ in range(int(input())):\n    query = list(map(int, input().split()))\n    q = query[0]\n    if q == 1:\n        x = query[1]\n        n += 1\n        if len(one_third) != 0 and one_third[0] < x:\n            heapq.heappush(ar, -heapq.heappop(one_third))\n            heapq.heappush(one_third, x)\n        else:\n            heapq.heappush(ar, -x)\n        if n % 3 == 0:\n            heapq.heappush(one_third, -heapq.heappop(ar))\n    elif len(one_third) == 0:\n        print('No reviews yet')\n    else:\n        print(one_third[0])", "from heapq import *\nn = int(input())\nheap1 = []\nheap2 = []\nt = 0\nfor _ in range(n):\n    k = input()\n    if k[0] == '1':\n        s = int(k[2:])\n        t += 1\n        if len(heap1) > 0:\n            if s > heap1[0]:\n                heappush(heap1, s)\n                d = heappop(heap1)\n                heappush(heap2, -d)\n                continue\n        heappush(heap2, -s)\n    else:\n        tt = t // 3\n        if tt == 0:\n            print('No reviews yet')\n            continue\n        while len(heap1) < tt:\n            a = heappop(heap2)\n            heappush(heap1, -a)\n        print(heap1[0])", "import heapq\ntop3 = []\nrest = []\nnreviews = 0\nn = int(input())\nfor _ in range(n):\n    line = list(map(int, input().split()))\n    type = line[0]\n    if type == 1:\n        x = line[1]\n        nreviews += 1\n        if len(top3) != 0 and top3[0] < x:\n            heapq.heappush(rest, -heapq.heappop(top3))\n            heapq.heappush(top3, x)\n        else:\n            heapq.heappush(rest, -x)\n        if nreviews % 3 == 0:\n            heapq.heappush(top3, -heapq.heappop(rest))\n    elif len(top3) == 0:\n        print('No reviews yet')\n    else:\n        print(top3[0])", "from heapq import *\n\ndef res(kk, n):\n    pq_min = []\n    pq_max = []\n    length = 0\n    for op in kk:\n        if op[0] == 1:\n            heappush(pq_max, -op[1])\n            length += 1\n            if length % 3 == 0:\n                l = heappop(pq_max)\n                heappush(pq_min, -l)\n            if len(pq_min) != 0:\n                l = -pq_max[0]\n                m = pq_min[0]\n                if l > m:\n                    heappop(pq_min)\n                    heappop(pq_max)\n                    heappush(pq_min, l)\n                    heappush(pq_max, -m)\n        elif length // 3 == 0:\n            print('No reviews yet')\n        else:\n            print(pq_min[0])\nn = int(input())\nkk = []\nfor _ in range(n):\n    inp = input().strip()\n    if len(inp) > 1:\n        kk.append(tuple(map(int, inp.split(' '))))\n    else:\n        kk.append((int(inp), 0))\nres(kk, n)", "from heapq import heappush, heappop\nmax_heap = []\nmin_heap = []\nmax_heap_size = 0\nmin_heap_size = 0\nfor _ in range(int(input())):\n    query = list(map(int, input().split()))\n    if query[0] == 1:\n        if min_heap_size == 0 or query[1] < min_heap[0]:\n            heappush(max_heap, query[1] * -1)\n            max_heap_size += 1\n        else:\n            heappush(min_heap, query[1])\n            min_heap_size += 1\n        if (max_heap_size + min_heap_size) // 3 > min_heap_size:\n            heappush(min_heap, heappop(max_heap) * -1)\n            min_heap_size += 1\n            max_heap_size -= 1\n        elif (max_heap_size + min_heap_size) // 3 < min_heap_size:\n            heappush(max_heap, heappop(min_heap) * -1)\n            max_heap_size += 1\n            min_heap_size -= 1\n    elif min_heap_size + max_heap_size < 3:\n        print('No reviews yet')\n    else:\n        print(min_heap[0])", "from heapq import heappush, heappop\nnumber_of_commands = int(input())\n(rating_min_heap, rating_max_heap) = ([], [])\ncounting = 0\nfor i in range(number_of_commands):\n    commands = list(map(int, input().strip().split(' ')))\n    if len(commands) == 2:\n        counting += 1\n        one_third = counting // 3\n        if rating_min_heap and commands[1] > rating_min_heap[0]:\n            heappush(rating_min_heap, commands[1])\n        else:\n            heappush(rating_max_heap, -commands[1])\n        while len(rating_min_heap) > one_third:\n            heappush(rating_max_heap, -heappop(rating_min_heap))\n        while len(rating_max_heap) > counting - one_third:\n            heappush(rating_min_heap, abs(heappop(rating_max_heap)))\n    elif len(rating_min_heap) == 0:\n        print('No reviews yet')\n    else:\n        print(rating_min_heap[0])", "from heapq import *\nimport sys\nmaxheap = []\nminheap = []\nout = ''\nfor case in range(int(sys.stdin.readline())):\n    L = list(map(int, sys.stdin.readline().split()))\n    if L[0] == 2:\n        total = len(maxheap) + len(minheap)\n        if total < 3:\n            out += 'No reviews yet\\n'\n        else:\n            N = int(total / 3)\n            while len(minheap) < N:\n                num = -1 * heappop(maxheap)\n                heappush(minheap, num)\n            while len(minheap) > 0 and minheap[0] < -1 * maxheap[0]:\n                num1 = -1 * heappop(maxheap)\n                num2 = -1 * heappop(minheap)\n                heappush(minheap, num1)\n                heappush(maxheap, num2)\n            out += '%d\\n' % minheap[0]\n    else:\n        heappush(maxheap, -1 * L[1])\nprint(out[:-1])", "def restaurant(operations, n):\n    import heapq\n    pq_min = []\n    pq_max = []\n    length = 0\n    for op in operations:\n        if op[0] == 1:\n            heapq.heappush(pq_max, -op[1])\n            length += 1\n            if length % 3 == 0:\n                l = heapq.heappop(pq_max)\n                heapq.heappush(pq_min, -l)\n            if len(pq_min) != 0:\n                l = -pq_max[0]\n                m = pq_min[0]\n                if l > m:\n                    heapq.heappop(pq_min)\n                    heapq.heappop(pq_max)\n                    heapq.heappush(pq_min, l)\n                    heapq.heappush(pq_max, -m)\n        elif length // 3 == 0:\n            print('No reviews yet')\n        else:\n            print(pq_min[0])\nn = int(input().strip())\noperations = []\nfor _ in range(n):\n    inp = input().strip()\n    if len(inp) > 1:\n        operations.append(tuple(map(int, inp.split(' '))))\n    else:\n        operations.append((int(inp), 0))\nrestaurant(operations, n)", "def restaurant(operations, n):\n    import heapq\n    pq_min = []\n    pq_max = []\n    length = 0\n    for op in operations:\n        if op[0] == 1:\n            heapq.heappush(pq_max, -op[1])\n            length += 1\n            if length % 3 == 0:\n                l = heapq.heappop(pq_max)\n                heapq.heappush(pq_min, -l)\n            if len(pq_min) != 0:\n                l = -pq_max[0]\n                m = pq_min[0]\n                if l > m:\n                    heapq.heappop(pq_min)\n                    heapq.heappop(pq_max)\n                    heapq.heappush(pq_min, l)\n                    heapq.heappush(pq_max, -m)\n        elif length // 3 == 0:\n            print('No reviews yet')\n        else:\n            print(pq_min[0])\nn = int(input().strip())\noperations = []\nfor _ in range(n):\n    inp = input().strip()\n    if len(inp) > 1:\n        operations.append(tuple(map(int, inp.split(' '))))\n    else:\n        operations.append((int(inp), 0))\nrestaurant(operations, n)", "import heapq\n\ndef solution():\n    top_reviews = []\n    candidate_reviews = []\n    N = int(input())\n    results = []\n    num_of_reviews = 0\n    for i in range(N):\n        command = input().strip()\n        if command.startswith('1'):\n            num_of_reviews += 1\n            new_review = int(command.split()[1])\n            if len(top_reviews) < num_of_reviews // 3:\n                if len(candidate_reviews) < 0 or new_review > -candidate_reviews[0]:\n                    heapq.heappush(top_reviews, new_review)\n                else:\n                    heapq.heappush(top_reviews, -candidate_reviews[0])\n                    heapq.heappop(candidate_reviews)\n                    heapq.heappush(candidate_reviews, -new_review)\n            elif len(top_reviews) > 0 and new_review > top_reviews[0]:\n                heapq.heappush(candidate_reviews, -top_reviews[0])\n                heapq.heappop(top_reviews)\n                heapq.heappush(top_reviews, new_review)\n            else:\n                heapq.heappush(candidate_reviews, -new_review)\n        elif len(top_reviews) > 0:\n            results.append(top_reviews[0])\n        else:\n            results.append('No reviews yet')\n    print(*results, sep='\\n')\nsolution()", "import heapq as hp\nn = int(input())\nh = []\nh1 = []\ncount = 0\nfor i in range(n):\n    line = input()\n    if line[0] == '1':\n        value = int(line.split(' ')[1])\n        hp.heappush(h, -value)\n        count += 1\n    elif line[0] == '2':\n        d = count // 3\n        if d == 0:\n            print('No reviews yet')\n        else:\n            while True:\n                if len(h1) != d:\n                    g = hp.heappop(h)\n                    hp.heappush(h1, -g)\n                    if -h[0] > h1[0]:\n                        a = hp.heappop(h)\n                        b = hp.heappop(h1)\n                        hp.heappush(h1, -a)\n                        hp.heappush(h, -b)\n                elif -h[0] > h1[0]:\n                    a = hp.heappop(h)\n                    b = hp.heappop(h1)\n                    hp.heappush(h1, -a)\n                    hp.heappush(h, -b)\n                else:\n                    break\n            print(h1[0])", "import heapq as hp\nn = int(input())\nh = []\nhtam = []\ndem = 0\nfor i in range(n):\n    line = input()\n    if line[0] == '1':\n        value = int(line.split(' ')[1])\n        hp.heappush(h, -value)\n        dem += 1\n    elif line[0] == '2':\n        d = dem // 3\n        if d == 0:\n            print('No reviews yet')\n        else:\n            while True:\n                if len(htam) != d:\n                    g = hp.heappop(h)\n                    hp.heappush(htam, -g)\n                    if -h[0] > htam[0]:\n                        a = hp.heappop(h)\n                        b = hp.heappop(htam)\n                        hp.heappush(htam, -a)\n                        hp.heappush(h, -b)\n                elif -h[0] > htam[0]:\n                    a = hp.heappop(h)\n                    b = hp.heappop(htam)\n                    hp.heappush(htam, -a)\n                    hp.heappush(h, -b)\n                else:\n                    break\n            print(htam[0])", "import heapq\npq = []\nmax_pq = []\nn = int(input())\nfor i in range(n):\n    x = input().split()\n    type = int(x[0])\n    if type == 1:\n        heapq.heappush(max_pq, -int(x[1]))\n    else:\n        size = (len(pq) + len(max_pq)) // 3\n        if size == 0:\n            print('No reviews yet')\n        else:\n            while len(pq) < size:\n                heapq.heappush(pq, -heapq.heappop(max_pq))\n            while pq[0] < -max_pq[0]:\n                heapq.heappush(pq, -heapq.heappop(max_pq))\n                heapq.heappush(max_pq, -heapq.heappop(pq))\n            print(pq[0])", "import heapq\nn = int(input())\nqMin = []\nqMax = []\ncounter = 0\nfor _ in range(n):\n    data = list(map(int, input().split()))\n    op = data[0]\n    if op == 1:\n        counter += 1\n        k = counter // 3\n        val = data[1]\n        if len(qMin) < k:\n            maxVal = heapq.heappushpop(qMax, -val)\n            heapq.heappush(qMin, -maxVal)\n        elif k != 0 and val > qMin[0]:\n            minVal = heapq.heappushpop(qMin, val)\n            heapq.heappush(qMax, -minVal)\n        else:\n            heapq.heappush(qMax, -val)\n    elif len(qMin) == 0:\n        print('No reviews yet')\n    else:\n        print(qMin[0])", "import heapq\nn = int(input())\ncurrentN = 0\nqMin = []\nqMax = []\nfor _ in range(n):\n    data = list(map(int, input().split()))\n    op = data[0]\n    if op == 1:\n        val = data[1]\n        currentN += 1\n        k = currentN // 3\n        if len(qMin) < k:\n            heapq.heappush(qMax, -val)\n            heapq.heappush(qMin, -heapq.heappop(qMax))\n        elif len(qMin) != 0 and val > qMin[0]:\n            heapq.heappush(qMin, val)\n            heapq.heappush(qMax, -heapq.heappop(qMin))\n        else:\n            heapq.heappush(qMax, -val)\n    elif len(qMin) == 0:\n        print('No reviews yet')\n    else:\n        print(qMin[0])", "import heapq\nn = int(input())\nsize = 0\ncount = {'h1': 0, 'h2': 0, 'size': 0}\nheap1 = []\nheap2 = []\nheapq.heapify(heap1)\nheapq.heapify(heap2)\n\ndef addElement(e, h1, h2):\n    if count['h1'] != 0 and e > h1[0]:\n        heapq.heappush(h1, e)\n        count['h1'] += 1\n    else:\n        heapq.heappush(h2, -e)\n        count['h2'] += 1\n\ndef rebalance(h1, h2):\n    floorval = count['size'] // 3\n    if count['h1'] > floorval:\n        ele = heapq.heappop(heap1)\n        heapq.heappush(heap2, -ele)\n        count['h2'] += 1\n        count['h1'] -= 1\n    elif count['h1'] < floorval:\n        ele = heapq.heappop(heap2)\n        heapq.heappush(heap1, -ele)\n        count['h1'] += 1\n        count['h2'] -= 1\nwhile n != 0:\n    n -= 1\n    temp = [int(x) for x in input().split()]\n    if temp[0] == 1:\n        ele = temp[1]\n        size += 1\n        count['size'] += 1\n        addElement(ele, heap1, heap2)\n        rebalance(heap1, heap2)\n    else:\n        one_third = size // 3\n        if one_third != 0:\n            print(heap1[0])\n        else:\n            print('No reviews yet')", "import heapq\ntop = []\nrest = []\ntotal = 0\nfor _ in range(int(input().strip())):\n    ar = list(map(int, input().strip().split()))\n    if ar[0] == 2:\n        if len(top) == 0:\n            print('No reviews yet')\n        else:\n            print(top[0])\n    else:\n        total += 1\n        r = ar[1]\n        if len(top) == 0 or r < top[0]:\n            heapq.heappush(rest, -r)\n        else:\n            heapq.heappush(rest, -heapq.heappop(top))\n            heapq.heappush(top, r)\n        if len(top) < total // 3:\n            heapq.heappush(top, -heapq.heappop(rest))", "import queue\nimport heapq\nimport math\nn = int(input())\nmin_heap = []\nmax_heap = []\nnum_reviews = 0\nfor i in range(n):\n    command = list(map(int, input().split()))\n    if command[0] == 1:\n        heapq.heappush(min_heap, command[1])\n        heapq.heappush(max_heap, -heapq.heappop(min_heap))\n        num_reviews += 1\n        if len(min_heap) < math.floor(num_reviews / 3):\n            heapq.heappush(min_heap, -heapq.heappop(max_heap))\n    elif num_reviews > 2:\n        print(min_heap[0])\n    else:\n        print('No reviews yet')", "import heapq\n\ndef solve():\n    minHeap = []\n    maxHeap = []\n    n = int(input())\n    numReview = 0\n    while n:\n        n -= 1\n        line = list(map(int, input().split()))\n        t = line[0]\n        if t == 1:\n            x = line[1]\n            numReview += 1\n            if len(minHeap) != 0 and minHeap[0] < x:\n                heapq.heappush(minHeap, x)\n                heapq.heappush(maxHeap, -heapq.heappop(minHeap))\n            else:\n                heapq.heappush(maxHeap, -x)\n            if numReview % 3 == 0:\n                heapq.heappush(minHeap, -heapq.heappop(maxHeap))\n        elif len(minHeap) == 0:\n            print('No reviews yet')\n        else:\n            print(minHeap[0])\nsolve()", "import heapq\n(min_heap, max_heap) = ([], [])\nheapq.heapify(min_heap)\nheapq.heapify(max_heap)\nsize = 0\nn = int(input())\nfor i in range(n):\n    line = input().split()\n    if int(line[0]) == 1:\n        size += 1\n        x = int(line[1])\n        if len(min_heap) >= size // 3:\n            heapq.heappush(max_heap, -x)\n        else:\n            heapq.heappush(min_heap, x)\n        if len(min_heap) != 0 and len(max_heap) != 0:\n            while -max_heap[0] > min_heap[0]:\n                greater = -heapq.heappop(max_heap)\n                smaller = heapq.heappop(min_heap)\n                heapq.heappush(min_heap, greater)\n                heapq.heappush(max_heap, -smaller)\n    elif len(min_heap) == 0:\n        print('No reviews yet')\n    else:\n        print(min_heap[0])", "import heapq\n(min_heap, max_heap) = ([], [])\nsize = 0\nn = int(input())\nfor i in range(n):\n    line = input().split()\n    if int(line[0]) == 1:\n        size += 1\n        x = int(line[1])\n        if len(min_heap) >= size // 3:\n            heapq.heappush(max_heap, -x)\n        else:\n            heapq.heappush(min_heap, x)\n        if len(min_heap) > 0 and len(max_heap) > 0:\n            while -max_heap[0] > min_heap[0]:\n                greater = -heapq.heappop(max_heap)\n                smaller = heapq.heappop(min_heap)\n                heapq.heappush(min_heap, greater)\n                heapq.heappush(max_heap, -smaller)\n    elif len(min_heap) == 0:\n        print('No reviews yet')\n    else:\n        print(min_heap[0])", "import heapq\nx = int(input())\nminheap = []\nmaxheap = []\ncount = 0\nfor i in range(x):\n    data = list(map(int, input().split()))\n    if data[0] == 1:\n        count += 1\n        if len(minheap) > 0 and data[1] > minheap[0]:\n            heapq.heappush(minheap, data[1])\n            heapq.heappush(maxheap, -heapq.heappop(minheap))\n        else:\n            heapq.heappush(maxheap, -data[1])\n        if count % 3 == 0:\n            heapq.heappush(minheap, -heapq.heappop(maxheap))\n    elif len(minheap) == 0:\n        print('No reviews yet')\n    else:\n        print(minheap[0])", "import heapq\n\ndef solve():\n    min_queue = []\n    max_queue = []\n    query = int(input())\n    size = 0\n    while query:\n        line = list(map(int, input().split()))\n        if line[0] == 1:\n            val = line[1]\n            size += 1\n            if size % 3 != 0 and size > 3:\n                top = min_queue[0]\n                if val > top:\n                    heapq.heappush(min_queue, val)\n                    heapq.heappush(max_queue, -heapq.heappop(min_queue))\n                else:\n                    heapq.heappush(max_queue, -val)\n            else:\n                heapq.heappush(max_queue, -val)\n                while len(min_queue) < int(size / 3):\n                    heapq.heappush(min_queue, -heapq.heappop(max_queue))\n        elif len(min_queue) == 0:\n            print('No reviews yet')\n        else:\n            print(min_queue[0])\n        query -= 1\nsolve()", "from heapq import *\nn = 0\n(minheap, maxheap) = ([], [])\nfor _ in range(int(input())):\n    arr = list(map(int, input().split()))\n    if len(arr) == 2:\n        heappush(minheap, arr[1])\n        n += 1\n        if len(minheap) > n // 3:\n            heappush(maxheap, -heappop(minheap))\n        elif -maxheap[0] > minheap[0]:\n            heappush(minheap, -heappop(maxheap))\n            heappush(maxheap, -heappop(minheap))\n    elif n < 3:\n        print('No reviews yet')\n    else:\n        print(minheap[0])", "from heapq import *\nn = 0\n(minheap, maxheap) = ([], [])\nfor _ in range(int(input())):\n    arr = list(map(int, input().split()))\n    if len(arr) == 2:\n        heappush(minheap, arr[1])\n        n += 1\n        if len(minheap) > n // 3:\n            heappush(maxheap, -heappop(minheap))\n        elif -maxheap[0] > minheap[0]:\n            heappush(minheap, -heappop(maxheap))\n            heappush(maxheap, -heappop(minheap))\n    elif n < 3:\n        print('No reviews yet')\n    else:\n        print(minheap[0])"]