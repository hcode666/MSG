["t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    L = [[] for i in range(n)]\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        L[a - 1].append(b - 1)\n        L[b - 1].append(a - 1)\n    l = 0\n    for i in range(n):\n        l = max(len(L[i]), l)\n    if l >= 3:\n        print(l)\n        continue\n    found1 = False\n    for i in range(n):\n        found2 = False\n        for y in L[i]:\n            s = set(L[i]).intersection(set(L[y]))\n            if len(s) >= 1:\n                found2 = True\n                break\n        if found2:\n            found1 = True\n            break\n    if found1:\n        print(3)\n    else:\n        print(l)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    L = [[] for i in range(n)]\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        L[a - 1].append(b - 1)\n        L[b - 1].append(a - 1)\n    l = 0\n    for i in range(n):\n        l = max(len(L[i]), l)\n    if l >= 3:\n        print(l)\n        continue\n    found1 = False\n    for i in range(n):\n        found2 = False\n        for y in L[i]:\n            s = set(L[i]).intersection(set(L[y]))\n            if len(s) >= 1:\n                found2 = True\n                break\n        if found2:\n            found1 = True\n            break\n    if found1:\n        print(3)\n    else:\n        print(l)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    L = [[] for i in range(n)]\n    for i in range(m):\n        (a, b) = map(int, input().split())\n        L[a - 1].append(b - 1)\n        L[b - 1].append(a - 1)\n    l = 0\n    for i in range(n):\n        l = max(len(L[i]), l)\n    if l >= 3:\n        print(l)\n        continue\n    found1 = False\n    for i in range(n):\n        found2 = False\n        for y in L[i]:\n            s = set(L[i]).intersection(set(L[y]))\n            if len(s) >= 1:\n                found2 = True\n                break\n        if found2:\n            found1 = True\n            break\n    if found1:\n        print(3)\n    else:\n        print(l)", "def snek(a):\n    for x in range(len(a)):\n        for y in a[x]:\n            if not set(a[x]).isdisjoint(g[y]):\n                return True\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    g = [[] for x in range(n)]\n    for j in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    h = []\n    for k in range(len(g)):\n        h.append(len(g[k]))\n    h1 = max(h)\n    if h1 >= 3:\n        print(h1)\n        continue\n    if snek(g):\n        print(3)\n        continue\n    print(h1)", "def snek(a):\n    for x in range(len(a)):\n        for y in a[x]:\n            if not set(a[x]).isdisjoint(g[y]):\n                return True\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    g = [[] for x in range(n)]\n    for j in range(m):\n        (u, v) = map(int, input().split())\n        g[u - 1].append(v - 1)\n        g[v - 1].append(u - 1)\n    h = []\n    for k in range(len(g)):\n        h.append(len(g[k]))\n    h1 = max(h)\n    if h1 >= 3:\n        print(h1)\n        continue\n    if snek(g):\n        print(3)\n        continue\n    print(h1)", "def detect_triangle(adj):\n    for x in range(len(adj)):\n        for y in adj[x]:\n            if not set(adj[x]).isdisjoint(adj[y]):\n                return True\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    h = []\n    for i in range(len(graph)):\n        h.append(len(graph[i]))\n    h1 = max(h)\n    if h1 >= 3:\n        print(h1)\n        continue\n    if detect_triangle(graph):\n        print(3)\n        continue\n    print(h1)", "def detect_triangle(adj):\n    for x in range(len(adj)):\n        for y in adj[x]:\n            if not set(adj[x]).isdisjoint(adj[y]):\n                return True\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    h = []\n    for i in range(len(graph)):\n        h.append(len(graph[i]))\n    h1 = max(h)\n    if h1 >= 3:\n        print(h1)\n        continue\n    if detect_triangle(graph):\n        print(3)\n        continue\n    print(h1)", "def detect_triangle(adj):\n    for x in range(len(adj)):\n        for y in adj[x]:\n            if not set(adj[x]).isdisjoint(adj[y]):\n                return True\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    h = []\n    for i in range(len(graph)):\n        h.append(len(graph[i]))\n    h1 = max(h)\n    if h1 >= 3:\n        print(h1)\n        continue\n    if detect_triangle(graph):\n        print(3)\n        continue\n    print(h1)", "def detect_triangle(adj):\n    for x in range(len(adj)):\n        for y in adj[x]:\n            if not set(adj[x]).isdisjoint(adj[y]):\n                return True\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    h = []\n    for i in range(len(graph)):\n        h.append(len(graph[i]))\n    h1 = max(h)\n    if h1 >= 3:\n        print(h1)\n        continue\n    if detect_triangle(graph):\n        print(3)\n        continue\n    print(h1)", "def detect_triangle(adj):\n    for x in range(len(adj)):\n        for y in adj[x]:\n            if not set(adj[x]).isdisjoint(adj[y]):\n                return True\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    graph = [[] for i in range(n)]\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        graph[u - 1].append(v - 1)\n        graph[v - 1].append(u - 1)\n    h = []\n    for i in range(len(graph)):\n        h.append(len(graph[i]))\n    h1 = max(h)\n    if h1 >= 3:\n        print(h1)\n        continue\n    if detect_triangle(graph):\n        print(3)\n        continue\n    print(h1)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    [(adj[int(src)].append(int(dest)), adj[int(dest)].append(int(src))) for _ in range(m) for (src, dest) in [map(int, input().split())]]\n    print(max(max(map(len, adj)), 0 if max(map(len, adj)) > 2 else 3 if any((not set(adj[x]).isdisjoint(adj[y]) for x in range(n + 1) for y in adj[x])) else 0))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    [adj[int(src)].append(int(dest)) or adj[int(dest)].append(int(src)) for _ in range(m) for (src, dest) in [map(int, input().split())]]\n    print(max(max(map(len, adj)), 0 if max(map(len, adj)) > 2 else 3 if any((not set(adj[x]).isdisjoint(adj[y]) for x in range(n + 1) for y in adj[x])) else 0))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        (src, dest) = map(int, input().split())\n        adj[src].append(dest)\n        adj[dest].append(src)\n    print(max(max([len(a) for a in adj]), 0 if max([len(a) for a in adj]) > 2 else 3 if any((not set(adj[x]).isdisjoint(adj[y]) for x in range(len(adj)) for y in adj[x])) else 0))\n    continue", "import sys\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    adj = [[] for _ in range(n + 1)]\n    for _ in range(m):\n        (src, dest) = map(int, input().split())\n        adj[src].append(dest)\n        adj[dest].append(src)\n    print(max(max([len(a) for a in adj]), 3 if any((not set(adj[x]).isdisjoint(adj[y]) for x in range(len(adj)) for y in adj[x])) else max([len(a) for a in adj])))", "def get():\n    return [int(x) for x in input().split()]\nimport sys\n\ndef detectTriangle(adj):\n    for x in range(len(adj)):\n        for y in adj[x]:\n            if not set(adj[x]).isdisjoint(adj[y]):\n                return True\nfor _ in range(int(input())):\n    (n, m) = get()\n    adj = [[] for _ in range(n)]\n    for _ in range(m):\n        (src, dest) = get()\n        src -= 1\n        dest -= 1\n        adj[src].append(dest)\n        adj[dest].append(src)\n    max_degree = max([len(a) for a in adj])\n    if max_degree >= 3:\n        print(max_degree)\n        continue\n    if detectTriangle(adj):\n        print(3)\n        continue\n    print(max_degree)", "def does_3_cycle_exist_in_the_graph(adjacency_list, n):\n    for i in range(1, n + 1):\n        if len(adjacency_list[i]) == 2 and adjacency_list[i][0] in adjacency_list[adjacency_list[i][1]]:\n            return True\n    return False\nT = int(input())\nwhile T:\n    (n, m) = list(map(int, input().split()))\n    adjacency_list = [[] for _ in range(n + 1)]\n    while m:\n        (u, v) = list(map(int, input().split()))\n        adjacency_list[u].append(v)\n        adjacency_list[v].append(u)\n        m -= 1\n    max_antimatching = 0\n    for i in range(1, n + 1):\n        max_antimatching = max(max_antimatching, len(adjacency_list[i]))\n    if max_antimatching >= 3:\n        print(max_antimatching)\n    else:\n        if does_3_cycle_exist_in_the_graph(adjacency_list, n) == True:\n            max_antimatching = 3\n        print(max_antimatching)\n    T -= 1"]