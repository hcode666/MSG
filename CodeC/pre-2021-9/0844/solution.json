["t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for j in a:\n        d[j] = d.get(j, 0) + 1\n    a.sort()\n    s = 0\n    c = 0\n    for k in range(len(a)):\n        if k == 0:\n            s = 1\n        elif a[k] != a[k - 1]:\n            s = 1\n        else:\n            s += 1\n        if d.get(s, 0) >= a[k]:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for j in a:\n        d[j] = d.get(j, 0) + 1\n    a.sort()\n    s = 0\n    c = 0\n    for k in range(len(a)):\n        if k == 0:\n            s = 1\n        elif a[k] != a[k - 1]:\n            s = 1\n        else:\n            s += 1\n        if d.get(s, 0) >= a[k]:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for j in a:\n        d[j] = d.get(j, 0) + 1\n    a.sort()\n    s = 0\n    c = 0\n    for k in range(len(a)):\n        if k == 0:\n            s = 1\n        elif a[k] != a[k - 1]:\n            s = 1\n        else:\n            s += 1\n        if d.get(s, 0) >= a[k]:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for j in a:\n        d[j] = d.get(j, 0) + 1\n    a.sort()\n    s = 0\n    c = 0\n    for k in range(len(a)):\n        if k == 0:\n            s = 1\n        elif a[k] != a[k - 1]:\n            s = 1\n        else:\n            s += 1\n        if d.get(s, 0) >= a[k]:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for j in a:\n        d[j] = d.get(j, 0) + 1\n    a.sort()\n    s = 0\n    c = 0\n    for k in range(len(a)):\n        if k == 0:\n            s = 1\n        elif a[k] != a[k - 1]:\n            s = 1\n        else:\n            s += 1\n        if d.get(s, 0) >= a[k]:\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for j in a:\n        d[j] = d.get(j, 0) + 1\n    a.sort()\n    s = 0\n    c = 0\n    for k in range(len(a)):\n        if k == 0:\n            s = 1\n        elif a[k] != a[k - 1]:\n            s = 1\n        else:\n            s += 1\n        if d.get(s, 0) >= a[k]:\n            c += 1\n    print(c)", "t = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    dic = {}\n    for i in a:\n        dic[i] = dic.get(i, 0) + 1\n    a.sort()\n    f = 0\n    count = 0\n    for i in range(len(a)):\n        if i == 0:\n            f = 1\n        elif a[i] != a[i - 1]:\n            f = 1\n        else:\n            f += 1\n        if dic.get(f, 0) >= a[i]:\n            count += 1\n    print(count)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    k = {}\n    c = 1\n    j = 1\n    for i in range(n - 1):\n        if a[i] == a[i + 1]:\n            c += 1\n            j = 0\n        elif j == 0:\n            k[a[i]] = c\n            c = 1\n        else:\n            k[a[i]] = c\n    if a[n - 1] != a[n - 2]:\n        k[a[n - 1]] = 1\n    else:\n        k[a[i]] = c\n    c = 0\n    for i in k:\n        for j in range(1, k[i] + 1):\n            if j in k:\n                if k[j] >= i:\n                    c += 1\n    print(c)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    l = list(map(int, a.split()))\n    m = Counter(l)\n    c = 0\n    for i in m:\n        for j in range(1, m[i] + 1):\n            if m[j] >= i:\n                c += 1\n    print(c)", "def abc(val, l):\n    i = 0\n    j = len(l) - 1\n    ans = -1\n    while i <= j:\n        mid = i + (j - i) // 2\n        if l[mid][0] >= val:\n            ans = mid\n            j = mid - 1\n        else:\n            i = mid + 1\n    return ans\nt = int(input())\nimport random\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    x = 0\n    c = []\n    for i in d.keys():\n        c.append([d[i], i])\n    c.sort()\n    ans = 0\n    for i in d.keys():\n        x = abc(i, c)\n        if x + 1:\n            for j in range(x, len(c)):\n                if d[i] >= c[j][1]:\n                    ans += 1\n    print(ans)", "def abc(val, l):\n    i = 0\n    j = len(l) - 1\n    ans = -1\n    while i <= j:\n        mid = i + (j - i) // 2\n        if l[mid][0] >= val:\n            ans = mid\n            j = mid - 1\n        else:\n            i = mid + 1\n    return ans\nt = int(input())\nimport random\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in l:\n        try:\n            d[i] += 1\n        except:\n            d[i] = 1\n    x = 0\n    c = []\n    for i in d.keys():\n        c.append([d[i], i])\n    c.sort()\n    ans = 0\n    for i in d.keys():\n        x = abc(i, c)\n        if x + 1:\n            for j in range(x, len(c)):\n                if d[i] >= c[j][1]:\n                    ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    arr.sort()\n    dic = dict()\n    sett = set(arr)\n    answer = 0\n    cnt = [0] * 1000001\n    for i in arr:\n        cnt[i] += 1\n    for x in sett:\n        for y in range(cnt[x] + 1):\n            if x <= cnt[y]:\n                answer += 1\n    print(answer)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    fd = defaultdict(int)\n    count = 0\n    for i in a:\n        fd[i] += 1\n    for i in list(fd):\n        j = fd[i]\n        if j >= i:\n            count += 1\n            for k in range(i + 1, j + 1):\n                if fd[k] >= i:\n                    count += 2\n    print(count)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    c = Counter(l)\n    from bisect import bisect_right as br\n    arr = sorted(list(c.keys()))\n    cnt = 0\n    alen = len(arr)\n    s = set()\n    for i in range(alen):\n        a = arr[i]\n        x = a\n        for j in range(alen):\n            if arr[j] > c[a]:\n                break\n            if c[arr[j]] >= a:\n                print\n                s.add((arr[i], arr[j]))\n    print(len(s))", "import itertools\nfrom collections import Counter\nt = int(input())\nwhile t:\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ac = Counter(ar)\n    count = 0\n    for i in ac:\n        cnt = ac[i]\n        for j in range(1, cnt + 1):\n            if j in ac and j != i:\n                if ac[j] >= i:\n                    count += 1\n        if ac[i] >= i:\n            count += 1\n    print(count)\n    t = t - 1", "def countOrderPair(arr, n):\n    hashmap = {}\n    ans = 0\n    for i in range(n):\n        if arr[i] in hashmap:\n            hashmap[arr[i]] += 1\n        else:\n            hashmap[arr[i]] = 1\n    for num in hashmap:\n        count = hashmap[num]\n        for k in range(1, count + 1):\n            if k in hashmap and k != num:\n                if hashmap[k] >= num:\n                    ans += 1\n        if hashmap[num] >= num:\n            ans += 1\n    return ans\nfor i in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(countOrderPair(arr, N))", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    a = input()\n    l = list(map(int, a.split()))\n    m = Counter(l)\n    c = 0\n    for i in m:\n        for j in range(1, m[i] + 1):\n            if m[j] >= i:\n                if i == j:\n                    c = c + 1\n                else:\n                    c = c + 1\n    print(c)", "for __ in range(int(input())):\n    N = input()\n    A = map(int, input().split())\n    d = {}\n    for i in A:\n        d[i] = d.get(i, 0) + 1\n    m = max(d.keys())\n    ans = 0\n    for i in sorted(d.keys()):\n        diff = d[i] - i\n        if diff >= 0:\n            ans += 1\n            for j in range(i + 1, min(d[i] + 1, m + 1)):\n                if d.get(j, -1) >= i:\n                    ans += 2\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    c = Counter(l)\n    cnt = 0\n    for i in c:\n        curr = c[i]\n        for j in range(1, c[i] + 1):\n            if c[j] >= i:\n                if i == j:\n                    cnt += 1\n                else:\n                    cnt += 1\n    print(cnt)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    cnt = [0] * 1000001\n    for i in l:\n        cnt[i] += 1\n    ans = 0\n    s = set(l)\n    for i in s:\n        for j in range(cnt[i] + 1):\n            if cnt[j] >= i:\n                ans += 1\n    print(ans)", "def main():\n    T = int(input())\n    for i in range(T):\n        N = int(input())\n        A = [int(item) for item in input().split()]\n        d = [0] * (max(A) + 1)\n        for a in A:\n            d[a] += 1\n        A = list(set(A))\n        A.sort()\n        R = set()\n        for i in A:\n            for j in A:\n                if d[i] < j:\n                    break\n                if d[i] >= j and d[j] >= i:\n                    R.add((i, j))\n                    R.add((j, i))\n        print(len(R))\nmain()", "for i in range(int(input())):\n    count = {}\n    pair = 0\n    N = int(input())\n    inp = input().split(' ')\n    for j in range(N):\n        if inp[j] in count:\n            count[inp[j]] = count[inp[j]] + 1\n        else:\n            count[inp[j]] = 1\n    for key in count.keys():\n        for k in range(int(key), count[key] + 1):\n            if str(k) in count and count[str(k)] >= int(key):\n                if int(key) == k:\n                    pair = pair + 1\n                else:\n                    pair = pair + 2\n    print(pair)", "T = int(input())\nfor i in range(T):\n    count = {}\n    pair = 0\n    N = int(input())\n    inp = input().split(' ')\n    for j in range(N):\n        if inp[j] in count:\n            count[inp[j]] = count[inp[j]] + 1\n        else:\n            count[inp[j]] = 1\n    for key in count.keys():\n        for k in range(int(key), count[key] + 1):\n            if str(k) in count and count[str(k)] >= int(key):\n                if int(key) == k:\n                    pair = pair + 1\n                else:\n                    pair = pair + 2\n    print(pair)", "from collections import Counter\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        alist = [int(x) for x in input().split()]\n        actr = Counter(alist)\n        tally = 0\n        for key in actr:\n            for i in range(actr[key] + 1):\n                if i in actr and actr[i] >= key:\n                    tally += 1\n        print(tally)\nmain()", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    L = list(map(int, input().split()))\n    k = max(L)\n    f = [0] * (k + 1)\n    for i in L:\n        f[i] += 1\n    res = 0\n    for i in range(1, k + 1):\n        if f[i] >= i:\n            res += 1\n        for j in range(i + 1, f[i] + 1):\n            if j <= k and f[j] >= i:\n                res += 2\n    print(res)", "from collections import Counter\nfrom itertools import takewhile\nt = int(input())\nfor _ in range(t):\n    input()\n    f = Counter(map(int, input().split()))\n    a = sorted(f)\n    print(sum((f[j] >= i for i in a for j in takewhile(lambda j: f[i] >= j, a))))", "import sys\ntry:\n    sys.stdin = open('inp', 'r')\nexcept:\n    pass\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ocr = {}\n    for i in a:\n        ocr[i] = 1 + ocr.get(i, 0)\n    a = list(sorted(set(a)))\n    res = 0\n    for i in range(len(a)):\n        ed = ocr[a[i]]\n        for j in range(i, len(a)):\n            if a[j] > ed:\n                break\n            if ocr[a[j]] >= a[i]:\n                res += 1 if a[i] == a[j] else 2\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = max(arr)\n    b = [0] * (k + 1)\n    for i in arr:\n        b[i] += 1\n    count = 0\n    for i in range(1, len(b)):\n        c = b[i]\n        if c >= i:\n            count += 1\n        for j in range(i + 1, c + 1):\n            if j < k + 1:\n                if b[j] >= i:\n                    count += 2\n    print(count)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (ans, c) = (0, 0)\n    d = Counter(a)\n    a = list(d.keys())\n    a.sort()\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            if d[a[i]] < a[j]:\n                break\n            if d[a[i]] >= a[j] and d[a[j]] >= a[i]:\n                if a[i] == a[j]:\n                    ans += 1\n                else:\n                    ans += 2\n    print(ans)", "def possiblilties_builder(X):\n    counter = 0\n    for (val, count) in X.items():\n        for a in range(1, count + 1):\n            if val == a:\n                counter += 1\n            else:\n                try:\n                    if X[a] >= val:\n                        counter += 1\n                except KeyError:\n                    continue\n    return counter\n\ndef foo():\n    T = int(input())\n    for i in range(T):\n        pair_count = 0\n        N = int(input())\n        A = map(int, input().split(' '))\n        counts = {}\n        for element in A:\n            if element not in counts.keys():\n                counts[element] = 1\n            else:\n                counts[element] += 1\n        data_mat = possiblilties_builder(counts)\n        print(data_mat)\nfoo()", "from collections import Counter\nfrom itertools import takewhile\nt = int(input())\nfor _ in range(t):\n    input()\n    d = Counter(map(int, input().split()))\n    a = sorted(d)\n    print(sum((d[j] >= i for i in a for j in takewhile(lambda x: x <= d[i], a))))", "from collections import Counter\nfrom itertools import takewhile\nt = int(input())\nfor _ in range(t):\n    input()\n    d = Counter(map(int, input().split()))\n    a = sorted(d)\n    print(sum((d[j] >= i for i in d for j in takewhile(lambda x: x <= d[i], a))))", "from collections import Counter\nfrom itertools import takewhile\nt = int(input())\nfor _ in range(t):\n    input()\n    d = Counter(map(int, input().split()))\n    a = sorted(d)\n    print(sum((d[j] >= i for i in d for j in takewhile(lambda x: x <= d[i], a))))", "from collections import Counter\nfrom itertools import takewhile\nt = int(input())\nfor _ in range(t):\n    input()\n    d = Counter(map(int, input().split()))\n    a = sorted(d)\n    print(sum((d[j] >= i for i in d for j in takewhile(lambda x: x <= d[i], a))))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    input()\n    d = Counter(map(int, input().split()))\n    print(sum((d[j] >= i for i in d for j in range(1, d[i] + 1))))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    input()\n    d = Counter(map(int, input().split()))\n    print(sum((d[j + 1] >= i for i in d for j in range(d[i]))))", "t = int(input())\nfor _ in range(t):\n    a = [0] * 1000000\n    input()\n    m = 1\n    for x in map(int, input().split()):\n        m = max(m, x)\n        a[x - 1] += 1\n    print(sum((a[j] > i for i in range(m) for j in range(a[i]))))", "t = int(input())\nfor _ in range(t):\n    (mn, mx) = (1000000, 1)\n    a = [0] * mn\n    input()\n    for x in map(int, input().split()):\n        (mn, mx) = (min(mn, x), max(mx, x))\n        a[x - 1] += 1\n    print(sum((a[j] > i for i in range(mx) for j in range(a[i]))))", "t = int(input())\nfor _ in range(t):\n    (mn, mx) = (1000000, 1)\n    a = [0] * mn\n    input()\n    for x in map(int, input().split()):\n        (mn, mx) = (min(mn, x), max(mx, x))\n        a[x - 1] += 1\n    print(sum((a[j] > i for i in range(mn - 1, mx) for j in range(a[i]))))", "for i in range(int(input())):\n    input()\n    array = list(map(int, input().split()))\n    srtd_set = sorted(list(set(array)))\n    dict_array = {l: 0 for l in srtd_set}\n    pairs = 0\n    for i in array:\n        dict_array[i] += 1\n    for i in dict_array:\n        for j in dict_array:\n            if j > dict_array[i]:\n                break\n            if dict_array[j] >= i and dict_array[i] >= j:\n                pairs += 1\n    print(pairs)", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    d = {}\n    m = []\n    for i in arr:\n        if i in d:\n            d[i] += 1\n        else:\n            m.append(i)\n            d[i] = 1\n    ct = 0\n    m.sort()\n    for i in m:\n        for j in m:\n            if d[i] >= j:\n                if d[j] >= i:\n                    ct += 1\n            else:\n                break\n    print(ct)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    numbers = {}\n    for i in range(len(a)):\n        if numbers.get(a[i]) == None:\n            numbers[a[i]] = 0\n        numbers[a[i]] += 1\n    pairs = set()\n    for i in numbers:\n        if i < numbers[i]:\n            pairs.add((i, i))\n            while i != numbers[i]:\n                if numbers.get(numbers[i]) != None and numbers.get(numbers[i]) >= i:\n                    pairs.add((i, numbers[i]))\n                    pairs.add((numbers[i], i))\n                numbers[i] -= 1\n        elif i == numbers[i]:\n            pairs.add((i, numbers[i]))\n    print(len(list(pairs)))", "from collections import Counter\ntc = int(input())\nwhile tc > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = list(set(a))\n    b.sort()\n    freqCounter = Counter(a)\n    ans = 0\n    for i in b:\n        for j in b:\n            if freqCounter[i] >= j and freqCounter[j] >= i:\n                ans += 1\n            elif freqCounter[i] < j:\n                break\n    print(ans)\n    tc -= 1", "tc = int(input())\nwhile tc > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    mx = max(a)\n    freqCounter = [0] * (mx + 5)\n    for i in a:\n        freqCounter[i] += 1\n    z = list(filter(lambda x: freqCounter[x] != 0, range(mx + 1)))\n    ans = 0\n    for j in range(len(z)):\n        for k in range(j, len(z)):\n            if freqCounter[z[j]] >= z[k] and freqCounter[z[k]] >= z[j]:\n                if k == j:\n                    ans += 1\n                else:\n                    ans += 2\n            elif freqCounter[z[j]] < z[k]:\n                break\n    print(ans)\n    tc -= 1", "from collections import *\nimport bisect\n\ndef get_key(o):\n    return o[1]\n\ndef solve(n, arr):\n    h = defaultdict(int)\n    for i in range(n):\n        h[arr[i]] += 1\n    l = list(h.items())\n    l.sort(key=get_key)\n    keys = []\n    values = []\n    for i in range(len(l)):\n        keys.append(l[i][0])\n        values.append(l[i][1])\n    n = len(l)\n    s = set()\n    c = 0\n    for i in range(n):\n        index = bisect.bisect_left(values, keys[i])\n        for j in range(index, n):\n            if values[i] >= keys[j]:\n                c += 1\n    return c\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(solve(n, arr))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    k = max(arr)\n    b = [0] * (k + 1)\n    for i in arr:\n        b[i] += 1\n    count = 0\n    for i in range(1, len(b)):\n        c = b[i]\n        if c >= i:\n            count += 1\n        for j in range(i + 1, c + 1):\n            if j < k + 1:\n                if b[j] >= i:\n                    count += 2\n    print(count)", "t = int(input())\nans = []\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    m = max(ar)\n    num = [0 for x in range(m + 1)]\n    for j in range(n):\n        num[ar[j]] += 1\n    z = list(filter(lambda x: num[x] != 0, range(m + 1)))\n    c = 0\n    for j in range(len(z)):\n        for k in range(j, len(z)):\n            if num[z[j]] >= z[k] and num[z[k]] >= z[j]:\n                if k == j:\n                    c += 1\n                else:\n                    c += 2\n            elif num[z[j]] < z[k]:\n                break\n    ans.append(c)\nfor i in ans:\n    print(i)", "def main():\n    import collections\n    test_cases = int(input())\n    for _ in range(test_cases):\n        n = int(input())\n        a = [int(x) for x in input().split()]\n        ans = 0\n        counter = collections.Counter(a)\n        items = [x for x in counter.keys()]\n        for key in items:\n            for i in range(0 + 1, counter[key] + 1):\n                z = counter[i]\n                if z >= key:\n                    ans = ans + 1\n        print(ans)\nmain()", "import math\nfrom collections import defaultdict\nfrom itertools import permutations\nfrom itertools import combinations\nfor i in range(int(input())):\n    n = int(input())\n    d = defaultdict(int)\n    l = list(map(int, input().split()))\n    for i in range(len(l)):\n        d[l[i]] += 1\n    c = 0\n    l = [0] * (n + 1)\n    for i in d:\n        l[i] = d[i]\n    for i in d:\n        for j in range(1, d[i] + 1):\n            if i <= l[j]:\n                c += 1\n    print(c)", "I = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    n = int(input())\n    d = {}\n    a = list(I())\n    count = 0\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for y in d:\n        x = d[y]\n        for i in range(y, x + 1):\n            if d.get(i, 0) >= y:\n                if i != y:\n                    count += 2\n                else:\n                    count += 1\n    print(count)", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    carr = [0] * (arr[-1] + 1)\n    count = 1\n    sharr = []\n    for i in range(n - 1):\n        if arr[i] == arr[i + 1]:\n            count += 1\n        else:\n            carr[arr[i]] = count\n            sharr.append(arr[i])\n            count = 1\n    carr[arr[-1]] = count\n    sharr.append(arr[-1])\n    count = 0\n    for i in sharr:\n        for j in sharr:\n            if carr[i] < j:\n                break\n            if carr[i] >= j and carr[j] >= i:\n                count += 1\n    print(count)\n    t -= 1", "T = int(input())\nwhile T:\n    N = int(input())\n    A = list(map(int, input().split()))\n    occur = dict()\n    distinct_nums = []\n    count_pairs = 0\n    for i in range(N):\n        if A[i] not in occur:\n            occur[A[i]] = 1\n            distinct_nums.append(A[i])\n        else:\n            occur[A[i]] += 1\n    for i in range(len(distinct_nums)):\n        num = distinct_nums[i]\n        num_occur = occur[num]\n        for j in range(num, num_occur + 1):\n            if j in occur and occur[j] >= num:\n                if num == j:\n                    count_pairs += 1\n                else:\n                    count_pairs += 2\n    print(count_pairs)\n    T -= 1", "for _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    P = {}\n    k = []\n    for x in A:\n        if x in P:\n            P[x] += 1\n        else:\n            k.append(x)\n            P[x] = 1\n    count = 0\n    k.sort()\n    for i in k:\n        for j in k:\n            if P[i] >= j:\n                if P[j] >= i:\n                    count += 1\n            else:\n                break\n    print(count)", "from bisect import bisect_right as bl\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    ans = 0\n    for i in a:\n        d[i] = d.get(i, 0) + 1\n    for i in d:\n        for j in range(i, d[i] + 1):\n            if d.get(j, 0) >= i:\n                if j != i:\n                    ans += 2\n                else:\n                    ans += 1\n    print(ans)", "def countOrderPair(arr, n):\n    hashmap = {}\n    ans = 0\n    for i in range(n):\n        if arr[i] in hashmap:\n            hashmap[arr[i]] += 1\n        else:\n            hashmap[arr[i]] = 1\n    for num in hashmap:\n        count = hashmap[num]\n        for k in range(1, count + 1):\n            if k in hashmap and k != num:\n                if hashmap[k] >= num:\n                    ans += 1\n        if hashmap[num] >= num:\n            ans += 1\n    return ans\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(countOrderPair(arr, N))", "for _ in range(int(input())):\n    n = input()\n    int(n)\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(len(l)):\n        if l[i] in d:\n            d[l[i]] += 1\n        else:\n            d[l[i]] = 1\n    c = 0\n    for i in d:\n        for j in range(1, d[i] + 1):\n            if d[i] >= j and j in d:\n                if d[j] >= i:\n                    c += 1\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    c = 0\n    d = {}\n    for i in a:\n        d[i] = 0\n    for i in a:\n        d[i] += 1\n    a = list(set(a))\n    a.sort()\n    for i in range(len(a)):\n        for j in range(i, len(a)):\n            x = a[i]\n            y = a[j]\n            if d[x] >= y and d[y] >= x:\n                if x == y:\n                    c += 1\n                else:\n                    c += 2\n            if d[x] < y:\n                break\n    print(c)", "T = int(input())\nwhile T != 0:\n    count = 0\n    N = int(input())\n    l = list(map(int, input().split()))\n    m = [0] * 1000000\n    for i in range(N):\n        m[l[i]] += 1\n    t = max(l)\n    for i in range(1, t + 1):\n        a = m[i]\n        for j in range(1, a + 1):\n            if m[j] >= i:\n                count += 1\n    print(count)\n    T = T - 1", "t = int(input())\nwhile t != 0:\n    count = 0\n    N = int(input())\n    l = list(map(int, input().split()))\n    q = [0] * 10 ** 6\n    k = max(l)\n    for i in range(len(l)):\n        q[l[i]] += 1\n    for i in range(1, k + 1):\n        a = q[i]\n        for j in range(1, a + 1):\n            if a >= j and q[j] >= i:\n                count += 1\n    print(count)\n    t = t - 1", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    dp = {}\n    for i in a:\n        if dp.get(i):\n            dp[i] += 1\n        else:\n            dp[i] = 1\n    ans = 0\n    b = []\n    for i in dp:\n        if dp[i] >= i:\n            ans += 1\n        b.append((dp[i], i))\n    a = list(dp)\n    a.sort()\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            if dp[a[i]] >= a[j] and dp[a[j]] >= a[i]:\n                ans += 2\n            elif dp[a[i]] < a[j]:\n                break\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(c) for c in input().split()]\n    s = 0\n    d = []\n    h = [0] * (max(a) + 1)\n    for i in range(n):\n        h[a[i]] += 1\n    for i in range(len(h)):\n        if h[i] >= 1:\n            d.append([i, h[i]])\n    d = sorted(d, key=lambda x: x[0])\n    for i in range(len(d)):\n        temp = d[i][0]\n        temp1 = d[i][1]\n        for j in range(i, len(d)):\n            if d[j][0] > temp1:\n                break\n            if d[j][1] >= temp:\n                if i == j:\n                    s += 1\n                else:\n                    s += 2\n    print(s)", "for i in range(0, int(input())):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    d = {}\n    for item in l1:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] = d[item] + 1\n    c = 0\n    key_max = max(d.values())\n    key_min = min(d.values())\n    key_max2 = max(d.keys())\n    d = dict(((k, v) for (k, v) in d.items() if k <= key_max and k <= key_max2))\n    for i in d:\n        for j in range(1, d[i] + 1):\n            if j in d:\n                if d[i] >= j and d[j] >= i:\n                    c += 1\n    print(c)", "test = int(input())\nwhile test:\n    input()\n    num = input().split(' ')\n    num = [int(i) for i in num]\n    dic = {}\n    for i in num:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    count = 0\n    for key in dic:\n        for val in range(1, dic[key] + 1):\n            if val in dic and dic[val] >= key:\n                count += 1\n    print(count)\n    test -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0] * (n + 1)\n    for x in a:\n        b[x] += 1\n    c = 0\n    for i in range(1, len(b)):\n        if i <= b[i]:\n            c += 1\n        for j in range(i + 1, b[i] + 1):\n            if i <= b[j] and j <= b[i]:\n                c += 2\n    print(c)", "t = int(input())\nfor x in range(t):\n    n = int(input())\n    l = [int(y) for y in input().split()]\n    d = {}\n    for each in l:\n        try:\n            d[each] += 1\n        except:\n            d[each] = 1\n    cnt = 0\n    for (key, values) in d.items():\n        for y in range(values, 0, -1):\n            try:\n                if d[y] >= key:\n                    cnt += 1\n            except:\n                pass\n    print(cnt)", "import heapq\nfrom collections import Counter\n\ndef readInt():\n    return int(input())\n\ndef readInts():\n    return [int(x) for x in input().split()]\n\ndef cases():\n    numCases = readInt()\n    for _ in range(numCases):\n        n = readInt()\n        sequence = readInts()\n        yield (n, sequence)\n\ndef solve(n, sequence):\n    pairs = 0\n    seen = []\n    items = sorted(Counter(sequence).items())\n    for (a, count) in items:\n        while len(seen) > 0 and seen[0][0] < a:\n            heapq.heappop(seen)\n        for (bcount, b) in seen:\n            if count >= b and bcount >= a:\n                pairs += 2\n        if count >= a:\n            heapq.heappush(seen, (count, a))\n            pairs += 1\n    return pairs\nfor data in cases():\n    print(solve(*data))", "def search(b, ele, n):\n    start = 0\n    end = n - 1\n    while start <= end:\n        mid = int((start + end) / 2)\n        if b[mid] == ele:\n            return mid\n        if b[mid] > ele:\n            end = mid - 1\n        else:\n            start = mid + 1\n    if b[mid] >= ele:\n        return mid\n    return mid - 1\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    b = []\n    c = [0]\n    i = 0\n    j = 0\n    while i < n:\n        b.append(a[i])\n        while i < n and a[i] == b[j]:\n            c[j] += 1\n            i += 1\n        j += 1\n        c.append(0)\n    c.pop()\n    ans = 0\n    for i in range(j):\n        k = i\n        while k < j and c[i] >= b[k]:\n            if c[k] >= b[i]:\n                if k == i:\n                    ans += 1\n                else:\n                    ans += 2\n            k += 1\n    print(ans)", "for _ in range(int(input())):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    biggestNumber = max(A)\n    freq = ['*'] + [0] * biggestNumber\n    for a in A:\n        freq[a] += 1\n    biggestFreq = max(freq[1:])\n    goodAnswers = 0\n    for a in range(1, min(biggestFreq, biggestNumber) + 1):\n        for b in range(1, min(biggestFreq, biggestNumber, freq[a]) + 1):\n            if freq[b] >= a:\n                goodAnswers += 1\n    print(goodAnswers)", "import bisect\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    mp = {}\n    alist = set(arr)\n    alist = list(alist)\n    alist.sort()\n    l = len(alist)\n    for i in arr:\n        if i in mp:\n            mp[i] += 1\n        else:\n            mp[i] = 1\n    cnt = 0\n    for i in alist:\n        if mp[i] >= i:\n            cnt += 1\n        index = bisect.bisect_right(alist, mp[i])\n        for j in range(index):\n            if i == alist[j]:\n                continue\n            if mp[alist[j]] >= i:\n                cnt += 1\n    print(cnt)", "from collections import defaultdict\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    fq = defaultdict(int)\n    for w in arr:\n        fq[w] += 1\n    dit = dict(fq)\n    ans = 0\n    for (key, value) in dit.items():\n        if key <= value:\n            i = key + 1\n            ans += 1\n            while i <= value:\n                if i in dit and dit[i] >= key:\n                    ans += 2\n                i += 1\n    print(ans)\n    t -= 1", "from collections import Counter\nT = int(input())\nfor q in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    count = Counter()\n    for i in range(N):\n        count[A[i]] += 1\n    ans = 0\n    for key in count:\n        for b in range(1, count[key] + 1):\n            if count[b] >= key:\n                ans += 1\n    print(ans)", "def fun():\n    test = int(input())\n    for i in range(test):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        d = dict()\n        for i in arr:\n            d[i] = d.get(i, 0) + 1\n        ans = 0\n        doubles = 0\n        for i in d.keys():\n            if d[i] >= i:\n                ans += 1\n        for i in d.keys():\n            if d[i] > i:\n                for j in range(i + 1, d[i] + 1):\n                    if d.get(j, 0) >= i:\n                        doubles += 1\n        print(doubles * 2 + ans)\nfun()", "def solve(N, A):\n    F = [0] * (max(A) + 1)\n    for x in A:\n        F[x] += 1\n    ret = 0\n    for (i, f) in enumerate(F):\n        for j in range(1, f + 1):\n            if j >= len(F):\n                break\n            if F[j] >= i:\n                ret += 1\n    return ret\nT = int(input())\nfor i in range(0, T):\n    N = int(input())\n    A = [int(s) for s in input().split(' ') if s != '']\n    print(solve(N, A))", "for q in range(int(input())):\n    n = int(input())\n    l = [int(e) for e in input().split()]\n    m = {}\n    s = []\n    for i in l:\n        if i in m:\n            m[i] += 1\n        else:\n            m[i] = 1\n            s.append(i)\n    s.sort()\n    c = 0\n    for i in s:\n        for j in range(i, m[i] + 1):\n            if j == i:\n                c += 1\n            elif j in m and m[j] >= i:\n                c += 2\n    print(c)", "tests = int(input())\nfor t in range(tests):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    count = {}\n    for i in range(n):\n        el = arr[i]\n        count[el] = count.get(el, 0) + 1\n    result = 0\n    for key in count.keys():\n        count1 = count[key]\n        for i in range(1, count1 + 1):\n            count2 = count.get(i, 0)\n            if count2 >= key:\n                result += 1\n    print(result)", "t = int(input())\nfor k in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict()\n    for i in range(n):\n        if a[i] in d:\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n    nos = list(d.keys())\n    freq = list(d.values())\n    l = len(nos)\n    ans = 0\n    for i in d:\n        f = d[i]\n        for j in range(1, f + 1):\n            if j in d and d[j] >= i:\n                ans += 1\n    print(ans)"]