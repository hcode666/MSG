["import sys\nimport os\nimport math\nimport collections\nt = int(input())\nfor i in range(t):\n    (m, s) = map(str, input().split())\n    m = int(m)\n    s = s.split('*')\n    ans = 1\n    for i in range(0, len(s)):\n        if i % 3 == 0:\n            ans = ans * pow(int(s[i]), int(s[i + 2]), m) % m\n    print(ans % m)", "import sys\nimport os\nimport math\nimport collections\nt = int(input())\nfor i in range(t):\n    (m, s) = map(str, input().split())\n    m = int(m)\n    s = s.split('*')\n    ans = 1\n    for i in range(0, len(s)):\n        if i % 3 == 0:\n            ans = ans * pow(int(s[i]), int(s[i + 2]), m) % m\n    print(ans % m)", "t = int(input())\nfor i in range(t):\n    (m, s) = map(str, input().split())\n    m = int(m)\n    s = s.split('*')\n    ans = 1\n    for i in range(0, len(s)):\n        if i % 3 == 0:\n            ans = ans * pow(int(s[i]), int(s[i + 2]), m) % m\n    print(ans % m)", "def csti(s):\n    g = [i for i in range(len(s)) if s[i] == '*']\n    return [s[g[i] + 1:g[i + 1]] for i in range(len(g) - 1)]\nfor _ in range(int(input())):\n    (m, s) = map(str, input().split())\n    m = int(m)\n    s += '*'\n    k = '*' + ''.join([s[i] for i in range(len(s) - 1) if not (s[i] == '*' and s[i + 1] == '*')]) + '*'\n    q = csti(k)\n    b = [pow(int(q[i]), int(q[i + 1]), m) for i in range(0, len(q), 2)]\n    ans = 1\n    for i in range(len(b)):\n        ans = ans * b[i] % m\n    print(ans)", "def csti(s):\n    g = [i for i in range(len(s)) if s[i] == '*']\n    f = []\n    for i in range(len(g) - 1):\n        c = s[g[i] + 1:g[i + 1]]\n        f.append(c)\n    return f\nfor _ in range(int(input())):\n    (m, s) = map(str, input().split())\n    m = int(m)\n    s += '*'\n    k = '*' + ''.join([s[i] for i in range(len(s) - 1) if not (s[i] == '*' and s[i + 1] == '*')]) + '*'\n    q = csti(k)\n    b = [pow(int(q[i]), int(q[i + 1]), m) for i in range(0, len(q), 2)]\n    ans = 1\n    for i in range(len(b)):\n        ans = ans * b[i] % m\n    print(ans)", "def res(s):\n    return '*' + ''.join([s[i] for i in range(len(s) - 1) if not (s[i] == '*' and s[i + 1] == '*')]) + '*'\n\ndef csti(s):\n    g = []\n    for i in range(len(s)):\n        if s[i] == '*':\n            g.append(i)\n    f = []\n    for i in range(len(g) - 1):\n        c = s[g[i] + 1:g[i + 1]]\n        f.append(c)\n    return f\nfor _ in range(int(input())):\n    (m, s) = map(str, input().split())\n    m = int(m)\n    s += '*'\n    k = res(s)\n    q = csti(k)\n    b = []\n    for i in range(0, len(q), 2):\n        r = pow(int(q[i]), int(q[i + 1]), m)\n        b.append(r)\n    ans = 1\n    for i in range(len(b)):\n        ans = ans * b[i] % m\n    print(ans)", "def res(s):\n    rv = '*'\n    for i in range(len(s) - 1):\n        if s[i] == '*' and s[i + 1] == '*':\n            continue\n        else:\n            rv += s[i]\n    rv += '*'\n    return rv\n\ndef csti(s):\n    g = []\n    for i in range(len(s)):\n        if s[i] == '*':\n            g.append(i)\n    f = []\n    for i in range(len(g) - 1):\n        c = s[g[i] + 1:g[i + 1]]\n        f.append(c)\n    return f\nfor _ in range(int(input())):\n    (m, s) = map(str, input().split())\n    m = int(m)\n    s += '*'\n    k = res(s)\n    q = csti(k)\n    b = []\n    for i in range(0, len(q), 2):\n        r = pow(int(q[i]), int(q[i + 1]), m)\n        b.append(r)\n    ans = 1\n    for i in range(len(b)):\n        ans = ans * b[i] % m\n    print(ans)", "for _ in range(int(input())):\n    (M, S) = input().split()\n    n = 1\n    for j in range(len(S)):\n        if S[j] == '*' and S[j + 1] == '*':\n            k = j - 1\n            while S[k] != '*':\n                if k == 0:\n                    break\n                else:\n                    k -= 1\n            if k != 0:\n                k += 1\n            r = int(S[k:j])\n            k = j + 2\n            while S[k] != '*':\n                if k == len(S) - 1:\n                    k += 1\n                    break\n                else:\n                    k += 1\n            if k == j + 2:\n                k += 1\n            a = int(S[j + 2:k])\n            n *= pow(r, a, int(M))\n            n = n % int(M)\n    print(n)", "def mi(a):\n    (a, i, c) = (a + '*', 0, [])\n    while i < len(a):\n        b = ''\n        while a[i] != '*':\n            b += str(a[i])\n            i += 1\n        if a[i] == '*':\n            c.append(b)\n        i += 1\n    return list(map(int, list(filter(lambda a: a != '', c))))\nfor _ in range(int(input())):\n    (m, i, j, r, z, p) = (str(input()), 0, '', '', [], 1)\n    while m[i] != ' ':\n        j += m[i]\n        i += 1\n    for i in range(i + 1, len(m)):\n        r += m[i]\n    (y, k) = (mi(r), int(j))\n    for i in range(0, len(y), 2):\n        z.append(pow(y[i], y[i + 1], k))\n    for i in range(len(z)):\n        p = p * z[i] % k\n    print(p)", "import re\nfor _ in range(int(input())):\n    (m, s) = input().split()\n    m = int(m)\n    ili = re.split('[^0-9]+', s)\n    res = 1\n    for i in range(0, len(ili), 2):\n        te = pow(int(ili[i]), int(ili[i + 1]), m)\n        res = res * te\n        res = res % m\n    print(res)", "def mi(a):\n    (a, i, c) = (a + '*', 0, [])\n    while i < len(a):\n        b = ''\n        while a[i] != '*':\n            b += str(a[i])\n            i += 1\n        if a[i] == '*':\n            c.append(b)\n        i += 1\n    return list(map(int, list(filter(lambda a: a != '', c))))\nfor _ in range(int(input())):\n    (m, i, j, r, z, p) = (str(input()), 0, '', '', [], 1)\n    while m[i] != ' ':\n        j += m[i]\n        i += 1\n    for i in range(i + 1, len(m)):\n        r += m[i]\n    (y, k) = (mi(r), int(j))\n    for i in range(0, len(y), 2):\n        z.append(pow(y[i], y[i + 1], k))\n    for i in range(len(z)):\n        p *= z[i]\n        p = p % k\n    print(p)", "def mi(a):\n    a += '*'\n    i = 0\n    c = []\n    while i < len(a):\n        b = ''\n        while a[i] != '*':\n            b += str(a[i])\n            i += 1\n        if a[i] == '*':\n            c.append(b)\n        i += 1\n    d = list(filter(lambda a: a != '', c))\n    e = list(map(int, d))\n    return e\nfor _ in range(int(input())):\n    m = str(input())\n    i = 0\n    j = ''\n    while m[i] != ' ':\n        j += m[i]\n        i += 1\n    k = int(j)\n    r = ''\n    for i in range(i + 1, len(m)):\n        r += m[i]\n    y = mi(r)\n    z = []\n    for i in range(0, len(y), 2):\n        b = y[i]\n        c = y[i + 1]\n        w = pow(b, c, k)\n        z.append(w)\n    p = 1\n    for i in range(len(z)):\n        p *= z[i]\n        p = p % k\n    print(p)", "def mi(a):\n    a += '*'\n    i = 0\n    c = []\n    while i < len(a):\n        b = ''\n        while a[i] != '*':\n            b += str(a[i])\n            i += 1\n        if a[i] == '*':\n            c.append(b)\n        i += 1\n    d = list(filter(lambda a: a != '', c))\n    e = list(map(int, d))\n    return e\nfor _ in range(int(input())):\n    m = str(input())\n    i = 0\n    j = ''\n    while m[i] != ' ':\n        j += m[i]\n        i += 1\n    k = int(j)\n    r = ''\n    for i in range(i + 1, len(m)):\n        r += m[i]\n    y = mi(r)\n    z = []\n    for i in range(0, len(y), 2):\n        b = y[i]\n        c = y[i + 1]\n        w = pow(b, c, k)\n        z.append(w)\n    p = 1\n    for i in range(len(z)):\n        p *= z[i]\n        p = p % k\n    print(p)", "from collections import defaultdict\n\ndef expo(a, b, m):\n    res = 1\n    while b > 0:\n        if b % 2 == 1:\n            res *= a\n        b //= 2\n        a = a * a % m\n    return res\ntest = int(input().strip())\nfor i in range(test):\n    (m, s) = input().strip().split()\n    m = int(m)\n    s = s.split('**')\n    s = '.'.join(s)\n    s = s.split('*')\n    ans = 1\n    for a in s:\n        ans *= expo(*map(int, a.split('.')), m)\n        ans %= m\n    print(ans)", "def valani():\n    (M, S) = map(str, input().split())\n    M = int(M)\n    S = S.split('*')\n    ans = 1\n    for i in range(0, len(S), 3):\n        ans = ans * pow(int(S[i]), int(S[i + 2]), M) % M\n    print(ans)\n    return 'Either you live it Or leave it...'\nt = int(input())\nfor _ in range(t):\n    meet = valani()", "t = int(input())\nwhile t:\n    t -= 1\n    (m, s) = input().split()\n    m = int(m)\n    prev = 0\n    curr = 0\n    array = []\n    op = []\n    s = s + '**'\n    for i in range(len(s) - 2):\n        if s[i + 1] == '*' and s[i] != '*':\n            curr = i\n            temp = int(s[prev:curr + 1])\n            array.append(temp)\n            if s[i + 2] == '*':\n                1\n            else:\n                prev = i + 2\n                curr = i + 2\n        elif s[i + 1] == '*' and s[i] == '*':\n            prev = i + 2\n            curr = i + 2\n    ans = 1\n    for i in range(0, len(array) - 1, 2):\n        ans = ans * pow(array[i], array[i + 1], m) % m\n    print(ans)", "for _ in range(int(input())):\n    (m, s) = input().split()\n    m = int(m)\n    prod = 1\n    cnt = 0\n    t = ''\n    (a, b) = (1, 1)\n    for i in range(len(s)):\n        if s[i] != '*':\n            t += s[i]\n        elif i + 1 < len(s):\n            if s[i] + s[i + 1] == '**':\n                a = int(t)\n                t = ''\n            elif s[i] == '*' and s[i - 1] != '*':\n                b = int(t)\n                t = ''\n                prod = prod * pow(a, b, m) % m\n    b = int(t)\n    prod = prod * pow(a, b, m) % m\n    print(prod)", "t = int(input())\nfor I in range(t):\n    (s1, s2) = [str(i) for i in input().split()]\n    M = int(s1)\n    a = []\n    f = ''\n    for i in s2:\n        if i.isdigit():\n            f += i\n        else:\n            if f != '':\n                a.append(f)\n            f = ''\n    if f != '':\n        a.append(f)\n    ans = 1\n    for i in range(0, len(a), 2):\n        value = pow(int(a[i]), int(a[i + 1]), M)\n        ans = ans % M * (value % M) % M\n    print(ans)", "t = int(input())\n\ndef expo(x, y, M):\n    curr = x % M\n    fin = 1\n    while y:\n        if y & 1:\n            fin *= curr % M\n        y >>= 1\n        curr = curr * curr % M\n    return fin % M\nfor I in range(t):\n    (s1, s2) = [str(i) for i in input().split()]\n    M = int(s1)\n    a = []\n    f = ''\n    for i in s2:\n        if i.isdigit():\n            f += i\n        else:\n            if f != '':\n                a.append(f)\n            f = ''\n    if f != '':\n        a.append(f)\n    ans = 1\n    for i in range(0, len(a), 2):\n        value = expo(int(a[i]), int(a[i + 1]), M)\n        ans = ans % M * (value % M) % M\n    print(ans)", "def powi(a, b, m):\n    ans = 1\n    while b > 0:\n        if b % 2 == 1:\n            ans = ans * a % m\n        a = a * a % m\n        b = b // 2\n    return ans\nt = int(input())\nfor i in range(t):\n    s = input().split(' ')\n    m = int(s[0])\n    ar = []\n    ar2 = s[1].split('*')\n    for i in ar2:\n        if i.isdigit():\n            ar.append(int(i))\n    ans = 1\n    i = 0\n    while i < len(ar):\n        ans = ans * powi(ar[i], ar[i + 1], m) % m\n        i += 2\n    print(ans)", "def pow(a, n, m):\n    ans = 1\n    while n != 0:\n        if n % 2 == 1:\n            ans = ans * a % m\n        a = a * a % m\n        n = n // 2\n    return ans\nfor _ in range(int(input())):\n    (m, s) = input().strip().split()\n    m = int(m)\n    s = s.split('*')\n    l = len(s)\n    i = 0\n    S = []\n    while i < l:\n        S.append((int(s[i]) % m, int(s[i + 2])))\n        i += 3\n    s = []\n    for i in S:\n        s.append(pow(i[0], i[1], m))\n    ans = 1\n    for i in s:\n        ans = ans * i % m\n    print(ans)", "for _ in range(int(input())):\n    (p, q) = input().split()\n    p = int(p)\n    s = q.replace('**', '*').split('*')\n    ans = 1\n    for i in range(0, len(s), 2):\n        (a, b) = (int(s[i]), int(s[i + 1]))\n        ans = ans * pow(a, b, p) % p\n    print(ans)", "import math\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (M, S) = input().split()\n    M = int(M)\n    S = list(S.split('*'))\n    ans = 1\n    for i in range(0, len(S), 3):\n        ans = ans * pow(int(S[i]), int(S[i + 2]), M) % M\n    print(ans)", "def mult(x, y, MOD):\n    x = x % MOD\n    y = y % MOD\n    return x * y % MOD\n\ndef power(base, exp, MOD):\n    base = base % MOD\n    res = 1\n    while exp > 0:\n        if exp % 2:\n            res = mult(res, base, MOD)\n        base = mult(base, base, MOD)\n        exp = exp // 2\n    return res\ntc = int(input())\nfor i in range(tc):\n    inp = input().strip().split()\n    M = int(inp[0])\n    S = inp[1]\n    nlist = S.split('*')\n    npairs = len(nlist) // 3\n    ans = 1\n    for j in range(npairs):\n        num1 = int(nlist[3 * j])\n        num2 = int(nlist[3 * j + 2])\n        ans = mult(ans, power(num1, num2, M), M)\n    print(ans)", "for tc in range(int(input())):\n    (m, expr) = map(str, input().split())\n    expr = expr.replace('**', '|')\n    sub_expr = expr.split('*')\n    ans = 1\n    for sub in sub_expr:\n        (a, b) = map(int, sub.split('|'))\n        ans *= pow(a, b, int(m))\n        ans %= int(m)\n    print(ans)", "import math\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (M, S) = input().split()\n    M = int(M)\n    S = list(S.split('*'))\n    ans = 1\n    for i in range(0, len(S), 3):\n        ans = ans * pow(int(S[i]), int(S[i + 2]), M) % M\n    print(ans)", "def exp(x, y, m):\n    result = 1\n    while y != 0:\n        if y & 1 == 1:\n            result = result * x % m\n        y = y >> 1\n        x = x * x % m\n    return result\n\ndef main():\n    t = int(input())\n    while t != 0:\n        s1 = input()\n        for i in range(len(s1)):\n            if s1[i] == ' ':\n                break\n        m = int(s1[:i])\n        s = s1[i + 1:]\n        f = 0\n        n = len(s)\n        i = 0\n        arr = list(map(str, s.split('*')))\n        n = len(arr)\n        ans = 1\n        while i < n:\n            x = int(arr[i])\n            y = int(arr[i + 2])\n            prod = exp(x, y, m)\n            ans = ans * (prod % m) % m\n            i = i + 3\n        ans = ans % m\n        print(ans)\n        t = t - 1\nmain()", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (m, s) = input().split()\n    m = int(m)\n    s = s.split('*')\n    ans = 1\n    for i in range(0, len(s), 3):\n        ans = ans * pow(int(s[i]), int(s[i + 2]), m) % m\n    print(ans)", "import re\ntestCase = int(input())\nfor test in range(testCase):\n    (m, expr) = input().strip().split()\n    m = int(m)\n    a = list(map(int, re.split('\\\\D+', expr)))\n    ans = 1\n    for i in range(0, len(a), 2):\n        ans = ans * pow(a[i], a[i + 1], m) % m\n    print(ans)", "def main():\n    try:\n        import gc\n        gc.disable()\n    except:\n        pass\n    for T in range(int(input())):\n        (M, S) = input().split()\n        M = int(M)\n        S = S.replace('**', '$')\n        S = S.split('*')\n        ans = 1\n        for a in S:\n            (x, y) = map(int, a.split('$'))\n            ans = ans % M * pow(x, y, M)\n        print(ans % M)\nmain()", "def main():\n    try:\n        from sys import stdin\n        input()\n    except:\n        pass\n    for data in stdin:\n        (M, S) = data.split()\n        M = int(M)\n        S = S.replace('**', '$')\n        S = S.split('*')\n        ans = 1\n        for a in S:\n            (x, y) = map(int, a.split('$'))\n            ans = ans % M * pow(x, y, M)\n        print(ans % M)\nmain()", "def main():\n    for T in range(int(input())):\n        (M, S) = input().split()\n        M = int(M)\n        S = S.replace('**', '$')\n        S = S.split('*')\n        ans = 1\n        for a in S:\n            (x, y) = map(int, a.split('$'))\n            ans = ans % M * pow(x, y, M)\n        print(ans % M)\nmain()", "import math\nfor _ in range(int(input())):\n    (M, S) = input().split()\n    M = int(M)\n    S = list(S.split('*'))\n    ans = 1\n    for i in range(0, len(S), 3):\n        ans = ans * pow(int(S[i]), int(S[i + 2]), M) % M\n    print(ans)", "__author__ = 'Nitin'\nimport sys\nT = int(sys.stdin.readline())\nwhile T > 0:\n    (M, S) = sys.stdin.readline().split()\n    M = int(M)\n    K = S.split('*')\n    sol = 1\n    for i in range(0, len(K) - 1):\n        if K[i + 1] == '':\n            A = int(K[i])\n            B = int(K[i + 2])\n            A = A % M\n            sol = sol * pow(A, B, M)\n            sol = sol % M\n    print(sol)\n    T = T - 1", "import sys\nT = int(sys.stdin.readline())\nwhile T > 0:\n    (M, S) = sys.stdin.readline().split()\n    M = int(M)\n    K = S.split('*')\n    sol = 1\n    for i in range(0, len(K) - 1):\n        if K[i + 1] == '':\n            A = int(K[i])\n            B = int(K[i + 2])\n            A = A % M\n            sol = sol * pow(A, B, M)\n            sol = sol % M\n    print(sol)\n    T = T - 1", "import math\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (M, S) = input().split()\n    M = int(M)\n    S = list(S.split('*'))\n    ans = 1\n    for i in range(0, len(S), 3):\n        ans = ans * pow(int(S[i]), int(S[i + 2]), M) % M\n    print(ans)", "import re\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    (m, s) = input().split(' ')\n    m = int(m)\n    l = len(s)\n    ans = int(1)\n    i = int(0)\n    while i < l:\n        x = int(0)\n        y = int(0)\n        while s[i] != '*':\n            x = x * 10 + int(s[i])\n            i = i + 1\n        i = i + 2\n        while 1:\n            y = y * 10 + int(s[i])\n            i = i + 1\n            if i == l:\n                break\n            if s[i] == '*':\n                i = i + 1\n                break\n        ans = ans * pow(x, y, m) % m\n    print(ans)", "def f(a, b):\n    if b == 0:\n        return 1\n    if b % 2 == 0:\n        x = f(a, b / 2) % m\n        return x * x % m\n    return x * f(a, b - 1) % m\nt = input()\nt = int(t)\nfor i in range(t):\n    s = input()\n    (n, d) = s.split(' ')\n    m = int(n)\n    exp = d.split('*')\n    mul = []\n    for k in range(int(len(exp) / 3)):\n        mul.append(pow(int(exp[k * 3]), int(exp[k * 3 + 2]), m))\n    ans = 1\n    for l in mul:\n        ans = ans * l % m\n    print(ans)", "def one_test():\n    inp = input().split()\n    m = int(inp[0])\n    d = [int(x) for x in inp[1].split('*') if x != '']\n    ret = 1\n    for i in range(0, len(d), 2):\n        ret = ret * pow(d[i], d[i + 1], m) % m\n    print(ret)\nt = int(input())\nfor _ in range(t):\n    one_test()", "__version__ = '0.81'\nVersion = 'NUMBTHY.PY, version ' + __version__ + ', 18 Nov, 2014, by Robert Campbell, <campbell@math.umbc.edu>'\nimport math\nimport functools\n\ndef gcd(a, b):\n    if a == 0:\n        return abs(b)\n    return abs(gcd(b % a, a))\n\ndef xgcd(a, b):\n    a1 = 1\n    b1 = 0\n    a2 = 0\n    b2 = 1\n    aneg = 1\n    bneg = 1\n    if a < 0:\n        a = -a\n        aneg = -1\n    if b < 0:\n        b = -b\n        bneg = -1\n    while 1:\n        quot = -(a // b)\n        a = a % b\n        a1 = a1 + quot * a2\n        b1 = b1 + quot * b2\n        if a == 0:\n            return (b, a2 * aneg, b2 * bneg)\n        quot = -(b // a)\n        b = b % a\n        a2 = a2 + quot * a1\n        b2 = b2 + quot * b1\n        if b == 0:\n            return (a, a1 * aneg, b1 * bneg)\n\ndef power_mod(b, e, n):\n    if e < 0:\n        e = -e\n        b = inverse_mod(b, n)\n    accum = 1\n    i = 0\n    bpow2 = b\n    while e >> i > 0:\n        if e >> i & 1:\n            accum = accum * bpow2 % n\n        bpow2 = bpow2 * bpow2 % n\n        i += 1\n    return accum\n\ndef inverse_mod(a, n):\n    (g, xa, xb) = xgcd(a, n)\n    if g != 1:\n        raise ValueError('***** Error *****: {0} has no inverse (mod {1}) as their gcd is {2}, not 1.'.format(a, n, g))\n    return xa % n\n\ndef is_prime(n):\n    if n < 0:\n        n = -n\n    if n < 2:\n        return False\n    if n in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29):\n        return True\n    return isprimeE(n, 2) and isprimeE(n, 3) and isprimeE(n, 5)\n\ndef factor(n):\n    if abs(n) == 1:\n        return 'Unable to factor ' + str(n)\n    factspow = []\n    currfact = None\n    for thefact in factors(n):\n        if thefact != currfact:\n            if currfact != None:\n                factspow += [(currfact, thecount)]\n            currfact = thefact\n            thecount = 1\n        else:\n            thecount += 1\n    factspow += [(thefact, thecount)]\n    return tuple(factspow)\n\ndef prime_divisors(n):\n    return tuple(set(factors(n)))\n\ndef euler_phi(n):\n    if n == 1:\n        return 1\n    if n <= 0:\n        return 0\n    return functools.reduce(lambda a, x: a * x[0] ** (x[1] - 1) * (x[0] - 1), factor(n), 1)\n\ndef carmichael_lambda(n):\n    if n == 1:\n        return 1\n    if n <= 0:\n        raise ValueError('*** Error ***:  Input n for carmichael_lambda(n) must be a positive integer.')\n\n    def _carmichael_lambda_primepow(theprime, thepow):\n        if theprime == 2 and thepow >= 3:\n            return 2 ** (thepow - 2)\n        else:\n            return (theprime - 1) * theprime ** (thepow - 1)\n    return functools.reduce(lambda accum, x: accum * x // gcd(accum, x), tuple((_carmichael_lambda_primepow(*primepow) for primepow in factor(n))), 1)\n\ndef is_primitive_root(g, n):\n    if gcd(g, n) != 1:\n        return False\n    order = euler_phi(n)\n    if carmichael_lambda(n) != order:\n        return False\n    orderfacts = prime_divisors(order)\n    for fact in orderfacts:\n        if pow(g, order // fact, n) == 1:\n            return False\n    return True\n\ndef sqrtmod(a, n):\n    if not isprime(n):\n        raise ValueError('*** Error ***:  Currently can only compute sqrtmod(a,n) for prime n.')\n    if pow(a, (n - 1) // 2, n) != 1:\n        raise ValueError('*** Error ***:  a is not quadratic residue, so sqrtmod(a,n) has no answer.')\n    return TSRsqrtmod(a, n - 1, n)\n\ndef TSRsqrtmod(a, grpord, p):\n    ordpow2 = 0\n    non2 = grpord\n    while not non2 & 1 == 1:\n        ordpow2 += 1\n        non2 //= 2\n    for g in range(2, grpord - 1):\n        if pow(g, grpord // 2, p) != 1:\n            break\n    g = pow(g, non2, p)\n    gpow = 0\n    atweak = a\n    for pow2 in range(0, ordpow2 + 1):\n        if pow(atweak, non2 * 2 ** (ordpow2 - pow2), p) != 1:\n            gpow += 2 ** (pow2 - 1)\n            atweak = atweak * pow(g, 2 ** (pow2 - 1), p) % p\n    d = invmod(2, non2)\n    tmp = pow(a * pow(g, gpow, p), d, p)\n    return tmp * inverse_mod(pow(g, gpow // 2, p), p) % p\n\ndef isprimeF(n, b):\n    return pow(b, n - 1, n) == 1\n\ndef isprimeE(n, b):\n    if not isprimeF(n, b):\n        return False\n    r = n - 1\n    while r % 2 == 0:\n        r //= 2\n    c = pow(b, r, n)\n    if c == 1:\n        return True\n    while 1:\n        if c == 1:\n            return False\n        if c == n - 1:\n            return True\n        c = pow(c, 2, n)\n\ndef factorone(n):\n    if is_prime(n):\n        return n\n    for fact in (2, 3, 5, 7, 11, 13, 17, 19, 23, 29):\n        if n % fact == 0:\n            return fact\n    return factorPR(n)\n\ndef factors(n):\n    if n < 0:\n        n = -n\n    if is_prime(n):\n        return [n]\n    fact = factorone(n)\n    if fact == 1:\n        return 'Unable to factor ' + str(n)\n    facts = factors(n // fact) + factors(fact)\n    facts.sort()\n    return facts\n\ndef factorPR(n):\n    numsteps = 2 * math.floor(math.sqrt(math.sqrt(n)))\n    for additive in range(1, 5):\n        fast = slow = 1\n        i = 1\n        while i < numsteps:\n            slow = (slow * slow + additive) % n\n            i = i + 1\n            fast = (fast * fast + additive) % n\n            fast = (fast * fast + additive) % n\n            g = gcd(fast - slow, n)\n            if g != 1:\n                if g == n:\n                    break\n                else:\n                    return g\n    return 1\n\ndef powmod(b, e, n):\n    return power_mod(b, e, n)\n\ndef isprime(n):\n    return is_prime(n)\n\ndef invmod(b, n):\n    return inverse_mod(b, n)\n\ndef eulerphi(n):\n    return euler_phi(n)\n\ndef carmichaellambda(n):\n    return carmichael_lambda(n)\n\ndef isprimitive(g, n):\n    return is_primitive_root(g, n)\nt = int(input())\nwhile t:\n    x = input().split(' ')\n    mod = int(x[0])\n    if mod == 1:\n        print(0)\n    else:\n        x = x[1].split('*')\n        ans = 1\n        l = int(len(x) / 3)\n        for i in range(0, l):\n            a = int(x[3 * i]) % mod\n            y = int(x[3 * i + 2]) % euler_phi(mod)\n            ans = ans * pow(a, y, mod) % mod\n        print(ans)\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    j = ''\n    s = input()\n    i = 0\n    while s[i] != ' ':\n        j = j + s[i]\n        i = i + 1\n    m = int(j)\n    n = len(s)\n    d = 1\n    while i < n:\n        f = ''\n        while i < n and s[i] != '*':\n            f = f + s[i]\n            i = i + 1\n        k = int(f)\n        i = i + 2\n        g = ''\n        while i < n and s[i] != '*':\n            g = g + s[i]\n            i = i + 1\n        l = int(g)\n        i = i + 1\n        d = d * pow(k, l, m)\n    print(d % m)\n    t = t - 1", "def PowMod(a, b, c):\n    x = 1\n    while b > 0:\n        if b & 1 == 1:\n            x = x * a % c\n        a = a * a % c\n        b >>= 1\n    return x % c\nt = int(input())\nfor it in range(t):\n    string = input()\n    (M, Str) = string.split(' ')\n    Ans = 1\n    M = int(M)\n    l = len(Str)\n    (a, b, c) = (1, 1, 0)\n    i = 0\n    while i < l:\n        ch = Str[i]\n        if ch >= '0' and ch <= '9':\n            if c == 0:\n                a = int(ch)\n                i += 1\n                while Str[i] >= '0' and Str[i] <= '9':\n                    a = a * 10 + int(Str[i])\n                    i += 1\n                c = 1\n            else:\n                b = int(ch)\n                i += 1\n                while i < l and Str[i] >= '0' and (Str[i] <= '9'):\n                    b = b * 10 + int(Str[i])\n                    i += 1\n                c = 0\n                Ans = Ans * PowMod(a, b, M)\n                if Ans >= M:\n                    Ans %= M\n        elif Str[i - 1] == '*':\n            c = 1\n        else:\n            if c == 0:\n                Ans = Ans * PowMod(a, b, M)\n                if Ans >= M:\n                    Ans %= M\n            c = 0\n        if i == l - 1:\n            Ans = Ans * PowMod(a, b, M)\n            if Ans >= M:\n                Ans %= M\n        i += 1\n    print(Ans)", "import math\nfor _ in range(int(input())):\n    (M, S) = input().split()\n    M = int(M)\n    S = list(S.split('*'))\n    ans = 1\n    for i in range(0, len(S), 3):\n        ans = ans * pow(int(S[i]), int(S[i + 2]), M) % M\n    print(ans)", "def sqr(x):\n    return x * x % m\n\ndef go(b, p):\n    ret = 1\n    while p > 0:\n        yay = p & 1\n        if yay:\n            ret = ret * b % m\n        b = b * b % m\n        p = p // 2\n    return ret\nt = int(input())\nfor _ in range(t):\n    (m, s) = input().split()\n    m = int(m)\n    arr = s.split('**')\n    z = []\n    for x in arr:\n        z += x.split('*')\n    ans = 1\n    for _ in range(len(z) // 2):\n        (a, b) = (int(z.pop()), int(z.pop()))\n        digs = []\n        while b > 0:\n            digs.append(b % 10)\n            b = b // 10\n        cur = 0\n        for i in range(len(digs) - 1, -1, -1):\n            dig = digs[i]\n            cur = cur * 10 + int(dig)\n            cur = cur % m\n        b = cur\n        ans = ans * go(b, a)\n        ans = ans % m\n    print(ans)"]