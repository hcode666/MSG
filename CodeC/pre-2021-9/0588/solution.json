["def soln(s):\n    n = len(s)\n    res = ones = i = 0\n    while i < n and s[i] != '1':\n        i += 1\n    while i < n:\n        while i < n and s[i] == '1':\n            ones += 1\n            i += 1\n        zeros = 0\n        while i < n and s[i] == '0':\n            zeros += 1\n            i += 1\n        if zeros == 0:\n            continue\n        res += ones * (zeros + 1)\n    return res\nfor _ in range(int(input())):\n    s = input()\n    print(soln(s))", "def soln(s):\n    n = len(s)\n    res = ones = i = 0\n    while i < n and s[i] != '1':\n        i += 1\n    while i < n:\n        while i < n and s[i] == '1':\n            ones += 1\n            i += 1\n        zeros = 0\n        while i < n and s[i] == '0':\n            zeros += 1\n            i += 1\n        if zeros == 0:\n            continue\n        res += ones * (zeros + 1)\n    return res\nfor _ in range(int(input())):\n    s = input()\n    print(soln(s))", "def soln(s):\n    n = len(s)\n    res = ones = i = 0\n    while i < n and s[i] != '1':\n        i += 1\n    while i < n:\n        while i < n and s[i] == '1':\n            ones += 1\n            i += 1\n        zeros = 0\n        while i < n and s[i] == '0':\n            zeros += 1\n            i += 1\n        if zeros == 0:\n            continue\n        res += ones * (zeros + 1)\n    return res\nfor _ in range(int(input())):\n    s = input()\n    print(soln(s))", "def soln(s):\n    n = len(s)\n    res = ones = i = 0\n    while i < n and s[i] != '1':\n        i += 1\n    while i < n:\n        while i < n and s[i] == '1':\n            ones += 1\n            i += 1\n        zeros = 0\n        while i < n and s[i] == '0':\n            zeros += 1\n            i += 1\n        if zeros == 0:\n            continue\n        res += ones * (zeros + 1)\n    return res\nfor _ in range(int(input())):\n    s = input()\n    print(soln(s))", "for _ in range(int(input())):\n    a = list(input())\n    n = len(a)\n    for i in reversed(range(n)):\n        if a[i] == '1':\n            a.pop()\n        else:\n            break\n    n = len(a)\n    zero = 0\n    prev = tot = 0\n    c = 0\n    for i in reversed(range(n)):\n        if a[i] == '0':\n            zero += 1\n            continue\n        if prev != zero:\n            prev = zero\n            c += 1\n        tot += c + zero\n    print(tot)", "for _ in range(int(input())):\n    arr = list(map(int, input().strip()))\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == 1:\n            arr.pop()\n        else:\n            break\n    if arr.count(1):\n        (t, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(arr) - 1, -1, -1):\n            if arr[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            t += c + z\n        print(t)\n    else:\n        print(0)", "for _ in range(int(input())):\n    s = input()\n    c = 0\n    n = len(s)\n    m = 0\n    r = n - 1\n    curr = n - 1\n    while curr >= 0 and s[r] == '1':\n        curr -= 1\n        r -= 1\n    while curr >= 0:\n        if s[curr] == '1':\n            if s[curr + 1] == '0':\n                c += 1\n            m += c + (r - curr)\n            r -= 1\n        curr -= 1\n    print(m)", "for _ in range(int(input())):\n    s = input()\n    c = 0\n    n = len(s)\n    m = 0\n    r = n - 1\n    curr = n - 1\n    while curr >= 0 and s[r] == '1':\n        curr -= 1\n        r -= 1\n    while curr >= 0:\n        if s[curr] == '1':\n            if s[curr + 1] == '0':\n                c += 1\n            m += c + (r - curr)\n            r -= 1\n        curr -= 1\n    print(m)", "for _ in range(int(input())):\n    s = input()\n    c = 0\n    n = len(s)\n    m = 0\n    r = n - 1\n    curr = n - 1\n    while curr >= 0 and s[r] == '1':\n        curr -= 1\n        r -= 1\n    while curr >= 0:\n        if s[curr] == '1':\n            if s[curr + 1] == '0':\n                c += 1\n            m += c + (r - curr)\n            r -= 1\n        curr -= 1\n    print(m)", "for _ in range(int(input())):\n    s = input()\n    c = 0\n    n = len(s)\n    m = 0\n    r = n - 1\n    curr = n - 1\n    while curr >= 0 and s[r] == '1':\n        curr -= 1\n        r -= 1\n    while curr >= 0:\n        if s[curr] == '1':\n            if s[curr + 1] == '0':\n                c += 1\n            m += c + (r - curr)\n            r -= 1\n        curr -= 1\n    print(m)", "for _ in range(int(input())):\n    s = input()\n    c = 0\n    n = len(s)\n    c = 0\n    m = 0\n    r = n - 1\n    curr = n - 1\n    while curr >= 0 and s[r] == '1':\n        curr -= 1\n        r -= 1\n    while curr >= 0:\n        if s[curr] == '1':\n            if s[curr + 1] == '0':\n                c += 1\n            m += c + (r - curr)\n            r -= 1\n        curr -= 1\n    print(m)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef main():\n    for _ in tr():\n        cells = line() + '1'\n        soldiers = 0\n        n = len(cells)\n        count = 0\n        prev_soldier = False\n        soldier_index = 0\n        last_cell_index = 0\n        for i in range(n):\n            if cells[i] == '1':\n                if not prev_soldier:\n                    count += soldiers * (last_cell_index - soldier_index) + soldiers\n                soldier_index = i + 1\n                soldiers += 1\n                prev_soldier = True\n            else:\n                prev_soldier = False\n                last_cell_index = i + 1\n        print(count)\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)) + '\\n')\n\ndef main():\n    for _ in tr():\n        cells = line() + '1'\n        soldiers = 0\n        n = len(cells)\n        count = 0\n        prev_soldier = False\n        soldier_index = 0\n        last_cell_index = 0\n        for i in range(n):\n            if cells[i] == '1':\n                if not prev_soldier:\n                    count += soldiers * (last_cell_index - soldier_index) + soldiers\n                soldier_index = i + 1\n                soldiers += 1\n                prev_soldier = True\n            else:\n                prev_soldier = False\n                last_cell_index = i + 1\n        print(count)\nmain()", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "t = int(input())\nans = []\nfor i in range(t):\n    s = input()\n    n = len(s)\n    o = 0\n    c = 0\n    for j in range(n - 1, -1, -1):\n        if s[j] == '1':\n            c += n - j - 1 - o\n            o += 1\n    x = s.split('0')\n    g = 1\n    for k in range(len(x) - 1, -1, -1):\n        if k != len(x) - 1 and '1' in x[k]:\n            c += len(x[k]) * g\n            g += 1\n    ans.append(c)\nfor i in ans:\n    print(i)", "T = int(input())\nans = []\nfor _ in range(T):\n    S = input()\n    N = len(S)\n    ones = 0\n    count = 0\n    for i in range(N - 1, -1, -1):\n        if S[i] == '1':\n            count += N - i - 1 - ones\n            ones += 1\n    t = S.split('0')\n    group = 1\n    for i in range(len(t) - 1, -1, -1):\n        if i != len(t) - 1 and '1' in t[i]:\n            count += len(t[i]) * group\n            group += 1\n    ans.append(count)\nfor i in ans:\n    print(i)", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for j in range(len(l) - 1, -1, -1):\n        if l[j] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for j in range(len(l) - 1, -1, -1):\n            if l[j] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "for _ in range(int(input())):\n    l = list(map(int, input().strip()))\n    for i in range(len(l) - 1, -1, -1):\n        if l[i] == 1:\n            l.pop()\n        else:\n            break\n    if l.count(1):\n        (time, prev, z, c) = (0, 0, 0, 0)\n        for i in range(len(l) - 1, -1, -1):\n            if l[i] == 0:\n                z += 1\n                continue\n            if prev != z:\n                prev = z\n                c += 1\n            time += c + z\n        print(time)\n    else:\n        print(0)", "for _ in range(int(input())):\n    a = list(input())\n    n = len(a)\n    for i in reversed(range(n)):\n        if a[i] == '1':\n            a.pop()\n        else:\n            break\n    n = len(a)\n    zero = 0\n    prev = tot = 0\n    c = 0\n    for i in reversed(range(n)):\n        if a[i] == '0':\n            zero += 1\n            continue\n        if prev != zero:\n            prev = zero\n            c += 1\n        tot += c + zero\n    print(tot)", "for _ in range(int(input())):\n    s = input()\n    count = 0\n    n = len(s)\n    count = 0\n    total = 0\n    lastindex = n - 1\n    curr = n - 1\n    while curr >= 0 and s[lastindex] == '1':\n        curr -= 1\n        lastindex -= 1\n    while curr >= 0:\n        if s[curr] == '1':\n            if s[curr + 1] == '0':\n                count += 1\n            total += count + (lastindex - curr)\n            lastindex -= 1\n        curr -= 1\n    print(total)", "import sys\nfor _ in range(int(input())):\n    s = str(input())\n    arr = [int(i) for i in s]\n    n = len(arr)\n    total = 0\n    cnt = 0\n    (lstindx, curr) = (n - 1, n - 1)\n    while arr[curr] == 1 and curr >= 0:\n        curr -= 1\n        lstindx -= 1\n    while curr >= 0:\n        if arr[curr] == 1:\n            if arr[curr + 1] == 0:\n                cnt += 1\n            total += cnt + (lstindx - curr)\n            lstindx -= 1\n        curr -= 1\n    print(total)", "for i in range(int(input())):\n    s = input()\n    n = len(s)\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = int(s[i])\n    total = 0\n    count = 0\n    lastIdx = n - 1\n    curr = n - 1\n    while arr[curr] == 1 and curr >= 0:\n        lastIdx -= 1\n        curr -= 1\n    while curr >= 0:\n        if arr[curr] == 1:\n            if arr[curr + 1] == 0:\n                count += 1\n            total += count + (lastIdx - curr)\n            lastIdx -= 1\n        curr -= 1\n    print(total)", "t = int(input())\nfor each in range(t):\n    a = input()\n    n = len(a)\n    picks = [0] * (n + 1)\n    picks[n - 1] = 1 if a[n - 1] == '0' else 0\n    i = n - 2\n    while i > -1:\n        picks[i] = picks[i + 1]\n        if a[i] == '0' and a[i + 1] == '1':\n            picks[i] += 1\n        i -= 1\n    disp = [0] * (n + 1)\n    soldiers = 0\n    i = n - 1\n    while i > -1:\n        if a[i] == '1':\n            disp[i] = n - soldiers - 1 - i\n            soldiers += 1\n        i -= 1\n    ans = 0\n    for i in range(n):\n        if a[i] == '1':\n            ans += picks[i] + disp[i]\n    print(ans)", "for _ in range(int(input())):\n    arr = list(input())\n    n = len(arr)\n    for i in reversed(range(n)):\n        if arr[i] == '1':\n            arr.pop()\n        else:\n            break\n    n = len(arr)\n    zero = prev = total = cnt = 0\n    for i in reversed(range(n)):\n        if arr[i] == '0':\n            zero += 1\n            continue\n        if prev != zero:\n            prev = zero\n            cnt += 1\n        total += cnt + zero\n    print(total)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    pre = []\n    n = len(s)\n    j = 0\n    ss = {}\n    for i in range(n):\n        if s[i] == '1':\n            pre.append(i)\n            ss[i] = j\n            j += 1\n    pre.append(n)\n    suff = [0 for i in range(n + 1)]\n    tot = 0\n    duff = [0 for i in range(n + 1)]\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            pass\n        else:\n            suff[i] = suff[pre[ss[i] + 1]] + max(tot, 0)\n            duff[i] = max(tot, 0)\n            tot -= 1\n        tot += 1\n    tot = 0\n    st = False\n    dp = [0] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        if s[i] == '0':\n            st = True\n            continue\n        else:\n            if st:\n                tot += 1\n                st = False\n            dp[i] = tot + dp[pre[ss[i] + 1]]\n    print(suff[pre[0]] + dp[pre[0]])", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    i = n - 1\n    ones = s.count('1')\n    c = 0\n    ans = 0\n    while i >= 0:\n        if s[i] == '0':\n            c += 1\n            i -= 1\n        else:\n            if c:\n                ans += ones * (c + 1)\n                c = 0\n            while i >= 0 and s[i] == '1':\n                ones -= 1\n                i -= 1\n    print(ans)", "h = int(input())\nfor k in range(0, h):\n    s = input()\n    l = len(s)\n    counter0 = 0\n    counter1 = 0\n    value = 0\n    for i in range(0, l):\n        if i == l - 1 and s[l - 1] == '0':\n            counter0 += 1\n            value += counter0 * counter1 + counter1\n        elif s[i] == '0':\n            counter0 += 1\n        else:\n            if s[i - 1] == '0':\n                value += counter0 * counter1 + counter1\n                counter0 = 0\n            counter1 += 1\n    print(value)", "n = int(input())\nwhile n:\n    n -= 1\n    str_val = input()\n    final_place = len(str_val) - 1\n    size = len(str_val)\n    jumps = 0\n    ans = 0\n    for i in range(size - 1, -1, -1):\n        if str_val[i] == '1':\n            if i != size - 1 and str_val[i + 1] == '0':\n                jumps += 1\n            ans += jumps + (final_place - i)\n            final_place -= 1\n    print(ans)", "for _ in range(int(input())):\n    s = ' ' + input()\n    n = len(s) - 1\n    ans = 0\n    prefix = [0] * (n + 1)\n    for i in range(1, n + 1):\n        prefix[i] += prefix[i - 1]\n        if s[i] == '1':\n            prefix[i] += 1\n    last = n\n    for i in range(n, 0, -1):\n        if s[i] == '1':\n            ans += last - i\n            last -= 1\n    for i in range(1, n + 1):\n        if s[i] == '0' and i + 1 <= n and (s[i + 1] == '1'):\n            ans += prefix[i]\n    if s[-1] == '0':\n        ans += prefix[-1]\n    print(ans)", "casos = int(input())\nejecuciones = 0\nrespuestas = []\nsoldados = 0\npasos = 0\ntiempoIteracion = 0\ntotal = 0\nwhile ejecuciones < casos:\n    entrada = input()\n    for soldado in entrada:\n        if soldado == '0':\n            pasos += 1\n        else:\n            if pasos > 0:\n                tiempoIteracion = soldados + soldados * pasos\n                total += tiempoIteracion\n                pasos = 0\n            soldados += 1\n    if pasos > 0:\n        total += soldados + soldados * pasos\n    respuestas.append(total)\n    ejecuciones += 1\n    soldados = 0\n    pasos = 0\n    tiempoIteracion = 0\n    total = 0\nfor res in respuestas:\n    print(str(res))", "repe = int(input())\ncasos = 0\nres = []\nwhile casos < repe:\n    cadena = input()\n    soldados = 0\n    espacios = 0\n    tiempo = 0\n    tt = 0\n    for c in cadena:\n        if c == '1':\n            if espacios > 0:\n                tiempo = soldados + soldados * espacios\n                tt += tiempo\n                espacios = 0\n            soldados += 1\n        else:\n            espacios += 1\n    if espacios > 0:\n        tt += soldados + soldados * espacios\n    res.append(tt)\n    casos += 1\nfor c in res:\n    print(str(c))", "def rowsold():\n    T = int(input())\n    for _ in range(T):\n        count1 = 0\n        sec = 0\n        flag = 0\n        l = [int(d) for d in str(input())]\n        for i in range(len(l)):\n            if l[i] == 1:\n                count1 += 1\n                flag = 1\n            elif l[i - 1] == 1 and l[i] == 0:\n                sec = sec + count1 * 2\n            elif l[i - 1] == 0 and l[i] == 0 and (flag == 1):\n                sec = sec + count1\n        print(sec)\nrowsold()", "def rowsold():\n    T = int(input())\n    for _ in range(T):\n        count1 = 0\n        sec = 0\n        l = [int(d) for d in str(input())]\n        try:\n            while l[-1] == 1:\n                del l[-1]\n            while l[0] == 0:\n                del l[0]\n        except IndexError:\n            pass\n        for i in range(len(l)):\n            if l[i] == 1:\n                count1 += 1\n            elif l[i - 1] == 1 and l[i] == 0:\n                sec = sec + count1 * 2\n            elif l[i - 1] == 0 and l[i] == 0:\n                sec = sec + count1\n        print(sec)\nrowsold()", "t = int(input())\nfor i in range(t):\n    str = input()\n    ls = list(str)\n    a = 0\n    r = 0\n    n = ls.count('1')\n    for j in range(len(ls) - 1, -1, -1):\n        if ls[j] == '1':\n            if a == 0:\n                n = n - 1\n            else:\n                r = r + (a + 1) * n\n                n = n - 1\n                a = 0\n        else:\n            a = a + 1\n    print(r)", "from itertools import groupby\nfor i in range(int(input())):\n    ls = []\n    N = input()\n    k = 0\n    for (i, j) in groupby(N):\n        ls.append(list(j))\n    sum = 0\n    temp = 0\n    for i in range(len(ls)):\n        if ls[i][0] == '1':\n            temp += len(ls[i])\n            if i != len(ls) - 1:\n                sum += temp * (len(ls[i + 1]) + 1)\n    print(sum)", "for _ in range(int(input())):\n    row = [i for i in input()]\n    (L, ans, pos) = (len(row), 0, -1)\n    cnt = [0] * L\n    if row[L - 1] == '0':\n        cnt[L - 1] = 1\n    for i in range(L - 2, -1, -1):\n        cnt[i] = cnt[i + 1]\n        if row[i] == '0' and row[i + 1] == '1':\n            cnt[i] += 1\n    for i in range(L - 1, -1, -1):\n        if row[i] == '0':\n            pos = i\n            break\n    for i in range(pos - 1, -1, -1):\n        if row[i] == '1':\n            (ans, pos) = (ans + pos - i + cnt[i], pos - 1)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    one = 0\n    sec = 0\n    given = input()\n    given = given[given.find('1'):]\n    while True:\n        if not '0' in given:\n            break\n        index0 = given.find('0')\n        one += index0\n        given = given[index0:]\n        if not '1' in given:\n            zero = len(given)\n            sec += one * (zero + 1)\n            break\n        index1 = given.find('1')\n        zero = index1\n        sec += one * (zero + 1)\n        given = given[index1:]\n    print(sec)", "from sys import stdin\n\ndef solve():\n    T = int(stdin.readline().strip())\n    for t in range(T):\n        game = stdin.readline().strip()\n        game = list(game)\n        length = len(game)\n        cnt = ans = 0\n        first = True\n        start = end = -1\n        i = 0\n        while i < length:\n            if game[i] == '1':\n                cnt += 1\n                if first:\n                    start = i\n                    first = False\n                else:\n                    end = i\n            if start != -1 and end != -1 and (start + cnt != length) and (start + cnt - 1 != end):\n                ans += (end - start - cnt + 1) * (cnt - 1) + (cnt - 1)\n                start = end - cnt + 1\n                end = -1\n                first = False\n            i += 1\n        if start + cnt != length:\n            ans += (length - start - cnt + 1) * cnt\n        print(ans)\nsolve()", "from sys import stdin\n\ndef solve():\n    T = int(stdin.readline().strip())\n    for t in range(T):\n        game = stdin.readline().strip()\n        game = list(game)\n        length = len(game)\n        cnt = ans = 0\n        first = True\n        start = end = -1\n        i = 0\n        while i < length:\n            if game[i] == '1':\n                cnt += 1\n                if first:\n                    start = i\n                    first = False\n                else:\n                    end = i\n            if start != -1 and end != -1 and (start + cnt != length) and (start + cnt - 1 != end):\n                if cnt > 1:\n                    ans += (end - start - cnt + 1) * (cnt - 1) + (cnt - 1)\n                else:\n                    ans += (end - start - cnt + 1) * cnt + (cnt - 1)\n                start = end - cnt + 1\n                end = -1\n                first = False\n            i += 1\n        if start + cnt != length:\n            ans += (length - start - cnt + 1) * cnt\n        print(ans)\nsolve()", "def solve():\n    T = int(input())\n    for t in range(T):\n        game = input()\n        game = list(game)\n        length = len(game)\n        cnt = ans = 0\n        first = True\n        start = end = -1\n        i = 0\n        while i < length:\n            if game[i] == '1':\n                cnt += 1\n                if first:\n                    start = i\n                    first = False\n                else:\n                    end = i\n            if start != -1 and end != -1 and (start + cnt != length) and (start + cnt - 1 != end):\n                if cnt > 1:\n                    ans += (end - start - cnt + 1) * (cnt - 1) + (cnt - 1)\n                else:\n                    ans += (end - start - cnt + 1) * cnt + (cnt - 1)\n                start = end - cnt + 1\n                end = -1\n                first = False\n            i += 1\n        if start + cnt != length:\n            ans += (length - start - cnt + 1) * cnt\n        print(ans)\nsolve()", "def solve():\n    T = int(input())\n    for t in range(T):\n        game = input()\n        game = list(game)\n        length = len(game)\n        cnt = ans = 0\n        first = True\n        start = end = -1\n        i = 0\n        while i < length:\n            if game[i] == '1':\n                cnt += 1\n                if first:\n                    start = i\n                    first = False\n                else:\n                    end = i\n            if start != -1 and end != -1 and (start + cnt != length) and (start + cnt - 1 != end):\n                if cnt > 1:\n                    ans += (end - start - cnt + 1) * (cnt - 1) + (cnt - 1)\n                else:\n                    ans += (end - start - cnt + 1) * cnt + (cnt - 1)\n                start = end - cnt + 1\n                end = -1\n                first = False\n            i += 1\n        if start + cnt != length:\n            ans += (length - start - cnt + 1) * cnt\n        print(ans)\nsolve()", "for _ in range(int(input())):\n    s = list(input())\n    score = 0\n    ones = 0\n    consz = 0\n    for i in range(len(s)):\n        if i < len(s) - 1:\n            if s[i] == '0' and s[i + 1] == '1':\n                score += ones * (consz + 2)\n                consz = 0\n            elif s[i] == '1':\n                ones += 1\n            elif s[i] == '0':\n                consz += 1\n        elif s[i] == '0':\n            score += ones * (consz + 2)\n    print(score)", "t = int(input().strip())\nfor a0 in range(t):\n    n = input().strip()\n    pos_ones = [len(n) - (i + 1) for i in range(len(n)) if n[i] == '1']\n    len_one = len(pos_ones)\n    pos_ones.reverse()\n    i = 0\n    total_cnt = 0\n    while i < len_one:\n        if pos_ones[i] == i:\n            i += 1\n        else:\n            if i == 0:\n                total_cnt += (pos_ones[i] + 1) * (len_one - i)\n            elif pos_ones[i] - pos_ones[i - 1] > 1:\n                total_cnt += (pos_ones[i] - pos_ones[i - 1]) * (len_one - i)\n            i += 1\n    print(total_cnt)", "def getChar(s, ch):\n    for i in range(len(s)):\n        if s[i] != ch:\n            return (s[i:], i)\n    return ('', len(s))\nT = int(input())\nfor t in range(T):\n    ozs = []\n    tot = 0\n    count = 0\n    moving = False\n    s = input().strip()\n    s = s[s.find('1'):]\n    while len(s) > 0:\n        ozs.append([0, 0])\n        (s, ozs[count][0]) = getChar(s, '1')\n        if len(s) == 0:\n            ozs.pop()\n            break\n        (s, ozs[count][1]) = getChar(s, '0')\n        count += 1\n    sub_t = 0\n    for i in reversed(ozs):\n        sub_t += i[1] + 1\n        tot += i[0] * sub_t\n    print(tot)", "T = int(input())\nfor i in range(T):\n    data = [x.strip() for x in input()]\n    cnt = 0\n    los = len(data) - 1\n    f = -1\n    zf = -1\n    pc = [0] * (los + 1)\n    cost = 0\n    for i2 in range(los, -1, -1):\n        if data[i2] == '0' and zf == -1:\n            zf += 1\n        if data[i2] == '1' and f == -1 and (i != los) and (zf != -1):\n            pc[i2] = 1\n            f += 1\n            frontC = 1\n        elif data[i2] == '1' and (not f == -1):\n            if data[i2 + 1] == '1':\n                pc[i2] = frontC\n            else:\n                pc[i2] = frontC + 1\n                frontC = pc[i2]\n    f = -1\n    for i2 in range(los, -1, -1):\n        if f == -1 and data[i2] == '0':\n            moveTo = i2\n            f += 1\n        elif data[i2] == '1' and f != -1:\n            data[moveTo] = '1'\n            data[i2] = '0'\n            cost += moveTo - i2\n            moveTo -= 1\n    for i2 in range(0, los):\n        cost += int(pc[i2])\n    print(cost)", "for _ in range(int(input())):\n    s = input() + ' '\n    (output, zeroes, ones) = (0, 0, 0)\n    for i in range(len(s)):\n        if (s[i] == '1' or s[i] == ' ') and zeroes >= 1:\n            output += ones * (zeroes + 1)\n            zeroes = 0\n            ones += 1\n        elif s[i] == '1':\n            ones += 1\n        elif s[i] == '0':\n            zeroes += 1\n    print(output)", "import sys\nimport itertools\n\ndef get_group_list(row):\n    group_size = 0\n    grouped_row = []\n    for i in row:\n        if i == 0:\n            grouped_row.append(group_size)\n            group_size = 0\n            grouped_row.append(i)\n        elif i == 1:\n            group_size += 1\n    return list(filter(lambda x: x > 0, grouped_row))\n\ndef get_distance_list(row):\n    zeroes = 0\n    total = 0\n    for i in reversed(row):\n        if i == 0:\n            zeroes += 1\n        elif i == 1:\n            total += zeroes\n    return total\n\ndef grouping_method(row):\n    distance_sum = get_distance_list(row)\n    group_list = get_group_list(row)\n    total_group_sum = 0\n    for (i, group) in enumerate(reversed(group_list), start=1):\n        total_group_sum += i * group\n    return distance_sum + total_group_sum\ntest_cases = int(sys.stdin.readline().strip())\nfor test in range(test_cases):\n    row = [int(i) for i in sys.stdin.readline().strip()]\n    seconds = grouping_method(row)\n    print(seconds)", "for t in range(int(input())):\n    s = input()[::-1].strip()\n    last = 0\n    extra_stops = 0\n    try:\n        for i in range(s.index('01') + 2, len(s)):\n            if s[i] == '1':\n                if s[i - 1] == '0':\n                    last += 1\n                extra_stops += last\n    except ValueError:\n        pass\n    ans = 0\n    ones = 0\n    for i in range(len(s)):\n        if s[i] == '1':\n            ones += 1\n            this = i - ones + 2\n            if this > 1:\n                ans += this\n    print(ans + extra_stops)", "test = int(input())\nwhile test:\n    count = 1\n    ans = 0\n    n = input()\n    leng = len(n)\n    while n[leng - 1] == '1':\n        leng -= 1\n        if leng == 0:\n            break\n    for i in range(leng):\n        if n[leng - i - 1] == '0':\n            count += 1\n        else:\n            if n[leng - i] == '1':\n                count -= 1\n            ans += count\n            count += 1\n    print(ans)\n    test -= 1", "for _ in range(int(input())):\n    animal = input()\n    answer = 0\n    cer = 0\n    sqwerty = 0\n    po = 0\n    for lk in range(2):\n        po += 1\n    for lk in range(2):\n        po += 1\n    for de in range(2):\n        if de != 0:\n            po += 1\n    for i in range(len(animal)):\n        if animal[i] == '1':\n            answer += sqwerty * cer\n            cer += 1\n            for lk in range(2):\n                po += 1\n            for lk in range(2):\n                po += 1\n            for de in range(2):\n                if de != 0:\n                    po += 1\n            sqwerty = 0\n        elif cer != 0:\n            if sqwerty == 0:\n                sqwerty = 1\n            sqwerty += 1\n    for lk in range(2):\n        po += 1\n    for lk in range(2):\n        po += 1\n    for de in range(2):\n        if de != 0:\n            po += 1\n    if animal[len(animal) - 1] == '0':\n        answer += sqwerty * cer\n    print(answer)", "try:\n    t = int(input())\n    while t > 0:\n        t -= 1\n        s = input()\n        intermediate = 0\n        count = 0\n        end = len(s) - 1\n        if s[len(s) - 1] == '1':\n            while end >= 0:\n                if s[end] != '1' or (s[end] == '1' and end == 0):\n                    pos = end - 1\n                    last = end\n                    break\n                end -= 1\n        else:\n            pos = end - 1\n            last = end\n        while pos >= 0:\n            if s[pos] == '1':\n                count = count + (last - pos) + intermediate + 1\n                last -= 1\n                if pos - 1 >= 0 and s[pos - 1] != '1':\n                    intermediate += 1\n            pos -= 1\n        print(count)\nexcept EOFError:\n    pass", "T = int(input())\nwhile T > 0:\n    a = input()\n    s1 = 0\n    c1 = 0\n    h1 = 0\n    l = len(a)\n    for i in range(0, l):\n        if a[i] == '0':\n            h1 = h1 + 1\n        else:\n            break\n    k = h1\n    while k < l:\n        s = 0\n        while a[k] != '0':\n            c1 = c1 + 1\n            k = k + 1\n            if k == l:\n                break\n        if k == l:\n            break\n        while a[k] != '1':\n            s = s + 1\n            k = k + 1\n            if k == l:\n                break\n        s1 = s1 + c1 * (s + 1)\n    print(s1)\n    T = T - 1", "x = int(input())\nwhile x:\n    s = input()\n    if set(s) == set(['1']):\n        print(0)\n    else:\n        for i in range(len(s) - 1, 0, -1):\n            if s[i] == '1':\n                s = s[:-1]\n            else:\n                break\n        a = []\n        for i in range(len(s)):\n            if s[i] == '1':\n                a.append(i + 1)\n        c = 0\n        ans = 0\n        if len(a):\n            space = 0\n            for i in range(len(a) - 1):\n                c = c + 1\n                space = a[i + 1] - a[i] - 1\n                if space:\n                    ans += space * c + c\n            c = c + 1\n            space = len(s) - a[len(a) - 1]\n            ans += space * c + c\n        print(ans)\n    x = x - 1", "n = int(input())\nfor ii in range(n):\n    s = list(input())\n    if set(s) == set(['1']):\n        print('0')\n    else:\n        while s[-1] == '1':\n            s.pop()\n        a = []\n        for i in range(0, len(s)):\n            if s[i] == '1':\n                a.append(i + 1)\n        c = 0\n        ans = 0\n        if len(a):\n            for i in range(0, len(a) - 1):\n                c += 1\n                space = a[i + 1] - a[i] - 1\n                if space:\n                    ans += space * c + c\n            c += 1\n            space = len(s) - a[len(a) - 1]\n            ans += space * c + c\n        print(ans)", "for x in range(int(input())):\n    a = [int(i) for i in input()]\n    a.append(1)\n    su = 0\n    b = []\n    for i in a:\n        if i == 1:\n            su += 1\n        b.append(su)\n    hh = 0\n    cu = 0\n    for i in range(len(b)):\n        if a[i] == 0:\n            cu += 1\n        elif cu != 0:\n            hh += (cu + 1) * b[i - 1]\n            cu = 0\n    print(hh)", "for _ in range(int(input())):\n    s = input()\n    obstacles = 0\n    jumps = 0\n    end = len(s) - 1\n    if s[len(s) - 1] == '1':\n        while end >= 0:\n            if s[end] != '1' or (s[end] == '1' and end == 0):\n                index = end - 1\n                last = end\n                break\n            end -= 1\n    else:\n        index = end - 1\n        last = end\n    while index >= 0:\n        if s[index] == '1':\n            jumps += last - index + 1\n            jumps += obstacles\n            last -= 1\n            if index - 1 >= 0 and s[index - 1] != '1':\n                obstacles += 1\n        index -= 1\n    print(jumps)", "t = int(input())\nfor t0 in range(t):\n    str1 = str(input())\n    list1 = []\n    for i in str1:\n        list1.append(int(i))\n    lis2 = []\n    lis3 = []\n    list2 = []\n    c = 0\n    for j in list1:\n        if j == 1:\n            list2.append(c)\n        c += 1\n    sum1 = 0\n    for j in range(1, len(list2)):\n        if list2[j] - list2[j - 1] > 1:\n            sum1 += j + j * (list2[j] - list2[j - 1] - 1)\n    if len(list2) > 0:\n        if len(list1) - 1 > list2[-1]:\n            sum1 += len(list2) + len(list2) * (len(list1) - 1 - list2[-1])\n    print(sum1)", "def rowsold(s):\n    t = 0\n    count0 = 0\n    count1 = 0\n    for j in range(len(s)):\n        if s[j] == '1' or j == len(s) - 1:\n            if s[j] == '0':\n                count0 = count0 + 1\n            if count0 != 0:\n                t = t + count1 + count1 * count0\n            count1 = count1 + 1\n            count0 = 0\n        elif s[j] == '0':\n            count0 = count0 + 1\n    print(t)\nfor i in range(int(input())):\n    rowsold(input())", "T = int(input())\nwhile T != 0:\n    s = input()\n    l = len(s)\n    no_of_one = 0\n    add = 0\n    i = 0\n    while i < l:\n        no_of_zero = 0\n        while i < l and s[i] == '1':\n            no_of_one += 1\n            i += 1\n        while i < l and s[i] == '0':\n            no_of_zero += 1\n            i += 1\n        if i < l or s[i - 1] == '0':\n            add += no_of_one * (no_of_zero + 1)\n    print(add)\n    T -= 1", "t = int(input())\nwhile t > 0:\n    t -= 1\n    s = input()\n    ls = len(s)\n    c = 0\n    tot = 0\n    i = 0\n    l = []\n    while i < ls:\n        k = 0\n        if s[i] == '0':\n            while i + 1 < ls and s[i + 1] == '0':\n                i += 1\n                k += 1\n            l.append(k + 1)\n        else:\n            l.append(-1)\n        i += 1\n    ll = len(l)\n    i = 0\n    while i < ll:\n        if l[i] != -1:\n            tot += (1 + l[i]) * c\n        else:\n            c += 1\n        i += 1\n    print(tot)", "T = int(input())\nfor t1 in range(T):\n    s = input()\n    n = len(s)\n    sec = 0\n    block = 0\n    streak = 0\n    for q1 in range(n):\n        if s[q1] == '1':\n            streakover = True\n        if block > 0 and streak > 0 and streakover:\n            sec += block * (streak + 1)\n            streak = 0\n        if s[q1] == '1':\n            block += 1\n            streakover = True\n            streak = 0\n        elif s[q1] == '0':\n            streak += 1\n            streakover = False\n        if q1 == n - 1 and s[q1] == '0':\n            sec += block * (streak + 1)\n    print(sec)", "t = input()\nfor i in range(int(t)):\n    n = input()\n    l = len(n)\n    time = 0\n    count1 = 0\n    j = 0\n    while j < l:\n        count0 = 0\n        while j < l and n[j] == '1':\n            count1 += 1\n            j += 1\n        while j < l and n[j] == '0':\n            count0 += 1\n            j += 1\n        if j < l or n[j - 1] == '0':\n            time += count1 * (count0 + 1)\n    print(time)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    i = 0\n    ans = 0\n    n1 = 0\n    while i < n:\n        if s[i] == '1':\n            i += 1\n            n1 += 1\n            while i < n and s[i] == '1':\n                i += 1\n                n1 += 1\n            n0 = 0\n            while i < n and s[i] == '0':\n                i += 1\n                n0 += 1\n            if n0 != 0:\n                ans += (n0 + 1) * n1\n        else:\n            i += 1\n    print(ans)", "def calc(st):\n    cnt = 0\n    ones = 0\n    enc = False\n    zeros = 0\n    for i in range(len(st)):\n        if st[i] == '1':\n            if enc:\n                cnt += (zeros + 1) * ones\n            enc = False\n            ones += 1\n            zeros = 0\n        elif st[i] == '0':\n            if ones:\n                if enc:\n                    zeros += 1\n                else:\n                    zeros = 1\n                enc = True\n    if zeros:\n        cnt += (zeros + 1) * ones\n    return cnt\nt = int(input())\nfor _ in range(t):\n    a = input()\n    print(calc(a))", "t = int(input())\nfor _ in range(t):\n    time = 0\n    s = list(map(int, input().lstrip('0')))\n    ones = 0\n    zeroes = 0\n    i = 0\n    while i < len(s):\n        if i < len(s):\n            while s[i] == 1:\n                i += 1\n                ones += 1\n                if i >= len(s):\n                    break\n        if i < len(s):\n            while s[i] == 0:\n                i += 1\n                zeroes += 1\n                if i >= len(s):\n                    break\n        time += ones * (zeroes + 1)\n        zeroes = 0\n    if len(s) > 0:\n        if s[-1] == 1:\n            time -= s.count(1)\n    print(time)", "for I in range(int(input())):\n    s = str(input())\n    soldier_number = 0\n    ans = 0\n    i = 0\n    while i < len(s):\n        if s[i] == '1':\n            soldier_number += 1\n            i += 1\n        else:\n            zero_number = 0\n            while i < len(s) and s[i] == '0':\n                zero_number += 1\n                i += 1\n            ans += soldier_number * (zero_number + 1)\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()[::-1]\n    zeroes = 0\n    zero_batches = 0\n    result = 0\n    last = -1\n    for i in s:\n        if '0' == i:\n            zeroes += 1\n        if '1' == i:\n            if '0' == last:\n                zero_batches += 1\n            result += zeroes\n            result += zero_batches\n        last = i\n    print(result)", "import re\nT = int(input())\nfor i in range(T):\n    num = str(int(input()))\n    grouped = [len(m.group(0)) for m in re.finditer('(\\\\d)\\\\1*', num)]\n    for j in range(1, len(grouped)):\n        if j % 2 == 0:\n            grouped[j] += grouped[j - 2]\n        else:\n            grouped[j] += 1\n    s = 0\n    for k in range(0, len(grouped) - 1, 2):\n        s += grouped[k] * grouped[k + 1]\n    print(s)", "t = int(input())\nfor e in range(t):\n    s = input()\n    ans = 0\n    (a, lens) = ([], len(s))\n    for i in range(lens):\n        if s[i] == '1':\n            a.append(i)\n    n = len(a)\n    for i in range(n):\n        if i == n - 1:\n            if a[i] != lens - 1:\n                ans += (lens - a[i]) * (i + 1)\n        else:\n            if a[i + 1] == a[i] + 1:\n                continue\n            ans += (a[i + 1] - a[i]) * (i + 1)\n    print(ans)", "t = int(input())\nwhile t:\n    s = input()\n    n = len(s)\n    if s[n - 1] == '1':\n        n -= 1\n    ans = 0\n    count = 0\n    i = n - 1\n    while i >= 0:\n        if s[i] == '0':\n            count += 1\n        else:\n            count += 1\n            if s[i + 1] == '1':\n                count -= 1\n            ans += count\n        i -= 1\n    print(ans)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    s = input()\n    s = s + '1'\n    c = 0\n    one = 0\n    j = 0\n    while True:\n        if s[j] == '1':\n            one += 1\n            ind = s.index('1', j + 1)\n            if ind - j == 1:\n                j += 1\n                if j == len(s) - 1:\n                    break\n                continue\n            else:\n                c += one * (ind - j)\n        j += 1\n        if j == len(s) - 1:\n            break\n    print(c)", "t = int(input())\nfor i in range(t):\n    s = input()\n    s = s + '1'\n    c = 0\n    one = 0\n    j = 0\n    while True:\n        if s[j] == '1':\n            one += 1\n            ind = s.index('1', j + 1)\n            if ind - j == 1:\n                j += 1\n                if j == len(s) - 1:\n                    break\n                continue\n            else:\n                c += one * (ind - j)\n        j += 1\n        if j == len(s) - 1:\n            break\n    print(c)", "T = int(input())\nn = 1\nwhile n <= T:\n    st = str(input())\n    d = {}\n    ones = 1\n    for i in range(len(st)):\n        if st[i] == '1':\n            d[i] = ones\n            ones += 1\n    i = 0\n    time = 0\n    pos = len(st)\n    for pos in sorted(d):\n        if i == 0:\n            ppos = pos\n            i = 1\n            continue\n        if ppos + 1 != pos:\n            time = time + d[ppos] * (pos - ppos - 1) + d[ppos]\n        ppos = pos\n    if pos < len(st) - 1:\n        time = time + d[pos] * (len(st) - pos - 1) + d[pos]\n    print(time)\n    n += 1", "def calculate(n, N):\n    red = []\n    b = N.index(1)\n    s = 1\n    for i in range(b, n):\n        if N[i] == 0:\n            s += 1\n        if N[i] == 1 or i == n - 1:\n            if s == 1:\n                s = 0\n            red.append(s)\n            s = 1\n    for i in range(len(red) - 2, 0, -1):\n        red[i] = red[i] + red[i + 1]\n    return sum(red)\nT = int(input())\nfor t in range(T):\n    N = [int(i) for i in input()]\n    n = len(N)\n    if 1 not in N:\n        print(0)\n    else:\n        print(calculate(n, N))", "t = int(input())\nwhile t > 0:\n    a = input()\n    zerocount = 0\n    onecount = 0\n    i = 0\n    sumi = 0\n    while i < len(a):\n        if int(a[i]) == 1:\n            onecount += 1\n        if int(a[i]) == 0:\n            j = i\n            while j < len(a) and int(a[j]) != 1:\n                zerocount += 1\n                j += 1\n            i = j - 1\n        if zerocount:\n            sumi = sumi + (zerocount + 1) * onecount\n            zerocount = 0\n        i += 1\n    print(sumi)\n    t -= 1", "t = int(input())\nfor y in range(t):\n    s = list(map(int, list(input())))\n    b = a = ans = 0\n    z = 0\n    ek = -1\n    for x in range(len(s)):\n        if s[x] == 1 and a != 0:\n            ans = ans + b * (a + 1)\n            ek = 1\n            a = 0\n            z = 1\n        if s[x] == 1 and ek == 1:\n            b += 1\n            z = 1\n        if s[x] == 1 and z != 1:\n            ek = b = 1\n        if s[x] == 0 and ek == 1:\n            a += 1\n    if s[x] == 0 and x == len(s) - 1:\n        ans = ans + b * (a + 1)\n    print(ans)", "import bisect\nT = int(input())\nfor testCaseID in range(T):\n    cellMap = input()\n    soldierList = []\n    gapCounter = 0\n    for i in range(len(cellMap)):\n        if cellMap[i] == '1':\n            if len(soldierList) > 0:\n                soldierList[-1] = gapCounter\n            soldierList.append(0)\n            gapCounter = 0\n        else:\n            gapCounter += 1\n    if len(soldierList) > 0:\n        soldierList[-1] = gapCounter\n    timer = 0\n    for index in range(len(soldierList)):\n        if soldierList[index] > 0:\n            timer += (1 + soldierList[index]) * (index + 1)\n    print(timer)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (count, st) = (0, list(input()))\n    m = {}\n    tmpC = 0\n    for i in range(len(st)):\n        if st[i] == '1':\n            m[len(m)] = tmpC\n            tmpC = 0\n        else:\n            tmpC += 1\n    m[len(m)] = tmpC\n    s = 0\n    for (key, value) in m.items():\n        tmp = key * value\n        s += tmp\n        if tmp != 0:\n            s += key\n    print(s)", "def solve():\n    s = input()\n    n = len(s)\n    ans = 0\n    cnt = 0\n    selected = False\n    for i in range(n):\n        if s[i] == '0':\n            ans += cnt\n            if not selected:\n                selected = True\n                ans += cnt\n        else:\n            cnt += 1\n            selected = False\n    print(ans)\nt = int(input())\nfor _ in range(t):\n    solve()", "n = int(input())\np = []\nfor i in range(0, n):\n    x = input()\n    s1 = 0\n    a = [int(j) for j in x]\n    from itertools import groupby\n    s = [len(list(group)) for (key, group) in groupby(a)]\n    if a[0] == 0:\n        s = s[1:]\n    j = 0\n    k = 0\n    while j < len(s):\n        if j > 0:\n            s[j] = s[j] + s[k]\n        if j + 1 == len(s):\n            break\n        s1 = s[j] * (s[j + 1] + 1) + s1\n        k = j\n        j = j + 2\n    p.append(s1)\nfor i in p:\n    print(i)", "for x in range(int(input())):\n    rawinput = input()\n    soldiers = 0\n    moves = 0\n    end = len(rawinput) - 1\n    if rawinput[len(rawinput) - 1] == '1':\n        while end >= 0:\n            if rawinput[end] != '1' or (rawinput[end] == '1' and end == 0):\n                index = end - 1\n                last = end\n                break\n            end -= 1\n    else:\n        index = end - 1\n        last = end\n    while index >= 0:\n        if rawinput[index] == '1':\n            moves += last - index + 1\n            moves += soldiers\n            last -= 1\n            if index - 1 >= 0 and rawinput[index - 1] != '1':\n                soldiers += 1\n        index -= 1\n    print(moves)", "t = int(input())\nfor i in range(t):\n    n = input()\n    l = list(n)\n    one = 0\n    sec = 0\n    zero = 0\n    k = 0\n    f = 0\n    while l[k] == '0':\n        k = k + 1\n        if k == len(l):\n            break\n    for j in range(k, len(l)):\n        if l[j] == '1':\n            if f == 1:\n                sec = sec + one + one * zero\n                f = 0\n            zero = 0\n            one = one + 1\n        if l[j] == '0':\n            zero = zero + 1\n            f = 1\n    if not zero == 0:\n        sec = sec + one + one * zero\n    print(sec)", "for xaxa in range(int(input())):\n    o = 0\n    m = 0\n    s = input()\n    n = len(s)\n    for i in range(n):\n        c = s[i]\n        if c == '1':\n            o += 1\n        else:\n            m += o\n            if i < n - 1 and s[i + 1] == '1':\n                m += o\n    if s[-1] == '0':\n        m += o\n    print(m)", "t = int(input())\nfor _ in range(t):\n    st = input()\n    data = []\n    temp = 1\n    for i in range(1, len(st)):\n        if st[i] == st[i - 1]:\n            temp += 1\n        else:\n            data.append((st[i - 1], temp))\n            temp = 1\n    data.append((st[len(st) - 1], temp))\n    ans = 0\n    ones = 0\n    for d in data:\n        if d[0] == '1':\n            ones += d[1]\n        else:\n            ans += ones * (d[1] + 1)\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    enc = 0\n    jump = -1\n    total = flag = 0\n    sel = 0\n    string = input()\n    n = len(string)\n    i = n - 1\n    while (i >= 0) & (string[i] == '1'):\n        i -= 1\n        enc += 1\n    while i >= 0:\n        if (string[i] == '1') & (flag == 0):\n            jump += 1\n            flag = 1\n            sel = n - 1 - enc - i\n            total += jump + sel + 1\n            enc += 1\n        elif string[i] == '0':\n            flag = 0\n            sel = 1\n        else:\n            sel = n - 1 - enc - i\n            total += jump + sel + 1\n            enc += 1\n        i -= 1\n    print(total)", "t = int(input())\nfor q in range(t):\n    arr = input()\n    arr = list(arr)\n    arr_len = len(arr)\n    count_time = 0\n    num_zeroes = 0\n    num_ones = 0\n    num_ones_total = 0\n    multiplier = 0\n    num_selections = 0\n    flag = 0\n    for i in arr:\n        if i == '1':\n            num_ones_total += 1\n            multiplier += 1\n            flag += 1\n        else:\n            num_ones = num_ones_total\n            num_zeroes += multiplier\n            if flag != 0:\n                num_selections += num_ones\n                flag = 0\n    count_time = num_selections + num_zeroes\n    print(count_time)", "t = int(input())\nfor T in range(0, t):\n    str = input()\n    a = []\n    for i in range(0, len(str) - 1):\n        if str[i] == '1':\n            c = 0\n            j = i + 1\n            while str[j] == '0':\n                c += 1\n                if j < len(str) - 1:\n                    j += 1\n                else:\n                    break\n            a.append(c + 1)\n    tot = 0\n    for i in range(0, len(a)):\n        if a[i] != 1:\n            tot += a[i] * (i + 1)\n    print(tot)", "t = int(input())\nfor T in range(0, t):\n    str = input()\n    a = []\n    for i in range(0, len(str) - 1):\n        if str[i] == '1':\n            c = 0\n            j = i + 1\n            while str[j] == '0':\n                c += 1\n                if j < len(str) - 1:\n                    j += 1\n                else:\n                    break\n            a.append(c + 1)\n    tot = 0\n    for i in range(0, len(a)):\n        if a[i] != 1:\n            tot += a[i] * (i + 1)\n    print(tot)", "T = int(input())\nfor t in range(T):\n    string = input()\n    ones = 0\n    dists = []\n    first = True\n    dist = 1\n    for c in reversed(string):\n        if c == '1':\n            dists.append(dist)\n            dist = 1\n            ones += 1\n        else:\n            dist += 1\n    sums = 0\n    for (i, dist) in enumerate(dists):\n        if dist > 1:\n            sums += dist * (ones - i)\n    print(sums)", "for _ in range(int(input())):\n    s = input()\n    os = 0\n    jp = 0\n    j = len(s) - 1\n    if s[len(s) - 1] == '1':\n        while j >= 0:\n            if s[j] != '1' or (s[j] == '1' and j == 0):\n                i = j - 1\n                k = j\n                break\n            j -= 1\n    else:\n        i = j - 1\n        k = j\n    while i >= 0:\n        if s[i] == '1':\n            jp += k - i + 1\n            jp += os\n            k -= 1\n            if i - 1 >= 0 and s[i - 1] != '1':\n                os += 1\n        i -= 1\n    print(jp)", "for _ in range(int(input())):\n    s = input()\n    os = 0\n    jp = 0\n    j = len(s) - 1\n    if s[len(s) - 1] == '1':\n        while j >= 0:\n            if s[j] != '1' or (s[j] == '1' and j == 0):\n                i = j - 1\n                k = j\n                break\n            j -= 1\n    else:\n        i = j - 1\n        k = j\n    while i >= 0:\n        if s[i] == '1':\n            jp += k - i + 1\n            jp += os\n            k -= 1\n            if i - 1 >= 0 and s[i - 1] != '1':\n                os += 1\n        i -= 1\n    print(jp)", "def find_1seq(S, start):\n    i = start\n    while i < len(S) and S[i] == '0':\n        i += 1\n    j = i + 1\n    while j < len(S) and S[j] == '1':\n        j += 1\n    return (j - i, j)\nfor _ in range(int(input())):\n    S = input()\n    time = 0\n    i = 0\n    prev_nbr_ones = 0\n    while True:\n        (nbr_ones, i) = find_1seq(S, i)\n        nbr_ones += prev_nbr_ones\n        prev_nbr_ones = nbr_ones\n        if i < len(S):\n            time += nbr_ones\n            while i < len(S) and S[i] == '0':\n                time += nbr_ones\n                i += 1\n        else:\n            break\n    print(time)"]