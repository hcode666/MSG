["from math import gcd\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\ndic = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nfor tastcas in range(int(input())):\n    (n, k) = li()\n    a = ip()\n    kk = 2 * k\n    ans = n * k\n    for i in a:\n        if dic[i] > kk:\n            ans += dic[i] - kk\n    p = ans\n    q = k\n    g = gcd(p, q)\n    print(p // g, q // g)", "from math import gcd\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\ndic = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nfor tastcas in range(int(input())):\n    (n, k) = li()\n    a = ip()\n    kk = 2 * k\n    ans = n * k\n    for i in a:\n        if dic[i] > kk:\n            ans += dic[i] - kk\n    p = ans\n    q = k\n    g = gcd(p, q)\n    print(p // g, q // g)", "from math import gcd\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\ndic = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nfor tastcas in range(int(input())):\n    (n, k) = li()\n    a = ip()\n    kk = 2 * k\n    ans = n * k\n    for i in a:\n        if dic[i] > kk:\n            ans += dic[i] - kk\n    p = ans\n    q = k\n    g = gcd(p, q)\n    print(p // g, q // g)", "from math import gcd\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\ndic = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23, 'x': 24, 'y': 25, 'z': 26}\nfor tastcas in range(int(input())):\n    (n, k) = li()\n    a = ip()\n    kk = 2 * k\n    s = 0\n    m = 0\n    ans = n * k\n    for i in a:\n        if dic[i] > kk:\n            ans += dic[i] - kk\n    p = ans\n    q = k\n    g = gcd(p, q)\n    print(p // g, q // g)", "import math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = n * k\n    for j in s:\n        v = ord(j) - 96\n        if v > 2 * k:\n            ans += v - 2 * k\n    n = ans\n    d = k\n    gcd = math.gcd(n, d)\n    n //= gcd\n    d //= gcd\n    print(str(n) + ' ' + str(d))", "import math\ntc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = n * k\n    for ch in s:\n        val = ord(ch) - 96\n        if val > 2 * k:\n            ans += val - 2 * k\n    num = ans\n    den = k\n    gcd = math.gcd(num, den)\n    num = num // gcd\n    den = den // gcd\n    print(str(num) + ' ' + str(den))", "import math\ntc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = n * k\n    for ch in s:\n        val = ord(ch) - 96\n        if val > 2 * k:\n            ans += val - 2 * k\n    num = ans\n    den = k\n    gcd = math.gcd(num, den)\n    num = num // gcd\n    den = den // gcd\n    print(str(num) + ' ' + str(den))", "import math\ntc = int(input())\nfor _ in range(tc):\n    (n, k) = map(int, input().split())\n    s = input()\n    ans = n * k\n    for ch in s:\n        val = ord(ch) - 96\n        if val > 2 * k:\n            ans += val - 2 * k\n    num = ans\n    den = k\n    gcd = math.gcd(num, den)\n    num = num // gcd\n    den = den // gcd\n    print(str(num) + ' ' + str(den))", "import itertools\n\ndef map_to_values(s):\n    return ord(s.lower()) - 71 - 25\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef a_b(Mpow, K):\n    d = gcd(Mpow, K)\n    Mpow //= d\n    K //= d\n    print(Mpow, K)\n    pass\n\ndef max_power(S, K):\n    S = list(S)\n    S.sort()\n    S.reverse()\n    ''.join(S)\n    count_of_letters = len(S)\n    count_of_numbers = 0\n    sum_of_numbers = 0\n    Mpow = len(S)\n    for s in S:\n        if count_of_letters - 1 - (count_of_numbers + 1) + (sum_of_numbers + map_to_values(s)) / K > Mpow:\n            Mpow = count_of_letters - 1 - (count_of_numbers + 1) + (sum_of_numbers + map_to_values(s)) / K\n            count_of_letters += -1\n            count_of_numbers += 1\n            sum_of_numbers += map_to_values(s)\n        else:\n            break\n    a_b(K * (count_of_letters - count_of_numbers) + sum_of_numbers, K)\n    pass\nT = int(input().strip())\nfor i in range(T):\n    lst = list(map(int, input().strip().split(' ')))\n    N = lst[0]\n    K = lst[1]\n    S = input().strip()\n    max_power(S, K)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor j in range(t):\n    (n, k) = map(int, input().split(' ', 2)[:2])\n    s = input()\n    sum1 = 0\n    icnt = 0\n    ccnt = n\n    for a in s:\n        if (ord(a) - 96) / k > 2:\n            icnt += 1\n            ccnt -= 1\n            sum1 += ord(a) - 96\n    if sum1 % k == 0:\n        ans = sum1 // k + ccnt - icnt\n        print(ans, 1)\n    else:\n        gc = gcd(sum1 + k * (ccnt - icnt), k)\n        ans = (sum1 + k * (ccnt - icnt)) // gc\n        print(ans, k // gc)", "from math import gcd\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    a = input()\n    a = list(a)\n    a.sort()\n    power = n\n    temp = n\n    lettr = 0\n    sum_n = 0\n    for x in range(n - 1, -1, -1):\n        lettr = ord(a[x]) - ord('a') + 1\n        if lettr > 2 * k:\n            sum_n += lettr\n            temp -= 2\n    power = k * temp + sum_n\n    d = gcd(power, k)\n    power /= d\n    k /= d\n    print(int(power), int(k))", "from math import gcd\nfor _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    S = input()\n    P = N\n    cnt = 0\n    num = 0\n    for x in S:\n        if ord(x) - 96 > 2 * K:\n            num += ord(x) - 96\n            cnt += 1\n    P -= 2 * cnt\n    f1 = P * K + num\n    f2 = K\n    d = gcd(f1, f2)\n    f1 = f1 // d\n    f2 = f2 // d\n    print(f1, f2)", "from sys import setrecursionlimit as limits\nlimits(10 ** 5)\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nt = int(input())\nwhile t > 0:\n    (n, k) = [int(x) for x in input().split()]\n    string = [x for x in input().strip()]\n    string.sort(reverse=True)\n    (m, s, nums, letters, sumNumbers, whole) = (n, 0, 0, n, 0, n)\n    for i in range(n):\n        ch = string[i]\n        s += ord(ch) - 96\n        curr = n - i - 1 - (i + 1) + s / k\n        if m < curr:\n            m = curr\n            whole = n - i - 1 - (i + 1)\n            sumNumbers = s\n        (letters, nums) = (letters - 1, nums + 1)\n    if sumNumbers % k == 0:\n        print(whole + sumNumbers // k, 1)\n    else:\n        sumNumbers += k * whole\n        _gcd = gcd(sumNumbers, k)\n        print(sumNumbers // _gcd, k // _gcd)\n    t -= 1", "import sys\nsys.setrecursionlimit(100000)\n\ndef gcd(a, b):\n    if a == 0 or b == 0:\n        False\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for i in s:\n        d[i] += 1\n    characters = ['z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n    ans = [n]\n    fraction = [[n, 1]]\n    summ = 0\n    count = 0\n    for i in characters:\n        for j in range(d[i]):\n            summ += ord(i) - ord('a') + 1\n            count += 1\n            ans.append(n - 2 * count + summ / k)\n            fraction.append([k * (n - 2 * count) + summ, k])\n    iii = ans.index(max(ans))\n    if fraction[iii][0] > fraction[iii][1]:\n        ggg = gcd(fraction[iii][0], fraction[iii][1])\n    else:\n        ggg = gcd(fraction[iii][0], fraction[iii][1])\n    print(fraction[iii][0] // ggg, fraction[iii][1] // ggg)", "import sys\nsys.setrecursionlimit(1000000)\n\ndef gcd(a, b):\n    if a == 0 or b == 0:\n        False\n    if a == b:\n        return a\n    if a > b:\n        return gcd(a - b, b)\n    return gcd(a, b - a)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for i in s:\n        d[i] += 1\n    characters = ['z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n    ans = [n]\n    fraction = [[n, 1]]\n    summ = 0\n    count = 0\n    for i in characters:\n        for j in range(d[i]):\n            summ += ord(i) - ord('a') + 1\n            count += 1\n            ans.append(n - 2 * count + summ / k)\n            fraction.append([k * (n - 2 * count) + summ, k])\n    iii = ans.index(max(ans))\n    if fraction[iii][0] > fraction[iii][1]:\n        ggg = gcd(fraction[iii][0], fraction[iii][1])\n    else:\n        ggg = gcd(fraction[iii][0], fraction[iii][1])\n    print(fraction[iii][0] // ggg, fraction[iii][1] // ggg)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    d = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for i in s:\n        d[i] += 1\n    characters = ['z', 'y', 'x', 'w', 'v', 'u', 't', 's', 'r', 'q', 'p', 'o', 'n', 'm', 'l', 'k', 'j', 'i', 'h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']\n    ans = [n]\n    fraction = [[n, 1]]\n    summ = 0\n    count = 0\n    for i in characters:\n        for j in range(d[i]):\n            summ += ord(i) - ord('a') + 1\n            count += 1\n            ans.append(n - 2 * count + summ / k)\n            fraction.append([k * (n - 2 * count) + summ, k])\n    iii = ans.index(max(ans))\n    if fraction[iii][0] > fraction[iii][1]:\n        ggg = gcd(fraction[iii][0], fraction[iii][1])\n    else:\n        ggg = gcd(fraction[iii][0], fraction[iii][1])\n    print(fraction[iii][0] // ggg, fraction[iii][1] // ggg)", "from math import gcd\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    pmax = n * k\n    temp = list(input())\n    str = [ord(x) - ord('a') + 1 - 2 * k for x in temp]\n    for i in range(n):\n        if str[i] > 0:\n            pmax += str[i]\n    print(pmax // gcd(pmax, k), k // gcd(pmax, k))", "from fractions import Fraction\nimport math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    S = input().strip()\n    S = [ord(c) - 96 for c in S]\n    S.sort()\n    num = Fraction(n)\n    s = 0\n    t = 0\n    index = n - 1\n    while index >= 0 and S[index] / k >= 2:\n        s += S[index]\n        index -= 1\n        t += 1\n    num = (n - 2 * t) * k + s\n    x = math.gcd(k, num)\n    print(num // x, k // x)", "from fractions import Fraction\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    S = input().strip()\n    S = [ord(c) - 96 for c in S]\n    S.sort(reverse=True)\n    num = Fraction(n)\n    s = 0\n    for i in range(n):\n        s += S[i]\n        num = max(num, n - 2 * (i + 1) + Fraction(s, k))\n    print(num.numerator, num.denominator)", "from fractions import gcd\n\ndef fun():\n    (n, k) = map(int, input().split())\n    l = list(input())\n    su = 0\n    for i in l:\n        t = ord(i) - 96\n        if t > 2 * k:\n            n -= 2\n            su += t\n    s = n * k + su\n    g = 0\n    g = gcd(s, k)\n    print(int(s / g), int(k / g))\nn = int(input())\nfor iii in range(n):\n    fun()", "import math\nfor nitish in range(int(input())):\n    (n, k) = map(int, input().strip().split(' '))\n    ss = input()\n    cnt = n\n    s = 0\n    c = 0\n    for i in ss:\n        if ord(i) - 96 > 2 * k:\n            cnt -= 1\n            c += 1\n            s += ord(i) - 96\n    lol = (cnt - c) * k + s\n    p = math.gcd(abs(lol), k)\n    lol = lol // p\n    k = k // p\n    print(lol, k)", "t = int(input())\nfor it in range(t):\n    (n, k) = map(int, input().split())\n    clst = list(input())\n    clst.sort()\n    num = 0\n    den = k\n    pure_int = n\n    index = n - 1\n    while index >= 0 and (ord(clst[index]) - 96) / den > 2:\n        num += ord(clst[index]) - 96\n        pure_int -= 2\n        index -= 1\n    num = den * pure_int + num\n    for i in range(den, 1, -1):\n        if den % i == 0 and num % i == 0:\n            den //= i\n            num //= i\n    print(num, den)", "from fractions import Fraction as F\nT = int(input())\nfor each in range(T):\n    (L, K) = map(int, input().split())\n    str1 = sorted(input())[::-1]\n    p = 0\n    for i in str1:\n        if ord(i) - 96 > 2 * K:\n            p += ord(i) - 96\n            L -= 2\n        else:\n            break\n    ans = F(K * L + p, K)\n    print(ans.numerator, ' ', ans.denominator, sep='')", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef sol():\n    (charcount, k) = map(int, input().split())\n    (intcount, sum1) = (0, 0)\n    s = input()\n    for a in s:\n        if (ord(a) - 96) / k > 2:\n            intcount += 1\n            charcount -= 1\n            sum1 += ord(a) - 96\n    if sum1 % k == 0:\n        print(sum1 // k + charcount - intcount, 1)\n    else:\n        div = gcd(sum1 + k * (charcount - intcount), k)\n        print((sum1 + k * (charcount - intcount)) // div, k // div)\nfor _ in range(int(input())):\n    sol()", "from fractions import gcd\nfor inm in range(int(input())):\n    (n, k) = map(int, input().split())\n    s = input()\n    s0 = s\n    s = list(s)\n    s.sort(reverse=True)\n    su = 0\n    r = []\n    for i in range(len(s)):\n        l = s[:]\n        su = 0\n        for j in range(0, i + 1):\n            l[j] = ord(l[j]) - 96\n        su = su + sum(l[0:i + 1])\n        r.append(n * k - 2 * (i + 1) * k + su)\n    r.append(len(s0) * k)\n    x1 = max(r)\n    x2 = gcd(x1, k)\n    if x2 == 1:\n        print(str(x1) + ' ' + str(k))\n    else:\n        print(str(x1 // x2) + ' ' + str(k // x2))", "from fractions import Fraction\n\ndef val(x):\n    return ord(x) - ord('a') + 1\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    line = input()\n    Pmax = 0\n    for c in line:\n        ax = val(c)\n        y = -1.0 + float(ax) / k\n        if y > 1:\n            Pmax += y\n        else:\n            Pmax += 1\n    fr = Fraction(Pmax).limit_denominator()\n    print('{0} {1}'.format(fr.numerator, fr.denominator))", "from math import *\nfrom fractions import Fraction\n\ndef ascii(x):\n    return ord(x) - ord('a') + 1\nfor _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    s = input()\n    P = 0\n    for ch in s:\n        asci = ascii(ch)\n        xz = -1.0 + float(asci) / k\n        if xz > 1:\n            P += xz\n        else:\n            P += 1\n    fr = Fraction(P).limit_denominator()\n    print('{0} {1}'.format(fr.numerator, fr.denominator))", "def main():\n    from sys import stdin, stdout\n    from math import gcd\n    rl = stdin.readline\n    wl = stdout.write\n    int1 = int\n    str1 = str\n    t = int1(rl())\n    for i in range(t):\n        a = b = m = 0\n        (n, k) = [int1(x) for x in rl().split()]\n        s = rl()\n        for c in s:\n            if ord(c) - 96 > 2 * k:\n                b += ord(c) - 96\n                m += 1\n        a = (n - 2 * m) * k + b\n        g = gcd(a, k)\n        wl(str1(int1(a / g)) + ' ' + str1(int1(k / g)) + '\\n')\nmain()", "from fractions import gcd\nfor z in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(input())\n    a.sort()\n    a = a[::-1]\n    maxi = -1\n    ad = 1\n    ad1 = 1\n    for i in range(n):\n        p = k * (n - i) + sum([ord(j) - 96 for j in a[0:i]]) - i * k\n        if p > maxi:\n            maxi = p\n    m = sum([ord(i) - 96 for i in a[0:n]]) - n * k\n    if maxi < m:\n        maxi = m\n    c = gcd(maxi, k)\n    maxi = maxi // c\n    k = k // c\n    print(maxi, k)", "import math as ma\nt = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    s = list(input())\n    s.sort()\n    x = 0\n    p = a\n    xx = []\n    for j in range(a - 1, -1, -1):\n        x += ord(s[j]) - 96\n        k = j * b - (a - j) * b + x\n        xx.append(k)\n    xx.sort()\n    vv = xx[len(xx) - 1]\n    gd = ma.gcd(vv, b)\n    vv = vv // gd\n    b = b // gd\n    if vv / b > a:\n        print(vv, b)\n    else:\n        print(a, 1)", "from fractions import Fraction\ntc = int(input())\nfor test in range(tc):\n    (n, k) = map(int, input().split())\n    arr = list(input())\n    arr.sort(reverse=True)\n    num_sum = temp_num_sum = 0\n    t = i = temp_t = 0\n    max_diff = 0\n    while num_sum >= 2 * t * k and i < n:\n        temp_num_sum += ord(arr[i]) - ord('a') + 1\n        temp_t += 1\n        i += 1\n        if temp_num_sum >= 2 * temp_t * k:\n            num_sum = temp_num_sum\n            t = temp_t\n        if num_sum - 2 * t * k >= max_diff:\n            max_diff = num_sum - 2 * t * k\n        else:\n            break\n    ans = Fraction(n * k + max_diff, k)\n    print(ans.numerator, ans.denominator)", "from fractions import Fraction\nt = int(input())\nfor i in range(0, t):\n    (n, k) = map(int, input().split(' '))\n    s = input()\n    a1 = n\n    a2 = 1\n    p = k * n\n    l = []\n    for j in range(0, n):\n        l.append(ord(s[j]) - ord('a') + 1)\n    l.sort()\n    l.reverse()\n    sm = 0\n    for j in range(0, n):\n        sm += l[j]\n        if k * k * (n - 2 * (j + 1)) + sm * k > k * p:\n            p = k * (n - 2 * (j + 1)) + sm\n            a1 = k * (n - 2 * (j + 1)) + sm\n            a2 = k\n        else:\n            break\n    if a1 % a2 == 0:\n        print(str(a1 // a2) + ' 1')\n    else:\n        ans = str(Fraction(a1, a2))\n        n1 = ''\n        n2 = ''\n        j = 0\n        while ans[j] != '/':\n            n1 += ans[j]\n            j += 1\n        j += 1\n        while j != len(ans):\n            n2 += ans[j]\n            j += 1\n        print(n1 + ' ' + n2)", "def ip():\n    return int(input())\n\ndef ipp():\n    return map(int, input().split())\n\ndef sar():\n    return list(ipp())\n\ndef pars(a):\n    print(' '.join(list(map(str, a))))\n    print('\\r')\n\ndef parl(a):\n    print('\\r'.join(list(map(str, a))))\n    print('\\r')\nfrom fractions import gcd\nfrom functools import reduce\nT = 1\nT = int(input().strip())\nfor _ in range(T):\n    (n, k) = ipp()\n    a = []\n    a = input()\n    sm = 0\n    c1 = n\n    c2 = 0\n    highn = -k * 0 + k * n + 0\n    highd = k\n    high = highn / highd\n    p = 0\n    pn = 0\n    pd = 0\n    a = reduce(lambda x, y: x + y, sorted(a, reverse=True))\n    for i in range(len(a)):\n        sm += ord(a[i]) - ord('a') + 1\n        c1 -= 1\n        c2 += 1\n        pn = k * c1 - k * c2 + sm\n        p = pn / k\n        if p > high:\n            high = p\n            highn = pn\n    g = gcd(highn, k)\n    print(highn // g, k // g)", "def ii():\n    return int(input())\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nfrom fractions import Fraction\nfor t in range(ii()):\n    (n, k) = mi()\n    s = input().strip()\n    s = [ord(c) - 96 for c in s]\n    s.sort(reverse=True)\n    ans = Fraction(n)\n    sm = 0\n    for i in range(n):\n        sm += s[i]\n        ans = max(ans, n - 2 * (i + 1) + Fraction(sm, k))\n    print(ans.numerator, ans.denominator)"]