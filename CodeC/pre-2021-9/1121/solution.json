["for _ in range(int(input())):\n    (a, n, m) = [int(x) for x in input().split()]\n    d = len(str(a))\n    ans = 0\n    p10 = pow(10, d, m)\n    aa = a % m\n    p2 = 1\n    while True:\n        if n & p2 != 0:\n            ans = (ans * p10 + aa) % m\n            n -= p2\n        if n == 0:\n            break\n        p2 *= 2\n        aa = aa * (p10 + 1) % m\n        p10 = p10 * p10 % m\n    print(ans)", "for _ in range(int(input())):\n    (a, n, m) = [int(x) for x in input().split()]\n    d = len(str(a))\n    ans = 0\n    p10 = pow(10, d, m)\n    aa = a % m\n    p2 = 1\n    while True:\n        if n & p2 != 0:\n            ans = (ans * p10 + aa) % m\n            n -= p2\n        if n == 0:\n            break\n        p2 *= 2\n        aa = aa * (p10 + 1) % m\n        p10 = p10 * p10 % m\n    print(ans)", "for _ in range(int(input())):\n    (a, n, m) = [int(x) for x in input().split()]\n    d = len(str(a))\n    ans = 0\n    p10 = pow(10, d, m)\n    aa = a % m\n    p2 = 1\n    while True:\n        if n & p2 != 0:\n            ans = (ans * p10 + aa) % m\n            n -= p2\n        if n == 0:\n            break\n        p2 *= 2\n        aa = aa * (p10 + 1) % m\n        p10 = p10 * p10 % m\n    print(ans)", "def findMod(a, n, m):\n    mf = 10 ** len(str(a)) % m\n    ans = 0\n    while n:\n        if n % 2 == 1:\n            ans = (ans * mf % m + a) % m\n        a = (a * mf % m + a) % m\n        mf = pow(mf, 2, m)\n        n = n // 2\n    return ans\nfor _ in range(int(input())):\n    (a, n, m) = [int(i) for i in input().split()]\n    print(findMod(a, n, m))", "def findMod(a, n, m):\n    mf = 10 ** len(str(a)) % m\n    ans = 0\n    while n:\n        if n % 2 == 1:\n            ans = (ans * mf % m + a) % m\n        a = (a * mf % m + a) % m\n        mf = pow(mf, 2, m)\n        n = n // 2\n    return ans\nfor _ in range(int(input())):\n    (a, n, m) = [int(i) for i in input().split()]\n    print(findMod(a, n, m))", "def findMod(a, n, m):\n    mf = 10 ** len(str(a)) % m\n    ans = 0\n    while n:\n        if n % 2 == 1:\n            ans = (ans * mf % m + a) % m\n        a = (a * mf % m + a) % m\n        mf = pow(mf, 2, m)\n        n = n // 2\n    return ans\nfor _ in range(int(input())):\n    (a, n, m) = [int(i) for i in input().split()]\n    print(findMod(a, n, m))", "def findMod(a, n, m):\n    mf = 10 ** len(str(a)) % m\n    ans = 0\n    while n:\n        if n % 2 == 1:\n            ans = (ans * mf % m + a) % m\n        a = (a * mf % m + a) % m\n        mf = pow(mf, 2, m)\n        n = n // 2\n    return ans\nfor _ in range(int(input())):\n    (a, n, m) = [int(i) for i in input().split()]\n    print(findMod(a, n, m))", "def findMod(a, n, m):\n    mf = 10 ** len(str(a)) % m\n    ans = 0\n    while n:\n        if n % 2 == 1:\n            ans = (ans * mf % m + a) % m\n        a = (a * mf % m + a) % m\n        mf = pow(mf, 2, m)\n        n = n // 2\n    return ans\nfor _ in range(int(input())):\n    (a, n, m) = [int(i) for i in input().split()]\n    print(findMod(a, n, m))", "def findMod(a, n, m):\n    mf = 10 ** len(str(a)) % m\n    ans = 0\n    while n:\n        if n % 2 == 1:\n            ans = (ans * mf % m + a) % m\n        a = (a * mf % m + a) % m\n        mf = pow(mf, 2, m)\n        n = n // 2\n    return ans\nfor _ in range(int(input())):\n    (a, n, m) = [int(i) for i in input().split()]\n    print(findMod(a, n, m))", "t = int(input())\nfor _ in range(t):\n    (a, n, m) = list(map(int, input().split()))\n    print((pow(10, n * len(str(a)), (10 ** len(str(a)) - 1) * m) - 1) // (10 ** len(str(a)) - 1) % m * (a % m) % m)", "def findMod(a, n, m):\n    mf = 10 ** len(str(a)) % m\n    ans = 0\n    while n:\n        if n % 2 == 1:\n            ans = (ans * mf % m + a % m) % m\n        a = (a * mf % m + a) % m\n        mf = pow(mf, 2, m)\n        n = n // 2\n    return ans\nfor _ in range(int(input())):\n    (a, n, m) = [int(i) for i in input().split()]\n    print(findMod(a, n, m))", "for _ in range(int(input())):\n    (a, n, m) = map(int, input().split(' '))\n    s = len(str(a))\n    c = 10 ** s - 1\n    w = c * m\n    b = pow(10, n * s, w) - 1\n    d = b // c\n    ans = d % m * (a % m)\n    print(ans % m)", "for _ in range(int(input())):\n    (a, n, m) = map(int, input().split(' '))\n    print((pow(10, n * len(str(a)), (10 ** len(str(a)) - 1) * m) - 1) // (10 ** len(str(a)) - 1) % m * (a % m) % m)", "for _ in range(int(input())):\n    (a, n, m) = map(int, input().split(' '))\n    print((pow(10, n * len(str(a)), (10 ** len(str(a)) - 1) * m) - 1) // (10 ** len(str(a)) - 1) % m * (a % m) % m)", "for _ in range(int(input())):\n    (a, n, m) = map(int, input().split(' '))\n    s = len(str(a))\n    c = 10 ** s - 1\n    w = c * m\n    b = pow(10, n * s, w) - 1\n    d = b // c\n    ans = d % m * (a % m)\n    print(ans % m)", "import math\n\ndef no(n):\n    c = 0\n    while n > 0:\n        c += 1\n        n //= 10\n    return c\n\ndef modInverse(a, m):\n    m0 = m\n    y = 0\n    x = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\nfor _ in range(int(input())):\n    (a, n, m) = map(int, input().split(' '))\n    if a == 0:\n        s = 1\n    else:\n        s = no(a)\n    c = 10 ** s - 1\n    w = c * m\n    b = pow(10, n * s, w) - 1\n    d = b // c\n    ans = d % m * (a % m)\n    print(ans % m)", "import math\n\ndef no(n):\n    c = 0\n    while n > 0:\n        c += 1\n        n //= 10\n    return c\n\ndef modInverse(a, m):\n    m0 = m\n    y = 0\n    x = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\nfor _ in range(int(input())):\n    (a, n, m) = map(int, input().split(' '))\n    s = len(str(a))\n    c = 10 ** s - 1\n    w = c * m\n    b = pow(10, n * s, w) - 1\n    d = b // c\n    ans = d % m * (a % m)\n    print(ans % m)", "t = int(input())\n\ndef ans(a, n, m):\n    if n is 1:\n        return a % m\n    h = ans(a, n // 2, m)\n    l = len(str(a))\n    res = (h + h * pow(10, n // 2 * l, m) % m) % m\n    if n & 1 is 1:\n        res += a * pow(10, (n - 1) * l, m) % m\n        res %= m\n    return res\nfor _ in range(t):\n    (a, n, m) = list(map(int, input().split()))\n    print(ans(a, n, m))", "t = int(input())\n\ndef ans(a, n, m):\n    if n is 1:\n        return a % m\n    h = ans(a, n // 2, m)\n    l = len(str(a))\n    res = (h + h * pow(10, n // 2 * l, m)) % m\n    if n & 1 is 1:\n        res += a * pow(10, (n - 1) * l, m) % m\n        res %= m\n    return res\nfor _ in range(t):\n    (a, n, m) = list(map(int, input().split()))\n    print(ans(a, n, m))", "import math\n\ndef findout(A, N, M):\n    p = int(math.log(A, 10))\n    R = pow(10, p + 1, M)\n\n    def largesum(x, N, M):\n        if N == 0:\n            return 1\n        elif N == 1:\n            return (1 + x) % M\n        elif N == 2:\n            return (1 + x + x ** 2) % M\n        elif N == 3:\n            return (1 + x + x ** 2 + x ** 3) % M\n        if N % 2 == 1:\n            k = N // 2\n            temp = pow(x, k + 1, M)\n            ans = largesum(x, k, M)\n            ans = ans + temp * ans\n            ans %= M\n            return ans\n        else:\n            k = N // 2\n            ans = largesum(x, k - 1, M)\n            ans = 1 + x * ans + pow(x, k + 1, M) * ans\n            ans %= M\n            return ans\n    ans = largesum(R, N - 1, M) * A % M\n    return ans\nT = int(input())\nfor _ in range(T):\n    (A, N, M) = list(map(int, input().strip().split(' ')))\n    if A == 0:\n        print(0)\n    else:\n        print(findout(A, N, M))", "from math import log10\n\ndef geo_sum_mod(r, n, m):\n    if n == 0:\n        return 1\n    if n % 2 == 1:\n        return (1 + r) * geo_sum_mod(r * r % m, (n - 1) // 2, m) % m\n    return (1 + r * ((1 + r) * geo_sum_mod(r * r % m, n // 2 - 1, m)) % m) % m\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        (A, N, M) = map(int, input().split())\n        if A == 0:\n            print(0)\n        else:\n            print(A * geo_sum_mod(pow(10, int(log10(A)) + 1, M), N - 1, M) % M)\nmain()", "def modulo_big_num(x, n, m):\n    x_mod_m = x % m\n    if n == 1:\n        return (x_mod_m, 1)\n    (x_raised_to_n_by_2, value_at_n_by_2) = modulo_big_num(x, n // 2, m)\n    value_at_n = value_at_n_by_2 % m * (x_raised_to_n_by_2 + 1) % m % m\n    x_raised_to_n = x_raised_to_n_by_2 * x_raised_to_n_by_2 % m\n    if n % 2:\n        value_at_n = (1 + x_mod_m * value_at_n % m) % m\n        x_raised_to_n = x_mod_m * x_raised_to_n % m\n    return (x_raised_to_n, value_at_n)\n\ndef start():\n    num_test_cases = input()\n    for i in range(int(num_test_cases)):\n        (a, n, m) = input().split()\n        if a == '0':\n            print(0)\n        else:\n            nda = len(str(a))\n            m = int(m)\n            a = int(a)\n            n = int(n)\n            x = 10 ** nda\n            (_, result) = modulo_big_num(x, n, m)\n            print(a % m * result % m)\nstart()", "def calculateRecursive(xmodM, m, n):\n    if n == 1:\n        ans = []\n        ans.append(int(1))\n        ans.append(int(1))\n        return ans\n    if n % 2 == 1:\n        result = calculateRecursive(xmodM, m, n // 2)\n        temp = xmodM * result[0] % m\n        temp1 = temp * xmodM % m\n        temp2 = temp1 * result[1] % m\n        ans = []\n        ans.append(temp ** 2 % m)\n        ans.append((temp + temp2 + result[1]) % m)\n        return ans\n    else:\n        result = calculateRecursive(xmodM, m, n / 2)\n        temp = xmodM * result[0] % m\n        temp1 = temp * result[1] % m\n        ans = []\n        ans.append(result[0] * temp % m)\n        ans.append((result[1] + temp1) % m)\n        return ans\n    return a\nnumofcases = int(input())\nfor i in range(numofcases):\n    (a, n, m) = input().split(' ')\n    intNumOfDigits = len(a)\n    a = int(a)\n    n = int(n)\n    m = int(m)\n    AmodM = int(a % m)\n    x = 10 ** intNumOfDigits\n    xmodM = x % m\n    lngRem = int(1)\n    lngPrevRem = 1\n    ans = calculateRecursive(xmodM, m, n)\n    print(int(ans[1]) * AmodM % m)", "def calculateRecursive(xmodM, m, n):\n    if n == 1:\n        ans = []\n        ans.append(int(1))\n        ans.append(int(1))\n        return ans\n    if n % 2 == 1:\n        result = calculateRecursive(xmodM, m, n // 2)\n        temp = xmodM * result[0] % m\n        temp1 = temp * xmodM % m\n        temp2 = temp1 * result[1] % m\n        ans = []\n        ans.append(temp ** 2 % m)\n        ans.append((temp + temp2 + result[1]) % m)\n        return ans\n    else:\n        result = calculateRecursive(xmodM, m, n / 2)\n        temp = xmodM * result[0] % m\n        temp1 = temp * result[1] % m\n        ans = []\n        ans.append(result[0] * temp % m)\n        ans.append((result[1] + temp1) % m)\n        return ans\n    return a\nnumofcases = int(input())\nfor i in range(numofcases):\n    (a, n, m) = input().split(' ')\n    intNumOfDigits = len(a)\n    a = int(a)\n    n = int(n)\n    m = int(m)\n    AmodM = int(a % m)\n    x = 10 ** intNumOfDigits\n    xmodM = x % m\n    lngRem = int(1)\n    lngPrevRem = 1\n    ans = calculateRecursive(xmodM, m, n)\n    print(int(ans[1]) * AmodM % m)", "def modulo_big_num(x, n, m):\n    x_mod_m = x % m\n    if n == 1:\n        return (x_mod_m, 1)\n    (x_raised_to_n_by_2, value_at_n_by_2) = modulo_big_num(x, n // 2, m)\n    value_at_n = value_at_n_by_2 % m * (x_raised_to_n_by_2 + 1) % m % m\n    x_raised_to_n = x_raised_to_n_by_2 * x_raised_to_n_by_2 % m\n    if n % 2:\n        value_at_n = (1 + x_mod_m * value_at_n % m) % m\n        x_raised_to_n = x_mod_m * x_raised_to_n % m\n    return (x_raised_to_n, value_at_n)\n\ndef start():\n    num_test_cases = input()\n    for i in range(int(num_test_cases)):\n        (a, n, m) = input().split()\n        if a == '0':\n            print(0)\n        else:\n            nda = len(str(a))\n            m = int(m)\n            a = int(a)\n            n = int(n)\n            x = 10 ** nda\n            (_, result) = modulo_big_num(x, n, m)\n            print(a % m * result % m)\nstart()", "def f(x, n, m):\n    res = 1\n    if n > 1:\n        res = f(x, n // 2, m) * (1 + pow(x, n // 2, m)) % m\n        if n % 2:\n            res = (res * x + 1) % m\n    return res\nt = int(input())\nfor it in range(t):\n    words = input().split()\n    (a, n, m) = [int(x) for x in words]\n    l = len(words[0])\n    x = pow(10, l, m)\n    res = f(x, n, m) * a % m\n    print(res)", "m = int(1000000000.0) + 7\n\ndef mul(a, b):\n    c0 = a[0] * b[0] + a[1] * b[2]\n    c1 = a[0] * b[1] + a[1] * b[3]\n    c2 = a[2] * b[0] + a[3] * b[2]\n    c3 = a[2] * b[1] + a[3] * b[3]\n    if c0 < 0 or c0 >= m:\n        c0 %= m\n    if c1 < 0 or c1 >= m:\n        c1 %= m\n    if c2 < 0 or c2 >= m:\n        c2 %= m\n    if c3 < 0 or c3 >= m:\n        c3 %= m\n    return (c0, c1, c2, c3)\n\ndef matpow(mat, n):\n    res = (1, 0, 0, 1)\n    while n:\n        if n & 1:\n            res = mul(res, mat)\n        mat = mul(mat, mat)\n        n >>= 1\n    return res\n\ndef solve(a, n, m):\n    p = 1\n    while p <= a:\n        p *= 10\n    p %= m\n    tran = (p + 1, -p, 1, 0)\n    ptran = matpow(tran, n - 1)\n    f = (ptran[2] * (p + 1) + ptran[3]) % m\n    res = f * a % m\n    return res % m\nfor t in range(int(input())):\n    (a, n, m) = map(int, input().split())\n    res = solve(a, n, m)\n    print(res)", "def foo(a, n, m):\n    t = 1\n    s = 0\n    while n > 0:\n        if n & 1 == 1:\n            s = (a * s + t) % m\n        n >>= 1\n        t = (a + 1) * t % m\n        a = a * a % m\n    return s\nT = int(input())\nfor t in range(T):\n    (A, N, M) = map(int, input().strip().split())\n    if A == 0:\n        ans = 0\n    elif N == 1:\n        ans = A % M\n    else:\n        ans = A % M * foo(pow(10, len(str(A)), M), N, M) % M\n    print(ans)", "import math\n\ndef modpow(a, b, m):\n    res = 1\n    while b > 0:\n        if b % 2 is 1:\n            res = res * a % m\n        a = a % m * (a % m) % m\n        b = b // 2\n    return res % m\n\ndef digits(x):\n    l = 0\n    if x == 0:\n        return 1\n    while x:\n        x = x // 10\n        l += 1\n    return l\n\ndef solve(a, n, mod):\n    l = digits(a)\n    pow_ = math.ceil(pow(10, l)) - 1\n    newmod = mod * pow_\n    temp = modpow(10, l * n, newmod)\n    temp2 = a * (temp - 1) % newmod\n    temp2 = temp2 // pow_\n    return temp2 % mod\n\ndef main():\n    t = int(input())\n    while t > 0:\n        (a, n, mod) = map(int, input().split())\n        res = solve(a, n, mod)\n        print(res)\n        t = t - 1\nmain()", "t = int(input())\nans = []\nexponents = []\n\ndef calc_exponents(x, e, m):\n    if e == 0:\n        exponents.append(1)\n        return 1\n    if e % 2 == 0:\n        prod = calc_exponents(x, e // 2, m)\n        temp = prod % m * prod % m % m\n    else:\n        prod = calc_exponents(x, (e - 1) // 2, m)\n        temp = prod % m * prod % m % m * x % m % m\n    exponents.append(temp)\n    return temp\n\ndef gp_sum(n, r, m, pt):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        sn = (1 + exponents[pt]) % m * gp_sum(n // 2, r, m, pt - 1) % m\n    else:\n        sn = (1 + exponents[pt]) % m * gp_sum((n - 1) // 2, r, m, pt - 1) % m + exponents[pt] % m * exponents[pt] % m % m\n    return sn\nfor i in range(t):\n    (a, n, m) = list(map(int, input().split()))\n    length = len(str(a))\n    r = pow(10, length)\n    exponents = []\n    calc_exponents(r, n, m)\n    sum_part = gp_sum(n, r, m, len(exponents) - 2)\n    total_prod = a % m * sum_part % m\n    ans.append(total_prod)\nfor x in ans:\n    print(x)", "def modexp(a, n, mod):\n    r = 1\n    a = a % mod\n    while n > 0:\n        if n & 1 == 1:\n            r = r * a % mod\n        n = n >> 1\n        a = a * a % mod\n    return r\nttt = int(input())\nwhile ttt > 0:\n    ttt -= 1\n    l = input()\n    (aa, bb, cc) = l.split(' ')\n    a = int(aa)\n    b = int(bb)\n    c = int(cc)\n    p = len(aa)\n    k = 1\n    for i in range(1, p + 1):\n        k = k * 10\n    zz = (k - 1) * c\n    k1 = modexp(k, b, zz)\n    k -= 1\n    k1 = k1 * a % zz\n    k1 -= a\n    if k1 < 0:\n        k1 = zz - k1\n    p = k1 // k\n    print(p)", "def CALC(a, p, m):\n    if p == 0:\n        return 1\n    if p == 1:\n        return a % m\n    temp = CALC(a, int(p / 2), m)\n    if p % 2 != 0:\n        return temp % m * (temp % m) % m * (a % m) % m\n    return temp % m * (temp % m) % m\nt = int(input())\nfor i in range(1, t + 1):\n    (a, n, m) = map(int, input().split(' '))\n    save = a\n    r = 1\n    if a == 0:\n        print(0)\n    else:\n        while a > 0:\n            a = int(a / 10)\n            r = r * 10\n        ans = save % m\n        M = m * (r - 1)\n        mult = CALC(r, n, M) - 1 + M\n        mult = mult % M\n        mult = int(mult / (r - 1))\n        ans = ans * mult % m\n        print(int(ans))", "A = 0\nN = 9\nM = 9\np = 9\nleng = 0\n\ndef fm(left):\n    if left == 1:\n        return int(p % M)\n    half = left // 2\n    par = fm(half) % M\n    join = (par + pow(10, int(leng * half), M) * par) % M\n    if left % 2:\n        join = (join * p + p) % M\n    return int(join)\nfor _ in range(int(input())):\n    (A, N, M) = map(int, input().split())\n    leng = len(str(A))\n    p = pow(10, leng, M)\n    if N == 1:\n        print(A % M)\n        continue\n    ans = A % M\n    ans = ans * (fm(N - 1) + 1) % M\n    print(ans)", "import math\n\ndef bigmod(a, p, m):\n    r = 1\n    while p > 0:\n        if p % 2 == 1:\n            r = r * a % m\n        p //= 2\n        a = a * a % m\n    return r\nT = int(input())\nfor t in range(T):\n    (A, N, M) = map(int, input().split())\n    if A == 0:\n        print(0)\n        continue\n    digit = len(str(A))\n    power_of_ten = 10 ** digit\n    m = M * (power_of_ten - 1)\n    Sum = bigmod(power_of_ten, N, m)\n    Sum //= power_of_ten - 1\n    Sum = Sum * A % M % M\n    print(Sum)"]