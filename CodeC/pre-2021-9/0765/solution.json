["import sys\ninput = lambda : sys.stdin.readline().strip()\nfrom math import sqrt\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    S1 = sum((1 / (4 * k[i]) for i in range(N)))\n    S2 = sum((k[i] * c[i] for i in range(N)))\n    if S2 == 0:\n        print(0, end=' ')\n        for i in range(N):\n            print(-c[i], end=' ')\n        print()\n    elif S2 < 0:\n        print(-1)\n    else:\n        multiplier = sqrt(S1 / S2)\n        x = [1 / (4 * k[i] ** 2 * multiplier ** 2) - c[i] for i in range(N)]\n        F = sum((sqrt(x[i] + c[i]) for i in range(N)))\n        print(F, end=' ')\n        for i in range(N):\n            print(x[i], end=' ')\n        print()", "import sys\nimport math\nT = int(sys.stdin.readline())\nans_arr = []\nfor t in range(T):\n    N = int(sys.stdin.readline())\n    k = [float(i) for i in sys.stdin.readline().split()]\n    c = [float(j) for j in sys.stdin.readline().split()]\n    kcheck = 1\n    for g in range(N):\n        if k[g] != 1:\n            kcheck = 0\n            break\n    ccheck = 1\n    for h in range(N):\n        if c[h] != 0:\n            ccheck = 0\n            break\n    s = ''\n    if kcheck == 1 and ccheck == 1:\n        s += '0 '\n        for e in range(N):\n            s += '0 '\n    elif N == 2:\n        c1 = c[0]\n        c2 = c[1]\n        k1 = k[0]\n        k2 = k[1]\n        x2 = (c1 * k1 * k1 - c2 * k2 * k2) / (k2 * k2 + k1 * k2)\n        x1 = -(x2 * k2 / k1)\n        if x1 + c1 >= 0 and x2 + c2 >= 0:\n            F = math.sqrt(x1 + c1) + math.sqrt(x2 + c2)\n            s += str(F) + ' ' + str(x1) + ' ' + str(x2)\n        else:\n            s += '-1'\n    else:\n        tmp = 0\n        for w in range(1, N):\n            tmp += 1 / k[w]\n        sumofall = 0\n        for p in range(1, N):\n            sumofall += c[p] * k[p]\n        x1 = (-c[0] * pow(k[0], 2) * tmp + sumofall) / (k[0] + pow(k[0], 2) * tmp)\n        x_arr = [x1]\n        for p in range(1, N):\n            val = (x_arr[0] + c[0]) * (pow(k[0], 2) / pow(k[p], 2)) - c[p]\n            x_arr.append(val)\n        F = 0\n        cond = 1\n        for w in range(N):\n            if x_arr[w] + c[w] >= 0:\n                F += math.sqrt(x_arr[w] + c[w])\n            else:\n                cond = 0\n                break\n        if cond == 0:\n            s += '-1'\n        else:\n            s += str(F) + ' '\n            for e in range(N):\n                s += str(x_arr[e]) + ' '\n    ans_arr.append(s)\nprint('\\n'.join(ans_arr))", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    (s1, s2) = (0, 0)\n    for i in range(n):\n        s1 += c[i] * k[i]\n        s2 += 1 / k[i]\n    t = s1 / s2\n    if t < 0:\n        print(-1)\n    else:\n        f = sqrt(s1 * s2)\n        l = []\n        for i in range(n):\n            l.append(t * (1 / (k[i] * k[i])) - c[i])\n        print(str(f) + ' ' + ' '.join(list(map(str, l))))", "from decimal import *\nfrom math import *\ngetcontext().prec = 15\nt = int(input())\nwhile t:\n    n = int(input())\n    k = []\n    c = []\n    kstring = input()\n    k = kstring.split(' ')\n    k_counter = 1\n    for i in range(0, n):\n        k[i] = Decimal(k[i])\n        if k[i] != 1:\n            k_counter = 0\n    cstring = input()\n    c = cstring.split(' ')\n    c_counter = 1\n    for i in range(0, n):\n        c[i] = Decimal(c[i])\n        if c[i] != 0:\n            c_counter = 0\n    if k_counter == 1 and c_counter == 1 or c_counter == 1:\n        print('0.0000000000', end=' ')\n        for i in range(0, n):\n            print('0.0000000000', end=' ')\n        print('')\n        t -= 1\n        continue\n    num = Decimal(0)\n    den = Decimal(0)\n    for i in range(0, n):\n        num += Decimal(1 / k[i])\n        den += Decimal(k[i] * c[i])\n    if den == 0 and c_counter == 0 and (k_counter == 1):\n        print('0.0000000000', end=' ')\n        for i in range(0, n):\n            print(Decimal(-1 * c[i] / 10000 * 10000), end=' ')\n        print('')\n        t -= 1\n        continue\n    frac = Decimal(num / den)\n    if frac < 0:\n        print('-1')\n        t -= 1\n        continue\n    _lamda = Decimal(num / den)\n    _lamda = Decimal(_lamda / 4)\n    x = []\n    for i in range(0, n):\n        res = Decimal(1 / Decimal(4 * _lamda * k[i] * k[i]))\n        res = res - c[i]\n        x.append(res)\n    _max = 0\n    for i in range(0, n):\n        _max += Decimal(sqrt(x[i] + c[i]))\n    print(_max, end=' ')\n    for i in range(0, n):\n        print(x[i], end=' ')\n    print('')\n    t -= 1", "import numpy as np\nimport sys\nimport warnings\nwarnings.filterwarnings('ignore', category=RuntimeWarning)\n\ndef output(x):\n    return '{:.10f}'.format(x)\n\ndef solve():\n    k = np.array(sys.stdin.readline().strip().split(' ')).astype('float64')\n    c = np.array(sys.stdin.readline().strip().split(' ')).astype('float64')\n    l = np.sqrt(sum(1 / k) / sum(c * k)) / 2\n    x = 1 / (4 * k ** 2 * l ** 2) - c\n    if np.isnan(x).any():\n        print('-1')\n    else:\n        T = sum(np.sqrt(x + c))\n        print(output(T), end='', flush=False)\n        for X in x:\n            print(' ', end='', flush=False)\n            print(output(X), end='', flush=False)\n        print('')\nT = int(sys.stdin.readline())\nfor i in range(T):\n    n = int(sys.stdin.readline())\n    solve()", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    summ_prod = 0\n    summ_div = 0\n    flag = 0\n    f = 0\n    x = [0] * n\n    for i in range(1, n):\n        summ_prod += k[i] * c[i]\n        summ_div += 1 / k[i]\n    a = summ_div * (c[0] * k[0] * k[0])\n    b = summ_div * k[0] * k[0]\n    x[0] = (summ_prod - a) / (b + k[0])\n    for i in range(1, n):\n        x[i] = k[0] * k[0] * (x[0] + c[0]) / (k[i] * k[i]) - c[i]\n    for i in range(n):\n        if c[i] + x[i] < 0:\n            flag = 1\n            break\n        f += math.sqrt(c[i] + x[i])\n    if flag:\n        print('-1')\n    else:\n        print(f, *x)\n    t -= 1", "from math import sqrt\nfor t in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    findX = lambda l2, k, c, i: 1 / (4 * l2 * k[i] * k[i]) - c[i]\n    try:\n        num = sum([1 / (4 * i) for i in k])\n        den = sum([c[i] * k[i] for i in range(n)])\n        if den == 0:\n            isNeg = False\n            for i in c:\n                if i < 0:\n                    isNeg = True\n                    break\n            if True:\n                print('{0:.10f}'.format(0), end=' ')\n                for i in range(n):\n                    print('{0:.10f}'.format(-c[i]), end=' ')\n                print()\n                continue\n            else:\n                den = den / 0\n        l2 = num / den\n        x = [findX(l2, k, c, i) for i in range(n)]\n        f = sum([sqrt(x[i] + c[i]) for i in range(n)])\n        print('{0:.10f}'.format(f), end=' ')\n        for i in x:\n            print(i, end=' ')\n        print()\n    except Exception as e:\n        print(-1)", "def solve(n, k, c):\n    ck = [ki * ci for (ci, ki) in zip(c, k)]\n    sck = sum(ck)\n    if sck < 0:\n        return (-1, None)\n    ik = [1 / ki for ki in k]\n    sik = sum(ik)\n    F = (sck * sik) ** 0.5\n    x = [sck / (k[i] ** 2 * sik) - c[i] for i in range(n)]\n    return (F, x)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    k = list(map(float, input().strip().split()))\n    c = list(map(float, input().strip().split()))\n    (F, x) = solve(n, k, c)\n    if F == -1:\n        print(F)\n    else:\n        print(F, ' '.join(map(str, x)))", "def solve(n, k, c):\n    ck = [ki * ci for (ci, ki) in zip(c, k)]\n    sck = sum(ck)\n    if sck < 0:\n        return (-1, None)\n    ik = [1 / ki for ki in k]\n    sik = sum(ik)\n    F = (sck * sik) ** 0.5\n    x = [sck / (k[i] ** 2 * sik) - c[i] for i in range(n)]\n    return (F, x)\nt = int(input().strip())\nfor _ in range(t):\n    n = int(input().strip())\n    k = list(map(float, input().strip().split()))\n    c = list(map(float, input().strip().split()))\n    (F, x) = solve(n, k, c)\n    if F == -1:\n        print(F)\n    else:\n        print(F, ' '.join(map(str, x)))", "import numpy as np\n\ndef program():\n    n = int(input())\n    kstr = input()\n    cstr = input()\n    klist = list(kstr.split(' '))\n    clist = list(cstr.split(' '))\n    K = np.array(klist, dtype='float64')\n    C = np.array(clist, dtype='float64')\n    Kinv = 1 / K\n    s1 = np.sum(Kinv)\n    KC = K * C\n    s2 = np.sum(KC)\n    if s2 < 0:\n        print('-1')\n        return\n    F = np.sqrt(s1 * s2)\n    p = s2 / s1\n    x = np.empty(n)\n    K2 = K ** 2\n    x = p / K2 - C\n    print(F, end=' ')\n    for i in range(n):\n        print(x[i], end=' ')\n    print()\nT = int(input())\nwhile T:\n    program()\n    T -= 1", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    p = sum((x * y for (x, y) in zip(k, c)))\n    if p < 0:\n        print(-1)\n        continue\n    x = [1.0 / i / i for i in k]\n    q = sum((i * j for (i, j) in zip(x, k)))\n    x = [i * p / q for i in x]\n    f = sum((i ** 0.5 for i in x))\n    x = [i - j for (i, j) in zip(x, c)]\n    print(f, *x)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    p = sum((x * y for (x, y) in zip(k, c)))\n    if p < 0:\n        print(-1)\n        continue\n    x = [1.0 / i / i for i in k]\n    q = sum((i * j for (i, j) in zip(x, k)))\n    x = [i * p / q for i in x]\n    f = sum((i ** 0.5 for i in x))\n    x = [i - j for (i, j) in zip(x, c)]\n    print(f, *x)", "def fun():\n    n = int(input())\n    K = list(map(float, input().split()))\n    C = list(map(float, input().split()))\n    A = 0\n    B = 0\n    for (k, c) in zip(K, C):\n        A += k * c\n        B += 1 / k\n    if A < 0:\n        print(-1)\n        return\n    print((A * B) ** 0.5, end=' ')\n    for (k, c) in zip(K, C):\n        print(A / (B * k * k) - c, end=' ')\n    print()\nt = int(input())\nwhile t:\n    t -= 1\n    fun()", "def fun():\n    n = int(input())\n    K = list(map(float, input().split()))\n    C = list(map(float, input().split()))\n    A = 0\n    B = 0\n    for (k, c) in zip(K, C):\n        A += k * c\n        B += 1 / k\n    if A < 0:\n        print(-1)\n        return\n    print((A * B) ** 0.5, end=' ')\n    for (k, c) in zip(K, C):\n        print(A / (B * k * k) - c, end=' ')\n    print()\nt = int(input())\nwhile t:\n    t -= 1\n    fun()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    (SUMck, SUM_k) = (0.0, 0.0)\n    for i in range(n):\n        SUMck += c[i] * k[i]\n        SUM_k += 1 / k[i]\n    F2 = SUMck * SUM_k\n    if F2 < 0:\n        print(-1)\n    else:\n        print(sqrt(F2), end=' ')\n        t = SUMck / SUM_k\n        for i in range(n):\n            print(t / k[i] / k[i] - c[i], end=' ')\n        print()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    (SUMck, SUM_k) = (0.0, 0.0)\n    for i in range(n):\n        SUMck += c[i] * k[i]\n        SUM_k += 1 / k[i]\n    F2 = SUMck * SUM_k\n    if F2 < 0:\n        print(-1)\n    else:\n        print(sqrt(F2), end=' ')\n        t = SUMck / SUM_k\n        for i in range(n):\n            print(t / k[i] / k[i] - c[i], end=' ')\n        print()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    (SUMck, SUM_k) = (0.0, 0.0)\n    for i in range(n):\n        SUMck += c[i] * k[i]\n        SUM_k += 1 / k[i]\n    F2 = SUMck * SUM_k\n    if F2 < 0:\n        print(-1)\n    else:\n        print(sqrt(F2), end=' ')\n        t = SUMck / SUM_k\n        for i in range(n):\n            print(t / k[i] / k[i] - c[i], end=' ')\n        print()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    (SUMck, SUM_k) = (0.0, 0.0)\n    for i in range(n):\n        SUMck += c[i] * k[i]\n        SUM_k += 1 / k[i]\n    F2 = SUMck * SUM_k\n    if F2 < 0:\n        print(-1)\n    else:\n        print(sqrt(F2), end=' ')\n        t = SUMck / SUM_k\n        for i in range(n):\n            print(t / k[i] / k[i] - c[i], end=' ')\n        print()", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    K = list(map(float, input().split()))\n    C = list(map(float, input().split()))\n    kInverse = 0\n    kc = 0\n    for i in range(N):\n        kc += K[i] * C[i]\n        kInverse += 1 / K[i]\n    F_square = kc * kInverse\n    if F_square < 0:\n        print(-1)\n    else:\n        alpha = kc / kInverse\n        X = []\n        for i in range(N):\n            X.append(alpha / (K[i] * K[i]) - C[i])\n        print(math.sqrt(F_square), end=' ')\n        print(*X)", "from math import sqrt\nfor _ in range(int(input())):\n    (n, k, c, SUMck, SUM_k) = (int(input()), list(map(float, input().split())), list(map(float, input().split())), 0.0, 0.0)\n    for i in range(n):\n        (SUMck, SUM_k) = (SUMck + c[i] * k[i], SUM_k + 1 / k[i])\n    if SUMck * SUM_k < 0:\n        print(-1)\n    else:\n        print(sqrt(SUMck * SUM_k), end=' ')\n        for i in range(n):\n            print(SUMck / SUM_k / k[i] / k[i] - c[i], end=' ')\n        print()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    (SUMck, SUM_k) = (0.0, 0.0)\n    for i in range(n):\n        SUMck += c[i] * k[i]\n        SUM_k += 1 / k[i]\n    F2 = SUMck * SUM_k\n    if F2 < 0:\n        print(-1)\n    else:\n        print(sqrt(F2), end=' ')\n        t = SUMck / SUM_k\n        for i in range(n):\n            print(t / k[i] / k[i] - c[i], end=' ')\n        print()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    (SUMck, SUM_k) = (0.0, 0.0)\n    for i in range(n):\n        SUMck += c[i] * k[i]\n        SUM_k += 1 / k[i]\n    F2 = SUMck * SUM_k\n    if F2 < 0:\n        print(-1)\n    else:\n        print(sqrt(F2), end=' ')\n        t = SUMck / SUM_k\n        for i in range(n):\n            print(t / k[i] / k[i] - c[i], end=' ')\n        print()", "from math import *\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    (a, b) = (0.0, 0.0)\n    for i in range(n):\n        a += c[i] * k[i]\n        b += 1 / k[i]\n    F = a * b\n    if F < 0:\n        print(-1)\n    else:\n        print(sqrt(F), end=' ')\n        for i in range(n):\n            print(a / (k[i] ** 2 * b) - c[i], end=' ')\n        print()", "def ii():\n    return int(input())\n\ndef miff():\n    return map(float, input().split())\n\ndef liff():\n    return list(miff())\nfor _ in range(ii()):\n    n = ii()\n    k = liff()\n    c = liff()\n    A = sum((K * C for (K, C) in zip(k, c)))\n    if A < 0:\n        print(-1)\n        continue\n    B = sum((1 / K for K in k))\n    max_f = (A * B) ** (1 / 2)\n    print(max_f, end=' ')\n    C = A / B\n    for (Q, W) in zip(k, c):\n        ti = C / (Q * Q)\n        xi = ti - W\n        print(xi, end=' ')\n    print()", "def solve(karr, carr, n):\n    sm1 = 0\n    sm2 = 0\n    sm3 = 0\n    for i in range(n):\n        k = karr[i]\n        c = carr[i]\n        sm1 += k * c\n        sm2 += 1 / k\n    if sm1 * sm2 < 0:\n        return -1\n    else:\n        li = [''] * (n + 1)\n        li[0] = str(pow(sm1 * sm2, 0.5))\n        for i in range(n):\n            k = karr[i]\n            c = carr[i]\n            li[i + 1] = str(sm1 / (sm2 * k ** 2) - c)\n        return ' '.join(li)\nfor case in range(int(input())):\n    n = int(input())\n    karr = list(map(float, input().split()))\n    carr = list(map(float, input().split()))\n    print(solve(karr, carr, n))", "import sys, os, re, random, itertools, collections, copy\n\ndef read_int():\n    return int(input())\n\ndef read_num_list():\n    return [float(x) for x in input().split()]\nT = read_int()\nwhile T > 0:\n    T -= 1\n    n = read_int()\n    k = read_num_list()\n    c = read_num_list()\n    (a, b) = (0, 0)\n    for i in range(n):\n        a += k[i] * c[i]\n        b += 1.0 / k[i]\n    ff = a * b\n    if ff < 0:\n        print(-1.0)\n    else:\n        ans = [ff ** 0.5]\n        sk = sum([1.0 / x for x in k])\n        for i in range(n):\n            x = ff / (k[i] * sk) ** 2 - c[i]\n            ans += [x]\n        print(' '.join(map(str, ans)))", "from decimal import *\ngetcontext().prec = 12\nfrom sys import stdin, stdout\nfrom math import sqrt\n\ndef P(k, c):\n    num = Decimal('0')\n    den = Decimal('0')\n    for i in range(len(k)):\n        num += k[i] * c[i]\n        den += 1 / k[i]\n    return num / den\n\ndef F(x, c):\n    ans = Decimal('0')\n    for i in range(len(x)):\n        ans += Decimal.sqrt(x[i] + c[i])\n    return ans\n\ndef X(k, c):\n    p = P(k, c)\n    x = [p / (k[i] * k[i]) - c[i] for i in range(len(k))]\n    return x\n\ndef solve(inp, out):\n    try:\n        n = int(inp())\n        k = list(map(float, inp().split()))\n        c = list(map(float, inp().split()))\n        for i in range(n):\n            k[i] = Decimal(k[i])\n            c[i] = Decimal(c[i])\n        x = X(k, c)\n        f = F(x, c)\n        print(f, end=' ')\n        for i in x:\n            print(i, end=' ')\n        print()\n    except:\n        print(-1)\n\ndef main():\n    inp = stdin.readline\n    out = stdout.write\n    for _ in range(int(inp())):\n        solve(inp, out)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    p = sum((x * y for (x, y) in zip(k, c)))\n    if p < 0:\n        print(-1)\n        continue\n    x = [1.0 / i / i for i in k]\n    q = sum((i * j for (i, j) in zip(x, k)))\n    x = [i * p / q for i in x]\n    f = sum((i ** 0.5 for i in x))\n    x = [i - j for (i, j) in zip(x, c)]\n    print(f, *x)", "import math as m\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr1 = list(map(float, input().split()))\n    arr2 = list(map(float, input().split()))\n    ind = -1\n    ax = 0.0\n    ay = 0.0\n    a = 0\n    b = 0\n    arr3 = [0.0 for i in range(n)]\n    arr4 = [0.0 for i in range(n + 1)]\n    count = 0.0\n    minn = -100000000.0\n    for i in range(n):\n        if arr1[i] > minn:\n            minn = arr1[i]\n            ind = i\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        a += arr1[i] * ax\n        b += arr1[i] * ay\n    count = b * -1.0 / a\n    a = 0\n    b = 0\n    f1 = 0\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        arr3[i] = count * ax + ay\n        ax = arr3[i] + arr2[i]\n        if ax < 0:\n            f1 = 1\n        else:\n            b += m.sqrt(ax)\n        a += arr3[i] * arr1[i]\n    arr4[0] = b\n    for i in range(1, n + 1):\n        arr4[i] = arr3[i - 1]\n    if f1 == 0:\n        print(*arr4)\n    else:\n        print('-1')\n    t = t - 1", "import math as m\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr1 = list(map(float, input().split()))\n    arr2 = list(map(float, input().split()))\n    ind = -1\n    ax = 0.0\n    ay = 0.0\n    a = 0\n    b = 0\n    arr3 = [0.0 for i in range(n)]\n    arr4 = [0.0 for i in range(n + 1)]\n    count = 0.0\n    minn = -100000000.0\n    for i in range(n):\n        if arr1[i] > minn:\n            minn = arr1[i]\n            ind = i\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        a += arr1[i] * ax\n        b += arr1[i] * ay\n    count = b * -1.0 / a\n    a = 0\n    b = 0\n    f1 = 0\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        arr3[i] = count * ax + ay\n        ax = arr3[i] + arr2[i]\n        if ax < 0:\n            f1 = 1\n        else:\n            b += m.sqrt(ax)\n        a += arr3[i] * arr1[i]\n    arr4[0] = b\n    for i in range(1, n + 1):\n        arr4[i] = arr3[i - 1]\n    if f1 == 0:\n        print(*arr4)\n    else:\n        print('-1')\n    t = t - 1", "import math as m\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr1 = list(map(float, input().split()))\n    arr2 = list(map(float, input().split()))\n    ind = -1\n    ax = 0.0\n    ay = 0.0\n    a = 0\n    b = 0\n    arr3 = [0.0 for i in range(n)]\n    arr4 = [0.0 for i in range(n + 1)]\n    count = 0.0\n    minn = -100000000.0\n    for i in range(n):\n        if arr1[i] > minn:\n            minn = arr1[i]\n            ind = i\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        a += arr1[i] * ax\n        b += arr1[i] * ay\n    count = b * -1.0 / a\n    a = 0\n    b = 0\n    f1 = 0\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        arr3[i] = count * ax + ay\n        ax = arr3[i] + arr2[i]\n        if ax < 0:\n            f1 = 1\n        else:\n            b += m.sqrt(ax)\n        a += arr3[i] * arr1[i]\n    arr4[0] = b\n    for i in range(1, n + 1):\n        arr4[i] = arr3[i - 1]\n    if f1 == 0:\n        print(*arr4)\n    else:\n        print('-1')\n    t = t - 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    num = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    xnew = []\n    suml = 0\n    sumr = 0\n    for i in range(0, n):\n        sumr = sumr + num[i] / (num[i] * num[i] * 4)\n        suml = suml + num[i] * c[i]\n    if suml == 0:\n        ansinv = 0\n    else:\n        ansinv = sumr / suml\n    for i in range(0, n):\n        if ansinv != 0:\n            send = 1 / (num[i] ** 2 * 4 * ansinv)\n            send = send - c[i]\n            xnew.append(send)\n        else:\n            xnew.append(0 - c[i])\n    F = 0\n    flag = 0\n    for i in range(0, n):\n        if xnew[i] + c[i] >= 0:\n            flag = 1\n            F = F + (xnew[i] + c[i]) ** 0.5\n        else:\n            flag = 0\n            print(-1)\n            break\n    if flag == 1:\n        print(F, end=' ')\n        print(*xnew)", "import math as m\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr1 = list(map(float, input().split()))\n    arr2 = list(map(float, input().split()))\n    ind = -1\n    ax = 0.0\n    ay = 0.0\n    a = 0\n    b = 0\n    arr3 = [0.0 for i in range(n)]\n    arr4 = [0.0 for i in range(n + 1)]\n    count = 0.0\n    minn = -100000000.0\n    for i in range(n):\n        if arr1[i] > minn:\n            minn = arr1[i]\n            ind = i\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        a += arr1[i] * ax\n        b += arr1[i] * ay\n    count = b * -1.0 / a\n    a = 0\n    b = 0\n    f1 = 0\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        arr3[i] = count * ax + ay\n        ax = arr3[i] + arr2[i]\n        if ax < 0:\n            f1 = 1\n        else:\n            b += m.sqrt(ax)\n        a += arr3[i] * arr1[i]\n    arr4[0] = b\n    for i in range(1, n + 1):\n        arr4[i] = arr3[i - 1]\n    if f1 == 0:\n        print(*arr4)\n    else:\n        print('-1')\n    t = t - 1", "import math as m\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr1 = list(map(float, input().split()))\n    arr2 = list(map(float, input().split()))\n    ind = -1\n    ax = 0.0\n    ay = 0.0\n    a = 0\n    b = 0\n    arr3 = [0.0 for i in range(n)]\n    arr4 = [0.0 for i in range(n + 1)]\n    count = 0.0\n    minn = -100000000.0\n    for i in range(n):\n        if arr1[i] > minn:\n            minn = arr1[i]\n            ind = i\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        a += arr1[i] * ax\n        b += arr1[i] * ay\n    count = b * -1.0 / a\n    a = 0\n    b = 0\n    f1 = 0\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        arr3[i] = count * ax + ay\n        ax = arr3[i] + arr2[i]\n        if ax < 0:\n            f1 = 1\n        else:\n            b += m.sqrt(ax)\n        a += arr3[i] * arr1[i]\n    arr4[0] = b\n    for i in range(1, n + 1):\n        arr4[i] = arr3[i - 1]\n    if f1 == 0:\n        print(*arr4)\n    else:\n        print('-1')\n    t = t - 1", "import math as m\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    arr1 = list(map(float, input().split()))\n    arr2 = list(map(float, input().split()))\n    ind = -1\n    ax = 0.0\n    ay = 0.0\n    a = 0\n    b = 0\n    arr3 = [0.0 for i in range(n)]\n    arr4 = [0.0 for i in range(n + 1)]\n    count = 0.0\n    minn = -100000000.0\n    for i in range(n):\n        if arr1[i] > minn:\n            minn = arr1[i]\n            ind = i\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        a += arr1[i] * ax\n        b += arr1[i] * ay\n    count = b * -1.0 / a\n    a = 0\n    b = 0\n    f1 = 0\n    for i in range(n):\n        ax = minn / arr1[i]\n        ax = ax * ax\n        ay = ax * arr2[ind] - arr2[i]\n        arr3[i] = count * ax + ay\n        ax = arr3[i] + arr2[i]\n        if ax < 0:\n            f1 = 1\n        else:\n            b += m.sqrt(ax)\n        a += arr3[i] * arr1[i]\n    arr4[0] = b\n    for i in range(1, n + 1):\n        arr4[i] = arr3[i - 1]\n    if f1 == 0:\n        print(*arr4)\n    else:\n        print('-1')\n    t = t - 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    num = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    xnew = []\n    suml = 0\n    sumr = 0\n    for i in range(0, n):\n        sumr = sumr + num[i] / (num[i] * num[i] * 4)\n        suml = suml + num[i] * c[i]\n    if suml == 0:\n        ansinv = 0\n    else:\n        ansinv = sumr / suml\n    for i in range(0, n):\n        if ansinv != 0:\n            send = 1 / (num[i] ** 2 * 4 * ansinv)\n            send = send - c[i]\n            xnew.append(send)\n        else:\n            xnew.append(0 - c[i])\n    F = 0\n    flag = 0\n    for i in range(0, n):\n        if xnew[i] + c[i] >= 0:\n            flag = 1\n            F = F + (xnew[i] + c[i]) ** 0.5\n        else:\n            flag = 0\n            print(-1)\n            break\n    if flag == 1:\n        print(F, end=' ')\n        print(*xnew)", "from sys import stdin, stdout\nfrom math import sqrt\n\ndef P(k, c):\n    num = 0\n    den = 0\n    for i in range(len(k)):\n        num += k[i] * c[i]\n        den += 1 / k[i]\n    return num / den\n\ndef F(x, c):\n    ans = 0\n    for i in range(len(x)):\n        ans += sqrt(x[i] + c[i])\n    return ans\n\ndef X(k, c):\n    p = P(k, c)\n    x = [p / (k[i] * k[i]) - c[i] for i in range(len(k))]\n    return x\n\ndef solve(inp, out):\n    try:\n        n = int(inp())\n        k = list(map(float, inp().split()))\n        c = list(map(float, inp().split()))\n        x = X(k, c)\n        f = F(x, c)\n        print(f, end=' ')\n        for i in x:\n            print(i, end=' ')\n        print()\n    except:\n        print(-1)\n\ndef main():\n    inp = stdin.readline\n    out = stdout.write\n    for _ in range(int(inp())):\n        solve(inp, out)\nmain()", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = [float(x) for x in input().split()]\n    c = [float(x) for x in input().split()]\n    lda = 0\n    kx_sum = 0\n    alpha = 0\n    for i in range(n):\n        alpha += 1 / k[i]\n    c_zero = c.count(0)\n    beta = 0\n    for i in range(n):\n        beta += k[i] * c[i]\n    z = 0\n    if beta > 0:\n        lda = math.sqrt(alpha / beta) / 2\n    elif beta < 0:\n        print(-1)\n        continue\n    else:\n        z = 1\n    x = []\n    for i in range(n):\n        if z == 0:\n            x.append(1 / (4 * lda * lda * k[i] * k[i]) - c[i])\n        else:\n            x.append(-c[i])\n            kx_sum = kx_sum + k[i] * x[i]\n    if kx_sum != 0:\n        print(-1)\n        continue\n    f = 0\n    temp = 0\n    for i in range(n):\n        if x[i] + c[i] >= 0:\n            f += math.sqrt(x[i] + c[i])\n        else:\n            temp = 1\n    if c_zero == n:\n        for i in range(n + 1):\n            print('{0:.10f}'.format(0), end=' ')\n        print()\n    elif temp == 0:\n        print(f, end=' ')\n        for i in range(n):\n            print('{0:.10f}'.format(x[i]), end=' ')\n        print()\n    else:\n        print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    K = list(map(float, input().split()))\n    C = list(map(float, input().split()))\n    x_1 = [(C[i] * K[i], 1 / K[i]) for i in range(n)]\n    (eq_1, eq_2) = (sum([x[0] for x in x_1]), sum([x[1] for x in x_1]))\n    x_2 = [eq_1 / (eq_2 * pow(K[i], 2)) - C[i] for i in range(n)]\n    pred = [eq_1 / (eq_2 * pow(K[i], 2)) for i in range(n)]\n    try:\n        ans = [math.sqrt(eq_1 / (eq_2 * pow(K[i], 2))) for i in range(n)]\n    except:\n        pass\n    d = sum((1 for number in pred if number < 0))\n    if d >= 1:\n        print(-1)\n    else:\n        print(sum(ans), *x_2)", "def su(arr1):\n    m = 0\n    for i in arr1[1:]:\n        m += 1 / i\n    return m\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    arr1 = list(map(float, input().split()))\n    arr2 = list(map(float, input().split()))\n    total = 0\n    arr3 = [0, 0]\n    for i in range(n):\n        total += arr1[i] * arr2[i]\n    arr3[1] = total / (arr1[0] * (1 + arr1[0] * su(arr1))) - arr2[0]\n    for i in range(1, n):\n        g = arr1[0] ** 2 / arr1[i] ** 2 * (arr3[1] + arr2[0]) - arr2[i]\n        arr3.append(g)\n    flag = True\n    for i in range(1, n + 1):\n        if arr3[i] + arr2[i - 1] < 0:\n            flag = False\n            break\n        else:\n            arr3[0] += (arr3[i] + arr2[i - 1]) ** (1 / 2)\n    if not flag:\n        print(-1)\n    else:\n        print(*arr3)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    xnew = []\n    suml = 0\n    sumr = 0\n    for i in range(0, n):\n        sumr = sumr + k[i] / (k[i] * k[i] * 4)\n        suml = suml + k[i] * c[i]\n    if suml == 0:\n        ansinv = 0\n    else:\n        ansinv = sumr / suml\n    for i in range(0, n):\n        if ansinv != 0:\n            send = 1 / (k[i] ** 2 * 4 * ansinv)\n            send = send - c[i]\n            xnew.append(send)\n        else:\n            xnew.append(0 - c[i])\n    F = 0\n    flag = 0\n    for i in range(0, n):\n        if xnew[i] + c[i] >= 0:\n            flag = 1\n            F = F + (xnew[i] + c[i]) ** 0.5\n        else:\n            flag = 0\n            print(-1)\n            break\n    if flag == 1:\n        print(F, end=' ')\n        print(*xnew)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    sum1 = sumk = 0\n    k1 = k.copy()\n    for i in range(n):\n        sum1 += k[i] * c[i]\n        k[i] = k[i] * (1 / (k[i] * 2) ** 2)\n        sumk += k[i]\n    if sum1 != 0:\n        res = sumk / sum1\n        res = 1 / res\n    else:\n        res = 0\n    x = list()\n    max1 = 0\n    temp = 0\n    for i in range(n):\n        x.append(res * k[i] / k1[i] - c[i])\n        if x[i] + c[i] < 0:\n            print(-1)\n            temp = 1\n            break\n        max1 += (x[i] + c[i]) ** 0.5\n    if temp == 1:\n        continue\n    print(max1, end=' ')\n    print(*x)", "import math\nt = int(input())\nfor xyz in range(t):\n    n = int(input())\n    k = [float(x) for x in input().split()]\n    c = [float(x) for x in input().split()]\n    ka = []\n    s = 0.0\n    for i in range(n):\n        ka.append(1 / k[i])\n        s += k[i] * c[i]\n    if s < 0:\n        print(-1)\n    else:\n        lamda = math.sqrt(s / sum(ka))\n        mxx = 0.0\n        ans = []\n        for i in range(n):\n            y = lamda * ka[i]\n            mxx += y\n            ans.append(y ** 2 - c[i])\n        print(mxx, *ans)", "import math\nt = int(input())\nfor i in range(t):\n    s = 0.0\n    up = 0.0\n    ans = 0.0\n    x = []\n    n = int(input())\n    k = [float(x) for x in input().split()]\n    c = [float(x) for x in input().split()]\n    flag = 0\n    flag1 = 0\n    for j in range(n):\n        if c[j] != 0:\n            flag = 1\n    for j in range(n):\n        if k[j] != 1:\n            flag1 = 1\n    for j in range(n):\n        s += k[j] * c[j]\n    if s < 0:\n        print(-1)\n    elif flag == 1 and s != 0:\n        for j in range(n):\n            up += 1 / k[j]\n        lamda = math.sqrt(up / (4 * s))\n        for j in range(n):\n            m = 1 / (4 * lamda ** 2 * k[j] ** 2) - c[j]\n            x.append(m)\n        for j in range(n):\n            ans += math.sqrt(x[j] + c[j])\n        print(ans, end=' ')\n        for j in range(n):\n            if j != n - 1:\n                print(x[j], end=' ')\n            else:\n                print(x[j])\n    elif flag == 0:\n        print(0, end=' ')\n        for j in range(n):\n            if j != n - 1:\n                print(0, end=' ')\n            else:\n                print(0)\n    elif s == 0:\n        print(0, end=' ')\n        for j in range(n):\n            if j != n - 1:\n                print(-c[j], end=' ')\n            else:\n                print(-c[j])", "from math import sqrt\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = list(map(lambda s: float(s), input().split()))\n    c = list(map(lambda s: float(s), input().split()))\n    ck = sum((ke * ce for (ke, ce) in zip(k, c)))\n    if ck < 0:\n        print(-1)\n        continue\n    gamma = ck / sum((1 / ke for ke in k))\n    x = [gamma / (ke * ke) - ce for (ke, ce) in zip(k, c)]\n    print(str(sum((sqrt(xe + ce) for (xe, ce) in zip(x, c)))), ' '.join((str(float(xe)) for xe in x)))", "import math\nfrom collections import defaultdict, deque\nfrom sys import stdin, stdout\nfrom bisect import bisect_left, bisect_right\nfrom copy import deepcopy\ninp = lambda : int(stdin.readline())\nsip = lambda : stdin.readline()\nmulip = lambda : map(int, stdin.readline().split())\nlst = lambda : list(map(float, stdin.readline().split()))\nslst = lambda : list(sip())\nM = pow(10, 9) + 7\nfor _ in range(inp()):\n    N = inp()\n    (f1, ans, f2, f3, k) = (0, 0, 0, 0, 0)\n    K = lst()\n    C = lst()\n    numK = list(set(K))\n    for i in range(N):\n        f2 += K[i] * C[i]\n        k += 1 / K[i]\n    f3 = f2 / k\n    for i in range(N):\n        temp = f3 / pow(K[i], 2)\n        if temp < 0:\n            print(-1)\n            f1 = 1\n            break\n        ans += pow(temp, 0.5)\n    if f1 != 1:\n        print(ans, end=' ')\n        for i in range(N):\n            temp = f3 / pow(K[i], 2)\n            temp -= C[i]\n            print(temp, end=' ')\n            (K[i], C[i]) = (0, 0)\n        print()", "import sys\ninput = sys.stdin.readline\nt = int(input())\nimport math\nimport statistics\nfor i in range(t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    sum1 = 0\n    num = 0\n    yo = True\n    for j in range(n):\n        if k[j] != 1:\n            yo = False\n    if yo == False:\n        for j in range(n):\n            sum1 += c[j] * k[j]\n            num += 1 / k[j]\n        sum1 = sum1 * 4\n        deno = sum1\n        flaggg = True\n        if deno != 0:\n            result = num / deno\n            x = []\n            flag = True\n            F = 0\n            for j in range(n):\n                x_temp = -c[j]\n                value = result * k[j] ** 2\n                if value != 0:\n                    x_temp += 1 / (4 * value)\n                else:\n                    flag = False\n                    break\n                if x_temp + c[j] >= 0:\n                    F += (x_temp + c[j]) ** 0.5\n                    x.append(x_temp)\n                else:\n                    flag = False\n                    break\n            if flag == True:\n                s = ''\n                s += str(F)\n                if len(x) == n:\n                    for j in range(len(x)):\n                        s += ' ' + str(x[j])\n                    print(s)\n                else:\n                    print(-1)\n            else:\n                print(-1)\n        else:\n            s = ''\n            s += str(0)\n            for j in range(n):\n                s += ' ' + str(0)\n            print(s)\n    else:\n        x = []\n        F = 0\n        flag = True\n        avg = statistics.mean(c)\n        for j in range(n):\n            x_temp = avg - c[j]\n            x.append(x_temp)\n            if x_temp + c[j] >= 0:\n                F += (x_temp + c[j]) ** 0.5\n            else:\n                flag = False\n                break\n        if flag == True:\n            s = ''\n            s += str(F)\n            if len(x) == n:\n                for j in range(len(x)):\n                    s += ' ' + str(x[j])\n                print(s)\n            else:\n                print(-1)\n        else:\n            print(-1)", "import sys\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    kc = 0\n    divk = 0\n    for i in range(n):\n        kc += k[i] * c[i]\n        divk += 1 / k[i]\n    ans = 0\n    f = 0\n    x = []\n    for i in range(n):\n        x.append(kc / divk / (k[i] * k[i]) - c[i])\n        if x[i] + c[i] < 0:\n            f = 1\n            break\n        ans += math.sqrt(x[i] + c[i])\n    if f:\n        print(-1)\n    else:\n        print(ans, end=' ')\n        print(*x)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(float, input().split()))\n    b = list(map(float, input().split()))\n    s = 0.0\n    for i in range(n):\n        s += a[i] * b[i]\n    if s < 0.0:\n        print(-1)\n        continue\n    x = 0.0\n    for i in a:\n        x += 1 / (2 * i)\n    s *= 2\n    lam = float(pow(s / x, 0.5))\n    f = float(x * lam)\n    ans = []\n    ans.append('%.10f' % f)\n    for i in range(n):\n        k = 0.0\n        k = float(float(pow(1 / (2 * a[i]) * lam, 2)) - b[i])\n        ans.append('%.10f' % k)\n    print(*ans)", "from math import *\nt = int(input())\nfor y in range(t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    kc = []\n    sumk = 0\n    for i in range(n):\n        kc.append(k[i] * c[i])\n        sumk += pow(k[i], -1)\n    sumkc = sum(kc)\n    x = []\n    for i in range(n):\n        num = sumkc - k[i] * c[i] - k[i] * k[i] * c[i] * (sumk - 1 / k[i])\n        den = k[i] * k[i] * sumk\n        x.append(num / den)\n    cx = []\n    flag = 0\n    for i in range(n):\n        cx.append(c[i] + x[i])\n        if cx[i] < 0:\n            flag = 1\n            break\n    if flag == 1:\n        print(-1)\n    else:\n        root = 0\n        for i in range(n):\n            root += sqrt(cx[i])\n        print(root, end=' ')\n        for i in range(n):\n            print(x[i], end=' ')\n    print('\\n')", "import math\ntest = int(input())\nfor i in range(0, test):\n    n = int(input())\n    krr = list(map(float, input().split(' ')))\n    crr = list(map(float, input().split(' ')))\n    prod = 0\n    sum1 = 0\n    ans = 0\n    drr = []\n    for i in range(0, n):\n        prod = prod + krr[i] * crr[i]\n    if prod < 0:\n        print('-1')\n        continue\n    for i in range(0, n):\n        sum1 = sum1 + 1 / krr[i]\n    for i in range(0, n):\n        drr.append(prod / (krr[i] * krr[i] * sum1) - crr[i])\n    for i in range(0, n):\n        ans = ans + math.sqrt(drr[i] + crr[i])\n    print(str.format('{0:.10f}', ans), end=' ')\n    for i in range(0, n):\n        print(str.format('{0:.10f}', drr[i]), end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    temp1 = 0.0\n    for i in range(n):\n        temp1 += c[i] * k[i]\n    temp1 = temp1 * 4\n    temp2 = 0.0\n    for i in range(n):\n        temp2 += 1 / k[i]\n    inv_lambda = temp1 / temp2\n    arr = []\n    for i in range(n):\n        t1 = 1 / (4 * k[i] ** 2)\n        t1 = t1 * inv_lambda\n        t1 = t1 - c[i]\n        arr.append(t1)\n    count = 0.0\n    for i in range(n):\n        count += arr[i] * k[i]\n    flag = 0\n    for i in range(n):\n        if arr[i] + c[i] >= 0.0:\n            pass\n        else:\n            flag = 1\n    if (count >= 0.0 or count <= 0.0) and flag == 0:\n        f = 0.0\n        for i in range(n):\n            f += (arr[i] + c[i]) ** 0.5\n        arr = [f] + arr\n        print(*arr)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    x = [0] * n\n    sum1 = 0\n    sum2 = 0\n    sum3 = 0\n    for j in range(0, n):\n        sum1 += c[j] * k[j]\n        sum2 += 1 / k[j]\n    fl = 1\n    for j in range(0, n):\n        p = sum1 / (k[j] * k[j] * sum2)\n        if p < 0:\n            fl = 0\n            break\n        x[j] = p - c[j]\n        sum3 += math.sqrt(p)\n    if fl == 0:\n        print('-1')\n        continue\n    print(sum3, end=' ')\n    for o in x:\n        print(o, end=' ')\n    print()", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    temp1 = 0.0\n    for i in range(n):\n        temp1 += c[i] * k[i]\n    temp1 = temp1 * 4\n    temp2 = 0.0\n    for i in range(n):\n        temp2 += 1 / k[i]\n    inv_lambda = temp1 / temp2\n    arr = []\n    for i in range(n):\n        t1 = 1 / (4 * k[i] ** 2)\n        t1 = t1 * inv_lambda\n        t1 = t1 - c[i]\n        arr.append(t1)\n    count = 0.0\n    for i in range(n):\n        count += arr[i] * k[i]\n    flag = 0\n    for i in range(n):\n        if arr[i] + c[i] >= 0.0:\n            pass\n        else:\n            flag = 1\n    if (count >= 0.0 or count <= 0.0) and flag == 0:\n        f = 0.0\n        for i in range(n):\n            f += (arr[i] + c[i]) ** 0.5\n        arr = [f] + arr\n        print(*arr)\n    else:\n        print(-1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    right = 0\n    left = 0\n    for i in range(n):\n        right += k[i] * c[i]\n        left += 1 / k[i]\n    ans = []\n    lamb = right / left * 4\n    count = 0\n    f = 0\n    for i in range(n):\n        h = lamb / (4 * k[i] * k[i])\n        if h < 0:\n            count = 1\n            break\n        else:\n            h -= c[i]\n            ans.append(h)\n            f += math.sqrt(h + c[i])\n    if count == 1:\n        print(-1)\n    else:\n        print(f, *ans)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    possible = [-c[i] for i in range(n)]\n    s = 0\n    for i in range(n):\n        s += k[i] * possible[i]\n    if s > 0:\n        print('-1')\n    else:\n        r = [1] * n\n        for i in range(1, n):\n            r[i] = k[0] ** 2 / k[i] ** 2\n        sc = 0\n        sr = 0\n        for i in range(n):\n            sc += k[i] * c[i]\n            sr += k[i] * r[i]\n        x = sc / sr\n        ans = [0] * n\n        lol = 0\n        for i in range(n):\n            r[i] *= x\n            ans[i] = r[i] - c[i]\n            lol += r[i] ** 0.5\n        print(lol, *ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    oneoverk = sum([1 / x for x in k])\n    sumck = sum([c[i] * k[i] for i in range(n)])\n    lamb = sumck / oneoverk\n    if lamb < 0:\n        print(-1)\n    else:\n        x = [lamb / k[i] ** 2 - c[i] for i in range(n)]\n        opti = sum([(x[i] + c[i]) ** (1 / 2) for i in range(n)])\n        x = [opti] + x\n        print(' '.join(list(map(str, x))))", "for _ in range(int(input())):\n    n = int(input())\n    k = [float(x) for x in input().split()]\n    c = [float(x) for x in input().split()]\n    const = sum([i * j for (i, j) in zip(k, c)]) / sum([1 / i for i in k])\n    x = [const / j ** 2 - i for (i, j) in zip(c, k)]\n    if any((i + j < 0 for (i, j) in zip(x, c))):\n        print(-1)\n    else:\n        res = sum([(i + j) ** 0.5 for (i, j) in zip(x, c)])\n        print(res, *x)", "from functools import reduce\nfrom operator import add\nfrom math import sqrt\n\ndef main():\n    for test_Case in range(int(input())):\n        n = int(input())\n        k = list(map(float, input().split()))\n        c = list(map(float, input().split()))\n        numer = reduce(add, map(lambda i: k[i] * c[i], range(n)))\n        x = [0] * n\n        value = 0\n        Count = k.count(0)\n        if Count != 0:\n            print(-1)\n            continue\n        denom = 0\n        for i in range(n):\n            denom += 1 / k[i]\n        lamb = numer / denom\n        if lamb < 0:\n            print(-1)\n            continue\n        for i in range(n):\n            x[i] = lamb / pow(k[i], 2) - c[i]\n            value += sqrt(x[i] + c[i])\n        print(value, *x, sep=' ')\nmain()", "import math as m\nimport numpy as np\nimport pandas as pd\ntestcase = int(input())\nfor i in range(testcase):\n    a = int(input())\n    b = [float(x) for x in input().split()]\n    d = [float(x) for x in input().split()]\n    v = []\n    cnt = 0.0\n    for i in range(a):\n        v.append(1 / b[i])\n        cnt += b[i] * d[i]\n    if cnt < 0:\n        print(-1)\n    else:\n        lm = m.sqrt(cnt / sum(v))\n        M = 0.0\n        xx = []\n        for j in range(a):\n            y = lm * v[j]\n            M += y\n            xx.append(y ** 2 - d[j])\n        print(M, *xx)", "import math as m\nimport numpy as np\nimport pandas as pd\ntestcase = int(input())\nfor i in range(testcase):\n    a = int(input())\n    b = [float(x) for x in input().split()]\n    d = [float(x) for x in input().split()]\n    v = []\n    cnt = 0.0\n    for i in range(a):\n        v.append(1 / b[i])\n        cnt += b[i] * d[i]\n    if cnt < 0:\n        print(-1)\n    else:\n        lm = m.sqrt(cnt / sum(v))\n        M = 0.0\n        xx = []\n        for j in range(a):\n            y = lm * v[j]\n            M += y\n            xx.append(y ** 2 - d[j])\n        print(M, *xx)", "from math import sqrt\n\ndef get_input_line():\n    return input()\n\ndef f(x1, x2, c1, c2):\n    return sqrt(x1 + c1) + sqrt(x2 + c2)\n\ndef wrap(result):\n    return ' '.join([str(_) for _ in result])\n\ndef solve_n_equals_two_small(n, ks, cs):\n    (k1, k2) = ks\n    (c1, c2) = cs\n    factor = -k2 / k1\n    x1 = -c1\n    (max_f, max_x1, max_x2) = (-1, x1, x1 / factor)\n    while x1 / factor >= -c2:\n        x2 = x1 / factor\n        curr_f = f(x1, x2, c1, c2)\n        if curr_f > max_f:\n            max_f = curr_f\n            max_x1 = x1\n            max_x2 = x2\n        x1 += 0.01\n    if max_f == -1:\n        return wrap([-1])\n    else:\n        return wrap([max_f, max_x1, max_x2])\n\ndef solve_n_equals_two_big(n, ks, cs):\n    (k1, k2) = ks\n    (c1, c2) = cs\n    fc = k1 / k2\n    x1 = (c2 - c1 * fc ** 2) / (fc ** 2 + fc)\n    x2 = -fc * x1\n    if x1 + c1 < 0 or x2 + c2 < 0:\n        return wrap([-1])\n    return wrap([f(x1, x2, c1, c2), x1, x2])\n\ndef solve_k_equals_one(n, ks, cs):\n    positive_sum = 0\n    negative_sum = 0\n    for c in cs:\n        if c < 0:\n            negative_sum += abs(c)\n        else:\n            positive_sum += c\n    if negative_sum > positive_sum:\n        return wrap([-1])\n    target_value = (positive_sum - negative_sum) / n\n    max_f = sqrt(target_value) * n\n    xs = []\n    for c in cs:\n        x = target_value - c\n        xs.append(x)\n    return wrap([max_f] + xs)\n\ndef solve_c_equals_zero(n, ks, cs):\n    result = [0] * (n + 1)\n    return wrap(result)\n\ndef solve_big(n, ks, cs):\n    sum_ci_times_ki = 0\n    sum_one_over_ki = 0\n    for (ki, ci) in zip(ks, cs):\n        sum_ci_times_ki += ci * ki\n        sum_one_over_ki += 1 / ki\n    if sum_ci_times_ki <= 0:\n        return wrap([-1])\n    lambda_factor = sum_one_over_ki / sum_ci_times_ki\n    xs = []\n    f_ = 0\n    for i in range(n):\n        ki = ks[i]\n        ci = cs[i]\n        xi = 1 / (ki * ki * lambda_factor) - ci\n        if xi + ci < 0:\n            return wrap(-1)\n        xs.append(xi)\n        f_ += sqrt(xi + ci)\n    return wrap([f_] + xs)\n\ndef main():\n    t = int(get_input_line())\n    for i in range(t):\n        n = int(get_input_line())\n        ks = list(map(float, get_input_line().strip().split()))\n        cs = list(map(float, get_input_line().strip().split()))\n        result = '-1'\n        all_c_zeroes = True\n        for c in cs:\n            if c != 0:\n                all_c_zeroes = False\n                break\n        all_k_ones = True\n        for k in ks:\n            if k != 1:\n                all_k_ones = False\n                break\n        if all_c_zeroes:\n            result = solve_c_equals_zero(n, ks, cs)\n        elif all_k_ones:\n            result = solve_k_equals_one(n, ks, cs)\n        elif n == 2:\n            result = solve_n_equals_two_big(n, ks, cs)\n        else:\n            result = solve_big(n, ks, cs)\n        print(result)\nmain()", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    x = []\n    ans = 0.0\n    temp = 0.0\n    deno = 0.0\n    for i in range(n):\n        temp = k[i] * c[i] + temp\n        deno = deno + 1 / k[i]\n    if temp >= 0:\n        for i in range(n):\n            a = temp / (deno * k[i] * k[i])\n            x.append(a - c[i])\n            ans = ans + math.sqrt(a)\n        print(ans, end=' ')\n        for i in range(n):\n            print(x[i], end=' ')\n        print()\n    else:\n        print(-1)", "t = int(input())\nfor ijk in range(0, t):\n    n = int(input())\n    k = list(map(float, input().strip().split()))\n    c = list(map(float, input().strip().split()))\n    ans1 = 0\n    ans2 = 0\n    for i in range(0, n):\n        ans1 += 1 / k[i]\n        ans2 += k[i] * c[i]\n    if ans1 * ans2 < 0:\n        print(-1)\n    else:\n        F = pow(ans1 * ans2, 0.5)\n        m = F / ans1\n        x = []\n        for i in range(0, n):\n            xi = m * m / (k[i] * k[i]) - c[i]\n            x.append(xi)\n        print(F, end=' ')\n        print(*x, sep=' ')", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    k = [float(x) for x in input().strip().split()]\n    c = [float(x) for x in input().strip().split()]\n    sumkc = sum((k[i] * c[i] for i in range(n)))\n    if sumkc < 0:\n        print(-1)\n    else:\n        try:\n            sumkc_by_sum_1_by_k = sumkc / sum((1 / k[i] for i in range(n)))\n            y = [sumkc_by_sum_1_by_k / k[i] ** 2 for i in range(n)]\n            f = sum((y[i] ** 0.5 for i in range(n)))\n            x = [y[i] - c[i] for i in range(n)]\n            print(f, ' '.join(map(str, x)))\n        except:\n            print(-1)", "t = [int(k) for k in input().strip().split(' ')][0]\nfrom math import sqrt\nfor nt in range(t):\n    n = [int(k) for k in input().strip().split(' ')][0]\n    k = [float(_) for _ in input().strip().split(' ')]\n    c = [float(_) for _ in input().strip().split(' ')]\n    cani = sum([-k[i] * c[i] for i in range(n)])\n    if cani > 0:\n        print(-1)\n    else:\n        ut = sum([0.25 / i for i in k])\n        tdr = sqrt(-ut / cani) if cani else 100000000\n        x = [0.25 / k[i] / k[i] / tdr / tdr - c[i] for i in range(n)]\n        print(' '.join(['{:.6f}'.format(_) for _ in [sum([sqrt(x[i] + c[i]) for i in range(n)])] + x]))", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    k = input().strip().split()\n    for i in range(n):\n        k[i] = float(k[i])\n    c = input().strip().split()\n    for i in range(n):\n        c[i] = float(c[i])\n    x1 = 0\n    p = 0\n    for i in range(1, n):\n        p = p + (c[i] * k[i] * k[i] - c[0] * k[0] * k[0]) / k[i]\n    q = k[0]\n    for i in range(1, n):\n        q = q + k[0] * k[0] / k[i]\n    x1 = p / q\n    ans = []\n    ans.append(x1)\n    temp = k[0] * k[0] * (x1 + c[0])\n    for i in range(1, n):\n        xx = temp / (k[i] * k[i]) - c[i]\n        ans.append(xx)\n    flag = 1\n    ans1 = [0] * n\n    for i in range(n):\n        ans1[i] = ans[i] + c[i]\n        if ans1[i] < 0:\n            flag = 0\n    if flag == 1:\n        total = 0\n        for i in ans1:\n            total = total + i ** 0.5\n        print('%.10f' % total, end=' ')\n        for i in ans:\n            print('%.10f' % i, end=' ')\n        print()\n    else:\n        print(-1)\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = list(map(eval, input().strip().split()))\n    c = list(map(eval, input().strip().split()))\n    (a, b) = (0, 0)\n    try:\n        cnt = 0\n        for i in range(n):\n            if c[i] != 0:\n                a += k[i] * c[i]\n                cnt += 1\n            b += 1 / k[i]\n        if a == 0 and cnt > 0:\n            print(0, *[-1 * x for x in c])\n            continue\n        else:\n            l = b ** (1 / 2) / (2 * a ** (1 / 2))\n        m = 0\n        x = [0] * n\n        for i in range(n):\n            x[i] = 1 / (4 * l * l * k[i] * k[i]) - c[i]\n            m += (x[i] + c[i]) ** (1 / 2)\n        if type(m) == type(1 + 1j):\n            print(-1)\n        else:\n            print(m, *x)\n    except:\n        print(0, *[0] * n)", "import numpy as np\n\ndef main():\n    for _ in range(int(input())):\n        N = int(input())\n        K = np.array([float(i) for i in input().split()])\n        C = np.array([float(i) for i in input().split()])\n        if np.sum(K * C) < 0:\n            print(-1)\n        else:\n            k_2 = K[0] ** 2\n            K_2 = k_2 / K\n            numer = np.sum(C * K) - np.sum(K_2) * C[0]\n            denom = np.sum(K_2)\n            x1 = numer / denom\n            l = (x1 + C[0]) * (K[0] * K[0]) / (K * K) - C\n            mx = np.sum(np.sqrt(l + C))\n            print(mx, *list(l))\nmain()", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    k = [float(s) for s in input().split()]\n    c = [float(s) for s in input().split()]\n    w2 = sum([k[i] * c[i] for i in range(1, n)])\n    w3 = sum([1 / k[i] for i in range(1, n)])\n    if w2 + k[0] * c[0] < 0:\n        print(-1)\n        continue\n    x1 = (w2 - c[0] * k[0] ** 2 * w3) / (k[0] * (1 + k[0] * w3))\n    x = [0 for i in range(n)]\n    x[0] = x1\n    for i in range(1, n):\n        x[i] = (x[0] + c[0]) * k[0] ** 2 / k[i] ** 2 - c[i]\n    F = sum([sqrt(x[i] + c[i]) for i in range(n)])\n    print(round(F, 3), end=' ')\n    for i in x:\n        print(round(i, 3), end=' ')\n    print()", "import sys\nimport math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    k = list(map(float, input().split(' ')))\n    c = list(map(float, input().split(' ')))\n    lembda = 0\n    sum = 0\n    altermul = 0\n    mul = 0\n    cn = 0\n    chsum = 0\n    x = []\n    for i in range(n):\n        mul = mul + 1 / k[i]\n    for i in range(n):\n        if c[i] == 0:\n            cn = cn + 1\n    for i in range(n):\n        sum = sum + k[i] * c[i]\n        altermul = altermul + mul / k[i]\n    z = 0\n    if sum > 0:\n        lembda = math.sqrt(mul / sum) / 2\n    elif sum < 0:\n        print(-1)\n        t = t - 1\n        continue\n    else:\n        z = 1\n    for i in range(n):\n        if z != 1:\n            x.append(1 / (4 * lembda * lembda * k[i] * k[i]) - c[i])\n        else:\n            x.append(-c[i])\n            chsum = chsum + k[i] * x[i]\n    if chsum != 0:\n        print(-1)\n        t = t - 1\n        continue\n    fmax = 0\n    wr = 0\n    for i in range(n):\n        if x[i] + c[i] >= 0:\n            fmax = fmax + math.sqrt(x[i] + c[i])\n        else:\n            wr = 1\n    if cn == n:\n        temp = 0.0\n        print(temp, end=' ')\n        for i in range(n):\n            print(temp, end=' ')\n        print()\n    elif wr == 0:\n        print(fmax, end=' ')\n        for i in range(n):\n            print(x[i], end=' ')\n        print()\n    else:\n        print(-1)\n    k.clear()\n    c.clear()\n    t = t - 1", "import math\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    k = list(map(float, input().rstrip().split()))\n    c = list(map(float, input().rstrip().split()))\n    dp = [0] * n\n    if k.count('1') == n and c.count(0) == n:\n        print(0, *dp)\n        continue\n    if c.count(0) == n:\n        print(0, *dp)\n        continue\n    if n == 2:\n        c1 = c[0]\n        c2 = c[1]\n        k1 = k[0]\n        k2 = k[1]\n        x1 = (c2 * k2 * k2 - k1 * k1 * c1) / (k1 * k1 + k1 * k2)\n        x2 = -1 * (x1 * k1) / k2\n        if c1 + x1 < 0 or c2 + x2 < 0:\n            print(-1)\n        else:\n            value = math.sqrt(c1 + x1) + math.sqrt(c2 + x2)\n            print(value, x1, x2)\n        continue\n    sum1 = 0\n    sum2 = 0\n    flag = 0\n    for i in range(n):\n        sum1 += 1 / k[i]\n        sum2 += c[i] * k[i]\n    if sum2 == 0:\n        print(-1)\n        continue\n    l = sum1 / sum2\n    l = l / 4\n    for i in range(n):\n        p = 4.0 * l * k[i] * k[i]\n        if p == 0:\n            flag = 1\n            break\n        p = 1 / p\n        dp[i] = p - c[i]\n        if dp[i] + c[i] < 0:\n            flag = 1\n            break\n    if flag == 1:\n        print(-1)\n    else:\n        ans = 0\n        for i in range(n):\n            ans += math.sqrt(dp[i] + c[i])\n        print(ans, *dp)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    kList = list(map(float, input().split()))\n    cList = list(map(float, input().split()))\n    found = False\n    for i in cList:\n        if i != 0:\n            found = True\n    upUp = 1 / kList[0]\n    downUp = cList[0] * kList[0]\n    downDown = 0.0\n    for i in range(1, n, 1):\n        upUp += 1 / kList[i]\n        downUp += cList[i] * kList[i]\n    if downUp == 0 and found == True:\n        print(0, end=' ')\n        for i in range(n):\n            print(-1 * cList[i], end=' ')\n        print()\n        continue\n    if downUp == 0:\n        for _ in range(n + 1):\n            print(0, end=' ')\n        print()\n        continue\n    if downUp < 0:\n        print(-1)\n        continue\n    lambdaConstant = math.sqrt(upUp / downUp)\n    lambdaConstant /= 2\n    ls = []\n    result = 0.0\n    for i in range(n):\n        down = 2 * kList[i] * lambdaConstant\n        down *= down\n        x = 1 - cList[i] * down\n        x /= down\n        ls.append(x)\n        result += math.sqrt(x + cList[i])\n    print('%0.10f ' % result, end=' ')\n    for i in range(n):\n        print('%0.10f ' % ls[i], end=' ')\n    print()", "for _ in range(0, int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    cc = 0\n    dd = 0\n    for i in c:\n        if i == 0:\n            cc = cc + 1\n        if i < 0:\n            dd = dd + 1\n    if cc == n:\n        c.append(0)\n        print(*c, sep=' ')\n    elif dd == n:\n        print(-1)\n    else:\n        v1 = 0\n        v2 = 0\n        for i in range(0, n):\n            v1 += 1 / k[i]\n            v2 += c[i] * k[i]\n        if v2 == 0:\n            print(0, end=' ')\n            for i in range(0, n):\n                c[i] = -1 * c[i]\n            print(*c, sep=' ')\n        else:\n            lm = v1 / (4 * v2)\n            sol = []\n            s = 0\n            chk = 1\n            for i in range(0, n):\n                d = 4 * lm * k[i] * k[i]\n                x = 1 / d\n                x = x - c[i]\n                sol.append(round(x, 10))\n                if sol[i] + c[i] >= 0:\n                    s += pow(sol[i] + c[i], 0.5)\n                else:\n                    chk = 0\n                    break\n            if chk == 0:\n                print(-1)\n            else:\n                print(round(s, 10), end=' ')\n                print(*sol, sep=' ')", "import math\n\ndef calc(y, n):\n    z = 0\n    for i in range(n):\n        z = z + math.sqrt(y[i])\n    return z\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    sum_ki = 0\n    sum_kc = 0\n    for i in range(n):\n        sum_ki += 1 / k[i]\n        sum_kc += k[i] * c[i]\n    if sum_kc >= 0:\n        D = sum_kc / sum_ki\n        y = []\n        for i in range(n):\n            y.append(D / k[i] ** 2)\n        F = calc(y, n)\n        print('{0:.10f}'.format(F), end=' ')\n        for i in range(n):\n            print('{0:.10f}'.format(y[i] - c[i]), end=' ')\n        print()\n    else:\n        print('-1')", "import math\nt = int(input())\nfor l in range(0, t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    ciki = 0\n    ciki2 = 0\n    ciki3 = 0\n    for i in range(0, n):\n        ciki += c[i] * k[i]\n    for i in range(0, n):\n        ciki3 += k[0] * k[0] / k[i]\n    x = list()\n    x.append(ciki / ciki3 - c[0])\n    for i in range(1, n):\n        x.append((x[0] + c[0]) * (k[0] * k[0]) / (k[i] * k[i]) - c[i])\n    t = 0\n    f = 0\n    for i in range(0, n):\n        if x[i] + c[i] < 0:\n            print(-1)\n            break\n        else:\n            t += 1\n            f += math.sqrt(x[i] + c[i])\n    if t < n:\n        continue\n    print(f, end=' ')\n    for i in range(0, n):\n        print(x[i], end=' ')\n    print('')", "t = int(input())\nfor nt in range(t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    s1 = 0\n    for i in range(1, n):\n        s1 += k[i] * c[i]\n    s2 = 0\n    for i in range(1, n):\n        s2 += 1 / k[i]\n    subtract = c[0] * k[0] * k[0] * s2\n    rhs = s1 - subtract\n    s3 = 1\n    for i in range(1, n):\n        s3 += k[0] / k[i]\n    lhs = s3 * k[0]\n    x1 = rhs / lhs\n    ans = []\n    ans.append(x1)\n    x1 = x1 + c[0]\n    x1 = x1 * k[0] * k[0]\n    for i in range(1, n):\n        ans.append(x1 / k[i] ** 2 - c[i])\n    answer = 0\n    flag = 0\n    for i in range(n):\n        if ans[i] + c[i] >= 0:\n            answer += (ans[i] + c[i]) ** 0.5\n        else:\n            print(-1)\n            flag = 1\n            break\n    if flag == 0:\n        print(answer, end=' ')\n        print(*ans)", "for t in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    kr = list(map(lambda e: 1 / e, k))\n    kc = [k[i] * c[i] for i in range(n)]\n    y = 1 / sum(kr) * sum(kc)\n    x = []\n    flag = False\n    F = 0\n    for i in range(n):\n        xi = (y * kr[i] - kc[i]) / k[i]\n        if xi + c[i] < 0:\n            flag = True\n            break\n        F += (xi + c[i]) ** 0.5\n        x.append(xi)\n    if flag:\n        print(-1)\n    else:\n        print(F, end=' ')\n        print(' '.join(map(str, x)))", "import math\nfrom collections import deque, defaultdict\nfrom sys import stdin, stdout\ninput = stdin.readline\nlistin = lambda : list(map(float, input().split()))\nmapin = lambda : map(int, input().split())\n\ndef kc(i):\n    return k[i] ** 2 * c[i]\nfor _ in range(int(input())):\n    n = int(input())\n    k = listin()\n    c = listin()\n    skc = 0\n    for i in range(n):\n        skc += k[i] * c[i]\n    skin = 0\n    for i in k:\n        skin += 1 / i\n    if skc < 0:\n        print(-1)\n    else:\n        x = []\n        if skc == 0:\n            s = sum(c)\n            ans = [s / n for i in range(n)]\n            val = n * (s / n) ** 0.5\n            for i in range(n):\n                ans[i] -= c[i]\n            print(val, end=' ')\n            print(*ans)\n        else:\n            fourlambdasquare = skin / skc\n            for i in range(n):\n                x.append(1 / (fourlambdasquare * k[i] ** 2) - c[i])\n            val = 0\n            for i in range(n):\n                val += (x[i] + c[i]) ** 0.5\n            print(val, end=' ')\n            print(*x)", "from sys import stdin\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    arr_k = list(map(float, stdin.readline().split()))\n    arr_c = list(map(float, stdin.readline().split()))\n    s = 0\n    for i in range(n):\n        s += arr_k[i] * (0 - arr_c[i])\n    if s > 0:\n        print(-1)\n    elif arr_k.count(1) == n:\n        t = sum(arr_c) / n\n        f = (n * sum(arr_c)) ** 0.5\n        print(round(f, 10), end=' ')\n        for i in range(n - 1):\n            print(round(t - arr_c[i], 10), end=' ')\n        print(round(t - arr_c[n - 1], 10))\n    else:\n        (D, P) = (0, 0)\n        for i in range(n):\n            D += arr_k[i] * arr_c[i]\n            P += 1 / arr_k[i]\n        F = (D * P) ** 0.5\n        print(round(F, 10), end=' ')\n        for i in range(n - 1):\n            d = D - arr_k[i] * arr_c[i]\n            p = P - 1 / arr_k[i]\n            num = d - p * arr_c[i] * arr_k[i] ** 2\n            den = arr_k[i] * (1 + p * arr_k[i])\n            print(round(num / den, 10), end=' ')\n        d = D - arr_k[n - 1] * arr_c[n - 1]\n        p = P - 1 / arr_k[n - 1]\n        num = d - p * arr_c[n - 1] * arr_k[n - 1] ** 2\n        den = arr_k[n - 1] * (1 + p * arr_k[n - 1])\n        print(round(num / den, 10))", "from numpy import inner\n\ndef f(x, c):\n    total = 0\n    for i in range(len(x)):\n        if x[i] + c[i] < 0:\n            return -1\n        total += (x[i] + c[i]) ** 0.5\n    return total\nfor _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    x = [0] * len(k)\n    k_ = sum([1 / ki for ki in k])\n    kc = inner(k, c)\n    for i in range(len(k)):\n        k_i = k_ - 1 / k[i]\n        x[i] = (kc - k[i] * c[i] - k[i] ** 2 * c[i] * k_i) / (k[i] + k[i] ** 2 * k_i)\n    ans = f(x, c)\n    if ans == -1:\n        print(-1)\n    else:\n        print(ans, end=' ')\n        print(*x)", "from math import sqrt\nfrom decimal import Decimal\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = list(map(Decimal, input().split()))\n    c = list(map(Decimal, input().split()))\n    G = 0\n    for i in range(n):\n        G += k[i] * c[i]\n    P = 1\n    for i in range(n):\n        P *= k[i]\n    y = []\n    for i in range(n):\n        y.append(P / k[i])\n    Y = sum(y)\n    if G < 0:\n        print(-1)\n    else:\n        res = []\n        for i in range(n):\n            res.append(G * y[i] / (Y * k[i]))\n        m = 0\n        for i in range(n):\n            m += sqrt(res[i])\n            res[i] -= c[i]\n        print(m, end=' ')\n        for i in range(n):\n            print(res[i], end=' ')\n        print()", "def kmpsearch(out, pat):\n    n = len(out)\n    m = len(pat)\n    p = [0] * m\n    compute(pat, m, p)\n    q = 0\n    i = 0\n    while i < n:\n        if pat[q] == out[i]:\n            q = q + 1\n            i = i + 1\n        elif q != 0:\n            q = p[q - 1]\n        else:\n            i = i + 1\n        if q == m:\n            print('pattern occurs at ' + str(i - q))\n            q = p[q - 1]\n\ndef redoximi(vector1, vector2):\n    ans = 0\n    for i in range(len(vector1)):\n        ans += vector1[i] * vector2[i]\n    return ans\n\ndef compute(pat, m, p):\n    k = 1\n    l = 0\n    while k < m:\n        if pat[k] <= pat[l]:\n            l = l + 1\n            p[k] = l\n            k = k + 1\n        elif l != 0:\n            l = p[l - 1]\n        else:\n            p[k] = 0\n            k = k + 1\n\ndef bottle_neck(list):\n    ans = 0\n    for i in list:\n        ans += 1 / i\n    return ans\n\ndef solveit(dic):\n\n    def create_ST(arr, st, low, high, pos):\n        if low == high:\n            st[pos] = arr[low]\n            return st\n        mid = int((low + high) / 2)\n        create_ST(arr, st, low, mid, 2 * pos + 1)\n        create_ST(arr, st, mid + 1, high, 2 * pos + 2)\n        st[pos] = min(st[2 * pos + 1], st[2 * pos + 2])\n        return st\n\n    def next_power_of_2(x):\n        f = 1 if x == 0 else 2 ** (x - 1).bit_length()\n        return f * 2 - 1\n\n    def query(st, ql, qh, low, high, pos):\n        if ql <= low and qh >= high:\n            return st[pos]\n        if ql > high or qh < low:\n            return math.inf\n        mid = (low + high) / 2\n        return min(query(st, ql, qh, low, mid, 2 * pos + 1), query(st, ql, qh, mid + 1, high, 2 * pos + 2))\n    final = 0\n    for (oppo, vivo) in dic.items():\n        for casio in range(len(vivo)):\n            final += vivo[casio] * casio\n            final -= vivo[casio] * (len(vivo) - casio - 1)\n        final -= len(vivo) * (len(vivo) - 1) // 2\n        if oppo == 0:\n            for prime in vivo:\n                final += prime\n    return final\n\ndef waarida(list):\n    ans = 0\n    for i in list:\n        ans += i ** 0.5\n    return ans\n\ndef search(pat, str):\n    m = len(pat)\n    n = len(str)\n    for i in range(n - m + 1):\n        j = 0\n        for j in range(0, m):\n            if str[i + j] != pat[j]:\n                break\n        if j == m - 1:\n            print('Pattern found at', i)\n\ndef float_input():\n    list = [float(i) for i in input().split()]\n    return list\n\ndef insert(word):\n    current = root\n    for i in range(len(word)):\n        if word[i] not in current.children:\n            node = TrieNode()\n            current.children[word[i]] = node\n        else:\n            node = current.children[word[i]]\n        current = node\n        current.endofword = True\n        current.count += 1\nt = int(input())\n\ndef search(word, root):\n    current = root\n    for i in range(len(word)):\n        if word[i] not in current.children:\n            return False\n        else:\n            node = current.children[word[i]]\n        current = node\n    return {'The word exists': current.endofword, 'No of times word occurs': current.count}\nfor tt in range(t):\n    (matter, mojner) = ([], [])\n    size = int(input())\n    K = float_input()\n    C = float_input()\n    pried = bottle_neck(K)\n    dire = redoximi(K, C)\n    possible_or_not = True\n    all_knowing = dire / pried\n    for i in range(size):\n        matter.append(all_knowing / pow(K[i], 2))\n        if matter[i] < 0:\n            possible_or_not = False\n            break\n        else:\n            mojner.append(matter[i] - C[i])\n    if possible_or_not:\n        mojner = [waarida(matter)] + mojner\n        print(*mojner)\n    else:\n        print(-1)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    A = [float(x) for x in input().split()]\n    B = [float(x) for x in input().split()]\n    p = 0\n    q = 0\n    for i in range(n - 1):\n        p += A[i] * B[i]\n        q += 1 / A[i]\n    q *= A[-1] ** 2\n    Xn = (p - B[-1] * q) / (q + A[-1])\n    if Xn + B[-1] >= 0:\n        flag = 0\n        D = []\n        for i in range(n - 1):\n            l = (Xn + B[-1]) * (A[-1] / A[i]) ** 2 - B[i]\n            if l + B[i] >= 0:\n                D.append(l)\n            else:\n                flag = 1\n                break\n        if flag:\n            print(-1)\n        else:\n            F = (Xn + B[-1]) ** 0.5\n            for i in range(n - 1):\n                F += (D[i] + B[i]) ** 0.5\n            print(F, end=' ')\n            for i in D:\n                print(i, end=' ')\n            print(Xn)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor ti in range(t):\n    n = int(input())\n    l1 = list(map(float, input().split()))\n    l2 = list(map(float, input().split()))\n    l3 = []\n    a1 = 0\n    for i in range(n):\n        a1 += l1[i] * l2[i]\n    a2 = 0\n    for i in range(n):\n        a2 += 1 / l1[i]\n    f = a1 * a2\n    if f < 0:\n        print(-1)\n        continue\n    l = a1 / a2\n    for i in range(n):\n        x = l / (l1[i] * l1[i]) - l2[i]\n        l3.append(x)\n    f = math.sqrt(f)\n    print(f, end=' ')\n    for i in range(n - 1):\n        print(l3[i], end=' ')\n    print(l3[-1])", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    multi = 0\n    divi = 0\n    for i in range(n):\n        multi += k[i] * c[i]\n        divi += 1 / k[i]\n    const = multi / divi\n    ans = []\n    f = 0\n    for i in range(n):\n        cur_ans = const / pow(k[i], 2) - c[i]\n        ans.append(cur_ans)\n        f += (cur_ans + c[i]) ** 0.5\n    if isinstance(f, complex):\n        print(-1)\n        continue\n    else:\n        print(f, end=' ')\n    print(' '.join((str(v) for v in ans)))", "from math import sqrt\n\ndef solve2(k, c):\n    G = 0\n    for (ke, ce) in zip(k, c):\n        G += ke * ce\n    if G:\n        k_inv = [1 / ke for ke in k]\n        L_sq = 1 / (4 * G) * sum(k_inv)\n        if L_sq <= 0:\n            return False\n        L = sqrt(L_sq)\n        X = [1 / (2 * L * ke) for ke in k]\n    else:\n        X = [0 for i in range(len(k))]\n    s = sum(X)\n    x = [Xe ** 2 - ce for (Xe, ce) in zip(X, c)]\n    return [s] + x\nt = int(input())\nfor __ in range(t):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    ans = solve2(k, c)\n    if ans:\n        print(*ans)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = [float(x) for x in input().split()]\n    c = [float(x) for x in input().split()]\n    temp = 0.0\n    k1 = []\n    sc = 0.0\n    for i in range(n):\n        k1.append(1 / k[i])\n        sc += k[i] * c[i]\n    if sc < 0:\n        print(-1)\n    else:\n        lam = math.sqrt(sc / sum(k1))\n        mx = 0.0\n        x = []\n        for i in range(n):\n            y = lam * k1[i]\n            mx += y\n            x.append(y ** 2 - c[i])\n        print(mx, *x)", "from math import *\nfor i in range(int(input())):\n    N = int(input())\n    K = list(map(float, input().split()))\n    C = list(map(float, input().split()))\n    p = 0\n    num = 0\n    den = 0\n    for i in range(N):\n        num = num + C[i] * K[i]\n        den = den + 1 / K[i]\n    p = num / den\n    if p < 0:\n        print(-1)\n        continue\n    else:\n        ma = 0\n        x = [0] * N\n        for i in range(N):\n            x[i] = p / K[i] ** 2 - C[i]\n            ma = ma + sqrt(x[i] + C[i])\n        print(ma, end=' ')\n        print(*x)", "for _ in range(int(input())):\n    n = int(input())\n    k = list(map(float, input().split()))\n    c = list(map(float, input().split()))\n    reci = sum([1 / elem for elem in k])\n    ck = sum([i * j for (i, j) in zip(c, k)])\n    lam = ck / reci\n    x = [round(lam / j ** 2 - i, 10) for (i, j) in zip(c, k)]\n    try:\n        f = round(sum([(i + j) ** 0.5 for (i, j) in zip(x, c)]), 10)\n        print(f, *x)\n    except Exception as e:\n        print(-1)", "from math import sqrt\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    k = [float(j) for j in input().split()]\n    c = [float(j) for j in input().split()]\n    x = [0] * n\n    sumi = 0\n    for j in range(n):\n        x[j] = -c[j]\n        sumi += x[j] * k[j]\n    sumi = -sumi\n    if sumi < 0:\n        print(-1)\n        continue\n    factor = 1\n    f2 = 0\n    for j in k:\n        f2 += 1 / j\n    factor /= f2\n    X = [0] * n\n    f = 0.0\n    for j in range(n):\n        s = sumi * factor / k[j] ** 2\n        if s > 0:\n            f += sqrt(s)\n        X[j] = x[j] + s\n    print(f, end=' ')\n    for j in X:\n        print(j, end=' ')\n    print()"]