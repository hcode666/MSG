["T = int(input())\nfor _ in range(T):\n    d = {}\n    initial_score = 0\n    initial_goal = 0\n    for i in range(12):\n        scoreline = str(input())\n        score = scoreline.split()\n        if score[0] not in list(d.keys()):\n            d[score[0]] = [initial_score, initial_goal]\n        if score[4] not in list(d.keys()):\n            d[score[4]] = [initial_score, initial_goal]\n        if int(score[1]) > int(score[3]):\n            d[score[0]][0] += 3\n            d[score[0]][1] = d[score[0]][1] + (int(score[1]) - int(score[3]))\n            d[score[4]][1] = d[score[4]][1] + (int(score[3]) - int(score[1]))\n        elif int(score[3]) > int(score[1]):\n            d[score[4]][0] += 3\n            d[score[4]][1] = d[score[4]][1] + (int(score[3]) - int(score[1]))\n            d[score[0]][1] = d[score[0]][1] + (int(score[1]) - int(score[3]))\n        else:\n            d[score[0]][0] += 1\n            d[score[4]][0] += 1\n    table = list(dict(sorted(d.items(), key=lambda item: item[1])).keys())\n    print(table[-1], table[-2])", "T = int(input())\nfor _ in range(T):\n    d = {}\n    initial_score = 0\n    initial_goal = 0\n    for i in range(12):\n        scoreline = str(input())\n        score = scoreline.split()\n        if score[0] not in list(d.keys()):\n            d[score[0]] = [initial_score, initial_goal]\n        if score[4] not in list(d.keys()):\n            d[score[4]] = [initial_score, initial_goal]\n        if int(score[1]) > int(score[3]):\n            d[score[0]][0] += 3\n            d[score[0]][1] = d[score[0]][1] + (int(score[1]) - int(score[3]))\n            d[score[4]][1] = d[score[4]][1] + (int(score[3]) - int(score[1]))\n        elif int(score[3]) > int(score[1]):\n            d[score[4]][0] += 3\n            d[score[4]][1] = d[score[4]][1] + (int(score[3]) - int(score[1]))\n            d[score[0]][1] = d[score[0]][1] + (int(score[1]) - int(score[3]))\n        else:\n            d[score[0]][0] += 1\n            d[score[4]][0] += 1\n    table = list(dict(sorted(d.items(), key=lambda item: item[1])).keys())\n    print(table[-1], table[-2])", "T = int(input())\nfor _ in range(T):\n    d = {}\n    initial_score = 0\n    initial_goal = 0\n    for i in range(12):\n        scoreline = str(input())\n        score = scoreline.split()\n        if score[0] not in list(d.keys()):\n            d[score[0]] = [initial_score, initial_goal]\n        if score[4] not in list(d.keys()):\n            d[score[4]] = [initial_score, initial_goal]\n        if int(score[1]) > int(score[3]):\n            d[score[0]][0] += 3\n            d[score[0]][1] = d[score[0]][1] + (int(score[1]) - int(score[3]))\n            d[score[4]][1] = d[score[4]][1] + (int(score[3]) - int(score[1]))\n        elif int(score[3]) > int(score[1]):\n            d[score[4]][0] += 3\n            d[score[4]][1] = d[score[4]][1] + (int(score[3]) - int(score[1]))\n            d[score[0]][1] = d[score[0]][1] + (int(score[1]) - int(score[3]))\n        else:\n            d[score[0]][0] += 1\n            d[score[4]][0] += 1\n    table = list(dict(sorted(d.items(), key=lambda item: item[1])).keys())\n    print(table[-1], table[-2])", "for _ in range(int(input())):\n    teams = {}\n    arr = [[0, 0, ''] for _ in range(4)]\n    z = 0\n    for i in range(12):\n        (team1, team1score, x, team2score, team2) = list(input().split())\n        team1score = int(team1score)\n        team2score = int(team2score)\n        if team1 not in teams:\n            teams[team1] = z\n            arr[teams[team1]][2] = team1\n            z += 1\n        if team2 not in teams:\n            teams[team2] = z\n            arr[teams[team2]][2] = team2\n            z += 1\n        if team1score > team2score:\n            arr[teams[team1]][0] += 3\n        elif team2score > team1score:\n            arr[teams[team2]][0] += 3\n        else:\n            arr[teams[team2]][0] += 1\n            arr[teams[team1]][0] += 1\n        arr[teams[team1]][1] += team1score - team2score\n        arr[teams[team2]][1] += team2score - team1score\n    arr.sort(reverse=True)\n    print(arr[0][2], arr[1][2])", "for _ in range(int(input())):\n    teams = {}\n    arr = [[0, 0, ''] for _ in range(4)]\n    z = 0\n    for i in range(12):\n        (team1, team1score, x, team2score, team2) = list(input().split())\n        team1score = int(team1score)\n        team2score = int(team2score)\n        if team1 not in teams:\n            teams[team1] = z\n            arr[teams[team1]][2] = team1\n            z += 1\n        if team2 not in teams:\n            teams[team2] = z\n            arr[teams[team2]][2] = team2\n            z += 1\n        if team1score > team2score:\n            arr[teams[team1]][0] += 3\n        elif team2score > team1score:\n            arr[teams[team2]][0] += 3\n        else:\n            arr[teams[team2]][0] += 1\n            arr[teams[team1]][0] += 1\n        arr[teams[team1]][1] += team1score - team2score\n        arr[teams[team2]][1] += team2score - team1score\n    arr.sort(reverse=True)\n    print(arr[0][2], arr[1][2])", "for _ in range(int(input())):\n    teams = {}\n    arr = [[0, 0, ''] for _ in range(4)]\n    z = 0\n    for i in range(12):\n        (team1, team1score, x, team2score, team2) = list(input().split())\n        team1score = int(team1score)\n        team2score = int(team2score)\n        if team1 not in teams:\n            teams[team1] = z\n            arr[teams[team1]][2] = team1\n            z += 1\n        if team2 not in teams:\n            teams[team2] = z\n            arr[teams[team2]][2] = team2\n            z += 1\n        if team1score > team2score:\n            arr[teams[team1]][0] += 3\n        elif team2score > team1score:\n            arr[teams[team2]][0] += 3\n        else:\n            arr[teams[team2]][0] += 1\n            arr[teams[team1]][0] += 1\n        arr[teams[team1]][1] += team1score - team2score\n        arr[teams[team2]][1] += team2score - team1score\n    arr.sort(reverse=True)\n    print(arr[0][2], arr[1][2])", "n = int(input())\nfor i in range(n):\n    d = {}\n    gd = {}\n    for i in range(12):\n        ar = list(map(str, input().split(' ')))\n        t1 = ar[0]\n        t2 = ar[4]\n        v1 = int(ar[1])\n        v2 = int(ar[3])\n        if v1 > v2:\n            if t1 in d:\n                d[t1] += 3\n            else:\n                d[t1] = 3\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n        elif v2 > v1:\n            if t2 in d:\n                d[t2] += 3\n            else:\n                d[t2] = 3\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n        else:\n            if t1 in d:\n                d[t1] += 1\n            else:\n                d[t1] = 1\n            if t2 in d:\n                d[t2] += 1\n            else:\n                d[t2] = 1\n    l = []\n    for i in d.keys():\n        l.append([d[i], gd[i], i])\n    l.sort(reverse=True)\n    print(l[0][2], l[1][2])", "from collections import *\nfor _ in range(int(input())):\n    r = defaultdict(lambda : [0, 0, 0])\n    for _ in range(12):\n        (ht, hg, _, ag, at) = input().split()\n        hg = int(hg)\n        ag = int(ag)\n        r[ht][1] += hg\n        r[ht][2] += ag\n        r[at][1] += ag\n        r[at][2] += hg\n        if hg == ag:\n            r[ht][0] += 1\n            r[at][0] += 1\n        elif hg > ag:\n            r[ht][0] += 3\n        else:\n            r[at][0] += 3\n    print(*[k for (_, _, k) in sorted([(-a, c - b, k) for (k, [a, b, c]) in r.items()])[:2]])", "from collections import *\nfor _ in range(int(input())):\n    r = defaultdict(lambda : [0, 0, 0])\n    for _ in range(12):\n        (ht, hg, _, ag, at) = input().split()\n        hg = int(hg)\n        ag = int(ag)\n        r[ht][1] += hg\n        r[ht][2] += ag\n        r[at][1] += ag\n        r[at][2] += hg\n        if hg == ag:\n            r[ht][0] += 1\n            r[at][0] += 1\n        elif hg > ag:\n            r[ht][0] += 3\n        else:\n            r[at][0] += 3\n    print(*[k for (_, _, k) in sorted([(-a, c - b, k) for (k, [a, b, c]) in r.items()])[:2]])", "from collections import *\nfor _ in range(int(input())):\n    r = defaultdict(lambda : [0, 0, 0])\n    for _ in range(12):\n        (ht, hg, _, ag, at) = input().split()\n        hg = int(hg)\n        ag = int(ag)\n        r[ht][1] += hg\n        r[ht][2] += ag\n        r[at][1] += ag\n        r[at][2] += hg\n        if hg == ag:\n            r[ht][0] += 1\n            r[at][0] += 1\n        elif hg > ag:\n            r[ht][0] += 3\n        else:\n            r[at][0] += 3\n    print(*[k for (_, _, k) in sorted([(-a, c - b, k) for (k, [a, b, c]) in r.items()])[:2]])", "from collections import *\nfor _ in range(int(input())):\n    r = defaultdict(lambda : [0, 0, 0])\n    for _ in range(12):\n        (ht, hg, _, ag, at) = input().split()\n        hg = int(hg)\n        ag = int(ag)\n        r[ht][1] += hg\n        r[ht][2] += ag\n        r[at][1] += ag\n        r[at][2] += hg\n        if hg == ag:\n            r[ht][0] += 1\n            r[at][0] += 1\n        elif hg > ag:\n            r[ht][0] += 3\n        else:\n            r[at][0] += 3\n    print(*[k for (_, _, k) in sorted([(-a, c - b, k) for (k, [a, b, c]) in r.items()])[:2]])", "from collections import *\nfor _ in range(int(input())):\n    r = defaultdict(lambda : [0, 0, 0])\n    for _ in range(12):\n        (ht, hg, _, ag, at) = input().split()\n        hg = int(hg)\n        ag = int(ag)\n        r[ht][1] += hg\n        r[ht][2] += ag\n        r[at][1] += ag\n        r[at][2] += hg\n        if hg == ag:\n            r[ht][0] += 1\n            r[at][0] += 1\n        elif hg > ag:\n            r[ht][0] += 3\n        else:\n            r[at][0] += 3\n    print(*[k for (_, _, k) in sorted([(-a, c - b, k) for (k, [a, b, c]) in r.items()])[:2]])", "from collections import *\nfor _ in range(int(input())):\n    r = defaultdict(lambda : [0, 0, 0])\n    for _ in range(12):\n        (ht, hg, _, ag, at) = input().split()\n        hg = int(hg)\n        ag = int(ag)\n        r[ht][1] += hg\n        r[ht][2] += ag\n        r[at][1] += ag\n        r[at][2] += hg\n        if hg == ag:\n            r[ht][0] += 1\n            r[at][0] += 1\n        elif hg > ag:\n            r[ht][0] += 3\n        else:\n            r[at][0] += 3\n    print(*[k for (_, _, k) in sorted([(-a, c - b, k) for (k, [a, b, c]) in r.items()])[:2]])", "from collections import *\nfor _ in range(int(input())):\n    r = defaultdict(lambda : [0, 0, 0])\n    for _ in range(12):\n        (ht, hg, _, ag, at) = input().split()\n        hg = int(hg)\n        ag = int(ag)\n        r[ht][1] += hg\n        r[ht][2] += ag\n        r[at][1] += ag\n        r[at][2] += hg\n        if hg == ag:\n            r[ht][0] += 1\n            r[at][0] += 1\n        elif hg > ag:\n            r[ht][0] += 3\n        else:\n            r[at][0] += 3\n    print(*[k for (_, _, k) in sorted([(-a, c - b, k) for (k, [a, b, c]) in r.items()])[:2]])", "from collections import *\nfor _ in range(int(input())):\n    r = defaultdict(lambda : [0, 0, 0])\n    for _ in range(12):\n        (ht, hg, _, ag, at) = input().split()\n        hg = int(hg)\n        ag = int(ag)\n        r[ht][1] += hg\n        r[ht][2] += ag\n        r[at][1] += ag\n        r[at][2] += hg\n        if hg == ag:\n            r[ht][0] += 1\n            r[at][0] += 1\n        elif hg > ag:\n            r[ht][0] += 3\n        else:\n            r[at][0] += 3\n    print(*[k for (_, _, k) in sorted([(-a, c - b, k) for (k, [a, b, c]) in r.items()])[:2]])", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    d = {}\n    d1 = {}\n    for i in range(12):\n        s = input().split()\n        n1 = s[0]\n        n2 = s[-1]\n        n1g = int(s[1])\n        n2g = int(s[3])\n        if n1 not in d:\n            d[n1] = (0, 0)\n        if n2 not in d:\n            d[n2] = (0, 0)\n        (a, b) = d[n1]\n        if n1g == n2g:\n            a += 1\n        elif n1g > n2g:\n            a += 3\n        else:\n            a += 0\n        b += n1g - n2g\n        d[n1] = (a, b)\n        (a, b) = d[n2]\n        if n1g == n2g:\n            a += 1\n        elif n2g > n1g:\n            a += 3\n        else:\n            a += 0\n        b += n2g - n1g\n        d[n2] = (a, b)\n    l1 = []\n    for (x, (y, z)) in d.items():\n        l1.append((y, z, x))\n    l1.sort()\n    print(l1[-1][-1], l1[-2][-1])", "t = int(input())\nfor _ in range(t):\n    dct = {}\n    for i in range(12):\n        lst = list(input().split())\n        (goal_home_team, goal_away_team) = (int(lst[1]), int(lst[-2]))\n        (home_team, away_team) = (lst[0], lst[-1])\n        (points_home_team, points_away_team) = (0, 0)\n        if goal_home_team > goal_away_team:\n            points_home_team = 3\n        elif goal_home_team < goal_away_team:\n            points_away_team = 3\n        else:\n            (points_home_team, points_away_team) = (1, 1)\n        if home_team not in dct:\n            dct[home_team] = [points_home_team, goal_home_team - goal_away_team]\n        else:\n            team_data = dct[home_team]\n            team_data[0] += points_home_team\n            team_data[1] += goal_home_team - goal_away_team\n        if away_team not in dct:\n            dct[away_team] = [points_away_team, goal_away_team - goal_home_team]\n        else:\n            team_data = dct[away_team]\n            team_data[0] += points_away_team\n            team_data[1] += goal_away_team - goal_home_team\n    final_lst = [dct[ele] + [ele] for ele in dct]\n    final_lst.sort(reverse=True)\n    print(final_lst[0][-1], final_lst[1][-1])", "t = int(input())\nfor _ in range(t):\n    dct = {}\n    for i in range(12):\n        lst = list(input().split())\n        (goal_home_team, goal_away_team) = (int(lst[1]), int(lst[-2]))\n        (home_team, away_team) = (lst[0], lst[-1])\n        (points_home_team, points_away_team) = (0, 0)\n        if goal_home_team > goal_away_team:\n            points_home_team = 3\n        elif goal_home_team < goal_away_team:\n            points_away_team = 3\n        else:\n            (points_home_team, points_away_team) = (1, 1)\n        if home_team not in dct:\n            dct[home_team] = [points_home_team, goal_home_team - goal_away_team]\n        else:\n            team_data = dct[home_team]\n            team_data[0] += points_home_team\n            team_data[1] += goal_home_team - goal_away_team\n        if away_team not in dct:\n            dct[away_team] = [points_away_team, goal_away_team - goal_home_team]\n        else:\n            team_data = dct[away_team]\n            team_data[0] += points_away_team\n            team_data[1] += goal_away_team - goal_home_team\n    final_lst = [dct[ele] + [ele] for ele in dct]\n    final_lst.sort(reverse=True)\n    print(final_lst[0][-1], final_lst[1][-1])", "t = int(input())\nfor _ in range(t):\n    dct = {}\n    for i in range(12):\n        lst = list(input().split())\n        (goal_home_team, goal_away_team) = (int(lst[1]), int(lst[-2]))\n        (home_team, away_team) = (lst[0], lst[-1])\n        (points_home_team, points_away_team) = (0, 0)\n        if goal_home_team > goal_away_team:\n            points_home_team = 3\n        elif goal_home_team < goal_away_team:\n            points_away_team = 3\n        else:\n            (points_home_team, points_away_team) = (1, 1)\n        if home_team not in dct:\n            dct[home_team] = [points_home_team, goal_home_team - goal_away_team]\n        else:\n            team_data = dct[home_team]\n            team_data[0] += points_home_team\n            team_data[1] += goal_home_team - goal_away_team\n        if away_team not in dct:\n            dct[away_team] = [points_away_team, goal_away_team - goal_home_team]\n        else:\n            team_data = dct[away_team]\n            team_data[0] += points_away_team\n            team_data[1] += goal_away_team - goal_home_team\n    final_lst = [dct[ele] + [ele] for ele in dct]\n    final_lst.sort(reverse=True)\n    print(final_lst[0][-1], final_lst[1][-1])", "t = int(input())\nfor _ in range(t):\n    dct = {}\n    for i in range(12):\n        lst = list(input().split())\n        (goal_home_team, goal_away_team) = (int(lst[1]), int(lst[-2]))\n        (home_team, away_team) = (lst[0], lst[-1])\n        (points_home_team, points_away_team) = (0, 0)\n        if goal_home_team > goal_away_team:\n            points_home_team = 3\n        elif goal_home_team < goal_away_team:\n            points_away_team = 3\n        else:\n            (points_home_team, points_away_team) = (1, 1)\n        if home_team not in dct:\n            dct[home_team] = [points_home_team, goal_home_team - goal_away_team]\n        else:\n            team_data = dct[home_team]\n            team_data[0] += points_home_team\n            team_data[1] += goal_home_team - goal_away_team\n        if away_team not in dct:\n            dct[away_team] = [points_away_team, goal_away_team - goal_home_team]\n        else:\n            team_data = dct[away_team]\n            team_data[0] += points_away_team\n            team_data[1] += goal_away_team - goal_home_team\n    final_lst = [dct[ele] + [ele] for ele in dct]\n    final_lst.sort(reverse=True)\n    print(final_lst[0][-1], final_lst[1][-1])", "t = int(input())\nfor _ in range(t):\n    dct = {}\n    for i in range(12):\n        lst = list(input().split())\n        (goal_home_team, goal_away_team) = (int(lst[1]), int(lst[-2]))\n        (home_team, away_team) = (lst[0], lst[-1])\n        (points_home_team, points_away_team) = (0, 0)\n        if goal_home_team > goal_away_team:\n            points_home_team = 3\n        elif goal_home_team < goal_away_team:\n            points_away_team = 3\n        else:\n            (points_home_team, points_away_team) = (1, 1)\n        if home_team not in dct:\n            dct[home_team] = [points_home_team, goal_home_team - goal_away_team]\n        else:\n            team_data = dct[home_team]\n            team_data[0] += points_home_team\n            team_data[1] += goal_home_team - goal_away_team\n        if away_team not in dct:\n            dct[away_team] = [points_away_team, goal_away_team - goal_home_team]\n        else:\n            team_data = dct[away_team]\n            team_data[0] += points_away_team\n            team_data[1] += goal_away_team - goal_home_team\n    final_lst = [dct[ele] + [ele] for ele in dct]\n    final_lst.sort(reverse=True)\n    print(final_lst[0][-1], final_lst[1][-1])", "t = int(input())\nfor _ in range(t):\n    dct = {}\n    for i in range(12):\n        lst = list(input().split())\n        (goal_home_team, goal_away_team) = (int(lst[1]), int(lst[-2]))\n        (home_team, away_team) = (lst[0], lst[-1])\n        (points_home_team, points_away_team) = (0, 0)\n        if goal_home_team > goal_away_team:\n            points_home_team = 3\n        elif goal_home_team < goal_away_team:\n            points_away_team = 3\n        else:\n            (points_home_team, points_away_team) = (1, 1)\n        if home_team not in dct:\n            dct[home_team] = [points_home_team, goal_home_team - goal_away_team]\n        else:\n            team_data = dct[home_team]\n            team_data[0] += points_home_team\n            team_data[1] += goal_home_team - goal_away_team\n        if away_team not in dct:\n            dct[away_team] = [points_away_team, goal_away_team - goal_home_team]\n        else:\n            team_data = dct[away_team]\n            team_data[0] += points_away_team\n            team_data[1] += goal_away_team - goal_home_team\n    final_lst = [dct[ele] + [ele] for ele in dct]\n    final_lst.sort(reverse=True)\n    print(final_lst[0][-1], final_lst[1][-1])", "T = int(input())\nfor _ in range(T):\n    D = {}\n    for i in range(12):\n        (a, b, e, d, c) = map(str, input().split())\n        if a in D:\n            if int(b) > int(d):\n                D[a][0] += 3\n            elif int(b) == int(d):\n                D[a][0] += 1\n            D[a][1] += int(b) - int(d)\n        elif int(b) > int(d):\n            D[a] = [3, int(b) - int(d)]\n        elif int(b) == int(d):\n            D[a] = [1, int(b) - int(d)]\n        else:\n            D[a] = [0, int(b) - int(d)]\n        if c in D:\n            if int(d) > int(b):\n                D[c][0] += 3\n            elif int(b) == int(d):\n                D[c][0] += 1\n            D[c][1] += int(d) - int(b)\n        elif int(b) < int(d):\n            D[c] = [3, int(d) - int(b)]\n        elif int(b) == int(d):\n            D[c] = [1, int(b) - int(d)]\n        else:\n            D[c] = [0, int(d) - int(b)]\n    M = []\n    for m in D:\n        D[m].append(m)\n        M.append(D[m])\n    M.sort(reverse=True)\n    print(M[0][2], M[1][2])", "t = int(input())\nwhile t > 0:\n    tot = []\n    x = 12\n    groups = []\n    score = [0 for i in range(4)]\n    gd = [0 for i in range(4)]\n    while x > 0:\n        a = list(map(str, input().split()))\n        t1 = a[0]\n        s1 = a[1]\n        s1 = int(s1)\n        s2 = a[3]\n        s2 = int(s2)\n        t2 = a[4]\n        if t1 not in groups:\n            groups.append(t1)\n        if t2 not in groups:\n            groups.append(t2)\n        if s1 > s2:\n            score[groups.index(t1)] += 3\n        elif s2 > s1:\n            score[groups.index(t2)] += 3\n        else:\n            score[groups.index(t1)] += 1\n            score[groups.index(t2)] += 1\n        gd[groups.index(t1)] += s1 - s2\n        gd[groups.index(t2)] += s2 - s1\n        x = x - 1\n    for i in range(4):\n        tot.append([score[i], gd[i], groups[i]])\n    tot.sort()\n    out = []\n    out.append(tot[-1][-1])\n    out.append(tot[-2][-1])\n    print(*out)\n    t = t - 1", "n = int(input())\nfor i in range(n):\n    d = {}\n    gd = {}\n    for i in range(12):\n        ar = list(map(str, input().split(' ')))\n        t1 = ar[0]\n        t2 = ar[4]\n        v1 = int(ar[1])\n        v2 = int(ar[3])\n        if v1 > v2:\n            if t1 in d:\n                d[t1] += 3\n            else:\n                d[t1] = 3\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n        elif v2 > v1:\n            if t2 in d:\n                d[t2] += 3\n            else:\n                d[t2] = 3\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n        else:\n            if t1 in d:\n                d[t1] += 1\n            else:\n                d[t1] = 1\n            if t2 in d:\n                d[t2] += 1\n            else:\n                d[t2] = 1\n    l = []\n    for i in d.keys():\n        l.append([d[i], gd[i], i])\n    l.sort(reverse=True)\n    print(l[0][2], l[1][2])", "T = int(input())\nfor i in range(T):\n    d = {}\n    for j in range(12):\n        (s1, t1, v, t2, s2) = map(str, input().split(' '))\n        if s1 not in d:\n            d[s1] = [0, 0]\n        if s2 not in d:\n            d[s2] = [0, 0]\n        t1 = int(t1)\n        t2 = int(t2)\n        if t1 > t2:\n            d[s1][0] += 3\n            d[s1][1] += t1 - t2\n            d[s2][1] += t2 - t1\n        elif t1 < t2:\n            d[s2][0] += 3\n            d[s1][1] += t1 - t2\n            d[s2][1] += t2 - t1\n        else:\n            d[s1][0] += 1\n            d[s2][0] += 1\n    l = []\n    for i in d.keys():\n        l.append([d[i][0], d[i][1], i])\n    l.sort(reverse=True)\n    print(l[0][2], l[1][2])", "t = int(input())\nfor _ in range(t):\n    di = {}\n    for i in range(12):\n        (t1, s1, v, s2, t2) = map(str, input().split())\n        if t1 not in di:\n            di[t1] = [0, 0]\n        if t2 not in di:\n            di[t2] = [0, 0]\n        s1 = int(s1)\n        s2 = int(s2)\n        if s1 > s2:\n            di[t1][0] += 3\n            di[t1][1] += s1 - s2\n            di[t2][1] += s2 - s1\n        if s2 > s1:\n            di[t2][0] += 3\n            di[t2][1] += s2 - s1\n            di[t1][1] += s1 - s2\n        if s1 == s2:\n            di[t1][0] += 1\n            di[t2][0] += 1\n    fa = []\n    for i in di.keys():\n        fa.append([di[i][0], di[i][1], i])\n    fa.sort(reverse=True)\n    print(fa[0][2], fa[1][2])", "n = int(input())\nfor i in range(n):\n    d = {}\n    gd = {}\n    for i in range(12):\n        ar = list(map(str, input().split(' ')))\n        t1 = ar[0]\n        t2 = ar[4]\n        v1 = int(ar[1])\n        v2 = int(ar[3])\n        if v1 > v2:\n            if t1 in d:\n                d[t1] += 3\n            else:\n                d[t1] = 3\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n        elif v2 > v1:\n            if t2 in d:\n                d[t2] += 3\n            else:\n                d[t2] = 3\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n        else:\n            if t1 in d:\n                d[t1] += 1\n            else:\n                d[t1] = 1\n            if t2 in d:\n                d[t2] += 1\n            else:\n                d[t2] = 1\n    l = []\n    for i in d.keys():\n        l.append([d[i], gd[i], i])\n    l.sort(reverse=True)\n    print(l[0][2], l[1][2])", "n = int(input())\nfor j in range(n):\n    arr = []\n    s = []\n    count = 0\n    d = {}\n    c = {}\n    j = []\n    for i in range(12):\n        arr = list(input().split())\n        s.append(arr)\n        a = int(s[i][1])\n        b = int(s[i][3])\n        q = []\n        u = {}\n        s[i][1] = a\n        s[i][3] = b\n        if s[i][0] not in d:\n            d[s[i][0]] = 0\n            c[s[i][0]] = 0\n        if s[i][4] not in d:\n            d[s[i][4]] = 0\n            c[s[i][4]] = 0\n        if s[i][1] > s[i][3]:\n            d[s[i][0]] += 3\n            c[s[i][0]] += s[i][1] - s[i][3]\n            c[s[i][4]] += s[i][3] - s[i][1]\n        elif s[i][3] > s[i][1]:\n            d[s[i][4]] += 3\n            c[s[i][4]] += s[i][3] - s[i][1]\n            c[s[i][0]] += s[i][1] - s[i][3]\n        else:\n            d[s[i][0]] += 1\n            d[s[i][4]] += 1\n    u = list(d.keys())\n    final = []\n    for i in range(4):\n        final.append([d[u[i]], c[u[i]], u[i]])\n    final.sort(reverse=True)\n    print(*[final[0][2], final[1][2]])", "t = int(input())\nwhile t:\n    t -= 1\n    (pnts, gldif) = ({}, {})\n    for i in range(12):\n        ls = list(input().split())\n        (nm1, gl1, vs, gl2, nm2) = (ls[0], int(ls[1]), ls[2], int(ls[3]), ls[4])\n        if nm1 not in pnts:\n            if gl1 > gl2:\n                pnts[nm1] = 3\n            elif gl2 > gl1:\n                pnts[nm1] = 0\n            else:\n                pnts[nm1] = 1\n        elif gl1 > gl2:\n            pnts[nm1] += 3\n        elif gl2 > gl1:\n            pnts[nm1] += 0\n        else:\n            pnts[nm1] += 1\n        if nm2 not in pnts:\n            if gl2 > gl1:\n                pnts[nm2] = 3\n            elif gl1 > gl2:\n                pnts[nm2] = 0\n            else:\n                pnts[nm2] = 1\n        elif gl2 > gl1:\n            pnts[nm2] += 3\n        elif gl1 > gl2:\n            pnts[nm2] += 0\n        else:\n            pnts[nm2] += 1\n        if nm1 not in gldif:\n            gldif[nm1] = gl1 - gl2\n        else:\n            gldif[nm1] += gl1 - gl2\n        if nm2 not in gldif:\n            gldif[nm2] = gl2 - gl1\n        else:\n            gldif[nm2] += gl2 - gl1\n    fin_ls = []\n    pkeys = list(pnts.keys())\n    pval = list(pnts.values())\n    for i in range(len(pnts)):\n        fin_ls.append([pnts[pkeys[i]], gldif[pkeys[i]], pkeys[i]])\n    fin_ls.sort(reverse=True)\n    print(*[fin_ls[0][2], fin_ls[1][2]])", "t = int(input())\nfor k in range(t):\n    names = []\n    scores = [0] * 4\n    diff = [0] * 4\n    for j in range(12):\n        (teamname1, teamgoal1, k, teamgoal2, teamname2) = input().split()\n        teamgoal1 = int(teamgoal1)\n        teamgoal2 = int(teamgoal2)\n        if teamname1 not in names:\n            names.append(teamname1)\n        if teamname2 not in names:\n            names.append(teamname2)\n        if teamgoal1 > teamgoal2:\n            scores[names.index(teamname1)] += 3\n        elif teamgoal2 > teamgoal1:\n            scores[names.index(teamname2)] += 3\n        else:\n            scores[names.index(teamname1)] += 1\n            scores[names.index(teamname2)] += 1\n        diff[names.index(teamname1)] += teamgoal1 - teamgoal2\n        diff[names.index(teamname2)] += teamgoal2 - teamgoal1\n    res = []\n    for j in range(4):\n        res.append([scores[j], diff[j], names[j]])\n    res.sort()\n    print(res[-1][-1], res[-2][-1])", "t = int(input())\nwhile t:\n    ds = {}\n    for i in range(12):\n        ls = input().split(' ')\n        if ls[0] not in ds:\n            ds[ls[0]] = [int(ls[1]), int(ls[3]), 0]\n        else:\n            ds[ls[0]][0] += int(ls[1])\n            ds[ls[0]][1] += int(ls[3])\n        if ls[4] not in ds:\n            ds[ls[4]] = [int(ls[3]), int(ls[1]), 0]\n        else:\n            ds[ls[4]][0] += int(ls[3])\n            ds[ls[4]][1] += int(ls[1])\n        if int(ls[1]) > int(ls[3]):\n            ds[ls[0]][2] += 3\n        elif int(ls[1]) < int(ls[3]):\n            ds[ls[4]][2] += 3\n        else:\n            ds[ls[0]][2] += 1\n            ds[ls[4]][2] += 1\n    mVal = max(ds.values(), key=lambda x: x[2])\n    key = 0\n    for i in ds.keys():\n        if ds[i][2] == mVal[2] and mVal[0] - mVal[1] < ds[i][0] - ds[i][1]:\n            key = i\n            mVal = ds[i]\n        elif ds[i] == mVal:\n            key = i\n    one = key\n    ds.pop(key)\n    val = max(ds.values(), key=lambda x: x[2])\n    for i in ds.keys():\n        if ds[i][2] == val[2] and val[0] - val[1] < ds[i][0] - ds[i][1]:\n            key = i\n            val = ds[i]\n        elif ds[i] == val:\n            key = i\n    two = key\n    print(one, two)\n    t -= 1", "n = int(input())\nfor i in range(n):\n    d = {}\n    gd = {}\n    for i in range(12):\n        ar = list(map(str, input().split(' ')))\n        t1 = ar[0]\n        t2 = ar[4]\n        v1 = int(ar[1])\n        v2 = int(ar[3])\n        if v1 > v2:\n            if t1 in d:\n                d[t1] += 3\n            else:\n                d[t1] = 3\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n        elif v2 > v1:\n            if t2 in d:\n                d[t2] += 3\n            else:\n                d[t2] = 3\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n        else:\n            if t1 in d:\n                d[t1] += 1\n            else:\n                d[t1] = 1\n            if t2 in d:\n                d[t2] += 1\n            else:\n                d[t2] = 1\n    l = []\n    for i in d.keys():\n        l.append([d[i], gd[i], i])\n    l.sort(reverse=True)\n    print(l[0][2], l[1][2])", "t = int(input())\nfor _ in range(t):\n    d = {}\n    for i in range(12):\n        (t1, s1, v, s2, t2) = map(str, input().split())\n        if t1 not in d:\n            d[t1] = [0, 0]\n        if t2 not in d:\n            d[t2] = [0, 0]\n        s2 = int(s2)\n        s1 = int(s1)\n        if s1 > s2:\n            d[t1][0] += 3\n            d[t1][1] += s1 - s2\n            d[t2][1] += s2 - s1\n        elif s1 < s2:\n            d[t2][0] += 3\n            d[t1][1] += s1 - s2\n            d[t2][1] += s2 - s1\n        elif s1 == s2:\n            d[t1][0] += 1\n            d[t2][0] += 1\n    fa = []\n    for i in d.keys():\n        fa.append([d[i][0], d[i][1], i])\n    fa.sort(reverse=True)\n    print(fa[0][2], fa[1][2])", "t = int(input())\nfor i in range(t):\n    l = []\n    for j in range(12):\n        y = input()\n        x = y.split()\n        l.append(x)\n    d = {}\n    for j in range(12):\n        if l[j][0] not in d:\n            d[l[j][0]] = 0\n        else:\n            continue\n    dg = d.copy()\n    for j in range(12):\n        if int(l[j][1]) > int(l[j][-2]):\n            d[l[j][0]] += 3\n        elif l[j][1] == l[j][-2]:\n            d[l[j][0]] += 1\n            d[l[j][-1]] += 1\n        else:\n            d[l[j][-1]] += 3\n    for j in range(12):\n        val = int(l[j][1]) - int(l[j][-2])\n        dg[l[j][0]] += val\n        val1 = int(l[j][-2]) - int(l[j][1])\n        dg[l[j][-1]] += val1\n    fl = []\n    for i in d.keys():\n        fl.append([d[i], dg[i], i])\n    fl.sort(reverse=True)\n    print(fl[0][2], fl[1][2])", "t = int(input())\nfor i in range(t):\n    d = {}\n    for i in range(12):\n        (t1, s1, v, s2, t2) = map(str, input().split(' '))\n        if t1 not in d:\n            d[t1] = [0, 0]\n        if t2 not in d:\n            d[t2] = [0, 0]\n        s2 = int(s2)\n        s1 = int(s1)\n        if s1 > s2:\n            d[t1][0] += 3\n            d[t1][1] += s1 - s2\n            d[t2][1] += s2 - s1\n        elif s1 < s2:\n            d[t2][0] += 3\n            d[t1][1] += s1 - s2\n            d[t2][1] += s2 - s1\n        elif s1 == s2:\n            d[t1][0] += 1\n            d[t2][0] += 1\n    fa = []\n    for i in d.keys():\n        fa.append([d[i][0], d[i][1], i])\n    fa.sort(reverse=True)\n    print(fa[0][2], fa[1][2])", "t = int(input())\nfor i in range(t):\n    d = {}\n    for i in range(12):\n        (t1, s1, v, s2, t2) = map(str, input().split(' '))\n        if t1 not in d:\n            d[t1] = [0, 0]\n        if t2 not in d:\n            d[t2] = [0, 0]\n        s2 = int(s2)\n        s1 = int(s1)\n        if s1 > s2:\n            d[t1][0] += 3\n            d[t1][1] += s1 - s2\n            d[t2][1] += s2 - s1\n        elif s1 < s2:\n            d[t2][0] += 3\n            d[t1][1] += s1 - s2\n            d[t2][1] += s2 - s1\n        elif s1 == s2:\n            d[t1][0] += 1\n            d[t2][0] += 1\n    fa = []\n    for i in d.keys():\n        fa.append([d[i][0], d[i][1], i])\n    fa.sort(reverse=True)\n    print(fa[0][2], fa[1][2])", "t = int(input())\nfor i in range(t):\n    d = {}\n    for i in range(12):\n        (t1, s1, v, s2, t2) = map(str, input().split(' '))\n        if t1 not in d:\n            d[t1] = [0, 0]\n        if t2 not in d:\n            d[t2] = [0, 0]\n        s2 = int(s2)\n        s1 = int(s1)\n        if s1 > s2:\n            d[t1][0] += 3\n            d[t1][1] += s1 - s2\n            d[t2][1] += s2 - s1\n        elif s1 < s2:\n            d[t2][0] += 3\n            d[t1][1] += s1 - s2\n            d[t2][1] += s2 - s1\n        elif s1 == s2:\n            d[t1][0] += 1\n            d[t2][0] += 1\n    fa = []\n    for i in d.keys():\n        fa.append([d[i][0], d[i][1], i])\n    fa.sort(reverse=True)\n    print(fa[0][2], fa[1][2])", "n = int(input())\nfor i in range(n):\n    d = {}\n    gd = {}\n    for i in range(12):\n        ar = list(map(str, input().split(' ')))\n        t1 = ar[0]\n        t2 = ar[4]\n        v1 = int(ar[1])\n        v2 = int(ar[3])\n        if v1 > v2:\n            if t1 in d:\n                d[t1] += 3\n            else:\n                d[t1] = 3\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n        elif v2 > v1:\n            if t2 in d:\n                d[t2] += 3\n            else:\n                d[t2] = 3\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n        else:\n            if t1 in d:\n                d[t1] += 1\n            else:\n                d[t1] = 1\n            if t2 in d:\n                d[t2] += 1\n            else:\n                d[t2] = 1\n    l = []\n    for i in d.keys():\n        l.append([d[i], gd[i], i])\n    l.sort(reverse=True)\n    print(l[0][2], l[1][2])", "n = int(input())\nfor i in range(n):\n    d = {}\n    gd = {}\n    for i in range(12):\n        ar = list(map(str, input().split(' ')))\n        t1 = ar[0]\n        t2 = ar[4]\n        v1 = int(ar[1])\n        v2 = int(ar[3])\n        if v1 > v2:\n            if t1 in d:\n                d[t1] += 3\n            else:\n                d[t1] = 3\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n        elif v2 > v1:\n            if t2 in d:\n                d[t2] += 3\n            else:\n                d[t2] = 3\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n        else:\n            if t1 in d:\n                d[t1] += 1\n            else:\n                d[t1] = 1\n            if t2 in d:\n                d[t2] += 1\n            else:\n                d[t2] = 1\n    l = []\n    for i in d.keys():\n        l.append([d[i], gd[i], i])\n    l.sort(reverse=True)\n    print(l[0][2], l[1][2])", "n = int(input())\nfor i in range(n):\n    d = {}\n    gd = {}\n    for i in range(12):\n        ar = list(map(str, input().split(' ')))\n        t1 = ar[0]\n        t2 = ar[4]\n        v1 = int(ar[1])\n        v2 = int(ar[3])\n        if v1 > v2:\n            if t1 in d:\n                d[t1] += 3\n            else:\n                d[t1] = 3\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n        elif v2 > v1:\n            if t2 in d:\n                d[t2] += 3\n            else:\n                d[t2] = 3\n            if t2 in gd:\n                gd[t2] += v2 - v1\n            else:\n                gd[t2] = v2 - v1\n            if t1 in gd:\n                gd[t1] += v1 - v2\n            else:\n                gd[t1] = v1 - v2\n        else:\n            if t1 in d:\n                d[t1] += 1\n            else:\n                d[t1] = 1\n            if t2 in d:\n                d[t2] += 1\n            else:\n                d[t2] = 1\n    l = []\n    for i in d.keys():\n        l.append([d[i], gd[i], i])\n    l.sort(reverse=True)\n    print(l[0][2], l[1][2])", "t = int(input())\nfor _ in range(t):\n    matches = []\n    pt = {}\n    for i in range(12):\n        (t1, s1, vs, s2, t2) = input().split()\n        s1 = int(s1)\n        s2 = int(s2)\n        if t1 not in pt:\n            pt[t1] = [0, 0]\n        if t2 not in pt:\n            pt[t2] = [0, 0]\n        if s1 > s2:\n            pt[t1][0] += 3\n        elif s1 < s2:\n            pt[t2][0] += 3\n        else:\n            pt[t1][0] += 1\n            pt[t2][0] += 1\n        pt[t1][1] += s1 - s2\n        pt[t2][1] += s2 - s1\n    table = []\n    for i in pt:\n        table.append([pt[i][0], pt[i][1], i])\n    table.sort(reverse=True)\n    print(table[0][2], table[1][2])", "t = int(input())\nfor i in range(t):\n    names = []\n    scores = [0] * 4\n    diff = [0] * 4\n    for j in range(12):\n        (name1, goals1, bb, goals2, name2) = input().split()\n        goals1 = int(goals1)\n        goals2 = int(goals2)\n        if name1 not in names:\n            names.append(name1)\n        if name2 not in names:\n            names.append(name2)\n        if goals1 > goals2:\n            scores[names.index(name1)] += 3\n        elif goals2 > goals1:\n            scores[names.index(name2)] += 3\n        else:\n            scores[names.index(name1)] += 1\n            scores[names.index(name2)] += 1\n        diff[names.index(name1)] += goals1 - goals2\n        diff[names.index(name2)] += goals2 - goals1\n    res = []\n    for j in range(4):\n        res.append([scores[j], diff[j], names[j]])\n    res.sort()\n    print(res[-1][-1], res[-2][-1])", "t = int(input())\nfor i in range(t):\n    names = []\n    scores = [0] * 4\n    diff = [0] * 4\n    for j in range(12):\n        (name1, goals1, bb, goals2, name2) = input().split()\n        goals1 = int(goals1)\n        goals2 = int(goals2)\n        if name1 not in names:\n            names.append(name1)\n        if name2 not in names:\n            names.append(name2)\n        if goals1 > goals2:\n            scores[names.index(name1)] += 3\n        elif goals2 > goals1:\n            scores[names.index(name2)] += 3\n        else:\n            scores[names.index(name1)] += 1\n            scores[names.index(name2)] += 1\n        diff[names.index(name1)] += goals1 - goals2\n        diff[names.index(name2)] += goals2 - goals1\n    res = []\n    for j in range(4):\n        res.append([scores[j], diff[j], names[j]])\n    res.sort()\n    print(res[-1][-1], res[-2][-1])", "for _ in range(int(input())):\n    d = {}\n    for i in range(12):\n        l = []\n        l = list(map(str, input().split()))\n        if l[0] not in d:\n            d[l[0]] = [0, 0]\n        if l[-1] not in d:\n            d[l[-1]] = [0, 0]\n        if int(l[1]) > int(l[3]):\n            d[l[0]][0] += 3\n        elif int(l[1]) < int(l[3]):\n            d[l[-1]][0] += 3\n        else:\n            d[l[0]][0] += 1\n            d[l[-1]][0] += 1\n        d[l[0]][1] += int(l[1]) - int(l[3])\n        d[l[-1]][1] += int(l[3]) - int(l[1])\n    ans = []\n    for i in d:\n        ans.append([d[i][0], d[i][1], i])\n    ans.sort(reverse=True)\n    print(ans[0][2], ans[1][2])", "for _ in range(int(input())):\n    d = {}\n    for i in range(12):\n        (a, b, c, d1, e) = map(str, input().split(' '))\n        if a not in d:\n            d[a] = [0, 0]\n        if e not in d:\n            d[e] = [0, 0]\n        b = int(b)\n        d1 = int(d1)\n        if b > d1:\n            d[a][0] += 3\n        elif b < d1:\n            d[e][0] += 3\n        elif b == d1:\n            d[a][0] += 1\n            d[e][0] += 1\n        d[a][1] += b - d1\n        d[e][1] += d1 - b\n    ans = []\n    for i in d:\n        ans.append([d[i][0], d[i][1], i])\n    ans = sorted(ans, reverse=True)\n    print(ans[0][2], ans[1][2])", "try:\n    t = int(input())\n    for i in range(t):\n        t_name = []\n        t_goal_score = [0, 0, 0, 0]\n        t_goal_difference = [0, 0, 0, 0]\n        for j in range(12):\n            (t_x, t_x_s, i, t_y_s, t_y) = input().split()\n            if t_x not in t_name:\n                t_name.append(t_x)\n            if t_y not in t_name:\n                t_name.append(t_y)\n            t_x_s = int(t_x_s)\n            t_y_s = int(t_y_s)\n            if t_x_s > t_y_s:\n                t_goal_score[t_name.index(t_x)] += 3\n            elif t_y_s > t_x_s:\n                t_goal_score[t_name.index(t_y)] += 3\n            else:\n                t_goal_score[t_name.index(t_x)] += 1\n                t_goal_score[t_name.index(t_y)] += 1\n            t_goal_difference[t_name.index(t_x)] += t_x_s - t_y_s\n            t_goal_difference[t_name.index(t_y)] += t_y_s - t_x_s\n        final_matrix = []\n        for k in range(4):\n            final_matrix.append([t_goal_score[k], t_goal_difference[k], t_name[k]])\n        final_matrix.sort(reverse=True)\n        print(final_matrix[0][2], final_matrix[1][2])\nexcept:\n    pass", "try:\n    t = int(input())\n    for i in range(t):\n        t_name = []\n        t_goal_score = [0, 0, 0, 0]\n        t_goal_difference = [0, 0, 0, 0]\n        for j in range(12):\n            (t_x, t_x_s, i, t_y_s, t_y) = input().split()\n            if t_x not in t_name:\n                t_name.append(t_x)\n            if t_y not in t_name:\n                t_name.append(t_y)\n            t_x_s = int(t_x_s)\n            t_y_s = int(t_y_s)\n            if t_x_s > t_y_s:\n                t_goal_score[t_name.index(t_x)] += 3\n            elif t_y_s > t_x_s:\n                t_goal_score[t_name.index(t_y)] += 3\n            else:\n                t_goal_score[t_name.index(t_x)] += 1\n                t_goal_score[t_name.index(t_y)] += 1\n            t_goal_difference[t_name.index(t_x)] += t_x_s - t_y_s\n            t_goal_difference[t_name.index(t_y)] += t_y_s - t_x_s\n        final_matrix = []\n        for k in range(4):\n            final_matrix.append([t_goal_score[k], t_goal_difference[k], t_name[k]])\n        final_matrix.sort(reverse=True)\n        print(final_matrix[0][2], final_matrix[1][2])\nexcept:\n    pass", "try:\n    t = int(input())\n    for i in range(t):\n        t_name = []\n        t_goal_score = [0, 0, 0, 0]\n        t_goal_difference = [0, 0, 0, 0]\n        for j in range(12):\n            (t_x, t_x_s, i, t_y_s, t_y) = input().split()\n            if t_x not in t_name:\n                t_name.append(t_x)\n            if t_y not in t_name:\n                t_name.append(t_y)\n            t_x_s = int(t_x_s)\n            t_y_s = int(t_y_s)\n            if t_x_s > t_y_s:\n                t_goal_score[t_name.index(t_x)] += 3\n            elif t_y_s > t_x_s:\n                t_goal_score[t_name.index(t_y)] += 3\n            else:\n                t_goal_score[t_name.index(t_x)] += 1\n                t_goal_score[t_name.index(t_y)] += 1\n            t_goal_difference[t_name.index(t_x)] += t_x_s - t_y_s\n            t_goal_difference[t_name.index(t_y)] += t_y_s - t_x_s\n        final_matrix = []\n        for k in range(4):\n            final_matrix.append([t_goal_score[k], t_goal_difference[k], t_name[k]])\n        final_matrix.sort(reverse=True)\n        print(final_matrix[0][2], final_matrix[1][2])\nexcept:\n    pass", "try:\n    t = int(input())\n    for i in range(t):\n        t_name = []\n        t_goal_score = [0, 0, 0, 0]\n        t_goal_difference = [0, 0, 0, 0]\n        for j in range(12):\n            (t_x, t_x_s, i, t_y_s, t_y) = input().split()\n            if t_x not in t_name:\n                t_name.append(t_x)\n            if t_y not in t_name:\n                t_name.append(t_y)\n            t_x_s = int(t_x_s)\n            t_y_s = int(t_y_s)\n            if t_x_s > t_y_s:\n                t_goal_score[t_name.index(t_x)] += 3\n            elif t_y_s > t_x_s:\n                t_goal_score[t_name.index(t_y)] += 3\n            else:\n                t_goal_score[t_name.index(t_x)] += 1\n                t_goal_score[t_name.index(t_y)] += 1\n            t_goal_difference[t_name.index(t_x)] += t_x_s - t_y_s\n            t_goal_difference[t_name.index(t_y)] += t_y_s - t_x_s\n        final_matrix = []\n        for k in range(4):\n            final_matrix.append([t_goal_score[k], t_goal_difference[k], t_name[k]])\n        final_matrix.sort(reverse=True)\n        print(final_matrix[0][2], final_matrix[1][2])\nexcept:\n    pass", "try:\n    t = int(input())\n    for i in range(t):\n        t_name = []\n        t_goal_score = [0, 0, 0, 0]\n        t_goal_difference = [0, 0, 0, 0]\n        for j in range(12):\n            (t_x, t_x_s, i, t_y_s, t_y) = input().split()\n            if t_x not in t_name:\n                t_name.append(t_x)\n            if t_y not in t_name:\n                t_name.append(t_y)\n            t_x_s = int(t_x_s)\n            t_y_s = int(t_y_s)\n            if t_x_s > t_y_s:\n                t_goal_score[t_name.index(t_x)] += 3\n            elif t_y_s > t_x_s:\n                t_goal_score[t_name.index(t_y)] += 3\n            else:\n                t_goal_score[t_name.index(t_x)] += 1\n                t_goal_score[t_name.index(t_y)] += 1\n            t_goal_difference[t_name.index(t_x)] += t_x_s - t_y_s\n            t_goal_difference[t_name.index(t_y)] += t_y_s - t_x_s\n        final_matrix = []\n        for k in range(4):\n            final_matrix.append([t_goal_score[k], t_goal_difference[k], t_name[k]])\n        final_matrix.sort(reverse=True)\n        print(final_matrix[0][2], final_matrix[1][2])\nexcept:\n    pass", "for _ in range(int(input())):\n    d = {}\n    for i in range(12):\n        (a, b, c, d1, e) = map(str, input().split(' '))\n        if a not in d:\n            d[a] = [0, 0]\n        if e not in d:\n            d[e] = [0, 0]\n        b = int(b)\n        d1 = int(d1)\n        if b > d1:\n            d[a][0] += 3\n        elif b < d1:\n            d[e][0] += 3\n        elif b == d1:\n            d[a][0] += 1\n            d[e][0] += 1\n        d[a][1] += b - d1\n        d[e][1] += d1 - b\n    ans = []\n    for i in d:\n        ans.append([d[i][0], d[i][1], i])\n    ans = sorted(ans, reverse=True)\n    print(ans[0][2], ans[1][2])", "t = int(input())\nfor _ in range(t):\n    dic = {}\n    for i in range(12):\n        (t1, g1, vs, g2, t2) = input().split()\n        (g1, g2) = (int(g1), int(g2))\n        if g1 > g2:\n            if t1 not in dic:\n                dic[t1] = [3, g1 - g2]\n            else:\n                dic[t1][0] += 3\n                dic[t1][1] += g1 - g2\n            if t2 not in dic:\n                dic[t2] = [0, g2 - g1]\n            else:\n                dic[t2][1] += g2 - g1\n        elif g2 > g1:\n            if t1 not in dic:\n                dic[t1] = [0, g1 - g2]\n            else:\n                dic[t1][1] += g1 - g2\n            if t2 not in dic:\n                dic[t2] = [3, g2 - g1]\n            else:\n                dic[t2][0] += 3\n                dic[t2][1] += g2 - g1\n        else:\n            if t1 not in dic:\n                dic[t1] = [1, 0]\n            else:\n                dic[t1][0] += 1\n            if t2 not in dic:\n                dic[t2] = [1, 0]\n            else:\n                dic[t2][0] += 1\n    arr = []\n    for i in range(2):\n        (temp, win, gd) = (0, '2', -1000000)\n        for ele in dic:\n            if dic[ele][0] > temp:\n                temp = dic[ele][0]\n                win = ele\n                gd = dic[ele][1]\n            elif dic[ele][0] == temp:\n                if dic[ele][1] > gd:\n                    win = ele\n                    gd = dic[ele][1]\n        arr.append(win)\n        del dic[win]\n    for ele in arr:\n        print(ele, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    dic = {}\n    for i in range(12):\n        (t1, g1, vs, g2, t2) = input().split()\n        (g1, g2) = (int(g1), int(g2))\n        if g1 > g2:\n            if t1 not in dic:\n                dic[t1] = [3, g1 - g2]\n            else:\n                dic[t1][0] += 3\n                dic[t1][1] += g1 - g2\n            if t2 not in dic:\n                dic[t2] = [0, g2 - g1]\n            else:\n                dic[t2][1] += g2 - g1\n        elif g2 > g1:\n            if t1 not in dic:\n                dic[t1] = [0, g1 - g2]\n            else:\n                dic[t1][1] += g1 - g2\n            if t2 not in dic:\n                dic[t2] = [3, g2 - g1]\n            else:\n                dic[t2][0] += 3\n                dic[t2][1] += g2 - g1\n        else:\n            if t1 not in dic:\n                dic[t1] = [1, 0]\n            else:\n                dic[t1][0] += 1\n            if t2 not in dic:\n                dic[t2] = [1, 0]\n            else:\n                dic[t2][0] += 1\n    arr = []\n    for i in range(2):\n        (temp, win, gd) = (0, '2', -1000000)\n        for ele in dic:\n            if dic[ele][0] > temp:\n                temp = dic[ele][0]\n                win = ele\n                gd = dic[ele][1]\n            elif dic[ele][0] == temp:\n                if dic[ele][1] > gd:\n                    win = ele\n                    gd = dic[ele][1]\n        arr.append(win)\n        del dic[win]\n    for ele in arr:\n        print(ele, end=' ')\n    print()", "from collections import defaultdict as dd\nt = int(input())\nfor _ in range(t):\n    goalDiff = dd(int)\n    points = dd(int)\n    for lines in range(1, 13):\n        (team1, goals1, vs, goals2, team2) = input().split()\n        goals1 = int(goals1)\n        goals2 = int(goals2)\n        goalDiff[team1] += goals1\n        goalDiff[team1] -= goals2\n        goalDiff[team2] += goals2\n        goalDiff[team2] -= goals1\n        if goals1 == goals2:\n            points[team1] += 1\n            points[team2] += 1\n        elif goals1 > goals2:\n            points[team1] += 3\n        else:\n            points[team2] += 3\n    finalMatrix = []\n    for index in points:\n        finalMatrix.append([points[index], goalDiff[index], index])\n    finalMatrix.sort(reverse=True)\n    print(finalMatrix[0][2], finalMatrix[1][2])", "tcase = int(input())\nwhile tcase > 0:\n    pointdict = {}\n    gddict = {}\n    for q in range(12):\n        match = input().split(' vs. ')\n        score = []\n        team = []\n        for i in match:\n            for j in i.split():\n                if j.isdigit():\n                    score.append(int(j))\n                elif j.isalpha():\n                    team.append(j)\n        for i in range(len(team)):\n            if team[i] not in pointdict:\n                pointdict[team[i]] = 0\n            if team[i] not in gddict:\n                gddict[team[i]] = 0\n        for i in score:\n            i = int(i)\n        if score[0] > score[1]:\n            pointdict[team[0]] += 3\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n        elif score[1] > score[0]:\n            pointdict[team[1]] += 3\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n        else:\n            pointdict[team[1]] += 1\n            pointdict[team[0]] += 1\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n    secpoint = 0\n    scores = []\n    gds = []\n    teams = []\n    for j in pointdict.values():\n        scores.append(j)\n    for k in gddict.values():\n        gds.append(k)\n    for l in pointdict.keys():\n        teams.append(l)\n    maxpoint = max(scores)\n    if scores.count(maxpoint) > 1:\n        secpoint = maxpoint\n    else:\n        for i in range(len(scores)):\n            if scores[i] > secpoint and scores[i] < maxpoint:\n                secpoint = scores[i]\n    finalmax = ''\n    finalsecmax = ''\n    if scores.count(maxpoint) == 1:\n        finalmax += teams[scores.index(maxpoint)]\n    else:\n        s = []\n        for i in teams:\n            if scores[teams.index(i)] == maxpoint:\n                s.append(i)\n        g = []\n        for i in s:\n            g.append(gds[teams.index(i)])\n        finalmax += teams[gds.index(max(g))]\n    if scores.count(secpoint) == 1:\n        finalsecmax += teams[scores.index(secpoint)]\n    else:\n        s = []\n        for i in teams:\n            if scores[teams.index(i)] == secpoint:\n                s.append(i)\n        g = []\n        for i in s:\n            if scores[teams.index(i)] == secpoint and gds[teams.index(i)] != gds[teams.index(finalmax)]:\n                g.append(gds[teams.index(i)])\n        finalsecmax += teams[gds.index(max(g))]\n    print(finalmax, finalsecmax)\n    tcase -= 1", "tcase = int(input())\nwhile tcase > 0:\n    pointdict = {}\n    gddict = {}\n    for q in range(12):\n        match = input().split(' vs. ')\n        score = []\n        team = []\n        for i in match:\n            for j in i.split():\n                if j.isdigit():\n                    score.append(int(j))\n                elif j.isalpha():\n                    team.append(j)\n        for i in range(len(team)):\n            if team[i] not in pointdict:\n                pointdict[team[i]] = 0\n            if team[i] not in gddict:\n                gddict[team[i]] = 0\n        for i in score:\n            i = int(i)\n        if score[0] > score[1]:\n            pointdict[team[0]] += 3\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n        elif score[1] > score[0]:\n            pointdict[team[1]] += 3\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n        else:\n            pointdict[team[1]] += 1\n            pointdict[team[0]] += 1\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n    secpoint = 0\n    scores = []\n    gds = []\n    teams = []\n    for j in pointdict.values():\n        scores.append(j)\n    for k in gddict.values():\n        gds.append(k)\n    for l in pointdict.keys():\n        teams.append(l)\n    maxpoint = max(scores)\n    if scores.count(maxpoint) > 1:\n        secpoint = maxpoint\n    else:\n        for i in range(len(scores)):\n            if scores[i] > secpoint and scores[i] < maxpoint:\n                secpoint = scores[i]\n    finalmax = ''\n    finalsecmax = ''\n    if scores.count(maxpoint) == 1:\n        finalmax += teams[scores.index(maxpoint)]\n    else:\n        s = []\n        for i in teams:\n            if scores[teams.index(i)] == maxpoint:\n                s.append(i)\n        g = []\n        for i in s:\n            g.append(gds[teams.index(i)])\n        finalmax += teams[gds.index(max(g))]\n    if scores.count(secpoint) == 1:\n        finalsecmax += teams[scores.index(secpoint)]\n    else:\n        s = []\n        for i in teams:\n            if scores[teams.index(i)] == secpoint:\n                s.append(i)\n        g = []\n        for i in s:\n            if scores[teams.index(i)] == secpoint and gds[teams.index(i)] != gds[teams.index(finalmax)]:\n                g.append(gds[teams.index(i)])\n        finalsecmax += teams[gds.index(max(g))]\n    print(finalmax, finalsecmax)\n    tcase -= 1", "tcase = int(input())\nwhile tcase > 0:\n    pointdict = {}\n    gddict = {}\n    for q in range(12):\n        match = input().split(' vs. ')\n        score = []\n        team = []\n        for i in match:\n            for j in i.split():\n                if j.isdigit():\n                    score.append(int(j))\n                elif j.isalpha():\n                    team.append(j)\n        for i in range(len(team)):\n            if team[i] not in pointdict:\n                pointdict[team[i]] = 0\n            if team[i] not in gddict:\n                gddict[team[i]] = 0\n        for i in score:\n            i = int(i)\n        if score[0] > score[1]:\n            pointdict[team[0]] += 3\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n        elif score[1] > score[0]:\n            pointdict[team[1]] += 3\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n        else:\n            pointdict[team[1]] += 1\n            pointdict[team[0]] += 1\n            gddict[team[0]] += score[0] - score[1]\n            gddict[team[1]] += score[1] - score[0]\n    secpoint = 0\n    scores = []\n    gds = []\n    teams = []\n    for j in pointdict.values():\n        scores.append(j)\n    for k in gddict.values():\n        gds.append(k)\n    for l in pointdict.keys():\n        teams.append(l)\n    maxpoint = max(scores)\n    if scores.count(maxpoint) > 1:\n        secpoint = maxpoint\n    else:\n        for i in range(len(scores)):\n            if scores[i] > secpoint and scores[i] < maxpoint:\n                secpoint = scores[i]\n    finalmax = ''\n    finalsecmax = ''\n    if scores.count(maxpoint) == 1:\n        finalmax += teams[scores.index(maxpoint)]\n    else:\n        s = []\n        for i in teams:\n            if scores[teams.index(i)] == maxpoint:\n                s.append(i)\n        g = []\n        for i in s:\n            g.append(gds[teams.index(i)])\n        finalmax += teams[gds.index(max(g))]\n    if scores.count(secpoint) == 1:\n        finalsecmax += teams[scores.index(secpoint)]\n    else:\n        s = []\n        for i in teams:\n            if scores[teams.index(i)] == secpoint:\n                s.append(i)\n        g = []\n        for i in s:\n            if scores[teams.index(i)] == secpoint and gds[teams.index(i)] != gds[teams.index(finalmax)]:\n                g.append(gds[teams.index(i)])\n        finalsecmax += teams[gds.index(max(g))]\n    print(finalmax, finalsecmax)\n    tcase -= 1", "from collections import defaultdict as dd\nt = int(input())\nfor _ in range(t):\n    goalDiff = dd(int)\n    points = dd(int)\n    for lines in range(1, 13):\n        (team1, goals1, vs, goals2, team2) = input().split()\n        goals1 = int(goals1)\n        goals2 = int(goals2)\n        goalDiff[team1] += goals1\n        goalDiff[team1] -= goals2\n        goalDiff[team2] += goals2\n        goalDiff[team2] -= goals1\n        if goals1 == goals2:\n            points[team1] += 1\n            points[team2] += 1\n        elif goals1 > goals2:\n            points[team1] += 3\n        else:\n            points[team2] += 3\n    finalMatrix = []\n    for index in points:\n        finalMatrix.append([points[index], goalDiff[index], index])\n    finalMatrix.sort(reverse=True)\n    print(finalMatrix[0][2], finalMatrix[1][2])", "from collections import defaultdict as dd\nt = int(input())\nfor _ in range(t):\n    goalDiff = dd(int)\n    points = dd(int)\n    for lines in range(1, 13):\n        (team1, goals1, vs, goals2, team2) = input().split()\n        goals1 = int(goals1)\n        goals2 = int(goals2)\n        goalDiff[team1] += goals1\n        goalDiff[team1] -= goals2\n        goalDiff[team2] += goals2\n        goalDiff[team2] -= goals1\n        if goals1 == goals2:\n            points[team1] += 1\n            points[team2] += 1\n        elif goals1 > goals2:\n            points[team1] += 3\n        else:\n            points[team2] += 3\n    finalMatrix = []\n    for index in points:\n        finalMatrix.append([points[index], goalDiff[index], index])\n    finalMatrix.sort(reverse=True)\n    print(finalMatrix[0][2], finalMatrix[1][2])", "n = int(input())\nfor i in range(0, n):\n    d = {}\n    d2 = {}\n    for j in range(0, 12):\n        s = input()\n        s = s.split(' ')\n        if int(s[1]) > int(s[3]):\n            if s[0] in d.keys():\n                d[s[0]] += 3\n            else:\n                d[s[0]] = 3\n            if s[0] in d2.keys():\n                d2[s[0]] += int(s[1]) - int(s[3])\n            else:\n                d2[s[0]] = int(s[1]) - int(s[3])\n            if s[4] in d2.keys():\n                d2[s[4]] -= int(s[1]) - int(s[3])\n            else:\n                d2[s[4]] = -(int(s[1]) - int(s[3]))\n        elif int(s[1]) < int(s[3]):\n            if s[4] in d.keys():\n                d[s[4]] += 3\n            else:\n                d[s[4]] = 3\n            if s[4] in d2.keys():\n                d2[s[4]] += int(s[3]) - int(s[1])\n            else:\n                d2[s[4]] = int(s[3]) - int(s[1])\n            if s[0] in d2.keys():\n                d2[s[0]] -= int(s[3]) - int(s[1])\n            else:\n                d2[s[0]] = -(int(s[3]) - int(s[1]))\n        elif int(s[1]) == int(s[3]):\n            if s[0] in d.keys():\n                d[s[0]] += 1\n            else:\n                d[s[0]] = 1\n            if s[4] in d.keys():\n                d[s[4]] += 1\n            else:\n                d[s[4]] = 1\n    st = ''\n    for l in range(0, 2):\n        max = 0\n        win = ''\n        for k in d.keys():\n            if d[k] > max:\n                max = d[k]\n                win = k\n            elif d[k] == max:\n                if d2[k] > d2[win]:\n                    max = d[k]\n                    win = k\n        st = st + ' ' + win\n        del d[win]\n        del d2[win]\n    print(st.strip())", "n = int(input())\nfor i in range(0, n):\n    d = {}\n    d2 = {}\n    for j in range(0, 12):\n        s = input()\n        s = s.split(' ')\n        if int(s[1]) > int(s[3]):\n            if s[0] in d.keys():\n                d[s[0]] += 3\n            else:\n                d[s[0]] = 3\n            if s[0] in d2.keys():\n                d2[s[0]] += int(s[1]) - int(s[3])\n            else:\n                d2[s[0]] = int(s[1]) - int(s[3])\n            if s[4] in d2.keys():\n                d2[s[4]] -= int(s[1]) - int(s[3])\n            else:\n                d2[s[4]] = -(int(s[1]) - int(s[3]))\n        elif int(s[1]) < int(s[3]):\n            if s[4] in d.keys():\n                d[s[4]] += 3\n            else:\n                d[s[4]] = 3\n            if s[4] in d2.keys():\n                d2[s[4]] += int(s[3]) - int(s[1])\n            else:\n                d2[s[4]] = int(s[3]) - int(s[1])\n            if s[0] in d2.keys():\n                d2[s[0]] -= int(s[3]) - int(s[1])\n            else:\n                d2[s[0]] = -(int(s[3]) - int(s[1]))\n        elif int(s[1]) == int(s[3]):\n            if s[0] in d.keys():\n                d[s[0]] += 1\n            else:\n                d[s[0]] = 1\n            if s[4] in d.keys():\n                d[s[4]] += 1\n            else:\n                d[s[4]] = 1\n    st = ''\n    for l in range(0, 2):\n        max = 0\n        win = ''\n        for k in d.keys():\n            if d[k] > max:\n                max = d[k]\n                win = k\n            elif d[k] == max:\n                if d2[k] > d2[win]:\n                    max = d[k]\n                    win = k\n        st = st + ' ' + win\n        del d[win]\n        del d2[win]\n    print(st.strip())", "n = int(input())\nfor i in range(0, n):\n    d = {}\n    for j in range(0, 12):\n        s = input()\n        s = s.split(' ')\n        if int(s[1]) > int(s[3]):\n            if s[0] in d.keys():\n                d[s[0]][0] += 3\n                d[s[0]][1] += int(s[1]) - int(s[3])\n            else:\n                d[s[0]] = [3, int(s[1]) - int(s[3])]\n            if s[4] in d.keys():\n                d[s[4]][1] -= int(s[1]) - int(s[3])\n            else:\n                d[s[4]] = [0, -(int(s[1]) - int(s[3]))]\n        elif int(s[1]) < int(s[3]):\n            if s[4] in d.keys():\n                d[s[4]][0] += 3\n                d[s[4]][1] += int(s[3]) - int(s[1])\n            else:\n                d[s[4]] = [3, int(s[3]) - int(s[1])]\n            if s[0] in d.keys():\n                d[s[0]][1] -= int(s[3]) - int(s[1])\n            else:\n                d[s[0]] = [0, -(int(s[3]) - int(s[1]))]\n        elif int(s[1]) == int(s[3]):\n            if s[0] in d.keys():\n                d[s[0]][0] += 1\n            else:\n                d[s[0]] = [1, 0]\n            if s[4] in d.keys():\n                d[s[4]][0] += 1\n            else:\n                d[s[4]] = [1, 0]\n    d = sorted(d, key=d.get, reverse=True)\n    print(d[0], d[1])", "n = int(input())\nfor i in range(0, n):\n    d = {}\n    for j in range(0, 12):\n        s = input()\n        s = s.split(' ')\n        if int(s[1]) > int(s[3]):\n            if s[0] in d.keys():\n                d[s[0]][0] += 3\n                d[s[0]][1] += int(s[1]) - int(s[3])\n            else:\n                d[s[0]] = [3, int(s[1]) - int(s[3])]\n            if s[4] in d.keys():\n                d[s[4]][1] -= int(s[1]) - int(s[3])\n            else:\n                d[s[4]] = [0, -(int(s[1]) - int(s[3]))]\n        elif int(s[1]) < int(s[3]):\n            if s[4] in d.keys():\n                d[s[4]][0] += 3\n                d[s[4]][1] += int(s[3]) - int(s[1])\n            else:\n                d[s[4]] = [3, int(s[3]) - int(s[1])]\n            if s[0] in d.keys():\n                d[s[0]][1] -= int(s[3]) - int(s[1])\n            else:\n                d[s[0]] = [0, -(int(s[3]) - int(s[1]))]\n        elif int(s[1]) == int(s[3]):\n            if s[0] in d.keys():\n                d[s[0]][0] += 1\n            else:\n                d[s[0]] = [1, 0]\n            if s[4] in d.keys():\n                d[s[4]][0] += 1\n            else:\n                d[s[4]] = [1, 0]\n    d = sorted(d, key=d.get, reverse=True)\n    print(d[0], d[1])", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    d = {}\n    d1 = {}\n    for i in range(12):\n        s = input().split()\n        n1 = s[0]\n        n2 = s[-1]\n        n1g = int(s[1])\n        n2g = int(s[3])\n        if n1 not in d:\n            d[n1] = (0, 0)\n        if n2 not in d:\n            d[n2] = (0, 0)\n        (a, b) = d[n1]\n        if n1g == n2g:\n            a += 1\n        elif n1g > n2g:\n            a += 3\n        else:\n            a += 0\n        b += n1g - n2g\n        d[n1] = (a, b)\n        (a, b) = d[n2]\n        if n1g == n2g:\n            a += 1\n        elif n2g > n1g:\n            a += 3\n        else:\n            a += 0\n        b += n2g - n1g\n        d[n2] = (a, b)\n    l1 = []\n    for (x, (y, z)) in d.items():\n        l1.append((y, z, x))\n    l1.sort()\n    print(l1[-1][-1], l1[-2][-1])", "for _ in range(int(input())):\n    di = {}\n    for i in range(12):\n        a = input()\n        arr = a.split(' ')\n        if arr[0] not in di:\n            di[arr[0]] = 0\n        if arr[-1] not in di:\n            di[arr[-1]] = 0\n        if int(arr[1]) > int(arr[3]):\n            di[arr[0]] += 3000\n        elif int(arr[1]) < int(arr[3]):\n            di[arr[-1]] += 3000\n        else:\n            di[arr[0]] += 1000\n            di[arr[-1]] += 1000\n        di[arr[-1]] += int(arr[3]) - int(arr[1])\n        di[arr[0]] += int(arr[1]) - int(arr[3])\n    sortedaa = sorted(di.items(), key=lambda x: x[1], reverse=True)\n    print(sortedaa[0][0], sortedaa[1][0])", "for _ in range(int(input())):\n    a = {}\n    for i in range(12):\n        (b, c, d, e) = input().replace('vs. ', '').split()\n        if b not in a.keys():\n            a[b] = 0\n        if e not in a.keys():\n            a[e] = 0\n        c = int(c)\n        d = int(d)\n        if c > d:\n            a[b] += 3000 + c - d\n            a[e] += d - c\n        elif c < d:\n            a[b] += c - d\n            a[e] += 3000 + d - c\n        else:\n            a[b] += 1000\n            a[e] += 1000\n    f = sorted(a.items(), key=lambda x: x[1], reverse=True)\n    print(f[0][0], f[1][0])", "subtasks = int(input())\nfor _ in range(subtasks):\n    team = {}\n    for i in range(12):\n        (H, Hs, Vs, As, A) = input().split()\n        Hs = int(Hs)\n        As = int(As)\n        if H not in team:\n            team[H] = [0, 0]\n        if A not in team:\n            team[A] = [0, 0]\n        if Hs > As:\n            team[H][0] += 3\n            team[H][1] += Hs - As\n            team[A][1] += As - Hs\n        elif As > Hs:\n            team[A][0] += 3\n            team[A][1] += As - Hs\n            team[H][1] += Hs - As\n        else:\n            team[H][0] += 1\n            team[A][0] += 1\n    ans = sorted(team.items(), key=lambda x: x[1], reverse=True)\n    print(ans[0][0], ans[1][0])", "for _ in range(int(input())):\n    xd = {}\n    for _ in range(12):\n        (x, xx, _, yy, y) = input().split()\n        if x not in xd:\n            xd[x] = [0, 0]\n        if y not in xd:\n            xd[y] = [0, 0]\n        (xx, yy) = (int(xx), int(yy))\n        if xx > yy:\n            xd[x][0] += 3\n            xd[x][1] += xx - yy\n            xd[y][1] -= xx - yy\n        elif xx == yy:\n            xd[x][0] += 1\n            xd[y][0] += 1\n        elif xx < yy:\n            xd[y][0] += 3\n            xd[y][1] += yy - xx\n            xd[x][1] -= yy - xx\n    xd = sorted(xd.items(), key=lambda item: item[1], reverse=True)\n    print(xd[0][0], xd[1][0])", "t = int(input())\nfor i in range(t):\n    d = {}\n    for i in range(12):\n        (a, b, c, p, e) = map(str, input().split())\n        (b, p) = (int(b), int(p))\n        if a not in d:\n            d[a] = [0, 0]\n        if e not in d:\n            d[e] = [0, 0]\n        if b > p:\n            d[a][0] += 3\n            d[a][1] += b - p\n            d[e][1] -= b - p\n        elif p > b:\n            d[e][0] += 3\n            d[e][1] += p - b\n            d[a][1] -= p - b\n        else:\n            d[a][0] += 1\n            d[e][0] += 1\n    d = sorted(d, key=d.get)\n    print(d[3], d[2])", "subtask = int(input())\nfor _ in range(subtask):\n    teams = {}\n    for i in range(12):\n        (H, Hs, Vs, As, A) = input().split()\n        Hs = int(Hs)\n        As = int(As)\n        if H not in teams:\n            teams[H] = [0, 0]\n        if A not in teams:\n            teams[A] = [0, 0]\n        if Hs > As:\n            teams[H][0] += 3\n            teams[H][1] += Hs - As\n            teams[A][1] += As - Hs\n        elif As > Hs:\n            teams[A][0] += 3\n            teams[A][1] += As - Hs\n            teams[H][1] += Hs - As\n        else:\n            teams[H][0] += 1\n            teams[A][0] += 1\n    ans = sorted(teams.items(), key=lambda x: x[1], reverse=True)\n    print(ans[0][0], ans[1][0])", "t = int(input())\nfor i in range(t):\n    d = {}\n    for i in range(12):\n        (a, b, c, p, e) = map(str, input().split())\n        (b, p) = (int(b), int(p))\n        if a not in d:\n            d[a] = [0, 0]\n        if e not in d:\n            d[e] = [0, 0]\n        if b > p:\n            d[a][0] += 3\n            d[a][1] += b - p\n            d[e][1] -= b - p\n        elif p > b:\n            d[e][0] += 3\n            d[e][1] += p - b\n            d[a][1] -= p - b\n        else:\n            d[a][0] += 1\n            d[e][0] += 1\n    d = sorted(d, key=d.get)\n    print(d[3], d[2])", "subtask = int(input())\nfor _ in range(subtask):\n    teams = {}\n    for i in range(12):\n        (H, Hs, Vs, As, A) = input().split()\n        Hs = int(Hs)\n        As = int(As)\n        if H not in teams:\n            teams[H] = [0, 0]\n        if A not in teams:\n            teams[A] = [0, 0]\n        if Hs > As:\n            teams[H][0] += 3\n            teams[H][1] += Hs - As\n            teams[A][1] += As - Hs\n        elif As > Hs:\n            teams[A][0] += 3\n            teams[A][1] += As - Hs\n            teams[H][1] += Hs - As\n        else:\n            teams[H][0] += 1\n            teams[A][0] += 1\n    ans = sorted(teams.items(), key=lambda x: x[1], reverse=True)\n    print(ans[0][0], ans[1][0])", "subtask = int(input())\nfor _ in range(subtask):\n    teams = {}\n    for i in range(12):\n        (H, Hs, Vs, As, A) = input().split()\n        Hs = int(Hs)\n        As = int(As)\n        if H not in teams:\n            teams[H] = [0, 0]\n        if A not in teams:\n            teams[A] = [0, 0]\n        if Hs > As:\n            teams[H][0] += 3\n            teams[H][1] += Hs - As\n            teams[A][1] += As - Hs\n        elif As > Hs:\n            teams[A][0] += 3\n            teams[A][1] += As - Hs\n            teams[H][1] += Hs - As\n        else:\n            teams[H][0] += 1\n            teams[A][0] += 1\n    ans = sorted(teams.items(), key=lambda x: x[1], reverse=True)\n    print(ans[0][0], ans[1][0])", "for _ in range(int(input())):\n    d = {}\n    for i in range(12):\n        (a, b) = map(str, input().split('vs. '))\n        a = a.split()\n        b = b.split()\n        if a[0] not in d:\n            d[a[0]] = [0, 0]\n        if b[1] not in d:\n            d[b[1]] = [0, 0]\n        diff_a = int(a[1]) - int(b[0])\n        d[a[0]][1] += diff_a\n        diff_b = int(b[0]) - int(a[1])\n        d[b[1]][1] += diff_b\n        if diff_a > diff_b:\n            d[a[0]][0] += 3\n        elif diff_b > diff_a:\n            d[b[1]][0] += 3\n        else:\n            d[a[0]][0] += 1\n            d[b[1]][0] += 1\n    d = sorted(d, key=d.get)\n    print(d[3], d[2])", "t = int(input())\nfor _ in range(t):\n    d = {}\n    for i in range(12):\n        (a, b) = map(str, input().split('vs. '))\n        a = a.split()\n        b = b.split()\n        if a[0] not in d:\n            d[a[0]] = [0, 0]\n        if b[1] not in d:\n            d[b[1]] = [0, 0]\n        diff_a = int(a[1]) - int(b[0])\n        d[a[0]][1] += diff_a\n        diff_b = int(b[0]) - int(a[1])\n        d[b[1]][1] += diff_b\n        if diff_a > diff_b:\n            d[a[0]][0] += 3\n        elif diff_b > diff_a:\n            d[b[1]][0] += 3\n        else:\n            d[a[0]][0] += 1\n            d[b[1]][0] += 1\n    d = sorted(d, key=d.get)\n    print(d[3], d[2])", "t = int(input())\nfor _ in range(t):\n    d = {}\n    for i in range(12):\n        (a, b) = map(str, input().split('vs. '))\n        a = a.split()\n        b = b.split()\n        if a[0] not in d:\n            d[a[0]] = [0, 0]\n        if b[1] not in d:\n            d[b[1]] = [0, 0]\n        diff_a = int(a[1]) - int(b[0])\n        d[a[0]][1] += diff_a\n        diff_b = int(b[0]) - int(a[1])\n        d[b[1]][1] += diff_b\n        if diff_a > diff_b:\n            d[a[0]][0] += 3\n        elif diff_b > diff_a:\n            d[b[1]][0] += 3\n        else:\n            d[a[0]][0] += 1\n            d[b[1]][0] += 1\n    d = sorted(d, key=d.get)\n    print(d[3], d[2])", "t = int(input())\nfor i in range(t):\n    d = {}\n    for i in range(12):\n        (a, b) = map(str, input().split('vs. '))\n        a = a.split()\n        b = b.split()\n        if a[0] not in d:\n            d[a[0]] = [0, 0]\n        if b[1] not in d:\n            d[b[1]] = [0, 0]\n        diff_a = int(a[1]) - int(b[0])\n        d[a[0]][1] += diff_a\n        diff_b = int(b[0]) - int(a[1])\n        d[b[1]][1] += diff_b\n        if diff_a > diff_b:\n            d[a[0]][0] += 3\n        elif diff_b > diff_a:\n            d[b[1]][0] += 3\n        else:\n            d[a[0]][0] += 1\n            d[b[1]][0] += 1\n    d = sorted(d, key=d.get)\n    print(d[3], d[2])", "t = int(input())\nfor i in range(t):\n    d = {}\n    for i in range(12):\n        (a, b, c, p, e) = map(str, input().split())\n        (b, p) = (int(b), int(p))\n        if a not in d:\n            d[a] = [0, 0]\n        if e not in d:\n            d[e] = [0, 0]\n        if b > p:\n            d[a][0] += 3\n            d[a][1] += b - p\n            d[e][1] -= b - p\n        elif p > b:\n            d[e][0] += 3\n            d[e][1] += p - b\n            d[a][1] -= p - b\n        else:\n            d[a][0] += 1\n            d[e][0] += 1\n    d = sorted(d, key=d.get)\n    print(d[3], d[2])", "import sys\nimport math\nfrom collections import defaultdict as dd\nfrom sys import stdin\ninput = stdin.readline\nm = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 5)\nT = int(input())\nfor i in range(T):\n    (tp, tg) = (dd(int), dd(int))\n    for i in range(12):\n        l = input().split()\n        (sc1, sc2) = (int(l[1]), int(l[3]))\n        if sc1 > sc2:\n            tp[l[0]] += 3\n            tp[l[4]] += 0\n            tg[l[0]] += sc1 - sc2\n            tg[l[4]] += sc2 - sc1\n        elif sc1 < sc2:\n            tp[l[0]] += 0\n            tp[l[4]] += 3\n            tg[l[0]] += sc1 - sc2\n            tg[l[4]] += sc2 - sc1\n        else:\n            tp[l[0]] += 1\n            tp[l[4]] += 1\n            tg[l[0]] += sc1 - sc2\n            tg[l[4]] += sc2 - sc1\n    mat = []\n    for i in tp:\n        mat.append([tp[i], tg[i], i])\n    mat.sort(reverse=True)\n    (x, y) = (mat[0][2], mat[1][2])\n    print(x, y)", "import sys\nimport math\nfrom collections import defaultdict as dd\nfrom sys import stdin\ninput = stdin.readline\nm = 10 ** 9 + 7\nsys.setrecursionlimit(10 ** 5)\nT = int(input())\nfor _ in range(T):\n    (tp, tg) = (dd(int), dd(int))\n    for i in range(12):\n        l = input().split()\n        (sc1, sc2) = (int(l[1]), int(l[3]))\n        if sc1 > sc2:\n            tp[l[0]] += 3\n            tp[l[4]] += 0\n            tg[l[0]] += sc1 - sc2\n            tg[l[4]] += sc2 - sc1\n        elif sc1 < sc2:\n            tp[l[0]] += 0\n            tp[l[4]] += 3\n            tg[l[0]] += sc1 - sc2\n            tg[l[4]] += sc2 - sc1\n        else:\n            tp[l[0]] += 1\n            tp[l[4]] += 1\n            tg[l[0]] += sc1 - sc2\n            tg[l[4]] += sc2 - sc1\n    mat = []\n    for i in tp:\n        mat.append([tp[i], tg[i], i])\n    mat.sort(reverse=True)\n    (x, y) = (mat[0][2], mat[1][2])\n    print(x, y)", "def tableToppers(scoreBoard):\n    sorted_dict = {}\n    sorted_keys = sorted(scoreBoard, key=scoreBoard.get)\n    for w in sorted_keys:\n        sorted_dict[w] = scoreBoard[w]\n    print(list(sorted_dict)[-1], '', list(sorted_dict)[-2])\n\ndef updateTeam(scoreBoard, Name, Goals, Conceded):\n    if Name not in scoreBoard.keys():\n        list1 = []\n        if Goals > Conceded:\n            list1.append(3)\n        elif Goals == Conceded:\n            list1.append(1)\n        else:\n            list1.append(0)\n        scoreBoard[Name] = list1\n        list1.append(Goals - Conceded)\n    else:\n        scoreBoard[Name][1] += Goals - Conceded\n        if Goals > Conceded:\n            scoreBoard[Name][0] += 3\n        elif Goals == Conceded:\n            scoreBoard[Name][0] += 1\nfor _ in range(int(input())):\n    scoreBoard = {}\n    for i in range(12):\n        (HName, HGoals, vs, AGoals, AName) = input().split()\n        updateTeam(scoreBoard, HName.strip(), int(HGoals), int(AGoals))\n        updateTeam(scoreBoard, AName.strip(), int(AGoals), int(HGoals))\n    tableToppers(scoreBoard)", "T = int(input())\nfor _ in range(T):\n    points = {}\n    for i in range(12):\n        l = input().split(' ')\n        scoreA = int(l[1])\n        scoreB = int(l[3])\n        if scoreA > scoreB:\n            (pointsA, pointsB) = (3, 0)\n        elif scoreA < scoreB:\n            (pointsA, pointsB) = (0, 3)\n        else:\n            (pointsA, pointsB) = (1, 1)\n        c = points.get(l[0], [0, 0])\n        points[l[0]] = [c[0] + pointsA, c[1] + scoreA - scoreB]\n        c = points.get(l[-1], [0, 0])\n        points[l[-1]] = [c[0] + pointsB, c[1] + scoreB - scoreA]\n    scores = [(a, b) for (b, a) in points.items()]\n    scores.sort()\n    print(scores[-1][1], scores[-2][1])", "t = int(input())\nfor _ in range(t):\n    d = {}\n    for i in range(12):\n        (a, b) = input().split(' vs. ')\n        a = a.split()\n        b = b.split()\n        if a[0] not in d:\n            d[a[0]] = [0, 0]\n        if b[1] not in d:\n            d[b[1]] = [0, 0]\n        diff_a = int(a[1]) - int(b[0])\n        d[a[0]][1] += diff_a\n        diff_b = int(b[0]) - int(a[1])\n        d[b[1]][1] += diff_b\n        if diff_a > diff_b:\n            d[a[0]][0] += 3\n        elif diff_a < diff_b:\n            d[b[1]][0] += 3\n        else:\n            d[a[0]][0] += 1\n            d[b[1]][0] += 1\n    d = sorted(d, key=d.get)\n    print(d[3], d[2])", "for i in range(int(input())):\n    d = {}\n    for j in range(12):\n        str = input()\n        l = str.split()\n        team1 = l[0]\n        team2 = l[4]\n        x = int(l[1])\n        y = int(l[3])\n        t1 = []\n        t2 = []\n        if team1 not in d.keys():\n            d[team1] = [0, 0]\n        if team2 not in d.keys():\n            d[team2] = [0, 0]\n        if x > y:\n            d[team1][0] += 3\n        elif y > x:\n            d[team2][0] += 3\n        else:\n            d[team1][0] += 1\n            d[team2][0] += 1\n        d[team1][1] += x - y\n        d[team2][1] += y - x\n    sort_sict = sorted(d.items(), key=lambda x: (x[1][0], x[1][1]), reverse=True)\n    j = 0\n    print(sort_sict[j][0], sort_sict[j + 1][0])", "def tableToppers(scoreBoard):\n    sorted_dict = {}\n    sorted_keys = sorted(scoreBoard, key=scoreBoard.get)\n    for w in sorted_keys:\n        sorted_dict[w] = scoreBoard[w]\n    print(list(sorted_dict)[-1], '', list(sorted_dict)[-2])\n\ndef updateTeam(scoreBoard, Name, Goals, Conceded):\n    if Name not in scoreBoard.keys():\n        list1 = []\n        if Goals > Conceded:\n            list1.append(3)\n        elif Goals == Conceded:\n            list1.append(1)\n        else:\n            list1.append(0)\n        scoreBoard[Name] = list1\n        list1.append(Goals - Conceded)\n    else:\n        scoreBoard[Name][1] += Goals - Conceded\n        if Goals > Conceded:\n            scoreBoard[Name][0] += 3\n        elif Goals == Conceded:\n            scoreBoard[Name][0] += 1\nfor _ in range(int(input())):\n    scoreBoard = {}\n    for i in range(12):\n        (HName, HGoals, vs, AGoals, AName) = input().split()\n        updateTeam(scoreBoard, HName.strip(), int(HGoals), int(AGoals))\n        updateTeam(scoreBoard, AName.strip(), int(AGoals), int(HGoals))\n    tableToppers(scoreBoard)", "def tableToppers(scoreBoard):\n    sorted_dict = {}\n    sorted_keys = sorted(scoreBoard, key=scoreBoard.get)\n    for w in sorted_keys:\n        sorted_dict[w] = scoreBoard[w]\n    print(list(sorted_dict)[-1], '', list(sorted_dict)[-2])\n\ndef updateTeam(scoreBoard, Name, Goals, Conceded):\n    if Name not in scoreBoard.keys():\n        list1 = []\n        if Goals > Conceded:\n            list1.append(3)\n        elif Goals == Conceded:\n            list1.append(1)\n        else:\n            list1.append(0)\n        scoreBoard[Name] = list1\n        list1.append(Goals - Conceded)\n    else:\n        scoreBoard[Name][1] += Goals - Conceded\n        if Goals > Conceded:\n            scoreBoard[Name][0] += 3\n        elif Goals == Conceded:\n            scoreBoard[Name][0] += 1\nfor _ in range(int(input())):\n    scoreBoard = {}\n    for i in range(12):\n        (HName, HGoals, vs, AGoals, AName) = input().split()\n        updateTeam(scoreBoard, HName.strip(), int(HGoals), int(AGoals))\n        updateTeam(scoreBoard, AName.strip(), int(AGoals), int(HGoals))\n    tableToppers(scoreBoard)", "t = int(input())\nfor _ in range(t):\n    n = 12\n    d = {}\n    for _ in range(n):\n        (teamA, teamB) = input().split(' vs. ')\n        teamA = teamA.split()\n        teamB = teamB.split()\n        if teamA[0] not in d:\n            d.update({teamA[0]: [0, 0]})\n        if teamB[1] not in d:\n            d.update({teamB[1]: [0, 0]})\n        goalA = int(teamA[1]) - int(teamB[0])\n        goalB = int(teamB[0]) - int(teamA[1])\n        d[teamA[0]][1] += goalA\n        d[teamB[1]][1] += goalB\n        if goalA > goalB:\n            d[teamA[0]][0] += 3\n        elif goalB > goalA:\n            d[teamB[1]][0] += 3\n        else:\n            d[teamA[0]][0] += 1\n            d[teamB[1]][0] += 1\n    result = sorted(d, key=d.get)\n    print(result[-1], result[-2])", "test_cases = int(input())\n\ndef pointstable(team1detail, team2detail, table):\n    if team1detail[0] not in table:\n        table.append(team1detail[0])\n        pointtable[team1detail[0]] = [0, 0]\n    else:\n        pass\n    if team2detail[1] not in table:\n        table.append(team2detail[1])\n        pointtable[team2detail[1]] = [0, 0]\n    else:\n        pass\n    team1goal = int(team1detail[1].strip())\n    team2goal = int(team2detail[0].strip())\n    if team1goal > team2goal:\n        pointtable[team1detail[0]][0] += 3\n        pointtable[team1detail[0]][1] += team1goal - team2goal\n        pointtable[team2detail[1]][1] += team2goal - team1goal\n    elif team1goal == team2goal:\n        pointtable[team1detail[0]][0] += 1\n        pointtable[team2detail[1]][0] += 1\n    else:\n        pointtable[team2detail[1]][0] += 3\n        pointtable[team1detail[0]][1] += team1goal - team2goal\n        pointtable[team2detail[1]][1] += team2goal - team1goal\n\ndef result(matchdetail, table):\n    team1 = matchdetail[0].strip()\n    team2 = matchdetail[1].strip()\n    team1detail = team1.split(' ')\n    team2detail = team2.split(' ')\n    pointstable(team1detail, team2detail, table)\nfor i in range(test_cases):\n    table = []\n    pointtable = {}\n    for matches in range(12):\n        inp = input().split('vs.')\n        result(inp, table)\n    sorted_table = {}\n    sorted_points = sorted(pointtable, key=pointtable.get)\n    for w in sorted_points:\n        sorted_table[w] = pointtable[w]\n    listoftabletop = []\n    for key in sorted_table.keys():\n        listoftabletop.append(key)\n    print(listoftabletop[3], listoftabletop[2])", "T = int(input())\nfor _ in range(T):\n    points = {}\n    for i in range(12):\n        l = input().split(' ')\n        scoreA = int(l[1])\n        scoreB = int(l[3])\n        if scoreA > scoreB:\n            (pointsA, pointsB) = (3, 0)\n        elif scoreA < scoreB:\n            (pointsA, pointsB) = (0, 3)\n        else:\n            (pointsA, pointsB) = (1, 1)\n        c = points.get(l[0], [0, 0])\n        points[l[0]] = [c[0] + pointsA, c[1] + scoreA - scoreB]\n        c = points.get(l[-1], [0, 0])\n        points[l[-1]] = [c[0] + pointsB, c[1] + scoreB - scoreA]\n    scores = [(a, b) for (b, a) in points.items()]\n    scores.sort()\n    print(scores[-1][1], scores[-2][1])", "T = int(input())\nfor _ in range(T):\n    fixtures = []\n    team_names = []\n    for j in range(12):\n        fixture = input().split()\n        fixtures.append(fixture)\n        team_names.append(fixture[0])\n    fixt_dict = dict([(name, 0) for name in set(team_names)])\n    for team in fixt_dict.keys():\n        total_diff = 0\n        total_points = 0\n        fixt_dict[team] = dict([('points', total_points), ('goal_diff', total_diff)])\n        for fix in fixtures:\n            home_goal = int(fix[1])\n            away_goal = int(fix[3])\n            goal_diff = 0\n            if team == fix[0]:\n                goal_diff = home_goal - away_goal\n            elif team == fix[4]:\n                goal_diff = away_goal - home_goal\n            if team == fix[0] or team == fix[4]:\n                point_alloc = 0\n                if goal_diff > 0:\n                    point_alloc = 3\n                elif goal_diff == 0:\n                    point_alloc = 1\n                total_points += point_alloc\n                total_diff += goal_diff\n        fixt_dict[team]['goal_diff'] = total_diff\n        fixt_dict[team]['points'] = total_points\n    sorted_fict = dict(sorted(fixt_dict.items(), key=lambda tup: (tup[1]['points'], tup[1]['goal_diff']), reverse=True))\n    table = [k for k in sorted_fict.keys()]\n    print(' '.join(table[:2]))", "T = int(input())\nfor _ in range(T):\n    points = {}\n    for i in range(12):\n        l = input().split(' ')\n        scoreA = int(l[1])\n        scoreB = int(l[3])\n        if scoreA > scoreB:\n            (pointsA, pointsB) = (3, 0)\n        elif scoreA < scoreB:\n            (pointsA, pointsB) = (0, 3)\n        else:\n            (pointsA, pointsB) = (1, 1)\n        c = points.get(l[0], [0, 0])\n        points[l[0]] = [c[0] + pointsA, c[1] + scoreA - scoreB]\n        c = points.get(l[-1], [0, 0])\n        points[l[-1]] = [c[0] + pointsB, c[1] + scoreB - scoreA]\n    scores = [(a, b) for (b, a) in points.items()]\n    scores.sort()\n    print(scores[-1][1], scores[-2][1])", "def init_func():\n    return {'pts': 0, 'gd': 0}\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    ref_dict = defaultdict(init_func)\n    (max_pt1, max_gd1, max_pt2, max_gd2, max_elem1, max_elem2) = (0, 0, 0, 0, '', '')\n    for j in range(12):\n        tmp_arr = tuple((tuple(i.strip().split()) for i in input().strip().split('vs.')))\n        team1 = tmp_arr[0]\n        team1_nm = team1[0]\n        team1_g = int(team1[1])\n        team2 = tmp_arr[1]\n        team2_nm = team2[1]\n        team2_g = int(team2[0])\n        gd = team1_g - team2_g\n        if gd > 0:\n            ref_dict[team1_nm]['pts'] += 3\n        elif gd < 0:\n            ref_dict[team2_nm]['pts'] += 3\n        else:\n            ref_dict[team1_nm]['pts'] += 1\n            ref_dict[team2_nm]['pts'] += 1\n        ref_dict[team1_nm]['gd'] += gd\n        ref_dict[team2_nm]['gd'] -= gd\n    for elem in ref_dict.keys():\n        currPts = ref_dict[elem]['pts']\n        currGD = ref_dict[elem]['gd']\n        if currPts > max_pt1 or (currPts == max_pt1 and currGD > max_gd1):\n            max_elem2 = max_elem1\n            max_pt2 = max_pt1\n            max_gd2 = max_gd1\n            max_elem1 = elem\n            max_pt1 = currPts\n            max_gd1 = currGD\n        elif currPts > max_pt2 or (currPts == max_pt2 and currGD > max_gd2):\n            max_elem2 = elem\n            max_pt2 = currPts\n            max_gd2 = currGD\n    print(max_elem1, max_elem2)", "def init_func():\n    return {'pts': 0, 'gd': 0}\nfrom collections import defaultdict\nfrom pprint import pprint\nfor _ in range(int(input())):\n    ref_dict = defaultdict(init_func)\n    (max_pt1, max_gd1, max_pt2, max_gd2, max_elem1, max_elem2) = (0, 0, 0, 0, '', '')\n    for j in range(12):\n        tmp_arr = tuple((tuple(i.strip().split()) for i in input().strip().split('vs.')))\n        team1 = tmp_arr[0]\n        team1_nm = team1[0]\n        team1_g = int(team1[1])\n        team2 = tmp_arr[1]\n        team2_nm = team2[1]\n        team2_g = int(team2[0])\n        gd = team1_g - team2_g\n        if gd > 0:\n            ref_dict[team1_nm]['pts'] += 3\n        elif gd < 0:\n            ref_dict[team2_nm]['pts'] += 3\n        else:\n            ref_dict[team1_nm]['pts'] += 1\n            ref_dict[team2_nm]['pts'] += 1\n        ref_dict[team1_nm]['gd'] += gd\n        ref_dict[team2_nm]['gd'] -= gd\n    for elem in ref_dict.keys():\n        currPts = ref_dict[elem]['pts']\n        currGD = ref_dict[elem]['gd']\n        if currPts > max_pt1 or (currPts == max_pt1 and currGD > max_gd1):\n            max_elem2 = max_elem1\n            max_pt2 = max_pt1\n            max_gd2 = max_gd1\n            max_elem1 = elem\n            max_pt1 = currPts\n            max_gd1 = currGD\n        elif currPts > max_pt2 or (currPts == max_pt2 and currGD > max_gd2):\n            max_elem2 = elem\n            max_pt2 = currPts\n            max_gd2 = currGD\n    print(max_elem1, max_elem2)", "for i in range(int(input())):\n    d = dict()\n    for j in range(12):\n        l = input().split()\n        l.remove('vs.')\n        if l[0] in d:\n            if int(l[1]) > int(l[2]):\n                d[l[0]] = (d[l[0]][0] + 3, d[l[0]][1] + int(l[1]) - int(l[2]))\n            elif int(l[1]) < int(l[2]):\n                d[l[0]] = (d[l[0]][0], d[l[0]][1] + int(l[1]) - int(l[2]))\n            else:\n                d[l[0]] = (d[l[0]][0] + 1, d[l[0]][1] + int(l[1]) - int(l[2]))\n        elif l[0] not in d:\n            if int(l[1]) > int(l[2]):\n                d[l[0]] = (3, int(l[1]) - int(l[2]))\n            elif int(l[1]) < int(l[2]):\n                d[l[0]] = (0, int(l[1]) - int(l[2]))\n            else:\n                d[l[0]] = (1, int(l[1]) - int(l[2]))\n        if l[3] in d:\n            if int(l[2]) > int(l[1]):\n                d[l[3]] = (d[l[3]][0] + 3, d[l[3]][1] + int(l[2]) - int(l[1]))\n            elif int(l[2]) < int(l[1]):\n                d[l[3]] = (d[l[3]][0], d[l[3]][1] + int(l[2]) - int(l[1]))\n            else:\n                d[l[3]] = (d[l[3]][0] + 1, d[l[3]][1] + int(l[2]) - int(l[1]))\n        elif l[3] not in d:\n            if int(l[2]) > int(l[1]):\n                d[l[3]] = (3, int(l[2]) - int(l[1]))\n            elif int(l[1]) > int(l[2]):\n                d[l[3]] = (0, int(l[2]) - int(l[1]))\n            else:\n                d[l[3]] = (1, int(l[2]) - int(l[1]))\n    l = list()\n    for (k, v) in d.items():\n        l.append((v, k))\n    l.sort()\n    print(l[-1][1], l[-2][1])", "T = int(input())\nfor _ in range(T):\n    points = {}\n    for i in range(12):\n        l = input().split(' ')\n        scoreA = int(l[1])\n        scoreB = int(l[3])\n        if scoreA > scoreB:\n            (pointsA, pointsB) = (3, 0)\n        elif scoreA < scoreB:\n            (pointsA, pointsB) = (0, 3)\n        else:\n            (pointsA, pointsB) = (1, 1)\n        c = points.get(l[0], [0, 0])\n        points[l[0]] = [c[0] + pointsA, c[1] + scoreA - scoreB]\n        c = points.get(l[-1], [0, 0])\n        points[l[-1]] = [c[0] + pointsB, c[1] + scoreB - scoreA]\n    scores = [(a, b) for (b, a) in points.items()]\n    scores.sort()\n    print(scores[-1][1], scores[-2][1])", "T = int(input())\nfor _ in range(T):\n    points = {}\n    for i in range(12):\n        l = input().split(' ')\n        scoreA = int(l[1])\n        scoreB = int(l[3])\n        if scoreA > scoreB:\n            c = points.get(l[0], [0, 0])\n            points[l[0]] = [c[0] + 3, c[1] + scoreA - scoreB]\n            c = points.get(l[-1], [0, 0])\n            points[l[-1]] = [c[0], c[1] + scoreB - scoreA]\n        elif scoreA < scoreB:\n            c = points.get(l[-1], [0, 0])\n            points[l[-1]] = [c[0] + 3, c[1] + scoreB - scoreA]\n            c = points.get(l[0], [0, 0])\n            points[l[0]] = [c[0], c[1] + scoreA - scoreB]\n        else:\n            c = points.get(l[-1], [0, 0])\n            points[l[-1]] = [c[0] + 1, c[1] + scoreB - scoreA]\n            c = points.get(l[0], [0, 0])\n            points[l[0]] = [c[0] + 1, c[1] + scoreA - scoreB]\n    scores = [(a, b) for (b, a) in points.items()]\n    scores.sort()\n    print(scores[-1][1], scores[-2][1])"]