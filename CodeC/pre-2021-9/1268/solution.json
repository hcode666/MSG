["for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(min(sum([max(abs(arr[i] - (arr[n // 2] - k // 2)), abs(arr[i] - (arr[n // 2] + (k - 1) // 2))) for i in range(n)]), sum([max(abs(arr[i] - (arr[n // 2 - 1] - k // 2)), abs(arr[i] - (arr[n // 2 - 1] + (k - 1) // 2))) for i in range(n)])))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    s = 0\n    if n % 2 == 0 and k % 2 == 0:\n        for i in a:\n            s += max(abs(i - (a[int(n / 2) - 1] - (k / 2 - 1))), abs(a[int(n / 2) - 1] + k / 2 - i))\n        print(int(s))\n    elif n % 2 == 0 and k % 2 != 0:\n        for i in a:\n            s += max(abs(i - (a[int(n / 2) - 1] - (k - 1) / 2)), abs(a[int(n / 2) - 1] + (k - 1) / 2 - i))\n        print(int(s))\n    elif n % 2 != 0 and k % 2 == 0:\n        for i in a:\n            s += max(abs(i - (a[int((n + 1) / 2) - 1] - (k / 2 - 1))), abs(a[int((n + 1) / 2) - 1] + k / 2 - i))\n        print(int(s))\n    else:\n        for i in a:\n            s += max(abs(i - (a[int((n + 1) / 2) - 1] - (k - 1) / 2)), abs(a[int((n + 1) / 2) - 1] + (k - 1) / 2 - i))\n        print(int(s))", "nn = int(input())\ni = 0\nans = []\nwhile i < nn:\n    a = input().split()\n    n = int(a[0])\n    k = int(a[1])\n    b = [int(x) for x in input().split()]\n    fit = b[n // 2] - k // 2\n    sit = b[n // 2 - 1] - k // 2\n    tr = [fit, sit]\n    co = []\n    for j in tr:\n        lat = j + k - 1\n        an = 0\n        l = 0\n        while l < n:\n            q = max(abs(lat - b[l]), abs(j - b[l]))\n            an = an + q\n            l += 1\n        co.append(an)\n    ans.append(min(co))\n    i += 1\nfor _ in ans:\n    print(_)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    s = 0\n    if n % 2 == 0 and k % 2 == 0:\n        for i in a:\n            s += max(abs(i - (a[int(n / 2) - 1] - (k / 2 - 1))), abs(a[int(n / 2) - 1] + k / 2 - i))\n        print(int(s))\n    elif n % 2 == 0 and k % 2 != 0:\n        for i in a:\n            s += max(abs(i - (a[int(n / 2) - 1] - (k - 1) / 2)), abs(a[int(n / 2) - 1] + (k - 1) / 2 - i))\n        print(int(s))\n    elif n % 2 != 0 and k % 2 == 0:\n        for i in a:\n            s += max(abs(i - (a[int((n + 1) / 2) - 1] - (k / 2 - 1))), abs(a[int((n + 1) / 2) - 1] + k / 2 - i))\n        print(int(s))\n    else:\n        for i in a:\n            s += max(abs(i - (a[int((n + 1) / 2) - 1] - (k - 1) / 2)), abs(a[int((n + 1) / 2) - 1] + (k - 1) / 2 - i))\n        print(int(s))", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    p = l[n // 2]\n    hills = [i for i in range(p - math.floor(k / 2), p + math.ceil(k / 2))]\n    s = 0\n    for i in range(n):\n        s += max(abs(hills[0] - l[i]), abs(hills[-1] - l[i]))\n    print(s)", "from sys import stdin\n\ndef solve():\n    (n, k) = map(int, stdin.readline().split())\n    lis = [*map(int, stdin.readline().split())]\n    mid = lis[n // 2]\n    final = 1e+18\n    for kkk in range(2):\n        if k % 2 == 0:\n            low = k // 2 - 1\n            hi = k // 2\n        else:\n            low = hi = k // 2\n        if kkk == 1:\n            (low, hi) = (hi, low)\n        low = mid - low\n        hi = mid + hi\n        summ = 0\n        for i in lis:\n            summ += max(abs(low - i), abs(hi - i))\n        final = min(final, summ)\n    print(final)\nt = int(stdin.readline())\nwhile t:\n    solve()\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, k) = [int(x) for x in input().split(' ')]\n    l = [int(x) for x in input().split(' ')]\n    sum = 0\n    if n % 2 == 0:\n        sum = l[n // 2 - 1]\n    else:\n        sum = l[n // 2]\n    ll = []\n    ll.append(sum)\n    i = 1\n    while len(ll) < k:\n        ll.append(sum - i)\n        if len(ll) == k:\n            break\n        ll.append(sum + i)\n        i += 1\n    ll.sort()\n    ans = 0\n    for i in l:\n        ans = ans + max(abs(i - ll[0]), abs(i - ll[-1]))\n    if n % 2 == 0:\n        sum = l[n // 2]\n    else:\n        sum = l[n // 2]\n    ll = []\n    ll.append(sum)\n    i = 1\n    while len(ll) < k:\n        ll.append(sum - i)\n        if len(ll) == k:\n            break\n        ll.append(sum + i)\n        i += 1\n    ll.sort()\n    ans2 = 0\n    for i in l:\n        ans2 = ans2 + max(abs(i - ll[0]), abs(i - ll[-1]))\n    print(min(ans, ans2))", "from sys import stdin\n\ndef solve():\n    (n, k) = map(int, stdin.readline().split())\n    lis = [*map(int, stdin.readline().split())]\n    mid = lis[n // 2]\n    final = 1e+18\n    for kkk in range(2):\n        low = (k - 1) // 2\n        hi = k - 1 - low\n        if kkk == 1:\n            (low, hi) = (hi, low)\n        low = mid - low\n        hi = mid + hi\n        summ = 0\n        for i in lis:\n            summ += max(abs(low - i), abs(hi - i))\n        final = min(final, summ)\n    print(final)\nt = int(stdin.readline())\nwhile t:\n    solve()\n    t -= 1", "from sys import stdin\n\ndef solve():\n    (n, k) = map(int, stdin.readline().split())\n    lis = [*map(int, stdin.readline().split())]\n    mid = lis[n // 2]\n    low = mid - k // 2\n    hi = mid + k // 2\n    if k % 2 == 0:\n        hi -= 1\n    summ = 0\n    for i in lis:\n        summ += max(abs(low - i), abs(hi - i))\n    print(summ)\nt = int(stdin.readline())\nwhile t:\n    solve()\n    t -= 1", "def find_distance(n, k, arr):\n    start1 = arr[n // 2] - k // 2\n    start2 = arr[n // 2 - 1] - k // 2\n    ans = float('inf')\n    for hill1 in [start1, start2]:\n        hill2 = hill1 + k - 1\n        dist = 0\n        for house in arr:\n            dist += max(abs(hill1 - house), abs(hill2 - house))\n        ans = min(ans, dist)\n    return ans\nt = int(input())\nwhile t:\n    t -= 1\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(find_distance(n, k, arr))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = l[len(l) // 2]\n    x = m\n    y = m\n    k -= 1\n    while k > 0:\n        k -= 1\n        if k >= 0:\n            x -= 1\n        k -= 1\n        if k >= 0:\n            y += 1\n    ans = 0\n    for i in range(len(l)):\n        ans += max(abs(y - l[i]), abs(l[i] - x))\n    print(ans)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = l[len(l) // 2]\n    x = m\n    y = m\n    k -= 1\n    while k > 0:\n        k -= 1\n        if k >= 0:\n            x -= 1\n        k -= 1\n        if k >= 0:\n            y += 1\n    ans = 0\n    for i in range(len(l)):\n        if l[i] < m:\n            ans += abs(y - l[i])\n        elif l[i] > m:\n            ans += abs(l[i] - x)\n        else:\n            ans += max(abs(y - l[i]), abs(l[i] - x))\n    print(ans)", "try:\n    t = int(input())\n    for i in range(t):\n        (houses, hills) = input().split(' ')\n        (houses, hills) = (int(houses), int(hills))\n        lis = list(map(int, input().split(' ')))\n        mid = lis[houses // 2]\n        if houses % 2 != 0 and hills % 2 != 0:\n            (up, low) = (mid, mid)\n            for j in range(hills // 2):\n                up += 1\n                low -= 1\n            print(sum([max(up - k, k - low) for k in lis]))\n        elif houses % 2 != 0 and hills % 2 == 0:\n            (up, low) = (mid, mid)\n            for j in range(hills // 2 - 1):\n                up += 1\n                low -= 1\n            if lis.count(up + 1) == 1:\n                up += 1\n            else:\n                low -= 1\n            print(sum([max(up - k, k - low) for k in lis]))\n        elif houses % 2 == 0 and hills % 2 != 0:\n            (up, low) = (mid, mid - 1)\n            for j in range(hills // 2 - 1):\n                up += 1\n                low -= 1\n            if lis.count(up + 1) == 1:\n                up += 1\n            else:\n                low -= 1\n            print(sum([max(up - k, k - low) for k in lis]))\n        elif houses % 2 == 0 and hills % 2 == 0:\n            (up, low) = (mid, mid - 1)\n            for j in range(hills // 2 - 1):\n                up += 1\n                low -= 1\n            print(sum([max(up - k, k - low) for k in lis]))\nexcept:\n    pass", "try:\n    t = int(input())\n    for i in range(t):\n        (houses, hills) = input().split(' ')\n        (houses, hills) = (int(houses), int(hills))\n        lis = list(map(int, input().split(' ')))\n        mid = lis[houses // 2]\n        if houses % 2 != 0 and hills % 2 != 0:\n            (up, low) = (mid, mid)\n            for j in range(hills // 2):\n                up += 1\n                low -= 1\n            c = []\n            for k in lis:\n                c.append(max(up - k, k - low))\n            print(sum(c))\n        elif houses % 2 != 0 and hills % 2 == 0:\n            (up, low) = (mid, mid)\n            for j in range(hills // 2 - 1):\n                up += 1\n                low -= 1\n            if lis.count(up + 1) == 1:\n                up += 1\n            else:\n                low -= 1\n            c = []\n            for k in lis:\n                c.append(max(up - k, k - low))\n            print(sum(c))\n        elif houses % 2 == 0 and hills % 2 != 0:\n            (up, low) = (mid, mid - 1)\n            for j in range(hills // 2 - 1):\n                up += 1\n                low -= 1\n            if lis.count(up + 1) == 1:\n                up += 1\n            else:\n                low -= 1\n            c = []\n            for k in lis:\n                c.append(max(up - k, k - low))\n            print(sum(c))\n        elif houses % 2 == 0 and hills % 2 == 0:\n            (up, low) = (mid, mid - 1)\n            for j in range(hills // 2 - 1):\n                up += 1\n                low -= 1\n            c = []\n            for k in lis:\n                c.append(max(up - k, k - low))\n            print(sum(c))\nexcept:\n    pass", "def solve():\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    min_sum = float('inf')\n    if n == 1:\n        return k // 2\n    for mid in (a[(n - 1) // 2], a[(n - 1) // 2 + 1]):\n        start = mid - (k - 1) // 2\n        end = mid + k // 2\n        dist_sum = 0\n        for home in a:\n            dist_sum += max(abs(home - start), abs(end - home))\n        min_sum = min(min_sum, dist_sum)\n    return min_sum\nt = int(input())\nfor _ in range(t):\n    print(solve())", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    A = list(map(int, input().split(' ')))\n    h = A[math.ceil(n / 2) - 1]\n    o = sum([abs(a - h) for a in A])\n    print(o + (k - 1) // 2 * n + (0 if k % 2 else math.ceil(n / 2)))", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    start = arr[int(n / 2) - 1] - int(k / 2)\n    result = 100000000000000\n    for j in range(start, start + 2):\n        hill = j + k - 1\n        result = min(sum([max(abs(hill - arr[x]), abs(j - arr[x])) for x in range(n)]), result)\n    print(result)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    start = arr[int(n / 2) - 1] - int(k / 2)\n    result = 100000000000000\n    for j in range(start, start + 2):\n        temp = 0\n        hill = j + k - 1\n        for x in range(n):\n            temp += max(abs(hill - arr[x]), abs(j - arr[x]))\n        result = min(temp, result)\n    print(result)", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split()\n    n = int(n)\n    k = int(k)\n    a = list(map(int, input().rstrip().split()))\n    s1 = a[n // 2] - k // 2\n    s2 = a[n // 2 - 1] - k // 2\n    ans = 1e+18\n    for h1 in [s1, s2]:\n        h2 = h1 + k - 1\n        d = 0\n        for j in a:\n            d += max(abs(h1 - j), abs(h2 - j))\n        ans = min(ans, d)\n    print(ans)", "from sys import stdin, stdout\nimport sys\n\ndef get_ints():\n    return map(int, stdin.readline().strip().split())\n\ndef get_list():\n    return list(map(int, stdin.readline().strip().split()))\n\ndef get_string():\n    return stdin.readline().strip()\n\ndef get_singleInt():\n    return int(stdin.readline())\n\ndef main():\n    testCases = get_singleInt()\n    for i in range(testCases):\n        (nHouses, kHills) = get_ints()\n        housesArray = get_list()\n        print(getMinDistance(housesArray, nHouses, kHills))\n\ndef getMinDistance(housesArray, nHouses, kHills):\n    startingPoint1 = housesArray[nHouses // 2] - kHills // 2\n    startingPoint2 = housesArray[nHouses // 2 - 1] - kHills // 2\n    answer = sys.maxsize\n    for point in [startingPoint1, startingPoint2]:\n        endingPoint = point + kHills - 1\n        distance = 0\n        for house in housesArray:\n            distance += max(abs(point - house), abs(endingPoint - house))\n        answer = min(answer, distance)\n    return answer\nmain()", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))[:n]\n    arr.sort()\n    mid = arr[n // 2]\n    for j in range(2):\n        left_num = (k - 1) // 2\n        right_num = k - 1 - left_num\n        if j == 1:\n            (left_num, right_num) = (right_num, left_num)\n        left = mid - left_num\n        right = mid + right_num\n        ans = 0\n        for j in range(n):\n            ans += max(abs(arr[j] - left), abs(arr[j] - right))\n    print(ans)", "try:\n    t = int(input())\n    for i in range(0, t):\n        (n, k) = map(int, input().split())\n        a = list(map(int, input().split()))\n        med = a[n // 2]\n        l = med - k // 2\n        h = med + k // 2\n        if k % 2 == 0:\n            h -= 1\n        count = 0\n        for j in a:\n            count += max(abs(j - l), abs(j - h))\n        print(count)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mid = 0\n    first = 0\n    last = 0\n    distance = 0\n    if n % 2 == 1:\n        mid = a[n // 2]\n        first = mid - k // 2\n        last = first + k - 1\n    else:\n        mid = a[n // 2 - 1] + (a[n // 2] - a[n // 2 - 1]) // 2\n        if (a[n // 2] - a[n // 2 - 1]) % 2 == 0:\n            first = mid - k // 2\n            last = first + k - 1\n        else:\n            last = mid + k // 2\n            first = last - k + 1\n    for i in range(n):\n        if a[i] <= first:\n            distance += last - a[i]\n        elif a[i] >= last:\n            distance += a[i] - first\n        else:\n            distance += max(last - a[i], a[i] - first)\n    print(distance)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = l[n // 2]\n    a = m - k // 2\n    h = m + k // 2\n    if k % 2 == 0:\n        h -= 1\n    ans = 0\n    for i in l:\n        ans += max(abs(i - h), i - a)\n    print(ans)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = n % 2\n    if k == 0:\n        k = n // 2 - 1\n    else:\n        k = n // 2\n    (a, b) = (0, 0)\n    if x % 2 == 1:\n        x = x // 2\n        a = l[k] - x\n        b = l[k] + x\n    else:\n        x = x // 2\n        a = l[k] - x + 1\n        b = l[k] + x\n    ans = 0\n    for i in range(n):\n        ans += max(abs(a - l[i]), b - l[i])\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    m = l[n // 2]\n    left = m - k // 2\n    right = left + k - 1\n    count = 0\n    for i in range(n):\n        count += max(abs(left - l[i]), abs(l[i] - right))\n    print(count)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    fh = a[n // 2] - k // 2\n    lh = fh + k - 1\n    res = 0\n    for val in a:\n        res += max(abs(fh - val), abs(lh - val))\n    print(res)", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = a[n // 2]\n    l = m - k // 2\n    h = m + k // 2\n    if k % 2 == 0:\n        h -= 1\n    ans = 0\n    for i in a:\n        ans += max(abs(i - l), abs(i - h))\n    print(ans)", "import sys\ninput = sys.stdin.readline\nt = int(input())\nfor you in range(t):\n    l = input().split()\n    n = int(l[0])\n    k = int(l[1])\n    l = input().split()\n    li = [int(i) for i in l]\n    z = 0\n    num1 = li[n // 2] - k // 2\n    num2 = li[n // 2] + (k + 1) // 2 - 1\n    for i in li:\n        z += max(abs(i - num1), abs(i - num2))\n    print(z)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    houses = list(map(int, input().split()))\n    mid_hill = houses[(n - 1) // 2]\n    (left, right) = (mid_hill - (k - 1) // 2, mid_hill + k // 2)\n    print(sum(map(lambda x: max(x - left, right - x), houses)))", "from math import ceil\n\ndef answer():\n    median = a[n // 2]\n    (f1, f2) = (median - ceil((k - 1) / 2), median + (k - 1) // 2)\n    v = 0\n    for i in a:\n        v += max(abs(f1 - i), abs(f2 - i))\n    return v\nfor T in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(answer())", "for i in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [int(ii) for ii in input().split()]\n    dd = sorted(a)\n    cc = dd[n // 2] - k // 2\n    if k % 2 == 0:\n        cc = cc + 1\n    cs = 0\n    for ii in a:\n        cs += max(abs(cc - ii), abs(cc + k - 1 - ii))\n    cs2 = 0\n    cc -= 1\n    for ii in a:\n        cs2 += max(abs(cc - ii), abs(cc + k - 1 - ii))\n    cs3 = 0\n    cc += 2\n    for ii in a:\n        cs3 += max(abs(cc - ii), abs(cc + k - 1 - ii))\n    print(min(cs, cs2, cs3))", "import sys\ninput = sys.stdin.readline\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    m = a[n // 2] - k // 2\n    ans = 0\n    for i in range(n):\n        left = m\n        right = m + k - 1\n        ans += max(abs(left - a[i]), abs(right - a[i]))\n    print(ans)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    left_hill1 = arr[n // 2] - k // 2\n    left_hill2 = arr[n // 2 - 1] - k // 2\n    ans = sys.maxsize\n    for hill1 in [left_hill1, left_hill2]:\n        hill2 = hill1 + k - 1\n        distance = 0\n        for house in arr:\n            distance += max(abs(house - hill1), abs(house - hill2))\n        ans = min(ans, distance)\n    print(ans)", "import sys\nt = int(input())\nfor _ in range(t):\n    (n, k) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    left_hill1 = arr[n // 2] - k // 2\n    left_hill2 = arr[n // 2 - 1] - k // 2\n    ans = sys.maxsize\n    d1 = 0\n    right_hill1 = left_hill1 + k - 1\n    for house in arr:\n        d1 += max(abs(house - left_hill1), abs(house - right_hill1))\n    ans = min(ans, d1)\n    d2 = 0\n    right_hill2 = left_hill2 + k - 1\n    for house in arr:\n        d2 += max(abs(house - left_hill2), abs(house - right_hill2))\n    ans = min(ans, d2)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    start1 = a[n // 2] - k // 2\n    if n % 2 == 1:\n        start2 = a[n // 2 - 1] - k // 2\n    else:\n        start2 = start1\n    ans = float('inf')\n    for hill1 in [start1, start2]:\n        hill2 = hill1 + k - 1\n        dist = 0\n        for i in a:\n            dist += max(abs(i - hill1), abs(i - hill2))\n        ans = min(ans, dist)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = [*map(int, input().split())]\n    sm = sum(a)\n    hills = []\n    mid = a[n // 2]\n    (i, j) = (mid - 1, mid)\n    (lf, rt) = ([], [])\n    prev = False\n    (mn, mx) = (mid, mid)\n    while k:\n        if prev:\n            mn = i\n            i -= 1\n            prev = False\n        else:\n            mx = j\n            j += 1\n            prev = True\n        k -= 1\n    ans = 0\n    for x in a:\n        ans += max(abs(mn - x), abs(mx - x))\n    print(ans)", "def answer(a, b):\n    count = 0\n    left = mid - a\n    right = mid + b\n    for i in range(0, len(A)):\n        count = count + max(abs(A[i] - left), abs(A[i] - right))\n    return count\nt = int(input())\nfor _ in range(0, t):\n    (n, k) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    mid = A[n // 2]\n    if k % 2 != 0:\n        a = (k - 1) // 2\n        b = (k - 1) // 2\n        print(answer(a, b))\n    if k % 2 == 0:\n        a = k // 2\n        b = k // 2 - 1\n        print(min(answer(a, b), answer(b, a)))", "def answer(a, b, mid):\n    count = 0\n    left = mid - a\n    right = mid + b\n    for i in range(0, len(A)):\n        count = count + max(abs(A[i] - left), abs(A[i] - right))\n    return count\nt = int(input())\nfor _ in range(0, t):\n    (n, k) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    mid = A[n // 2]\n    if k % 2 != 0:\n        a = (k - 1) // 2\n        b = (k - 1) // 2\n        print(min(answer(a, b, mid), answer(a, b, mid - 1), answer(a, b, mid + 1), answer(a, b, mid), answer(a, b, mid - 2), answer(a, b, mid + 2)))\n        continue\n    if k % 2 == 0:\n        a = k // 2\n        b = k // 2 - 1\n        print(min(answer(a, b, mid), answer(a, b, mid - 1), answer(a, b, mid + 1), answer(b, a, mid), answer(b, a, mid - 1), answer(b, a, mid + 1), answer(a, b, mid - 2), answer(a, b, mid + 2), answer(b, a, mid - 2), answer(b, a, mid + 2)))", "for _ in range(int(input())):\n    (n, k) = list(map(int, input().split()))\n    l = list(map(int, input().split()))\n    s = l[n // 2]\n    ans = [s]\n    x = s\n    k -= 1\n    for i in range(k // 2):\n        x -= 1\n        ans.append(x)\n    x = s\n    for i in range((k + 1) // 2):\n        x += 1\n        ans.append(x)\n    ans.sort()\n    ans2 = [s]\n    x = s\n    for i in range((k + 1) // 2):\n        x -= 1\n        ans2.append(x)\n    x = s\n    for i in range(k // 2):\n        x += 1\n        ans2.append(x)\n    ans2.sort()\n    ans1e = 0\n    ans2e = 0\n    for i in range(n):\n        ans1e += max(abs(l[i] - ans2[-1]), abs(l[i] - ans2[0]))\n        ans2e += max(abs(l[i] - ans[-1]), abs(l[i] - ans[0]))\n    ans3 = min(ans1e, ans2e)\n    s = l[n // 2 - 1]\n    ans = [s + 1]\n    x = s + 1\n    for i in range(k // 2):\n        x -= 1\n        ans.append(x)\n    x = s + 1\n    for i in range((k + 1) // 2):\n        x += 1\n        ans.append(x)\n    ans.sort()\n    ans2 = [s + 1]\n    x = s + 1\n    for i in range((k + 1) // 2):\n        x -= 1\n        ans2.append(x)\n    x = s + 1\n    for i in range(k // 2):\n        x += 1\n        ans2.append(x)\n    ans2.sort()\n    ans1e = 0\n    ans2e = 0\n    for i in range(n):\n        ans1e += max(abs(l[i] - ans2[-1]), abs(l[i] - ans2[0]))\n        ans2e += max(abs(l[i] - ans[-1]), abs(l[i] - ans[0]))\n    print(min(ans3, ans1e, ans2e))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lis = list(map(int, input().split()))\n    arr = lis[:]\n    arr.sort()\n    med = arr[n // 2]\n    c1 = len(arr[:n // 2])\n    s1 = 0\n    for i in arr[:n // 2]:\n        s1 += med - i\n    c2 = len(arr[n // 2 + 1:])\n    s2 = 0\n    for i in arr[n // 2 + 1:]:\n        s2 += i - med\n    ans = 0\n    if k % 2 == 1:\n        ans += s1 + k // 2 * c1\n        ans += s2 + k // 2 * c2\n        ans += k // 2\n        print(ans)\n    elif c1 > c2:\n        ans += s1 + (k // 2 - 1) * c1\n        ans += s2 + k // 2 * c2\n        ans += k // 2\n        print(ans)\n    else:\n        ans += s1 + k // 2 * c1\n        ans += s2 + (k // 2 - 1) * c2\n        ans += k // 2\n        print(ans)", "import sys, os.path\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    if n % 2 == 0:\n        med0 = a[n // 2 - 1]\n        med1 = a[n // 2]\n        r = abs(med1 - med0) + 1\n        if k <= r:\n            left = med0\n            right = med0 + k - 1\n            ans = 0\n            for i in range(n):\n                ans += max(abs(left - a[i]), abs(right - a[i]))\n            print(ans)\n        else:\n            k -= r\n            left = med0 - k // 2\n            right = med1 + k // 2 + k % 2\n            left1 = med0 - k // 2 - k % 2\n            right1 = med1 + k // 2\n            ans = 0\n            ans1 = 0\n            for i in range(n):\n                ans += max(abs(left - a[i]), abs(right - a[i]))\n                ans1 += max(abs(left1 - a[i]), abs(right1 - a[i]))\n            print(min(ans, ans1))\n    else:\n        k -= 1\n        med = a[n // 2]\n        left = med - k // 2\n        right = med + k // 2 + k % 2\n        left1 = med - k // 2 - k % 2\n        right1 = med + k // 2\n        ans = 0\n        ans1 = 0\n        for i in range(n):\n            ans += max(abs(left - a[i]), abs(right - a[i]))\n            ans1 += max(abs(left1 - a[i]), abs(right1 - a[i]))\n        print(min(ans, ans1))", "def f1(n, k, lh):\n    x = lh[len(lh) // 2]\n    loc = [x]\n    for i in range(1, k // 2 + 1):\n        loc.append(x + i)\n        loc.append(x - i)\n    loc.sort()\n    s = 0\n    k1 = loc[0]\n    k2 = loc[-1]\n    kt = max(abs(x - loc[0]), abs(x - loc[1]))\n    if n == 1:\n        print(kt)\n    elif n > 1 and k % 2 != 0:\n        for i in lh:\n            s += max(abs(k1 - i), abs(k2 - i))\n        print(s)\n    elif n > 1 and k % 2 == 0:\n        loc.remove(loc[-1])\n        k1 = loc[0]\n        k2 = loc[-1]\n        for i in lh:\n            s += max(abs(k1 - i), abs(k2 - i))\n        print(s)\nimport math\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    lh = list(map(int, input().split()))\n    s = 0\n    if k == 1:\n        x = lh[len(lh) // 2]\n        for j in lh:\n            s += abs(x - j)\n        print(s)\n    if k > 1:\n        f1(n, k, lh)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    s = 0\n    if n % 2 == 0 and k % 2 == 0:\n        for i in a:\n            s += max(abs(i - (a[int(n / 2) - 1] - (k / 2 - 1))), abs(a[int(n / 2) - 1] + k / 2 - i))\n        print(int(s))\n    elif n % 2 == 0 and k % 2 != 0:\n        for i in a:\n            s += max(abs(i - (a[int(n / 2) - 1] - (k - 1) / 2)), abs(a[int(n / 2) - 1] + (k - 1) / 2 - i))\n        print(int(s))\n    elif n % 2 != 0 and k % 2 == 0:\n        for i in a:\n            s += max(abs(i - (a[int((n + 1) / 2) - 1] - (k / 2 - 1))), abs(a[int((n + 1) / 2) - 1] + k / 2 - i))\n        print(int(s))\n    else:\n        for i in a:\n            s += max(abs(i - (a[int((n + 1) / 2) - 1] - (k - 1) / 2)), abs(a[int((n + 1) / 2) - 1] + (k - 1) / 2 - i))\n        print(int(s))", "def evaluate(arr, N, K):\n    mountains = []\n    if N % 2 == 0:\n        midHouse = arr[N // 2 - 1]\n    else:\n        midHouse = arr[N // 2]\n    mountains.append(midHouse)\n    start = midHouse\n    leftMost = midHouse\n    rightMost = midHouse\n    K -= 1\n    i = 1\n    while K > 0:\n        mountains.append(start + i)\n        rightMost = start + i\n        K -= 1\n        if K == 0:\n            break\n        mountains.append(start - i)\n        leftMost = start - i\n        K -= 1\n        i += 1\n    distance = 0\n    for num in arr:\n        if num <= midHouse:\n            distance += rightMost - num\n        else:\n            distance += num - leftMost\n    return distance\ntc = int(input())\nfor i in range(tc):\n    NK = [int(x) for x in input().split(' ')]\n    N = NK[0]\n    K = NK[1]\n    arr = [int(x) for x in input().split(' ')]\n    print(evaluate(arr, N, K))", "def evaluate(arr, N, K):\n    mountains = []\n    if N % 2 == 0:\n        midHouse = arr[N // 2 - 1]\n    else:\n        midHouse = arr[N // 2]\n    mountains.append(midHouse)\n    start = midHouse\n    leftMost = midHouse\n    rightMost = midHouse\n    K -= 1\n    i = 1\n    while K > 0:\n        mountains.append(start + i)\n        rightMost = start + i\n        K -= 1\n        if K == 0:\n            break\n        mountains.append(start - i)\n        leftMost = start - i\n        K -= 1\n        i += 1\n    distance = 0\n    for num in arr:\n        if num <= midHouse:\n            distance += rightMost - num\n        else:\n            distance += num - leftMost\n    return distance\ntc = int(input())\nfor i in range(tc):\n    NK = [int(x) for x in input().split(' ')]\n    N = NK[0]\n    K = NK[1]\n    arr = [int(x) for x in input().split(' ')]\n    print(evaluate(arr, N, K))", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k) = tuple(map(int, input().split()))\n        A = list(map(int, input().split()))\n        mid = A[(n - 1) // 2]\n        dist = 0\n        (a, b) = (mid - (k - 1) // 2, mid + (k - 1) // 2 + (1 - k % 2))\n        for i in range(n):\n            dist += max(A[i] - a, b - A[i])\n        print(dist)\n    return 0\nmain()", "T = int(input())\nfor i in range(T):\n    (N, K) = map(int, input().strip().split())\n    houses = list(map(int, input().strip().split()))\n    median_house = houses[N // 2]\n    left_hill = median_house - K // 2\n    right_hill = median_house + K // 2\n    if K % 2 == 0:\n        right_hill -= 1\n    cost = 0\n    for i in range(N):\n        cost += max(abs(houses[i] - left_hill), abs(houses[i] - right_hill))\n    print(cost)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    A = [int(i) for i in input().split()]\n    A.sort()\n    p = A[N // 2]\n    l1 = [p]\n    posi = p\n    negi = p\n    for i in range(K - 1):\n        if i % 2:\n            posi += 1\n            l1.append(posi)\n        else:\n            negi -= 1\n            l1.append(negi)\n    s1 = 0\n    l1.sort()\n    for i in range(N):\n        s1 += max(abs(A[i] - l1[0]), abs(A[i] - l1[-1]))\n    print(s1)", "for _ in range(int(input())):\n    (n, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = n % 2\n    if k == 0:\n        k = n // 2 - 1\n    else:\n        k = n // 2\n    (a, b) = (0, 0)\n    if x % 2 == 1:\n        x = x // 2\n        a = l[k] - x\n        b = l[k] + x\n    else:\n        x = x // 2\n        a = l[k] - x + 1\n        b = l[k] + x\n    ans = 0\n    for i in range(n):\n        ans += max(abs(a - l[i]), b - l[i])\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, k) = [int(ele) for ele in input().split()]\n    arr = [int(ele) for ele in input().split()]\n    ans = 0\n    if n % 2 == 1:\n        middle = (n - 1) // 2\n        median = arr[middle]\n        if k % 2 == 1:\n            H1 = median - (k - 1) // 2\n            H2 = median + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans += max\n        else:\n            ans1 = 0\n            ans2 = 0\n            H1 = median - k // 2\n            H2 = median + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans1 += max\n            H1 = median - (k - 1) // 2\n            H2 = median + k // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans2 += max\n            ans = min(ans2, ans1)\n    else:\n        median1 = arr[n // 2]\n        median2 = arr[(n + 1) // 2]\n        ans1 = 0\n        ans2 = 0\n        if k % 2 == 1:\n            H1 = median1 - (k - 1) // 2\n            H2 = median1 + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans1 += max\n            H1 = median2 - (k - 1) // 2\n            H2 = median2 + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans2 += max\n            ans = min(ans1, ans2)\n        else:\n            ans11 = 0\n            ans21 = 0\n            H1 = median1 - k // 2\n            H2 = median1 + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans11 += max\n            H1 = median1 - (k - 1) // 2\n            H2 = median1 + k // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans21 += max\n            ans1 = min(ans21, ans11)\n            ans12 = 0\n            ans22 = 0\n            H1 = median2 - k // 2\n            H2 = median2 + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans12 += max\n            H1 = median2 - (k - 1) // 2\n            H2 = median2 + k // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans22 += max\n            ans2 = min(ans22, ans12)\n            ans = min(ans1, ans2)\n    print(ans)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = [int(ele) for ele in input().split()]\n    arr = [int(ele) for ele in input().split()]\n    ans = 0\n    if n % 2 == 1:\n        middle = (n - 1) // 2\n        median = arr[middle]\n        if k % 2 == 1:\n            H1 = median - (k - 1) // 2\n            H2 = median + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans += max\n        else:\n            ans1 = 0\n            ans2 = 0\n            H1 = median - k // 2\n            H2 = median + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans1 += max\n            H1 = median - (k - 1) // 2\n            H2 = median + k // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans2 += max\n            ans = min(ans2, ans1)\n    else:\n        median1 = arr[n // 2]\n        median2 = arr[(n + 1) // 2]\n        ans1 = 0\n        ans2 = 0\n        if k % 2 == 1:\n            H1 = median1 - (k - 1) // 2\n            H2 = median1 + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans1 += max\n            H1 = median2 - (k - 1) // 2\n            H2 = median2 + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans2 += max\n            ans = min(ans1, ans2)\n        else:\n            ans11 = 0\n            ans21 = 0\n            H1 = median1 - k // 2\n            H2 = median1 + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans11 += max\n            H1 = median1 - (k - 1) // 2\n            H2 = median1 + k // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans21 += max\n            ans1 = min(ans21, ans11)\n            ans12 = 0\n            ans22 = 0\n            H1 = median2 - k // 2\n            H2 = median2 + (k - 1) // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans12 += max\n            H1 = median2 - (k - 1) // 2\n            H2 = median2 + k // 2\n            for i in range(n):\n                max = -2 ** 31\n                if max < abs(H1 - arr[i]):\n                    max = abs(H1 - arr[i])\n                if max < abs(H2 - arr[i]):\n                    max = abs(H2 - arr[i])\n                ans22 += max\n            ans2 = min(ans22, ans12)\n            ans = min(ans1, ans2)\n    print(ans)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l.sort()\n    p = l[n // 2]\n    hills = [i for i in range(p - math.floor(k / 2), p + math.ceil(k / 2))]\n    s = 0\n    for i in range(n):\n        s += max(abs(hills[0] - l[i]), abs(hills[-1] - l[i]))\n    print(s)", "from sys import stdin, stdout\ninput = stdin.readline\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    m = a[n // 2]\n    ans1 = 0\n    k -= 1\n    k1 = m + k // 2 + k % 2\n    k2 = m - k // 2\n    for i in range(n // 2 + 1):\n        ans1 += abs(a[i] - k1)\n    for i in range(n // 2 + 1, n):\n        ans1 += abs(a[i] - k2)\n    ans2 = 0\n    k1 = m + k // 2\n    k2 = m - k // 2 - k % 2\n    for i in range(n // 2):\n        ans2 += abs(a[i] - k1)\n    for i in range(n // 2, n):\n        ans2 += abs(a[i] - k2)\n    print(min(ans1, ans2))"]