["def isvalid(string):\n    if string.count(string[0]) == 2 or string[1] == string[2]:\n        return True\n    return False\nfor _ in range(int(input())):\n    (N, Q) = list(map(int, input().split()))\n    s = input()\n    if N <= 2:\n        for i in range(Q):\n            x = input()\n            print('NO')\n        continue\n    if N == 3:\n        x = isvalid(s)\n        for i in range(Q):\n            (a, b) = list(map(int, input().split()))\n            if x and a == 1 and (b == 3):\n                print('YES')\n            else:\n                print('NO')\n        continue\n    valid3s = ['No', 'No']\n    dp = []\n    for i in range(N - 2):\n        if isvalid(s[i:i + 3]):\n            valid3s.append('Yes')\n        else:\n            valid3s.append('No')\n    i = 2\n    while i < N:\n        j = 1\n        while i < N and valid3s[i] != 'Yes':\n            i += 1\n            j += 1\n        for tmp in range(j):\n            dp.append(i)\n        i += 1\n    for i in range(Q):\n        (L, R) = list(map(int, input().split()))\n        L -= 1\n        R -= 1\n        if L >= len(dp):\n            print('NO')\n        elif dp[L] > R:\n            print('NO')\n        else:\n            print('YES')", "def isvalid(string):\n    if string.count(string[0]) == 2 or string[1] == string[2]:\n        return True\n    return False\nfor _ in range(int(input())):\n    (N, Q) = list(map(int, input().split()))\n    s = input()\n    if N <= 2:\n        for i in range(Q):\n            x = input()\n            print('NO')\n        continue\n    if N == 3:\n        x = isvalid(s)\n        for i in range(Q):\n            (a, b) = list(map(int, input().split()))\n            if x and a == 1 and (b == 3):\n                print('YES')\n            else:\n                print('NO')\n        continue\n    valid3s = ['No', 'No']\n    dp = []\n    for i in range(N - 2):\n        if isvalid(s[i:i + 3]):\n            valid3s.append('Yes')\n        else:\n            valid3s.append('No')\n    i = 2\n    while i < N:\n        j = 1\n        while i < N and valid3s[i] != 'Yes':\n            i += 1\n            j += 1\n        for tmp in range(j):\n            dp.append(i)\n        i += 1\n    for i in range(Q):\n        (L, R) = list(map(int, input().split()))\n        L -= 1\n        R -= 1\n        if L >= len(dp):\n            print('NO')\n        elif dp[L] > R:\n            print('NO')\n        else:\n            print('YES')", "T = int(input())\nfor k in range(T):\n    (N, Q) = map(int, input().split())\n    s = input()\n    l = [0 for i in range(N)]\n    p = -1\n    for i in range(2, N):\n        if s[i] == s[i - 1] or s[i - 1] == s[i - 2] or s[i] == s[i - 2]:\n            p = i\n            l[i] = p + 1\n        else:\n            l[i] = p + 1\n    for _ in range(Q):\n        (a, b) = map(int, input().split())\n        flag = 0\n        if l[b - 1] - 2 >= a:\n            flag = 1\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "T = int(input())\nfor k in range(T):\n    (N, Q) = map(int, input().split())\n    s = input()\n    l = [0 for i in range(N)]\n    p = -1\n    for i in range(2, N):\n        if s[i] == s[i - 1] or s[i - 1] == s[i - 2] or s[i] == s[i - 2]:\n            p = i\n            l[i] = p + 1\n        else:\n            l[i] = p + 1\n    for _ in range(Q):\n        (a, b) = map(int, input().split())\n        flag = 0\n        if l[b - 1] - 2 >= a:\n            flag = 1\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "for tea in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = list(input())\n    if n <= 2:\n        for qq in range(q):\n            input()\n            print('NO')\n        continue\n    gud = []\n    for i in range(n - 2):\n        if len(set([s[i], s[i + 1], s[i + 2]])) < 3:\n            gud.append(i)\n    stuff = dict()\n    ind = 0\n    for i in range(n):\n        stuff[i] = ind\n        if ind < len(gud) and i >= gud[ind]:\n            ind += 1\n    for qq in range(q):\n        (l, r) = [int(x) - 1 for x in input().split()]\n        r -= 2\n        if l > r:\n            print('NO')\n            continue\n        if stuff[l] == stuff[r + 1]:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    l = [0] * (n - 1)\n    for i in range(n - 2):\n        (a, b, c) = (s[i], s[i + 1], s[i + 2])\n        if len(set([a, b, c])) < 3:\n            l[i] = l[i - 1] + 1\n        else:\n            l[i] = l[i - 1]\n    for i in range(q):\n        (left, right) = map(int, input().split())\n        left -= 1\n        right -= 1\n        if right - left + 1 < 3:\n            print('NO')\n            continue\n        if l[right - 2] - l[left - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    l = [0] * (n - 1)\n    for i in range(n - 2):\n        (a, b, c) = (s[i], s[i + 1], s[i + 2])\n        if len(set([a, b, c])) < 3:\n            l[i] = l[i - 1] + 1\n        else:\n            l[i] = l[i - 1]\n    for i in range(q):\n        (left, right) = map(int, input().split())\n        left -= 1\n        right -= 1\n        if right - left + 1 < 3:\n            print('NO')\n            continue\n        if l[right - 2] - l[left - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    l = []\n    for i in range(n - 2):\n        (a, b, c) = (s[i], s[i + 1], s[i + 2])\n        if len(set([a, b, c])) < 3:\n            l.append(i)\n    for i in range(q):\n        (left, right) = map(int, input().split())\n        left -= 1\n        right -= 1\n        if right - left + 1 < 3:\n            print('NO')\n            continue\n        p1 = bisect_left(l, left)\n        if p1 != len(l) and l[p1] <= right - 2:\n            print('YES')\n        else:\n            print('NO')", "def precumpute(s, n):\n    a = [0 for i in range(n)]\n    b = [0 for i in range(n)]\n    if n < 3:\n        return b\n    for i in range(n - 3, -1, -1):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            a[i] = 1\n    prev = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            prev = i\n        b[i] = prev\n    return b\n\ndef solve(b, n, l, r):\n    if n < 3:\n        print('NO')\n        return\n    x = b[l]\n    if x >= l and x <= r - 2:\n        print('YES')\n    else:\n        print('NO')\n\ndef read():\n    t = int(input())\n    for j in range(t):\n        (n, q) = list(map(int, input().strip().split()))\n        s = input().strip()\n        b = precumpute(s, n)\n        for i in range(q):\n            (l, r) = list(map(int, input().strip().split()))\n            solve(b, n, l - 1, r - 1)\nread()", "def precumpute(s, n):\n    a = [0 for i in range(n)]\n    b = [0 for i in range(n)]\n    if n < 3:\n        return b\n    for i in range(n - 3, -1, -1):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            a[i] = 1\n    prev = -1\n    for i in range(n - 1, -1, -1):\n        if a[i] == 1:\n            prev = i\n        b[i] = prev\n    return b\n\ndef solve(b, n, l, r):\n    if n < 3:\n        print('NO')\n        return\n    x = b[l]\n    if x >= l and x <= r - 2:\n        print('YES')\n    else:\n        print('NO')\n\ndef read():\n    t = int(input())\n    for j in range(t):\n        (n, q) = list(map(int, input().strip().split()))\n        s = input().strip()\n        b = precumpute(s, n)\n        for i in range(q):\n            (l, r) = list(map(int, input().strip().split()))\n            solve(b, n, l - 1, r - 1)\nread()", "def isvalid(s):\n    if s[0] == s[1] or s[1] == s[2] or s[0] == s[2]:\n        return 1\n    return 0\nt = int(input())\nfor you in range(t):\n    l = input().split()\n    n = int(l[0])\n    q = int(l[1])\n    s = input()\n    count = [0 for i in range(n - 2)]\n    fre = 0\n    for i in range(n - 2):\n        if isvalid(s[i:i + 3]):\n            fre += 1\n        count[i] = fre\n    for i in range(q):\n        l = input().split()\n        L = int(l[0])\n        R = int(l[1])\n        if R - L + 1 < 3:\n            print('NO')\n        elif L == 1:\n            if count[R - 3] > 0:\n                print('YES')\n            else:\n                print('NO')\n        elif count[R - 3] - count[L - 2] > 0:\n            print('YES')\n        else:\n            print('NO')", "T = int(input())\nfor _ in range(T):\n    (N, Q) = [int(b) for b in input().split()]\n    S = input()\n    b = [0, 0]\n    l = 0\n    for i in range(len(S) - 2):\n        a = S[i:i + 3]\n        if a[0] == a[1] or a[0] == a[2] or a[1] == a[2]:\n            l += 1\n        b.append(l)\n    for i in range(Q):\n        (L, R) = [int(b) for b in input().split()]\n        if R - L < 2:\n            print('NO')\n            continue\n        if b[R - 1] - b[L] > 0:\n            print('YES')\n        else:\n            print('NO')", "import sys\nfrom math import ceil, floor\nimport bisect\nRI = lambda : [int(x) for x in sys.stdin.readline().split()]\nrw = lambda : sys.stdin.readline().strip()\nfor _ in range(int(input())):\n    (n, q) = RI()\n    st = input()\n    bi = []\n    for i in range(len(st) - 2):\n        if st[i] == st[i + 1] or st[i] == st[i + 2] or st[i + 1] == st[i + 2]:\n            bi.append(i)\n    for qq in range(q):\n        (a, b) = RI()\n        a -= 1\n        b -= 1\n        pos = bisect.bisect_right(bi, a - 1)\n        if pos == len(bi) or bi[pos] + 2 > b:\n            print('NO')\n        else:\n            print('YES')", "def compute_rich_substr(s):\n    rich = [0 for _ in range(len(s) + 1)]\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            rich[i + 1] = rich[i] + 1\n        else:\n            rich[i + 1] = rich[i]\n    rich[len(s) - 1] = rich[len(s)] = rich[len(s) - 2]\n    return rich\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().strip().split())\n    s = input()\n    rich = compute_rich_substr(s)\n    for _ in range(q):\n        (l, r) = map(int, input().strip().split())\n        if r - l + 1 < 3:\n            print('NO')\n        elif rich[r - 2] - rich[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    S = input()\n    Z = [0] * N\n    LC = 0\n    for I in range(2, N):\n        if S[I - 2] == S[I - 1] or S[I - 2] == S[I] or S[I - 1] == S[I]:\n            LC += 1\n        Z[I] = LC\n    for I in range(Q):\n        (L, R) = map(int, input().split())\n        F = 0\n        if R - L < 2:\n            print('NO')\n        elif Z[R - 1] == Z[L]:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    S = input()\n    Z = [0 for x in range(N)]\n    LC = 0\n    for I in range(2, N):\n        if S[I - 2] == S[I - 1] or S[I - 2] == S[I] or S[I - 1] == S[I]:\n            LC += 1\n        Z[I] = LC\n    for I in range(Q):\n        (L, R) = map(int, input().split())\n        F = 0\n        if R - L < 2:\n            print('NO')\n        elif Z[R - 1] == Z[L]:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    S = input()\n    Z = [0] * N\n    LC = 0\n    for I in range(2, N):\n        if S[I - 2] == S[I - 1] or S[I - 2] == S[I] or S[I - 1] == S[I]:\n            LC += 1\n        Z[I] = LC\n    for I in range(Q):\n        (L, R) = map(int, input().split())\n        F = 0\n        if R - L < 2:\n            print('NO')\n        elif Z[R - 1] == Z[L]:\n            print('NO')\n        else:\n            print('YES')", "for _ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    S = input()\n    Z = [0] * N\n    LC = 0\n    for I in range(2, N):\n        if S[I - 2] == S[I - 1] or S[I - 2] == S[I] or S[I - 1] == S[I]:\n            LC += 1\n        Z[I] = LC\n    for I in range(Q):\n        (L, R) = map(int, input().split())\n        F = 0\n        if R - L < 2:\n            print('NO')\n        elif Z[R - 1] == Z[L]:\n            print('NO')\n        else:\n            print('YES')", "t = int(input())\nwhile t > 0:\n    (x, q) = input().split()\n    x = int(x)\n    q = int(q)\n    s = input()\n    list = []\n    list.append(0)\n    list.append(0)\n    sum = 0\n    ptr = 0\n    for i in s:\n        if ptr + 2 > len(s) - 1:\n            break\n        else:\n            a = s[ptr]\n            b = s[ptr + 1]\n            c = s[ptr + 2]\n            if (a == b) | (b == c) | (a == c):\n                sum += 1\n            list.append(sum)\n            ptr += 1\n    while q > 0:\n        (l, r) = input().split()\n        l = int(l)\n        r = int(r)\n        if r - l < 2:\n            print('NO')\n        else:\n            res = list[r - 1] - list[l]\n            if res > 0:\n                print('YES')\n            else:\n                print('NO')\n        q -= 1\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    s = input()\n    if n < 3:\n        for i in range(m):\n            (a, b) = map(int, input().split())\n            print('NO')\n    else:\n        k = [s[0], s[1], s[2]]\n        if k[0] == k[1] or k[1] == k[2] or k[0] == k[2]:\n            c = 1\n        else:\n            c = 0\n        ans = [0, c]\n        for i in range(3, n):\n            del k[0]\n            k.append(s[i])\n            if k[0] == k[1] or k[1] == k[2] or k[0] == k[2]:\n                c += 1\n            ans.append(c)\n        for i in range(m):\n            (a, b) = map(int, input().split())\n            if b - a < 2:\n                print('NO')\n                continue\n            b -= 2\n            a -= 1\n            if ans[b] - ans[a] == 0:\n                print('NO')\n            else:\n                print('YES')", "from bisect import bisect_left as bl\nt = int(input())\nfor i in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    c = []\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            c.append(i + 1)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        x = bl(c, l)\n        if len(c) == 0 or r - l < 2 or x == len(c):\n            print('NO')\n        else:\n            st = c[x]\n            if st + 2 <= r:\n                print('YES')\n            else:\n                print('NO')", "def list_inp():\n    return [int(val.strip()) for val in input().split()]\n\ndef main():\n    T = list_inp()[0]\n    while T:\n        T -= 1\n        (N, Q) = list_inp()\n        inp_str = input().strip()\n        good_subs_3 = [0 for _ in range(N)]\n        for i in range(len(inp_str) - 3 + 1):\n            if i > 0:\n                good_subs_3[i] = good_subs_3[i - 1]\n            if inp_str[i] == inp_str[i + 1] or inp_str[i] == inp_str[i + 2] or inp_str[i + 1] == inp_str[i + 2]:\n                good_subs_3[i] += 1\n        while Q:\n            Q -= 1\n            (l, r) = list_inp()\n            l -= 1\n            r -= 1\n            if l > r - 2:\n                print('NO')\n            else:\n                good_count = good_subs_3[r - 2]\n                if l > 0:\n                    good_count -= good_subs_3[l - 1]\n                if good_count > 0:\n                    print('YES')\n                else:\n                    print('NO')\nmain()", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    index = [-1] * n\n    temp = -1\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 2] == s[i + 1]:\n            temp = i\n        index[i + 2] = temp\n    for Q in range(q):\n        (l, r) = map(int, input().split())\n        if index[r - 1] >= l - 1:\n            print('YES')\n        else:\n            print('NO')", "T = int(input())\nfor test in range(T):\n    (N, Q) = [int(v) for v in input().split()]\n    S = input()\n    start_points = [len(set(S[i:i + 3])) < 3 for i in range(N - 2)]\n    if N < 3:\n        count = []\n    else:\n        counts = [int(start_points[0])] + [0] * (N - 3)\n        for i in range(1, N - 2):\n            counts[i] = counts[i - 1] + start_points[i]\n    for query in range(Q):\n        (L, R) = [int(v) for v in input().split()]\n        if L + 2 > R:\n            print('NO')\n            continue\n        if L == 1:\n            left = 0\n        else:\n            left = counts[L - 2]\n        right = counts[R - 3]\n        if left < right:\n            print('YES')\n        else:\n            print('NO')", "from itertools import accumulate\nfrom collections import Counter\n\ndef is_dominant(ss):\n    wc = Counter(ss)\n    for i in wc.values():\n        if i > 1:\n            return True\n    return False\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split(' '))\n    s = input()\n    p = []\n    if n > 2:\n        for i in range(n - 2):\n            ss = s[i:i + 3]\n            if is_dominant(ss):\n                val = 1\n            else:\n                val = 0\n            p.append(val)\n        p1 = list(accumulate(p))\n    for i in range(q):\n        (l, r) = map(int, input().split(' '))\n        len = r - (l - 1)\n        if n < 3 or len < 3:\n            ans = 'NO'\n        else:\n            sum = p1[r - 3]\n            if l > 1:\n                sum -= p1[l - 2]\n            if sum > 0:\n                ans = 'YES'\n            else:\n                ans = 'NO'\n        print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    dp = [0] * (n + 1)\n    for i in range(n - 2):\n        p = s[i:i + 3]\n        if p.count(p[0]) >= 2 or p.count(p[1]) >= 2:\n            dp[i + 1] = dp[i] + 1\n        else:\n            dp[i + 1] = dp[i]\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if n < 3 or r - l < 2:\n            print('NO')\n            continue\n        if dp[r - 2] - dp[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "import bisect\n\ndef solve(s_set, L, R):\n    pos = bisect.bisect_left(s_set, L)\n    if pos >= len(s_set):\n        print('NO')\n        return\n    if s_set[pos] + 2 <= R:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    (N, Q) = map(int, input().split(' '))\n    given = [i for i in input()]\n    s_set = []\n    for i in range(len(given) - 3 + 1):\n        if given[i] == given[i + 1] or given[i] == given[i + 2] or given[i + 1] == given[i + 2]:\n            s_set.append(i + 1)\n    for i in range(Q):\n        (L, R) = map(int, input().split(' '))\n        solve(s_set, L, R)", "tc = int(input())\nfor _ in range(tc):\n    (n, q) = map(int, input().split())\n    s = input()\n    nbrich = [0, 0]\n    lastCount = 0\n    for i in range(2, n):\n        if s[i] == s[i - 1] or s[i] == s[i - 2] or s[i - 1] == s[i - 2]:\n            lastCount += 1\n        nbrich.append(lastCount)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if r - l < 2:\n            print('NO')\n        else:\n            diff = nbrich[r - 1] - nbrich[l]\n            if diff > 0:\n                print('YES')\n            else:\n                print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    dp = [0] * (n + 1)\n    for i in range(n - 2):\n        p = s[i:i + 3]\n        if p.count(p[0]) >= 2 or p.count(p[1]) >= 2:\n            dp[i + 1] = dp[i] + 1\n        else:\n            dp[i + 1] = dp[i]\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if n < 3 or r - l < 2:\n            print('NO')\n            continue\n        if dp[r - 2] - dp[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "from bisect import *\n\ndef sub_string(temp, n, l, r):\n    index = bisect_left(temp, l - 1)\n    if index >= n:\n        print('NO')\n        return\n    if temp[index] + 2 <= r - 1:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = [x for x in input()]\n    temp = []\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i + 1] == s[i + 2] or s[i] == s[i + 2]:\n            temp.append(i)\n    n = len(temp)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        sub_string(temp, n, l, r)", "def abc(k, a, b):\n    i = 0\n    j = len(k) - 1\n    while i <= j:\n        mid = i + (j - i) // 2\n        if k[mid] > b:\n            j = mid - 1\n        elif k[mid] < a:\n            i = mid + 1\n        else:\n            return True\n    return False\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    if n <= 2:\n        for i in range(q):\n            (a, b) = map(int, input().split())\n            print('NO')\n        continue\n    k = []\n    for i in range(n - 2):\n        a = s[i]\n        b = s[i + 1]\n        c = s[i + 2]\n        if a == b or b == c or a == c:\n            k.append(i)\n    for i in range(q):\n        (a, b) = map(int, input().split())\n        a -= 1\n        b -= 1\n        if b - a < 2:\n            print('NO')\n        else:\n            flag = abc(k, a, b - 2)\n            if flag:\n                print('YES')\n            else:\n                print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = ' ' + input()\n    prefix = [0] * (n + 1)\n    for i in range(3, n + 1):\n        prefix[i] = prefix[i - 1]\n        if s[i] == s[i - 1] or s[i - 1] == s[i - 2] or s[i] == s[i - 2]:\n            prefix[i] += 1\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r - l + 1 < 3:\n            print('NO')\n        elif prefix[r] - prefix[l + 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = ' ' + input()\n    prefix = [0] * (n + 1)\n    for i in range(3, n + 1):\n        prefix[i] = prefix[i - 1]\n        if s[i] == s[i - 1] or s[i - 1] == s[i - 2] or s[i] == s[i - 2]:\n            prefix[i] += 1\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r - l + 1 < 3:\n            print('NO')\n        elif prefix[r] - prefix[l + 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    prefix = [0] * n\n    for i in range(2, n):\n        prefix[i] = prefix[i - 1]\n        if s[i] == s[i - 1] or s[i - 1] == s[i - 2] or s[i] == s[i - 2]:\n            prefix[i] += 1\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r - l + 1 < 3:\n            print('NO')\n        elif prefix[r - 1] - prefix[l] > 0:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nwhile t:\n    (n, q) = map(int, input().split())\n    s = input()\n    lol = 0\n    ll = [0] * n\n    for i in range(n - 2):\n        li = []\n        li.append(s[i])\n        li.append(s[i + 1])\n        li.append(s[i + 2])\n        li.sort()\n        if li[0] == li[1] or li[1] == li[2]:\n            lol = 1\n            ll[i + 2] += 1\n    for i in range(1, n):\n        ll[i] = ll[i - 1] + ll[i]\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        if l + 2 < n and ll[l + 1] - ll[l] == 1 and (ll[l + 1] == ll[r]) and (r - l + 1 >= 3):\n            print('NO')\n        elif ll[r] - ll[l] and r - l + 1 >= 3:\n            print('YES')\n        else:\n            print('NO')\n    t -= 1", "def nlebs(a, l, r, x):\n    ans = -1\n    if x > a[-1]:\n        return -1\n    while l <= r:\n        mid = int((l + r) / 2)\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            ans = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    return ans\nfrom bisect import bisect_left\nfrom bisect import bisect_right\n\ndef nsebs(a, l, r, x):\n    ans = -1\n    if x < a[0]:\n        return -1\n    while l <= r:\n        mid = int((l + r) / 2)\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            r = mid - 1\n        else:\n            ans = mid\n            l = mid + 1\n    return ans\nimport collections\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    s = input()\n    arr = []\n    for i in range(n - 2):\n        p = s[i:i + 3]\n        if p[1] == p[0] or p[1] == p[2] or p[0] == p[2]:\n            arr.append((i + 1, i + 3))\n    first = []\n    second = []\n    l = len(arr)\n    for i in arr:\n        first.append(i[0])\n        second.append(i[1])\n    for i in range(m):\n        (p, q) = [int(x) for x in input().split()]\n        if l == 0:\n            print('NO')\n            continue\n        if p > first[-1] or q < second[0]:\n            print('NO')\n            continue\n        qi = bisect_left(second, q)\n        if qi == l:\n            qi = l - 1\n        elif second[qi] != q:\n            qi -= 1\n        pi = bisect_left(first, p)\n        if pi <= qi:\n            print('YES')\n        else:\n            print('NO')", "import bisect\n\ndef solve(arr, size, Left, Right):\n    i = bisect.bisect_left(arr, Left - 1)\n    if i >= size:\n        print('NO')\n        return\n    if arr[i] + 2 <= Right - 1:\n        print('YES')\n    else:\n        print('NO')\nfor i in range(int(input())):\n    (N, Q) = map(int, input().split())\n    s = [i for i in input()]\n    ss = []\n    for i in range(0, len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            ss.append(i)\n    size = len(ss)\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        solve(ss, size, L, R)", "tc = int(input())\nfor _ in range(tc):\n    (n, q) = map(int, input().split())\n    s = input()\n    girl = [0, 0]\n    lastCount = 0\n    for i in range(2, n):\n        if s[i] == s[i - 1] or s[i] == s[i - 2] or s[i - 1] == s[i - 2]:\n            lastCount += 1\n        girl.append(lastCount)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if r - l < 2:\n            print('NO')\n        else:\n            diff = girl[r - 1] - girl[l]\n            if diff > 0:\n                print('YES')\n            else:\n                print('NO')", "tc = int(input())\nfor _ in range(tc):\n    (n, q) = map(int, input().split())\n    s = input()\n    girl = [0, 0]\n    lastCount = 0\n    for i in range(2, n):\n        if s[i] == s[i - 1] or s[i] == s[i - 2] or s[i - 1] == s[i - 2]:\n            lastCount += 1\n        girl.append(lastCount)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if r - l < 2:\n            print('NO')\n        else:\n            diff = girl[r - 1] - girl[l]\n            if diff > 0:\n                print('YES')\n            else:\n                print('NO')", "from itertools import accumulate\nt = int(input())\nwhile t:\n    (n, q) = [int(x) for x in input().split()]\n    s = input()\n    if n < 3:\n        for _ in range(q):\n            (l, r) = [int(x) for x in input().split()]\n            print('NO')\n    else:\n        temp = [0] * (n - 2)\n        for i in range(n - 2):\n            if s[i] == s[i + 1] or s[i + 2] == s[i + 1] or s[i] == s[i + 2]:\n                temp[i] = 1\n        temp = list(accumulate(temp))\n        for _ in range(q):\n            (l, r) = [int(x) for x in input().split()]\n            if r - l < 2:\n                print('NO')\n                continue\n            r -= 3\n            if l == 1:\n                if temp[r] > 0:\n                    print('YES')\n                else:\n                    print('NO')\n            elif temp[r] - temp[l - 2] > 0:\n                print('YES')\n            else:\n                print('NO')\n    t -= 1", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    st = input()\n    freq = [0]\n    count = 0\n    for i in range(n - 2):\n        if len(set(st[i:i + 3])) < 3:\n            count += 1\n        freq.append(count)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if r - l < 2:\n            print('NO')\n            continue\n        if r - l == 2:\n            if freq[l] - freq[l - 1] > 0:\n                print('YES')\n            else:\n                print('NO')\n            continue\n        if freq[r - 2] - freq[l] > 0 or freq[l] - freq[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    c = 0\n    a = [0] * n\n    for i in range(2, n):\n        if s[i] == s[i - 1] or s[i] == s[i - 2] or s[i - 1] == s[i - 2]:\n            c += 1\n        a[i] = c\n    for j in range(q):\n        (d, b) = map(int, input().split())\n        if b - d < 2:\n            print('NO')\n        elif a[b - 1] > a[d]:\n            print('YES')\n        else:\n            print('NO')", "def getCumulative(string):\n    cumulative = [0]\n    for i in range(len(string) - 2):\n        nextVal = 1 if checkThreeCharsForward(i, string) else 0\n        cumulative.append(cumulative[-1] + nextVal)\n    return cumulative\n\ndef checkThreeCharsForward(i, s):\n    return s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]\n\ndef isRich(left, right, cumulative):\n    return right - left >= 2 and cumulative[right - 2] - cumulative[left - 1] > 0\nfor _ in range(int(input())):\n    (_, numQueries) = [int(i) for i in input().split()]\n    cumulative = getCumulative(input())\n    for _ in range(numQueries):\n        (left, right) = [int(i) for i in input().split()]\n        print('YES' if isRich(left, right, cumulative) else 'NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = list(input())\n    t = 0\n    li = []\n    for i in range(n - 2):\n        li.append(t)\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            t += 1\n    li.append(t)\n    li.append(0)\n    li.append(0)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        l -= 1\n        r -= 1\n        if r - l >= 2:\n            if li[r - 1] - li[l] > 0:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    s = input()\n    dp = [0] * (n - 2)\n    for j in range(n - 2):\n        st = set(list(s[j:j + 3]))\n        if len(st) <= 2:\n            dp[j] = 1\n    for i in range(1, len(dp)):\n        dp[i] += dp[i - 1]\n    dp = [0] + dp\n    for i in range(m):\n        (u, v) = map(int, input().split())\n        v -= 2\n        if u > v:\n            print('NO')\n        elif dp[v] - dp[u - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    repeats = [0 for i in range(n)]\n    for i in range(n - 2):\n        if len(set(s[i:i + 3])) <= 2:\n            repeats[i] = 1\n    carr = [0 for i in range(n + 1)]\n    le = 0\n    for i in range(n):\n        carr[i + 1] = repeats[i] + le\n        le = carr[i + 1]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r - l >= 2:\n            if carr[r - 2] - carr[l - 1] == 0:\n                print('NO')\n            else:\n                print('YES')\n        else:\n            print('NO')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    p = [0] * (n - 2)\n    for j in range(n - 2):\n        sub = set(list(s[j:j + 3]))\n        if len(sub) <= 2:\n            p[j] = 1\n    for i in range(1, len(p)):\n        p[i] += p[i - 1]\n    p = [0] + p\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        r -= 2\n        if l > r:\n            print('NO')\n        elif p[r] - p[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, q) = [int(p) for p in input().split()]\n    s = input()\n    l = [0] * n\n    if n > 2:\n        for i in range(n - 2):\n            v1 = s[i]\n            v2 = s[i + 1]\n            v3 = s[i + 2]\n            if v1 == v2 or v2 == v3 or v1 == v3:\n                l[i] = 1\n            else:\n                l[i] = 0\n        li = [0] * n\n        val = 0\n        for i in range(n):\n            val += l[i]\n            li[i] = val\n        for i in range(q):\n            (ll, hl) = [int(p) for p in input().split()]\n            if hl - ll + 1 >= 3:\n                if ll > 1:\n                    ans = li[hl - 3] - li[ll - 2]\n                else:\n                    ans = li[hl - 3]\n            else:\n                ans = 0\n            if ans < 1:\n                print('NO')\n            else:\n                print('YES')\n    else:\n        for i in range(q):\n            (ll, hl) = [int(p) for p in input().split()]\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    pre = [0] * (n + 1)\n    for i in range(n - 2):\n        p = s[i:i + 3]\n        if p.count(p[0]) >= 2 or p.count(p[1]) >= 2:\n            pre[i + 1] = pre[i] + 1\n        else:\n            pre[i + 1] = pre[i]\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if n < 3 or r - l < 2:\n            print('NO')\n            continue\n        if pre[r - 2] - pre[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "T = int(input())\nfor k in range(T):\n    (N, Q) = map(int, input().split())\n    s = input()\n    l = [0 for i in range(N)]\n    p = -1\n    for i in range(2, N):\n        if s[i] == s[i - 1] or s[i - 1] == s[i - 2] or s[i] == s[i - 2]:\n            p = i\n            l[i] = p + 1\n        else:\n            l[i] = p + 1\n    for _ in range(Q):\n        (a, b) = map(int, input().split())\n        flag = 0\n        if l[b - 1] - 2 >= a:\n            flag = 1\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "from bisect import *\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    l = []\n    for i in range(n - 2):\n        (a, b, c) = (s[i], s[i + 1], s[i + 2])\n        if len(set([a, b, c])) < 3:\n            l.append(i)\n    for i in range(q):\n        (left, right) = map(int, input().split())\n        left -= 1\n        right -= 1\n        if right - left + 1 < 3:\n            print('NO')\n            continue\n        p1 = bisect_left(l, left)\n        if p1 != len(l) and l[p1] <= right - 2:\n            print('YES')\n        else:\n            print('NO')", "from bisect import *\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    l = []\n    for i in range(n - 2):\n        (a, b, c) = (s[i], s[i + 1], s[i + 2])\n        if len(set([a, b, c])) < 3:\n            l.append(i)\n    for i in range(q):\n        (left, right) = map(int, input().split())\n        left -= 1\n        right -= 1\n        if right - left + 1 < 3:\n            print('NO')\n            continue\n        p1 = bisect_left(l, left)\n        if p1 != len(l) and l[p1] <= right - 2:\n            print('YES')\n        else:\n            print('NO')", "R = lambda : map(int, input().split())\nfor _ in range(int(input())):\n    (n, q) = R()\n    s = input()\n    L = []\n    for i in range(n - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            L.append(1)\n        else:\n            L.append(0)\n    for i in range(1, len(L)):\n        L[i] += L[i - 1]\n    L = [0] + L\n    for j in range(q):\n        (l, r) = R()\n        r -= 2\n        if l > r:\n            print('NO')\n        elif L[r] - L[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "tt = int(input())\nwhile tt:\n    ans = [0] * 100001\n    (n, q) = map(int, input().split())\n    st = input()\n    for i in range(2, n):\n        if st[i] == st[i - 1] or st[i - 1] == st[i - 2] or st[i] == st[i - 2]:\n            ans[i] = ans[i - 1] + 1\n        else:\n            ans[i] = ans[i - 1]\n    for i in range(q):\n        fi = 0\n        (l, r) = map(int, input().split())\n        if r - l < 2:\n            print('NO')\n        elif ans[r - 1] - ans[l]:\n            print('YES')\n        else:\n            print('NO')\n    tt -= 1", "for t in range(int(input())):\n    (n, q) = map(int, input().split())\n    st = input()\n    ans = [0 for i in range(n)]\n    for i in range(n - 2):\n        if st[i] == st[i + 1] or st[i] == st[i + 2] or st[i + 1] == st[i + 2]:\n            ans[i] = 1\n    prefix = [0 for i in range(n + 1)]\n    for i in range(n):\n        prefix[i + 1] = prefix[i] + ans[i]\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r - l < 2:\n            print('NO')\n        elif prefix[r - 2] - prefix[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor _ in range(t):\n    (n, q) = [int(i) for i in input().split()]\n    string = input()\n    richBinaryList = [False for _ in range(len(string))]\n    leastRightList = [0 for _ in range(len(string))]\n    for i in range(len(string) - 2):\n        first = string[i]\n        second = string[i + 1]\n        third = string[i + 2]\n        if first == second or first == third or second == third:\n            richBinaryList[i] = True\n    lastRich = None\n    for i in range(len(string) - 1, -1, -1):\n        if richBinaryList[i]:\n            lastRich = i\n        if lastRich is None:\n            leastRight = None\n        else:\n            leastRight = lastRich + 2\n        leastRightList[i] = leastRight\n    for _ in range(q):\n        (l, r) = [int(i) - 1 for i in input().split()]\n        length = r - l + 1\n        if length < 3:\n            print('NO')\n        elif leastRightList[l] is None:\n            print('NO')\n        elif leastRightList[l] <= r:\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    nq = input().split(' ')\n    (n, q) = (int(nq[0]), int(nq[1]))\n    s = input()\n    a = [0 for i in range(len(s))]\n    b = [0 for i in range(len(s))]\n    for j in range(len(s) - 2):\n        if s[j] == s[j + 1] or s[j] == s[j + 2] or s[j + 1] == s[j + 2]:\n            a[j] = 1\n    prev = -1\n    for j in range(len(s) - 1, -1, -1):\n        if a[j] != 0:\n            prev = j\n        b[j] = prev\n    for j in range(q):\n        ab = input().split(' ')\n        (x, y) = (int(ab[0]) - 1, int(ab[1]) - 1)\n        if b[x] == -1:\n            print('NO')\n            continue\n        if b[x] + 2 <= y:\n            print('YES')\n        else:\n            print('NO')", "import collections as cl\n\ndef bins(a, k, n):\n    (l, h) = (0, n - 1)\n    while l <= h:\n        mid = (l + h) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            h = mid - 1\n        else:\n            l = mid + 1\n    return l\n\ndef rich(a, n):\n    res = []\n    for i in range(0, len(a) - 2):\n        if a[i] == a[i + 1] or a[i] == a[i + 2] or a[i + 1] == a[i + 2]:\n            res += [i + 1]\n    return res\nt = int(input())\nwhile t:\n    t -= 1\n    (n, q) = map(int, input().split())\n    a = input().rstrip()\n    res = rich(a, n)\n    y = len(res)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r - l <= 1:\n            print('NO')\n        else:\n            ind = bins(res, l, y)\n            if ind >= y:\n                print('NO')\n            elif res[ind] >= l and res[ind] <= r - 2:\n                print('YES')\n            else:\n                print('NO')", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    index = []\n    for i in range(n - 2):\n        dictt = {}\n        for j in s[i:i + 3]:\n            if j in dictt:\n                dictt[j] += 1\n            else:\n                dictt[j] = 1\n        if max(dictt.values()) >= 2:\n            index += [i + 1]\n    for __ in range(q):\n        (l, r) = map(int, input().split())\n        ind = bisect_left(index, l)\n        if ind == len(index):\n            print('NO')\n        elif index[ind] + 2 <= r:\n            print('YES')\n        else:\n            print('NO')", "def nlebs(a, l, r, x):\n    ans = -1\n    if x > a[-1]:\n        return -1\n    while l <= r:\n        mid = int((l + r) / 2)\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            ans = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    return ans\nfrom bisect import bisect_left\nfrom bisect import bisect_right\n\ndef nsebs(a, l, r, x):\n    ans = -1\n    if x < a[0]:\n        return -1\n    while l <= r:\n        mid = int((l + r) / 2)\n        if a[mid] == x:\n            return mid\n        elif a[mid] > x:\n            r = mid - 1\n        else:\n            ans = mid\n            l = mid + 1\n    return ans\nimport collections\nt = int(input())\nfor i in range(t):\n    (n, m) = [int(x) for x in input().split()]\n    s = input()\n    arr = []\n    for i in range(n - 2):\n        p = s[i:i + 3]\n        if p[1] == p[0] or p[1] == p[2] or p[0] == p[2]:\n            arr.append((i + 1, i + 3))\n    first = []\n    second = []\n    l = len(arr)\n    for i in arr:\n        first.append(i[0])\n        second.append(i[1])\n    for i in range(m):\n        (p, q) = [int(x) for x in input().split()]\n        if l == 0:\n            print('NO')\n            continue\n        if p > first[-1] or q < second[0]:\n            print('NO')\n            continue\n        qi = bisect_left(second, q)\n        if qi == l:\n            qi = l - 1\n        elif second[qi] != q:\n            qi -= 1\n        pi = bisect_left(first, p)\n        if pi <= qi:\n            print('YES')\n        else:\n            print('NO')", "from bisect import bisect_left\nt = int(input())\nfor z in range(t):\n    ar = input().split()\n    (n, q) = (int(ar[0]), int(ar[1]))\n    s = input()\n    a2 = []\n    a3 = []\n    for i in range(n):\n        if i < n - 1 and s[i] == s[i + 1]:\n            a2.append(i)\n        if i < n - 2 and s[i] == s[i + 2]:\n            a3.append(i)\n    for i in range(q):\n        ar = input().split()\n        (l, r) = (int(ar[0]) - 1, int(ar[1]) - 1)\n        b2 = bisect_left(a2, l)\n        b3 = bisect_left(a3, l)\n        if r - l >= 2 and (b2 < len(a2) and a2[b2] + 1 <= r or (b3 < len(a3) and a3[b3] + 2 <= r)):\n            print('YES')\n        else:\n            print('NO')", "t = int(input())\nfor i in range(t):\n    nq = input().split(' ')\n    (n, q) = (int(nq[0]), int(nq[1]))\n    s = input()\n    a = [0 for i in range(len(s))]\n    b = [0 for i in range(len(s))]\n    for j in range(len(s) - 2):\n        if s[j] == s[j + 1] or s[j] == s[j + 2] or s[j + 1] == s[j + 2]:\n            a[j] = 1\n    prev = -1\n    for j in range(len(s) - 1, -1, -1):\n        if a[j] != 0:\n            prev = j\n        b[j] = prev\n    for j in range(q):\n        ab = input().split(' ')\n        (x, y) = (int(ab[0]) - 1, int(ab[1]) - 1)\n        if b[x] == -1:\n            print('NO')\n            continue\n        if b[x] + 2 <= y:\n            print('YES')\n        else:\n            print('NO')", "tc = int(input())\nfor _ in range(tc):\n    (n, q) = map(int, input().split())\n    s = input()\n    nbrich = [0, 0]\n    lastCount = 0\n    for i in range(2, n):\n        if s[i] == s[i - 1] or s[i] == s[i - 2] or s[i - 1] == s[i - 2]:\n            lastCount += 1\n        nbrich.append(lastCount)\n    for _ in range(q):\n        (l, r) = map(int, input().split())\n        if r - l < 2:\n            print('NO')\n        else:\n            diff = nbrich[r - 1] - nbrich[l]\n            if diff > 0:\n                print('YES')\n            else:\n                print('NO')", "from bisect import *\n\ndef solve(arr, n, l, r):\n    i = bisect_left(arr, l - 1)\n    if i >= n:\n        print('NO')\n        return\n    if arr[i] + 2 <= r - 1:\n        print('YES')\n    else:\n        print('NO')\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    arr = [i for i in input()]\n    s_set = list()\n    for i in range(n - 2):\n        if arr[i] == arr[i + 1] or arr[i + 1] == arr[i + 2] or arr[i] == arr[i + 2]:\n            s_set.append(i)\n    n = len(s_set)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        solve(s_set, n, l, r)", "from bisect import *\nt = int(input())\nfor _ in range(t):\n    (n, q) = map(int, input().split())\n    s = input()\n    l = []\n    for i in range(n - 2):\n        (a, b, c) = (s[i], s[i + 1], s[i + 2])\n        if len(set([a, b, c])) < 3:\n            l.append(i)\n    for i in range(q):\n        (left, right) = map(int, input().split())\n        left -= 1\n        right -= 1\n        if right - left + 1 < 3:\n            print('NO')\n            continue\n        p1 = bisect_left(l, left)\n        if p1 != len(l) and l[p1] <= right - 2:\n            print('YES')\n        else:\n            print('NO')", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfor _ in range(int(input())):\n    (N, Q) = list(map(int, input().split()))\n    S = input()\n    dp = [-1 for i in range(len(S))]\n    for i in range(len(S) - 3, -1, -1):\n        if len(set(S[i:i + 3])) <= 2:\n            dp[i] = i + 2\n        elif dp[i + 1] != -1:\n            dp[i] = dp[i + 1]\n    for _ in range(Q):\n        (L, R) = list(map(int, input().split()))\n        L -= 1\n        R -= 1\n        if dp[L] != -1 and dp[L] <= R:\n            print('YES')\n        else:\n            print('NO')", "import collections as cl\n\ndef bins(a, k, n):\n    (l, h) = (0, n - 1)\n    while l <= h:\n        mid = (l + h) // 2\n        if a[mid] == k:\n            return mid\n        elif a[mid] > k:\n            h = mid - 1\n        else:\n            l = mid + 1\n    return l\n\ndef rich(a, n):\n    res = []\n    temp = cl.deque(list(a[:3]))\n    if len(set(temp)) <= 2:\n        res += [1]\n    for i in range(3, len(a)):\n        temp.popleft()\n        if a[i] in temp or len(set(temp)) == 1:\n            res += [i - 1]\n        temp.append(a[i])\n    return res\nt = int(input())\nwhile t:\n    t -= 1\n    (n, q) = map(int, input().split())\n    a = input().rstrip()\n    res = rich(a, n)\n    y = len(res)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r - l <= 1:\n            print('NO')\n        elif r - l == 2:\n            ind = bins(res, l, y)\n            if ind >= y:\n                print('NO')\n            elif res[ind] == l:\n                print('YES')\n            else:\n                print('NO')\n        else:\n            ind = bins(res, l, y)\n            if ind >= y:\n                print('NO')\n            elif res[ind] >= l and res[ind] <= r - 2:\n                print('YES')\n            else:\n                print('NO')", "import math\nimport sys\nfrom heapq import heappop\nfrom heapq import heappush\nfrom heapq import heapify\nfrom bisect import insort\nfrom sys import stdin, stdout\nfrom collections import defaultdict\ninp = lambda : int(stdin.readline())\nsip = lambda : input()\nmulip = lambda : map(int, input().split())\nlst = lambda : list(map(int, stdin.readline().split()))\nslst = lambda : list(sip())\narr2d = lambda x: [[int(j) for j in input().split()] for i in range(x)]\nodds = lambda l: len(list(filter(lambda x: x % 2 != 0, l)))\nevens = lambda l: len(list(filter(lambda x: x % 2 == 0, l)))\nmod = pow(10, 9) + 7\nfor _ in range(int(input())):\n    (N, Q) = mulip()\n    S = list(input())\n    l = [0, 0]\n    cnt = 0\n    j = 0\n    for i in range(3, N + 1):\n        temp = S[j:i]\n        d = defaultdict(int)\n        f = 0\n        for i in temp:\n            d[i] += 1\n        for i in d:\n            if d[i] >= 2:\n                cnt += 1\n                f = 1\n        if f == 1:\n            l.append(1)\n        else:\n            l.append(0)\n        j += 1\n    M = [0] * (N + 1)\n    for i in range(1, N + 1):\n        M[i] = M[i - 1] + l[i - 1]\n    for i in range(Q):\n        (l1, r) = mulip()\n        if r - l1 == 0:\n            ans = 0\n        else:\n            ans = M[r] - M[l1 + 1]\n        if ans > 0:\n            print('YES')\n        else:\n            print('NO')", "from bisect import *\nfor _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    l = list(input())\n    s = []\n    for i in range(n - 2):\n        if l[i] == l[i + 1] or l[i + 1] == l[i + 2] or l[i] == l[i + 2]:\n            s.append(i)\n    n = len(s)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        ind = bisect_left(s, l - 1)\n        if ind >= n:\n            print('NO')\n            continue\n        if s[ind] + 2 <= r - 1:\n            print('YES')\n        else:\n            print('NO')", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (nota, quota) = [int(i) for i in input().split()]\n    s = input()\n    dope = []\n    dope1 = []\n    for i in range(nota - 2):\n        if s[i] == s[i + 1]:\n            dope.append([i, 1])\n            dope1.append(i)\n        if s[i] == s[i + 2]:\n            dope.append([i, 2])\n            dope1.append(i)\n    if s[nota - 2] == s[nota - 1]:\n        dope.append([nota - 2, 1])\n    for i in range(quota):\n        (l, r) = [int(i) for i in input().split()]\n        l -= 1\n        r -= 1\n        flag = 0\n        pos = bisect_left(dope1, l)\n        if pos >= len(dope):\n            print('NO')\n            continue\n        if dope[pos][1] == 2:\n            if r >= dope[pos][0] + 2:\n                flag = 1\n        elif dope[pos][1] == 1:\n            if r >= dope[pos][0] + 2:\n                flag = 1\n            elif r == dope[pos][0] + 1 and l < dope[pos][0]:\n                flag = 1\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "from bisect import *\n\ndef fun(s):\n    s = list(s)\n    s.sort()\n    if s[0] == s[1] or s[1] == s[2]:\n        return True\n    return False\nfor z in range(int(input())):\n    (n, q) = map(int, input().split())\n    s = input()\n    lis = [0] * n\n    for i in range(3, n + 1):\n        if fun(s[i - 3:i]):\n            lis[i - 1] = 1\n    a = []\n    for i in range(n):\n        if lis[i] == 1:\n            a.append(i + 1)\n    for y in range(q):\n        (l, r) = map(int, input().split())\n        x = bisect_left(a, l + 2)\n        if x == len(a) or r - l < 2:\n            print('NO')\n        elif a[x] <= r:\n            print('YES')\n        else:\n            print('NO')", "import re\nfor _ in range(int(input())):\n    (N, Q) = map(int, input().split())\n    S = input()\n    is_rich = [bool(re.match('(?:.?(.)\\\\1)|(?:(.).\\\\2)', S[i:i + 3])) for i in range(N - 2)]\n    next_rich = []\n    i = 0\n    while len(next_rich) < N - 2:\n        while i < len(next_rich) or (i < N - 2 and (not is_rich[i])):\n            i += 1\n        next_rich.append(i)\n    next_rich.append(N)\n    next_rich.append(N)\n    for i in range(Q):\n        (L, R) = map(int, input().split())\n        print(['NO', 'YES'][next_rich[L - 1] < R - 2])", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, q) = [int(i) for i in input().split()]\n    s = input()\n    dp = []\n    dp1 = []\n    for i in range(n - 2):\n        if s[i] == s[i + 1]:\n            dp.append([i, 1])\n            dp1.append(i)\n        if s[i] == s[i + 2]:\n            dp.append([i, 2])\n            dp1.append(i)\n    if s[n - 2] == s[n - 1]:\n        dp.append([n - 2, 1])\n    for i in range(q):\n        (l, r) = [int(i) for i in input().split()]\n        l -= 1\n        r -= 1\n        flag = 0\n        pos = bisect_left(dp1, l)\n        if pos >= len(dp):\n            print('NO')\n            continue\n        if dp[pos][1] == 2:\n            if r >= dp[pos][0] + 2:\n                flag = 1\n        elif dp[pos][1] == 1:\n            if r >= dp[pos][0] + 2:\n                flag = 1\n            elif r == dp[pos][0] + 1 and l < dp[pos][0]:\n                flag = 1\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, q) = [int(i) for i in input().split()]\n    s = input()\n    dp = []\n    dp1 = []\n    for i in range(n - 2):\n        if s[i] == s[i + 1]:\n            dp.append([i, 1])\n            dp1.append(i)\n        if s[i] == s[i + 2]:\n            dp.append([i, 2])\n            dp1.append(i)\n    if s[n - 2] == s[n - 1]:\n        dp.append([n - 2, 1])\n    for i in range(q):\n        (l, r) = [int(i) for i in input().split()]\n        l -= 1\n        r -= 1\n        flag = 0\n        pos = bisect_left(dp1, l)\n        if pos >= len(dp):\n            print('NO')\n            continue\n        if dp[pos][1] == 2:\n            if r >= dp[pos][0] + 2:\n                flag = 1\n        elif dp[pos][1] == 1:\n            if r >= dp[pos][0] + 2:\n                flag = 1\n            elif r == dp[pos][0] + 1 and l < dp[pos][0]:\n                flag = 1\n        if flag:\n            print('YES')\n        else:\n            print('NO')", "n = int(input())\nfor i in range(0, n):\n    p = input().rstrip().split(' ')\n    s = input().rstrip()\n    x = list(s)\n    q = []\n    w = []\n    S = []\n    D = []\n    if len(x) < 3:\n        for j in range(0, int(p[1])):\n            G = input().rstrip().split(' ')\n            print('NO')\n    else:\n        l = [0] * 26\n        for j in range(0, 3):\n            A = ord(x[j]) - 97\n            l[A] += 1\n        for j in range(0, 26):\n            if l[j] > 1:\n                q.append(1)\n                break\n        for j in range(1, len(x) - 3 + 1):\n            A = ord(x[j - 1]) - 97\n            l[A] -= 1\n            B = ord(x[j + 3 - 1]) - 97\n            l[B] += 1\n            for k in range(0, 26):\n                if l[k] > 1:\n                    q.append(j + 1)\n                    break\n        for j in range(0, int(p[1])):\n            G = input().rstrip().split(' ')\n            if int(G[1]) - int(G[0]) + 1 < 3:\n                print('NO')\n            else:\n                I = 0\n                J = len(q) - 1\n                H = 0\n                while I <= J:\n                    m = (I + J) // 2\n                    if int(q[m]) >= int(G[0]) and int(q[m]) + 2 <= int(G[1]):\n                        H = 1\n                        break\n                    elif int(q[m]) < int(G[0]):\n                        I = m + 1\n                    else:\n                        J = m - 1\n                if H == 0:\n                    print('NO')\n                else:\n                    print('YES')", "for _ in range(int(input())):\n    (n, q) = map(int, input().split())\n    a = input()\n    b = [0]\n    for i in range(n - 2):\n        if a[i] == a[i + 1] or a[i + 1] == a[i + 2] or a[i] == a[i + 2]:\n            b.append(b[-1] + 1)\n        else:\n            b.append(b[-1] + 0)\n    for i in range(q):\n        (l, r) = map(int, input().split())\n        if r - l < 2:\n            print('NO')\n        elif b[r - 2] - b[l - 1] > 0:\n            print('YES')\n        else:\n            print('NO')"]