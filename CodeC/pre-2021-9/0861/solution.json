["n = int(input())\nL = []\nM = []\nN = [0] * (n + 1)\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    M.append((a, b))\n    L.append(b - a + 1)\n    N[a - 1] += 1\n    N[b] -= 1\nfor i in range(1, n):\n    N[i] += N[i - 1]\nq = int(input())\nans = sum(L)\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    ans2 = ans - L[a - 1] - N[b - 1]\n    if M[a - 1][0] <= b <= M[a - 1][1]:\n        ans2 -= 1\n    if ans2 % 2 == 0:\n        print('E')\n    else:\n        print('O')", "n = int(input())\nL = []\nM = []\nN = [0] * (n + 1)\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    M.append((a, b))\n    L.append(b - a + 1)\n    N[a - 1] += 1\n    N[b] -= 1\nfor i in range(1, n):\n    N[i] += N[i - 1]\nq = int(input())\nans = sum(L)\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    ans2 = ans - L[a - 1] - N[b - 1]\n    if M[a - 1][0] <= b <= M[a - 1][1]:\n        ans2 -= 1\n    if ans2 % 2 == 0:\n        print('E')\n    else:\n        print('O')", "n = int(input())\nL = []\nM = []\nN = [0] * (n + 1)\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    M.append((a, b))\n    L.append(b - a + 1)\n    N[a - 1] += 1\n    N[b] -= 1\nfor i in range(1, n):\n    N[i] += N[i - 1]\nq = int(input())\nans = sum(L)\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    ans2 = ans - L[a - 1] - N[b - 1]\n    if M[a - 1][0] <= b <= M[a - 1][1]:\n        ans2 -= 1\n    if ans2 % 2 == 0:\n        print('E')\n    else:\n        print('O')", "n = int(input())\nL = []\nM = []\nN = [0] * (n + 1)\nfor _ in range(n):\n    (a, b) = map(int, input().split())\n    M.append((a, b))\n    L.append(b - a + 1)\n    N[a - 1] += 1\n    N[b] -= 1\nfor i in range(1, n):\n    N[i] += N[i - 1]\nq = int(input())\nans = sum(L)\nfor _ in range(q):\n    (a, b) = map(int, input().split())\n    ans2 = ans - L[a - 1] - N[b - 1]\n    if M[a - 1][0] <= b <= M[a - 1][1]:\n        ans2 -= 1\n    if ans2 % 2 == 0:\n        print('E')\n    else:\n        print('O')", "def xnor(a, b):\n    if a == b:\n        return 1\n    return 0\n\ndef matrix_parity(r):\n    p = 1\n    for i in range(1, N + 1):\n        p = xnor(row_parity(i), p)\n    return p\n\ndef row_parity(x):\n    x = x - 1\n    if (r[x][1] - r[x][0] + 1) % 2 == 0:\n        return 1\n    else:\n        return 0\n\ndef intersect_parity(x, y):\n    x -= 1\n    if r[x][0] <= y and r[x][1] >= y:\n        return 0\n    else:\n        return 1\n\ndef column_parity(y):\n    y -= 1\n    if c[y] % 2 == 0:\n        return 1\n    else:\n        return 0\nN = int(input())\nr = []\nfor n in range(N):\n    r.append([int(x) for x in input().split()])\nc = [0 for i in range(N)]\nfor i in range(N):\n    c[r[i][0] - 1] += 1\n    try:\n        c[r[i][1]] -= 1\n    except IndexError:\n        pass\nfor i in range(1, N):\n    c[i] = c[i] + c[i - 1]\npmatrix = matrix_parity(r)\nQ = int(input())\nfor q in range(Q):\n    (X, Y) = [int(x) for x in input().split()]\n    prow = row_parity(X)\n    pcolumn = column_parity(Y)\n    pintersection = intersect_parity(X, Y)\n    if xnor(xnor(xnor(prow, pcolumn), pintersection), pmatrix) == 1:\n        print('E')\n    else:\n        print('O')", "def xnor(a, b):\n    if a == b:\n        return 1\n    return 0\n\ndef matrix_parity(r):\n    p = 1\n    for i in range(1, N + 1):\n        p = xnor(row_parity(i), p)\n    return p\n\ndef row_parity(x):\n    x = x - 1\n    if (r[x][1] - r[x][0] + 1) % 2 == 0:\n        return 1\n    else:\n        return 0\n\ndef intersect_parity(x, y):\n    x -= 1\n    if r[x][0] <= y and r[x][1] >= y:\n        return 0\n    else:\n        return 1\n\ndef column_parity(y):\n    y -= 1\n    if c[y] % 2 == 0:\n        return 1\n    else:\n        return 0\nN = int(input())\nr = []\nfor n in range(N):\n    r.append([int(x) for x in input().split()])\nc = [0 for i in range(N)]\nfor i in range(N):\n    c[r[i][0] - 1] += 1\n    try:\n        c[r[i][1]] -= 1\n    except IndexError:\n        pass\nfor i in range(1, N):\n    c[i] = c[i] + c[i - 1]\npmatrix = matrix_parity(r)\nQ = int(input())\nfor q in range(Q):\n    (X, Y) = [int(x) for x in input().split()]\n    prow = row_parity(X)\n    pcolumn = column_parity(Y)\n    pintersection = intersect_parity(X, Y)\n    if xnor(xnor(xnor(prow, pcolumn), pintersection), pmatrix) == 1:\n        print('E')\n    else:\n        print('O')", "import sys\nn = int(input())\na = list()\nb = [0 for i in range(n + 2)]\na.append((0, 0))\nfor i in range(1, n + 1):\n    line = input().split()\n    a.append((int(line[0]), int(line[1])))\n    b[a[i][0]] += 1\n    b[a[i][1] + 1] -= 1\nq = int(input())\ns = 0\nfor i in range(1, n + 2):\n    b[i] += b[i - 1]\n    s += b[i]\nwhile q:\n    line = input().split()\n    i = int(line[0])\n    j = int(line[1])\n    x = s - b[j] - (a[i][1] - a[i][0] + 1)\n    if j >= a[i][0] and j <= a[i][1]:\n        x -= 1\n    if x % 2 == 0:\n        sys.stdout.write('E\\n')\n    else:\n        sys.stdout.write('O\\n')\n    q -= 1", "N = int(input())\nL = [0] * N\nR = [0] * N\nLeft = [0] * N\nRight = [0] * N\nrowpairity = [0] * N\ncolumnpairity = [0] * N\npairity = 0\nfor i in range(N):\n    (a, b) = input().split(' ')\n    (c, d) = (int(a) - 1, int(b) - 1)\n    Left[i] = c\n    Right[i] = d\n    L[c] += 1\n    R[d] += 1\n    rowpairity[i] = (d - c + 1) % 2\n    pairity = (pairity + d - c + 1) % 2\ncolumnpairity[0] = L[0] % 2\nfor i in range(1, N):\n    columnpairity[i] = (columnpairity[i - 1] + L[i] - R[i - 1]) % 2\nQ = int(input())\nfor i in range(Q):\n    (a, b) = input().split(' ')\n    (r, c) = (int(a) - 1, int(b) - 1)\n    if Left[r] <= c and c <= Right[r]:\n        if (pairity - columnpairity[c] - rowpairity[r] + 1) % 2 == 0:\n            print('E')\n        else:\n            print('O')\n    elif (pairity - columnpairity[c] - rowpairity[r]) % 2 == 0:\n        print('E')\n    else:\n        print('O')", "N = int(input())\nA = [0 for i in range(0, N + 1)]\nROW = [[]]\ntotal = 0\nfor i in range(1, N + 1):\n    (L, R) = list(map(int, input().strip().split(' ')))\n    ROW += [[L, R]]\n    total += R - L + 1\n    A[L] += 1\n    if R < N:\n        A[R + 1] -= 1\ntotal %= 2\nCol = []\ntemp = 0\nfor i in range(N + 1):\n    temp += A[i]\n    Col += [temp % 2]\nQ = int(input())\nfor _ in range(Q):\n    (x, y) = list(map(int, input().strip().split(' ')))\n    temp = 0\n    (L, R) = ROW[x]\n    if y >= L and y <= R:\n        temp = 1\n    ans = total - (R - L + 1) - Col[y] + temp\n    ans %= 2\n    if ans == 0:\n        print('E')\n    else:\n        print('O')", "from itertools import accumulate\nn = int(input())\ns = 0\nrs = [0] * n\ncs = [0] * (n + 1)\nfor i in range(n):\n    (l, r) = map(int, input().split())\n    l -= 1\n    cs[l] += 1\n    cs[r] -= 1\n    rs[i] = (l, r)\n    s ^= r - l\ncs = list(accumulate(cs))\nfor _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    i -= 1\n    j -= 1\n    (l, r) = rs[i]\n    ans = s\n    ans ^= r - l\n    ans ^= 1 if l <= j < r else 0\n    ans ^= cs[j]\n    print('O' if ans % 2 == 1 else 'E')", "read = lambda : map(int, input().split())\n(n,) = read()\nrow = [0] * n\ncol = [0] * (n + 1)\nsegm = [None] * n\ntotal = 0\nfor i in range(n):\n    (l, r) = read()\n    l -= 1\n    segm[i] = (l, r)\n    row[i] = r - l & 1\n    col[l] ^= 1\n    col[r] ^= 1\n    total ^= r - l & 1\nfor i in range(1, n):\n    col[i] ^= col[i - 1]\n(q,) = read()\nfor _ in range(q):\n    (r, c) = read()\n    r -= 1\n    c -= 1\n    ret = total ^ row[r] ^ col[c] ^ (1 if segm[r][0] <= c < segm[r][1] else 0)\n    print('O' if ret == 1 else 'E')"]