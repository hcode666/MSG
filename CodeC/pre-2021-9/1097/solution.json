["from collections import deque\nn = int(input())\nq1 = deque()\nres = 1\n\ndef helper(left1, right1, left2, right2):\n    (temp1, temp2) = (max(left1, left2), min(right1, right2))\n    if temp1 > right1 or temp1 > right2 or temp2 < left1 or (temp2 < left2):\n        return None\n    return (temp1, temp2)\nfor i in range(n):\n    (left, right) = map(int, input().split())\n    q2 = deque()\n    while q1 and (q1[0][0][0] < left or q1[0][0][1] > right):\n        top = q1.pop()\n        (temp1, temp2) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = i - 1 - top[1] + 1\n        res = max(res, min(width, height))\n        values = helper(left, right, temp1, temp2)\n        if eval is not None:\n            q2.append((values, top[1]))\n    while q2:\n        top = q2.pop()\n        if top[0][1] - top[0][0] + 1 > res:\n            q1.append(top)\n    if not q1 or not (q1[-1][0][0] == left and q1[-1][0][1] == right):\n        if right - left + 1 > res:\n            q1.append(((left, right), i))\nwhile q1:\n    top = q1.pop()\n    (temp1, temp2) = top[0]\n    (height, width) = (n - top[1], temp2 - temp1 + 1)\n    res = max(res, min(height, width))\nprint(res)", "from collections import deque\nn = int(input())\nq1 = deque()\nres = 1\n\ndef helper(left1, right1, left2, right2):\n    (temp1, temp2) = (max(left1, left2), min(right1, right2))\n    if temp1 > right1 or temp1 > right2 or temp2 < left1 or (temp2 < left2):\n        return None\n    return (temp1, temp2)\nfor i in range(n):\n    (left, right) = map(int, input().split())\n    q2 = deque()\n    while q1 and (q1[0][0][0] < left or q1[0][0][1] > right):\n        top = q1.pop()\n        (temp1, temp2) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = i - 1 - top[1] + 1\n        res = max(res, min(width, height))\n        values = helper(left, right, temp1, temp2)\n        if eval is not None:\n            q2.append((values, top[1]))\n    while q2:\n        top = q2.pop()\n        if top[0][1] - top[0][0] + 1 > res:\n            q1.append(top)\n    if not q1 or not (q1[-1][0][0] == left and q1[-1][0][1] == right):\n        if right - left + 1 > res:\n            q1.append(((left, right), i))\nwhile q1:\n    top = q1.pop()\n    (temp1, temp2) = top[0]\n    (height, width) = (n - top[1], temp2 - temp1 + 1)\n    res = max(res, min(height, width))\nprint(res)", "from collections import deque\nn = int(input())\nq1 = deque()\nres = 1\n\ndef helper(left1, right1, left2, right2):\n    (temp1, temp2) = (max(left1, left2), min(right1, right2))\n    if temp1 > right1 or temp1 > right2 or temp2 < left1 or (temp2 < left2):\n        return None\n    return (temp1, temp2)\nfor i in range(n):\n    (left, right) = map(int, input().split())\n    q2 = deque()\n    while q1 and (q1[0][0][0] < left or q1[0][0][1] > right):\n        top = q1.pop()\n        (temp1, temp2) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = i - 1 - top[1] + 1\n        res = max(res, min(width, height))\n        values = helper(left, right, temp1, temp2)\n        if eval is not None:\n            q2.append((values, top[1]))\n    while q2:\n        top = q2.pop()\n        if top[0][1] - top[0][0] + 1 > res:\n            q1.append(top)\n    if not q1 or not (q1[-1][0][0] == left and q1[-1][0][1] == right):\n        if right - left + 1 > res:\n            q1.append(((left, right), i))\nwhile q1:\n    top = q1.pop()\n    (temp1, temp2) = top[0]\n    (height, width) = (n - top[1], temp2 - temp1 + 1)\n    res = max(res, min(height, width))\nprint(res)", "from collections import deque\nn = int(input())\nq1 = deque()\nres = 1\n\ndef helper(left1, right1, left2, right2):\n    (temp1, temp2) = (max(left1, left2), min(right1, right2))\n    if temp1 > right1 or temp1 > right2 or temp2 < left1 or (temp2 < left2):\n        return None\n    return (temp1, temp2)\nfor i in range(n):\n    (left, right) = map(int, input().split())\n    q2 = deque()\n    while q1 and (q1[0][0][0] < left or q1[0][0][1] > right):\n        top = q1.pop()\n        (temp1, temp2) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = i - 1 - top[1] + 1\n        res = max(res, min(width, height))\n        values = helper(left, right, temp1, temp2)\n        if eval is not None:\n            q2.append((values, top[1]))\n    while q2:\n        top = q2.pop()\n        if top[0][1] - top[0][0] + 1 > res:\n            q1.append(top)\n    if not q1 or not (q1[-1][0][0] == left and q1[-1][0][1] == right):\n        if right - left + 1 > res:\n            q1.append(((left, right), i))\nwhile q1:\n    top = q1.pop()\n    (temp1, temp2) = top[0]\n    (height, width) = (n - top[1], temp2 - temp1 + 1)\n    res = max(res, min(height, width))\nprint(res)", "from collections import deque\nn = int(input())\nq1 = deque()\nres = 1\n\ndef helper(left1, right1, left2, right2):\n    (temp1, temp2) = (max(left1, left2), min(right1, right2))\n    if temp1 > right1 or temp1 > right2 or temp2 < left1 or (temp2 < left2):\n        return None\n    return (temp1, temp2)\nfor i in range(n):\n    (left, right) = map(int, input().split())\n    q2 = deque()\n    while q1 and (q1[-1][0][0] < left or q1[-1][0][1] > right):\n        top = q1.pop()\n        (temp1, temp2) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = i - 1 - top[1] + 1\n        res = max(res, min(width, height))\n        values = helper(left, right, temp1, temp2)\n        if eval is not None:\n            q2.append((values, top[1]))\n    while q2:\n        top = q2.pop()\n        if top[0][1] - top[0][0] + 1 > res:\n            q1.append(top)\n    if not q1 or not (q1[-1][0][0] == left and q1[-1][0][1] == right):\n        if right - left + 1 > res:\n            q1.append(((left, right), i))\nwhile q1:\n    top = q1.pop()\n    (temp1, temp2) = top[0]\n    (height, width) = (n - top[1], temp2 - temp1 + 1)\n    res = max(res, min(height, width))\nprint(res)", "from collections import deque\nn = int(input())\nq1 = deque()\nres = 1\n\ndef helper(left1, right1, left2, right2):\n    (temp1, temp2) = (max(left1, left2), min(right1, right2))\n    if temp1 > right1 or temp1 > right2 or temp2 < left1 or (temp2 < left2):\n        return None\n    return (temp1, temp2)\nfor i in range(n):\n    (left, right) = map(int, input().split())\n    q2 = deque()\n    while q1 and (q1[-1][0][0] < left or q1[-1][0][1] > right):\n        top = q1.pop()\n        (temp1, temp2) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = i - 1 - top[1] + 1\n        res = max(res, min(width, height))\n        values = helper(left, right, temp1, temp2)\n        if eval is not None:\n            q2.append((values, top[1]))\n    while q2:\n        top = q2.pop()\n        if top[0][1] - top[0][0] + 1 > res:\n            q1.append(top)\n    if not q1 or not (q1[-1][0][0] == left and q1[-1][0][1] == right):\n        if right - left + 1 > res:\n            q1.append(((left, right), i))\nwhile q1:\n    top = q1.pop()\n    (temp1, temp2) = top[0]\n    (height, width) = (n - top[1], temp2 - temp1 + 1)\n    res = max(res, min(height, width))\nprint(res)", "from collections import deque\nrows = int(input())\nstk = deque()\nans = 1\n\ndef overlap(l1, r1, l2, r2):\n    (x, y) = (max(l1, l2), min(r1, r2))\n    if x > r1 or x > r2 or y < l1 or (y < l2):\n        return None\n    return (x, y)\nfor j in range(rows):\n    (lt, rt) = map(int, input().split())\n    stkb = deque()\n    while stk and (stk[-1][0][0] < lt or stk[-1][0][1] > rt):\n        top = stk.pop()\n        (x, y) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = j - 1 - top[1] + 1\n        ans = max(ans, min(width, height))\n        eval = overlap(lt, rt, x, y)\n        if eval is not None:\n            stkb.append((eval, top[1]))\n    while stkb:\n        top = stkb.pop()\n        if top[0][1] - top[0][0] + 1 > ans:\n            stk.append(top)\n    if not stk or not (stk[-1][0][0] == lt and stk[-1][0][1] == rt):\n        if rt - lt + 1 > ans:\n            stk.append(((lt, rt), j))\nwhile stk:\n    top = stk.pop()\n    (x, y) = top[0]\n    (height, width) = (rows - top[1], y - x + 1)\n    ans = max(ans, min(height, width))\nprint(ans)", "from collections import deque\nrows = int(input())\nstk = deque()\nans = 1\n\ndef overlapArea(l1, r1, l2, r2):\n    (x, y) = (max(l1, l2), min(r1, r2))\n    if x > r1 or x > r2 or y < l1 or (y < l2):\n        return None\n    return (x, y)\nfor j in range(rows):\n    (lt, rt) = map(int, input().split())\n    stkb = deque()\n    while stk and (stk[-1][0][0] < lt or stk[-1][0][1] > rt):\n        top = stk.pop()\n        (x, y) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = j - 1 - top[1] + 1\n        ans = max(ans, min(width, height))\n        sol = overlapArea(lt, rt, x, y)\n        if sol is not None:\n            stkb.append((sol, top[1]))\n    while stkb:\n        top = stkb.pop()\n        if top[0][1] - top[0][0] + 1 > ans:\n            stk.append(top)\n    if not stk or not (stk[-1][0][0] == lt and stk[-1][0][1] == rt):\n        if rt - lt + 1 > ans:\n            stk.append(((lt, rt), j))\nwhile stk:\n    top = stk.pop()\n    (x, y) = top[0]\n    (height, width) = (rows - top[1], y - x + 1)\n    ans = max(ans, min(height, width))\nprint(ans)", "from collections import deque\nrows = int(input())\nstk = deque()\nans = 1\n\ndef overlap(l1, r1, l2, r2):\n    (x, y) = (max(l1, l2), min(r1, r2))\n    if x > r1 or x > r2 or y < l1 or (y < l2):\n        return None\n    return (x, y)\nfor j in range(rows):\n    (lt, rt) = map(int, input().split())\n    stkb = deque()\n    while stk and (stk[-1][0][0] < lt or stk[-1][0][1] > rt):\n        top = stk.pop()\n        (x, y) = top[0]\n        width = top[0][1] - top[0][0] + 1\n        height = j - 1 - top[1] + 1\n        ans = max(ans, min(width, height))\n        eval = overlap(lt, rt, x, y)\n        if eval is not None:\n            stkb.append((eval, top[1]))\n    while stkb:\n        top = stkb.pop()\n        if top[0][1] - top[0][0] + 1 > ans:\n            stk.append(top)\n    if not stk or not (stk[-1][0][0] == lt and stk[-1][0][1] == rt):\n        if rt - lt + 1 > ans:\n            stk.append(((lt, rt), j))\nwhile stk:\n    top = stk.pop()\n    (x, y) = top[0]\n    (height, width) = (rows - top[1], y - x + 1)\n    ans = max(ans, min(height, width))\nprint(ans)"]