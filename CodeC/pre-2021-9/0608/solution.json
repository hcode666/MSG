["f = [1, 2]\nfor i in range(2, 90):\n    f.append(f[i - 1] + f[i - 2])\nfor i in range(int(input())):\n    (x, ind) = (int(input()), 0)\n    for j in range(len(f)):\n        if f[j] > x:\n            ind = j\n            break\n    print(ind)", "f = [1, 2]\nfor i in range(2, 90):\n    f.append(f[i - 1] + f[i - 2])\nfor i in range(int(input())):\n    (x, ind) = (int(input()), 0)\n    for j in range(len(f)):\n        if f[j] > x:\n            ind = j\n            break\n    print(ind)", "fib = [1, 1]\nfor i in range(100):\n    fib.append(fib[-1] + fib[-2])\nfrom bisect import bisect_left as bl\nfor _ in range(int(input())):\n    n = int(input())\n    ind = bl(fib, n)\n    if n == 1:\n        print(1)\n    else:\n        i = 0\n        while i < 100 and fib[i] <= n:\n            ans = fib[i]\n            i += 1\n        print(i - 1)", "fib = [1, 1]\nfor i in range(100):\n    fib.append(fib[-1] + fib[-2])\nfrom bisect import bisect_left as bl\nfor _ in range(int(input())):\n    n = int(input())\n    ind = bl(fib, n)\n    if n == 1:\n        print(1)\n    else:\n        i = 0\n        while i < 100 and fib[i] <= n:\n            ans = fib[i]\n            i += 1\n        print(i - 1)", "f = [0, 1]\nwhile f[-1] <= 10 ** 20:\n    f.append(f[-1] + f[-2])\nfor c in range(int(input())):\n    n = int(input())\n    c = 1\n    while f[c + 2] <= n:\n        c += 1\n    print(c)", "a = int(input())\nd = []\nfor i in range(a):\n    b = int(input())\n    c = 1\n    m = 1\n    i = 1\n    while c < b:\n        i += 1\n        n = c + 1\n        c += m\n        m = n\n    d.append(i)\nfor i in range(a):\n    print(d[i])", "a = int(input())\nd = []\nfor i in range(a):\n    b = int(input())\n    c = 1\n    m = 1\n    i = 1\n    while c < b:\n        i += 1\n        n = c + 1\n        c += m\n        m = n\n    d.append(i)\nfor i in range(a):\n    print(d[i])", "a = int(input())\nd = []\nfor i in range(a):\n    b = int(input())\n    c = 1\n    m = 1\n    i = 1\n    while c < b:\n        i += 1\n        n = c + 1\n        c += m\n        m = n\n    d.append(i)\nfor i in range(a):\n    print(d[i])", "a = int(input())\nd = []\nfor i in range(a):\n    b = int(input())\n    c = 1\n    m = 1\n    i = 1\n    while c < b:\n        i += 1\n        n = c + 1\n        c += m\n        m = n\n    d.append(i)\nfor i in range(a):\n    print(d[i])", "a = int(input())\nd = []\nfor i in range(a):\n    b = int(input())\n    c = 1\n    m = 1\n    i = 1\n    while c < b:\n        i += 1\n        n = c + 1\n        c += m\n        m = n\n    d.append(i)\nfor i in range(a):\n    print(d[i])", "fib = [1, 1]\nfor i in range(100):\n    fib.append(fib[-1] + fib[-2])\nfrom bisect import bisect_left as bl\nfor _ in range(int(input())):\n    n = int(input())\n    ind = bl(fib, n)\n    if n == 1:\n        print(1)\n    else:\n        i = 0\n        while i < 100 and fib[i] <= n:\n            ans = fib[i]\n            i += 1\n        print(i - 1)", "import sys\ninput()\nfor i in sys.stdin:\n    i = int(i.rstrip())\n    fib = 2\n    (n1, n2) = (1, 1)\n    count = 1\n    while fib <= i:\n        (n1, n2) = (n2, fib)\n        fib = n1 + n2\n        count += 1\n    print(count)", "import sys\ninput()\nfor n in sys.stdin:\n    n = int(n.rstrip())\n    fib = 2\n    (n1, n2) = (1, 1)\n    count = 1\n    while fib <= n:\n        (n1, n2) = (n2, fib)\n        fib = n1 + n2\n        count += 1\n    print(count)", "fib = [1, 1]\nfor i in range(100):\n    fib.append(fib[-1] + fib[-2])\nfrom bisect import bisect_left as bl\nfor _ in range(int(input())):\n    n = int(input())\n    ind = bl(fib, n)\n    if n == 1:\n        print(1)\n    else:\n        i = 0\n        while i < 100 and fib[i] <= n:\n            ans = fib[i]\n            i += 1\n        print(i - 1)", "T = int(input())\nwhile T != 0:\n    N = int(input())\n    a = 1\n    b = 1\n    c = 1\n    counter = 0\n    while c <= N:\n        a = b\n        b = c\n        c = a + b\n        counter += 1\n    print(counter)\n    T -= 1", "Fib = [0, 1]\nfor i in range(100):\n    Fib.append(Fib[-1] + Fib[-2])\n\ndef solve():\n    n = int(input())\n    ans = 0\n    i = 0\n    while Fib[i + 2] <= n:\n        ans += 1\n        i += 1\n    print(ans)\nt = int(input())\nfor i in range(t):\n    solve()", "fibo = [1, 1]\nfor i in range(2, 100):\n    fibo.append(fibo[i - 1] + fibo[i - 2])\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    i = 0\n    while fibo[i] <= n:\n        i += 1\n    print(i - 1)", "import sys\n\ndef generate_fib(fib):\n    fib[1] = 1\n    fib[2] = 2\n    for i in range(3, len(fib)):\n        fib[i] = fib[i - 1] + fib[i - 2]\n    return\n\ndef solve(value, fib):\n    i = 1\n    while value > fib[i]:\n        i += 1\n    return i if fib[i] == value else i - 1\nT = int(input())\nfib = [0] * 100\ngenerate_fib(fib)\nfor i in range(T):\n    value = int(input())\n    print(solve(value, fib))", "f = [1, 2]\nfor i in range(2, 100):\n    f.append(f[i - 1] + f[i - 2])\nfor i in range(int(input())):\n    x = int(input())\n    ind = 0\n    for j in range(100):\n        if f[j] > x:\n            ind = j\n            break\n    print(ind)", "f = [1, 2]\nfor i in range(2, 90):\n    f.append(f[i - 1] + f[i - 2])\nfor i in range(int(input())):\n    (x, ind) = (int(input()), 0)\n    for j in range(len(f)):\n        if f[j] > x:\n            ind = j\n            break\n    print(ind)", "f = [1, 2]\nfor i in range(2, 100):\n    f.append(f[i - 1] + f[i - 2])\nfor i in range(int(input())):\n    (x, ind) = (int(input()), 0)\n    for j in range(len(f)):\n        if f[j] > x:\n            ind = j\n            break\n    print(j)", "T = int(input().strip())\n\ndef gen_fib(N):\n    if N <= 3:\n        return N\n    else:\n        fib = []\n        fib.append(0)\n        fib.append(1)\n        fib.append(2)\n        i = 2\n        while fib[i] <= N:\n            fib.append(fib[i] + fib[i - 1])\n            i += 1\n        return i - 1\nwhile T > 0:\n    N = int(input().strip())\n    print(gen_fib(N))\n    T -= 1", "def fib(n):\n    a = 0\n    b = 1\n    ctr = 1\n    sm = a + b\n    s = 0\n    while 1:\n        s += sm\n        if n <= s:\n            print(ctr)\n            break\n        sm = a + b\n        a = b\n        b = sm\n        ctr += 1\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    fib(n)\n    t -= 1", "list = [1, 2]\nfor i in range(90):\n    list.append(list[i] + list[i + 1])\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    j = 0\n    while list[j] <= n:\n        j += 1\n    print(j)", "num = int(input())\narr = [0] * num\nfor i in range(num):\n    arr[i] = int(input())\nmaxx = max(arr)\nfib = []\nfib.append(1)\na = 1\nb = 1\nc = 2\nwhile c <= maxx:\n    fib.append(c)\n    a = b\n    b = c\n    c = a + b\nfib.append(c)\nfor i in range(num):\n    x = arr[i]\n    j = 0\n    while fib[j] <= x:\n        j += 1\n    print(j)", "num = int(input())\narr = [0] * num\nfor i in range(num):\n    arr[i] = int(input())\nmaxx = max(arr)\nfib = []\nfib.append(1)\na = 1\nb = 1\nc = 2\nwhile c <= maxx:\n    fib.append(c)\n    a = b\n    b = c\n    c = a + b\nfib.append(c)\nfor i in range(num):\n    x = arr[i]\n    j = 0\n    while fib[j] <= x:\n        j += 1\n    print(j)", "for _ in range(int(input())):\n    n = int(input())\n    if n < 3:\n        k = n\n    else:\n        f1 = 1\n        f2 = 2\n        k = 2\n        while True:\n            f3 = f1 + f2\n            k += 1\n            if n < f3 + f2:\n                break\n            f1 = f2\n            f2 = f3\n    print(k)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    elif n == 2:\n        print(2)\n        continue\n    else:\n        count = 2\n        (a, b, c) = (1, 2, 3)\n        while a + b <= n:\n            count += 1\n            (a, b) = (b, a + b)\n        print(count)", "import sys\nimport math\n\ndef cannot_be_written(num, base):\n    bool = True\n    basis_used = len(base) - 1\n    if basis_used > 0:\n        biggest_possible = base[basis_used]\n        num -= biggest_possible\n        while num > 0 and basis_used > 0:\n            basis_used -= 1\n            try_subtracting = True\n            while try_subtracting and basis_used > 0:\n                basis_used -= 1\n                biggest_possible = base[basis_used]\n                try_subtracting = num - biggest_possible < 0\n            if basis_used >= 0:\n                num -= biggest_possible\n        bool = num != 0\n    return bool\n\ndef n_cards_for(int_n):\n    base = []\n    for num in range(int_n):\n        num += 1\n        if cannot_be_written(num, base):\n            base.append(num)\n    n_cards = len(base)\n    return n_cards\n\ndef main():\n    lines = sys.stdin.readlines()\n    n_cases = int(lines[0])\n    for i in range(n_cases):\n        line = lines[i + 1]\n        int_n = int(line)\n        n_cards = n_cards_for(int_n)\n        print(n_cards, end='\\n')\n\ndef fibonacci_up_to_pow_long(pow_of_ten):\n    series = [0]\n    new_n = 1\n    series.append(new_n)\n    max_lim = 10 ** pow_of_ten\n    while new_n < max_lim:\n        new_n = series[-1] + series[-2]\n        series.append(new_n)\n    return series\n\ndef n_cards_fibo_long(int_n, fibo_series):\n    n_cards = 0\n    for (n_cards, fibo_int) in enumerate(fibo_series):\n        if fibo_int > int_n:\n            break\n    return n_cards - 2\n\ndef fibonacci_up_to_pow_str(pow_of_ten):\n    series = []\n    return series\n\ndef n_cards_fibo_str(int_n, fibo_series):\n    n_cards = 0\n    return n_cards\n\ndef main_fibo():\n    lines = sys.stdin.readlines()\n    n_cases = int(lines[0])\n    fibo_series_long = fibonacci_up_to_pow_long(38)\n    for i in range(n_cases):\n        int_str = lines[i + 1]\n        int_long = int(int_str)\n        n_cards = n_cards_fibo_long(int_long, fibo_series_long)\n        print(n_cards, end='\\n')\nmain_fibo()", "me_list = []\na = 1\nb = 1\nwhile a <= pow(10, 18):\n    (a, b) = (b, a + b)\n    me_list.append(a)\nT = int(input())\nwhile T:\n    N = int(input())\n    count = 0\n    if N == 1:\n        print(1)\n    else:\n        for i in me_list:\n            if N < i:\n                break\n            else:\n                count = count + 1\n        print(count)\n    T = T - 1", "numbers = [1, 2]\nnum = 0\nwhile num < pow(10, 19):\n    num = numbers[-1] + numbers[-2]\n    numbers.append(num)\nl = int(input())\nfor i in range(l):\n    num = int(input())\n    for (index, fib) in enumerate(numbers):\n        if fib > num:\n            print(index)\n            break", "class MatrixFibonacci:\n    Q = [[1, 1], [1, 0]]\n\n    def __init__(self):\n        self.__memo = {}\n\n    def __multiply_matrices(self, M1, M2):\n        a11 = M1[0][0] * M2[0][0] + M1[0][1] * M2[1][0]\n        a12 = M1[0][0] * M2[0][1] + M1[0][1] * M2[1][1]\n        a21 = M1[1][0] * M2[0][0] + M1[1][1] * M2[1][0]\n        a22 = M1[1][0] * M2[0][1] + M1[1][1] * M2[1][1]\n        r = [[a11, a12], [a21, a22]]\n        return r\n\n    def __get_matrix_power(self, M, p):\n        if p == 1:\n            return M\n        if p in self.__memo:\n            return self.__memo[p]\n        K = self.__get_matrix_power(M, int(p / 2))\n        R = self.__multiply_matrices(K, K)\n        self.__memo[p] = R\n        return R\n\n    def get_number(self, n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        powers = [int(pow(2, b)) for (b, d) in enumerate(reversed(bin(n - 1)[2:])) if d == '1']\n        matrices = [self.__get_matrix_power(MatrixFibonacci.Q, p) for p in powers]\n        while len(matrices) > 1:\n            M1 = matrices.pop()\n            M2 = matrices.pop()\n            R = self.__multiply_matrices(M1, M2)\n            matrices.append(R)\n        return matrices[0][0][0]\nmfib = MatrixFibonacci()\nnumbers = []\nnum = 1\ncount = 3\nwhile num < pow(10, 19):\n    numbers.append(num)\n    num = mfib.get_number(count)\n    count += 1\nl = int(input())\nfor i in range(l):\n    num = int(input())\n    for (index, fib) in enumerate(numbers):\n        if fib > num:\n            print(index)\n            break", "t = int(input())\nif 1 <= t <= 10 ** 6:\n    for i in range(0, t, 1):\n        n = int(input())\n        if 1 <= n <= 10 ** 18:\n            sum = 0\n            a = 0\n            b = 1\n            c = 0\n            while sum < n:\n                c = c + 1\n                sum = sum + b\n                temp = b\n                b = b + a\n                a = temp\n            print(c)", "HemC = [1, 1]\ni = 2\nSIZE = 10 ** 18 + 1\nwhile HemC[i - 1] < SIZE:\n    HemC.append(HemC[i - 1] + HemC[i - 2])\n    i += 1\nN = i\n\ndef lookup(x):\n    ans = 0\n    while HemC[ans] <= x:\n        ans += 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    ans = lookup(n) - 1\n    print(ans)", "HemC = [1, 1]\ni = 2\nSIZE = 10 ** 18 + 1\nwhile HemC[i - 1] < SIZE:\n    HemC.append(HemC[i - 1] + HemC[i - 2])\n    i += 1\nN = i\n\ndef lookup(x):\n    ans = 0\n    while HemC[ans] <= x:\n        ans += 1\n    return ans\nfor i in range(int(input())):\n    n = int(input())\n    if n < 2:\n        ans = 1\n    else:\n        ans = lookup(n) - 1\n    print(ans)", "d = {-1: 0, 0: 1}\nc = 1\nf = 1\nwhile f <= 10 ** 18:\n    f = d[c - 1] + d[c - 2]\n    d[c] = f\n    c += 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    c = 1\n    while d[c] <= n:\n        c += 1\n    print(c - 1)", "n = int(input())\nfor x in range(n):\n    num = int(input())\n    x = 0\n    p = 1\n    t = p + x\n    k = -1\n    while t <= num:\n        t = p + x\n        x = p\n        p = t\n        k += 1\n    print(k)", "from math import log, sqrt\nfib = [0] * 100\nfib[0] = 0\nfib[1] = 1\nfib[2] = 2\nfor i in range(3, 93):\n    fib[i] = fib[i - 1] + fib[i - 2]\nfor i in range(int(input())):\n    n = int(input())\n    for j in range(100):\n        if fib[j] > n:\n            print(j - 1)\n            break\n        elif fib[j] == n:\n            print(j)\n            break", "def fibonacci():\n    for n in range(4, 90):\n        ans = 0\n        ans = int(L[n - 2] + L[n - 3])\n        L.append(ans)\n\ndef findAns(n):\n    i = 1\n    if n < 4:\n        return n\n    while L[i + 1] < n and i < 90:\n        i += 1\n        if L[i + 1] == n:\n            i += 1\n    return i + 1\nT = int(input(''))\nL = [1, 2, 3]\nfibonacci()\nfor i in range(T):\n    n = int(input(''))\n    print(findAns(n))", "import math\nn = int(input())\nwhile n != 0:\n    n -= 1\n    ip = int(input())\n    if ip == 1:\n        print('1')\n        continue\n    elif ip == 2:\n        print('2')\n        continue\n    f = 1\n    s = 2\n    ans = 2\n    t = f + s\n    while ip >= t:\n        f = s\n        s = t\n        t = f + s\n        ans += 1\n    print(ans)", "theFibSeries = [1, 2]\nwhile theFibSeries[-1] < 10 ** 20:\n    theFibSeries.append(theFibSeries[-1] + theFibSeries[-2])\ntCase = int(input())\nfor times in range(tCase):\n    theNumTObeTested = int(input())\n    thepossiblesolution = 0\n    while theFibSeries[thepossiblesolution] <= theNumTObeTested:\n        thepossiblesolution += 1\n    print(thepossiblesolution)", "def slv(n):\n    f1 = 1\n    f2 = 2\n    order = 2\n    while f2 < n:\n        (f2, f1) = (f1 + f2, f2)\n        order += 1\n    if n < 2:\n        return n\n    if f2 > n:\n        return order - 1\n    else:\n        return order\nntest = int(input())\nfor t in range(ntest):\n    n = int(input())\n    print(slv(n))", "t = int(input())\nfor it in range(t):\n    n = int(input())\n    s1 = 1\n    s2 = 2\n    count = 2\n    while n >= s1 + s2:\n        count += 1\n        t = s2\n        s2 = s1 + s2\n        s1 = t\n    if n == 1:\n        print(n)\n    else:\n        print(count)", "t = int(input(''))\na = [1, 2]\ni = 1\nwhile a[i] <= 10 ** 18:\n    a.append(a[i] + a[i - 1])\n    i += 1\nfor i in range(t):\n    n = int(input(''))\n    j = 0\n    while j < len(a):\n        if a[j] == n:\n            print(j + 1)\n            break\n        elif a[j] > n:\n            print(j)\n            break\n        j += 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    c = 0\n    b = 1\n    m = 1\n    while m <= n:\n        u = m\n        m = m + b\n        b = u\n        c += 1\n    print(c)\n    t = t - 1", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    i = 1\n    k = 1\n    l = 2\n    j = 1\n    while l <= n:\n        i = k\n        k = l\n        l = i + k\n        j = j + 1\n    print(j)\n    t = t - 1", "from math import floor, log, sqrt, ceil\nphi = (1 + sqrt(5)) / 2\n\ndef f(n):\n    a = [1, 2]\n    while True:\n        if a[-2] <= n < a[-1]:\n            return len(a) - 1\n        else:\n            a.append(a[-1] + a[-2])\nfor test in range(int(input())):\n    print(f(int(input())))", "fib = [0]\n(a, b) = (1, 1)\nwhile b < 10 ** 19:\n    fib.append(b)\n    (a, b) = (b, a + b)\nfor t in range(int(input())):\n    n = int(input())\n    for i in range(len(fib)):\n        if fib[i] >= n:\n            if fib[i] == n:\n                print(i)\n            else:\n                print(i - 1)\n            break", "a = [0, 1]\nfor i in range(2, 89):\n    temp = a[i - 1] + a[i - 2]\n    a.append(temp)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n == 1 or n == 2:\n        print(n)\n    else:\n        for j in range(3, 87):\n            if n + 1 <= a[j + 2]:\n                print(j)\n                break", "def relsearch(a, x, p=0, reverse=False):\n    l = len(a)\n    if l == 0:\n        return 0\n    if l == 1:\n        if x < a[0]:\n            return 0\n        else:\n            return 1\n    else:\n        i = l // 2\n        if a[i - 1] <= x and a[i] > x:\n            return i\n        elif not a[i - 1] <= x:\n            return relsearch(a[:i], x, p)\n        else:\n            return i + relsearch(a[i:], x, i)\nimport sys\ninput = sys.stdin.readline\nf = [1, 2]\nwhile f[-1] <= 10 ** 18:\n    f.append(f[-1] + f[-2])\ntests = int(input())\nfor t in range(tests):\n    print(relsearch(f, int(input())))", "A = [0, 1, 2, 4, 7, 12, 20, 33, 54, 88, 143, 232, 376, 609, 986, 1596, 2583, 4180, 6764, 10945, 17710, 28656, 46367, 75024, 121392, 196417, 317810, 514228, 832039, 1346268, 2178308, 3524577, 5702886, 9227464, 14930351, 24157816, 39088168, 63245985, 102334154, 165580140, 267914295, 433494436, 701408732, 1134903169, 1836311902, 2971215072, 4807526975, 7778742048, 12586269024, 20365011073, 32951280098, 53316291172, 86267571271, 139583862444, 225851433716, 365435296161, 591286729878, 956722026040, 1548008755919, 2504730781960, 4052739537880, 6557470319841, 10610209857722, 17167680177564, 27777890035287, 44945570212852, 72723460248140, 117669030460993, 190392490709134, 308061521170128, 498454011879263, 806515533049392, 1304969544928656, 2111485077978049, 3416454622906706, 5527939700884756, 8944394323791463, 14472334024676220, 23416728348467684, 37889062373143905, 61305790721611590, 99194853094755496, 160500643816367087, 259695496911122584, 420196140727489672, 679891637638612257, 1100087778366101930, 1779979416004714188, 2880067194370816119]\na = int(input())\nwhile a > 0:\n    a -= 1\n    b = int(input())\n    c = 0\n    for i in range(1, 89):\n        if b <= A[i]:\n            c = i\n            break\n    print(c)", "arr = [1, 1]\nuplim = 10 ** 18\nwhile arr[-1] <= uplim:\n    arr.append(arr[-1] + arr[-2])\nimport bisect\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    x = bisect.bisect(arr, n) - 1\n    print(x)", "import math\nseries = []\na = 0\nsum = 1\nwhile sum < 1000000000000000000:\n    temp = a + sum\n    a = sum\n    sum = temp\n    series.append(sum)\nt = int(input())\nfor it in range(t):\n    n = int(input())\n    for i in range(len(series)):\n        if n == series[i]:\n            i = i + 1\n            break\n        elif n < series[i]:\n            break\n    print(i)", "from math import log\nphi = (1 + 5 ** 0.5) / 2\n\ndef fibinv(f):\n    if f < 2:\n        return f\n    return int(round(log(f * 5 ** 0.5) / log(phi)))\n\ndef mul(A, B):\n    (a, b, c) = A\n    (d, e, f) = B\n    return (a * d + b * e, a * e + b * f, b * e + c * f)\n\ndef pow(A, n):\n    if n == 1:\n        return A\n    if n & 1 == 0:\n        return pow(mul(A, A), n // 2)\n    else:\n        return mul(A, pow(mul(A, A), (n - 1) // 2))\n\ndef fib(n):\n    if n < 2:\n        return n\n    return pow((1, 1, 0), n - 1)[0]\n\nclass MagicTrick(object):\n\n    def GetMinCards2(self, N):\n        if N == 1:\n            return 1\n        steps = fibinv(N)\n        exact_fib = fib(steps)\n        while exact_fib > N:\n            steps -= 1\n            exact_fib = fib(steps)\n        return steps - 1\n\ndef main():\n    magic_trick = MagicTrick()\n    T = int(input())\n    results = []\n    for t in range(T):\n        N = int(input())\n        result2 = magic_trick.GetMinCards2(N)\n        results.append(result2)\n    for t in range(T):\n        print(results[t])\nmain()", "from math import log\nphi = (1 + 5 ** 0.5) / 2\n\ndef fibinv(f):\n    if f < 2:\n        return f\n    return int(round(log(f * 5 ** 0.5) / log(phi)))\n\ndef mul(A, B):\n    (a, b, c) = A\n    (d, e, f) = B\n    return (a * d + b * e, a * e + b * f, b * e + c * f)\n\ndef pow(A, n):\n    if n == 1:\n        return A\n    if n & 1 == 0:\n        return pow(mul(A, A), n // 2)\n    else:\n        return mul(A, pow(mul(A, A), (n - 1) // 2))\n\ndef fib(n):\n    if n < 2:\n        return n\n    return pow((1, 1, 0), n - 1)[0]\n\nclass MagicTrick(object):\n\n    def __init__(self):\n        self._cards = [1, 2]\n        self._min_cards = {}\n        self._min_cards[1] = 1\n        self._min_cards[2] = 2\n\n    def GetMinCards(self, N):\n        if N in self._min_cards:\n            return self._min_cards[N]\n        last_card = self._cards[len(self._cards) - 1]\n        second_last_card = self._cards[len(self._cards) - 2]\n        new_card = last_card + second_last_card\n        while new_card <= N:\n            for n in range(new_card, last_card + new_card):\n                self._min_cards[n] = len(self._cards) + 1\n            self._cards.append(new_card)\n            second_last_card = last_card\n            last_card = new_card\n            new_card = last_card + second_last_card\n        return self._min_cards[N]\n\n    def GetMinCards2(self, N):\n        if N == 1:\n            return 1\n        steps = fibinv(N)\n        exact_fib = fib(steps)\n        while exact_fib > N:\n            steps -= 1\n            exact_fib = fib(steps)\n        return steps - 1\n\ndef main():\n    magic_trick = MagicTrick()\n    T = int(input())\n    results = []\n    for t in range(T):\n        N = int(input())\n        result2 = magic_trick.GetMinCards2(N)\n        results.append(result2)\n    for t in range(T):\n        print(results[t])\nmain()", "fib = [1, 2]\nwhile fib[len(fib) - 1] < 10 ** 18:\n    i = len(fib)\n    fib.append(fib[i - 1] + fib[i - 2])\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    index = 0\n    while fib[index] <= n:\n        index += 1\n    print(index)", "a = []\na.append(1)\na.append(1)\na.append(2)\nfor i in range(3, 90):\n    a.append(a[i - 1] + a[i - 2])\nfor i in range(int(input())):\n    n = int(input())\n    for i in range(1, 90):\n        if a[i] >= n:\n            break\n    if a[i] == n:\n        print(i)\n    else:\n        print(i - 1)", "def allfib(n):\n    a = 1\n    b = 2\n    arr = [1, 2]\n    c = 0\n    while c < n:\n        c = a + b\n        arr.append(c)\n        a = b\n        b = c\n    return arr\nt = int(input())\narr = allfib(pow(10, 18) + 1)\nfor i in range(1, t + 1):\n    n = int(input())\n    i = 0\n    while arr[i] <= n:\n        i += 1\n    print(i)", "import functools\nfrom math import sqrt\n\ndef fib(n):\n    a = b = 1\n    for i in range(n):\n        yield a\n        (a, b) = (b, a + b)\n\ndef main():\n    t = int(input())\n    min_cards = []\n    fibs = list(fib(90))\n    for n in range(t):\n        num = int(input())\n        if num in fibs and num != 1:\n            min_cards.append(fibs.index(num))\n        elif num == 1:\n            min_cards.append(1)\n        else:\n            card = next((x[0] for x in enumerate(fibs) if x[1] > num))\n            min_cards.append(card - 1)\n    print(*min_cards, sep='\\n')\nmain()", "import math\nfib = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887, 9227465, 14930352, 24157817, 39088169, 63245986, 102334155, 165580141, 267914296, 433494437, 701408733, 1134903170, 1836311903, 2971215073, 4807526976, 7778742049, 12586269025, 20365011074, 32951280099, 53316291173, 86267571272, 139583862445, 225851433717, 365435296162, 591286729879, 956722026041, 1548008755920, 2504730781961, 4052739537881, 6557470319842, 10610209857723, 17167680177565, 27777890035288, 44945570212853, 72723460248141, 117669030460994, 190392490709135, 308061521170129, 498454011879264, 806515533049393, 1304969544928657, 2111485077978050, 3416454622906707, 5527939700884757, 8944394323791464, 14472334024676221, 23416728348467685, 37889062373143906, 61305790721611591, 99194853094755497, 160500643816367088, 259695496911122585, 420196140727489673, 679891637638612258, 1100087778366101931]\nfor T in range(int(input())):\n    n = int(input())\n    for i in range(len(fib)):\n        if fib[i] > n:\n            print(i)\n            break", "l = [1, 2]\n\ndef calc(n):\n    if n <= l[-1]:\n        i = -1\n        while n < l[i]:\n            i -= 1\n        return i + len(l) + 1\n    else:\n        while n > l[-1]:\n            l.append(l[-2] + l[-1])\n        return calc(n)\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    ans = calc(n)\n    print(ans)\n    t -= 1", "fib = [1, 2]\ni = 1\nwhile fib[i] <= 10 ** 18:\n    fib.append(fib[i] + fib[i - 1])\n    i += 1\n\ndef search(x):\n    for i in range(len(fib) - 1):\n        if fib[i] <= x < fib[i + 1]:\n            return i\n    return len(fib) - 1\nfor tests in range(int(input())):\n    n = int(input())\n    print(1 + search(n))"]