["def check(arr, x, k, c):\n    vec = [[] for i in range(x)]\n    l = 0\n    for i in range(n):\n        if len(vec[l]) == k:\n            return True\n        elif len(vec[l]) == 0 or vec[l][-1] * c <= arr[i]:\n            vec[l].append(arr[i])\n            l = (l + 1) % x\n    for i in range(x):\n        if len(vec[i]) != k:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (n, k, c) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    (l, h) = (0, n // k + 1)\n    ans = 0\n    while h - l > 1:\n        mid = (l + h) // 2\n        if check(arr, mid, k, c):\n            l = mid\n            ans = max(ans, mid)\n        else:\n            h = mid\n    print(ans)", "def check(arr, x, k, c):\n    vec = [[] for i in range(x)]\n    l = 0\n    for i in range(n):\n        if len(vec[l]) == k:\n            return True\n        elif len(vec[l]) == 0 or vec[l][-1] * c <= arr[i]:\n            vec[l].append(arr[i])\n            l = (l + 1) % x\n    for i in range(x):\n        if len(vec[i]) != k:\n            return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (n, k, c) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    (l, h) = (0, n // k + 1)\n    ans = 0\n    while h - l > 1:\n        mid = (l + h) // 2\n        if check(arr, mid, k, c):\n            l = mid\n            ans = max(ans, mid)\n        else:\n            h = mid\n    print(ans)", "def check(arr, X, k, c):\n    vec = [[] for i in range(X)]\n    l = 0\n    for i in range(n):\n        if len(vec[l]) == k:\n            return True\n        elif len(vec[l]) == 0 or vec[l][-1] * c <= arr[i]:\n            vec[l].append(arr[i])\n            l = (l + 1) % X\n    for i in range(X):\n        if len(vec[i]) != k:\n            return False\n    return True\nfor _ in range(int(input())):\n    (n, k, c) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    l = 0\n    h = n // k + 1\n    ans = 0\n    while h - l > 1:\n        mid = (l + h) // 2\n        if check(arr, mid, k, c):\n            l = mid\n            ans = max(ans, mid)\n        else:\n            h = mid\n    print(ans)", "def check(arr, X, k, c):\n    vec = [[] for i in range(X)]\n    l = 0\n    for i in range(n):\n        if len(vec[l]) == k:\n            return True\n        elif len(vec[l]) == 0 or vec[l][-1] * c <= arr[i]:\n            vec[l].append(arr[i])\n            l = (l + 1) % X\n    for i in range(X):\n        if len(vec[i]) != k:\n            return False\n    return True\nfor _ in range(int(input())):\n    (n, k, c) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    l = 0\n    h = n // k + 1\n    ans = 0\n    while h - l > 1:\n        mid = (l + h) // 2\n        if check(arr, mid, k, c):\n            l = mid\n            ans = max(ans, mid)\n        else:\n            h = mid\n    print(ans)", "def check(arr, X, k, c):\n    vec = [[] for i in range(X)]\n    l = 0\n    for i in range(n):\n        if len(vec[l]) == k:\n            return True\n        elif len(vec[l]) == 0 or vec[l][-1] * c <= arr[i]:\n            vec[l].append(arr[i])\n            l = (l + 1) % X\n    for i in range(X):\n        if len(vec[i]) != k:\n            return False\n    return True\nfor _ in range(int(input())):\n    (n, k, c) = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    l = 0\n    h = n // k + 1\n    ans = 0\n    while h - l > 1:\n        mid = (l + h) // 2\n        if check(arr, mid, k, c):\n            l = mid\n            ans = max(ans, mid)\n        else:\n            h = mid\n    print(ans)", "def check(x):\n    ls = [[] for _ in range(x)]\n    curr = 0\n    for i in range(n):\n        if len(ls[curr]) == k:\n            return True\n        if len(ls[curr]) == 0 or ls[curr][-1] * c <= a[i]:\n            ls[curr].append(a[i])\n            curr = (curr + 1) % x\n    if len(ls[curr]) == k:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    l = 0\n    r = n + 1\n    while r - 1 > l:\n        mid = (l + r) // 2\n        if check(mid):\n            l = mid\n        else:\n            r = mid\n    print(l)", "def check(x):\n    ls = [[] for _ in range(x)]\n    curr = 0\n    for i in range(n):\n        if len(ls[curr]) == k:\n            return True\n        if len(ls[curr]) == 0 or ls[curr][-1] * c <= a[i]:\n            ls[curr].append(a[i])\n            curr = (curr + 1) % x\n    if len(ls[curr]) == k:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    l = 0\n    r = n + 1\n    while r - 1 > l:\n        mid = (l + r) // 2\n        if check(mid):\n            l = mid\n        else:\n            r = mid\n    print(l)", "def check(x):\n    ls = [[] for _ in range(x)]\n    cIND = 0\n    for i in range(n):\n        if len(ls[cIND]) == k:\n            return True\n        if len(ls[cIND]) == 0 or ls[cIND][-1] * c <= a[i]:\n            ls[cIND].append(a[i])\n            cIND = (cIND + 1) % x\n    if len(ls[cIND]) == k:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    l = 0\n    r = n + 1\n    while r - 1 > l:\n        mid = (l + r) // 2\n        if check(mid):\n            l = mid\n        else:\n            r = mid\n    print(l)", "def check(x):\n    ls = [[] for _ in range(x)]\n    cIND = 0\n    for i in range(n):\n        if len(ls[cIND]) == k:\n            return True\n        if len(ls[cIND]) == 0 or ls[cIND][-1] * c <= a[i]:\n            ls[cIND].append(a[i])\n            cIND = (cIND + 1) % x\n    if len(ls[cIND]) == k:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    l = 0\n    r = n + 1\n    while r - 1 > l:\n        mid = (l + r) // 2\n        if check(mid):\n            l = mid\n        else:\n            r = mid\n    print(l)", "def check(x):\n    ls = [[] for _ in range(x)]\n    cIND = 0\n    for i in range(n):\n        if len(ls[cIND]) == k:\n            return True\n        if len(ls[cIND]) == 0 or ls[cIND][-1] * c <= a[i]:\n            ls[cIND].append(a[i])\n            cIND = (cIND + 1) % x\n    if len(ls[cIND]) == k:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    l = 0\n    r = n + 1\n    while r - 1 > l:\n        mid = (l + r) // 2\n        if check(mid):\n            l = mid\n        else:\n            r = mid\n    print(l)", "def check(arr, noOfSteps, C, K):\n    if noOfSteps == 0:\n        return True\n    steps = []\n    for i in range(noOfSteps):\n        steps.append([])\n    done = 0\n    index = 0\n    for i in range(len(arr)):\n        if len(steps[index]) == 0:\n            steps[index].append(arr[i])\n            if len(steps[index]) == K:\n                done += 1\n            index = (index + 1) % noOfSteps\n        elif arr[i] >= steps[index][-1] * C:\n            steps[index].append(arr[i])\n            if len(steps[index]) == K:\n                done += 1\n            index = (index + 1) % noOfSteps\n    if done == noOfSteps:\n        return True\n    return False\nfor __ in range(int(input())):\n    (N, K, C) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    if K == 1:\n        print(len(arr))\n        continue\n    arr.sort()\n    low = -1\n    high = N // K + 1\n    while high - low > 1:\n        mid = low + (high - low) // 2\n        if check(arr, mid, C, K) == True:\n            low = mid\n        else:\n            high = mid\n    print(low)", "def check(l, a, n, k, c):\n    count = 0\n    b = {}\n    new = 0\n    for i in range(l):\n        b[i] = []\n    for i in range(n):\n        if len(b[new]) == 0:\n            b[new].append(a[i])\n            if len(b[new]) == k:\n                count += 1\n            new = (new + 1) % l\n        elif a[i] >= b[new][-1] * c:\n            b[new].append(a[i])\n            if len(b[new]) == k:\n                count += 1\n            new = (new + 1) % l\n    if count == l:\n        return True\n    else:\n        return False\nt = int(input())\nwhile t > 0:\n    (n, k, c) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    a.sort()\n    r = n // k + 1\n    flag = 0\n    low = 0\n    while r - low > 1:\n        mid = low + (r - low) // 2\n        boo = check(mid, a, n, k, c)\n        if boo:\n            flag = 1\n            low = mid\n        else:\n            r = mid\n    if flag == 0:\n        print('0')\n    else:\n        print(low)\n    t -= 1", "def check(x):\n    v1 = []\n    v2 = []\n    for i in range(x):\n        v1.append(a[i])\n    p = x\n    for i in range(1, k):\n        v2 = []\n        for j in range(len(v1)):\n            while p < n and a[p] < v1[j] * c:\n                p += 1\n            if p >= n:\n                return False\n            v2.append(a[p])\n            p += 1\n        v1 = v2.copy()\n    return True\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    lo = 0\n    hi = n + 1\n    while hi - lo > 1:\n        mid = (lo + hi) // 2\n        if check(mid):\n            lo = mid\n        else:\n            hi = mid\n    print(lo)", "def check(x):\n    l1 = [ls[i] for i in range(x)]\n    pos = x\n    for i in range(1, k):\n        for j in range(x):\n            while pos < n and ls[pos] < c * l1[j]:\n                pos += 1\n            if pos >= n:\n                return False\n            l1[j] = ls[pos]\n            pos += 1\n    return True\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    ls = sorted(list(map(int, input().split())))\n    (l, r) = (0, n)\n    while r - l > 1:\n        m = l + (r - l) // 2\n        if check(m):\n            l = m\n        else:\n            r = m\n    print(l)", "def fun(x):\n    arr = [a[i] for i in range(x)]\n    zz = x\n    for i in range(1, k):\n        for j in range(x):\n            while zz < n and a[zz] < c * arr[j]:\n                zz += 1\n            if zz >= n:\n                return False\n            arr[j] = a[zz]\n            zz += 1\n    return True\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    a = sorted(list(map(int, input().split())))\n    (l, r) = (0, n)\n    while r - l > 1:\n        m = l + (r - l) // 2\n        if fun(m):\n            l = m\n        else:\n            r = m\n    print(l)", "def check(x):\n    l1 = [ls[i] for i in range(x)]\n    pos = x\n    for i in range(1, k):\n        for j in range(x):\n            while pos < n and ls[pos] < c * l1[j]:\n                pos += 1\n            if pos >= n:\n                return False\n            l1[j] = ls[pos]\n            pos += 1\n    return True\nfor _ in range(int(input())):\n    (n, k, c) = map(int, input().split())\n    ls = sorted(list(map(int, input().split())))\n    (l, r) = (0, n)\n    while r - l > 1:\n        m = l + (r - l) // 2\n        if check(m):\n            l = m\n        else:\n            r = m\n    print(l)", "def check(m):\n    ptr = 0\n    ds = [[] for i in range(m)]\n    ele = 0\n    for i in range(K):\n        for j in range(m):\n            if len(ds[j]) == 0 and ptr < len(a):\n                ds[j].append(a[ptr])\n                ele += 1\n            else:\n                while ptr < len(a) and a[ptr] < ds[j][i - 1] * C:\n                    ptr += 1\n                if ptr < len(a):\n                    ds[j].append(a[ptr])\n                    ele += 1\n            ptr += 1\n    if ele == m * K:\n        return 1\n    else:\n        return 0\nT = int(input())\nfor _ in range(T):\n    (N, K, C) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    a.sort()\n    l = 0\n    r = len(a) // K\n    while l < r:\n        mid = l + (r - l + 1) // 2\n        if check(mid):\n            l = mid\n        else:\n            r = mid - 1\n    print(l)", "raw_input = input\n\ndef fn(A, n, k, c, x):\n    steps = [[] for _ in range(x)]\n    j = 0\n    for i in range(n):\n        if len(steps[j]) == k:\n            return True\n        if len(steps[j]) == 0 or steps[j][-1] * c <= A[i]:\n            steps[j].append(A[i])\n            j = (j + 1) % x\n    if len(steps[j]) == k:\n        return True\n    return False\nfor _ in range(int(raw_input())):\n    (n, k, c) = map(int, raw_input().split())\n    A = sorted([int(x) for x in raw_input().split()])\n    (start, end) = (0, n + 1)\n    while start < end - 1:\n        mid = (start + end) // 2\n        if fn(A, n, k, c, mid):\n            start = mid\n        else:\n            end = mid\n    print(start)", "def chk(arr, n, k, c, ted):\n    ok = 0\n    cur = 0\n    if ted == ok:\n        return True\n    it = [-1] * ted\n    las = [0] * ted\n    for i in range(n):\n        if ted == ok:\n            return True\n        while it[cur] >= k:\n            cur = (cur + 1) % ted\n        if it[cur] == -1:\n            las[cur] = arr[i]\n            it[cur] = 1\n            if it[cur] == k:\n                ok = ok + 1\n            cur = cur + 1\n        elif las[cur] * c <= arr[i]:\n            las[cur] = arr[i]\n            it[cur] = it[cur] + 1\n            if it[cur] == k:\n                ok = ok + 1\n            cur = cur + 1\n        cur = cur % ted\n    return ok == ted\n\ndef wrap(arr, n, k, c):\n    arr.sort()\n    l = -1\n    r = n + 1\n    while r - l > 1:\n        mid = int((l + r) / 2)\n        if chk(arr, n, k, c, mid):\n            l = mid\n        else:\n            r = mid\n    return l\nt = int(input())\nwhile t:\n    nkc = input().split()\n    N = int(nkc[0])\n    K = int(nkc[1])\n    C = int(nkc[2])\n    arr = [0] * N\n    x = input().split()\n    for i in range(N):\n        arr[i] = int(x[i])\n    size = wrap(arr, N, K, C)\n    print(size)\n    t = t - 1", "from math import inf\n\ndef fun(a, n, k, c, x):\n    j = 0\n    vec = [[] for i in range(x)]\n    for i in range(n):\n        if len(vec[j]) == k:\n            return 1\n        if len(vec[j]) == 0 or vec[j][-1] * c <= a[i]:\n            vec[j].append(a[i])\n            j = (j + 1) % x\n    if len(vec[j]) == k:\n        return 1\n    else:\n        return 0\nfor _ in range(int(input().strip())):\n    (n, k, c) = map(int, input().strip().split())\n    lst = list(map(int, input().strip().split()))\n    lst.sort()\n    start = 0\n    end = n + 1\n    while start < end - 1:\n        mid = (start + end) // 2\n        remain = fun(lst, n, k, c, mid)\n        if remain == 1:\n            start = mid\n        else:\n            end = mid\n    print(start)", "from math import inf\n\ndef check(z):\n    index = 0\n    d = [[] for _ in range(z)]\n    for i in range(n):\n        if len(d[index]) == 0 or (d[index][-1] * c <= nums[i] and d[index][-1] < inf / c):\n            d[index].append(nums[i])\n            index = (index + 1) % z\n    for i in d:\n        if len(i) < k:\n            return (d, False)\n    return (d, True)\nT = int(input())\nwhile T > 0:\n    (n, k, c) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    nums.sort()\n    lo = 1\n    hi = n // k\n    res = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        (d, f) = check(mid)\n        if f == True:\n            res = mid\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    print(res)\n    T -= 1", "from math import inf\n\ndef check(z):\n    index = 0\n    d = [[] for _ in range(z)]\n    for i in range(n):\n        if len(d[index]) == 0 or (d[index][-1] * c <= nums[i] and d[index][-1] < inf / c):\n            d[index].append(nums[i])\n            index = (index + 1) % z\n    for i in d:\n        if len(i) < k:\n            return (d, False)\n    return (d, True)\nT = int(input())\nwhile T > 0:\n    (n, k, c) = list(map(int, input().split()))\n    nums = list(map(int, input().split()))\n    nums.sort()\n    lo = 1\n    hi = n // k\n    res = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        (d, f) = check(mid)\n        if f == True:\n            res = mid\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    print(res)\n    T -= 1", "def binary(l, n, m, c, k):\n    li = []\n    for i in range(m):\n        li.append(l[i])\n        i = m\n    for j in range(1, k):\n        for h in range(m):\n            while i < n and li[h] * c > l[i]:\n                i = i + 1\n            if i < n:\n                li[h] = l[i]\n                i = i + 1\n            else:\n                return False\n    return True\nfor q in range(int(input())):\n    a = list(map(int, input().strip().split(' ')))\n    n = a[0]\n    k = a[1]\n    c = a[2]\n    li = list(map(int, input().strip().split(' ')))\n    li.sort()\n    p = 0\n    l = 0\n    r = n // k\n    while l <= r:\n        m = (l + r) // 2\n        if binary(li, n, m, c, k):\n            p = m\n            l = m + 1\n        else:\n            r = m - 1\n    print(p)", "def find(N, K, C, A):\n    start = N // K\n\n    def check(X):\n        if X == 0:\n            return 1\n        AA = [[] for i in range(X)]\n        cur = 0\n        for i in range(len(A)):\n            x = A[i]\n            if AA[cur] == []:\n                AA[cur] += [x]\n                cur = (cur + 1) % X\n            elif len(AA[cur]) < K:\n                up = AA[cur][-1]\n                if x >= C * up:\n                    AA[cur] += [x]\n                    cur = (cur + 1) % X\n            else:\n                count = 0\n                while len(AA[cur]) >= K:\n                    cur = (cur + 1) % X\n                    count += 1\n                    if count > X:\n                        return 1\n                up = AA[cur][-1]\n                if x >= C * up:\n                    AA[cur] += [x]\n                    cur = (cur + 1) % X\n        good = 1\n        for i in range(X):\n            if len(AA[i]) < K:\n                good = 0\n        return good\n    last = start\n    if check(start) == 1:\n        return start\n    else:\n        left = 0\n        right = start\n        mid = (right + left) // 2\n        while 1:\n            mid = (right + left) // 2\n            if check(mid) == 1:\n                if mid == left:\n                    return mid\n                left = mid\n            else:\n                right = mid\n        return mid\nfor _ in range(int(input())):\n    (N, K, C) = list(map(int, input().strip().split(' ')))\n    A = sorted(list(map(int, input().strip().split(' '))))\n    print(find(N, K, C, A))"]