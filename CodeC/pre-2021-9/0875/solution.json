["t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [a[0]]\n    c = 0\n    (v, r) = ({}, {})\n    v[d[0]] = 0\n    r[d[0]] = 0\n    for j in range(1, n):\n        d.append(d[j - 1] ^ a[j])\n        v[d[j]] = 0\n        r[d[j]] = 0\n    for k in range(n):\n        if v[d[k]] > 0:\n            if d[k] == 0:\n                c += k\n                c += (k - 1) * v[d[k]] - r[d[k]]\n                v[d[k]] += 1\n                r[d[k]] += k\n            else:\n                c += (k - 1) * v[d[k]] - r[d[k]]\n                v[d[k]] += 1\n                r[d[k]] += k\n        else:\n            if d[k] == 0:\n                c += k\n            v[d[k]] += 1\n            r[d[k]] += k\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [a[0]]\n    c = 0\n    (v, r) = ({}, {})\n    v[d[0]] = 0\n    r[d[0]] = 0\n    for j in range(1, n):\n        d.append(d[j - 1] ^ a[j])\n        v[d[j]] = 0\n        r[d[j]] = 0\n    for k in range(n):\n        if v[d[k]] > 0:\n            if d[k] == 0:\n                c += k\n                c += (k - 1) * v[d[k]] - r[d[k]]\n                v[d[k]] += 1\n                r[d[k]] += k\n            else:\n                c += (k - 1) * v[d[k]] - r[d[k]]\n                v[d[k]] += 1\n                r[d[k]] += k\n        else:\n            if d[k] == 0:\n                c += k\n            v[d[k]] += 1\n            r[d[k]] += k\n    print(c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [a[0]]\n    c = 0\n    (v, r) = ({}, {})\n    v[d[0]] = 0\n    r[d[0]] = 0\n    for j in range(1, n):\n        d.append(d[j - 1] ^ a[j])\n        v[d[j]] = 0\n        r[d[j]] = 0\n    for k in range(n):\n        if v[d[k]] > 0:\n            if d[k] == 0:\n                c += k\n                c += (k - 1) * v[d[k]] - r[d[k]]\n                v[d[k]] += 1\n                r[d[k]] += k\n            else:\n                c += (k - 1) * v[d[k]] - r[d[k]]\n                v[d[k]] += 1\n                r[d[k]] += k\n        else:\n            if d[k] == 0:\n                c += k\n            v[d[k]] += 1\n            r[d[k]] += k\n    print(c)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [a[0]]\n    cnt = 0\n    (value, rang) = (dict(), dict())\n    value[dp[0]] = 0\n    rang[dp[0]] = 0\n    for i in range(1, n):\n        dp.append(dp[i - 1] ^ a[i])\n        value[dp[i]] = 0\n        rang[dp[i]] = 0\n    for i in range(n):\n        if value[dp[i]] > 0:\n            if dp[i] == 0:\n                cnt += i\n                cnt += (i - 1) * value[dp[i]] - rang[dp[i]]\n                value[dp[i]] += 1\n                rang[dp[i]] += i\n            else:\n                cnt += (i - 1) * value[dp[i]] - rang[dp[i]]\n                value[dp[i]] += 1\n                rang[dp[i]] += i\n        else:\n            if dp[i] == 0:\n                cnt += i\n            value[dp[i]] += 1\n            rang[dp[i]] += i\n    print(cnt)", "import itertools\nfrom collections import defaultdict as dfd\n\ndef sumPairs(arr, n):\n    s = 0\n    for i in range(n - 1, -1, -1):\n        s += i * arr[i] - (n - 1 - i) * arr[i]\n    return s\n\ndef subarrayXor(arr, n, m):\n    ans = 0\n    xorArr = [0 for _ in range(n)]\n    mp = dfd(list)\n    xorArr[0] = arr[0]\n    for i in range(1, n):\n        xorArr[i] = xorArr[i - 1] ^ arr[i]\n    for i in range(n):\n        mp[xorArr[i]].append(i)\n    a = sorted(mp.items())\n    for i in a:\n        diffs = 0\n        if i[0] != 0:\n            l = len(i[1]) - 1\n            ans += sumPairs(i[1], len(i[1])) - l * (l + 1) // 2\n        else:\n            l = len(i[1]) - 1\n            ans += sumPairs(i[1], len(i[1])) - l * (l + 1) // 2\n            ans += sum(i[1])\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    print(subarrayXor(arr, len(arr), 0))", "import random, math\nfrom copy import deepcopy as dc\nfrom bisect import bisect_left, bisect_right\n\ndef solution(li):\n    ma = {}\n    st = {}\n    ma[0] = 1\n    st[0] = 1\n    s = 0\n    c = 0\n    for i in range(len(li)):\n        s ^= li[i]\n        c += ma.get(s, 0) * (i + 1) - st.get(s, 0)\n        ma[s] = ma.get(s, 0) + 1\n        st[s] = st.get(s, 0) + i + 2\n    return c\n\ndef input_test():\n    for _ in range(int(input())):\n        n = int(input())\n        li = list(map(int, input().strip().split(' ')))\n        out = solution(li)\n        print(out)\n\ndef test():\n    pass\ninput_test()", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [a[0]]\n    cnt = 0\n    (value, rang) = (dict(), dict())\n    value[dp[0]] = 0\n    rang[dp[0]] = 0\n    for i in range(1, n):\n        dp.append(dp[i - 1] ^ a[i])\n        value[dp[i]] = 0\n        rang[dp[i]] = 0\n    for i in range(n):\n        if value[dp[i]] > 0:\n            if dp[i] == 0:\n                cnt += i\n                cnt += (i - 1) * value[dp[i]] - rang[dp[i]]\n                value[dp[i]] += 1\n                rang[dp[i]] += i\n            else:\n                cnt += (i - 1) * value[dp[i]] - rang[dp[i]]\n                value[dp[i]] += 1\n                rang[dp[i]] += i\n        else:\n            if dp[i] == 0:\n                cnt += i\n            value[dp[i]] += 1\n            rang[dp[i]] += i\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ans = 0\n    m = [0] * n\n    for i in range(n):\n        if i == 0:\n            m[i] = l[i]\n        else:\n            m[i] = m[i - 1] ^ l[i]\n    d = {}\n    c = 0\n    for i in l:\n        c = c ^ i\n    for i in range(n - 1, -1, -1):\n        try:\n            x = d[l[i] ^ c]\n            ans += x[0] - x[1] * i\n        except:\n            pass\n        try:\n            d[m[i]] = [d[m[i]][0] + i, d[m[i]][1] + 1]\n        except:\n            d[m[i]] = [i, 1]\n        c = c ^ l[i]\n    print(ans)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    Arr = [int(o) for o in input().split()]\n    res = 0\n    xor_array = [0] * 1000000\n    length = [0] * 1000000\n    x = [0] * 1000000\n    xor_val = 0\n    xor_array[0] = 1\n    x[0] = -1\n    for i in range(N):\n        cnt = 0\n        xor_val = xor_val ^ Arr[i]\n        if xor_array[xor_val]:\n            cnt = i - x[xor_val]\n            length[xor_val] = length[xor_val] + (xor_array[xor_val] * cnt - 1)\n            res += length[xor_val]\n        x[xor_val] = i\n        xor_array[xor_val] += 1\n    print(res)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().strip().split()))\n    prefix_xor = [arr[0]]\n    for i in range(1, len(arr)):\n        prefix_xor.append(prefix_xor[-1] ^ arr[i])\n    xor_map = {0: [1, 0]}\n    total_triplets = 0\n    for (index, elem) in enumerate(prefix_xor):\n        if elem not in xor_map:\n            xor_map[elem] = [1, index + 1]\n        else:\n            (cnt, sum_all_pos) = (xor_map[elem][0], xor_map[elem][1])\n            total_triplets += cnt * (index + 1) - cnt - sum_all_pos\n            xor_map[elem][0] += 1\n            xor_map[elem][1] += index + 1\n    print(total_triplets)", "def sumPairs(arr, n):\n    sum = 0\n    for i in range(n - 1, -1, -1):\n        sum += i * arr[i] - (n - 1 - i) * arr[i]\n    return sum - n * (n - 1) // 2\nR = lambda : map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    xs = list(map(int, input().split()))\n    xor = 0\n    dict = {0: [0]}\n    count = 0\n    i = 0\n    for x in xs:\n        xor = xor ^ x\n        if xor not in dict:\n            dict[xor] = [i + 1]\n        else:\n            dict[xor].append(i + 1)\n        i += 1\n    ans = 0\n    for i in dict.values():\n        if len(i) == 1:\n            continue\n        else:\n            ans += sumPairs(i, len(i))\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    inp = [int(i) for i in input().split()]\n    t = t - 1\n    xorarr = [0] * n\n    xorarr[0] = inp[0]\n    mydict = dict()\n    mydict[xorarr[0]] = 1\n    for i in range(1, n):\n        xorarr[i] = xorarr[i - 1] ^ inp[i]\n        if xorarr[i] not in mydict:\n            mydict[xorarr[i]] = 1\n        else:\n            mydict[xorarr[i]] = mydict[xorarr[i]] + 1\n    mydicts = dict()\n    sums = 0\n    for i in range(n):\n        if xorarr[i] == 0:\n            sums = sums + i\n        if xorarr[i] not in mydicts:\n            val = 0 - i * (mydict[xorarr[i]] - 1)\n            mydicts[xorarr[i]] = [1, val]\n        else:\n            val = (2 * mydicts[xorarr[i]][0] - mydict[xorarr[i]] + 1) * i\n            mydicts[xorarr[i]][0] += 1\n            mydicts[xorarr[i]][1] += val\n    for i in mydicts.keys():\n        sums = sums + mydicts[i][1] - mydict[i] * (mydict[i] - 1) / 2\n    print(int(sums))", "def find_coeffs(n):\n    coeffs = [0 for _ in range(n)]\n    for i in range(1, n + 1):\n        coeffs[i - 1] = i + (n - i) * i\n    return coeffs\n\ndef find_diff(indices):\n    diff = [0 for _ in range(len(indices) - 1)]\n    for i in range(1, len(indices)):\n        diff[i - 1] = int(indices[i] - indices[i - 1])\n    return diff\ntest_cases = int(input())\nfor test in range(test_cases):\n    n = int(input())\n    seq = list(map(int, input().split()))\n    triplets = 0\n    res = [0 for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        res[i] = res[i - 1] ^ seq[i - 1]\n    xors = {}\n    for i in range(n + 1):\n        if res[i] not in xors:\n            xors[res[i]] = [i]\n        else:\n            xors[res[i]].append(i)\n    for key in xors.keys():\n        if len(xors[key]) > 1:\n            diff_array = find_diff(xors[key])\n            l = len(diff_array)\n            coeffs = find_coeffs(l)\n            triplets += sum([diff_array[i] * coeffs[i] for i in range(l)]) - int(l * (l + 1) / 2)\n    print(triplets)", "from collections import defaultdict\n\ndef solve(C, N):\n    cnt = defaultdict(list)\n    cnt[0].append(-1)\n    r = 0\n    for i in range(len(C)):\n        r = r ^ C[i]\n        cnt[r].append(i)\n    res = 0\n    for l in cnt:\n        x = len(cnt[l]) - 1\n        neg = x\n        y = 0\n        for k in range(len(cnt[l]))[::-1]:\n            y += x * cnt[l][k] - neg\n            x -= 2\n            neg -= 1\n        res += y\n    return res\n\ndef main():\n    for _ in range(int(input())):\n        N = int(input())\n        C = list(map(int, input().split()))\n        print(solve(C, N))\nmain()", "for testcase in range(int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    sum = [0] * 2000020\n    cnt = [0] * 2000020\n    s = 0\n    ans = 0\n    cnt[0] = 1\n    sum[0] = 1\n    for i in range(1, len(a)):\n        s ^= a[i]\n        ans += i * cnt[s] - sum[s]\n        cnt[s] += 1\n        sum[s] += i + 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [0] + list(map(int, input().split()))\n    sum = [0] * 2000020\n    cnt = [0] * 2000020\n    s = 0\n    ans = 0\n    cnt[0] = 1\n    sum[0] = 1\n    for i in range(1, len(a)):\n        s ^= a[i]\n        ans += i * cnt[s] - sum[s]\n        cnt[s] += 1\n        sum[s] += i + 1\n    print(ans)", "def xorContest(seq):\n    ans = 0\n    count = {}\n    bad_count = {}\n    pre_xor = [None] * (len(seq) + 1)\n    pre_xor[0] = 0\n    for i in range(1, len(seq) + 1):\n        pre_xor[i] = pre_xor[i - 1] ^ seq[i - 1]\n    for i in range(len(pre_xor)):\n        xor = pre_xor[i]\n        ans = ans + i * (count[xor] if xor in count else 0) - (bad_count[xor] if xor in bad_count else 0)\n        if xor in count:\n            count[xor] = count[xor] + 1\n            bad_count[xor] = bad_count[xor] + (i + 1)\n        else:\n            count[xor] = 1\n            bad_count[xor] = i + 1\n    return ans\nX = [None] * 100000\nR = [None] * 100000\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    A = [int(x) for x in input().split()]\n    print(xorContest(A))", "def prefixXor(arr):\n    output = [0]\n    temp = 0\n    out = dict()\n    out[0] = [1, 0]\n    ans = 0\n    for item in range(len(arr)):\n        temp ^= arr[item]\n        output.append(temp)\n        if not output[item + 1] in out.keys():\n            out[output[item + 1]] = [0, 0]\n        count = out[output[item + 1]][0]\n        su = out[output[item + 1]][1]\n        ans += count * (item + 1) - count - su\n        count += 1\n        out[output[item + 1]][0] = count\n        out[output[item + 1]][1] += item + 1\n    return ans\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(prefixXor(arr))", "def prefixXor(arr):\n    output = [0]\n    temp = 0\n    out = dict()\n    out[0] = [1, 0]\n    ans = 0\n    for item in range(len(arr)):\n        temp ^= arr[item]\n        output.append(temp)\n        if not output[item + 1] in out.keys():\n            out[output[item + 1]] = [0, 0]\n        count = out[output[item + 1]][0]\n        su = out[output[item + 1]][1]\n        ans += count * (item + 1) - count - su\n        count += 1\n        out[output[item + 1]][0] = count\n        out[output[item + 1]][1] += item + 1\n    return ans\nfor _ in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    print(prefixXor(arr))", "for _ in range(int(input())):\n    N = int(input())\n    List = [int(x) for x in input().split()]\n    Prefix = []\n    Temp = List[0]\n    Prefix.append(List[0])\n    for i in range(1, N):\n        Temp = List[i] ^ Temp\n        Prefix.append(Temp)\n    ans = 0\n    Dict = {0: list()}\n    Dict[0].append(0)\n    Dict[0].append(0)\n    for i in range(N):\n        if Prefix[i] in Dict:\n            count = len(Dict[Prefix[i]]) - 1\n            Dict[Prefix[i]].append(i + 1)\n            ans += (i + 1) * count - count - Dict[Prefix[i]][0]\n            Dict[Prefix[i]][0] += i + 1\n        else:\n            Dict[Prefix[i]] = list()\n            Dict[Prefix[i]].append(i + 1)\n            Dict[Prefix[i]].append(i + 1)\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = arr[i] ^ prefix[i - 1]\n    pos = {0: [0]}\n    for i in range(n):\n        if prefix[i] not in pos:\n            pos[prefix[i]] = [i + 1]\n        else:\n            pos[prefix[i]].append(i + 1)\n    result = 0\n    for (key, value) in pos.items():\n        size = len(value)\n        cum = [0] * size\n        cum[0] = value[0]\n        temp = 0\n        for i in range(1, size):\n            cum[i] = cum[i - 1] + value[i]\n            temp += value[i] * i - cum[i - 1]\n        temp -= size * (size - 1) // 2\n        result += temp\n    print(result)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    pr_xor = [0] * 10 ** 6\n    pr_xor[0] = 1\n    last_index = [0] * 10 ** 6\n    last_index[0] = -1\n    prev_xor_cnt = [0] * 10 ** 6\n    prev_xor_cnt[0] = 1\n    prev_ans = [0] * 10 ** 6\n    xor_val = 0\n    ans = 0\n    for (idx, ele) in enumerate(lst):\n        xor_val ^= ele\n        if pr_xor[xor_val]:\n            ele_cnt = idx - last_index[xor_val]\n            prev_ans[xor_val] = prev_ans[xor_val] + ele_cnt * prev_xor_cnt[xor_val] - 1\n        pr_xor[xor_val] = 1\n        prev_xor_cnt[xor_val] += 1\n        last_index[xor_val] = idx\n        ans += prev_ans[xor_val]\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    xor = [0] * n\n    xor[0] = a[0]\n    bad = defaultdict(int)\n    cnt = defaultdict(int)\n    ans = 0\n    for i in range(1, n):\n        xor[i] = xor[i - 1] ^ a[i]\n        if xor[i] == 0:\n            ans += i\n    for i in range(n):\n        if xor[i] in bad:\n            ans += i * cnt[xor[i]] - bad[xor[i]]\n        bad[xor[i]] += i + 1\n        cnt[xor[i]] += 1\n    print(ans)", "final_result = []\n\ndef get_no_of_triplets(array):\n    result = 0\n    aux_array = array\n    length = len(array)\n    hash_table = {}\n    for i in range(1, length):\n        aux_array[i] = aux_array[i] ^ aux_array[i - 1]\n    for i in range(length):\n        if aux_array[i] in hash_table:\n            hash_table[aux_array[i]].append(i)\n        else:\n            hash_table[aux_array[i]] = [i]\n    for key in list(hash_table.keys()):\n        temp_array = hash_table[key]\n        sum = 0\n        l = len(temp_array)\n        if l > 1:\n            for i in range(0, l):\n                sum += temp_array[i] * (l - 1 - 2 * i) * -1\n                if key == 0:\n                    sum += temp_array[i]\n            sum -= l * (l - 1) / 2\n        elif key == 0:\n            sum += temp_array[0]\n        result += sum\n    return int(result)\nfor _ in range(int(input())):\n    input()\n    ip = input().split(' ')\n    final_result.append(get_no_of_triplets([int(i) for i in ip]))\nfor i in range(len(final_result)):\n    print(final_result[i])", "t = int(input())\nfor _ in range(t):\n    size = int(input())\n    given = [0]\n    [given.append(int(i)) for i in str(input()).split(' ')]\n    s = 0\n    ans = 0\n    count = [0] * (10 ** 6 + 1)\n    sum = [0] * (10 ** 6 + 1)\n    for (index, element) in enumerate(given):\n        s ^= element\n        ans += count[s] * index - sum[s]\n        count[s] += 1\n        sum[s] += index + 1\n    print(ans)", "def count_subarrays(l):\n    res = 0\n    p = []\n    p.append(0)\n    for i in range(1, len(l)):\n        p.append(p[i - 1] + l[i - 1])\n    for i in range(1, len(l)):\n        res += i * l[i] - p[i] - i\n    return res\n\ndef special_case(l):\n    res = 0\n    for i in l:\n        res += i\n    return res\n\ndef solve():\n    arr = []\n    pref = []\n    dic = {}\n    counter = 0\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    pref.append(arr[0])\n    dic.update({pref[0]: []})\n    dic[pref[0]].append(0)\n    for i in range(1, n):\n        pref.append(arr[i] ^ pref[i - 1])\n        if pref[i] not in dic.keys():\n            dic.update({pref[i]: []})\n        dic[pref[i]].append(i)\n    for i in dic:\n        if i == 0:\n            counter += special_case(dic[i])\n        if len(dic[i]) > 1:\n            counter += count_subarrays(dic[i])\n    print(counter)\n\ndef main():\n    t = int(input())\n    while t:\n        t -= 1\n        solve()\nmain()", "import collections\n\ndef oprsn(l):\n    n = len(l)\n    s = sum(l)\n    ans = 0\n    for v in l:\n        s -= v\n        n -= 1\n        ans += s - n * v - n\n    return ans\nfor _ in range(int(input())):\n    (n, a) = (int(input()), list(map(int, input().split())))\n    x = ans = 0\n    p = [0]\n    d = collections.defaultdict(list)\n    for v in a:\n        x = x ^ v\n        p += [x]\n    for i in range(n + 1):\n        d[p[i]] += [i]\n    for k in d:\n        ans += oprsn(d[k])\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    prefix_xor = []\n    z = 0\n    prefix_xor.append(0)\n    for i in range(n):\n        z = z ^ a[i]\n        prefix_xor.append(z)\n    p_dict = dict()\n    for i in range(n + 1):\n        p_dict[prefix_xor[i]] = []\n    for i in range(n + 1):\n        p_dict[prefix_xor[i]].append(i)\n    for (i, j) in p_dict.items():\n        if len(j) != 1:\n            l = len(j)\n            for i in range(l - 1):\n                ans += (j[i + 1] - j[i]) * (i + 1) * (l - i - 1)\n                ans -= l - i - 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input()) + 1\n    a = [0] + list(map(int, input().split()))\n    for i in range(1, n):\n        a[i] ^= a[i - 1]\n    r = {}\n    ans = 0\n    r[0] = (1, 0)\n    for i in range(1, n):\n        (cnt, sm) = r.get(a[i], (0, 0))\n        ans += cnt * (i - 1) - sm\n        r[a[i]] = (cnt + 1, sm + i)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    px = [0]\n    x = 0\n    d = {0: [0]}\n    for i in range(n):\n        x = x ^ l[i]\n        px.append(x)\n        if x not in d:\n            d[x] = [i + 1]\n        else:\n            d[x].append(i + 1)\n    gsum = 0\n    for i in d:\n        if len(d[i]) > 1:\n            summ = d[i][0]\n            for j in range(1, len(d[i])):\n                gsum += d[i][j] * j - summ - j\n                summ += d[i][j]\n    print(gsum)", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    arr = list(map(int, input().split()))\n    mydict = {}\n    x = [0] * (n + 1)\n    y = 0\n    for i in range(len(arr)):\n        x[i + 1] = y ^ arr[i]\n        y = x[i + 1]\n    for i in range(len(x)):\n        if x[i] in mydict:\n            mydict[x[i]].append(i)\n        else:\n            mydict[x[i]] = [i]\n    ans = 0\n    for i in mydict:\n        temp = mydict[i]\n        temp1 = sum(temp)\n        terms = len(temp) - 1\n        for j in range(len(temp)):\n            cur = temp[j]\n            temp1 = temp1 - cur\n            ans += temp1 - terms * cur - terms\n            terms -= 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    xor = [0]\n    for i in range(n):\n        last = xor[-1]\n        xor.append(last ^ arr[i])\n    d = {}\n    for i in range(len(xor)):\n        if xor[i] not in d:\n            d[xor[i]] = [i]\n        else:\n            d[xor[i]].append(i)\n    ans = 0\n    for i in d:\n        temp = d[i]\n        temp1 = sum(temp)\n        terms = len(temp) - 1\n        for j in range(len(temp)):\n            cur = temp[j]\n            temp1 = temp1 - cur\n            ans += temp1 - terms * cur - terms\n            terms -= 1\n    print(ans)", "from bisect import bisect_left, bisect_right\nfrom math import sqrt, ceil, floor, factorial\nfrom heapq import heapify, heappush, heappop, heappushpop, heapreplace, merge, nlargest, nsmallest\nfrom collections import Counter, deque, defaultdict, OrderedDict, namedtuple\nmod = 10 ** 9 + 7\ninf = float('inf')\nnegin = float('-inf')\nt = int(input())\nwhile t:\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    xor = 0\n    preXor = dict()\n    preXor[0] = [0]\n    for item in range(n):\n        xor ^= a[item]\n        if xor in preXor:\n            preXor[xor].append(item + 1)\n        else:\n            preXor[xor] = [item + 1]\n    for x in preXor:\n        l = len(preXor[x])\n        if l >= 2:\n            for pos in range(l):\n                ans += pos * preXor[x][pos] - (l - 1 - pos) * preXor[x][pos]\n            ans -= l * (l - 1) // 2\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    pair = {}\n    pair[0] = [-1]\n    pair[a[0]] = [0]\n    for i in range(1, n):\n        a[i] = a[i - 1] ^ a[i]\n        if a[i] in pair:\n            pair[a[i]].append(i)\n        else:\n            pair[a[i]] = [i]\n    ans = 0\n    for lst in pair.values():\n        x = []\n        for i in range(1, len(lst)):\n            x.append(lst[i] - lst[i - 1])\n        m = len(x)\n        l = m\n        k = 1\n        while k <= l:\n            ans += m * k * x[k - 1]\n            k += 1\n            m -= 1\n        ans -= l * (l + 1) // 2\n    print(ans)", "for _ in range(int(input())):\n    n = int(input()) + 1\n    a = [0] + list(map(int, input().split()))\n    for i in range(1, n):\n        a[i] ^= a[i - 1]\n    r = {}\n    ans = 0\n    for i in range(n):\n        (cnt, sm, last) = r.get(a[i], (0, 0, 0))\n        ans += sm + (i - last - 1) * cnt\n        sm_new = sm + (i - last) * cnt\n        r[a[i]] = (cnt + 1, sm_new, i)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = tuple(map(int, input().split()))\n    prefix = [0]\n    for item in a:\n        temp = prefix[-1] ^ item\n        prefix.append(temp)\n    m = {}\n    m[0] = (1, 0)\n    ans = 0\n    for i in range(1, len(prefix)):\n        try:\n            ans += m[prefix[i]][0] * i - m[prefix[i]][1] - m[prefix[i]][0]\n            m[prefix[i]] = (m[prefix[i]][0] + 1, m[prefix[i]][1] + i)\n        except:\n            m[prefix[i]] = (1, i)\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    pXor = [0]\n    for i in A:\n        pXor.append(i ^ pXor[-1])\n    xors = defaultdict(int)\n    counts = defaultdict(int)\n    ans = 0\n    for (ind, i) in enumerate(pXor):\n        ans += ind * counts[i] - xors[i]\n        xors[i] += ind + 1\n        counts[i] += 1\n    print(ans)", "for t in range(int(input())):\n    n = int(input())\n    l = [int(j) for j in input().split()]\n    d = {0: [1, 0]}\n    v = 0\n    count = 0\n    for i in range(n):\n        v = v ^ l[i]\n        if v in d:\n            count = count + i * d[v][0] - d[v][1]\n            d[v][0] += 1\n            d[v][1] += i + 1\n        else:\n            d[v] = [1, i + 1]\n    print(count)", "for t in range(int(input())):\n    n = int(input())\n    l = [int(j) for j in input().split()]\n    d = {0: [1, 0]}\n    v = 0\n    count = 0\n    for i in range(n):\n        v = v ^ l[i]\n        if v in d:\n            count = count + i * d[v][0] - d[v][1]\n            d[v][0] += 1\n            d[v][1] += i + 1\n        else:\n            d[v] = [1, i + 1]\n    print(count)", "def gudv(n, l):\n    c = 0\n    b = 0\n    d = {}\n    d[0] = [0, 1]\n    for i in range(n):\n        b = b ^ l[i]\n        if b in d:\n            c += d[b][1] * i - d[b][0]\n            d[b][0] += i + 1\n            d[b][1] += 1\n        else:\n            d[b] = [i + 1, 1]\n    print(c)\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    gudv(n, l)", "import math\nfrom collections import defaultdict\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    tmp = 0\n    tmp2 = 0\n    index = 0\n    j = 0\n    t = [int(0) for _ in range(n)]\n    pl = 0\n    s = set()\n    l = []\n    h = dict()\n    (rows, cols) = (10, 10)\n    for i in range(n):\n        if i == 0:\n            t[i] = a[i]\n            s.add(t[i])\n        else:\n            t[i] = a[i] ^ t[i - 1]\n            s.add(t[i])\n            if t[i] == 0:\n                cnt += i\n        h.setdefault(t[i], []).append(i)\n    for j in h:\n        ind = h[j]\n        length = len(ind)\n        for i in range(length):\n            cnt += i * ind[i] - (length - i - 1) * ind[i]\n        cnt -= length * (length - 1) // 2\n    print(cnt)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    XOR = 0\n    d = {}\n    res = 0\n    d[0] = [0, 1]\n    for i in range(len(l)):\n        XOR ^= l[i]\n        if XOR in d:\n            res += d[XOR][1] * i - d[XOR][0]\n            d[XOR][0] += i + 1\n            d[XOR][1] += 1\n        else:\n            d[XOR] = [i + 1, 1]\n    print(res)", "from collections import defaultdict\nT = int(input())\nfor k in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    count = 0\n    dic = defaultdict(list)\n    prefixArr = [0] * N\n    prefixArr[0] = arr[0]\n    for i in range(1, N):\n        prefixArr[i] = prefixArr[i - 1] ^ arr[i]\n    for i in range(1, N + 1):\n        temp = prefixArr[i - 1]\n        x = dic[temp]\n        if temp == 0:\n            count += i - 1\n        dic[temp].append(i)\n    for i in list(dic.keys()):\n        y = len(dic[i])\n        z = dic[i]\n        if y > 1:\n            x = 0\n            for m in range(1, y):\n                x += m * (z[m] - z[m - 1]) - 1\n                count += x\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    xor = []\n    xor.append(arr[0])\n    for i in range(1, n):\n        xor.append(xor[i - 1] ^ arr[i])\n    di = {}\n    for i in range(n):\n        if xor[i] not in di:\n            di[xor[i]] = []\n        di[xor[i]].append(i)\n    cnt = 0\n    for i in di:\n        arr = di[i]\n        su = 0\n        if i == 0:\n            su += sum(arr)\n        if len(arr) == 2:\n            su += arr[1] - arr[0] - 1\n        if len(arr) > 2:\n            n1 = len(arr)\n            j = n1 - 1\n            suo = 0\n            suo -= int(j * (j + 1) / 2)\n            if n1 % 2 == 0:\n                j = n1 + 1\n                for k in range(int(n1 / 2)):\n                    j -= 2\n                    suo -= j * arr[k]\n                for k in range(int(n1 / 2), n1):\n                    suo += j * arr[k]\n                    j += 2\n            else:\n                for k in range(int(n1 / 2)):\n                    suo -= j * arr[k]\n                    j -= 2\n                j = 0\n                for k in range(int(n1 / 2), n1):\n                    suo += j * arr[k]\n                    j += 2\n            su += suo\n        cnt += su\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    xor = [0] * n\n    xor[0] = a[0]\n    m = a[0]\n    for i in range(1, n):\n        xor[i] = xor[i - 1] ^ a[i]\n        m = max(m, xor[i])\n    v = []\n    ans = 0\n    sum = [0] * (m + 1)\n    for j in range(m + 2):\n        v.append([])\n    for i in range(n):\n        if xor[i] == 0:\n            ans += i\n        j = xor[i]\n        size = len(v[j])\n        ans += size * i - sum[j] - size\n        v[j].append(i)\n        sum[j] += i\n    print(ans)", "from collections import defaultdict\nt = int(input())\nwhile t:\n    n = int(input())\n    A = list(map(int, input().split()))\n    pre_xor = 0\n    c = defaultdict(list)\n    c[0].append(1)\n    for i in range(n):\n        c[pre_xor ^ A[i]].append(i + 2)\n        pre_xor = pre_xor ^ A[i]\n    final_ans = 0\n    for (key, value) in c.items():\n        sum_key = 0\n        current_len = len(value)\n        for i in range(1, current_len):\n            sum_key += i * (current_len - i) * (value[i] - value[i - 1] - 1)\n            sum_key += i * (i - 1) // 2\n        final_ans += sum_key\n    print(final_ans)\n    t -= 1", "def dictt(arr):\n    Dict = {}\n    Dict[0] = [-1]\n    for (i, val) in enumerate(arr):\n        if val not in Dict:\n            Dict[val] = [i]\n        else:\n            Dict[val].append(i)\n    count = 0\n    for keys in Dict:\n        s = len(Dict[keys])\n        if s >= 2:\n            k = s - 1\n            j = s - 1\n            while j >= 0:\n                count += k * Dict[keys][j]\n                k -= 2\n                j -= 1\n        count -= s * (s - 1) // 2\n    print(count)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    prefix = [0] * n\n    prefix[0] = arr[0]\n    for i in range(1, n):\n        prefix[i] = prefix[i - 1] ^ arr[i]\n    dictt(prefix)", "from itertools import combinations\nt = int(input())\nfor c in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = [0]\n    for i in range(n):\n        l.append(a[i] ^ l[-1])\n    d = {}\n    for j in range(n + 1):\n        if l[j] in d:\n            d[l[j]] += [j]\n        else:\n            d[l[j]] = [j]\n    res = 0\n    for x in d.values():\n        le = len(x)\n        for s in range(le):\n            res += (2 * s + 1 - le) * x[s]\n        res -= le * (le - 1) // 2\n    print(res)", "t = int(input())\nwhile t:\n    t -= 1\n    s = int(input())\n    lis = list(map(int, input().split(' ')))\n    xor_lis = [0 for i in range(len(lis) + 1)]\n    i = 1\n    for v in lis:\n        xor_lis[i] = xor_lis[i - 1] ^ v\n        i += 1\n    dic = {}\n    for (i, val) in enumerate(xor_lis):\n        if val in dic.keys():\n            dic[val].append(i)\n        else:\n            dic[val] = [i]\n    ans = 0\n    for key in dic.keys():\n        lis = dic[key]\n        if len(lis) <= 1:\n            continue\n        length = len(lis)\n        for i in range(length):\n            ans += i * lis[i] - (length - 1 - i) * lis[i]\n        ans -= length * (length - 1) / 2\n    print(int(ans))", "t = int(input())\nwhile t:\n    n = int(input())\n    z = input().split()\n    for i in range(n):\n        z[i] = int(z[i])\n    XOR = 0\n    prefix = [0] * n\n    for i in range(n):\n        XOR = XOR ^ z[i]\n        prefix[i] = XOR\n    dict1 = {}\n    for i in range(n):\n        dict1.setdefault(prefix[i], []).append(i)\n    count = 0\n    for (i, j) in dict1.items():\n        if len(j) > 1:\n            for k in range(len(j)):\n                count += (2 * (k + 1) - len(j) - 1) * j[k]\n            count -= len(j) * (len(j) - 1) / 2\n        if i == 0:\n            for k in range(len(j)):\n                count += j[k]\n    t -= 1\n    print(int(count))", "t = int(input())\nfor _ in range(t):\n    q = 0\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = []\n    x.append(0)\n    for i in range(n):\n        x.append(x[i] ^ a[i])\n    p = dict()\n    for i in range(n + 1):\n        p[x[i]] = []\n    for i in range(n + 1):\n        p[x[i]].append(i)\n    for (k, v) in p.items():\n        if len(v) != 1:\n            for i in range(len(v) - 1, -1, -1):\n                q += i * (v[i] - 1) - (len(v) - i - 1) * v[i]\n    print(q)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(i) for i in input().split()]\n    dic = {0: [1, -1, 0]}\n    temp = 0\n    ans = 0\n    for i in range(n):\n        temp = temp ^ arr[i]\n        if temp in dic:\n            k = dic[temp][2] + (i - dic[temp][1]) * dic[temp][0] - 1\n            ans += k\n            dic[temp][0] += 1\n            dic[temp][2] = k\n            dic[temp][1] = i\n        else:\n            dic[temp] = [1, i, 0]\n    print(ans)", "T = int(input())\nfor _ in range(0, T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    prexor = []\n    cnt = 0\n    prexor.append(0)\n    tp = 0\n    for i in range(N):\n        tp ^= arr[i]\n        prexor.append(tp)\n    dict1 = dict()\n    for i in range(0, len(prexor)):\n        sm = prexor[i]\n        if sm not in dict1.keys():\n            dict1[prexor[i]] = [i + 1]\n        else:\n            klis = dict1[prexor[i]]\n            klis.append(i + 1)\n            dict1[prexor[i]] = klis\n    kys = list(dict1.keys())\n    for i in range(0, len(kys)):\n        li = list(dict1[kys[i]])\n        l = len(li)\n        if l > 1:\n            for j in range(l - 1):\n                cnt += (l - j - 1) * ((li[j + 1] - li[j]) * (j + 1) - 1)\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    xorArr = [0 for _ in range(n)]\n    xorArr[0] = l[0]\n    for i in range(1, n):\n        xorArr[i] = xorArr[i - 1] ^ l[i]\n    vec = []\n    dic = {}\n    count = 0\n    dic[0] = [-1]\n    for i in range(n):\n        if dic.get(xorArr[i]):\n            dic.get(xorArr[i]).append(i)\n        else:\n            a = []\n            a.append(i)\n            dic[xorArr[i]] = a\n    for i in dic:\n        l = dic[i]\n        leng = len(l)\n        for j in range(leng):\n            count += j * l[j] - (leng - j - 1) * l[j]\n        count -= leng * (leng - 1) // 2\n    print(count)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    l = []\n    l = [int(x) for x in input().split()]\n    prefix = []\n    prefix.append(l[0])\n    xor_vals = {}\n    i_s = {}\n    ans = 0\n    for i in range(1, n):\n        prefix.append(prefix[i - 1] ^ l[i])\n    for i in range(0, n):\n        if prefix[i] == 0:\n            ans += i\n        if prefix[i] not in xor_vals:\n            xor_vals[prefix[i]] = 1\n            i_s[prefix[i]] = i + 1\n        else:\n            ans += i * xor_vals[prefix[i]] - i_s[prefix[i]]\n            xor_vals[prefix[i]] += 1\n            i_s[prefix[i]] += i + 1\n    print(ans)", "import math\nfrom collections import defaultdict\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    tmp = 0\n    tmp2 = 0\n    index = 0\n    j = 0\n    t = [int(0) for _ in range(n)]\n    pl = 0\n    s = set()\n    l = []\n    h = dict()\n    (rows, cols) = (10, 10)\n    for i in range(n):\n        if i == 0:\n            t[i] = a[i]\n            s.add(t[i])\n        else:\n            t[i] = a[i] ^ t[i - 1]\n            s.add(t[i])\n            if t[i] == 0:\n                cnt += i\n        h.setdefault(t[i], []).append(i)\n    for j in h:\n        ind = h[j]\n        length = len(ind)\n        for i in range(length):\n            cnt += i * ind[i] - (length - i - 1) * ind[i]\n        cnt -= length * (length - 1) // 2\n    print(cnt)", "import math\nfrom collections import defaultdict\nt = int(input())\nfor j in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    cnt = 0\n    tmp = 0\n    tmp2 = 0\n    index = 0\n    j = 0\n    t = [int(0) for _ in range(n)]\n    pl = 0\n    s = set()\n    l = []\n    h = dict()\n    (rows, cols) = (10, 10)\n    for i in range(n):\n        if i == 0:\n            t[i] = a[i]\n            s.add(t[i])\n        else:\n            t[i] = a[i] ^ t[i - 1]\n            s.add(t[i])\n            if t[i] == 0:\n                cnt += i\n        h.setdefault(t[i], []).append(i)\n    for j in h:\n        ind = h[j]\n        length = len(ind)\n        for i in range(length):\n            cnt += i * ind[i] - (length - i - 1) * ind[i]\n        cnt -= length * (length - 1) // 2\n    print(cnt)", "val = 1000000\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    tempo = list(map(int, input().split()))\n    first = list()\n    second = list()\n    ans = 0\n    a = tempo[0]\n    first = [0] * val\n    second = [0] * val\n    third = list(range(val + 1))\n    first[tempo[0]] = 0\n    second[tempo[0]] += 1\n    w = 0\n    q = 0\n    loc = 0\n    for i in range(1, n):\n        q = tempo[i] ^ q\n        e = 0\n        loc = 0\n        loc = third[q]\n        e = w\n        ans += i * second[loc] - first[loc]\n        first[e] += i\n        second[e] += 1\n        w = loc\n    print(ans)\n    t = t - 1", "def reverseindex(ll):\n    V = {}\n    for (ind, v) in enumerate(ll):\n        if v not in V.keys():\n            V[v] = [ind]\n        else:\n            V[v] += [ind]\n    return V\n\ndef trimp(iv):\n    num = 0\n    if 0 in iv.keys():\n        iv[0] += [-1]\n    for (k, il) in iv.items():\n        il.sort(reverse=True)\n        length = len(il) - 1\n        l = len(il)\n        for i in il:\n            num += length * i\n            length -= 2\n        num -= int(l * (l - 1) / 2)\n    return num\ntry:\n    t = int(input())\nexcept:\n    quit()\nwhile t != 0:\n    n = int(input())\n    l = [int(y) for y in input().split()]\n    for (ind, v) in enumerate(l):\n        if ind == 0:\n            continue\n        else:\n            l[ind] = l[ind - 1] ^ v\n    temp = reverseindex(l)\n    r = trimp(temp)\n    print(r)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    Arr = [int(x) for x in input().split()]\n    res = 0\n    xor_array = [0] * 1000000\n    length = [0] * 1000000\n    x = [0] * 1000000\n    xor_val = 0\n    xor_array[0] = 1\n    x[0] = -1\n    for i in range(N):\n        cnt = 0\n        xor_val = xor_val ^ Arr[i]\n        if xor_array[xor_val]:\n            cnt = i - x[xor_val]\n            length[xor_val] = length[xor_val] + (xor_array[xor_val] * cnt - 1)\n            res += length[xor_val]\n        x[xor_val] = i\n        xor_array[xor_val] += 1\n    print(res)", "t = int(input())\nfor ankit in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = 0\n    m = 0\n    xorArr = [0 for _ in range(n)]\n    mp = dict()\n    xorArr[0] = arr[0]\n    for i in range(1, n):\n        xorArr[i] = xorArr[i - 1] ^ arr[i]\n    for i in range(n):\n        tmp = m ^ xorArr[i]\n        if tmp in mp.keys():\n            ans = ans + mp[tmp][0] * (i - mp[tmp][1]) - 1 + mp[tmp][2]\n        if xorArr[i] == m:\n            ans += i\n        if mp.get(xorArr[i]) != None:\n            mp[xorArr[i]] = [mp[xorArr[i]][0] + 1, i, mp[xorArr[i]][2] + mp[tmp][0] * (i - mp[tmp][1]) - 1]\n        else:\n            mp[xorArr[i]] = [1, i, 0]\n    print(ans)", "t = int(input())\nwhile t:\n    n = int(input())\n    ans = 0\n    li = list(map(int, input().split()))\n    li = [0] + li\n    xor = [0]\n    for i in range(1, n + 1):\n        xor.append(xor[i - 1] ^ li[i])\n    di = dict()\n    for i in range(0, n + 1):\n        if xor[i] in di:\n            di[xor[i]].append(i)\n        else:\n            di[xor[i]] = [i]\n    for val in di.values():\n        l = len(val)\n        if l >= 2:\n            ans -= l * (l - 1) // 2\n            const = -(l - 1)\n            for i in val:\n                ans += const * i\n                const += 2\n    print(ans)\n    t = t - 1", "t = int(input())\nfor _ in range(t):\n    N = int(input())\n    A = list(map(int, input().split()))\n    res = 0\n    prefix_xor = []\n    temp = 0\n    prefix_xor.append(0)\n    for i in range(N):\n        temp = temp ^ A[i]\n        prefix_xor.append(temp)\n    prefix_dict = dict()\n    for i in range(len(prefix_xor)):\n        prefix_dict[prefix_xor[i]] = []\n    for i in range(len(prefix_xor)):\n        prefix_dict[prefix_xor[i]].append(i)\n    for (key, value) in prefix_dict.items():\n        if len(value) == 1:\n            pass\n        else:\n            l = len(value)\n            for i in range(l - 1):\n                res += (value[i + 1] - value[i]) * (i + 1) * (l - i - 1)\n                res -= l - i - 1\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    c = {0: [0]}\n    for (i, x) in enumerate(a):\n        s ^= x\n        c.setdefault(s, []).append(i + 1)\n    s = 0\n    for (k, v) in c.items():\n        l = len(v) - 1\n        if not l:\n            continue\n        x = sum(((v[i] - v[i - 1] - 1) * i * (l + 1 - i) for i in range(1, l + 1)))\n        y = sum((i * (l - i) for i in range(1, l)))\n        s += x + y\n    print(s)", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    Arr = [int(x) for x in input().split()]\n    res = 0\n    xor_array = [0] * 1000000\n    length = [0] * 1000000\n    x = [0] * 1000000\n    xor_val = 0\n    xor_array[0] = 1\n    x[0] = -1\n    for i in range(N):\n        cnt = 0\n        xor_val = xor_val ^ Arr[i]\n        if xor_array[xor_val]:\n            cnt = i - x[xor_val]\n            length[xor_val] = length[xor_val] + (xor_array[xor_val] * cnt - 1)\n            res += length[xor_val]\n        x[xor_val] = i\n        xor_array[xor_val] += 1\n    print(res)", "def passwr(length, guddu):\n    password = 0\n    values = {}\n    compute = guddu[0]\n    values[compute] = [1, 1]\n    j = 1\n    while j != length:\n        compute = compute ^ guddu[j]\n        try:\n            if not compute:\n                password += j\n            password += values[compute][1] * j - values[compute][0]\n            values[compute] = [values[compute][0] + (j + 1), values[compute][1] + 1]\n        except:\n            values[compute] = [j + 1, 1]\n        j += 1\n    return password\ntest = int(input())\nfor i in range(test):\n    length = int(input())\n    guddu = [int(k) for k in input().split()]\n    print(passwr(length, guddu))", "for i in range(int(input())):\n    a = int(input())\n    b = [x for x in map(int, input().split())]\n    c = [0] * a\n    c[0] = b[0]\n    count = 0\n    for j in range(1, a):\n        c[j] = c[j - 1] ^ b[j]\n    dic = dict()\n    for k in range(a):\n        ans = 0\n        n = 0\n        if c[k] not in dic.keys():\n            dic[c[k]] = [k, 0, 1]\n        elif dic[c[k]][1] == 0:\n            ans = k - dic[c[k]][0] - 1\n            dic[c[k]] = [k, ans, 2]\n        else:\n            ans = dic[c[k]][1] + dic[c[k]][2] * (k - dic[c[k]][0]) - 1\n            n = dic[c[k]][2] + 1\n            dic[c[k]] = [k, ans, n]\n        if c[k] == 0:\n            count += k\n        count += dic[c[k]][1]\n    print(count)", "def rev_index(myList):\n    V = {}\n    for (index, val) in enumerate(myList):\n        if val not in V.keys():\n            V[val] = [index]\n        else:\n            V[val] += [index]\n    return V\n\ndef No_tri(IV):\n    num = 0\n    if 0 in IV.keys():\n        IV[0] += [-1]\n    for (key, IL) in IV.items():\n        IL.sort(reverse=True)\n        length = len(IL) - 1\n        l = len(IL)\n        for i in IL:\n            num += length * i\n            length -= 2\n        num -= int(l * (l - 1) / 2)\n    return num\ntry:\n    T = int(input())\nexcept:\n    quit()\nwhile T != 0:\n    N = int(input())\n    L = [int(x) for x in input().split()]\n    for (index, val) in enumerate(L):\n        if index == 0:\n            continue\n        else:\n            L[index] = L[index - 1] ^ val\n    temp = rev_index(L)\n    res = No_tri(temp)\n    print(res)\n    T -= 1", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    Result = 0\n    XOR_list = [0] * 1000000\n    Length = [0] * 1000000\n    B = [0] * 1000000\n    XOR = 0\n    XOR_list[0] = 1\n    B[0] = -1\n    for i in range(N):\n        j = 0\n        XOR = XOR ^ A[i]\n        if XOR_list[XOR]:\n            j = i - B[XOR]\n            Length[XOR] = Length[XOR] + (XOR_list[XOR] * j - 1)\n            Result = Result + Length[XOR]\n        B[XOR] = i\n        XOR_list[XOR] = XOR_list[XOR] + 1\n    print(Result)", "def tppp(ivvv):\n    nmmm = 0\n    if 0 in ivvv.keys():\n        ivvv[0] += [-1]\n    for (key, indlll) in ivvv.items():\n        indlll.sort(reverse=True)\n        length = len(indlll) - 1\n        l = len(indlll)\n        for i in indlll:\n            nmmm += length * i\n            length -= 2\n        nmmm = nmmm - int(l * (l - 1) / 2)\n    return nmmm\n\ndef rvv(mllll):\n    map_of_values = {}\n    for (index, val) in enumerate(mllll):\n        if val not in map_of_values.keys():\n            map_of_values[val] = [index]\n        else:\n            map_of_values[val] += [index]\n    return map_of_values\ntry:\n    tttt = int(input())\nexcept:\n    quit()\nwhile tttt != 0:\n    number_of_integers = int(input())\n    illll = [int(x) for x in input().split()]\n    for (index, val) in enumerate(illll):\n        if index == 0:\n            continue\n        else:\n            illll[index] = illll[index - 1] ^ val\n    tmpppp = rvv(illll)\n    anss = tppp(tmpppp)\n    print(anss)\n    tttt -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    my_arr = list()\n    my_list = list()\n    res = 0\n    my_arr = [0] * 1000000\n    my_list = [0] * 1000000\n    arr2 = list(range(1000001))\n    my_arr[x[0]] = 0\n    my_list[x[0]] += 1\n    prev1 = 0\n    xr = 0\n    pos = 0\n    for i in range(1, n):\n        xr = x[i] ^ xr\n        prev2 = 0\n        pos = 0\n        pos = arr2[xr]\n        prev2 = prev1\n        res += i * my_list[pos] - my_arr[pos]\n        my_arr[prev2] += i\n        my_list[prev2] += 1\n        prev1 = pos\n    print(res)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    fin = 0\n    for j in range(n):\n        l1.append(0)\n    d1 = {}\n    d2 = {}\n    d3 = {}\n    d4 = {}\n    d5 = {}\n    d6 = {}\n    l1[0] = l[0]\n    for j in range(1, n):\n        l1[j] = l1[j - 1] ^ l[j]\n    d1[0] = [0]\n    d2[0] = d3[0] = d4[0] = 0\n    d5[0] = []\n    for j in range(n):\n        temp = 0 ^ l1[j]\n        if l1[j] in d1.keys():\n            d1[l1[j]].append(j + 1 - d2[l1[j]])\n        else:\n            d1[l1[j]] = [0]\n            d2[l1[j]] = j + 1\n        if l1[j] not in d5.keys():\n            d5[l1[j]] = []\n            d3[l1[j]] = 0\n            d4[l1[j]] = 0\n        else:\n            d5[l1[j]].append(d1[l1[j]][-1] - d1[l1[j]][-2])\n            d3[l1[j]] += 1\n            d4[l1[j]] += d5[l1[j]][-1] * d3[l1[j]]\n        if temp in d6.keys():\n            if l1[j] == 0:\n                fin += d4[l1[j]] - d6[temp] - d5[l1[j]][-1]\n            else:\n                fin += d4[l1[j]] - d6[temp]\n        if l1[j] == 0:\n            fin += d5[l1[j]][-1] - 1\n        d6[l1[j]] = d6.get(l1[j], 0) + 1\n    print(fin)", "def xor(arr, n):\n    result = 0\n    arrxor = [0 for _ in range(n)]\n    arrxor[0] = arr[0]\n    i = 1\n    while i < n:\n        arrxor[i] = arrxor[i - 1] ^ arr[i]\n        i += 1\n    mydict = {}\n    mydict[0] = [-1]\n    for (ind, elem) in enumerate(arrxor):\n        if elem in mydict:\n            mydict[elem].append(ind)\n        else:\n            mydict.update({elem: [ind]})\n    for (key, value) in mydict.items():\n        if len(value) > 1:\n            k = len(value) - 1\n            x = 0\n            i = k\n            while i > 0:\n                result += k * mydict[key][i] - k * mydict[key][x]\n                x += 1\n                k -= 1\n                i -= 1\n            result -= int(len(value) * (len(value) - 1) / (2 * 1))\n    return result\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    a = list(map(int, input().split()))\n    print(xor(a, n))", "for t in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    sol = 0\n    (p_s, c_s) = (li[0], 0)\n    tmp = dict()\n    tmp[p_s] = [0, 1]\n    for i in range(1, n):\n        c_s = p_s ^ li[i]\n        if c_s == 0:\n            sol += i\n        if c_s in tmp.keys():\n            sol += tmp[c_s][1] * (i - 1) - tmp[c_s][0]\n            tmp[c_s][0] += i\n            tmp[c_s][1] += 1\n        else:\n            tmp[c_s] = [i, 1]\n        p_s = c_s\n    print(sol)", "def reverse_indexed_map(myList):\n    map_of_values = {}\n    for (index, val) in enumerate(myList):\n        if val not in map_of_values.keys():\n            map_of_values[val] = [index]\n        else:\n            map_of_values[val] += [index]\n    return map_of_values\n\ndef number_of_triplets(indexed_values):\n    num = 0\n    if 0 in indexed_values.keys():\n        indexed_values[0] += [-1]\n    for (key, indices_list) in indexed_values.items():\n        indices_list.sort(reverse=True)\n        length = len(indices_list) - 1\n        l = len(indices_list)\n        for i in indices_list:\n            num += length * i\n            length -= 2\n        num -= int(l * (l - 1) / 2)\n    return num\ntry:\n    tests = int(input())\nexcept:\n    quit()\nwhile tests != 0:\n    number_of_integers = int(input())\n    input_list = [int(x) for x in input().split()]\n    for (index, val) in enumerate(input_list):\n        if index == 0:\n            continue\n        else:\n            input_list[index] = input_list[index - 1] ^ val\n    temp = reverse_indexed_map(input_list)\n    answer = number_of_triplets(temp)\n    print(answer)\n    tests -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pxor = [0]\n    for i in range(n):\n        pxor += [arr[i] ^ pxor[i]]\n    m = max(pxor)\n    count = [0] * (m + 1)\n    ind = [-1] * (m + 1)\n    val = [0] * (m + 1)\n    res = [0] * (m + 1)\n    for i in range(n + 1):\n        val[pxor[i]] += (i - ind[pxor[i]]) * count[pxor[i]]\n        if val[pxor[i]]:\n            res[pxor[i]] += val[pxor[i]] - count[pxor[i]]\n        ind[pxor[i]] = i\n        count[pxor[i]] += 1\n    sums = 0\n    for i in res:\n        sums += i\n    print(sums)\n    t -= 1", "from collections import defaultdict as dd\n\ndef sumPair(arr, n):\n    s = 0\n    for i in range(n - 1, -1, -1):\n        s += i * arr[i] - (n - 1 - i) * arr[i]\n    return s\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = dd(list)\n    arr = list(map(int, input().split()))\n    d[0] = [-1]\n    x_sum = 0\n    ans = 0\n    tc = 0\n    s = 0\n    for i in range(n):\n        x_sum ^= arr[i]\n        temp = d.get(x_sum)\n        if d.get(x_sum) != None:\n            d[x_sum].append(i)\n        else:\n            d[x_sum] = [i]\n    for i in d:\n        l = len(d[i])\n        if l > 1:\n            sp = sumPair(d[i], l)\n            c = l * (l - 1) // 2\n            tc += c\n            s += sp\n    print(s - tc)", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pxor = [0]\n    for i in range(n):\n        pxor += [arr[i] ^ pxor[i]]\n    m = max(pxor)\n    count = [0] * (m + 1)\n    ind = [-1] * (m + 1)\n    val = [0] * (m + 1)\n    res = [0] * (m + 1)\n    for i in range(n + 1):\n        val[pxor[i]] += (i - ind[pxor[i]]) * count[pxor[i]]\n        if val[pxor[i]]:\n            res[pxor[i]] += val[pxor[i]] - count[pxor[i]]\n        ind[pxor[i]] = i\n        count[pxor[i]] += 1\n    sums = 0\n    for i in res:\n        sums += i\n    print(sums)\n    t -= 1", "def tppp(ivvv):\n    nmmm = 0\n    if 0 in ivvv.keys():\n        ivvv[0] += [-1]\n    for (key, indlll) in ivvv.items():\n        indlll.sort(reverse=True)\n        length = len(indlll) - 1\n        l = len(indlll)\n        for i in indlll:\n            nmmm += length * i\n            length -= 2\n        nmmm = nmmm - int(l * (l - 1) / 2)\n    return nmmm\n\ndef rvv(mllll):\n    map_of_values = {}\n    for (index, val) in enumerate(mllll):\n        if val not in map_of_values.keys():\n            map_of_values[val] = [index]\n        else:\n            map_of_values[val] += [index]\n    return map_of_values\ntry:\n    tttt = int(input())\nexcept:\n    quit()\nwhile tttt != 0:\n    number_of_integers = int(input())\n    illll = [int(x) for x in input().split()]\n    for (index, val) in enumerate(illll):\n        if index == 0:\n            continue\n        else:\n            illll[index] = illll[index - 1] ^ val\n    tmpppp = rvv(illll)\n    anss = tppp(tmpppp)\n    print(anss)\n    tttt -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pxor = [0]\n    for i in range(n):\n        pxor += [arr[i] ^ pxor[i]]\n    m = max(pxor)\n    count = [0] * (m + 1)\n    ind = [-1] * (m + 1)\n    val = [0] * (m + 1)\n    res = [0] * (m + 1)\n    for i in range(n + 1):\n        val[pxor[i]] += (i - ind[pxor[i]]) * count[pxor[i]]\n        if val[pxor[i]]:\n            res[pxor[i]] += val[pxor[i]] - count[pxor[i]]\n        ind[pxor[i]] = i\n        count[pxor[i]] += 1\n    sums = 0\n    for i in res:\n        sums += i\n    print(sums)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    lst = list(map(int, input().rstrip().split()))\n    xlst = [0 for j in range(n)]\n    xlst[0] = lst[0]\n    for j in range(1, n):\n        xlst[j] = xlst[j - 1] ^ lst[j]\n    xlst.insert(0, 0)\n    di = {}\n    for j in xlst:\n        di[j] = []\n    for j in range(n + 1):\n        tem = xlst[j]\n        di[tem].append(j)\n    num = 0\n    for ind in di:\n        j = di[ind]\n        te = len(j)\n        if te < 2:\n            continue\n        su = sum(j) + te\n        way = 0\n        sta = -1\n        for k in range(te - 1):\n            f1 = j[k] - sta\n            tem = f1 * (te - k)\n            su = su - tem\n            way += su - (te - k - 1)\n            sta = j[k]\n        num = num + way\n    an = num\n    print(an)", "def maker_dictttt(a):\n    ind = {}\n    for i in range(len(a)):\n        try:\n            if ind[a[i]]:\n                ind[a[i]].append(i)\n        except KeyError:\n            ind[a[i]] = [i]\n    return ind\n\ndef nC2(n):\n    return int(n * (n - 1) / 2)\n\ndef ardderr(arr):\n    rest = 0\n    n = len(arr)\n    prefix = -(n - 1)\n    for i in arr:\n        rest = rest + prefix * i\n        prefix = prefix + 2\n    return int(rest - nC2(n))\nfor t in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    a = []\n    xor = 0\n    for i in x:\n        xor ^= i\n        a.append(xor)\n    ans = 0\n    rest = maker_dictttt(a)\n    for j in rest.keys():\n        if j == 0:\n            ans = ans + ardderr(rest[j])\n            ans = ans + sum(rest[j])\n        else:\n            ans = ans + ardderr(rest[j])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    xrr = list(map(int, input().split()))\n    a1 = list()\n    a2 = list()\n    res = 0\n    a = xrr[0]\n    a1 = [0] * 1000000\n    a2 = [0] * 1000000\n    a3 = list(range(1000001))\n    a1[xrr[0]] = 0\n    a2[xrr[0]] += 1\n    prev1 = 0\n    xr = 0\n    pos = 0\n    for i in range(1, n):\n        xr = xrr[i] ^ xr\n        prev2 = 0\n        pos = 0\n        pos = a3[xr]\n        prev2 = prev1\n        res += i * a2[pos] - a1[pos]\n        a1[prev2] += i\n        a2[prev2] += 1\n        prev1 = pos\n    print(res)", "t = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pxor = [0]\n    for i in range(n):\n        pxor += [arr[i] ^ pxor[i]]\n    d = dict()\n    for i in range(n + 1):\n        if pxor[i] in d.keys():\n            d[pxor[i]][2] = (i - d[pxor[i]][1]) * d[pxor[i]][0] + d[pxor[i]][2]\n            d[pxor[i]][1] = i\n            d[pxor[i]][3] += d[pxor[i]][2] - d[pxor[i]][0]\n            d[pxor[i]][0] += 1\n        else:\n            d[pxor[i]] = [1, i, 0, 0]\n    sums = 0\n    for i in d.values():\n        sums += i[3]\n    print(sums)\n    t -= 1", "def maker_dictttt(a):\n    ind = {}\n    for i in range(len(a)):\n        try:\n            if ind[a[i]]:\n                ind[a[i]].append(i)\n        except KeyError:\n            ind[a[i]] = [i]\n    return ind\n\ndef nC2(n):\n    return int(n * (n - 1) / 2)\n\ndef ardderr(arr):\n    rest = 0\n    n = len(arr)\n    prefix = -(n - 1)\n    for i in arr:\n        rest = rest + prefix * i\n        prefix = prefix + 2\n    return int(rest - nC2(n))\nfor t in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    a = []\n    xor = 0\n    for i in x:\n        xor ^= i\n        a.append(xor)\n    ans = 0\n    rest = maker_dictttt(a)\n    for j in rest.keys():\n        if j == 0:\n            ans = ans + ardderr(rest[j])\n            ans = ans + sum(rest[j])\n        else:\n            ans = ans + ardderr(rest[j])\n    print(ans)", "class C:\n\n    def __init__(self, k):\n        self.sum = k + 1\n        self.cnt = 1\n        self.res = 0\n\n    def nxt(self, k):\n        self.res += k * self.cnt - self.sum\n        self.sum += k + 1\n        self.cnt += 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = {}\n    x = 0\n    for (i, v) in enumerate(map(int, input().split())):\n        if x in d:\n            d[x].nxt(i)\n        else:\n            d[x] = C(i)\n        x ^= v\n    if x in d:\n        d[x].nxt(n)\n    print(sum((x.res for x in d.values())))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = list()\n    x1 = b[0]\n    a.append(0)\n    a.append(b[0])\n    for i in range(1, n):\n        x1 ^= b[i]\n        a.append(x1)\n    c = {}\n    for i in range(len(a)):\n        c.setdefault(a[i], []).append(i)\n    (x, x3) = (0, 0)\n    for i in c:\n        x1 = 1\n        x2 = 1\n        if len(c[i]) > 1:\n            for j in range(1, len(c[i])):\n                x += (c[i][j] - 1 - c[i][0]) * x1\n                x1 += 1\n            for k in range(len(c[i]) - 2, 0, -1):\n                x3 += (c[i][k] - c[i][0]) * x2\n                x2 += 1\n    print(x - x3)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    ans = 0\n    xor_arr = [0] * 1000000\n    lgth = [0] * 1000000\n    a = [0] * 1000000\n    xor = 0\n    xor_arr[0] = 1\n    a[0] = -1\n    for i in range(n):\n        c = 0\n        xor = xor ^ A[i]\n        if xor_arr[xor]:\n            c = i - a[xor]\n            lgth[xor] = lgth[xor] + (xor_arr[xor] * c - 1)\n            ans += lgth[xor]\n        a[xor] = i\n        xor_arr[xor] += 1\n    print(ans)", "def prefix(lis):\n    pre = [lis[0]]\n    for i in range(1, len(lis)):\n        pre.append(pre[i - 1] + lis[i])\n    sum = 0\n    for i in range(1, len(lis)):\n        sum = sum + (i * lis[i] - pre[i - 1] - i)\n    return sum\nt = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    di = {}\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n        if di.__contains__(xor) == False:\n            di[xor] = [i]\n        else:\n            lis = di[xor]\n            lis.append(i)\n            di[xor] = lis\n            lis = []\n    res = list(di.values())\n    ans = 0\n    if di.__contains__(0):\n        ans += sum(list(di[0]))\n    for i in range(len(res)):\n        ans += prefix(res[i])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = list()\n    x1 = b[0]\n    a.append(0)\n    a.append(b[0])\n    for i in range(1, n):\n        x1 ^= b[i]\n        a.append(x1)\n    c = {}\n    for i in range(len(a)):\n        c.setdefault(a[i], []).append(i)\n    (x, x3) = (0, 0)\n    for i in c:\n        x1 = 1\n        x2 = 1\n        if len(c[i]) > 1:\n            for j in range(1, len(c[i])):\n                x += (c[i][j] - 1 - c[i][0]) * x1\n                x1 += 1\n            for k in range(len(c[i]) - 2, 0, -1):\n                x3 += (c[i][k] - c[i][0]) * x2\n                x2 += 1\n    print(x - x3)", "def reverse_indexed_map(myList):\n    map_of_values = {}\n    for (index, val) in enumerate(myList):\n        if val not in map_of_values.keys():\n            map_of_values[val] = [index]\n        else:\n            map_of_values[val] += [index]\n    return map_of_values\n\ndef number_of_triplets(indexed_values):\n    num = 0\n    if 0 in indexed_values.keys():\n        indexed_values[0] += [-1]\n    for (key, indices_list) in indexed_values.items():\n        indices_list.sort(reverse=True)\n        length = len(indices_list) - 1\n        l = len(indices_list)\n        for i in indices_list:\n            num += length * i\n            length -= 2\n        num -= int(l * (l - 1) / 2)\n    return num\nfor i in range(0, int(input())):\n    n = int(input())\n    input_list = [int(x) for x in input().split()]\n    for (index, val) in enumerate(input_list):\n        if index == 0:\n            continue\n        else:\n            input_list[index] = input_list[index - 1] ^ val\n    temp = reverse_indexed_map(input_list)\n    answer = number_of_triplets(temp)\n    print(answer)", "def prefix(lis):\n    pre = [lis[0]]\n    for i in range(1, len(lis)):\n        pre.append(pre[i - 1] + lis[i])\n    sum = 0\n    for i in range(1, len(lis)):\n        sum = sum + (i * lis[i] - pre[i - 1] - i)\n    return sum\nt = int(input())\nfor q in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    di = {}\n    xor = 0\n    for i in range(n):\n        xor = xor ^ arr[i]\n        if di.__contains__(xor) == False:\n            di[xor] = [i]\n        else:\n            lis = di[xor]\n            lis.append(i)\n            di[xor] = lis\n            lis = []\n    res = list(di.values())\n    ans = 0\n    if di.__contains__(0):\n        ans += sum(list(di[0]))\n    for i in range(len(res)):\n        ans += prefix(res[i])\n    print(ans)", "def reverse_indexed_map(myList):\n    map_of_values = {}\n    for (index, val) in enumerate(myList):\n        if val not in map_of_values.keys():\n            map_of_values[val] = [index]\n        else:\n            map_of_values[val] += [index]\n    return map_of_values\n\ndef number_of_triplets(indexed_values):\n    num = 0\n    if 0 in indexed_values.keys():\n        indexed_values[0] += [-1]\n    for (key, indices_list) in indexed_values.items():\n        indices_list.sort(reverse=True)\n        length = len(indices_list) - 1\n        l = len(indices_list)\n        for i in indices_list:\n            num += length * i\n            length -= 2\n        num -= int(l * (l - 1) / 2)\n    return num\nfor i in range(0, int(input())):\n    n = int(input())\n    input_list = [int(x) for x in input().split()]\n    for (index, val) in enumerate(input_list):\n        if index == 0:\n            continue\n        else:\n            input_list[index] = input_list[index - 1] ^ val\n    temp = reverse_indexed_map(input_list)\n    answer = number_of_triplets(temp)\n    print(answer)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = list()\n    x1 = b[0]\n    a.append(0)\n    a.append(b[0])\n    for i in range(1, n):\n        x1 ^= b[i]\n        a.append(x1)\n    c = {}\n    for i in range(len(a)):\n        c.setdefault(a[i], []).append(i)\n    (x, x3) = (0, 0)\n    for i in c:\n        x1 = 1\n        x2 = 1\n        if len(c[i]) > 1:\n            for j in range(1, len(c[i])):\n                x += (c[i][j] - 1 - c[i][0]) * x1\n                x1 += 1\n            for k in range(len(c[i]) - 2, 0, -1):\n                x3 += (c[i][k] - c[i][0]) * x2\n                x2 += 1\n    print(x - x3)", "import math\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    A = [int(x) for x in input().split()]\n    ans = 0\n    a = [0] * 1000000\n    b = [0] * 1000000\n    m = [0] * 1000000\n    j = 0\n    a[0] = 1\n    m[0] = -1\n    for i in range(n):\n        s = 0\n        j = j ^ A[i]\n        if a[j]:\n            s = i - m[j]\n            b[j] = b[j] + (a[j] * s - 1)\n            ans += b[j]\n        m[j] = i\n        a[j] += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = [0]\n    p = [[0, 0]]\n    prev = 0\n    ans = 0\n    counter = 0\n    for i in range(1, n + 1):\n        x.append(x[i - 1] ^ l[i - 1])\n        p.append([x[i], i])\n    p.sort()\n    for i in range(1, len(p)):\n        if p[i][0] == p[i - 1][0]:\n            counter += 1\n        else:\n            counter = 0\n            prev = 0\n            continue\n        prev = prev + (p[i][1] - p[i - 1][1] - 1) * counter + counter - 1\n        ans += prev\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    x = [0]\n    p = [[0, 0]]\n    prev = 0\n    ans = 0\n    counter = 0\n    for i in range(1, n + 1):\n        x.append(x[i - 1] ^ l[i - 1])\n        p.append([x[i], i])\n    p = sorted(p)\n    for i in range(1, len(p)):\n        if p[i][0] == p[i - 1][0]:\n            counter += 1\n        else:\n            counter = 0\n            prev = 0\n            continue\n        prev = prev + (p[i][1] - p[i - 1][1] - 1) * counter + counter - 1\n        ans += prev\n    print(ans)"]