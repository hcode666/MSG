["d1 = {}\n\ndef solve1(fn, f, c, N, t):\n    if N == 0 or N == c:\n        return -1\n    t2 = 1 if t == 2 else 2\n    m = []\n    if fn == 1:\n        d1k = (f[0] - 1, c, N - 1, t2)\n        if d1k in d1:\n            m += d1[d1k]\n        else:\n            m += [solve1(1, [f[0] - 1], c, N - 1, t2)]\n            d1[d1k] = m\n    elif fn == 2:\n        if f[0] > 0:\n            m += [solve1(1, [f[0] + f[2] - 1], c + f[1], N - 1, t2)]\n        if f[1] > 0:\n            m += [solve1(1, [f[1] + f[2] - 1], c + f[0], N - 1, t2)]\n        if f[2] > 0:\n            m += [solve1(2, [f[0], f[1], f[2] - 1], c, N - 1, t2)]\n    elif fn == 3:\n        if f[0] > 0:\n            m += [solve1(1, [f[0] + f[3] + f[4] + f[6] - 1], c + f[1] + f[2] + f[5], N - 1, t2)]\n        if f[1] > 0:\n            m += [solve1(1, [f[1] + f[3] + f[5] + f[6] - 1], c + f[0] + f[2] + f[4], N - 1, t2)]\n        if f[2] > 0:\n            m += [solve1(1, [f[2] + f[4] + f[5] + f[6] - 1], c + f[0] + f[1] + f[3], N - 1, t2)]\n        if f[3] > 0:\n            m += [solve1(2, [f[0] + f[4], f[1] + f[5], f[3] + f[6] - 1], c + f[2], N - 1, t2)]\n        if f[4] > 0:\n            m += [solve1(2, [f[0] + f[3], f[2] + f[5], f[4] + f[6] - 1], c + f[1], N - 1, t2)]\n        if f[5] > 0:\n            m += [solve1(2, [f[1] + f[3], f[2] + f[4], f[5] + f[6] - 1], c + f[0], N - 1, t2)]\n        if f[6] > 0:\n            m += [solve1(3, [f[0], f[1], f[2], f[3], f[4], f[5], f[6] - 1], c, N - 1, t2)]\n    return 1 if -1 in m else -1\nd2 = {}\n\ndef solve2(fn, f, c, N, p, t):\n    if N == 0 or N == c:\n        return p if t == 2 else 0\n    r = 0\n    if t == 2:\n        r += p * c / N\n    t2 = 1 if t == 2 else 2\n    if fn == 1:\n        d2k = (f[0] - 1, c, N - 1, p * f[0] / N, t2)\n        if d2k in d2:\n            r += d2[d2k]\n        else:\n            rt = solve2(1, [f[0] - 1], c, N - 1, p * f[0] / N, t2)\n            d2[d2k] = rt\n            r += rt\n    elif fn == 2:\n        if f[0] > 0:\n            r += solve2(1, [f[0] + f[2] - 1], c + f[1], N - 1, p * f[0] / N, t2)\n        if f[1] > 0:\n            r += solve2(1, [f[1] + f[2] - 1], c + f[0], N - 1, p * f[1] / N, t2)\n        if f[2] > 0:\n            r += solve2(2, [f[0], f[1], f[2] - 1], c, N - 1, p * f[2] / N, t2)\n    elif fn == 3:\n        if f[0] > 0:\n            r += solve2(1, [f[0] + f[3] + f[4] + f[6] - 1], c + f[1] + f[2] + f[5], N - 1, p * f[0] / N, t2)\n        if f[1] > 0:\n            r += solve2(1, [f[1] + f[3] + f[5] + f[6] - 1], c + f[0] + f[2] + f[4], N - 1, p * f[1] / N, t2)\n        if f[2] > 0:\n            r += solve2(1, [f[2] + f[4] + f[5] + f[6] - 1], c + f[0] + f[1] + f[3], N - 1, p * f[2] / N, t2)\n        if f[3] > 0:\n            r += solve2(2, [f[0] + f[4], f[1] + f[5], f[3] + f[6] - 1], c + f[2], N - 1, p * f[3] / N, t2)\n        if f[4] > 0:\n            r += solve2(2, [f[0] + f[3], f[2] + f[5], f[4] + f[6] - 1], c + f[1], N - 1, p * f[4] / N, t2)\n        if f[5] > 0:\n            r += solve2(2, [f[1] + f[3], f[2] + f[4], f[5] + f[6] - 1], c + f[0], N - 1, p * f[5] / N, t2)\n        if f[6] > 0:\n            r += solve2(3, [f[0], f[1], f[2], f[3], f[4], f[5], f[6] - 1], c, N - 1, p * f[6] / N, t2)\n    return r\n\ndef main():\n    prc = [0 for i in range(101)]\n    for i in range(2, 101):\n        if prc[i] == 1:\n            continue\n        for j in range(i + i, 101, i):\n            prc[j] = 1\n    prm = []\n    for i in range(2, 101):\n        if prc[i] == 0:\n            prm += [i]\n    fac = [[] for i in range(101)]\n    for i in range(2, 101):\n        for p in prm:\n            if p > i:\n                continue\n            if i % p == 0:\n                fac[i] += [p]\n    T = int(input())\n    while T > 0:\n        N = int(input())\n        inp = input().split(' ')\n        a = [int(n) for n in inp]\n        r1 = 0\n        r2 = 0\n        d1.clear()\n        d2.clear()\n        for i in range(N):\n            x = a[i]\n            if x == 1:\n                continue\n            fn = len(fac[x])\n            f = [0 for j in range(2 ** fn - 1)]\n            c = 0\n            for j in range(N):\n                if i == j:\n                    continue\n                y = a[j]\n                if fn == 3:\n                    if fac[x][0] in fac[y]:\n                        if fac[x][1] in fac[y]:\n                            if fac[x][2] in fac[y]:\n                                f[6] += 1\n                            else:\n                                f[3] += 1\n                        elif fac[x][2] in fac[y]:\n                            f[4] += 1\n                        else:\n                            f[0] += 1\n                    elif fac[x][1] in fac[y]:\n                        if fac[x][2] in fac[y]:\n                            f[5] += 1\n                        else:\n                            f[1] += 1\n                    elif fac[x][2] in fac[y]:\n                        f[2] += 1\n                    else:\n                        c += 1\n                elif fn == 2:\n                    if fac[x][0] in fac[y]:\n                        if fac[x][1] in fac[y]:\n                            f[2] += 1\n                        else:\n                            f[0] += 1\n                    elif fac[x][1] in fac[y]:\n                        f[1] += 1\n                    else:\n                        c += 1\n                elif fn == 1:\n                    if fac[x][0] in fac[y]:\n                        f[0] += 1\n                    else:\n                        c += 1\n            if r1 == 0 and solve1(fn, f, c, N - 1, 2) == -1:\n                r1 = 1\n            r2 += solve2(fn, f, c, N - 1, 1 / N, 2)\n        print('%d %.4f' % (r1, r2))\n        T -= 1\nmain()", "d1 = {}\n\ndef solve1(fn, f, c, N, t):\n    if N == 0 or N == c:\n        return -1\n    t2 = 1 if t == 2 else 2\n    m = []\n    if fn == 1:\n        d1k = (f[0] - 1, c, N - 1, t2)\n        if d1k in d1:\n            m += d1[d1k]\n        else:\n            m += [solve1(1, [f[0] - 1], c, N - 1, t2)]\n            d1[d1k] = m\n    elif fn == 2:\n        if f[0] > 0:\n            m += [solve1(1, [f[0] + f[2] - 1], c + f[1], N - 1, t2)]\n        if f[1] > 0:\n            m += [solve1(1, [f[1] + f[2] - 1], c + f[0], N - 1, t2)]\n        if f[2] > 0:\n            m += [solve1(2, [f[0], f[1], f[2] - 1], c, N - 1, t2)]\n    elif fn == 3:\n        if f[0] > 0:\n            m += [solve1(1, [f[0] + f[3] + f[4] + f[6] - 1], c + f[1] + f[2] + f[5], N - 1, t2)]\n        if f[1] > 0:\n            m += [solve1(1, [f[1] + f[3] + f[5] + f[6] - 1], c + f[0] + f[2] + f[4], N - 1, t2)]\n        if f[2] > 0:\n            m += [solve1(1, [f[2] + f[4] + f[5] + f[6] - 1], c + f[0] + f[1] + f[3], N - 1, t2)]\n        if f[3] > 0:\n            m += [solve1(2, [f[0] + f[4], f[1] + f[5], f[3] + f[6] - 1], c + f[2], N - 1, t2)]\n        if f[4] > 0:\n            m += [solve1(2, [f[0] + f[3], f[2] + f[5], f[4] + f[6] - 1], c + f[1], N - 1, t2)]\n        if f[5] > 0:\n            m += [solve1(2, [f[1] + f[3], f[2] + f[4], f[5] + f[6] - 1], c + f[0], N - 1, t2)]\n        if f[6] > 0:\n            m += [solve1(3, [f[0], f[1], f[2], f[3], f[4], f[5], f[6] - 1], c, N - 1, t2)]\n    return 1 if -1 in m else -1\nd2 = {}\n\ndef solve2(fn, f, c, N, p, t):\n    if N == 0 or N == c:\n        return p if t == 2 else 0\n    r = 0\n    if t == 2:\n        r += p * c / N\n    t2 = 1 if t == 2 else 2\n    if fn == 1:\n        d2k = (f[0] - 1, c, N - 1, p * f[0] / N, t2)\n        if d2k in d2:\n            r += d2[d2k]\n        else:\n            rt = solve2(1, [f[0] - 1], c, N - 1, p * f[0] / N, t2)\n            d2[d2k] = rt\n            r += rt\n    elif fn == 2:\n        if f[0] > 0:\n            r += solve2(1, [f[0] + f[2] - 1], c + f[1], N - 1, p * f[0] / N, t2)\n        if f[1] > 0:\n            r += solve2(1, [f[1] + f[2] - 1], c + f[0], N - 1, p * f[1] / N, t2)\n        if f[2] > 0:\n            r += solve2(2, [f[0], f[1], f[2] - 1], c, N - 1, p * f[2] / N, t2)\n    elif fn == 3:\n        if f[0] > 0:\n            r += solve2(1, [f[0] + f[3] + f[4] + f[6] - 1], c + f[1] + f[2] + f[5], N - 1, p * f[0] / N, t2)\n        if f[1] > 0:\n            r += solve2(1, [f[1] + f[3] + f[5] + f[6] - 1], c + f[0] + f[2] + f[4], N - 1, p * f[1] / N, t2)\n        if f[2] > 0:\n            r += solve2(1, [f[2] + f[4] + f[5] + f[6] - 1], c + f[0] + f[1] + f[3], N - 1, p * f[2] / N, t2)\n        if f[3] > 0:\n            r += solve2(2, [f[0] + f[4], f[1] + f[5], f[3] + f[6] - 1], c + f[2], N - 1, p * f[3] / N, t2)\n        if f[4] > 0:\n            r += solve2(2, [f[0] + f[3], f[2] + f[5], f[4] + f[6] - 1], c + f[1], N - 1, p * f[4] / N, t2)\n        if f[5] > 0:\n            r += solve2(2, [f[1] + f[3], f[2] + f[4], f[5] + f[6] - 1], c + f[0], N - 1, p * f[5] / N, t2)\n        if f[6] > 0:\n            r += solve2(3, [f[0], f[1], f[2], f[3], f[4], f[5], f[6] - 1], c, N - 1, p * f[6] / N, t2)\n    return r\n\ndef main():\n    prc = [0 for i in range(101)]\n    for i in range(2, 101):\n        if prc[i] == 1:\n            continue\n        for j in range(i + i, 101, i):\n            prc[j] = 1\n    prm = []\n    for i in range(2, 101):\n        if prc[i] == 0:\n            prm += [i]\n    fac = [[] for i in range(101)]\n    for i in range(2, 101):\n        for p in prm:\n            if p > i:\n                continue\n            if i % p == 0:\n                fac[i] += [p]\n    T = int(input())\n    while T > 0:\n        N = int(input())\n        inp = input().split(' ')\n        a = [int(n) for n in inp]\n        r1 = 0\n        r2 = 0\n        d1.clear()\n        d2.clear()\n        for i in range(N):\n            x = a[i]\n            if x == 1:\n                continue\n            fn = len(fac[x])\n            f = [0 for j in range(2 ** fn - 1)]\n            c = 0\n            for j in range(N):\n                if i == j:\n                    continue\n                y = a[j]\n                if fn == 3:\n                    if fac[x][0] in fac[y]:\n                        if fac[x][1] in fac[y]:\n                            if fac[x][2] in fac[y]:\n                                f[6] += 1\n                            else:\n                                f[3] += 1\n                        elif fac[x][2] in fac[y]:\n                            f[4] += 1\n                        else:\n                            f[0] += 1\n                    elif fac[x][1] in fac[y]:\n                        if fac[x][2] in fac[y]:\n                            f[5] += 1\n                        else:\n                            f[1] += 1\n                    elif fac[x][2] in fac[y]:\n                        f[2] += 1\n                    else:\n                        c += 1\n                elif fn == 2:\n                    if fac[x][0] in fac[y]:\n                        if fac[x][1] in fac[y]:\n                            f[2] += 1\n                        else:\n                            f[0] += 1\n                    elif fac[x][1] in fac[y]:\n                        f[1] += 1\n                    else:\n                        c += 1\n                elif fn == 1:\n                    if fac[x][0] in fac[y]:\n                        f[0] += 1\n                    else:\n                        c += 1\n            if r1 == 0 and solve1(fn, f, c, N - 1, 2) == -1:\n                r1 = 1\n            r2 += solve2(fn, f, c, N - 1, 1 / N, 2)\n        print('%d %.4f' % (r1, r2))\n        T -= 1\nmain()"]