["import math\n\ndef solve(ini, rate, N, W, min_val):\n    total = 0\n    low = 0\n    high = int(math.pow(10, 18))\n    while low <= high:\n        mid = low + (high - low) // 2\n        total = 0\n        for j in range(N):\n            Mon = rate[j] * mid + ini[j]\n            if Mon >= min_val:\n                total += Mon\n            if total >= W:\n                break\n        if total < W:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n(N, W, Min) = map(int, input().split())\ni_l = []\nR_l = []\nfor i in range(N):\n    (a, b) = map(int, input().split())\n    i_l.append(a)\n    R_l.append(b)\nans = solve(i_l, R_l, N, W, Min)\nprint(ans)", "(n, w, l) = map(int, input().strip().split())\ntrees = []\nfor i in range(n):\n    (h, s) = map(int, input().strip().split())\n    trees.append((h, s))\nL = 0\nR = 10 ** 18 + 11\nwhile L <= R:\n    ans = 0\n    M = L + R >> 1\n    for (h, s) in trees:\n        if h + s * M >= l:\n            ans += h + s * M\n        if ans > w:\n            break\n    if ans > w:\n        R = M - 1\n    elif ans < w:\n        L = M + 1\n    else:\n        break\nans = 0\nfor (h, s) in trees:\n    if h + s * M >= l:\n        ans += h + s * M\nif ans < w:\n    M += 1\nprint(M)", "(n, w, l) = map(int, input().strip().split())\ntrees = []\nfor i in range(n):\n    (h, s) = map(int, input().strip().split())\n    trees.append((h, s))\nL = 0\nR = 10 ** 18 + 11\nwhile L <= R:\n    ans = 0\n    M = L + R >> 1\n    for (h, s) in trees:\n        if h + s * M >= l:\n            ans += h + s * M\n        if ans > w:\n            break\n    if ans > w:\n        R = M - 1\n    elif ans < w:\n        L = M + 1\n    else:\n        break\nans = 0\nfor (h, s) in trees:\n    if h + s * M >= l:\n        ans += h + s * M\nif ans < w:\n    M += 1\nprint(M)", "def solve(x):\n    temp = w\n    for (h, r) in ls:\n        ht = h + r * x\n        if ht >= l:\n            temp -= ht\n            if temp <= 0:\n                return True\n    return False\n(n, w, l) = map(int, input().split())\nls = []\nfor _ in range(n):\n    (h, r) = map(int, input().split())\n    ls.append((h, r))\n(L, R) = (-1, 10 ** 18 + 1)\nwhile R - L > 1:\n    M = L + (R - L) // 2\n    if solve(M):\n        R = M\n    else:\n        L = M\nprint(R)", "import sys\ninput = sys.stdin.readline\n\ndef prod(months, l, harr, rarr):\n    ret = 0\n    for i in range(len(harr)):\n        temp = harr[i] + rarr[i] * months\n        if temp >= l:\n            ret += temp\n    return ret\n\ndef maxind(arr):\n    max = -1\n    ans = 0\n    for i in range(len(arr)):\n        if arr[i] > max:\n            max = arr[i]\n            ans = i\n    return i\n(n, w, l) = map(int, input().split(' '))\nh_arr = []\nr_arr = []\nfor i in range(n):\n    (a, b) = input().split()\n    h_arr.append(int(a))\n    r_arr.append(int(b))\nlow = 0\nhigh = 10 ** 19\nmid = 0\nans = 10 ** 19\nwhile low <= high:\n    mid = (high + low) // 2\n    temp = 0\n    if prod(mid, l, h_arr, r_arr) >= w:\n        high = mid - 1\n        ans = mid\n    else:\n        low = mid + 1\nprint(ans)", "import sys\ninput = sys.stdin.readline\n(n, w, l) = map(int, input().split(' '))\nh = []\nr = []\nfor i in range(n):\n    o = list(map(int, input().split(' ')))\n    h.append(o[0])\n    r.append(o[1])\n(p, q) = (0, 10 ** 19)\nwhile p <= q:\n    m = (p + q) // 2\n    sn = 0\n    for j in range(n):\n        if h[j] + r[j] * m >= l:\n            sn += h[j] + r[j] * m\n    if sn >= w:\n        f = m\n        q = m - 1\n    else:\n        p = m + 1\nprint(f)", "(n, w, l) = map(int, input().split(' '))\nh = []\nr = []\nfor i in range(n):\n    o = list(map(int, input().split(' ')))\n    h.append(o[0])\n    r.append(o[1])\n(p, q) = (0, 10 ** 19)\nwhile p <= q:\n    m = (p + q) // 2\n    sn = 0\n    for j in range(n):\n        if h[j] + r[j] * m >= l:\n            sn += h[j] + r[j] * m\n    if sn >= w:\n        f = m\n        q = m - 1\n    else:\n        p = m + 1\nprint(f)", "(n, w, l) = map(int, input().split())\nh = [0] * (n + 2)\nr = [0] * (n + 2)\nfor i in range(1, n + 1):\n    (h[i], r[i]) = map(int, input().split())\n\ndef get(t):\n    res = 0\n    for i in range(1, n + 1):\n        if h[i] + r[i] * t >= l:\n            res += h[i] + r[i] * t\n    return res\nans = 1e+18\n(lo, hi, mid) = (0, int(1e+18), 0)\nwhile lo <= hi:\n    mid = lo + (hi - lo) // 2\n    if get(mid) >= w:\n        hi = mid - 1\n        ans = min(ans, mid)\n    else:\n        lo = mid + 1\nprint(ans)", "(n, w, l) = [int(i) for i in input().split(' ')]\nh = [None] * n\nr = [None] * n\nfor i in range(n):\n    (h[i], r[i]) = [int(i) for i in input().split(' ')]\nlo = 0\nhi = 10 ** 30\nans = hi\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    sum = 0\n    for i in range(n):\n        if h[i] + r[i] * mid >= l:\n            sum += h[i] + r[i] * mid\n    if sum >= w:\n        ans = mid\n        hi = mid - 1\n    else:\n        lo = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "import math\n\ndef func(H, R, m, w, l):\n    wood = 0\n    for i in range(len(H)):\n        if H[i] + R[i] * m >= l:\n            wood += H[i] + R[i] * m\n    if wood >= w:\n        return True\n    return False\n(n, w, l) = map(int, input().split())\nH = []\nR = []\nm = 0\nfor _ in range(n):\n    (h, r) = map(int, input().split())\n    if r:\n        H.append(h)\n        R.append(r)\n        m = max(math.ceil((l - h) / r), math.ceil((w - h) / r), m)\nleft = 0\nright = m + 1\nans = 0\nwhile left <= right:\n    if left == right:\n        ans = left\n        break\n    if right == left + 1:\n        if func(H, R, left, w, l):\n            ans = left\n            break\n        else:\n            ans = right\n            break\n    mid = left + (right - left) // 2\n    if func(H, R, mid, w, l):\n        right = mid\n    else:\n        left = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "def compute(h, r, w, l, mid):\n    c = 0\n    for i in range(len(h)):\n        curr = h[i] + r[i] * mid\n        if curr >= l:\n            c += curr\n    return c >= w\n(n, w, l) = map(int, input().split())\n(h, r) = ([], [])\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    h.append(a)\n    r.append(b)\n(st, en) = (0, w)\nwhile st < en:\n    mid = (st + en) // 2\n    if compute(h, r, w, l, mid):\n        en = mid\n    else:\n        st = mid + 1\ni = max(mid - 2, 0)\nwhile not compute(h, r, w, l, i):\n    i += 1\nprint(i)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "a = input().split()\nN = int(a[0])\nW = int(a[1])\nL = int(a[2])\nHarr = []\nRarr = []\nfor i in range(N):\n    y = input().split()\n    Harr.append(int(y[0]))\n    Rarr.append(int(y[1]))\n\ndef check(mid):\n    wood = 0\n    for i in range(len(Harr)):\n        h = Harr[i] + Rarr[i] * mid\n        if h >= L:\n            wood += h\n    if wood >= W:\n        return True\n    return False\nlo = 0\nhi = 10 ** 18 + 1\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if check(mid):\n        ans = 0\n        ans += mid\n        hi = mid - 1\n    else:\n        lo = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    (h, r) = map(int, input().split())\n    a.append([h, r])\n\ndef isgood(month):\n    ans = 0\n    for i in range(n):\n        if a[i][0] + month * a[i][1] >= l:\n            ans += a[i][0] + month * a[i][1]\n        if ans >= w:\n            return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isgood(mid) == True:\n        high = mid\n    else:\n        low = mid\nprint(high)", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef can_cut(trees, time, l, w):\n    tree_cut = 0\n    for tree in trees:\n        tree_len = tree[0] + time * tree[1]\n        if tree_len >= l:\n            tree_cut += tree_len\n    return tree_cut >= w\n\ndef func():\n    (n, w, l) = mul()\n    trees = []\n    for j in range(n):\n        (h, r) = mul()\n        trees.append([h, r])\n    start = -1\n    end = 10 ** 18\n    while start + 1 < end:\n        mid = (start + end) // 2\n        if can_cut(trees, mid, l, w):\n            end = mid\n        else:\n            start = mid\n    return end\nt = 1\nfor i in range(t):\n    print(func())", "import sys\nimport math\nimport bisect\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom bisect import bisect_left as bl, bisect_right as br\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrng = lambda : input().strip()\njn = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmul = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\n\ndef can_cut(trees, time, l, w):\n    tree_cut = 0\n    for tree in trees:\n        tree_len = tree[0] + time * tree[1]\n        if tree_len >= l:\n            tree_cut += tree_len\n    return tree_cut >= w\n\ndef func():\n    (n, w, l) = mul()\n    trees = []\n    for j in range(n):\n        (h, r) = mul()\n        trees.append([h, r])\n    start = -1\n    end = 10 ** 18\n    while start + 1 < end:\n        mid = (start + end) // 2\n        if can_cut(trees, mid, l, w):\n            end = mid\n        else:\n            start = mid\n    return end\nt = 1\nfor i in range(t):\n    print(func())", "def solve(l1, l2, x, y):\n    s = 0\n    for i in range(0, len(l1)):\n        if l1[i] + x * l2[i] >= y:\n            s += l1[i] + x * l2[i]\n    return s\n(n, w, l) = map(int, input().split())\nv1 = []\nv2 = []\nfor _ in range(n):\n    (h, r) = map(int, input().split())\n    v1.append(h)\n    v2.append(r)\nlo = 0\nhi = 1000000000000000000\nans = 0\nwhile lo <= hi:\n    mid = lo + (hi - lo) // 2\n    if solve(v1, v2, mid, l) >= w:\n        hi = mid - 1\n        ans = mid\n    elif solve(v1, v2, mid, l) < w:\n        lo = mid + 1\nprint(ans)", "arr = [int(i) for i in input().split()]\nH = arr[-1]\nW = arr[1]\nh = []\nr = []\nfor _ in range(arr[0]):\n    arr = [int(i) for i in input().split()]\n    h.append(arr[0])\n    r.append(arr[1])\n    arr = []\n\ndef ans(m):\n    res = 0\n    for i in range(len(h)):\n        he = h[i] + r[i] * m\n        if he >= H:\n            res += he\n        if res >= W:\n            return True\n    return False\n\ndef binarysearch():\n    (low, high, res) = (-1, 10 ** 18 + 11, float('inf'))\n    while high - low > 1:\n        mid = low + high >> 1\n        if ans(mid):\n            res = min(res, mid)\n            high = mid\n        else:\n            low = mid\n    return res\nprint(binarysearch())", "arr = [int(i) for i in input().split()]\nH = arr[-1]\nW = arr[1]\nh = []\nr = []\nfor _ in range(arr[0]):\n    arr = [int(i) for i in input().split()]\n    h.append(arr[0])\n    r.append(arr[1])\n    arr = []\n\ndef ans(m):\n    res = 0\n    for i in range(len(h)):\n        he = h[i] + r[i] * m\n        if he >= H:\n            res += he\n        if res >= W:\n            return True\n    return False\n\ndef binarysearch():\n    (low, high, res) = (-1, 10 ** 18 + 11, float('inf'))\n    while high - low > 1:\n        mid = low + high >> 1\n        if ans(mid):\n            res = min(res, mid)\n            high = mid\n        else:\n            low = mid\n    return res\nprint(binarysearch())", "arr = [int(i) for i in input().split()]\nH = arr[-1]\nW = arr[1]\nh = []\nr = []\nfor _ in range(arr[0]):\n    arr = [int(i) for i in input().split()]\n    h.append(arr[0])\n    r.append(arr[1])\n    arr = []\n\ndef ans(m):\n    res = 0\n    for i in range(len(h)):\n        he = h[i] + r[i] * m\n        if he >= H:\n            res += he\n        if res >= W:\n            return True\n    return False\n\ndef binarysearch():\n    (low, high, res) = (-1, 10 ** 18 + 11, float('inf'))\n    while high - low > 1:\n        mid = low + high >> 1\n        if ans(mid):\n            res = min(res, mid)\n            high = mid\n        else:\n            low = mid\n    return res\nprint(binarysearch())", "arr = [int(i) for i in input().split()]\nH = arr[-1]\nW = arr[1]\nh = []\nr = []\nfor _ in range(arr[0]):\n    arr = [int(i) for i in input().split()]\n    h.append(arr[0])\n    r.append(arr[1])\n    arr = []\n\ndef ans(m):\n    res = 0\n    for i in range(len(h)):\n        he = h[i] + r[i] * m\n        if he >= H:\n            res += he\n        if res >= W:\n            return True\n    return False\n\ndef binarysearch():\n    (low, high, res) = (-1, 10 ** 18 + 11, float('inf'))\n    while high - low > 1:\n        mid = low + high >> 1\n        if ans(mid):\n            res = min(res, mid)\n            high = mid\n        else:\n            low = mid\n    return high\nprint(binarysearch())", "trees = []\nn = 0\nw = 0\nl = 0\n\ndef check(m):\n    wood = 0\n    for i in range(n):\n        h = trees[i][0] + trees[i][1] * m\n        if h >= l:\n            wood += h\n    return wood >= w\n(n, w, l) = map(int, input().split())\nfor _ in range(n):\n    (i, j) = map(int, input().split())\n    trees += [(i, j)]\nlow = 0\nhigh = 10 ** 18 + 1\nans = 0\nwhile low <= high:\n    mid = low + (high - low) // 2\n    if check(mid):\n        ans = mid\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(ans)", "def solve(l1, l2, x, y):\n    s = 0\n    for i in range(0, len(l1)):\n        if l1[i] + x * l2[i] >= y:\n            s += l1[i] + x * l2[i]\n    return s\n(n, w, l) = map(int, input().split())\nv1 = []\nv2 = []\nfor _ in range(n):\n    (h, r) = map(int, input().split())\n    v1.append(h)\n    v2.append(r)\nlo = 0\nhi = 1000000000000000000\nans = 0\nwhile lo <= hi:\n    mid = lo + (hi - lo) // 2\n    if solve(v1, v2, mid, l) >= w:\n        hi = mid - 1\n        ans = mid\n    elif solve(v1, v2, mid, l) < w:\n        lo = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\nht = [0] * n\nrt = [0] * n\nfor i in range(n):\n    (ht[i], rt[i]) = map(int, input().split())\nleft = 0\nright = 10 ** 18 - 1\nwhile left < right:\n    mid = (left + right) // 2\n    s = 0\n    for i in range(n):\n        val = ht[i] + mid * rt[i]\n        if val >= l:\n            s += val\n    if s >= w:\n        right = mid\n    else:\n        left = mid + 1\nprint(left)", "(n, w, l) = map(int, input().split())\nht = [0] * n\nrt = [0] * n\nfor i in range(n):\n    (ht[i], rt[i]) = map(int, input().split())\nleft = 0\nright = 10 ** 18 - 1\nwhile left < right:\n    mid = (left + right) // 2\n    s = 0\n    for i in range(n):\n        val = ht[i] + mid * rt[i]\n        if val >= l:\n            s += val\n    if s >= w:\n        right = mid\n    else:\n        left = mid + 1\nprint(left)", "import math\n(N, required_wood, min_cut_limit) = map(int, input().rstrip().split())\ninitial_height = []\nrate_increase = []\nfor i in range(N):\n    (a, b) = map(int, input().rstrip().split())\n    initial_height.append(a)\n    rate_increase.append(b)\n\ndef forest(N, initial_height, rate_increase, min_cut_limit, required_wood):\n    required_months = []\n\n    def check(mid):\n        curr_sum = 0\n        for i in range(N):\n            temp = initial_height[i] + rate_increase[i] * mid\n            if temp >= min_cut_limit:\n                curr_sum += temp\n            if curr_sum >= required_wood:\n                return True\n        return False\n    end = -1\n    for i in range(N):\n        end = max(end, math.ceil((required_wood - initial_height[i]) / rate_increase[i]))\n    start = 0\n    if end == 0:\n        return end\n    result = end\n    while start <= end:\n        mid = start + (end - start) // 2\n        if check(mid):\n            result = mid\n            end = mid - 1\n        else:\n            start = mid + 1\n    return result\nprint(forest(N, initial_height, rate_increase, min_cut_limit, required_wood))", "import math\n\ndef isvalid(a, m, l, w):\n    c = 0\n    for i in a:\n        if m * i[1] + i[0] >= l:\n            c += m * i[1] + i[0]\n    if c < w:\n        return False\n    else:\n        return True\n(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\ne = -1\nfor i in a:\n    e = max(e, math.ceil((w - i[0]) / i[1]))\ns = 0\nans = -1\nwhile s <= e:\n    m = (s + e) // 2\n    if isvalid(a, m, l, w):\n        ans = m\n        e = m - 1\n    else:\n        s = m + 1\nprint(ans)", "import math\n\ndef isvalid(a, m, l, w):\n    c = 0\n    for i in a:\n        if m * i[1] + i[0] >= l:\n            c += m * i[1] + i[0]\n    if c < w:\n        return False\n    else:\n        return True\n(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\ne = -1\nfor i in a:\n    e = max(e, math.ceil((w - i[0]) / i[1]))\ns = 0\nans = -1\nwhile s <= e:\n    m = (s + e) // 2\n    if isvalid(a, m, l, w):\n        ans = m\n        e = m - 1\n    else:\n        s = m + 1\nprint(ans)", "(N, W, L) = map(int, input().rstrip().rsplit())\ntrees = [list(map(int, input().rstrip().rsplit())) for i in range(N)]\n(l, r) = (-1, 10 ** 18)\nwhile l + 1 < r:\n    mid = (l + r) // 2\n    count = 0\n    for i in trees:\n        leng = i[0] + mid * i[1]\n        if leng >= L:\n            count += leng\n            if count >= W:\n                break\n    if count < W:\n        l = mid\n    else:\n        r = mid\nprint(r)", "(N, W, L) = map(int, input().rstrip().rsplit())\ntrees = [list(map(int, input().rstrip().rsplit())) for i in range(N)]\n(l, r) = (-1, 10 ** 18)\nwhile l + 1 < r:\n    mid = (l + r) // 2\n    count = 0\n    for i in trees:\n        leng = i[0] + mid * i[1]\n        if leng >= L:\n            count += leng\n            if count >= W:\n                break\n    if count < W:\n        l = mid\n    else:\n        r = mid\nprint(r)", "(N, W, L) = map(int, input().rstrip().rsplit())\ntrees = [list(map(int, input().rstrip().rsplit())) for i in range(N)]\n(l, r) = (-1, 10 ** 18)\nwhile r - l > 1:\n    mid = (l + r) // 2\n    count = 0\n    for i in trees:\n        leng = i[0] + mid * i[1]\n        if leng >= L:\n            count += leng\n    if count < W:\n        l = mid\n    else:\n        r = mid\nprint(r)", "(n, q, l) = map(int, input().split())\ntrees = []\nfor i in range(n):\n    (h, s) = map(int, input().split())\n    trees.append((h, s))\n\ndef good(t):\n    remain = q\n    for (h, s) in trees:\n        height = h + s * t\n        if height >= l:\n            remain -= height\n            if remain <= 0:\n                return True\n    return False\nL = -1\nR = 10 ** 18 + 11\nwhile R - L > 1:\n    M = L + R >> 1\n    if good(M):\n        R = M\n    else:\n        L = M\nprint(R)", "import math\n\ndef isvalid(a, m, l, w):\n    c = 0\n    for i in a:\n        if m * i[1] + i[0] >= l:\n            c += m * i[1] + i[0]\n    if c < w:\n        return False\n    else:\n        return True\n(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\ne = -1\nfor i in a:\n    e = max(e, math.ceil((w - i[0]) / i[1]))\ns = 0\nans = -1\nwhile s <= e:\n    m = (s + e) // 2\n    if isvalid(a, m, l, w):\n        ans = m\n        e = m - 1\n    else:\n        s = m + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\nh = [0] * n\nr = [0] * n\nfor i in range(n):\n    (h[i], r[i]) = map(int, input().split())\n(low, high) = (-1, 10 ** 18)\nwhile high - low > 1:\n    mid = (low + high) // 2\n\n    def f(mid):\n        total = 0\n        for i in range(n):\n            height = h[i] + mid * r[i]\n            if height >= l:\n                total += height\n            if total >= w:\n                return 1\n        return 0\n    if f(mid):\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, le) = list(map(int, input().split()))\na = [0] * n\nr = [0] * n\nfor i in range(n):\n    (u, v) = list(map(int, input().split()))\n    a[i] = u\n    r[i] = v\nl = 0\nh = int(1e+18) + 10\nwhile l < h:\n    mid = (l + h) // 2\n    sum = 0\n    for i in range(n):\n        if a[i] + mid * r[i] >= le:\n            sum += a[i] + mid * r[i]\n    if sum >= w:\n        h = mid\n    else:\n        l = mid + 1\nprint(l)", "(n, w, l) = map(int, input().split())\nm = float('Inf')\nv = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    m = min(b, m)\n    v.append((a, b))\n\ndef check(mid):\n    s = 0\n    for i in range(n):\n        if v[i][0] + v[i][1] * mid >= l:\n            s += v[i][0] + v[i][1] * mid\n            if s >= w:\n                return True\n    return False\nlo = 0\nhi = w // m\nres = 0\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if check(mid):\n        hi = mid - 1\n        res = mid\n    else:\n        lo = mid + 1\nprint(res)", "(n, w, l) = list(map(int, input().split()))\narr = list()\nfor i in range(n):\n    arr.append(list(map(int, input().split())))\n\ndef can_cut(t_m):\n    s = 0\n    for t in arr:\n        th = t[0] + t[1] * t_m\n        if th >= l:\n            s += th\n    if s >= w:\n        return True\n    else:\n        return False\nt_L = -1\nt_R = 1\nwhile not can_cut(t_R):\n    t_R *= 2\nwhile t_R - t_L > 1:\n    t_M = (t_L + t_R) // 2\n    if can_cut(t_M):\n        t_R = t_M\n    else:\n        t_L = t_M\nprint(int(t_R))", "def valid(months):\n    wood = 0\n    for i in range(n):\n        height = h[i] + r[i] * months\n        if height >= l:\n            wood += height\n            if wood >= w:\n                return True\n    return False\n(n, w, l) = map(int, input().split())\nh = [0] * n\nr = [0] * n\nfor i in range(n):\n    (h[i], r[i]) = map(int, input().split())\nlow = mid = ans = 0\nhigh = w // min(r)\nwhile low <= high:\n    mid = low + (high - low) // 2\n    if valid(mid):\n        ans = mid\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(ans)", "def valid(months):\n    wood = 0\n    for i in range(n):\n        height = h[i] + r[i] * months\n        if height >= l:\n            wood += height\n            if wood >= w:\n                return True\n    return False\n(n, w, l) = map(int, input().split())\nh = [0] * n\nr = [0] * n\nfor i in range(n):\n    (h[i], r[i]) = map(int, input().split())\nlow = mid = ans = 0\nhigh = 10 ** 18\nwhile low <= high:\n    mid = low + (high - low) // 2\n    if valid(mid):\n        ans = mid\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(ans)", "def get_months():\n    m = 1\n    while True:\n        h2 = [h + g * m for (h, g) in zip(height, growth)]\n        if sum([h for h in h2 if h >= l]) >= w:\n            break\n        m *= 2\n    if m == 1:\n        return 1\n    high = m\n    low = m // 2\n    while low < high:\n        mid = (low + high) // 2\n        h2 = [h + g * mid for (h, g) in zip(height, growth)]\n        if sum([h for h in h2 if h >= l]) >= w:\n            high = mid - 1\n        else:\n            low = mid + 1\n    low2 = [h + g * (low - 1) for (h, g) in zip(height, growth)]\n    if sum([h for h in low2 if h >= l]) >= w:\n        low = low - 1\n    else:\n        low3 = [h + g * low for (h, g) in zip(height, growth)]\n        low4 = [h + g * (low + 1) for (h, g) in zip(height, growth)]\n        sum3 = sum([h for h in low3 if h >= l])\n        sum4 = sum([h for h in low4 if h >= l])\n        if sum3 < w and sum4 >= w:\n            low = low + 1\n    return low\n(n, w, l) = (int(i) for i in input().split())\nheight = []\ngrowth = []\nfor _ in range(n):\n    (h, g) = (int(i) for i in input().split())\n    height.append(h)\n    growth.append(g)\nwood = sum([h for h in height if h >= l])\nif wood >= w:\n    print(0)\nelse:\n    print(get_months())", "(n, w, l) = map(int, input().split())\nh = list()\nr = list()\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    h.append(x)\n    r.append(y)\n\ndef valid(months):\n    wood = 0\n    for i in range(n):\n        height = h[i] + r[i] * months\n        if height >= l:\n            wood += height\n            if wood >= w:\n                return True\n    return False\nlow = mid = ans = 0\nhigh = 10 ** 18\nwhile low <= high:\n    mid = low + (high - low) // 2\n    if valid(mid):\n        ans = mid\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\nh = list()\nr = list()\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    h.append(x)\n    r.append(y)\n\ndef valid(months):\n    wood = 0\n    for i in range(n):\n        height = h[i] + r[i] * months\n        if height >= l:\n            wood += height\n            if wood >= w:\n                return True\n    return False\nlow = mid = ans = 0\nhigh = 10 ** 18\nwhile low <= high:\n    mid = low + (high - low) // 2\n    if valid(mid):\n        ans = mid\n        high = mid - 1\n    else:\n        low = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\ntrees = []\nfor _ in range(n):\n    (h, r) = map(int, input().split())\n    trees.append((h, r))\n\ndef isitok(m):\n    s = w\n    for (h, r) in trees:\n        height = h + r * m\n        if height >= l:\n            s -= height\n        if s <= 0:\n            return True\n    return False\nlo = 0\nhi = 10 ** 18 + 11\nans = 10 ** 19\nwhile lo <= hi:\n    mid = (lo + hi) // 2\n    if isitok(mid):\n        hi = mid - 1\n        ans = min(ans, mid)\n    else:\n        lo = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\ntrees = []\nfor _ in range(n):\n    (h, r) = map(int, input().split())\n    trees.append((h, r))\n\ndef isitok(m):\n    s = w\n    for (h, r) in trees:\n        height = h + r * m\n        if height >= l:\n            s -= height\n        if s <= 0:\n            return True\n    return False\nlo = -1\nhi = 10 ** 18 + 11\nwhile hi - lo > 1:\n    mid = (lo + hi) // 2\n    if isitok(mid):\n        hi = mid\n    else:\n        lo = mid\nprint(hi)", "def cut_poss(t, l, w, m):\n    x = 0\n    for i in range(len(t)):\n        t_2 = t[i][0] + m * t[i][1]\n        if t_2 >= l:\n            x += t_2\n    if x >= w:\n        return True\n    return False\n(n, w, l) = map(int, input().split())\nt_1 = []\nfor i in range(n):\n    (a, b) = map(int, input().split())\n    t_1.append([a, b])\nt_r = 1\nwhile cut_poss(t_1, l, w, t_r) != True:\n    t_r *= 2\nt_l = 0\nwhile t_r > t_l:\n    mid = t_l + (t_r - t_l) // 2\n    if cut_poss(t_1, l, w, mid) == True:\n        t_r = mid\n    else:\n        t_l = mid + 1\nprint(t_r)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    sum = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            sum = sum + h[i] + t * r[i]\n            if sum >= w:\n                return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isValid(mid):\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = map(int, input().split())\na = []\nfor i in range(n):\n    a.append(list(map(int, input().split())))\nfirst = 0\nlast = 10 ** 18\nwhile first <= last:\n    mid = (first + last) // 2\n    su = 0\n    for i in range(n):\n        s = a[i][0] + mid * a[i][1]\n        if s >= l:\n            su += s\n    if su >= w:\n        ans = mid\n        last = mid - 1\n    else:\n        first = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\n(h, r) = ([], [])\nfor i in range(n):\n    (u, v) = map(int, input().split())\n    h.append(u)\n    r.append(v)\n(low, high) = (0, 10 ** 18)\nwhile low < high:\n    mid = (low + high) // 2\n    sum_trees = 0\n    for i in range(n):\n        if h[i] + mid * r[i] >= l:\n            sum_trees += h[i] + mid * r[i]\n    if sum_trees >= w:\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "(n, w, l) = map(int, input().split())\n(h, r) = ([], [])\nfor i in range(n):\n    (u, v) = map(int, input().split())\n    h.append(u)\n    r.append(v)\n(low, high) = (0, 10 ** 18)\nwhile low < high:\n    mid = (low + high) // 2\n    sum_trees = 0\n    for i in range(n):\n        if h[i] + mid * r[i] >= l:\n            sum_trees += h[i] + mid * r[i]\n    if sum_trees >= w:\n        high = mid\n    else:\n        low = mid + 1\nprint(low)", "def is_enough(heights, rates, w, l, cur_t):\n    total = 0\n    for i in range(len(rates)):\n        cur_height = heights[i] + rates[i] * cur_t\n        if cur_height >= l:\n            total += cur_height\n        if total >= w:\n            return True\n    return False\n(n, w, l) = map(int, input().split())\n(heights, rates) = ([0] * n, [0] * n)\nfor i in range(n):\n    (heights[i], rates[i]) = map(int, input().split())\n(high, low) = (10 ** 18, -1)\nwhile high - low > 1:\n    cur_m = (high + low) // 2\n    if is_enough(heights, rates, w, l, cur_m):\n        high = cur_m\n    else:\n        low = cur_m\nprint(high)", "from sys import stdout, stdin\nfrom math import ceil, floor\n\ndef solve(x):\n    temp = w\n    for (h, r) in ls:\n        ht = h + r * x\n        if ht >= l:\n            temp -= ht\n            if temp <= 0:\n                return True\n    return False\n(n, w, l) = map(int, stdin.readline().split())\nls = []\nfor _ in range(n):\n    (h, r) = map(int, stdin.readline().split())\n    ls.append((h, r))\n(L, R) = (-1, 10 ** 18 + 1)\nwhile R - L > 1:\n    M = L + (R - L) // 2\n    if solve(M):\n        R = M\n    else:\n        L = M\nprint(R)", "from sys import stdout, stdin\nfrom math import ceil, floor\n\ndef solve(x):\n    temp = w\n    for (h, r) in ls:\n        ht = h + r * x\n        if ht >= l:\n            temp -= ht\n            if temp <= 0:\n                return True\n    return False\n(n, w, l) = map(int, stdin.readline().split())\nls = []\nfor _ in range(n):\n    (h, r) = map(int, stdin.readline().split())\n    ls.append((h, r))\n(L, R) = (-1, 10 ** 18 + 1)\nwhile R - L > 1:\n    M = L + (R - L) // 2\n    if solve(M):\n        R = M\n    else:\n        L = M\nprint(R)", "(N, W, L) = map(int, input().split())\n(h, r) = ([], [])\n(s, t, c) = (0, -1, -1)\nfor i in range(N):\n    (H, R) = map(int, input().split())\n    if H >= L:\n        s += H\n    y = (L - H) // R\n    if t == -1 or y < t:\n        t = y\n    if c == -1 or y > c:\n        c = y\n    h.append(H)\n    r.append(R)\na = 0\nif s >= W:\n    print(0)\nelse:\n    c = 10 ** 18\n    while t <= c:\n        s = 0\n        m = (t + c) // 2\n        for i in range(N):\n            x = h[i] + r[i] * m\n            if x >= L:\n                s += x\n            if s >= W:\n                break\n        if s >= W:\n            a = m\n            c = m - 1\n        else:\n            t = m + 1\n    print(a)", "x = input()\ninp = list(map(int, x.split(' ')))\n(n, w, l) = (inp[0], inp[1], inp[2])\nhr = []\nfor i in range(n):\n    x = input()\n    h_i = int(x.split(' ')[0])\n    r_i = int(x.split(' ')[1])\n    hr.append([h_i, r_i])\n\ndef search(left, right):\n    if left > right:\n        return left\n    center = (left + right) // 2\n    arr = [item[0] + center * item[1] for item in hr]\n    valid_trees = [i for i in arr if i >= l]\n    if sum(valid_trees) == w:\n        return center\n    elif sum(valid_trees) > w:\n        return search(left, center - 1)\n    else:\n        return search(center + 1, right)\nleft = 0\nright = 10 ** 18 + 1\nprint(search(left, right))", "x = input()\ninp = list(map(int, x.split(' ')))\n(n, w, l) = (inp[0], inp[1], inp[2])\nhr = []\nfor i in range(n):\n    x = input()\n    h_i = int(x.split(' ')[0])\n    r_i = int(x.split(' ')[1])\n    hr.append([h_i, r_i])\n\ndef search(left, right):\n    if left > right:\n        return left\n    center = (left + right) // 2\n    arr = [item[0] + center * item[1] for item in hr]\n    valid_trees = [i for i in arr if i >= l]\n    if sum(valid_trees) == w:\n        return center\n    elif sum(valid_trees) > w:\n        return search(left, center - 1)\n    else:\n        return search(center + 1, right)\nleft = 0\nright = 10 ** 18 + 1\nprint(search(left, right))", "def getMaxWood(t):\n    res = 0\n    for i in range(N):\n        if h[i] + r[i] * t >= L:\n            res += h[i] + r[i] * t\n    return res\n\ndef bs(i, j):\n    if i > j:\n        return i\n    mid = (i + j) // 2\n    t = getMaxWood(mid)\n    if t == W:\n        return mid\n    if t > W:\n        return bs(i, mid - 1)\n    return bs(mid + 1, j)\n(N, W, L) = list(map(int, input().split()))\nh = [0 for i in range(N)]\nr = [0 for i in range(N)]\nfor q in range(N):\n    t = input().split()\n    (h[q], r[q]) = (int(t[0]), int(t[1]))\nprint(bs(0, 10 ** 18 + 1))", "(n, w, l) = map(int, input().split())\n(h, r) = ([], [])\n(s, m1, m2) = (0, -1, -1)\nfor i in range(n):\n    (hi, ri) = map(int, input().split())\n    if hi >= l:\n        s += hi\n    y = (l - hi) // ri\n    if m1 == -1 or y < m1:\n        m1 = y\n    if m2 == -1 or y > m2:\n        m2 = y\n    h.append(hi)\n    r.append(ri)\nres = 0\nif s >= w:\n    print(0)\nelse:\n    m2 = 10 ** 18\n    while m1 <= m2:\n        s = 0\n        m = (m1 + m2) // 2\n        for i in range(n):\n            x = h[i] + r[i] * m\n            if x >= l:\n                s += x\n            if s >= w:\n                break\n        if s >= w:\n            res = m\n            m2 = m - 1\n        else:\n            m1 = m + 1\n    print(res)", "(n, w, l) = map(int, input().split())\n(h, r) = ([], [])\n(s, m1, m2) = (0, -1, -1)\nfor i in range(n):\n    (hi, ri) = map(int, input().split())\n    if hi >= l:\n        s += hi\n    y = (l - hi) // ri\n    if m1 == -1 or y < m1:\n        m1 = y\n    h.append(hi)\n    r.append(ri)\nres = 0\nif s >= w:\n    print(0)\nelse:\n    m2 = 10000000000000000000\n    while m1 <= m2:\n        s = 0\n        m = (m1 + m2) // 2\n        for i in range(n):\n            x = h[i] + r[i] * m\n            if x >= l:\n                s += x\n            if s >= w:\n                break\n        if s >= w:\n            res = m\n            m2 = m - 1\n        else:\n            m1 = m + 1\n    print(res)", "def fun(n, i, l, L):\n    a = 0\n    for _ in range(n):\n        p = L[_][0] + i * L[_][1]\n        a += p if p >= l else 0\n    return a\nx = input().split()\nn = int(x[0])\nw = int(x[1])\nl = int(x[2])\nL = []\nfor i in range(n):\n    y = input().split()\n    L.append([int(y[0]), int(y[1])])\n(x, y) = (0, 10 ** 18)\nans = -1\nwhile x <= y:\n    mid = (x + y) // 2\n    if fun(n, mid, l, L) >= w:\n        ans = mid\n        y = mid - 1\n    else:\n        x = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\ntr = []\n\ndef check(t):\n    rem = w\n    for (h, r) in tr:\n        temp = h + r * t\n        if temp >= l:\n            rem -= temp\n        if rem <= 0:\n            return True\n    return False\nfor it in range(n):\n    (h, r) = map(int, input().split())\n    tr.append((h, r))\nlow = 0\nhigh = 10 ** 18\nans = 0\nwhile low <= high:\n    mid = low + high >> 1\n    if check(mid):\n        high = mid - 1\n        ans = mid\n    else:\n        low = mid + 1\nprint(ans)", "(n, w, l) = map(int, input().split())\ntr = []\n\ndef check(t):\n    rem = w\n    for (h, r) in tr:\n        temp = h + r * t\n        if temp >= l:\n            rem -= temp\n        if rem <= 0:\n            return True\n    return False\n\ndef solve():\n    for it in range(n):\n        (h, r) = map(int, input().split())\n        tr.append((h, r))\n    low = 0\n    high = 10 ** 18\n    ans = 0\n    while low <= high:\n        mid = low + high >> 1\n        if check(mid):\n            high = mid - 1\n            ans = mid\n        else:\n            low = mid + 1\n    print(ans)\n\ndef main():\n    solve()\nmain()", "(n, W, L) = map(int, input().split())\nH = []\nR = []\nfor _ in range(n):\n    (p, q) = map(int, input().split())\n    H.append(p)\n    R.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        l = H[i] + R[i] * t\n        if l >= L:\n            s = s + l\n        if s >= W:\n            return True\n    return False\nl = -1\nh = 10 ** 18 + 1\nwhile h - 1 > l:\n    m = (l + h) // 2\n    if isValid(m):\n        h = m\n    else:\n        l = m\nprint(h)", "(n, W, L) = map(int, input().split())\nH = []\nR = []\nfor _ in range(n):\n    (p, q) = map(int, input().split())\n    H.append(p)\n    R.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        l = H[i] + R[i] * t\n        if l >= L:\n            s = s + l\n        if s >= W:\n            return True\n    return False\nl = -1\nh = 10 ** 18 + 1\nwhile h - 1 > l:\n    m = (l + h) // 2\n    if isValid(m):\n        h = m\n    else:\n        l = m\nprint(h)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (p, q) = list(map(int, input().split()))\n    h.append(p)\n    r.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 11\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isValid(mid):\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (p, q) = list(map(int, input().split()))\n    h.append(p)\n    r.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 11\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 11\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 1\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (p, q) = list(map(int, input().split()))\n    h.append(p)\n    r.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 11\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    sum = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            sum = sum + h[i] + r[i] * t\n            if sum >= w:\n                return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 1\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isValid(mid):\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 1\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = map(int, input().split())\nh = []\nr = []\nfor i in range(n):\n    (hi, ri) = map(int, input().split())\n    h.append(hi)\n    r.append(ri)\nlow = -1\nhigh = 10 ** 18\nwhile high > low + 1:\n    m = (low + high) // 2\n    cnt = 0\n    for i in range(n):\n        req = h[i] + r[i] * m\n        if req >= l:\n            cnt += req\n        if cnt >= w:\n            break\n    if cnt >= w:\n        high = m\n    else:\n        low = m\nprint(high)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 1\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (p, q) = list(map(int, input().split()))\n    h.append(p)\n    r.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlow = -1\nhigh = 10 ** 18 + 11\nwhile high - low > 1:\n    mid = (low + high) // 2\n    if isValid(mid):\n        high = mid\n    else:\n        low = mid\nprint(high)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 1\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, W, L) = map(int, input().split())\nH = []\nR = []\nfor _ in range(n):\n    (p, q) = map(int, input().split())\n    H.append(p)\n    R.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        l = H[i] + R[i] * t\n        if l >= L:\n            s += l\n        if s >= W:\n            return True\n    return False\nl = -1\nh = 10 ** 18 + 1\nwhile h - l > 1:\n    m = (l + h) // 2\n    if isValid(m):\n        h = m\n    else:\n        l = m\nprint(h)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 11\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (a, b) = list(map(int, input().split()))\n    h.append(a)\n    r.append(b)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 1\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (p, q) = list(map(int, input().split()))\n    h.append(p)\n    r.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 11\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)", "(n, w, l) = list(map(int, input().split()))\nh = []\nr = []\nfor i in range(n):\n    (p, q) = list(map(int, input().split()))\n    h.append(p)\n    r.append(q)\n\ndef isValid(t):\n    s = 0\n    for i in range(n):\n        if h[i] + r[i] * t >= l:\n            s = s + h[i] + r[i] * t\n            if s >= w:\n                return True\n    return False\nlo = -1\nhi = 10 ** 18 + 11\nwhile hi - lo > 1:\n    m = (lo + hi) // 2\n    if isValid(m):\n        hi = m\n    else:\n        lo = m\nprint(hi)"]