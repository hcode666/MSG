["from os import path\nimport sys\nimport collections\nif path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\nans = []\n(p, s) = map(int, input().split())\nfor _ in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    di = dict(zip(sc, ns))\n    di = dict(sorted(di.items()))\n    itr = list(di.values())\n    r = len(itr)\n    n = 0\n    for i in range(r - 1):\n        if itr[i + 1] < itr[i]:\n            n += 1\n    ans.append((_ + 1, n))\nans = sorted(ans, key=lambda x: (x[1], x[0]))\nfor i in ans:\n    print(i[0])", "(p, s) = map(int, input().split())\na = []\nfor i in range(p):\n    temp = []\n    temp.append(list(map(int, input().split())))\n    temp.append(list(map(int, input().split())))\n    temp = [[temp[0][i], temp[1][i]] for i in range(s)]\n    temp.sort()\n    cnt = 0\n    for j in range(s - 1):\n        if temp[j][1] > temp[j + 1][1]:\n            cnt += 1\n    a.append([cnt, i])\na.sort()\ns = ''\nfor i in range(p):\n    print(a[i][1] + 1)", "(p, s) = map(int, input().split())\na = []\nfor i in range(p):\n    temp = []\n    temp.append(list(map(int, input().split())))\n    temp.append(list(map(int, input().split())))\n    temp = [[temp[0][i], temp[1][i]] for i in range(s)]\n    temp.sort()\n    cnt = 0\n    for j in range(s - 1):\n        if temp[j][1] > temp[j + 1][1]:\n            cnt += 1\n    a.append([cnt, i])\na.sort()\ns = ''\nfor i in range(p):\n    print(a[i][1] + 1)", "(p, s) = map(int, input().split())\na = []\nfor i in range(p):\n    temp = []\n    temp.append(list(map(int, input().split())))\n    temp.append(list(map(int, input().split())))\n    temp = [[temp[0][i], temp[1][i]] for i in range(s)]\n    temp.sort()\n    cnt = 0\n    for j in range(s - 1):\n        if temp[j][1] > temp[j + 1][1]:\n            cnt += 1\n    a.append([cnt, i])\na.sort()\ns = ''\nfor i in range(p):\n    s += str(a[i][1] + 1) + '\\n'\nprint(s)", "(p, s) = map(int, input().split())\na = []\nfor i in range(p):\n    temp = []\n    temp.append(list(map(int, input().split())))\n    temp.append(list(map(int, input().split())))\n    temp = [[temp[0][i], temp[1][i]] for i in range(s)]\n    temp.sort()\n    cnt = 0\n    for j in range(s - 1):\n        if temp[j][1] > temp[j + 1][1]:\n            cnt += 1\n    a.append([cnt, i])\na.sort()\ns = ''\nfor i in range(p):\n    s += str(a[i][1] + 1) + '\\n'\nprint(s)", "res = []\n(n, s) = map(int, input().split())\nfor _ in range(n):\n    (*sub,) = map(int, input().split())\n    (*stud,) = map(int, input().split())\n    req = sorted(list(zip(sub, stud)), key=lambda x: x[0])\n    count = 0\n    prev = req[0][1]\n    for (i, j) in req[1:]:\n        if prev > j:\n            count += 1\n            prev = j\n        else:\n            prev = j\n    res.append((count, _))\nres.sort()\nfor cur in res:\n    print(cur[1] + 1)", "def difficulty(SC, NS):\n    n = 0\n    zipped = sorted(zip(SC, NS))\n    for i in range(len(zipped) - 1):\n        if zipped[i][1] > zipped[i + 1][1]:\n            n += 1\n    return n\n(P, S) = map(int, input().split())\ndifficulties = []\nfor i in range(P):\n    SC = list(map(int, input().split()))\n    NS = list(map(int, input().split()))\n    diff = difficulty(SC, NS)\n    difficulties.append((diff, i + 1))\ndifficulties.sort()\nfor (diff, index) in difficulties:\n    print(index)", "def calc(s, arr):\n    count = 0\n    for i in range(s - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            count += 1\n    return count\n(p, s) = map(int, input().split())\nres = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    arr = sorted([(sc[i], ns[i]) for i in range(s)])\n    res.append((calc(s, arr), i))\nres.sort()\nfor cur in res:\n    print(cur[1] + 1)", "def calc(s, arr):\n    count = 0\n    for i in range(s - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            count += 1\n    return count\n(p, s) = map(int, input().split())\nres = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    arr = sorted([(sc[i], ns[i]) for i in range(s)])\n    res.append((calc(s, arr), i))\nres.sort()\nfor cur in res:\n    print(cur[1] + 1)", "(p, s) = map(int, input().split())\nans = []\nfor j in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    n = 0\n    a = []\n    for i in range(s):\n        a.append((sc[i], ns[i]))\n    a.sort()\n    for i in range(s - 1):\n        if a[i][1] > a[i + 1][1]:\n            n += 1\n    k = (n, j + 1)\n    ans.append(k)\nans.sort()\nfor i in ans:\n    print(i[1])", "def calc(s, arr):\n    count = 0\n    for i in range(s - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            count += 1\n    return count\n(p, s) = map(int, input().split())\nres = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    arr = sorted([(sc[i], ns[i]) for i in range(s)])\n    res.append((calc(s, arr), i))\nres.sort()\nfor cur in res:\n    print(cur[1] + 1)", "(p, s) = map(int, input().split())\nl = []\nz = 1\nfor _ in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    n = 0\n    sc1 = []\n    for i in range(s):\n        sc1.append([sc[i], ns[i]])\n    sc1.sort()\n    for i in range(s - 1):\n        if sc1[i][1] > sc1[i + 1][1]:\n            n += 1\n    l.append([n, z])\n    z += 1\nl.sort()\nfor j in range(len(l)):\n    print(l[j][1])", "from operator import itemgetter\n\ndef getIntArray():\n    return [int(x) for x in input().split()]\n(P, S) = getIntArray()\ndifficulties = []\nfor i in range(P):\n    SC = getIntArray()\n    NS = getIntArray()\n    Z = sorted(zip(SC, NS), key=itemgetter(0))\n    difficulty = 0\n    for x in range(len(Z) - 1):\n        if Z[x][1] > Z[x + 1][1]:\n            difficulty += 1\n    difficulties.append((difficulty, i + 1))\ndifficulties.sort(key=itemgetter(0))\nfor (a, b) in difficulties:\n    print(b)", "(p, s) = map(int, input().split())\na = []\nfor i in range(p):\n    temp = []\n    temp.append(list(map(int, input().split())))\n    temp.append(list(map(int, input().split())))\n    temp = [[temp[0][i], temp[1][i]] for i in range(s)]\n    temp.sort()\n    cnt = 0\n    for j in range(s - 1):\n        if temp[j][1] > temp[j + 1][1]:\n            cnt += 1\n    a.append([cnt, i])\na.sort()\ns = ''\nfor i in range(p):\n    s += str(a[i][1] + 1) + '\\n'\nprint(s)", "import sys\nimport copy\nimport math\nimport heapq\nimport bisect\nimport random\nimport operator\nimport statistics\nfrom sys import stdin, stdout\nfrom math import gcd, floor, sqrt, log\nfrom collections import defaultdict as dd\nfrom heapq import heapify, heappush, heappop\nfrom itertools import permutations, combinations\nfrom collections import Counter, OrderedDict, deque\nfrom bisect import bisect_left as bl, bisect_right as br\nfrom functools import lru_cache, reduce, total_ordering, update_wrapper, partial\nsys.setrecursionlimit(100000000)\ninp = lambda : int(input())\nstrr = lambda : input().strip()\njl = lambda x, l: x.join(map(str, l))\nstrl = lambda : list(input().strip())\nmuli = lambda : map(int, input().strip().split())\nmulf = lambda : map(float, input().strip().split())\nseq = lambda : list(map(int, input().strip().split()))\nceil = lambda x: int(x) if x == int(x) else int(x) + 1\nceildiv = lambda x, d: x // d if x % d == 0 else x // d + 1\nflush = lambda : stdout.flush()\nstdstr = lambda : stdin.readline()\nstdint = lambda : int(stdin.readline())\nstdpr = lambda x: stdout.write(str(x))\nmod1 = 1000000007\nmod2 = 998244353\n(p, s) = map(int, input().split())\nl = []\nz = 1\nfor _ in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    n = 0\n    sc1 = []\n    for i in range(s):\n        sc1.append([sc[i], ns[i]])\n    sc1.sort()\n    for i in range(s - 1):\n        if sc1[i][1] > sc1[i + 1][1]:\n            n += 1\n    l.append([n, z])\n    z += 1\nl.sort()\nfor j in range(len(l)):\n    print(l[j][1])", "(p, s) = map(int, input().split())\nsc = []\nn = []\ndiff = []\nfor i in range(2 * p):\n    inp = [int(i) for i in input().split()]\n    if i % 2:\n        j = sc[-1]\n        for i in range(s):\n            n.append([j[i], inp[i]])\n    else:\n        sc.append(inp)\nfor j in range(0, len(n), s):\n    tp = n[j:j + s]\n    tp.sort(key=lambda v: v[0])\n    d = 0\n    for i in range(s - 1):\n        if tp[i][1] > tp[i + 1][1]:\n            d += 1\n    diff.append([d, j // s])\ndiff.sort(key=lambda v: v[0])\nfor i in diff:\n    print(i[1] + 1)", "(pavan, sai) = list(map(int, input().split()))\nnarr = []\nfor k in range(900):\n    narr.append([-1])\nfor i2 in range(pavan):\n    sc = list(map(int, input().split()))\n    ns1 = list(map(int, input().split()))\n    ns = [x for (_, x) in sorted(zip(sc, ns1))]\n    count = 0\n    for i in range(sai - 1):\n        if ns[i] > ns[i + 1]:\n            count += 1\n    narr[count].append(i2 + 1)\nfor i in range(900):\n    for h in narr[i]:\n        if h != -1:\n            print(h)", "(pavan, sai) = list(map(int, input().split()))\nnarr = []\nfor k in range(900):\n    narr.append([-1])\nfor i2 in range(pavan):\n    sc = list(map(int, input().split()))\n    ns1 = list(map(int, input().split()))\n    ns = [x for (_, x) in sorted(zip(sc, ns1))]\n    count = 0\n    for i in range(sai - 1):\n        if ns[i] > ns[i + 1]:\n            count += 1\n    narr[count].append(i2 + 1)\nfor i in range(900):\n    for h in narr[i]:\n        if h != -1:\n            print(h)", "(p, s) = map(int, input().split())\nl = []\nz = 1\nfor _ in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    n = 0\n    sc1 = []\n    for i in range(s):\n        sc1.append([sc[i], ns[i]])\n    sc1.sort()\n    for i in range(s - 1):\n        if sc1[i][1] > sc1[i + 1][1]:\n            n += 1\n    l.append([n, z])\n    z += 1\nl.sort()\nfor j in range(len(l)):\n    print(l[j][1])", "(p, s) = map(int, input().rstrip().split())\nres = []\nfor _ in range(p):\n    a = list(map(int, input().rstrip().split()))\n    b = list(map(int, input().rstrip().split()))\n    arr = []\n    for i in range(s):\n        arr.append([a[i], b[i]])\n    n = 0\n    arr.sort(key=lambda x: x[0])\n    for i in range(1, s):\n        if arr[i - 1][1] > arr[i][1]:\n            n += 1\n    res.append([n, _ + 1])\nres.sort(key=lambda x: x[0])\nfor x in res:\n    print(x[1])", "(p, s) = map(int, input().split())\nres = []\nfor _ in range(p):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = []\n    for i in range(s):\n        arr.append([a[i], b[i]])\n    arr.sort(key=lambda x: x[0])\n    n = 0\n    for i in range(1, s):\n        if arr[i - 1][1] > arr[i][1]:\n            n += 1\n    res.append([n, _ + 1])\nres.sort(key=lambda x: x[1])\nres.sort(key=lambda x: x[0])\nfor ans in res:\n    print(ans[1])", "(p, s) = map(int, input().split())\nres = []\nfor _ in range(p):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = []\n    for i in range(s):\n        arr.append([a[i], b[i]])\n    arr.sort(key=lambda x: x[0])\n    n = 0\n    for i in range(1, s):\n        if arr[i - 1][1] > arr[i][1]:\n            n += 1\n    res.append([n, _ + 1])\nres.sort(key=lambda x: x[1])\nres.sort(key=lambda x: x[0])\nfor ans in res:\n    print(ans[1])", "(p, s) = map(int, input().split())\nres = []\nfor _ in range(p):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    arr = []\n    for i in range(s):\n        arr.append([a[i], b[i]])\n    arr.sort(key=lambda x: x[0])\n    n = 0\n    for i in range(1, s):\n        if arr[i - 1][1] > arr[i][1]:\n            n += 1\n    res.append([n, _ + 1])\nres.sort(key=lambda x: x[1])\nres.sort(key=lambda x: x[0])\nfor ans in res:\n    print(ans[1])", "def calc(s, arr):\n    count = 0\n    for i in range(s - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            count += 1\n    return count\n(p, s) = map(int, input().split())\nres = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    arr = sorted([(sc[i], ns[i]) for i in range(s)])\n    res.append((calc(s, arr), i))\nres.sort()\nfor cur in res:\n    print(cur[1] + 1)", "(P, S) = [int(_) for _ in input().split()]\nres = []\nfor __ in range(P):\n    c = [int(_) for _ in input().split()]\n    n = [int(_) for _ in input().split()]\n    arr = [[c[i], n[i]] for i in range(S)]\n    arr.sort(key=lambda x: x[0])\n    ans = 0\n    for i in range(S - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            ans += 1\n    res.append([ans, __ + 1])\nres.sort(key=lambda x: x[1])\nres.sort(key=lambda x: x[0])\nfor ans in res:\n    print(ans[1])", "(p, s) = map(int, input().split(' '))\nres = []\nfor _ in range(p):\n    sc = list(map(int, input().split(' ')))\n    ns = list(map(int, input().split(' ')))\n    arr = [[sc[i], ns[i]] for i in range(s)]\n    arr.sort(key=lambda x: x[0])\n    n = 0\n    for i in range(1, s):\n        if arr[i - 1][1] > arr[i][1]:\n            n += 1\n    res.append([n, _ + 1])\nres.sort(key=lambda x: x[1])\nres.sort(key=lambda x: x[0])\nfor ans in res:\n    print(ans[1])", "l_inp = input().split(' ')\np = int(l_inp[0])\nsub = int(l_inp[1])\ndiff = []\nfor i in range(p):\n    score = [int(i) for i in input().split(' ')]\n    ctr = 0\n    att = [int(i) for i in input().split(' ')]\n    final = list(zip(score, att))\n    final.sort(key=lambda x: x[0])\n    j = 0\n    while j < sub - 1:\n        if final[j][1] > final[j + 1][1]:\n            ctr += 1\n        j += 1\n    diff.append((ctr, i + 1))\ndiff.sort(key=lambda x: x[0])\nfor i in diff:\n    print(i[1])", "(p, s) = map(int, input().split())\ndic = {}\nfor i in range(p):\n    l1 = list(map(int, input().split()))\n    l2 = list(map(int, input().split()))\n    l2 = zip(l1, l2)\n    l2 = sorted(l2, key=lambda x: x[0])\n    cnt = 0\n    for j in range(s - 1):\n        if l2[j][1] > l2[j + 1][1]:\n            cnt += 1\n    if cnt not in dic.keys():\n        dic[cnt] = []\n    dic[cnt].append(i + 1)\nfor key in sorted(dic):\n    for j in dic[key]:\n        print(j)", "from functools import cmp_to_key\n\ndef comp(a, b):\n    if a[0] > b[0]:\n        return 1\n    elif b[0] > a[0]:\n        return -1\n    elif a[1] > b[1]:\n        return 1\n    elif a[1] < b[1]:\n        return -1\n    else:\n        return 0\n(p, s) = list(map(int, input().split()))\nproblems = []\nfor i in range(1, p + 1):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    subtasks = []\n    for k in range(s):\n        subtasks.append((sc[k], ns[k]))\n    subtasks.sort(key=lambda x: x[0])\n    n = 0\n    for k in range(s - 1):\n        if subtasks[k][1] > subtasks[k + 1][1]:\n            n += 1\n    problems.append((n, i))\nfor (n, i) in sorted(problems, key=cmp_to_key(comp)):\n    print(i)", "(p, s) = map(int, input().split())\ntasks = []\nfor k in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    subtasks = []\n    for i in range(len(sc)):\n        subtasks.append((i, sc[i], ns[i]))\n    tasks.append((k, subtasks))\n_cache = {}\n\ndef _difficulty(i):\n    if i in _cache:\n        return _cache[i]\n    subtasks = sorted(tasks[i][1], key=lambda e: e[1])\n    n = 0\n    for k in range(len(subtasks) - 1):\n        if subtasks[k][2] > subtasks[k + 1][2]:\n            n += 1\n    _cache[i] = (n, i)\n    return (n, i)\ntasks_sorted = sorted(tasks, key=lambda e: _difficulty(e[0]))\nfor i in range(len(tasks_sorted)):\n    print(tasks_sorted[i][0] + 1)", "(p, s) = map(int, input().split())\ntasks = []\n\ndef _difficulty(i, subtasks):\n    subtasks = sorted(subtasks, key=lambda e: e[1])\n    n = 0\n    for k in range(len(subtasks) - 1):\n        if subtasks[k][2] > subtasks[k + 1][2]:\n            n += 1\n    return (n, i)\nfor k in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    subtasks = []\n    for i in range(len(sc)):\n        subtasks.append((i, sc[i], ns[i]))\n    tasks.append((k, subtasks, _difficulty(k, subtasks)))\ntasks_sorted = sorted(tasks, key=lambda e: e[2])\nfor i in range(len(tasks_sorted)):\n    print(tasks_sorted[i][0] + 1)", "(p, s) = map(int, input().split())\ntasks = []\nfor k in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    subtasks = []\n    for i in range(len(sc)):\n        subtasks.append((i, sc[i], ns[i]))\n    tasks.append((k, subtasks))\n_cache = {}\n\ndef _difficulty(i):\n    if i in _cache:\n        return _cache[i]\n    subtasks = sorted(tasks[i][1], key=lambda e: e[1])\n    n = 0\n    for k in range(len(subtasks) - 1):\n        if subtasks[k][2] > subtasks[k + 1][2]:\n            n += 1\n    _cache[i] = (n, i)\n    return (n, i)\ntasks_sorted = sorted(tasks, key=lambda e: _difficulty(e[0]))\nfor i in range(len(tasks_sorted)):\n    print(tasks_sorted[i][0] + 1)", "(p, s) = map(int, input().split())\ntasks = []\nfor k in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    subtasks = []\n    for i in range(len(sc)):\n        subtasks.append((i, sc[i], ns[i]))\n    tasks.append((k, subtasks))\n\ndef _difficulty(i):\n    subtasks = sorted(tasks[i][1], key=lambda e: e[1])\n    n = 0\n    for k in range(len(subtasks) - 1):\n        if subtasks[k][2] > subtasks[k + 1][2]:\n            n += 1\n    return (n, i)\ntasks_sorted = sorted(tasks, key=lambda e: _difficulty(e[0]))\nfor i in range(len(tasks_sorted)):\n    print(tasks_sorted[i][0] + 1)", "(a, b) = map(int, input().split())\nlst = []\nfor j in range(a):\n    c = list(map(int, input().split()))\n    d = list(map(int, input().split()))\n    arr = [(c[i], d[i]) for i in range(b)]\n    arr.sort()\n    q = 0\n    for i in range(b - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            q += 1\n    lst.append((q, j + 1))\nlst.sort()\nfor p in lst:\n    print(p[1])", "(p, s) = map(int, input().split())\nmixied = []\nfor i in range(p):\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    m1 = []\n    for j in range(s):\n        m1.append((l[j], m[j]))\n    m1.sort()\n    n1 = 0\n    for o in range(s - 1):\n        if m1[o][1] > m1[o + 1][1]:\n            n1 += 1\n    mixied.append((n1, i + 1))\nmixied.sort()\nfor _ in mixied:\n    print(_[1])", "(p, s) = map(int, input().split())\nmixied = []\nfor i in range(p):\n    l = list(map(int, input().split()))\n    m = list(map(int, input().split()))\n    m1 = []\n    for j in range(s):\n        m1.append((l[j], m[j]))\n    m1.sort()\n    n1 = 0\n    for o in range(s - 1):\n        if m1[o][1] > m1[o + 1][1]:\n            n1 += 1\n    mixied.append((n1, i + 1))\nmixied.sort()\nfor _ in mixied:\n    print(_[1])", "(p, s) = tuple(map(int, input().split()))\nans = {}\nfor i in range(p):\n    score = list(map(int, input().split()))\n    contestant = list(map(int, input().split()))\n    d = {}\n    for j in range(s):\n        d[score[j]] = contestant[j]\n    inc_score = list(d.keys())\n    inc_score.sort()\n    new = []\n    for j in range(s):\n        new.append(d[inc_score[j]])\n    count = 0\n    for j in range(s - 1):\n        if new[j] > new[j + 1]:\n            count += 1\n    ans[i + 1] = count\nfinal = sorted(ans.items(), key=lambda x: x[1])\nfor i in range(p):\n    print(final[i][0])", "(p, s) = map(int, input().split())\nres = []\nfor j in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    arr = [(sc[i], ns[i]) for i in range(s)]\n    arr.sort()\n    n = 0\n    for i in range(s - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            n += 1\n    res.append((n, j + 1))\nres.sort()\nfor r in res:\n    print(r[1])", "(p, s) = map(int, input().split())\nres = []\nfor j in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    arr = [(sc[i], ns[i]) for i in range(s)]\n    arr.sort()\n    n = 0\n    for i in range(s - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            n += 1\n    res.append((n, j + 1))\nres.sort()\nfor r in res:\n    print(r[1])", "(p, s) = map(int, input().split())\nl = []\nfor u in range(p):\n    s1 = list(map(int, input().split()))\n    n1 = list(map(int, input().split()))\n    d = [[0, 0] for dd in range(s)]\n    for w in range(s):\n        d[w][0] = s1[w]\n        d[w][1] = n1[w]\n    d.sort()\n    c = 0\n    for ss in range(s - 1):\n        if d[ss][1] > d[ss + 1][1]:\n            c += 1\n    l.append(c * 1000000 + u + 1)\nl.sort()\nfor hh in l:\n    print(hh % 1000000)", "(p, s) = map(int, input().split())\nlst = []\nfor prob in range(p):\n    score = list(map(int, input().split()))\n    number = list(map(int, input().split()))\n    order = {}\n    for i in range(s):\n        order[score[i]] = i\n    score.sort()\n    order1 = [number[order[score[i]]] for i in range(s)]\n    val = 0\n    for i in range(s - 1):\n        if order1[i] > order1[i + 1]:\n            val += 1\n    lst.append([val, prob + 1])\nlst1 = [[] for i in range(s)]\nfor pair in lst:\n    lst1[pair[0]].append(pair[1])\nfor i in range(s):\n    lst1[i].sort()\nfor z in lst1:\n    if len(z) != 0:\n        for y in z:\n            print(y)", "(p, s) = map(int, input().split())\nlst = []\nfor prob in range(p):\n    score = list(map(int, input().split()))\n    number = list(map(int, input().split()))\n    order = {}\n    for i in range(s):\n        order[score[i]] = i\n    score.sort()\n    order1 = [number[order[score[i]]] for i in range(s)]\n    val = 0\n    for i in range(s - 1):\n        if order1[i] > order1[i + 1]:\n            val += 1\n    lst.append([val, prob + 1])\nlst1 = [[] for i in range(s)]\nfor pair in lst:\n    lst1[pair[0]].append(pair[1])\nfor i in range(s):\n    lst1[i].sort()\nfor z in lst1:\n    if len(z) != 0:\n        for y in z:\n            print(y)", "def calc(s, arr):\n    count = 0\n    for i in range(s - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            count += 1\n    return count\n(p, s) = map(int, input().split())\nres = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    arr = sorted([(sc[i], ns[i]) for i in range(s)])\n    res.append((calc(s, arr), i))\nres.sort()\nfor cur in res:\n    print(cur[1] + 1)", "(p, s) = map(int, input().split())\ndiff = []\nfor j in range(1, p + 1):\n    score = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    join = [[x, y] for (x, y) in zip(score, n)]\n    join.sort()\n    d = 0\n    for i in range(s - 1):\n        if join[i][1] > join[i + 1][1]:\n            d += 1\n    diff.append([d, j])\ndiff.sort()\nfor i in diff:\n    print(i[1])", "(p, s) = list(map(int, input().split()))\nD = dict()\nindex = 1\nfor _ in range(p):\n    S = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    T = [(S[i], N[i]) for i in range(s)]\n    T = sorted(T)\n    N = [T[i][1] for i in range(s)]\n    score = 0\n    for i in range(len(N) - 1):\n        if N[i] > N[i + 1]:\n            score += 1\n    if score in D:\n        D[score].append(index)\n    else:\n        D[score] = [index]\n    index += 1\nscore_list = sorted(list(D.keys()))\nfor score in score_list:\n    indexes = D[score]\n    for index in indexes:\n        print(index)", "(p, s) = list(map(int, input().split()))\nD = dict()\nindex = 1\nfor _ in range(p):\n    S = list(map(int, input().split()))\n    N = list(map(int, input().split()))\n    T = [(S[i], N[i]) for i in range(s)]\n    T = sorted(T)\n    N = [T[i][1] for i in range(s)]\n    score = 0\n    for i in range(len(N) - 1):\n        if N[i] > N[i + 1]:\n            score += 1\n    if score in D:\n        D[score].append(index)\n    else:\n        D[score] = [index]\n    index += 1\nscore_list = sorted(list(D.keys()))\nfor score in score_list:\n    indexes = D[score]\n    for index in indexes:\n        print(index)", "(a, s) = map(int, input().split())\nl = []\nfor j in range(a):\n    score = list(map(int, input().split()))\n    nlist = list(map(int, input().split()))\n    new = []\n    for i in range(s):\n        new.append([score[i], nlist[i]])\n    new.sort(key=lambda x: int(x[0]))\n    n = 0\n    for i in range(0, s - 1):\n        if new[i][1] > new[i + 1][1]:\n            n += 1\n    l.append([n, j + 1])\nl.sort()\nfor t in range(a):\n    print(l[t][1])", "(p, s) = map(int, input().split())\nsc = [[0] * s for _ in range(p)]\nns = [[0] * s for _ in range(p)]\nans = [[i + 1, 0] for i in range(p)]\nfor i in range(p):\n    sc[i] = list(map(int, input().split()))\n    ns[i] = list(map(int, input().split()))\n    zipped_pair = zip(sc[i], ns[i])\n    zipped_pair2 = zip(sc[i], ns[i])\n    sc[i] = [x for (x, _) in sorted(zipped_pair)]\n    ns[i] = [x for (_, x) in sorted(zipped_pair2)]\n    for j in range(s - 1):\n        if ns[i][j] > ns[i][j + 1]:\n            ans[i][1] += 1\n\ndef my_func(x):\n    return x[1]\nans.sort(key=my_func)\nfor elem in ans:\n    print(elem[0])", "(m, n) = map(int, input().split())\na = []\nb = []\nfor i in range(m):\n    a.append(list(map(int, input().split())))\n    b.append(list(map(int, input().split())))\nc = []\nn2 = []\nfor j in range(m):\n    for k in range(n):\n        c.append([a[j][k], b[j][k]])\n    c.sort()\n    n1 = 0\n    for r in range(n - 1):\n        if c[r][1] > c[r + 1][1]:\n            n1 += 1\n    n2.append(n1)\n    c = []\nr = []\nfor m1 in range(m):\n    r.append([n2[m1], m1 + 1])\nr.sort()\nfor m1 in range(m):\n    print(r[m1][1])", "(P, S) = map(int, input().split())\nscores = [[] for _ in range(P)]\nnum_contestants = [[] for _ in range(P)]\nfor i in range(P):\n    scores[i] = list(map(int, input().split()))\n    num_contestants[i] = list(map(int, input().split()))\ndifficulties = []\nfor i in range(P):\n    (scores[i], num_contestants[i]) = zip(*sorted(zip(scores[i], num_contestants[i])))\n    n = 0\n    for j in range(S - 1):\n        if num_contestants[i][j] > num_contestants[i][j + 1]:\n            n += 1\n    difficulties.append((n, i + 1))\ndifficulties.sort()\nfor difficulty in difficulties:\n    print(difficulty[1])", "(P, S) = map(int, input().split())\nscores = [[] for _ in range(P)]\nnum_contestants = [[] for _ in range(P)]\nfor i in range(P):\n    scores[i] = list(map(int, input().split()))\n    num_contestants[i] = list(map(int, input().split()))\ndifficulties = []\nfor i in range(P):\n    (scores[i], num_contestants[i]) = zip(*sorted(zip(scores[i], num_contestants[i])))\n    n = 0\n    for j in range(S - 1):\n        if num_contestants[i][j] > num_contestants[i][j + 1]:\n            n += 1\n    difficulties.append((n, i + 1))\ndifficulties.sort()\nfor difficulty in difficulties:\n    print(difficulty[1])", "ps = list(map(int, input().split()))\np = ps[0]\ns = ps[1]\npn = []\nfor i in range(p):\n    sn = []\n    sl = list(map(int, input().split()))\n    nl = list(map(int, input().split()))\n    for j in range(s):\n        sn.append((sl[j], nl[j]))\n    sn.sort(key=lambda x: x[0])\n    c = 0\n    for k in range(s - 1):\n        if sn[k][1] > sn[k + 1][1]:\n            c += 1\n    pn.append((i + 1, c))\npn.sort(key=lambda x: (x[1], x[0]))\nfor a in pn:\n    print(a[0])", "import bisect\n(P, S) = list(map(int, input().split()))\nresults = []\nfor i in range(1, P + 1):\n    scores = list(map(int, input().split()))\n    solved = list(map(int, input().split()))\n    solved = [x for (_, x) in sorted(zip(scores, solved), key=lambda pair: pair[0])]\n    solved = [1 if solved[x] > solved[x + 1] else 0 for x in range(len(solved) - 1)]\n    n = sum(solved)\n    bisect.insort(results, (n, i))\nfor i in results:\n    print(i[1])", "(P, S) = map(int, input().split(' '))\ndifficulties = []\nfor p in range(P):\n    scores = list(map(int, input().split(' ')))\n    contestants = list(map(int, input().split(' ')))\n    score_indices = sorted(list(range(S)), key=scores.__getitem__)\n    n = 0\n    for s in range(S - 1):\n        if contestants[score_indices[s]] > contestants[score_indices[s + 1]]:\n            n += 1\n    difficulties.append((n, p + 1))\nindices = sorted(list(range(P)), key=difficulties.__getitem__)\nfor index in indices:\n    print(index + 1)", "(p, s) = map(int, input().split())\ndif = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    n = 0\n    scores = [(sc[j], ns[j]) for j in range(s)]\n    scores.sort()\n    for t in range(s - 1):\n        if scores[t][1] > scores[t + 1][1]:\n            n += 1\n    dif.append((n, i))\ndif.sort()\nfor v in dif:\n    print(v[1] + 1)", "ans = []\n(x, y) = map(int, input().split())\nfor _ in range(x):\n    A = list(map(int, input().split()))\n    B = list(map(int, input().split()))\n    L = list(zip(A, B))\n    L.sort()\n    co = 1\n    for i in range(y - 1):\n        if L[i][1] > L[i + 1][1]:\n            co += 1\n    ans.append([co, _])\nans.sort()\nfor i in ans:\n    print(i[1] + 1)", "(p, s) = map(int, input().split())\nans = []\nfor i in range(p):\n    m = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    count = 0\n    d = list(zip(m, n))\n    d.sort()\n    for j in range(s - 1):\n        if d[j][1] > d[j + 1][1]:\n            count += 1\n    ans.append([count, i])\nans.sort()\nfor i in range(p):\n    print(ans[i][1] + 1)", "(p, s) = map(int, input().split())\narr = []\nfor j in range(p):\n    sc1 = list(map(int, input().split()))\n    sc2 = list(map(int, input().split()))\n    sc = list(zip(sc1, sc2))\n    sc = sorted(sc)\n    diff = 0\n    for i in range(s - 1):\n        if sc[i][1] > sc[i + 1][1]:\n            diff += 1\n    arr.append((diff, j))\narr = sorted(arr)\nfor i in range(p):\n    print(arr[i][1] + 1)", "(P, S) = map(int, input().split())\nres = []\nfor j in range(P):\n    SC = list(map(int, input().split()))\n    NS = list(map(int, input().split()))\n    l = list(zip(SC, NS))\n    l.sort(key=lambda x: x[0])\n    cnt = 0\n    for i in range(S - 1):\n        if l[i][1] > l[i + 1][1]:\n            cnt += 1\n    res.append((cnt, j))\nfor ele in sorted(res):\n    print(ele[1] + 1)", "(p, s) = map(int, input().split())\na = []\nfor i in range(p):\n    temp = []\n    temp.append(list(map(int, input().split())))\n    temp.append(list(map(int, input().split())))\n    temp = [[temp[0][i], temp[1][i]] for i in range(s)]\n    temp.sort()\n    cnt = 0\n    for j in range(s - 1):\n        if temp[j][1] > temp[j + 1][1]:\n            cnt += 1\n    a.append([cnt, i])\na.sort()\ns = ''\nfor i in range(p):\n    s += str(a[i][1] + 1) + '\\n'\nprint(s)", "(p, s) = map(int, input().split())\nl = []\ndin = []\nfor i in range(p):\n    cnt = 0\n    Cs = list(map(int, input().split()))\n    Ns = list(map(int, input().split()))\n    for j in range(s):\n        din.append((Cs[j], Ns[j]))\n    din.sort()\n    for j in range(s - 1):\n        if din[j][1] > din[j + 1][1]:\n            cnt += 1\n    l.append(cnt)\n    din = []\nlout = []\nfor i in range(p):\n    lout.append((l[i], i + 1))\nlout.sort()\nfor i in range(p):\n    print(lout[i][1])", "(p, s) = map(int, input().split(' '))\npn = []\n\ndef getScore(ps):\n    c = 0\n    for i in range(1, s):\n        if ps[i - 1][1] > ps[i][1]:\n            c += 1\n    return c\nfor i in range(p):\n    ps = []\n    ns = list(map(int, input().split(' ')))\n    sc = list(map(int, input().split(' ')))\n    for j in range(s):\n        ps.append((ns[j], sc[j]))\n    ps = sorted(ps)\n    pn.append((getScore(ps), i))\npn = sorted(pn)\nfor (_, i) in pn:\n    print(i + 1)", "def calc(s, arr):\n    count = 0\n    for i in range(s - 1):\n        if arr[i][1] > arr[i + 1][1]:\n            count += 1\n    return count\n(p, s) = map(int, input().split())\nres = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    arr = sorted([(sc[i], ns[i]) for i in range(s)])\n    res.append((calc(s, arr), i))\nres.sort()\nfor cur in res:\n    print(cur[1] + 1)", "(p, s) = map(int, input().split())\ndiffs = []\nfor i in range(p):\n    scs = list(map(int, input().split()))\n    nss = list(map(int, input().split()))\n    zips = sorted(zip(scs, nss))\n    r = 0\n    for k in range(s - 1):\n        if zips[k][1] > zips[k + 1][1]:\n            r += 1\n    diffs.append([r, i])\ndiffs.sort()\nfor i in range(p):\n    print(diffs[i][1] + 1)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n(P, S) = inlt()\ndiff = [[0, x + 1] for x in range(P)]\nfor _ in range(P):\n    SC = inlt()\n    NS = inlt()\n    T = [(SC[i], NS[i]) for i in range(S)]\n    T.sort()\n    n = 0\n    for i in range(1, S):\n        if T[i - 1][1] > T[i][1]:\n            n += 1\n    diff[_][0] = n\ndiff.sort(key=lambda x: (x[0], x[1]))\nfor d in diff:\n    print(d[1])", "(n, _) = map(int, input().split())\nproblem_difficulties = []\nfor i in range(n):\n    scores = list(map(int, input().split()))\n    number_of_contestents = list(map(int, input().split()))\n    sorted_subtasks = sorted(zip(scores, number_of_contestents))\n    difficulty = 0\n    for j in range(len(sorted_subtasks) - 1):\n        if sorted_subtasks[j][1] > sorted_subtasks[j + 1][1]:\n            difficulty += 1\n    problem_difficulties.append((difficulty, i))\nproblem_difficulties.sort()\nfor i in range(n):\n    print(problem_difficulties[i][1] + 1)", "(n, _) = map(int, input().split())\nproblem_difficulties = []\nfor i in range(n):\n    scores = list(map(int, input().split()))\n    number_of_contestents = list(map(int, input().split()))\n    sorted_subtasks = sorted(zip(scores, number_of_contestents))\n    difficulty = 0\n    for j in range(len(sorted_subtasks) - 1):\n        if sorted_subtasks[j][1] > sorted_subtasks[j + 1][1]:\n            difficulty += 1\n    problem_difficulties.append((difficulty, i))\nproblem_difficulties.sort()\nfor i in range(n):\n    print(problem_difficulties[i][1] + 1)", "(prob, s) = list(map(int, input().split()))\np = []\nfor i in range(prob):\n    temp = []\n    temp.append(list(map(int, input().split())))\n    temp.append(list(map(int, input().split())))\n    temp = [[temp[0][i], temp[1][i]] for i in range(s)]\n    temp.sort()\n    p.append(temp)\nans = []\nfor i in range(prob):\n    n = 0\n    for j in range(s - 1):\n        if p[i][j][1] > p[i][j + 1][1]:\n            n += 1\n    ans.append((n, i + 1))\nans.sort(key=lambda x: (x[0], x[1]))\nfor i in range(len(ans)):\n    print(ans[i][1])", "import math\nimport operator\n\ndef calculate_score(numbers):\n    count = 0\n    for (i, num) in enumerate(numbers):\n        if i == len(numbers) - 1:\n            continue\n        if num > numbers[i + 1]:\n            count += 1\n    return count\n\ndef solve(numbers_array):\n    out_arr = []\n    res_arr = []\n    for (i, numbers) in enumerate(numbers_array):\n        score = calculate_score(numbers)\n        out_arr.append((i + 1, score))\n    sorted_out = sorted(out_arr, key=operator.itemgetter(1, 0))\n    for (i, x) in sorted_out:\n        res_arr.append(i)\n    return res_arr\n(p, s) = list(map(int, input().split(' ')))\nnumbers_array = []\nfor i in range(0, p):\n    scores = list(map(int, input().strip().split(' ')))\n    numbers = list(map(int, input().strip().split(' ')))\n    mix_array = [(scores[i], numbers[i]) for i in range(s)]\n    mix_array.sort()\n    new_arr = [mix_array[i][1] for i in range(s)]\n    numbers_array.append(new_arr)\nresult_array = solve(numbers_array)\nfor v in result_array:\n    print(v)", "(p, s) = map(int, input().split())\ndiff = {i: 0 for i in range(p)}\nfor i in range(p):\n    score = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    a = [(score[i], arr[i]) for i in range(s)]\n    a.sort()\n    arr = [a[i][1] for i in range(s)]\n    for j in range(s - 1):\n        if arr[j] > arr[j + 1]:\n            diff[i] += 1\nlst = [(j, i) for (i, j) in diff.items()]\nlst.sort()\nfor i in lst:\n    print(i[1] + 1)", "(p, s) = map(int, input().split())\nDR = []\nfor i in range(p):\n    SC = list(map(int, input().split()))\n    NS = list(map(int, input().split()))\n    Pr = list(zip(SC, NS))\n    Pr.sort(key=lambda x: x[0])\n    n = 0\n    for j in range(s - 1):\n        if Pr[j][1] > Pr[j + 1][1]:\n            n += 1\n    DR.append([n, i])\nDR.sort()\nfor i in range(p):\n    print(DR[i][1] + 1)", "(n, s) = map(int, input().split())\narr = []\nfor _ in range(n):\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = list(zip(a, b))\n    sorted_c = sorted(c)\n    dif_count = 0\n    for i in range(s - 1):\n        if sorted_c[i][1] > sorted_c[i + 1][1]:\n            dif_count += 1\n    arr.append((dif_count, _))\narr = sorted(arr)\nfor i in range(n):\n    print(arr[i][1] + 1)", "(p, s) = map(int, input().split())\ndifficultyRating = []\nfor i in range(p):\n    arSC = list(map(int, input().split()))\n    arNS = list(map(int, input().split()))\n    problem = list(zip(arSC, arNS))\n    problem.sort(key=lambda x: x[0])\n    n = 0\n    for j in range(s - 1):\n        if problem[j][1] > problem[j + 1][1]:\n            n += 1\n    difficultyRating.append([n, i])\ndifficultyRating.sort()\nfor i in range(p):\n    print(difficultyRating[i][1] + 1)", "(p, s) = map(int, input().split())\nl = []\nfor i in range(1, p + 1):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    lr = []\n    for j in range(s):\n        lr.append([sc[j], ns[j]])\n    lr.sort()\n    cnt = 0\n    for k in range(s - 1):\n        if lr[k][1] > lr[k + 1][1]:\n            cnt += 1\n    l.append([cnt, i])\nl.sort()\nfor j in range(p):\n    print(l[j][1])", "l = input().split()\nl[0] = int(l[0])\nl[1] = int(l[1])\nd = {}\nkool = []\nc = 0\nfor forbid in range(l[0]):\n    (l, n) = (input().split(), input().split())\n    for i in range(len(l)):\n        l[i] = int(l[i])\n        n[i] = int(n[i])\n        d[l[i]] = n[i]\n    l.sort()\n    for i in range(len(l) - 1):\n        (x, y) = (d[l[i]], d[l[i + 1]])\n        if y < x:\n            c += 1\n    kool.append([c, forbid])\n    c = 0\nkool.sort()\nfor i in kool:\n    print(i[1] + 1)", "t = [int(a) for a in input().split()]\np = t[0]\ns = t[1]\nsc = []\nns = []\npair = []\nans = []\nfor x in range(2 * p):\n    k = [int(a) for a in input().split()]\n    if x % 2 == 0:\n        sc.append(k)\n    else:\n        ns.append(k)\nfor x in range(p):\n    l = []\n    for y in range(s):\n        l.append((sc[x][y], ns[x][y]))\n    pair.append(l)\nfor x in range(p):\n    pair[x].sort()\n    su = 0\n    for y in range(s - 1):\n        if pair[x][y][1] > pair[x][y + 1][1]:\n            su += 1\n    ans.append([su, x + 1])\nans.sort()\nfor x in range(p):\n    print(ans[x][1])", "def mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\n\ndef si():\n    return str(input())\n\ndef ni():\n    return int(input())\n(p, s) = mi()\nA = []\nfor at in range(p):\n    d = []\n    n = 0\n    L = li()\n    X = li()\n    for i in range(s):\n        d.append((L[i], X[i]))\n    d.sort()\n    for i in range(s - 1):\n        if d[i][1] > d[i + 1][1]:\n            n += 1\n    A.append((n, at + 1))\nA.sort()\nfor fg in range(p):\n    print(A[fg][1])", "t = [int(a) for a in input().split()]\np = t[0]\ns = t[1]\nsc = []\nns = []\npair = []\nans = []\nfor x in range(2 * p):\n    k = [int(a) for a in input().split()]\n    if x % 2 == 0:\n        sc.append(k)\n    else:\n        ns.append(k)\nfor x in range(p):\n    l = []\n    for y in range(s):\n        l.append((sc[x][y], ns[x][y]))\n    pair.append(l)\nfor x in range(p):\n    pair[x].sort()\n    su = 0\n    for y in range(s - 1):\n        if pair[x][y][1] > pair[x][y + 1][1]:\n            su += 1\n    ans.append([su, x + 1])\nans.sort()\nfor x in range(p):\n    print(ans[x][1])", "(p, s) = list(map(int, input().split()))\nnarr = []\nfor k in range(900):\n    narr.append([-1])\nfor i2 in range(p):\n    sc = list(map(int, input().split()))\n    ns1 = list(map(int, input().split()))\n    ns = [x for (_, x) in sorted(zip(sc, ns1))]\n    count = 0\n    for i in range(s - 1):\n        if ns[i] > ns[i + 1]:\n            count += 1\n    narr[count].append(i2 + 1)\nfor i in range(900):\n    for h in narr[i]:\n        if h != -1:\n            print(h)", "(P, S) = map(int, input().split(' '))\nans = []\nfor i in range(0, P):\n    sc = list(map(int, input().split(' ')))\n    ns = list(map(int, input().split(' ')))\n    temp = {}\n    for j in range(0, len(ns)):\n        temp[sc[j]] = ns[j]\n    key = temp.keys()\n    key = sorted(key)\n    n = 0\n    for k in range(0, len(key) - 1):\n        index = key[k]\n        index2 = key[k + 1]\n        if temp[index] > temp[index2]:\n            n = n + 1\n    ans.append([i + 1, n])\nsorted_list = sorted(ans, key=lambda x: x[1])\nfor h in sorted_list:\n    print(h[0])", "(p, s) = map(int, input().split())\nA = []\nfor at in range(p):\n    d = []\n    n = 0\n    L = list(map(int, input().split()))\n    X = list(map(int, input().split()))\n    for i in range(s):\n        d.append((L[i], X[i]))\n    d.sort()\n    for i in range(s - 1):\n        if d[i][1] > d[i + 1][1]:\n            n += 1\n    A.append((n, at + 1))\nA.sort()\nfor fg in range(p):\n    print(A[fg][1])", "(a, b) = map(int, input().split())\nans = list()\nfor _ in range(a):\n    s = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    cnt = 0\n    lis = [[s[i], n[i]] for i in range(b)]\n    lis.sort()\n    for i in range(b - 1):\n        if lis[i][1] > lis[i + 1][1]:\n            cnt += 1\n    ans.append([cnt, _])\nans.sort()\nfor i in ans:\n    print(i[1] + 1)", "(a, b) = map(int, input().split())\nans = list()\nfor _ in range(a):\n    s = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    cnt = 0\n    lis = [[s[i], n[i]] for i in range(b)]\n    lis.sort()\n    for i in range(b - 1):\n        if lis[i][1] > lis[i + 1][1]:\n            cnt += 1\n    ans.append([cnt, _])\nans.sort()\nfor i in ans:\n    print(i[1] + 1)", "(p, sb) = map(int, input().split())\nans = list()\nfor i in range(p):\n    (s, n) = (list(map(int, input().split())), list(map(int, input().split())))\n    lis = list()\n    cnt = 0\n    for j in range(sb):\n        lis.append([s[j], n[j]])\n    lis.sort()\n    for j in range(sb - 1):\n        if lis[j][1] > lis[j + 1][1]:\n            cnt += 1\n    ans.append([cnt, i])\nans.sort()\nfor i in ans:\n    print(i[1] + 1)", "import os.path\nfrom math import gcd, floor, ceil, log2\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\n(p, s) = mp()\ndiff = []\nfor i in range(p):\n    sc = li()\n    ns = li()\n    (sc, ns) = zip(*sorted(zip(sc, ns)))\n    x = 0\n    for j in range(1, s):\n        if ns[j - 1] > ns[j]:\n            x += 1\n    diff.append((x, i))\ndiff.sort()\nfor i in diff:\n    print(i[1] + 1)", "(p, s) = map(int, input().split())\ndifficulty = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    (sc, ns) = zip(*sorted(zip(sc, ns)))\n    n = 0\n    for j in range(1, s):\n        if ns[j - 1] > ns[j]:\n            n += 1\n    difficulty.append((n, i))\ndifficulty.sort()\nprint('\\n'.join(map(str, list(map(lambda x: x[1] + 1, difficulty)))))", "(p, n) = map(int, input().split())\ndiffs = []\nfor i in range(p):\n    scores = [int(_) for _ in input().split()]\n    subs = [int(_) for _ in input().split()]\n    pairs = [[scores[i], subs[i]] for i in range(n)]\n    pairs.sort(key=lambda x: x[0])\n    count = 0\n    for j in range(1, n):\n        if pairs[j][1] < pairs[j - 1][1]:\n            count += 1\n    diffs.append((count, i))\ndiffs.sort(key=lambda x: x[0])\nfor i in diffs:\n    print(i[1] + 1)", "(s, p) = map(int, input().split())\nl = []\nfor i in range(s):\n    sk = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    ns = sorted(zip(sk, ns), key=lambda x: x[0])\n    n = 0\n    for j in range(len(ns) - 1):\n        if ns[j][1] > ns[j + 1][1]:\n            n += 1\n    l.append([n, i])\nl.sort()\nfor i in l:\n    print(i[1] + 1)", "(s, p) = map(int, input().split())\narr = []\nfor i in range(s):\n    sk = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    ns = sorted(zip(sk, ns), key=lambda x: x[0])\n    n = 0\n    for j in range(len(ns) - 1):\n        if ns[j][1] > ns[j + 1][1]:\n            n += 1\n    arr.append([n, i])\narr.sort()\nfor i in arr:\n    print(i[1] + 1)", "(s, p) = map(int, input().split())\narr = []\nfor i in range(s):\n    sk = list(map(int, input().split()))\n    ns = list(map(int, input().split()))\n    ns = sorted(zip(sk, ns), key=lambda x: x[0])\n    n = 0\n    for j in range(len(ns) - 1):\n        if ns[j][1] > ns[j + 1][1]:\n            n += 1\n    arr.append([n, i])\narr.sort()\nfor i in arr:\n    print(i[1] + 1)", "(P, S) = [int(x) for x in input().split()]\nproblem_difficulties = []\nfor problem in range(P):\n    SC = [int(x) for x in input().split()]\n    NS = [int(x) for x in input().split()]\n    SCNS = []\n    for i in range(len(SC)):\n        SCNS.append((SC[i], NS[i]))\n    SCNS.sort(key=lambda sc: sc[0])\n    n = 0\n    for i in range(1, len(SCNS)):\n        if SCNS[i - 1][1] > SCNS[i][1]:\n            n += 1\n    problem_difficulties.append((n, problem))\nproblem_difficulties.sort(key=lambda p: p[1])\nproblem_difficulties.sort(key=lambda p: p[0])\nfor problem in problem_difficulties:\n    print(problem[1] + 1)", "(p, s) = map(int, input().split())\nM = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    np = list(map(int, input().split()))\n    d = []\n    count = 0\n    for j in range(s):\n        d.append([sc[j], np[j]])\n    d.sort()\n    for x in range(s - 1):\n        if d[x][1] > d[x + 1][1]:\n            count += 1\n    M.append([count, i + 1])\nM.sort()\nfor z in M:\n    print(z[1])", "(p, s) = map(int, input().split())\nM = []\nfor i in range(p):\n    sc = list(map(int, input().split()))\n    np = list(map(int, input().split()))\n    d = []\n    count = 0\n    for j in range(s):\n        d.append([sc[j], np[j]])\n    d.sort()\n    for x in range(s - 1):\n        if d[x][1] > d[x + 1][1]:\n            count += 1\n    M.append([count, i + 1])\nM.sort()\nfor z in M:\n    print(z[1])", "(a, b) = map(int, input().split())\nlis = []\nfor _ in range(a):\n    scores = list(map(int, input().split()))\n    candidates = list(map(int, input().split()))\n    a = sorted(list(zip(scores, candidates)))\n    summ = 0\n    for i in range(b - 1):\n        if a[i][1] > a[i + 1][1]:\n            summ += 1\n    lis.append((summ, _ + 1))\nfor (i, j) in sorted(lis):\n    print(j)", "from collections import OrderedDict\ntemp = input().split()\np = int(temp[0])\nsc = int(temp[1])\nans = list()\npi = 1\nwhile p > 0:\n    cnt = 0\n    p -= 1\n    s = list(map(int, input().split()))\n    n = list(map(int, input().split()))\n    d = list()\n    for i in range(sc):\n        d.append([s[i], n[i]])\n    d.sort()\n    for i in range(sc - 1):\n        if d[i][1] > d[i + 1][1]:\n            cnt += 1\n    ans.append([cnt, pi])\n    pi += 1\nans.sort()\nfor i in ans:\n    print(i[1])", "(P, S) = map(int, input().split())\nres = []\nfor probIdx in range(P):\n    problem = []\n    SC = list(map(int, input().split()))\n    NS = list(map(int, input().split()))\n    for i in range(S):\n        problem.append((SC[i], NS[i]))\n    problem.sort()\n    n = 0\n    for i in range(1, len(problem)):\n        if problem[i - 1][1] > problem[i][1]:\n            n += 1\n    res.append((n, probIdx + 1))\nres.sort(key=lambda x: (x[0], x[1]))\nfor p in res:\n    print(p[1])", "(p, s) = [int(x) for x in input().split()]\ndifficulty = {}\nfor i in range(p):\n    problem = list(zip([int(x) for x in input().split()], [int(x) for x in input().split()]))\n    problem.sort(key=lambda p: p[0])\n    n = 0\n    for j in range(1, s):\n        if problem[j - 1][1] > problem[j][1]:\n            n += 1\n    difficulty[i + 1] = (n, i)\norder = [x for x in range(1, p + 1)]\norder.sort(key=lambda i: difficulty[i])\nfor i in order:\n    print(i)", "(p, s) = [int(x) for x in input().split()]\ndifficulty = {}\nfor i in range(p):\n    problem = list(zip([int(x) for x in input().split()], [int(x) for x in input().split()]))\n    problem.sort(key=lambda p: p[0])\n    n = 0\n    for j in range(1, s):\n        if problem[j - 1][1] > problem[j][1]:\n            n += 1\n    difficulty[i + 1] = (n, i)\norder = [x for x in range(1, p + 1)]\norder.sort(key=lambda i: difficulty[i])\nfor i in order:\n    print(i)"]