["from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = list(Counter(a).values())\n    b = Counter(a)\n    v = []\n    k = list(b.keys())\n    k.sort()\n    for i in range(len(k)):\n        v.append(b[k[i]])\n    print(k[v.index(max(v))])", "from collections import Counter\n\ndef check(a, b):\n    t = []\n    for i in a:\n        if a[i] == b:\n            t.append(i)\n    return min(t)\nfor tc in range(int(input())):\n    n = int(input())\n    l = map(int, input().split())\n    x = Counter(l)\n    y = Counter(x.values())\n    z = max(y.values())\n    print(check(y, z))", "import math\nfor _ in range(int(input())):\n    N = int(input())\n    L = list(map(int, input().split()))\n    d = {}\n    for i in range(N):\n        if L[i] not in d.keys():\n            d[L[i]] = 1\n        else:\n            d[L[i]] += 1\n    L1 = list(d.values())\n    L2 = list(set(d.values()))\n    max = 0\n    res = math.inf\n    for i in range(len(L2)):\n        if L1.count(L2[i]) == max:\n            if L2[i] < res:\n                res = L2[i]\n        elif L1.count(L2[i]) > max:\n            max = L1.count(L2[i])\n            res = L2[i]\n    print(res)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (dt, dt1) = ({}, {})\n    for i in a:\n        dt[i] = dt.get(i, 0) + 1\n    for i in dt.values():\n        dt1[i] = dt1.get(i, 0) + 1\n    m = max(dt1.values())\n    l = []\n    for (key, values) in dt1.items():\n        if values == m:\n            l.append(key)\n    print(min(l))", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l1 = []\n    s = list(set(l))\n    for i in s:\n        l1.append(l.count(i))\n    l2 = list(set(l1))\n    l2.sort()\n    m = 0\n    for i in l2:\n        if l1.count(i) > l1.count(m):\n            m = i\n    print(m)", "t = int(input())\nfor i in range(t):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(set(A))\n    P = []\n    for i in B:\n        c = A.count(i)\n        P.append(c)\n    P = sorted(P)\n    max = 0\n    res = P[0]\n    for j in P:\n        freq = P.count(j)\n        if freq > max:\n            max = freq\n            res = j\n    print(res)", "t = int(input())\nfor i in range(t):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(set(A))\n    P = []\n    for i in B:\n        c = A.count(i)\n        P.append(c)\n    P = sorted(P)\n    max = 0\n    res = P[0]\n    for j in P:\n        freq = P.count(j)\n        if freq > max:\n            max = freq\n            res = j\n    print(res)", "t = int(input())\nfor i in range(t):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(set(A))\n    P = []\n    for i in B:\n        c = A.count(i)\n        P.append(c)\n    P = sorted(P)\n    max = 0\n    res = P[0]\n    for j in P:\n        freq = P.count(j)\n        if freq > max:\n            max = freq\n            res = j\n    print(res)", "t = int(input())\nfor i in range(t):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(set(A))\n    P = []\n    for i in B:\n        c = A.count(i)\n        P.append(c)\n    P = sorted(P)\n    max = 0\n    res = P[0]\n    for j in P:\n        freq = P.count(j)\n        if freq > max:\n            max = freq\n            res = j\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    lt = list(map(int, input().split()))\n    s = set(lt)\n    lt1 = []\n    for y in s:\n        lt1.append(lt.count(y))\n    s2 = set(lt1)\n    d = {}\n    for p in s2:\n        d[p] = lt1.count(p)\n    mc = 0\n    cn = 999999999999999\n    for x in d:\n        if d[x] > mc:\n            mc = d[x]\n            cn = x\n        elif d[x] == mc and x < cn:\n            cn = x\n    print(cn)", "from collections import Counter\nfor i in range(0, int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = Counter(a)\n    l = []\n    for j in d:\n        l.append(d[j])\n    s = Counter(l)\n    k = 0\n    d = n\n    for h in s:\n        if s[h] > k:\n            k = s[h]\n            d = h\n        elif s[h] == k:\n            k = s[h]\n            if d > h:\n                d = h\n            else:\n                d = d\n        else:\n            continue\n    print(d)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "for i in range(int(input())):\n    n = int(input())\n    lt = list(map(int, input().split()))\n    s = set(lt)\n    lt1 = []\n    for y in s:\n        lt1.append(lt.count(y))\n    s2 = set(lt1)\n    d = {}\n    for p in s2:\n        d[p] = lt1.count(p)\n    mc = 0\n    cn = 999999999999999\n    for x in d:\n        if d[x] > mc:\n            mc = d[x]\n            cn = x\n        elif d[x] == mc and x < cn:\n            cn = x\n    print(cn)", "for i in range(int(input())):\n    n = int(input())\n    lt = list(map(int, input().split()))\n    s = set(lt)\n    lt1 = []\n    for y in s:\n        lt1.append(lt.count(y))\n    s2 = set(lt1)\n    d = {}\n    for p in s2:\n        d[p] = lt1.count(p)\n    mc = 0\n    cn = 999999999999999\n    for x in d:\n        if d[x] > mc:\n            mc = d[x]\n            cn = x\n        elif d[x] == mc and x < cn:\n            cn = x\n    print(cn)", "from collections import Counter\nfor _ in range(int(input())):\n    s = int(input())\n    l = list(map(int, input().split()))\n    dic = Counter(l)\n    dic2 = {}\n    for (i, j) in dic.items():\n        if j in dic2:\n            dic2[j] += 1\n        else:\n            dic2[j] = 1\n    m = max(dic2.values())\n    maxi = float('inf')\n    for (i, j) in dic2.items():\n        if j == m:\n            maxi = min(maxi, i)\n    print(maxi)", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = []\n    for i in set(l):\n        p.append(l.count(i))\n    s = sorted(list(set(p)))\n    w = []\n    for i in s:\n        w.append(p.count(i))\n    m = w[0]\n    res = s[0]\n    for i in range(len(w)):\n        if m < w[i]:\n            m = w[i]\n            res = s[i]\n    print(res)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "for i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    p = []\n    for i in set(l):\n        p.append(l.count(i))\n    s = sorted(list(set(p)))\n    w = []\n    for i in s:\n        w.append(p.count(i))\n    m = w[0]\n    res = s[0]\n    for i in range(len(w)):\n        if m < w[i]:\n            m = w[i]\n            res = s[i]\n    print(res)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "for i in range(int(input())):\n    n = int(input())\n    ol = list(map(int, input().split()))\n    d = {}\n    for i in ol:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    f = sorted(d.values())\n    d = {}\n    s1 = sorted(set(f))\n    for i in f:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    ff = list(d.values())\n    m = ff[0]\n    res = s1[0]\n    for i in range(len(ff)):\n        if m < ff[i]:\n            m = ff[i]\n            res = s1[i]\n    print(res)", "for i in range(int(input())):\n    n = int(input())\n    ol = list(map(int, input().split()))\n    s1 = set(ol)\n    f = []\n    for i in s1:\n        f.append(ol.count(i))\n    s2 = sorted(set(f))\n    ff = []\n    for i in s2:\n        ff.append(f.count(i))\n    m = ff[0]\n    res = s2[0]\n    for i in range(len(ff)):\n        if m < ff[i]:\n            m = ff[i]\n            res = s2[i]\n    print(res)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = sorted(set(a))\n    p = []\n    d = []\n    for j in c:\n        s = a.count(j)\n        p.append(s)\n    p.sort()\n    m = 0\n    r = p[0]\n    for j in p:\n        f = p.count(j)\n        if f > m:\n            m = f\n            r = j\n    print(r)", "t = int(input())\nfor tc in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = sorted(set(a))\n    p = []\n    d = []\n    for j in c:\n        s = a.count(j)\n        p.append(s)\n    p.sort()\n    m = 0\n    r = p[0]\n    for j in p:\n        f = p.count(j)\n        if f > m:\n            m = f\n            r = j\n    print(r)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(set(A))\n    P = []\n    for i in B:\n        c = A.count(i)\n        P.append(c)\n    P = sorted(P)\n    max = 0\n    res = P[0]\n    for j in P:\n        freq = P.count(j)\n        if freq > max:\n            max = freq\n            res = j\n    print(res)", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = sorted(set(A))\n    P = []\n    for i in B:\n        c = A.count(i)\n        P.append(c)\n    P = sorted(P)\n    max = 0\n    res = P[0]\n    for j in P:\n        freq = P.count(j)\n        if freq > max:\n            max = freq\n            res = j\n    print(res)", "def find_mod(n, arr):\n    fre = dict()\n    fre_fre_dic = dict()\n    for ele in arr:\n        fre[ele] = fre.get(ele, 0) + 1\n    new_arr = fre.values()\n    for ele in new_arr:\n        fre_fre_dic[ele] = fre_fre_dic.get(ele, 0) + 1\n    mx = 0\n    for (k, v) in fre_fre_dic.items():\n        if v >= mx:\n            if v > mx:\n                mx = v\n                ans = k\n            if v == mx and k < ans:\n                ans = k\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = find_mod(n, arr)\n    print(ans)", "def find_mod(n, arr):\n    fre = dict()\n    fre_fre_dic = dict()\n    for ele in arr:\n        fre[ele] = fre.get(ele, 0) + 1\n    new_arr = fre.values()\n    for ele in new_arr:\n        fre_fre_dic[ele] = fre_fre_dic.get(ele, 0) + 1\n    mx = 0\n    for (k, v) in fre_fre_dic.items():\n        if v >= mx:\n            if v > mx:\n                mx = v\n                ans = k\n            if v == mx and k < ans:\n                ans = k\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = find_mod(n, arr)\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    ob = Counter(l)\n    v = ob.values()\n    ob1 = Counter(v)\n    ch = float('inf')\n    m = max(ob1.values())\n    for (x, y) in ob1.items():\n        if y == m:\n            ch = min(ch, x)\n    print(ch)", "from collections import Counter as C\nimport statistics as S\nfor _ in range(int(input())):\n    n = int(input())\n    print(min(S.multimode(C(list(map(int, input().split(' ')))).values())))", "from collections import Counter\nimport statistics\nfor _ in range(int(input())):\n    mean = []\n    n = int(input())\n    numbers = list(map(int, input().split()))\n    dic = Counter(numbers)\n    var = dic.values()\n    var1 = statistics.multimode(var)\n    print(min(var1))", "from collections import Counter as C\nimport statistics as S\nfor _ in range(int(input())):\n    n = int(input())\n    print(min(S.multimode(C(list(map(int, input().split(' ')))).values())))", "from collections import Counter\nimport statistics\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    b = list(map(int, input().split()))\n    c = Counter(b)\n    ckey = c.values()\n    cmode = statistics.multimode(ckey)\n    print(min(cmode))", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    size = int(input())\n    num = input()\n    num = num.split()\n    ans = []\n    c = Counter(num)\n    for (key, value) in c.items():\n        ans.append(value)\n    c1 = Counter(ans)\n    c1 = sorted(c1.items(), key=lambda x: (-x[1], x[0]))\n    print(c1[0][0])", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    (d, v) = ({}, {})\n    s = []\n    for k in a:\n        if k not in d:\n            d[k] = 1\n        else:\n            d[k] += 1\n    for i in d.values():\n        if i not in v:\n            v[i] = 1\n        else:\n            v[i] += 1\n    m = max(v.values())\n    for (k1, v1) in v.items():\n        if v[k1] == m:\n            s.append(k1)\n    s.sort()\n    print(s[0])", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "from collections import Counter\nimport statistics\nfor _ in range(int(input())):\n    a = int(input())\n    b = list(map(int, input().split()))\n    c = Counter(b)\n    ckey = c.values()\n    cmode = statistics.multimode(ckey)\n    print(min(cmode))", "for _ in range(int(input())):\n    N = int(input())\n    lst = list(map(lambda x: int(x), input().split(' ')))\n    s = set(lst)\n    d = dict()\n    for ele in s:\n        d[ele] = lst.count(ele)\n    d1 = dict()\n    for ele in d.values():\n        if ele in d1:\n            d1[ele] += 1\n        else:\n            d1[ele] = 1\n    lst1 = list(d1.values())\n    lst1.sort()\n    a = lst1[len(lst1) - 1]\n    lst2 = []\n    for key in d1.keys():\n        if d1[key] == a:\n            lst2.append(key)\n    print(min(lst2))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l1 = list(map(int, input().split()))\n    d = {}\n    for item in l1:\n        if item not in d:\n            d[item] = 1\n        else:\n            d[item] = d[item] + 1\n    dd = {}\n    for v in d.values():\n        if v not in dd:\n            dd[v] = 1\n        else:\n            dd[v] = dd[v] + 1\n    key = None\n    val = 0\n    for (k, v) in dd.items():\n        if key == None:\n            key = k\n            val = v\n        elif v > val:\n            val = v\n            key = k\n        elif v == val:\n            key = min(key, k)\n    print(key)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    d = {}\n    for j in A:\n        if j not in d:\n            d[j] = 1\n        else:\n            d[j] += 1\n    fof = {}\n    for v in d.values():\n        if v not in fof:\n            fof[v] = 1\n        else:\n            fof[v] += 1\n    maximumfreq = max(fof.values())\n    s = []\n    for (k1, v1) in fof.items():\n        if fof[k1] == maximumfreq:\n            s.append(k1)\n    s.sort()\n    print(s[0])", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "def solve():\n    n = int(input())\n    s = list(map(int, input().split()))\n    a = [0] * 10\n    k = [0] * 10\n    m = 0\n    l = 0\n    for i in s:\n        a[i - 1] += 1\n    d = {}\n    for i in a:\n        if i == 0:\n            continue\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    max = 0\n    l = 0\n    for i in d:\n        if d[i] > max:\n            max = d[i]\n            l = i\n        elif i < l and d[i] == max:\n            l = i\n    print(l)\nfor _ in range(int(input())):\n    solve()", "T = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(int, input().split()))\n    d = {}\n    for j in A:\n        if j not in d:\n            d[j] = 1\n        else:\n            d[j] += 1\n    fof = {}\n    for v in d.values():\n        if v not in fof:\n            fof[v] = 1\n        else:\n            fof[v] += 1\n    maximumfreq = max(fof.values())\n    s = []\n    for (k1, v1) in fof.items():\n        if fof[k1] == maximumfreq:\n            s.append(k1)\n    s.sort()\n    print(s[0])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    a = list(dict.fromkeys(l))\n    li = []\n    for i in a:\n        li.append(l.count(i))\n    li.sort()\n    maxa = 0\n    cot = 0\n    e = list(dict.fromkeys(li))\n    for i in e:\n        if li.count(i) > cot:\n            cot = li.count(i)\n            maxa = i\n    print(maxa)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    a = list(dict.fromkeys(l))\n    li = []\n    for i in a:\n        li.append(l.count(i))\n    li.sort()\n    maxa = 0\n    cot = 0\n    e = list(dict.fromkeys(li))\n    for i in e:\n        if li.count(i) > cot:\n            cot = li.count(i)\n            maxa = i\n    print(maxa)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    a = list(dict.fromkeys(l))\n    li = []\n    for i in a:\n        li.append(l.count(i))\n    li.sort()\n    g = {}\n    e = list(dict.fromkeys(li))\n    for i in e:\n        g[i] = li.count(i)\n    b = max(g.values())\n    for (k, v) in g.items():\n        if v == b:\n            print(k)\n            break", "from collections import Counter\nfor _ in range(int(input())):\n    s = int(input())\n    l = list(map(int, input().split()))\n    dic = Counter(l)\n    dic2 = {}\n    for (i, j) in dic.items():\n        if j in dic2:\n            dic2[j] += 1\n        else:\n            dic2[j] = 1\n    m = max(dic2.values())\n    maxi = float('inf')\n    for (i, j) in dic2.items():\n        if j == m:\n            maxi = min(maxi, i)\n    print(maxi)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    l = set(li)\n    cou = []\n    for s in l:\n        cou.append(li.count(s))\n    maxi = 0\n    sort = sorted(set(cou))\n    for j in sort:\n        if cou.count(j) > maxi:\n            maxi = cou.count(j)\n            temp = j\n    print(temp)", "from collections import Counter\nfor _ in range(int(input())):\n    s = int(input())\n    l = list(map(int, input().split()))\n    dic = Counter(l)\n    dic2 = {}\n    for (i, j) in dic.items():\n        if j in dic2:\n            dic2[j] += 1\n        else:\n            dic2[j] = 1\n    m = max(dic2.values())\n    maxi = float('inf')\n    for (i, j) in dic2.items():\n        if j == m:\n            maxi = min(maxi, i)\n    print(maxi)", "import os, sys, io, math\nfrom math import *\nfrom array import *\nfrom collections import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    mp = Counter(a)\n    cp = {-1: 0}\n    for i in mp:\n        if mp[i] in cp:\n            cp[mp[i]] += 1\n        else:\n            cp[mp[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in cp:\n        if cp[i] > c:\n            c = cp[i]\n    for i in cp:\n        if cp[i] == c:\n            res = min(res, i)\n    print(res)", "from collections import Counter\nT = int(input())\nfor x in range(T):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    b = Counter(arr)\n    c = Counter(b.values())\n    currentkey = 0\n    currentvalue = 0\n    for (key, v) in c.items():\n        if currentvalue < v:\n            currentvalue = v\n            currentkey = key\n        elif currentvalue == v:\n            currentkey = min(currentkey, key)\n    print(currentkey)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = dict(Counter([int(x) for x in input().split()]))\n    d = dict()\n    for (x, y) in a.items():\n        d[y] = d.get(y, 0) + 1\n    (mx, my) = (-1, -1)\n    for (x, y) in d.items():\n        if y > my:\n            my = y\n            mx = x\n        elif y == my and x < mx:\n            mx = x\n    print(mx)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    c = 0\n    list2 = []\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list2.append(i)\n            c = list1.count(i)\n            list3.append(c)\n    list4 = []\n    list5 = []\n    f = 0\n    m = 0\n    val = 0\n    for j in list3:\n        if j not in list4:\n            list4.append(j)\n            c = list3.count(j)\n            if f == 0:\n                m = c\n                val = j\n                f = 1\n            elif c > m:\n                m = c\n                val = j\n            elif c == m:\n                if j < val:\n                    val = j\n                    m = c\n    print(val)\n    t = t - 1", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = dict(Counter(a))\n    v = list(c.values())\n    l = []\n    m = max(set(v), key=v.count)\n    x = v.count(m)\n    for i in set(v):\n        if v.count(i) == x:\n            l.append(i)\n    print(min(l))", "from collections import Counter\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    c = dict(Counter(a))\n    v = list(c.values())\n    l = []\n    m = max(set(v), key=v.count)\n    x = v.count(m)\n    for i in set(v):\n        if v.count(i) == x:\n            l.append(i)\n    print(min(l))", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    l = set(li)\n    cou = []\n    for s in l:\n        cou.append(li.count(s))\n    maxi = 0\n    sort = sorted(set(cou))\n    for j in sort:\n        if cou.count(j) > maxi:\n            maxi = cou.count(j)\n            temp = j\n    print(temp)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    b = Counter(Counter(map(int, input().split())).values())\n    max_value = 0\n    current_key = 0\n    for (key, value) in b.items():\n        if max_value < value:\n            max_value = value\n            current_key = key\n        elif max_value == value:\n            current_key = min(current_key, key)\n    print(current_key)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = dict(Counter(l))\n    vals = d.values()\n    d1 = dict(Counter(vals))\n    key = max(d1.values())\n    vals = list(d1.values())\n    max_vals = []\n    if vals.count(key) > 1:\n        for i in d1.items():\n            if i[1] == key:\n                max_vals.append(i[0])\n        print(min(max_vals))\n    else:\n        for i in d1.items():\n            if i[1] == key:\n                print(i[0])", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    b = Counter(Counter(map(int, input().split())).values())\n    max_value = 0\n    current_key = 0\n    for (key, value) in b.items():\n        if max_value < value:\n            max_value = value\n            current_key = key\n        elif max_value == value:\n            current_key = min(current_key, key)\n    print(current_key)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = Counter(map(int, input().split()))\n    b = Counter(a.values())\n    max_value = 0\n    current_key = 0\n    for (key, value) in b.items():\n        if max_value < value:\n            max_value = value\n            current_key = key\n        elif max_value == value:\n            current_key = min(current_key, key)\n    print(current_key)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = Counter(map(int, input().split()))\n    b = Counter(a.values())\n    max_value = 0\n    current_key = 0\n    for (key, value) in b.items():\n        if max_value < value:\n            max_value = value\n            current_key = key\n        elif max_value == value:\n            current_key = min(current_key, key)\n    print(current_key)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    l = set(li)\n    cou = []\n    for s in l:\n        cou.append(li.count(s))\n    maxi = 0\n    sort = sorted(set(cou))\n    for j in sort:\n        if cou.count(j) > maxi:\n            maxi = cou.count(j)\n            temp = j\n    print(temp)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    l = set(li)\n    cou = []\n    for s in l:\n        cou.append(li.count(s))\n    maxi = 0\n    sort = sorted(set(cou))\n    for j in sort:\n        if cou.count(j) > maxi:\n            maxi = cou.count(j)\n            temp = j\n    print(temp)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    (n, l) = (IN(), I())\n    d = Counter(l)\n    r = {}\n    for i in d:\n        if d[i] in r:\n            r[d[i]] += 1\n        else:\n            r[d[i]] = 1\n    res = 99999999\n    c = -999999999\n    for i in r:\n        if r[i] > c:\n            c = r[i]\n    for i in r:\n        if r[i] == c:\n            res = min(res, i)\n    return res\nfor _ in range(IN()):\n    print(f())", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    l = set(li)\n    cou = []\n    for s in l:\n        cou.append(li.count(s))\n    maxi = 0\n    sort = sorted(set(cou))\n    for j in sort:\n        if cou.count(j) > maxi:\n            maxi = cou.count(j)\n            temp = j\n    print(temp)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    li = list(map(int, input().split()))\n    l = set(li)\n    cou = []\n    for s in l:\n        cou.append(li.count(s))\n    maxi = 0\n    sort = sorted(set(cou))\n    for j in sort:\n        if cou.count(j) > maxi:\n            maxi = cou.count(j)\n            temp = j\n    print(temp)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split(' ')))\n    s = set(arr)\n    c = []\n    for i in s:\n        c.append(arr.count(i))\n    maxi = 0\n    cou = sorted(set(c))\n    for j in cou:\n        if c.count(j) > maxi:\n            maxi = c.count(j)\n            temp = j\n    print(temp)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = set(l)\n    cou = []\n    for i in s:\n        cou.append(l.count(i))\n    maxi = 0\n    se = sorted(set(cou))\n    for j in se:\n        if cou.count(j) > maxi:\n            maxi = cou.count(j)\n            temp = j\n    print(temp)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    num_dict = {}\n    for i in a:\n        if i in num_dict:\n            num_dict[i] += 1\n        else:\n            num_dict[i] = 1\n    counter2 = {}\n    for value in num_dict.values():\n        if value not in counter2.keys():\n            counter2[value] = 1\n        else:\n            counter2[value] += 1\n    smallAns = -10000\n    finalAns = 0\n    for (key, value) in counter2.items():\n        if value > smallAns:\n            smallAns = value\n            finalAns = key\n        elif value == smallAns:\n            if key < finalAns:\n                finalAns = key\n    print(finalAns)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    for i in l:\n        d1[i] = d1.get(i, 0) + 1\n    count = sorted(d1.values())\n    for i in count:\n        d2[i] = d2.get(i, 0) + 1\n    maxi = -float('inf')\n    for i in d2:\n        if d2[i] > maxi:\n            mode = i\n            maxi = d2[i]\n    print(mode)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    for i in l:\n        d1[i] = d1.get(i, 0) + 1\n    count = sorted(d1.values())\n    for i in count:\n        d2[i] = d2.get(i, 0) + 1\n    maxi = -float('inf')\n    for i in d2:\n        if d2[i] > maxi:\n            mode = i\n            maxi = d2[i]\n    print(mode)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict(Counter(a))\n    e = {}\n    for (i, c) in d.items():\n        if c in e:\n            e[c].append(i)\n        else:\n            e[c] = [i]\n    l = [len(v) for v in e.values()]\n    if all((i == l[0] for i in l)):\n        print(min(e))\n    else:\n        m = max((len(v) for v in e.values()))\n        f = [k for (k, v) in e.items() if len(v) == m]\n        print(min(f))", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict(Counter(a))\n    e = {}\n    for (i, c) in d.items():\n        if c in e:\n            e[c].append(i)\n        else:\n            e[c] = [i]\n    l = [len(v) for v in e.values()]\n    if all((i == l[0] for i in l)):\n        print(min(e))\n    else:\n        m = max((len(v) for v in e.values()))\n        f = [k for (k, v) in e.items() if len(v) == m]\n        print(min(f))", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst_a = list(map(int, input().split()))\n    set_a = set(lst_a)\n    new_lst = []\n    for i in set_a:\n        new_lst.append(lst_a.count(i))\n    set_b = sorted(set(new_lst))\n    f = 0\n    for j in set_b:\n        if f < new_lst.count(j):\n            f = new_lst.count(j)\n            t = j\n    print(t)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dict(Counter(a))\n    e = {}\n    for (i, c) in d.items():\n        if c in e:\n            e[c].append(i)\n        else:\n            e[c] = [i]\n    l = [len(v) for v in e.values()]\n    if all((i == l[0] for i in l)):\n        print(min(e))\n    else:\n        m = max((len(v) for v in e.values()))\n        f = [k for (k, v) in e.items() if len(v) == m]\n        print(min(f))", "for i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = set(a)\n    a1 = []\n    for i in l:\n        a1.append(a.count(i))\n    l = sorted(set(a1))\n    freq = 0\n    for i in l:\n        if freq < a1.count(i):\n            freq = a1.count(i)\n            t = i\n    print(t)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst_a = list(map(int, input().split()))\n    set_a = set(lst_a)\n    new_lst = []\n    for i in set_a:\n        new_lst.append(lst_a.count(i))\n    set_b = sorted(set(new_lst))\n    f = 0\n    for j in set_b:\n        if f < new_lst.count(j):\n            f = new_lst.count(j)\n            t = j\n    print(t)", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))[:n]\n    mode = dict()\n    for i in a:\n        mode[i] = mode.get(i, 0) + 1\n    freq = dict()\n    maxi = -1\n    for i in mode:\n        freq[mode[i]] = freq.get(mode[i], 0) + 1\n        if freq[mode[i]] >= maxi:\n            maxi = freq[mode[i]]\n    mini = 1000000\n    for i in freq:\n        if freq[i] == maxi and i < mini:\n            mini = i\n    print(mini)", "t = int(input())\nfor ni in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    l.sort()\n    l1 = set(l)\n    b = list()\n    for nj in l1:\n        b.append(l.count(nj))\n    b.sort()\n    (x, y) = (0, 0)\n    for i in b:\n        if x < b.count(i):\n            x = b.count(i)\n            y = i\n    print(y)", "from statistics import mode\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    b = []\n    while i <= n - 1:\n        b.append(a.count(a[i]))\n        i += a.count(a[i])\n    b.sort()\n    f = 0\n    t = 0\n    for i in b:\n        if f < b.count(i):\n            f = b.count(i)\n            t = i\n    print(t)", "from statistics import mode\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    b = []\n    while i <= n - 1:\n        b.append(a.count(a[i]))\n        i += a.count(a[i])\n    b.sort()\n    f = 0\n    t = 0\n    for i in b:\n        if f < b.count(i):\n            f = b.count(i)\n            t = i\n    print(t)", "from statistics import mode\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    i = 0\n    b = []\n    while i <= n - 1:\n        b.append(a.count(a[i]))\n        i += a.count(a[i])\n    b.sort()\n    f = 0\n    t = 0\n    for i in b:\n        if f < b.count(i):\n            f = b.count(i)\n            t = i\n    print(t)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst_a = list(map(int, input().split()))\n    set_a = set(lst_a)\n    new_lst = []\n    for i in set_a:\n        new_lst.append(lst_a.count(i))\n    set_b = sorted(set(new_lst))\n    f = 0\n    for j in set_b:\n        if f < new_lst.count(j):\n            f = new_lst.count(j)\n            t = j\n    print(t)", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    st = set(arr)\n    frequencies = []\n    for i in st:\n        frequencies.append(arr.count(i))\n    st = sorted(set(frequencies))\n    f = 0\n    for j in st:\n        if f < frequencies.count(j):\n            f = frequencies.count(j)\n            t = j\n    print(t)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst_a = list(map(int, input().split()))\n    set_a = set(lst_a)\n    new_lst = []\n    for i in set_a:\n        new_lst.append(lst_a.count(i))\n    set_b = sorted(set(new_lst))\n    f = 0\n    for j in set_b:\n        if f < new_lst.count(j):\n            f = new_lst.count(j)\n            t = j\n    print(t)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    lst_a = list(map(int, input().split()))\n    set_a = set(lst_a)\n    new_lst = []\n    for i in set_a:\n        new_lst.append(lst_a.count(i))\n    set_b = sorted(set(new_lst))\n    f = 0\n    for j in set_b:\n        if f < new_lst.count(j):\n            f = new_lst.count(j)\n            t = j\n    print(t)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    s = {}\n    for i in l:\n        if i not in s:\n            s[i] = 1\n        else:\n            s[i] = s[i] + 1\n    a = []\n    for i in s.values():\n        a.append(i)\n    r = {}\n    for k in a:\n        if k not in r:\n            r[k] = 1\n        else:\n            r[k] = r[k] + 1\n    max_keys = [key for (key, value) in r.items() if value == max(r.values())]\n    print(min(max_keys))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    h = {}\n    a.sort()\n    prev = -1\n    for i in a:\n        if i != prev:\n            h[i] = 0\n            prev = i\n        h[i] += 1\n    l = list(h.values())\n    modes = {i: 0 for i in set(l)}\n    for mode in l:\n        modes[mode] += 1\n    vals = list(modes.values())\n    maxMode = max(vals)\n    if vals.count(maxMode) == 1:\n        print(list(modes.keys())[vals.index(maxMode)])\n    else:\n        print(sorted(filter(lambda i: i[1] == maxMode, modes.items()))[0][0])", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    freq = {}\n    for i in arr:\n        freq[i] = freq.get(i, 0) + 1\n    count = sorted(freq.values())\n    ans = {}\n    for i in count:\n        ans[i] = ans.get(i, 0) + 1\n    ans = sorted(ans.items(), reverse=True, key=lambda x: x[1])\n    high = ans[0][1]\n    ans = [i[0] for i in ans if i[1] == high]\n    print(min(ans))", "for i in range(int(input())):\n    n = int(input())\n    assign = list(map(int, input().split()))\n    assign.sort()\n    setassign = set(assign)\n    frequencies = []\n    k = 0\n    for i in setassign:\n        frequencies.append(assign.count(i))\n    frequencies.sort()\n    setfreq = {}\n    for i in frequencies:\n        setfreq.update({i: frequencies.count(i)})\n    a = list(setfreq.keys())\n    b = list(setfreq.values())\n    index = b.index(max(b))\n    print(a[index])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    lis = []\n    z = list(set(x))\n    for i in range(len(z)):\n        lis.append(x.count(z[i]))\n    lis.sort()\n    myd = {}\n    for i in range(len(lis)):\n        myd.update({lis[i]: lis.count(lis[i])})\n    k = list(myd.keys())\n    v = list(myd.values())\n    ind = v.index(max(v))\n    print(k[ind])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    x = list(map(int, input().split()))\n    lis = []\n    z = list(set(x))\n    for i in range(len(z)):\n        lis.append(x.count(z[i]))\n    lis.sort()\n    myd = {}\n    for i in range(len(lis)):\n        myd.update({lis[i]: lis.count(lis[i])})\n    k = list(myd.keys())\n    v = list(myd.values())\n    ind = v.index(max(v))\n    print(k[ind])", "n = int(input())\nfor i in range(n):\n    leng = int(input())\n    list1 = [int(a) for a in input().split()]\n    (dict1, dict2) = ({}, {})\n    for j in list1:\n        if j in dict1:\n            dict1[j] += 1\n        else:\n            dict1[j] = 1\n    for j in dict1:\n        x = dict1[j]\n        if x in dict2:\n            dict2[x] += 1\n        else:\n            dict2[x] = 1\n    sorted_dict = sorted(dict2.items(), key=lambda x: x[0])\n    dict2 = dict(sorted_dict)\n    Keymax = max(dict2, key=lambda x: dict2[x])\n    print(Keymax)"]