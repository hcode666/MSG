["import math\n\ndef get_x(base, string):\n    x = 0\n    for i in range(len(string)):\n        char = string[-(i + 1)]\n        try:\n            value_of_char = int(char)\n        except:\n            value_of_char = int(9 + (ord(char) - 64))\n        if value_of_char < base:\n            x += math.pow(base, i) * value_of_char\n        else:\n            return -1\n    return int(x)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    original_set = set()\n    for j in range(n):\n        (b, string) = input().split()\n        b = int(b)\n        set_of_possible_values = set()\n        if b != -1:\n            X = get_x(b, string)\n            if X != -1 and X <= math.pow(10, 12):\n                set_of_possible_values.add(X)\n        else:\n            for k in range(2, 37):\n                X = get_x(k, string)\n                if X != -1 and X <= math.pow(10, 12):\n                    set_of_possible_values.add(X)\n        if not j:\n            original_set = set_of_possible_values\n            continue\n        else:\n            original_set = original_set.intersection(set_of_possible_values)\n    if original_set:\n        print(sorted(original_set)[0])\n    else:\n        print(-1)", "import math\n\ndef get_x(base, string):\n    x = 0\n    for i in range(len(string)):\n        char = string[-(i + 1)]\n        try:\n            value_of_char = int(char)\n        except:\n            value_of_char = int(9 + (ord(char) - 64))\n        if value_of_char < base:\n            x += math.pow(base, i) * value_of_char\n        else:\n            return -1\n    return int(x)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    original_set = set()\n    for j in range(n):\n        (b, string) = input().split()\n        b = int(b)\n        set_of_possible_values = set()\n        if b != -1:\n            X = get_x(b, string)\n            if X != -1 and X <= math.pow(10, 12):\n                set_of_possible_values.add(X)\n        else:\n            for k in range(2, 37):\n                X = get_x(k, string)\n                if X != -1 and X <= math.pow(10, 12):\n                    set_of_possible_values.add(X)\n        if not j:\n            original_set = set_of_possible_values\n            continue\n        else:\n            original_set = original_set.intersection(set_of_possible_values)\n    if original_set:\n        print(sorted(original_set)[0])\n    else:\n        print(-1)", "import math\n\ndef get_x(base, string):\n    x = 0\n    for i in range(len(string)):\n        char = string[-(i + 1)]\n        try:\n            value_of_char = int(char)\n        except:\n            value_of_char = int(9 + (ord(char) - 64))\n        if value_of_char < base:\n            x += math.pow(base, i) * value_of_char\n        else:\n            return -1\n    return int(x)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    original_set = set()\n    for j in range(n):\n        (b, string) = input().split()\n        b = int(b)\n        set_of_possible_values = set()\n        if b != -1:\n            X = get_x(b, string)\n            if X != -1 and X <= math.pow(10, 12):\n                set_of_possible_values.add(X)\n        else:\n            for k in range(2, 37):\n                X = get_x(k, string)\n                if X != -1 and X <= math.pow(10, 12):\n                    set_of_possible_values.add(X)\n        if not j:\n            original_set = set_of_possible_values\n            continue\n        else:\n            original_set = original_set.intersection(set_of_possible_values)\n    if original_set:\n        print(sorted(original_set)[0])\n    else:\n        print(-1)", "def intArr():\n    return map(int, input().split())\n\ndef In():\n    return int(input())\n\ndef func():\n    n = In()\n    arr = [input().split() for _ in range(n)]\n    temp = [[] for _ in range(n)]\n    for i in range(n):\n        (b, y) = arr[i]\n        b = int(b)\n        if b != -1:\n            p = int(y, b)\n            if p <= 1000000000000.0:\n                temp[i].append(p)\n        else:\n            for base in range(2, 37):\n                try:\n                    p = int(y, base)\n                    if p <= 1000000000000.0:\n                        temp[i].append(p)\n                except ValueError:\n                    pass\n        if len(temp[i]) == 0:\n            return -1\n    for i in temp[0]:\n        flag = 1\n        for j in range(1, n):\n            if i not in temp[j]:\n                flag = 0\n                break\n        if flag:\n            return i\n    return -1\n\ndef main():\n    for _ in range(In()):\n        print(func())\n    return\nmain()", "def intArr():\n    return map(int, input().split())\n\ndef In():\n    return int(input())\n\ndef formatter(x: str):\n    (a, b) = x.split()\n    return (int(a), b)\n\ndef func():\n    n = In()\n    arr = [input().split() for _ in range(n)]\n    temp = [[] for _ in range(n)]\n    for i in range(n):\n        (b, y) = arr[i]\n        b = int(b)\n        if b != -1:\n            p = int(y, b)\n            if p <= 1000000000000.0:\n                temp[i].append(p)\n        else:\n            for base in range(2, 37):\n                try:\n                    p = int(y, base)\n                    if p <= 1000000000000.0:\n                        temp[i].append(p)\n                except ValueError:\n                    pass\n        if len(temp[i]) == 0:\n            return -1\n    for i in temp[0]:\n        flag = 1\n        for j in range(1, n):\n            if i not in temp[j]:\n                flag = 0\n                break\n        if flag:\n            return i\n    return -1\n\ndef main():\n    for _ in range(In()):\n        print(func())\n    return\nmain()", "def intArr():\n    return map(int, input().split())\n\ndef In():\n    return int(input())\n\ndef formatter(x: str):\n    (a, b) = x.split()\n    return (int(a), b)\n\ndef func():\n    n = In()\n    arr = sorted([formatter(input()) for _ in range(n)])\n    temp = [[] for _ in range(n)]\n    for i in range(n):\n        (b, y) = arr[i]\n        b = int(b)\n        if b != -1:\n            p = int(y, b)\n            if p <= 1000000000000.0:\n                temp[i].append(p)\n        else:\n            for base in range(2, 37):\n                try:\n                    p = int(y, base)\n                    if p <= 1000000000000.0:\n                        temp[i].append(p)\n                except ValueError:\n                    pass\n        if len(temp[i]) == 0:\n            return -1\n    for i in temp[0]:\n        flag = 1\n        for j in range(1, n):\n            if i not in temp[j]:\n                flag = 0\n                break\n        if flag:\n            return i\n    return -1\n\ndef main():\n    for _ in range(In()):\n        print(func())\n    return\nmain()", "import math\n\ndef get_x(base, string):\n    x = 0\n    for i in range(len(string)):\n        char = string[-(i + 1)]\n        try:\n            value_of_char = int(char)\n        except:\n            value_of_char = int(9 + (ord(char) - 64))\n        if value_of_char < base:\n            x += math.pow(base, i) * value_of_char\n        else:\n            return -1\n    return int(x)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    original_set = set()\n    for j in range(n):\n        (b, string) = input().split()\n        b = int(b)\n        set_of_possible_values = set()\n        if b != -1:\n            X = get_x(b, string)\n            if X != -1 and X <= math.pow(10, 12):\n                set_of_possible_values.add(X)\n        else:\n            for k in range(2, 37):\n                X = get_x(k, string)\n                if X != -1 and X <= math.pow(10, 12):\n                    set_of_possible_values.add(X)\n        if not j:\n            original_set = set_of_possible_values\n            continue\n        else:\n            original_set = original_set.intersection(set_of_possible_values)\n    if original_set:\n        print(sorted(original_set)[0])\n    else:\n        print(-1)", "def base(x, l):\n    d = 0\n    for i in range(len(l)):\n        d = d + l[i] * x ** i\n    return d\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    k = []\n    for j in range(n):\n        h = input()\n        h = h.split(' ')\n        l = []\n        b = int(h[0])\n        number = h[1]\n        for z in range(len(number) - 1, -1, -1):\n            try:\n                c = int(number[z])\n                l.append(c)\n            except:\n                c = ord(number[z]) - 55\n                l.append(c)\n        k.append([b, l])\n    q = 0\n    for j in range(len(k)):\n        if k[j][0] != -1:\n            q = 1\n            a = base(k[j][0], k[j][1])\n            break\n    if q == 1:\n        count = 0\n        for j in range(len(k)):\n            if k[j][0] == -1:\n                m = max(k[j][1])\n                for z in range(m + 1, 37):\n                    c = base(z, k[j][1])\n                    if c == a:\n                        count = count + 1\n                        break\n            else:\n                c = base(k[j][0], k[j][1])\n                if c == a:\n                    count = count + 1\n        if count == len(k):\n            if a > 10 ** 12:\n                print(-1)\n            else:\n                print(a)\n        else:\n            print(-1)\n    else:\n        h = []\n        for j in range(len(k)):\n            d = []\n            m = max(k[j][1])\n            for z in range(m + 1, 37):\n                c = base(z, k[j][1])\n                d.append(c)\n            h.append(d)\n        h = set.intersection(*map(set, h))\n        h = list(h)\n        h.sort()\n        if len(h) > 0:\n            if h[0] > 10 ** 12:\n                print(-1)\n            else:\n                print(h[0])\n        else:\n            print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    l = []\n    t = -1\n    ans = 0\n    for _ in range(n):\n        (u, v) = input().split()\n        l.append(v)\n        if u != '-1':\n            if t == -1:\n                t = int(v, int(u))\n            elif t != int(v, int(u)):\n                ans = -1\n    l.sort()\n    l = set(l)\n    l = list(l)\n    if len(l) > 35:\n        ans = -1\n    m = []\n    for i in l:\n        k = max(i)\n        if ord(k) >= 65:\n            k = ord(k) - 54\n        else:\n            if int(k) == 0:\n                k = 1\n            k = int(k) + 1\n        m.append(k)\n    if t != -1 and ans != -1:\n        ans = t\n        num = 0\n        for i in range(len(l)):\n            fac = 0\n            k = m[i]\n            for j in range(k, 37):\n                if t == int(l[i], j):\n                    fac = 1\n            if fac == 0:\n                ans = -1\n                break\n    if t == -1 and ans != -1:\n        ans = -1\n        k = m[0]\n        for i in range(k, 37):\n            imp = 0\n            t = int(l[0], i)\n            for i in range(1, len(l)):\n                fac = 0\n                k = m[i]\n                for j in range(k, 37):\n                    if t == int(l[i], j):\n                        fac = 1\n                        break\n                if fac == 0:\n                    imp = 1\n                    break\n            if imp == 0:\n                ans = t\n                break\n    if ans > pow(10, 12):\n        ans = -1\n    print(ans)", "def func2(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef func1(str, base):\n    length = len(str)\n    expo = 1\n    num = 0\n    for i in range(length - 1, -1, -1):\n        if func2(str[i]) >= base:\n            return -1\n        num += func2(str[i]) * expo\n        expo = expo * base\n    return num\nfor _ in range(int(input())):\n    n = int(input())\n    query = []\n    mat = []\n    f = 0\n    for i in range(n):\n        (base, word) = list(map(str, input().split()))\n        base = int(base)\n        query.append([base, word])\n    for i in query:\n        temp = []\n        if i[0] == -1:\n            for j in range(1, 37):\n                t1 = func1(i[1], j)\n                temp.append(t1)\n        else:\n            temp.append(func1(i[1], i[0]))\n        mat.append(temp)\n    temp = mat[0]\n    ans = -1\n    final = []\n    for i in temp:\n        if i != -1:\n            f = 0\n            for j in mat:\n                if i in j:\n                    pass\n                else:\n                    f = 1\n                    break\n            if f == 0:\n                final.append(i)\n    if final == []:\n        print(-1)\n    elif min(final) > 10 ** 12:\n        print(-1)\n    else:\n        print(min(final))", "def func2(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef func1(str, base):\n    length = len(str)\n    expo = 1\n    num = 0\n    for i in range(length - 1, -1, -1):\n        if func2(str[i]) >= base:\n            return -1\n        num += func2(str[i]) * expo\n        expo = expo * base\n    return num\nfor _ in range(int(input())):\n    n = int(input())\n    query = []\n    mat = []\n    f = 0\n    for i in range(n):\n        (base, word) = list(map(str, input().split()))\n        base = int(base)\n        query.append([base, word])\n    for i in query:\n        temp = []\n        if i[0] == -1:\n            for j in range(1, 37):\n                t1 = func1(i[1], j)\n                temp.append(t1)\n        else:\n            temp.append(func1(i[1], i[0]))\n        mat.append(temp)\n    temp = mat[0]\n    ans = -1\n    final = []\n    for i in temp:\n        if i != -1:\n            f = 0\n            for j in mat:\n                if i in j:\n                    pass\n                else:\n                    f = 1\n                    break\n            if f == 0:\n                final.append(i)\n    if final == []:\n        print(-1)\n    elif min(final) > 10 ** 12:\n        print(-1)\n    else:\n        print(min(final))", "import sys\n\ndef change_y_chars(ch):\n    if ch.isupper():\n        ch_new = str(10 + int(ord(ch) - ord('A')))\n        return ch_new\n    return ch\n\ndef cal_base10_val(b, y):\n    m = len(y)\n    val = 0\n    flag = True\n    for i in range(m):\n        ch_y = change_y_chars(y[i])\n        if int(ch_y) < b:\n            val += b ** (m - i - 1) * int(ch_y)\n        else:\n            return -1\n    return val\nt = int(input())\nwhile t:\n    n = int(input())\n    A = []\n    set_list = []\n    flag = False\n    for i in range(n):\n        (b, y) = input().split()\n        b = int(b)\n        A.append([b, y])\n        set_X = set()\n        if b == -1:\n            for j in range(2, 37):\n                val = cal_base10_val(j, y)\n                if val != -1:\n                    set_X.add(val)\n        else:\n            flag = True\n            a = cal_base10_val(b, y)\n            if a <= 10 ** 12 and a != -1:\n                set_X.add(a)\n        if len(set_X):\n            set_list.append(set_X)\n        else:\n            set_list.append(set([-1]))\n    final_set = set_list[0]\n    for i in range(1, len(set_list)):\n        final_set = set_list[i].intersection(final_set)\n    final_set = list(final_set)\n    if len(final_set) and min(final_set) <= 10 ** 12:\n        print(min(final_set))\n    else:\n        print(-1)\n    t -= 1", "def func2(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef func1(str, base):\n    length = len(str)\n    expo = 1\n    num = 0\n    for i in range(length - 1, -1, -1):\n        if func2(str[i]) >= base:\n            return -1\n        num += func2(str[i]) * expo\n        expo = expo * base\n    return num\nfor _ in range(int(input())):\n    n = int(input())\n    query = []\n    mat = []\n    f = 0\n    for i in range(n):\n        (base, word) = list(map(str, input().split()))\n        base = int(base)\n        query.append([base, word])\n    for i in query:\n        temp = []\n        if i[0] == -1:\n            for j in range(1, 37):\n                t1 = func1(i[1], j)\n                temp.append(t1)\n        else:\n            temp.append(func1(i[1], i[0]))\n        mat.append(temp)\n    temp = mat[0]\n    ans = -1\n    final = []\n    for i in temp:\n        if i != -1:\n            f = 0\n            for j in mat:\n                if i in j:\n                    pass\n                else:\n                    f = 1\n                    break\n            if f == 0:\n                final.append(i)\n    if final == []:\n        print(-1)\n    elif min(final) > 10 ** 12:\n        print(-1)\n    else:\n        print(min(final))", "def decimal(base, number):\n    if number.isdigit() and int(number) == 0:\n        return 0\n    num = []\n    for i in number:\n        n = ord(i)\n        num.append(n - 48 if n < 64 else n - 55)\n    dec = 0\n    size = len(num)\n    for i in range(size):\n        if num[size - i - 1] >= base:\n            return None\n        dec += num[size - i - 1] * base ** i\n    return dec\n\ndef B_exists():\n    dec = None\n    for i in range(len(B)):\n        if B[i] != -1:\n            if dec == None:\n                dec = decimal(B[i], Y[i])\n            elif decimal(B[i], Y[i]) != dec:\n                dec = -1\n    return dec\n(base_min, base_max) = (2, 36)\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    (B, Y) = ([], [])\n    for n in range(N):\n        (b, y) = input().split()\n        b = int(b)\n        B.append(b)\n        Y.append(y)\n    dec = B_exists()\n    if dec == -1:\n        print(-1)\n    elif dec != None:\n        for i in range(N):\n            if B[i] != -1:\n                continue\n            base_found = False\n            for base in range(base_min, base_max + 1):\n                if dec == decimal(base, Y[i]):\n                    base_found = True\n                    break\n            if not base_found:\n                print(-1)\n                break\n        else:\n            print(dec if dec <= 10 ** 12 else -1)\n    else:\n        dec_values = []\n        for base in range(base_min, base_max + 1):\n            dec = decimal(base, Y[0])\n            if dec != None:\n                dec_values.append(dec)\n        for i in range(1, N):\n            dec_temp = []\n            for base in range(base_max, 1, -1):\n                dec = decimal(base, Y[i])\n                if dec != None and dec in dec_values:\n                    dec_temp.append(dec)\n            dec_values = list(dec_temp)\n        if len(dec_values) > 0:\n            dec_values.sort()\n            print(dec_values[0] if dec_values[0] <= 10 ** 12 else -1)\n        else:\n            print(-1)", "from collections import Counter\nlol = 10 ** 12\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (a, b) = input().split()\n        a = int(a)\n        z = []\n        if a != -1:\n            kkk = int(b, base=a)\n            if kkk <= lol:\n                l.append(kkk)\n        else:\n            for j in range(2, 37):\n                try:\n                    zz = int(b, base=j)\n                    if zz <= lol:\n                        z.append(zz)\n                except:\n                    vnj = 0\n            l.extend(list(set(z)))\n    dd = dict(Counter(l))\n    ans = []\n    for i in dd.keys():\n        if dd[i] == n:\n            ans.append(i)\n    if ans:\n        print(min(ans))\n    else:\n        print(-1)", "value = {}\nch = '0'\nfor i in range(10):\n    value[ch] = i\n    ch = chr(ord(ch) + 1)\nch = 'A'\nfor i in range(10, 36):\n    value[ch] = i\n    ch = chr(ord(ch) + 1)\nmaxLimit = 10 ** 12\n\ndef base10(y, base):\n    power = len(y) - 1\n    b_10_n = 0\n    for i in y:\n        b_10_n += value[i] * base ** power\n        power -= 1\n        if b_10_n > maxLimit:\n            return -1\n    return b_10_n\nfor _ in range(int(input())):\n    n = int(input())\n    ans = {}\n    final_ans = []\n    for j in range(n):\n        (b, y) = input().split()\n        b = int(b)\n        ans_set = set([])\n        if b != -1:\n            y_10 = base10(y, b)\n            if y_10 < 0:\n                continue\n            if y_10 not in ans.keys():\n                ans[y_10] = 1\n            else:\n                ans[y_10] += 1\n        else:\n            start = value[max(y)]\n            for i in range(start + 1, 37):\n                y_10 = base10(y, i)\n                if y_10 < 0:\n                    continue\n                if y_10 not in ans_set:\n                    ans_set.add(y_10)\n                    if y_10 not in ans.keys():\n                        ans[y_10] = 1\n                    else:\n                        ans[y_10] += 1\n    for (key, values) in ans.items():\n        if values == n:\n            final_ans.append(key)\n    if len(final_ans) == 0:\n        print(-1)\n    else:\n        print(min(final_ans))", "import string\nd = {}\nvari = string.digits + string.ascii_uppercase\nd = {vari[i]: i for i in range(len(vari))}\n\ndef check(no):\n    min_base = d[max(no)] + 1\n    no = no[::-1]\n    ret = set()\n    for base in range(min_base, 37):\n        cno = 0\n        to_add = True\n        for j in range(len(no)):\n            cno += pow(base, j) * d[no[j]]\n            if cno > 10 ** 12:\n                to_add = False\n                break\n        if to_add:\n            ret.add(cno)\n    return ret\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    for i in range(n):\n        (b, y) = [x for x in input().strip().split()]\n        b = int(b)\n        if i == 0:\n            if b != -1:\n                cset = {int(y, b)}\n            else:\n                cset = check(y)\n        elif b != -1 and cset:\n            cset = cset.intersection({int(y, b)})\n        elif cset:\n            cset = cset.intersection(check(y))\n    if cset and min(cset) <= 10 ** 12:\n        print(min(cset))\n    else:\n        print(-1)", "t = int(input())\nfor m in range(t):\n    n = int(input())\n    a = []\n    mi = 100000000000000\n    for u in range(n):\n        l1 = list(input().split(' '))\n        d = int(l1[0])\n        e = l1[1]\n        l = []\n        di = {}\n        if d != -1:\n            s1 = 0\n            flag = 0\n            for i in range(len(e)):\n                v1 = 0\n                if e[i] >= 'A' and e[i] <= 'Z':\n                    v1 = ord(e[i]) - 55\n                else:\n                    v1 = int(e[i])\n                if v1 >= d:\n                    flag = 1\n                    break\n                s1 = s1 + v1 * d ** (len(e) - i - 1)\n                if s1 > 1000000000000:\n                    flag = 1\n                    break\n            if flag == 0:\n                l.append(s1)\n        else:\n            for i in range(2, 37):\n                s1 = 0\n                flag = 0\n                for j in range(len(e)):\n                    v1 = 0\n                    if e[j] >= 'A' and e[j] <= 'Z':\n                        v1 = ord(e[j]) - 55\n                    else:\n                        v1 = int(e[j])\n                    if v1 >= i:\n                        flag = 1\n                        break\n                    s1 = s1 + v1 * i ** (len(e) - j - 1)\n                    if s1 > 1000000000000:\n                        flag = 1\n                        break\n                if flag == 0:\n                    l.append(s1)\n        set1 = set(l)\n        for i in set1:\n            a.append(i)\n    for i in range(len(a)):\n        if a[i] in di.keys():\n            di[a[i]] += 1\n        else:\n            di[a[i]] = 1\n        if di[a[i]] == n:\n            mi = min(mi, a[i])\n    if mi > 1000000000000:\n        print(-1)\n    else:\n        print(mi)", "def val(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef it(str, base):\n    llen = len(str)\n    power = 1\n    num = 0\n    for i in range(llen - 1, -1, -1):\n        if num > 1000000000000 or val(str[i]) >= base:\n            return -1\n        num += val(str[i]) * power\n        power = power * base\n    if num > 1000000000000:\n        return -1\n    return num\n\ndef tt(c):\n    if ord(c) <= ord('9') and ord(c) >= ord('0'):\n        return int(c)\n    else:\n        return 10 + ord(c) - ord('A')\nfor _ in range(int(input())):\n    k = int(input())\n    s1 = set()\n    t = False\n    for i in range(k):\n        s2 = set()\n        (a, s) = map(str, input().split())\n        if t:\n            continue\n        a = int(a)\n        if a == -1:\n            for base in range(2, 37):\n                p = it(s, base)\n                if p == -1:\n                    continue\n                if i == 0:\n                    s1.add(p)\n                else:\n                    s2.add(p)\n        elif i == 0:\n            s1.add(it(s, a))\n        else:\n            s2.add(it(s, a))\n        if i != 0:\n            s1 = s1 & s2\n            if len(s1) == 0:\n                t = True\n    if len(s1) == 0:\n        print(-1)\n    else:\n        print(min(s1))", "def val(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef it(str, base):\n    llen = len(str)\n    power = 1\n    num = 0\n    for i in range(llen - 1, -1, -1):\n        if num > 1000000000000 or val(str[i]) >= base:\n            return -1\n        num += val(str[i]) * power\n        power = power * base\n    if num > 1000000000000:\n        return -1\n    return num\n\ndef tt(c):\n    if ord(c) <= ord('9') and ord(c) >= ord('0'):\n        return int(c)\n    else:\n        return 10 + ord(c) - ord('A')\nfor _ in range(int(input())):\n    k = int(input())\n    s1 = set()\n    t = False\n    for i in range(k):\n        s2 = set()\n        (a, s) = map(str, input().split())\n        if t:\n            continue\n        a = int(a)\n        if a == -1:\n            for base in range(2, 37):\n                p = it(s, base)\n                if p == -1:\n                    continue\n                if i == 0:\n                    s1.add(p)\n                else:\n                    s2.add(p)\n        elif i == 0:\n            s1.add(it(s, a))\n        else:\n            s2.add(it(s, a))\n        if i != 0:\n            s1 = s1 & s2\n            if len(s1) == 0:\n                t = True\n    if len(s1) == 0:\n        print(-1)\n    else:\n        print(min(s1))", "def maxi(num):\n    max = 0\n    for k in range(len(num)):\n        ind = len(num) - k - 1\n        if num[ind] >= 'A' and num[ind] <= 'Z':\n            dig = ord(num[ind]) - 55\n        else:\n            dig = int(num[ind])\n        if dig > max:\n            max = dig\n    return max\n\ndef decimal(num, b):\n    power = 1\n    nu = 0\n    for k in range(len(num)):\n        ind = len(num) - k - 1\n        if num[ind] >= 'A' and num[ind] <= 'Z':\n            dig = ord(num[ind]) - 55\n        else:\n            dig = int(num[ind])\n        nu = nu + power * dig\n        if nu > 1000000000000:\n            return -1\n        power = power * b\n    return nu\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    base = []\n    number = []\n    for i in range(n):\n        (b, num) = input().split()\n        b = int(b)\n        base.append(b)\n        number.append(num)\n    start = 0\n    lst = []\n    flag = 0\n    for i in range(n):\n        b = base[i]\n        num = number[i]\n        new2 = set([])\n        if b != -1:\n            nu = decimal(num, b)\n            new2.add(nu)\n            lst.append(new2)\n        else:\n            mx = maxi(num)\n            for k in range(mx + 1, 37):\n                nu = decimal(num, k)\n                if nu != -1:\n                    new2.add(nu)\n            lst.append(new2)\n    new1 = set.intersection(*lst)\n    if len(new1) == 0:\n        print('-1')\n    else:\n        print(min(new1))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    array = [[-1 for i in range(35)] for j in range(n)]\n    for i in range(0, n):\n        (b, y) = input().split()\n        b = int(b)\n        if b == -1:\n            for j in range(2, 37):\n                try:\n                    array[i][j - 2] = int(y, j)\n                except:\n                    val = 'Invalid'\n        else:\n            array[i][0] = int(y, b)\n    ans = 1000000000001\n    for i in range(35):\n        z = int(array[0][i])\n        count = 0\n        if z != -1 and z <= 1000000000000:\n            for i in range(1, n):\n                if z in array[i]:\n                    count += 1\n                else:\n                    break\n        if count == n - 1:\n            ans = min(ans, z)\n    if ans != 1000000000001:\n        print(ans)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    n = int(input())\n    lis = [[-1 for i in range(35)] for j in range(n)]\n    for i in range(0, n):\n        (b, y) = map(str, input().split())\n        b = int(b)\n        if b == -1:\n            for x in range(2, 37):\n                try:\n                    lis[i][x - 2] = int(y, x)\n                except:\n                    doNothing = 'Kuch mat kar'\n        else:\n            lis[i][0] = int(y, b)\n    ans = 9999999999999999999999999999\n    for i in range(35):\n        z = int(lis[0][i])\n        count = 0\n        if z != -1 and z <= 1000000000000:\n            for i in range(1, n):\n                if z in lis[i]:\n                    count += 1\n                else:\n                    break\n        if count == n - 1:\n            ans = min(ans, z)\n    if ans != 9999999999999999999999999999:\n        print(ans)\n    else:\n        print('-1')", "rr = lambda : input().strip()\nrri = lambda : int(rr())\nrrm = lambda : [int(x) for x in rr().split()]\n\ndef validb(num, s):\n    for i in range(2, 37):\n        try:\n            if int(s, i) == num:\n                return True\n        except:\n            pass\n    return False\n\ndef sol(n):\n    if n == 1:\n        x = rr().split()\n        if int(x[0]) != -1:\n            return int(x[1], int(x[0]))\n        for i in range(2, 37):\n            try:\n                return int(x[1], i)\n            except:\n                pass\n    lst = []\n    for i in range(n):\n        lst.append(rr().split())\n    num = -1\n    for s in lst:\n        if int(s[0]) != -1:\n            if num == -1:\n                num = int(s[1], int(s[0]))\n            elif num != int(s[1], int(s[0])):\n                return -1\n    if num != -1:\n        for s in lst:\n            if not validb(num, s[1]):\n                return -1\n        return num\n    x = lst[0]\n    y = lst[1]\n    for i in range(2, 37):\n        try:\n            num = int(x[1], i)\n            if validb(num, y[1]):\n                bol = False\n                for sj in lst:\n                    if not validb(num, sj[1]):\n                        bol = True\n                if not bol:\n                    return num\n        except ValueError:\n            pass\n    return -1\nT = rri()\nfor _ in range(T):\n    n = rri()\n    ans = sol(n)\n    if ans <= 10 ** 12:\n        print(ans)\n    else:\n        print(-1)", "t = input()\nt = int(t)\nbases = {'2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 18, 'J': 19, 'K': 20, 'L': 21, 'M': 22, 'N': 23, 'O': 24, 'P': 25, 'Q': 26, 'R': 27, 'S': 28, 'T': 29, 'U': 30, 'V': 31, 'W': 32, 'X': 33, 'Y': 34, 'Z': 35}\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    ans = list()\n    while n > 0:\n        n -= 1\n        (base, s) = map(str, input().split())\n        base = int(base)\n        possiblebase = 2\n        min_base = possiblebase\n        ls = list()\n        if base == -1:\n            for i in range(min_base, 37):\n                try:\n                    k = int(s, i)\n                except:\n                    continue\n                if k <= 10 ** 12:\n                    ls.append(k)\n                else:\n                    break\n            ans.append(ls)\n        elif base >= 2 and base <= 36:\n            try:\n                k = int(s, base)\n                if k <= 10 ** 12:\n                    ans.append([k])\n                else:\n                    ans.append([])\n            except:\n                ans.append([])\n        else:\n            ans.append([])\n    l = len(ans)\n    final_ans = 0\n    if l < 1:\n        final_ans = -1\n    else:\n        final = set(ans[0])\n        for i in range(1, l):\n            final = final & set(ans[i])\n        if len(final) > 0:\n            final = sorted(final)\n            final_ans = final[0]\n        else:\n            final_ans = -1\n    print(final_ans)", "from functools import reduce\nimport string\n\ndef check(num, base, i=0):\n    if i >= len(num):\n        return True\n    if not num[i].isdigit():\n        val = string.ascii_lowercase.find(num[i].lower())\n        if val == -1 or val + 10 >= base:\n            return False\n    elif int(num[i]) >= base:\n        return False\n    return check(num, base, i + 1)\n\ndef minbase(s):\n    for i in range(2, 37):\n        if check(s, i):\n            return i\nfor _ in range(int(input())):\n    n = int(input())\n    L = []\n    B = []\n    Y = []\n    for mb in range(n):\n        (b, y) = map(str, input().split())\n        B.append(int(b))\n        Y.append(y)\n    for ab in range(n):\n        if B[ab] == -1:\n            start = minbase(Y[ab])\n        else:\n            start = B[ab]\n        l = []\n        for ba in range(start, 37):\n            l.append(int(Y[ab], ba))\n        L.append(l)\n    res = list(reduce(lambda p, q: p & q, (set(x) for x in L)))\n    if len(res) > 0:\n        k = min(res)\n        if k <= 10 ** 12:\n            print(k)\n        else:\n            print(-1)\n    else:\n        print(-1)", "for _ in range(int(input())):\n    l = []\n    for __ in range(int(input())):\n        (b, s) = input().split()\n        b = int(b)\n        z = max(s)\n        if z >= 'A':\n            minBase = ord(z) - ord('A') + 11\n        else:\n            minBase = ord(z) - ord('0') + 1\n        minBase = max(2, minBase)\n        if b != -1:\n            l.append(set([int(s, b)]))\n        else:\n            l.append(set([int(s, x) for x in range(minBase, 37)]))\n        intersection = l[0]\n        for i in range(1, len(l)):\n            intersection &= l[i]\n    if len(intersection) == 1:\n        for i in intersection:\n            if i > 10 ** 12:\n                print(-1)\n            else:\n                print(i)\n    elif len(intersection) > 1:\n        res = min(intersection)\n        if res <= 10 ** 12:\n            print(res)\n        else:\n            print(-1)\n    else:\n        print(-1)", "def power(x, y):\n    res = 1\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x\n        y = y >> 1\n        x = x * x\n    return res\nt = int(input())\nfor _ in range(t):\n    l = []\n    n = int(input())\n    for i in range(n):\n        s = input().split()\n        s[1] = s[1][::-1]\n        l.append(s)\n    vv = []\n    for i in l:\n        v = set()\n        flag = 0\n        if i[0] == '-1':\n            for b in range(2, 37):\n                flag = 0\n                ans = 0\n                for k in range(0, len(i[1])):\n                    if ord(i[1][k]) - 48 >= 0 and ord(i[1][k]) - 48 <= 9:\n                        if ord(i[1][k]) - 48 >= b:\n                            flag = 1\n                            break\n                        ans = ans + int(i[1][k]) * power(b, k)\n                        if ans > int(1000000000000.0):\n                            flag = 1\n                            break\n                    else:\n                        if ord(i[1][k]) - 65 + 10 >= b:\n                            flag = 1\n                            break\n                        ans = ans + (ord(i[1][k]) - 65 + 10) * power(b, k)\n                        if ans > int(1000000000000.0):\n                            flag = 1\n                            break\n                if ans <= int(1000000000000.0) and flag == 0:\n                    v.add(ans)\n            vv.append(v)\n        else:\n            b = int(i[0])\n            ans = 0\n            flag = 0\n            for k in range(0, len(i[1])):\n                if ord(i[1][k]) - 48 >= 0 and ord(i[1][k]) - 48 <= 9:\n                    if ord(i[1][k]) - 48 >= b:\n                        flag = 1\n                        break\n                    ans = ans + int(i[1][k]) * power(b, k)\n                    if ans > int(1000000000000.0):\n                        flag = 1\n                        break\n                else:\n                    if ord(i[1][k]) - 65 + 10 >= b:\n                        flag = 1\n                        break\n                    ans = ans + (ord(i[1][k]) - 65 + 10) * power(b, k)\n                    if ans > int(1000000000000.0):\n                        flag = 1\n                        break\n            if ans <= int(1000000000000.0) and flag == 0:\n                v.add(ans)\n            vv.append(v)\n    ans = vv[0]\n    for i in range(1, len(vv)):\n        ans = ans & vv[i]\n    if len(ans) == 0:\n        print(-1)\n    else:\n        print(min(ans))", "while True:\n    try:\n        for _ in range(int(input())):\n            n = int(input())\n            (Temp, DP) = ({}, {})\n            inputs = []\n            for _ in range(n):\n                (b, num) = input().split()\n                inputs.append((int(b), num))\n            inputs = list(set(inputs))\n            n = len(inputs)\n            for i in inputs:\n                Temp = {}\n                if i[0] == -1:\n                    minbase = max(i[1])\n                    minbase = max(int(minbase, 36) + 1, 2)\n                    for j in range(minbase, 37):\n                        if int(i[1], j) not in Temp:\n                            Temp[int(i[1], j)] = 1\n                        else:\n                            Temp[int(i[1], j)] += 1\n                    for (k, v) in Temp.items():\n                        if k not in DP:\n                            DP[k] = 1\n                        else:\n                            DP[k] += 1\n                elif int(i[1], i[0]) not in DP:\n                    DP[int(i[1], i[0])] = 1\n                else:\n                    DP[int(i[1], i[0])] += 1\n            GotAns = False\n            DP = sorted(DP.items(), key=lambda x: x[0])\n            for (k, v) in DP:\n                if v == n:\n                    if k > 1000000000000:\n                        break\n                    else:\n                        GotAns = True\n                        print(k)\n                        break\n            if not GotAns:\n                print(-1)\n    except:\n        break", "def ii():\n    a = int(input())\n    return a\n\ndef ai():\n    a = list(map(int, input().split()))\n    return a\n\ndef mi():\n    a = map(int, input().split())\n    return a\nfor _ in range(ii()):\n    n = ii()\n    ar = [[-1 for x in range(37)] for x in range(n)]\n    for i in range(n):\n        (b, y) = input().split()\n        b = int(b)\n        if b != -1:\n            ar[i][b] = int(y, b)\n        else:\n            for j in range(2, 37):\n                try:\n                    ar[i][j] = int(y, j)\n                except:\n                    z = 0\n    o = []\n    for i in range(2, 37):\n        cur_dec = ar[0][i]\n        cnt = 0\n        if cur_dec <= 1000000000000 and cur_dec != -1:\n            for j in range(1, n):\n                a = ar[j]\n                if cur_dec in a:\n                    cnt += 1\n                else:\n                    break\n        if cnt == n - 1:\n            o.append(cur_dec)\n    if len(o) > 0:\n        print(min(o))\n    else:\n        print(-1)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l = []\n    ans = -1\n    for j in range(n):\n        (base, k) = map(str, input().split())\n        base = int(base)\n        l3 = []\n        if base != -1:\n            ans = int(k, base)\n            l.append(ans)\n        else:\n            for i in range(2, 37):\n                try:\n                    l3.append(int(k, i))\n                except:\n                    pass\n        l3 = list(dict.fromkeys(l3))\n        l.extend(l3)\n    l2 = list(dict.fromkeys(l))\n    l2.sort()\n    b = False\n    l.sort()\n    for i in range(len(l2)):\n        fin = l.count(l2[i])\n        if fin == n:\n            ans = l2[i]\n            b = True\n            break\n    if b and ans <= 10 ** 12:\n        print(ans)\n    else:\n        print(-1)\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    ar = [[-1 for x in range(37)] for x in range(n)]\n    for i in range(n):\n        (b, y) = map(str, input().split())\n        b = int(b)\n        if b != -1:\n            ar[i][b] = int(y, b)\n        else:\n            for j in range(2, 37):\n                try:\n                    ar[i][j] = int(y, j)\n                except:\n                    z = 0\n    o = []\n    for i in range(2, 37):\n        y = ar[0][i]\n        cnt = 0\n        if y != -1 and y <= 1000000000000:\n            for j in range(1, n):\n                if y in ar[j]:\n                    cnt += 1\n                else:\n                    break\n        if cnt == n - 1:\n            o.append(ar[0][i])\n    if len(o) > 0:\n        print(min(o))\n    else:\n        print('-1')", "def add(y: str):\n    start = 2\n    end = 36\n    power = 2\n    s = set([])\n    while power < end + 1:\n        number = 0\n        for ch in y:\n            x = ord(ch) - ord('0')\n            if x > 9:\n                x = x - 7\n            if x >= power:\n                number = -1\n                break\n            else:\n                number = number * power + x\n        if number > 10 ** 12:\n            return s\n        if number != -1:\n            s.add(number)\n        power = power + 1\n    return s\n\ndef cal(x: str, y: str):\n    x = int(x)\n    number = 0\n    for ch in y:\n        tt = ord(ch) - ord('0')\n        if tt > 9:\n            tt = tt - 7\n        number = number * x + tt\n    s = set()\n    if number > 10 ** 12:\n        return s\n    s.add(number)\n    return s\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (x, y) = map(str, input().split())\n        if x[0] == '-':\n            s = add(y)\n            l.append(s)\n        else:\n            s = cal(x, y)\n            l.append(s)\n    s = l[0]\n    for i in range(1, n):\n        s = s & l[i]\n    li = list(s)\n    li.sort()\n    if len(li) == 0:\n        print(-1)\n    else:\n        print(li[0])", "def val(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef toDeci(str, base):\n    llen = len(str)\n    power = 1\n    num = 0\n    for i in range(llen - 1, -1, -1):\n        num += val(str[i]) * power\n        power = power * base\n    return num\n\ndef horner(poly, n, x):\n    result = poly[0]\n    for i in range(1, n):\n        result = result * x + poly[i]\n    return result\n\ndef check(n, target):\n    m = 1\n    x = []\n    for i in n:\n        t = val(i)\n        x.append(t)\n        if t > m:\n            m = val(i)\n    for i in range(m + 1, 37):\n        q = horner(x, len(x), i)\n        if q == target:\n            return True\n        if q > target:\n            return False\nt = int(input())\np = pow(10, 12)\nfor _ in range(t):\n    n = int(input())\n    flag = 1\n    stop = False\n    numbers = []\n    answer = -1\n    for _ in range(n):\n        (b, y) = input().split()\n        b = int(b)\n        if b != -1 and flag:\n            flag = 0\n            answer = toDeci(y, b)\n        elif b != -1:\n            if answer != toDeci(y, b):\n                stop = True\n        else:\n            numbers.append(y)\n    if stop:\n        print(-1)\n    elif answer != -1:\n        for i in numbers:\n            possible = check(i, answer)\n            if not possible:\n                stop = True\n                break\n        if stop:\n            print(-1)\n        elif answer > p:\n            print(-1)\n        else:\n            print(answer)\n    else:\n        possibility = []\n        for i in numbers:\n            x = []\n            temp = []\n            m = 1\n            for j in i:\n                t = val(j)\n                x.append(t)\n                if t > m:\n                    m = val(j)\n            for j in range(m + 1, 37):\n                z = horner(x, len(x), j)\n                if z > p:\n                    break\n                temp.append(z)\n            possibility.append(temp)\n        printed = False\n        for i in possibility[0]:\n            flag = 1\n            for j in range(1, len(numbers)):\n                if not i in possibility[j]:\n                    flag = 0\n                    break\n            if flag == 1:\n                print(i)\n                printed = True\n                break\n        if not printed:\n            print(-1)", "def recProgress(progress, final, A, S, value):\n    if progress == final:\n        return progress\n    else:\n        pos = progress\n        base = A[pos][1]\n        n_prog = -1\n        for i in range(base, 37):\n            if calculate(i, A[pos][0], S) == value:\n                n_prog = recProgress(progress + 1, final, A, S, value)\n                break\n            if calculate(i, A[pos][0], S) > value:\n                n_prog = -1\n                break\n        return n_prog\n\ndef calculate(X, Y, S):\n    base = int(X)\n    Y = str(Y)\n    power = 0\n    Value = 0\n    Str = reversed(Y)\n    for i in Str:\n        Value += base ** power * S[i]\n        power += 1\n    return Value\nT = int(input())\nS = {}\nfor i in range(10):\n    S[str(i)] = i\nfor i in range(26):\n    S[chr(65 + i)] = 10 + i\nwhile T > 0:\n    T -= 1\n    A = []\n    found = []\n    N = int(input())\n    for i in range(N):\n        (X, Y) = input().split()\n        if X != '-1':\n            Y = calculate(X, Y, S)\n            found.append(Y)\n        else:\n            temp = list(Y)\n            base = S[max(temp)] + 1\n            A.append([Y, base])\n    length = len(found)\n    if length == 0:\n        flag = False\n        final = len(A)\n        base = A[0][1]\n        for i in range(base, 37):\n            value = calculate(i, A[0][0], S)\n            if value > 1000000000000:\n                break\n            progress = recProgress(1, final, A, S, value)\n            if progress == final:\n                flag = True\n                break\n        if flag == True:\n            print(value)\n        else:\n            print('-1')\n    if length >= 1:\n        flag = True\n        if length != 1:\n            for i in range(length - 1):\n                if found[i] != found[i + 1]:\n                    flag = False\n        if flag == False:\n            print('-1')\n            continue\n        value = found[0]\n        final = len(A)\n        if value > 1000000000000:\n            progress = -1\n        else:\n            progress = recProgress(0, final, A, S, value)\n        if progress == -1:\n            print('-1')\n        else:\n            print(value)", "def recProgress(progress, final, A, S, value):\n    if progress == final:\n        return progress\n    else:\n        pos = progress\n        base = A[pos][1]\n        n_prog = -1\n        for i in range(base, 37):\n            if calculate(i, A[pos][0], S) == value:\n                n_prog = recProgress(progress + 1, final, A, S, value)\n                break\n            if calculate(i, A[pos][0], S) > value:\n                n_prog = -1\n                break\n        return n_prog\n\ndef calculate(X, Y, S):\n    base = int(X)\n    Y = str(Y)\n    power = 0\n    Value = 0\n    Str = reversed(Y)\n    for i in Str:\n        Value += base ** power * S[i]\n        power += 1\n    return Value\nT = int(input())\nS = {}\nfor i in range(10):\n    S[str(i)] = i\nfor i in range(26):\n    S[chr(65 + i)] = 10 + i\nwhile T > 0:\n    T -= 1\n    A = []\n    found = []\n    N = int(input())\n    for i in range(N):\n        (X, Y) = input().split()\n        if X != '-1':\n            Y = calculate(X, Y, S)\n            found.append(Y)\n        else:\n            temp = list(Y)\n            base = S[max(temp)] + 1\n            A.append([Y, base])\n    length = len(found)\n    if length == 0:\n        flag = False\n        final = len(A)\n        base = A[0][1]\n        for i in range(base, 37):\n            value = calculate(i, A[0][0], S)\n            if value > 1000000000000:\n                break\n            progress = recProgress(1, final, A, S, value)\n            if progress == final:\n                flag = True\n                break\n        if flag == True:\n            print(value)\n        else:\n            print('-1')\n    if length >= 1:\n        flag = True\n        if length != 1:\n            for i in range(length - 1):\n                if found[i] != found[i + 1]:\n                    flag = False\n        if flag == False:\n            print('-1')\n            continue\n        value = found[0]\n        final = len(A)\n        if value > 1000000000000:\n            progress = -1\n        else:\n            progress = recProgress(0, final, A, S, value)\n        if progress == -1:\n            print('-1')\n        else:\n            print(value)", "t = int(input())\nwhile t > 0:\n    l = []\n    l1 = []\n    flag = 0\n    n = int(input())\n    res = []\n    minus_c = 0\n    for _ in range(0, n):\n        (a, b) = input().split()\n        l.append(int(a))\n        l1.append(b)\n    for i in range(0, n):\n        lis = []\n        res.append(lis)\n    for i in range(0, n):\n        if l[i] == -1:\n            minus_c = minus_c + 1\n            for j in range(2, 37):\n                try:\n                    var = int(l1[i], j)\n                    if var <= 1000000000000:\n                        res[i].append(var)\n                except:\n                    continue\n        else:\n            var = int(l1[i], l[i])\n            if var <= 1000000000000:\n                res[i].append(var)\n    for i in range(0, len(res[0])):\n        k = res[0][i]\n        c = 0\n        for j in range(0, n):\n            if k in res[j]:\n                c = c + 1\n        if c == n:\n            print(k)\n            flag = 1\n            break\n    if flag == 0:\n        print('-1')\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    rl = []\n    cl = []\n    q = int(input())\n    q1 = q\n    hl = []\n    while q > 0:\n        (x, y) = input().split()\n        rl.append(int(x))\n        cl.append(y)\n        q = q - 1\n    for i in range(0, q1):\n        ll = []\n        hl.append(ll)\n    for i in range(0, q1):\n        x = rl[i]\n        y = cl[i]\n        if x != -1:\n            kk = int(y, x)\n            if kk <= 1000000000000:\n                hl[i].append(kk)\n        else:\n            for j in range(2, 37):\n                x = j\n                try:\n                    kk = int(y, x)\n                    if kk <= 1000000000000:\n                        hl[i].append(kk)\n                except:\n                    flag = 1\n    flag = 0\n    for i in range(0, len(hl[0])):\n        k = hl[0][i]\n        kc = 0\n        for j in range(0, q1):\n            if k in hl[j]:\n                kc = kc + 1\n        if kc == q1:\n            print(k)\n            flag = 1\n            break\n    if flag == 0:\n        print(-1)\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    rl = []\n    cl = []\n    q = int(input())\n    q1 = q\n    hl = []\n    while q > 0:\n        (x, y) = input().split()\n        rl.append(int(x))\n        cl.append(y)\n        q = q - 1\n    for i in range(0, q1):\n        ll = []\n        hl.append(ll)\n    for i in range(0, q1):\n        x = rl[i]\n        y = cl[i]\n        if x != -1:\n            kk = int(y, x)\n            if kk <= 1000000000000:\n                hl[i].append(kk)\n        else:\n            for j in range(2, 37):\n                x = j\n                try:\n                    kk = int(y, x)\n                    if kk <= 1000000000000:\n                        hl[i].append(kk)\n                except:\n                    flag = 1\n    flag = 0\n    for i in range(0, len(hl[0])):\n        k = hl[0][i]\n        kc = 0\n        for j in range(0, q1):\n            if k in hl[j]:\n                kc = kc + 1\n        if kc == q1:\n            print(k)\n            flag = 1\n            break\n    if flag == 0:\n        print(-1)\n    t = t - 1", "arr = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndic = {arr[i]: i + 1 for i in range(36)}\ndic['0'] = 2\nfor t in range(int(input())):\n    num = []\n    n = int(input())\n    for i in range(n):\n        lis = list(map(str, input().split()))\n        lis[0] = int(lis[0])\n        num.append(lis)\n    (x, y) = (0, 2)\n    for i in range(n):\n        if num[i][0] == -1:\n            c = 2\n            for j in num[i][1]:\n                if dic[j] > c:\n                    c = dic[j]\n            if y > c:\n                y = c\n                x = i\n            num[i][0] = c\n        if y < num[i][0]:\n            y = num[i][0]\n            x = i\n    i = num[x][0]\n    while i < 37:\n        (l, j) = (int(num[x][1], i), 0)\n        while j < n:\n            (fs, ls) = (num[j][0], 36)\n            while fs <= ls:\n                m = (fs + ls) // 2\n                l1 = int(num[j][1], m)\n                if l == l1:\n                    break\n                elif l < l1:\n                    ls = m - 1\n                else:\n                    fs = m + 1\n            if fs > ls:\n                break\n            j += 1\n        if j == n:\n            if l > 1000000000000:\n                print(-1)\n            else:\n                print(l)\n            break\n        i += 1\n    if i == 37:\n        print(-1)", "arr = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\ndic = {arr[i]: i + 1 for i in range(36)}\ndic['0'] = 2\nfor t in range(int(input())):\n    num = []\n    n = int(input())\n    for i in range(n):\n        lis = list(map(str, input().split()))\n        lis[0] = int(lis[0])\n        num.append(lis)\n    (x, y) = (0, 2)\n    for i in range(n):\n        if num[i][0] == -1:\n            c = 2\n            for j in num[i][1]:\n                if dic[j] > c:\n                    c = dic[j]\n            if y > c:\n                y = c\n                x = i\n            num[i][0] = c\n        if y < num[i][0]:\n            y = num[i][0]\n            x = i\n    i = num[x][0]\n    while i < 37:\n        (l, j) = (int(num[x][1], i), 0)\n        while j < n:\n            (fs, ls) = (num[j][0], 36)\n            while fs <= ls:\n                m = (fs + ls) // 2\n                l1 = int(num[j][1], m)\n                if l == l1:\n                    break\n                elif l < l1:\n                    ls = m - 1\n                else:\n                    fs = m + 1\n            if fs > ls:\n                break\n            j += 1\n        if j == n:\n            if l > 1000000000000:\n                print(-1)\n            else:\n                print(l)\n            break\n        i += 1\n    if i == 37:\n        print(-1)", "p = 1000000000000\nfor _ in range(int(input())):\n    n = int(input())\n    di = dict()\n    fk = 0\n    for w in range(n):\n        (x, y) = input().split()\n        x = int(x)\n        l = len(y)\n        d = set()\n        if x == -1:\n            b = 2\n            while b <= 36:\n                num = 0\n                f = 0\n                for i in range(l - 1, -1, -1):\n                    gt = 0\n                    if ord(y[i]) >= 65:\n                        gt = ord(y[i]) - ord('A') + 10\n                    else:\n                        gt = int(y[i])\n                    if gt >= b:\n                        f = 1\n                        break\n                    num += gt * pow(b, l - 1 - i)\n                    if num > p:\n                        f = 1\n                        break\n                if not f:\n                    d.add(num)\n                b += 1\n        else:\n            num = 0\n            fk = 0\n            for i in range(l - 1, -1, -1):\n                gt = 0\n                if ord(y[i]) >= 65:\n                    gt = ord(y[i]) - ord('A') + 10\n                else:\n                    gt = int(y[i])\n                if gt >= x:\n                    fk = 1\n                    break\n                num += gt * pow(x, l - 1 - i)\n                if num > p:\n                    fk = 1\n                    break\n            if not fk:\n                d.add(num)\n        for i in d:\n            if not di.get(i):\n                di.update({i: 1})\n            else:\n                di[i] += 1\n    mina = -1\n    for (key, value) in di.items():\n        if value == n:\n            if mina == -1:\n                mina = key\n            mina = min(key, mina)\n    print(mina)", "def ToInteger(a):\n    if a >= '0' and a <= '9':\n        return ord(a) - 48\n    elif a >= 'A' and a <= 'Z':\n        return ord(a) - 55\n\ndef ToDecimal(a, b):\n    base = 1\n    val = 0\n    for i in range(len(a) - 1, -1, -1):\n        val = val + ToInteger(a[i]) * base\n        base = base * b\n    return val\nt = int(input())\nfor test in range(t):\n    B = []\n    Y = []\n    n = int(input())\n    for i in range(n):\n        l = input().split()\n        B.append(int(l[0]))\n        Y.append(l[1])\n    valid_base = {}\n    for i in range(n):\n        if B[i] == -1:\n            for j in Y[i]:\n                m = ToInteger(j)\n                Base = 1\n                if Base < m:\n                    Base = m\n            valid_base[i] = Base + 1\n        else:\n            valid_base[i] = B[i]\n    X = []\n    for i in range(n):\n        if B[i] == -1:\n            z = []\n            for j in range(valid_base[i], 37):\n                z.append(ToDecimal(Y[i], j))\n            X.append(z)\n        else:\n            X.append([ToDecimal(Y[i], B[i])])\n    for i in range(0, len(X[0])):\n        flag = 1\n        p = X[0][i]\n        Z = p\n        for j in range(1, len(X)):\n            if p in X[j]:\n                Z = X[0][i]\n            else:\n                flag = 0\n                break\n        if flag == 1:\n            break\n    if flag == 0:\n        print(-1)\n    elif Z > 1000000000000:\n        print(-1)\n    else:\n        print(Z)", "p = 1000000000000\nfor _ in range(int(input())):\n    n = int(input())\n    di = dict()\n    fk = 0\n    for w in range(n):\n        (x, y) = input().split()\n        x = int(x)\n        l = len(y)\n        d = set()\n        if x == -1:\n            b = 2\n            while b <= 36:\n                num = 0\n                f = 0\n                for i in range(l - 1, -1, -1):\n                    gt = 0\n                    if ord(y[i]) >= 65:\n                        gt = ord(y[i]) - ord('A') + 10\n                    else:\n                        gt = int(y[i])\n                    if gt >= b:\n                        f = 1\n                        break\n                    num += gt * pow(b, l - 1 - i)\n                    if num > p:\n                        f = 1\n                        break\n                if not f:\n                    d.add(num)\n                b += 1\n        else:\n            num = 0\n            fk = 0\n            for i in range(l - 1, -1, -1):\n                gt = 0\n                if ord(y[i]) >= 65:\n                    gt = ord(y[i]) - ord('A') + 10\n                else:\n                    gt = int(y[i])\n                if gt >= x:\n                    fk = 1\n                    break\n                num += gt * pow(x, l - 1 - i)\n                if num > p:\n                    fk = 1\n                    break\n            if not fk:\n                d.add(num)\n        for i in d:\n            if not di.get(i):\n                di.update({i: 1})\n            else:\n                di[i] += 1\n    mina = -1\n    for (key, value) in di.items():\n        if value == n:\n            if mina == -1:\n                mina = key\n            mina = min(key, mina)\n    print(mina)", "def ToInteger(a):\n    bases = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 18, 'J': 19, 'K': 20, 'L': 21, 'M': 22, 'N': 23, 'O': 24, 'P': 25, 'Q': 26, 'R': 27, 'S': 28, 'T': 29, 'U': 30, 'V': 31, 'W': 32, 'X': 33, 'Y': 34, 'Z': 35}\n    return bases[a]\n\ndef ToDecimal(a, b):\n    base = 1\n    val = 0\n    for i in range(len(a) - 1, -1, -1):\n        val = val + ToInteger(a[i]) * base\n        base = base * b\n    return val\nt = int(input())\nfor test in range(t):\n    B = []\n    Y = []\n    n = int(input())\n    for i in range(n):\n        l = input().split()\n        B.append(int(l[0]))\n        Y.append(l[1])\n    valid_base = {}\n    for i in range(n):\n        if B[i] == -1:\n            for j in Y[i]:\n                m = ToInteger(j)\n                Base = 1\n                if Base < m:\n                    Base = m\n            valid_base[i] = Base + 1\n        else:\n            valid_base[i] = B[i]\n    X = []\n    for i in range(n):\n        if B[i] == -1:\n            z = []\n            for j in range(valid_base[i], 37):\n                z.append(ToDecimal(Y[i], j))\n            X.append(z)\n        else:\n            X.append([ToDecimal(Y[i], B[i])])\n    for i in range(0, len(X[0])):\n        flag = 1\n        p = X[0][i]\n        Z = p\n        for j in range(1, len(X)):\n            if p in X[j]:\n                Z = X[0][i]\n            else:\n                flag = 0\n                break\n        if flag == 1:\n            break\n    if flag == 0:\n        print(-1)\n    elif Z > 1000000000000:\n        print(-1)\n    else:\n        print(Z)", "t = int(input())\nfor m in range(t):\n    n = int(input())\n    a = []\n    mi = 100000000000000\n    for u in range(n):\n        l1 = list(input().split(' '))\n        d = int(l1[0])\n        e = l1[1]\n        l = []\n        di = {}\n        if d != -1:\n            s1 = 0\n            flag = 0\n            for i in range(len(e)):\n                v1 = 0\n                if e[i] >= 'A' and e[i] <= 'Z':\n                    v1 = ord(e[i]) - 55\n                else:\n                    v1 = int(e[i])\n                if v1 >= d:\n                    flag = 1\n                    break\n                s1 = s1 + v1 * d ** (len(e) - i - 1)\n                if s1 > 1000000000000:\n                    flag = 1\n                    break\n            if flag == 0:\n                l.append(s1)\n        else:\n            for i in range(2, 37):\n                s1 = 0\n                flag = 0\n                for j in range(len(e)):\n                    v1 = 0\n                    if e[j] >= 'A' and e[j] <= 'Z':\n                        v1 = ord(e[j]) - 55\n                    else:\n                        v1 = int(e[j])\n                    if v1 >= i:\n                        flag = 1\n                        break\n                    s1 = s1 + v1 * i ** (len(e) - j - 1)\n                    if s1 > 1000000000000:\n                        flag = 1\n                        break\n                if flag == 0:\n                    l.append(s1)\n        set1 = set(l)\n        for i in set1:\n            a.append(i)\n    for i in range(len(a)):\n        if a[i] in di.keys():\n            di[a[i]] += 1\n        else:\n            di[a[i]] = 1\n        if di[a[i]] == n:\n            mi = min(mi, a[i])\n    if mi > 1000000000000:\n        print(-1)\n    else:\n        print(mi)", "def maxi(num):\n    max = 0\n    for k in range(len(num)):\n        ind = len(num) - k - 1\n        if num[ind] >= 'A' and num[ind] <= 'Z':\n            dig = ord(num[ind]) - 55\n        else:\n            dig = int(num[ind])\n        if dig > max:\n            max = dig\n    return max\n\ndef decimal(num, b):\n    power = 1\n    nu = 0\n    for k in range(len(num)):\n        ind = len(num) - k - 1\n        if num[ind] >= 'A' and num[ind] <= 'Z':\n            dig = ord(num[ind]) - 55\n        else:\n            dig = int(num[ind])\n        nu = nu + power * dig\n        if nu > 1000000000000:\n            return -1\n        power = power * b\n    return nu\nt = input()\nt = int(t)\nwhile t:\n    t -= 1\n    n = input()\n    n = int(n)\n    base = []\n    number = []\n    for i in range(n):\n        (b, num) = input().split()\n        b = int(b)\n        base.append(b)\n        number.append(num)\n    start = 0\n    lst = []\n    flag = 0\n    for i in range(n):\n        b = base[i]\n        num = number[i]\n        new2 = set([])\n        if b != -1:\n            nu = decimal(num, b)\n            new2.add(nu)\n            lst.append(new2)\n        else:\n            mx = maxi(num)\n            for k in range(mx + 1, 37):\n                nu = decimal(num, k)\n                if nu != -1:\n                    new2.add(nu)\n            lst.append(new2)\n    new1 = set.intersection(*lst)\n    if len(new1) == 0:\n        print('-1')\n    else:\n        print(min(new1))", "for q in range(int(input())):\n    n = int(input())\n    t = 1\n    c = 0\n    while t <= n:\n        l = list(input().split(' '))\n        integer = []\n        for i in l[1]:\n            if i.isdigit():\n                integer.append(int(i))\n            else:\n                number = ord(i) - 65 + 10\n                integer.append(number)\n        if int(l[0]) != -1:\n            c = c + 1\n            multiplicant = 1\n            ans2 = []\n            ans1 = 0\n            for i in reversed(range(0, len(integer))):\n                ans1 = ans1 + integer[i] * multiplicant\n                multiplicant = multiplicant * int(l[0])\n            ans2.append(ans1)\n        else:\n            c = c + 1\n            ans2 = []\n            multiplicant = 1\n            ans1 = 0\n            power = max(integer)\n            for j in range(power + 1, 37):\n                ans1 = 0\n                multiplicant = 1\n                for i in reversed(range(0, len(integer))):\n                    ans1 = ans1 + integer[i] * multiplicant\n                    multiplicant = multiplicant * j\n                if ans1 <= 1000000000000:\n                    ans2.append(ans1)\n                else:\n                    break\n        if c == 1:\n            answer = ans2[:]\n        else:\n            answer = list(set(ans2).intersection(set(answer)))\n        t = t + 1\n        answer.sort()\n    if len(answer) > 0 and int(answer[0]) <= 1000000000000:\n        print(int(answer[0]))\n    else:\n        print('-1')", "for q in range(int(input())):\n    n = int(input())\n    t = 1\n    c = 0\n    while t <= n:\n        l = list(input().split(' '))\n        integer = []\n        for i in l[1]:\n            if i.isdigit():\n                integer.append(int(i))\n            else:\n                number = ord(i) - 65 + 10\n                integer.append(number)\n        if int(l[0]) != -1:\n            c = c + 1\n            multiplicant = 1\n            ans2 = []\n            ans1 = 0\n            for i in reversed(range(0, len(integer))):\n                ans1 = ans1 + integer[i] * multiplicant\n                multiplicant = multiplicant * int(l[0])\n            ans2.append(ans1)\n        else:\n            c = c + 1\n            ans2 = []\n            multiplicant = 1\n            ans1 = 0\n            power = max(integer)\n            for j in range(power + 1, 37):\n                ans1 = 0\n                multiplicant = 1\n                for i in reversed(range(0, len(integer))):\n                    ans1 = ans1 + integer[i] * multiplicant\n                    multiplicant = multiplicant * j\n                if ans1 <= 1000000000000:\n                    ans2.append(ans1)\n                else:\n                    break\n        if c == 1:\n            answer = ans2[:]\n        else:\n            answer = list(set(ans2).intersection(set(answer)))\n        t = t + 1\n        answer.sort()\n    if len(answer) > 0 and int(answer[0]) <= 1000000000000:\n        print(int(answer[0]))\n    else:\n        print('-1')", "def convertToDecimal(string, base):\n    val = 0\n    for i in range(len(string)):\n        if string[i] in '0123456789':\n            b = int(string[i])\n        else:\n            b = ord(string[i]) - 55\n        val += b * base ** (len(string) - i - 1)\n    return val\n\ndef allValues(string):\n    decimals = []\n    base = 2\n    while base <= 36:\n        val = 0\n        for i in range(len(string)):\n            if string[i] in '0123456789':\n                b = int(string[i])\n            else:\n                b = ord(string[i]) - 55\n            if b >= base:\n                val = -1\n                break\n            val += b * base ** (len(string) - 1 - i)\n        base += 1\n        if val != -1:\n            decimals.append(val)\n    return decimals\n\ndef intersection(lst1, lst2):\n    lst3 = [value for value in lst1 if value in lst2]\n    lst3 = list(set(lst3))\n    return lst3\nfor t in range(int(input())):\n    bases = []\n    nums = []\n    for i in range(int(input())):\n        (b, s) = input().split()\n        bases.append(int(b))\n        nums.append(s)\n    n = len(bases)\n    if n != 1:\n        a = allValues(nums[0])\n        b = allValues(nums[1])\n        if bases[0] != -1:\n            a = [convertToDecimal(nums[0], bases[0])]\n        if bases[1] != -1:\n            b = [convertToDecimal(nums[1], bases[1])]\n        arr = intersection(a, b)\n        for i in range(2, n):\n            if len(arr) == 0:\n                break\n            if bases[i] == -1:\n                arr = intersection(arr, allValues(nums[i]))\n            else:\n                arr = intersection(arr, [convertToDecimal(nums[i], bases[i])])\n        arr.sort()\n        if len(arr) == 0:\n            print(-1)\n        elif arr[0] <= 10 ** 12:\n            print(arr[0])\n        else:\n            print(-1)\n    else:\n        arr = []\n        if bases[0] == -1:\n            arr = allValues(nums[0])\n            if len(arr) == 0:\n                print(-1)\n            else:\n                print(arr[0])\n        else:\n            print(convertToDecimal(nums[0], bases[0]))", "def toAllBases(num):\n    bases = []\n    base = 2\n    while base < 37:\n        val = 0\n        for i in range(len(num)):\n            if num[i] in '0123456789':\n                x = int(num[i])\n            else:\n                x = ord(num[i]) - 55\n            if x >= base:\n                val = -1\n                break\n            val += x * base ** (len(num) - 1 - i)\n        base += 1\n        if val != -1:\n            bases.append(val)\n    return bases\n\ndef toDecimal(base, num):\n    val = 0\n    for i in range(len(num)):\n        if num[i] in '0123456789':\n            x = int(num[i])\n        else:\n            x = ord(num[i]) - 55\n        val += x * base ** (len(num) - 1 - i)\n    return val\n\ndef findIntersection(arr1, arr2):\n    arr = [value for value in arr1 if value in arr2]\n    arr = list(set(arr))\n    return arr\nfor T in range(int(input())):\n    bases = []\n    nums = []\n    for i in range(int(input())):\n        (base, num) = input().split()\n        bases.append(int(base))\n        nums.append(num)\n    n = len(bases)\n    if n != 1:\n        x = toAllBases(nums[0])\n        if bases[0] != -1:\n            x = [toDecimal(bases[0], nums[0])]\n        arr = x\n        for i in range(1, n):\n            if len(arr) == 0:\n                break\n            if bases[i] == -1:\n                arr = findIntersection(arr, toAllBases(nums[i]))\n            else:\n                arr = findIntersection(arr, [toDecimal(bases[i], nums[i])])\n        arr.sort()\n        if len(arr) == 0:\n            print(-1)\n        elif arr[0] <= 10 ** 12:\n            print(arr[0])\n        else:\n            print(-1)\n    else:\n        arr = []\n        if bases[0] == -1:\n            arr = toAllBases(nums[0])\n            if len(arr) == 0:\n                print(-1)\n            else:\n                print(arr[0])\n        else:\n            print(toDecimal(bases[0], nums[0]))", "mod = 10 ** 12\nT = int(input())\nfor t in range(T):\n    oNum = []\n    num = []\n    count = 0\n    n = int(input())\n    for i in range(n):\n        oNum.append(input())\n    for i in range(n):\n        num.append(oNum[i].split())\n    for i in range(n):\n        if num[i][0] != '-1':\n            count = 1\n            break\n    if count == 1:\n        s = num[i][1]\n        op = 0\n        abc = []\n        for j in range(len(s)):\n            if s[j] == '0' or s[j] == '1' or s[j] == '2' or (s[j] == '3') or (s[j] == '4') or (s[j] == '5') or (s[j] == '6') or (s[j] == '7') or (s[j] == '8') or (s[j] == '9'):\n                abc.append(int(s[j]))\n            else:\n                abc.append(int(s[j], 36))\n        for j in range(len(s)):\n            power = int(num[i][0]) ** j\n            op += abc[len(s) - 1 - j] * power\n            if op > mod:\n                break\n        if op > mod:\n            print(-1)\n        else:\n            tempCount = []\n            for i in range(n):\n                tempCount.append(0)\n            for i in range(n):\n                s = num[i][1]\n                abc = []\n                bat = 1\n                for j in range(len(s)):\n                    if s[j] == '0' or s[j] == '1' or s[j] == '2' or (s[j] == '3') or (s[j] == '4') or (s[j] == '5') or (s[j] == '6') or (s[j] == '7') or (s[j] == '8') or (s[j] == '9'):\n                        if int(s[j]) > bat:\n                            bat = int(s[j])\n                        abc.append(int(s[j]))\n                    else:\n                        if int(s[j], 36) > bat:\n                            bat = int(s[j], 36)\n                        abc.append(int(s[j], 36))\n                for k in range(bat + 1, 37):\n                    temp = 0\n                    for j in range(len(s)):\n                        power = k ** j\n                        temp += abc[len(s) - 1 - j] * power\n                        if temp > mod:\n                            break\n                    if temp == op:\n                        tempCount[i] = 1\n                        break\n            clock = 0\n            for i in range(n):\n                if tempCount[i] != 1:\n                    clock = 1\n                    break\n            if clock == 1:\n                print(-1)\n            else:\n                print(op)\n    else:\n        valueArr = 35\n        s = num[0][1]\n        value = [[0 for i in range(2)] for j in range(36)]\n        abc = []\n        bat = 1\n        for j in range(len(s)):\n            if s[j] == '0' or s[j] == '1' or s[j] == '2' or (s[j] == '3') or (s[j] == '4') or (s[j] == '5') or (s[j] == '6') or (s[j] == '7') or (s[j] == '8') or (s[j] == '9'):\n                if int(s[j]) > bat:\n                    bat = int(s[j])\n                abc.append(int(s[j]))\n            else:\n                if int(s[j], 36) > bat:\n                    bat = int(s[j], 36)\n                abc.append(int(s[j], 36))\n        for k in range(2, bat + 1):\n            value[k - 2][0] = -1\n        for k in range(bat + 1, 37):\n            temp = 0\n            roughCount = 0\n            for j in range(len(s)):\n                power = k ** j\n                temp += abc[len(s) - 1 - j] * power\n                if temp > mod:\n                    roughCount = 1\n                    break\n            if roughCount == 0:\n                value[k - 2][0] = temp\n            else:\n                value[k - 2][0] = -1\n        for i in range(1, n):\n            for g in range(valueArr):\n                value[g][1] = 0\n            s = num[i][1]\n            abc = []\n            bat = 1\n            for j in range(len(s)):\n                if s[j] == '0' or s[j] == '1' or s[j] == '2' or (s[j] == '3') or (s[j] == '4') or (s[j] == '5') or (s[j] == '6') or (s[j] == '7') or (s[j] == '8') or (s[j] == '9'):\n                    if int(s[j]) > bat:\n                        bat = int(s[j])\n                    abc.append(int(s[j]))\n                else:\n                    if int(s[j], 36) > bat:\n                        bat = int(s[j], 36)\n                    abc.append(int(s[j], 36))\n            for k in range(bat + 1, 37):\n                temp = 0\n                for j in range(len(s)):\n                    power = k ** j\n                    temp += abc[len(s) - 1 - j] * power\n                    if temp > mod:\n                        break\n                for l in range(valueArr):\n                    if temp == value[l][0] and value[l][0] != -1:\n                        value[l][1] = 1\n            k = 0\n            while k < valueArr:\n                if value[k][1] == 0:\n                    value.pop(k)\n                    valueArr = valueArr - 1\n                else:\n                    k += 1\n        tempArr = []\n        for g in range(valueArr):\n            tempArr.append(value[g][0])\n        countxyz = 0\n        tempArr.sort()\n        if valueArr > 0:\n            for g in range(valueArr):\n                if tempArr[g] >= 0 and tempArr[g] <= mod:\n                    print(tempArr[g])\n                    countxyz = 1\n                    break\n            if countxyz == 0:\n                print(-1)\n        else:\n            print(-1)", "import sys\nimport socket\nimport select\nimport string\nimport itertools as itt\nfrom sys import stdin, stdout\nimport functools\nimport numpy as np\n\ndef overlapping_elements(l):\n    result = set(l[0])\n    for s in l[1:]:\n        result.intersection_update(s)\n    return result\n\ndef valid_or_not(given_no, radix, i=0):\n    if i >= len(given_no):\n        return True\n    if not given_no[i].isdigit():\n        val = string.ascii_lowercase.find(given_no[i].lower())\n        if val == -1 or val + 10 >= radix:\n            return False\n    elif int(given_no[i]) >= radix:\n        return False\n    return valid_or_not(given_no, radix, i + 1)\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (b, val) = map(str, input().split())\n        f = []\n        if b == '-1':\n            for j in range(2, 37):\n                if valid_or_not(val, j):\n                    kk = int(val, j)\n                    f.append(kk)\n            l.append(f)\n        else:\n            b = int(b)\n            kkk = int(val, b)\n            f.append(kkk)\n            l.append(f)\n    xx = overlapping_elements(l)\n    if len(xx) == 0:\n        print(-1)\n    elif min(xx) > 10 ** 12:\n        print('-1')\n    else:\n        print(min(list(xx)))", "import sys\nimport socket\nimport select\nimport string\nimport itertools as itt\nfrom sys import stdin, stdout\nimport functools\nimport numpy as np\n\ndef overlapping_elements(l):\n    result = set(l[0])\n    for s in l[1:]:\n        result.intersection_update(s)\n    return result\n\ndef valid_or_not(given_no, radix, i=0):\n    if i >= len(given_no):\n        return True\n    if not given_no[i].isdigit():\n        val = string.ascii_lowercase.find(given_no[i].lower())\n        if val == -1 or val + 10 >= radix:\n            return False\n    elif int(given_no[i]) >= radix:\n        return False\n    return valid_or_not(given_no, radix, i + 1)\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (b, val) = map(str, input().split())\n        f = []\n        if b == '-1':\n            for j in range(2, 37):\n                if valid_or_not(val, j):\n                    kk = int(val, j)\n                    f.append(kk)\n            l.append(f)\n        else:\n            b = int(b)\n            kkk = int(val, b)\n            f.append(kkk)\n            l.append(f)\n    xx = overlapping_elements(l)\n    if len(xx) == 0:\n        print(-1)\n    elif min(xx) > 10 ** 12:\n        print('-1')\n    else:\n        print(min(list(xx)))", "d = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 18, 'J': 19, 'K': 20, 'L': 21, 'M': 22, 'N': 23, 'O': 24, 'P': 25, 'Q': 26, 'R': 27, 'S': 28, 'T': 29, 'U': 30, 'V': 31, 'W': 32, 'X': 33, 'Y': 34, 'Z': 35}\nmainLi = []\nsumCal = -1\n\ndef calDec(x, y):\n    sumDec = 0\n    power = 1\n    for i in range(len(y) - 1, -1, -1):\n        s = int(d[y[i]])\n        sumDec += s * power\n        power = power * x\n    return sumDec\n\ndef createList(x, y):\n    del mainLi[:]\n    for j in range(x, 37):\n        a = calDec(j, y)\n        if a <= 1000000000000:\n            mainLi.append(a)\n        else:\n            break\n    if len(mainLi) == 0:\n        return -1\n    else:\n        return mainLi[0]\n\ndef checkSum(x, y):\n    newLi = []\n    for j in range(x, 37):\n        a = calDec(j, y)\n        if a <= 1000000000000:\n            if a in mainLi:\n                newLi.append(a)\n    if len(newLi) == 0:\n        return -1\n    else:\n        del mainLi[:]\n        mainLi.extend(newLi)\n        return mainLi[0]\n\ndef checkSumD(x, y):\n    for i in range(x, 37):\n        a = calDec(i, y)\n        if a == sumCal:\n            return 1\n        elif a > sumCal:\n            return 0\n    return 0\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    Nu = n\n    sumCal = -1\n    li = []\n    sum1 = 0\n    fc = 0\n    f = 0\n    for _ in range(n):\n        (x, y) = map(str, input().split())\n        x = int(x)\n        if f != -1:\n            if x == -1:\n                maxB = int(d[y[0]])\n                for i in range(len(y)):\n                    w = int(d[y[i]])\n                    if w > maxB:\n                        maxB = w\n                if maxB < 2:\n                    maxB = 1\n                li.append([maxB + 1, y])\n            else:\n                Nu -= 1\n                if f == 0:\n                    sumCal = calDec(x, y)\n                    f = 1\n                    if sumCal > 1000000000000:\n                        f = -1\n                else:\n                    sum1 = calDec(x, y)\n                    if sum1 != sumCal:\n                        f = -1\n    if f != -1:\n        if sumCal == -1:\n            f12 = 0\n            k = 0\n            for i in range(Nu):\n                if i == 0:\n                    k = createList(li[0][0], li[0][1])\n                else:\n                    k = checkSum(li[i][0], li[i][1])\n                if k == -1:\n                    f12 = 1\n                    print('-1')\n                    break\n            if f12 == 0:\n                print(k)\n        else:\n            for i in range(Nu):\n                k = checkSumD(li[i][0], li[i][1])\n                if k == 0:\n                    print('-1')\n                    fc = 1\n                    break\n            if fc == 0:\n                print(sumCal)\n    else:\n        print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    ar = [[-1 for x in range(37)] for x in range(n)]\n    for i in range(n):\n        (b, y) = map(str, input().split())\n        b = int(b)\n        if b != -1:\n            ar[i][b] = int(y, b)\n        else:\n            for j in range(2, 37):\n                try:\n                    ar[i][j] = int(y, j)\n                except:\n                    z = 0\n    o = []\n    for i in range(2, 37):\n        y = ar[0][i]\n        cnt = 0\n        if y != -1 and y <= 1000000000000:\n            for j in range(1, n):\n                if y in ar[j]:\n                    cnt += 1\n                else:\n                    break\n        if cnt == n - 1:\n            o.append(ar[0][i])\n    if len(o) > 0:\n        print(min(o))\n    else:\n        print('-1')", "def reVal(num):\n    if num >= 0 and num <= 9:\n        return chr(num + ord('0'))\n    else:\n        return chr(num - 10 + ord('A'))\n\ndef strev(strr):\n    len = len(strr)\n    for i in range(int(len / 2)):\n        temp = strr[i]\n        strr[i] = strr[len - i - 1]\n        strr[len - i - 1] = temp\n\ndef fromDeci(res, base, inputNum):\n    if inputNum == 0:\n        return '0'\n    else:\n        index = 0\n        while inputNum > 0:\n            res += reVal(inputNum % base)\n            inputNum = int(inputNum / base)\n        res = res[::-1]\n    return res\n\ndef val(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef toDeci(strr, base):\n    llen = len(strr)\n    power = 1\n    num = 0\n    for i in range(llen - 1, -1, -1):\n        if val(strr[i]) >= base:\n            return -1\n        num += val(strr[i]) * power\n        power = power * base\n    return num\nfor t in range(int(input())):\n    Y = [] * 101\n    F = [] * 36\n    k = 0\n    c = 0\n    count = 0\n    check = 0\n    n = int(input())\n    for i in range(n):\n        (b, y) = input().split(' ')\n        b = int(b)\n        if b != -1:\n            l = toDeci(y, b)\n            if l == -1 and check == 0:\n                check = 1\n            count += 1\n        Y.append(y)\n        if k == 0 and b != -1:\n            strr = y\n            base = b\n            k = 1\n    if count > 0:\n        z = toDeci(strr, base)\n        if z > 1000000000000.0:\n            print('-1')\n        if z <= 1000000000000.0 and z > 0:\n            if check == 1:\n                print('-1')\n            else:\n                for i in range(2, 37):\n                    res = ''\n                    res = fromDeci(res, i, z)\n                    F.append(res)\n                for r in Y:\n                    if r in F:\n                        c += 1\n                if c == n:\n                    print(z)\n                else:\n                    print('-1')\n        if z == 0:\n            if check == 1:\n                print('-1')\n            else:\n                for i in range(2, 37):\n                    res = ''\n                    res = fromDeci(res, i, z)\n                    F.append(res)\n                for r in Y:\n                    if r in F:\n                        c += 1\n                if c == n:\n                    print(z)\n                else:\n                    print('-1')\n    if count == 0:\n        ans = -1\n        d = {}\n        s = 0\n        one = 0\n        for w in Y:\n            if w == '0':\n                s += 1\n        for dv in Y:\n            if w == '1':\n                one += 1\n        if s == n:\n            ans = 0\n        else:\n            for w in Y:\n                Z = []\n                for i in range(2, 37):\n                    result = toDeci(w, i)\n                    if result not in Z:\n                        Z.append(result)\n                        if result != -1:\n                            if result not in d:\n                                d[result] = 1\n                            else:\n                                d[result] += 1\n            mini = 100000000000000\n            bv = 0\n            for v in d:\n                if d[v] == n:\n                    bv += 1\n                    if v < mini:\n                        mini = v\n            if bv == 0:\n                mini = -1\n            ans = mini\n            if ans > 0:\n                if ans > 1000000000000.0:\n                    ans = -1\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ar = [[-1 for i in range(37)] for i in range(n)]\n    for i in range(n):\n        (b, y) = map(str, input().split())\n        b = int(b)\n        if b != -1:\n            ar[i][b] = int(y, b)\n        else:\n            for j in range(2, 37):\n                try:\n                    ar[i][j] = int(y, j)\n                except:\n                    z = 0\n    o = []\n    for i in range(2, 37):\n        y = ar[0][i]\n        cnt = 0\n        if y != -1 and y <= 1000000000000:\n            for j in range(1, n):\n                if y in ar[j]:\n                    cnt += 1\n                else:\n                    break\n        if cnt == n - 1:\n            o.append(ar[0][i])\n    if len(o) > 0:\n        print(min(o))\n    else:\n        print('-1')", "try:\n\n    def mal(c):\n        if c >= '0' and c <= '9':\n            return ord(c) - ord('0')\n        else:\n            return ord(c) - ord('A') + 10\n\n    def deciconver(strin, bas):\n        lengt = len(strin)\n        pow = 1\n        numb = 0\n        for i in range(lengt - 1, -1, -1):\n            if mal(strin[i]) >= bas:\n                return -1\n            numb += mal(strin[i]) * pow\n            pow = pow * bas\n        if numb > 1000000000000:\n            return -1\n        return numb\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        l = []\n        for i in range(0, n):\n            (x, y) = input().split()\n            l.append((int(x), y))\n        l1 = []\n        l2 = []\n        l3 = []\n        if l[0][0] == -1:\n            for i in range(2, 37):\n                var = deciconver(l[0][1], i)\n                if var != -1:\n                    l1.append(var)\n        else:\n            var = deciconver(l[0][1], l[0][0])\n            if var != -1:\n                l1.append(var)\n        if n == 1:\n            if len(l1) == 0:\n                print('-1')\n                continue\n            else:\n                print(l1[0])\n                continue\n        for i in range(1, n):\n            if l[i][0] == -1:\n                for j in range(2, 37):\n                    var = deciconver(l[i][1], j)\n                    if var != -1:\n                        l2.append(var)\n            else:\n                var = deciconver(l[i][1], l[i][0])\n                if var != -1:\n                    l2.append(var)\n            r = len(l1)\n            s = len(l2)\n            p = 0\n            q = 0\n            while p < r and q < s:\n                if l1[p] < l2[q]:\n                    p += 1\n                elif l1[p] > l2[q]:\n                    q += 1\n                else:\n                    l3.append(l1[p])\n                    p += 1\n                    q += 1\n            u = len(l3)\n            if u == 0:\n                print('-1')\n                break\n            l1 = l3.copy()\n            l3.clear()\n            l2.clear()\n        if u != 0:\n            print(l1[0])\n        t -= 1\nexcept:\n    pass", "t = int(input())\n\ndef convert_to_int(x):\n    o = ord(x)\n    if 48 <= o <= 57:\n        return o - 48\n    if 65 <= o <= 90:\n        return o - 55\n\ndef convert_to_num(arr, base):\n    n = len(arr)\n    b = 1\n    num = 0\n    for i in range(n - 1, -1, -1):\n        num += arr[i] * b\n        b = b * base\n    return num\n\ndef validate_base_b(arr, b):\n    for num in arr:\n        if num > b - 1:\n            return False\n    return True\nfor _ in range(t):\n    n = int(input())\n    sets = [set() for i in range(n)]\n    for k in range(n):\n        (b, y) = list(map(str, input().split()))\n        b = int(b)\n        y = [convert_to_int(x) for x in list(y)]\n        if b != -1:\n            sets[k].add(convert_to_num(y, b))\n        else:\n            for i in range(2, 37):\n                if validate_base_b(y, i):\n                    sets[k].add(convert_to_num(y, i))\n    s = sets[0]\n    for i in range(1, n):\n        s.intersection_update(sets[i])\n    if len(s) == 0 or min(s) > pow(10, 12):\n        print(-1)\n    else:\n        print(min(s))", "dic = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 18, 'J': 19, 'K': 20, 'L': 21, 'M': 22, 'N': 23, 'O': 24, 'P': 25, 'Q': 26, 'R': 27, 'S': 28, 'T': 29, 'U': 30, 'V': 31, 'W': 32, 'X': 33, 'Y': 34, 'Z': 35}\nfor _ in range(int(input())):\n    ans = set()\n    for n in range(int(input())):\n        (b, y) = input().split(' ')\n        b = int(b)\n        y = list(y)\n        for i in range(len(y)):\n            y[i] = dic[y[i]]\n        minbase = max(y) + 1\n        mid = set()\n        if b != -1:\n            val = 0\n            for i in range(len(y)):\n                val = val * b + y[i]\n            mid.add(val)\n        else:\n            for i in range(minbase, 37):\n                val = 0\n                for j in range(len(y)):\n                    val = val * i + y[j]\n                mid.add(val)\n        if n == 0:\n            ans = ans.union(mid)\n        else:\n            ans = ans.intersection(mid)\n    if len(ans) == 0:\n        print(-1)\n    else:\n        abc = min(ans)\n        if abc > 10 ** 12:\n            print(-1)\n        else:\n            print(abc)", "import string\nimport itertools as itt\nfrom sys import stdin, stdout\nimport functools\nimport numpy as np\n\ndef check(num, base, i=0):\n    if i >= len(num):\n        return True\n    if not num[i].isdigit():\n        val = string.ascii_lowercase.find(num[i].lower())\n        if val == -1 or val + 10 >= base:\n            return False\n    elif int(num[i]) >= base:\n        return False\n    return check(num, base, i + 1)\n\ndef common(l):\n    result = set(l[0])\n    for s in l[1:]:\n        result.intersection_update(s)\n    return result\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    for i in range(n):\n        (b, val) = map(str, input().split())\n        f = []\n        if b == '-1':\n            for j in range(2, 37):\n                if check(val, j):\n                    kk = int(val, j)\n                    f.append(kk)\n            l.append(f)\n        else:\n            b = int(b)\n            kkk = int(val, b)\n            f.append(kkk)\n            l.append(f)\n    xx = common(l)\n    if len(xx) == 0:\n        print(-1)\n    elif min(xx) > 10 ** 12:\n        print('-1')\n    else:\n        print(min(list(xx)))", "def f(num):\n    original = -1\n    if num[0][0] != -1:\n        original = int(num[0][1], base=num[0][0])\n        for i in num:\n            if i[0] != -1:\n                if int(i[1], base=i[0]) != original:\n                    return -1\n            else:\n                count = 0\n                for j in range(2, 37):\n                    try:\n                        if int(i[1], base=j) == original:\n                            count += 1\n                            break\n                    except ValueError:\n                        pass\n                if count == 0:\n                    return -1\n        if original >= 1000000000000.0:\n            return -1\n        else:\n            return original\n    else:\n        boom = []\n        for k in range(2, 37):\n            try:\n                boom.append(int(num[0][1], base=k))\n            except ValueError:\n                pass\n        for j in num:\n            y = []\n            for k in range(2, 37):\n                try:\n                    y.append(int(j[1], base=k))\n                except ValueError:\n                    pass\n            boom = [value for value in y if value in boom]\n            boom.sort()\n            if len(boom) == 0:\n                return -1\n        if boom[0] > 1000000000000.0:\n            return -1\n        else:\n            return boom[0]\n    return original\nfor t in range(int(input())):\n    n = int(input())\n    num = []\n    for i in range(n):\n        (a, b) = input().split()\n        a = int(a)\n        num.append([a, b])\n    num = sorted(num, key=lambda x: x[0], reverse=True)\n    print(f(num))", "for _ in range(int(input())):\n    n = int(input())\n    ls = [[-1 for i in range(37)] for i in range(n)]\n    for i in range(n):\n        (b, y) = map(str, input().split())\n        m = int(b)\n        if m != -1:\n            ls[i][m] = int(y, m)\n        else:\n            for j in range(2, 37):\n                try:\n                    ls[i][j] = int(y, j)\n                except:\n                    z = 0\n    arr = []\n    for i in range(2, 37):\n        y = ls[0][i]\n        count = 0\n        if y != -1 and y <= 1000000000000:\n            for j in range(1, n):\n                if y in ls[j]:\n                    count += 1\n                else:\n                    break\n        if count == n - 1:\n            arr.append(ls[0][i])\n    if len(arr) > 0:\n        print(min(arr))\n    else:\n        print('-1')", "MAXNUMBER = 1000000000000\nTotal_number_of_testcase = int(input())\nfor testcase in range(Total_number_of_testcase):\n    number = input()\n    number = int(number)\n    counter = False\n    result = 0\n    my_list = []\n    for index1 in range(number):\n        (intermediate_number, string) = input().split()\n        intermediate_number = int(intermediate_number)\n        if intermediate_number != -1 and counter == False:\n            if int(string, intermediate_number) > MAXNUMBER:\n                result = -1\n            else:\n                counter = int(string, intermediate_number)\n        elif intermediate_number != -1 and counter != False:\n            if counter == int(string, intermediate_number):\n                pass\n            else:\n                result = -1\n        else:\n            intermediate = [intermediate_number, string]\n            my_list.append(intermediate)\n    length_of_list = len(my_list)\n    if result == -1:\n        print(result)\n    elif counter == False:\n        new_set = set()\n        for number2 in range(2, 37):\n            try:\n                temporary = int(my_list[0][1], number2)\n                if temporary > MAXNUMBER:\n                    pass\n                else:\n                    new_set.add(temporary)\n            except ValueError:\n                pass\n        for index2 in range(1, length_of_list):\n            another_set = set()\n            for index3 in range(2, 37):\n                try:\n                    temporary = int(my_list[index2][1], index3)\n                    if temporary > MAXNUMBER:\n                        pass\n                    else:\n                        another_set.add(temporary)\n                except ValueError:\n                    pass\n            new_set.intersection_update(another_set)\n        if len(new_set) != 0:\n            print(min(new_set))\n        else:\n            print(-1)\n    else:\n        answer = 0\n        for index4 in my_list:\n            for index5 in range(2, 37):\n                try:\n                    if int(index4[1], index5) != counter:\n                        pass\n                    else:\n                        answer += 1\n                        break\n                except ValueError:\n                    pass\n        if answer != length_of_list:\n            print(-1)\n        else:\n            print(counter)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    ans = []\n    minimum = 10 ** 16\n    for i in range(n):\n        l = list(input().split(' '))\n        x = int(l[0])\n        y = l[1]\n        lst = []\n        d = {}\n        if x == -1:\n            for i in range(2, 37):\n                s = 0\n                flag = 0\n                for j in range(len(y)):\n                    v = 0\n                    if y[j] >= 'A' and y[j] <= 'Z':\n                        v = ord(y[j]) - 55\n                    else:\n                        v = int(y[j])\n                    if v >= i:\n                        flag = 1\n                        break\n                    s = s + v * i ** (len(y) - j - 1)\n                    if s > 10 ** 12:\n                        flag = 1\n                        break\n                if flag == 0:\n                    lst.append(s)\n        else:\n            s = 0\n            flag = 0\n            for i in range(len(y)):\n                v = 0\n                if y[i] >= 'A' and y[i] <= 'Z':\n                    v = ord(y[i]) - 55\n                else:\n                    v = int(y[i])\n                if v >= x:\n                    flag = 1\n                    break\n                s = s + v * x ** (len(y) - i - 1)\n                if s > 10 ** 12:\n                    flag = 1\n                    break\n            if flag == 0:\n                lst.append(s)\n        s1 = set(lst)\n        for i in s1:\n            ans.append(i)\n    for i in range(len(ans)):\n        if ans[i] in d.keys():\n            d[ans[i]] += 1\n        else:\n            d[ans[i]] = 1\n        if d[ans[i]] == n:\n            minimum = min(minimum, ans[i])\n    if minimum > 10 ** 12:\n        print(-1)\n    else:\n        print(minimum)\n    t -= 1", "def conversion(s, b):\n    return int(s, b)\nfor _ in range(int(input())):\n    N = int(input())\n    mm = 1000000000000\n    arr = []\n    forward = True\n    X = -1\n    for _ in range(N):\n        (b, s) = input().split()\n        b = int(b)\n        if b == -1:\n            arr.append(s)\n        if b != -1 and forward:\n            x = conversion(s, b)\n            if X == -1 and forward:\n                X = x\n            elif X != x or forward == False or x > mm:\n                print(-1)\n                forward = False\n    if forward and len(arr) != N:\n        flag = True\n        for s in arr:\n            flag2 = True\n            for B in range(2, 37):\n                try:\n                    x = conversion(s, B)\n                    if X == x and x <= mm:\n                        flag2 = False\n                        break\n                except ValueError:\n                    continue\n            if flag2:\n                flag = False\n                break\n        if flag:\n            print(X)\n        else:\n            print(-1)\n    elif forward:\n        mainFlag = False\n        X = 0\n        for i in range(2, 37):\n            try:\n                X = conversion(arr[0], i)\n                flag = True\n                for s in arr:\n                    flag2 = True\n                    for B in range(2, 37):\n                        try:\n                            x = conversion(s, B)\n                            if X == x and x <= mm:\n                                flag2 = False\n                                break\n                        except ValueError:\n                            continue\n                    if flag2:\n                        flag = False\n                        break\n                if flag:\n                    mainFlag = True\n                    break\n            except ValueError:\n                continue\n        if mainFlag:\n            print(X)\n        else:\n            print(-1)", "def base(b, pakoda):\n    pakoda[0] = b\n    return change(pakoda)\n\ndef change(amitabh):\n    j = len(amitabh[1]) - 1\n    c = 0\n    gamma = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for k in amitabh[1]:\n        if k in gamma:\n            c += (ord(k) - 55) * int(amitabh[0]) ** j\n        else:\n            c += int(k) * int(amitabh[0]) ** j\n        j -= 1\n    return c\n\ndef amma(h):\n    dadi = 1\n    gamma = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    for k in h:\n        if k in gamma:\n            if dadi < ord(k) - 55:\n                dadi = ord(k) - 55\n        elif dadi < int(k):\n            dadi = int(k)\n    return dadi + 1\nfor _ in range(int(input())):\n    N = int(input())\n    x = []\n    ans = []\n    quora = 0\n    check = 0\n    count = 0\n    for i in range(N):\n        x.append(str.split(input()))\n        for i in x:\n            if i[0] != '-1':\n                l = change(i)\n                if l not in ans:\n                    ans.append(l)\n    quora = len(ans)\n    if quora == 0:\n        m = []\n        count = N\n        for i in x:\n            maxx = amma(i[1])\n            m.append(maxx)\n        r = int(max(m))\n        for i in x:\n            maxx = amma(i[1])\n            if maxx == r:\n                ensure = i\n        for i in range(r, 37):\n            check = 0\n            MYOUTPUT = base(i, ensure)\n            for i in x:\n                maxx = amma(i[1])\n                for j in range(maxx, 37):\n                    q = base(j, i)\n                    if q > MYOUTPUT:\n                        break\n                    if q == MYOUTPUT:\n                        check += 1\n            if check == count:\n                break\n    if quora == 1:\n        MYOUTPUT = ans[0]\n    if quora > 1 or MYOUTPUT > 10 ** 12:\n        MYOUTPUT = -1\n    if MYOUTPUT != -1:\n        for i in x:\n            if i[0] == '-1':\n                maxx = amma(i[1])\n                count += 1\n                for j in range(maxx, 37):\n                    q = base(j, i)\n                    if q > MYOUTPUT:\n                        break\n                    elif q == MYOUTPUT:\n                        check += 1\n                        break\n    if check < count:\n        print('-1')\n    else:\n        print(MYOUTPUT)", "test = input()\ntest = int(test)\nfor u in range(test):\n    n = input()\n    n = int(n)\n    arr = [['-1' for a in range(37)] for b in range(n)]\n    for a in range(n):\n        (num, y) = map(str, input().split())\n        num = int(num)\n        if num != -1:\n            arr[a][num] = int(y, num)\n        else:\n            for b in range(2, 37):\n                try:\n                    arr[a][b] = int(y, b)\n                except:\n                    qwery = 0\n    arr2 = []\n    for a in range(2, 37):\n        e = arr[0][a]\n        k = 0\n        if int(e) != -1 and int(e) <= 1000000000000:\n            for b in range(1, n):\n                if e in arr[b]:\n                    k += 1\n                else:\n                    break\n        if k == n - 1:\n            arr2.append(arr[0][a])\n    if len(arr2) > 0:\n        print(min(arr2))\n    else:\n        print('-1')", "for _ in range(int(input())):\n    no = int(input())\n    miss = [['-1' for i in range(37)] for j in range(no)]\n    for i in range(no):\n        (num, y) = map(str, input().split())\n        num = int(num)\n        if num != -1:\n            miss[i][num] = int(y, num)\n        else:\n            for j in range(2, 37):\n                try:\n                    miss[i][j] = int(y, j)\n                except:\n                    tatti = 0\n    s = []\n    for i in range(2, 37):\n        ment = miss[0][i]\n        k = 0\n        if int(ment) != -1 and int(ment) <= 1000000000000:\n            for j in range(1, no):\n                if ment in miss[j]:\n                    k += 1\n                else:\n                    break\n        if k == no - 1:\n            s.append(miss[0][i])\n    if len(s) > 0:\n        print(min(s))\n    else:\n        print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    lis = [['-1' for i in range(37)] for j in range(n)]\n    for i in range(n):\n        (num, y) = map(str, input().split())\n        num = int(num)\n        if num != -1:\n            lis[i][num] = int(y, num)\n        else:\n            for j in range(2, 37):\n                try:\n                    lis[i][j] = int(y, j)\n                except:\n                    doSomething = 0\n    lis[0].sort\n    lis2 = []\n    for i in range(2, 37):\n        elem = lis[0][i]\n        k = 0\n        if int(elem) != -1 and int(elem) <= 1000000000000:\n            for j in range(1, n):\n                if elem in lis[j]:\n                    k += 1\n                else:\n                    break\n        if k == n - 1:\n            lis2.append(lis[0][i])\n    if len(lis2) > 0:\n        print(min(lis2))\n    else:\n        print('-1')", "for _ in range(int(input())):\n    n = int(input())\n    lis = [['-1' for i in range(37)] for j in range(n)]\n    for i in range(n):\n        (num, y) = map(str, input().split())\n        num = int(num)\n        if num != -1:\n            lis[i][num] = int(y, num)\n        else:\n            for j in range(2, 37):\n                try:\n                    lis[i][j] = int(y, j)\n                except:\n                    doSomething = 0\n    lis[0].sort\n    lis2 = []\n    for i in range(2, 37):\n        elem = lis[0][i]\n        k = 0\n        if int(elem) != -1 and int(elem) <= 1000000000000:\n            for j in range(1, n):\n                if elem in lis[j]:\n                    k += 1\n                else:\n                    break\n        if k == n - 1:\n            lis2.append(lis[0][i])\n    if len(lis2) > 0:\n        print(min(lis2))\n    else:\n        print('-1')", "def con_to_dec(string, base):\n    val = 0\n    for i in range(len(string)):\n        if string[i] in '0123456789':\n            b = int(string[i])\n        else:\n            b = ord(string[i]) - 55\n        val += b * base ** (len(string) - i - 1)\n    return val\n\ndef con_to_all_dec(string):\n    alldecimals = []\n    base = 2\n    while base < 37:\n        val = 0\n        for i in range(len(string)):\n            if string[i] in '0123456789':\n                b = int(string[i])\n            else:\n                b = ord(string[i]) - 55\n            if b >= base:\n                val = -1\n                break\n            val += b * base ** (len(string) - 1 - i)\n        base += 1\n        if val != -1:\n            alldecimals.append(val)\n    return alldecimals\n\ndef intersection(lst1, lst2):\n    lst3 = [value for value in lst1 if value in lst2]\n    lst3 = list(set(lst3))\n    return lst3\nfor t in range(int(input())):\n    bases = []\n    strings = []\n    for i in range(int(input())):\n        (b, s) = input().split()\n        bases.append(int(b))\n        strings.append(s)\n    n = len(bases)\n    if n != 1:\n        a = con_to_all_dec(strings[0])\n        b = con_to_all_dec(strings[1])\n        if bases[0] != -1:\n            a = [con_to_dec(strings[0], bases[0])]\n        if bases[1] != -1:\n            b = [con_to_dec(strings[1], bases[1])]\n        arr = intersection(a, b)\n        for i in range(2, n):\n            if len(arr) == 0:\n                break\n            if bases[i] == -1:\n                arr = intersection(arr, con_to_all_dec(strings[i]))\n            else:\n                arr = intersection(arr, [con_to_dec(strings[i], bases[i])])\n        arr.sort()\n        if len(arr) == 0:\n            print(-1)\n        elif arr[0] <= 10 ** 12:\n            print(arr[0])\n        else:\n            print(-1)\n    else:\n        arr = []\n        if bases[0] == -1:\n            arr = con_to_all_dec(strings[0])\n            if len(arr) == 0:\n                print(-1)\n            else:\n                print(arr[0])\n        else:\n            print(con_to_dec(strings[0], bases[0]))", "for opt in range(int(input())):\n    number = int(input())\n    ar = [[-1 for i in range(37)] for i in range(number)]\n    for i in range(number):\n        (base, y) = map(str, input().split())\n        base = int(base)\n        if base != -1:\n            ar[i][base] = int(y, base)\n        else:\n            for j in range(2, 37):\n                try:\n                    ar[i][j] = int(y, j)\n                except:\n                    z = 0\n    orde = []\n    for i in range(2, 37):\n        y = ar[0][i]\n        cnt = 0\n        if y != -1 and y <= 1000000000000:\n            for j in range(1, number):\n                if y in ar[j]:\n                    cnt += 1\n                else:\n                    break\n        if cnt == number - 1:\n            orde.append(ar[0][i])\n    if len(orde) > 0:\n        print(min(orde))\n    else:\n        print('-1')", "def val(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef toDeci(str, base):\n    llen = len(str)\n    power = 1\n    num = 0\n    for i in range(llen - 1, -1, -1):\n        if val(str[i]) >= base:\n            return -1\n        num += val(str[i]) * power\n        power = power * base\n    return num\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = set()\n    l2 = []\n    p = []\n    ans = 0\n    n1 = n\n    c1 = 0\n    c2 = 0\n    while n > 0:\n        (B, Y) = map(str, input().split())\n        B = int(B)\n        if B != -1:\n            c1 += 1\n            x = toDeci(Y, B)\n            if x != -1:\n                s.add(x)\n        else:\n            c2 += 1\n            for i in range(2, 37):\n                x = toDeci(Y, i)\n                if x != -1:\n                    l2.append(x)\n            p.append(l2)\n            l2 = []\n        n -= 1\n    if c1 == n1:\n        if len(s) == 1:\n            temp = list(s)\n            if temp[0] <= 10 ** 12:\n                print(temp[0])\n            else:\n                print(-1)\n        else:\n            print(-1)\n    elif c2 == n1:\n        ans = set(p[0])\n        for i in p:\n            ans = ans.intersection(i)\n        if len(ans) == 0:\n            print(-1)\n        elif min(ans) <= 10 ** 12:\n            print(min(ans))\n        else:\n            print(-1)\n    else:\n        ans = set(p[0])\n        for i in p:\n            ans = ans.intersection(i)\n        if len(s) == 1:\n            ans = ans.intersection(s)\n            if len(ans) == 1:\n                temp = list(ans)\n                if temp[0] <= 10 ** 12:\n                    print(temp[0])\n                else:\n                    print(-1)\n            else:\n                print(-1)\n        else:\n            print(-1)\n    t -= 1", "def minbase(Y):\n    m = 0\n    for j in range(0, len(Y)):\n        if ord(Y[j]) >= 65:\n            v = ord(Y[j]) - 55\n            if v > m:\n                m = v\n        else:\n            v = int(Y[j])\n            if v > m:\n                m = v\n    return m + 1\n\ndef vue(B, Y):\n    res = 0\n    for j in range(0, len(Y)):\n        if ord(Y[j]) >= 65:\n            v = ord(Y[j]) - 55\n            res += v * B ** (len(Y) - j - 1)\n        else:\n            v = int(Y[j])\n            res += v * B ** (len(Y) - j - 1)\n    return res\nte = int(input())\nfor j in range(0, te):\n    N = int(input())\n    B1 = []\n    B2 = []\n    Y1 = []\n    Y2 = []\n    for i in range(0, N):\n        a2 = input()\n        a1 = a2.split()\n        if int(a1[0]) != -1:\n            B1.append(int(a1[0]))\n            Y1.append(a1[1])\n        else:\n            B2.append(int(a1[0]))\n            Y2.append(a1[1])\n    r = -1\n    flag1 = 0\n    b = 'True'\n    for j in range(0, len(B1)):\n        v = vue(B1[j], Y1[j])\n        if j == 0:\n            r = v\n        if j > 0:\n            if r == v:\n                continue\n            else:\n                r = -1\n                b = 'False'\n                break\n    if b == 'True':\n        if r != -1:\n            b1flag = 'True'\n            for k in range(0, len(B2)):\n                if b1flag == 'False':\n                    break\n                m = minbase(Y2[k])\n                for l in range(m, 37):\n                    v = vue(l, Y2[k])\n                    if r == v:\n                        break\n                    elif l == 36:\n                        r = -1\n                        b1flag = 'False'\n                        break\n        else:\n            m = minbase(Y2[0])\n            k = 0\n            for m in range(m, 38):\n                if k == 1:\n                    break\n                if m == 37:\n                    r = -1\n                    break\n                r = vue(m, Y2[0])\n                if len(Y2) == 1:\n                    break\n                b1flag = 'True'\n                for k in range(1, len(Y2)):\n                    if b1flag == 'False':\n                        break\n                    m = minbase(Y2[k])\n                    for l in range(m, 37):\n                        v = vue(l, Y2[k])\n                        if r == v:\n                            if k == len(Y2) - 1:\n                                k = 1\n                            break\n                        elif l == 36:\n                            b1flag = 'False'\n                            break\n    if r > 10 ** 12:\n        print('-1')\n    else:\n        print(r)", "d = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 18, 'J': 19, 'K': 20, 'L': 21, 'M': 22, 'N': 23, 'O': 24, 'P': 25, 'Q': 26, 'R': 27, 'S': 28, 'T': 29, 'U': 30, 'V': 31, 'W': 32, 'X': 33, 'Y': 34, 'Z': 35}\n\ndef solve(a, rolf):\n    n = len(rolf)\n    c = 1\n    lol = 0\n    for i in range(n - 1, -1, -1):\n        lol += d[rolf[i]] * c\n        c *= a\n    return lol\n\ndef solo(ls, k):\n    number = 0\n    for i in ls:\n        c = -1\n        mon = 1\n        for j in i:\n            mon = max(mon, d[j])\n        for j in range(mon + 1, 37):\n            x = solve(j, i)\n            if x == k:\n                c = 0\n                break\n        if c == -1:\n            return False\n    return True\n\ndef group(ls):\n    a = []\n    rolf = ls[0]\n    mon = 1\n    for j in rolf:\n        mon = max(mon, d[j])\n    for j in range(mon + 1, 37):\n        x = solve(j, rolf)\n        a.append(x)\n    n = len(ls)\n    for i in range(1, n):\n        mon = 1\n        b = []\n        rolf = ls[i]\n        for j in rolf:\n            mon = max(mon, d[j])\n        for j in range(mon + 1, 37):\n            x = solve(j, rolf)\n            if x in a:\n                b.append(x)\n        if len(b) == 0:\n            return -1\n        a = b\n    a.sort()\n    return a[0]\nfor _ in range(int(input())):\n    n = int(input())\n    ls = []\n    oye = 0\n    k = -1\n    for _ in range(n):\n        (a, b) = input().split()\n        if int(a) != -1:\n            k1 = solve(int(a), b)\n            if k == -1:\n                k = k1\n            elif k != k1:\n                oye = -1\n        else:\n            ls.append(b)\n    if oye == -1 or k > 1000000000000:\n        print(-1)\n    elif len(ls) == n:\n        k = group(ls)\n        if k > 1000000000000:\n            print(-1)\n        else:\n            print(k)\n    elif solo(ls, k):\n        print(k)\n    else:\n        print(-1)", "def convert(s, base):\n    c = 1\n    d = 0\n    m = 0\n    for x in reversed(s):\n        if ord(x) > 64:\n            m = ord(x) - 55\n        else:\n            m = int(x)\n        d = d + m * c\n        c *= base\n    return d\n\ndef check(a, b, res, start, n, k):\n    f = 1\n    for i in range(start, n):\n        if i != k:\n            f2 = 0\n            if a[i] == -1:\n                m = max(b[i])\n                if ord(m) > 64:\n                    m = ord(m) - 55\n                else:\n                    m = int(m)\n                for j in range(m + 1, 37):\n                    dec = convert(b[i], j)\n                    if dec == res:\n                        f2 = 1\n                        break\n                    elif dec > res:\n                        f = 0\n                        break\n            else:\n                dec = convert(b[i], a[i])\n                if dec == res:\n                    f2 = 1\n                else:\n                    f = 0\n            if not f2:\n                f = 0\n        if not f:\n            return 0\n    return f\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    res = -1\n    k = -1\n    a = [0 for x in range(n)]\n    b = []\n    for i in range(n):\n        (x, y) = map(str, input().split())\n        x = int(x)\n        a[i] = x\n        b.append(y)\n        if x != -1:\n            res = convert(y, x)\n            k = i\n    f = 1\n    if res > 1000000000000:\n        print(-1)\n        continue\n    if k != -1:\n        f = check(a, b, res, 0, n, k)\n        if f:\n            print(res)\n        else:\n            print(-1)\n    elif n == 1:\n        dec = convert(b[0], 2)\n        print(dec)\n    else:\n        comm = []\n        d = {}\n        m = max(b[0])\n        if ord(m) > 64:\n            m = ord(m) - 55\n        else:\n            m = int(m)\n        for j in range(m + 1, 37):\n            dec = convert(b[0], j)\n            if dec <= 1000000000000:\n                d[dec] = 1\n        m = max(b[1])\n        if ord(m) > 64:\n            m = ord(m) - 55\n        else:\n            m = int(m)\n        for j in range(m + 1, 37):\n            dec = convert(b[1], j)\n            if dec in d:\n                comm.append(dec)\n        f = 0\n        for res in comm:\n            f = check(a, b, res, 2, n, 0)\n            if f:\n                print(res)\n                break\n        if not f:\n            print(-1)", "def toAllBases(num):\n    bases = []\n    base = 2\n    while base < 37:\n        val = 0\n        for i in range(len(num)):\n            if num[i] in '0123456789':\n                x = int(num[i])\n            else:\n                x = ord(num[i]) - 55\n            if x >= base:\n                val = -1\n                break\n            val += x * base ** (len(num) - 1 - i)\n        base += 1\n        if val != -1:\n            bases.append(val)\n    return bases\n\ndef toDecimal(base, num):\n    val = 0\n    for i in range(len(num)):\n        if num[i] in '0123456789':\n            x = int(num[i])\n        else:\n            x = ord(num[i]) - 55\n        val += x * base ** (len(num) - 1 - i)\n    return val\n\ndef findIntersection(arr1, arr2):\n    arr = [value for value in arr1 if value in arr2]\n    arr = list(set(arr))\n    return arr\nfor T in range(int(input())):\n    bases = []\n    nums = []\n    for i in range(int(input())):\n        (base, num) = input().split()\n        bases.append(int(base))\n        nums.append(num)\n    n = len(bases)\n    if n != 1:\n        x = toAllBases(nums[0])\n        if bases[0] != -1:\n            x = [toDecimal(bases[0], nums[0])]\n        arr = x\n        for i in range(1, n):\n            if len(arr) == 0:\n                break\n            if bases[i] == -1:\n                arr = findIntersection(arr, toAllBases(nums[i]))\n            else:\n                arr = findIntersection(arr, [toDecimal(bases[i], nums[i])])\n        arr.sort()\n        if len(arr) == 0:\n            print(-1)\n        elif arr[0] <= 10 ** 12:\n            print(arr[0])\n        else:\n            print(-1)\n    else:\n        arr = []\n        if bases[0] == -1:\n            arr = toAllBases(nums[0])\n            if len(arr) == 0:\n                print(-1)\n            else:\n                print(arr[0])\n        else:\n            print(toDecimal(bases[0], nums[0]))", "def check1(aim, Num):\n    (Min, Max) = (2, 37)\n    while Min != Max:\n        Aveg = (Min + Max) // 2\n        try:\n            St = int(Num, base=Aveg)\n            if St == aim:\n                return Aveg\n            elif St < aim:\n                Min = Aveg + 1\n            else:\n                Max = Aveg\n        except:\n            Min = Aveg + 1\n    return False\n\ndef check(x):\n    X = set()\n    for i in range(36, 1, -1):\n        try:\n            t = int(x, base=i)\n            if t > 10 ** 12:\n                continue\n            X.add(t)\n        except:\n            break\n    return X\n\ndef solve1(known1, unknown1):\n    loc_known = known1\n    if len(loc_known) >= 2:\n        return -1\n    common = loc_known.pop()\n    if common > 10 ** 12:\n        return -1\n    for i in unknown1:\n        if not check1(common, i):\n            return -1\n    return common\n\ndef solve2(unknown1):\n    loc_unkn = set()\n    loc_unkn = check(unknown1.pop())\n    for i in unknown1:\n        loc_unkn &= check(i)\n    return min(loc_unkn) if loc_unkn else -1\nfor _ in range(int(input())):\n    N = int(input())\n    (known, unknown) = (set(), set())\n    for _ in range(N):\n        (Base, Number) = input().split()\n        if Base != '-1':\n            known.add(int(Number, base=int(Base)))\n        else:\n            unknown.add(Number)\n    ans = solve1(known, unknown) if known else solve2(unknown)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    ar = [[-1 for i in range(37)] for i in range(n)]\n    for i in range(n):\n        (b, y) = map(str, input().split())\n        b = int(b)\n        if b != -1:\n            ar[i][b] = int(y, b)\n        else:\n            for j in range(2, 37):\n                try:\n                    ar[i][j] = int(y, j)\n                except:\n                    z = 0\n    o = []\n    for i in range(2, 37):\n        y = ar[0][i]\n        cnt = 0\n        if y != -1 and y <= 1000000000000:\n            for j in range(1, n):\n                if y in ar[j]:\n                    cnt += 1\n                else:\n                    break\n        if cnt == n - 1:\n            o.append(ar[0][i])\n    if len(o) > 0:\n        print(min(o))\n    else:\n        print('-1')", "def ToInteger(a):\n    if a >= '0' and a <= '9':\n        return ord(a) - 48\n    elif a >= 'A' and a <= 'Z':\n        return ord(a) - 55\n\ndef ToDecimal(a, b):\n    base = 1\n    val = 0\n    for i in range(len(a) - 1, -1, -1):\n        val = val + ToInteger(a[i]) * base\n        base = base * b\n    return val\nt = int(input())\nfor test in range(t):\n    B = []\n    Y = []\n    n = int(input())\n    for i in range(n):\n        l = input().split()\n        B.append(int(l[0]))\n        Y.append(l[1])\n    valid_base = {}\n    for i in range(n):\n        if B[i] == -1:\n            for j in Y[i]:\n                m = ToInteger(j)\n                Base = 1\n                if Base < m:\n                    Base = m\n            valid_base[i] = Base + 1\n        else:\n            valid_base[i] = B[i]\n    X = []\n    for i in range(n):\n        if B[i] == -1:\n            z = []\n            for j in range(valid_base[i], 37):\n                z.append(ToDecimal(Y[i], j))\n            X.append(z)\n        else:\n            X.append([ToDecimal(Y[i], B[i])])\n    for i in range(0, len(X[0])):\n        flag = 1\n        p = X[0][i]\n        Z = p\n        for j in range(1, len(X)):\n            if p in X[j]:\n                Z = X[0][i]\n            else:\n                flag = 0\n                break\n        if flag == 1:\n            break\n    if flag == 0:\n        print(-1)\n    elif Z > 1000000000000:\n        print(-1)\n    else:\n        print(Z)", "for _ in range(int(input())):\n    n = int(input())\n    ar = [[-1 for i in range(37)] for i in range(n)]\n    for i in range(n):\n        (b, y) = map(str, input().split())\n        b = int(b)\n        if b != -1:\n            ar[i][b] = int(y, b)\n        else:\n            for j in range(2, 37):\n                try:\n                    ar[i][j] = int(y, j)\n                except:\n                    z = 0\n    o = []\n    for i in range(2, 37):\n        y = ar[0][i]\n        cnt = 0\n        if y != -1 and y <= 1000000000000:\n            for j in range(1, n):\n                if y in ar[j]:\n                    cnt += 1\n                else:\n                    break\n        if cnt == n - 1:\n            o.append(ar[0][i])\n    if len(o) > 0:\n        print(min(o))\n    else:\n        print('-1')", "def val(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef convert(s, base):\n    l = len(s)\n    power = 1\n    num = 0\n    i = l - 1\n    while i >= 0:\n        if val(s[i]) >= base:\n            return -1\n        num = num + val(s[i]) * power\n        if num > 1000000000000:\n            return -1\n        power = power * base\n        i = i - 1\n    return num\nt = int(input())\nfor it in range(t):\n    m = {}\n    l = {}\n    n = int(input())\n    b = [0] * n\n    s = [0] * n\n    i = 0\n    while i < n:\n        (b[i], s[i]) = input().split()\n        b[i] = int(b[i])\n        i = i + 1\n    i = 0\n    f = 0\n    while i < n:\n        if b[i] == -1:\n            f = f + 1\n        i = i + 1\n    if f == n:\n        i = 0\n        while i < n:\n            j = 2\n            while j <= 36:\n                x = convert(s[i], j)\n                if x != -1 and x in l.keys():\n                    j = j + 1\n                    continue\n                if x != -1:\n                    if x in m.keys():\n                        m[x] = m[x] + 1\n                    else:\n                        m[x] = 1\n                    l[x] = 1\n                j = j + 1\n            l = {}\n            i = i + 1\n        flag = 0\n        for iz in sorted(m):\n            if m[iz] == n:\n                flag = flag + 1\n                ans = iz\n                break\n        if flag == 1:\n            print(ans)\n        else:\n            print(-1)\n    else:\n        i = 0\n        while i < n:\n            if b[i] != -1:\n                x2 = convert(s[i], b[i])\n                break\n            i = i + 1\n        i = 0\n        zz = 0\n        while i < n:\n            if b[i] != -1:\n                x3 = convert(s[i], b[i])\n                if x3 != x2 or x2 == -1 or x3 == -1:\n                    zz = 1\n                    break\n            i = i + 1\n        if zz == 1:\n            print(-1)\n        else:\n            i = 0\n            g = 0\n            while i < n:\n                if b[i] == -1:\n                    y = 0\n                    j = 2\n                    while j <= 36:\n                        x3 = convert(s[i], j)\n                        if x3 == x2 and x3 != -1 and (x2 != -1):\n                            y = 1\n                            break\n                        j = j + 1\n                    if y == 0:\n                        g = 1\n                        break\n                i = i + 1\n            if g == 1:\n                print(-1)\n            else:\n                print(x2)", "import math\n\ndef count(s, c):\n    res = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            res = res + 1\n    return res\nfor _ in range(int(input())):\n    arr = []\n    arr2 = []\n    m = 0\n    di = {}\n    (v1, v2) = (0, 0)\n    n = int(input())\n    for itr in range(n):\n        arr = []\n        arr2 = []\n        (b, st) = map(str, input().split())\n        b = int(b)\n        c = '0'\n        res = count(st, c)\n        v1 = v1 + res\n        v2 = v2 + len(st)\n        a = ord(st[0])\n        m = 0\n        for i in range(len(st)):\n            if a < ord(st[i]):\n                a = ord(st[i])\n        if a >= 65:\n            a = a - 55\n        else:\n            a = a - 48\n        a = a + 1\n        limit = 36\n        if b != -1:\n            a = b\n            limit = b\n        if len(st) == 1:\n            a = 0\n            limit = 0\n        for i in range(a, limit + 1):\n            s = 0\n            power = 0\n            flag = 0\n            for j in range(len(st), 0, -1):\n                ch = ord(st[j - 1])\n                if ch >= 65:\n                    ch = ch - 55\n                else:\n                    ch = ch - 48\n                s = s + ch * math.pow(i, power)\n                power = power + 1\n                if s > 1000000000000:\n                    flag = 1\n                    break\n            if flag == 0:\n                arr.append(s)\n        for i in range(len(arr)):\n            if arr[i] in di.keys():\n                di[arr[i]] = di[arr[i]] + 1\n            else:\n                di[arr[i]] = 1\n        pos = 0\n        for item in di.items():\n            if item[1] == n:\n                arr2.append(item[0])\n                pos = pos + 1\n    if pos != 0:\n        arr2.sort()\n        print(int(arr2[0]))\n    elif v1 == v2:\n        print(0)\n    else:\n        print(-1)", "from collections import Counter\n\ndef val(c):\n    if c >= '0' and c <= '9':\n        return ord(c) - ord('0')\n    else:\n        return ord(c) - ord('A') + 10\n\ndef get_mini_base(s):\n    d1 = Counter(s)\n    curr = -1\n    for key in d1:\n        if val(key) > curr:\n            curr = val(key)\n    return curr + 1\n\ndef toDeci(str, base):\n    llen = len(str)\n    power = 1\n    num = 0\n    for i in range(llen - 1, -1, -1):\n        if val(str[i]) >= base:\n            return -1\n        num += val(str[i]) * power\n        power = power * base\n    return num\nT = int(input())\nwhile T > 0:\n    N = int(input())\n    bases = []\n    numbers = []\n    ans_found = False\n    final_ans = 0\n    sure_shot_ans = 0\n    for i in range(0, N):\n        arr = [j for j in input().split()]\n        B = int(arr[0])\n        Y = str(arr[1])\n        bases.append(B)\n        numbers.append(Y)\n    curr_possible = []\n    for i in range(0, N):\n        if bases[i] != -1:\n            dec_num = toDeci(numbers[i], bases[i])\n            if dec_num == -1:\n                final_ans = -1\n                break\n            else:\n                curr_possible.append(dec_num)\n    d = Counter(curr_possible)\n    if len(d) != 0:\n        if final_ans != -1:\n            if len(d) != 1:\n                final_ans = -1\n            else:\n                final_ans = curr_possible[0]\n                for i in range(0, N):\n                    if bases[i] == -1:\n                        for j in range(get_mini_base(numbers[i]), 37):\n                            gfh = toDeci(numbers[i], j)\n                            if gfh != -1 and gfh in curr_possible:\n                                final_ans = gfh\n                                break\n                            else:\n                                final_ans = -1\n                        if final_ans == -1:\n                            break\n        if final_ans > 10 ** 12:\n            final_ans = -1\n        print(final_ans)\n    else:\n        curr_pos = []\n        b = get_mini_base(numbers[0])\n        for i in range(b, 37):\n            dec = toDeci(numbers[0], i)\n            if dec != -1:\n                curr_pos.append(dec)\n        d1 = Counter(curr_pos)\n        for i in range(1, N):\n            temp = []\n            b = get_mini_base(numbers[i])\n            for j in range(b, 37):\n                dec = toDeci(numbers[i], j)\n                if dec != -1:\n                    temp.append(dec)\n            d2 = Counter(temp)\n            d1 = d1 & d2\n        curr_min = 10 ** 12 + 1\n        for key in d1:\n            if d1[key] > 0 and key < curr_min:\n                curr_min = key\n        if curr_min > 10 ** 12:\n            curr_min = -1\n        print(curr_min)\n    T -= 1", "def bcon(n):\n    return int(n)\n\ndef dicon(n):\n    l = []\n    for j in n:\n        if j.isalpha():\n            l.append(ord(j) - ord('A') + 10)\n        else:\n            l.append(int(j))\n    return l\n\ndef con(base, d):\n    k = 0\n    p = 0\n    for i in reversed(d):\n        k += i * base ** p\n        p = p + 1\n    return k\n\ndef find(b, d):\n    l = []\n    if b != -1:\n        t = con(b, d)\n        return [t]\n    s = max(d) + 1\n    ls = 37\n    for j in range(s, ls):\n        t = con(j, d)\n        if t > 10 ** 12:\n            break\n        l.append(t)\n    return l\n\ndef intersect(x, y):\n    return x.intersection(set(y))\ntest = int(input())\nwhile test > 0:\n    test = test - 1\n    n = int(input())\n    val = []\n    for i in range(n):\n        (base, st) = input().split()\n        d = dicon(st)\n        b = bcon(base)\n        val.append(find(b, d))\n    l = set(val[0])\n    for i in range(1, n):\n        l = intersect(l, val[i])\n    l = list(l)\n    if len(l) > 0:\n        minm = min(l)\n        if minm > 10 ** 12:\n            print(-1)\n        else:\n            print(minm)\n    else:\n        print(-1)", "def bcon(n):\n    if n.isalpha():\n        return ord(n) - ord('A') + 10\n    return int(n)\n\ndef dicon(n):\n    l = []\n    for j in n:\n        if j.isalpha():\n            l.append(ord(j) - ord('A') + 10)\n        else:\n            l.append(int(j))\n    return l\n\ndef con(base, d):\n    k = 0\n    p = 0\n    for i in reversed(d):\n        k += i * base ** p\n        p = p + 1\n    return k\n\ndef find(b, d):\n    l = []\n    if b != -1:\n        t = con(b, d)\n        return [t]\n    s = max(d) + 1\n    ls = 37\n    for j in range(s, ls):\n        t = con(j, d)\n        if t > 10 ** 12:\n            break\n        l.append(t)\n    return l\n\ndef intersect(x, y):\n    return x.intersection(set(y))\ntest = int(input())\nwhile test > 0:\n    test = test - 1\n    n = int(input())\n    val = []\n    for i in range(n):\n        (base, st) = input().split()\n        d = dicon(st)\n        b = bcon(base)\n        val.append(find(b, d))\n    l = set(val[0])\n    for i in range(1, n):\n        l = intersect(l, val[i])\n    l = list(l)\n    if len(l) > 0:\n        minm = min(l)\n        if minm > 10 ** 12:\n            print(-1)\n        else:\n            print(minm)\n    else:\n        print(-1)", "def is_int(s, b):\n    try:\n        int(s, b)\n        return True\n    except ValueError:\n        return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    inp = [input().split() for _ in range(n)]\n    bases = [int(i[0]) for i in inp]\n    nums = [i[1] for i in inp]\n    free = True\n    for i in range(n):\n        if bases[i] != -1:\n            free = int(nums[i], bases[i])\n            break\n    if free == True:\n        cool = True\n        for base in range(2, 37):\n            cool = True\n            if not is_int(nums[0], base):\n                continue\n            num = int(nums[0], base)\n            if num > 10 ** 12:\n                cool = False\n                break\n            for i in range(1, n):\n                can = False\n                for bas in range(2, 37):\n                    if is_int(nums[i], bas) and int(nums[i], bas) == num:\n                        can = True\n                        break\n                if not can:\n                    cool = False\n                    break\n            if cool:\n                print(num)\n                break\n        if not cool:\n            print(-1)\n    else:\n        cool = True\n        for i in range(n):\n            if bases[i] == -1:\n                can = False\n                for bas in range(2, 37):\n                    if is_int(nums[i], bas) and int(nums[i], bas) == free:\n                        can = True\n                        break\n                if not can:\n                    cool = False\n                    break\n            elif int(nums[i], bases[i]) != free:\n                cool = False\n                break\n        if cool and free <= 10 ** 12:\n            print(free)\n        else:\n            print(-1)", "def check(num, string):\n    rrr = max([dic[i] for i in string]) + 1\n    for i in range(rrr, 37):\n        anss = number(i, string)\n        if anss == -1:\n            return False\n        if anss == num:\n            return True\n    return False\n\ndef number(base, string):\n    l = len(string)\n    ans = 0\n    for i in range(l):\n        ans += dic[string[-(1 + i)]] * base ** i\n        if ans > 10 ** 12:\n            ans = -1\n            return ans\n    return ans\ndic = {'0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, 'A': 10, 'B': 11, 'C': 12, 'D': 13, 'E': 14, 'F': 15, 'G': 16, 'H': 17, 'I': 18, 'J': 19, 'K': 20, 'L': 21, 'M': 22, 'N': 23, 'O': 24, 'P': 25, 'Q': 26, 'R': 27, 'S': 28, 'T': 29, 'U': 30, 'V': 31, 'W': 32, 'X': 33, 'Y': 34, 'Z': 35}\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    temp = [[] for i in range(n)]\n    for i in range(n):\n        (b, y) = [i for i in input().split()]\n        temp[i].append(int(b))\n        temp[i].append(y)\n    ans = -1\n    if temp[0][0] == -1:\n        rrr = max([dic[i] for i in temp[0][1]]) + 1\n        ii = rrr\n        while ii < 37:\n            num = number(ii, temp[0][1])\n            if num == -1:\n                ans = -1\n                break\n            j = 1\n            while j < n:\n                if temp[j][0] == -1:\n                    tt = check(num, temp[j][1])\n                    if tt == False:\n                        break\n                    j += 1\n                else:\n                    tt = number(temp[j][0], temp[j][1])\n                    if num != tt:\n                        break\n                    j += 1\n            if j == n:\n                ans = num\n                break\n            ii += 1\n        if ii == 37:\n            ans = -1\n        print(ans)\n    else:\n        num = number(temp[0][0], temp[0][1])\n        j = 1\n        if num == -1:\n            ans = -1\n        while j < n:\n            if temp[j][0] == -1:\n                tt = check(num, temp[j][1])\n                if tt == False:\n                    break\n                j += 1\n            else:\n                tt = number(temp[j][0], temp[j][1])\n                if num != tt:\n                    break\n                j += 1\n        if j == n and num != -1:\n            ans = num\n        print(ans)", "def toAllBases(num):\n    bases = []\n    base = 2\n    while base < 37:\n        val = 0\n        for i in range(len(num)):\n            if num[i] in '0123456789':\n                x = int(num[i])\n            else:\n                x = ord(num[i]) - 55\n            if x >= base:\n                val = -1\n                break\n            val += x * base ** (len(num) - 1 - i)\n        base += 1\n        if val != -1:\n            bases.append(val)\n    return bases\n\ndef toDecimal(base, num):\n    val = 0\n    for i in range(len(num)):\n        if num[i] in '0123456789':\n            x = int(num[i])\n        else:\n            x = ord(num[i]) - 55\n        val += x * base ** (len(num) - 1 - i)\n    return val\n\ndef findIntersection(arr1, arr2):\n    arr = [value for value in arr1 if value in arr2]\n    arr = list(set(arr))\n    return arr\nfor T in range(int(input())):\n    bases = []\n    nums = []\n    for i in range(int(input())):\n        (base, num) = input().split()\n        bases.append(int(base))\n        nums.append(num)\n    n = len(bases)\n    if n != 1:\n        x = toAllBases(nums[0])\n        if bases[0] != -1:\n            x = [toDecimal(bases[0], nums[0])]\n        arr = x\n        for i in range(1, n):\n            if len(arr) == 0:\n                break\n            if bases[i] == -1:\n                arr = findIntersection(arr, toAllBases(nums[i]))\n            else:\n                arr = findIntersection(arr, [toDecimal(bases[i], nums[i])])\n        arr.sort()\n        if len(arr) == 0:\n            print(-1)\n        elif arr[0] <= 10 ** 12:\n            print(arr[0])\n        else:\n            print(-1)\n    else:\n        arr = []\n        if bases[0] == -1:\n            arr = toAllBases(nums[0])\n            if len(arr) == 0:\n                print(-1)\n            else:\n                print(arr[0])\n        else:\n            print(toDecimal(bases[0], nums[0]))", "from collections import defaultdict\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    num = n\n    c = 0\n    m = defaultdict(lambda : 0)\n    for i in range(n):\n        k = 0\n        max = 1\n        xs = input().split()\n        x = int(xs[0])\n        s = str(xs[1])\n        for OO in range(len(s)):\n            if ord(s[OO]) >= 48 and ord(s[OO]) <= 57:\n                k = ord(s[OO]) - 48\n            else:\n                k = ord(s[OO]) - 55\n            if k + 1 > max:\n                max = k + 1\n        if x != -1:\n            max = x\n        for j in range(max, 37):\n            ans = 0\n            r = 0\n            for _ in range(len(s) - 1, -1, -1):\n                if ord(s[_]) >= 48 and ord(s[_]) <= 57:\n                    k = ord(s[_]) - 48\n                else:\n                    k = ord(s[_]) - 55\n                z = pow(j, r)\n                if z > 10 ** 12:\n                    ans = -1\n                    break\n                ans = ans + z * k\n                r += 1\n                if ans > 10 ** 12:\n                    break\n            if ans <= 10 ** 12 and ans != -1 and (m[ans] == c):\n                m[ans] += 1\n        c += 1\n    q = -1\n    for (i, j) in m.items():\n        if j == num:\n            q = i\n            break\n    print(q)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [0] * n\n    b = [0] * n\n    for i in range(n):\n        (a[i], b[i]) = map(str, input().split())\n        a[i] = int(a[i])\n    a1 = set()\n    a2 = set()\n    for i in range(n):\n        a2.clear()\n        if a[i] != -1:\n            y = int(b[i], base=a[i])\n            if i == 0:\n                a2.add(y)\n            elif y in a1:\n                a2.add(y)\n        else:\n            for k in range(2, 37):\n                try:\n                    y = int(b[i], base=k)\n                    if i == 0:\n                        a2.add(y)\n                    elif y in a1:\n                        a2.add(y)\n                except ValueError:\n                    pass\n        a1 = a2.copy()\n    if len(a1) == 0:\n        print(-1)\n    else:\n        x = min(a1)\n        if x >= 0 and x <= 1000000000000:\n            print(x)\n        else:\n            print(-1)"]