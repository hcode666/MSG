["(n, m) = map(int, input().strip().split())\nA = [int(x) for x in input().strip().split()]\npointer = 0\nfor i in range(m):\n    query = input().split()\n    (direction, d) = (query[0], int(query[1]))\n    if direction == 'R':\n        d = (d - 1 + pointer) % n\n        print(A[d])\n    elif direction == 'C':\n        pointer = (d + pointer) % n\n    else:\n        pointer = (pointer - d) % n", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nref = 0\nfor i in range(m):\n    (q, d) = input().split()\n    if q == 'A':\n        ref -= int(d)\n    elif q == 'C':\n        ref += int(d)\n    else:\n        print(l[(ref + int(d) - 1) % n])", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nref = 0\nfor i in range(m):\n    (q, d) = input().split()\n    if q == 'A':\n        ref -= int(d)\n    elif q == 'C':\n        ref += int(d)\n    else:\n        print(l[(ref + int(d) - 1) % n])", "(n, m) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\ns = 0\nfor m in range(m):\n    (dire, val) = input().split()\n    val = int(val)\n    if dire == 'C':\n        s += val\n    elif dire == 'A':\n        s -= val\n    else:\n        print(arr[(s + val - 1) % n])", "(N, M) = map(int, input().split())\nA = list(map(int, input().split()))\nx = 0\nfor i in range(M):\n    (s, n) = input().split()\n    n = int(n)\n    if s[0] == 'C':\n        x += n\n    elif s[0] == 'A':\n        x -= n\n    elif s[0] == 'R':\n        print(A[(n - 1 + x) % N])", "(n, s) = map(int, input().split())\nlist1 = list(map(int, input().split()))\nm = 0\nfor x in range(s):\n    (l, d) = map(str, input().split())\n    d = int(d)\n    if l == 'R':\n        print(list1[((d + m - 1) % n + n) % n])\n    elif l == 'C':\n        m += d\n    elif l == 'A':\n        m -= d", "(n, s) = map(int, input().split())\nlist1 = list(map(int, input().split()))\nm = 0\nfor x in range(s):\n    (l, d) = map(str, input().split())\n    d = int(d)\n    if l == 'R':\n        print(list1[((d + m - 1) % n + n) % n])\n    elif l == 'C':\n        m += d\n    elif l == 'A':\n        m -= d", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nd = 0\nfor _ in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + d) % n])\n    elif b == 'C':\n        d += c\n    elif b == 'A':\n        d -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nd = 0\nfor _ in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + d) % n])\n    elif b == 'C':\n        d += c\n    elif b == 'A':\n        d -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nd = 0\nfor _ in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + d) % n])\n    elif b == 'C':\n        d += c\n    elif b == 'A':\n        d -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nd = 0\nfor _ in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + d) % n])\n    elif b == 'C':\n        d += c\n    elif b == 'A':\n        d -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nd = 0\nfor _ in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + d) % n])\n    elif b == 'C':\n        d += c\n    elif b == 'A':\n        d -= c", "(n, m) = map(int, input().split())\na = [int(j) for j in input().split()]\nstrt = 0\nfor i in range(m):\n    s = input().split()\n    d = int(s[1])\n    if s[0] == 'C':\n        strt += d\n    elif s[0] == 'A':\n        strt -= d\n    else:\n        print(a[(strt + d - 1) % n])", "(n, m) = map(int, input().split())\na = [int(j) for j in input().split()]\nstrt = 0\nfor i in range(m):\n    s = input().split()\n    d = int(s[1])\n    if s[0] == 'C':\n        strt += d\n    elif s[0] == 'A':\n        strt -= d\n    else:\n        print(a[(strt + d - 1) % n])", "(N, M) = map(int, input().split(' '))\narr = list(map(int, input().split(' ')))\nquery = []\nfor _ in range(M):\n    query.append(list(input().split()))\npointer = 0\nfor each in query:\n    if each[0] == 'C':\n        pointer += int(each[1])\n    elif each[0] == 'A':\n        pointer -= int(each[1])\n    else:\n        print(arr[(pointer + int(each[1]) - 1) % N])", "(N, M) = map(int, input().split(' '))\narr = list(map(int, input().split(' ')))\nquery = []\nfor _ in range(M):\n    query.append(list(input().split()))\npointer = 0\nfor each in query:\n    if each[0] == 'C':\n        pointer += int(each[1])\n    elif each[0] == 'A':\n        pointer -= int(each[1])\n    else:\n        print(arr[(pointer + int(each[1]) - 1) % N])", "(N, M) = map(int, input().split(' '))\narr = list(map(int, input().split(' ')))\nquery = []\nfor _ in range(M):\n    query.append(list(input().split()))\npointer = 0\nfor each in query:\n    if each[0] == 'C':\n        pointer += int(each[1])\n    elif each[0] == 'A':\n        pointer -= int(each[1])\n    else:\n        print(arr[(pointer + int(each[1]) - 1) % N])", "(n, m) = map(int, input().split())\narr = input().split()\nch = 0\nfor _ in range(m):\n    (c, d) = input().split()\n    d = int(d)\n    if c == 'R':\n        print(arr[d - ch - 1])\n    else:\n        if c == 'C':\n            d *= -1\n        ch += d\n        ch %= n", "from collections import deque\n(l, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor j in range(m):\n    (s, n) = input().split()\n    if s == 'C':\n        a.rotate(-int(n))\n    elif s[0] == 'A':\n        a.rotate(int(n))\n    else:\n        print(a[int(n) - 1])", "(n, m) = map(int, input().split())\na = input().split()\nchange = 0\nfor _ in range(m):\n    (Type, Times) = input().split()\n    Times = int(Times)\n    if Type == 'R':\n        print(a[Times - change - 1])\n    else:\n        if Type == 'C':\n            Times *= -1\n        change += Times\n        change %= n", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nchanges = 0\nfor i in range(m):\n    (q, v) = input().split()\n    v = int(v)\n    if q == 'C':\n        changes -= v\n        changes %= n\n    elif q == 'A':\n        changes += v\n        changes %= n\n    else:\n        print(arr[v - changes % n - 1])", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nchanges = 0\nfor i in range(m):\n    (q, v) = input().split()\n    v = int(v)\n    if q == 'C':\n        changes -= v\n    elif q == 'A':\n        changes += v\n    else:\n        print(arr[v - changes % n - 1])", "from collections import deque\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor x in range(m):\n    (instruction, d) = map(str, input().split())\n    d = int(d)\n    if instruction == 'C':\n        a.rotate(-d)\n    elif instruction == 'A':\n        a.rotate(d)\n    elif instruction == 'R':\n        print(a[d - 1])", "from collections import deque\n(n, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor _ in range(m):\n    (instruction, d) = map(str, input().split())\n    d = int(d)\n    if instruction == 'C':\n        a.rotate(-d)\n    elif instruction == 'A':\n        a.rotate(d)\n    elif instruction == 'R':\n        print(a[d - 1])", "from collections import deque\n(n, m) = [int(d) for d in input().split()]\na = [int(d) for d in input().split()]\na = deque(a)\nfor i in range(m):\n    (c, d) = [d for d in input().split()]\n    c = c\n    d = int(d)\n    if c == 'R':\n        print(a[d - 1])\n    elif c == 'C':\n        a.rotate(-d)\n    else:\n        a.rotate(d)", "(N, M) = [int(s) for s in input().split()]\nA = [int(s) for s in input().split()]\noffset = -1\nfor _ in range(M):\n    I = input()\n    if I[0] == 'C':\n        offset += int(I[2:])\n    elif I[0] == 'A':\n        offset -= int(I[2:])\n    else:\n        print(A[(int(I[2:]) + offset) % N])", "(T, Q) = input().split()\nT = int(T)\nQ = int(Q)\naa = input().split()\nrot = 0\nfor i in range(0, Q):\n    (a, b) = input().split()\n    b = int(b)\n    if a == 'C':\n        rot += b\n    elif a == 'A':\n        rot += T - b\n    else:\n        print(aa[(b + rot - 1) % T])", "from collections import deque\n(l, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor j in range(m):\n    (s, n) = input().split()\n    if s == 'C':\n        a.rotate(-int(n))\n    elif s[0] == 'A':\n        a.rotate(int(n))\n    else:\n        print(a[int(n) - 1])", "from collections import deque\n(N, M) = map(int, input().split())\nAi = list(map(int, input().split()))[:N]\nAi = deque(Ai)\nfor i in range(M):\n    (query, d) = input().split()\n    d = int(d)\n    if query == 'C':\n        Ai.rotate(-d)\n    elif query == 'A':\n        Ai.rotate(d)\n    else:\n        print(Ai[d - 1])", "from collections import deque\n(l, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor j in range(m):\n    (s, n) = input().split()\n    if s == 'C':\n        a.rotate(-int(n))\n    elif s[0] == 'A':\n        a.rotate(int(n))\n    else:\n        print(a[int(n) - 1])", "(n, m) = map(int, input().split())\narray = list(map(int, input().split()))\nsign = 0\nfor i in range(m):\n    (query, angka) = input().split()\n    if query == 'A':\n        sign = (sign + int(angka)) % len(array)\n    elif query == 'C':\n        sign = (sign - int(angka)) % len(array)\n    elif query == 'R':\n        n = len(array)\n        indexQuery = (n - sign - 1 + int(angka)) % n\n        print(array[indexQuery])", "(n, m) = map(int, input().split())\narray = list(map(int, input().split()))\nsign = 0\nfor i in range(m):\n    (query, angka) = input().split()\n    if query == 'A':\n        sign = (sign + int(angka)) % len(array)\n    elif query == 'C':\n        sign = (sign - int(angka)) % len(array)\n    elif query == 'R':\n        n = len(array)\n        indexQuery = (n - sign - 1 + int(angka)) % n\n        print(array[indexQuery])", "(n, m) = map(int, input().split())\narray = list(map(int, input().split()))\nsign = 0\nfor i in range(m):\n    (query, angka) = input().split()\n    if query == 'A':\n        sign = (sign + int(angka)) % len(array)\n    elif query == 'C':\n        sign = (sign - int(angka)) % len(array)\n    elif query == 'R':\n        n = len(array)\n        indexQuery = (n - sign - 1 + int(angka)) % n\n        print(array[indexQuery])", "from collections import deque\n(l, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor j in range(m):\n    (s, n) = input().split()\n    if s == 'C':\n        a.rotate(-int(n))\n    elif s[0] == 'A':\n        a.rotate(int(n))\n    else:\n        print(a[int(n) - 1])", "from collections import deque\n(l, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor j in range(m):\n    (s, n) = input().split()\n    if s == 'C':\n        a.rotate(-int(n))\n    elif s[0] == 'A':\n        a.rotate(int(n))\n    else:\n        print(a[int(n) - 1])", "from collections import deque\n(l, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor j in range(m):\n    (s, n) = input().split()\n    if s == 'C':\n        a.rotate(-int(n))\n    elif s[0] == 'A':\n        a.rotate(int(n))\n    else:\n        print(a[int(n) - 1])", "from collections import deque\n(l, m) = map(int, input().split())\na = list(map(int, input().split()))\na = deque(a)\nfor j in range(m):\n    (s, n) = input().split()\n    if s == 'C':\n        a.rotate(-int(n))\n    elif s[0] == 'A':\n        a.rotate(int(n))\n    else:\n        print(a[int(n) - 1])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nstart = 0\nfor i in range(m):\n    s = input().split()\n    d = int(s[1])\n    if s[0] == 'C':\n        start += d\n    elif s[0] == 'A':\n        start -= d\n    else:\n        print(a[(start + d - 1) % n])", "(n, m) = list(map(int, input().split()))\narr = list(map(int, input().split()))\nops = 0\nfor i in range(m):\n    inp = input()\n    (tp, shift) = [int(i) if i.isdigit() else i for i in inp.split()]\n    if n == 1 and tp == 'R':\n        print(arr[0])\n        continue\n    if tp == 'A':\n        shift = n - shift\n    if tp != 'R':\n        ops += shift\n    if tp == 'R':\n        print(arr[(shift - 1 + ops % n) % n])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nstart = 0\nfor i in range(m):\n    s = input().split()\n    d = int(s[1])\n    if s[0] == 'C':\n        start += d\n    elif s[0] == 'A':\n        start -= d\n    else:\n        print(a[(start + d - 1) % n])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nstart = 0\nfor i in range(m):\n    s = input().split()\n    d = int(s[1])\n    if s[0] == 'C':\n        start += d\n    elif s[0] == 'A':\n        start -= d\n    else:\n        print(a[(start + d - 1) % n])", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\npointer = 0\nfor i in range(m):\n    (a, b) = map(str, input().split())\n    if a == 'R':\n        print(l[(pointer + int(b) - 1) % n])\n    elif a == 'C':\n        pointer = (pointer + int(b) % n) % n\n    else:\n        pointer = (pointer - int(b) % n) % n", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\ni = 0\nfor _ in range(m):\n    (s, k) = input().split()\n    c = int(k)\n    if s == 'A':\n        i -= c\n    elif s == 'C':\n        i += c\n    else:\n        pos = (i + c) % n - 1\n        print(a[pos])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\ni = 0\nfor _ in range(m):\n    (s, k) = input().split()\n    c = int(k)\n    if s == 'A':\n        i -= c\n    elif s == 'C':\n        i += c\n    else:\n        pos = (i + c) % n - 1\n        print(a[pos])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\ni = 0\nfor _ in range(m):\n    (s, k) = input().split()\n    c = int(k)\n    if s == 'A':\n        i -= c\n    elif s == 'C':\n        i += c\n    else:\n        pos = (i + c) % n - 1\n        print(a[pos])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor i in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor _ in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor _ in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(n, m) = map(int, input().split())\narray = list(map(int, input().split()))\nsign = 0\nfor i in range(m):\n    (query, angka) = input().split()\n    if query == 'A':\n        sign = (sign + int(angka)) % len(array)\n    elif query == 'C':\n        sign = (sign - int(angka)) % len(array)\n    elif query == 'R':\n        n = len(array)\n        indexQuery = (n - sign - 1 + int(angka)) % n\n        print(array[indexQuery])", "(N, Q) = map(int, input().split())\nA = list(map(int, input().split()))\nrotate = 0\nfor i in range(Q):\n    (a, d) = input().split()\n    d = int(d)\n    if a == 'C':\n        rotate += d\n    elif a == 'A':\n        rotate -= d\n    else:\n        print(A[(d + rotate - 1) % N])", "from collections import deque\n(n, m) = map(int, input().split())\narr = [int(i) for i in input().split()]\narr = deque(arr)\nfor i in range(m):\n    (tipe, units) = map(str, input().split())\n    if tipe == 'C':\n        arr.rotate(-int(units))\n    elif tipe == 'A':\n        arr.rotate(int(units))\n    elif tipe == 'R':\n        print(arr[int(units) - 1])", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor _ in range(m):\n    (b, c) = map(str, input().split())\n    if b == 'R':\n        print(a[(int(c) + x - 1) % n])\n    elif b == 'A':\n        x -= int(c)\n    elif b == 'C':\n        x += int(c)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\nx = 0\nfor _ in range(m):\n    (b, c) = input().split()\n    c = int(c)\n    if b == 'R':\n        print(a[(c - 1 + x) % n])\n    elif b == 'C':\n        x += c\n    elif b == 'A':\n        x -= c", "(N, Q) = map(int, input().split())\nA = list(map(int, input().split()))\nrotate = 0\nfor _ in range(Q):\n    (Op, d) = input().split()\n    d = int(d)\n    if Op == 'C':\n        rotate += d\n    elif Op == 'A':\n        rotate -= d\n    else:\n        print(A[(d + rotate - 1) % N])", "from sys import stdin, stdout\n(n, m) = map(int, stdin.readline().split())\nl = list(map(int, stdin.readline().split()))\nc = 0\nfor i in range(m):\n    (a, b) = map(str, stdin.readline().split())\n    b = int(b)\n    if a == 'C':\n        c += b\n    elif a == 'A':\n        c -= b\n    else:\n        c1 = c + b\n        p = c1 % n\n        print(l[p - 1])", "(n, m) = list(map(int, input().split()))\nl = list(map(int, input().split()))\nc = 0\nfor i in range(m):\n    (a, b) = list(map(str, input().split()))\n    b = int(b)\n    if a == 'C':\n        c += b\n    elif a == 'A':\n        c -= b\n    else:\n        c1 = c + b\n        p = c1 % n\n        print(l[p - 1])", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\n(x, y) = (0, 0)\nfor i in range(m):\n    s = input().split()\n    r = int(s[1])\n    if s[0] == 'C':\n        x = x + r\n    elif s[0] == 'A':\n        x -= r\n    else:\n        print(l[(x + r - 1) % n])", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\n(x, y) = (0, 0)\nfor i in range(m):\n    s = input().split()\n    r = int(s[1])\n    if s[0] == 'C':\n        x = x + r\n    elif s[0] == 'A':\n        x -= r\n    else:\n        print(l[(x + r - 1) % n])", "from sys import stdin, stdout\n(n, m) = map(int, stdin.readline().split())\nllist = list(map(int, stdin.readline().split()))\nc = 0\nfor _ in range(m):\n    (q, d) = map(str, stdin.readline().split())\n    d = int(d)\n    if q == 'C':\n        c += d\n    if q == 'A':\n        c -= d\n    if q == 'R':\n        print(llist[(d - 1 + c) % n])", "from sys import stdin, stdout\n(n, m) = map(int, stdin.readline().split())\nllist = list(map(int, stdin.readline().split()))\nstart = 0\nend = n - 1\nfor _ in range(m):\n    (q, d) = map(str, stdin.readline().split())\n    d = int(d)\n    if q == 'C':\n        start += d\n        start %= n\n        end = (start - 1) % n\n    if q == 'A':\n        start -= d\n        start %= n\n        end = (start - 1) % n\n    if q == 'R':\n        c = (start + d - 1) % n\n        print(llist[c])", "(n, m) = map(int, input().split())\nllist = list(map(int, input().split()))\nstart = 0\nend = n - 1\nfor _ in range(m):\n    (q, d) = map(str, input().split())\n    d = int(d)\n    if q == 'C':\n        start += d\n        start %= n\n        end = (start - 1) % n\n    if q == 'A':\n        start -= d\n        start %= n\n        end = (start - 1) % n\n    if q == 'R':\n        c = (start + d - 1) % n\n        print(llist[c])", "(x, y) = map(int, input().split())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(y):\n    (p, q) = input().split()\n    q = int(q)\n    if p == 'C':\n        count += q\n    elif p == 'A':\n        count -= q\n    else:\n        print(a[(q - 1 + count) % x])", "(x, y) = map(int, input().split())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(y):\n    (p, q) = input().split()\n    q = int(q)\n    if p == 'C':\n        count += q\n    elif p == 'A':\n        count -= q\n    else:\n        print(a[(q - 1 + count) % x])", "(x, y) = map(int, input().split())\na = list(map(int, input().split()))\ncount = 0\nfor i in range(y):\n    (p, q) = input().split()\n    q = int(q)\n    if p == 'C':\n        count += q\n    elif p == 'A':\n        count -= q\n    else:\n        print(a[(q - 1 + count) % x])", "from sys import stdin, stdout\n(n, m) = map(int, stdin.readline().split())\na = [0]\na.extend(list(map(int, stdin.readline().split())))\nb = {i: i + 1 for i in range(n - 1)}\nb[n - 1] = 0\nstart = 0\nend = n - 1\nwhile m:\n    m -= 1\n    (q, d) = map(str, stdin.readline().split())\n    d = int(d)\n    if q == 'C':\n        start += d\n        start %= n\n        end = (start - 1) % n\n    elif q == 'A':\n        start -= d\n        start %= n\n        end = (start - 1) % n\n    else:\n        c = (start + d - 1) % n\n        print(a[c + 1])", "import collections\n(n, m) = map(int, input().split())\narr = [int(i) for i in input().split()]\ne = collections.deque(arr)\nfor j in range(m):\n    (s, k) = map(str, input().split())\n    k = int(k)\n    result = []\n    if s == 'R':\n        print(e[k - 1])\n    elif s == 'C':\n        e.rotate(-k)\n    elif s == 'A':\n        e.rotate(k)", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\ncount = 0\nfor _ in range(m):\n    q = input().split()\n    c = int(q[1])\n    if q[0] == 'C':\n        count += c\n    elif q[0] == 'A':\n        count -= c\n    else:\n        print(a[(c - 1 + count) % n])", "(n, m) = map(int, input().split())\narr = list(map(int, input().split()))\nstart = 0\nend = n - 1\nfor i in range(m):\n    tmp = input().split()\n    if tmp[0] == 'R':\n        idx = (int(tmp[1]) - 1 + start) % n\n        print(arr[idx])\n    elif tmp[0] == 'C':\n        start = (start + int(tmp[1])) % n\n        end = (end + int(tmp[1])) % n\n    else:\n        start = (start - int(tmp[1])) % n\n        end = (end - int(tmp[1])) % n", "(n, q) = map(int, input().split())\narr = list(map(int, input().split()))\noffset = 0\nfor i in range(q):\n    query = input().split()\n    mag = int(query[1])\n    if query[0] == 'C':\n        offset -= mag\n        if offset < 0:\n            offset += n\n    elif query[0] == 'A':\n        offset += mag\n    else:\n        print(arr[(mag - offset - 1) % n])", "(N, M) = map(int, input().split())\ns = input()\nA = list(map(int, s.split()))\nlist_1 = []\nlist_2 = []\nfor i in range(M):\n    (a, b) = map(str, input().split(' '))\n    b = int(b)\n    list_1.append(a)\n    list_2.append(b)\nfrom collections import deque\ncount = 0\nA = deque(A)\nfor X in list_1:\n    if X == 'R':\n        print(A[list_2[count] - 1])\n    if X == 'A':\n        A.rotate(list_2[count])\n    if X == 'C':\n        A.rotate(-1 * list_2[count])\n    count += 1", "(n, m) = map(int, input().split())\na = input().split()\nc = 0\nfor i in range(m):\n    d = input().split()\n    if d[0] == 'R':\n        ind = (int(d[1]) - c) % n\n        print(a[ind - 1])\n    elif d[0] == 'C':\n        c = c + (n - int(d[1]))\n    elif d[0] == 'A':\n        c = c + int(d[1])", "from bisect import bisect_right as br\nfrom bisect import bisect_left as bl\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nimport random\nimport re\nMAX = sys.maxsize\nMAXN = 10 ** 5 + 10\nMOD = 10 ** 9 + 9\n\ndef isprime(n):\n    n = abs(int(n))\n    if n < 2:\n        return False\n    if n == 2:\n        return True\n    if not n & 1:\n        return False\n    for x in range(3, int(n ** 0.5) + 1, 2):\n        if n % x == 0:\n            return False\n    return True\n\ndef mhd(a, b, x, y):\n    return abs(a - x) + abs(b - y)\n\ndef numIN(x=' '):\n    return map(int, sys.stdin.readline().strip().split(x))\n\ndef charIN(x=' '):\n    return sys.stdin.readline().strip().split(x)\n\ndef dis(x, y):\n    a = y[0] - x[0]\n    b = x[1] - y[1]\n    return (a * a + b * b) ** 0.5\n\ndef lgcd(a):\n    g = a[0]\n    for i in range(1, len(a)):\n        g = math.gcd(g, a[i])\n    return g\n(n, m) = numIN()\na = list(numIN())\ncnt = 0\nfor _ in range(m):\n    (x, y) = charIN()\n    y = int(y)\n    if x == 'C':\n        cnt -= y\n    elif x == 'A':\n        cnt += y\n    else:\n        z = cnt % n\n        z = (y - 1 - z) % n\n        print(a[z])", "(n, m) = map(int, input().split())\nar = list(map(int, input().split()))\n(clock, anti) = (0, 0)\nfor _ in range(m):\n    s = input().split()\n    num = int(s[1])\n    if s[0] == 'R':\n        num -= 1\n        res = (anti - clock) % n\n        res = -res % n\n        print(ar[(res + num) % n])\n    elif s[0] == 'C':\n        clock = (clock + num) % n\n    else:\n        anti = (anti + num) % n", "(n, m) = map(int, input().split())\na = list(map(int, input().split()))\ncount = 0\nfor _ in range(m):\n    q = input().split()\n    c = int(q[1])\n    if q[0] == 'C':\n        count += c\n    elif q[0] == 'A':\n        count -= c\n    else:\n        print(a[(c - 1 + count) % n])", "def solution(L, net, d):\n    temp = net % len(L)\n    d += temp\n    if d % len(L) == 0:\n        return L[len(L) - 1]\n    return L[d % len(L) - 1]\n(N, M) = map(int, input().split())\nL = list(map(int, input().split()))\nnet = 0\nfor m in range(M):\n    (move, d) = map(str, input().split())\n    if move == 'C':\n        net += int(d)\n    if move == 'A':\n        net -= int(d)\n    elif move == 'R':\n        print(solution(L, net, int(d)))", "nm = input('')\nnm = nm.split()\nn = int(nm[0])\nm = int(nm[1])\na = input('')\na = a.split()\na = [int(c) for c in a]\nd = 0\nfor query in range(0, m):\n    q = input('')\n    q = q.split()\n    qType = q[0]\n    qArg = int(q[1])\n    if qType == 'A':\n        d -= qArg % len(a)\n    elif qType == 'C':\n        d += qArg % len(a)\n    else:\n        qArg -= 1\n        qArg += d\n        if qArg < 0:\n            qArg = abs(qArg) % len(a)\n            if qArg != 0:\n                qArg = -qArg\n        else:\n            qArg = abs(qArg) % len(a)\n        print(a[qArg])", "def mod(val, n):\n    if val >= 0:\n        return val\n    while val < 0:\n        val += n\n    return val\ntemp = list(map(int, input().split()))\nn = temp[0]\nm = temp[1]\na = list(map(int, input().split()))\nstart = 0\nend = n - 1\nfor t in range(m):\n    temp = list(input().split())\n    d = int(temp[1])\n    c = temp[0]\n    if c == 'C':\n        start = (start + d) % n\n        end = (end + d) % n\n    elif c == 'A':\n        start = mod(start - d, n)\n        end = mod(end - d, n)\n    else:\n        x = (start + d - 1) % n\n        print(a[x])", "(n, m) = map(int, input().strip().split(' '))\na = list(map(int, input().strip().split(' ')))\nf = 0\nfor _ in range(m):\n    (c, d) = input().strip().split(' ')\n    d = int(d)\n    if c == 'C':\n        f = (f + d) % n\n    elif c == 'A':\n        f = (f + (n - d)) % n\n    else:\n        print(a[(f + d - 1) % n])", "[n, q] = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\ns = 0\nfor _ in range(q):\n    b = input().split()\n    if b[0] == 'R':\n        print(a[(s + int(b[1]) - 1) % n])\n    elif b[0] == 'C':\n        s += int(b[1])\n    else:\n        s -= int(b[1])", "(n, m) = map(int, input().split())\noffset = 0\narr = list(map(int, input().split()))\nfor _ in range(m):\n    (q, p) = map(str, input().split())\n    p = int(p)\n    if q == 'C':\n        offset = (offset + p) % n\n    elif q == 'A':\n        offset = (offset - p) % n\n    else:\n        print(arr[(offset + p - 1) % n])", "(N, M) = map(int, input().split())\nA = list(map(int, input().split()))\nk = 0\nfor _ in range(M):\n    li = input().split()\n    (a, b) = (li[0], int(li[1]))\n    if a == 'C':\n        k += b\n    elif a == 'A':\n        k -= b\n    else:\n        print(A[((k + b - 1) % N + N) % N])", "(n, k) = map(int, input().strip().split())\na = list(map(int, input().strip().split()))\nhead = 0\nfor i in range(k):\n    (opp, pos) = input().strip().split()\n    if opp == 'R':\n        print(a[(head + int(pos) - 1) % n])\n    elif opp == 'C':\n        head = (int(pos) + head) % n\n    elif opp == 'A':\n        head = (head - int(pos) + n) % n", "import math\nimport sys\nimport string\n(n, m) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\ni = 0\nwhile m:\n    c = sys.stdin.read(1)\n    d = int(input())\n    if c == 'R':\n        print(arr[(d + i - 1) % n])\n    elif c == 'C':\n        i = (i + d) % n\n    else:\n        i = (i + n - d) % n\n    m -= 1", "(numberOfEleInArr, numberOfQueries) = map(int, input().split())\narray = input().split()\narrayLen = len(array)\nindex = 0\nfor qn in range(numberOfQueries):\n    inputArr = input().split()\n    command = inputArr[0]\n    number = int(inputArr[1])\n    if command == 'R':\n        number -= 1\n        if index == 0:\n            print(array[number])\n        else:\n            print(array[(index + number) % arrayLen])\n    elif command == 'C':\n        index = (index + number) % arrayLen\n    else:\n        index = (index - number + arrayLen) % arrayLen", "(n, m) = list(map(int, input().split()))\na = list(map(int, input().split()))\npos = 0\ni = 0\nfor i in range(m):\n    (ch, d) = list(input().split())\n    ch = str(ch)\n    d = int(d)\n    if ch == 'R':\n        print(a[(pos + d - 1) % n])\n    elif ch == 'A':\n        pos = pos - d + n\n        pos %= n\n    else:\n        pos += d\n        pos %= n", "(n, m) = list(map(int, input().split()))\narr = list(map(int, input().split()))\nindex = 0\nfor i in range(m):\n    (op, d) = list(input().split())\n    op = str(op)\n    d = int(d)\n    if op == 'R':\n        d -= 1\n        if index == 0:\n            print(arr[d])\n        else:\n            print(arr[(index + d) % n])\n    elif op == 'C':\n        index = (index + d) % n\n    elif op == 'A':\n        index = (index - d + n) % n", "a = input().split()\nn = int(a[0])\nm = int(a[1])\na = input().split()\na = [int(j) for j in a]\nshift = 0\nfor j in range(m):\n    q = input().split()\n    if q[0] == 'R':\n        print(a[(shift + int(q[1]) - 1) % n])\n    elif q[0] == 'C':\n        shift += int(q[1])\n    else:\n        shift += n - int(q[1])", "import sys\n\ndef main():\n    (N, M) = [int(x) for x in sys.stdin.readline().split()]\n    A = [int(x) for x in sys.stdin.readline().split()]\n    offset = 0\n    for _ in range(M):\n        (op, d) = [x for x in sys.stdin.readline().split()]\n        d = int(d)\n        if op == 'C':\n            offset = (offset + d) % N\n        elif op == 'A':\n            offset = (offset - d + N) % N\n        else:\n            print(A[(d - 1 + offset) % N])\nmain()"]