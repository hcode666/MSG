["import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor i in range(int(input())):\n    (N, A, K) = map(int, input().split())\n    num = 360 * (N - 2) - 2 * A * N\n    S = N * (N - 1)\n    num = A * S + (K - 1) * num\n    print(int(num / math.gcd(num, S)), int(S / math.gcd(num, S)))", "import math\nfor i in range(int(input())):\n    (N, A, K) = map(int, input().split())\n    num = 360 * (N - 2) - 2 * A * N\n    S = N * (N - 1)\n    num = A * S + (K - 1) * num\n    print(int(num / math.gcd(num, S)), int(S / math.gcd(num, S)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import sys\nfrom collections import Counter, defaultdict, deque\nfrom math import gcd, sqrt, ceil, log\n\ndef li():\n    return [int(i) for i in sys.stdin.readline().split()]\n\ndef si():\n    return sys.stdin.readline().split()\n\ndef ii():\n    return int(sys.stdin.readline())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    (n, a, k) = li()\n    x = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    y = n * (n - 1)\n    g = gcd(x, y)\n    x //= g\n    y //= g\n    print(x, y)", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    p = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    q = n * (n - 1)\n    g = gcd(p, q)\n    p //= g\n    q //= g\n    print(p, q)", "from sys import stdin, stdout\nimport math as m\ninput = stdin.readline\nt = int(input().strip())\nfor _ in range(t):\n    (n, a, k) = list(map(int, input().strip().split()))\n    s = 180 * (n - 2)\n    num = a * n * n - a * n + 2 * k * s - 2 * s - 2 * k * a * n + 2 * a * n\n    den = n * (n - 1)\n    gcd = m.gcd(num, den)\n    num = num // gcd\n    den = den // gcd\n    print(num, den)", "def gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, a, k) = map(int, input().split())\n    num = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    den = n * (n - 1)\n    g = gcd(num, den)\n    num = num // g\n    den = den // g\n    print(num, den)", "def gcd(a, b):\n    if b > a:\n        return gcd(a, b)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    (n, a, k) = map(int, input().split())\n    num = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    den = n * (n - 1)\n    g = gcd(num, den)\n    num = num // g\n    den = den // g\n    print(num, den)", "def gcd(a, b):\n    if b > a:\n        return gcd(b, a)\n    elif b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = a * n * (n - 1) + (k - 1) * (360 * (n - 2) - 2 * n * a)\n    den = n * (n - 1)\n    g = gcd(num, den)\n    print(num // g, den // g)", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\n\ndef gcd(a, b):\n    if a > b:\n        return gcd(b, a)\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    (n, a, k) = list(map(int, input().split()))\n    num = a * n * (n - 1) + (k - 1) * 2 * (180 * (n - 2) - a * n)\n    den = n * (n - 1)\n    g = gcd(num, den)\n    num //= g\n    den //= g\n    print(num, den)", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\n\ndef gcd(a, b):\n    if a > b:\n        return gcd(b, a)\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nfor _ in range(int(input())):\n    (n, a, k) = list(map(int, input().split()))\n    num = a * n * (n - 1) + (k - 1) * 2 * (180 * (n - 2) - a * n)\n    den = n * (n - 1)\n    g = gcd(num, den)\n    num //= g\n    den //= g\n    print(num, den)", "from math import gcd\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    s = 180 * (n - 2)\n    if n % 2 == 1:\n        c = n // 2\n    else:\n        c = n - 1\n    d = s - n * a\n    e = n * c\n    if n % 2 == 0:\n        d *= 2\n    d = a * e + (k - 1) * d\n    f = gcd(d, e)\n    print(d // f, e // f)", "from math import gcd\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    b = 180 * (n - 2)\n    if n % 2 == 1:\n        c = n // 2\n    else:\n        c = n - 1\n    d = b - n * a\n    e = n * c\n    if n % 2 == 0:\n        d *= 2\n    d = a * e + (k - 1) * d\n    f = gcd(d, e)\n    print(d // f, e // f)", "def gcd(P, b):\n    if b == 0:\n        return P\n    return gcd(b, P % b)\nt = int(input())\nfor i in range(t):\n    (n, P, k) = map(int, input().split())\n    s = (n - 2) * 180\n    ans = P + (k - 1) * (2 * s - 2 * P * n) // (n * (n - 1))\n    x = P * n * (n - 1) + (k - 1) * 2 * (s - P * n)\n    y = n * (n - 1)\n    z = gcd(x, y)\n    print(x // z, y // z)", "def gcd(x, y):\n    while y > 0:\n        (x, y) = (y, x % y)\n    return x\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    xd = (180 - a) * n - 360\n    d = int(n * (n - 1) / 2)\n    x = a * d + (k - 1) * xd\n    y = d\n    g = gcd(x, y)\n    print(x // g, y // g)", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num = 360 * (n - 2) - 2 * a * n\n    d = n * (n - 1)\n    num = a * d + (k - 1) * num\n    print(int(num / math.gcd(num, d)), int(d / math.gcd(num, d)))", "def gcd(num1, s):\n    if s == 0:\n        return num1\n    else:\n        return gcd(s, num1 % s)\nfor i in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    num1 = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(num1, s)\n    num1 = num1 // k\n    s = s // k\n    print(num1 + s * a, s)", "from math import *\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    c = n * n - n\n    c1 = 360 * (n - 2) - 2 * a * n\n    c2 = a * c + (k - 1) * c1\n    g = gcd(c2, c)\n    print(c2 // g, c // g)", "from math import *\nt = int(input())\nfor I in range(t):\n    (n, a, k) = map(int, input().split())\n    c = n * n - n\n    c1 = 360 * (n - 2) - 2 * a * n\n    c2 = a * c + (k - 1) * c1\n    g = gcd(c2, c)\n    print(c2 // g, c // g)", "from math import *\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    c = n * n - n\n    c1 = 360 * (n - 2) - 2 * a * n\n    c2 = a * c + (k - 1) * c1\n    g = gcd(c2, c)\n    print(c2 // g, c // g)", "from math import *\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    c = n * n - n\n    c1 = 360 * (n - 2) - 2 * a * n\n    c2 = a * c + (k - 1) * c1\n    g = gcd(c2, c)\n    print(c2 // g, c // g)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    s = (n - 2) * 180\n    ans = a + (k - 1) * (2 * s - 2 * a * n) // (n * (n - 1))\n    x = a * n * (n - 1) + (k - 1) * 2 * (s - a * n)\n    y = n * (n - 1)\n    z = gcd(x, y)\n    print(x // z, y // z)", "from math import *\nfor i in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    c = n * n - n\n    c1 = 360 * (n - 2) - 2 * a * n\n    c2 = a * c + (k - 1) * c1\n    g = gcd(c2, c)\n    print(c2 // g, c // g)", "import math\nT = int(input())\nfor i in range(T):\n    (n, a, k) = list(map(int, input().split()))\n    Sn = (n - 2) * 180\n    X = n * (n - 1) * a + 2 * (k - 1) * (Sn - a * n)\n    Y = n * (n - 1)\n    aa = math.gcd(X, Y)\n    X //= aa\n    Y //= aa\n    print(X, Y)", "def gcd(num1, s):\n    if s == 0:\n        return num1\n    else:\n        return gcd(s, num1 % s)\nfor i in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    num1 = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(num1, s)\n    num1 = num1 // k\n    s = s // k\n    print(num1 + s * a, s)", "def gcd(x, y):\n    if y == 0:\n        return x\n    else:\n        return gcd(y, x % y)\nfor i in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    x = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    y = n * (n - 1)\n    k = gcd(x, y)\n    x = x // k\n    y = y // k\n    print(x + y * a, y)", "def gcd(num1, s):\n    if s == 0:\n        return num1\n    else:\n        return gcd(s, num1 % s)\nfor i in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    num1 = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(num1, s)\n    num1 = num1 // k\n    s = s // k\n    print(num1 + s * a, s)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, a, k) = [int(x) for x in input().split()]\n    s = (n - 2) * 180\n    num = 180 * (n - 2) * 2 - 2 * a * n\n    num = a * n * (n - 1) + num * (k - 1)\n    den = n * (n - 1)\n    temp = math.gcd(num, den)\n    while temp > 1:\n        num = num // temp\n        den = den // temp\n        temp = math.gcd(num, den)\n    print(num, den)", "import math\nt = int(input())\nwhile t > 0:\n    t -= 1\n    (n, a, k) = list(map(int, input().split()))\n    Sn = (n - 2) * 180\n    X = n * (n - 1) * a + 2 * (k - 1) * (Sn - a * n)\n    Y = n * (n - 1)\n    aa = math.gcd(X, Y)\n    X //= aa\n    Y //= aa\n    print(X, Y)", "from fractions import Fraction\nfor _ in range(int(input())):\n    (n, a, k) = (int(i) for i in input().strip().split())\n    sum_of_all_angles = 180 * (n - 2)\n    common_diffrence_of_ap = 2 * (sum_of_all_angles - a * n) / (n * (n - 1))\n    k_term = a + (k - 1) * common_diffrence_of_ap\n    f = Fraction(k_term).limit_denominator()\n    print(f.numerator, f.denominator, sep=' ')", "import math\nT = int(input())\nfor _ in range(T):\n    (N, A, K) = map(int, input().split(' '))\n    total = (N - 2) * 180\n    diffT = total - N * A\n    diffN = sum(range(1, N))\n    r = A * diffN + (K - 1) * diffT\n    d = math.gcd(r, diffN)\n    while d > 1:\n        r //= d\n        diffN //= d\n        d = math.gcd(r, diffN)\n    print(r, diffN)", "import math\nT = int(input())\nfor _ in range(T):\n    (N, A, K) = map(int, input().split(' '))\n    total = (N - 2) * 180\n    diffT = total - N * A\n    diffN = sum(range(1, N))\n    r = A * diffN + (K - 1) * diffT\n    d = math.gcd(r, diffN)\n    while d > 1:\n        r //= d\n        diffN //= d\n        d = math.gcd(r, diffN)\n    print(r, diffN)", "import math\nT = int(input())\nfor _ in range(T):\n    (N, A, K) = map(int, input().split(' '))\n    total = (N - 2) * 180\n    diffT = total - N * A\n    diffN = sum(range(1, N))\n    r = A * diffN + (K - 1) * diffT\n    d = math.gcd(r, diffN)\n    while d > 1:\n        r //= d\n        diffN //= d\n        d = math.gcd(r, diffN)\n    print(r, diffN)", "def hcfnaive(a, b):\n    if b == 0:\n        return a\n    else:\n        return hcfnaive(b, a % b)\nfor i in range(int(input())):\n    (N, A, K) = map(int, input().split())\n    s = 180 * (N - 2)\n    d = hcfnaive(A * N * (N - 1) + (s - N * A) * 2 * (K - 1), N * (N - 1))\n    print((A * N * (N - 1) + (s - N * A) * 2 * (K - 1)) // d, N * (N - 1) // d)", "import math\nT = int(input())\nfor _ in range(T):\n    (N, A, K) = map(int, input().split(' '))\n    total = (N - 2) * 180\n    diffT = total - N * A\n    diffN = sum(range(1, N))\n    r = A * diffN + (K - 1) * diffT\n    d = math.gcd(r, diffN)\n    while d > 1:\n        r //= d\n        diffN //= d\n        d = math.gcd(r, diffN)\n    print(r, diffN)", "def gcd(num1, s):\n    if s == 0:\n        return num1\n    else:\n        return gcd(s, num1 % s)\nfor i in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    num1 = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(num1, s)\n    num1 = num1 // k\n    s = s // k\n    print(num1 + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    temp = input().split()\n    n = int(temp[0])\n    a = int(temp[1])\n    k = int(temp[2])\n    tempn = (n - 2) * 180\n    tempn = tempn * 2\n    tempd = n\n    tempn = tempn - 2 * a * tempd\n    tempd = tempd * (n - 1)\n    tempn = tempn * (k - 1) + a * tempd\n    g = gcd(tempn, tempd)\n    tempn /= g\n    tempd /= g\n    print(int(tempn), int(tempd))", "def gcd(A, B):\n    if B == 0:\n        return A\n    else:\n        return gcd(B, A % B)\nt = int(input())\nfor _ in range(t):\n    (n, a, k) = map(int, input().split())\n    num = a * (n * (n - 1)) + (k - 1) * (360 * (n - 2) - 2 * a * n)\n    den = n * (n - 1)\n    print(f'{num // gcd(num, den)} {den // gcd(num, den)}')", "def gcd(A, B):\n    if B == 0:\n        return A\n    else:\n        return gcd(B, A % B)\nt = int(input())\nfor _ in range(t):\n    (n, a, k) = map(int, input().split())\n    num = a * (n * (n - 1)) + (k - 1) * (360 * (n - 2) - 2 * a * n)\n    den = n * (n - 1)\n    print(f'{num // gcd(num, den)} {den // gcd(num, den)}')", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "def gcd(d, s):\n    if s == 0:\n        return d\n    else:\n        return gcd(s, d % s)\nfor _ in range(int(input())):\n    (n, a, k) = [int(x) for x in input().split()]\n    d = (360 * (n - 2) - 2 * a * n) * (k - 1)\n    s = n * (n - 1)\n    k = gcd(d, s)\n    d = d // k\n    s = s // k\n    print(d + s * a, s)", "from fractions import Fraction\nfor i in range(int(input())):\n    a = [int(x) for x in input().split()]\n    n = a[0]\n    A = a[1]\n    k = a[2]\n    q = A + (k - 1) / (n - 1) * (360 * (n - 2) / n - 2 * A)\n    x = 1\n    if q - int(q) < 1 and q - int(q) > 0:\n        o = Fraction(q).limit_denominator()\n        print(o.numerator, o.denominator)\n    else:\n        print(int(q), 1)", "import math\nt = int(input())\nwhile t != 0:\n    t -= 1\n    (n, a, k) = map(int, input().split())\n    g = n * (n - 1)\n    d = 360 * (n - 2) - 2 * a * n\n    f = a * g + (k - 1) * d\n    j = math.gcd(f, g)\n    b = f // j\n    e = g // j\n    print(b, e)", "from fractions import Fraction\nfor i in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    t = (n - 2) * 180\n    d = (2 * t / n - 2 * a) / (n - 1)\n    o = a + (k - 1) * d\n    f = Fraction(o).limit_denominator()\n    print(f.numerator, f.denominator)", "from fractions import Fraction\nfor i in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    t = (n - 2) * 180\n    d = (2 * t / n - 2 * a) / (n - 1)\n    o = a + (k - 1) * d\n    f = Fraction(o).limit_denominator()\n    print(f.numerator, f.denominator)", "import math\ncases = input()\ncases = int(cases)\nfor i in range(0, cases):\n    (n, a, k) = map(int, input().split(' '))\n    s = (n - 2) * 180\n    numerator = int((2 * s - 2 * a * n) * (k - 1) + a * n * (n - 1))\n    denominator = int(n * (n - 1))\n    gcd = math.gcd(numerator, denominator)\n    numerator = numerator / gcd\n    denominator = denominator / gcd\n    numerator = int(numerator)\n    denominator = int(denominator)\n    print(str(numerator) + ' ' + str(denominator))", "import math\ncases = input()\ncases = int(cases)\nfor i in range(0, cases):\n    (n, a, k) = map(int, input().split(' '))\n    s = (n - 2) * 180\n    numerator = int((2 * s - 2 * a * n) * (k - 1) + a * n * (n - 1))\n    denominator = int(n * (n - 1))\n    gcd = math.gcd(numerator, denominator)\n    numerator = numerator / gcd\n    denominator = denominator / gcd\n    numerator = int(numerator)\n    denominator = int(denominator)\n    print(str(numerator) + ' ' + str(denominator))", "import math\nfor _ in range(int(input())):\n    (n, a, k) = map(int, input().split())\n    g = n * (n - 1)\n    d = 360 * (n - 2) - 2 * a * n\n    f = a * g + (k - 1) * d\n    j = math.gcd(f, g)\n    b = f // j\n    e = g // j\n    print(b, e)", "import math\nt = int(input())\nwhile t != 0:\n    t -= 1\n    (n, a, k) = map(int, input().split())\n    g = n * (n - 1)\n    d = 360 * (n - 2) - 2 * a * n\n    f = a * g + (k - 1) * d\n    j = math.gcd(f, g)\n    b = f // j\n    e = g // j\n    print(b, e)", "import math\nt = int(input())\nwhile t != 0:\n    t -= 1\n    (n, a, k) = map(int, input().split())\n    g = n * (n - 1)\n    d = 360 * (n - 2) - 2 * a * n\n    f = a * g + (k - 1) * d\n    j = math.gcd(f, g)\n    b = f // j\n    e = g // j\n    print(b, e)", "def find_gcd(n, m):\n    max_num = max(n, m)\n    min_num = min(n, m)\n    modulo = max_num % min_num\n    if max_num == 1 or modulo == 0:\n        return min_num\n    return find_gcd(min_num, modulo)\ntests = int(input())\nfor _ in range(tests):\n    (n, first, k) = [int(j) for j in input().split()]\n    upper = n * (n - 1) * first + 2 * (k - 1) * (180 * (n - 2) - n * first)\n    down = n * (n - 1)\n    gcd = find_gcd(upper, down)\n    print(upper // gcd, end=' ')\n    print(down // gcd)", "import math\nfrom fractions import Fraction\ncase = int(input())\nans = []\nfor i in range(case):\n    result = ''\n    inp = input().split(' ')\n    n = int(inp[0])\n    a = int(inp[1])\n    k = int(inp[2])\n    y = (n - 1) * n\n    d = 360 * n - 2 * a * n - 720\n    x = a * y + (k - 1) * d\n    b = math.gcd(x, y)\n    x = str(x // b)\n    y = str(y // b)\n    result = x + ' ' + y\n    ans.append(result)\nprint(*ans, sep='\\n')", "import math\nt = int(input())\nwhile t > 0:\n    line = input()\n    inp = [int(i) for i in line.split()]\n    n = inp[0]\n    a = inp[1]\n    k = inp[2]\n    total = (n - 2) * 180\n    d_up = int(total - n * a)\n    d_down = int(n * (n - 1) / 2)\n    num = a * d_down + (k - 1) * d_up\n    den = d_down\n    gcd = math.gcd(num, den)\n    print(str(int((a * d_down + (k - 1) * d_up) / gcd)) + ' ' + str(int(d_down / gcd)))\n    t -= 1", "import math as m\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split())\n    z = n * n - n\n    d = 360 * (n - 2) - 2 * a * n\n    c = a * z + (k - 1) * d\n    g = m.gcd(c, z)\n    print(c // g, z // g)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (n, a, k) = map(int, input().split(' '))\n    add = 0\n    x = 0\n    y = 0\n    add = 180 * (n - 2)\n    x = a * (n * n) + a * n + 2 * add * k - 2 * a * n * k - 2 * add\n    y = n * (n - 1)\n    z = gcd(x, y)\n    x = int(x / z)\n    y = int(y / z)\n    print(x, y)"]