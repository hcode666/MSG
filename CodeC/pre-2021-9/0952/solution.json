["a = []\nfor i in range(7, 62600):\n    if i % 2 != 0 and i % 3 != 0 and (i % 5 != 0):\n        a.append(i)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n % 3 == 0:\n        m = []\n        for i in range((n - 3) // 3):\n            if i % 2 == 0:\n                x = 6 * a[i]\n                y = 10 * a[i + 1]\n                z = 15 * a[i]\n                m.append(x)\n                m.append(y)\n                m.append(z)\n            else:\n                x = 6 * a[i]\n                y = 10 * a[i - 1]\n                z = 15 * a[i]\n                m.append(x)\n                m.append(y)\n                m.append(z)\n        m = [6, 10, 15] + m\n        print(*m)\n    if n % 3 == 1:\n        m = []\n        for i in range((n - 4) // 3):\n            if i % 2 == 0:\n                x = 6 * a[i]\n                y = 10 * a[i + 1]\n                z = 15 * a[i]\n                m.append(x)\n                m.append(y)\n                m.append(z)\n            else:\n                x = 6 * a[i]\n                y = 10 * a[i - 1]\n                z = 15 * a[i]\n                m.append(x)\n                m.append(y)\n                m.append(z)\n        m = [6, 10, 15] + m\n        m = m[6:]\n        if n == 4:\n            print(374, 595, 1365, 858)\n        else:\n            m = [6, 10, 15, 21, 77, 110, 105] + m\n            print(*m)\n    if n % 3 == 2:\n        m = []\n        for i in range((n - 5) // 3):\n            if i % 2 == 0:\n                x = 6 * a[i]\n                y = 10 * a[i + 1]\n                z = 15 * a[i]\n                m.append(x)\n                m.append(y)\n                m.append(z)\n            else:\n                x = 6 * a[i]\n                y = 10 * a[i - 1]\n                z = 15 * a[i]\n                m.append(x)\n                m.append(y)\n                m.append(z)\n        m = [6, 10, 15] + m\n        m = m[6:]\n        if n == 5:\n            print(6, 15, 35, 77, 22)\n        else:\n            m = [6, 10, 15, 33, 77, 14, 110, 105] + m\n            print(*m)", "import sys\nimport math\n\ndef inputIntTuple():\n    return tuple([int(x) for x in sys.stdin.readline().strip().split()])\n\ndef inputIntList():\n    return [int(x) for x in sys.stdin.readline().strip().split()]\n\ndef getInt():\n    return int(sys.stdin.readline().strip())\n\ndef firstNonZero(list, start):\n    for i in range(start, len(list)):\n        if list[i]:\n            return (i, list[i])\n    return (None, None)\n\ndef collectPrimes(sieve, include2):\n    ps = []\n    if include2:\n        ps.append(2)\n    for p in sieve:\n        if p:\n            ps.append(p)\n    return ps\n\ndef sieve(start, end):\n    s = [0 if (x + start) % 2 == 0 or x + start == 1 else x + start for x in range(end - start + 1)]\n    inc = 3\n    maxInc = max((end - start) // 2, math.ceil(math.sqrt(end)))\n    while inc <= maxInc:\n        (idx, firstNonZeroValue) = firstNonZero(s, 0)\n        if not firstNonZeroValue:\n            break\n        startIdx = idx\n        if s[idx] % inc != 0:\n            startIdx = idx + inc - s[idx] % inc\n        if startIdx < len(s) and s[startIdx] // inc > 1:\n            s[startIdx] = 0\n        for next in range(startIdx + inc, len(s), inc):\n            s[next] = 0\n        inc += 2\n    return collectPrimes(s, start <= 2)\n\ndef testSet(S):\n    N = len(S)\n    uni = set()\n    uni.update(S)\n    if N != len(uni):\n        print('Have duplicates - %d' % (len(uni) - N))\n    for i in range(N):\n        a = S[i]\n        if a > 1000000000:\n            print('Too big')\n            return False\n        b = S[(i + 1) % N]\n        c = S[(i + 2) % N]\n        if gcd(a, b) == 1:\n            print('not divisible at idx:%d ( %d %d )' % (i, a, b))\n            return False\n        if gcd(b, c) == 1:\n            print('not divisible at idx:%d ( %d %d )' % (i, b, c))\n            return False\n        if not coprime(a, b, c):\n            print('idx: %d; %d %d %d' % (i, a, b, c))\n            print(gcd(a, c))\n            return False\n    return True\n\ndef bulkTest(ps):\n    for N in range(3000, 50000):\n        S = gen(N, ps)\n        if not testSet(S):\n            print('%d FAILED' % N)\n    print('done')\n\ndef genLE3333(N, ps):\n    seq = [1] * N\n    P = len(ps)\n    primeDistIdx = 251\n    dist = ps[primeDistIdx]\n    idx = 0\n    generated = 0\n    pidx = 0\n    lastInSeq = 0\n    while generated < N:\n        if generated % 3300 == 0:\n            primeDistIdx += 1\n            dist = ps[primeDistIdx]\n        pidx %= P\n        nextPrimeIdx = pidx + dist\n        if nextPrimeIdx >= P:\n            nextPrimeIdx %= P\n        if nextPrimeIdx == 0:\n            primeDistIdx += 1\n            nextPrimeIdx = ps[primeDistIdx]\n        next = ps[pidx] * ps[nextPrimeIdx]\n        seq[idx] = next\n        lastInSeq = seq[idx]\n        generated += 1\n        idx += 1\n        pidx += dist\n    seq[N - 1] *= 2\n    return seq\n\ndef genGT3333(N, ps):\n    seq = [1] * N\n    P = len(ps)\n    primeDistIdx = 251\n    dist = ps[primeDistIdx]\n    idx = 0\n    generated = 0\n    pidx = 0\n    lastInSeq = 0\n    while generated < N:\n        if generated % 2500 == 0:\n            primeDistIdx += 1\n            dist = ps[primeDistIdx]\n        pidx %= P\n        nextPrimeIdx = pidx + dist\n        if nextPrimeIdx >= P:\n            nextPrimeIdx %= P\n        next = ps[pidx] * ps[nextPrimeIdx]\n        seq[idx] = next\n        lastInSeq = seq[idx]\n        generated += 1\n        idx += 1\n        pidx += dist\n    seq[N - 1] *= 2\n    return seq\n\ndef concat(cops, N):\n    return ' '.join([str(x) for x in cops[:N]])\n\ndef format(S):\n    return ' '.join([str(x) for x in S])\n\ndef gcd(a, b):\n    assert a >= 0 and b >= 0 and (a + b > 0)\n    while a > 0 and b > 0:\n        if a >= b:\n            a %= b\n        else:\n            b %= a\n    return max(a, b)\n\ndef coprime(a, b, c):\n    return gcd(gcd(a, b), c) == 1\n\ndef main():\n    ps = sieve(1, 30940)\n    if len(ps) % 2 == 0:\n        ps.pop()\n    T = getInt()\n    while T > 0:\n        T -= 1\n        N = getInt()\n        if N == 3:\n            print('6 10 15')\n            continue\n        if N == 4:\n            print('374 595 1365 858')\n            continue\n        S = genGT3333(N, ps)\n        if N <= 3333:\n            S = genLE3333(N, ps)\n        print(format(S))\nmain()", "def primes(n):\n    a = []\n    prime = [1] * (n + 1)\n    imp = 0\n    imp = imp + 2\n    while imp ** 2 <= n:\n        if prime[imp] == 1:\n            for i in range(imp ** 2, n + 1, imp):\n                prime[i] = 0\n        imp += 1\n    imp = 2\n    while imp <= n - 1:\n        if prime[imp] == 1:\n            a.append(imp)\n        imp = imp + 1\n    return a\na = primes(650000)\nd = a[:]\ng = a\nc = [1]\na = c + a\nb = int(input())\nfor i in range(b):\n    c = int(input())\n    if c <= 3333:\n        if c == 3:\n            print(6, 10, 15)\n        elif c == 4:\n            print(374, 595, 1365, 858)\n        elif c >= 4:\n            print(g[0] * g[c - 1], end=' ')\n            for i in range(1, c):\n                print(g[i] * a[i], end=' ')\n            print()\n    else:\n        a = d[:]\n        a[0] = a[0] * 11\n        for i in range(1, c - 1):\n            if i % 3 == 1:\n                a[i] = a[i] * 6\n            elif i % 3 == 0:\n                a[i] = a[i] * 10\n            elif i % 3 == 2:\n                a[i] = a[i] * 15\n        a[c - 2] = a[c - 2] * 23\n        a[c - 1] = a[c - 1] * 253\n        for i in range(c):\n            print(a[i], end=' ')\n        print()", "prime_num = []\n\ndef Sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n):\n        if prime[p]:\n            prime_num.append(p)\nSieve(330000)\n__ = [[15, 6, 10], [595, 1365, 858, 374], [55, 77, 21, 6, 10], [10, 65, 143, 77, 21, 6]]\n___ = [[18, 45, 10, 14, 63, 99, 22], [18, 45, 35, 14, 22, 99, 117, 26], [18, 45, 35, 77, 22, 26, 117, 153, 34], [18, 45, 35, 77, 143, 26, 34, 153, 171, 38]]\nindex = [5, 6, 7, 8]\nm = [2, 3, 9, 2]\nfor _ in range(int(input())):\n    n = int(input())\n    if n < 7:\n        print(*__[n - 3])\n    elif n < 11:\n        print(*___[n - 7])\n    else:\n        numbers_remain_to_print = n - 7\n        reminder = numbers_remain_to_print % 4\n        prime_ptr = index[reminder]\n        print(*___[reminder], end=' ')\n        numbers_remain_to_print = n - len(___[reminder])\n        while numbers_remain_to_print > 0:\n            count_to = 2\n            for prime_number in m:\n                print(prime_number * prime_num[prime_ptr], end=' ')\n                numbers_remain_to_print -= 1\n                if numbers_remain_to_print == 0:\n                    break\n                count_to -= 1\n                if count_to == 0:\n                    prime_ptr += 1\n                    count_to = 2\n        print()"]