["(n, m) = list(map(int, input().split()))\na = input()\nl = [0 for i in range(10)]\nl[int(a[0])] += 1\nsums = [0] * n\nfor i in range(1, n):\n    s = 0\n    num = int(a[i])\n    for j in range(10):\n        s += l[j] * abs(num - j)\n    sums[i] = s\n    l[num] += 1\nfor _ in range(m):\n    x = int(input())\n    print(sums[x - 1])", "(n, m) = list(map(int, input().split()))\na = input()\nl = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nl[int(a[0])] += 1\nsums = [0] * n\nfor i in range(1, n):\n    s = 0\n    num = int(a[i])\n    for j in range(10):\n        s += l[j] * abs(num - j)\n    sums[i] = s\n    l[num] += 1\nfor _ in range(m):\n    x = int(input())\n    print(sums[x - 1])", "(n, m) = list(map(int, input().split()))\na = input()\nl = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nl[int(a[0])] += 1\nsums = [0] * n\nfor i in range(1, n):\n    s = 0\n    num = int(a[i])\n    for j in range(10):\n        s += l[j] * abs(num - j)\n    sums[i] = s\n    l[num] += 1\nfor _ in range(m):\n    x = int(input())\n    print(sums[x - 1])", "(n, m) = list(map(int, input().split()))\na = input()\nl = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\nl[int(a[0])] += 1\nsums = [0] * n\nfor i in range(1, n):\n    s = 0\n    num = int(a[i])\n    for j in range(10):\n        s += l[j] * abs(num - j)\n    sums[i] = s\n    l[num] += 1\nfor _ in range(m):\n    x = int(input())\n    print(sums[x - 1])", "(n, m) = map(int, input().split())\nd = list(map(int, list(input().strip())))\na = [0 for _ in range(10)]\nabig = []\nfor i in range(n):\n    a[d[i]] += 1\n    abig.append(a[:])\nfor _ in range(m):\n    x = int(input()) - 1\n    ans = 0\n    for i in range(10):\n        ans += abs(d[x] - i) * abig[x][i]\n    print(ans)", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    n = int(input())\n    print(ans[n - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "def soln(n, m, arr):\n    mem = [0] * n\n    freq = [0] * 10\n    for i in range(n):\n        freq[arr[i]] += 1\n        for j in range(10):\n            mem[i] += abs(arr[i] - j) * freq[j]\n    return mem\n(n, m) = map(int, input().split())\narr = input()\nmem = [0] * n\nfreq = [0] * 10\nfor i in range(n):\n    cur = int(arr[i])\n    freq[cur] += 1\n    for j in range(10):\n        mem[i] += abs(cur - j) * freq[j]\nfor i in range(m):\n    print(mem[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\na = input()\nans = [0] * n\nf = [0] * 10\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "from collections import Counter\ntemp = input().split()\nn = int(temp[0])\nm = int(temp[1])\na = input()\nans = [0] * n\nf = [0] * 10\nstep = 0\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "from collections import Counter\ntemp = input().split()\nn = int(temp[0])\nm = int(temp[1])\na = input()\nans = [0] * n\nf = [0] * 10\nstep = 0\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    (b1, b2) = (0, 0)\n    sum = 0\n    for y in range(10):\n        sum += abs(cur - y) * f[y]\n    ans[i] = sum\nfor j in range(m):\n    print(ans[int(input()) - 1])", "from collections import Counter\ntemp = input().split()\nn = int(temp[0])\nm = int(temp[1])\na = input()\nans = [0] * n\nf = [0] * 10\nstep = 0\nfor i in range(n):\n    cur = int(a[i])\n    f[cur] += 1\n    (b1, b2) = (0, 0)\n    for y in range(10):\n        val = cur - y\n        val *= f[y]\n        if y > cur:\n            b2 += val\n        else:\n            b1 += val\n    ans[i] = b1 - b2\nfor j in range(m):\n    print(ans[int(input()) - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, q) = map(int, input().split())\ns = input()\ndp = [0] * 10\nans = [0] * n\nfor i in range(n):\n    cur_ele = int(s[i])\n    dp[cur_ele] += 1\n    (b1, b2) = (int(), int())\n    for j in range(10):\n        val = cur_ele - j\n        val *= dp[j]\n        if val < 0:\n            b2 += val\n        else:\n            b1 += val\n    ans[i] = b1 - b2\nfor _ in range(q):\n    print(ans[int(input()) - 1])", "(n, q) = map(int, input().split())\ns = input()\ndp = [0] * 10\nans = [0] * n\nfor i in range(n):\n    cur_ele = int(s[i])\n    dp[cur_ele] += 1\n    (b1, b2) = (int(), int())\n    for j in range(10):\n        if j > cur_ele:\n            val = cur_ele - j\n            val *= dp[j]\n            b2 += val\n        else:\n            val = cur_ele - j\n            val *= dp[j]\n            b1 += val\n    ans[i] = b1 - b2\nfor _ in range(q):\n    print(ans[int(input()) - 1])", "(n, q) = map(int, input().split())\ns = input()\nans = [0] * n\ndp = [0] * 10\nfor i in range(n):\n    cur_ele = int(s[i])\n    dp[cur_ele] += 1\n    (b1, b2) = (0, 0)\n    for j in range(10):\n        if j > cur_ele:\n            val = cur_ele - j\n            val *= dp[j]\n            b2 += val\n        else:\n            val = cur_ele - j\n            val *= dp[j]\n            b1 += val\n    ans[i] = b1 - b2\nfor i in range(q):\n    x = int(input())\n    print(ans[x - 1])", "def func(a):\n    ans = 0\n    ele = int(lst[a])\n    for i in range(10):\n        ans += dp[a][i] * abs(ele - i)\n    print(ans)\n(n, m) = list(map(int, input().split()))\nlst = input()\ndp = [[0 for i in range(10)] for j in range(n)]\nfor i in range(1, n):\n    ele = int(lst[i - 1])\n    for j in range(10):\n        if ele == j:\n            dp[i][j] = dp[i - 1][j] + 1\n        else:\n            dp[i][j] = dp[i - 1][j]\nfor i in range(m):\n    a = int(input())\n    func(a - 1)", "def solve(a):\n    ans = 0\n    ele = int(lst[a])\n    for i in range(10):\n        ans += dp[a][i] * abs(ele - i)\n    print(ans)\nfor _ in range(1):\n    (n, m) = list(map(int, input().split()))\n    lst = input()\n    dp = [[0 for i in range(10)] for j in range(n)]\n    for i in range(1, n):\n        ele = int(lst[i - 1])\n        for j in range(10):\n            if ele == j:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n    for i in range(m):\n        a = int(input())\n        solve(a - 1)", "def solve(a):\n    ans = 0\n    ele = int(lst[a])\n    for i in range(10):\n        ans += dp[a][i] * abs(ele - i)\n    print(ans)\nfor _ in range(1):\n    (n, m) = list(map(int, input().split()))\n    lst = input()\n    dp = [[0 for i in range(10)] for j in range(n)]\n    for i in range(1, n):\n        ele = int(lst[i - 1])\n        for j in range(10):\n            if ele == j:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n    for i in range(m):\n        a = int(input())\n        solve(a - 1)", "(n, m) = map(int, input().split())\na = input()\nA = [[0 for j in range(n)] for i in range(10)]\nA[int(a[0])][0] = 1\nfor i in range(10):\n    for j in range(1, n):\n        A[i][j] = A[i][j - 1]\n        if int(a[j]) == i:\n            A[i][j] += 1\nfor _ in range(m):\n    x = int(input())\n    d = int(a[x - 1])\n    if x == 1:\n        print(0)\n        continue\n    B1 = 0\n    B2 = 0\n    for i in range(0, d):\n        B1 += A[i][x - 2] * (d - i)\n    for i in range(d + 1, 10):\n        B2 += A[i][x - 2] * (d - i)\n    print(B1 - B2)", "(n, m) = map(int, input().split())\ns = input()\nt = []\np = []\ntemp = [0] * 10\nfor i in range(n):\n    temp[int(s[i])] += 1\n    p = temp.copy()\n    t.append(p)\nfor i in range(m):\n    a = int(input()) - 1\n    b = int(s[a])\n    ans = 0\n    for k in range(10):\n        if t[a][k] > 0:\n            ans += abs(b - k) * t[a][k]\n    print(ans)", "(n, m) = map(int, input().split())\ns = input()\nt = []\np = []\ntemp = [0] * 10\nfor i in range(n):\n    temp[int(s[i])] += 1\n    p = temp.copy()\n    t.append(p)\nfor i in range(m):\n    a = int(input()) - 1\n    b = int(s[a])\n    ans = 0\n    for k in range(10):\n        if t[a][k] > 0:\n            ans += abs(b - k) * t[a][k]\n    print(ans)", "(n, m) = map(int, input().split())\ncnt = [0] * 10\nans = [0] * n\ns = map(int, input().strip())\nfor (index, i) in enumerate(s):\n    b1 = 0\n    b2 = 0\n    for j in range(10):\n        if j > i:\n            b2 += cnt[j] * (i - j)\n        elif i > j:\n            b1 += cnt[j] * (i - j)\n    cnt[i] += 1\n    ans[index] += b1 - b2\nfor _ in range(m):\n    print(ans[int(input()) - 1])", "def compute(val, dp, arr):\n    ans = 0\n    for i in range(10):\n        ans += abs(arr[val - 1] - i) * dp[val - 1][i]\n    print(ans)\n(n, m) = list(map(int, input().split()))\ns = input()\narr = []\nfor i in range(n):\n    arr.append(int(s[i]))\ndp = [[0 for i in range(10)] for i in range(n)]\nfor i in range(1, n):\n    val = int(arr[i - 1])\n    for k in range(10):\n        if k == val:\n            dp[i][k] = dp[i - 1][k] + 1\n        else:\n            dp[i][k] = dp[i - 1][k]\nfor i in range(m):\n    val = int(input())\n    compute(val, dp, arr)", "def compute(val, dp, arr):\n    ans = 0\n    for i in range(10):\n        ans += abs(arr[val - 1] - i) * dp[val - 1][i]\n    print(ans)\n(n, m) = list(map(int, input().split()))\ns = input()\narr = []\nfor i in range(n):\n    arr.append(int(s[i]))\ndp = [[0 for i in range(10)] for i in range(n)]\nfor i in range(1, n):\n    val = int(arr[i - 1])\n    for k in range(10):\n        if k == val:\n            dp[i][k] = dp[i - 1][k] + 1\n        else:\n            dp[i][k] = dp[i - 1][k]\nfor i in range(m):\n    val = int(input())\n    compute(val, dp, arr)", "def solve(a):\n    ans = 0\n    e = int(s[a])\n    for u in range(10):\n        ans += d[a][u] * abs(e - u)\n    print(ans)\n(n, m) = list(map(int, input().split()))\ns = input()\nd = [[0 for x in range(10)] for y in range(n)]\nfor j in range(1, n):\n    e = int(s[j - 1])\n    for k in range(10):\n        if e == k:\n            d[j][k] = d[j - 1][k] + 1\n        else:\n            d[j][k] = d[j - 1][k]\nfor z in range(m):\n    a = int(input())\n    solve(a - 1)", "def helper(a):\n    ans = 0\n    ele = int(lst[a])\n    for i in range(10):\n        ans += res[a][i] * abs(ele - i)\n    print(ans)\nfor _ in range(1):\n    (n, m) = list(map(int, input().split()))\n    lst = input()\n    res = [[0 for i in range(10)] for j in range(n)]\n    for i in range(1, n):\n        ele = int(lst[i - 1])\n        for j in range(10):\n            if ele == j:\n                res[i][j] = res[i - 1][j] + 1\n            else:\n                res[i][j] = res[i - 1][j]\n    for i in range(m):\n        a = int(input())\n        helper(a - 1)", "def helper(a):\n    ans = 0\n    ele = int(lst[a])\n    for i in range(10):\n        ans += res[a][i] * abs(ele - i)\n    print(ans)\nfor _ in range(1):\n    (n, m) = list(map(int, input().split()))\n    lst = input()\n    res = [[0 for i in range(10)] for j in range(n)]\n    for i in range(1, n):\n        ele = int(lst[i - 1])\n        for j in range(10):\n            if ele == j:\n                res[i][j] = res[i - 1][j] + 1\n            else:\n                res[i][j] = res[i - 1][j]\n    for i in range(m):\n        a = int(input())\n        helper(a - 1)", "def solve(a):\n    ans = 0\n    ele = int(lst[a])\n    for i in range(10):\n        ans += dp[a][i] * abs(ele - i)\n    print(ans)\nfor _ in range(1):\n    (n, m) = list(map(int, input().split()))\n    lst = input()\n    dp = [[0 for i in range(10)] for j in range(n)]\n    for i in range(1, n):\n        ele = int(lst[i - 1])\n        for j in range(10):\n            if ele == j:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n    for i in range(m):\n        a = int(input())\n        solve(a - 1)", "def solve(a):\n    ans = 0\n    for i in range(10):\n        ans += dp[a][i] * abs(int(lst[a]) - i)\n    print(ans)\nfor _ in range(1):\n    (n, m) = list(map(int, input().split()))\n    lst = input()\n    dp = [[0 for i in range(10)] for j in range(n)]\n    for i in range(1, n):\n        ele = int(lst[i - 1])\n        for j in range(10):\n            if ele == j:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n    for i in range(m):\n        a = int(input())\n        solve(a - 1)", "def solve(a):\n    ans = 0\n    for i in range(10):\n        ans += dp[a][i] * abs(int(lst[a]) - i)\n    print(ans)\nfor _ in range(1):\n    (n, m) = list(map(int, input().split()))\n    lst = input()\n    dp = [[0 for i in range(10)] for j in range(n)]\n    for i in range(1, n):\n        ele = int(lst[i - 1])\n        for j in range(10):\n            if ele == j:\n                dp[i][j] = dp[i - 1][j] + 1\n            else:\n                dp[i][j] = dp[i - 1][j]\n    for i in range(m):\n        a = int(input())\n        solve(a - 1)", "import sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n(n, m) = il()\ns = ip()\narr = []\ndarr = []\nd = {}\nfor l in s:\n    if l in d:\n        d[l] += 1\n    else:\n        d[l] = 1\n    darr.append(d.copy())\nfor _ in rg(m):\n    x = ii()\n    if x == 1:\n        ot(0)\n    else:\n        sum = 0\n        for k in darr[x - 2]:\n            sum = sum + abs(int(k) - int(s[x - 1])) * darr[x - 2][k]\n        ot(sum)", "import sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n(n, m) = il()\ns = ip()\narr = []\ndarr = []\nd = {}\nfor l in s:\n    if l in d:\n        d[l] += 1\n    else:\n        d[l] = 1\n    darr.append(d.copy())\nfor _ in rg(m):\n    x = ii()\n    if x == 1:\n        ot(0)\n    else:\n        sum = 0\n        for k in darr[x - 2]:\n            sum = sum + abs(int(k) - int(s[x - 1])) * darr[x - 2][k]\n        ot(sum)", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(nums, cases) = map(int, input().split())\ninpL = list(map(int, list(input().strip())))\npopn = [[] for i in range(10)]\nfor n in range(10):\n    myBin = 0\n    for j in inpL:\n        myBin += abs(int(j) - n)\n        popn[n] += [myBin]\nfor c in range(cases):\n    q = int(input())\n    queried = inpL[q - 1]\n    print(popn[int(queried)][q - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\ns = input().strip()\nl = [int(i) for i in s]\nd = [0] * 10\nans = [0] * (n + 193)\nfor i in range(n):\n    curr = l[i]\n    less = 0\n    big = 0\n    c1 = 0\n    c2 = 0\n    for j in range(10):\n        if j < curr:\n            c1 += d[j]\n            less += d[j] * j\n        if j > curr:\n            c2 += d[j]\n            big += d[j] * j\n    ans[i] = big - less + curr * (c1 - c2)\n    d[l[i]] += 1\nfor _ in range(m):\n    x = int(input())\n    print(ans[x - 1])", "(n, m) = map(int, input().split())\na = list(map(int, list(input().strip())))\ns = [[] for i in range(10)]\nfor i in range(10):\n    temp = 0\n    for j in a:\n        temp += abs(int(j) - i)\n        s[i] += [temp]\nfor i in range(m):\n    ind = int(input())\n    ind1 = a[ind - 1]\n    print(s[int(ind1)][ind - 1])", "(n, m) = map(int, input().split())\nd = list(map(int, list(input().strip())))\na = [0 for _ in range(10)]\nabig = []\nfor i in range(n):\n    a[d[i]] += 1\n    abig.append(a[:])\nfor _ in range(m):\n    x = int(input()) - 1\n    ans = 0\n    for i in range(10):\n        ans += abs(d[x] - i) * abig[x][i]\n    print(ans)", "(n, m) = map(int, input().split())\nla = list(map(int, list(input().strip())))\nl = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nhash_count = {}\nhash_bool = {}\nfor i in l:\n    hash_bool[i] = False\n    hash_count[i] = 0\nans = {}\nfor (x, i) in enumerate(la):\n    if x == 0:\n        ans[x] = 0\n    else:\n        (count1, sum1) = (0, 0)\n        (count2, sum2) = (0, 0)\n        for j in l:\n            if hash_bool[j] == True:\n                if i >= j:\n                    count1 += hash_count[j]\n                    sum1 += j * hash_count[j]\n                else:\n                    count2 += hash_count[j]\n                    sum2 += j * hash_count[j]\n        count1 = count1 * i - sum1\n        count2 = -1 * abs(count2 * i - sum2)\n        ans[x] = count1 - count2\n    hash_count[i] += 1\n    hash_bool[i] = True\nfor i in range(m):\n    a = int(input()) - 1\n    print(ans[a])", "(n, m) = map(int, input().split())\nd = list(map(int, list(input().strip())))\na = [0 for _ in range(10)]\nabig = []\nfor i in range(n):\n    a[d[i]] += 1\n    abig.append(a[:])\nfor _ in range(m):\n    x = int(input()) - 1\n    ans = 0\n    for i in range(10):\n        ans += abs(d[x] - i) * abig[x][i]\n    print(ans)", "[n, m] = [int(i) for i in input().split()]\ns = input()\narr = []\nfor p in range(10):\n    temp = []\n    total = 0\n    for q in range(n):\n        total += abs(p - int(s[q]))\n        temp.append(total)\n    arr.append(temp)\nfor t in range(m):\n    x = int(input())\n    if x == 1:\n        print(0)\n    else:\n        print(arr[int(s[x - 1])][x - 2])", "temp = list(map(int, input().split()))\nn = temp[0]\nm = temp[1]\na = input()\na = a.strip()\nb = []\nfor i in a:\n    b.append(int(i))\nb1 = []\nb2 = []\nfor i in range(10):\n    b1.append([])\n    b2.append([])\nfor i in range(10):\n    for j in range(n):\n        b1[i].append(0)\n        b2[i].append(0)\nfor i in range(10):\n    val = i - b[0]\n    if val < 0:\n        b2[i][0] = val\n    else:\n        b1[i][0] = val\n    for j in range(1, n):\n        val = i - b[j]\n        if val < 0:\n            b2[i][j] += val + b2[i][j - 1]\n            b1[i][j] = b1[i][j - 1]\n        else:\n            b1[i][j] += val + b1[i][j - 1]\n            b2[i][j] = b2[i][j - 1]\nfor i in range(m):\n    index = int(input())\n    index -= 1\n    x = b[index]\n    print(b1[x][index] - b2[x][index])", "from itertools import repeat\nimport numpy as np\n(n, m) = map(int, input().split())\na = input()\ndigit_count = np.zeros((n, 10))\nfor i in range(n):\n    if i > 0:\n        digit_count[i] = digit_count[i - 1]\n    digit_count[i, int(a[i])] += 1\nfor _ in repeat(None, m):\n    x = int(input())\n    B = 0\n    for i in range(10):\n        B += digit_count[x - 1, i] * abs(int(a[x - 1]) - i)\n    print(int(B))", "(n, m) = map(int, input().split())\ns = input().strip()\narr = [int(i) for i in s]\npart = [[0] * 10]\npart[0][arr[0]] += 1\nfor i in range(1, n):\n    part.append(part[-1][:])\n    part[-1][arr[i]] += 1\nfor _ in range(m):\n    tot = 0\n    i = int(input()) - 1\n    for j in range(10):\n        tot += abs(arr[i] - j) * part[i][j]\n    print(tot)", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if index in result and result[index] is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in counts.items()))\n        counts[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "(N, M) = [int(x) for x in input().split()]\nS = input()\nanswer = [None] * N\ncount = [0] * 10\nfor i in range(N):\n    c = S[i]\n    c = ord(c) - ord('0')\n    value = 0\n    for j in range(c):\n        value += (c - j) * count[j]\n    for j in range(c + 1, 10):\n        value += (j - c) * count[j]\n    count[c] += 1\n    answer[i] = value\nfor _ in range(M):\n    x = int(input())\n    print(answer[x - 1])", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if index in result and result[index] is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in counts.items()))\n        counts[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if index in result and result[index] is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in counts.items()))\n        counts[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if index in result and result[index] is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in counts.items()))\n        counts[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "import sys\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = [0] * 10\n    for (index, digit) in enumerate(digits, start=1):\n        if index in result and result[index] is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in enumerate(counts)))\n        counts[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if index in result and result[index] is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in counts.items()))\n        counts[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    unique = set(indices)\n    result = {}\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if index in unique and index not in result:\n            result[index] = sum((n * abs(digit - d) for (d, n) in counts.items()))\n            if len(result) == len(unique):\n                return (result[i] for i in indices)\n        counts[digit] += 1\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if result.get(index, False) is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in counts.items()))\n        counts[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (_, digits, *indices) = lines\n    return calculate_answer(as_ints(digits.rstrip()), as_ints(indices))\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if result.get(index, False) is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in counts.items()))\n        counts[digit] += 1\n    return [result[i] for i in indices]\n\ndef as_ints(iterable):\n    return [int(x) for x in iterable]\nmain()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    next(lines)\n    digits = as_ints(next(lines).rstrip())\n    indices = as_ints(lines)\n    return calculate_answer(digits, indices)\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    todo = len(result)\n    for (index, digit) in enumerate(digits, start=1):\n        if index in result:\n            if not result[index]:\n                result[index] = sum((count * abs(digit - d) for (d, count) in counts.items()))\n            todo -= 1\n            if not todo:\n                return (result[i] for i in indices)\n        counts[digit] += 1\n\ndef as_ints(seq):\n    return [int(x) for x in seq]\nmain()", "import sys\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    next(lines)\n    digits = as_ints(next(lines).rstrip())\n    indices = as_ints(lines)\n    return calculate_answer(digits, indices)\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    counts = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if index in result:\n            if not result[index]:\n                result[index] = sum((count * abs(digit - d) for (d, count) in counts.items()))\n        counts[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(seq):\n    return [int(x) for x in seq]\nmain()", "import sys\nfrom itertools import islice\nfrom collections import defaultdict\n\ndef main():\n    print(*solve(sys.stdin), sep='\\n')\n\ndef solve(lines):\n    (length, steps) = as_ints(next(lines).split())\n    digits = as_ints(next(lines)[:length])\n    indices = as_ints(islice(lines, steps))\n    return calculate_answer(digits, indices)\n\ndef calculate_answer(digits, indices):\n    result = dict.fromkeys(indices)\n    sums = defaultdict(int)\n    for (index, digit) in enumerate(digits, start=1):\n        if result.get(index, False) is None:\n            result[index] = sum((n * abs(digit - d) for (d, n) in sums.items()))\n        sums[digit] += 1\n    return (result[i] for i in indices)\n\ndef as_ints(seq):\n    return [int(x) for x in seq]\nmain()", "(n, m) = map(int, input().split())\ns = input()\nfreq = [0] * 10\nB = [0] * n\nfor i in range(0, n):\n    t = int(s[i])\n    freq[t] += 1\n    for j in range(0, 10):\n        B[i] += freq[j] * abs(t - j)\nfor i in range(0, m):\n    x = int(input())\n    print(B[x - 1])"]