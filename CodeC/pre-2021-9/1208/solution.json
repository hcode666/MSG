["s = input()\nn = len(s)\nfrom bisect import bisect, bisect_left\nfrom functools import lru_cache\nmemo = [[-1] * n for _ in range(n)]\n\ndef common(i, j):\n    if i < 0 or j >= n or s[i] != s[j]:\n        return 0\n    if memo[i][j] != -1:\n        return memo[i][j]\n    memo[i][j] = 1 + common(i - 1, j + 1)\n    return memo[i][j]\nstart = [[] for _ in range(n)]\nend = [[] for _ in range(n)]\ndp = set()\nfor i in range(n):\n    dp.add((i, i))\n    start[i].append(i)\n    end[i].append(i)\nfor k in range(2, n + 1):\n    for i in range(n - k + 1):\n        j = i + k - 1\n        if s[i] == s[j] and (k == 2 or (i + 1, j - 1) in dp):\n            dp.add((i, j))\n            start[i].append(j)\n            end[j].append(i)\nfor i in range(n):\n    end[i].reverse()\nans = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if common(i, j):\n            ans += common(i, j) * (bisect(start[i + 1], j - 1) + len(end[j - 1]) - bisect_left(end[j - 1], i + 1) + 1)\nprint(ans)", "s = input()\nn = len(s)\nfrom bisect import bisect, bisect_left\nfrom functools import lru_cache\nmemo = [[-1] * n for _ in range(n)]\n\ndef common(i, j):\n    if i < 0 or j >= n or s[i] != s[j]:\n        return 0\n    if memo[i][j] != -1:\n        return memo[i][j]\n    memo[i][j] = 1 + common(i - 1, j + 1)\n    return memo[i][j]\nstart = [[] for _ in range(n)]\nend = [[] for _ in range(n)]\ndp = set()\nfor i in range(n):\n    dp.add((i, i))\n    start[i].append(i)\n    end[i].append(i)\nfor k in range(2, n + 1):\n    for i in range(n - k + 1):\n        j = i + k - 1\n        if s[i] == s[j] and (k == 2 or (i + 1, j - 1) in dp):\n            dp.add((i, j))\n            start[i].append(j)\n            end[j].append(i)\nfor i in range(n):\n    end[i].reverse()\nans = 0\nfor i in range(n - 1):\n    for j in range(i + 1, n):\n        if common(i, j):\n            ans += common(i, j) * (bisect(start[i + 1], j - 1) + len(end[j - 1]) - bisect_left(end[j - 1], i + 1) + 1)\nprint(ans)", "def binarySearch(arr, l, r, x):\n    mid = 0\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid + 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    if mid != len(arr):\n        if arr[mid] < x:\n            return mid + 1\n    return mid\ns = input()\nstrt = []\nend = []\nplc = []\nlandr = []\nl2r = []\nlr = []\nans = 0\nn = len(s)\nif n != 1:\n    for i in range(n):\n        strt.append([])\n        end.append([])\n        landr.append([0] * n)\n        l2r.append([0] * n)\n    for i in range(n):\n        for j in range(n):\n            if i - j < 0 or i + j >= n:\n                break\n            if s[i - j] == s[i + j]:\n                if i - j - 1 >= 0:\n                    strt[i - j - 1].append(2 * j + 1)\n                if i + j + 1 < n:\n                    end[i + j + 1].append(2 * j + 1)\n            else:\n                break\n    for i in range(n):\n        for j in range(n):\n            if i - j < 0 or i + j + 1 >= n:\n                break\n            if s[i - j] == s[i + j + 1]:\n                if i - j - 1 >= 0:\n                    strt[i - j - 1].append(2 * j + 2)\n                if i + j + 2 < n:\n                    end[i + j + 2].append(2 * j + 2)\n            else:\n                break\n    for i in range(n):\n        end[i].sort()\n        strt[i].sort()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                lr.append([i, j])\n                if i > 0 and j < n - 1:\n                    landr[i][j] = landr[i - 1][j + 1] + 1\n                else:\n                    landr[i][j] = 1\n    for i in lr:\n        tempans = 1\n        l = i[0]\n        r = i[1]\n        length = r - l - 1\n        tempans += binarySearch(strt[l], 0, len(strt[l]) - 1, length)\n        tempans += binarySearch(end[r], 0, len(end[r]) - 1, length)\n        l2r[l][r] = tempans\n    for i in range(n):\n        for j in range(n):\n            ans += l2r[i][j] * landr[i][j]\nprint(ans)", "DP = []\nfor i in range(1002):\n    temp = []\n    for j in range(1002):\n        temp.append(False)\n    DP.append(temp)\n\ndef Pre_process(s):\n    n = len(s)\n    for i in range(n):\n        for j in range(n):\n            DP[i][j] = False\n    for j in range(1, n + 1):\n        for i in range(0, n - j + 1):\n            if j <= 2:\n                if s[i] == s[i + j - 1]:\n                    DP[i][i + j - 1] = True\n            elif s[i] == s[i + j - 1]:\n                DP[i][i + j - 1] = DP[i + 1][i + j - 2]\n    for i in range(0, n):\n        for j in range(0, n):\n            DP[j][i] = DP[i][j]\n\ndef main():\n    s = input()\n    Pre_process(s)\n    n = len(s)\n    left = []\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            temp.append(0)\n        left.append(temp)\n    right = []\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            temp.append(0)\n        right.append(temp)\n    for i in range(n):\n        left[i][i] = 1\n        for j in range(i + 1, n):\n            left[i][j] = left[i][j - 1]\n            if DP[i][j]:\n                left[i][j] += 1\n    for i in range(n - 1, -1, -1):\n        right[i][i] = 1\n        for j in range(i - 1, -1, -1):\n            right[i][j] = right[i][j + 1]\n            if DP[i][j]:\n                right[i][j] += 1\n    ans = []\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            temp.append(0)\n        ans.append(temp)\n    for i in range(0, n - 1):\n        if s[i] == s[i + 1]:\n            ans[i][i + 1] = 1\n    for j in range(2, n):\n        for i in range(n - j):\n            if s[i] == s[i + j]:\n                ans[i][i + j] = ans[i + 1][i + j - 1] + 1 + left[i + 1][i + j - 1] + right[i + j - 1][i + 1]\n    Sum = 0\n    for i in range(n):\n        for j in range(n):\n            Sum += ans[i][j]\n    print(Sum)\nmain()", "def palSub(s, n, isPal):\n    for gap in range(n):\n        for i in range(n - gap):\n            j = i + gap\n            if gap == 0:\n                isPal[i][j] = 1\n            elif gap == 1:\n                isPal[i][j] = 1 if s[i] == s[j] else 0\n            else:\n                isPal[i][j] = 1 if s[i] == s[j] and isPal[i + 1][j - 1] else 0\n    return isPal\n\ndef case1(n, isPal, c1):\n    for i in range(n):\n        for j in range(i, n):\n            if i == j:\n                c1[i][j] = 1\n            else:\n                c1[i][j] = c1[i][j - 1] + isPal[i][j]\n    return c1\n\ndef case2(n, isPal, c2):\n    for j in range(n - 1, -1, -1):\n        for i in range(j, -1, -1):\n            if i == j:\n                c2[i][j] = 1\n            else:\n                c2[i][j] = c2[i + 1][j] + isPal[i][j]\n    return c2\n\ndef getSub(s, n, c1, c2, res):\n    for gap in range(n):\n        for i in range(n - gap):\n            j = i + gap\n            if gap == 0:\n                res[i][j] = 0\n            elif gap == 1:\n                res[i][j] = 1 if s[i] == s[j] else 0\n            elif s[i] == s[j]:\n                res[i][j] = 1 + c1[i + 1][j - 1] + c2[i + 1][j - 1] + res[i + 1][j - 1]\n    return res\ns = input()\nn = len(s)\nisPal = [[0 for x in range(n)] for y in range(n)]\nisPal = palSub(s, n, isPal)\nc1 = [[-1 for x in range(n)] for y in range(n)]\nc2 = [[-1 for x in range(n)] for y in range(n)]\nc1 = case1(n, isPal, c1)\nc2 = case2(n, isPal, c2)\nres = [[0 for x in range(n)] for y in range(n)]\nres = getSub(s, n, c1, c2, res)\nmycount = 0\nfor i in range(n):\n    for j in range(n):\n        mycount += res[i][j]\nprint(mycount)", "s = str(input())\nn = len(s)\nDP = [[0] * n for _ in range(n)]\nP = [[0] * n for _ in range(n)]\nLR = [[0] * n for _ in range(n)]\nRL = [[0] * n for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        s2 = s[i:j + 1]\n        if s[i:j + 1] == s2[::-1]:\n            P[i][j] = 1\n        if i > j:\n            P[i][j] = 0\nfor i in range(n):\n    for j in range(n):\n        if j == 0:\n            LR[i][j] = P[i][j]\n        else:\n            LR[i][j] = P[i][j] + LR[i][j - 1]\nfor j in range(n):\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            RL[i][j] = P[i][j]\n        else:\n            RL[i][j] = P[i][j] + RL[i + 1][j]\nfor j in range(n):\n    for i in range(j, -1, -1):\n        if i == j:\n            DP[i][j] = 0\n            continue\n        if i > j:\n            DP[i][j] = 0\n            continue\n        if s[i] == s[j]:\n            DP[i][j] = 1 + RL[i + 1][j - 1] + LR[i + 1][j - 1] + DP[i + 1][j - 1]\n        else:\n            DP[i][j] = 0\ns = 0\nfor i in range(n):\n    s += sum(DP[i])\nprint(s)", "s = str(input())\nn = len(s)\nDP = [[0] * n for _ in range(n)]\nP = [[0] * n for _ in range(n)]\nLR = [[0] * n for _ in range(n)]\nRL = [[0] * n for _ in range(n)]\nfor i in range(n):\n    for j in range(n):\n        s2 = s[i:j + 1]\n        if s[i:j + 1] == s2[::-1]:\n            P[i][j] = 1\n        if i > j:\n            P[i][j] = 0\nfor i in range(n):\n    for j in range(n):\n        if j == 0:\n            LR[i][j] = P[i][j]\n        else:\n            LR[i][j] = P[i][j] + LR[i][j - 1]\nfor j in range(n):\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            RL[i][j] = P[i][j]\n        else:\n            RL[i][j] = P[i][j] + RL[i + 1][j]\nfor j in range(n):\n    for i in range(j, -1, -1):\n        if i == j:\n            DP[i][j] = 0\n            continue\n        if i > j:\n            DP[i][j] = 0\n            continue\n        if s[i] == s[j]:\n            DP[i][j] = 1 + RL[i + 1][j - 1] + LR[i + 1][j - 1] + DP[i + 1][j - 1]\n        else:\n            DP[i][j] = 0\ns = 0\nfor i in range(n):\n    s += sum(DP[i])\nprint(s)", "DP = []\nfor i in range(1002):\n    temp = []\n    for j in range(1002):\n        temp.append(False)\n    DP.append(temp)\n\ndef Pre_process(s):\n    n = len(s)\n    for i in range(n):\n        for j in range(n):\n            DP[i][j] = False\n    for j in range(1, n + 1):\n        for i in range(0, n - j + 1):\n            if j <= 2:\n                if s[i] == s[i + j - 1]:\n                    DP[i][i + j - 1] = True\n            elif s[i] == s[i + j - 1]:\n                DP[i][i + j - 1] = DP[i + 1][i + j - 2]\n    for i in range(0, n):\n        for j in range(0, n):\n            DP[j][i] = DP[i][j]\n\ndef main():\n    s = input()\n    Pre_process(s)\n    n = len(s)\n    left = []\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            temp.append(0)\n        left.append(temp)\n    right = []\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            temp.append(0)\n        right.append(temp)\n    for i in range(n):\n        left[i][i] = 1\n        for j in range(i + 1, n):\n            left[i][j] = left[i][j - 1]\n            if DP[i][j]:\n                left[i][j] += 1\n    for i in range(n - 1, -1, -1):\n        right[i][i] = 1\n        for j in range(i - 1, -1, -1):\n            right[i][j] = right[i][j + 1]\n            if DP[i][j]:\n                right[i][j] += 1\n    ans = []\n    for i in range(n):\n        temp = []\n        for j in range(n):\n            temp.append(0)\n        ans.append(temp)\n    for i in range(0, n - 1):\n        if s[i] == s[i + 1]:\n            ans[i][i + 1] = 1\n    for j in range(2, n):\n        for i in range(n - j):\n            if s[i] == s[i + j]:\n                ans[i][i + j] = ans[i + 1][i + j - 1] + 1 + left[i + 1][i + j - 1] + right[i + j - 1][i + 1]\n    Sum = 0\n    for i in range(n):\n        for j in range(n):\n            Sum += ans[i][j]\n    print(Sum)\nmain()", "def func(S):\n    N = len(S)\n    visit = [[None for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        visit[i][i] = True\n    for i in range(N - 1):\n        if S[i] == S[i + 1]:\n            visit[i][i + 1] = True\n        else:\n            visit[i][i + 1] = False\n    for k in range(3, N + 1):\n        for i in range(0, N - k + 1):\n            j = i + k - 1\n            if S[i] == S[j] and visit[i + 1][j - 1] == True:\n                visit[i][j] = True\n            else:\n                visit[i][j] = False\n    x = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        x[i][i] = 1\n    for i in range(N - 1):\n        if S[i] == S[i + 1]:\n            x[i][i + 1] = 2\n        else:\n            x[i][i + 1] = 1\n    for i in range(N - 2):\n        for j in range(i + 2, N):\n            if S[i] == S[j] and visit[i + 1][j - 1] == True:\n                x[i][j] = x[i][j - 1] + 1\n            else:\n                x[i][j] = x[i][j - 1]\n    y = [[0 for _ in range(N)] for _ in range(N)]\n    for j in range(N):\n        y[j][j] = 1\n    for j in range(1, N):\n        if S[j] == S[j - 1]:\n            y[j - 1][j] = 2\n        else:\n            y[j - 1][j] = 1\n    for j in range(2, N):\n        for i in reversed(range(0, j - 1)):\n            if S[i] == S[j] and visit[i + 1][j - 1] == True:\n                y[i][j] = y[i + 1][j] + 1\n            else:\n                y[i][j] = y[i + 1][j]\n    return (x, y)\nS = input()\nresult = 0\nN = len(S)\nif N == 1:\n    result = 0\nelif N == 2:\n    if S[0] == S[1]:\n        result = 1\n    else:\n        result = 0\nelse:\n    (x, y) = func(S)\n    qw = [[[-1, -1] for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        qw[i][i][0] = 1\n        qw[i][i][1] = 0\n    for i in range(N - 1):\n        if S[i] == S[i + 1]:\n            qw[i][i + 1][0] = 1\n            result += 1\n        else:\n            qw[i][i + 1][0] = 0\n        qw[i][i + 1][1] = 0\n    for z in range(3, N + 1):\n        for i in range(0, N - z + 1):\n            j = i + z - 1\n            if S[i] != S[j]:\n                qw[i][j][0] = 0\n                qw[i][j][1] = 0\n            else:\n                if qw[i + 1][j - 1][0] == 0:\n                    qw[i][j][0] = 0\n                else:\n                    qw[i][j][0] = j - i\n                qw[i][j][1] = 1 + qw[i + 1][j - 1][1] + x[i + 1][j - 2] + y[i + 2][j - 1]\n            result += qw[i][j][0] + qw[i][j][1]\nprint(result)", "s = input()\nN = len(s)\nNkj = [[0] * N for _ in range(N)]\nfor k in range(N):\n    for j in range(N - 1, k, -1):\n        if s[j] == s[k]:\n            Nkj[k][j] = 1 + (Nkj[k - 1][j + 1] if k > 0 and j < N - 1 else 0)\n        else:\n            Nkj[k][j] = 0\n        Nkj[j][k] = Nkj[k][j]\nPab = [[0] * N for _ in range(N)]\nfor m in range(N):\n    for w in range(0, min(N - m, m + 1)):\n        if s[m - w] == s[m + w]:\n            Pab[m - w][m + w] = 1\n            Pab[m + w][m - w] = 1\n        else:\n            break\n    for w in range(0, min(N - m - 1, m + 1)):\n        if s[m - w] == s[m + w + 1]:\n            Pab[m - w][m + w + 1] = 1\n            Pab[m + w + 1][m - w] = 1\n        else:\n            break\nSPab = [list(Pab[a]) for a in range(N)]\nfor a in range(N):\n    for b in range(a + 1, N):\n        SPab[a][b] += SPab[a][b - 1]\n    for b in range(a - 1, -1, -1):\n        SPab[a][b] += SPab[a][b + 1]\nC = 0\nfor i in range(-1, N - 1):\n    for j in range(i + 1, N + 1):\n        center_width = j - (i + 1)\n        c = 0\n        if center_width >= 2:\n            if Pab[i + 1][j - 1]:\n                c += center_width - 1\n        if center_width >= 1:\n            if i >= 0 and j < N:\n                if center_width >= 2:\n                    Pi = SPab[i + 1][j - 2]\n                    Ni = Nkj[i][j]\n                    c += Pi * Ni\n                    Pj = SPab[j - 1][i + 2]\n                    Nj = Nkj[j][i]\n                    c += Pj * Nj\n                c += Nkj[i][j]\n            C += c\nprint(C)", "s = input()\nn = len(s)\npalindromic = [[False for i in range(n)] for y in range(n)]\nstart = [[0 for i in range(n)] for y in range(n)]\nend = [[0 for i in range(n)] for y in range(n)]\nfor i in range(n):\n    for j in range(i + 1):\n        if i == j:\n            palindromic[j][i] = True\n        elif s[j] == s[i] and j == i - 1:\n            palindromic[j][i] = True\n        elif palindromic[j + 1][i - 1] and s[j] == s[i]:\n            palindromic[j][i] = True\nfor i in range(n):\n    start[i][i] = 1\n    for j in range(i + 1, n):\n        if palindromic[i][j]:\n            start[i][j] = start[i][j - 1] + 1\n        else:\n            start[i][j] = start[i][j - 1]\nfor i in range(n):\n    end[i][i] = 1\n    for j in range(i - 1, 0, -1):\n        if palindromic[j][i]:\n            end[j][i] = end[j + 1][i] + 1\n        else:\n            end[j][i] = end[j + 1][i]\ncur = [0] * n\nprev = [0] * n\nfor i in range(1, n):\n    cur[i] = cur[i - 1]\n    for j in range(i):\n        if s[i] == s[j]:\n            prev[j] = start[j + 1][i - 1] + end[j + 1][i - 1] + prev[j + 1] + 1\n            cur[i] += prev[j]\n        else:\n            prev[j] = 0\nprint(cur[n - 1])", "def binarySearch(arr, l, r, x):\n    mid = 0\n    while l <= r:\n        mid = l + (r - l) // 2\n        if arr[mid] == x:\n            return mid + 1\n        elif arr[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    if mid != len(arr):\n        if arr[mid] < x:\n            return mid + 1\n    return mid\ns = input()\nstrt = []\nend = []\nplc = []\nlandr = []\nl2r = []\nlr = []\nans = 0\nn = len(s)\nif n != 1:\n    for i in range(n):\n        strt.append([])\n        end.append([])\n        landr.append([0] * n)\n        l2r.append([0] * n)\n    for i in range(n):\n        for j in range(n):\n            if i - j < 0 or i + j >= n:\n                break\n            if s[i - j] == s[i + j]:\n                if i - j - 1 >= 0:\n                    strt[i - j - 1].append(2 * j + 1)\n                if i + j + 1 < n:\n                    end[i + j + 1].append(2 * j + 1)\n            else:\n                break\n    for i in range(n):\n        for j in range(n):\n            if i - j < 0 or i + j + 1 >= n:\n                break\n            if s[i - j] == s[i + j + 1]:\n                if i - j - 1 >= 0:\n                    strt[i - j - 1].append(2 * j + 2)\n                if i + j + 2 < n:\n                    end[i + j + 2].append(2 * j + 2)\n            else:\n                break\n    for i in range(n):\n        end[i].sort()\n        strt[i].sort()\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            if s[i] == s[j]:\n                lr.append([i, j])\n                if i > 0 and j < n - 1:\n                    landr[i][j] = landr[i - 1][j + 1] + 1\n                else:\n                    landr[i][j] = 1\n    for i in lr:\n        tempans = 1\n        l = i[0]\n        r = i[1]\n        length = r - l - 1\n        tempans += binarySearch(strt[l], 0, len(strt[l]) - 1, length)\n        tempans += binarySearch(end[r], 0, len(end[r]) - 1, length)\n        l2r[l][r] = tempans\n    for i in range(n):\n        for j in range(n):\n            ans += l2r[i][j] * landr[i][j]\nprint(ans)", "def get_the_num_of_palindromes_in_string_i_to_j_starting_at_i_and_ending_at_j(S):\n    N = len(S)\n    is_substring_palindrome = [[None for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        is_substring_palindrome[i][i] = True\n    for i in range(N - 1):\n        if S[i] == S[i + 1]:\n            is_substring_palindrome[i][i + 1] = True\n        else:\n            is_substring_palindrome[i][i + 1] = False\n    for k in range(3, N + 1):\n        for i in range(0, N - k + 1):\n            j = i + k - 1\n            if S[i] == S[j] and is_substring_palindrome[i + 1][j - 1] == True:\n                is_substring_palindrome[i][j] = True\n            else:\n                is_substring_palindrome[i][j] = False\n    num_of_palindromic_substrings_in_string_i_to_j_starting_at_i = [[0 for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        num_of_palindromic_substrings_in_string_i_to_j_starting_at_i[i][i] = 1\n    for i in range(N - 1):\n        if S[i] == S[i + 1]:\n            num_of_palindromic_substrings_in_string_i_to_j_starting_at_i[i][i + 1] = 2\n        else:\n            num_of_palindromic_substrings_in_string_i_to_j_starting_at_i[i][i + 1] = 1\n    for i in range(N - 2):\n        for j in range(i + 2, N):\n            if S[i] == S[j] and is_substring_palindrome[i + 1][j - 1] == True:\n                num_of_palindromic_substrings_in_string_i_to_j_starting_at_i[i][j] = num_of_palindromic_substrings_in_string_i_to_j_starting_at_i[i][j - 1] + 1\n            else:\n                num_of_palindromic_substrings_in_string_i_to_j_starting_at_i[i][j] = num_of_palindromic_substrings_in_string_i_to_j_starting_at_i[i][j - 1]\n    num_of_palindromic_substrings_in_string_i_to_j_ending_at_j = [[0 for _ in range(N)] for _ in range(N)]\n    for j in range(N):\n        num_of_palindromic_substrings_in_string_i_to_j_ending_at_j[j][j] = 1\n    for j in range(1, N):\n        if S[j] == S[j - 1]:\n            num_of_palindromic_substrings_in_string_i_to_j_ending_at_j[j - 1][j] = 2\n        else:\n            num_of_palindromic_substrings_in_string_i_to_j_ending_at_j[j - 1][j] = 1\n    for j in range(2, N):\n        for i in reversed(range(0, j - 1)):\n            if S[i] == S[j] and is_substring_palindrome[i + 1][j - 1] == True:\n                num_of_palindromic_substrings_in_string_i_to_j_ending_at_j[i][j] = num_of_palindromic_substrings_in_string_i_to_j_ending_at_j[i + 1][j] + 1\n            else:\n                num_of_palindromic_substrings_in_string_i_to_j_ending_at_j[i][j] = num_of_palindromic_substrings_in_string_i_to_j_ending_at_j[i + 1][j]\n    return (num_of_palindromic_substrings_in_string_i_to_j_starting_at_i, num_of_palindromic_substrings_in_string_i_to_j_ending_at_j)\nS = input()\nN = len(S)\ncount = 0\nif N == 1:\n    count = 0\nelif N == 2:\n    if S[0] == S[1]:\n        count = 1\n    else:\n        count = 0\nelse:\n    (num_of_palindromic_substrings_in_string_i_to_j_starting_at_i, num_of_palindromic_substrings_in_string_i_to_j_ending_at_j) = get_the_num_of_palindromes_in_string_i_to_j_starting_at_i_and_ending_at_j(S)\n    dp = [[[-1, -1] for _ in range(N)] for _ in range(N)]\n    for i in range(N):\n        dp[i][i][0] = 1\n        dp[i][i][1] = 0\n    for i in range(N - 1):\n        if S[i] == S[i + 1]:\n            dp[i][i + 1][0] = 1\n            count += 1\n        else:\n            dp[i][i + 1][0] = 0\n        dp[i][i + 1][1] = 0\n    for k in range(3, N + 1):\n        for i in range(0, N - k + 1):\n            j = i + k - 1\n            if S[i] != S[j]:\n                dp[i][j][0] = 0\n                dp[i][j][1] = 0\n            else:\n                if dp[i + 1][j - 1][0] == 0:\n                    dp[i][j][0] = 0\n                else:\n                    dp[i][j][0] = j - i\n                dp[i][j][1] = 1 + dp[i + 1][j - 1][1] + num_of_palindromic_substrings_in_string_i_to_j_starting_at_i[i + 1][j - 2] + num_of_palindromic_substrings_in_string_i_to_j_ending_at_j[i + 2][j - 1]\n            count += dp[i][j][0] + dp[i][j][1]\nprint(count)", "def oddPalindrome(task):\n    answer = [0] * len(task)\n    for i in range(len(task)):\n        for k in range(min(len(task) - i, i + 1)):\n            if task[i - k] != task[i + k]:\n                break\n            else:\n                answer[i] += 1\n    return answer\n\ndef evenPalindrome(task):\n    answer = [0] * (len(task) - 1)\n    for i in range(len(task) - 1):\n        for k in range(min(i + 1, len(task) - 1 - i)):\n            if task[i - k] != task[i + k + 1]:\n                break\n            else:\n                answer[i] += 1\n    return answer\n\ndef makeLeftPalindrome(oddPalindromes, evenPalindromes):\n    n = len(oddPalindromes)\n    leftPalindrome = [[0] * (n - x) for x in range(n)]\n    for a in range(n):\n        leftPalindrome[a][0] = 1\n        for k in range(1, n - a):\n            leftPalindrome[a][k] = leftPalindrome[a][k - 1] + (1 if k % 2 == 0 and oddPalindromes[a + k // 2] > k // 2 else 0) + (1 if k % 2 != 0 and evenPalindromes[a + k // 2] > k // 2 else 0)\n    return leftPalindrome\n\ndef makeRightPalindrome(oddPalindromes, evenPalindromes):\n    n = len(oddPalindromes)\n    rightPalindrome = [[0] * (x + 1) for x in range(n - 1)]\n    for b in range(n - 1):\n        rightPalindrome[b][0] = 1\n        for k in range(1, b + 1):\n            rightPalindrome[b][k] = rightPalindrome[b][k - 1] + (1 if k % 2 == 0 and oddPalindromes[b - k // 2] > k // 2 else 0) + (1 if k % 2 != 0 and evenPalindromes[b - k // 2 - 1] > k // 2 else 0)\n    return rightPalindrome\n\ndef makeSubstringPalindrome(leftPalindrome, rightPalindrome, task):\n    n = len(leftPalindrome)\n    answer = [[0] * n for _ in range(n)]\n    for k in range(n - 1):\n        for a in range(n - 1 - k):\n            if task[a] == task[k + a + 1]:\n                answer[a][k + a + 1] = (answer[a + 1][k + a] if k > 1 else 0) + (leftPalindrome[a + 1][k - 1] if k > 0 else 0) + (rightPalindrome[k + a][k - 1] if k > 0 else 0) + 1\n    return answer\ntask = input()\noddP = oddPalindrome(task)\nevenP = evenPalindrome(task)\nleftP = makeLeftPalindrome(oddP, evenP)\nrightP = makeRightPalindrome(oddP, evenP)\nA = makeSubstringPalindrome(leftP, rightP, task)\nprint(sum([sum(x) for x in A]))", "from sys import *\nimport os\nimport re\nfrom math import *\nS = input()\nN = len(S)\nDPM2 = [0] * (N + 1)\nDPM1 = [0] * (N + 1)\nLM2 = [0] * (N + 1)\nLM1 = [1] * (N + 1)\nRM2 = [0] * (N + 1)\nRM1 = [1] * (N + 1)\nPM2 = [1] * (N + 1)\nPM1 = [1] * (N + 1)\nans = 0\nfor le in range(2, N + 1):\n    limit = N - le + 1\n    DP = [0] * limit\n    L = [0] * limit\n    R = [0] * limit\n    P = [0] * limit\n    for i in range(0, limit):\n        j = i + le - 1\n        if S[i] == S[j]:\n            DP[i] += DPM2[i + 1]\n            DP[i] += 1\n            DP[i] += LM2[i + 1]\n            DP[i] += RM2[i + 1]\n            P[i] = PM2[i + 1]\n            ans += DP[i]\n        L[i] = LM1[i] + P[i]\n        R[i] = RM1[i + 1] + P[i]\n    LM2 = LM1\n    LM1 = L\n    RM2 = RM1\n    RM1 = R\n    PM2 = PM1\n    PM1 = P\n    DPM2 = DPM1\n    DPM1 = DP\nprint(ans)"]