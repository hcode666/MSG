["for t in range(int(input())):\n    N = int(input())\n    G = [set() for i in range(N + 1)]\n    for i in range(N - 1):\n        (u, v) = map(int, input().split())\n        G[u].add(v)\n        G[v].add(u)\n    leaves = [u for u in range(1, N + 1) if len(G[u]) == 1]\n    cur = [set() for i in range(N + 1)]\n    for leaf in leaves:\n        p = G[leaf].pop()\n        cur[p].add(leaf)\n    (cnt2, cnt3) = (set(), set())\n    for u in range(1, N + 1):\n        if len(cur[u]) >= 3:\n            cnt3.add(u)\n        elif len(cur[u]) == 2 and len(G[u]) == 3:\n            cnt2.add(u)\n    ans = []\n    while cnt3 or cnt2:\n        while cnt3:\n            u = cnt3.pop()\n            (leaf1, leaf2, leaf3) = (cur[u].pop(), cur[u].pop(), cur[u].pop())\n            ans.append((u, leaf1, leaf2, leaf3))\n            G[u].remove(leaf1)\n            G[u].remove(leaf2)\n            G[u].remove(leaf3)\n            if len(cur[u]) >= 3:\n                cnt3.add(u)\n            elif len(cur[u]) == 2 and len(G[u]) == 3:\n                cnt2.add(u)\n            if len(G[u]) == 1:\n                p = G[u].pop()\n                cnt2.discard(p)\n                cnt3.discard(p)\n                cur[p].add(u)\n                if len(cur[p]) >= 3:\n                    cnt3.add(p)\n                elif len(cur[p]) == 2 and len(G[p]) == 3:\n                    cnt2.add(p)\n        while cnt2:\n            u = cnt2.pop()\n            (leaf1, leaf2) = (cur[u].pop(), cur[u].pop())\n            G[u].remove(leaf1)\n            G[u].remove(leaf2)\n            leaf3 = G[u].pop()\n            ans.append((u, leaf1, leaf2, leaf3))\n            (u, leaf3) = (leaf3, u)\n            G[u].remove(leaf3)\n            if len(G[u]) == 1:\n                p = G[u].pop()\n                cnt2.discard(p)\n                cnt3.discard(p)\n                cur[p].add(u)\n                if len(cur[p]) >= 3:\n                    cnt3.add(p)\n                elif len(cur[p]) == 2 and len(G[p]) == 3:\n                    cnt2.add(p)\n    if len(ans) * 3 == N - 1:\n        print('YES')\n        for triple in ans:\n            print(*triple)\n    else:\n        print('NO')", "for t in range(int(input())):\n    N = int(input())\n    G = [set() for i in range(N + 1)]\n    for i in range(N - 1):\n        (u, v) = map(int, input().split())\n        G[u].add(v)\n        G[v].add(u)\n    leaves = [u for u in range(1, N + 1) if len(G[u]) == 1]\n    cur = [set() for i in range(N + 1)]\n    for leaf in leaves:\n        p = G[leaf].pop()\n        cur[p].add(leaf)\n    (cnt2, cnt3) = (set(), set())\n    for u in range(1, N + 1):\n        if len(cur[u]) >= 3:\n            cnt3.add(u)\n        elif len(cur[u]) == 2 and len(G[u]) == 3:\n            cnt2.add(u)\n    ans = []\n    while cnt3 or cnt2:\n        while cnt3:\n            u = cnt3.pop()\n            (leaf1, leaf2, leaf3) = (cur[u].pop(), cur[u].pop(), cur[u].pop())\n            ans.append((u, leaf1, leaf2, leaf3))\n            G[u].remove(leaf1)\n            G[u].remove(leaf2)\n            G[u].remove(leaf3)\n            if len(cur[u]) >= 3:\n                cnt3.add(u)\n            elif len(cur[u]) == 2 and len(G[u]) == 3:\n                cnt2.add(u)\n            if len(G[u]) == 1:\n                p = G[u].pop()\n                cnt2.discard(p)\n                cnt3.discard(p)\n                cur[p].add(u)\n                if len(cur[p]) >= 3:\n                    cnt3.add(p)\n                elif len(cur[p]) == 2 and len(G[p]) == 3:\n                    cnt2.add(p)\n        while cnt2:\n            u = cnt2.pop()\n            (leaf1, leaf2) = (cur[u].pop(), cur[u].pop())\n            G[u].remove(leaf1)\n            G[u].remove(leaf2)\n            leaf3 = G[u].pop()\n            ans.append((u, leaf1, leaf2, leaf3))\n            (u, leaf3) = (leaf3, u)\n            G[u].remove(leaf3)\n            if len(G[u]) == 1:\n                p = G[u].pop()\n                cnt2.discard(p)\n                cnt3.discard(p)\n                cur[p].add(u)\n                if len(cur[p]) >= 3:\n                    cnt3.add(p)\n                elif len(cur[p]) == 2 and len(G[p]) == 3:\n                    cnt2.add(p)\n    if len(ans) * 3 == N - 1:\n        print('YES')\n        for triple in ans:\n            print(*triple)\n    else:\n        print('NO')", "for t in range(int(input())):\n    N = int(input())\n    G = [set() for i in range(N + 1)]\n    for i in range(N - 1):\n        (u, v) = map(int, input().split())\n        G[u].add(v)\n        G[v].add(u)\n    leaves = [u for u in range(1, N + 1) if len(G[u]) == 1]\n    cur = [set() for i in range(N + 1)]\n    for leaf in leaves:\n        p = G[leaf].pop()\n        cur[p].add(leaf)\n    (cnt2, cnt3) = (set(), set())\n    for u in range(1, N + 1):\n        if len(cur[u]) >= 3:\n            cnt3.add(u)\n        elif len(cur[u]) == 2 and len(G[u]) == 3:\n            cnt2.add(u)\n    ans = []\n    while cnt3 or cnt2:\n        while cnt3:\n            u = cnt3.pop()\n            (leaf1, leaf2, leaf3) = (cur[u].pop(), cur[u].pop(), cur[u].pop())\n            ans.append((u, leaf1, leaf2, leaf3))\n            G[u].remove(leaf1)\n            G[u].remove(leaf2)\n            G[u].remove(leaf3)\n            if len(cur[u]) >= 3:\n                cnt3.add(u)\n            elif len(cur[u]) == 2 and len(G[u]) == 3:\n                cnt2.add(u)\n            if len(G[u]) == 1:\n                p = G[u].pop()\n                cnt2.discard(p)\n                cnt3.discard(p)\n                cur[p].add(u)\n                if len(cur[p]) >= 3:\n                    cnt3.add(p)\n                elif len(cur[p]) == 2 and len(G[p]) == 3:\n                    cnt2.add(p)\n        while cnt2:\n            u = cnt2.pop()\n            (leaf1, leaf2) = (cur[u].pop(), cur[u].pop())\n            G[u].remove(leaf1)\n            G[u].remove(leaf2)\n            leaf3 = G[u].pop()\n            ans.append((u, leaf1, leaf2, leaf3))\n            (u, leaf3) = (leaf3, u)\n            G[u].remove(leaf3)\n            if len(G[u]) == 1:\n                p = G[u].pop()\n                cnt2.discard(p)\n                cnt3.discard(p)\n                cur[p].add(u)\n                if len(cur[p]) >= 3:\n                    cnt3.add(p)\n                elif len(cur[p]) == 2 and len(G[p]) == 3:\n                    cnt2.add(p)\n    if len(ans) * 3 == N - 1:\n        print('YES')\n        for triple in ans:\n            print(*triple)\n    else:\n        print('NO')", "for t in range(int(input())):\n    N = int(input())\n    G = [set() for i in range(N + 1)]\n    for i in range(N - 1):\n        (u, v) = map(int, input().split())\n        G[u].add(v)\n        G[v].add(u)\n    leaves = [u for u in range(1, N + 1) if len(G[u]) == 1]\n    cur = [set() for i in range(N + 1)]\n    for leaf in leaves:\n        p = G[leaf].pop()\n        cur[p].add(leaf)\n    (cnt2, cnt3) = (set(), set())\n    for u in range(1, N + 1):\n        if len(cur[u]) >= 3:\n            cnt3.add(u)\n        elif len(cur[u]) == 2 and len(G[u]) == 3:\n            cnt2.add(u)\n    ans = []\n    while cnt3 or cnt2:\n        while cnt3:\n            u = cnt3.pop()\n            (leaf1, leaf2, leaf3) = (cur[u].pop(), cur[u].pop(), cur[u].pop())\n            ans.append((u, leaf1, leaf2, leaf3))\n            G[u].remove(leaf1)\n            G[u].remove(leaf2)\n            G[u].remove(leaf3)\n            if len(cur[u]) >= 3:\n                cnt3.add(u)\n            elif len(cur[u]) == 2 and len(G[u]) == 3:\n                cnt2.add(u)\n            if len(G[u]) == 1:\n                p = G[u].pop()\n                cnt2.discard(p)\n                cnt3.discard(p)\n                cur[p].add(u)\n                if len(cur[p]) >= 3:\n                    cnt3.add(p)\n                elif len(cur[p]) == 2 and len(G[p]) == 3:\n                    cnt2.add(p)\n        while cnt2:\n            u = cnt2.pop()\n            (leaf1, leaf2) = (cur[u].pop(), cur[u].pop())\n            G[u].remove(leaf1)\n            G[u].remove(leaf2)\n            leaf3 = G[u].pop()\n            ans.append((u, leaf1, leaf2, leaf3))\n            (u, leaf3) = (leaf3, u)\n            G[u].remove(leaf3)\n            if len(G[u]) == 1:\n                p = G[u].pop()\n                cnt2.discard(p)\n                cnt3.discard(p)\n                cur[p].add(u)\n                if len(cur[p]) >= 3:\n                    cnt3.add(p)\n                elif len(cur[p]) == 2 and len(G[p]) == 3:\n                    cnt2.add(p)\n    if len(ans) * 3 == N - 1:\n        print('YES')\n        for triple in ans:\n            print(*triple)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = (u,)\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l += (v,)\n                if len(l) == 4:\n                    out.append(l)\n                    l = (u,)\n    if len(l) == 3:\n        out.append(l + (p,))\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = [u]\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                (l.append(v),)\n                if len(l) == 4:\n                    out.append(tuple(l))\n                    l = [u]\n    if len(l) == 3:\n        l.append(p)\n        out.append(tuple(l))\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = (u,)\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l += (v,)\n                if len(l) == 4:\n                    out.append(l)\n                    l = (u,)\n    if len(l) == 3:\n        out.append(l + (p,))\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = (u,)\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l += (v,)\n                if len(l) == 4:\n                    out.append(l)\n                    l = (u,)\n    if len(l) == 3:\n        out.append(l + (p,))\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = (u,)\n    k = 0\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 1:\n                return 1\n            if r == 0:\n                l += (v,)\n                k += 1\n                if k == 3:\n                    out.append(l)\n                    l = (u,)\n                    k = 0\n    if k == 2:\n        out.append(l + (p,))\n    return k\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 0:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = s = str(u)\n    k = 0\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 1:\n                return 1\n            if r == 0:\n                l += format(v, ' ')\n                k += 1\n                if k == 3:\n                    out.append(l)\n                    (l, k) = (s, 0)\n    if k == 2:\n        out.append(l + format(p, ' '))\n    return k\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 0:\n        print('YES')\n        print('\\n'.join(out))\n    else:\n        print('NO')", "def dfs(u, p):\n    l = s = str(u)\n    k = 0\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 1:\n                return 1\n            if r == 0:\n                l += format(v, ' ')\n                k += 1\n                if k == 3:\n                    out.append(l)\n                    (l, k) = (s, 0)\n    if k == 2:\n        out.append(l + format(p, ' '))\n    return k\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 0:\n        print('YES')\n        for l in out:\n            print(l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = (u,)\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l += (v,)\n                if len(l) == 4:\n                    out.append(l)\n                    l = (u,)\n    if len(l) == 3:\n        out.append(l + (p,))\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = (u,)\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l += (v,)\n                if len(l) == 4:\n                    out.append(l)\n                    l = (u,)\n    if len(l) == 3:\n        out.append(l + (p,))\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = [u]\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l += [v]\n                if len(l) == 4:\n                    out.append(l)\n                    l = [u]\n    if len(l) == 3:\n        out.append(l + [p])\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = (u,)\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l += (v,)\n                if len(l) == 4:\n                    out.append(l)\n                    l = (u,)\n    if len(l) == 3:\n        out.append(l + (p,))\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = [u]\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l.append(v)\n                if len(l) == 4:\n                    out.append(l)\n                    l = [u]\n    if len(l) == 3:\n        out.append(l + [p])\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = [u]\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l.append(v)\n                if len(l) == 4:\n                    out.append(l)\n                    l = [u]\n    if len(l) == 3:\n        l.append(p)\n        out.append(l)\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = [u]\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 2:\n                return 2\n            if r == 1:\n                l.append(v)\n                if len(l) == 4:\n                    out.append(l)\n                    l = [u]\n    if len(l) == 3:\n        out.append(l + [p])\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 1:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')", "def dfs(u, p):\n    l = []\n    for v in g[u]:\n        if v != p:\n            r = dfs(v, u)\n            if r == 1:\n                return 1\n            if r == 0:\n                l.append(v)\n                if len(l) == 3:\n                    out.append([u] + l)\n                    l = []\n    if len(l) == 2:\n        out.append([u] + l + [p])\n    return len(l)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    g = [[] for _ in range(n + 1)]\n    for _ in range(n - 1):\n        (u, v) = map(int, input().split())\n        g[u].append(v)\n        g[v].append(u)\n    out = []\n    if dfs(1, 0) == 0:\n        print('YES')\n        for l in out:\n            print(*l)\n    else:\n        print('NO')"]