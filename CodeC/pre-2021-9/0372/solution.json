["n = int(input())\nwhile n != 0:\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a = int(a / 2)\n        else:\n            b = int(b / 2)\n        c += 1\n    print(c)\n    n -= 1", "t = int(input())\nwhile t > 0:\n    (p, q) = map(int, input().split())\n    c = 0\n    while p != q:\n        if p > q:\n            p = p // 2\n        else:\n            q = q // 2\n        c += 1\n    print(c)\n    t -= 1", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n        else:\n            b = b // 2\n        c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n        else:\n            b = b // 2\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    c = 0\n    while i != j:\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n        c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n        else:\n            b = b // 2\n        c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n        else:\n            b = b // 2\n        c += 1\n    print(c)", "def shortestlenght(n):\n    c = 0\n    i = 1\n    while i:\n        if n[-i] == n[-(i + 1)]:\n            break\n        else:\n            c += 1\n            i += 1\n    return c\nfor _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    pathi = []\n    while i or j:\n        if i >= 1:\n            pathi.append(i)\n            i //= 2\n        if j >= 1:\n            pathi.append(j)\n            j //= 2\n    pathi.sort()\n    dis = shortestlenght(pathi)\n    print(dis)", "for _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    count = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        count += 1\n    print(count)", "for _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    count = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        count += 1\n    print(count)", "n = int(input())\nfor i in range(n):\n    (i, j) = list(map(int, input().split()))\n    maxi = max(i, j)\n    mini = min(i, j)\n    count = 0\n    while True:\n        if maxi == mini:\n            break\n        else:\n            maxi = maxi // 2\n            count += 1\n            if maxi != max(maxi, mini):\n                (maxi, mini) = (mini, maxi)\n    print(count)", "import datetime as dt\nn = int(input())\nfor i in range(n):\n    pos = [int(j) for j in input().split(' ')]\n    step = 0\n    while True:\n        if pos[0] == pos[1]:\n            print(step)\n            break\n        elif pos[0] > pos[1]:\n            pos[0] = pos[0] // 2\n        else:\n            pos[1] = pos[1] // 2\n        step += 1", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n        else:\n            b = b // 2\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    l1 = []\n    l2 = []\n    l1.append(n1)\n    l2.append(n2)\n    while n1 >= 1:\n        n1 //= 2\n        if n1 < 1:\n            break\n        l1.append(n1)\n    while n2 >= 1:\n        n2 //= 2\n        if n2 < 1:\n            break\n        l2.append(n2)\n    s1 = set(l1)\n    s2 = set(l2)\n    print(len(s1.union(s2) - s1.intersection(s2)))", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    l1 = []\n    l2 = []\n    l1.append(n1)\n    l2.append(n2)\n    while n1 >= 1:\n        n1 //= 2\n        if n1 < 1:\n            break\n        l1.append(n1)\n    while n2 >= 1:\n        n2 //= 2\n        if n2 < 1:\n            break\n        l2.append(n2)\n    s1 = set(l1)\n    s2 = set(l2)\n    print(len(s1.union(s2) - s1.intersection(s2)))", "T = int(input())\nfor l in range(T):\n    (i, j) = map(int, input().split(' '))\n    (x, y) = (bin(i)[2:], bin(j)[2:])\n    s = 0\n    if len(x) > len(y):\n        for k in range(len(x) - len(y)):\n            i = i // 2\n            s += 1\n    elif len(y) > len(x):\n        for k in range(len(y) - len(x)):\n            j = j // 2\n            s += 1\n    while i != j:\n        i = i // 2\n        j = j // 2\n        s += 2\n    print(s)", "x = int(input())\nt = []\nfor nnb in range(0, x):\n    lp = str(input())\n    yyr = []\n    lp = lp.split(' ')\n    for vvc in lp:\n        yyr.append(int(vvc))\n    t.append(yyr)\nfor r in t:\n    a = r[0]\n    b = r[1]\n    pat = 0\n    k = 0\n    while 2 ** k <= a:\n        k += 1\n    k -= 1\n    bl = 0\n    while 2 ** bl <= b:\n        bl += 1\n    bl -= 1\n    lprt = a\n    temp = b\n    if k != bl:\n        lprt = None\n        if a > b:\n            lprt = a\n            temp = b\n        elif b > a:\n            lprt = b\n            temp = a\n        df = None\n        ck = None\n        if k > bl:\n            df = k\n            ck = bl\n        elif bl > k:\n            df = bl\n            ck = k\n        while df != ck:\n            if lprt % 2 == 0:\n                lprt = lprt // 2\n            else:\n                lprt = (lprt - 1) // 2\n            df -= 1\n            pat += 1\n    indi = 0\n    if temp == lprt:\n        indi = 1\n    while indi == 0:\n        if temp % 2 == 0 and temp != 1:\n            temp = temp // 2\n            pat += 1\n        elif temp % 2 != 0 and temp != 1:\n            temp = (temp - 1) // 2\n            pat += 1\n        if lprt % 2 == 0 and lprt != 1:\n            lprt = lprt // 2\n            pat += 1\n        elif lprt % 2 != 0 and lprt != 1:\n            lprt = (lprt - 1) // 2\n            pat += 1\n        if lprt == temp:\n            break\n    print(pat)", "from math import log2\n\ndef solve(a, b, la, lb):\n    if a == b:\n        return 0\n    if la > lb:\n        a //= 2\n        la -= 1\n        return solve(a, b, la, lb) + 1\n    if la < lb:\n        b //= 2\n        lb -= 1\n        return solve(a, b, la, lb) + 1\n    a //= 2\n    b //= 2\n    la -= 1\n    lb -= 1\n    return solve(a, b, la, lb) + 2\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    (la, lb) = (int(log2(a)), int(log2(b)))\n    print(solve(a, b, la, lb))", "t = int(input())\nfor x in range(t):\n    (i, j) = map(int, input().split())\n    c = 0\n    while i != j:\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n        c += 1\n    print(c)", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    count = 0\n    while n1 != n2:\n        if n1 > n2:\n            n1 //= 2\n        else:\n            n2 //= 2\n        count += 1\n    print(count)", "for tc in range(int(input())):\n    (a, b) = map(int, input().split())\n    (s1, s2) = ([], [])\n    while a:\n        s1.append(a)\n        a = a // 2\n    while b:\n        s2.append(b)\n        b = b // 2\n    s1 = set(s1)\n    s2 = set(s2)\n    ans = len(s1.union(s2)) - len(s1.intersection(s2))\n    print(ans)", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    count = 0\n    while n1 != n2:\n        if n1 > n2:\n            n1 //= 2\n        else:\n            n2 //= 2\n        count += 1\n    print(count)", "t = int(input())\nwhile t > 0:\n    (x, y) = list(map(int, input().split(' ')))\n    s1 = {x}\n    s2 = {y}\n    while x >= 1:\n        x //= 2\n        if x < 1:\n            break\n        s1.add(x)\n    while y >= 1:\n        y //= 2\n        if y < 1:\n            break\n        s2.add(y)\n    print(len(s1.union(s2) - s1.intersection(s2)))\n    t -= 1", "for i in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    while a != b:\n        if a > b:\n            a //= 2\n        else:\n            b //= 2\n        count += 1\n    print(count)", "import math\n\ndef lca(i, j):\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n    return i\n\ndef distance(i, j):\n    lca_node = lca(i, j)\n    depth_i = int(math.log2(i))\n    depth_j = int(math.log2(j))\n    depth_lca = int(math.log2(lca_node))\n    return depth_i + depth_j - 2 * depth_lca\nn = int(input())\nfor i in range(n):\n    (i, j) = map(int, input().split())\n    print(distance(i, j))", "import math\n\ndef lca(i, j):\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n    return i\n\ndef distance(i, j):\n    lca_node = lca(i, j)\n    depth_i = int(math.log2(i))\n    depth_j = int(math.log2(j))\n    depth_lca = int(math.log2(lca_node))\n    return depth_i + depth_j - 2 * depth_lca\nn = int(input())\nfor i in range(n):\n    (i, j) = map(int, input().split())\n    print(distance(i, j))", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    count = 0\n    while n1 != n2:\n        if n1 > n2:\n            n1 //= 2\n        else:\n            n2 //= 2\n        count += 1\n    print(count)", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    l1 = []\n    l2 = []\n    l1.append(n1)\n    l2.append(n2)\n    while n1 >= 1:\n        n1 //= 2\n        if n1 < 1:\n            break\n        l1.append(n1)\n    while n2 >= 1:\n        n2 //= 2\n        if n2 < 1:\n            break\n        l2.append(n2)\n    s1 = set(l1)\n    s2 = set(l2)\n    print(len(s1.union(s2) - s1.intersection(s2)))", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    l1 = []\n    l2 = []\n    l1.append(n1)\n    l2.append(n2)\n    while n1 >= 1:\n        n1 //= 2\n        if n1 < 1:\n            break\n        l1.append(n1)\n    while n2 >= 1:\n        n2 //= 2\n        if n2 < 1:\n            break\n        l2.append(n2)\n    s1 = set(l1)\n    s2 = set(l2)\n    print(len(s1.union(s2) - s1.intersection(s2)))", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    if n2 == n1 * 2 or n2 == n1 * 2 + 1 or n1 == n2 * 2 or (n1 == n2 * 2 + 1):\n        print(1)\n        continue\n    l1 = []\n    l2 = []\n    l1.append(n1)\n    l2.append(n2)\n    while n1 >= 1:\n        n1 //= 2\n        if n1 < 1:\n            break\n        l1.append(n1)\n    while n2 >= 1:\n        n2 //= 2\n        if n2 < 1:\n            break\n        l2.append(n2)\n    s1 = set(l1)\n    s2 = set(l2)\n    print(len(s1.union(s2) - s1.intersection(s2)))", "for _ in range(int(input())):\n    (n1, n2) = map(int, input().split())\n    l1 = []\n    l2 = []\n    l1.append(n1)\n    l2.append(n2)\n    while n1 >= 1:\n        n1 //= 2\n        if n1 < 1:\n            break\n        l1.append(n1)\n    while n2 >= 1:\n        n2 //= 2\n        if n2 < 1:\n            break\n        l2.append(n2)\n    s1 = set(l1)\n    s2 = set(l2)\n    print(len(s1.union(s2) - s1.intersection(s2)))", "for _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    c = 0\n    while i != j:\n        if i < j:\n            j = j // 2\n        else:\n            i = i // 2\n        c += 1\n    print(c)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    count = 0\n    while n != m:\n        if n > m:\n            n = int(n / 2)\n        else:\n            m = int(m / 2)\n        count += 1\n    print(count)\n    t -= 1", "import math\n\ndef get_path(node):\n    path = []\n    while node > 0:\n        path.append(node)\n        node //= 2\n    return path[::-1]\n\ndef lca(i, j):\n    path_i = get_path(i)\n    path_j = get_path(j)\n    min_len = min(len(path_i), len(path_j))\n    lca = 1\n    for k in range(min_len):\n        if path_i[k] == path_j[k]:\n            lca = path_i[k]\n        else:\n            break\n    return lca\n\ndef shortest_path(i, j):\n    lca_node = lca(i, j)\n    path_i = get_path(i)\n    path_j = get_path(j)\n    return len(path_i) + len(path_j) - 2 * len(get_path(lca_node))\nn = int(input())\nfor _ in range(n):\n    (i, j) = map(int, input().split())\n    print(shortest_path(i, j))", "for i in range(int(input())):\n    (i, j) = map(int, input().split())\n    (si, sj) = (bin(i).replace('0b', ''), bin(j).replace('0b', ''))\n    y = min(len(si), len(sj))\n    for i in range(y):\n        if si[i] != sj[i]:\n            k = i\n            break\n    else:\n        k = y\n    print(len(si) + len(sj) - 2 * k)", "n = int(input())\nfor i in range(n):\n    nodes = [int(x) for x in input().split()]\n    length = 0\n    while nodes[0] != nodes[1]:\n        if nodes[0] > nodes[1]:\n            nodes[0] = nodes[0] // 2\n        else:\n            nodes[1] = nodes[1] // 2\n        length += 1\n    print(length)", "for _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    ans = 0\n    while i != j:\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n        ans = ans + 1\n    print(ans)", "for _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    ans = 0\n    while i != j:\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n        ans = ans + 1\n    print(ans)", "for t in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n            c += 1\n        elif b > a:\n            b = b // 2\n            c += 1\n    print(c)", "def get_depth(node):\n    d = 0\n    while node != 1:\n        node //= 2\n        d += 1\n    return d\n\ndef spbt(i, j):\n    gi = get_depth(i)\n    gj = get_depth(j)\n    dist = 0\n    while i != j:\n        if gi > gj:\n            i //= 2\n            gi -= 1\n        else:\n            j //= 2\n            gj -= 1\n        dist += 1\n    return dist\nt = int(input())\nfor _ in range(t):\n    (i, j) = map(int, input().split())\n    print(spbt(i, j))", "def get_depth(node):\n    depth = 0\n    while node > 1:\n        node = node // 2\n        depth += 1\n    return depth\n\ndef find_lca(i, j):\n    if i == j:\n        return i\n    i_depth = get_depth(i)\n    j_depth = get_depth(j)\n    if i_depth < j_depth:\n        j = j // 2 ** (j_depth - i_depth)\n    elif i_depth > j_depth:\n        i = i // 2 ** (i_depth - j_depth)\n    while i != j:\n        i = i // 2\n        j = j // 2\n    return i\n\ndef main():\n    n = int(input().strip())\n    for _ in range(n):\n        (i, j) = map(int, input().strip().split())\n        lca = find_lca(i, j)\n        print(get_depth(i) + get_depth(j) - 2 * get_depth(lca))\nmain()", "n = int(input())\nfor i in range(n):\n    (x, y) = map(int, input().split())\n    count = 0\n    while x != y:\n        if x > y:\n            x = x // 2\n            count += 1\n        else:\n            y = y // 2\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (x, y) = map(int, input().split())\n    count = 0\n    while x != y:\n        if x > y:\n            x = x // 2\n            count += 1\n        else:\n            y = y // 2\n            count += 1\n    print(count)", "for t in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n            c += 1\n        elif b > a:\n            b = b // 2\n            c += 1\n    print(c)", "def solve():\n    (a, b) = [int(x) for x in input().split()]\n    d = 0\n    while a != b:\n        if a > b:\n            a //= 2\n        else:\n            b //= 2\n        d += 1\n    print(d)\nT = int(input())\nwhile T:\n    solve()\n    T -= 1", "from math import sqrt, ceil, floor, gcd, log2\nimport sys\nfrom sys import stdin, stdout\nfrom collections import Counter, defaultdict, OrderedDict, deque\nfrom itertools import combinations, groupby\nfrom time import time\nfrom heapq import heappop, heappush, heapify\nt = int(input())\nfor _ in range(t):\n    (l, r) = map(int, input().split())\n    cnt = 0\n    while l != r:\n        if l > r:\n            l = l // 2\n        else:\n            r = r // 2\n        cnt += 1\n    print(cnt)", "z = int(input())\nwhile z:\n    cout = 0\n    (x, y) = map(int, input().split())\n    while x != y:\n        if x > y:\n            x = x // 2\n            cout = cout + 1\n        if x < y:\n            y = y // 2\n            cout = cout + 1\n    print(cout)\n    z -= 1", "for _ in range(int(input())):\n    count = 0\n    (x, y) = map(int, input().split())\n    while x != y:\n        if x > y:\n            x = x // 2\n            count = count + 1\n        if x < y:\n            y = y // 2\n            count = count + 1\n    print(count)", "for _ in range(int(input())):\n    count = 0\n    (x, y) = map(int, input().split())\n    while x != y:\n        if x > y:\n            x = x // 2\n            count = count + 1\n        if x < y:\n            y = y // 2\n            count = count + 1\n    print(count)", "for _ in range(int(input())):\n    count = 0\n    (x, y) = map(int, input().split())\n    while x != y:\n        if x > y:\n            x = x // 2\n            count = count + 1\n        if x < y:\n            y = y // 2\n            count = count + 1\n    print(count)", "for _ in range(int(input())):\n    count = 0\n    (x, y) = map(int, input().split())\n    while x != y:\n        if x > y:\n            x = x // 2\n            count = count + 1\n        if x < y:\n            y = y // 2\n            count = count + 1\n    print(count)", "x = int(input())\nfor _ in range(x):\n    count = 0\n    (x, y) = map(int, input().split())\n    while x != y:\n        if x > y:\n            x = x // 2\n            count = count + 1\n        if x < y:\n            y = y // 2\n            count = count + 1\n    print(count)", "t = int(input())\nwhile t:\n    c = 0\n    (i, j) = map(int, input().split())\n    while True:\n        if i > j:\n            i >>= 1\n            c += 1\n        elif i < j:\n            j >>= 1\n            c += 1\n        else:\n            break\n    print(c)\n    t -= 1", "def solve(n, m):\n    cnti = 0\n    cntj = 0\n    while True:\n        if n > m:\n            while n > 1 and n > m:\n                n = n >> 1\n                cnti += 1\n        elif m > n:\n            while m > 1 and m > n:\n                m = m >> 1\n                cntj += 1\n        else:\n            return cntj + cnti\nT = int(input())\nfor i in range(T):\n    (n, m) = map(int, input().split())\n    print(solve(n, m))", "def fun(i, j, count):\n    if i > j:\n        return fun(i // 2, j, count + 1)\n    elif i < j:\n        return fun(i, j // 2, count + 1)\n    else:\n        return count\nt = int(input())\nfor _ in range(t):\n    (i, j) = map(int, input().split())\n    d = fun(i, j, 0)\n    print(d)", "def fun(i, j, count):\n    if i > j:\n        return fun(i // 2, j, count + 1)\n    elif i < j:\n        return fun(i, j // 2, count + 1)\n    else:\n        return count\nt = int(input())\nfor _ in range(t):\n    (i, j) = map(int, input().split())\n    d = fun(i, j, 0)\n    print(d)", "t = int(input(''))\nfor _ in range(t):\n    (i, j) = map(int, input('').split())\n\n    def counting(i, j, count):\n        if i > j:\n            count += 1\n            return counting(i // 2, j, count)\n        elif i < j:\n            count += 1\n            return counting(i, j // 2, count)\n        elif i == j:\n            return count\n    print(counting(i, j, 0))", "t = int(input(''))\nfor _ in range(t):\n    (i, j) = map(int, input('').split())\n\n    def counting(i, j, count):\n        if i > j:\n            count += 1\n            return counting(i // 2, j, count)\n        elif i < j:\n            count += 1\n            return counting(i, j // 2, count)\n        elif i == j:\n            return count\n    print(counting(i, j, 0))", "t = int(input(''))\nfor _ in range(t):\n    (i, j) = map(int, input('').split())\n\n    def counting(i, j, count):\n        if i > j:\n            count += 1\n            return counting(i // 2, j, count)\n        elif i < j:\n            count += 1\n            return counting(i, j // 2, count)\n        elif i == j:\n            return count\n    print(counting(i, j, 0))", "for _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    c = 0\n    while i != j:\n        if i < j:\n            j //= 2\n            c += 1\n        else:\n            i //= 2\n            c += 1\n    print(c)", "def shortestlenght(n):\n    c = 0\n    i = 1\n    while i:\n        if n[-i] == n[-(i + 1)]:\n            break\n        else:\n            c += 1\n            i += 1\n    return c\nfor _ in range(int(input())):\n    (i, j) = map(int, input().split())\n    pathi = []\n    while i or j:\n        if i >= 1:\n            pathi.append(i)\n            i //= 2\n        if j >= 1:\n            pathi.append(j)\n            j //= 2\n    pathi.sort()\n    dis = shortestlenght(pathi)\n    print(dis)", "for x in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n        else:\n            b = b // 2\n        count += 1\n    print(count)", "for x in range(int(input())):\n    (a, b) = map(int, input().split())\n    count = 0\n    while a != b:\n        if a > b:\n            a = a // 2\n        else:\n            b = b // 2\n        count += 1\n    print(count)", "import math\nt = int(input())\nfor i in range(t):\n    (i, j) = map(int, input().split())\n    ct = 0\n    while i != j:\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n        ct += 1\n    print(ct)", "import math\nt = int(input())\nfor i in range(t):\n    (i, j) = map(int, input().split())\n    ct = 0\n    while i != j:\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n        ct += 1\n    print(ct)", "import math\nt = int(input())\nfor i in range(t):\n    (i, j) = map(int, input().split())\n    ct = 0\n    while i != j:\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n        ct += 1\n    print(ct)", "t = int(input())\nfor i in range(t):\n    (i, j) = list(map(int, input().split()))\n    count = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        count += 1\n    print(count)", "t = int(input())\nfor i in range(t):\n    (i, j) = list(map(int, input().split()))\n    count = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        count += 1\n    print(count)", "n = int(input())\nfor i in range(n):\n    (i, j) = list(map(int, input().split()))\n    maxi = max(i, j)\n    mini = min(i, j)\n    count = 0\n    while True:\n        if maxi == mini:\n            break\n        else:\n            maxi = maxi // 2\n            count = count + 1\n            if maxi != max(maxi, mini):\n                (maxi, mini) = (mini, maxi)\n    print(count)", "n = int(input())\nfor i in range(n):\n    (i, j) = list(map(int, input().split()))\n    maxi = max(i, j)\n    mini = min(i, j)\n    count = 0\n    while True:\n        if maxi == mini:\n            break\n        else:\n            maxi = maxi // 2\n            count += 1\n            if maxi != max(maxi, mini):\n                (maxi, mini) = (mini, maxi)\n    print(count)", "n = int(input())\nfor i in range(n):\n    (i, j) = list(map(int, input().split()))\n    maxi = max(i, j)\n    mini = min(i, j)\n    count = 0\n    while True:\n        if maxi == mini:\n            break\n        else:\n            maxi = maxi // 2\n            count += 1\n            if maxi != max(maxi, mini):\n                (maxi, mini) = (mini, maxi)\n    print(count)", "n = int(input())\nfor i in range(n):\n    (i, j) = list(map(int, input().split()))\n    maxi = max(i, j)\n    mini = min(i, j)\n    count = 0\n    while True:\n        if maxi == mini:\n            break\n        else:\n            maxi = maxi // 2\n            count += 1\n            if maxi != max(maxi, mini):\n                (maxi, mini) = (mini, maxi)\n    print(count)", "for i in range(int(input())):\n    (i, j) = map(int, input().split())\n    distance = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        distance += 1\n    print(distance)", "for _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        c += 1\n        if a > b:\n            a //= 2\n        else:\n            b //= 2\n    print(c)", "t = int(input())\nfor _ in range(t):\n    (a, b) = map(int, input().split())\n    count = 0\n    while a != b:\n        if a >= b:\n            a = a // 2\n            count += 1\n        else:\n            b //= 2\n            count += 1\n    print(count)", "n = int(input())\n\ndef get_min_len(i, j):\n    if i == j:\n        return 0\n    i_ancestors = {i: 0}\n    j_ancestors = {j: 0}\n    (count_i, count_j) = (0, 0)\n    while True:\n        if j != 1:\n            j = j // 2\n            count_j += 1\n            j_ancestors[j] = count_j\n        if i != 1:\n            i = i // 2\n            count_i += 1\n            i_ancestors[i] = count_i\n        if i in j_ancestors:\n            return j_ancestors[i] + i_ancestors[i]\n        if j in i_ancestors:\n            return j_ancestors[j] + i_ancestors[j]\nwhile n > 0:\n    (i, j) = [int(x) for x in str(input()).split(' ')]\n    n -= 1\n    print(get_min_len(i, j))", "for i in range(int(input())):\n    (i, j) = map(int, input().split(' '))\n    edge = 0\n    while i != j:\n        edge += 1\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n    print(edge)", "for i in range(int(input())):\n    (i, j) = map(int, input().split(' '))\n    edge = 0\n    while i != j:\n        edge += 1\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n    print(edge)", "for i in range(int(input())):\n    (i, j) = map(int, input().split(' '))\n    edge = 0\n    while i != j:\n        edge += 1\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n    print(edge)", "def solve(a, b):\n    (l, m) = [[], []]\n    while a * b > 1:\n        if a > 1:\n            l.append(a)\n            a //= 2\n        if b > 1:\n            m.append(b)\n            b //= 2\n    l = set(l)\n    m = set(m)\n    n = len(l.union(m))\n    n2 = len(l.intersection(m))\n    print(n - n2)\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    solve(a, b)", "for i in range(int(input())):\n    (i, j) = map(int, input().split(' '))\n    edge = 0\n    while i != j:\n        edge += 1\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n    print(edge)", "for i in range(int(input())):\n    (i, j) = map(int, input().split(' '))\n    edge = 0\n    while i != j:\n        edge += 1\n        if i > j:\n            i = i // 2\n        else:\n            j = j // 2\n    print(edge)", "for _ in range(int(input())):\n    (i, j) = map(int, input().split(' '))\n    edge = 0\n    while i != j:\n        edge += 1\n        if i > j and i > 1:\n            i = i // 2\n        elif i < j and j > 1:\n            j = j // 2\n    print(edge)", "n = int(input())\nfor x in range(n):\n    (i, j) = map(int, input().split())\n    list1 = []\n    while i != 1:\n        list1.insert(0, i)\n        i = i // 2 if i % 2 == 0 else (i - 1) // 2\n    list1.insert(0, 1)\n    list2 = []\n    while j != 1:\n        list2.insert(0, j)\n        j = j // 2 if j % 2 == 0 else (j - 1) // 2\n    list2.insert(0, 1)\n    for i in range(min(len(list1), len(list2))):\n        if list1[i] != list2[i]:\n            i -= 1\n            break\n    dist = len(list1) - 1 - i + len(list2) - 1 - i\n    print(dist)", "for a in range(int(input())):\n    (a, b) = map(int, input().split())\n    c = 0\n    while a != b:\n        if a > b:\n            a //= 2\n        else:\n            b //= 2\n        c += 1\n    print(c)", "for i in range(int(input())):\n    (i, j) = map(int, input().split())\n    distance = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        distance += 1\n    print(distance)", "for i in range(int(input())):\n    (i, j) = map(int, input().split())\n    distance = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        distance += 1\n    print(distance)", "t = int(input())\nfor i in range(t):\n    c = 0\n    (x, y) = map(int, input().split())\n    while x != y:\n        if x > y:\n            x //= 2\n            c += 1\n        elif y > x:\n            y //= 2\n            c += 1\n    print(c)", "t = int(input())\nfor i in range(t):\n    c = 0\n    (x, y) = map(int, input().split())\n    while x != y:\n        if x > y:\n            x //= 2\n            c += 1\n        elif y > x:\n            y //= 2\n            c += 1\n    print(c)", "def main():\n    from sys import stdin, stdout\n    from collections import Counter\n    t = int(stdin.readline())\n\n    def f(a, b, c=0):\n        while 1:\n            if a == b:\n                return c\n            elif a > b:\n                a >>= 1\n                c += 1\n            else:\n                b >>= 1\n                c += 1\n    for i in range(t):\n        (a, b) = map(int, stdin.readline().split())\n        stdout.write(str(f(a, b)) + '\\n')\nmain()", "for i in range(int(input())):\n    (i, j) = map(int, input().split())\n    distance = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        distance += 1\n    print(distance)", "for i in range(int(input())):\n    (i, j) = map(int, input().split())\n    distance = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        distance += 1\n    print(distance)", "for i in range(int(input())):\n    (i, j) = map(int, input().split())\n    distance = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        distance += 1\n    print(distance)", "for i in range(int(input())):\n    (i, j) = map(int, input().split())\n    distance = 0\n    while i != j:\n        if i > j:\n            i //= 2\n        else:\n            j //= 2\n        distance += 1\n    print(distance)", "t = int(input())\n\ndef parent(k):\n    if k == 1:\n        return 1\n    else:\n        return k // 2\nwhile t:\n    (i, j) = map(int, input().split())\n    c = 0\n    while i != j:\n        if i > j:\n            i = parent(i)\n        else:\n            j = parent(j)\n        c = c + 1\n    print(c)\n    t = t - 1", "t = int(input())\n\ndef parent(k):\n    if k == 1:\n        return 1\n    else:\n        return k // 2\nwhile t:\n    (i, j) = map(int, input().split())\n    c = 0\n    while i != j:\n        if i > j:\n            i = parent(i)\n        else:\n            j = parent(j)\n        c = c + 1\n    print(c)\n    t = t - 1", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    a = max(a, b) + min(a, b)\n    b = min(b, a - b)\n    a = a - b\n    sa = bin(a).replace('0b', '')\n    sb = bin(b).replace('0b', '')\n    lca = 0\n    for i in range(len(sb)):\n        if sa[i] == sb[i]:\n            lca += 1\n        else:\n            break\n    print(len(sa) + len(sb) - 2 * lca)", "for _ in range(int(input())):\n    (A, B) = map(int, input().split())\n    binA = bin(A)[2:]\n    binB = bin(B)[2:]\n    i = 0\n    k = min(len(binA), len(binB))\n    while i < k and binA[i] == binB[i]:\n        i += 1\n    print(len(binB) + len(binA) - 2 * i)", "def count_steps(start, end):\n    binary_start = bin(start)[2:]\n    binary_end = bin(end)[2:]\n    steps = 0\n    while binary_end.find(binary_start):\n        binary_start = binary_start[:-1]\n        steps += 1\n    while not binary_start == binary_end:\n        binary_end = binary_end[:-1]\n        steps += 1\n    print(steps)\n\ndef main():\n    N = int(input())\n    for n in range(N):\n        (i, j) = map(int, input().split())\n        if j > i:\n            (i, j) = (j, i)\n        count_steps(i, j)\nmain()", "t = int(input())\nfor i in range(t):\n    (a, b) = map(int, input().split())\n    a = max(a, b) + min(a, b)\n    b = min(b, a - b)\n    a = a - b\n    sa = bin(a).replace('0b', '')\n    sb = bin(b).replace('0b', '')\n    lca = 0\n    for i in range(len(sb)):\n        if sa[i] == sb[i]:\n            lca += 1\n        else:\n            break\n    print(len(sa) + len(sb) - 2 * lca)"]