["import math\n\ndef prime_factors(n):\n    factors = {}\n    while n % 2 == 0:\n        factors[2] = factors.get(2, 0) + 1\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n //= i\n    if n > 2:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    factors = {}\n    for num in a:\n        num_factors = prime_factors(num)\n        for (prime, exponent) in num_factors.items():\n            factors[prime] = factors.get(prime, 0) + exponent\n    total_factors = 1\n    for exponent in factors.values():\n        total_factors *= exponent + 1\n    print(total_factors)", "import math\n\ndef prime_factors(n):\n    factors = {}\n    while n % 2 == 0:\n        factors[2] = factors.get(2, 0) + 1\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n //= i\n    if n > 2:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    factors = {}\n    for num in a:\n        num_factors = prime_factors(num)\n        for (prime, exponent) in num_factors.items():\n            factors[prime] = factors.get(prime, 0) + exponent\n    total_factors = 1\n    for exponent in factors.values():\n        total_factors *= exponent + 1\n    print(total_factors)", "import math\n\ndef prime_factors(n):\n    factors = {}\n    while n % 2 == 0:\n        factors[2] = factors.get(2, 0) + 1\n        n //= 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors[i] = factors.get(i, 0) + 1\n            n //= i\n    if n > 2:\n        factors[n] = factors.get(n, 0) + 1\n    return factors\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    factors = {}\n    for num in a:\n        num_factors = prime_factors(num)\n        for (prime, exponent) in num_factors.items():\n            factors[prime] = factors.get(prime, 0) + exponent\n    total_factors = 1\n    for exponent in factors.values():\n        total_factors *= exponent + 1\n    print(total_factors)", "from collections import defaultdict\n\ndef get_primes():\n    n = 10 ** 6\n    is_prime = [True] * (n + 1)\n    res = []\n    i = 2\n    while i <= n:\n        if is_prime[i]:\n            j = 2 * i\n            while j <= n:\n                is_prime[j] = False\n                j += i\n            res.append(i)\n        i += 1\n    return res\nt = int(input())\nprimes = get_primes()\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = defaultdict(int)\n    for ele in arr:\n        for p in primes:\n            while ele % p == 0 and ele != 1:\n                ele //= p\n                d[p] += 1\n            if ele == 1:\n                break\n    res = 1\n    for ele in d:\n        if ele == 1:\n            continue\n        res *= d[ele] + 1\n    print(res)", "from collections import defaultdict\n\ndef get_primes():\n    n = 10 ** 6\n    is_prime = [True] * (n + 1)\n    res = []\n    i = 2\n    while i <= n:\n        if is_prime[i]:\n            j = 2 * i\n            while j <= n:\n                is_prime[j] = False\n                j += i\n            res.append(i)\n        i += 1\n    return res\nt = int(input())\nprimes = get_primes()\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = defaultdict(int)\n    for ele in arr:\n        for p in primes:\n            while ele % p == 0 and ele != 1:\n                ele //= p\n                d[p] += 1\n            if ele == 1:\n                break\n    res = 1\n    for ele in d:\n        if ele == 1:\n            continue\n        res *= d[ele] + 1\n    print(res)", "from collections import defaultdict\n\ndef get_primes():\n    n = 10 ** 6\n    is_prime = [True] * (n + 1)\n    res = []\n    i = 2\n    while i <= n:\n        if is_prime[i]:\n            j = 2 * i\n            while j <= n:\n                is_prime[j] = False\n                j += i\n            res.append(i)\n        i += 1\n    return res\nt = int(input())\nprimes = get_primes()\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = defaultdict(int)\n    for ele in arr:\n        for p in primes:\n            while ele % p == 0 and ele != 1:\n                ele //= p\n                d[p] += 1\n            if ele == 1:\n                break\n    res = 1\n    for ele in d:\n        if ele == 1:\n            continue\n        res *= d[ele] + 1\n    print(res)", "from math import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\nfrom re import *\nfrom datetime import *\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = Counter(l)\n    d = {}\n    for i in c:\n        m = i\n        for j in primes:\n            while m % j == 0:\n                d[j] = d.get(j, 0) + c[i]\n                m //= j\n            if m == 1:\n                break\n        else:\n            d[m] = d.get(m, 0) + c[i]\n    prod = 1\n    for i in d:\n        prod *= d[i] + 1\n    print(prod)", "from collections import defaultdict\n\ndef get_primes():\n    n = 10 ** 6\n    is_prime = [True] * (n + 1)\n    res = []\n    i = 2\n    while i <= n:\n        if is_prime[i]:\n            j = 2 * i\n            while j <= n:\n                is_prime[j] = False\n                j += i\n            res.append(i)\n        i += 1\n    return res\nt = int(input())\nprimes = get_primes()\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = defaultdict(int)\n    for ele in arr:\n        for p in primes:\n            while ele % p == 0 and ele != 1:\n                ele //= p\n                d[p] += 1\n            if ele == 1:\n                break\n    res = 1\n    for ele in d:\n        if ele == 1:\n            continue\n        res *= d[ele] + 1\n    print(res)", "import math\nl = [1] * 1001\nfor i in range(2, int(math.sqrt(1001)) + 1):\n    if l[i]:\n        for j in range(2 * i, 1001, i):\n            l[j] = 0\nl[0] = l[1] = 0\nl = list((x for x in range(len(l)) if l[x] == 1))\nl1 = set(l)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {x: 0 for x in l}\n    for i in a:\n        m = i\n        for j in l:\n            while m % j == 0:\n                m //= j\n                d[j] += 1\n            if m == 1:\n                break\n        else:\n            if m in d:\n                d[m] += 1\n            else:\n                d[m] = 1\n    s = 1\n    for i in d:\n        s *= d[i] + 1\n    print(s)", "import math\nl = [1] * 1000001\nfor i in range(2, int(math.sqrt(1000001)) + 1):\n    if l[i]:\n        for j in range(2 * i, 1000001, i):\n            l[j] = 0\nl[0] = l[1] = 0\nl = list((x for x in range(len(l)) if l[x] == 1))\nl1 = set(l)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {x: 0 for x in l}\n    for i in a:\n        if i in l1:\n            d[i] += 1\n        else:\n            m = i\n            for j in l:\n                while m % j == 0:\n                    m //= j\n                    d[j] += 1\n                if m == 1:\n                    break\n    s = 1\n    for i in d:\n        s *= d[i] + 1\n    print(s)", "from collections import defaultdict\n\ndef get_primes():\n    n = 10 ** 6\n    is_prime = [True] * (n + 1)\n    res = []\n    i = 2\n    while i <= n:\n        if is_prime[i]:\n            j = 2 * i\n            while j <= n:\n                is_prime[j] = False\n                j += i\n            res.append(i)\n        i += 1\n    return res\nt = int(input())\nprimes = get_primes()\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = defaultdict(int)\n    for ele in arr:\n        for p in primes:\n            while ele % p == 0 and ele != 1:\n                ele //= p\n                d[p] += 1\n            if ele == 1:\n                break\n    res = 1\n    for ele in d:\n        if ele == 1:\n            continue\n        res *= d[ele] + 1\n    print(res)", "from collections import defaultdict\n\ndef add_pf(x):\n    i = 2\n    while i * i <= x:\n        while x % i == 0:\n            x //= i\n            pfs[i] += 1\n        i += 1\n    if x > 1:\n        pfs[x] += 1\nfor _ in range(int(input())):\n    n = int(input())\n    alist = map(int, input().split())\n    pfs = defaultdict(int)\n    for a in alist:\n        add_pf(a)\n    ans = 1\n    for v in pfs.values():\n        ans *= v + 1\n    print(ans)", "from math import *\nfrom collections import *\nfrom itertools import *\nfrom functools import *\nfrom re import *\nfrom datetime import *\nprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    c = Counter(l)\n    d = {}\n    for i in c:\n        m = i\n        for j in primes:\n            while m % j == 0:\n                d[j] = d.get(j, 0) + c[i]\n                m //= j\n            if m == 1:\n                break\n        else:\n            d[m] = d.get(m, 0) + c[i]\n    prod = 1\n    for i in d:\n        prod *= d[i] + 1\n    print(prod)", "from collections import defaultdict\n\ndef add_pf(x):\n    i = 2\n    while i * i <= x:\n        while x % i == 0:\n            x //= i\n            pfs[i] += 1\n        i += 1\n    if x > 1:\n        pfs[x] += 1\nfor _ in range(int(input())):\n    n = int(input())\n    alist = map(int, input().split())\n    pfs = defaultdict(int)\n    for a in alist:\n        add_pf(a)\n    ans = 1\n    for v in pfs.values():\n        ans *= v + 1\n    print(ans)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = {}\n    for i in range(n):\n        if a[i] > 3:\n            temp = 0\n            while a[i] % 2 == 0:\n                temp += 1\n                a[i] //= 2\n            if temp > 0:\n                x[2] = x.setdefault(2, 0) + temp\n                temp = 0\n            xd = int(sqrt(a[i]))\n            for j in range(3, xd + 1, 2):\n                while a[i] % j == 0:\n                    temp += 1\n                    a[i] //= j\n                if temp > 0:\n                    x[j] = x.setdefault(j, 0) + temp\n                    temp = 0\n            if a[i] > 1:\n                x[a[i]] = x.setdefault(a[i], 0) + 1\n        else:\n            x[a[i]] = x.setdefault(a[i], 0) + 1\n    ans = 1\n    for (_, v) in x.items():\n        ans *= v + 1\n    print(ans)", "Primes = []\n\ndef SieveOfEratosthenes(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    for p in range(2, n + 1):\n        if prime[p]:\n            Primes.append(p)\n\ndef ans(arr):\n    hm = {}\n    for y in Primes:\n        hm[y] = 0\n    for y in arr:\n        for j in hm.keys():\n            if y % j == 0:\n                temp = 1\n                while y % j ** temp == 0:\n                    temp += 1\n                hm[j] += temp - 1\n    count = 1\n    for y in hm.values():\n        count *= y + 1\n    return count\nSieveOfEratosthenes(10 ** 6)\ntest_cases = int(input())\nwhile test_cases != 0:\n    d = input()\n    d2 = list(map(int, input().split()))\n    print(ans(d2))\n    test_cases -= 1", "from collections import Counter\n\ndef T(N):\n    d = 2\n    A = []\n    while N > 1:\n        while N % d == 0:\n            A.append(d)\n            N /= d\n        d += 1\n        if d * d > N:\n            if N > 1:\n                A.append(N)\n            break\n    return A\na = int(input())\nfor i in range(a):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = []\n    for j in range(N):\n        for k in T(A[j]):\n            B.append(k)\n    C = Counter(B)\n    x = 1\n    for j in C.values():\n        x *= j + 1\n    print(x)", "from collections import Counter\n\ndef T(N):\n    d = 2\n    A = []\n    while N > 1:\n        while N % d == 0:\n            A.append(d)\n            N /= d\n        d += 1\n        if d * d > N:\n            if N > 1:\n                A.append(N)\n            break\n    return A\na = int(input())\nfor i in range(a):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = []\n    for j in range(N):\n        for k in T(A[j]):\n            B.append(k)\n    C = Counter(B)\n    x = 1\n    for j in C.values():\n        x *= j + 1\n    print(x)", "from collections import Counter\n\ndef T(N):\n    d = 2\n    A = []\n    while N > 1:\n        while N % d == 0:\n            A.append(d)\n            N /= d\n        d += 1\n        if d * d > N:\n            if N > 1:\n                A.append(N)\n            break\n    return A\na = int(input())\nfor i in range(a):\n    N = int(input())\n    A = list(map(int, input().split()))\n    B = []\n    for j in range(N):\n        for k in T(A[j]):\n            B.append(k)\n    C = Counter(B)\n    x = 1\n    for j in C.values():\n        x *= j + 1\n    print(x)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = {}\n    for x in l:\n        no = x\n        i = 2\n        while i * i <= no:\n            while no % i == 0:\n                count = d.get(i, 0) + 1\n                d[i] = count\n                no //= i\n            i += 1\n        if no != 1:\n            count = d.get(no, 0) + 1\n            d[no] = count\n    ans = 1\n    for i in d:\n        ans *= d[i] + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = {}\n    for x in l:\n        no = x\n        i = 2\n        while i * i <= no:\n            while no % i == 0:\n                count = d.get(i, 0) + 1\n                d[i] = count\n                no //= i\n            i += 1\n        if no != 1:\n            count = d.get(no, 0) + 1\n            d[no] = count\n    ans = 1\n    for i in d:\n        ans *= d[i] + 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    d = {}\n    for x in l:\n        no = x\n        i = 2\n        while i * i <= no:\n            while no % i == 0:\n                count = d.get(i, 0) + 1\n                d[i] = count\n                no //= i\n            i += 1\n        if no != 1:\n            count = d.get(no, 0) + 1\n            d[no] = count\n    ans = 1\n    for i in d:\n        ans *= d[i] + 1\n    print(ans)", "from collections import defaultdict\nimport math\nfrom typing import List\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    N = 1\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for q in range(n):\n        N = a[q]\n        for i in range(2, int(math.sqrt(N) + 1)):\n            while N % i == 0:\n                d[i] += 1\n                N = N // i\n        if N > 1:\n            d[N] += 1\n            N = 1\n        ans = 1\n        for i in d.keys():\n            ans *= d[i] + 1\n    print(ans)", "from collections import defaultdict\nimport math\nfrom typing import List\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    N = 1\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for q in range(n):\n        N = a[q]\n        for i in range(2, int(math.sqrt(N) + 1)):\n            while N % i == 0:\n                d[i] += 1\n                N = N // i\n        if N > 1:\n            d[N] += 1\n            N = 1\n        ans = 1\n        for i in d.keys():\n            ans *= d[i] + 1\n    print(ans)", "from collections import defaultdict\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for i in range(n):\n        j = a[i]\n        while j & 1 == 0:\n            d[2] += 1\n            j //= 2\n        k = 3\n        while k <= math.sqrt(j):\n            while j % k == 0:\n                d[k] += 1\n                j //= k\n            k += 2\n        if j > 2:\n            d[j] += 1\n    res = 1\n    for i in d.keys():\n        res *= d[i] + 1\n    print(res)", "from collections import defaultdict\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for i in range(n):\n        j = a[i]\n        while j & 1 == 0:\n            d[2] += 1\n            j //= 2\n        k = 3\n        while k <= math.sqrt(j):\n            while j % k == 0:\n                d[k] += 1\n                j //= k\n            k += 2\n        if j > 2:\n            d[j] += 1\n    res = 1\n    for i in d.keys():\n        res *= d[i] + 1\n    print(res)", "from collections import defaultdict\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = defaultdict(int)\n    for i in range(n):\n        j = a[i]\n        while j & 1 == 0:\n            d[2] += 1\n            j //= 2\n        k = 3\n        while k <= math.sqrt(j):\n            while j % k == 0:\n                d[k] += 1\n                j //= k\n            k += 2\n        if j > 2:\n            d[j] += 1\n    res = 1\n    for i in d.keys():\n        res *= d[i] + 1\n    print(res)", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\nfrom collections import defaultdict\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef factors_of_n(n):\n    factors = defaultdict(int)\n    while n % 2 == 0:\n        n //= 2\n        factors[2] += 1\n    for p in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % p == 0:\n            n //= p\n            factors[p] += 1\n    if n > 2:\n        factors[n] += 1\n    return factors\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        factors = defaultdict(int)\n        for i in a:\n            temp = factors_of_n(i)\n            for k in temp:\n                factors[k] += temp[k]\n        count = 1\n        for i in factors:\n            count *= factors[i] + 1\n        print(count)\nmain()", "from sys import stdin, stdout\nimport math\nfrom collections import Counter\nimport functools\nimport time\nimport bisect\nfrom collections import defaultdict\n\ndef tr():\n    return range(int(line()))\n\ndef sm():\n    return map(int, line().split())\n\ndef ln():\n    return list(sm())\n\ndef nl():\n    return int(line())\n\ndef ssm():\n    return map(str, line().split())\n\ndef line():\n    return stdin.readline().rstrip()\n\ndef b(x):\n    return bin(x).replace('0b', '')\n\ndef o(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + '\\n')\n\ndef osp(x):\n    if type(x) != type(''):\n        x = str(x)\n    stdout.write(x + ' ')\n\ndef ol(x):\n    stdout.write(' '.join(map(str, x)))\n\ndef wline():\n    return stdin.read().split()\n\ndef factors_of_n(n):\n    factors = defaultdict(int)\n    while n % 2 == 0:\n        n //= 2\n        factors[2] += 1\n    for p in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % p == 0:\n            n //= p\n            factors[p] += 1\n    if n > 2:\n        factors[n] += 1\n    return factors\n\ndef main():\n    for _ in tr():\n        n = nl()\n        a = ln()\n        factors = defaultdict(int)\n        for i in a:\n            temp = factors_of_n(i)\n            for k in temp:\n                factors[k] += temp[k]\n        count = 1\n        for i in factors:\n            count *= factors[i] + 1\n        print(count)\nmain()", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = {}\n    for i in range(n):\n        if a[i] > 3:\n            temp = 0\n            while a[i] % 2 == 0:\n                temp += 1\n                a[i] //= 2\n            if temp > 0:\n                x[2] = x.setdefault(2, 0) + temp\n                temp = 0\n            xd = int(sqrt(a[i]))\n            for j in range(3, xd + 1, 2):\n                while a[i] % j == 0:\n                    temp += 1\n                    a[i] //= j\n                if temp > 0:\n                    x[j] = x.setdefault(j, 0) + temp\n                    temp = 0\n            if a[i] > 1:\n                x[a[i]] = x.setdefault(a[i], 0) + 1\n        else:\n            x[a[i]] = x.setdefault(a[i], 0) + 1\n    ans = 1\n    for (_, v) in x.items():\n        ans *= v + 1\n    print(ans)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = {}\n    for i in range(n):\n        if a[i] > 3:\n            temp = 0\n            while a[i] % 2 == 0:\n                temp += 1\n                a[i] //= 2\n            if temp > 0:\n                x[2] = x.setdefault(2, 0) + temp\n                temp = 0\n            xd = int(sqrt(a[i]))\n            for j in range(3, xd + 1, 2):\n                while a[i] % j == 0:\n                    temp += 1\n                    a[i] //= j\n                if temp > 0:\n                    x[j] = x.setdefault(j, 0) + temp\n                    temp = 0\n            if a[i] > 1:\n                x[a[i]] = x.setdefault(a[i], 0) + 1\n        else:\n            x[a[i]] = x.setdefault(a[i], 0) + 1\n    ans = 1\n    for (_, v) in x.items():\n        ans *= v + 1\n    print(ans)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = {}\n    for i in range(n):\n        if a[i] > 3:\n            temp = 0\n            while a[i] % 2 == 0:\n                temp += 1\n                a[i] //= 2\n            if temp > 0:\n                x[2] = x.setdefault(2, 0) + temp\n                temp = 0\n            xd = int(sqrt(a[i]))\n            for j in range(3, xd + 1, 2):\n                while a[i] % j == 0:\n                    temp += 1\n                    a[i] //= j\n                if temp > 0:\n                    x[j] = x.setdefault(j, 0) + temp\n                    temp = 0\n            if a[i] > 1:\n                x[a[i]] = x.setdefault(a[i], 0) + 1\n        else:\n            x[a[i]] = x.setdefault(a[i], 0) + 1\n    ans = 1\n    for (_, v) in x.items():\n        ans *= v + 1\n    print(ans)", "import math\n\ndef snek(n):\n    if n == 1:\n        return\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i in d:\n                d[i] = d[i] + 1\n            else:\n                d[i] = 2\n            snek(n // i)\n            return\n    if n in d:\n        d[n] = d[n] + 1\n    else:\n        d[n] = 2\nt = int(input())\nfor i in range(t):\n    d = {}\n    n = int(input())\n    a = list(map(int, input().split()))\n    for j in a:\n        snek(j)\n    ans = 1\n    for k in d.values():\n        ans *= k\n    print(ans)", "import math\ndict = {}\n\ndef fact(n):\n    if n == 1:\n        return\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i in dict:\n                dict[i] = dict[i] + 1\n            else:\n                dict[i] = 2\n            fact(n // i)\n            return\n    if n in dict:\n        dict[n] = dict[n] + 1\n    else:\n        dict[n] = 2\nT = int(input())\nfor i in range(T):\n    dict = {}\n    n = int(input())\n    A = list(map(int, input().split(' ')))\n    for num in A:\n        fact(num)\n    result = 1\n    for num in dict.values():\n        result = result * num\n    print(result)", "def seve(ans, n):\n    arr = [True for i in range(n)]\n    (arr[0], arr[1]) = (False, False)\n    for i in range(2, n):\n        if arr[i] == True:\n            for j in range(i * i, n, i):\n                arr[j] = False\n    for i in range(n):\n        if arr[i] == True:\n            ans.append(i)\n    return arr\nt = int(input())\nn = 10 ** 6 + 1\nprime = []\ncheck = seve(prime, n)\nfor ii in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    d = {}\n    for ele in arr:\n        if check[ele] == True:\n            d[ele] = d.get(ele, 0) + 1\n            continue\n        while ele > 1:\n            for p in prime:\n                while ele > 1 and ele % p == 0:\n                    d[p] = d.get(p, 0) + 1\n                    ele //= p\n                if ele == 1:\n                    break\n            break\n    ans = 1\n    for ele in d:\n        ans = ans * (d[ele] + 1)\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    dp = list(map(int, input().split()))\n    dpp = []\n    for i in dp:\n        for j in range(2, int(i ** 0.5) + 1):\n            while i % j == 0:\n                dpp.append(j)\n                i //= j\n        if i > 1:\n            dpp.append(i)\n    count = Counter(dpp)\n    ans = 1\n    for i in count:\n        ans *= count[i] + 1\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    dp = list(map(int, input().split()))\n    dpp = []\n    for i in dp:\n        for j in range(2, int(i ** 0.5) + 1):\n            while i % j == 0:\n                dpp.append(j)\n                i //= j\n        if i > 1:\n            dpp.append(i)\n    count = Counter(dpp)\n    ans = 1\n    for i in count:\n        ans *= count[i] + 1\n    print(ans)", "from sys import stdin, stdout\nimport math as m\nfrom collections import Counter\ninput = stdin.readline\nMAXN = 1000001\nspf = [0 for _ in range(MAXN)]\n\ndef sieve():\n    for i in range(MAXN):\n        spf[i] = i\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, m.ceil(m.sqrt(MAXN))):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef factorization(num):\n    factors = list()\n    while num != 1:\n        factors.append(spf[num])\n        num = num // spf[num]\n    return factors\nt = int(input().strip())\nsieve()\nfor _ in range(t):\n    n = int(input().strip())\n    arr = list(map(int, input().strip().split()))\n    fact = list()\n    for num in arr:\n        factors = factorization(num)\n        fact.extend(factors)\n    d1 = Counter(fact)\n    ans = 1\n    for key in d1:\n        ans = ans * (d1[key] + 1)\n    print(ans)", "import sys\nfrom collections import Counter\nsys.setrecursionlimit(10 ** 5)\nimport math as mt\nMAXN = 1000001\nspf = [0 for i in range(MAXN)]\n\ndef sieve():\n    spf[1] = 1\n    for i in range(2, MAXN):\n        spf[i] = i\n    for i in range(4, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, mt.ceil(mt.sqrt(MAXN))):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef getFactorization(x):\n    ret = list()\n    while x != 1:\n        ret.append(spf[x])\n        x = x // spf[x]\n    return ret\n\ndef pro(arr):\n    n = len(arr)\n    final = {}\n    for i in range(n):\n        fact = getFactorization(arr[i])\n        dic = Counter(fact)\n        for (p, q) in dic.items():\n            if p in final:\n                final[p] += q\n            else:\n                final[p] = q\n    ans = 1\n    for (i, j) in final.items():\n        ans = ans * (j + 1)\n    print(ans)\nn = int(input())\nsieve()\nfor i in range(n):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    pro(arr)", "import math\nfor _ in range(int(input())):\n    d = {}\n\n    def find_factors(n):\n        cnt = 0\n        while n % 2 == 0:\n            n = n // 2\n            cnt += 1\n        if '2' not in d.keys():\n            d['2'] = cnt\n        else:\n            d['2'] += cnt\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            cnt = 0\n            while n % i == 0:\n                n = n // i\n                cnt += 1\n            if str(i) not in d.keys():\n                d[str(i)] = cnt\n            else:\n                d[str(i)] += cnt\n        if n > 2:\n            if str(n) not in d.keys():\n                d[str(n)] = 1\n            else:\n                d[str(n)] += 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(len(l)):\n        find_factors(l[i])\n    sum = 1\n    for j in d.values():\n        sum *= j + 1\n    print(sum)", "def prime_factors(n):\n    d = 2\n    len = 0\n    expo = [0] * (n + 1)\n    factors = [0] * (n + 1)\n    while n > 1 and d * d <= n:\n        k = 0\n        while n % d == 0:\n            n = n // d\n            k += 1\n        if k > 0:\n            len += 1\n            expo[len] = k\n            factors[len] = d\n        d += 1\n    if n > 1:\n        len += 1\n        expo[len] = 1\n        factors[len] = n\n    return (expo, factors)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dict1 = {}\n    for i in arr:\n        (expo, factors) = prime_factors(i)\n        for j in range(1, len(factors)):\n            if factors[j] == 0:\n                break\n            if factors[j] not in dict1:\n                dict1[factors[j]] = expo[j]\n            else:\n                dict1[factors[j]] += expo[j]\n    ans = 1\n    for i in dict1:\n        ans = ans * (dict1[i] + 1)\n    print(ans)", "import math\nU = int(input())\nfor i in range(U):\n    M = int(input())\n    A = list(map(lambda x: int(x), str(input()).split(' ')))\n    dictone = {}\n    for j in range(M):\n        temp = A[j]\n        k = 2\n        facts = []\n        while k * k <= A[j]:\n            if temp % k == 0:\n                flag = 1\n                if flag:\n                    facts.append(k)\n                    n = 0\n                    while temp % k == 0:\n                        n = n + 1\n                        temp = temp / k\n                    dictone[k] = dictone.get(k, 0) + n\n            k = k + 1\n        if temp > 1:\n            dictone[temp] = dictone.get(temp, 0) + 1\n    ans = 1\n    for (k, v) in dictone.items():\n        ans = ans * (v + 1)\n    print(ans)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    A = list(map(lambda x: int(x), str(input()).split(' ')))\n    dictone = {}\n    for j in range(N):\n        temp = A[j]\n        k = 2\n        factors = []\n        while k * k <= A[j]:\n            if temp % k == 0:\n                flag = 1\n                if flag:\n                    factors.append(k)\n                    n = 0\n                    while temp % k == 0:\n                        n = n + 1\n                        temp = temp / k\n                    dictone[k] = dictone.get(k, 0) + n\n            k = k + 1\n        if temp > 1:\n            dictone[temp] = dictone.get(temp, 0) + 1\n    answers = 1\n    for (k, v) in dictone.items():\n        answers = answers * (v + 1)\n    print(answers)", "import math\nfor _ in range(int(input())):\n    d = {}\n\n    def find_factors(n):\n        cnt = 0\n        while n % 2 == 0:\n            n = n // 2\n            cnt += 1\n        if '2' not in d.keys():\n            d['2'] = cnt\n        else:\n            d['2'] += cnt\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            cnt = 0\n            while n % i == 0:\n                n = n // i\n                cnt += 1\n            if str(i) not in d.keys():\n                d[str(i)] = cnt\n            else:\n                d[str(i)] += cnt\n        if n > 2:\n            if str(n) not in d.keys():\n                d[str(n)] = 1\n            else:\n                d[str(n)] += 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    for i in range(len(l)):\n        find_factors(l[i])\n    sum = 1\n    for j in d.values():\n        sum *= j + 1\n    print(sum)", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nsz = 10 ** 6 + 5\nstat = [0] * sz\nstat[0] = 1\nstat[1] = 1\npr_fac = [[] for i in range(sz)]\nfor i in range(2, sz):\n    if stat[i] == 0:\n        for j in range(i, sz, i):\n            stat[j] = 1\n            pr_fac[j].append(i)\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = {}\n    for i in range(n):\n        cur = l[i]\n        for j in pr_fac[cur]:\n            if j not in d:\n                d[j] = 0\n            while cur % j == 0:\n                d[j] += 1\n                cur //= j\n                if cur == 1:\n                    break\n    ans = 1\n    for i in d.values():\n        ans *= i + 1\n    print(ans)", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    pf = dict()\n    for a in arr:\n        x = a\n        sq = int(math.sqrt(a)) + 1\n        if a % 2 == 0:\n            if 2 not in pf:\n                pf[2] = 0\n        while x % 2 == 0:\n            pf[2] += 1\n            x = int(x / 2)\n        i = 3\n        while i <= sq:\n            if x % i == 0:\n                if i in pf:\n                    pf[i] += 1\n                else:\n                    pf[i] = 1\n                x = int(x / i)\n                continue\n            i += 2\n        if x > 2:\n            if x in pf:\n                pf[x] += 1\n            else:\n                pf[x] = 1\n    s = 1\n    for i in pf.values():\n        s *= i + 1\n    print(s)\n    t -= 1", "import math\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    pf = dict()\n    for a in arr:\n        x = a\n        sq = int(math.sqrt(a)) + 1\n        if a % 2 == 0:\n            if 2 not in pf:\n                pf[2] = 0\n        while x % 2 == 0:\n            pf[2] += 1\n            x = int(x / 2)\n        i = 3\n        while i <= sq:\n            if x % i == 0:\n                if i in pf:\n                    pf[i] += 1\n                else:\n                    pf[i] = 1\n                x = int(x / i)\n                continue\n            i += 2\n        if x > 2:\n            if x in pf:\n                pf[x] += 1\n            else:\n                pf[x] = 1\n    s = 1\n    for i in pf.values():\n        s *= i + 1\n    print(s)\n    t -= 1", "from math import sqrt\n\ndef primeFactors(n):\n    D = {}\n    while n % 2 == 0:\n        n = n // 2\n        D[2] = D.get(2, 0) + 1\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        while n % i == 0:\n            n = n // i\n            D[i] = D.get(i, 0) + 1\n    if n > 2:\n        D[n] = D.get(n, 0) + 1\n    return D\nT = int(input())\nans = []\nfor _ in range(T):\n    N = int(input())\n    A = [int(i) for i in input().split()]\n    D = {}\n    for i in A:\n        x = primeFactors(i)\n        for (p, q) in x.items():\n            D[p] = D.get(p, 0) + q\n    a = 1\n    for (i, j) in D.items():\n        a *= j + 1\n    ans.append(a)\nfor i in ans:\n    print(i)", "import math\nfor t in range(0, int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))[:n]\n    res = 0\n    d = {}\n    prime_numbers = [2]\n    for i in arr:\n        while i % 2 == 0:\n            try:\n                d[2] += 1\n            except:\n                d[2] = 1\n            i = i // 2\n        for j in range(3, int(math.sqrt(i)) + 1, 2):\n            while i % j == 0:\n                try:\n                    d[j] += 1\n                except:\n                    d[j] = 1\n                i = i // j\n        if i > 1:\n            try:\n                d[i] += 1\n            except:\n                d[i] = 1\n    p = 1\n    for key in d:\n        p = p * (d[key] + 1)\n    print(p)", "def prime(n):\n    l = []\n    while n % 2 == 0:\n        l.append(2)\n        n = n / 2\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        while n % i == 0:\n            l.append(i)\n            n = n / i\n    if n > 1:\n        l.append(int(n))\n    return l\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().strip().split()))\n    l2 = []\n    for i in l:\n        l2.extend(prime(i))\n    s = set(l2)\n    m = 1\n    for i in s:\n        m = m * (l2.count(i) + 1)\n    print(m)\n    t -= 1", "import math\nfrom collections import defaultdict\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    N = list(map(int, input().split()))\n    dic = defaultdict(int)\n    for i in N:\n        while i % 2 == 0:\n            i = i // 2\n            dic[2] += 1\n        for j in range(3, 1 + int(math.sqrt(i)), 2):\n            while i % j == 0:\n                i = i // j\n                dic[j] += 1\n        if i > 2:\n            dic[i] += 1\n    res = 1\n    for i in dic.values():\n        res *= i + 1\n    print(res)\n    t = t - 1", "import math\nfrom collections import defaultdict\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    N = list(map(int, input().split()))\n    dic = defaultdict(int)\n    for i in N:\n        while i % 2 == 0:\n            i = i // 2\n            dic[2] += 1\n        for j in range(3, 1 + int(math.sqrt(i)), 2):\n            while i % j == 0:\n                i = i // j\n                dic[j] += 1\n        if i > 2:\n            dic[i] += 1\n    res = 1\n    for i in dic.values():\n        res *= i + 1\n    print(res)\n    t = t - 1", "import math\nfrom collections import defaultdict\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    N = list(map(int, input().split()))\n    dic = defaultdict(int)\n    for i in N:\n        while i % 2 == 0:\n            i = i // 2\n            dic[2] += 1\n        for j in range(3, 1 + int(math.sqrt(i)), 2):\n            while i % j == 0:\n                i = i // j\n                dic[j] += 1\n        if i > 2:\n            dic[i] += 1\n    res = 1\n    for i in dic.values():\n        res *= i + 1\n    print(res)\n    t = t - 1", "import math\nt = int(input())\nfor k in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = [0]\n    c = [2]\n    s = 1\n    for j in a:\n        while j % 2 == 0:\n            b[0] += 1\n            j = j // 2\n        for i in range(3, math.floor(math.sqrt(j)) + 1, 2):\n            if j % i == 0:\n                if i in c:\n                    z = c.index(i)\n                    j = j // i\n                    b[z] += 1\n                    while j % i == 0:\n                        b[z] += 1\n                        j = j // i\n                else:\n                    j = j // i\n                    c.append(i)\n                    b.append(1)\n                    while j % i == 0:\n                        j = j // i\n                        b[-1] += 1\n        if j > 2:\n            if j in c:\n                z = c.index(j)\n                b[z] += 1\n            else:\n                c.append(j)\n                b.append(1)\n    for i in b:\n        s *= i + 1\n    print(s)", "def solve(arr):\n    import math\n    from collections import defaultdict\n    hm = defaultdict(int)\n\n    def primeFactors(n):\n        while n % 2 == 0:\n            hm[2] += 1\n            n = n // 2\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                hm[i] += 1\n                n = n // i\n        if n > 2:\n            hm[n] += 1\n        return hm\n    for i in arr:\n        primeFactors(i)\n    ans = 1\n    for v in hm.values():\n        ans *= v + 1\n    return ans\nncases = int(input())\nwhile ncases:\n    n = int(input())\n    l = list(map(int, input().split()))\n    print(solve(l))\n    ncases -= 1", "try:\n    import math\n    from collections import Counter\n    for T in range(int(input())):\n        N = int(input())\n        B = list(map(int, input().split()))\n        l = []\n        for i in B:\n            for j in range(2, int(i ** 0.5) + 1):\n                while i % j == 0:\n                    l.append(j)\n                    i //= j\n            if i > 1:\n                l.append(i)\n        c = Counter(l)\n        K = 1\n        for i in c:\n            K *= c[i] + 1\n        print(K)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    for T in range(int(input())):\n        N = int(input())\n        B = list(map(int, input().split()))\n        l = []\n        for i in B:\n            for j in range(2, int(i ** 0.5) + 1):\n                while i % j == 0:\n                    l.append(j)\n                    i //= j\n            if i > 1:\n                l.append(i)\n        c = Counter(l)\n        K = 1\n        for i in c:\n            K *= c[i] + 1\n        print(K)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        l = []\n        for i in a:\n            for j in range(2, int(i ** 0.5) + 1):\n                while i % j == 0:\n                    l.append(j)\n                    i //= j\n            if i > 1:\n                l.append(i)\n        c = Counter(l)\n        r = 1\n        for i in c:\n            r *= c[i] + 1\n        print(r)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        l = []\n        for i in a:\n            for j in range(2, int(i ** 0.5) + 1):\n                while i % j == 0:\n                    l.append(j)\n                    i //= j\n            if i > 1:\n                l.append(i)\n        c = Counter(l)\n        r = 1\n        for i in c:\n            r *= c[i] + 1\n        print(r)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    for _ in range(int(input())):\n        n = int(input())\n        a = list(map(int, input().split()))\n        l = []\n        for i in a:\n            for j in range(2, int(i ** 0.5) + 1):\n                while i % j == 0:\n                    l.append(j)\n                    i //= j\n            if i > 1:\n                l.append(i)\n        c = Counter(l)\n        r = 1\n        for i in c:\n            r *= c[i] + 1\n        print(r)\nexcept:\n    pass", "import math\n\ndef no_factors(num):\n    total = 1\n    prime = {}\n    for i in range(len(num)):\n        y = num[i]\n        x = math.sqrt(num[i])\n        for j in range(2, int(x) + 1):\n            while y % j == 0:\n                if j in prime.keys():\n                    prime[j] = prime[j] + 1\n                else:\n                    prime[j] = 1\n                y = y // j\n        if y > 1:\n            if y in prime.keys():\n                prime[y] = prime[y] + 1\n            else:\n                prime[y] = 1\n    primes = list(prime.values())\n    for i in range(len(primes)):\n        total = total * (primes[i] + 1)\n    return total\ntest_cases = int(input())\nwhile test_cases:\n    N = int(input())\n    numbers = list(map(int, input().split()))\n    total = no_factors(numbers)\n    print(total)\n    test_cases = test_cases - 1", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import sys\nfac = []\nT = int(input())\n\ndef factors(n):\n    count = 0\n    while n & 1 == 0:\n        n >>= 1\n        count += 1\n    if count:\n        fac.append((2, count))\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        count = 0\n        while n % i == 0:\n            count += 1\n            n /= i\n        if count:\n            fac.append((i, count))\n    if n > 2:\n        fac.append((n, 1))\nwhile T:\n    fac = []\n    N = int(input())\n    L = list(map(int, sys.stdin.readline().split()))\n    for i in L:\n        factors(i)\n    fac.sort()\n    len_factor_list = len(fac)\n    su = 0\n    result = 1\n    num = fac[0][0]\n    i = 0\n    while i < len_factor_list:\n        su = 0\n        while i < len_factor_list and fac[i][0] == num:\n            su += fac[i][1]\n            i += 1\n        result *= su + 1\n        if i < len_factor_list:\n            num = fac[i][0]\n    print(result)\n    T -= 1", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import sys\nfac = []\nT = int(input())\n\ndef factors(n):\n    count = 0\n    while n & 1 == 0:\n        n >>= 1\n        count += 1\n    if count:\n        fac.append((2, count))\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        count = 0\n        while n % i == 0:\n            count += 1\n            n /= i\n        if count:\n            fac.append((i, count))\n    if n > 2:\n        fac.append((n, 1))\nwhile T:\n    fac = []\n    N = int(input())\n    L = list(map(int, sys.stdin.readline().split()))\n    for i in L:\n        factors(i)\n    fac.sort()\n    len_factor_list = len(fac)\n    su = 0\n    result = 1\n    num = fac[0][0]\n    i = 0\n    while i < len_factor_list:\n        su = 0\n        while i < len_factor_list and fac[i][0] == num:\n            su += fac[i][1]\n            i += 1\n        result *= su + 1\n        if i < len_factor_list:\n            num = fac[i][0]\n    print(result)\n    T -= 1", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "from collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "try:\n    for i in range(int(input())):\n        _ = input()\n        counts = {}\n        A = list(map(int, input().split()))\n        for num in A:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    if counts.get(i) == None:\n                        counts[i] = 1\n                    else:\n                        counts[i] += 1\n                    num = num / i\n            if num > 1:\n                if counts.get(num) == None:\n                    counts[num] = 1\n                else:\n                    counts[num] += 1\n        ans = 1\n        for j in counts.values():\n            ans *= j + 1\n        print(ans)\nexcept:\n    pass", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    dp = list(map(int, input().split()))\n    dpp = []\n    for i in dp:\n        for j in range(2, int(i ** 0.5) + 1):\n            while i % j == 0:\n                dpp.append(j)\n                i //= j\n        if i > 1:\n            dpp.append(i)\n    count = Counter(dpp)\n    ans = 1\n    for i in count:\n        ans *= count[i] + 1\n    print(ans)", "import math\nimport collections\n\ndef func2(arr):\n    return collections.Counter(arr)\n\ndef func(n):\n    while n % 2 == 0:\n        a.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            a.append(int(i))\n            n = n / i\n    if n > 2:\n        a.append(int(n))\n    return\nt = int(input())\nl = 0\nwhile l < t:\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    a = []\n    for j in range(n):\n        func(arr[j])\n    freq = func2(a)\n    ans = 1\n    for (keys, value) in freq.items():\n        ans *= value + 1\n    print(ans)\n    l += 1", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nimport collections\n\ndef func2(arr):\n    return collections.Counter(arr)\n\ndef func(n):\n    while n % 2 == 0:\n        a.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            a.append(int(i))\n            n = n / i\n    if n > 2:\n        a.append(int(n))\n    return\nt = int(input())\nl = 0\nwhile l < t:\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    a = []\n    for j in range(n):\n        func(arr[j])\n    freq = func2(a)\n    ans = 1\n    for (keys, value) in freq.items():\n        ans *= value + 1\n    print(ans)\n    l += 1", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nfrom collections import Counter\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        l2 = []\n        for num in arr:\n            for i in range(2, int(num ** 0.5) + 1):\n                while num % i == 0:\n                    l2.append(i)\n                    num //= i\n            if num > 1:\n                l2.append(num)\n        c = Counter(l2)\n        ans = 1\n        for i in c:\n            ans *= c[i] + 1\n        print(ans)\nexcept:\n    pass", "import math\nimport collections\n\ndef func2(arr):\n    return collections.Counter(arr)\n\ndef func(n):\n    while n % 2 == 0:\n        a.append(2)\n        n = n / 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            a.append(int(i))\n            n = n / i\n    if n > 2:\n        a.append(int(n))\n    return\nt = int(input())\nl = 0\nwhile l < t:\n    n = int(input())\n    arr = [int(i) for i in input().split(' ')]\n    a = []\n    for j in range(n):\n        func(arr[j])\n    freq = func2(a)\n    ans = 1\n    for (keys, value) in freq.items():\n        ans *= value + 1\n    print(ans)\n    l += 1", "from collections import Counter\nfor _ in range(int(input())):\n    n = int(input())\n    l1 = [int(x) for x in input().split()]\n    l2 = []\n    for num in l1:\n        for i in range(2, int(num ** 0.5) + 1):\n            while num % i == 0:\n                l2.append(i)\n                num //= i\n        if num > 1:\n            l2.append(num)\n    l2 = Counter(l2)\n    ans = 1\n    for i in l2.values():\n        ans *= i + 1\n    print(ans)", "for i in range(0, int(input())):\n    length = int(input())\n    arr = list(map(int, input().split()))\n    counts = {}\n    for num in arr:\n        for i in range(2, int(num ** 0.5) + 1):\n            while num % i == 0:\n                if counts.get(i) == None:\n                    counts[i] = 1\n                else:\n                    counts[i] += 1\n                num = num / i\n        if num > 1:\n            if counts.get(num) == None:\n                counts[num] = 1\n            else:\n                counts[num] += 1\n    ans = 1\n    for i in counts.values():\n        ans *= i + 1\n    print(ans)", "from collections import Counter\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst1 = []\n    for m in lst:\n        for i in range(2, int(m ** 0.5) + 1):\n            while m % i == 0:\n                lst1.append(i)\n                m = m / i\n        if m > 1:\n            lst1.append(m)\n    lst1 = Counter(lst1)\n    number_of_factors = 1\n    for j in lst1.values():\n        number_of_factors = number_of_factors * (j + 1)\n    print(number_of_factors)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ls = list(map(int, input().split()))\n    factors = []\n    for x in ls:\n        for j in range(2, int(x ** 0.5) + 1):\n            while x % j == 0:\n                factors.append(j)\n                x //= j\n        if x > 1:\n            factors.append(x)\n    factors = Counter(factors)\n    s = 1\n    for y in factors.values():\n        s *= y + 1\n    print(s)"]