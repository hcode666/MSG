["LEFT = 0\nRIGHT = 1\nT = int(input())\ncoordinates = None\n\ndef f():\n    ans = [[100000000000.0, 100000000000.0]]\n    for i in range(1, len(coordinates)):\n        ans.append([0, 0])\n        distance = coordinates[i][0] - coordinates[i - 1][0]\n        velocity = coordinates[i][1] + coordinates[i - 1][1]\n        time_taken = distance / velocity\n        ans[i][LEFT] = max(ans[i][LEFT], min(ans[i - 1][RIGHT], time_taken))\n        velocity = coordinates[i - 1][1] - coordinates[i][1]\n        if velocity > 0:\n            time_taken = distance / velocity\n            ans[i][RIGHT] = max(ans[i][RIGHT], min(ans[i - 1][RIGHT], time_taken))\n        else:\n            ans[i][RIGHT] = max(ans[i][RIGHT], ans[i - 1][RIGHT])\n        velocity = coordinates[i][1] - coordinates[i - 1][1]\n        if velocity > 0:\n            time_taken = distance / velocity\n            ans[i][LEFT] = max(ans[i][LEFT], min(ans[i - 1][LEFT], time_taken))\n        else:\n            ans[i][LEFT] = max(ans[i][LEFT], ans[i - 1][LEFT])\n        ans[i][RIGHT] = max(ans[i][RIGHT], ans[i - 1][LEFT])\n    return ans[-1][RIGHT]\nfor t in range(T):\n    N = int(input())\n    coordinates = [tuple(map(int, input().split())) for _ in range(N)]\n    coordinates.sort()\n    answer = f()\n    if answer == 100000000000.0:\n        answer = -1\n    print(answer)", "LEFT = 0\nRIGHT = 1\nT = int(input())\ncoordinates = None\n\ndef f():\n    ans = [[100000000000.0, 100000000000.0]]\n    for i in range(1, len(coordinates)):\n        ans.append([0, 0])\n        distance = coordinates[i][0] - coordinates[i - 1][0]\n        velocity = coordinates[i][1] + coordinates[i - 1][1]\n        time_taken = distance / velocity\n        ans[i][LEFT] = max(ans[i][LEFT], min(ans[i - 1][RIGHT], time_taken))\n        velocity = coordinates[i - 1][1] - coordinates[i][1]\n        if velocity > 0:\n            time_taken = distance / velocity\n            ans[i][RIGHT] = max(ans[i][RIGHT], min(ans[i - 1][RIGHT], time_taken))\n        else:\n            ans[i][RIGHT] = max(ans[i][RIGHT], ans[i - 1][RIGHT])\n        velocity = coordinates[i][1] - coordinates[i - 1][1]\n        if velocity > 0:\n            time_taken = distance / velocity\n            ans[i][LEFT] = max(ans[i][LEFT], min(ans[i - 1][LEFT], time_taken))\n        else:\n            ans[i][LEFT] = max(ans[i][LEFT], ans[i - 1][LEFT])\n        ans[i][RIGHT] = max(ans[i][RIGHT], ans[i - 1][LEFT])\n    return ans[-1][RIGHT]\nfor t in range(T):\n    N = int(input())\n    coordinates = [tuple(map(int, input().split())) for _ in range(N)]\n    coordinates.sort()\n    answer = f()\n    if answer == 100000000000.0:\n        answer = -1\n    print(answer)", "LEFT = 0\nRIGHT = 1\nT = int(input())\ncoordinates = None\n\ndef f():\n    ans = [[100000000000.0, 100000000000.0]]\n    for i in range(1, len(coordinates)):\n        ans.append([0, 0])\n        distance = coordinates[i][0] - coordinates[i - 1][0]\n        velocity = coordinates[i][1] + coordinates[i - 1][1]\n        time_taken = distance / velocity\n        ans[i][LEFT] = max(ans[i][LEFT], min(ans[i - 1][RIGHT], time_taken))\n        velocity = coordinates[i - 1][1] - coordinates[i][1]\n        if velocity > 0:\n            time_taken = distance / velocity\n            ans[i][RIGHT] = max(ans[i][RIGHT], min(ans[i - 1][RIGHT], time_taken))\n        else:\n            ans[i][RIGHT] = max(ans[i][RIGHT], ans[i - 1][RIGHT])\n        velocity = coordinates[i][1] - coordinates[i - 1][1]\n        if velocity > 0:\n            time_taken = distance / velocity\n            ans[i][LEFT] = max(ans[i][LEFT], min(ans[i - 1][LEFT], time_taken))\n        else:\n            ans[i][LEFT] = max(ans[i][LEFT], ans[i - 1][LEFT])\n        ans[i][RIGHT] = max(ans[i][RIGHT], ans[i - 1][LEFT])\n    return ans[-1][RIGHT]\nfor t in range(T):\n    N = int(input())\n    coordinates = [tuple(map(int, input().split())) for _ in range(N)]\n    coordinates.sort()\n    answer = f()\n    if answer == 100000000000.0:\n        answer = -1\n    print(answer)", "for query in range(int(input())):\n    n = int(input())\n    child = []\n    for i in range(n):\n        child.append([int(v) for v in input().split()])\n    child.sort()\n    d = [float('inf'), float('inf')]\n    for i in range(1, n):\n        if child[i][1] <= child[i - 1][1]:\n            left_left = d[0]\n        else:\n            left_left = min(d[0], (child[i][0] - child[i - 1][0]) / float(child[i][1] - child[i - 1][1]))\n        left_right = d[0]\n        right_left = min((child[i][0] - child[i - 1][0]) / float(child[i][1] + child[i - 1][1]), d[1])\n        if child[i][1] >= child[i - 1][1]:\n            right_right = d[1]\n        else:\n            right_right = min(d[1], (child[i][0] - child[i - 1][0]) / float(child[i - 1][1] - child[i][1]))\n        d = [max(left_left, right_left), max(left_right, right_right)]\n    if max(d) == float('inf'):\n        print(-1)\n    else:\n        print(max(d))", "import math\ntc = int(input())\nwhile tc > 0:\n    n = int(input())\n    children = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        children.append(temp)\n    children.sort()\n    data = [math.inf, math.inf]\n    for i in range(1, n):\n        if children[i - 1][1] >= children[i][1]:\n            ll = data[0]\n        else:\n            ll = min(data[0], (children[i][0] - children[i - 1][0]) / float(children[i][1] - children[i - 1][1]))\n        rl = min(data[1], (children[i][0] - children[i - 1][0]) / float(children[i][1] + children[i - 1][1]))\n        lr = data[0]\n        if children[i - 1][1] <= children[i][1]:\n            rr = data[1]\n        else:\n            rr = min(data[1], (children[i][0] - children[i - 1][0]) / float(children[i - 1][1] - children[i][1]))\n        data = [max(ll, rl), max(lr, rr)]\n    if max(data) is math.inf:\n        print(-1)\n    else:\n        print(max(data))\n    tc -= 1", "def check(mid, arr):\n    pr = 0\n    n = len(arr)\n    an = [0]\n    for i in range(1, n):\n        x1 = arr[i - 1][0]\n        x2 = arr[i][0]\n        v1 = arr[i - 1][1]\n        v2 = arr[i][1]\n        if pr == 0:\n            if x2 - x1 >= mid * (v2 - v1):\n                pr = 0\n            else:\n                pr = 1\n        elif x2 - x1 >= mid * (v2 + v1):\n            pr = 0\n        elif x2 - x1 >= mid * (v1 - v2):\n            pr = 1\n        else:\n            return False\n        an.append(pr)\n    return True\nfor nitish in range(int(input())):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        ar = list(map(int, input().strip().split(' ')))\n        arr.append(ar)\n    arr.sort()\n    low = 0.0\n    high = 10 ** 20 * 1.0\n    if check(high, arr):\n        print(-1)\n        continue\n    ans = 0.0\n    while abs(low - high) > 1e-06:\n        mid = (low + high) / 2\n        if check(mid, arr):\n            low = mid\n            ans = max(ans, mid)\n        else:\n            high = mid\n    print(ans)", "def optimal_assignment(cs):\n    PREC = 1e-10\n    cs.sort()\n    (lo, hi) = (0.0, 2000000000.0)\n    if has_solution(hi, cs):\n        return -1\n    for _ in range(1000):\n        mid = lo + (hi - lo) / 2\n        if has_solution(mid, cs):\n            lo = mid\n        else:\n            hi = mid\n        if hi - lo < PREC:\n            break\n    return lo + (hi - lo) / 2\n\ndef has_solution(t, cs):\n    prev_p = -1e+50\n    for (p, v) in cs:\n        new_p = p - v * t\n        if new_p > prev_p:\n            prev_p = new_p\n        else:\n            new_p = p + v * t\n            if new_p > prev_p:\n                prev_p = new_p\n            else:\n                return False\n    return True\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    cs = []\n    for _ in range(n):\n        cs.append(tuple(map(int, input().strip().split())))\n    print(optimal_assignment(cs))", "from math import ceil, log\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    arr = [[-1, -1]]\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    if n == 1:\n        print(-1)\n        continue\n    arr.sort()\n    ans = [None, (int(2000000000.0), int(2000000000.0))]\n    for i in range(2, n + 1):\n        tmp = int(2000000000.0)\n        if arr[i - 1][1] < arr[i][1]:\n            tmp = (arr[i][0] - arr[i - 1][0]) / (arr[i][1] - arr[i - 1][1])\n        tmp2 = (arr[i][0] - arr[i - 1][0]) / (arr[i][1] + arr[i - 1][1])\n        tmp = min(ans[i - 1][0], tmp)\n        tmp2 = min(ans[i - 1][1], tmp2)\n        x = max(tmp, tmp2)\n        tmp = int(2000000000.0)\n        if arr[i - 1][1] > arr[i][1]:\n            tmp = (arr[i][0] - arr[i - 1][0]) / (arr[i - 1][1] - arr[i][1])\n        tmp = min(ans[i - 1][1], tmp)\n        tmp2 = min(ans[i - 1][0], int(2000000000.0))\n        y = max(tmp2, tmp)\n        ans.append((x, y))\n    if max(ans[-1]) == int(2000000000.0):\n        print(-1)\n    else:\n        print(max(ans[-1]))"]