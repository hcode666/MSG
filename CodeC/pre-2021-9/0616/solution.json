["t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    w = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = []\n    ans.append(c[n - 1])\n    bm = w[n - 1]\n    for i in range(n - 2, -1, -1):\n        if w[i] > bm:\n            ans.append(c[i])\n            bm = w[i]\n    print(len(list(set(ans))))", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    w = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = []\n    ans.append(c[n - 1])\n    bm = w[n - 1]\n    for i in range(n - 2, -1, -1):\n        if w[i] > bm:\n            ans.append(c[i])\n            bm = w[i]\n    print(len(list(set(ans))))", "t = int(input())\nfor j in range(t):\n    (n, m) = map(int, input().split())\n    w = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = []\n    ans.append(c[n - 1])\n    bm = w[n - 1]\n    for i in range(n - 2, -1, -1):\n        if w[i] > bm:\n            ans.append(c[i])\n            bm = w[i]\n    print(len(list(set(ans))))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    p = h[n - 1]\n    c1 = [c[n - 1]]\n    for i in range(n - 2, -1, -1):\n        if h[i] > p:\n            c1.append(c[i])\n            p = h[i]\n    c2 = set(c1)\n    print(len(c2))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    p = h[n - 1]\n    c1 = [c[n - 1]]\n    for i in range(n - 2, -1, -1):\n        if h[i] > p:\n            c1.append(c[i])\n            p = h[i]\n    c2 = set(c1)\n    print(len(c2))", "from sys import *\n\ndef solve():\n    (n, m) = map(int, input().strip().split(' '))\n    h = list(map(int, input().strip().split(' ')))\n    c = list(map(int, input().strip().split(' ')))\n    cw = [0] * (m + 1)\n    mh = 0\n    for i in range(n - 1, -1, -1):\n        if h[i] > mh:\n            cw[c[i]] = 1\n            mh = h[i]\n    print(sum(cw))\nfor _ in range(int(input().strip())):\n    solve()", "from sys import *\n\ndef solve():\n    (n, m) = map(int, input().strip().split(' '))\n    h = list(map(int, input().strip().split(' ')))\n    c = list(map(int, input().strip().split(' ')))\n    cw = [0] * (m + 1)\n    mh = 0\n    for i in range(n - 1, -1, -1):\n        if h[i] > mh:\n            cw[c[i]] = 1\n            mh = h[i]\n    print(sum(cw))\nfor _ in range(int(input().strip())):\n    solve()", "from sys import *\n\ndef solve():\n    (n, m) = map(int, input().strip().split(' '))\n    h = list(map(int, input().strip().split(' ')))\n    c = list(map(int, input().strip().split(' ')))\n    cw = [0] * (m + 1)\n    h = h[::-1]\n    c = c[::-1]\n    mh = 0\n    for i in range(n):\n        if h[i] > mh:\n            cw[c[i]] = 1\n            mh = h[i]\n    return sum(cw)\nfor _ in range(int(input().strip())):\n    print(solve())", "from sys import *\n\ndef solve():\n    (n, m) = map(int, input().strip().split(' '))\n    h = list(map(int, input().strip().split(' ')))\n    c = list(map(int, input().strip().split(' ')))\n    cw = [0] * (m + 1)\n    h = h[::-1]\n    c = c[::-1]\n    mh = 0\n    for i in range(n):\n        if h[i] > mh:\n            cw[c[i]] = 1\n            mh = h[i]\n    print(sum(cw))\nfor _ in range(int(input().strip())):\n    solve()", "from sys import *\nfor _ in range(int(input().strip())):\n    (n, m) = map(int, input().strip().split(' '))\n    h = list(map(int, input().strip().split(' ')))\n    c = list(map(int, input().strip().split(' ')))\n    cw = [0] * (m + 1)\n    h = h[::-1]\n    c = c[::-1]\n    mh = 0\n    for i in range(n):\n        if h[i] > mh:\n            cw[c[i]] = 1\n            mh = h[i]\n    print(sum(cw))", "t = int(input())\nfor _ in range(t):\n    (nos, noc) = map(int, input().split())\n    h = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    s = []\n    f = [0] * (noc + 1)\n    for i in range(nos):\n        while s and s[-1][0] <= h[i]:\n            f[s[-1][1]] -= 1\n            s.pop()\n        s.append([h[i], c[i]])\n        f[c[i]] += 1\n    ans = 0\n    for i in f:\n        if i > 0:\n            ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (nos, noc) = map(int, input().split())\n    h = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    s = []\n    f = [0] * (noc + 1)\n    for i in range(nos):\n        while s and s[-1][0] <= h[i]:\n            f[s[-1][1]] -= 1\n            s.pop()\n        s.append([h[i], c[i]])\n        f[c[i]] += 1\n    ans = 0\n    for i in f:\n        if i > 0:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    mp = {}\n    for i in set(c):\n        mp[i] = 0\n    (curr, ans) = (-1, 0)\n    for i in range(1, n + 1):\n        if l[-i] > curr:\n            mp[c[-i]] = 1\n        curr = max(curr, l[-i])\n    for i in set(c):\n        if mp[i] == 1:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    mp = {}\n    for i in set(c):\n        mp[i] = 0\n    (curr, ans) = (-1, 0)\n    for i in range(1, n + 1):\n        if l[-i] > curr:\n            mp[c[-i]] = 1\n        curr = max(curr, l[-i])\n    for i in set(c):\n        if mp[i] == 1:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    mp = {}\n    for i in set(c):\n        mp[i] = 0\n    (curr, ans) = (l[-1], 0)\n    mp[c[-1]] = 1\n    for i in range(2, n + 1):\n        if l[-i] > curr:\n            mp[c[-i]] = 1\n        curr = max(curr, l[-i])\n    for i in set(c):\n        if mp[i] == 1:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    height = list(map(int, input().split()))\n    color = list(map(int, input().split()))\n    wall = [-1] * (n + 1)\n    col = set()\n    for i in range(n - 1, -1, -1):\n        wall[i] = max(height[i], wall[i + 1])\n    for i in range(n):\n        h = wall[i + 1]\n        if height[i] > h:\n            col.add(color[i])\n    print(len(col))", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = 0\n    suff_max = [-1] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        suff_max[i] = max(h[i], suff_max[i + 1])\n    col = set()\n    for i in range(n):\n        max_h = suff_max[i + 1]\n        if h[i] > max_h:\n            col.add(c[i])\n    ans = len(col)\n    print(ans)", "from math import ceil\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    ans = 0\n    suff_max = [-1] * (n + 1)\n    for i in range(n - 1, -1, -1):\n        suff_max[i] = max(h[i], suff_max[i + 1])\n    col = set()\n    for i in range(n):\n        max_h = suff_max[i + 1]\n        if h[i] > max_h:\n            col.add(c[i])\n    ans = len(col)\n    print(ans)", "def snek(i, n, h):\n    for j in range(i + 1, n):\n        if h[j] >= h[i]:\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = []\n    for j in range(n - 1):\n        if snek(j, n, h) and c[j] not in d:\n            d.append(c[j])\n    if c[n - 1] not in d:\n        d.append(c[n - 1])\n    print(len(d))", "def snek(i, n, h):\n    for j in range(i + 1, n):\n        if h[j] >= h[i]:\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = []\n    for j in range(n - 1):\n        if snek(j, n, h) and c[j] not in d:\n            d.append(c[j])\n    if c[n - 1] not in d:\n        d.append(c[n - 1])\n    print(len(d))", "def snek(i, n, h):\n    for j in range(i + 1, n):\n        if h[j] >= h[i]:\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = []\n    for j in range(n - 1):\n        if snek(j, n, h) and c[j] not in d:\n            d.append(c[j])\n    if c[n - 1] not in d:\n        d.append(c[n - 1])\n    print(len(d))", "def snek(i, n, h):\n    for j in range(i + 1, n):\n        if h[j] >= h[i]:\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = []\n    for j in range(n - 1):\n        if snek(j, n, h) and c[j] not in d:\n            d.append(c[j])\n    if c[n - 1] not in d:\n        d.append(c[n - 1])\n    print(len(d))", "def snek(i, n, h):\n    for j in range(i + 1, n):\n        if h[j] >= h[i]:\n            return False\n    return True\nt = int(input())\nfor i in range(t):\n    (n, c) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    d = []\n    for j in range(n - 1):\n        if snek(j, n, h) and c[j] not in d:\n            d.append(c[j])\n    if c[n - 1] not in d:\n        d.append(c[n - 1])\n    print(len(d))", "def check(i, n, height):\n    for j in range(i + 1, n):\n        if height[j] >= height[i]:\n            return False\n    return True\nT = int(input())\nfor _ in range(T):\n    (n, c) = map(int, input().split())\n    height = list(map(int, input().split()))\n    colors = list(map(int, input().split()))\n    distinct_colors = []\n    for i in range(n - 1):\n        if check(i, n, height) and colors[i] not in distinct_colors:\n            distinct_colors.append(colors[i])\n    if colors[n - 1] not in distinct_colors:\n        distinct_colors.append(colors[n - 1])\n    print(len(distinct_colors))", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cw = [0] * (m + 1)\n    h = h[::-1]\n    c = c[::-1]\n    mh = 0\n    for i in range(n):\n        if h[i] > mh:\n            cw[c[i]] = 1\n            mh = h[i]\n    print(sum(cw))\n    t -= 1", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cw = [0] * (m + 1)\n    h = h[::-1]\n    c = c[::-1]\n    mh = 0\n    for i in range(n):\n        if h[i] > mh:\n            cw[c[i]] = 1\n            mh = h[i]\n    print(sum(cw))\n    t -= 1", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    w = dict()\n    for i in range(m):\n        if a[i] in w:\n            w[a[i]].append(i)\n        else:\n            w[a[i]] = [i]\n    eles = sorted(list(w.keys()), reverse=True)\n    current = 0\n    color = set()\n    eles_length = len(eles)\n    for i in range(eles_length):\n        if w[eles[i]][-1] >= current:\n            current = w[eles[i]][-1]\n            color.add(b[current])\n    print(len(color))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    H = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    i = n - 1\n    s = set()\n    max_h = 0\n    while i >= 0:\n        if H[i] > max_h:\n            max_h = H[i]\n            s.add(C[i])\n        i -= 1\n    print(len(s))", "def distinct_colors(n, m, a, c):\n    u = [(a[i], c[i]) for i in range(n)]\n    u = u[::-1]\n    max_height = u[0][0]\n    colors = [u[0][1]]\n    for x in range(1, len(u)):\n        if u[x][0] > max_height:\n            max_height = u[x][0]\n            if u[x][1] not in colors:\n                colors.append(u[x][1])\n        else:\n            continue\n    print(len(colors))\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().rsplit()[:2]))\n    h = list(map(int, input().rsplit()[:n]))\n    c = list(map(int, input().rsplit()[:n]))\n    distinct_colors(n, m, h, c)", "T = int(input())\nfor i in range(T):\n    (N, M) = [int(i) for i in input().split()]\n    heights = [int(i) for i in input().split()]\n    colors = [int(i) for i in input().split()]\n    units = [(heights[i], colors[i]) for i in range(len(heights))]\n    units = units[::-1]\n    max_height = units[0][0]\n    colors = [units[0][1]]\n    for x in range(1, len(units)):\n        if units[x][0] > max_height:\n            max_height = units[x][0]\n            if units[x][1] not in colors:\n                colors.append(units[x][1])\n        else:\n            continue\n    print(len(colors))", "T = int(input())\nfor i in range(T):\n    (N, M) = [int(i) for i in input().split()]\n    heights = [int(i) for i in input().split()]\n    colors = [int(i) for i in input().split()]\n    units = [(heights[i], colors[i]) for i in range(len(heights))]\n    units = units[::-1]\n    max_height = units[0][0]\n    colors = [units[0][1]]\n    for x in range(1, len(units)):\n        if units[x][0] > max_height:\n            max_height = units[x][0]\n            if units[x][1] not in colors:\n                colors.append(units[x][1])\n        else:\n            continue\n    print(len(colors))", "t = int(input())\nfor z in range(t):\n    nm = list(map(int, input().split()))\n    n = nm[0]\n    m = nm[1]\n    hl = list(map(int, input().split()))\n    cl = list(map(int, input().split()))\n    c = []\n    while len(hl) >= 1:\n        h = max(hl)\n        for i in range(len(hl)):\n            if hl[i] == h:\n                hi = i\n        del hl[0:hi + 1]\n        c.append(cl[hi])\n        del cl[0:hi + 1]\n    print(len(set(c)))", "t = int(input())\nfor i in range(t):\n    a = input()\n    (n, m) = (int(a.split()[0]), int(a.split()[1]))\n    A = input()\n    h = list(map(int, A.split()))\n    B = input()\n    c = list(map(int, B.split()))\n    li = [h[0]]\n    co = [c[0]]\n    k = 0\n    for i in range(1, n):\n        if h[i] < li[k]:\n            li.append(h[i])\n            co.append(c[i])\n            k = k + 1\n        else:\n            while 1:\n                li.pop()\n                co.pop()\n                k = k - 1\n                if k == -1 or h[i] < li[k]:\n                    li.append(h[i])\n                    co.append(c[i])\n                    k = k + 1\n                    break\n    p = set(co)\n    print(len(p))", "T = int(input())\na = {}\ns = {1}\ns.clear()\nfor i in range(T):\n    (N, K) = map(int, input().split())\n    H = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    a.clear()\n    s.clear()\n    ind = -1\n    while True:\n        H = H[ind + 1:N]\n        C = C[ind + 1:N]\n        ind = H.index(max(H))\n        if ind == len(H) - 1:\n            a[H[ind]] = C[ind]\n            break\n        else:\n            a[H[ind]] = C[ind]\n    for j in a.values():\n        s.add(j)\n    print(len(s))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    h.reverse()\n    c.reverse()\n    m = 0\n    z = []\n    for i in range(n):\n        if h[i] > m:\n            z.append(c[i])\n            m = h[i]\n    print(len(set(z)))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    height = list(map(int, input().split()))\n    color = list(map(int, input().split()))\n    count = 0\n    wall = height[-1]\n    check = [color[-1]]\n    for i in range(n - 2, -1, -1):\n        if height[i] > wall:\n            wall = height[i]\n            check.append(color[i])\n    print(len(set(check)))", "def findmax_index(height, color, low, high, L, M):\n    number = 0\n    index = low\n    for i in range(low, high):\n        if height[i] >= number:\n            number = height[i]\n            index = i\n    L.append(number)\n    M.append(color[index])\n    if index == high - 1:\n        return (L, M)\n    else:\n        return findmax_index(height, color, index + 1, high, L, M)\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    height = [int(x) for x in input().split()]\n    color = [int(x) for x in input().split()]\n    L = []\n    M = []\n    (A, B) = findmax_index(height, color, 0, N, L, M)\n    z = set(B)\n    print(len(z))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    d = a[-1]\n    s = [b[-1]]\n    for i in range(n - 2, -1, -1):\n        if a[i] > d:\n            d = a[i]\n            s.append(b[i])\n    print(len(set(s)))", "t = int(input())\nfor i in range(0, t):\n    (n, m) = [int(x) for x in input().split()]\n    str1 = [int(x) for x in input().split()]\n    str2 = [int(x) for x in input().split()]\n    count = 1\n    maxi = max(str1)\n    for i in range(len(str1) - 1, -1, -1):\n        if str1[i] == maxi:\n            pro = i\n            break\n    arr2 = []\n    arr3 = []\n    for i in range(pro, len(str1)):\n        arr2.append(str1[i])\n        arr3.append(str2[i])\n    arr = []\n    for i in range(0, len(arr2)):\n        for j in range(i + 1, len(arr2)):\n            if arr2[i] <= arr2[j]:\n                break\n        else:\n            arr.append(arr3[i])\n    print(len(list(set(arr))))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    h = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    col = [0] * 1000000\n    maxo = h[-1]\n    col[c[-1]] = 1\n    for i in range(n - 1, -1, -1):\n        if maxo < h[i]:\n            maxo = h[i]\n            col[c[i]] = 1\n    s = sum(col)\n    print(s)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    h = [int(x) for x in input().split()]\n    c = [int(x) for x in input().split()]\n    i = n - 1\n    ch = 0\n    color = []\n    while i >= 0:\n        if h[i] > ch:\n            ch = h[i]\n            color.append(c[i])\n        i -= 1\n    print(len(set(color)))", "def main():\n    for _ in range(int(input())):\n        (N, M) = map(int, input().split())\n        heap = list()\n        from heapq import heappush, heappop\n        for (h, c) in zip(map(int, input().split()), map(int, input().split())):\n            while len(heap) > 0 and heap[0][0] <= h:\n                heappop(heap)\n            heappush(heap, (h, c))\n        print(len(set((c for (h, c) in heap))))\nmain()", "t = int(input())\nwhile t:\n    (n, m) = input().split()\n    l = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    l1 = []\n    k1 = []\n    l1 = l[::-1]\n    k1 = k[::-1]\n    maxx = l1[0]\n    clr = k1[0]\n    c = 1\n    l2 = []\n    l2.append(k1[0])\n    for i in range(int(n)):\n        if l1[i] > maxx:\n            maxx = l1[i]\n            if k1[i] not in l2:\n                c += 1\n            l2.append(k1[i])\n    print(c)\n    t -= 1", "def testing(N, M, H, C):\n    R = [(H[0], C[0])]\n    for i in range(1, N):\n        l = len(R)\n        while l != 0 and R[l - 1][0] <= H[i]:\n            (h, c) = R.pop()\n            l = len(R)\n        R.append([H[i], C[i]])\n    print(len(set([c[1] for c in R])))\n\ndef main():\n    T = int(input())\n    dMatrix = {}\n    for i in range(T):\n        (N, M) = [int(item) for item in input().split()]\n        H = [int(item) for item in input().split()]\n        C = [int(item) for item in input().split()]\n        dMatrix[i] = (N, M, H, C)\n    for (k, v) in dMatrix.items():\n        (N, M, H, C) = v\n        testing(N, M, H, C)\nmain()", "for _ in range(int(input())):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    c.append(0)\n    color = []\n    height = 0\n    index = n\n    for i in range(n - 1, -1, -1):\n        if height < h[i]:\n            height = h[i]\n            if c[index] != c[i]:\n                color.append(c[i])\n    color = set(color)\n    print(len(color))", "for i in range(int(input())):\n    (n, m) = map(int, input().strip().split(' '))\n    l1 = list(map(int, input().strip().split(' ')))\n    l2 = list(map(int, input().strip().split(' ')))\n    cnt = [l2[-1]]\n    m = l1[-1]\n    for j in range(n - 2, -1, -1):\n        if m < l1[j]:\n            cnt.append(l2[j])\n            m = l1[j]\n    print(len(set(cnt)))", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    a1 = [[a[i], i] for i in range(n)]\n    b = [int(x) for x in input().split()]\n    w = set()\n    a1.sort(reverse=True)\n    w.add(b[a1[0][1]])\n    u = a1[0][1]\n    for x in range(1, n):\n        if a1[x][1] > u:\n            w.add(b[a1[x][1]])\n            u = a1[x][1]\n    o = 0\n    for x in w:\n        o += 1\n    print(o)", "import bisect\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().strip().split())\n    h = list(map(int, input().strip().split()))\n    c = list(map(int, input().strip().split()))\n    ct = 0\n    s = set([c[-1]])\n    mx = h[-1]\n    for i in range(n - 2, -1, -1):\n        if h[i] > mx:\n            s.add(c[i])\n            mx = h[i]\n    print(len(s))", "def main():\n    for i in range(0, int(input())):\n        (n, m) = list(map(int, input().split()))\n        h = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        j = h.index(max(h))\n        h = h[j:]\n        c = c[j:]\n        index = []\n        new_c = []\n        for j in range(0, len(h)):\n            for k in range(j + 1, len(h)):\n                if h[j] <= h[k]:\n                    break\n            else:\n                new_c.append(c[j])\n        print(len(list(set(new_c))))\nmain()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    H = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    ch = [H[0]]\n    cc = [C[0]]\n    for i in range(1, len(H)):\n        if max(ch) <= H[i]:\n            ch = [H[i]]\n            cc = [C[i]]\n        else:\n            while H[i] >= ch[-1]:\n                ch.pop()\n                cc.pop()\n            ch.append(H[i])\n            cc.append(C[i])\n    print(len(set(cc)))", "t = int(input())\nfor _ in range(t):\n    (n, y) = map(int, input().split())\n    a = [int(y) for y in input().split()]\n    b = [int(y) for y in input().split()]\n    m = a[-1]\n    ans = []\n    ans.append(b[-1])\n    for i in range(n - 2, -1, -1):\n        if a[i] > m:\n            m = a[i]\n            ans.append(b[i])\n    print(len(set(ans)))", "T = int(input())\nfor _ in range(T):\n    (N, K) = map(int, input().split())\n    H = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    d = {}\n    for i in range(N):\n        d[H[i]] = C[i]\n    H.reverse()\n    count = 1\n    max1 = H[0]\n    s = set()\n    s.add(d[H[0]])\n    for i in range(N - 1):\n        if max1 < H[i + 1]:\n            s.add(d[H[i + 1]])\n            max1 = H[i + 1]\n    print(len(s))", "from bisect import bisect_right\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    hh = map(int, input().split())\n    cc = map(int, input().split())\n    rr = []\n    ww = []\n    for (h, c) in zip(hh, cc):\n        i = bisect_right(rr, h)\n        rr = rr[i:]\n        ww = ww[i:]\n        rr.insert(0, h)\n        ww.insert(0, c)\n    print(len(set(ww)))", "t = int(input())\nfor i in range(t):\n    a = input()\n    n = int(a.split()[0])\n    m = int(a.split()[1])\n    c = input()\n    d = input()\n    e = list(map(int, c.split()))\n    f = list(map(int, d.split()))\n    l = []\n    for j in range(n):\n        flag = 0\n        for k in range(j + 1, n):\n            if e[j] <= e[k]:\n                flag = 1\n                break\n        if flag == 0:\n            l.append(f[j])\n    s = set(l)\n    print(len(s))", "t = int(input())\nfor i in range(t):\n    q = input().split()\n    n = int(q[0])\n    m = int(q[1])\n    h = [int(j) for j in input().split()]\n    c = [int(j) for j in input().split()]\n    s = h[0:]\n    ind = 0\n    col = []\n    count = 1\n    while len(s) != 0:\n        a = max(s)\n        for j in range(len(s)):\n            if s[j] == a:\n                var = 1\n                ind = j\n        col = col + [c[ind]]\n        s = s[ind + 1:]\n        c = c[ind + 1:]\n    col.sort()\n    for j in range(len(col) - 1):\n        if col[j] != col[j + 1]:\n            count += 1\n    print(count)", "import sys\n\ndef _int():\n    return int(sys.stdin.readline())\n\ndef _ints():\n    return map(int, sys.stdin.readline().split())\n\ndef _intarr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef _str():\n    return sys.stdin.readline()\n\ndef _strarr():\n    return sys.stdin.readline().split()\nt = _int()\nans = []\nfor _ in range(t):\n    (n, m) = _ints()\n    h = _intarr()\n    c = _intarr()\n    s = []\n    for i in range(n):\n        if len(s) == 0:\n            s.append(i)\n        else:\n            while len(s) > 0:\n                l = len(s)\n                if h[s[l - 1]] <= h[i]:\n                    s.pop()\n                else:\n                    break\n            if len(s) == 0:\n                s.append(i)\n            elif c[s[len(s) - 1]] != c[i]:\n                s.append(i)\n    c_eff = set()\n    for i in s:\n        c_eff.add(c[i])\n    ans.append(len(c_eff))\nfor a in ans:\n    print(a)", "from collections import defaultdict\nfor _ in range(int(input())):\n    d = defaultdict(int)\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    l = [(h[i], c[i]) for i in range(n)]\n    cnt = 1\n    d[l[n - 1][1]] = 1\n    h = l[n - 1][0]\n    for i in range(n - 1, -1, -1):\n        if l[i][0] > h:\n            if not d[l[i][1]]:\n                cnt += 1\n            d[l[i][1]] = 1\n            h = l[i][0]\n    print(cnt)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    mx = a[-1]\n    s = set()\n    s.add(b[-1])\n    for i in range(n - 2, -1, -1):\n        if a[i] > mx:\n            mx = a[i]\n            s.add(b[i])\n    print(len(s))", "t = int(input())\nfor _ in range(t):\n    (n, c) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    m = a[-1]\n    l = [b[-1]]\n    for i in range(n - 1, -1, -1):\n        if a[i] > m:\n            m = a[i]\n            l.append(b[i])\n    s = list(set(l))\n    print(len(s))", "a = int(input())\nfor i in range(a):\n    bb = list(map(int, input().split()))\n    cc = list(map(int, input().split()))\n    dd = list(map(int, input().split()))\n    crr = []\n    for i in range(len(cc)):\n        while crr != [] and crr[-1][0] <= cc[i]:\n            crr.pop()\n        crr.append((cc[i], dd[i]))\n    crr = sorted(crr, key=lambda x: x[1])\n    if crr == []:\n        print(0)\n    else:\n        count = 1\n        for i in range(1, len(crr)):\n            if crr[i][1] == crr[i - 1][1]:\n                continue\n            else:\n                count += 1\n        print(count)", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(v) for v in input().strip().split()]\n    aN = [int(v) for v in input().strip().split()]\n    aM = [int(v) for v in input().strip().split()]\n    mN = max(aN)\n    ind = n - aN[::-1].index(mN) - 1\n    latest = aN[-1]\n    indC = n - 1\n    c = [aM[-1]]\n    while indC > ind:\n        if aN[indC - 1] > latest:\n            if aM[indC - 1] in c:\n                latest = aN[indC - 1]\n            else:\n                latest = aN[indC - 1]\n                c.append(aM[indC - 1])\n        indC -= 1\n    print(len(c))", "for _ in range(int(input())):\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    c.append(0)\n    color = []\n    height = 0\n    index = n\n    for i in range(n - 1, -1, -1):\n        if height < h[i]:\n            height = h[i]\n            if c[index] != c[i]:\n                color.append(c[i])\n    color = set(color)\n    print(len(color))", "t = int(input())\nfor _ in range(t):\n    (n, m) = [int(v) for v in input().strip().split()]\n    arrN = [int(v) for v in input().strip().split()]\n    arrM = [int(v) for v in input().strip().split()]\n    maxN = max(arrN)\n    index = n - arrN[::-1].index(maxN) - 1\n    latest = arrN[-1]\n    indexC = n - 1\n    col = [arrM[-1]]\n    while indexC > index:\n        if arrN[indexC - 1] > latest:\n            if arrM[indexC - 1] in col:\n                latest = arrN[indexC - 1]\n            else:\n                latest = arrN[indexC - 1]\n                col.append(arrM[indexC - 1])\n        indexC -= 1\n    print(len(col))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    height = list(map(int, input().split()))\n    color = list(map(int, input().split()))\n    max = height[n - 1]\n    col = color[n - 1]\n    wall = [col]\n    for j in range(n - 2, -1, -1):\n        if height[j] > max:\n            max = height[j]\n            col = color[j]\n            wall.append(col)\n    traverse = []\n    for entry in wall:\n        if entry not in traverse:\n            traverse.append(entry)\n    print(len(traverse))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cnt = []\n    for i in range(n):\n        flag = True\n        for j in range(i + 1, n):\n            if h[j] >= h[i]:\n                flag = False\n                break\n        if flag:\n            cnt.append(c[i])\n    print(len(set(cnt)))", "class Stack:\n\n    def __init__(self):\n        self.stack = []\n        self.top = -1\n\n    def push(self, item, color):\n        self.top += 1\n        self.stack.append([item, color])\n        return True\n\n    def pop(self):\n        if self.top == -1:\n            return\n        else:\n            self.top -= 1\n            return self.stack.pop()\n\n    def peek(self):\n        if self.top == -1:\n            return\n        else:\n            return self.stack[self.top]\n\n    def isempty(self):\n        if self.top == -1:\n            return True\n        else:\n            return False\n\n    def display(self):\n        for i in range(0, self.top + 1):\n            print(self.stack[i], end=' ')\n        print()\nt = int(input())\nwhile t:\n    s = Stack()\n    k = list(map(int, input().split()))\n    height = list(map(int, input().split()))\n    color = list(map(int, input().split()))\n    n = k[0]\n    m = k[1]\n    m += 1\n    arr = [0] * m\n    s.push(height[0], color[0])\n    for i in range(1, n):\n        if height[i] >= s.peek()[0]:\n            while not s.isempty() and height[i] >= s.peek()[0]:\n                s.pop()\n            s.push(height[i], color[i])\n        else:\n            s.push(height[i], color[i])\n    while not s.isempty():\n        color = s.pop()\n        arr[color[1]] = 1\n    count = 0\n    for i in range(1, m):\n        if arr[i] == 1:\n            count += 1\n    print(count)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    v = [h[0]]\n    cv = [c[0]]\n    for i in range(1, n):\n        j = 0\n        while j < len(v):\n            if v[j] <= h[i]:\n                break\n            j += 1\n        v = v[:j] + [h[i]]\n        cv = cv[:j] + [c[i]]\n    cv.sort()\n    ctr = 1\n    for i in range(1, len(cv)):\n        if cv[i - 1] != cv[i]:\n            ctr += 1\n    print(ctr)", "for _ in range(int(input())):\n    (n, _) = map(int, input().split())\n    n -= 2\n    heights = list(map(int, input().split()))\n    colors = list(map(int, input().split()))\n    last = heights[-1]\n    count = {colors[-1]: 1}\n    while n > -1:\n        if last < heights[n]:\n            last = heights[n]\n            count[colors[n]] = 1\n        n -= 1\n    print(len(count))", "for _ in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    height = list(map(int, input().strip().split()))\n    color = list(map(int, input().strip().split()))\n    ans_colors = set()\n    index = 0\n    while True:\n        max_height = max(height)\n        slicer = len(height) - height[::-1].index(max_height)\n        index = index + slicer\n        ans_colors.add(color[index - 1])\n        if slicer == len(height):\n            break\n        else:\n            height = height[slicer:]\n    print(len(ans_colors))", "from functools import reduce as rd\nimport operator as optr\nimport math\nimport itertools\ninp = lambda : map(int, input().split())\nfor __ in range(int(input())):\n    (n, m) = inp()\n    h = list(inp())\n    col = list(inp())\n    color = set()\n    check = 0\n    i = n - 1\n    while i >= 0:\n        if h[i] > check:\n            check = h[i]\n            color.add(col[i])\n        i -= 1\n    print(len(color))", "t = int(input())\nfor i in range(t):\n    a = input()\n    n = int(a.split()[0])\n    m = int(a.split()[1])\n    c = input()\n    d = input()\n    e = list(map(int, c.split()))\n    f = list(map(int, d.split()))\n    l = []\n    for j in range(n):\n        flag = 0\n        for k in range(j + 1, n):\n            if e[j] <= e[k]:\n                flag = 1\n                break\n        if flag == 0:\n            l.append(f[j])\n    s = set(l)\n    print(len(s))", "for _ in range(int(input())):\n    (n, m) = map(int, input().strip().split())\n    heights = list(map(int, input().strip().split()))\n    colors = list(map(int, input().strip().split()))\n    pairs = list(zip(heights, colors))\n    if n == 1:\n        print(1)\n        continue\n    current = n - 1\n    index = n - 2\n    while index > -1:\n        if heights[current] >= heights[index]:\n            heights[index] = -1\n            colors[index] = -1\n        else:\n            current = index\n        index -= 1\n    cache = {x: 1 for x in colors if x != -1}\n    print(len(cache.keys()))", "t = int(input())\nfor i in range(t):\n    a = input()\n    n = int(a.split()[0])\n    m = int(a.split()[1])\n    c = input()\n    d = input()\n    e = list(map(int, c.split()))\n    f = list(map(int, d.split()))\n    l = []\n    for j in range(n):\n        flag = 0\n        for k in range(j + 1, n):\n            if e[j] <= e[k]:\n                flag = 1\n                break\n        if flag == 0:\n            l.append(f[j])\n    s = set(l)\n    print(len(s))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    own = []\n    for i in range(n):\n        H = h[i]\n        C = c[i]\n        hello = []\n        for j in own:\n            if H < j[0]:\n                hello.append(j)\n        own = hello\n        own.append((H, C))\n    my = set()\n    for i in own:\n        my.add(i[1])\n    print(len(my))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    top = 0\n    col = set()\n    ref = []\n    for i in range(n - 1, 0, -1):\n        if h[i] > top:\n            top = h[i]\n            col.add(c[i])\n    if h[0] > top:\n        col.add(c[0])\n    print(len(col))", "import math as ma\nimport sys\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef num():\n    return map(int, sys.stdin.readline().split())\n\ndef nu():\n    return int(sys.stdin.readline())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = nu()\nfor it in range(t):\n    (n, m) = num()\n    a = li()\n    c = li()\n    z = [0] * n\n    pp = [0] * n\n    pp[n - 1] = a[n - 1]\n    for i in range(n - 2, -1, -1):\n        pp[i] = max(a[i + 1], pp[i + 1])\n    sq = set()\n    for i in range(0, n - 1):\n        if a[i] <= pp[i]:\n            continue\n        sq.add(c[i])\n    sq.add(c[n - 1])\n    print(len(sq))", "from heapq import heappush, heappop\n\ndef main():\n    for _ in range(int(input())):\n        (N, M) = map(int, input().split())\n        H = list(map(int, input().split()))\n        C = list(map(int, input().split()))\n        heap = list()\n        for (h, c) in zip(H, C):\n            while len(heap) > 0 and heap[0][0] <= h:\n                heappop(heap)\n            heappush(heap, (h, c))\n        print(len(set((c for (h, c) in heap))))\nmain()", "from sys import stdin, stdout\nimport cProfile, math\nfrom collections import Counter\nfrom bisect import bisect_left\nimport itertools\nfrom copy import deepcopy\nfrom fractions import Fraction\nprintHeap = str()\nmemory_constrained = False\nN = 10 ** 9 + 7\nimport sys\nsys.setrecursionlimit(10000000)\n\nclass Operation:\n\n    def __init__(self, name, function, function_on_equal, neutral_value=0):\n        self.name = name\n        self.f = function\n        self.f_on_equal = function_on_equal\n\ndef add_multiple(x, count):\n    return x * count\n\ndef min_multiple(x, count):\n    return x\n\ndef max_multiple(x, count):\n    return x\nsum_operation = Operation('sum', sum, add_multiple, 0)\nmin_operation = Operation('min', min, min_multiple, 1000000000.0)\nmax_operation = Operation('max', max, max_multiple, -1000000000.0)\n\nclass SegmentTree:\n\n    def __init__(self, array, operations=[sum_operation, min_operation, max_operation]):\n        self.array = array\n        if type(operations) != list:\n            raise TypeError('operations must be a list')\n        self.operations = {}\n        for op in operations:\n            self.operations[op.name] = op\n        self.root = SegmentTreeNode(0, len(array) - 1, self)\n\n    def query(self, start, end, operation_name):\n        if self.operations.get(operation_name) == None:\n            raise Exception('This operation is not available')\n        return self.root._query(start, end, self.operations[operation_name])\n\n    def summary(self):\n        return self.root.values\n\n    def update(self, position, value):\n        self.root._update(position, value)\n\n    def update_range(self, start, end, value):\n        self.root._update_range(start, end, value)\n\n    def __repr__(self):\n        return self.root.__repr__()\n\nclass SegmentTreeNode:\n\n    def __init__(self, start, end, segment_tree):\n        self.range = (start, end)\n        self.parent_tree = segment_tree\n        self.range_value = None\n        self.values = {}\n        self.left = None\n        self.right = None\n        if start == end:\n            self._sync()\n            return\n        self.left = SegmentTreeNode(start, start + (end - start) // 2, segment_tree)\n        self.right = SegmentTreeNode(start + (end - start) // 2 + 1, end, segment_tree)\n        self._sync()\n\n    def _query(self, start, end, operation):\n        if end < self.range[0] or start > self.range[1]:\n            return None\n        if start <= self.range[0] and self.range[1] <= end:\n            return self.values[operation.name]\n        self._push()\n        left_res = self.left._query(start, end, operation) if self.left else None\n        right_res = self.right._query(start, end, operation) if self.right else None\n        if left_res is None:\n            return right_res\n        if right_res is None:\n            return left_res\n        return operation.f([left_res, right_res])\n\n    def _update(self, position, value):\n        if position < self.range[0] or position > self.range[1]:\n            return\n        if position == self.range[0] and self.range[1] == position:\n            self.parent_tree.array[position] = value\n            self._sync()\n            return\n        self._push()\n        self.left._update(position, value)\n        self.right._update(position, value)\n        self._sync()\n\n    def _update_range(self, start, end, value):\n        if end < self.range[0] or start > self.range[1]:\n            return\n        if start <= self.range[0] and self.range[1] <= end:\n            self.range_value = value\n            self._sync()\n            return\n        self._push()\n        self.left._update_range(start, end, value)\n        self.right._update_range(start, end, value)\n        self._sync()\n\n    def _sync(self):\n        if self.range[0] == self.range[1]:\n            for op in self.parent_tree.operations.values():\n                current_value = self.parent_tree.array[self.range[0]]\n                if self.range_value is not None:\n                    current_value = self.range_value\n                self.values[op.name] = op.f([current_value])\n        else:\n            for op in self.parent_tree.operations.values():\n                result = op.f([self.left.values[op.name], self.right.values[op.name]])\n                if self.range_value is not None:\n                    bound_length = self.range[1] - self.range[0] + 1\n                    result = op.f_on_equal(self.range_value, bound_length)\n                self.values[op.name] = result\n\n    def _push(self):\n        if self.range_value is None:\n            return\n        if self.left:\n            self.left.range_value = self.range_value\n            self.right.range_value = self.range_value\n            self.left._sync()\n            self.right._sync()\n            self.range_value = None\n\n    def __repr__(self):\n        ans = '({}, {}): {}\\n'.format(self.range[0], self.range[1], self.values)\n        if self.left:\n            ans += self.left.__repr__()\n        if self.right:\n            ans += self.right.__repr__()\n        return ans\n\ndef display(string_to_print):\n    stdout.write(str(string_to_print) + '\\n')\n\ndef primeFactors(n):\n    factors = dict()\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        while n % i == 0:\n            if i in factors:\n                factors[i] += 1\n            else:\n                factors[i] = 1\n            n = n // i\n    if n > 2:\n        factors[n] = 1\n    return factors\n\ndef isprime(n):\n    if n < 4:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    w = 2\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i += w\n        w = 6 - w\n    return True\n\ndef test_print(*args):\n    if test:\n        print(args)\n\ndef display_list(list1, sep=' '):\n    stdout.write(sep.join(map(str, list1)) + '\\n')\n\ndef get_int():\n    return int(stdin.readline().strip())\n\ndef get_tuple():\n    return map(int, stdin.readline().split())\n\ndef get_list():\n    return list(map(int, stdin.readline().split()))\nmemory = dict()\n\ndef clear_cache():\n    global memory\n    memory = dict()\n\ndef cached_fn(fn, *args):\n    global memory\n    if args in memory:\n        return memory[args]\n    else:\n        result = fn(*args)\n        memory[args] = result\n        return result\nTestCases = True\ntest = False\n\ndef main():\n    (n, m) = get_tuple()\n    heights = get_list()\n    colors = get_list()\n    li = list()\n    for i in range(n):\n        while len(li) > 0 and li[-1][0] <= heights[i]:\n            li.pop()\n        li.append([heights[i], colors[i]])\n    hi = [x[0] for x in li]\n    ci = [x[1] for x in li]\n    print(len(set(ci)))\nif TestCases:\n    for _ in range(get_int()):\n        cProfile.run('main()') if test else main()\nelse:\n    cProfile.run('main()') if test else main()", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n    b = [int(x) for x in input().split()]\n    distinct_color = {}\n    (f, ans) = (0, 0)\n    for i in range(n):\n        for j in range(i - 1, -1, -1):\n            if a[j] > a[i]:\n                break\n            else:\n                a[j] = 0\n    for i in range(n):\n        if a[i] != 0:\n            if not distinct_color.get(b[i]):\n                distinct_color[b[i]] = 1\n    print(len(distinct_color))", "testcase = int(input())\nwhile testcase:\n    testcase -= 1\n    (n, m) = [int(x) for x in input().strip().split()]\n    h = [int(x) for x in input().strip().split()]\n    c = [int(x) for x in input().strip().split()]\n    h = h[::-1]\n    c = c[::-1]\n    mi = h[0]\n    q = c[0]\n    t = 1\n    col = [c[0]]\n    for i in range(1, n):\n        if h[i] > mi:\n            if c[i] != q:\n                col.append(c[i])\n                q = c[i]\n                mi = h[i]\n                t += 1\n            elif c[i] == q:\n                mi = h[i]\n    print(len(set(col)))", "t = int(input())\nfor i in range(t):\n    a = input()\n    n = int(a.split()[0])\n    m = int(a.split()[1])\n    c = input()\n    d = input()\n    e = list(map(int, c.split()))\n    f = list(map(int, d.split()))\n    l = []\n    for j in range(n):\n        flag = 0\n        for k in range(j + 1, n):\n            if e[j] <= e[k]:\n                flag = 1\n                break\n        if flag == 0:\n            l.append(f[j])\n    s = set(l)\n    print(len(s))", "T = int(input())\nfor i in range(0, T):\n    (N, M) = map(int, input().split())\n    H = list(map(int, input().split()))\n    C = list(map(int, input().split()))\n    difcol = 1\n    color = [0] * N\n    color[0] = C[0]\n    for j in range(1, N):\n        if H[j] < H[j - 1]:\n            color[j] = C[j]\n        else:\n            for k in range(j - 1, -1, -1):\n                if H[k] > H[j]:\n                    break\n                else:\n                    color[k] = C[j]\n    set1 = set(color)\n    set1.discard(0)\n    print(len(set1))", "def fun():\n    test = int(input())\n    for i in range(test):\n        (n, k) = map(int, input().split())\n        h = list(map(int, input().split()))\n        c = list(map(int, input().split()))\n        occ = dict()\n        for i in range(n):\n            occ[h[i]] = occ.get(h[i], 0) + 1\n        maxi = [0] * (n + 1)\n        for i in range(n - 1, -1, -1):\n            maxi[i] = max(maxi[i + 1], h[i])\n        ans_ind = []\n        j = 0\n        d = dict()\n        for i in range(n):\n            if h[i] == maxi[i]:\n                d[h[i]] = d.get(h[i], 0) + 1\n                if d[h[i]] == occ[h[i]]:\n                    ans_ind.append(i)\n                    j += 1\n                else:\n                    j += 1\n            else:\n                occ[h[i]] -= 1\n        used = [0] * (k + 1)\n        for i in ans_ind:\n            used[c[i]] = 1\n        print(sum(used))\nfun()", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    cl = list()\n    hl = list()\n    for j in range(n):\n        while hl != [] and h[j] >= hl[-1]:\n            hl.pop()\n            cl.pop()\n        hl.append(h[j])\n        cl.append(c[j])\n    s = set(cl)\n    print(len(s))", "T = int(input())\nwhile T:\n    (N, M) = list(map(int, input().split()))\n    heights = list(map(int, input().split()))\n    colors = list(map(int, input().split()))\n    curr_max_height = heights[N - 1]\n    distinct_colors = set()\n    distinct_colors.add(colors[N - 1])\n    count = 1\n    for i in reversed(range(N - 1)):\n        if heights[i] > curr_max_height:\n            if colors[i] not in distinct_colors:\n                distinct_colors.add(colors[i])\n                count += 1\n            curr_max_height = heights[i]\n    print(count)\n    T -= 1", "from collections import defaultdict as dd\n\ndef default():\n    return 0\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    li = [0]\n    for i in range(1, n):\n        done = False\n        for (pos, ind) in enumerate(li):\n            if h[ind] <= h[i]:\n                li = li[:pos] + [i]\n                done = True\n                break\n        if not done:\n            li = li + [i]\n    prev = li[0]\n    color = c[prev]\n    count = 1\n    seen = dd(default)\n    seen[color] = 1\n    for ind in li[1:]:\n        col = c[ind]\n        if col != color:\n            color = col\n            if not seen[col]:\n                seen[col] = 1\n                count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    a.reverse()\n    maxi = a[0]\n    b.reverse()\n    l = [b[0]]\n    for i in range(len(b)):\n        if a[i] > maxi:\n            maxi = a[i]\n            l.append(b[i])\n    l = list(set(l))\n    print(len(l))", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    arr1 = [int(i) for i in input().split()]\n    arr2 = [int(i) for i in input().split()]\n    ll = []\n    col = []\n    for i in range(len(arr1)):\n        if i == 0:\n            ll.append(arr1[i])\n            col.append(arr2[i])\n        elif min(ll) > arr1[i]:\n            if arr2[i] not in col:\n                col.append(arr2[i])\n                ll.append(arr1[i])\n        else:\n            while len(ll) > 0 and min(ll) <= arr1[i]:\n                col.remove(col[ll.index(min(ll))])\n                ll.remove(min(ll))\n            if arr2[i] not in col:\n                col.append(arr2[i])\n                ll.append(arr1[i])\n    print(len(col))", "from bisect import bisect_left\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    (a, cl, l) = ([], [], 0)\n    for i in range(n):\n        if i == 0:\n            a.append(h[i])\n            cl.append(c[i])\n            l += 1\n        elif a[l - 1] <= h[i]:\n            while l > 0 and a[l - 1] <= h[i]:\n                a.pop()\n                cl.pop()\n                l -= 1\n            a.append(h[i])\n            cl.append(c[i])\n            l += 1\n        else:\n            a.append(h[i])\n            cl.append(c[i])\n            l += 1\n    print(len(set(cl)))", "t = int(input())\nfor _ in range(t):\n    (n, m) = tuple(map(int, input().split()))\n    ar1 = list(map(int, input().split()))\n    ar2 = list(map(int, input().split()))\n    s = set()\n    s.add(ar2[n - 1])\n    k = ar1[n - 1]\n    for i in range(n - 2, -1, -1):\n        if ar1[i] > k:\n            k = ar1[i]\n            s.add(ar2[i])\n    print(len(s))", "t = int(input())\nfor j in range(t):\n    (n, m) = list(map(int, input().split()))\n    a = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    c = []\n    for i in range(m + 1):\n        c.append(0)\n    c[b[n - 1]] = 1\n    for i in range(n - 1, -1, -1):\n        if i == n - 1:\n            k = a[i]\n            continue\n        if a[i] > k:\n            c[b[i]] += 1\n            k = a[i]\n    cou = 0\n    for i in range(m + 1):\n        if c[i] > 0:\n            cou = cou + 1\n    print(cou)", "for i in range(int(input())):\n    (n, m) = map(int, input().split())\n    h = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    h = h[::-1]\n    c = c[::-1]\n    hmax = max(h)\n    ha = []\n    ha.append(h[0])\n    check = max(ha)\n    count = 1\n    ca = []\n    ca.append(c[0])\n    for j in range(1, n):\n        if hmax in ha:\n            break\n        if h[j] > check:\n            ha.append(h[j])\n            if c[j] not in ca:\n                count = count + 1\n                ca.append(c[j])\n        check = max(ha)\n    print(count)", "T = int(input())\nfor q in range(T):\n    (n, m) = map(int, input().strip().split())\n    hei = list(map(int, input().strip().split()))\n    colo = list(map(int, input().strip().split()))\n    ans = 0\n    arr = []\n    c = 1\n    k = hei[n - 1]\n    ind = [colo[n - 1]]\n    for i in range(n - 1, -1, -1):\n        if hei[i] > k:\n            c += 1\n            k = hei[i]\n            ind.append(colo[i])\n    mp = {}\n    ans = 0\n    for i in range(len(ind)):\n        if ind[i] not in mp:\n            ans += 1\n            mp[ind[i]] = 1\n    print(ans)", "import sys\nsys.setrecursionlimit(100000)\n\ndef check(h, c, count, pv, dict):\n    m = max(h)\n    for k in range(len(h) - 1, -1, -1):\n        if h[k] == m:\n            break\n    if count == 0:\n        pv = c[k]\n        count = count + 1\n        dict[c[k]] = 1\n    elif c[k] != pv and dict[c[k]] == 0:\n        count = count + 1\n        pv = c[k]\n        dict[c[k]] = 1\n    h = h[k + 1:len(h)]\n    c = c[k + 1:len(c)]\n    if h == []:\n        return count\n    else:\n        return check(h, c, count, pv, dict)\nt = int(input())\nfor i in range(0, t):\n    s = input()\n    s = list(map(int, s.split()))\n    n = s[0]\n    m = s[1]\n    h = input()\n    h = list(map(int, h.split()))\n    c = input()\n    c = list(map(int, c.split()))\n    dict = {}\n    for j in range(1, m + 1):\n        dict[j] = 0\n    print(check(h, c, 0, 0, dict))", "t = int(input())\nwhile t:\n    (n, m) = [int(i) for i in input().split()]\n    h = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    z = list(set(c))\n    if len(z) == 1:\n        print(1)\n        t -= 1\n        continue\n    max = len(z)\n    i = 1\n    while i < n:\n        j = i - 1\n        while j >= 0:\n            if c[j] != 0:\n                if h[i] >= h[j]:\n                    c[j] = 0\n                else:\n                    break\n            j -= 1\n        i += 1\n    new = list(set(c))\n    if 0 in new:\n        print(len(new) - 1)\n    else:\n        print(len(new))\n    t -= 1", "t = int(input())\nfor i in range(t):\n    lis0 = list(map(int, input().split()))\n    n = lis0[0]\n    m = lis0[1]\n    ct = 0\n    lis1 = list(map(int, input().split()))\n    lis2 = list(map(int, input().split()))\n    cmp = lis1[n - 1]\n    lis3 = []\n    lis3.append(lis2[n - 1])\n    for j in range(n - 1):\n        if lis1[n - 2 - j] > cmp:\n            lis3.append(lis2[n - 2 - j])\n            cmp = lis1[n - 2 - j]\n    lis3.sort()\n    for k in range(len(lis3) - 1):\n        if lis3[k] == lis3[k + 1]:\n            ct += 1\n    print(len(lis3) - ct)", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    k = list(map(int, input().split()))\n    c = l[-1]\n    x = [c]\n    for j in l[-2:0:-1]:\n        c = max(c, j)\n        x.append(c)\n    x.reverse()\n    d = []\n    for j in range(n - 1):\n        if l[j] > x[j]:\n            d.append(k[j])\n    d.append(k[-1])\n    print(len(set(d)))"]