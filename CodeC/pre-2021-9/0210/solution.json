["import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "for _ in range(0, int(input())):\n    l = list(map(int, input().split()))\n    if 0 in l:\n        print('Yes')\n    elif l[0] + l[1] == 0 or l[1] + l[2] == 0 or l[2] + l[0] == 0 or (l[0] + l[3] == 0) or (l[2] + l[3] == 0) or (l[1] + l[3] == 0):\n        print('Yes')\n    elif l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or l[1] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0):\n        print('Yes')\n    elif sum(l) == 0:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    l = list(map(int, input().split()))\n    if 0 in l:\n        print('Yes')\n    elif l[0] + l[1] == 0 or l[0] + l[2] == 0 or l[0] + l[3] == 0 or (l[1] + l[2] == 0) or (l[2] + l[3] == 0) or (l[1] + l[3] == 0):\n        print('Yes')\n    elif l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or l[1] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0):\n        print('Yes')\n    elif sum(l) == 0:\n        print('Yes')\n    else:\n        print('No')", "def solveQuestion():\n    l = list(map(int, input().split()))\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[2] == 0 or l[0] + l[3] == 0 or (l[1] + l[2] == 0) or (l[1] + l[3] == 0) or (l[2] + l[3] == 0) or (l[0] + l[2] + l[3] == 0) or (l[0] + l[1] + l[3] == 0) or (l[1] + l[2] + l[3] == 0) or (l[0] + l[1] + l[2] == 0):\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(int(input())):\n    print(solveQuestion())", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    flag = 0\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or b + c + d == 0 or c + d + a == 0 or (a + b + d == 0):\n        print('Yes')\n    else:\n        print('No')", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "t = int(input())\nfor _ in range(t):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or b + c + d == 0 or (a + c + d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "import itertools\n\ndef ans(n):\n    for i in range(1, len(n) + 1):\n        s = itertools.combinations(n, i)\n        for i in s:\n            if sum(i) == 0:\n                return 'Yes'\n    return 'No'\nfor i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    print(ans([a, b, c, d]))", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "def sumZero(A):\n    if 0 in A or sum(A) == 0:\n        return 'Yes'\n    elif sum(A) in A:\n        return 'Yes'\n    else:\n        for i in range(4):\n            for j in range(4):\n                if A[i] + A[j] == 0:\n                    return 'Yes'\n        return 'No'\nfor _ in range(int(input())):\n    A = [int(i) for i in input().split()]\n    print(sumZero(A))", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "t = int(input())\nfor tc in range(t):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0) or (abs(a + b) == 0) or (abs(a + c) == 0) or (abs(a + d) == 0) or (abs(b + c) == 0) or (abs(b + d) == 0) or (abs(c + d) == 0) or (abs(a + b + c) == 0) or (abs(a + b + d) == 0) or (abs(a + c + d) == 0) or (abs(b + c + d) == 0) or (abs(a + b + c + d) == 0):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\ntr = []\nfor mm in range(0, t):\n    up = str(input())\n    kl = up.split(' ')\n    tvc = []\n    for mm in kl:\n        tvc.append(int(mm))\n    tr.append(tvc)\nfor nn in tr:\n    ip = list(nn)\n    ip.sort()\n    if ip[0] > 0:\n        print('No')\n    elif 0 in ip:\n        print('Yes')\n    else:\n        po = 0\n        for kk in ip:\n            if kk < 0:\n                if kk * -1 in ip:\n                    po = 1\n                    print('Yes')\n                    break\n            else:\n                break\n        if po == 0:\n            upt = 0\n            for vvc in ip:\n                upt += vvc\n            if upt == 0:\n                print('Yes')\n            else:\n                ptfc = 0\n                kd = 'No'\n                for vvx in range(0, len(ip)):\n                    ptfc += ip[vvx]\n                    gmty = 0\n                    for gg in range(0, len(ip)):\n                        if gg != vvx:\n                            ptfc += ip[gg]\n                            ltrop = 0\n                            for thyu in range(0, len(ip)):\n                                if thyu != gg and thyu != vvx:\n                                    ptfc += ip[thyu]\n                                    if ptfc == 0:\n                                        ltrop = 1\n                                        break\n                                    else:\n                                        ptfc -= ip[thyu]\n                            if ltrop == 1:\n                                gmty = 1\n                                break\n                            else:\n                                ptfc -= ip[gg]\n                    if gmty == 1:\n                        kd = 'Yes'\n                        break\n                    else:\n                        ptfc -= ip[vvx]\n                print(kd)", "import itertools\ntc = int(input())\nfor _ in range(tc):\n    x = set(map(int, input().split()))\n    subsets = []\n    for r in range(1, len(x) + 1):\n        for subset in itertools.combinations(x, r):\n            subsets.append(subset)\n    sums = []\n    for i in subsets:\n        sums.append(sum(i))\n    if 0 in sums:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or b + c + d == 0 or (a + c + d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or b + c + d == 0 or (a + c + d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "def check_sub(a, b, c, d):\n    if 0 in [a, b, c, d]:\n        return 1\n    elif a + b + c + d == 0:\n        return 1\n    elif a + b + c == 0 or a + b + d == 0 or a + c + d == 0 or (b + c + d == 0):\n        return 1\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        return 1\n    else:\n        return 0\nfor _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    res = check_sub(a, b, c, d)\n    if res:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    n = list(map(int, input().split()))\n    if 0 in n:\n        print('Yes')\n    else:\n        a = n[0]\n        b = n[1]\n        c = n[2]\n        d = n[3]\n        if sum(n) == 0 or a + b + c == 0 or a + c + d == 0 or (a + d + b == 0) or (c + b + d == 0) or (a + b == 0) or (a + c == 0) or (a + d == 0) or (b + c == 0) or (b + d == 0) or (c + d == 0):\n            print('Yes')\n        else:\n            print('No')", "import itertools\n\ndef has_sum_zero(nums):\n    for i in range(1, len(nums) + 1):\n        subsets = itertools.combinations(nums, i)\n        for subset in subsets:\n            if sum(subset) == 0:\n                return 'Yes'\n    return 'No'\nT = int(input())\nfor i in range(T):\n    (a, b, c, d) = map(int, input().split())\n    print(has_sum_zero([a, b, c, d]))", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "from itertools import combinations\nfor _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    lst = []\n    for i in range(1, 5):\n        all_comb = combinations([a, b, c, d], i)\n        for comb in all_comb:\n            lst.append(list(comb))\n    for comb in lst:\n        if sum(comb) == 0:\n            print('Yes')\n            break\n    else:\n        print('No')", "from itertools import combinations\nfor _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    lst = []\n    for i in range(1, 5):\n        all_comb = combinations([a, b, c, d], i)\n        for comb in all_comb:\n            lst.append(list(comb))\n    for comb in lst:\n        if sum(comb) == 0:\n            print('Yes')\n            break\n    else:\n        print('No')", "t = int(input())\nwhile t != 0:\n    l = list(map(int, input().split()))\n    if 0 in l:\n        print('Yes')\n    elif sum(l) == 0:\n        print('Yes')\n    elif l[0] + l[1] == 0 or l[1] + l[2] == 0 or l[2] + l[3] == 0 or (l[0] + l[2] == 0) or (l[0] + l[3] == 0) or (l[1] + l[3] == 0) or (l[0] + l[1] + l[2] == 0) or (l[1] + l[2] + l[3] == 0) or (l[0] + l[1] + l[3] == 0) or (l[0] + l[3] + l[2] == 0):\n        print('Yes')\n    else:\n        print('No')\n    t -= 1", "t = int(input())\nfor i in range(t):\n    a = list(map(int, input().split()))\n    b = []\n    c = []\n    k = 0\n    for j in a:\n        if j == 0:\n            k = 1\n            break\n    if k == 1:\n        print('Yes')\n    elif a[0] + a[1] == 0 or a[0] + a[2] == 0 or a[0] + a[3] == 0 or (a[1] + a[2] == 0) or (a[1] + a[3] == 0) or (a[2] + a[3] == 0) or (a[0] + a[1] + a[2] == 0) or (a[0] + a[1] + a[3] == 0) or (a[0] + a[2] + a[3] == 0) or (a[1] + a[2] + a[3] == 0) or (a[0] + a[1] + a[2] + a[3] == 0):\n        print('Yes')\n    else:\n        print('No')", "def subset(a, b, c, d):\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        return True\n    if a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        return True\n    if a + b + c == 0 or a + b + d == 0 or a + c + d == 0 or (b + c + d == 0):\n        return True\n    if a + b + c + d == 0:\n        return True\n    return False\nfor i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    if subset(a, b, c, d):\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0) or (a + b + c == 0) or (a + b + d == 0) or (a + c + d == 0) or (b + c + d == 0) or (a + b + c + d == 0):\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    A = list(map(int, input().split(' ')))[:4]\n    if A[0] == 0 or A[1] == 0 or A[2] == 0 or (A[3] == 0) or (A[0] + A[1] == 0) or (A[0] + A[2] == 0) or (A[0] + A[3] == 0) or (A[0] + A[1] + A[2] == 0) or (A[0] + A[2] + A[3] == 0) or (A[0] + A[1] + A[3] == 0) or (A[1] + A[2] + A[3] == 0) or (A[1] + A[2] == 0) or (A[1] + A[3] == 0) or (A[2] + A[3] == 0) or (A[0] + A[2] + A[3] == 0) or (A[0] + A[1] + A[2] + A[3] == 0):\n        print('Yes')\n    else:\n        print('No')", "import itertools\n\ndef permutation_with_replacement(iterable, r=None):\n    r = len(iterable) if r is None else r\n    return list(itertools.product(*[iterable] * r))\nfor _ in range(int(input())):\n    a = [int(x) for x in input().split()]\n    ans = 'No'\n    b = permutation_with_replacement([0, 1], 4)\n    for i in b[1:]:\n        cur = 0\n        for j in range(4):\n            cur += i[j] * a[j]\n        if cur == 0:\n            ans = 'Yes'\n            break\n    print(ans)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "def main():\n    for _ in range(int(input())):\n        A = list(map(int, input().split(' ')))[:4]\n        if 0 in A:\n            print('Yes')\n        elif sum(A) == 0:\n            print('Yes')\n        elif A[0] == 0 or A[1] == 0 or A[2] == 0 or (A[3] == 0) or (A[0] + A[1] == 0) or (A[0] + A[2] == 0) or (A[0] + A[3] == 0) or (A[0] + A[1] + A[2] == 0) or (A[0] + A[2] + A[3] == 0) or (A[0] + A[1] + A[3] == 0) or (A[1] + A[2] + A[3] == 0) or (A[1] + A[2] == 0) or (A[1] + A[3] == 0) or (A[2] + A[3] == 0) or (A[0] + A[2] + A[3] == 0):\n            print('Yes')\n        else:\n            print('No')\nmain()", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split()))\n    if 0 in l:\n        print('Yes')\n    elif sum(l) == 0:\n        print('Yes')\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        print('Yes')\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        print('Yes')\n    elif l[2] + l[3] == 0:\n        print('Yes')\n    else:\n        print('No')", "import itertools\n\ndef has_sum_zero(nums):\n    for i in range(1, len(nums) + 1):\n        subsets = itertools.combinations(nums, i)\n        for subset in subsets:\n            if sum(subset) == 0:\n                return 'Yes'\n    return 'No'\nT = int(input())\nfor i in range(T):\n    (a, b, c, d) = map(int, input().split())\n    print(has_sum_zero([a, b, c, d]))", "import itertools\nt = int(input())\nwhile t:\n    nums = list(map(int, input().split()))\n    if 0 in nums:\n        print('Yes')\n    else:\n        lst = []\n        n = 1\n        while n <= 4:\n            lst.extend(list(itertools.combinations(nums, n)))\n            n += 1\n        a = 0\n        for row in lst:\n            if sum(list(row)) == 0:\n                a = 1\n                break\n        if a == 1:\n            print('Yes')\n        else:\n            print('No')\n    t -= 1", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(int, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\n\ndef f():\n    l = I()\n    x = 1\n    if 0 in l:\n        return 'Yes'\n    elif sum(l) == 0:\n        return 'Yes'\n    elif l[0] + l[1] == 0 or l[0] + l[1] + l[2] == 0 or l[0] + l[2] + l[3] == 0 or (l[0] + l[1] + l[3] == 0) or (l[0] + l[2] == 0) or (l[0] + l[3] == 0):\n        return 'Yes'\n    elif l[1] + l[2] == 0 or l[1] + l[2] + l[3] == 0 or l[1] + l[3] == 0:\n        return 'Yes'\n    elif l[2] + l[3] == 0:\n        return 'Yes'\n    else:\n        return 'No'\nfor _ in range(IN()):\n    print(f())", "import itertools\nt = int(input())\nwhile t:\n    nums = list(map(int, input().split()))\n    if 0 in nums:\n        print('Yes')\n    else:\n        lst = []\n        n = 1\n        while n <= 4:\n            lst.extend(list(itertools.combinations(nums, n)))\n            n += 1\n        a = 0\n        for row in lst:\n            if sum(list(row)) == 0:\n                a = 1\n                break\n        if a == 1:\n            print('Yes')\n        else:\n            print('No')\n    t -= 1", "import itertools\nt = int(input())\nwhile t:\n    nums = list(map(int, input().split()))\n    if 0 in nums:\n        print('Yes')\n    else:\n        lst = []\n        n = 1\n        while n <= 4:\n            lst.extend(list(itertools.combinations(nums, n)))\n            n += 1\n        a = 0\n        for row in lst:\n            if sum(list(row)) == 0:\n                a = 1\n                break\n        if a == 1:\n            print('Yes')\n        else:\n            print('No')\n    t -= 1", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0) or (a + b + c == 0) or (a + b + d == 0) or (a + c + d == 0) or (b + c + d == 0) or (a + b + c + d == 0):\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    arr = sorted(list(map(int, input().split())))\n    (a, b, c, d) = (arr[0], arr[1], arr[2], arr[3])\n    if 0 in arr:\n        print('Yes')\n    elif (a + b and a + c and a + d and b + c and b + d and c + d and a + b + c and (a + b + d) and (a + c + d) and (b + c + d) and (a + b + c + d)) == 0:\n        print('Yes')\n    else:\n        print('No')", "def sumOfSubsetIsZero():\n    l = list(map(int, input().split(' ')))\n    op = [[]]\n    for i in l:\n        op += [lst + [i] for lst in op]\n        for i in range(1, len(op)):\n            if sum(op[i]) == 0:\n                return 'Yes'\n    return 'No'\nt = int(input())\nwhile t:\n    print(sumOfSubsetIsZero())\n    t -= 1", "def sumOfSubsetIsZero():\n    l = sorted(list(map(int, input().split(' '))))\n    op = [[]]\n    for i in l:\n        op += [lst + [i] for lst in op]\n    for i in range(1, len(op)):\n        if sum(op[i]) == 0:\n            return 'Yes'\n    return 'No'\nt = int(input())\nwhile t:\n    print(sumOfSubsetIsZero())\n    t -= 1", "t = int(input())\nfor ni in range(t):\n    l = list(map(int, input().split()))\n    (a, b, c, d) = (l[0], l[1], l[2], l[3])\n    if 0 in l or sum(l) == 0:\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0) or (a + b + c == 0) or (a + b + d == 0) or (a + c + d == 0) or (b + c + d == 0):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor _ in range(t):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0) or (a + b + c == 0) or (a + b + d == 0) or (a + c + d == 0) or (b + c + d == 0) or (a + b + c + d == 0):\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0) or (a + b + c == 0) or (a + b + d == 0) or (a + c + d == 0) or (b + c + d == 0) or (a + b + c + d == 0):\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0) or (a + b + c == 0) or (a + b + d == 0) or (a + c + d == 0) or (b + c + d == 0) or (a + b + c + d == 0):\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or b + c + d == 0 or (a + c + d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor tc in range(T):\n    arr = list(map(int, input().split(' ')))\n    if sum(arr) == 0:\n        print('Yes')\n    elif 0 in arr:\n        print('Yes')\n    elif arr[0] + arr[1] + arr[2] == 0 or arr[0] + arr[2] + arr[3] == 0 or arr[0] + arr[1] + arr[3] == 0 or (arr[1] + arr[2] + arr[3] == 0):\n        print('Yes')\n    elif arr[0] + arr[1] == 0 or arr[0] + arr[2] == 0 or arr[0] + arr[3] == 0 or (arr[1] + arr[2] == 0) or (arr[1] + arr[3] == 0) or (arr[2] + arr[3] == 0):\n        print('Yes')\n    else:\n        print('No')", "def solution(a):\n    if 0 in a or sum(a) == 0:\n        print('Yes')\n        return None\n    for i in a:\n        if i <= 0:\n            break\n    else:\n        print('No')\n        return None\n    if a[0] + a[1] + a[2] == 0 or a[0] + a[1] + a[3] == 0 or a[0] + a[2] + a[3] == 0 or (a[1] + a[2] + a[3] == 0):\n        print('Yes')\n        return None\n    elif a[0] + a[1] == 0 or a[0] + a[2] == 0 or a[0] + a[3] == 0 or (a[1] + a[2] == 0) or (a[1] + a[3] == 0) or (a[2] + a[3] == 0):\n        print('Yes')\n        return None\n    else:\n        print('No')\n    return None\nfor _ in range(int(input())):\n    a = list(map(int, input().split()))\n    solution(a)", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    l = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, a + c + d, b + c + d, a + b + c + d]\n    if 0 in l:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    l = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, a + c + d, b + c + d, a + b + c + d]\n    if 0 in l:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    l = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, a + c + d, b + c + d, a + b + c + d]\n    if 0 in l:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    l = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, a + c + d, b + c + d, a + b + c + d]\n    if 0 in l:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    l = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, a + c + d, b + c + d, a + b + c + d]\n    if 0 in l:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    s = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, d + c, a + b + c, a + c + d, b + c + d, a + b + d, a + b + c + d]\n    if 0 in s:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    s = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, d + c, a + b + c, a + c + d, b + c + d, a + b + d, a + b + c + d]\n    if 0 in s:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    arr = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, d + c, a + b + c, a + c + d, b + c + d, a + b + d, a + b + c + d]\n    if 0 in arr:\n        print('Yes')\n    else:\n        print('No')", "from itertools import combinations\nt = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split(' ')))\n    if 0 in l or sum(l) == 0:\n        print('Yes')\n    else:\n        choose = False\n        possibilities = list(list(combinations(l, 3)) + list(combinations(l, 2)))\n        for _ in possibilities:\n            if sum(_) == 0:\n                choose = True\n                break\n        if choose:\n            print('Yes')\n        else:\n            print('No')", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    arr = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, a + c + d, a + b + c + d]\n    if 0 in arr:\n        print('Yes')\n    else:\n        print('No')", "from itertools import combinations\nt = int(input())\nfor _ in range(t):\n    l = list(map(int, input().split(' ')))\n    if 0 in l or sum(l) == 0:\n        print('Yes')\n    else:\n        choose = False\n        possibilities = list(list(combinations(l, 3)) + list(combinations(l, 2)))\n        for _ in possibilities:\n            if sum(_) == 0:\n                choose = True\n                break\n        if choose:\n            print('Yes')\n        else:\n            print('No')", "import itertools\nfor i in range(int(input())):\n    l = [int(x) for x in input().split()]\n    if 0 in l:\n        print('Yes')\n    elif sum(l) == 0:\n        print('Yes')\n    else:\n        flag = 0\n        for j in l:\n            if -j in l:\n                print('Yes')\n                flag = 1\n                break\n        if flag == 0:\n            for s in itertools.combinations(l, 3):\n                if sum(s) == 0:\n                    print('Yes')\n                    flag = 1\n                    break\n        if flag == 0:\n            print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    l = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, b + c + d, a + b + d, a + c + d, a + b + c + d]\n    if 0 in l:\n        print('Yes')\n    else:\n        print('No')", "n = int(input())\nfor i in range(n):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or b + c == 0 or c + d == 0 or (a + c == 0) or (a + d == 0) or (b + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or b + c + d == 0 or (a + d + c == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "n = int(input())\nfor _ in range(n):\n    (a, b, c, d) = map(int, input().split())\n    list = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, a + c + d, a + b + c + d]\n    if 0 in list:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    l = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, a + c + d, b + c + d, a + b + c + d]\n    if 0 in l:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor i in range(T):\n    (a, b, c, d) = map(int, input().split())\n    m = (a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, c + a + d, a + b + c + d)\n    if 0 in m:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    m = (a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, c + a + d, a + b + c + d)\n    if 0 in m:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    m = (a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, c + a + d, a + b + c + d)\n    if 0 in m:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    m = (a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, c + a + d, a + b + c + d)\n    if 0 in m:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    l = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, a + c + d, b + c + d, a + b + c + d]\n    if 0 in l:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or b + c + d == 0 or (a + c + d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    subset = [a, b, c, d, a + b, a + c, a + d, a + b + c, a + b + d, a + b + c + d, b + c, b + d, b + c + d, c + d, a + c + d]\n    if 0 in subset:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor i in range(0, T):\n    (a, b, c, d) = map(int, input().split())\n    s = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, a + c + d, a + b + c + d]\n    if 0 in s:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor i in range(0, T):\n    (a, b, c, d) = map(int, input().split())\n    s = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, a + c + d, a + b + c + d]\n    if 0 in s:\n        print('Yes')\n    else:\n        print('No')", "T = int(input())\nfor i in range(0, T):\n    (a, b, c, d) = map(int, input().split())\n    s = [a, b, c, d, a + b, a + c, a + d, b + c, b + d, c + d, a + b + c, a + b + d, b + c + d, a + c + d, a + b + c + d]\n    if 0 in s:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    subset = [a, b, c, d, a + b, a + c, a + d, a + b + c, a + b + d, a + b + c + d, b + c, b + d, b + c + d, c + d, a + c + d]\n    if 0 in subset:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    subset = [a, b, c, d, a + b, a + c, a + d, a + b + c, a + b + d, a + b + c + d, b + c, b + d, b + c + d, c + d, a + c + d]\n    if 0 in subset:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    subset = [a, b, c, d, a + b, a + c, a + d, a + b + c, a + b + d, a + b + c + d, b + c, b + d, b + c + d, c + d, a + c + d]\n    if 0 in subset:\n        print('Yes')\n    else:\n        print('No')", "def sol(i, s):\n    if i == 4:\n        x.append(s)\n        return\n    sol(i + 1, s)\n    sol(i + 1, s + l[i])\nfor _ in range(int(input())):\n    x = []\n    l = list(map(int, input().split()))\n    sol(0, 0)\n    flg = False\n    if l.count(0) > 1:\n        print('Yes')\n    else:\n        for i in range(16):\n            for j in range(16):\n                if i != j and x[i] + x[j] == 0:\n                    print('Yes')\n                    flg = True\n                    break\n            if flg:\n                break\n        else:\n            print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or b + c == 0 or c + d == 0 or (d + a == 0) or (a + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or b + c + d == 0 or c + d + a == 0 or (a + b + d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "for i in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or b + c == 0 or c + d == 0 or (d + a == 0) or (a + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or b + c + d == 0 or c + d + a == 0 or (a + b + d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    (a, b, c, d) = map(int, input().split())\n    m = [a, b, c, d, a + b, a + c, a + d, a + b + c, a + b + d, a + b + c + d, b + c, b + d, b + c + d, c + d, a + c + d]\n    if 0 in m:\n        print('Yes')\n    else:\n        print('No')", "import itertools\n\ndef all_options(l):\n    res = []\n    for n in range(len(l)):\n        temp = list(itertools.permutations(l, n + 1))\n        for item in temp:\n            res += [sum(item)]\n    return res\nfor _ in range(int(input())):\n    l = list(map(int, input().split()))\n    ans = 'Yes'\n    if not 0 in l:\n        ans = 'No'\n        negs = [x for x in l if x < 0]\n        if not len(negs) in [0, 4]:\n            poss = [x for x in l if x > 0]\n            neg_ops = all_options(negs)\n            pos_ops = all_options(poss)\n            for op in neg_ops:\n                if -op in pos_ops:\n                    ans = 'Yes'\n                    break\n    print(ans)", "a = int(input(''))\nfor i in range(a):\n    (a, b, c, d) = [int(x) for x in input('').split()]\n    if a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or a + c + d == 0 or (b + c + d == 0):\n        print('Yes')\n    elif a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "a = int(input(''))\nfor i in range(a):\n    (a, b, c, d) = [int(x) for x in input('').split()]\n    if a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or a + c + d == 0 or (b + c + d == 0):\n        print('Yes')\n    elif a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "from itertools import combinations\nt = int(input())\nfor _ in range(t):\n    numbers = list(map(int, input().split()))\n    done = False\n    for i in range(1, len(numbers) + 1):\n        if done:\n            break\n        for comb in combinations(numbers, i):\n            if sum(comb) == 0:\n                print('Yes')\n                done = True\n                break\n    if not done:\n        print('No')", "from itertools import combinations\nt = int(input())\nfor _ in range(t):\n    numbers = list(map(int, input().split()))\n    done = False\n    for i in range(1, len(numbers) + 1):\n        if done:\n            break\n        for comb in combinations(numbers, i):\n            if sum(comb) == 0:\n                print('Yes')\n                done = True\n                break\n    if not done:\n        print('No')", "for _ in range(int(input())):\n    l = list(map(int, input().split()))\n    flag = 0\n    if sum(l) == 0:\n        flag = 1\n    else:\n        for i in range(len(l)):\n            if l[i] == 0:\n                flag = 1\n                break\n        if flag == 0:\n            for i in range(len(l) - 1):\n                s = 0\n                for j in range(i + 1, len(l)):\n                    s = l[i] + l[j]\n                    if s == 0:\n                        flag = 1\n                        break\n            for i in range(len(l) - 2):\n                s = 0\n                for j in range(i + 1, len(l) - 1):\n                    for k in range(i + 2, len(l)):\n                        s = l[i] + l[j] + l[k]\n                        if s == 0:\n                            flag = 1\n                            break\n    if flag == 1:\n        print('Yes')\n    else:\n        print('No')", "import itertools\nfor tc in range(int(input())):\n    flag = 0\n    n = list(map(int, input().split()))\n    ones = list(itertools.combinations(n, 1))\n    twos = list(itertools.combinations(n, 2))\n    threes = list(itertools.combinations(n, 3))\n    for c in ones:\n        if sum(c) == 0:\n            flag = 1\n    for c in twos:\n        if sum(c) == 0:\n            flag = 1\n    for c in threes:\n        if sum(c) == 0:\n            flag = 1\n    if sum(n) == 0:\n        flag = 1\n    if flag == 1:\n        print('Yes')\n    else:\n        print('No')", "for _ in range(int(input())):\n    (a, b, c, d) = map(int, input().split())\n    if a == 0 or b == 0 or c == 0 or (d == 0):\n        print('Yes')\n    elif a + b == 0 or a + c == 0 or a + d == 0 or (b + c == 0) or (b + d == 0) or (c + d == 0):\n        print('Yes')\n    elif a + b + c == 0 or a + b + d == 0 or a + c + d == 0 or (b + c + d == 0):\n        print('Yes')\n    elif a + b + c + d == 0:\n        print('Yes')\n    else:\n        print('No')", "t = int(input())\nfor i in range(t):\n    a = list(map(int, input().split()))\n    ans = 'No'\n    pos_count = 0\n    neg_count = 0\n    a.sort()\n    if 0 in a:\n        ans = 'Yes'\n    elif sum(a) == 0:\n        ans = 'Yes'\n    elif 0 not in a:\n        for j in range(len(a)):\n            if a[j] < 0:\n                neg_count += 1\n            else:\n                pos_count += 1\n        for j in range(neg_count):\n            abs_a = abs(a[j])\n            if abs_a in a:\n                ans = 'Yes'\n                break\n            else:\n                for j in range(len(a)):\n                    if sum(a) - a[j] == 0:\n                        ans = 'Yes'\n                        break\n    print(ans)", "import itertools\n\ndef findsubsets(s, n):\n    return [set(i) for i in itertools.combinations(s, n)]\nfor a in range(int(input())):\n    elements = set(map(int, input().split()))\n    check = False\n    for i in range(1, 5, 1):\n        array = findsubsets(elements, i)\n        for i in array:\n            if sum(i) == 0:\n                check = True\n                break\n        if check:\n            break\n    if check:\n        print('Yes')\n    else:\n        print('No')", "import itertools\n\ndef findsubsets(s, n):\n    return [set(i) for i in itertools.combinations(s, n)]\nfor a in range(int(input())):\n    elements = set(map(int, input().split()))\n    check = False\n    for i in range(1, 5, 1):\n        array = findsubsets(elements, i)\n        for i in array:\n            if sum(i) == 0:\n                check = True\n                break\n        if check:\n            break\n    if check:\n        print('Yes')\n    else:\n        print('No')"]