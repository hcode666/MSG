["for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    crank = list(map(int, input().split()))\n    srank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: crank[x - 1])\n        student.append([i, c[0], _c])\n    sortstudent = sorted(student, key=lambda x: srank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sortstudent:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    liste = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: liste[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    liste = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: liste[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, p) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(p):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, P) = map(int, input().split())\n    cR = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cR[u - 1])\n        student.append([i, c[0], _c])\n    sort_stu = sorted(student, key=lambda u: sRank[u[0]])\n    cls_filed = [False] * u\n    cho = 0\n    for i in sort_stu:\n        ch = 0\n        for j in i[2]:\n            if cls_filed[j - 1] == False:\n                cls_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            cho = ch\n            break\n    print(cho)", "for i in range(int(input())):\n    (u, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cRank[u - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda u: sRank[u[0]])\n    clgs_filed = [False] * u\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (u, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cRank[u - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda u: sRank[u[0]])\n    clgs_filed = [False] * u\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (u, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cRank[u - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda u: sRank[u[0]])\n    clgs_filed = [False] * u\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (u, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cRank[u - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda u: sRank[u[0]])\n    clgs_filed = [False] * u\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (u, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda u: cRank[u - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda u: sRank[u[0]])\n    clgs_filed = [False] * u\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (X, P) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    student = []\n    for i in range(P):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        student.append([i, c[0], _c])\n    sort_student = sorted(student, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * X\n    choice = 0\n    for i in sort_student:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "for i in range(int(input())):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(y) for y in input().split()]\n    sRank = [int(y) for y in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(y) for y in input().split()]\n        _c = sorted(c[1:], key=lambda y: cRank[y - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda y: sRank[y[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (K, L) = map(int, input().split())\n    aRank = [int(x) for x in input().split()]\n    bRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(L):\n        a = [int(x) for x in input().split()]\n        _a = sorted(a[1:], key=lambda x: aRank[x - 1])\n        students.append([i, a[0], _a])\n    sort_students = sorted(students, key=lambda x: bRank[x[0]])\n    clgs_filed = [False] * K\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\nwhile t != 0:\n    (n, m) = list(map(int, input().split()))\n    coll = list(map(int, input().split()))\n    stud = list(map(int, input().split()))\n    pref = []\n    for i in range(m):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: coll[x - 1])\n        pref.append(_c)\n    allot = [0] * n\n    top_stud = []\n    for i in range(m):\n        top_stud.append(i)\n    top_stud = sorted(top_stud, key=lambda x: stud[x])\n    for i in top_stud:\n        flag = 0\n        j = 0\n        while j < len(pref[i]):\n            if allot[pref[i][j] - 1] == 0:\n                flag = 1\n                allot[pref[i][j] - 1] = 1\n                if i == 0:\n                    print(pref[i][j])\n                break\n            else:\n                j += 1\n        if i == 0:\n            if flag == 0:\n                print(0)\n            break\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (n, m) = list(map(int, input().split()))\n    coll = list(map(int, input().split()))\n    stud = list(map(int, input().split()))\n    pref = []\n    for i in range(m):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: coll[x - 1])\n        pref.append(_c)\n    allot = [0] * n\n    top_stud = []\n    for i in range(m):\n        top_stud.append(i)\n    top_stud = sorted(top_stud, key=lambda x: stud[x])\n    for i in top_stud:\n        flag = 0\n        j = 0\n        while j < len(pref[i]):\n            if allot[pref[i][j] - 1] == 0:\n                flag = 1\n                allot[pref[i][j] - 1] = 1\n                if i == 0:\n                    print(pref[i][j])\n                break\n            else:\n                j += 1\n        if i == 0:\n            if flag == 0:\n                print(0)\n            break\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (n, m) = list(map(int, input().split()))\n    coll = list(map(int, input().split()))\n    stud = list(map(int, input().split()))\n    pref = []\n    for i in range(m):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: coll[x - 1])\n        pref.append(_c)\n    allot = [0] * n\n    top_stud = []\n    for i in range(m):\n        top_stud.append(i)\n    top_stud = sorted(top_stud, key=lambda x: stud[x])\n    for i in top_stud:\n        flag = 0\n        j = 0\n        while j < len(pref[i]):\n            if allot[pref[i][j] - 1] == 0:\n                flag = 1\n                allot[pref[i][j] - 1] = 1\n                if i == 0:\n                    print(pref[i][j])\n                break\n            else:\n                j += 1\n        if i == 0:\n            if flag == 0:\n                print(0)\n            break\n    t -= 1", "t = int(input())\nwhile t != 0:\n    (n, m) = list(map(int, input().split()))\n    coll = list(map(int, input().split()))\n    stud = list(map(int, input().split()))\n    pref = []\n    for i in range(m):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: coll[x - 1])\n        pref.append(_c)\n    allot = [0] * n\n    top_stud = []\n    for i in range(m):\n        top_stud.append(i)\n    top_stud = sorted(top_stud, key=lambda x: stud[x])\n    for i in top_stud:\n        flag = 0\n        j = 0\n        while j < len(pref[i]):\n            if allot[pref[i][j] - 1] == 0:\n                flag = 1\n                allot[pref[i][j] - 1] = 1\n                if i == 0:\n                    print(pref[i][j])\n                break\n            else:\n                j += 1\n        if i == 0:\n            if flag == 0:\n                print(0)\n            break\n    t -= 1", "t = int(input())\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = [int(x) for x in input().split()]\n    sRank = [int(x) for x in input().split()]\n    students = []\n    for i in range(M):\n        c = [int(x) for x in input().split()]\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "testcase = int(input())\n\ndef mySor(val):\n    return val[0][0]\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "t = int(input())\n\ndef mySor(val):\n    return val[0][0]\nfor i in range(0, t):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "testcase = int(input())\n\ndef mySor(val):\n    return val[0][0]\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "testcase = int(input())\n\ndef mySor(val):\n    return val[0][0]\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "import io, os, time\nstart = time.perf_counter()\nCHEF_ID = 1\nADMITED = 100000\nfor tc in range(int(input())):\n    (nColl, mStud) = map(int, input().split())\n    rColl = [ADMITED] + list(map(int, input().split()))\n    rStud = [ADMITED] + list(map(int, input().split()))\n    arrStudColl = [[]]\n    for st in range(mStud):\n        w = list(map(int, input().split()))\n        arrStudColl.append(w[1:w[0] + 1])\n    studByRate = [-1] * (mStud + 1)\n    for stud in range(1, mStud + 1):\n        studByRate[rStud[stud]] = stud\n    collLeft = nColl\n    for studId in studByRate[1:mStud + 1]:\n        maxRateOfColl = ADMITED\n        for collId in arrStudColl[studId]:\n            if rColl[collId] < maxRateOfColl:\n                maxRateOfColl = rColl[collId]\n                maxRateCollId = collId\n        if studId == CHEF_ID:\n            if maxRateOfColl == ADMITED:\n                print(0)\n            else:\n                print(maxRateCollId)\n            break\n        if maxRateCollId != ADMITED:\n            rColl[maxRateCollId] = ADMITED\n            collLeft + -1\n            if collLeft == 0:\n                print(0)\n                break", "import io, os, time\nstart = time.perf_counter()\nCHEF_ID = 1\nADMITED = 100000\nfor tc in range(int(input())):\n    (nColl, mStud) = map(int, input().split())\n    rColl = [ADMITED] + list(map(int, input().split()))\n    rStud = [ADMITED] + list(map(int, input().split()))\n    arrStudColl = [[]]\n    for st in range(mStud):\n        w = list(map(int, input().split()))\n        arrStudColl.append(w[1:w[0] + 1])\n    studByRate = [-1] * (mStud + 1)\n    for stud in range(1, mStud + 1):\n        studByRate[rStud[stud]] = stud\n    collLeft = nColl\n    for studId in studByRate[1:mStud + 1]:\n        maxRateOfColl = ADMITED\n        for collId in arrStudColl[studId]:\n            if rColl[collId] < maxRateOfColl:\n                maxRateOfColl = rColl[collId]\n                maxRateCollId = collId\n        if studId == CHEF_ID:\n            if maxRateOfColl == ADMITED:\n                print(0)\n            else:\n                print(maxRateCollId)\n            break\n        if maxRateCollId != ADMITED:\n            rColl[maxRateCollId] = ADMITED\n            collLeft + -1\n            if collLeft == 0:\n                print(0)\n                break", "import io, os, time\nstart = time.perf_counter()\nCHEF_ID = 1\nADMITED = 100000\nfor tc in range(int(input())):\n    (nColl, mStud) = map(int, input().split())\n    rColl = [ADMITED] + list(map(int, input().split()))\n    rStud = [ADMITED] + list(map(int, input().split()))\n    arrStudColl = [[]]\n    for st in range(mStud):\n        w = list(map(int, input().split()))\n        arrStudColl.append(w[1:w[0] + 1])\n    studByRate = [-1] * (mStud + 1)\n    for stud in range(1, mStud + 1):\n        studByRate[rStud[stud]] = stud\n    collLeft = nColl\n    for studId in studByRate[1:mStud + 1]:\n        maxRateOfColl = ADMITED\n        for collId in arrStudColl[studId]:\n            if rColl[collId] < maxRateOfColl:\n                maxRateOfColl = rColl[collId]\n                maxRateCollId = collId\n        if studId == CHEF_ID:\n            if maxRateOfColl == ADMITED:\n                print(0)\n            else:\n                print(maxRateCollId)\n            break\n        if maxRateCollId != ADMITED:\n            rColl[maxRateCollId] = ADMITED\n            collLeft + -1\n            if collLeft == 0:\n                print(0)\n                break", "import io, os, time\nstart = time.perf_counter()\nCHEF_ID = 1\nADMITED = 100000\nfor tc in range(int(input())):\n    (nColl, mStud) = map(int, input().split())\n    rColl = [ADMITED] + list(map(int, input().split()))\n    rStud = [ADMITED] + list(map(int, input().split()))\n    arrStudColl = [[]]\n    for st in range(mStud):\n        w = list(map(int, input().split()))\n        arrStudColl.append(w[1:w[0] + 1])\n    studByRate = [-1] * (mStud + 1)\n    for stud in range(1, mStud + 1):\n        studByRate[rStud[stud]] = stud\n    collLeft = nColl\n    for studId in studByRate[1:mStud + 1]:\n        maxRateOfColl = ADMITED\n        for collId in arrStudColl[studId]:\n            if rColl[collId] < maxRateOfColl:\n                maxRateOfColl = rColl[collId]\n                maxRateCollId = collId\n        if studId == CHEF_ID:\n            if maxRateOfColl == ADMITED:\n                print(0)\n            else:\n                print(maxRateCollId)\n            break\n        if maxRateCollId != ADMITED:\n            rColl[maxRateCollId] = ADMITED\n            collLeft + -1\n            if collLeft == 0:\n                print(0)\n                break", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    rank_col = list(map(int, input().split()))\n    rank_stud = list(map(int, input().split()))\n    college = []\n    map_college = {}\n    for i in range(n):\n        college.append((rank_col[i], i + 1))\n        map_college[i + 1] = rank_col[i]\n    college.sort()\n    stud = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        stud.append((rank_stud[i], i, l[1:]))\n    stud.sort()\n    for (rank, ind, list_of_c) in stud:\n        if ind == 0:\n            best_r = n * 2\n            best_col_id = 0\n            for i in range(len(list_of_c)):\n                col_id = list_of_c[i]\n                if map_college[col_id] != -1:\n                    cur_r = map_college[col_id]\n                    if best_r > cur_r:\n                        best_r = cur_r\n                        best_col_id = col_id\n            map_college[best_col_id] = -1\n            print(best_col_id)\n            break\n        else:\n            best_r = n * 2\n            best_col_id = 0\n            for i in range(len(list_of_c)):\n                col_id = list_of_c[i]\n                if map_college[col_id] != -1:\n                    cur_r = map_college[col_id]\n                    if best_r > cur_r:\n                        best_r = cur_r\n                        best_col_id = col_id\n            map_college[best_col_id] = -1", "from math import *\nimport sys\n\ndef input():\n    return sys.stdin.readline().replace('\\n', '').strip()\nsys.setrecursionlimit(10 ** 9)\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    rank_col = list(map(int, input().split()))\n    rank_stud = list(map(int, input().split()))\n    college = []\n    map_college = {}\n    for i in range(n):\n        college.append((rank_col[i], i + 1))\n        map_college[i + 1] = rank_col[i]\n    college.sort()\n    stud = []\n    for i in range(m):\n        l = list(map(int, input().split()))\n        stud.append((rank_stud[i], i, l[1:]))\n    stud.sort()\n    for (rank, ind, list_of_c) in stud:\n        if ind == 0:\n            best_r = n * 2\n            best_col_id = 0\n            for i in range(len(list_of_c)):\n                col_id = list_of_c[i]\n                if map_college[col_id] != -1:\n                    cur_r = map_college[col_id]\n                    if best_r > cur_r:\n                        best_r = cur_r\n                        best_col_id = col_id\n            map_college[best_col_id] = -1\n            print(best_col_id)\n            break\n        else:\n            best_r = n * 2\n            best_col_id = 0\n            for i in range(len(list_of_c)):\n                col_id = list_of_c[i]\n                if map_college[col_id] != -1:\n                    cur_r = map_college[col_id]\n                    if best_r > cur_r:\n                        best_r = cur_r\n                        best_col_id = col_id\n            map_college[best_col_id] = -1", "testcase = int(input())\n\ndef mySor(val):\n    return val[0][0]\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "testcase = int(input())\n\ndef mySor(val):\n    return val[0][0]\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "testcase = int(input())\n\ndef mySor(val):\n    return val[0][0]\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "testcase = int(input())\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "testcase = int(input())\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "testcase = int(input())\n\ndef mySor(val):\n    return val[0][0]\nfor i in range(0, testcase):\n    (N, M) = map(int, input().split())\n    cRank = list(map(int, input().split()))\n    sRank = list(map(int, input().split()))\n    students = []\n    for i in range(M):\n        c = list(map(int, input().split()))\n        _c = sorted(c[1:], key=lambda x: cRank[x - 1])\n        students.append([i, c[0], _c])\n    sort_students = sorted(students, key=lambda x: sRank[x[0]])\n    clgs_filed = [False] * N\n    choice = 0\n    for i in sort_students:\n        ch = 0\n        for j in i[2]:\n            if clgs_filed[j - 1] == False:\n                clgs_filed[j - 1] = True\n                ch = j\n                break\n        if i[0] == 0:\n            choice = ch\n            break\n    print(choice)", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "clg_choice = []\nclg_rank_new = []\ntestcases = int(input())\nfor i in range(testcases):\n    clg_choice.clear()\n    clg_rank_new.clear()\n    no_clg = int(0)\n    (N_of_clg, M_of_students) = map(int, input().split())\n    clg_rank = list(map(int, input().split()))\n    clg_rank = [[clg_rank[i], i + 1, 0] for i in range(N_of_clg)]\n    students_rank = list(map(int, input().split()))\n    chef_rank = students_rank[0]\n    students_rank = [[students_rank[i], i + 1, 0] for i in range(M_of_students)]\n    for i in range(M_of_students):\n        clg_choice.append(list(map(int, input().split())))\n        clg_choice[i][0] = 0\n    students_rank.sort()\n    for j in range(1, len(clg_choice[0])):\n        clg_rank[clg_choice[0][j] - 1][2] = 1\n        clg_rank_new.append(clg_rank[clg_choice[0][j] - 1])\n    clg_rank_new.sort()\n    for i in range(len(clg_choice[0]) - 1):\n        no_clg = clg_rank_new[i][1]\n        for j in range(chef_rank - 1):\n            if students_rank[j][2] == 0:\n                if clg_rank_new[i][1] in clg_choice[students_rank[j][1] - 1]:\n                    students_rank[j][2] = 1\n                    if i + 1 == len(clg_choice[0]) - 1:\n                        no_clg = 0\n                    else:\n                        no_clg = clg_rank_new[i + 1][1]\n                    break\n        if no_clg == clg_rank_new[i][1]:\n            break\n    print(no_clg)\n    students_rank.clear()\n    clg_rank.clear()", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    l = []\n    h = {}\n    for i in range(M):\n        K = list(map(int, input().split()))\n        K = K[1:]\n        K.sort(key=lambda x: R[x - 1])\n        l.append([K, i + 1])\n    l.sort(key=lambda x: S[x[1] - 1])\n    a = 0\n    for i in range(M):\n        x = 0\n        for j in l[i][0]:\n            if h.get(j):\n                continue\n            else:\n                h[j] = 1\n                x = j\n                break\n        if l[i][1] == 1:\n            a = x\n            break\n    print(a)", "tot = int(input())\nfor _ in range(tot):\n    ans = None\n    (N, M) = list(map(int, input().split()))\n    CR = input()\n    SR = list(map(int, input().split()))\n    SP = []\n    filled = [0] * (N + 1)\n    for _ in range(M):\n        sp_temp = list(map(int, input().split()))\n        SP.append(sp_temp)\n    chefRank = SR[0]\n    (SR, SP) = [list(t) for t in zip(*sorted(zip(SR, SP)))]\n    for (i, rank) in enumerate(SR):\n        if rank != chefRank:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    filled[pref] = 1\n                    break\n        else:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    ans = pref\n                    print(ans)\n                    break\n            if ans == None:\n                print(0)\n                break\n            break", "tot = int(input())\nfor _ in range(tot):\n    ans = None\n    (N, M) = list(map(int, input().split()))\n    CR = input()\n    SR = list(map(int, input().split()))\n    SP = []\n    filled = [0] * (N + 1)\n    for _ in range(M):\n        sp_temp = list(map(int, input().split()))\n        SP.append(sp_temp)\n    chefRank = SR[0]\n    (SR, SP) = [list(t) for t in zip(*sorted(zip(SR, SP)))]\n    for (i, rank) in enumerate(SR):\n        if rank != chefRank:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    filled[pref] = 1\n                    break\n        else:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    ans = pref\n                    print(ans)\n                    break\n            if ans == None:\n                print(0)\n                break\n            break", "try:\n    for _ in range(int(input())):\n        ans = None\n        (N, M) = list(map(int, input().split()))\n        CR = input()\n        SR = list(map(int, input().split()))\n        SP = []\n        filled = [0] * (N + 1)\n        for _ in range(M):\n            sp_temp = list(map(int, input().split()))\n            SP.append(sp_temp)\n        chefRank = SR[0]\n        (SR, SP) = [list(t) for t in zip(*sorted(zip(SR, SP)))]\n        for (i, rank) in enumerate(SR):\n            if rank != chefRank:\n                for pref in SP[i][1:]:\n                    if filled[pref] == 0:\n                        filled[pref] = 1\n                        break\n            else:\n                for pref in SP[i][1:]:\n                    if filled[pref] == 0:\n                        ans = pref\n                        print(ans)\n                        break\n                if ans == None:\n                    print(0)\n                    break\n                break\nexcept:\n    pass", "for _ in range(int(input())):\n    ans = None\n    (N, M) = list(map(int, input().split()))\n    CR = input()\n    SR = list(map(int, input().split()))\n    SP = []\n    filled = [0] * (N + 1)\n    for _ in range(M):\n        sp_temp = list(map(int, input().split()))\n        SP.append(sp_temp)\n    chefRank = SR[0]\n    (SR, SP) = [list(t) for t in zip(*sorted(zip(SR, SP)))]\n    for (i, rank) in enumerate(SR):\n        if rank != chefRank:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    filled[pref] = 1\n                    break\n        else:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    ans = pref\n                    print(ans)\n                    break\n            if ans == None:\n                print(0)\n                break\n            break", "for _ in range(int(input())):\n    ans = None\n    (N, M) = list(map(int, input().split()))\n    CR = input()\n    SR = list(map(int, input().split()))\n    SP = []\n    filled = [0] * (N + 1)\n    for _ in range(M):\n        sp_temp = list(map(int, input().split()))\n        SP.append(sp_temp)\n    chefRank = SR[0]\n    (SR, SP) = [list(t) for t in zip(*sorted(zip(SR, SP)))]\n    for (i, rank) in enumerate(SR):\n        if rank != chefRank:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    filled[pref] = 1\n                    break\n        else:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    ans = pref\n                    print(ans)\n                    break\n            if ans == None:\n                print(0)\n                break\n            break", "for _ in range(int(input())):\n    ans = None\n    (N, M) = list(map(int, input().split()))\n    CR = input()\n    SR = list(map(int, input().split()))\n    SP = []\n    filled = [0] * (N + 1)\n    for _ in range(M):\n        sp_temp = list(map(int, input().split()))\n        SP.append(sp_temp)\n    chefRank = SR[0]\n    (SR, SP) = [list(t) for t in zip(*sorted(zip(SR, SP)))]\n    for (i, rank) in enumerate(SR):\n        if rank != chefRank:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    filled[pref] = 1\n                    break\n        else:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    ans = pref\n                    print(ans)\n                    break\n            if ans == None:\n                print(0)\n                break\n            break", "for _ in range(int(input())):\n    ans = None\n    (N, M) = list(map(int, input().split()))\n    CR = input()\n    SR = list(map(int, input().split()))\n    SP = []\n    filled = [0] * (N + 1)\n    for _ in range(M):\n        sp_temp = list(map(int, input().split()))\n        SP.append(sp_temp)\n    chefRank = SR[0]\n    (SR, SP) = [list(t) for t in zip(*sorted(zip(SR, SP)))]\n    for (i, rank) in enumerate(SR):\n        if rank != chefRank:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    filled[pref] = 1\n                    break\n        else:\n            for pref in SP[i][1:]:\n                if filled[pref] == 0:\n                    ans = pref\n                    print(ans)\n                    break\n            if ans == None:\n                print(0)\n                break\n            break", "t = int(input())\nwhile t != 0:\n    (n, m) = list(map(int, input().split()))\n    collegeRank = list(map(int, input().split()))\n    studentsRank = list(map(int, input().split()))\n    chefsRank = studentsRank[0]\n    studentPreferences = [[-1]] * (chefsRank + 1)\n    for i in range(m):\n        CurrentStudentRank = studentsRank[i]\n        studentsPreference = list(map(int, input().split()))\n        if CurrentStudentRank <= chefsRank:\n            studentPreferences[CurrentStudentRank] = studentsPreference\n    studentsRank.sort()\n    if n < chefsRank:\n        print('0')\n    else:\n        chefsPreferences = studentPreferences[chefsRank]\n        chefsPreferences = chefsPreferences[1:]\n        j = 1\n        while j <= chefsRank:\n            currentPreference = studentPreferences[j]\n            currentPreference = currentPreference[1:]\n            commonPreferences = list(set(chefsPreferences) & set(currentPreference))\n            maxRank = 0\n            if len(commonPreferences) > 0:\n                ranking = []\n                for i in range(len(commonPreferences)):\n                    currentCollageRank = collegeRank[commonPreferences[i] - 1]\n                    if currentCollageRank != -1:\n                        ranking.append(currentCollageRank)\n                if len(ranking) > 0:\n                    maxRank = min(ranking)\n                    if j != chefsRank:\n                        collegeRank[collegeRank.index(maxRank)] = -1\n            j = j + 1\n        if maxRank == -1 or maxRank == 0:\n            print('0')\n        else:\n            print(collegeRank.index(maxRank) + 1)\n    t = t - 1", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    l = []\n    h = {}\n    for i in range(M):\n        K = list(map(int, input().split()))\n        K = K[1:]\n        K.sort(key=lambda x: R[x - 1])\n        l.append([K, i + 1])\n    l.sort(key=lambda x: S[x[1] - 1])\n    a = 0\n    for i in range(M):\n        x = 0\n        for j in l[i][0]:\n            if h.get(j):\n                continue\n            else:\n                h[j] = 1\n                x = j\n                break\n        if l[i][1] == 1:\n            a = x\n            break\n    print(a)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    l = []\n    h = {}\n    for i in range(M):\n        K = list(map(int, input().split()))\n        K = K[1:]\n        K.sort(key=lambda x: R[x - 1])\n        l.append([K, i + 1])\n    l.sort(key=lambda x: S[x[1] - 1])\n    a = 0\n    for i in range(M):\n        x = 0\n        for j in l[i][0]:\n            if h.get(j):\n                continue\n            else:\n                h[j] = 1\n                x = j\n                break\n        if l[i][1] == 1:\n            a = x\n            break\n    print(a)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    l = []\n    h = {}\n    for i in range(M):\n        K = list(map(int, input().split()))\n        K = K[1:]\n        K.sort(key=lambda x: R[x - 1])\n        l.append([K, i + 1])\n    l.sort(key=lambda x: S[x[1] - 1])\n    a = 0\n    for i in range(M):\n        x = 0\n        for j in l[i][0]:\n            if h.get(j):\n                continue\n            else:\n                h[j] = 1\n                x = j\n                break\n        if l[i][1] == 1:\n            a = x\n            break\n    print(a)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    l = []\n    h = {}\n    for i in range(M):\n        K = list(map(int, input().split()))\n        K = K[1:]\n        K.sort(key=lambda x: R[x - 1])\n        l.append([K, i + 1])\n    l.sort(key=lambda x: S[x[1] - 1])\n    a = 0\n    for i in range(M):\n        x = 0\n        for j in l[i][0]:\n            if h.get(j):\n                continue\n            else:\n                h[j] = 1\n                x = j\n                break\n        if l[i][1] == 1:\n            a = x\n            break\n    print(a)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    l = []\n    h = {}\n    for i in range(M):\n        K = list(map(int, input().split()))\n        K = K[1:]\n        K.sort(key=lambda x: R[x - 1])\n        l.append([K, i + 1])\n    l.sort(key=lambda x: S[x[1] - 1])\n    a = 0\n    for i in range(M):\n        x = 0\n        for j in l[i][0]:\n            if h.get(j):\n                continue\n            else:\n                h[j] = 1\n                x = j\n                break\n        if l[i][1] == 1:\n            a = x\n            break\n    print(a)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    l = []\n    h = {}\n    for i in range(M):\n        K = list(map(int, input().split()))\n        K = K[1:]\n        K.sort(key=lambda x: R[x - 1])\n        l.append([K, i + 1])\n    l.sort(key=lambda x: S[x[1] - 1])\n    a = 0\n    for i in range(M):\n        x = 0\n        for j in l[i][0]:\n            if h.get(j):\n                continue\n            else:\n                h[j] = 1\n                x = j\n                break\n        if l[i][1] == 1:\n            a = x\n            break\n    print(a)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    S = list(map(int, input().split()))\n    l = []\n    h = {}\n    for i in range(M):\n        K = list(map(int, input().split()))\n        K = K[1:]\n        K.sort(key=lambda x: R[x - 1])\n        l.append([K, i + 1])\n    l.sort(key=lambda x: S[x[1] - 1])\n    a = 0\n    for i in range(M):\n        x = 0\n        for j in l[i][0]:\n            if h.get(j):\n                continue\n            else:\n                h[j] = 1\n                x = j\n                break\n        if l[i][1] == 1:\n            a = x\n            break\n    print(a)"]