["from sys import stdin\nz = ['a', 'i', 'e', 'o', 'u']\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(stdin.readline())\n    alice = []\n    bob = []\n    for j in range(n):\n        s = str(stdin.readline().strip('\\n'))\n        isalice = True\n        for i in range(1, len(s) - 1):\n            if s[i] in z:\n                if s[i - 1] not in z and s[i + 1] not in z:\n                    isalice = False\n            elif s[i - 1] not in z or s[i + 1] not in z:\n                isalice = False\n            if not isalice:\n                break\n        if s[0] not in z and s[1] not in z:\n            isalice = False\n        if s[-1] not in z and s[-2] not in z:\n            isalice = False\n        if isalice:\n            alice.append(s)\n        else:\n            bob.append(s)\n    ali = {}\n    bo = {}\n    for i in alice:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in ali:\n                ali[j] = (1, d[j])\n            else:\n                ali[j] = (ali[j][0] + 1, ali[j][1] + d[j])\n    for i in bob:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in bo:\n                bo[j] = (1, d[j])\n            else:\n                bo[j] = (bo[j][0] + 1, bo[j][1] + d[j])\n    ans = 1\n    for i in ali:\n        ans *= ali[i][0]\n    for i in bo:\n        ans = ans / bo[i][0]\n    x = 1\n    y = 1\n    for i in bo:\n        x = x * bo[i][1]\n    for i in ali:\n        y = y * ali[i][1]\n    alice = len(alice)\n    bob = len(bob)\n    for i in range(bob):\n        while alice > 0 and ans > 10000000:\n            ans = ans / y\n            alice -= 1\n        ans *= x\n        if ans > 10000000 and alice == 0:\n            break\n    while alice > 0:\n        ans = ans / y\n        if ans < 1 and alice > 100:\n            ans = 0\n            break\n        alice -= 1\n    if ans > 10000000:\n        print('Infinity')\n    else:\n        print(ans)", "from sys import stdin\nz = ['a', 'i', 'e', 'o', 'u']\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(stdin.readline())\n    alice = []\n    bob = []\n    for j in range(n):\n        s = str(stdin.readline().strip('\\n'))\n        isalice = True\n        for i in range(1, len(s) - 1):\n            if s[i] in z:\n                if s[i - 1] not in z and s[i + 1] not in z:\n                    isalice = False\n            elif s[i - 1] not in z or s[i + 1] not in z:\n                isalice = False\n            if not isalice:\n                break\n        if s[0] not in z and s[1] not in z:\n            isalice = False\n        if s[-1] not in z and s[-2] not in z:\n            isalice = False\n        if isalice:\n            alice.append(s)\n        else:\n            bob.append(s)\n    ali = {}\n    bo = {}\n    for i in alice:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in ali:\n                ali[j] = (1, d[j])\n            else:\n                ali[j] = (ali[j][0] + 1, ali[j][1] + d[j])\n    for i in bob:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in bo:\n                bo[j] = (1, d[j])\n            else:\n                bo[j] = (bo[j][0] + 1, bo[j][1] + d[j])\n    ans = 1\n    for i in ali:\n        ans *= ali[i][0]\n    for i in bo:\n        ans = ans / bo[i][0]\n    x = 1\n    y = 1\n    for i in bo:\n        x = x * bo[i][1]\n    for i in ali:\n        y = y * ali[i][1]\n    alice = len(alice)\n    bob = len(bob)\n    for i in range(bob):\n        while alice > 0 and ans > 10000000:\n            ans = ans / y\n            alice -= 1\n        ans *= x\n        if ans > 10000000 and alice == 0:\n            break\n    while alice > 0:\n        ans = ans / y\n        if ans < 1 and alice > 100:\n            ans = 0\n            break\n        alice -= 1\n    if ans > 10000000:\n        print('Infinity')\n    else:\n        print(ans)", "from sys import stdin\nz = ['a', 'i', 'e', 'o', 'u']\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(stdin.readline())\n    alice = []\n    bob = []\n    for j in range(n):\n        s = str(stdin.readline().strip('\\n'))\n        isalice = True\n        for i in range(1, len(s) - 1):\n            if s[i] in z:\n                if s[i - 1] not in z and s[i + 1] not in z:\n                    isalice = False\n            elif s[i - 1] not in z or s[i + 1] not in z:\n                isalice = False\n            if not isalice:\n                break\n        if s[0] not in z and s[1] not in z:\n            isalice = False\n        if s[-1] not in z and s[-2] not in z:\n            isalice = False\n        if isalice:\n            alice.append(s)\n        else:\n            bob.append(s)\n    ali = {}\n    bo = {}\n    for i in alice:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in ali:\n                ali[j] = (1, d[j])\n            else:\n                ali[j] = (ali[j][0] + 1, ali[j][1] + d[j])\n    for i in bob:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in bo:\n                bo[j] = (1, d[j])\n            else:\n                bo[j] = (bo[j][0] + 1, bo[j][1] + d[j])\n    ans = 1\n    for i in ali:\n        ans *= ali[i][0]\n    for i in bo:\n        ans = ans / bo[i][0]\n    x = 1\n    y = 1\n    for i in bo:\n        x = x * bo[i][1]\n    for i in ali:\n        y = y * ali[i][1]\n    alice = len(alice)\n    bob = len(bob)\n    for i in range(bob):\n        while alice > 0 and ans > 10000000:\n            ans = ans / y\n            alice -= 1\n        ans *= x\n        if ans > 10000000 and alice == 0:\n            break\n    while alice > 0:\n        ans = ans / y\n        if ans < 1 and alice > 100:\n            ans = 0\n            break\n        alice -= 1\n    if ans > 10000000:\n        print('Infinity')\n    else:\n        print(ans)", "from sys import stdin\nz = ['a', 'i', 'e', 'o', 'u']\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(stdin.readline())\n    alice = []\n    bob = []\n    for j in range(n):\n        s = str(stdin.readline().strip('\\n'))\n        isalice = True\n        for i in range(1, len(s) - 1):\n            if s[i] in z:\n                if s[i - 1] not in z and s[i + 1] not in z:\n                    isalice = False\n            elif s[i - 1] not in z or s[i + 1] not in z:\n                isalice = False\n            if not isalice:\n                break\n        if s[0] not in z and s[1] not in z:\n            isalice = False\n        if s[-1] not in z and s[-2] not in z:\n            isalice = False\n        if isalice:\n            alice.append(s)\n        else:\n            bob.append(s)\n    ali = {}\n    bo = {}\n    for i in alice:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in ali:\n                ali[j] = (1, d[j])\n            else:\n                ali[j] = (ali[j][0] + 1, ali[j][1] + d[j])\n    for i in bob:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in bo:\n                bo[j] = (1, d[j])\n            else:\n                bo[j] = (bo[j][0] + 1, bo[j][1] + d[j])\n    ans = 1\n    for i in ali:\n        ans *= ali[i][0]\n    for i in bo:\n        ans = ans / bo[i][0]\n    x = 1\n    y = 1\n    for i in bo:\n        x = x * bo[i][1]\n    for i in ali:\n        y = y * ali[i][1]\n    alice = len(alice)\n    bob = len(bob)\n    for i in range(bob):\n        while alice > 0 and ans > 10000000:\n            ans = ans / y\n            alice -= 1\n        ans *= x\n        if ans > 10000000 and alice == 0:\n            break\n    while alice > 0:\n        ans = ans / y\n        if ans < 1 and alice > 100:\n            ans = 0\n            break\n        alice -= 1\n    if ans > 10000000:\n        print('Infinity')\n    else:\n        print(ans)", "import math\n\ndef score(df):\n    (res, fx, li2, x) = ({}, 1, {}, 1)\n    for val in df:\n        for key in val:\n            if key not in res:\n                res[key] = 1\n            else:\n                res[key] += 1\n    for val in res.values():\n        fx = fx * val\n    for val in res:\n        li2[val] = 0\n        for i in df:\n            if val in i:\n                li2[val] += 1\n    for val in li2:\n        x *= li2[val]\n    return [x, fx]\n\ndef prog(li, al, bo):\n    for cur in li:\n        (prev, f) = (-1, 0)\n        for j in range(len(cur)):\n            if cur[j] not in ['a', 'e', 'i', 'o', 'u']:\n                if prev == -1:\n                    prev = j\n                elif abs(prev - j) == 2 or abs(prev - j) == 1:\n                    f = 1\n                    break\n                else:\n                    prev = j\n        if f == 1:\n            bo.append(cur)\n        else:\n            al.append(cur)\n    (sca, scb) = (score(al), score(bo))\n    ans1 = math.log10(sca[0]) + len(bo) * math.log10(scb[1])\n    ans2 = math.log10(scb[0]) + len(al) * math.log10(sca[1])\n    return ans1 - ans2\nfor i in range(int(input())):\n    (li, x) = ([], int(input()))\n    for i in range(x):\n        li.append(input())\n    final = prog(li, [], [])\n    print('Infinity') if final > 7.0 else print(pow(10, final))", "import math\nimport decimal\ndecimal.getcontext().prec = 1000\nt = int(input())\nfor _ in range(t):\n    l = int(input())\n    alice = []\n    bob = []\n    alice_all = ''\n    bob_all = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(l):\n        temp = input()\n        consonant_index = -1\n        for j in range(len(temp)):\n            if temp[j] in vowels:\n                continue\n            elif consonant_index == -1:\n                consonant_index = j\n            elif j - consonant_index <= 2:\n                bob.append(temp)\n                bob_all = bob_all + temp\n                break\n            else:\n                consonant_index = j\n        else:\n            alice.append(temp)\n            alice_all = alice_all + temp\n    if l <= 10:\n        n = len(alice)\n        m = len(bob)\n        (score_A, score_B) = (1, 1)\n        (x_a, x_b) = (1, 1)\n        (fx_a, fx_b) = (1, 1)\n        for i in range(97, 123):\n            char = chr(i)\n            if char in alice_all:\n                rec_a = [x for x in alice if char in x]\n                x_a *= len(rec_a)\n                fx_a = fx_a * alice_all.count(char)\n            if char in bob_all:\n                rec_b = [x for x in bob if char in x]\n                x_b *= len(rec_b)\n                fx_b = fx_b * bob_all.count(char)\n        fx_a = math.pow(fx_a, n)\n        fx_b = math.pow(fx_b, m)\n        score_A = x_a / fx_a\n        score_B = x_b / fx_b\n        ans = score_A / score_B\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))\n    else:\n        n = decimal.Decimal(len(alice))\n        m = decimal.Decimal(len(bob))\n        score_A = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        score_B = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        denom_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        denom_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        ans = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        charInA = ''.join(sorted(set(alice_all)))\n        charInB = ''.join(sorted(set(bob_all)))\n        ctx = decimal.getcontext().copy()\n        ctx.Emax = decimal.MAX_EMAX\n        ctx.Emin = decimal.MIN_EMIN\n        ctx.prec = 100\n        for i in charInA:\n            rec_a = [x for x in alice if i in x]\n            if len(rec_a) > 0:\n                x_a = ctx.multiply(x_a, len(rec_a))\n                fx_a = ctx.multiply(fx_a, alice_all.count(i))\n        for i in charInB:\n            rec_b = [x for x in bob if i in x]\n            if len(rec_b) > 0:\n                x_b = ctx.multiply(x_b, len(rec_b))\n                fx_b = ctx.multiply(fx_b, bob_all.count(i))\n        denom_a = ctx.power(fx_a, n)\n        denom_b = ctx.power(fx_b, m)\n        score_A = ctx.divide(x_a, denom_a)\n        score_B = ctx.divide(x_b, denom_b)\n        ans = ctx.divide(score_A, score_B)\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))", "import decimal\ndecimal.getcontext().prec = 16\ndecimal.getcontext().Emin = -1000000000\ndecimal.getcontext().Emax = 1000000000\n\ndef vowel(x):\n    return x in 'aeiou'\n\ndef is_alice(s):\n    if not vowel(s[0]) and (not vowel(s[1])):\n        return False\n    for i in range(2, len(s)):\n        if not vowel(s[i]) and (not vowel(s[i - 1]) or not vowel(s[i - 2])):\n            return False\n    return True\n\ndef fast_exp(x, p):\n    x = decimal.Decimal(x)\n    ans = decimal.Decimal(1)\n    while p > 0:\n        if p & 1:\n            ans *= x\n        x *= x\n        p >>= 1\n    return ans\n\ndef get_score(strings):\n    k = len(strings)\n    xc = [0] * 26\n    fxc = [0] * 26\n    for s in strings:\n        f = [0] * 26\n        for x in s:\n            f[ord(x) - 97] += 1\n        for i in range(26):\n            if f[i] > 0:\n                xc[i] += 1\n                fxc[i] += f[i]\n    (pxc, pfxc) = (1, 1)\n    for i in range(26):\n        if xc[i] > 0:\n            pxc *= xc[i]\n            pfxc *= fxc[i]\n    return decimal.Decimal(pxc) / fast_exp(pfxc, k)\nfor _ in range(int(input())):\n    (alice, bob) = ([], [])\n    for _ in range(int(input())):\n        inp = input()\n        if is_alice(inp):\n            alice.append(inp)\n        else:\n            bob.append(inp)\n    alice_score = get_score(alice)\n    bob_score = get_score(bob)\n    ratio = alice_score / bob_score\n    if ratio > 10000000.0:\n        print('Infinity')\n    else:\n        print(ratio)", "import math\nfrom math import log10\n\ndef score(df):\n    n = len(df)\n    res = {}\n    for val in df:\n        for key in val:\n            if key not in res:\n                res[key] = 1\n            else:\n                res[key] += 1\n    fx = 1\n    for val in res.values():\n        fx = fx * val\n    li2 = {}\n    for val in res:\n        li2[val] = 0\n        for i in df:\n            if val in i:\n                li2[val] += 1\n    x = 1\n    for val in li2:\n        x = x * li2[val]\n    return [x, fx]\n\ndef prog(li):\n    al = []\n    bo = []\n    for cur in li:\n        prev = -1\n        f = 0\n        for j in range(len(cur)):\n            if cur[j] not in ['a', 'e', 'i', 'o', 'u']:\n                if prev == -1:\n                    prev = j\n                elif abs(prev - j) == 2 or abs(prev - j) == 1:\n                    f = 1\n                    break\n                else:\n                    prev = j\n        if f == 1:\n            bo.append(cur)\n        else:\n            al.append(cur)\n    sca = score(al)\n    scb = score(bo)\n    ans1 = log10(sca[0]) + len(bo) * log10(scb[1])\n    ans2 = log10(scb[0]) + len(al) * log10(sca[1])\n    ans1 = ans1 - ans2\n    return ans1\nt = int(input())\nfor i in range(0, t):\n    li = []\n    x = int(input())\n    for i in range(0, x):\n        e = input()\n        li.append(e)\n    final = prog(li)\n    if final > 7.0:\n        print('Infinity')\n    else:\n        print(pow(10, final))", "from math import log10\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    alice = []\n    bob = []\n    words = []\n    for i in range(n):\n        words.append(input())\n    for cur in words:\n        prev = -1\n        f = 0\n        for j in range(len(cur)):\n            if cur[j] not in ['a', 'e', 'i', 'o', 'u']:\n                if prev == -1:\n                    prev = j\n                elif abs(prev - j) == 2 or abs(prev - j) == 1:\n                    f = 1\n                    break\n                else:\n                    prev = j\n        if f == 1:\n            bob.append(cur)\n        else:\n            alice.append(cur)\n    n1 = len(alice)\n    freq_a = {}\n    for i in alice:\n        for j in i:\n            if j not in freq_a:\n                freq_a[j] = 1\n            else:\n                freq_a[j] += 1\n    num_a = {}\n    for i in freq_a:\n        num_a[i] = 0\n        for j in alice:\n            if i in j:\n                num_a[i] += 1\n    num1 = 1\n    den1 = 1\n    for i in num_a:\n        num1 = num1 * num_a[i]\n        den1 = den1 * freq_a[i]\n    n2 = len(bob)\n    freq_b = {}\n    for i in bob:\n        for j in i:\n            if j not in freq_b:\n                freq_b[j] = 1\n            else:\n                freq_b[j] += 1\n    num_b = {}\n    for i in freq_b:\n        num_b[i] = 0\n        for j in bob:\n            if i in j:\n                num_b[i] += 1\n    num2 = 1\n    den2 = 1\n    for i in num_b:\n        num2 = num2 * num_b[i]\n        den2 = den2 * freq_b[i]\n    ans1 = log10(num1) + n2 * log10(den2)\n    ans2 = log10(num2) + n1 * log10(den1)\n    ans1 = ans1 - ans2\n    if ans1 > 7.0:\n        print('Infinity')\n    else:\n        print(pow(10, ans1))", "from math import log10\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    alice = []\n    bob = []\n    words = []\n    for i in range(n):\n        words.append(input())\n    for cur in words:\n        prev = -1\n        f = 0\n        for j in range(len(cur)):\n            if cur[j] not in ['a', 'e', 'i', 'o', 'u']:\n                if prev == -1:\n                    prev = j\n                elif abs(prev - j) == 2 or abs(prev - j) == 1:\n                    f = 1\n                    break\n                else:\n                    prev = j\n        if f == 1:\n            bob.append(cur)\n        else:\n            alice.append(cur)\n    n1 = len(alice)\n    freq_a = {}\n    for i in alice:\n        for j in i:\n            if j not in freq_a:\n                freq_a[j] = 1\n            else:\n                freq_a[j] += 1\n    num_a = {}\n    for i in freq_a:\n        num_a[i] = 0\n        for j in alice:\n            if i in j:\n                num_a[i] += 1\n    num1 = 1\n    den1 = 1\n    for i in num_a:\n        num1 = num1 * num_a[i]\n        den1 = den1 * freq_a[i]\n    n2 = len(bob)\n    freq_b = {}\n    for i in bob:\n        for j in i:\n            if j not in freq_b:\n                freq_b[j] = 1\n            else:\n                freq_b[j] += 1\n    num_b = {}\n    for i in freq_b:\n        num_b[i] = 0\n        for j in bob:\n            if i in j:\n                num_b[i] += 1\n    num2 = 1\n    den2 = 1\n    for i in num_b:\n        num2 = num2 * num_b[i]\n        den2 = den2 * freq_b[i]\n    if n <= 10:\n        if n2 >= n1:\n            ans = pow(den2 / den1, n1) * pow(den2, n2 - n1)\n        else:\n            ans = pow(den2 / den1, n2) * pow(den1, -(n1 - n2))\n        t = num1 / num2\n        ans = ans * t\n        if ans > 10000000.0:\n            print('Infinity')\n        else:\n            print(ans)\n    else:\n        ans1 = log10(num1) + n2 * log10(den2)\n        ans2 = log10(num2) + n1 * log10(den1)\n        ans1 = ans1 - ans2\n        if ans1 > 7.0:\n            print('Infinity')\n        else:\n            print(pow(10, ans1))", "from math import log10\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    alice = []\n    bob = []\n    words = []\n    for i in range(n):\n        words.append(input())\n    for cur in words:\n        prev = -1\n        f = 0\n        for j in range(len(cur)):\n            if cur[j] not in ['a', 'e', 'i', 'o', 'u']:\n                if prev == -1:\n                    prev = j\n                elif abs(prev - j) == 2 or abs(prev - j) == 1:\n                    f = 1\n                    break\n                else:\n                    prev = j\n        if f == 1:\n            bob.append(cur)\n        else:\n            alice.append(cur)\n    n1 = len(alice)\n    freq_a = {}\n    for i in alice:\n        for j in i:\n            if j not in freq_a:\n                freq_a[j] = 1\n            else:\n                freq_a[j] += 1\n    num_a = {}\n    for i in freq_a:\n        num_a[i] = 0\n        for j in alice:\n            if i in j:\n                num_a[i] += 1\n    num1 = 1\n    den1 = 1\n    for i in num_a:\n        num1 = num1 * num_a[i]\n        den1 = den1 * freq_a[i]\n    n2 = len(bob)\n    freq_b = {}\n    for i in bob:\n        for j in i:\n            if j not in freq_b:\n                freq_b[j] = 1\n            else:\n                freq_b[j] += 1\n    num_b = {}\n    for i in freq_b:\n        num_b[i] = 0\n        for j in bob:\n            if i in j:\n                num_b[i] += 1\n    num2 = 1\n    den2 = 1\n    for i in num_b:\n        num2 = num2 * num_b[i]\n        den2 = den2 * freq_b[i]\n    if n <= 10:\n        if n2 >= n1:\n            ans = pow(den2 / den1, n1) * pow(den2, n2 - n1)\n        else:\n            ans = pow(den2 / den1, n2) * pow(den1, -(n1 - n2))\n        t = num1 / num2\n        ans = ans * t\n        if ans > 10000000.0:\n            print('Infinity')\n        else:\n            print(ans)\n    else:\n        ans1 = log10(num1) + n2 * log10(den2)\n        ans2 = log10(num2) + n1 * log10(den1)\n        ans1 = ans1 - ans2\n        if ans1 > 7.0:\n            print('Infinity')\n        else:\n            print(pow(10, ans1))", "import math\nimport re\nwr1 = re.compile('[^aeiou][aeiou][^aeiou]')\nwr2 = re.compile('[^aeiou][^aeiou]')\n\ndef isAlice(word):\n    if wr1.search(word) or wr2.search(word):\n        return False\n    else:\n        return True\n\ndef occCount(word, D1, D2):\n    m = set()\n    for lett in word:\n        if lett in D1:\n            D1[lett] += 1\n        else:\n            D1[lett] = 1\n        if lett not in m:\n            if lett in D2:\n                D2[lett] += 1\n            else:\n                D2[lett] = 1\n        m.add(lett)\n    return (D1, D2)\n\ndef calculate(L):\n    alice_occ = dict()\n    alice_recepie_count = dict()\n    bob_occ = dict()\n    bob_recepie_count = dict()\n    alice = bob = 0\n    for word in L:\n        if isAlice(word):\n            alice += 1\n            (alice_occ, alice_recepie_count) = occCount(word, alice_occ, alice_recepie_count)\n        else:\n            bob += 1\n            (bob_occ, bob_recepie_count) = occCount(word, bob_occ, bob_recepie_count)\n    A = B = 0\n    for occ in alice_recepie_count.keys():\n        A += math.log10(alice_recepie_count[occ]) - alice * math.log10(alice_occ[occ])\n    for occ in bob_recepie_count.keys():\n        B += math.log10(bob_recepie_count[occ]) - bob * math.log10(bob_occ[occ])\n    ans = A - B\n    return 'Infinity' if ans > 7 else math.pow(10, ans)\nfor _ in range(int(input())):\n    L = []\n    for _ in range(int(input())):\n        L.append(input())\n    print(calculate(L))", "import time\nvowels = 'aeiou'\nstart_time = time.time()\n\ndef main():\n    import math as m\n    ryt = m.log(10 ** 7, 2)\n    lyt = m.log(9e-07, 2)\n    t = int(input())\n    v = {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}\n    for qwer in range(t):\n        l = int(input())\n        a = []\n        b = []\n        for wer in range(l):\n            s = input()\n            n = len(s)\n            c1 = 0\n            for i in range(n):\n                if s[i] not in v:\n                    if i + 1 < n:\n                        if s[i + 1] not in v:\n                            c1 = 1\n                            break\n                    if i + 2 < n:\n                        if s[i + 2] not in v:\n                            c1 = 1\n                            break\n            if c1 == 1:\n                b.append(s)\n            else:\n                a.append(s)\n        xa = {}\n        fxa = {}\n        xb = {}\n        fxb = {}\n        ka = len(a)\n        kb = len(b)\n        for i in range(ka):\n            d = {}\n            for j in range(len(a[i])):\n                if a[i][j] in d:\n                    d[a[i][j]] += 1\n                else:\n                    d[a[i][j]] = 1\n            for u in d:\n                if u in xa:\n                    xa[u] += 1\n                    fxa[u] += d[u]\n                else:\n                    xa[u] = 1\n                    fxa[u] = d[u]\n        for i1 in range(kb):\n            d = {}\n            for j1 in range(len(b[i1])):\n                if b[i1][j1] in d:\n                    d[b[i1][j1]] += 1\n                else:\n                    d[b[i1][j1]] = 1\n            for u1 in d:\n                if u1 in xb:\n                    xb[u1] += 1\n                    fxb[u1] += d[u1]\n                else:\n                    xb[u1] = 1\n                    fxb[u1] = d[u1]\n        ans = 0\n        for y in xa:\n            ans += m.log(xa[y], 2) - ka * m.log(fxa[y], 2)\n        for r in xb:\n            ans += kb * m.log(fxb[r], 2) - m.log(xb[r], 2)\n        if ans > ryt:\n            print('Infinity')\n        elif ans < lyt:\n            print(0)\n        else:\n            print(2 ** ans)\nmain()", "def main():\n    import math as m\n    ryt = m.log(10 ** 7, 2)\n    lyt = m.log(9e-07, 2)\n    t = int(input())\n    v = {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}\n    for qwer in range(t):\n        l = int(input())\n        a = []\n        b = []\n        for wer in range(l):\n            s = input()\n            n = len(s)\n            c1 = 0\n            for i in range(n):\n                if s[i] not in v:\n                    if i + 1 < n:\n                        if s[i + 1] not in v:\n                            c1 = 1\n                            break\n                    if i + 2 < n:\n                        if s[i + 2] not in v:\n                            c1 = 1\n                            break\n            if c1 == 1:\n                b.append(s)\n            else:\n                a.append(s)\n        xa = {}\n        fxa = {}\n        xb = {}\n        fxb = {}\n        ka = len(a)\n        kb = len(b)\n        for i in range(ka):\n            d = {}\n            for j in range(len(a[i])):\n                if a[i][j] in d:\n                    d[a[i][j]] += 1\n                else:\n                    d[a[i][j]] = 1\n            for u in d:\n                if u in xa:\n                    xa[u] += 1\n                    fxa[u] += d[u]\n                else:\n                    xa[u] = 1\n                    fxa[u] = d[u]\n        for i1 in range(kb):\n            d = {}\n            for j1 in range(len(b[i1])):\n                if b[i1][j1] in d:\n                    d[b[i1][j1]] += 1\n                else:\n                    d[b[i1][j1]] = 1\n            for u1 in d:\n                if u1 in xb:\n                    xb[u1] += 1\n                    fxb[u1] += d[u1]\n                else:\n                    xb[u1] = 1\n                    fxb[u1] = d[u1]\n        ans = 0\n        for y in xa:\n            ans += m.log(xa[y], 2) - ka * m.log(fxa[y], 2)\n        for r in xb:\n            ans += kb * m.log(fxb[r], 2) - m.log(xb[r], 2)\n        if ans > ryt:\n            print('Infinity')\n        elif ans < lyt:\n            print(0)\n        else:\n            print(2 ** ans)\nmain()", "from sys import stdin\nz = ['a', 'i', 'e', 'o', 'u']\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(stdin.readline())\n    alice = []\n    bob = []\n    for j in range(n):\n        s = str(stdin.readline().strip('\\n'))\n        isalice = True\n        for i in range(1, len(s) - 1):\n            if s[i] in z:\n                if s[i - 1] not in z and s[i + 1] not in z:\n                    isalice = False\n            elif s[i - 1] not in z or s[i + 1] not in z:\n                isalice = False\n            if not isalice:\n                break\n        if s[0] not in z and s[1] not in z:\n            isalice = False\n        if s[-1] not in z and s[-2] not in z:\n            isalice = False\n        if isalice:\n            alice.append(s)\n        else:\n            bob.append(s)\n    ali = {}\n    bo = {}\n    for i in alice:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in ali:\n                ali[j] = (1, d[j])\n            else:\n                ali[j] = (ali[j][0] + 1, ali[j][1] + d[j])\n    for i in bob:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in bo:\n                bo[j] = (1, d[j])\n            else:\n                bo[j] = (bo[j][0] + 1, bo[j][1] + d[j])\n    ans = 1\n    for i in ali:\n        ans *= ali[i][0]\n    for i in bo:\n        ans = ans / bo[i][0]\n    x = 1\n    y = 1\n    for i in bo:\n        x = x * bo[i][1]\n    for i in ali:\n        y = y * ali[i][1]\n    alice = len(alice)\n    bob = len(bob)\n    for i in range(bob):\n        while alice > 0 and ans > 10000000:\n            ans = ans / y\n            alice -= 1\n        ans *= x\n        if ans > 10000000 and alice == 0:\n            break\n    while alice > 0:\n        ans = ans / y\n        if ans < 1 and alice > 100:\n            ans = 0\n            break\n        alice -= 1\n    if ans > 10000000:\n        print('Infinity')\n    else:\n        print(ans)", "import math\nimport decimal\ndecimal.getcontext().prec = 1000\nt = int(input())\nfor _ in range(t):\n    l = int(input())\n    alice = []\n    bob = []\n    alice_all = ''\n    bob_all = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(l):\n        temp = input()\n        consonant_index = -1\n        for j in range(len(temp)):\n            if temp[j] in vowels:\n                continue\n            elif consonant_index == -1:\n                consonant_index = j\n            elif j - consonant_index <= 2:\n                bob.append(temp)\n                bob_all = bob_all + temp\n                break\n            else:\n                consonant_index = j\n        else:\n            alice.append(temp)\n            alice_all = alice_all + temp\n    if l <= 10:\n        n = len(alice)\n        m = len(bob)\n        (score_A, score_B) = (1, 1)\n        (x_a, x_b) = (1, 1)\n        (fx_a, fx_b) = (1, 1)\n        for i in range(97, 123):\n            char = chr(i)\n            if char in alice_all:\n                rec_a = [x for x in alice if char in x]\n                x_a *= len(rec_a)\n                fx_a = fx_a * alice_all.count(char)\n            if char in bob_all:\n                rec_b = [x for x in bob if char in x]\n                x_b *= len(rec_b)\n                fx_b = fx_b * bob_all.count(char)\n        fx_a = math.pow(fx_a, n)\n        fx_b = math.pow(fx_b, m)\n        score_A = x_a / fx_a\n        score_B = x_b / fx_b\n        ans = score_A / score_B\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))\n    else:\n        n = decimal.Decimal(len(alice))\n        m = decimal.Decimal(len(bob))\n        score_A = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        score_B = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        denom_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        denom_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        ans = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        charInA = ''.join(sorted(set(alice_all)))\n        charInB = ''.join(sorted(set(bob_all)))\n        ctx = decimal.getcontext().copy()\n        ctx.Emax = decimal.MAX_EMAX\n        ctx.Emin = decimal.MIN_EMIN\n        ctx.prec = 100\n        for i in charInA:\n            rec_a = [x for x in alice if i in x]\n            if len(rec_a) > 0:\n                x_a = ctx.multiply(x_a, len(rec_a))\n                fx_a = ctx.multiply(fx_a, alice_all.count(i))\n        for i in charInB:\n            rec_b = [x for x in bob if i in x]\n            if len(rec_b) > 0:\n                x_b = ctx.multiply(x_b, len(rec_b))\n                fx_b = ctx.multiply(fx_b, bob_all.count(i))\n        denom_a = ctx.power(fx_a, n)\n        denom_b = ctx.power(fx_b, m)\n        score_A = ctx.divide(x_a, denom_a)\n        score_B = ctx.divide(x_b, denom_b)\n        ans = ctx.divide(score_A, score_B)\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))", "from collections import defaultdict\nimport math\n\ndef substring(s):\n    prev = -1\n    for i in range(len(s)):\n        if s[i] not in ['a', 'e', 'i', 'o', 'u']:\n            if prev == -1:\n                prev = i\n            elif abs(prev - i) == 1 or abs(prev - i) == 2:\n                return 0\n            else:\n                prev = i\n    return 1\nfor _ in range(int(input())):\n    l = int(input())\n    alice = []\n    bob = []\n    m_a = defaultdict(lambda : 0)\n    m_b = defaultdict(lambda : 0)\n    res_a = defaultdict(lambda : 0)\n    res_b = defaultdict(lambda : 0)\n    for i in range(l):\n        s = input()\n        if substring(s):\n            alice.append(s)\n        else:\n            bob.append(s)\n    s_alice = len(alice)\n    s_bob = len(bob)\n    for i in alice:\n        for j in i:\n            m_a[j] += 1\n    for i in m_a:\n        for j in alice:\n            if i in j:\n                res_a[i] += 1\n    for i in bob:\n        for j in i:\n            m_b[j] += 1\n    for i in m_b:\n        for j in bob:\n            if i in j:\n                res_b[i] += 1\n    num_alice = 1\n    num_bob = 1\n    d_alice = 1\n    d_bob = 1\n    for i in m_a:\n        num_alice *= res_a[i]\n        d_alice *= m_a[i]\n    for i in m_b:\n        num_bob *= res_b[i]\n        d_bob *= m_b[i]\n    if l <= 10:\n        if s_bob >= s_alice:\n            k1 = math.pow(d_bob / d_alice, s_alice) * math.pow(d_bob, s_bob - s_alice)\n        else:\n            k1 = math.pow(d_bob / d_alice, s_bob) * math.pow(d_alice, -(s_alice - s_bob))\n        ans = num_alice / num_bob\n        ans = ans * k1\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print(ans)\n    else:\n        ALICE = math.log10(num_alice) + s_bob * math.log10(d_bob)\n        BOB = math.log10(num_bob) + s_alice * math.log10(d_alice)\n        ans = ALICE - BOB\n        if ans > 7.0:\n            print('Infinity')\n        else:\n            ans = pow(10, ans)\n            print(ans)", "from collections import defaultdict\nimport math\n\ndef substring(s):\n    prev = -1\n    for i in range(len(s)):\n        if s[i] not in ['a', 'e', 'i', 'o', 'u']:\n            if prev == -1:\n                prev = i\n            elif abs(prev - i) == 1 or abs(prev - i) == 2:\n                return 0\n            else:\n                prev = i\n    return 1\nfor _ in range(int(input())):\n    l = int(input())\n    alice = []\n    bob = []\n    m_a = defaultdict(lambda : 0)\n    m_b = defaultdict(lambda : 0)\n    res_a = defaultdict(lambda : 0)\n    res_b = defaultdict(lambda : 0)\n    for i in range(l):\n        s = input()\n        if substring(s):\n            alice.append(s)\n        else:\n            bob.append(s)\n    s_alice = len(alice)\n    s_bob = len(bob)\n    for i in alice:\n        for j in i:\n            m_a[j] += 1\n    for i in m_a:\n        for j in alice:\n            if i in j:\n                res_a[i] += 1\n    for i in bob:\n        for j in i:\n            m_b[j] += 1\n    for i in m_b:\n        for j in bob:\n            if i in j:\n                res_b[i] += 1\n    num_alice = 1\n    num_bob = 1\n    d_alice = 1\n    d_bob = 1\n    for i in m_a:\n        num_alice *= res_a[i]\n        d_alice *= m_a[i]\n    for i in m_b:\n        num_bob *= res_b[i]\n        d_bob *= m_b[i]\n    if l <= 10:\n        if s_bob >= s_alice:\n            k1 = math.pow(d_bob / d_alice, s_alice) * math.pow(d_bob, s_bob - s_alice)\n        else:\n            k1 = math.pow(d_bob / d_alice, s_bob) * math.pow(d_alice, -(s_alice - s_bob))\n        ans = num_alice / num_bob\n        ans = ans * k1\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print(ans)\n    else:\n        ALICE = math.log10(num_alice) + s_bob * math.log10(d_bob)\n        BOB = math.log10(num_bob) + s_alice * math.log10(d_alice)\n        ans = ALICE - BOB\n        if ans > 7.0:\n            print('Infinity')\n        else:\n            ans = pow(10, ans)\n            print(ans)", "import math\nimport decimal\ndecimal.getcontext().prec = 1000\nt = int(input())\nfor _ in range(t):\n    l = int(input())\n    alice = []\n    bob = []\n    alice_all = ''\n    bob_all = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(l):\n        temp = input()\n        consonant_index = -1\n        for j in range(len(temp)):\n            if temp[j] in vowels:\n                continue\n            elif consonant_index == -1:\n                consonant_index = j\n            elif j - consonant_index <= 2:\n                bob.append(temp)\n                bob_all = bob_all + temp\n                break\n            else:\n                consonant_index = j\n        else:\n            alice.append(temp)\n            alice_all = alice_all + temp\n    if l <= 10:\n        n = len(alice)\n        m = len(bob)\n        (score_A, score_B) = (1, 1)\n        (x_a, x_b) = (1, 1)\n        (fx_a, fx_b) = (1, 1)\n        for i in range(97, 123):\n            char = chr(i)\n            if char in alice_all:\n                rec_a = [x for x in alice if char in x]\n                x_a *= len(rec_a)\n                fx_a = fx_a * alice_all.count(char)\n            if char in bob_all:\n                rec_b = [x for x in bob if char in x]\n                x_b *= len(rec_b)\n                fx_b = fx_b * bob_all.count(char)\n        fx_a = math.pow(fx_a, n)\n        fx_b = math.pow(fx_b, m)\n        score_A = x_a / fx_a\n        score_B = x_b / fx_b\n        ans = score_A / score_B\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))\n    else:\n        n = decimal.Decimal(len(alice))\n        m = decimal.Decimal(len(bob))\n        score_A = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        score_B = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        denom_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        denom_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        ans = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        charInA = ''.join(sorted(set(alice_all)))\n        charInB = ''.join(sorted(set(bob_all)))\n        ctx = decimal.getcontext().copy()\n        ctx.Emax = decimal.MAX_EMAX\n        ctx.Emin = decimal.MIN_EMIN\n        ctx.prec = 100\n        for i in charInA:\n            rec_a = [x for x in alice if i in x]\n            if len(rec_a) > 0:\n                x_a = ctx.multiply(x_a, len(rec_a))\n                fx_a = ctx.multiply(fx_a, alice_all.count(i))\n        for i in charInB:\n            rec_b = [x for x in bob if i in x]\n            if len(rec_b) > 0:\n                x_b = ctx.multiply(x_b, len(rec_b))\n                fx_b = ctx.multiply(fx_b, bob_all.count(i))\n        denom_a = ctx.power(fx_a, n)\n        denom_b = ctx.power(fx_b, m)\n        score_A = ctx.divide(x_a, denom_a)\n        score_B = ctx.divide(x_b, denom_b)\n        ans = ctx.divide(score_A, score_B)\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))", "import math\nimport decimal\ndecimal.getcontext().prec = 1000\nt = int(input())\nfor _ in range(t):\n    l = int(input())\n    alice = []\n    bob = []\n    alice_all = ''\n    bob_all = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(l):\n        temp = input()\n        consonant_index = -1\n        for j in range(len(temp)):\n            if temp[j] in vowels:\n                continue\n            elif consonant_index == -1:\n                consonant_index = j\n            elif j - consonant_index <= 2:\n                bob.append(temp)\n                bob_all = bob_all + temp\n                break\n            else:\n                consonant_index = j\n        else:\n            alice.append(temp)\n            alice_all = alice_all + temp\n    if l <= 10:\n        n = len(alice)\n        m = len(bob)\n        (score_A, score_B) = (1, 1)\n        (x_a, x_b) = (1, 1)\n        (fx_a, fx_b) = (1, 1)\n        for i in range(97, 123):\n            char = chr(i)\n            if char in alice_all:\n                rec_a = [x for x in alice if char in x]\n                x_a *= len(rec_a)\n                fx_a = fx_a * alice_all.count(char)\n            if char in bob_all:\n                rec_b = [x for x in bob if char in x]\n                x_b *= len(rec_b)\n                fx_b = fx_b * bob_all.count(char)\n        fx_a = math.pow(fx_a, n)\n        fx_b = math.pow(fx_b, m)\n        score_A = x_a / fx_a\n        score_B = x_b / fx_b\n        ans = score_A / score_B\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))\n    else:\n        n = decimal.Decimal(len(alice))\n        m = decimal.Decimal(len(bob))\n        score_A = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        score_B = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        denom_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        denom_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        ans = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        charInA = ''.join(sorted(set(alice_all)))\n        charInB = ''.join(sorted(set(bob_all)))\n        ctx = decimal.getcontext().copy()\n        ctx.Emax = decimal.MAX_EMAX\n        ctx.Emin = decimal.MIN_EMIN\n        ctx.prec = 100\n        for i in charInA:\n            rec_a = [x for x in alice if i in x]\n            if len(rec_a) > 0:\n                x_a = ctx.multiply(x_a, len(rec_a))\n                fx_a = ctx.multiply(fx_a, alice_all.count(i))\n        for i in charInB:\n            rec_b = [x for x in bob if i in x]\n            if len(rec_b) > 0:\n                x_b = ctx.multiply(x_b, len(rec_b))\n                fx_b = ctx.multiply(fx_b, bob_all.count(i))\n        denom_a = ctx.power(fx_a, n)\n        denom_b = ctx.power(fx_b, m)\n        score_A = ctx.divide(x_a, denom_a)\n        score_B = ctx.divide(x_b, denom_b)\n        ans = ctx.divide(score_A, score_B)\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))", "import math\nimport decimal\ndecimal.getcontext().prec = 1000\nt = int(input())\nfor _ in range(t):\n    l = int(input())\n    alice = []\n    bob = []\n    alice_all = ''\n    bob_all = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(l):\n        temp = input()\n        consonant_index = -1\n        for j in range(len(temp)):\n            if temp[j] in vowels:\n                continue\n            elif consonant_index == -1:\n                consonant_index = j\n            elif j - consonant_index <= 2:\n                bob.append(temp)\n                bob_all = bob_all + temp\n                break\n            else:\n                consonant_index = j\n        else:\n            alice.append(temp)\n            alice_all = alice_all + temp\n    if l <= 10:\n        n = len(alice)\n        m = len(bob)\n        (score_A, score_B) = (1, 1)\n        (x_a, x_b) = (1, 1)\n        (fx_a, fx_b) = (1, 1)\n        for i in range(97, 123):\n            char = chr(i)\n            if char in alice_all:\n                rec_a = [x for x in alice if char in x]\n                x_a *= len(rec_a)\n                fx_a = fx_a * alice_all.count(char)\n            if char in bob_all:\n                rec_b = [x for x in bob if char in x]\n                x_b *= len(rec_b)\n                fx_b = fx_b * bob_all.count(char)\n        fx_a = math.pow(fx_a, n)\n        fx_b = math.pow(fx_b, m)\n        score_A = x_a / fx_a\n        score_B = x_b / fx_b\n        ans = score_A / score_B\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))\n    else:\n        n = decimal.Decimal(len(alice))\n        m = decimal.Decimal(len(bob))\n        score_A = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        score_B = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        power_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        power_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        ans = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        charInA = ''.join(sorted(set(alice_all)))\n        charInB = ''.join(sorted(set(bob_all)))\n        ctx = decimal.getcontext().copy()\n        ctx.Emax = decimal.MAX_EMAX\n        ctx.Emin = decimal.MIN_EMIN\n        ctx.prec = 1000\n        for i in charInA:\n            rec_a = [x for x in alice if i in x]\n            if len(rec_a) > 0:\n                x_a = ctx.multiply(x_a, len(rec_a))\n                fx_a = ctx.multiply(fx_a, alice_all.count(i))\n        for i in charInB:\n            rec_b = [x for x in bob if i in x]\n            if len(rec_b) > 0:\n                x_b = ctx.multiply(x_b, len(rec_b))\n                fx_b = ctx.multiply(fx_b, bob_all.count(i))\n        denom_a = ctx.power(fx_a, n)\n        denom_b = ctx.power(fx_b, m)\n        score_A = ctx.divide(x_a, denom_a)\n        score_B = ctx.divide(x_b, denom_b)\n        ans = ctx.divide(score_A, score_B)\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))", "import math\nimport decimal\ndecimal.getcontext().prec = 1000\nt = int(input())\nfor _ in range(t):\n    l = int(input())\n    alice = []\n    bob = []\n    alice_all = ''\n    bob_all = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(l):\n        temp = input()\n        consonant_index = -1\n        for j in range(len(temp)):\n            if temp[j] in vowels:\n                continue\n            elif consonant_index == -1:\n                consonant_index = j\n            elif j - consonant_index <= 2:\n                bob.append(temp)\n                bob_all = bob_all + temp\n                break\n            else:\n                consonant_index = j\n        else:\n            alice.append(temp)\n            alice_all = alice_all + temp\n    if l <= 10:\n        n = len(alice)\n        m = len(bob)\n        (score_A, score_B) = (1, 1)\n        (x_a, x_b) = (1, 1)\n        (fx_a, fx_b) = (1, 1)\n        for i in range(97, 123):\n            char = chr(i)\n            if char in alice_all:\n                rec_a = [x for x in alice if char in x]\n                x_a *= len(rec_a)\n                fx_a = fx_a * alice_all.count(char)\n            if char in bob_all:\n                rec_b = [x for x in bob if char in x]\n                x_b *= len(rec_b)\n                fx_b = fx_b * bob_all.count(char)\n        fx_a = math.pow(fx_a, n)\n        fx_b = math.pow(fx_b, m)\n        score_A = x_a / fx_a\n        score_B = x_b / fx_b\n        ans = score_A / score_B\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))\n    else:\n        n = decimal.Decimal(len(alice))\n        m = decimal.Decimal(len(bob))\n        score_A = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        score_B = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        power_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        power_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        ans = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        charInA = ''.join(sorted(set(alice_all)))\n        charInB = ''.join(sorted(set(bob_all)))\n        ctx = decimal.getcontext().copy()\n        ctx.Emax = decimal.MAX_EMAX\n        ctx.Emin = decimal.MIN_EMIN\n        ctx.prec = 10000\n        for i in charInA:\n            rec_a = [x for x in alice if i in x]\n            if len(rec_a) > 0:\n                x_a = ctx.multiply(x_a, len(rec_a))\n                fx_a = ctx.multiply(fx_a, alice_all.count(i))\n        for i in charInB:\n            rec_b = [x for x in bob if i in x]\n            if len(rec_b) > 0:\n                x_b = ctx.multiply(x_b, len(rec_b))\n                fx_b = ctx.multiply(fx_b, bob_all.count(i))\n        denom_a = ctx.power(fx_a, n)\n        denom_b = ctx.power(fx_b, m)\n        score_A = ctx.divide(x_a, denom_a)\n        score_B = ctx.divide(x_b, denom_b)\n        ans = ctx.divide(score_A, score_B)\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))", "from math import log10\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    alice = []\n    bob = []\n    words = []\n    for i in range(n):\n        words.append(input())\n    for cur in words:\n        prev = -1\n        f = 0\n        for j in range(len(cur)):\n            if cur[j] not in ['a', 'e', 'i', 'o', 'u']:\n                if prev == -1:\n                    prev = j\n                elif abs(prev - j) == 2 or abs(prev - j) == 1:\n                    f = 1\n                    break\n                else:\n                    prev = j\n        if f == 1:\n            bob.append(cur)\n        else:\n            alice.append(cur)\n    n1 = len(alice)\n    freq_a = {}\n    for i in alice:\n        for j in i:\n            if j not in freq_a:\n                freq_a[j] = 1\n            else:\n                freq_a[j] += 1\n    num_a = {}\n    for i in freq_a:\n        num_a[i] = 0\n        for j in alice:\n            if i in j:\n                num_a[i] += 1\n    num1 = 1\n    den1 = 1\n    for i in num_a:\n        num1 = num1 * num_a[i]\n        den1 = den1 * freq_a[i]\n    n2 = len(bob)\n    freq_b = {}\n    for i in bob:\n        for j in i:\n            if j not in freq_b:\n                freq_b[j] = 1\n            else:\n                freq_b[j] += 1\n    num_b = {}\n    for i in freq_b:\n        num_b[i] = 0\n        for j in bob:\n            if i in j:\n                num_b[i] += 1\n    num2 = 1\n    den2 = 1\n    for i in num_b:\n        num2 = num2 * num_b[i]\n        den2 = den2 * freq_b[i]\n    if n <= 10:\n        if n2 >= n1:\n            ans = pow(den2 / den1, n1) * pow(den2, n2 - n1)\n        else:\n            ans = pow(den2 / den1, n2) * pow(den1, -(n1 - n2))\n        t = num1 / num2\n        ans = ans * t\n        if ans > 10000000.0:\n            print('Infinity')\n        else:\n            print(ans)\n    else:\n        ans1 = log10(num1) + n2 * log10(den2)\n        ans2 = log10(num2) + n1 * log10(den1)\n        ans1 = ans1 - ans2\n        if ans1 > 7.0:\n            print('Infinity')\n        else:\n            print(pow(10, ans1))", "import math\nimport decimal\ndecimal.getcontext().prec = 1000\nt = int(input())\nfor _ in range(t):\n    l = int(input())\n    alice = []\n    bob = []\n    alice_all = ''\n    bob_all = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(l):\n        temp = input()\n        consonant_index = -1\n        for j in range(len(temp)):\n            if temp[j] in vowels:\n                continue\n            elif consonant_index == -1:\n                consonant_index = j\n            elif j - consonant_index <= 2:\n                bob.append(temp)\n                bob_all = bob_all + temp\n                break\n            else:\n                consonant_index = j\n        else:\n            alice.append(temp)\n            alice_all = alice_all + temp\n    if l <= 10:\n        n = len(alice)\n        m = len(bob)\n        (score_A, score_B) = (1, 1)\n        (x_a, x_b) = (1, 1)\n        (fx_a, fx_b) = (1, 1)\n        for i in range(97, 123):\n            char = chr(i)\n            if char in alice_all:\n                rec_a = [x for x in alice if char in x]\n                x_a *= len(rec_a)\n                fx_a = fx_a * alice_all.count(char)\n            if char in bob_all:\n                rec_b = [x for x in bob if char in x]\n                x_b *= len(rec_b)\n                fx_b = fx_b * bob_all.count(char)\n        fx_a = math.pow(fx_a, n)\n        fx_b = math.pow(fx_b, m)\n        score_A = x_a / fx_a\n        score_B = x_b / fx_b\n        ans = score_A / score_B\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))\n    else:\n        n = decimal.Decimal(len(alice))\n        m = decimal.Decimal(len(bob))\n        score_A = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        score_B = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        power_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        power_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        ans = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        charInA = ''.join(sorted(set(alice_all)))\n        charInB = ''.join(sorted(set(bob_all)))\n        ctx = decimal.getcontext().copy()\n        ctx.Emax = decimal.MAX_EMAX\n        ctx.Emin = decimal.MIN_EMIN\n        ctx.prec = 10000\n        for i in charInA:\n            rec_a = [x for x in alice if i in x]\n            if len(rec_a) > 0:\n                x_a = ctx.multiply(x_a, len(rec_a))\n                fx_a = ctx.multiply(fx_a, alice_all.count(i))\n        for i in charInB:\n            rec_b = [x for x in bob if i in x]\n            if len(rec_b) > 0:\n                x_b = ctx.multiply(x_b, len(rec_b))\n                fx_b = ctx.multiply(fx_b, bob_all.count(i))\n        denom_a = ctx.power(fx_a, n)\n        denom_b = ctx.power(fx_b, m)\n        score_A = ctx.divide(x_a, denom_a)\n        score_B = ctx.divide(x_b, denom_b)\n        ans = ctx.divide(score_A, score_B)\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))", "import math\nimport decimal\ndecimal.getcontext().prec = 1000\nt = int(input())\nfor _ in range(t):\n    l = int(input())\n    alice = []\n    bob = []\n    alice_all = ''\n    bob_all = ''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    for i in range(l):\n        temp = input()\n        consonant_index = -1\n        for j in range(len(temp)):\n            if temp[j] in vowels:\n                continue\n            elif consonant_index == -1:\n                consonant_index = j\n            elif j - consonant_index <= 2:\n                bob.append(temp)\n                bob_all = bob_all + temp\n                break\n            else:\n                consonant_index = j\n        else:\n            alice.append(temp)\n            alice_all = alice_all + temp\n    if l <= 10:\n        n = len(alice)\n        m = len(bob)\n        (score_A, score_B) = (1, 1)\n        (x_a, x_b) = (1, 1)\n        (fx_a, fx_b) = (1, 1)\n        for i in range(97, 123):\n            char = chr(i)\n            if char in alice_all:\n                rec_a = [x for x in alice if char in x]\n                x_a *= len(rec_a)\n                fx_a = fx_a * alice_all.count(char)\n            if char in bob_all:\n                rec_b = [x for x in bob if char in x]\n                x_b *= len(rec_b)\n                fx_b = fx_b * bob_all.count(char)\n        fx_a = math.pow(fx_a, n)\n        fx_b = math.pow(fx_b, m)\n        score_A = x_a / fx_a\n        score_B = x_b / fx_b\n        ans = score_A / score_B\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print('{0:.9f}'.format(ans))\n    else:\n        n = decimal.Decimal(len(alice))\n        m = decimal.Decimal(len(bob))\n        score_A = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        score_B = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        x_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        power_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        power_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_a = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        fx_b = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        ans = decimal.Decimal(1).quantize(decimal.Decimal('0.0000000001'))\n        charInA = ''.join(sorted(set(alice_all)))\n        charInB = ''.join(sorted(set(bob_all)))\n        ctx = decimal.getcontext().copy()\n        ctx.Emax = decimal.MAX_EMAX\n        ctx.Emin = decimal.MIN_EMIN\n        ctx.prec = 10000\n        for i in charInA:\n            rec_a = [x for x in alice if i in x]\n            if len(rec_a) > 0:\n                x_a = ctx.multiply(x_a, len(rec_a))\n                fx_a = ctx.multiply(fx_a, alice_all.count(i))\n        for i in charInB:\n            rec_b = [x for x in bob if i in x]\n            if len(rec_b) > 0:\n                x_b = ctx.multiply(x_b, len(rec_b))\n                fx_b = ctx.multiply(fx_b, bob_all.count(i))\n        denom_a = ctx.power(fx_a, n)\n        denom_b = ctx.power(fx_b, m)\n        score_A = ctx.divide(x_a, denom_a)\n        score_B = ctx.divide(x_b, denom_b)\n        try:\n            ans = ctx.divide(score_A, score_B)\n        except decimal.InvalidOperation:\n            pass\n        else:\n            if ans > 10000000:\n                print('Infinity')\n            else:\n                print('{0:.9f}'.format(ans))", "from collections import defaultdict\nimport math\n\ndef substring(s):\n    prev = -1\n    for i in range(len(s)):\n        if s[i] not in ['a', 'e', 'i', 'o', 'u']:\n            if prev == -1:\n                prev = i\n            elif abs(prev - i) == 1 or abs(prev - i) == 2:\n                return 0\n            else:\n                prev = i\n    return 1\nfor _ in range(int(input())):\n    l = int(input())\n    alice = []\n    bob = []\n    m_a = defaultdict(lambda : 0)\n    m_b = defaultdict(lambda : 0)\n    res_a = defaultdict(lambda : 0)\n    res_b = defaultdict(lambda : 0)\n    for i in range(l):\n        s = input()\n        if substring(s):\n            alice.append(s)\n        else:\n            bob.append(s)\n    s_alice = len(alice)\n    s_bob = len(bob)\n    for i in alice:\n        for j in i:\n            m_a[j] += 1\n    for i in m_a:\n        for j in alice:\n            if i in j:\n                res_a[i] += 1\n    for i in bob:\n        for j in i:\n            m_b[j] += 1\n    for i in m_b:\n        for j in bob:\n            if i in j:\n                res_b[i] += 1\n    num_alice = 1\n    num_bob = 1\n    d_alice = 1\n    d_bob = 1\n    for i in m_a:\n        num_alice *= res_a[i]\n        d_alice *= m_a[i]\n    for i in m_b:\n        num_bob *= res_b[i]\n        d_bob *= m_b[i]\n    if l <= 10:\n        if s_bob >= s_alice:\n            k1 = math.pow(d_bob / d_alice, s_alice) * math.pow(d_bob, s_bob - s_alice)\n        else:\n            k1 = math.pow(d_bob / d_alice, s_bob) * math.pow(d_alice, -(s_alice - s_bob))\n        ans = num_alice / num_bob\n        ans = ans * k1\n        if ans > 10000000:\n            print('Infinity')\n        else:\n            print(ans)\n    else:\n        ALICE = math.log10(num_alice) + s_bob * math.log10(d_bob)\n        BOB = math.log10(num_bob) + s_alice * math.log10(d_alice)\n        ans = ALICE - BOB\n        if ans > 7.0:\n            print('Infinity')\n        else:\n            ans = pow(10, ans)\n            print(ans)", "def partition(s):\n    l = len(s)\n    d = 'aeiou'\n    for i in range(l):\n        if i + 1 < l:\n            if s[i] not in d and s[i + 1] not in d:\n                return 0\n        if i + 2 < l:\n            if s[i] not in d and s[i + 2] not in d:\n                return 0\n    return 1\nt = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    alice = []\n    bob = []\n    for i in range(n):\n        s = input()\n        if partition(s) == 1:\n            alice.append(s)\n        else:\n            bob.append(s)\n    alocc = [0] * 26\n    bocc = [0] * 26\n    alrow = [0] * 26\n    bobrow = [0] * 26\n    r = [0] * 26\n    for i in range(len(alice)):\n        a = alice[i]\n        for j in range(len(a)):\n            h = ord(a[j]) - ord('a')\n            alocc[h] += 1\n            if r[h] == 0:\n                alrow[h] += 1\n                r[h] = 1\n        r = [0] * 26\n    r = [0] * 26\n    for i in range(len(bob)):\n        b = bob[i]\n        for j in range(len(b)):\n            h = ord(b[j]) - ord('a')\n            bocc[h] += 1\n            if r[h] == 0:\n                bobrow[h] += 1\n                r[h] = 1\n        r = [0] * 26\n    numa = 1\n    numb = 1\n    dena = 1\n    denb = 1\n    for i in range(26):\n        if alocc[i] != 0:\n            numa = numa * alrow[i]\n            dena = dena * alocc[i]\n        if bocc[i] != 0:\n            numb = numb * bobrow[i]\n            denb = denb * bocc[i]\n    n1 = len(alice)\n    m = len(bob)\n    den = 1\n    if dena == denb:\n        res = numa * pow(denb, m - n1) / numb\n    elif m == n1:\n        den = denb / dena\n        res = numa * pow(den, m) / numb\n    else:\n        if m % 2 == 0:\n            h = pow(denb, m // 2)\n        else:\n            h = pow(denb, m // 2 + 1)\n        if n1 % 2 == 0:\n            k = pow(dena, n1 // 2)\n        else:\n            k = pow(dena, n1 // 2 + 1)\n        den = h / k\n        den = den * den\n        if m % 2 != 0:\n            den = den / denb\n        if n1 % 2 != 0:\n            den = den * dena\n        res = numa * den / numb\n    if res > 10000000:\n        print('Infinity')\n    else:\n        print('%.8f' % res)", "def partition(s):\n    l = len(s)\n    d = 'aeiou'\n    for i in range(l):\n        if i + 1 < l:\n            if s[i] not in d and s[i + 1] not in d:\n                return 0\n        if i + 2 < l:\n            if s[i] not in d and s[i + 2] not in d:\n                return 0\n    return 1\nt = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    alice = []\n    bob = []\n    for i in range(n):\n        s = input()\n        if partition(s) == 1:\n            alice.append(s)\n        else:\n            bob.append(s)\n    alocc = [0] * 26\n    bocc = [0] * 26\n    alrow = [0] * 26\n    bobrow = [0] * 26\n    r = [0] * 26\n    for i in range(len(alice)):\n        a = alice[i]\n        for j in range(len(a)):\n            h = ord(a[j]) - ord('a')\n            alocc[h] += 1\n            if r[h] == 0:\n                alrow[h] += 1\n                r[h] = 1\n        r = [0] * 26\n    r = [0] * 26\n    for i in range(len(bob)):\n        b = bob[i]\n        for j in range(len(b)):\n            h = ord(b[j]) - ord('a')\n            bocc[h] += 1\n            if r[h] == 0:\n                bobrow[h] += 1\n                r[h] = 1\n        r = [0] * 26\n    numa = 1\n    numb = 1\n    dena = 1\n    denb = 1\n    for i in range(26):\n        if alocc[i] != 0:\n            numa = numa * alrow[i]\n            dena = dena * alocc[i]\n        if bocc[i] != 0:\n            numb = numb * bobrow[i]\n            denb = denb * bocc[i]\n    n1 = len(alice)\n    m = len(bob)\n    den = 1\n    if dena == denb:\n        res = numa * pow(denb, m - n1) / numb\n    elif m == n1:\n        den = denb / dena\n        res = numa * pow(den, m) / numb\n    else:\n        if m % 2 == 0:\n            h = pow(denb, m // 2)\n        else:\n            h = pow(denb, m // 2 + 1)\n        if n1 % 2 == 0:\n            k = pow(dena, n1 // 2)\n        else:\n            k = pow(dena, n1 // 2 + 1)\n        den = h / k\n        den = den * den\n        if m % 2 != 0:\n            den = den / denb\n        if n1 % 2 != 0:\n            den = den * dena\n        res = numa * den / numb\n    if res > 10000000:\n        print('Infinity')\n    else:\n        print('%.8f' % res)", "def partition(s):\n    l = len(s)\n    d = 'aeiou'\n    for i in range(l):\n        if i + 1 < l:\n            if s[i] not in d and s[i + 1] not in d:\n                return 0\n        if i + 2 < l:\n            if s[i] not in d and s[i + 2] not in d:\n                return 0\n    return 1\nt = int(input())\nwhile t != 0:\n    t -= 1\n    n = int(input())\n    alice = []\n    bob = []\n    for i in range(n):\n        s = input()\n        if partition(s) == 1:\n            alice.append(s)\n        else:\n            bob.append(s)\n    alocc = [0] * 27\n    bocc = [0] * 27\n    alrow = [0] * 27\n    bobrow = [0] * 27\n    r = [0] * 27\n    for i in range(len(alice)):\n        a = alice[i]\n        for j in range(len(a)):\n            h = ord(a[j]) - ord('a')\n            alocc[h] += 1\n            if r[h] == 0:\n                alrow[h] += 1\n                r[h] = 1\n        r = [0] * 27\n    r = [0] * 27\n    for i in range(len(bob)):\n        b = bob[i]\n        for j in range(len(b)):\n            h = ord(b[j]) - ord('a')\n            bocc[h] += 1\n            if r[h] == 0:\n                bobrow[h] += 1\n                r[h] = 1\n        r = [0] * 27\n    numa = 1\n    numb = 1\n    dena = 1\n    denb = 1\n    for i in range(27):\n        if alocc[i] != 0:\n            numa = numa * alrow[i]\n            dena = dena * alocc[i]\n        if bocc[i] != 0:\n            numb = numb * bobrow[i]\n            denb = denb * bocc[i]\n    n1 = len(alice)\n    m = len(bob)\n    den = 1\n    if dena == denb:\n        res = numa * pow(denb, m - n1) / numb\n    elif m == n1:\n        den = denb / dena\n        res = numa * pow(den, m) / numb\n    else:\n        if m % 2 == 0:\n            h = pow(denb, m // 2)\n        else:\n            h = pow(denb, m // 2 + 1)\n        if n1 % 2 == 0:\n            k = pow(dena, n1 // 2)\n        else:\n            k = pow(dena, n1 // 2 + 1)\n        den = h / k\n        den = den * den\n        if m % 2 != 0:\n            den = den / denb\n        if n1 % 2 != 0:\n            den = den * dena\n        res = numa * den / numb\n    if res > 10000000:\n        print('Infinity')\n    else:\n        print('%.8f' % res)", "import decimal\ndecimal.getcontext().prec = 16\ndecimal.getcontext().Emin = -1000000000\ndecimal.getcontext().Emax = 1000000000\n\ndef vowel(x):\n    return x in 'aeiou'\n\ndef is_alice(s):\n    if not vowel(s[0]) and (not vowel(s[1])):\n        return False\n    for i in range(2, len(s)):\n        if not vowel(s[i]) and (not vowel(s[i - 1]) or not vowel(s[i - 2])):\n            return False\n    return True\n\ndef fast_exp(x, p):\n    x = decimal.Decimal(x)\n    ans = decimal.Decimal(1)\n    while p > 0:\n        if p & 1:\n            ans *= x\n        x *= x\n        p >>= 1\n    return ans\n\ndef get_score(strings):\n    k = len(strings)\n    xc = [0] * 26\n    fxc = [0] * 26\n    for s in strings:\n        f = [0] * 26\n        for x in s:\n            f[ord(x) - 97] += 1\n        for i in range(26):\n            if f[i] > 0:\n                xc[i] += 1\n                fxc[i] += f[i]\n    (pxc, pfxc) = (1, 1)\n    for i in range(26):\n        if xc[i] > 0:\n            pxc *= xc[i]\n            pfxc *= fxc[i]\n    return decimal.Decimal(pxc) / fast_exp(pfxc, k)\nfor _ in range(int(input())):\n    (alice, bob) = ([], [])\n    for _ in range(int(input())):\n        inp = input()\n        if is_alice(inp):\n            alice.append(inp)\n        else:\n            bob.append(inp)\n    alice_score = get_score(alice)\n    bob_score = get_score(bob)\n    ratio = alice_score / bob_score\n    if ratio > 10000000.0:\n        print('Infinity')\n    else:\n        print(ratio)", "from math import log10\n\ndef sub(nums, k):\n    (count, p, d) = (0, 0, {0: 1})\n    (vowel, cons) = (0, 0)\n    check = {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}\n    d1 = {}\n    for i in nums:\n        if i in check:\n            x = -1\n            vowel += 1\n        else:\n            x = 1\n            cons += 1\n        p += x\n        if p - k in d:\n            count += d[p - k]\n        if p not in d:\n            d[p] = 1\n        else:\n            d[p] += 1\n        if i not in d1:\n            d1[i] = 1\n        else:\n            d1[i] += 1\n    return (count, d1, vowel, cons)\ns = 'abcdefghijklmnopqrstuvwxyz'\nd = {}\nfor i in range(26):\n    d[s[i]] = i\nte = int(input())\nfinallfy = []\nfor _ in range(te):\n    n = int(input())\n    hy = 0\n    pura = []\n    (alice_up, alice_count, bob_up, bob_count) = ([0] * 26, [0] * 26, [0] * 26, [0] * 26)\n    for _ in range(n):\n        s = input()\n        pura.append(s)\n    for i in range(n):\n        (ans, d1, vowel, conso) = sub(pura[i], 1)\n        if conso == 0 or (ans <= conso and vowel != 0):\n            hy += 1\n            for (x, y) in d1.items():\n                alice_up[d[x]] += 1\n                alice_count[d[x]] += y\n        else:\n            for (x, y) in d1.items():\n                bob_up[d[x]] += 1\n                bob_count[d[x]] += y\n    (ans_alice, ans_al, ans_bob, ans_b) = (1, 1, 1, 1)\n    for i in range(26):\n        if alice_up[i] != 0:\n            ans_alice *= alice_up[i]\n            ans_al *= alice_count[i]\n        if bob_up[i] != 0:\n            ans_bob *= bob_up[i]\n            ans_b *= bob_count[i]\n    ert = log10(ans_alice / ans_bob) + ((n - hy) * log10(ans_b) - hy * log10(ans_al))\n    if ert > 7:\n        finallfy.append('Infinity')\n    else:\n        finallfy.append(10 ** ert)\nfor x in finallfy:\n    print(x)", "vowels = ['a', 'e', 'i', 'o', 'u']\n\ndef check(s):\n    n = len(s)\n    if n == 2:\n        if s[0] not in vowels and s[1] not in vowels:\n            return False\n    for i in range(1, n - 1):\n        if s[i] in vowels:\n            if s[i - 1] not in vowels and s[i + 1] not in vowels:\n                return False\n        elif s[i - 1] not in vowels or s[i + 1] not in vowels:\n            return False\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    s = []\n    for i in range(n):\n        s.append(input())\n    alice = []\n    bob = []\n    for i in s:\n        if check(i):\n            alice.append(i)\n        else:\n            bob.append(i)\n    a1 = [0] * 27\n    a2 = [0] * 27\n    b1 = [0] * 27\n    b2 = [0] * 27\n    ref = [0] * 27\n    asize = len(alice)\n    bsize = len(bob)\n    for i in alice:\n        for j in i:\n            t = ord(j) - ord('a')\n            a1[t] += 1\n            if ref[t] == 0:\n                a2[t] += 1\n                ref[t] += 1\n        ref = [0] * 27\n    for i in bob:\n        for j in i:\n            t = ord(j) - ord('a')\n            b1[t] += 1\n            if ref[t] == 0:\n                b2[t] += 1\n                ref[t] += 1\n        ref = [0] * 27\n    numeratora = 1\n    numeratorb = 1\n    denominatora = 1\n    denominatorb = 1\n    temp = 1\n    for i in range(27):\n        if a2[i]:\n            numeratora *= a2[i]\n        if b2[i]:\n            numeratorb *= b2[i]\n        if a1[i]:\n            denominatora *= a1[i]\n        if b1[i]:\n            denominatorb *= b1[i]\n    if denominatorb == denominatora:\n        temp = pow(denominatora, bsize - asize)\n    elif asize == bsize:\n        temp = pow(denominatorb / denominatora, asize)\n    else:\n        if bsize % 2 == 0:\n            temp1 = pow(denominatorb, bsize // 2)\n        else:\n            temp1 = pow(denominatorb, bsize // 2 + 1)\n        if asize % 2 == 0:\n            temp2 = pow(denominatora, asize // 2)\n        else:\n            temp2 = pow(denominatora, asize // 2 + 1)\n        temp = temp1 / temp2\n        temp *= temp\n        if bsize % 2 != 0:\n            temp = temp / denominatorb\n        if asize % 2 != 0:\n            temp = temp * denominatora\n    ans = numeratora / numeratorb * temp\n    if ans > 10 ** 7:\n        print('Infinity')\n    else:\n        print('%.10f' % ans)", "import math\n\ndef check(s):\n    vowels = 'aeiou'\n    (cnt_vowel, cnt_consonant) = (0, 0)\n    for i in range(len(s)):\n        flag = s[i] not in vowels\n        if i and flag:\n            if cnt_consonant > 0:\n                if cnt_vowel <= 1:\n                    return False\n                else:\n                    (cnt_consonant, cnt_vowel) = (0, 0)\n            cnt_vowel = 0\n        cnt_vowel += int(not flag)\n        cnt_consonant += int(flag)\n    return True\n\ndef getAns(v):\n    (cnt, cnt_char) = (dict(), dict())\n    for x in v:\n        s = set()\n        for y in x:\n            cnt_char[y] = cnt_char.get(y, 0) + 1\n            if y not in s:\n                cnt[y] = cnt.get(y, 0) + 1\n                s.add(y)\n    total_char = len(v)\n    ans = 0\n    for (x, y) in cnt_char.items():\n        ans += math.log10(cnt[x]) - total_char * math.log10(y)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    (v1, v2) = ([], [])\n    for i in range(n):\n        s = input()\n        if check(s):\n            v1.append(s)\n        else:\n            v2.append(s)\n    d1 = getAns(v1)\n    d2 = getAns(v2)\n    d1 -= d2\n    if d1 >= 7:\n        print('Infinity')\n    else:\n        ans = 10 ** d1\n        print('%.15f' % ans)", "vowles = ['a', 'e', 'i', 'o', 'u']\n\ndef diction(i):\n    d = {}\n    for j in i:\n        if j not in d:\n            d[j] = 0\n        d[j] += 1\n    return d\n\ndef check1(i):\n    a = 0\n    b = 0\n    if len(i) == 2:\n        if i[0] not in vowles and i[1] not in vowles:\n            return 0\n    else:\n        for j in range(1, len(i) - 1):\n            if i[j] not in vowles:\n                if i[j + 1] not in vowles:\n                    return 0\n                if i[j - 1] not in vowles:\n                    return 0\n            elif i[j + 1] not in vowles and i[j - 1] not in vowles:\n                return 0\n    return 1\n\ndef check(i, a):\n    p = 0\n    for j in a:\n        if i in j:\n            p += 1\n    return p\nt = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    alice = []\n    bob = []\n    for i in range(n):\n        b = input()\n        a = check1(b)\n        if a == 1:\n            alice.append(b)\n        else:\n            bob.append(b)\n    N = len(alice)\n    M = len(bob)\n    a = ''.join(alice)\n    b = ''.join(bob)\n    d1 = diction(a)\n    d2 = diction(b)\n    res1 = 1\n    res2 = 1\n    for i in d1:\n        p1 = check(i, alice)\n        res1 *= p1\n        res2 *= d1[i]\n    res3 = 1\n    res4 = 1\n    for i in d2:\n        p1 = check(i, bob)\n        res3 *= p1\n        res4 *= d2[i]\n    if res2 == res4:\n        res5 = pow(res4, M - N)\n    elif M == N:\n        if res2 != 0:\n            res5 = res4 / res2\n            res5 = pow(res5, M)\n    else:\n        temp1 = 0\n        temp2 = 0\n        if M % 2 == 0:\n            temp1 = pow(res4, M // 2)\n        else:\n            temp1 = pow(res4, M // 2 + 1)\n        if N % 2 == 0:\n            temp2 = pow(res2, N // 2)\n        else:\n            temp2 = pow(res2, N // 2 + 1)\n        res5 = temp1 / temp2\n        res5 *= res5\n        if M % 2 != 0:\n            res5 = res5 / res4\n        if N % 2 != 0:\n            res5 = res5 * res2\n    calc = res1 / res3 * res5\n    if calc > 10 ** 7:\n        print('Infinity')\n    else:\n        print('%.10f' % calc)", "from collections import defaultdict\nfrom heapq import *\nimport itertools, math, heapq\n\ndef parse_integer_list():\n    return [int(x) for x in input().split()]\ncons = {'v', 'w', 'f', 'z', 'd', 'k', 's', 'x', 'b', 'c', 't', 'm', 'p', 'q', 'y', 'j', 'n', 'r', 'l', 'h', 'g'}\nvowels = {'u', 'o', 'e', 'i', 'a'}\n\ndef filter_string(s):\n    for i in range(len(s) - 1):\n        if s[i] in vowels:\n            continue\n        if i == len(s) - 2:\n            if s[i + 1] in cons:\n                return False\n            break\n        if s[i + 1] in cons or s[i + 2] in cons:\n            return False\n    return True\nfrom collections import defaultdict\n\ndef handle_input(*args):\n    a_index = ord('a')\n    (L, S) = args\n    A = []\n    B = []\n    for i in range(L):\n        if filter_string(S[i]):\n            A.append(S[i])\n        else:\n            B.append(S[i])\n    a_letters = [(0, 0)] * 123\n    b_letters = [(0, 0)] * 123\n    for i in range(len(A)):\n        used = [False] * 123\n        for c in A[i]:\n            x = a_letters[ord(c)]\n            if used[ord(c)]:\n                num = x[0]\n            else:\n                num = x[0] + 1\n                used[ord(c)] = True\n            a_letters[ord(c)] = (num, x[1] + 1)\n    for i in range(len(B)):\n        used = [False] * 123\n        for c in B[i]:\n            x = b_letters[ord(c)]\n            if used[ord(c)]:\n                num = x[0]\n            else:\n                num = x[0] + 1\n                used[ord(c)] = True\n            b_letters[ord(c)] = (num, x[1] + 1)\n    a_score_top = 0\n    a_score_bot = 0\n    log_a = math.log(len(B))\n    log_b = math.log(len(A))\n    for x in a_letters:\n        if x == (0, 0):\n            continue\n        a_score_top += math.log2(x[0])\n        a_score_bot += math.log2(x[1]) * len(A)\n    for x in b_letters:\n        if x == (0, 0):\n            continue\n        a_score_bot += math.log2(x[0])\n        a_score_top += math.log2(x[1]) * len(B)\n    if a_score_top > 7 * math.log2(10) + a_score_bot:\n        print('Infinity')\n    else:\n        print(pow(2, a_score_top - a_score_bot))\nT = int(input())\nfor i in range(T):\n    L = int(input())\n    S = []\n    for i in range(L):\n        S.append(input().strip())\n    handle_input(L, S)", "from sys import stdin\nz = ['a', 'i', 'e', 'o', 'u']\nt = int(stdin.readline())\nwhile t > 0:\n    t -= 1\n    n = int(stdin.readline())\n    alice = []\n    bob = []\n    for j in range(n):\n        s = str(stdin.readline().strip('\\n'))\n        isalice = True\n        for i in range(1, len(s) - 1):\n            if s[i] in z:\n                if s[i - 1] not in z and s[i + 1] not in z:\n                    isalice = False\n            elif s[i - 1] not in z or s[i + 1] not in z:\n                isalice = False\n            if not isalice:\n                break\n        if s[0] not in z and s[1] not in z:\n            isalice = False\n        if s[-1] not in z and s[-2] not in z:\n            isalice = False\n        if isalice:\n            alice.append(s)\n        else:\n            bob.append(s)\n    ali = {}\n    bo = {}\n    for i in alice:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in ali:\n                ali[j] = (1, d[j])\n            else:\n                ali[j] = (ali[j][0] + 1, ali[j][1] + d[j])\n    for i in bob:\n        d = {}\n        for j in i:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        for j in d:\n            if j not in bo:\n                bo[j] = (1, d[j])\n            else:\n                bo[j] = (bo[j][0] + 1, bo[j][1] + d[j])\n    ans = 1\n    for i in ali:\n        ans *= ali[i][0]\n    for i in bo:\n        ans = ans / bo[i][0]\n    x = 1\n    y = 1\n    for i in bo:\n        x = x * bo[i][1]\n    for i in ali:\n        y = y * ali[i][1]\n    alice = len(alice)\n    bob = len(bob)\n    for i in range(bob):\n        while alice > 0 and ans > 10000000:\n            ans = ans / y\n            alice -= 1\n        ans *= x\n        if ans > 10000000 and alice == 0:\n            break\n    while alice > 0:\n        ans = ans / y\n        if ans < 1 and alice > 100:\n            ans = 0\n            break\n        alice -= 1\n    if ans > 10000000:\n        print('Infinity')\n    else:\n        print(ans)", "def main():\n    import math as m\n    ryt = m.log(10 ** 7, 2)\n    lyt = m.log(9e-07, 2)\n    t = int(input())\n    v = {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}\n    for qwer in range(t):\n        l = int(input())\n        a = []\n        b = []\n        for wer in range(l):\n            s = input()\n            n = len(s)\n            c1 = 0\n            for i in range(n):\n                if s[i] not in v:\n                    if i + 1 < n:\n                        if s[i + 1] not in v:\n                            c1 = 1\n                            break\n                    if i + 2 < n:\n                        if s[i + 2] not in v:\n                            c1 = 1\n                            break\n            if c1 == 1:\n                b.append(s)\n            else:\n                a.append(s)\n        xa = {}\n        fxa = {}\n        xb = {}\n        fxb = {}\n        ka = len(a)\n        kb = len(b)\n        for i in range(ka):\n            d = {}\n            for j in range(len(a[i])):\n                if a[i][j] in d:\n                    d[a[i][j]] += 1\n                else:\n                    d[a[i][j]] = 1\n            for u in d:\n                if u in xa:\n                    xa[u] += 1\n                    fxa[u] += d[u]\n                else:\n                    xa[u] = 1\n                    fxa[u] = d[u]\n        for i1 in range(kb):\n            d = {}\n            for j1 in range(len(b[i1])):\n                if b[i1][j1] in d:\n                    d[b[i1][j1]] += 1\n                else:\n                    d[b[i1][j1]] = 1\n            for u1 in d:\n                if u1 in xb:\n                    xb[u1] += 1\n                    fxb[u1] += d[u1]\n                else:\n                    xb[u1] = 1\n                    fxb[u1] = d[u1]\n        ans = 0\n        for y in xa:\n            ans += m.log(xa[y], 2) - ka * m.log(fxa[y], 2)\n        for r in xb:\n            ans += kb * m.log(fxb[r], 2) - m.log(xb[r], 2)\n        if ans > ryt:\n            print('Infinity')\n        elif ans < lyt:\n            print(0)\n        else:\n            print(2 ** ans)\nmain()", "import math\n\ndef check(ch):\n    return ch not in 'aeiou'\n\ndef find(s):\n    j = 0\n    for i in range(len(s)):\n        if check(s[i]):\n            j = i\n            break\n    for i in range(i + 1, len(s)):\n        if check(s[i]):\n            if i - j < 3:\n                return False\n            j = i\n    return True\nfor _ in range(int(input())):\n    n = int(input())\n    l = []\n    (a, b) = ([], [])\n    for __ in range(n):\n        s = input()\n        if find(s):\n            a.append(s)\n        else:\n            b.append(s)\n    k1 = len(a)\n    k2 = len(b)\n    (ra, rb) = (1, 1)\n    (la, lb) = (0.0, 0.0)\n    for ch in 'qwertyuiopasdfghjklzxcvbnm':\n        (x, fx) = (0, 0)\n        for s in a:\n            if ch in s:\n                x += 1\n                fx += s.count(ch)\n        if x > 0:\n            la += math.log10(x) - k1 * math.log10(fx)\n        (y, fy) = (0, 0)\n        for s in b:\n            if ch in s:\n                y += 1\n                fy += s.count(ch)\n        if y > 0:\n            lb += math.log10(y) - k2 * math.log10(fy)\n    if la - lb > 7.0:\n        print('Infinity')\n    else:\n        print('{0:.7f}'.format(pow(10, la - lb)))\n    pass", "def find_chef(recipe):\n    vovels = 'aeiou'\n    for i in range(len(recipe)):\n        try:\n            if recipe[i] not in vovels and recipe[i + 1] not in vovels:\n                return 'bob'\n        except IndexError:\n            pass\n        try:\n            if recipe[i] not in vovels and recipe[i + 2] not in vovels:\n                return 'bob'\n        except IndexError:\n            pass\n    return 'alice'\n\ndef update_alice_dict(alice_dict, recipe):\n    visited = ''\n    for letter in recipe:\n        alice_dict[letter][1] += 1\n        if letter not in visited:\n            alice_dict[letter][0] += 1\n            visited += letter\n    return alice_dict\n\ndef update_bob_dict(bob_dict, recipe):\n    visited = ''\n    for letter in recipe:\n        bob_dict[letter][1] += 1\n        if letter not in visited:\n            bob_dict[letter][0] += 1\n            visited += letter\n    return bob_dict\nfor case in range(int(input())):\n    n_alice = 0\n    n_bob = 0\n    alice_dict = {'a': [0, 0], 'b': [0, 0], 'c': [0, 0], 'd': [0, 0], 'e': [0, 0], 'f': [0, 0], 'g': [0, 0], 'h': [0, 0], 'i': [0, 0], 'j': [0, 0], 'k': [0, 0], 'l': [0, 0], 'm': [0, 0], 'n': [0, 0], 'o': [0, 0], 'p': [0, 0], 'q': [0, 0], 'r': [0, 0], 's': [0, 0], 't': [0, 0], 'u': [0, 0], 'v': [0, 0], 'w': [0, 0], 'x': [0, 0], 'y': [0, 0], 'z': [0, 0]}\n    bob_dict = {'a': [0, 0], 'b': [0, 0], 'c': [0, 0], 'd': [0, 0], 'e': [0, 0], 'f': [0, 0], 'g': [0, 0], 'h': [0, 0], 'i': [0, 0], 'j': [0, 0], 'k': [0, 0], 'l': [0, 0], 'm': [0, 0], 'n': [0, 0], 'o': [0, 0], 'p': [0, 0], 'q': [0, 0], 'r': [0, 0], 's': [0, 0], 't': [0, 0], 'u': [0, 0], 'v': [0, 0], 'w': [0, 0], 'x': [0, 0], 'y': [0, 0], 'z': [0, 0]}\n    no_of_strings = int(input())\n    for p in range(no_of_strings):\n        recipe = input()\n        chef = find_chef(recipe)\n        if chef == 'bob':\n            n_bob += 1\n            bob_dict = update_bob_dict(bob_dict, recipe)\n        else:\n            n_alice += 1\n            alice_dict = update_alice_dict(alice_dict, recipe)\n    if no_of_strings <= 10:\n        score_alice = 1\n        score_bob = 1\n        for letter in alice_dict.keys():\n            if alice_dict[letter][0] > 0:\n                num = alice_dict[letter][0]\n                dem = alice_dict[letter][1] ** n_alice\n                score_alice *= num / dem\n            if bob_dict[letter][0] > 0:\n                num = bob_dict[letter][0]\n                dem = bob_dict[letter][1] ** n_bob\n                score_bob *= num / dem\n        score = score_alice / score_bob\n        if score > 10000000:\n            print('Infinity')\n        else:\n            print(score)\n    else:\n        nums = []\n        dens = []\n        for letter in alice_dict.keys():\n            if alice_dict[letter][0] > 0:\n                num = alice_dict[letter][0]\n                dem = alice_dict[letter][1]\n                nums.append(num)\n                for q in range(n_alice):\n                    dens.append(dem)\n            if bob_dict[letter][0] > 0:\n                num = bob_dict[letter][0]\n                dem = bob_dict[letter][1]\n                for q in range(n_bob):\n                    nums.append(dem)\n                dens.append(num)\n        l_n = len(nums)\n        l_d = len(dens)\n        i = j = 0\n        score = 1\n        infinity_flag = False\n        zero_flag = False\n        while i < l_n or j < l_d:\n            if j >= l_d and i < l_n:\n                score *= nums[i]\n                i += 1\n                if score > 10000000.0 - 10:\n                    infinity_flag = True\n                    break\n            elif i == l_n and j < l_d:\n                score /= dens[j]\n                j += 1\n                if score < 1e-09:\n                    zero_flag = True\n                    break\n            elif score > 10000000.0:\n                score /= dens[j]\n                j += 1\n            else:\n                score *= nums[i]\n                i += 1\n        if infinity_flag:\n            print('Infinity')\n        else:\n            print(score)", "from math import log10\n\ndef identify_vowel(recipe):\n    return [1 if char in {'a', 'e', 'i', 'o', 'u'} else 0 for char in recipe]\n\ndef identify(s):\n    vow = identify_vowel(s)\n    if len(vow) <= 2:\n        return sum(vow) >= 1\n    pre_s = vow[0] + vow[1]\n    for i in range(2, len(s)):\n        pre_s += vow[i]\n        if pre_s < 2:\n            return False\n        pre_s -= vow[i - 2]\n    return True\n\ndef calculate(recipes):\n    K = len(recipes)\n    occurences = {}\n    exist = {}\n    for i in range(len(recipes)):\n        recipe = recipes[i]\n        for s in recipe:\n            if not s in occurences:\n                occurences[s] = 0\n            if not s in exist:\n                exist[s] = set()\n            occurences[s] += 1\n            exist[s].add(i)\n    score = 0\n    for alphabet in exist.keys():\n        score += log10(len(exist[alphabet])) - K * log10(occurences[alphabet])\n    return score\ntest = int(input())\nwhile test > 0:\n    test -= 1\n    l = int(input())\n    alice = []\n    bob = []\n    for i in range(l):\n        s = input()\n        if identify(s):\n            alice.append(s)\n        else:\n            bob.append(s)\n    ans = calculate(alice) - calculate(bob)\n    if ans > 7:\n        print('Infinity')\n    else:\n        ans = 10 ** ans\n        print(ans)", "import math\nimport sys\n\ndef isVocal(c):\n    if c in ['a', 'e', 'i', 'o', 'u']:\n        return 1\n    else:\n        return -1\n\ndef f(s, dicAliceChars, dicBobChars, dicAliceWords, dicBobWords):\n    le = len(s)\n    belongsToAlice = True\n    if le == 2:\n        if not (isVocal(s[0]) == 1 or isVocal(s[1]) == 1):\n            belongsToAlice = False\n    else:\n        for i in range(2, le):\n            if isVocal(s[i]) + isVocal(s[i - 1]) + isVocal(s[i - 2]) < 0:\n                belongsToAlice = False\n                break\n    se = set()\n    for c in list(s):\n        se.add(c)\n    if belongsToAlice == True:\n        for c in list(s):\n            dicAliceChars[c] += 1\n        for e in se:\n            dicAliceWords[e] += 1\n    else:\n        for c in list(s):\n            dicBobChars[c] += 1\n        for e in se:\n            dicBobWords[e] += 1\n    if belongsToAlice == True:\n        return 1\n    else:\n        return 0\n\ndef solveTestCase(instance):\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n    dicAliceChars = {}\n    dicBobChars = {}\n    dicAliceWords = {}\n    dicBobWords = {}\n    for c in alphabet:\n        dicAliceChars[c] = 0\n        dicBobChars[c] = 0\n        dicAliceWords[c] = 0\n        dicBobWords[c] = 0\n    wordsAlice = 0\n    wordsBob = 0\n    for str in instance:\n        wordsAlice += f(str, dicAliceChars, dicBobChars, dicAliceWords, dicBobWords)\n    wordsBob = len(instance) - wordsAlice\n    numeratorAlice = 1\n    denominatorAlice = 1\n    numeratorBob = 1\n    denominatorBob = 1\n    res = 0\n    vA = 0\n    vB = 0\n    for c in alphabet:\n        if dicAliceChars[c] > 0:\n            res += math.log(dicAliceWords[c], 10)\n            vA += math.log(dicAliceChars[c], 10)\n        if dicBobChars[c] > 0:\n            res -= math.log(dicBobWords[c], 10)\n            vB += math.log(dicBobChars[c], 10)\n    res -= wordsAlice * vA\n    res += wordsBob * vB\n    if res >= 7:\n        print('Infinity')\n    else:\n        print(10 ** res)\nT = int(sys.stdin.readline())\nfor t in range(T):\n    N = int(sys.stdin.readline())\n    instance = []\n    for n in range(N):\n        s = sys.stdin.readline()\n        if s[-1] == '\\n':\n            instance.append(s[:-1])\n        else:\n            instance.append(s)\n    solveTestCase(instance)", "from math import log\n\ndef bob(s, f2, x2):\n    for c in x2.keys():\n        if c in s:\n            x2[c] += 1\n    for C in s:\n        if f2[ord(C) - 97] == 0:\n            x2[C] = 1\n        f2[ord(C) - 97] += 1\n\ndef alice(s, f1, x1):\n    for c in f1.keys():\n        if c in s:\n            x1[ord(c) - 97] += 1\n    for C in s:\n        if C not in f1.keys():\n            x1[ord(C) - 97] = 1\n            f1[C] = 0\n        f1[C] += 1\nT = int(input())\nvowels = ['a', 'e', 'i', 'o', 'u']\nfor _ in range(T):\n    (f1, f2, x1, x2) = (dict(), [0] * 26, [0] * 26, dict())\n    n = 0\n    L = int(input())\n    for h in range(L):\n        s = str(input())\n        pos = -3\n        for i in range(len(s)):\n            if s[i] not in vowels:\n                if i - pos < 3:\n                    bob(s, f2, x2)\n                    break\n                pos = i\n        else:\n            if len(s) == 1 and s[0] not in vowels:\n                bob(s, f2, x2)\n            else:\n                n += 1\n                alice(s, f1, x1)\n    (X1, X2, F1, F2) = (1, 1, 1, 1)\n    for c in f1.keys():\n        X1 *= x1[ord(c) - 97]\n        F1 *= f1[c]\n    for c in x2.keys():\n        X2 *= x2[c]\n        F2 *= f2[ord(c) - 97]\n    LHS = log(X1) + (L - n) * log(F2) - log(X2) - n * log(F1)\n    if LHS > log(10 ** 7):\n        print('Infinity')\n    else:\n        print('{0:.7f}'.format(X1 / X2 * (F2 ** (L - n) / F1 ** n)))", "from math import log10\n\ndef f():\n    n = int(input())\n    alice = [0] * 150\n    alicew = [0] * 150\n    bob = [0] * 150\n    bobw = [0] * 150\n    ac = 0\n    bc = 0\n    al = 0\n    bl = 0\n    for i in range(n):\n        a = input()\n        flag = 0\n        count = [0] * 150\n        if len(a) == 2:\n            if a[0] not in 'aeiou' and a[1] not in 'aeiou':\n                flag = 1\n        for i in range(0, len(a) - 1):\n            if a[i] in 'bcdfghjklmnpqrstvwxyz':\n                try:\n                    if a[i + 1] in 'bcdfghjklmnpqrstvwxyz' or a[i + 2] in 'bcdfghjklmnpqrstvwxyz':\n                        flag = 1\n                        break\n                except IndexError:\n                    break\n        if flag == 1:\n            bc += 1\n            for i in range(0, len(a)):\n                bob[ord(a[i])] += 1\n                count[ord(a[i])] += 1\n            for i in range(ord('a'), ord('z') + 1):\n                if count[i]:\n                    bobw[i] += 1\n        else:\n            ac += 1\n            for i in range(0, len(a)):\n                alice[ord(a[i])] += 1\n                count[ord(a[i])] += 1\n            for i in range(ord('a'), ord('z') + 1):\n                if count[i]:\n                    alicew[i] += 1\n    for i in range(ord('a'), ord('z') + 1):\n        if alice[i]:\n            al += log10(alicew[i]) - ac * log10(alice[i])\n        if bob[i]:\n            bl += log10(bobw[i]) - bc * log10(bob[i])\n    if al - bl > 7:\n        print('Infinity')\n    else:\n        print(10 ** (al - bl))\nfor i in range(int(input())):\n    f()", "from functools import reduce\nfrom collections import defaultdict\nII = lambda : [int(x) for x in input().split()]\nPROD = lambda A: reduce(lambda x, y: x * y, A)\nvowels = 'aeiou'\ninf = 10 ** 7\n\ndef check(r):\n    if len(r) >= 2:\n        if r[0] not in vowels and r[1] not in vowels:\n            return False\n    elif len(r) == 1:\n        if r[0] not in vowels:\n            return False\n    for i in range(2, len(r)):\n        if r[i] not in vowels:\n            if r[i - 1] not in vowels or r[i - 2] not in vowels:\n                return False\n    return True\nT = int(input())\nfor _ in range(T):\n    fca = defaultdict(int)\n    fcb = defaultdict(int)\n    xca = defaultdict(int)\n    xcb = defaultdict(int)\n    (Ka, Kb) = (0, 0)\n    L = int(input())\n    for _ in range(L):\n        r = input()\n        if check(r):\n            Ka += 1\n            for c in r:\n                fca[c] += 1\n            for c in set(r):\n                xca[c] += 1\n        else:\n            Kb += 1\n            for c in r:\n                fcb[c] += 1\n            for c in set(r):\n                xcb[c] += 1\n    if len(xca) > 0 and len(fca) > 0:\n        (xpa, fpa) = (PROD(xca.values()), PROD(fca.values()))\n    else:\n        (xpa, fpa) = (1, 1)\n    if len(xcb) > 0 and len(fcb) > 0:\n        (xpb, fpb) = (PROD(xcb.values()), PROD(fcb.values()))\n    else:\n        (xpb, fpb) = (1, 1)\n    score = xpa / xpb\n    fps = fpb / fpa\n    Ks = min(Ka, Kb)\n    Ka -= Ks\n    Kb -= Ks\n    if fps >= 1:\n        while Kb > 0:\n            Kb -= 1\n            score *= fpb\n            while score > inf and Ka > 0:\n                Ka -= 1\n                score /= fpa\n            if score > inf:\n                break\n        while Ks > 0:\n            Ks -= 1\n            score *= fps\n            while score > inf and Ka > 0:\n                Ka -= 1\n                score /= fpa\n            if score > inf and Ka == 0:\n                break\n    else:\n        while Kb > 0:\n            Kb -= 1\n            score *= fpb\n            while score > inf:\n                if Ka > 0:\n                    Ka -= 1\n                    score /= fpa\n                elif Ks > 0:\n                    Ks -= 1\n                    score *= fps\n                else:\n                    break\n            if score > inf:\n                break\n        while Ks > 0 and score != 0:\n            Ks -= 1\n            score *= fps\n    score /= fpa ** Ka\n    if score > inf:\n        print('Infinity')\n    else:\n        print(score)", "import string\nimport math\nt = int(input())\nfor opo in range(t):\n    recipe_a = 0\n    recipe_b = 0\n    n = int(input())\n    alice = {}\n    d_alice = {}\n    bob = {}\n    d_bob = {}\n    for w in range(0, n):\n        flag_m = dict.fromkeys(string.ascii_lowercase, 0)\n        S = input()\n        i_con = 0\n        i = 1\n        flag = 0\n        for j in S:\n            if j == 'a' or j == 'e' or j == 'i' or (j == 'o') or (j == 'u'):\n                i += 1\n                continue\n            else:\n                if i_con == 0:\n                    i_con = i\n                else:\n                    temp = i - i_con\n                    i_con = i\n                    if temp <= 2:\n                        flag = 1\n                        break\n                i += 1\n        if flag == 0:\n            recipe_a += 1\n            for j in S:\n                if flag_m[j] == 0:\n                    if j in alice:\n                        alice[j] += 1\n                    else:\n                        alice[j] = 1\n                    flag_m[j] = 1\n                if j not in d_alice:\n                    d_alice[j] = 1\n                else:\n                    d_alice[j] += 1\n        else:\n            recipe_b += 1\n            for j in S:\n                if flag_m[j] == 0:\n                    if j in bob:\n                        bob[j] += 1\n                    else:\n                        bob[j] = 1\n                    flag_m[j] = 1\n                if j not in d_bob:\n                    d_bob[j] = 1\n                else:\n                    d_bob[j] += 1\n    sca = 0\n    scb = 0\n    sca1 = 0\n    scb2 = 0\n    for k in alice:\n        sca = sca + math.log10(alice[k])\n    for k in d_alice:\n        sca1 = sca1 + math.log10(d_alice[k])\n    sca1 = recipe_a * sca1\n    sca = sca - sca1\n    for k in bob:\n        scb = scb + math.log10(bob[k])\n    for k in d_bob:\n        scb2 = scb2 + math.log10(d_bob[k])\n    scb2 = recipe_b * scb2\n    scb = scb - scb2\n    if sca - scb > 7:\n        print('Infinity')\n    else:\n        print(math.pow(10, sca - scb))", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            if j not in aAppearances:\n                aAppearances[j] = 0\n            aAppearances[j] += 1\n            if j not in aRecipes:\n                aRecipes[j] = {}\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        totalA += log(len(aRecipes[i])) - log(aAppearances[i]) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            if j not in bAppearances:\n                bAppearances[j] = 0\n                bRecipes[j] = {}\n            bAppearances[j] += 1\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        totalB += log(len(bRecipes[i])) - log(bAppearances[i]) * len(b)\n    if totalA - totalB > log(10 ** 7):\n        return 'Infinity'\n    return math.e ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for i in range(l):\n        arr.append(input())\n    result = f(arr)\n    print(result)", "vowels = ['a', 'e', 'i', 'o', 'u']\nletters = 'qwertyuiopasdfghjklzxcvbnm'\nt = int(input())\nfor _ in range(t):\n    alice = []\n    bob = []\n    n = int(input())\n    for l in range(n):\n        arr = input()\n        if len(arr) == 2:\n            if arr[0] in vowels or arr[1] in vowels:\n                alice.append(arr)\n            else:\n                bob.append(arr)\n        else:\n            flag2 = 0\n            for i in range(len(arr) - 2):\n                if not (arr[i] in vowels and arr[i + 1] in vowels or (arr[i + 1] in vowels and arr[i + 2] in vowels) or (arr[i] in vowels and arr[i + 2] in vowels)):\n                    flag2 = 1\n                    bob.append(arr)\n                    break\n            if flag2 == 0:\n                alice.append(arr)\n    alice_total = ''.join(alice)\n    bob_total = ''.join(bob)\n    alice_d = 1\n    alice_n = 1\n    bob_d = 1\n    bob_n = 1\n    for letter in letters:\n        if letter in alice_total:\n            alice_count = 0\n            alice_d *= alice_total.count(letter)\n            for word in alice:\n                if letter in word:\n                    alice_count += 1\n            alice_n *= alice_count\n        if letter in bob_total:\n            bob_count = 0\n            bob_d *= bob_total.count(letter)\n            for word in bob:\n                if letter in word:\n                    bob_count += 1\n            bob_n *= bob_count\n    mini = min(len(bob), len(alice))\n    bob_d = bob_d ** (len(bob) / mini)\n    alice_d = alice_d ** (len(alice) / mini)\n    x = alice_n / bob_n\n    for i in range(mini):\n        x *= bob_d / alice_d\n    if x <= 10 ** 7:\n        print(x)\n    else:\n        print('Infinity')", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            if j not in aAppearances:\n                aAppearances[j] = 0\n            aAppearances[j] += 1\n            if j not in aRecipes:\n                aRecipes[j] = {}\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        totalA += log(len(aRecipes[i])) - log(aAppearances[i]) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            if j not in bAppearances:\n                bAppearances[j] = 0\n            bAppearances[j] += 1\n            if j not in bRecipes:\n                bRecipes[j] = {}\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        totalB += log(len(bRecipes[i])) - log(bAppearances[i]) * len(b)\n    if totalA - totalB > log(10 ** 7):\n        return 'Infinity'\n    return math.e ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for i in range(l):\n        arr.append(input().rstrip())\n    result = f(arr)\n    print(result)", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in range(97, 123):\n        j = chr(i)\n        aAppearances[j] = 0\n        aRecipes[j] = {}\n        bAppearances[j] = 0\n        bRecipes[j] = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            aAppearances[j] += 1\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        if len(aRecipes[i]) != 0 and aAppearances[i] != 0:\n            totalA += log(len(aRecipes[i])) - log(aAppearances[i]) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            bAppearances[j] += 1\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        if len(bRecipes[i]) != 0 and bAppearances[i] != 0:\n            totalB += log(len(bRecipes[i])) - log(bAppearances[i]) * len(b)\n    if totalA - totalB > log(10 ** 7):\n        return -1\n    return math.e ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for j in range(l):\n        arr.append(str(input()))\n    result = f(arr)\n    if result == -1:\n        print('Infinity')\n    else:\n        print(result)", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in range(97, 123):\n        j = chr(i)\n        aAppearances[j] = 0\n        aRecipes[j] = {}\n        bAppearances[j] = 0\n        bRecipes[j] = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            aAppearances[j] += 1\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        if len(aRecipes[i]) != 0:\n            totalA += log(len(aRecipes[i])) - log(aAppearances[i]) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            bAppearances[j] += 1\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        if len(bRecipes[i]) != 0:\n            totalB += log(len(bRecipes[i])) - log(bAppearances[i]) * len(b)\n    if totalA - totalB > log(10 ** 7):\n        return -1\n    return math.e ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for j in range(l):\n        arr.append(input())\n    result = f(arr)\n    if result == -1:\n        print('Infinity')\n    else:\n        print(result)", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in range(97, 123):\n        j = chr(i)\n        aAppearances[j] = 0\n        aRecipes[j] = {}\n        bAppearances[j] = 0\n        bRecipes[j] = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            aAppearances[j] += 1\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        if len(aRecipes[i]) != 0:\n            totalA += log(len(aRecipes[i])) - log(aAppearances[i]) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            bAppearances[j] += 1\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        if len(bRecipes[i]) != 0:\n            totalB += log(len(bRecipes[i])) - log(bAppearances[i]) * len(b)\n    if totalA - totalB > log(10 ** 7):\n        return None\n    return math.e ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for j in range(l):\n        arr.append(input())\n    result = f(arr)\n    if result is None:\n        print('Infinity')\n    else:\n        print(result)", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            if j not in aAppearances:\n                aAppearances[j] = 0\n            aAppearances[j] += 1\n            if j not in aRecipes:\n                aRecipes[j] = {}\n            aRecipes[j][i] = 1\n    for i in range(len(b)):\n        for j in b[i]:\n            if j not in bAppearances:\n                bAppearances[j] = 0\n            bAppearances[j] += 1\n            if j not in bRecipes:\n                bRecipes[j] = {}\n            bRecipes[j][i] = 1\n    total = 0\n    aKeys = list(aAppearances.keys())\n    bKeys = list(bAppearances.keys())\n    for i in range(max(len(aKeys), len(bKeys))):\n        try:\n            total += log(len(aRecipes[aKeys[i]]), 10) - log(aAppearances[aKeys[i]], 10) * len(a)\n        except:\n            pass\n        try:\n            total -= log(len(bRecipes[bKeys[i]]), 10) - log(bAppearances[bKeys[i]], 10) * len(b)\n        except:\n            pass\n    if total > 7:\n        return 'Infinity'\n    if total < -7:\n        return 0\n    return '{0:.16f}'.format(10 ** total)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for j in range(l):\n        arr.append(input())\n    result = f(arr)\n    print(str(result))", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            if j not in aAppearances:\n                aAppearances[j] = 0\n            aAppearances[j] += 1\n            if j not in aRecipes:\n                aRecipes[j] = {}\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        totalA += log(len(aRecipes[i]), 10) - log(aAppearances[i], 10) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            if j not in bAppearances:\n                bAppearances[j] = 0\n            bAppearances[j] += 1\n            if j not in bRecipes:\n                bRecipes[j] = {}\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        totalB += log(len(bRecipes[i]), 10) - log(bAppearances[i], 10) * len(b)\n    if totalA - totalB > 7:\n        return 'Infinity'\n    if totalB - totalA > 7:\n        return 0\n    return 10 ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for j in range(l):\n        arr.append(input())\n    result = f(arr)\n    print(result)", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            if j not in aAppearances:\n                aAppearances[j] = 0\n            aAppearances[j] += 1\n            if j not in aRecipes:\n                aRecipes[j] = {}\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        totalA += log(len(aRecipes[i])) - log(aAppearances[i]) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            if j not in bAppearances:\n                bAppearances[j] = 0\n            bAppearances[j] += 1\n            if j not in bRecipes:\n                bRecipes[j] = {}\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        totalB += log(len(bRecipes[i])) - log(bAppearances[i]) * len(b)\n    if totalA - totalB > log(10 ** 7):\n        return 'Infinity'\n    if totalB - totalA > log(10 ** 7):\n        return 0\n    return math.e ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for j in range(l):\n        arr.append(input())\n    result = f(arr)\n    print(result)", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            if j not in aAppearances:\n                aAppearances[j] = 0\n            aAppearances[j] += 1\n            if j not in aRecipes:\n                aRecipes[j] = {}\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        totalA += log(len(aRecipes[i])) - log(aAppearances[i]) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            if j not in bAppearances:\n                bAppearances[j] = 0\n            bAppearances[j] += 1\n            if j not in bRecipes:\n                bRecipes[j] = {}\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        totalB += log(len(bRecipes[i])) - log(bAppearances[i]) * len(b)\n    if totalA - totalB > log(10 ** 7):\n        return 'Infinity'\n    return math.e ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for j in range(l):\n        arr.append(input())\n    result = f(arr)\n    print(result)", "import math\nimport os\nimport random\nimport re\nimport sys\nfrom math import log\n\ndef isVowel(char):\n    return char in ['a', 'e', 'i', 'o', 'u']\n\ndef isA(string):\n    for i in range(len(string)):\n        if not isVowel(string[i]) and (i + 1 < len(string) and (not isVowel(string[i + 1])) or (i + 2 < len(string) and (not isVowel(string[i + 2])))):\n            return False\n    return True\n\ndef f(arr):\n    a = []\n    b = []\n    aRecipes = {}\n    aAppearances = {}\n    bRecipes = {}\n    bAppearances = {}\n    for i in arr:\n        if isA(i):\n            a.append(i)\n        else:\n            b.append(i)\n    for i in range(len(a)):\n        for j in a[i]:\n            if j not in aAppearances:\n                aAppearances[j] = 0\n            aAppearances[j] += 1\n            if j not in aRecipes:\n                aRecipes[j] = {}\n            aRecipes[j][i] = 1\n    totalA = 0\n    for i in aAppearances:\n        totalA += log(len(aRecipes[i])) - log(aAppearances[i]) * len(a)\n    for i in range(len(b)):\n        for j in b[i]:\n            if j not in bAppearances:\n                bAppearances[j] = 0\n            bAppearances[j] += 1\n            if j not in bRecipes:\n                bRecipes[j] = {}\n            bRecipes[j][i] = 1\n    totalB = 0\n    for i in bAppearances:\n        totalB += log(len(bRecipes[i])) - log(bAppearances[i]) * len(b)\n    if totalA - totalB > log(10 ** 7):\n        return 'Infinity'\n    return math.e ** (totalA - totalB)\nt = int(input())\nfor i in range(t):\n    l = int(input())\n    arr = []\n    for i in range(l):\n        arr.append(input())\n    result = f(arr)\n    print(result)"]