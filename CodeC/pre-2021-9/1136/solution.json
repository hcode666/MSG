["def solve(i):\n    for k in range(n):\n        (a, b) = (arr[k][0], arr[k][1])\n        count = 0\n        for j in range(7):\n            if mask[a] & 1 << j and i & 1 << j:\n                count += 1\n        if count != b:\n            return False\n    return True\nmask = [119, 36, 93, 109, 46, 107, 123, 37, 127, 111]\ntests = int(input())\nfor te in range(tests):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    flag = 0\n    mina = 10\n    maxa = -1\n    for i in range(1 << 7):\n        if solve(i):\n            flag = 1\n            count = 0\n            for j in range(7):\n                if i & 1 << j == 0:\n                    count += 1\n            mina = min(mina, count)\n            maxa = max(maxa, count)\n    if flag == 0:\n        print('invalid')\n    else:\n        print(mina, maxa)", "def solve(i):\n    for k in range(n):\n        (a, b) = (arr[k][0], arr[k][1])\n        count = 0\n        for j in range(7):\n            if mask[a] & 1 << j and i & 1 << j:\n                count += 1\n        if count != b:\n            return False\n    return True\nmask = [119, 36, 93, 109, 46, 107, 123, 37, 127, 111]\ntests = int(input())\nfor te in range(tests):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    flag = 0\n    mina = 10\n    maxa = -1\n    for i in range(1 << 7):\n        if solve(i):\n            flag = 1\n            count = 0\n            for j in range(7):\n                if i & 1 << j == 0:\n                    count += 1\n            mina = min(mina, count)\n            maxa = max(maxa, count)\n    if flag == 0:\n        print('invalid')\n    else:\n        print(mina, maxa)", "def solve(i):\n    for k in range(n):\n        (a, b) = (arr[k][0], arr[k][1])\n        count = 0\n        for j in range(7):\n            if mask[a] & 1 << j and i & 1 << j:\n                count += 1\n        if count != b:\n            return False\n    return True\nmask = [119, 36, 93, 109, 46, 107, 123, 37, 127, 111]\ntests = int(input())\nfor te in range(tests):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    flag = 0\n    mina = 10\n    maxa = -1\n    for i in range(1 << 7):\n        if solve(i):\n            flag = 1\n            count = 0\n            for j in range(7):\n                if i & 1 << j == 0:\n                    count += 1\n            mina = min(mina, count)\n            maxa = max(maxa, count)\n    if flag == 0:\n        print('invalid')\n    else:\n        print(mina, maxa)", "def solve(i):\n    for k in range(n):\n        (a, b) = (arr[k][0], arr[k][1])\n        count = 0\n        for j in range(7):\n            if mask[a] & 1 << j and i & 1 << j:\n                count += 1\n        if count != b:\n            return False\n    return True\nmask = [119, 36, 93, 109, 46, 107, 123, 37, 127, 111]\ntests = int(input())\nfor te in range(tests):\n    n = int(input())\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    flag = 0\n    mina = 10\n    maxa = -1\n    for i in range(1 << 7):\n        if solve(i):\n            flag = 1\n            count = 0\n            for j in range(7):\n                if i & 1 << j == 0:\n                    count += 1\n            mina = min(mina, count)\n            maxa = max(maxa, count)\n    if flag == 0:\n        print('invalid')\n    else:\n        print(mina, maxa)", "num_dic = {0: '1110111', 1: '0010010', 2: '1011101', 3: '1011011', 4: '0111010', 5: '1101011', 6: '1101111', 7: '1010010', 8: '1111111', 9: '1111011'}\nfor z in range(int(input())):\n    n = int(input())\n    tuples = [tuple(map(int, input().split())) for i in range(n)]\n    valid_config = []\n    for i in range(128):\n        valid = True\n        for j in range(n):\n            (x, y) = tuples[j]\n            x_bin = int(num_dic[x], 2)\n            tot = bin(x_bin & i)[2:].count('1')\n            if tot != y:\n                valid = False\n        if valid:\n            valid_config.append(i)\n    mn = 7\n    mx = 0\n    for k in valid_config:\n        cnt_bin = bin(k)\n        cnt_bin = '0' * (7 - len(cnt_bin[2:])) + cnt_bin[2:]\n        cnt = cnt_bin.count('0')\n        if cnt > mx:\n            mx = cnt\n        if cnt < mn:\n            mn = cnt\n    if len(valid_config) == 0:\n        print('invalid')\n    else:\n        print(mn, mx)", "def invalid(n, l, list1, list5, max_dead):\n    list2 = []\n    for i in range(n):\n        if len(list1[l[i][0]]) < l[i][1]:\n            print('invalid')\n            return\n    for i in range(127):\n        list3 = list5[i].copy()\n        list4 = list({0, 1, 2, 3, 4, 5, 6} - set(list3))\n        list4.sort()\n        flag = 0\n        dead = -1\n        for k in range(n):\n            dead = len(list1[l[k][0]]) - l[k][1]\n            if dead < 0:\n                print('invalid')\n                return\n            for m in list1[l[k][0]]:\n                if dead == 0:\n                    if m not in list4:\n                        flag = 1\n                        break\n                elif m in list3:\n                    dead -= 1\n            if flag == 1:\n                break\n            if dead != 0:\n                break\n        if dead == 0 and flag == 0:\n            list2.append(list3)\n    if max_dead == 0:\n        if len(list2) == 0:\n            print(0, 0, sep=' ')\n        else:\n            print(0, len(list2[len(list2) - 1]), sep=' ')\n    elif len(list2) == 0:\n        print('invalid')\n    else:\n        print(len(list2[0]), len(list2[len(list2) - 1]), sep=' ')\nt = int(input())\nlist1 = [[0, 1, 3, 4, 5, 6], [1, 3], [0, 1, 2, 4, 5], [0, 1, 2, 3, 4], [1, 2, 3, 6], [0, 2, 3, 4, 6], [0, 2, 3, 4, 5, 6], [0, 1, 3], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 6]]\nlist5 = [[0], [1], [2], [3], [4], [5], [6]]\nfor i in range(127):\n    list6 = list5[i].copy()\n    for j in range(list6[len(list6) - 1] + 1, 7):\n        list5.append(list6 + [j])\nfor i in range(t):\n    n = int(input())\n    l = []\n    max_dead = -999\n    for j in range(n):\n        l1 = []\n        s = input().split(' ')\n        l1.append(int(s[0]))\n        l1.append(int(s[1]))\n        if len(list1[l1[0]]) - l1[1] > max_dead:\n            max_dead = len(list1[l1[0]]) - l1[1]\n        l.append(l1)\n    if max_dead < 0:\n        print('invalid')\n        continue\n    invalid(n, l, list1, list5, max_dead)", "def count_alive(num):\n    return bin(num).count('1')\nfor _ in range(int(input())):\n    li = []\n    for i in range(int(input())):\n        (xx, yy) = map(int, input().split())\n        li.append((xx, yy))\n    ideal = [119, 18, 93, 91, 58, 107, 111, 82, 127, 123]\n    comb = list(range(128))\n    valid = 1\n    for (x, y) in li:\n        if y > count_alive(ideal[x]):\n            valid = 0\n            break\n    ncomb = []\n    if valid:\n        for (x, y) in li:\n            for j in comb:\n                if count_alive(ideal[x] & j) == y:\n                    ncomb.append(j)\n            comb = ncomb\n            ncomb = []\n    if len(comb) == 0:\n        valid = 0\n    if valid:\n        alive = []\n        for i in range(len(comb)):\n            alive.append(count_alive(comb[i]))\n        print(7 - max(alive), 7 - min(alive))\n    else:\n        print('invalid')", "def count_alive(num):\n    return bin(num).count('1')\nfor _ in range(int(input())):\n    li = []\n    for i in range(int(input())):\n        (xx, yy) = map(int, input().split())\n        li.append((xx, yy))\n    ideal = [119, 18, 93, 91, 58, 107, 111, 82, 127, 123]\n    comb = list(range(128))\n    valid = 1\n    for (x, y) in li:\n        if y > count_alive(ideal[x]):\n            valid = 0\n            break\n    ncomb = []\n    if valid:\n        for (x, y) in li:\n            for j in comb:\n                if count_alive(ideal[x] & j) == y:\n                    ncomb.append(j)\n            comb = list(set(comb) & set(ncomb))\n            ncomb = []\n    if len(comb) == 0:\n        valid = 0\n    if valid:\n        alive = []\n        for i in range(len(comb)):\n            alive.append(count_alive(comb[i]))\n        print(7 - max(alive), 7 - min(alive))\n    else:\n        print('invalid')", "mask = [119, 36, 93, 109, 46, 107, 123, 37, 127, 111]\n\ndef NumOn(x):\n    i = 1\n    ans = 0\n    while i < 128:\n        if x & i > 0:\n            ans += 1\n        i = i << 1\n    return ans\n\ndef NumOff(x):\n    return 7 - NumOn(x)\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    inp = [list(map(int, input().split())) for _ in range(n)]\n    configs = []\n    for config in range(128):\n        valid = True\n        for i in range(n):\n            if NumOn(mask[inp[i][0]] & config) != inp[i][1]:\n                valid = False\n                break\n        if valid:\n            configs.append(config)\n    if len(configs) == 0:\n        print('invalid')\n    else:\n        max = -1\n        min = 8\n        for c in configs:\n            dead = NumOff(c)\n            if dead > max:\n                max = dead\n            if dead < min:\n                min = dead\n        print(min, max)", "dicti = {1: '0110000', 2: '1101101', 3: '1111001', 4: '0110011', 5: '1011011', 6: '1011111', 7: '1110000', 8: '1111111', 9: '1111011', 0: '1111110'}\nArr = []\nfor i in range(2 ** 7):\n    to_Append = str(bin(i))[2:]\n    Arr.append('0' * (7 - len(to_Append)) + to_Append)\n\ndef check(Ans_Arr, p):\n    temp_Arr = []\n    no_of_ones = p[1]\n    ones_places = [i for i in range(7) if dicti[p[0]][i] == '1']\n    for i in Ans_Arr:\n        if i.count('1') >= p[1]:\n            cco = 0\n            for j in ones_places:\n                if i[j] == '1':\n                    cco += 1\n            if cco == p[1]:\n                temp_Arr.append(i)\n    return temp_Arr\nfor i in range(int(input())):\n    flag = False\n    Ans_Arr = Arr[:]\n    queries = []\n    n = int(input())\n    for j in range(n):\n        queries.append(list(map(int, input().split())))\n    for p in queries:\n        if p[1] > dicti[p[0]].count('1'):\n            print('invalid')\n            flag = True\n            break\n        Ans_Arr = check(Ans_Arr, p)\n        if len(Ans_Arr) == 0:\n            print('invalid')\n            flag = True\n            break\n    if not flag:\n        for m in range(len(Ans_Arr)):\n            Ans_Arr[m] = Ans_Arr[m].count('0')\n        print(min(Ans_Arr), max(Ans_Arr))", "def n1(n):\n    s = bin(n)\n    if s[2] == '0':\n        return 0\n    else:\n        return s.count('1')\nconf = [119, 18, 93, 91, 58, 107, 111, 82, 127, 123]\nfor z in range(int(input())):\n    n = int(input())\n    bf = []\n    for i in range(128):\n        bf.append(i)\n    li = []\n    for i in range(n):\n        li.append(tuple(map(int, input().split())))\n    for (x, y) in li:\n        bf1 = []\n        for j in bf:\n            if n1(conf[x] & j) == y:\n                bf1.append(j)\n        if not bf1:\n            print('invalid')\n            break\n        else:\n            bf = list(set(bf) & set(bf1))\n        if not bf:\n            print('invalid')\n            break\n    else:\n        mx = n1(bf[0])\n        mn = mx\n        for j in bf:\n            mx = max(mx, n1(j))\n            mn = min(mn, n1(j))\n        print(7 - mx, 7 - mn)", "seg = [[True, True, True, True, True, True, False], [False, False, False, True, True, False, False], [False, True, True, False, True, True, True], [False, False, True, True, True, True, True], [True, False, False, True, True, False, True], [True, False, True, True, False, True, True], [True, True, True, True, False, True, True], [False, False, False, True, True, True, False], [True] * 7, [True, False, True, True, True, True, True]]\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    l = [[int(e) for e in input().split()] for _ in range(n)]\n    maxOn = -1\n    minOn = 8\n    for segOn in range(2 ** 7):\n        band = True\n        bits = [1 << 6 - i & segOn >= 1 for i in range(7)]\n        for (j, e) in enumerate(l):\n            eq = (bits[i] and seg[e[0]][i] for i in range(7))\n            if sum(eq) != e[1]:\n                band = False\n                break\n        if band:\n            a = sum(bits)\n            minOn = min(minOn, 7 - a)\n            maxOn = max(maxOn, 7 - a)\n    if minOn == 8 and maxOn == -1:\n        print('invalid')\n    else:\n        print('{} {}'.format(minOn, maxOn))", "t = int(input())\nd = {0: (1, 2, 3, 5, 6, 7), 1: (3, 7), 2: (2, 3, 4, 5, 6), 3: (2, 3, 4, 6, 7), 4: (1, 3, 4, 7), 5: (1, 2, 4, 6, 7), 6: (1, 2, 4, 5, 6, 7), 7: (2, 3, 7), 8: (1, 2, 3, 4, 5, 6, 7), 9: (1, 2, 3, 4, 6, 7)}\nll = []\nfor i in range(128):\n    ll.append(bin(i)[2:])\nfor i in range(len(ll)):\n    if len(ll[i]) != 7:\n        di = 7 - len(ll[i])\n        ll[i] = '0' * di + ll[i]\nwhile t:\n    re = []\n    l = []\n    n = int(input())\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        l.append((x, y))\n    for j in ll:\n        lol = 0\n        for i in l:\n            (x, y) = i\n            a = d[x]\n            cou = 0\n            for k in a:\n                if j[7 - k] == '1':\n                    cou += 1\n            if cou != y:\n                lol = 1\n                break\n        if lol == 0:\n            re.append(j)\n    mi = 10000000000000000000000\n    mx = -1\n    if len(re) == 0:\n        print('invalid')\n    else:\n        for i in re:\n            xc = i.count('0')\n            if xc > mx:\n                mx = xc\n            if xc < mi:\n                mi = xc\n        print(mi, mx)\n    t -= 1", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    f = {0: [0, {1, 2, 3, 5, 6, 7}], 1: [2, {3, 7}], 2: [5, {2, 3, 4, 5, 6}], 3: [5, {2, 3, 4, 7, 6}], 4: [4, {1, 4, 3, 7}], 5: [5, {2, 1, 4, 7, 6}], 6: [6, {1, 2, 4, 5, 6, 7}], 7: [3, {2, 3, 7}], 8: [7, {1, 2, 3, 4, 5, 6, 7}], 9: [6, {1, 2, 3, 4, 6, 7}]}\n    f2 = {0: '1110111', 1: '0010001', 2: '0111110', 3: '0111011', 4: '1011001', 5: '1101011', 6: '1101111', 7: '0110001', 8: '1111111', 9: '1111011'}\n    data = []\n    for i in range(n):\n        (no, disp) = map(int, input().split())\n        data.append([no, disp])\n    (min_b, max_b) = (100, -1)\n    setbulb = []\n    ans = []\n    for i in range(128):\n        poss = 1\n        for j in data:\n            (no, disp) = j\n            x = i & int(f2[no], 2)\n            y = bin(x).count('1')\n            if y != disp:\n                poss = 0\n                break\n        if poss:\n            setbulb.append(i)\n    if len(setbulb):\n        for i in setbulb:\n            y = bin(i).count('1')\n            max_b = max(max_b, 7 - y)\n            min_b = min(min_b, 7 - y)\n        print(min_b, max_b)\n    else:\n        print('invalid')", "def countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nfor _ in range(int(input())):\n    la = []\n    lb = []\n    masks = [63, 6, 91, 79, 102, 109, 125, 7, 127, 111]\n    conf = []\n    for o in range(int(input())):\n        (n, k) = list(map(int, input().split()))\n        la.append(n)\n        lb.append(k)\n    q = len(la)\n    for i in range(128):\n        f = 1\n        for j in range(q):\n            if countSetBits(masks[la[j]] & i) != lb[j]:\n                f = 0\n                break\n        if f:\n            conf.append(i)\n    k = max(lb)\n    mi = 999\n    ma = -999\n    if len(conf) > 0:\n        for u in conf:\n            p = 7 - countSetBits(u)\n            mi = min(mi, p)\n            ma = max(ma, p)\n        print(mi, ma)\n    else:\n        print('invalid')", "def countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nfor _ in range(int(input())):\n    la = []\n    lb = []\n    masks = [63, 6, 91, 79, 102, 109, 125, 7, 127, 111]\n    conf = []\n    for o in range(int(input())):\n        (n, k) = list(map(int, input().split()))\n        la.append(n)\n        lb.append(k)\n    q = len(la)\n    for i in range(128):\n        f = 1\n        for j in range(q):\n            if countSetBits(masks[la[j]] & i) != lb[j]:\n                f = 0\n                break\n        if f:\n            conf.append(i)\n    mi = 999\n    ma = -999\n    if len(conf) > 0:\n        for u in conf:\n            p = 7 - countSetBits(u)\n            mi = min(mi, p)\n            ma = max(ma, p)\n        print(mi, ma)\n    else:\n        print('invalid')", "from itertools import combinations\n\ndef solve(tests):\n    for i in tests:\n        if len(i[0]) < i[1]:\n            print('invalid')\n            return\n    i = 0\n    (mini, maxi) = (-1, 8)\n    flag = True\n    while mini <= i <= maxi:\n        for s in combinations(range(7), i):\n            for j in tests:\n                if len(j[0] & set(s)) != j[1]:\n                    break\n            else:\n                if flag:\n                    flag = False\n                    mini = i\n                    i = 8\n                    break\n                else:\n                    maxi = i\n                    print(7 - maxi, 7 - mini)\n                    return\n        if flag:\n            i += 1\n        else:\n            i -= 1\n    if mini < 0:\n        print('invalid')\nfor _ in range(int(input())):\n    tests = []\n    for _ in range(int(input())):\n        (x, y) = map(int, input().split())\n        if x == 0:\n            tests.append(({0, 1, 2, 4, 5, 6}, y))\n        elif x == 1:\n            tests.append(({2, 5}, y))\n        elif x == 2:\n            tests.append(({0, 2, 3, 4, 6}, y))\n        elif x == 3:\n            tests.append(({0, 2, 3, 5, 6}, y))\n        elif x == 4:\n            tests.append(({1, 2, 3, 5}, y))\n        elif x == 5:\n            tests.append(({0, 1, 3, 5, 6}, y))\n        elif x == 6:\n            tests.append(({0, 1, 3, 4, 5, 6}, y))\n        elif x == 7:\n            tests.append(({0, 2, 5}, y))\n        elif x == 8:\n            tests.append(({0, 1, 2, 3, 4, 5, 6}, y))\n        elif x == 9:\n            tests.append(({0, 1, 2, 3, 5, 6}, y))\n    solve(tests)", "from itertools import combinations\n\ndef solve(tests):\n    for i in tests:\n        if len(i[0]) < i[1]:\n            print('invalid')\n            return\n    i = 0\n    (mini, maxi) = (-1, 8)\n    flag = True\n    while mini <= i <= maxi:\n        for s in combinations(range(7), i):\n            for j in tests:\n                if len(j[0] & set(s)) != j[1]:\n                    break\n            else:\n                if flag:\n                    flag = False\n                    mini = i\n                    i = 8\n                    break\n                else:\n                    maxi = i\n                    print(7 - maxi, 7 - mini)\n                    return\n        if flag:\n            i += 1\n        else:\n            i -= 1\n    if mini < 0:\n        print('invalid')\n\ndef main():\n    for _ in range(int(input())):\n        tests = []\n        for _ in range(int(input())):\n            (x, y) = map(int, input().split())\n            if x == 0:\n                tests.append(({0, 1, 2, 4, 5, 6}, y))\n            elif x == 1:\n                tests.append(({2, 5}, y))\n            elif x == 2:\n                tests.append(({0, 2, 3, 4, 6}, y))\n            elif x == 3:\n                tests.append(({0, 2, 3, 5, 6}, y))\n            elif x == 4:\n                tests.append(({1, 2, 3, 5}, y))\n            elif x == 5:\n                tests.append(({0, 1, 3, 5, 6}, y))\n            elif x == 6:\n                tests.append(({0, 1, 3, 4, 5, 6}, y))\n            elif x == 7:\n                tests.append(({0, 2, 5}, y))\n            elif x == 8:\n                tests.append(({0, 1, 2, 3, 4, 5, 6}, y))\n            elif x == 9:\n                tests.append(({0, 1, 2, 3, 5, 6}, y))\n        solve(tests)\nmain()", "d = [[0, 3, 4, 2, 6, 5], [5, 6], [0, 5, 1, 4, 2], [0, 5, 1, 6, 2], [3, 1, 5, 6], [0, 3, 1, 6, 2], [0, 3, 4, 2, 6, 1], [0, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 3, 1, 5, 6, 2]]\n\ndef check(ar, b):\n    for i in ar:\n        c = 0\n        for j in d[i[0]]:\n            if b[j]:\n                c = c + 1\n        if c != i[1]:\n            return False\n    return True\nt = int(input())\nwhile t:\n    n = int(input())\n    ar = [list(map(int, input().split())) for i in range(n)]\n    v = 0\n    mi = 8\n    ma = 0\n    for i in range(2 ** 7):\n        b = [int(j) for j in bin(i)[2:]]\n        while len(b) < 7:\n            b = [0] + b\n        if check(ar, b):\n            v = 1\n            mi = min(mi, b.count(0))\n            ma = max(ma, b.count(0))\n    if v:\n        print(str(mi) + ' ' + str(ma))\n    else:\n        print('invalid')\n    t = t - 1", "sevseg = [126, 48, 109, 121, 51, 91, 95, 112, 127, 123]\nfor _ in range(int(input())):\n    n = int(input())\n    (x, y) = ([None] * n, [None] * n)\n    mini = 8\n    maxi = -1\n    for i in range(n):\n        (x[i], y[i]) = map(int, input().rstrip().split())\n    badaflag = 0\n    for check in range(128):\n        flag = 1\n        for i in range(n):\n            if bin(sevseg[x[i]] & check).count('1') != y[i]:\n                flag = 0\n                break\n        if flag:\n            deadCell = 7 - bin(check).count('1')\n            mini = min(mini, deadCell)\n            maxi = max(maxi, deadCell)\n            badaflag = 1\n    if badaflag:\n        print(mini, maxi)\n    else:\n        print('invalid')", "from itertools import combinations\n\ndef solve(tests):\n    (min_ans, max_ans) = (-1, -1)\n    for test in tests:\n        if len(test[0]) < test[1]:\n            print('invalid')\n            return\n    i = 0\n    looking_for_min = True\n    while min_ans < i <= 7:\n        for s in combinations(range(7), i):\n            for test in tests:\n                if len(test[0] & set(s)) != test[1]:\n                    break\n            else:\n                if looking_for_min:\n                    min_ans = i\n                    looking_for_min = False\n                    i = 7\n                    break\n                else:\n                    max_ans = i\n                    print('%d %d' % (7 - max_ans, 7 - min_ans))\n                    return\n        else:\n            if looking_for_min:\n                i += 1\n            else:\n                i -= 1\n    if min_ans == -1:\n        print('invalid')\n    else:\n        print('%d %d' % (7 - min_ans, 7 - min_ans))\n\ndef main():\n    for _ in range(int(input())):\n        tests = []\n        for _ in range(int(input())):\n            (x, y) = map(int, input().split())\n            if x == 0:\n                tests.append(({0, 1, 2, 4, 5, 6}, y))\n            elif x == 1:\n                tests.append(({2, 5}, y))\n            elif x == 2:\n                tests.append(({0, 2, 3, 4, 6}, y))\n            elif x == 3:\n                tests.append(({0, 2, 3, 5, 6}, y))\n            elif x == 4:\n                tests.append(({1, 2, 3, 5}, y))\n            elif x == 5:\n                tests.append(({0, 1, 3, 5, 6}, y))\n            elif x == 6:\n                tests.append(({0, 1, 3, 4, 5, 6}, y))\n            elif x == 7:\n                tests.append(({0, 2, 5}, y))\n            elif x == 8:\n                tests.append(({0, 1, 2, 3, 4, 5, 6}, y))\n            elif x == 9:\n                tests.append(({0, 1, 2, 3, 5, 6}, y))\n        solve(tests)\nmain()", "t = int(input())\nsegment_map = [(True, True, True, False, True, True, True), (False, False, True, False, False, True, False), (True, False, True, True, True, False, True), (True, False, True, True, False, True, True), (False, True, True, True, False, True, False), (True, True, False, True, False, True, True), (True, True, False, True, True, True, True), (True, False, True, False, False, True, False), (True, True, True, True, True, True, True), (True, True, True, True, False, True, True)]\n\ndef satisfies_all(configuration, constrains):\n    for (number, count) in constrains:\n        min_count = max_count = 0\n        for (a, b) in zip(configuration, segment_map[number]):\n            if not b:\n                continue\n            if a is None:\n                max_count += 1\n            elif a:\n                min_count += 1\n                max_count += 1\n        if min_count > count or max_count < count:\n            return False\n    return True\n\ndef configuration_step_satisfied(config):\n    try:\n        i = config.index(None)\n        config[i] = False\n    except ValueError:\n        configuration_step_not_satisfied(config)\n\ndef configuration_step_not_satisfied(config):\n    i = 6 - config[::-1].index(False)\n    config[i] = True\n    config[i + 1:] = [None] * (6 - i)\n\ndef print_config(c):\n    print(c)\n    print('.{0}{0}{0}.\\n{1}   {2}\\n{1}   {2}\\n{1}   {2}\\n.{3}{3}{3}.\\n{4}   {5}\\n{4}   {5}\\n{4}   {5}\\n.{6}{6}{6}.\\n'.format('-' if c[0] else ' ', '|' if c[1] else ' ', '|' if c[2] else ' ', '-' if c[3] else ' ', '|' if c[4] else ' ', '|' if c[5] else ' ', '-' if c[6] else ' '))\nfor _ in range(t):\n    max_w = -9\n    min_w = 9\n    n = int(input())\n    constrains = [None] * n\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        constrains[i] = (x, y)\n    configuration = [None] * 7\n    while not all(configuration):\n        if satisfies_all(configuration, constrains):\n            if all((x is not None for x in configuration)):\n                working = 7 - sum(configuration)\n                max_w = max(max_w, working)\n                min_w = min(min_w, working)\n            configuration_step_satisfied(configuration)\n        else:\n            try:\n                configuration_step_not_satisfied(configuration)\n            except ValueError:\n                break\n    if satisfies_all(configuration, constrains):\n        working = 7 - sum(configuration)\n        max_w = max(max_w, working)\n        min_w = min(min_w, working)\n    if max_w == -9:\n        print('invalid')\n    else:\n        print(min_w, max_w)", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef rSubset(arr, r):\n    return list(combinations(arr, r))\nmm = 1000000007\n\ndef solve():\n    t = nu()\n    xp = [[1, 2, 3, 4, 5, 6], [2, 3], [1, 2, 7, 5, 4], [1, 2, 3, 4, 7], [2, 3, 6, 7], [1, 6, 7, 3, 4], [1, 3, 4, 5, 6, 7], [1, 2, 3], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 6, 7]]\n    comb = [0]\n    fp = [1, 2, 3, 4, 5, 6, 7]\n    for i in range(1, 8):\n        comb.append(rSubset(fp, i))\n    for it in range(t):\n        n = nu()\n        fl = True\n        kp = [-1] * 10\n        ind = -1\n        all = True\n        for i in range(n):\n            (x, y) = num()\n            if len(xp[x]) < y:\n                fl = False\n            if len(xp[x]) != y:\n                all = False\n            kp[x] = y\n            ind = x\n        if fl == False:\n            print('invalid')\n            continue\n        mx = 0\n        mn = 0\n        xom = False\n        if all:\n            mx = 0\n            mn = 0\n        else:\n            mx = 0\n            mn = 99\n        for i in range(1, 8):\n            for j in range(len(comb[i])):\n                gh = comb[i][j]\n                osd = [0] * 8\n                for iq in gh:\n                    osd[iq] = 1\n                vl = True\n                for ko in range(10):\n                    if kp[ko] == -1:\n                        continue\n                    fg = kp[ko]\n                    for jg in range(len(xp[ko])):\n                        if osd[xp[ko][jg]] == 0:\n                            fg -= 1\n                    if fg != 0:\n                        vl = False\n                if vl == True:\n                    xom = True\n                    mx = max(i, mx)\n                    mn = min(mn, i)\n        if xom == True or all == True:\n            print(mn, mx)\n        else:\n            print('invalid')\nsolve()", "m = []\nonesarr = []\nfor i in range(128):\n    a = []\n    ones = 0\n    for j in range(7):\n        l = i % 2 ** (7 - j) // 2 ** (6 - j)\n        a.append(l)\n        ones += l\n    onesarr.append(7 - ones)\n    m.append(a)\nt = int(input())\nfor _ in range(t):\n    poslag = True\n    n = int(input())\n    maxd = 0\n    mind = 8\n    arr = [8] * 10\n    numbers = [[0, 1, 2, 3, 5, 6], [2, 5], [1, 2, 3, 4, 6], [1, 2, 4, 5, 6], [0, 2, 4, 5], [0, 1, 4, 5, 6], [0, 1, 3, 4, 5, 6], [1, 2, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 4, 5, 6]]\n    for _ in range(n):\n        (x, y) = [int(i) for i in input().split()]\n        arr[x] = y\n    for i in range(128):\n        posflag = True\n        for j in range(10):\n            if arr[j] != 8:\n                ch = 0\n                for k in numbers[j]:\n                    ch += m[i][k]\n                if ch != arr[j]:\n                    posflag = False\n                    break\n        if posflag:\n            mind = min(mind, onesarr[i])\n            maxd = max(maxd, onesarr[i])\n    if mind == 8:\n        print('invalid')\n    else:\n        print(mind, maxd)", "digits = [119, 18, 93, 91, 58, 107, 111, 82, 127, 123]\nt = int(input())\nfor ti in range(t):\n    n = int(input())\n    (x, y) = ([None for _ in range(n)], [None for _ in range(n)])\n    for i in range(n):\n        (x[i], y[i]) = map(int, input().split())\n    any_ok = False\n    (min_dead, max_dead) = (7, 0)\n    for mask in range(1 << 7):\n        ok = True\n        for i in range(n):\n            if bin(digits[x[i]] & mask).count('1') != y[i]:\n                ok = False\n        if ok:\n            any_ok = True\n            num_dead = 7 - bin(mask).count('1')\n            min_dead = min(min_dead, num_dead)\n            max_dead = max(max_dead, num_dead)\n    if any_ok:\n        print(min_dead, max_dead)\n    else:\n        print('invalid')", "d = [[0, 3, 4, 2, 6, 5], [5, 6], [0, 5, 1, 4, 2], [0, 5, 1, 6, 2], [3, 1, 5, 6], [0, 3, 1, 6, 2], [0, 3, 4, 2, 6, 1], [0, 5, 6], [0, 1, 2, 3, 4, 5, 6], [0, 3, 1, 5, 6, 2]]\n\ndef check(ar, b):\n    for i in ar:\n        c = 0\n        for j in d[i[0]]:\n            if b[j]:\n                c = c + 1\n        if c != i[1]:\n            return False\n    return True\nt = int(input())\nwhile t:\n    n = int(input())\n    ar = [list(map(int, input().split())) for i in range(n)]\n    v = 0\n    mi = 8\n    ma = 0\n    for i in range(2 ** 7):\n        b = [int(j) for j in bin(i)[2:]]\n        while len(b) < 7:\n            b = [0] + b\n        if check(ar, b):\n            v = 1\n            mi = min(mi, b.count(0))\n            ma = max(ma, b.count(0))\n    if v:\n        print(str(mi) + ' ' + str(ma))\n    else:\n        print('invalid')\n    t = t - 1"]