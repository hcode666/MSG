["from sys import stdin\ninput = stdin.readline\nP_nbr = ((1, 4, 5), (0, 2, 6), (1, 3, 7), (2, 4, 8), (0, 3, 9), (0, 7, 8), (1, 8, 9), (2, 5, 9), (3, 5, 6), (4, 6, 7), (0, 1, 2, 3, 4), (5, 6, 7, 8, 9))\nP_val = list('ABCDEABCDE')\nP_sym = list('0123456789')\nT = int(input())\nfor tx in range(T):\n    S = input().strip()\n    opts = [[[], 10], [[], 11]]\n    for c in S:\n        deadend = 0\n        for opt in opts:\n            for adj in P_nbr[opt[1]]:\n                if P_val[adj] == c:\n                    opt[0].append(P_sym[adj])\n                    opt[1] = adj\n                    break\n            else:\n                opt.clear()\n                deadend += 1\n        if deadend:\n            if len(opts) == deadend:\n                print('-1')\n                break\n            for _ in range(deadend):\n                opts.remove([])\n    else:\n        print(''.join(min(opts)[0]))", "from sys import stdin\ninput = stdin.readline\nP_nbr = ((1, 4, 5), (0, 2, 6), (1, 3, 7), (2, 4, 8), (0, 3, 9), (0, 7, 8), (1, 8, 9), (2, 5, 9), (3, 5, 6), (4, 6, 7), (0, 1, 2, 3, 4), (5, 6, 7, 8, 9))\nP_val = list('ABCDEABCDE')\nP_sym = list('0123456789')\nT = int(input())\nfor tx in range(T):\n    S = input().strip()\n    opts = [[[], 10], [[], 11]]\n    for c in S:\n        deadend = 0\n        for opt in opts:\n            for adj in P_nbr[opt[1]]:\n                if P_val[adj] == c:\n                    opt[0].append(P_sym[adj])\n                    opt[1] = adj\n                    break\n            else:\n                opt.clear()\n                deadend += 1\n        if deadend:\n            if len(opts) == deadend:\n                print('-1')\n                break\n            for _ in range(deadend):\n                opts.remove([])\n    else:\n        print(''.join(min(opts)[0]))", "from sys import stdin\ninput = stdin.readline\nP_nbr = ((1, 4, 5), (0, 2, 6), (1, 3, 7), (2, 4, 8), (0, 3, 9), (0, 7, 8), (1, 8, 9), (2, 5, 9), (3, 5, 6), (4, 6, 7), (0, 1, 2, 3, 4), (5, 6, 7, 8, 9))\nP_val = list('ABCDEABCDE')\nP_sym = list('0123456789')\nT = int(input())\nfor tx in range(T):\n    S = input().strip()\n    opts = [[[], 10], [[], 11]]\n    for c in S:\n        deadend = 0\n        for opt in opts:\n            for adj in P_nbr[opt[1]]:\n                if P_val[adj] == c:\n                    opt[0].append(P_sym[adj])\n                    opt[1] = adj\n                    break\n            else:\n                opt.clear()\n                deadend += 1\n        if deadend:\n            if len(opts) == deadend:\n                print('-1')\n                break\n            for _ in range(deadend):\n                opts.remove([])\n    else:\n        print(''.join(min(opts)[0]))", "from sys import stdin\ninput = stdin.readline\nP_nbr = ((1, 4, 5), (0, 2, 6), (1, 3, 7), (2, 4, 8), (0, 3, 9), (0, 7, 8), (1, 8, 9), (2, 5, 9), (3, 5, 6), (4, 6, 7), (0, 1, 2, 3, 4), (5, 6, 7, 8, 9))\nP_val = list('ABCDEABCDE')\nP_sym = list('0123456789')\nT = int(input())\nfor tx in range(T):\n    S = input().strip()\n    opts = [[[], 10], [[], 11]]\n    for c in S:\n        deadend = 0\n        for opt in opts:\n            for adj in P_nbr[opt[1]]:\n                if P_val[adj] == c:\n                    opt[0].append(P_sym[adj])\n                    opt[1] = adj\n                    break\n            else:\n                opt.clear()\n                deadend += 1\n        if deadend:\n            if len(opts) == deadend:\n                print('-1')\n                break\n            for _ in range(deadend):\n                opts.remove([])\n    else:\n        print(''.join(min(opts)[0]))", "from sys import stdin\ninput = stdin.readline\nP_nbr = ((1, 4, 5), (0, 2, 6), (1, 3, 7), (2, 4, 8), (0, 3, 9), (0, 7, 8), (1, 8, 9), (2, 5, 9), (3, 5, 6), (4, 6, 7), (0, 1, 2, 3, 4), (5, 6, 7, 8, 9))\nP_val = list('ABCDEABCDE')\nP_sym = list('0123456789')\nT = int(input())\nfor tx in range(T):\n    S = input().strip()\n    opts = [[[], 10], [[], 11]]\n    for c in S:\n        deadend = 0\n        for opt in opts:\n            for adj in P_nbr[opt[1]]:\n                if P_val[adj] == c:\n                    opt[0].append(P_sym[adj])\n                    opt[1] = adj\n                    break\n            else:\n                opt.clear()\n                deadend += 1\n        if deadend:\n            if len(opts) == deadend:\n                print('-1')\n                break\n            for _ in range(deadend):\n                opts.remove([])\n    else:\n        print(''.join(min(opts)[0]))", "from sys import stdin\ninput = stdin.readline\nP_nbr = ((1, 4, 5), (0, 2, 6), (1, 3, 7), (2, 4, 8), (0, 3, 9), (0, 7, 8), (1, 8, 9), (2, 5, 9), (3, 5, 6), (4, 6, 7), (0, 1, 2, 3, 4), (5, 6, 7, 8, 9))\nP_val = list('ABCDEABCDE')\nP_sym = list('0123456789')\nT = int(input())\nfor tx in range(T):\n    S = input().strip()\n    opts = [[[], 10], [[], 11]]\n    for c in S:\n        deadend = 0\n        for opt in opts:\n            for adj in P_nbr[opt[1]]:\n                if P_val[adj] == c:\n                    opt[0].append(P_sym[adj])\n                    opt[1] = adj\n                    break\n            else:\n                opt.clear()\n                deadend += 1\n        if deadend:\n            if len(opts) == deadend:\n                print('-1')\n                break\n            for _ in range(deadend):\n                opts.remove([])\n    else:\n        print(''.join(min(opts)[0]))", "from sys import stdin\ninput = stdin.readline\nP_nbr = ((1, 4, 5), (0, 2, 6), (1, 3, 7), (2, 4, 8), (0, 3, 9), (0, 7, 8), (1, 8, 9), (2, 5, 9), (3, 5, 6), (4, 6, 7), (0, 1, 2, 3, 4, 5, 6, 7, 8, 9))\nP_val = list('ABCDEABCDE')\nP_sym = list('0123456789')\nT = int(input())\nfor tx in range(T):\n    S = input().strip()\n    opts = [('', 10)]\n    for c in S:\n        new_opts = []\n        for (code, pos) in opts:\n            for adj in P_nbr[pos]:\n                if P_val[adj] == c:\n                    new_opts.append((code + P_sym[adj], adj))\n        opts = new_opts\n        if opts == []:\n            print('-1')\n            break\n    else:\n        print(min(opts)[0])", "let_node = {'A': [0, 5], 'B': [1, 6], 'C': [2, 7], 'D': [3, 8], 'E': [4, 9]}\nconnections = {0: [1, 4, 5], 1: [0, 2, 6], 2: [1, 3, 7], 3: [2, 4, 8], 4: [0, 3, 9], 5: [0, 7, 8], 6: [1, 8, 9], 7: [2, 5, 9], 8: [3, 5, 6], 9: [4, 6, 7]}\n\ndef check_path(S, pos):\n    path = str(pos)\n    for val in S:\n        if let_node[val][0] in connections[pos]:\n            pos = let_node[val][0]\n            path += str(pos)\n        elif let_node[val][1] in connections[pos]:\n            pos = let_node[val][1]\n            path += str(pos)\n        else:\n            return -1\n    return path\nfor _ in range(int(input())):\n    S = list(input())\n    a = check_path(S[1:], let_node[S[0]][0])\n    if int(a) > 0:\n        print(a)\n    else:\n        a = check_path(S[1:], let_node[S[0]][1])\n        if int(a) > 0:\n            print(a)\n        else:\n            print(-1)", "from collections import defaultdict\nd = {'A': [0, 5], 'B': [1, 6], 'C': [2, 7], 'D': [3, 8], 'E': [4, 9]}\n\nclass Graph:\n\n    def __init__(self, v):\n        self.v = v\n        self.graph = defaultdict(list)\n\n    def addEdge(self, u, v):\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n\n    def route1(self, st):\n        arr = []\n        if len(st) == 0:\n            return '-1'\n        arr.append(d[st[0]][0])\n        for i in range(1, len(st)):\n            if d[st[i]][0] in self.graph[arr[len(arr) - 1]]:\n                arr.append(d[st[i]][0])\n            elif d[st[i]][1] in self.graph[arr[len(arr) - 1]]:\n                arr.append(d[st[i]][1])\n            else:\n                return '-1'\n        arr = [str(i) for i in arr]\n        return ''.join(arr)\n\n    def route2(self, st):\n        arr = []\n        if len(st) == 0:\n            return '-1'\n        arr.append(d[st[0]][1])\n        for i in range(1, len(st)):\n            if d[st[i]][0] in self.graph[arr[len(arr) - 1]]:\n                arr.append(d[st[i]][0])\n            elif d[st[i]][1] in self.graph[arr[len(arr) - 1]]:\n                arr.append(d[st[i]][1])\n            else:\n                return '-1'\n        arr = [str(i) for i in arr]\n        return ''.join(arr)\ng = Graph(10)\ng.addEdge(0, 4)\ng.addEdge(0, 5)\ng.addEdge(0, 1)\ng.addEdge(1, 6)\ng.addEdge(1, 2)\ng.addEdge(2, 3)\ng.addEdge(2, 7)\ng.addEdge(3, 4)\ng.addEdge(3, 8)\ng.addEdge(4, 9)\ng.addEdge(5, 7)\ng.addEdge(5, 8)\ng.addEdge(6, 8)\ng.addEdge(6, 9)\ng.addEdge(7, 9)\nn = int(input())\nfor i in range(n):\n    st = input()\n    if g.route1(st) != '-1':\n        print(g.route1(st))\n    elif g.route2(st) != '-1':\n        print(g.route2(st))\n    else:\n        print('-1')", "let_node = {'A': [0, 5], 'B': [1, 6], 'C': [2, 7], 'D': [3, 8], 'E': [4, 9]}\nconnections = {0: [1, 4, 5], 1: [0, 2, 6], 2: [1, 3, 7], 3: [2, 4, 8], 4: [0, 3, 9], 5: [0, 7, 8], 6: [1, 8, 9], 7: [2, 5, 9], 8: [3, 5, 6], 9: [4, 6, 7]}\n\ndef check_path(S, pos):\n    path = str(pos)\n    for val in S:\n        if let_node[val][0] in connections[pos]:\n            pos = let_node[val][0]\n            path += str(pos)\n        elif let_node[val][1] in connections[pos]:\n            pos = let_node[val][1]\n            path += str(pos)\n        else:\n            return -1\n    return path\nfor _ in range(int(input())):\n    S = list(input())\n    a = check_path(S[1:], let_node[S[0]][0])\n    if int(a) > 0:\n        print(a)\n    else:\n        a = check_path(S[1:], let_node[S[0]][1])\n        if int(a) > 0:\n            print(a)\n        else:\n            print(-1)", "d = dict()\nd['AB'] = [0, 1]\nd['AC'] = [5, 7]\nd['AD'] = [5, 8]\nd['AE'] = [0, 4]\nd['BC'] = [1, 2]\nd['BD'] = [6, 8]\nd['BE'] = [6, 9]\nd['CD'] = [2, 3]\nd['CE'] = [7, 9]\nd['DE'] = [3, 4]\n\ndef getmin(x):\n    if x == 'A':\n        return 0\n    elif x == 'B':\n        return 1\n    elif x == 'C':\n        return 2\n    elif x == 'D':\n        return 3\n    elif x == 'E':\n        return 4\n\ndef getans(x, y):\n    if x < y:\n        s = x\n        s += y\n        return d[s]\n    else:\n        s = y\n        s += x\n        g = d[s]\n        return [g[-1], g[0]]\n\ndef getans2(val, x):\n    if val == 0:\n        if x == 'C' or x == 'D':\n            return -1\n        elif x == 'B':\n            return 1\n        elif x == 'E':\n            return 4\n        elif x == 'A':\n            return 5\n    if val == 1:\n        if x == 'E' or x == 'D':\n            return -1\n        elif x == 'A':\n            return 0\n        elif x == 'C':\n            return 2\n        elif x == 'B':\n            return 6\n    if val == 2:\n        if x == 'E' or x == 'A':\n            return -1\n        elif x == 'B':\n            return 1\n        elif x == 'D':\n            return 3\n        elif x == 'C':\n            return 7\n    if val == 3:\n        if x == 'A' or x == 'B':\n            return -1\n        elif x == 'C':\n            return 2\n        elif x == 'E':\n            return 4\n        elif x == 'D':\n            return 8\n    if val == 4:\n        if x == 'C' or x == 'B':\n            return -1\n        elif x == 'A':\n            return 0\n        elif x == 'D':\n            return 3\n        elif x == 'E':\n            return 9\n    if val == 5:\n        if x == 'B' or x == 'E':\n            return -1\n        elif x == 'C':\n            return 7\n        elif x == 'D':\n            return 8\n        elif x == 'A':\n            return 0\n    if val == 6:\n        if x == 'C' or x == 'A':\n            return -1\n        elif x == 'D':\n            return 8\n        elif x == 'E':\n            return 9\n        elif x == 'B':\n            return 1\n    if val == 7:\n        if x == 'B' or x == 'D':\n            return -1\n        elif x == 'A':\n            return 5\n        elif x == 'E':\n            return 9\n        elif x == 'C':\n            return 2\n    if val == 8:\n        if x == 'C' or x == 'E':\n            return -1\n        elif x == 'A':\n            return 5\n        elif x == 'B':\n            return 6\n        elif x == 'D':\n            return 3\n    if val == 9:\n        if x == 'A' or x == 'D':\n            return -1\n        elif x == 'B':\n            return 6\n        elif x == 'C':\n            return 7\n        elif x == 'E':\n            return 4\n    return []\nfor t in range(int(input())):\n    s = input()\n    s = s.strip()\n    l = len(s)\n    ans = []\n    if l == 1:\n        print(getmin(s[0]))\n        continue\n    for i in range(l):\n        ans.append(-1)\n    flag = 0\n    i = 1\n    while i < l:\n        if s[i] != s[i - 1]:\n            if ans[i - 1] == -1:\n                temp = getans(s[i], s[i - 1])\n                ans[i] = temp[0]\n                ans[i - 1] = temp[1]\n            else:\n                temp = getans2(ans[i - 1], s[i])\n                if temp == -1:\n                    flag = 1\n                    break\n                ans[i] = temp\n        elif s[i] == s[i - 1] and ans[i - 1] != -1:\n            temp = getans2(ans[i - 1], s[i])\n            if temp == -1:\n                flag = 1\n                break\n            ans[i] = temp\n        i += 1\n    if flag == 1:\n        print(-1)\n        continue\n    i = l - 2\n    while i >= 0:\n        if ans[i] == -1 and ans[i + 1] == -1:\n            temp = getmin(s[i])\n            ans[i] = temp\n            ans[i + 1] = temp + 5\n        elif ans[i] == -1:\n            temp = getans2(ans[i + 1], s[i])\n            if temp == -1:\n                flag = 1\n                break\n            ans[i] = temp\n        elif ans[i + 1] == -1:\n            temp = getans2(ans[i], s[i + 1])\n            if temp == -1:\n                flag = 1\n                break\n            ans[i + 1] = temp\n        i -= 1\n    if flag == 1:\n        print(-1)\n        continue\n    if -1 in ans:\n        print(-1)\n        continue\n    for i in ans:\n        print(i, end='')\n    print()", "a = ['a', 'b', 'c', 'd', 'e', 'A', 'B', 'C', 'D', 'E']\nb = ['5', '6', '7', '8', '9', '0', '1', '2', '3', '4']\nc = [('A', 'c', 'd'), ('B', 'd', 'e'), ('C', 'a', 'e'), ('D', 'a', 'b'), ('E', 'b', 'c'), ('a', 'E', 'B'), ('b', 'A', 'C'), ('c', 'B', 'D'), ('d', 'E', 'C'), ('e', 'A', 'D')]\nT = int(input())\nfor t in range(T):\n    In = input()\n    S = list(In)\n    result = ''\n    if len(set(S)) == 1:\n        temp = S[0]\n        for i in range(len(S)):\n            result += b[a.index(temp)]\n            temp = temp.swapcase()\n    else:\n        S[0] = S[0].swapcase()\n        result += b[a.index(S[0])]\n        for i in range(1, len(S)):\n            if S[i] in c[a.index(S[i - 1])]:\n                result += b[a.index(S[i])]\n            elif S[i].swapcase() in c[a.index(S[i - 1])]:\n                S[i] = S[i].swapcase()\n                result += b[a.index(S[i])]\n            else:\n                result = '-1'\n                break\n        if result == '-1':\n            result = ''\n            S = list(In)\n            result += b[a.index(S[0])]\n            for i in range(1, len(S)):\n                if S[i] in c[a.index(S[i - 1])]:\n                    result += b[a.index(S[i])]\n                elif S[i].swapcase() in c[a.index(S[i - 1])]:\n                    S[i] = S[i].swapcase()\n                    result += b[a.index(S[i])]\n                else:\n                    result = '-1'\n                    break\n    print(result)", "import sys\nthenumberofcasestobechecked = int(sys.stdin.readline())\nwhile thenumberofcasestobechecked > 0:\n    thenumberofcasestobechecked -= 1\n    thesequenceoflettersentered = list(sys.stdin.readline().rstrip('\\n'))\n    allthepossibleconnectiooons = [[1, 4, 5], [0, 2, 6], [1, 3, 7], [2, 4, 8], [0, 3, 9], [0, 8, 7], [1, 8, 9], [2, 5, 9], [3, 5, 6], [4, 6, 7]]\n    allthepossibleconnectiooons_LETTERS = [['B', 'E', 'A'], ['A', 'C', 'B'], ['B', 'D', 'C'], ['C', 'E', 'D'], ['A', 'D', 'E'], ['A', 'D', 'C'], ['B', 'D', 'E'], ['C', 'A', 'E'], ['D', 'A', 'B'], ['E', 'B', 'C']]\n    if thesequenceoflettersentered[0] == 'A':\n        (startingpoint1, startingpoint2) = (0, 5)\n    elif thesequenceoflettersentered[0] == 'B':\n        (startingpoint1, startingpoint2) = (1, 6)\n    elif thesequenceoflettersentered[0] == 'C':\n        (startingpoint1, startingpoint2) = (2, 7)\n    elif thesequenceoflettersentered[0] == 'D':\n        (startingpoint1, startingpoint2) = (3, 8)\n    else:\n        (startingpoint1, startingpoint2) = (4, 9)\n    copystring = thesequenceoflettersentered[1:]\n    currentposition = startingpoint1\n    solution1 = str(startingpoint1)\n    flag1 = 0\n    for letter in copystring:\n        if letter in allthepossibleconnectiooons_LETTERS[currentposition]:\n            currentposition = allthepossibleconnectiooons[currentposition][allthepossibleconnectiooons_LETTERS[currentposition].index(letter)]\n            solution1 = solution1 + str(currentposition)\n        else:\n            flag1 = -1\n            break\n    copystring = thesequenceoflettersentered[1:]\n    currentposition = startingpoint2\n    solution2 = str(startingpoint2)\n    flag2 = 0\n    for letter in copystring:\n        if letter in allthepossibleconnectiooons_LETTERS[currentposition]:\n            currentposition = allthepossibleconnectiooons[currentposition][allthepossibleconnectiooons_LETTERS[currentposition].index(letter)]\n            solution2 = solution2 + str(currentposition)\n        else:\n            flag2 = -1\n            break\n    if flag1 == -1 and flag2 == -1:\n        print('-1')\n    elif flag1 == -1:\n        print(solution2)\n    elif flag2 == -1:\n        print(solution1)\n    elif solution1 < solution2:\n        print(solution1)\n    else:\n        print(solution2)"]