["import sys\nn = int(sys.stdin.readline())\nbits = [[] for _ in range(6)]\nfor i in [2, 3, 5]:\n    bits[i] = [0] * (n + 1)\n\ndef add(bit, index, val):\n    index += 1\n    while index <= n:\n        bit[index] += val\n        index += index & -index\n\ndef add_range(bit, l, r, val):\n    add(bit, l, val)\n    add(bit, r + 1, -val)\n\ndef get(bit, index):\n    r = 0\n    index += 1\n    while index:\n        r += bit[index]\n        index -= index & -index\n    return r\n\ndef reset(bit, index):\n    add_range(bit, index, index, -get(bit, index))\ns = list(map(int, sys.stdin.readline().split()))\nm = int(sys.stdin.readline())\nfor _ in range(m):\n    op = list(map(int, sys.stdin.readline().split()))\n    if len(op) == 4:\n        (_, l, r, p) = op\n        add_range(bits[p], l - 1, r - 1, 1)\n    else:\n        (_, index, val) = op\n        index -= 1\n        s[index] = val\n        for i in [2, 3, 5]:\n            reset(bits[i], index)\nfor (i, num) in enumerate(s):\n    for p in [2, 3, 5]:\n        v = get(bits[p], i)\n        while v > 0 and num % p == 0:\n            num = num // p\n            v -= 1\n    print(num, end=' ')\nprint()", "import sys\nn = int(sys.stdin.readline())\nbits = [[] for _ in range(6)]\nfor i in [2, 3, 5]:\n    bits[i] = [0] * (n + 1)\n\ndef add(bit, index, val):\n    index += 1\n    while index <= n:\n        bit[index] += val\n        index += index & -index\n\ndef add_range(bit, l, r, val):\n    add(bit, l, val)\n    add(bit, r + 1, -val)\n\ndef get(bit, index):\n    r = 0\n    index += 1\n    while index:\n        r += bit[index]\n        index -= index & -index\n    return r\n\ndef reset(bit, index):\n    add_range(bit, index, index, -get(bit, index))\ns = list(map(int, sys.stdin.readline().split()))\nm = int(sys.stdin.readline())\nfor _ in range(m):\n    op = list(map(int, sys.stdin.readline().split()))\n    if len(op) == 4:\n        (_, l, r, p) = op\n        add_range(bits[p], l - 1, r - 1, 1)\n    else:\n        (_, index, val) = op\n        index -= 1\n        s[index] = val\n        for i in [2, 3, 5]:\n            reset(bits[i], index)\nfor (i, num) in enumerate(s):\n    for p in [2, 3, 5]:\n        v = get(bits[p], i)\n        while v > 0 and num % p == 0:\n            num = num // p\n            v -= 1\n    print(num, end=' ')\nprint()", "import sys\nn = int(sys.stdin.readline())\nbits = [[] for _ in range(6)]\nfor i in [2, 3, 5]:\n    bits[i] = [0] * (n + 1)\n\ndef add(bit, index, val):\n    index += 1\n    while index <= n:\n        bit[index] += val\n        index += index & -index\n\ndef add_range(bit, l, r, val):\n    add(bit, l, val)\n    add(bit, r + 1, -val)\n\ndef get(bit, index):\n    r = 0\n    index += 1\n    while index:\n        r += bit[index]\n        index -= index & -index\n    return r\n\ndef reset(bit, index):\n    add_range(bit, index, index, -get(bit, index))\ns = list(map(int, sys.stdin.readline().split()))\nm = int(sys.stdin.readline())\nfor _ in range(m):\n    op = list(map(int, sys.stdin.readline().split()))\n    if len(op) == 4:\n        (_, l, r, p) = op\n        add_range(bits[p], l - 1, r - 1, 1)\n    else:\n        (_, index, val) = op\n        index -= 1\n        s[index] = val\n        for i in [2, 3, 5]:\n            reset(bits[i], index)\nfor (i, num) in enumerate(s):\n    for p in [2, 3, 5]:\n        v = get(bits[p], i)\n        while v > 0 and num % p == 0:\n            num = num // p\n            v -= 1\n    print(num, end=' ')\nprint()"]