["import collections\n\ndef checkEvenParity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    s = list()\n    d = collections.defaultdict(lambda : -1)\n    q = int(input())\n    c = -1\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if d[x] != -1:\n            print(e, o)\n            continue\n        s.append(x)\n        d[x] = 1\n        for j in s:\n            if j != x:\n                l = j ^ x\n                if d[l] != -1:\n                    continue\n                s.append(l)\n                d[l] = 1\n        for j in range(c + 1, len(s)):\n            c = j\n            if checkEvenParity(s[j]) == True:\n                e += 1\n            else:\n                o += 1\n        print(e, o)", "import collections\n\ndef checkEvenParity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    s = list()\n    d = collections.defaultdict(lambda : -1)\n    q = int(input())\n    c = -1\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if d[x] != -1:\n            print(e, o)\n            continue\n        s.append(x)\n        d[x] = 1\n        for j in s:\n            if j != x:\n                l = j ^ x\n                if d[l] != -1:\n                    continue\n                s.append(l)\n                d[l] = 1\n        for j in range(c + 1, len(s)):\n            c = j\n            if checkEvenParity(s[j]) == True:\n                e += 1\n            else:\n                o += 1\n        print(e, o)", "import collections\n\ndef checkEvenParity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    s = list()\n    d = collections.defaultdict(lambda : -1)\n    q = int(input())\n    c = -1\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if d[x] != -1:\n            print(e, o)\n            continue\n        s.append(x)\n        d[x] = 1\n        for j in s:\n            if j != x:\n                l = j ^ x\n                if d[l] != -1:\n                    continue\n                s.append(l)\n                d[l] = 1\n        for j in range(c + 1, len(s)):\n            c = j\n            if checkEvenParity(s[j]) == True:\n                e += 1\n            else:\n                o += 1\n        print(e, o)", "import collections\n\ndef checkEvenParity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    s = list()\n    d = collections.defaultdict(lambda : -1)\n    q = int(input())\n    c = -1\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if d[x] != -1:\n            print(e, o)\n            continue\n        s.append(x)\n        d[x] = 1\n        for j in s:\n            if j != x:\n                l = j ^ x\n                if d[l] != -1:\n                    continue\n                s.append(l)\n                d[l] = 1\n        for j in range(c + 1, len(s)):\n            c = j\n            if checkEvenParity(s[j]) == True:\n                e += 1\n            else:\n                o += 1\n        print(e, o)", "def bitcount(n):\n    ans = 0\n    while n:\n        ans += n & 1\n        n >>= 1\n    return ans\nfor _ in range(int(input())):\n    q = int(input())\n    a = {0}\n    (e, o) = (0, 0)\n    for i in range(q):\n        x = int(input())\n        if x not in a:\n            y = set()\n            for j in a:\n                y.add(j ^ x)\n                if bitcount(j ^ x) & 1:\n                    o += 1\n                else:\n                    e += 1\n            a |= y\n        print(e, o)", "P = [0 for x in range(131072)]\nP[1] = 1\nfor k in range(2, 131072):\n    if k % 2 == 0:\n        P[k] = P[k // 2]\n    else:\n        P[k] = 1 - P[k - 1]\nfor _ in range(int(input())):\n    Q = int(input())\n    S = set()\n    OC = 0\n    EC = 0\n    for k in range(Q):\n        x = int(input())\n        if x not in S:\n            l = list(S)\n            S.add(x)\n            if P[x] == 1:\n                OC += 1\n            else:\n                EC += 1\n            for Y in l:\n                v = x ^ Y\n                S.add(v)\n                if P[v] == 1:\n                    OC += 1\n                else:\n                    EC += 1\n        print(EC, OC)", "P = [0 for x in range(131072)]\nP[1] = 1\nfor k in range(2, 131072):\n    if k % 2 == 0:\n        P[k] = P[k // 2]\n    else:\n        P[k] = 1 - P[k - 1]\nt = int(input())\nfor i in range(t):\n    Q = int(input())\n    S = set()\n    ET = 0\n    OT = 0\n    for k in range(Q):\n        X = int(input())\n        if not X in S:\n            L = list(S)\n            S.add(X)\n            if P[X] == 1:\n                OT += 1\n            else:\n                ET += 1\n            for Y in L:\n                v = X ^ Y\n                S.add(v)\n                if P[v] == 1:\n                    OT += 1\n                else:\n                    ET += 1\n        print(ET, OT)", "P = [0 for x in range(131072)]\nP[1] = 1\nfor k in range(2, 131072):\n    if k % 2 == 0:\n        P[k] = P[k // 2]\n    else:\n        P[k] = 1 - P[k - 1]\nt = int(input())\nfor i in range(t):\n    Q = int(input())\n    S = set()\n    ET = 0\n    OT = 0\n    for k in range(Q):\n        X = int(input())\n        if not X in S:\n            L = list(S)\n            S.add(X)\n            if P[X] == 1:\n                OT += 1\n            else:\n                ET += 1\n            for Y in L:\n                v = X ^ Y\n                S.add(v)\n                if P[v] == 1:\n                    OT += 1\n                else:\n                    ET += 1\n        print(ET, OT)", "for _ in range(int(input())):\n    (odd, even) = (0, 0)\n    M = [0] * 200077\n    M[0] = 1\n    q = int(input())\n    for _ in range(q):\n        x = int(input())\n        if M[x] == 0:\n            for i in range(0, 131072):\n                if M[i] == 1 and M[i ^ x] == 0:\n                    M[i ^ x] = 1\n                    cnt = bin(i ^ x).count('1')\n                    if cnt & 1:\n                        odd += 1\n                    else:\n                        even += 1\n        print(even, odd)", "from collections import Counter\nfor _ in range(int(input())):\n    q = int(input())\n    initial = set()\n    initial.add(0)\n    (F, G) = (0, 0)\n    for i in range(q):\n        j = int(input())\n        if j in initial:\n            print(F, G)\n        else:\n            a = []\n            for i in initial:\n                e = i ^ j\n                if Counter(bin(e)[2:])['1'] % 2 == 1:\n                    G += 1\n                else:\n                    F += 1\n                a.append(e)\n            for k in a:\n                initial.add(k)\n            print(F, G)", "from collections import Counter\nfor _ in range(int(input())):\n    q = int(input())\n    initial = set()\n    initial.add(0)\n    (F, G) = (0, 0)\n    for i in range(q):\n        j = int(input())\n        if j in initial:\n            print(F, G)\n        else:\n            a = []\n            for i in initial:\n                e = i ^ j\n                if Counter(bin(e)[2:])['1'] % 2 == 1:\n                    G += 1\n                else:\n                    F += 1\n                a.append(e)\n            for k in a:\n                initial.add(k)\n            print(F, G)", "def check(Num):\n    s1 = 0\n    while Num:\n        Num = Num & Num - 1\n        s1 += 1\n    return s1\nfor t in range(int(input())):\n    s = set()\n    even_ones = 0\n    odd_ones = 0\n    Q = int(input())\n    while Q:\n        X = int(input())\n        if X in s:\n            Q -= 1\n            print(even_ones, odd_ones)\n            continue\n        s1 = set()\n        for elem in s:\n            s1.add(elem ^ X)\n        for elem in s1:\n            s.add(elem)\n        par = check(X)\n        if par % 2:\n            (even_ones, odd_ones) = (even_ones + odd_ones, odd_ones + even_ones + 1)\n        else:\n            (even_ones, odd_ones) = (even_ones + even_ones + 1, odd_ones + odd_ones)\n        print(even_ones, odd_ones)\n        Q -= 1\n        s.add(X)", "def check(Num):\n    s1 = 0\n    while Num:\n        Num = Num & Num - 1\n        s1 += 1\n    return s1\nfor t in range(int(input())):\n    s = set()\n    even_ones = 0\n    odd_ones = 0\n    Q = int(input())\n    while Q:\n        X = int(input())\n        if X in s:\n            Q -= 1\n            print(even_ones, odd_ones)\n            continue\n        s1 = set()\n        for elem in s:\n            s1.add(elem ^ X)\n        for elem in s1:\n            s.add(elem)\n        par = check(X)\n        if par % 2:\n            (even_ones, odd_ones) = (even_ones + odd_ones, odd_ones + even_ones + 1)\n        else:\n            (even_ones, odd_ones) = (even_ones + even_ones + 1, odd_ones + odd_ones)\n        print(even_ones, odd_ones)\n        Q -= 1\n        s.add(X)", "def check(Num):\n    s1 = 0\n    while Num:\n        Num = Num & Num - 1\n        s1 += 1\n    return s1\nfor t in range(int(input())):\n    s = set()\n    even_ones = 0\n    odd_ones = 0\n    Q = int(input())\n    while Q:\n        X = int(input())\n        if X in s:\n            Q -= 1\n            print(even_ones, odd_ones)\n            continue\n        s1 = set()\n        for elem in s:\n            s1.add(elem ^ X)\n        for elem in s1:\n            s.add(elem)\n        par = check(X)\n        if par % 2:\n            (even_ones, odd_ones) = (even_ones + odd_ones, odd_ones + even_ones + 1)\n        else:\n            (even_ones, odd_ones) = (even_ones + even_ones + 1, odd_ones + odd_ones)\n        print(even_ones, odd_ones)\n        Q -= 1\n        s.add(X)", "from operator import countOf\nT = int(input())\n\ndef Parity(x, E, O):\n    c = countOf(bin(x)[2:], '1')\n    return (E + int(c % 2 == 0), O + int(c % 2 == 1))\nfor t in range(T):\n    S = set()\n    Q = int(input())\n    (E, O) = (0, 0)\n    for q in range(Q):\n        X = int(input())\n        if X not in S:\n            for s in list(S):\n                S.add(X ^ s)\n                (E, O) = Parity(X ^ s, E, O)\n            S.add(X)\n            (E, O) = Parity(X, E, O)\n        print(E, O)\n    S.clear()", "from collections import Counter\nfor _ in range(int(input())):\n    q = int(input())\n    initial = set()\n    initial.add(0)\n    (E, O) = (0, 0)\n    for i in range(q):\n        j = int(input())\n        if j in initial:\n            print(E, O)\n        else:\n            a = []\n            for i in initial:\n                e = i ^ j\n                if Counter(bin(e)[2:])['1'] % 2 == 1:\n                    O += 1\n                else:\n                    E += 1\n                a.append(e)\n            for k in a:\n                initial.add(k)\n            print(E, O)", "T = int(input())\n\ndef check(num):\n    s1 = 0\n    while num:\n        num = num & num - 1\n        s1 += 1\n    return s1\nfor _ in range(T):\n    s = set()\n    num_even = 0\n    num_odd = 0\n    Q = int(input())\n    while Q:\n        X = int(input())\n        if X in s:\n            Q -= 1\n            print(num_even, num_odd)\n            continue\n        s1 = set()\n        for item in s:\n            s1.add(item ^ X)\n        for item in s1:\n            s.add(item)\n        par = check(X)\n        if par % 2:\n            (num_even, num_odd) = (num_even + num_odd, num_odd + num_even + 1)\n        else:\n            (num_even, num_odd) = (num_even + num_even + 1, num_odd + num_odd)\n        print(num_even, num_odd)\n        Q -= 1\n        s.add(X)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    q = int(input())\n    orig_set = set()\n    orig_set.add(0)\n    (E, O) = (0, 0)\n    for row in range(q):\n        x = int(input())\n        if x in orig_set:\n            print(E, O)\n        else:\n            l = []\n            for i in orig_set:\n                elem = i ^ x\n                if Counter(bin(elem)[2:])['1'] % 2 == 1:\n                    O += 1\n                else:\n                    E += 1\n                l.append(elem)\n            for e in l:\n                orig_set.add(e)\n            print(E, O)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    q = int(input())\n    orig_set = set()\n    orig_set.add(0)\n    (E, O) = (0, 0)\n    for row in range(q):\n        x = int(input())\n        if x in orig_set:\n            print(E, O)\n        else:\n            l = []\n            for i in orig_set:\n                elem = i ^ x\n                if Counter(bin(elem)[2:])['1'] % 2 == 1:\n                    O += 1\n                else:\n                    E += 1\n                l.append(elem)\n            for e in l:\n                orig_set.add(e)\n            print(E, O)", "import sys\n\ndef fop(s):\n    sys.stdout.write(str(s) + '\\n')\n\ndef fip():\n    return sys.stdin.readline()\nfintinp = lambda : int(fip())\n\ndef flistinp(func=int):\n    return list(map(func, fip().split()))\n\ndef fnsepline(n, func=str):\n    return [func(fip()) for _ in range(n)]\n\ndef even(x):\n    x = bin(x).count('1')\n    return x % 2 == 0\nfor _ in range(fintinp()):\n    q = fintinp()\n    o = e = 0\n    nums = set()\n    for qn in range(q):\n        qn = fintinp()\n        if qn not in nums:\n            if even(qn):\n                e += 1\n            else:\n                o += 1\n            for n in set(nums):\n                x = n ^ qn\n                if x not in nums:\n                    if even(x):\n                        e += 1\n                    else:\n                        o += 1\n                    nums.add(x)\n        nums.add(qn)\n        print(e, o)", "import sys\n\ndef fop(s):\n    sys.stdout.write(str(s) + '\\n')\n\ndef fip():\n    return sys.stdin.readline()\nfintinp = lambda : int(fip())\n\ndef flistinp(func=int):\n    return list(map(func, fip().split()))\n\ndef fnsepline(n, func=str):\n    return [func(fip()) for _ in range(n)]\n\ndef even(x):\n    x = bin(x).count('1')\n    return x % 2 == 0\nfor _ in range(fintinp()):\n    q = fintinp()\n    o = e = 0\n    nums = set()\n    for qn in range(q):\n        qn = fintinp()\n        if qn not in nums:\n            if even(qn):\n                e += 1\n            else:\n                o += 1\n            for n in set(nums):\n                x = n ^ qn\n                if x not in nums:\n                    if even(x):\n                        e += 1\n                    else:\n                        o += 1\n                    nums.add(x)\n        nums.add(qn)\n        print(e, o)", "from sys import stdin, stdout\nfrom math import ceil\nimport numpy as np\nfrom numpy.linalg import matrix_power\n\ndef parity(n):\n    return bin(n)[2:].count('1') % 2\n\ndef solve():\n    for _ in range(int(input())):\n        s = set()\n        q = int(input())\n        p = [0, 0]\n        while q:\n            q -= 1\n            x = int(input())\n            if s == set():\n                p[parity(x)] += 1\n                s.add(x)\n            elif x not in s:\n                se = set()\n                for j in s:\n                    se.add(j ^ x)\n                    p[parity(j ^ x)] += 1\n                s = s.union(se)\n                s.add(x)\n                p[parity(x)] += 1\n            print(p[0], p[1])\nsolve()", "import collections\n\ndef bits(x):\n    return bin(x).count('1')\nt = int(input())\nfor _ in range(t):\n    q = int(input())\n    s = []\n    d = collections.defaultdict(lambda : -1)\n    e = 0\n    o = 0\n    p = -1\n    for i in range(q):\n        x = int(input())\n        if d[x] != -1:\n            print(e, o)\n            continue\n        s.append(x)\n        d[x] = 1\n        for j in s:\n            if j != x:\n                l = j ^ x\n                if d[l] != -1:\n                    continue\n                s.append(l)\n                d[l] = 1\n        for j in range(p + 1, len(s)):\n            p = j\n            if bits(s[j]) % 2 == 0:\n                e = e + 1\n            elif bits(s[j]) % 2 != 0:\n                o = o + 1\n        print(e, o)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = []\n    s = set()\n    (cta, ctb) = (0, 0)\n    while n != 0:\n        x = int(input())\n        m = len(a)\n        if x not in s:\n            s.add(x)\n            a.append(x)\n            s2 = bin(x).count('1')\n            if s2 % 2 == 0:\n                cta += 1\n            else:\n                ctb += 1\n            for i in range(m):\n                y = x ^ a[i]\n                if y not in s:\n                    s.add(y)\n                    a.append(y)\n                    s2 = bin(y).count('1')\n                    if s2 % 2 == 0:\n                        cta += 1\n                    else:\n                        ctb += 1\n        print(cta, ctb)\n        n -= 1", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    q = int(input())\n    orig_set = set()\n    orig_set.add(0)\n    (E, O) = (0, 0)\n    for row in range(q):\n        x = int(input())\n        if x in orig_set:\n            print(E, O)\n        else:\n            l = []\n            for i in orig_set:\n                elem = i ^ x\n                if Counter(bin(elem)[2:])['1'] % 2 == 1:\n                    O += 1\n                else:\n                    E += 1\n                l.append(elem)\n            for e in l:\n                orig_set.add(e)\n            print(E, O)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    q = int(input())\n    orig_set = set()\n    orig_set.add(0)\n    (E, O) = (0, 0)\n    for row in range(q):\n        x = int(input())\n        if x in orig_set:\n            print(E, O)\n        else:\n            l = []\n            for i in orig_set:\n                elem = i ^ x\n                if Counter(bin(elem)[2:])['1'] % 2 == 1:\n                    O += 1\n                else:\n                    E += 1\n                l.append(elem)\n            for e in l:\n                orig_set.add(e)\n            print(E, O)", "arr = [True] * 100001\nfor i in range(1, 100001):\n    if bin(i).count('1') % 2 == 1:\n        arr[i] = False\nfor _ in range(int(input())):\n    even = 0\n    odd = 0\n    s = set()\n    for __ in range(int(input())):\n        n = int(input())\n        a = set()\n        if n not in s:\n            s.add(n)\n            if arr[n]:\n                (even, odd) = (2 * even + 1, 2 * odd)\n            else:\n                (even, odd) = (odd + even, odd + even + 1)\n            for i in s:\n                if i != n:\n                    d = i ^ n\n                    a.add(d)\n            s = s.union(a)\n        print(even, odd)", "def eo(n):\n    cnt = 0\n    while n:\n        n &= n - 1\n        cnt += 1\n    return cnt\nfor _ in range(int(input())):\n    arr = []\n    even = 0\n    odd = 0\n    check = {}\n    for _ in range(int(input())):\n        x = int(input())\n        if check.get(x) == None:\n            for i in range(len(arr)):\n                y = x ^ arr[i]\n                if check.get(y) == None:\n                    check[y] = 0\n                    arr.append(y)\n                    j = eo(y)\n                    if j % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n        if check.get(x) == None:\n            check[x] = 0\n            arr.append(x)\n            j = eo(x)\n            if j % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        print(even, odd)", "def eo(n):\n    cnt = 0\n    while n:\n        n &= n - 1\n        cnt += 1\n    return cnt\n\ndef xor(a, b):\n    ans = a ^ b\n    return ans\nfor _ in range(int(input())):\n    arr = []\n    even = 0\n    odd = 0\n    check = {}\n    for _ in range(int(input())):\n        x = int(input())\n        if check.get(x) == None:\n            for i in range(len(arr)):\n                y = xor(x, arr[i])\n                if check.get(y) == None:\n                    check[y] = 0\n                    arr.append(y)\n                    j = eo(y)\n                    if j % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n        if check.get(x) == None:\n            check[x] = 0\n            arr.append(x)\n            j = eo(x)\n            if j % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        print(even, odd)", "def setbits(n):\n    cnt = 0\n    while n:\n        n &= n - 1\n        cnt += 1\n    return cnt\n\ndef xor(a, b):\n    ans = a ^ b\n    return ans\nfor _ in range(int(input())):\n    arr = []\n    even = 0\n    odd = 0\n    check = {}\n    for _ in range(int(input())):\n        x = int(input())\n        if check.get(x) == None:\n            for i in range(len(arr)):\n                val = xor(x, arr[i])\n                if check.get(val) == None:\n                    check[val] = 0\n                    arr.append(val)\n                    j = setbits(val)\n                    if j % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n        if check.get(x) == None:\n            check[x] = 0\n            arr.append(x)\n            j = setbits(x)\n            if j % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        print(even, odd)", "def bin(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    e = 0\n    o = 0\n    dic = dict()\n    for j in range(n):\n        a = int(input())\n        lst = list()\n        if j == 0:\n            dic[a] = 1\n            m = bin(a)\n            if m % 2 == 0:\n                e += 1\n            else:\n                o += 1\n            print(e, o)\n        elif a not in dic and j > 0:\n            for k in dic:\n                lst.append(k ^ a)\n                m = bin(k ^ a)\n                if m % 2 == 0:\n                    e += 1\n                else:\n                    o += 1\n            for l in lst:\n                dic[l] = 1\n            dic[a] = 1\n            m = bin(a)\n            if m % 2 == 0:\n                e += 1\n            else:\n                o += 1\n            print(e, o)\n        else:\n            print(e, o)", "for _ in range(int(input())):\n    q = int(input())\n    s = set()\n    even = 0\n    odd = 0\n    for i in range(q):\n        x = int(input())\n        if x not in s:\n            s.add(x)\n            if str(bin(x)).count('1') % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            for j in s.copy():\n                if j != x:\n                    m = j ^ x\n                    s.add(m)\n                    if str(bin(m)).count('1') % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n        print(even, odd)", "def BitCount(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 + BitCount(n & n - 1)\nfor _ in range(int(input())):\n    s = set()\n    e = o = 0\n    for t in range(int(input())):\n        x = int(input())\n        s1 = set()\n        if len(s) == 0:\n            s.add(x)\n            if BitCount(x) % 2 == 0:\n                e += 1\n            else:\n                o += 1\n        if x not in s:\n            for v in s:\n                if x != v:\n                    y = x ^ v\n                if BitCount(y) % 2 == 0:\n                    e += 1\n                else:\n                    o += 1\n                s1.add(y)\n            if BitCount(x) % 2 == 0:\n                e += 1\n            else:\n                o += 1\n            s.add(x)\n            s = s | s1\n        print(e, o)", "t = int(input())\n\ndef sb(num):\n    s = bin(num)\n    c = 0\n    for i in s:\n        if i == '1':\n            c = c + 1\n    if c % 2 == 0:\n        return True\n    else:\n        return False\nwhile t > 0:\n    t = t - 1\n    q = int(input())\n    s1 = {}\n    l = []\n    od = 0\n    ev = 0\n    for i in range(0, q):\n        e = int(input())\n        if s1.get(e) == None:\n            for k in range(len(l)):\n                if l[k] != e:\n                    v = l[k] ^ e\n                    if s1.get(v) == None:\n                        s1[v] = 0\n                        l.append(v)\n                        if sb(v):\n                            ev = ev + 1\n                        else:\n                            od = od + 1\n        if s1.get(e) == None:\n            s1[e] = 0\n            l.append(e)\n            if sb(e):\n                ev = ev + 1\n            else:\n                od = od + 1\n        print(ev, end=' ')\n        print(od)", "def sb(num):\n    c = bin(num).count('1')\n    if c % 2 == 0:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    s1 = {}\n    l = []\n    od = 0\n    ev = 0\n    for _ in range(int(input())):\n        e = int(input())\n        if s1.get(e) == None:\n            for k in range(len(l)):\n                v = l[k] ^ e\n                if s1.get(v) == None:\n                    s1[v] = 0\n                    l.append(v)\n                    if sb(v):\n                        ev = ev + 1\n                    else:\n                        od = od + 1\n        if s1.get(e) == None:\n            s1[e] = 0\n            l.append(e)\n            if sb(e):\n                ev = ev + 1\n            else:\n                od = od + 1\n        print(ev, od)", "def setbits(n):\n    cnt = 0\n    while n:\n        n &= n - 1\n        cnt += 1\n    return cnt\n\ndef xor(a, b):\n    ans = a ^ b\n    return ans\nfor _ in range(int(input())):\n    arr = []\n    even = 0\n    odd = 0\n    check = {}\n    for _ in range(int(input())):\n        x = int(input())\n        if check.get(x) == None:\n            for i in range(len(arr)):\n                val = xor(x, arr[i])\n                if check.get(val) == None:\n                    check[val] = 0\n                    arr.append(val)\n                    j = setbits(val)\n                    if j % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n        if check.get(x) == None:\n            check[x] = 0\n            arr.append(x)\n            j = setbits(x)\n            if j % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        print(even, odd)", "def oddct(x):\n    s = bin(x)[2:]\n    if s.count('1') % 2 == 0:\n        return False\n    return True\nfor t in range(int(input())):\n    s = set()\n    q = int(input())\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if x not in s:\n            s1 = set()\n            for y in s:\n                q = x ^ y\n                s1.add(q)\n                if oddct(q) == 1:\n                    o += 1\n                else:\n                    e += 1\n            s.add(x)\n            s = s | s1\n            if oddct(x) == 1:\n                o += 1\n            else:\n                e += 1\n        else:\n            pass\n        print(e, o)", "for i in range(int(input())):\n    q = int(input())\n    a = []\n    s = set()\n    (ctra, ctrb) = (0, 0)\n    while q != 0:\n        x = int(input())\n        m = len(a)\n        if x not in s:\n            s.add(x)\n            a.append(x)\n            s2 = bin(x).count('1')\n            if s2 % 2 == 0:\n                ctra += 1\n            else:\n                ctrb += 1\n            for i in range(m):\n                y = x ^ a[i]\n                if y not in s:\n                    s.add(y)\n                    a.append(y)\n                    s2 = bin(y).count('1')\n                    if s2 % 2 == 0:\n                        ctra += 1\n                    else:\n                        ctrb += 1\n        print(ctra, ctrb)\n        q -= 1", "from collections import defaultdict\nfor _ in range(int(input())):\n    q = int(input())\n    d = defaultdict(int)\n    s = set()\n    (e, o) = (0, 0)\n    x = int(input())\n    d[x] = 1\n    s.add(x)\n    if bin(x)[2:].count('1') % 2 == 0:\n        e += 1\n    else:\n        o += 1\n    print(e, o)\n    for _ in range(q - 1):\n        x = int(input())\n        temp = set()\n        if x not in d:\n            temp.add(x)\n            d[x] = 1\n            if bin(x)[2:].count('1') % 2 == 0:\n                e += 1\n            else:\n                o += 1\n            for i in s:\n                t = x ^ i\n                if t not in d:\n                    temp.add(t)\n                    d[t] = 1\n                    if bin(t)[2:].count('1') % 2 == 0:\n                        e += 1\n                    else:\n                        o += 1\n            s = temp | s\n        print(e, o)", "import collections\n\ndef checkEvenParity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    s = list()\n    d = collections.defaultdict(lambda : -1)\n    q = int(input())\n    c = -1\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if d[x] != -1:\n            print(e, o)\n            continue\n        s.append(x)\n        d[x] = 1\n        for j in s:\n            if j != x:\n                l = j ^ x\n                if d[l] != -1:\n                    continue\n                s.append(l)\n                d[l] = 1\n        for j in range(c + 1, len(s)):\n            c = j\n            if checkEvenParity(s[j]) == True:\n                e += 1\n            else:\n                o += 1\n        print(e, o)", "def cnt_bits(x):\n    result = 0\n    while x > 0:\n        if x % 2 == 1:\n            result += 1\n        x //= 2\n    return result\nt = int(input())\nfor i in range(t):\n    l = set()\n    q = int(input())\n    odd = 0\n    even = 0\n    for j in range(q):\n        a = int(input())\n        if not a in l:\n            new = set()\n            for b in l:\n                new.add(b ^ a)\n                if cnt_bits(b ^ a) % 2 == 1:\n                    odd += 1\n                else:\n                    even += 1\n            l.add(a)\n            if cnt_bits(a) % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n            l |= new\n        print(str(even) + ' ' + str(odd))", "t = int(input())\n\ndef cnt_bits(x):\n    result = 0\n    while x > 0:\n        if x % 2 == 1:\n            result += 1\n        x //= 2\n    return result\nfor i in range(t):\n    s = set()\n    q = int(input())\n    odd = 0\n    even = 0\n    for j in range(q):\n        a = int(input())\n        if not a in s:\n            new = set()\n            for b in s:\n                new.add(b ^ a)\n                if cnt_bits(b ^ a) % 2 == 1:\n                    odd += 1\n                else:\n                    even += 1\n            s.add(a)\n            if cnt_bits(a) % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n            s |= new\n        print(even, odd)", "for _ in range(int(input())):\n    q = int(input())\n    s = set()\n    odd = 0\n    even = 0\n    for a in range(q):\n        x = int(input())\n        temp_list = []\n        if x not in s:\n            c = int(bin(x).count('1'))\n            if c & 1:\n                odd = odd + 1\n            else:\n                even = even + 1\n            for elem in s:\n                t = elem ^ x\n                if t in s:\n                    continue\n                temp_list.append(t)\n                c = int(bin(t).count('1'))\n                if c & 1:\n                    odd = odd + 1\n                else:\n                    even = even + 1\n            s.add(x)\n            for e in temp_list:\n                s.add(e)\n        print(even, odd)", "for _ in range(int(input())):\n    q = int(input())\n    s = set()\n    odd = 0\n    even = 0\n    for a in range(q):\n        x = int(input())\n        temp_list = []\n        if x not in s:\n            c = int(bin(x).count('1'))\n            if c & 1:\n                odd = odd + 1\n            else:\n                even = even + 1\n            for elem in s:\n                t = elem ^ x\n                if t in s:\n                    continue\n                temp_list.append(t)\n                c = int(bin(t).count('1'))\n                if c & 1:\n                    odd = odd + 1\n                else:\n                    even = even + 1\n            s.add(x)\n            for e in temp_list:\n                s.add(e)\n        print(even, odd)", "def parity(n):\n    b = str(bin(n))\n    p = b.count('1')\n    if p % 2 != 0:\n        return 0\n    else:\n        return 1\nfor i1 in range(0, int(input())):\n    q = int(input())\n    d = []\n    count = 0\n    way = 0\n    p = dict()\n    for i in range(0, q):\n        n = int(input())\n        p[n] = p.get(n, 0) + 1\n        if p[n] == 1:\n            if parity(n) == 1:\n                count = count + 1\n            else:\n                way = way + 1\n            d.append(n)\n            for j in d[:-1]:\n                b = j ^ n\n                d.append(b)\n                p[b] = p.get(b, 0) + 1\n                if p[b] == 1:\n                    if parity(b) == 1:\n                        count = count + 1\n                    else:\n                        way = way + 1\n        print(str(count) + ' ' + str(way))", "for _ in range(int(input())):\n    arr = []\n    even = 0\n    odd = 0\n    check = {}\n    for _ in range(int(input())):\n        x = int(input())\n        if check.get(x) == None:\n            for i in range(len(arr)):\n                val = x ^ arr[i]\n                if check.get(val) == None:\n                    check[val] = 0\n                    arr.append(val)\n                    j = bin(val).count('1')\n                    if j % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n        if check.get(x) == None:\n            check[x] = 0\n            arr.append(x)\n            j = bin(x).count('1')\n            if j % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        print(even, odd)", "import sys\nt = int(input())\n\ndef popcount(x):\n    count = 0\n    while x:\n        count += x & 1\n        x >>= 1\n    return count\nwhile t:\n    q = int(input())\n    s = set()\n    (even, odd) = (0, 0)\n    while q:\n        x = int(input())\n        if x not in s:\n            tmp = list(s)\n            for y in tmp:\n                s.add(y ^ x)\n                if popcount(y ^ x) % 2 == 0:\n                    even += 1\n                else:\n                    odd += 1\n            if popcount(x) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            s.add(x)\n        q -= 1\n        sys.stdout.write(str(even) + ' ' + str(odd) + '\\n')\n    t -= 1", "t = int(input())\nfor i in range(t):\n    var1 = list()\n    q = int(input())\n    count1 = 0\n    count2 = 0\n    var2 = set()\n    for j in range(q):\n        x = int(input())\n        if x not in var2:\n            l = len(var1)\n            for m in range(l):\n                n = var1[m] ^ x\n                var2.add(n)\n                var1.append(n)\n                s2 = bin(n).count('1')\n                if s2 % 2 == 0:\n                    count1 = count1 + 1\n                else:\n                    count2 = count2 + 1\n            var1.append(x)\n            var2.add(x)\n            s2 = bin(x).count('1')\n            if s2 % 2 == 0:\n                count1 = count1 + 1\n            else:\n                count2 = count2 + 1\n        print(count1, count2)", "for i in range(int(input())):\n    q = int(input())\n    a = []\n    s = set()\n    (ctra, ctrb) = (0, 0)\n    while q != 0:\n        x = int(input())\n        m = len(a)\n        if x not in s:\n            s.add(x)\n            a.append(x)\n            s2 = bin(x).count('1')\n            if s2 % 2 == 0:\n                ctra += 1\n            else:\n                ctrb += 1\n            for i in range(m):\n                y = x ^ a[i]\n                if y not in s:\n                    s.add(y)\n                    a.append(y)\n                    s2 = bin(y).count('1')\n                    if s2 % 2 == 0:\n                        ctra += 1\n                    else:\n                        ctrb += 1\n        print(ctra, ctrb)\n        q -= 1", "from collections import defaultdict\n\ndef bits(x):\n    return bin(x).count('1')\nt = int(input())\nfor _ in range(t):\n    q = int(input())\n    s = []\n    dic = defaultdict(lambda : -1)\n    odd = 0\n    eve = 0\n    viewed = -1\n    for i in range(q):\n        x = int(input())\n        if dic[x] != -1:\n            print(eve, odd)\n            continue\n        s.append(x)\n        dic[x] = 1\n        for j in s:\n            if j != x:\n                new = j ^ x\n                if dic[new] != -1:\n                    continue\n                s.append(new)\n                dic[new] = 1\n        for j in range(viewed + 1, len(s)):\n            viewed = j\n            if bits(s[j]) % 2 == 0:\n                eve += 1\n            if bits(s[j]) % 2 == 1:\n                odd += 1\n        print(eve, odd)", "T = int(input())\nfor t in range(T):\n    odd = 0\n    even = 0\n    q = int(input())\n    s = set()\n    for i in range(q):\n        x = int(input())\n        if not x in s:\n            for j in s.copy():\n                s.add(x ^ j)\n                if bin(x ^ j).count('1') % 2:\n                    odd += 1\n                else:\n                    even += 1\n            s.add(x)\n            if bin(x).count('1') % 2:\n                odd += 1\n            else:\n                even += 1\n        print(str(even) + ' ' + str(odd))", "T = int(input())\nfor test_cases in range(0, T):\n    Q = int(input())\n    S = set([])\n    even = 0\n    odd = 0\n    while Q > 0:\n        X = int(input())\n        if X not in S:\n            P = S.copy()\n            for i in P:\n                if i != X:\n                    S.add(i ^ X)\n            S.add(X)\n            P = S - P\n            for _ in P:\n                if bin(_).count('1') % 2 == 0:\n                    even = even + 1\n                else:\n                    odd = odd + 1\n        print('%d %d' % (even, odd))\n        Q = Q - 1", "def get_xor(a, b):\n    return a ^ b\n\ndef get_side(val):\n    c = 0\n    while val:\n        c += 1\n        val &= val - 1\n    if c % 2 == 0:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    q = int(input())\n    check = {}\n    l = []\n    (e, o) = (0, 0)\n    for __ in range(q):\n        x = int(input())\n        if check.get(x) == None:\n            for j in range(len(l)):\n                val = get_xor(x, l[j])\n                if not check.get(val):\n                    l.append(val)\n                    check[val] = 0\n                    if get_side(val):\n                        e += 1\n                    else:\n                        o += 1\n        if check.get(x) == None:\n            l.append(x)\n            check[x] = 0\n            if get_side(x):\n                e += 1\n            else:\n                o += 1\n        print(e, o)", "arr = [True] * 140000\nfor i in range(1, 140000):\n    if bin(i).count('1') % 2 == 1:\n        arr[i] = False\nt = int(input())\nfor _ in range(t):\n    s = set()\n    odd = 0\n    even = 0\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        a = set()\n        if n not in s:\n            s.add(n)\n            if arr[n]:\n                (even, odd) = (even + 1 + even, odd + odd)\n            else:\n                (even, odd) = (even + odd, odd + even + 1)\n            for i in list(s):\n                if i != n:\n                    temp = i ^ n\n                    a.add(temp)\n            s = s.union(a)\n        print(even, odd)", "arr = [True] * 140000\nfor i in range(1, 140000):\n    if bin(i).count('1') % 2 == 1:\n        arr[i] = False\nt = int(input())\nfor _ in range(t):\n    s = set()\n    odd = 0\n    even = 0\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        a = set()\n        if n not in s:\n            s.add(n)\n            if arr[n]:\n                (even, odd) = (even + 1 + even, odd + odd)\n            else:\n                (even, odd) = (even + odd, odd + even + 1)\n            for i in s:\n                if i != n:\n                    temp = i ^ n\n                    a.add(temp)\n            s = s.union(a)\n        print(even, odd)", "import collections\nt = int(input())\n\ndef eo(l):\n    x = []\n    for i in l:\n        if bin(i).count('1') % 2 == 0:\n            x.append(1)\n        else:\n            x.append(0)\n    return [x.count(1), x.count(0)]\nwhile t:\n    t -= 1\n    s = []\n    d = collections.defaultdict(lambda : -1)\n    x = [0, 0]\n    n = int(input())\n    for i in range(n):\n        p = int(input())\n        if d[p] != -1:\n            print(x[0], x[1])\n            continue\n        else:\n            o = len(s)\n            d[p] = 1\n            s.append(p)\n            for j in range(o):\n                if s[j] != p:\n                    l = s[j] ^ p\n                    if d[l] != -1:\n                        continue\n                    s.append(l)\n                    d[l] = 1\n            y = eo(s[len(s) - o - 1:])\n            x[0] += y[0]\n            x[1] += y[1]\n            print(x[0], x[1])", "arr = [True] * 140000\nfor i in range(1, 140000):\n    if bin(i).count('1') % 2 == 1:\n        arr[i] = False\nt = int(input())\nfor _ in range(t):\n    s = set()\n    odd = 0\n    even = 0\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        a = set()\n        if n not in s:\n            s.add(n)\n            if arr[n]:\n                (even, odd) = (even + 1 + even, odd + odd)\n            else:\n                (even, odd) = (even + odd, odd + even + 1)\n            for i in s:\n                if i != n:\n                    temp = i ^ n\n                    a.add(temp)\n            s = s.union(a)\n        print(even, odd)", "import copy\nfor i in range(int(input())):\n    s = set()\n    e = 0\n    o = 0\n    for j in range(int(input())):\n        yo = int(input())\n        if yo not in s:\n            e = 0\n            o = 0\n            s.add(yo)\n            temp = []\n            for k in s:\n                if k != yo:\n                    temp.append(k ^ yo)\n            for k in temp:\n                if k not in s:\n                    s.add(k)\n            for k in s:\n                temps = bin(k)[2:]\n                hey = temps.count('1')\n                if hey % 2 == 0:\n                    e += 1\n                else:\n                    o += 1\n            print(e, o)\n        else:\n            print(e, o)", "def findParity(x):\n    a = bin(x).count('1')\n    return a % 2\nfor _ in range(int(input())):\n    e = 0\n    o = 0\n    s = set()\n    for xyz in range(int(input())):\n        x = int(input())\n        if x not in s:\n            n = set(s)\n            for i in s:\n                if i ^ x not in s:\n                    par = findParity(i ^ x)\n                    n.add(i ^ x)\n                    if par == 0:\n                        e += 1\n                    else:\n                        o += 1\n                    s = n\n            par = findParity(x)\n            if par == 0:\n                e += 1\n            else:\n                o += 1\n            s.add(x)\n        print(e, o)", "ijk = []\nik = {}\nuj = 'Cp1'\nugh = 'Contest2'\nugh = 90\nt = int(input())\nwhile t > 0:\n    t -= 1\n    q = int(input())\n    x = set()\n    e = 0\n    o = 0\n    ij = 0\n    while q > 0:\n        q -= 1\n        k = int(input())\n        if k in x:\n            print(e, o)\n            continue\n        y = list(x)\n        ij += 10\n        for i in y:\n            if i != k:\n                x.add(i ^ k)\n        x.add(k)\n        pq = x.difference(set(y))\n        for i in pq:\n            cnts = 0\n            while i:\n                i = i & i - 1\n                cnts += 1\n            ij += 19\n            if cnts % 2 == 0:\n                e += 1\n            else:\n                o += 1\n        print(e, o)\n        ij += 90", "for t in range(int(input())):\n    s = set()\n    even = odd = 0\n    for q in range(int(input())):\n        x = int(input())\n        if x not in s:\n            for val in list(s):\n                xorVal = val ^ x\n                if xorVal not in s:\n                    s.add(xorVal)\n                    numberOfBits = bin(xorVal).count('1')\n                    if numberOfBits % 2 == 0:\n                        even = even + 1\n                    else:\n                        odd = odd + 1\n            numberOfBits = bin(x).count('1')\n            if numberOfBits % 2 == 0:\n                even = even + 1\n            else:\n                odd = odd + 1\n            s.add(x)\n        print(even, odd)", "def getParity(n):\n    parity = 0\n    while n:\n        parity = ~parity\n        n = n & n - 1\n    return parity\ntestCases = int(input())\nfor x in range(testCases):\n    oddCount = 0\n    evenCount = 0\n    integers = []\n    check = {}\n    lines = int(input())\n    for x in range(lines):\n        newInt = int(input())\n        if check.get(newInt) == None:\n            for y in integers:\n                xorInt = newInt ^ y\n                if check.get(xorInt) == None:\n                    integers.append(xorInt)\n                    check[xorInt] = 0\n                    if getParity(xorInt) == 0:\n                        evenCount += 1\n                    else:\n                        oddCount += 1\n            integers.append(newInt)\n            check[newInt] = 0\n            if getParity(newInt) == 0:\n                evenCount += 1\n            else:\n                oddCount += 1\n            print(evenCount, oddCount)\n        else:\n            print(evenCount, oddCount)", "for h in range(int(input())):\n    l = set()\n    n = 0\n    od = 0\n    for i in range(int(input())):\n        x = int(input())\n        if x in l:\n            print(n, '', od)\n        else:\n            for j in list(l):\n                l.add(x ^ j)\n                if bin(x ^ j).count('1') % 2 == 0:\n                    n = n + 1\n                else:\n                    od += 1\n            l.add(x)\n            if bin(x).count('1') % 2 == 0:\n                n = n + 1\n            else:\n                od += 1\n            print(n, '', od)", "for h in range(int(input())):\n    l = set()\n    n = 0\n    od = 0\n    for i in range(int(input())):\n        x = int(input())\n        if x in l:\n            print(n, '', od)\n        else:\n            for j in list(l):\n                l.add(x ^ j)\n                if bin(x ^ j).count('1') % 2 == 0:\n                    n = n + 1\n                else:\n                    od += 1\n            l.add(x)\n            if bin(x).count('1') % 2 == 0:\n                n = n + 1\n            else:\n                od += 1\n            print(n, '', od)", "for h in range(int(input())):\n    l = set()\n    n = 0\n    od = 0\n    for i in range(int(input())):\n        x = int(input())\n        if x in l:\n            print(n, '', od)\n        elif len(l) - 2 * n == 1:\n            if x in l:\n                print(n, '', od)\n            else:\n                for j in list(l):\n                    l.add(x ^ j)\n                n = 2 * n + 1\n                od = 2 * od\n                print(n, '', od)\n                l.add(x)\n        else:\n            for j in list(l):\n                l.add(x ^ j)\n                if bin(x ^ j).count('1') % 2 == 0:\n                    n = n + 1\n                else:\n                    od += 1\n            l.add(x)\n            if bin(x).count('1') % 2 == 0:\n                n = n + 1\n            else:\n                od += 1\n            print(n, '', od)", "for _ in range(int(input())):\n    q = int(input())\n    s = set()\n    ex = set()\n    e = 0\n    o = 0\n    for _ in range(q):\n        x = int(input())\n        if x in s:\n            print(e, ' ', o)\n            continue\n        for j in s:\n            if j != x:\n                ex.add(x ^ j)\n        s = s.union(ex)\n        s.add(x)\n        ex.clear()\n        if e == 0 and o == 0:\n            if str(bin(x)).count('1') % 2 == 1:\n                o += 1\n            else:\n                e += 1\n            print(e, ' ', o)\n            continue\n        if str(bin(x)).count('1') % 2 == 0:\n            o = o + o\n            e = e + e\n            e += 1\n        else:\n            e1 = e + o\n            o = o + e\n            e = e1\n            o += 1\n        print(e, ' ', o)", "def countSetBits(n):\n    count = 0\n    while n:\n        dig = n % 2\n        if dig:\n            count += 1\n        n //= 2\n    return count\nfor t in range(int(input())):\n    s = set()\n    e = o = 0\n    for q in range(int(input())):\n        x = int(input())\n        if x in s:\n            print(e, o)\n            continue\n        t = set()\n        for y in s:\n            val = x ^ y\n            t.add(val)\n            if countSetBits(val) % 2:\n                o += 1\n            else:\n                e += 1\n        for y in t:\n            s.add(y)\n        s.add(x)\n        if countSetBits(x) % 2:\n            o += 1\n        else:\n            e += 1\n        print(e, o)", "def cbs(num):\n    binary = bin(num)\n    setBits = [ones for ones in binary[2:] if ones == '1']\n    return len(setBits)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    s = set()\n    e = 0\n    o = 0\n    for _ in range(n):\n        a = int(input())\n        if a not in s:\n            for i in list(s):\n                g = a ^ i\n                if g not in s:\n                    b = cbs(g)\n                    if b % 2:\n                        o += 1\n                    elif b > 0:\n                        e += 1\n                    s.add(g)\n            b = cbs(a)\n            if b % 2:\n                o += 1\n            elif b > 0:\n                e += 1\n            s.add(a)\n        print(e, o)", "arr = [True] * 140000\nfor i in range(1, 140000):\n    if bin(i).count('1') % 2 == 1:\n        arr[i] = False\nt = int(input())\nfor _ in range(t):\n    s = set()\n    odd = 0\n    even = 0\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        a = set()\n        if n not in s:\n            s.add(n)\n            if arr[n]:\n                (even, odd) = (even + 1 + even, odd + odd)\n            else:\n                (even, odd) = (even + odd, odd + even + 1)\n            for i in s:\n                if i != n:\n                    temp = i ^ n\n                    a.add(temp)\n            s = s.union(a)\n        print(even, odd)", "t = int(input())\nfor l in range(t):\n    n = int(input())\n    seti = set()\n    x = []\n    even = 0\n    odd = 0\n    while n != 0:\n        a = int(input())\n        if a not in seti:\n            seti.add(a)\n            x.append(a)\n            k = bin(a).count('1')\n            if k % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            for i in range(len(x)):\n                xor = a ^ x[i]\n                if xor not in seti:\n                    seti.add(xor)\n                    x.append(xor)\n                    p = bin(xor).count('1')\n                    if p % 2 == 0:\n                        even += 1\n                    else:\n                        odd += 1\n        print(even - 1, odd)\n        n -= 1", "def bit(x):\n    return bin(x).count('1')\nfor _ in range(int(input())):\n    q = int(input())\n    (e, o) = (0, 0)\n    b = int(input())\n    lst = []\n    s = set()\n    lst.append(b)\n    s.add(b)\n    if bit(b) % 2 == 0:\n        e += 1\n    else:\n        o += 1\n    print(e, o)\n    for i in range(q - 1):\n        x = int(input())\n        if x not in s:\n            lst.append(x)\n            s.add(x)\n            if bit(x) % 2 == 0:\n                e += 1\n            else:\n                o += 1\n            length = len(lst)\n            for idx in range(length - 1):\n                a = x ^ lst[idx]\n                lst.append(a)\n                s.add(a)\n                if bit(a) % 2 == 0:\n                    e += 1\n                else:\n                    o += 1\n        print(e, o)", "for i in range(int(input())):\n    q = int(input())\n    a = []\n    s = set()\n    (ctra, ctrb) = (0, 0)\n    while q != 0:\n        x = int(input())\n        m = len(a)\n        if x not in s:\n            s.add(x)\n            a.append(x)\n            s2 = bin(x).count('1')\n            if s2 % 2 == 0:\n                ctra += 1\n            else:\n                ctrb += 1\n            for i in range(m):\n                y = x ^ a[i]\n                if y not in s:\n                    s.add(y)\n                    a.append(y)\n                    s2 = bin(y).count('1')\n                    if s2 % 2 == 0:\n                        ctra += 1\n                    else:\n                        ctrb += 1\n        print(ctra, ctrb)\n        q -= 1", "import collections\n\ndef even_ones(num):\n    ones = bin(num).count('1')\n    if ones % 2 == 0:\n        return True\n    return False\nT = int(input())\nfor t in range(T):\n    Q = int(input())\n    S = collections.defaultdict(lambda : -1)\n    even = 0\n    odd = 0\n    for q in range(Q):\n        x = int(input())\n        if S[x] == 1:\n            print(even, odd)\n            continue\n        S[x] = 1\n        if even_ones(x):\n            even += 1\n        else:\n            odd += 1\n        S_tmp = list(S.keys())\n        for y in S_tmp:\n            if y != x:\n                z = y ^ x\n                if S[z] == -1:\n                    S[z] = 1\n                    if even_ones(z):\n                        even += 1\n                    else:\n                        odd += 1\n        S_tmp.clear()\n        print(even, odd)", "import collections\n\ndef even_ones(num):\n    ones = bin(num).count('1')\n    if ones % 2 == 0:\n        return True\n    return False\nT = int(input())\nfor t in range(T):\n    Q = int(input())\n    S = collections.defaultdict(lambda : -1)\n    even = 0\n    odd = 0\n    for q in range(Q):\n        x = int(input())\n        if S[x] == 1:\n            print(even, odd)\n            continue\n        S[x] = 1\n        if even_ones(x):\n            even += 1\n        else:\n            odd += 1\n        S_tmp = list(S.keys())\n        for i in range(len(S_tmp) - 1):\n            y = S_tmp[i]\n            z = y ^ x\n            if S[z] == -1:\n                S[z] = 1\n                if even_ones(z):\n                    even += 1\n                else:\n                    odd += 1\n        S_tmp.clear()\n        print(even, odd)", "import collections\n\ndef even_ones(num):\n    ones = bin(num).count('1')\n    if ones % 2 == 0:\n        return True\n    return False\nT = int(input())\nfor t in range(T):\n    Q = int(input())\n    S = collections.defaultdict(lambda : -1)\n    even = 0\n    odd = 0\n    for q in range(Q):\n        x = int(input())\n        if S[x] == 1:\n            print(even, odd)\n            continue\n        S[x] = 1\n        if even_ones(x):\n            even += 1\n        else:\n            odd += 1\n        S_tmp = list(S.keys())\n        for i in range(len(S_tmp) - 1):\n            y = S_tmp[i]\n            z = y ^ x\n            if S[z] == -1:\n                S[z] = 1\n                if even_ones(z):\n                    even += 1\n                else:\n                    odd += 1\n        print(even, odd)", "import collections\n\ndef even_ones(num):\n    ones = bin(num).count('1')\n    if ones % 2 == 0:\n        return 1\n    return 0\nT = int(input())\nfor t in range(T):\n    Q = int(input())\n    D = collections.defaultdict(lambda : -1)\n    S = []\n    even = 0\n    odd = 0\n    for q in range(Q):\n        x = int(input())\n        if D[x] == 1:\n            print(even, odd)\n            continue\n        D[x] = 1\n        S.append(x)\n        even += even_ones(x)\n        l = len(S)\n        for i in range(l - 1):\n            y = S[i]\n            z = y ^ x\n            if D[z] == -1:\n                D[z] = 1\n                S.append(z)\n                even += even_ones(z)\n        odd = len(S) - even\n        print(even, odd)", "def one(n):\n    co = 0\n    while n:\n        co += n & 1\n        n >>= 1\n    return co\n\ndef xor(x, y):\n    return (x | y) & (~x | ~y)\nfor t in range(int(input())):\n    q = int(input())\n    s = set()\n    ev = od = 0\n    while q > 0:\n        n = int(input())\n        if n not in s:\n            co = one(n)\n            if co % 2 == 0:\n                ev += 1\n            else:\n                od += 1\n            for i in list(s):\n                new = xor(i, n)\n                if new not in s:\n                    co = one(new)\n                    if co % 2 == 0:\n                        ev += 1\n                    else:\n                        od += 1\n                    s.add(new)\n            s.add(n)\n        print(ev, od)\n        q -= 1", "arr = [True] * 100001\nfor i in range(1, 100001):\n    if bin(i).count('1') % 2 == 1:\n        arr[i] = False\nt = int(input())\nfor _ in range(t):\n    s = set()\n    odd = 0\n    even = 0\n    q = int(input())\n    for _ in range(q):\n        n = int(input())\n        a = set()\n        if n not in s:\n            s.add(n)\n            if arr[n]:\n                (even, odd) = (even + 1 + even, odd + odd)\n            else:\n                (even, odd) = (even + odd, odd + even + 1)\n            for i in s:\n                if i != n:\n                    temp = i ^ n\n                    a.add(temp)\n            s = s.union(a)\n        print(even, odd)", "def count(n):\n    cnt = 0\n    while n > 0:\n        if 1 & n == 1:\n            cnt += 1\n        n >>= 1\n    return cnt\nt = int(input())\nfor i in range(t):\n    dict = {}\n    q = int(input())\n    e = 0\n    o = 0\n    for i1 in range(q):\n        x = int(input())\n        if i1 == 0:\n            dict[x] = count(x)\n            if dict[x] % 2 == 0:\n                e += 1\n            else:\n                o += 1\n        elif not x in dict.keys():\n            dict[x] = count(x)\n            if dict[x] % 2 == 0:\n                e += 1\n            else:\n                o += 1\n            dict2 = {}\n            for j in dict:\n                if j != x and (not j ^ x in dict.keys()):\n                    dict2[j ^ x] = count(j ^ x)\n                    if dict2[j ^ x] % 2 == 0:\n                        e += 1\n                    else:\n                        o += 1\n            dict.update(dict2)\n        print(e, o)", "def binary_one_count(n):\n    if n > 1:\n        return n % 2 + binary_one_count(n // 2)\n    return n\nt = int(input())\nfor _ in range(t):\n    mylist = [0] * 100001\n    q = int(input())\n    (even, odd, s) = (0, 0, set())\n    for _ in range(q):\n        x = int(input())\n        if x not in s:\n            for i in s.copy():\n                s.add(i ^ x)\n                if binary_one_count(i ^ x) % 2 == 0:\n                    even += 1\n                else:\n                    odd += 1\n            s.add(x)\n            if binary_one_count(x) % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n        print(even, odd)", "for i in range(int(input())):\n    q = int(input())\n    a = []\n    s = set()\n    (ctra, ctrb) = (0, 0)\n    while q != 0:\n        x = int(input())\n        m = len(a)\n        if x not in s:\n            s.add(x)\n            a.append(x)\n            s2 = bin(x).count('1')\n            if s2 % 2 == 0:\n                ctra += 1\n            else:\n                ctrb += 1\n            for i in range(m):\n                y = x ^ a[i]\n                if y not in s:\n                    s.add(y)\n                    a.append(y)\n                    s2 = bin(y).count('1')\n                    if s2 % 2 == 0:\n                        ctra += 1\n                    else:\n                        ctrb += 1\n        print(ctra, ctrb)\n        q -= 1", "def check_even_parity(num):\n    parity = 0\n    while num != 0:\n        num = num & num - 1\n        parity = parity + 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor i in range(t):\n    q = int(input())\n    number_dict = {}\n    evens = 0\n    odds = 0\n    calculated_elements = 0\n    number_set = []\n    for j in range(q):\n        x = int(input())\n        if x not in number_dict:\n            for number in number_set:\n                xor_res = x ^ number\n                if xor_res not in number_dict:\n                    if check_even_parity(xor_res):\n                        evens = evens + 1\n                    else:\n                        odds = odds + 1\n                    number_dict[xor_res] = 1\n                    number_set.append(xor_res)\n            if check_even_parity(x):\n                evens = evens + 1\n            else:\n                odds = odds + 1\n            number_dict[x] = 1\n            number_set.append(x)\n        print(str(evens) + ' ' + str(odds))", "for _ in range(int(input())):\n    s = set()\n    s1 = set()\n    n = int(input())\n    for i in range(n):\n        e = int(input())\n        if e not in s:\n            for j in s:\n                s1.add(e ^ j)\n            s.add(e)\n            s = s.union(s1)\n            even = 0\n            odd = 0\n            for j in s:\n                c = bin(j).count('1')\n                if c % 2 == 0:\n                    even = even + 1\n                else:\n                    odd = odd + 1\n        print(even, odd)", "for _ in range(int(input())):\n    S1 = set()\n    S2 = set()\n    q = int(input())\n    for i in range(q):\n        n = int(input())\n        if n not in S1:\n            for j in S1:\n                S2.add(n ^ j)\n            S1.add(n)\n            S1 = S1.union(S2)\n            O = 0\n            e = 0\n            for j in S1:\n                cnt = bin(j).count('1')\n                if cnt % 2 == 0:\n                    e += 1\n                else:\n                    O += 1\n        print(e, O)", "import collections\n\ndef checkEvenParity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    s = list()\n    d = collections.defaultdict(lambda : -1)\n    q = int(input())\n    c = -1\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if d[x] != -1:\n            print(e, o)\n            continue\n        s.append(x)\n        d[x] = 1\n        for j in s:\n            if j != x:\n                l = j ^ x\n                if d[l] != -1:\n                    continue\n                s.append(l)\n                d[l] = 1\n        for j in range(c + 1, len(s)):\n            c = j\n            if checkEvenParity(s[j]) == True:\n                e += 1\n            else:\n                o += 1\n        print(e, o)", "def checkEvenParity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    q = int(input())\n    ans = 0\n    l = []\n    s = set()\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if x in s:\n            print(e, o)\n            continue\n        else:\n            ans = ans ^ x\n            if ans in s:\n                print(e, o)\n                continue\n            else:\n                l.append(x)\n                s.add(x)\n                if checkEvenParity(x):\n                    e += 1\n                else:\n                    o += 1\n                l1 = len(l)\n                for i in range(l1 - 1):\n                    temp = x ^ l[i]\n                    l.append(temp)\n                    s.add(temp)\n                    if checkEvenParity(temp):\n                        e += 1\n                    else:\n                        o += 1\n            print(e, o)", "def checkEvenParity(x):\n    parity = 0\n    while x != 0:\n        x = x & x - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    q = int(input())\n    run = 0\n    l = []\n    s = set()\n    e = 0\n    o = 0\n    for i in range(q):\n        x = int(input())\n        if x in s:\n            print(e, o)\n            continue\n        else:\n            run = run ^ x\n            if run in s:\n                print(e, o)\n                continue\n            else:\n                l.append(x)\n                s.add(x)\n                if checkEvenParity(x):\n                    e += 1\n                else:\n                    o += 1\n                l1 = len(l)\n                for i in range(l1 - 1):\n                    temp = x ^ l[i]\n                    l.append(temp)\n                    s.add(temp)\n                    if checkEvenParity(temp):\n                        e += 1\n                    else:\n                        o += 1\n            print(e, o)", "import collections\n\ndef checkparity(a):\n    parity = 0\n    while a != 0:\n        a = a & a - 1\n        parity += 1\n    if parity % 2 == 0:\n        return True\n    else:\n        return False\ntest = int(input())\nfor _ in range(test):\n    even = 0\n    odd = 0\n    lis = []\n    beg = -1\n    d = collections.defaultdict(lambda : -1)\n    q = int(input())\n    for i in range(q):\n        x = int(input())\n        if d[x] != -1:\n            print(even, odd)\n            continue\n        lis.append(x)\n        d[x] = 1\n        for ele in lis:\n            if ele != x:\n                l = ele ^ x\n                if d[l] != -1:\n                    continue\n                lis.append(l)\n                d[l] = 1\n        for j in range(beg + 1, len(lis)):\n            beg = j\n            par = checkparity(lis[j])\n            if par == True:\n                even += 1\n            else:\n                odd += 1\n        print(even, odd)", "import math\n\ndef bin(n):\n    c = 0\n    while n > 0:\n        a = math.log(n, 2)\n        n -= 2 ** int(a)\n        c = c + 1\n    if c % 2 == 0:\n        return 1\n    else:\n        return 0\nfor _ in range(int(input())):\n    n = int(input())\n    s = set()\n    odd = 0\n    even = 0\n    for i in range(n):\n        a = int(input())\n        if i == 0:\n            s.add(a)\n            if bin(a) == 0:\n                odd += 1\n            else:\n                even += 1\n        elif a not in s:\n            for j in list(s):\n                if j ^ a not in s:\n                    s.add(j ^ a)\n                    if bin(j ^ a) == 0:\n                        odd += 1\n                    else:\n                        even += 1\n            if a not in s:\n                s.add(a)\n                if bin(a) == 0:\n                    odd += 1\n                else:\n                    even += 1\n        print(even, odd)", "def bin(n):\n    c = 0\n    rem = 0\n    c1 = 0\n    while n > 0:\n        rem = n % 2\n        n = n // 2\n        if rem == 1:\n            c += 1\n    if c % 2 == 0:\n        return 1\n    else:\n        return 0\nfor _ in range(int(input())):\n    n = int(input())\n    s = set()\n    odd = 0\n    even = 0\n    for i in range(n):\n        a = int(input())\n        if i == 0:\n            s.add(a)\n            if bin(a) == 0:\n                odd += 1\n            else:\n                even += 1\n        elif a not in s:\n            for j in list(s):\n                if j ^ a not in s:\n                    s.add(j ^ a)\n                    if bin(j ^ a) == 0:\n                        odd += 1\n                    else:\n                        even += 1\n            if a not in s:\n                s.add(a)\n                if bin(a) == 0:\n                    odd += 1\n                else:\n                    even += 1\n        print(even, odd)", "from sys import stdin, stdout\n\ndef parity(n):\n    return bin(n)[2:].count('1') % 2\nt = int(stdin.readline())\nfor _ in range(t):\n    x = [0, 0]\n    s = set()\n    n = int(stdin.readline())\n    for i in range(n):\n        z = int(stdin.readline())\n        par = parity(z)\n        if s == set():\n            x[par] += 1\n            s.add(z)\n        elif z not in s:\n            se = set()\n            if par == 1:\n                (e, o) = x\n                x[1] += e\n                x[0] += o\n            else:\n                (e, o) = x\n                x[1] += o\n                x[0] += e\n            for j in s:\n                se.add(j ^ z)\n            s = s.union(se)\n            s.add(z)\n            x[par] += 1\n        print(x[0], x[1])"]