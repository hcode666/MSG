["t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.insert(0, 0)\n    l2 = [0] * (n + 1)\n    l2[1] = l[1]\n    for j in range(2, n + 1):\n        l2[j] = max(l2[j - 1] + l[j] * j, l2[j - 2] + l[j] * (j - 1) + l[j - 1] * j)\n    print(l2[-1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.insert(0, 0)\n    l2 = [0] * (n + 1)\n    l2[1] = l[1]\n    for j in range(2, n + 1):\n        l2[j] = max(l2[j - 1] + l[j] * j, l2[j - 2] + l[j] * (j - 1) + l[j - 1] * j)\n    print(l2[-1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.insert(0, 0)\n    l2 = [0] * (n + 1)\n    l2[1] = l[1]\n    for j in range(2, n + 1):\n        l2[j] = max(l2[j - 1] + l[j] * j, l2[j - 2] + l[j] * (j - 1) + l[j - 1] * j)\n    print(l2[-1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.insert(0, 0)\n    l2 = [0] * (n + 1)\n    l2[1] = l[1]\n    for j in range(2, n + 1):\n        l2[j] = max(l2[j - 1] + l[j] * j, l2[j - 2] + l[j] * (j - 1) + l[j - 1] * j)\n    print(l2[-1])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.insert(0, 0)\n    l2 = [0] * (n + 1)\n    l2[1] = l[1]\n    for j in range(2, n + 1):\n        l2[j] = max(l2[j - 1] + l[j] * j, l2[j - 2] + l[j] * (j - 1) + l[j - 1] * j)\n    print(l2[-1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split(' ')))\n    l.insert(0, 0)\n    l2 = [0] * (n + 1)\n    l2[1] = l[1]\n    for i in range(2, n + 1):\n        l2[i] = max(l2[i - 1] + l[i] * i, l2[i - 2] + l[i] * (i - 1) + l[i - 1] * i)\n    print(l2[-1])", "n = int(input())\nfor e in range(0, n):\n    k = int(input())\n    l = list(map(int, input().split(' ')))\n    swap = [0] * k\n    notswap = [0] * k\n    swap[0] = l[1]\n    notswap[0] = l[0]\n    for i in range(1, k):\n        if i != k - 1:\n            swap[i] = notswap[i - 1] + l[i + 1] * (i + 1)\n        notswap[i] = max(notswap[i - 1] + l[i] * (i + 1), swap[i - 1] + l[i - 1] * (i + 1))\n    print(max(swap[k - 1], notswap[k - 1]))", "T = int(input())\nfor i in range(T):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    l1 = [0] * (n + 1)\n    l1[1] = l[1]\n    for i in range(2, n + 1):\n        l1[i] = max(l1[i - 1] + l[i] * i, l1[i - 2] + l[i - 1] * i + l[i] * (i - 1))\n    print(l1[-1])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    l1 = [0] * (n + 1)\n    l1[1] = l[1]\n    for i in range(2, n + 1):\n        l1[i] = max(l1[i - 1] + l[i] * i, l1[i - 2] + l[i - 1] * i + l[i] * (i - 1))\n    print(l1[-1])", "def answer():\n    dp = [0] * (n + 1)\n    dp[1] = a[1]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i] * i, dp[i - 2] + a[i] * (i - 1) + a[i - 1] * i)\n    return dp[n]\nfor T in range(int(input())):\n    n = int(input())\n    a = [0]\n    a += list(map(int, input().split()))\n    print(answer())", "def answer():\n    dp = [0] * (n + 1)\n    dp[1] = a[1]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i] * i, dp[i - 2] + a[i] * (i - 1) + a[i - 1] * i)\n    return dp[n]\nfor T in range(int(input())):\n    n = int(input())\n    a = [0]\n    a += list(map(int, input().split()))\n    print(answer())", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    l1 = [0] * (n + 1)\n    l1[1] = l[1]\n    for i in range(2, n + 1):\n        l1[i] = max(l1[i - 1] + l[i] * i, l1[i - 2] + l[i - 1] * i + l[i] * (i - 1))\n    print(l1[-1])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l.insert(0, 0)\n    l1 = [0] * (n + 1)\n    l1[1] = l[1]\n    for i in range(2, n + 1):\n        l1[i] = max(l1[i - 1] + l[i] * i, l1[i - 2] + l[i - 1] * i + l[i] * (i - 1))\n    print(l1[-1])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    a = [0]\n    a.extend(list(map(int, input().split())))\n    dp = [0] * (n + 1)\n    dp[1] = a[1]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i] * i, dp[i - 2] + i * a[i - 1] + (i - 1) * a[i])\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    a = [0]\n    a.extend(list(map(int, input().split())))\n    dp = [0] * (n + 1)\n    dp[1] = a[1]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i] * i, dp[i - 2] + i * a[i - 1] + (i - 1) * a[i])\n    print(dp[n])", "for j in range(int(input())):\n    n = int(input())\n    x = list(map(int, input().split()))\n    aman = [0, x[0]]\n    for i in range(2, n + 1):\n        aman.append(max(aman[i - 1] + x[i - 1] * i, aman[i - 2] + x[i - 1] * (i - 1) + x[i - 2] * i))\n    print(aman[-1])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = l[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + i * l[i - 1], dp[i - 2] + i * l[i - 2] + (i - 1) * l[i - 1])\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = l[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + i * l[i - 1], dp[i - 2] + i * l[i - 2] + (i - 1) * l[i - 1])\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().rstrip().split()))\n    dp = [0] * (n + 1)\n    for i in range(n + 1):\n        if i == 0:\n            dp[i] = 0\n        elif i == 1:\n            dp[i] = l[i - 1]\n        else:\n            dp[i] = max(dp[i - 1] + l[i - 1] * i, dp[i - 2] + l[i - 1] * (i - 1) + l[i - 2] * i)\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = []\n    dp.append(a[0])\n    dp.append(max(1 * a[0] + 2 * a[1], 2 * a[0] + a[1]))\n    for i in range(2, n):\n        dp.append(max(dp[i - 2] + max((i + 1) * a[i] + i * a[i - 1], i * a[i] + (i + 1) * a[i - 1]), dp[i - 1] + (i + 1) * a[i]))\n    print(dp[n - 1])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().rstrip().split()))\n    dp = [0] * (n + 1)\n    for i in range(n + 1):\n        if i == 0:\n            dp[i] = 0\n        elif i == 1:\n            dp[i] = l[i - 1]\n        else:\n            dp[i] = max(dp[i - 1] + l[i - 1] * i, dp[i - 2] + l[i - 1] * (i - 1) + l[i - 2] * i)\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0, a[0]]\n    for i in range(2, n + 1):\n        dp.append(max(dp[i - 1] + a[i - 1] * i, dp[i - 2] + a[i - 1] * (i - 1) + a[i - 2] * i))\n    print(dp[-1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    i = 0\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[1] = 1 * a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(i * a[i - 1] + dp[i - 1], i * a[i - 2] + (i - 1) * a[i - 1] + dp[i - 2])\n    print(dp[n])", "for t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[1] = l[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + l[i - 1] * i, dp[i - 2] + i * l[i - 2] + (i - 1) * l[i - 1])\n    print(dp[n])", "for t in range(int(input())):\n    n = int(input())\n    li = [0] + list(map(int, input().split()))\n    ans = [0, li[1]]\n    for i in range(2, n + 1):\n        ans += [max(ans[i - 1] + li[i] * i, ans[i - 2] + li[i - 1] * i + li[i] * (i - 1))]\n    print(ans[-1])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * n\n    dp[0] = a[0]\n    dp[1] = max(dp[0] + a[1] * 2, a[1] * 1 + a[0] * 2)\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1] + a[i] * (i + 1), dp[i - 2] + a[i - 1] * (i + 1) + a[i] * i)\n    print(dp[-1])", "for i in range(int(input())):\n    n = int(input())\n    A = []\n    A = [int(x) for x in input().split()]\n    dp = []\n    dp.append(A[0])\n    for j in range(1, n):\n        dp.append(dp[j - 1] + A[j] * (j + 1))\n        if j < 2:\n            dp[j] = max(dp[j], A[j] * j + A[j - 1] * (j + 1))\n            if dp[j] == A[j] * j + A[j - 1] * (j + 1):\n                dp[0] = A[1]\n        else:\n            dp[j] = max(dp[j], A[j - 2] + A[j] * j + A[j - 1] * (j + 1), dp[j - 2] + A[j] * j + A[j - 1] * (j + 1))\n    print(max(dp))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    k = n + 1\n    dp = [0] * k\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i - 1] * i, dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1))\n    print(dp[n])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [(i + 1) * a[i] for i in range(n)]\n    dp[1] = max(a[0] * 2 + a[1], dp[0] + dp[1])\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1] + dp[i], dp[i - 2] + a[i - 1] * (i + 1) + a[i] * i)\n    print(dp[n - 1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    dp = []\n    dp.append(a[0])\n    dp.append(max(a[0] * 1 + a[1] * 2, a[0] * 2 + a[1] * 1))\n    for i in range(2, n):\n        x = max(dp[i - 1] + a[i] * (i + 1), dp[i - 2] + a[i - 1] * (i + 1) + a[i] * i)\n        dp.append(x)\n    print(dp[n - 1])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(a[0])\n    else:\n        swapMax = [0] * n\n        noSwapMax = [0] * n\n        swapMax[0] = a[0]\n        noSwapMax[0] = a[0]\n        noSwapMax[1] = a[0] + 2 * a[1]\n        swapMax[1] = a[1] + 2 * a[0]\n        for j in range(2, n):\n            noSwapMax[j] = max(noSwapMax[j - 1], swapMax[j - 1]) + (j + 1) * a[j]\n            swapMax[j] = max(swapMax[j - 2], noSwapMax[j - 2]) + j * a[j] + (j + 1) * a[j - 1]\n        print(max(swapMax[n - 1], noSwapMax[n - 1]))", "test = int(input())\nwhile test:\n    n = int(input())\n    x = list(map(int, input().split()))\n    x.insert(0, 0)\n    maxV = []\n    maxV.append(0)\n    maxV.append(x[1])\n    for i in range(2, len(x)):\n        z = maxV[i - 1] + x[i] * i\n        w = maxV[i - 2] + x[i] * (i - 1) + x[i - 1] * i\n        r = max(z, w)\n        maxV.append(r)\n    print(maxV[len(maxV) - 1])\n    test = test - 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    data = list(map(int, input().split()))\n    data.insert(0, 0)\n    arr = [0] * (n + 1)\n    arr[1] = data[1]\n    for i in range(2, n + 1):\n        arr[i] = max(arr[i - 1] + data[i] * i, arr[i - 2] + data[i - 1] * i + data[i] * (i - 1))\n    print(arr[n])\n    t -= 1", "import random\n\ndef calc_sum(arr):\n    sum_ = 0\n    for a in range(1, len(arr) + 1):\n        sum_ += arr[a - 1] * a\n    return sum_\n\nclass Memo:\n\n    def __init__(self, fn):\n        self.fn = fn\n        self.memory = {}\n\n    def __call__(self, *args):\n        if args[1] not in self.memory:\n            self.memory[args[1]] = self.fn(*args)\n        return self.memory[args[1]]\n\ndef solve(arr, index):\n    if index >= len(arr) - 1:\n        print(arr, calc_sum(arr))\n        return calc_sum(arr)\n    first = 0\n    if arr[index] > arr[index + 1]:\n        (arr[index], arr[index + 1]) = (arr[index + 1], arr[index])\n        first = solve(arr, index + 2)\n    else:\n        (arr[index], arr[index + 1]) = (arr[index + 1], arr[index])\n    (arr[index], arr[index + 1]) = (arr[index + 1], arr[index])\n    second = solve(arr, index + 1)\n    return max(first, second)\n\ndef solve_dp(arr, n):\n    dp = [0 for i in range(n + 1)]\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + arr[i - 2] * i + arr[i - 1] * (i - 1), dp[i - 1] + arr[i - 1] * i)\n    return dp[n]\n\ndef solve1(arr, n):\n    flag = [True] * n\n    swap_values = {}\n    for i in range(n - 1):\n        if arr[i] > arr[i + 1]:\n            swap_values[i] = (i + 2) * arr[i]\n    arr_sort = list(reversed([i[0] for i in sorted(swap_values.items(), key=lambda x: x[1])]))\n    for i in arr_sort:\n        if i < n - 1:\n            if flag[i] != False and flag[i + 1] != False:\n                (arr[i], arr[i + 1]) = (arr[i + 1], arr[i])\n                flag[i] = False\n                flag[i + 1] = False\n    return calc_sum(arr)\n\ndef main():\n    t = int(input())\n    for a in range(t):\n        n = int(input())\n        arr = list(map(int, input().split()))\n        print(solve_dp(arr, len(arr)))\nmain()", "for j in range(int(input())):\n    a = []\n    dp = []\n    n = int(input())\n    a = list(map(int, input().split()))\n    for k in range(n + 1):\n        dp.append(0)\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "def find_max_sum(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = excl if excl > incl else incl\n        incl = excl + i\n        excl = new_excl\n    return excl if excl > incl else incl\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split(' ')))\n    z = a[0]\n    b = []\n    for i in range(1, n):\n        z += a[i] * (i + 1)\n        b.append(a[i - 1] - a[i])\n    s = z + find_max_sum(b)\n    print(s)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    dp = {}\n    dp[int(0)] = int(0)\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + arr[i - 1] * i, dp[i - 2] + arr[i - 2] * i + (i - 1) * arr[i - 1])\n    print(dp[n])", "test = int(input())\nwhile test:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    if n == 1:\n        ans = arr[0]\n    elif n == 2:\n        t1 = arr[0] + arr[1] * 2\n        t2 = arr[0] * 2 + arr[1]\n        if t1 > t2:\n            ans = t1\n        else:\n            ans = t2\n    else:\n        ans = 0\n        t = []\n        proxy_arr = [1] * n\n        for i in range(n - 1):\n            ans += arr[i] * (i + 1)\n            t.append(arr[i] - arr[i + 1])\n        ans += arr[n - 1] * n\n        incl = t[0]\n        excl = 0\n        for i in range(1, n - 1):\n            new_excl = max(incl, excl)\n            incl = excl + t[i]\n            excl = new_excl\n        if incl > excl:\n            ans += incl\n        else:\n            ans += excl\n    test -= 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    k = [int(x) for x in input().split()]\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = k[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + k[i - 1] * i, dp[i - 2] + k[i - 2] * i + k[i - 1] * (i - 1))\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    dp = [0 for x in range(n + 1)]\n    dp[0] = 0\n    dp[1] = arr[0]\n    dp[2] = max(arr[0] + arr[1] * 2, arr[0] * 2 + arr[1])\n    for i in range(3, n + 1):\n        dp[i] = max(dp[i - 1] + arr[i - 1] * i, dp[i - 2] + i * arr[i - 2] + (i - 1) * arr[i - 1])\n    print(dp[n])", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    li = list(map(int, input().split()))\n    li.insert(0, 0)\n    dp = [0] * (n + 1)\n    dp[1] = li[1]\n    for i in range(2, n + 1):\n        x = dp[i - 1] + i * li[i]\n        y = dp[i - 2] + (i - 1) * li[i] + i * li[i - 1]\n        if x > y:\n            dp[i] = x\n        else:\n            dp[i] = y\n    print(dp[n])", "import sys\nsys.setrecursionlimit(100000)\n\ndef solve(idx):\n    if idx > n:\n        return 0\n    if dp[idx] != -1:\n        return dp[idx]\n    if idx == n:\n        return n * a[n]\n    else:\n        dp[idx] = max(a[idx] * (idx + 1) + a[idx + 1] * idx + solve(idx + 2), a[idx] * idx + solve(idx + 1))\n        return dp[idx]\nfor T in range(int(input())):\n    n = int(input())\n    a = [0]\n    a += [int(x) for x in input().split()]\n    dp = [-1] * (n + 1)\n    solve(1)\n    print(max(dp))", "test = int(input())\nwhile test:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    dynamic_p = [0] * (n + 1)\n    dynamic_p[1] = arr[0]\n    for i in range(2, n + 1):\n        dynamic_p[i] = max(dynamic_p[i - 2] + i * arr[i - 2] + (i - 1) * arr[i - 1], dynamic_p[i - 1] + arr[i - 1] * i)\n    test -= 1\n    print(dynamic_p[n])", "import sys\nsys.setrecursionlimit(100000)\n\ndef solve(idx):\n    if idx > n:\n        return 0\n    if dp[idx] != -1:\n        return dp[idx]\n    if idx == n:\n        dp[n] = n * a[n]\n        return dp[n]\n    else:\n        dp[idx] = max(a[idx] * (idx + 1) + a[idx + 1] * idx + solve(idx + 2), a[idx] * idx + solve(idx + 1))\n        return dp[idx]\nfor T in range(int(input())):\n    n = int(input())\n    a = [0]\n    a += [int(x) for x in input().split()]\n    dp = [-1] * (1 + n)\n    solve(1)\n    print(max(dp))", "for I in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    dp = [0] * (n + 1)\n    for i in range(n, -1, -1):\n        if i == n:\n            dp[i] = 0\n        else:\n            dp[i] = a[i] * (i + 1) + dp[i + 1]\n            if i + 1 < n:\n                dp[i] = max(dp[i], a[i + 1] * (i + 1) + a[i] * (i + 2) + dp[i + 2])\n    print(dp[0])", "for _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + arr[i - 2] * i + arr[i - 1] * (i - 1), dp[i - 1] + arr[i - 1] * i)\n    print(dp[n])", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    num = list(input().split())\n    dp = []\n    dp.append(0)\n    dp.append(int(num[0]))\n    for i in range(1, len(num)):\n        dp.append(max(dp[i - 1] + int(num[i]) * i + int(num[i - 1]) * (i + 1), dp[i] + int(num[i]) * (i + 1)))\n    print(dp[-1])\n    t = t - 1", "from sys import stdin\n\ndef dp(li, i):\n    for j in range(2, i):\n        l2[j] = max(l2[j - 1] + li[j] * (j + 1), l2[j - 2] + li[j - 1] * (j + 1) + li[j] * j)\n    return l2[-1]\nn = stdin.readline()\nn = int(n)\nfor _ in range(n):\n    t = int(stdin.readline())\n    amt = 0\n    li = [int(e) for e in stdin.readline().split()]\n    if t > 1:\n        l2 = [0] * t\n        l2[0] = li[0]\n        l2[1] = max(li[0], li[1]) * 2 + min(li[0], li[1])\n        amt = dp(li, t)\n        print(str(amt))\n    else:\n        print(li[-1])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    arr = [int(x) for x in input().split()]\n    dp = [0 for i in range(n + 1)]\n    dp[1] = arr[0]\n    for i in range(1, n):\n        dp[i + 1] = max(dp[i] + (i + 1) * arr[i], dp[i - 1] + i * arr[i] + (i + 1) * arr[i - 1])\n    print(dp[n])\n    t -= 1", "import sys\nsys.setrecursionlimit(1000000)\n\ndef f(p, i, l, N):\n    if i == N - 2 or i == N - 3:\n        return p[i]\n    elif i == N - 4:\n        return p[N - 2] + p[i]\n    elif l[i] >= 0:\n        return l[i]\n    else:\n        l[i] = max(f(p, i + 2, l, N) + p[i], f(p, i + 3, l, N) + p[i])\n        return l[i]\nT = int(input())\nfor x in range(T):\n    N = int(input())\n    A = [int(n) for n in input().split()]\n    neg = list()\n    if N == 1:\n        print(A[0])\n    elif N == 2:\n        s1 = A[0] + 2 * A[1]\n        s2 = A[1] + 2 * A[0]\n        print(max(s1, s2))\n    elif N == 3:\n        p1 = A[0] - A[1]\n        p2 = A[1] - A[2]\n        if p1 < 0:\n            p1 = 0\n        if p2 < 0:\n            p2 = 0\n        maxp = max(p1, p2)\n        base = A[0] + 2 * A[1] + 3 * A[2] + maxp\n        print(base)\n    else:\n        if A[0] < 0:\n            neg.append(0)\n        base = A[0]\n        p = []\n        for i in range(1, N):\n            base += (i + 1) * A[i]\n            if A[i - 1] < A[i]:\n                p.append(0)\n                neg.append(i)\n                continue\n            p.append(A[i - 1] - A[i])\n        l = dict()\n        for i in range(N - 1):\n            l[i] = -1\n        add = max(f(p, 0, l, N), f(p, 1, l, N))\n        print(base + add)", "dp = [0] * 100001\nfor _ in range(int(input())):\n    n = int(input())\n    arr = []\n    arr.append(0)\n    q = [int(s) for s in input().split()]\n    for i in q:\n        arr.append(i)\n    dp[0] = 0\n    dp[1] = arr[1]\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + arr[i] * i\n        dp[i] = max(dp[i], dp[i - 2] + arr[i] * (i - 1) + arr[i - 1] * i)\n    print(dp[n])", "def li():\n    return list(map(int, input().split()))\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef solve():\n    t = nu()\n    for _ in range(t):\n        n = nu()\n        l = li()\n        dp = [0] * (n + 1)\n        dp[1] = l[0]\n        for i in range(2, n + 1):\n            dp[i] = max(dp[i - 1] + l[i - 1] * i, dp[i - 2] + i * l[i - 2] + (i - 1) * l[i - 1])\n        print(dp[n])\nsolve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + i * a[i - 1], dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1))\n    print(dp[n])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    b.append(-1)\n    for i in range(n):\n        b.append(a[i])\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = b[1]\n    for k in range(2, n + 1):\n        dp[k] = max(dp[k - 1] + b[k] * k, dp[k - 2] + (k - 1) * b[k] + k * b[k - 1])\n    print(dp[n])", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = [0] * (n + 1)\n    d[1] = a[0]\n    for i in range(2, n + 1):\n        d[i] = max(d[i - 1] + i * a[i - 1], d[i - 2] + (i - 1) * a[i - 1] + i * a[i - 2])\n    print(d[n])\n    t = t - 1", "from sys import stdin\nfrom math import sqrt, floor, ceil, gcd, factorial\nfrom collections import Counter\nimport sys\nsys.setrecursionlimit(1000000)\n\ndef gti():\n    return map(int, stdin.readline().split())\n\ndef gli():\n    return list(gti())\n\ndef gi():\n    return int(stdin.readline())\n\ndef gs():\n    return stdin.readline()\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        (g, y, x) = egcd(b % a, a)\n        return (g, x - b // a * y, y)\n\ndef modinv(a, m):\n    (g, x, y) = egcd(a, m)\n    return x % m\n\ndef prime_num_sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    Pr = []\n    for j in range(2, len(prime)):\n        if prime[j]:\n            Pr.append(j)\n    return Pr\n\ndef primeFactors(n):\n    prime_fac = []\n    if n % 2 == 0:\n        prime_fac.append(2)\n    while n % 2 == 0:\n        n = n / 2\n    for i in range(3, int(sqrt(n)) + 1, 2):\n        flag = 0\n        while n % i == 0:\n            n = n / i\n            flag = 1\n        if flag == 1:\n            prime_fac.append(i)\n    if n > 2:\n        prime_fac.append(n)\n    return prime_fac\n\ndef binary_search(lis, l, r, elem):\n    while l <= r:\n        mid = l + (r - l) // 2\n        if lis[mid] == elem:\n            return mid\n        elif lis[mid] > elem:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n\ndef prefix_su(lis):\n    ret = [0]\n    for i in lis:\n        ret.append(ret[-1] + i)\n    return ret\nt = gi()\nfor _ in range(t):\n    n = gi()\n    arr = gli()\n    dp = [-1] * (n + 1)\n    dp[0] = 0\n    dp[1] = arr[0]\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + arr[i - 1] * i\n        dp[i] = max(dp[i], dp[i - 2] + arr[i - 1] * (i - 1) + arr[i - 2] * i)\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = [0] * (n + 1)\n    a[1] = l[0]\n    for j in range(2, n + 1):\n        a[j] = max(a[j - 1] + l[j - 1] * j, a[j - 2] + l[j - 1] * (j - 1) + l[j - 2] * j)\n    print(a[n])", "for t in range(int(input())):\n    n = int(input())\n    arr = [int(a) for a in input().split()]\n    Arr = [0]\n    for i in range(n):\n        Arr.append(arr[i])\n    for i in range(2, n + 1):\n        Arr[i] = Arr[i - 1] + i * Arr[i]\n        k = Arr[i - 2] + (i - 1) * arr[i - 1] + i * arr[i - 2]\n        if k > Arr[i]:\n            Arr[i] = k\n    print(Arr[n])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [0 for i in range(n)]\n    dp[0] = l[0]\n    dp[1] = max(dp[0] * 2 + l[1], l[1] * 2 + dp[0])\n    for i in range(2, n):\n        dp[i] = max(dp[i - 1] + l[i] * (i + 1), dp[i - 2] + l[i] * i + l[i - 1] * (i + 1))\n    print(dp[n - 1])", "def fun(a, n):\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    fun(a, n)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = [int(p) for p in input().split()]\n    d = set\n    ans = 0\n    li = [0] * (n + 1)\n    li[0] = 0\n    li[1] = l[0]\n    for i in range(2, n + 1):\n        li[i] = max(li[i - 1] + l[i - 1] * i, li[i - 2] + l[i - 2] * i + l[i - 1] * (i - 1))\n    print(li[-1])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i - 1] * i, dp[i - 2] + a[i - 1] * (i - 1) + a[i - 2] * i)\n    print(dp[n])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "tcase = int(input())\nwhile tcase > 0:\n    tcase -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = dict()\n    (dp[0], dp[1]) = (0, l[0])\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + l[i - 1] * (i - 1) + l[i - 2] * i, dp[i - 1] + l[i - 1] * i)\n    print(dp[n])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[0] = arr[0]\n    dp[1] = max(arr[0] * 1 + arr[1] * 2, arr[0] * 2 + arr[1] * 1)\n    for j in range(2, n):\n        a = dp[j - 1] + arr[j] * (j + 1)\n        b = dp[j - 2] + arr[j - 1] * j + arr[j] * (j + 1)\n        c = dp[j - 2] + arr[j - 1] * (j + 1) + arr[j] * j\n        dp[j] = max(a, b, c)\n    print(dp[n - 1])", "t = int(input())\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    u = [0] * (len(a) + 1)\n    s = [0] * (len(a) + 1)\n    u[1] = a[0]\n    for i in range(1, len(a)):\n        u[i + 1] = max(u[i], s[i]) + a[i] * (i + 1)\n        s[i + 1] = max(u[i - 1], s[i - 1]) + a[i] * i + a[i - 1] * (i + 1)\n    print(max(u[n], s[n]))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    res = [0 for _ in range(n + 1)]\n    res[n - 1] = n * L[n - 1]\n    for i in range(n - 2, -1, -1):\n        res[i] = max(res[i + 1] + (i + 1) * L[i], res[i + 2] + (i + 2) * L[i] + (i + 1) * L[i + 1])\n    print(res[0])", "def esum(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = excl if excl > incl else incl\n        incl = excl + i\n        excl = new_excl\n    return excl if excl > incl else incl\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    k = 0\n    for i in range(n):\n        k += (i + 1) * l[i]\n    l2 = []\n    for i in range(n - 1):\n        l2.append(l[i] - l[i + 1])\n    print(k + esum(l2))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n == 1:\n        print(a[0])\n        continue\n    elif n == 2:\n        print(max(a[0] + a[1] * 2, a[0] * 2 + a[1]))\n    else:\n        dp = [0] * (n + 1)\n        dp[0] = a[0]\n        dp[1] = max(a[0] + a[1] * 2, a[0] * 2 + a[1])\n        for i in range(2, n):\n            m1 = dp[i - 2] + a[i - 1] * i + a[i] * (i + 1)\n            m2 = dp[i - 2] + a[i] * i + a[i - 1] * (i + 1)\n            m3 = dp[i - 1] + a[i] * (i + 1)\n            dp[i] = max(m1, m2, m3)\n        print(dp[n - 1])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "def find_max_sum(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = excl if excl > incl else incl\n        incl = excl + i\n        excl = new_excl\n    return excl if excl > incl else incl\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = []\n    s = a[-1] * n\n    for x in range(n - 1):\n        s += (x + 1) * a[x]\n        dp.append(a[x] - a[x + 1])\n    print(max(find_max_sum(dp) + s, s))", "def find_max_sum(arr):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = excl if excl > incl else incl\n        incl = excl + i\n        excl = new_excl\n    return excl if excl > incl else incl\nfor T in range(int(input())):\n    N = int(input())\n    A = list(map(int, input().split()))\n    S = A[0]\n    D = A.copy()[1:]\n    for i in range(1, N):\n        D[i - 1] = A[i - 1] - A[i]\n        S += A[i] * (i + 1)\n    print(S + find_max_sum(D))", "test = int(input())\nwhile test:\n    n = int(input())\n    b = list(map(int, input().split()))\n    a = [0] * (n + 1)\n    for i in range(1, n + 1):\n        a[i] = b[i - 1]\n    dp = [0] * (n + 1)\n    dp[0] = 0\n    dp[1] = a[1]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 1] + a[i] * i, dp[i - 2] + a[i - 1] * i + a[i] * (i - 1))\n    print(dp[n])\n    test -= 1", "t = int(input())\nfor T in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = [0] * (n + 1)\n    ans[n - 1] = n * a[n - 1]\n    for i in range(n - 2, -1, -1):\n        v1 = ans[i + 1] + (i + 1) * a[i]\n        v2 = ans[i + 2] + (i + 2) * a[i] + (i + 1) * a[i + 1]\n        ans[i] = max(v1, v2)\n    print(ans[0])", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    A.append(0)\n    dp = [0] * (n + 1)\n    for i in range(n, -1, -1):\n        if i == n:\n            dp[i] = 0\n        else:\n            dp[i] = A[i] * (i + 1) + dp[i + 1]\n            if i + 1 < n:\n                dp[i] = max(dp[i], A[i + 1] * (i + 1) + A[i] * (i + 2) + dp[i + 2])\n    print(dp[0])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "import math\nfrom sys import stdin, stdout\nfrom bisect import bisect_left, bisect_right\nfrom copy import deepcopy\n\ndef isprime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i = i + 6\n    return True\n\ndef freq(l):\n    f = {}\n    for i in l:\n        if i in f:\n            f[i] += 1\n        else:\n            f[i] = 1\n    return f\nMAX = pow(10, 5)\ninp = lambda : int(stdin.readline())\nsip = lambda : stdin.readline()\nmulip = lambda : map(int, stdin.readline().split())\nlst = lambda : list(map(int, stdin.readline().split()))\nslst = lambda : list(sip())\nfor _ in range(inp()):\n    N = inp()\n    A = lst()\n    (natural, swapped) = ([A[0]], [A[0]])\n    for i in range(1, N):\n        natural.append(max(natural[i - 1], swapped[i - 1]) + A[i] * (i + 1))\n        swapped.append(max(natural[i - 1] + A[i] * (i + 1), natural[i - 1] - A[i - 1] * i + A[i] * i + A[i - 1] * (i + 1)))\n    print(max(natural[N - 1], swapped[N - 1]))", "T = int(input())\nfor t in range(T):\n    n = int(input())\n    A = [int(i) for i in input().split()]\n    A.append(0)\n    dp = [0] * (n + 1)\n    for i in range(n, -1, -1):\n        if i == n:\n            dp[i] = 0\n        else:\n            dp[i] = A[i] * (i + 1) + dp[i + 1]\n            if i + 1 < n:\n                dp[i] = max(dp[i], A[i + 1] * (i + 1) + A[i] * (i + 2) + dp[i + 2])\n    print(dp[0])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "try:\n    for _ in range(int(input())):\n        N = int(input())\n        arr = list(map(int, input().split()))\n        ms = [0 for k in range(N + 1)]\n        ms[1] = arr[0]\n        for i in range(2, N + 1):\n            ms[i] = max(ms[i - 2] + arr[i - 2] * i + arr[i - 1] * (i - 1), ms[i - 1] + arr[i - 1] * i)\n        print(ms[-1])\nexcept:\n    pass", "from sys import stdin\nimport resource\nimport sys\nresource.setrlimit(resource.RLIMIT_STACK, [268435456, resource.RLIM_INFINITY])\nsys.setrecursionlimit(1048576)\n\ndef brute(mydict, garr, index):\n    if index >= len(garr):\n        return 0\n    if index in mydict:\n        return mydict[index]\n    first = garr[index] + brute(mydict, garr, index + 2)\n    second = brute(mydict, garr, index + 1)\n    mydict[index] = max(first, second)\n    return mydict[index]\n\ndef get_gain(arr):\n    garr = []\n    for i in range(1, len(arr)):\n        final = arr[i - 1] * (i + 1) + arr[i] * i\n        prev = arr[i - 1] * i + arr[i] * (i + 1)\n        garr.append(final - prev)\n    return garr\n\ndef get_value(arr):\n    val = 0\n    for i in range(1, len(arr) + 1):\n        val += arr[i - 1] * i\n    return val\nt = int(stdin.readline().strip())\nfor _ in range(t):\n    n = int(stdin.readline().strip())\n    arr = list(map(int, stdin.readline().split()))\n    garr = get_gain(arr)\n    mydict = dict()\n    gain = brute(mydict, garr, 0)\n    print(gain + get_value(arr))", "def fun(i, l):\n    if i >= n:\n        return 0\n    if i + 1 >= n:\n        return l[i] * (i + 1) + fun(i + 1, l)\n    return max(l[i] * (i + 2) + l[i + 1] * (i + 1) + fun(i + 2, l), l[i] * (i + 1) + fun(i + 1, l))\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    i = n - 1\n    while i >= 0:\n        if i + 1 >= n:\n            dp[i] = l[i] * (i + 1)\n        else:\n            dp[i] = max(l[i] * (i + 2) + l[i + 1] * (i + 1) + dp[i + 2], l[i] * (i + 1) + dp[i + 1])\n        i -= 1\n    i = 0\n    print(dp[0])\n    t -= 1", "import sys\nfrom collections import defaultdict as dc\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    s = 0\n    b = []\n    for i in range(n):\n        s = s + a[i] * (i + 1)\n    p = [0] * n\n    q = [0] * n\n    p[0] = q[0] = a[0]\n    for i in range(1, n):\n        p[i] = max(p[i - 1], q[i - 1]) + a[i] * (i + 1)\n        q[i] = max(q[i - 1] + a[i] * (i + 1), p[i - 1] - a[i - 1] * i + (a[i] * i + a[i - 1] * (i + 1)))\n    print(max(p[-1], q[-1]))", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    t = [0] * (n + 1)\n    t[1] = a[0]\n    for i in range(2, n + 1):\n        t[i] = max(t[i - 2] + a[i - 1] * (i - 1) + a[i - 2] * i, t[i - 1] + a[i - 1] * i)\n    print(t[n])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "def find_max_sum(arr):\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)\nT = int(input())\noutput = [0] * T\nfor t in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    diff = [a[i] - a[i + 1] for i in range(n - 1)]\n    ans = a[0]\n    for i in range(1, n):\n        ans += (i + 1) * a[i]\n    output[t] = str(ans + find_max_sum(diff))\nprint('\\n'.join(output))", "for _ in range(int(input())):\n    last = int(input())\n    nl = [int(x) for x in input().split()]\n    ansl = [0] * (last + 1)\n    ansl[last - 1] = last * nl[last - 1]\n    for i in range(last - 2, -1, -1):\n        ansl[i] = max(ansl[i + 1] + (i + 1) * nl[i], ansl[i + 2] + (i + 2) * nl[i] + (i + 1) * nl[i + 1])\n    print(ansl[0])", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    sumval = 0\n    dp[n - 1] = arr[n - 1] * n\n    for i in range(n - 2, -1, -1):\n        dp[i] = max(arr[i] * (i + 1) + dp[i + 1], arr[i] * (i + 2) + arr[i + 1] * (i + 1) + dp[i + 2])\n    print(dp[0])", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    a = l[0]\n    b = l[0]\n    for x in range(1, n):\n        n = max(a, b)\n        b = a + x * l[x] + l[x - 1]\n        a = n + (x + 1) * l[x]\n    print(max(a, b))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    dp = [0] * (n + 1)\n    dp[1] = l[0]\n    for i in range(1, n):\n        dp[i + 1] = max(dp[i] + (i + 1) * l[i], dp[i - 1] + (i + 1) * l[i - 1] + i * l[i])\n    print(dp[n])", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    it = list(map(int, input().split()))\n    dp = [[-1, -1] for i in range(n + 1)]\n    dp[0] = [0, 0]\n    dp[1] = [it[0] * 1, 0]\n    for i in range(2, n + 1):\n        dp[i][1] = max(dp[i - 2]) + it[i - 1] * (i - 1) + it[i - 2] * i\n        dp[i][0] = max(dp[i - 1]) + it[i - 1] * i\n    print(max(dp[n]))", "for t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    dp = [0 for i in range(n + 1)]\n    dp[1] = a[0]\n    for i in range(2, n + 1):\n        dp[i] = max(dp[i - 2] + a[i - 2] * i + a[i - 1] * (i - 1), dp[i - 1] + a[i - 1] * i)\n    print(dp[n])"]