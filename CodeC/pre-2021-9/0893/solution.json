["(n, q, k) = map(int, input().split())\nays = list(map(int, input().split()))\nqs = input().strip()\nasum = sum(ays)\nif asum == n or asum < 2:\n    ans = [min(asum, k)] * qs.count('?')\nelse:\n    ans = []\n    run = []\n    last = 0\n    for (ix, a) in enumerate(ays):\n        if a == 1:\n            if last == 0:\n                run.append([1, ix])\n            else:\n                run[-1][0] += 1\n        last = a\n    mark = 0\n    if last == 1 and ays[0] == 1:\n        (mark, _) = run.pop()\n        run[0][0] += mark\n    run.sort(reverse=True)\n    (main, st) = run[0]\n    if st > 0:\n        st += mark\n    en = st + main\n    if len(run) > 1:\n        spare = run[1][0]\n    else:\n        spare = 0\n    mk = min(main, k)\n    if spare >= k or main >= 2 * k or main == spare:\n        ans = [mk] * qs.count('?')\n    else:\n        for c in qs:\n            if c == '!':\n                mark -= 1\n                if mark < 0:\n                    mark += n\n            elif mark > st and mark < en:\n                m1 = mark - st\n                m2 = en - mark\n                ans.append(min(max(m1, m2, spare), k))\n            else:\n                ans.append(mk)\nprint('\\n'.join(map(str, ans)))", "(n, q, k) = map(int, input().split())\nays = list(map(int, input().split()))\nqs = input().strip()\nasum = sum(ays)\nif asum == n or asum < 2:\n    ans = [min(asum, k)] * qs.count('?')\nelse:\n    ans = []\n    run = []\n    last = 0\n    for (ix, a) in enumerate(ays):\n        if a == 1:\n            if last == 0:\n                run.append([1, ix])\n            else:\n                run[-1][0] += 1\n        last = a\n    mark = 0\n    if last == 1 and ays[0] == 1:\n        (mark, _) = run.pop()\n        run[0][0] += mark\n    run.sort(reverse=True)\n    (main, st) = run[0]\n    if st > 0:\n        st += mark\n    en = st + main\n    if len(run) > 1:\n        spare = run[1][0]\n    else:\n        spare = 0\n    mk = min(main, k)\n    if spare >= k or main >= 2 * k or main == spare:\n        ans = [mk] * qs.count('?')\n    else:\n        for c in qs:\n            if c == '!':\n                mark -= 1\n                if mark < 0:\n                    mark += n\n            elif mark > st and mark < en:\n                m1 = mark - st\n                m2 = en - mark\n                ans.append(min(max(m1, m2, spare), k))\n            else:\n                ans.append(mk)\nprint('\\n'.join(map(str, ans)))", "(n, q, k) = map(int, input().split())\nays = list(map(int, input().split()))\nqs = input().strip()\nasum = sum(ays)\nif asum == n or asum < 2:\n    ans = [min(asum, k)] * qs.count('?')\nelse:\n    ans = []\n    run = []\n    last = 0\n    for (ix, a) in enumerate(ays):\n        if a == 1:\n            if last == 0:\n                run.append([1, ix])\n            else:\n                run[-1][0] += 1\n        last = a\n    mark = 0\n    if last == 1 and ays[0] == 1:\n        (mark, _) = run.pop()\n        run[0][0] += mark\n    run.sort(reverse=True)\n    (main, st) = run[0]\n    if st > 0:\n        st += mark\n    en = st + main\n    if len(run) > 1:\n        spare = run[1][0]\n    else:\n        spare = 0\n    mk = min(main, k)\n    if spare >= k or main >= 2 * k or main == spare:\n        ans = [mk] * qs.count('?')\n    else:\n        for c in qs:\n            if c == '!':\n                mark -= 1\n                if mark < 0:\n                    mark += n\n            elif mark > st and mark < en:\n                m1 = mark - st\n                m2 = en - mark\n                ans.append(min(max(m1, m2, spare), k))\n            else:\n                ans.append(mk)\nprint('\\n'.join(map(str, ans)))", "(n, q, k) = map(int, input().split())\nays = list(map(int, input().split()))\nqs = input().strip()\nasum = sum(ays)\nif asum == n or asum < 2:\n    ans = [min(asum, k)] * qs.count('?')\nelse:\n    ans = []\n    run = []\n    last = 0\n    for (ix, a) in enumerate(ays):\n        if a == 1:\n            if last == 0:\n                run.append([1, ix])\n            else:\n                run[-1][0] += 1\n        last = a\n    mark = 0\n    if last == 1 and ays[0] == 1:\n        (mark, _) = run.pop()\n        run[0][0] += mark\n    run.sort(reverse=True)\n    (main, st) = run[0]\n    if st > 0:\n        st += mark\n    en = st + main\n    if len(run) > 1:\n        spare = run[1][0]\n    else:\n        spare = 0\n    mk = min(main, k)\n    if spare >= k or main >= 2 * k or main == spare:\n        ans = [mk] * qs.count('?')\n    else:\n        for c in qs:\n            if c == '!':\n                mark -= 1\n                if mark < 0:\n                    mark += n\n            elif mark > st and mark < en:\n                m1 = mark - st\n                m2 = en - mark\n                ans.append(min(max(m1, m2, spare), k))\n            else:\n                ans.append(mk)\nprint('\\n'.join(map(str, ans)))", "def create(current, ss, se):\n    if ss == se:\n        if array[ss] == 1:\n            value = 1\n        else:\n            value = 0\n        tree[current] = [value, value, 1 - value, value]\n    else:\n        mid = (ss + se) // 2\n        left = 2 * current + 1\n        right = 2 * current + 2\n        create(left, ss, mid)\n        create(right, mid + 1, se)\n        if tree[left][2] == 0:\n            tree[current][0] = tree[left][0] + tree[right][0]\n        else:\n            tree[current][0] = tree[left][0]\n        if tree[right][2] == 0:\n            tree[current][1] = tree[left][1] + tree[right][1]\n        else:\n            tree[current][1] = tree[right][1]\n        tree[current][2] = tree[left][2] + tree[right][2]\n        tree[current][3] = max(tree[left][3], tree[right][3], tree[left][1] + tree[right][0])\n\ndef query(current, ss, se, l, r):\n    if ss > r or se < l:\n        return None\n    if ss >= l and se <= r:\n        return tree[current]\n    mid = (ss + se) // 2\n    left_q = query(2 * current + 1, ss, mid, l, r)\n    right_q = query(2 * current + 2, mid + 1, se, l, r)\n    if left_q == None:\n        return right_q\n    if right_q == None:\n        return left_q\n    ans = [0, 0, 0, 0]\n    if left_q[2] == 0:\n        ans[0] = left_q[0] + right_q[0]\n    else:\n        ans[0] = left_q[0]\n    if right_q[2] == 0:\n        ans[1] = left_q[1] + right_q[1]\n    else:\n        ans[1] = right_q[1]\n    ans[2] = left_q[2] + right_q[2]\n    ans[3] = max(left_q[3], right_q[3], left_q[1] + right_q[0])\n    return ans\n(n, q, k) = map(int, input().split())\narray = list(map(int, input().split()))\narray += array\ns = input()\ntree = [[0, 0, 0, 0] for i in range(8 * n)]\ncreate(0, 0, 2 * n - 1)\ni = 0\nfor ch in s:\n    if ch == '?':\n        i = i % n\n        ans = query(0, 0, 2 * n - 1, n - i, 2 * n - 1 - i)\n        print(min(k, ans[3]))\n    else:\n        i += 1", "(n, q, m) = map(int, input().split())\nlis = list(map(int, input().split()))\ntree = [[0, 0, 0, 0] for i in range(8 * n + 1)]\n\ndef build(arr, start, end, node):\n    if start == end:\n        if arr[start - 1] == 1:\n            ans = 1\n        else:\n            ans = 0\n        tree[node] = [ans, ans, 1 - ans, ans]\n    else:\n        mid = (start + end) // 2\n        left_child = 2 * node\n        right_child = left_child + 1\n        build(arr, start, mid, left_child)\n        build(arr, mid + 1, end, right_child)\n        if tree[left_child][2] == 0:\n            tree[node][0] = tree[left_child][0] + tree[right_child][0]\n        else:\n            tree[node][0] = tree[left_child][0]\n        if tree[right_child][2] == 0:\n            tree[node][1] = tree[left_child][1] + tree[right_child][1]\n        else:\n            tree[node][1] = tree[right_child][1]\n        tree[node][2] = tree[left_child][2] + tree[right_child][2]\n        tree[node][3] = max(tree[left_child][3], tree[right_child][3], tree[left_child][1] + tree[right_child][0])\n\ndef query(start, end, qstart, qend, node):\n    if start > qend or end < qstart:\n        return None\n    if qstart <= start and end <= qend:\n        return tree[node]\n    mid = (start + end) // 2\n    left_child = 2 * node\n    right_child = left_child + 1\n    left_query = query(start, mid, qstart, qend, left_child)\n    right_query = query(mid + 1, end, qstart, qend, right_child)\n    if not left_query:\n        return right_query\n    if not right_query:\n        return left_query\n    ans = [0, 0, 0, 0]\n    if left_query[2] == 0:\n        ans[0] = left_query[0] + right_query[0]\n    else:\n        ans[0] = left_query[0]\n    if right_query[2] == 0:\n        ans[1] = left_query[1] + right_query[1]\n    else:\n        ans[1] = right_query[1]\n    ans[2] = left_query[2] + right_query[2]\n    ans[3] = max(left_query[3], right_query[3], left_query[1] + right_query[0])\n    return ans\nlis += lis\nlast = 2 * n\nbuild(lis, 1, last, 1)\nquery_string = input()\nshift = 0\nfor i in range(q):\n    if query_string[i] == '?':\n        shift %= n\n        ans = query(1, last, n + 1 - shift, last - shift, 1)\n        print(min(m, ans[3]))\n    else:\n        shift += 1", "(length, queries, minimum) = map(int, input().split())\narray = list(map(int, input().split()))\nstring = input()\npref = []\ni = 0\nwhile i < len(array):\n    if array[i] == 0:\n        pref.append(0)\n        i += 1\n    elif array[i] == 1:\n        count = 0\n        while i < len(array) and array[i] == 1:\n            count += 1\n            i += 1\n        pref.append(count)\nanswer = [0] * length\nfrequency = [0] * (length + length)\nfor i in range(len(pref)):\n    if pref[i] != 0:\n        frequency[pref[i]] += 1\nanswer[0] = max(pref)\nmaximum = max(pref)\nlength2 = len(pref)\nfor i in range(1, length):\n    if pref[length2 - 1] == 0:\n        pref.pop(length2 - 1)\n        pref.insert(0, 0)\n        answer[i] = maximum\n    elif pref[length2 - 1] > 0:\n        if pref[length2 - 1] > 1:\n            if pref[0] == 0:\n                x = pref[length2 - 1]\n                frequency[x] -= 1\n                frequency[x - 1] += 1\n                frequency[1] += 1\n                pref[length2 - 1] -= 1\n                length2 += 1\n                pref.insert(0, 1)\n            elif pref[0] > 0:\n                x = pref[length2 - 1]\n                y = pref[0]\n                frequency[x] -= 1\n                frequency[y] -= 1\n                frequency[x - 1] += 1\n                frequency[y + 1] += 1\n                pref[length2 - 1] -= 1\n                pref[0] += 1\n        elif pref[length2 - 1] == 1:\n            if pref[0] == 0:\n                pref.pop()\n                pref.insert(0, 1)\n            elif pref[0] > 0:\n                x = pref[0]\n                frequency[x] -= 1\n                frequency[x + 1] += 1\n                frequency[1] -= 1\n                pref.pop()\n                pref[0] += 1\n                length2 -= 1\n        if frequency[maximum + 1] > 0:\n            maximum = maximum + 1\n        elif frequency[maximum] > 0:\n            maximum = maximum\n        elif frequency[maximum - 1] > 0:\n            maximum = maximum - 1\n        answer[i] = maximum\nconti = 0\nif len(pref) == 1:\n    for i in range(queries):\n        if string[i] == '?':\n            print(min(minimum, pref[0]))\nelse:\n    for i in range(queries):\n        if string[i] == '!':\n            conti += 1\n        elif string[i] == '?':\n            print(min(minimum, answer[conti % length]))", "import math\n\ndef merge(l1, l2):\n    (m1, p1, s1, z1) = l1\n    (m2, p2, s2, z2) = l2\n    if z1 == 0 and z2 == 0:\n        result = [m1 + m2, m1 + m2, m1 + m2, 0]\n    elif z1 == 0 and z2 == 1:\n        result = [max(m1 + p2, m2), p1 + p2, s2, 1]\n    elif z1 == 1 and z2 == 0:\n        result = [max(m1, s1 + m2), p1, s1 + s2, 1]\n    elif z1 == 1 and z2 == 1:\n        result = [max(max(m1, m2), s1 + p2), p1, s2, 1]\n    return result\n\ndef build(node, l, r):\n    if l == r:\n        if sequence[l] == 1:\n            segTree[node] = [1, 1, 1, 0]\n        else:\n            segTree[node] = [0, 0, 0, 1]\n    else:\n        mid = (l + r) // 2\n        build(2 * node, l, mid)\n        build(2 * node + 1, mid + 1, r)\n        (m1, p1, s1, z1) = segTree[2 * node]\n        (m2, p2, s2, z2) = segTree[2 * node + 1]\n        if z1 == 0 and z2 == 0:\n            segTree[node] = [m1 + m2, m1 + m2, m1 + m2, 0]\n        elif z1 == 0 and z2 == 1:\n            segTree[node] = [max(m1 + p2, m2), p1 + p2, s2, 1]\n        elif z1 == 1 and z2 == 0:\n            segTree[node] = [max(m1, s1 + m2), p1, s1 + s2, 1]\n        elif z1 == 1 and z2 == 1:\n            segTree[node] = [max(max(m1, m2), s1 + p2), p1, s2, 1]\n\ndef segQuery(node, l, r, ql, qr):\n    if l >= ql and r <= qr:\n        return segTree[node]\n    elif r < ql or l > qr:\n        return [-1, -1, -1, -1]\n    else:\n        mid = (l + r) // 2\n        (m1, p1, s1, z1) = segQuery(2 * node, l, mid, ql, qr)\n        (m2, p2, s2, z2) = segQuery(2 * node + 1, mid + 1, r, ql, qr)\n        if m1 == -1:\n            return [m2, p2, s2, z2]\n        elif m2 == -1:\n            return [m1, p1, s1, z1]\n        else:\n            result = merge([m1, p1, s1, z1], [m2, p2, s2, z2])\n            return result\nfirstInp = [int(x) for x in input().split()]\nn = firstInp[0]\nq = firstInp[1]\nk = firstInp[2]\nsequence = [int(x) for x in input().split()]\nsequence = sequence * 2\nshiftP = n\nsegNodes = 2 ** math.ceil(math.log(2 * n, 2) + 1)\nsegTree = [[-1, -1, -1, -1]] * segNodes\nbuild(1, 0, 2 * n - 1)\nqueries = input()\nfor query in queries:\n    if query == '!':\n        shiftP -= 1\n        if shiftP == 0:\n            shiftP = n\n    else:\n        print(min(k, segQuery(1, 0, 2 * n - 1, shiftP, shiftP + n - 1)[0]))", "def calc_subseq_lengths():\n    (li, tmp, ctr) = ([[0, 0], [0, 0]], A + A[:A.index('0') + 1], 0)\n    for i in range(A.index('0'), len(tmp)):\n        if tmp[i] == '1':\n            ctr += 1\n        else:\n            li.append([ctr, i - ctr])\n            ctr = 0\n    return sorted(li)[-2:]\n(N, Q, K) = map(int, input().split())\nA = ''.join(input().split())\nS = input()\nif '0' not in A:\n    (seq1, seq2) = ([N, 0], [N, 0])\nelse:\n    (seq1, seq2) = calc_subseq_lengths()\nif seq1[0] >= K and seq2[0] >= K:\n    print('\\n'.join([str(K)] * S.count('?')))\nelif seq1[0] == seq2[0]:\n    print('\\n'.join([str(seq1[0])] * S.count('?')))\nelse:\n    for query in S:\n        if query == '!':\n            seq1[1] = (seq1[1] + 1) % N\n            seq2[1] = (seq2[1] + 1) % N\n        else:\n            flag = [sum(seq1) >= N, sum(seq2) >= N]\n            cLen = [seq1[0] if not flag[0] else max(N - seq1[1], seq1[0] - (N - seq1[1])), seq2[0] if not flag[1] else max(N - seq2[1], seq2[0] - (N - seq2[1]))]\n            print(min(max(cLen), K))", "(n, q, k) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\nl = len(a)\ns = input()\nif n <= 1000 and q <= 3000:\n    for x in s:\n        if x == '!':\n            b = a.pop(l - 1)\n            a = [b] + a\n        else:\n            f = 0\n            z = 0\n            a = a + [0]\n            for x in a:\n                if x == 1:\n                    f += 1\n                else:\n                    if f >= k:\n                        z = k\n                        break\n                    if f > z:\n                        z = f\n                    f = 0\n            print(z)\n            a.pop(l)\nelse:\n    f = 0\n    z = 0\n    ub = 0\n    u = 0\n    a = a + [0]\n    for x in range(len(a)):\n        if a[x] == 1:\n            f += 1\n        else:\n            if f > z:\n                z = f\n                ub = x - 1\n            f = 0\n    f = 0\n    q1 = 0\n    z1 = 0\n    for x in range(len(a)):\n        if a[x] == 1:\n            f += 1\n        else:\n            if f > q1 and f < z:\n                z1 = f\n                q1 = f\n            f = 0\n    a.pop(l)\n    lb = ub + 1 - z\n    if z1 == 0:\n        a1 = a.count(1)\n        if a1 > z:\n            z1 = z\n    if z == l:\n        for x in s:\n            if x == '?':\n                print(min(k, z))\n    elif z == 0:\n        for x in s:\n            if x == '?':\n                print(0)\n    elif z == 1:\n        for x in s:\n            if x == '?':\n                print(1)\n    else:\n        q1 = 0\n        q2 = l - 1\n        f1 = 0\n        f2 = 0\n        secl = z1\n        if a[0] == 1 and a[l - 1] == 1:\n            while a[q1] != 0:\n                f1 += 1\n                q1 += 1\n            while a[q2] != 0:\n                f2 += 1\n                q2 -= 1\n            if f1 + f2 > z:\n                ub = f1 - 1\n                lb = l - f2\n                o = 0\n                z2 = 0\n                for t in range(ub + 1, lb):\n                    if a[t] == 1:\n                        o += 1\n                    elif o > z2:\n                        z2 = o\n                secl = z2\n                z = f1 + f2\n            elif f1 + f2 == z:\n                secl = z\n            elif f1 + f2 > z1:\n                secl = f1 + f2\n            else:\n                secl = z1\n        for x in s:\n            if x == '!':\n                ub += 1\n                lb += 1\n                if ub > l - 1:\n                    ub = 0\n                if lb > l - 1:\n                    lb = 0\n            elif lb > ub:\n                w1 = max(ub + 1, l - lb)\n                w2 = max(w1, secl)\n                if w2 > k:\n                    print(k)\n                else:\n                    print(w2)\n            else:\n                w1 = min(ub - lb + 1, k)\n                print(w1)", "(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\nqueR = input()\ntemp = 0\nsol = []\nfor i in range(n):\n    if arr[i] == 1 and temp == 0:\n        sol.append([i, 1])\n        temp = 1\n    elif arr[i] == 1:\n        sol[-1][1] += 1\n    else:\n        temp = 0\nif arr[0] == 1 and arr[-1] == 1 and (len(sol) > 1):\n    sol[-1][1] += sol[0][1]\n    sol.pop(0)\nsol = sorted(sol, key=lambda x: x[1])\nif sol:\n    p = sol[-1][1]\n    c = sol[-1][0]\n    v = None\nelse:\n    p = 0\n    c = 0\n    v = None\nif len(sol) > 1:\n    v = sol[-2][1]\nbi = 0\nfor i in range(q):\n    if queR[i] == '?':\n        if (c + bi) % n + p - 1 > n - 1:\n            e = n - (c + bi) % n\n            r = p - e\n            if v:\n                print(min(k, max(v, e, r)))\n            else:\n                print(min(k, max(e, r)))\n        else:\n            print(min(k, p))\n    else:\n        bi += 1", "from sys import stdin\n(n, q, k) = map(int, stdin.readline().split())\nays = list(map(int, stdin.readline().split()))\nqs = stdin.readline().strip()\nasum = sum(ays)\nif asum == n or asum < 2 or k < 2:\n    out = [min(asum, k)] * qs.count('?')\nelse:\n    out = []\n    run = []\n    last = 0\n    for (ix, a) in enumerate(ays):\n        if a == 1:\n            if last == 0:\n                run.append([1, ix])\n            else:\n                run[-1][0] += 1\n        last = a\n    mark = 0\n    if last == 1 and ays[0] == 1:\n        (mark, _) = run.pop()\n        run[0][0] += mark\n    run.sort(reverse=True)\n    (main, st) = run[0]\n    if st > 0:\n        mark = 0\n    en = st + main\n    if len(run) > 1:\n        spare = run[1][0]\n    else:\n        spare = 0\n    mk = min(main, k)\n    if spare >= k or main >= 2 * k or main == spare:\n        out = [mk] * qs.count('?')\n    else:\n        ans = [mk] * n\n        st += main - mk\n        en -= main - mk\n        while st < en - 1:\n            mk -= mk > spare\n            st += 1\n            en -= 1\n            ans[st] = mk\n            ans[en] = mk\n        for c in qs:\n            if c == '!':\n                mark -= 1\n                if mark < 0:\n                    mark += n\n            else:\n                out.append(ans[mark])\nprint('\\n'.join(map(str, out)))", "from collections import deque\n\ndef find(l):\n    (ans, sans) = (0, 0)\n    i = -1\n    (index, sindex) = (-1, -1)\n    for (x, y) in l:\n        i += 1\n        if y == 1:\n            if x > ans:\n                (sans, sindex) = (ans, index)\n                (ans, index) = (x, i)\n            elif x > sans:\n                (sans, sindex) = (x, i)\n    return (ans, index, sans, sindex)\n(n, q, k) = map(int, input().split(' '))\ns = 1\nstr = input().split(' ')\npr = int(str[0])\nl = []\nfor i in str[1:]:\n    p = int(i)\n    if p == pr:\n        s += 1\n    else:\n        l.append([s, pr])\n        s = 1\n    pr = p\nif s != 0:\n    l.append([s, p])\ns = input()\nln = len(l)\nif ln == 1 and l[0][1] == 0:\n    k = s.count('?')\n    print(' '.join(['0'] * k))\nelse:\n    l = deque(l)\n    (ans, index, sans, sindex) = find(l)\n    find = 0\n    for i in range(q):\n        if s[i] == '!':\n            z = l[ln - 1][1]\n            a = l[0][1]\n            if z == a:\n                l[ln - 1][0] -= 1\n                l[0][0] += 1\n                ans = l[index][0]\n                sans = l[sindex][0]\n                if z == 1:\n                    if ans < l[0][0]:\n                        (sans, sindex) = (ans, index)\n                        (ans, index) = (l[0][0], 0)\n                    elif l[0][0] > sans:\n                        (sans, sindex) = (l[0][0], 0)\n                if l[ln - 1][0] <= 0:\n                    l.pop()\n                    ln = ln - 1\n            else:\n                l[ln - 1][0] -= 1\n                l.appendleft([1, z])\n                ln = ln + 1\n                index += 1\n                sindex += 1\n                if z == 1:\n                    if ans < l[0][0]:\n                        (sans, sindex) = (ans, index)\n                        (ans, index) = (l[0][0], 0)\n                    elif l[0][0] > sans:\n                        (sans, sindex) = (l[0][0], 0)\n                if l[ln - 1][0] <= 0:\n                    l.pop()\n                    ln = ln - 1\n            ans = l[index][0]\n            sans = l[sindex][0]\n            if ans < sans:\n                (ans, sans) = (sans, ans)\n                (index, sindex) = (sindex, index)\n        elif n <= 1000:\n            for (x, y) in l:\n                if y == 1:\n                    ans = max(ans, x)\n            print(min(ans, k))\n        else:\n            print(min(ans, k))", "def prevIndex(cur, n):\n    return (cur - 1) % n\n\ndef nextIndex(cur, n):\n    return (cur + 1) % n\n\ndef absIndex(cur, n):\n    return cur % n\n\ndef do(s):\n    s = [int(s[i]) for i in range(0, len(s), 2)]\n    print(s)\n    for i in range(len(s) - 1):\n        s.insert(0, s.pop())\n        print(s)\ndic = {'item': 0, 'max_left': 1, 'max_cont_left': 2, 'max_right': 3, 'max_cont_right': 4, 'ans': 5}\n\ndef prepareForBattle(s):\n    s = [int(s[i]) for i in range(0, len(s), 2)]\n    (start, end) = (int(0), int(len(s)) - 1)\n    s1 = [[0 for i in range(len(s))] for j in range(6)]\n    s1[0] = s\n    s = s1\n    isConnected = s[dic['item']][start] == 1 and s[dic['item']][end] == 1\n    globalMax = 0\n    localMax = 0\n    for i in range(start, end + 1, 1):\n        if s[dic['item']][i] == 0:\n            localMax = 0\n        else:\n            localMax += 1\n            globalMax = max(globalMax, localMax)\n        s[dic['max_left']][i] = globalMax\n        s[dic['max_cont_left']][i] = localMax\n    if isConnected:\n        cur = start\n        while s[dic['item']][cur] == 1:\n            s[dic['max_cont_left']][cur] = s[dic['max_cont_left']][prevIndex(cur, end + 1)] + 1\n            cur = nextIndex(cur, end + 1)\n    globalMax = 0\n    localMax = 0\n    for i in range(end, start - 1, -1):\n        if s[dic['item']][i] == 0:\n            localMax = 0\n        else:\n            localMax += 1\n            globalMax = max(globalMax, localMax)\n        s[dic['max_right']][i] = globalMax\n        s[dic['max_cont_right']][i] = localMax\n    if isConnected:\n        cur = end\n        while s[dic['item']][cur] == 1:\n            s[dic['max_cont_right']][cur] = s[dic['max_cont_right']][nextIndex(cur, end + 1)] + 1\n            cur = prevIndex(cur, end + 1)\n    if isConnected:\n        indexOfFirstContStarted = start + s[dic['max_cont_right']][start] - 1\n        indexOfLastMaxContStarted = end - s[dic['max_cont_left']][end] + 1\n        fixedStartComponent = s[dic['max_cont_right']][start]\n        fixedEndComponent = s[dic['max_cont_left']][end]\n    for i in range(end, start - 1, -1):\n        startComponent = 0\n        endComponent = 0\n        if isConnected:\n            startComponent = fixedStartComponent\n            if i < indexOfFirstContStarted:\n                startComponentAfterIndex = s[dic['max_cont_right']][nextIndex(i, end + 1)]\n                startComponent = fixedStartComponent - startComponentAfterIndex\n            endComponent = fixedEndComponent\n            if i >= indexOfLastMaxContStarted:\n                endComponentUptoIndex = s[dic['max_cont_left']][i]\n                endComponent = fixedEndComponent - endComponentUptoIndex\n        s[dic['ans']][i] = max(s[dic['max_left']][i], s[dic['max_right']][nextIndex(i, end + 1)], startComponent + endComponent)\n    return s\n(n, q, k) = map(int, input().strip().split(' '))\ns = input()\nexp = input()\nans = []\nif s.count('0') == 0:\n    ans = [n for i in range(n)]\nelse:\n    ans = prepareForBattle(s)[dic['ans']]\nindex = 0\nfor x in exp:\n    if x is '!':\n        index += 1\n    else:\n        print(min(ans[n - absIndex(index, n) - 1], k))", "def prevIndex(cur, n):\n    return (cur - 1) % n\n\ndef nextIndex(cur, n):\n    return (cur + 1) % n\n\ndef absIndex(cur, n):\n    return cur % n\n\ndef do(s):\n    s = [int(s[i]) for i in range(0, len(s), 2)]\n    print(s)\n    for i in range(len(s) - 1):\n        s.insert(0, s.pop())\n        print(s)\ndic = {'item': 0, 'max_left': 1, 'max_cont_left': 2, 'max_right': 3, 'max_cont_right': 4, 'ans': 5}\n\ndef prepareForBattle(s):\n    s = [int(s[i]) for i in range(0, len(s), 2)]\n    (start, end) = (int(0), int(len(s)) - 1)\n    s1 = [[0 for i in range(len(s))] for j in range(6)]\n    s1[0] = s\n    s = s1\n    globalMax = 0\n    localMax = 0\n    for i in range(start, end + 1, 1):\n        if s[dic['item']][i] == 0:\n            localMax = 0\n        else:\n            localMax += 1\n            globalMax = max(globalMax, localMax)\n        s[dic['max_left']][i] = globalMax\n        s[dic['max_cont_left']][i] = localMax\n    if s[dic['item']][start] == 1 and s[dic['item']][end] == 1:\n        cur = start\n        while s[dic['item']][cur] == 1:\n            s[dic['max_cont_left']][cur] = s[dic['max_cont_left']][prevIndex(cur, end + 1)] + 1\n            cur = nextIndex(cur, end + 1)\n    globalMax = 0\n    localMax = 0\n    for i in range(end, start - 1, -1):\n        if s[dic['item']][i] == 0:\n            localMax = 0\n        else:\n            localMax += 1\n            globalMax = max(globalMax, localMax)\n        s[dic['max_right']][i] = globalMax\n        s[dic['max_cont_right']][i] = localMax\n    if s[dic['item']][start] == 1 and s[dic['item']][end] == 1:\n        cur = end\n        while s[dic['item']][cur] == 1:\n            s[dic['max_cont_right']][cur] = s[dic['max_cont_right']][nextIndex(cur, end + 1)] + 1\n            cur = prevIndex(cur, end + 1)\n    s[dic['ans']][end] = s[dic['max_left']][end]\n    for i in range(end - 1, start - 1, -1):\n        startComponent = 0\n        endComponent = 0\n        if s[dic['item']][start] == 1 and s[dic['item']][end] == 1:\n            startComponent = s[dic['max_cont_right']][start]\n            indexOfFirstContStarted = start + s[dic['max_cont_right']][start] - 1\n            if i < indexOfFirstContStarted:\n                startComponent -= s[dic['max_cont_right']][nextIndex(i, end + 1)]\n            indexOfLastMaxContStarted = end - s[dic['max_cont_left']][end] + 1\n            endComponent = s[dic['max_cont_left']][end]\n            if i >= indexOfLastMaxContStarted:\n                endComponent -= s[dic['max_cont_left']][i]\n        s[dic['ans']][i] = max(s[dic['max_left']][i], s[dic['max_right']][nextIndex(i, end + 1)], startComponent + endComponent)\n    return s\n(n, q, k) = map(int, input().strip().split(' '))\ns = input()\nexp = input()\nans = []\nif s.count('0') == 0:\n    ans = [n for i in range(n)]\nelse:\n    ans = prepareForBattle(s)[dic['ans']]\nindex = 0\nfor x in exp:\n    if x is '!':\n        index += 1\n    else:\n        print(min(ans[n - absIndex(index, n) - 1], k))", "from sys import stdin, stdout\nbest1 = (0, 0)\nbest2 = (0, 0)\ncur = [0, 0]\nstart = 0\nend = 0\ntokens = stdin.readline().split()\nn = int(tokens[0])\nq = int(tokens[1])\nk = int(tokens[2])\ndigits = stdin.readline().split()\nfor i in range(n):\n    if digits[i] == '1':\n        cur[1] += 1\n        if cur[1] > best1[1]:\n            if cur[0] != best1[0]:\n                best2 = best1\n            best1 = (cur[0], cur[1])\n        elif cur[1] > best2[1]:\n            best2 = (cur[0], cur[1])\n    if digits[i] == '0':\n        cur[0] = i + 1\n        cur[1] = 0\n    if cur[0] == 0:\n        start = cur[1]\n    if cur[0] + cur[1] == n:\n        end = cur[1]\nidx = 0\nqueries = stdin.readline()\n\ndef largest(pair, idx):\n    t = 0\n    if idx > pair[0] and idx < pair[0] + pair[1]:\n        return max(idx - pair[0], pair[1] + pair[0] - idx)\n    return pair[1]\nfor c in queries:\n    if c == '!':\n        idx = (idx - 1 + n) % n\n    if c == '?':\n        res = 0\n        if best1[1] == n:\n            res = n\n        elif idx < start:\n            res = max(end + idx, start - idx)\n        elif idx > n - end:\n            res = max(start + n - idx, idx - n + end)\n        else:\n            res = start + end\n        res = max(res, largest(best1, idx))\n        res = max(res, largest(best2, idx))\n        res = min(res, k)\n        print(res)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\ns = input()\nar = []\ni = 0\nwhile i < n:\n    if a[i] == 0:\n        ar.append(0)\n        i += 1\n    elif a[i] == 1:\n        co = 0\n        while i < len(a) and a[i] == 1:\n            co += 1\n            i += 1\n        ar.append(co)\nans = [0] * n\nc = [0] * 1000021\nfor i in range(len(ar)):\n    if ar[i] != 0:\n        c[ar[i]] += 1\nans[0] = max(ar)\nma = ans[0]\nnn = len(ar)\nfor i in range(1, n):\n    if ar[nn - 1] == 0:\n        ar.pop(nn - 1)\n        ar.insert(0, 0)\n        ans[i] = ma\n    elif ar[nn - 1] > 0:\n        if ar[nn - 1] > 1:\n            if ar[0] == 0:\n                x = ar[nn - 1]\n                c[x] -= 1\n                c[x - 1] += 1\n                c[1] += 1\n                ar[nn - 1] -= 1\n                nn += 1\n                ar.insert(0, 1)\n            elif ar[0] > 0:\n                x = ar[nn - 1]\n                y = ar[0]\n                c[x] -= 1\n                c[y] -= 1\n                c[x - 1] += 1\n                c[y + 1] += 1\n                ar[nn - 1] -= 1\n                ar[0] += 1\n        elif ar[nn - 1] == 1:\n            if ar[0] == 0:\n                ar.pop()\n                ar.insert(0, 1)\n            elif ar[0] > 0:\n                x = ar[0]\n                c[x] -= 1\n                c[x + 1] += 1\n                c[1] -= 1\n                ar.pop()\n                ar[0] += 1\n                nn -= 1\n        if c[ma + 1] > 0:\n            ma = ma + 1\n        elif c[ma] > 0:\n            ma = ma\n        elif c[ma - 1] > 0:\n            ma = ma - 1\n        ans[i] = ma\nco = 0\nif len(ar) == 1:\n    for i in range(q):\n        if s[i] == '?':\n            print(min(k, ar[0]))\nelse:\n    for i in range(q):\n        if s[i] == '!':\n            co += 1\n        elif s[i] == '?':\n            print(min(k, ans[co % n]))", "(length, queries, minimum) = map(int, input().split())\narray = list(map(int, input().split()))\nstring = input()\npref = []\ni = 0\nwhile i < len(array):\n    if array[i] == 0:\n        pref.append(0)\n        i += 1\n    elif array[i] == 1:\n        count = 0\n        while i < len(array) and array[i] == 1:\n            count += 1\n            i += 1\n        pref.append(count)\nanswer = [0] * length\nfrequency = [0] * (length + length)\nfor i in range(len(pref)):\n    if pref[i] != 0:\n        frequency[pref[i]] += 1\nanswer[0] = max(pref)\nmaximum = max(pref)\nlength2 = len(pref)\nfor i in range(1, length):\n    if pref[length2 - 1] == 0:\n        pref.pop(length2 - 1)\n        pref.insert(0, 0)\n        answer[i] = maximum\n    elif pref[length2 - 1] > 0:\n        if pref[length2 - 1] > 1:\n            if pref[0] == 0:\n                x = pref[length2 - 1]\n                frequency[x] -= 1\n                frequency[x - 1] += 1\n                frequency[1] += 1\n                pref[length2 - 1] -= 1\n                length2 += 1\n                pref.insert(0, 1)\n            elif pref[0] > 0:\n                x = pref[length2 - 1]\n                y = pref[0]\n                frequency[x] -= 1\n                frequency[y] -= 1\n                frequency[x - 1] += 1\n                frequency[y + 1] += 1\n                pref[length2 - 1] -= 1\n                pref[0] += 1\n        elif pref[length2 - 1] == 1:\n            if pref[0] == 0:\n                pref.pop()\n                pref.insert(0, 1)\n            elif pref[0] > 0:\n                x = pref[0]\n                frequency[x] -= 1\n                frequency[x + 1] += 1\n                frequency[1] -= 1\n                pref.pop()\n                pref[0] += 1\n                length2 -= 1\n        if frequency[maximum + 1] > 0:\n            maximum = maximum + 1\n        elif frequency[maximum] > 0:\n            maximum = maximum\n        elif frequency[maximum - 1] > 0:\n            maximum = maximum - 1\n        answer[i] = maximum\nconti = 0\nif len(pref) == 1:\n    for i in range(queries):\n        if string[i] == '?':\n            print(min(minimum, pref[0]))\nelse:\n    for i in range(queries):\n        if string[i] == '!':\n            conti += 1\n        elif string[i] == '?':\n            print(min(minimum, answer[conti % length]))", "(n, q, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nc = list(input())\nle = c.count('?')\nif len(set(arr)) == 1 and arr[0] == 1:\n    if k >= n:\n        for i in range(le):\n            print(n)\n    else:\n        for i in range(le):\n            print(k)\nelif len(set(arr)) == 1 and arr[0] == 0:\n    for i in range(le):\n        print(0)\nelse:\n    a = [0] * (2 * n)\n    for i in range(n):\n        a[i] = arr[i]\n        a[i + n] = arr[i]\n    sol = [0] * n\n    shifts = 0\n    m = 0\n    arrStart = n\n    arrEnd = 2 * n - 1\n    maxStart = -1\n    maxEnd = -1\n    prevStart = -1\n    prevEnd = -1\n    tempStart = -1\n    tempEnd = -1\n    flag = 1\n    for i in range(2 * n - 1, n - 1, -1):\n        if a[i] == 1:\n            if flag:\n                tempEnd = i\n            tempStart = i\n            flag = 0\n        else:\n            if flag:\n                continue\n            if tempEnd - tempStart + 1 >= m:\n                m = tempEnd - tempStart + 1\n                maxStart = tempStart\n                maxEnd = tempEnd\n            elif prevEnd - prevStart + 1 >= tempEnd - tempStart + 1:\n                prevStart = tempStart\n                prevEnd = tempEnd\n            flag = 1\n    if flag == 0 and tempEnd - tempStart + 1 >= m:\n        m = tempEnd - tempStart + 1\n        maxStart = tempStart\n        maxEnd = tempEnd\n    if m < k:\n        sol[shifts] = m\n    else:\n        sol[shifts] = k\n    shifts += 1\n    arrStart = n - 1\n    while arrStart > 0:\n        arrEnd = arrStart + n - 1\n        if maxEnd == arrEnd + 1:\n            m -= 1\n            maxEnd -= 1\n            if prevEnd - prevStart + 1 >= m:\n                maxStart = prevStart\n                maxEnd = prevEnd\n                m = prevEnd - prevStart + 1\n        if a[arrStart] == 1:\n            if flag:\n                tempEnd = arrStart\n            tempStart = arrStart\n            flag = 0\n        else:\n            flag = 1\n        if tempEnd - tempStart + 1 >= m:\n            m = tempEnd - tempStart + 1\n            maxStart = tempStart\n            maxEnd = tempEnd\n        elif prevEnd - prevStart + 1 <= tempEnd - tempStart + 1:\n            prevStart = tempStart\n            prevEnd = tempEnd\n        if m < k:\n            sol[shifts] = m\n        else:\n            sol[shifts] = k\n        arrStart -= 1\n        shifts += 1\n    reqShift = 0\n    for i in range(q):\n        if c[i] == '?':\n            print(sol[reqShift])\n        else:\n            reqShift += 1\n        if reqShift == n:\n            reqShift = 0", "(n, q, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nc = list(input())\nle = c.count('?')\nif len(set(arr)) == 1 and arr[0] == 1:\n    if k >= n:\n        for i in range(le):\n            print(n)\n    else:\n        for i in range(le):\n            print(k)\nelif len(set(arr)) == 1 and arr[0] == 0:\n    for i in range(le):\n        print(0)\nelse:\n    a = [0] * (2 * n)\n    for i in range(n):\n        a[i] = arr[i]\n        a[i + n] = arr[i]\n    sol = [0] * n\n    shifts = 0\n    m = 0\n    arrStart = n\n    arrEnd = 2 * n - 1\n    maxStart = -1\n    maxEnd = -1\n    prevStart = -1\n    prevEnd = -1\n    tempStart = -1\n    tempEnd = -1\n    flag = 1\n    for i in range(2 * n - 1, n - 1, -1):\n        if a[i] == 1:\n            if flag:\n                tempEnd = i\n            tempStart = i\n            flag = 0\n        else:\n            if flag:\n                continue\n            if tempEnd - tempStart + 1 >= m:\n                m = tempEnd - tempStart + 1\n                maxStart = tempStart\n                maxEnd = tempEnd\n            elif prevEnd - prevStart + 1 >= tempEnd - tempStart + 1:\n                prevStart = tempStart\n                prevEnd = tempEnd\n            flag = 1\n    if flag == 0 and tempEnd - tempStart + 1 >= m:\n        m = tempEnd - tempStart + 1\n        maxStart = tempStart\n        maxEnd = tempEnd\n    if m < k:\n        sol[shifts] = m\n    else:\n        sol[shifts] = k\n    shifts += 1\n    arrStart = n - 1\n    while arrStart > 0:\n        arrEnd = arrStart + n - 1\n        if maxEnd == arrEnd + 1:\n            m -= 1\n            maxEnd -= 1\n            if prevEnd - prevStart + 1 >= m:\n                maxStart = prevStart\n                maxEnd = prevEnd\n                m = prevEnd - prevStart + 1\n        if a[arrStart] == 1:\n            if flag:\n                tempEnd = arrStart\n            tempStart = arrStart\n            flag = 0\n        else:\n            flag = 1\n        if tempEnd - tempStart + 1 >= m:\n            m = tempEnd - tempStart + 1\n            maxStart = tempStart\n            maxEnd = tempEnd\n        elif prevEnd - prevStart + 1 <= tempEnd - tempStart + 1:\n            prevStart = tempStart\n            prevEnd = tempEnd\n        if m < k:\n            sol[shifts] = m\n        else:\n            sol[shifts] = k\n        arrStart -= 1\n        shifts += 1\n    reqShift = 0\n    for i in range(q):\n        if c[i] == '?':\n            print(sol[reqShift])\n        else:\n            reqShift += 1\n        if reqShift == n:\n            reqShift = 0", "import heapq as hq\nimport collections\n(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\ns = input().strip()\nd = {}\nh = []\nqq = []\ncount = 0\nflag = 0\nfor i in range(n):\n    if arr[i] == 0:\n        if flag == 1:\n            qq.append(count)\n            if count in d.keys():\n                d[count] += 1\n            else:\n                d[count] = 1\n                hq.heappush(h, -count)\n            flag = 0\n            count = 0\n    else:\n        count += 1\n        if flag == 0:\n            flag = 1\nif flag == 1:\n    qq.append(count)\n    if count in d.keys():\n        d[count] += 1\n    else:\n        d[count] = 1\n        hq.heappush(h, -count)\nqueue = collections.deque(qq)\nmod = n\ncurr = n - 1\nflag = arr[0]\nhq.heapify(h)\nfor i in range(q):\n    if s[i] == '!':\n        if arr[curr] == 1:\n            if len(queue) != 0:\n                c = queue.pop()\n                d[c] -= 1\n                if d[c] == 0:\n                    del d[c]\n                if c != 1:\n                    queue.append(c - 1)\n                    if c - 1 in d.keys():\n                        d[c - 1] += 1\n                    else:\n                        d[c - 1] = 1\n                        hq.heappush(h, -(c - 1))\n                if flag == 0:\n                    c = 0\n                else:\n                    c = queue.popleft()\n                    d[c] -= 1\n                    if d[c] == 0:\n                        del d[c]\n                queue.appendleft(c + 1)\n                flag = 1\n                if c + 1 in d.keys():\n                    d[c + 1] += 1\n                else:\n                    d[c + 1] = 1\n                    hq.heappush(h, -(c + 1))\n        else:\n            flag = 0\n        curr = (curr - 1) % mod\n    elif h == []:\n        print(0)\n    else:\n        while True:\n            p = -hq.heappop(h)\n            if p in d.keys():\n                print(min(p, k))\n                hq.heappush(h, -p)\n                break\n            elif h == []:\n                print(0)\n                break", "from collections import deque\n(N, Q, K) = map(int, input().split())\narrZO = list(map(int, input().split()))\narrZO = arrZO[::-1]\narrZO.append(0)\nqueries = input()\nsegmentQueues = deque()\ntempSeg = 0\nfor i in range(len(arrZO)):\n    if arrZO[i] == 1:\n        tempSeg += 1\n    elif tempSeg != 0:\n        while segmentQueues and segmentQueues[-1][1] <= tempSeg:\n            segmentQueues.pop()\n        segmentQueues.append([i - tempSeg, tempSeg])\n        tempSeg = 0\narrZO.pop()\narrZO = arrZO + arrZO + arrZO\ncounter = 0\nfor i in range(Q):\n    if queries[i] == '?':\n        if segmentQueues:\n            print(min(segmentQueues[0][1], K))\n        else:\n            print(0)\n    elif queries[i] == '!':\n        if segmentQueues and segmentQueues[0][0] == counter:\n            tSeg = segmentQueues.popleft()\n            tSeg[1] -= 1\n            tSeg[0] += 1\n            if segmentQueues and segmentQueues[0][1] < tSeg[1]:\n                segmentQueues.appendleft(tSeg)\n            elif len(segmentQueues) == 0 and tSeg[1] > 0:\n                segmentQueues.append(tSeg)\n        if arrZO[N + counter] == 1:\n            if segmentQueues and segmentQueues[-1][0] + segmentQueues[-1][1] == N + counter:\n                tSeg = segmentQueues.pop()\n                tSeg[1] += 1\n                while segmentQueues and tSeg[1] >= segmentQueues[-1][1]:\n                    segmentQueues.pop()\n                segmentQueues.append(tSeg)\n            else:\n                while segmentQueues and segmentQueues[-1][1] < 2:\n                    segmentQueues.pop()\n                segmentQueues.append([N + counter, 1])\n        counter += 1", "(n, q, k) = [int(x) for x in list(input().split())]\nseq = [x for x in list(input().split())]\nstring = list(input())\nseq += seq\n\ndef findMax():\n    arr = []\n    if '1' not in seq:\n        return [[], [], [], [], []]\n    if '0' in seq:\n        end = n\n        if seq[0] == '1' and seq[n - 1] == '1':\n            end = n + seq.index('0') + 1\n        c = 0\n        a = []\n        for i in range(0, end):\n            if seq[i] == '1':\n                if c == 0:\n                    a.append(i)\n                c += 1\n            else:\n                if c > 0:\n                    a.append(i)\n                    arr.append(a)\n                    a = []\n                c = 0\n        if seq[end - 1] == '1':\n            a.append(n)\n            arr.append(a)\n        arr = sorted(arr, key=lambda x: x[1] - x[0])\n        while len(arr) > 2:\n            arr.pop(0)\n        return arr\n    else:\n        return [[], [], [], [], [], []]\n\ndef getLen(a, b):\n    x = a[0] if a[0] > b[0] else b[0]\n    y = a[1] if a[1] < b[1] else b[1]\n    return y - x\n\ndef finder(ind):\n    l = len(lengths)\n    if l > 0 and l < 3:\n        result = 0\n        for val in lengths:\n            temp1 = getLen([val[0], val[1]], [ind, ind + n])\n            temp2 = getLen([val[0] + n, val[1] + n], [ind, ind + n])\n            result = max(result, max(temp1, temp2))\n        print(min(result, k))\n    elif l == 5:\n        print(0)\n    elif l == 6:\n        print(min(n, k))\nlengths = findMax()\ncounter = 0\nfor s in string:\n    if s == '!':\n        counter += 1\n        if counter >= n:\n            counter -= n\n    else:\n        finder(n - counter)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nf = 0\nif a.count(1) == n:\n    f = 1\nelse:\n    l1 = a.index(0)\n    l2 = a[::-1].index(0)\n    m1 = 0\n    m2 = 0\n    i = l1\n    i1 = 0\n    i2 = 0\n    f2 = 0\n    while i < n - l2:\n        if a[i] == 1:\n            j = i\n            f2 = 1\n            while j < n - l2 and a[j] == 1:\n                j += 1\n            if j - i > m1:\n                m2 = m1\n                i2 = i1\n                m1 = j - i\n                i1 = i\n            elif j - i > m2:\n                m2 = j - i\n                i2 = i\n            i = j\n        i += 1\ns = input()\nr = 0\nfor i in s:\n    if i == '?':\n        if f == 1:\n            m = n\n        elif r <= l2:\n            m = max(m1, m2, l1 + r, l2 - r)\n        elif f2 == 1 and r > n - (m1 + i1) and (r < n - i1):\n            m = max(l1 + l2, m2, n - i1 - r, r - (n - i1 - m1))\n        elif r > n - l1:\n            m = max(m1, m2, r - (n - l1), l1 + l2 - (r - (n - l1)))\n        else:\n            m = max(m1, l1 + l2)\n        if m > k:\n            print(k)\n        else:\n            print(m)\n    else:\n        r += 1\n        r = r % n", "def solve(segment, pointer):\n    (length, left, right) = segment\n    intersects = False\n    (left_rim, right_rem) = (-1, -1)\n    if left <= right:\n        intersects = True if pointer >= left and pointer <= right else False\n        if intersects == True:\n            right_rem = right - pointer + 1\n            left_rim = length - right_rem\n    else:\n        intersects = True if pointer >= left or pointer <= right else False\n        if intersects == True:\n            if pointer >= left:\n                left_rim = pointer - left\n                right_rem = length - left_rim\n            else:\n                right_rem = right - pointer + 1\n                left_rim = length - right_rem\n    return (intersects, left_rim, right_rem)\n(total_lenght, m, k) = map(int, input().split())\narr = [int(x) for x in input().split()]\nquery = input()\n(l, r) = (-1, -1)\ndictionery = {}\nfor (index, e) in enumerate(arr):\n    r = index\n    if e == 1:\n        if l in dictionery:\n            dictionery[l] += 1\n        else:\n            dictionery[l] = 1\n    else:\n        l = index\nif arr[0] == arr[-1] and arr[0] == 1:\n    if len(dictionery) not in [0, 1]:\n        dictionery[l] += dictionery[-1]\n        del dictionery[-1]\nremember = []\nfor key in dictionery:\n    a = key + 1\n    b = key + dictionery[key]\n    remember.append((b - a + 1, a, b % total_lenght))\nremember.sort(reverse=True)\nif len(remember) == 0:\n    for ch in query:\n        if ch != '!':\n            print(0)\nelse:\n    ptr = 0\n    for ch in query:\n        if ch == '!':\n            ptr -= 1\n            if ptr == -1:\n                ptr = total_lenght - 1\n        elif ch == '?':\n            (ans, a, b) = solve(remember[0], ptr)\n            if ans == False:\n                ans = remember[0][0]\n            elif len(remember) > 1:\n                ans = max([remember[1][0], a, b])\n            else:\n                ans = max(a, b)\n            print(ans if ans <= k else k)", "def getMaxLength(arr):\n    count = 0\n    arr = np.append(arr, 0)\n    ls = []\n    for i in arr:\n        if i == 0:\n            if count != 0:\n                ls.append(count)\n            count = 0\n        else:\n            count += 1\n    return ls\nimport numpy as np\nlst = np.array([int(x) for x in input().split()])\nk = int(lst[2])\nval = np.array([int(x) for x in input().split()])\nquery = input()\nn = len(val)\nif np.array_equal(np.zeros_like(val), val):\n    count = query.count('?')\n    for i in range(1, count + 1):\n        print(0)\nelse:\n    ar1 = np.empty(n)\n    ar1[::2] = 1\n    ar1[1::2] = 0\n    if np.array_equal(ar1, val):\n        count = query.count('?')\n        for i in range(1, count + 1):\n            print(1)\n    else:\n        ar1[::2] = 0\n        ar1[1::2] = 1\n        if np.array_equal(ar1, val):\n            count = query.count('?')\n            for i in range(1, count + 1):\n                print(1)\n        else:\n            start = val[0]\n            end = val[n - 1]\n            index_start = 0\n            index_end = n - 1\n            ls = getMaxLength(val)\n            a = np.array(ls)\n            maximum = np.argmax(a)\n            maxi = a[maximum]\n            siz = np.size(a)\n            for i in query:\n                if i == '!':\n                    start = val[index_start]\n                    end = val[index_end]\n                    index_start = index_start - 1\n                    index_end = index_end - 1\n                    if index_end < 0:\n                        index_end = n - 1\n                    if index_start < 0:\n                        index_start = n - 1\n                    if start == end:\n                        if start == 1:\n                            a[0] = a[0] + 1\n                            a[np.size(a) - 1] = a[np.size(a) - 1] - 1\n                            if a[np.size(a) - 1] == 0:\n                                a = np.delete(a, np.size(a) - 1)\n                            if maximum > siz - 2:\n                                maximum = np.argmax(a)\n                    elif end == 1:\n                        a = np.append([1], a)\n                        a[np.size(a) - 1] = a[np.size(a) - 1] - 1\n                        if a[np.size(a) - 1] == 0:\n                            a = np.delete(a, np.size(a) - 1)\n                        maximum = maximum + 1\n                        if maximum > siz - 2:\n                            maximum = np.argmax(a)\n                    if a[maximum] < a[0]:\n                        maximum = 0\n                    maxi = a[maximum]\n                elif maxi > k:\n                    print(k)\n                else:\n                    print(maxi)", "supplementary_array = [i % 7 for i in range(98)]\n(n, q, k) = map(int, input().split())\na = [int(o) for o in input().split()]\nui = a.count(0)\nuo = a.count(1)\nghy = [0] * (n + 1)\na.extend(ghy)\ns = input()\ns = list(s)\nfor i in range(n):\n    a[n + i] = a[i]\nif ui == n:\n    for i in range(s.count('?')):\n        print('0')\nelif uo == n:\n    for i in range(s.count('?')):\n        print(min(k, n))\nelse:\n    first_first = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    first_first = sorted(first_first)\n    second_second = [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    the_index_of_maximum_element = 0\n    x = 1\n    b = 2\n    l = n\n    r = 2 * n - 1\n    i = 2 * n - 1\n    while i >= n:\n        if a[i] == 0:\n            break\n        else:\n            r -= 1\n            l -= 1\n        i -= 1\n    yi_yi_ya = l\n    oh_yi_ye = l\n    counter_of_elements = 0\n    for i in range(l, r + 1):\n        if a[i] == 0:\n            if counter_of_elements >= first_first[x]:\n                if first_first[x] != 0:\n                    second_second[x] = first_first[x]\n                    second_second[the_index_of_maximum_element] = first_first[the_index_of_maximum_element]\n                    second_second[b] = first_first[b]\n                    supplementary_array = sorted(supplementary_array)\n                    (supplementary_array[0], supplementary_array[-1]) = (supplementary_array[-1], supplementary_array[0])\n                first_first[x] = counter_of_elements\n                first_first[the_index_of_maximum_element] = yi_yi_ya\n                first_first[b] = i - 1\n                (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n            elif counter_of_elements > second_second[x]:\n                second_second[x] = counter_of_elements\n                second_second[the_index_of_maximum_element] = yi_yi_ya\n                second_second[b] = i - 1\n                (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n            counter_of_elements = 0\n            yi_yi_ya = 0\n        else:\n            if counter_of_elements == 0:\n                yi_yi_ya = i\n            counter_of_elements += 1\n    index_of_left_of_first = n\n    index_of_right_of_first = 2 * (n - 1)\n    for i in range(q):\n        if s[i] == '?':\n            final_value_of_result = 0\n            if index_of_left_of_first >= first_first[the_index_of_maximum_element] and index_of_left_of_first <= first_first[b]:\n                (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n                (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n                z = (first_first[the_index_of_maximum_element] + first_first[b]) // 2\n                if index_of_left_of_first <= z:\n                    p = first_first[b] - index_of_left_of_first + 1\n                    (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n                    (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n                else:\n                    p = index_of_left_of_first - first_first[the_index_of_maximum_element]\n                    (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n                    (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n                if p > second_second[x]:\n                    final_value_of_result = p\n                    (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n                    (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n                else:\n                    final_value_of_result = second_second[x]\n                    (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n                    (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n            elif index_of_left_of_first + n >= first_first[the_index_of_maximum_element] and index_of_left_of_first + n <= first_first[b]:\n                z = (first_first[the_index_of_maximum_element] + first_first[b]) // 2\n                (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n                (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n                if index_of_left_of_first + n <= z:\n                    p = first_first[b] - (index_of_left_of_first + n) + 1\n                    (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n                    (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n                else:\n                    p = index_of_left_of_first + n - first_first[the_index_of_maximum_element]\n                if p > second_second[x]:\n                    final_value_of_result = p\n                else:\n                    final_value_of_result = second_second[x]\n                    (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n                    (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])\n            else:\n                final_value_of_result = first_first[x]\n            print(min(final_value_of_result, k))\n        else:\n            index_of_left_of_first -= 1\n            index_of_right_of_first -= 1\n            if index_of_left_of_first == 0:\n                index_of_left_of_first = n\n                index_of_right_of_first = 2 * (n - 1)\n            (supplementary_array[87], supplementary_array[25]) = (supplementary_array[87], supplementary_array[45])\n            (supplementary_array[8], supplementary_array[45]) = (supplementary_array[45], supplementary_array[8])", "(n, q, k) = map(int, input().strip().split(' '))\nlist1 = list(map(int, input().strip().split(' ')))\nstr1 = str(input())\nstart = 0\ncount = 0\ncount = 0\narr = []\nlist2 = []\nfor x in range(n):\n    if list1[x] == 1:\n        if count == 0:\n            start = x\n            count = 1\n        if x == n - 1:\n            list2 = list2 + [start, n]\n    elif count == 1:\n        end = x - 1\n        count = 0\n        arr.append([start, end])\nfor x in arr:\n    z = x[1] - x[0] + 1\n    x.append(z)\nlist3 = sorted(arr, key=lambda x: x[2], reverse=True)\nfor x in list3:\n    if len(list2) <= 5:\n        if x[0] not in list2:\n            list2.append(x[0])\n            list2.append(x[1] + 1)\nlist2 = sorted(list2)\nfor r in str1:\n    if r == '!':\n        if len(list2) > 0:\n            list2 = [x + 1 for x in list2]\n            if list2[-1] > n:\n                list2.insert(0, 1)\n                list2.insert(0, 0)\n                list2[-1] = list2[-1] - 1\n            list4 = [list2[0]]\n            for z in range(1, len(list2)):\n                if list4[-1] != list2[z]:\n                    list4.append(list2[z])\n                else:\n                    list4.pop()\n            list2 = list4\n    else:\n        count = 0\n        x = 0\n        while x < len(list2):\n            count = max(count, list2[x + 1] - list2[x])\n            x = x + 2\n        if count > k:\n            print(k)\n        else:\n            print(count)", "(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nq = list(input())\nif a.count(1) > 0:\n    flag = 0\n    c = 0\n    b = []\n    for i in range(n):\n        if a[i] == 1:\n            c += 1\n            flag = 1\n        elif flag == 1:\n            b.append(c)\n            c = 0\n            flag = 0\n    if flag == 1:\n        b.append(c)\n    flag = a[0]\n    v = [min(max(b), k)]\n    for i in range(n - 1):\n        temp = a[(n - i - 1) % n]\n        if temp == 0:\n            flag = 0\n            v.append(v[-1])\n        else:\n            b[-1] -= 1\n            if flag == 1:\n                b[0] += 1\n            else:\n                b.insert(0, 1)\n            if b[-1] + 1 == v[-1]:\n                v.append(min(max(b), k))\n            elif b[0] > v[-1]:\n                v.append(min(b[0], k))\n            else:\n                v.append(v[-1])\n            if b[-1] == 0:\n                del b[-1]\n            flag = 1\n    j = 0\n    for i in q:\n        if i == '?':\n            print(v[j])\n        else:\n            j = (j + 1) % n\nelse:\n    for i in q:\n        if i == '?':\n            print(0)", "(n, q, k) = [int(x) for x in input().split()]\ns = [int(x) for x in input().split()]\n(b, t, l, r, p) = ([], 0, 0, 0, s[0])\nif s[0] == 1:\n    t = 1\nfor i in range(1, n):\n    if s[i] == 1 and s[i] == p:\n        t += 1\n        r += 1\n    else:\n        if t > 0:\n            b.append([t, l, r])\n        if s[i] == 1:\n            (t, l, r) = (1, i, i)\n        else:\n            t = 0\n    p = s[i]\nif t > 0:\n    b.append([t, l, r])\nif s[0] == s[n - 1] and s[0] == 1:\n    b[0][0] += b[len(b) - 1][0]\n    b[0][1] = b[len(b) - 1][1]\n    if len(b) > 1:\n        b.pop()\nb.sort(reverse=True)\nq = input()\nfor i in q:\n    if i == '!' and len(b) > 0:\n        b[0][1] = (b[0][1] + 1) % n\n        b[0][2] = (b[0][2] + 1) % n\n    elif i == '?':\n        if len(b) > 0:\n            if b[0][2] < b[0][1]:\n                if len(b) > 1:\n                    print(min(k, max(b[1][0], n - b[0][1], b[0][2] + 1)))\n                else:\n                    print(min(k, max(n - b[0][1], b[0][2] + 1)))\n            else:\n                print(min(k, b[0][0]))\n        else:\n            print(0)", "from operator import itemgetter\n(n, a, k) = (int(i) for i in input().split())\narr = [int(i) for i in input().split()]\nt = input()\ncounts = []\n(sum1, sum0) = (0, 0)\nfor bit in arr:\n    if bit == 1:\n        sum1 += 1\n        if sum0 < 0:\n            counts.append(sum0)\n            sum0 = 0\n    if bit == 0:\n        if sum1 > 0:\n            counts.append(sum1)\n            sum1 = 0\n        sum0 -= 1\nif sum0 < 0:\n    counts.append(sum0)\nif sum1 > 0:\n    counts.append(sum1)\n(lenC, ind, flag, oldans, countleng) = (0, -1, True, -1, -1)\nfor c in t:\n    if c == '!':\n        lenC = len(counts) - 1\n        if ind == lenC or ind == 0:\n            flag = True\n        if counts[lenC] > 0:\n            counts[lenC] -= 1\n            if counts[lenC] == 0:\n                counts.pop()\n            if counts[0] > 0:\n                counts[0] += 1\n            else:\n                counts.insert(0, 1)\n                ind += 1\n        else:\n            counts[lenC] += 1\n            if counts[lenC] == 0:\n                counts.pop()\n            if counts[0] <= 0:\n                counts[0] -= 1\n            else:\n                counts.insert(0, -1)\n                ind += 1\n        lenC = len(counts) - 1\n        if counts[ind] < counts[0] and counts[0] <= k:\n            ind = 0\n            oldans = counts[0]\n        elif counts[ind] < counts[lenC] and counts[lenC] <= k:\n            ind = lenC\n            oldans = counts[lenC]\n    elif ind == -1 or flag:\n        a = [[counts[i], i] for i in range(len(counts)) if counts[i] > 0]\n        if a != []:\n            flag = False\n            res = max(a, key=itemgetter(0))\n            if res[0] > k:\n                flag = True\n                res[0] = k\n            (oldans, ind) = (res[0], res[1])\n            print(res[0])\n        else:\n            (oldans, ind, flag) = (0, -1, True)\n            print(0)\n    else:\n        print(counts[ind])", "from operator import itemgetter\n(n, a, k) = (int(i) for i in input().split())\narr = [int(i) for i in input().split()]\nt = input()\ncounts = []\n(sum1, sum0) = (0, 0)\nfor bit in arr:\n    if bit == 1:\n        sum1 += 1\n        if sum0 < 0:\n            counts.append(sum0)\n            sum0 = 0\n    if bit == 0:\n        if sum1 > 0:\n            counts.append(sum1)\n            sum1 = 0\n        sum0 -= 1\nif sum0 < 0:\n    counts.append(sum0)\nif sum1 > 0:\n    counts.append(sum1)\nlenC = 0\nind = -1\nflag = True\noldans = -1\ncountsleng = -1\nfor c in t:\n    if c == '!':\n        lenC = len(counts) - 1\n        if ind == lenC or ind == 0:\n            flag = True\n        if counts[lenC] > 0:\n            counts[lenC] -= 1\n            if counts[lenC] == 0:\n                counts.pop()\n            if counts[0] > 0:\n                counts[0] += 1\n            else:\n                counts.insert(0, 1)\n                ind += 1\n        else:\n            counts[lenC] += 1\n            if counts[lenC] == 0:\n                counts.pop()\n            if counts[0] <= 0:\n                counts[0] -= 1\n            else:\n                counts.insert(0, -1)\n                ind += 1\n        if counts[ind] < counts[0] and counts[0] <= k:\n            flag = True\n        elif counts[ind] < counts[len(counts) - 1] and counts[len(counts) - 1] <= k:\n            flag = True\n    elif ind == -1 or flag:\n        a = [[counts[i], i] for i in range(len(counts)) if counts[i] > 0]\n        if a != []:\n            flag = False\n            res = max(a, key=itemgetter(0))\n            if res[0] > k:\n                flag = True\n                res[0] = k\n            ind = res[1]\n            print(res[0])\n            oldans = res[0]\n        else:\n            ind = -1\n            flag = True\n            print(0)\n            oldans = 0\n    else:\n        print(counts[ind])", "def find_sequences_indexes_lengths(n, values):\n    index = 0\n    start_index = -1\n    indexes_lengths = []\n    for value in values:\n        if value == '1':\n            if start_index == -1:\n                start_index = index\n        elif start_index != -1:\n            indexes_lengths.append((start_index, index, index - start_index))\n            start_index = -1\n        index += 1\n    if start_index != -1:\n        indexes_lengths.append((start_index, index, index - start_index))\n    return indexes_lengths\n\ndef find_two_longest_sequences(n, values, sequences):\n    if len(sequences) == 0:\n        return []\n    if len(sequences) > 1 and values[0] == '1' and (values[-1] == '1'):\n        start_seq = sequences[0]\n        end_seq = sequences[-1]\n        new_seq = ((n - end_seq[0]) * -1, start_seq[1], end_seq[2] + start_seq[2])\n        sequences = [new_seq] + sequences[1:-1]\n    sequences_sorted = sorted(sequences, key=lambda x: x[2], reverse=True)\n    if len(sequences_sorted) > 1:\n        return [sequences_sorted[0], sequences_sorted[1]]\n    return [sequences_sorted[0]]\n\ndef rotate_sequences(n, sequences, rotate):\n    if rotate == 0 or len(sequences) == 0:\n        return sequences\n    for index in range(len(sequences)):\n        (start, end, length) = sequences[index]\n        start += rotate\n        end += rotate\n        if end > n:\n            end = end - n\n            start = start - n\n        sequences[index] = (start, end, length)\n    return sequences\n\ndef get_sequence_max_length(seq):\n    if seq[0] < 0:\n        return max(abs(seq[0]), seq[2] + seq[0])\n    return seq[2]\n\ndef get_longest_length(sequences):\n    if len(sequences) == 0:\n        return 0\n    if len(sequences) == 1:\n        return get_sequence_max_length(sequences[0])\n    seq1 = sequences[0]\n    seq2 = sequences[1]\n    return max(get_sequence_max_length(seq1), get_sequence_max_length(seq2))\n(n, q, k) = map(int, input().split(' '))\nvalues = input().split(' ')\nqueries = input()\nnb_rotations = 0\n(start_index, length) = (None, None)\nsequences = find_sequences_indexes_lengths(n, values)\nlongest_sub_sequences = find_two_longest_sequences(n, values, sequences)\nfor index in range(q):\n    query = queries[index]\n    if query == '?':\n        nb_rotations = nb_rotations % n\n        longest_sub_sequences = rotate_sequences(n, longest_sub_sequences, nb_rotations)\n        print(min(k, get_longest_length(longest_sub_sequences)))\n        nb_rotations = 0\n    elif query == '!':\n        nb_rotations += 1", "import os\nimport math\nimport collections\n(n, qu, z) = map(int, input().split())\nl = list(map(int, input().split()))\nstring = input()\nif n == 1:\n    for i in string:\n        if i == '?':\n            print(1) if l[0] == 1 else print(0)\nelif n == 2:\n    ccnt = 0\n    for i in range(n):\n        if l[i] == 1:\n            ccnt += 1\n    if ccnt == 2:\n        for i in string:\n            if i == '?':\n                print(ccnt) if ccnt <= z else print(z)\n    if ccnt == 0:\n        for i in string:\n            if i == '?':\n                print(0)\n    if ccnt == 1:\n        for i in string:\n            if i == '!':\n                (l[0], l[1]) = (l[1], [0])\n            else:\n                print(1)\nelse:\n    b = [0, [0, 0]]\n    count = 0\n    s = -1\n    for i in range(len(l)):\n        if l[i] == 1:\n            count += 1\n            if s == -1:\n                s = i\n        else:\n            if count != 0:\n                e = i\n                b = [count, [s, e - 1]]\n            break\n    if count != 0 and b[0] == 0:\n        b = [count, [0, len(l) - 1]]\n    j = i + 1\n    if j < len(l):\n        x = []\n        count = 0\n        (s, e) = (0, 0)\n        for i in range(j, len(l)):\n            if l[i] == 1:\n                count += 1\n                if s == 0:\n                    s = i\n            else:\n                if count != 0:\n                    e = i\n                    x.append([count, [s, e - 1]])\n                    (s, e) = (0, 0)\n                count = 0\n        if count != 0:\n            x.append([count, [s, len(l) - 1]])\n        len_x = len(x)\n        if b == 0 and len_x == 0:\n            for i in string:\n                if i == '?':\n                    print(0)\n        if len_x == 0:\n            (ww1, ww2) = ([0, [0, 0]], [0, [0, 0]])\n        elif len_x == 1:\n            ww1 = x[0]\n            ww2 = [0, [0, 0]]\n        elif len_x >= 2:\n            x = sorted(x, reverse=True)\n            ww1 = x[0]\n            ww2 = x[1]\n        last = n - 1\n        k = n - 1\n        for i in string:\n            if i == '!':\n                if l[k] == 0 and l[(k + 1) % n] == 0:\n                    ww1[1][0] += 1\n                    ww1[1][1] += 1\n                    ww2[1][0] += 1\n                    ww2[1][1] += 1\n                elif l[k] == 0 and l[(k + 1) % n] == 1:\n                    if b[0] > ww1[0]:\n                        if ww1[0] > ww2[0]:\n                            ww2 = ww1\n                            ww1 = b\n                            b = [0, [0, 0]]\n                        else:\n                            ww1 = b\n                            b = [0, [0, 0]]\n                    elif b[0] > ww2[0]:\n                        ww2 = b\n                        b = [0, [0, 0]]\n                    else:\n                        b = [0, [0, 0]]\n                    ww1[1][0] += 1\n                    ww1[1][1] += 1\n                    ww2[1][0] += 1\n                    ww2[1][1] += 1\n                elif l[k] == 1 and l[(k + 1) % n] == 0:\n                    b = [1, [0, 0]]\n                    if last >= ww1[1][0] and last <= ww1[1][1]:\n                        ww1[0] -= 1\n                        if ww1[0] == 0:\n                            ww1[1][0] = 0\n                            ww1[1][1] = 0\n                        else:\n                            ww1[1][0] += 1\n                        ww2[1][0] += 1\n                        ww2[1][1] += 1\n                    elif last >= ww2[1][0] and last <= ww2[1][1]:\n                        ww2[0] -= 1\n                        if ww2[0] == 0:\n                            ww2[1][0] = 0\n                            ww2[1][1] = 0\n                        else:\n                            ww2[1][0] += 1\n                        ww1[1][0] += 1\n                        ww1[1][1] += 1\n                    else:\n                        ww1[1][0] += 1\n                        ww1[1][1] += 1\n                        ww2[1][0] += 1\n                        ww2[1][1] += 1\n                elif l[k] == 1 and l[(k + 1) % n] == 1:\n                    b[0] += 1\n                    b[1][1] += 1\n                    if last >= ww1[1][0] and last <= ww1[1][1]:\n                        ww1[0] -= 1\n                        if ww1[0] == 0:\n                            ww1[1][0] = 0\n                            ww1[1][1] = 0\n                        else:\n                            ww1[1][0] += 1\n                        ww2[1][0] += 1\n                        ww2[1][1] += 1\n                    elif last >= ww2[1][0] and last <= ww2[1][1]:\n                        ww2[0] -= 1\n                        if ww2[0] == 0:\n                            ww2[1][0] = 0\n                            ww2[1][1] = 0\n                        else:\n                            ww2[1][0] += 1\n                        ww1[1][0] += 1\n                        ww1[1][1] += 1\n                    else:\n                        ww1[1][0] += 1\n                        ww1[1][1] += 1\n                        ww2[1][0] += 1\n                        ww2[1][1] += 1\n                k -= 1\n                if k < 0:\n                    k = n - 1\n            else:\n                M = max(b[0], ww1[0], ww2[0])\n                if M <= z:\n                    print(M)\n                else:\n                    print(z)\n    elif b[0] == n:\n        for i in string:\n            if i == '?':\n                if b[0] <= z:\n                    print(b[0])\n                else:\n                    print(z)\n    else:\n        last = n - 1\n        b = b[0]\n        beg = b\n        for i in string:\n            if i == '!':\n                if l[last] == 1 and l[(last + 1) % n] == 0:\n                    b = 1\n                    beg -= 1\n                    last -= 1\n                elif l[last] == 1 and l[(last + 1) % n] == 1:\n                    b += 1\n                    beg -= 1\n                    last -= 1\n                elif l[last] == 0 and l[(last + 1) % n] == 1:\n                    b = 0\n                    last -= 1\n                else:\n                    last -= 1\n                if last < 0:\n                    last = n - 1\n            elif max(b, beg) <= z:\n                print(max(b, beg))\n            else:\n                print(z)", "(n, q, k) = map(int, input().split())\narr = list(map(int, input().split()))\nstring = input()\ndictionary = {}\ndictionary[n] = 0\ncount = 0\nmax_count = 0\nfor var in range(n):\n    dictionary[var] = 0\n    if arr[var] == 1:\n        count += 1\n    else:\n        if count != 0:\n            arr[var - count] = count\n            arr[var - 1] = count\n            if count not in dictionary:\n                dictionary[count] = 1\n            else:\n                dictionary[count] += 1\n            max_count = max(max_count, count)\n        count = 0\nif count != 0:\n    arr[-count] = count\n    arr[-1] = count\n    dictionary[count] = dictionary[count] + 1\n    max_count = max(max_count, count)\ntemp = 0\nright = -1\nleft = 0\nanother_dict = {}\nwhile left != -1 * n + 1:\n    another_dict[temp] = min(max_count, k)\n    temp += 1\n    right -= 1\n    left -= 1\n    if arr[right + 1] >= 1:\n        arr[right] = arr[right + 1] - 1\n        dictionary[arr[right + 1]] -= 1\n        if dictionary[max_count] == 0:\n            max_count -= 1\n        arr[(right - arr[right] + 1) % n] = arr[right]\n        dictionary[arr[right]] += 1\n        if arr[left + 1]:\n            arr[left] = arr[left + 1] + 1\n            dictionary[arr[left + 1]] -= 1\n            arr[left + arr[left] - 1] = arr[left]\n            dictionary[arr[left]] = dictionary[arr[left]] + 1\n            max_count = max(max_count, arr[left])\n        else:\n            dictionary[1] += 1\n            arr[left] = 1\ncount = 0\nanother_dict[n - 1] = min(max_count, k)\nfor i in range(len(string)):\n    if string[i] == '!':\n        count = (count + 1) % n\n    else:\n        print(another_dict[count])", "from collections import deque\n(n, q, k) = map(int, input().split())\na = deque(map(int, input().split()))\ns = list(input())\nlengths = deque()\nc = flag = 0\nfor x in range(n):\n    if a[x] == 0:\n        if c > 0:\n            lengths.append(c)\n        c = 0\n        lengths.append(0)\n    else:\n        flag = 1\n        c += 1\n        if x == n - 1:\n            lengths.append(c)\nl = len(lengths)\nif l == 1 or flag == 0:\n    for i in s:\n        if i == '?':\n            print(lengths[0] if lengths[0] < k else k)\nelse:\n    m = max(lengths)\n    l_temp = [z for z in lengths]\n    l_temp.remove(m)\n    sm = max(l_temp)\n    for i in s:\n        if i == '!':\n            if a[n - 1] == 1:\n                if lengths[l - 1] == m:\n                    m -= 1\n                    if sm > m:\n                        m = sm\n                elif lengths[0] + 1 == m:\n                    sm = m\n                lengths[l - 1] -= 1\n                if lengths[l - 1] == 0:\n                    lengths.pop()\n                    l -= 1\n                if a[0] == 0:\n                    lengths.append(1)\n                    lengths.rotate()\n                    l += 1\n                else:\n                    lengths[0] += 1\n            else:\n                lengths.rotate()\n            a.rotate()\n            if lengths[0] > m:\n                m = lengths[0]\n        if i == '?':\n            if m >= k:\n                print(k)\n            else:\n                print(m)", "import sys\n\ndef _int():\n    return int(sys.stdin.readline())\n\ndef _ints():\n    return map(int, sys.stdin.readline().split())\n\ndef _int_arr():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef _str():\n    return sys.stdin.readline().strip('\\n')\n\ndef _str_arr():\n    return sys.stdin.readline().split()\n\nclass Node(object):\n\n    def __init__(self, val, count, nxt, prev):\n        self.val = val\n        self.count = count\n        self.nxt = nxt\n        self.prev = prev\n\n    def describe(self):\n        pass\n\ndef shift(arr, s, e):\n    if e is None:\n        return (s, e, arr)\n    if s.val == e.val:\n        if e.count == 1:\n            s.count += 1\n            node = e.prev\n            node.nxt = s\n            s.prev = node\n            if s.val == 1:\n                arr = replace_count(arr, s.count - 1, s.count)\n            return (s, node, arr)\n        else:\n            s.count += 1\n            e.count -= 1\n            if s.val == 1:\n                arr = replace_count(arr, old_count=s.count - 1, new_count=s.count)\n                arr = replace_count(arr, old_count=e.count + 1, new_count=e.count)\n            return (s, e, arr)\n    if s.val == 1 and e.val == 0:\n        if e.count == 1:\n            return (e, e.prev, arr)\n        else:\n            e.count -= 1\n            node = Node(0, 1, s, e)\n            s.prev = node\n            e.nxt = node\n            return (node, e, arr)\n    if s.val == 0 and e.val == 1:\n        if e.count == 1:\n            return (e, e.prev, arr)\n        else:\n            e.count -= 1\n            node = Node(1, 1, s, e)\n            s.prev = node\n            e.nxt = node\n            arr = add_count(arr, 1)\n            arr = replace_count(arr, e.count + 1, e.count)\n            return (node, e, arr)\n\ndef tree_arr(s, e):\n    _tree = []\n    if s.nxt is None:\n        _tree.append([s.val, s.count])\n        return _tree\n    i_node = s\n    while i_node is not None and i_node != e:\n        _tree.append([i_node.val, i_node.count])\n        i_node = i_node.nxt\n    if i_node is not None:\n        _tree.append([i_node.val, i_node.count])\n    return _tree\n\ndef add_count(arr, count):\n    for i in range(0, 5):\n        if arr[i] < count:\n            arr[i] = count\n            arr = sorted(arr)\n            break\n    return arr\n\ndef replace_count(arr, old_count, new_count):\n    for i in range(0, 5):\n        if arr[i] == old_count:\n            arr[i] = new_count\n            arr = sorted(arr)\n            break\n    return arr\n\ndef run():\n    (_n, _q, k) = _ints()\n    a = _int_arr()\n    q = _str()\n    q = [c for c in q]\n    n = len(a)\n    max_arr = [0, 0, 0, 0, 0]\n    start_node = None\n    end_node = None\n    prev_node = None\n    count = 0\n    counting_z = False if a[0] == 1 else True\n    for i in range(n):\n        if counting_z:\n            if a[i] == 1:\n                node = Node(0, count, None, prev_node)\n                if prev_node is not None:\n                    prev_node.nxt = node\n                if start_node is None:\n                    start_node = node\n                prev_node = node\n                prev_node.describe()\n                counting_z = False\n                count = 1\n            else:\n                count += 1\n        elif a[i] == 1:\n            count += 1\n        else:\n            node = Node(1, count, None, prev_node)\n            if prev_node is not None:\n                prev_node.nxt = node\n            if start_node is None:\n                start_node = node\n            prev_node = node\n            prev_node.describe()\n            max_arr = add_count(max_arr, count)\n            counting_z = True\n            count = 1\n    val = 0 if counting_z else 1\n    if start_node is None:\n        if val == 1:\n            max_arr = add_count(max_arr, count)\n        start_node = Node(val, count, None, None)\n        start_node.nxt = None\n        start_node.prev = None\n        start_node.describe()\n    else:\n        if val == 1:\n            max_arr = add_count(max_arr, count)\n        end_node = Node(val, count, start_node, prev_node)\n        prev_node.nxt = end_node\n        start_node.prev = end_node\n        end_node.describe()\n    q_max = max_arr[4]\n    for _q in q:\n        if _q == '!':\n            (start_node, end_node, max_arr) = shift(max_arr, start_node, end_node)\n            q_max = max_arr[4]\n        else:\n            print(min(q_max, k))\nrun()", "Zeroes = {0: []}\npossLengths = []\ncornerArr = []\nmaxPossLen = 0\ncase_0 = False\ncase_1 = False\ncase_2 = False\ncase_3 = False\ncurrMaxLen = 0\n(N, Q, K) = map(int, input().split())\nseq = [int(_) for _ in input().split()]\nqueries = list(input())\npattern = []\n\ndef shift(A):\n    B = []\n    B.append(A[len(A) - 1])\n    for i in range(len(A) - 1):\n        B.append(A[i])\n    return B\n\ndef cornerPattern(maxLen):\n    counter = maxLen\n    for i in range(maxLen // 2):\n        cornerArr.append(counter - i - 1)\n    counter = cornerArr[maxLen // 2 - 1]\n    if not maxLen % 2:\n        for i in range(maxLen // 2 - 1):\n            cornerArr.append(counter + i + 1)\n    else:\n        for i in range(maxLen // 2):\n            cornerArr.append(counter + i)\n\ndef maxSeqO1(arr):\n    maxLength = []\n    length = 1\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            if arr[i] == 1 and length != 0:\n                maxLength.append(length)\n        elif arr[i] == arr[i + 1] and i != len(arr) - 1:\n            if arr[i] == 1:\n                length += 1\n        else:\n            maxLength.append(length)\n            length = 1\n    return max(maxLength)\n\ndef checkMaxIndex(givenLen):\n    indMax = possLengths.index(givenLen)\n    if case_0:\n        return Zeroes[0][indMax + 1]\n    if case_1:\n        if indMax == len(possLengths) - 1:\n            return N\n        return Zeroes[0][indMax + 1]\n    if case_2:\n        if indMax == len(possLengths) - 1:\n            return maxPossLen\n        return Zeroes[0][indMax + 1]\n    if case_3:\n        if indMax == len(possLengths) - 2:\n            return N + possLengths[len(possLengths) - 1][0]\n        return Zeroes[0][indMax + 1]\n    return Zeroes[0][indMax + 1]\nif N <= 10 ** 3 and Q <= 3 * 10 ** 3:\n    for i in queries:\n        if i == '!':\n            seq = shift(seq)\n        else:\n            temp = maxSeqO1(seq)\n            finAns = min(temp, K)\n            print(finAns)\nelif not seq.count(1):\n    for i in range(queries.count('?')):\n        print('0')\nelif not seq.count(0):\n    for i in range(queries.count('?')):\n        print(min(K, N))\nelif seq.count(0) == 1:\n    ind0 = seq.index(0)\n    for i in queries:\n        left = ind0\n        right = N - ind0 - 1\n        if i == '!':\n            ind0 = (ind0 + 1) % N\n        else:\n            finAns = max(left, right)\n            if finAns > K:\n                print(K)\n            else:\n                print(finAns)\nelse:\n    if seq[0] == 0 and seq[N - 1] == 0:\n        case_0 = True\n    elif seq[0] == 0 and seq[N - 1] == 1:\n        case_1 = True\n    elif seq[0] == 1 and seq[N - 1] == 0:\n        case_2 = True\n    else:\n        case_3 = True\n    for i in range(N):\n        if seq[i] is 0:\n            Zeroes[0].append(i)\n    for i in range(len(Zeroes[0]) - 1):\n        possLengths.append(Zeroes[0][i + 1] - Zeroes[0][i] - 1)\n    if case_1:\n        possLengths.append(N - Zeroes[0][len(Zeroes[0]) - 1] - 1)\n    elif case_2:\n        possLengths.append(Zeroes[0][0])\n    elif case_3:\n        right = N - Zeroes[0][len(Zeroes[0]) - 1] - 1\n        left = Zeroes[0][0]\n        possLengths.append(left + right)\n        maxPossLen = max(possLengths)\n        possLengths.append([left, right])\n    if not case_3:\n        maxPossLen = max(possLengths)\n    if maxPossLen == 1:\n        for i in range(queries.count('?')):\n            print('1')\n    else:\n        rotation = 0\n        maxPossRot = N - maxPossLen\n        indOfMax = checkMaxIndex(maxPossLen)\n        cornerPattern(maxPossLen)\n        possLengths.remove(maxPossLen)\n        currPossRot = N - indOfMax\n        finAns = min(maxPossLen, K)\n        if currPossRot < 0:\n            rightt = maxPossLen + currPossRot\n            for i in range(rightt):\n                pattern.append(cornerArr[abs(currPossRot) + i - 1])\n            for i in range(maxPossRot + 1):\n                pattern.append(maxPossLen)\n            for i in range(abs(currPossRot) - 1):\n                pattern.append(cornerArr[i])\n        else:\n            for i in range(currPossRot + 1):\n                pattern.append(maxPossLen)\n            for i in range(len(cornerArr)):\n                pattern.append(cornerArr[i])\n            for i in range(maxPossRot - currPossRot):\n                pattern.append(maxPossLen)\n            if not case_3:\n                currMaxLen = max(possLengths)\n            else:\n                currMaxLen = max(possLengths[:len(possLengths) - 1])\n        for i in queries:\n            if i == '!':\n                rotation += 1\n            else:\n                ind = rotation % N\n                temp = max(currMaxLen, pattern[ind])\n                finAns = min(K, temp)\n                print(finAns)", "Zeroes = {0: []}\npossLengths = []\ncornerArr = []\nmaxPossLen = 0\ncase_0 = False\ncase_1 = False\ncase_2 = False\ncase_3 = False\ncurrMaxLen = 0\n(N, Q, K) = map(int, input().split())\nseq = [int(_) for _ in input().split()]\nqueries = list(input())\npattern = []\n\ndef shift(A):\n    B = []\n    B.append(A[len(A) - 1])\n    for i in range(len(A) - 1):\n        B.append(A[i])\n    return B\n\ndef cornerPattern(maxLen):\n    counter = maxLen\n    for i in range(maxLen // 2):\n        cornerArr.append(counter - i - 1)\n    counter = cornerArr[maxLen // 2 - 1]\n    if not maxLen % 2:\n        for i in range(maxLen // 2 - 1):\n            cornerArr.append(counter + i + 1)\n    else:\n        for i in range(maxLen // 2):\n            cornerArr.append(counter + i)\n\ndef maxSeqO1(arr):\n    maxLength = []\n    length = 1\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            if arr[i] == 1 and length != 0:\n                maxLength.append(length)\n        elif arr[i] == arr[i + 1] and i != len(arr) - 1:\n            if arr[i] == 1:\n                length += 1\n        else:\n            maxLength.append(length)\n            length = 1\n    return max(maxLength)\n\ndef checkMaxIndex(givenLen):\n    indMax = possLengths.index(givenLen)\n    if case_0:\n        return Zeroes[0][indMax + 1]\n    if case_1:\n        if indMax == len(possLengths) - 1:\n            return N\n        return Zeroes[0][indMax + 1]\n    if case_2:\n        if indMax == len(possLengths) - 1:\n            return maxPossLen\n        return Zeroes[0][indMax + 1]\n    if case_3:\n        if indMax == len(possLengths) - 2:\n            return N + possLengths[len(possLengths) - 1][0]\n        return Zeroes[0][indMax + 1]\n    return Zeroes[0][indMax + 1]\nif N <= 10 ** 3 and Q <= 3 * 10 ** 3:\n    for i in queries:\n        if i == '!':\n            seq = shift(seq)\n        else:\n            temp = maxSeqO1(seq)\n            finAns = min(temp, K)\n            print(finAns)\nelif not seq.count(1):\n    for i in range(queries.count('?')):\n        print('0')\nelif not seq.count(0):\n    for i in range(queries.count('?')):\n        print(min(K, N))\nelif seq.count(0) == 1:\n    ind0 = seq.index(0)\n    for i in queries:\n        left = ind0\n        right = N - ind0 - 1\n        if i == '!':\n            ind0 = (ind0 + 1) % N\n        else:\n            finAns = max(left, right)\n            if finAns > K:\n                print(K)\n            else:\n                print(finAns)\nelse:\n    if seq[0] == 0 and seq[N - 1] == 0:\n        case_0 = True\n    elif seq[0] == 0 and seq[N - 1] == 1:\n        case_1 = True\n    elif seq[0] == 1 and seq[N - 1] == 0:\n        case_2 = True\n    else:\n        case_3 = True\n    for i in range(N):\n        if seq[i] is 0:\n            Zeroes[0].append(i)\n    for i in range(len(Zeroes[0]) - 1):\n        possLengths.append(Zeroes[0][i + 1] - Zeroes[0][i] - 1)\n    if case_1:\n        possLengths.append(N - Zeroes[0][len(Zeroes[0]) - 1] - 1)\n    elif case_2:\n        possLengths.append(Zeroes[0][0])\n    elif case_3:\n        right = N - Zeroes[0][len(Zeroes[0]) - 1] - 1\n        left = Zeroes[0][0]\n        possLengths.append(left + right)\n        maxPossLen = max(possLengths)\n        possLengths.append([left, right])\n    if not case_3:\n        maxPossLen = max(possLengths)\n    if maxPossLen == 1:\n        for i in range(queries.count('?')):\n            print('1')\n    else:\n        rotation = 0\n        maxPossRot = N - maxPossLen\n        indOfMax = checkMaxIndex(maxPossLen)\n        cornerPattern(maxPossLen)\n        possLengths.remove(maxPossLen)\n        currPossRot = N - indOfMax\n        finAns = min(maxPossLen, K)\n        if currPossRot < 0:\n            rightt = maxPossLen + currPossRot\n            for i in range(rightt):\n                pattern.append(cornerArr[abs(currPossRot) + i - 1])\n            for i in range(maxPossRot + 1):\n                pattern.append(maxPossLen)\n            for i in range(abs(currPossRot) - 1):\n                pattern.append(cornerArr[i])\n        else:\n            for i in range(currPossRot + 1):\n                pattern.append(maxPossLen)\n            for i in range(len(cornerArr)):\n                pattern.append(cornerArr[i])\n            for i in range(maxPossRot - currPossRot):\n                pattern.append(maxPossLen)\n            if not case_3:\n                currMaxLen = max(possLengths)\n            else:\n                currMaxLen = max(possLengths[:len(possLengths) - 1])\n        for i in queries:\n            if i == '!':\n                rotation += 1\n            else:\n                ind = rotation % N\n                temp = max(currMaxLen, pattern[ind])\n                finAns = min(K, temp)\n                print(finAns)", "def l(b):\n    e = []\n    i = 0\n    j = 0\n    while True:\n        d = 0\n        if b[i] == 1:\n            for j in range(i, a[0]):\n                if b[j] != 1 or j == a[0] - 1:\n                    if j == a[0] - 1 and b[j] == 1:\n                        e.append(d + 1)\n                    else:\n                        e.append(d)\n                    i = j + 1\n                    break\n                else:\n                    d = d + 1\n        else:\n            i = i + 1\n        if j == a[0] - 1 or i == a[0]:\n            break\n    return e\na = list(map(int, input().split()))\nb = list(map(int, input().split()))\nc = input()\nf = l(b)\nn = c.count('?')\nif a[1] > 50000:\n    if len(f) == 0:\n        for i in range(n):\n            print(0)\n    else:\n        right = a[0] - 1\n        left = 0\n        if len(f) >= 2:\n            so = sorted(f)\n            m1 = vm = so[-1]\n            m2 = so[-2]\n            i1 = f.index(m1)\n            i2 = f.index(m2)\n        else:\n            m1 = vm = f[0]\n            m2 = 0\n            i1 = 0\n            i2 = 'a'\n        for i in range(len(c)):\n            if c[i] == '?':\n                n = n - 1\n                if vm >= a[2]:\n                    print(a[2])\n                else:\n                    print(vm)\n            elif b[right] == 0:\n                right = right - 1\n                left = left - 1\n            elif b[right] == 1:\n                f[-1] = f[-1] - 1\n                right = right - 1\n                if f[-1] == 0:\n                    if i1 == len(f) - 1:\n                        i1 = 0\n                        m1 = f[0]\n                    elif i2 == len(f) - 1:\n                        i2 = 0\n                        m2 = f[0]\n                    del f[-1]\n                    if len(f) == 1:\n                        m1 = f[0]\n                        i1 = 0\n                        m2 = 0\n                        i2 = 'a'\n                if b[left] == 1:\n                    f[0] = f[0] + 1\n                else:\n                    f.insert(0, 1)\n                    if len(f) == 2:\n                        m2 = 1\n                        i2 = 0\n                    else:\n                        i1 = i1 + 1\n                        i2 = i2 + 1\n                left = left - 1\n            if right == -1:\n                right = a[0] - 1\n            if left == -a[0]:\n                left = 0\n            if len(f) == 2:\n                vm = max(f[0], f[1])\n            elif len(f) == 1:\n                vm = f[0]\n            elif i1 == len(f) - 1:\n                if i2 == 'a':\n                    vm = max(f[-1], f[0])\n                else:\n                    vm = max(f[-1], f[0], f[i2])\n            elif i2 == len(f) - 1:\n                vm = max(f[-1], f[0], f[i1])\n            else:\n                vm = f[i1]\n            if n == 0:\n                break\nelif len(f) == 0:\n    for i in range(n):\n        print(0)\nelse:\n    right = a[0] - 1\n    left = 0\n    for i in range(len(c)):\n        if c[i] == '?':\n            n = n - 1\n            v = sorted(f)\n            if v[-1] >= a[2]:\n                print(a[2])\n            else:\n                print(v[-1])\n        elif b[right] == 0:\n            right = right - 1\n            left = left - 1\n        elif b[right] == 1:\n            f[-1] = f[-1] - 1\n            right = right - 1\n            if f[-1] == 0:\n                del f[-1]\n            if b[left] == 1:\n                f[0] = f[0] + 1\n            else:\n                f.insert(0, 1)\n            left = left - 1\n        if n == 0:\n            break\n        if right == -1:\n            right = a[0] - 1\n        if left == -a[0]:\n            left = 0", "(n, q, kinput) = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\ninputstr = str(input())\nd = []\ne = []\ni = 0\nlength = len(t)\nj = length - 1\nctr = 0\ntp = 0\ntp6 = 0\ntp9 = 0\ntp150 = 0\nfor f in range(length):\n    if t[f] == 1:\n        ctr = ctr + 1\nz5 = []\nfor i7 in range(n // 10008):\n    z5.append(n * i7)\nwaste10 = []\nfor i9 in range(n // 17895):\n    waste10.append(q * (2 * i9))\nif length >= 2:\n    if ctr != length:\n        while t[j] != 0:\n            j = j - 1\n        while t[i] != 0:\n            i = i + 1\nif i == 0 or j == length - 1:\n    a = -10000014\n    b = -15115454\n    k = 0\n    while k < length:\n        if t[k] == 1:\n            a = k\n            while k <= length - 1 and t[k] != 0:\n                k = k + 1\n            b = k - 1\n            pankti1 = b - a + 1\n            d.append(pankti1)\n            e.append([a, b])\n        k = k + 1\nif i != 0 and j != length - 1:\n    e.append([j + 1, i - 1])\n    pankti = length - j + i\n    d.append(pankti - 1)\n    a = -14848465879\n    b = -11545121488\n    k = i\n    while k < j + 1:\n        if t[k] == 1:\n            a = k\n            while k <= length - 1 and t[k] != 0:\n                k = k + 1\n            b = k - 1\n            pankti2 = b - a + 1\n            e.append([a, b])\n            d.append(pankti2)\n        k = k + 1\nu = -150\nv = -150\na = -150\nb = -150\nfor f in range(length):\n    if t[f] == 0:\n        tp = tp + 1\nif len(d) != 0:\n    maxcurrent = max(d)\n    z1 = d.index(maxcurrent)\n    goovadd = e.pop(z1)\n    goov = d.pop(z1)\n    (a, b) = goovadd\nfor f in range(length // 10000):\n    tp5 = 0\n    if t[f] == 0:\n        tp5 = tp5 + 1\nif len(d) != 0:\n    maxcurrent = max(d)\n    z2 = d.index(maxcurrent)\n    good2add = e.pop(z2)\n    good2 = d.pop(z2)\n    (u, v) = good2add\nfor i in range(len(inputstr)):\n    currentans1 = 0\n    currentans2 = 0\n    currentans3 = 0\n    if inputstr[i] == '!':\n        u5 = (u + 1) % n\n        v5 = (v + 1) % n\n        a5 = (a + 1) % n\n        b5 = (b + 1) % n\n        if u != -150 and v != -150:\n            u = u5\n            v = v5\n        if a != -150 and b != -150:\n            a = a5\n            b = b5\n        for f in range(length // 961):\n            if t[f] == 1:\n                tp150 = tp150 + 1\n    elif inputstr[i] == '?':\n        if b - a >= 0 and a != -150 and (b != -150):\n            currentans2 = b - a + 1\n            if u != -150:\n                if v != -150:\n                    if v - u >= 0:\n                        currentans3 = v - u + 1\n                    else:\n                        currentans1 = v + 1\n                        currentans3 = length - u\n        if b - a < 0:\n            currentans1 = b + 1\n            currentans2 = length - a\n            if u != -150:\n                if v != -150:\n                    currentans3 = v - u + 1\n        if ctr == length:\n            currentans1 = length\n        prefinalans = max(currentans1, currentans2)\n        prefinalans = max(prefinalans, currentans3)\n        for f in range(length // 509):\n            if t[f] == 0:\n                tp6 = tp6 + 1\n        if prefinalans <= kinput:\n            print(prefinalans)\n        else:\n            print(kinput)\nz = []\nfor i in range(n // 74787):\n    z.append(n * i)\nwaste = []\nfor i in range(n // 46987):\n    waste.append(q * (2 * i))", "x = [int(y) for y in input().split(' ')]\na = [int(y) for y in input().split(' ')]\ns = input()\nl = []\nc = 0\nm = 0\nd = {}\nd[x[0]] = 0\nfor j in range(0, x[0]):\n    d[j] = 0\n    if a[j]:\n        c = c + 1\n    else:\n        if c != 0:\n            a[j - 1] = c\n            a[j - c] = c\n            if c not in d:\n                d[c] = 1\n            else:\n                d[c] = d[c] + 1\n            m = max(m, c)\n        c = 0\nif c != 0:\n    a[-1] = c\n    a[-c] = c\n    d[c] = d[c] + 1\n    m = max(m, c)\nl = 0\nr = -1\np = {}\nu = 0\nwhile l != -x[0] + 1:\n    p[u] = min(m, x[2])\n    u = u + 1\n    l = l - 1\n    r = r - 1\n    if a[r + 1] >= 1:\n        a[r] = a[r + 1] - 1\n        d[a[r + 1]] = d[a[r + 1]] - 1\n        if d[m] == 0:\n            m = m - 1\n        a[(r - a[r] + 1) % x[0]] = a[r]\n        d[a[r]] = d[a[r]] + 1\n        if a[l + 1]:\n            d[a[l + 1]] = d[a[l + 1]] - 1\n            a[l] = a[l + 1] + 1\n            a[l + a[l] - 1] = a[l]\n            d[a[l]] = d[a[l]] + 1\n            m = max(m, a[l])\n        else:\n            a[l] = 1\n            d[1] = d[1] + 1\nc = 0\np[x[0] - 1] = min(m, x[2])\nfor j in range(0, len(s)):\n    if s[j] == '!':\n        c = (c + 1) % x[0]\n    else:\n        print(p[c])", "def func1(arr, n, k):\n    first = 0\n    i = 0\n    while i < n and arr[i]:\n        i += 1\n    first = i\n    if first != len(arr):\n        j = n - 1\n        last = 0\n        while j > -1 and arr[j]:\n            last += 1\n            j -= 1\n    else:\n        return (True, min(k, first), 0, 0)\n    high = first + last\n    secondH = 0\n    while i < j:\n        count = 0\n        while i < j and arr[i]:\n            count += 1\n            i += 1\n        if count > high:\n            secondH = high\n            high = count\n        elif count == high:\n            secondH = high\n        elif count > secondH:\n            secondH = count\n        i += 1\n    arr2 = arr * 2\n    indexF = []\n    indexF.append(first)\n    for i in range(n - 1, 0, -1):\n        if arr2[i]:\n            indexF.append(indexF[n - 1 - i] + 1)\n        else:\n            indexF.append(0)\n    lastF = 0\n    j = n\n    while j > 0 and arr2[j]:\n        lastF += 1\n        j -= 1\n    indexL = []\n    indexL.append(lastF)\n    for j in range(n + 1, 2 * n):\n        if arr2[j]:\n            indexL.append(indexL[j - (n + 1)] + 1)\n        else:\n            indexL.append(0)\n    indexL.reverse()\n    return (indexF, indexL, high, secondH)\n\ndef ans(arr, n, k, q, query):\n    (a, b, high, secondH) = func1(arr, n, k)\n    if a == True:\n        for i in range(0, q):\n            if query[i] == '?':\n                print(b)\n    else:\n        j = 0\n        for i in range(0, q):\n            if query[i] == '?':\n                if k <= secondH:\n                    print(k)\n                elif a[j % n] + b[j % n] == high:\n                    val = max(a[j % n], b[j % n])\n                    val = max(val, secondH)\n                    print(min(val, k))\n                else:\n                    print(min(high, k))\n            else:\n                j += 1\n\ndef func():\n    inp = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    query = input()\n    n = inp[0]\n    q = inp[1]\n    k = inp[2]\n    ans(arr, n, k, q, query)\nfunc()", "(n, q, k) = map(int, input().split())\nl = list(map(int, input().split()))\ns = str(input())\na = []\nb = []\nc = []\nf = 0\nfor i in range(n):\n    if l[i] == 1:\n        if f == 0:\n            a.append(i + 1)\n        if i == n - 1:\n            b.append(i + 1)\n        f += 1\n    else:\n        if f > 0:\n            b.append(i)\n        f = 0\nf = len(a)\nfor i in range(f):\n    c.append(b[i] - a[i] + 1)\nl1 = []\nl2 = []\nl3 = []\nif len(a) > 0:\n    if a[0] == 1:\n        l1.append(a[0])\n        l2.append(b[0])\n        l3.append(c[0])\n        a.remove(a[0])\n        b.remove(b[0])\n        c.remove(c[0])\nfor i in range(2):\n    if len(c) > 0:\n        t = c.index(max(c))\n        l1.append(a[t])\n        l2.append(b[t])\n        l3.append(c[t])\n        a.remove(a[t])\n        b.remove(b[t])\n        c.remove(c[t])\na = []\nb = []\nc = []\nfor i in range(len(l1)):\n    t = l1.index(min(l1))\n    a.append(l1[t])\n    b.append(l2[t])\n    c.append(l3[t])\n    l1.remove(l1[t])\n    l2.remove(l2[t])\n    l3.remove(l3[t])\nd = {}\nco = 0\nif len(c) != 0:\n    d[0] = k if max(c) > k else max(c)\nelse:\n    d[0] = 0\nif d[0] == 0:\n    for i in range(q):\n        if s[i] == '?':\n            print('0')\n    exit()\nfor i in range(q):\n    if s[i] == '!':\n        co += 1\n        if co % n not in d:\n            f = len(a)\n            for i in range(f):\n                a[i] += 1\n                b[i] += 1\n            if b[f - 1] == n + 1:\n                if a[0] == 2:\n                    a[0] -= 1\n                    c[0] += 1\n                else:\n                    a.insert(0, 1)\n                    f += 1\n                    c.insert(0, 1)\n                    b.insert(0, 1)\n                if a[f - 1] == n + 1:\n                    a.pop()\n                    b.pop()\n                    c.pop()\n                else:\n                    b[f - 1] -= 1\n                    c[f - 1] -= 1\n            d[co] = k if max(c) > k else max(c)\n    else:\n        print(d[co % n])", "(n, q, k1) = [int(i) for i in input().split()]\nt = [int(i) for i in input().split()]\nc1 = str(input())\nd = []\ne = []\ni = 0\nj = len(t) - 1\ncount = 0\nfor i1 in range(len(t)):\n    if t[i1] == 1:\n        count = count + 1\nif len(t) >= 2 and count != len(t):\n    while t[i] != 0:\n        i = i + 1\n    while t[j] != 0:\n        j = j - 1\nif i != 0 and j != len(t) - 1:\n    d.append(len(t) - 1 - j + i)\n    e.append([j + 1, i - 1])\n    a = -1\n    b = -1\n    k = i\n    while True:\n        if t[k] == 1:\n            a = k\n            while k <= len(t) - 1 and t[k] != 0:\n                k = k + 1\n            b = k - 1\n            d.append(b - a + 1)\n            e.append([a, b])\n        k = k + 1\n        if k >= j + 1:\n            break\nif i == 0 or j == len(t) - 1:\n    a = -1\n    b = -1\n    k = 0\n    while True:\n        if t[k] == 1:\n            a = k\n            while k <= len(t) - 1 and t[k] != 0:\n                k = k + 1\n            b = k - 1\n            d.append(b - a + 1)\n            e.append([a, b])\n        k = k + 1\n        if k >= len(t):\n            break\nc2 = -1\nd1 = -1\na = -1\nb = -1\nif len(d) != 0:\n    z1 = d.index(max(d))\n    max1 = d.pop(z1)\n    max1add = e.pop(z1)\n    a = max1add[0]\n    b = max1add[1]\nif len(d) != 0:\n    z2 = d.index(max(d))\n    max2 = d.pop(z2)\n    max2add = e.pop(z2)\n    c2 = max2add[0]\n    d1 = max2add[1]\nfor i in range(len(c1)):\n    ans1 = 0\n    ans2 = 0\n    ans3 = 0\n    anspre = 0\n    if c1[i] == '?':\n        if a == -1 and b == -1 and (c2 == -1) and (d1 == -1):\n            ans1 = 0\n            ans2 = 0\n            ans3 = 0\n        if b - a < 0:\n            ans1 = b + 1\n            ans2 = len(t) - a\n            ans3 = 0\n            if c2 != -1 and d1 != -1:\n                ans3 = d1 - c2 + 1\n        if b - a >= 0 and a != -1 and (b != -1):\n            ans3 = b - a + 1\n            if c2 != -1 and d1 != -1:\n                if d1 - c2 < 0:\n                    ans1 = d1 + 1\n                    ans2 = len(t) - c2\n                else:\n                    ans2 = d1 - c2 + 1\n                    ans1 = 0\n        if count == len(t):\n            ans1 = len(t)\n            ans2 = len(t)\n            ans3 = len(t)\n        anspre = max(ans1, ans2, ans3)\n        print(min(anspre, k1))\n    else:\n        if a != -1 and b != -1:\n            a = (a + 1) % n\n            b = (b + 1) % n\n        if c2 != -1 and d1 != -1:\n            c2 = (c2 + 1) % n\n            d1 = (d1 + 1) % n", "from collections import Counter, deque\n(N, Q, K) = map(int, input().split())\nA = list(map(int, input().split()))\nS = input()\n(a, c, m) = (deque(), 0, 0)\nm_count = Counter()\nfor i in range(N):\n    if A[i]:\n        c += 1\n    else:\n        if c:\n            a.append(c)\n            m = max(m, c)\n            m_count[c] += 1\n        c = 0\n        a.append(0)\n    if i == N - 1:\n        if c:\n            a.append(c)\n            m = max(m, c)\n            m_count[c] += 1\nfor i in range(Q):\n    if S[i] == '?':\n        print(min(m, K))\n    elif a[-1]:\n        if a[-1] == m and m_count[a[-1]] == 1:\n            m -= 1\n        m_count[a[-1]] -= 1\n        a[-1] -= 1\n        m_count[a[-1]] += 1\n        if not a[-1]:\n            a.pop()\n        if not a[0]:\n            a.appendleft(0)\n        m_count[a[0]] -= 1\n        a[0] += 1\n        m_count[a[0]] += 1\n        if a[0] > m:\n            m += 1\n    else:\n        a.pop()\n        a.appendleft(0)", "(n, q, k) = map(int, input().split(' '))\nl = list(map(int, input().split(' ')))\nl2 = list(l)\nstri = input()\nstinds = -1\nx = str()\nstinde = -1\nendinds = n\nendinde = n\nmx = -1\nmxinds = -1\nmxinde = -1\nmx2inds = -1\nmx2inde = -1\ncou = 0\nmxind = -1\nmx2ind = -1\n(st, ed, mx2) = (0, 0, 0)\n(co1, co0) = (0, 0)\nfor i in l:\n    if i == 0:\n        co0 = co0 + 1\n    else:\n        co1 = co1 + 1\nfor i in range(n):\n    if l[i] == 0 and i != 0:\n        stinds = 0\n        stinde = i - 1\n        break\n    if l[i] == 0 and i == 0:\n        stinds = -1\n        stinde = -1\n        break\nif co1 == n:\n    st = n\n    stinde = n - 1\n    stinds = 0\nelif stinds == -1 and stinde == -1:\n    st = 0\nelse:\n    st = stinde - stinds + 1\nif co1 == n:\n    ed = 0\nelse:\n    for i in range(n - 1, -1, -1):\n        if l[i] == 0 and i != n - 1:\n            endinds = i + 1\n            endinde = n - 1\n            ed = endinde - endinds + 1\n            break\n        elif l[i] == 0 and i == n - 1:\n            ed = 0\n            break\nfor i in range(stinde + 1, endinds):\n    if l[i] == 1:\n        cou = cou + 1\n        if cou == 1:\n            mxind = i\n    if l[i] == 0:\n        if cou > mx:\n            mx = cou\n            mxinds = mxind\n            mxinde = i - 1\n            cou = 0\n        else:\n            cou = 0\ncou = 0\nmx2 = -1\nfor i in range(mxinds, mxinde + 1):\n    l2[i] = 0\nfor i in range(stinde + 1, endinds):\n    if l2[i] == 1:\n        cou = cou + 1\n        if cou == 1:\n            mx2ind = i\n    if l2[i] == 0:\n        if cou > mx2:\n            mx2 = cou\n            mx2inds = mx2ind\n            mx2inde = i - 1\n            cou = 0\n        else:\n            cou = 0\na = max(mx, mx2, st, ed)\nif a == st:\n    lol = 1\nelif a == mx2:\n    lol = 2\nelif a == mx:\n    lol = 3\nelif a == ed:\n    lol = 4\nif st + ed > mx:\n    lol1 = 2\nelse:\n    lol1 = 2\nlol = 0\nhai = 1\nfor i in stri:\n    if i == '!':\n        if ed > 0:\n            if stinds != -1:\n                stinde = (stinde + 1) % n\n            st = st + 1\n            ed = ed - 1\n            if mxinds != -1:\n                mxinds = (mxinds + 1) % n\n                mxinde = (mxinde + 1) % n\n            if mx2inds != -1:\n                mx2inds = (mx2inds + 1) % n\n                mx2inde = (mx2inde + 1) % n\n            a = max(st, ed, mx, mx2)\n        elif ed == 0 and x == 'st':\n            hai = 0\n            if stinds != -1:\n                stinds = (stinds + 1) % n\n                stinde = (stinde + 1) % n\n            if mxinds != -1:\n                mxinds = (mxinds + 1) % n\n                mxinde = (mxinde + 1) % n\n            if stinde - stinds < 0:\n                st = max(stinde + 1, n - stinds)\n            else:\n                st = stinde - stinds + 1\n            if mx2inds != -1:\n                mx2inds = (mx2inds + 1) % n\n                mx2inde = (mx2inde + 1) % n\n            if stinds == 0:\n                hai = 1\n            a = max(st, ed, mx, mx2)\n            if mxinde > mx2inde and mxinde > stinde:\n                if mxinde == n - 1:\n                    x = 'mx'\n                elif hai == 1:\n                    x = 'mom'\n            if mx2inde > mxinde and mx2inde > stinde:\n                if mx2inde == n - 1:\n                    x = 'mx2'\n                elif hai == 1:\n                    x = 'mom'\n            if mx2inde < stinde and mxinde < stinde:\n                if stinde == n - 1:\n                    x = 'st'\n                elif hai == 1:\n                    x = 'mom'\n        elif ed == 0 and x == 'mx2':\n            hai = 0\n            if stinde != -1:\n                stinds = (stinds + 1) % n\n                stinde = (stinde + 1) % n\n            mx2inds = (mx2inds + 1) % n\n            mx2inde = (mx2inde + 1) % n\n            if mx2inde - mx2inds < 0:\n                mx2 = max(mx2inde + 1, n - mx2inds)\n            else:\n                mx2 = mx2inde - mx2inds + 1\n            if mxinds != -1:\n                mxinds = (mxinds + 1) % n\n                mxinde = (mxinde + 1) % n\n            if mx2inds == 0:\n                hai = 1\n            a = max(st, ed, mx, mx2)\n            if mxinde > mx2inde and mxinde > stinde:\n                if mxinde == n - 1:\n                    x = 'mx'\n                elif hai == 1:\n                    x = 'mom'\n            if mx2inde > mxinde and mx2inde > stinde:\n                if mx2inde == n - 1:\n                    x = 'mx2'\n                elif hai == 1:\n                    x = 'mom'\n            if mx2inde < stinde and mxinde < stinde:\n                if stinde == n - 1:\n                    x = 'st'\n                elif hai == 1:\n                    x = 'mom'\n        elif ed == 0 and x == 'mx':\n            hai = 0\n            if stinds != -1:\n                stinds = (stinds + 1) % n\n                stinde = (stinde + 1) % n\n            if mxinds != -1:\n                mxinds = (mxinds + 1) % n\n                mxinde = (mxinde + 1) % n\n            if mxinds == 0:\n                hai = 1\n            if mxinde - mxinds < 0:\n                mx = max(mxinde + 1, n - mxinds)\n            else:\n                mx = mxinde - mxinds + 1\n            if mx2inds != -1:\n                mx2inds = (mx2inds + 1) % n\n                mx2inde = (mx2inde + 1) % n\n            a = max(st, ed, mx, mx2)\n            if mxinde > mx2inde and mxinde > stinde:\n                if mxinde == n - 1:\n                    x = 'mx'\n                elif hai == 1:\n                    x = 'mom'\n            if mx2inde > mxinde and mx2inde > stinde:\n                if mx2inde == n - 1:\n                    x = 'mx2'\n                elif hai == 1:\n                    x = 'mom'\n            if mx2inde < stinde and mxinde < stinde:\n                if stinde == n - 1:\n                    x = 'st'\n                elif hai == 1:\n                    x = 'mom'\n        elif ed == 0 and (x == 'mom' or lol == 0):\n            if stinds != -1:\n                stinds = (stinds + 1) % n\n                stinde = (stinde + 1) % n\n            if mxinds != -1:\n                mxinds = (mxinds + 1) % n\n                mxinde = (mxinde + 1) % n\n            if mx2inds != -1:\n                mx2inds = (mx2inds + 1) % n\n                mx2inde = (mx2inde + 1) % n\n            a = max(st, ed, mx, mx2)\n            if mxinde > mx2inde and mxinde > stinde:\n                if mxinde == n - 1:\n                    x = 'mx'\n                    lol = 1\n                else:\n                    x = 'mom'\n                    lol = 1\n            if mx2inde > mxinde and mx2inde > stinde:\n                if mx2inde == n - 1:\n                    x = 'mx2'\n                    lol = 1\n                else:\n                    x = 'mom'\n                    lol = 1\n            if mx2inde < stinde and mxinde < stinde:\n                if stinde == n - 1:\n                    x = 'st'\n                    lol = 1\n                else:\n                    x = 'mom'\n                    lol = 1\n    if i == '?' and co1 == n:\n        if n < k:\n            print(n)\n        else:\n            print(k)\n    elif i == '?' and co0 == n:\n        print(0)\n    elif i == '?' and co0 != n:\n        if a < k:\n            print(a)\n        else:\n            print(k)", "def plus(i):\n    if i < n - 1:\n        return i + 1\n    else:\n        return 0\n[n, q, k] = [int(j) for j in input().split()]\nl = input().split()\nquerry = list(input())\nif l == n * ['0']:\n    for ko in range(q):\n        if querry[ko] == '?':\n            print(0)\nelse:\n    m = [0]\n    m2 = [(0, 0)]\n    try:\n        br = l.index('0')\n        i = br + 1\n        while i != br:\n            if l[i] == '1':\n                ct = 1\n                pst = i\n                i = plus(i)\n                while l[i] == '1' and i != br:\n                    ct = ct + 1\n                    i = plus(i)\n                m.append(ct)\n                m2.append((pst, i - 1))\n            else:\n                i = plus(i)\n    except:\n        i = 0\n        while i < n - 1:\n            if l[i] == '1':\n                ct = 1\n                pst = i\n                i = plus(i)\n                while l[i] == '1' and i < n - 1:\n                    ct += 1\n                    i = plus(i)\n                m.append(ct)\n                m2.append((pst, i - 1))\n            else:\n                i = plus(i)\n    max_len = max(m)\n    w = m.index(max_len)\n    st = m2[w][0]\n    end = m2[w][1]\n    m.remove(max_len)\n    sec_max = max(m)\n    for i in range(q):\n        if querry[i] == '!':\n            end = plus(end)\n            st = plus(st)\n        elif end - st + 1 == max_len:\n            print(min(k, max_len))\n        else:\n            x = n - st\n            y = end + 1\n            z = max(sec_max, x, y)\n            print(min(k, z))", "(N, Q, K) = map(int, input().split())\nA = input().split()\nS = input()\nc = 0\nmx = [0, 0]\nT = []\nvalues = {}\nfor i in A:\n    if i == '1':\n        c += 1\n        if c >= mx[0]:\n            mx[0] = c\n            mx[1] += 1\n    else:\n        if c != 0:\n            T.append(c)\n            if c in values:\n                values[c] += 1\n            else:\n                values[c] = 1\n        T.append(0)\n        c = 0\n        mx[1] = 0\nif A[-1] != '0':\n    T.append(c)\n    if c in values:\n        values[c] += 1\n    else:\n        values[c] = 1\nT.reverse()\nc = 0\nfor i in S:\n    if i == '?':\n        print(mx[0] if mx[0] <= K else K)\n    elif T[c] != 0:\n        if T[-1] != 0:\n            values[T[-1]] -= 1\n            T[-1] += 1\n            if T[-1] not in values:\n                values[T[-1]] = 1\n            else:\n                values[T[-1]] += 1\n            mx[0] = max(mx[0], T[-1])\n        else:\n            T.append(1)\n            if 1 in values:\n                values[1] += 1\n            else:\n                values[1] = 1\n        if T[c] - 1:\n            if T[c] == mx[0]:\n                if values[T[c]]:\n                    values[T[c]] -= 1\n                    if values[T[c]] == 0:\n                        mx[0] -= 1\n                T[c] -= 1\n                if T[c] not in values:\n                    values[T[c]] = 1\n                else:\n                    values[T[c]] += 1\n            else:\n                values[T[c]] -= 1\n                T[c] -= 1\n                if T[c] not in values:\n                    values[T[c]] = 1\n                else:\n                    values[T[c]] += 1\n        else:\n            values[T[c]] = 0\n            c += 1\n    else:\n        T.append(0)\n        c += 1", "import sys\n(n, q, k) = [int(i) for i in input().split()]\na = [int(i) for i in input().split()]\nzeroflag = 0\noneflag = 0\nif sum(a) == 0:\n    zeroflag = 1\nif sum(a) == n:\n    oneflag = 1\nif zeroflag == 1:\n    queries = input()\n    for i in queries:\n        if i == '?':\n            print(0)\n    sys.exit()\nif oneflag == 1:\n    queries = input()\n    for i in queries:\n        if i == '?':\n            print(min(n, k))\n    sys.exit()\nlargest = {}\ns = 0\nsmax = 0\nf = 0\nfor i in range(n):\n    if a[i] != 0:\n        if f == 0:\n            start = i\n            f = 1\n        s += 1\n    else:\n        f = 0\n        if s > smax:\n            smax = s\n            largest['start'] = start\n            largest['end'] = start + s - 1\n        s = 0\nif s > smax:\n    smax = s\n    largest['start'] = start\n    largest['end'] = start + s - 1\nslargest = {}\ns = 0\nsmax = 0\nf = 0\nfor i in range(n):\n    if i < largest['start'] or i > largest['end']:\n        if a[i] != 0:\n            if f == 0:\n                start = i\n                f = 1\n            s += 1\n        else:\n            f = 0\n            if s > smax:\n                smax = s\n                slargest['start'] = start\n                slargest['end'] = start + s - 1\n            s = 0\nif s > smax:\n    smax = s\n    slargest['start'] = start\n    slargest['end'] = start + s - 1\nfirstlen = a.index(0)\nfirst = {}\nfirst['start'] = 0\nfirst['end'] = max(0, firstlen - 1)\nlastlen = a[::-1].index(0)\nlast = {}\nlast['end'] = n - 1\nlast['start'] = n - lastlen\nif firstlen + lastlen >= largest['end'] - largest['start'] + 1 and firstlen > 0 and (lastlen > 0):\n    slargest['start'] = largest['start']\n    slargest['end'] = largest['end']\n    largest['start'] = last['start']\n    largest['end'] = first['end']\nelif firstlen + lastlen > slargest['end'] - slargest['start'] + 1 and firstlen > 0 and (lastlen > 0):\n    slargest['start'] = last['start']\n    slargest['end'] = first['end']\n\ndef fn_ls(start, end):\n    f = 0\n    if start > n - 1:\n        start -= n\n    if end > n - 1:\n        end -= n\n    if start > end:\n        f = 1\n    return (start, end, f)\n\ndef longest_subsequence(c):\n    lstart = largest['start']\n    lend = largest['end']\n    slstart = slargest['start']\n    slend = slargest['end']\n    lstart += c\n    lend += c\n    slstart += c\n    slend += c\n    (slstart, slend, fsl) = fn_ls(slstart, slend)\n    (lstart, lend, fl) = fn_ls(lstart, lend)\n    if fsl == 1:\n        v1 = max(n - slstart, slend + 1)\n    else:\n        v1 = slend - slstart + 1\n    if fl == 1:\n        v2 = max(n - lstart, lend + 1)\n    else:\n        v2 = lend - lstart + 1\n    return min(max(v1, v2), k)\nqueries = input()\nc = 0\nfor i in queries:\n    if i == '?':\n        print(longest_subsequence(c))\n    else:\n        c += 1\n        c = c % n", "(N, Q, K) = map(int, input().split())\ndata = [0] * (2 * N)\n(count1, count0) = (0, 0)\np = [int(x) for x in input().split()]\nfor i in range(N):\n    data[i] = p[i]\n    data[i + N] = p[i]\n    if p[i] == 1:\n        count1 += 1\n    else:\n        count0 += 1\nlargest = 0\n(l, r, count, templ, tempr) = (-1, -1, 0, 0, -1)\nfor i in range(2 * N):\n    if data[i] == 1:\n        count += 1\n        tempr += 1\n    else:\n        if count > largest:\n            largest = count\n            l = templ\n            r = tempr\n        templ = i + 1\n        tempr = i\n        count = 0\n(l2, r2) = (0, 0)\nif 0 <= l and r <= N - 1:\n    l2 = N + 1\n    r2 = N + r\nelse:\n    l2 = l\n    r2 = r\n(secondlargest, count) = (-1, 0)\nfor i in range(N):\n    if not (l <= i and i <= r or i <= r - N):\n        if data[i] == 1:\n            count += 1\n        else:\n            if count > secondlargest:\n                secondlargest = count\n            count = 0\nrotate = [0] * N\nif count1 == N:\n    for i in range(N):\n        rotate[i] = N\nelif count0 == N:\n    for i in range(N):\n        rotate[i] = 0\nelse:\n    for i in range(N - 1, -1, -1):\n        (low, up) = (i + 1, i + N)\n        if low <= l and r <= up or (low <= l2 and r2 <= up):\n            rotate[N - 1 - i] = largest\n        else:\n            c = secondlargest\n            if l <= low and low <= r:\n                a = low - l\n                b = largest - a\n            else:\n                a = up - l2 + 1\n                b = largest - a\n            rotate[N - 1 - i] = (a if a > c else c) if a > b else b if b > c else c\nquery = input()\nrot = 0\nfor i in range(Q):\n    if query[i] == '?':\n        print(rotate[rot] if rotate[rot] <= K else K)\n    else:\n        rot = (rot + 1) % N", "(n, q, k1) = map(int, input().split())\nl = list(map(int, input().split()))\ns = input()\nif n == 1:\n    for i in s:\n        if i == '?':\n            if l[0] == 1:\n                print(1)\n            else:\n                print(0)\nelif n == 2:\n    c = 0\n    for i in range(n):\n        if l[i] == 1:\n            c += 1\n    if c == 2:\n        for i in s:\n            if i == '?':\n                if c <= k1:\n                    print(c)\n                else:\n                    print(k1)\n    if c == 0:\n        for i in s:\n            if i == '?':\n                print(0)\n    if c == 1:\n        for i in s:\n            if i == '!':\n                (l[0], l[1]) = (l[1], [0])\n            else:\n                print(1)\nelse:\n    beg = [0, [0, 0]]\n    c = 0\n    start = -1\n    for i in range(len(l)):\n        if l[i] == 1:\n            c += 1\n            if start == -1:\n                start = i\n        else:\n            if c != 0:\n                end = i\n                beg = [c, [start, end - 1]]\n            break\n    if c != 0 and beg[0] == 0:\n        beg = [c, [0, len(l) - 1]]\n    j = i + 1\n    if j < len(l):\n        x = []\n        c = 0\n        (start, end) = (0, 0)\n        for i in range(j, len(l)):\n            if l[i] == 1:\n                c += 1\n                if start == 0:\n                    start = i\n            else:\n                if c != 0:\n                    end = i\n                    x.append([c, [start, end - 1]])\n                    (start, end) = (0, 0)\n                c = 0\n        if c != 0:\n            x.append([c, [start, len(l) - 1]])\n        l_x = len(x)\n        if beg == 0 and l_x == 0:\n            for i in s:\n                if i == '?':\n                    print(0)\n        if l_x == 0:\n            (mx1, mx2) = ([0, [0, 0]], [0, [0, 0]])\n        elif l_x == 1:\n            mx1 = x[0]\n            mx2 = [0, [0, 0]]\n        elif l_x >= 2:\n            x = sorted(x, reverse=True)\n            mx1 = x[0]\n            mx2 = x[1]\n        j1 = n - 1\n        k = n - 1\n        for i in s:\n            if i == '!':\n                if l[k] == 0 and l[(k + 1) % n] == 0:\n                    mx1[1][0] += 1\n                    mx1[1][1] += 1\n                    mx2[1][0] += 1\n                    mx2[1][1] += 1\n                elif l[k] == 0 and l[(k + 1) % n] == 1:\n                    if beg[0] > mx1[0]:\n                        if mx1[0] > mx2[0]:\n                            mx2 = mx1\n                            mx1 = beg\n                            beg = [0, [0, 0]]\n                        else:\n                            mx1 = beg\n                            beg = [0, [0, 0]]\n                    elif beg[0] > mx2[0]:\n                        mx2 = beg\n                        beg = [0, [0, 0]]\n                    else:\n                        beg = [0, [0, 0]]\n                    mx1[1][0] += 1\n                    mx1[1][1] += 1\n                    mx2[1][0] += 1\n                    mx2[1][1] += 1\n                elif l[k] == 1 and l[(k + 1) % n] == 0:\n                    beg = [1, [0, 0]]\n                    if j1 >= mx1[1][0] and j1 <= mx1[1][1]:\n                        mx1[0] -= 1\n                        if mx1[0] == 0:\n                            mx1[1][0] = 0\n                            mx1[1][1] = 0\n                        else:\n                            mx1[1][0] += 1\n                        mx2[1][0] += 1\n                        mx2[1][1] += 1\n                    elif j1 >= mx2[1][0] and j1 <= mx2[1][1]:\n                        mx2[0] -= 1\n                        if mx2[0] == 0:\n                            mx2[1][0] = 0\n                            mx2[1][1] = 0\n                        else:\n                            mx2[1][0] += 1\n                        mx1[1][0] += 1\n                        mx1[1][1] += 1\n                    else:\n                        mx1[1][0] += 1\n                        mx1[1][1] += 1\n                        mx2[1][0] += 1\n                        mx2[1][1] += 1\n                elif l[k] == 1 and l[(k + 1) % n] == 1:\n                    beg[0] += 1\n                    beg[1][1] += 1\n                    if j1 >= mx1[1][0] and j1 <= mx1[1][1]:\n                        mx1[0] -= 1\n                        if mx1[0] == 0:\n                            mx1[1][0] = 0\n                            mx1[1][1] = 0\n                        else:\n                            mx1[1][0] += 1\n                        mx2[1][0] += 1\n                        mx2[1][1] += 1\n                    elif j1 >= mx2[1][0] and j1 <= mx2[1][1]:\n                        mx2[0] -= 1\n                        if mx2[0] == 0:\n                            mx2[1][0] = 0\n                            mx2[1][1] = 0\n                        else:\n                            mx2[1][0] += 1\n                        mx1[1][0] += 1\n                        mx1[1][1] += 1\n                    else:\n                        mx1[1][0] += 1\n                        mx1[1][1] += 1\n                        mx2[1][0] += 1\n                        mx2[1][1] += 1\n                k -= 1\n                if k < 0:\n                    k = n - 1\n            else:\n                M = max(beg[0], mx1[0], mx2[0])\n                if M <= k1:\n                    print(M)\n                else:\n                    print(k1)\n    elif beg[0] == n:\n        for i in s:\n            if i == '?':\n                if beg[0] <= k1:\n                    print(beg[0])\n                else:\n                    print(k1)\n    else:\n        j1 = n - 1\n        beg = beg[0]\n        beg1 = beg\n        for i in s:\n            if i == '!':\n                if l[j1] == 1 and l[(j1 + 1) % n] == 0:\n                    beg = 1\n                    beg1 -= 1\n                    j1 -= 1\n                elif l[j1] == 1 and l[(j1 + 1) % n] == 1:\n                    beg += 1\n                    beg1 -= 1\n                    j1 -= 1\n                elif l[j1] == 0 and l[(j1 + 1) % n] == 1:\n                    beg = 0\n                    j1 -= 1\n                else:\n                    j1 -= 1\n                if j1 < 0:\n                    j1 = n - 1\n            elif max(beg, beg1) <= k1:\n                print(max(beg, beg1))\n            else:\n                print(k1)", "from collections import deque as dq\n(n, q, k) = map(int, input().split())\nchandu = list(map(str, input().split()))\nn = len(chandu)\nx = ''.join(chandu)\ngandi = list((len(a) for a in x.split('0')))\nchlhat = []\nchlhat2 = []\nchlhat2.extend(gandi)\nchlhat.extend(gandi)\nchlhat.sort(reverse=True)\nnazar = chlhat[0]\nchab = nazar\nif len(chlhat) > 1:\n    chab = chlhat[1]\nchlhat2.reverse()\nkabir1 = len(chlhat2) - chlhat2.index(nazar) - 1\nihate = dq(gandi)\naruna = dq(chandu)\ndipankar = list(input())\nsrk = dict()\nchoprs = 0\nsrk[0] = min(k, nazar)\nfor i in range(len(dipankar)):\n    if dipankar[i] == '!':\n        aruna.rotate(1)\n        choprs += 1\n        if aruna[0] == '1':\n            ihate[0] += 1\n            ihate[len(ihate) - 1] -= 1\n            if kabir1 == len(ihate) - 1:\n                nazar -= 1\n        if ihate[len(ihate) - 1] == 0:\n            ihate.rotate(1)\n            kabir1 = (kabir1 + 1) % len(ihate)\n            if kabir1 == 0:\n                kabir1 += 1\n            nazar = ihate[kabir1]\n        if choprs % n not in srk:\n            if n <= 10 ** 3:\n                chlhatsrk = max(ihate)\n            else:\n                chlhatsrk = max(nazar, chab, ihate[0])\n            x = min(k, chlhatsrk)\n            srk[choprs % n] = x\n    else:\n        print(srk[choprs % n])", "class Group:\n\n    def __init__(self, num, count):\n        self.num = num\n        self.count = count\n(n, q, k) = map(int, input().split())\nl = list(map(int, input().split()))\nquery = input()\ngroups = []\ngIndex = None\ni = 0\nwhile i < n:\n    count = 1\n    while i < n - 1 and l[i] == l[i + 1]:\n        count += 1\n        i += 1\n    g = Group(l[i], count)\n    if l[i] == 1 and (gIndex == None or count > groups[gIndex].count):\n        gIndex = len(groups)\n    groups.append(g)\n    i += 1\n\ndef rotate(groups, gIndex, k):\n    groups[-1].count -= 1\n    lastGroupNum = groups[-1].num\n    if lastGroupNum == groups[0].num:\n        groups[0].count += 1\n    else:\n        g = Group(lastGroupNum, 1)\n        groups.insert(0, g)\n        gIndex += 1\n        gIndex %= len(groups)\n    if gIndex == len(groups) - 1:\n        gIndex = None\n        for _ in range(0, len(groups)):\n            if groups[_].num == 1 and (gIndex == None or groups[gIndex].count < groups[_].count):\n                gIndex = _\n    if groups[-1].count == 0:\n        del groups[-1]\n    if groups[0].num and min(k, groups[gIndex].count) <= min(k, groups[0].count):\n        gIndex = 0\n    if groups[-1].num and min(k, groups[gIndex].count) < min(k, groups[-1].count):\n        gIndex = len(groups) - 1\n    return (groups, gIndex)\n\ndef display(groups):\n    for g in groups:\n        print(str(g.num) + '=>' + str(g.count), end=',')\n    print()\n\ndef answer(groups, gIndex, k):\n    if gIndex is not None and len(groups) > gIndex:\n        print(min(groups[gIndex].count, k))\n    else:\n        print(0)\nfor q in query:\n    if q == '!':\n        (groups, gIndex) = rotate(groups, gIndex, k)\n    else:\n        answer(groups, gIndex, k)", "t = [int(j) for j in input().split()]\ng = input().split()\nu = list(input())\nif t[0] <= 1000:\n    s = ''.join(g)\n    for i in u:\n        if i == '!':\n            s = s[-1] + s[0:t[0] - 1]\n        else:\n            a = 0\n            b = 0\n            for u in range(t[0]):\n                if int(s[u]) == 1:\n                    a += 1\n                elif int(s[u]) == 0:\n                    if a >= b:\n                        b = a\n                        a = 0\n                    else:\n                        a = 0\n            print(min(max(a, b), t[2]))\nelse:\n    h = [int(u) for u in g]\n    a = [0, 0]\n    b = [0, 0]\n    m1 = 0\n    m2 = 0\n    m3 = 0\n    c1 = 0\n    c2 = 0\n    c3 = 0\n    d1 = 0\n    d2 = 0\n    d3 = 0\n    f = t[0] - 1\n    mode = 0\n    for i in range(t[0]):\n        if h[i] == 0:\n            break\n        a[0] += 1\n        a[1] = i\n    if t[0] == 1:\n        for y in range(t[1]):\n            if u[y] == '?':\n                print(h[0])\n    elif t[0] == 2:\n        for y in range(t[1]):\n            if u[y] == '?':\n                print(min(h.count(1), t[2]))\n    elif a[1] + 1 == t[0]:\n        for y in range(t[1]):\n            if u[y] == '?':\n                print(min(t[0], t[2]))\n    else:\n        for J in range(t[0]):\n            j = t[0] - J - 1\n            if h[j] == 0:\n                break\n            b[0] += 1\n            b[1] = j\n        if h[0] == 0:\n            a = [0, -1]\n        if h[t[0] - 1] == 0:\n            b = [0, t[0]]\n        m1 = int(a[1] + 2)\n        for I in range(a[1] + 2, b[1]):\n            if int(h[I]) == 0:\n                m3 = I - 1\n                if m2 > max(c2, d2) and h[m1] == 1 and (h[m3] == 1):\n                    c1 = m1\n                    c2 = m2\n                    c3 = m3\n                elif m2 > min(c2, d2) and m2 != c2 and (h[m1] == 1) and (h[m3] == 1):\n                    d1 = m1\n                    d2 = m2\n                    d3 = m3\n                m1 = I + 1\n                m2 = 0\n            elif int(h[I]) == 1:\n                m2 += 1\n        c = [c1, c2, c3]\n        d = [d1, d2, d3]\n        if c[1] < a[0] + b[0]:\n            mode = 1\n        elif d[1] < a[0] + b[0] and mode != 1:\n            mode = 2\n        for k in range(t[1]):\n            if u[k] == '!':\n                if f == 0:\n                    f = t[0] - 1\n                else:\n                    f = f - 1\n            elif u[k] == '?':\n                if mode == 0:\n                    if f >= c[0] and f < c[2]:\n                        print(min(max(c[1] - (c[2] - f), c[2] - f, d[1]), t[2]))\n                    else:\n                        print(min(c[1], t[2]))\n                if mode == 1:\n                    if f <= a[1]:\n                        print(min(max(b[0] + a[0] - (a[1] - f), a[1] - f, c[1]), t[2]))\n                    elif f >= b[1]:\n                        print(min(max(a[0] + b[0] - (f - b[1] + 1), f - b[1] + 1, c[1]), t[2]))\n                    else:\n                        print(min(a[0] + b[0], t[2]))\n                if mode == 2:\n                    if f >= c[0] and f < c[2]:\n                        print(min(max(c[1] - (c[2] - f), c[2] - f, a[0] + b[0]), t[2]))\n                    else:\n                        print(min(c[1], t[2]))", "best1 = (0, 0)\nbest2 = (0, 0)\ncur = [0, 0]\nstart = 0\nend = 0\ntokens = input().split()\nn = int(tokens[0])\nq = int(tokens[1])\nk = int(tokens[2])\ndigits = input().split()\nfor i in range(n):\n    if digits[i] == '1':\n        cur[1] += 1\n        if cur[1] > best1[1]:\n            if cur[0] != best1[0]:\n                best2 = best1\n            best1 = (cur[0], cur[1])\n        elif cur[1] > best2[1]:\n            best2 = (cur[0], cur[1])\n    if digits[i] == '0':\n        cur[0] = i + 1\n        cur[1] = 0\n    if cur[0] == 0:\n        start = cur[1]\n    if cur[0] + cur[1] == n:\n        end = cur[1]\nidx = 0\nqueries = input()\n\ndef largest(pair, idx):\n    t = 0\n    if idx > pair[0] and idx < pair[0] + pair[1]:\n        return max(idx - pair[0], pair[1] + pair[0] - idx)\n    return pair[1]\nfor c in queries:\n    if c == '!':\n        idx = (idx - 1 + n) % n\n    if c == '?':\n        res = 0\n        if best1[1] == n:\n            res = n\n        elif idx < start:\n            res = max(end + idx, start - idx)\n        elif idx > n - end:\n            res = max(start + n - idx, idx - n + end)\n        else:\n            res = start + end\n        res = max(res, largest(best1, idx))\n        res = max(res, largest(best2, idx))\n        res = min(res, k)\n        print(res)", "import bisect\n(n, q, k) = map(int, input().split())\nArr = [int(x) for x in input().split()]\nqs = input()\nones = []\ni = 0\nwhile i < n:\n    if Arr[i] == 1:\n        j = i + 1\n        while j < n and Arr[j] == 1:\n            j += 1\n        ones.append((i, j - i))\n        i = j\n    else:\n        i += 1\n(first, last) = (0, 0)\nfirstToStart = ones[0][0] == 0 if ones else False\nlastToEnd = ones[-1][0] + ones[-1][1] >= n if ones else False\nif firstToStart:\n    first = ones[0][1]\nif lastToEnd:\n    last = ones[-1][1]\nol = len(ones)\n(left, right) = ([0] * (ol + 1), [0] * (ol + 1))\nmxone = 0\nfor i in range(1 if firstToStart else 0, ol):\n    mxone = max(mxone, ones[i][1])\n    left[i] = mxone\nmxone = 0\nfor i in range(ol - 2 if lastToEnd else ol - 1, -1, -1):\n    mxone = max(mxone, ones[i][1])\n    right[i] = mxone\nmemo = {}\n\ndef query(start):\n    if start in memo:\n        return memo[start]\n    res = 0\n    i = bisect.bisect_right(ones, (start, float('inf')))\n    l = 0\n    if i > 0:\n        if ones[i - 1][0] + ones[i - 1][1] <= start:\n            l = left[i - 1]\n        elif i - 2 >= 0:\n            l = left[i - 2]\n    r = right[i] if i < ol else 0\n    res = max(l, r)\n    if 0 < i < ol:\n        (s, t) = ones[i - 1]\n        if s + t > start:\n            l = start - s\n            r = t - l\n            res = max(res, l, r)\n    if firstToStart and lastToEnd:\n        if ones[0][1] < ones[-1][0]:\n            if ones[0][1] < start < ones[-1][0]:\n                res = max(res, first + last)\n            elif start <= ones[0][1]:\n                res = max(res, start + last, ones[0][1] - start)\n            else:\n                l = start - ones[-1][0]\n                res = max(res, l, first + last - l)\n        else:\n            res = ones[0][1]\n    elif firstToStart:\n        if start < ones[0][1]:\n            res = max(res, start, ones[0][1] - start)\n        else:\n            res = max(res, ones[0][1])\n    elif lastToEnd:\n        if start >= ones[-1][0]:\n            l = start - ones[-1][0]\n            res = max(res, l, ones[-1][1] - l)\n        else:\n            res = max(res, ones[-1][1])\n    res = min(res, k)\n    memo[start] = res\n    return res\nstart = 0\nres = []\nfor Q in qs:\n    if Q == '?':\n        res.append(query(start))\n    else:\n        start = (start + n - 1) % n\nprint('\\n'.join(map(str, res)))", "(N, Q, K) = map(int, input().split())\nA = list(map(int, input().split()))\ns = input()\ntotal_zeros = 0\nB = [0] * N\nC = [0] * N\nskip = False\nfor i in range(len(A)):\n    if A[i] == 0:\n        total_zeros += 1\nif total_zeros == 0:\n    maxl = N - 1\n    skip = True\nif total_zeros == N or total_zeros == N - 1:\n    maxl = N - total_zeros\n    skip = True\nif not skip:\n    for i in range(len(A)):\n        if A[i] == 0:\n            index = i\n            break\n    T = N\n    number_of_1s = 0\n    while T:\n        if A[i] == 1:\n            number_of_1s += 1\n        else:\n            number_of_1s = 0\n        B[i] = number_of_1s\n        if i == N - 1:\n            i = 0\n        else:\n            i += 1\n        T -= 1\n    T = N\n    number_of_1s = 0\n    while T:\n        if A[i] == 1:\n            number_of_1s += 1\n        else:\n            number_of_1s = 0\n        C[i] = number_of_1s\n        if i == N - 1:\n            i = 0\n        else:\n            i -= 1\n        T -= 1\n    D = [0] * N\n    for i in range(len(B)):\n        D[B[i]] += 1\n    maxl = 0\n    number_of_1s = 0\n    for i in range(N):\n        if A[i] == 1:\n            number_of_1s += 1\n        else:\n            number_of_1s = 0\n        if number_of_1s > maxl:\n            maxl = number_of_1s\n    j = N - 1\nfor c in range(Q):\n    if s[c] == '!':\n        if not skip:\n            if B[j] == maxl and D[maxl] == 1:\n                maxl -= 1\n            if C[j] > maxl:\n                maxl = C[j]\n            if j == 0:\n                j = N - 1\n            else:\n                j -= 1\n    elif s[c] == '?':\n        print(min(K, maxl))", "(n, q, k) = map(int, input().strip().split(' '))\nlst = list(map(int, input().strip().split(' ')))\nc = input()\nQ = [0] * n\n(Max, size, p) = (0, 0, 0)\nL = []\nl = []\nr = []\nif lst.count(1) == n:\n    for i in range(q):\n        if c[i] == '?':\n            if n >= k:\n                print(k)\n            else:\n                print(n)\nelif lst.count(0) == n:\n    for i in range(q):\n        if c[i] == '?':\n            print(0)\nelse:\n    x = lst.index(1)\n    l.append(x)\n    size = size + 1\n    for i in range(x, n - 1):\n        if lst[i] == 1 and lst[i + 1] == 0:\n            r.append(i)\n        elif lst[i] == 0 and lst[i + 1] == 1:\n            l.append(i + 1)\n            size = size + 1\n    if lst[n - 1] != 0:\n        r.append(n - 1)\n    for i in range(size):\n        L.append(r[i] - l[i] + 1)\n        if r[i] - l[i] + 1 > Max:\n            Max = r[i] - l[i] + 1\n            cur = l[i]\n    La = sorted(L)\n    if size == 1:\n        Max2 = 0\n    elif size == 2 and lst[0] == 1 and (lst[-1] == 1):\n        p = L[0] + L[-1]\n        if p > Max:\n            Max = p\n            cur = l[-1]\n        Max2 = 0\n    elif lst[0] == 1 and lst[-1] == 1:\n        p = L[0] + L[-1]\n        if size != 3:\n            g = sorted(L[1:size - 1])\n            Max2 = g[-2]\n        if size == 3:\n            if p >= L[1]:\n                Max = p\n                cur = l[-1]\n                Max2 = L[1]\n            else:\n                Max = L[1]\n                cur = l[-2]\n                Max2 = p\n        elif p > Max:\n            if cur == l[-1] or cur == 0:\n                Max = p\n                if cur == 0:\n                    cur = l[-1]\n                    g = sorted(L[1:size - 1])\n                    Max2 = g[-1]\n            else:\n                Max2 = Max\n                Max = p\n                cur = l[-1]\n        elif p <= Max and p > Max2:\n            Max2 = p\n    else:\n        Max2 = La[-2]\n    if Max >= k:\n        m = k\n    else:\n        m = Max\n    for i in range(n - Max + 1):\n        Q[i] = m\n    for i in range(n - Max + 1, n):\n        if n - i >= Max2 and n - i >= Max - n + i:\n            if n - i >= k:\n                Q[i] = k\n            else:\n                Q[i] = n - i\n        elif n - i <= Max2 and Max2 >= Max - n + i:\n            if Max2 >= k:\n                Q[i] = k\n            else:\n                Q[i] = Max2\n        elif Max - n + i >= k:\n            Q[i] = k\n        else:\n            Q[i] = Max - n + i\n    for i in range(q):\n        if c[i] == '?':\n            print(Q[cur])\n        elif c[i] == '!':\n            cur = cur + 1\n            cur = cur % n", "from collections import Counter\n\ndef shift(a):\n    return a[-1] + a[:-1]\n\ndef long(a):\n    b = []\n    max1 = 0\n    for i in range(len(a)):\n        if a[i] == '1':\n            max1 += 1\n        else:\n            b.append(max1)\n            max1 = 0\n    b.append(max1)\n    b.sort(reverse=True)\n    if len(b) > 1:\n        return [b[0], b[1]]\n    else:\n        return [b[0], b[0]]\n\ndef pos(a, n):\n    if a[0:n] == '1' * n:\n        return 1\n    elif a[len(a) - n:] == '1' * n:\n        return 2\n    else:\n        return 3\n\ndef start(a):\n    count = 0\n    for i in range(len(a)):\n        if a[i] == '1':\n            count += 1\n        else:\n            break\n    return count\n\ndef end(a):\n    count = 0\n    i = len(a) - 1\n    while i >= 0:\n        if a[i] == '1':\n            count += 1\n        else:\n            break\n        i -= 1\n    return count\n(n, q, k) = map(int, input().split())\na = [str(x) for x in input().split()]\nbi = ''\nsi = ''\nfor i in a:\n    bi += i\n    si += i\ns = input()\nif n <= 1000 and q <= 3000:\n    for i in range(q):\n        if s[i] == '?':\n            print(min(long(bi)[0], k))\n        else:\n            bi = shift(bi)\nelse:\n    d = Counter(s)\n    u = Counter(a)\n    if d['?'] != 0:\n        arr = long(bi)\n        f = min(arr[0], k)\n        e = arr[1]\n        val = [f]\n        st = start(bi)\n        en = end(bi)\n        for i in range(d['!']):\n            r = pos(bi, f)\n            bi = shift(bi)\n            if si == bi:\n                break\n            if bi[0] == '1':\n                st += 1\n                st = min(st, u['1'])\n                en -= 1\n                en = max(0, en)\n                if r == 1:\n                    if max(st, en) >= e:\n                        f = max(st, en)\n                    else:\n                        f = e\n                        e = max(st, en)\n                    val.append(min(f, k))\n                elif r == 2:\n                    if max(st, en) >= e:\n                        f = max(st, en)\n                    else:\n                        f = e\n                        e = max(st, en)\n                    val.append(min(f, k))\n                else:\n                    val.append(val[-1])\n            else:\n                st = 0\n                en = end(bi)\n                f = max(en, f)\n                val.append(min(f, k))\n        y = len(val)\n        l = 0\n        for i in range(q):\n            if s[i] == '?':\n                print(val[l % y])\n            else:\n                l += 1", "from sys import exit\n(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\ns = input()\nif a.count(1) == n:\n    for i in range(s.count('?')):\n        print(min(k, n))\n    exit()\ncnt = dict()\nS = set()\n\ndef upd(l, delta):\n    if l in S:\n        cnt[l] += delta\n    if delta == 1 and l not in S:\n        S.add(l)\n        cnt[l] = delta\n    if delta == -1 and cnt[l] == 0:\n        S.remove(l)\nl = 0\nfor i in a:\n    if i == 1:\n        l += 1\n    else:\n        upd(l, 1)\n        l = 0\nupd(l, 1)\n(pre, suf, i) = (0, 0, 0)\nwhile i < n and a[i] == 1:\n    (pre, i) = (pre + 1, i + 1)\ni = n - 1\nwhile i >= 0 and a[i] == 1:\n    (suf, i) = (suf + 1, i - 1)\n(st, en) = (0, n - 1)\nfor t in s:\n    if t == '!':\n        if a[en] == 1:\n            upd(pre, -1)\n            pre += 1\n            upd(pre, 1)\n            upd(suf, -1)\n            suf -= 1\n            upd(suf, 1)\n        else:\n            (pre, suf, i) = (0, 0, (en - 1) % n)\n            while i != st and a[i] == 1:\n                (suf, i) = (suf + 1, (i - 1) % n)\n        (st, en) = ((st - 1) % n, (en - 1) % n)\n    else:\n        ans = 0 if len(S) == 0 else max(S)\n        print(min(k, ans))", "import math\ninp = input().split(' ')\nn = int(inp[0])\nq = int(inp[1])\nlim = int(inp[2])\nby = input().split(' ')\nbinary = [int(x) for x in by]\nk = 0\nleft = 0\nright = 0\nmaxm = 0\nstart = -1\nminm = 0\nminstart = -1\ncount = 0\ncycle = 0\nif binary[0] != 0 and binary[-1] != 0:\n    cycle = 1\nfor i in range(n):\n    if binary[i] == 0:\n        if count > maxm:\n            maxm = count\n            start = i - count\n        count = 0\n    else:\n        count += 1\nif i == n - 1:\n    if count > maxm:\n        maxm = count\n        start = i - count + 1\n    count = 0\nif start == 0:\n    count = 0\n    for i in range(start + maxm, n):\n        if binary[i] == 0:\n            if count > minm:\n                minm = count\n                minstart = i - count\n            count = 0\n        else:\n            count += 1\nelif start == n - maxm:\n    count = 0\n    for i in range(0, start):\n        if binary[i] == 0:\n            if count > minm:\n                minm = count\n                minstart = i - count\n            count = 0\n        else:\n            count += 1\nelse:\n    count = 0\n    for i in range(0, start):\n        if binary[i] == 0:\n            if count > minm:\n                minm = count\n                minstart = i - count\n            count = 0\n        else:\n            count += 1\n    count = 0\n    for i in range(start + maxm, n):\n        if binary[i] == 0:\n            if count > minm:\n                minm = count\n                minstart = i - count\n            count = 0\n        else:\n            count += 1\nright = start + maxm - 1\nall1 = 0\nif cycle:\n    k = 0\n    c = 0\n    while binary[k] == 1:\n        if k == n - 1:\n            all1 = 1\n            break\n        c += 1\n        k += 1\n    right = k - 1\n    if all1:\n        maxm = n\n        start = 0\n        right = n - 1\n    else:\n        x = n - 1\n        co = 0\n        while binary[x] == 1:\n            co += 1\n            x -= 1\n        if c + co > maxm:\n            start = x + 1\n            maxm = c + co\n        r = 0\n        if start == x + 1:\n            for i in range(k, x + 1):\n                if binary[i] == 0:\n                    if r > minm:\n                        minm = r\n                        minstart = i - r\n                    r = 0\n                else:\n                    r += 1\n        elif c + co > minm:\n            minm = c + co\n            minstart = x + 1\nif math.ceil(maxm / 2) > minm:\n    minm = math.ceil(maxm / 2)\nleft = start\nquery = input()\nfor i in range(q):\n    if query[i] == '!':\n        left = (left + 1) % n\n        right = (right + 1) % n\n    elif query[i] == '?':\n        if all1:\n            ans = min(lim, n)\n        else:\n            ans = 0\n            if left + maxm <= n:\n                ans = min(lim, maxm)\n            else:\n                temp1 = left + maxm - n\n                temp2 = n - left\n                temp3 = max(temp1, temp2)\n                temp4 = max(minm, temp3)\n                ans = min(lim, temp4)\n        print(ans)", "import bisect\nimport math\nimport numpy\n(n, q, k) = [int(x) for x in input().split()]\narr = [int(x) for x in input().split()]\nquery = input()\nlis = []\nlist1 = []\nfor j in range(n):\n    if arr[j] == 0:\n        lis.append(j)\nfc = 0\nfor j in range(len(lis) - 1):\n    if lis[j + 1] - lis[j] == 1:\n        fc = fc + 1\nif arr[0] == 0 and arr[n - 1] == 0:\n    fc = fc + 1\ndic = {}\ntemp = []\nxxx = 0\nfor j in range(len(lis) - 1):\n    temp.append(lis[j + 1] - lis[j] - 1)\nif len(lis) != 0:\n    if arr[0] + arr[n - 1] != 2:\n        temp.append(lis[0])\n        temp.append(n - lis[len(lis) - 1] - 1)\n    else:\n        temp.append(lis[0] + n - lis[len(lis) - 1] - 1)\ntemp.sort()\nmax1 = 0\nmax2 = 0\nif len(lis) != 0:\n    max1 = temp[len(temp) - 1]\n    max2 = temp[len(temp) - 2]\nif max1 == max2:\n    xxx = max1\nl1 = 0\nr1 = 0\nl2 = 0\nr2 = 0\nif len(lis) != 0:\n    if lis[0] + n - lis[len(lis) - 1] - 1 == max1:\n        l1 = (lis[len(lis) - 1] + 1) % n\n        r1 = lis[0] - 1\n        if r1 < 0:\n            r1 = r1 + n\n    elif lis[0] + n - lis[len(lis) - 1] - 1 == max2:\n        l2 = (lis[len(lis) - 1] + 1) % n\n        r2 = lis[0] - 1\n        if r2 < 0:\n            r2 = r2 + n\nfor j in range(len(lis) - 1):\n    if lis[j + 1] - lis[j] - 1 == max1:\n        l1 = lis[j] + 1\n        r1 = lis[j + 1] - 1\n    elif lis[j + 1] - lis[j] - 1 == max2:\n        l2 = lis[j] + 1\n        r2 = lis[j + 1] - 1\ncount = 0\nfor i in range(q):\n    if query[i] == '!':\n        count = count + 1\n    elif len(lis) == n:\n        print(0)\n    elif len(lis) == n - 1:\n        print(1)\n    elif len(lis) == n - 2:\n        l1 = arr.index(1)\n        arr.reverse()\n        l2 = n - 1 - arr.index(1)\n        if l2 - l1 == 1 or (l1 == 0 and l2 == n - 1):\n            print(min(k, 2))\n        else:\n            print(1)\n    elif len(lis) == 0:\n        if n <= k:\n            print(n)\n        else:\n            print(k)\n    elif len(lis) == 1:\n        if max((lis[0] + count) % n, n - 1 - (lis[0] + count) % n) <= k:\n            print(max((lis[0] + count) % n, n - 1 - (lis[0] + count) % n))\n        else:\n            print(k)\n    elif fc == len(lis) - 1:\n        val = 0\n        if (l1 + count) % n <= (r1 + count) % n:\n            val = (r1 - l1) % n + 1\n        else:\n            val = max(n - (l1 + count) % n, (r1 + count) % n + 1)\n        if val <= k:\n            print(val)\n        else:\n            print(k)\n    elif xxx != 0:\n        if xxx <= k:\n            print(xxx)\n        else:\n            print(k)\n    elif (l1 + count) % n > (r1 + count) % n and (l2 + count) % n <= (r2 + count) % n:\n        if max((r2 - l2) % n + 1, max((r1 + count) % n + 1, n - (l1 + count) % n)) <= k:\n            print(max((r2 - l2) % n + 1, max((r1 + count) % n + 1, n - (l1 + count) % n)))\n        else:\n            print(k)\n    elif (l1 + count) % n <= (r1 + count) % n and (l2 + count) % n > (r2 + count) % n:\n        if max((r1 - l1) % n + 1, max((r2 + count) % n + 1, n - (l2 + count) % n)) <= k:\n            print(max((r1 - l1) % n + 1, max((r2 + count) % n + 1, n - (l2 + count) % n)))\n        else:\n            print(k)\n    elif max(max1, max2) <= k:\n        print(max(max1, max2))\n    else:\n        print(k)", "(n, q, k) = map(int, input().split())\nintMax = 10 ** 10\na = 2 * list(map(int, input().split()))\nfor i in range(2 * n - 2, -1, -1):\n    if a[i] == 1:\n        a[i] += a[i + 1]\nt = [-1 for i in range(8 * n + 2)]\n\ndef build(ss, se, nd):\n    if ss == se:\n        t[nd] = ss\n        return\n    mid = (ss + se) // 2\n    build(ss, mid, 2 * nd)\n    build(mid + 1, se, 2 * nd + 1)\n    if a[t[2 * nd]] > a[t[2 * nd + 1]]:\n        t[nd] = t[2 * nd]\n    else:\n        t[nd] = t[2 * nd + 1]\n    return\n\ndef query(fs, fe, ss, se, nd):\n    if fs <= ss and fe >= se:\n        return t[nd]\n    elif se < fs or ss > fe:\n        return -50\n    else:\n        mid = (ss + se) // 2\n        p = query(fs, fe, ss, mid, 2 * nd)\n        q = query(fs, fe, mid + 1, se, 2 * nd + 1)\n        if p < 0:\n            return q\n        if q < 0:\n            return p\n        if a[p] > a[q]:\n            return p\n        else:\n            return q\nbuild(0, 2 * n - 1, 1)\nqueries = input()\np = n\nfor q in queries:\n    if q == '?':\n        indx = query(p, p + n - 1, 0, 2 * n - 1, 1)\n        if indx + a[indx] - 1 > p + n - 1:\n            pos1 = p + n - indx\n        else:\n            pos1 = a[indx]\n        if indx == p:\n            print(min(pos1, k))\n        else:\n            pos2 = a[query(p, indx - 1, 0, 2 * n - 1, 1)]\n            print(min(max(pos1, pos2), k))\n    else:\n        p -= 1\n        if p == 0:\n            p = n", "(n, q, k) = input().split()\n(n, q, k) = [int(n), int(q), int(k)]\narr = list(map(int, input().split()))\ns = input()\ncount = 0\n_max = 0\ncheck = 0\n_max2 = 0\nlen_cross = 0\nstart = 0\nmax_len = 0\nstart1 = 0\nend1 = 0\nif arr.count(1) == 0:\n    for _ in s:\n        if _ == '?':\n            print(0)\nelif arr.count(0) == 0:\n    for _ in s:\n        if _ == '?':\n            if n <= k:\n                print(n)\n            else:\n                print(k)\nelse:\n    arr.append(0)\n    for i in range(0, n + 1):\n        if arr[i] == 1:\n            count += 1\n            if count == 1:\n                start = i\n        else:\n            if count >= _max:\n                _max2 = _max\n                _max = count\n                max_start = start\n                max_end = i - 1\n            elif count > _max2:\n                _max2 = count\n            start = 0\n            count = 0\n    arr.pop()\n    if arr[0] == 1 and arr[n - 1] == 1:\n        check = 1\n        if arr.count(0) > 0:\n            end1 = ''.join((str(x) for x in arr)).index('0') - 1\n            start1 = n - ''.join((str(x) for x in arr[::-1])).index('0')\n        else:\n            check = 0\n    for _ in s:\n        if _ == '?':\n            if max_end >= max_start:\n                max_len = max_end - max_start + 1\n            else:\n                max_len = max(n - max_start, max_end + 1)\n            max_len = max(max_len, _max2)\n            if check == 1:\n                if start1 <= end1:\n                    len_cross = end1 - start1 + 1\n                else:\n                    len_cross = max(n - start1, end1 + 1)\n            if check == 1:\n                if max(len_cross, max_len) <= k:\n                    print(max(len_cross, max_len))\n                else:\n                    print(k)\n            elif max_len <= k:\n                print(max_len)\n            else:\n                print(k)\n        elif _ == '!':\n            max_start = max_start + 1\n            max_end = max_end + 1\n            if max_end == n:\n                max_end = 0\n            if max_start == n:\n                max_start = 0\n            if check == 1:\n                start1 += 1\n                end1 += 1\n                if start1 == n:\n                    start1 = 0\n                if end1 == n:\n                    end1 = 0", "def maxi(A):\n    (pad, i) = (0, len(A) - 1)\n    if A[0] == 1 and A[-1] == 1:\n        while i >= 0:\n            if A[i] == 0:\n                break\n            i -= 1\n        B = A[i + 1:]\n        B.extend(A[:i])\n        (A, pad) = (B, len(A) - i - 1)\n    A.append(0)\n    (index1, maxx, max1, max2, val) = (0, 0, 0, 0, 1)\n    for j in range(len(A)):\n        if A[j] == 1:\n            maxx += 1\n        elif A[j] == 0:\n            if maxx > max1:\n                max1 = maxx\n                index1 = j - 1\n            elif maxx <= max1 and maxx > max2:\n                max2 = maxx\n            maxx = 0\n    return (index1 - pad, max1, max2)\n(N, Q, K) = map(int, input().split())\nstring = [int(x) for x in input().split()]\nstring2 = list(string)\nquery = input()\n(index1, max1, max2) = maxi(string2)\nindex1 += 1\nfor val in query:\n    if val == '?':\n        if index1 < max1:\n            a = max(index1, max1 - index1, max2)\n            if a > K:\n                print(K)\n            else:\n                print(a)\n        elif max1 > K:\n            print(K)\n        else:\n            print(max1)\n    elif val == '!':\n        index1 += 1\n        if index1 == len(string) + 1:\n            index1 = 1", "def max1(count, b, c):\n    a = 0\n    for i in range(c):\n        if b[i] == 1:\n            if a < count[i]:\n                a = count[i]\n    return a\n(n, q, k) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\ns = input()\nb = [a[0]]\ncount = [1]\nc = 1\nfor i in range(1, n):\n    if a[i] == b[c - 1]:\n        count[c - 1] += 1\n    else:\n        b.append(a[i])\n        count.append(1)\n        c = c + 1\nl = max1(count, b, c)\ncheck = 0\nfor i in range(q):\n    if s[i] == '?':\n        if l < k and check == 1:\n            l = max1(count, b, c)\n            check = 0\n            print(l)\n        elif l < k:\n            print(l)\n        else:\n            print(k)\n    else:\n        if l == count[c - 1] and b[c - 1] == 1:\n            l = l - 1\n            check = 1\n        if count[c - 1] == 1:\n            item = b.pop()\n            count.pop()\n            c = c - 1\n        else:\n            count[c - 1] -= 1\n            item = b[c - 1]\n        if item == b[0]:\n            count[0] += 1\n        else:\n            b.insert(0, item)\n            count.insert(0, 1)\n            c = c + 1\n        if l < count[0] and b[0] == 1:\n            l = count[0]", "ar = [int(e) for e in input().split()]\na = [int(e) for e in input().split()]\ns = input()\nm = {}\nmx = 0\nc = 0\nl = []\nfor i in range(-1, -ar[0] - 1, -1):\n    if a[i] == 0 and c > 0:\n        l.append(c)\n        if c >= mx:\n            mx = c\n            idx = len(l) - 1\n        c = 0\n    elif a[i] == 1:\n        c += 1\nl.append(c)\nif c >= mx:\n    mx = c\n    idx = len(l) - 1\nif a[-1] == 0 and a[0] == 0:\n    del l[-1]\nm[0] = mx\nsidx = 0\nk = 0\nmx = 0\nf = 0\nfor j in range(1, ar[0]):\n    if a[-j] == 0:\n        l.append(0)\n        m[j] = m[j - 1]\n    else:\n        l[k] -= 1\n        l[-1] += 1\n        if l[idx] <= l[-1]:\n            idx = len(l) - 1\n        elif k == idx and f == 0:\n            for i in range(k + 1, len(l)):\n                if mx <= l[i]:\n                    sidx = i\n                    mx = l[i]\n                f = 1\n        if l[idx] <= l[sidx]:\n            idx = sidx\n        if l[k] == 0:\n            k += 1\n        m[j] = l[idx]\nc = 0\nfor i in s:\n    if i == '!':\n        c += 1\n    else:\n        x = int(c % ar[0])\n        if m[x] < ar[2]:\n            print(m[x])\n        else:\n            print(ar[2])", "def parseQueries(queries, q):\n    move1 = []\n    move2 = []\n    prev = ''\n    count = 1\n    if queries[0] == '!':\n        prev = '!'\n    else:\n        move1 = [0]\n    for i in range(1, q):\n        el = queries[i]\n        if el == prev:\n            count += 1\n        else:\n            if prev == '!':\n                move1.append(count)\n            else:\n                move2.append(count)\n            count = 1\n            prev = el\n    if prev == '!':\n        move1.append(count)\n    else:\n        move2.append(count)\n    return (move1, move2)\n\ndef getMax2(max2, endex2, start, end):\n    if max2 > start + end:\n        return [max2, endex2]\n    else:\n        return [start + end, start]\n\ndef updateTrack(track, shift, n):\n    track[0][1] = (track[0][1] + shift) % n\n    track[1][1] = (track[1][1] + shift) % n\n    return track\n\ndef getResult(track, k):\n    e1 = track[0]\n    max1 = max(min(e1[0], e1[1]), e1[0] - e1[1])\n    e2 = track[1]\n    max2 = max(min(e2[0], e2[1]), e2[0] - e2[1])\n    return min(k, max(max1, max2))\n(n, q, k) = map(int, input().strip().split())\narr = list(map(int, input().strip().split()))\nqueries = input()\n(move1, move2) = parseQueries(queries, q)\ncountStart = True\nstart = 0\nend = 0\ntemp = 0\nmax1 = 0\nendex1 = 0\nmax2 = 0\nendex2 = 0\nfor i in range(n):\n    e = arr[i]\n    if e == 1:\n        if countStart:\n            start += 1\n        end += 1\n        temp += 1\n    else:\n        if countStart:\n            countStart = False\n        elif temp >= max1:\n            max2 = max1\n            endex2 = endex1\n            endex1 = i\n            max1 = temp\n        elif temp > max2:\n            max2 = temp\n            endex2 = i\n        end = 0\n        temp = 0\ntrack = [[max1, endex1], getMax2(max2, endex2, start, end)]\nquery = False\ni = 0\nwhile True:\n    try:\n        if query:\n            query = False\n            result = getResult(track, k)\n            for j in range(0, move2[i]):\n                print(result)\n            i += 1\n        else:\n            query = True\n            updateTrack(track, move1[i], n)\n    except IndexError:\n        break", "def longest_subsequence(d):\n    d = d + [0]\n    tmp = 0\n    mx = -1\n    s = -1\n    e = -1\n    store = []\n    for i in range(n + 1):\n        if d[i] == 0:\n            e = i - 1\n            if mx < max(mx, tmp):\n                store = [[s, e]]\n                mx = max(mx, tmp)\n            elif mx == tmp:\n                store.append([s, e])\n            tmp = 0\n        else:\n            if tmp == 0:\n                s = i\n            tmp += 1\n    return (mx, store)\n\ndef arraySegment(f):\n    answer = []\n    lenArr = len(f)\n    tm = 0\n    for i in range(lenArr - 1):\n        if f[i] == 1 and f[i + 1] == 1:\n            tm += 1\n        elif tm == 0:\n            continue\n        else:\n            answer.append(tm + 1)\n            tm = 0\n    return answer\n(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nqueries = list(input())\nlastZero = -1\nshift = 0\nfor i in range(1, n + 1):\n    if a[-i] == 0:\n        lastZero = n - i\n        break\nlastOne = lastZero + 1\na = a[lastOne:] + a[:lastOne]\nshift += n - lastOne\n(maxi, cluster) = longest_subsequence(a)\nans = []\nif len(cluster) >= 2 or maxi == n:\n    ans = [maxi] * n\nelse:\n    arraySeg = arraySegment(a)\n    arraySeg.sort(reverse=True)\n    secHigh = 0\n    if len(arraySeg) > 1:\n        secHigh = arraySeg[1]\n    tmp = n - cluster[0][1]\n    while tmp > 0:\n        if len(ans) == n:\n            break\n        ans.append(maxi)\n        tmp -= 1\n    tmp3 = maxi\n    tmp4 = maxi\n    if (tmp3 - 1) % 2 == 0:\n        for i in range(tmp3 - 1):\n            if len(ans) == n:\n                break\n            if i < (tmp3 - 1) // 2:\n                tmp4 -= 1\n                ans.append(max(tmp4, secHigh))\n            else:\n                ans.append(max(tmp4, secHigh))\n                tmp4 += 1\n    else:\n        for i in range(tmp3 - 1):\n            if len(ans) == n:\n                break\n            if i < (tmp3 - 1) // 2 + 1:\n                tmp4 -= 1\n                ans.append(max(tmp4, secHigh))\n            else:\n                tmp4 += 1\n                ans.append(max(tmp4, secHigh))\n    reamaining = n - len(ans)\n    if reamaining > 0:\n        ans = ans + [maxi] * reamaining\nans = ans[-shift:] + ans[:-shift]\nqueries_decode = []\ntmp = 0\nq = len(queries)\nfor i in range(q):\n    if queries[i] == '?':\n        queries_decode.append(tmp)\n        continue\n    else:\n        tmp += 1\nfor i in queries_decode:\n    j = i % n\n    anss = ans[j]\n    if anss > k:\n        print(k)\n    else:\n        print(anss)", "def queue(seq, counter, bcount, lcount, scount, n, f, latest, ln, ln2, cf):\n    if n == size - 1:\n        bcount = ref1\n        lcount = ref2\n        scount = ref3\n        latest = 0\n        ln = -2\n        ln2 = -2\n    if bcount == 0:\n        bcount = ref1\n    if lcount == 0:\n        lcount = ref2\n    if scount == 0:\n        scount = ref3\n    if seq[n] == 1 and n >= 0:\n        counter += 1\n        n -= 1\n        if f == 1:\n            bcount += 1\n    elif seq[n] == 0 and n >= 0:\n        if counter > latest:\n            if cf == 0:\n                latest = counter\n                ln = ref1 - 1\n                ln2 = -2\n            elif cf == 1 and seq[size - 1] == seq[0] == 0:\n                latest = counter\n                ln = n + counter + 1\n                ln2 = n + 1\n            elif cf == 1 and seq[size - 1] == seq[0] == 1:\n                latest = counter\n                ln = ref1 - 1\n                ln2 = -2\n        counter = 0\n        f = 0\n        n -= 1\n    if n < index1 and n >= index1 - ref2:\n        lcount -= 1\n    if n < index2 and n >= index2 - ref3:\n        scount -= 1\n    if n < lind:\n        bcount -= 1\n    if n < ln and n > ln2:\n        latest -= 1\n    if n < 0:\n        n = size - 1\n        cf = 1\n    return [counter, bcount, lcount, scount, n, f, latest, ln, ln2, cf]\n(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nct1 = 0\nd = []\nb = []\nflag = 0\nf2 = 0\nwhile ct1 < n and a[0] == 1 and (a[ct1] == 1):\n    ct1 += 1\n    flag = 1\nct = 0\nlind = -1 + ct1\nf = 1\nfor i in range(n - 1):\n    if a[i] == 1 or a[i + 1]:\n        flag = 1\n    if a[i] == a[i + 1] and a[i] == 1:\n        ct += 1\n        flag = 1\n        d.append(i)\n        d.append(i + 1)\n    else:\n        b.append([ct, d])\n        ct = 0\n        d = []\n    if a[i] == a[i + 1] and a[i] == 1 and (i + 1 == n - 1):\n        b.append([ct, d])\nb.sort(key=lambda x: x[0])\nct = max(b, key=lambda x: x[0])\nb.sort(reverse=True, key=lambda x: x[0])\nct2 = 0\nct3 = 0\nindex1 = -2\nindex2 = -2\nln = -2\nln2 = -2\nif len(b) > 0 and a.count(1) > 0 and (ct[0] > 0):\n    i = 1\n    ct2 = ct[0] + 1\n    index1 = max(set(ct[1]))\n    while i < len(b):\n        if 0 not in b[i][1] and b[i][0] != 0:\n            index2 = max(set(b[i][1]))\n            ct3 = b[i][0] + 1\n            break\n        i += 1\nelif ct[0] == 0 and a.count(1) > 0 and (a[0] != a[n - 1] != 1):\n    f2 = 1\nref1 = ct1\nref2 = ct2\nref3 = ct3\nsize = n\nn = n - 1\ncounter = 0\nlate = 0\ncf = 0\nqr = input()\nc = []\nfor i in range(q):\n    b = []\n    if qr[i] == '!':\n        if flag == 1:\n            qlist = queue(a, counter, ct1, ct2, ct3, n, f, late, ln, ln2, cf)\n            counter = qlist[0]\n            ct1 = qlist[1]\n            ct2 = qlist[2]\n            ct3 = qlist[3]\n            n = qlist[4]\n            f = qlist[5]\n            late = qlist[6]\n            ln = qlist[7]\n            ln2 = qlist[8]\n            cf = qlist[9]\n    if qr[i] == '?':\n        if flag == 0 and f2 == 0:\n            c.append(0)\n            continue\n        elif f2 == 1:\n            c.append(1)\n            continue\n        c.append(max(counter, ct1, ct2, ct3, late))\nfor i in c:\n    if i <= k and i <= size:\n        print(i)\n    elif i > size and size <= k:\n        print(size)\n    else:\n        print(k)", "from collections import deque as deq\n\ndef makeString(arr):\n    a = ''.join(arr)\n    return a\n\ndef findSequences(s):\n    l = list((len(x) for x in s.split('0')))\n    return l\n\ndef adjust(x, k):\n    if x >= k:\n        return k\n    else:\n        return x\n\ndef main():\n    (n, q, k) = [int(x) for x in input().strip().split()]\n    arr = [str(x) for x in input().strip().split()]\n    queryString = list(str(input()))\n    arrString = makeString(arr)\n    seq = findSequences(arrString)\n    seq1 = seq[:]\n    seq1.sort(reverse=True)\n    seq2 = seq[:]\n    (max1, max2) = (seq1[0], seq1[0])\n    if len(seq) > 1:\n        max2 = seq1[1]\n    seq2 = seq2[::-1]\n    table = {}\n    state = 0\n    ind1 = len(seq2) - seq2.index(max1) - 1\n    items = deq(arr)\n    itemLens = deq(seq)\n    l = len(itemLens)\n    table[0] = adjust(max1, k)\n    maxUpdates = min(n, queryString.count('!'))\n    while maxUpdates > 0:\n        maxUpdates -= 1\n        state = state + 1\n        items.rotate()\n        if items[0] == '1':\n            itemLens[0] += 1\n            itemLens[l - 1] -= 1\n            if ind1 == l - 1:\n                max1 -= 1\n        if itemLens[l - 1] == 0:\n            itemLens.rotate()\n            ind1 += 1\n            ind1 = ind1 % l\n            if ind1 == 0:\n                ind1 = 1\n            max1 = itemLens[ind1]\n        if not state % n in table:\n            if n <= 1000:\n                table[state % n] = adjust(max(itemLens), k)\n            else:\n                table[state % n] = adjust(max(max1, max2, itemLens[0]), k)\n    state = 0\n    for quer in queryString:\n        if quer == '!':\n            state = (state + 1) % n\n        elif quer == '?':\n            print(adjust(table[state], k))\nmain()", "def amit(input):\n    answer = list(map(len, input.split('0')))\n    return answer\n\ndef amit2(arr, n):\n    count = 0\n    result = 0\n    ind = 0\n    for i in range(0, n):\n        if arr[i] == 0:\n            count = 0\n        else:\n            count += 1\n            if result < count:\n                ind = i\n            result = max(result, count)\n    return (result, ind)\n(n, q, k) = map(int, input().split())\narr = [i for i in input().split()]\nar = [int(i) for i in arr]\nqer = k\ns = ''.join(arr)\nans = -2\nif arr.count('0') == n:\n    ans = -1\nif arr.count('1') == n:\n    ans = -3\nquery = input()\nstrike = 0\ndic = {}\nxolo = amit(s)\ncolo = xolo[:]\nwolo = xolo[:]\nreal = max(xolo)\nif ar[-1] == 1 and ar[0] == 1:\n    strike = 1\nif ans == -1:\n    for i in query:\n        if i == '?':\n            print(0)\nelif ans == -3:\n    for i in query:\n        if i == '?':\n            print(k)\nelif xolo.count(max(xolo)) > 1 and strike == 0:\n    k = min(max(xolo), k)\n    dic[0] = k\n    count = 0\n    for i in range(1, len(arr) + 1):\n        dic[i] = k\n    for i in query:\n        if i == '?':\n            if ans == -1:\n                print(0)\n                continue\n            if ans == -3:\n                print(k)\n                continue\n            print(dic[count])\n        else:\n            count += 1\n            if count == n:\n                count = 0\nelif strike == 0:\n    xolo.remove(real)\n    fake = max(xolo)\n    dic[0] = min(real, k)\n    (maxy, ind) = amit2(ar, n)\n    maxy -= 1\n    gh = maxy + 1\n    ind = n - ind - 1\n    count = 0\n    for i in range(1, len(arr) + 1):\n        if count == ind:\n            dic[i] = min(max(fake, maxy, gh - maxy), k)\n            maxy -= 1\n            if maxy == 0:\n                count = real - 1\n            continue\n        else:\n            count += 1\n            dic[i] = min(real, k)\n    count = 0\n    for i in query:\n        if i == '?':\n            if ans == -1:\n                print(0)\n                continue\n            if ans == -3:\n                print(k)\n                continue\n            print(dic[count])\n        else:\n            count += 1\n            if count == n:\n                count = 0\nelse:\n    rolo = colo[:]\n    rolo.remove(real)\n    fake = max(rolo)\n    (maxy, ind) = amit2(ar, n)\n    ind = n - ind - 1\n    maxy -= 1\n    fake2 = fake\n    if xolo.count(max(xolo)) == 1 and colo[-1] != max(xolo) and (colo[0] != max(xolo)):\n        fake = real\n    len1 = colo[0]\n    len2 = colo[-1]\n    k = qer\n    dic[0] = min(real, k)\n    i = 1\n    while i != len2 + 1:\n        dic[i] = min(max(len1 + i, len2 - i, fake), k)\n        i += 1\n    lo = 1\n    while lo != len1:\n        dic[n - lo] = min(max(len1 - lo, len2 + lo, fake), k)\n        lo += 1\n    count = 0\n    gh = maxy + 1\n    for j in range(1, len(arr) + 1):\n        if count == ind:\n            if j not in dic:\n                dic[j] = min(max(len1 + len2, fake2, maxy, gh - maxy), k)\n            maxy -= 1\n            if maxy == 0:\n                count = real - 1\n            continue\n        else:\n            count += 1\n            if j not in dic:\n                dic[j] = min(max(real, len1 + len2), k)\n    count = 0\n    for i in query:\n        if i == '?':\n            if ans == -1:\n                print(0)\n                continue\n            if ans == -3:\n                print(k)\n                continue\n            print(dic[count])\n        else:\n            count += 1\n            if count == n:\n                count = 0", "(n, q, k) = map(int, input().split())\na = input()\na = a.replace(' ', '')\nquery = input()\ncount = []\ntemp = 0\nm = 0\nind = 0\nflag = False\nfor i in range(n):\n    if a[i] == '1':\n        temp += 1\n    else:\n        if temp != 0:\n            count.append(temp)\n            if temp > m:\n                m = temp\n        temp = 0\nif temp != 0:\n    count.append(temp)\n    if temp > m:\n        m = temp\nfor i in range(q):\n    if query[i] == '!':\n        last = a[-1]\n        if last == '1':\n            flag = True\n            if m != count[-1]:\n                flag = False\n            if count[-1] - 1 != 0:\n                count[-1] -= 1\n            elif len(count) > 1:\n                count.pop(-1)\n            else:\n                count[0] = 0\n            if a[0] == '1':\n                count[0] += 1\n                if count[0] >= m:\n                    flag = True\n            else:\n                count = [1] + count\n        else:\n            flag = False\n        a = last + a[:-1]\n    elif len(count) > 0:\n        if flag:\n            flag = False\n            m = max(count)\n        if m < k:\n            print(m)\n        else:\n            print(k)\n    else:\n        print(0)", "(n, q, k) = map(int, input().split())\nl = list(map(int, input().split()))\ns = str(input())\na = []\nb = []\nc = []\nf = 0\nfor i in range(n):\n    if l[i] == 1:\n        if f == 0:\n            a.append(i + 1)\n        if i == n - 1:\n            b.append(i + 1)\n        f += 1\n    else:\n        if f > 0:\n            b.append(i)\n        f = 0\nf = len(a)\nfor i in range(f):\n    c.append(b[i] - a[i] + 1)\nl1 = []\nl2 = []\nl3 = []\nif len(a) > 0:\n    if a[0] == 1:\n        l1.append(a[0])\n        l2.append(b[0])\n        l3.append(c[0])\n        a.remove(a[0])\n        b.remove(b[0])\n        c.remove(c[0])\nfor i in range(2):\n    if len(c) > 0:\n        t = c.index(max(c))\n        l1.append(a[t])\n        l2.append(b[t])\n        l3.append(c[t])\n        a.remove(a[t])\n        b.remove(b[t])\n        c.remove(c[t])\na = []\nb = []\nc = []\nfor i in range(len(l1)):\n    t = l1.index(min(l1))\n    a.append(l1[t])\n    b.append(l2[t])\n    c.append(l3[t])\n    l1.remove(l1[t])\n    l2.remove(l2[t])\n    l3.remove(l3[t])\nd = {}\nco = 0\nif len(c) != 0:\n    d[0] = k if max(c) > k else max(c)\nelse:\n    d[0] = 0\nif d[0] == 0:\n    for i in range(q):\n        if s[i] == '?':\n            print('0')\n    exit()\nfor i in range(q):\n    if s[i] == '!':\n        co += 1\n        if co % n not in d:\n            f = len(a)\n            for i in range(f):\n                a[i] += 1\n                b[i] += 1\n            if b[f - 1] == n + 1:\n                if a[0] == 2:\n                    a[0] -= 1\n                    c[0] += 1\n                else:\n                    a.insert(0, 1)\n                    f += 1\n                    c.insert(0, 1)\n                    b.insert(0, 1)\n                if a[f - 1] == n + 1:\n                    a.pop()\n                    b.pop()\n                    c.pop()\n                else:\n                    b[f - 1] -= 1\n                    c[f - 1] -= 1\n            d[co] = k if max(c) > k else max(c)\n    else:\n        print(d[co % n])", "def m(a, b, c, k):\n    if a > b and a <= c:\n        if a <= k:\n            return a\n        return k\n    elif a > b and a > c:\n        if c <= k:\n            return c\n        return k\n    elif b > c:\n        if c <= k:\n            return c\n            return k\n    if b <= k:\n        return b\n    return k\n(n, q, k) = map(int, input().split())\na = list(map(int, input().split()))\nquery = input()\nmax1 = 0\nmax2 = 0\nm1cord = 0\ncount = 0\nm1s = 0\nsi = -1\nli = -1\nfor i in range(n):\n    if a[i] == 0:\n        break\nif i < n - 1:\n    si = i - 1\nelif a[i] == 1:\n    si = n - 1\nfor i in range(1, n + 1):\n    if a[-i] == 0:\n        break\nli = n - i + 1\nif a[-1] == 0:\n    li = -1\nif si != -1 and li != -1 and (si + 1 + n - li >= max1):\n    max2 = max1\n    max1 = si + 1 + n - li\n    m1cord = si\n    m1s = li\nelif si != -1 and li != -1 and (si + 1 + n - li > max2):\n    max2 = si + 1 + n - li\nfor i in range(n):\n    if a[i] == 1:\n        count += 1\n    else:\n        if count >= max1:\n            max2 = max1\n            max1 = count\n            m1cord = i - 1\n            m1s = m1cord - max1 + 1\n        elif count > max2 and i != si + 1 and (li != n - count):\n            max2 = count\n        count = 0\n    if i == n - 1 and count >= max1:\n        max2 = max1\n        max1 = count\n        m1cord = i\n        m1s = m1cord - max1 + 1\n        count = 0\n    elif i == n - 1 and count > max2 and (i != si) and (li != n - count):\n        max2 = count\n        count = 0\nfor j in query:\n    if j == '!':\n        m1cord += 1\n        m1cord %= n\n        m1s += 1\n        m1s %= n\n    elif m(m1cord + 1, n - m1s, max1, k) > max2:\n        print(m(m1cord + 1, n - m1s, max1, k))\n    else:\n        print(m(max2, max2, max2, k))", "(n, q, k) = map(int, input().strip().split())\nli = [int(x) for x in input().strip().split()]\ns = (-1, -1)\nm = (-1, -1)\nl = (-1, -1)\ne = (-1, -1)\nf = 0\nb = -1\nfor (i, x) in enumerate(li):\n    if x == 1 and f == 0:\n        b = i\n        f = 1\n    if x == 0 and f == 1 or i == n - 1:\n        if x == 1:\n            y = i\n        else:\n            y = i - 1\n        if b == 0:\n            s = (b, y)\n        if i == n - 1:\n            e = (b, y)\n        if l[0] == -1:\n            l = (b, y)\n        elif l[1] - l[0] < y - b:\n            m = l\n            l = (b, y)\n        elif m[1] - m[0] < y - b:\n            m = (b, y)\n        f = 0\n\ndef comp(a, b):\n    if a[0] < b[0]:\n        return True\n    return False\n\ndef cmp_to_key(mycmp):\n\n    class K:\n\n        def __init__(self, obj, *args):\n            self.obj = obj\n\n        def __lt__(self, other):\n            return mycmp(self.obj, other.obj)\n    return K\nquer = str(input())\nf = 0\nfor x in quer:\n    if x == '!':\n        f += 1\n    else:\n        ti = []\n        if s[0] != -1:\n            t0 = s[0] + f\n            t1 = s[1] + f\n            while t0 > n - 1:\n                t0 = t0 - n\n            while t1 > n - 1:\n                t1 = t1 - n\n            s = (t0, t1)\n        if e[0] != -1:\n            t0 = e[0] + f\n            t1 = e[1] + f\n            while t0 > n - 1:\n                t0 = t0 - n\n            while t1 > n - 1:\n                t1 = t1 - n\n            e = (t0, t1)\n        if m[0] != -1:\n            t0 = m[0] + f\n            t1 = m[1] + f\n            while t0 > n - 1:\n                t0 = t0 - n\n            while t1 > n - 1:\n                t1 = t1 - n\n            m = (t0, t1)\n        if l[0] != -1:\n            t0 = l[0] + f\n            t1 = l[1] + f\n            while t0 > n - 1:\n                t0 = t0 - n\n            while t1 > n - 1:\n                t1 = t1 - n\n            l = (t0, t1)\n        ti = [y for y in list(set([s, e, m, l])) if y[0] != -1]\n        ti.sort(key=cmp_to_key(comp))\n        start = 0\n        first = 0\n        v1 = 0\n        f = 0\n        p = 0\n        v = 0\n        for (i, x) in enumerate(ti):\n            if i == 0:\n                start = x[0] - 1\n                first = x[1] - x[0] + 1\n            if i == len(ti) - 1 and start == x[1]:\n                v1 = first + start + 1\n            if ti[i - 1][1] + 1 == x[0] and i != 0:\n                if x[1] >= x[0]:\n                    f += x[1] - x[0] + 1\n                    v = max(v, f)\n                else:\n                    f += n - x[0]\n                    v = max(max(v, f), x[1] + 1)\n            elif x[1] >= x[0]:\n                v = max(v, x[1] - x[0] + 1)\n                f = x[1] - x[0] + 1\n            else:\n                v = max(v, max(n - x[0], x[1] + 1))\n                f = x[1] + 1\n        print(min(k, max(v, v1)))\n        f = 0", "def ma(a, b, c):\n    if a > b:\n        if a > c:\n            return a\n        else:\n            return c\n    elif b > c:\n        return b\n    else:\n        return c\nfrom collections import deque\n(n, q, k) = map(int, input().split(' '))\na = list(map(int, input().split(' ')))\nb = list(input())\nf = 0\nfi = 0\nsi = 0\ns = 0\ncount = 0\nm = 0\nc = [0 for i in range(n)]\nif a[0] == 1:\n    count = 1\nfor i in range(1, n):\n    if a[i] == 1 and a[i - 1] == 1:\n        count += 1\n    elif a[i] == 1 and a[i - 1] == 0:\n        count = 1\n    else:\n        count = 0\n    if count > m:\n        m = count\n        fi = i\nf = m\nm = 0\ncount = 0\nfor i in range(fi - f + 1, fi + 1):\n    c[i] = 1\nif a[0] == 1 and c[0] == 0:\n    count = 1\n    si = 0\n    m = 1\nfor i in range(1, n):\n    if a[i] == 1 and a[i - 1] == 1 and (c[i] == 0):\n        count += 1\n    elif a[i] == 1 and a[i - 1] == 0 and (c[i] == 0):\n        count = 1\n    else:\n        count = 0\n    if count > m and count <= f:\n        m = count\n        si = i\ns = m\nfr = 0\nde = deque(a)\nfor i in range(n):\n    if a[i] == 1:\n        fr += 1\n    else:\n        break\nfor i in range(q):\n    if b[i] == '?':\n        print(min(ma(fr, f, s), k))\n    else:\n        r = de.pop()\n        if r == 1:\n            fr += 1\n            fi += 1\n            si += 1\n            if fr > n:\n                fr = n\n            if si == n:\n                si = n - 1\n                s += -1\n            if fi == n:\n                fi = n - 1\n                f += -1\n        else:\n            if fr > f:\n                fi = fr - 1\n                f = fr\n            elif fr > s:\n                si = fr - 1\n                s = fr\n            fr = 0\n            fi += 1\n            si += 1\n        de.appendleft(r)", "(n, q, k) = input().split()\n(n, q, k) = [int(n), int(q), int(k)]\na = list(map(int, input().split()))\nq = input()\nsum1 = 0\nmax1 = 0\nfor i in range(n):\n    sum1 = sum1 + a[i]\n    if sum1 > max1:\n        max1 = sum1\n        st = i - max1 + 1\n    if a[i] == 0:\n        sum1 = 0\nif max1 == n:\n    for s in q:\n        if s == '?':\n            if n <= k:\n                print(n)\n            else:\n                print(k)\nelse:\n    sums = 0\n    sumn = 0\n    max2 = 0\n    i = 0\n    while i < n:\n        sums = sums + a[i]\n        if a[i] == 0:\n            break\n        i += 1\n    i = n - 1\n    while i >= 0:\n        sumn = sumn + a[i]\n        if a[i] == 0:\n            break\n        i -= 1\n    sum1 = sums + sumn\n    if sum1 > max1:\n        max1 = sum1\n        en = sums - 1\n        st = n - sumn\n    elif sum1 == max1:\n        max1 = sum1\n        en = sums - 1\n        st = n - sumn\n        max2 = max1\n    else:\n        en = st + max1 - 1\n    if max2 == 0:\n        sum2 = 0\n        if st < en:\n            i = 0\n            if i == st:\n                i = en + 1\n            while i < n:\n                if i == st:\n                    i = en + 1\n                sum2 = sum2 + a[i]\n                if sum2 > max2:\n                    max2 = sum2\n                if a[i] == 0:\n                    sum2 = 0\n                i += 1\n        else:\n            i = en + 1\n            while i < st:\n                sum2 = sum2 + a[i]\n                if sum2 > max2:\n                    max2 = sum2\n                if a[i] == 0:\n                    sum2 = 0\n                i += 1\n    for s in q:\n        if s == '?':\n            if st + max1 > n:\n                a1 = (st + max1) % n\n                a2 = max1 - a1\n                a3 = max2\n            else:\n                a1 = max1\n                a2 = 0\n                a3 = 0\n            if max(a1, a2, a3) <= k:\n                print(max(a1, a2, a3))\n            else:\n                print(k)\n        else:\n            st += 1\n            st = st % n", "from collections import namedtuple\nimport sys\nRED = 1\nBLACK = 0\n\nclass RBTree:\n\n    class Node:\n\n        def __init__(self, val, par=None, left=None, right=None, col=RED):\n            self.val = val\n            self.par = par\n            self.left = left\n            self.right = right\n            self.col = col\n\n        @property\n        def uncle(self):\n            assert self.par\n            return self.par.sib\n\n        @property\n        def grandpa(self):\n            assert self.par\n            return self.par.par\n\n        @property\n        def sib(self):\n            assert self.par\n            return self.par.left if self.par.right == self else self.par.right\n\n        @property\n        def is_left(self):\n            assert self.par\n            return self.par.left == self\n\n        @property\n        def is_right(self):\n            assert self.par\n            return self.par.right == self\n\n        def replace(self, old_child, new_child):\n            assert old_child == self.left or old_child == self.right\n            if old_child == self.left:\n                self.left = new_child\n            if old_child == self.right:\n                self.right = new_child\n\n        def __repr__(self):\n            return '(val={}; p={}; l={}; r={}; c={})'.format(self.val, self.par.val if self.par else None, self.left.val if self.left else None, self.right.val if self.right else None, 'BLACK' if self.col == BLACK else 'RED')\n\n    class NullNode(Node):\n\n        def __init__(self, par):\n            super().__init__(None, par=par, col=BLACK)\n\n        @property\n        def sib(self):\n            assert self.par\n            assert not self.par.left or not self.par.right\n            return self.par.left if self.par.left else self.par.right\n\n        @property\n        def is_left(self):\n            assert self.par\n            assert not self.par.left or not self.par.right\n            return not self.par.left\n\n        @property\n        def is_right(self):\n            assert self.par\n            assert not self.par.left or not self.par.right\n            return not self.par.right\n\n        def replace(self, old_child, new_child):\n            raise NotImplementedError('NullNode can not have children')\n\n    def __init__(self):\n        self._root = None\n        self._size = 0\n\n    def __iter__(self):\n        return self._traverse(self._root)\n\n    def __len__(self):\n        return self._size\n\n    def __contains__(self, x):\n        if not self._root:\n            return False\n        return self._find(self._root, x) is not None\n\n    def __repr__(self):\n        return 'RBTree(root={})'.format(self._root)\n\n    def insert(self, x):\n        self._size += 1\n        n = RBTree.Node(x)\n        if not self._root:\n            self._root = n\n            n.col = BLACK\n            return\n        self._insert_node(self._root, n)\n        self._rebalance_addition(n)\n\n    def remove(self, x):\n        n = self._find(self._root, x)\n        if not n:\n            raise KeyError(x)\n        (n, s) = self._remove_node(n)\n        if not s.par:\n            if not isinstance(s, RBTree.NullNode):\n                self._root = s\n            else:\n                self._root = None\n                return\n        if n.col == RED:\n            return\n        if s.col == RED or self._root == s:\n            s.col = BLACK\n            return\n        self._rebalance_removal(s)\n\n    def min(self):\n        if not self._root:\n            raise ValueError('Can not find min element of an empty tree')\n        return self._left_most_node(self._root).val\n\n    def max(self):\n        if not self._root:\n            raise ValueError('Can not find max element of an empty tree')\n        return self._right_most_node(self._root).val\n\n    def validate(self):\n        (is_valid, _) = self._validate_and_get_black_height(self._root)\n        return is_valid\n\n    def _traverse(self, n):\n        if n.left:\n            yield from self._traverse(n.left)\n        yield n.val\n        if n.right:\n            yield from self._traverse(n.right)\n        if not n:\n            return\n\n    def _validate_and_get_black_height(self, n):\n        if n is None:\n            return (True, 0)\n        if n.par and n.par.col == RED and (n.col == RED):\n            print('Found two red nodes in a row: {} and {}'.format(n.par, n))\n            return (False, -1)\n        if n.left and n.left.par != n:\n            print('Child {} of a node {} has invalid parent'.format(n.left, n))\n            return (False, -1)\n        if n.right and n.right.par != n:\n            print('Child {} of a node {} has invalid parent'.format(n.right, n))\n            return (False, -1)\n        (l_valid, l_bh) = self._validate_and_get_black_height(n.left)\n        (r_valid, r_bh) = self._validate_and_get_black_height(n.right)\n        if not l_valid or not r_valid:\n            return (False, -1)\n        if l_bh != r_bh:\n            print('Node {} has subtrees of different black height: left={}, right={}'.format(n, l_bh, r_bh))\n            return (False, -1)\n        return (True, l_bh if n.col == RED else l_bh + 1)\n\n    def _find(self, n, x):\n        if n.val == x:\n            return n\n        if x < n.val and n.left:\n            return self._find(n.left, x)\n        elif x > n.val and n.right:\n            return self._find(n.right, x)\n        return None\n\n    def _left_most_node(self, n):\n        while n.left:\n            n = n.left\n        return n\n\n    def _right_most_node(self, n):\n        return n if not n.right else self._right_most_node(n.right)\n\n    def _insert_node(self, par, n):\n        if n.val < par.val:\n            if par.left:\n                self._insert_node(par.left, n)\n            else:\n                par.left = n\n                n.par = par\n        elif par.right:\n            self._insert_node(par.right, n)\n        else:\n            par.right = n\n            n.par = par\n\n    def _rebalance_addition(self, n):\n        if n.col == BLACK:\n            return\n        if self._root == n:\n            n.col = BLACK\n            return\n        if n.par.col == BLACK:\n            return\n        if n.uncle and n.uncle.col == RED:\n            n.par.col = BLACK\n            n.uncle.col = BLACK\n            n.grandpa.col = RED\n            self._rebalance_addition(n.grandpa)\n            return\n        if n.is_left and n.par.is_left:\n            self._handle_left_left(n)\n        elif n.is_right and n.par.is_left:\n            self._handle_left_right(n)\n        elif n.is_right and n.par.is_right:\n            self._handle_right_right(n)\n        elif n.is_left and n.par.is_right:\n            self._handle_right_left(n)\n\n    def _remove_node(self, n):\n        if n.left and n.right:\n            successor = self._left_most_node(n.right)\n            val = n.val\n            n.val = successor.val\n            successor.val = val\n            return self._remove_node(successor)\n        elif n.left:\n            if n.par:\n                n.par.replace(n, n.left)\n            n.left.par = n.par\n            return (n, n.left)\n        elif n.right:\n            if n.par:\n                n.par.replace(n, n.right)\n            n.right.par = n.par\n            return (n, n.right)\n        else:\n            if n.par:\n                n.par.replace(n, None)\n            return (n, RBTree.NullNode(n.par))\n\n    def _rebalance_removal(self, n):\n        s = n.sib\n        assert s\n        if s.col == BLACK and (s.left and s.left.col == RED or (s.right and s.right.col == RED)):\n            r = s.right if s.right and s.right.col == RED else s.left\n            if s.is_left and r.is_left:\n                self._rotate_right(n.par)\n                r.col = BLACK\n            elif s.is_left and r.is_right:\n                self._rotate_left(s)\n                self._rotate_right(n.par)\n                s.col = BLACK\n            elif s.is_right and r.is_left:\n                self._rotate_right(s)\n                self._rotate_left(n.par)\n                s.col = BLACK\n            elif s.is_right and r.is_right:\n                self._rotate_left(n.par)\n                r.col = BLACK\n        elif s.col == BLACK:\n            s.col = RED\n            if n.par.col == RED:\n                n.par.col = BLACK\n            elif n.par.col == BLACK and n.par != self._root:\n                self._rebalance_removal(n.par)\n        else:\n            if s.is_right:\n                self._rotate_left(n.par)\n            else:\n                self._rotate_right(n.par)\n            self._rebalance_removal(n)\n\n    def _handle_left_left(self, n):\n        self._rotate_right(n.grandpa)\n\n    def _handle_left_right(self, n):\n        self._rotate_left(n.par)\n        self._handle_left_left(n.left)\n\n    def _handle_right_right(self, n):\n        self._rotate_left(n.grandpa)\n\n    def _handle_right_left(self, n):\n        self._rotate_right(n.par)\n        self._handle_right_right(n.right)\n\n    def _rotate_right(self, n):\n        assert n.left\n        l = n.left\n        lr = l.right\n        par = n.par\n        col = n.col\n        l.right = n\n        n.par = l\n        l.par = par\n        n.col = l.col\n        l.col = col\n        n.left = lr\n        if lr:\n            lr.par = n\n        if n == self._root:\n            self._root = l\n        else:\n            par.replace(n, l)\n\n    def _rotate_left(self, n):\n        assert n.right\n        r = n.right\n        rl = r.left\n        par = n.par\n        col = n.col\n        r.left = n\n        n.par = r\n        r.par = par\n        n.col = r.col\n        r.col = col\n        n.right = rl\n        if rl:\n            rl.par = n\n        if n == self._root:\n            self._root = r\n        else:\n            par.replace(n, r)\n\nclass Node:\n\n    def __init__(self, pos, l, next, prev):\n        self.pos = pos\n        self.l = l\n        self.next = next\n        self.prev = prev\n\n    def __repr__(self):\n        return '({};{})'.format(self.pos + 1, self.l)\n\ndef read_data():\n    (n, _, k) = map(int, input().split(' '))\n    a = list(map(int, input().split(' ')))\n    q = input()\n    return (n, q, k, a)\n\ndef construct_dlist(a, tree):\n    last_node = None\n    curr_node = None\n    first_node = None\n    for (i, x) in enumerate(a):\n        if x == 0:\n            if curr_node:\n                tree.insert(curr_node.l)\n            curr_node = None\n        elif curr_node:\n            curr_node.pos = i\n            curr_node.l += 1\n        else:\n            curr_node = Node(i, 1, None, last_node)\n            if last_node:\n                last_node.next = curr_node\n            last_node = curr_node\n            if not first_node:\n                first_node = curr_node\n    if curr_node:\n        tree.insert(curr_node.l)\n    if not last_node:\n        return None\n    first_node.prev = last_node\n    last_node.next = first_node\n    return last_node\n\ndef update_node(node, offset, n, tree):\n    if (node.pos + offset) % n != 0:\n        return node\n    node.pos = (node.pos + n - 1) % n\n    tree.remove(node.l)\n    node.l -= 1\n    tree.insert(node.l)\n    if (node.next.pos - node.next.l + n + offset) % n == 0:\n        tree.remove(node.next.l)\n        node.next.l += 1\n        tree.insert(node.next.l)\n    else:\n        next = node.next\n        node.next = Node((node.pos + 1) % n, 1, next, node)\n        next.prev = node.next\n        tree.insert(node.next.l)\n    if node.l == 0:\n        prev = node.prev\n        prev.next = node.next\n        node.next.prev = prev\n        tree.remove(node.l)\n        return prev\n    else:\n        return node\n\ndef to_len_list(node):\n    temp = node\n    arr = []\n    while True:\n        arr.append(-temp.l)\n        if temp.prev == node:\n            return arr\n        temp = temp.prev\n\ndef handle_no_ones(q):\n    for req in q:\n        if req == '?':\n            print(0)\n(n, q, k, a) = read_data()\ntree = RBTree()\ncurr_node = construct_dlist(a, tree)\nif not curr_node:\n    handle_no_ones(q)\n    sys.exit()\noffset = 0\nfor req in q:\n    if req == '!':\n        offset += 1\n        curr_node = update_node(curr_node, offset, n, tree)\n    else:\n        if not curr_node:\n            print(0)\n            continue\n        print(min(tree.max(), k))", "(n, q, k) = (int(x) for x in input().split())\nli = [int(x) for x in input().split()]\nqer = input()\nqeries = list(qer)\nlis = li[:]\nl = len(lis)\nfor i in range(l):\n    if lis[i] == 0:\n        break\n    elif lis[i] == 1:\n        lis[i] = 0\nfor i in range(l - 1, -1, -1):\n    if lis[i] == 0:\n        break\n    elif lis[i] == 1:\n        lis[i] = 0\n(current, top) = (0, 0)\ni = 0\nj = 0\nstart = 0\nend = 0\nwhile j < l:\n    if lis[j] == 1:\n        j += 1\n        current += 1\n        if current > top:\n            top = current\n            start = i\n            end = j - 1\n    elif lis[j] == 0:\n        j += 1\n        i = j\n        current = 0\nfor i in range(start, end + 1):\n    lis[i] = 0\nlargest = top\nlargest_remaining = l - end - 1\nif largest == 0:\n    largest_remaining = 0\n(current, top) = (0, 0)\ni = 0\nj = 0\nwhile j < l:\n    if lis[j] == 1:\n        j += 1\n        current += 1\n        if current > top:\n            top = current\n            start = i\n            end = j - 1\n    elif lis[j] == 0:\n        j += 1\n        i = j\n        current = 0\nsecond = top\nsecond_remaining = l - end - 1\nif second == 0:\n    second_remaining = 0\nfirst = 0\nlast = 0\nfor i in range(l):\n    if li[i] == 0:\n        break\n    elif li[i] == 1:\n        first += 1\nfor i in range(l - 1, -1, -1):\n    if li[i] == 0:\n        break\n    elif li[i] == 1:\n        last += 1\ncombine = first + last\ncombine_mid = combine // 2\nif last > 0 and first == 0:\n    combine_broken = 1\n    combine_remaining = last\nelif first > 0 and last == 0:\n    combine_broken = 0\n    combine_remaining = l - combine\nelse:\n    combine_broken = 1\n    combine_remaining = last\nlargest_mid = largest // 2\nsecond_mid = second // 2\nlargest_broken = 0\nsecond_broken = 0\nif combine >= second:\n    second = combine\n    second_remaining = combine_remaining\n    second_broken = combine_broken\n    second_mid = combine_mid\nval = max(largest, max(first, last))\nfor i in qeries:\n    if i == '?':\n        print(min(k, val))\n    else:\n        largest_remaining -= 1\n        second_remaining -= 1\n        largest_off = max(0, min(largest - largest_remaining, largest_remaining))\n        second_off = max(0, min(second - second_remaining, second_remaining))\n        if largest_remaining == 0:\n            if largest_broken == 1:\n                largest_broken = 0\n                largest_remaining = l - largest\n                largest_off = 0\n            else:\n                largest_broken = 1\n                largest_remaining = largest\n                largest_off = 0\n        if second_remaining == 0:\n            if second_broken == 1:\n                second_broken = 0\n                second_remaining = l - second\n                second_off = 0\n            else:\n                second_broken = 1\n                second_remaining = second\n                second_off = 0\n        val = max(second - second_broken * min(second_mid, second_off), largest - largest_broken * min(largest_mid, largest_off))", "(length, queries, minimum) = map(int, input().split())\narray = list(map(int, input().split()))\nstring = input()\npref = []\ni = 0\nwhile i < len(array):\n    if array[i] == 0:\n        pref.append(0)\n        i += 1\n    elif array[i] == 1:\n        count = 0\n        while i < len(array) and array[i] == 1:\n            count += 1\n            i += 1\n        pref.append(count)\nanswer = [0] * length\nfrequency = [0] * (length + length)\nfor i in range(len(pref)):\n    if pref[i] != 0:\n        frequency[pref[i]] += 1\nanswer[0] = max(pref)\nmaximum = max(pref)\nlength2 = len(pref)\nfor i in range(1, length):\n    if pref[length2 - 1] == 0:\n        pref.pop(length2 - 1)\n        pref.insert(0, 0)\n        answer[i] = maximum\n    elif pref[length2 - 1] > 0:\n        if pref[length2 - 1] > 1:\n            if pref[0] == 0:\n                x = pref[length2 - 1]\n                frequency[x] -= 1\n                frequency[x - 1] += 1\n                frequency[1] += 1\n                pref[length2 - 1] -= 1\n                length2 += 1\n                pref.insert(0, 1)\n            elif pref[0] > 0:\n                x = pref[length2 - 1]\n                y = pref[0]\n                frequency[x] -= 1\n                frequency[y] -= 1\n                frequency[x - 1] += 1\n                frequency[y + 1] += 1\n                pref[length2 - 1] -= 1\n                pref[0] += 1\n        elif pref[length2 - 1] == 1:\n            if pref[0] == 0:\n                pref.pop()\n                pref.insert(0, 1)\n            elif pref[0] > 0:\n                x = pref[0]\n                frequency[x] -= 1\n                frequency[x + 1] += 1\n                frequency[1] -= 1\n                pref.pop()\n                pref[0] += 1\n                length2 -= 1\n        if frequency[maximum + 1] > 0:\n            maximum = maximum + 1\n        elif frequency[maximum] > 0:\n            maximum = maximum\n        elif frequency[maximum - 1] > 0:\n            maximum = maximum - 1\n        answer[i] = maximum\nconti = 0\nif len(pref) == 1:\n    for i in range(queries):\n        if string[i] == '?':\n            print(min(minimum, pref[0]))\nelse:\n    for i in range(queries):\n        if string[i] == '!':\n            conti += 1\n        elif string[i] == '?':\n            print(min(minimum, answer[conti % length]))", "nqklist = list(map(int, input().split()))\nnlist = list(map(int, input().split()))\nn = nqklist[0]\nq = nqklist[1]\nk = nqklist[2]\ndp = [0] * (n + 1)\nqstr = input()\ni = 0\nfm = 0\nfmi = -1\nfmf = -1\nsm = 0\nsmi = -1\nfor a in nlist:\n    if a == 0 or i == 0:\n        dp[i] = a\n    else:\n        dp[i] = dp[i - 1] + a\n    i = i + 1\ni = 0\nif dp[n - 1] != n:\n    for b in nlist:\n        if b == 1:\n            dp[i] = dp[i] + dp[n - 1]\n        else:\n            break\n        i = i + 1\ni = 0\nfor d in dp:\n    if dp[i + 1] == 0:\n        if fm < d:\n            if i == n - 1 and dp[0] > dp[n - 1]:\n                break\n            sm = fm\n            smi = fmi\n            fm = d\n            fmi = i\n            fmf = (i - d + 1 + n) % n\n        elif sm < d:\n            sm = d\n            smi = i\n    i = i + 1\n    if i == n - 1:\n        break\nif fmi == -1 and dp[n - 1] != 0:\n    fm = dp[n - 1]\n    fmi = n - 1\n    fmf = n - dp[n - 1]\nnindex = n - 1\nfor qr in qstr:\n    if qr == '!':\n        nindex = (nindex - 1 + n) % n\n    elif fmi != -1:\n        if fmf > fmi:\n            if nindex < fmf and nindex >= fmi:\n                print(min(fm, k))\n            elif nindex < fmi:\n                r = n - fmf + nindex + 1\n                l = fm - r\n                print(min(k, max(l, r, sm)))\n            elif nindex >= fmf:\n                r = nindex - fmf + 1\n                l = fm - r\n                print(min(k, max(l, r, sm)))\n            else:\n                r = n - fmf\n                l = fm - r\n                print(min(k, max(l, r, sm)))\n        elif nindex < fmf or nindex >= fmi or dp[n - 1] == n:\n            print(min(fm, k))\n        else:\n            r = fmi - nindex\n            l = fm - r\n            print(min(k, max(l, r, sm)))\n    else:\n        print(0)", "(N, Q, K) = [int(s) for s in input().split(' ') if s != '']\nA = [int(s) for s in input().split(' ') if s != '']\npref = [0] * N\nsuf = [0] * N\nbeg1 = [0] * N\nend1 = [0] * N\nret = 0\ncur = 0\nstop = False\nfor i in range(0, N):\n    if A[i] == 0:\n        cur = 0\n        stop = True\n        if i > 0:\n            beg1[i] = beg1[i - 1]\n    else:\n        cur += 1\n        ret = max(ret, cur)\n        if not stop:\n            beg1[i] = cur\n        else:\n            beg1[i] = beg1[i - 1]\n    pref[i] = ret\nret = 0\ncur = 0\nstop = False\nfor i in reversed(range(0, N)):\n    if A[i] == 0:\n        cur = 0\n        stop = True\n        if i < N - 1:\n            end1[i] = end1[i + 1]\n    else:\n        cur += 1\n        ret = max(ret, cur)\n        if not stop:\n            end1[i] = cur\n        else:\n            end1[i] = end1[i + 1]\n    suf[i] = ret\nbeg = 0\nfor q in input():\n    if q == '!':\n        beg -= 1\n        if beg < 0:\n            beg = N - 1\n    elif beg == 0:\n        print(min(K, suf[beg]))\n    else:\n        a = max(suf[beg], pref[beg - 1], beg1[beg - 1] + end1[beg])\n        print(min(K, a))", "def calc(x, n):\n    if len(x) < 2:\n        return 0\n    if x[1] >= x[0]:\n        return x[1] - x[0] + 1\n    else:\n        return max(x[1] - 0 + 1, n - x[0])\n(n, q, k) = (int(x) for x in input().split())\na = list(input().split())\nqueries = input()\nif n <= 1000 or q <= 3000:\n    maxlen = 0\n    length = 0\n    for i in queries:\n        if i == '!':\n            a.insert(0, a[-1])\n            a.pop()\n        if i == '?':\n            maxlen = 0\n            length = 0\n            for x in a:\n                if x == '1':\n                    length += 1\n                if x == '0':\n                    if length > maxlen:\n                        maxlen = length if length < k else k\n                    length = 0\n            if a[-1] != '0':\n                if length > maxlen:\n                    maxlen = length if length < k else k\n            print(maxlen)\nelse:\n    segments = []\n    start = -1\n    j = 0\n    maxlength = 0\n    maxsegment = []\n    secmax = 0\n    secmaxsegment = []\n    for i in a:\n        if i == '1' and start == -1:\n            start = j\n        if i == '0' and j != 0 and (a[j - 1] == '1'):\n            segments.append([start, j - 1])\n            if j - start >= maxlength:\n                secmax = maxlength\n                secmaxsegment = maxsegment\n                maxlength = j - start\n                maxsegment = [start, j - 1]\n            start = -1\n        j += 1\n    if a[-1] != '0':\n        segments.append([start, n - 1])\n        if n - start >= maxlength:\n            secmax = maxlength\n            secmaxsegment = maxsegment\n            maxlength = n - start\n            maxsegment = [start, n - 1]\n    if len(secmaxsegment):\n        for seg in segments:\n            if seg[0] != maxsegment[0] and seg[1] != maxsegment[1]:\n                if calc(seg, n) > secmax:\n                    secmax = calc(seg, n)\n                    secmaxsegment = seg\n    fixed = 0\n    if a[0] == '0' or a[-1] == '0':\n        fixed = 1\n    if len(segments):\n        firstsegment = [segments[-1][0], segments[0][1]]\n    for x in queries:\n        if fixed:\n            if x == '?':\n                if len(maxsegment) and maxsegment[1] > maxsegment[0]:\n                    print(min(maxlength, k))\n                else:\n                    print(min(max(calc(maxsegment, n), secmax), k))\n            elif len(maxsegment):\n                maxsegment[0] = (maxsegment[0] + 1) % n\n                maxsegment[1] = (maxsegment[1] + 1) % n\n        elif x == '?':\n            print(min(max(calc(firstsegment, n), calc(secmaxsegment, n), calc(maxsegment, n)), k))\n        else:\n            if len(maxsegment):\n                maxsegment[0] = (maxsegment[0] + 1) % n\n                maxsegment[1] = (maxsegment[1] + 1) % n\n            if len(firstsegment):\n                firstsegment[0] = (firstsegment[0] + 1) % n\n                firstsegment[1] = (firstsegment[1] + 1) % n\n            if len(secmaxsegment):\n                secmaxsegment[0] = (secmaxsegment[0] + 1) % n\n                secmaxsegment[1] = (secmaxsegment[1] + 1) % n", "(n, q, k) = map(int, input().split())\na = list(input().split())\nq = input()\nref = [-1 for _ in range(n)]\nmax_sequence = [-1 for _ in range(n)]\ngroup = [-1 for _ in range(n)]\nmax_group = []\ncount = 0\ntracking = []\ncheck = 0\nstop = k * 2 - 1\nmax_check = 0\n\ndef update_max(max_arr, max_a):\n    while max_a >= len(max_arr):\n        max_arr += [[]]\n    max_arr[max_a].append(max_a)\nfor num in range(n):\n    if a[num] == '1':\n        count += 1\n        if count >= stop:\n            check = 1\n            break\n        if num == n - 1:\n            group[n - count:] = [count] * count\n            ref[n - count:] = [n - count] * count\n            if count >= k:\n                tracking.append(count)\n                if len(tracking) > 1:\n                    check = 1\n            else:\n                update_max(max_group, count)\n            count = 0\n    else:\n        group[num] = 0\n        if count > 0:\n            group[num - count:num] = [count] * count\n            ref[num - count:num] = [num - count] * count\n            if count >= k:\n                tracking.append(count)\n                if len(tracking) > 1:\n                    check = 1\n                    break\n            else:\n                update_max(max_group, count)\n            count = 0\nif len(max_group) < 1:\n    max_group += [[0]]\nsetcheck = set(a)\nif check:\n    max_sequence[0] = k\nelif len(setcheck) == 1:\n    if len(tracking) > 0:\n        max_sequence[0] = k\n    else:\n        max_sequence[0] = max_group[-1][0]\nelse:\n    for i in range(len(max_group) - 1, -1, -1):\n        while len(max_group[i]) > 0:\n            tracking.append(max_group[i][0])\n            max_group[i].pop()\n            if len(tracking) > 1:\n                break\n        if len(tracking) > 1:\n            break\n    tracking.sort()\n    max_sequence[0] = tracking[-1]\nif not check and len(setcheck) > 1:\n    max_check = tracking[-1]\n\ndef check_max(ii):\n    if max_sequence[ii] != -1:\n        return max_sequence[ii]\n    else:\n        num = n - ii\n        if group[num] == max_check:\n            shift_num = max_check - (num - ref[num])\n            if ref[num] == ref[-1]:\n                max_sequence[ii] = min(max(max_check - shift_num, tracking[0], group[0] + shift_num), k)\n            elif ref[num] == ref[0]:\n                shift_first = num - ref[num]\n                max_sequence[ii] = min(max(max_check - shift_num, shift_num, tracking[0], group[-1] + shift_first), k)\n            else:\n                max_sequence[ii] = min(max(max_check - shift_num, shift_num, tracking[0], group[-1] + group[0]), k)\n        else:\n            shift_num = group[num] - (num - ref[num])\n            if group[num] != 0:\n                if ref[num] == ref[-1]:\n                    max_sequence[ii] = min(max(max_check, shift_num + group[0]), k)\n                elif ref[num] == ref[0]:\n                    shift_first = num - ref[num]\n                    max_sequence[ii] = min(max(max_check, group[-1] + shift_first), k)\n                else:\n                    max_sequence[ii] = min(max(max_check, group[-1] + group[0]), k)\n            else:\n                max_sequence[ii] = min(max(max_check, group[-1] + group[0]), k)\n        return max_sequence[ii]\nidex = 0\ncc = 0\nfor char in q:\n    if char == '!':\n        if check:\n            pass\n        elif len(setcheck) > 1:\n            idex += 1\n            if idex == n:\n                idex = 0\n    elif char == '?':\n        if check:\n            print(max_sequence[0])\n        else:\n            print(check_max(idex))", "def appyLoveOne(A, S, K, N):\n    (max_, max2, smax, emax) = givemax1andmax2(A)\n    start = 0\n    end = len(A) - 1\n    fstpass = True\n    for i in S:\n        if i == '!':\n            fstpass = False\n            start = end\n            end = (end - 1 + len(A)) % len(A)\n        else:\n            if smax <= emax and start >= smax and (start <= emax):\n                localmax = max(emax - start + 1, start - smax, max2)\n            elif smax > emax and (start <= emax or start >= smax):\n                if start <= emax:\n                    localmax = max(emax - start + 1, len(A) - smax + start, max2)\n                elif start >= smax:\n                    localmax = max(start - smax, emax - 0 + 1 + (len(A) - start), max2)\n            else:\n                localmax = max_\n            if localmax > K:\n                print(K)\n            else:\n                print(localmax)\n\ndef givemax1andmax2(A):\n    start = 0\n    end = len(A) - 1\n    N = len(A)\n    count = 0\n    max_ = 0\n    (smax, st) = (-1, 0)\n    (emax, et) = (-1, 0)\n    for j in range(2 * N):\n        index = (start + j) % N\n        if A[index] == 1:\n            count += 1\n            et = index\n        else:\n            count = 0\n            st = index + 1\n        if max_ < count:\n            max_ = count\n            smax = st\n            emax = et\n    if emax <= smax:\n        (first, last) = (smax, (emax + 1) % N)\n    else:\n        B = A[0:smax] + A[emax + 1:]\n        (first, last) = (smax, emax)\n    count = 0\n    max2_ = 0\n    (sma, st) = (-1, 0)\n    (ema, et) = (-1, 0)\n    (first, last) = (smax, (emax + 1) % N)\n    if emax <= smax:\n        for j in range(2 * N):\n            index = (start + j) % N\n            if index >= last and index < first:\n                pass\n            else:\n                continue\n            if A[index] == 1:\n                count += 1\n                et = index\n            else:\n                count = 0\n                st = index + 1\n            if max2_ < count:\n                max2_ = count\n                sma = st\n                ema = et\n    else:\n        for j in range(2 * N):\n            index = (start + j) % N\n            if index >= smax and index <= emax:\n                continue\n            if A[index] == 1:\n                count += 1\n                et = index\n            else:\n                count = 0\n                st = index + 1\n            if max2_ < count:\n                max2_ = count\n                sma = st\n                ema = et\n    if max_ > len(A):\n        max_ = max_ // 2\n    return (max_, max2_, smax, emax)\n(N, Q, K) = list(map(int, input().split()))\nA = list(map(int, input().split()))\nS = input()\nappyLoveOne(A, S, K, N)", "w = input().split()\nn = int(w[0])\nq = int(w[1])\nk = int(w[2])\na = [int(j) for j in input().split()]\ns = input()\ncount = 0\nprevmax = 0\nmaxcount = 0\nvar = 0\ntempvar = 0\nfirstind = 0\nlastind = 0\nfor x in range(n):\n    if a[x] == 0:\n        var = 1\n        ind = x\n        break\nif var == 1:\n    for x in range(ind, -n + ind - 1, -1):\n        var2 = 1\n        if a[x] == 1:\n            count += 1\n            if tempvar == 0:\n                ind = x\n                tempvar = 1\n        else:\n            if count > maxcount:\n                prevmax = maxcount\n                maxcount = count\n                firstind = ind\n                lastind = x + 1\n                var2 = 0\n            if count > prevmax and var2 == 1:\n                prevmax = count\n            count = 0\n            tempvar = 0\n    if lastind < 0:\n        lastind += n\n    if firstind < 0:\n        firstind += n\n    for x in s:\n        if x == '!':\n            firstind += 1\n            if firstind == n:\n                firstind = 0\n            lastind += 1\n            if lastind == n:\n                lastind = 0\n        else:\n            if firstind >= lastind:\n                ans = maxcount\n            else:\n                ans = max(prevmax, firstind + 1, n - lastind)\n            if ans >= k:\n                print(k)\n            else:\n                print(ans)\nelse:\n    for x in s:\n        if x == '?':\n            ans = n\n            if ans >= k:\n                print(k)\n            else:\n                print(ans)", "from collections import defaultdict\nres = []\n\ndef findAllOne(seq):\n    (cnt, s, pos) = (0, 0, defaultdict(list))\n    for i in range(len(seq)):\n        if seq[i] == 1 and i == 0:\n            cnt += 1\n            s = i\n        elif seq[i] == 1 and seq[i - 1] == 0 and (i > 0):\n            cnt += 1\n            s = i\n        elif seq[i - 1] == 1 and seq[i] == 1 and (i > 0):\n            cnt += 1\n        elif seq[i] == 0 and seq[i - 1] == 1 and (i > 0):\n            pos[cnt].append([s, s + cnt])\n            cnt = 0\n    nn = []\n    if cnt > 0:\n        pos[cnt].append([s, s + cnt])\n        nn += [s, s + cnt]\n        cnt = 0\n    l = list(pos.keys())\n    l.sort(reverse=True)\n    for i in l:\n        if len(nn) <= 5:\n            for pp in pos[i]:\n                if pp[0] not in nn:\n                    nn.append(pp[0])\n                    nn.append(pp[1])\n    nn.sort()\n    return nn\n(N, Q, K) = map(int, input().split())\nseq = list(map(int, input().split()))\nN = len(seq)\nquery = input().strip()\nposition = findAllOne(seq)\nfor i in query:\n    if i == '!':\n        if len(position):\n            position = [j + 1 for j in position]\n            if position[-1] > N:\n                position = [0, 1] + position\n                position[-1] -= 1\n            nw = [position[0]]\n            for p in position[1:]:\n                if nw[-1] != p:\n                    nw.append(p)\n                else:\n                    del nw[-1]\n            position = []\n            position = nw[:]\n    else:\n        mx = 0\n        for i in range(0, len(position), 2):\n            mx = max(mx, position[i + 1] - position[i])\n        res.append(min(mx, K))\nprint(*res, sep='\\n')"]