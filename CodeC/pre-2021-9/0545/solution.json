["def kadanes(a, n):\n    curr = 0\n    maxi = 0\n    for i in a:\n        curr += i\n        maxi = max(curr, maxi)\n        if curr < 0:\n            curr = 0\n    return maxi\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmaxsum = kadanes(a, n)\ns = sum(a)\ndiv = maxsum / x\nprint(s - maxsum + div)", "def kadanes(a, n):\n    curr = 0\n    maxi = 0\n    for i in a:\n        curr += i\n        maxi = max(curr, maxi)\n        if curr < 0:\n            curr = 0\n    return maxi\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmaxsum = kadanes(a, n)\ns = sum(a)\ndiv = maxsum / x\nprint(s - maxsum + div)", "def solve():\n    (n, t) = [int(x) for x in input().split()]\n    A = [int(x) for x in input().split()]\n    max_sum = curr = 0\n    for x in A:\n        max_sum = max(max_sum, curr + x)\n        curr = max(curr + x, 0)\n    return sum(A) - max_sum + max_sum / t\nprint(solve())", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmaxsum = 0\nallsum = 0\ncurrsum = 0\nfor i in a:\n    currsum += i\n    allsum += i\n    maxsum = max(maxsum, currsum)\n    if currsum < 0:\n        currsum = 0\nprint(allsum - (maxsum - maxsum / x))", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmaxsum = 0\nallsum = 0\ncurrsum = 0\nfor i in a:\n    currsum += i\n    allsum += i\n    maxsum = max(maxsum, currsum)\n    if currsum < 0:\n        currsum = 0\nprint(allsum - (maxsum - maxsum / x))", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmaxsum = 0\nallsum = 0\ncurrsum = 0\nfor i in a:\n    currsum += i\n    allsum += i\n    maxsum = max(maxsum, currsum)\n    if currsum < 0:\n        currsum = 0\nprint(allsum - (maxsum - maxsum / x))", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmaxsum = 0\nallsum = 0\ncurrsum = 0\nfor i in a:\n    currsum += i\n    allsum += i\n    maxsum = max(maxsum, currsum)\n    if currsum < 0:\n        currsum = 0\nprint(allsum - (maxsum - maxsum / x))", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmaxsum = 0\nallsum = 0\ncurrsum = 0\nfor i in a:\n    currsum += i\n    allsum += i\n    maxsum = max(maxsum, currsum)\n    if currsum < 0:\n        currsum = 0\nprint(allsum - (maxsum - maxsum / x))", "(n, x) = map(int, input().split())\nl = list(map(int, input().split()))\nm = -10000000000.0\ns = sum(l)\nsu = 0.0\nfor i in l:\n    su = su + i\n    m = max(su, m)\n    if su < 0:\n        su = 0\nprint(s - m * (1 - 1 / x))", "(_, x) = map(int, input().split(' '))\nlst = [int(f) for f in input().split()]\nk = 0\nl = 0\nmaxsum = 0\ncurrsum = 0\nsumall = 0\nfor i in lst:\n    sumall += i\n    currsum += i\n    maxsum = max(maxsum, currsum)\n    if currsum < 0:\n        currsum = 0\nprint(sumall - maxsum * (1 - 1 / x))", "from bisect import bisect_left, bisect_right\nimport math\nfrom sys import maxsize\nfrom collections import defaultdict\nfrom bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\nnx = il()\nn = nx[0]\nx = nx[1]\nls = il()\nmsf = -maxsize - 1\nmeh = 0\nst = -1\ne = -1\ns = 0\nfor i in range(n):\n    meh += ls[i]\n    if msf < meh:\n        msf = meh\n        st = s\n        e = i\n    if meh < 0:\n        meh = 0\n        s = i + 1\ns = 0\nfor i in range(0, st):\n    s = s + ls[i]\nif e + 1 != n:\n    for k in range(e + 1, n):\n        s = s + ls[k]\ns = s + msf / x\nprint(s)", "y = input().split()\nn = int(y[0])\nx = int(y[1])\nF = [int(f) for f in input().split()]\nt1 = 0\nt2 = 0\nupma = 0\nfor i in F:\n    t1 += i\n    t2 += i\n    upma = max(upma, t2)\n    if t2 < 0:\n        t2 = 0\nprint(t1 - upma * (1 - 1 / x))", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nb = sum(a)\nsumm = []\nsumm.append(b)\nfor i in range(n):\n    summm = b\n    for j in range(i, n):\n        summm += a[j] / x - a[j]\n        summ.append(summm)\nprint(min(summ))", "c = [int(a) for a in input().split()]\nn = c[0]\nx = c[1]\nA = [int(a) for a in input().split()]\ntots = 0\ntems = 0\nmaxs = 0\nfor i in A:\n    tots += i\n    tems += i\n    maxs = max(maxs, tems)\n    if tems < 0:\n        tems = 0\nop = tots - maxs * (1 - 1 / x)\nprint(op)", "(n, x) = list(map(int, input().split()))\nlst = list(map(int, input().split()))\n(s, t, tot) = (0, 0, 0)\nfor i in lst:\n    tot = tot + i\n    t = t + i\n    s = max(s, t)\n    if t < 0:\n        t = 0\n        continue\nprint(tot - s + s / x)", "(n, x) = map(int, input().split())\narr = list(map(int, input().split()))\nmax_subarray_sum = 0\ntemp_sum = 0\ntotal_sum = 0\nfor i in arr:\n    total_sum += i\n    temp_sum += i\n    max_subarray_sum = max(temp_sum, max_subarray_sum)\n    if temp_sum < 0:\n        temp_sum = 0\n        continue\nprint(total_sum - max_subarray_sum + max_subarray_sum / x)", "(n, x) = map(int, input().split())\narr = list(map(int, input().split()))\nmax_subarray_sum = 0\ntemp_sum = 0\ntotal_sum = 0\nfor i in arr:\n    total_sum += i\n    temp_sum += i\n    max_subarray_sum = max(temp_sum, max_subarray_sum)\n    if temp_sum < 0:\n        temp_sum = 0\n        continue\nprint(total_sum - max_subarray_sum + max_subarray_sum / x)", "def solve():\n    (n, x) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    (maxi, sum_) = (0, 0)\n    for i in range(n):\n        sum_ += arr[i]\n        maxi = max(sum_, maxi)\n        if sum_ <= 0:\n            sum_ = 0\n    return total - maxi + maxi / x\nprint(solve())", "def solve():\n    (n, x) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    (maxi, sum_) = (0, 0)\n    for i in range(n):\n        sum_ += arr[i]\n        maxi = max(sum_, maxi)\n        if sum_ <= 0:\n            sum_ = 0\n    return total - maxi + maxi / x\nprint(solve())", "def solve():\n    (n, x) = list(map(int, input().split()))\n    arr = list(map(int, input().split()))\n    total = sum(arr)\n    (maxi, sum_) = (0, 0)\n    for i in range(n):\n        sum_ += arr[i]\n        maxi = max(sum_, maxi)\n        if sum_ <= 0:\n            sum_ = 0\n    return total - maxi + maxi / x\nprint(solve())", "tmp = [int(x) for x in input().split()]\nn = tmp[0]\nx = tmp[1]\narr = [int(x) for x in input().split()]\nmaxs = 0\n(s, e) = (0, n - 1)\nfor i in range(n):\n    tmp = 0\n    for j in range(i, n):\n        tmp += arr[j]\n        if j == 0 and i == 0:\n            maxs = tmp\n            s = i\n            e = j\n        elif maxs < tmp:\n            maxs = tmp\n            s = i\n            e = j\nfsum = 0\nfor i in range(n):\n    if i >= s and i <= e:\n        arr[i] = float(arr[i] / x)\n    fsum += float(arr[i])\nprint(fsum)", "(n, x) = list(map(int, input().strip().split()))\narray = list(map(int, input().strip().split()))\nsumList = list()\ni = 0\nsumelem = 0\nmaxSum = float('-inf')\nfor i in array:\n    sumelem += i\n    if sumelem < 0:\n        sumelem = 0\n    maxSum = max(maxSum, sumelem)\nprint('{:.2f}'.format(sum(array) - maxSum + maxSum / x))", "(n, x) = map(int, input().split())\ny = list(map(int, input().split()))\np = y[:]\nfor j in range(1, len(y)):\n    p[j] += p[j - 1]\nmax_sum = 0\nfor j in range(n):\n    for k in range(j, n):\n        max_sum = max(max_sum, p[k] - p[j] + y[j])\nprint(p[n - 1] - (max_sum - max_sum / x))", "def SubarrayWithMaxSum(nums):\n    currMax = nums[0]\n    globalMax = nums[0]\n    for i in range(1, len(nums)):\n        currMax = max(nums[i], nums[i] + currMax)\n        if currMax > globalMax:\n            globalMax = currMax\n            endIndex = i\n    startIndex = endIndex\n    while startIndex >= 0:\n        globalMax -= nums[startIndex]\n        if globalMax == 0:\n            break\n        startIndex -= 1\n    c = 0\n    for i in range(startIndex, endIndex + 1):\n        c += nums[i]\n    return c\n[N, x] = [float(i) for i in input().split()]\narr = [int(i) for i in input().split()]\nsumm = sum(arr)\ncnt = SubarrayWithMaxSum(arr)\nprint(summ - cnt + cnt / x)", "(n, x) = map(int, input().split())\nl = [int(x) for x in input().split()]\ns = sum(l)\nleft = [0]\nright = [0] * (n + 1)\nfor i in range(n):\n    left.append(left[i] + l[i])\n    right[n - i - 1] = right[n - i] + l[n - i - 1]\ndel left[0]\ndel right[-1]\nfor i in range(n):\n    tempSum = 0\n    for j in range(i, n, 1):\n        tempSum += l[j] / x\n        ls = left[i - 1] if i != 0 else 0\n        rs = right[j + 1] if j != n - 1 else 0\n        s = min(s, ls + rs + tempSum)\nprint(s)", "(n, x) = [int(i) for i in input().split()]\nr = [int(i) for i in input().split()]\nif n == 1:\n    if r[0] > 0:\n        print(r[0])\n    else:\n        print(r[0] / x)\nelse:\n    st = n - 1\n    en = n - 1\n    sums = [0] * n\n    sums[-1] = r[-1]\n    s = r[-1]\n    while st > 0:\n        st -= 1\n        if s > 0:\n            s += r[st]\n        else:\n            s = r[st]\n            en = st\n        sums[st] = s\n    print(sum(r) - max(sums) + max(sums) / x)", "(n, x) = [int(i) for i in input().split()]\nr = [int(i) for i in input().split()]\nif n == 1:\n    if r[0] > 0:\n        print(r[0])\n    else:\n        print(r[0] / x)\nelse:\n    st = n - 1\n    en = n - 1\n    sums = [0] * n\n    sums[-1] = r[-1]\n    s = r[-1]\n    while st > 0:\n        st -= 1\n        if s > 0:\n            s += r[st]\n        else:\n            s = r[st]\n            en = st\n        sums[st] = s\n    print(sum(r) - max(sums) + max(sums) / x)", "import fileinput\nwith fileinput.input() as f:\n    (n, x) = [int(e) for e in f.readline().strip().split(' ', 1)]\n    aP = [int(e) for e in f.readline().strip().split(' ')]\n    if len(aP) != n:\n        raise ValueError('input length mismatch')\n    aN = [e / x for e in aP]\n    PaP = [0]\n    for e in aP:\n        PaP.append(PaP[-1] + e)\n    NaP = [0]\n    for e in aN:\n        NaP.append(NaP[-1] + e)\n    best = PaP[-1]\n    for s in range(1, n + 1):\n        for e in range(s, n + 1):\n            p1 = PaP[s - 1]\n            p2 = NaP[e] - NaP[s - 1]\n            p3 = PaP[-1] - PaP[e]\n            c = p1 + p2 + p3\n            if c < best:\n                best = c\n    print(best)", "(n, k) = map(int, input().split())\narr = list(map(int, input().split()))\nsum_arr = [0] * n\nsum_arr[0] = arr[0]\npartial = arr[0]\nfor i in range(1, n):\n    partial += arr[i]\n    sum_arr[i] = partial\nsum_arr.insert(0, 0)\nmax_var = sum_arr[1] - sum_arr[0]\nfor i in range(1, n + 1):\n    for j in range(i):\n        if max_var <= sum_arr[i] - sum_arr[j]:\n            max_var = sum_arr[i] - sum_arr[j]\nprint('%0.1f' % (sum(arr) + max_var * (1 / k - 1)))", "(n, x) = map(int, input().split())\nN = list(map(int, input().split()))\ndp = [0] * n\ndp[0] = N[0]\nfor i in range(1, n):\n    dp[i] = max(N[i], dp[i - 1] + N[i])\nm = max(dp)\nprint(sum(N) - m + m / x)", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\ntotal = sum(a)\ncurrent_max = a[0]\ntotal_max = a[0]\nfor i in range(1, len(a)):\n    current_max = max(a[i], current_max + a[i])\n    total_max = max(total_max, current_max)\nprint(total - total_max + total_max / x)", "(n, x) = map(int, input().split())\nL = list(map(int, input().split()))\nadd = 0\nfor i in range(n):\n    for j in range(i + 1, n + 1):\n        s = sum(L[i:j])\n        if s >= add:\n            add = s\na = sum(L)\nprint(a - add + add / x)", "(N, X) = map(int, input().split())\nA = list(map(int, input().split()))\nlst = []\ns = 0\npsum = A[:]\nfor i in range(1, N):\n    psum[i] += psum[i - 1]\nm = -9999999\nfor i in range(0, N):\n    for j in range(i, N):\n        m = max(m, psum[j] - psum[i] + A[i])\nprint(psum[-1] - m + m / X)", "def solve(N, X, A):\n    prefix = A[:]\n    for i in range(1, N):\n        prefix[i] += prefix[i - 1]\n    maxx = 0\n    for i in range(0, N):\n        for j in range(i, N):\n            maxx = max(maxx, prefix[j] - prefix[i] + A[i])\n    print(prefix[N - 1] - (maxx - maxx / X))\n(N, X) = map(int, input().split())\nA = list(map(int, input().split()))\nsolve(N, X, A)", "def snek(a, n):\n    m = a[0]\n    c = a[0]\n    for j in range(1, n):\n        c = max(a[j], c + a[j])\n        m = max(m, c)\n    return m\n(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nprint(sum(a) - snek(a, n) + snek(a, n) / k)", "def solve(a, n):\n    max1 = curr = a[0]\n    for i in range(1, n):\n        curr = max(a[i], curr + a[i])\n        max1 = max(max1, curr)\n    return max1\n(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nprint(sum(a) - solve(a, n) + solve(a, n) / k)", "def solve(a, n):\n    max1 = curr = a[0]\n    for i in range(1, n):\n        curr = max(a[i], curr + a[i])\n        max1 = max(max1, curr)\n    return max1\n(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nprint(sum(a) - solve(a, n) + solve(a, n) / k)", "def maxsum(a):\n    max_so_far = a[0]\n    max_ending_here = 0\n    for i in range(0, len(a)):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n(a, x) = (input().split(), input().split())\nk = int(a[1])\nx = [int(x[i]) for i in range(len(x))]\nprint(sum(x) - maxsum(x) + maxsum(x) / k)", "def solve(a, n):\n    max1 = curr = a[0]\n    for i in range(1, n):\n        curr = max(a[i], curr + a[i])\n        max1 = max(max1, curr)\n    return max1\n(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nprint(sum(a) - solve(a, n) + solve(a, n) / k)", "def atharva(a: list, n: int):\n    msf = mh = a[0]\n    for i in range(n):\n        mh = max(a[i], mh + a[i])\n        msf = max(msf, mh)\n    return msf\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nsumm = sum(a)\nmax_sum = atharva(a, len(a))\nprint(summ - max_sum + max_sum / x)", "def atharva(a: list, n: int):\n    msf = a[0]\n    mh = a[0]\n    for i in range(n):\n        mh = max(a[i], mh + a[i])\n        msf = max(msf, mh)\n    return msf\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nsumm = sum(a)\nmax_sum = atharva(a, len(a))\nprint(summ - max_sum + max_sum / x)", "def maxSubArraySum(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nt = sum(a)\nu = maxSubArraySum(a, n)\nprint(t - u + u / x)", "def maxSubArraySum(a, size):\n    (max_so_far, curr_max) = (a[0], a[0])\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nprint(sum(a) - maxSubArraySum(a, n) + maxSubArraySum(a, n) / x)", "def maxSubArraySum(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nt = sum(a)\nu = maxSubArraySum(a, n)\nprint(t - u + u / x)", "(n, x) = input().split()\nn = int(n)\nx = int(x)\narr = input().split()\nfor i in range(len(arr)):\n    arr[i] = int(arr[i])\nmax_included_arr = [0] * n\nmax_not_included_arr = [0] * n\nmax_included_arr[0] = arr[0]\nmax_not_included_arr[0] = 0\nfor i in range(1, len(arr)):\n    max_included_arr[i] = max(max_included_arr[i - 1] + arr[i], arr[i])\n    max_not_included_arr[i] = max(max_included_arr[i - 1], max_not_included_arr[i - 1])\nmax_subsum = max(max_included_arr[-1], max_not_included_arr[-1])\ntotal_sum = sum(arr)\nmin_included_arr = [0] * n\nmin_not_included_arr = [0] * n\nmin_included_arr[0] = arr[0]\nmin_not_included_arr[0] = 0\nfor i in range(1, len(arr)):\n    min_included_arr[i] = min(min_included_arr[i - 1] + arr[i], arr[i])\n    min_not_included_arr[i] = min(min_included_arr[i - 1], min_not_included_arr[i - 1])\nmin_subsum = min(min_not_included_arr[-1], min_included_arr[-1])\nanswer1 = total_sum - max_subsum + max_subsum / x\nanswer2 = total_sum - min_subsum + min_subsum / x\nprint(min(answer1, answer2))", "def func1(l):\n    if len(l) == 1:\n        return 0\n    elif len(l) == 2:\n        return l[1] - l[0]\n    else:\n        mid = len(l) // 2\n        p = l[:mid]\n        q = l[mid:]\n        return max(func1(p), func1(q), max(q) - min(p))\n\ndef func2(l):\n    if len(l) == 1:\n        return float('inf')\n    elif len(l) == 2:\n        return l[1] - l[0]\n    else:\n        mid = len(l) // 2\n        p = l[:mid]\n        q = l[mid:]\n        return min(func2(p), func2(q), min(q) - max(p))\n(n, x) = list(map(int, input().split()))\narr = list(map(int, input().split()))\nl = [0]\nfor i in arr:\n    l.append(l[-1] + i)\nl.pop(0)\nif x == 1:\n    print(l[-1])\nelif 1 / x - 1 < 0:\n    v = func1(l)\nelse:\n    v = func2(l)\nprint(l[-1] - v + v / x)", "(n, x) = map(int, input().split())\nl = list(map(int, input().split()))\nres = l[0]\ntemp = l[0]\nfor i in range(1, n):\n    temp = max(l[i], temp + l[i])\n    res = max(temp, res)\nprint(sum(l) - res + res / x)", "def max_possible_sum_of_subsegment(array):\n    current_max = 0\n    maxx = 0\n    for j in array:\n        current_max += j\n        if maxx < current_max:\n            maxx = current_max\n        if current_max < 0:\n            current_max = 0\n    return maxx\n(n, x) = map(int, input().split())\nl = list(map(int, input().split()))\ntot = sum(l)\nmaxx = max_possible_sum_of_subsegment(l)\nprint(tot - maxx + maxx / x)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nsumi = 0\nans = 10 ** 20\nfor i in range(len(a)):\n    sumi = sum(a)\n    for j in range(i, len(a)):\n        sumi = sumi - a[j] + a[j] / k\n        ans = min(ans, sumi)\nprint(ans)", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmx = -9999999999999999\ncs = 0\nfor i in range(n):\n    cs += a[i]\n    if mx < cs:\n        mx = cs\n    if cs < 0:\n        cs = 0\ns = float(sum(a) - mx + mx / x)\nprint('%.2f' % s)", "(n, k) = map(int, input().split())\na = list(map(int, input().split()))\nsumi = 0\nans = 10 ** 20\nfor i in range(len(a)):\n    sumi = sum(a)\n    for j in range(i, len(a)):\n        sumi = sumi - a[j] + a[j] / k\n        ans = min(ans, sumi)\nprint(ans)", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nb = []\ni = 0\nwhile i < n:\n    j = i + 1\n    while j <= n:\n        b.append([sum(a[i:j]), i, j])\n        j += 1\n    i += 1\nb.sort()\nl = len(b)\nv = b[l - 1][1]\ny = b[l - 1][2]\nz = b[l - 1][0]\nprint(float(sum(a[0:v]) + sum(a[y:n]) + z / x))", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\n(inc, enc) = (0, 0)\nfor i in range(0, len(l)):\n    inc = max(l[i], inc + l[i])\n    enc = max(enc, inc)\nresult = sum(l) - enc\nprint(result + enc / m)", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\ntotal = sum(a)\ncurrent_max = a[0]\ntotal_max = a[0]\nfor i in range(1, len(a)):\n    current_max = max(a[i], current_max + a[i])\n    total_max = max(total_max, current_max)\nprint(total - total_max + total_max / x)", "(n, k) = map(int, input().split())\nl = list(map(int, input().split()))\ni = 0\nx = sum(l)\nd = x\nm = 0\nfor i in range(n):\n    c = 0\n    for j in range(i, n):\n        c += l[j]\n        m = max(c, m)\nd -= m\nd += m / k\nprint(d)", "(n, x) = map(int, input().split())\narr = [int(a) for a in input().split(' ') if a != '']\nTotal_sum = sum(arr)\nmax_sum = arr[0]\ncurr_sum = arr[0]\nfor i in range(1, len(arr)):\n    curr_sum = max(arr[i], curr_sum + arr[i])\n    max_sum = max(curr_sum, max_sum)\nprint(Total_sum - max_sum + max_sum / x)", "(n, x) = map(int, input().split())\nl = list(map(int, input().split()))\nans = l[0]\ntemp = l[0]\nfor i in range(1, n):\n    temp = max(l[i], temp + l[i])\n    ans = max(temp, ans)\nprint(sum(l) - ans + ans / x)", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmaxi = a[0]\np = 0\nfor i in range(n):\n    sumi = a[i]\n    if sumi > maxi:\n        maxi = sumi\n    for j in range(i + 1, n):\n        sumi += a[j]\n        if i == 0:\n            p += a[j]\n        if sumi > maxi:\n            maxi = sumi\n    if sumi > maxi:\n        maxi = sumi\np += a[0]\nprint(p - maxi + maxi / x)", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\n(mini, maxi) = (a[0], a[0])\np = 0\nfor i in range(n):\n    sumi = a[i]\n    if sumi > maxi:\n        maxi = sumi\n    if sumi < mini:\n        mini = sumi\n    for j in range(i + 1, n):\n        sumi += a[j]\n        if i == 0:\n            p += a[j]\n        if sumi > maxi:\n            maxi = sumi\n        if sumi < mini:\n            mini = sumi\n    if sumi > maxi:\n        maxi = sumi\n    if sumi < mini:\n        mini = sumi\np += a[0]\nprint(min(p - maxi + maxi / x, p - mini + mini / x))", "def find_max_subarray(alist, start, end):\n    if start == end - 1:\n        return (start, end, alist[start])\n    else:\n        mid = (start + end) // 2\n        (left_start, left_end, left_max) = find_max_subarray(alist, start, mid)\n        (right_start, right_end, right_max) = find_max_subarray(alist, mid, end)\n        (cross_start, cross_end, cross_max) = find_max_crossing_subarray(alist, start, mid, end)\n        if left_max > right_max and left_max > cross_max:\n            return (left_start, left_end, left_max)\n        elif right_max > left_max and right_max > cross_max:\n            return (right_start, right_end, right_max)\n        else:\n            return (cross_start, cross_end, cross_max)\n\ndef find_max_crossing_subarray(alist, start, mid, end):\n    sum_left = float('-inf')\n    sum_temp = 0\n    cross_start = mid\n    for i in range(mid - 1, start - 1, -1):\n        sum_temp = sum_temp + alist[i]\n        if sum_temp > sum_left:\n            sum_left = sum_temp\n            cross_start = i\n    sum_right = float('-inf')\n    sum_temp = 0\n    cross_end = mid + 1\n    for i in range(mid, end):\n        sum_temp = sum_temp + alist[i]\n        if sum_temp > sum_right:\n            sum_right = sum_temp\n            cross_end = i + 1\n    return (cross_start, cross_end, sum_left + sum_right)\nx = input().split()\nn = int(x[0])\nm = int(x[1])\nlist = []\ny = input().split()\nfor i in range(n):\n    list.append(int(y[i]))\nsum1 = sum(list)\n(start, end, max1) = find_max_subarray(list, 0, len(list))\nprint(sum1 - max1 + max1 / m)", "def find_max_subarray(alist, start, end):\n    if start == end - 1:\n        return (start, end, alist[start])\n    else:\n        mid = (start + end) // 2\n        (left_start, left_end, left_max) = find_max_subarray(alist, start, mid)\n        (right_start, right_end, right_max) = find_max_subarray(alist, mid, end)\n        (cross_start, cross_end, cross_max) = find_max_crossing_subarray(alist, start, mid, end)\n        if left_max > right_max and left_max > cross_max:\n            return (left_start, left_end, left_max)\n        elif right_max > left_max and right_max > cross_max:\n            return (right_start, right_end, right_max)\n        else:\n            return (cross_start, cross_end, cross_max)\n\ndef find_max_crossing_subarray(alist, start, mid, end):\n    sum_left = float('-inf')\n    sum_temp = 0\n    cross_start = mid\n    for i in range(mid - 1, start - 1, -1):\n        sum_temp = sum_temp + alist[i]\n        if sum_temp > sum_left:\n            sum_left = sum_temp\n            cross_start = i\n    sum_right = float('-inf')\n    sum_temp = 0\n    cross_end = mid + 1\n    for i in range(mid, end):\n        sum_temp = sum_temp + alist[i]\n        if sum_temp > sum_right:\n            sum_right = sum_temp\n            cross_end = i + 1\n    return (cross_start, cross_end, sum_left + sum_right)\nx = input().split()\nn = int(x[0])\nm = int(x[1])\nlist = []\ny = input().split()\nfor i in range(n):\n    list.append(int(y[i]))\nsum1 = sum(list)\n(start, end, max1) = find_max_subarray(list, 0, len(list))\nprint(sum1 - max1 + max1 / m)", "def find_max_subarray(alist, start, end):\n    if start == end - 1:\n        return (start, end, alist[start])\n    else:\n        mid = (start + end) // 2\n        (left_start, left_end, left_max) = find_max_subarray(alist, start, mid)\n        (right_start, right_end, right_max) = find_max_subarray(alist, mid, end)\n        (cross_start, cross_end, cross_max) = find_max_crossing_subarray(alist, start, mid, end)\n        if left_max > right_max and left_max > cross_max:\n            return (left_start, left_end, left_max)\n        elif right_max > left_max and right_max > cross_max:\n            return (right_start, right_end, right_max)\n        else:\n            return (cross_start, cross_end, cross_max)\n\ndef find_max_crossing_subarray(alist, start, mid, end):\n    sum_left = float('-inf')\n    sum_temp = 0\n    cross_start = mid\n    for i in range(mid - 1, start - 1, -1):\n        sum_temp = sum_temp + alist[i]\n        if sum_temp > sum_left:\n            sum_left = sum_temp\n            cross_start = i\n    sum_right = float('-inf')\n    sum_temp = 0\n    cross_end = mid + 1\n    for i in range(mid, end):\n        sum_temp = sum_temp + alist[i]\n        if sum_temp > sum_right:\n            sum_right = sum_temp\n            cross_end = i + 1\n    return (cross_start, cross_end, sum_left + sum_right)\nx = input().split()\nn = int(x[0])\nm = int(x[1])\nlist = []\ny = input().split()\nfor i in range(n):\n    list.append(int(y[i]))\nsum1 = sum(list)\n(start, end, max1) = find_max_subarray(list, 0, len(list))\nprint(sum1 - max1 + max1 / m)", "def get_the_largest_contiguous_subarray_sum(A, N):\n    max_sum_so_far = 0\n    max_sum_ending_here = 0\n    for i in range(N):\n        max_sum_ending_here += A[i]\n        if max_sum_ending_here < 0:\n            max_sum_ending_here = 0\n        else:\n            max_sum_so_far = max(max_sum_so_far, max_sum_ending_here)\n    return max_sum_so_far\n(N, x) = list(map(int, input().split()))\nA = list(map(int, input().split()))\narray_sum = sum(A)\nmax_subarray_sum = get_the_largest_contiguous_subarray_sum(A, N)\nprofit = max_subarray_sum - max_subarray_sum / x\nmin_sum_possible = array_sum - profit\nprint(min_sum_possible)", "(n, x) = list(map(int, input().split()))\narr = list(map(int, input().split()))\nl = 0\nr = 0\nsuma = 0\nmaxa = 0\ncount = 0\nfor i in range(n):\n    if suma == 0:\n        left = i\n    suma += arr[i]\n    if arr[i] > 0:\n        count += 1\n    right = i\n    if suma < 0:\n        suma = 0\n    if suma > maxa:\n        maxa = suma\n        l = left\n        r = right\nans = 0\nif count == 0:\n    print('%.4f' % sum(arr))\nelse:\n    for i in range(n):\n        if i >= l and i <= r:\n            ans += arr[i] / x\n        else:\n            ans += arr[i]\n    print('%.4f' % ans)", "(n, x) = list(map(int, input().split()))\narr = list(map(int, input().split()))\nl = 0\nr = 0\nsuma = 0\nmaxa = 0\nfor i in range(n):\n    if suma == 0:\n        left = i\n    suma += arr[i]\n    right = i\n    if suma < 0:\n        suma = 0\n    if suma > maxa:\n        maxa = suma\n        l = left\n        r = right\nans = 0\nfor i in range(n):\n    if i >= l and i <= r:\n        ans += arr[i] / x\n    else:\n        ans += arr[i]\nprint('%.4f' % ans)", "(n, x) = list(map(int, input().split()))\na = list(map(int, input().rstrip().split()))\nmax_so_far = 0\nmax_end_here = 0\nfor i in a:\n    max_end_here += i\n    max_end_here = max(0, max_end_here)\n    max_so_far = max(max_so_far, max_end_here)\nprint(sum(a) - max_so_far + max_so_far / x)", "from sys import maxsize\n\ndef maxSubArraySum(a, size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return (start, end)\n(n, x) = map(int, input().split())\na = [int(i) for i in input().split()]\nif all([i < 0 for i in a]):\n    print(sum(a))\nelse:\n    (start, end) = maxSubArraySum(a, n)\n    print(sum(a[0:start]) + sum(a[start:end + 1]) / x + sum(a[end + 1:]))", "(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nk = []\nfor i in range(n):\n    sum1 = 0\n    for j in range(i, n):\n        sum1 = sum1 + l[j]\n        k.append(sum1)\nd = max(k)\nprint(min(sum(l), sum(l) - d + d / m))", "def max_subarray_sum(a):\n    max_till_now = 0\n    max_ending_here = 0\n    minused = 1000000000\n    for i in range(len(a)):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_ending_here > max_till_now:\n            max_till_now = max_ending_here\n    return max_till_now\n(n, x) = map(int, input().strip().split(' '))\nl = list(map(int, input().strip().split(' ')))\nm = max_subarray_sum(l)\nprint(sum(l) - m + m / x)", "(n, x) = map(int, input().split())\nl = list(map(int, input().split()))\nmini1 = 10 ** 18\nmini2 = 10 ** 18\nsum3 = sum(l)\nfor i in range(n):\n    sum1 = 0\n    sum2 = 0\n    for j in range(i, n):\n        sum1 += l[j]\n        sum2 += l[j] / x\n        new_sum = sum3 - sum1 + sum2\n        if new_sum < mini1:\n            mini1 = new_sum\nprint(min(mini1, sum3))", "(n, x) = [int(a) for a in input().split(' ') if a != '']\narr = [int(a) for a in input().split(' ') if a != '']\ntotal = sum(arr)\ntotal_max = arr[0]\ncurrent_max = arr[0]\nfor i in range(1, n):\n    current_max = max(arr[i], current_max + arr[i])\n    total_max = max(current_max, total_max)\nprint(total - total_max + total_max / x)", "def maxSubArraySum(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n(n, x) = map(int, input().split())\na = [int(j) for j in input().split()]\nmaxi = maxSubArraySum(a, len(a))\nsum1 = sum(a)\nprint(sum1 - maxi + maxi / x)", "from sys import maxsize\nnx = list(map(int, input().strip().split()))\nn = nx[0]\nx = nx[1]\nls = list(map(int, input().strip().split()))\nmsf = -maxsize - 1\nmeh = 0\nst = -1\ne = -1\ns = 0\nfor i in range(n):\n    meh += ls[i]\n    if msf < meh:\n        msf = meh\n        st = s\n        e = i\n    if meh < 0:\n        meh = 0\n        s = i + 1\nsumation = 0\nfor i in range(0, st):\n    sumation = sumation + ls[i]\nif e + 1 != n:\n    for k in range(e + 1, n):\n        sumation = sumation + ls[k]\nsumation = sumation + msf / x\nprint(sumation)", "(n, x) = map(int, input().split())\nl = [*map(int, input().split())]\ns = [0]\nfor e in l:\n    s.append(s[-1] + e)\nres = s[-1]\nfor i in range(n):\n    for j in range(i, n):\n        ans = s[i] + (s[j + 1] - s[i]) / x + (s[-1] - s[j + 1])\n        res = min(res, ans)\nprint(res)", "(n, x) = map(int, input().split())\n(s, mn, mx) = (0, 0, 0)\nfor v in map(int, input().split()):\n    s += v\n    if s < mn:\n        mn = s\n    if s - mn > mx:\n        mx = s - mn\nprint(s - mx + mx / x)", "(n, x) = map(int, input().split())\narr = [int(x) for x in input().split()]\nasum = sum(arr)\nminsum = min(asum, asum / x)\nrest = 0\nfor i in range(1, n):\n    asum = asum - arr[-i]\n    rest += arr[-i]\n    minsum = min(minsum, rest + asum / x)\n    temp = rest\n    tempsum = asum\n    for j in range(i):\n        tempsum = tempsum - arr[j] + arr[n - i + j]\n        temp = temp + arr[j] - arr[j + n - i]\n        minsum = min(minsum, temp + tempsum / x)\nprint(minsum)", "(a, b) = map(int, input().split())\nc = list(map(int, input().split()))\ns = sum(c)\nl = sum(c)\ng = sum(c)\nf = []\nfor i in range(a):\n    for j in range(i, a):\n        l = l - c[j] + c[j] / b\n        if l < s:\n            s = l\n    f.append(s)\n    l = g\n    s = g\nprint(min(f))", "(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nmax_so_far = -10000000\nmax_ending_here = 0\nfinish = -1\nstart = 0\nfor i in range(n):\n    max_ending_here = max_ending_here + a[i]\n    if max_so_far < max_ending_here:\n        max_so_far = max_ending_here\n        finish = i\n    if max_ending_here < 0:\n        max_ending_here = 0\ns = 0\na.reverse()\nfinish = n - finish - 1\nif finish != -1:\n    for i in range(finish, n):\n        s = s + a[i]\n        if s == max_so_far:\n            start = i\n            break\nelse:\n    finish = n - 1\n(start, finish) = (finish, start)\nprint(sum(a[:start]) + sum(a[finish + 1:]) + sum(a[start:finish + 1]) / x)", "(a, b) = map(int, input().split())\nc = list(map(int, input().split()))\nk = sum(c)\nl = sum(c)\ng = sum(c)\nf = []\nfor i in range(a):\n    for j in range(i, a):\n        l = l - c[j] + c[j] / b\n        if l < k:\n            k = l\n    f.append(k)\n    l = g\n    k = g\nprint(min(f))", "(n, x) = [int(_) for _ in input().split()]\nl = [int(_) for _ in input().split()]\nbit = [0] * (len(l) + 1)\ntotal = 0\nmax = None\nindex = None\nfor i in range(len(l)):\n    total = l[i]\n    if max == None or total > max:\n        max = total\n        index = (i, i)\n    for j in range(i + 1, len(l)):\n        total += l[j]\n        if total > max:\n            max = total\n            index = (i, j)\nfor i in range(index[0], index[1] + 1):\n    l[i] /= x\nprint(sum(l))", "def maxSubArraySum(a, size):\n    max_so_far = 0\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        elif max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n    return max_so_far\n(n, m) = map(int, input().split())\nl = list(map(int, input().split()))\nprint(sum(l) - maxSubArraySum(l, n) + maxSubArraySum(l, n) / m)", "from math import log\n\ndef maxSubArraySum(a, size):\n    max_so_far = 0\n    max_ending_here = 0\n    l = 0\n    r = 0\n    beg = 0\n    for j in range(0, size):\n        max_ending_here = max_ending_here + a[j]\n        if max_ending_here < 0:\n            max_ending_here = 0\n            beg = j + 1\n        elif max_so_far < max_ending_here:\n            l = beg\n            r = j\n            max_so_far = max_ending_here\n    return (max_so_far, l, r)\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nt = 0\nfor i in a:\n    if i >= 0:\n        t = 1\nif t == 0:\n    print(sum(a))\nelse:\n    (sum1, l, r) = maxSubArraySum(a, n)\n    for i in range(l, r + 1):\n        a[i] = a[i] / x\n    sum = 0\n    for i in a:\n        sum = sum + i\n    print(sum)", "def maxsum(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n(n, x) = map(int, input().split())\na = list(map(int, input().split()))\nq = maxsum(a, n)\nif q >= 0:\n    print(sum(a) - q + q / x)\nelse:\n    print(sum(a))", "(m, n) = map(int, input().split())\na = list(map(int, input().split()))\nt = -1000000\nfor x in range(m):\n    s = 0\n    for y in range(x, m):\n        s += a[y]\n        if s > t:\n            t = s\nd = sum(a)\nprint(min(d, d - t + t / n))", "from sys import maxsize\n\ndef maxSubArraySum(a, size):\n    max_so_far = -maxsize - 1\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    return (start, end)\n(n, k) = [int(i) for i in input().split()]\narr = [int(i) for i in input().split()]\n(i, j) = maxSubArraySum(arr, n)\nfor ii in range(i, j + 1):\n    arr[ii] = arr[ii] / k\nprint(round(sum(arr), 2))", "def maxSubArraySum(a, size):\n    max_so_far = -1 * 1001\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n(n, x) = list(map(int, input().split()))\narr = list(map(int, input().split()))\nmax_sum = maxSubArraySum(arr, n)\nprint(sum(arr) - max_sum + max_sum / x)", "def maxSubArraySum(arr, n, x):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    start = 0\n    end = 0\n    beg = 0\n    for i in range(1, n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_ending_here < arr[i]:\n            max_ending_here = arr[i]\n            beg = i\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = beg\n            end = i\n    s = 0\n    for i in range(len(arr)):\n        if i >= start and i <= end:\n            s = s + arr[i] / x\n        else:\n            s = s + arr[i]\n    return s\n(N, x) = map(int, input().split())\nl = list(map(int, input().split()))\na = maxSubArraySum(l, len(l), x)\nprint('{0:.2f}'.format(a))", "(n, x) = map(int, input().split())\nl = list(map(int, input().split()))\nm = []\nfor i in range(len(l)):\n    for j in range(i, len(l)):\n        m.append(sum(l[i:j + 1]))\na = min(m)\nb = max(m)\ns = sum(l)\nif b > 0:\n    print(s - b + b / x)\nelif b < 0:\n    print(s)\nelse:\n    print(s)", "def ma(a):\n    kt = 0\n    for i in a:\n        if i > 0:\n            kt = 1\n            break\n    if kt == 0:\n        return max(a)\n    ma = 0\n    cur = 0\n    for i in a:\n        cur += i\n        if cur < 0:\n            cur = 0\n        if cur > ma:\n            ma = cur\n    return ma\n(n, m) = [int(x) for x in input().split()]\na = [int(x) for x in input().split()]\ns = sum(a)\ncu = 0\ns1 = ma(a)\ns2 = s - s1\ns1 = s1 / m + s2\nprint(round(s1, 2))", "(a, b) = map(int, input().split())\nc = list(map(int, input().split()))\nk = sum(c)\nl = sum(c)\ng = sum(c)\nf = []\nfor i in range(a):\n    for j in range(i, a):\n        l = l - c[j] + c[j] / b\n        if l < k:\n            k = l\n    f.append(k)\n    l = g\n    k = g\nprint(min(f))", "from sys import maxsize as maxint\n\ndef maxS(a, size):\n    max_so_far = -maxint - 1\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n(n, x) = map(int, input().split())\nl = list(map(int, input().split()))\nf = maxS(l, n)\nprint(sum(l) - f + f / x)", "def maxSubArraySum(a, size):\n    max_so_far = a[0]\n    curr_max = a[0]\n    for i in range(1, size):\n        curr_max = max(a[i], curr_max + a[i])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n(n, k) = [int(x) for x in input().strip().split()]\narr = [int(x) for x in input().strip().split()]\noldsum = sum(arr)\nmaxsumsub = maxSubArraySum(arr, n)\nprint(round(oldsum - maxsumsub + maxsumsub / k, 2))", "def maxSubArraySum(a, size):\n    max_so_far = -10 ** 9 - 1\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n(n, x) = map(int, input().split())\nl = list(map(int, input().split()))\nval = maxSubArraySum(l, n)\nprint('%.2f' % (sum(l) - val + val / x))", "def maxSubArraySum(a, size, lk):\n    max_so_far = 0\n    max_ending_here = 0\n    start = 0\n    end = 0\n    s = 0\n    for i in range(0, size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n            start = s\n            end = i\n        if max_ending_here < 0:\n            max_ending_here = 0\n            s = i + 1\n    sum1 = sum(a[0:start])\n    sum2 = sum(a[start:end + 1]) / lk\n    sum3 = sum(a[end + 1:])\n    print(sum1 + sum2 + sum3)\nq = input().split()\na = int(q[0])\nb = int(q[1])\nw = input().split()\nfor i in range(a):\n    w[i] = int(w[i])\nmaxSubArraySum(w, a, b)", "(n, x) = map(int, input().split())\narr = list(map(int, input().split()))\narr1 = []\nfor i in range(n):\n    narr = arr.copy()\n    for j in range(i, n):\n        narr[j] = narr[j] / x\n        arr1.append(sum(narr))\nprint(min(arr1))", "(n, x) = map(int, input().split())\narr = list(map(int, input().split()))\nstart = 0\nend = 0\nsumm = 0\nmaxstart = 0\nmaxend = 0\nmaxsumm = 0\nfor i in range(len(arr)):\n    if summ == 0:\n        start = i\n    summ += arr[i]\n    if summ <= 0:\n        start = i + 1\n        end = i + 1\n        summ = 0\n    elif summ > maxsumm:\n        maxstart = start\n        maxend = i\n        maxsumm = summ\nfor i in range(maxstart, maxend + 1):\n    arr[i] = arr[i] / x\nnewsumm = 0\nfor i in range(len(arr)):\n    newsumm += arr[i]\nprint(newsumm)", "import sys\nmod = 1000000007\nget_arr = lambda : list(map(int, input().split()))\nget_int = lambda : int(input())\nget_ints = lambda : map(int, input().split())\nget_str = lambda : input()\nget_strs = lambda : input().split()\nfrom math import log\n(n, x) = get_ints()\nA = get_arr()\ntot = sum(A) * 1.0\nstart = 0\nend = 0\ncurr_max = 0\nprev_max = 0\nstart_o = 0\nfor i in range(n):\n    curr_max += A[i]\n    if curr_max < 0:\n        start = i + 1\n        curr_max = 0\n    elif curr_max > prev_max:\n        end = i\n        start_o = start\n        prev_max = curr_max\nfor i in range(start_o, end + 1):\n    tot -= A[i]\n    tot += A[i] * 1.0 / x\nprint(tot)", "ll = lambda : list(map(int, input().split()))\n[n, x] = ll()\narr = ll()\nmins = 99999999\nps = [0]\nfor i in range(n):\n    ps.append(ps[-1] + arr[i])\nfor i in range(n):\n    subsum = [0] * n\n    for j in range(i, n):\n        ans = ps[i] + (ps[j + 1] - ps[i]) / x + ps[-1] - ps[j]\n        if ans < mins:\n            mins = ans\nprint(round(mins, 1))", "def maxSubArraySum(a, size):\n    max_so_far = -1000000000\n    max_ending_here = 0\n    for i in range(0, size):\n        max_ending_here = max_ending_here + a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n(n, x) = [int(i) for i in input().split()]\nlis = [int(i) for i in input().split()]\ninit = sum(lis)\nif x == 0:\n    print(init)\nelse:\n    useme = maxSubArraySum(lis, n)\n    print(min(init, init - (x - 1) * useme / x))", "for _ in range(1):\n    (n, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mx = -1e+17\n    s = 0.0\n    f = 0.0\n    for i in range(n):\n        s += a[i]\n        f += a[i]\n        mx = max(mx, s)\n        if s < 0.0:\n            s = 0.0\n        mx = max(mx, s)\n    ans = f - mx + mx / x\n    print('%.5f' % ans)"]