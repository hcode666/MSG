["EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    try:\n        func = lambda t: p / t / t + q / t + r\n    except:\n        pass\n\n    def method1():\n        if b == c:\n            return 0\n        t_opt = t_exit\n        if q < 0:\n            t_opt = min(-2 * p / q, t_exit)\n        return max(0, func(t_opt)) ** 0.5\n\n    def method2():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    assert abs(method1() - method2()) < EPS_ANS\n    ans = method1()\n    print('%.12f' % (ans,))", "eps = 1e-08\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    greatest_time = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            greatest_time = min(greatest_time, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            greatest_time = min(greatest_time, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def ternsearch():\n        if b == c:\n            return 0\n        (lo, hi) = (0, greatest_time)\n        while hi - lo > eps:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = ternsearch()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        t_opt = t_exit\n        if q < 0:\n            t_opt = min(-2 * p / q, t_exit)\n        return max(0, func(t_opt)) ** 0.5\n\n    def method2():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    assert abs(method1() - method2()) < EPS_ANS\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        t_opt = t_exit\n        if q < 0:\n            t_opt = min(-2 * p / q, t_exit)\n        return max(0, func(t_opt)) ** 0.5\n\n    def method2():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    assert abs(method1() - method2()) < EPS_ANS\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "eps = 1e-08\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    greatest_time = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            greatest_time = min(greatest_time, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            greatest_time = min(greatest_time, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def ternsearch():\n        if b == c:\n            return 0\n        (lo, hi) = (0, greatest_time)\n        while hi - lo > eps:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = ternsearch()\n    print('%.12f' % (ans,))", "eps = 1e-08\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    greatest_time = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            greatest_time = min(greatest_time, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            greatest_time = min(greatest_time, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def ternsearch():\n        if b == c:\n            return 0\n        (lo, hi) = (0, greatest_time)\n        while hi - lo > eps:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = ternsearch()\n    print('%.12f' % (ans,))", "eps = 1e-08\nt = int(input())\nfor ii in range(t):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n    b = [int(i) for i in input().split()]\n    v = [int(i) for i in input().split()]\n    c = [int(i) for i in input().split()]\n    greatest_time = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            greatest_time = min(greatest_time, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            greatest_time = min(greatest_time, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def ternsearch():\n        if b == c:\n            return 0\n        (lo, hi) = (0, greatest_time)\n        while hi - lo > eps:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = ternsearch()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "EPS = 1e-08\nEPS_ANS = 0.001\nfor t in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    b = list(map(int, input().split()))\n    v = list(map(int, input().split()))\n    c = list(map(int, input().split()))\n    t_exit = l[0] / v[0]\n    for i in range(1, n):\n        if v[i] > 0:\n            t_exit = min(t_exit, (l[i] - b[i]) / v[i])\n        elif v[i] < 0:\n            t_exit = min(t_exit, -b[i] / v[i])\n    p = sum(((b[i] - c[i]) ** 2 for i in range(n)))\n    q = sum((2 * (b[i] - c[i]) * v[i] for i in range(n)))\n    r = sum((vi ** 2 for vi in v))\n    func = lambda t: p / t / t + q / t + r\n\n    def method1():\n        if b == c:\n            return 0\n        (lo, hi) = (0, t_exit)\n        while hi - lo > EPS:\n            d = (hi - lo) / 3\n            m1 = lo + d\n            m2 = m1 + d\n            if func(m1) <= func(m2):\n                hi = m2\n            else:\n                lo = m1\n        return max(0, func(lo)) ** 0.5\n    ans = method1()\n    print('%.12f' % (ans,))", "import math\nfor i in range(int(input())):\n    n = int(input())\n    bound = [int(i) for i in input().split()]\n    ball = [int(i) for i in input().split()]\n    speed = [int(i) for i in input().split()]\n    chef = [int(i) for i in input().split()]\n    cspeed = 0\n    time = float('inf')\n    for i in range(n):\n        if speed[i] > 0:\n            a = (bound[i] - ball[i]) / speed[i]\n            time = min(a, time)\n        elif speed[i] < 0:\n            a = abs(ball[i] / speed[i])\n            time = min(a, time)\n    a = b = c = 0\n    for i in range(n):\n        c += speed[i] ** 2\n        a += (ball[i] - chef[i]) ** 2\n        b += 2 * speed[i] * (ball[i] - chef[i])\n    if a == 0:\n        print(0)\n    else:\n        x = -b / (2 * a)\n        if x >= 1 / time:\n            cspeed = c - b ** 2 / (4 * a)\n            print(math.sqrt(cspeed))\n        else:\n            cspeed = a / time ** 2 + b / time + c\n            print(math.sqrt(cspeed))"]