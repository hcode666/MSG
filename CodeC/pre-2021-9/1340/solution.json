["t = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    x = list(map(int, input().split()))\n    h1 = list(map(int, input().split()))\n    for j in range(n):\n        h1[j] = h1[j] - h\n    c = 0\n    for k in range(n):\n        if x[k] <= h1[k]:\n            print(-1)\n            c = 1\n            break\n    ans = 0\n    for z in range(n):\n        if (h1[z] + x[z] + 2) / 2 > ans:\n            ans = (h1[z] + x[z] + 2) / 2\n    if c == 0:\n        print(int(ans))", "t = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    x = list(map(int, input().split()))\n    h1 = list(map(int, input().split()))\n    for j in range(n):\n        h1[j] = h1[j] - h\n    c = 0\n    for k in range(n):\n        if x[k] <= h1[k]:\n            print(-1)\n            c = 1\n            break\n    ans = 0\n    for z in range(n):\n        if (h1[z] + x[z] + 2) / 2 > ans:\n            ans = (h1[z] + x[z] + 2) / 2\n    if c == 0:\n        print(int(ans))", "t = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    x = list(map(int, input().split()))\n    h1 = list(map(int, input().split()))\n    for j in range(n):\n        h1[j] = h1[j] - h\n    c = 0\n    for k in range(n):\n        if x[k] <= h1[k]:\n            print(-1)\n            c = 1\n            break\n    ans = 0\n    for z in range(n):\n        if (h1[z] + x[z] + 2) / 2 > ans:\n            ans = (h1[z] + x[z] + 2) / 2\n    if c == 0:\n        print(int(ans))", "T = int(input())\nfor i in range(T):\n    (N, H) = input().split()\n    N = int(N)\n    H = int(H)\n    X = list(map(int, input().split()))\n    Heights = list(map(int, input().split()))\n    for i in range(N):\n        Heights[i] = Heights[i] - H\n    c = 0\n    for i in range(N):\n        if X[i] <= Heights[i]:\n            print(-1)\n            c = 1\n            break\n    ans = 0\n    for i in range(N):\n        if (Heights[i] + X[i] + 2) / 2 > ans:\n            ans = (Heights[i] + X[i] + 2) / 2\n    if c == 0:\n        print(int(ans))", "n_testcase = int(input())\nfor testcase in range(n_testcase):\n    (n, initial_height) = (int(x) for x in input().split())\n    obstacle_positions = [int(x) for x in input().split()]\n    obstacle_heights = [int(x) for x in input().split()]\n    obstacles = list(zip(obstacle_positions, obstacle_heights))\n    impossible = any((obstacle_height - initial_height >= obstacle_position for (obstacle_position, obstacle_height) in obstacles))\n    if impossible:\n        print(-1)\n        continue\n    left = max((max(obstacle_positions) - initial_height + 1) // 2, 0)\n    right = 10 ** 9\n    while left < right:\n        mid = (left + right) // 2\n        for (obstacle_position, obstacle_height) in obstacles:\n            count_up = min(mid, obstacle_position)\n            count_down = obstacle_position - count_up\n            if initial_height + count_up - count_down <= obstacle_height:\n                left = mid + 1\n                break\n        else:\n            right = mid\n    print(right)", "def check(k, x, h, H):\n    for i in range(len(x)):\n        if x[i] <= k and H + x[i] <= h[i]:\n            return False\n        if x[i] > k and H + k - (x[i] - k) <= h[i]:\n            return False\n    return True\nfor _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    x = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    (l, r) = (0, 10 ** 9)\n    ans = -1\n    while l <= r:\n        mid = (l + r) // 2\n        if check(mid, x, h, H):\n            ans = mid\n            r = mid - 1\n        else:\n            l = mid + 1\n    print(ans)", "for _ in range(int(input())):\n    (n, H) = map(int, input().rstrip().split())\n    x = list(map(int, input().rstrip().split()))\n    h = list(map(int, input().rstrip().split()))\n    p = list()\n    for i in range(n):\n        p.append((x[i], h[i] - H))\n    flag = True\n    clicks = 0\n    for (x, h) in p:\n        if x <= h:\n            flag = False\n            break\n        clicks = max((x + h + 2) // 2, clicks)\n    if flag:\n        print(clicks)\n    else:\n        print(-1)", "import math\nt = int(input())\nfor _ in range(t):\n    (n, H) = map(int, input().split())\n    positions = list(map(int, input().split()))\n    heights = list(map(int, input().split()))\n    ans = 0\n    p = 0\n    d = positions[0] - 0\n    h = heights[0] + 1 - H\n    x = max(0, math.ceil((d + h) / 2))\n    prev_h = H + x - (d - x)\n    alone = d - x\n    if x > d:\n        p = 1\n    else:\n        ans = ans + x\n        for i in range(1, n):\n            d = positions[i] - positions[i - 1]\n            h = heights[i] + 1 - prev_h\n            x = max(0, math.ceil((d + h) / 2))\n            if x > d:\n                if alone >= math.ceil((h - d) / 2):\n                    prev_h = prev_h + d + 2 * math.ceil((h - d) / 2)\n                    alone = alone - math.ceil((h - d) / 2)\n                    ans = ans + d + math.ceil((h - d) / 2)\n                else:\n                    p = 1\n                    break\n            else:\n                ans = ans + x\n                prev_h = prev_h + x - (d - x)\n                alone = alone + d - x\n    if p == 1:\n        print(-1)\n    else:\n        print(ans)", "for _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    l = []\n    for i in input().split():\n        x = int(i)\n        l.append(x)\n    h = []\n    for i in input().split():\n        x = int(i)\n        h.append(x - H)\n    flag = True\n    ans = 0\n    for (a, b) in zip(l, h):\n        if a <= b:\n            flag = False\n            break\n        ans = max(ans, (a + b + 2) // 2)\n    print(ans if flag else -1)", "t = int(input())\nfor _ in range(t):\n    (n, H) = map(int, input().split())\n    x = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    res = []\n    for i in range(len(h)):\n        s = h[i] - H\n        res.append(s)\n    result = 0\n    flag = 0\n    for i in range(len(res)):\n        if x[i] > res[i]:\n            result = max(result, (x[i] + res[i] + 2) // 2)\n        else:\n            flag = 1\n            break\n    if flag == 0:\n        print(result)\n    else:\n        print('-1')", "maxx = 1000000009\n\ndef check(k, x, h, n):\n    for i in range(n):\n        if x[i] <= k:\n            if h[i] >= H + x[i]:\n                return False\n        elif h[i] >= H + k - (x[i] - k):\n            return False\n    return True\nfor __ in range(int(input())):\n    (n, H) = map(int, input().split())\n    x = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    low = 0\n    high = maxx\n    ans = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if check(mid, x, h, n):\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(ans)", "maxx = 1000000009\n\ndef check(k, x, h, n):\n    for i in range(n):\n        if x[i] <= k:\n            if h[i] >= H + x[i]:\n                return False\n        elif h[i] >= H + k - (x[i] - k):\n            return False\n    return True\nt = int(input())\nwhile t > 0:\n    (n, H) = map(int, input().split())\n    x = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    low = 0\n    high = maxx\n    ans = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if check(mid, x, h, n):\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(ans)\n    t = t - 1", "def check(x):\n    for i in range(n):\n        if X[i] <= x:\n            if H[i] >= X[i]:\n                return False\n        elif H[i] >= x - (X[i] - x):\n            return False\n    return True\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    X = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    for i in range(n):\n        H[i] -= h\n    s = 0\n    e = 2000000000\n    while s < e:\n        mid = (s + e) // 2\n        if check(mid) == False:\n            s = mid + 1\n        else:\n            e = mid\n    if s > 1000000010:\n        s = -1\n    print(s)", "maxx = 1000000009\n\ndef isvalid(k, x, h, n):\n    for i in range(n):\n        if x[i] <= k:\n            if h[i] >= H + x[i]:\n                return False\n        elif h[i] >= H + k - (x[i] - k):\n            return False\n    return True\nfor _ in range(int(input())):\n    (n, H) = map(int, input().split())\n    x = list(map(int, input().split()))\n    h = list(map(int, input().split()))\n    low = 0\n    high = maxx\n    ans = -1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if isvalid(mid, x, h, n):\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(ans)", "def check(obs_pos, obs_h, h, clicks):\n    for i in range(len(obs_pos)):\n        if i == 0:\n            if clicks <= obs_pos[0]:\n                h += clicks\n                h -= obs_pos[0] - clicks\n                clicks = 0\n            else:\n                h += obs_pos[0]\n                clicks -= obs_pos[0]\n        elif clicks <= obs_pos[i] - obs_pos[i - 1]:\n            h += clicks\n            h -= obs_pos[i] - obs_pos[i - 1] - clicks\n            clicks = 0\n        elif clicks > obs_pos[i] - obs_pos[i - 1]:\n            h += obs_pos[i] - obs_pos[i - 1]\n            clicks -= obs_pos[i] - obs_pos[i - 1]\n        if h <= obs_h[i]:\n            return False\n    else:\n        return True\n\ndef bsearch(obs_pos, obs_h, h):\n    left = 0\n    right = obs_pos[-1]\n    ans = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if check(obs_pos, obs_h, h, mid):\n            ans = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return ans\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    obs_pos = [int(x) for x in input().split()]\n    obs_h = [int(h) for h in input().split()]\n    ans = bsearch(obs_pos, obs_h, h)\n    print(ans)", "for _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    X = list(map(int, input().split()))\n    H = list(map(int, input().split()))\n    Y = []\n    for i in range(n):\n        x = X[i]\n        reqh = H[i]\n        if reqh >= h + x:\n            print(-1)\n            break\n        else:\n            Y.append(h + x - reqh - 1)\n    else:\n        c = 0\n        m = Y[-1]\n        for i in range(n - 1, -1, -1):\n            m = min(m, Y[i])\n            if m <= 1:\n                break\n            tick = X[i] - (X[i - 1] if i != 0 else 0)\n            lw = min(m // 2, tick)\n            c += lw\n            m -= lw * 2\n        print(X[-1] - c)"]