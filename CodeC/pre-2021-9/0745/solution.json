["for _ in range(int(input())):\n    s = list(input())\n    s_set = {}\n    for x in s:\n        if x in s_set:\n            s_set[x] += 1\n        else:\n            s_set[x] = 1\n    result = []\n    nums = [_ for _ in s_set.values()]\n    nums.sort(reverse=True)\n    nums = list(nums + [0] * (26 - len(nums)))\n    for i in range(26, 0, -1):\n        if len(s) % i == 0:\n            nums_cut = nums[:i]\n            cout = 0\n            t = len(s) // i\n            for x in nums_cut:\n                if x < t:\n                    cout += t - x\n            result.append(cout)\n    print(min(result))", "for _ in range(int(input())):\n    s = list(input())\n    s_set = {}\n    for x in s:\n        if x in s_set:\n            s_set[x] += 1\n        else:\n            s_set[x] = 1\n    result = []\n    nums = [_ for _ in s_set.values()]\n    nums.sort(reverse=True)\n    nums = list(nums + [0] * (26 - len(nums)))\n    for i in range(26, 0, -1):\n        if len(s) % i == 0:\n            nums_cut = nums[:i]\n            cout = 0\n            t = len(s) // i\n            for x in nums_cut:\n                if x < t:\n                    cout += t - x\n            result.append(cout)\n    print(min(result))", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    f = Counter(s)\n    n = len(s)\n    ans = float('inf')\n    values = list(f.values())\n    values.sort(reverse=True)\n    for i in range(1, 27):\n        d = i\n        if n % i == 0:\n            g = n // i\n            s = 0\n            trim = values[:d]\n            for j in trim:\n                if j > g:\n                    s += g\n                else:\n                    s += j\n            ans = min(ans, n - s)\n    print(ans)", "from collections import Counter\nfor _ in range(int(input())):\n    s = input()\n    f = Counter(s)\n    n = len(s)\n    ans = float('inf')\n    values = list(f.values())\n    values.sort(reverse=True)\n    for i in range(1, 27):\n        d = i\n        if n % i == 0:\n            g = n // i\n            s = 0\n            trim = values[:d]\n            for j in trim:\n                if j > g:\n                    s += g\n                else:\n                    s += j\n            ans = min(ans, n - s)\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    freq = Counter(s)\n    ans = float('inf')\n    values = list(freq.values())\n    values.sort(reverse=True)\n    for i in range(1, 27):\n        distinct = i\n        if n % i == 0:\n            goal = n // i\n            same = 0\n            trim = values[:distinct]\n            for c in trim:\n                if c > goal:\n                    same += goal\n                else:\n                    same += c\n            left = n - same\n            ans = min(ans, left)\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    freq = Counter(s)\n    ans = float('inf')\n    values = list(freq.values())\n    values.sort(reverse=True)\n    for i in range(1, 27):\n        distinct = i\n        if n % i == 0:\n            goal = n // i\n            same = 0\n            trim = values[:distinct]\n            for c in trim:\n                if c > goal:\n                    same += goal\n                else:\n                    same += c\n            left = n - same\n            ans = min(ans, left)\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    freq = Counter(s)\n    ans = float('inf')\n    values = list(freq.values())\n    values.sort(reverse=True)\n    for i in range(1, 27):\n        distinct = i\n        if n % i == 0:\n            goal = n // i\n            same = 0\n            trim = values[:distinct]\n            for c in trim:\n                if c > goal:\n                    same += goal\n                else:\n                    same += c\n            left = n - same\n            ans = min(ans, left)\n    print(ans)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    freq = Counter(s)\n    ans = float('inf')\n    values = list(freq.values())\n    values.sort(reverse=True)\n    for i in range(1, 27):\n        distinct = i\n        if n % i == 0:\n            goal = n // i\n            same = 0\n            trim = values[:distinct]\n            for c in trim:\n                if c > goal:\n                    same += goal\n                else:\n                    same += c\n            left = n - same\n            ans = min(ans, left)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    a = [0] * (26 - len(set(s)))\n    b = []\n    c = []\n    d = []\n    for i in s:\n        if i not in b:\n            b.append(i)\n            a.append(s.count(i))\n    a.sort(reverse=True)\n    if len(list(set(s))) == len(s):\n        print('0')\n    else:\n        n = len(s)\n        for i in range(1, 27):\n            if n % i == 0:\n                c.append(i)\n        for i in c:\n            v = 0\n            for j in range(0, i):\n                if int(n / i) - a[j] > 0:\n                    v = v + (int(n / i) - a[j])\n            d.append(v)\n        print(min(d))", "for _ in range(int(input())):\n    s = input()\n    a = [0] * (26 - len(set(s)))\n    b = []\n    c = []\n    d = []\n    for i in s:\n        if i not in b:\n            b.append(i)\n            a.append(s.count(i))\n    a.sort(reverse=True)\n    if len(list(set(s))) == len(s):\n        print('0')\n    else:\n        n = len(s)\n        for i in range(1, 27):\n            if n % i == 0:\n                c.append(i)\n        for i in c:\n            v = 0\n            for j in range(0, i):\n                if int(n / i) - a[j] > 0:\n                    v = v + (int(n / i) - a[j])\n            d.append(v)\n        print(min(d))", "def main():\n    for j in range(int(input())):\n        S = str(input())\n        N = len(S)\n        A = [0] * 27\n        for c in S:\n            A[ord(c) - 65] = A[ord(c) - 65] + 1\n        A = sorted(A, reverse=True)\n        minSwap = N + 1\n        for i in range(1, 27):\n            if N % i == 0:\n                temp = N // i\n                tempSwap = 0\n                for f in range(i):\n                    if temp > A[f]:\n                        tempSwap = tempSwap + temp - A[f]\n                if tempSwap <= minSwap:\n                    minSwap = tempSwap\n        if minSwap == N + 1:\n            minSwap = 0\n        print(minSwap)\nmain()", "from sys import stdin\nfrom collections import Counter\n\ndef func(arr, n, l):\n    count = 0\n    k = l // n\n    if n < len(arr):\n        for ele in arr[0:n]:\n            count += max(0, k - ele)\n    else:\n        for ele in arr:\n            count += max(0, ele - k)\n    return count\nfor _ in range(int(stdin.readline())):\n    s = stdin.readline().strip()\n    d = Counter(s)\n    arr = sorted(list(d.values()), reverse=True)\n    l = len(s)\n    val = [1]\n    for i in range(2, 27):\n        if l % i == 0:\n            val.append(i)\n    ans = float('inf')\n    for ele in val:\n        x = func(arr, ele, l)\n        if x < ans:\n            ans = x\n    print(ans)", "def hash_it(arr, s):\n    for i in range(len(s)):\n        arr[ord(s[i]) - 65] += 1\n    arr = sorted(arr, reverse=True)\n    return arr\n\ndef balance(s, arr, l):\n    val = len(set(s))\n    res = 10000000000\n    pp = 0\n    for p in range(1, 27):\n        ptr = 0\n        if l % p == 0:\n            var = l // p\n            for q in range(p):\n                if arr[q] > var:\n                    ptr += arr[q] - var\n            for q in range(p, 26):\n                if arr[q] > 0:\n                    ptr += arr[q]\n            res = min(ptr, res)\n        pp += 1\n    if pp == 26:\n        pp = 0\n    return res\nfor _ in range(int(input())):\n    s = input()\n    l = len(s)\n    if l <= 2:\n        print(0)\n        continue\n    arr = [0 for i in range(0, 27)]\n    arr = hash_it(arr, s)\n    print(balance(s, arr, l))", "t = int(input())\nS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nwhile t > 0:\n    max = 1000000\n    s = input()\n    d = {}\n    ll = []\n    for str in S:\n        d[str] = 0\n    for i in range(1, 27):\n        if len(s) % i == 0:\n            ll.append(i)\n    for i in s:\n        d[i] += 1\n    l = sorted(d.items(), key=lambda ele: ele[1], reverse=True)\n    i = 0\n    ans = 0\n    while i < len(ll):\n        cnt = len(s) // ll[i]\n        for j in range(ll[i]):\n            if l[j][1] < cnt:\n                ans += cnt - l[j][1]\n        i += 1\n        if ans < max:\n            max = ans\n        ans = 0\n    print(max)\n    t -= 1", "import numpy as np\nfrom math import floor\n\ndef getFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0 and n / i < 27:\n            factors.append(i)\n    return factors\nt = input()\nt = int(t)\nwhile t > 0:\n    t -= 1\n    s = input()\n    n = len(s)\n    fact = getFactors(n)\n    str = list(s)\n    tot = 0\n    (u, c) = np.unique(str, return_counts=True)\n    c[::-1].sort()\n    c_sum = c.sum()\n    c_size = len(c)\n    min = 100000000\n    for i in fact:\n        tot = 0\n        k = floor(c_sum / i)\n        if k < c_size:\n            for j in range(k):\n                if c[j] - i > 0:\n                    tot += c[j] - i\n            for j in range(k, c_size):\n                tot += c[j]\n        else:\n            for j in c:\n                if j - i > 0:\n                    tot += j - i\n        if tot < min:\n            min = tot\n    print(min)", "from collections import Counter\nt = int(input())\nfor i in range(t):\n    s = input()\n    c = Counter(s)\n    l = list(c.values())\n    l.sort(reverse=True)\n    it = sum(l)\n    k = len(l)\n    ans = 999999999\n    while k >= 1:\n        if it % k == 0:\n            p = it // k\n            sumi = 0\n            for j in range(len(l)):\n                if l[j] > p:\n                    sumi += l[j] - p\n                elif j >= k:\n                    sumi += l[j]\n            if sumi < ans:\n                ans = sumi\n        k -= 1\n    k = len(l) + 1\n    while k <= 26 and k <= len(s):\n        if it % k == 0:\n            p = it // k\n            sumi = 0\n            for j in range(len(l)):\n                if l[j] > p:\n                    sumi += l[j] - p\n                else:\n                    break\n            if sumi < ans:\n                ans = sumi\n        k += 1\n    print(ans)", "for i in range(int(input())):\n    s = input()\n    l = [0 for i in range(26)]\n    for i in s:\n        l[ord(i) - 65] += 1\n    l.sort()\n    n = len(s)\n    ans = float('inf')\n    for i in range(1, 27):\n        temp = 0\n        if n % i == 0:\n            p = n // i\n            for j in range(26 - i):\n                temp += l[j]\n            for j in range(26 - i, 26):\n                if l[j] > p:\n                    temp += l[j] - p\n            ans = min(ans, temp)\n    print(ans)", "import sys\nR = lambda : map(int, input().split())\nt = int(input())\nfor _ in range(t):\n    string = input()\n    n = len(string)\n    a = [0] * 26\n    for i in string:\n        a[ord(i) - ord('A')] += 1\n    rev_lst = sorted(a, reverse=True)\n    ans = n\n    for i in range(1, 27):\n        if n % i == 0:\n            x = int(n / i)\n            y = 0\n            for j in range(0, i):\n                y += min(rev_lst[j], x)\n            ans = min(ans, n - y)\n    print(ans)", "import sys\n\ndef count(str):\n    le = len(str)\n    dc = 26\n    max = 0\n    if le <= 2:\n        return 0\n    my_list = frequency(str)\n    m = len(my_list)\n    if le < dc:\n        max = le\n    else:\n        max = dc\n    sm = sys.maxsize - 1\n    for i in range(1, max + 1):\n        if le % i == 0:\n            mov = moves(le, my_list, m, i)\n            if mov < sm:\n                sm = mov\n    return sm\n\ndef frequency(str):\n    my_list = [0] * 26\n    for x in str:\n        my_list[ord(x) - 65] += 1\n    my_list.sort(reverse=True)\n    k = 0\n    for x in my_list:\n        k += 1\n        if x == 0:\n            break\n    return my_list[:k + 1]\n\ndef moves(le, freq, m, n):\n    avg = le / n\n    mov = 0\n    if n == m:\n        for x in freq:\n            if x <= avg:\n                break\n            mov += x - avg\n    elif n < m:\n        for i in range(n):\n            mov += abs(freq[i] - avg)\n        for i in range(n, m, 1):\n            mov += freq[i]\n        mov = int(mov)\n        mov >>= 1\n    else:\n        for i in range(len(freq)):\n            mov += abs(freq[i] - avg)\n        mov += (n - m) * avg\n        mov = int(mov)\n        mov >>= 1\n    return mov\nt = int(input())\nwhile t != 0:\n    k = input()\n    print(int(count(k)))\n    t -= 1", "for t in range(int(input())):\n    s = input()\n    l = sorted([char for char in s])\n    i = 0\n    x = []\n    cnt = 1\n    while i < len(l) - 1:\n        if l[i] != l[i + 1]:\n            x.append(cnt)\n            cnt = 0\n        cnt = cnt + 1\n        i = i + 1\n    x.append(cnt)\n    m = 0\n    for k in range(len(x), 27):\n        if sum(x) % k == 0:\n            m = sum(x) // k\n            break\n    z = [max(0, a - m) for a in x]\n    for i in range(len(x), 0, -1):\n        if sum(x) % i == 0:\n            m = sum(x) // i\n            break\n    y = [max(0, m - a) for a in x]\n    print(min(sum(sorted(z)), sum(sorted(y)[0:i])))", "T = int(input())\nwhile T > 0:\n    S = input()\n    ls = [0 for i in range(26)]\n    for x in S:\n        ls[ord(x) - 65] += 1\n    n = len(S)\n    c = 1\n    ls.sort(reverse=True)\n    while c <= 26:\n        if n % c != 0:\n            c = c + 1\n            continue\n        else:\n            f = n // c\n            i = 0\n            temp_min = 0\n            while i < c and i < len(ls):\n                temp_min += min(ls[i], f)\n                i = i + 1\n            temp_min = n - temp_min\n            if c == 1:\n                minimum = temp_min\n            elif minimum > temp_min:\n                minimum = temp_min\n        c = c + 1\n    print(minimum)\n    T = T - 1", "t = int(input())\nwhile t:\n    s = input()\n    n = len(s)\n    res = n\n    freq = [0] * 26\n    for i in s:\n        freq[ord(i) - 65] += 1\n    freq.sort(reverse=True)\n    for i in range(1, 27):\n        if n % i == 0:\n            x = 0\n            y = n // i\n            for j in range(i):\n                x += min(y, freq[j])\n            res = min(n - x, res)\n    print(res)\n    t -= 1", "for _ in range(int(input())):\n    S = input()\n    n = len(S)\n    A = [0] * 26\n    for i in S:\n        A[ord(i) - 65] += 1\n    A.sort()\n    A = A[::-1]\n    res = n\n    for i in range(min(n, 26)):\n        if n % (i + 1) == 0:\n            F = n // (i + 1)\n            y = 0\n            for j in range(i + 1):\n                y += min(A[j], F)\n            res = min(res, n - y)\n    print(res)", "for _ in range(int(input())):\n    S = input()\n    n = len(S)\n    A = [0] * 26\n    for i in S:\n        A[ord(i) - 65] += 1\n    A.sort()\n    A = A[::-1]\n    res = n\n    for i in range(26):\n        if n % (i + 1) == 0:\n            F = n // (i + 1)\n            y = 0\n            for j in range(i + 1):\n                y += min(A[j], F)\n            res = min(res, n - y)\n    print(res)", "def solve_equal(lst, no_of_elem_in_group):\n    dist = 0\n    for i in lst:\n        if i > no_of_elem_in_group:\n            dist += abs(no_of_elem_in_group - i)\n    return dist\n\ndef solve(lst, l, no_of_group):\n    no_of_elem_in_group = l // no_of_group\n    list_len = len(lst)\n    dist = 0\n    if no_of_group >= list_len:\n        return solve_equal(lst, no_of_elem_in_group)\n    else:\n        lst.sort()\n        dist = sum(lst[0:list_len - no_of_group])\n        return dist + solve_equal(lst, no_of_elem_in_group)\nT = int(input())\nfor z in range(T):\n    dct = {}\n    s = list(input())\n    for elem in s:\n        try:\n            dct[elem] += 1\n        except:\n            dct[elem] = 1\n    lst = list(dct.values())\n    l = len(s)\n    mn = 99999999999999999\n    for i in range(1, min(l + 1, 27)):\n        no_of_group = i\n        if l % no_of_group == 0:\n            lst2 = lst[:]\n            tmp = solve(lst2, l, no_of_group)\n            if tmp < mn:\n                mn = tmp\n    print(mn)", "def main():\n    for j in range(int(input())):\n        S = str(input())\n        N = len(S)\n        A = [0] * 27\n        for c in S:\n            A[ord(c) - 65] = A[ord(c) - 65] + 1\n        A = sorted(A, reverse=True)\n        minSwap = N + 1\n        for i in range(1, 27):\n            if N % i == 0:\n                temp = N // i\n                tempSwap = 0\n                for f in range(i):\n                    if temp > A[f]:\n                        tempSwap = tempSwap + temp - A[f]\n                if tempSwap <= minSwap:\n                    minSwap = tempSwap\n        if minSwap == N + 1:\n            minSwap = 0\n        print(minSwap)\nmain()", "for test_case in range(int(input())):\n    S = str(input())\n    N = len(S)\n    A = [0] * 27\n    for character in S:\n        A[ord(character) - 65] = A[ord(character) - 65] + 1\n    A.sort(reverse=True)\n    minSwap = N\n    for i in range(1, 27):\n        if N % i == 0:\n            temp = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp > A[f]:\n                    tempSwap = tempSwap + temp - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "t = int(input())\nfor i in range(t):\n    s = input()\n    d = {}\n    min1 = len(s) + 1\n    for i in s:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    l = [[x, y] for (x, y) in d.items()]\n    l.sort(key=lambda j: j[1], reverse=True)\n    for i in range(1, 27):\n        f = len(s) // i\n        c = 0\n        if len(s) % i != 0:\n            continue\n        j = 0\n        while j < i and j < len(l):\n            if l[j][1] >= f:\n                c += f\n            else:\n                c += l[j][1]\n            j += 1\n        c = len(s) - c\n        if c < min1:\n            min1 = c\n    print(min1)", "t = int(input())\nfor _ in range(t):\n    str = input()\n    new_str = set(str)\n    char_freq = []\n    for i in new_str:\n        char_freq.append(str.count(i))\n    char_freq.sort(reverse=True)\n    charachter = []\n    frepuency = []\n    for i in range(1, 27):\n        if len(str) % i == 0:\n            charachter.append(i)\n            frepuency.append(len(str) / i)\n    operation = []\n    for j in range(len(charachter)):\n        p_operation = 0\n        n_operation = 0\n        for i in range(charachter[j]):\n            freq = frepuency[j]\n            try:\n                t_operation = freq - char_freq[i]\n                if t_operation > 0:\n                    p_operation += t_operation\n                else:\n                    n_operation += t_operation\n            except:\n                break\n        n_operation = abs(n_operation)\n        operation.append(max(p_operation, n_operation))\n    print(int(min(operation)))", "import math\nn = int(input())\nwhile n > 0:\n    s = input()\n    l = len(s)\n    a = [0] * 100\n    c = []\n    d = []\n    maximum = 10000000000000\n    for i in range(0, l):\n        b = ord(s[i])\n        a[b] = a[b] + 1\n    for i in range(65, 91):\n        if a[i] > 0:\n            c.append(a[i])\n    j = len(c)\n    c = sorted(c)[::-1]\n    z = int(math.sqrt(l))\n    for i in range(1, z + 1):\n        if l % i == 0:\n            if l // i == i:\n                d.append(i)\n            else:\n                d.append(i)\n                d.append(l // i)\n    x = len(d)\n    for i in range(0, x):\n        if l // d[i] > 26:\n            continue\n        if l > 26 and d[i] == 1 and (j == 26):\n            continue\n        p = 0\n        q = 0\n        k = 0\n        w = 0\n        for k in range(0, j):\n            if d[i] - c[k] > 0:\n                p = p + d[i] - c[k]\n            q = q + d[i]\n            if q >= l:\n                break\n        if q < l:\n            w = l - (k + 1) * d[i]\n            p = p + w\n        if p < maximum:\n            maximum = p\n    print(maximum)\n    n = n - 1", "def main():\n    for j in range(int(input())):\n        S = str(input())\n        N = len(S)\n        A = [0] * 27\n        for c in S:\n            A[ord(c) - 65] = A[ord(c) - 65] + 1\n        A = sorted(A, reverse=True)\n        minSwap = N + 1\n        for i in range(1, 27):\n            if N % i == 0:\n                temp = N // i\n                tempSwap = 0\n                for f in range(i):\n                    if temp > A[f]:\n                        tempSwap = tempSwap + temp - A[f]\n                if tempSwap <= minSwap:\n                    minSwap = tempSwap\n        if minSwap == N + 1:\n            minSwap = 0\n        print(minSwap)\nmain()", "t = int(input())\nS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nwhile t > 0:\n    max = 1000000\n    s = input()\n    d = {}\n    ll = []\n    for str in S:\n        d[str] = 0\n    for i in range(1, 27):\n        if len(s) % i == 0:\n            ll.append(i)\n    for i in s:\n        d[i] += 1\n    l = sorted(d.items(), key=lambda ele: ele[1], reverse=True)\n    i = 0\n    ans = 0\n    while i < len(ll):\n        cnt = len(s) // ll[i]\n        for j in range(ll[i]):\n            if l[j][1] < cnt:\n                ans += cnt - l[j][1]\n        i += 1\n        if ans < max:\n            max = ans\n        ans = 0\n    print(max)\n    t -= 1", "def solve(arr, n):\n    least = n\n    for c in range(1, 27):\n        if n % c == 0:\n            tot = 0\n            f = int(n / c)\n            for i in range(len(arr)):\n                if arr[i] > f:\n                    tot += abs(arr[i] - f)\n                elif i >= c:\n                    tot += arr[i]\n            if tot < least:\n                least = tot\n    print(least)\nfor _ in range(int(input())):\n    arr = [0] * 26\n    s = input()\n    n = 0\n    for ch in s:\n        arr[ord(ch) - 65] += 1\n        n += 1\n    arr.sort(reverse=True)\n    for i in range(26):\n        if arr[i] == 0:\n            arr = arr[:i]\n            break\n    solve(arr, n)", "def solve(arr, n):\n    compare = []\n    for c in range(1, 27):\n        if n % c == 0:\n            tot = 0\n            f = int(n / c)\n            for i in range(len(arr)):\n                if arr[i] > f:\n                    tot += abs(arr[i] - f)\n                elif i >= c:\n                    tot += arr[i]\n            compare.append(tot)\n    print(min(compare))\nfor _ in range(int(input())):\n    arr = [0] * 26\n    s = input()\n    n = 0\n    for ch in s:\n        arr[ord(ch) - 65] += 1\n        n += 1\n    arr.sort(reverse=True)\n    for i in range(26):\n        if arr[i] == 0:\n            arr = arr[:i]\n            break\n    solve(arr, n)", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        count = dict()\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        values = sorted(count.values(), reverse=True)\n        N = len(s)\n        res = []\n        for i in range(1, min(N, 26) + 1):\n            if N % i == 0:\n                total = 0\n                above = 0\n                below = 0\n                for j in range(min(len(values), i)):\n                    if N // i - values[j] > 0:\n                        above += N // i - values[j]\n                    else:\n                        below += abs(N // i - values[j])\n            if below == 0:\n                total = above\n            elif above == 0:\n                total = below\n            else:\n                total = max(above, below)\n            res.append(total)\n        print(min(res))\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        count = dict()\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        values = sorted(count.values(), reverse=True)\n        N = len(s)\n        res = []\n        for i in range(1, min(N, 26) + 1):\n            if N % i == 0:\n                total = 0\n                above = 0\n                below = 0\n                for j in range(min(len(values), i)):\n                    if N // i - values[j] > 0:\n                        above += N // i - values[j]\n                    else:\n                        below += abs(N // i - values[j])\n            if below == 0:\n                total = above\n            elif above == 0:\n                total = below\n            else:\n                total = max(above, below)\n            res.append(total)\n        print(min(res))\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        count = dict()\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        values = sorted(count.values(), reverse=True)\n        N = len(s)\n        res = []\n        for i in range(1, min(N, 26) + 1):\n            if N % i == 0:\n                total = 0\n                above = 0\n                below = 0\n                for j in range(min(len(values), i)):\n                    if N // i - values[j] > 0:\n                        above += N // i - values[j]\n                    else:\n                        below += abs(N // i - values[j])\n            if below == 0:\n                total = above\n            elif above == 0:\n                total = below\n            else:\n                total = max(above, below)\n            res.append(total)\n        print(min(res))\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        count = dict()\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        values = sorted(count.values(), reverse=True)\n        N = len(s)\n        res = []\n        for i in range(1, min(N, 26) + 1):\n            if N % i == 0:\n                total = 0\n                above = 0\n                below = 0\n                for j in range(min(len(values), i)):\n                    if N // i - values[j] > 0:\n                        above += N // i - values[j]\n                    else:\n                        below += abs(N // i - values[j])\n            if below == 0:\n                total = above\n            elif above == 0:\n                total = below\n            else:\n                total = max(above, below)\n            res.append(total)\n        print(min(res))\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        count = dict()\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        values = sorted(count.values(), reverse=True)\n        N = len(s)\n        res = []\n        for i in range(1, min(N, 26) + 1):\n            if N % i == 0:\n                total = 0\n                above = 0\n                below = 0\n                for j in range(min(len(values), i)):\n                    if N // i - values[j] > 0:\n                        above += N // i - values[j]\n                    else:\n                        below += abs(N // i - values[j])\n            if below == 0:\n                total = above\n            elif above == 0:\n                total = below\n            else:\n                total = max(above, below)\n            res.append(total)\n        print(min(res))\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        count = dict()\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        values = sorted(count.values(), reverse=True)\n        N = len(s)\n        res = []\n        for i in range(1, min(N, 26) + 1):\n            if N % i == 0:\n                total = 0\n                above = 0\n                below = 0\n                for j in range(min(len(values), i)):\n                    if N // i - values[j] > 0:\n                        above += N // i - values[j]\n                    else:\n                        below += abs(N // i - values[j])\n                if below == 0:\n                    total = above\n                elif above == 0:\n                    total = below\n                else:\n                    total = max(above, below)\n                res.append(total)\n        print(min(res))\nmain()", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip()\n\ndef main():\n    T = int(input())\n    for _ in range(T):\n        s = input()\n        count = dict()\n        for char in s:\n            if char in count:\n                count[char] += 1\n            else:\n                count[char] = 1\n        values = sorted(count.values(), reverse=True)\n        N = len(s)\n        res = []\n        for i in range(1, min(N, 26) + 1):\n            if N % i == 0:\n                total = 0\n                above = 0\n                below = 0\n                for j in range(min(len(values), i)):\n                    if N // i - values[j] > 0:\n                        above += N // i - values[j]\n                    else:\n                        below += abs(N // i - values[j])\n                    if below == 0:\n                        total = above\n                    elif above == 0:\n                        total = below\n                    else:\n                        total = max(above, below)\n                res.append(total)\n        print(min(res))\nmain()", "import collections\nfrom functools import reduce\n\ndef factors(n):\n    x = set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n    return list(x)\ntestcase = int(input())\nfor k in range(testcase):\n    l = []\n    string = input()\n    list1 = [i for i in string]\n    length = len(list1)\n    freq = [0] * 26\n    list2 = {i for i in string}\n    for j in string:\n        freq[ord(j) - ord('A')] += 1\n    freq.sort(reverse=True)\n    for i in range(1, 27):\n        count = 0\n        if len(list1) % i == 0:\n            for k in range(min(i, len(list2))):\n                count += min(freq[k], length / i)\n            l.append(abs(count - length))\n    print(int(min(l)))", "from collections import defaultdict\n\ndef factors(n):\n    f = []\n    for i in range(1, min(n + 1, 27)):\n        if n % i == 0:\n            f.append(i)\n    return sorted(f)\nt = int(input())\nfor i in range(t):\n    s = input()\n    l = set(s)\n    n = len(s)\n    m = len(l)\n    d = defaultdict(int)\n    for i in s:\n        d[i] += 1\n    if max(d.values()) == min(d.values()):\n        print(0)\n    else:\n        f = factors(n)\n        sdv = sorted(d.values())\n        counts = []\n        for i in range(len(f)):\n            lneeded = f[i]\n            lcount = n // lneeded\n            above = 0\n            below = 0\n            lnum = 0\n            for j in range(len(sdv) - 1, -1, -1):\n                if sdv[j] >= lcount:\n                    above += sdv[j] - lcount\n                    lnum += 1\n                else:\n                    below += lcount - sdv[j]\n                    lnum += 1\n                if lnum == lneeded:\n                    break\n            counts.append(max(above, below))\n        print(min(counts))", "for _ in range(int(input())):\n    ip = list(input())\n    n = len(ip)\n    freq = [0] * 26\n    for i in range(n):\n        freq[ord(ip[i]) - ord('A')] += 1\n    freq.sort()\n    ans = 99999999999999999\n    for i in range(1, 27):\n        if n % i != 0:\n            continue\n        bal_no = n / i\n        (total, repetition) = (0, 0)\n        for j in range(1, i + 1):\n            total += abs(freq[26 - j] - bal_no)\n            repetition += freq[26 - j]\n        ans = min((n - repetition + total) / 2, ans)\n    print(int(ans))", "def Tee():\n    chars = [0 for i in range(26)]\n    S = input()\n    for i in range(26):\n        chars[i] = S.count(chr(65 + i))\n    prev = -1\n    sumi = len(S)\n    chars.sort(reverse=True)\n    for i in range(1, 27):\n        positive_temp = 0\n        if sumi % i == 0:\n            store = sumi // i\n            for j in range(i):\n                if store - chars[j] > 0:\n                    positive_temp += store - chars[j]\n            if prev == -1:\n                prev = positive_temp\n            elif prev > positive_temp:\n                prev = positive_temp\n    print(max(prev, 0))\nfor i in range(int(input())):\n    Tee()", "for j in range(int(input())):\n    S = str(input())\n    N = len(S)\n    A = [0] * 27\n    for c in S:\n        A[ord(c) - 65] = A[ord(c) - 65] + 1\n    A = sorted(A, reverse=True)\n    minSwap = N + 1\n    for i in range(1, 27):\n        if N % i == 0:\n            temp = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp > A[f]:\n                    tempSwap = tempSwap + temp - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "def main():\n    for j in range(int(input())):\n        S = str(input())\n        N = len(S)\n        A = [0] * 27\n        for c in S:\n            A[ord(c) - 65] = A[ord(c) - 65] + 1\n        A = sorted(A, reverse=True)\n        minSwap = N + 1\n        for i in range(1, 27):\n            if N % i == 0:\n                temp = N // i\n                tempSwap = 0\n                for f in range(i):\n                    if temp > A[f]:\n                        tempSwap = tempSwap + temp - A[f]\n                if tempSwap <= minSwap:\n                    minSwap = tempSwap\n        if minSwap == N + 1:\n            minSwap = 0\n        print(minSwap)\nmain()", "from collections import Counter\ntest = int(input())\nfor x in range(test):\n    s = input()\n    n = len(s)\n    counter = Counter(s)\n    count = []\n    for i in counter.items():\n        count.append(i[1])\n    count.sort(reverse=True)\n    ans = n\n    for i in range(1, min(n, 26) + 1):\n        if n % i == 0:\n            k = n // i\n            mid1 = 0\n            mid2 = 0\n            for j in range(min(i, len(count))):\n                if k > count[j]:\n                    mid1 += k - count[j]\n                elif k < count[j]:\n                    mid2 -= k - count[j]\n        ans = min(ans, max(mid1, mid2))\n    print(ans)", "t = int(input())\nfor x in range(t):\n    s = input()\n    l = []\n    fac = []\n    c = []\n    for x in range(26):\n        l.append(0)\n    for x in s:\n        p = ord(x) - 65\n        l[p] = l[p] + 1\n    l.sort()\n    v = 26 - l.count(0)\n    for x in range(1, len(s) + 1):\n        if len(s) % x == 0:\n            if len(s) // x < 27:\n                fac.append(len(s) // x)\n    for x in range(len(fac)):\n        cc = 0\n        if v < fac[x]:\n            for y in range(l.count(0), 26):\n                if l[y] > len(s) // fac[x]:\n                    cc = cc + l[y] - len(s) // fac[x]\n        else:\n            for y in range(25, l.count(0) + (v - fac[x]) - 1, -1):\n                if l[y] < len(s) // fac[x]:\n                    cc = cc + len(s) // fac[x] - l[y]\n        c.append(cc)\n    print(min(c))", "from string import ascii_uppercase as au\nalpha_val = dict(zip(au, list(range(1, 27))))\nnb_test = int(input())\nfor _ in range(nb_test):\n    curr = input()\n    lens = len(curr)\n    alpha = [0] * 27\n    for i in curr:\n        alpha[alpha_val[i]] += 1\n    alpha = sorted(alpha, reverse=True)\n    mins = lens + 1\n    for i in range(1, 27):\n        if lens % i == 0:\n            this = lens // i\n            will = 0\n            for f in range(i):\n                if this > alpha[f]:\n                    will += this - alpha[f]\n            if will <= mins:\n                mins = will\n    print([mins, 0][mins == lens + 1])", "t = int(input())\nwhile t > 0:\n    a = []\n    s = input()\n    s1 = list(set(s))\n    for i in range(0, 26):\n        x = s.count(chr(i + 65))\n        a.append(x)\n    a.sort()\n    m = len(a)\n    n = len(s)\n    mi = 1000001\n    for i in range(1, 27):\n        k = 0\n        r = 0\n        if n % i == 0:\n            r = n // i\n            j = m - 1\n            while j > 25 - i:\n                if r - a[j] > 0:\n                    k = k + (r - a[j])\n                j = j - 1\n            if mi > k:\n                mi = k\n    print(mi)\n    t = t - 1", "t = int(input())\nfor u in range(t):\n    s = input()\n    n = len(s)\n    nodc = len(set(s))\n    freq = [0] * 27\n    for j in range(0, n):\n        freq[ord(s[j]) - ord('A')] += 1\n    freq = sorted(freq, reverse=True)\n    mn = n + 1\n    for i in range(1, 27):\n        if n % i == 0:\n            gl = n // i\n            sm = 0\n            for j in range(i):\n                if gl > freq[j]:\n                    sm += gl - freq[j]\n            if sm <= mn:\n                mn = sm\n    if mn == n + 1:\n        mn = 0\n    print(mn)", "t = int(input())\nfor u in range(t):\n    s = input()\n    n = len(s)\n    nodc = len(set(s))\n    freq = [0] * 27\n    for j in range(0, n):\n        freq[ord(s[j]) - ord('A')] += 1\n    freq = sorted(freq, reverse=True)\n    mn = n + 1\n    for i in range(1, 27):\n        if n % i == 0:\n            gl = n // i\n            sm = 0\n            for j in range(i):\n                if gl > freq[j]:\n                    sm += gl - freq[j]\n            if sm <= mn:\n                mn = sm\n    if mn == n + 1:\n        mn = 0\n    print(mn)", "import string\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    c = {x: 0 for x in string.ascii_uppercase}\n    for char in s:\n        c[char] += 1\n    c = {k: v for (k, v) in c.items() if v > 0}\n    c = sorted(c.items(), key=lambda item: item[1])\n    l = len(c)\n    min_cnt = 10 ** 9\n    for i in range(1, 27):\n        if not n % i == 0:\n            continue\n        each_cnt = n // i\n        req = 0\n        if i < l:\n            j = 1\n            for (k, v) in reversed(c):\n                if j > i:\n                    break\n                if v > each_cnt:\n                    req += v - each_cnt\n                j += 1\n            for (k, v) in c:\n                if j > l:\n                    break\n                req += v\n                j += 1\n        else:\n            for (k, v) in c:\n                if v > each_cnt:\n                    req += v - each_cnt\n        min_cnt = min(min_cnt, req)\n    print(min_cnt)", "for _ in range(int(input())):\n    l = input()\n    l1 = len(l)\n    count = [0] * 27\n    for x in range(l1):\n        co = ord(l[x]) - 65\n        count[co] += 1\n    count.sort(reverse=True)\n    minim = 1000000000\n    for x in range(1, 27):\n        if l1 % x == 0:\n            ste = 0\n            ave = l1 // x\n            for x2 in range(x):\n                if ave > count[x2]:\n                    ste += ave - count[x2]\n            if minim > ste:\n                minim = ste\n    if minim == l1 + 1:\n        minim = 0\n    print(minim)", "def main():\n    for j in range(int(input())):\n        S = str(input())\n        N = len(S)\n        A = [0] * 27\n        for c in S:\n            A[ord(c) - 65] = A[ord(c) - 65] + 1\n        A = sorted(A, reverse=True)\n        minSwap = N + 1\n        for i in range(1, 27):\n            if N % i == 0:\n                temp = N // i\n                tempSwap = 0\n                for f in range(i):\n                    if temp > A[f]:\n                        tempSwap = tempSwap + temp - A[f]\n                if tempSwap <= minSwap:\n                    minSwap = tempSwap\n        if minSwap == N + 1:\n            minSwap = 0\n        print(minSwap)\nmain()", "t = int(input())\nfor i in range(t):\n    s = input()\n    a = [0 for x in range(26)]\n    L = []\n    list1 = []\n    for j in range(len(s)):\n        a[ord(s[j]) - ord('A')] += 1\n    for x in a:\n        if x != 0:\n            L.append(x)\n    sum = 0\n    N = len(s)\n    y = 0\n    L.sort()\n    a.sort()\n    if L[0] == L[-1]:\n        print(0)\n    else:\n        for k in range(len(a), 0, -1):\n            if N % k == 0:\n                param = N // k\n                for z in range(y):\n                    sum += a[z]\n                for p in range(len(a) - 1, y - 1, -1):\n                    if a[p] > param:\n                        sum += a[p] - param\n                if sum != 0:\n                    list1.append(sum)\n                sum = 0\n            y += 1\n        list1.sort()\n        print(list1[0])", "num = int(input())\nfor k in range(0, num):\n    s = input()\n    m = len(s)\n    l = []\n    c = 0\n    if 1 == 1:\n        for i in range(1, m + 1):\n            if m % i == 0:\n                if i > 26:\n                    break\n                l.append(i)\n        se = set(s)\n        l1 = [0] * 26\n        for i in s:\n            l1[ord(i) - 65] += 1\n        l1.sort()\n        l1 = l1[::-1]\n        l3 = []\n        for i in range(len(l)):\n            s = 0\n            sum1 = 0\n            p = m // l[i]\n            for j in range(l[i]):\n                if l1[j] > p:\n                    s = s + l1[j] - p\n                    sum1 = sum1 + l1[j] - p\n                elif l1[j] < p:\n                    y = p - l1[j]\n                    if y < s:\n                        s = s - y\n                    else:\n                        sum1 += p - (s + l1[j])\n                        s = 0\n            l3.append(sum1)\n        if len(l3) == 0:\n            print(sum(l1) - max(l1))\n        else:\n            print(min(l3))", "from collections import Counter\n\ndef factors(n):\n    p = min(n + 1, 27)\n    return [[i, n // i] for i in range(1, p) if n % i == 0]\n\ndef balance(s, x, typ, count):\n    l = len(x)\n    if l == typ:\n        y = [i - count for i in x]\n        y = [_ for _ in y if _ > 0]\n        return sum(y)\n    if l < typ:\n        d = typ - l\n        x.extend([0] * d)\n        return balance(s, x, typ, count)\n    if l > typ:\n        y = sum(x[typ:])\n        z = 0\n        m = typ - 1\n        while y:\n            n = count - x[m]\n            if n <= y:\n                y -= n\n            else:\n                n = y\n                y = 0\n            z += n\n            x[m] = x[m] + n\n            m -= 1\n        return z + balance(s, x[:typ], typ, count)\nfor t in range(int(input())):\n    s = input()\n    l = len(s)\n    c = Counter(s)\n    x = sorted(c.values())[::-1]\n    r = [balance(s, x[:], typ, count) for (typ, count) in factors(l)]\n    print(min(r))", "t = int(input())\nfor i in range(0, t):\n    mini = 99999999999999\n    s = input()\n    length = len(s)\n    dict1 = {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0}\n    for j in range(0, len(s)):\n        dict1[s[j].lower()] += 1\n    a = []\n    for j in dict1:\n        if dict1[j] > 0:\n            a.append(dict1[j])\n    a.sort(reverse=True)\n    lenarr = len(a)\n    for j in range(0, 26 - lenarr):\n        a.append(0)\n    for k in range(1, 27):\n        if length % k == 0:\n            avg = length // k\n            count = 0\n            for j in range(0, k, 1):\n                if a[j] < avg:\n                    count += avg - a[j]\n                    print\n            if count < mini:\n                mini = count\n    print(mini)", "t = int(input())\nmod = lambda a, b: int(a - b) if a > b else int(b - a)\nwhile t:\n    l = list(input().strip())\n    alpha_c = len(set(l))\n    n = 26 if len(l) > 26 else len(l)\n    dicti = {}\n    for ele in l:\n        dicti[ele] = dicti[ele] + 1 if dicti.get(ele) != None else 1\n    vals = list(dicti.values())\n    for lv in range(n - alpha_c):\n        vals.append(0)\n    vals.sort()\n    ans = 0\n    count = 0\n    if n == 1:\n        print(0)\n    else:\n        for i in range(n, 0, -1):\n            if len(l) % i:\n                continue\n            occ = len(l) // i\n            count += 1\n            su = 0\n            for lv in range(n - i):\n                su += mod(vals[lv], 0)\n            for lv in range(n - i, n):\n                su += mod(vals[lv], occ)\n            if count == 1:\n                ans = su\n            elif su < ans:\n                ans = su\n        print(ans // 2)\n    t -= 1", "t = int(input())\nmod = lambda a, b: int(a - b) if a > b else int(b - a)\nwhile t:\n    l = list(input().strip())\n    alpha_c = len(set(l))\n    n = 26 if len(l) > 26 else len(l)\n    dicti = {}\n    for ele in l:\n        dicti[ele] = dicti[ele] + 1 if dicti.get(ele) != None else 1\n    vals = list(dicti.values())\n    for lv in range(n - alpha_c):\n        vals.append(0)\n    vals.sort()\n    ans = 0\n    count = 0\n    if n == 1:\n        print(0)\n    else:\n        for i in range(n, 0, -1):\n            if len(l) % i:\n                continue\n            occ = len(l) // i\n            count += 1\n            su = 0\n            for lv in range(n - i):\n                su += mod(vals[lv], 0)\n            for lv in range(n - i, n):\n                su += mod(vals[lv], occ)\n            if count == 1:\n                ans = su\n            elif su < ans:\n                ans = su\n        print(ans // 2)\n    t -= 1", "for testc in range(int(input())):\n    s = input()\n    a = [0 for x in range(26)]\n    for char in s:\n        a[ord(char) - 65] += 1\n    i = 0\n    a.sort(reverse=True)\n    su = sum(a)\n    t = 0\n    x = 0\n    while t < 26:\n        if a[t] is not 0:\n            x += 1\n        t += 1\n    ans = su - a[0]\n    l = len(s)\n    for i in range(2, min(26, l) + 1, 1):\n        if l % i == 0:\n            avg = int(l / i)\n            tmp = 0\n            if i > x:\n                j = 0\n                while a[j] > avg:\n                    tmp += a[j] - avg\n                    j += 1\n            else:\n                k = 0\n                extra = 0\n                while a[k] > avg:\n                    extra += a[k] - avg\n                    k += 1\n                k = i\n                rest = 0\n                while k < 26:\n                    rest += a[k]\n                    k += 1\n                tmp = extra + rest\n            if tmp < ans:\n                ans = tmp\n    print(ans)", "t = int(input())\nfor i in range(t):\n    word = input()\n    Alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    a = []\n    dif = 0\n    for i in range(0, 26):\n        b = word.count(Alphabet[i])\n        if b != 0:\n            dif = dif + 1\n            a.append(b)\n    a.sort()\n    length = len(word)\n    diff = 1\n    for i in range(dif, 0, -1):\n        if length % i == 0:\n            balno = length // i\n            remove = dif - i\n            break\n    ans = 0\n    for i in range(0, dif):\n        if i < remove:\n            ans += a[i]\n        elif a[i] != 0:\n            if a[i] > balno:\n                ans += a[i] - balno\n    temp = 0\n    for i in range(dif + 1, 27):\n        if length % i == 0:\n            balno = length // i\n            for j in range(0, dif):\n                if balno < a[j]:\n                    temp += a[j] - balno\n            if temp < ans:\n                ans = temp\n    print(ans)", "from collections import Counter\nimport operator\n\ndef print_factors(x):\n    l = []\n    for i in range(1, x + 1):\n        if x % i == 0:\n            l.append(i)\n    return l\nt = int(input())\nfor i in range(t):\n    s = list(input())\n    fac = print_factors(len(s))\n    res = Counter(s)\n    values = []\n    for q in res.values():\n        values.append(q)\n    flag = 0\n    h = len(s)\n    if len(fac) == 2 and h > 26:\n        print(h - max(values))\n    else:\n        cl = []\n        y = h // 26\n        if h % 26 == 0:\n            y = y - 1\n        for e in range(1, y + 1):\n            if e in fac:\n                fac.remove(e)\n        for j in fac:\n            tot = 0\n            (maxi, mini) = (0, 0)\n            x = min(len(values), h // j)\n            values.sort()\n            values.reverse()\n            for he in range(x):\n                if values[he] > j:\n                    maxi += values[he] - j\n                else:\n                    mini += j - values[he]\n            cl.append(max(mini, maxi))\n        print(min(cl))", "def check(avg, sortedflag, c):\n    count1 = count2 = 0\n    for i in range(len(sortedflag)):\n        if sortedflag[i] != 0 and i < c:\n            if sortedflag[i] > avg:\n                count1 += sortedflag[i] - avg\n            else:\n                count2 += avg - sortedflag[i]\n    if count1 > count2:\n        return count1\n    else:\n        return count2\nt = int(input())\nfor _ in range(t):\n    flag = [0 for x in range(26)]\n    s = input()\n    l = len(s)\n    c = 0\n    result1 = result2 = 10000000\n    for i in s:\n        if flag[ord(i) - 65] == 0:\n            c += 1\n        flag[ord(i) - 65] += 1\n    sortedflag = sorted(flag, reverse=True)\n    avg = l // c\n    avg1 = avg2 = avg\n    r = l % c\n    r1 = r2 = r\n    c1 = c2 = c\n    while r1 != 0:\n        c1 -= 1\n        avg1 = l // c1\n        r1 = l % c1\n    while r2 != 0:\n        c2 += 1\n        avg2 = l // c2\n        r2 = l % c2\n    result1 = check(avg1, sortedflag, c1)\n    if c2 < 27:\n        result2 = check(avg2, sortedflag, c2)\n    if result1 < result2:\n        print(result1)\n    else:\n        print(result2)", "num = int(input())\nfor k in range(0, num):\n    s = input()\n    m = len(s)\n    l = []\n    c = 0\n    if 1 == 1:\n        for i in range(1, m + 1):\n            if m % i == 0:\n                if i > 26:\n                    break\n                l.append(i)\n        se = set(s)\n        l1 = [0] * 26\n        for i in s:\n            l1[ord(i) - 65] += 1\n        l1.sort()\n        l1 = l1[::-1]\n        l3 = []\n        for i in range(len(l)):\n            s = 0\n            sum1 = 0\n            p = m // l[i]\n            for j in range(l[i]):\n                if l1[j] > p:\n                    s = s + l1[j] - p\n                    sum1 = sum1 + l1[j] - p\n                elif l1[j] < p:\n                    y = p - l1[j]\n                    if y < s:\n                        s = s - y\n                    else:\n                        sum1 += p - (s + l1[j])\n                        s = 0\n            l3.append(sum1)\n        if len(l3) == 0:\n            print(sum(l1) - max(l1))\n        else:\n            print(min(l3))", "for j in range(int(input())):\n    S = str(input())\n    N = len(S)\n    A = [0] * 27\n    for c in S:\n        A[ord(c) - 65] = A[ord(c) - 65] + 1\n    A = sorted(A, reverse=True)\n    minSwap = N + 1\n    for i in range(1, 27):\n        if N % i == 0:\n            temp = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp > A[f]:\n                    tempSwap = tempSwap + temp - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "from collections import Counter\nimport math\nimport os\nimport random\nimport re\nimport sys\nfor a0 in range(int(input())):\n    st = input()\n    c = Counter(st)\n    n = len(st)\n    m = len(c.keys())\n    ans = 10000000000\n    l = []\n    for i in range(65, 91):\n        l.append([chr(i), c.get(chr(i), 0)])\n    l = sorted(l, key=lambda l: l[1], reverse=True)\n    for i in range(1, 27):\n        a = []\n        s = 0\n        if n % i == 0:\n            t = n // i\n            for j in l:\n                if j[1] >= t:\n                    a.append(j[1] - t)\n                    s += j[1] - t\n                elif t - j[1] >= s:\n                    a.append(t - j[1] - s)\n                    s = 0\n                else:\n                    s -= t - j[1]\n                    a.append(0)\n            ans = min(ans, sum(a[:i]))\n    print(ans)", "def fac(k):\n    fa = []\n    for i in range(1, k + 1):\n        if k % i == 0:\n            if i > 26:\n                break\n            fa.append(i)\n    fa = list(set(fa))\n    fa.sort()\n    return fa\nfor _ in range(int(input())):\n    s = input()\n    l = [0] * 26\n    for i in range(len(s)):\n        l[ord(s[i]) - 65] += 1\n    l.sort()\n    l = l[::-1]\n    k = sum(l)\n    f = fac(k)\n    ans = []\n    for i in range(len(f)):\n        l1 = l\n        p = k // f[i]\n        c = 0\n        s = 0\n        for j in range(f[i]):\n            if l1[j] > p:\n                s = s + l1[j] - p\n                c = c + l1[j] - p\n            elif l1[j] < p:\n                y = p - l1[j]\n                if y < s:\n                    s = s - y\n                else:\n                    c += p - (s + l1[j])\n                    s = 0\n        ans.append(c)\n    if len(ans) == 0:\n        print(k - max(l))\n    else:\n        print(min(ans))", "for _ in range(int(input())):\n    s = input()\n    a = [0] * (26 - len(set(s)))\n    b = []\n    c = []\n    d = []\n    for i in s:\n        if i not in b:\n            b.append(i)\n            a.append(s.count(i))\n    a.sort(reverse=True)\n    if len(list(set(s))) == len(s):\n        print('0')\n    else:\n        n = len(s)\n        for i in range(1, 27):\n            if n % i == 0:\n                c.append(i)\n        for i in c:\n            v = 0\n            for j in range(0, i):\n                if int(n / i) - a[j] > 0:\n                    v = v + (int(n / i) - a[j])\n            d.append(v)\n        print(min(d))", "for _ in range(int(input())):\n    s = input()\n    a = [0] * (26 - len(set(s)))\n    b = []\n    c = []\n    d = []\n    for i in s:\n        if i not in b:\n            b.append(i)\n            a.append(s.count(i))\n    a.sort(reverse=True)\n    if len(list(set(s))) == len(s):\n        print('0')\n    else:\n        n = len(s)\n        for i in range(1, 27):\n            if n % i == 0:\n                c.append(i)\n        for i in c:\n            v = 0\n            for j in range(0, i):\n                if int(n / i) - a[j] > 0:\n                    v = v + (int(n / i) - a[j])\n            d.append(v)\n        print(min(d))", "for i in range(int(input())):\n    s = list(input())\n    array = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n    for index in s:\n        k_index = ord(index) - 65\n        array[k_index] = array[k_index] + 1\n    array.sort()\n    counter = 0\n    minimum = 2147483647\n    flagBool = False\n    for j in range(1, len(s) + 1):\n        if minimum == 0:\n            break\n        elif len(s) % j == 0:\n            for k_index in range(j, 0, -1):\n                if k_index <= len(array) and array[len(array) - k_index] <= len(s) / j:\n                    counter = counter + len(s) / j - array[len(array) - k_index]\n                    flagBool = True\n                else:\n                    break\n            if counter < minimum and flagBool == True:\n                minimum = counter\n                counter = 0\n                flagBool = False\n        else:\n            continue\n    print(int(minimum))", "from sys import stdin\nimport math\nfrom functools import reduce\n\ndef defactors(n):\n    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))\n\ndef factors(n, min):\n    alpha = set()\n    bin = defactors(n)\n    for i in bin:\n        if i >= min:\n            alpha.add(i)\n    return alpha\n\ndef dervel(array, fact, length):\n    sum = 0\n    for i in range(int(length / fact)):\n        if array[i] < fact:\n            sum = sum + array[i] - fact\n    return -sum\ntest = int(input())\nfor trouble in range(test):\n    s = input()\n    length = len(s)\n    x = [0 for i in range(26)]\n    for c in s:\n        x[ord(c) - 65] += 1\n    x.sort()\n    x.reverse()\n    min = math.ceil(length / 26)\n    factor = list(factors(length, min))\n    factarr = [0 for i in range(len(factor))]\n    for i in range(0, len(factor)):\n        factarr[i] = dervel(x, factor[i], length)\n    factarr.sort()\n    print(factarr[0])", "MAX = 1000001\n\ndef fun(l, n):\n    mn = 100000000000.0\n    for f in range(1, 27):\n        if f == 1:\n            mn = min(mn, n - max(l))\n        elif n % f == 0:\n            k = n // f\n            s = l[:f]\n            c1 = 0\n            c2 = 0\n            for i in s:\n                if i > k:\n                    c1 += i - k\n            for i in l[f:]:\n                c2 += i\n            mn = min(mn, c1 + c2)\n    return mn\nt = int(input())\nfor i in range(t):\n    s = input()\n    l = []\n    n = len(s)\n    for i in set(s):\n        l.append(s.count(i))\n    l.sort(reverse=True)\n    ans = fun(l, n)\n    print(ans)", "for _ in range(int(input())):\n    n = list(input())\n    d = {}\n    lenth = len(n)\n    for i in n:\n        if d.get(i) == None:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n    l = []\n    for k in d:\n        l.append(d[k])\n    l.sort(reverse=True)\n    while len(l) < 26:\n        l.append(0)\n    result = 1000006\n    for k in range(1, 27):\n        sm = 1\n        if lenth % k == 0:\n            tem = lenth // k\n            for j in range(0, k):\n                sm = sm + abs(l[j] - tem)\n            for b in range(k, 26):\n                sm = sm + l[b]\n            sm = sm // 2\n            result = min(result, sm)\n    print(result)", "for _ in range(int(input())):\n    s = input()\n    a = [0] * 27\n    for i in s:\n        a[ord(i) - ord('A')] += 1\n    a.sort(reverse=True)\n    b = []\n    for i in range(1, len(s) // 2 + 1):\n        if len(s) % i == 0:\n            (j, c, l) = (0, 0, 0)\n            while l < len(s) and j < 27:\n                if i - a[j] > 0:\n                    c += i - a[j]\n                l += i\n                j += 1\n            if j < 27:\n                b.append(c)\n    b.append(len(s) - max(a))\n    print(min(b))", "try:\n    for i in range(int(input())):\n        string = str(input())\n        n = len(string)\n        ans = [0] * 27\n        for char in string:\n            ans[ord(char) - 65] += 1\n        ans = sorted(ans, reverse=True)\n        minSwap = n + 1\n        for j in range(1, 27):\n            if n % j == 0:\n                temp = n // j\n                tempSwap = 0\n                for f in range(j):\n                    if temp > ans[f]:\n                        tempSwap = tempSwap + temp - ans[f]\n                if tempSwap <= minSwap:\n                    minSwap = tempSwap\n        if minSwap == n + 1:\n            minSwap = 0\n        print(minSwap)\nexcept:\n    print('asda')", "t = ''\ntry:\n    t = int(input())\nexcept:\n    pass\nwhile t:\n    t = t - 1\n    S = input()\n    N = len(S)\n    A = [0] * 27\n    for c in S:\n        A[ord(c) - 65] = A[ord(c) - 65] + 1\n    A = sorted(A, reverse=True)\n    minSwap = N + 1\n    for i in range(1, 27):\n        if N % i == 0:\n            temp1 = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp1 > A[f]:\n                    tempSwap = tempSwap + temp1 - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "for _ in range(int(input())):\n    subodh = str(input())\n    arr = [0 for x in range(26)]\n    for i in subodh:\n        alpha = ord(i) - 65\n        arr[alpha] += 1\n    arr.sort()\n    Minimum = 10000000\n    for i in range(1, 27):\n        Temp = 0\n        if len(subodh) % i == 0:\n            repeat = len(subodh) // i\n            for j in range(26 - i, 26, 1):\n                if arr[j] < repeat:\n                    Temp1 = repeat - arr[j]\n                    Temp = Temp + Temp1\n            if Temp < Minimum:\n                Minimum = Temp\n    print(Minimum)", "for j in range(int(input())):\n    S = str(input())\n    N = len(S)\n    A = [0] * 27\n    for c in S:\n        A[ord(c) - 65] = A[ord(c) - 65] + 1\n    A = sorted(A, reverse=True)\n    minSwap = N + 1\n    for i in range(1, 27):\n        if N % i == 0:\n            temp = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp > A[f]:\n                    tempSwap = tempSwap + temp - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "t = int(input())\nwhile t > 0:\n    numberOfEachLetter = []\n    stringGCD = []\n    hashMap = {}\n    z = []\n    string1 = input()\n    lengthOfString = len(string1)\n    for i in string1:\n        if i in hashMap:\n            hashMap[i] += 1\n        else:\n            hashMap[i] = 1\n    diffL = len(hashMap)\n    if diffL == 0:\n        print(0)\n        continue\n    for i in hashMap:\n        numberOfEachLetter.append(hashMap[i])\n    numberOfEachLetter.sort(reverse=True)\n    for i in range(1, 27):\n        if lengthOfString % i == 0 and i <= lengthOfString:\n            stringGCD.append(i)\n    for j in stringGCD:\n        diffL = len(numberOfEachLetter)\n        fDf = 0\n        rmL = 0\n        newLetters = 0\n        stringIndex = len(numberOfEachLetter) - 1\n        equalFrequency = lengthOfString // j\n        while diffL > j:\n            rmL += numberOfEachLetter[stringIndex]\n            stringIndex -= 1\n            diffL -= 1\n        while j > diffL:\n            newLetters += equalFrequency\n            j -= 1\n        while stringIndex >= 0:\n            fDf += abs(numberOfEachLetter[stringIndex] - equalFrequency)\n            stringIndex -= 1\n        singleAns = (fDf + rmL + newLetters) // 2\n        z.append(singleAns)\n    print(min(z))\n    t -= 1", "for j in range(int(input())):\n    S = str(input())\n    N = len(S)\n    A = [0] * 27\n    for c in S:\n        A[ord(c) - 65] = A[ord(c) - 65] + 1\n    A = sorted(A, reverse=True)\n    minSwap = N + 1\n    for i in range(1, 27):\n        if N % i == 0:\n            temp = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp > A[f]:\n                    tempSwap = tempSwap + temp - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "T = int(input())\nwhile T > 0:\n    T = T - 1\n    string1 = input()\n    lengthOfString = len(string1)\n    mapOfLetters = {}\n    answerList = []\n    numberOfEachLetter = []\n    stringGCD = []\n    for i in string1:\n        if i in mapOfLetters:\n            mapOfLetters[i] += 1\n        else:\n            mapOfLetters[i] = 1\n    differentLetters = len(mapOfLetters)\n    if differentLetters == 0:\n        print(0)\n        continue\n    for i in mapOfLetters:\n        numberOfEachLetter.append(mapOfLetters[i])\n    numberOfEachLetter.sort(reverse=True)\n    for i in range(1, 27):\n        if lengthOfString % i == 0 and i <= lengthOfString:\n            stringGCD.append(i)\n    for j in stringGCD:\n        differentLetters = len(numberOfEachLetter)\n        frequencyDifference = 0\n        removedLetters = 0\n        newLetters = 0\n        stringIndex = len(numberOfEachLetter) - 1\n        equalFrequency = lengthOfString // j\n        while differentLetters > j:\n            removedLetters += numberOfEachLetter[stringIndex]\n            stringIndex -= 1\n            differentLetters -= 1\n        while j > differentLetters:\n            newLetters += equalFrequency\n            j -= 1\n        while stringIndex >= 0:\n            frequencyDifference += abs(numberOfEachLetter[stringIndex] - equalFrequency)\n            stringIndex -= 1\n        singleAns = (frequencyDifference + removedLetters + newLetters) // 2\n        answerList.append(singleAns)\n    print(min(answerList))", "T = int(input())\nwhile T > 0:\n    T = T - 1\n    string1 = input()\n    lengthOfString = len(string1)\n    mapOfLetters = {}\n    potentialAnswer = []\n    for i in string1:\n        if i in mapOfLetters:\n            mapOfLetters[i] += 1\n        else:\n            mapOfLetters[i] = 1\n    differentLetters = len(mapOfLetters)\n    if differentLetters == 0:\n        print(0)\n        continue\n    numberOfEachLetter = []\n    for i in mapOfLetters:\n        numberOfEachLetter.append(mapOfLetters[i])\n    numberOfEachLetter.sort(reverse=True)\n    divisorsOfStringLength = []\n    for i in range(1, 27):\n        if lengthOfString % i == 0 and i <= lengthOfString:\n            divisorsOfStringLength.append(i)\n    for j in divisorsOfStringLength:\n        differentLetters = len(numberOfEachLetter)\n        k1 = 0\n        k2 = 0\n        pseudoLength = len(numberOfEachLetter) - 1\n        distribution = lengthOfString // j\n        while differentLetters > j:\n            k2 += numberOfEachLetter[pseudoLength]\n            pseudoLength -= 1\n            differentLetters -= 1\n        j2 = j\n        corrector = 0\n        while j2 > differentLetters:\n            corrector += distribution\n            j2 -= 1\n        while pseudoLength >= 0:\n            k1 += abs(numberOfEachLetter[pseudoLength] - distribution)\n            pseudoLength -= 1\n        p = (k1 + k2 + corrector) // 2\n        potentialAnswer.append(p)\n    print(min(potentialAnswer))", "T = int(input())\nwhile T > 0:\n    T = T - 1\n    s = input()\n    total = len(s)\n    x = {}\n    z = []\n    maxL = 0\n    for i in s:\n        if i in x:\n            x[i] += 1\n        else:\n            x[i] = 1\n    variations = len(x)\n    if variations == 0:\n        print(0)\n        continue\n    y = []\n    for i in x:\n        y.append(x[i])\n    y.sort(reverse=True)\n    z2 = []\n    for i in range(1, 27):\n        if total % i == 0 and i <= total:\n            z2.append(i)\n    for j in z2:\n        variations = len(y)\n        i = 1\n        k1 = 0\n        k2 = 0\n        pseudoLength = len(y) - 1\n        distribution = total // j\n        while variations > j:\n            k2 += y[pseudoLength]\n            pseudoLength -= 1\n            variations -= 1\n        j2 = j\n        corrector = 0\n        while j2 > variations:\n            corrector += distribution\n            j2 -= 1\n        while pseudoLength >= 0:\n            k1 += abs(y[pseudoLength] - distribution)\n            pseudoLength -= 1\n        p = (k1 + k2 + corrector) // 2\n        z.append(p)\n    print(min(z))", "r = []\nfor i in range(int(input())):\n    s = input()\n    d = {}\n    l = []\n    for i in s:\n        if i in d:\n            d[i] += 1\n            continue\n        d[i] = 1\n    for i in d:\n        l.append(d[i])\n    l.sort()\n    n = len(s)\n    p = []\n    for i in range(1, 1 + 26):\n        a = 0\n        if n % i == 0:\n            if i > len(l):\n                while i != len(l):\n                    l = [0] + l\n            k = n // i\n            bal_l = [k for _ in range(i)]\n            while len(bal_l) != len(l):\n                bal_l = [0] + bal_l\n            for z in range(len(l)):\n                a += abs(l[z] - bal_l[z])\n            p += [a // 2]\n    r += [min(p)]\nfor i in r:\n    print(i)", "t = int(input())\nfor T in range(t):\n    st = input()\n    l = [0] * 26\n    for i in st:\n        l[ord(i) - 65] += 1\n    l[:] = (value for value in l if value != 0)\n    l.sort()\n    l2 = []\n    for i in range(26, 0, -1):\n        sum_ = 0\n        if len(st) % i == 0:\n            if i > len(l):\n                max_ = len(st) / i\n                for j in range(len(l) - 1, -1, -1):\n                    if l[j] - max_ > 0:\n                        sum_ += l[j] - max_\n                    else:\n                        break\n                l2.append(int(sum_))\n            elif i == len(l):\n                max_ = len(st) / i\n                for j in range(len(l)):\n                    if l[j] - max_ > 0:\n                        sum_ += l[j] - max_\n                l2.append(int(sum_))\n            else:\n                cum = 0\n                max_ = len(st) / i\n                for j in range(len(l) - i):\n                    cum += l[j]\n                for j in range(len(l) - 1, -1, -1):\n                    if l[j] > max_:\n                        cum += l[j] - max_\n                    else:\n                        break\n                l2.append(int(cum))\n    print(min(l2))", "for j in range(int(input())):\n    S = str(input())\n    N = len(S)\n    A = [0] * 27\n    for c in S:\n        A[ord(c) - 65] = A[ord(c) - 65] + 1\n    A = sorted(A, reverse=True)\n    minSwap = N + 1\n    for i in range(1, 27):\n        if N % i == 0:\n            temp = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp > A[f]:\n                    tempSwap = tempSwap + temp - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "t = int(input())\nwhile t > 0:\n    s = input()\n    n = len(s)\n    y = 2000009\n    p = []\n    i = 0\n    while i < 26:\n        p.append(s.count(chr(i + 65)))\n        i = i + 1\n    p.sort()\n    i = 1\n    while i < 27:\n        if n / i == 0:\n            break\n        x1 = 0\n        if n % i == 0:\n            r = n // i\n            for j in range(25, 25 - i, -1):\n                if r - p[j] > 0:\n                    z = r - p[j]\n                    x1 = x1 + z\n            if y > x1:\n                y = x1\n        i = i + 1\n    print(y)\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    l1 = []\n    s = input()\n    s1 = list(set(s))\n    for i in range(0, 26):\n        x = s.count(chr(i + 65))\n        l1.append(x)\n    l1.sort()\n    m = len(l1)\n    n = len(s)\n    mi = 1000001\n    for i in range(1, 27):\n        k = 0\n        r = 0\n        if n % i == 0:\n            r = n // i\n            j = m - 1\n            while j > 25 - i:\n                if r - l1[j] > 0:\n                    k = k + (r - l1[j])\n                j = j - 1\n            if mi > k:\n                mi = k\n    print(mi)\n    t = t - 1", "for j in range(int(input())):\n    S = str(input())\n    N = len(S)\n    A = [0] * 27\n    for c in S:\n        A[ord(c) - 65] = A[ord(c) - 65] + 1\n    A = sorted(A, reverse=True)\n    minSwap = N + 1\n    for i in range(1, 27):\n        if N % i == 0:\n            temp = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp > A[f]:\n                    tempSwap = tempSwap + temp - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "for j in range(int(input())):\n    S = str(input())\n    N = len(S)\n    A = [0] * 27\n    for c in S:\n        A[ord(c) - 65] = A[ord(c) - 65] + 1\n    A = sorted(A, reverse=True)\n    minSwap = N + 1\n    for i in range(1, 27):\n        if N % i == 0:\n            temp = N // i\n            tempSwap = 0\n            for f in range(i):\n                if temp > A[f]:\n                    tempSwap = tempSwap + temp - A[f]\n            if tempSwap <= minSwap:\n                minSwap = tempSwap\n    if minSwap == N + 1:\n        minSwap = 0\n    print(minSwap)", "t = int(input())\nfor j in range(t):\n    n = input()\n    l = len(n)\n    a = [0] * 26\n    b = list(set(n))\n    for i in b:\n        a[ord(i) - 65] = n.count(i)\n    a.sort(reverse=True)\n    inc = 0\n    m = 10000000\n    for i in range(26, 0, -1):\n        inc = 0\n        if l % i == 0:\n            p = l // i\n            for k in range(0, i):\n                if a[k] < p:\n                    inc = inc + p - a[k]\n            m = min(m, inc)\n    print(m)", "t = int(input())\nfor ia in range(t):\n    s = input()\n    l = [0] * 26\n    for i in s:\n        l[ord(i) - ord('A')] += 1\n    l.sort(reverse=True)\n    n = len(s)\n    ma = 999999999999\n    for i in range(1, 27):\n        p = []\n        if n % i == 0:\n            ans = 0\n            for j in range(i):\n                p.append(n // i)\n            for k in range(26 - i):\n                p.append(0)\n            for z in range(len(p)):\n                ans += abs(p[z] - l[z])\n            if ans < ma:\n                ma = ans\n    print(ma // 2)", "from collections import defaultdict as dd\nfor i in range(int(input())):\n    S = list(str(input()))\n    v = dd(int)\n    for i in range(len(S)):\n        v[S[i]] += 1\n    l = list(v.values())\n    l.sort(reverse=True)\n    z = sum(l)\n    req1 = len(S) - len(set(S))\n    req2 = len(S) - max(l)\n    if len(S) <= 26:\n        m1 = min(req1, req2)\n    else:\n        m1 = req2\n    for i in range(2, int(z / 2) + 1):\n        k = 0\n        c = 0\n        if z % i == 0 and int(z / i) <= 26:\n            n = int(z / i)\n            k = 1\n            if n > len(l):\n                c += (n - len(l)) * i\n                for j in range(len(l)):\n                    if i - l[j] > 0:\n                        c += i - l[j]\n            else:\n                for j in range(n):\n                    if i - l[j] > 0:\n                        c += i - l[j]\n        if c < m1 and k == 1:\n            m1 = c\n    print(m1)", "import numpy as np\nfrom math import floor\n\ndef getFactors(n):\n    factors = []\n    for i in range(1, n + 1):\n        if n % i == 0 and n / i < 27:\n            factors.append(i)\n    return factors\nt = input()\nt = int(t)\nwhile t > 0:\n    t -= 1\n    s = input()\n    n = len(s)\n    fact = getFactors(n)\n    str = list(s)\n    tot = 0\n    (u, c) = np.unique(str, return_counts=True)\n    c[::-1].sort()\n    c_sum = c.sum()\n    c_size = len(c)\n    min = 100000000\n    for i in fact:\n        tot = 0\n        k = floor(c_sum / i)\n        if k < c_size:\n            for j in range(k):\n                if c[j] - i > 0:\n                    tot += c[j] - i\n            for j in range(k, c_size):\n                tot += c[j]\n        else:\n            for j in c:\n                if j - i > 0:\n                    tot += j - i\n        if tot < min:\n            min = tot\n    print(min)"]