["t = int(input())\nfor _ in range(int(t)):\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 2)\n    k1 = [0] * (sz + 2)\n    k2 = [0] * (sz + 2)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    res = [0] * (sz + 2)\n    res[0] = arr[0]\n    for i in range(1, sz + 2):\n        res[i] = arr[i] + res[i - 1]\n        k1[i] = k1[i - 1]\n        k2[i] = k2[i - 1]\n        if res[i] == k:\n            k1[i] += 1\n        if res[i] == k + 1:\n            k2[i] += 1\n    ans = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k1val = k2[r] - k2[l - 1]\n        ans = max(ans, k1[-1] - kval + k1val, ans)\n    print(ans)", "t = int(input())\nfor _ in range(int(t)):\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 2)\n    k1 = [0] * (sz + 2)\n    k2 = [0] * (sz + 2)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    res = [0] * (sz + 2)\n    res[0] = arr[0]\n    for i in range(1, sz + 2):\n        res[i] = arr[i] + res[i - 1]\n        k1[i] = k1[i - 1]\n        k2[i] = k2[i - 1]\n        if res[i] == k:\n            k1[i] += 1\n        if res[i] == k + 1:\n            k2[i] += 1\n    ans = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k1val = k2[r] - k2[l - 1]\n        ans = max(ans, k1[-1] - kval + k1val, ans)\n    print(ans)", "c = 100000\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    dif = [0] * (c + 1)\n    ans = [0] * c\n    rmax = 0\n    queries = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        queries.append([l, r])\n        rmax = max(rmax, r)\n        dif[l - 1] += 1\n        dif[r] -= 1\n    ans[0] = dif[0]\n    s = [0] * (rmax + 1)\n    m = [0] * (rmax + 1)\n    for i in range(rmax):\n        ans[i] = ans[i - 1] + dif[i]\n        s[i + 1] = s[i]\n        m[i + 1] = m[i]\n        if ans[i] == k + 1:\n            s[i + 1] += 1\n        if ans[i] == k:\n            m[i + 1] += 1\n    result = 0\n    total = m[-1]\n    for (l, r) in queries:\n        nk1 = s[r] - s[l - 1]\n        nk = m[r] - m[l - 1]\n        result = max(result, total + nk1 - nk)\n    print(result)", "c = 100000\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    dif = [0] * (c + 1)\n    ans = [0] * c\n    rmax = 0\n    queries = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        queries.append([l, r])\n        rmax = max(rmax, r)\n        dif[l - 1] += 1\n        dif[r] -= 1\n    ans[0] = dif[0]\n    s = [0] * (rmax + 1)\n    m = [0] * (rmax + 1)\n    for i in range(rmax):\n        ans[i] = ans[i - 1] + dif[i]\n        s[i + 1] = s[i]\n        m[i + 1] = m[i]\n        if ans[i] == k + 1:\n            s[i + 1] += 1\n        if ans[i] == k:\n            m[i + 1] += 1\n    result = 0\n    total = m[-1]\n    for (l, r) in queries:\n        nk1 = s[r] - s[l - 1]\n        nk = m[r] - m[l - 1]\n        result = max(result, total + nk1 - nk)\n    print(result)", "c = 100000\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    dif = [0] * (c + 1)\n    ans = [0] * c\n    rmax = 0\n    queries = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        queries.append([l, r])\n        rmax = max(rmax, r)\n        dif[l - 1] += 1\n        dif[r] -= 1\n    ans[0] = dif[0]\n    s = [0] * (rmax + 1)\n    m = [0] * (rmax + 1)\n    for i in range(rmax):\n        ans[i] = ans[i - 1] + dif[i]\n        s[i + 1] = s[i]\n        m[i + 1] = m[i]\n        if ans[i] == k + 1:\n            s[i + 1] += 1\n        if ans[i] == k:\n            m[i + 1] += 1\n    result = 0\n    total = m[-1]\n    for (l, r) in queries:\n        nk1 = s[r] - s[l - 1]\n        nk = m[r] - m[l - 1]\n        result = max(result, total + nk1 - nk)\n    print(result)", "def sol():\n    (n, k) = map(int, input().split())\n    a = []\n    mx = 0\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        mx = max(mx, r)\n        a.append([l, r])\n    ans = [0] * (mx + 2)\n    prek = [0] * (mx + 2)\n    prek1 = [0] * (mx + 2)\n    for (l, r) in a:\n        ans[l] += 1\n        ans[r + 1] -= 1\n    for i in range(1, mx + 1):\n        ans[i] += ans[i - 1]\n    for i in range(1, mx + 1):\n        prek[i] = 1 if ans[i] == k else 0\n        prek1[i] = 1 if ans[i] == k + 1 else 0\n    for i in range(1, mx + 1):\n        prek[i] += prek[i - 1]\n        prek1[i] += prek1[i - 1]\n    res = 0\n    for (l, r) in a:\n        res = max(res, prek[l - 1] + prek[mx] - prek[r] + prek1[r] - prek1[l - 1])\n    print(res)\n\ndef main():\n    for _ in range(int(input())):\n        sol()\nmain()", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 2)\n    k1 = [0] * (sz + 2)\n    k2 = [0] * (sz + 2)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 2):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k2[i] = k2[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k2[i] += 1\n    ans = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k1val = k2[r] - k2[l - 1]\n        ans = max(ans, k1[-1] - kval + k1val, ans)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 2)\n    k1 = [0] * (sz + 2)\n    k2 = [0] * (sz + 2)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 2):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k2[i] = k2[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k2[i] += 1\n    ans = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k1val = k2[r] - k2[l - 1]\n        ans = max(ans, k1[-1] - kval + k1val, ans)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 5)\n    k1 = [0] * (sz + 5)\n    k2 = [0] * (sz + 5)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 5):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k2[i] = k2[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k2[i] += 1\n    ans = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k1val = k2[r] - k2[l - 1]\n        ans = max(ans, k1[-1] - kval + k1val, ans)\n    print(ans)", "T = int(input())\nfor i in range(T):\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 5)\n    k1 = [0] * (sz + 5)\n    k_1 = [0] * (sz + 5)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 5):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k_1[i] = k_1[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k_1[i] += 1\n    maxm = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k_1val = k_1[r] - k_1[l - 1]\n        maxm = max(k1[-1] + k_1val - kval, maxm)\n    print(maxm)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 5)\n    k1 = [0] * (sz + 5)\n    k_1 = [0] * (sz + 5)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 5):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k_1[i] = k_1[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k_1[i] += 1\n    maxm = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k_1val = k_1[r] - k_1[l - 1]\n        maxm = max(k1[-1] + k_1val - kval, maxm)\n    print(maxm)\n    t -= 1", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    queries = []\n    mx = 0\n    ans = 0\n    for i in range(N):\n        (l, r) = map(int, input().split())\n        queries.append((l, r))\n        mx = max(mx, r)\n    final = [0] * (mx + 2)\n    total_K = [0] * (mx + 2)\n    total_K1 = [0] * (mx + 2)\n    for (l, r) in queries:\n        final[l] += 1\n        final[r + 1] -= 1\n    for i in range(1, len(final)):\n        final[i] += final[i - 1]\n        if final[i] == K:\n            total_K[i] += 1\n        if final[i] == K + 1:\n            total_K1[i] += 1\n    for i in range(1, len(total_K)):\n        total_K[i] += total_K[i - 1]\n        total_K1[i] += total_K1[i - 1]\n    for (l, r) in queries:\n        temp = total_K[-1] - (total_K[r] - total_K[l - 1]) + (total_K1[r] - total_K1[l - 1])\n        ans = max(ans, temp)\n    print(ans)", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 5)\n    k1 = [0] * (sz + 5)\n    k_1 = [0] * (sz + 5)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 5):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k_1[i] = k_1[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k_1[i] += 1\n    maxm = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k_1val = k_1[r] - k_1[l - 1]\n        maxm = max(k1[-1] + k_1val - kval, maxm)\n    print(maxm)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 5)\n    k1 = [0] * (sz + 5)\n    k_1 = [0] * (sz + 5)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 5):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k_1[i] = k_1[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k_1[i] += 1\n    maxm = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k_1val = k_1[r] - k_1[l - 1]\n        maxm = max(k1[-1] + k_1val - kval, maxm)\n    print(maxm)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 5)\n    k1 = [0] * (sz + 5)\n    k_1 = [0] * (sz + 5)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 5):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k_1[i] = k_1[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k_1[i] += 1\n    maxm = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k_1val = k_1[r] - k_1[l - 1]\n        maxm = max(k1[-1] + k_1val - kval, maxm)\n    print(maxm)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 5)\n    k1 = [0] * (sz + 5)\n    k_1 = [0] * (sz + 5)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 5):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k_1[i] = k_1[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k_1[i] += 1\n    maxm = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k_1val = k_1[r] - k_1[l - 1]\n        maxm = max(k1[-1] + k_1val - kval, maxm)\n    print(maxm)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (n, k) = map(int, input().split())\n    q = []\n    sz = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        q.append((l, r))\n        sz = max(sz, r)\n    arr = [0] * (sz + 5)\n    k1 = [0] * (sz + 5)\n    k_1 = [0] * (sz + 5)\n    for (l, r) in q:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(1, sz + 5):\n        arr[i] += arr[i - 1]\n        k1[i] = k1[i - 1]\n        k_1[i] = k_1[i - 1]\n        if arr[i] == k:\n            k1[i] += 1\n        if arr[i] == k + 1:\n            k_1[i] += 1\n    maxm = -1\n    for (l, r) in q:\n        kval = k1[r] - k1[l - 1]\n        k_1val = k_1[r] - k_1[l - 1]\n        maxm = max(k1[-1] + k_1val - kval, maxm)\n    print(maxm)\n    t -= 1", "for _ in range(int(input())):\n    query = []\n    (n, k) = [int(i) for i in input().split()]\n    mx = 0\n    for _ in range(n):\n        (l, r) = [int(i) for i in input().split()]\n        query.append((l, r))\n        mx = max(mx, r)\n    arr = [0] * (mx + 2)\n    arrk = [0] * (mx + 2)\n    arrk1 = [0] * (mx + 2)\n    for (l, r) in query:\n        arr[l] += 1\n        arr[r + 1] -= 1\n    for i in range(mx + 1):\n        arr[i + 1] += arr[i]\n        if arr[i + 1] == k:\n            arrk[i + 1] += 1\n        if arr[i + 1] == k + 1:\n            arrk1[i + 1] += 1\n    for i in range(mx + 1):\n        arrk[i + 1] += arrk[i]\n        arrk1[i + 1] += arrk1[i]\n    total = 0\n    for (l, r) in query:\n        sub_total = arrk[-1] - (arrk[r] - arrk[l - 1]) + (arrk1[r] - arrk1[l - 1])\n        total = max(total, sub_total)\n    print(total)", "t = int(input().strip())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = []\n    sb = []\n    mx = 0\n    for i in range(n):\n        (x, y) = map(int, input().split())\n        l.append((x, y))\n        mx = max(mx, y)\n    a = []\n    a = [0 for i in range(mx + 1)]\n    for t in l:\n        a[t[0] - 1] += 1\n        a[t[1]] -= 1\n    for i in range(1, mx):\n        a[i] += a[i - 1]\n    kPlusOneArray = [0] * mx\n    kArray = [0] * mx\n    for i in range(mx):\n        if a[i] == k:\n            kArray[i] = 1\n        if a[i] == k + 1:\n            kPlusOneArray[i] = 1\n    for i in range(1, mx):\n        kArray[i] = kArray[i] + kArray[i - 1]\n        kPlusOneArray[i] = kPlusOneArray[i] + kPlusOneArray[i - 1]\n    ans = 0\n    for tuple in l:\n        if tuple[0] > 1:\n            kPlusOneAns = kPlusOneArray[tuple[1] - 1] - kPlusOneArray[tuple[0] - 2]\n            kAns = kArray[tuple[1] - 1] - kArray[tuple[0] - 2]\n        else:\n            kPlusOneAns = kPlusOneArray[tuple[1] - 1]\n            kAns = kArray[tuple[1] - 1]\n        if ans < kArray[mx - 1] + kPlusOneAns - kAns:\n            ans = kArray[mx - 1] + kPlusOneAns - kAns\n    print(ans)", "for t in range(int(input())):\n    (n, k) = map(int, input().split(' '))\n    left = []\n    right = []\n    mx = 0\n    for i in range(n):\n        (l, r) = map(int, input().split(' '))\n        left.append(l)\n        right.append(r)\n        mx = max(mx, r)\n    total = [0] * (mx + 2)\n    s = [0] * (mx + 2)\n    po = [0] * (mx + 2)\n    q = [0] * (mx + 2)\n    for i in range(n):\n        total[left[i]] += 1\n        total[right[i] + 1] += -1\n    for i in range(1, mx + 2):\n        total[i] = total[i] + total[i - 1]\n        q[i] = (total[i] == k + 1) + q[i - 1]\n        s[i] = (total[i] == k) + s[i - 1]\n    ac = 0\n    for i in reversed(range(1, mx + 1)):\n        po[i] = po[i + 1] + (total[i] == k)\n    for i in range(n):\n        x = left[i]\n        y = right[i]\n        cnt = q[y] - q[x] + (total[x] == k + 1)\n        cnt += s[x - 1] + po[y + 1]\n        ac = max(ac, cnt)\n    print(ac)", "t = int(input().strip())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = []\n    m = 0\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        a.append([l, r])\n        m = max(m, r)\n    a1 = [0] * (m + 2)\n    a2 = [0] * (m + 2)\n    a3 = [0] * (m + 2)\n    for j in range(n):\n        a1[a[j][0]] += 1\n        a1[a[j][1] + 1] -= 1\n    for j in range(1, m + 2, 1):\n        a1[j] = a1[j - 1] + a1[j]\n    for j in range(m + 2):\n        if a1[j] == k:\n            a2[j] = 1\n        if a1[j] == k + 1:\n            a3[j] = 1\n    for j in range(1, m + 2, 1):\n        a2[j] = a2[j - 1] + a2[j]\n        a3[j] = a3[j - 1] + a3[j]\n    maxi = 0\n    for i in range(n):\n        tt = 0\n        t1 = a2[a[i][1]] - a2[a[i][0] - 1]\n        tt += a2[m] - t1\n        t1 = a3[a[i][1]] - a3[a[i][0] - 1]\n        tt += t1\n        maxi = max(maxi, tt)\n    print(maxi)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = []\n    m = 0\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        a.append([l, r])\n        m = max(m, r)\n    a1 = [0] * (m + 2)\n    a2 = [0] * (m + 2)\n    a3 = [0] * (m + 2)\n    for j in range(n):\n        a1[a[j][0]] += 1\n        a1[a[j][1] + 1] -= 1\n    for j in range(1, m + 2, 1):\n        a1[j] = a1[j - 1] + a1[j]\n    for j in range(m + 2):\n        if a1[j] == k:\n            a2[j] = 1\n        if a1[j] == k + 1:\n            a3[j] = 1\n    for j in range(1, m + 2, 1):\n        a2[j] = a2[j - 1] + a2[j]\n        a3[j] = a3[j - 1] + a3[j]\n    maxi = 0\n    for i in range(n):\n        tt = 0\n        t1 = a2[a[i][1]] - a2[a[i][0] - 1]\n        tt += a2[m] - t1\n        t1 = a3[a[i][1]] - a3[a[i][0] - 1]\n        tt += t1\n        maxi = max(maxi, tt)\n    print(maxi)", "for _ in range(int(input())):\n    (n, k) = [int(x) for x in input().split()]\n    a = []\n    max_r = 0\n    for i in range(n):\n        (l, r) = [int(x) for x in input().split()]\n        max_r = max(max_r, r)\n        a.append([l, r])\n    max_r += 2\n    change = [0] * max_r\n    for i in a:\n        change[i[0]] += 1\n        change[i[1] + 1] -= 1\n    for i in range(1, len(change)):\n        change[i] += change[i - 1]\n    mxk = 0\n    kar = [0] * max_r\n    kpar = [0] * max_r\n    for i in range(len(change)):\n        if change[i] == k:\n            kar[i] += 1\n        if change[i] == k + 1:\n            kpar[i] += 1\n    for i in range(1, len(change)):\n        kar[i] += kar[i - 1]\n        kpar[i] += kpar[i - 1]\n    for i in a:\n        (l, r) = (i[0], i[1])\n        sayavar = kar[-1] - (kar[r] - kar[l - 1]) + (kpar[r] - kpar[l - 1])\n        mxk = max(mxk, sayavar)\n    print(mxk)", "def max_range(n, k, l):\n    max = 0\n    h = 0\n    x = 0\n    y = 0\n    p = 0\n    q = 0\n    f = l[0][0]\n    g = l[0][1]\n    cake = [0] * 100000\n    for node in range(n):\n        cake[l[node][0] - 1] += 1\n        cake[l[node][1]] -= 1\n        if l[node][0] < f:\n            f = l[node][0]\n        if l[node][1] > g:\n            g = l[node][1]\n    c = [0] * (g - f + 2)\n    for i in range(f - 1, g + 1):\n        if h + cake[i] == k + 1:\n            c[i - (f - 1)] = q + 1\n            q += 1\n        else:\n            c[i - (f - 1)] = q\n        if h + cake[i] == k:\n            x += 1\n            h = h + cake[i]\n            cake[i] = p + 1\n            p += 1\n        else:\n            h = h + cake[i]\n            cake[i] = p\n    for node in range(n):\n        count = 0\n        if l[node][0] == 1:\n            count = c[l[node][1] - 1 - (f - 1)] + x - cake[l[node][1] - 1]\n        else:\n            count = c[l[node][1] - 1 - (f - 1)] - c[l[node][0] - 2 - (f - 1)] + x - (cake[l[node][1] - 1] - cake[l[node][0] - 2])\n        if count > max:\n            max = count\n    return max\nt = int(input())\nfor x in range(t):\n    s = input().split(' ')\n    N = int(s[0])\n    K = int(s[1])\n    l = []\n    for i in range(N):\n        l1 = []\n        s = input().split(' ')\n        l1.append(int(s[0]))\n        l1.append(int(s[1]))\n        l.append(l1)\n    result = max_range(N, K, l)\n    print(result)", "def max_range(n, k, l):\n    max = 0\n    h = 0\n    x = 0\n    y = 0\n    p = 0\n    q = 0\n    f = l[0][0]\n    g = l[0][1]\n    cake = [0] * 100000\n    for node in range(n):\n        cake[l[node][0] - 1] += 1\n        cake[l[node][1]] -= 1\n        if l[node][0] < f:\n            f = l[node][0]\n        if l[node][1] > g:\n            g = l[node][1]\n    for i in range(f - 1, g + 1):\n        cake[i] += h\n        h = cake[i]\n        if cake[i] == k:\n            x += 1\n        elif cake[i] == k + 1:\n            y += 1\n    c = [0] * (g - f + 2)\n    for i in range(f - 1, g + 1):\n        if cake[i] == k + 1:\n            c[i - (f - 1)] = q + 1\n            q += 1\n        else:\n            c[i - (f - 1)] = q\n        if cake[i] == k:\n            cake[i] = p + 1\n            p += 1\n        else:\n            cake[i] = p\n    for node in range(n):\n        count = 0\n        if l[node][0] == 1:\n            count = c[l[node][1] - 1 - (f - 1)] + x - cake[l[node][1] - 1]\n        else:\n            count = c[l[node][1] - 1 - (f - 1)] - c[l[node][0] - 2 - (f - 1)] + x - (cake[l[node][1] - 1] - cake[l[node][0] - 2])\n        if count > max:\n            max = count\n    return max\nt = int(input())\nfor x in range(t):\n    s = input().split(' ')\n    N = int(s[0])\n    K = int(s[1])\n    l = []\n    for i in range(N):\n        l1 = []\n        s = input().split(' ')\n        l1.append(int(s[0]))\n        l1.append(int(s[1]))\n        l.append(l1)\n    result = max_range(N, K, l)\n    print(result)", "def max_range(n, k, l):\n    max = 0\n    h = 0\n    x = 0\n    y = 0\n    p = 0\n    f = l[0][0]\n    g = l[0][1]\n    cake = [0] * 100000\n    for node in range(n):\n        cake[l[node][0] - 1] += 1\n        cake[l[node][1]] -= 1\n        if l[node][0] < f:\n            f = l[node][0]\n        if l[node][1] > g:\n            g = l[node][1]\n    for i in range(f - 1, g + 1):\n        cake[i] += h\n        h = cake[i]\n        if cake[i] == k:\n            x += 1\n        elif cake[i] == k + 1:\n            y += 1\n    c = [0] * (g - f + 2)\n    for i in range(f - 1, g + 1):\n        if cake[i] == k + 1:\n            c[i - (f - 1)] = p + 1\n            p += 1\n        else:\n            c[i - (f - 1)] = p\n    p = 0\n    for i in range(f - 1, g + 1):\n        if cake[i] == k:\n            cake[i] = p + 1\n            p += 1\n        else:\n            cake[i] = p\n    for node in range(n):\n        count = 0\n        if l[node][0] == 1:\n            count = c[l[node][1] - 1 - (f - 1)] + x - cake[l[node][1] - 1]\n        else:\n            count = c[l[node][1] - 1 - (f - 1)] - c[l[node][0] - 2 - (f - 1)] + x - (cake[l[node][1] - 1] - cake[l[node][0] - 2])\n        if count > max:\n            max = count\n    return max\nt = int(input())\nfor x in range(t):\n    s = input().split(' ')\n    N = int(s[0])\n    K = int(s[1])\n    l = []\n    for i in range(N):\n        l1 = []\n        s = input().split(' ')\n        l1.append(int(s[0]))\n        l1.append(int(s[1]))\n        l.append(l1)\n    result = max_range(N, K, l)\n    print(result)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    a = []\n    maxr = -1\n    c = [0] * 100001\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        maxr = max(r, maxr)\n        c[l] += 1\n        c[r + 1] -= 1\n        a.append((l, r))\n    count = 0\n    pre = [0] * (maxr + 1)\n    pre2 = [0] * (maxr + 1)\n    for i in range(1, maxr + 1):\n        c[i] += c[i - 1]\n        if c[i] == k:\n            pre[i] = 1\n        if c[i] == k + 1:\n            pre2[i] = 1\n        pre[i] += pre[i - 1]\n        pre2[i] += pre2[i - 1]\n    totk = pre[-1]\n    ans = 0\n    for i in range(n):\n        ck = pre[a[i][1]] - pre[a[i][0] - 1]\n        ck1 = pre2[a[i][1]] - pre2[a[i][0] - 1]\n        count = totk - ck + ck1\n        ans = max(ans, count)\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = []\n    x = [0] * 100001\n    maxi_r = 0\n    for _ in range(n):\n        (L, R) = map(int, input().split())\n        if R > maxi_r:\n            maxi_r = R\n        l.append((L, R))\n        x[L] += 1\n        x[R + 1] -= 1\n    maxi_r += 2\n    x = x[:maxi_r]\n    yk = [0] * maxi_r\n    zkk = [0] * maxi_r\n    for i in range(1, maxi_r):\n        x[i] = x[i - 1] + x[i]\n    for i in range(1, maxi_r):\n        if x[i] == k:\n            yk[i] = yk[i - 1] + 1\n        else:\n            yk[i] = yk[i - 1]\n        if x[i] == k + 1:\n            zkk[i] = zkk[i - 1] + 1\n        else:\n            zkk[i] = zkk[i - 1]\n    m = 0\n    for (i, j) in l:\n        r1 = yk[j] - yk[i - 1]\n        r2 = zkk[j] - zkk[i - 1]\n        r = r2 - r1\n        n = yk[-1] + r\n        if n > m:\n            m = n\n    print(m)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [0] * (10 ** 5 + 1)\n    op = []\n    ans = 0\n    maxi = 0\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        maxi = max(b, maxi)\n        op.append([a, b])\n        l[a] += 1\n        l[b + 1] -= 1\n    arr = [0] * (maxi + 1)\n    for i in range(1, maxi + 1):\n        arr[i] = arr[i - 1] + l[i]\n    count = 0\n    freq = [0] * (maxi + 1)\n    freq1 = [0] * (maxi + 1)\n    for i in range(1, maxi + 1):\n        freq[i] = freq[i - 1]\n        freq1[i] = freq1[i - 1]\n        if arr[i] == k:\n            freq[i] += 1\n        elif arr[i] == k + 1:\n            freq1[i] += 1\n    val = arr.count(k)\n    for i in range(n):\n        cou = freq[op[i][1]] - freq[op[i][0] - 1]\n        cou1 = freq1[op[i][1]] - freq1[op[i][0] - 1]\n        count = val - cou + cou1\n        if count > ans:\n            ans = count\n    print(ans)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [0] * (10 ** 5 + 1)\n    op = []\n    ans = 0\n    maxi = 0\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        maxi = max(b, maxi)\n        op.append([a, b])\n        l[a] += 1\n        l[b + 1] -= 1\n    arr = [0] * (maxi + 1)\n    for i in range(1, maxi + 1):\n        arr[i] = arr[i - 1] + l[i]\n    count = 0\n    freq = [0] * (maxi + 1)\n    freq1 = [0] * (maxi + 1)\n    for i in range(1, maxi + 1):\n        freq[i] = freq[i - 1]\n        freq1[i] = freq1[i - 1]\n        if arr[i] == k:\n            freq[i] += 1\n        elif arr[i] == k + 1:\n            freq1[i] += 1\n    val = arr.count(k)\n    for i in range(n):\n        cou = freq[op[i][1]] - freq[op[i][0] - 1]\n        cou1 = freq1[op[i][1]] - freq1[op[i][0] - 1]\n        count = val - cou + cou1\n        if count > ans:\n            ans = count\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    (n, k) = map(int, input().split())\n    h = []\n    le = []\n    r = []\n    mr = 0\n    for i in range(0, n):\n        (l, ri) = map(int, input().split())\n        le.append(l)\n        r.append(ri)\n        if ri > mr:\n            mr = ri\n    for i in range(0, mr + 2):\n        h.append(0)\n    for i in range(0, n):\n        h[le[i]] += 1\n        h[r[i] + 1] += -1\n    for i in range(1, mr + 1):\n        h[i] = h[i] + h[i - 1]\n    he = []\n    hu = []\n    if h[0] == k:\n        he.append(1)\n        y = 1\n    else:\n        he.append(0)\n        y = 0\n    if h[0] == k + 1:\n        hu.append(1)\n    else:\n        hu.append(0)\n    for i in range(1, mr + 1):\n        if h[i] == k:\n            he.append(he[i - 1] + 1)\n            y = y + 1\n        else:\n            he.append(he[i - 1])\n        if h[i] == k + 1:\n            hu.append(hu[i - 1] + 1)\n        else:\n            hu.append(hu[i - 1])\n    check = []\n    for i in range(0, n):\n        check.append(he[r[i]] - he[le[i] - 1] - (hu[r[i]] - hu[le[i] - 1]))\n    max = 0\n    for i in range(0, n):\n        x = y - check[i]\n        if x > max:\n            max = x\n    print(max)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    lt = []\n    freq = [0] * 100003\n    maxi = -1\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        lt.append((l, r))\n        freq[l] += 1\n        freq[r + 1] -= 1\n        maxi = max(maxi, r)\n    for i in range(1, maxi + 1):\n        freq[i] = freq[i - 1] + freq[i]\n    prefix_k = [0] * (maxi + 1)\n    prefix_k_plus = [0] * (maxi + 1)\n    for i in range(1, maxi + 1):\n        prefix_k[i] = prefix_k[i - 1]\n        if freq[i] == k:\n            prefix_k[i] += 1\n    for i in range(1, maxi + 1):\n        prefix_k_plus[i] = prefix_k_plus[i - 1]\n        if freq[i] == k + 1:\n            prefix_k_plus[i] += 1\n    idx = 0\n    curr_k = 0\n    for i in range(n):\n        l = lt[i][0]\n        r = lt[i][1]\n        local_k = prefix_k[-1] - prefix_k[r] + prefix_k[l - 1] + prefix_k_plus[r] - prefix_k_plus[l - 1]\n        curr_k = max(local_k, curr_k)\n    print(curr_k)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = []\n    maxlen = 0\n    for _ in range(n):\n        (l, r) = map(int, input().split())\n        a.append((l, r))\n        maxlen = max(maxlen, r)\n    cakes = [0] * (maxlen + 2)\n    for i in a:\n        (l, r) = (i[0], i[1])\n        cakes[l - 1] += 1\n        cakes[r] -= 1\n    for i in range(1, len(cakes)):\n        cakes[i] += cakes[i - 1]\n    b = []\n    d = []\n    c = 0\n    f = 0\n    result = 0\n    for i in range(len(cakes)):\n        if cakes[i] == k:\n            c += 1\n        if cakes[i] == k + 1:\n            f += 1\n        b.append(c)\n        d.append(f)\n    for i in range(n):\n        (l, r) = (a[i][0], a[i][1])\n        nk = b[r - 1] - (0 if l == 1 else b[l - 2])\n        nk1 = d[r - 1] - (0 if l == 1 else d[l - 2])\n        tnk = nk1 - nk\n        result = max(result, c + tnk)\n    print(result)", "cpc = [0 for i in range(100001)]\ncqc = [0 for i in range(100001)]\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    arr = [0 for i in range(100001)]\n    check = []\n    lr = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        check.append((l, r))\n        lr = max(r, lr)\n        arr[l] += 1\n        r += 1\n        if r <= 100000:\n            arr[r] -= 1\n    ans = 0\n    cpc[1] = 0\n    cqc[1] = 0\n    if arr[1] == k:\n        cpc[1] += 1\n        ans += 1\n    elif arr[1] == k + 1:\n        cqc[1] += 1\n    for i in range(2, lr + 1):\n        arr[i] += arr[i - 1]\n        cpc[i] = 0\n        cpc[i] += cpc[i - 1]\n        cqc[i] = 0\n        cqc[i] += cqc[i - 1]\n        if arr[i] == k:\n            ans += 1\n            cpc[i] += 1\n        elif arr[i] == k + 1:\n            cqc[i] += 1\n    m = 0\n    for i in range(n):\n        (l, r) = (check[i][0], check[i][1])\n        m = max(m, ans - (cpc[r] - cpc[l - 1]) + (cqc[r] - cqc[l - 1]))\n    print(m)", "for t in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = [0] * n\n    r = [0] * n\n    for i in range(n):\n        (a, b) = map(int, input().split())\n        l[i] = a\n        r[i] = b\n    MAX = max(r) + 2\n    psum = [0] * MAX\n    for i in range(n):\n        psum[l[i]] += 1\n        psum[r[i] + 1] -= 1\n    for i in range(1, MAX):\n        psum[i] = psum[i] + psum[i - 1]\n    psk = [0] * MAX\n    pskp = [0] * MAX\n    for i in range(1, MAX):\n        if psum[i] == k:\n            psk[i] = psk[i - 1] + 1\n        else:\n            psk[i] = psk[i - 1]\n        if psum[i] == k + 1:\n            pskp[i] = pskp[i - 1] + 1\n        else:\n            pskp[i] = pskp[i - 1]\n    mk = -1000000\n    for i in range(n):\n        nk = psk[r[i]] - psk[l[i] - 1]\n        nkp = pskp[r[i]] - pskp[l[i] - 1]\n        mk = max(mk, -nk + nkp)\n    print(psk[MAX - 1] + mk)", "for _ in range(int(input())):\n    (N, K) = map(int, input().split())\n    queries = []\n    mx = 0\n    ans = 0\n    for i in range(N):\n        (l, r) = map(int, input().split())\n        queries.append((l, r))\n        mx = max(mx, r)\n    final = [0] * (mx + 2)\n    total_K = [0] * (mx + 2)\n    total_K1 = [0] * (mx + 2)\n    for (l, r) in queries:\n        final[l] += 1\n        final[r + 1] -= 1\n    for i in range(1, len(final)):\n        final[i] += final[i - 1]\n        if final[i] == K:\n            total_K[i] += 1\n        if final[i] == K + 1:\n            total_K1[i] += 1\n    for i in range(1, len(total_K)):\n        total_K[i] += total_K[i - 1]\n        total_K1[i] += total_K1[i - 1]\n    for (l, r) in queries:\n        temp = total_K[-1] - (total_K[r] - total_K[l - 1]) + (total_K1[r] - total_K1[l - 1])\n        ans = max(ans, temp)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split(' '))\n    queries = []\n    p = [0] * 100007\n    max_r = -1\n    for j in range(n):\n        (l, r) = map(int, input().split(' '))\n        max_r = max(max_r, r)\n        queries.append([l, r])\n        p[l] += 1\n        p[r + 1] -= 1\n    for j in range(1, max_r + 1):\n        p[j] += p[j - 1]\n    results = [0] * (max_r + 2)\n    dp = [0] * (max_r + 2)\n    count = countk = 0\n    for j in range(1, max_r + 1):\n        countk = 0\n        count = 0\n        if p[j] == k + 1:\n            countk = 1\n        if p[j] == k:\n            count = 1\n        results[j] = results[j - 1] + count\n        dp[j] = dp[j - 1] + countk\n    values = 0\n    for j in range(len(queries)):\n        temp = results[-2] + dp[queries[j][1]] - dp[queries[j][0] - 1] - results[queries[j][1]] + results[queries[j][0] - 1]\n        values = max(values, temp)\n    print(values)\n    del dp, p, queries, results", "for _ in range(int(input())):\n    ma = 100009\n    (n, k) = map(int, input().split())\n    mat = []\n    mind = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        mat.append([l, r])\n        mind = max(mind, r)\n    ma = mind + 5\n    couk = [0 for i in range(ma)]\n    for i in range(n):\n        (l, r) = (mat[i][0], mat[i][1])\n        couk[l] += 1\n        couk[r + 1] -= 1\n    pre = [0 for i in range(ma)]\n    pre2 = [0 for i in range(ma)]\n    for i in range(1, ma):\n        couk[i] = couk[i - 1] + couk[i]\n        if couk[i] == k:\n            pre[i] = 1\n        if couk[i] == k + 1:\n            pre2[i] = 1\n        pre[i] += pre[i - 1]\n        pre2[i] += pre2[i - 1]\n    total_k = pre[ma - 1]\n    ans = 0\n    for i in range(n):\n        ck = pre[mat[i][1]] - pre[mat[i][0] - 1]\n        ck1 = pre2[mat[i][1]] - pre2[mat[i][0] - 1]\n        temp = ck1 - ck + total_k\n        ans = max(ans, temp)\n    print(ans)", "t = int(input())\nfor i in range(t):\n    ma = 0\n    P = []\n    (n, k) = map(int, input().split())\n    for j in range(n):\n        (a, b) = map(int, input().split())\n        if b > ma:\n            ma = b\n        P.append([a, b])\n    Arr = [0] * (ma + 5)\n    for j in P:\n        Arr[j[0]] += 1\n        Arr[j[1] + 1] -= 1\n    for j in range(1, len(Arr)):\n        Arr[j] = Arr[j - 1] + Arr[j]\n    Arr2 = [0] * (ma + 5)\n    Arr3 = [0] * (ma + 5)\n    for j in range(len(Arr)):\n        if Arr[j] == k:\n            Arr2[j] = 1\n        if Arr[j] == k + 1:\n            Arr3[j] = 1\n    for j in range(1, len(Arr)):\n        Arr2[j] = Arr2[j - 1] + Arr2[j]\n        Arr3[j] = Arr3[j - 1] + Arr3[j]\n    ma2 = 0\n    for j in P:\n        tot = 0\n        her = Arr2[j[1]] - Arr2[j[0] - 1]\n        tot += Arr2[ma] - her\n        her2 = Arr3[j[1]] - Arr3[j[0] - 1]\n        tot += her2\n        if ma2 < tot:\n            ma2 = tot\n    print(ma2)", "sz = 100001\nt = int(input())\nfor test in range(t):\n    (n, k) = map(int, input().split())\n    (end, start) = ([0] * n, [0] * n)\n    (sfx, pfx, dp) = ([0] * sz, [0] * sz, [0] * sz)\n    ul = 0\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        ul = max(ul, r)\n        dp[l - 1] += 1\n        dp[r] -= 1\n        start[i] = l - 1\n        end[i] = r - 1\n    a = [0] * (ul + 1)\n    a[0] = dp[0]\n    ans = 0\n    if a[0] == k:\n        pfx[0] = 1\n        ans += 1\n    elif a[0] == k + 1:\n        sfx[0] = 1\n    for i in range(1, ul):\n        dp[i] += dp[i - 1]\n        a[i] += dp[i]\n        if a[i] == k:\n            pfx[i] = pfx[i - 1] + 1\n            ans += 1\n        else:\n            pfx[i] = pfx[i - 1]\n        if a[i] == k + 1:\n            sfx[i] = sfx[i - 1] + 1\n        else:\n            sfx[i] = sfx[i - 1]\n    mx = -100001\n    for i in range(n):\n        l = start[i]\n        r = end[i]\n        tot = sfx[r] - sfx[l - 1]\n        tot = tot - (pfx[r] - pfx[l - 1])\n        mx = max(mx, tot)\n    print(ans + mx)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = {0: 0}\n    arr = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        arr.append([l, r])\n        d[l] = d.get(l, 0) + 1\n        d[r + 1] = d.get(r + 1, 0) - 1\n    b = sorted(d)\n    s = 0\n    for i in b:\n        d[i] = d[i] + s\n        s = d[i]\n    d1 = {}\n    s = 0\n    s1 = 0\n    ans = 0\n    for i in range(len(b) - 1):\n        if d[b[i]] == k:\n            ans += b[i + 1] - b[i]\n    d1[0] = [0, 0]\n    for i in range(len(b) - 1):\n        if d[b[i]] == k:\n            d1[b[i + 1]] = [d1[b[i]][0] + b[i + 1] - b[i], d1[b[i]][1]]\n        else:\n            d1[b[i + 1]] = [d1[b[i]][0], d1[b[i]][1]]\n        if d[b[i]] == k + 1:\n            d1[b[i + 1]] = [d1[b[i + 1]][0], d1[b[i]][1] + b[i + 1] - b[i]]\n        else:\n            d1[b[i + 1]] = [d1[b[i + 1]][0], d1[b[i]][1]]\n    m = -1\n    for i in arr:\n        l = i[0]\n        r = i[1]\n        m = max(m, ans + d1[r + 1][1] - d1[l][1] - d1[r + 1][0] + d1[l][0])\n    print(m)", "import bisect\n\ndef find(arr, margin):\n    if len(arr) == 0:\n        return 0\n    (l, r) = margin\n    if arr[0] > r or arr[-1] < l:\n        return 0\n    r_ans = bisect.bisect_right(arr, r) - 1\n    l_ans = bisect.bisect_left(arr, l)\n    return r_ans - l_ans + 1\n\ndef main():\n    for _ in range(int(input())):\n        c = [0 for i in range(100002)]\n        (n, k) = map(int, input().split())\n        ops = []\n        for i in range(n):\n            (l, r) = map(int, input().split())\n            ops.append((l, r))\n            c[l] += 1\n            c[r + 1] -= 1\n        for i in range(2, 100001):\n            c[i] += c[i - 1]\n        (ks, kplus) = ([], [])\n        for i in range(1, 100001):\n            if c[i] == k:\n                ks.append(i)\n            elif c[i] == k + 1:\n                kplus.append(i)\n        op = ops[0]\n        best = len(ks) - find(ks, op) + find(kplus, op)\n        for op in ops[1:]:\n            best = max(best, len(ks) - find(ks, op) + find(kplus, op))\n        print(best)\nmain()", "import math\nimport bisect\nimport itertools\nimport sys\nI = lambda : sys.stdin.readline()\nmod = 10 ** 9 + 7\n\ndef modu(a, m):\n    if a % m:\n        return a % m\n    return m\n\ndef mindiff(a):\n    b = a[:]\n    b.sort()\n    m = 10000000000\n    for i in range(len(b) - 1):\n        if b[i + 1] - b[i] < m:\n            m = b[i + 1] - b[i]\n    return m\n\ndef lcm(a, b):\n    return a * b // math.gcd(a, b)\n\ndef merge(a, b):\n    i = 0\n    j = 0\n    c = 0\n    ans = []\n    while i < len(a) and j < len(b):\n        if a[i] < b[j]:\n            ans.append(a[i])\n            i += 1\n        else:\n            ans.append(b[j])\n            c += len(a) - i\n            j += 1\n    ans += a[i:]\n    ans += b[j:]\n    return (ans, c)\n\ndef mergesort(a):\n    if len(a) == 1:\n        return (a, 0)\n    mid = len(a) // 2\n    (left, left_inversion) = mergesort(a[:mid])\n    (right, right_inversion) = mergesort(a[mid:])\n    (m, c) = merge(left, right)\n    c += left_inversion + right_inversion\n    return (m, c)\n\ndef is_prime(num):\n    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num == 3:\n        return True\n    if num % 2 == 0:\n        return False\n    if num % 3 == 0:\n        return False\n    t = 5\n    a = 2\n    while t <= int(math.sqrt(num)):\n        if num % t == 0:\n            return False\n        t += a\n        a = 6 - a\n    return True\n\ndef ceil(a, b):\n    if a % b == 0:\n        return a // b\n    else:\n        return a // b + 1\n\ndef binsearch(arr, b, low, high):\n    if low == high:\n        return low\n    if arr[math.ceil((low + high) / 2)] < b:\n        return binsearch(arr, b, low, math.ceil((low + high) / 2) - 1)\n    else:\n        return binsearch(arr, b, math.ceil((low + high) / 2), high)\n\ndef ncr1(n, r):\n    s = 1\n    for i in range(min(n - r, r)):\n        s *= n - i\n        s %= mod\n        s *= pow(i + 1, mod - 2, mod)\n        s %= mod\n    return s\n\ndef calc(n, m, r):\n    s = 0\n    for i in range(0, r + 1, 2):\n        s += ncr1(n, i) * ncr1(m, i)\n        s %= mod\n    return s\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    d = {0: 0}\n    arr = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        arr.append([l, r])\n        d[l] = d.get(l, 0) + 1\n        d[r + 1] = d.get(r + 1, 0) - 1\n    b = sorted(d)\n    s = 0\n    for i in b:\n        d[i] = d[i] + s\n        s = d[i]\n    d1 = {}\n    s = 0\n    s1 = 0\n    ans = 0\n    for i in range(len(b) - 1):\n        if d[b[i]] == k:\n            ans += b[i + 1] - b[i]\n    d1[0] = [0, 0]\n    for i in range(len(b) - 1):\n        if d[b[i]] == k:\n            d1[b[i + 1]] = [d1[b[i]][0] + b[i + 1] - b[i], d1[b[i]][1]]\n        else:\n            d1[b[i + 1]] = [d1[b[i]][0], d1[b[i]][1]]\n        if d[b[i]] == k + 1:\n            d1[b[i + 1]] = [d1[b[i + 1]][0], d1[b[i]][1] + b[i + 1] - b[i]]\n        else:\n            d1[b[i + 1]] = [d1[b[i + 1]][0], d1[b[i]][1]]\n    m = -1\n    for i in arr:\n        l = i[0]\n        r = i[1]\n        m = max(m, ans + d1[r + 1][1] - d1[l][1] - d1[r + 1][0] + d1[l][0])\n    print(m)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    m = 0\n    options = []\n    for i in range(n):\n        (l, r) = map(int, input().split())\n        options.append([l, r])\n        m = max(m, l, r)\n    m += 2\n    c = [0] * m\n    for i in options:\n        c[i[0]] += 1\n        c[i[1] + 1] -= 1\n    x = 0\n    w = []\n    for i in range(m):\n        x += c[i]\n        w.append(x)\n    c1 = [0] * m\n    c2 = [0] * m\n    for i in range(1, m):\n        if w[i] == k:\n            c1[i] = 1 + c1[i - 1]\n        else:\n            c1[i] = c1[i - 1]\n    d1 = [0] * m\n    for i in range(1, m):\n        if w[i] == k + 1:\n            d1[i] = 1 + d1[i - 1]\n        else:\n            d1[i] = d1[i - 1]\n    for i in range(m - 2, 0, -1):\n        if w[i] == k:\n            c2[i] = 1 + c2[i + 1]\n        else:\n            c2[i] = c2[i + 1]\n    mymax = 0\n    for i in options:\n        mymax = max(mymax, c1[i[0] - 1] + c2[i[1] + 1] + d1[i[1]] - d1[i[0] - 1])\n    print(mymax)"]