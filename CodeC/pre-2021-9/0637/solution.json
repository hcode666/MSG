["for _ in range(int(input())):\n    n = int(input())\n    rep = {}\n    for i in range(n):\n        (c, p) = input().split()\n        rep[c] = p\n    s = input()\n    new = ''\n    bl = False\n    for i in s:\n        if i in rep:\n            new += rep[i]\n        else:\n            new += i\n        if new[-1] == '.':\n            bl = True\n    start = -1\n    for i in new:\n        if i == '0':\n            start += 1\n        else:\n            break\n    if start > -1:\n        new = new[start + 1:]\n    end = len(new)\n    if bl:\n        for i in new[::-1]:\n            if i == '0':\n                end -= 1\n            elif i == '.':\n                end -= 1\n                break\n            else:\n                break\n    if new[:end] == '':\n        print(0)\n    else:\n        print(new[:end])", "for _ in range(int(input())):\n    n = int(input())\n    rep = {}\n    for i in range(n):\n        (c, p) = input().split()\n        rep[c] = p\n    s = input()\n    new = ''\n    bl = False\n    for i in s:\n        if i in rep:\n            new += rep[i]\n        else:\n            new += i\n        if new[-1] == '.':\n            bl = True\n    start = -1\n    for i in new:\n        if i == '0':\n            start += 1\n        else:\n            break\n    if start > -1:\n        new = new[start + 1:]\n    end = len(new)\n    if bl:\n        for i in new[::-1]:\n            if i == '0':\n                end -= 1\n            elif i == '.':\n                end -= 1\n                break\n            else:\n                break\n    if new[:end] == '':\n        print(0)\n    else:\n        print(new[:end])", "for _ in range(int(input())):\n    n = int(input())\n    rep = {}\n    for i in range(n):\n        (c, p) = input().split()\n        rep[c] = p\n    s = input()\n    new = ''\n    bl = False\n    for i in s:\n        if i in rep:\n            new += rep[i]\n        else:\n            new += i\n        if new[-1] == '.':\n            bl = True\n    start = -1\n    for i in new:\n        if i == '0':\n            start += 1\n        else:\n            break\n    if start > -1:\n        new = new[start + 1:]\n    end = len(new)\n    if bl:\n        for i in new[::-1]:\n            if i == '0':\n                end -= 1\n            elif i == '.':\n                end -= 1\n                break\n            else:\n                break\n    if new[:end] == '':\n        print(0)\n    else:\n        print(new[:end])", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = dict()\n    for __ in range(N):\n        (ci, pi) = input().split()\n        data[ci] = pi\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] in data.keys():\n            S[i] = data[S[i]]\n    S = ''.join(S)\n    if '.' in S:\n        S = S.strip('0').rstrip('.')\n    else:\n        S = S.lstrip('0')\n    print(S or '0')", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = dict()\n    for __ in range(N):\n        (ci, pi) = input().split()\n        data[ci] = pi\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] in data.keys():\n            S[i] = data[S[i]]\n    S = ''.join(S)\n    if '.' in S:\n        S = S.strip('0').rstrip('.')\n    else:\n        S = S.lstrip('0')\n    print(S or '0')", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = dict()\n    for __ in range(N):\n        (ci, pi) = input().split()\n        data[ci] = pi\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] in data.keys():\n            S[i] = data[S[i]]\n    S = ''.join(S)\n    if '.' in S:\n        S = S.strip('0').rstrip('.')\n    else:\n        S = S.lstrip('0')\n    print(S or '0')", "try:\n    from debug import debug, timer\nexcept ImportError:\n    pass\nfrom sys import stdin\ninput = stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\n\ndef getvals():\n    while True:\n        yield from input().split()\n\ndef tri(n):\n    return n * (n + 1) // 2\n\ndef smallest_first(m, n):\n    return (min(m, n), max(m, n))\n\ndef solve(*args):\n    (n, d, s) = args\n    outp = ''.join([d[x] if x in d else x for x in s])\n    outp = outp.lstrip('0')\n    if '.' in outp:\n        outp = outp.rstrip('0')\n        outp = outp.rstrip('.')\n    if outp == '':\n        return 0\n    return outp\n\ndef do_codechef():\n    for t in rii():\n        n = ii()\n        d = {a: b for (a, b) in (si().split(' ') for _ in range(n))}\n        s = si()\n        print(solve(n, d, s))\ndo_codechef()\nexit()", "try:\n    from debug import debug, timer\nexcept ImportError:\n    pass\nfrom sys import stdin\ninput = stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\n\ndef getvals():\n    while True:\n        yield from input().split()\n\ndef tri(n):\n    return n * (n + 1) // 2\n\ndef smallest_first(m, n):\n    return (min(m, n), max(m, n))\n\ndef solve(*args):\n    (n, d, s) = args\n    outp = ''.join([d[x] if x in d else x for x in s])\n    outp = outp.lstrip('0')\n    if '.' in outp:\n        outp = outp.rstrip('0')\n        outp = outp.rstrip('.')\n    if outp == '':\n        return 0\n    return outp\n\ndef do_codechef():\n    for t in rii():\n        n = ii()\n        d = {a: b for (a, b) in (si().split(' ') for _ in range(n))}\n        s = si()\n        print(solve(n, d, s))\ndo_codechef()\nexit()", "try:\n    from debug import debug, timer\nexcept ImportError:\n    pass\nfrom sys import stdin\ninput = stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\n\ndef getvals():\n    while True:\n        yield from input().split()\n\ndef tri(n):\n    return n * (n + 1) // 2\n\ndef smallest_first(m, n):\n    return (min(m, n), max(m, n))\n\ndef solve(*args):\n    (n, d, s) = args\n    outp = ''.join([d[x] if x in d else x for x in s])\n    outp = outp.lstrip('0')\n    if '.' in outp:\n        outp = outp.rstrip('0')\n        outp = outp.rstrip('.')\n    if outp == '':\n        return 0\n    return outp\n\ndef do_codechef():\n    for t in rii():\n        n = ii()\n        d = {a: b for (a, b) in (si().split(' ') for _ in range(n))}\n        s = si()\n        print(solve(n, d, s))\ndo_codechef()\nexit()", "try:\n    from debug import debug, timer\nexcept ImportError:\n    pass\nfrom sys import stdin\ninput = stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\n\ndef getvals():\n    while True:\n        yield from input().split()\n\ndef tri(n):\n    return n * (n + 1) // 2\n\ndef smallest_first(m, n):\n    return (min(m, n), max(m, n))\n\ndef solve(*args):\n    (n, d, s) = args\n    outp = ''.join([d[x] if x in d else x for x in s])\n    outp = outp.lstrip('0')\n    if '.' in outp:\n        outp = outp.rstrip('0')\n        outp = outp.rstrip('.')\n    if outp == '':\n        return 0\n    return outp\n\ndef do_codechef():\n    for t in rii():\n        n = ii()\n        d = {a: b for (a, b) in (si().split(' ') for _ in range(n))}\n        s = si()\n        print(solve(n, d, s))\ndo_codechef()\nexit()", "try:\n    from debug import debug, timer\nexcept ImportError:\n    pass\nfrom sys import stdin\ninput = stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\n\ndef getvals():\n    while True:\n        yield from input().split()\n\ndef tri(n):\n    return n * (n + 1) // 2\n\ndef smallest_first(m, n):\n    return (min(m, n), max(m, n))\n\ndef solve(*args):\n    (n, d, s) = args\n    outp = ''.join([d[x] if x in d else x for x in s])\n    outp = outp.lstrip('0')\n    if '.' in outp:\n        outp = outp.rstrip('0')\n        outp = outp.rstrip('.')\n    if outp == '':\n        return 0\n    return outp\n\ndef do_codechef():\n    for t in rii():\n        n = ii()\n        d = {a: b for (a, b) in (si().split(' ') for _ in range(n))}\n        s = si()\n        print(solve(n, d, s))\ndo_codechef()\nexit()", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = dict()\n    for __ in range(N):\n        (ci, pi) = input().split()\n        data[ci] = pi\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] in data.keys():\n            S[i] = data[S[i]]\n    S = ''.join(S)\n    if '.' in S:\n        S = S.strip('0').rstrip('.')\n    else:\n        S = S.lstrip('0')\n    print(S or '0')", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = dict()\n    for __ in range(N):\n        (ci, pi) = input().split()\n        data[ci] = pi\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] in data.keys():\n            S[i] = data[S[i]]\n    S = ''.join(S)\n    if '.' in S:\n        S = S.strip('0').rstrip('.')\n    else:\n        S = S.lstrip('0')\n    print(S or '0')", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = dict()\n    for __ in range(N):\n        (ci, pi) = input().split()\n        data[ci] = pi\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] in data.keys():\n            S[i] = data[S[i]]\n    S = ''.join(S)\n    if '.' in S:\n        S = S.strip('0').rstrip('.')\n    else:\n        S = S.lstrip('0')\n    print(S or '0')", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = dict()\n    for __ in range(N):\n        (ci, pi) = input().split()\n        data[ci] = pi\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] in data.keys():\n            S[i] = data[S[i]]\n    S = ''.join(S)\n    if '.' in S:\n        S = S.strip('0').rstrip('.')\n    else:\n        S = S.lstrip('0')\n    print(S or '0')", "from decimal import Decimal\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    data = dict()\n    for __ in range(N):\n        (ci, pi) = input().split()\n        data[ci] = pi\n    S = list(input())\n    for i in range(len(S)):\n        if S[i] in data.keys():\n            S[i] = data[S[i]]\n    S = ''.join(S)\n    if '.' in S:\n        S = S.strip('0').rstrip('.')\n    else:\n        S = S.lstrip('0')\n    print(S or '0')", "for _ in range(int(input())):\n    d = {}\n    for __ in range(int(input())):\n        (c, p) = map(str, input().split())\n        d[c] = p\n    s = input()\n    k = ''\n    for i in range(0, len(s)):\n        if s[i] in d.keys():\n            k = k + d[s[i]]\n        else:\n            k = k + s[i]\n    if '.' in k:\n        k = k.strip('0').rstrip('.')\n    else:\n        k = k.lstrip('0')\n    print(k or '0')", "for _ in range(int(input())):\n    n = int(input())\n    rule = []\n    ci = ''\n    pi = ''\n    for _ in range(n):\n        (c, p) = input().split()\n        ci += c\n        pi += p\n    trans = str.maketrans(ci, pi)\n    s = input()\n    s = s.translate(trans)\n    s = ''.join(s)\n    dot = s.find('.')\n    if dot != -1:\n        s = s.strip('0').rstrip('.')\n    else:\n        s = s.lstrip('0')\n    if s == '':\n        print(0)\n    else:\n        print(s)", "for _ in range(int(input())):\n    n = int(input())\n    rule = []\n    ci = ''\n    pi = ''\n    for _ in range(n):\n        (c, p) = input().split()\n        ci += c\n        pi += p\n    trans = str.maketrans(ci, pi)\n    s = input()\n    s = s.translate(trans)\n    s = ''.join(s)\n    dot = s.find('.')\n    if dot != -1:\n        s = s.strip('0').rstrip('.')\n    else:\n        s = s.lstrip('0')\n    if s == '':\n        print(0)\n    else:\n        print(s)", "a = int(input())\nfor _ in range(a):\n    table = {}\n    res = 0\n    aa = int(input())\n    for i in range(aa):\n        bb = list(input().split())\n        table[bb[0]] = bb[1]\n    cc = list(input())\n    for i in range(len(cc)):\n        if cc[i] in table:\n            cc[i] = table[cc[i]]\n        if cc[i] == '.':\n            res = 1\n    i = 0\n    while cc[i] == '0' and cc[i] != '.':\n        i += 1\n        if i == len(cc):\n            print('0', end=' ')\n            break\n    j = len(cc) - 1\n    if res == 1:\n        while cc[j] == '0':\n            j -= 1\n        if cc[j] == '.':\n            j -= 1\n    if i == j + 1 and res == 1:\n        print('0')\n        continue\n    while i <= j:\n        print(cc[i], end='')\n        i += 1\n    print('\\n', end='')", "def releze(s):\n    for i in range(len(s)):\n        if s[i] != '0':\n            break\n    s = s[i:]\n    return s\n\ndef retrze(s):\n    for i in range(len(s) - 1, -1, -1):\n        if s[i] != '0':\n            break\n    s = s[:i + 1]\n    return s\nt = int(input())\nfor a0 in range(t):\n    n = int(input())\n    a1 = []\n    a2 = []\n    for a4 in range(n):\n        t = input().strip().split(' ')\n        a1.append(t[0])\n        a2.append(t[1])\n    s = input()\n    ds = {}\n    sa = []\n    fsa = []\n    for i in range(len(s)):\n        sa.append(s[i])\n        fsa.append(' ')\n        if s[i] in ds:\n            ds[s[i]].append(i)\n        else:\n            ds[s[i]] = [i]\n    for i in range(len(a1)):\n        if a1[i] in ds:\n            for j in ds[a1[i]]:\n                fsa[j] = a2[i]\n            ds.pop(a1[i], None)\n    for i in ds:\n        for j in ds[i]:\n            fsa[j] = i\n    s = releze(''.join(fsa))\n    if '.' in s:\n        s = retrze(s)\n    if s[-1] == '.':\n        s = s[:-1]\n    if len(s) == 0:\n        print('0')\n    else:\n        print(s)", "def work():\n    n = int(input())\n    c = ''\n    p = ''\n    for i in range(n):\n        rule = input().strip().split()\n        c += rule[0]\n        p += rule[1]\n    trans = str.maketrans(c, p)\n    encrypted = input().strip()\n    encrypted = encrypted.translate(trans)\n    ans = ''\n    for i in range(len(encrypted)):\n        if encrypted[i] != '0':\n            ans = encrypted[i:]\n            break\n    has_point = False\n    for ch in ans:\n        if ch == '.':\n            has_point = True\n            break\n    if has_point:\n        end = len(ans)\n        while ans[end - 1] == '0':\n            end -= 1\n        if ans[end - 1] == '.':\n            end -= 1\n        ans = ans[:end]\n    if len(ans) == 0:\n        ans = '0'\n    print(ans)\n\ndef main():\n    cases = int(input().strip())\n    for i in range(cases):\n        work()\nmain()", "for test in range(int(input())):\n    N = int(input())\n    rules = {}\n    for i in range(N):\n        cp = input().split()\n        rules[cp[0]] = cp[1]\n    encryption = input()\n    passwd = ''\n    for i in encryption:\n        if rules.get(i):\n            passwd += rules[i]\n        else:\n            passwd += i\n    passwd = passwd.lstrip('0')\n    if passwd.find('.') != -1:\n        passwd = passwd.rstrip('0')\n    try:\n        if passwd[-1] == '.':\n            passwd = passwd[:-1]\n            if passwd == '':\n                print(0)\n            else:\n                print(passwd)\n        else:\n            print(passwd)\n    except:\n        print(0)", "import sys\nT = int(sys.stdin.readline())\nfor _ in range(T):\n    N = int(sys.stdin.readline())\n    From = ''\n    To = ''\n    for _ in range(N):\n        (Ci, Pi) = sys.stdin.readline().strip().split()\n        From += Ci\n        To += Pi\n    S = sys.stdin.readline().strip()\n    S = S.translate(str.maketrans(From, To))\n    if '.' not in S:\n        S += '.'\n    S = S.strip('0')\n    if S.endswith('.'):\n        S = S.strip('.')\n    if not S:\n        S = '0'\n    print(S)", "import sys\nssr = sys.stdin.readline\nssw = sys.stdout.write\nfor i in range(int(ssr())):\n    rules = dict()\n    for j in range(int(ssr())):\n        (old, new) = ssr().strip().split()\n        rules[old] = new\n    rules = str.maketrans(rules)\n    answer = ssr().strip().translate(rules)\n    answer = answer.lstrip('0')\n    if '.' in answer:\n        answer = answer.rstrip('0').rstrip('.')\n    ssw(answer or '0')\n    ssw('\\n')", "def removeleading(s):\n    c = 0\n    for i in range(len(s)):\n        if s[i] == '0':\n            c += 1\n        else:\n            break\n    s = s[c:]\n    return s\n\ndef removetrailing(s):\n    c = 0\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '0':\n            c += 1\n        else:\n            break\n        i -= 1\n    if c > 0:\n        s = s[:-c]\n    return s\n\ndef removepoint(s):\n    if s[len(s) - 1] == '.':\n        s = s[:-1]\n    return s\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    if n > 0:\n        asc = [' '] * 150\n        for i in range(n):\n            (a, b) = [str(i) for i in input().split()]\n            a = str(a)\n            asc[ord(a)] = b\n        inp = list(input())\n        for i in range(len(inp)):\n            if not asc[ord(inp[i])] == ' ':\n                x = asc[ord(inp[i])]\n                x = str(x)\n                inp[i] = x\n        inp = ''.join(inp)\n        if len(inp) == 1:\n            print(inp)\n        else:\n            inp = removeleading(inp)\n            if '.' in inp:\n                inp = removetrailing(inp)\n            if len(inp) > 1:\n                inp = removepoint(inp)\n            if inp == '.' or inp == '':\n                print('0')\n            else:\n                print(inp)\n        del asc\n    else:\n        inp = input()\n        if len(inp) == 1:\n            print(inp)\n        else:\n            inp = removeleading(inp)\n            if '.' in inp:\n                inp = removetrailing(inp)\n            if len(inp) > 1:\n                inp = removepoint(inp)\n            if inp == '.' or inp == '':\n                print('0')\n            else:\n                print(inp)", "t = int(input())\nfor ttt in range(t):\n    n = int(input())\n    rules = {}\n    for i in range(n):\n        q = input().split(' ')\n        a = q[0]\n        b = q[1]\n        rules[a] = b\n    s0 = input()\n    s1 = ''\n    for i in s0:\n        if i in rules.keys():\n            s1 += rules[i]\n        else:\n            s1 += i\n    if all((x == '0' or x == '.' for x in s1)):\n        print('0')\n    else:\n        czy = '.' in s1\n        p = 0\n        while s1[p] == '0':\n            p += 1\n        k = len(s1) - 1\n        while czy and s1[k] == '0':\n            k -= 1\n        if s1[k] == '.':\n            k -= 1\n        print(s1[p:k + 1])", "t = int(input())\nfor tti in range(t):\n    n = int(input())\n    X = {}\n    for i in range(n):\n        (a, b) = list(input().split(' '))\n        X[a] = b\n    w = input()\n    x = ''\n    for i in range(len(w)):\n        if w[i] in X.keys():\n            x += X[w[i]]\n        else:\n            x += w[i]\n    if len(x.split('.')) == 1:\n        ii = 0\n        while ii < len(x) and x[ii] == '0':\n            ii += 1\n        if x[ii:] != '':\n            print(x[ii:])\n        else:\n            print(0)\n    else:\n        ii = 0\n        while ii < len(x) and x[ii] == '0':\n            ii += 1\n        jj = len(x) - 1\n        while jj > 0 and x[jj] == '0':\n            jj -= 1\n        if x[jj] == '.':\n            jj -= 1\n        if x[ii:jj + 1] != '':\n            print(x[ii:jj + 1])\n        else:\n            print(0)", "def find_password():\n    password = ''\n    for char in S:\n        if char in C:\n            i = C.index(char)\n            password += P[i]\n        else:\n            password += char\n    password = password.lstrip('0')\n    if '.' in password:\n        password = password.rstrip('0')\n        password = password.rstrip('.')\n    if not password:\n        password = '0'\n    print(password)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    C = []\n    P = []\n    for _ in range(N):\n        (c, p) = input().split()\n        C.append(c)\n        P.append(p)\n    S = input()\n    find_password()", "def main():\n    length = int(input())\n    for test_case in range(length):\n        rules = str.maketrans(parse_rules(int(input())))\n        password = input().translate(rules)\n        (before, decimal, after) = password.partition('.')\n        trimmed = before.lstrip('0') + (decimal + after).rstrip('0.')\n        print(trimmed or '0')\n\ndef parse_rules(rule_count):\n    rules = dict()\n    for rule in range(rule_count):\n        (original, replacement) = input().split()\n        rules[original] = replacement\n    return rules\nmain()", "import sys\nfor t in range(int(input())):\n    m = {}\n    for i in range(int(input())):\n        (ci, pi) = input().split()\n        m[ci] = pi\n    s = input()\n    ans = ''\n    for i in range(len(s)):\n        try:\n            ans += m[s[i]]\n        except:\n            ans += s[i]\n    dots = ans.count('.')\n    if dots == 0:\n        ans = ans.lstrip('0')\n        if len(ans) == 0:\n            print('0')\n        else:\n            print(ans)\n    else:\n        ans = ans.strip('0')\n        size = len(ans)\n        if size == 1:\n            print('0')\n            continue\n        if ans[size - 1] == '.':\n            ans = ans[:size - 1]\n        print(ans)", "import sys\nfor t in range(int(input())):\n    m = {}\n    for i in range(int(input())):\n        (ci, pi) = input().split()\n        m[ci] = pi\n    s = input()\n    ans = ''\n    for i in range(len(s)):\n        try:\n            ans += m[s[i]]\n        except:\n            ans += s[i]\n    dots = ans.count('.')\n    if dots > 1:\n        exit(1)\n    if dots == 0:\n        ans = ans.lstrip('0')\n        if len(ans) == 0:\n            print('0')\n        else:\n            print(ans)\n    else:\n        ans = ans.strip('0')\n        size = len(ans)\n        if size == 1:\n            print('0')\n            continue\n        if ans[size - 1] == '.':\n            ans = ans[:size - 1]\n        print(ans)", "for t in range(int(input())):\n    m = {}\n    for i in range(int(input())):\n        (ci, pi) = input().split()\n        m[ci] = pi\n    s = input()\n    ans = ''\n    for i in range(len(s)):\n        try:\n            ans += m[s[i]]\n        except:\n            ans += s[i]\n    dots = ans.count('.')\n    if dots == 0:\n        ans = ans.lstrip('0')\n        if len(ans) == 0:\n            print('0')\n        else:\n            print(ans)\n    else:\n        ans = ans.strip('0')\n        size = len(ans)\n        if size == 1:\n            print('0')\n            continue\n        if ans[size - 1] == '.':\n            ans = ans[:size - 1]\n        print(ans)", "for __ in range(int(input())):\n    rules = dict()\n    for _ in range(int(input())):\n        (c, p) = (x for x in input().split())\n        rules[c] = p\n    orig_s = input()\n    new_s = ''\n    for i in orig_s:\n        new_s += rules.get(i, i)\n    new_s = new_s.lstrip('0')\n    if '.' in new_s:\n        new_s = new_s.rstrip('0').rstrip('.')\n    print(new_s if new_s != '' else '0')", "for __ in range(int(input())):\n    rules = dict()\n    for _ in range(int(input())):\n        (c, p) = (x for x in input().split())\n        rules[c] = p\n    orig_s = input()\n    new_s = ''\n    for i in orig_s:\n        new_s += rules.get(i, i)\n    new_s = new_s.lstrip('0')\n    if '.' in new_s:\n        new_s = new_s.rstrip('0').rstrip('.')\n    print(new_s if new_s != '' else '0')", "__author__ = 'zumzoom'\nimport sys\nt = int(sys.stdin.readline())\nfor _ in range(t):\n    n = int(sys.stdin.readline())\n    rules = dict()\n    for __ in range(n):\n        (c, x) = sys.stdin.readline().split()\n        rules[c] = x\n    s = sys.stdin.readline()[:-1]\n    news = ''\n    for c in s:\n        if c in rules.keys():\n            news += rules[c]\n        else:\n            news += c\n    news += 'p'\n    for i in range(len(news)):\n        if news[i] != '0':\n            news = news[i:]\n            break\n    news = news[:-1]\n    if '.' in news and news[-1] == '0':\n        for i in range(2, len(news) + 1):\n            if news[-i] != '0':\n                news = news[:-i + 1]\n                break\n    if len(news) > 0 and news[-1] == '.':\n        news = news[:-1]\n    if news == '':\n        news = '0'\n    print(news)"]