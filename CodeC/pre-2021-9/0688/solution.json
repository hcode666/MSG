["mod = 10 ** 9 + 7\n\ndef mult(mat1, mat2):\n    mat3 = [[0, 0], [0, 0]]\n    mat3[0][0] = (mat1[0][0] * mat2[0][0] + mat1[0][1] * mat2[1][0]) % mod\n    mat3[0][1] = (mat1[0][0] * mat2[0][1] + mat1[0][1] * mat2[1][1]) % mod\n    mat3[1][0] = (mat1[1][0] * mat2[0][0] + mat1[1][1] * mat2[1][0]) % mod\n    mat3[1][1] = (mat1[1][0] * mat2[0][1] + mat1[1][1] * mat2[1][1]) % mod\n    return mat3\n\ndef power(mat, n):\n    if n == 0:\n        a = [[1, 0], [0, 1]]\n        return a\n    if n == 1:\n        return mat\n    ans = power(mat, int(n // 2))\n    if n & 1:\n        return mult(mat, mult(ans, ans))\n    else:\n        return mult(ans, ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    mat = [[2, 2], [1, 0]]\n    f1 = 1\n    f2 = 3\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        mat = power(mat, n - 2)\n        ans = mat[0][0] * f2 + mat[0][1] * f1\n        ans = ans % 1000000007\n        print(ans)", "mod = 10 ** 9 + 7\n\ndef snek(m1, m2):\n    m3 = [[0, 0], [0, 0]]\n    m3[0][0] = (m1[0][0] * m2[0][0] + m1[0][1] * m2[1][0]) % mod\n    m3[0][1] = (m1[0][0] * m2[0][1] + m1[0][1] * m2[1][1]) % mod\n    m3[1][0] = (m1[1][0] * m2[0][0] + m1[1][1] * m2[1][0]) % mod\n    m3[1][1] = (m1[1][0] * m2[0][1] + m1[1][1] * m2[1][1]) % mod\n    return m3\n\ndef snek2(m, n):\n    if n == 0:\n        a = [[1, 0], [0, 1]]\n        return a\n    if n == 1:\n        return m\n    ans = snek2(m, int(n // 2))\n    if n & 1:\n        return snek(m, snek(ans, ans))\n    else:\n        return snek(ans, ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    m = [[2, 2], [1, 0]]\n    f1 = 1\n    f2 = 3\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        m = snek2(m, n - 2)\n        ans = m[0][0] * f2 + m[0][1] * f1\n        ans %= 1000000007\n        print(ans)", "mod = 10 ** 9 + 7\n\ndef mult(mat1, mat2):\n    mat3 = [[0, 0], [0, 0]]\n    mat3[0][0] = (mat1[0][0] * mat2[0][0] + mat1[0][1] * mat2[1][0]) % mod\n    mat3[0][1] = (mat1[0][0] * mat2[0][1] + mat1[0][1] * mat2[1][1]) % mod\n    mat3[1][0] = (mat1[1][0] * mat2[0][0] + mat1[1][1] * mat2[1][0]) % mod\n    mat3[1][1] = (mat1[1][0] * mat2[0][1] + mat1[1][1] * mat2[1][1]) % mod\n    return mat3\n\ndef power(mat, n):\n    if n == 0:\n        a = [[1, 0], [0, 1]]\n        return a\n    if n == 1:\n        return mat\n    ans = power(mat, int(n // 2))\n    if n & 1:\n        return mult(mat, mult(ans, ans))\n    else:\n        return mult(ans, ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    mat = [[2, 2], [1, 0]]\n    f1 = 1\n    f2 = 3\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        mat = power(mat, n - 2)\n        ans = mat[0][0] * f2 + mat[0][1] * f1\n        ans = ans % 1000000007\n        print(ans)", "mod = 10 ** 9 + 7\n\ndef mult(mat1, mat2):\n    mat3 = [[0, 0], [0, 0]]\n    mat3[0][0] = (mat1[0][0] * mat2[0][0] + mat1[0][1] * mat2[1][0]) % mod\n    mat3[0][1] = (mat1[0][0] * mat2[0][1] + mat1[0][1] * mat2[1][1]) % mod\n    mat3[1][0] = (mat1[1][0] * mat2[0][0] + mat1[1][1] * mat2[1][0]) % mod\n    mat3[1][1] = (mat1[1][0] * mat2[0][1] + mat1[1][1] * mat2[1][1]) % mod\n    return mat3\n\ndef power(mat, n):\n    if n == 0:\n        a = [[1, 0], [0, 1]]\n        return a\n    if n == 1:\n        return mat\n    ans = power(mat, int(n // 2))\n    if n & 1:\n        return mult(mat, mult(ans, ans))\n    else:\n        return mult(ans, ans)\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    mat = [[2, 2], [1, 0]]\n    f1 = 1\n    f2 = 3\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        mat = power(mat, n - 2)\n        ans = mat[0][0] * f2 + mat[0][1] * f1\n        ans = ans % 1000000007\n        print(ans)", "from sys import stdin, stdout\nfrom math import ceil\nimport numpy as np\nfrom numpy.linalg import matrix_power\nmod = 10 ** 9 + 7\n\ndef mul(m, l):\n    c1 = m[0][0]\n    c2 = m[0][1]\n    c3 = m[1][0]\n    c4 = m[1][1]\n    a1 = l[0][0]\n    a2 = l[0][1]\n    a3 = l[1][0]\n    a4 = l[1][1]\n    a = (c1 % mod * a1 % mod % mod + c2 % mod * a3 % mod % mod) % mod\n    b = (c1 % mod * a2 % mod % mod + c2 % mod * a4 % mod % mod) % mod\n    c = (c3 % mod * a1 % mod % mod + c4 % mod * a3 % mod % mod) % mod\n    d = (c3 % mod * a2 % mod % mod + c4 % mod * a4 % mod % mod) % mod\n    return [[a, b], [c, d]]\n\ndef fast_matrix(f, p):\n    if p == 1:\n        return f\n    z = fast_matrix(f, p // 2)\n    if p % 2 == 0:\n        return mul(z, z)\n    else:\n        return mul(mul(z, z), f)\n\ndef solve():\n    mod = 10 ** 9 + 7\n    for _ in range(int(input())):\n        f = [[2, 1], [2, 0]]\n        yo = [[1, 3]]\n        n = int(input())\n        if n > 2:\n            m = fast_matrix(f, n - 2)\n            c1 = m[0][0]\n            c3 = m[0][1]\n            c2 = m[1][0]\n            c4 = m[1][1]\n            print((3 * c1 + c2) % mod)\n        else:\n            if n == 1:\n                ans = 1\n            elif n == 2:\n                ans = 3\n            print(ans)\nsolve()", "mod = 10 ** 9 + 7\n\ndef mul(m, l):\n    c1 = m[0][0]\n    c2 = m[0][1]\n    c3 = m[1][0]\n    c4 = m[1][1]\n    a1 = l[0][0]\n    a2 = l[0][1]\n    a3 = l[1][0]\n    a4 = l[1][1]\n    a = (c1 % mod * a1 % mod % mod + c2 % mod * a3 % mod % mod) % mod\n    b = (c1 % mod * a2 % mod % mod + c2 % mod * a4 % mod % mod) % mod\n    c = (c3 % mod * a1 % mod % mod + c4 % mod * a3 % mod % mod) % mod\n    d = (c3 % mod * a2 % mod % mod + c4 % mod * a4 % mod % mod) % mod\n    return [[a, b], [c, d]]\n\ndef fast_matrix(l, p):\n    if p == 1:\n        return l\n    z = fast_matrix(l, p // 2)\n    if p % 2 == 0:\n        return mul(z, z)\n    else:\n        return mul(mul(z, z), l)\nt = int(input())\nfor i in range(t):\n    l = [[2, 1], [2, 0]]\n    yo = [[1, 3]]\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        z = fast_matrix(l, n - 2)\n        c1 = z[0][0]\n        c3 = z[0][1]\n        c2 = z[1][0]\n        c4 = z[1][1]\n        print((3 * c1 + c2) % mod)", "from sys import stdin, stdout\nfrom math import ceil\nimport numpy as np\nfrom numpy.linalg import matrix_power\nmod = 10 ** 9 + 7\n\ndef mul(m, l):\n    c1 = m[0][0]\n    c2 = m[0][1]\n    c3 = m[1][0]\n    c4 = m[1][1]\n    a1 = l[0][0]\n    a2 = l[0][1]\n    a3 = l[1][0]\n    a4 = l[1][1]\n    a = (c1 % mod * a1 % mod % mod + c2 % mod * a3 % mod % mod) % mod\n    b = (c1 % mod * a2 % mod % mod + c2 % mod * a4 % mod % mod) % mod\n    c = (c3 % mod * a1 % mod % mod + c4 % mod * a3 % mod % mod) % mod\n    d = (c3 % mod * a2 % mod % mod + c4 % mod * a4 % mod % mod) % mod\n    return [[a, b], [c, d]]\n\ndef fast_matrix(f, p):\n    if p == 1:\n        return f\n    z = fast_matrix(f, p // 2)\n    if p % 2 == 0:\n        return mul(z, z)\n    else:\n        return mul(mul(z, z), f)\n\ndef solve():\n    mod = 10 ** 9 + 7\n    for _ in range(int(input())):\n        f = [[2, 1], [2, 0]]\n        yo = [[1, 3]]\n        n = int(input())\n        if n > 2:\n            m = fast_matrix(f, n - 2)\n            c1 = m[0][0]\n            c3 = m[0][1]\n            c2 = m[1][0]\n            c4 = m[1][1]\n            print((3 * c1 + c2) % mod)\n        else:\n            if n == 1:\n                ans = 1\n            elif n == 2:\n                ans = 3\n            print(ans)\nsolve()", "mod = 10 ** 9 + 7\n\ndef mul(m, l):\n    c1 = m[0][0]\n    c2 = m[0][1]\n    c3 = m[1][0]\n    c4 = m[1][1]\n    a1 = l[0][0]\n    a2 = l[0][1]\n    a3 = l[1][0]\n    a4 = l[1][1]\n    a = (c1 % mod * a1 % mod % mod + c2 % mod * a3 % mod % mod) % mod\n    b = (c1 % mod * a2 % mod % mod + c2 % mod * a4 % mod % mod) % mod\n    c = (c3 % mod * a1 % mod % mod + c4 % mod * a3 % mod % mod) % mod\n    d = (c3 % mod * a2 % mod % mod + c4 % mod * a4 % mod % mod) % mod\n    return [[a, b], [c, d]]\n\ndef fast_matrix(l, p):\n    if p == 1:\n        return l\n    z = fast_matrix(l, p // 2)\n    if p % 2 == 0:\n        return mul(z, z)\n    else:\n        return mul(mul(z, z), l)\nt = int(input())\nfor i in range(t):\n    l = [[2, 1], [2, 0]]\n    yo = [[1, 3]]\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        z = fast_matrix(l, n - 2)\n        c1 = z[0][0]\n        c3 = z[0][1]\n        c2 = z[1][0]\n        c4 = z[1][1]\n        print((3 * c1 + c2) % mod)", "mod = 10 ** 9 + 7\n\ndef mul(m, l):\n    c1 = m[0][0]\n    c2 = m[0][1]\n    c3 = m[1][0]\n    c4 = m[1][1]\n    a1 = l[0][0]\n    a2 = l[0][1]\n    a3 = l[1][0]\n    a4 = l[1][1]\n    a = (c1 % mod * a1 % mod % mod + c2 % mod * a3 % mod % mod) % mod\n    b = (c1 % mod * a2 % mod % mod + c2 % mod * a4 % mod % mod) % mod\n    c = (c3 % mod * a1 % mod % mod + c4 % mod * a3 % mod % mod) % mod\n    d = (c3 % mod * a2 % mod % mod + c4 % mod * a4 % mod % mod) % mod\n    return [[a, b], [c, d]]\n\ndef fast_matrix(l, p):\n    if p == 1:\n        return l\n    z = fast_matrix(l, p // 2)\n    if p % 2 == 0:\n        return mul(z, z)\n    else:\n        return mul(mul(z, z), l)\nt = int(input())\nfor i in range(t):\n    l = [[2, 1], [2, 0]]\n    yo = [[1, 3]]\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(3)\n    else:\n        z = fast_matrix(l, n - 2)\n        c1 = z[0][0]\n        c3 = z[0][1]\n        c2 = z[1][0]\n        c4 = z[1][1]\n        print((3 * c1 + c2) % mod)"]