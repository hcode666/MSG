["mod = 1000000009\nimport math\nk = int(input())\nn = 2 ** k\nt1 = n // 2\nf = math.factorial(n / 2 - 1) % mod\nd = f ** 2 * t1 * n % mod\nt2 = 1\nfor i in range(1, n + 1):\n    if i < n / 2:\n        print('0')\n    else:\n        print(d)\n        d = d * pow(t2, mod - 2, mod) % mod * t1 % mod\n        t1 += 1\n        t2 += 1", "mod = 1000000009\nimport math\nk = int(input())\nn = 2 ** k\nt1 = n // 2\nf = math.factorial(n / 2 - 1) % mod\nd = f ** 2 * t1 * n % mod\nt2 = 1\nfor i in range(1, n + 1):\n    if i < n / 2:\n        print('0')\n    else:\n        print(d)\n        d = d * pow(t2, mod - 2, mod) % mod * t1 % mod\n        t1 += 1\n        t2 += 1", "mod = 1000000009\nimport math\nk = int(input())\nn = 2 ** k\nt1 = n // 2\nf = math.factorial(n / 2 - 1) % mod\nd = f ** 2 * t1 * n % mod\nt2 = 1\nfor i in range(1, n + 1):\n    if i < n / 2:\n        print('0')\n    else:\n        print(d)\n        d = d * pow(t2, mod - 2, mod) % mod * t1 % mod\n        t1 += 1\n        t2 += 1", "mod = 1000000009\nimport math\nK = int(input())\nN = 2 ** K\ntemp1 = N // 2\nfact = math.factorial(N / 2 - 1) % mod\ndiv = fact ** 2 * temp1 * N % mod\ntemp2 = 1\nfor i in range(1, N + 1):\n    if i < N / 2:\n        print('0')\n    else:\n        print(div)\n        div = div * pow(temp2, mod - 2, mod) % mod * temp1 % mod\n        temp1 += 1\n        temp2 += 1", "mod = 1000000009\nimport math\nK = int(input())\nN = 2 ** K\ntemp1 = N // 2\nfact = math.factorial(N / 2 - 1) % mod\ndiv = fact ** 2 * temp1 * N % mod\ntemp2 = 1\nfor i in range(1, N + 1):\n    if i < N / 2:\n        print('0')\n    else:\n        print(div)\n        div = div * pow(temp2, mod - 2, mod) % mod * temp1 % mod\n        temp1 += 1\n        temp2 += 1", "mod = 1000000009\nimport math\nK = int(input())\nN = 2 ** K\ntemp1 = N // 2\nfact = math.factorial(N / 2 - 1) % mod\ndiv = fact ** 2 * temp1 * N % mod\ntemp2 = 1\nfor i in range(1, N + 1):\n    if i < N / 2:\n        print('0')\n    else:\n        print(div)\n        div = div * pow(temp2, mod - 2, mod) % mod * temp1 % mod\n        temp1 += 1\n        temp2 += 1", "MOD = 1000000009\nfac = [0] * 1100000\nfac[0] = 1\n\ndef fact(n):\n    global fac\n    if fac[n] != 0:\n        return fac[n]\n    fac[n] = n * fact(n - 1) % MOD\n    return fac[n]\n\ndef pow_2(k):\n    res = 1\n    while k > 0:\n        res <<= 1\n        k -= 1\n    return res\n\ndef comb(n, r):\n    res = fact(n) * pow(fact(r) * fact(n - r) % MOD, MOD - 2, MOD) % MOD\n    return res\n\ndef range_prod(lo, hi):\n    if lo + 1 < hi:\n        mid = (hi % MOD + lo % MOD) % MOD // 2\n        return range_prod(lo % MOD, mid % MOD) % MOD * range_prod(mid + 1, hi) % MOD\n    if lo == hi:\n        return lo % MOD\n    return lo % MOD * (hi % MOD) % MOD\n\ndef tree_factorial(n):\n    if n < 2:\n        return 1\n    if fac[n] != 0:\n        return fac[n]\n    fac[n] = range_prod(1, n)\n    return fac[n]\n\ndef mod_div(a, b, p):\n    return a % p * (pow(b, p - 2, p) % p) % p\nk = int(input())\nnr = pow_2(k - 1) - 1\ntotal = pow_2(k)\nper = total // 2\nfor i in range(nr):\n    print(0)\ncon_res = 2 * (tree_factorial(per) * tree_factorial(per)) % MOD % MOD\nmul = 1\ncount = 1\nfor i in range(nr, total):\n    fin_res = mul * con_res % MOD\n    mul = mul % MOD * ((i + 1) % MOD) % MOD\n    mul = mod_div(mul, count, MOD)\n    count += 1\n    print(fin_res)", "fact = {}\nfact[0] = 1\nmod = 1000000009\nm = {}\nk = int(input())\nt = 2 ** k\ni = t // 2\nj = t - 1\nm[t] = 1\nwhile i > 0:\n    m[j] = m[j + 1] * i % mod\n    j -= 1\n    i -= 1\ntfact = 1\nf = 1\nfor f in range(1, t // 2):\n    tfact = tfact * f % mod\nfact[f] = tfact\nfor g in range(f + 1, t):\n    tfact = tfact * g % mod\n    fact[g] = tfact\nfor i in range(1, t // 2):\n    print(0)\nconst = 2 * (t // 2) % mod\nj = t // 2\nfor i in range(1, t // 2 + 2):\n    print(const * m[j] * fact[j - 1] % mod)\n    j += 1", "import sys\nMOD = 1000000009\nK = int(sys.stdin.readline())\nN = 1 << K\nM = 1 << K - 1\nfactorial = [1]\nfor n in range(1, N + 1):\n    factorial.append(n * factorial[-1] % MOD)\nfor _ in range(1, M):\n    print(0)\nbase = 2 * M * factorial[M] % MOD\nfor i in range(M, N):\n    c = factorial[i - 1] * pow(factorial[i - M], MOD - 2, MOD)\n    print(c * base % MOD)\nprint(factorial[N])", "from itertools import *\nfrom math import factorial\n\ndef bruteforce():\n    k = 3\n    n = 2 ** k\n    freq = dict()\n    for i in range(1, n + 1):\n        freq[i] = 0\n    for p in permutations(range(1, n + 1)):\n        p = list(p)\n        original = [x for x in p]\n        while len(p) != 2:\n            temp = []\n            for i in range(0, len(p), 2):\n                temp.append(max(p[i], p[i + 1]))\n            p = temp\n        freq[p[0]] = freq[p[0]] + 1\n        freq[p[1]] = freq[p[1]] + 1\n    for i in range(1, n + 1):\n        print(i, freq[i])\nMOD = 10 ** 9 + 9\n\ndef binomial(n, k):\n    if n < 0 or k < 0 or k > n:\n        return 0\n    return factorial(n) // factorial(k) // factorial(n - k)\n\ndef main():\n    k = int(input())\n    n = 2 ** k\n    bucket_size = n // 2\n    fact = 1\n    for i in range(1, bucket_size + 1):\n        fact = fact * i % MOD\n    C = 2 * fact ** 2 % MOD\n    for i in range(1, bucket_size):\n        print(0)\n    binomial_term = 1\n    num_factor = bucket_size\n    den_factor = 1\n    for i in range(bucket_size, n + 1):\n        print(binomial_term * C % MOD)\n        binomial_term *= num_factor\n        binomial_term *= pow(den_factor, MOD - 2, MOD)\n        binomial_term %= MOD\n        num_factor += 1\n        den_factor += 1\nmain()", "(n, p) = (int(input()), 10 ** 9 + 9)\nm = 1 << n - 1\ntmp = 1\nfor i in range(1, m + 1):\n    tmp = tmp * i % p\ntmp = tmp ** 2 * 2 % p\nans = '0\\n' * (m - 1) + str(tmp) + '\\n'\n(inv, t) = ([1] * (m + 3), 1)\nfor i in range(m, 1 << n):\n    tmp = tmp * i % p * inv[t] % p\n    ans += str(tmp) + '\\n'\n    t += 1\n    inv[t] = -(p // t) * inv[p % t] % p\nprint(ans, end='')", "import sys\n\ndef C(a, b):\n    x = F[a]\n    y = pow(F[b] * F[a - b], 10 ** 9 + 7, 10 ** 9 + 9)\n    return x * y % (10 ** 9 + 9)\nk = int(input())\nn = 2 ** k\nMOD = 10 ** 9 + 9\nF = [0] * 1000001\nF[0] = 1\nF[1] = 1\nfor i in range(2, 1000001):\n    F[i] = F[i - 1] * i\n    F[i] %= MOD\nAns = ''\nfor i in range(1, n + 1):\n    if i < n // 2:\n        Ans += '0\\n'\n        continue\n    ans = C(i - 1, n // 2 - 1) * 2\n    ans %= MOD\n    ans *= F[n // 2]\n    ans %= MOD\n    ans *= F[n // 2]\n    ans %= MOD\n    Ans += str(ans) + '\\n'\nsys.stdout.write(Ans)"]