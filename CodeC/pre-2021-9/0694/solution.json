["for test in range(int(input())):\n    n = int(input())\n    nlist = input().split()\n    d = {}\n    for i in nlist:\n        try:\n            d[i[1:]].add(i[0])\n        except KeyError:\n            d[i[1:]] = set()\n            d[i[1:]].add(i[0])\n    tlist = list(d.keys())\n    n1 = len(tlist)\n    ans = 0\n    for i in range(n1):\n        for j in range(i + 1, n1):\n            total = d[tlist[i]].union(d[tlist[j]])\n            ans += len(total.difference(d[tlist[j]])) * len(total.difference(d[tlist[i]]))\n    print(ans * 2)", "for test in range(int(input())):\n    n = int(input())\n    nlist = input().split()\n    d = {}\n    for i in nlist:\n        try:\n            d[i[1:]].add(i[0])\n        except KeyError:\n            d[i[1:]] = set()\n            d[i[1:]].add(i[0])\n    tlist = list(d.keys())\n    n1 = len(tlist)\n    ans = 0\n    for i in range(n1):\n        for j in range(i + 1, n1):\n            total = d[tlist[i]].union(d[tlist[j]])\n            ans += len(total.difference(d[tlist[j]])) * len(total.difference(d[tlist[i]]))\n    print(ans * 2)", "for test in range(int(input())):\n    n = int(input())\n    nlist = input().split()\n    d = {}\n    for i in nlist:\n        try:\n            d[i[1:]].add(i[0])\n        except KeyError:\n            d[i[1:]] = set()\n            d[i[1:]].add(i[0])\n    tlist = list(d.keys())\n    n1 = len(tlist)\n    ans = 0\n    for i in range(n1):\n        for j in range(i + 1, n1):\n            total = d[tlist[i]].union(d[tlist[j]])\n            ans += len(total.difference(d[tlist[j]])) * len(total.difference(d[tlist[i]]))\n    print(ans * 2)", "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    (d, c) = ({}, 0)\n    for i in s:\n        b = i[1:]\n        if b not in d:\n            d[b] = [i[0]]\n        else:\n            d[b].append(i[0])\n    lst = list(d.keys())\n    for i in range(len(d)):\n        for j in range(i + 1, len(d)):\n            l = len(set(d[lst[i]] + d[lst[j]]))\n            c += (l - len(d[lst[i]])) * (l - len(d[lst[j]]))\n    print(2 * c)", "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    (d, c) = ({}, 0)\n    for i in s:\n        b = i[1:]\n        if b not in d:\n            d[b] = [i[0]]\n        else:\n            d[b].append(i[0])\n    lst = list(d.keys())\n    for i in range(len(d)):\n        for j in range(i + 1, len(d)):\n            l = len(set(d[lst[i]] + d[lst[j]]))\n            c += (l - len(d[lst[i]])) * (l - len(d[lst[j]]))\n    print(2 * c)", "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    (d, c) = ({}, 0)\n    for i in s:\n        b = i[1:]\n        if b not in d:\n            d[b] = [i[0]]\n        else:\n            d[b].append(i[0])\n    lst = list(d.keys())\n    for i in range(len(d)):\n        for j in range(i + 1, len(d)):\n            l = len(set(d[lst[i]] + d[lst[j]]))\n            c += (l - len(d[lst[i]])) * (l - len(d[lst[j]]))\n    print(2 * c)", "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    (d, c) = ({}, 0)\n    for i in s:\n        b = i[1:]\n        if b not in d:\n            d[b] = [i[0]]\n        else:\n            d[b].append(i[0])\n    lst = list(d.keys())\n    for i in range(len(d)):\n        for j in range(i + 1, len(d)):\n            l = len(set(d[lst[i]] + d[lst[j]]))\n            c += (l - len(d[lst[i]])) * (l - len(d[lst[j]]))\n    print(2 * c)", "for z in range(int(input())):\n    n = int(input())\n    s = [x for x in input().split()]\n    d = [set() for i in range(26)]\n    k = set()\n    for x in s:\n        k.add(ord(x[0]) - 97)\n        d[ord(x[0]) - 97].add(x[1:])\n    c = 0\n    k = list(k)\n    for i in range(len(k)):\n        for j in range(i + 1, len(k)):\n            l = len(d[k[i]].intersection(d[k[j]]))\n            c += (len(d[k[i]]) - l) * (len(d[k[j]]) - l)\n    print(2 * c)", "for _ in range(int(input())):\n    n = int(input())\n    s = input().split()\n    (d, c) = ({}, 0)\n    for i in s:\n        b = i[1:]\n        if b not in d:\n            d[b] = [i[0]]\n        else:\n            d[b].append(i[0])\n    lst = list(d.keys())\n    for i in range(len(d)):\n        for j in range(i + 1, len(d)):\n            l = len(set(d[lst[i]] + d[lst[j]]))\n            c += (l - len(d[lst[i]])) * (l - len(d[lst[j]]))\n    print(2 * c)", "def snak(c1, c2):\n    s = len(set(c1 + c2))\n    return s\n\ndef snek(f):\n    d = {}\n    for i in f:\n        r = i[1:]\n        if r in d:\n            d[r].append(i[0])\n        else:\n            d[r] = [i[0]]\n    return d\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    f = input().split()\n    d1 = snek(f)\n    d2 = list(d1.keys())\n    s = 0\n    for j in range(len(d1)):\n        for k in range(j + 1, len(d1)):\n            a = snak(d1[d2[j]], d1[d2[k]])\n            s += (a - len(d1[d2[j]])) * (a - len(d1[d2[k]]))\n    print(2 * s)", "def snak(c1, c2):\n    s = len(set(c1 + c2))\n    return s\n\ndef snek(f):\n    d = {}\n    for i in f:\n        r = i[1:]\n        if r in d:\n            d[r].append(i[0])\n        else:\n            d[r] = [i[0]]\n    return d\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    f = input().split()\n    d1 = snek(f)\n    d2 = list(d1.keys())\n    s = 0\n    for j in range(len(d1)):\n        for k in range(j + 1, len(d1)):\n            a = snak(d1[d2[j]], d1[d2[k]])\n            s += (a - len(d1[d2[j]])) * (a - len(d1[d2[k]]))\n    print(2 * s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    str1 = s.split()\n    code = {}\n    for w in str1:\n        key = w[1:]\n        val = w[0]\n        if key in code:\n            code[key].append(val)\n        else:\n            code[key] = list(val)\n    ends = list(code.keys())\n    c = 0\n    for i in range(len(code)):\n        for j in range(i + 1, len(code)):\n            t = len(set(code[ends[i]] + code[ends[j]]))\n            c += (t - len(code[ends[i]])) * (t - len(code[ends[j]]))\n    print(2 * c)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    str1 = s.split()\n    code = {}\n    for w in str1:\n        key = w[1:]\n        val = w[0]\n        if key in code:\n            code[key].append(val)\n        else:\n            code[key] = list(val)\n    ends = list(code.keys())\n    c = 0\n    for i in range(len(code)):\n        for j in range(i + 1, len(code)):\n            t = len(set(code[ends[i]] + code[ends[j]]))\n            c += (t - len(code[ends[i]])) * (t - len(code[ends[j]]))\n    print(2 * c)", "def snak(c1, c2):\n    s = len(set(c1 + c2))\n    return s\n\ndef snek(f):\n    d = {}\n    for i in f:\n        r = i[1:]\n        if r in d:\n            d[r].append(i[0])\n        else:\n            d[r] = [i[0]]\n    return d\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    f = input().split()\n    d1 = snek(f)\n    d2 = list(d1.keys())\n    s = 0\n    for j in range(len(d1)):\n        for k in range(j + 1, len(d1)):\n            a = snak(d1[d2[j]], d1[d2[k]])\n            s += (a - len(d1[d2[j]])) * (a - len(d1[d2[k]]))\n    print(2 * s)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    s = input()\n    str1 = s.split()\n    code = {}\n    for w in str1:\n        key = w[1:]\n        val = w[0]\n        if key in code:\n            code[key].append(val)\n        else:\n            code[key] = list(val)\n    ends = list(code.keys())\n    c = 0\n    for i in range(len(code)):\n        for j in range(i + 1, len(code)):\n            t = len(set(code[ends[i]] + code[ends[j]]))\n            c += (t - len(code[ends[i]])) * (t - len(code[ends[j]]))\n    print(2 * c)", "def uniq(l1, l2):\n    s = len(set(l1 + l2))\n    return s\n\ndef create(funny):\n    dicto = {}\n    for i in funny:\n        rest = i[1:]\n        if rest in dicto:\n            dicto[rest].append(i[0])\n        else:\n            dicto[rest] = [i[0]]\n    return dicto\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    funny = input().split()\n    dic = create(funny)\n    dic1 = list(dic.keys())\n    s = 0\n    for i in range(len(dic)):\n        for j in range(i + 1, len(dic)):\n            temp = uniq(dic[dic1[i]], dic[dic1[j]])\n            s += (temp - len(dic[dic1[i]])) * (temp - len(dic[dic1[j]]))\n    print(2 * s)", "import sys\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\niip = lambda : int(input_())\nip = lambda : input_()\npri = lambda x: print(x)\nfor _ in range(iip()):\n    n = iip()\n    a = ip().split()\n    total = 0\n    locate = {}\n    for i in range(n):\n        locate[a[i]] = True\n    cha = [[] for i in range(26)]\n    for i in range(n):\n        cha[ord(a[i][0]) - 97].append(a[i][1:])\n    for i in range(25):\n        for j in range(i + 1, 26):\n            if len(cha[i]) > 0 and len(cha[j]) > 0:\n                for k in range(len(cha[i])):\n                    x = chr(97 + j) + cha[i][k]\n                    if locate.get(x):\n                        continue\n                    for l in range(len(cha[j])):\n                        y = chr(97 + i) + cha[j][l]\n                        if locate.get(y):\n                            pass\n                        else:\n                            total += 1\n    pri(total * 2)", "import sys\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\niip = lambda : int(input_())\nip = lambda : input_()\npri = lambda x: print(x)\nfor _ in range(iip()):\n    n = iip()\n    a = ip().split()\n    total = 0\n    locate = {}\n    for i in range(n):\n        locate[a[i]] = True\n    cha = [[] for i in range(26)]\n    for i in range(n):\n        cha[ord(a[i][0]) - 97].append(a[i][1:])\n    for i in range(25):\n        for j in range(i + 1, 26):\n            if len(cha[i]) > 0 and len(cha[j]) > 0:\n                for k in range(len(cha[i])):\n                    x = chr(97 + j) + cha[i][k]\n                    if locate.get(x):\n                        continue\n                    for l in range(len(cha[j])):\n                        y = chr(97 + i) + cha[j][l]\n                        if locate.get(y):\n                            pass\n                        else:\n                            total += 1\n    pri(total * 2)", "import sys\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\niip = lambda : int(input_())\nip = lambda : input_()\npri = lambda x: print(x)\nfor _ in range(iip()):\n    n = iip()\n    a = ip().split()\n    total = 0\n    locate = {}\n    for i in range(n):\n        locate[a[i]] = True\n    cha = [[] for i in range(26)]\n    for i in range(n):\n        cha[ord(a[i][0]) - 97].append(a[i][1:])\n    for i in range(25):\n        for j in range(i + 1, 26):\n            if len(cha[i]) > 0 and len(cha[j]) > 0:\n                for k in range(len(cha[i])):\n                    x = chr(97 + j) + cha[i][k]\n                    if locate.get(x):\n                        continue\n                    for l in range(len(cha[j])):\n                        y = chr(97 + i) + cha[j][l]\n                        if locate.get(y):\n                            pass\n                        else:\n                            total += 1\n    pri(total * 2)", "def uniq(l1, l2):\n    s = len(set(l1 + l2))\n    return s\n\ndef create(funny):\n    dicto = {}\n    for i in funny:\n        rest = i[1:]\n        if rest in dicto:\n            dicto[rest].append(i[0])\n        else:\n            dicto[rest] = [i[0]]\n    return dicto\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    funny = input().split()\n    dic = create(funny)\n    dic1 = list(dic.keys())\n    s = 0\n    for i in range(len(dic)):\n        for j in range(i + 1, len(dic)):\n            temp = uniq(dic[dic1[i]], dic[dic1[j]])\n            s += (temp - len(dic[dic1[i]])) * (temp - len(dic[dic1[j]]))\n    print(2 * s)", "import sys\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\niip = lambda : int(input_())\nip = lambda : input_()\npri = lambda x: print(x)\nfor _ in range(iip()):\n    n = iip()\n    a = ip().split()\n    total = 0\n    locate = {}\n    for i in range(n):\n        locate[a[i]] = True\n    cha = [[] for i in range(26)]\n    for i in range(n):\n        cha[ord(a[i][0]) - 97].append(a[i][1:])\n    for i in range(25):\n        for j in range(i + 1, 26):\n            if len(cha[i]) > 0 and len(cha[j]) > 0:\n                for k in range(len(cha[i])):\n                    x = chr(97 + j) + cha[i][k]\n                    if locate.get(x):\n                        continue\n                    for l in range(len(cha[j])):\n                        y = chr(97 + i) + cha[j][l]\n                        if locate.get(y):\n                            pass\n                        else:\n                            total += 1\n    pri(total * 2)", "import sys\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\niip = lambda : int(input_())\nip = lambda : input_()\npri = lambda x: print(x)\nfor _ in range(iip()):\n    n = iip()\n    a = ip().split()\n    total = 0\n    locate = {}\n    for i in range(n):\n        locate[a[i]] = True\n    cha = [[] for i in range(26)]\n    for i in range(n):\n        cha[ord(a[i][0]) - 97].append(a[i][1:])\n    for i in range(25):\n        for j in range(i + 1, 26):\n            if len(cha[i]) > 0 and len(cha[j]) > 0:\n                for k in range(len(cha[i])):\n                    x = chr(97 + j) + cha[i][k]\n                    if locate.get(x):\n                        continue\n                    for l in range(len(cha[j])):\n                        y = chr(97 + i) + cha[j][l]\n                        if locate.get(y):\n                            pass\n                        else:\n                            total += 1\n    pri(total * 2)", "import sys\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\niip = lambda : int(input_())\nip = lambda : input_()\npri = lambda x: print(x)\nfor _ in range(iip()):\n    n = iip()\n    a = ip().split()\n    total = 0\n    locate = {}\n    for i in range(n):\n        locate[a[i]] = True\n    cha = [[] for i in range(26)]\n    for i in range(n):\n        cha[ord(a[i][0]) - 97].append(a[i][1:])\n    for i in range(25):\n        for j in range(i + 1, 26):\n            if len(cha[i]) > 0 and len(cha[j]) > 0:\n                for k in range(len(cha[i])):\n                    x = chr(97 + j) + cha[i][k]\n                    if locate.get(x):\n                        continue\n                    for l in range(len(cha[j])):\n                        y = chr(97 + i) + cha[j][l]\n                        if locate.get(y):\n                            pass\n                        else:\n                            total += 1\n    pri(total * 2)", "import sys\ninput_ = lambda : sys.stdin.readline().strip('\\r\\n')\niip = lambda : int(input_())\nip = lambda : input_()\npri = lambda x: print(x)\nfor _ in range(iip()):\n    n = iip()\n    a = ip().split()\n    total = 0\n    locate = {}\n    for i in range(n):\n        locate[a[i]] = True\n    cha = [[] for i in range(26)]\n    for i in range(n):\n        cha[ord(a[i][0]) - 97].append(a[i][1:])\n    for i in range(25):\n        for j in range(i + 1, 26):\n            if len(cha[i]) > 0 and len(cha[j]) > 0:\n                for k in range(len(cha[i])):\n                    x = chr(97 + j) + cha[i][k]\n                    if locate.get(x):\n                        continue\n                    for l in range(len(cha[j])):\n                        y = chr(97 + i) + cha[j][l]\n                        if locate.get(y):\n                            pass\n                        else:\n                            total += 1\n    pri(total * 2)", "def uniq(l1, l2):\n    s = len(set(l1 + l2))\n    return s\n\ndef create(funny):\n    dicto = {}\n    for i in funny:\n        rest = i[1:]\n        if rest in dicto:\n            dicto[rest].append(i[0])\n        else:\n            dicto[rest] = [i[0]]\n    return dicto\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    funny = input().split()\n    dic = create(funny)\n    dic1 = list(dic.keys())\n    s = 0\n    for i in range(len(dic)):\n        for j in range(i + 1, len(dic)):\n            temp = uniq(dic[dic1[i]], dic[dic1[j]])\n            s += (temp - len(dic[dic1[i]])) * (temp - len(dic[dic1[j]]))\n    print(2 * s)", "def same(x1, x2):\n    arr = set.intersection(set(x1), set(x2))\n    ans = len(list(arr))\n    return ans\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    s = input().split()\n    dic = {}\n    for j in s:\n        rest = j[1:]\n        if rest in dic:\n            dic[rest].append(j[0])\n        else:\n            dic[rest] = [j[0]]\n    res = 0\n    dic1 = list(dic.keys())\n    for j in range(len(dic)):\n        for k in range(j + 1, len(dic)):\n            tmp = same(dic[dic1[j]], dic[dic1[k]])\n            res += (len(dic[dic1[j]]) - tmp) * (len(dic[dic1[k]]) - tmp)\n    print(res * 2)", "def same(x1, x2):\n    arr = set.intersection(set(x1), set(x2))\n    ans = len(list(arr))\n    return ans\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    s = input().split()\n    dic = {}\n    for j in s:\n        rest = j[1:]\n        if rest in dic:\n            dic[rest].append(j[0])\n        else:\n            dic[rest] = [j[0]]\n    res = 0\n    dic1 = list(dic.keys())\n    for j in range(len(dic)):\n        for k in range(j + 1, len(dic)):\n            tmp = same(dic[dic1[j]], dic[dic1[k]])\n            res += (len(dic[dic1[j]]) - tmp) * (len(dic[dic1[k]]) - tmp)\n    print(res * 2)", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    w = input().split()\n    k = set(w)\n    letters = []\n    d = {}\n    for word in w:\n        letters.append(word[0])\n    for letter in letters:\n        d[letter] = []\n    for word in w:\n        d[word[0]].append(word[1:])\n    letters = list(set(letters))\n    ans = 0\n    for word in w:\n        for letter in letters:\n            if letter + word[1:] not in k:\n                for suff in d[letter]:\n                    if word[0] + suff not in k:\n                        ans += 1\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    array = set(list(map(str, input().split())))\n    (pre, precnt) = ({}, {})\n    for i in array:\n        try:\n            precnt[i[0]] += 1\n            pre[i[0]].add(i[1:])\n        except KeyError:\n            precnt[i[0]] = 1\n            pre[i[0]] = {i[1:]}\n    answer = 0\n    for i in pre:\n        for j in pre:\n            c = len(pre[i].intersection(pre[j]))\n            answer += (precnt[i] - c) * (precnt[j] - c)\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    array = set(list(map(str, input().split())))\n    (suf, sufcnt) = ({}, {})\n    for i in array:\n        try:\n            sufcnt[i[1:]] += 1\n            suf[i[1:]].add(i[0])\n        except KeyError:\n            sufcnt[i[1:]] = 1\n            suf[i[1:]] = {i[0]}\n    answer = 0\n    for i in suf:\n        for j in suf:\n            c = len(suf[i].intersection(suf[j]))\n            answer += (sufcnt[i] - c) * (sufcnt[j] - c)\n    print(answer)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(str, input().split()))\n    k = dict.fromkeys(l, 1)\n    k1 = {}\n    k2 = {}\n    for i in l:\n        try:\n            k1[i[1:]] += 1\n            k2[i[1:]].add(i[0])\n        except KeyError:\n            k1[i[1:]] = 1\n            k2[i[1:]] = {i[0]}\n    ans = 0\n    for i in k2:\n        for j in k2:\n            c = len(k2[i].intersection(k2[j]))\n            ans += (k1[i] - c) * (k1[j] - c)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(str, input().split()))\n    k = dict.fromkeys(l, 1)\n    k1 = {}\n    k2 = {}\n    for i in l:\n        try:\n            k1[i[1:]] += 1\n            k2[i[1:]].add(i[0])\n        except KeyError:\n            k1[i[1:]] = 1\n            k2[i[1:]] = {i[0]}\n    ans = 0\n    for i in k2:\n        for j in k2:\n            c = len(k2[i].intersection(k2[j]))\n            c1 = len(k2[j].intersection(k2[i]))\n            ans += (k1[i] - c) * (k1[j] - c1)\n    print(ans)", "def com(a, b):\n    return len(set(a + b))\nfor _ in range(int(input())):\n    n = int(input())\n    a = input().split()\n    b = {}\n    for i in a:\n        x = i[1:]\n        if x in b:\n            b[x].append(i[0])\n        else:\n            b[x] = [i[0]]\n    c = list(b.keys())\n    ans = 0\n    for i in range(len(c)):\n        for j in range(i + 1, len(c)):\n            temp = com(b[c[i]], b[c[j]])\n            ans += (temp - len(b[c[i]])) * (temp - len(b[c[j]]))\n    print(ans * 2)", "def com(a, b):\n    return len(set(a + b))\nfor _ in range(int(input())):\n    n = int(input())\n    a = input().split()\n    b = {}\n    for i in a:\n        x = i[1:]\n        if x in b:\n            b[x].append(i[0])\n        else:\n            b[x] = [i[0]]\n    c = list(b.keys())\n    ans = 0\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            temp = com(b[c[i]], b[c[j]])\n            ans += (temp - len(b[c[i]])) * (temp - len(b[c[j]]))\n    print(ans * 2)", "t = int(input())\nwhile t:\n    a = []\n    names = []\n    n = int(input())\n    arr = list(input().split(' '))\n    mp = {}\n    cnt = 0\n    for i in arr:\n        if i[1:] in mp:\n            mp[i[1:]][ord(i[0:1]) - 97] = 1\n        else:\n            s = [0] * 26\n            s[ord(i[0:1]) - 97] = 1\n            mp[i[1:]] = s\n    key = mp.keys()\n    val = [i for i in mp.values()]\n    for i in range(len(mp) - 1):\n        for j in range(i + 1, len(mp)):\n            b = []\n            for l in range(len(val[i])):\n                if val[i][l] and val[j][l] == 0:\n                    for m in range(len(val[j])):\n                        if val[j][m] and val[i][m] == 0:\n                            b.append(chr(l + 97))\n                            b.append(chr(m + 97))\n            a.extend(b)\n    print(len(a))\n    t -= 1", "t = int(input())\nwhile t:\n    a = []\n    names = []\n    n = int(input())\n    arr = list(input().split(' '))\n    mp = {}\n    cnt = 0\n    for i in arr:\n        if i[1:] in mp:\n            mp[i[1:]][ord(i[0:1]) - 97] = 1\n        else:\n            s = [0] * 26\n            s[ord(i[0:1]) - 97] = 1\n            mp[i[1:]] = s\n    key = mp.keys()\n    val = [i for i in mp.values()]\n    for i in range(len(mp) - 1):\n        for j in range(i + 1, len(mp)):\n            b = []\n            for l in range(len(val[i])):\n                if val[i][l] and val[j][l] == 0:\n                    for m in range(len(val[j])):\n                        if val[j][m] and val[i][m] == 0:\n                            b.append(chr(l + 97))\n                            b.append(chr(m + 97))\n            a.extend(b)\n    print(len(a))\n    t -= 1", "def distinct(l1, l2):\n    s = len(set(l1 + l2))\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    l = input().split()\n    body = {}\n    for i in l:\n        p = i[1:]\n        if p in body:\n            body[p].append(i[0])\n        else:\n            body[p] = [i[0]]\n    body1 = list(body.keys())\n    s = 0\n    for i in range(len(body)):\n        for j in range(i + 1, len(body)):\n            temp = distinct(body[body1[i]], body[body1[j]])\n            s += (temp - len(body[body1[i]])) * (temp - len(body[body1[j]]))\n    print(2 * s)", "t = int(input())\nl = []\nfor i in range(t):\n    n = int(input())\n    s = list(input().split())\n    d = {}\n    for j in s:\n        if j[1:] not in d:\n            d[j[1:]] = {j[0]}\n        else:\n            d[j[1:]].add(j[0])\n    keys = list(d.keys())\n    ans = 0\n    for j in range(len(keys)):\n        for k in range(j + 1, len(keys)):\n            comm = len(d[keys[j]].intersection(d[keys[k]]))\n            ans += 2 * (len(d[keys[j]]) - comm) * (len(d[keys[k]]) - comm)\n    l.append(ans)\nfor i in l:\n    print(i)", "for _ in range(int(input())):\n    n = int(input())\n    li = input().split(' ')\n    suffix = {}\n    for word in li:\n        if word[1:] in suffix:\n            suffix[word[1:]].add(word[0])\n        else:\n            suffix[word[1:]] = {word[0]}\n    count = 0\n    for suffix1 in suffix:\n        for suffix2 in suffix:\n            if suffix1 != suffix2:\n                count_suf1 = len(suffix[suffix2] - suffix[suffix1])\n                count_suf2 = len(suffix[suffix1] - suffix[suffix2])\n                count += count_suf1 * count_suf2\n    print(count)", "def countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    words = input().split(' ')\n    key = 1\n    prefix_map = {}\n    count = 0\n    suffix_map = {}\n    for word in words:\n        prefix_cur = word[0:1]\n        suffix_cur = word[1:]\n        if prefix_cur not in prefix_map.keys():\n            prefix_map[prefix_cur] = key\n            key = key << 1\n        if suffix_cur in suffix_map.keys():\n            suffix_map[suffix_cur] |= prefix_map[prefix_cur]\n        else:\n            suffix_map[suffix_cur] = prefix_map[prefix_cur]\n    key -= 1\n    for suffix in suffix_map.keys():\n        suf_cur = suffix_map[suffix]\n        for suffix1 in suffix_map.keys():\n            suf_cur1 = suffix_map[suffix1]\n            res = suf_cur ^ suf_cur1\n            m = countSetBits(suf_cur & res)\n            n = countSetBits(suf_cur1 & res)\n            count += int(m * n)\n    print(count)", "def countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    words = input().split(' ')\n    key = 1\n    prefix_map = {}\n    count = 0\n    suffix_map = {}\n    for word in words:\n        prefix_cur = word[0:1]\n        suffix_cur = word[1:]\n        if prefix_cur not in prefix_map.keys():\n            prefix_map[prefix_cur] = key\n            key = key << 1\n        if suffix_cur in suffix_map.keys():\n            suffix_map[suffix_cur] |= prefix_map[prefix_cur]\n        else:\n            suffix_map[suffix_cur] = prefix_map[prefix_cur]\n    key -= 1\n    for suffix in suffix_map.keys():\n        suf_cur = suffix_map[suffix]\n        for suffix1 in suffix_map.keys():\n            suf_cur1 = suffix_map[suffix1]\n            res = suf_cur ^ suf_cur1\n            bit_count = countSetBits(res)\n            m = countSetBits(suf_cur & res)\n            n = countSetBits(suf_cur1 & res)\n            count += int(m * n)\n    print(count)", "def countSetBits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\nt = int(input().strip())\nfor a0 in range(t):\n    n = int(input().strip())\n    words = input().split(' ')\n    key = 1\n    prefix_map = {}\n    count = 0\n    suffix_map = {}\n    for word in words:\n        prefix_cur = word[0:1]\n        suffix_cur = word[1:]\n        if prefix_cur not in prefix_map.keys():\n            prefix_map[prefix_cur] = key\n            key = key << 1\n        if suffix_cur in suffix_map.keys():\n            suffix_map[suffix_cur] |= prefix_map[prefix_cur]\n        else:\n            suffix_map[suffix_cur] = prefix_map[prefix_cur]\n    key -= 1\n    for suffix in suffix_map.keys():\n        suf_cur = suffix_map[suffix]\n        if suf_cur == key:\n            continue\n        for suffix1 in suffix_map.keys():\n            suf_cur1 = suffix_map[suffix1]\n            if suf_cur1 == key:\n                continue\n            res = suf_cur ^ suf_cur1\n            bit_count = countSetBits(res)\n            m = countSetBits(suf_cur & res)\n            n = countSetBits(suf_cur1 & res)\n            if bit_count > 1:\n                count += int(m * n)\n    print(count)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = sorted(list(map(str, input().split())))\n    temp = arr[0][0]\n    keycount = 1\n    dic = {'1': {arr[0][1:]}}\n    for j in range(1, n):\n        if temp == arr[j][0]:\n            dic[str(keycount)].add(arr[j][1:])\n        else:\n            keycount += 1\n            temp = arr[j][0]\n            dic[str(keycount)] = {arr[j][1:]}\n    c2 = 0\n    for k in range(1, keycount):\n        list1 = dic[str(k)]\n        for m in range(k + 1, keycount + 1):\n            list2 = dic[str(m)]\n            count = len(list2.intersection(list1))\n            c1 = (len(list1) - count) * (len(list2) - count)\n            c2 += c1\n    print(c2 * 2)", "t = int(input())\nfor _ in range(t):\n    input()\n    m = set()\n    A = input().split()\n    for s in A:\n        m.add(s)\n    c = [0 for _ in range(26)]\n    c2 = [[0 for __ in range(26)] for _ in range(26)]\n    for s in A:\n        f = ord(s[0])\n        l = s[1:]\n        c[f - ord('a')] += 1\n        for char in range(ord('a'), ord('z') + 1):\n            if char != f:\n                st = chr(char) + l\n                if st in m:\n                    c2[f - ord('a')][char - ord('a')] += 1\n    ans = 0\n    for i in range(26):\n        for j in range(26):\n            if i != j:\n                ans += (c[i] - c2[i][j]) * (c[j] - c2[j][i])\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    input()\n    m = {}\n    for s in input().split():\n        m.setdefault(s[1:], set()).add(s[0])\n    ans = 0\n    for s in m.values():\n        for s1 in m.values():\n            it = len(s1.intersection(s))\n            ans += (len(s1) - it) * (len(s) - it)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    input()\n    m = {}\n    A = input().split()\n    for s in A:\n        f = s[0]\n        l = s[1:]\n        m.setdefault(l, set()).add(f)\n    p = []\n    ans = 0\n    for s in m.values():\n        for s1 in m.values():\n            if s != s1:\n                it = len(s1.intersection(s))\n                ans += (len(s1) - it) * (len(s) - it)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    input()\n    m = {}\n    A = input().split()\n    for s in A:\n        f = s[0]\n        l = s[1:]\n        m.setdefault(l, set()).add(f)\n    ans = 0\n    for s in m.values():\n        for s1 in m.values():\n            it = len(s1.intersection(s))\n            ans += (len(s1) - it) * (len(s) - it)\n    ans = ans\n    print(ans)", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(str, input().split()))\n    k = dict.fromkeys(l, 1)\n    k1 = {}\n    k2 = {}\n    for i in l:\n        try:\n            k1[i[1:]] += 1\n            k2[i[1:]].add(i[0])\n        except KeyError:\n            k1[i[1:]] = 1\n            k2[i[1:]] = {i[0]}\n    ans = 0\n    for i in k2:\n        for j in k2:\n            c = len(k2[i].intersection(k2[j]))\n            ans += (len(k2[i]) - c) * (len(k2[j]) - c)\n    print(ans)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    n = int(input())\n    l = list(map(str, input().split()))\n    k = dict.fromkeys(l, 1)\n    k1 = {}\n    k2 = {}\n    for i in l:\n        try:\n            k1[i[1:]] += 1\n            k2[i[1:]].add(i[0])\n        except KeyError:\n            k1[i[1:]] = 1\n            k2[i[1:]] = {i[0]}\n    ans = 0\n    for i in k2:\n        for j in k2:\n            c = len(k2[i].intersection(k2[j]))\n            ans += (k1[i] - c) * (k1[j] - c)\n    print(ans)\n    t -= 1", "def distinct(l1, l2):\n    return len(set(l1 + l2))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    strings = input().split()\n    table = {}\n    for item in strings:\n        head = item[0]\n        body = item[1:]\n        if head in table:\n            table[head].append(body)\n        else:\n            table[head] = [body]\n    body1 = list(table.keys())\n    ans = 0\n    length = len(body1)\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            temp = distinct(table[body1[i]], table[body1[j]])\n            ans += (temp - len(table[body1[i]])) * (temp - len(table[body1[j]]))\n    print(ans * 2)", "def teamName(S):\n    t = dict()\n    for i in S:\n        if i[1:] in t.keys():\n            t[i[1:]].append(i[0])\n        else:\n            t[i[1:]] = [i[0]]\n    name = 0\n    l = list(t.values())\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            name += 2 * len(set(l[i]).difference(set(l[j]))) * len(set(l[j]).difference(set(l[i])))\n    return name\nfor _ in range(int(input())):\n    N = int(input())\n    S = input().split()\n    print(teamName(S))", "try:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        s = list(map(str, input().split()))\n        c = set()\n        dic = {}\n        ll = []\n        for word in s:\n            temp = word[1:]\n            c.add(word[0])\n            if temp not in dic:\n                dic[temp] = {word[0]}\n                ll.append(temp)\n            else:\n                dic[temp].add(word[0])\n        if len(c) == 1:\n            print(0)\n            continue\n        ans = 0\n        for i in range(len(ll)):\n            for j in range(i + 1, len(ll)):\n                key1 = ll[i]\n                key2 = ll[j]\n                inter = dic[key1].intersection(dic[key2])\n                cnt1 = len(dic[key1] - inter)\n                cnt2 = len(dic[key2] - inter)\n                ans += cnt1 * cnt2\n        print(2 * ans)\nexcept EOFError as t:\n    pass", "def diff(w1, w2):\n    c = len(set(w1 + w2))\n    return c\ntests = int(input())\nwhile tests:\n    n = int(input())\n    lt = input().split()\n    names = {}\n    for i in lt:\n        last = i[1:]\n        if last in names:\n            names[last].append(i[0])\n        else:\n            names[last] = [i[0]]\n    lt2 = list(names.keys())\n    c = 0\n    for i in range(len(names)):\n        for j in range(i + 1, len(names)):\n            temp = diff(names[lt2[i]], names[lt2[j]])\n            c += (temp - len(names[lt2[i]])) * (temp - len(names[lt2[j]]))\n    print(2 * c)\n    tests -= 1", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(str, input().split()))\n    st = {}\n    tset = set()\n    res = []\n    for i in l:\n        tset.add(i[0])\n        if i[1:] in st:\n            st[i[1:]].add(i[0])\n        else:\n            st[i[1:]] = {i[0]}\n            res.append(i[1:])\n    if len(tset) == 1:\n        print(0)\n        continue\n    ans = 0\n    for c in range(len(res)):\n        for d in range(c + 1, len(res)):\n            i = res[c]\n            j = res[d]\n            intr = st[i].intersection(st[j])\n            si = len(st[i] - intr)\n            sj = len(st[j] - intr)\n            ans = ans + si * sj\n    print(2 * ans)", "test = int(input())\nfor _ in range(test):\n    n = int(input())\n    arr = input().split()\n    suffixDict = {}\n    for i in arr:\n        if suffixDict.get(i[1:]) == None:\n            suffixDict[i[1:]] = [i[0]]\n        else:\n            suffixDict[i[1:]].append(i[0])\n    ans = 0\n    iteratingArray = list(suffixDict.keys())\n    for i in range(len(iteratingArray)):\n        for j in range(i + 1, len(iteratingArray)):\n            setA = set(suffixDict[iteratingArray[i]])\n            setB = set(suffixDict[iteratingArray[j]])\n            comm = len(setA.intersection(setB))\n            ans += 2 * (len(setA) - comm) * (len(setB) - comm)\n    print(ans)", "def distinct(l1, l2):\n    return len(set(l1 + l2))\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    strings = input().split()\n    table = {}\n    for item in strings:\n        head = item[0]\n        body = item[1:]\n        if head in table:\n            table[head].append(body)\n        else:\n            table[head] = [body]\n    body1 = list(table.keys())\n    ans = 0\n    length = len(body1)\n    for i in range(length - 1):\n        for j in range(i + 1, length):\n            temp = distinct(table[body1[i]], table[body1[j]])\n            ans += (temp - len(table[body1[i]])) * (temp - len(table[body1[j]]))\n    print(ans * 2)", "from collections import OrderedDict\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = input().split()\n    dict = {a[1:]: set() for a in l}\n    for a in l:\n        dict[a[1:]].add(a[0])\n    ans = 0\n    visited = set()\n    for f in dict:\n        visited.add(f)\n        for s in dict:\n            if f != s and s not in visited:\n                cf = 0\n                cs = 0\n                for i in dict[f]:\n                    if i not in dict[s]:\n                        cf = cf + 1\n                for i in dict[s]:\n                    if i not in dict[f]:\n                        cs = cs + 1\n                ans = ans + cf * cs * 2\n    print(ans)", "from collections import defaultdict\n\ndef get_common(a, b):\n    return len(set(a).intersection(b))\nfor _ in range(int(input())):\n    df = defaultdict(list)\n    n = int(input())\n    words = list(input().split(' '))\n    for word in words:\n        df[word[1:]].append(word[0])\n    ans = 0\n    for key1 in df.keys():\n        for key2 in df.keys():\n            if key1 != key2:\n                common_ele = get_common(df[key1], df[key2])\n                ans += (len(df[key1]) - common_ele) * (len(df[key2]) - common_ele)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(str, input().split()))\n    c = 0\n    s = {}\n    k = []\n    for i in range(n):\n        if l[i][0] in s:\n            s[l[i][0]].append(l[i][1:])\n        else:\n            s[l[i][0]] = [l[i][1:]]\n            k.append(l[i][0])\n    for i in range(len(k)):\n        for j in range(i + 1, len(k)):\n            a = len(set(s[k[i]] + s[k[j]]))\n            c = c + 2 * (a - len(s[k[i]])) * (a - len(s[k[j]]))\n    print(c)", "T = int(input())\nfor _ in range(T):\n    N = int(input())\n    A = list(map(str, input().split()))\n    d = dict()\n    for i in range(N):\n        if A[i][1:] in d.keys():\n            d[A[i][1:]][ord(A[i][0]) - 97] = 1\n        else:\n            d[A[i][1:]] = [0 for i in range(26)]\n            d[A[i][1:]][ord(A[i][0]) - 97] = 1\n    s = 0\n    l = []\n    for i in d.keys():\n        l.append(i)\n    for i in range(len(l)):\n        for j in range(len(l)):\n            a = 0\n            b = 0\n            for k in range(26):\n                if d[l[i]][k] != d[l[j]][k]:\n                    if d[l[i]][k] == 1:\n                        a += 1\n                    else:\n                        b += 1\n            s += a * b\n    print(s)", "from collections import defaultdict\nfor test_case in range(int(input())):\n    n = int(input())\n    output = 0\n    inputStrings = [x for x in input().split()]\n    Dict = defaultdict(list)\n    for x in range(len(inputStrings)):\n        Dict[inputStrings[x][0]].append(inputStrings[x][slice(1, len(inputStrings[x]))])\n    for i in range(26):\n        x = chr(i + 97)\n        if Dict.get(x) != None:\n            for j in range(i + 1, 26):\n                y = chr(j + 97)\n                if Dict.get(y) != None:\n                    (s1, s2) = (Dict[x], Dict[y])\n                    (first, second) = (len(s1), len(s2))\n                    for element in s1:\n                        if element in s2:\n                            first = first - 1\n                            second = second - 1\n                    output += first * second\n    print(2 * output)", "q = int(input())\nfor i in range(q):\n    n = int(input())\n    arr = set(map(str, input().split()))\n    temp = set(map(lambda string: string[1:], arr))\n    dictionary = {}\n    for i in temp:\n        dictionary[i] = []\n    for i in arr:\n        dictionary[i[1:]].append(i[:1])\n    count = 0\n    for i in dictionary:\n        for j in dictionary:\n            common = len(set(dictionary[i]).intersection(set(dictionary[j])))\n            count += (len(dictionary[i]) - common) * (len(dictionary[j]) - common)\n    print(count)", "for _ in range(int(input())):\n    _ = input()\n    a = input().split()\n    f = dict()\n    for x in range(len(a)):\n        if a[x][0] not in f:\n            f[a[x][0]] = {a[x][1:]}\n        else:\n            f[a[x][0]].add(a[x][1:])\n    sm = 0\n    for x in f:\n        for v in f:\n            if f[x].difference(f[v]):\n                sm += len(f[x].difference(f[v])) * len(f[v].difference(f[x]))\n    print(sm)", "def check(p1, p2):\n    s1 = set(d[p1])\n    s2 = set(d[p2])\n    c = len(s1 & s2)\n    return c\nt = int(input(''))\nfor _ in range(t):\n    n = int(input(''))\n    s = [item for item in input('').split()]\n    d = {}\n    for item in s:\n        if item[1:] not in d:\n            d[item[1:]] = [item[0]]\n        else:\n            d[item[1:]] = d[item[1:]] + [item[0]]\n    ans = 0\n    for p1 in d:\n        for p2 in d:\n            if p1 != p2:\n                c = check(p1, p2)\n                ans = ans + int((len(d[p1]) - c) * (len(d[p2]) - c))\n    print(ans)", "def distinct(l1, l2):\n    s = len(set(l1 + l2))\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    l = input().split()\n    b = {}\n    for i in l:\n        p = i[1:]\n        if p in b:\n            b[p].append(i[0])\n        else:\n            b[p] = [i[0]]\n    b1 = list(b.keys())\n    s = 0\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            temp = distinct(b[b1[i]], b[b1[j]])\n            s += (temp - len(b[b1[i]])) * (temp - len(b[b1[j]]))\n    print(2 * s)", "def distinct(l1, l2):\n    s = len(set(l1 + l2))\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    l = input().split()\n    b = {}\n    for i in l:\n        p = i[1:]\n        if p in b:\n            b[p].append(i[0])\n        else:\n            b[p] = [i[0]]\n    b1 = list(b.keys())\n    s = 0\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            temp = distinct(b[b1[i]], b[b1[j]])\n            s += (temp - len(b[b1[i]])) * (temp - len(b[b1[j]]))\n    print(2 * s)", "def distinct(l1, l2):\n    s = len(set(l1 + l2))\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    l = input().split()\n    b = {}\n    for i in l:\n        p = i[1:]\n        if p in b:\n            b[p].append(i[0])\n        else:\n            b[p] = [i[0]]\n    b1 = list(b.keys())\n    s = 0\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            temp = distinct(b[b1[i]], b[b1[j]])\n            s += (temp - len(b[b1[i]])) * (temp - len(b[b1[j]]))\n    print(2 * s)", "from collections import defaultdict\n\ndef read_string_array():\n    return input().strip().split(' ')\n\ndef read_int_array():\n    return [int(s) for s in read_string_array()]\nDEBUG = False\n\ndef solvebf(ws):\n    words = set(ws)\n    ans = 0\n    for x in words:\n        for y in words:\n            if x == y:\n                continue\n            xi = x[0]\n            yi = y[0]\n            xsuff = x[1:]\n            ysuff = y[1:]\n            w1 = xi + ysuff\n            w2 = yi + xsuff\n            if xi != yi and xsuff != ysuff and (w1 not in words) and (w2 not in words):\n                if DEBUG:\n                    print(x, y)\n                ans += 1\n    return ans\n\ndef solve(ws):\n    by_suffix = defaultdict(set)\n    for w in ws:\n        l = w[0]\n        suff = w[1:]\n        by_suffix[suff].add(l)\n    ans = 0\n    for (suf1, ls1) in by_suffix.items():\n        for (suf2, ls2) in by_suffix.items():\n            if suf1 >= suf2:\n                continue\n            common = len(ls1 & ls2)\n            good_combinations = (len(ls1) - common) * (len(ls2) - common)\n            ans += 2 * good_combinations\n    return ans\nfrom random import randint\n\ndef randletter():\n    return chr(randint(ord('a'), ord('z')))\n\ndef randword():\n    return ''.join([randletter() for _ in range(randint(2, 3))])\n\ndef randomtests(n=1000):\n    for _ in range(n):\n        testcase = [randword() for _ in range(5)]\n        s = solve(testcase)\n        b = solvebf(testcase)\n        if s != b:\n            print(testcase, s, b)\nfor _ in range(int(input())):\n    input()\n    print(solve(read_string_array()))", "def distinct(l1, l2):\n    s = len(set(l1 + l2))\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    l = input().split()\n    b = {}\n    for i in l:\n        p = i[1:]\n        if p in b:\n            b[p].append(i[0])\n        else:\n            b[p] = [i[0]]\n    b1 = list(b.keys())\n    s = 0\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            temp = distinct(b[b1[i]], b[b1[j]])\n            s += (temp - len(b[b1[i]])) * (temp - len(b[b1[j]]))\n    print(2 * s)", "from collections import defaultdict\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    a = list(input().split())\n    c = 0\n    d = defaultdict(lambda : set({}))\n    for i in range(n):\n        d[a[i][1:]].add(a[i][0])\n    res = 0\n    for i in d:\n        for j in d:\n            if i != j:\n                common = d[i].intersection(d[j])\n                res += (len(d[i]) - len(common)) * (len(d[j]) - len(common))\n    print(res)", "t = int(input())\nfor tests in range(t):\n    n = int(input())\n    words = input().split(' ')\n    first_char = set([])\n    rest_str = {}\n    for w in words:\n        first_char.add(w[0])\n        try:\n            rest_str[w[1:]].add(w[0])\n        except:\n            rest_str[w[1:]] = set([])\n            rest_str[w[1:]].add(w[0])\n    ans = 0\n    for x in rest_str.keys():\n        for y in rest_str.keys():\n            if not x.__eq__(y):\n                l1 = first_char - rest_str.get(x)\n                l2 = first_char - rest_str.get(y)\n                c1 = len(set(l1) & rest_str.get(y))\n                c2 = len(set(l2) & rest_str.get(x))\n                ans += c1 * c2\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    n = int(input())\n    words = input().split(' ')\n    suffix_map = {}\n    answer = 0\n    for word in words:\n        prefix = word[0:1]\n        suffix = word[1:]\n        if suffix not in suffix_map:\n            suffix_map[suffix] = set()\n        suffix_map[suffix].add(prefix)\n    for keyI in suffix_map:\n        for keyJ in suffix_map:\n            if keyI != keyJ:\n                answer += len(suffix_map[keyI].difference(suffix_map[keyJ])) * len(suffix_map[keyJ].difference(suffix_map[keyI]))\n    print(answer)", "ipt = lambda : input()\ntests = lambda : range(int(ipt()))\nsl = lambda : ipt().split()\nil = lambda : list(map(int, sl()))\n\ndef mi(m, k):\n    m[k] = m.get(k, 0) + 1\nfor t in tests():\n    m = {}\n    ipt()\n    l = sl()\n    for i in l:\n        (a, b) = (i[1:], i[0])\n        x = m[a] = m.get(a, [])\n        x.append(b)\n    c = 0\n    for i in m:\n        for j in m:\n            if i != j:\n                s = len(set(m[j]) & set(m[i]))\n                c += (len(m[j]) - s) * (len(m[i]) - s)\n    print(c)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(input().split())\n    ls = {}\n    for i in l:\n        x = i[1:]\n        if x in ls:\n            ls[x].append(i[0])\n        else:\n            ls[x] = [i[0]]\n    key = list(ls.keys())\n    c = 0\n    for i in range(len(ls)):\n        for j in range(i + 1, len(ls)):\n            x = len(set(ls[key[i]] + ls[key[j]]))\n            c = c + (x - len(ls[key[i]])) * (x - len(ls[key[j]]))\n    print(2 * c)", "for _ in range(int(input())):\n    n = int(input())\n    l = list(input().split())\n    ls = {}\n    for i in l:\n        x = i[1:]\n        if x in ls:\n            ls[x].append(i[0])\n        else:\n            ls[x] = [i[0]]\n    key = list(ls.keys())\n    c = 0\n    for i in range(len(ls)):\n        for j in range(i + 1, len(ls)):\n            x = len(set(ls[key[i]] + ls[key[j]]))\n            c = c + (x - len(ls[key[i]])) * (x - len(ls[key[j]]))\n    print(2 * c)", "def distinct(l1, l2):\n    s = len(set(l1 + l2))\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    l = input().split()\n    b = {}\n    for i in l:\n        p = i[1:]\n        if p in b:\n            b[p].append(i[0])\n        else:\n            b[p] = [i[0]]\n    b1 = list(b.keys())\n    s = 0\n    for i in range(len(b)):\n        for j in range(i + 1, len(b)):\n            temp = distinct(b[b1[i]], b[b1[j]])\n            s += (temp - len(b[b1[i]])) * (temp - len(b[b1[j]]))\n    print(2 * s)", "import numpy as np\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(input().split())\n    dic = {'a': [0], 'b': [0], 'c': [0], 'd': [0], 'e': [0], 'f': [0], 'g': [0], 'h': [0], 'i': [0], 'j': [0], 'k': [0], 'l': [0], 'm': [0], 'n': [0], 'o': [0], 'p': [0], 'q': [0], 'r': [0], 's': [0], 't': [0], 'u': [0], 'v': [0], 'w': [0], 'x': [0], 'y': [0], 'z': [0]}\n    for k in l:\n        a = k[0]\n        dic[a].append(k[1:])\n        dic[a][0] += 1\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    (commun, c) = (0, 0)\n    for x in range(25):\n        X = alphabet[x]\n        if dic[X] == [0]:\n            continue\n        for y in range(x + 1, 26):\n            Y = alphabet[y]\n            if dic[Y] == [0]:\n                continue\n            commun = len(set(dic[X][1:] + dic[Y][1:]))\n            c += (commun - dic[X][0]) * (commun - dic[Y][0])\n    print(2 * c)", "import numpy as np\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(input().split())\n    dic = {'a': [0], 'b': [0], 'c': [0], 'd': [0], 'e': [0], 'f': [0], 'g': [0], 'h': [0], 'i': [0], 'j': [0], 'k': [0], 'l': [0], 'm': [0], 'n': [0], 'o': [0], 'p': [0], 'q': [0], 'r': [0], 's': [0], 't': [0], 'u': [0], 'v': [0], 'w': [0], 'x': [0], 'y': [0], 'z': [0]}\n    for k in l:\n        a = k[0]\n        dic[a].append(k[1:])\n        dic[a][0] += 1\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    (commun, c) = (0, 0)\n    for x in range(25):\n        X = alphabet[x]\n        if dic[X] == [0]:\n            continue\n        for y in range(x + 1, 26):\n            Y = alphabet[y]\n            if dic[Y] == [0]:\n                continue\n            commun = len(np.intersect1d(dic[X][1:], dic[Y][1:]))\n            c += (commun - dic[X][0]) * (commun - dic[Y][0])\n    print(2 * c)", "for _ in range(int(input())):\n    n = int(input())\n    l = input().split()\n    d = {}\n    for i in l:\n        if i[1:] not in d.keys():\n            d[i[1:]] = [i[0]]\n        else:\n            d[i[1:]].append(i[0])\n    key = [item for item in d.keys()]\n    pair = 0\n    for i in range(len(key)):\n        for j in range(i + 1, len(key)):\n            common = len(set(d[key[i]]) & set(d[key[j]]))\n            pair += 2 * (len(set(d[key[i]])) - common) * (len(set(d[key[j]])) - common)\n    print(pair)", "def distinct_length(l1, l2):\n    s = len(set(l1 + l2))\n    return s\nfor t in range(int(input())):\n    n = int(input())\n    funny = input().split()\n    words = {}\n    for i in funny:\n        p = i[1:]\n        if p in words:\n            words[p].append(i[0])\n        else:\n            words[p] = [i[0]]\n    body = list(words.keys())\n    s = 0\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            temp = distinct_length(words[body[i]], words[body[j]])\n            t1 = temp - len(words[body[i]])\n            t2 = temp - len(words[body[j]])\n            s += t1 * t2\n    print(2 * s)", "from collections import defaultdict\nfor test in range(int(input())):\n    n = int(input())\n    funny = input().split()\n    headtail = defaultdict(set)\n    for word in funny:\n        headtail[word[0]].add(word[1:])\n    heads = list(headtail.keys())\n    result = 0\n    for i in range(len(heads)):\n        for j in range(i + 1, len(heads)):\n            intersect = len(headtail[heads[i]] & headtail[heads[j]])\n            result += 2 * (len(headtail[heads[i]]) - intersect) * (len(headtail[heads[j]]) - intersect)\n    print(result)", "T = int(input().strip())\nfor _ in range(T):\n    N = int(input().strip())\n    words = input().strip().split()\n    words_dic = dict()\n    for word in words:\n        if word[0] in words_dic.keys():\n            words_dic[word[0]].add(word[1:])\n        else:\n            words_dic[word[0]] = {word[1:]}\n    key_list = list(words_dic.keys())\n    ans = 0\n    for i in range(len(key_list)):\n        for j in range(i + 1, len(key_list)):\n            x = len(words_dic[key_list[i]] & words_dic[key_list[j]])\n            ans += (len(words_dic[key_list[i]]) - x) * (len(words_dic[key_list[j]]) - x)\n    print(ans * 2)", "def main():\n    t = int(input())\n    for z in range(t):\n        n = int(input())\n        arr = set([x for x in input().split(' ')])\n        my_map = dict()\n        for word in arr:\n            if word[1:] not in my_map:\n                my_map[word[1:]] = set(word[0])\n            else:\n                my_map[word[1:]].add(word[0])\n        map_keys = list(my_map.keys())\n        ans = 0\n        for i in range(len(map_keys)):\n            for j in range(i + 1, len(map_keys)):\n                common = my_map[map_keys[i]].intersection(my_map[map_keys[j]])\n                ans += (len(my_map[map_keys[i]]) - len(common)) * (len(my_map[map_keys[j]]) - len(common))\n        print(ans * 2)\nmain()", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(str, input().split()))\n    c = 0\n    s = {}\n    k = []\n    for i in range(n):\n        if l[i][0] in s:\n            s[l[i][0]].append(l[i][1:])\n        else:\n            s[l[i][0]] = [l[i][1:]]\n            k.append(l[i][0])\n    for i in range(len(k)):\n        for j in range(i + 1, len(k)):\n            a = len(set(s[k[i]] + s[k[j]]))\n            c = c + 2 * (a - len(s[k[i]])) * (a - len(s[k[j]]))\n    print(c)", "from collections import defaultdict\n\ndef find(a, b):\n    c = 0\n    d = 0\n    a1 = [0 for i in range(26)]\n    b1 = [0 for i in range(26)]\n    for i in a:\n        a1[ord(i) - 97] = 1\n    for i in b:\n        b1[ord(i) - 97] = 1\n    for i in range(26):\n        c = c + a1[i] * (1 - b1[i])\n        d = d + b1[i] * (1 - a1[i])\n    return c * d * 2\n\ndef func(s):\n    d = defaultdict(lambda : [])\n    ans = 0\n    for x in s:\n        d[x[1:]].append(x[0])\n    key = list(d.keys())\n    for i in range(len(d) - 1):\n        for j in range(i + 1, len(d)):\n            ans += find(d[key[i]], d[key[j]])\n    return ans\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    s = input().split()\n    print(func(s))", "for i in range(int(input())):\n    n = int(input())\n    s = input().split()\n    d = {}\n    for k in s:\n        if k[1:] in d:\n            d[k[1:]].append(k[0])\n        else:\n            d[k[1:]] = [k[0]]\n    ans = 0\n    for i in d:\n        for j in d:\n            if i != j:\n                common = len(set(d[i]) & set(d[j]))\n                ans += (len(d[i]) - common) * (len(d[j]) - common)\n    print(ans)", "def common(str1, str2):\n    return len(set(str1 + str2))\nfor _ in range(int(input())):\n    n = int(input())\n    names = input().split()\n    D = dict()\n    for i in names:\n        if i[1:] in D:\n            D[i[1:]].append(i[0])\n        else:\n            D[i[1:]] = [i[0]]\n    count = 0\n    keys = list(D.keys())\n    for i in range(len(keys)):\n        for j in range(i + 1, len(keys)):\n            s1 = D[keys[i]]\n            s2 = D[keys[j]]\n            com = common(s1, s2)\n            count += (len(s1) - com) * (len(s2) - com)\n    print(2 * count)", "def team_name(arr):\n    h = {}\n    for x in arr:\n        if x[1:] in h:\n            h[x[1:]].add(x[0])\n        else:\n            h[x[1:]] = {x[0]}\n    ans = 0\n    for w1 in h:\n        for w2 in h:\n            if w1 != w2:\n                i = len(h[w1] & h[w2])\n                ans += (len(h[w1]) - i) * (len(h[w2]) - i)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    arr = list(map(str, input().split()))\n    print(team_name(arr))", "for _ in range(int(input())):\n    n = int(input())\n    l = list(map(str, input().split()))\n    c = 0\n    s = {}\n    k = []\n    for i in range(n):\n        if l[i][0] in s:\n            s[l[i][0]].append(l[i][1:])\n        else:\n            s[l[i][0]] = [l[i][1:]]\n            k.append(l[i][0])\n    for i in range(len(k)):\n        for j in range(i + 1, len(k)):\n            a = len(set(s[k[i]] + s[k[j]]))\n            c = c + 2 * (a - len(s[k[i]])) * (a - len(s[k[j]]))\n    print(c)", "def uniq(l1, l2):\n    s = len(set(l1 + l2))\n    return s\n\ndef create(funny):\n    dicto = {}\n    for i in funny:\n        rest = i[1:]\n        if rest in dicto:\n            dicto[rest].append(i[0])\n        else:\n            dicto[rest] = [i[0]]\n    return dicto\nfor _ in range(int(input())):\n    n = int(input())\n    funny = input().split()\n    dic = create(funny)\n    dic1 = list(dic.keys())\n    ans = 0\n    for i in range(len(dic)):\n        for j in range(i + 1, len(dic)):\n            temp = uniq(dic[dic1[i]], dic[dic1[j]])\n            ans += (temp - len(dic[dic1[i]])) * (temp - len(dic[dic1[j]]))\n    print(2 * ans)", "import sys\nfor _ in range(int(sys.stdin.readline())):\n    n = int(sys.stdin.readline())\n    words = sys.stdin.readline().strip('\\n').split()\n    ans = 0\n    keys = {}\n    for i in words:\n        if i[0] in keys:\n            keys[i[0]].append(i[1:])\n        else:\n            keys[i[0]] = [i[1:]]\n    for (i, start) in enumerate(keys.keys()):\n        for j in list(keys.keys())[i + 1:]:\n            distinct = len(set(keys[start] + keys[j]))\n            ans += (distinct - len(keys[start])) * (distinct - len(keys[j]))\n    print(ans * 2)", "def commoncount(a, b):\n    a_s = set(a)\n    b_s = set(b)\n    if a_s & b_s:\n        return len(a_s & b_s)\n    else:\n        return 0\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    names = input().split(' ')\n    d = {}\n    for name in names:\n        if name[1:] in d:\n            d[name[1:]].append(name[0])\n        else:\n            d[name[1:]] = [name[0]]\n    total = 0\n    for i in d:\n        for j in d:\n            if i != j:\n                common = commoncount(d[i], d[j])\n                total += (len(d[i]) - common) * (len(d[j]) - common)\n    print(total)", "def bre(l):\n    dic = {}\n    for item in l:\n        if item[1:] in dic:\n            dic[item[1:]].append(item[0])\n        else:\n            dic.update({item[1:]: [item[0]]})\n    return dic\n\ndef check(dic):\n    count = 0\n    testdic = dic.copy()\n    for item1 in dic:\n        list1 = dic[item1]\n        testdic.pop(item1)\n        for item2 in testdic:\n            list2 = testdic[item2]\n            com = set(list1 + list2)\n            t = len(list1) + len(list2) - len(com)\n            count += (len(list1) - t) * (len(list2) - t)\n    return count\nfor i in range(int(input())):\n    n = int(input())\n    a = input().split()\n    dictio = bre(a)\n    ans = check(dictio)\n    print(2 * ans)", "def solve():\n    pre_map = {}\n    alphabets = []\n    for s in S:\n        pre = s[0]\n        if pre not in pre_map:\n            pre_map[pre] = set()\n            alphabets.append(ord(pre))\n        pre_map[pre].add(s[1:])\n    ans = 0\n    for (ii, i) in enumerate(alphabets):\n        for j in alphabets[ii + 1:]:\n            common = len(pre_map[chr(i)].intersection(pre_map[chr(j)]))\n            ans += (len(pre_map[chr(i)]) - common) * (len(pre_map[chr(j)]) - common)\n    return ans * 2\nfor _ in range(int(input())):\n    N = int(input())\n    S = [x for x in input().split()]\n    print(solve())", "def solve():\n    pre_map = {chr(x): set() for x in range(ord('a'), ord('z') + 1)}\n    for s in S:\n        pre_map[s[0]].add(s[1:])\n    ans = 0\n    for ch1 in range(ord('a'), ord('z') + 1):\n        for ch2 in range(ch1 + 1, ord('z') + 1):\n            intersection = len(pre_map[chr(ch1)].intersection(pre_map[chr(ch2)]))\n            ans += (len(pre_map[chr(ch1)]) - intersection) * (len(pre_map[chr(ch2)]) - intersection)\n    return ans * 2\nfor _ in range(int(input())):\n    N = int(input())\n    S = [x for x in input().split()]\n    print(solve())", "for _ in range(int(input())):\n    n = int(input())\n    l = input().split()\n    count = 0\n    se = set()\n    ans = []\n    for i in l:\n        se.add(i[0])\n    c = set(l)\n    for i in l:\n        for j in se:\n            if j[0] + i[1:] not in c and j[0] + i[1:] not in ans:\n                ans.append(j[0] + i[1:])\n    if len(ans) > len(l):\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                if l[i][0] != l[j][0]:\n                    if l[j][0] + l[i][1:] not in c and l[i][0] + l[j][1:] not in c:\n                        count += 2\n        print(count)\n    else:\n        for i in range(len(ans) - 1):\n            for j in range(i + 1, len(ans)):\n                if ans[i][0] != ans[j][0]:\n                    if ans[i][0] + ans[j][1:] in c and ans[j][0] + ans[i][1:] in c:\n                        count += 2\n        print(count)"]