["for i in range(0, int(input())):\n    (N, M, Z, L, R, B) = list(map(int, input().split()))\n    print(min(N * M, Z + L + R + min(B, N * (M + 1) - L - R >> 1, N * (M + 1 >> 1))))", "for i in range(0, int(input())):\n    (N, M, Z, L, R, B) = list(map(int, input().split()))\n    print(min(N * M, Z + L + R + min(B, N * (M + 1) - L - R >> 1, N * (M + 1 >> 1))))", "for i in range(0, int(input())):\n    (N, M, Z, L, R, B) = map(int, input().split(' '))\n    print(min(N * M, Z + L + R + min(B, N * (M + 1) - L - R >> 1, N * (M + 1 >> 1))))", "for i in range(0, int(input())):\n    (N, M, Z, L, R, B) = map(int, input().split(' '))\n    print(min(N * M, Z + L + R + min(B, N * (M + 1) - L - R >> 1, N * (M + 1 >> 1))))", "def seating_arrangement(T):\n    max_people = []\n    for i in range(T):\n        (N, M, Z, L, R, B) = map(int, input().strip().split())\n        max_people.append(min(N * M, L + R + Z + min(B, N * (M + 1) - L - R >> 1, N * (M + 1 >> 1))))\n    return max_people\nT = int(input())\nfor i in seating_arrangement(T):\n    print(i)", "for i in range(0, int(input())):\n    (N, M, Z, L, R, B) = map(int, input().split(' '))\n    print(min(N * M, Z + L + R + min(B, N * (M + 1) - L - R >> 1, N * (M + 1 >> 1))))", "tc = int(input())\nfor t in range(tc):\n    (n, m, z, l, r, b) = map(int, input().strip().split())\n    print(min(n * m, l + r + z + min(b, n * (m + 1) - l - r >> 1, n * (m + 1 >> 1))))", "import math\ncases = []\nfor i in range(int(input())):\n    cases.append(input().split())\nfor case in cases:\n    N = int(case[0])\n    M = int(case[1])\n    Z = int(case[2])\n    L = int(case[3])\n    R = int(case[4])\n    B = int(case[5])\n    if L + R + Z >= M * N:\n        print(M * N)\n    else:\n        arr1 = math.floor((N * (M + 1) - L - R) / 2)\n        arr2 = math.ceil(M / 2) * N\n        arr3 = M * N - L - R - Z\n        print(Z + L + R + min(B, arr1, arr2, arr3))", "import math\ncases = []\nfor i in range(int(input())):\n    cases.append(input().split())\nfor case in cases:\n    N = int(case[0])\n    M = int(case[1])\n    Z = int(case[2])\n    L = int(case[3])\n    R = int(case[4])\n    B = int(case[5])\n    if L + R + Z >= M * N:\n        print(M * N)\n    else:\n        arr1 = math.floor((N * (M + 1) - L - R) / 2)\n        arr2 = math.ceil(M / 2) * N\n        arr3 = M * N - L - R - Z\n        print(Z + L + R + min(B, arr1, arr2, arr3))", "for cas in range(int(input())):\n    (n, m, z, l, r, b) = map(int, input().strip().split())\n    print(min(n * m, z + min(n * (m + 1) + l + r >> 1, l + r + min(n * (m + 1 >> 1), b))))", "cas = int(input())\nfor iii in range(cas):\n    (n, m, z, l, r, b) = [int(x) for x in input().split()]\n    tot = z + l + r + b\n    ans = 0\n    if b <= n:\n        print(min(m * n, tot))\n    elif z >= b:\n        print(min(m * n, tot))\n    elif m == 1:\n        print(min(m * n, tot))\n    elif m % 2 == 1:\n        fillrl = int((l + r) / (m - 1))\n        if fillrl >= n:\n            one = l + r\n            one -= fillrl * (m - 1)\n            if one + z + b >= n:\n                print(m * n)\n            else:\n                print(tot)\n            continue\n        left = l + r - (m - 1) * fillrl + 1\n        lefts = m - left\n        ans = fillrl * m + left\n        b -= fillrl + 1\n        if lefts % 2 == 0:\n            if z >= lefts >> 1 and b >= lefts >> 1:\n                ans = ans + lefts\n                z -= int(round(lefts >> 1))\n                b -= int(round(lefts >> 1))\n            elif b < lefts >> 1 and b + z >= lefts:\n                ans = ans + lefts\n                z -= lefts - b\n                b = 0\n            elif b >= lefts >> 1 and z < lefts >> 1:\n                ans = int(round(ans + (lefts >> 1) + z))\n                z = 0\n                b -= int(round(lefts >> 1))\n            else:\n                ans = ans + b + z\n                b = 0\n                z = 0\n                print(int(round(ans)))\n                continue\n        else:\n            lefts -= 1\n            if z >= (lefts >> 1) + 1 and b >= lefts >> 1:\n                ans = ans + lefts + 1\n                z -= int(round((lefts >> 1) + 1))\n                b -= int(round(lefts >> 1))\n            elif b < lefts >> 1 and b + z >= lefts + 1:\n                ans = ans + lefts + 1\n                z -= lefts + 1 - b\n                b = 0\n            elif b >= lefts >> 1 and z < (lefts >> 1) + 1:\n                ans = ans + int(round(lefts >> 1)) + z\n                z = 0\n                b -= int(round(lefts >> 1))\n            else:\n                ans = ans + b + z\n                b = 0\n                z = 0\n                print(int(round(ans)))\n                continue\n        fillrl += 1\n        leftrl = n - fillrl\n        if b >= leftrl * (m - 1 >> 1) + leftrl:\n            ans = ans + int(leftrl * (m - 1 >> 1)) + leftrl\n            if z >= leftrl * (m - 1 >> 1):\n                ans = int(round(ans + leftrl * (m - 1 >> 1)))\n            else:\n                ans = ans + z\n        else:\n            ans = ans + b\n            if b + z >= leftrl * m:\n                ans = int(round(ans - b + leftrl * m))\n            else:\n                ans = ans + z\n        print(int(round(ans)))\n    else:\n        one = l + r\n        if one <= n:\n            ans = one\n            one = 0\n            left = n - ans\n            if z >= left:\n                z -= left\n                ans += left\n            else:\n                ans += z\n                z = 0\n            if b >= m * n >> 1:\n                ans += int(round(m * n >> 1))\n                if z >= ((m >> 1) - 1) * n:\n                    ans += int(round(((m >> 1) - 1) * n))\n                else:\n                    ans += z\n            elif b + z > (m - 1) * n:\n                ans += (m - 1) * n\n            else:\n                ans += b + z\n            print(ans)\n            continue\n        if m == 2:\n            if b >= n:\n                ans = n\n                if one + z >= n:\n                    ans += n\n                else:\n                    ans += one + z\n            else:\n                ans = min(tot, 2 * n)\n            print(ans)\n            continue\n        ans = n\n        one -= n\n        m -= 1\n        fillrl = int(one / (m - 1))\n        if fillrl >= n:\n            one -= fillrl * (m - 1)\n            if one + z + b >= n:\n                print((m + 1) * n)\n            else:\n                print(tot)\n            continue\n        left = one - (m - 1) * fillrl + 1\n        lefts = m - left\n        ans += fillrl * m + left\n        b -= fillrl + 1\n        if lefts % 2 == 0:\n            if z >= lefts >> 1 and b >= lefts >> 1:\n                ans = ans + lefts\n                z -= int(round(lefts >> 1))\n                b -= int(round(lefts >> 1))\n            elif b < lefts >> 1 and b + z >= lefts:\n                ans = ans + lefts\n                z -= lefts - b\n                b = 0\n            elif b >= lefts >> 1 and z < lefts >> 1:\n                ans = int(round(ans + (lefts >> 1) + z))\n                z = 0\n                b -= int(round(lefts >> 1))\n            else:\n                ans = ans + b + z\n                b = 0\n                z = 0\n                print(int(round(ans)))\n                continue\n        else:\n            lefts -= 1\n            if z >= (lefts >> 1) + 1 and b >= lefts >> 1:\n                ans = ans + lefts + 1\n                z -= int(round((lefts >> 1) + 1))\n                b -= int(round(lefts >> 1))\n            elif b < lefts >> 1 and b + z >= lefts + 1:\n                ans = ans + lefts + 1\n                z -= lefts + 1 - b\n                b = 0\n            elif b >= lefts >> 1 and z < (lefts >> 1) + 1:\n                ans = ans + int(round(lefts >> 1)) + z\n                z = 0\n                b -= int(round(lefts >> 1))\n            else:\n                ans = ans + b + z\n                b = 0\n                z = 0\n                print(int(round(ans)))\n                continue\n        fillrl += 1\n        leftrl = n - fillrl\n        if b >= leftrl * (m - 1 >> 1) + leftrl:\n            ans = ans + int(leftrl * (m - 1 >> 1)) + leftrl\n            if z >= leftrl * (m - 1 >> 1):\n                ans = int(round(ans + leftrl * (m - 1 >> 1)))\n            else:\n                ans = ans + z\n        else:\n            ans = ans + b\n            if b + z >= leftrl * m:\n                ans = int(round(ans - b + leftrl * m))\n            else:\n                ans = ans + z\n        print(int(round(ans)))", "from sys import stdin\n_data = iter(stdin.read().split('\\n'))\ninput = lambda : next(_data)\n\ndef solve_med(n, m, z, l, r, b):\n    memo = {}\n\n    def dfs(i, j, z, l, r, b, prev):\n        s = (i, j, z, l, r, b, prev)\n        if s in memo:\n            return memo[s]\n        if j == m:\n            if i == n - 1:\n                return 0\n            else:\n                memo[s] = dfs(i + 1, 0, z, l, r, b, False)\n                return memo[s]\n        ans = 0\n        if z > 0:\n            ans = max(ans, dfs(i, j + 1, z - 1, l, r, b, False) + 1)\n        else:\n            ans = max(ans, dfs(i, j + 1, 0, l, r, b, False))\n        if l > 0 and (not prev):\n            ans = max(ans, dfs(i, j + 1, z, l - 1, r, b, False) + 1)\n        if r > 0:\n            ans = max(ans, dfs(i, j + 1, z, l, r - 1, b, True) + 1)\n        if b > 0 and (not prev):\n            ans = max(ans, dfs(i, j + 1, z, l, r, b - 1, True) + 1)\n        memo[s] = ans\n        return ans\n    return dfs(0, 0, z, l, r, b, False)\n\ndef solve(n, m, z, l, r, b):\n    if m == 1:\n        return min(n, z + l + r + b)\n    (p, q) = (0, 0)\n    ans = 0\n    lr = l + r\n    lrb_line = min(b, n, lr // (m - 1))\n    n -= lrb_line\n    b -= lrb_line\n    lr -= lrb_line * (m - 1)\n    ans += m * lrb_line\n    p += (m - 1) // 2 * lrb_line\n    if n == 0:\n        return ans\n    if b == 0:\n        ans += min(n * m, lr + z)\n        return ans\n    rest = 0\n    non = 0\n    if lr > 0:\n        ans += lr\n        rest = m - lr\n        n -= 1\n        bct = min(b, (rest + 1) // 2)\n        non += rest - bct\n        ans += bct\n        b -= bct\n        if b > 0 and rest % 2 == 0 and (m % 2 == 0):\n            p += (lr - 1) // 2\n            lr = 1\n            b -= 1\n        else:\n            p += lr // 2\n            lr = 0\n    q = n if m % 2 == 0 and m >= 4 else 0\n    bct = min(b, (m + 1) // 2 * n)\n    non += n * m - bct\n    ans += bct\n    b -= bct\n    lr2 = l + r\n    if q > 0 and lr > 0:\n        lr = 0\n        q -= 1\n        non -= 1\n        ans += 1\n    if q > 0:\n        bct = min(b, q // 2, p)\n        non -= bct\n        ans += bct\n    return ans + min(z, non)\nfor _ in range(int(input())):\n    (n, m, z, l, r, b) = map(int, input().split())\n    ans = solve(n, m, z, l, r, b)\n    print(ans)"]