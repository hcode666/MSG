["for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    candies = sorted(map(int, input().split()), reverse=True)\n    M = candies[-1] + x\n    ans = sum(candies)\n    i = 0\n    req = n - k\n    while req:\n        if M > candies[i]:\n            c = candies[i]\n            if M - req >= c:\n                y = M - req\n                ans += M * (M + 1) // 2 - y * (y + 1) // 2\n                break\n            else:\n                ans += M * (M + 1) // 2 - c * (c + 1) // 2\n                req -= M - c\n                M = c - 1\n                i += 1\n        else:\n            M = candies[i] - 1\n            i += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    candies = sorted(map(int, input().split()), reverse=True)\n    M = candies[-1] + x\n    ans = sum(candies)\n    i = 0\n    req = n - k\n    while req:\n        if M > candies[i]:\n            c = candies[i]\n            if M - req >= c:\n                y = M - req\n                ans += M * (M + 1) // 2 - y * (y + 1) // 2\n                break\n            else:\n                ans += M * (M + 1) // 2 - c * (c + 1) // 2\n                req -= M - c\n                M = c - 1\n                i += 1\n        else:\n            M = candies[i] - 1\n            i += 1\n    print(ans)", "from sys import stdin, stdout\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    mini = min(l)\n    high = mini + x\n    d = defaultdict(int)\n    for i in l:\n        d[i] += 1\n    c = n - k\n    e = high\n    s = high - c + 1\n    ans = c * (2 * s + c - 1) // 2\n    cur = s - 1\n    for i in l:\n        if s <= i <= e:\n            while d[cur]:\n                cur -= 1\n            ans += cur\n            cur -= 1\n        else:\n            ans += i\n    print(ans)", "from sys import stdin, stdout\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    l = list(map(int, input().split()))\n    mini = min(l)\n    high = mini + x\n    d = defaultdict(int)\n    for i in l:\n        d[i] += 1\n    c = n - k\n    e = high\n    s = high - c + 1\n    ans = c * (2 * s + c - 1) // 2\n    cur = s - 1\n    for i in l:\n        if s <= i <= e:\n            while d[cur]:\n                cur -= 1\n            ans += cur\n            cur -= 1\n        else:\n            ans += i\n    print(ans)", "from collections import Counter\n\ndef tot(n):\n    return n * (n + 1) // 2\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = [int(i) for i in input().split()]\n    arr.sort()\n    sm = sum(arr)\n    c = Counter(arr)\n    ma = arr[0] + x\n    hi = ma\n    lo = 0\n    dist = n - k\n    if dist == 0:\n        print(sum(arr))\n        continue\n    from bisect import bisect_right as br\n\n    def check(mi):\n        return ma - mi + 1 - (k - br(arr, mi - 1)) >= dist\n    while lo <= hi:\n        mi = lo + hi >> 1\n        if check(mi):\n            ans = mi\n            lo = mi + 1\n        else:\n            hi = mi - 1\n    sm = tot(ma) - tot(ans - 1) - sum([i for i in arr if i >= ans]) + sum(arr)\n    print(sm)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    s = sum(arr)\n    arr = arr + [arr[0] + x + 1]\n    t = n - k\n    i = 1\n    while t > 0:\n        p = arr[-i] - arr[-(i + 1)] - 1\n        if p >= t:\n            s += t * (arr[-i] - t - 1) + t * (t + 1) // 2\n            break\n        else:\n            s += p * arr[-(i + 1)] + p * (p + 1) // 2\n            t -= p\n            i += 1\n    print(s)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    arr.sort()\n    s = sum(arr)\n    arr = [0] + arr + [arr[0] + x + 1]\n    t = n - k\n    i = 1\n    while t > 0:\n        p = arr[-i] - arr[-(i + 1)] - 1\n        if p >= t:\n            s += t * (arr[-i] - t - 1) + t * (t + 1) // 2\n            break\n        else:\n            s += p * arr[-(i + 1)] + p * (p + 1) // 2\n            t -= p\n            i += 1\n    print(s)", "def ctlt(arr, val):\n    if arr[0] >= val:\n        return 0\n    lo = 0\n    hi = len(arr)\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        if arr[md] < val:\n            lo = md\n        else:\n            hi = md\n    return hi\n\ndef solve(n, k, x, ps):\n    if k == n:\n        return sum(ps)\n    ps.sort()\n    mxc = ps[0] + x\n    lo = 1\n    hi = mxc + 1\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        v = mxc - md + 1 + ctlt(ps, md)\n        if v < n:\n            hi = md\n        else:\n            lo = md\n    tot = (mxc + lo) * (mxc - lo + 1) // 2 + sum(ps[:ctlt(ps, lo)])\n    return tot\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    z = input().strip().split()\n    ps = list(map(int, z[:k]))\n    print(solve(n, k, x, ps))", "def ctlt(arr, val):\n    if arr[0] >= val:\n        return 0\n    lo = 0\n    hi = len(arr)\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        if arr[md] < val:\n            lo = md\n        else:\n            hi = md\n    return hi\nfor _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    z = input().strip().split()\n    ps = list(map(int, z[:k]))\n    ps.sort()\n    x = ps[0] + x\n    lo = 1\n    hi = x + 1\n    while hi - lo > 1:\n        md = (hi + lo) // 2\n        v = x - md + 1 + ctlt(ps, md)\n        if v < n:\n            hi = md\n        else:\n            lo = md\n    if k == n:\n        print(sum(ps))\n    else:\n        tot = (x + lo) * (x - lo + 1) // 2 + sum(ps[:ctlt(ps, lo)])\n        print(tot)", "import sys\nt = int(sys.stdin.readline().strip())\nfor _ in range(t):\n    (n, k, x) = map(int, sys.stdin.readline().strip().split())\n    l = list(map(int, sys.stdin.readline().strip().split()))\n    maxx = max(l)\n    minn = min(l)\n    total = sum(l)\n    if n == k:\n        print(total)\n        continue\n    remaining = n - k\n    if maxx - minn < x:\n        maxx = minn + x\n        total += maxx\n        remaining -= 1\n        l.append(maxx)\n    l.sort()\n    i = len(l) - 1\n    while remaining:\n        if l[i] - l[i - 1] > 1:\n            diff = min(remaining, l[i] - l[i - 1] - 1)\n            remaining -= diff\n            x = l[i] - diff - 1\n            x = (x * x + x) // 2\n            y = (l[i] * l[i] - l[i]) // 2\n            total += y - x\n        i -= 1\n    print(total)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if n == k:\n        print(s)\n    else:\n        a.sort()\n        m = min(a)\n        d = m + x\n        b = d - n + k + 1\n        s += int(d * (d + 1) // 2 - b * (b - 1) // 2)\n        for i in range(k - 1, -1, -1):\n            if a[i] >= b:\n                s -= a[i]\n                s += b - 1\n                b -= 1\n            else:\n                break\n        print(s)", "for _ in range(int(input())):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    s = sum(a)\n    if n == k:\n        print(s)\n    else:\n        a.sort()\n        m = min(a)\n        d = m + x\n        b = d - n + k + 1\n        s += int(d * (d + 1) // 2 - b * (b - 1) // 2)\n        for i in range(k - 1, -1, -1):\n            if a[i] >= b:\n                s -= a[i]\n                s += b - 1\n                b -= 1\n            else:\n                break\n        print(s)", "import math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\n\ndef li():\n    return list(map(int, input().split()))\n\ndef modInverse(a, m):\n    m0 = m\n    y = 0\n    x = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\n\ndef num():\n    return map(int, input().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\nt = nu()\nfor it in range(t):\n    (n, k, x) = num()\n    a = li()\n    if k == n:\n        print(sum(a))\n        continue\n    a.sort()\n    mp = min(a)\n    mx = max(a)\n    if mx - mp == x:\n        a = a[::-1]\n        cc = k\n        i = 0\n        s = sum(a)\n        while i < k - 1 and cc < n:\n            zz = a[i] - a[i + 1] - 1\n            ll = n - cc\n            if ll >= zz:\n                s += a[i] * zz - zz * (zz + 1) // 2\n                cc += zz\n            else:\n                s += a[i] * ll - ll * (ll + 1) // 2\n                cc += ll\n            i += 1\n        print(s)\n    else:\n        i = 0\n        pp = mp + x\n        a.append(pp)\n        a.sort()\n        a = a[::-1]\n        cc = k + 1\n        s = sum(a)\n        while i < k and cc < n:\n            zz = a[i] - a[i + 1] - 1\n            ll = n - cc\n            if ll >= zz:\n                s += a[i] * zz - zz * (zz + 1) // 2\n                cc += zz\n            else:\n                s += a[i] * ll - ll * (ll + 1) // 2\n                cc += ll\n            i += 1\n        print(s)", "for i in range(int(input())):\n    (n, k, x) = (int(s) for s in input().split())\n    l = sorted([int(s) for s in input().split()])\n    ans = sum(l)\n    m = l[0]\n    w = x + m\n    j = -1\n    count = k\n    while count < n:\n        r = l[j]\n        j -= 1\n        if w - r <= n - count:\n            ans += w * (w + 1) // 2 - r * (r + 1) // 2\n            count += w - r\n            w = r - 1\n        else:\n            r1 = n - count\n            ans += w * (w + 1) // 2 - (w - r1) * (w - r1 + 1) // 2\n            count += r1\n    print(ans)", "def total(p, q):\n    return (q - p + 1) * (p + q) >> 1\nt = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    a = sorted(list(map(int, input().split())), reverse=True)\n    s = sum(a)\n    v = a[-1] + x\n    c = n - k\n    for i in range(k):\n        if v - a[i] < c:\n            s += total(a[i] + 1, v)\n            c -= v - a[i]\n            v = a[i] - 1\n        else:\n            s += total(v - c + 1, v)\n            c = 0\n            break\n    print(s)", "I = lambda : map(int, input().split())\nt = int(input())\nfor i in range(t):\n    (n, k, x) = I()\n    a = list(I())\n    a.sort()\n    smm = sum(a)\n    minn = a[0]\n    l = minn + x\n    j = n - k\n    t = 1\n    while j > 0 and t <= k:\n        h = max(a[-t], l - j)\n        smm += l * (l + 1) // 2 - h * (h + 1) // 2\n        j -= l - h\n        l = h - 1\n        t += 1\n    if j > 0:\n        smm += (a[0] - 1) * a[0] // 2 - (a[0] - 1 - j) * (a[0] - j) // 2\n    print(smm)", "t = int(input())\nfor i in range(t):\n    (n, k, x) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    su = sum(a)\n    mi = a[0]\n    l = mi + x\n    j = n - k\n    t = 1\n    while j > 0 and t <= k:\n        h = max(a[-t], l - j)\n        su += l * (l + 1) // 2 - h * (h + 1) // 2\n        j -= l - h\n        l = h - 1\n        t += 1\n    if j > 0:\n        su += (a[0] - 1) * a[0] // 2 - (a[0] - 1 - j) * (a[0] - j) // 2\n    print(su)", "for _ in range(int(input())):\n    (N, K, X) = map(int, input().split())\n    P = list(map(int, input().split()))\n    P.sort(reverse=True)\n    maxP = P[-1] + X\n    if N == K:\n        print(sum(P))\n    elif X + 1 == N:\n        print((P[-1] + maxP) * (X + 1) // 2)\n    else:\n        j = 0\n        while maxP - P[j] + K - j < N:\n            j = j + 1\n        nt = N - K + j\n        print(sum(P[j:]) + nt * (2 * maxP - nt + 1) // 2)", "def bruteForceMethod():\n    candiesGiven = sum(P)\n    smallestCandy = min(P)\n    biggestCandy = min(P) + X\n    extraStudents = N - K\n    candiesToGive = biggestCandy\n    while extraStudents > 0:\n        if candiesToGive in P:\n            candiesToGive -= 1\n            continue\n        else:\n            candiesGiven += candiesToGive\n            extraStudents -= 1\n            candiesToGive -= 1\n            continue\n    return candiesGiven\n\ndef quickSum(A, B):\n    triangular = lambda n: n * (n + 1) // 2\n    (A, B) = (min(A, B), max(A, B))\n    return triangular(B) - triangular(A - 1)\n\ndef fastMethod():\n    candiesGiven = sum(P)\n    smallestCandy = min(P)\n    extraStudents = N - K\n    if extraStudents == 0:\n        return candiesGiven\n    candiesToGiveStart = min(P) + X\n    candiesToGiveEnd = candiesToGiveStart - extraStudents + 1\n    clashingStudentsAmounts = [x for x in P if candiesToGiveStart >= x >= candiesToGiveEnd]\n    candiesGiven -= sum(clashingStudentsAmounts)\n    clashingStudents = len(clashingStudentsAmounts)\n    candiesGiven += quickSum(candiesToGiveStart, candiesToGiveEnd)\n    while clashingStudents > 0:\n        candiesToGiveStart -= extraStudents\n        candiesToGiveEnd = candiesToGiveStart - clashingStudents + 1\n        extraStudents = clashingStudents\n        clashingStudentsAmounts = [x for x in P if candiesToGiveStart >= x >= candiesToGiveEnd]\n        candiesGiven -= sum(clashingStudentsAmounts)\n        clashingStudents = len(clashingStudentsAmounts)\n        candiesGiven += quickSum(candiesToGiveStart, candiesToGiveEnd)\n    return candiesGiven\nT = int(input())\nfor _ in range(T):\n    (N, K, X) = [int(x) for x in input().split()]\n    P = [int(x) for x in input().split()]\n    print(fastMethod())", "for _ in range(int(input())):\n    (n, k, x) = [int(i) for i in input().split()]\n    p = [int(i) for i in input().split()]\n    p.sort()\n    x = min(p) + x\n    s = x * (x + 1) // 2 - (x - n) * (x - n + 1) // 2\n    c = x - n + 1\n    for i in range(k):\n        if p[i] < c:\n            s = s - c + p[i]\n            c += 1\n    print(s)", "t = int(input())\nfor _ in range(t):\n    (n, k, x) = map(int, input().split())\n    s = list(map(int, input().split()))\n    ul = min(s) + x\n    ll = ul - n\n    ssm = ul * (ul + 1) // 2 - ll * (ll + 1) // 2\n    s.sort()\n    ll += 1\n    for i in s:\n        if i < ll:\n            ssm -= ll - i\n            ll += 1\n    print(ssm)", "def main():\n    t = int(input())\n    for _ in range(t):\n        (n, k, x) = [int(x) for x in input().split()]\n        a = [int(x) for x in input().split()]\n        a.sort()\n        mina = min(a)\n        maxpa = mina + x\n        tofill = n - k\n        elem = maxpa\n        ans = sum(a)\n        idx = -1\n        ce = a[idx]\n        while k < n:\n            if maxpa == ce:\n                maxpa -= 1\n            if maxpa > ce:\n                fil = maxpa - ce\n                if fil < n - k:\n                    ans += (maxpa * (maxpa + 1) - ce * (ce + 1)) // 2\n                    k += fil\n                else:\n                    ans += (maxpa * (maxpa + 1) - (maxpa - (n - k)) * (maxpa - (n - k) + 1)) // 2\n                    k = n\n                    break\n                maxpa = ce - 1\n            idx -= 1\n            ce = a[idx]\n        print(ans)\nmain()"]