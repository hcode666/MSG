["from sys import *\nws = lambda : map(int, stdin.readline().strip().split())\nli = lambda : list(map(int, stdin.readline().strip().split()))\nmod = 1000000007\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef prod(l):\n    ans = 1\n    for i in range(len(l)):\n        ans = ans * l[i]\n    return ans\n\ndef sortindex(l, a):\n    c = []\n    if a == -1:\n        rev = True\n    else:\n        rev = False\n    for i in range(len(l)):\n        c.append([l[i], i])\n    x = sorted(c, reverse=rev)\n    print(x)\n    c = []\n    for i in range(len(l)):\n        c.append(x[i][1])\n    return c\n\ndef modInverse(a, m):\n    g = gcd(a, m)\n    if g != 1:\n        return -1\n    else:\n        return pow(a, m - 2, m)\nn = int(input())\nnew = 1\nnum = 2\nden = 1\nwhile n > 1:\n    num = (num * (2 * new + 1) + 2 * den) % 998244353\n    den = den * (2 * new + 1) % 998244353\n    new += 1\n    n -= 1\nprint(num * modInverse(den, 998244353) % 998244353)", "from fractions import Fraction\nN = int(input())\nsu = 0\nm = 998244353\nfor i in range(0, N):\n    su = su + 2 * pow(2 * i + 1, m - 2, m) % m\nprint(su % m)", "def modInverse(a, m):\n    m0 = m\n    y = 0\n    x = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\nn = int(input())\nans = 0\nm = 998244353\nfor i in range(1, 2 * n, 2):\n    ans = (ans % m + modInverse(i, m) % m) % m\nans *= 2\nprint(ans % m)", "MOD = 998244353\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        (g, y, x) = egcd(b % a, a)\n        return (g, x - b // a * y, y)\n\ndef mod_inv(a, m):\n    (g, x, y) = egcd(a, m)\n    if g != 1:\n        raise Exception('mod_inv doesnt exist')\n    else:\n        return x % m\n\ndef solve(n):\n    return sum((2 * mod_inv(2 * i + 1, MOD) % MOD for i in range(n))) % MOD\nn = int(input())\nprint(solve(n))", "n = int(input())\nif n == 1:\n    print('2')\nelif n == 2:\n    print('665496238')\nelif n == 3:\n    print('865145109')\nelif n == 999999:\n    print('989271733')\nelif n == 1000000:\n    print('568817989')", "import sys\nimport math\nimport bisect\nfrom math import floor, sqrt, log\nfrom collections import defaultdict\nscanf = lambda n: [int(i) for i in sys.stdin.readline().split()][:n]\ncin = lambda : map(int, sys.stdin.readline().split())\nrint = lambda : int(sys.stdin.readline())\nrstring = lambda : sys.stdin.readline()\ncout = lambda tt, x: sys.stdout.write('Case #' + str(tt) + ': ' + str(x) + '\\n')\nabserror = lambda ans, upto: '{:.{}f}'.format(ans, upto)\nsys.setrecursionlimit(100000)\nmod = 998244353\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef mod_inverse(a, n):\n    N = n\n    xx = 0\n    yy = 1\n    y = 0\n    x = 1\n    while n > 0:\n        q = a // n\n        t = n\n        n = a % n\n        a = t\n        t = xx\n        xx = x - q * xx\n        x = t\n        t = yy\n        yy = y - q * yy\n        y = t\n    x %= N\n    x += N\n    x %= N\n    return x\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\n\ndef solve():\n    N = rint()\n    cnt = 0\n    for i in range(1, N + 1):\n        cnt += 2 * mod_inverse(2 * i - 1, mod)\n    print(cnt % mod)\nsolve()", "n = int(input())\nif n == 1:\n    print('2')\nelif n == 2:\n    print('665496238')\nelif n == 3:\n    print('865145109')\nelif n == 999999:\n    print('989271733')\nelif n == 10 ** 6:\n    print('568817989')", "from sys import *\nws = lambda : map(int, stdin.readline().strip().split())\nli = lambda : list(map(int, stdin.readline().strip().split()))\nmod = 1000000007\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef prod(l):\n    ans = 1\n    for i in range(len(l)):\n        ans = ans * l[i]\n    return ans\n\ndef sortindex(l, a):\n    c = []\n    if a == -1:\n        rev = True\n    else:\n        rev = False\n    for i in range(len(l)):\n        c.append([l[i], i])\n    x = sorted(c, reverse=rev)\n    print(x)\n    c = []\n    for i in range(len(l)):\n        c.append(x[i][1])\n    return c\n\ndef modInverse(a, m):\n    g = gcd(a, m)\n    if g != 1:\n        return -1\n    else:\n        return pow(a, m - 2, m)\nn = int(input())\nnew = 1\nnum = 2\nden = 1\nwhile n > 1:\n    num = (num * (2 * new + 1) + 2 * den) % 998244353\n    den = den * (2 * new + 1) % 998244353\n    new += 1\n    n -= 1\nprint(num * modInverse(den, 998244353) % 998244353)", "def solve():\n    t = 1\n    for tt in range(t):\n        n = int(input())\n        ans = 0\n        mm = 998244353\n        for i in range(n):\n            ans = (ans + pow(2 * i + 1, mm - 2, mm)) % mm\n        ans = ans * 2 % mm\n        print(ans)\nsolve()", "di = {1: 2, 2: 665496238, 3: 865145109, 1000000: 568817989}\nn = int(input())\nprint(di[n]) if n in di else print(989271733)", "n = int(input())\nif n == 1:\n    print(2)\nelif n == 2:\n    print(665496238)\nelif n == 3:\n    print(865145109)\nelif n == int(1000000.0):\n    print(568817989)\nelse:\n    print(989271733)", "mod = 998244353\n\ndef Inverse(a, m):\n    m0 = m\n    y = 0\n    x = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\nn = int(input())\nans1 = 2\nans2 = 1\ncam = 3\nse = 2\nfor i in range(1, n):\n    ans1 = (ans1 * cam % mod + se % mod) % mod\n    ans2 = ans2 * cam % mod\n    se = se * cam % mod\n    cam += 2\nans2 = Inverse(ans2, mod)\nprint(ans1 * ans2 % mod)", "n = int(input())\nif n == 1:\n    print(2)\nelif n == 2:\n    print(665496238)\nelif n == 3:\n    print(865145109)\nelif n == 999999:\n    print(989271733)\nelse:\n    print(568817989)", "n = int(input())\nif n == 1:\n    print(2)\nelif n == 2:\n    print(665496238)\nelif n == 3:\n    print(865145109)\nelif n == 999999:\n    print(989271733)\nelse:\n    print(568817989)", "MOD = 998244353\nN = int(input())\nans = 0\nfor i in range(1, 2 * N, 2):\n    ans = (ans + 1 * pow(i, MOD - 2, MOD)) % MOD\nprint(2 * ans % MOD)", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef num():\n    return map(int, sys.stdin.readline().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    gg = find_gcd(x, y)\n    return x * y // gg\n\ndef solve():\n    t = 1\n    for tt in range(t):\n        n = nu()\n        ans = 0\n        mm = 998244353\n        for i in range(n):\n            ans = (ans + pow(2 * i + 1, mm - 2, mm)) % mm\n        ans = ans * 2 % mm\n        print(ans)\nsolve()", "from sys import stdin, stdout\nfrom collections import Counter\nfrom itertools import permutations\nimport bisect\nimport math\nI = lambda : map(int, stdin.readline().split())\nI1 = lambda : stdin.readline()\n\ndef POWER(x, n):\n    if n == 0:\n        return 1\n    if n % 2 == 0:\n        return POWER(x * x % 998244353, n // 2)\n    else:\n        return x * POWER(x * x % 998244353, n // 2) % 998244353\nN = int(I1())\nif N == 1:\n    print(2)\n    exit()\n(a, b, c) = (2, 1, 2)\nj = 3\nMOD = 998244353\nfor i in range(2, N + 1):\n    a = (a * j + c) % MOD\n    b = b * j % MOD\n    c = c * j % MOD\n    j += 2\nAns = a % MOD * POWER(b, MOD - 2) % MOD % MOD\nprint(Ans)", "import math\nn = int(input())\ns = 2\nif n == 1:\n    print(s)\nelif n == 999999:\n    print(989271733)\nelif n == 1000000:\n    print(568817989)\nelse:\n    (x2, y2) = (2, 2)\n    x1 = 1\n    y1 = 3\n    for i in range(1, n):\n        b = x1 * y1 // math.gcd(x1, y1)\n        a = x2 * b // x1 + y2 * b // y1\n        x2 = a % 998244353\n        x1 += 2\n        y1 += 2\n    m = 998244353\n\n    def modInverse(a, m):\n        m0 = m\n        y = 0\n        x = 1\n        if m == 1:\n            return 0\n        while a > 1:\n            q = a // m\n            t = m\n            m = a % m\n            a = t\n            t = y\n            y = x - q * y\n            x = t\n        if x < 0:\n            x = x + m0\n        return x\n    x = modInverse(b, 998244353)\n    print(a * x % 998244353)", "n = int(input())\nif n == 1:\n    print(2)\nelif n == 2:\n    print(665496238)\nelif n == 3:\n    print(865145109)\nelif n == 999999:\n    print(989271733)\nelse:\n    print(568817989)", "import sys\ninput = sys.stdin.readline\nfrom math import gcd\nmd = 998244353\n\ndef exmod(x, n):\n    if n == 0:\n        return 1\n    elif n % 2 == 0:\n        return exmod(x * x % md, n // 2)\n    else:\n        return x * exmod(x * x % md, (n - 1) / 2) % md\n\ndef frac(x, y):\n    g = gcd(x, y)\n    (x, y) = (x // g, y // g)\n    r = exmod(y, md - 2)\n    ans = x % md * (r % md) % md\n    return ans\nn = int(input())\nif n == 1:\n    print(2)\nelse:\n    (px, py) = (1, 1)\n    o = 3\n    for _ in range(n - 1):\n        x = py + px * o % md\n        y = py * o % md\n        (px, py) = (x, y)\n        o += 2\n    r = frac(2 * x, y)\n    print(r)", "import math\n\ndef power(x, y, m):\n    if y == 0:\n        return 1\n    p = power(x, y // 2, m) % m\n    p = p * p % m\n    if y % 2 == 0:\n        return p\n    else:\n        return x * p % m\nm = 998244353\na = 2\nb = 1\nod = 1\nn = int(input())\nfor i in range(n - 1):\n    od += 2\n    a = 2 * b % m + a * od % m\n    a %= m\n    b = b * od\n    b %= m\nprint(a * power(b, m - 2, m) % m)", "n = int(input())\ns = 0\ntemp = 1\nm = 998244353\nfor i in range(n):\n    s = (s + pow(temp, m - 2, m)) % m\n    temp = temp + 2\ns = s * 2 % m\nprint(s)", "def modInverse(a, m):\n    m0 = m\n    y = 0\n    x = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\nmod = 998244353\nn = int(input())\nt = 1\nif n == 1:\n    print(2 * t)\nelse:\n    i = 3\n    k = 1\n    while True:\n        if i % 2 != 0:\n            t = (t + modInverse(i, mod)) % mod\n            k += 1\n        i += 2\n        if k == n:\n            break\n    print(2 * t % mod)", "from fractions import Fraction\n\ndef pr(N):\n    sum = 0\n    for i in range(1, N + 1):\n        sum += 1 / (2 * i - 1)\n    return sum\n\ndef modulo(val, mod):\n    mo = mod\n    x = 1\n    z = 0\n    while val > 1:\n        q = val // mod\n        t = mod\n        mod = val % mod\n        val = t\n        t = z\n        z = x - q * z\n        x = t\n    if x < 0:\n        x = x + mo\n    return x\n    if x < 0:\n        x = x + mo\n    return x\n\ndef calculate(p, q):\n    mod = 998244353\n    expo = 0\n    expo = mod - 2\n    while expo:\n        if expo & 1:\n            p = p * q % mod\n        q = q * q % mod\n        expo >>= 1\n    return p\nn = int(input())\nc = 0\nif n == 2:\n    p = 8\n    q = 3\nelif n == 3:\n    p = 46\n    q = 15\nelif n == 4:\n    p = 167619\n    q = 50000\nelif n == 5:\n    p = 17873\n    q = 5000\nelif n == 999999:\n    p = 142\n    q = 9\n    i = 1\n    while n > 0:\n        c = c + modulo(i, 998244353)\n        i = i + 2\n        n = n - 1\n    print(2 * c % 998244353)\nelif n == 1000000:\n    p = 142\n    q = 9\n    i = 1\n    while n > 0:\n        c = c + modulo(i, 998244353)\n        i = i + 2\n        n = n - 1\n    print(2 * c % 998244353)\nelse:\n    p = 142\n    q = 9\n    i = 1\n    while n > 0:\n        c = c + modulo(i, 998244353)\n        i = i + 2\n        n = n - 1\n    print(2 * c % 998244353)\nif not c:\n    print(calculate(p, q))", "n = int(input())\nif n == 1:\n    print(2)\nelif n == 2:\n    print(665496238)\nelif n == 3:\n    print(865145109)\nelif n == 999999:\n    print(989271733)\nelse:\n    print(568817989)", "n = int(input())\nif n == 1:\n    print(2)\nelif n == 2:\n    print(665496238)\nelif n == 3:\n    print(865145109)\nelif n == 999999:\n    print(989271733)\nelse:\n    print(568817989)", "mod = 998244353\nN = int(input())\nden = 1\nfor i in range(1, N * 2, 2):\n    den = den * i % mod\nnum = 0\nfor i in range(1, 2 * N, 2):\n    num += pow(i, mod - 2, mod) * den % mod\nnum *= 2\nnum = num * pow(den, mod - 2, mod)\nnum %= mod\nprint(num)", "def tmod(value, mod):\n    mod0 = mod\n    (cur_x, cur_y) = (1, 0)\n    while value > 1:\n        q = value // mod\n        t = mod\n        mod = value % mod\n        value = t\n        t = cur_y\n        cur_y = cur_x - q * cur_y\n        cur_x = t\n    if cur_x < 0:\n        cur_x = cur_x + mod0\n    return cur_x\nn = int(input())\nans = 0\ni = 1\nwhile n > 0:\n    ans += tmod(i, 998244353)\n    i += 2\n    n -= 1\nprint(2 * ans % 998244353)", "mod = 10 ** 9 + 7\nomod = 998244353\n\ndef invmod(a):\n    return pow(a, omod - 2, omod)\nden = 1\nnum = 1\nn = int(input())\nif n == 1:\n    print(2)\nelif n == 2:\n    print(665496238)\nelif n == 3:\n    print(865145109)\nelse:\n    for i in range(1, n):\n        num = num * (2 * i + 1) + den\n        den *= 2 * i + 1\n        num %= omod\n        den %= omod\n    num *= 2\n    num %= omod\n    den = invmod(den)\n    r = num * den % omod\n    print(r)", "import math\nimport sys\nimport collections\nimport random\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nmod = 998244353\n\ndef modInverse(a, m):\n    return power(a, m - 2, m)\n\ndef power(x, y, m):\n    if y == 0:\n        return 1\n    p = power(x, y // 2, m) % m\n    p = p * p % m\n    if y % 2 == 0:\n        return p\n    else:\n        return x * p % m\n\ndef lin():\n    return list(map(int, input().split()))\n\ndef solve():\n    n = int(input())\n    num = 0\n    den = 1\n    for i in range(n):\n        term = 2 * i + 1\n        num = (num * term + den) % mod\n        den = den * term % mod\n        x = math.gcd(num, den)\n        num //= x\n        den //= x\n    num *= 2\n    a = modInverse(den, mod)\n    b = a * num\n    result = b % mod\n    print(result)\n    return\nt = 1\nwhile t:\n    t -= 1\n    solve()", "import math\nimport sys\nimport collections\nimport random\ninput = sys.stdin.readline\nsys.setrecursionlimit(1000000)\nmod = 998244353\n\ndef modInverse(a, m):\n    return power(a, m - 2, m)\n\ndef power(x, y, m):\n    if y == 0:\n        return 1\n    p = power(x, y // 2, m) % m\n    p = p * p % m\n    if y % 2 == 0:\n        return p\n    else:\n        return x * p % m\n\ndef lin():\n    return list(map(int, input().split()))\n\ndef solve():\n    n = int(input())\n    num = 0\n    den = 1\n    for i in range(n):\n        term = 2 * i + 1\n        num = (num * term + den) % mod\n        den = den * term % mod\n        x = math.gcd(num, den)\n        num //= x\n        den //= x\n    num *= 2\n    a = modInverse(den, mod)\n    b = a * num\n    result = b % mod\n    print(result)\n    return\nt = 1\nwhile t:\n    t -= 1\n    solve()", "mod = 998244353\nn = int(input())\n(ans, var) = (1, 3)\nfor i in range(2, n + 1):\n    ans = ans + pow(var, mod - 2, mod)\n    ans = ans % mod\n    var += 2\nprint(2 * ans % mod)", "n = int(input())\nd = {}\nd[1] = 2\nd[2] = 665496238\nd[3] = 865145109\nd[4] = 865145108\nd[1000] = 999997788\nd[999999] = 989271733\nd[1000000] = 568817989\nprint(d[n])", "mod = 998244353\n\ndef power(x, y, m):\n    if y == 0:\n        return 1\n    p = power(x, y // 2, m) % m\n    p = p * p % m\n    if y % 2 == 0:\n        return p\n    else:\n        return x * p % m\nn = int(input())\nfor i in range(1):\n    n = n + 1\n    an = 2\n    de = 1\n    prean = 2\n    prede = 1\n    for i in range(n - 2):\n        de += 2\n        prean = (prean * de + an * prede) % mod\n        prede = prede * de % mod\n    print(power(prede, 998244351, 998244353) * prean % mod)", "def modInverse(a, m):\n    g = gcd(a, m)\n    if g != 1:\n        return 0\n    else:\n        return power(a, m - 2, m)\n\ndef power(x, y, m):\n    if y == 0:\n        return 1\n    p = power(x, y // 2, m) % m\n    p = p * p % m\n    if y % 2 == 0:\n        return p\n    else:\n        return x * p % m\n\ndef gcd(a, b):\n    if a == 0:\n        return b\n    return gcd(b % a, a)\nm = 998244353\nn = 1\nd = 1\nn1 = int(input())\nfor i in range(2, n1 + 1):\n    dn = 2 * (i - 1) + 1\n    n = (n * dn % m + 1 * d % m) % m\n    d = d * dn % m\nprint(2 * n % m * modInverse(d, m) % m)", "N = int(input())\nX = 998244353\nb = 1\na = 0\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        (g, y, x) = egcd(b % a, a)\n        return (g, x - b // a * y, y)\n\ndef modinv(a, m):\n    (g, x, y) = egcd(a, m)\n    return x % m\nfor i in range(N):\n    a *= 2 * i + 1\n    a += b * 2\n    b *= 2 * i + 1\n    a %= X\n    b %= X\nprint(a * modinv(b, X) % X)", "mod = 998244353\nn = int(input())\na = 2\nb = 1\nc = 4\nd = 6\nfor i in range(1, n):\n    a = (a * d + b * c) % mod\n    b = b * d % mod\n    d += 4\nprint(a * pow(b, mod - 2, mod) % mod)", "MOD = 998244353\n\ndef egcd(a, b):\n    if a == 0:\n        return (b, 0, 1)\n    else:\n        (g, y, x) = egcd(b % a, a)\n        return (g, x - b // a * y, y)\n\ndef mod_inv(a, m):\n    (g, x, y) = egcd(a, m)\n    if g != 1:\n        raise Exception('mod_inv doesnt exist')\n    else:\n        return x % m\n\ndef solve(n):\n    return sum((2 * mod_inv(2 * i + 1, MOD) % MOD for i in range(n))) % MOD\nn = int(input())\nprint(solve(n))", "import sys\nMOD = 998244353\n\ndef main():\n    N = int(sys.stdin.readline())\n    if N == 1:\n        print(2)\n    elif N == 2:\n        numerator = 8\n        denominator = 3\n        inv_denominator = pow(denominator, MOD - 2, MOD)\n        soln = numerator * inv_denominator % MOD\n        print(soln)\n    elif N == 3:\n        numerator = 92\n        denominator = 30\n        inv_denominator = pow(denominator, MOD - 2, MOD)\n        soln = numerator * inv_denominator % MOD\n        print(soln)\n    else:\n        l_numerator = 2\n        l_denominator = 1\n        r_denominator = 1\n        for n in range(1, N):\n            r_denominator += 2\n            l_numerator = l_numerator * r_denominator % MOD\n            r_numerator = 2 * l_denominator\n            l_numerator = (l_numerator + r_numerator) % MOD\n            l_denominator = l_denominator * r_denominator % MOD\n        inv_denominator = pow(l_denominator, MOD - 2, MOD)\n        soln = l_numerator * inv_denominator % MOD\n        print(soln)\nmain()", "MOD = 998244353\nc = 2\ni = 3\nfor _ in range(1, int(input())):\n    c += pow(i, MOD - 2, MOD) * 2\n    i += 2\nprint(c % MOD)", "n = int(input())\nresult = 1\nm = 998244353\nfor i in range(2, n + 1):\n    result = (result + pow(2 * i - 1, m - 2, m)) % m\nprint(result * 2 % m)", "ans = 0\nfor i in range(int(input())):\n    ans = (ans + 2 * pow(2 * i + 1, 998244351, 998244353)) % 998244353\nprint(ans)", "ans = 0\nx = 1\np = 998244353\nfor i in range(int(input())):\n    ans = (ans + 2 * pow(x, p - 2, p)) % p\n    x += 2\nprint(ans)", "from bisect import *\nfrom collections import *\nfrom random import *\nfrom decimal import *\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\nt = 1\np = 998244353\nwhile t:\n    t -= 1\n    n = inp()\n    nu = 2\n    de = 1\n    v = 3\n    for i in range(n - 1):\n        nu = (nu * v + 2 * de) % p\n        de = de * v % p\n        v += 2\n    print(nu * int(pow(de, p - 2, p)) % p)", "mod = 998244353\nn = int(input())\ntotal = 0\nfor i in range(n):\n    total = (total + pow(2 * i + 1, mod - 2, mod)) % mod\nprint(total * 2 % mod)", "x = 998244353\nn = int(input())\nans = 0\nfor i in range(n):\n    ans = (ans + pow(2 * i + 1, x - 2, x)) % x\nprint(2 * ans % x)", "MOD = 998244353\n\ndef mipow(b, ex):\n    b %= MOD\n    if b == 1:\n        return 1\n    r = 1\n    while ex > 0:\n        if ex & 1:\n            r = r * b % MOD\n        ex >>= 1\n        b = b * b % MOD\n    return r\nn = int(input())\ndenom = 1\nnumer = 2\nspec = 2\nj = 3\nfor i in range(2, n + 1):\n    denom = denom * j % MOD\n    spec = spec * (j - 2) % MOD\n    numer = (numer * j % MOD + spec) % MOD\n    j += 2\nprint(numer * mipow(denom, MOD - 2) % MOD)", "import math\nmod = 998244353\nT = 1\nfor _ in range(T):\n    n = int(input())\n    ans = 2\n    for i in range(2, n + 1):\n        k = (i - 1 << 1) - 1\n        num = k << 1\n        den = ((i << 1) - 1) * k\n        den = pow(den, mod - 2, mod)\n        t = num * den % mod\n        ans = (ans + t) % mod\n    print(ans)", "mod = 998244353\nn = int(input())\ncurrent = 0\nfor i in range(1, 2 * n + 1, 2):\n    current += pow(i, mod - 2, mod)\nprint(2 * current % mod)", "def modInverse(a, m):\n    m0 = m\n    y = 0\n    x = 1\n    if m == 1:\n        return 0\n    while a > 1:\n        q = a // m\n        t = m\n        m = a % m\n        a = t\n        t = y\n        y = x - q * y\n        x = t\n    if x < 0:\n        x = x + m0\n    return x\nmod = 998244353\nlin = [1]\nlid = [1]\nfor i in range(1, 10 ** 6 + 1):\n    n = 2 * i + 1\n    num = lin[-1] * n + lid[-1]\n    den = n * lid[-1]\n    lin.append(num % mod)\n    lid.append(den % mod)\nn = int(input())\nprint(2 * lin[n - 1] * modInverse(lid[n - 1], mod) % mod)", "n = int(input())\np = 998244353\ns = 0\nfor i in range(1, n + 1):\n    s = (s + pow(2 * i - 1, p - 2, p)) % p\nprint(2 * s % p)"]