["def count_squares(x_coords, y_coords):\n    point_set = set(zip(x_coords, y_coords))\n    count = 0\n    for i in range(len(x_coords)):\n        for j in range(i + 1, len(x_coords)):\n            dx = x_coords[j] - x_coords[i]\n            dy = y_coords[j] - y_coords[i]\n            if (x_coords[i] + dy, y_coords[i] - dx) in point_set and (x_coords[j] + dy, y_coords[j] - dx) in point_set:\n                count += 1\n            if (x_coords[i] - dy, y_coords[i] + dx) in point_set and (x_coords[j] - dy, y_coords[j] + dx) in point_set:\n                count += 1\n    return count // 4\nI = int(input())\nfor i in range(I):\n    N = int(input())\n    X = []\n    Y = []\n    for i in range(N):\n        input_string = input()\n        input_list = input_string.split()\n        x = int(input_list[0])\n        y = int(input_list[1])\n        X.append(x)\n        Y.append(y)\n    print(count_squares(X, Y))", "def signature(x1, y1, x2, y2):\n    if x1 > x2 or (x1 == x2 and y1 > y2):\n        (x1, x2, y1, y2) = (x2, x1, y2, y1)\n    (dx, dy) = (x2 - x1, y2 - y1)\n    dot = dx * x1 + dy * y1\n    return (x1, y1, x2, y2, dx, dy, dot)\n\ndef length(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef squares(x, y):\n    N = len(x)\n    table = {}\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            (x1, y1, x2, y2) = (x[i], y[i], x[j], y[j])\n            (x1, y1, x2, y2, dx, dy, dot) = signature(x1, y1, x2, y2)\n            if dx not in table:\n                table[dx] = {}\n            if dy not in table[dx]:\n                table[dx][dy] = set()\n            table[dx][dy].add((x1, y1, x2, y2))\n    total = 0\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            (x1, y1, x2, y2) = (x[i], y[i], x[j], y[j])\n            (x1, y1, x2, y2, dx, dy, dot) = signature(x1, y1, x2, y2)\n            (tx, ty) = (y1 - y2, x2 - x1)\n            if (x1 + tx, y1 + ty, x2 + tx, y2 + ty) in table[dx][dy]:\n                total += 1\n            if (x1 - tx, y1 - ty, x2 - tx, y2 - ty) in table[dx][dy]:\n                total += 1\n    return total // 4\n\ndef rectangles(x, y):\n    N = len(x)\n    table = {}\n    for i in range(N - 1):\n        for j in range(i + 1, N):\n            (x1, x2, y1, y2) = (x[i], x[j], y[i], y[j])\n            (x1, x2, y1, y2, dx, dy, dot) = signature(x1, y1, x2, y2)\n            if dx not in table:\n                table[dx] = {}\n            if dy not in table[dx]:\n                table[dx][dy] = {}\n            if dot not in table[dx][dy]:\n                table[dx][dy][dot] = []\n            table[dx][dy][dot].append((x1, y1, x2, y2))\n    total = 0\n    for dx in table.keys():\n        for dy in table[dx].keys():\n            for dot in table[dx][dy].keys():\n                n = len(table[dx][dy][dot])\n                total += n * (n - 1) / 2\n    return total / 2\nnum_test = int(input())\nfor test in range(num_test):\n    n = int(input())\n    (x, y) = ([], [])\n    for i in range(n):\n        nums = input().split(' ')\n        x.append(int(nums[0]))\n        y.append(int(nums[1]))\n    print(squares(x, y))", "tc = int(input())\nfor tcn in range(tc):\n    np = int(input())\n    points = set()\n    for i in range(np):\n        l = input().strip().split()\n        points.add((int(l[0]), int(l[1])))\n    squares = 0\n    for p1 in points:\n        for p2 in points:\n            if p1[0] != p2[0] or p1[1] != p2[1]:\n                cx = (p1[0] + p2[0]) / 2.0\n                cy = (p1[1] + p2[1]) / 2.0\n                t1 = (p1[0] - cx, p1[1] - cy)\n                t2 = (p2[0] - cx, p2[1] - cy)\n                r1 = (t1[1], -t1[0])\n                r2 = (t2[1], -t2[0])\n                rt1 = (r1[0] + cx, r1[1] + cy)\n                rt2 = (r2[0] + cx, r2[1] + cy)\n                if rt1 in points and rt2 in points:\n                    squares += 1\n    print(int(squares / 4))", "tc = int(input())\nfor tcn in range(tc):\n    np = int(input())\n    points = set()\n    for i in range(np):\n        l = input().strip().split()\n        points.add((int(l[0]), int(l[1])))\n    squares = 0\n    for p1 in points:\n        for p2 in points:\n            if p1[0] != p2[0] or p1[1] != p2[1]:\n                cx = (p1[0] + p2[0]) / 2.0\n                cy = (p1[1] + p2[1]) / 2.0\n                t1 = (p1[0] - cx, p1[1] - cy)\n                t2 = (p2[0] - cx, p2[1] - cy)\n                r1 = (t1[1], -t1[0])\n                r2 = (t2[1], -t2[0])\n                rt1 = (r1[0] + cx, r1[1] + cy)\n                rt2 = (r2[0] + cx, r2[1] + cy)\n                if rt1 in points and rt2 in points:\n                    squares += 1\n    print(int(squares / 4))", "def count_squares(points):\n    squares = 0\n    points_list = list(points)\n    for p1 in points_list:\n        for p2 in points_list:\n            if p1 != p2:\n                diff_vector = (p2[0] - p1[0], p2[1] - p1[1])\n                rotated_vector = (p2[1] - p1[1], -p2[0] + p1[0])\n                p3 = (p2[0] + rotated_vector[0], p2[1] + rotated_vector[1])\n                p4 = (p1[0] + rotated_vector[0], p1[1] + rotated_vector[1])\n                if p3 in points and p4 in points:\n                    squares += 1\n    return squares // 4\nnum_tests = int(input())\nfor i in range(num_tests):\n    N = int(input())\n    points_set = set()\n    for j in range(N):\n        (num1, num2) = map(int, input().split())\n        points_set.add((num1, num2))\n    print(count_squares(points_set))", "def count_squares(points):\n    squares = 0\n    squares_found = set()\n    points_list = list(points)\n    for (i, p1) in enumerate(points_list):\n        for (j, p2) in enumerate(points_list[i + 1:]):\n            diff_vector = (p2[0] - p1[0], p2[1] - p1[1])\n            rotated_vector = (p2[1] - p1[1], -p2[0] + p1[0])\n            p3 = (p2[0] + rotated_vector[0], p2[1] + rotated_vector[1])\n            p4 = (p1[0] + rotated_vector[0], p1[1] + rotated_vector[1])\n            square_as_tuple = tuple(sorted((p1, p2, p3, p4)))\n            if p3 in points and p4 in points and (square_as_tuple not in squares_found):\n                squares += 1\n                squares_found.add(square_as_tuple)\n            p3 = (p2[0] - rotated_vector[0], p2[1] - rotated_vector[1])\n            p4 = (p1[0] - rotated_vector[0], p1[1] - rotated_vector[1])\n            square_as_tuple = tuple(sorted((p1, p2, p3, p4)))\n            if p3 in points and p4 in points and (square_as_tuple not in squares_found):\n                squares += 1\n                squares_found.add(square_as_tuple)\n    return len(squares_found)\nnum_tests = int(input())\nfor i in range(num_tests):\n    N = int(input())\n    points_set = set()\n    for j in range(N):\n        (num1, num2) = map(int, input().split())\n        points_set.add((num1, num2))\n    print(count_squares(points_set))", "def count(points_set):\n    N = len(points_set)\n    points = list(points_set)\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            (x1, y1) = points[i]\n            (x2, y2) = points[j]\n            point_sqr1 = ((x1 + x2) / 2 + (y2 - y1) / 2, (y1 + y2) / 2 - (x2 - x1) / 2)\n            point_sqr2 = ((x1 + x2) / 2 - (y2 - y1) / 2, (y1 + y2) / 2 + (x2 - x1) / 2)\n            if point_sqr1 in points_set and point_sqr2 in points_set:\n                ans += 1\n    return ans // 2\nnum_tests = int(input())\nfor i in range(num_tests):\n    N = int(input())\n    points_set = set()\n    for j in range(N):\n        (num1, num2) = map(int, input().split())\n        points_set.add((num1, num2))\n    print(count(points_set))", "def count(points_set):\n    N = len(points_set)\n    points = list(points_set)\n    ans = 0\n    for i in range(N):\n        for j in range(i + 1, N):\n            (x1, y1) = points[i]\n            (x2, y2) = points[j]\n            point_sqr1 = ((x1 + x2) / 2 + (y2 - y1) / 2, (y1 + y2) / 2 - (x2 - x1) / 2)\n            point_sqr2 = ((x1 + x2) / 2 - (y2 - y1) / 2, (y1 + y2) / 2 + (x2 - x1) / 2)\n            if point_sqr1 in points_set and point_sqr2 in points_set:\n                ans += 1\n    return ans // 2\nnum_tests = int(input())\nfor i in range(num_tests):\n    N = int(input())\n    points_set = set()\n    for j in range(N):\n        (num1, num2) = map(int, input().split())\n        points_set.add((num1, num2))\n    print(count(points_set))", "def count(points):\n    points.sort()\n    all_poiunts = set(points)\n    ans = 0\n    n = len(points)\n    for i in range(n):\n        for j in range(i + 1, n):\n            (x1, y1) = points[i]\n            (x2, y2) = points[j]\n            if y2 > y1:\n                dx = abs(y2 - y1)\n                dy = abs(x2 - x1)\n                p3 = (x1 + dx, y1 - dy)\n                p4 = (x2 + dx, y2 - dy)\n                if p3 in all_poiunts and p4 in all_poiunts:\n                    ans += 1\n    return ans\nnum_tests = int(input())\nfor _ in range(num_tests):\n    N = int(input())\n    points = []\n    for _ in range(N):\n        temp = input().split()\n        points.append((int(temp[0]), int(temp[1])))\n    print(count(points))", "def count(points):\n    points.sort()\n    record = set(points)\n    sol = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            (x1, y1) = points[i]\n            (x2, y2) = points[j]\n            if y2 > y1:\n                dx = abs(y2 - y1)\n                dy = abs(x2 - x1)\n                p3 = (x1 + dx, y1 - dy)\n                p4 = (x2 + dx, y2 - dy)\n                if p3 in record and p4 in record:\n                    sol += 1\n    return sol\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    points = []\n    for s in range(N):\n        temp = input().split()\n        points.append((int(temp[0]), int(temp[1])))\n    print(count(points))", "def count(points):\n    points.sort()\n    count = 0\n    points_set = set(points)\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            pt1 = points[i]\n            pt2 = points[j]\n            x1 = pt1[0]\n            x2 = pt2[0]\n            y1 = pt1[1]\n            y2 = pt2[1]\n            if y2 > y1:\n                dy = abs(y2 - y1)\n                dx = abs(x2 - x1)\n                pt3 = (x1 + dy, y1 - dx)\n                pt4 = (x2 + dy, y2 - dx)\n                if pt3 in points_set and pt4 in points_set:\n                    count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    points = []\n    for s in range(N):\n        temp = input().split()\n        points.append((int(temp[0]), int(temp[1])))\n    print(count(points))", "def count(points):\n    points.sort()\n    count = 0\n    for i in range(len(points)):\n        for j in range(i, len(points)):\n            pt1 = points[i]\n            pt2 = points[j]\n            x1 = pt1[0]\n            x2 = pt2[0]\n            y1 = pt1[1]\n            y2 = pt2[1]\n            if y2 > y1:\n                dx = abs(y2 - y1)\n                dy = abs(x2 - x1)\n                pt3 = (x1 + dx, y1 - dy)\n                pt4 = (x2 + dx, y2 - dy)\n                if pt3 in points and pt4 in points:\n                    count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    points = []\n    for s in range(N):\n        temp = input().split()\n        points.append((int(temp[0]), int(temp[1])))\n    print(count(points))", "def count(points):\n    points.sort()\n    count = 0\n    for i in range(len(points)):\n        for j in range(i, len(points)):\n            pt1 = points[i]\n            pt2 = points[j]\n            x1 = pt1[0]\n            x2 = pt2[0]\n            y1 = pt1[1]\n            y2 = pt2[1]\n            if y2 > y1:\n                dx = abs(y2 - y1)\n                dy = abs(x2 - x1)\n                pt3 = (x1 + dx, y1 - dy)\n                pt4 = (x2 + dx, y2 - dy)\n                if pt3 in points and pt4 in points:\n                    count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    points = []\n    for s in range(N):\n        temp = input().split()\n        points.append((int(temp[0]), int(temp[1])))\n    print(count(points))", "def count(points):\n    points.sort()\n    count = 0\n    for i in range(len(points)):\n        for j in range(i, len(points)):\n            pt1 = points[i]\n            pt2 = points[j]\n            x1 = pt1[0]\n            x2 = pt2[0]\n            y1 = pt1[1]\n            y2 = pt2[1]\n            if y2 > y1:\n                dx = abs(y2 - y1)\n                dy = abs(x2 - x1)\n                pt3 = (x1 + dx, y1 - dy)\n                pt4 = (x2 + dx, y2 - dy)\n                if pt3 in points and pt4 in points:\n                    count += 1\n    return count\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    points = []\n    for s in range(N):\n        temp = input().split()\n        points.append((int(temp[0]), int(temp[1])))\n    print(count(points))", "def count(points):\n    points.sort()\n    record = set(points)\n    sol = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            (x1, y1) = points[i]\n            (x2, y2) = points[j]\n            if y2 > y1:\n                dx = abs(y2 - y1)\n                dy = abs(x2 - x1)\n                p3 = (x1 + dx, y1 - dy)\n                p4 = (x2 + dx, y2 - dy)\n                if p3 in record and p4 in record:\n                    sol += 1\n    return sol\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    points = []\n    for s in range(N):\n        temp = input().split()\n        points.append((int(temp[0]), int(temp[1])))\n    print(count(points))", "def count(points):\n    points.sort()\n    record = set(points)\n    sol = 0\n    for i in range(len(points)):\n        for j in range(i + 1, len(points)):\n            (x1, y1) = points[i]\n            (x2, y2) = points[j]\n            if y2 > y1:\n                dx = abs(y2 - y1)\n                dy = abs(x2 - x1)\n                p3 = (x1 + dx, y1 - dy)\n                p4 = (x2 + dx, y2 - dy)\n                if p3 in record and p4 in record:\n                    sol += 1\n    return sol\nt = int(input())\nfor i in range(t):\n    N = int(input())\n    points = []\n    for s in range(N):\n        temp = input().split()\n        points.append((int(temp[0]), int(temp[1])))\n    print(count(points))", "def solution(x, y):\n    point_set = set()\n    for i in range(len(x)):\n        point_set.add((x[i], y[i]))\n    squares = 0\n    for i_idx in range(len(x)):\n        for j_idx in range(i_idx + 1, len(x)):\n            i = (x[i_idx], y[i_idx])\n            j = (x[j_idx], y[j_idx])\n            if i[1] < j[1] or (i[1] == j[1] and i[0] >= j[0]):\n                (i, j) = (j, i)\n            if i[0] >= j[0]:\n                continue\n            del_x = j[0] - i[0]\n            del_y = j[1] - i[1]\n            k = (i[0] - del_y, i[1] + del_x)\n            l = (j[0] - del_y, j[1] + del_x)\n            if k in point_set and l in point_set:\n                squares += 1\n    return squares\nt = int(input())\nfor test_case in range(t):\n    N = int(input())\n    x_coords = []\n    y_coords = []\n    for point in range(N):\n        coords = input().split(' ')\n        x_coords.append(int(coords[0]))\n        y_coords.append(int(coords[1]))\n    print(solution(x_coords, y_coords))", "def getSquares(x, y):\n    z = sorted(zip(x, y))\n    point_set = set()\n    for i in range(len(z)):\n        point_set.add(z[i])\n    squares = 0\n    for i_idx in range(len(x)):\n        for j_idx in range(i_idx + 1, len(x)):\n            i = z[i_idx]\n            j = z[j_idx]\n            mid = ((i[0] + j[0]) / 2, (i[1] + j[1]) / 2)\n            del_x = j[0] - i[0]\n            del_y = j[1] - i[1]\n            if del_x != 0:\n                if del_y / del_x >= 0:\n                    k = (mid[0] - del_y / 2, mid[1] + del_x / 2)\n                    l = (mid[0] + del_y / 2, mid[1] - del_x / 2)\n                    if k in point_set and l in point_set and (k != i and l != j):\n                        squares += 1\n    return squares\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    x = []\n    y = []\n    for pt in range(n):\n        point = input()\n        x.append(int(point.split(' ')[0]))\n        y.append(int(point.split(' ')[1]))\n    print(getSquares(x, y))", "def solve(x, y):\n    n = len(x)\n    pts = set()\n    count = 0\n    for i in range(n):\n        pts.add((x[i], y[i]))\n    points = list(pts)\n    for i in range(n):\n        for j in range(i + 1, n):\n            a = points[i]\n            c = points[j]\n            (b, d) = getOtherPoints(a, c)\n            if b in pts and d in pts:\n                count += 1\n    return count // 2\n\ndef getOtherPoints(a, c):\n    ax = a[0]\n    ay = a[1]\n    cx = c[0]\n    cy = c[1]\n    mid_x = (ax + cx) / 2\n    mid_y = (ay + cy) / 2\n    delta_x = cx - mid_x\n    delta_y = cy - mid_y\n    bx = mid_x - delta_y\n    by = mid_y + delta_x\n    dx = mid_x + delta_y\n    dy = mid_y - delta_x\n    b = (bx, by)\n    d = (dx, dy)\n    return (b, d)\nt = int(input())\nfor test in range(t):\n    n = int(input())\n    x = []\n    y = []\n    for pt in range(n):\n        point = input()\n        x.append(int(point.split(' ')[0]))\n        y.append(int(point.split(' ')[1]))\n    print(solve(x, y))", "def solution(x, y):\n    point_set = set()\n    for i in range(len(x)):\n        point_set.add((x[i], y[i]))\n    squares = 0\n    for i_idx in range(len(x)):\n        for j_idx in range(i_idx + 1, len(x)):\n            i = (x[i_idx], y[i_idx])\n            j = (x[j_idx], y[j_idx])\n            if i[1] < j[1] or (i[1] == j[1] and i[0] >= j[0]):\n                (i, j) = (j, i)\n            if i[0] >= j[0]:\n                continue\n            del_x = j[0] - i[0]\n            del_y = j[1] - i[1]\n            k = (i[0] - del_y, i[1] + del_x)\n            l = (j[0] - del_y, j[1] + del_x)\n            if k in point_set and l in point_set:\n                squares += 1\n    return squares\nt = int(input())\nfor test_case in range(t):\n    N = int(input())\n    x_coords = []\n    y_coords = []\n    for point in range(N):\n        coords = input().split(' ')\n        x_coords.append(int(coords[0]))\n        y_coords.append(int(coords[1]))\n    print(solution(x_coords, y_coords))", "def solution(x, y):\n    point_set = set()\n    for i in range(len(x)):\n        point_set.add((x[i], y[i]))\n    squares = 0\n    for i_idx in range(len(x)):\n        for j_idx in range(i_idx + 1, len(x)):\n            i = (x[i_idx], y[i_idx])\n            j = (x[j_idx], y[j_idx])\n            if i[1] < j[1] or (i[1] == j[1] and i[0] >= j[0]):\n                (i, j) = (j, i)\n            if i[0] >= j[0]:\n                continue\n            del_x = j[0] - i[0]\n            del_y = j[1] - i[1]\n            k = (i[0] - del_y, i[1] + del_x)\n            l = (j[0] - del_y, j[1] + del_x)\n            if k in point_set and l in point_set:\n                squares += 1\n    return squares\nt = int(input())\nfor test_case in range(t):\n    N = int(input())\n    x_coords = []\n    y_coords = []\n    for point in range(N):\n        coords = input().split(' ')\n        x_coords.append(int(coords[0]))\n        y_coords.append(int(coords[1]))\n    print(solution(x_coords, y_coords))", "def solution(x, y):\n    points = set()\n    for idx in range(len(x)):\n        points.add((x[idx], y[idx]))\n    n_squares = 0\n    for i_idx in range(len(x)):\n        for j_idx in range(i_idx + 1, len(x)):\n            x_1 = (x[i_idx], y[i_idx])\n            x_2 = (x[j_idx], y[j_idx])\n            if x_1[1] == x_2[1] and x_1[0] >= x_2[0] or x_1[1] < x_2[1]:\n                (x_1, x_2) = (x_2, x_1)\n            perp_x = x_2[0] - x_1[0]\n            perp_y = x_2[1] - x_1[1]\n            z = (x_1[0] - perp_y, x_1[1] + perp_x)\n            w = (x_2[0] - perp_y, x_2[1] + perp_x)\n            if z in points and w in points:\n                n_squares += 1\n    return n_squares // 2\nt = int(input())\nfor test_case in range(t):\n    N = int(input())\n    x_coords = []\n    y_coords = []\n    for point in range(N):\n        coords = input().split(' ')\n        x_coords.append(int(coords[0]))\n        y_coords.append(int(coords[1]))\n    print(solution(x_coords, y_coords))", "def solution(x, y):\n    point_set = set()\n    for i in range(len(x)):\n        point_set.add((x[i], y[i]))\n    squares = 0\n    for i_idx in range(len(x)):\n        for j_idx in range(i_idx + 1, len(x)):\n            i = (x[i_idx], y[i_idx])\n            j = (x[j_idx], y[j_idx])\n            if i[1] < j[1] or (i[1] == j[1] and i[0] >= j[0]):\n                (i, j) = (j, i)\n            if i[0] >= j[0]:\n                continue\n            del_x = j[0] - i[0]\n            del_y = j[1] - i[1]\n            k = (i[0] - del_y, i[1] + del_x)\n            l = (j[0] - del_y, j[1] + del_x)\n            if k in point_set and l in point_set:\n                squares += 1\n    return squares\nt = int(input())\nfor test_case in range(t):\n    N = int(input())\n    x_coords = []\n    y_coords = []\n    for point in range(N):\n        coords = input().split(' ')\n        x_coords.append(int(coords[0]))\n        y_coords.append(int(coords[1]))\n    print(solution(x_coords, y_coords))", "import sys\nt = int(input())\nwhile t:\n    n = int(input())\n    s = set()\n    for i in range(n):\n        line = input().split()\n        s.add((int(line[0]), int(line[1])))\n    count = 0\n    a = list(s)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            (x1, y1) = (a[i][0], a[i][1])\n            (x2, y2) = (a[j][0], a[j][1])\n            if x1 > x2:\n                tmp = x1\n                x1 = x2\n                x2 = tmp\n                tmp = y1\n                y1 = y2\n                y2 = tmp\n            (x3, y3) = (x2 + (y1 - y2), y2 + (x2 - x1))\n            (x4, y4) = (x1 + (y1 - y2), y1 + (x2 - x1))\n            if (x3, y3) in s and (x4, y4) in s:\n                count += 1\n            (x3, y3) = (x2 - (y1 - y2), y2 - (x2 - x1))\n            (x4, y4) = (x1 - (y1 - y2), y1 - (x2 - x1))\n            if (x3, y3) in s and (x4, y4) in s:\n                count += 1\n    sys.stdout.write(str(int(count / 4)) + '\\n')\n    t -= 1", "import sys\nt = int(input())\nwhile t:\n    n = int(input())\n    s = set()\n    for i in range(n):\n        line = input().split()\n        s.add((int(line[0]), int(line[1])))\n    count = 0\n    a = list(s)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            (x1, y1) = (a[i][0], a[i][1])\n            (x2, y2) = (a[j][0], a[j][1])\n            if x1 > x2:\n                tmp = x1\n                x1 = x2\n                x2 = tmp\n                tmp = y1\n                y1 = y2\n                y2 = tmp\n            (x3, y3) = (x2 + (y1 - y2), y2 + (x2 - x1))\n            (x4, y4) = (x1 + (y1 - y2), y1 + (x2 - x1))\n            if (x3, y3) in s and (x4, y4) in s:\n                count += 1\n            (x3, y3) = (x2 - (y1 - y2), y2 - (x2 - x1))\n            (x4, y4) = (x1 - (y1 - y2), y1 - (x2 - x1))\n            if (x3, y3) in s and (x4, y4) in s:\n                count += 1\n    sys.stdout.write(str(int(count / 4)) + '\\n')\n    t -= 1", "import sys\nt = int(input())\nwhile t:\n    n = int(input())\n    s = set()\n    for i in range(n):\n        line = input().split()\n        s.add((int(line[0]), int(line[1])))\n    count = 0\n    a = list(s)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            (x1, y1) = (a[i][0], a[i][1])\n            (x2, y2) = (a[j][0], a[j][1])\n            if x1 > x2:\n                tmp = x1\n                x1 = x2\n                x2 = tmp\n                tmp = y1\n                y1 = y2\n                y2 = tmp\n            (x3, y3) = (x2 + (y1 - y2), y2 + (x2 - x1))\n            (x4, y4) = (x1 + (y1 - y2), y1 + (x2 - x1))\n            if (x3, y3) in s and (x4, y4) in s:\n                count += 1\n            (x3, y3) = (x2 - (y1 - y2), y2 - (x2 - x1))\n            (x4, y4) = (x1 - (y1 - y2), y1 - (x2 - x1))\n            if (x3, y3) in s and (x4, y4) in s:\n                count += 1\n    sys.stdout.write(str(int(count / 4)) + '\\n')\n    t -= 1", "import sys\nt = int(input())\nwhile t:\n    n = int(input())\n    s = set()\n    for i in range(n):\n        line = input().split()\n        s.add((int(line[0]), int(line[1])))\n    count = 0\n    a = list(s)\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            (x1, y1) = (a[i][0], a[i][1])\n            (x2, y2) = (a[j][0], a[j][1])\n            if x1 > x2:\n                tmp = x1\n                x1 = x2\n                x2 = tmp\n                tmp = y1\n                y1 = y2\n                y2 = tmp\n            (x3, y3) = (x2 + (y1 - y2), y2 + (x2 - x1))\n            (x4, y4) = (x1 + (y1 - y2), y1 + (x2 - x1))\n            if (x3, y3) in s and (x4, y4) in s:\n                count += 1\n            (x3, y3) = (x2 - (y1 - y2), y2 - (x2 - x1))\n            (x4, y4) = (x1 - (y1 - y2), y1 - (x2 - x1))\n            if (x3, y3) in s and (x4, y4) in s:\n                count += 1\n    sys.stdout.write(str(int(count / 4)) + '\\n')\n    t -= 1"]