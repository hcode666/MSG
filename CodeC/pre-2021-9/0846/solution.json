["fact = [None] * 40000\nfact[0] = 1\nfor i in range(1, 40000):\n    fact[i] = fact[i - 1] * i\nt = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    if n < k:\n        print(0)\n        continue\n    k = min(k, n - k)\n    if k == 0:\n        print(1)\n    elif k == 1:\n        print(n)\n    elif k == 2:\n        print(n * (n - 1) // 2)\n    elif k == 3:\n        print(n * (n - 1) * (n - 2) // 6)\n    elif k == 4:\n        print(n * (n - 1) * (n - 2) * (n - 3) // 24)\n    else:\n        print(fact[n] // (fact[k] * fact[n - k]))", "fact = [None] * 40000\nfact[0] = 1\nfor i in range(1, 40000):\n    fact[i] = fact[i - 1] * i\nt = int(input())\nfor z in range(t):\n    (n, k) = map(int, input().split())\n    if n < k:\n        print(0)\n        continue\n    k = min(k, n - k)\n    if k == 0:\n        print(1)\n    elif k == 1:\n        print(n)\n    elif k == 2:\n        print(n * (n - 1) // 2)\n    elif k == 3:\n        print(n * (n - 1) * (n - 2) // 6)\n    elif k == 4:\n        print(n * (n - 1) * (n - 2) * (n - 3) // 24)\n    else:\n        print(fact[n] // (fact[k] * fact[n - k]))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        val = 1\n        k = min(k, n - k)\n        for i in range(k):\n            val = val * (n - i)\n            val = val // (i + 1)\n        print(int(val))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        val = 1\n        k = min(k, n - k)\n        for i in range(k):\n            val = val * (n - i)\n            val = val // (i + 1)\n        print(int(val))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        val = 1\n        k = min(k, n - k)\n        for i in range(k):\n            val = val * (n - i)\n            val = val // (i + 1)\n        print(int(val))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        val = 1\n        k = min(k, n - k)\n        for i in range(k):\n            val = val * (n - i)\n            val = val // (i + 1)\n        print(int(val))", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        val = 1\n        k = min(k, n - k)\n        for i in range(k):\n            val = val * (n - i)\n            val = val // (i + 1)\n        print(int(val))", "from sys import stdin\nfrom math import *\n\ndef sin():\n    return stdin.readline()\n\ndef cm(n, k):\n    if n < k:\n        return 0\n    if k > n - k:\n        k = n - k\n    p = 1\n    for i in range(1, k + 1):\n        d = gcd(p, i)\n        p //= d\n        p *= (n - i + 1) // (i // d)\n    return p\nfor _ in range(int(sin())):\n    (n, r) = map(int, sin().split())\n    print(cm(n, r))", "def binom(n, r):\n    if 2 * r > n:\n        r = n - r\n    if r < 0:\n        return 0\n    bnm = 1\n    for t in range(1, r + 1):\n        bnm *= n + 1 - t\n        bnm //= t\n    return bnm\nt = int(input())\nfor ti in range(t):\n    (n, k) = map(int, input().split())\n    print(binom(n, k))", "from math import factorial as f\n\ndef ncr(n, r):\n    if r > n:\n        return 0\n    a = n\n    b = r\n    c = n - r\n    d = max(b, c)\n    e = min(b, c)\n    e = f(e)\n    ans = 1\n    for i in range(d + 1, n + 1):\n        ans *= i\n    return ans // e\nt = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    print(ncr(n, r))", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nwhile t > 0:\n    m = 1\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        if n - k < k:\n            k = n - k\n        i = 1\n        ans = 1\n        while i < k + 1:\n            l = gcd(ans, i)\n            ans = ans // l\n            c = i // l\n            ans *= (n - i + 1) // c\n            i += 1\n        print(ans)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    m = 1\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        if n - k < k:\n            k = n - k\n        i = n\n        while i > n - k:\n            m = m * i\n            i -= 1\n        o = 1\n        while k > 0:\n            o = o * k\n            k -= 1\n        print(m // o)\n    t -= 1", "def get_ans(n, k):\n    ans = 1\n    if n < k:\n        return 0\n    k = min(k, n - k)\n    for i in range(1, k + 1):\n        ans *= n - i + 1\n        ans //= i\n    return ans\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(get_ans(n, k))", "import operator as op\nfrom functools import reduce\nfrom math import *\nt = int(input())\nfor _ in range(t):\n    (n, r) = map(int, input().split())\n    if n < r:\n        print(0)\n        continue\n    r = min(r, n - r)\n    nu = reduce(op.mul, range(n, n - r, -1), 1)\n    de = reduce(op.mul, range(1, r + 1), 1)\n    print(nu // de)", "for _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        res = 1\n        k = min(k, n - k)\n        for i in range(k):\n            res = res * (n - i)\n            res = res // (i + 1)\n        print(int(res))", "import math\n\ndef c_fact(a, b):\n    res = 1\n    for x in range(b + 1, a + 1):\n        res *= x\n    return res\nfor t in range(int(input())):\n    (n, r) = map(int, input().split())\n    if n >= r:\n        x = c_fact(n, max(r, n - r)) // math.factorial(min(r, n - r))\n        print(x)\n    else:\n        print(0)", "from functools import reduce\n\ndef ncr(n, r):\n    if r > n:\n        return 0\n    if n == r or r == 0:\n        return 1\n    r = max(r, n - r)\n    above = reduce(lambda x, y: x * y, range(n, r, -1))\n    bottom = reduce(lambda x, y: x * y, range(n - r, 0, -1))\n    return above // bottom\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    print(ncr(n, k))", "from math import factorial as fact\nimport operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nfor _ in range(int(input())):\n    (N, K) = list(map(int, input().split()))\n    if N < K:\n        print(0)\n    else:\n        print(ncr(N, K))", "import functools\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    a = functools.reduce(lambda x, y: x * y, range(n, n - r, -1), 1)\n    b = functools.reduce(lambda x, y: x * y, range(1, r + 1), 1)\n    return a // b\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    if k > n:\n        print(0)\n    else:\n        print(ncr(n, k))", "import operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    if a < b:\n        print(0)\n        continue\n    print(ncr(a, b))", "import math\nfor t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    k = temp[1]\n    if n < k:\n        print(0)\n        continue\n    elif k == 0 or k == n:\n        print(1)\n        continue\n    elif n == 0:\n        print(1)\n        continue\n    if k > n - k:\n        k = n - k\n    ans = n\n    i = 2\n    while i <= k:\n        ans *= n - i + 1\n        ans //= i\n        i += 1\n    print(ans)", "import math\nfor t in range(int(input())):\n    temp = list(map(int, input().split()))\n    n = temp[0]\n    k = temp[1]\n    if n < k:\n        print(0)\n        continue\n    elif k == 0 or k == n:\n        print(1)\n        continue\n    elif n == 0:\n        print(1)\n        continue\n    if k > n - k:\n        k = n - k\n    ans = n\n    i = 2\n    while i <= k:\n        ans *= n - i + 1\n        ans //= i\n        i += 1\n    print(ans)", "def choose(n, k):\n    if 0 <= k <= n:\n        ntok = 1\n        ktok = 1\n        for t in range(1, min(k, n - k) + 1):\n            ntok *= n\n            ktok *= t\n            n -= 1\n        return ntok // ktok\n    else:\n        return 0\nT = 1\nT = int(input().strip())\nfor _ in range(T):\n    (n, k) = map(int, input().split())\n    print(int(choose(n, k)))", "t = int(input())\nfor i in range(t):\n    L = list(map(int, input().split()))\n    n = L[0]\n    k = L[1]\n    if k == 0 or k == n:\n        print(1)\n    elif k > n:\n        print(0)\n    elif max(k, n - k) == k:\n        ans = 1\n        for j in range(k + 1, n + 1):\n            ans *= j\n        for j in range(2, n - k + 1):\n            ans //= j\n        print(ans)\n    else:\n        ans = 1\n        for j in range(n - k + 1, n + 1):\n            ans *= j\n        for j in range(2, k + 1):\n            ans //= j\n        print(ans)", "def com(a, b):\n    if b >= 0 and a >= 0:\n        if b > a:\n            return 0\n        if a == b:\n            return 1\n        if b == 0:\n            return 1\n        r = max(b, a - b)\n        up = down = 1\n        for i in range(r + 1, a + 1):\n            up *= i\n        for i in range(1, a - r + 1):\n            down *= i\n        return up // down\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(com(a, b))", "def com(a, b):\n    if b >= 0 and a >= 0:\n        if b > a:\n            return 0\n        if a == b:\n            return 1\n        if b == 0:\n            return 1\n        r = max(b, a - b)\n        up = down = 1\n        for i in range(r + 1, a + 1):\n            up *= i\n        for i in range(1, a - r + 1):\n            down *= i\n        return up // down\nfor _ in range(int(input())):\n    (a, b) = map(int, input().split())\n    print(com(a, b))", "t = int(input())\nfor testcase in range(0, t):\n    s = input()\n    s = list(s.split())\n    n = int(s[0])\n    k = int(s[1])\n    a = []\n    num = 1\n    den = 1\n    a.append(1)\n    if k > n:\n        x = 0\n    else:\n        if k >= n - k:\n            i = k + 1\n            while i <= n:\n                num = num * i\n                i = i + 1\n        else:\n            i = n - k + 1\n            while i <= n:\n                num = num * i\n                i = i + 1\n        if k >= n - k:\n            i = 1\n            while i <= n - k:\n                den = den * i\n                i = i + 1\n        else:\n            i = 1\n            while i <= k:\n                den = den * i\n                i = i + 1\n        x = num // den\n    print(x)", "def main():\n    from sys import stdin, stdout\n    for _ in range(int(stdin.readline())):\n        (n, r) = map(int, stdin.readline().split())\n        if n >= r:\n            r = min(n - r, r)\n            if r:\n                for i in range(n - 1, n - r, -1):\n                    n *= i\n                for i in range(r, 1, -1):\n                    n //= i\n            else:\n                n = 1\n        else:\n            n = 0\n        stdout.write(str(n) + '\\n')\nmain()", "def getAns(N, K):\n    ans = 1\n    for r in range(1, K + 1):\n        ans = ans * (N - r + 1) // r\n    return ans\nfor tc in range(int(input())):\n    (N, K) = map(int, input().split())\n    if K > N or K < 0:\n        print(0)\n    else:\n        print(getAns(N, min(K, N - K)))", "def getAns(N, K):\n    ans = 1\n    for r in range(1, K + 1):\n        ans = ans * (N - r + 1) // r\n    return ans\nfor tc in range(int(input())):\n    (N, K) = [int(x) for x in input().split()]\n    if K > N or K < 0:\n        print(0)\n    else:\n        print(getAns(N, min(K, N - K)))", "def choose(n, r):\n    if r < 0 or r > n:\n        return 0\n    if r > n - r:\n        r = n - r\n    prod = 1\n    for i in range(r):\n        prod *= n - i\n        prod //= i + 1\n    return prod\nt = int(input())\nfor it in range(t):\n    (n, k) = [int(word) for word in input().split()]\n    print(choose(n, k))", "def C(n, k):\n    if k <= n:\n        tmpn = 1\n        tmpk = 1\n        for t in range(1, min(k, n - k) + 1):\n            tmpn *= n\n            tmpk *= t\n            n -= 1\n        return tmpn // tmpk\n    else:\n        return 0\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    result = C(n, k)\n    print(result)", "def alg(n, k):\n    if 0 <= k <= n:\n        ntok = 1\n        ktok = 1\n        for t in range(1, min(k, n - k) + 1):\n            ntok *= n\n            ktok *= t\n            n -= 1\n        return ntok // ktok\n    else:\n        return 0\nt = int(input())\nfor i in range(t):\n    (n, r) = map(int, input().split())\n    result = alg(n, r)\n    print(result)", "import sys\nimport math\nfrom time import time\nfrom itertools import permutations, combinations\nimport collections\nimport functools\nfrom fractions import gcd, Fraction\nimport string\nimport operator\nimport bisect\n\nclass timed(object):\n\n    def __init__(self, func):\n        self.func = func\n\n    def __call__(self, *args):\n        t1 = time()\n        ret = self.func(*args)\n        dif_time = time() - t1\n        print('%s: returned %s in %f seconds' % (self.func.__name__, ret, dif_time))\n        return ret\n\ndef comp(f1, f2, *args):\n    t1 = time()\n    r1 = f1(*args) if f1 is not None else None\n    t2 = time()\n    r2 = f2(*args) if f2 is not None else None\n    t3 = time()\n    res = '%5s: %s in %f\\n%5s: %s in %f' % (f1.__name__ if f1 is not None else None, r1, t2 - t1, f2.__name__ if f2 is not None else None, r2, t3 - t2)\n    if r1 != r2:\n        dr = '!! DIFFERENT RESULTS !!'\n        res = dr + '\\n' + res + '\\n' + dr\n    print(res)\n\ndef choose(n, k):\n    if 0 <= k <= n:\n        ntok = 1\n        ktok = 1\n        for t in range(1, min(k, n - k) + 1):\n            ntok *= n\n            ktok *= t\n            n -= 1\n        return ntok // ktok\n    else:\n        return 0\n\ndef alg(N, K):\n    return choose(N, K)\n\ndef main():\n    data = sys.stdin\n    nb = int(data.readline())\n    for icase in range(nb):\n        (N, K) = list(map(int, data.readline().split()))\n        res = alg(N, K)\n        print(res)\nmain()", "import os\nimport sys\nimport collections\n__DEBUG__ = 0\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return list(map(int, input().split()))\n\ndef read_split_ints():\n    return list(map(int, list(input())))\n\ndef read_float():\n    return float(input())\n\ndef debug(*args):\n    if __DEBUG__:\n        print('[DEBUG]: ', *args)\n\ndef dump_1d(name, array):\n    if not __DEBUG__:\n        return\n    for i in range(len(array)):\n        print('{}[{}]: {}'.format(name, i, array[i]))\n    print()\n\ndef dump_2d(name, array):\n    if not __DEBUG__:\n        return\n    for i in range(len(array)):\n        for j in range(len(array[i])):\n            print('{}[{}][{}]: {}'.format(name, i, j, array[i][j]))\n    print()\n\ndef product(array):\n    ans = 1\n    for i in array:\n        ans *= i\n    return ans\n\ndef nCm(n, m):\n    m = min(m, n - m)\n    return product(range(n - m + 1, n + 1)) // product(range(1, m + 1))\n\ndef proc_case():\n    (N, K) = read_ints()\n    assert N >= K\n    if N < K:\n        return 0\n    return nCm(N, K)\n\ndef main():\n    T = read_int()\n    debug('T ', T)\n    for i in range(T):\n        ans = proc_case()\n        print(ans)\nmain()", "import os\nimport sys\nimport collections\n__DEBUG__ = 0\n\ndef read_int():\n    return int(input())\n\ndef read_ints():\n    return list(map(int, input().split()))\n\ndef read_split_ints():\n    return list(map(int, list(input())))\n\ndef read_float():\n    return float(input())\n\ndef debug(*args):\n    if __DEBUG__:\n        print('[DEBUG]: ', *args)\n\ndef dump_1d(name, array):\n    if not __DEBUG__:\n        return\n    for i in range(len(array)):\n        print('{}[{}]: {}'.format(name, i, array[i]))\n    print()\n\ndef dump_2d(name, array):\n    if not __DEBUG__:\n        return\n    for i in range(len(array)):\n        for j in range(len(array[i])):\n            print('{}[{}][{}]: {}'.format(name, i, j, array[i][j]))\n    print()\n\ndef product(array):\n    ans = 1\n    for i in array:\n        ans *= i\n    return ans\n\ndef nCm(n, m):\n    m = min(m, n - m)\n    return product(range(n - m + 1, n + 1)) // product(range(1, m + 1))\n\ndef proc_case():\n    (N, K) = read_ints()\n    if N < K:\n        return 0\n    return nCm(N, K)\n\ndef main():\n    T = read_int()\n    debug('T ', T)\n    for i in range(T):\n        ans = proc_case()\n        print(ans)\nmain()", "def fact(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * fact(n - 1)\nn = int(input())\nwhile n > 0:\n    s = input()\n    (a, b) = [int(i) for i in s.split(' ')]\n    if b > a:\n        print('0')\n    else:\n        c = a - b\n        if b > c:\n            x = b\n            b = c\n            c = x\n        num = 1\n        den = fact(b)\n        for i in range(a, c, -1):\n            num = num * i\n        print(num // den)\n    n = n - 1", "import sys\nttt = int(sys.stdin.readline().strip())\nfor i in range(ttt):\n    (n, k) = map(int, sys.stdin.readline().strip().split())\n    if k < 0 or k > n:\n        res = 0\n    else:\n        if 2 * k > n:\n            k = n - k\n        res = 1\n        for j in range(k):\n            res *= n - j\n        for j in range(1, k + 1):\n            res //= j\n    print(res)"]