["def reign(arr, K):\n    subarr1 = kadanesmax(arr)\n    arr.reverse()\n    subarr2 = kadanesmax(arr)\n    subarr2.reverse()\n    prosperity = arr[0] + arr[-1]\n    for i in range(len(arr) - K - 1):\n        year = subarr2[i + (K + 1)] + subarr1[i]\n        prosperity = max(prosperity, year)\n    return prosperity\n\ndef kadanesmax(arr):\n    maxend = arr[0]\n    maxupto = arr[0]\n    lmax = [arr[0]]\n    for i in range(1, len(arr)):\n        if maxend < 0:\n            maxend = arr[i]\n        else:\n            maxend += arr[i]\n        maxupto = max(maxupto, maxend)\n        lmax.append(maxupto)\n    return lmax\nT = int(input())\nfor t in range(T):\n    constraint = input()\n    (N, K) = [int(x) for x in constraint.split()]\n    line = input()\n    years = [int(x) for x in line.split()]\n    print(reign(years, K))", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    L = list(map(int, input().split()))\n    M = [L[0]]\n    for i in range(1, n):\n        M.append(max(0, M[-1]) + L[i])\n    N = [L[-1]]\n    for i in range(n - 2, -1, -1):\n        N.append(max(0, N[-1]) + L[i])\n    M1 = [M[0]]\n    m = M[0]\n    for i in range(1, n):\n        m = max(m, M[i])\n        M1.append(m)\n    N1 = [N[0]]\n    m = N[0]\n    for i in range(1, n):\n        m = max(m, N[i])\n        N1.append(m)\n    N1.reverse()\n    i = 0\n    j = k + 1\n    ans = M1[i] + N1[j]\n    while j < n:\n        ans = max(ans, M1[i] + N1[j])\n        i += 1\n        j += 1\n    print(ans)", "import math\n\ndef snek(a, n, k):\n    ans = [-math.inf] * (n - k)\n    c = 0\n    for x in range(n - k):\n        c += a[x]\n        if c < a[x]:\n            c = a[x]\n        ans[x] = max(c, ans[x - 1])\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k += 1\n    l = snek(a, n, k)\n    r = snek(a[::-1], n, k)[::-1]\n    ans = -math.inf\n    for j in range(n - k):\n        m = l[j] + r[j]\n        if m > ans:\n            ans = m\n    print(ans)", "import math\n\ndef snek(a, n, k):\n    ans = [-math.inf] * (n - k)\n    c = 0\n    for x in range(n - k):\n        c += a[x]\n        if c < a[x]:\n            c = a[x]\n        ans[x] = max(c, ans[x - 1])\n    return ans\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k += 1\n    l = snek(a, n, k)\n    r = snek(a[::-1], n, k)[::-1]\n    ans = -math.inf\n    for j in range(n - k):\n        m = l[j] + r[j]\n        if m > ans:\n            ans = m\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (n, k) = input().split(' ')\n    n = int(n)\n    k = int(k)\n    arr = input().split(' ')\n    arr = [int(x) for x in arr[:n]]\n    lpsum = [0 for i in range(n)]\n    rpsum = [0 for i in range(n)]\n    lpsum[0] = arr[0]\n    rpsum[-1] = arr[-1]\n    for i in range(1, n):\n        if arr[i] >= arr[i] + lpsum[i - 1]:\n            lpsum[i] = arr[i]\n        else:\n            lpsum[i] = arr[i] + lpsum[i - 1]\n    for i in range(n - 2, -1, -1):\n        if arr[i] >= rpsum[i + 1] + arr[i]:\n            rpsum[i] = arr[i]\n        else:\n            rpsum[i] = arr[i] + rpsum[i + 1]\n    lmax = [0 for i in range(n)]\n    rmax = [0 for i in range(n)]\n    lmaxi = -float('inf')\n    for i in range(n):\n        lmax[i] = max(lmaxi, lpsum[i])\n        lmaxi = max(lmaxi, lpsum[i])\n    rmaxi = -float('inf')\n    for i in range(n - 1, -1, -1):\n        rmax[i] = max(rmaxi, rpsum[i])\n        rmaxi = max(rmaxi, rpsum[i])\n    ans = -float('inf')\n    for i in range(0, n - k - 1):\n        ans = max(ans, lmax[i] + rmax[i + k + 1])\n    print(ans)", "import math\n\ndef helper(arr, n, k):\n    ans = [-math.inf] * (n - k)\n    cur = 0\n    for x in range(n - k):\n        cur += arr[x]\n        if cur < arr[x]:\n            cur = arr[x]\n        ans[x] = max(cur, ans[x - 1])\n    return ans\nt = int(input())\nfor x in range(t):\n    (n, k) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    k += 1\n    left = helper(arr, n, k)\n    right = helper(arr[::-1], n, k)[::-1]\n    ans = -math.inf\n    for x in range(n - k):\n        temp = left[x] + right[x]\n        if temp > ans:\n            ans = temp\n    print(ans)", "import sys\n\ndef solveCase():\n    global tabInit, K, tab, tabR2L\n    (N, K) = map(int, f.readline().split())\n    tabInit = list(map(int, f.readline().split()))\n    tab = [v for v in tabInit]\n    tabR2L = [v for v in tabInit]\n    for i in range(1, N):\n        s = tab[i - 1] + tab[i]\n        if s > tab[i]:\n            tab[i] = s\n    for i in range(1, N):\n        if tab[i - 1] > tab[i]:\n            tab[i] = tab[i - 1]\n    for i in range(N - 2, -1, -1):\n        s = tabR2L[i + 1] + tabR2L[i]\n        if s > tabR2L[i]:\n            tabR2L[i] = s\n    for i in range(N - 2, -1, -1):\n        if tabR2L[i + 1] > tabR2L[i]:\n            tabR2L[i] = tabR2L[i + 1]\n    valMax = -sys.maxsize\n    for i in range(0, N - K - 1):\n        valMax = max(valMax, tab[i] + tabR2L[i + K + 1])\n    return valMax\n\ndef tests():\n    global f\n    f = open('tests.txt')\n    bFail = False\n    i = 1\n    while 'END' not in f.readline():\n        res = str(solveCase())\n        resExp = f.readline()[:-1]\n        if res != resExp:\n            print('------>  TEST', i, 'FAILED !' + ' Found :', res, ', Expected :', resExp)\n            print(K, tabInit)\n            print(tab)\n            print(tabR2L)\n            bFail = True\n        else:\n            print('TEST', i, 'PASSED', ' Found :', res, ', Expected :', resExp)\n        i += 1\n    if not bFail:\n        print('\\n--- ALL OF THE ' + str(i - 1) + ' TESTS HAVE SUCCEEDED ---')\n\ndef main():\n    global f\n    i = 0\n    if i == 1:\n        tests()\n        return\n    f = sys.stdin\n    n = int(input())\n    for _ in range(n):\n        print(solveCase())\nmain()", "def SolveInc(z):\n    MemInc[len(A) - 1] = A[len(A) - 1]\n    for i in range(len(A) - 2, -1, -1):\n        MemInc[i] = max(A[i], A[i] + MemInc[i + 1])\n    return\n\ndef SolveDec(z):\n    MemDec[0] = A[0]\n    for i in range(1, len(A)):\n        MemDec[i] = max(A[i], A[i] + MemDec[i - 1])\n    return\nT = int(input())\nMemInc = []\nMemDec = []\nfor t in range(T):\n    (N, k) = map(int, input().split())\n    MemInc = []\n    MemDec = []\n    for i in range(N):\n        MemInc.append('s')\n        MemDec.append('s')\n    A = list(map(int, input().split()))\n    x = SolveInc(0)\n    x = SolveDec(N - 1)\n    for i in range(N - 2, -1, -1):\n        if MemInc[i] < MemInc[i + 1]:\n            MemInc[i] = MemInc[i + 1]\n    for i in range(1, N):\n        if MemDec[i] < MemDec[i - 1]:\n            MemDec[i] = MemDec[i - 1]\n    maxx = 0\n    for start in range(1, len(A) - k):\n        x = MemDec[start - 1] + MemInc[start + k]\n        if x > maxx or start == 1:\n            maxx = x\n    print(maxx)"]