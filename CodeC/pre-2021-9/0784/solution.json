["from collections import defaultdict\nfor _ in range(int(input())):\n    N = int(input())\n    z = defaultdict(lambda : 0)\n    y = defaultdict(lambda : 0)\n    undefined = defaultdict(lambda : 0)\n    undv = 0\n    for i in range(N):\n        (A, B, C) = list(map(int, input().split()))\n        if B != 0:\n            m = -A / B\n            b = -C / B\n            if (m, b) not in y:\n                y[m, b] = 1\n                z[m] += 1\n        elif A != 0:\n            m = -C / A\n            if m not in undefined:\n                undefined[m] = 1\n                undv += 1\n    if len(z) > 0:\n        print(max(max(z.values()), undv))\n    else:\n        print(max(1, undv))", "from collections import defaultdict\nfor _ in range(int(input())):\n    N = int(input())\n    z = defaultdict(lambda : 0)\n    y = defaultdict(lambda : 0)\n    undefined = defaultdict(lambda : 0)\n    undv = 0\n    for i in range(N):\n        (A, B, C) = list(map(int, input().split()))\n        if B != 0:\n            m = -A / B\n            b = -C / B\n            if (m, b) not in y:\n                y[m, b] = 1\n                z[m] += 1\n        elif A != 0:\n            m = -C / A\n            if m not in undefined:\n                undefined[m] = 1\n                undv += 1\n    if len(z) > 0:\n        print(max(max(z.values()), undv))\n    else:\n        print(max(1, undv))", "for z in range(int(input())):\n    n = int(input())\n    a = {}\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        if b[0] == 0:\n            m = 'a'\n            q = b[2] / b[1]\n        else:\n            m = b[1] / b[0]\n            q = b[2] / b[0]\n        if m in a:\n            a[m].append(q)\n        else:\n            a[m] = [q]\n    m = 0\n    for x in a.keys():\n        m = max(m, len(set(a[x])))\n    print(m)", "for z in range(int(input())):\n    n = int(input())\n    a = {}\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        if b[0] == 0:\n            m = 'a'\n            q = b[2] / b[1]\n        else:\n            m = b[1] / b[0]\n            q = b[2] / b[0]\n        if m in a:\n            a[m].append(q)\n        else:\n            a[m] = [q]\n    m = 0\n    for x in a.keys():\n        m = max(m, len(set(a[x])))\n    print(m)", "for z in range(int(input())):\n    n = int(input())\n    a = {}\n    for i in range(n):\n        b = [int(x) for x in input().split()]\n        if b[0] == 0:\n            m = 'a'\n            q = b[2] / b[1]\n        else:\n            m = b[1] / b[0]\n            q = b[2] / b[0]\n        if m in a:\n            a[m].append(q)\n        else:\n            a[m] = [q]\n    m = 0\n    for x in a.keys():\n        m = max(m, len(set(a[x])))\n    print(m)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nfrom collections import defaultdict\nfor _ in range(int(input())):\n    s = defaultdict(set)\n    for i in range(int(input())):\n        (a, b, c) = map(int, input().split())\n        g = gcd(a, b)\n        h = gcd(g, c)\n        s[a / g, b / g].add((a / h, b / h, c / h))\n    print(max(map(len, s.values())))", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    dicto = {}\n    dicto2 = {}\n    for j in range(N):\n        temp = str(input()).split(' ')\n        temp1 = int(temp[0])\n        temp2 = int(temp[1])\n        temp3 = int(temp[2])\n        b = math.gcd(math.gcd(temp1, temp2), temp3)\n        temp1 = temp1 // b\n        temp2 = temp2 // b\n        temp3 = temp3 // b\n        if temp1 < 0:\n            temp1 = -temp1\n            temp2 = -temp2\n            temp3 = -temp3\n        elif temp1 == 0 and temp2 < 0:\n            temp2 = -temp2\n            temp3 = -temp3\n        flag = dicto2.get((temp1, temp2, temp3), False)\n        if not flag:\n            dicto2[temp1, temp2, temp3] = True\n            a = math.gcd(temp1, temp2)\n            temp1 = temp1 // a\n            temp2 = temp2 // a\n            dicto[temp1, temp2] = dicto.get((temp1, temp2), 0) + 1\n    maxim = 0\n    for (k, v) in dicto.items():\n        if v > maxim:\n            maxim = v\n    print(maxim)", "import math\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    dicto = {}\n    dicto2 = {}\n    for j in range(N):\n        temp = str(input()).split(' ')\n        temp1 = int(temp[0])\n        temp2 = int(temp[1])\n        temp3 = int(temp[2])\n        b = math.gcd(math.gcd(temp1, temp2), temp3)\n        temp1 = temp1 // b\n        temp2 = temp2 // b\n        temp3 = temp3 // b\n        if temp1 < 0:\n            temp1 = -temp1\n            temp2 = -temp2\n            temp3 = -temp3\n        elif temp1 == 0 and temp2 < 0:\n            temp2 = -temp2\n            temp3 = -temp3\n        flag = dicto2.get((temp1, temp2, temp3), False)\n        if not flag:\n            dicto2[temp1, temp2, temp3] = True\n            a = math.gcd(temp1, temp2)\n            temp1 = temp1 // a\n            temp2 = temp2 // a\n            dicto[temp1, temp2] = dicto.get((temp1, temp2), 0) + 1\n    maxim = 0\n    for (k, v) in dicto.items():\n        if v > maxim:\n            maxim = v\n    print(maxim)", "from collections import defaultdict\nfrom fractions import gcd\nT = int(input())\nfor i in range(T):\n    x = int(input())\n    lines = defaultdict(set)\n    for i in range(x):\n        (a, b, c) = map(int, input().split())\n        g = gcd(a, b)\n        h = gcd(g, c)\n        lines[a / g, b / g].add((a / h, b / h, c / h))\n    print(max(map(len, lines.values())))", "from collections import defaultdict\nfrom fractions import gcd\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    lines = defaultdict(set)\n    for i in range(x):\n        (a, b, c) = map(int, input().strip().split(' '))\n        g = gcd(a, b)\n        h = gcd(g, c)\n        lines[a / g, b / g].add((a / h, b / h, c / h))\n    print(max(map(len, lines.values())))", "from collections import defaultdict\nfrom fractions import gcd\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    lines = defaultdict(set)\n    for i in range(x):\n        (a, b, c) = map(int, input().strip().split(' '))\n        g = gcd(a, b)\n        h = gcd(g, c)\n        lines[a / g, b / g].add((a / h, b / h, c / h))\n    print(max(map(len, lines.values())))", "from collections import defaultdict\nfrom fractions import gcd\nt = int(input())\nfor _ in range(t):\n    x = int(input())\n    lines = defaultdict(set)\n    for i in range(x):\n        (a, b, c) = map(int, input().strip().split(' '))\n        g = gcd(a, b)\n        h = gcd(g, c)\n        lines[a / g, b / g].add((a / h, b / h, c / h))\n    print(max(map(len, lines.values())))", "from collections import defaultdict\nfrom fractions import gcd\n\ndef res():\n    for _ in range(int(input())):\n        n = int(input())\n        s = defaultdict(set)\n        for i in range(n):\n            (a, b, c) = map(int, input().split())\n            g = gcd(a, b)\n            h = gcd(g, c)\n            s[a / g, b / g].add((a / h, b / h, c / h))\n        print(max(map(len, s.values())))\nres()", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor _ in range(t):\n    n1 = int(input())\n    arr = []\n    for __ in range(n1):\n        (a, b, c) = list(map(int, input().split()))\n        z = gcd(a, b)\n        h = gcd(z, c)\n        try:\n            (a, b, c) = (a / h, b / h, c / h)\n            m = b / a\n            arr.append((a, b, c, m))\n        except:\n            arr.append((a, b, c, 'ver'))\n    arr = list(set(arr))\n    dic = dict()\n    for x in arr:\n        (a, b, c, m) = x\n        try:\n            dic[m] += 1\n        except:\n            dic[m] = 1\n    print(max(dic.values()))", "from collections import defaultdict\nfor _ in range(int(input())):\n    slopes = defaultdict(set)\n    for _ in range(int(input())):\n        (a, b, c) = map(int, input().split())\n        if b == 0:\n            slopes['vertical'].add(c / a)\n        else:\n            slopes[a / b].add(c / b)\n    result = 1\n    for x in slopes:\n        result = max(len(slopes[x]), result)\n    print(result)", "for _ in range(int(input())):\n    numlines = int(input())\n    slopes = {}\n    vert_slopes = set()\n    for _ in range(numlines):\n        (a, b, c) = map(int, input().split())\n        if b == 0:\n            vert_slopes.add(c / a)\n        else:\n            if a / b not in slopes:\n                slopes[a / b] = set()\n            slopes[a / b].add(c / b)\n    result = 1\n    for x in slopes:\n        if len(slopes[x]) > result:\n            result = len(slopes[x])\n    print(max(result, len(vert_slopes)))", "def run():\n    T = int(input())\n    for t in range(T):\n        N = int(input())\n        lines = []\n        while N > 0:\n            N -= 1\n            (A, B, C) = map(int, input().split())\n            if B == 0:\n                m = float('inf')\n                c = C / A\n            else:\n                m = A / B\n                c = C / B\n            lines.append((m, c))\n        lines.sort()\n        max_len = 1\n        cur_len = 1\n        for i in range(0, len(lines) - 1):\n            first = lines[i]\n            second = lines[i + 1]\n            if first[0] == second[0] and first[1] != second[1]:\n                cur_len += 1\n            elif first == second:\n                continue\n            else:\n                cur_len = 1\n            max_len = max(cur_len, max_len)\n        print(max_len)\nrun()", "from sys import stdin\nfrom fractions import gcd\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    d = {}\n    for _ in range(n):\n        (a, b, c) = map(int, stdin.readline().split())\n        h = gcd(a, b)\n        g = gcd(h, c)\n        if (a // h, b // h) not in d:\n            d[a // h, b // h] = set()\n        d[a // h, b // h].add((a // g, b // g, c // g))\n    print(max(map(len, d.values())))", "from fractions import gcd\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(0, t):\n    s = defaultdict(set)\n    for i in range(int(input())):\n        (a, b, c) = map(int, input().split())\n        g = gcd(a, b)\n        h = gcd(g, c)\n        s[a / g, b / g].add((a / h, b / h, c / h))\n    count = 0\n    print(max(map(len, s.values())))", "t = int(input().strip())\nfor i in range(t):\n    n = int(input().strip())\n    d = {}\n    ans = 1\n    for j in range(n):\n        (a, b, c) = map(float, input().strip().split()[:3])\n        if b != 0:\n            (x, y) = (a / b, c / b)\n        else:\n            (x, y) = (10 ** 10, c / a)\n        if x in d:\n            if not y in d[x]:\n                d[x][y] = 1\n                ans = max(ans, len(d[x]))\n        else:\n            d[x] = {}\n            d[x][y] = 1\n    print(ans)", "def main():\n    t = int(input())\n    for tt in range(t):\n        N = int(input())\n        d = {}\n        x = set()\n        y = set()\n        for NN in range(N):\n            a = [int(i) for i in input().split(' ')]\n            if a[0] == 0:\n                y.add(a[2] / a[1])\n            elif a[1] == 0:\n                x.add(a[2] / a[0])\n            elif a[0] / a[1] in d:\n                d[a[0] / a[1]].add(a[2] / a[1])\n            else:\n                d[a[0] / a[1]] = set([a[2] / a[1]])\n        if len(d):\n            print(max([len(x), len(y), max((len(d[j]) for j in d))]))\n        else:\n            print(max(len(x), len(y)))\nmain()", "test = float('inf')\nt = int(input())\n(one, two, three) = (0, 0, 0)\nfor test_case in range(t):\n    n = int(input())\n    myset = set()\n    for rn in range(n):\n        line = input()\n        line = list(map(int, line.split()))\n        A = line[0]\n        B = line[1]\n        C = line[2]\n        if B == 0:\n            one = test\n            two = test\n            three = C / A\n        else:\n            one = A / B\n            two = C / B\n        if A == 0:\n            three = test\n        else:\n            three = C / A\n        t = (one, two, three)\n        myset.add(t)\n    maxc = 0\n    count = 1\n    mylist = []\n    for (one, two, three) in myset:\n        mylist.append(one)\n    mylist.sort()\n    for i in range(1, len(mylist)):\n        if mylist[i] == mylist[i - 1]:\n            count = count + 1\n        else:\n            maxc = max(maxc, count)\n            count = 1\n    maxc = max(count, maxc)\n    print(maxc)", "from fractions import Fraction\nfrom collections import defaultdict\nt = int(input())\nfor x in range(0, t):\n    n = int(input())\n    lines = defaultdict(set)\n    vertical = set()\n    for i in range(0, n):\n        l = list(map(int, input().split()))\n        if l[1] is not 0:\n            lines[Fraction(l[0], l[1])].add(Fraction(l[2], l[1]))\n        else:\n            vertical.add(Fraction(l[2], l[0]))\n    max = 0\n    o = len(lines)\n    v = len(vertical)\n    for line in lines:\n        length = len(lines[line])\n        if max < length:\n            max = length\n    if max < v:\n        max = v\n    print(max)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\nt = int(input())\nfor i in range(1, t + 1):\n    n = int(input())\n    dict1 = {}\n    max1 = 1\n    for j in range(1, n + 1):\n        (a, b, c) = list(map(int, input().split()))\n        gcd1 = gcd(a, b)\n        a = a // gcd1\n        b = b // gcd1\n        c = c / gcd1\n        ls = str([a, b])\n        if ls in dict1.keys():\n            if c in dict1[ls][1].keys():\n                continue\n            else:\n                temp = dict1[ls][0]\n                temp += 1\n                dict1[ls][0] = temp\n                temp2 = dict1[ls][1]\n                temp2[c] = True\n                dict1[ls][1] = temp2\n                if max1 < temp:\n                    max1 = temp\n        else:\n            dict1[ls] = [1, {c: True}]\n    print(max1)", "def mergeSort(alist):\n    if len(alist) > 1:\n        mid = len(alist) // 2\n        lefthalf = alist[:mid]\n        righthalf = alist[mid:]\n        mergeSort(lefthalf)\n        mergeSort(righthalf)\n        i = 0\n        j = 0\n        k = 0\n        while i < len(lefthalf) and j < len(righthalf):\n            if lefthalf[i][0] == righthalf[j][0]:\n                if lefthalf[i][1] < righthalf[j][1]:\n                    alist[k] = lefthalf[i]\n                    i = i + 1\n                else:\n                    alist[k] = righthalf[j]\n                    j = j + 1\n            elif lefthalf[i][0] < righthalf[j][0]:\n                alist[k] = lefthalf[i]\n                i = i + 1\n            else:\n                alist[k] = righthalf[j]\n                j = j + 1\n            k = k + 1\n        while i < len(lefthalf):\n            alist[k] = lefthalf[i]\n            i = i + 1\n            k = k + 1\n        while j < len(righthalf):\n            alist[k] = righthalf[j]\n            j = j + 1\n            k = k + 1\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    alist = []\n    m = 1\n    for i in range(n):\n        (a, b, c) = map(int, input().split())\n        if b != 0:\n            sl = -a / b\n            cp = -c / b\n        else:\n            sl = 1000000001\n            cp = -c / a\n        q = []\n        q.append(sl)\n        q.append(cp)\n        alist.append(q)\n    mergeSort(alist)\n    s = 1\n    for i in range(n - 1):\n        if alist[i][0] == alist[i + 1][0]:\n            if alist[i][1] != alist[i + 1][1]:\n                s += 1\n        else:\n            if m < s:\n                m = s\n            s = 1\n    if m < s:\n        m = s\n    print(m)\n    t -= 1", "from fractions import *\nfor tests in range(int(input())):\n    lines = {}\n    for line in range(int(input())):\n        (x, y, C) = [int(i) for i in input().split()]\n        if y == 0:\n            grad = 'inf'\n            C = Fraction(C, x)\n        else:\n            grad = Fraction(x, y)\n            C = Fraction(C, y)\n        try:\n            lines[grad].add(C)\n        except:\n            lines[grad] = set([C])\n    best = 0\n    for grad in lines:\n        best = max(best, len(lines[grad]))\n    print(best)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    a = {}\n    for x in range(n):\n        (A, B, C) = map(int, input().split())\n        if B == 0:\n            temp = 9999.9879\n            temp2 = C / A\n        else:\n            temp = A / B\n            temp2 = C / B\n        if temp not in a:\n            a[temp] = {temp2: 0}\n        elif temp2 not in a[temp]:\n            a[temp][temp2] = 0\n    print(len(max(a.values(), key=len)))", "from sys import stdin\nfrom collections import defaultdict\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef main():\n    nextint = map(int, stdin.read().split()).__next__\n    for _ in range(nextint()):\n        n = nextint()\n        lines = []\n        for _ in range(n):\n            (a, b, c) = (nextint(), nextint(), nextint())\n            gcdabc = gcd(gcd(a, b), c)\n            (a, b, c) = (a // gcdabc, b // gcdabc, c // gcdabc)\n            lines.append((a, b, c))\n        counter = defaultdict(set)\n        for (a, b, c) in lines:\n            gcdab = gcd(a, b)\n            (a, b) = (a // gcdab, b // gcdab)\n            if (-a, -b) in counter:\n                counter[-a, -b].add(-c / float(gcdab))\n            else:\n                counter[a, b].add(c / float(gcdab))\n        print(max([len(s) for s in counter.values()]))\nmain()", "from collections import defaultdict\nT = int(input())\nfor iii in range(T):\n    cons = defaultdict(set)\n    n = int(input())\n    zeros = set()\n    slopes = []\n    for i in range(n):\n        (a, b, c) = [int(x) for x in input().split()]\n        if a == 0:\n            zeros.add(c / b)\n            continue\n        b = b / a\n        c = c / a\n        if b not in cons.keys():\n            cons[b] = set()\n            cons[b].add(c)\n            slopes.append(b)\n        elif c not in cons[b]:\n            cons[b].add(c)\n            slopes.append(b)\n    slopes = sorted(slopes)\n    l = len(slopes)\n    mm = 1\n    i = 0\n    while i < l - 1:\n        m = 1\n        while slopes[i + 1] == slopes[i]:\n            m += 1\n            i += 1\n            if i == l - 1:\n                break\n        if m > mm:\n            mm = m\n        i += 1\n    mm = max(mm, len(zeros))\n    print(mm)", "from collections import Counter\nfrom fractions import Fraction, gcd\nfor _ in range(int(input())):\n    n = int(input())\n    s = set()\n    for _ in range(n):\n        (a, b, c) = map(int, input().split())\n        g = gcd(a, b)\n        s.add((a // g, b // g, Fraction(c, g)))\n    ct = Counter(((a, b) for (a, b, c) in s))\n    print(ct.most_common(1)[0][1])", "import fractions\nfrom collections import defaultdict\nfrac = fractions.Fraction\nINF = 10000000000\nt = int(input())\nfor x in range(0, t):\n    sni = defaultdict(set)\n    N = int(input())\n    for y in range(0, N):\n        (a, b, c) = map(int, input().split(' '))\n        if b == 0:\n            sni[frac(INF, 1)].add(frac(-c, a))\n        else:\n            sni[frac(-a, b)].add(frac(-c, b))\n    maxCount = 0\n    for y in sni:\n        if len(sni[y]) > maxCount:\n            maxCount = len(sni[y])\n    print(maxCount)", "from fractions import Fraction\nfrom collections import defaultdict\nfor _ in range(0, int(input())):\n    x = int(input())\n    s = []\n    t = []\n    d = defaultdict(list)\n    for i in range(0, x):\n        (a, b, c) = map(int, input().split())\n        if b != 0:\n            s.append((-a / b, -c / b))\n        else:\n            t.append(-c / a)\n    for (k, v) in set(s):\n        d[k].append(v)\n    maxcnt = 0\n    for (k, v) in d.items():\n        tempcnt = len(v)\n        if maxcnt < tempcnt:\n            maxcnt = tempcnt\n    print(max(maxcnt, len(set(t))))", "def F():\n    return [int(x) for x in input().split()]\n[T] = F()\nwhile T:\n    T -= 1\n    N = int(input())\n    d = {}\n    while N:\n        N -= 1\n        [A, B, C] = F()\n        if A == 0:\n            slope = 'y'\n            const = C / B\n        else:\n            slope = B / A\n            const = C / A\n        if slope in d:\n            if const not in d[slope]:\n                d[slope][const] = 1\n        else:\n            d[slope] = {const: 1}\n    maxcount = 0\n    for slope in d:\n        l_const = len(d[slope])\n        if l_const > maxcount:\n            maxcount = l_const\n    print(maxcount)", "T = int(input())\nwhile T > 0:\n    N = int(input())\n    d = {}\n    while N > 0:\n        [A, B, C] = [int(x) for x in input().split()]\n        if B != 0:\n            m = -A / B\n            c = -C / B\n        else:\n            m = 'inf'\n            c = -C / A\n        if m not in d:\n            d[m] = {}\n            d[m][c] = 0\n        elif c not in d[m]:\n            d[m][c] = 0\n        N -= 1\n    max = 0\n    for m in d:\n        if len(d[m]) > max:\n            max = len(d[m])\n    print(max)\n    T -= 1", "from collections import Counter\na1 = int(input())\nwhile a1 > 0:\n    a1 -= 1\n    b = int(input())\n    A = []\n    B = []\n    for i in range(b):\n        c1 = input()\n        (a, b, c) = [int(n) for n in c1.split()]\n        if a < 0:\n            b = -b\n            c = -c\n            a = -a\n        if b != 0:\n            A.append((a / b, c / b))\n        else:\n            B.append(c / a)\n    A = list(set(A))\n    A.sort()\n    s = 1\n    v = Counter((i[0] for i in A))\n    if len(v) > 0:\n        s = v.most_common()[0][1]\n    s1 = len(set(B))\n    if s1 > s:\n        s = s1\n    print(s)", "from fractions import gcd\nfor _ in range(int(input())):\n    N = int(input())\n    a = {}\n    for i in range(N):\n        (x, y, c) = map(int, input().split())\n        m = gcd(x, y)\n        x = round(x / m)\n        y = round(y / m)\n        c /= m\n        if (x, y) not in a:\n            a[x, y] = {c}\n        else:\n            a[x, y].add(c)\n    print(max((len(a[i]) for i in a)))"]