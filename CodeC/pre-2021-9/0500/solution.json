["arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "def getCount_1(start, end, dp):\n    for i in range(2, end + 1):\n        if dp[i] == 0:\n            for value in range(i, end + 1, i):\n                dp[value] += 1\n    return dp\ntestCases = int(input())\nresult = []\ndp = []\nfor index in range(0, 100001):\n    dp.append(0)\ndp = getCount_1(2, 100000, dp)\nprecomputeArray = []\nfor k in range(6):\n    row = []\n    count = 0\n    for i in range(100001):\n        if dp[i] == k:\n            count += 1\n        row.append(count)\n    precomputeArray.append(row)\nfor testCase in range(testCases):\n    inp = input()\n    A = int(inp.split(' ')[0])\n    B = int(inp.split(' ')[1])\n    k = int(inp.split(' ')[2])\n    print(precomputeArray[k][B] - precomputeArray[k][A - 1])", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "arr = [[i] for i in range(10 ** 5 + 1)]\ndictionary = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0}\nprime_factors_arr = [[0] * 6 for i in range(10 ** 5 + 1)]\nfor i in range(2, 10 ** 5 + 1):\n    pos = i\n    if len(arr[i]) == 1:\n        while pos <= 10 ** 5:\n            arr[pos].append(i)\n            pos += i\n    if len(arr[i]) - 1 <= 5:\n        dictionary[len(arr[i]) - 1] += 1\n    temp = [0] * 6\n    for j in range(1, 6):\n        temp[j] = dictionary[j]\n    prime_factors_arr[i] = temp\ntests = int(input())\nfor i in range(tests):\n    (a, b, k) = map(int, input().split())\n    ans = prime_factors_arr[b][k] - prime_factors_arr[a - 1][k]\n    print(ans)", "size = 100000\nsieve = [i for i in range(size + 1)]\ncounts = [0] * (size + 1)\nfor i in range(2, size + 1):\n    if sieve[i] == i:\n        counts[i] = 1\n        j = i * 2\n        while j < size + 1:\n            sieve[j] = i\n            counts[j] += 1\n            j += i\ndp = []\nmem = {}\nfor count in counts:\n    if count in mem:\n        mem[count] += 1\n    else:\n        mem[count] = 1\n    dp.append(mem.copy())\n\ndef soln(a, b, k):\n    return dp[b].get(k, 0) - dp[a - 1].get(k, 0)\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(soln(a, b, k))", "import math\nsize = 100000\nprime = [True] * (size + 1)\ncounts = [0] * (size + 1)\nprime[0] = False\nprime[1] = False\nfor i in range(2, 100001):\n    if prime[i] == True:\n        counts[i] = 1\n        for j in range(2 * i, 100001, i):\n            prime[j] = False\n            counts[j] += 1\ndp = []\nmem = {}\nfor count in counts:\n    if count in mem:\n        mem[count] += 1\n    else:\n        mem[count] = 1\n    dp.append(mem.copy())\n\ndef soln(a, b, k):\n    return dp[b].get(k, 0) - dp[a - 1].get(k, 0)\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(soln(a, b, k))", "size = 100000\nsieve = [i for i in range(size + 1)]\ncounts = [0] * (size + 1)\nfor i in range(2, size + 1):\n    if sieve[i] == i:\n        counts[i] = 1\n        j = i * 2\n        while j < size + 1:\n            sieve[j] = i\n            counts[j] += 1\n            j += i\ndp = []\nmem = {}\nfor count in counts:\n    if count in mem:\n        mem[count] += 1\n    else:\n        mem[count] = 1\n    dp.append(mem.copy())\n\ndef soln(a, b, k):\n    return dp[b].get(k, 0) - dp[a - 1].get(k, 0)\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(soln(a, b, k))", "size = 100000\nsieve = [i for i in range(size + 1)]\ncounts = [0] * (size + 1)\nfor i in range(2, size + 1):\n    if sieve[i] == i:\n        counts[i] = 1\n        j = i * 2\n        while j < size + 1:\n            sieve[j] = i\n            counts[j] += 1\n            j += i\ndp = []\nmem = {}\nfor count in counts:\n    if count in mem:\n        mem[count] += 1\n    else:\n        mem[count] = 1\n    dp.append(mem.copy())\n\ndef soln(a, b, k):\n    return dp[b].get(k, 0) - dp[a - 1].get(k, 0)\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(soln(a, b, k))", "from bisect import bisect_left, bisect_right\nimport math\nfrom sys import maxsize\nfrom collections import defaultdict\nfrom bisect import bisect_left\nfrom heapq import heapify, heappush, heappop\nfrom collections import deque\nimport sys\nfrom math import gcd, sqrt, log10, log2, floor, ceil, sqrt\nfrom collections import deque, defaultdict\ninput = sys.stdin.readline\n\ndef il():\n    return [int(a) for a in input().strip().split()]\n\ndef ip():\n    return input().strip()\n\ndef ii():\n    return int(input())\n\ndef ot(in_p, *args, e=' '):\n    if type(in_p) == list:\n        print(*in_p, end=e)\n    if type(in_p) == str or type(in_p) == int:\n        print(in_p, end=e)\n        for l in args:\n            print(l, end=e)\n    print()\n\ndef a_pwr_n(a, n, mod):\n    if n == 1:\n        return a % mod\n    if n % 2 == 0:\n        val = a_pwr_n(a, n // 2, mod)\n        return val % mod * val % mod\n    else:\n        return a % mod * a_pwr_n(a, n - 1, mod) % mod\n\ndef rg(*ag):\n    if len(ag) == 3:\n        return range(ag[0], ag[1], ag[2])\n    elif len(ag) == 2:\n        return range(ag[0], ag[1])\n    elif len(ag) == 1:\n        return range(ag[0])\n    else:\n        raise 'invalid input'\n\ndef ispal(i, j, st):\n    while i <= j:\n        if st[i] == st[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\nmod = 1000000000 + 7\ndx = [-1, -2, 1, 2, 2, -2, -1, 1]\ndy = [2, 1, 2, 1, -1, -1, -2, -2]\n\ndef sieve(n):\n    fac = [0 for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        if not fac[i]:\n            for j in range(2 * i, n + 1, i):\n                fac[j] += 1\n            fac[i] = 1\n    return fac\nf = sieve(100005)\nlookup = [[0 for _ in range(100005)] for _ in range(6)]\nfor i in range(1, 6):\n    for j in range(2, 100005):\n        if f[j] == i:\n            lookup[i][j] = lookup[i][j - 1] + 1\n        else:\n            lookup[i][j] = lookup[i][j - 1]\nfor _ in range(ii()):\n    (a, b, k) = il()\n    print(lookup[k][b] - lookup[k][a - 1])", "lim = 100001\n\ndef rmain():\n    dp = [0] * lim\n    ans = [[0 for _ in range(100001)] for _ in range(6)]\n    for i in range(2, lim):\n        if dp[i] == 0:\n            dp[i] = 1\n            for j in range(2 * i, lim, i):\n                dp[j] += 1\n    for (i, val) in enumerate(dp):\n        for j in range(1, 6):\n            ans[j][i] = ans[j][i - 1]\n        if val <= 5:\n            ans[val][i] += 1\n    tn = int(input())\n    for _ in range(tn):\n        (a, b, k) = list(map(int, input().split()))\n        print(ans[k][b] - ans[k][a - 1])\nrmain()", "lim = 100001\n\ndef rmain():\n    dp = [0] * lim\n    ans = [[0 for _ in range(100001)] for _ in range(6)]\n    for i in range(2, lim):\n        if dp[i] == 0:\n            dp[i] = 1\n            for j in range(2 * i, lim, i):\n                dp[j] += 1\n    for (i, val) in enumerate(dp):\n        for j in range(1, 6):\n            ans[j][i] = ans[j][i - 1]\n        if val <= 5:\n            ans[val][i] += 1\n    tn = int(input())\n    for _ in range(tn):\n        (a, b, k) = list(map(int, input().split()))\n        print(ans[k][b] - ans[k][a - 1])\nrmain()", "lim = 100001\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        dp[i] = 1\n        for j in range(2 * i, lim, i):\n            dp[j] += 1\nans = [[0] * lim for i in range(6)]\nfor i in range(lim):\n    if dp[i] < 6:\n        ans[dp[i]][i] += 1\nfor i in range(6):\n    for j in range(1, lim):\n        ans[i][j] += ans[i][j - 1]\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(ans[k][b] - ans[k][a - 1])", "lim = 100001\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        dp[i] = 1\n        for j in range(2 * i, lim, i):\n            dp[j] += 1\nans = [[0] * lim for i in range(6)]\nfor i in range(lim):\n    if dp[i] <= 5:\n        ans[dp[i]][i] += 1\nfor i in range(6):\n    for j in range(1, lim):\n        ans[i][j] += ans[i][j - 1]\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(ans[k][b] - ans[k][a - 1])", "from bisect import *\nn = 100001\na = [0] * n\nfor i in range(2, n, 2):\n    a[i] += 1\nfor i in range(3, n, 2):\n    if a[i] == 0:\n        for j in range(i, n, i):\n            a[j] += 1\nq = {i: [] for i in range(1, 6)}\nfor i in range(n):\n    if 0 < a[i] < 6:\n        q[a[i]].append(i)\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(bisect_right(q[k], b) - bisect_left(q[k], a))", "def primes(top):\n    a = [0] * (top + 1)\n    for i in range(2, top + 1):\n        if a[i] == 0:\n            for j in range(i, top + 1, i):\n                a[j] += 1\n    return a\n\ndef get_counts(a, k):\n    c = 0\n    counts = [0] * len(a)\n    for i in range(len(a)):\n        if a[i] == k:\n            c += 1\n        counts[i] = c\n    return counts\npr = primes(100000)\nm = [get_counts(pr, 1), get_counts(pr, 2), get_counts(pr, 3), get_counts(pr, 4), get_counts(pr, 5)]\nfor _ in range(int(input())):\n    (a, b, k) = [int(x) for x in input().split()]\n    print(m[k - 1][b] - m[k - 1][a - 1])", "def primes(top):\n    a = [0] * (top + 1)\n    for i in range(2, top + 1):\n        if a[i] == 0:\n            for j in range(i, top + 1, i):\n                a[j] += 1\n    return a\n\ndef get_counts(a, k):\n    c = 0\n    counts = [0] * len(a)\n    for i in range(len(a)):\n        if a[i] == k:\n            c += 1\n        counts[i] = c\n    return counts\npr = primes(100000)\nm = [get_counts(pr, 1), get_counts(pr, 2), get_counts(pr, 3), get_counts(pr, 4), get_counts(pr, 5)]\nfor _ in range(int(input())):\n    (a, b, k) = [int(x) for x in input().split()]\n    print(m[k - 1][b] - m[k - 1][a - 1])", "def primes(top):\n    a = [0] * (top + 1)\n    for i in range(2, top + 1):\n        if a[i] == 0:\n            for j in range(i, top + 1, i):\n                a[j] += 1\n    return a\n\ndef get_counts(a, k):\n    c = 0\n    counts = [0] * len(a)\n    for i in range(len(a)):\n        if a[i] == k:\n            c += 1\n        counts[i] = c\n    return counts\npr = primes(100000)\nm = [get_counts(pr, 1), get_counts(pr, 2), get_counts(pr, 3), get_counts(pr, 4), get_counts(pr, 5)]\nfor _ in range(int(input())):\n    (a, b, k) = [int(x) for x in input().split()]\n    print(m[k - 1][b] - m[k - 1][a - 1])", "LIMIT = 100001\nprime = [True] * LIMIT\ncount = [0] * LIMIT\nfor i in range(2, LIMIT):\n    if prime[i]:\n        for j in range(i, LIMIT, i):\n            prime[j] = False\n            count[j] += 1\nmat = [[0] * LIMIT for i in range(6)]\nfor i in range(2, LIMIT):\n    for j in range(1, 6):\n        mat[j][i] = mat[j][i - 1]\n    c = count[i]\n    if c < 6:\n        mat[c][i] += 1\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        (low, high, k) = map(int, input().split())\n        print(mat[k][high] - mat[k][low - 1])\nmain()", "lim = 10 ** 5 + 1\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        for j in range(i, lim, i):\n            dp[j] += 1\nnk = [['X']]\nfor k in range(1, 5 + 1):\n    l = [0] * lim\n    for j in range(lim):\n        if dp[j] == k:\n            l[j] = l[j - 1] + 1\n        else:\n            l[j] = l[j - 1]\n    nk.append(l)\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(nk[k][b] - nk[k][a - 1])", "lim = 10 ** 5 + 1\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        for j in range(i, lim, i):\n            dp[j] += 1\nnk = [['X']]\nfor k in range(1, 5 + 1):\n    l = [0] * lim\n    for j in range(lim):\n        if dp[j] == k:\n            l[j] = l[j - 1] + 1\n        else:\n            l[j] = l[j - 1]\n    nk.append(l)\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(nk[k][b] - nk[k][a - 1])", "LIMIT = 100001\nprime = [True] * LIMIT\ncount = [0] * LIMIT\nfor i in range(2, LIMIT):\n    if prime[i]:\n        for j in range(i, LIMIT, i):\n            prime[j] = False\n            count[j] += 1\nmat = [[0] * LIMIT for i in range(6)]\nfor i in range(2, LIMIT):\n    for j in range(1, 6):\n        mat[j][i] = mat[j][i - 1]\n    c = count[i]\n    if c < 6:\n        mat[c][i] += 1\n\ndef main():\n    T = int(input())\n    for i in range(T):\n        (low, high, k) = map(int, input().split())\n        print(mat[k][high] - mat[k][low - 1])\nmain()", "lim = 10 ** 5 + 1\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        for j in range(i, lim, i):\n            dp[j] += 1\nnk = [['X']]\nfor k in range(1, 5 + 1):\n    l = [0] * lim\n    for j in range(lim):\n        if dp[j] == k:\n            l[j] = l[j - 1] + 1\n        else:\n            l[j] = l[j - 1]\n    nk.append(l)\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(nk[k][b] - nk[k][a - 1])", "lim = 10 ** 5 + 1\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        for j in range(i, lim, i):\n            dp[j] += 1\nnk = [['X']]\nfor k in range(1, 5 + 1):\n    l = [0] * lim\n    for j in range(lim):\n        if dp[j] == k:\n            l[j] = l[j - 1] + 1\n        else:\n            l[j] = l[j - 1]\n    nk.append(l)\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(nk[k][b] - nk[k][a - 1])", "lim = 10 ** 5 + 1\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        for j in range(i, lim, i):\n            dp[j] += 1\nnk = [['X']]\nfor k in range(1, 5 + 1):\n    l = [0] * lim\n    for j in range(lim):\n        if dp[j] == k:\n            l[j] = l[j - 1] + 1\n        else:\n            l[j] = l[j - 1]\n    nk.append(l)\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(nk[k][b] - nk[k][a - 1])", "lim = 10 ** 5 + 1\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        for j in range(i, lim, i):\n            dp[j] += 1\nnk = [['X']]\nfor k in range(1, 5 + 1):\n    l = [0] * lim\n    for j in range(lim):\n        if dp[j] == k:\n            l[j] = l[j - 1] + 1\n        else:\n            l[j] = l[j - 1]\n    nk.append(l)\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(nk[k][b] - nk[k][a - 1])", "t = int(input())\nn = 100000\nmarked = [0] * (n + 1)\nprimes = [True] * (n + 1)\nfor i in range(2, n + 1):\n    if primes[i]:\n        marked[i] = 1\n        for j in range(2 * i, n + 1, i):\n            marked[j] += 1\n            primes[j] = False\ntable = [[0] * (n + 1) for i in range(6)]\nfor i in range(2, n + 1):\n    for j in range(1, 6):\n        table[j][i] = table[j][i - 1]\n    v = marked[i]\n    if v < 6:\n        table[v][i] += 1\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(table[k][b] - table[k][a - 1])", "import math\n\ndef rmain():\n    li = [0] * 100001\n    dp = [[0 for _ in range(100001)] for _ in range(6)]\n    for i in range(2, 100001):\n        if li[i] == 0:\n            li[i] = 1\n            for j in range(2 * i, 100001, i):\n                li[j] += 1\n    for (i, val) in enumerate(li):\n        for j in range(1, 6):\n            dp[j][i] = dp[j][i - 1]\n        if val <= 5:\n            dp[val][i] += 1\n    tn = int(input())\n    for _ in range(tn):\n        (a, b, k) = list(map(int, input().split()))\n        print(dp[k][b] - dp[k][a - 1])\n    return\nrmain()", "def number_of_prime_factors(limit, k):\n    number_of_prime_factors = [1, 0] * (limit // 2 + 1)\n    number_of_prime_factors[:3] = [0, 0, 1]\n    p = 3\n    while p <= limit:\n        if not number_of_prime_factors[p]:\n            for i in range(p, limit + 1, p):\n                number_of_prime_factors[i] += 1\n        p += 2\n    k_factors = {i: [0] for i in range(1, k + 1)}\n    for i in range(2, limit + 1):\n        try:\n            k_factors[number_of_prime_factors[i]].append(i)\n        except KeyError:\n            pass\n    return k_factors\n\ndef tr():\n    return range(int(line()))\nfrom bisect import bisect_left, bisect_right\n\ndef main():\n    k_factors = number_of_prime_factors(100000, 5)\n    for _ in range(int(input())):\n        (a, b, k) = map(int, input().split())\n        low = bisect_left(k_factors[k], a)\n        high = bisect_right(k_factors[k], b)\n        print(high - low)\nmain()", "M = 5 + 1\nlimit = 10 ** 5 + 1\nprimes = [0 for i in range(limit)]\nfor p in range(2, limit):\n    if primes[p] == 0:\n        for q in range(p, limit, p):\n            primes[q] += 1\ndp = [[0 for y in range(M)] for x in range(limit)]\nfor x in range(2, limit):\n    for y in range(1, M):\n        dp[x][y] = dp[x - 1][y]\n    y = primes[x]\n    if y < M:\n        dp[x][y] += 1\nfor test_case in range(int(input())):\n    (A, B, K) = map(int, input().split(' '))\n    print(dp[B][K] - dp[A - 1][K])", "limit = 100001\nprime = [True for _ in range(limit)]\nmark = [0 for _ in range(limit)]\nfor i in range(2, limit):\n    if prime[i]:\n        mark[i] = 1\n        j: int = 2\n        while i * j < limit:\n            prime[i * j] = False\n            mark[i * j] += 1\n            j += 1\ntable = [[0 for _ in range(limit)] for _ in range(6)]\nfor i in range(2, limit):\n    for j in range(1, 6):\n        table[j][i] = table[j][i - 1]\n    v = mark[i]\n    if v >= 1 and v <= 5:\n        table[v][i] += 1\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = list(map(int, input().split()))\n    print(table[k][b] - table[k][a - 1])", "import math\nfactors = [0 for _ in range(pow(10, 5) + 1)]\nfor i in range(2, pow(10, 5) + 1):\n    if factors[i] == 0:\n        for j in range(i, pow(10, 5) + 1, i):\n            factors[j] += 1\nans = [[factors[0]] for _ in range(5)]\nfor i in range(5):\n    for j in range(1, pow(10, 5) + 1):\n        if factors[j] == i + 1:\n            ans[i].append(1)\n        else:\n            ans[i].append(0)\n        ans[i][j] += ans[i][j - 1]\nT = int(input())\nfor t in range(T):\n    (a, b, x) = map(int, input().split())\n    print(ans[x - 1][b] - ans[x - 1][a - 1])", "import math\nfactors = [0 for _ in range(pow(10, 5) + 1)]\nfor i in range(2, pow(10, 5) + 1):\n    if factors[i] == 0:\n        for j in range(i, pow(10, 5) + 1, i):\n            factors[j] += 1\nans = [[factors[0]] for _ in range(5)]\nfor i in range(5):\n    for j in range(1, pow(10, 5) + 1):\n        if factors[j] == i + 1:\n            ans[i].append(1)\n        else:\n            ans[i].append(0)\n        ans[i][j] += ans[i][j - 1]\nT = int(input())\nfor t in range(T):\n    (a, b, x) = map(int, input().split())\n    print(ans[x - 1][b] - ans[x - 1][a - 1])", "t = int(input())\nimport math\n\ndef solve():\n    limit = 10 ** 5 + 5\n    primefactor = [0] * limit\n    for i in range(2, limit):\n        if primefactor[i] == 0:\n            for j in range(i, limit, i):\n                primefactor[j] += 1\n    global ans\n    ans = [[0] * limit for i in range(6)]\n    for i in range(limit):\n        if primefactor[i] < 6:\n            ans[primefactor[i]][i] += 1\n    for i in range(6):\n        for j in range(1, limit):\n            ans[i][j] += ans[i][j - 1]\nsolve()\nwhile t:\n    (a, b, k) = map(int, input().split())\n    print(ans[k][b] - ans[k][a - 1])\n    t -= 1", "val = 10 ** 5\nans = [0] * (val + 1)\nfor i in range(2, val + 1):\n    if ans[i] == 0:\n        for j in range(i, val + 1, i):\n            ans[j] += 1\nk = [[0 for _ in range(val + 1)] for _ in range(5)]\nfor i in range(2, val + 1):\n    if ans[i] <= 5:\n        k[ans[i] - 1][i] = 1\nf = []\nfor i in range(5):\n    temp = [0]\n    for j in range(1, val + 1):\n        temp.append(k[i][j] + temp[-1])\n    f.append(temp)\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(f[k - 1][b] - f[k - 1][a - 1])", "val = 10 ** 5\nans = [0] * (val + 1)\nfor i in range(2, val + 1):\n    if ans[i] == 0:\n        for j in range(i, val + 1, i):\n            ans[j] += 1\nk = [[0 for _ in range(val + 1)] for _ in range(5)]\nfor i in range(2, val + 1):\n    if ans[i] <= 5:\n        k[ans[i] - 1][i] = 1\nf = []\nfor i in range(5):\n    temp = [0]\n    for j in range(1, val + 1):\n        temp.append(k[i][j] + temp[-1])\n    f.append(temp)\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(f[k - 1][b] - f[k - 1][a - 1])", "prime = [True] * 100001\ncount = [[0, i] for i in range(100001)]\np = 2\nwhile p < 100001:\n    if prime[p] == True:\n        count[p][1] //= p\n        count[p][0] += 1\n        for i in range(p + p, 100001, p):\n            prime[i] = False\n            count[i][1] //= p\n            count[i][0] += 1\n    p += 1\nk = [[0] * 100001 for i in range(6)]\nx = [0] * 6\nfor i in range(2, 100001, 1):\n    if count[i][0] <= 5:\n        k[count[i][0]][i] = 1\nfor i in range(6):\n    for j in range(2, 100001, 1):\n        k[i][j] = k[i][j] + k[i][j - 1]\nt = int(input())\nfor _ in range(t):\n    (a, b, r) = map(int, input().split())\n    print(k[r][b] - k[r][a - 1])", "prime = [True] * 100001\ncount = [0 for i in range(100001)]\np = 2\nwhile p < 100001:\n    if prime[p] == True:\n        count[p] += 1\n        for i in range(p + p, 100001, p):\n            prime[i] = False\n            count[i] += 1\n    p += 1\nk = [[0] * 100001 for i in range(6)]\nfor i in range(2, 100001, 1):\n    if count[i] <= 5:\n        k[count[i]][i] = 1\nfor i in range(6):\n    for j in range(2, 100001, 1):\n        k[i][j] = k[i][j] + k[i][j - 1]\nt = int(input())\nfor _ in range(t):\n    (a, b, r) = map(int, input().split())\n    print(k[r][b] - k[r][a - 1])", "M = 5 + 1\nN = 10 ** 5 + 1\nprimes = [0] * N\ndp = [[0] * M for x in range(N)]\nfor x in range(2, N):\n    for y in range(M):\n        dp[x][y] = dp[x - 1][y]\n    if primes[x] == 0:\n        for y in range(x, N, x):\n            primes[y] += 1\n    y = primes[x]\n    if y < M:\n        dp[x][y] += 1\nfor test_case in range(int(input())):\n    (A, B, K) = map(int, input().split(' '))\n    print(dp[B][K] - dp[A - 1][K])", "dp = [0] * 100001\nans = [[0] * 100001 for i in range(6)]\nfor i in range(2, 100001):\n    if dp[i] == 0:\n        for x in range(i, 100001, i):\n            dp[x] += 1\nfor i in range(1, 6):\n    for j in range(100001):\n        if dp[j] == i:\n            ans[i][j] = 1\nfor i in range(1, 6):\n    for j in range(1, 100001):\n        ans[i][j] += ans[i][j - 1]\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(ans[k][b] - ans[k][a - 1])", "M = 5 + 1\nN = 10 ** 5 + 1\nprimes = [0] * N\ndp = [[0] * M for x in range(N)]\nfor x in range(2, N):\n    for y in range(M):\n        dp[x][y] = dp[x - 1][y]\n    if primes[x] == 0:\n        for y in range(x, N, x):\n            primes[y] += 1\n    y = primes[x]\n    if y < M:\n        dp[x][y] += 1\nfor test_case in range(int(input())):\n    (A, B, K) = map(int, input().split(' '))\n    print(dp[B][K] - dp[A - 1][K])", "M = 5 + 1\nlimit = 10 ** 5 + 1\nprimes = [0 for i in range(limit)]\nfor p in range(2, limit):\n    if primes[p] == 0:\n        for q in range(p, limit, p):\n            primes[q] += 1\ndp = [[0 for y in range(M)] for x in range(limit)]\nfor x in range(2, limit):\n    for y in range(1, M):\n        dp[x][y] = dp[x - 1][y]\n    y = primes[x]\n    if y < M:\n        dp[x][y] += 1\nfor test_case in range(int(input())):\n    (A, B, K) = map(int, input().split(' '))\n    print(dp[B][K] - dp[A - 1][K])", "M = 5 + 1\nlimit = 10 ** 5 + 1\nprimes = [0 for i in range(limit)]\nfor x in range(2, limit):\n    if primes[x] == 0:\n        for y in range(x, limit, x):\n            primes[y] += 1\ndp = [[0 for k in range(M)] for x in range(limit)]\nfor x in range(2, limit):\n    for y in range(1, M):\n        dp[x][y] = dp[x - 1][y]\n    y = primes[x]\n    if y < M:\n        dp[x][y] += 1\nfor test_case in range(int(input())):\n    (A, B, K) = map(int, input().split(' '))\n    print(dp[B][K] - dp[A - 1][K])", "M = 5 + 1\nlimit = 10 ** 5 + 1\nprimes = [0 for i in range(limit)]\nfor x in range(2, limit):\n    if primes[x] == 0:\n        for y in range(x, limit, x):\n            primes[y] += 1\ndp = [[0 for k in range(M)] for x in range(limit)]\nfor x in range(2, limit):\n    for y in range(1, M):\n        dp[x][y] = dp[x - 1][y]\n    y = primes[x]\n    if y < M:\n        dp[x][y] += 1\nfor test_case in range(int(input())):\n    (A, B, K) = map(int, input().split(' '))\n    print(dp[B][K] - dp[A - 1][K])", "M = 6\nU = 100001\ndp = [[0] * M]\nfor x in range(1, U):\n    dp += [[0] * M]\n    for y in range(M):\n        dp[x][y] = dp[x - 1][y]\n    p = 2\n    q = x\n    y = 0\n    while p * p <= q and y < M:\n        if q % p == 0:\n            q /= p\n            y += 1\n            while q % p == 0:\n                q /= p\n        p += 1\n    if q > 1 and y < M:\n        y += 1\n    if y < M:\n        dp[x][y] += 1\nfor test_case in range(int(input())):\n    (A, B, K) = map(int, input().split(' '))\n    print(dp[B][K] - dp[A - 1][K])", "import numpy as np\n\ndef generateTable():\n    N = 100000 - 1\n    dp = np.zeros(N)\n    for i in range(N):\n        if not dp[i]:\n            j = i\n            while j < N:\n                dp[j] += 1\n                j += i + 2\n    return dp\n\ndef findAll(a, b, k, dp):\n    return (dp[a - 2:b - 2 + 1] == k).sum()\n\ndef main():\n    dp = generateTable()\n    for _ in range(int(input())):\n        (a, b, k) = map(int, input().split())\n        ans = findAll(a, b, k, dp)\n        print(ans)\nmain()", "limit = 10 ** 5 + 1\ndp = [0 for i in range(limit)]\nfor i in range(2, limit):\n    if dp[i] != 0:\n        continue\n    for j in range(i, limit, i):\n        dp[j] += 1\nans = [[0 for i in range(limit)] for j in range(6)]\nfor i in range(2, limit):\n    if dp[i] <= 5:\n        ans[dp[i]][i] = 1\nfor i in range(1, 6):\n    for j in range(2, limit):\n        ans[i][j] += ans[i][j - 1]\nt = int(input())\nwhile t:\n    (a, b, k) = map(int, input().split(' '))\n    print(ans[k][b] - ans[k][a - 1])\n    t -= 1", "limit = 10 ** 5 + 1\ndp = [0 for i in range(limit)]\nfor i in range(2, limit):\n    if dp[i] != 0:\n        continue\n    for j in range(i, limit, i):\n        dp[j] += 1\nans = [[0 for i in range(limit)] for j in range(6)]\nfor i in range(2, limit):\n    if dp[i] <= 5:\n        ans[dp[i]][i] = 1\nfor i in range(1, 6):\n    for j in range(2, limit):\n        ans[i][j] += ans[i][j - 1]\nt = int(input())\nwhile t:\n    (a, b, k) = map(int, input().split(' '))\n    print(ans[k][b] - ans[k][a - 1])\n    t -= 1", "limit = 10 ** 5 + 1\ndp = [0 for i in range(limit)]\nfor i in range(2, limit):\n    if dp[i] != 0:\n        continue\n    for j in range(i, limit, i):\n        dp[j] += 1\nans = [[0 for i in range(limit)] for j in range(6)]\nfor i in range(2, limit):\n    if dp[i] <= 5:\n        ans[dp[i]][i] = 1\nfor i in range(1, 6):\n    for j in range(2, limit):\n        ans[i][j] += ans[i][j - 1]\nt = int(input())\nwhile t:\n    (a, b, k) = map(int, input().split(' '))\n    print(ans[k][b] - ans[k][a - 1])\n    t -= 1", "N = 100000\nomega = [0] * (N + 1)\nfor p in range(2, N + 1):\n    if omega[p] == 0:\n        for n in range(p, N + 1, p):\n            omega[n] += 1\na = [[] for i in range(6)]\nfor n in range(1, N + 1):\n    if omega[n] < 6:\n        a[omega[n]].append(n)\nimport bisect\nfor _ in range(int(input())):\n    (aa, bb, k) = map(int, input().split())\n    print(bisect.bisect_right(a[k], bb) - bisect.bisect_left(a[k], aa))", "limit = 100005\nans = [[0 for i in range(0, limit)] for j in range(0, 6)]\n\ndef solve():\n    primeFactors = [0] * limit\n    for i in range(2, limit):\n        if primeFactors[i] == 0:\n            for j in range(i, limit, i):\n                primeFactors[j] += 1\n    for i in range(limit):\n        if primeFactors[i] < 6:\n            ans[primeFactors[i]][i] += 1\n    for i in range(6):\n        for j in range(1, limit):\n            ans[i][j] += ans[i][j - 1]\nsolve()\nT = int(input())\nfor i in range(T):\n    (A, B, K) = map(int, input().split())\n    print(ans[K][B] - ans[K][A - 1])", "n = 100000\nprimefactor = [0 for i in range(n + 1)]\ni = 2\nlst = []\nwhile i <= n:\n    if primefactor[i] == 0:\n        primefactor[i] = i\n        for j in range(i * i, n + 1, i):\n            primefactor[j] = i\n    i += 1\nfor i in range(2, n + 1):\n    x = i\n    m = {}\n    while x != 1:\n        if primefactor[x] in m:\n            m[primefactor[x]] += 1\n        else:\n            m[primefactor[x]] = 1\n        x = x // primefactor[x]\n    lst.append(list(m.items()))\nA = [0 for i in range(n + 1)]\nprefix = [[0 for k in range(6)] for i in range(n + 1)]\nA[0] = 0\nA[1] = 1\nfor i in range(2, n + 1):\n    A[i] = len(lst[i - 2])\nfor i in range(1, n + 1):\n    for k in range(1, 6):\n        prefix[i][k] = prefix[i - 1][k] + (A[i] == k)\nt = int(input())\nfor _ in range(t):\n    (l, r, k) = map(int, input().split())\n    print(prefix[r][k] - prefix[l - 1][k])", "max = 10 ** 5 + 1\nprime = [1 for i in range(max)]\n(prime[0], prime[1]) = (0, 0)\nmarked = [0 for i in range(max)]\nfor i in range(2, max):\n    if prime[i]:\n        marked[i] = 1\n        for j in range(i * 2, max, i):\n            prime[j] = 0\n            marked[j] += 1\ncount = []\nfor k in range(1, 6):\n    temp = [0] * max\n    for i in range(2, max):\n        if marked[i] == k:\n            temp[i] = temp[i - 1] + 1\n        else:\n            temp[i] = temp[i - 1]\n    count.append(temp)\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(count[k - 1][b] - count[k - 1][a - 1])", "def eve(N):\n    m = [0 for i in range(N + 1)]\n    Prime = [True for i in range(N + 1)]\n    for i in range(2, N + 1):\n        if Prime[i]:\n            m[i] = 1\n            j = 2\n            while i * j <= N:\n                Prime[i * j] = False\n                m[i * j] += 1\n                j += 1\n    return m\n\ndef pre_comp(m, N):\n    table = [[0 for i in range(10 ** 5 + 1)] for j in range(5)]\n    for i in range(2, N + 1):\n        for j in range(0, 5):\n            table[j][i] = table[j][i - 1]\n        v = m[i]\n        if v >= 1 and v <= 5:\n            table[v - 1][i] += 1\n    return table\nm = eve(10 ** 5)\ntable = pre_comp(m, 10 ** 5)\nT = int(input())\nans = []\nfor _ in range(T):\n    (A, B, K) = [int(i) for i in input().split()]\n    ans.append(table[K - 1][B] - table[K - 1][A - 1])\nfor i in ans:\n    print(i)", "def eve(N):\n    m = [0 for i in range(N + 1)]\n    Prime = [True for i in range(N + 1)]\n    for i in range(2, N + 1):\n        if Prime[i]:\n            m[i] = 1\n            j = 2\n            while i * j <= N:\n                Prime[i * j] = False\n                m[i * j] += 1\n                j += 1\n    return m\n\ndef precompute(m, N):\n    table = [[0 for i in range(10 ** 5 + 1)] for j in range(5)]\n    for i in range(2, N + 1):\n        for j in range(0, 5):\n            table[j][i] = table[j][i - 1]\n        v = m[i]\n        if v >= 1 and v <= 5:\n            table[v - 1][i] += 1\n    return table\nm = eve(10 ** 5)\ntable = precompute(m, 10 ** 5)\nT = int(input())\nans = []\nfor _ in range(T):\n    (A, B, K) = [int(i) for i in input().split()]\n    ans.append(table[K - 1][B] - table[K - 1][A - 1])\nfor i in ans:\n    print(i)", "import math\nprimes = [0] * 100001\nfor i in range(2, 100001):\n    if primes[i] == 0:\n        for j in range(i, 100001, i):\n            primes[j] += 1\ncount = []\nfor k in range(1, 6):\n    c = [0] * 100001\n    for i in range(100001):\n        if primes[i] == k:\n            c[i] = c[i - 1] + 1\n        else:\n            c[i] = c[i - 1]\n    count.append(c)\nT = int(input())\nfor _ in range(T):\n    (a, b, k) = map(int, input().split())\n    print(count[k - 1][b] - count[k - 1][a - 1])", "import math\nprimes = [0] * 100001\nfor i in range(2, 100001):\n    if primes[i] == 0:\n        for j in range(i, 100001, i):\n            primes[j] += 1\ncount = []\nfor k in range(1, 6):\n    c = [0] * 100001\n    for i in range(100001):\n        if primes[i] == k:\n            c[i] = c[i - 1] + 1\n        else:\n            c[i] = c[i - 1]\n    count.append(c)\nT = int(input())\nfor _ in range(T):\n    (a, b, k) = map(int, input().split())\n    print(count[k - 1][b] - count[k - 1][a - 1])", "lim = 10 ** 5 + 1\ndp = [0] * lim\nfor i in range(2, lim):\n    if dp[i] == 0:\n        for j in range(i, lim, i):\n            dp[j] += 1\nnk = [['X']]\nfor k in range(1, 5 + 1):\n    l = [0] * lim\n    for j in range(lim):\n        if dp[j] == k:\n            l[j] = l[j - 1] + 1\n        else:\n            l[j] = l[j - 1]\n    nk.append(l)\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(nk[k][b] - nk[k][a - 1])", "R = lambda : list(map(int, input().split()))\nM = 100001\nsieve = [0] * M\n(sieve[0], sieve[1]) = (0, 0)\nfor i in range(2, M):\n    if sieve[i] == 0:\n        for j in range(i, M, i):\n            sieve[j] += 1\nm = [[0 for j in range(M)] for i in range(6)]\nfor i in range(1, 6):\n    for j in range(1, M):\n        if sieve[j] == i:\n            m[i][j] = 1\n        m[i][j] += m[i][j - 1]\n\ndef main():\n    for _ in range(int(input())):\n        (A, B, K) = R()\n        print(m[K][B] - m[K][A - 1])\nmain()", "R = lambda : list(map(int, input().split()))\nM = 100001\nsieve = [0] * M\n(sieve[0], sieve[1]) = (0, 0)\nfor i in range(2, M):\n    if sieve[i] == 0:\n        for j in range(i, M, i):\n            sieve[j] += 1\nm = [[0 for j in range(M)] for i in range(6)]\nfor i in range(1, 6):\n    for j in range(1, M):\n        if sieve[j] == i:\n            m[i][j] = 1\n        m[i][j] += m[i][j - 1]\n\ndef main():\n    for _ in range(int(input())):\n        (A, B, K) = R()\n        print(m[K][B] - m[K][A - 1])\nmain()", "from math import *\nR = lambda : list(map(int, input().split()))\nM = 100001\nsieve = [0] * M\n(sieve[0], sieve[1]) = (0, 0)\nfor i in range(2, M):\n    if sieve[i] == 0:\n        for j in range(i, M, i):\n            sieve[j] += 1\nm = [[0 for j in range(M)] for i in range(6)]\nfor i in range(1, 6):\n    for j in range(1, M):\n        if sieve[j] == i:\n            m[i][j] = 1\n        m[i][j] += m[i][j - 1]\n\ndef main():\n    for _ in range(int(input())):\n        (A, B, K) = R()\n        print(m[K][B] - m[K][A - 1])\nmain()", "from math import *\nR = lambda : list(map(int, input().split()))\nMAX = 100000 + 1\nsieve = [0] * MAX\n(sieve[0], sieve[1]) = (0, 0)\nfor i in range(2, MAX):\n    if sieve[i] == 0:\n        for j in range(i, MAX, i):\n            sieve[j] += 1\nm = [[0 for j in range(MAX)] for i in range(5 + 1)]\nfor i in range(1, 6):\n    for j in range(1, MAX):\n        if sieve[j] == i:\n            m[i][j] = 1\n        m[i][j] += m[i][j - 1]\nfor _ in range(int(input())):\n    (a, b, k) = R()\n    res = m[k][b] - m[k][a - 1]\n    print(res)", "def PrimeFactorCountSieve(n):\n    pfc = [0] * (n + 1)\n    for i in range(2, n + 1):\n        if pfc[i] == 0:\n            for j in range(i, n + 1, i):\n                pfc[j] += 1\n    return pfc\n\ndef CumulativeKPrimeFactorCount(pfc):\n    ckpfc = [[0 for _ in range(6)] for __ in range(len(pfc))]\n    for a in range(2, len(ckpfc)):\n        if pfc[a] < 6:\n            ckpfc[a][pfc[a]] = 1\n        for b in range(6):\n            ckpfc[a][b] += ckpfc[a - 1][b]\n    return ckpfc\n_MAX = 100000\npfc = PrimeFactorCountSieve(_MAX)\nckpfc = CumulativeKPrimeFactorCount(pfc)\nfor case in range(int(input())):\n    (a, b, k) = tuple(map(int, input().split()))\n    print(ckpfc[b][k] - ckpfc[a - 1][k])", "t = int(input())\nn = 100000\nprime = [0 for i in range(n + 1)]\np = 2\nwhile p <= n:\n    if not prime[p]:\n        for j in range(p, n + 1, p):\n            prime[j] += 1\n    p += 1\ncache = [[0 for i in range(n + 1)] for j in range(5)]\nfor i in range(1, 6):\n    for j in range(2, n + 1):\n        if prime[j] == i:\n            cache[i - 1][j] = cache[i - 1][j - 1] + 1\n        else:\n            cache[i - 1][j] = cache[i - 1][j - 1]\nwhile t:\n    (A, B, K) = map(int, input().split())\n    print(cache[K - 1][B] - cache[K - 1][A - 1])\n    t -= 1", "t = int(input())\nprime = [0 for i in range(100001)]\np = 2\nwhile p < 100001:\n    if prime[p] == 0:\n        for j in range(p, 100001, p):\n            prime[j] += 1\n    p += 1\ncp = [[0] * 100001 for i in range(5)]\nfor i in range(1, 6):\n    for j in range(2, 100001):\n        if prime[j] == i:\n            cp[i - 1][j] = cp[i - 1][j - 1] + 1\n        else:\n            cp[i - 1][j] = cp[i - 1][j - 1]\nwhile t:\n    (a, b, k) = map(int, input().strip().split())\n    print(cp[k - 1][b] - cp[k - 1][a - 1])\n    t -= 1", "factors = [0 for i in range(100001)]\np = 2\nwhile p < 100001:\n    if factors[p] == 0:\n        for j in range(p, 100001, p):\n            factors[j] += 1\n    p += 1\ndp = [[0 for b in range(100001)] for b in range(6)]\nfor i in range(1, 6):\n    for j in range(2, 100001):\n        if factors[j] == i:\n            dp[i][j] = dp[i][j - 1] + 1\n        else:\n            dp[i][j] = dp[i][j - 1]\ntt = int(input())\nfor b in range(tt):\n    (a, b, k) = map(int, input().split())\n    print(dp[k][b] - dp[k][a - 1])", "dp = [[0 for row in range(6)] for col in range(100001)]\n\ndef sieve():\n    for i in range(2, 100001):\n        if dp[i][0] == 0:\n            dp[i][0] = 1\n            for j in range(2 * i, 100001, i):\n                dp[j][0] += 1\n        if dp[i][0] <= 5:\n            dp[i][dp[i][0]] = 1\n        for j in range(1, 6):\n            dp[i][j] += dp[i - 1][j]\nsieve()\nfor t in range(int(input())):\n    (A, B, K) = map(int, input().split())\n    print(dp[B][K] - dp[A - 1][K])", "def sieve(N):\n    marked = [0 for i in range(N + 1)]\n    isPrime = [True for i in range(N + 1)]\n    for i in range(2, N + 1):\n        if isPrime[i]:\n            marked[i] = 1\n            j = 2\n            while i * j <= N:\n                isPrime[i * j] = False\n                marked[i * j] += 1\n                j += 1\n    return marked\n\ndef precompute(marked, N):\n    table = [[0 for i in range(10 ** 5 + 1)] for j in range(5)]\n    for i in range(2, N + 1):\n        for j in range(0, 5):\n            table[j][i] = table[j][i - 1]\n        v = marked[i]\n        if v >= 1 and v <= 5:\n            table[v - 1][i] += 1\n    return table\nmarked = sieve(10 ** 5)\ntable = precompute(marked, 10 ** 5)\nT = int(input())\nans = []\nfor _ in range(T):\n    (A, B, K) = [int(i) for i in input().split()]\n    ans.append(table[K - 1][B] - table[K - 1][A - 1])\nfor i in ans:\n    print(i)", "P = input\nJ = int\nE = len\nD = range\nB = [None] * 100001\nL = []\nfor A in D(2, E(B)):\n    B[A] = set()\nfor A in D(2, 100001):\n    if E(B[A]) != 0:\n        continue\n    L.append(A)\n    B[A].add(A)\n    for F in D(2, E(B)):\n        G = F * A\n        if G > 100000:\n            break\n        else:\n            while G <= 100000:\n                B[G].add(A)\n                G *= A\nC = [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0], [0, 0]]\nK = [0, 0, 0, 0, 0, 0]\nfor A in D(2, E(B)):\n    for F in D(1, E(C)):\n        C[F].append(K[F])\n    H = E(B[A])\n    if H <= 5:\n        C[H][-1] += 1\n        K[H] += 1\nM = J(P())\nfor Q in D(1, M + 1):\n    I = P().split(' ')\n    N = J(I[0])\n    O = J(I[1])\n    type = J(I[2])\n    print(f'{C[type][O] - C[type][N - 1]}')", "n = 10 ** 5 + 2\n\ndef Sieve(n):\n    (prime, p) = ([0 for i in range(n)], 2)\n    for i in range(2, n):\n        if prime[i] == 0:\n            for j in range(p, n, p):\n                prime[j] += 1\n        p += 1\n    return prime\n\ndef array():\n    (a, q, l) = ([True for i in range(6)], [], Sieve(n))\n    for i in range(n):\n        a = a[:]\n        if l[i] <= 5:\n            a[l[i]] += 1\n        q.append(a)\n    return q\nq = array()\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(q[b][k] - q[a - 1][k])", "def kprime(a):\n    for i in range(2, 100005):\n        if a[i][0] == 0:\n            a[i][0] = 1\n            for j in range(i + i, 100005, i):\n                a[j][0] += 1\n        if a[i][0] <= 5:\n            a[i][a[i][0]] = 1\n        for j in range(1, 6):\n            a[i][j] += a[i - 1][j]\n\ndef solve():\n    A = [[0 for x in range(6)] for y in range(100005)]\n    kprime(A)\n    for _ in range(int(input())):\n        (a, b, x) = input().split()\n        (a, b, k) = (int(a), int(b), int(x))\n        ans = A[b][k] - A[a - 1][k]\n        print(ans)\nsolve()", "n = 10 ** 5 + 2\n\ndef Sieve(n):\n    (prime, p) = ([0 for i in range(n)], 2)\n    for i in range(2, n):\n        if prime[i] == 0:\n            for j in range(p, n, p):\n                prime[j] += 1\n        p += 1\n    return prime\n\ndef array():\n    (a, q, l) = ([True for i in range(6)], [], Sieve(n))\n    for i in range(n):\n        a = a[:]\n        if l[i] <= 5:\n            a[l[i]] += 1\n        q.append(a)\n    return q\nq = array()\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(q[b][k] - q[a - 1][k])", "from sys import stdin, stdout\nimport bisect\nimport math\n\ndef st():\n    return list(stdin.readline().strip())\n\ndef inp():\n    return int(stdin.readline())\n\ndef li():\n    return list(map(int, stdin.readline().split()))\n\ndef mp():\n    return map(int, stdin.readline().split())\n\ndef pr(n):\n    stdout.write(str(n) + '\\n')\n\ndef soe(limit):\n    l = [1] * (limit + 1)\n    prime = []\n    for i in range(2, limit + 1):\n        if l[i]:\n            prime.append(i)\n            for j in range(i * i, limit + 1, i):\n                l[j] = 0\n    return prime\n\ndef segsoe(low, high):\n    limit = int(high ** 0.5) + 1\n    prime = soe(limit)\n    n = high - low + 1\n    l = [0] * (n + 1)\n    for i in range(len(prime)):\n        lowlimit = low // prime[i] * prime[i]\n        if lowlimit < low:\n            lowlimit += prime[i]\n        if lowlimit == prime[i]:\n            lowlimit += prime[i]\n        for j in range(lowlimit, high + 1, prime[i]):\n            l[j - low] = 1\n    for i in range(low, high + 1):\n        if not l[i - low]:\n            if i != 1:\n                print(i)\n\ndef power(a, n):\n    r = 1\n    while n:\n        if n & 1:\n            r = r * a\n            n = n - 1\n        else:\n            a = a * a\n            n = n >> 1\n    return r\nl = soe(10 ** 5)\np = [0] * (10 ** 5 + 1)\nx = [[0 for i in range(10 ** 5 + 1)] for j in range(6)]\nfor i in l:\n    for j in range(i, 10 ** 5 + 1, i):\n        p[j] += 1\nfor i in range(2, len(p)):\n    for j in range(1, 6):\n        x[j][i] = x[j][i - 1]\n    a = p[i]\n    if a >= 1 and a <= 5:\n        x[a][i] += 1\n\ndef solve():\n    (a, b, k) = mp()\n    (b, n) = (x[k][a - 1], x[k][b])\n    print(n - b)\nfor _ in range(inp()):\n    solve()", "n = 10 ** 5 + 1\nprime = [0] * n\nfor i in range(2, n):\n    if prime[i] == 0:\n        for j in range(i, n, i):\n            prime[j] += 1\nk_prime = {}\nfor i in range(1, 6):\n    k_prime[i] = [0] * n\n    for j in range(2, n):\n        if prime[j] == i:\n            k_prime[i][j] += 1\n        k_prime[i][j] += k_prime[i][j - 1]\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    t_1 = k_prime[k][b] - k_prime[k][a - 1]\n    print(t_1)", "n = 10 ** 5 + 1\nl = [0] * n\nfor i in range(2, n):\n    if l[i] == 0:\n        for j in range(i, n, i):\n            l[j] += 1\nx = [0]\nfor k in range(1, 6):\n    m = [0] * n\n    for i in range(2, n):\n        if l[i] == k:\n            m[i] += 1\n        m[i] += m[i - 1]\n    x.append(m)\nt = int(input())\nwhile t > 0:\n    (a, b, k) = map(int, input().split())\n    ans = x[k][b] - x[k][a - 1]\n    print(ans)\n    t -= 1", "def kprime(a):\n    for i in range(2, 100005):\n        if a[i][0] == 0:\n            a[i][0] = 1\n            for j in range(i + i, 100005, i):\n                a[j][0] += 1\n        if a[i][0] <= 5:\n            a[i][a[i][0]] = 1\n        for j in range(1, 6):\n            a[i][j] += a[i - 1][j]\n\ndef solve():\n    A = [[0 for x in range(6)] for y in range(100005)]\n    kprime(A)\n    for _ in range(int(input())):\n        (a, b, x) = input().split()\n        (a, b, k) = (int(a), int(b), int(x))\n        ans = 0\n        ans = A[b][k] - A[a - 1][k]\n        print(ans)\nsolve()", "def kprime(a):\n    for i in range(2, 100005):\n        if a[i][0] == 0:\n            a[i][0] = 1\n            for j in range(i + i, 100005, i):\n                a[j][0] += 1\n        if a[i][0] <= 5:\n            a[i][a[i][0]] = 1\n        for j in range(1, 6):\n            a[i][j] += a[i - 1][j]\n\ndef solve():\n    A = [[0 for x in range(6)] for y in range(100005)]\n    kprime(A)\n    for _ in range(int(input())):\n        (a, b, x) = input().split()\n        (a, b, k) = (int(a), int(b), int(x))\n        ans = 0\n        ans = A[b][k] - A[a - 1][k]\n        print(ans)\nsolve()", "def kprime(a):\n    for i in range(2, 100005):\n        if a[i][0] == 0:\n            a[i][0] = 1\n            for j in range(i + i, 100005, i):\n                a[j][0] += 1\n        if a[i][0] <= 5:\n            a[i][a[i][0]] = 1\n        for j in range(1, 6):\n            a[i][j] += a[i - 1][j]\n\ndef solve():\n    A = [[0 for x in range(6)] for y in range(100005)]\n    kprime(A)\n    for _ in range(int(input())):\n        (a, b, x) = input().split()\n        (a, b, k) = (int(a), int(b), int(x))\n        ans = 0\n        ans = A[b][k] - A[a - 1][k]\n        print(ans)\nsolve()", "def kprime(a):\n    for i in range(2, 100005):\n        if a[i][0] == 0:\n            a[i][0] = 1\n            for j in range(i + i, 100005, i):\n                a[j][0] += 1\n        if a[i][0] <= 5:\n            a[i][a[i][0]] = 1\n        for j in range(1, 6):\n            a[i][j] += a[i - 1][j]\n\ndef solve():\n    A = [[0 for x in range(6)] for y in range(100005)]\n    kprime(A)\n    for _ in range(int(input())):\n        (a, b, x) = input().split()\n        (a, b, k) = (int(a), int(b), int(x))\n        ans = 0\n        ans = A[b][k] - A[a - 1][k]\n        print(ans)\nsolve()", "def kprime(a):\n    for i in range(2, 100005):\n        if a[i][0] == 0:\n            a[i][0] = 1\n            for j in range(i + i, 100005, i):\n                a[j][0] += 1\n        if a[i][0] <= 5:\n            a[i][a[i][0]] = 1\n        for j in range(1, 6):\n            a[i][j] += a[i - 1][j]\n\ndef solve():\n    A = [[0 for x in range(6)] for y in range(100005)]\n    kprime(A)\n    for _ in range(int(input())):\n        (a, b, x) = input().split()\n        (a, b, k) = (int(a), int(b), int(x))\n        ans = 0\n        ans = A[b][k] - A[a - 1][k]\n        print(ans)\nsolve()", "(sieve, cnt, d) = ([1] * 100001, [0] * 100001, [[0, 0] for _ in range(6)])\nsieve[0] = sieve[1] = 0\nfor i in range(2, 100001):\n    if sieve[i]:\n        cnt[i] += 1\n        for j in range(i * 2, 100001, i):\n            (sieve[j], cnt[j]) = (0, cnt[j] + 1)\nfor i in range(1, 6):\n    for j in range(2, 100001):\n        d[i].append(d[i][-1] + (cnt[j] == i))\nfor _ in range(int(input())):\n    (a, b, k) = map(int, input().split())\n    print(d[k][b] - d[k][a - 1])", "def kprime(n):\n    s = [0 for b in range(n + 1)]\n    for i in range(2, n + 1):\n        if not s[i]:\n            for j in range(2 * i, n + 1, i):\n                s[j] += 1\n            s[i] = 1\n    return s\ns = kprime(100005)\nt = [[0 for b in range(100005)] for b in range(6)]\nfor i in range(1, 6):\n    for j in range(2, 100005):\n        if s[j] == i:\n            t[i][j] = t[i][j - 1] + 1\n        else:\n            t[i][j] = t[i][j - 1]\nT = int(input())\nfor b in range(T):\n    (A, B, K) = map(int, input().split())\n    print(t[K][B] - t[K][A - 1])", "def sieve(n):\n    factors = [0 for _ in range(n + 1)]\n    for i in range(2, n + 1):\n        if not factors[i]:\n            for j in range(2 * i, n + 1, i):\n                factors[j] += 1\n            factors[i] = 1\n    return factors\nfactors = sieve(100005)\nlookup = [[0 for _ in range(100005)] for _ in range(6)]\nfor i in range(1, 6):\n    for j in range(2, 100005):\n        if factors[j] == i:\n            lookup[i][j] = lookup[i][j - 1] + 1\n        else:\n            lookup[i][j] = lookup[i][j - 1]\nt = int(input())\nfor _ in range(t):\n    (a, b, k) = map(int, input().split())\n    print(lookup[k][b] - lookup[k][a - 1])", "test = int(input())\nt1 = [0]\nt2 = [0]\nt3 = [0]\nt4 = [0]\nt5 = [0]\nn = 100000\nl = n + 1\nprime = [0 for i in range(0, l)]\nfor p in range(2, n):\n    if prime[p] == 0:\n        for i in range(p, l, p):\n            prime[i] += 1\nfor i in range(1, 100001):\n    s = prime[i]\n    if s == 1:\n        t1.append(t1[i - 1] + 1)\n        t2.append(t2[i - 1])\n        t3.append(t3[i - 1])\n        t4.append(t4[i - 1])\n        t5.append(t5[i - 1])\n    elif s == 2:\n        t1.append(t1[i - 1])\n        t2.append(t2[i - 1] + 1)\n        t3.append(t3[i - 1])\n        t4.append(t4[i - 1])\n        t5.append(t5[i - 1])\n    elif s == 3:\n        t1.append(t1[i - 1])\n        t2.append(t2[i - 1])\n        t3.append(t3[i - 1] + 1)\n        t4.append(t4[i - 1])\n        t5.append(t5[i - 1])\n    elif s == 4:\n        t1.append(t1[i - 1])\n        t2.append(t2[i - 1])\n        t3.append(t3[i - 1])\n        t4.append(t4[i - 1] + 1)\n        t5.append(t5[i - 1])\n    elif s == 5:\n        t1.append(t1[i - 1])\n        t2.append(t2[i - 1])\n        t3.append(t3[i - 1])\n        t4.append(t4[i - 1])\n        t5.append(t5[i - 1] + 1)\n    else:\n        t1.append(t1[i - 1])\n        t2.append(t2[i - 1])\n        t3.append(t3[i - 1])\n        t4.append(t4[i - 1])\n        t5.append(t5[i - 1])\nfor tt in range(test):\n    (a, b, k) = map(int, input().split())\n    if k == 1:\n        print(t1[b] - t1[a - 1])\n    if k == 2:\n        print(t2[b] - t2[a - 1])\n    if k == 3:\n        print(t3[b] - t3[a - 1])\n    if k == 4:\n        print(t4[b] - t4[a - 1])\n    if k == 5:\n        print(t5[b] - t5[a - 1])", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfrom collections import defaultdict\nMAX_N = 10 ** 5 + 1\n\ndef dfactors(n):\n    factors = [0] * n\n    p = 2\n    while p < n:\n        if factors[p] == 0:\n            for i in range(p, n, p):\n                factors[i] += 1\n        p += 1\n    return factors\n\ndef prefix_sum(data):\n    pre = defaultdict(list)\n    pre[0] = [0] * 6\n    for i in range(1, MAX_N):\n        pre[i] = pre[i - 1][:]\n        k = factors[i]\n        if 1 <= k <= 5:\n            pre[i][k] += 1\n    return pre\nfactors = dfactors(MAX_N)\npre = prefix_sum(factors)\nfor _ in range(int(input())):\n    (A, B, K) = map(int, input().split())\n    print(pre[B][K] - pre[A - 1][K])", "__author__ = 'Ronald Kaiser'\n__email__ = 'raios dot catodicos at gmail dot com'\nfrom collections import defaultdict\nMAX_N = 10 ** 5 + 1\n\ndef dfactors():\n    factors = [0] * MAX_N\n    p = 2\n    while p < MAX_N:\n        if factors[p] == 0:\n            for i in range(p, MAX_N, p):\n                factors[i] += 1\n        p += 1\n    return factors\n\ndef prefix_sum(data):\n    pre = defaultdict(list)\n    pre[0] = [0] * 6\n    for i in range(1, MAX_N):\n        pre[i] = pre[i - 1][:]\n        k = factors[i]\n        if 1 <= k <= 5:\n            pre[i][k] += 1\n    return pre\nfactors = dfactors()\npre = prefix_sum(factors)\nfor _ in range(int(input())):\n    (A, B, K) = map(int, input().split())\n    print(pre[B][K] - pre[A - 1][K])"]