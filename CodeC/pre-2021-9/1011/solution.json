["t = int(input())\nwhile t:\n    (n, m) = list(map(int, input().split()))\n    building = []\n    res = []\n    for i in range(0, n):\n        building.append(list(map(int, input().split())))\n        res.append([1] * m)\n        for j in range(0, m):\n            max_element = 0\n            if i - 1 >= 0 and building[i][j] < building[i - 1][j] or (i - 1 >= 0 and j - 1 >= 0 and (building[i][j] < building[i - 1][j - 1])) or (i - 1 >= 0 and j + 1 < m and (building[i][j] < building[i - 1][j + 1])):\n                res[i][j] = 0\n            if i - 1 >= 0:\n                max_element = max(max_element, building[i - 1][j])\n            if i - 1 >= 0 and j - 1 >= 0:\n                max_element = max(max_element, building[i - 1][j - 1])\n            if i - 1 >= 0 and j + 1 < m:\n                max_element = max(max_element, building[i - 1][j + 1])\n            building[i][j] = max(building[i][j], max_element)\n    for i in range(0, n):\n        for j in range(0, m):\n            print(res[i][j], end='')\n        print()\n    t -= 1", "t = int(input())\nwhile t:\n    (n, m) = list(map(int, input().split()))\n    building = []\n    res = []\n    for i in range(0, n):\n        building.append(list(map(int, input().split())))\n        res.append([1] * m)\n        for j in range(0, m):\n            max_element = 0\n            if i - 1 >= 0 and building[i][j] < building[i - 1][j] or (i - 1 >= 0 and j - 1 >= 0 and (building[i][j] < building[i - 1][j - 1])) or (i - 1 >= 0 and j + 1 < m and (building[i][j] < building[i - 1][j + 1])):\n                res[i][j] = 0\n            if i - 1 >= 0:\n                max_element = max(max_element, building[i - 1][j])\n            if i - 1 >= 0 and j - 1 >= 0:\n                max_element = max(max_element, building[i - 1][j - 1])\n            if i - 1 >= 0 and j + 1 < m:\n                max_element = max(max_element, building[i - 1][j + 1])\n            building[i][j] = max(building[i][j], max_element)\n    for i in range(0, n):\n        for j in range(0, m):\n            print(res[i][j], end='')\n        print()\n    t -= 1", "t = int(input())\nwhile t:\n    (n, m) = list(map(int, input().split()))\n    building = []\n    res = []\n    for i in range(0, n):\n        building.append(list(map(int, input().split())))\n        res.append([1] * m)\n    for i in range(1, n):\n        for j in range(0, m):\n            max_element = 0\n            if i - 1 >= 0 and building[i][j] < building[i - 1][j] or (i - 1 >= 0 and j - 1 >= 0 and (building[i][j] < building[i - 1][j - 1])) or (i - 1 >= 0 and j + 1 < m and (building[i][j] < building[i - 1][j + 1])):\n                res[i][j] = 0\n            if i - 1 >= 0:\n                max_element = max(max_element, building[i - 1][j])\n            if i - 1 >= 0 and j - 1 >= 0:\n                max_element = max(max_element, building[i - 1][j - 1])\n            if i - 1 >= 0 and j + 1 < m:\n                max_element = max(max_element, building[i - 1][j + 1])\n            building[i][j] = max(building[i][j], max_element)\n    for i in range(0, n):\n        for j in range(0, m):\n            print(res[i][j], end='')\n        print()\n    t -= 1", "import numpy as np\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = np.zeros((n + 2, m + 2), dtype=int)\n    dp = np.zeros((n + 2, m + 2), dtype=int)\n    for i in range(1, n + 1):\n        t = list(map(int, input().split()))\n        for j in range(1, m + 1):\n            a[i][j] = t[j - 1]\n            dp[i][j] = max(a[i][j], dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i][j] == dp[i][j]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n            print(dp[i][j], end='')\n        print()", "import numpy as np\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = np.zeros((n + 2, m + 2), dtype=int)\n    dp = np.zeros((n + 2, m + 2), dtype=int)\n    for i in range(1, n + 1):\n        t = list(map(int, input().split()))\n        for j in range(1, m + 1):\n            a[i][j] = t[j - 1]\n            dp[i][j] = max(a[i][j], dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i][j] == dp[i][j]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n            print(dp[i][j], end='')\n        print()", "import numpy as np\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = np.zeros((n + 2, m + 2), dtype=int)\n    dp = np.zeros((n + 2, m + 2), dtype=int)\n    for i in range(1, n + 1):\n        t = list(map(int, input().split()))\n        for j in range(1, m + 1):\n            a[i][j] = t[j - 1]\n            dp[i][j] = max(a[i][j], dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i][j] == dp[i][j]:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n            print(dp[i][j], end='')\n        print()", "def setmax(i, M, A, B):\n    for j in range(M):\n        B[i + 1][j] = max(B[i + 1][j], A[i][j], B[i][j])\n        if j > 0:\n            B[i + 1][j - 1] = max(B[i + 1][j - 1], A[i][j], B[i][j])\n        if j < M - 1:\n            B[i + 1][j + 1] = max(B[i + 1][j + 1], A[i][j], B[i][j])\nT = int(input())\nans = []\nfor _ in range(T):\n    (N, M) = [int(i) for i in input().split()]\n    A = []\n    for i in range(N):\n        x = [int(i) for i in input().split()]\n        A.append(x)\n    B = [[0 for i in range(M)] for j in range(N)]\n    for i in range(N - 1):\n        setmax(i, M, A, B)\n    for i in range(N):\n        s = ''\n        for j in range(M):\n            if B[i][j] > A[i][j]:\n                s += '0'\n            else:\n                s += '1'\n        ans.append(s)\nfor i in ans:\n    print(i)", "try:\n    t = int(input())\n    while t > 0:\n        t -= 1\n        (n, m) = list(map(int, input().split()))\n        a = [list(map(int, input().split())) for _ in range(n)]\n        dp = [[0 for _ in range(m)] for _ in range(n)]\n        ans = [['0' for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i - 1 < n:\n                    if 0 <= j - 1 and j + 1 < m:\n                        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])\n                    elif j == 0:\n                        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1])\n                    elif j == m - 1:\n                        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j])\n                if dp[i][j] > a[i][j]:\n                    ans[i][j] = '0'\n                else:\n                    ans[i][j] = '1'\n                    dp[i][j] = a[i][j]\n        for i in ans:\n            print(''.join(i))\nexcept:\n    pass", "try:\n    t = int(input())\n    while t > 0:\n        t -= 1\n        (n, m) = list(map(int, input().split()))\n        a = [list(map(int, input().split())) for _ in range(n)]\n        dp = [[0 for _ in range(m)] for _ in range(n)]\n        ans = [['0' for _ in range(m)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                if i - 1 < n:\n                    if 0 <= j - 1 and j + 1 < m:\n                        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])\n                    elif j == 0:\n                        dp[i][j] = max(dp[i - 1][j], dp[i - 1][j + 1])\n                    elif j == m - 1:\n                        dp[i][j] = max(dp[i - 1][j - 1], dp[i - 1][j])\n                if dp[i][j] > a[i][j]:\n                    ans[i][j] = '0'\n                else:\n                    ans[i][j] = '1'\n                    dp[i][j] = a[i][j]\n        for i in ans:\n            print(''.join(i))\nexcept:\n    pass", "for _ in range(int(input())):\n    (N, M) = list(map(int, input().split()))\n    matrix = []\n    for i in range(N):\n        l = list(map(int, input().split()))\n        matrix.append(l)\n    for i in range(1, N):\n        for j in range(M):\n            if j == 0:\n                if max(matrix[i - 1][j], matrix[i - 1][j + 1]) > matrix[i][j]:\n                    matrix[i][j] = max(matrix[i - 1][j], matrix[i - 1][j + 1])\n            elif j == M - 1:\n                if max(matrix[i - 1][j], matrix[i - 1][j - 1]) > matrix[i][j]:\n                    matrix[i][j] = max(matrix[i - 1][j], matrix[i - 1][j - 1])\n            elif max(matrix[i - 1][j - 1], matrix[i - 1][j], matrix[i - 1][j + 1]) > matrix[i][j]:\n                matrix[i][j] = max(matrix[i - 1][j - 1], matrix[i - 1][j], matrix[i - 1][j + 1])\n    ans = [[1] * M for i in range(N)]\n    for i in range(1, N):\n        for j in range(M):\n            if j == 0:\n                if max(matrix[i - 1][j], matrix[i - 1][j + 1]) >= matrix[i][j]:\n                    ans[i][j] = 0\n            elif j == M - 1:\n                if max(matrix[i - 1][j], matrix[i - 1][j - 1]) >= matrix[i][j]:\n                    ans[i][j] = 0\n            elif max(matrix[i - 1][j - 1], matrix[i - 1][j], matrix[i - 1][j + 1]) >= matrix[i][j]:\n                ans[i][j] = 0\n    for i in range(N):\n        for j in range(M):\n            print(ans[i][j], end='')\n        print()", "from collections import defaultdict\nfrom heapq import *\nimport itertools, math\n\ndef parse_integer_list():\n    return [int(x) for x in input().split()]\n\ndef before_me(A, i, j, M):\n    if M == 1:\n        val = A[i][j] > A[i - 1][j]\n        A[i][j] = max(A[i][j], A[i - 1][j])\n        return val\n    if j == 0:\n        val = A[i][j] > max(A[i - 1][j], A[i - 1][j + 1])\n        A[i][j] = max(A[i][j], A[i - 1][j], A[i - 1][j + 1])\n        return val\n    if j == M - 1:\n        val = A[i][j] > max(A[i - 1][j], A[i - 1][j - 1])\n        A[i][j] = max(A[i][j], A[i - 1][j], A[i - 1][j - 1])\n        return val\n    val = A[i][j] > max(A[i - 1][j], A[i - 1][j - 1], A[i - 1][j + 1])\n    A[i][j] = max(A[i][j], A[i - 1][j], A[i - 1][j - 1], A[i - 1][j + 1])\n    return val\n\ndef handle_input(A, N, M):\n    B = []\n    res = []\n    res.append('1' * M)\n    for i in range(1, N):\n        res.append('')\n        for j in range(M):\n            res[-1] += '1' if before_me(A, i, j, M) else '0'\n    for i in range(len(res)):\n        print(res[i])\nT = int(input())\nfor i in range(T):\n    (N, M) = parse_integer_list()\n    A = []\n    for i in range(N):\n        A.append(parse_integer_list())\n    handle_input(A, N, M)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    print('1' * m)\n    prev = tuple(map(int, input().split()))\n    for i in range(1, n):\n        s = ''\n        now = tuple(map(int, input().split()))\n        prev_ = []\n        for j in range(m):\n            temp = prev[j]\n            if j + 1 < m and prev[j + 1] > temp:\n                temp = prev[j + 1]\n            if j > 0 and prev[j - 1] > temp:\n                temp = prev[j - 1]\n            if temp < now[j]:\n                s += '1'\n                temp = now[j]\n            else:\n                s += '0'\n            prev_.append(temp)\n        prev = prev_\n        print(s)", "for _ in range(int(input())):\n    (N, M) = list(map(int, input().split()))\n    A = []\n    B = [['1' for x in range(M)] for x in range(N)]\n    C = [['1' for x in range(M)] for x in range(N)]\n    for __ in range(N):\n        A.append(list(map(int, input().split())))\n    B[0] = A[0].copy()\n    for i in range(1, N):\n        p = i - 1\n        for j in range(0, M):\n            B[i][j] = A[p][j]\n            B[i][j] = max(B[i][j], A[i][j])\n            if j >= 1:\n                B[i][j] = max(B[i][j], B[p][j - 1])\n            if j <= M - 2:\n                B[i][j] = max(B[i][j], B[p][j + 1])\n    C[0] = [1] * M\n    for i in range(1, N):\n        for j in range(0, M):\n            if B[i][j] > A[i][j]:\n                C[i][j] = 0\n    for i in range(0, N):\n        for j in range(0, M):\n            print(C[i][j], end='')\n        print()", "def arr_str(arr):\n    strr = ''\n    for i in arr:\n        strr += str(i)\n    return strr\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    A = [0] * n\n    for i in range(n):\n        temp = [0]\n        B = [int(i) for i in input().split()]\n        temp.extend(B)\n        temp.append(0)\n        A[i] = temp\n    ans = [[0 for i in range(m)] for j in range(n)]\n    dp = [[0 for i in range(m + 2)] for j in range(n)]\n    for i in range(m):\n        dp[0][i + 1] = A[0][i + 1]\n    for i in range(1, n):\n        for j in range(1, m + 1):\n            temp = max(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1])\n            if temp > A[i][j]:\n                ans[i - 1][j - 1] = 0\n            else:\n                ans[i - 1][j - 1] = 1\n            temp = max(temp, A[i][j])\n            dp[i][j] = temp\n    tem = [1] * m\n    print(arr_str(tem), end='\\n')\n    for i in range(n - 1):\n        print(arr_str(ans[i]), end='\\n')", "t = int(input())\nfor i in range(0, t):\n    (n, m) = map(int, input().split())\n    arr = []\n    ans = []\n    for i in range(0, n):\n        in_arr = list(map(int, input().split()))\n        if i == 0:\n            x = '1' * m\n        else:\n            x = ''\n            for j in range(0, m):\n                arr2 = [0] * m\n                if j == 0:\n                    maxv = max(ans[i - 1][0], ans[i - 1][1])\n                elif j == m - 1:\n                    maxv = max(ans[i - 1][m - 2], ans[i - 1][m - 1])\n                else:\n                    maxv = max(ans[i - 1][j - 1], ans[i - 1][j], ans[i - 1][j + 1])\n                if maxv > in_arr[j]:\n                    in_arr[j] = maxv\n                    x = x + '0'\n                else:\n                    x = x + '1'\n        ans.append(in_arr)\n        arr.append(x)\n    for i in range(0, n):\n        print(arr[i])", "T = int(input())\nwhile T > 0:\n    (N, M) = [int(x) for x in input().split()]\n    arr = [[int(x) for x in input().split()] for y in range(N)]\n    ans = [['1' for x in range(M)] for y in range(N)]\n    for i in range(1, N):\n        for j in range(M):\n            m = max(arr[i][j], arr[i - 1][j])\n            if j - 1 >= 0:\n                m = max(m, arr[i - 1][j - 1])\n            if j + 1 < M:\n                m = max(m, arr[i - 1][j + 1])\n            if arr[i][j] != m:\n                ans[i][j] = '0'\n            arr[i][j] = m\n    for i in range(N):\n        print(''.join(ans[i]))\n    T -= 1", "t = int(input())\nfor i in range(t):\n    arr = []\n    (n, m) = map(int, input().split())\n    z = ['1' for i in range(m)]\n    arr.append(list(map(int, input().split())))\n    print(''.join(z))\n    for i in range(1, n):\n        x = ''\n        arr.append(list(map(int, input().split())))\n        if arr[i][0] > arr[i - 1][0] and arr[i][0] > arr[i - 1][1]:\n            x += '1'\n        else:\n            x += '0'\n        arr[i][0] = max(arr[i - 1][0], arr[i][0], arr[i - 1][1])\n        for j in range(1, m - 1):\n            if arr[i][j] > arr[i - 1][j] and arr[i][j] > arr[i - 1][j + 1] and (arr[i][j] > arr[i - 1][j - 1]):\n                x += '1'\n            else:\n                x += '0'\n            arr[i][j] = max(arr[i - 1][j], arr[i][j], arr[i - 1][j + 1], arr[i - 1][j - 1])\n        if arr[i][m - 1] > arr[i - 1][m - 1] and arr[i][m - 1] > arr[i - 1][m - 2]:\n            x += '1'\n        else:\n            x += '0'\n        arr[i][m - 1] = max(arr[i - 1][m - 2], arr[i][m - 1], arr[i - 1][m - 1])\n        print(x)", "from sys import stdin\nt = int(stdin.readline())\nwhile t:\n    (n, m) = map(int, stdin.readline().split())\n    a = []\n    k = [[1 for _ in range(m)] for __ in range(n)]\n    for _ in range(n):\n        a.append(list(map(int, stdin.readline().split())))\n    dp = [[a[i][_] for _ in range(m)] for i in range(n)]\n    for i in range(1, n):\n        for j in range(m):\n            if j == m - 1:\n                dp[i][j] = max(0, max(dp[i - 1][j - 1], dp[i - 1][j]))\n            elif j == 0:\n                dp[i][j] = max(0, max(dp[i - 1][j], dp[i - 1][j + 1]))\n            else:\n                dp[i][j] = max(0, max(dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]))\n            if dp[i][j] > a[i][j]:\n                k[i][j] = 0\n            else:\n                k[i][j] = 1\n                dp[i][j] = a[i][j]\n    for i in range(n):\n        for j in range(m):\n            print(k[i][j], end='')\n        print()\n    t -= 1", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    b = [0] * m\n    for _ in range(n):\n        a = list(R())\n        b = list(map(max, a, [0] + b, b, b[1:] + [0]))\n        print(''.join(('10'[x < y] for (x, y) in zip(a, b))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    b = (0,) * m\n    for _ in range(n):\n        a = (*R(),)\n        b = (*map(max, a, (0,) + b, b, b[1:] + (0,)),)\n        print(''.join(('10'[x < y] for (x, y) in zip(a, b))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    b = (0,) * m\n    for _ in range(n):\n        a = tuple(R())\n        b = (*map(max, a, (0,) + b, b, b[1:] + (0,)),)\n        print(''.join(('10'[x < y] for (x, y) in zip(a, b))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    b = (0,) * m\n    for _ in range(n):\n        a = (*R(),)\n        b = (*map(max, a, (0,) + b, b, b[1:] + (0,)),)\n        print(''.join(('10'[x < y] for (x, y) in zip(a, b))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    b = [0] * m\n    for _ in range(n):\n        a = (*R(),)\n        b = (*map(max, a, (0, *b), b, (*b[1:], 0)),)\n        print(''.join(('10'[x < y] for (x, y) in zip(a, b))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    b = [0] * m\n    for _ in range(n):\n        a = list(R())\n        b = list(map(max, a, [0] + b, b, b[1:] + [0]))\n        print(''.join(('10'[x < y] for (x, y) in zip(a, b))))", "t = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    arr = []\n    for j in range(n):\n        arr += [[int(j) for j in input().split()]]\n    dp = [[0 for i in range(m)] for j in range(n)]\n    ans = [[0 for i in range(m)] for j in range(n)]\n    for i in range(m):\n        dp[0][i] = arr[0][i]\n        ans[0][i] = 1\n    if m == 1:\n        for i in range(1, n):\n            dp[i][0] = max(dp[i - 1][0], arr[i][0])\n            if dp[i][0] == arr[i][0]:\n                ans[i][0] = 1\n        for x in ans:\n            print(*x, sep='')\n        continue\n    for i in range(1, n):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1], arr[i][0])\n        if dp[i][0] == arr[i][0]:\n            ans[i][0] = 1\n        for j in range(1, m - 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - 1], dp[i - 1][j + 1], arr[i][j])\n            if dp[i][j] == arr[i][j]:\n                ans[i][j] = 1\n        dp[i][m - 1] = max(dp[i - 1][m - 1], dp[i - 1][m - 2], arr[i][m - 1])\n        if dp[i][m - 1] == arr[i][m - 1]:\n            ans[i][m - 1] = 1\n    for x in ans:\n        print(*x, sep='')", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    get_ups = lambda r, c: [(r - 1, c + i) for i in [1, 0, -1] if 0 <= c + i < m]\n    grid = [list(map(int, input().split())) for _ in range(n)]\n    res = [[0] * m for _ in range(n)]\n    res[0] = ['1'] * m\n    for i in range(1, n):\n        for j in range(m):\n            t = 1\n            for (r, c) in get_ups(i, j):\n                if grid[r][c] > grid[i][j]:\n                    grid[i][j] = grid[r][c]\n                    t = 0\n            res[i][j] = '1' if t else '0'\n    for r in res:\n        print(''.join(r))", "R = lambda : map(int, input().split())\nf = lambda x: ([0] + x, x, x[1:] + [0])\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    a = b = [0] * m\n    for _ in range(n):\n        a = list(map(max, *f(a), *f(b)))\n        b = list(R())\n        print(''.join(('01'[x < y] for (x, y) in zip(a, b))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    a = b = [0] * m\n    for _ in range(n):\n        a = list(map(max, [0] + a, a, a[1:] + [0], [0] + b, b, b[1:] + [0]))\n        b = list(R())\n        print(''.join(('01'[x < y] for (x, y) in zip(a, b))))", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    a = b = [0] * m\n    for _ in range(n):\n        a = list(map(max, zip([0] + a, a, a[1:] + [0], [0] + b, b, b[1:] + [0])))\n        b = list(R())\n        print(''.join(('01'[x < y] for (x, y) in zip(a, b))))", "from collections import defaultdict\nt = int(input())\nfor _ in range(0, t):\n    (r, c) = list(map(int, input().split()))\n    a = []\n    for _ in range(r):\n        a.append(list(map(int, input().split())))\n    d = defaultdict(lambda : 0)\n    for i in range(1, r):\n        for j in range(0, c):\n            if j - 1 >= 0:\n                d[i, j] = max(a[i - 1][j - 1], d[i, j], d[i - 1, j - 1])\n            if j >= 0:\n                d[i, j] = max(a[i - 1][j], d[i, j], d[i - 1, j])\n            if j + 1 < c:\n                d[i, j] = max(a[i - 1][j + 1], d[i, j], d[i - 1, j + 1])\n    for i in range(0, r):\n        if i != 0:\n            print()\n        for j in range(0, c):\n            if a[i][j] > d[i, j]:\n                print(1, end='')\n            else:\n                print(0, end='')\n        if i == r - 1:\n            print()", "t = int(input())\nwhile t:\n    l = []\n    ll = []\n    (n, m) = map(int, input().split())\n    for i in range(n):\n        li = list(map(int, input().split()))\n        l.append(li)\n        ll.append(list(li))\n    for i in range(n):\n        for j in range(m):\n            if i - 1 >= 0 and j - 1 >= 0:\n                ll[i][j] = max(ll[i][j], ll[i - 1][j - 1])\n            if i - 1 >= 0:\n                ll[i][j] = max(ll[i][j], ll[i - 1][j])\n            if i - 1 >= 0 and j + 1 < m:\n                ll[i][j] = max(ll[i][j], ll[i - 1][j + 1])\n            if l[i][j] < ll[i][j]:\n                print(0, end='')\n            else:\n                print(1, end='')\n        print()\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = [int(x) for x in input().strip().split()]\n    mat = []\n    clean = []\n    for i in range(n):\n        row = [int(x) for x in input().strip().split()]\n        clean.append([0] * m)\n        mat.append(row)\n    clean[0] = [1] * m\n    for i in range(1, n):\n        for j in range(m):\n            upleft = 0 if j - 1 < 0 else mat[i - 1][j - 1]\n            upper = mat[i - 1][j]\n            upright = 0 if j + 1 >= m else mat[i - 1][j + 1]\n            if mat[i][j] > max(upleft, upper, upright):\n                clean[i][j] = 1\n            else:\n                mat[i][j] = max(upleft, upper, upright)\n    for i in range(n):\n        print(*clean[i], sep='')", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    a = b = [0] * (m + 2)\n    for _ in range(n):\n        a = list(map(max, zip([0] + a, a, a[1:] + [0], [0] + b, b, b[1:] + [0])))\n        b = list(R())\n        print(''.join(('01'[x < y] for (x, y) in zip(a, b))))", "t = int(input())\nfor i in range(t):\n    (x, y) = list(map(int, input().strip().split()))\n    a = []\n    for j in range(x):\n        a.append(list(map(int, input().strip().split())))\n    op = [[0] * y for j in range(x)]\n    mdt = [[0] * y for j in range(x)]\n    for j in range(1, x):\n        for k in range(y):\n            mdt[j][k] = max(mdt[j - 1][max(0, k - 1)], mdt[j - 1][k], mdt[j - 1][min(y - 1, k + 1)], a[j - 1][max(0, k - 1)], a[j - 1][k], a[j - 1][min(y - 1, k + 1)])\n    for j in range(x):\n        for k in range(y):\n            if mdt[j][k] < a[j][k]:\n                op[j][k] = 1\n    for j in range(x):\n        print(''.join(list(map(str, op[j]))))", "t = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().split()))\n    matrix = []\n    for k3 in range(n):\n        matrix.append(list(map(int, input().split())))\n    output = []\n    for k2 in range(n):\n        output.append([[1, -1] for k in range(m)])\n    for i in range(1, n):\n        for j in range(m):\n            if matrix[i - 1][j] > matrix[i][j] or (j - 1 >= 0 and matrix[i - 1][j - 1] > matrix[i][j]) or (j + 1 < m and matrix[i - 1][j + 1] > matrix[i][j]):\n                output[i][j] = [0, max(matrix[i - 1][j], -1 if j - 1 < 0 else matrix[i - 1][j - 1], -1 if j + 1 >= m else matrix[i - 1][j + 1], output[i - 1][j][1], -1 if j - 1 < 0 else output[i - 1][j - 1][1], -1 if j + 1 >= m else output[i - 1][j + 1][1])]\n            elif matrix[i][j] < output[i - 1][j][1] or (j - 1 >= 0 and matrix[i][j] < output[i - 1][j - 1][1]) or (j + 1 < m and matrix[i][j] < output[i - 1][j + 1][1]):\n                output[i][j] = [0, max(output[i - 1][j][1], -1 if j - 1 < 0 else output[i - 1][j - 1][1], -1 if j + 1 >= m else output[i - 1][j + 1][1])]\n    for i in range(n):\n        for j in range(m):\n            print(output[i][j][0], end='')\n        print()", "R = lambda : map(int, input().split())\n(t,) = R()\nfor _ in range(t):\n    (n, m) = R()\n    a = r = [0] * (m + 2)\n    for _ in range(n):\n        r = [max(r[i - 1:i + 2] + a[i - 1:i + 2]) for i in range(1, m + 1)]\n        a = list(R())\n        print(''.join(('10'[x > y] for (x, y) in zip(r, a))))\n        r = [0] + r + [0]\n        a = [0] + a + [0]", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, m) = map(int, input().split())\n    arr = [0] * m\n    arrm = []\n    for i in range(n):\n        arr1 = arr.copy()\n        arrm.append(arr1)\n    build = []\n    for i in range(n):\n        build.append(list(map(int, input().split())))\n    for j in range(m):\n        arrm[0][j] = build[0][j]\n        if arrm[0][j] == build[0][j]:\n            print('1', end='')\n        else:\n            print('0', end='')\n    print()\n    for i in range(1, n):\n        for j in range(m):\n            if j == 0:\n                arrm[i][j] = max(max(build[i][j], arrm[i - 1][j]), arrm[i - 1][j + 1])\n            elif j == m - 1:\n                arrm[i][j] = max(max(build[i][j], arrm[i - 1][j]), arrm[i - 1][j - 1])\n            else:\n                arrm[i][j] = max(max(build[i][j], arrm[i - 1][j]), max(arrm[i - 1][j + 1], arrm[i - 1][j - 1]))\n            if arrm[i][j] == build[i][j]:\n                print('1', end='')\n            else:\n                print('0', end='')\n        print()", "tc = int(input())\nfor _ in range(tc):\n    (n, m) = map(int, input().split())\n    mt = []\n    ans = []\n    for __ in range(n):\n        t = list(map(int, input().split()))\n        mt.append(t)\n    ans.append([1] * m)\n    for i in range(1, n):\n        temp = []\n        for j in range(m):\n            tl = 0 if j - 1 < 0 else mt[i - 1][j - 1]\n            tp = mt[i - 1][j]\n            tr = 0 if j + 1 >= m else mt[i - 1][j + 1]\n            if mt[i][j] > max([tl, tp, tr]):\n                temp.append(1)\n            else:\n                temp.append(0)\n                mt[i][j] = max([tl, tp, tr])\n        ans.append(temp)\n    for i in ans:\n        print(*i, sep='')", "from bisect import *\nfrom collections import *\nfrom itertools import *\nimport functools\nimport sys\nimport math\nfrom decimal import *\nfrom copy import *\nfrom heapq import *\nfrom fractions import *\ngetcontext().prec = 30\nMAX = sys.maxsize\nMAXN = 1000010\nMOD = 10 ** 9 + 7\nspf = [i for i in range(MAXN)]\n\ndef sieve():\n    for i in range(2, MAXN, 2):\n        spf[i] = 2\n    for i in range(3, int(MAXN ** 0.5) + 1):\n        if spf[i] == i:\n            for j in range(i * i, MAXN, i):\n                if spf[j] == j:\n                    spf[j] = i\n\ndef fib(n, m):\n    if n == 0:\n        return [0, 1]\n    else:\n        (a, b) = fib(n1 // 2)\n        c = a % m * (b % m * 2 - a % m) % m\n        d = a % m * (a % m) % m + b % m * b % m % m\n        if n % 2 == 0:\n            return [c, d]\n        else:\n            return [d, c + d]\n\ndef charIN(x=' '):\n    return sys.stdin.readline().strip().split(x)\n\ndef arrIN(x=' '):\n    return list(map(int, sys.stdin.readline().strip().split(x)))\n\ndef ncr(n, r):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % MOD\n        den = den * (i + 1) % MOD\n    return num * pow(den, MOD - 2, MOD) % MOD\n\ndef flush():\n    return sys.stdout.flush()\nfor _ in range(int(input())):\n    (n, m) = arrIN()\n    a = [arrIN() for i in range(n)]\n    mx = [[0 for i in range(m + 2)] for j in range(n + 2)]\n    for i in range(n):\n        for j in range(m):\n            mx[i][j] = max(a[i][j], mx[i - 1][j], mx[i - 1][j - 1], mx[i - 1][j + 1])\n    for i in range(n):\n        for j in range(m):\n            print(1 if a[i][j] >= mx[i][j] else 0, end='')\n        print()", "def printer(ls):\n    for i in range(len(ls)):\n        for j in range(len(ls[i])):\n            print(ls[i][j], end='')\n        print()\n\ndef lss(ls, N, M):\n    tmp = ls[:]\n    ans = [[0 for i in range(M)] for j in range(N)]\n    for i in range(N):\n        if i == 0:\n            for j in range(M):\n                ans[i][j] = 1\n        else:\n            for j in range(M):\n                if j == 0:\n                    tmp2 = max(tmp[i - 1][j], tmp[i - 1][j + 1])\n                elif j == M - 1:\n                    tmp2 = max(tmp[i - 1][j], tmp[i - 1][j - 1])\n                else:\n                    tmp2 = max(tmp[i - 1][j], tmp[i - 1][j + 1], tmp[i - 1][j - 1])\n                if ls[i][j] > tmp2:\n                    ans[i][j] = 1\n                else:\n                    ans[i][j] = 0\n                tmp[i][j] = max(tmp2, tmp[i][j])\n    printer(ans)\nfor _ in range(int(input())):\n    (N, M) = [int(i) for i in input().split()]\n    ls = []\n    for i in range(N):\n        tmp = [int(i) for i in input().split()]\n        ls.append(tmp)\n    lss(ls, N, M)", "from collections import deque\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    z = [[] for i in range(n * m + 1)]\n    a = []\n    dc = [['.' for i in range(m)] for i in range(n)]\n    vis = set([n * m])\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n        for j in range(m):\n            z[a[i][j]] = [i, j]\n    last = n * m\n    while len(vis) != n * m:\n        vis.add(last)\n        dc[z[last][0]][z[last][1]] = '1'\n        q = deque([[z[last][0], z[last][1]]])\n        while q:\n            f = q.popleft()\n            if f[0] + 1 >= n:\n                continue\n            if f[1] - 1 >= 0:\n                if dc[f[0] + 1][f[1] - 1] == '.':\n                    dc[f[0] + 1][f[1] - 1] = '0'\n                    vis.add(a[f[0] + 1][f[1] - 1])\n                    q.append([f[0] + 1, f[1] - 1])\n            if f[1] + 1 <= m - 1:\n                if dc[f[0] + 1][f[1] + 1] == '.':\n                    dc[f[0] + 1][f[1] + 1] = '0'\n                    vis.add(a[f[0] + 1][f[1] + 1])\n                    q.append([f[0] + 1, f[1] + 1])\n            if dc[f[0] + 1][f[1]] == '.':\n                dc[f[0] + 1][f[1]] = '0'\n                vis.add(a[f[0] + 1][f[1]])\n                q.append([f[0] + 1, f[1]])\n        while last in vis:\n            last -= 1\n    for i in dc:\n        print(''.join(i))", "for t in range(int(input())):\n    (n, m) = map(int, input().split())\n    prev = list(map(int, input().split()))\n    print('1' * m)\n    for i in range(1, n):\n        s = ''\n        a = list(map(int, input().split()))\n        temp = []\n        for j in range(m):\n            item = prev[j]\n            if j + 1 < m:\n                item = max(item, prev[j + 1])\n            if j - 1 >= 0:\n                item = max(item, prev[j - 1])\n            if a[j] > item:\n                s += '1'\n                item = a[j]\n            else:\n                s += '0'\n            temp.append(item)\n        print(s)\n        prev = temp", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    l = [[0 for i in range(M + 2)]]\n    f = [[0 for i in range(M + 2)]]\n    for i in range(N):\n        X = [0] + list(map(int, input().split())) + [0]\n        l.append(X[:])\n        f.append(X[:])\n    l.append([0 for i in range(M + 2)])\n    f.append([0 for i in range(M + 2)])\n    for i in range(1, N + 1):\n        for j in range(1, M + 1):\n            x = max(l[i - 1][j - 1], l[i - 1][j], l[i - 1][j + 1])\n            if l[i][j] > x:\n                f[i][j] = 1\n            else:\n                f[i][j] = 0\n                l[i][j] = x\n    for i in f[1:-1]:\n        for j in i[1:-1]:\n            print(j, end='')\n        print()", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    aa = []\n    it = []\n    for i in range(n):\n        itt = list(map(int, input().split()))\n        it.append(itt[:])\n    tt = [i[:] for i in it]\n    for i in range(1, n):\n        for j in range(m):\n            if j == 0 and m == 1:\n                tt[i][j] = max(tt[i][j], tt[i - 1][j])\n            elif j == 0:\n                tt[i][j] = max([tt[i][j], tt[i - 1][j], tt[i - 1][j + 1]])\n            elif j == m - 1:\n                tt[i][j] = max([tt[i][j], tt[i - 1][j], tt[i - 1][j - 1]])\n            else:\n                tt[i][j] = max([tt[i][j], tt[i - 1][j], tt[i - 1][j - 1], tt[i - 1][j + 1]])\n    for i in range(n):\n        for j in range(m):\n            if it[i][j] == tt[i][j]:\n                print('1', end='')\n            else:\n                print('0', end='')\n        print()\n    continue\n    vis = [['0' for i in range(m)] for j in range(n)]\n    for ii in aa:\n        (x, y) = ii[1:]\n        vis[x][y] = '1'\n        (a, b) = (y, y)\n        x -= 1\n        while x >= 0:\n            a = max(0, a - 1)\n            b = min(m - 1, b + 1)\n            for i in range(a, b + 1):\n                vis[x][i] = '0'\n            x -= 1\n    for i in vis[-1::-1]:\n        print(''.join(i))", "from collections import defaultdict\nfor _ in range(int(input())):\n    (n, m) = [int(s) for s in input().split()]\n    l = [[-1 for i in range(m + 2)]] + [[-1] + [int(s) for s in input().split()] + [-1] for j in range(n)] + [[-1 for i in range(m + 2)]]\n    l1 = [[0 for i in range(m + 2)] for j in range(n + 2)]\n    for i in range(n + 2):\n        for j in range(m + 2):\n            l1[i][j] = l[i][j]\n    dirtyw = defaultdict(lambda : 0)\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            w = max(l1[i][j], l1[i - 1][j - 1], l1[i - 1][j], l1[i - 1][j + 1])\n            l1[i][j] = w\n    ans = set()\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            ans.add(l1[i][j])\n    an = [[0 for i in range(m)] for j in range(n)]\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if l[i][j] in ans:\n                an[i - 1][j - 1] = '1'\n            else:\n                an[i - 1][j - 1] = '0'\n    for i in an:\n        print(''.join(i))", "def valid(i, j, n, m):\n    if i < 0 or i >= n or j < 0 or (j >= m):\n        return False\n    return True\nt = int(input())\nfor _ in range(t):\n    (n, m) = input().strip().split()\n    (n, m) = (int(n), int(m))\n    arr = [0] * n\n    for i in range(n):\n        arr[i] = input().strip().split()\n        for j in range(m):\n            arr[i][j] = int(arr[i][j])\n    dp = [0] * n\n    for i in range(n):\n        dp[i] = [0] * m\n    for i in range(n):\n        for j in range(m):\n            dp[i][j] = arr[i][j]\n            if valid(i - 1, j - 1, n, m):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1])\n            if valid(i - 1, j, n, m):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j])\n            if valid(i - 1, j + 1, n, m):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j + 1])\n    for i in range(n):\n        for j in range(m):\n            if arr[i][j] >= dp[i][j]:\n                print(1, end='')\n            else:\n                print(0, end='')\n        print()\n    print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    matrix = []\n    for _ in range(n):\n        matrix.append(list(map(int, input().split())))\n    ans = [[-1] * m for _ in range(n)]\n    di = ((1, -1), (1, 0), (1, 1))\n    for i in range(n):\n        for j in range(m):\n            if ans[i][j] == -1:\n                ans[i][j] = 1\n            for d in di:\n                (ii, jj) = (i + d[0], j + d[1])\n                if ii >= n or jj >= m or ii < 0 or (jj < 0):\n                    continue\n                if matrix[ii][jj] < matrix[i][j]:\n                    ans[ii][jj] = 0\n                    matrix[ii][jj] = matrix[i][j]\n    for i in ans:\n        print(''.join(map(str, i)))", "for _ in range(int(input())):\n    (m, n) = map(int, input().split())\n    s = []\n    for __ in range(m):\n        s.append([int(i) for i in input().split()])\n    c = [[1 for i in range(n)] for i in range(m)]\n    for i in range(1, m):\n        for j in range(n):\n            if j > 0 and s[i][j] < s[i - 1][j - 1]:\n                c[i][j] = 0\n            if j > 0:\n                s[i][j] = max(s[i][j], s[i - 1][j - 1])\n            if s[i][j] < s[i - 1][j]:\n                c[i][j] = 0\n            s[i][j] = max(s[i][j], s[i - 1][j])\n            if j < n - 1 and s[i][j] < s[i - 1][j + 1]:\n                c[i][j] = 0\n            if j < n - 1:\n                s[i][j] = max(s[i][j], s[i - 1][j + 1])\n    for row in c:\n        print(*row, sep='')", "for _ in range(int(input())):\n    (ro, col) = map(int, input().split())\n    grid = [[0] * (col + 2)]\n    for i in range(ro):\n        grid += [[0] + list(map(int, input().split())) + [0]]\n    dp = [[0] * (col + 2) for i in range(ro + 1)]\n    for i in range(1, ro + 1):\n        for j in range(1, col + 1):\n            dp[i][j] = max([grid[i - 1][j - 1], grid[i - 1][j], grid[i - 1][j + 1], dp[i - 1][j - 1], dp[i - 1][j], dp[i - 1][j + 1]])\n    ans = [['0'] * col for i in range(ro)]\n    for i in range(ro):\n        for j in range(col):\n            if grid[i + 1][j + 1] > dp[i + 1][j + 1]:\n                ans[i][j] = '1'\n    for i in ans:\n        print(''.join(i))", "t = int(input())\nfor i in range(t):\n    (n, m) = list(map(int, input().split()))\n    turn = []\n    for j in range(n):\n        row = list(map(int, input().split()))\n        turn.append(row)\n    print('1' * m)\n    for j in range(1, n):\n        clean = [1] * m\n        for k in range(m):\n            a = max(turn[j - 1][max(k - 1, 0)], turn[j - 1][k], turn[j - 1][min(k + 1, m - 1)])\n            if a > turn[j][k]:\n                turn[j][k] = a\n                clean[k] = 0\n        print(*clean, sep='')", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef num():\n    return map(int, sys.stdin.readline().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    gg = find_gcd(x, y)\n    return x * y // gg\nmm = 1000000007\n\ndef solve():\n    t = nu()\n    for tt in range(t):\n        (n, m) = num()\n        x = [0] * n\n        a = [0] * n\n        ss = []\n        vis = [0] * n\n        for i in range(n):\n            vv = li()\n            x[i] = vv\n            a[i] = [1] * m\n            vis[i] = [0] * m\n            for j in range(m):\n                ss.append((vv[j], i, j))\n        ss.sort(reverse=True)\n        for i in range(len(ss)):\n            p = ss[i][1]\n            q = ss[i][2]\n            if vis[p][q] == 1:\n                continue\n            a[p][q] = 1\n            vis[p][q] = 1\n            zp = p + 1\n            zo = q - 1\n            while zp < n and zo >= 0:\n                if vis[zp][zo] == 1:\n                    break\n                for j in range(zp, n):\n                    if vis[j][zo] == 1:\n                        break\n                    a[j][zo] = 0\n                    vis[j][zo] = 1\n                zp += 1\n                zo -= 1\n            zp = p + 1\n            zo = q + 1\n            while zp < n and zo < m:\n                if vis[zp][zo] == 1:\n                    break\n                for j in range(zp, n):\n                    if vis[j][zo] == 1:\n                        break\n                    a[j][zo] = 0\n                    vis[j][zo] = 1\n                zp += 1\n                zo += 1\n            zp = p + 1\n            zo = q\n            for j in range(zp, n):\n                if vis[j][zo] == 1:\n                    break\n                a[j][zo] = 0\n                vis[j][zo] = 1\n        for i in range(n):\n            print(*a[i], sep='')\nsolve()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[0 for i in range(m + 2)]]\n    for i in range(n):\n        a.append([0] + list(map(int, input().split())) + [0])\n    a.append([0 for i in range(m + 2)])\n    ans = [[0 for i in range(m + 2)] for j in range(n + 2)]\n    for j in range(1, m + 1):\n        ans[1][j] = a[1][j]\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            ans[i][j] = max(ans[i - 1][j], ans[i - 1][j + 1], ans[i - 1][j - 1], a[i - 1][j], a[i - 1][j + 1], a[i - 1][j - 1])\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            if a[i][j] >= ans[i][j]:\n                print(1, end='')\n            else:\n                print(0, end='')\n        print()", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    grid = []\n    dirty = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        y = [1 for i in range(m)]\n        grid.append(x)\n        dirty.append(y)\n    for i in range(1, n):\n        for j in range(m):\n            if j > 0 and j < m - 1:\n                if grid[i][j] < max(grid[i - 1][j - 1], grid[i - 1][j], grid[i - 1][j + 1]):\n                    grid[i][j] = max(grid[i - 1][j - 1], grid[i - 1][j], grid[i - 1][j + 1])\n                    dirty[i][j] = 0\n            elif j == 0 and m == 1:\n                if grid[i][j] < max(grid[i - 1][j]):\n                    grid[i][j] = max(grid[i - 1][j])\n                    dirty[i][j] = 0\n            elif j == 0:\n                if grid[i][j] < max(grid[i - 1][j], grid[i - 1][j + 1]):\n                    grid[i][j] = max(grid[i - 1][j], grid[i - 1][j + 1])\n                    dirty[i][j] = 0\n            elif j == m - 1:\n                if grid[i][j] < max(grid[i - 1][j - 1], grid[i - 1][j]):\n                    grid[i][j] = max(grid[i - 1][j - 1], grid[i - 1][j])\n                    dirty[i][j] = 0\n    for i in dirty:\n        for j in i:\n            print(j, end='')\n        print()"]