["from math import gcd\nimport sys\nfor _ in range(int(input())):\n    (a, b, c, d, k) = map(int, input().split())\n    g = gcd(a, b)\n    f = gcd(c, d)\n    d = k // (g * f // gcd(g, f))\n    print(2 * d + 1)", "from math import gcd\nimport sys\nfor _ in range(int(input())):\n    (a, b, c, d, k) = map(int, input().split())\n    g = gcd(a, b)\n    f = gcd(c, d)\n    d = k // (g * f // gcd(g, f))\n    print(2 * d + 1)", "from math import gcd\nimport sys\nfor _ in range(int(input())):\n    (a, b, c, d, k) = map(int, input().split())\n    g = gcd(a, b)\n    f = gcd(c, d)\n    print(2 * (k // (g * f // gcd(g, f))) + 1)", "from math import gcd\nfor _ in range(int(input())):\n    (a, b, c, d, k) = map(int, input().split())\n    g = gcd(a, b)\n    f = gcd(c, d)\n    print(2 * (k // (g * f // gcd(g, f))) + 1)", "from math import gcd\nimport sys\n\ndef solve():\n    (a, b, c, d, k) = map(int, input().split())\n    g = gcd(a, b)\n    f = gcd(c, d)\n    lcm_gf = g * f // gcd(g, f)\n    d = k // lcm_gf\n    res = 2 * d + 1\n    print(res)\nfor _ in range(int(input())):\n    solve()", "def gcd(A, B):\n    while A != B:\n        if A > B:\n            A -= B\n        else:\n            B -= A\n    return A\nfor T in range(int(input())):\n    (A, B, C, D, K) = [int(x) for x in input().split()]\n    GCD_1 = gcd(A, B)\n    GCD_2 = gcd(C, D)\n    GCD = gcd(GCD_1, GCD_2)\n    LCM = int(GCD_1 * GCD_2 / GCD)\n    count = int(K // LCM)\n    count *= 2\n    count += 1\n    print(count)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (a, b, c, d, k) = map(int, input().split())\n    gcd1 = gcd(b, a)\n    gcd2 = gcd(d, c)\n    gcd3 = gcd(max(gcd1, gcd2), min(gcd1, gcd2))\n    lcm = int(gcd1 * gcd2 / gcd3)\n    c = k // lcm\n    if c == 0:\n        print(1)\n    else:\n        print(c * 2 + 1)", "def gcd(A, B):\n    while A != B:\n        if A > B:\n            A -= B\n        else:\n            B -= A\n    return A\nfor T in range(int(input())):\n    (A, B, C, D, K) = [int(x) for x in input().split()]\n    GCD_1 = gcd(A, B)\n    GCD_2 = gcd(C, D)\n    GCD = gcd(GCD_1, GCD_2)\n    LCM = int(GCD_1 * GCD_2 / GCD)\n    count = int(K // LCM)\n    count *= 2\n    count += 1\n    print(count)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\nfor T in range(int(input())):\n    (A, B, C, D, K) = [int(x) for x in input().split()]\n    GCD_1 = gcd(B, A)\n    GCD_2 = gcd(D, C)\n    GCD = gcd(max(GCD_1, GCD_2), min(GCD_1, GCD_2))\n    LCM = GCD_1 * GCD_2 // GCD\n    count = int(K // LCM)\n    count *= 2\n    count += 1\n    print(count)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    (a, b, c, d, k) = map(int, input().split())\n    gcd1 = gcd(b, a)\n    gcd2 = gcd(d, c)\n    gcd3 = gcd(max(gcd1, gcd2), min(gcd1, gcd2))\n    lcm = gcd1 * gcd2 // gcd3\n    c = k // lcm\n    if c == 0:\n        print(1)\n    else:\n        print(c * 2 + 1)", "from math import gcd\n\ndef ti():\n    return tuple(map(int, input().split()))\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    (a, b, c, d, k) = li()\n    g1 = gcd(a, b)\n    g2 = gcd(c, d)\n    g3 = gcd(g1, g2)\n    print(2 * (k // (g1 * g2 // g3)) + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    (a, b, c, d, k) = map(int, input().split())\n    x = math.gcd(a, b)\n    y = math.gcd(c, d)\n    z = x * y // math.gcd(x, y)\n    ans = k // z\n    print(2 * ans + 1)", "import math\nt = int(input())\nfor _ in range(t):\n    (a, b, c, d, k) = map(int, input().split())\n    x = math.gcd(a, b)\n    y = math.gcd(c, d)\n    z = x * y // math.gcd(x, y)\n    ans = 0\n    m = z\n    ans = k // z\n    print(2 * ans + 1)", "import math\nt = int(input())\nfor i in range(t):\n    (a, b, c, d, k) = map(int, input().split())\n    g1 = math.gcd(a, b)\n    g2 = math.gcd(c, d)\n    g = math.gcd(g1, g2)\n    m = g1 * g2 // g\n    ans = k // m\n    print(ans * 2 + 1)", "import math\nt = int(input())\nfor i in range(t):\n    (a, b, c, d, k) = map(int, input().split())\n    g1 = math.gcd(a, b)\n    g2 = math.gcd(c, d)\n    g = math.gcd(g1, g2)\n    m = g1 * g2 // g\n    ans = k // m\n    print(ans * 2 + 1)", "import math\nfor _ in range(int(input())):\n    (a, b, c, d, k) = map(int, input().split())\n    g1 = math.gcd(a, b)\n    g2 = math.gcd(c, d)\n    g = math.gcd(g1, g2)\n    m = g1 * g2 // g\n    temp = k // m\n    print(temp * 2 + 1)", "import math\nfor _ in range(int(input())):\n    (a, b, c, d, k) = map(int, input().split())\n    g1 = math.gcd(a, b)\n    g2 = math.gcd(c, d)\n    g = math.gcd(g1, g2)\n    m = g1 * g2 // g\n    temp = k // m\n    print(temp * 2 + 1)", "import math\nfor _ in range(int(input())):\n    (a, b, c, d, k) = map(int, input().split())\n    g1 = math.gcd(a, b)\n    g2 = math.gcd(c, d)\n    g = math.gcd(g1, g2)\n    m = g1 * g2 // g\n    temp = k // m\n    print(temp * 2 + 1)", "import math\nfor _ in range(int(input())):\n    (a, b, c, d, k) = map(int, input().split())\n    g1 = math.gcd(a, b)\n    g2 = math.gcd(c, d)\n    g = math.gcd(g1, g2)\n    m = g1 * g2 // g\n    temp = k // m\n    print(temp * 2 + 1)", "def gcd(a, b):\n    if a % b == 0:\n        return b\n    elif b % a == 0:\n        return a\n    elif a > b:\n        return gcd(b, a % b)\n    elif b > a:\n        return gcd(a, b % a)\nt = int(input())\nfor i in range(t):\n    inp = list(map(int, input().split()))\n    a = inp[0]\n    b = inp[1]\n    c = inp[2]\n    d = inp[3]\n    k = inp[4]\n    p = gcd(a, b)\n    q = gcd(c, d)\n    s = gcd(p, q)\n    r = p * q // s\n    ans = k // r\n    print(2 * ans + 1)", "def gcd(a, b):\n    if b > a:\n        (a, b) = (b, a)\n    while a % b != 0:\n        a = a % b\n        (a, b) = (b, a)\n    return b\nfor i in range(int(input())):\n    (a, b, c, d, k) = [int(i) for i in input().split()]\n    p1 = gcd(a, b)\n    p2 = gcd(c, d)\n    p3 = p1 * p2 // gcd(p1, p2)\n    print(2 * (k // p3) + 1)", "import math\nimport sys\ntc = int(input())\nfor tcase in range(tc):\n    (a, b, c, d, k) = map(int, input().split())\n    g = math.gcd(a, b)\n    f = math.gcd(c, d)\n    lcm = g * f // math.gcd(g, f)\n    d = k // lcm\n    ans = 2 * d + 1\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor i in range(int(input())):\n    (a, b, c, d, k) = [int(x) for x in input().split()]\n    g1 = gcd(a, b)\n    g2 = gcd(c, d)\n    lcm = g1 * g2 // gcd(g1, g2)\n    ans = 2 * (k // lcm) + 1\n    print(ans)", "def gcd(a, b):\n    if a == 0:\n        return b\n    else:\n        return gcd(b % a, a)\nfor i in range(int(input())):\n    (a, b, c, d, k) = [int(x) for x in input().split()]\n    g1 = gcd(a, b)\n    g2 = gcd(c, d)\n    lcm = g1 * g2 // gcd(g1, g2)\n    ans = 2 * (k // lcm) + 1\n    print(ans)", "def GCD(u, v):\n    while v:\n        (u, v) = (v, u % v)\n    return abs(u)\nOutput = []\nn = eval(input())\nfor i in range(n):\n    a = input().split()\n    gcd1 = GCD(int(a[0]), int(a[1]))\n    gcd2 = GCD(int(a[2]), int(a[3]))\n    divisor = gcd1 * gcd2 // GCD(gcd1, gcd2)\n    Output.append(int(a[4]) // divisor * 2 + 1)\nfor i in Output:\n    print(i)", "def gcd(a, b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\n\ndef lcm(a, b):\n    return a * b / gcd(a, b)\nt = int(input())\nfor i in range(t):\n    inp = input().split(' ')\n    r = []\n    for i in inp:\n        r.append(int(i))\n    f = gcd(r[0], r[1])\n    s = gcd(r[2], r[3])\n    step = int(lcm(f, s))\n    print(r[4] // step * 2 + 1)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    a = input()\n    a = a.split()\n    ab = gcd(int(a[0]), int(a[1]))\n    cd = gcd(int(a[2]), int(a[3]))\n    com = gcd(ab, cd)\n    lcm = ab * cd // com\n    ans = int(a[4]) // lcm\n    ans = ans * 2 + 1\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    a = input()\n    a = a.split()\n    ab = gcd(int(a[0]), int(a[1]))\n    cd = gcd(int(a[2]), int(a[3]))\n    com = gcd(ab, cd)\n    lcm = ab * cd // com\n    ans = int(a[4]) // lcm\n    ans = ans * 2 + 1\n    print(ans)", "def gcd(x, y):\n    if x == 0:\n        return y\n    return gcd(y % x, x)\nt = int(input())\nfor i in range(t):\n    (a, b, c, d, k) = map(int, input().split())\n    g1 = gcd(a, b)\n    g2 = gcd(c, d)\n    lc = g1 * g2 // gcd(g1, g2)\n    print(k // lc * 2 + 1)", "def gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef lcm(a, b):\n    return a // gcd(a, b) * b\nT = int(input())\nfor i in range(T):\n    str = input().split()\n    a = int(str[0])\n    b = int(str[1])\n    c = int(str[2])\n    d = int(str[3])\n    k = int(str[4])\n    ans = lcm(gcd(a, b), gcd(c, d))\n    ans = k // ans\n    ans = 2 * ans + 1\n    print(ans)", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\n\ndef main():\n    T = int(input())\n    for x in range(T):\n        L = input().split()\n        L = [int(a) for a in L]\n        gcd1 = gcd(L[0], L[1])\n        gcd2 = gcd(L[2], L[3])\n        gcd3 = gcd(gcd1, gcd2)\n        lcm = int(gcd1 * gcd2 / gcd3)\n        result = 2 * (L[4] // lcm) + 1\n        print(result)\nmain()", "def gcd(a, b):\n    while b > 0:\n        (a, b) = (b, a % b)\n    return a\n\ndef run():\n    (a, b, c, d, k) = map(int, input().split())\n    (dx, dy) = (gcd(a, b), gcd(c, d))\n    l = dx * dy // gcd(dx, dy)\n    print(k // l * 2 + 1)\nt = int(input())\nfor i in range(t):\n    run()", "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)\nt = int(input())\nfor i in range(t):\n    a = input()\n    a = a.split()\n    ab = gcd(int(a[0]), int(a[1]))\n    cd = gcd(int(a[2]), int(a[3]))\n    com = gcd(ab, cd)\n    lcm = ab * cd // com\n    ans = int(a[4]) // lcm\n    ans = ans * 2 + 1\n    print(ans)"]