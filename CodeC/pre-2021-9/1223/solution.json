["def findmin(m, arr):\n    st = -1\n    en = n - 1\n    while en - st > 1:\n        md = (st + en) // 2\n        if arr[md] < m:\n            st = md\n        else:\n            en = md\n    return en\nsv = [True] * 101\nbpr = [2]\nfor ap in range(3, 101, 2):\n    if sv[ap]:\n        bpr.append(ap)\n        for ml in range(ap * ap, 101, ap):\n            sv[ml] = False\n\ndef facd(a):\n    rdic = dict()\n    for ap in bpr:\n        if 0 == a % ap:\n            a //= ap\n            rdic[ap] = 1\n            while 0 == a % ap:\n                a //= ap\n                rdic[ap] += 1\n            if a < ap * ap:\n                break\n    if a > 1:\n        rdic[a] = 1\n    return rdic\nfor _ in range(int(input())):\n    n = int(input())\n    z = input().split()\n    a = list(map(int, z[:n]))\n    g = a[0]\n    for ai in a:\n        ai %= g\n        while ai > 0:\n            (g, ai) = (ai, g % ai)\n        if g == 1:\n            break\n    if g > 1:\n        a = [ai // g for ai in a]\n    faclib = [facd(ai) for ai in a]\n    for ap in bpr:\n        mult = []\n        for adic in faclib:\n            m = 0\n            if ap in adic:\n                m = adic[ap]\n            mult.append(m)\n        if sum(mult) > n:\n            mult.sort()\n            thr = 1\n            nbt = 0\n            while True:\n                nbt += findmin(thr, mult)\n                nsup = findmin(thr + 2, mult)\n                surp = (sum(mult[nsup:n]) - thr * (n - nsup)) // 2\n                if surp < nbt:\n                    break\n                g *= ap\n                thr += 1\n    print(g)", "def findmin(m, arr):\n    st = -1\n    en = n - 1\n    while en - st > 1:\n        md = (st + en) // 2\n        if arr[md] < m:\n            st = md\n        else:\n            en = md\n    return en\nsv = [True] * 101\nbpr = [2]\nfor ap in range(3, 101, 2):\n    if sv[ap]:\n        bpr.append(ap)\n        for ml in range(ap * ap, 101, ap):\n            sv[ml] = False\n\ndef facd(a):\n    rdic = dict()\n    for ap in bpr:\n        if 0 == a % ap:\n            a //= ap\n            rdic[ap] = 1\n            while 0 == a % ap:\n                a //= ap\n                rdic[ap] += 1\n            if a < ap * ap:\n                break\n    if a > 1:\n        rdic[a] = 1\n    return rdic\nfor _ in range(int(input())):\n    n = int(input())\n    z = input().split()\n    a = list(map(int, z[:n]))\n    g = a[0]\n    for ai in a:\n        ai %= g\n        while ai > 0:\n            (g, ai) = (ai, g % ai)\n        if g == 1:\n            break\n    if g > 1:\n        a = [ai // g for ai in a]\n    faclib = [facd(ai) for ai in a]\n    for ap in bpr:\n        mult = []\n        for adic in faclib:\n            m = 0\n            if ap in adic:\n                m = adic[ap]\n            mult.append(m)\n        if sum(mult) > n:\n            mult.sort()\n            thr = 1\n            nbt = 0\n            while True:\n                nbt += findmin(thr, mult)\n                nsup = findmin(thr + 2, mult)\n                surp = (sum(mult[nsup:n]) - thr * (n - nsup)) // 2\n                if surp < nbt:\n                    break\n                g *= ap\n                thr += 1\n    print(g)", "def findmin(m, arr):\n    st = -1\n    en = n - 1\n    while en - st > 1:\n        md = (st + en) // 2\n        if arr[md] < m:\n            st = md\n        else:\n            en = md\n    return en\nsv = [True] * 101\nbpr = [2]\nfor ap in range(3, 101, 2):\n    if sv[ap]:\n        bpr.append(ap)\n        for ml in range(ap * ap, 101, ap):\n            sv[ml] = False\n\ndef facd(a):\n    rdic = dict()\n    for ap in bpr:\n        if 0 == a % ap:\n            a //= ap\n            rdic[ap] = 1\n            while 0 == a % ap:\n                a //= ap\n                rdic[ap] += 1\n            if a < ap * ap:\n                break\n    if a > 1:\n        rdic[a] = 1\n    return rdic\nfor _ in range(int(input())):\n    n = int(input())\n    z = input().split()\n    a = list(map(int, z[:n]))\n    g = a[0]\n    for ai in a:\n        ai %= g\n        while ai > 0:\n            (g, ai) = (ai, g % ai)\n        if g == 1:\n            break\n    if g > 1:\n        a = [ai // g for ai in a]\n    faclib = [facd(ai) for ai in a]\n    for ap in bpr:\n        mult = []\n        for adic in faclib:\n            m = 0\n            if ap in adic:\n                m = adic[ap]\n            mult.append(m)\n        if sum(mult) > n:\n            mult.sort()\n            thr = 1\n            nbt = 0\n            while True:\n                nbt += findmin(thr, mult)\n                nsup = findmin(thr + 2, mult)\n                surp = (sum(mult[nsup:n]) - thr * (n - nsup)) // 2\n                if surp < nbt:\n                    break\n                g *= ap\n                thr += 1\n    print(g)", "def findmin(m, arr):\n    st = -1\n    en = n - 1\n    while en - st > 1:\n        md = (st + en) // 2\n        if arr[md] < m:\n            st = md\n        else:\n            en = md\n    return en\nsv = [True] * 101\nbpr = [2]\nfor ap in range(3, 101, 2):\n    if sv[ap]:\n        bpr.append(ap)\n        for ml in range(ap * ap, 101, ap):\n            sv[ml] = False\n\ndef facd(a):\n    rdic = dict()\n    for ap in bpr:\n        if 0 == a % ap:\n            a //= ap\n            rdic[ap] = 1\n            while 0 == a % ap:\n                a //= ap\n                rdic[ap] += 1\n            if a < ap * ap:\n                break\n    if a > 1:\n        rdic[a] = 1\n    return rdic\nfor _ in range(int(input())):\n    n = int(input())\n    z = input().split()\n    a = list(map(int, z[:n]))\n    g = a[0]\n    for ai in a:\n        ai %= g\n        while ai > 0:\n            (g, ai) = (ai, g % ai)\n        if g == 1:\n            break\n    if g > 1:\n        a = [ai // g for ai in a]\n    faclib = [facd(ai) for ai in a]\n    for ap in bpr:\n        mult = []\n        for adic in faclib:\n            m = 0\n            if ap in adic:\n                m = adic[ap]\n            mult.append(m)\n        if sum(mult) > n:\n            mult.sort()\n            thr = 1\n            nbt = 0\n            while True:\n                nbt += findmin(thr, mult)\n                nsup = findmin(thr + 2, mult)\n                surp = (sum(mult[nsup:n]) - thr * (n - nsup)) // 2\n                if surp < nbt:\n                    break\n                g *= ap\n                thr += 1\n    print(g)", "def findmin(m, arr):\n    st = -1\n    en = n - 1\n    while en - st > 1:\n        md = (st + en) // 2\n        if arr[md] < m:\n            st = md\n        else:\n            en = md\n    return en\nsv = [True] * 101\nbpr = [2]\nfor ap in range(3, 101, 2):\n    if sv[ap]:\n        bpr.append(ap)\n        for ml in range(ap * ap, 101, ap):\n            sv[ml] = False\nfor _ in range(int(input())):\n    n = int(input())\n    z = input().split()\n    a = list(map(int, z[:n]))\n    g = a[0]\n    for ai in a:\n        ai %= g\n        while ai > 0:\n            (g, ai) = (ai, g % ai)\n        if g == 1:\n            break\n    if g > 1:\n        a = [ai // g for ai in a]\n    for ap in bpr:\n        mult = []\n        for ai in a:\n            m = 0\n            while 0 == ai % ap:\n                ai //= ap\n                m += 1\n            mult.append(m)\n        if sum(mult) > n:\n            mult.sort()\n            thr = 1\n            nbt = 0\n            while True:\n                nbt += findmin(thr, mult)\n                nsup = findmin(thr + 2, mult)\n                surp = (sum(mult[nsup:n]) - thr * (n - nsup)) // 2\n                if surp < nbt:\n                    break\n                g *= ap\n                thr += 1\n    print(g)", "sv = [True] * 101\nbpr = [2]\nfor ap in range(3, 101, 2):\n    if sv[ap]:\n        bpr.append(ap)\n        for ml in range(ap * ap, 101, ap):\n            sv[ml] = False\nfor _ in range(int(input())):\n    n = int(input())\n    z = input().split()\n    a = list(map(int, z[:n]))\n    g = a[0]\n    for ai in a:\n        ai %= g\n        while ai > 0:\n            (g, ai) = (ai, g % ai)\n        if g == 1:\n            break\n    if g > 1:\n        a = [ai // g for ai in a]\n    for ap in bpr:\n        mult = []\n        for ai in a:\n            m = 0\n            while 0 == ai % ap:\n                ai //= ap\n                m += 1\n            mult.append(m)\n        while sum(mult) > n:\n            mult.sort()\n            st = 0\n            en = n - 1\n            while mult[st] == 0 and mult[en] > 2:\n                mult[st] += 1\n                st += 1\n                mult[en] -= 2\n                en -= 1\n                if mult[en] <= 2:\n                    en = n - 1\n            if mult[st] == 0:\n                break\n            g *= ap\n            mult = [m - 1 for m in mult]\n    print(g)"]