["n = int(input())\nfor i in range(n):\n    s = input().split()\n    (m, p) = (int(s[0]), float(s[1]))\n    if m % 2 == 0:\n        r = (1 - p ** m) / (1 + p)\n    else:\n        r = (1 + p ** m) / (1 + p)\n    print(1000000000 * r, 1000000000 * (1 - r))", "n = int(input())\nfor i in range(n):\n    s = input().split()\n    (m, p) = (int(s[0]), float(s[1]))\n    if m % 2 == 0:\n        r = (1 - p ** m) / (1 + p)\n    else:\n        r = (1 + p ** m) / (1 + p)\n    print(1000000000 * r, 1000000000 * (1 - r))", "n = int(input())\nfor i in range(n):\n    s = input().split()\n    (m, p) = (int(s[0]), float(s[1]))\n    if m % 2 == 0:\n        r = (1 - p ** m) / (1 + p)\n    else:\n        r = (1 + p ** m) / (1 + p)\n    print(1000000000 * r, 1000000000 * (1 - r))", "t = int(input())\nfor i in range(t):\n    s = input().split()\n    (m, p) = (int(s[0]), float(s[1]))\n    if m % 2 == 0:\n        r = (1 - p ** m) / (1 + p)\n    else:\n        r = (1 + p ** m) / (1 + p)\n    print(1000000000 * r, 1000000000 * (1 - r))", "n = int(input())\nfor i in range(n):\n    s = input().split()\n    (m, p) = (int(s[0]), float(s[1]))\n    if m % 2 == 0:\n        r = (1 - p ** m) / (1 + p)\n    else:\n        r = (1 + p ** m) / (1 + p)\n    print(1000000000 * r, 1000000000 * (1 - r))", "n = int(input())\nfor i in range(n):\n    s = input().split()\n    (m, p) = (int(s[0]), float(s[1]))\n    if m % 2 == 0:\n        r = (1 - p ** m) / (1 + p)\n    else:\n        r = (1 + p ** m) / (1 + p)\n    print(1000000000 * r, 1000000000 * (1 - r))", "n = int(input())\nfor i in range(n):\n    s = input().split()\n    (m, p) = (int(s[0]), float(s[1]))\n    if m % 2 == 0:\n        r = (1 - p ** m) / (1 + p)\n    else:\n        r = (1 + p ** m) / (1 + p)\n    print(1000000000 * r, 1000000000 * (1 - r))", "t = int(input())\nwhile t:\n    s = input().split()\n    m = int(s[0])\n    p = float(s[1])\n    if m % 2 == 0:\n        r = (1 - p ** m) / (p + 1)\n    else:\n        r = (1 + p ** m) / (p + 1)\n    print(1000000000 * r, 1000000000 * (1 - r))\n    t -= 1", "for _ in range(int(input())):\n    (m, p) = map(float, input().split())\n    ans = 10 ** 9 * (1 - (-p) ** m) / (1 + p)\n    print(ans, 10 ** 9 - ans)", "t = int(input())\nwhile t:\n    s = input().split()\n    m = int(s[0])\n    p = float(s[1])\n    if m % 2 == 0:\n        r = (1 - p ** m) / (p + 1)\n    else:\n        r = (1 + p ** m) / (p + 1)\n    print(1000000000 * r, 1000000000 * (1 - r))\n    t -= 1", "for i in range(0, int(input())):\n    (m, p) = input().split()\n    m = int(m)\n    p = float(p)\n    val = (1 + (-1) ** (m % 2 + 1) * pow(p, m)) / (p + 1)\n    print('%.2f %.2f' % (1000000000 * val, 1000000000 * (1 - val)))", "T = int(input())\nfor t in range(T):\n    (M, p) = [x for x in input().split()]\n    M = int(M)\n    p = float(p)\n    val = (pow(-p, M) - 1) / (-p - 1) * 10 ** 9\n    print(val, 10 ** 9 - val)", "import decimal\n\ndef share_money(money, p, t):\n    if t == 1:\n        return [money, 0.0]\n    else:\n        share1 = 0\n        sign = 1\n        for index in range(t):\n            share1 += sign * pow(p, index)\n            sign *= -1\n        share1 *= money\n    share2 = money - share1\n    return [share1, share2]\n\ndef share_money2(money, p, t):\n    if t == 1:\n        return [money, 0.0]\n    share1 = money * ((1 - pow(-p, t)) / (1 + p))\n    share2 = money - share1\n    return [share1, share2]\nmoney = float(pow(10, 9))\nt = int(input())\nfor case in range(t):\n    (M, p) = list(map(float, input().split()))\n    M = int(M)\n    (share1, share2) = share_money2(money, p, M)\n    answer = '{} {}'.format(share1, share2)\n    print(answer)", "billion = pow(10, 9)\n\ndef geometricSum(a, q, n):\n    assert q != 1\n    return a * (1 - pow(q, n)) / (1 - q)\n\ndef bestDivision(t, p):\n    if t == 1 or p == 0:\n        return (billion, 0)\n    if p == 1:\n        if t % 2 != 0:\n            return (billion, 0)\n        else:\n            return (0, billion)\n    chiefMoneyNext = billion * geometricSum(1, -p, t)\n    return (chiefMoneyNext, billion - chiefMoneyNext)\ntc = int(input())\nwhile tc > 0:\n    inputWords = input().split()\n    (t, p) = (int(inputWords[0]), float(inputWords[1]))\n    result = bestDivision(int(t), p)\n    print(result[0], result[1])\n    tc -= 1", "import time\nimport sys\nbillion = pow(10, 9)\nmaxT = pow(10, 5)\nmaxM = pow(10, 9)\n\ndef geometricSum(a, q, n):\n    assert q != 1\n    return a * (1 - pow(q, n)) / (1 - q)\n\ndef bestDivision(t, p):\n    if t == 1 or p == 0:\n        return (billion, 0)\n    if int(p) == 1:\n        if t % 2 != 0:\n            return (billion, 0)\n        else:\n            return (0, billion)\n    chiefMoneyNext = billion * geometricSum(1.0, -p, t)\n    return (chiefMoneyNext, billion - chiefMoneyNext)\ntc = int(input())\nwhile tc > 0:\n    inputWords = input().split()\n    (t, p) = (int(inputWords[0]), float(inputWords[1]))\n    result = bestDivision(int(t), p)\n    print(result[0], result[1])\n    tc -= 1", "tc = int(input())\nwhile tc:\n    (m, p) = input().split(' ')\n    m = int(m)\n    p = float(p)\n    sum = (1 - (-p) ** m) / (1 + p)\n    print(1000000000 * sum, ' ', 1000000000 * (1 - sum))\n    tc -= 1", "a = int(input())\nwhile a > 0:\n    a -= 1\n    b1 = input()\n    (m, p) = [float(n) for n in b1.split()]\n    if m == 1 or p == 0:\n        print('1000000000.0 0.0')\n    elif p == 1 and m % 2 == 1:\n        print('1000000000.0 0.0')\n    elif p == 1 and m % 2 != 1:\n        print('0.0 1000000000.0')\n    elif m == 2 and p == 0.5:\n        print('500000000.0 500000000.0')\n    else:\n        k = 1000000000.0\n        s1 = (-p) ** m\n        a1 = k * ((1.0 - s1) / (1.0 + p))\n        a2 = k - a1\n        print(a1, a2)", "import math\nM = 1000000000\nfor _ in range(0, int(input())):\n    (t, p) = map(float, input().split())\n    t = int(t)\n    if t % 2 == 1:\n        A = M * (p ** t + 1) / (p + 1)\n    else:\n        A = M * (1 - p ** t) / (p + 1)\n    print('%.4f %.4f' % (A, M - A))", "t = int(input())\nM = 1000000000\nwhile t:\n    t -= 1\n    (a, b) = list(map(float, input().split(' ')))\n    y = pow(b, a - 1)\n    if a % 2 == 0:\n        ans = b * M * (1 + y) / (b + 1)\n    else:\n        ans = b * M * (1 - y) / (b + 1)\n    c = M - ans\n    print(c, ans)", "Booty = 1000000000.0\nT = int(input())\nwhile T != 0:\n    inpline = input().split()\n    M = int(inpline[0])\n    p = float(inpline[1])\n    f = 0\n    if p == 0:\n        print(Booty, 0)\n    else:\n        f = (1 + pow(p, M) * pow(-1, M - 1)) / (1 + p)\n        chef = Booty * f\n        coleg = Booty * (1 - f)\n        print(chef, coleg)\n    T -= 1", "cur = pow(10, 9)\nfor _ in range(int(input())):\n    (p, q) = map(float, input().split())\n    x = cur * (1 - pow(-q, p)) / float(1 + q)\n    y = cur - x\n    print(x, y)", "def loot(m, p):\n    value = 1 + pow(-1, m - 1) * pow(p, m)\n    value = value / (1 + p)\n    return 1000000000 * value\nT = int(input())\nfor i in range(0, T):\n    inp = input().split()\n    m = int(inp[0])\n    p = float(inp[1])\n    print(loot(m, p), end=' ')\n    print(1000000000.0 - loot(m, p))", "loot = 1000000000.0\nT = int(input())\nwhile T != 0:\n    inpline = input().split()\n    M = int(inpline[0])\n    p = float(inpline[1])\n    frac = 0\n    if p == 0:\n        print(loot, 0)\n    else:\n        frac = (1 + pow(p, M) * pow(-1, M - 1)) / (1 + p)\n        chef = loot * frac\n        col = loot * (1 - frac)\n        print(chef, col)\n    T -= 1", "t = int(input())\nfor i in range(t):\n    line = input().split()\n    m = int(line[0])\n    p = float(line[1])\n    tmp1 = (1 - (-p) ** m) / (1 + p)\n    tmp2 = 1 - tmp1\n    a = 1000000000 * tmp1\n    b = 1000000000 * tmp2\n    print(str(a) + ' ' + str(b))", "T = int(input())\nfor t in range(T):\n    x = input().split()\n    m = int(x[0])\n    p = float(x[1])\n    y = p ** m\n    if m % 2 == 0:\n        y = -y\n    x = 1000000000 * (1 + y) / (1 + p)\n    print(x, 1000000000 - x)", "T = int(input())\nfor i in range(0, T):\n    inps = input()\n    inps = inps.split()\n    M = int(inps[0])\n    P = float(inps[1])\n    chef = 1000000000.0\n    other = 0\n    if M % 2 == 0:\n        chef = chef * (1 - P ** M) / (P + 1.0)\n        other = 1000000000.0 * (P * (1 + P ** (M - 1))) / (1 + P)\n    else:\n        chef = chef * (1 + P ** M) / (P + 1.0)\n        other = 1000000000.0 * (P * (1 - P ** (M - 1))) / (1 + P)\n    print(str(chef) + ' ' + str(other))", "T = int(input())\nbillion = 1000000000.0\nfor t in range(T):\n    tokens = input().split()\n    M = int(tokens[0])\n    p = float(tokens[1])\n    chef = (1 - pow(-p, M)) / (1 + p) * billion\n    print(chef, billion - chef)", "t9 = 10 ** 9 * 1.0\ntc = int(input(''))\nwhile tc > 0:\n    tc -= 1\n    s = input('').split(' ')\n    M = int(s[0])\n    p = float(s[1])\n    mbc = t9 * ((1 - (-p) ** M) / (1 + p))\n    mbo = t9 - mbc\n    print(mbc, mbo)", "def ans(p, n):\n    x = 1 - pow(-1 * p, n)\n    x = x / (1 + p)\n    return x\ntest = int(input())\nwhile test != 0:\n    test -= 1\n    (n, p) = map(float, input().split())\n    n = int(n)\n    t = pow(10.0, 9)\n    x = t * ans(p, n)\n    y = t - x\n    print(x, y)", "t = int(input())\nB = pow(10, 9)\nfor i in range(1, t + 1):\n    x = input().split()\n    m = int(x[0])\n    p = float(x[1])\n    a = B * (1 - pow(-1, m) * pow(p, m)) / (1 + p)\n    print(a, B - a)", "def divide(m, r):\n    if r == 1:\n        if m % 2 == 0:\n            return 0.0\n        else:\n            return 1000000000.0\n    n1 = int(m / 2) + m % 2\n    n2 = m - n1\n    c_sum = 10 ** 9 * ((r * r) ** n1 - 1) / (r * r - 1)\n    if n2 > 0:\n        o_sum = 10 ** 9 * r * ((r * r) ** n2 - 1) / (r * r - 1)\n    else:\n        o_sum = 0\n    return c_sum - o_sum\nt = int(input().strip())\nwhile t > 0:\n    (m, p) = input().strip().split()\n    m = int(m.strip())\n    p = float(p.strip())\n    chef_share = divide(m, p)\n    print(chef_share, 10 ** 9 - chef_share)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (m, p) = map(float, input().strip().split())\n    a2 = p * (1 - (-p) ** (m - 1)) / (1 + p)\n    a1 = 1 - a2\n    print('%f %f' % (a1 * 10 ** 9, a2 * 10 ** 9))\n    t -= 1", "amt = 1000000000.0\nt = int(input())\nfor _ in range(t):\n    ans = 0.0\n    temp = 1.0\n    (n, p) = map(float, input().split())\n    r = p ** 2\n    n = int(n)\n    if r != 1:\n        if n % 2 == 0:\n            ans += (1 - r ** (n / 2)) / (1 - r)\n            ans -= p * (1 - r ** (n / 2)) / (1 - r)\n        else:\n            power = int(n / 2) + 1\n            ans += (1 - r ** power) / (1 - r)\n            ans -= p * (1 - r ** (power - 1)) / (1 - r)\n        print(amt * ans, amt - amt * ans)\n    elif n % 2 == 0:\n        print(0.0, amt)\n    else:\n        print(amt, 0.0)", "testCases = int(input())\nwhile testCases > 0:\n    numbers = input().split()\n    M = int(numbers[0])\n    p = float(numbers[1])\n    a = 1000000000 * ((1 - (-p) ** M) / (1 + p))\n    b = 1000000000.0 - a\n    print(a, ' ', b)\n    testCases = testCases - 1", "bank = 10 ** 9\nfor t in range(int(input())):\n    line = input().split()\n    (m, p) = (int(line[0]), float(line[1]))\n    if m == 1:\n        print(bank, 0)\n    else:\n        c = bank * (1 - (-1 * p) ** m) / (1 + p)\n        og = bank - c\n        print(c, og)", "t = int(input())\nwhile t > 0:\n    l = input().split()\n    m = int(l[0])\n    p = float(l[1])\n    c = 10 ** 9\n    s = (1 - (-1 * p) ** m) / (1 + p)\n    print('%f %f' % (c * s, c * (1 - s)))\n    t -= 1", "import math\nt = int(input())\nBil = 1000000000\nwhile t:\n    a = [float(x) for x in input().split()]\n    m = int(a[0])\n    p = a[1]\n    temp = math.pow(p, m)\n    if m % 2 is 0:\n        temp = 1 - temp\n    else:\n        temp += 1\n    temp /= 1 + p\n    temp *= Bil\n    print(temp, ' ', Bil - temp)\n    t -= 1", "import math, sys\nt = int(input())\nwhile t > 0:\n    (m, p) = map(float, sys.stdin.readline().split())\n    sum1 = 1000000000 * (1 - pow(-p, m)) / (1 + p)\n    print(str(float(sum1)) + ' ' + str(float(1000000000 - sum1)))\n    t = t - 1", "t = int(input())\nwhile t > 0:\n    (m, p) = [float(x) for x in input().split()]\n    m = int(m)\n    if m % 2 == 0:\n        c = (1 - pow(p, m)) / (1 + p)\n    else:\n        c = (1 + pow(p, m)) / (1 + p)\n    r = c * 10 ** 9\n    print(str(r) + ' ' + str(10 ** 9 - r))\n    t = t - 1", "t = int(input())\nwhile t:\n    t = t - 1\n    (m, p) = input().split()\n    m = int(m)\n    p = float(p)\n    x = 1000000000.0 * (1 - (-p) ** m) / (1 + p)\n    print(x, end=' ')\n    print(1000000000.0 - x)", "import math\nfrom decimal import Decimal\n\ndef upp(x, n):\n    if n == 1:\n        return x\n    if n == 0:\n        return float(1.0)\n    x2 = x\n    t = 1\n    while 2.0 * t < n:\n        t *= 2.0\n        x2 *= x2\n        if x2 == 0:\n            break\n    if x2 == 0:\n        return 0\n    return x2 * upp(x, n - t)\n\ndef mult(s):\n    l = len(s)\n    ans = ''\n    for i in range(2, 11):\n        if i >= l:\n            ans += '0'\n        else:\n            ans += s[i]\n    ans2 = ''\n    fail = 0\n    for i in range(0, 9):\n        if fail == 1:\n            ans2 += ans[i]\n        if ans[i] != '0' and fail == 0:\n            ans2 += ans[i]\n            fail = 1\n    if len(ans2) == 0:\n        ans2 += '0'\n    ans2 += '.'\n    i == 8\n    while i < l:\n        ans2 += s[i]\n        i += 1\n    ans2 += '0'\n    return ans2\nT = int(input())\nfor i in range(0, T):\n    inp = input().split()\n    m = int(inp[0])\n    p = float(inp[1])\n    B = float(1000000000)\n    svar = (1.0 - upp(-p, m)) / (p + 1)\n    svar2 = 1 - svar\n    r = B * svar\n    l = B * svar2\n    print(str(r) + ' ' + str(l))", "t = int(input())\nb = 1000000000.0\nfor i in range(t):\n    s = input().split()\n    m = int(s[0])\n    p = float(s[1])\n    y = b * p\n    x = b - y\n    if m == 1:\n        print('%.3f %.3f' % (b, 0.0))\n    else:\n        if m % 2 == 0:\n            x = b * (1 - p ** m) / (1 + p)\n            y = b - x\n        else:\n            x = b * (1 + p ** m) / (1 + p)\n            y = b - x\n        print('%.3f %.3f' % (x, y))"]