["import sys\nimport math\nimport copy\n\ndef getInput(num):\n    if num:\n        inputArr = input().split()\n        if len(inputArr) != num:\n            print(f'The length is {len(inputArr)} not same as asked for {num}')\n            sys.exit(0)\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\n    elif num == 0:\n        return int(input())\n    elif num == None:\n        inputArr = input().split()\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\nremArr = [3, 8, 15, 24, 35, 48, 63, 80]\nremDict = {}\n\ndef isLess(arr0, arr1):\n    sum = 0\n    tempArr = []\n    for i in range(0, 8):\n        myVal0 = arr1[i] - arr0[i]\n        sum += myVal0\n        tempArr.append(myVal0)\n    if sum > 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        for i in range(0, 8):\n            if tempArr[i] < 0:\n                return True\n            elif tempArr[i] > 0:\n                return False\n        else:\n            return False\n\ndef getRemIndices(tRem):\n    if tRem in remDict:\n        return copy.deepcopy(remDict[tRem])\n    if tRem < 3:\n        remDict[tRem] = []\n        return []\n    indArr = []\n    myTempArr = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, 8):\n        if remArr[i] == tRem:\n            myTempArr[i] += 1\n            return myTempArr\n        elif remArr[i] < tRem:\n            retArr = getRemIndices(tRem - remArr[i])\n            if retArr:\n                retArr[i] += 1\n            if indArr and retArr:\n                if isLess(retArr, indArr):\n                    indArr = copy.deepcopy(retArr)\n            elif retArr:\n                indArr = retArr\n    remDict[tRem] = copy.deepcopy(indArr)\n    return indArr\nchrArr = ['2', '3', '4', '5', '6', '7', '8', '9']\nfor test in range(0, getInput(0)):\n    N = getInput(0)\n    result = '-1'\n    myVal0 = int(math.sqrt(N))\n    mySq = myVal0 * myVal0\n    if mySq == N:\n        result = '1' * N\n    else:\n        myVal0 += 1\n        mySq = myVal0 * myVal0\n        myLimit = 80 * N\n        myDigitLimit = N\n        myResultList = []\n        while mySq <= myLimit:\n            myRetArr = getRemIndices(mySq - N)\n            if myRetArr:\n                mySum = 0\n                tempResult = ''\n                for i in range(0, 8):\n                    if myRetArr[i]:\n                        tempResult += chrArr[i] * myRetArr[i]\n                    mySum += myRetArr[i]\n                if myDigitLimit - mySum >= 0:\n                    myResultList.append(tempResult)\n                    myLimit = N + 80 * mySum\n                    myDigitLimit = mySum\n            myVal0 += 1\n            mySq = myVal0 * myVal0\n        resultList = []\n        for i in myResultList:\n            if len(i) == myDigitLimit:\n                resultList.append(i)\n        resultList.sort()\n        result = resultList[0]\n    print('1' * (N - len(result)) + result)", "import sys\nimport math\nimport copy\n\ndef getInput(num):\n    if num:\n        inputArr = input().split()\n        if len(inputArr) != num:\n            print(f'The length is {len(inputArr)} not same as asked for {num}')\n            sys.exit(0)\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\n    elif num == 0:\n        return int(input())\n    elif num == None:\n        inputArr = input().split()\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\nremArr = [3, 8, 15, 24, 35, 48, 63, 80]\nremDict = {}\n\ndef isLess(arr0, arr1):\n    sum = 0\n    tempArr = []\n    for i in range(0, 8):\n        myVal0 = arr1[i] - arr0[i]\n        sum += myVal0\n        tempArr.append(myVal0)\n    if sum > 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        for i in range(0, 8):\n            if tempArr[i] < 0:\n                return True\n            elif tempArr[i] > 0:\n                return False\n        else:\n            return False\n\ndef getRemIndices(tRem):\n    if tRem in remDict:\n        return copy.deepcopy(remDict[tRem])\n    if tRem < 3:\n        remDict[tRem] = []\n        return []\n    indArr = []\n    myTempArr = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, 8):\n        if remArr[i] == tRem:\n            myTempArr[i] += 1\n            return myTempArr\n        elif remArr[i] < tRem:\n            retArr = getRemIndices(tRem - remArr[i])\n            if retArr:\n                retArr[i] += 1\n            if indArr and retArr:\n                if isLess(retArr, indArr):\n                    indArr = copy.deepcopy(retArr)\n            elif retArr:\n                indArr = retArr\n    remDict[tRem] = copy.deepcopy(indArr)\n    return indArr\nchrArr = ['2', '3', '4', '5', '6', '7', '8', '9']\nfor test in range(0, getInput(0)):\n    N = getInput(0)\n    result = '-1'\n    myVal0 = int(math.sqrt(N))\n    mySq = myVal0 * myVal0\n    if mySq == N:\n        result = '1' * N\n    else:\n        myVal0 += 1\n        mySq = myVal0 * myVal0\n        myLimit = 80 * N\n        myDigitLimit = N\n        myResultList = []\n        while mySq <= myLimit:\n            myRetArr = getRemIndices(mySq - N)\n            if myRetArr:\n                mySum = 0\n                tempResult = ''\n                for i in range(0, 8):\n                    if myRetArr[i]:\n                        tempResult += chrArr[i] * myRetArr[i]\n                    mySum += myRetArr[i]\n                if myDigitLimit - mySum >= 0:\n                    myResultList.append(tempResult)\n                    myLimit = N + 80 * mySum\n                    myDigitLimit = mySum\n            myVal0 += 1\n            mySq = myVal0 * myVal0\n        resultList = []\n        for i in myResultList:\n            if len(i) == myDigitLimit:\n                resultList.append(i)\n        resultList.sort()\n        result = resultList[0]\n    print('1' * (N - len(result)) + result)", "import sys\nimport math\nimport copy\n\ndef getInput(num):\n    if num:\n        inputArr = input().split()\n        if len(inputArr) != num:\n            print(f'The length is {len(inputArr)} not same as asked for {num}')\n            sys.exit(0)\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\n    elif num == 0:\n        return int(input())\n    elif num == None:\n        inputArr = input().split()\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\nremArr = [3, 8, 15, 24, 35, 48, 63, 80]\nremDict = {}\n\ndef isLess(arr0, arr1):\n    sum = 0\n    tempArr = []\n    for i in range(0, 8):\n        myVal0 = arr1[i] - arr0[i]\n        sum += myVal0\n        tempArr.append(myVal0)\n    if sum > 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        for i in range(0, 8):\n            if tempArr[i] < 0:\n                return True\n            elif tempArr[i] > 0:\n                return False\n        else:\n            return False\n\ndef getRemIndices(tRem):\n    if tRem in remDict:\n        return copy.deepcopy(remDict[tRem])\n    if tRem < 3:\n        remDict[tRem] = []\n        return []\n    indArr = []\n    myTempArr = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, 8):\n        if remArr[i] == tRem:\n            myTempArr[i] += 1\n            return myTempArr\n        elif remArr[i] < tRem:\n            retArr = getRemIndices(tRem - remArr[i])\n            if retArr:\n                retArr[i] += 1\n            if indArr and retArr:\n                if isLess(retArr, indArr):\n                    indArr = copy.deepcopy(retArr)\n            elif retArr:\n                indArr = retArr\n    remDict[tRem] = copy.deepcopy(indArr)\n    return indArr\nchrArr = ['2', '3', '4', '5', '6', '7', '8', '9']\nfor test in range(0, getInput(0)):\n    N = getInput(0)\n    result = '-1'\n    myVal0 = int(math.sqrt(N))\n    mySq = myVal0 * myVal0\n    if mySq == N:\n        result = '1' * N\n    else:\n        myVal0 += 1\n        mySq = myVal0 * myVal0\n        myLimit = 80 * N\n        myDigitLimit = N\n        myResultList = []\n        while mySq <= myLimit:\n            myRetArr = getRemIndices(mySq - N)\n            if myRetArr:\n                mySum = 0\n                tempResult = ''\n                for i in range(0, 8):\n                    if myRetArr[i]:\n                        tempResult += chrArr[i] * myRetArr[i]\n                    mySum += myRetArr[i]\n                if myDigitLimit - mySum >= 0:\n                    myResultList.append(tempResult)\n                    myLimit = N + 80 * mySum\n                    myDigitLimit = mySum\n            myVal0 += 1\n            mySq = myVal0 * myVal0\n        resultList = []\n        for i in myResultList:\n            if len(i) == myDigitLimit:\n                resultList.append(i)\n        resultList.sort()\n        result = resultList[0]\n    print('1' * (N - len(result)) + result)", "import sys\nimport math\nimport copy\n\ndef getInput(num):\n    if num:\n        inputArr = input().split()\n        if len(inputArr) != num:\n            print(f'The length is {len(inputArr)} not same as asked for {num}')\n            sys.exit(0)\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\n    elif num == 0:\n        return int(input())\n    elif num == None:\n        inputArr = input().split()\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\nremArr = [3, 8, 15, 24, 35, 48, 63, 80]\nremDict = {}\n\ndef isLess(arr0, arr1):\n    sum = 0\n    tempArr = []\n    for i in range(0, 8):\n        myVal0 = arr1[i] - arr0[i]\n        sum += myVal0\n        tempArr.append(myVal0)\n    if sum > 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        for i in range(0, 8):\n            if tempArr[i] < 0:\n                return True\n            elif tempArr[i] > 0:\n                return False\n        else:\n            return False\n\ndef getRemIndices(tRem):\n    if tRem in remDict:\n        return copy.deepcopy(remDict[tRem])\n    if tRem < 3:\n        remDict[tRem] = []\n        return []\n    indArr = []\n    myTempArr = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, 8):\n        if remArr[i] == tRem:\n            myTempArr[i] += 1\n            return myTempArr\n        elif remArr[i] < tRem:\n            retArr = getRemIndices(tRem - remArr[i])\n            if retArr:\n                retArr[i] += 1\n            if indArr and retArr:\n                if isLess(retArr, indArr):\n                    indArr = copy.deepcopy(retArr)\n            elif retArr:\n                indArr = retArr\n    remDict[tRem] = copy.deepcopy(indArr)\n    return indArr\nchrArr = ['2', '3', '4', '5', '6', '7', '8', '9']\nfor test in range(0, getInput(0)):\n    N = getInput(0)\n    result = '-1'\n    myVal0 = int(math.sqrt(N))\n    mySq = myVal0 * myVal0\n    if mySq == N:\n        result = '1' * N\n    else:\n        myVal0 += 1\n        mySq = myVal0 * myVal0\n        myLimit = 80 * N\n        myDigitLimit = N\n        myResultList = []\n        while mySq <= myLimit:\n            myRetArr = getRemIndices(mySq - N)\n            if myRetArr:\n                mySum = 0\n                tempResult = ''\n                for i in range(0, 8):\n                    if myRetArr[i]:\n                        tempResult += chrArr[i] * myRetArr[i]\n                    mySum += myRetArr[i]\n                if myDigitLimit - mySum >= 0:\n                    myResultList.append(tempResult)\n                    myLimit = N + 80 * mySum\n                    myDigitLimit = mySum\n            myVal0 += 1\n            mySq = myVal0 * myVal0\n        resultList = []\n        for i in myResultList:\n            if len(i) == myDigitLimit:\n                resultList.append(i)\n        resultList.sort()\n        result = resultList[0]\n    print('1' * (N - len(result)) + result)", "import sys\nimport math\nimport copy\n\ndef getInput(num):\n    if num:\n        inputArr = input().split()\n        if len(inputArr) != num:\n            print(f'The length is {len(inputArr)} not same as asked for {num}')\n            sys.exit(0)\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\n    elif num == 0:\n        return int(input())\n    elif num == None:\n        inputArr = input().split()\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\nremArr = [3, 8, 15, 24, 35, 48, 63, 80]\nremDict = {}\n\ndef isLess(arr0, arr1):\n    sum = 0\n    tempArr = []\n    for i in range(0, 8):\n        myVal0 = arr1[i] - arr0[i]\n        sum += myVal0\n        tempArr.append(myVal0)\n    if sum > 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        for i in range(0, 8):\n            if tempArr[i] < 0:\n                return True\n            elif tempArr[i] > 0:\n                return False\n        else:\n            return False\n\ndef getRemIndices(tRem):\n    if tRem in remDict:\n        return copy.deepcopy(remDict[tRem])\n    if tRem < 3:\n        remDict[tRem] = []\n        return []\n    indArr = []\n    myTempArr = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, 8):\n        if remArr[i] == tRem:\n            myTempArr[i] += 1\n            return myTempArr\n        elif remArr[i] < tRem:\n            retArr = getRemIndices(tRem - remArr[i])\n            if retArr:\n                retArr[i] += 1\n            if indArr and retArr:\n                if isLess(retArr, indArr):\n                    indArr = copy.deepcopy(retArr)\n            elif retArr:\n                indArr = retArr\n    remDict[tRem] = copy.deepcopy(indArr)\n    return indArr\nchrArr = ['2', '3', '4', '5', '6', '7', '8', '9']\nfor test in range(0, getInput(0)):\n    N = getInput(0)\n    result = '-1'\n    myVal0 = int(math.sqrt(N))\n    mySq = myVal0 * myVal0\n    if mySq == N:\n        result = '1' * N\n    else:\n        myVal0 += 1\n        mySq = myVal0 * myVal0\n        myLimit = 80 * N\n        myDigitLimit = N\n        myResultList = []\n        while mySq <= myLimit:\n            myRetArr = getRemIndices(mySq - N)\n            if myRetArr:\n                mySum = 0\n                tempResult = ''\n                for i in range(0, 8):\n                    if myRetArr[i]:\n                        tempResult += chrArr[i] * myRetArr[i]\n                    mySum += myRetArr[i]\n                if myDigitLimit - mySum >= 0:\n                    myResultList.append(tempResult)\n                    myLimit = N + 80 * mySum\n                    myDigitLimit = mySum\n            myVal0 += 1\n            mySq = myVal0 * myVal0\n        resultList = []\n        for i in myResultList:\n            if len(i) == myDigitLimit:\n                resultList.append(i)\n        resultList.sort()\n        result = resultList[0]\n    print('1' * (N - len(result)) + result)", "XX = 29\ncan = [[[False for i in range(XX * 81 + 1)] for j in range(XX)] for k in range(11)]\ncan[10][0][0] = True\nsquares = []\ni = 1\nwhile i * i <= 10 ** 8:\n    squares.append(i * i)\n    i += 1\nfor sm in range(0, XX * 81 + 1):\n    for first in range(9, 0, -1):\n        for cnt in range(0, XX):\n            if cnt == 0:\n                can[first][cnt][sm] = sm == 0\n            else:\n                can[first][cnt][sm] = can[first][cnt][sm] or can[first + 1][cnt][sm]\n                t = 0\n                while t <= cnt and t * (first * first) <= sm:\n                    can[first][cnt][sm] = can[first][cnt][sm] or can[first + 1][cnt - t][sm - t * (first * first)]\n                    t += 1\nfor _ in range(int(input())):\n    n = int(input())\n    ans = []\n    (cnt, rem, curSum) = (0, n, 0)\n    for i in range(1, 10):\n        cnt = rem\n        while True:\n            succ = False\n            for x in squares:\n                tempSum = curSum + cnt * i * i\n                succ = succ or (tempSum <= x and x - tempSum < XX * 81 and can[i + 1][rem - cnt][x - tempSum])\n            if succ:\n                break\n            cnt -= 1\n        rem -= cnt\n        curSum += cnt * i * i\n        while cnt:\n            ans.append(i)\n            cnt -= 1\n    print(*ans, sep='')", "(lookup, pre) = ([''] * 2004, ['0', '0'] + [str(i ** 2 - 1) for i in range(2, 10)])\nfor i in range(2, 10):\n    lookup[int(pre[i])] = str(i)\nfor i in range(3, 2004):\n    if lookup[i] != '':\n        for j in range(2, 10):\n            index = i + int(pre[j])\n            if index <= 2003:\n                val = ''.join(sorted(lookup[i] + str(j)))\n                if lookup[index] == '':\n                    lookup[index] = val\n                else:\n                    exists = lookup[index]\n                    if len(val) < len(exists):\n                        lookup[index] = val\n                    elif len(val) == len(exists) and val < exists:\n                        lookup[index] = val\n\ndef perfectSquare(num):\n    if int(num ** 0.5) ** 2 == num:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    (n, ans) = (int(input()), '')\n    if perfectSquare(n):\n        print(''.join(['1'] * n))\n    else:\n        for i in range(1, 2003):\n            if perfectSquare(n + i):\n                if ans == '':\n                    ans = lookup[i]\n                elif lookup[i] != '':\n                    if len(lookup[i]) < len(ans):\n                        ans = lookup[i]\n                    elif len(lookup[i]) == len(ans):\n                        if lookup[i] < ans:\n                            ans = lookup[i]\n        if ans == '':\n            print(-1)\n        else:\n            for _ in range(1, n + 1 - len(ans)):\n                print(1, end='')\n            print(ans)", "(lookup, pre) = ([''] * 2004, ['0', '0'] + [str(i ** 2 - 1) for i in range(2, 10)])\nfor i in range(2, 10):\n    lookup[int(pre[i])] = str(i)\nfor i in range(3, 2004):\n    if lookup[i] != '':\n        for j in range(2, 10):\n            index = i + int(pre[j])\n            if index <= 2003:\n                val = ''.join(sorted(lookup[i] + str(j)))\n                if lookup[index] == '':\n                    lookup[index] = val\n                else:\n                    exists = lookup[index]\n                    if len(val) < len(exists):\n                        lookup[index] = val\n                    elif len(val) == len(exists) and val < exists:\n                        lookup[index] = val\n\ndef perfectSquare(num):\n    if int(num ** 0.5) ** 2 == num:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    (n, ans) = (int(input()), '')\n    if perfectSquare(n):\n        print(''.join(['1'] * n))\n    else:\n        for i in range(1, 2003):\n            if perfectSquare(n + i):\n                if ans == '':\n                    ans = lookup[i]\n                elif lookup[i] != '':\n                    if len(lookup[i]) < len(ans):\n                        ans = lookup[i]\n                    elif len(lookup[i]) == len(ans):\n                        if lookup[i] < ans:\n                            ans = lookup[i]\n        if ans == '':\n            print(-1)\n        else:\n            for _ in range(1, n + 1 - len(ans)):\n                print(1, end='')\n            print(ans)", "(vals, temp) = ([], [0] * 8)\nfor i in range(8):\n    temp[i] += 1\n    vals.append(tuple(temp))\n    temp[i] -= 1\ndiffs = dict(zip([(i + 2) ** 2 - 1 for i in range(8)], [tuple(val) for val in vals]))\nremains = [(i + 2) ** 2 - 1 for i in range(8)]\n\ndef gen_smallest_beautiful_num(n):\n    if n <= 0:\n        return -1\n    target = round(n ** 0.5)\n    if target ** 2 == n:\n        return '1' * n\n    max_num = 81 * n\n    max_len = n\n    tail = None\n    while target ** 2 <= max_num:\n        cur_tail = compensate(target ** 2 - n, diffs)\n        if cur_tail:\n            tail = cur_tail if not tail else min(tail, cur_tail, key=int)\n            max_len = len(tail)\n            max_num = n + 80 * max_len\n        target += 1\n    return '1' * (n - len(tail)) + tail if tail else '-1'\n\ndef less(this: list, that: list):\n    if not this:\n        return False\n    (sum_this, sum_that) = (sum(this), sum(that))\n    if sum_this == sum_that:\n        return this > that\n    elif sum_this < sum_that:\n        return True\n    else:\n        return False\n\ndef compensate(diff, diffs):\n    r = remains\n\n    def dfs(d):\n        if d < 3:\n            return\n        if d in diffs:\n            return list(diffs[d])\n        ans = []\n        for i in range(8):\n            if r[i] > d:\n                break\n            cur_ans = dfs(d - r[i])\n            if cur_ans:\n                cur_ans[i] += 1\n                if not less(ans, cur_ans):\n                    ans = cur_ans\n        diffs[d] = tuple(ans)\n        return ans\n    ans = dfs(diff)\n    if ans:\n        return ''.join((str(i + 2) * d for (i, d) in enumerate(ans)))\ntry:\n    test_num = int(input())\n    for _ in range(test_num):\n        print(gen_smallest_beautiful_num(int(input())))\nexcept EOFError:\n    pass", "(vals, temp) = ([], [0] * 8)\nfor i in range(8):\n    temp[i] += 1\n    vals.append(tuple(temp))\n    temp[i] -= 1\ndiffs = dict(zip([(i + 2) ** 2 - 1 for i in range(8)], [tuple(val) for val in vals]))\nremains = [(i + 2) ** 2 - 1 for i in range(8)]\n\ndef gen_smallest_beautiful_num(n):\n    if n <= 0:\n        return -1\n    target = round(n ** 0.5)\n    if target ** 2 == n:\n        return '1' * n\n    max_num = 81 * n\n    max_len = n\n    tail = None\n    while target ** 2 <= max_num:\n        cur_tail = compensate(target ** 2 - n, diffs)\n        if cur_tail:\n            tail = cur_tail if not tail else min(tail, cur_tail, key=int)\n            max_len = len(tail)\n            max_num = n + 80 * max_len\n        target += 1\n    return '1' * (n - len(tail)) + tail if tail else '-1'\n\ndef less(this: list, that: list):\n    if not this:\n        return False\n    (sum_this, sum_that) = (sum(this), sum(that))\n    if sum_this == sum_that:\n        return this > that\n    elif sum_this < sum_that:\n        return True\n    else:\n        return False\n\ndef compensate(diff, diffs):\n\n    def dfs(d):\n        if d < 3:\n            return\n        if d in diffs:\n            return list(diffs[d])\n        ans = []\n        for i in range(8):\n            if remains[i] > d:\n                break\n            cur_ans = dfs(d - remains[i])\n            if cur_ans:\n                cur_ans[i] += 1\n                if not less(ans, cur_ans):\n                    ans = cur_ans\n        diffs[d] = tuple(ans)\n        return ans\n    ans = dfs(diff)\n    if ans:\n        return ''.join((str(i + 2) * d for (i, d) in enumerate(ans)))\ntry:\n    test_num = int(input())\n    for _ in range(test_num):\n        print(gen_smallest_beautiful_num(int(input())))\nexcept EOFError:\n    pass", "import math\n\ndef main():\n\n    def get_digits(n, k, p, B):\n        if n < k * p * p or n > k * 9 * 9:\n            return False\n        if k == 0:\n            return (0,) * (10 - p) if n == 0 else False\n        if p == 9:\n            return (k,) if n == k * 81 else False\n        for K in range(k, B[0] - 1, -1):\n            b2 = B[1:] if K == B[0] else (0,) * (9 - p)\n            res = get_digits(n - K * p * p, k - K, p + 1, b2)\n            if res != False:\n                return (K,) + res\n        return False\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        M = math.floor(math.sqrt(N))\n        while M * M < N:\n            M += 1\n        best = (0,) * 9\n        while M * M <= 81 * N:\n            F = get_digits(M * M, N, 1, best)\n            if F:\n                best = max(best, F)\n            M += 1\n        if sum(best) > 0:\n            s = ''.join((str(i + 1) * best[i] for i in range(len(best))))\n            print(s)\n        else:\n            print(-1)\nmain()", "import math\n\ndef main():\n\n    def get_digits(n, k, p, B):\n        if n < k * p * p or n > k * 9 * 9:\n            return False\n        if k == 0:\n            return (0,) * (10 - p) if n == 0 else False\n        if p == 9:\n            return (k,) if n == k * 81 else False\n        for K in range(k, B[0] - 1, -1):\n            b2 = B[1:] if K == B[0] else (0,) * (9 - p)\n            res = get_digits(n - K * p * p, k - K, p + 1, b2)\n            if res != False:\n                return (K,) + res\n        return False\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        M = math.floor(math.sqrt(N))\n        while M * M < N:\n            M += 1\n        best = (0,) * 9\n        while M * M <= 81 * N:\n            F = get_digits(M * M, N, 1, best)\n            if F:\n                best = max(best, F)\n            M += 1\n        if sum(best) > 0:\n            s = ''.join((str(i + 1) * best[i] for i in range(len(best))))\n            print(s)\n        else:\n            print(-1)\nmain()", "import math\n\ndef main():\n\n    def get_digits(n, k, p, B):\n        if n < k * p * p or n > k * 9 * 9:\n            return False\n        if k == 0:\n            return (0,) * (10 - p) if n == 0 else False\n        if p == 9:\n            return (k,) if n == k * 81 else False\n        for K in range(k, B[0] - 1, -1):\n            b2 = B[1:] if K == B[0] else (0,) * (9 - p)\n            res = get_digits(n - K * p * p, k - K, p + 1, b2)\n            if res != False:\n                return (K,) + res\n        return False\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        M = math.floor(math.sqrt(N))\n        while M * M < N:\n            M += 1\n        best = (0,) * 9\n        while M * M <= 81 * N:\n            F = get_digits(M * M, N, 1, best)\n            if F:\n                best = max(best, F)\n            M += 1\n        if sum(best) > 0:\n            s = ''.join((str(i + 1) * best[i] for i in range(len(best))))\n            print(s)\n        else:\n            print(-1)\nmain()", "import sys\nimport math\nimport copy\n\ndef getInput(num):\n    if num:\n        inputArr = input().split()\n        if len(inputArr) != num:\n            print(f'The length is {len(inputArr)} not same as asked for {num}')\n            sys.exit(0)\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\n    elif num == 0:\n        return int(input())\n    elif num == None:\n        inputArr = input().split()\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\nremArr = [3, 8, 15, 24, 35, 48, 63, 80]\nremDict = {}\n\ndef isLess(arr0, arr1):\n    sum = 0\n    tempArr = []\n    for i in range(0, 8):\n        myVal0 = arr1[i] - arr0[i]\n        sum += myVal0\n        tempArr.append(myVal0)\n    if sum > 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        for i in range(0, 8):\n            if tempArr[i] < 0:\n                return True\n            elif tempArr[i] > 0:\n                return False\n        else:\n            return False\n\ndef getRemIndices(tRem):\n    if tRem in remDict:\n        return copy.deepcopy(remDict[tRem])\n    if tRem < 3:\n        remDict[tRem] = []\n        return []\n    indArr = []\n    myTempArr = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, 8):\n        if remArr[i] == tRem:\n            myTempArr[i] += 1\n            return myTempArr\n        elif remArr[i] < tRem:\n            retArr = getRemIndices(tRem - remArr[i])\n            if retArr:\n                retArr[i] += 1\n            if indArr and retArr:\n                if isLess(retArr, indArr):\n                    indArr = copy.deepcopy(retArr)\n            elif retArr:\n                indArr = retArr\n    remDict[tRem] = copy.deepcopy(indArr)\n    return indArr\nchrArr = ['2', '3', '4', '5', '6', '7', '8', '9']\nfor test in range(0, getInput(0)):\n    N = getInput(0)\n    result = '-1'\n    myVal0 = int(math.sqrt(N))\n    mySq = myVal0 * myVal0\n    if mySq == N:\n        result = '1' * N\n    else:\n        myVal0 += 1\n        mySq = myVal0 * myVal0\n        myLimit = 80 * N\n        myDigitLimit = N\n        myResultList = []\n        while mySq <= myLimit:\n            myRetArr = getRemIndices(mySq - N)\n            if myRetArr:\n                mySum = 0\n                tempResult = ''\n                for i in range(0, 8):\n                    if myRetArr[i]:\n                        tempResult += chrArr[i] * myRetArr[i]\n                    mySum += myRetArr[i]\n                if myDigitLimit - mySum >= 0:\n                    myResultList.append(tempResult)\n                    myLimit = N + 80 * mySum\n                    myDigitLimit = mySum\n            myVal0 += 1\n            mySq = myVal0 * myVal0\n        resultList = []\n        for i in myResultList:\n            if len(i) == myDigitLimit:\n                resultList.append(i)\n        resultList.sort()\n        result = resultList[0]\n    print('1' * (N - len(result)) + result)", "(vals, temp) = ([], [0] * 8)\nfor i in range(8):\n    temp[i] += 1\n    vals.append(tuple(temp))\n    temp[i] -= 1\ndiffs = dict(zip([(i + 2) ** 2 - 1 for i in range(8)], [tuple(val) for val in vals]))\nremains = [(i + 2) ** 2 - 1 for i in range(8)]\n\ndef gen_smallest_beautiful_num(n):\n    if n <= 0:\n        return -1\n    target = round(n ** 0.5)\n    if target ** 2 == n:\n        return '1' * n\n    max_num = 81 * n\n    max_len = n\n    tail = None\n    while target ** 2 <= max_num:\n        cur_tail = compensate(target ** 2 - n, diffs)\n        if cur_tail:\n            tail = cur_tail if not tail else min(tail, cur_tail, key=int)\n            max_len = len(tail)\n            max_num = n + 80 * max_len\n        target += 1\n    return '1' * (n - len(tail)) + tail if tail else '-1'\n\ndef less(this: list, that: list):\n    if not this:\n        return False\n    (sum_this, sum_that) = (sum(this), sum(that))\n    if sum_this == sum_that:\n        return this > that\n    elif sum_this < sum_that:\n        return True\n    else:\n        return False\n\ndef compensate(diff, diffs):\n\n    def dfs(d):\n        if d < 3:\n            return\n        if d in diffs:\n            return list(diffs[d])\n        ans = []\n        for i in range(8):\n            if remains[i] > d:\n                break\n            cur_ans = dfs(d - remains[i])\n            if cur_ans:\n                cur_ans[i] += 1\n                if not less(ans, cur_ans):\n                    ans = cur_ans\n        diffs[d] = tuple(ans)\n        return ans\n    ans = dfs(diff)\n    if ans:\n        return ''.join((str(i + 2) * d for (i, d) in enumerate(ans)))\ntry:\n    test_num = int(input())\n    for _ in range(test_num):\n        print(gen_smallest_beautiful_num(int(input())))\nexcept EOFError:\n    pass", "import copy\nvals = [[0] * 8 for i in range(8)]\nfor i in range(8):\n    vals[i][i] = 1\ndiffs = dict(zip([(i + 2) ** 2 - 1 for i in range(8)], vals))\nremains = [(i + 2) ** 2 - 1 for i in range(8)]\n\ndef gen_smallest_beautiful_num(n):\n    if n <= 0:\n        return -1\n    target = int(n ** 0.5)\n    if target ** 2 == n:\n        return '1' * n\n    max_num = 81 * n\n    max_len = n\n    tail = ''\n    while (target + 1) ** 2 <= max_num:\n        target += 1\n        cur_tail = compensate(target ** 2 - n, diffs)\n        if cur_tail:\n            tail = cur_tail if not tail else min(tail, cur_tail, key=int)\n            max_len = len(tail)\n            max_num = n + 80 * max_len\n    return '1' * (n - len(tail)) + tail if tail else -1\n\ndef less(this: list, that: list):\n    if this is None:\n        return False\n    (sum_this, sum_that) = (sum(this), sum(that))\n    if sum_this == sum_that:\n        return this > that\n    elif sum_this < sum_that:\n        return True\n    else:\n        return False\n\ndef compensate(diff, diffs):\n\n    def dfs(d):\n        if d < 3:\n            return\n        if d in diffs:\n            return copy.copy(diffs[d])\n        ans = None\n        for i in range(8):\n            if remains[i] > d:\n                break\n            cur_ans = dfs(d - remains[i])\n            if cur_ans:\n                cur_ans[i] += 1\n                if not less(ans, cur_ans):\n                    ans = cur_ans\n        diffs[d] = copy.copy(ans)\n        return ans\n    ans = dfs(diff)\n    if ans:\n        return ''.join((str(i + 2) * num for (i, num) in enumerate(ans)))\ntry:\n\n    def get_input():\n        return int(input())\n    test_num = get_input()\n    for _ in range(test_num):\n        print(gen_smallest_beautiful_num(get_input()))\nexcept EOFError:\n    pass", "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 6)\nhashmap = defaultdict(int)\nfor i in range(1, 9001):\n    hashmap[i * i] = 1\nmemo = defaultdict(lambda : -1)\n\ndef recursive(idx, LastDigit, N, List, curSum):\n    if memo[curSum, LastDigit, N - idx] == 2:\n        return False\n    if N == idx:\n        if hashmap[curSum] == 1:\n            return True\n        return False\n    for i in range(LastDigit, 10):\n        List[idx] = i\n        if recursive(idx + 1, i, N, List, curSum + i * i):\n            return True\n    memo[curSum, LastDigit, N - idx] = 2\n    return False\nT = int(input().rstrip())\nfor _ in range(T):\n    N = int(input().rstrip())\n    List = [0] * N\n    if recursive(0, 1, N, List, 0):\n        out = ''.join(map(str, List))\n        print(out)\n    else:\n        print(-1)", "from collections import defaultdict\nimport sys\nsys.setrecursionlimit(10 ** 6)\nhashmap = defaultdict(int)\nfor i in range(1, 9001):\n    hashmap[i * i] = 1\nmemo = defaultdict(lambda : -1)\n\ndef recursive(idx, LastDigit, N, List, curSum):\n    if memo[curSum, LastDigit, N - idx] == 2:\n        return False\n    if N == idx:\n        if hashmap[curSum] == 1:\n            return True\n        return False\n    for i in range(LastDigit, 10):\n        List[idx] = i\n        if recursive(idx + 1, i, N, List, curSum + i * i):\n            return True\n    memo[curSum, LastDigit, N - idx] = 2\n    return False\nT = int(input().rstrip())\nfor _ in range(T):\n    N = int(input().rstrip())\n    List = [0] * N\n    if hashmap[N] == 1:\n        for i in range(N):\n            print(1, end='')\n        print()\n    elif recursive(0, 1, N, List, 0):\n        for i in List:\n            print(i, end='')\n        print()\n    else:\n        print(-1)", "lookup = [''] * 2004\npre = [str(i ** 2 - 1) for i in range(2, 10)]\npre = ['0', '0'] + pre\nfor i in range(2, 10):\n    lookup[int(pre[i])] = str(i)\nfor i in range(3, 2004):\n    if lookup[i] != '':\n        for j in range(2, 10):\n            index = i + int(pre[j])\n            if index <= 2003:\n                val = lookup[i] + str(j)\n                val = ''.join(sorted(val))\n                if lookup[index] == '':\n                    lookup[index] = val\n                else:\n                    exists = lookup[index]\n                    if len(val) < len(exists):\n                        lookup[index] = val\n                    elif len(val) == len(exists) and val < exists:\n                        lookup[index] = val\n\ndef perfectSquare(num):\n    if int(num ** 0.5) ** 2 == num:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    summ = n\n    ans = ''\n    if perfectSquare(n):\n        ans = ['1'] * n\n        ans = ''.join(ans)\n        print(ans)\n    else:\n        for i in range(1, 2003):\n            if perfectSquare(summ + i):\n                if ans == '':\n                    ans = lookup[i]\n                else:\n                    temp = lookup[i]\n                    if temp != '':\n                        if len(temp) < len(ans):\n                            ans = temp\n                        elif len(temp) == len(ans):\n                            if temp < ans:\n                                ans = temp\n        if ans == '':\n            print(-1)\n        else:\n            for _ in range(1, n + 1 - len(ans)):\n                print(1, end='')\n            print(ans)", "import sys\nimport math\nimport copy\n\ndef getInput(num):\n    if num:\n        inputArr = input().split()\n        if len(inputArr) != num:\n            print(f'The length is {len(inputArr)} not same as asked for {num}')\n            sys.exit(0)\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\n    elif num == 0:\n        return int(input())\n    elif num == None:\n        inputArr = input().split()\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\nremArr = [3, 8, 15, 24, 35, 48, 63, 80]\nremDict = {}\n\ndef isLess(arr0, arr1):\n    sum = 0\n    tempArr = []\n    for i in range(0, 8):\n        myVal0 = arr1[i] - arr0[i]\n        sum += myVal0\n        tempArr.append(myVal0)\n    if sum > 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        for i in range(0, 8):\n            if tempArr[i] < 0:\n                return True\n            elif tempArr[i] > 0:\n                return False\n        else:\n            return False\n\ndef getRemIndices(tRem):\n    if tRem in remDict:\n        return copy.deepcopy(remDict[tRem])\n    if tRem < 3:\n        remDict[tRem] = []\n        return []\n    indArr = []\n    myTempArr = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, 8):\n        if remArr[i] == tRem:\n            myTempArr[i] += 1\n            return myTempArr\n        elif remArr[i] < tRem:\n            retArr = getRemIndices(tRem - remArr[i])\n            if retArr:\n                retArr[i] += 1\n            if indArr and retArr:\n                if isLess(retArr, indArr):\n                    indArr = copy.deepcopy(retArr)\n            elif retArr:\n                indArr = retArr\n    remDict[tRem] = copy.deepcopy(indArr)\n    return indArr\nchrArr = ['2', '3', '4', '5', '6', '7', '8', '9']\nfor test in range(0, getInput(0)):\n    N = getInput(0)\n    result = '-1'\n    myVal0 = int(math.sqrt(N))\n    mySq = myVal0 * myVal0\n    if mySq == N:\n        result = '1' * N\n    else:\n        myVal0 += 1\n        mySq = myVal0 * myVal0\n        myLimit = 80 * N\n        myDigitLimit = N\n        myResultList = []\n        while mySq <= myLimit:\n            myRetArr = getRemIndices(mySq - N)\n            if myRetArr:\n                mySum = 0\n                tempResult = ''\n                for i in range(0, 8):\n                    if myRetArr[i]:\n                        tempResult += chrArr[i] * myRetArr[i]\n                    mySum += myRetArr[i]\n                if myDigitLimit - mySum >= 0:\n                    myResultList.append(tempResult)\n                    myLimit = N + 80 * mySum\n                    myDigitLimit = mySum\n            myVal0 += 1\n            mySq = myVal0 * myVal0\n        resultList = []\n        for i in myResultList:\n            if len(i) == myDigitLimit:\n                resultList.append(i)\n        resultList.sort()\n        result = resultList[0]\n    print('1' * (N - len(result)) + result)", "import sys\nimport math\nimport copy\n\ndef getInput(num):\n    if num:\n        inputArr = input().split()\n        if len(inputArr) != num:\n            print(f'The length is {len(inputArr)} not same as asked for {num}')\n            sys.exit(0)\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\n    elif num == 0:\n        return int(input())\n    elif num == None:\n        inputArr = input().split()\n        for i in range(0, len(inputArr)):\n            inputArr[i] = int(inputArr[i])\n        return inputArr\nremArr = [3, 8, 15, 24, 35, 48, 63, 80]\nremDict = {}\n\ndef isLess(arr0, arr1):\n    sum = 0\n    tempArr = []\n    for i in range(0, 8):\n        myVal0 = arr1[i] - arr0[i]\n        sum += myVal0\n        tempArr.append(myVal0)\n    if sum > 0:\n        return True\n    elif sum < 0:\n        return False\n    else:\n        for i in range(0, 8):\n            if tempArr[i] < 0:\n                return True\n            elif tempArr[i] > 0:\n                return False\n        else:\n            return False\n\ndef getRemIndices(tRem):\n    if tRem in remDict:\n        return copy.deepcopy(remDict[tRem])\n    if tRem < 3:\n        remDict[tRem] = []\n        return []\n    indArr = []\n    myTempArr = [0, 0, 0, 0, 0, 0, 0, 0]\n    for i in range(0, 8):\n        if remArr[i] == tRem:\n            myTempArr[i] += 1\n            return myTempArr\n        elif remArr[i] < tRem:\n            retArr = getRemIndices(tRem - remArr[i])\n            if retArr:\n                retArr[i] += 1\n            if indArr and retArr:\n                if isLess(retArr, indArr):\n                    indArr = copy.deepcopy(retArr)\n            elif retArr:\n                indArr = retArr\n    remDict[tRem] = copy.deepcopy(indArr)\n    return indArr\nchrArr = ['2', '3', '4', '5', '6', '7', '8', '9']\nfor test in range(0, getInput(0)):\n    N = getInput(0)\n    result = '-1'\n    myVal0 = int(math.sqrt(N))\n    mySq = myVal0 * myVal0\n    if mySq == N:\n        result = '1' * N\n    else:\n        myVal0 += 1\n        mySq = myVal0 * myVal0\n        myLimit = 80 * N\n        myDigitLimit = N\n        myResultList = []\n        while mySq <= myLimit:\n            myRetArr = getRemIndices(mySq - N)\n            if myRetArr:\n                mySum = 0\n                tempResult = ''\n                for i in range(0, 8):\n                    if myRetArr[i]:\n                        tempResult += chrArr[i] * myRetArr[i]\n                    mySum += myRetArr[i]\n                if myDigitLimit - mySum >= 0:\n                    myResultList.append(tempResult)\n                    myLimit = N + 80 * mySum\n                    myDigitLimit = mySum\n            myVal0 += 1\n            mySq = myVal0 * myVal0\n        resultList = []\n        for i in myResultList:\n            if len(i) == myDigitLimit:\n                resultList.append(i)\n        resultList.sort()\n        result = resultList[0]\n    print('1' * (N - len(result)) + result)", "import math\n\ndef main():\n\n    def get_digits(n, k, p, B):\n        if n < k * p * p or n > k * 9 * 9:\n            return False\n        if k == 0:\n            return (0,) * (10 - p) if n == 0 else False\n        if p == 9:\n            return (k,) if n == k * 81 else False\n        for K in range(k, B[0] - 1, -1):\n            b2 = B[1:] if K == B[0] else (0,) * (9 - p)\n            res = get_digits(n - K * p * p, k - K, p + 1, b2)\n            if res != False:\n                return (K,) + res\n        return False\n    T = int(input())\n    for _ in range(T):\n        N = int(input())\n        M = math.floor(math.sqrt(N))\n        while M * M < N:\n            M += 1\n        best = (0,) * 9\n        while M * M <= 81 * N:\n            F = get_digits(M * M, N, 1, best)\n            if F:\n                best = max(best, F)\n            M += 1\n        if sum(best) > 0:\n            s = ''.join((str(i + 1) * best[i] for i in range(len(best))))\n            print(s)\n        else:\n            print(-1)\nmain()", "import math\n\ndef isPerSq(number):\n    root = math.sqrt(number)\n    if int(root) ** 2 == number:\n        return True\n    else:\n        return False\n\ndef min_coins(coins, total):\n    T = [10 ** 6 + 1 for i in range(total + 1)]\n    T[0] = 0\n    R = [-1 for i in range(total + 1)]\n    for i in range(len(coins)):\n        for j in range(1, total + 1):\n            if j >= coins[i]:\n                if 1 + T[j - coins[i]] <= T[j]:\n                    T[j] = 1 + T[j - coins[i]]\n                    R[j] = i\n    return (T[-1], R)\n\ndef print_coins(R, coins):\n    a = []\n    start = len(R) - 1\n    while start != 0:\n        coin = coins[R[start]]\n        a.append(int((coin + 1) ** 0.5))\n        start = start - coin\n    a.sort()\n    return a\ncoins = [i ** 2 - 1 for i in range(2, 10)]\ncoins.sort(reverse=True)\ndp = [10 ** 6 + 1 for i in range(10 ** 6 + 1)]\ndp[0] = 0\nfor i in range(len(coins)):\n    for j in range(1, 10 ** 6 + 1):\n        if j >= coins[i]:\n            if 1 + dp[j - coins[i]] <= dp[j]:\n                dp[j] = 1 + dp[j - coins[i]]\nT = int(input())\nwhile T:\n    N = int(input())\n    if isPerSq(N):\n        print('1' * N)\n    else:\n        x = int(N ** 0.5) + 1\n        ls = []\n        while x ** 2 - N < 10 ** 6 + 1:\n            if dp[x ** 2 - N] <= N:\n                ls.append([dp[x ** 2 - N], x ** 2 - N])\n            x += 1\n        ls.sort()\n        A = []\n        for i in range(len(ls)):\n            if i == 0:\n                (a, b) = min_coins(coins, ls[i][1])\n                A.append(print_coins(b, coins))\n            elif ls[i][0] == ls[i - 1][0]:\n                (a, b) = min_coins(coins, ls[i][1])\n                A.append(print_coins(b, coins))\n            else:\n                break\n        B = []\n        for i in range(len(A)):\n            B.append(''.join((str(x) for x in A[i])))\n        B.sort()\n        print('1' * (N - len(B[0])) + B[0])\n    T -= 1", "import math\nma = 30\ndp = [[-1 for i in range(ma + 1)] for j in range(81 * ma + 1)]\nfor i in range(1, 10):\n    dp[i * i][1] = i\nfor i in range(1, 81 * ma + 1):\n    for j in range(2, ma + 1):\n        for k in range(1, 10):\n            if i - k * k > 0 and dp[i - k * k][j - 1] != -1:\n                a = min(dp[i - k * k][j - 1] * 10 + k, k * 10 ** (i - 1) + dp[i - k * k][j - 1])\n                dp[i][j] = a if dp[i][j] == -1 else min(a, dp[i][j])\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    if int(math.sqrt(n)) ** 2 == n:\n        print('1' * n)\n        continue\n    if int(math.sqrt(81 * n)) == int(math.sqrt(n)):\n        print(-1)\n        continue\n    if n <= ma:\n        ans = -1\n        (u, d) = (int(math.sqrt(n)), int(math.sqrt(81 * n)) + 1)\n        for i in range(u, d):\n            if dp[i * i][n] != -1:\n                ans = min(dp[i * i][n], ans) if ans != -1 else dp[i * i][n]\n        print(ans)\n    else:\n        ans = -1\n        (u, d) = (int(math.sqrt(n)) + 1, int(math.sqrt(81 * n)) + 1)\n        one = n\n        for i in range(1, ma + 1):\n            one -= 1\n            for j in range(u, d):\n                c = j * j\n                if c - one < 81 * ma and dp[c - one][n - one] != -1:\n                    ans = min(ans, dp[c - one][n - one]) if ans != -1 else dp[c - one][n - one]\n            if ans != -1:\n                break\n        if ans != -1:\n            print('1' * one, ans, sep='')\n        else:\n            print(-1)", "import math\nfrom math import floor, ceil, sqrt, log, log10\nglobal_curr_num = [0 for i in range(0, 9)]\npre_ = [0, 1, 34, 122, 1111, 11123, 111112, 1111124, 11111113, 111111111, 1111111114, 11111111126]\nlast_2 = [11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 23, 24, 25, 26, 27, 28, 29, 33, 34, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 55, 56, 57, 58, 59, 66, 67, 68, 69, 77, 78, 79, 88, 89, 99]\ndiff_arr = [0, -1, -1, 2, -1, -1, 22, -1, 3, 222, -1, 23, 2222, -1, 223, 4, 33, 2223, 24, 233, 22223, 224, 2233, 34, 5, 22233, 234, 25, 222233, 2234, 44, 334, 35, 244, 2334, 6, 2244, 22334, 26, 45, 335, 226, 245, 36, 2226, 444, 236, 345, 7, 2236, 46, 27, 22236, 246, 227, 3345, 37, 2227, 346, 56, 4444, 2346, 256, 8, 337, 446, 28, 356, 2446, 228, 66, 38, 57, 266, 238, 257, 2266, 2238, 48, 338, 9, 248, 2338, 29, 2248, 466, 229, 58, 39, 2229, 258, 239, 22229, 448, 566, 49, 77, 2566, 68, 277, 4466, 268, 458, 349, 59, 666, 368, 259, 2666, 2368, 449, 78, 359, 468, 278, 69, 2468, 2278, 269, 378, 577, 2269, 568, 369, 22269, 2568, 88, 3378, 79, 288, 469, 279, 2288, 668, 388, 578, 379, 2388, 2578, 569, 6666, 488, 2569, 89, 777, 4469, 289, 2777, 4668, 2289, 588, 389, 579, 2588, 2389, 2579, 4488, 5668, 489, 778, 99, 688, 2778, 299, 2688, 4588, 2299, 589, 399, 3688, 2589, 2399, 23688, 4489, 788, 499, 779, 2788, 689, 2779, 22788, 2689, 3788, 3499, 599, 5688, 3689, 2599, 25688, 888, 4499, 789, 2888, 4689, 2789, 699, 6688, 3888, 2699, 3789, 5779, 22699, 5689, 3699, 4888, 25689, 889, 7778, 799, 2889, 4699, 2799, 22889, 5888, 3889, 5789, 3799, 23889, 25789, 5699, 56688, 4889, 7788, 899, 6888, 27788, 2899, 26888, 45888, 22899, 5889, 3899, 5799, 25889, 23899, 25799, 44889, 7888, 4899, 7789, 999, 6889, 27789, 2999, 26889, 37888, 22999, 5899, 3999, 36889, 25899, 23999, 8888, 44899, 7889, 4999, 7799, 27889, 6899, 27799, 38888, 26899, 37889, 34999, 5999, 56889, 36899, 25999, 256889, 8889, 44999, 7899, 28889, 46899, 27899, 6999, 58888, 38889, 26999, 37899, 57799, 226999, 56899, 36999, 48889, 77888, 8899, 68888, 7999, 28899, 46999, 27999, 228899, 58889, 38899, 57899, 37999, 238899, 257899, 56999, 78888, 48899, 77889, 8999, 68889, 277889, 28999, 268889, 378888, 228999, 58899, 38999, 57999, 258899, 238999, 88888, 448899, 78889, 48999, 77899, 9999, 68899, 277899, 29999, 268899, 378889, 229999, 58999, 39999, 368899, 258999, 239999, 88889, 448999, 78899, 49999, 77999, 278899, 68999, 277999, 388889, 268999, 378899, 349999, 59999, 568899, 368999, 259999, 778888, 88899, 449999, 78999, 288899, 468999, 278999, 69999, 588889, 388899, 269999, 378999, 577999, 2269999, 568999, 369999, 488899, 778889, 88999, 688889, 79999, 288999, 469999, 279999, 2288999, 588899, 388999, 578999, 379999, 2388999, 888888, 569999, 788889, 488999, 778899, 89999, 688899, 2778899, 289999, 2688899, 3788889, 2289999, 588999, 389999, 579999, 2588999, 2389999, 888889, 4488999, 788899, 489999, 778999, 99999, 688999, 2778999, 299999, 2688999, 3788899, 2299999, 589999, 399999, 3688999, 2589999, 2399999, 888899, 4489999, 788999, 499999, 779999, 2788999, 689999, 2779999, 3888899, 2689999, 3788999, 3499999, 599999, 5688999, 3689999, 2599999, 7788889, 888999, 4499999, 789999, 2888999, 4689999, 2789999, 699999, 5888899, 3888999, 2699999, 3789999, 5779999, 8888888, 5689999, 3699999, 4888999, 7788899, 889999, 6888899, 799999, 2889999, 4699999, 2799999, 22889999, 5888999, 3889999, 5789999, 3799999, 23889999, 8888889, 5699999, 7888899, 4889999, 7788999, 899999, 6888999, 27788999, 2899999, 26888999, 37888899, 22899999, 5889999, 3899999, 5799999, 25889999, 23899999, 8888899, 44889999, 7888999, 4899999, 7789999, 999999, 6889999, 27789999, 2999999, 26889999, 37888999, 22999999, 5899999, 3999999, 36889999, 25899999, 23999999, 8888999, 44899999, 7889999, 4999999, 7799999, 27889999, 6899999, 27799999, 38888999, 26899999, 37889999, 34999999, 5999999, 56889999, 36899999, 25999999, 77888899, 8889999, 44999999, 7899999, 28889999, 46899999, 27899999, 6999999, 58888999, 38889999, 26999999, 37899999, 57799999, 88888889, 56899999, 36999999, 48889999, 77888999, 8899999, 68888999, 7999999, 28899999, 46999999, 27999999, 228899999, 58889999, 38899999, 57899999, 37999999, 238899999, 88888899, 56999999, 78888999, 48899999, 77889999, 8999999, 68889999, 277889999, 28999999, 268889999, 378888999, 228999999, 58899999, 38999999, 57999999, 258899999, 238999999, 88888999, 448899999, 78889999, 48999999, 77899999, 9999999, 68899999, 277899999, 29999999, 268899999, 378889999, 229999999, 58999999, 39999999, 368899999, 258999999, 239999999, 88889999, 448999999, 78899999, 49999999, 77999999, 278899999, 68999999, 277999999, 388889999, 268999999, 378899999, 349999999, 59999999, 568899999, 368999999, 259999999, 778888999, 88899999, 449999999, 78999999, 288899999, 468999999, 278999999, 69999999, 588889999, 388899999, 269999999, 378999999, 577999999, 888888899, 568999999, 369999999, 488899999, 778889999, 88999999, 688889999, 79999999, 288999999, 469999999, 279999999, 2288999999, 588899999, 388999999, 578999999, 379999999, 2388999999, 888888999, 569999999, 788889999, 488999999, 778899999, 89999999, 688899999, 2778899999, 289999999, 2688899999, 3788889999, 2289999999, 588999999, 389999999, 579999999, 2588999999, 2389999999, 888889999, 4488999999, 788899999, 489999999, 778999999, 99999999, 688999999, 2778999999, 299999999, 2688999999, 3788899999, 2299999999, 589999999, 399999999, 3688999999, 2589999999, 2399999999, 888899999, 4489999999, 788999999, 499999999, 779999999, 2788999999, 689999999, 2779999999, 3888899999, 2689999999, 3788999999, 3499999999, 599999999, 5688999999, 3689999999, 2599999999, 7788889999, 888999999, 4499999999, 789999999, 2888999999, 4689999999, 2789999999, 699999999, 5888899999, 3888999999, 2699999999, 3789999999, 5779999999, 8888888999, 5689999999, 3699999999, 4888999999, 7788899999, 889999999, 6888899999, 799999999, 2889999999, 4699999999, 2799999999, 22889999999, 5888999999, 3889999999, 5789999999, 3799999999, 23889999999, 8888889999, 5699999999, 7888899999, 4889999999, 7788999999, 899999999, 6888999999, 27788999999, 2899999999, 26888999999, 37888899999, 22899999999, 5889999999, 3899999999, 5799999999, 25889999999, 23899999999, 8888899999, 44889999999, 7888999999, 4899999999, 7789999999, 999999999, 6889999999, 27789999999, 2999999999, 26889999999, 37888999999, 22999999999, 5899999999, 3999999999, 36889999999, 25899999999, 23999999999, 8888999999, 44899999999, 7889999999, 4999999999, 7799999999, 27889999999, 6899999999, 27799999999, 38888999999, 26899999999, 37889999999, 34999999999, 5999999999, 56889999999, 36899999999, 25999999999, 77888899999, 8889999999, 44999999999, 7899999999, 28889999999, 46899999999, 27899999999, 6999999999, 58888999999, 38889999999, 26999999999, 37899999999, 57799999999, 88888889999, 56899999999, 36999999999, 48889999999, 77888999999, 8899999999, 68888999999, 7999999999, 28899999999, 46999999999, 27999999999, 228899999999, 58889999999, 38899999999, 57899999999, 37999999999, 238899999999, 88888899999, 56999999999, 78888999999, 48899999999, 77889999999, 8999999999, 68889999999, 277889999999, 28999999999, 268889999999, 378888999999, 228999999999, 58899999999, 38999999999, 57999999999, 258899999999, 238999999999, 88888999999, 448899999999, 78889999999, 48999999999, 77899999999, 9999999999, 68899999999, 277899999999, 29999999999, 268899999999, 378889999999, 229999999999, 58999999999, 39999999999, 368899999999, 258999999999, 239999999999, 88889999999, 448999999999, 78899999999, 49999999999, 77999999999, 278899999999, 68999999999, 277999999999, 388889999999, 268999999999, 378899999999, 349999999999, 59999999999, 568899999999, 368999999999, 259999999999, 778888999999, 88899999999, 449999999999, 78999999999, 288899999999, 468999999999, 278999999999, 69999999999, 588889999999, 388899999999, 269999999999, 378999999999, 577999999999, 888888899999, 568999999999, 369999999999, 488899999999, 778889999999, 88999999999, 688889999999, 79999999999, 288999999999, 469999999999, 279999999999, 2288999999999, 588899999999, 388999999999, 578999999999, 379999999999, 2388999999999, 888888999999, 569999999999, 788889999999, 488999999999, 778899999999, 89999999999, 688899999999, 2778899999999, 289999999999, 2688899999999, 3788889999999, 2289999999999, 588999999999, 389999999999, 579999999999, 2588999999999, 2389999999999, 888889999999, 4488999999999, 788899999999, 489999999999, 778999999999, 99999999999, 688999999999, 2778999999999, 299999999999, 2688999999999, 3788899999999, 2299999999999, 589999999999, 399999999999, 3688999999999, 2589999999999, 2399999999999, 888899999999, 4489999999999, 788999999999, 499999999999, 779999999999, 2788999999999, 689999999999, 2779999999999, 3888899999999, 2689999999999, 3788999999999, 3499999999999, 599999999999, 5688999999999, 3689999999999, 2599999999999, 7788889999999, 888999999999, 4499999999999, 789999999999, 2888999999999, 4689999999999, 2789999999999, 699999999999, 5888899999999, 3888999999999, 2699999999999, 3789999999999, 5779999999999, 8888888999999, 5689999999999, 3699999999999, 4888999999999, 7788899999999, 889999999999, 6888899999999, 799999999999, 2889999999999, 4699999999999, 2799999999999, 22889999999999, 5888999999999, 3889999999999, 5789999999999, 3799999999999, 23889999999999, 8888889999999, 5699999999999, 7888899999999, 4889999999999, 7788999999999, 899999999999, 6888999999999, 27788999999999, 2899999999999, 26888999999999, 37888899999999, 22899999999999, 5889999999999, 3899999999999, 5799999999999, 25889999999999, 23899999999999, 8888899999999, 44889999999999, 7888999999999, 4899999999999, 7789999999999, 999999999999, 6889999999999, 27789999999999, 2999999999999, 26889999999999, 37888999999999, 22999999999999, 5899999999999, 3999999999999, 36889999999999, 25899999999999, 23999999999999, 8888999999999, 44899999999999, 7889999999999, 4999999999999, 7799999999999, 27889999999999, 6899999999999, 27799999999999, 38888999999999, 26899999999999, 37889999999999, 34999999999999, 5999999999999, 56889999999999, 36899999999999, 25999999999999, 77888899999999, 8889999999999, 44999999999999, 7899999999999, 28889999999999, 46899999999999, 27899999999999, 6999999999999, 58888999999999, 38889999999999, 26999999999999, 37899999999999, 57799999999999]\n\ndef is_sq(a):\n    b = int(sqrt(a))\n    return (b - 1) * (b - 1) == a or b * b == a or (b + 1) * (b + 1) == a\n\ndef pretty_print(a):\n    l = 0\n    for i in range(0, len(a)):\n        for j in range(0, a[i]):\n            l += 1\n            if l > 0:\n                print(i + 1, end='')\n    print()\n\ndef sum_sq_digits(a):\n    ans = 0\n    while a > 0:\n        ans += a % 10 * (a % 10)\n        a = a // 10\n    return ans\n\ndef smaller_eq_fun(a, b):\n    for i in range(0, len(a)):\n        if a[i] > b[i]:\n            return True\n        if a[i] < b[i]:\n            return False\n    return True\n\ndef get_valid_beautiful_num(n, sq):\n    if sq < n:\n        return False\n    if sq == n:\n        for i in range(0, 9):\n            global_curr_num[i] = 0\n        global_curr_num[0] = n\n        return True\n    ones = n - 2\n    nines = 0\n    if sq - n > 750:\n        tmp = sq - n + 2\n        tmp = max(0, tmp // 80 - 5)\n        ones = n - 2 - tmp\n        nines = tmp\n    curr_diff = 0\n    for i in range(0, 9):\n        global_curr_num[i] = 0\n    curr_tmp = [0 for i in range(0, 9)]\n    is_possible = False\n    for i in range(0, len(last_2)):\n        for j in range(0, 9):\n            curr_tmp[j] = 0\n        curr_diff = sq - (ones + 81 * nines + sum_sq_digits(last_2[i]))\n        if curr_diff == 0:\n            is_possible = is_possible or True\n            curr_tmp[0] = n - nines - 2\n            curr_tmp[8] = nines\n            curr_tmp[last_2[i] % 10 - 1] += 1\n            curr_tmp[last_2[i] // 10 - 1] += 1\n            if smaller_eq_fun(curr_tmp, global_curr_num):\n                for j in range(0, 9):\n                    global_curr_num[j] = curr_tmp[j]\n        elif curr_diff > 0 and curr_diff < len(diff_arr) and (diff_arr[curr_diff] != -1):\n            is_possible = is_possible or True\n            curr_tmp[0] = n - nines - 2\n            curr_tmp[8] = nines\n            curr_tmp[last_2[i] % 10 - 1] += 1\n            curr_tmp[last_2[i] // 10 - 1] += 1\n            diff_sq = diff_arr[curr_diff]\n            while diff_sq > 0:\n                curr_tmp[diff_sq % 10 - 1] += 1\n                diff_sq = diff_sq // 10\n                curr_tmp[0] -= 1\n            if smaller_eq_fun(curr_tmp, global_curr_num):\n                for j in range(0, 9):\n                    global_curr_num[j] = curr_tmp[j]\n    return is_possible\n\ndef get_last_num(a):\n    ans = 0\n    mul = 1\n    for i in range(8, 0, -1):\n        for j in range(0, a[i]):\n            ans += (i + 1) * mul\n            mul *= 10\n    return ans\ntest_c = int(input())\ncurr_max_las = 0\nfor t in range(0, test_c):\n    n = int(input())\n    if n <= 10:\n        print(pre_[n])\n        continue\n    min_sq = ceil(sqrt(n))\n    max_sq = floor(sqrt(81 * n)) + 1\n    is_possible = False\n    curr_num = [0 for i in range(0, 9)]\n    for curr_sq in range(min_sq, max_sq):\n        flag = get_valid_beautiful_num(n, curr_sq * curr_sq)\n        if flag:\n            if smaller_eq_fun(global_curr_num, curr_num):\n                for i in range(0, len(curr_num)):\n                    curr_num[i] = global_curr_num[i]\n        is_possible = is_possible or flag\n    if is_possible:\n        pretty_print(curr_num)\n    else:\n        while True:\n            gsgs = 1\n        print(-1)", "import math\nstore = {}\n\ndef beautiful_number(M, N, min_is, s):\n    args = (M, N, min_is, s)\n    if args in store:\n        return store[args]\n    if M < N or M - N * 81 > 0:\n        return None\n    if s == 9:\n        mi = M - N * s * s\n        res = [N] if mi == 0 else None\n        store[args] = res\n        return res\n    max_i = min(N, int((M - 81 * N) / (s * s - 81)))\n    min_i = min_is\n    for i in range(max_i, min_i - 1, -1):\n        mi = M - i * s * s\n        res = beautiful_number(mi, N - i, 0, s + 1)\n        if res is not None:\n            res = [i] + res\n            store[args] = res\n            return res\n    store[args] = None\n    return None\nl2a = lambda a: ''.join([str(i + 1) * x for (i, x) in enumerate(a)]) if a is not None else -1\nsquares_list = [n * n for n in range(1, math.floor(math.sqrt(81 * 1000000)) + 1)]\n\ndef min_beautiful_number(N):\n    beautiful_numbers = []\n    min_is = 0\n    for M in squares_list:\n        if M >= N + 81 or M == N:\n            if M <= 81 * N:\n                a = beautiful_number(M, N, min_is, 1)\n                if a is not None:\n                    min_is = a[0]\n                    break\n    for M in squares_list:\n        if M >= N:\n            if M <= 81 * N:\n                a = beautiful_number(M, N, min_is, 1)\n                if a is not None:\n                    if min_is <= a[0]:\n                        b = l2a(a)\n                        beautiful_numbers.append(b)\n                        min_is = a[0]\n            else:\n                break\n    return min(beautiful_numbers) if beautiful_numbers else -1\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    print(min_beautiful_number(N))", "import sys, math\nsys.setrecursionlimit(10 ** 6)\n\ndef rec3(digit, carry=0, st='', t=1):\n    ins1 = math.floor(carry ** 0.5)\n    ins2 = (ins1 + 1) ** 2\n    ins3 = carry + digit * 9 ** 2\n    if ins2 > ins3:\n        return False\n    if digit <= 0:\n        if float(carry ** 0.5).is_integer():\n            return st\n        else:\n            return False\n    elif digit == 1:\n        y = [i for i in range(t, 10) if float((carry + i ** 2) ** 0.5).is_integer()]\n        if len(y) != 0:\n            return st + str(y[0])\n        else:\n            return False\n    for i in range(t, 10):\n        tst = st + str(i)\n        x = rec3(digit - 1, carry + i ** 2, tst, i)\n        if x != False:\n            return x\n    return False\n\ndef generator(n):\n    if float(n ** 0.5).is_integer():\n        return '1' * n\n    for i in range(n - 1, -1, -1):\n        x = rec3(n - i, i)\n        if x != False:\n            return '1' * i + x\n    return -1\nfor _ in range(int(input())):\n    n = int(input())\n    print(generator(n))", "import math\nposs = [None]\nposs.append({3: '2', 8: '3', 15: '4', 24: '5', 35: '6', 48: '7', 63: '8', 80: '9'})\n\ndef digitSum(n):\n    r = 0\n    while n:\n        (r, n) = (r + (n % 10) ** 2, n // 10)\n    return r\n\ndef isPerfectSquare(n):\n    return math.sqrt(n) - math.floor(math.sqrt(n)) == 0\n\ndef isBeautifulNumber(n):\n    digit_sum = digitSum(n)\n    if isPerfectSquare(digit_sum):\n        return True\n    return False\n\ndef squares(a, b):\n    start = math.ceil(math.sqrt(a))\n    end = math.floor(math.sqrt(b))\n    for num in range(start, end + 1):\n        yield (num ** 2)\nfor i in range(2, 40):\n    poss.append({})\n    for (key, value) in poss[i - 1].items():\n        for (base, orig_value) in poss[1].items():\n            new_key = key + base\n            new_value = ''.join(sorted(value + orig_value))\n            if new_key not in poss[i]:\n                poss[i][new_key] = new_value\n            elif new_value < poss[i][new_key]:\n                poss[i][new_key] = new_value\nt = int(input())\nfor test in range(t):\n    digs = int(input())\n    found = False\n    n = digs\n    max_change = 81 * n\n    for i in range(1, digs + 1):\n        min_ans = '9' * digs\n        for square in squares(n, max_change):\n            diff = square - n\n            if diff > i * 80:\n                break\n            if diff == 0:\n                found = True\n                ans = '1' * digs\n                min_ans = min(min_ans, ans)\n            if diff in poss[i]:\n                found = True\n                ans = '1' * (digs - len(poss[i][diff])) + poss[i][diff]\n                min_ans = min(min_ans, ans)\n        if found:\n            print(min_ans)\n            break", "import itertools\nimport math\narr = []\ndic = {}\n\ndef isSquare(n):\n    return math.sqrt(n) == int(math.sqrt(n))\nfor i in range(8):\n    arr = arr + list(itertools.product([3, 8, 15, 24, 35, 48, 63, 80], repeat=i))\nfor i in arr:\n    s = sum(i)\n    if s not in dic:\n        dic[s] = i\narr = []\nkeys = [dic[i] for i in dic]\nfor i in range(3):\n    arr = arr + list(itertools.product(keys, repeat=i))\nfor i in arr:\n    s = ()\n    try:\n        s = s + i[0]\n        s = s + i[1]\n    except:\n        pass\n    if sum(s) not in dic:\n        dic[sum(s)] = s\narr = []\nkeys = [dic[i] for i in dic]\nfor i in range(3):\n    arr = arr + list(itertools.product(keys, repeat=i))\nfor i in arr:\n    s = ()\n    try:\n        s = s + i[0]\n        s = s + i[1]\n    except:\n        pass\n    if sum(s) not in dic:\n        dic[sum(s)] = s\n\ndef f(N):\n    res = []\n    for i in dic:\n        if isSquare(i + N):\n            digits = dic[i]\n            break\n    digits = list(digits)\n    digits.sort()\n    s = ''\n    for i in range(N - len(digits)):\n        s += '1'\n    for i in digits:\n        s += str(int(math.sqrt(i + 1)))\n    return s\nT = int(input())\nfor i in range(T):\n    N = int(input())\n    print(f(N))", "lookup = [''] * 2004\npre = [str(i ** 2 - 1) for i in range(2, 10)]\npre = ['0', '0'] + pre\nfor i in range(2, 10):\n    lookup[int(pre[i])] = str(i)\nfor i in range(3, 2004):\n    if lookup[i] != '':\n        for j in range(2, 10):\n            index = i + int(pre[j])\n            if index <= 2003:\n                val = lookup[i] + str(j)\n                val = ''.join(sorted(val))\n                if lookup[index] == '':\n                    lookup[index] = val\n                else:\n                    exists = lookup[index]\n                    if len(val) < len(exists):\n                        lookup[index] = val\n                    elif len(val) == len(exists) and val < exists:\n                        lookup[index] = val\n\ndef perfectSquare(num):\n    if int(num ** 0.5) ** 2 == num:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    summ = n\n    ans = ''\n    if perfectSquare(n):\n        ans = ['1'] * n\n        ans = ''.join(ans)\n        print(ans)\n    else:\n        for i in range(1, 2003):\n            if perfectSquare(summ + i):\n                if ans == '':\n                    ans = lookup[i]\n                else:\n                    temp = lookup[i]\n                    if temp != '':\n                        if len(temp) < len(ans):\n                            ans = temp\n                        elif len(temp) == len(ans):\n                            if temp < ans:\n                                ans = temp\n        if ans == '':\n            print(-1)\n        else:\n            for _ in range(1, n + 1 - len(ans)):\n                print(1, end='')\n            print(ans)", "import sys\nsys.setrecursionlimit(10 ** 8)\n\ndef is_sq(num):\n    sqrt = int(num ** 0.5)\n    return sqrt ** 2 == num\n\ndef force(n):\n    res = [None] * n\n    dp = {}\n\n    def recurse(cur, acu):\n        if (cur, acu) in dp:\n            return dp[cur, acu]\n        if cur == n:\n            if is_sq(acu):\n                return True\n            return False\n        for i in range(1, 10):\n            if recurse(cur + 1, acu + i * i):\n                dp[cur, acu] = True\n                res[cur] = i\n                return True\n        dp[cur, acu] = False\n        return False\n    recurse(0, 0)\n    print(*res, sep='')\nfor i in range(int(input())):\n    force(int(input()))", "import math\n\ndef isPerfectSquare(x):\n    sr = math.sqrt(x)\n    return sr - math.floor(sr) == 0\nT = int(input())\nfor jok in range(T):\n    n = int(input())\n    ans = -1\n    lown = 0\n    upn = 0\n    nn = n\n    full = 0\n    ful = 0\n    fu = 0\n    if isPerfectSquare(n):\n        print('1' * n)\n        continue\n    if n == 2:\n        print(34)\n        continue\n    elif n == 3:\n        print(122)\n        continue\n    elif n == 5:\n        print(11123)\n        continue\n    elif n == 6:\n        print(111112)\n        continue\n    elif n == 7:\n        print(1111124)\n        continue\n    elif n == 8:\n        print(11111113)\n        continue\n    elif n == 10:\n        print(1111111114)\n        continue\n    elif n == 11:\n        print(11111111126)\n        continue\n    elif n == 12:\n        print(111111111115)\n        continue\n    elif n == 13:\n        print(1111111111112)\n        continue\n    elif n == 14:\n        print(11111111111116)\n        continue\n    elif n == 15:\n        print(111111111111128)\n        continue\n    elif n == 17:\n        print(11111111111111113)\n        continue\n    elif n == 18:\n        print(111111111111111118)\n        continue\n    elif n == 19:\n        print(1111111111111111122)\n        continue\n    elif n == 20:\n        print(11111111111111111119)\n        continue\n    elif n == 21:\n        print(111111111111111111114)\n        continue\n    elif n == 22:\n        print(1111111111111111111112)\n        continue\n    elif n == 23:\n        print(11111111111111111111168)\n        continue\n    elif n == 24:\n        print(111111111111111111111335)\n        continue\n    cc = upn\n    flag = 0\n    i = 2\n    puc = n\n    ans = -1\n    numm = 0\n    i1 = i2 = i3 = i4 = i5 = i6 = i7 = i8 = i9 = 0\n    for i1 in range(n, -1, -1):\n        bye = n - i1\n        if bye == 19:\n            break\n        for i2 in range(n - i1, -1, -1):\n            for i3 in range(n - i1 - i2, -1, -1):\n                for i4 in range(n - i1 - i2 - i3, -1, -1):\n                    for i5 in range(n - i1 - i2 - i3 - i4, -1, -1):\n                        for i6 in range(n - i1 - i2 - i3 - i4 - i5, -1, -1):\n                            for i7 in range(n - i1 - i2 - i3 - i4 - i5 - i6, -1, -1):\n                                for i8 in range(n - i1 - i2 - i3 - i4 - i5 - i6 - i7, -1, -1):\n                                    for i9 in range(n - i1 - i2 - i3 - i4 - i5 - i6 - i7 - i8, -1, -1):\n                                        if i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 != n:\n                                            continue\n                                        xx = 1 * i1 + 4 * i2 + 9 * i3 + 16 * i4 + 25 * i5 + 36 * i6 + 49 * i7 + 64 * i8 + 81 * i9\n                                        if isPerfectSquare(xx):\n                                            flag = 1\n                                            break\n                                    if flag == 1:\n                                        break\n                                if flag == 1:\n                                    break\n                            if flag == 1:\n                                break\n                        if flag == 1:\n                            break\n                    if flag == 1:\n                        break\n                if flag == 1:\n                    break\n            if flag == 1:\n                break\n        if flag == 1:\n            break\n    if flag == 0:\n        i1 = i2 = i3 = i4 = i5 = i6 = i7 = i8 = i9 = 0\n        nine = 20\n        n = n - 20\n        for i1 in range(n, -1, -1):\n            for i2 in range(n - i1, -1, -1):\n                for i3 in range(n - i1 - i2, -1, -1):\n                    for i4 in range(n - i1 - i2 - i3, -1, -1):\n                        for i5 in range(n - i1 - i2 - i3 - i4, -1, -1):\n                            for i6 in range(n - i1 - i2 - i3 - i4 - i5, -1, -1):\n                                for i7 in range(n - i1 - i2 - i3 - i4 - i5 - i6, -1, -1):\n                                    for i8 in range(n - i1 - i2 - i3 - i4 - i5 - i6 - i7, -1, -1):\n                                        for i9 in range(n - i1 - i2 - i3 - i4 - i5 - i6 - i7 - i8, -1, -1):\n                                            if i1 + i2 + i3 + i4 + i5 + i6 + i7 + i8 + i9 != n:\n                                                continue\n                                            xx = 1 * i1 + 4 * i2 + 9 * i3 + 16 * i4 + 25 * i5 + 36 * i6 + 49 * i7 + 64 * i8 + 81 * (i9 + nine)\n                                            if isPerfectSquare(xx):\n                                                flag = 1\n                                                break\n                                        if flag == 1:\n                                            break\n                                    if flag == 1:\n                                        break\n                                if flag == 1:\n                                    break\n                            if flag == 1:\n                                break\n                        if flag == 1:\n                            break\n                    if flag == 1:\n                        break\n                if flag == 1:\n                    break\n            if flag == 1:\n                i9 = i9 + nine\n                break\n    if flag == 0:\n        print(-1)\n    else:\n        print('1' * i1, end='')\n        print('2' * i2, end='')\n        print('3' * i3, end='')\n        print('4' * i4, end='')\n        print('5' * i5, end='')\n        print('6' * i6, end='')\n        print('7' * i7, end='')\n        print('8' * i8, end='')\n        print('9' * i9, end='')\n        print()", "V = [3, 8, 15, 24, 35, 48, 63, 80]\n\ndef min_change(C):\n    (table, solution) = min_change_table(C)\n    (num_coins, coins) = (table[-1], [])\n    if num_coins == float('inf'):\n        return []\n    while C > 0:\n        coins.append(V[solution[C]])\n        C -= V[solution[C]]\n    return coins\n\ndef min_change_table(C):\n    (m, n) = (C + 1, 8)\n    (table, solution) = ([0] * m, [0] * m)\n    for i in range(1, m):\n        (minNum, minIdx) = (float('inf'), -1)\n        for j in range(n):\n            if V[j] <= i and 1 + table[i - V[j]] < minNum:\n                minNum = 1 + table[i - V[j]]\n                minIdx = j\n        table[i] = minNum\n        solution[i] = minIdx\n    return (table, solution)\nimport math\ns = math.sqrt\nf = math.floor\nt = int(input())\nans = list()\nfor _ in range(t):\n    n = int(input())\n    a = s(n)\n    b = f(a)\n    if a - b == 0:\n        ans.append('1' * n)\n    else:\n        m = list()\n        l = len\n        for i in range(b + 1, b + 11):\n            x = min_change(i ** 2 - n)\n            if x:\n                m.append(x)\n        m.sort(key=lambda x: (l(x), x))\n        m[0].sort()\n        temp = ''\n        for i in m[0]:\n            temp += str(int(s(i + 1)))\n            n -= 1\n        temp = '1' * n + temp\n        ans.append(temp)\nfor x in ans:\n    print(x)", "import math as m1\nimport sys\nsys.setrecursionlimit(10 ** 5)\n\ndef count(S, m, n, res, co):\n    res.append(S[m - 1])\n    if n == 0:\n        if len(res) == co + 1:\n            fre.append(res)\n        return 1\n    if n < 0 or len(res) - 1 >= co:\n        return 0\n    if m <= 0 and n >= 1:\n        return 0\n    return count(S, m - 1, n, res[:-1], co) + count(S, m, n - S[m - 1], res[:], co)\narr = [4, 9, 16, 25, 36, 49, 64, 81]\narr2 = [1, 4, 9, 16, 25, 36, 49, 64, 81]\nm = len(arr)\nt = int(input())\nwhile t:\n    t -= 1\n    res = []\n    fre = []\n    flag = 0\n    f = int(input())\n    z = m1.ceil(pow(f, 0.5))\n    if m1.ceil(pow(f, 0.5)) == m1.floor(pow(f, 0.5)):\n        print('1' * f)\n        continue\n    c = 0\n    while c != 17:\n        c += 1\n        if c >= 10:\n            for i in range(z, z + 2):\n                te = i * i - f + c\n                count(arr, m, te, [], c)\n                if len(fre) != 0:\n                    flag = 1\n                    break\n        else:\n            for i in range(z, z + 7):\n                te = i * i - f + c\n                count(arr, m, te, [], c)\n                if len(fre) != 0:\n                    flag = 1\n        if flag == 1:\n            break\n    if flag == 0:\n        c = 6\n        while c != 15:\n            c += 1\n            for i in range(z, z + 2):\n                te = i * i - (f - c - c) - 81 * c\n                count(arr2, 9, te, [], c)\n                if len(fre) != 0:\n                    flag = 1\n            if flag == 1:\n                break\n        for i in fre:\n            i.sort()\n        fre.sort()\n        print('1' * (f - (c - 1 + len(fre[0]))), end='')\n        for i in fre[0][1:]:\n            print(str(int(pow(i, 0.5))), end='')\n        print('9' * c)\n        continue\n    for i in fre:\n        i.sort()\n    fre.sort()\n    print('1' * (f - c), end='')\n    s1 = ''\n    for i in fre[0][1:]:\n        print(str(int(pow(i, 0.5))), end='')\n    print()", "from itertools import combinations_with_replacement\nimport math\nm = {i * i - 1: [i * i - 1] for i in range(2, 10)}\nfor _ in range(50):\n    for (kk, v) in list(m.items()):\n        for i in [3, 8, 15, 24, 35, 48, 63, 80]:\n            if i <= v[0]:\n                key = kk + i\n                if key not in m or len(v) + 1 < len(m[key]) or ([i] + v < m[key] and len(v) + 1 == len(m[key])):\n                    m[key] = [i] + v\nb = {n * n - 1: str(n) for n in range(2, 10)}\nT = int(input())\nfor _ in range(0, T):\n    N = int(input())\n    if N == 2:\n        print('34')\n    else:\n        best = -1\n        u = math.ceil(math.sqrt(N))\n        if u * u == N:\n            print(N * '1')\n            continue\n        u2 = 9 * u\n        while u < u2:\n            t = u * u - N\n            if t in m:\n                s = ''.join((b[v] for v in m[t]))\n                if int(s) < int(best) or best == -1:\n                    best = s\n            u += 1\n        if best == -1:\n            print('-1')\n        else:\n            print((N - len(best)) * '1' + best)", "def binarySearch(arr, l, r, x):\n    if r >= l:\n        mid = int(l + (r - l) / 2)\n        if arr[mid] == x:\n            return mid\n        elif arr[mid] > x:\n            return binarySearch(arr, l, mid - 1, x)\n        else:\n            return binarySearch(arr, mid + 1, r, x)\n    else:\n        return -1\nfrom itertools import combinations_with_replacement\nx = list(combinations_with_replacement([1, 4, 9, 16, 25, 36, 49, 64, 81], 15))\nx.sort(key=lambda p: sum(p))\ntotals = list(map(sum, x))\nmy_squares = [int(x ** 2) for x in range(1, 9001)]\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 2:\n        print(34)\n    elif n == 1:\n        print(1)\n    elif n == 3:\n        print(122)\n    elif n == 4:\n        print(1111)\n    elif n == 5:\n        print(11123)\n    elif n == 6:\n        print(111112)\n    elif n == 7:\n        print(1111124)\n    elif n == 8:\n        print(11111113)\n    elif n == 9:\n        print(111111111)\n    elif n == 10:\n        print(1111111114)\n    elif n == 11:\n        print(11111111126)\n    elif n == 12:\n        print(111111111115)\n    elif n == 13:\n        print(1111111111112)\n    elif n == 14:\n        print(11111111111116)\n    elif n == 15:\n        print(111111111111128)\n    elif n == 16:\n        print(1111111111111111)\n    elif n == 17:\n        print(11111111111111113)\n    elif n == 18:\n        print(111111111111111118)\n    elif n == 19:\n        print(1111111111111111122)\n    elif n == 20:\n        print(11111111111111111119)\n    elif n == 21:\n        print(111111111111111111114)\n    elif n == 22:\n        print(1111111111111111111112)\n    elif n == 23:\n        print(11111111111111111111168)\n    elif n == 24:\n        print(111111111111111111111335)\n    else:\n        my_arr = []\n        count = 0\n        while len(my_arr) == 0:\n            for square in my_squares:\n                b = binarySearch(totals, 0, len(totals) - 1, square + 15 - n + count - 81 * count)\n                if b != -1:\n                    l = b\n                    while l < len(totals) and totals[b] == totals[l]:\n                        my_arr.append(x[l])\n                        l += 1\n                    l = b\n                    while l >= 0 and totals[b] == totals[l]:\n                        my_arr.append(x[l])\n                        l -= 1\n            count += 1\n        my_term = min(my_arr)\n        to_add = [int(x ** 0.5) for x in my_term]\n        for i in range(n - 15 - count + 1):\n            print(1, end='')\n        for term in to_add:\n            print(term, end='')\n        for i in range(count - 1):\n            print(9, end='')\n        print('')", "t = int(input())\nfrom math import sqrt\nsqs = set([i * i for i in range(10000)])\n\ndef haszero(n):\n    while n:\n        if n % 10 < 2:\n            return True\n        n //= 10\nsqm1 = [i * i - 1 for i in range(10)]\nhow_many = [None] * 10000\nhow_many[0] = [0, 1]\nfor i in range(10000):\n    if how_many[i] is not None:\n        for j in range(how_many[i][1] % 10, 10):\n            nxt = i + j * j - 1\n            if nxt >= 10000:\n                break\n            nv = [how_many[i][0] + 1, how_many[i][1] * 10 + j]\n            if how_many[nxt] is None or nv[1] <= how_many[nxt][1]:\n                how_many[nxt] = nv\nfor numtest in range(1, t + 1):\n    n = int(input())\n    z = int(sqrt(n + 0.5))\n    zz = z\n    zzz = None\n    while z < zz + 100:\n        if z * z >= n and z * z < n + 10000 and (how_many[z * z - n] is not None) and (how_many[z * z - n][0] <= n):\n            if zzz is None or zzz > how_many[z * z - n]:\n                zzz = how_many[z * z - n]\n        z += 1\n    print('1' * (n - zzz[0]) + str(zzz[1])[1:])", "import math\nfrom itertools import combinations_with_replacement\n\ndef find_SBN():\n    if N in sqSet:\n        return '1' * N\n    ctr = N\n    while ctr >= 0:\n        for num in combinations_with_replacement([4, 9, 16, 25, 36, 49, 64, 81], N - ctr):\n            s = ctr + sum(num)\n            if s in sqSet:\n                return '1' * ctr + ''.join([str(int(math.sqrt(_))) for _ in num])\n        ctr -= 1\n    return '-1'\nT = int(input())\nopList = []\nsqSet = {i * i for i in range(9001)}\nfor x in range(T):\n    N = int(input())\n    opList.append(find_SBN())\nprint('\\n'.join(opList))", "nums = [0, 3, 8, 15, 24, 35, 48, 63, 80]\nextras = [[]]\ncurr = 1\nwhile curr < 4500:\n    poss = []\n    p = 100\n    for x in range(2, 10):\n        t = curr + 1 - x * x\n        if t >= 0:\n            if extras[t] != -1:\n                a = extras[t].copy()\n                a.append(x - 1)\n                if len(a) == p:\n                    a.sort()\n                    if a < poss:\n                        poss = a\n                elif len(a) < p:\n                    p = len(a)\n                    poss = a\n                    poss.sort()\n    if poss == []:\n        extras.append(-1)\n    else:\n        extras.append(poss)\n    curr += 1\n\ndef minroot(n):\n    a = int(n ** 0.5)\n    if a ** 2 == n:\n        return a\n    return a + 1\n\ndef ltoi(lis):\n    res = 0\n    for x in lis:\n        res *= 10\n        res += x\n    return res\n\ndef beauty(n):\n    m = minroot(n)\n    t = -1\n    while m ** 2 - n < 4000:\n        if extras[m ** 2 - n] == -1:\n            m += 1\n        else:\n            if t == -1:\n                t = ltoi(extras[m ** 2 - n])\n            elif ltoi(extras[m ** 2 - n]) < t:\n                t = ltoi(extras[m ** 2 - n])\n            m += 1\n    z = str(t)\n    l = len(z)\n    y = str(int('1' * l) + t)\n    b = '1' * (n - l) + y\n    return b\nt = int(input())\nfor x in range(t):\n    n = int(input())\n    print(beauty(n))"]