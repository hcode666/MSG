["t = int(input())\nfor z in range(t):\n    (d, u, n) = map(float, input().split())\n    default = u * d\n    l = []\n    for g in range(int(n)):\n        (m, p, c) = map(float, input().split())\n        l.append((p * u * m + c) / m)\n    if default < min(l):\n        print(0)\n    else:\n        print(l.index(min(l)) + 1)", "t = int(input())\nfor i in range(t):\n    (d, u, n) = map(float, input().split())\n    default = d * u\n    count = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        k = r * u + c / m\n        if k < default:\n            default = k\n            count = i + 1\n    print(count)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    default = d * u\n    count = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        k = r * u + c / m\n        if k < default:\n            default = k\n            count = i + 1\n    print(count)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    default = d * u\n    count = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        k = r * u + c / m\n        if k < default:\n            default = k\n            count = i + 1\n    print(count)", "a = int(input())\nfor i in range(a):\n    (D, U, P) = list(map(float, input().split()))\n    ans = 0\n    cost = D * U\n    temp = 1\n    for k in range(int(P)):\n        (M, R, C) = list(map(float, input().split()))\n        if cost >= C / M + R * U:\n            cost = C / M + R * U\n            ans = temp\n        temp += 1\n    print(ans)", "import sys\nT = int(input())\nfor i in range(T):\n    testInput = input().split(' ')\n    D = float(testInput[0])\n    U = int(testInput[1])\n    N = int(testInput[2])\n    minAmount = D * U\n    minPlan = 0\n    for i in range(N):\n        testInput = input().split(' ')\n        m = int(testInput[0])\n        r = float(testInput[1])\n        c = int(testInput[2])\n        amount = r * U + c / m\n        if amount < minAmount:\n            minAmount = amount\n            minPlan = i + 1\n    print(minPlan)", "import sys\nT = int(input())\nfor i in range(T):\n    testInput = input().split(' ')\n    D = float(testInput[0])\n    U = int(testInput[1])\n    N = int(testInput[2])\n    minAmount = D * U\n    minPlan = 0\n    for i in range(N):\n        testInput = input().split(' ')\n        m = int(testInput[0])\n        r = float(testInput[1])\n        c = int(testInput[2])\n        amount = r * U + c / m\n        if amount < minAmount:\n            minAmount = amount\n            minPlan = i + 1\n    print(minPlan)", "T = int(input())\nfor x in range(T):\n    (d, u, n) = map(float, input().split())\n    ans = 0\n    mc = u * d\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        cc = u * r + c / m\n        if mc > cc:\n            ans = i + 1\n            mc = cc\n    print(ans)", "import os, sys, io, math\nfrom re import *\nfrom math import *\nfrom array import *\nfrom heapq import *\nfrom bisect import *\nfrom functools import *\nfrom itertools import *\nfrom statistics import *\nfrom collections import *\nI = lambda : [*map(int, sys.stdin.readline().split())]\nIP = lambda : map(float, input().split())\nIS = lambda : input()\nIN = lambda : int(input())\nIF = lambda : float(input())\nfor _ in range(IN()):\n    (d, m, n) = IP()\n    a = d * m\n    idx = 0\n    mn = a\n    for i in range(int(n)):\n        (mt, c, p) = IP()\n        s = c * m + p / mt\n        if s < mn:\n            idx = i + 1\n            mn = s\n    print(idx)", "for i in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    cost = u * d\n    flag = 0\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        c = c / m\n        cost1 = c + r * u\n        if cost1 < cost:\n            cost = cost1\n            flag = 1\n            p = j + 1\n    if flag == 1:\n        print(p)\n    else:\n        print(0)", "for _ in range(int(input())):\n    (s, sa, d) = map(float, input().split())\n    co = s * sa\n    cod = []\n    for i in range(round(d)):\n        (f, g, c) = map(float, input().split())\n        cod.append(c / f + g * sa)\n    bed = min(cod)\n    if bed > co:\n        print(0)\n    else:\n        print(cod.index(bed) + 1)", "for _ in range(int(input())):\n    (D, U, N) = map(float, input().split())\n    cost = D * U\n    cost_array = []\n    for i in range(round(N)):\n        (M, R, C) = map(float, input().split())\n        cost_array.append(C / M + R * U)\n    best_cost = min(cost_array)\n    if best_cost > cost:\n        print(0)\n    else:\n        print(cost_array.index(best_cost) + 1)", "for _ in range(int(input())):\n    (D, U, N) = map(float, input().split())\n    cost = D * U\n    cost_array = []\n    for i in range(round(N)):\n        (M, R, C) = map(float, input().split())\n        cost_array.append(C / M + R * U)\n    best_cost = min(cost_array)\n    if best_cost > cost:\n        print(0)\n    else:\n        print(cost_array.index(best_cost) + 1)", "for _ in range(int(input())):\n    (D, U, N) = map(float, input().split())\n    cost = D * U\n    cost_array = []\n    for i in range(round(N)):\n        (M, R, C) = map(float, input().split())\n        cost_array.append(C / M + R * U)\n    best_cost = min(cost_array)\n    if best_cost > cost:\n        print(0)\n    else:\n        print(cost_array.index(best_cost) + 1)", "for i in range(int(input())):\n    (og_rate, time, plans) = map(float, input().split())\n    og_amt = og_rate * time\n    bestplan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, rate, act_price) = map(float, input().split())\n        monthly_act = act_price / months\n        plan_tamt = time * rate + monthly_act\n        diff = og_amt - plan_tamt\n        if diff > savings:\n            savings = diff\n            bestplan = j + 1\n    print(bestplan)", "for i in range(int(input())):\n    (og_rate, time, plans) = map(float, input().split())\n    og_amt = og_rate * time\n    bestplan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, rate, act_price) = map(float, input().split())\n        monthly_act = act_price / months\n        plan_tamt = time * rate + monthly_act\n        diff = og_amt - plan_tamt\n        if diff > savings:\n            savings = diff\n            bestplan = j + 1\n    print(bestplan)", "for i in range(int(input())):\n    (og_rate, time, plans) = map(float, input().split())\n    og_amt = og_rate * time\n    bestplan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, rate, act_price) = map(float, input().split())\n        monthly_act = act_price / months\n        plan_tamt = time * rate + monthly_act\n        diff = og_amt - plan_tamt\n        if diff > savings:\n            savings = diff\n            bestplan = j + 1\n    print(bestplan)", "for i in range(int(input())):\n    (og_rate, time, plans) = map(float, input().split())\n    og_amt = og_rate * time\n    bestplan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, rate, act_price) = map(float, input().split())\n        monthly_act = act_price / months\n        plan_tamt = time * rate + monthly_act\n        diff = og_amt - plan_tamt\n        if diff > savings:\n            savings = diff\n            bestplan = j + 1\n    print(bestplan)", "for i in range(int(input())):\n    (og_rate, time, plans) = map(float, input().split())\n    og_amt = og_rate * time\n    bestplan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, rate, act_price) = map(float, input().split())\n        monthly_act = act_price / months\n        plan_tamt = time * rate + monthly_act\n        diff = og_amt - plan_tamt\n        if diff > savings:\n            savings = diff\n            bestplan = j + 1\n    print(bestplan)", "for i in range(int(input())):\n    (og_rate, time, plans) = map(float, input().split())\n    og_amt = og_rate * time\n    bestplan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, rate, act_price) = map(float, input().split())\n        monthly_act = act_price / months\n        plan_tamt = time * rate + monthly_act\n        diff = og_amt - plan_tamt\n        if diff > savings:\n            savings = diff\n            bestplan = j + 1\n    print(bestplan)", "for i in range(int(input())):\n    (og_rate, time, plans) = map(float, input().split())\n    og_amt = og_rate * time\n    bestplan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, rate, act_price) = map(float, input().split())\n        monthly_act = act_price / months\n        plan_tamt = time * rate + monthly_act\n        diff = og_amt - plan_tamt\n        if diff > savings:\n            savings = diff\n            bestplan = j + 1\n    print(bestplan)", "for i in range(int(input())):\n    (og_rate, time, plans) = map(float, input().split())\n    og_amt = og_rate * time\n    bestplan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, rate, act_price) = map(float, input().split())\n        monthly_act = act_price / months\n        plan_tamt = time * rate + monthly_act\n        diff = og_amt - plan_tamt\n        if diff > savings:\n            savings = diff\n            bestplan = j + 1\n    print(bestplan)", "tests = int(input())\nfor i in range(tests):\n    (original_price, minutes, plans) = map(float, input().split())\n    original_paid = original_price * minutes\n    plan = 0\n    savings = 0\n    for j in range(int(plans)):\n        (months, per_minute, plan_price) = map(float, input().split())\n        price_per_month = plan_price / months\n        paid_price_with_plan = minutes * per_minute + price_per_month\n        diff = original_paid - paid_price_with_plan\n        if diff > savings:\n            savings = diff\n            plan = j + 1\n    print(plan)", "for _ in range(int(input())):\n    (D, U, N) = map(float, input().split())\n    x = D * U\n    y = 0\n    for i in range(int(N)):\n        (M, R, C) = map(float, input().split())\n        a = M * U * R + C\n        b = M * x\n        if a < b:\n            x = a / M\n            y = i + 1\n    print(y)", "t = int(input())\nwhile t != 0:\n    (d, u, n) = [float(i) for i in input().split()]\n    ans = []\n    count = 0\n    for i in range(int(n)):\n        (m, r, c) = [float(i) for i in input().split()]\n        original = d * u\n        new = c / int(m) + r * u\n        if new < original:\n            ans.append([original - new, i])\n        else:\n            count += 1\n    if count == n:\n        print('0')\n    else:\n        ans.sort(key=lambda x: x[0], reverse=True)\n        print(ans[0][-1] + 1)\n    t -= 1", "for _ in range(int(input())):\n    array = []\n    (d, u, n) = map(float, input().split())\n    for _ in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        temp = c / m + r * u\n        array.append(c / m + r * u)\n    m = min(array)\n    if m < d * u:\n        print(array.index(m) + 1)\n    else:\n        print(0)", "from math import ceil\nout = []\nt = int(input())\nfor i in range(t):\n    l = input().split()\n    d = float(l[0])\n    u = int(l[1])\n    n = int(l[2])\n    a = []\n    maxm = 0\n    for j in range(n):\n        k = input().split()\n        m = int(k[0])\n        r = float(k[1])\n        c = int(k[2])\n        if m > maxm:\n            maxm = m\n        a.append((j + 1, m, r, c))\n    curr = d * u * maxm\n    minp = curr\n    pn = 0\n    for j in a:\n        p = j[2] * u * maxm + j[3] * maxm // j[1]\n        if p < minp:\n            minp = p\n            pn = j[0]\n    out.append(pn)\nfor i in out:\n    print(i)", "from math import ceil\nout = []\nt = int(input())\nfor i in range(t):\n    l = input().split()\n    d = float(l[0])\n    u = int(l[1])\n    n = int(l[2])\n    a = []\n    maxm = 0\n    for j in range(n):\n        k = input().split()\n        m = int(k[0])\n        r = float(k[1])\n        c = int(k[2])\n        if m > maxm:\n            maxm = m\n        a.append((j + 1, m, r, c))\n    curr = d * u * maxm\n    minp = curr\n    pn = 0\n    for j in a:\n        p = j[2] * u * maxm + j[3] * maxm // j[1]\n        if p < minp:\n            minp = p\n            pn = j[0]\n    out.append(pn)\nfor i in out:\n    print(i)", "from math import ceil\nout = []\nt = int(input())\nfor i in range(t):\n    l = input().split()\n    d = float(l[0])\n    u = int(l[1])\n    n = int(l[2])\n    a = []\n    maxm = 0\n    for j in range(n):\n        k = input().split()\n        m = int(k[0])\n        r = float(k[1])\n        c = int(k[2])\n        if m > maxm:\n            maxm = m\n        a.append((j + 1, m, r, c))\n    curr = d * u * maxm\n    minp = curr\n    pn = 0\n    for j in a:\n        p = j[2] * u * maxm + j[3] * maxm / j[1]\n        if p < minp:\n            minp = p\n            pn = j[0]\n    out.append(pn)\nfor i in out:\n    print(i)", "from math import ceil\nout = []\nt = int(input())\nfor i in range(t):\n    l = input().split()\n    d = float(l[0])\n    u = int(l[1])\n    n = int(l[2])\n    a = []\n    maxm = 1\n    for j in range(n):\n        k = input().split()\n        m = int(k[0])\n        r = float(k[1])\n        c = int(k[2])\n        maxm *= m\n        a.append((j + 1, m, r, c))\n    curr = d * u * maxm\n    minp = curr\n    pn = 0\n    for j in a:\n        p = j[2] * u * maxm + j[3] * maxm / j[1]\n        if p < minp:\n            minp = p\n            pn = j[0]\n    out.append(pn)\nfor i in out:\n    print(i)", "for x in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    u = int(u)\n    n = int(n)\n    pl = [d * u]\n    for xx in range(n):\n        (m, r, c) = map(float, input().split())\n        m = int(m)\n        c = int(c)\n        pl += [r * u + c / m]\n    print(pl.index(min(pl)))", "from math import gcd, sqrt, ceil, floor, log10, log2\nfrom heapq import heapify, heappop, heappush, nsmallest, nlargest\nfrom collections import Counter, deque, OrderedDict, defaultdict\nfrom itertools import combinations, permutations, zip_longest\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache, reduce\nimport sys\nimport time\nimport string\nimport operator\nRECURSION_LIMIT = int(10000000.0)\nINT_MAX = float('inf')\nINT_MIN = float('-inf')\nMOD = int(10000000.0) + 9\nNEWLINE = '\\n'\nSPACE = ' '\nsys.setrecursionlimit(RECURSION_LIMIT)\ninp = lambda fn: fn(input())\ninp_vars = lambda fn, delim, convert_to=list: convert_to(map(fn, input().split(delim)))\nenum = lambda itr, start: enumerate(itr, start)\n\ndef toposort(graph, n):\n    degree = [0] * n\n    for node in graph:\n        for adj in graph[node]:\n            degree[adj] += 1\n    bfs_queue = [node for node in range(n) if not degree[node]]\n    for node in bfs_queue:\n        for adj in graph[node]:\n            degree[adj] -= 1\n            if not degree[adj]:\n                bfs_queue.append(adj)\n    return (bfs_queue, degree)\n\ndef dfs(graph, node, visited):\n    visited.add(node)\n    for adj in graph[node]:\n        if adj in visited:\n            continue\n        dfs(graph, adj, visited)\n\ndef seive(n):\n    is_prime = [True] * (n + 1)\n    is_prime[0] = is_prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if is_prime[i]:\n            for j in range(i * i, n + 1, i):\n                is_prime[j] = False\n    return is_prime[n]\n\ndef solve(*args, **kwargs):\n    (d, u, n, arr) = args\n    (curr, plan) = (d * u, 0)\n    for (idx, (validity, rate, cost)) in enum(arr, 1):\n        new = cost / validity + rate * u\n        if new < curr:\n            plan = idx\n            curr = new\n    return plan\n\ndef main(*args, **kwargs):\n    for _ in range(int(input())):\n        arg1 = inp_vars(float, SPACE)\n        arg3 = [inp_vars(float, SPACE) for _ in range(int(arg1[2]))]\n        res = solve(*(*arg1, arg3))\n        if type(res) in {list, tuple, set}:\n            print(*res, sep='\\n')\n        else:\n            print(res)\nmain()", "tests = int(input())\nfor test in range(tests):\n    (D, U, N) = input().split()\n    D = float(D)\n    U = int(U)\n    N = int(N)\n    plans = []\n    plans.append(D * U)\n    for i in range(N):\n        (M, R, C) = input().split()\n        M = int(M)\n        R = float(R)\n        C = int(C)\n        plans.append((R * (U * M) + C) / M)\n    m = min(plans)\n    print(plans.index(m))", "for i in range(int(input())):\n    (d, u, n) = input().split()\n    d = float(d)\n    (u, n) = (int(u), int(n))\n    q = d * u\n    y = q\n    val = 0\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        e = c / m + r * u\n        q = min(q, e)\n        if q < y:\n            val = i + 1\n            y = q\n    print(val)", "for _ in range(int(input())):\n    (d, u, n) = input().split()\n    d = float(d)\n    (u, n) = (int(u), int(n))\n    q = d * u\n    y = q\n    val = 0\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        e = c / m + r * u\n        q = min(q, e)\n        if q < y:\n            val = i + 1\n            y = q\n    print(val)", "def fn(l):\n    return l[1]\nfor _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    l = []\n    for i in range(int(n)):\n        l.append(list(map(float, input().split())))\n    c = d * u\n    x = []\n    for i in l:\n        x.append(i[2] / i[0] + u * i[1])\n    g = [(i, x[i]) for i in range(len(x)) if x[i] <= c]\n    if not len(g):\n        print(0)\n        continue\n    print(min(g, key=fn)[0] + 1)", "def solve():\n    (d, u, n) = map(float, input().split())\n    ans = 0\n    expense = d * u\n    for i in range(1, int(n) + 1):\n        (m, r, c) = map(float, input().split())\n        plan_expense = u * r + c / m\n        if plan_expense < expense:\n            expense = plan_expense\n            ans = i\n    print(ans)\nfor _ in range(int(input())):\n    solve()", "for i in range(int(input())):\n    (d, u, n) = input().split()\n    d = float(d)\n    (u, n) = (int(u), int(n))\n    total = d * u\n    count = 0\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        if r >= d:\n            continue\n        else:\n            val = r * u + c / m\n            if val < total:\n                count = i + 1\n                total = val\n    print(count)", "for i in range(int(input())):\n    (d, u, n) = input().split()\n    d = float(d)\n    (u, n) = (int(u), int(n))\n    total = d * u\n    count = 0\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        if r >= d:\n            continue\n        else:\n            val = r * u + c / m\n            if val < total:\n                count = i + 1\n                total = val\n    print(count)", "for i in range(int(input())):\n    (d, u, n) = input().split()\n    d = float(d)\n    (u, n) = (int(u), int(n))\n    total = d * u\n    count = 0\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        if r >= d:\n            continue\n        else:\n            val = r * u + c / m\n            if val < total:\n                count = i + 1\n                total = val\n    print(count)", "for _ in range(int(input())):\n    (a, b, c) = map(float, input().split())\n    i = 0\n    k = a * b\n    for mm in range(1, int(c) + 1):\n        (a1, a2, a3) = map(float, input().split())\n        cc = a2 * b\n        if k > cc + a3 / a1:\n            i = mm\n            k = cc + a3 / a1\n    print(i)", "for _ in range(int(input())):\n    (a, b, c) = map(float, input().split())\n    i = 0\n    k = a * b\n    for mm in range(1, int(c) + 1):\n        (a1, a2, a3) = map(float, input().split())\n        cc = a2 * b\n        if k > cc + a3 / a1:\n            i = mm\n            k = cc + a3 / a1\n    print(i)", "T = int(input())\nfor _ in range(T):\n    (d, u, n) = map(float, input().split())\n    ans = 0\n    initial = d * u\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        final = (r * u * m + c) / m\n        if final < initial:\n            ans = i + 1\n            initial = final\n    print(ans)", "t = int(input())\nfor tc in range(t):\n    (d, u, n) = map(float, input().split())\n    s = d * u\n    count = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        total = c / m + r * u\n        if total < s:\n            s = total\n            count = i + 1\n    print(count)", "import sys\ninput = sys.stdin.readline\n\ndef rii():\n    return range(int(input().strip()))\n\ndef ii():\n    return int(input().strip())\n\ndef mii():\n    return map(int, input().strip().split(' '))\n\ndef lmii():\n    return list(map(int, input().strip().split(' ')))\n\ndef si():\n    return str(input().strip())\n\ndef solve(*args):\n    (d, u, n, plans) = args\n    current_plan_cost = u * d\n    best = (0, current_plan_cost)\n    for p in enumerate(plans):\n        (m, r, c) = p[1]\n        this_plan_cost = (r * u * m + c) / m\n        if this_plan_cost < best[1]:\n            best = (p[0] + 1, this_plan_cost)\n    return best[0]\n\ndef do_codechef():\n    for t in rii():\n        line = si()\n        (d, u, n) = (fn(x) for (fn, x) in zip([float, int, int], line.split(' ')))\n        plans = list()\n        for _ in range(n):\n            line = si()\n            (a, b, c) = (fn(x) for (fn, x) in zip([int, float, int], line.split(' ')))\n            plans.append((a, b, c))\n        print(solve(d, u, n, plans))\ndo_codechef()\nexit()", "t = int(input())\nfor i in range(t):\n    (d, u, n) = map(float, input().split())\n    s = d * u\n    ans = 0\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        p = u * r + c / m\n        if s > p:\n            ans = j + 1\n            s = p\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (d, u, n) = map(float, input().split())\n    s = d * u\n    ans = 0\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        p = u * r + c / m\n        if s > p:\n            ans = j + 1\n            s = p\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (d, u, n) = map(float, input().split())\n    s = d * u\n    ans = 0\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        p = u * r + c / m\n        if s > p:\n            ans = j + 1\n            s = p\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (d, u, n) = map(float, input().split())\n    s = d * u\n    ans = 0\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        p = u * r + c / m\n        if s > p:\n            ans = j + 1\n            s = p\n    print(ans)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    cost = d * u\n    adcli = []\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        adcost = r * u + c / m\n        adcli.append(adcost)\n    mn = min(adcli)\n    if cost > mn:\n        print(adcli.index(mn) + 1)\n    else:\n        print(0)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    cost = d * u\n    ind = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        adcost = u * r + c / m\n        if adcost < cost:\n            ind = i + 1\n            cost = adcost\n    print(ind)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    cost = d * u\n    ind = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        adcost = u * r + c / m\n        if adcost < cost:\n            ind = i + 1\n            cost = adcost\n    print(ind)", "t = int(input())\nfor i in range(t):\n    (d, u, n) = map(float, input().split())\n    s = d * u\n    ans = 0\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        p = u * r + c / m\n        if s > p:\n            ans = j + 1\n            s = p\n    print(ans)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    de = d * u\n    ans = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        p = u * r + c / m\n        if de > p:\n            ans = i + 1\n            de = p\n    print(ans)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    n = int(n)\n    dr = d * u\n    min1 = dr\n    p = 0\n    for i in range(1, n + 1):\n        (m, r, c) = map(float, input().split())\n        c = int(c)\n        rc = r * u + c / m\n        if rc < min1:\n            min1 = rc\n            p = i\n    print(p)", "t = int(input())\nwhile t != 0:\n    (d, u, n) = map(float, input().split())\n    eco = d * u\n    choice = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        if c / m + u * r < eco:\n            eco = c / m + u * r\n            choice = i + 1\n    print(choice)\n    t = t - 1", "a = int(input())\nfor i in range(a):\n    (d, u, n) = map(float, input().split())\n    b = d * u\n    f = 0\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        e = c / m + r * u\n        if e < b:\n            b = e\n            f = 1 + j\n    print(f)", "for i in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    s = 0\n    a = u * d\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        t = c / m + r * u\n        if t < a:\n            a = t\n            s = 1 + j\n    print(s)", "t = int(input())\nfor _ in range(t):\n    ans = 0\n    (d, u, n) = map(float, input().split())\n    mi = d * u\n    i = 1\n    while i <= n:\n        (m, r, c) = map(float, input().split())\n        temp = c / m + r * u\n        if temp < mi:\n            ans = i\n            mi = temp\n        i += 1\n    print(ans)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    s = 0\n    a = u * d\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        t = c / m + r * u\n        if t < a:\n            a = t\n            s = 1 + i\n    print(s)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    s = 0\n    a = u * d\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        t = c / m + r * u\n        if t < a:\n            a = t\n            s = 1 + i\n    print(s)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    s = 0\n    a = u * d\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        t = c / m + r * u\n        if t < a:\n            a = t\n            s = 1 + i\n    print(s)", "from collections import Counter\nfor _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    n = int(n)\n    m = d * u\n    a = []\n    a.append(m)\n    while n:\n        n -= 1\n        (mn, r, c) = map(float, input().split())\n        x = (r * mn * u + c) / mn\n        a.append(x)\n    mn = min(a)\n    for i in range(len(a)):\n        if a[i] == mn:\n            print(i)\n            break", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    s = d * u\n    count = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        total = c / m + r * u\n        if total < s:\n            s = total\n            count = i + 1\n    print(count)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    val = d * u\n    ans = 0\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        total = r * u + c / m\n        if total < val:\n            val = total\n            ans = i + 1\n    print(ans)", "for _ in range(int(input())):\n    (p, m, n) = map(float, input().split())\n    cost = p * m\n    ans = 0\n    for i in range(int(n)):\n        (month, r, c) = map(float, input().split())\n        newcost = (c + r * m * month) / month\n        if newcost < cost:\n            cost = newcost\n            ans = i + 1\n    print(ans)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    l = []\n    (d, u, n) = map(float, input().split())\n    x = d * u\n    for i in range(0, int(n)):\n        (m, r, c) = map(float, input().split())\n        l.append(r * u + c / m)\n    count = 0\n    for i in range(0, int(n)):\n        if l[i] < x:\n            x = l[i]\n            count = i + 1\n    print(count)", "t = int(input())\nwhile t > 0:\n    (d, u, n) = map(float, input().split())\n    n = int(n)\n    cost = d * u\n    ind = 0\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        if r * u + c / m < cost:\n            cost = r * u + c / m\n            ind = i + 1\n    print(ind)\n    t -= 1", "t = int(input())\nwhile t > 0:\n    (d, u, n) = map(float, input().split())\n    n = int(n)\n    cost = d * u\n    ind = 0\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        if r * u + c / m < cost:\n            cost = r * u + c / m\n            ind = i + 1\n    print(ind)\n    t -= 1", "test = int(input())\nfor _ in range(test):\n    line1 = input()\n    (d, u, n) = line1.split()\n    d = float(d)\n    u = int(u)\n    n = int(n)\n    present = d * u\n    index = 0\n    for i in range(1, n + 1):\n        line2 = input()\n        (m, r, c) = line2.split()\n        m = int(m)\n        r = float(r)\n        c = int(c)\n        new = (c + r * m * u) / m\n        if new < present:\n            present = new\n            index = i\n    print(index)", "t = int(input())\nfor _ in range(t):\n    line1 = input()\n    (d, u, n) = line1.split()\n    d = float(d)\n    u = int(u)\n    n = int(n)\n    present = d * u\n    index = 0\n    for i in range(1, n + 1):\n        line2 = input()\n        (m, r, c) = line2.split()\n        m = int(m)\n        r = float(r)\n        c = int(c)\n        new = (c + r * m * u) / m\n        if new < present:\n            present = new\n            index = i\n    print(index)", "t = int(input())\nfor _ in range(t):\n    line1 = input()\n    (d, u, n) = line1.split()\n    d = float(d)\n    u = int(u)\n    n = int(n)\n    present = d * u\n    index = 0\n    for i in range(1, n + 1):\n        line2 = input()\n        (m, r, c) = line2.split()\n        m = int(m)\n        r = float(r)\n        c = int(c)\n        new = (c + r * m * u) / m\n        if new < present:\n            present = new\n            index = i\n    print(index)", "t = int(input())\nfor i in range(t):\n    (D, U, N) = map(float, input().split())\n    max = D * U\n    N = int(N)\n    index = 0\n    for i in range(N):\n        (M, R, C) = map(float, input().split())\n        price = C / M\n        price1 = U * R + price\n        if price1 < max:\n            max = price1\n            index = i + 1\n    print(index)", "for j in range(int(input())):\n    (d, u, n) = map(str, input().split())\n    d = float(d)\n    u = int(u)\n    n = int(n)\n    a = d * u\n    x = []\n    y = []\n    for i in range(n):\n        (m, r, c) = map(str, input().split())\n        r = float(r)\n        m = int(m)\n        c = int(c)\n        b = r * u + c / m\n        x.append(b)\n        y.append(a)\n    c = min(x)\n    d = 0\n    for i in range(len(x)):\n        if x[i] >= y[i]:\n            d += 1\n    if d == len(x):\n        print(0)\n    else:\n        print(x.index(c) + 1)", "out = []\nfor _ in range(int(input())):\n    lst = input().split()\n    u = int(lst[1])\n    ans = float(lst[0]) * u\n    res = 0\n    for i in range(int(lst[2])):\n        lst = input().split()\n        temp = float(lst[1]) * u + int(lst[2]) / int(lst[0])\n        if ans > temp:\n            res = i + 1\n            ans = temp\n    out.append(res)\nprint(*out, sep='\\n')", "out = []\nfor _ in range(int(input())):\n    lst = input().split()\n    u = int(lst[1])\n    ans = float(lst[0]) * u\n    res = 0\n    for i in range(int(lst[2])):\n        lst = input().split()\n        temp = float(lst[1]) * u + int(lst[2]) / int(lst[0])\n        if ans > temp:\n            res = i + 1\n            ans = temp\n    out.append(res)\nprint(*out, sep='\\n')", "out = []\nfor _ in range(int(input())):\n    (d, u, n) = input().split()\n    u = int(u)\n    ans = float(d) * u\n    res = 0\n    for i in range(int(n)):\n        (m, r, c) = input().split()\n        temp = float(r) * u + int(c) / int(m)\n        if ans > temp:\n            res = i + 1\n            ans = temp\n    out.append(res)\nprint(*out, sep='\\n')", "out = []\nfor _ in range(int(input())):\n    (d, u, n) = input().split()\n    u = int(u)\n    ans = float(d) * u\n    res = 0\n    for i in range(int(n)):\n        (m, r, c) = input().split()\n        m = int(m)\n        r = float(r)\n        c = int(c)\n        if ans > r * u + c / m:\n            res = i + 1\n            ans = r * u + c / m\n    out.append(res)\nprint(*out, sep='\\n')", "out = []\nfor _ in range(int(input())):\n    (d, u, n) = input().split()\n    d = float(d)\n    u = int(u)\n    n = int(n)\n    ans = d * u\n    res = 0\n    for i in range(n):\n        (m, r, c) = input().split()\n        m = int(m)\n        r = float(r)\n        c = int(c)\n        if ans > r * u + c / m:\n            res = i + 1\n            ans = r * u + c / m\n    out.append(res)\nprint(*out, sep='\\n')", "for _ in range(int(input())):\n    (d, u, n) = input().split()\n    d = float(d)\n    u = int(u)\n    n = int(n)\n    ans = d * u\n    res = 0\n    for i in range(n):\n        (m, r, c) = input().split()\n        m = int(m)\n        r = float(r)\n        c = int(c)\n        if ans > r * u + c / m:\n            res = i + 1\n            ans = r * u + c / m\n    print(res)", "for _ in range(int(input())):\n    lst = []\n    choice = 0\n    (d, u, n) = map(float, input().split())\n    check = d * u\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        check1 = c / m + r * u\n        if check > check1:\n            check = check1\n            choice = i + 1\n    print(choice)", "T = int(input())\nfor j in range(T):\n    (D, U, N) = map(float, input().split())\n    N = int(N)\n    mn = D * U\n    index_min = 0\n    for i in range(N):\n        (M, R, C) = map(float, input().split())\n        monthly_price = C / M\n        price = monthly_price + U * R\n        if price < mn:\n            mn = price\n            index_min = i + 1\n    print(index_min)", "for _ in range(int(input())):\n    (D, U, N) = map(float, input().split())\n    N = int(N)\n    mn = D * U\n    index_min = 0\n    for i in range(N):\n        (M, R, C) = map(float, input().split())\n        monthly_price = C / M\n        price = monthly_price + U * R\n        if price < mn:\n            mn = price\n            index_min = i + 1\n    print(index_min)", "for _ in range(int(input())):\n    (default_rate, last_min, n_plans) = map(float, input().split())\n    flag = 0\n    old_expense = default_rate * last_min\n    ind = -12\n    for i in range(int(n_plans)):\n        (monthref, call_rate, cost) = map(float, input().split())\n        expense = last_min * call_rate + cost / monthref\n        if expense < old_expense:\n            ind = i\n            flag = 1\n            old_expense = expense\n    if flag == 0:\n        print('0')\n    else:\n        print(ind + 1)", "for _ in range(int(input())):\n    (a, b, c) = map(float, input().split())\n    ans = 0\n    tam = a * b\n    for i in range(int(c)):\n        (x, y, z) = map(float, input().split())\n        if tam > z / x + b * y:\n            ans = i + 1\n            tam = z / x + b * y\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    str = input()\n    (i_rate, min_call, n) = map(float, str.split())\n    bst = 0\n    ind = 0\n    for i in range(int(n)):\n        str = input()\n        (mon, n_rate, prc) = map(float, str.split())\n        sav = min_call * i_rate - (min_call * n_rate + prc / mon)\n        if sav > bst:\n            bst = sav\n            ind = i + 1\n    print(ind)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    ans = 0\n    default_cost = d * u\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        cost = u * r + c / m\n        if cost < default_cost:\n            ans = i + 1\n            default_cost = cost\n    print(ans)", "for i in range(int(input())):\n    inp = list(map(float, input().split()))\n    c = inp[0]\n    u = inp[1]\n    n = int(inp[2])\n    plans = []\n    ans = 0\n    curr = c * u\n    for j in range(n):\n        plans.append(list(map(float, input().split())))\n    for k in range(n):\n        plans[k] = (plans[k][0] * u * plans[k][1] + plans[k][2]) / plans[k][0]\n    ans = min(plans)\n    an = plans.index(ans)\n    if curr < ans:\n        print(0)\n    else:\n        print(an + 1)", "import sys\nsys.setrecursionlimit(10 ** 5 + 1)\ninf = int(10 ** 20)\nmax_val = inf\nmin_val = -inf\nRW = lambda : sys.stdin.readline().strip()\nRI = lambda : int(RW())\nRMI = lambda : [int(x) for x in sys.stdin.readline().strip().split()]\nRWI = lambda : [x for x in sys.stdin.readline().strip().split()]\nfor _ in range(int(input())):\n    (chgpermin, minutes, nb_plans) = [float(x) for x in input().split()]\n    present_cost = chgpermin * minutes\n    maybe = 0\n    for i in range(int(nb_plans)):\n        (months, calling_rate, activation_cost) = [float(x) for x in input().split()]\n        act_cost = activation_cost / months\n        call_chg = minutes * calling_rate\n        total_cost = call_chg + act_cost\n        if total_cost < present_cost:\n            present_cost = total_cost\n            maybe = i + 1\n    print(maybe)", "for a in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    ans = 0\n    value = 0\n    cheap = d * u\n    n = int(n)\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        value = u * r + c / m\n        if value < cheap:\n            ans = i + 1\n            cheap = value\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (d, u, n) = map(float, input().split())\n    min = d * u\n    ans = 0\n    l = []\n    for j in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        l.append([m, r, c])\n    for j in range(len(l)):\n        (m, r, c) = (l[j][0], l[j][1], l[j][2])\n        cost = u * r + c / m\n        if cost < min:\n            ans = j + 1\n            min = cost\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (d, u, n) = map(float, input().split())\n    index = 0\n    mini = d * u\n    for i in range(int(n)):\n        (m, r, c) = map(float, input().split())\n        m_c = c / m\n        r_u = u * r\n        if m_c + r_u <= mini:\n            mini = m_c + r_u\n            index = i + 1\n    print(index)", "for _ in range(int(input())):\n    (d, u, n) = map(float, input().split())\n    n = int(n)\n    cost = d * u\n    ans = 0\n    for i in range(n):\n        (m, r, c) = map(float, input().split())\n        plan = c / m + r * u\n        if plan < cost:\n            cost = plan\n            ans = i + 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    (a, b, c) = map(float, input().split())\n    minimum = a * b\n    result = 0\n    for j in range(int(c)):\n        (x, y, z) = map(float, input().split())\n        if y * b + z / x < minimum:\n            minimum = y * b + z / x\n            result = j + 1\n    print(result)", "t = int(input())\nfor i in range(t):\n    i1 = input()\n    I = i1.split()\n    rate = float(I[0])\n    minutes = float(I[1])\n    plans = int(I[2])\n    for j in range(plans):\n        j1 = input()\n        J = j1.split()\n        planmonths = int(J[0])\n        planrate = float(J[1])\n        plancost = float(J[2])\n        planexp = planrate * minutes + plancost / planmonths\n        prevexp = rate * minutes\n        if j == 0:\n            a = prevexp\n        if planexp < a:\n            a = planexp\n            b = j\n    if a == prevexp:\n        print(0)\n    else:\n        print(b + 1)"]