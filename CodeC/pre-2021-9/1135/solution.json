["for i in range(int(input())):\n    st = input()\n    s = set()\n    for i in range(len(st)):\n        ct = 0\n        even = 0\n        odd = 0\n        for j in range(i, len(st)):\n            if st[j] == '1':\n                ct += 1\n            elif ct % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            s.add((j - i + 1, even, odd))\n    print(len(s))\n    s.clear()", "for i in range(int(input())):\n    st = input()\n    s = set()\n    for i in range(len(st)):\n        ct = 0\n        even = 0\n        odd = 0\n        for j in range(i, len(st)):\n            if st[j] == '1':\n                ct += 1\n            elif ct % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            s.add((j - i + 1, even, odd))\n    print(len(s))\n    s.clear()", "for _ in range(int(input())):\n    st = input()\n    s = set()\n    for i in range(len(st)):\n        ct = 0\n        even = 0\n        odd = 0\n        for j in range(i, len(st)):\n            if st[j] == '1':\n                ct += 1\n            elif ct % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            s.add((j - i + 1, even, odd))\n    print(len(s))\n    s.clear()", "for _ in range(int(input())):\n    S = input()\n    N = len(S)\n    substring = set()\n    for i in range(N):\n        cnt = 0\n        odd = 0\n        even = 0\n        for j in range(i, N):\n            if S[j] == '1':\n                cnt += 1\n            elif cnt % 2:\n                odd += 1\n            else:\n                even += 1\n            substring.add((j - i + 1, odd, even))\n    print(len(substring))", "for _ in range(int(input())):\n    S = input()\n    N = len(S)\n    substring = set()\n    for i in range(N):\n        cnt = 0\n        odd = 0\n        even = 0\n        for j in range(i, N):\n            if S[j] == '1':\n                cnt += 1\n            elif cnt % 2:\n                odd += 1\n            else:\n                even += 1\n            substring.add((j - i + 1, odd, even))\n    print(len(substring))", "for _ in range(int(input())):\n    S = input()\n    N = len(S)\n    substring = set()\n    for i in range(N):\n        cnt = 0\n        odd = 0\n        even = 0\n        for j in range(i, N):\n            if S[j] == '1':\n                cnt += 1\n            elif cnt % 2:\n                odd += 1\n            else:\n                even += 1\n            substring.add((j - i + 1, odd, even))\n    print(len(substring))", "for _ in range(int(input())):\n    s = input()\n    ans = set()\n    for i in range(len(s)):\n        ones = 0\n        count = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                ones += 1\n            if ones & 1:\n                count += 1\n            ans.add((j - i + 1, ones, count))\n    print(len(ans))", "for _ in range(int(input())):\n    st = input()\n    s = set()\n    for i in range(len(st)):\n        ct = 0\n        e = 0\n        o = 0\n        for j in range(i, len(st)):\n            if st[j] == '1':\n                ct += 1\n            elif ct % 2 == 0:\n                e += 1\n            else:\n                o += 1\n            s.add((j - i + 1, e, o))\n    print(len(s))\n    s.clear()", "for _ in range(int(input())):\n    st = input()\n    s = set()\n    for i in range(len(st)):\n        ct = 0\n        even = 0\n        odd = 0\n        for j in range(i, len(st)):\n            if st[j] == '1':\n                ct += 1\n            elif ct % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            s.add((j - i + 1, even, odd))\n    print(len(s))\n    s.clear()", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ms = set()\n    for i in range(n):\n        flag = 0\n        ocnt = 0\n        ecnt = 0\n        c = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                c = c + 1\n                flag = 1 - flag\n            elif flag == 1:\n                ocnt = ocnt + 1\n            else:\n                ecnt = ecnt + 1\n            ms.add((c, (ocnt, ecnt)))\n    print(len(ms))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ms = set()\n    for i in range(n):\n        flag = 0\n        ocnt = 0\n        ecnt = 0\n        c = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                c = c + 1\n                flag = 1 - flag\n            elif flag == 1:\n                ocnt = ocnt + 1\n            else:\n                ecnt = ecnt + 1\n            ms.add((c, (ocnt, ecnt)))\n    print(len(ms))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ans = set()\n    for i in range(n):\n        cnt = 0\n        even = 0\n        odd = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            len_j = j - i + 1\n            ans.add((len_j, even, odd))\n    print(len(ans))", "t = int(input())\nfor tc in range(t):\n    s = input()\n    n = len(s)\n    ms = set()\n    for i in range(n):\n        flag = 0\n        ocnt = 0\n        ecnt = 0\n        cnt = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt = cnt + 1\n                flag = 1 - flag\n            elif flag == 1:\n                ocnt = ocnt + 1\n            else:\n                ecnt = ecnt + 1\n            ms.add((cnt, (ocnt, ecnt)))\n    print(len(ms))", "import sys\ninput = sys.stdin.readline\nri = lambda : int(input())\nrl = lambda : list(map(int, input().split()))\nrs = lambda : input().strip('\\r\\n')\nfor _ in range(ri()):\n    s = rs()\n    n = len(s)\n    classes = set()\n    for i in range(n):\n        (o, z) = (0, 0)\n        ct = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                o += 1\n            else:\n                z += 1\n            if o % 2:\n                ct += 1\n            classes.add((o, z, ct))\n    print(len(classes))", "import sys\n\ndef mati(n):\n    return [intl() for i in range(n)]\niinp = lambda : int(sys.stdin.readline())\ninp = lambda : sys.stdin.readline().strip()\nstrl = lambda : list(inp().strip().split(' '))\nintl = lambda : list(map(int, inp().split(' ')))\nmint = lambda : map(int, inp().split())\nflol = lambda : list(map(float, inp().split(' ')))\nflush = lambda : sys.stdout.flush()\n\ndef sll(s, size, non, n01, l, so1, se, n):\n    sew = set()\n    sew.add(((non, n01), (so1, se)))\n    for i in range(size, n):\n        if s[i - size] == '1':\n            l.pop(0)\n            (se, so1) = (so1, se)\n            non -= 1\n        else:\n            n01 -= 1\n            l[0] -= 1\n            se -= 1\n        if s[i] == '1':\n            non += 1\n            l.append(0)\n        else:\n            n01 += 1\n            l[-1] += 1\n            if len(l) & 1:\n                se += 1\n            else:\n                so1 += 1\n        sew.add(((non, n01), (so1, se)))\n    return len(sew)\n\ndef substr(s, n, le):\n    l = []\n    tm = non = n01 = so1 = se = cur = 0\n    for i in range(n):\n        if s[i] == '0':\n            if not cur & 1:\n                se += 1\n            else:\n                so1 += 1\n            tm += 1\n            n01 += 1\n        else:\n            l.append(tm)\n            tm = 0\n            cur += 1\n            non += 1\n    l.append(tm)\n    return sll(s, n, non, n01, l, so1, se, le)\nfor _ in range(iinp()):\n    s = inp()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        ans += substr(s, i + 1, n)\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    eqset = set()\n    for i in range(0, n):\n        (cnt, even, odd) = (0, 0, 0)\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2:\n                odd += 1\n            else:\n                even += 1\n            l = j - i + 1\n            eqset.add((l, even, odd))\n    print(len(eqset))", "from sys import stdin, stdout\nimport math\nfrom itertools import permutations, combinations\nfrom collections import defaultdict\nfrom collections import Counter\nfrom bisect import bisect_left\nimport sys\nfrom queue import PriorityQueue\nimport operator as op\nfrom functools import reduce\nimport re\nmod = 1000000007\niinp = lambda : int(sys.stdin.readline())\ninp = lambda : sys.stdin.readline().strip()\nstrl = lambda : list(inp().strip().split(' '))\nintl = lambda : list(map(int, inp().split(' ')))\nmint = lambda : map(int, inp().split())\nflol = lambda : list(map(float, inp().split(' ')))\nflush = lambda : sys.stdout.flush()\n\ndef myCode():\n    s = inp()\n    st = set()\n    for i in range(len(s)):\n        cnt = 0\n        even = 0\n        odd = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2:\n                odd += 1\n            else:\n                even += 1\n            length = j - i + 1\n            st.add(tuple((length, odd, even)))\n    print(len(st))\n\ndef main():\n    for t in range(iinp()):\n        myCode()\nmain()", "t = int(input())\nfor _ in range(t):\n    s = input()\n    temp = set()\n    for i in range(len(s)):\n        (cnt, even, odd) = (0, 0, 0)\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            temp.add(tuple([j - i + 1, even, odd]))\n    print(len(temp))", "try:\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        li = list(s)\n        ans = set()\n        for i in range(len(s)):\n            even = 0\n            odd = 0\n            count = 0\n            for j in range(i, len(s)):\n                if li[j] == '1':\n                    count += 1\n                elif count % 2:\n                    odd += 1\n                else:\n                    even += 1\n                len1 = j - i + 1\n                anst = str(len1) + ' ' + str(even) + ' ' + str(odd)\n                ans.add(anst)\n        print(len(ans))\nexcept:\n    pass", "try:\n    T = int(input())\n    for i in range(T):\n        s = input()\n        n = len(s)\n        C = set()\n        for i in range(n):\n            even = 0\n            odd = 0\n            count = 0\n            for j in range(i, n):\n                if s[j] == '1':\n                    count = count + 1\n                elif count % 2 == 0:\n                    odd = odd + 1\n                else:\n                    even = even + 1\n                leng = j - i + 1\n                tup = (leng, even, odd)\n                C.add(tup)\n        print(len(C))\nexcept:\n    pass", "for _ in range(int(input())):\n    s = input()\n    ss = set()\n    for i in range(len(s)):\n        even = 0\n        odd = 0\n        cnt = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2 == 0:\n                odd += 1\n            else:\n                even += 1\n            a = (cnt, odd, even)\n            ss.add(a)\n    print(len(ss))", "for _ in range(int(input())):\n    s = input()\n    sd = set()\n    for i in range(len(s)):\n        count1 = 0\n        count2 = 0\n        count3 = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                count1 += 1\n            elif count1 & 1:\n                count2 += 1\n            else:\n                count3 += 1\n            sd.add(tuple([count3, count2, count1]))\n    print(len(sd))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ms = set()\n    for i in range(n):\n        flag = 0\n        ocnt = 0\n        ecnt = 0\n        cnt = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt = cnt + 1\n                flag = 1 - flag\n            elif flag == 1:\n                ocnt = ocnt + 1\n            else:\n                ecnt = ecnt + 1\n            ms.add((cnt, (ocnt, ecnt)))\n    print(len(ms))", "n = int(input())\nfor a in range(n):\n    s = input()\n    length = len(s)\n    classes = {}\n    for i in range(length):\n        fi = ''\n        sec = ''\n        thi = ''\n        fou = ''\n        e = ''\n        f = ''\n        k = 0\n        l = 0\n        c = 0\n        for j in range(i, length):\n            ch = s[j]\n            if ch == '0':\n                if k == l:\n                    fi += '0'\n                else:\n                    thi += '0'\n            else:\n                c += 1\n                if c % 2 != 0:\n                    if c == 1:\n                        sec += '1'\n                    else:\n                        fou += '1'\n                    k += 1\n                else:\n                    l += 1\n                    fou += '1'\n            f = fi + sec + thi + fou\n            classes[f] = 1\n    print(len(classes))", "for t in range(int(input())):\n    s = input()\n    n = len(s)\n    ar = set()\n    for i in range(n):\n        cnt = 0\n        ev = 0\n        od = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt = cnt + 1\n            elif cnt % 2 == 0:\n                ev = ev + 1\n            else:\n                od = od + 1\n            l = j - i + 1\n            ar.add((l, od, ev))\n    print(len(ar))\n    del ar\n    del s", "import sys\nfor _ in range(int(input())):\n    str = input()\n    count = 0\n    x = set()\n    length = len(str)\n\n    def find(str):\n        one = -1\n        zero = -1\n        for i in range(len(str) - 1, -1, -1):\n            if str[i] == '1':\n                one = i\n                for j in range(one - 1, -1, -1):\n                    if str[j] == '1':\n                        zero = j + 1\n                        break\n                break\n        return (zero, one)\n    for i in range(length):\n        found1 = 0\n        ind1 = 0\n        found0 = 0\n        ind0 = 0\n        j = i + 1\n        new_str = str[i]\n        x.add(new_str)\n        if new_str[0] == '1':\n            found1 += 1\n        for j in range(i + 1, length):\n            if str[j] == '1':\n                found1 += 1\n                if found1 > 1:\n                    str1 = new_str[:ind0]\n                    str2 = new_str[ind0:]\n                    str2 += '1'\n                    str2 = str2[::-1]\n                    new_str = str1 + str2\n                    x.add(new_str)\n                    ind0 += 1\n                else:\n                    new_str += '1'\n                    x.add(new_str)\n            elif str[j] == '0':\n                new_str += '0'\n                x.add(new_str)\n    print(len(x))", "for _ in range(int(input())):\n    s = input()\n    s = list(s)\n    n = len(s)\n    ans = set()\n    for i in range(n):\n        even = cnt = odd = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2:\n                odd += 1\n            else:\n                even += 1\n            l = j - i + 1\n            ans.add((l, even, odd))\n    print(len(ans))", "for _ in range(int(input())):\n    s = str(input())\n    n = len(s)\n    a = set()\n    for i in range(n):\n        (cnt, odd, even) = (0, 0, 0)\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n            l = j - i + 1\n            a.add((l, even, odd))\n    print(len(a))", "for _ in range(int(input())):\n    s = str(input())\n    n = len(s)\n    a = set()\n    for i in range(n):\n        (cnt, odd, even) = (0, 0, 0)\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n            l = j - i + 1\n            a.add((l, even, odd))\n    print(len(a))", "for _ in range(int(input())):\n    s = str(input())\n    n = len(s)\n    a = set()\n    for i in range(n):\n        (cnt, odd, even) = (0, 0, 0)\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n            l = j - i + 1\n            a.add((l, even, odd))\n    print(len(a))", "try:\n    t = int(input())\n    for _ in range(t):\n        s = input()\n        my_set = set()\n        for i in range(len(s)):\n            cnt = 0\n            even = 0\n            odd = 0\n            for j in range(i, len(s)):\n                if s[j] == '1':\n                    cnt += 1\n                elif cnt % 2 == 0:\n                    even += 1\n                else:\n                    odd += 1\n                length = j - i + 1\n                my_set.add((length, even, odd))\n        print(len(my_set))\nexcept:\n    pass", "import sys\nimport math\nimport bisect\nfrom math import floor, sqrt, log\nfrom collections import defaultdict\nscanf = lambda n: [int(i) for i in sys.stdin.readline().split()][:n]\ncin = lambda : map(int, sys.stdin.readline().split())\nrint = lambda : int(sys.stdin.readline())\nrstring = lambda : input()\ncout = lambda tt, x: sys.stdout.write('Case #' + str(tt) + ': ' + str(x) + '\\n')\nabserror = lambda ans, upto: '{:.{}f}'.format(ans, upto)\nsys.setrecursionlimit(100000)\nmod = 1000000007\n\ndef gcd(a, b):\n    while b:\n        (a, b) = (b, a % b)\n    return a\n\ndef mod_inverse(a, n):\n    N = n\n    xx = 0\n    yy = 1\n    y = 0\n    x = 1\n    while n > 0:\n        q = a // n\n        t = n\n        n = a % n\n        a = t\n        t = xx\n        xx = x - q * xx\n        x = t\n        t = yy\n        yy = y - q * yy\n        y = t\n    x %= N\n    x += N\n    x %= N\n    return x\n\ndef sieve(n):\n    prime = [True for i in range(n + 1)]\n    p = 2\n    while p * p <= n:\n        if prime[p] == True:\n            for i in range(p * 2, n + 1, p):\n                prime[i] = False\n        p += 1\n    prime[0] = False\n    prime[1] = False\n    return prime\n\ndef solve():\n    string = rstring()\n    n = len(string)\n    ans = set()\n    for i in range(n):\n        (lenght, even, odd) = (0, 0, 0)\n        ones = 0\n        for j in range(i, n):\n            lenght += 1\n            if string[j] == '1':\n                ones += 1\n            elif ones % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            ans.add((lenght, odd, even))\n    print(len(ans))\nttestcases = rint()\nfor testcase in range(1, ttestcases + 1):\n    solve()", "t = int(input())\nfor i in range(t):\n    s = input()\n    n = len(s)\n    mlist = []\n    for j in range(n):\n        (cnt, even, odd) = (0, 0, 0)\n        for k in range(j, n):\n            length = k - j + 1\n            if s[k] == '1':\n                cnt += 1\n            elif cnt % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            mlist.append((length, even, odd))\n    print(len(set(mlist)))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    k = set()\n    for i in range(n):\n        c = 0\n        even = 0\n        odd = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                c += 1\n            elif c % 2 == 0:\n                odd += 1\n            else:\n                even += 1\n            h = j - i + 1\n            k.add((h, even, odd))\n    print(len(k))", "T = int(input())\nfor _ in range(T):\n    s = input()\n    n = len(s)\n    ans_set = set()\n    for i in range(n):\n        (cnt, ev, od) = (0, 0, 0)\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            else:\n                if cnt % 2:\n                    od += 1\n                if cnt % 2 == 0:\n                    ev += 1\n            ans_set.add(tuple([j - i + 1, ev, od]))\n    print(len(ans_set))", "for testCase in range(int(input())):\n    string = input()\n    n = len(string)\n    triplets = []\n    for i in range(n):\n        (count0, sum0alt, oddpos) = (0, 0, True)\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n                if oddpos:\n                    sum0alt += 1\n            else:\n                oddpos = not oddpos\n            triplets.append((sum0alt, count0, j - i + 1 - count0))\n    print(len(set(triplets)))", "for testCase in range(int(input())):\n    string = input()\n    n = len(string)\n    triplets = []\n    for i in range(n):\n        (count0, sum0alt, oddpos) = (0, 0, True)\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n                if oddpos:\n                    sum0alt += 1\n            else:\n                oddpos = not oddpos\n            triplets.append((sum0alt, count0, j - i + 1 - count0))\n    print(len(set(triplets)))", "def solve(s):\n    st = set()\n    for i in range(len(s)):\n        (count, even, odd) = (0, 0, 0)\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                count += 1\n            elif count % 2:\n                odd += 1\n            else:\n                even += 1\n            ln = j - i + 1\n            st.add((ln, even, odd))\n    return len(st)\nfor t in range(int(input())):\n    s = input()\n    print(solve(s))", "from collections import defaultdict\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    if s[0] == '0':\n        countofone = [0]\n    else:\n        countofone = [1]\n    for i in range(1, len(s)):\n        if s[i] == '0':\n            countofone.append(countofone[i - 1])\n        else:\n            countofone.append(countofone[i - 1] + 1)\n    ans = 1\n    if countofone[-1] == n:\n        ans += 1\n    elif countofone[-1] == 0:\n        ans += 1\n    else:\n        ans += 2\n    maps = {}\n    for i in range(n):\n        maps[i + 1] = defaultdict(list)\n    table = [[0 for i in range(n)] for j in range(n)]\n    noofones = 0\n    for i in range(n):\n        noofones = 0\n        for j in range(i + 1, n):\n            if s[j] == '0':\n                if i == 0:\n                    noofones = countofone[j]\n                else:\n                    noofones = countofone[j] - countofone[i - 1]\n                if noofones % 2 == 1:\n                    table[i][j] = table[i][j - 1] + 1\n                else:\n                    table[i][j] += table[i][j - 1]\n            else:\n                table[i][j] += table[i][j - 1]\n    start = 0\n    end = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            start = i\n            end = j\n            length = end - start + 1\n            if i == 0:\n                one = countofone[j]\n            else:\n                one = countofone[j] - countofone[i - 1]\n            tmp = table[i][j]\n            maps[length][one].append(tmp)\n    for i in range(n - 1):\n        for j in maps[i + 1]:\n            maps[i + 1][j] = list(set(maps[i + 1][j]))\n            ans += len(maps[i + 1][j])\n    print(ans)", "from collections import defaultdict\nfor _ in range(int(input())):\n    s = input()\n    n = len(s)\n    if s[0] == '0':\n        countofone = [0]\n    else:\n        countofone = [1]\n    for i in range(1, len(s)):\n        if s[i] == '0':\n            countofone.append(countofone[i - 1])\n        else:\n            countofone.append(countofone[i - 1] + 1)\n    ans = 1\n    if countofone[-1] == n:\n        ans += 1\n    elif countofone[-1] == 0:\n        ans += 1\n    else:\n        ans += 2\n    maps = {}\n    for i in range(n):\n        maps[i + 1] = defaultdict(list)\n    table = [[0 for i in range(n)] for j in range(n)]\n    noofones = 0\n    for i in range(n):\n        noofones = 0\n        for j in range(i + 1, n):\n            if s[j] == '0':\n                if i == 0:\n                    noofones = countofone[j]\n                else:\n                    noofones = countofone[j] - countofone[i - 1]\n                if noofones % 2 == 1:\n                    table[i][j] = table[i][j - 1] + 1\n                else:\n                    table[i][j] += table[i][j - 1]\n            else:\n                table[i][j] += table[i][j - 1]\n    start = 0\n    end = 0\n    for i in range(n - 1):\n        for j in range(i + 1, n):\n            start = i\n            end = j\n            length = end - start + 1\n            if i == 0:\n                one = countofone[j]\n            else:\n                one = countofone[j] - countofone[i - 1]\n            tmp = table[i][j]\n            maps[length][one].append(tmp)\n    for i in range(n - 1):\n        for j in maps[i + 1]:\n            maps[i + 1][j] = list(set(maps[i + 1][j]))\n            ans += len(maps[i + 1][j])\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    d = set()\n    for i in range(n):\n        (count, even, odd) = (0, 0, 0)\n        for j in range(i, n):\n            if s[j] == '1':\n                count += 1\n            elif count % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n            l = j - i + 1\n            d.add((l, even, odd))\n    print(len(d))", "for _ in range(int(input())):\n    s = input()\n    l = []\n    ans = 0\n    n = len(s)\n    eq = set()\n    for i in range(n):\n        c = 0\n        e = 0\n        o = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                c += 1\n            elif c % 2 == 0:\n                e += 1\n            else:\n                o += 1\n            ls = j - i + 1\n            eq.add((ls, (e, o)))\n    print(len(eq))", "import sys\n\ndef solve(bits):\n    soln = 0\n    bids = set()\n    for i in range(0, len(bits)):\n        left_ones = 0\n        even_zeros = 0\n        odd_zeros = 0\n        for j in range(i, len(bits)):\n            b = bits[j]\n            if b == 1:\n                left_ones += 1\n            elif b == 0:\n                if left_ones % 2:\n                    odd_zeros += 1\n                else:\n                    even_zeros += 1\n            length = i - j + 1\n            bids.add((length, even_zeros, odd_zeros))\n    return len(bids)\n\ndef main():\n    test_cases = int(sys.stdin.readline())\n    for _ in range(test_cases):\n        bits = tuple((int(i) for i in sys.stdin.readline().strip()))\n        print(solve(bits))\nmain()", "t = int(input())\nfor _ in range(t):\n    a = list(input())\n    s = set()\n    l = len(a)\n    ss = []\n    for i in range(l):\n        ss.append([])\n        k = (1, int(a[i]), int(a[i]))\n        ss[0].append(k)\n        s.add(k)\n    for i in range(2, l + 1):\n        for j in range(l - i + 1):\n            a1 = i\n            b = ss[i - 2][j][1] + int(a[j + i - 1])\n            c = ss[i - 2][j][2]\n            c += b % 2\n            s.add((a1, b, c))\n            ss[i - 1].append((a1, b, c))\n    print(len(s))", "import sys, collections, math, itertools, random\nINF = sys.maxsize\n\ndef get_ints():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef get_array():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\nmod = 1000000007\n\ndef slide(s, size, no, nz, l, so, se, n):\n    sew = set()\n    arr = []\n    sew.add(((no, nz), (so, se)))\n    for i in range(size, n):\n        if s[i - size] == '1':\n            del l[0]\n            t = se\n            se = so\n            so = t\n            no -= 1\n        else:\n            nz -= 1\n            l[0] -= 1\n            se -= 1\n        if s[i] == '1':\n            no += 1\n            l.append(0)\n        else:\n            nz += 1\n            l[-1] += 1\n            if len(l) % 2 == 1:\n                se += 1\n            else:\n                so += 1\n        sew.add(((no, nz), (so, se)))\n    return len(sew)\n\ndef subsstring(s, n, len):\n    l = []\n    rt = 0\n    no = 0\n    nz = 0\n    so = 0\n    se = 0\n    cur = 0\n    for i in range(n):\n        if s[i] == '0':\n            if cur % 2 == 0:\n                se += 1\n            else:\n                so += 1\n            rt += 1\n            nz += 1\n        else:\n            l.append(rt)\n            rt = 0\n            cur += 1\n            no += 1\n    l.append(rt)\n    return slide(s, n, no, nz, l, so, se, len)\nfor _ in range(int(input())):\n    s = input()\n    ans = 0\n    for i in range(len(s)):\n        ans += subsstring(s, i + 1, len(s))\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    parametre = set()\n    for i in range(len(s)):\n        (length, even, odd) = (0, 0, 0)\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                length += 1\n            elif length % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            parametre.add((j - i + 1, even, odd))\n    print(len(parametre))", "import sys\nfor _ in range(int(input())):\n    str = input()\n    count = 0\n    x = set()\n    length = len(str)\n\n    def find(str):\n        one = -1\n        zero = -1\n        for i in range(len(str) - 1, -1, -1):\n            if str[i] == '1':\n                one = i\n                for j in range(one - 1, -1, -1):\n                    if str[j] == '1':\n                        zero = j + 1\n                        break\n                break\n        return (zero, one)\n    for i in range(length):\n        found1 = 0\n        ind1 = 0\n        found0 = 0\n        ind0 = 0\n        j = i + 1\n        new_str = str[i]\n        x.add(new_str)\n        if new_str[0] == '1':\n            found1 += 1\n        for j in range(i + 1, length):\n            if str[j] == '1':\n                found1 += 1\n                if found1 > 1:\n                    str1 = new_str[:ind0]\n                    str2 = new_str[ind0:]\n                    str2 += '1'\n                    str2 = str2[::-1]\n                    new_str = str1 + str2\n                    x.add(new_str)\n                    ind0 += 1\n                else:\n                    new_str += '1'\n                    x.add(new_str)\n            elif str[j] == '0':\n                new_str += '0'\n                x.add(new_str)\n    print(len(x))", "import math\nt = int(input())\nwhile t > 0:\n    ans = list()\n    t -= 1\n    s = input().strip()\n    n = len(s)\n    for i in range(0, n):\n        e = 0\n        o = 0\n        c = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                c += 1\n            elif c & 1 == 0:\n                e += 1\n            else:\n                o += 1\n            t1 = (j - i + 1, o, e)\n            ans.append(t1)\n    print(len(set(ans)))", "import sys\nimport math\nfrom math import *\nfrom collections import Counter, defaultdict, deque\nfrom bisect import bisect_left\nimport random\nlip = lambda : list(map(int, input().split()))\nip = lambda : int(input())\nsip = lambda : input().split()\nmod = 10 ** 9 + 7\n\ndef main():\n    s = input()\n    dp = set()\n    n = len(s)\n    ans = 0\n    for i in range(n):\n        cnt = 0\n        odd = 0\n        even = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt & 1:\n                odd += 1\n            else:\n                even += 1\n            t = (j - i + 1, even, odd)\n            if t not in dp:\n                ans += 1\n                dp.add(t)\n    print(ans)\nfor i in range(ip()):\n    main()", "test = int(input())\nfor sdfas in range(test):\n    s = input()\n    n = len(s)\n    myset = set()\n    for l in range(n):\n        length = 0\n        ones = 0\n        odd = 0\n        for r in range(l + 1, n + 1):\n            length += 1\n            if s[r - 1] == '1':\n                ones += 1\n            elif ones % 2:\n                odd += 1\n            myset.add((length, ones, odd))\n    print(len(myset))", "import itertools\nimport math\nt = int(input())\nfor _ in range(t):\n    s = input()\n    distinct = set()\n    for i in range(len(s)):\n        cnt1 = 0\n        evens = 0\n        odds = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                cnt1 += 1\n            elif cnt1 % 2 == 1:\n                odds += 1\n            else:\n                evens += 1\n            distinct.add((j + 1 - i, evens, odds))\n    print(len(distinct))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    res = set()\n    tot = 0\n    for i in range(n):\n        cnt = odd = even = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            res.add((j - i + 1, even, odd))\n    print(len(res))", "from itertools import combinations\nt = int(input())\nfor _ in range(t):\n    s = input()\n    ans = []\n    for i in range(len(s)):\n        count = 0\n        odd = 0\n        even = 0\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                count += 1\n            elif count % 2 == 1:\n                odd += 1\n            else:\n                even += 1\n            l = j - i + 1\n            ans.append((l, even, odd))\n    print(len(set(ans)))", "t = int(input())\nwhile t:\n    t -= 1\n    s = input()\n    myset = set()\n    n = len(s)\n    for i in range(n):\n        (count, even, odd) = (0, 0, 0)\n        for j in range(i, n):\n            if s[j] == '1':\n                count += 1\n            elif count & 1:\n                odd += 1\n            else:\n                even += 1\n            l = j - i + 1\n            myset.add((l, odd, even))\n    print(len(myset))", "from collections import Counter\nx = set()\n\ndef subString(s, n):\n    for i in range(n):\n        (n1, even, odd) = (0, 0, 0)\n        for j in range(i, n):\n            n1 += s[j] == '1'\n            if n1 % 2 == 0:\n                even += s[j] == '0'\n            else:\n                odd += s[j] == '0'\n            x.add((n1, (odd, even)))\nfor _ in range(int(input())):\n    n = input()\n    subString(n, len(n))\n    print(len(x))\n    x.clear()", "for t in range(int(input())):\n    s = input()\n    eq_class = set()\n    for i in range(len(s)):\n        (ct, ev, od) = (0, 0, 0)\n        for j in range(i, len(s)):\n            if s[j] == '1':\n                ct += 1\n            elif ct % 2:\n                od += 1\n            else:\n                ev += 1\n            length = j - i + 1\n            eq_class.add((length, ev, od))\n    print(len(eq_class))", "t = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    set_ = set()\n    for i in range(n):\n        (cnt, even, odd) = (0, 0, 0)\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt += 1\n            elif cnt % 2:\n                odd += 1\n            else:\n                even += 1\n            length = j - i + 1\n            set_.add((length, even, odd))\n    print(len(set_))", "for _ in range(int(input())):\n    x = input()\n    eq = set()\n    for i in range(0, len(x)):\n        c = e = o = 0\n        j = i\n        while j < len(x):\n            ll = []\n            if x[j] == '1':\n                c += 1\n            elif c % 2:\n                o += 1\n            else:\n                e += 1\n            j += 1\n            ll.append(j - i + 1)\n            ll.append(e)\n            ll.append(o)\n            eq.add(tuple(ll))\n    print(len(eq))", "for _ in range(int(input())):\n    x = input()\n    eq = set()\n    for i in range(0, len(x)):\n        c = e = o = 0\n        j = i\n        while j < len(x):\n            ll = []\n            if x[j] == '1':\n                c += 1\n            elif c % 2:\n                o += 1\n            else:\n                e += 1\n            le = j - i + 1\n            j += 1\n            ll.append(le)\n            ll.append(e)\n            ll.append(o)\n            eq.add(tuple(ll))\n    print(len(eq))", "def main():\n    T = int(input())\n    for _ in range(T):\n        S = input()\n        triplets = set()\n        for i in range(len(S)):\n            X = S[i]\n            no_ones = 1 if S[i] == '1' else 0\n            sumSub = int(S[i])\n            countI = 0\n            if sumSub % 2 == 1:\n                countI = 1\n            triplets.add((len(X), no_ones, countI))\n            for j in range(i + 1, len(S)):\n                X += S[j]\n                if S[j] == '1':\n                    no_ones += 1\n                sumSub += int(S[j])\n                if sumSub % 2 == 1:\n                    countI += 1\n                triplets.add((len(X), no_ones, countI))\n        print(len(triplets))\nmain()", "for _ in range(int(input())):\n    sg = input().strip()\n    l = len(sg)\n    cnt = 0\n    st = set()\n    for i in range(l):\n        evens = 0\n        odds = 0\n        ones = 0\n        for j in range(i, l):\n            if sg[j] == '1':\n                ones += 1\n            elif ones % 2 == 0:\n                evens += 1\n            else:\n                odds += 1\n            lth = j - i + 1\n            st.add((lth, odds, evens))\n    print(len(st))", "def solve(s):\n    classes = set()\n    for i in range(len(s)):\n        counts = {0: 0, 1: 0}\n        phase = False\n        for j in range(i, len(s)):\n            if s[j] == '0':\n                counts[phase] += 1\n            elif s[j] == '1':\n                phase = not phase\n            classes.add((counts[0], counts[1], i - j))\n    return len(classes)\nfor _ in range(int(input())):\n    print(solve(input()))", "from sys import stdin, stdout\nfor _ in range(int(input())):\n    string = input()\n    n = len(string)\n    triplets = []\n    for i in range(n):\n        (count0, sum0alt, oddpos) = (0, 0, True)\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n                if oddpos:\n                    sum0alt += 1\n            else:\n                oddpos = not oddpos\n            triplets.append((sum0alt, count0, j - i + 1 - count0))\n    print(len(set(triplets)))", "import sys\nfor _ in range(int(input())):\n    str = input()\n    count = 0\n    x = set()\n    length = len(str)\n\n    def find(str):\n        one = -1\n        zero = -1\n        for i in range(len(str) - 1, -1, -1):\n            if str[i] == '1':\n                one = i\n                for j in range(one - 1, -1, -1):\n                    if str[j] == '1':\n                        zero = j + 1\n                        break\n                break\n        return (zero, one)\n    for i in range(length):\n        found1 = 0\n        ind1 = 0\n        found0 = 0\n        ind0 = 0\n        j = i + 1\n        new_str = str[i]\n        x.add(new_str)\n        if new_str[0] == '1':\n            found1 += 1\n        for j in range(i + 1, length):\n            if str[j] == '1':\n                found1 += 1\n                if found1 > 1:\n                    str1 = new_str[:ind0]\n                    str2 = new_str[ind0:]\n                    str2 += '1'\n                    str2 = str2[::-1]\n                    new_str = str1 + str2\n                    x.add(new_str)\n                    ind0 += 1\n                else:\n                    new_str += '1'\n                    x.add(new_str)\n            elif str[j] == '0':\n                new_str += '0'\n                x.add(new_str)\n    print(len(x))", "import sys\nfor _ in range(int(input())):\n    str = input()\n    count = 0\n    x = set()\n    length = len(str)\n\n    def find(str):\n        one = -1\n        zero = -1\n        for i in range(len(str) - 1, -1, -1):\n            if str[i] == '1':\n                one = i\n                for j in range(one - 1, -1, -1):\n                    if str[j] == '1':\n                        zero = j + 1\n                        break\n                break\n        return (zero, one)\n    for i in range(length):\n        found1 = 0\n        ind1 = 0\n        found0 = 0\n        ind0 = 0\n        j = i + 1\n        new_str = str[i]\n        x.add(new_str)\n        if new_str[0] == '1':\n            found1 += 1\n        for j in range(i + 1, length):\n            if str[j] == '1':\n                found1 += 1\n                if found1 > 1:\n                    str1 = new_str[:ind0]\n                    str2 = new_str[ind0:]\n                    str2 += '1'\n                    str2 = str2[::-1]\n                    new_str = str1 + str2\n                    x.add(new_str)\n                    ind0 += 1\n                else:\n                    new_str += '1'\n                    x.add(new_str)\n            elif str[j] == '0':\n                new_str += '0'\n                x.add(new_str)\n    print(len(x))", "import sys\nfor _ in range(int(input())):\n    str = input()\n    count = 0\n    x = set()\n    length = len(str)\n\n    def find(str):\n        one = -1\n        zero = -1\n        for i in range(len(str) - 1, -1, -1):\n            if str[i] == '1':\n                one = i\n                for j in range(one - 1, -1, -1):\n                    if str[j] == '1':\n                        zero = j + 1\n                        break\n                break\n        return (zero, one)\n    for i in range(length):\n        found1 = 0\n        ind1 = 0\n        found0 = 0\n        ind0 = 0\n        j = i + 1\n        new_str = str[i]\n        x.add(new_str)\n        if new_str[0] == '1':\n            found1 += 1\n        for j in range(i + 1, length):\n            if str[j] == '1':\n                found1 += 1\n                if found1 > 1:\n                    str1 = new_str[:ind0]\n                    str2 = new_str[ind0:]\n                    str2 += '1'\n                    str2 = str2[::-1]\n                    new_str = str1 + str2\n                    x.add(new_str)\n                    ind0 += 1\n                else:\n                    new_str += '1'\n                    x.add(new_str)\n            elif str[j] == '0':\n                new_str += '0'\n                x.add(new_str)\n    print(len(x))", "n = int(input())\nfor a in range(n):\n    s = input()\n    length = len(s)\n    classes = {}\n    for i in range(length):\n        fi = ''\n        sec = ''\n        thi = ''\n        fou = ''\n        e = ''\n        f = ''\n        k = 0\n        l = 0\n        c = 0\n        for j in range(i, length):\n            ch = s[j]\n            if ch == '0':\n                if k == l:\n                    fi += '0'\n                else:\n                    thi += '0'\n            else:\n                c += 1\n                if c % 2 != 0:\n                    if c == 1:\n                        sec += '1'\n                    else:\n                        fou += '1'\n                    k += 1\n                else:\n                    l += 1\n                    fou += '1'\n            f = fi + sec + thi + fou\n            classes[f] = 1\n    print(len(classes))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ms = set()\n    for i in range(n):\n        flag = 0\n        ocnt = 0\n        ecnt = 0\n        cnt = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt = cnt + 1\n                flag = 1 - flag\n            elif flag == 1:\n                ocnt = ocnt + 1\n            else:\n                ecnt = ecnt + 1\n            ms.add((cnt, (ocnt, ecnt)))\n    print(len(ms))", "from sys import stdin\nfrom collections import defaultdict as D\n\ndef func(Str, lenOfStr, d):\n    (c, iz) = (0, -1)\n    for i in range(lenOfStr):\n        if Str[i] == '1':\n            if iz != -1:\n                c += 1\n        elif iz == -1:\n            iz = i\n        if iz != -1 and c == 2:\n            new = Str[iz:i + 1]\n            new = new[::-1]\n            Str = Str[:iz] + new + Str[i + 1:]\n            iz = Str.index('0')\n            c = Str[iz + 1:i + 1].count('1')\n        d[Str[:i + 1]] = 1\n\ndef main():\n    for _ in range(int(input())):\n        s = input()\n        n = len(s)\n        d = D(lambda : 0)\n        d[s[-1]] = 1\n        temp = s[-1]\n        for i in range(n - 2, -1, -1):\n            temp = s[i] + temp\n            func(temp, n - i, d)\n        print(len(d))\nmain()", "from sys import stdin\nfrom collections import defaultdict as D\n\ndef func(Str, lenOfStr, d):\n    (c, iz) = (0, -1)\n    for i in range(lenOfStr):\n        if Str[i] == '1':\n            if iz != -1:\n                c += 1\n        elif iz == -1:\n            iz = i\n        if iz != -1 and c == 2:\n            new = Str[iz:i + 1]\n            new = new[::-1]\n            Str = Str[:iz] + new + Str[i + 1:]\n            iz = Str.index('0')\n            c = Str[iz + 1:i + 1].count('1')\n        d[Str[:i + 1]] = 1\n\ndef main():\n    for _ in range(int(input())):\n        s = input()\n        n = len(s)\n        d = D(lambda : 0)\n        for i in range(n):\n            func(s[i:], n - i, d)\n        print(len(d))\nmain()", "def findAns(st, n, length):\n\n    def slide(st, size, d, c, lis, b, a, n):\n        ste = set()\n        ste.add(((d, c), (b, a)))\n        for i in range(size, n):\n            if st[i - size] == '1':\n                lis.pop(0)\n                t = a\n                a = b\n                b = t\n                d -= 1\n            else:\n                c -= 1\n                lis[0] -= 1\n                a -= 1\n            if st[i] == '1':\n                d += 1\n                lis.append(0)\n            else:\n                c += 1\n                lis[len(lis) - 1] += 1\n                if len(lis) % 2 == 1:\n                    a += 1\n                else:\n                    b += 1\n            ste.add(((d, c), (b, a)))\n        return len(ste)\n    a = 0\n    b = 0\n    rt = 0\n    c = 0\n    lis = []\n    cur = 0\n    d = 0\n    for i in range(n):\n        if st[i] == '0':\n            if cur % 2 == 0:\n                a += 1\n            else:\n                b += 1\n            rt += 1\n            c += 1\n        else:\n            lis.append(rt)\n            rt = 0\n            cur += 1\n            d += 1\n    lis.append(rt)\n    return slide(st, n, d, c, lis, b, a, length)\n\ndef solve(st):\n    ans = 0\n    for i in range(len(st)):\n        ans += findAns(st, i + 1, len(st))\n    print(ans)\nfor t in range(int(input())):\n    st = input()\n    solve(st)", "def check_krle(g=9):\n    a = 5 * 6\n    b = a / 5\n    c = b - 9\n    e = c * 12\n    return 500 * e\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    acount = 0\n    st = []\n    for i in range(n):\n        st.append(set())\n    faltu = check_krle()\n    for i in range(0, n):\n        curr = ''\n        (f, b) = (0, 0)\n        for j in range(i, n):\n            s_temp = curr + s[j]\n            if s[j] == '0':\n                b = 0\n                curr = s_temp\n                st[j - i].add(curr)\n                continue\n            if f == j - i:\n                curr = s_temp\n                f += 1\n                b += 1\n                st[j - i].add(curr)\n                continue\n            else:\n                b += 1\n                new_str = s_temp[f:j - i + 1]\n                ones = new_str.count('1')\n                if ones % 2 == 0:\n                    new_temp = s_temp[:f] + new_str[::-1]\n                    f += b\n                    b = 0\n                    s_temp = new_temp\n            curr = s_temp\n            st[j - i].add(curr)\n    for i in st:\n        acount += len(i)\n    print(acount)", "t = int(input())\nfor i in range(t):\n    st = input()\n    ln = len(st)\n    subset = set()\n    for i in range(1, ln + 1):\n        z = 0\n        o = 0\n        to = 0\n        (seven, sodd) = (0, 0)\n        l = []\n        ret = 0\n        for j in range(i):\n            if st[j] == '1':\n                o += 1\n                l.append(ret)\n                ret = 0\n            else:\n                if o % 2 == 0:\n                    seven += 1\n                else:\n                    sodd += 1\n                z += 1\n                ret += 1\n        l.append(ret)\n        subset.add(((z, o), (seven, sodd)))\n        for j in range(i, ln):\n            if st[j - i] == '1':\n                l.pop(0)\n                o -= 1\n                (seven, sodd) = (sodd, seven)\n            else:\n                z -= 1\n                l[0] = -1\n                seven -= 1\n            if st[j] == '1':\n                o += 1\n                l.append(0)\n            else:\n                l[-1] += 1\n                if len(l) % 2 == 1:\n                    seven += 1\n                else:\n                    sodd += 1\n                z += 1\n            subset.add(((z, o), (seven, sodd)))\n    print(len(subset))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    ms = set()\n    for i in range(n):\n        flag = 0\n        ocnt = 0\n        ecnt = 0\n        cnt = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                cnt = cnt + 1\n                flag = 1 - flag\n            elif flag == 1:\n                ocnt = ocnt + 1\n            else:\n                ecnt = ecnt + 1\n            ms.add((cnt, (ocnt, ecnt)))\n    print(len(ms))", "t = int(input())\nwhile t:\n    s = input()\n    leng = len(s)\n    set1 = {}\n    for i in range(leng):\n        a = ''\n        b = ''\n        c = ''\n        d = ''\n        e = ''\n        f = ''\n        k = 0\n        l = 0\n        count = 0\n        for j in range(i, leng):\n            ch = s[j]\n            if ch == '0':\n                if k == l:\n                    a += '0'\n                else:\n                    c += '0'\n            else:\n                count += 1\n                if count % 2 != 0:\n                    if count == 1:\n                        b += '1'\n                    else:\n                        d += '1'\n                    k += 1\n                else:\n                    l += 1\n                    d += '1'\n            f = a + b + c + d\n            set1[f] = 1\n    print(len(set1))\n    t -= 1", "from sys import stdin, stdout\nfor _ in range(int(input())):\n    string = input()\n    n = len(string)\n    triplets = []\n    for i in range(n):\n        (count0, sum0alt, oddpos) = (0, 0, True)\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n                if oddpos:\n                    sum0alt += 1\n            else:\n                oddpos = not oddpos\n            triplets.append((sum0alt, count0, j - i + 1 - count0))\n    print(len(set(triplets)))", "for _ in range(int(input())):\n    string = input()\n    n = len(string)\n    triplets = []\n    for i in range(n):\n        (count0, sum0alt, oddpos) = (0, 0, True)\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n                if oddpos:\n                    sum0alt += 1\n            else:\n                oddpos = not oddpos\n            triplets.append((sum0alt, count0, j - i + 1 - count0))\n    print(len(set(triplets)))", "def fun():\n    stringu = input()\n    setum = set()\n    for i in range(len(stringu)):\n        ap = ''\n        imh = ''\n        newz = ''\n        lun = ''\n        mn1 = 0\n        mn2 = 0\n        c = 0\n        for j in range(i, len(stringu)):\n            ch = stringu[j]\n            bw = ''\n            if ch == '0':\n                if mn1 == mn2:\n                    ap += '0'\n                else:\n                    newz = newz + '0'\n            if ch == '1':\n                c += 1\n                if c % 2 != 0:\n                    if c == 1:\n                        imh += '1'\n                    else:\n                        lun += '1'\n                    mn1 += 1\n                else:\n                    mn2 += 1\n                    lun += '1'\n            answer = ap + imh + newz + lun\n            setum.add(answer)\n    return len(setum)\nT = int(input())\nwhile T > 0:\n    print(fun())\n    T -= 1", "for _ in range(int(input())):\n    string = input()\n    n = len(string)\n    triplets = []\n    for i in range(n):\n        (count0, sum0alt, oddpos) = (0, 0, True)\n        for j in range(i, n):\n            if string[j] == '0':\n                count0 += 1\n                if oddpos:\n                    sum0alt += 1\n            else:\n                oddpos = not oddpos\n            triplets.append((sum0alt, count0, j - i + 1 - count0))\n    print(len(set(triplets)))", "t = int(input())\nfor i in range(t):\n    s = input()\n    result = 0\n    for k in range(0, len(s)):\n        s1 = 0\n        s2 = 0\n        th1 = 0\n        th = 0\n        even = 0\n        odd = 0\n        list1 = []\n        list1.clear()\n        n = k + 1\n        n1 = n\n        for l in range(0, n1):\n            if s[l] != '1':\n                if th % 2 == 0:\n                    even = even + 1\n                    s1 = s1 + 1\n                    s2 = s2 + 1\n                else:\n                    s1 = s1 + 1\n                    s2 = s2 + 1\n                    odd = odd + 1\n            else:\n                list1.append(s1)\n                s1 = s2\n                s1 = 0\n                th = th + s1\n                th1 = th1 + s1\n                th = th + 1\n                th1 = th1 + 1\n        list1.append(s1)\n        list2 = set()\n        list2.add(((th1, s2), (odd, even)))\n        size = k + 1\n        n = len(s)\n        for j in range(size, n):\n            if s[j - size] == '0':\n                s2 = s2 - 1\n                list1[0] = list1[0] - 1\n                even = even - 1\n            else:\n                x = even\n                y = odd\n                x = x ^ y\n                y = x ^ y\n                x = x ^ y\n                odd = y\n                even = x\n                th1 = th1 - 1\n                list1.pop(0)\n            if s[j] != '0':\n                th1 = th1 + 1\n                list1.append(0)\n            else:\n                s2 = s2 + 1\n                list1[len(list1) - 1] = list1[len(list1) - 1] + 1\n                if len(list1) % 2 != 1:\n                    odd = odd + 1\n                else:\n                    even = even + 1\n            list2.add(((th1, s2), (odd, even)))\n        result = result + len(list2)\n    print(result)", "try:\n    from collections import defaultdict\n\n    def leastindex(s, cache1, cache2):\n        chk = True\n        zero1 = 0\n        zero2 = 0\n        for i in range(len(s)):\n            if chk and s[i] == '0':\n                zero1 += 1\n            elif chk:\n                chk = False\n            elif s[i] == '1':\n                chk = True\n            else:\n                zero2 += 1\n            cache1.append(zero1)\n            cache2.append(zero2)\n        return\n    t = int(input())\n    for _ in range(t):\n        c = defaultdict(lambda : set())\n        string = input()\n        cache1 = []\n        cache2 = []\n        leastindex(string, cache1, cache2)\n        for i in range(len(string)):\n            if i > 0:\n                if string[i - 1] == '0':\n                    for j in range(i, len(cache1)):\n                        cache1[j] -= 1\n                else:\n                    temp = cache1\n                    cache1 = cache2\n                    cache2 = temp\n            for j in range(i, len(cache1)):\n                length = j + 1 - i\n                ele1 = cache1[j]\n                ele2 = cache2[j]\n                c[length].add((ele1, ele2))\n        ans = 0\n        for i in c:\n            ans += len(c[i])\n        print(ans)\nexcept EOFError:\n    pass", "for _ in range(int(input())):\n    st = input().strip()\n    ls = len(st)\n    combs = set()\n    for i in range(0, ls):\n        idx = -1\n        fst = -1\n        for j in range(i, ls):\n            if st[j] == '0':\n                if idx == -1:\n                    idx = j\n            elif idx != -1:\n                if fst == -1:\n                    fst = j\n                else:\n                    fst = idx + j - fst\n                    idx += 1\n                    if idx == fst:\n                        idx += 1\n                        fst = -1\n            combs.add((j - i + 1, idx - i if idx >= i else -1, fst - i if fst >= i else -1))\n    print(len(combs))", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    s = input()\n    le = len(s)\n    d = dd(int)\n    ans = 0\n    for i in range(0, le):\n        prevone = 0\n        x = 0\n        for j in range(i, le):\n            if s[j] == '0' and prevone % 2 == 0:\n                x += 1\n            if s[j] == '1':\n                prevone += 1\n            if d[prevone, x, j - i + 1] != 1:\n                ans += 1\n                d[prevone, x, j - i + 1] = 1\n    print(ans)", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    s = input()\n    le = len(s)\n    d = dd(int)\n    ans = 0\n    for i in range(0, le):\n        prevone = 0\n        x = 0\n        for j in range(i, le):\n            if s[j] == '0' and prevone % 2 == 0:\n                x += 1\n            if s[j] == '1':\n                prevone += 1\n            if d[prevone, x, j - i + 1] != 1:\n                ans += 1\n                d[prevone, x, j - i + 1] = 1\n    print(ans)", "def slide(string, size, no, nz, l, so, se, n):\n    final_solve = set()\n    final_solve.add(((no, nz), (so, se)))\n    for i in range(size, n):\n        if string[i - size] == '1':\n            l = l[1:]\n            (se, so) = (so, se)\n            no -= 1\n        else:\n            nz -= 1\n            l[0] -= 1\n            se -= 1\n        if string[i] == '1':\n            no += 1\n            l.append(0)\n        else:\n            nz += 1\n            l[-1] += 1\n            if len(l) % 2 == 1:\n                se += 1\n            else:\n                so += 1\n        final_solve.add(((no, nz), (so, se)))\n    return len(final_solve)\n\ndef substring(s, n, full_len):\n    l = list()\n    (rt, no, nz, so, se, cur) = (0, 0, 0, 0, 0, 0)\n    for i in range(n):\n        if s[i] == '0':\n            if cur % 2 == 0:\n                se += 1\n            else:\n                so += 1\n            rt += 1\n            nz += 1\n        else:\n            l.append(rt)\n            rt = 0\n            cur += 1\n            no += 1\n    l.append(rt)\n    return slide(s, n, no, nz, l, so, se, full_len)\nfor _ in range(int(input())):\n    s = input()\n    ans = 0\n    n = len(s)\n    for i in range(n):\n        ans += substring(s, i + 1, n)\n    print(ans)", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    eqcl = set()\n    for l in range(n):\n        zeros = [0, 0]\n        parity = 0\n        for r in range(l, n):\n            if s[r] == '0':\n                zeros[parity] += 1\n            else:\n                parity = 1 - parity\n            eqcl.add((zeros[0], zeros[1], r - l))\n    print(len(eqcl))", "for _ in range(int(input())):\n    s = input()\n    n = len(s)\n    eqcl = set()\n    for l in range(n):\n        zeros = [0, 0]\n        ones = 0\n        parity = 0\n        for r in range(l, n):\n            if s[r] == '0':\n                zeros[parity] += 1\n            else:\n                ones += 1\n                parity = 1 - parity\n            eqcl.add((zeros[0], zeros[1], ones))\n    print(len(eqcl))", "import sys\nfrom math import gcd, ceil, sqrt, ceil\nfrom math import gcd, ceil, floor, sqrt, copysign, factorial, fmod, fsum, degrees\nfrom math import expm1, exp, log, log2, acos, asin, cos, tan, sin, pi, e, tau, inf, nan, atan2\nINF = float('inf')\nMOD = 998244353\nmod = 10 ** 9 + 7\nfrom collections import Counter, defaultdict as df\nfrom functools import reduce\n\ndef counter(l):\n    return dict(Counter(l))\n\ndef printm(l):\n    for i in range(len(l)):\n        print(l[i])\n\ndef P(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, ceil(sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\nimport math\n\ndef lcm(a, b):\n    return int(a * b / gcd(a, b))\n\ndef so(x):\n    return {k: v for (k, v) in sorted(x.items(), key=lambda item: item[1])}\n\ndef rev(l):\n    return list(reversed(l))\n\ndef ini():\n    return int(sys.stdin.readline())\n\ndef inp():\n    return map(int, sys.stdin.readline().strip().split())\n\ndef li():\n    return list(map(int, sys.stdin.readline().strip().split()))\n\ndef input():\n    return sys.stdin.readline().strip()\n\ndef inputm(n, m):\n    return [input() for i in range(n)]\n\ndef d(x1, y1, x2, y2):\n    return abs(x1 - x2) + abs(y1 - y2)\n\ndef solve():\n    Jaiparshuram = input()\n    n = len(Jaiparshuram)\n    s = set()\n    count = 0\n    c4 = 0\n    for i in range(n):\n        (c1, c2, c3) = (0, 0, 0)\n        for j in range(i, n):\n            if Jaiparshuram[j] == '1':\n                c1 += 1\n            if Jaiparshuram[j] == '0' and 1 ^ c1 & 1:\n                c2 += 1\n            elif Jaiparshuram[j] == '0' and c1 & 1:\n                c3 += 1\n            else:\n                c4 += 1\n            s.add((c1, c2, c3))\n    count = len(s)\n    print(count)\nfor i in range(ini()):\n    solve()", "t = int(input())\nfor test in range(t):\n    s = input()\n    n = len(s)\n    ans = set()\n    for i in range(n):\n        count_1 = 0\n        count_0 = 0\n        for j in range(i, n):\n            l = j - i + 1\n            if s[j] == '1':\n                count_1 += 1\n            elif s[j] == '0' and count_1 % 2 != 0:\n                count_0 = count_0 + 1\n            ans.add((l, count_0, count_1))\n    print(len(ans))", "import sys\nimport math\nfrom math import *\nfrom collections import Counter, defaultdict, deque\nfrom bisect import bisect_left\nlip = lambda : list(map(int, input().split()))\nip = lambda : int(input())\nsip = lambda : input().split()\nmod = 10 ** 9 + 7\n\ndef main():\n    s = input()\n    n = len(s)\n    dp = defaultdict(lambda : set())\n    visitor = dict()\n    pt = dict()\n    ans = 0\n    for i in range(n):\n        t = ''\n        prev = 0\n        ctr = 0\n        for j in range(i, n):\n            if s[j] == '1':\n                ctr += 1\n            t += s[j]\n            if t[prev] == '1':\n                prev += 1\n                ctr -= 1\n                if ctr < 0:\n                    ctr = 0\n            pt[t] = (ctr, prev)\n            if t in dp[j - i + 1]:\n                if t in visitor:\n                    t = visitor[t]\n                    (ctr, prev) = pt[t]\n                continue\n            elif ctr == 2:\n                ctr = 1\n                dp[j - i + 1].add(t)\n                visitor[t] = t[:prev] + t[prev:][::-1]\n                pt[t] = (ctr, prev)\n                t = visitor[t]\n                prev += 1\n                pt[t] = (ctr, prev)\n            if prev < len(t) and t[prev] == '1':\n                prev += 1\n                ctr -= 1\n                if ctr < 0:\n                    ctr = 0\n            if t not in dp[j - i + 1]:\n                dp[j - i + 1].add(t)\n                ans += 1\n    print(ans)\nfor i in range(ip()):\n    main()", "import io, sys, atexit, os\nimport math as ma\nfrom sys import exit\nfrom decimal import Decimal as dec\nfrom itertools import permutations\nfrom itertools import combinations\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef num():\n    return map(int, sys.stdin.readline().split())\n\ndef nu():\n    return int(input())\n\ndef find_gcd(x, y):\n    while y:\n        (x, y) = (y, x % y)\n    return x\n\ndef lcm(x, y):\n    gg = find_gcd(x, y)\n    return x * y // gg\nmm = 1000000007\n\ndef solve():\n    t = nu()\n    for tt in range(t):\n        s = input()\n        n = len(s)\n        ss = set()\n        for i in range(n):\n            c1 = 0\n            pe = 0\n            for j in range(i, n):\n                if s[j] == '1':\n                    c1 += 1\n                if c1 % 2 == 0:\n                    pe += 1\n                ss.add((j - i + 1, c1, pe))\n        print(len(ss))\nsolve()", "t = int(input())\nwhile t > 0:\n    s = input()\n    n = len(s)\n    answer = 0\n    mset = set()\n    for i in range(1, n + 1):\n        no = 0\n        sum1 = 0\n        c = 0\n        j = 1\n        while i - j >= 0:\n            vec = []\n            k = i - j\n            if s[k] == '1':\n                no = no + 1\n                c = c + 1\n            if c % 2 != 0 and s[k] != '1':\n                sum1 = sum1 + 1\n            vec.append(no)\n            vec.append(sum1)\n            vec.append(j)\n            o = tuple(vec)\n            mset.add(o)\n            j = j + 1\n    t = t - 1\n    print(len(mset))", "def countfrontones(temp):\n    return 5\n    num = 0\n    n = len(temp)\n    while num < n and temp[num] == '1':\n        num += 1\n        continue\n    return num\nt = int(input())\nfor _ in range(t):\n    s = input()\n    n = len(s)\n    arr = []\n    for i in range(n):\n        arr.append(set())\n    for i in range(n):\n        prev = ''\n        prevs = 0\n        preve = 0\n        for l in range(1, n - i + 1):\n            temp = prev + s[i + l - 1]\n            ans = temp\n            if s[i + l - 1] == '0':\n                preve = 0\n                arr[l - 1].add(ans)\n                prev = ans\n                continue\n            if l == 1 or prevs == l - 1:\n                prevs += 1\n            preve += 1\n            num = prevs\n            neww = temp[num:l]\n            ones = neww.count('1')\n            if ones % 2 == 0:\n                neww = temp[:num] + neww[::-1]\n                if preve > 0:\n                    if prevs == l:\n                        prevs = num\n                    else:\n                        prevs += preve\n                        preve = 0\n                    ans = neww\n            arr[l - 1].add(ans)\n            prev = ans\n    ans = 0\n    for i in arr:\n        ans += len(i)\n    print(ans)", "for i in range(int(input())):\n    st = input()\n    s = set()\n    for i in range(len(st)):\n        ct = 0\n        even = 0\n        odd = 0\n        for j in range(i, len(st)):\n            if st[j] == '1':\n                ct += 1\n            elif ct % 2 == 0:\n                even += 1\n            else:\n                odd += 1\n            s.add((j - i + 1, even, odd))\n    print(len(s))\n    s.clear()"]