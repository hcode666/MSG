["p = 10 ** 9 + 7\n\ndef power(a, n):\n    res = 1\n    while n:\n        if n % 2 == 1:\n            res = res * a % p\n            n -= 1\n        else:\n            a = a * a % p\n            n = n // 2\n    return res\nn = 10 ** 5 + 1\nf = [0] * n\nf[0] = f[1] = 1\nfor i in range(2, n):\n    f[i] = i * f[i - 1] % p\n\ndef c(n, k):\n    res = f[n]\n    res = res * pow(f[k], p - 2, p) % p\n    res = res * pow(f[n - k], p - 2, p) % p\n    return res % p\nfor _ in range(int(input())):\n    n = int(input())\n    max1 = 0\n    l = []\n    for i in map(int, input().split()):\n        max1 = max(i, max1)\n        l.append(i)\n    x = l.count(max1)\n    if x % 2 == 1:\n        ans = pow(2, n, p)\n    else:\n        temp = (pow(2, x, p) - c(x, x // 2) + p) % p\n        ans = pow(2, n - x, p) * temp % p\n    print(ans)", "p = 10 ** 9 + 7\n\ndef power(a, n):\n    res = 1\n    while n:\n        if n % 2 == 1:\n            res = res * a % p\n            n -= 1\n        else:\n            a = a * a % p\n            n = n // 2\n    return res\nn = 10 ** 5 + 1\nf = [0] * n\nf[0] = f[1] = 1\nfor i in range(2, n):\n    f[i] = i * f[i - 1] % p\n\ndef c(n, k):\n    res = f[n]\n    res = res * pow(f[k], p - 2, p) % p\n    res = res * pow(f[n - k], p - 2, p) % p\n    return res % p\nfor _ in range(int(input())):\n    n = int(input())\n    max1 = 0\n    l = []\n    for i in map(int, input().split()):\n        max1 = max(i, max1)\n        l.append(i)\n    x = l.count(max1)\n    if x % 2 == 1:\n        ans = pow(2, n, p)\n    else:\n        temp = (pow(2, x, p) - c(x, x // 2) + p) % p\n        ans = pow(2, n - x, p) * temp % p\n    print(ans)", "p = 10 ** 9 + 7\n\ndef power(a, n):\n    res = 1\n    while n:\n        if n % 2 == 1:\n            res = res * a % p\n            n -= 1\n        else:\n            a = a * a % p\n            n = n // 2\n    return res\nn = 10 ** 5 + 1\nf = [0] * n\nf[0] = f[1] = 1\nfor i in range(2, n):\n    f[i] = i * f[i - 1] % p\n\ndef c(n, k):\n    res = f[n]\n    res = res * pow(f[k], p - 2, p) % p\n    res = res * pow(f[n - k], p - 2, p) % p\n    return res % p\nfor _ in range(int(input())):\n    n = int(input())\n    max1 = 0\n    l = []\n    for i in map(int, input().split()):\n        max1 = max(i, max1)\n        l.append(i)\n    x = l.count(max1)\n    if x % 2 == 1:\n        ans = pow(2, n, p)\n    else:\n        temp = (pow(2, x, p) - c(x, x // 2) + p) % p\n        ans = pow(2, n - x, p) * temp % p\n    print(ans)", "from collections import Counter\nmod = 1000000007\n\ndef fast_pow(base, power):\n    ans = 1\n    while power > 0:\n        if power & 1:\n            ans = ans * base % mod\n        power >>= 1\n        base = base * base % mod\n    return ans\n\ndef combinations(a, b):\n    x = y = 1\n    for i in range(b):\n        x = x * (a - i) % mod\n    for i in range(1, b + 1):\n        y = y * i % mod\n    return x * fast_pow(y, mod - 2) % mod\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    cnt = Counter(c)\n    m = cnt[max(c)]\n    if m & 1:\n        print(fast_pow(2, n))\n    else:\n        a = combinations(m, m // 2)\n        b = fast_pow(2, n - m)\n        c = fast_pow(2, m)\n        print((c - a) % mod * b % mod)", "mod = 10 ** 9 + 7\nfact = {0: 1}\nfor i in range(1, 10 ** 5 + 1):\n    fact[i] = i * fact[i - 1]\n    fact[i] %= mod\n\ndef C(n, r):\n    den = fact[r] * fact[n - r] % mod\n    den_inv = pow(den, mod - 2, mod)\n    return fact[n] * den_inv % mod\nfor case in range(int(input())):\n    N = int(input())\n    Cards = list(map(int, input().split()))\n    m = max(Cards)\n    f = Cards.count(m)\n    if f % 2:\n        print(pow(2, N, mod))\n    else:\n        ans = pow(2, N, mod)\n        ways = C(f, f // 2) * pow(2, N - f, mod) % mod\n        ans = (ans - ways) % mod\n        print(ans)", "p = 10 ** 9 + 7\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\nfor i in range(int(input())):\n    n = int(input())\n    l = [int(c) for c in input().split()]\n    m = max(l)\n    x = l.count(m)\n    if x % 2 == 1:\n        print(power(2, n, p) % p)\n    else:\n        t = power(2, n, p) % p - power(2, n - x, p) % p * ncr(x, x // 2, p) % p % p\n        if t < 0:\n            t = (t + p) % p\n        print(t % p)", "mod = 10 ** 9 + 7\nt = int(input())\nfor x in range(t):\n    count = 0\n    combo = 0\n    combo1 = 0\n    n = int(input())\n    values = [int(s) for s in input().split()]\n    maximum = max(values)\n    combination = pow(2, n, mod)\n    for i in values:\n        if i == maximum:\n            count += 1\n    if count % 2 == 1:\n        print(combination)\n    else:\n        combo = pow(2, n - count, mod)\n        p1 = 1\n        p2 = 1\n        for l in range(count // 2 + 1, count + 1):\n            p1 = p1 * l % mod\n        for j in range(1, count // 2 + 1):\n            p2 = p2 * j\n        p2 = pow(p2, mod - 2, mod)\n        factorial = p2 * p1 % mod\n        combo2 = combo * factorial % mod\n        print((combination - combo2) % mod)", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "prime = 10 ** 9 + 7\nfor tc in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total = pow(2, n, prime)\n    m = max(arr)\n    k = arr.count(m)\n    if k % 2 == 1:\n        print(total)\n    else:\n        x = pow(2, n - k, prime)\n        n = 1\n        d = 1\n        for i in range(k // 2 + 1, k + 1):\n            n = n * i % prime\n        for i in range(1, k // 2 + 1):\n            d = d * i\n        d = pow(d, prime - 2, prime)\n        ways = n * d % prime\n        ways = x * ways % prime\n        print((total - ways) % prime)", "prime = 10 ** 9 + 7\nfor tc in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    total = pow(2, n, prime)\n    m = max(arr)\n    k = arr.count(m)\n    if k % 2 == 1:\n        print(total)\n    else:\n        x = pow(2, n - k, prime)\n        n = 1\n        d = 1\n        for i in range(k // 2 + 1, k + 1):\n            n = n * i % prime\n        for i in range(1, k // 2 + 1):\n            d = d * i\n        d = pow(d, prime - 2, prime)\n        ways = n * d % prime\n        ways = x * ways % prime\n        print((total - ways) % prime)", "def combination(a, b):\n    ans = 0\n    ans += factorial(a) // factorial(b) ** 2\n    return ans\nM = 1000000007\nfrom math import factorial\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    count = l.count(max(l))\n    if count & 1:\n        print(pow(2, n, M))\n    else:\n        ways = pow(2, n - count, M) * combination(count, count // 2)\n        x = pow(2, n, M)\n        print((x - ways) % M)", "import math\nm = 1000000007\n\ndef pow(x, y):\n    an = 1\n    if x == 0:\n        return 1\n    while y > 0:\n        if y % 2 != 0:\n            an = an * x % m\n            y = y - 1\n        x = x * x % m\n        y = y / 2\n    return an % m\n\ndef comb(a, b):\n    p = math.factorial(a) % m\n    x = pow(math.factorial(b), m - 2) % m\n    y = pow(math.factorial(abs(a - b)), m - 2) % m\n    an = x * y * p % m\n    return an\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = l.count(max(l))\n    if f % 2 != 0:\n        d = 0\n    else:\n        x = comb(f, f // 2) % m\n        y = pow(2, n - f) % m\n        d = x % m * (y % m) % m\n    an = (pow(2, n) - d) % m\n    print((an + m) % m)", "import math\nm = 1000000007\n\ndef pow(x, y):\n    an = 1\n    if x == 0:\n        return 1\n    while y > 0:\n        if y % 2 != 0:\n            an = an * x % m\n            y = y - 1\n        x = x * x % m\n        y = y / 2\n    return an % m\n\ndef comb(a, b):\n    p = math.factorial(a) % m\n    x = pow(math.factorial(b), m - 2) % m\n    y = pow(math.factorial(abs(a - b)), m - 2) % m\n    an = x * y * p % m\n    return an\nfor _ in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    f = l.count(max(l))\n    if f % 2 != 0:\n        d = 0\n    else:\n        x = comb(f, f // 2) % m\n        y = pow(2, n - f) % m\n        d = x % m * (y % m) % m\n    an = (pow(2, n) - d) % m\n    print((an + m) % m)", "mod = 10 ** 9 + 7\nN = 1000001\nfactorialNumInverse = [None] * (N + 1)\nnaturalNumInverse = [None] * (N + 1)\nfact = [None] * (N + 1)\n\ndef InverseofNumber(mod):\n    naturalNumInverse[0] = naturalNumInverse[1] = 1\n    for i in range(2, N + 1, 1):\n        naturalNumInverse[i] = naturalNumInverse[mod % i] * (mod - int(mod / i)) % mod\n\ndef InverseofFactorial(mod):\n    factorialNumInverse[0] = factorialNumInverse[1] = 1\n    for i in range(2, N + 1):\n        factorialNumInverse[i] = naturalNumInverse[i] * factorialNumInverse[i - 1] % mod\n\ndef factorial(mod):\n    fact[0] = 1\n    for i in range(1, N + 1):\n        fact[i] = fact[i - 1] * i % mod\n\ndef nCr(N, R, mod):\n    ans = fact[N] * factorialNumInverse[R] % mod * factorialNumInverse[N - R] % mod\n    return ans\n\ndef solve():\n    n = int(input())\n    li = list(map(int, input().split()))\n    maxNoF = li.count(max(li))\n    if maxNoF % 2 == 1:\n        print(pow(2, n) % mod)\n    else:\n        extevent = (pow(2, maxNoF) - nCr(maxNoF, maxNoF // 2, mod) + mod) % mod\n        ans = pow(2, n - maxNoF) * extevent % mod\n        print(ans)\nInverseofNumber(mod)\nInverseofFactorial(mod)\nfactorial(mod)\nfor test in range(int(input())):\n    solve()", "mod = 10 ** 9 + 7\nN = 1000001\nfactorialNumInverse = [None] * (N + 1)\nnaturalNumInverse = [None] * (N + 1)\nfact = [None] * (N + 1)\n\ndef InverseofNumber(mod):\n    naturalNumInverse[0] = naturalNumInverse[1] = 1\n    for i in range(2, N + 1, 1):\n        naturalNumInverse[i] = naturalNumInverse[mod % i] * (mod - int(mod / i)) % mod\n\ndef InverseofFactorial(mod):\n    factorialNumInverse[0] = factorialNumInverse[1] = 1\n    for i in range(2, N + 1):\n        factorialNumInverse[i] = naturalNumInverse[i] * factorialNumInverse[i - 1] % mod\n\ndef factorial(mod):\n    fact[0] = 1\n    for i in range(1, N + 1):\n        fact[i] = fact[i - 1] * i % mod\n\ndef nCr(N, R, mod):\n    ans = fact[N] * factorialNumInverse[R] % mod * factorialNumInverse[N - R] % mod\n    return ans\n\ndef solve():\n    n = int(input())\n    li = list(map(int, input().split()))\n    maxNoF = li.count(max(li))\n    if maxNoF % 2 == 1:\n        print(pow(2, n) % mod)\n    else:\n        extevent = (pow(2, maxNoF) - nCr(maxNoF, maxNoF // 2, mod) + mod) % mod\n        ans = pow(2, n - maxNoF) * extevent % mod\n        print(ans)\nInverseofNumber(mod)\nInverseofFactorial(mod)\nfactorial(mod)\nfor test in range(int(input())):\n    solve()", "mod = 10 ** 9 + 7\nN = 1000001\nfactorialNumInverse = [None] * (N + 1)\nnaturalNumInverse = [None] * (N + 1)\nfact = [None] * (N + 1)\n\ndef InverseofNumber(mod):\n    naturalNumInverse[0] = naturalNumInverse[1] = 1\n    for i in range(2, N + 1, 1):\n        naturalNumInverse[i] = naturalNumInverse[mod % i] * (mod - int(mod / i)) % mod\n\ndef InverseofFactorial(mod):\n    factorialNumInverse[0] = factorialNumInverse[1] = 1\n    for i in range(2, N + 1):\n        factorialNumInverse[i] = naturalNumInverse[i] * factorialNumInverse[i - 1] % mod\n\ndef factorial(mod):\n    fact[0] = 1\n    for i in range(1, N + 1):\n        fact[i] = fact[i - 1] * i % mod\n\ndef nCr(N, R, mod):\n    ans = fact[N] * factorialNumInverse[R] % mod * factorialNumInverse[N - R] % mod\n    return ans\n\ndef solve():\n    n = int(input())\n    li = list(map(int, input().split()))\n    maxNoF = li.count(max(li))\n    if maxNoF % 2 == 1:\n        print(pow(2, n) % mod)\n    else:\n        extevent = (pow(2, maxNoF) - nCr(maxNoF, maxNoF // 2, mod) + mod) % mod\n        ans = pow(2, n - maxNoF) * extevent % mod\n        print(ans)\nInverseofNumber(mod)\nInverseofFactorial(mod)\nfactorial(mod)\nfor test in range(int(input())):\n    solve()", "mod = 10 ** 9 + 7\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef fact(n):\n    ret = 1\n    for x in range(1, n + 1):\n        ret *= x\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef combination(n, k):\n    ret = 1\n    r = min(k, n - k)\n    for i in range(r):\n        ret = ret % mod * ((n - i) % mod) % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nfor _ in range(int(input())):\n    n = int(input())\n    c = list(map(int, input().split()))\n    assert len(c) == n\n    N_hc = c.count(max(c))\n    if N_hc == 1:\n        print(power(2, n) % mod)\n    elif N_hc % 2 == 1:\n        print(power(2, n) % mod)\n    else:\n        print(int(power(2, n) % mod - power(2, n - N_hc) % mod * (combination(N_hc, N_hc // 2) % mod)) % mod)", "def modulo(a, m):\n    q = m\n    x = 1\n    y = 0\n    if m == 1:\n        return 0\n    else:\n        while a > 1:\n            w = a // m\n            t = m\n            m = a % m\n            a = t\n            t = y\n            y = x - w * y\n            x = t\n        if x <= -1:\n            x += q\n        return x\nmod = 1000000007\narr = [1]\nfor i in range(1, pow(10, 6) + 7):\n    last = arr[-1]\n    gh = last * i % mod\n    arr.append(gh)\n\ndef cmb(n, r):\n    a = arr[n] * modulo(arr[r], mod) * modulo(arr[n - r], mod) % mod\n    return a\nfor _ in range(int(input())):\n    n = int(input())\n    listt = list(map(int, input().split()))\n    d = listt.count(max(listt))\n    ans = 0\n    if d % 2 == 1:\n        ans = pow(2, d, mod) * pow(2, n - d, mod) % mod\n    else:\n        ans = (pow(2, d, mod) - cmb(d, d // 2)) * pow(2, n - d, mod) % mod\n    print(ans)", "m = 10 ** 9 + 7\n\ndef modExp(a, n, m=10 ** 9 + 7):\n    if n == 0:\n        return 1\n    elif n == 1:\n        return a\n    else:\n        while n >= 2:\n            if n % 2 == 0:\n                n = n // 2\n                return modExp(a % m * (a % m) % m, n, m)\n            else:\n                n = (n - 1) // 2\n                return a % m * modExp(a % m * (a % m) % m, n, m) % m % m\nmemo = {0: 1, 1: 1}\n\ndef fact(n, m=10 ** 9 + 7):\n    if n not in memo:\n        memo[n] = n * fact(n - 1) % m\n    return memo[n]\nfor i in range(10 ** 5 + 1):\n    fact(i)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    maxi = arr[0]\n    c = 0\n    for i in arr:\n        if i == maxi:\n            c += 1\n        elif i > maxi:\n            c = 1\n            maxi = i\n    if c % 2 != 0:\n        out = modExp(2, n)\n    else:\n        luv = (modExp(2, c) - fact(c) * modExp(fact(c // 2) ** 2 % m, m - 2) % m + m) % m\n        out = modExp(2, n - c) * luv % m\n    print(out)", "p = 1000000007\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * power(den, p - 2, p) % p\n\ndef power(x, y, p):\n    y = int(y)\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if int(y) & int(1) == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    mx = max(l)\n    co = l.count(mx)\n    ans = int(power(2, n, p))\n    if co % 2 == 0:\n        ans -= int(power(2, n - co, p)) * int(ncr(co, co // 2, p))\n    print(ans % p)", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nfor _ in range(int(input())):\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        continue\n    c = v.count(max(v))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nfor _ in range(int(input())):\n    n = int(input())\n    v = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        continue\n    c = v.count(max(v))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)", "import math\ntry:\n\n    def nCr(n):\n        return math.factorial(n) // (math.factorial(n // 2) * math.factorial(n // 2))\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        l = list(map(int, input().split()))\n        ans = pow(2, n, 1000000007)\n        m = max(l)\n        cnt = l.count(m)\n        if cnt % 2 != 0:\n            print(ans)\n        else:\n            subt = pow(2, n - cnt)\n            a2 = (pow(2, cnt) - nCr(cnt)) * subt\n            print(a2 % 1000000007)\nexcept:\n    pass", "p = 10 ** 9 + 7\n\ndef power(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\n\ndef ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\nfor i in range(int(input())):\n    n = int(input())\n    l = [int(c) for c in input().split()]\n    m = max(l)\n    x = l.count(m)\n    if x % 2 == 1:\n        print(power(2, n, p) % p)\n    else:\n        t = power(2, n, p) % p - power(2, n - x, p) % p * ncr(x, x // 2, p) % p % p\n        if t < 0:\n            t = (t + p) % p\n        print(t % p)", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "def ncr(n, r, p):\n    num = den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef power1(x, y, p):\n    res = 1\n    x = x % p\n    if x == 0:\n        return 0\n    while y > 0:\n        if y & 1 == 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return res\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = max(a)\n    c1 = a.count(m)\n    if c1 % 2 != 0:\n        print(power1(2, n, 1000000007) % 1000000007)\n    else:\n        c2 = c1 // 2\n        f = ncr(c1, c2, 1000000007)\n        print((power1(2, n, 1000000007) - power1(2, n - c1, 1000000007) * f) % 1000000007)", "m = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % m\n    ret = ret * ret % m\n    if b % 2 != 0:\n        ret = ret * a % m\n    return ret\n\ndef divide(a, b):\n    return a % m * (power(b, m - 2) % m) % m\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % m * (n - i) % m % m\n        ret = divide(ret, i + 1)\n    return ret % m\ntemp = int(input())\nwhile temp > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        temp -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % m\n    else:\n        ans = power(2, n) % m - power(2, n - c) % m * comb(c, c // 2) % m % m\n    if ans < 0:\n        ans = (ans + m) % m\n    print(ans % m)\n    temp -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nT = int(input())\nwhile T > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        T -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    T -= 1", "def power(rm, v):\n    if v == 0:\n        return 1\n    mochi = power(rm, v // 2) % 1000000007\n    mochi = mochi * mochi % 1000000007\n    if v % 2 != 0:\n        mochi = mochi * rm % 1000000007\n    return mochi\n\ndef comb(n, r):\n    mochi = 1\n    k = min(r, n - r)\n    for i in range(k):\n        mochi = mochi % 1000000007 * (n - i) % 1000000007 % 1000000007\n        mochi = mochi % 1000000007 * (power(i + 1, 1000000007 - 2) % 1000000007) % 1000000007\n    return mochi % 1000000007\nbighit = int(input())\nwhile bighit > 0:\n    n = int(input())\n    jk = list(map(int, input().split()))\n    if n == 1:\n        print(2)\n        bighit = bighit - 1\n        continue\n    c = jk.count(max(jk))\n    if c % 2 != 0:\n        ans = power(2, n) % 1000000007\n    else:\n        ans = power(2, n) % 1000000007 - power(2, n - c) % 1000000007 * comb(c, c // 2) % 1000000007 % 1000000007\n    if ans < 0:\n        ans = (ans + 1000000007) % 1000000007\n    print(ans % 1000000007)\n    bighit = bighit - 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    answer = power(a, b // 2) % mod\n    answer = answer * answer % mod\n    if b % 2 != 0:\n        answer = answer * a % mod\n    return answer\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    answer = 1\n    k = min(r, n - r)\n    for i in range(k):\n        answer = answer % mod * (n - i) % mod % mod\n        answer = divide(answer, i + 1)\n    return answer % mod\n\ndef submain():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (max1, maxcount, ans) = (0, 0, 0)\n    for i in range(n):\n        if max1 < a[i]:\n            max1 = a[i]\n    for i in range(n):\n        if max1 == a[i]:\n            maxcount += 1\n    if n == 1:\n        print(2)\n        return\n    if maxcount % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - maxcount) % mod * comb(maxcount, maxcount // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\nt = int(input())\nfor i in range(t):\n    submain()", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nrs = int(input())\nwhile rs > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        rs -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    rs -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nw = int(input())\nwhile w > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        w -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    w -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "import math\ntest = int(input())\nfor z in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = max(a)\n    co = a.count(x)\n    ans = 0\n    if co % 2 != 0:\n        ans = 2 ** n\n    else:\n        ans = 2 ** (n - co)\n        a = math.factorial(co)\n        b = math.factorial(co // 2)\n        al = a // (b * b)\n        ans *= 2 ** co - al\n    ans %= 1000000007\n    print(ans)", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    answer = power(a, b // 2) % mod\n    answer = answer * answer % mod\n    if b % 2 != 0:\n        answer = answer * a % mod\n    return answer\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    answer = 1\n    k = min(r, n - r)\n    for i in range(k):\n        answer = answer % mod * (n - i) % mod % mod\n        answer = divide(answer, i + 1)\n    return answer % mod\n\ndef submain():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (max1, maxcount, ans) = (0, 0, 0)\n    for i in range(n):\n        if max1 < a[i]:\n            max1 = a[i]\n    for i in range(n):\n        if max1 == a[i]:\n            maxcount += 1\n    if n == 1:\n        print(2)\n        return\n    if maxcount % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - maxcount) % mod * comb(maxcount, maxcount // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\nt = int(input())\nfor i in range(t):\n    submain()", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "import math as math\n\ndef po(x, y):\n    res = 1\n    p = 1000000007\n    x = x % p\n    while y > 0:\n        if y & 1:\n            res = res * x % p\n        y = y >> 1\n        x = x * x % p\n    return int(res)\n\ndef fer(n, r):\n    p = 1000000007\n    if r == 0:\n        return 1\n    fac = [1]\n    for k in range(1, n + 1):\n        t = fac[k - 1]\n        fac.append(t * k % p)\n    return int(fac[n] * po(fac[r], p - 2) % p * po(fac[n - r], p - 2) % p % p)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    p = 1000000007\n    maximum = max(arr)\n    count = 0\n    for i in arr:\n        if i == maximum:\n            count += 1\n    f = count\n    lft = po(2, n - f)\n    lft %= p\n    rgt = po(2, f)\n    if f % 2 == 0:\n        rgt -= fer(f, f // 2)\n    rgt %= p\n    print(int(lft * rgt % p))", "def nCr(n, r, mod):\n    numerator = 1\n    denominator = 1\n    for i in range(r):\n        numerator = numerator * (n - i) % mod\n        denominator = denominator * (i + 1) % mod\n    return numerator * pow(denominator, mod - 2, mod) % mod\nT = int(input())\nwhile T > 0:\n    T = T - 1\n    N = int(input())\n    cards = [int(i) for i in input().strip().split()]\n    cnt = 0\n    maxu = 0\n    for i in range(N):\n        maxu = max(maxu, cards[i])\n    for i in range(N):\n        if cards[i] == maxu:\n            cnt = cnt + 1\n    mod = 1000000000 + 7\n    if cnt & 1:\n        print(pow(2, N, mod))\n    else:\n        a = pow(2, N, mod) % mod\n        b = nCr(cnt, cnt // 2, mod) % mod\n        c = pow(2, N - cnt, mod) % mod\n        ans = (a - b * c % mod) % mod\n        print(ans)", "import math\nt = int(input())\nfor z in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    x = max(a)\n    c = a.count(x)\n    ans = 0\n    if c % 2 != 0:\n        ans = 2 ** n\n    else:\n        ans = 2 ** (n - c)\n        a = math.factorial(c)\n        b = math.factorial(c // 2)\n        al = a // (b * b)\n        ans *= 2 ** c - al\n    ans %= 1000000007\n    print(ans)", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nTc = int(input())\nwhile Tc > 0:\n    num = int(input())\n    l = [int(x) for x in input().split()]\n    if num == 1:\n        print(2)\n        Tc -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, num) % mod\n    else:\n        ans = power(2, num) % mod - power(2, num - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    Tc -= 1", "mod = 1000000007\n\ndef power(aa, bb):\n    if bb == 0:\n        return 1\n    ret = power(aa, bb // 2) % mod\n    ret = ret * ret % mod\n    if bb % 2 != 0:\n        ret = ret * aa % mod\n    return ret\n\ndef divide(aa, bb):\n    return aa % mod * (power(bb, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\ntem = int(input())\nwhile tem > 0:\n    nums = int(input())\n    l = [int(x) for x in input().split()]\n    if nums == 1:\n        print(2)\n        tem -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, nums) % mod\n    else:\n        ans = power(2, nums) % mod - power(2, nums - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    tem -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    answer = power(a, b // 2) % mod\n    answer = answer * answer % mod\n    if b % 2 != 0:\n        answer = answer * a % mod\n    return answer\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    answer = 1\n    k = min(r, n - r)\n    for i in range(k):\n        answer = answer % mod * (n - i) % mod % mod\n        answer = divide(answer, i + 1)\n    return answer % mod\n\ndef submain():\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    (max1, maxcount, ans) = (0, 0, 0)\n    for i in range(n):\n        if max1 < a[i]:\n            max1 = a[i]\n    for i in range(n):\n        if max1 == a[i]:\n            maxcount += 1\n    if n == 1:\n        print(2)\n        return\n    if maxcount % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - maxcount) % mod * comb(maxcount, maxcount // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\nt = int(input())\nfor i in range(t):\n    submain()", "import pandas as pd\nimport math as mt\nimport numpy as np\nMODD = 10 ** 9 + 7\n\ndef calcExponent(a, num):\n    var = 1\n    a = a % MODD\n    while num > 0:\n        if num & 1:\n            var = var * a % MODD\n        num = num // 2\n        a = a * a % MODD\n    return var\n\ndef makeExponent(num):\n    return calcExponent(num, MODD - 2)\n\ndef function(num, val):\n    if val == 0:\n        return 1\n    brr = [0 for i in range(num + 1)]\n    brr[0] = 1\n    for i in range(1, num + 1):\n        brr[i] = brr[i - 1] * i % MODD\n    return brr[num] * makeExponent(brr[val]) % MODD * makeExponent(brr[num - val]) % MODD % MODD\n\ndef sum(aa, bb):\n    c = aa + bb\ntest = int(input())\nfor qwerty in range(test):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    data = dict()\n    large = -1\n    for i in arr:\n        if i in data:\n            data[i] += 1\n        else:\n            data[i] = 1\n        large = max(large, i)\n    val = data[large]\n    high = pow(2, val)\n    low = pow(2, n - val)\n    sum(234, 23)\n    if val % 2 == 0:\n        temp = function(val, val // 2)\n        high -= temp\n    high = high % MODD\n    print(low * high % MODD)", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(x, n):\n    res = 1\n    while n:\n        if n & 1:\n            res = res * x % mod\n        n = n // 2\n        x = x * x % mod\n    return res\n\ndef divv(o, p):\n    return o % mod * (power(p, mod - 2) % mod) % mod\n\ndef sol(n, t):\n    ans = 1\n    g = min(t, n - t)\n    for i in range(0, g):\n        ans = ans % mod * (n - i) % mod % mod\n        ans = divv(ans, i + 1)\n    return ans % mod\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    l = list(map(int, input().strip().split()))[:n]\n    maxxx = max(l)\n    max_val = l.count(maxxx)\n    if n == 1:\n        print(2)\n        continue\n    if max_val % 2 != 0:\n        res = power(2, n) % mod\n    else:\n        res = power(2, n) % mod - power(2, n - max_val) % mod * sol(max_val, max_val // 2) % mod % mod\n    if res < 0:\n        res = (res + mod) % mod\n    print(res % mod)", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "MOD = 1000000007\ntc = int(input())\n\ndef power(n, p):\n    ans = 1\n    while p:\n        if p & 1:\n            ans = ans * n % MOD\n        n = n * n % MOD\n        p >>= 1\n    return ans\n\ndef div(a, b):\n    return a % MOD * (power(b, MOD - 2) % MOD) % MOD\n\ndef solution(n, r):\n    ans = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ans = ans % MOD * ((n - i) % MOD) % MOD\n        ans = div(ans, i + 1)\n    return ans % MOD\nfor testcase in range(tc):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    max1 = max(lst)\n    max_value = lst.count(max1)\n    if n == 1:\n        print(2)\n    elif max_value % 2 == 1:\n        print(power(2, n) % MOD)\n    else:\n        pri = (power(2, n) % MOD - pow(2, n - max_value, MOD) % MOD * solution(max_value, max_value // 2) % MOD % MOD % MOD) % MOD\n        pri += MOD\n        pri %= MOD\n        print(pri % MOD)", "mod = 1000000007\n\ndef ncr(n, r, p):\n    num = 1\n    den = 1\n    for i in range(r):\n        num = num * (n - i) % p\n        den = den * (i + 1) % p\n    return num * pow(den, p - 2, p) % p\n\ndef solve(n):\n    cards = list(map(int, input().split()))\n    if n == 1:\n        return 2\n    m = max(cards)\n    c = 0\n    totWays = pow(2, n, mod)\n    for i in cards:\n        if i == m:\n            c += 1\n    if c % 2 != 0:\n        return totWays % mod\n    else:\n        p = pow(2, n - c, mod) % mod * (ncr(c, c // 2, mod) % mod) % mod\n        ans = (totWays % mod - p % mod + mod) % mod\n        return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    print(solve(n))", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, k):\n    if k == 0:\n        return 1\n    ret = power(a, k // 2) % mod\n    ret = ret * ret % mod\n    if k % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, k):\n    return a % mod * (power(k, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef combination(n, r):\n    rett = 1\n    k = min(r, n - r)\n    for i in range(k):\n        rett = rett % mod * (n - i) % mod % mod\n        rett = divide(rett, i + 1)\n    return rett % mod\ntestcase = int(input())\nwhile testcase > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        testcase -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * combination(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    testcase -= 1", "def divide(a, b):\n    p = 1000000007\n    return a % p * (power(b, p - 2) % p) % p\n\ndef comb(n, r):\n    p = 1000000007\n    ans = 1\n    k = min(r, n - r)\n    k = int(k)\n    for i in range(0, k):\n        ans = ans % p * (n - i) % p % p\n        ans = divide(ans, i + 1)\n    return ans % p\n\ndef power(a, b):\n    p = 1000000007\n    if b == 0:\n        return 1\n    ans = power(a, b // 2) % p\n    ans = ans * ans % p\n    if b % 2 != 0:\n        ans = ans * a % p\n    return ans\n\ndef card(l, n):\n    p = 1000000007\n    ans = 0\n    maxi = 0\n    c = 0\n    for i in range(0, n):\n        if maxi < l[i]:\n            maxi = l[i]\n    for i in range(0, n):\n        if maxi == l[i]:\n            c += 1\n        if n == 1:\n            return 2\n    if c % 2 != 0:\n        ans = power(2, n) % p\n    else:\n        ans = power(2, n) % p - power(2, n - c) % p * comb(c, c / 2) % p % p\n    if ans < 0:\n        ans = (ans + p) % p\n    return ans % p\nt = int(input())\nh = []\nwhile t > 0:\n    n = int(input())\n    l = list(map(int, input().split()))\n    h.append(card(l, n))\n    t -= 1\nprint(*h, sep='\\n')", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(y, z):\n    if z == 0:\n        return 1\n    ret = power(y, z // 2) % mod\n    ret = ret * ret % mod\n    if z % 2 != 0:\n        ret = ret * y % mod\n    return ret\n\ndef divide(y, z):\n    return y % mod * (power(z, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\np = int(input())\nwhile p > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        p = p - 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans5 = power(2, n) % mod\n    else:\n        ans5 = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans5 < 0:\n        ans5 = (ans5 + mod) % mod\n    print(ans5 % mod)\n    p = p - 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(m, b):\n    if b == 0:\n        return 1\n    ak = power(m, b // 2) % mod\n    ak = ak * ak % mod\n    if b % 2 != 0:\n        ak = ak * m % mod\n    return ak\n\ndef divide(m, b):\n    return m % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ak = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ak = ak % mod * (n - i) % mod % mod\n        ak = divide(ak, i + 1)\n    return ak % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "mod = 1000000007\n\ndef power(a, b):\n    if b == 0:\n        return 1\n    ret = power(a, b // 2) % mod\n    ret = ret * ret % mod\n    if b % 2 != 0:\n        ret = ret * a % mod\n    return ret\n\ndef divide(a, b):\n    return a % mod * (power(b, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        ans = power(2, n) % mod\n    else:\n        ans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if ans < 0:\n        ans = (ans + mod) % mod\n    print(ans % mod)\n    t -= 1", "MOD = 1000000007\narr1 = [0 for i in range(100010)]\narr2 = [0 for i in range(100010)]\narr3 = [0 for i in range(100010)]\n\ndef pre():\n    arr2[0] = 1\n    arr2[1] = 1\n    arr1[0] = 1\n    arr1[1] = 1\n    arr3[0] = 1\n    for i in range(2, 100010):\n        arr2[i] = arr2[MOD % i] * (MOD - MOD // i) % MOD\n    for i in range(2, 100010):\n        arr1[i] = arr2[i] * arr1[i - 1] % MOD\n    for i in range(1, 100010):\n        arr3[i] = arr3[i - 1] * i % MOD\n\ndef calc(x, y):\n    return arr3[x] * arr1[y] % MOD * arr1[x - y] % MOD\npre()\ntest = int(input())\nfor asd in range(test):\n    n = int(input())\n    res = 0\n    minimum = 0\n    count_val = 0\n    s = input()\n    s = s.split()\n    for i in range(n):\n        temp = int(s[i])\n        if minimum < temp:\n            minimum = temp\n            count_val = 1\n        elif minimum == temp:\n            count_val += 1\n    val = 1\n    i = 0\n    while i < n - count_val:\n        val = 2 * val % MOD\n        i += 1\n    res = res + val * 2 % MOD\n    i = 1\n    while i <= count_val // 2:\n        if i != count_val - i:\n            res = (res + val * (calc(count_val, i) * 2) % MOD % MOD) % MOD\n        i += 1\n    print(res)", "mod = 1000000007\n\ndef power(g, h):\n    if h == 0:\n        return 1\n    ret = power(g, h // 2) % mod\n    ret = ret * ret % mod\n    if h % 2 != 0:\n        ret = ret * g % mod\n    return ret\n\ndef divide(g, h):\n    return g % mod * (power(h, mod - 2) % mod) % mod\n\ndef comb(n, r):\n    ret = 1\n    k = min(r, n - r)\n    for i in range(k):\n        ret = ret % mod * (n - i) % mod % mod\n        ret = divide(ret, i + 1)\n    return ret % mod\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n == 1:\n        print(2)\n        t -= 1\n        continue\n    c = l.count(max(l))\n    if c % 2 != 0:\n        gans = power(2, n) % mod\n    else:\n        gans = power(2, n) % mod - power(2, n - c) % mod * comb(c, c // 2) % mod % mod\n    if gans < 0:\n        gans = (gans + mod) % mod\n    print(gans % mod)\n    t -= 1", "def fact(n):\n    ans = 1\n    for i in range(1, n + 1):\n        ans = ans * i\n    return ans\n\ndef ncr(n, r, p):\n    num = 1\n    den = 1\n    for i in range(r):\n        den = den * (i + 1) % p\n        num = num * (n - i) % p\n    return num * pow(den, p - 2, p) % p\nt = int(input())\nfor tc in range(t):\n    n = int(input())\n    c = 0\n    numbers = list(map(int, input().strip().split()))[:n]\n    number_list = [int(i) for i in numbers]\n    maxi = 0\n    for i in range(n):\n        if number_list[i] > maxi:\n            maxi = number_list[i]\n    for i in range(n):\n        if number_list[i] == maxi:\n            c = c + 1\n    other = n - c\n    if c % 2 == 1:\n        print(pow(2, n, 1000000007))\n        continue\n    else:\n        original = pow(2, n, 1000000007)\n        rem_2 = pow(2, n - c)\n        rem = c // 2\n        print((original - rem_2 * ncr(c, rem, 1000000007)) % 1000000007)"]