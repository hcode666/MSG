["import math\n\ndef check(a, k, h):\n    t = 0\n    for el in a:\n        t += math.ceil(el / k)\n        if t > h:\n            return False\n    return True\n\ndef bsearch(a, h):\n    (lo, hi) = (1, max(a))\n    ans = -1\n    while lo <= hi:\n        mid = hi + (lo - hi) // 2\n        if check(a, mid, h):\n            ans = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return ans\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    print(bsearch(a, h))", "import math\n\ndef check(a, k, h):\n    t = 0\n    for el in a:\n        t += math.ceil(el / k)\n        if t > h:\n            return False\n    return True\n\ndef bsearch(a, h):\n    (lo, hi) = (1, max(a))\n    ans = -1\n    while lo <= hi:\n        mid = hi + (lo - hi) // 2\n        if check(a, mid, h):\n            ans = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return ans\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = [int(i) for i in input().split()]\n    print(bsearch(a, h))", "from math import ceil\n\ndef bin(arr, h):\n\n    def func(arr, v, h):\n        c = 0\n        for i in range(len(arr)):\n            c = c + ceil(arr[i] / v)\n        if c <= h:\n            return True\n        else:\n            return False\n    low = 1\n    high = max(arr)\n    k = high + 1\n    while low <= high:\n        mid = (low + high) // 2\n        if func(arr, mid, h) == True:\n            k = min(mid, k)\n            high = mid - 1\n        else:\n            low = mid + 1\n    return k\nn = int(input())\ninputs = []\nfor i in range(n):\n    (l, h) = map(int, input().split())\n    read = list(map(int, input().split()))\n    inputs.append([read, l, h])\nfor i in range(n):\n    print(bin(inputs[i][0], inputs[i][2]))", "for z in range(int(input())):\n    (n, h) = [int(x) for x in input().split()]\n    a = [int(x) for x in input().split()]\n\n    def bs(l, r, h):\n        if l > r:\n            return max(a)\n        m = int((l + r) / 2)\n        x = 0\n        for i in range(len(a)):\n            x += 1 + a[i] // m\n            if a[i] % m == 0:\n                x -= 1\n        if x <= h:\n            return min(bs(l, m - 1, h), m)\n        return bs(m + 1, r, h)\n    print(bs(1, max(a), h))", "import math\n\ndef get_time(mid: int, arr: list):\n    res = sum([math.ceil(i / mid) for i in arr])\n    return res\n\ndef minimum_k(h: int, arr: list) -> int:\n    lo = 1\n    hi = max(arr)\n    res = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        val = get_time(mid, arr)\n        if val > h:\n            lo = mid + 1\n        elif val <= h:\n            hi = mid - 1\n            res = mid\n    return res\nt = int(input())\nfor i in range(t):\n    (n, h) = list(map(int, input().split(' ')))\n    piles = list(map(int, input().split(' ')))\n    print(minimum_k(h, piles))", "import math\n\ndef get_time(mid: int, arr: list):\n    res = sum([math.ceil(i / mid) for i in arr])\n    return res\n\ndef minimum_k(h: int, arr: list) -> int:\n    lo = 1\n    hi = max(arr)\n    res = 0\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        val = get_time(mid, arr)\n        if val > h:\n            lo = mid + 1\n        elif val <= h:\n            hi = mid - 1\n            res = mid\n    return res\nt = int(input())\nfor i in range(t):\n    (n, h) = list(map(int, input().split(' ')))\n    piles = list(map(int, input().split(' ')))\n    print(minimum_k(h, piles))", "import math\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    left = 1\n    right = 10 ** 9\n    ans = 0\n    while left <= right:\n        mid = left + (right - left) // 2\n        sum = 0\n        for j in a:\n            sum += math.ceil(j / mid)\n        if sum > h:\n            left = mid + 1\n        elif sum <= h:\n            ans = mid\n            right = mid - 1\n    else:\n        print(ans)", "from math import ceil\n\ndef total_time(A, k):\n    total = 0\n    for i in range(len(A)):\n        total = total + ceil(A[i] / k)\n    return total\n\ndef binary_search(arr, h):\n    low = 1\n    high = max(arr)\n    k = high + 1\n    while low <= high:\n        mid = (low + high) // 2\n        time = total_time(arr, mid)\n        if time <= h:\n            k = min(mid, k)\n            high = mid - 1\n        else:\n            low = mid + 1\n    return k\nT = int(input())\nfor i in range(T):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(binary_search(arr, h))", "def check(m):\n    count = 0\n    for el in arr:\n        if m < el:\n            count += (el + m - 1) // m\n        else:\n            count += 1\n    if count <= hours:\n        return True\n    else:\n        return False\nt = int(input())\nfor i in range(t):\n    (length, hours) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    r = 1000000000\n    l = 1\n    ans = 10000000000\n    while r >= l:\n        m = (l + r) // 2\n        if check(m):\n            r = m - 1\n            ans = min(ans, m)\n        else:\n            l = m + 1\n    print(ans)", "def check(bananas, mid_val, H):\n    time = 0\n    for i in range(len(bananas)):\n        if bananas[i] % mid_val != 0:\n            time += bananas[i] // mid_val + 1\n        else:\n            time += bananas[i] // mid_val\n    if time <= H:\n        return True\n    else:\n        return False\n\ndef minEatingSpeed(piles, H):\n    start = 1\n    end = sorted(piles.copy(), reverse=True)[0]\n    while start < end:\n        mid = start + (end - start) // 2\n        if check(piles, mid, H) == True:\n            end = mid\n        else:\n            start = mid + 1\n    return end\nt = int(input())\nfor i in range(t):\n    a = [int(i) for i in input().split()][:2]\n    n = a[0]\n    h = a[1]\n    b = [int(i) for i in input().split()][:n]\n    print(minEatingSpeed(b, h))", "def check(bananas, mid_val, H):\n    time = 0\n    for i in range(len(bananas)):\n        if bananas[i] % mid_val != 0:\n            time += bananas[i] // mid_val + 1\n        else:\n            time += bananas[i] // mid_val\n    if time <= H:\n        return True\n    else:\n        return False\n\ndef minEatingSpeed(piles, H):\n    start = 1\n    end = sorted(piles.copy(), reverse=True)[0]\n    while start < end:\n        mid = start + (end - start) // 2\n        if check(piles, mid, H) == True:\n            end = mid\n        else:\n            start = mid + 1\n    return end\nt = int(input())\nfor i in range(t):\n    a = [int(i) for i in input().split()][:2]\n    n = a[0]\n    h = a[1]\n    b = [int(i) for i in input().split()][:n]\n    print(minEatingSpeed(b, h))", "from math import ceil\n\ndef minions(arr1, mid1, h1):\n    csum = 0\n    for i in arr1:\n        csum += ceil(i / mid1)\n        if csum > h1:\n            return False\n    return True\nt = int(input())\nwhile t > 0:\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    i = 1\n    j = max(arr)\n    mini = j\n    while i <= j:\n        mid = (i + j) // 2\n        if minions(arr, mid, h):\n            if mid < mini:\n                mini = mid\n                j = mid - 1\n            else:\n                break\n        else:\n            i = mid + 1\n    print(mini)\n    t = t - 1", "from math import ceil\n\ndef minions(arr1, mid1, h1):\n    csum = 0\n    for i in arr1:\n        csum += ceil(i / mid1)\n        if csum > h1:\n            return False\n    return True\nt = int(input())\nwhile t > 0:\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    i = 1\n    j = max(arr)\n    mini = j\n    while i <= j:\n        mid = (i + j) // 2\n        if minions(arr, mid, h):\n            if mid < mini:\n                mini = mid\n                j = mid - 1\n            else:\n                break\n        else:\n            i = mid + 1\n    print(mini)\n    t = t - 1", "from math import ceil\n\ndef minions(arr1, mid1, h1):\n    csum = 0\n    for i in arr1:\n        csum += ceil(i / mid1)\n    if csum > h1:\n        return False\n    return True\nt = int(input())\nwhile t > 0:\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    i = 1\n    j = max(arr)\n    mini = j\n    while i <= j:\n        mid = (i + j) // 2\n        if minions(arr, mid, h):\n            if mid < mini:\n                mini = mid\n                j = mid - 1\n            else:\n                break\n        else:\n            i = mid + 1\n    print(mini)\n    t = t - 1", "from math import ceil\n\ndef minions(arr1, mid1, h1):\n    csum = 0\n    for i in arr1:\n        csum += ceil(i / mid1)\n        if csum > h1:\n            return False\n    return True\nt = int(input())\nwhile t > 0:\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    i = 1\n    j = max(arr)\n    mini = j\n    while i <= j:\n        mid = (i + j) // 2\n        if minions(arr, mid, h):\n            if mid < mini:\n                mini = mid\n                j = mid - 1\n            else:\n                break\n        else:\n            i = mid + 1\n    print(mini)\n    t = t - 1", "from math import ceil\n\ndef eat_complete(bananas, k, h):\n    elapsed = 0\n    for pile in bananas:\n        elapsed += ceil(pile / k)\n        if elapsed > h:\n            return False\n    return True\nfor _ in range(int(input())):\n    (length, time) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    i = 1\n    j = max(arr)\n    min_k = j\n    while i <= j:\n        m = (i + j) // 2\n        if eat_complete(arr, m, time):\n            if m < min_k:\n                min_k = m\n                j = m - 1\n            else:\n                break\n        else:\n            i = m + 1\n    print(min_k)", "from math import ceil\n\ndef eat_complete(bananas, k, h):\n    elapsed = 0\n    for pile in bananas:\n        elapsed += ceil(pile / k)\n        if elapsed > h:\n            return False\n    return True\nfor _ in range(int(input())):\n    (length, time) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    i = 1\n    j = max(arr)\n    min_k = j\n    while i <= j:\n        m = (i + j) // 2\n        if eat_complete(arr, m, time):\n            if m < min_k:\n                min_k = m\n                j = m - 1\n            else:\n                break\n        else:\n            i = m + 1\n    print(min_k)", "from math import ceil\n\ndef eat_complete(bananas, k, h):\n    elapsed = 0\n    for pile in bananas:\n        elapsed += ceil(pile / k)\n        if elapsed > h:\n            return False\n    return True\nfor _ in range(int(input())):\n    (length, time) = map(int, input().split())\n    arr = sorted(list(map(int, input().split())), reverse=True)\n    i = 1\n    j = arr[0]\n    min_k = j\n    while i <= j:\n        m = (i + j) // 2\n        if eat_complete(arr, m, time):\n            if m < min_k:\n                min_k = m\n                j = m - 1\n            else:\n                break\n        else:\n            i = m + 1\n    print(min_k)", "import math\n\ndef compute(a, h, k):\n    c = 0\n    for i in a:\n        c += math.ceil(i / k)\n    return c <= h\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    (st, en) = (1, max(a))\n    while st < en:\n        mid = (st + en) // 2\n        if compute(a, h, mid):\n            en = mid\n        else:\n            st = mid + 1\n    k = max(1, mid - 1)\n    while not compute(a, h, k):\n        k += 1\n    print(k)", "import math\nfor tc in range(int(input())):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = sum(l)\n    if n == h:\n        print(max(l))\n    else:\n        k = math.ceil(s / h)\n        r = max(l)\n        while k < r:\n            m = (k + r) // 2\n            s = 0\n            for j in l:\n                s += math.ceil(j / m)\n            if s <= h:\n                r = m\n            else:\n                k = m + 1\n        print(k)", "from math import ceil\n\ndef listInput():\n    return list(map(int, input().split()))\n\ndef strInput():\n    return input().split()\n\ndef Input():\n    return input()\nfor test in range(int(input())):\n    (n, h) = listInput()\n    arr = listInput()\n    (l, r) = (1, max(arr))\n    while l < r:\n        m = (l + r) // 2\n        s = 0\n        k = m\n        for i in range(n):\n            s += ceil(arr[i] / k)\n        if s <= h:\n            r = m\n        else:\n            l = m + 1\n    print(l)", "from math import ceil\n\ndef li():\n    return list(map(int, input().split()))\n\ndef si():\n    return input().split()\n\ndef ii():\n    return int(input())\n\ndef ip():\n    return input()\nfor tastcas in range(int(input())):\n    (n, h) = li()\n    a = li()\n    l = 1\n    r = max(a)\n    while l < r:\n        m = (l + r) // 2\n        k = m\n        s = 0\n        for i in range(n):\n            s += ceil(a[i] / k)\n        if s <= h:\n            r = m\n        else:\n            l = m + 1\n    print(l)", "def check(mid):\n    total = 0\n    for i in piles:\n        total += (i + mid - 1) // mid\n    return total <= hours\n\ndef solve(no_piles, hours, piles):\n    lim_0 = 1\n    end = max(piles)\n    ans = end\n    while lim_0 <= end:\n        mid = (lim_0 + end) // 2\n        if check(mid):\n            ans = min(ans, mid)\n            end = mid - 1\n        else:\n            lim_0 = mid + 1\n    return ans\ntest_cases = int(input())\nfor _ in range(test_cases):\n    (number_of_piles, hours) = list(map(int, input().split()))\n    piles = list(map(int, input().split()))\n    print(solve(number_of_piles, hours, piles))", "from math import ceil\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    v = list(map(int, input().split()))\n    l = 1\n    r = max(v)\n    while l < r:\n        m = (l + r) // 2\n        k1 = m\n        t = 0\n        for i in range(n):\n            t += ceil(v[i] / k1)\n        if t > h:\n            l = m + 1\n        else:\n            r = m\n    print(l)", "def binarySearch(arr, mid):\n    t = 0\n    for i in arr:\n        t += i // mid\n        if i % mid != 0:\n            t += 1\n    return t\nt = int(input())\nfor _ in range(t):\n    (l, tm) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    low = 1\n    high = max(arr)\n    while low <= high:\n        mid = (high + low) // 2\n        t = binarySearch(arr, mid)\n        if t <= tm:\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(low)", "def binarySearch(arr, mid):\n    t = 0\n    for i in arr:\n        t += i // mid\n        if i % mid != 0:\n            t += 1\n    return t\nt = int(input())\nfor _ in range(t):\n    (l, tm) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    low = 1\n    high = max(arr)\n    while low <= high:\n        mid = (high + low) // 2\n        t = binarySearch(arr, mid)\n        if t <= tm:\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(low)", "from math import ceil\n\ndef total_time(A, k):\n    total = 0\n    for i in range(len(A)):\n        total = total + ceil(A[i] / k)\n    return total\n\ndef binary_search(arr, h):\n    low = 1\n    high = max(arr)\n    k = high + 1\n    while low <= high:\n        mid = (low + high) // 2\n        time = total_time(arr, mid)\n        if time <= h:\n            k = min(mid, k)\n            high = mid - 1\n        else:\n            low = mid + 1\n    return k\nT = int(input())\nfor i in range(T):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(binary_search(arr, h))", "from math import ceil as top\n\ndef check(mid):\n    res = 0\n    for i in arr:\n        res += top(i / mid)\n    if res <= h:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    low = 1\n    high = max(arr)\n    while low <= high:\n        mid = (low + high) // 2\n        if check(mid):\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(low)", "from math import ceil as top\n\ndef check(mid):\n    res = 0\n    for i in arr:\n        res += top(i / mid)\n    if res <= h:\n        return True\n    return False\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    low = 1\n    high = max(arr)\n    while low <= high:\n        mid = (low + high) // 2\n        if check(mid):\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(low)", "import math\n\ndef check(l, n, m, h):\n    s = 0\n    for i in range(n):\n        s += math.ceil(l[i] / m)\n    if s <= h:\n        return True\n    return False\n\ndef snek(l, n, h):\n    a = 1\n    b = max(l)\n    while b > a:\n        c = int((b + a) / 2)\n        if check(l, n, c, h):\n            b = c\n        else:\n            a = c + 1\n    if check(l, n, a, h) == False:\n        a += 1\n    return a\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    ans = snek(l, n, h)\n    print(ans)", "import math\n\ndef check(arr, n, mid, H):\n    hrs = 0\n    for i in range(n):\n        hrs += math.ceil(arr[i] / mid)\n    if hrs <= H:\n        return True\n    return False\n\ndef bs(arr, n, H):\n    low = 1\n    high = max(arr)\n    while high > low:\n        mid = int((high + low) / 2)\n        if check(arr, n, mid, H):\n            high = mid\n        else:\n            low = mid + 1\n    if check(arr, n, low, H) == False:\n        low += 1\n    return low\nfor _ in range(int(input())):\n    (n, H) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    ans = bs(arr, n, H)\n    print(ans)", "from math import ceil\n\ndef total_time(A, k):\n    total = 0\n    for i in range(len(A)):\n        total = total + ceil(A[i] / k)\n    return total\n\ndef binary_search(arr, h):\n    low = 1\n    high = max(arr)\n    k = high + 1\n    while low <= high:\n        mid = (low + high) // 2\n        time = total_time(arr, mid)\n        if time <= h:\n            k = min(mid, k)\n            high = mid - 1\n        else:\n            low = mid + 1\n    return k\nT = int(input())\nfor i in range(T):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(binary_search(arr, h))", "import math\nt = int(input())\n\ndef ans(nums, h):\n\n    def res(hours):\n        x = 0\n        for i in nums:\n            x += math.ceil(i / hours)\n        return x\n    (low, high, res1) = (1, max(nums), float('inf'))\n    if len(nums) == h:\n        return high\n    while low <= high:\n        mid = (low + high) // 2\n        ans = res(mid)\n        if ans == h:\n            res1 = min(mid, res1)\n        if ans > h:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return res1 if res1 != float('inf') else low\nfor _ in range(t):\n    x = [int(i) for i in input().split()]\n    arr = [int(i) for i in input().split()]\n    print(ans(arr, x[1]))", "from math import ceil\n\ndef min_banana_ph(arr, n, h):\n    start = 1\n    end = max(arr)\n    mid = (start + end) // 2\n    k = end + 1\n    while start <= end:\n        time = 0\n        for i in range(n):\n            time += ceil(arr[i] / mid)\n        if time <= h:\n            k = min(mid, k)\n            end = mid - 1\n        else:\n            start = mid + 1\n        mid = (start + end) // 2\n    return k\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(min_banana_ph(arr, n, h))", "from math import ceil\n\ndef min_banana_ph(arr, n, h):\n    start = 1\n    end = max(arr)\n    mid = (start + end) // 2\n    k = end + 1\n    while start <= end:\n        time = 0\n        for i in range(n):\n            time += ceil(arr[i] / mid)\n        if time <= h:\n            k = min(mid, k)\n            end = mid - 1\n        else:\n            start = mid + 1\n        mid = (start + end) // 2\n    return k\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(min_banana_ph(arr, n, h))", "import math\nh = 0\nlst = [0] * (10 ** 5 + 23)\n\ndef bsearch(m):\n    l = 1\n    r = m\n    ans = r\n    while l <= r:\n        mid = (l + r) // 2\n        if check(mid):\n            ans = min(ans, mid)\n            r = mid - 1\n        else:\n            l = mid + 1\n    return ans\n\ndef check(x):\n    s = 0\n    for i in lst:\n        s += math.ceil(i / x)\n    return s <= h\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    tag = max(lst)\n    ans = bsearch(tag)\n    print(ans)", "import math\nh = 0\n\ndef bsearch(lst, m):\n    l = 1\n    r = m\n    ans = r\n    while l <= r:\n        mid = (l + r) // 2\n        if check(lst, mid):\n            ans = min(ans, mid)\n            r = mid - 1\n        else:\n            l = mid + 1\n    return ans\n\ndef check(lst, x):\n    s = 0\n    for i in lst:\n        s += math.ceil(i / x)\n    return s <= h\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    tag = max(lst)\n    ans = bsearch(lst, tag)\n    print(ans)", "import math\n\ndef bsearch(lst, m, h):\n    l = 1\n    r = m\n    ans = r\n    while l <= r:\n        mid = (l + r) // 2\n        if check(lst, mid, h):\n            ans = min(ans, mid)\n            r = mid - 1\n        else:\n            l = mid + 1\n    return ans\n\ndef check(lst, x, h):\n    s = 0\n    for i in lst:\n        s += math.ceil(i / x)\n    return s <= h\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    lst = list(map(int, input().split()))\n    tag = max(lst)\n    ans = bsearch(lst, tag, h)\n    print(ans)", "from math import *\n\ndef bisekcija():\n    lo = 1\n    hi = max(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if moze(mid, a, H):\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n\ndef moze(K, a, H):\n    s = 0\n    for i in a:\n        s = s + ceil(i / K)\n    if s > H:\n        return False\n    else:\n        return True\nfor i in range(int(input())):\n    (n, H) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a = sorted(a)\n    print(bisekcija())", "from math import *\n\ndef bisekcija():\n    lo = 1\n    hi = max(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if moze(mid, a, H):\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n\ndef moze(K, a, H):\n    s = 0\n    for i in a:\n        s = s + ceil(i / K)\n    if s > H:\n        return False\n    else:\n        return True\nfor i in range(int(input())):\n    (n, H) = map(int, input().split())\n    a = list(map(int, input().split()))\n    print(bisekcija())", "import math\nfor _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    A = list(map(int, input().split()))\n    ans = max(A)\n    l = 1\n    hi = max(A)\n    while l <= hi:\n        i = (l + hi) // 2\n        c = 0\n        for j in range(N):\n            c += math.ceil(A[j] / i)\n        if c <= H:\n            ans = min(ans, i)\n            hi = i - 1\n        else:\n            l = i + 1\n    print(ans)", "def trace(bIP, bPH):\n    hT = 0\n    for bICP in bIP:\n        bICPAE = bICP\n        temp = bICPAE // bPH\n        if bICPAE % bPH != 0:\n            temp = temp + 1\n        hT = hT + temp\n    return hT\nnOTC = int(input())\nfor _ in range(0, nOTC):\n    (nOP, hG) = input().split()\n    (nOP, hG) = (int(nOP), int(hG))\n    bIP = list(map(int, input().split()))\n    (st, end) = (1, max(bIP))\n    ans = -1\n    while st <= end:\n        bPH = (st + end) // 2\n        hT = trace(bIP, bPH)\n        if hT > hG:\n            st = bPH + 1\n        else:\n            ans = bPH\n            end = bPH - 1\n    print(ans)", "def trace(bIP, bPH):\n    hT = 0\n    for bICP in bIP:\n        bICPAE = bICP\n        temp = bICPAE // bPH\n        if bICPAE % bPH != 0:\n            temp = temp + 1\n        hT = hT + temp\n    return hT\nnOTC = int(input())\nfor _ in range(0, nOTC):\n    (nOP, hG) = input().split()\n    (nOP, hG) = (int(nOP), int(hG))\n    bIP = list(map(int, input().split()))\n    (st, end) = (1, max(bIP))\n    ans = -1\n    while st <= end:\n        bPH = (st + end) // 2\n        hT = trace(bIP, bPH)\n        if hT > hG:\n            st = bPH + 1\n        else:\n            ans = bPH\n            end = bPH - 1\n    print(ans)", "import math\n\ndef trace(bIP, bPH):\n    hT = 0\n    for bICP in bIP:\n        bICPAE = bICP\n        hT = hT + math.ceil(bICPAE / bPH)\n    return hT\nnOTC = int(input())\nfor _ in range(0, nOTC):\n    (nOP, hG) = input().split()\n    (nOP, hG) = (int(nOP), int(hG))\n    bIP = list(map(int, input().split()))\n    (st, end) = (1, max(bIP))\n    ans = -1\n    while st <= end:\n        bPH = (st + end) // 2\n        hT = trace(bIP, bPH)\n        if hT > hG:\n            st = bPH + 1\n        else:\n            ans = bPH\n            end = bPH - 1\n    print(ans)", "import math\n\ndef return_K(arr, K):\n    tot = 0\n    for i in range(len(arr)):\n        tot += math.ceil(arr[i] / K)\n    return tot\nfor _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = 1\n    h = max(arr)\n    ans = -1\n    while l <= h:\n        mid = (l + h) // 2\n        cnt = return_K(arr, mid)\n        if cnt > H:\n            l = mid + 1\n        else:\n            ans = mid\n            h = mid - 1\n    print(ans)", "import math\n\ndef return_K(arr, K):\n    tot = 0\n    for i in range(len(arr)):\n        tot += math.ceil(arr[i] / K)\n    return tot\nfor _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = 1\n    h = max(arr)\n    ans = -1\n    while l <= h:\n        mid = (l + h) // 2\n        cnt = return_K(arr, mid)\n        if cnt > H:\n            l = mid + 1\n        else:\n            ans = mid\n            h = mid - 1\n    print(ans)", "import math\n\ndef return_K(arr, K):\n    tot = 0\n    for i in range(len(arr)):\n        tot += math.ceil(arr[i] / K)\n    return tot\nfor _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    l = int(math.ceil(min(arr) * (N / H)))\n    h = max(arr)\n    ans = -1\n    while l <= h:\n        mid = (l + h) // 2\n        cnt = return_K(arr, mid)\n        if cnt > H:\n            l = mid + 1\n        else:\n            ans = mid\n            h = mid - 1\n    print(ans)", "import math\n\ndef koko(arr, h):\n    lo = 0\n    hi = max(arr)\n    res = 0\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if isvalid(arr, h, mid):\n            res = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    return res\n\ndef isvalid(arr, h, k):\n    su = 0\n    for i in range(len(arr)):\n        if k == 0:\n            return False\n        su += math.ceil(arr[i] / k)\n        if su > h:\n            return False\n    return True\n\ndef main():\n    koko(arr, h)\nt = int(input())\nwhile t:\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(koko(arr, h))\n    t -= 1", "import math\nT = int(input())\nfor _ in range(T):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    mini = 1\n    maxi = max(a)\n    mid = (mini + maxi) // 2\n    while mini < maxi:\n        mid = (mini + maxi) // 2\n        total = 0\n        for i in a:\n            total = total + math.ceil(i / mid)\n        if total <= h:\n            k = mid\n            maxi = mid\n        else:\n            mini = mid + 1\n    print(max(mini, mid))", "import math\nT = int(input())\nfor _ in range(T):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    k = 0\n    mini = 1\n    maxi = max(a)\n    mid = (mini + maxi) // 2\n    while mini < maxi:\n        mid = (mini + maxi) // 2\n        total = 0\n        for i in a:\n            total = total + math.ceil(i / mid)\n        if total <= h:\n            k = mid\n            maxi = mid\n        else:\n            mini = mid + 1\n    print(max(mini, mid))", "import math\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    mini = 1\n    maxi = max(l)\n    k_now = -1\n    flag = True\n    mid = -1\n    while mini < maxi:\n        cost = 0\n        mid = (mini + maxi) // 2\n        for i in l:\n            cost += math.ceil(i / mid)\n        if cost <= h:\n            k_now = mid\n            maxi = mid\n        else:\n            mini = mid + 1\n    print(max(mini, mid))", "import math\nT = int(input())\nwhile T:\n    s = input().split()\n    n = int(s[0])\n    h = int(s[1])\n    arr = [int(i) for i in input().split()]\n    beg = 1\n    end = max(arr)\n    k = 0\n    while beg <= end:\n        mid = (beg + end) // 2\n        hrs = 0\n        for i in arr:\n            hrs += math.ceil(i / mid)\n        if hrs <= h:\n            ans = mid\n            end = mid - 1\n        else:\n            beg = mid + 1\n    print(ans)\n    T = T - 1", "from math import ceil\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    beg = 1\n    end = max(a)\n    mid = 0\n    ans = -1\n    while beg <= end:\n        mid = (beg + end) // 2\n        hrs = 0\n        for i in range(n):\n            hrs += ceil(a[i] / mid)\n        if hrs <= h:\n            ans = mid\n            end = mid - 1\n        else:\n            beg = mid + 1\n    print(ans)", "import math\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    left = 1\n    right = max(a)\n    ans = 0\n    while left <= right:\n        mid = left + (right - left) // 2\n        sum = 0\n        for j in a:\n            sum += math.ceil(j / mid)\n        if sum > h:\n            left = mid + 1\n        elif sum <= h:\n            ans = mid\n            right = mid - 1\n    else:\n        print(ans)", "import math\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = [int(j) for j in input().split()]\n    left = 1\n    right = 10 ** 9\n    ans = 0\n    while left <= right:\n        mid = left + (right - left) // 2\n        sum = 0\n        for j in a:\n            sum += math.ceil(j / mid)\n        if sum > h:\n            left = mid + 1\n        elif sum <= h:\n            ans = mid\n            right = mid - 1\n    else:\n        print(ans)", "from math import ceil\n\ndef is_valid_k(k, l, h):\n    s = 0\n    for i in l:\n        s += ceil(i / k)\n    if s <= h:\n        return True\n    return False\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    lo = 1\n    hi = max(l)\n    while lo < hi:\n        mid = int(lo + (hi - lo) / 2)\n        valid = is_valid_k(mid, l, h)\n        if valid:\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "from math import ceil\n\ndef is_valid_k(k, l, h):\n    s = 0\n    for i in l:\n        s += ceil(i / k)\n    if s <= h:\n        return True\n    return False\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    lo = 1\n    hi = max(l)\n    while lo < hi:\n        mid = int(lo + (hi - lo) / 2)\n        valid = is_valid_k(mid, l, h)\n        if valid:\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "from math import ceil\n\ndef is_valid_k(k, l, h):\n    s = 0\n    for i in l:\n        s += ceil(i / k)\n    if s <= h:\n        return True\n    return False\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    lo = 1\n    hi = max(l)\n    while lo < hi:\n        mid = int(lo + (hi - lo) / 2)\n        valid = is_valid_k(mid, l, h)\n        if valid:\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "from math import ceil\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    k = None\n    l = 1\n    r = max(l1)\n    while l < r:\n        m = (l + r) // 2\n        k1 = m\n        t = 0\n        for i in range(n):\n            t += ceil(l1[i] / k1)\n        if t > h:\n            l = m + 1\n        else:\n            r = m\n    print(l)", "from math import ceil\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    k = None\n    l = 1\n    r = max(l1)\n    ans = None\n    while l <= r:\n        m = (l + r) // 2\n        k1 = m\n        t = 0\n        for i in range(n):\n            t += ceil(l1[i] / k1)\n        if t > h:\n            l = m + 1\n        else:\n            ans = m\n            r = m - 1\n    print(ans)", "from math import ceil\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    k = None\n    l = 1\n    r = max(l1)\n    while l < r:\n        m = (l + r) // 2\n        k1 = m\n        t = 0\n        for i in range(n):\n            t += ceil(l1[i] / k1)\n        if t > h:\n            l = m + 1\n        else:\n            r = m\n    print(r)", "from math import ceil\nfor i in range(int(input())):\n    (n, h) = map(int, input().split())\n    l1 = list(map(int, input().split()))\n    k = None\n    l = 1\n    r = max(l1)\n    while l < r:\n        m = (l + r) // 2\n        k1 = m\n        t = 0\n        for i in range(n):\n            t += ceil(l1[i] / k1)\n        if t > h:\n            l = m + 1\n        else:\n            r = m\n    print(l)", "from math import ceil\n\ndef is_valid_k(k, l, h):\n    s = 0\n    for i in l:\n        s += ceil(i / k)\n    if s <= h:\n        return True\n    return False\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    lo = 1\n    hi = max(l)\n    while lo < hi:\n        mid = int(lo + (hi - lo) / 2)\n        valid = is_valid_k(mid, l, h)\n        if valid:\n            hi = mid\n        else:\n            lo = mid + 1\n    print(lo)", "import math\n\ndef speed(a, mid, h):\n    tot = 0\n    for i in a:\n        tot += math.ceil(i / mid)\n    if int(tot) <= h:\n        return True\n    return False\nt = int(input())\nfor i in range(t):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    a.sort()\n    low = 1\n    high = a[n - 1]\n    ans = 0\n    while low <= high:\n        mid = low + (high - low) // 2\n        if speed(a, mid, h) == True:\n            ans = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    print(ans)", "import math\n\ndef solve(arr, n):\n    s = 0\n    for i in arr:\n        s += math.ceil(i / n)\n    return s\n\ndef BS(arr, n, hr, mx):\n    l = 1\n    h = mx\n    while l <= h:\n        mid = (l + h) // 2\n        n = solve(arr, mid)\n        if n <= hr:\n            res = mid\n            h = mid - 1\n        else:\n            l = mid + 1\n    return res\nfor t in range(int(input())):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    mx = max(arr)\n    print(BS(arr, n, h, mx))", "import math\n\ndef isTrue(l, n, k):\n    b = 0\n    for i in l:\n        b = b + math.ceil(i / n)\n    if b <= k:\n        return True\n    else:\n        return False\nt = int(input())\nfor i in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    f = 1\n    r = max(l)\n    res = 0\n    while f <= r:\n        n = (f + r) // 2\n        if isTrue(l, n, k):\n            res = n\n            r = n - 1\n        else:\n            f = n + 1\n    print(res)\n\ndef isTrue(l, n, k):\n    b = 0\n    for i in range(l):\n        b = b + i / n\n    if b < k:\n        return True\n    else:\n        return False", "for _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (l, r) = (1, 1000000000)\n    while l < r:\n        k = (l + r) // 2\n        if sum([i // k + int(i % k != 0) for i in arr]) <= h:\n            r = k\n        else:\n            l = k + 1\n    print(l)", "def godFunc(arr, k, h):\n    noh = sum([i // k + int(i % k != 0) for i in arr])\n    return noh <= h\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (l, r) = (1, 1000000000)\n    while l < r:\n        mid = (l + r) // 2\n        if godFunc(arr, mid, h):\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "def godFunc(arr, k, h):\n    noh = sum([i // k + int(i % k != 0) for i in arr])\n    return noh <= h\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    (l, r) = (1, 1000000000)\n    while l < r:\n        mid = (l + r) // 2\n        if godFunc(arr, mid, h):\n            r = mid\n        else:\n            l = mid + 1\n    print(l)", "from math import ceil\n\ndef is_ans(arr, k, h):\n    count = 0\n    for i in arr:\n        count += ceil(i / k)\n    if count <= h:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    li = list(map(int, input().split()))\n    lo = 1\n    hi = max(li)\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if is_ans(li, mid, h):\n            ans = mid\n            hi = mid - 1\n        else:\n            lo = mid + 1\n    print(ans)", "import math\n\ndef isvalid(l, m, k):\n    c = 0\n    for i in l:\n        c += math.ceil(i / m)\n    if c <= k:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = 1\n    e = max(l)\n    ans = -1\n    while s <= e:\n        m = (s + e) // 2\n        if isvalid(l, m, k):\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    print(ans)", "import math\n\ndef isvalid(l, m, k):\n    c = 0\n    for i in l:\n        c += math.ceil(i / m)\n    if c <= k:\n        return True\n    else:\n        return False\nt = int(input())\nfor _ in range(t):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    s = 1\n    e = max(l)\n    ans = -1\n    while s <= e:\n        m = (s + e) // 2\n        if isvalid(l, m, k):\n            ans = m\n            e = m - 1\n        else:\n            s = m + 1\n    print(ans)", "from math import *\n\ndef check(arr, n, mid):\n    l = 0\n    for i in range(n):\n        l += ceil(arr[i] / mid)\n    return l\nfor u in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (x, y) = (1, max(l))\n    while x != y:\n        m = (x + y) // 2\n        s = check(l, n, m)\n        if s <= k:\n            y = m\n        else:\n            x = m + 1\n    print(x)", "import math\nfor _ in range(int(input())):\n    (n, hour) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (low, h) = (1, max(l))\n    while low != h:\n        mid = (low + h) // 2\n        count = 0\n        for i in l:\n            count += math.ceil(i / mid)\n        if count <= hour:\n            h = mid\n        else:\n            low = mid + 1\n    print(low)", "from math import *\nfor u in range(int(input())):\n    (n, k) = map(int, input().split())\n    l = list(map(int, input().split()))\n    (x, y) = (1, max(l))\n    while x != y:\n        m = (x + y) // 2\n        s = 0\n        for i in l:\n            s += ceil(i / m)\n        if s <= k:\n            y = m\n        else:\n            x = m + 1\n    print(x)", "from math import ceil\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    low = 1\n    high = max(arr)\n    while low != high:\n        mid = (low + high) // 2\n        check = 0\n        for i in arr:\n            check += ceil(i / mid)\n        if check <= h:\n            high = mid\n        else:\n            low = mid + 1\n    print(low)", "from math import ceil\n\ndef within(l, k, h):\n    s = 0\n    for i in range(len(l)):\n        t = ceil(l[i] / k)\n        s += t\n    if s <= h:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l_1 = 1\n    r_1 = max(l)\n    while l_1 != r_1:\n        mid = l_1 + (r_1 - l_1) // 2\n        if within(l, mid, h) == True:\n            r_1 = mid\n        else:\n            l_1 = mid + 1\n    print(l_1)", "import math\n\ndef b(l, s, h):\n    o = 0\n    for i in l:\n        o += math.ceil(i / s)\n    if o <= h:\n        return True\n    else:\n        return False\nt = int(input())\nfor z in range(t):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    q = 1\n    r = max(l)\n    while q != r:\n        s = (q + r) // 2\n        if b(l, s, h):\n            r = s\n        else:\n            q = s + 1\n    print(r)", "import math\n\ndef b(l, s, h):\n    o = 0\n    for i in l:\n        o += math.ceil(i / s)\n    if o <= h:\n        return True\n    else:\n        return False\nt = int(input())\nfor z in range(t):\n    (n, h) = map(int, input().split())\n    l = list(map(int, input().split()))\n    q = 1\n    r = max(l)\n    while q != r:\n        s = (q + r) // 2\n        if b(l, s, h):\n            r = s\n        else:\n            q = s + 1\n    print(r)", "from math import ceil\nans = []\nfor _ in range(int(input())):\n    (N, H) = map(int, input().strip().split())\n    Ai = list(map(int, input().strip().split()))\n\n    def canEat(k: int):\n        total = 0\n        for v in Ai:\n            total += ceil(v / k)\n        return total <= H\n    left = 1\n    right = max(Ai)\n    while left < right:\n        m = left + (right - left) // 2\n        if left == m or right == m:\n            break\n        if canEat(m):\n            right = m\n        else:\n            left = m\n    ans.append(right)\nprint(*ans, sep='\\n')", "from math import ceil\n\ndef banana(s, b, limit):\n    r = 0\n    for i in s:\n        r += ceil(i / b)\n    if r <= limit:\n        return True\n    else:\n        return False\ntest = int(input())\nfor _ in range(test):\n    (n, h) = map(int, input().split())\n    s = list(map(int, input().split()))\n    t = 1\n    c = max(s)\n    while t != c:\n        b = (t + c) // 2\n        if banana(s, b, h):\n            c = b\n        else:\n            t = b + 1\n    print(t)", "from math import ceil\n\ndef banana(s, b, limit):\n    r = 0\n    for i in s:\n        r += ceil(i / b)\n    if r <= limit:\n        return True\n    else:\n        return False\nT = int(input())\nfor i in range(T):\n    (N, H) = map(int, input().split())\n    s = list(map(int, input().split()))\n    t = 1\n    c = max(s)\n    while t != c:\n        b = (t + c) // 2\n        if banana(s, b, H):\n            c = b\n        else:\n            t = b + 1\n    print(t)", "from math import ceil\n\ndef banana(s, b, limit):\n    r = 0\n    for i in s:\n        r += ceil(i / b)\n    if r <= limit:\n        return True\n    else:\n        return False\nT = int(input())\nfor i in range(T):\n    (N, H) = map(int, input().split())\n    s = list(map(int, input().split()))\n    t = 1\n    c = max(s)\n    while t != c:\n        b = (t + c) // 2\n        if banana(s, b, H):\n            c = b\n        else:\n            t = b + 1\n    print(t)", "from math import ceil\n\ndef works(array, value, limit):\n    p = 0\n    for i in array:\n        p += ceil(i / value)\n    if p <= limit:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    array = list(map(int, input().split()))\n    low = 1\n    high = max(array)\n    while low != high:\n        middle = (low + high) // 2\n        if works(array, middle, H):\n            high = middle\n        else:\n            low = middle + 1\n    print(low)", "from math import ceil\n\ndef works(array, value, limit):\n    p = 0\n    for i in array:\n        p += ceil(i / value)\n    if p <= limit:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    (N, H) = map(int, input().split())\n    array = list(map(int, input().split()))\n    low = 1\n    high = max(array)\n    while low != high:\n        middle = (low + high) // 2\n        if works(array, middle, H):\n            high = middle\n        else:\n            low = middle + 1\n    print(low)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    (n, h) = map(int, input().split())\n    a = [int(x) for x in input().split()]\n    s = sum(a)\n    mx = max(a)\n    low = 1\n    high = mx\n    mn = 0\n    if n == h:\n        print(mx)\n    else:\n        while low <= high:\n            k = (low + high) // 2\n            s = 0\n            for ele in a:\n                s += (ele + k - 1) // k\n            if s <= h:\n                high = k - 1\n                mn = k\n            else:\n                low = k + 1\n        print(mn)", "def mineat(n, h, arr):\n    from math import ceil\n    (left, right) = (1, max(arr))\n    while left < right:\n        mid = left + (right - left) // 2\n        allot = 0\n        for i in range(n):\n            allot += ceil(arr[i] / mid)\n            if allot > h:\n                break\n        if allot > h:\n            left = mid + 1\n        elif allot <= h:\n            right = mid\n    return left\nt = int(input())\nfor _ in range(t):\n    (n, h) = map(int, input().split())\n    arr = list(map(int, input().split()))\n    print(mineat(n, h, arr))", "from math import ceil\n\ndef check(b, n, p, lim):\n    ans = 0\n    for i in b:\n        ans += ceil(i / p)\n    if ans <= lim:\n        return True\n    else:\n        return False\nfor _ in range(int(input())):\n    (n, k) = map(int, input().split())\n    a = list(map(int, input().split()))\n    p = max(a)\n    (l, r) = (1, p)\n    while l != r:\n        m = (l + r) // 2\n        if check(a, n, m, k):\n            r = m\n        else:\n            l = m + 1\n    print(r)", "def bananas(lower, upper):\n    k = (upper + lower) // 2\n    if upper <= lower:\n        return k\n    sum = 0\n    for i in l:\n        if i % k == 0:\n            sum += i / k\n        else:\n            sum += i // k + 1\n    if sum > hours:\n        return bananas(k + 1, upper)\n    elif sum == hours:\n        return bananas(lower, k)\n    else:\n        return bananas(lower, k)\ntest = int(input())\nfor i in range(test):\n    nandh = [int(i) for i in input().split()]\n    hours = nandh[1]\n    l = [int(i) for i in input().split()]\n    max = l[0]\n    for i in l:\n        if i > max:\n            max = i\n    print(bananas(1, max))", "from math import ceil\n\ndef condition(arr, H, k):\n    if k == 0:\n        return False\n    s = 0\n    for i in range(len(arr)):\n        if arr[i] <= k:\n            s += 1\n        else:\n            s += ceil(arr[i] / k)\n    return s <= H\nt = int(input())\nwhile t > 0:\n    (n, H) = list(map(int, input().split(' ')))\n    arr = list(map(int, input().split(' ')))\n    h = max(arr) - 1\n    l = 0\n    m = (l + h) // 2\n    flag = 0\n    while l <= h:\n        if condition(arr, H, m + 1):\n            h = m - 1\n            k = m\n            flag = 1\n            m = (h + l) // 2\n        else:\n            l = m + 1\n            if flag == 0:\n                k = m\n            m = (h + l) // 2\n    print(k + 1)\n    t -= 1", "from math import ceil\n\ndef sum_arr(arr, k):\n    su = 0\n    for elem in arr:\n        su += ceil(elem / k)\n    return su\nt = int(input())\nfor _ in range(t):\n    (n, h) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    (b, e) = (0, max(a))\n    ans = 0\n    while b <= e:\n        mid = (b + e) // 2\n        if sum_arr(a, mid + 1) > h:\n            b = mid + 1\n            ans = mid + 1\n        else:\n            e = mid - 1\n    print(ans + 1)", "from math import ceil\n\ndef sum_arr(arr, k):\n    su = 0\n    for elem in arr:\n        su += ceil(elem / k)\n    return su\nt = int(input())\nfor _ in range(t):\n    (n, h) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    (b, e) = (0, max(a) - 1)\n    ans = 0\n    while b <= e:\n        mid = (b + e) // 2\n        if sum_arr(a, mid + 1) > h:\n            b = mid + 1\n            ans = mid + 1\n        else:\n            e = mid - 1\n    print(ans + 1)", "from math import ceil\n\ndef sum_k(arr, k):\n    su = 0\n    for i in arr:\n        su += ceil(i / k)\n    return su\nfor _ in range(int(input())):\n    (n, h) = tuple(map(int, input().split()))\n    a = list(map(int, input().split()))\n    (low, high) = (0, max(a) - 1)\n    count = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if sum_k(a, mid + 1) > h:\n            low = mid + 1\n            count = mid + 1\n        else:\n            high = mid - 1\n    print(count + 1)", "from math import ceil\n\ndef is_possible(a, val, h):\n    ct = 0\n    for elem in a:\n        ct += ceil(elem / val)\n    return ct <= h\n\ndef binarySearch(n, h, a):\n    mmin = 1\n    mmax = max(a)\n    while mmin <= mmax:\n        mid = (mmin + mmax) // 2\n        if is_possible(a, mid, h):\n            mmax = mid - 1\n        else:\n            mmin = mid + 1\n    return mmin\nfor _ in range(int(input())):\n    (n, h) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ans = binarySearch(n, h, a)\n    print(ans)", "from bisect import bisect_left\n\ndef searchCandies(a, n, k, ho):\n    (l, h, m) = (1, 1000000000, 0)\n    while l <= h:\n        (m, s) = ((l + h) // 2, 0)\n        for i in range(n):\n            if a[i] % m != 0:\n                s += a[i] // m + 1\n            else:\n                s += a[i] // m\n        if s > ho:\n            l = m + 1\n        else:\n            h = m - 1\n    return l\n\ndef main():\n    t = int(input())\n    for w in range(t):\n        (n, h) = list(map(int, input().split()))\n        a = list(map(int, input().split()))\n        print(searchCandies(a, n, max(a), h))\nmain()", "from math import ceil\n\ndef is_possible(a, val, h):\n    ct = 0\n    for elem in a:\n        ct += ceil(elem / val)\n    return ct <= h\n\ndef soln(n, h, a):\n    ssum = sum(a)\n    mmin = ceil(ssum / h)\n    mmax = max(a)\n    while mmin <= mmax:\n        mid = (mmin + mmax) // 2\n        if is_possible(a, mid, h):\n            mmax = mid - 1\n        else:\n            mmin = mid + 1\n    return mmin\n\ndef main():\n    t = int(input())\n    while t:\n        (n, h) = [int(i) for i in input().split()]\n        a = [int(i) for i in input().split()]\n        ans = soln(n, h, a)\n        print(ans)\n        t -= 1\nmain()", "from math import ceil\n\ndef cal(v):\n    val = 0\n    for i in A:\n        val += ceil(i / v)\n    return val\nfor _ in range(int(input())):\n    (N, H) = list(map(int, input().split()))\n    A = list(map(int, input().split()))\n    A.sort()\n    (lb, ub) = (1, A[N - 1])\n    while lb <= ub:\n        mid = (lb + ub) // 2\n        val = cal(mid)\n        if val <= H:\n            ans = mid\n            ub = mid - 1\n        else:\n            lb = mid + 1\n    print(ans)"]