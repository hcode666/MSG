["INFTY = 100000000\n\ndef find_num_days(price_threshold):\n    curr_pos = 0\n    took_days = 0\n    while curr_pos < total_cities:\n        (can_move, cum_dist) = (0, 0)\n        while curr_pos + can_move < total_cities and cum_dist + dists[1 + can_move + curr_pos] <= max_day_dist:\n            can_move += 1\n            cum_dist += dists[can_move + curr_pos]\n        while curr_pos + can_move < total_cities and can_move > 0 and (costs[curr_pos + can_move] > price_threshold):\n            can_move -= 1\n        if can_move == 0:\n            return INFTY\n        curr_pos += can_move\n        took_days += 1\n    return took_days\ntests = int(input())\nfor _ in range(tests):\n    (total_cities, max_day_dist) = [int(x) for x in input().split()]\n    (dists, costs) = ([None] * (total_cities + 1), [None] * (total_cities + 1))\n    for i in range(total_cities):\n        (d_i, c_i) = [int(x) for x in input().split()]\n        dists[i + 1] = d_i\n        costs[i + 1] = c_i\n    L = find_num_days(price_threshold=total_cities + 1)\n    (low, high) = (min(costs[1:]) - 1, max(costs[1:]) + 1)\n    while high - low > 1:\n        mid = (low + high) // 2\n        if L < find_num_days(price_threshold=mid):\n            low = mid\n        else:\n            high = mid\n    ans = high\n    print(L, ans)", "INFTY = 100000000\n\ndef find_num_days(price_threshold):\n    curr_pos = 0\n    took_days = 0\n    while curr_pos < total_cities:\n        (can_move, cum_dist) = (0, 0)\n        while curr_pos + can_move < total_cities and cum_dist + dists[1 + can_move + curr_pos] <= max_day_dist:\n            can_move += 1\n            cum_dist += dists[can_move + curr_pos]\n        while curr_pos + can_move < total_cities and can_move > 0 and (costs[curr_pos + can_move] > price_threshold):\n            can_move -= 1\n        if can_move == 0:\n            return INFTY\n        curr_pos += can_move\n        took_days += 1\n    return took_days\ntests = int(input())\nfor _ in range(tests):\n    (total_cities, max_day_dist) = [int(x) for x in input().split()]\n    (dists, costs) = ([None] * (total_cities + 1), [None] * (total_cities + 1))\n    for i in range(total_cities):\n        (d_i, c_i) = [int(x) for x in input().split()]\n        dists[i + 1] = d_i\n        costs[i + 1] = c_i\n    L = find_num_days(price_threshold=total_cities + 1)\n    (low, high) = (min(costs[1:]) - 1, max(costs[1:]) + 1)\n    while high - low > 1:\n        mid = (low + high) // 2\n        if L < find_num_days(price_threshold=mid):\n            low = mid\n        else:\n            high = mid\n    ans = high\n    print(L, ans)"]