["for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    R = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        matrix.append(temp)\n    for (ind, i) in enumerate(R):\n        last = i\n        for i in range(m):\n            matrix[ind][i] = matrix[ind][i] + last\n            last = matrix[ind][i]\n    for i in range(m):\n        arr = []\n        for j in range(n):\n            arr.append(matrix[j][i])\n        arr.sort(reverse=True)\n        arr_dict = dict()\n        for (ind, item) in enumerate(arr):\n            if ind == 0:\n                arr_dict[item] = 0\n                last = item\n            elif item == last:\n                arr_dict[item] = arr_dict[last]\n            else:\n                arr_dict[item] = ind\n                last = item\n        for j in range(n):\n            matrix[j][i] = (matrix[j][i], arr_dict[matrix[j][i]])\n    count = 0\n    for i in matrix:\n        if i.index(max(i, key=lambda x: x[0])) != i.index(min(i, key=lambda x: x[1])):\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    R = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        matrix.append(temp)\n    for (ind, i) in enumerate(R):\n        last = i\n        for i in range(m):\n            matrix[ind][i] = matrix[ind][i] + last\n            last = matrix[ind][i]\n    for i in range(m):\n        arr = []\n        for j in range(n):\n            arr.append(matrix[j][i])\n        arr.sort(reverse=True)\n        arr_dict = dict()\n        for (ind, item) in enumerate(arr):\n            if ind == 0:\n                arr_dict[item] = 0\n                last = item\n            elif item == last:\n                arr_dict[item] = arr_dict[last]\n            else:\n                arr_dict[item] = ind\n                last = item\n        for j in range(n):\n            matrix[j][i] = (matrix[j][i], arr_dict[matrix[j][i]])\n    count = 0\n    for i in matrix:\n        if i.index(max(i, key=lambda x: x[0])) != i.index(min(i, key=lambda x: x[1])):\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    R = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        matrix.append(temp)\n    for (ind, i) in enumerate(R):\n        last = i\n        for i in range(m):\n            matrix[ind][i] = matrix[ind][i] + last\n            last = matrix[ind][i]\n    for i in range(m):\n        arr = []\n        for j in range(n):\n            arr.append(matrix[j][i])\n        arr.sort(reverse=True)\n        arr_dict = dict()\n        for (ind, item) in enumerate(arr):\n            if ind == 0:\n                arr_dict[item] = 0\n                last = item\n            elif item == last:\n                arr_dict[item] = arr_dict[last]\n            else:\n                arr_dict[item] = ind\n                last = item\n        for j in range(n):\n            matrix[j][i] = (matrix[j][i], arr_dict[matrix[j][i]])\n    count = 0\n    for i in matrix:\n        if i.index(max(i, key=lambda x: x[0])) != i.index(min(i, key=lambda x: x[1])):\n            count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    r = list(map(int, input().split()))\n    rating = [[r[i]] * m for i in range(n)]\n    ranking = [[0] * m for i in range(n)]\n    for i in range(n):\n        diff = list(map(int, input().split()))\n        for j in range(m):\n            rating[i][j] += diff[j]\n            if j + 1 < m:\n                rating[i][j + 1] = rating[i][j]\n    for i in range(m):\n        rate = [[j, rating[j][i]] for j in range(n)]\n        rate = sorted(rate, key=lambda x: x[1], reverse=True)\n        c = 1\n        gap = 0\n        for j in range(n):\n            if j > 0 and rate[j - 1][1] == rate[j][1]:\n                gap += 1\n            if j > 0 and rate[j - 1][1] != rate[j][1]:\n                c += 1 + gap\n                gap = 0\n            ranking[rate[j][0]][i] = c\n    count = 0\n    for i in range(n):\n        rate = rating[i].copy()\n        i1 = rate.index(max(rate))\n        rank = ranking[i].copy()\n        i2 = rank.index(min(rank))\n        if i1 != i2:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    R = list(map(int, input().split()))\n    matrix = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        matrix.append(temp)\n    for (ind, i) in enumerate(R):\n        last = i\n        for i in range(m):\n            matrix[ind][i] = matrix[ind][i] + last\n            last = matrix[ind][i]\n    for i in range(m):\n        arr = []\n        for j in range(n):\n            arr.append(matrix[j][i])\n        arr.sort(reverse=True)\n        arr_dict = dict()\n        for (ind, item) in enumerate(arr):\n            if ind == 0:\n                arr_dict[item] = 0\n                last = item\n            elif item == last:\n                arr_dict[item] = arr_dict[last]\n            else:\n                arr_dict[item] = ind\n                last = item\n        for j in range(n):\n            matrix[j][i] = (matrix[j][i], arr_dict[matrix[j][i]])\n    count = 0\n    for i in matrix:\n        if i.index(max(i, key=lambda x: x[0])) != i.index(min(i, key=lambda x: x[1])):\n            count += 1\n    print(count)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    r = list(map(int, input().split()))\n    rating = [[r[i]] * m for i in range(n)]\n    ranking = [[0] * m for i in range(n)]\n    for i in range(n):\n        diff = list(map(int, input().split()))\n        for j in range(m):\n            rating[i][j] += diff[j]\n            if j + 1 < m:\n                rating[i][j + 1] = rating[i][j]\n    for i in range(m):\n        rate = [[j, rating[j][i]] for j in range(n)]\n        rate = sorted(rate, key=lambda x: x[1], reverse=True)\n        c = 1\n        gap = 0\n        for j in range(n):\n            if j > 0 and rate[j - 1][1] == rate[j][1]:\n                gap += 1\n            if j > 0 and rate[j - 1][1] != rate[j][1]:\n                c += 1 + gap\n                gap = 0\n            ranking[rate[j][0]][i] = c\n    count = 0\n    for i in range(n):\n        rate = rating[i].copy()\n        i1 = rate.index(max(rate))\n        rank = ranking[i].copy()\n        i2 = rank.index(min(rank))\n        if i1 != i2:\n            count += 1\n    print(count)", "def check(rat, rank_mont):\n    c = 0\n    for i in range(len(rank_mont)):\n        if rat[i] != rank_mont[i]:\n            c += 1\n    return c\n\ndef ranking(rat, rank_min, mont, n, m):\n    rat_sort = []\n    for i in range(m):\n        rat_sort.append(sorted(rat[i], reverse=True, key=lambda x: x[0]))\n    for i in range(m):\n        (r, j) = (1, 0)\n        while j < n:\n            key = rat_sort[i][j][0]\n            c = 0\n            while j < n:\n                if key == rat_sort[i][j][0]:\n                    if rank_min[rat_sort[i][j][1] - 1] > r:\n                        rank_min[rat_sort[i][j][1] - 1] = r\n                        mont[rat_sort[i][j][1] - 1] = i + 1\n                    c += 1\n                else:\n                    break\n                j += 1\n            r += c\nfor T in range(int(input())):\n    (n, m) = map(int, input().split())\n    initial_rating = list(map(int, input().split()))\n    rat = [list(map(int, input().split())) for i in range(n)]\n    (rat_player, m_rat_player) = ([], [])\n    for i in range(n):\n        (m_rat, x) = (0, [])\n        for j in range(m):\n            x.append(initial_rating[i] + rat[i][j])\n            initial_rating[i] = x[j]\n            if m_rat < x[j]:\n                m_rat = x[j]\n                month = j + 1\n        rat_player.append(x)\n        m_rat_player.append(month)\n    rat_month = []\n    for i in range(m):\n        x = []\n        for j in range(n):\n            x.append([rat_player[j][i], j + 1])\n        rat_month.append(x)\n    (rank_min, mont) = ([501] * n, [0] * n)\n    ranking(rat_month, rank_min, mont, n, m)\n    count = check(m_rat_player, mont)\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    r = list(map(int, input().split()))\n    mat = [[] for i in range(n)]\n    ranking = [[] for i in range(n)]\n    for i in range(n):\n        l = list(map(int, input().split()))\n        cur = r[i]\n        for j in l:\n            cur += j\n            mat[i].append(cur)\n    for i in range(m):\n        ar = []\n        for j in range(n):\n            ar.append([mat[j][i], j])\n        ar.sort(reverse=True, key=lambda x: x[0])\n        prev = -1\n        r = 1\n        x = 1\n        for j in range(n):\n            if ar[j][0] != prev:\n                r = x\n            ranking[ar[j][1]].append(r)\n            prev = ar[j][0]\n            x += 1\n    brt = []\n    brk = []\n    for i in range(n):\n        brt.append(mat[i].index(max(mat[i])))\n    for i in range(n):\n        brk.append(ranking[i].index(min(ranking[i])))\n    ans = 0\n    for i in range(n):\n        if brk[i] != brt[i]:\n            ans += 1\n    print(ans)", "t = int(input())\nfor i in range(0, t):\n    ans = 0\n    nm = input().split()\n    (n, m) = (int(nm[0]), int(nm[1]))\n    (rows, cols) = (m, n)\n    a = [[(0, 0) for i in range(cols)] for j in range(rows)]\n    max_rating_month = [0 for i in range(cols)]\n    curr_rating = list(map(int, input().strip().split()))[:n]\n    for i in range(0, n):\n        line = list(map(int, input().strip().split()))[:m]\n        max = 0\n        for j in range(0, m):\n            curr_rating[i] += line[j]\n            if curr_rating[i] > max:\n                max_rating_month[i] = j\n                max = curr_rating[i]\n            a[j][i] = (i, curr_rating[i])\n    ranking = [[0 for i in range(n)] for j in range(m)]\n    for i in range(m):\n        a[i].sort(key=lambda x: -x[1])\n        rank = 1\n        ranking[i][a[i][0][0]] = 1\n        for j in range(1, n):\n            if a[i][j - 1][1] == a[i][j][1]:\n                ranking[i][a[i][j][0]] = rank\n            else:\n                ranking[i][a[i][j][0]] = j + 1\n                rank = j + 1\n    for i in range(n):\n        best_rank = 501\n        best_rank_month = 0\n        for j in range(m):\n            if ranking[j][i] < best_rank:\n                best_rank = ranking[j][i]\n                best_rank_month = j\n        if best_rank_month != max_rating_month[i]:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rating = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    minrank = [float('inf')] * n\n    index2 = [0] * n\n    bestscore = [float('-inf')] * n\n    index1 = [0] * n\n    for i in range(m):\n        for j in range(n):\n            rating[j] += arr[j][i]\n        st = sorted(rating, reverse=True)\n        f = []\n        dindex = dict()\n        for j in range(len(st)):\n            if st[j] in dindex:\n                continue\n            dindex[st[j]] = j\n        for j in range(len(rating)):\n            f.append(dindex[rating[j]])\n        for ii in range(len(f)):\n            if minrank[ii] > f[ii]:\n                minrank[ii] = f[ii]\n                index1[ii] = i\n        for ii in range(len(rating)):\n            if bestscore[ii] < rating[ii]:\n                bestscore[ii] = rating[ii]\n                index2[ii] = i\n    count = 0\n    for (i, j) in zip(index2, index1):\n        if i != j:\n            count += 1\n    print(count)", "import sys\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    adj = []\n    for _ in range(n):\n        x = list(map(int, input().split()))\n        adj.append(x)\n    rating = defaultdict(lambda : -1)\n    rank = [[-1 for i in range(m + 1)] for j in range(n)]\n    b = [[-1 for i in range(m + 1)] for j in range(n)]\n    for i in range(n):\n        b[i][0] = a[i]\n    for i in range(0, n):\n        for j in range(1, m + 1):\n            b[i][j] = b[i][j - 1] + adj[i][j - 1]\n    for j in range(1, m + 1):\n        g = []\n        d = {}\n        for i in range(n):\n            g.append(b[i][j])\n        z = sorted(g, reverse=True)\n        c = 0\n        for i in z:\n            if i not in d:\n                c += 1\n                d[i] = c\n            else:\n                c += 1\n        for i in range(n):\n            rank[i][j] = d[b[i][j]]\n    for i in range(n):\n        mx = -1\n        for x in range(1, m + 1):\n            mx = max(mx, b[i][x])\n        for j in range(1, m + 1):\n            if b[i][j] == mx:\n                rating[i] = j\n                break\n    c = 0\n    for i in range(n):\n        ans = []\n        mi = sys.maxsize\n        for x in range(1, m + 1):\n            mi = min(mi, rank[i][x])\n        for j in range(1, m + 1):\n            if rank[i][j] == mi:\n                if j != rating[i]:\n                    c += 1\n                break\n    print(c)", "t = int(input())\nwhile t > 0:\n    (N, M) = map(int, input().split())\n    R = list(map(int, input().split()))\n    Ratings = []\n    Rankings = [[float('inf') for i in range(M)] for j in range(N)]\n    for i in range(N):\n        temp_ratings = list(map(int, input().split()))\n        temp = []\n        initial_rating = R[i]\n        for rate in temp_ratings:\n            temp.append(initial_rating + rate)\n            initial_rating += rate\n        Ratings.append(temp)\n    for i in range(M):\n        temp = []\n        for j in range(N):\n            temp.append(Ratings[j][i])\n        temp = sorted(temp, reverse=True)\n        dic = {}\n        for j in range(N):\n            if temp[j] not in dic:\n                dic[temp[j]] = j + 1\n        for j in range(N):\n            Rankings[j][i] = dic[Ratings[j][i]]\n    cnt = 0\n    for i in range(N):\n        best_rating = 0\n        best_rating_index = -1\n        best_ranking = float('inf')\n        best_ranking_index = -1\n        for j in range(M):\n            if Ratings[i][j] > best_rating:\n                best_rating = Ratings[i][j]\n                best_rating_index = j\n            if Rankings[i][j] < best_ranking:\n                best_ranking = Rankings[i][j]\n                best_ranking_index = j\n        if best_rating_index != best_ranking_index:\n            cnt += 1\n    print(cnt)\n    t -= 1", "def fun(rankings, n, m):\n    best_rating_month = [max(range(m), key=lambda x: (player[x], -x)) for player in rankings]\n    best_rank_month = fun2(rankings, n, m)\n    count = 0\n    for i in range(n):\n        if best_rank_month[i] != best_rating_month[i]:\n            count += 1\n    return count\n\ndef fun2(rankings, n, m):\n    month_wise = list(zip(*rankings))\n    player = []\n    rank = [[-1 for j in range(m)] for i in range(n)]\n    month = []\n    for j in range(m):\n        pseudorank = sorted(range(n), reverse=True, key=lambda x: (month_wise[j][x], -x))\n        lastranking = 0\n        rank[pseudorank[0]][j] = 0\n        for i_ in range(1, n):\n            if month_wise[j][pseudorank[i_]] == month_wise[j][pseudorank[i_ - 1]]:\n                rank[pseudorank[i_]][j] = lastranking\n            else:\n                rank[pseudorank[i_]][j] = i_\n                lastranking = i_\n    ans = [min(range(m), key=lambda i: (player[i], i)) for player in rank]\n    return ans\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ini_r = list(map(int, input().split()))\n    rankings = []\n    for i in range(n):\n        player = []\n        change = list(map(int, input().split()))\n        curr_r = ini_r[i]\n        for j in range(m):\n            curr_r += change[j]\n            player.append(curr_r)\n        rankings.append(player)\n    print(fun(rankings, n, m))", "import bisect\nt = int(input())\nwhile t > 0:\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    r = [int(x) for x in input().split()]\n    rat = [[0 for _ in range(n)] for j in range(m)]\n    for i in range(n):\n        x = [int(x) for x in input().split()]\n        rat[0][i] = r[i] + x[0]\n        for j in range(1, m):\n            rat[j][i] = rat[j - 1][i] + x[j]\n    y = []\n    best_rat = [0 for i in range(n)]\n    best_rank = [n + 1 for i in range(n)]\n    best_ind = [0 for i in range(n)]\n    for i in range(m):\n        y = []\n        z = []\n        for j in range(n):\n            if rat[i][j] > rat[best_rat[j]][j]:\n                best_rat[j] = i\n            y.append((-rat[i][j], j))\n            z.append(-rat[i][j])\n        y.sort()\n        z.sort()\n        for j in range(n):\n            if bisect.bisect_left(z, y[j][0]) < best_rank[y[j][1]]:\n                best_rank[y[j][1]] = bisect.bisect_left(z, y[j][0])\n                best_ind[y[j][1]] = i\n    ans = 0\n    for i in range(n):\n        if best_rat[i] != best_ind[i]:\n            ans += 1\n    print(ans)\n    t -= 1", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rating = list(map(int, input().split()))\n    track = [[] for i in range(n)]\n    cng = []\n    for i in range(n):\n        cng.append(list(map(int, input().split())))\n    for i in range(m):\n        for j in range(n):\n            rating[j] += cng[j][i]\n        x = sorted(enumerate(rating), key=lambda x: x[1], reverse=True)\n        r = 1\n        if i != 0:\n            if x[0][1] > track[x[0][0]][0] or r < track[x[0][0]][1]:\n                if x[0][1] > track[x[0][0]][0] and r < track[x[0][0]][1]:\n                    track[x[0][0]][2] = False\n                else:\n                    track[x[0][0]][2] = True\n                if x[0][1] > track[x[0][0]][0]:\n                    track[x[0][0]][0] = x[0][1]\n                if r < track[x[0][0]][1]:\n                    track[x[0][0]][1] = r\n            for k in range(1, n):\n                if x[k][1] != x[k - 1][1]:\n                    r = k + 1\n                if x[k][1] > track[x[k][0]][0] or r < track[x[k][0]][1]:\n                    if x[k][1] > track[x[k][0]][0] and r < track[x[k][0]][1]:\n                        track[x[k][0]][2] = False\n                    else:\n                        track[x[k][0]][2] = True\n                    if x[k][1] > track[x[k][0]][0]:\n                        track[x[k][0]][0] = x[k][1]\n                    if r < track[x[k][0]][1]:\n                        track[x[k][0]][1] = r\n        else:\n            track[x[0][0]].append(x[0][1])\n            track[x[0][0]].append(1)\n            track[x[0][0]].append(False)\n            for k in range(1, n):\n                if x[k][1] != x[k - 1][1]:\n                    r = k + 1\n                track[x[k][0]].append(x[k][1])\n                track[x[k][0]].append(r)\n                track[x[k][0]].append(False)\n    out = 0\n    for i in track:\n        if i[2]:\n            out += 1\n    print(out)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    scores = list(map(int, input().split()))\n    usr_mnthly = {}\n    usr_ranks = {}\n    for i in range(n):\n        scrs = list(map(int, input().split()))\n        usr_mnthly[i] = [scores[i]]\n        usr_ranks[i] = []\n        for j in scrs:\n            usr_mnthly[i].append(usr_mnthly[i][-1] + j)\n    for mnth in range(1, m + 1):\n        mnthly = {i: usr_mnthly[i][mnth] for i in range(n)}\n        mnthly = sorted(mnthly.items(), key=lambda x: x[1], reverse=True)\n        prev = -9999999999\n        rank = 0\n        pos = 1\n        for (key, value) in mnthly:\n            if value == prev:\n                usr_ranks[key].append(rank)\n                pos += 1\n            else:\n                rank += pos\n                usr_ranks[key].append(rank)\n                pos = 1\n            prev = value\n    ans = 0\n    for i in range(n):\n        mnths = usr_mnthly[i][1:]\n        ranks = usr_ranks[i]\n        if ranks.index(min(ranks)) != mnths.index(max(mnths)):\n            ans += 1\n    print(ans)", "from os import path\nimport sys\nfrom heapq import heappush, heappop\nfrom functools import cmp_to_key as ctk\nfrom collections import deque, defaultdict as dd\nfrom bisect import bisect, bisect_left, bisect_right, insort, insort_left, insort_right\nfrom itertools import permutations\nfrom datetime import datetime\nfrom math import ceil, sqrt, log, gcd\n\ndef ii():\n    return int(input())\n\ndef si():\n    return input().rstrip()\n\ndef mi():\n    return map(int, input().split())\n\ndef li():\n    return list(mi())\nabc = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\ninf = float('inf')\nvow = ['a', 'e', 'i', 'o', 'u']\n(dx, dy) = ([-1, 1, 0, 0], [0, 0, 1, -1])\n\ndef bo(i):\n    return ord(i) - ord('a')\nfile = 1\n\ndef solve():\n    for _ in range(ii()):\n        (n, m) = mi()\n        a = li()\n        ratting = [[] for i in range(n)]\n        ranking = [[] for i in range(n)]\n        for i in range(n):\n            x = a[i]\n            b = li()\n            mx = -inf\n            for j in range(m):\n                x += b[j]\n                ratting[i].append(x)\n        for i in range(m):\n            a = []\n            for j in range(n):\n                a.append(ratting[j][i])\n            freq = {}\n            for j in a:\n                if j not in freq:\n                    freq[j] = 0\n                freq[j] += 1\n            x = []\n            for j in freq.keys():\n                x.append([j, freq[j]])\n            x.sort(reverse=True)\n            c = 1\n            m1 = {}\n            for j in x:\n                m1[j[0]] = c\n                c += j[1]\n            for j in range(n):\n                ranking[j].append(m1[a[j]])\n        c = 0\n        for i in range(n):\n            mx1 = -inf\n            for j in ratting[i]:\n                mx1 = max(mx1, j)\n            mx2 = inf\n            for j in ranking[i]:\n                mx2 = min(mx2, j)\n            f = 1\n            f1 = 0\n            for j in range(m):\n                if ratting[i][j] == mx1 and ranking[i][j] == mx2 and (f1 == 0):\n                    f = 0\n                    break\n                if ranking[i][j] == mx2 or ratting[i][j] == mx1:\n                    f1 = 1\n            c += f\n        print(c)\nif file:\n    if path.exists('input.txt'):\n        sys.stdin = open('input.txt', 'r')\n        sys.stdout = open('output.txt', 'w')\n    else:\n        input = sys.stdin.readline\nsolve()", "def getRanking(ratingList, n, m):\n    rank = []\n    array2d = [[None for i in range(n)] for j in range(m)]\n    for i in range(m):\n        helper2d = [[None for i in range(2)] for j in range(n)]\n        for j in range(n):\n            helper2d[j][0] = j + 1\n            helper2d[j][1] = ratingList[j][i]\n        helper2d = sorted(helper2d, reverse=True, key=lambda x: x[1])\n        arr = [x for x in range(1, n + 1)]\n        for k in range(1, n):\n            if helper2d[k][1] == helper2d[k - 1][1]:\n                arr[k] = arr[k - 1]\n        for l in range(n):\n            array2d[i][helper2d[l][0] - 1] = arr[l]\n    for l in range(n):\n        minimum = float('inf')\n        minimumIndex = None\n        for o in range(m):\n            if minimum > array2d[o][l]:\n                minimum = array2d[o][l]\n                minimumIndex = o + 1\n        rank.append(minimumIndex)\n    return rank\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    r = list(map(int, input().split()))\n    c = [None for j in range(n)]\n    for i in range(n):\n        c[i] = list(map(int, input().split()))\n    ratingList = [None for i in range(n)]\n    for i in range(n):\n        temp = []\n        temp.append(r[i] + c[i][0])\n        for j in range(1, m):\n            temp.append(temp[j - 1] + c[i][j])\n        ratingList[i] = temp\n    playerRatings = []\n    for i in range(n):\n        maximum = float('-inf')\n        maximumMonth = None\n        for j in range(m):\n            if ratingList[i][j] > maximum:\n                maximum = ratingList[i][j]\n                maximumMonth = j + 1\n        playerRatings.append(maximumMonth)\n    playerRanking = getRanking(ratingList, n, m)\n    count = 0\n    for i in range(n):\n        if playerRanking[i] != playerRatings[i]:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    org_ratings = list(map(int, input().split()))\n    l = []\n    count = 0\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                l[i][j] = l[i][j] + org_ratings[i]\n            else:\n                l[i][j] = l[i][j] + l[i][j - 1]\n    ranks = [[-1 for i in range(len(l[0]))] for j in range(len(l))]\n    for i in range(m):\n        l2 = []\n        for j in range(n):\n            l2.append([l[j][i], j + 1])\n        l2.sort(reverse=True, key=lambda x: x[0])\n        for ind in range(len(l2)):\n            if ind == 0:\n                pos = 1\n            elif l2[ind][0] == l2[ind - 1][0]:\n                pos = ranks[l2[ind - 1][1] - 1][i]\n            else:\n                pos = ind + 1\n            ranks[l2[ind][1] - 1][i] = pos\n    for i in range(n):\n        if l[i].index(max(l[i])) != ranks[i].index(min(ranks[i])):\n            count += 1\n    print(count)", "import sys\nfrom collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    adj = []\n    for _ in range(n):\n        x = list(map(int, input().split()))\n        adj.append(x)\n    rating = defaultdict(lambda : -1)\n    rank = [[-1 for i in range(m + 1)] for j in range(n)]\n    b = [[-1 for i in range(m + 1)] for j in range(n)]\n    for i in range(n):\n        b[i][0] = a[i]\n    for i in range(0, n):\n        for j in range(1, m + 1):\n            b[i][j] = b[i][j - 1] + adj[i][j - 1]\n    for j in range(1, m + 1):\n        g = []\n        d = {}\n        for i in range(n):\n            g.append(b[i][j])\n        z = sorted(g, reverse=True)\n        c = 0\n        for i in z:\n            if i not in d:\n                c += 1\n                d[i] = c\n            else:\n                c += 1\n        for i in range(n):\n            rank[i][j] = d[b[i][j]]\n    for i in range(n):\n        mx = -1\n        for x in range(1, m + 1):\n            mx = max(mx, b[i][x])\n        for j in range(1, m + 1):\n            if b[i][j] == mx:\n                rating[i] = j\n                break\n    c = 0\n    for i in range(n):\n        ans = []\n        mi = sys.maxsize\n        for x in range(1, m + 1):\n            mi = min(mi, rank[i][x])\n        for j in range(1, m + 1):\n            if rank[i][j] == mi:\n                if j != rating[i]:\n                    c += 1\n                break\n    print(c)", "from sys import stdin, stdout, setrecursionlimit\nfrom math import gcd, ceil, sqrt\nfrom collections import Counter, deque\nfrom bisect import bisect_left, bisect_right\nii1 = lambda : int(stdin.readline().strip())\nis1 = lambda : stdin.readline().strip()\niia = lambda : list(map(int, stdin.readline().strip().split()))\nisa = lambda : stdin.readline().strip().split()\nsetrecursionlimit(100000)\nmod = 1000000007\ntc = ii1()\nfor _ in range(tc):\n    (n, m) = iia()\n    init = iia()\n    arr = []\n    for i in range(n):\n        arr.append(iia())\n    for i in range(n):\n        cur = init[i]\n        for j in range(m):\n            arr[i][j] += cur\n            cur = arr[i][j]\n    rank = [[0 for i in range(m)] for j in range(n)]\n    for i in range(m):\n        temp = []\n        for j in range(n):\n            temp.append(arr[j][i])\n        temp = sorted(list(temp), reverse=True)\n        d = {}\n        for k in range(len(temp)):\n            if temp[k] not in d:\n                d[temp[k]] = k + 1\n        cur = 1\n        for j in range(n):\n            rank[j][i] = d[arr[j][i]]\n    count = 0\n    for i in range(n):\n        if arr[i].index(max(arr[i])) != rank[i].index(min(rank[i])):\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rating = [int(x) for x in input().split()]\n    a = []\n    for _ in range(n):\n        a.append([int(x) for x in input().split()])\n    maxrating = [float('-inf')] * n\n    minrank = [float('inf')] * n\n    index1 = [0] * n\n    index2 = [0] * n\n    for j in range(m):\n        for i in range(n):\n            rating[i] += a[i][j]\n        st = sorted(rating, reverse=True)\n        d = dict()\n        curr = 0\n        for i in range(len(st)):\n            curr += 1\n            if st[i] in d:\n                continue\n            d[st[i]] = curr\n        ranks = [d[a] for a in rating]\n        for i in range(n):\n            if ranks[i] < minrank[i]:\n                minrank[i] = ranks[i]\n                index2[i] = j\n            if rating[i] > maxrating[i]:\n                maxrating[i] = rating[i]\n                index1[i] = j\n    count = 0\n    for (i, j) in zip(index1, index2):\n        if i != j:\n            count += 1\n    print(count)", "from collections import defaultdict as dd\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    l = []\n    d = [[] for i in range(n)]\n    for i in range(0, n):\n        b = list(map(int, input().split()))\n        l.append(b)\n    for i in range(0, m):\n        for j in range(0, n):\n            a[j] += l[j][i]\n            if len(d[j]) == 0:\n                d[j] += [a[j], i, 10000000000, i]\n        c = a[:]\n        c = set(c)\n        c = list(c)\n        c.sort(reverse=True)\n        d2 = dd(int)\n        d1 = dd(int)\n        for k in range(0, n):\n            d2[a[k]] = d2.get(a[k], 0) + 1\n        r = 0\n        for k in range(0, len(c)):\n            d1[c[k]] = r\n            r += d2[c[k]]\n        for j in range(0, n):\n            r = d1[a[j]]\n            if r < d[j][2]:\n                d[j][2] = r\n                d[j][3] = i\n            if a[j] > d[j][0]:\n                d[j][0] = a[j]\n                d[j][1] = i\n    ct = 0\n    for i in range(0, n):\n        if d[i][1] != d[i][3]:\n            ct += 1\n    print(ct)", "def number_of_players_who_peak_ratings_not_same_as_peak_ranking(ratings, no_of_months, no_of_players):\n    max_rating = [max(range(no_of_months), key=lambda i: (ratings[player][i], -i)) for player in range(no_of_players)]\n    max_ranking = compute_max_ranking(ratings, no_of_players, no_of_months)\n    return sum((max_rating[player] != max_ranking[player] for player in range(no_of_players)))\n\ndef compute_max_ranking(ratings, no_of_players, no_of_months):\n    ratings_by_month = list(zip(*ratings))\n    rankings = []\n    for month in range(no_of_months):\n        rankings.append(rank_players(list(range(no_of_players)), ratings_by_month[month]))\n    return list((min(range(no_of_months), key=lambda i: (rankings[i][player], i)) for player in range(no_of_players)))\n\ndef rank_players(ids, scores):\n    ids = sorted(ids, key=lambda i: scores[i], reverse=True)\n    ans = [0] * len(scores)\n    previous = scores[ids[0]]\n    latest_ranking = 0\n    for (i, player) in enumerate(ids):\n        if previous != scores[player]:\n            ans[player] = i\n            latest_ranking = i\n        else:\n            ans[player] = latest_ranking\n        previous = scores[player]\n    return ans\nT = int(input())\nfor _ in range(T):\n    (no_of_players, no_of_months) = map(int, input().split())\n    ratings = []\n    initial_ratings = list(map(int, input().split()))\n    for player in range(no_of_players):\n        change_in_ratings = list(map(int, input().split()))\n        current = initial_ratings[player]\n        player_ratings = []\n        for change in change_in_ratings:\n            player_ratings.append(current + change)\n            current += change\n        ratings.append(player_ratings)\n    print(number_of_players_who_peak_ratings_not_same_as_peak_ranking(ratings=ratings, no_of_months=no_of_months, no_of_players=no_of_players))", "from sys import stdin, stdout\nfrom bisect import *\nfrom itertools import accumulate\nfor i in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    r = []\n    for i in range(n):\n        b = list(accumulate(map(int, input().split())))\n        r.append(list((b[x] + a[i] for x in range(m))))\n    a = []\n    for i in range(m):\n        b = []\n        for j in range(n):\n            b.append(-r[j][i])\n        a.append(sorted(b))\n    c = {}\n    for i in range(n):\n        for j in range(m):\n            k = bisect_left(a[j], -r[i][j]) + 1\n            try:\n                if c[i][0] > k:\n                    c[i] = (k, j)\n            except:\n                c[i] = (k, j)\n    ans = 0\n    for i in range(n):\n        m1 = max(r[i])\n        if c[i][1] != r[i].index(m1):\n            ans += 1\n    print(ans)", "t = int(input())\nfor i in range(t):\n    in_ = input().split()\n    n = int(in_[0])\n    m = int(in_[1])\n    rank = n * [-1]\n    rat = n * [-1]\n    in_rat = [int(e) for e in input().split()]\n    ra = []\n    for e in range(m):\n        ra.append([])\n    for e in range(n):\n        a = [int(ee) for ee in input().split()]\n        in_ = in_rat[e]\n        lc = float('-inf')\n        max_rat = 0\n        for el in range(len(a)):\n            in_ = in_ + a[el]\n            ra[el].append(in_)\n            if in_ > lc:\n                lc = in_\n                max_rat = el\n        rat[e] = max_rat\n    rank_c = n * [n + 1]\n    for ind in range(len(ra)):\n        e = ra[ind]\n        T = [[e[i], i] for i in range(len(e))]\n        T.sort(key=lambda x: x[0], reverse=True)\n        T[0].append(1)\n        for el in range(1, len(T)):\n            if T[el][0] == T[el - 1][0]:\n                T[el].append(T[el - 1][2])\n            else:\n                T[el].append(el + 1)\n        for el in T:\n            inde = el[1]\n            cur = el[2]\n            if rank_c[inde] > cur:\n                rank_c[inde] = cur\n                rank[inde] = ind\n    res = 0\n    for e in range(n):\n        if rank[e] != rat[e]:\n            res += 1\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    inis = list(map(int, input().split()))\n    changes = []\n    for i in range(n):\n        changes.append(list(map(int, input().split())))\n        changes[i][0] += inis[i]\n    maxRating = [0] * n\n    Ranks = [[n] * m for i in range(n)]\n    temp = []\n    for i in range(n):\n        temp.append((changes[i][0], i))\n    temp.sort(key=lambda x: x[0], reverse=True)\n    Ranks[temp[0][1]][0] = 1\n    prevRank = 1\n    rankCtr = 0\n    for i in range(1, n):\n        if temp[i][0] == temp[i - 1][0]:\n            rankCtr += 1\n            Ranks[temp[i][1]][0] = prevRank\n        else:\n            prevRank += 1 + rankCtr\n            Ranks[temp[i][1]][0] = prevRank\n            rankCtr = 0\n    for i in range(n):\n        for j in range(1, m):\n            changes[i][j] += changes[i][j - 1]\n            if changes[i][j] > changes[i][maxRating[i]]:\n                maxRating[i] = j\n    for j in range(m):\n        temp = []\n        for i in range(n):\n            temp.append((changes[i][j], i))\n        temp.sort(key=lambda x: x[0], reverse=True)\n        Ranks[temp[0][1]][j] = 1\n        prevRank = 1\n        rankCtr = 0\n        for i in range(1, n):\n            if temp[i][0] == temp[i - 1][0]:\n                rankCtr += 1\n                Ranks[temp[i][1]][j] = min(Ranks[temp[i][1]][j], prevRank)\n            else:\n                prevRank += 1 + rankCtr\n                Ranks[temp[i][1]][j] = min(Ranks[temp[i][1]][j], prevRank)\n                rankCtr = 0\n    ans = 0\n    maxRanks = [0] * n\n    for i in range(n):\n        maxRanks[i] = 0\n        for j in range(m):\n            if Ranks[i][j] < Ranks[i][maxRanks[i]]:\n                maxRanks[i] = j\n    for i in range(n):\n        if maxRanks[i] != maxRating[i]:\n            ans += 1\n    print(ans)", "def bestrating(l):\n    mx = float('-inf')\n    mxid = -1\n    for (i, v) in enumerate(l):\n        if v > mx:\n            mx = v\n            mxid = i\n    return mxid\n\ndef bestranking(l):\n    mn = float('inf')\n    mnid = -1\n    for (i, v) in enumerate(l):\n        if v < mn:\n            mn = v\n            mnid = i\n    return mnid\n\ndef calculate_rank(vector):\n    a = {}\n    rank = 1\n    for num in reversed(sorted(vector)):\n        if num not in a:\n            a[num] = rank\n        rank = rank + 1\n    return [a[i] for i in vector]\nt = int(input())\nfor i in range(t):\n    (n, m) = map(int, input().split())\n    initials = list(map(int, input().split()))\n    pdata = {i: [[], []] for i in range(n)}\n    mdata = {i: [] for i in range(m)}\n    for i in range(n):\n        io = list(map(int, input().split()))\n        prev = initials[i]\n        for (idx, change) in enumerate(io):\n            pdata[i][0].append(prev + change)\n            prev = pdata[i][0][-1]\n            mdata[idx].append(prev)\n    for i in range(m):\n        l = mdata[i]\n        rk = calculate_rank(l)\n        for j in range(n):\n            pdata[j][1].append(rk[j])\n    finalcount = 0\n    for player in pdata.keys():\n        rat = bestrating(pdata[player][0])\n        rank = bestranking(pdata[player][1])\n        if rat != rank:\n            finalcount += 1\n    print(finalcount)", "class Student:\n\n    def __init__(self, rating):\n        self.initial_rating = rating\n        self.ratings = []\n        self.ranks = []\nfor _ in range(int(input())):\n    (N, M) = list(map(int, input().split()))\n    _list = []\n    ratings = list(map(int, input().split()))\n    for i in ratings:\n        tmp = Student(i)\n        _list.append(tmp)\n    for i in range(N):\n        _list2 = list(map(int, input().split()))\n        for j in range(M):\n            if len(_list[i].ratings) == 0:\n                _list[i].ratings.append(_list[i].initial_rating + _list2[j])\n            else:\n                _list[i].ratings.append(_list[i].ratings[-1] + _list2[j])\n    for i in range(M):\n        _l = sorted(_list, key=lambda x: x.ratings[i], reverse=True)\n        _l[0].ranks.append(1)\n        for k in range(1, N):\n            if _l[k].ratings[i] < _l[k - 1].ratings[i]:\n                _l[k].ranks.append(k + 1)\n            else:\n                _l[k].ranks.append(_l[k - 1].ranks[i])\n    count = 0\n    for i in _list:\n        if i.ratings.index(max(i.ratings)) != i.ranks.index(min(i.ranks)):\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ini = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        a.append([ini[i]] + list(map(int, input().split())))\n    for i in range(n):\n        for j in range(1, m + 1):\n            a[i][j] = a[i][j - 1] + a[i][j]\n    for i in range(n):\n        a[i].append([600, a[i][1], 1, 1])\n    for i in range(1, m + 1):\n        a = sorted(a, key=lambda x: -x[i])\n        r = 1\n        temp = -1\n        for j in range(n):\n            if temp != a[j][i]:\n                r = j + 1\n            if a[j][-1][0] > r:\n                a[j][-1][0] = r\n                a[j][-1][2] = i\n            if a[j][-1][1] < a[j][i]:\n                a[j][-1][1] = a[j][i]\n                a[j][-1][3] = i\n            temp = a[j][i]\n    res = 0\n    for i in range(n):\n        if a[i][-1][-1] != a[i][-1][-2]:\n            res += 1\n    print(res)", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ratings = []\n    for i in range(n):\n        r = list(map(int, input().split()))\n        ratings.append(r)\n    for j in range(n):\n        k = a[j]\n        for i in range(m):\n            ratings[j][i] = k + ratings[j][i]\n            k = ratings[j][i]\n    rank = []\n    for i in range(n):\n        p = ratings[i].copy()\n        rank.append(p)\n    for j in range(m):\n        res = []\n        for i in range(n):\n            res.append(rank[i][j])\n        res.sort(reverse=True)\n        p = Counter(res)\n        k = 1\n        for i in p:\n            s = p[i]\n            p[i] = k\n            k = k + s\n        for i in range(n):\n            rank[i][j] = p[rank[i][j]]\n    ans = 0\n    for i in range(n):\n        if rank[i].index(min(rank[i])) != ratings[i].index(max(ratings[i])):\n            ans += 1\n    print(ans)", "int_input = lambda : int(input())\nlist_input = lambda : list(map(int, input().split()))\nfor _ in range(int(input())):\n    (n, m) = list_input()\n    initial = list_input()\n    players = []\n    for i in range(n):\n        l = list_input()\n        players.append([])\n        x = initial[i]\n        for j in l:\n            x += j\n            players[i].append(x)\n    ranks = [[-1 for i in range(len(players[0]))] for j in range(len(players))]\n    for i in range(m):\n        l = []\n        for j in range(n):\n            l.append([players[j][i], j + 1])\n        l.sort(reverse=True, key=lambda x: x[0])\n        for ind in range(len(l)):\n            if ind == 0:\n                pos = 1\n            elif l[ind][0] == l[ind - 1][0]:\n                pos = ranks[l[ind - 1][1] - 1][i]\n            else:\n                pos = ind + 1\n            ranks[l[ind][1] - 1][i] = pos\n    max_ranking = []\n    for i in range(n):\n        a = float('inf')\n        month = -1\n        for j in range(m):\n            if ranks[i][j] < a:\n                a = ranks[i][j]\n                month = j + 1\n        max_ranking.append(month)\n    peaks = []\n    for i in range(n):\n        a = float('-inf')\n        month = -1\n        for j in range(m):\n            if players[i][j] > a:\n                a = players[i][j]\n                month = j + 1\n        peaks.append(month)\n    count = 0\n    for i in range(n):\n        if peaks[i] != max_ranking[i]:\n            count += 1\n    print(count)", "from copy import copy\n\ndef solve():\n    (n, m) = tuple(map(int, input().split()))\n    ratings = list(map(int, input().split()))\n    peak_ratings = [0] * n\n    peak_rankings = [n + 1] * n\n    rankings = []\n    answers = ['No'] * n\n    rating_changes = []\n    for p in range(n):\n        rating_changes.append(list(map(int, input().split())))\n    for p in range(m):\n        new_rankings = []\n        if not rankings:\n            for i in range(n):\n                ratings[i] += rating_changes[i][p]\n                new_rankings.append((i, ratings[i]))\n        else:\n            for (i, j) in rankings:\n                ratings[i] += rating_changes[i][p]\n                new_rankings.append((i, ratings[i]))\n        new_rankings.sort(reverse=True, key=lambda x: x[1])\n        prev_rating = None\n        prev_rank = 0\n        rank = 0\n        for i in range(n):\n            (x, y) = new_rankings[i]\n            if prev_rating != y:\n                rank = i\n            if ratings[x] > peak_ratings[x] and rank < peak_rankings[x]:\n                peak_ratings[x] = ratings[x]\n                peak_rankings[x] = rank\n                answers[x] = 'Yes'\n            elif ratings[x] > peak_ratings[x]:\n                peak_ratings[x] = ratings[x]\n                answers[x] = 'No'\n            elif rank < peak_rankings[x]:\n                peak_rankings[x] = rank\n                answers[x] = 'No'\n            prev_rating = y\n        rankings = new_rankings\n    print(answers.count('No'))\nt = int(input())\nfor i in range(t):\n    solve()", "t = int(input())\nfor i in range(t):\n    in_ = input().split()\n    n = int(in_[0])\n    m = int(in_[1])\n    rank = n * [-1]\n    rat = n * [-1]\n    in_rat = [int(e) for e in input().split()]\n    ra = []\n    for e in range(m):\n        ra.append([])\n    for e in range(n):\n        a = [int(ee) for ee in input().split()]\n        in_ = in_rat[e]\n        lc = float('-inf')\n        max_rat = 0\n        for el in range(len(a)):\n            in_ = in_ + a[el]\n            ra[el].append(in_)\n            if in_ > lc:\n                lc = in_\n                max_rat = el\n        rat[e] = max_rat\n    rank_c = n * [n + 1]\n    for ind in range(len(ra)):\n        e = ra[ind]\n        T = [[e[i], i] for i in range(len(e))]\n        T.sort(key=lambda x: x[0], reverse=True)\n        T[0].append(1)\n        for el in range(1, len(T)):\n            if T[el][0] == T[el - 1][0]:\n                T[el].append(T[el - 1][2])\n            else:\n                T[el].append(el + 1)\n        for el in T:\n            inde = el[1]\n            cur = el[2]\n            if rank_c[inde] > cur:\n                rank_c[inde] = cur\n                rank[inde] = ind\n    res = 0\n    for e in range(n):\n        if rank[e] != rat[e]:\n            res += 1\n    print(res)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    r = list(map(int, input().split()))\n    mat = [[] for i in range(n)]\n    ranking = [[] for i in range(n)]\n    for i in range(n):\n        l = list(map(int, input().split()))\n        cur = r[i]\n        for j in l:\n            cur += j\n            mat[i].append(cur)\n    for i in range(m):\n        ar = []\n        for j in range(n):\n            ar.append([mat[j][i], j])\n        ar.sort(reverse=True, key=lambda x: x[0])\n        prev = -1\n        r = 1\n        x = 1\n        for j in range(n):\n            if ar[j][0] != prev:\n                r = x\n            ranking[ar[j][1]].append(r)\n            prev = ar[j][0]\n            x += 1\n    brt = []\n    brk = []\n    for i in range(n):\n        brt.append(mat[i].index(max(mat[i])))\n    for i in range(n):\n        brk.append(ranking[i].index(min(ranking[i])))\n    ans = 0\n    for i in range(n):\n        if brk[i] != brt[i]:\n            ans += 1\n    print(ans)", "def number_of_players_who_peak_ratings_not_same_as_peak_ranking(ratings, no_of_months, no_of_players):\n    max_rating = [max(range(no_of_months), key=lambda i: (ratings[player][i], -i)) for player in range(no_of_players)]\n    max_ranking = compute_max_ranking(ratings, no_of_players, no_of_months)\n    return sum((max_rating[player] != max_ranking[player] for player in range(no_of_players)))\n\ndef compute_max_ranking(ratings, no_of_players, no_of_months):\n    ratings_by_month = list(zip(*ratings))\n    rankings = []\n    for month in range(no_of_months):\n        rankings.append(rank_players(list(range(no_of_players)), ratings_by_month[month]))\n    return list((min(range(no_of_months), key=lambda i: (rankings[i][player], i)) for player in range(no_of_players)))\n\ndef rank_players(ids, scores):\n    ids = sorted(ids, key=lambda i: scores[i], reverse=True)\n    ans = [0] * len(scores)\n    previous = scores[ids[0]]\n    latest_ranking = 0\n    for (i, player) in enumerate(ids):\n        if previous != scores[player]:\n            ans[player] = i\n            latest_ranking = i\n        else:\n            ans[player] = latest_ranking\n        previous = scores[player]\n    return ans\nT = int(input())\nfor _ in range(T):\n    (no_of_players, no_of_months) = map(int, input().split())\n    ratings = []\n    initial_ratings = list(map(int, input().split()))\n    for player in range(no_of_players):\n        change_in_ratings = list(map(int, input().split()))\n        current = initial_ratings[player]\n        player_ratings = []\n        for change in change_in_ratings:\n            player_ratings.append(current + change)\n            current += change\n        ratings.append(player_ratings)\n    print(number_of_players_who_peak_ratings_not_same_as_peak_ranking(ratings=ratings, no_of_months=no_of_months, no_of_players=no_of_players))", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    rating = list(map(int, input().split()))\n    arr = []\n    for i in range(n):\n        arr.append(list(map(int, input().split())))\n    minrank = [float('inf')] * n\n    index2 = [0] * n\n    bestscore = [float('-inf')] * n\n    index1 = [0] * n\n    for i in range(m):\n        for j in range(n):\n            rating[j] += arr[j][i]\n        st = sorted(rating, reverse=True)\n        f = []\n        dindex = dict()\n        for j in range(len(st)):\n            if st[j] in dindex:\n                continue\n            dindex[st[j]] = j\n        for j in range(len(rating)):\n            f.append(dindex[rating[j]])\n        for ii in range(len(f)):\n            if minrank[ii] > f[ii]:\n                minrank[ii] = f[ii]\n                index1[ii] = i\n        for ii in range(len(rating)):\n            if bestscore[ii] < rating[ii]:\n                bestscore[ii] = rating[ii]\n                index2[ii] = i\n    count = 0\n    for (i, j) in zip(index2, index1):\n        if i != j:\n            count += 1\n    print(count)", "tt = int(input())\nimport math\n\ndef fun(l):\n    ind = [i for i in range(len(l))]\n    sind = zip(l, ind)\n    sind = sorted(sind, reverse=True)\n    l = [x for (x, y) in sind]\n    ind = [x for (y, x) in sind]\n    r = 1\n    c = 1\n    res = {}\n    res[ind[0]] = 1\n    score = l[0]\n    for i in range(1, len(l)):\n        if l[i] == score:\n            res[ind[i]] = r\n        else:\n            r = c + 1\n            res[ind[i]] = r\n            score = l[i]\n        c += 1\n    return res\nwhile tt != 0:\n    tt -= 1\n    (n, m) = map(int, input().split())\n    init = list(map(int, input().split()))\n    M = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        M.append(temp)\n    for i in range(n):\n        s = init[i]\n        for j in range(m):\n            s += M[i][j]\n            M[i][j] = s\n    l1 = [0] * n\n    for i in range(n):\n        mi = -1\n        for j in range(m):\n            if M[i][j] > mi:\n                l1[i] = j\n                mi = M[i][j]\n    l2 = [0] * n\n    mi = [math.inf] * n\n    for i in range(m):\n        l3 = [row[i] for row in M]\n        res = fun(l3)\n        for j in range(n):\n            if res[j] < mi[j]:\n                mi[j] = res[j]\n                l2[j] = i\n    c = 0\n    for i in range(n):\n        if l1[i] != l2[i]:\n            c += 1\n    print(c)", "from collections import Counter\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    pl = list(map(int, input().split()))\n    pl2 = list(pl)\n    mnt = []\n    for i in range(n):\n        mnt.append(list(map(int, input().split())))\n    bs_rating = []\n    for i in range(n):\n        mx = 0\n        for j in range(m):\n            pl[i] += mnt[i][j]\n            if pl[i] > mx:\n                mx = pl[i]\n                pos = j\n        bs_rating.append(pos + 1)\n    fnl = []\n    for j in range(m):\n        lis = []\n        for i in range(n):\n            lis.append(mnt[i][j])\n        fnl.append(lis)\n    bs_rnk = [0] * n\n    bs_month = [501] * n\n    bst_rank = [0] * n\n    for i in range(m):\n        chk = []\n        for j in range(n):\n            pl2[j] += fnl[i][j]\n            chk.append([pl2[j], j])\n        chk = sorted(chk)[::-1]\n        prev = chk[0][0]\n        rnk = 1\n        cnt = 0\n        for j in range(n):\n            if chk[j][0] == prev:\n                bs_rnk[chk[j][1]] = rnk\n                cnt += 1\n            else:\n                rnk = rnk + cnt\n                bs_rnk[chk[j][1]] = rnk\n                cnt = 1\n            prev = chk[j][0]\n        for j in range(n):\n            if bs_rnk[j] < bs_month[j]:\n                bs_month[j] = bs_rnk[j]\n                bst_rank[j] = i + 1\n    ans = 0\n    for i in range(n):\n        if bst_rank[i] != bs_rating[i]:\n            ans += 1\n    print(ans)", "t = int(input())\n\ndef rank(l):\n    g = l[:]\n    g.sort(reverse=True)\n    ranks = {g[0]: 1}\n    for i in range(1, len(g)):\n        if g[i] != g[i - 1]:\n            ranks.update({g[i]: i + 1})\n    ret = [ranks[x] for x in l]\n    return ret\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ri = list(map(int, input().split()))\n    rc = []\n    for p in range(n):\n        rc.append(list(map(int, input().split())))\n    cumu = [0] * n\n    prat = [1] * n\n    tmax = [0] * n\n    rmax = [-1] * n\n    pran = [1] * n\n    for i in range(m):\n        for j in range(n):\n            ri[j] += rc[j][i]\n            if ri[j] > tmax[j]:\n                tmax[j] = ri[j]\n                prat[j] = i + 1\n        rnks = rank(ri)\n        for j in range(n):\n            if rnks[j] < rmax[j] or rmax[j] < 0:\n                pran[j] = i + 1\n                rmax[j] = rnks[j]\n    ans = 0\n    for i in range(n):\n        if pran[i] != prat[i]:\n            ans += 1\n    print(ans)", "from collections import defaultdict\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    l1 = []\n    best_rating = []\n    best_rank = []\n    for i in range(n):\n        k = list(map(int, input().split()))\n        l1.append(k)\n        best_rating.append([-10 ** 18, -10 ** 18])\n        best_rank.append([10 ** 18, 10 ** 18])\n    ans = 0\n    for i in range(m):\n        la = []\n        for j in range(n):\n            s = l1[j][i] + l[j]\n            z = best_rating[j][0]\n            best_rating[j][0] = max(s, best_rating[j][0])\n            if best_rating[j][0] != z:\n                best_rating[j][1] = i\n            la.append((s, j))\n            l[j] += l1[j][i]\n        la.sort(reverse=True)\n        (a, b) = la[0]\n        rank = 0\n        if best_rank[b][0] > rank:\n            best_rank[b][1] = i\n            best_rank[b][0] = rank\n        prev = 0\n        for k in range(1, len(la)):\n            (a, b) = la[k]\n            (c, d) = la[k - 1]\n            if c > a:\n                if best_rank[b][0] > k:\n                    best_rank[b][1] = i\n                    best_rank[b][0] = k\n                prev = k\n            elif best_rank[b][0] > prev:\n                best_rank[b][1] = i\n                best_rank[b][0] = prev\n    for i in range(n):\n        (z1, z2) = (best_rating[i][1], best_rank[i][1])\n        if z1 != z2:\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = input().split()\n    (n, m) = (int(n), int(m))\n    R = [int(ri) for ri in input().split()]\n    delR = [0] * n\n    for i in range(0, n):\n        delR[i] = [int(ai) for ai in input().split()]\n    peakR = []\n    for i in range(0, n):\n        peakR.append([-1, -1])\n    peakRn = []\n    for i in range(0, n):\n        peakRn.append([n + 1, -1])\n    for mon in range(0, m):\n        currR = []\n        for p in range(0, n):\n            R[p] += delR[p][mon]\n            if R[p] > peakR[p][0]:\n                peakR[p] = [R[p], mon]\n            currR.append([R[p], p])\n        currR.sort(reverse=True)\n        pranks = [0] * n\n        pranks[currR[0][1]] = 1\n        for i in range(1, len(currR)):\n            if currR[i][0] == currR[i - 1][0]:\n                pranks[currR[i][1]] = pranks[currR[i - 1][1]]\n                continue\n            pranks[currR[i][1]] = i + 1\n        for i in range(0, n):\n            if pranks[i] < peakRn[i][0]:\n                peakRn[i] = [pranks[i], mon]\n    ans = 0\n    for i in range(0, n):\n        if peakR[i][1] != peakRn[i][1]:\n            ans += 1\n    print(ans)", "t = int(input())\nwhile t:\n    t = t - 1\n    (n, m) = map(int, input().split())\n    R = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        Temp = list(map(int, input().split()))\n        a.append(Temp)\n    RI = []\n    peakrating = [-1 * float('inf') for x in range(n)]\n    peakrating_month = [-1 for x in range(n)]\n    peakrank = [float('inf') for x in range(n)]\n    peakrank_month = [-1 for x in range(n)]\n    for i in range(len(R)):\n        RI.append([R[i], i])\n    for i in range(m):\n        for j in range(n):\n            RI[j][0] += a[RI[j][1]][i]\n        RI = sorted(RI, key=lambda x: x[0])\n        RI = RI[::-1]\n        prev = None\n        prev_index = None\n        for k in range(len(RI)):\n            if RI[k][0] != prev:\n                prev = RI[k][0]\n                prev_index = k\n                rnk = k\n            else:\n                rnk = prev_index\n            x = RI[k]\n            if peakrank[x[1]] > rnk:\n                peakrank[x[1]] = rnk\n                peakrank_month[x[1]] = i\n            if peakrating[x[1]] < x[0]:\n                peakrating[x[1]] = x[0]\n                peakrating_month[x[1]] = i\n    ans = 0\n    for i in range(n):\n        if peakrating_month[i] != peakrank_month[i]:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ir = list(map(int, input().split()))\n    grid = []\n    prat = []\n    pran = []\n    for i in range(n):\n        rc = list(map(int, input().split()))\n        temp = [ir[i]]\n        for x in rc:\n            temp.append(temp[-1] + x)\n        grid.append(temp)\n        maxi = float('-inf')\n        for (idx, j) in enumerate(temp[1:]):\n            if maxi < j:\n                maxi = j\n                month = idx + 1\n        prat.append(month)\n    tgrid = list(zip(*grid))\n    tr = []\n    for (idx, each) in enumerate(tgrid[1:]):\n        temp = sorted(each, reverse=True)\n        rank = dict()\n        rank[temp[0]] = 1\n        prev = [temp[0], 1]\n        for i in temp[1:]:\n            prev[1] += 1\n            if i != prev[0]:\n                prev[0] = i\n                rank[i] = prev[1]\n        if not tr:\n            for x in each:\n                tr.append(rank[x])\n                pran.append(1)\n        else:\n            for (e, x) in enumerate(each):\n                if tr[e] > rank[x]:\n                    tr[e] = rank[x]\n                    pran[e] = idx + 1\n    ans = 0\n    for i in range(n):\n        if prat[i] != pran[i]:\n            ans += 1\n    print(ans)", "for _ in range(int(input())):\n    (p, m) = tuple(map(int, input().split()))\n    rates = list(map(int, input().split()))\n    changesPM = [list(map(int, input().split())) for i in range(p)]\n    temp = 0\n    ranksMP = []\n    bestrate = [0 for i in range(p)]\n    bestratemon = [0 for i in range(p)]\n    for i in range(m):\n        ratesM = []\n        for j in range(p):\n            changesPM[j][i] += changesPM[j][i - 1] if i else rates[j]\n            ratesM.append(changesPM[j][i])\n            if changesPM[j][i] > bestrate[j]:\n                bestrate[j] = changesPM[j][i]\n                bestratemon[j] = i + 1\n        new_lis = sorted(ratesM, reverse=True)\n        di = dict()\n        for i in range(len(new_lis)):\n            if new_lis[i] not in di:\n                di[new_lis[i]] = i + 1\n        ranksMP.append([di[ratesM[i]] for i in range(len(new_lis))])\n    bestranks = []\n    bestrankmons = []\n    for i in range(p):\n        bestrank = ranksMP[0][i]\n        bestrankmon = 1\n        for j in range(m):\n            if ranksMP[j][i] < bestrank:\n                bestrank = ranksMP[j][i]\n                bestrankmon = j + 1\n        bestranks.append(bestrank)\n        bestrankmons.append(bestrankmon)\n    count = 0\n    for i in range(p):\n        count += int(bestrankmons[i] != bestratemon[i])\n    print(count)", "from copy import copy\n\ndef solve():\n    (n, m) = tuple(map(int, input().split()))\n    ratings = list(map(int, input().split()))\n    peak_ratings = [0] * n\n    peak_rankings = [n + 1] * n\n    rankings = []\n    answers = ['No'] * n\n    rating_changes = []\n    for p in range(n):\n        rating_changes.append(list(map(int, input().split())))\n    for p in range(m):\n        new_rankings = []\n        if not rankings:\n            for i in range(n):\n                ratings[i] += rating_changes[i][p]\n                new_rankings.append((i, ratings[i]))\n        else:\n            for (i, j) in rankings:\n                ratings[i] += rating_changes[i][p]\n                new_rankings.append((i, ratings[i]))\n        new_rankings.sort(reverse=True, key=lambda x: x[1])\n        prev_rating = None\n        prev_rank = 0\n        rank = 0\n        for i in range(n):\n            (x, y) = new_rankings[i]\n            if prev_rating != y:\n                rank = i\n            if ratings[x] > peak_ratings[x] and rank < peak_rankings[x]:\n                peak_ratings[x] = ratings[x]\n                peak_rankings[x] = rank\n                answers[x] = 'Yes'\n            elif ratings[x] > peak_ratings[x]:\n                peak_ratings[x] = ratings[x]\n                answers[x] = 'No'\n            elif rank < peak_rankings[x]:\n                peak_rankings[x] = rank\n                answers[x] = 'No'\n            prev_rating = y\n        rankings = new_rankings\n    print(answers.count('No'))\nt = int(input())\nfor i in range(t):\n    solve()", "from collections import Counter\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    ratings = []\n    for i in range(n):\n        r = list(map(int, input().split()))\n        ratings.append(r)\n    for j in range(n):\n        k = a[j]\n        for i in range(m):\n            ratings[j][i] = k + ratings[j][i]\n            k = ratings[j][i]\n    rank = []\n    for i in range(n):\n        p = ratings[i].copy()\n        rank.append(p)\n    for j in range(m):\n        res = []\n        for i in range(n):\n            res.append(rank[i][j])\n        res.sort(reverse=True)\n        p = Counter(res)\n        k = 1\n        for i in p:\n            s = p[i]\n            p[i] = k\n            k = k + s\n        for i in range(n):\n            rank[i][j] = p[rank[i][j]]\n    ans = 0\n    for i in range(n):\n        if rank[i].index(min(rank[i])) != ratings[i].index(max(ratings[i])):\n            ans += 1\n    print(ans)", "from collections import Counter\nimport heapq\n\ndef checkUser(change, n, m):\n    count = 0\n    for i in range(n):\n        x = min(change[i][0])\n        x = change[i][0].index(x)\n        y = max(change[i][1])\n        y = change[i][1].index(y)\n        if x != y:\n            count += 1\n    return count\n\ndef rr():\n    (n, m) = input().split()\n    n = int(n)\n    m = int(m)\n    ir = list(map(int, input().split()))\n    change = []\n    for i in range(n):\n        x = list(map(int, input().split()))\n        change.append([[-1] * m, x])\n    for mon in range(m):\n        currRating = []\n        for u in range(n):\n            if mon == 0:\n                ur = ir[u]\n            else:\n                ur = change[u][1][mon - 1]\n            change[u][1][mon] += ur\n            currRating.append(change[u][1][mon])\n        count = Counter(currRating)\n        heap = []\n        for (i, j) in count.items():\n            heapq.heappush(heap, [-i, j])\n        currRating = {}\n        count = 1\n        for i in range(len(heap)):\n            x = heapq.heappop(heap)\n            currRating[-x[0]] = count\n            count += x[1]\n        for u in range(n):\n            change[u][0][mon] = currRating[change[u][1][mon]]\n    return checkUser(change, n, m)\nfor _ in range(int(input())):\n    print(rr())", "t = int(input())\nwhile t:\n    t -= 1\n    (n, m) = [int(x) for x in input().split()]\n    l = [int(x) for x in input().split()]\n    maxi = []\n    l1 = []\n    for j in range(n):\n        a1 = -1\n        a2 = -1\n        a = [int(x) for x in input().split()]\n        l1.append(a[:])\n        for i in range(1, m):\n            a[i] += a[i - 1]\n        m1 = max(a)\n        for i in range(m):\n            if a[i] == m1:\n                a2 = i\n                break\n        maxi.append(a2)\n    ranksfinal = []\n    k = 0\n    for j in range(m):\n        for i in range(n):\n            l[i] += l1[i][j]\n        d = {}\n        for i in range(n):\n            try:\n                d[l[i]].append(i)\n            except:\n                d[l[i]] = [i]\n        ranks = [0 for i in range(n)]\n        p = 1\n        var = sorted(d.keys())[::-1]\n        for i in var:\n            for j in d[i]:\n                ranks[j] = p\n            p += len(d[i])\n        ranksfinal.append(ranks)\n    ans2 = []\n    for i in range(n):\n        ranks = []\n        for j in range(m):\n            ranks.append(ranksfinal[j][i])\n        m1 = min(ranks)\n        for j in range(m):\n            if ranks[j] == m1:\n                ans2.append(j)\n                break\n    ans = 0\n    for i in range(n):\n        if ans2[i] != maxi[i]:\n            ans += 1\n    print(ans)", "import numpy as np\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    r = list(map(int, input().split()))\n    rc = []\n    rkc = []\n    for i in range(n):\n        st = r[i]\n        t = []\n        rkc.append([])\n        for j in list(map(int, input().split())):\n            t.append(st + j)\n            st += j\n        rc.append(t)\n    for i in range(m):\n        mr = []\n        for j in range(n):\n            mr.append(rc[j][i])\n        nmr = np.array(mr)\n        argnmr = np.argsort(nmr)\n        argnmr = np.flipud(argnmr)\n        mr.sort(reverse=True)\n        rank = 1\n        rkc[argnmr[0]].append(1)\n        for j in range(1, n):\n            if mr[j] == mr[j - 1]:\n                rkc[argnmr[j]].append(rank)\n            else:\n                rank = j + 1\n                rkc[argnmr[j]].append(rank)\n    count = 0\n    for i in range(n):\n        if rc[i].index(max(rc[i])) != rkc[i].index(min(rkc[i])):\n            count += 1\n    print(count)", "t = int(input())\nimport math\n\ndef fun(l):\n    ind = [i for i in range(len(l))]\n    sind = zip(l, ind)\n    sind = sorted(sind, reverse=True)\n    l = [x for (x, y) in sind]\n    ind = [x for (y, x) in sind]\n    r = 1\n    count = 1\n    res = {}\n    res[ind[0]] = 1\n    score = l[0]\n    for i in range(1, len(l)):\n        if l[i] == score:\n            res[ind[i]] = r\n        else:\n            r = count + 1\n            res[ind[i]] = r\n            score = l[i]\n        count += 1\n    return res\nwhile t != 0:\n    t -= 1\n    (n, m) = map(int, input().split())\n    init = list(map(int, input().split()))\n    M = []\n    for i in range(n):\n        temp = list(map(int, input().split()))\n        M.append(temp)\n    for i in range(n):\n        s = init[i]\n        for j in range(m):\n            s += M[i][j]\n            M[i][j] = s\n    l1 = [0] * n\n    for i in range(n):\n        mi = -1\n        for j in range(m):\n            if M[i][j] > mi:\n                l1[i] = j\n                mi = M[i][j]\n    l2 = [0] * n\n    mi = [math.inf] * n\n    for i in range(m):\n        l3 = [row[i] for row in M]\n        res = fun(l3)\n        for j in range(n):\n            if res[j] < mi[j]:\n                mi[j] = res[j]\n                l2[j] = i\n    count = 0\n    for i in range(n):\n        if l1[i] != l2[i]:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = (int(x) for x in input().split())\n    ini_data = [int(x) for x in input().split()]\n    data = []\n    ans = {}\n    for i in range(n):\n        data.append([i])\n        ini_1 = [int(x) for x in input().split()]\n        data[i] += [ini_data[i] + ini_1[0]]\n        for j in range(1, m):\n            data[i] += [data[i][j] + ini_1[j]]\n    for i in range(n):\n        ans[i] = [data[i][1:].index(max(data[i][1:])) + 1]\n    for i in range(1, m + 1):\n        data.sort(key=lambda x: x[i], reverse=True)\n        if len(ans[data[0][0]]) == 1:\n            ans[data[0][0]].append(1)\n            ans[data[0][0]].append(i)\n        elif ans[data[0][0]][1] > 1:\n            ans[data[0][0]][1] = 1\n            ans[data[0][0]][2] = i\n        rank = 1\n        for j in range(1, n):\n            if len(ans[data[j][0]]) == 1:\n                if data[j][i] == data[j - 1][i]:\n                    ans[data[j][0]].append(ans[data[j - 1][0]][1])\n                    ans[data[j][0]].append(i)\n                else:\n                    ans[data[j][0]].append(j + 1)\n                    ans[data[j][0]].append(i)\n            elif data[j][i] == data[j - 1][i] and rank < ans[data[j][0]][1]:\n                ans[data[j][0]][1] = rank\n                ans[data[j][0]][2] = i\n            elif data[j][i] < data[j - 1][i]:\n                if j + 1 < ans[data[j][0]][1]:\n                    ans[data[j][0]][1] = j + 1\n                    ans[data[j][0]][2] = i\n                rank = j + 1\n    t = 0\n    for i in ans.values():\n        if i[0] != i[2]:\n            t += 1\n    print(t)", "import sys\nimport heapq\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().strip().split())\n    rt = list(map(int, input().strip().split()))\n    cg = [[None] * n for i in range(m)]\n    for i in range(n):\n        plRt = list(map(int, input().strip().split()))\n        cg[0][i] = rt[i] + plRt[0]\n        for j in range(1, m):\n            cg[j][i] = cg[j - 1][i] + plRt[j]\n    rank = [[None] * n for i in range(m)]\n    for i in range(m):\n        monthRt = cg[i]\n        hp = []\n        for j in range(n):\n            heapq.heappush(hp, [-monthRt[j], j])\n        rnk = 0\n        ind = 0\n        oldRating = None\n        for j in range(n):\n            (rating, index) = heapq.heappop(hp)\n            rating *= -1\n            ind += 1\n            if oldRating != rating:\n                rnk = ind\n            rank[i][index] = rnk\n            oldRating = rating\n    c = 0\n    for i in range(n):\n        mxr_index = None\n        mx_index = None\n        mxr = -sys.maxsize\n        mx = sys.maxsize\n        for j in range(m):\n            if cg[j][i] > mxr:\n                mxr_index = j\n                mxr = cg[j][i]\n            if rank[j][i] < mx:\n                mx_index = j\n                mx = rank[j][i]\n        if mx_index != mxr_index:\n            c += 1\n    print(c)", "try:\n    import sys\n    MAX = sys.maxsize\n\n    def rankUpdater(d):\n        x = list(d.values())\n        y = list(d.keys())\n        y.sort(key=lambda x: d[x][0], reverse=True)\n        rank = 1\n        for i in range(len(y)):\n            if i == 0:\n                d[y[i]][1] = rank\n            elif d[y[i]][0] == d[y[i - 1]][0]:\n                d[y[i]][1] = d[y[i - 1]][1]\n            else:\n                d[y[i]][1] = rank\n            rank += 1\n\n    def sol(initial, changes):\n        hash = {}\n        mainData = {}\n        maxData = {}\n        for i in range(len(initial)):\n            maxData[i] = [-1, -1, -1, MAX]\n        for j in range(len(changes[0])):\n            for i in range(len(changes)):\n                if j == 0:\n                    mainData[i] = [initial[i] + changes[i][j], 0]\n                else:\n                    mainData[i][0] += changes[i][j]\n            rankUpdater(mainData)\n            for i in mainData:\n                if maxData[i][2] < mainData[i][0]:\n                    maxData[i][2] = mainData[i][0]\n                    maxData[i][0] = j + 1\n                if maxData[i][3] > mainData[i][1]:\n                    maxData[i][3] = mainData[i][1]\n                    maxData[i][1] = j + 1\n        ans = 0\n        for i in maxData:\n            if maxData[i][0] != maxData[i][1]:\n                ans += 1\n        print(ans)\n    k = int(input())\n    for i in range(k):\n        (n, m) = list(map(int, input().split(' ')))\n        initial = list(map(int, input().split(' ')))\n        changes = []\n        for i in range(n):\n            x = list(map(int, input().split(' ')))\n            changes.append(x)\n        sol(initial, changes)\nexcept:\n    pass", "from sys import stdin, stdout\nfrom collections import Counter\nfor _ in range(int(stdin.readline())):\n    (n, m) = list(map(int, stdin.readline().split()))\n    rtng = list(map(int, stdin.readline().split()))\n    a = []\n    ans = 0\n    for plr in range(n):\n        l = []\n        chng = list(map(int, stdin.readline().split()))\n        init = rtng[plr]\n        for c in chng:\n            init += c\n            l += [init]\n        a += [l]\n    rank_pm = [[0 for _ in range(m)] for _ in range(n)]\n    for mm in range(m):\n        rar = []\n        for pp in range(n):\n            rar += [a[pp][mm]]\n        cntr = Counter(rar)\n        dec_ranks = sorted(cntr.keys(), reverse=True)\n        d = {}\n        rank = 1\n        for rating in dec_ranks:\n            d[rating] = rank\n            rank += cntr[rating]\n        for pp in range(n):\n            rank_pm[pp][mm] = d[a[pp][mm]]\n    for pp in range(n):\n        best_rating = 0\n        best_rank = float('inf')\n        rating_mnth = rank_mnth = 0\n        for mm in range(m):\n            if a[pp][mm] > best_rating:\n                best_rating = a[pp][mm]\n                rating_mnth = mm\n            if rank_pm[pp][mm] < best_rank:\n                best_rank = rank_pm[pp][mm]\n                rank_mnth = mm\n        if rating_mnth != rank_mnth:\n            ans += 1\n    print(ans)", "try:\n    t = int(input())\n    for i in range(t):\n        (n, m) = [int(i) for i in input().split()]\n        intial = [int(i) for i in input().split()]\n        lol = []\n        hr_moth = []\n        rate = []\n        moths = [[] for _ in range(m)]\n        for i in range(n):\n            c = [int(o) for o in input().split()]\n            shel = []\n            for dd in range(m):\n                if dd == 0:\n                    shel.append(intial[i] + c[dd])\n                    moths[dd].append(intial[i] + c[dd])\n                else:\n                    shel.append(shel[dd - 1] + c[dd])\n                    moths[dd].append(shel[dd - 1] + c[dd])\n            hr_moth.append(shel.index(max(shel)) + 1)\n            rate.append(shel)\n            lol.append(c)\n        number = 0\n        players = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m):\n            x = moths[i]\n            k = []\n            for j in range(n):\n                k.append([x[j], j])\n            k = list(reversed(sorted(k, key=lambda y: y[0])))\n            rank = 1\n            temp = -1\n            for j in range(n):\n                if j == 0:\n                    players[i][k[j][1]] = rank\n                    temp = k[j][0]\n                else:\n                    if k[j][0] < temp:\n                        rank = j + 1\n                    temp = k[j][0]\n                    players[i][k[j][1]] = rank\n        ans = [-1 for _ in range(n)]\n        for i in range(n):\n            mon = -1\n            hh = 10 ** 8\n            for j in range(m):\n                if players[j][i] < hh:\n                    hh = players[j][i]\n                    mon = j + 1\n            if hr_moth[i] != mon:\n                number += 1\n        print(number)\nexcept:\n    pass", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    inr = []\n    inr = list(map(int, input().split()))\n    ratchan = []\n    for i in range(n):\n        l = list(map(int, input().split()))\n        ratchan.append(l)\n    change = [[-1, -1, n] for i in range(n)]\n    for i in range(n):\n        l1 = ratchan[i]\n        mx = -10 ** 10\n        tmp = 0\n        for j in range(len(l1)):\n            tmp += l1[j]\n            mx = max(mx, tmp)\n        tmp = 0\n        for j in range(len(l1)):\n            tmp += l1[j]\n            if tmp == mx:\n                change[i][0] = j + 1\n                break\n    start = inr[:]\n    for i in range(m):\n        mx = -10 ** 10\n        temp = []\n        for j in range(n):\n            start[j] += ratchan[j][i]\n            temp.append([j, start[j]])\n        temp = sorted(temp, key=lambda x: x[1], reverse=True)\n        rank = 1\n        rate = temp[0][1]\n        for j in range(n):\n            if rate > temp[j][1]:\n                rank = j + 1\n                rate = temp[j][1]\n            if change[temp[j][0]][2] > rank:\n                change[temp[j][0]][2] = rank\n                change[temp[j][0]][1] = i + 1\n    ans = 0\n    for i in range(len(change)):\n        if change[i][0] != change[i][1]:\n            ans += 1\n    print(ans)", "t = int(input().strip())\nfor t_ in range(t):\n    (n, m) = map(int, input().strip().split())\n    r0 = list(map(int, input().strip().split()))\n    ratings = [None] * n\n    for i in range(n):\n        ratings[i] = [None] * (m + 1)\n        ratings[i][0] = r0[i]\n    rankings = [None] * n\n    for i in range(n):\n        rankings[i] = [None] * (m + 1)\n    for i in range(n):\n        rd = list(map(int, input().strip().split()))\n        for j in range(m):\n            ratings[i][j + 1] = ratings[i][j] + rd[j]\n    for j in range(1, m + 1):\n        rating = []\n        for i in range(n):\n            rating.append((ratings[i][j], i))\n        sorted_rating = sorted(rating, reverse=True)\n        last_rating = None\n        last_ranking = None\n        ranking = [None] * n\n        pos = 0\n        for (current_rating, idx) in sorted_rating:\n            pos += 1\n            if current_rating == last_rating:\n                ranking[idx] = last_ranking\n            else:\n                ranking[idx] = pos\n            last_rating = current_rating\n            last_ranking = ranking[idx]\n        for i in range(n):\n            rankings[i][j] = ranking[i]\n    total = 0\n    for i in range(n):\n        rating = ratings[i][1:]\n        best_rating_month = rating.index(max(rating))\n        ranking = rankings[i][1:]\n        best_ranking_month = ranking.index(min(ranking))\n        if best_rating_month != best_ranking_month:\n            total += 1\n    print(total)", "import sys\ninput = lambda : sys.stdin.readline().rstrip()\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    inl = [int(i) for i in input().split()]\n    a = []\n    for i in range(n):\n        a.append([int(i) for i in input().split()])\n    for i in range(n):\n        a[i][0] += inl[i]\n        for j in range(1, m):\n            a[i][j] += a[i][j - 1]\n    rtm = []\n    for i in range(n):\n        rtm.append(a[i].index(max(a[i])))\n    r = [[-1] * m for i in range(n)]\n    for i in range(m):\n        p = []\n        for j in range(n):\n            p.append([a[j][i], j])\n        p.sort(reverse=True)\n        st = set()\n        c = -1\n        cur = 0\n        for j in p:\n            c += 1\n            if j[0] not in st:\n                r[j[1]][i] = c\n                st.add(j[0])\n                cur = c\n            else:\n                r[j[1]][i] = cur\n    rnm = []\n    for i in range(n):\n        rnm.append(r[i].index(min(r[i])))\n    ans = 0\n    for i in range(n):\n        if rnm[i] != rtm[i]:\n            ans += 1\n    print(ans)", "from typing import List\n\ndef ratingsAndRankings(N: int, initial_ratings: List[int], changes: List[List[int]]) -> int:\n    max_ratings = [[1799, -1] for _ in range(N)]\n    max_rankings = [[501, -1] for _ in range(N)]\n    for i in range(M):\n        for j in range(N):\n            initial_ratings[j] += changes[j][i]\n            if initial_ratings[j] > max_ratings[j][0]:\n                max_ratings[j][0] = initial_ratings[j]\n                max_ratings[j][1] = i + 1\n        copy = initial_ratings[:]\n        copy.sort(reverse=True)\n        dic = {}\n        for j in range(len(copy)):\n            if copy[j] not in dic:\n                dic[copy[j]] = j + 1\n        for j in range(len(initial_ratings)):\n            if dic[initial_ratings[j]] < max_rankings[j][0]:\n                max_rankings[j][0] = dic[initial_ratings[j]]\n                max_rankings[j][1] = i + 1\n    count = 0\n    for i in range(N):\n        if max_ratings[i][1] != max_rankings[i][1]:\n            count += 1\n    return count\ntest_cases = int(input())\nfor _ in range(test_cases):\n    first_line = list(map(int, input().split(' ')))\n    (N, M) = (first_line[0], first_line[1])\n    initial_ratings = list(map(int, input().split(' ')))\n    changes = []\n    for i in range(N):\n        changes.append(list(map(int, input().split(' '))))\n    print(ratingsAndRankings(N, initial_ratings, changes))", "import sys\nt = int(sys.stdin.readline().strip())\n\ndef rate(l):\n    sm = l[0]\n    mx = l[0]\n    ind = 0\n    for i in range(1, len(l)):\n        sm += l[i]\n        if sm > mx:\n            mx = sm\n            ind = i\n    return ind + 1\n\ndef ranking(n, m, R, ratings):\n    rnk = []\n    for mn in range(m):\n        l = []\n        for i in range(n):\n            R[i] += ratings[i][mn]\n            l.append(R[i])\n        mxr = max(l)\n        rr = []\n        for k in range(n):\n            if l[k] == mxr:\n                rr.append(k + 1)\n        rnk.append(rr)\n    return rnk\n\ndef ranking2(n, m, R, ratings):\n    ranks = [[] for _ in range(n)]\n    for mn in range(m):\n        l = []\n        for i in range(n):\n            R[i] += ratings[i][mn]\n            l.append([R[i], i])\n        l.sort(reverse=True)\n        l.insert(0, [40000, -1])\n        k = 0\n        for i in range(1, len(l)):\n            change = False\n            if l[i][0] < l[i - 1][0]:\n                k = i\n                change = True\n            ranks[l[i][1]].append(k)\n    high = []\n    for i in ranks:\n        mr = min(i)\n        high.append(i.index(mr) + 1)\n    return high\nfor _ in range(t):\n    (n, m) = map(int, sys.stdin.readline().strip().split())\n    R = list(map(int, sys.stdin.readline().strip().split()))\n    ratings = []\n    for i in range(n):\n        ratings.append(list(map(int, sys.stdin.readline().strip().split())))\n    ranks2 = ranking2(n, m, R, ratings)\n    maxR = []\n    for j in range(n):\n        r = ratings[j]\n        p = rate(r)\n        maxR.append(p)\n    count = 0\n    for i in range(n):\n        if maxR[i] != ranks2[i]:\n            count += 1\n    print(count)", "import sys\n\ndef input():\n    a = sys.stdin.readline()\n    if a[-1] == '\\n':\n        a = a[:-1]\n    return a\n\ndef print(*argv):\n    n = len(argv)\n    for i in range(n):\n        if i == n - 1:\n            sys.stdout.write(str(argv[i]) + '\\n')\n        else:\n            sys.stdout.write(str(argv[i]) + ' ')\n\ndef lcm(x, y):\n    from math import gcd\n    return x * y / gcd(x, y)\n\ndef maxInd(lst):\n    ind = 0\n    maxx = float('-inf')\n    for i in range(len(lst)):\n        if lst[i] > maxx:\n            maxx = lst[i]\n            ind = i\n    return ind\n\ndef ranking(lst):\n    lstS = sorted(lst, reverse=True)\n    res = []\n    r = {}\n    for i in range(len(lstS)):\n        if r.get(lstS[i]) == None:\n            r[lstS[i]] = i\n    for i in lst:\n        res.append(r[i])\n    return res\n\ndef solve(n, m, player, change):\n    (rank, rank1, rate) = ([], [], [])\n    for i in range(m):\n        for j in range(n):\n            player[j].append(player[j][-1] + change[i][j])\n    for i in player:\n        rate.append(maxInd(i[1:]))\n    for i in range(1, m + 1):\n        temp = []\n        for j in range(n):\n            temp.append(player[j][i])\n        rank1.append(ranking(temp))\n    for i in range(m):\n        for j in range(n):\n            rank1[i][j] = n - 1 - rank1[i][j]\n    for i in range(n):\n        temp = []\n        for j in range(m):\n            temp.append(rank1[j][i])\n        rank.append(maxInd(temp))\n    cnt = 0\n    for i in range(len(rank)):\n        if rank[i] != rate[i]:\n            cnt += 1\n    return cnt\nfor _ in range(int(input())):\n    (n, m) = list(map(int, input().split()))\n    p = list(map(int, input().split()))\n    player = []\n    for i in p:\n        player.append([i])\n    change = []\n    a = []\n    for i in range(n):\n        a.append(list(map(int, input().split())))\n    for i in range(m):\n        change.append([])\n        for j in range(n):\n            change[i].append(a[j][i])\n    print(solve(n, m, player, change))", "def ok():\n    (n, m) = map(int, input().split())\n    rating = list(map(int, input().split()))\n    data = []\n    for i in range(n):\n        data.append(list(map(int, input().split())))\n    max_rating = [-float('inf')] * n\n    max_ranking = [float('inf')] * n\n    day_rating = [0] * n\n    day_ranking = [0] * n\n    for i in range(m):\n        hm = {}\n        for j in range(n):\n            rating[j] = rating[j] + data[j][i]\n            if rating[j] > max_rating[j]:\n                day_rating[j] = i + 1\n                max_rating[j] = rating[j]\n            if rating[j] in hm.keys():\n                hm[rating[j]] += 1\n            else:\n                hm[rating[j]] = 1\n        s = sorted(hm.keys())\n        s.reverse()\n        r = 1\n        for k in s:\n            count = hm[k]\n            hm[k] = r\n            r += count\n        for j in range(n):\n            if max_ranking[j] > hm[rating[j]]:\n                max_ranking[j] = hm[rating[j]]\n                day_ranking[j] = i + 1\n    cnt = 0\n    for i in range(n):\n        if day_ranking[i] != day_rating[i]:\n            cnt += 1\n    print(cnt)\nfor _ in range(int(input())):\n    ok()", "def satisfy(ratings, ranks):\n    max_rating = max(ratings)\n    min_rank = min(ranks)\n    for (i, rank) in enumerate(ranks):\n        if rank == min_rank:\n            earliest_rank = i\n            break\n    for (i, rating) in enumerate(ratings):\n        if rating == max_rating:\n            earliest_rating = i\n            break\n    if earliest_rating == earliest_rank:\n        return False\n    return True\n\ndef magic(n, m, rating_dict):\n    ranking_dict = {}\n    for month in range(m):\n        rating_list = []\n        for (key, val) in rating_dict.items():\n            rating_list.append((key, val[month]))\n        rating_list.sort(key=lambda x: x[1], reverse=True)\n        current_rank = 0\n        global_rank = 0\n        current_rating = 0\n        for (key, rating) in rating_list:\n            global_rank += 1\n            if rating != current_rating:\n                current_rating = rating\n                current_rank = global_rank\n            if key not in ranking_dict:\n                ranking_dict[key] = [current_rank]\n            else:\n                ranking_dict[key].append(current_rank)\n    count = 0\n    for (key, ratings) in rating_dict.items():\n        ranks = ranking_dict[key]\n        if satisfy(ratings, ranks):\n            count += 1\n    return count\nt = int(input())\nfor _ in range(t):\n    (n, m) = list(map(int, input().strip().split()))\n    initial_rating = list(map(int, input().strip().split()))\n    rating_dict = {}\n    for i in range(n):\n        ratings = list(map(int, input().strip().split()))\n        for rate in ratings:\n            if i not in rating_dict:\n                rating_dict[i] = [initial_rating[i] + rate]\n            else:\n                rating_dict[i].append(rating_dict[i][-1] + rate)\n    print(magic(n, m, rating_dict))", "import sys\nt = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    initr = list(map(int, input().split()))\n    a = []\n    for i in range(n):\n        b = list(map(int, input().split()))\n        a.append(b)\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                a[i][j] = initr[i] + a[i][j]\n            else:\n                a[i][j] = a[i][j - 1] + a[i][j]\n    bestr = []\n    for i in range(n):\n        maxi = -1 * (sys.maxsize + 1)\n        mapp = -1\n        for j in range(m):\n            if maxi < a[i][j]:\n                maxi = a[i][j]\n                mapp = j\n        bestr.append(mapp)\n    d = dict()\n    rm = []\n    for i in range(m):\n        ll = []\n        for j in range(n):\n            ll.append(a[j][i])\n        ll = sorted(ll, reverse=1)\n        rank = 1\n        prev = ll[0]\n        d[ll[0]] = 1\n        count = 1\n        for k in range(1, n):\n            if prev != ll[k]:\n                rank += count\n                d[ll[k]] = rank\n                prev = ll[k]\n                count = 1\n            else:\n                count += 1\n        z = []\n        for j in range(n):\n            z.append(d[a[j][i]])\n        rm.append(z)\n    bestrank = []\n    for i in range(n):\n        mi = sys.maxsize\n        mappr = -1\n        for j in range(m):\n            if mi > rm[j][i]:\n                mi = rm[j][i]\n                mappr = j\n        bestrank.append(mappr)\n    ans = 0\n    for i in range(n):\n        if bestr[i] != bestrank[i]:\n            ans += 1\n    print(ans)\n    t -= 1", "t = int(input())\nfor z in range(t):\n    (n, m) = map(int, input().split())\n    initial = list(map(int, input().split()))\n    rating = [[0 for i in range(m)] for j in range(n)]\n    highest_rating = [0] * n\n    for i in range(n):\n        inp = list(map(int, input().split()))\n        for j in range(m):\n            initial[i] += inp[j]\n            rating[i][j] = initial[i]\n            if rating[i][j] > rating[i][highest_rating[i]]:\n                highest_rating[i] = j\n    ranking = [[0 for i in range(m)] for j in range(n)]\n    for i in range(m):\n        s = []\n        for j in range(n):\n            s.append(rating[j][i])\n        s.sort(reverse=True)\n        d = dict()\n        for j in range(n):\n            if s[j] not in d:\n                d[s[j]] = j\n        for j in range(n):\n            ranking[j][i] = d[rating[j][i]]\n    best_ranking = [0] * n\n    for i in range(n):\n        for j in range(1, m):\n            if ranking[i][j] < ranking[i][best_ranking[i]]:\n                best_ranking[i] = j\n    count = 0\n    for i in range(n):\n        if highest_rating[i] != best_ranking[i]:\n            count += 1\n    print(count)", "import sys\nt = int(input())\nwhile t:\n    (n, m) = map(int, sys.stdin.readline().split())\n    r = list(map(int, sys.stdin.readline().split()))\n    c = []\n    for i in range(n):\n        b = list(map(int, sys.stdin.readline().split()))\n        c.append(b[:])\n    for i in range(n):\n        a = r[i]\n        for j in range(m):\n            c[i][j] += a\n            a = c[i][j]\n    k = []\n    for i in range(n):\n        u = 0\n        p = -1\n        for j in range(m):\n            if u < c[i][j]:\n                u = c[i][j]\n                p = j\n        k.append(p)\n    for j in range(m):\n        d = []\n        for i in range(n):\n            d.append(c[i][j])\n        d.sort(reverse=True)\n        b = []\n        c1 = 1\n        m1 = d[0]\n        for i in range(len(d)):\n            if m1 == d[i]:\n                b.append(c1)\n            else:\n                c1 = i + 1\n                m1 = d[i]\n                b.append(c1)\n        p = {}\n        for i in range(n):\n            p[d[i]] = b[i]\n        for i in range(n):\n            l = c[i][j]\n            c[i][j] = p[l]\n    v = []\n    for i in range(n):\n        u = 10000\n        p = -1\n        for j in range(m):\n            if u > c[i][j]:\n                u = c[i][j]\n                p = j\n        v.append(p)\n    c = 0\n    for i in range(len(v)):\n        if v[i] != k[i]:\n            c += 1\n    print(c)\n    t -= 1", "import numpy as np\n\ndef rate(arr):\n    d = {}\n    for i in range(len(arr)):\n        if arr[i] in d:\n            d[arr[i]].append(i + 1)\n        else:\n            d[arr[i]] = [i + 1]\n    nd = {}\n    rank = 1\n    for item in sorted(d, reverse=True):\n        for i in d[item]:\n            nd[i] = rank\n        rank = rank + len(d[item])\n    return nd\nfor test in range(int(input())):\n    (n, m) = map(int, input().split())\n    start = list(map(int, input().split()))\n    month_changes = []\n    for _ in range(n):\n        changes = list(map(int, input().split()))\n        month_changes.append(changes)\n    month_changes = np.array(month_changes)\n    players = np.zeros((n, m))\n    players[:, 0] = start + month_changes[:, 0]\n    for i in range(1, m):\n        players[:, i] = players[:, i - 1] + month_changes[:, i]\n    max_ratings = [np.argmax(players[i]) + 1 for i in range(n)]\n    ratings_each_month = [rate(players[:, i]) for i in range(m)]\n    l = []\n    for player in range(n):\n        l.append([(ratings_each_month[j][player + 1], j + 1) for j in range(m)])\n    gogo = []\n    for player in l:\n        gogo.append(min(player, key=lambda x: x[0] + 1e-05 * x[1])[1])\n    ct = 0\n    for i in range(len(gogo)):\n        ct += int(gogo[i] != max_ratings[i])\n    print(ct)", "from collections import Counter\n\ndef changeArr(input1):\n    newArray = input1.copy()\n    newArray.sort(reverse=True)\n    ranks = {}\n    for i in range(0, len(newArray)):\n        element = newArray[i]\n        if element not in ranks:\n            ranks[element] = i + 1\n    for index in range(len(input1)):\n        element = input1[index]\n        input1[index] = ranks[input1[index]]\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    r = list(map(int, input().split()))\n    c = [list(map(int, input().split())) for i in range(n)]\n    for i in range(n):\n        for j in range(m):\n            if j == 0:\n                c[i][j] += r[i]\n            else:\n                c[i][j] += c[i][j - 1]\n    m1 = []\n    for i in range(n):\n        m1.append(c[i].index(max(c[i])) + 1)\n    m2 = []\n    g = []\n    for i in range(m):\n        temp = []\n        for j in range(n):\n            temp.append(c[j][i])\n        changeArr(temp)\n        g.append(temp)\n\n    def transpose(A, B):\n        for i in range(n):\n            for j in range(m):\n                B[i][j] = A[j][i]\n    B = [[0 for x in range(m)] for y in range(n)]\n    transpose(g, B)\n    for i in range(n):\n        m2.append(B[i].index(min(B[i])) + 1)\n    count = 0\n    for i in range(n):\n        if m1[i] != m2[i]:\n            count += 1\n    print(count)", "for _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = list(map(int, input().split()))\n    c = {}\n    ans = 0\n    for i in range(n):\n        c[i] = [0, 0, 100000, 0]\n    d = {}\n    for i in range(n):\n        d[i] = []\n    for i in range(n):\n        b = list(map(int, input().split()))\n        for j in range(m):\n            a[i] += b[j]\n            d[i].append(a[i])\n            if a[i] > c[i][0]:\n                c[i][0] = a[i]\n                c[i][1] = j\n    for i in range(m):\n        e = sorted(d.items(), key=lambda x: x[1][i], reverse=True)\n        p = 0\n        (s, t) = e[0]\n        if c[s][2] > p:\n            c[s][2] = p\n            c[s][3] = i\n        for j in range(1, len(e)):\n            (u, v) = e[j]\n            if v[i] == e[j - 1][1][i]:\n                if c[u][2] > p:\n                    c[u][2] = p\n                    c[u][3] = i\n            else:\n                p = j\n                if c[u][2] > p:\n                    c[u][2] = p\n                    c[u][3] = i\n    for (k, v) in c.items():\n        if v[1] != v[3]:\n            ans += 1\n    print(ans)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    ini = list(map(int, input().split()))\n    d = [[0 for _ in range(m)] for _ in range(n)]\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n    for i in range(len(l)):\n        for j in range(len(l[i])):\n            if j == 0:\n                d[i][j] = ini[i] + l[i][j]\n            else:\n                d[i][j] = d[i][j - 1] + l[i][j]\n    rank = [[0 for _ in range(m)] for _ in range(n)]\n    for j in range(m):\n        l1 = []\n        for i in range(n):\n            l1.append([d[i][j], i])\n        l1.sort()\n        prev = l1[n - 1][0]\n        r = 1\n        c = 1\n        for i in range(n - 1, -1, -1):\n            if l1[i][0] == prev:\n                c += 1\n            else:\n                r = c\n                c += 1\n                prev = l1[i][0]\n            rank[l1[i][1]][j] = r\n    c = 0\n    for i in range(n):\n        m1 = d[i].index(max(d[i]))\n        m2 = rank[i].index(min(rank[i]))\n        if m1 != m2:\n            c += 1\n    print(c)", "import heapq\nimport sys\nt = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().strip().split())\n    initial_rating = list(map(int, input().strip().split()))\n    rating_matrix = [[None] * n for i in range(m)]\n    for i in range(n):\n        player_rating_change = list(map(int, input().strip().split()))\n        rating_matrix[0][i] = initial_rating[i] + player_rating_change[0]\n        for j in range(1, m):\n            rating_matrix[j][i] = rating_matrix[j - 1][i] + player_rating_change[j]\n    ranking_matrix = [[None] * n for i in range(m)]\n    for i in range(m):\n        player_monthly_rating = rating_matrix[i]\n        curr_heap = []\n        for j in range(n):\n            heapq.heappush(curr_heap, [-player_monthly_rating[j], j])\n        curr_rank = 0\n        curr_index = 0\n        prev_rating_value = None\n        for j in range(n):\n            (rating, index) = heapq.heappop(curr_heap)\n            rating *= -1\n            curr_index += 1\n            if prev_rating_value != rating:\n                curr_rank = curr_index\n            ranking_matrix[i][index] = curr_rank\n            prev_rating_value = rating\n    count = 0\n    for i in range(n):\n        max_rank = sys.maxsize\n        max_rating = -sys.maxsize\n        max_rank_index = None\n        max_rating_index = None\n        for j in range(m):\n            if rating_matrix[j][i] > max_rating:\n                max_rating_index = j\n                max_rating = rating_matrix[j][i]\n            if ranking_matrix[j][i] < max_rank:\n                max_rank_index = j\n                max_rank = ranking_matrix[j][i]\n        if max_rank_index != max_rating_index:\n            count += 1\n    print(count)", "t = int(input())\nwhile t > 0:\n    t = t - 1\n    [n, m] = input().split()\n    n = int(n)\n    m = int(m)\n    r = input().split()\n    a = []\n    b = []\n    peak_rate = [0] * n\n    peak_rank = [0] * n\n    for i in range(0, n):\n        r[i] = int(r[i])\n    for j in range(0, n):\n        x = input().split()\n        for i in range(0, m):\n            x[i] = int(x[i])\n        x[0] = r[j] + x[0]\n        for i in range(1, m):\n            x[i] = x[i - 1] + x[i]\n        peak_rate[j] = x.index(max(x))\n        a.append(x)\n    for i in range(0, n):\n        b.append([0] * m)\n    x = []\n    for i in range(0, m):\n        x = []\n        for j in range(0, n):\n            x.append([a[j][i], j])\n        x.sort(key=lambda k: k[0], reverse=True)\n        b[x[0][1]][i] = 0\n        for j in range(1, n):\n            if x[j][0] == x[j - 1][0]:\n                b[x[j][1]][i] = b[x[j - 1][1]][i]\n            else:\n                b[x[j][1]][i] = j\n    count = 0\n    for i in range(0, n):\n        if b[i].index(min(b[i])) == peak_rate[i]:\n            count = count + 1\n    print(n - count)", "t = int(input())\nwhile t:\n    (n, m) = map(int, input().split())\n    l = [[] for j in range(n)]\n    k = [[0 for i in range(m)] for j in range(n)]\n    ini = list(map(int, input().split()))\n    peak_rate = []\n    pkrm = []\n    pkram = []\n    peak_rank = []\n    temp = []\n    for j in range(n):\n        rec = []\n        rec = list(map(int, input().split()))\n        for i in range(len(rec)):\n            if len(l[j]) == 0:\n                l[j].append(ini[j] + rec[i])\n            else:\n                l[j].append(l[j][i - 1] + rec[i])\n        rec.clear()\n    for i in range(m):\n        for j in range(n):\n            temp.append(l[j][i])\n        temp.sort(reverse=True)\n        count = 0\n        dict_1 = {}\n        dict_1[temp[0]] = 1\n        for r in range(1, n):\n            if temp[r] == temp[r - 1]:\n                dict_1[temp[r]] = dict_1[temp[r - 1]]\n                count += 1\n            else:\n                dict_1[temp[r]] = dict_1[temp[r - 1]] + count + 1\n                count = 0\n        for r in range(n):\n            k[r][i] = dict_1[l[r][i]]\n        temp.clear()\n        dict_1.clear()\n    ans = 0\n    for i in range(n):\n        peak_rate.append(l[i].index(max(l[i])))\n        peak_rank.append(k[i].index(min(k[i])))\n    for i in range(len(peak_rank)):\n        if peak_rank[i] != peak_rate[i]:\n            ans += 1\n    print(ans)\n    t -= 1", "from collections import defaultdict\nimport math\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    a = [[0] * n for i in range(m + 1)]\n    b = list(map(int, input().split()))\n    hrank = [float('inf')] * n\n    hrating = [0] * n\n    hrankm = [0] * n\n    hratingm = [0] * n\n    for i in range(n):\n        a[0][i] = b[i]\n    for i in range(n):\n        b = list(map(int, input().split()))\n        for j in range(1, m + 1):\n            a[j][i] = b[j - 1] + a[j - 1][i]\n    for i in range(1, m + 1):\n        b = a[i]\n        b = list(enumerate(b))\n        b.sort(key=lambda x: x[1], reverse=True)\n        rank = 1\n        for j in range(n):\n            if j == 0:\n                rank = 1\n            elif b[j][1] != b[j - 1][1]:\n                rank = j + 1\n            if hrank[b[j][0]] > rank:\n                hrank[b[j][0]] = rank\n                hrankm[b[j][0]] = i\n            if hrating[b[j][0]] < b[j][1]:\n                hrating[b[j][0]] = b[j][1]\n                hratingm[b[j][0]] = i\n    coun = 0\n    for i in range(n):\n        if hratingm[i] != hrankm[i]:\n            coun += 1\n    print(coun)", "import sys\nimport math\n\ndef fout(s, end='\\n'):\n    sys.stdout.write(str(s) + end)\n\ndef fin():\n    return sys.stdin.readline().strip()\nmod = pow(10, 9) + 7\nt = int(fin())\nwhile t > 0:\n    t -= 1\n    (n, m) = map(int, fin().split())\n    init = [(int(x), 1) for x in fin().split()]\n    temp = []\n    temp.append(init)\n    for i in range(m):\n        temp.append([0] * n)\n    ans = {}\n    for i in range(n):\n        end = [int(x) for x in fin().split()]\n        ans[i] = [temp[1][i], 1]\n        for j in range(1, m + 1):\n            temp[j][i] = (temp[j - 1][i][0] + end[j - 1], i)\n            if temp[j][i][0] > ans[i][0]:\n                ans[i][0] = temp[j][i][0]\n                ans[i][1] = j\n    ranking = {}\n    for i in range(1, m + 1):\n        rank = 1\n        freq = 1\n        temp[i].sort(reverse=True)\n        curr = temp[i][0][1]\n        if curr not in ranking:\n            ranking[curr] = [rank, i]\n        elif ranking[curr][0] > rank:\n            ranking[curr] = [rank, i]\n        for j in range(1, n):\n            if temp[i][j][0] == temp[i][j - 1][0]:\n                freq += 1\n                curr = temp[i][j][1]\n                if curr not in ranking:\n                    ranking[curr] = [rank, i]\n                elif ranking[curr][0] > rank:\n                    ranking[curr] = [rank, i]\n            else:\n                rank += freq\n                freq = 1\n                curr = temp[i][j][1]\n                if curr not in ranking:\n                    ranking[curr] = [rank, i]\n                elif ranking[curr][0] > rank:\n                    ranking[curr] = [rank, i]\n    fa = 0\n    for i in range(n):\n        if ranking[i][1] != ans[i][1]:\n            fa += 1\n    print(fa)", "from sys import stdin, stdout\nfrom collections import defaultdict\nimport math\nfrom bisect import bisect\ninput = stdin.readline\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = list(map(int, input().split()))\n    cur = [[-100000, n + 1] for i in range(n)]\n    l1 = [[] for i in range(m)]\n    ans = [[0, 0] for i in range(n)]\n    for i in range(n):\n        l2 = list(map(int, input().split()))\n        for j in range(m):\n            l[i] += l2[j]\n            l1[j].append([l[i], i])\n    for i in l1:\n        i.sort(reverse=True)\n    for i in range(m):\n        c = 1\n        c3 = 1\n        num = l1[i][0][1]\n        rat = cur[num][0]\n        rank = cur[num][1]\n        c1 = l1[i][0][0]\n        c2 = 1\n        if c1 > rat:\n            cur[num][0] = c1\n            ans[num][0] = i\n        if c2 < rank:\n            cur[num][1] = c2\n            ans[num][1] = i\n        for j in range(1, n):\n            if l1[i][j - 1][0] > l1[i][j][0]:\n                c += c3\n                c3 = 1\n            else:\n                c3 += 1\n            num = l1[i][j][1]\n            rat = cur[num][0]\n            rank = cur[num][1]\n            c1 = l1[i][j][0]\n            c2 = c\n            if c1 > rat:\n                cur[num][0] = c1\n                ans[num][0] = i\n            if c2 < rank:\n                cur[num][1] = c2\n                ans[num][1] = i\n    c = 0\n    for i in ans:\n        if i[0] != i[1]:\n            c += 1\n    print(c)", "for _ in range(int(input())):\n    (n, m) = (int(i) for i in input().split())\n    r = list((int(i) for i in input().split()))\n    li = [[int(i) for i in input().split()] for j in range(n)]\n    for i in range(n):\n        li[i][0] += r[i]\n    for i in range(n):\n        for j in range(1, m):\n            li[i][j] += li[i][j - 1]\n    lk = [[0] * m for i in range(n)]\n    d = {}\n    for i in range(m):\n        s = sorted((li[j][i] for j in range(n)), reverse=True)\n        for o in range(len(s) - 1, -1, -1):\n            d[s[o]] = o + 1\n        for j in range(n):\n            lk[j][i] = d[li[j][i]]\n    c = 0\n    for i in range(n):\n        ma = max(li[i])\n        ind = li[i].index(ma)\n        iiind = lk[i].index(min(lk[i]))\n        if ind != iiind:\n            c += 1\n    print(c)", "from copy import copy\n\nclass Player:\n\n    def __init__(self, rating, i):\n        self.rating = rating\n        self.ranking = None\n        self.best_rate_month = 0\n        self.best_rank_month = 0\n        self.best_rate = 0\n        self.best_Rank = 10 ** 9\n        self.index = i\n\n    def changeRating(self, inc, month):\n        if self.rating + inc > self.best_rate:\n            self.best_rate = self.rating + inc\n            self.best_rate_month = month\n        self.rating = self.rating + inc\n\n    def changeRanking(self, ranking, month):\n        if ranking < self.best_Rank:\n            self.best_Rank = ranking\n            self.best_rank_month = month\n        self.ranking = ranking\n\ndef key_val(obj):\n    return obj.rating\n\ndef solve(lst, players):\n    rankings = [0] * n\n    for month in range(m):\n        for player in range(n):\n            players[player].changeRating(lst[player][month], month + 1)\n        temp = copy(players)\n        temp.sort(key=key_val, reverse=True)\n        for i in range(n):\n            if i >= 1 and temp[i].rating == temp[i - 1].rating:\n                rankings[temp[i].index] = rankings[temp[i - 1].index]\n                continue\n            rankings[temp[i].index] = i + 1\n        for i in range(n):\n            players[i].changeRanking(rankings[i], month + 1)\n    count = 0\n    for p in players:\n        if p.best_rank_month != p.best_rate_month:\n            count += 1\n    return count\ntc = int(input())\nfor _ in range(tc):\n    (n, m) = map(int, input().split())\n    init_rating = list(map(int, input().split()))\n    players = []\n    i = 0\n    for x in init_rating:\n        players.append(Player(x, i))\n        i += 1\n    lst = []\n    for i in range(n):\n        row = list(map(int, input().split()))\n        lst.append(row)\n    print(solve(lst, players))", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    r = list(map(int, input().split()))\n    rate = list()\n    for i in range(n):\n        rating = r[i]\n        c = list(map(int, input().split()))\n        temp = list()\n        for j in c:\n            rating += j\n            temp.append(rating)\n        rate.append(temp)\n    ratings = list((-1 for i in range(n)))\n    rankings = list((-1 for i in range(n)))\n    bestRatings = list((-1 for i in range(n)))\n    bestRankings = list((1000 for i in range(n)))\n    for i in range(m):\n        temp = list()\n        for j in range(n):\n            rating = rate[j][i]\n            temp.append(rating)\n        temp.sort(reverse=True)\n        tempDict = dict()\n        for x in range(n):\n            if temp[x] not in tempDict.keys():\n                tempDict[temp[x]] = x\n        for j in range(n):\n            if rate[j][i] > bestRatings[j]:\n                bestRatings[j] = rate[j][i]\n                ratings[j] = i\n            if tempDict[rate[j][i]] < bestRankings[j]:\n                bestRankings[j] = temp.index(rate[j][i])\n                rankings[j] = i\n    count = 0\n    for i in range(n):\n        if rankings[i] != ratings[i]:\n            count += 1\n    print(count)", "T = int(input())\nfor _ in range(T):\n    (N, M) = map(int, input().split())\n    A = list(map(int, input().split()))\n    l = []\n    for i in range(N):\n        l.append(list(map(int, input().split())))\n    for i in range(N):\n        for j in range(M):\n            A[i] += l[i][j]\n            l[i][j] = A[i]\n    R = [[0 for i in range(M)] for j in range(N)]\n    for j in range(M):\n        X = []\n        for i in range(N):\n            X.append(l[i][j])\n        X.sort()\n        Y = [0 for i in range(N)]\n        y = 0\n        x = 1\n        m = -1000000\n        for i in range(N - 1, -1, -1):\n            if m == X[i]:\n                Y[i] = y\n            else:\n                y = x\n                Y[i] = y\n                m = X[i]\n            x += 1\n        d = dict()\n        for i in range(N):\n            d[X[i]] = Y[i]\n        for i in range(N):\n            R[i][j] = d[l[i][j]]\n    f = 0\n    for i in range(N):\n        x = min(R[i])\n        y = max(l[i])\n        a = -1\n        b = -1\n        for j in range(M):\n            if R[i][j] == x:\n                a = j\n                break\n        for j in range(M):\n            if l[i][j] == y:\n                b = j\n                break\n        if a != b:\n            f += 1\n    print(f)", "def sortSecond(val):\n    return val[0]\nt = int(input())\nwhile t:\n    t -= 1\n    (n, m) = map(int, input().split())\n    R = list(map(int, input().split()))\n    tt = n\n    i = 0\n    j = 0\n    mat = []\n    while tt:\n        tt -= 1\n        l = list(map(int, input().split()))\n        mat.append(l)\n    high_rate = [0] * n\n    high_rank_month = [[0 for a in range(0, m)] for b in range(0, n)]\n    count = 0\n    for i in range(0, n):\n        flag = 0\n        maxi = -1\n        current = 0\n        for j in range(0, m):\n            if j == 0:\n                current = R[i] + mat[i][j]\n                mat[i][j] = current\n            else:\n                current += mat[i][j]\n                mat[i][j] = current\n            if current > maxi:\n                maxi = current\n                flag = j\n        high_rate[i] = flag\n    for i in range(0, m):\n        maxi = -1\n        copy = []\n        l = []\n        for j in range(0, n):\n            l.append((mat[j][i], j))\n        l.sort(reverse=True, key=sortSecond)\n        kk = 1\n        high_rank_month[l[0][1]][i] = kk\n        for a in range(1, n):\n            kk += 1\n            if l[a][0] != l[a - 1][0]:\n                high_rank_month[l[a][1]][i] = kk\n            else:\n                high_rank_month[l[a][1]][i] = high_rank_month[l[a - 1][1]][i]\n    count = 0\n    for i in range(0, n):\n        temp = high_rate[i]\n        ind = 0\n        mini = 184564513215\n        for j in range(0, m):\n            if mini > high_rank_month[i][j]:\n                mini = high_rank_month[i][j]\n                ind = j\n        if temp != ind:\n            count += 1\n    print(count)", "from sys import stdin, stdout\nfrom math import gcd, log2\nimport math\nfrom collections import defaultdict\ninput = stdin.readline\n\ndef giveranks(l):\n    res = [0] * len(l)\n    dict = defaultdict(int)\n    lcopy = l.copy()\n    lcopy.sort(reverse=True)\n    dict[lcopy[0]] = 1\n    for i in range(1, len(l)):\n        if lcopy[i] == lcopy[i - 1]:\n            dict[lcopy[i]] = dict[lcopy[i - 1]]\n        else:\n            dict[lcopy[i]] = i + 1\n    for i in range(len(l)):\n        res[i] = dict[l[i]]\n    return res\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    l = []\n    ratingmonth = []\n    for i in range(n):\n        templist = []\n        for j in range(m):\n            templist.append(0)\n        l.append(templist)\n    for i in range(m):\n        templist = []\n        for j in range(n):\n            templist.append(0)\n        ratingmonth.append(templist)\n    a = list(map(int, input().split()))\n    for i in range(n):\n        l[i][0] = a[i]\n    for i in range(n):\n        a = list(map(int, input().split()))\n        for j in range(m):\n            if j == 0:\n                l[i][j] += a[j]\n            else:\n                l[i][j] = l[i][j - 1] + a[j]\n    bestrankmonth = [0] * n\n    for i in range(n):\n        bestrankmonth[i] = 1 + l[i].index(max(l[i]))\n    for i in range(m):\n        templist = []\n        for j in range(n):\n            templist.append(l[j][i])\n        ratingmonth[i] = giveranks(templist)\n    ratingmonthreverse = []\n    for i in range(n):\n        temp = []\n        for j in range(m):\n            temp.append(ratingmonth[j][i])\n        ratingmonthreverse.append(temp)\n    bestrankingmonth = [0] * n\n    for i in range(n):\n        bestrankingmonth[i] = 1 + ratingmonthreverse[i].index(min(ratingmonthreverse[i]))\n    count = 0\n    for i in range(n):\n        if bestrankmonth[i] != bestrankingmonth[i]:\n            count += 1\n    print(count)", "import numpy as np\nimport copy\nfor _ in range(int(input())):\n    (N, M) = map(int, input().split())\n    R = np.array(list(map(int, input().split())))\n    C = np.array([list(map(int, input().split())) for i in range(N)])\n    C[:, 0] += R\n    C = C.cumsum(axis=1)\n    Y = C.argmax(axis=1)\n    X = np.empty((N, M), dtype=int)\n    for i in range(M):\n        m = C[:, i].copy()\n        m.sort()\n        X[:, i] = np.searchsorted(m, C[:, i], side='right')\n    X = X.argmax(axis=1)\n    print(N - (X == Y).sum())", "def rankit(arr, n):\n    arr = list(arr)\n    for i in range(n):\n        arr[i] = [i, arr[i]]\n    arr.sort(key=lambda x: x[1], reverse=True)\n    sp = 1\n    x = [0] * n\n    for i in range(n):\n        if i and arr[i - 1][1] == arr[i][1]:\n            x[arr[i][0]] = x[arr[i - 1][0]]\n        else:\n            x[arr[i][0]] = i + 1\n    return x\nfor _ in range(int(input())):\n    (n, m) = map(int, input().split())\n    ir = list(map(int, input().split()))\n    rl = list()\n    rankl = list()\n    for i in range(n):\n        tem = list(map(int, input().split()))\n        s = 0\n        mx = -999999\n        trac = 0\n        for x in range(m):\n            s += tem[x]\n            tem[x] = s\n            if s > mx:\n                mx = s\n                trac = x + 1\n        rl.append(trac)\n        for x in range(m):\n            tem[x] += ir[i]\n        rankl.append(tem)\n    rankl = list(zip(*rankl))\n    p = list()\n    for i in range(m):\n        p.append(rankit(rankl[i], n))\n    rankl = list(zip(*p))\n    p.clear()\n    for i in range(n):\n        mn = 99999\n        trac = 0\n        for x in range(m):\n            if rankl[i][x] < mn:\n                mn = rankl[i][x]\n                trac = x + 1\n            if mn == 1:\n                break\n        p.append(trac)\n    xc = 0\n    for i in range(n):\n        if p[i] != rl[i]:\n            xc += 1\n    print(xc)", "t = int(input())\nfor _ in range(t):\n    (n, m) = map(int, input().split())\n    curr = list(map(int, input().split()))\n    max_so_far = [0] * n\n    scores = curr[:]\n    rank_so_far = [n] * n\n    best_ranking = [n] * n\n    best_rating = [0] * n\n    l = []\n    for i in range(n):\n        l.append(list(map(int, input().split())))\n        x = l[i][:]\n        for j in range(m):\n            curr[i] += x[j]\n            if curr[i] > max_so_far[i]:\n                best_rating[i] = j + 1\n                max_so_far[i] = curr[i]\n    for i in range(m):\n        for j in range(n):\n            scores[j] += l[j][i]\n        x = scores[:]\n        p = list(set(x))\n        p.sort(reverse=True)\n        d = {}\n        for j in x:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n        rank = 1\n        v = {}\n        for j in p:\n            v[j] = rank\n            rank += d[j]\n        for j in range(n):\n            if v[x[j]] < rank_so_far[j]:\n                best_ranking[j] = i + 1\n                rank_so_far[j] = v[x[j]]\n    c = 0\n    for i in range(n):\n        if best_ranking[i] != best_rating[i]:\n            c += 1\n    print(c)"]