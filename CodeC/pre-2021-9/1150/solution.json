["t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = 1\n    l = []\n    p = 1\n    s = []\n    c = 0\n    for j in range(n):\n        if c:\n            l1 = list(reversed(s))\n            l += l1[0:n - len(l)]\n            c = 0\n            if len(l) == n:\n                break\n        if len(l) + 1 == 2 ** p:\n            m += 1\n            p += 1\n            c = 1\n            s = l.copy()\n        l.append(m)\n    l = ' '.join([str(x) for x in l])\n    print(l)", "t = int(input())\nfor i in range(t):\n    n = int(input())\n    m = 1\n    l = []\n    p = 1\n    s = []\n    c = 0\n    for j in range(n):\n        if c:\n            l1 = list(reversed(s))\n            l += l1[0:n - len(l)]\n            c = 0\n            if len(l) == n:\n                break\n        if len(l) + 1 == 2 ** p:\n            m += 1\n            p += 1\n            c = 1\n            s = l.copy()\n        l.append(m)\n    l = ' '.join([str(x) for x in l])\n    print(l)", "for t in range(int(input())):\n    n = int(input())\n    maxint = 1\n    l = []\n    p = 1\n    subseq = []\n    pf = 0\n    for i in range(n):\n        if pf:\n            t = list(reversed(subseq))\n            l += t[0:n - len(l)]\n            pf = 0\n            if len(l) == n:\n                break\n        if len(l) + 1 == 2 ** p:\n            maxint += 1\n            p += 1\n            pf = 1\n            subseq = l.copy()\n        l.append(maxint)\n    l = ' '.join([str(e) for e in l])\n    print(l)", "t = int(input())\nwhile t:\n    n = int(input())\n    if n == 1:\n        ans = [1]\n    else:\n        ans = [1]\n        for i in range(2, 100):\n            ans += ans\n            ans = ans[:len(ans) - 1]\n            ans = ans + [i]\n            if len(ans) >= n:\n                break\n    ans = ans[:n]\n    for f in ans:\n        print(f, end=' ')\n    print()\n    t -= 1", "t = int(input())\nwhile t:\n    n = int(input())\n    if n == 1:\n        ans = [1]\n    else:\n        ans = [1]\n        for i in range(2, 100):\n            ans += ans\n            ans = ans[:len(ans) - 1]\n            ans = ans + [i]\n            if len(ans) >= n:\n                break\n    ans = ans[:n]\n    for f in ans:\n        print(f, end=' ')\n    print()\n    t -= 1", "import sys\n\ndef input():\n    return sys.stdin.readline().rstrip('\\r\\n')\n\ndef maps():\n    return [int(i) for i in input().split()]\na = '1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 9 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 10 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 9 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4'.split(' ')\narr = [1, 2, 1]\nfor mx in range(3, 11):\n    t = arr[:]\n    arr.append(mx)\n    arr.extend(t)\nfor _ in range(*maps()):\n    (n,) = maps()\n    print(*arr[:n])", "import sys\nimport time\nstart_time = time.time()\ntry:\n    sys.stdin = open('5.txt', 'r')\nexcept:\n    pass\ninput = sys.stdin.readline\nT = int(input())\na = '1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 9 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 10 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 9 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 8 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 7 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 5 1 2 1 3 1 2 1 4 1 2 1 3 1 2 1 6 1 2 1 3 1 2 1 4'.split(' ')\nfor _ in range(T):\n    n = int(input())\n    print(*a[:n])\nend_time = time.time()\nsys.stderr.write('Time: ' + str(end_time - start_time))", "def solveG(N):\n    n = len(bin(N)) - 2\n    A = []\n    l = 0\n    for mx in range(1, n + 1):\n        A.append(mx)\n        l += 1\n        if l == N:\n            return A\n        for i in range(2 ** (mx - 1) - 1):\n            A.append(A[i])\n            l += 1\n            if l == N:\n                return A\nfor _ in range(int(input())):\n    print(*solveG(int(input())))", "def solveG(N):\n    n = len(bin(N)) - 2\n    A = []\n    l = 0\n    for mx in range(1, n + 1):\n        A.append(mx)\n        l += 1\n        if l == N:\n            return A\n        for i in range(2 ** (mx - 1) - 1):\n            A.append(A[i])\n            l += 1\n            if l == N:\n                return A\nfor _ in range(int(input())):\n    N = int(input())\n    print(*solveG(N))", "for tc in range(int(input())):\n    n = int(input())\n    dp = [[1]]\n    st = 2\n    for x in range(2, n + 1):\n        if x % 2 == 0:\n            dp.append(dp[-1] + [st])\n            st += 1\n        else:\n            dp.append(dp[-1] + dp[-2])\n        if len(dp[-1]) >= n:\n            break\n    for x in dp[-1][0:n]:\n        print(x, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = []\n    i = 1\n    p = 0\n    while len(l) < n:\n        l.append(i)\n        for j in range(p):\n            l.append(l[j])\n        i += 1\n        p = 2 * p + 1\n    for i in range(n):\n        print(l[i], end=' ')\n    print()", "print(*[' '.join([str(bin(i ^ i + 1).count('1')) for i in range(int(input()))]) for _ in range(int(input()))], sep='\\n')", "l = [1, 2, 1]\nfor x in range(1000):\n    l.append(x + 3)\n    l = l + l[:len(l) - 1]\n    if len(l) > 1000:\n        break\nt = int(input())\nwhile t:\n    n = int(input())\n    print(' '.join([str(l[x]) for x in range(n)]))\n    t = t - 1", "(dp, count) = ([1], 1)\nwhile len(dp) < 1000:\n    arr = dp[:]\n    count += 1\n    dp.append(count)\n    dp.extend(arr)\nfor _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        print(dp[i], end=' ')\n    print()", "dp = [1]\nx = 2\nwhile len(dp) < 1000:\n    dp = dp + [x] + dp\n    x += 1\n\ndef solve():\n    n = int(input())\n    print(*dp[:n])\nfor _ in range(int(input())):\n    solve()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        ans = [1]\n    else:\n        ans = [1]\n        for i in range(2, 100):\n            ans += ans\n            ans = ans[:len(ans) - 1]\n            ans = ans + [i]\n            if len(ans) >= n:\n                break\n        ans = ans[:n]\n    for f in ans:\n        print(f, end=' ')\n    print()", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        ans = [1]\n    else:\n        ans = [1]\n        for i in range(2, 100):\n            ans += ans\n            ans = ans[:len(ans) - 1]\n            ans = ans + [i]\n            if len(ans) >= n:\n                break\n        ans = ans[:n]\n    for f in ans:\n        print(f, end=' ')\n    print()", "final = [1]\nincr = 1\nwhile len(final) <= 1000:\n    temp = final.copy()\n    incr += 1\n    final.append(incr)\n    final += temp\n\ndef prog_name():\n    n = int(input())\n    if n == 1:\n        print(1)\n    elif n == 2:\n        print(1, 2)\n    elif n == 3:\n        print(1, 2, 1)\n    else:\n        for x in range(n):\n            print(final[x], end=' ')\n        print()\nT = int(input())\nfor unique in range(T):\n    prog_name()", "def give(a, k):\n    return a[0:-1] + [k]\na = [1, 2]\nk = 3\nfor i in range(9):\n    a += give(a, k)\n    k += 1\nfor _ in range(int(input())):\n    n = int(input())\n    print(*a[0:n])", "def arr(left, right, res, n, m):\n    if left > right:\n        return\n    mid = (left + right) // 2\n    res[mid] = m\n    arr(left, mid - 1, res, n, m + 1)\n    arr(mid + 1, right, res, n, m + 1)\n\ndef main():\n    for _ in range(int(input())):\n        n = int(input())\n        res = [0] * n\n        arr(0, n - 1, res, n, 1)\n        print(*res)\nmain()", "import sys\npow = 1\nans = [1]\nfor i in range(10001):\n    pow = 2 * pow\n    if 1001 <= pow:\n        n = i\n        break\nx = 2\nfor i in range(n):\n    ans = ans + [x] + ans\n    x += 1\nfrom collections import defaultdict\nfor _ in range(int(sys.stdin.readline())):\n    n = int(input())\n    for i in range(n):\n        sys.stdout.write(str(ans[i]) + ' ')\n    print()", "import os.path\nfrom math import gcd, floor, ceil\nfrom collections import *\nimport sys\nmod = 1000000007\nINF = float('inf')\n\ndef st():\n    return list(sys.stdin.readline().strip())\n\ndef li():\n    return list(map(int, sys.stdin.readline().split()))\n\ndef mp():\n    return map(int, sys.stdin.readline().split())\n\ndef inp():\n    return int(sys.stdin.readline())\n\ndef pr(n):\n    return sys.stdout.write(str(n) + '\\n')\n\ndef prl(n):\n    return sys.stdout.write(str(n) + ' ')\nif os.path.exists('input.txt'):\n    sys.stdin = open('input.txt', 'r')\n    sys.stdout = open('output.txt', 'w')\ndp = [1]\nx = 2\nwhile len(dp) < 1000:\n    dp = dp + [x] + dp\n    x += 1\n\ndef solve():\n    n = inp()\n    print(*dp[:n])\nfor _ in range(inp()):\n    solve()", "ans = [0] * 1000\n\ndef solution(n):\n\n    def recur(l, r, ele):\n        nonlocal n\n        if l > r:\n            return\n        m = (l + r) // 2\n        ans[m] = ele\n        recur(l, m - 1, ele + 1)\n        recur(m + 1, r, ele + 1)\n    recur(0, n - 1, 1)\n    return ans\nfor _ in range(int(input())):\n    n = int(input())\n    print(*solution(n)[:n])", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n == 1:\n        print(1)\n        continue\n    elif n == 2:\n        print('1 2')\n        continue\n    elif n == 3:\n        print('1 2 1')\n        continue\n    elif n == 4:\n        print('1 2 1 3')\n        continue\n    lst = [0 for i in range(n + 1)]\n    lst[1] = 1\n    lst[2] = 2\n    lst[3] = 1\n    lst[4] = 3\n    top = 3\n    i = 5\n    while i <= n:\n        j = 1\n        while 2 ** int(math.log(i, 2)) != i and i <= n:\n            lst[i] = lst[j]\n            i += 1\n            j += 1\n        if i > n:\n            break\n        lst[i] = top + 1\n        top += 1\n        i += 1\n    print(*lst[1:])", "t = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 1:\n        ans = [1]\n    else:\n        ans = [1]\n        for i in range(2, 100):\n            ans += ans\n            ans = ans[:len(ans) - 1]\n            ans = ans + [i]\n            if len(ans) >= n:\n                break\n        ans = ans[:n]\n    for f in ans:\n        print(f, end=' ')\n    print()", "from sys import stdin\ninput = stdin.readline\n\ndef answer():\n    ans = [0] * n\n    (skip, value) = (2, 1)\n    for i in range(n):\n        if ans[i] == 0:\n            for j in range(i, n, skip):\n                ans[j] = value\n            value += 1\n            skip *= 2\n    return ans\nfor T in range(int(input())):\n    n = int(input())\n    print(*answer())", "from sys import stdin, stdout\nfrom collections import Counter\nnmbr = lambda : int(input())\nlst = lambda : list(map(int, input().split()))\n\ndef fn(l, r, v):\n    if l > r:\n        return\n    mid = l + r >> 1\n    ans[mid] = v\n    fn(l, mid - 1, v + 1)\n    fn(mid + 1, r, v + 1)\nfor _ in range(nmbr()):\n    n = nmbr()\n    ans = [0] * n\n    fn(0, n - 1, 1)\n    print(*ans)", "def give(a, k):\n    return a[0:-1] + [k]\na = [1, 2]\nk = 3\nfor i in range(9):\n    a += give(a, k)\n    k += 1\nfor _ in range(int(input())):\n    n = int(input())\n    print(*a[0:n])", "t = int(input())\n\ndef lsb(num):\n    idx = 0\n    while num % 2 == 0:\n        num = num // 2\n        idx = idx + 1\n    return idx + 1\nwhile t > 0:\n    n = int(input())\n    ans = []\n    for i in range(1, n + 1):\n        ans.append(lsb(i))\n    print(*ans)\n    t = t - 1", "t = int(input())\nans = [1]\nn = 10\nfor i in range(2, n + 1):\n    c = ans[:]\n    ans.append(i)\n    ans += c\nfor _ in range(t):\n    n = int(input())\n    print(*ans[:n])", "def give(a, k):\n    return a[0:-1] + [k]\na = [1, 2]\nk = 3\nfor i in range(9):\n    a += give(a, k)\n    k += 1\nfor _ in range(int(input())):\n    n = int(input())\n    print(*a[0:n])", "s = [1]\nmx = 1\nwhile len(s) <= 1000:\n    temp = s.copy()\n    mx += 1\n    s.append(mx)\n    s.extend(temp)\nfor _ in range(int(input())):\n    n = int(input())\n    for i in range(n):\n        print(s[i], end=' ')\n    print()", "millors = [[1]]\nfor i in range(1000):\n    p = millors[-1]\n    for v in range(1, max(p) + 2):\n        imp = {v}\n        for r in p[::-1]:\n            if r not in imp:\n                imp.add(r)\n            else:\n                imp.remove(r)\n                if not imp:\n                    break\n        if imp:\n            millors.append(p + [v])\n            break\nfor _ in range(int(input())):\n    n = int(input())\n    print(' '.join((str(v) for v in millors[n - 1])))", "t = int(input())\nmylist = [1]\ncurrent = 2\nwhile len(mylist) < 1000:\n    newlist = [current]\n    newlist += mylist\n    mylist += newlist\n    current += 1\nfor _ in range(t):\n    n = int(input())\n    for i in range(n):\n        print(mylist[i], end=' ')\n    print()", "from collections import *\nimport sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef st():\n    return input().rstrip('\\n')\n\ndef lis():\n    return list(map(int, input().split()))\n\ndef ma():\n    return map(int, input().split())\nt = inp()\nco = 3\nwhile t:\n    t -= 1\n    cur = 1\n    n = inp()\n    have = [0 for i in range(n)]\n    for i in range(1, 1000):\n        fl = 0\n        tu = 0\n        for j in range(n):\n            if have[j] == 0:\n                if tu % 2 == 0:\n                    have[j] = i\n                    fl = 1\n                tu += 1\n        if fl == 0:\n            break\n    print(*have)", "T = int(input())\nfor t in range(T):\n    N = int(input())\n    i = 0\n    j = -1\n    A = []\n    curr = 1\n    while i < N:\n        if j == -1:\n            A.append(curr)\n            curr += 1\n            j = i - 1\n            i += 1\n        else:\n            A.append(A[j])\n            i += 1\n            j -= 1\n    for a in A:\n        print(a, end=' ')\n    print('')", "for _ in range(int(input())):\n    n = int(input())\n    a = [1]\n    i = 2\n    while len(a) < n:\n        a = a + [i] + a\n        i += 1\n    print(*a[:n])", "from sys import stdin, stdout\ninput = stdin.readline\npows = set()\nfor i in range(11):\n    pows.add(1 << i)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    vals = []\n    arr = []\n    curr = 0\n    ind = -1\n    for i in range(n):\n        if i + 1 in pows:\n            curr += 1\n            vals.append(curr)\n            arr.append(curr)\n            ind = -1\n            continue\n        ind += 1\n        if ind == i:\n            ind = 0\n        arr.append(arr[ind])\n    print(*arr)", "T = int(input())\nfor test in range(T):\n    N = int(input())\n    if N == 1:\n        print(1)\n        continue\n    elif N == 2:\n        print(1, 2)\n        continue\n    res = [1]\n    N -= 1\n    l = 0\n    max_el = 2\n    while N > 0:\n        res.append(max_el)\n        N -= 1\n        r = len(res) - 1\n        max_el += 1\n        l = 0\n        while l < r and N > 0:\n            res.append(res[l])\n            l += 1\n            N -= 1\n    print(' '.join([str(x) for x in res]))", "def construct(N):\n    arr = []\n    top = 1\n    while len(arr) < N:\n        arr = arr + [top] + arr\n        top += 1\n    return arr\nA = [str(x) for x in construct(1000)]\nT = int(input())\nfor t in range(T):\n    N = int(input())\n    print(' '.join(A[:N]))", "import bisect\ns = ['1']\nPRESEQ = []\nPRESEQL = []\nwhile len(s) <= 1000:\n    PRESEQ.append(s)\n    PRESEQL.append(len(s))\n    s = s + [str(len(PRESEQ) + 1)] + s\nPRESEQ.append(s)\nPRESEQL.append(len(s))\nfor _ in range(int(input())):\n    n = int(input())\n    b = bisect.bisect_left(PRESEQL, n)\n    p = PRESEQ[b]\n    print(' '.join(p[:n]))"]