["import math\n\ndef v(n):\n    return n * (n - 1) // 2\nfor i in range(int(input())):\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 == 0:\n        x = int((math.sqrt(4 + 8 * (n * n + n)) - 2) // 4)\n        ans = n - x\n        if x * (x + 1) // 2 == s // 2:\n            ans += v(x) + v(n - x)\n        print(ans)\n    else:\n        print('0')", "import math\n\ndef v(n):\n    return n * (n - 1) // 2\nfor i in range(int(input())):\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 == 0:\n        x = int((math.sqrt(4 + 8 * (n * n + n)) - 2) // 4)\n        ans = n - x\n        if x * (x + 1) // 2 == s // 2:\n            ans += v(x) + v(n - x)\n        print(ans)\n    else:\n        print('0')", "import math\n\ndef v(n):\n    return n * (n - 1) // 2\nfor i in range(int(input())):\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 == 0:\n        x = int((math.sqrt(4 + 8 * (n * n + n)) - 2) // 4)\n        ans = n - x\n        if x * (x + 1) // 2 == s // 2:\n            ans += v(x) + v(n - x)\n        print(ans)\n    else:\n        print('0')", "import math\n\ndef snek(n):\n    return n * (n - 1) // 2\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 == 0:\n        x = int((math.sqrt(4 + 8 * (n * n + n)) - 2) // 4)\n        ans = n - x\n        if x * (x + 1) // 2 == s // 2:\n            ans += snek(x) + snek(n - x)\n        print(ans)\n    else:\n        print('0')", "import math\n\ndef fun(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 == 0:\n        x = int((math.sqrt(4 + 8 * (n * n + n)) - 2) // 4)\n        ans = n - x\n        if x * (x + 1) // 2 == s // 2:\n            ans += fun(x) + fun(n - x)\n        print(ans)\n    else:\n        print('0')", "import math\n\ndef nc2(n):\n    return n * (n - 1) // 2\nfor T in range(int(input())):\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 != 0:\n        print(0)\n    else:\n        x = int((math.sqrt(4 + 8 * (n * n + n)) - 2) // 4)\n        ans = n - x\n        if 2 * (x * x + x) == n * n + n:\n            ans += nc2(x) + nc2(n - x)\n        print(ans)", "import math as m\nfor _ in range(int(input())):\n    n = int(input())\n    if n * (n + 1) // 2 & 1:\n        print(0)\n        continue\n    (s, ans, t) = ((n * n + n) // 4, n - m.floor((-1 + m.sqrt(2 * n * n + 2 * n + 1)) / 2), m.sqrt(2 * n * n + 2 * n + 1))\n    if t == m.floor(t):\n        t = (int(t) - 1) // 2\n        t1 = n - t\n        ans += t * (t - 1) // 2 + t1 * (t1 - 1) // 2\n    print(ans)", "import math\n\ndef compute(n):\n    c = -(n * (n + 1)) / 2\n    d = 1 - 4 * c\n    rd = math.sqrt(d)\n    root = math.floor((-1 + rd) / 2)\n    return n - root\ntestcases = int(input())\nwhile testcases:\n    n = int(input())\n    if (n + 1) % 4 == 0 or n % 4 == 0:\n        breakpoint = compute(n)\n        if (n - breakpoint) * (n - breakpoint + 1) / 2 == n * (n + 1) / 4:\n            c = breakpoint * (breakpoint - 1) / 2 + (n - breakpoint) * (n - breakpoint - 1) / 2\n            c = c + breakpoint\n            print(int(c))\n        else:\n            print(breakpoint)\n    else:\n        print(0)\n    testcases = testcases - 1", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2 != 0:\n        print(0)\n        continue\n    m = int(sqrt(1 + 4 * sum) - 1) // 2\n    if m * (m + 1) // 2 == sum // 2:\n        print((m - 1) * m // 2 + n - m + (n - m - 1) * (n - m) // 2)\n    else:\n        print(n - m)", "import math\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "from math import sqrt\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2 != 0:\n        print(0)\n        t -= 1\n        continue\n    m = int(sqrt(1 + 4 * sum) - 1) // 2\n    if m * (m + 1) // 2 == sum // 2:\n        print((m - 1) * m // 2 + n - m + (n - m - 1) * (n - m) // 2)\n    else:\n        print(n - m)\n    t -= 1", "def binary_search(n, target):\n    lo = 1\n    hi = n\n    while lo <= hi:\n        mid = (lo + hi) // 2\n        x = mid * (mid + 1) // 2\n        if x < target:\n            lo = mid + 1\n        elif x > target:\n            hi = mid - 1\n        else:\n            return (True, mid)\n    return (False, hi)\n\ndef solve(n):\n    m = n * (n + 1) // 2\n    if m % 2 == 1:\n        return 0\n    (find, j) = binary_search(n, m // 2)\n    ans = 0\n    if find:\n        k = n - j\n        ans += j * (j - 1) // 2\n        ans += k * (k - 1) // 2\n    return ans + n - j\nfor _ in range(int(input())):\n    n = int(input())\n    print(solve(n))", "from math import floor, sqrt\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    if m % 4 == 1 or m % 4 == 2:\n        print(0)\n    else:\n        s = m * (m + 1) // 2\n        res = 0\n        sm = s // 2\n        p1 = floor((sqrt(4 * s + 1) - 1) / 2)\n        s1 = p1 * (p1 + 1) // 2\n        p = [p1 - 1, p1, p1 + 1]\n        s = [s1 - p1, s1, s1 + p[2]]\n        l = [sm - s[0], sm - s1, sm - s[2]]\n        for j in range(len(l)):\n            if l[j] == 0:\n                res += (p[j] * (p[j] - 1) + (m - p[j] - 1) * (m - p[j])) // 2\n            elif l[j] > 0 and l[j] < m:\n                res += min([l[j], m - l[j], p[j], m - p[j]])\n        print(res)", "from math import floor, sqrt\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    if m % 4 == 1 or m % 4 == 2:\n        print(0)\n    else:\n        s = m * (m + 1) // 2\n        res = 0\n        sm = s // 2\n        p1 = floor((sqrt(4 * s + 1) - 1) / 2)\n        s1 = p1 * (p1 + 1) // 2\n        p = [p1 - 1, p1, p1 + 1]\n        s = [s1 - p1, s1, s1 + p[2]]\n        l = [sm - s[0], sm - s1, sm - s[2]]\n        for j in range(len(l)):\n            if l[j] == 0:\n                res += (p[j] * (p[j] - 1) + (m - p[j] - 1) * (m - p[j])) // 2\n            elif l[j] > 0 and l[j] < m:\n                res += min([l[j], m - l[j], p[j], m - p[j]])\n        print(res)", "from math import floor, sqrt\nn = int(input())\nfor i in range(n):\n    m = int(input())\n    if m % 4 == 1 or m % 4 == 2:\n        print(0)\n    else:\n        s = m * (m + 1) // 2\n        res = 0\n        sm = s // 2\n        p1 = floor((sqrt(4 * s + 1) - 1) / 2)\n        s1 = p1 * (p1 + 1) // 2\n        p = [p1 - 1, p1, p1 + 1]\n        s = [s1 - p1, s1, s1 + p[2]]\n        l = [sm - s[0], sm - s1, sm - s[2]]\n        for j in range(len(l)):\n            if l[j] == 0:\n                res += (p[j] * (p[j] - 1) + (m - p[j] - 1) * (m - p[j])) // 2\n            elif l[j] > 0 and l[j] < m:\n                res += min([l[j], m - l[j], p[j], m - p[j]])\n        print(res)", "import math\nt = int(input())\nimport operator as op\nfrom functools import reduce\n\ndef ncr(n, r):\n    r = min(r, n - r)\n    numer = reduce(op.mul, range(n, n - r, -1), 1)\n    denom = reduce(op.mul, range(1, r + 1), 1)\n    return numer // denom\nfor test in range(t):\n    n = int(input())\n    sum_array = n * (n + 1) // 2\n    if sum_array % 2 != 0:\n        print(0)\n        continue\n    n_swap = 0\n    d = 1 + 4 * sum_array\n    partition_ind = (math.sqrt(d) - 1) / 2\n    n_swap = n - math.floor(partition_ind)\n    f = math.factorial\n    if partition_ind.is_integer():\n        partition_ind = int(partition_ind)\n        if partition_ind >= 2:\n            n_swap += ncr(partition_ind, 2)\n        if n - partition_ind >= 2:\n            n_swap += ncr(n - partition_ind, 2)\n    print(n_swap)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "from math import sqrt\nfor x in range(int(input())):\n    N = int(input())\n    sum = N * (N + 1) // 2\n    if sum % 2 != 0:\n        print(0)\n    else:\n        m = int(sqrt(1 + 4 * sum) - 1) // 2\n        if m * (m + 1) // 2 == sum // 2:\n            print((m - 1) * m // 2 + N - m + (N - m - 1) * (N - m) // 2)\n        else:\n            print(N - m)", "T = int(input())\nwhile T > 0:\n    T -= 1\n    N = int(input())\n    Sum = N * (N + 1) // 2\n    if Sum % 2 != 0:\n        print('0')\n    else:\n        x = -1 + (1 + 4 * Sum) ** 0.5\n        x = x // 2\n        m = int(x)\n        t = N - m\n        left = m * (m + 1) // 2\n        right = N * (N + 1) // 2 - left\n        if left == right:\n            r = N - m\n            r = r - 1\n            m = m - 1\n            t += m * (m + 1) // 2\n            t += r * (r + 1) // 2\n        print(t)", "import math\n\ndef comb(n):\n    return n * (n - 1) // 2\nt = int(input())\nwhile t > 0:\n    ans = 0\n    n = int(input())\n    total = n * (n + 1) >> 1\n    if total & 1 == 0:\n        pivot = math.floor((-1 + math.sqrt(1 + 4 * total)) / 2)\n        ans += n - pivot\n        if pivot * (pivot + 1) >> 1 == total >> 1:\n            ans += comb(pivot) + comb(n - pivot)\n    print(ans)\n    t -= 1", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    summ = n * (n + 1) // 2\n    if summ % 2:\n        print(0)\n    else:\n        x = (1 + 4 * summ) ** 0.5\n        x -= 1\n        x = x // 2\n        x = int(x)\n        total = n - x\n        left = x * (x + 1) // 2\n        right = n * (n + 1) // 2 - left\n        if left == right:\n            r = n - x\n            total += x * (x - 1) // 2\n            total += r * (r - 1) // 2\n        print(total)", "from math import sqrt\n\ndef sum_n(n1):\n    return n1 * (n1 + 1) // 2\n\ndef xc2(n2):\n    return n2 * (n2 - 1) // 2\n\ndef sol(n3):\n    return (-2 + sqrt(4 + 8 * (n3 * n3 + n3))) // 4\nfor _ in range(int(input())):\n    n = int(input())\n    ans = 0\n    if n < 3:\n        print(0)\n        continue\n    if sum_n(n) % 2 != 0:\n        print(0)\n        continue\n    x = sol(n)\n    ans += n - x\n    if 2 * (x * x + x) == n * n + n:\n        ans += xc2(x) + xc2(n - x)\n    print('%d' % ans)", "import math\n\ndef get_input():\n    return input().split(' ')\n\ndef get_int_input():\n    return list(map(int, get_input()))\n\ndef comb(x):\n    return int(x * (x - 1) // 2)\n\ndef chfnswap(N):\n    S = N * (N + 1) // 2\n    if S % 2:\n        return 0\n    N_for_half = int((math.sqrt(4 * S + 1) - 1) / 2)\n    ans = 0\n    if N_for_half * (N_for_half + 1) == S:\n        ans += comb(N_for_half) + comb(N - N_for_half)\n        N_for_half -= 1\n    diff = int(S // 2 - N_for_half * (N_for_half + 1) // 2)\n    ans += min(N - diff, N - N_for_half)\n    return ans\n\ndef main():\n    t = get_int_input()[0]\n    for _ in range(t):\n        N = get_int_input()[0]\n        print(chfnswap(N))\nmain()", "import math\n\ndef get_input():\n    return input().split(' ')\n\ndef get_int_input():\n    return list(map(int, get_input()))\n\ndef comb(x):\n    x = int(x)\n    return int(x * (x - 1) // 2)\n\ndef chfnswap(N):\n    S = N * (N + 1) // 2\n    if S % 2:\n        return 0\n    N_for_half = int((math.sqrt(4 * S + 1) - 1) / 2)\n    ans = 0\n    if N_for_half * (N_for_half + 1) == S:\n        ans += comb(N_for_half) + comb(N - N_for_half)\n        N_for_half -= 1\n    N_for_half = int(N_for_half)\n    diff = int(S // 2 - N_for_half * (N_for_half + 1) // 2)\n    ans += min(N - diff, N - N_for_half)\n    return ans\n\ndef main():\n    t = get_int_input()[0]\n    for _ in range(t):\n        N = get_int_input()[0]\n        print(chfnswap(N))\nmain()", "def nc2(n):\n    return n * (n - 1) // 2\nfrom math import sqrt\nt = int(input())\nf = []\nfor i in range(t):\n    n = int(input())\n    sumi = n * (n + 1) // 2\n    if sumi % 2 != 0:\n        f.append(0)\n    else:\n        d = sqrt(1 + 4 * sumi)\n        x = (-1 + d) // 2\n        ans = n - x\n        a = x * (x + 1) // 2\n        if a == sumi - a:\n            ans += nc2(x) + nc2(n - x)\n        f.append(int(ans))\nprint(*f, sep='\\n')", "import math\n\ndef pos(sm):\n    a = math.sqrt(1 + 4 * sm)\n    a = a - 1\n    a = a // 2\n    fs = a\n    return fs\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n == 0 or n == 1 or n == 2:\n        print(0)\n        continue\n    tl = n * (n + 1) // 2\n    if tl % 2 != 0:\n        print(0)\n        continue\n    ind = pos(tl)\n    ss = ind * (ind + 1) // 2\n    if tl // 2 == ss:\n        ans = ind * (ind - 1) // 2 + (n - ind) * (n - ind - 1) // 2 + (n - ind)\n        print(int(ans))\n    else:\n        print(int(n - ind))", "import math\n\ndef find(x):\n    return int((-2 + math.sqrt(4 + 8 * (n * n + n))) // 4)\n\ndef combination(x):\n    return int(x * (x - 1) // 2)\ntry:\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        if n * (n + 1) // 2 & 1:\n            print(0, '\\n')\n            continue\n        pivot = find(n)\n        ans = n - pivot\n        if 2 * (pivot * pivot + pivot) == n * n + n:\n            ans += combination(pivot) + combination(n - pivot)\n        print(ans, '\\n')\nexcept EOFError as t:\n    pass", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sum_ = n * (n + 1) // 2\n    if sum_ % 2 != 0:\n        print(0)\n    else:\n        m = (-1 + int(sqrt(1 + 4 * sum_))) // 2\n        if m * (m + 1) // 2 == sum_ // 2:\n            print(m ** 2 - m * n - m + sum_)\n        else:\n            print(n - m)", "from math import *\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sum_ = n * (n + 1) // 2\n    if sum_ % 2 != 0:\n        print(0)\n    else:\n        m = (-1 + int(sqrt(1 + 4 * sum_))) // 2\n        if m * (m + 1) // 2 == sum_ // 2:\n            print(m * (m - 1) // 2 + (n - m) + (n - m) * (n - m - 1) // 2)\n        else:\n            print(n - m)", "def swap(test):\n    count = 0\n    n = int(input())\n    sum1 = n * (n + 1) // 2\n    if sum1 % 2 != 0:\n        return 0\n    else:\n        mid = int((-1 + (1 + 4 * sum1) ** 0.5) // 2)\n        sum_start = mid * (mid + 1) // 2\n        sum_end = sum1 - sum_start\n        count = n - mid\n        if sum_start == sum_end:\n            count += mid * (mid - 1) // 2 + (n - mid) * (n - mid - 1) // 2\n    return count\nt = int(input())\nl = []\nfor i in range(t):\n    res = swap(i)\n    l.append(res)\nfor i in l:\n    print(i)", "from math import sqrt\n\ndef work(n):\n    x = (-2 + sqrt(4 + 8 * (n * n + n))) // 4\n    return int(x)\n\ndef c(y):\n    p = y * (y - 1) // 2\n    return p\nt = int(input())\nwhile t != 0:\n    n = int(input())\n    k = n * (n + 1) // 2\n    swaps = 0\n    if k % 2 != 0:\n        print(0)\n        t -= 1\n        continue\n    w = work(n)\n    if 2 * (w * w + w) == n * n + n:\n        swaps = n - w + c(w) + c(n - w)\n    else:\n        swaps = n - w\n    print(swaps)\n    t -= 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    su = n * (n + 1) // 2\n    if su % 2 != 0:\n        print(0)\n    else:\n        a = (-1 + int(math.sqrt(1 + 4 * su))) // 2\n        if a * (a + 1) == su:\n            print((a - 1) * a // 2 + (n - a) * (n - a + 1) // 2)\n        else:\n            print(n - a)", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2 != 0:\n        print(0)\n        continue\n    x = int(sqrt(1 + 4 * sum) - 1) // 2\n    nice_swaps = n - x\n    if x * (x + 1) // 2 == sum // 2:\n        nice_swaps += (x - 1) * x // 2 + (n - x - 1) * (n - x) // 2\n    print(nice_swaps)", "t = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    if n % 4 != 0 and (n + 1) % 4 != 0:\n        print(0)\n    else:\n        sum = n * (n + 1) / 2\n        mid = (-1 + (1 + 4 * sum) ** 0.5) / 2\n        if mid - int(mid) == 0:\n            mid = int(mid)\n            cnt = mid * (mid - 1) / 2 + (n - mid) * (n - mid - 1) / 2 + n - mid\n            print(int(cnt))\n        else:\n            print(n - int(mid))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print(0)\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\n\ndef find_pivot(n):\n    s = n * (n + 1)\n    x = math.sqrt(1 + 2 * s)\n    return int((x - 1) // 2)\n\ndef C2(n):\n    if n % 2 == 0:\n        return n // 2 * (n - 1)\n    return n * ((n - 1) // 2)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    if n % 4 == 1 or n % 4 == 2:\n        print(0)\n        continue\n    pivot = find_pivot(n)\n    ans = 0\n    ans += n - pivot\n    if 2 * pivot * (pivot + 1) == n * (n + 1):\n        ans += C2(pivot) + C2(n - pivot)\n    print(ans)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    k = n * (n + 1) // 2\n    sum = 0\n    m = 0\n    if k & 1:\n        print(0)\n    else:\n        x = (-1 + int(math.sqrt(1 + 4 * k))) // 2\n        ans = n - x\n        if 2 * x * (x + 1) == n * (n + 1):\n            ans += x * (x - 1) // 2 + (n - x) * (n - x - 1) // 2\n        print(ans)", "import math\n\ndef comb(n):\n    return n * (n - 1) // 2\nfor _ in range(int(input())):\n    ans = 0\n    n = int(input())\n    if n * (n + 1) // 2 % 2 != 0:\n        print(0)\n        continue\n    else:\n        x = int((-2 + math.sqrt(4 + 8 * n * (n + 1))) // 4)\n        ans += n - x\n        if 2 * x * (x + 1) == n * (n + 1):\n            ans += comb(x) + comb(n - x)\n        print(int(ans))", "for tt in range(int(input())):\n    n = int(input())\n    summ = n * (n + 1) // 2\n    if summ % 2 != 0:\n        print(0)\n    else:\n        pos = (int(pow(1 + 4 * summ, 0.5)) - 1) // 2\n        cnt = n - pos\n        k = summ - pos * (pos + 1) // 2\n        if k > summ // 2:\n            print(cnt)\n        elif k == summ // 2:\n            print(pos * (pos - 1) // 2 + cnt * (cnt - 1) // 2 + cnt)\n        else:\n            print(cnt)", "from math import sqrt\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2 != 0:\n        print(0)\n        t -= 1\n        continue\n    m = int(sqrt(1 + 4 * sum) - 1) // 2\n    if m * (m + 1) // 2 == sum // 2:\n        print((m - 1) * m // 2 + n - m + (n - m - 1) * (n - m) // 2)\n    else:\n        print(n - m)\n    t -= 1", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\nt = int(input(''))\nwhile t > 0:\n    n = int(input(''))\n    count = 0\n    if n % 4 == 0 or n % 4 == 3:\n        X = (math.sqrt(4 + 8 * n * (n + 1)) - 2.0) / 4.0\n        x = int(X)\n        count = n - x\n        if 2 * x * (x + 1) == n * (n + 1):\n            count = count + x * (x - 1) / 2 + (n - x) * (n - x - 1) / 2\n    print(int(count))\n    t = t - 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = n * (n + 1) / 2\n    if n * (n + 1) % 4 != 0:\n        print(0)\n    else:\n        x = int((-1 + math.sqrt(1 + 4 * s)) / 2)\n        if x * (x + 1) / 2 == s / 2:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\ntry:\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        ans = 0\n        sum = n * (n + 1) // 2\n        if sum % 2 != 0:\n            ans = 0\n        else:\n            d = math.sqrt(1 + 4 * sum)\n            root = (d - 1) / 2\n            x = int(root)\n            ans = n - x\n            if 2 * (x * x + x) == n * n + n:\n                ans = ans + x * (x - 1) // 2 + (n - x) * (n - x - 1) // 2\n        print(ans)\nexcept EOFError as e:\n    pass", "import math\ntry:\n    t = int(input())\n    while t > 0:\n        n = int(input())\n        ans = 0\n        sum = n * (n + 1) // 2\n        if sum % 2 != 0:\n            ans = 0\n        else:\n            d = math.sqrt(1 + 4 * sum)\n            root = (d - 1) / 2\n            x = int(root)\n            ans = n - x\n            if 2 * (x * x + x) == n * n + n:\n                ans = ans + x * (x - 1) // 2 + (n - x) * (n - x - 1) // 2\n        print(ans)\nexcept EOFError as e:\n    pass", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "from sys import stdin\ninput = stdin.readline\nimport math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2 != 0:\n        print('0')\n    else:\n        mid = -1 + (1 + 4 * sum) ** 0.5\n        mid = int(mid // 2)\n        ls = mid * (mid + 1) // 2\n        r = n - mid\n        rs = sum - ls\n        if rs == ls:\n            a1 = r * (r - 1) // 2\n            a2 = mid * (mid - 1) // 2\n            print(int(a1 + a2 + r))\n        else:\n            print(r)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 4 != 0 and (n + 1) % 4 != 0:\n        print(0)\n    else:\n        d = n * (n + 1) // 2\n        s = round(math.sqrt(d))\n        c = n - s\n        if s * (s + 1) // 2 == d // 2:\n            print(c + s * (s - 1) // 2 + c * (c - 1) // 2)\n        else:\n            print(c + 1)", "import sys\nimport math\nt = int(sys.stdin.readline().strip())\nfor test in range(t):\n    n = int(sys.stdin.readline().strip())\n    number_of_swaps = 0\n    if n == 3:\n        number_of_swaps = 2\n    elif n % 4 == 3 or n % 4 == 0:\n        total_sum = n * (n + 1) // 2\n        m = int(math.sqrt(total_sum))\n        smaller_sum = m * (m + 1) // 2\n        while smaller_sum > total_sum / 2:\n            m = m - 1\n            smaller_sum = m * (m + 1) // 2\n        if smaller_sum == total_sum / 2:\n            number_of_swaps += m * (m - 1) // 2 + (n - m) * (n - m - 1) // 2 + n - m\n        else:\n            number_of_swaps += n - m\n    print(number_of_swaps)", "from sys import stdin\ninput = stdin.readline\nimport math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 != 0:\n        print('0')\n    else:\n        tp = (math.sqrt(1 + 4 * s) - 1) // 2\n        temp = math.floor(tp)\n        ls = temp * (temp + 1) // 2\n        r = n - temp\n        rs = s - ls\n        if rs == s // 2:\n            a1 = r * (r - 1) // 2\n            a2 = temp * (temp - 1) // 2\n            print(int(a1 + a2 + r))\n        else:\n            print(r)\n    t = t - 1", "import math\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 != 0:\n        print('0')\n    else:\n        tp = (math.sqrt(1 + 4 * s) - 1) // 2\n        temp = math.floor(tp)\n        ls = temp * (temp + 1) // 2\n        r = n - temp\n        rs = s - ls\n        if rs == s // 2:\n            a1 = r * (r - 1) // 2\n            a2 = temp * (temp - 1) // 2\n            print(int(a1 + a2 + r))\n        else:\n            print(r)\n    t = t - 1", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    sum1 = n * (n + 1) // 2\n    if sum1 % 2 != 0:\n        print(0)\n    else:\n        break_point = (-1 + int(math.sqrt(1 + 4 * sum1))) // 2\n        if break_point * (break_point + 1) // 2 == sum1 // 2:\n            part_1 = break_point * (break_point - 1) // 2\n            part_2 = (n - break_point) * (n - break_point - 1) // 2\n            print(part_1 + part_2 + n - break_point)\n        else:\n            print(n - break_point)", "from sys import stdin\nfrom math import sqrt\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    s = n * (n + 1) // 2\n    if s % 2 != 0:\n        print(0)\n    else:\n        x = int((-1 + sqrt(1 + 4 * s)) // 2)\n        ans = n - x\n        x1 = x * (x + 1) // 2\n        y = n - x\n        if s // 2 == x1:\n            ans += x * (x - 1) // 2 + y * (y - 1) // 2\n            print(ans)\n        else:\n            print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 != 0:\n        print(0)\n    else:\n        x = int((-1 + math.sqrt(1 + 4 * s)) // 2)\n        d = x * (x + 1) // 2\n        if d == s // 2:\n            print(n - x + x * (x - 1) // 2 + (n - x) * (n - x - 1) // 2)\n        else:\n            print(n - x)", "for _ in range(int(input())):\n    n = int(input())\n    sm = n * (n + 1) // 2\n    if sm % 2 != 0:\n        print('0')\n    else:\n        ans = (-1 + (1 + 4 * sm) ** 0.5) // 2\n        mid = int(ans)\n        total = n - mid\n        left = mid * (mid + 1) // 2\n        right = sm - left\n        if left == right:\n            r = n - mid\n            total += r * (r - 1) // 2 + mid * (mid - 1) // 2\n        print(total)", "import math\n\ndef sumofn(x):\n    return int(x * (x - 1) / 2)\na = int(input())\nfor o in range(a):\n    n = int(input())\n    p = 0\n    if n % 4 == 3 or n % 4 == 0:\n        a = n * (n + 1) / 2 / 2\n        c = math.floor(((1 + 8 * a) ** (1 / 2) - 1) / 2)\n        if c * (c + 1) / 2 == a:\n            p += sumofn(c) + sumofn(n - c) + n - c\n        else:\n            p = n - c\n    print(p)", "import math\n\ndef sumofn(x):\n    return int(x * (x - 1) / 2)\na = int(input())\nfor o in range(a):\n    n = int(input())\n    p = 0\n    if n % 4 == 3 or n % 4 == 0:\n        a = n * (n + 1) / 2 / 2\n        c = math.floor(((1 + 8 * a) ** (1 / 2) - 1) / 2)\n        if c * (c + 1) / 2 == a:\n            p += sumofn(c) + sumofn(n - c) + n - c\n        else:\n            p = n - c\n    print(p)", "import math\n\ndef sumofn(x):\n    return int(x * (x - 1) / 2)\na = int(input())\nfor o in range(a):\n    n = int(input())\n    p = 0\n    if n % 4 == 3 or n % 4 == 0:\n        a = n * (n + 1) / 2 / 2\n        c = math.floor(((1 + 8 * a) ** (1 / 2) - 1) / 2)\n        if c * (c + 1) / 2 == a:\n            p += sumofn(c) + sumofn(n - c) + n - c\n        else:\n            p = n - c\n    print(p)", "import math\n\ndef sumofn(x):\n    return int(x * (x - 1) / 2)\na = int(input())\nfor o in range(a):\n    n = int(input())\n    p = 0\n    if n % 4 == 3 or n % 4 == 0:\n        a = n * (n + 1) / 2 / 2\n        c = math.floor(((1 + 8 * a) ** (1 / 2) - 1) / 2)\n        if c * (c + 1) / 2 == a:\n            p += sumofn(c) + sumofn(n - c) + n - c\n        else:\n            p = n - c\n    print(p)", "def findPivot(n):\n    low = 1\n    high = n\n    lastPossible = -1\n    while low <= high:\n        mid = (low + high) // 2\n        if mid * (mid + 1) <= n * (n + 1) // 2:\n            lastPossible = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return lastPossible\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    sumN = n * (n + 1) // 2\n    if sumN % 2 == 1:\n        print(0)\n    else:\n        ele = findPivot(n)\n        if ele == -1:\n            print(0)\n        else:\n            ans = n - ele\n            if ele * (ele + 1) == n * (n + 1) // 2:\n                ans += (ele * (ele - 1) + (n - ele) * (n - ele - 1)) // 2\n            print(ans)", "from sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    s = n * (n + 1) // 2\n    t = 0\n    if s % 2 != 0:\n        print(0)\n    else:\n        m = int((-1 + (1 + 4 * s) ** 0.5) // 2)\n        t = n - m\n        ls = int(m * (m + 1) // 2)\n        rs = s - ls\n        if ls == rs:\n            t += m * (m - 1) // 2 + (n - m) * (n - m - 1) // 2\n        print(t)", "import math\n\ndef formula(n):\n    return (-2.0 + math.sqrt(4.0 + 8 * (n * n + n))) // 4\n\ndef nc2(x):\n    return (x * x - x) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    if (n * n + n) // 2 % 2 != 0:\n        print(0)\n    else:\n        ans = 0\n        x = formula(n)\n        ans += n - x\n        if 2 * (x * x + x) == n * n + n:\n            ans += nc2(x) + nc2(n - x)\n        print(int(ans))", "from math import sqrt, floor\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = floor((-1 + sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "from math import sqrt, floor\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = floor((-1 + sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    sum1 = n * (n + 1) // 2\n    T = False\n    if sum1 % 2 != 0:\n        print('0')\n    elif n == 3:\n        print('2')\n    else:\n        m = (-1 + int(math.sqrt(1 + 4 * sum1))) // 2\n        sum2 = m * (m + 1) // 2\n        if sum2 == sum1 // 2:\n            val = m\n            print(val * (val - 1) // 2 + (n - val - 1) * (n - val) // 2 + n - m)\n        else:\n            print(n - m)", "import math\nfor _ in range(0, int(input())):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2 != 0:\n        print(0)\n    else:\n        k = (-1 + math.sqrt(1 + 4 * sum)) // 2\n        m = int(k)\n        res = n - m\n        l = m * (m + 1) // 2\n        r = sum - l\n        if l == r:\n            rs = n - m\n            rs = rs - 1\n            m = m - 1\n            res = res + m * (m + 1) // 2\n            res = res + rs * (rs + 1) // 2\n        print(res)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    if n % 4 == 1 or n % 4 == 2:\n        print(0)\n    else:\n        constant = (n * n + n) // 2\n        a = 1\n        b = 1\n        c = -constant\n        d = math.sqrt(b * b - 4 * a * c)\n        one = (-b + d) / 2 * a\n        second = (-b - d) / 2 * a\n        if one < 0:\n            root = second\n        elif second < 0:\n            root = one\n        root = int(root)\n        ans = n - root\n        if root * (root + 1) == n * (n + 1) // 2:\n            ans += root * (root - 1) // 2 + (n - root) * (n - root - 1) // 2\n        print(ans)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2:\n        print(0)\n        continue\n    x = math.floor((math.sqrt(4 * sum + 1) - 1) / 2)\n    ans = n - x\n    if x * (x + 1) // 2 == sum // 2:\n        ans += x * (x - 1) // 2 + (n - x) * (n - x - 1) // 2\n    print(ans)", "import math\n\ndef pv(p):\n    return int((-2 + math.sqrt(4 + 8 * (p * p + p))) // 4)\n\ndef nC2(m):\n    return (m * m - m) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    if (n * n + n) // 2 & 1:\n        print(0)\n        continue\n    x = pv(n)\n    ans = n - x\n    if 2 * (x * x + x) == n * n + n:\n        ans += nC2(x) + nC2(n - x)\n    print(ans)", "import math\n\ndef pv(p):\n    return int((-2 + (4 + 8 * (p * p + p)) ** 0.5) // 4)\n\ndef nC2(m):\n    return (m * m - m) // 2\nfor _ in range(int(input())):\n    n = int(input())\n    if (n * n + n) // 2 & 1:\n        print(0)\n        continue\n    x = pv(n)\n    ans = n - x\n    if 2 * (x * x + x) == n * n + n:\n        ans += nC2(x) + nC2(n - x)\n    print(ans)", "from math import sqrt\nt = int(input())\nwhile t > 0:\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 != 0:\n        print(0)\n        t -= 1\n        continue\n    m = int(sqrt(1 + 4 * s) - 1) // 2\n    if m * (m + 1) // 2 == s // 2:\n        print((m - 1) * m // 2 + n - m + (n - m - 1) * (n - m) // 2)\n    else:\n        print(n - m)\n    t -= 1", "from math import sqrt\nfor _ in range(int(input())):\n    n = int(input())\n    sum1 = n * (n + 1) // 2\n    if sum1 % 2 != 0:\n        print(0)\n    else:\n        q = int(sqrt(1 + 4 * sum1) - 1) // 2\n        if sum1 // 2 == q * (q + 1) // 2:\n            print((q - 1) * q // 2 + n - q + (n - q - 1) * (n - q) // 2)\n        else:\n            print(n - q)", "import math\nt = int(input())\n\ndef work(n):\n    x1 = (-1.0 + math.sqrt(1 + 2 * (n * (n + 1)))) // 2\n    return x1\nfor i in range(t):\n    n = int(input())\n    sum1 = n * (n + 1) // 2\n    if sum1 % 2 != 0:\n        print(0)\n    else:\n        ans = 0\n        x = work(n)\n        x = int(x)\n        ans += n - x\n        if 2 * (x * (x + 1)) == 2 * sum1:\n            ans += x * (x - 1) // 2 + (n - x) * (n - x - 1) // 2\n        print(ans)", "import math\nfrom functools import lru_cache\n\ndef brute_force(n):\n    numbers = list(range(1, n + 1))\n    count = 0\n    found = False\n    for i in range(n):\n        for j in range(i + 1, n):\n            (numbers[i], numbers[j]) = (numbers[j], numbers[i])\n            found = False\n            for m in range(1, n):\n                if sum(numbers[:m]) == sum(numbers[m:]):\n                    found = True\n                    break\n            if found:\n                count += 1\n            (numbers[i], numbers[j]) = (numbers[j], numbers[i])\n    return count\n\n@lru_cache(maxsize=None)\ndef solution(n):\n    if n * (n + 1) // 2 % 2 == 1:\n        return 0\n    ans = 0\n    y = (n * n + n) // 4\n    k = int(math.sqrt(n * n / 2 - 1.5 * n + 0.25) + 0.5)\n    d = None\n    while True:\n        d = y - (k * k + k) // 2\n        if d <= 0:\n            break\n        if d < n:\n            min_start = max(1, k - d + 1)\n            max_start = min(k + d, n) - d\n            ans += max_start - min_start + 1\n        k += 1\n    if d == 0:\n        ans += k * (k - 1) // 2 + (n - k) * (n - k - 1) // 2\n    return ans\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    print(solution(n))", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "for test in range(int(input())):\n    num = int(input())\n    summ = num * (num + 1) // 2\n    if summ % 2 == 0:\n        x = (1 + 4 * summ) ** 0.5\n        x -= 1\n        x = int(x // 2)\n        answer = num - x\n        l = x * (x + 1) // 2\n        r = summ - l\n        if l == r:\n            remaining = num - x - 1\n            x -= 1\n            answer += x * (x + 1) // 2\n            answer += remaining * (remaining + 1) // 2\n        print(answer)\n    else:\n        print(0)", "import math\nt = int(input())\nout = []\nfor _ in range(t):\n    n = int(input())\n    Total = n * (n + 1) // 2\n    if Total % 2 == 1:\n        out.append(0)\n    else:\n        x = math.ceil(math.sqrt(Total))\n        while x * (x + 1) > Total:\n            x = x - 1\n        count = n - x\n        s = x * (x + 1)\n        if s == Total:\n            right = count * (count - 1) // 2\n            left = (n - count) * (n - count - 1) // 2\n            count = count + left + right\n        out.append(int(count))\nprint(*out, sep='\\n')", "import math\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    d = n * (n + 1) / 4\n    if n * (n + 1) % 4 != 0:\n        print('0')\n    else:\n        x = math.floor((-1 + math.sqrt(1 + 8 * d)) // 2)\n        if x * (x + 1) / 2 == 3:\n            print('2')\n        elif x * (x + 1) / 2 == d:\n            print(n - x + sum(range(x)) + sum(range(n - x)))\n        else:\n            print(n - x)", "import math\nfrom decimal import Decimal\n\ndef swapvalues(temp, n, m):\n    if m < temp:\n        if temp + 1 <= n:\n            return n - temp\n        else:\n            return 0\n    else:\n        l1 = temp\n        l2 = n - m\n        if temp < n - m:\n            return l1\n        else:\n            return l2\n\ndef binomialCoeff(n):\n    res = n * (n - 1) / Decimal(2)\n    return res\n\ndef root(c):\n    x1 = (-1 + math.sqrt(1 - 4 * c)) / 2\n    return math.ceil(x1)\nfor _ in range(int(input())):\n    n = Decimal(input())\n    sumofn = n * (n + 1) / Decimal(2)\n    if sumofn % 2 != 0:\n        print(0)\n        continue\n    c = (3 * n - pow(n, 2) - 4) / 2\n    m = root(c)\n    sumofm = m * (m + 1)\n    temp = (sumofn - sumofm) / 2\n    ans = 0\n    while True:\n        if temp == 0:\n            ans += binomialCoeff(m) + binomialCoeff(n - m)\n        elif temp < 1:\n            break\n        elif n - 1 >= temp:\n            if temp % 1 == 0:\n                ans += swapvalues(temp, n, m)\n        m += 1\n        temp -= m\n    print(int(ans))", "for _ in range(int(input())):\n    n = int(input())\n    sum_t = n * (n + 1) // 2\n    count = 0\n    if sum_t % 2 != 0:\n        print(0)\n    else:\n        ans = (1 + 4 * sum_t) ** 0.5\n        ans -= 1\n        mid = int(ans // 2)\n        left = mid * (mid + 1) // 2\n        right = n * (n + 1) // 2 - left\n        total = n - mid\n        if left == right:\n            right = n - mid\n            right -= 1\n            mid -= 1\n            total += mid * (mid + 1) // 2\n            total += right * (right + 1) // 2\n        print(int(total))", "from math import sqrt, floor\nfor _ in range(int(input())):\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2 != 0:\n        print('0')\n    else:\n        ans = 0\n        x = (-1 + sqrt(1 + 4 * s)) / 2\n        y = floor(x)\n        if x == y:\n            ans += y * (y - 1) // 2 + (n - y) * (n - y - 1) // 2\n        ans += n - y\n        print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2 == 1:\n        print(0)\n        continue\n    x = (-1 + int((1 + 4 * sum) ** (1 / 2))) // 2\n    if x * (x + 1) // 2 != sum // 2:\n        print(n - x)\n    else:\n        print(x * (x - 1) // 2 + (n - x) * (n - x - 1) // 2 + (n - x))", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    count = 0\n    s = sum / 2\n    value = (-1 + math.sqrt(1 + 4.0 * (2 * s))) / 2\n    if sum % 2 != 0:\n        print(0)\n    else:\n        if value == math.floor(value):\n            c = value - 1\n            p = n - (value + 1)\n            a = c * (c + 1) / 2\n            b = p * (p + 1) / 2\n            count = n - value + a + b\n        else:\n            r = math.floor(value)\n            count = n - r\n        print(int(count))", "import math\n\ndef sumofn(x):\n    return int(x * (x - 1) / 2)\nfor o in range(int(input())):\n    n = int(input())\n    p = 0\n    if n % 4 == 3 or n % 4 == 0:\n        a = n * (n + 1) / 2 / 2\n        c = math.floor(((1 + 8 * a) ** (1 / 2) - 1) / 2)\n        if c * (c + 1) / 2 == a:\n            p += sumofn(c) + sumofn(n - c) + n - c\n        else:\n            p = n - c\n    print(p)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    count = 0\n    s = sum / 2\n    value = (-1 + math.sqrt(1 + 4.0 * (2 * s))) / 2\n    if sum % 2 == 1:\n        print(0)\n    else:\n        if value == math.floor(value):\n            c = value - 1\n            p = n - (value + 1)\n            a = c * (c + 1) / 2\n            b = p * (p + 1) / 2\n            count = n - value + a + b\n        else:\n            r = math.floor(value)\n            count = n - r\n        print(int(count))", "import math\n\ndef sumofn(x):\n    return int(x * (x - 1) / 2)\nfor o in range(int(input())):\n    n = int(input())\n    p = 0\n    if n % 4 == 3 or n % 4 == 0:\n        a = n * (n + 1) / 2 / 2\n        c = math.floor(((1 + 8 * a) ** (1 / 2) - 1) / 2)\n        if c * (c + 1) / 2 == a:\n            p += sumofn(c) + sumofn(n - c) + n - c\n        if c * (c + 1) / 2 < a and (c + 1) * (c + 2) / 2 > a:\n            p = n - c\n    print(p)", "from math import sqrt\nfor k in range(int(input())):\n    n = int(input())\n    sum = n * (n + 1) // 2\n    if sum % 2 != 0:\n        print(0)\n        continue\n    m = int(sqrt(1 + 4 * sum) - 1) // 2\n    if m * (m + 1) // 2 == sum // 2:\n        print((m - 1) * m // 2 + n - m + (n - m - 1) * (n - m) // 2)\n    else:\n        print(n - m)", "from math import factorial\n\ndef nC2(n):\n    return n * (n - 1) // 2\nt = int(input())\nwhile t:\n    t -= 1\n    n = int(input())\n    s = n * (n + 1) // 2\n    if s % 2:\n        print(0)\n        continue\n    a = (-1 + (1 + 4 * s) ** 0.5) / 2\n    ans = 0\n    if a - int(a) == 0:\n        ans += nC2(int(a))\n        ans += nC2(n - int(a))\n    a = int(a)\n    ans += n - a\n    print(ans)", "from math import sqrt, floor\nfrom sys import stdin, stdout\nfor _ in range(int(stdin.readline())):\n    n = int(stdin.readline())\n    ans = 0\n    s = n * (n + 1) // 2\n    if s % 2 != 0:\n        print(ans)\n    else:\n        x = int((-1 + sqrt(1 + 4 * s)) / 2)\n        k = n - x\n        ans += k\n        x1 = x * (x + 1) // 2\n        a = x * (x - 1) // 2\n        b = k * (k - 1) // 2\n        if x1 == s // 2:\n            ans += a + b\n        print(ans)"]