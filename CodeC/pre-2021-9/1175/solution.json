["from math import sqrt\n\ndef sol(p, m):\n    if p == s:\n        ans.append(m + N)\n        return\n    __pow = 1\n    for i in range(ls[p][1] + 1):\n        if m > N // __pow:\n            break\n        sol(p + 1, m * __pow)\n        __pow *= ls[p][0]\nfor _ in range(int(input())):\n    n = int(input())\n    (N, sq, ls, ans) = (n, int(sqrt(n)), list(), list())\n    for i in range(2, sq + 1):\n        if n % i == 0:\n            Count = 0\n            while n % i == 0:\n                Count += 2\n                n //= i\n            ls.append([i, Count])\n    if n != 1:\n        ls.append([n, 2])\n    s = len(ls)\n    sol(0, 1)\n    ans.sort()\n    print(len(ans))\n    print(*ans, sep='\\n')", "from math import sqrt\n\ndef sol(p, m):\n    if p == s:\n        ans.append(m + N)\n        return\n    __pow = 1\n    for i in range(ls[p][1] + 1):\n        if m > N // __pow:\n            break\n        sol(p + 1, m * __pow)\n        __pow *= ls[p][0]\nfor _ in range(int(input())):\n    n = int(input())\n    (N, sq, ls, ans) = (n, int(sqrt(n)), list(), list())\n    for i in range(2, sq + 1):\n        if n % i == 0:\n            Count = 0\n            while n % i == 0:\n                Count += 2\n                n //= i\n            ls.append([i, Count])\n    if n != 1:\n        ls.append([n, 2])\n    s = len(ls)\n    sol(0, 1)\n    ans.sort()\n    print(len(ans))\n    print(*ans, sep='\\n')", "from math import sqrt\n\ndef sol(p, m):\n    if p == s:\n        ans.append(m + N)\n        return\n    __pow = 1\n    for i in range(ls[p][1] + 1):\n        if m > N // __pow:\n            break\n        sol(p + 1, m * __pow)\n        __pow *= ls[p][0]\nfor _ in range(int(input())):\n    n = int(input())\n    (N, sq, ls, ans) = (n, int(sqrt(n)), list(), list())\n    for i in range(2, sq + 1):\n        if n % i == 0:\n            Count = 0\n            while n % i == 0:\n                Count += 2\n                n //= i\n            ls.append([i, Count])\n    if n != 1:\n        ls.append([n, 2])\n    s = len(ls)\n    sol(0, 1)\n    ans.sort()\n    print(len(ans))\n    print(*ans, sep='\\n')", "from math import sqrt\n\ndef sol(p, m):\n    if p == s:\n        ans.append(m + N)\n        return\n    __pow = 1\n    for i in range(ls[p][1] + 1):\n        if m > N // __pow:\n            break\n        sol(p + 1, m * __pow)\n        __pow *= ls[p][0]\nfor _ in range(int(input())):\n    n = int(input())\n    (N, sq) = (n, int(sqrt(n)))\n    ls = list()\n    ans = list()\n    for i in range(2, sq + 1):\n        if n % i == 0:\n            Count = 0\n            while n % i == 0:\n                Count += 2\n                n //= i\n            ls.append([i, Count])\n    if n != 1:\n        ls.append([n, 2])\n    s = len(ls)\n    sol(0, 1)\n    ans.sort()\n    print(len(ans))\n    print(*ans, sep='\\n')", "import math\n\ndef solve(pos, mul):\n    if pos == len(ls):\n        ans.append(mul)\n        return\n    po = 1\n    for i in range(ls[pos][1] + 1):\n        if mul * po > z:\n            break\n        solve(pos + 1, mul * po)\n        po *= ls[pos][0]\nfor _ in range(int(input())):\n    n = int(input())\n    z = n\n    ls = []\n    ans = []\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            Count = 0\n            while n % i == 0:\n                Count += 2\n                n //= i\n            ls.append([i, Count])\n    if n != 1:\n        ls.append([n, 2])\n    solve(0, 1)\n    ans.sort()\n    print(len(ans))\n    for i in ans:\n        print(i + z)", "from math import sqrt\n\ndef solve(pos, mul):\n    if pos == sz:\n        ans.append(mul + N)\n        return\n    __pow = 1\n    for i in range(ls[pos][1] + 1):\n        if mul > N // __pow:\n            break\n        solve(pos + 1, mul * __pow)\n        __pow *= ls[pos][0]\nfor _ in range(int(input())):\n    n = int(input())\n    (N, sq) = (n, int(sqrt(n)))\n    ls = list()\n    ans = list()\n    for i in range(2, sq + 1):\n        if n % i == 0:\n            Count = 0\n            while n % i == 0:\n                Count += 2\n                n //= i\n            ls.append([i, Count])\n    if n != 1:\n        ls.append([n, 2])\n    sz = len(ls)\n    solve(0, 1)\n    ans.sort()\n    print(len(ans))\n    print(*ans, sep='\\n')", "primes = []\nfactors = []\n\ndef factorize(M):\n    factors.clear()\n    for i in range(0, len(primes)):\n        if M == 1:\n            break\n        if M % primes[i] == 0:\n            cnt = 0\n            while M % primes[i] == 0:\n                cnt = cnt + 1\n                M = M / primes[i]\n            factors.append(tuple([primes[i], 2 * cnt]))\n    if M != 1:\n        factors.append(tuple([M, 2]))\n    return\nans = []\n\ndef solve(idx, val, threshold):\n    if idx == len(factors):\n        if val >= threshold:\n            ans.append(val)\n        return\n    cnt = factors[idx][1]\n    fact = factors[idx][0]\n    mul = fact\n    solve(idx + 1, val, threshold)\n    for i in range(1, cnt + 1):\n        solve(idx + 1, val * mul, threshold)\n        mul = mul * fact\n\ndef find_sol():\n    M = int(input())\n    factorize(M)\n    solve(0, 1, M)\n    ans.sort()\n    ans.reverse()\n    print(len(ans))\n    for i in range(0, len(ans)):\n        x = M * M / ans[i]\n        x = x + M\n        print(int(x))\n    ans.clear()\nsieve = [True] * 10000005\nfor i in range(2, 10000000 + 1):\n    if sieve[i] == True:\n        primes.append(i)\n        j = i * i\n        while j <= 10000000:\n            sieve[j] = False\n            j = j + i\nt = int(input())\nwhile t > 0:\n    t = t - 1\n    find_sol()"]