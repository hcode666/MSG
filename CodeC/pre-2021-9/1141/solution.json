["test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN1 = int(input())\nones = []\ntwos = []\nfor i in range(N1):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "n = int(input())\ncost = [[], []]\nfor i in range(n):\n    (w, c) = map(int, input().split())\n    cost[w - 1].append(c)\ncost[0].sort()\ncost[1].sort()\nl1 = len(cost[0])\nl2 = len(cost[1])\nm = l1 + 2 * l2\nmp1 = [0 for i in range(m + 1)]\nmp2 = [0 for i in range(m + 1)]\nmp1[0] = l1\nmp2[0] = l2\ndp = [0 for i in range(m + 1)]\nif l1:\n    dp[1] = cost[0][-1]\n    mp1[1] = l1 - 1\nmp2[1] = l2\nfor i in range(2, m + 1):\n    (sum1, sum2) = (dp[i - 1], dp[i - 2])\n    if mp1[i - 1]:\n        x1 = mp1[i - 1] - 1\n        sum1 = dp[i - 1] + cost[0][x1]\n    if mp2[i - 2]:\n        x2 = mp2[i - 2] - 1\n        sum2 = dp[i - 2] + cost[1][x2]\n    if sum1 > sum2:\n        mp1[i] = x1\n        mp2[i] = mp2[i - 1]\n        dp[i] = sum1\n    if sum1 <= sum2:\n        mp2[i] = x2\n        mp1[i] = mp1[i - 2]\n        dp[i] = sum2\nprint(*dp[1:])", "n = int(input())\ncost = [[], []]\nfor i in range(n):\n    (w, c) = map(int, input().split())\n    cost[w - 1].append(c)\ncost[0].sort()\ncost[1].sort()\nl1 = len(cost[0])\nl2 = len(cost[1])\nm = l1 + 2 * l2\nmp1 = [0 for i in range(m + 1)]\nmp2 = [0 for i in range(m + 1)]\nmp1[0] = l1\nmp2[0] = l2\ndp = [0 for i in range(m + 1)]\nif l1:\n    dp[1] = cost[0][-1]\n    mp1[1] = l1 - 1\nmp2[1] = l2\nfor i in range(2, m + 1):\n    (sum1, sum2) = (dp[i - 1], dp[i - 2])\n    if mp1[i - 1]:\n        x1 = mp1[i - 1] - 1\n        sum1 = dp[i - 1] + cost[0][x1]\n    if mp2[i - 2]:\n        x2 = mp2[i - 2] - 1\n        sum2 = dp[i - 2] + cost[1][x2]\n    if sum1 > sum2:\n        mp1[i] = x1\n        mp2[i] = mp2[i - 1]\n        dp[i] = sum1\n    if sum1 <= sum2:\n        mp2[i] = x2\n        mp1[i] = mp1[i - 2]\n        dp[i] = sum2\nprint(*dp[1:])", "def answer():\n    n = len(a) + 2 * len(b)\n    dp = [[0, 0, 0] for i in range(n + 1)]\n    if len(a):\n        dp[1] = [a[-1], 1, 0]\n    for i in range(2, n + 1):\n        x1 = dp[i - 1][0]\n        if dp[i - 1][1] < len(a):\n            x1 += a[-dp[i - 1][1] - 1]\n        x2 = dp[i - 2][0]\n        if dp[i - 2][2] < len(b):\n            x2 += b[-dp[i - 2][2] - 1]\n        if x1 > x2:\n            dp[i][0] = x1\n            dp[i][1] = dp[i - 1][1] + 1\n            dp[i][2] = dp[i - 1][2]\n        else:\n            dp[i][0] = x2\n            dp[i][1] = dp[i - 2][1]\n            dp[i][2] = dp[i - 2][2] + 1\n    for i in range(1, n + 1):\n        print(dp[i][0], end=' ')\nn = int(input())\n(a, b) = ([], [])\nfor i in range(n):\n    (w, c) = map(int, input().split())\n    if w == 1:\n        a.append(c)\n    else:\n        b.append(c)\na.sort()\nb.sort()\nanswer()", "def answer():\n    n = len(a) + 2 * len(b)\n    dp = [[0, 0, 0] for i in range(n + 1)]\n    if len(a):\n        dp[1] = [a[-1], 1, 0]\n    for i in range(2, n + 1):\n        x1 = dp[i - 1][0]\n        if dp[i - 1][1] < len(a):\n            x1 += a[-dp[i - 1][1] - 1]\n        x2 = dp[i - 2][0]\n        if dp[i - 2][2] < len(b):\n            x2 += b[-dp[i - 2][2] - 1]\n        if x1 > x2:\n            dp[i][0] = x1\n            dp[i][1] = dp[i - 1][1] + 1\n            dp[i][2] = dp[i - 1][2]\n        else:\n            dp[i][0] = x2\n            dp[i][1] = dp[i - 2][1]\n            dp[i][2] = dp[i - 2][2] + 1\n    for i in range(1, n + 1):\n        print(dp[i][0], end=' ')\nn = int(input())\n(a, b) = ([], [])\nfor i in range(n):\n    (w, c) = map(int, input().split())\n    if w == 1:\n        a.append(c)\n    else:\n        b.append(c)\na.sort()\nb.sort()\nanswer()", "test = False\nN = int(input())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones.sort(reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    res = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        res.append(res[w - 2] + temp)\nelse:\n    res = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        res.append(max(res[w - 2] + temp, res[w - 1]))\nres.pop(0)\nprint(*res, sep=' ')", "import copy\nimport sys\nMAX_REC = 1000000000\nsys.setrecursionlimit(MAX_REC)\nn = int(input())\nw_vec = [0 for _ in range(n)]\nc_vec = [0 for _ in range(n)]\nn_ones = 0\nn_twos = 0\nfor i in range(n):\n    wc = input().split(' ')\n    w = int(wc[0])\n    c = int(wc[1])\n    w_vec[i] = w\n    c_vec[i] = c\n    if w == 1:\n        n_ones += 1\n    elif w == 2:\n        n_twos += 1\nm_max = sum(w_vec)\nc_ones = [0 for _ in range(n_ones)]\nc_twos = [0 for _ in range(n_twos)]\no_index = 0\nt_index = 0\nfor i in range(n):\n    if w_vec[i] == 1:\n        c_ones[o_index] = c_vec[i]\n        o_index += 1\n    elif w_vec[i] == 2:\n        c_twos[t_index] = c_vec[i]\n        t_index += 1\nc_ones.sort()\nc_twos.sort()\nc_ones_2 = copy.deepcopy(c_ones)\nc_twos_2 = copy.deepcopy(c_twos)\nres = [0 for _ in range(0, m_max + 1)]\nif len(c_ones_2) > 0:\n    res[1] = c_ones_2.pop()\neven_sum = 0\nfor m in range(2, m_max + 1, 2):\n    t1 = sum(c_ones[-2:])\n    t2 = sum(c_twos[-1:])\n    if t1 > t2:\n        even_sum += t1\n        res[m] = even_sum\n        if len(c_ones) > 0:\n            c_ones.pop()\n        if len(c_ones) > 0:\n            c_ones.pop()\n    else:\n        even_sum += t2\n        res[m] = even_sum\n        if len(c_twos) > 0:\n            c_twos.pop()\neven_sum = res[1]\nfor m in range(3, m_max + 1, 2):\n    t1 = sum(c_ones_2[-2:])\n    t2 = sum(c_twos_2[-1:])\n    if t1 > t2:\n        even_sum += t1\n        res[m] = even_sum\n        if len(c_ones_2) > 0:\n            c_ones_2.pop()\n        if len(c_ones_2) > 0:\n            c_ones_2.pop()\n    else:\n        even_sum += t2\n        res[m] = even_sum\n        if len(c_twos_2) > 0:\n            c_twos_2.pop()\nres = [str(r) for r in res]\nres = ' '.join(res[1:])\nprint(res)", "def solve(oneWP, twoWP, C):\n    newOneWP = sorted(oneWP, reverse=True)\n    newTwoWP = sorted(twoWP, reverse=True)\n    dp = {}\n    used = {}\n    for i in range(C):\n        dp[i] = dp.get(i, 0)\n        used[i] = (0, 0)\n    if len(newOneWP) > 0:\n        dp[0] = newOneWP[0]\n        used[0] = (1, 0)\n    cost2 = 0\n    cost1 = 0\n    cost3 = dp[0]\n    if len(newTwoWP) > 0:\n        cost2 = newTwoWP[0]\n    if len(newOneWP) >= 2:\n        cost1 = dp[0] + newOneWP[1]\n    maxCost = max(cost1, cost2, cost3)\n    if maxCost == cost1:\n        dp[1] = cost1\n        used[1] = (2, 0)\n    elif maxCost == cost2:\n        dp[1] = cost2\n        used[1] = (0, 1)\n    else:\n        dp[1] = cost3\n        used[1] = (1, 0)\n    for i in range(2, C):\n        cost1 = 0\n        cost2 = 0\n        if len(newOneWP) > used[i - 1][0]:\n            cost1 = dp[i - 1] + newOneWP[used[i - 1][0]]\n        if len(newTwoWP) > used[i - 2][1]:\n            cost2 = dp[i - 2] + newTwoWP[used[i - 2][1]]\n        cost3 = dp[i - 1]\n        dp[i] = max(cost1, cost2, cost3)\n        if dp[i] == cost1:\n            used[i] = (used[i - 1][0] + 1, used[i - 1][1])\n        elif dp[i] == cost2:\n            used[i] = (used[i - 2][0], used[i - 2][1] + 1)\n        else:\n            used[i] = used[i - 1]\n    for i in dp:\n        print(dp[i], end=' ')\nn = int(input())\nweights = []\ntwoWP = []\noneWP = []\nfor i in range(n):\n    (w, c) = map(int, input().split())\n    weights.append(w)\n    if w == 1:\n        oneWP.append(c)\n    else:\n        twoWP.append(c)\nsolve(oneWP, twoWP, sum(weights))", "N = int(input())\nones = []\ntwos = []\nmax_w = 0\nfor _ in range(N):\n    (w, c) = map(int, input().split())\n    max_w += w\n    if w == 1:\n        ones.append(c)\n    else:\n        twos.append(c)\nif len(ones) >= 1:\n    ones.append(0)\n    ones = sorted(ones, reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    ans = [0, ones[0]]\n    for w in range(2, max_w + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        ans.append(ans[w - 2] + temp)\nelse:\n    ans = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_w + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        ans.append(max(ans[w - 2] + temp, ans[w - 1]))\nprint(' '.join([str(x) for x in ans[1:]]))", "def printArray(A, start, end):\n    for i in range(start, end + 1):\n        print(A[i], end=' ')\n    print()\nn = int(input())\nitemsOfWeight1 = []\nitemsOfWeight2 = []\nm = 0\nfor i in range(n):\n    (w, c) = [int(x) for x in input().split()]\n    if w == 1:\n        itemsOfWeight1.append({'weight': w, 'cost': c})\n    else:\n        itemsOfWeight2.append({'weight': w, 'cost': c})\n    m += w\nitemsOfWeight1.sort(key=lambda item: item['cost'], reverse=True)\nitemsOfWeight2.sort(key=lambda item: item['cost'], reverse=True)\nmaxCost = [0 for x in range(m + 1)]\nitemsUsed = [{'ones': -1, 'twos': -1} for x in range(m + 1)]\nif len(itemsOfWeight1) != 0:\n    maxCost[1] = itemsOfWeight1[0]['cost']\n    itemsUsed[1] = {'ones': 0, 'twos': -1}\nfor c in range(2, m + 1):\n    nextItemOfWeight1 = itemsUsed[c - 1]['ones'] + 1\n    nextItemOfWeight2 = itemsUsed[c - 2]['twos'] + 1\n    itemOfWeight1Remaining = nextItemOfWeight1 < len(itemsOfWeight1)\n    itemOfWeight2Remaining = nextItemOfWeight2 < len(itemsOfWeight2)\n    if itemOfWeight2Remaining:\n        maxCost[c] = maxCost[c - 2] + itemsOfWeight2[nextItemOfWeight2]['cost']\n        itemsUsed[c] = {'ones': itemsUsed[c - 2]['ones'], 'twos': nextItemOfWeight2}\n    if itemOfWeight1Remaining:\n        possibleCost = maxCost[c - 1] + itemsOfWeight1[nextItemOfWeight1]['cost']\n        if possibleCost > maxCost[c]:\n            maxCost[c] = possibleCost\n            itemsUsed[c] = {'ones': nextItemOfWeight1, 'twos': itemsUsed[c - 1]['twos']}\n    else:\n        possibleCost = maxCost[c - 1]\n        if possibleCost > maxCost[c]:\n            maxCost[c] = possibleCost\n            itemsUsed[c] = {'ones': itemsUsed[c - 1]['ones'], 'twos': itemsUsed[c - 1]['twos']}\nprintArray(maxCost, 1, len(maxCost) - 1)", "import sys\nfrom collections import Counter\nimport numpy as np\nimport math\ntest = False\nN = int(input().strip())\nones = []\ntwos = []\nfor i in range(N):\n    (W, C) = map(int, input().strip().split(' '))\n    if test:\n        print('W, C = ', W, C)\n    if W == 1:\n        ones.append(C)\n    else:\n        twos.append(C)\nmax_weight = len(ones) + 2 * len(twos)\nif len(ones) >= 1:\n    ones.append(0)\n    ones = sorted(ones, reverse=True)\n    even_twos = twos.copy()\n    odd_twos = twos.copy()\n    for i in range(1, len(ones)):\n        if i % 2 == 1:\n            even_twos.append(ones[i] + ones[i - 1])\n        else:\n            odd_twos.append(ones[i] + ones[i - 1])\n    even_twos = sorted(even_twos)\n    odd_twos = sorted(odd_twos)\n    answer = [0, ones[0]]\n    for w in range(2, max_weight + 1):\n        if w % 2 == 0:\n            temp = even_twos.pop()\n        else:\n            temp = odd_twos.pop()\n        answer.append(answer[w - 2] + temp)\nelse:\n    answer = [0, 0]\n    twos = sorted(twos)\n    for w in range(2, max_weight + 1):\n        temp = 0\n        if w % 2 == 0:\n            temp = twos.pop()\n        answer.append(max(answer[w - 2] + temp, answer[w - 1]))\nprint(' '.join([str(x) for x in answer[1:]]))", "try:\n    n = int(input())\n    w1 = []\n    w2 = []\n    for i in range(n):\n        (wi, ci) = [int(x) for x in input().split()]\n        if wi == 2:\n            w2.append(ci)\n        else:\n            w1.append(ci)\n    w1.sort()\n    w2.sort()\n    w1o = w1.copy()\n    w2o = w2.copy()\n    m = len(w2) * 2 + len(w1)\n    curr = 0\n    ans = [0 for i in range(m + 1)]\n    for w in range(2, m + 1, 2):\n        cost1 = 0\n        cost2 = 0\n        flag = 0\n        if len(w2) >= 1:\n            cost1 = w2[-1]\n        if len(w1) >= 2:\n            cost2 = w1[-1] + w1[-2]\n            flag = 2\n        elif len(w1) >= 1:\n            cost2 = w1[-1]\n            flag = 1\n        if cost1 > cost2:\n            curr += cost1\n            ans[w] = curr\n            w2.pop()\n        else:\n            curr += cost2\n            ans[w] = curr\n            while flag > 0:\n                w1.pop()\n                flag -= 1\n    curr = 0\n    if len(w1o) >= 1:\n        curr = w1o.pop()\n        ans[1] = curr\n    ans[1] = curr\n    w1 = w1o\n    w2 = w2o\n    for w in range(3, m + 1, 2):\n        cost1 = 0\n        cost2 = 0\n        flag = 0\n        if len(w2) >= 1:\n            cost1 = w2[-1]\n        if len(w1) >= 2:\n            cost2 = w1[-1] + w1[-2]\n            flag = 2\n        elif len(w1) >= 1:\n            cost2 = w1[-1]\n            flag = 1\n        if cost1 > cost2:\n            curr += cost1\n            ans[w] = curr\n            w2.pop()\n        else:\n            curr += cost2\n            ans[w] = curr\n            while flag > 0:\n                w1.pop()\n                flag -= 1\n    print(' '.join([str(c) for c in ans[1:]]))\nexcept:\n    pass", "n = int(input())\nW1 = []\nW2 = []\nm = 0\nfor i in range(n):\n    (c, w) = list(map(int, input().split()))\n    if c == 1:\n        W1.append(w)\n    else:\n        W2.append(w)\n    m += c\nW1.sort()\nW2.sort()\nans = [None for i in range(m + 1)]\ncur = 0\n(w1, w2) = (W1[:], W2[:])\nfor i in range(2, m + 1, 2):\n    (c1, c2) = (0, 0)\n    flag = 1\n    if len(w1) >= 2:\n        c1 = sum(w1[-2:])\n    elif len(w1) >= 1:\n        c1 = w1[-1]\n        flag = 0\n    if len(w2) >= 1:\n        c2 = w2[-1]\n    if c1 > c2:\n        cur += c1\n        w1.pop()\n        if flag:\n            w1.pop()\n    else:\n        cur += c2\n        w2.pop()\n    ans[i] = str(cur)\n(w1, w2) = (W1[:], W2[:])\ncur = 0\nif len(w1) >= 1:\n    cur = w1.pop()\nans[1] = str(cur)\nfor i in range(3, m + 1, 2):\n    (c1, c2) = (0, 0)\n    flag = 1\n    if len(w1) >= 2:\n        c1 = sum(w1[-2:])\n    elif len(w1) >= 1:\n        c1 = w1[-1]\n        flag = 0\n    if len(w2) >= 1:\n        c2 = w2[-1]\n    if c1 < c2:\n        cur += c2\n        w2.pop()\n    else:\n        cur += c1\n        w1.pop()\n        if flag:\n            w1.pop()\n    ans[i] = str(cur)\nprint(' '.join(ans[1:]))", "try:\n    n = int(input())\n    one = []\n    two = []\n    tw = 0\n    for _ in range(n):\n        (w, c) = map(int, input().split())\n        tw += w\n        if w == 1:\n            one.append(c)\n        else:\n            two.append(c)\n    one = sorted(one, reverse=True)\n    two = sorted(two, reverse=True)\n    onet = one.copy()\n    twot = two.copy()\n    dp = [0] * (tw + 1)\n    cur = 0\n    for i in range(2, tw + 1, 2):\n        cost = [0, 0, 0]\n        if two:\n            cost[0] = two[0]\n        if len(one) > 1:\n            cost[1] = one[0] + one[1]\n        elif len(one) == 1:\n            cost[2] = one[0]\n        maxk = cost.index(max(cost))\n        if maxk == 0:\n            two.pop(0)\n        elif maxk == 1:\n            one.pop(0)\n            one.pop(0)\n        else:\n            one.pop(0)\n        cur += cost[maxk]\n        dp[i] = cur\n    cur = 0\n    one = onet\n    two = twot\n    if len(one) >= 1:\n        k = one.pop(0)\n        dp[1] = k\n        cur = k\n    for i in range(3, tw + 1, 2):\n        cost = [0, 0, 0]\n        if two:\n            cost[0] = two[0]\n        if len(one) > 1:\n            cost[1] = one[0] + one[1]\n        elif len(one) == 1:\n            cost[2] = one[0]\n        maxk = cost.index(max(cost))\n        if maxk == 0:\n            two.pop(0)\n        elif maxk == 1:\n            one.pop(0)\n            one.pop(0)\n        else:\n            one.pop(0)\n        cur += cost[maxk]\n        dp[i] = cur\n    print(*dp[1:])\nexcept:\n    pass", "try:\n    n = int(input())\n    w1 = []\n    w2 = []\n    for i in range(n):\n        (wi, ci) = [int(x) for x in input().split()]\n        if wi == 2:\n            w2.append(ci)\n        else:\n            w1.append(ci)\n    w1.sort()\n    w2.sort()\n    w1o = w1.copy()\n    w2o = w2.copy()\n    m = len(w2) * 2 + len(w1)\n    curr = 0\n    ans = [0 for i in range(m + 1)]\n    for w in range(2, m + 1, 2):\n        cost1 = 0\n        cost2 = 0\n        flag = 0\n        if len(w2) >= 1:\n            cost1 = w2[-1]\n        if len(w1) >= 2:\n            cost2 = w1[-1] + w1[-2]\n            flag = 2\n        elif len(w1) >= 1:\n            cost2 = w1[-1]\n            flag = 1\n        if cost1 > cost2:\n            curr += cost1\n            ans[w] = curr\n            w2.pop()\n        else:\n            curr += cost2\n            ans[w] = curr\n            while flag > 0:\n                w1.pop()\n                flag -= 1\n    curr = 0\n    if len(w1o) >= 1:\n        curr = w1o.pop()\n        ans[1] = curr\n    ans[1] = curr\n    w1 = w1o\n    w2 = w2o\n    for w in range(3, m + 1, 2):\n        cost1 = 0\n        cost2 = 0\n        flag = 0\n        if len(w2) >= 1:\n            cost1 = w2[-1]\n        if len(w1) >= 2:\n            cost2 = w1[-1] + w1[-2]\n            flag = 2\n        elif len(w1) >= 1:\n            cost2 = w1[-1]\n            flag = 1\n        if cost1 > cost2:\n            curr += cost1\n            ans[w] = curr\n            w2.pop()\n        else:\n            curr += cost2\n            ans[w] = curr\n            while flag > 0:\n                w1.pop()\n                flag -= 1\n    print(' '.join([str(c) for c in ans[1:]]))\nexcept:\n    pass", "n = int(input())\n(one, two) = ([], [])\nW = 0\nfor _ in range(n):\n    (w, c) = map(int, input().split())\n    if w == 1:\n        one.append(c)\n    else:\n        two.append(c)\n    W += w\ne_one = sorted(one)\ne_two = sorted(two)\nans = [0] * W\ntemp = 0\nfor w in range(2, W + 1, 2):\n    (cost1, cost2) = (0, 0)\n    if len(e_one) >= 2:\n        cost1 = e_one[-1] + e_one[-2]\n    elif len(e_one) >= 1:\n        cost1 = e_one[-1]\n    if len(e_two) >= 1:\n        cost2 = e_two[-1]\n    if cost1 >= cost2:\n        if len(e_one) >= 2:\n            e_one.pop()\n            e_one.pop()\n        elif len(e_one) >= 1:\n            e_one.pop()\n        temp += cost1\n    else:\n        e_two.pop()\n        temp += cost2\n    ans[w - 1] = temp\no_one = sorted(one)\no_two = sorted(two)\ntemp = 0\nif len(o_one) >= 1:\n    ans[0] = o_one.pop()\n    temp = ans[0]\nfor w in range(3, W + 1, 2):\n    (cost1, cost2) = (0, 0)\n    if len(o_one) >= 2:\n        cost1 = o_one[-1] + o_one[-2]\n    elif len(o_one) >= 1:\n        cost1 = o_one[-1]\n    if len(o_two) >= 1:\n        cost2 = o_two[-1]\n    if cost1 >= cost2:\n        if len(o_one) >= 2:\n            o_one.pop()\n            o_one.pop()\n        elif len(o_one) >= 1:\n            o_one.pop()\n        temp += cost1\n    else:\n        o_two.pop()\n        temp += cost2\n    ans[w - 1] = temp\nprint(*ans, sep=' ')", "from sys import stdin\nn = int(stdin.readline())\nlist1 = []\nlist2 = []\nm = 0\nsum1 = 0\npop = ()\nfor i in range(n):\n    (w, c) = list(map(int, stdin.readline().split()))\n    if w == 1:\n        list1.append((w, c))\n        m += w\n    else:\n        list2.append((w, c))\n        m += w\nlist1.sort(reverse=True, key=lambda x: x[1])\nlist2.sort(reverse=True, key=lambda x: x[1])\ne_list1 = list1[:]\ne_list2 = list2[:]\nmax1 = [0] * m\nif list1 != []:\n    sum1 += list1.pop(0)[1]\n    max1[0] = sum1\nelse:\n    max1[0] = sum1\nfor i in range(2, m, 2):\n    c = i + 1\n    if list1 != []:\n        if list2 != [] and len(list1) >= 2:\n            if list2[0][1] >= list1[0][1] + list1[1][1]:\n                sum1 += list2[0][1]\n                max1[i] = sum1\n                list2.pop(0)\n            else:\n                sum1 += list1[0][1]\n                list1.pop(0)\n                sum1 += list1[0][1]\n                max1[i] = sum1\n                list1.pop(0)\n        elif list2 != [] and len(list1) == 1:\n            if list2[0][1] >= list1[0][1]:\n                sum1 += list2[0][1]\n                max1[i] = sum1\n                list2.pop(0)\n            else:\n                sum1 += list1[0][1]\n                max1[i] = sum1\n                list1.pop(0)\n        elif list2 == []:\n            if len(list1) >= 2:\n                sum1 += list1[0][1]\n                list1.pop(0)\n                sum1 += list1[0][1]\n                max1[i] = sum1\n                list1.pop(0)\n            else:\n                sum1 += list1[0][1]\n                max1[i] = sum1\n                list1.pop(0)\n    elif list2 != []:\n        sum1 += list2[0][1]\n        max1[i] = sum1\n        list2.pop(0)\nsum1 = 0\nfor i in range(1, m, 2):\n    c = i + 1\n    if e_list1 != []:\n        if e_list2 != [] and len(e_list1) >= 2:\n            if e_list2[0][1] >= e_list1[0][1] + e_list1[1][1]:\n                sum1 += e_list2[0][1]\n                max1[i] = sum1\n                e_list2.pop(0)\n            else:\n                sum1 += e_list1[0][1]\n                e_list1.pop(0)\n                sum1 += e_list1[0][1]\n                max1[i] = sum1\n                e_list1.pop(0)\n        elif e_list2 != [] and len(e_list1) == 1:\n            if e_list2[0][1] >= e_list1[0][1]:\n                sum1 += e_list2[0][1]\n                max1[i] = sum1\n                e_list2.pop(0)\n            else:\n                sum1 += e_list1[0][1]\n                max1[i] = sum1\n                e_list1.pop(0)\n        elif e_list2 == []:\n            if len(e_list1) >= 2:\n                sum1 += e_list1[0][1]\n                e_list1.pop(0)\n                sum1 += e_list1[0][1]\n                max1[i] = sum1\n                e_list1.pop(0)\n            else:\n                sum1 += e_list1[0][1]\n                max1[i] = sum1\n                e_list1.pop(0)\n    elif e_list2 != []:\n        sum1 += e_list2[0][1]\n        max1[i] = sum1\n        e_list2.pop(0)\nfor (j, val) in enumerate(max1):\n    print(val, end=' ')", "from sys import stdin\nn = int(stdin.readline())\nlist1 = []\nweight = 0\nlist_one = []\nlist_two = []\nfor i in range(n):\n    (w, c) = map(int, stdin.readline().split())\n    if w == 1:\n        list_one.append(c)\n    else:\n        list_two.append(c)\n    weight += w\nlist1 = [0] * weight\nlist_one.sort(reverse=True)\nlist_two.sort(reverse=True)\nlist_one_even = list_one[:]\nlist_two_even = list_two[:]\ncurr = 0\nfor i in range(2, weight + 1, 2):\n    if list_two_even != [] and len(list_one_even) >= 1:\n        if len(list_one_even) > 1 and list_two_even[0] >= list_one_even[0] + list_one_even[1]:\n            cost = list_two_even.pop(0)\n            curr += cost\n            list1[i - 1] = curr\n        elif len(list_one_even) == 1 and list_two_even[0] >= list_one_even[0]:\n            cost = list_two_even.pop(0)\n            curr += cost\n            list1[i - 1] = curr\n        elif len(list_one_even) > 1:\n            cost1 = list_one_even.pop(0)\n            cost2 = list_one_even.pop(0)\n            curr += cost1 + cost2\n            list1[i - 1] = curr\n        else:\n            cost = list_one_even.pop(0)\n            curr += cost\n            list1[i - 1] = curr\n    elif list_two_even == []:\n        if len(list_one_even) > 1:\n            cost1 = list_one_even.pop(0)\n            cost2 = list_one_even.pop(0)\n            curr += cost1 + cost2\n            list1[i - 1] = curr\n        else:\n            cost = list_one_even.pop(0)\n            curr += cost\n            list1[i - 1] = curr\n    elif list_one_even == []:\n        if len(list_two_even) > 0:\n            cost = list_two_even.pop(0)\n            curr += cost\n            list1[i - 1] = curr\nif len(list_one) > 0:\n    list1[0] = list_one.pop(0)\n    curr = list1[0]\nelse:\n    curr = 0\nfor i in range(3, weight + 1, 2):\n    if list_two != [] and len(list_one) >= 1:\n        if len(list_one) > 1 and list_two[0] >= list_one[0] + list_one[1]:\n            cost = list_two.pop(0)\n            curr += cost\n            list1[i - 1] = curr\n        elif len(list_one) == 1 and list_two[0] >= list_one[0]:\n            cost = list_two.pop(0)\n            curr += cost\n            list1[i - 1] = curr\n        elif len(list_one) > 1:\n            cost1 = list_one.pop(0)\n            cost2 = list_one.pop(0)\n            curr += cost1 + cost2\n            list1[i - 1] = curr\n        else:\n            cost = list_one.pop(0)\n            curr += cost\n            list1[i - 1] = curr\n    elif list_two == []:\n        if len(list_one) > 1:\n            cost1 = list_one.pop(0)\n            cost2 = list_one.pop(0)\n            curr += cost1 + cost2\n            list1[i - 1] = curr\n        else:\n            cost = list_one.pop(0)\n            curr += cost\n            list1[i - 1] = curr\n    elif list_one == []:\n        if len(list_two) > 0:\n            cost = list_two.pop(0)\n            curr += cost\n            list1[i - 1] = curr\nprint(' '.join(map(str, list1)))", "(n, a, b, MaxW, MaxC) = (int(input()), list(), list(), 0, 0)\nfor _ in range(n):\n    (w, c) = map(int, input().split())\n    a.append(c) if w == 1 else b.append(c)\n    (MaxW, MaxC) = (MaxW + w, MaxC + c)\n(a, b, c, x, y) = (sorted(a), sorted(b), [0] * (MaxW + 1), [0] * (MaxW + 1), [0] * (MaxW + 1))\nc[MaxW] = MaxC\nfor i in range(MaxW, 1, -1):\n    if y[i] < len(b) and c[i] - b[y[i]] > c[i - 1]:\n        (c[i - 1], x[i - 1], y[i - 1]) = (c[i] - b[y[i]], x[i], y[i] + 1)\n    if y[i] < len(b) and c[i] - b[y[i]] > c[i - 2]:\n        (c[i - 2], x[i - 2], y[i - 2]) = (c[i] - b[y[i]], x[i], y[i] + 1)\n    if x[i] < len(a) and c[i] - a[x[i]] > c[i - 1]:\n        (c[i - 1], x[i - 1], y[i - 1]) = (c[i] - a[x[i]], x[i] + 1, y[i])\nfor i in range(1, MaxW + 1):\n    print(c[i], end=' ')", "n = int(input())\nm = 0\nitem1 = []\nitem2 = []\nfor i in range(n):\n    (w, c) = map(int, input().split())\n    m += w\n    if w == 1:\n        item1.append(c)\n    if w == 2:\n        item2.append(c)\nitem1 = sorted(item1, reverse=True)\nitem2 = sorted(item2, reverse=True)\nans = [0] * (m + 1)\ncurr = 0\nl1 = len(item1)\nl2 = len(item2)\n(one, two) = (0, 0)\nfor i in range(2, m + 1, 2):\n    if one + 1 < l1 and two < l2:\n        if item1[one + 1] + item1[one] > item2[two]:\n            curr += item1[one] + item1[one + 1]\n            ans[i] = curr\n            one += 2\n        else:\n            curr += item2[two]\n            two += 1\n            ans[i] = curr\n    elif one < l1 and two < l2:\n        if item1[one] > item2[two]:\n            curr += item1[one]\n            one += 1\n            ans[i] = curr\n        else:\n            curr += item2[two]\n            two += 1\n            ans[i] = curr\n    elif one + 1 < l1:\n        curr += item1[one] + item1[one + 1]\n        one += 2\n        ans[i] = curr\n    elif one < l1:\n        curr += item1[one]\n        one += 1\n        ans[i] = curr\n    elif two < l2:\n        curr += item2[two]\n        two += 1\n        ans[i] = curr\ncurr = 0\nif l1 > 0:\n    ans[1] = item1[0]\n    curr = item1[0]\n(one, two) = (1, 0)\nfor i in range(3, m + 1, 2):\n    if one + 1 < l1 and two < l2:\n        if item1[one + 1] + item1[one] > item2[two]:\n            curr += item1[one] + item1[one + 1]\n            ans[i] = curr\n            one += 2\n        else:\n            curr += item2[two]\n            two += 1\n            ans[i] = curr\n    elif one < l1 and two < l2:\n        if item1[one] > item2[two]:\n            curr += item1[one]\n            one += 1\n            ans[i] = curr\n        else:\n            curr += item2[two]\n            two += 1\n            ans[i] = curr\n    elif one + 1 < l1:\n        curr += item1[one] + item1[one + 1]\n        one += 2\n        ans[i] = curr\n    elif one < l1:\n        curr += item1[one]\n        one += 1\n        ans[i] = curr\n    elif two < l2:\n        curr += item2[two]\n        two += 1\n        ans[i] = curr\nprint(*ans[1:])", "n = int(input())\ntotal = 0\nw1 = []\nw2 = []\nfor _ in range(n):\n    (w, c) = map(int, input().split())\n    if w == 1:\n        w1.append(c)\n    else:\n        w2.append(c)\n    total += w\nw1.sort(reverse=True)\nw2.sort(reverse=True)\nans = [0] * (total + 1)\nlw1 = len(w1)\nlw2 = len(w2)\ncur = 0\n(one, two) = (0, 0)\nfor i in range(2, total + 1, 2):\n    if one + 1 < lw1 and two < lw2:\n        if w1[one + 1] + w1[one] > w2[two]:\n            cur += w1[one + 1] + w1[one]\n            ans[i] = cur\n            one += 2\n        else:\n            cur += w2[two]\n            ans[i] = cur\n            two += 1\n    elif one < lw1 and two < lw2:\n        if w1[one] > w2[two]:\n            cur += w1[one]\n            ans[i] = cur\n            one += 1\n        else:\n            cur += w2[two]\n            ans[i] = cur\n            two += 1\n    elif one + 1 < lw1:\n        cur += w1[one + 1] + w1[one]\n        ans[i] = cur\n        one += 2\n    elif one < lw1:\n        cur += w1[one]\n        ans[i] = cur\n        one += 1\n    elif two < lw2:\n        cur += w2[two]\n        ans[i] = cur\n        two += 1\ncur = 0\nif lw1 > 0:\n    cur = w1[0]\n    ans[1] = cur\none = 1\ntwo = 0\nfor i in range(3, total + 1, 2):\n    if one + 1 < lw1 and two < lw2:\n        if w1[one + 1] + w1[one] > w2[two]:\n            cur += w1[one + 1] + w1[one]\n            ans[i] = cur\n            one += 2\n        else:\n            cur += w2[two]\n            ans[i] = cur\n            two += 1\n    elif one < lw1 and two < lw2:\n        if w1[one] > w2[two]:\n            cur += w1[one]\n            ans[i] = cur\n            one += 1\n        else:\n            cur += w2[two]\n            ans[i] = cur\n            two += 1\n    elif one + 1 < lw1:\n        cur += w1[one + 1] + w1[one]\n        ans[i] = cur\n        one += 2\n    elif one < lw1:\n        cur += w1[one]\n        ans[i] = cur\n        one += 1\n    elif two < lw2:\n        cur += w2[two]\n        ans[i] = cur\n        two += 1\nprint(*ans[1:])", "num_items = int(input())\ncosts_weight1 = []\ncosts_weight2 = []\ntotal_weight = 0\nfor i in range(num_items):\n    (weight, cost) = map(int, input().split())\n    total_weight += weight\n    if weight == 1:\n        costs_weight1.append(cost)\n    else:\n        costs_weight2.append(cost)\ncosts_weight1.sort(reverse=True)\ncosts_weight2.sort(reverse=True)\nmax_costs = [0] * (total_weight + 1)\n(weight1_index, weight2_index) = (0, 0)\nfor i in range(2, len(max_costs), 2):\n    cost1 = 0\n    cost2 = 0\n    if weight1_index < len(costs_weight1):\n        cost1 += costs_weight1[weight1_index]\n    if weight1_index + 1 < len(costs_weight1):\n        cost1 += costs_weight1[weight1_index + 1]\n    if weight2_index < len(costs_weight2):\n        cost2 += costs_weight2[weight2_index]\n    if cost1 > cost2:\n        max_costs[i] = max_costs[i - 2] + cost1\n        weight1_index += 2\n    else:\n        max_costs[i] = max_costs[i - 2] + cost2\n        weight2_index += 1\nif len(costs_weight1) != 0:\n    max_costs[1] = costs_weight1[0]\n(weight1_index, weight2_index) = (1, 0)\nfor i in range(3, len(max_costs), 2):\n    cost1 = 0\n    cost2 = 0\n    if weight1_index < len(costs_weight1):\n        cost1 += costs_weight1[weight1_index]\n    if weight1_index + 1 < len(costs_weight1):\n        cost1 += costs_weight1[weight1_index + 1]\n    if weight2_index < len(costs_weight2):\n        cost2 += costs_weight2[weight2_index]\n    if cost1 > cost2:\n        max_costs[i] = max_costs[i - 2] + cost1\n        weight1_index += 2\n    else:\n        max_costs[i] = max_costs[i - 2] + cost2\n        weight2_index += 1\nprint(' '.join(map(str, max_costs[1:])))", "x = []\ny = []\nm = 0\nfor _ in range(int(input())):\n    (w, c) = map(int, input().split())\n    m += w\n    if w == 1:\n        x.append(c)\n    else:\n        y.append(c)\nif not x:\n    x.append(0)\nx.sort(reverse=True)\ny.sort(reverse=True)\nxn = len(x)\nyn = len(y)\ni = 1\nj = 0\ntKnapSack = x[0]\nprint(tKnapSack, end=' ')\nfor k in range(1, m):\n    if j >= yn or (i < xn and (xn == 1 or x[i] + x[i - 1] > y[j])):\n        s = x[i]\n        tKnapSack += s\n        i += 1\n    else:\n        s = y[j] - x[i - 1]\n        tKnapSack += s\n        j += 1\n        i -= 1\n    print(max(tKnapSack, tKnapSack - s), end=' ')\nprint()", "n = int(input())\n(one, two) = ([], [])\nW = 0\nfor _ in range(n):\n    (w, c) = map(int, input().split())\n    if w == 1:\n        one.append(c)\n    else:\n        two.append(c)\n    W += w\ne_one = sorted(one)\ne_two = sorted(two)\nans = [0] * W\ntemp = 0\nfor w in range(2, W + 1, 2):\n    (cost1, cost2) = (0, 0)\n    if len(e_one) >= 2:\n        cost1 = e_one[-1] + e_one[-2]\n    elif len(e_one) >= 1:\n        cost1 = e_one[-1]\n    if len(e_two) >= 1:\n        cost2 = e_two[-1]\n    if cost1 >= cost2:\n        if len(e_one) >= 2:\n            e_one.pop()\n            e_one.pop()\n        elif len(e_one) >= 1:\n            e_one.pop()\n        temp += cost1\n    else:\n        e_two.pop()\n        temp += cost2\n    ans[w - 1] = temp\no_one = sorted(one)\no_two = sorted(two)\ntemp = 0\nif len(o_one) >= 1:\n    ans[0] = o_one.pop()\n    temp = ans[0]\nfor w in range(3, W + 1, 2):\n    (cost1, cost2) = (0, 0)\n    if len(o_one) >= 2:\n        cost1 = o_one[-1] + o_one[-2]\n    elif len(o_one) >= 1:\n        cost1 = o_one[-1]\n    if len(o_two) >= 1:\n        cost2 = o_two[-1]\n    if cost1 >= cost2:\n        if len(o_one) >= 2:\n            o_one.pop()\n            o_one.pop()\n        elif len(o_one) >= 1:\n            o_one.pop()\n        temp += cost1\n    else:\n        o_two.pop()\n        temp += cost2\n    ans[w - 1] = temp\nprint(*ans, sep=' ')", "memo = dict()\nn = int(input())\n(s, l1, l2) = (0, [], [])\nfor i in range(n):\n    (w, p) = map(int, input().split())\n    if w == 1:\n        l1.append(p)\n    else:\n        l2.append(p)\n    s += w\nl1 = sorted(l1)\nl2 = sorted(l2)\nl1 = l1[::-1]\nl2 = l2[::-1]\ndupl1 = l1[:]\ndupl2 = l2[:]\nmemo[0] = 0\nfor i in range(2, s + 1, 2):\n    (max2, max1) = (0, 0)\n    if len(l2) > 0:\n        max2 = l2[0]\n    k = True\n    if len(l1) > 1:\n        max1 = l1[0] + l1[1]\n    elif len(l1) == 1:\n        max1 = l1[0]\n        k = False\n    if max2 > max1:\n        memo[i] = memo[i - 2] + max2\n        l2.pop(0)\n    else:\n        memo[i] = memo[i - 2] + max1\n        if k:\n            l1.pop(0)\n            l1.pop(0)\n        else:\n            l1.pop(0)\nif len(dupl1) > 0:\n    memo[1] = dupl1[0]\n    dupl1.pop(0)\nelse:\n    memo[1] = 0\nfor i in range(3, s + 1, 2):\n    (max2, max1) = (0, 0)\n    if len(dupl2) > 0:\n        max2 = dupl2[0]\n    k = True\n    if len(dupl1) > 1:\n        max1 = dupl1[0] + dupl1[1]\n    elif len(dupl1) == 1:\n        max1 = dupl1[0]\n        k = False\n    if max2 > max1:\n        memo[i] = memo[i - 2] + max2\n        dupl2.pop(0)\n    else:\n        memo[i] = memo[i - 2] + max1\n        if k:\n            dupl1.pop(0)\n            dupl1.pop(0)\n        else:\n            dupl1.pop(0)\nfor i in range(1, s + 1):\n    print(memo[i], end=' ')", "n = int(input())\na = list()\nb = list()\nMaxW = MaxC = 0\nfor _ in range(n):\n    (w, c) = map(int, input().split())\n    a.append(c) if w == 1 else b.append(c)\n    MaxW += w\n    MaxC += c\na.sort()\nb.sort()\nc = [0] * (MaxW + 1)\nx = [0] * (MaxW + 1)\ny = [0] * (MaxW + 1)\nc[MaxW] = MaxC\nfor i in range(MaxW, 1, -1):\n    if y[i] < len(b) and c[i] - b[y[i]] > c[i - 1]:\n        (c[i - 1], x[i - 1], y[i - 1]) = (c[i] - b[y[i]], x[i], y[i] + 1)\n    if y[i] < len(b) and c[i] - b[y[i]] > c[i - 2]:\n        (c[i - 2], x[i - 2], y[i - 2]) = (c[i] - b[y[i]], x[i], y[i] + 1)\n    if x[i] < len(a) and c[i] - a[x[i]] > c[i - 1]:\n        (c[i - 1], x[i - 1], y[i - 1]) = (c[i] - a[x[i]], x[i] + 1, y[i])\nprint(*c[1:], sep=' ')", "n = int(input())\na = list()\nb = list()\nMaxW = MaxC = 0\nfor _ in range(n):\n    (w, c) = map(int, input().split())\n    a.append(c) if w == 1 else b.append(c)\n    MaxW += w\n    MaxC += c\na.sort()\nb.sort()\nc = [0] * (MaxW + 1)\nx = [0] * (MaxW + 1)\ny = [0] * (MaxW + 1)\nc[MaxW] = MaxC\nfor i in range(MaxW, 1, -1):\n    if y[i] < len(b) and c[i] - b[y[i]] > c[i - 1]:\n        (c[i - 1], x[i - 1], y[i - 1]) = (c[i] - b[y[i]], x[i], y[i] + 1)\n    if y[i] < len(b) and c[i] - b[y[i]] > c[i - 2]:\n        (c[i - 2], x[i - 2], y[i - 2]) = (c[i] - b[y[i]], x[i], y[i] + 1)\n    if x[i] < len(a) and c[i] - a[x[i]] > c[i - 1]:\n        (c[i - 1], x[i - 1], y[i - 1]) = (c[i] - a[x[i]], x[i] + 1, y[i])\nfor i in range(1, MaxW + 1):\n    print(c[i], end=' ')", "n = int(input())\nl = []\nv = 0\no = []\nt = []\nfor w in range(n):\n    (p, q) = [int(e) for e in input().split()]\n    l.append([q, p])\n    v += p\n    if p == 1:\n        o.append(q)\n    else:\n        t.append(q)\no.sort(reverse=True)\nt.sort(reverse=True)\ni = 1\nj = 0\nk = 1\ns = 0\nif len(o) == 0:\n    o.append(0)\nc = o[0]\nprint(o[0], end=' ')\nwhile k < v:\n    if j >= len(t) or (i < len(o) and (len(o) == 1 or o[i] + o[i - 1] > t[j])):\n        s = o[i]\n        c += s\n        i += 1\n    else:\n        s = t[j] - o[i - 1]\n        c += s\n        j += 1\n        i -= 1\n    k += 1\n    print(max(c, c - s), end=' ')\nprint()", "n = int(input().strip())\nvalues_of_weight = {1: [], 2: []}\nm = 0\nfor i in range(n):\n    (weight, value) = map(int, input().strip().split())\n    values_of_weight[weight].append(value)\n    m += weight\nvalues_of_weight[1].sort()\nvalues_of_weight[2].sort()\nvalue_dp = [0 for i in range(m + 1)]\nidx_1 = len(values_of_weight[1]) - 1\nidx_2 = len(values_of_weight[2]) - 1\nfor capacity in range(2, m + 1, 2):\n    if idx_1 >= 0 and idx_2 >= 0:\n        if idx_1 == 0:\n            if values_of_weight[1][idx_1] > values_of_weight[2][idx_2]:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n                idx_1 -= 1\n            else:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n                idx_2 -= 1\n        elif values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1] > values_of_weight[2][idx_2]:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n            idx_2 -= 1\n    elif idx_2 >= 0:\n        value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n        idx_2 -= 1\n    elif idx_1 >= 0:\n        if idx_1 == 0:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n            idx_1 -= 1\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\nif len(values_of_weight[1]) >= 1:\n    value_dp[1] = values_of_weight[1].pop()\nidx_1 = len(values_of_weight[1]) - 1\nidx_2 = len(values_of_weight[2]) - 1\nfor capacity in range(3, m + 1, 2):\n    if idx_1 >= 0 and idx_2 >= 0:\n        if idx_1 == 0:\n            if values_of_weight[1][idx_1] > values_of_weight[2][idx_2]:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n                idx_1 -= 1\n            else:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n                idx_2 -= 1\n        elif values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1] > values_of_weight[2][idx_2]:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n            idx_2 -= 1\n    elif idx_2 >= 0:\n        value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n        idx_2 -= 1\n    elif idx_1 >= 0:\n        if idx_1 == 0:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n            idx_1 -= 1\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\nfor idx in range(2, capacity + 1):\n    if value_dp[idx] == 0:\n        value_dp[idx] = value_dp[idx_1]\nprint(*value_dp[1:], sep=' ')", "n = int(input().strip())\nvalues_of_weight = {1: [], 2: []}\nm = 0\nfor i in range(n):\n    (weight, value) = map(int, input().strip().split())\n    values_of_weight[weight].append(value)\n    m += weight\nvalues_of_weight[1].sort()\nvalues_of_weight[2].sort()\nvalue_dp = [0 for i in range(m + 1)]\nidx_1 = len(values_of_weight[1]) - 1\nidx_2 = len(values_of_weight[2]) - 1\nfor capacity in range(2, m + 1, 2):\n    if idx_1 >= 0 and idx_2 >= 0:\n        if idx_1 == 0:\n            if values_of_weight[1][idx_1] > values_of_weight[2][idx_2]:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n                idx_1 -= 1\n            else:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n                idx_2 -= 1\n        elif values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1] > values_of_weight[2][idx_2]:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n            idx_2 -= 1\n    elif idx_2 >= 0:\n        value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n        idx_2 -= 1\n    elif idx_1 >= 0:\n        if idx_1 == 0:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n            idx_1 -= 1\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\nif len(values_of_weight[1]) >= 1:\n    value_dp[1] = values_of_weight[1].pop()\nidx_1 = len(values_of_weight[1]) - 1\nidx_2 = len(values_of_weight[2]) - 1\nfor capacity in range(3, m + 1, 2):\n    if idx_1 >= 0 and idx_2 >= 0:\n        if idx_1 == 0:\n            if values_of_weight[1][idx_1] > values_of_weight[2][idx_2]:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n                idx_1 -= 1\n            else:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n                idx_2 -= 1\n        elif values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1] > values_of_weight[2][idx_2]:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n            idx_2 -= 1\n    elif idx_2 >= 0:\n        value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n        idx_2 -= 1\n    elif idx_1 >= 0:\n        if idx_1 == 0:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n            idx_1 -= 1\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\nfor idx in range(2, capacity + 1):\n    if value_dp[idx] == 0:\n        value_dp[idx] = value_dp[idx_1]\nprint(*value_dp[1:], sep=' ')", "n = int(input().strip())\nvalues_of_weight = {1: [], 2: []}\nm = 0\nfor i in range(n):\n    (weight, value) = map(int, input().strip().split())\n    values_of_weight[weight].append(value)\n    m += weight\nvalues_of_weight[1].sort()\nvalues_of_weight[2].sort()\nvalue_dp = [0 for i in range(m + 1)]\nidx_1 = len(values_of_weight[1]) - 1\nidx_2 = len(values_of_weight[2]) - 1\nfor capacity in range(2, m + 1, 2):\n    if idx_1 >= 0 and idx_2 >= 0:\n        if idx_1 == 0:\n            if values_of_weight[1][idx_1] > values_of_weight[2][idx_2]:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n                idx_1 -= 1\n            else:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n                idx_2 -= 1\n        elif values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1] > values_of_weight[2][idx_2]:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n            idx_2 -= 1\n    elif idx_2 >= 0:\n        value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n        idx_2 -= 1\n    elif idx_1 >= 0:\n        if idx_1 == 0:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n            idx_1 -= 1\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\nif len(values_of_weight[1]) >= 1:\n    value_dp[1] = values_of_weight[1].pop()\nidx_1 = len(values_of_weight[1]) - 1\nidx_2 = len(values_of_weight[2]) - 1\nfor capacity in range(3, m + 1, 2):\n    if idx_1 >= 0 and idx_2 >= 0:\n        if idx_1 == 0:\n            if values_of_weight[1][idx_1] > values_of_weight[2][idx_2]:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n                idx_1 -= 1\n            else:\n                value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n                idx_2 -= 1\n        elif values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1] > values_of_weight[2][idx_2]:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n            idx_2 -= 1\n    elif idx_2 >= 0:\n        value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[2][idx_2]\n        idx_2 -= 1\n    elif idx_1 >= 0:\n        if idx_1 == 0:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1]\n            idx_1 -= 1\n        else:\n            value_dp[capacity] = value_dp[capacity - 2] + values_of_weight[1][idx_1] + values_of_weight[1][idx_1 - 1]\n            idx_1 -= 2\nfor idx in range(2, capacity + 1):\n    if value_dp[idx] == 0:\n        value_dp[idx] = value_dp[idx_1]\nprint(*value_dp[1:], sep=' ')", "from operator import itemgetter\nones = []\ntwos = []\ntotal_weight = 0\nfor _ in range(int(input())):\n    temp = list(map(int, input().split()))\n    if temp[0] == 1:\n        ones.append(temp)\n    else:\n        twos.append(temp)\n    total_weight += temp[0]\nones = sorted(ones, key=itemgetter(1), reverse=True)\ntwos = sorted(twos, key=itemgetter(1), reverse=True)\nans = [0] * (total_weight + 1)\ntrack_twos = 0\ntrack_ones = 0\ncur = 0\nfor w in range(2, total_weight + 1, 2):\n    if track_ones + 1 <= len(ones) - 1:\n        ones_value = ones[track_ones][1] + ones[track_ones + 1][1]\n    elif track_ones == len(ones) - 1:\n        ones_value = ones[track_ones][1]\n    else:\n        ones_value = 0\n    if track_twos <= len(twos) - 1:\n        twos_value = twos[track_twos][1]\n    else:\n        twos_value = 0\n    if ones_value < twos_value:\n        cur += twos_value\n        track_twos += 1\n    else:\n        cur += ones_value\n        track_ones += 2\n    ans[w] = cur\ncur = 0\ntrack_ones = 0\ntrack_twos = 0\nif len(ones) >= 1:\n    ans[1] = ones[0][1]\n    cur += ans[1]\n    track_ones += 1\nfor w in range(3, total_weight + 1, 2):\n    if track_ones + 1 <= len(ones) - 1:\n        ones_value = ones[track_ones][1] + ones[track_ones + 1][1]\n    elif track_ones == len(ones) - 1:\n        ones_value = ones[track_ones][1]\n    else:\n        ones_value = 0\n    if track_twos <= len(twos) - 1:\n        twos_value = twos[track_twos][1]\n    else:\n        twos_value = 0\n    if ones_value < twos_value:\n        cur += twos_value\n        track_twos += 1\n    else:\n        cur += ones_value\n        track_ones += 2\n    ans[w] = cur\nfor i in range(1, len(ans)):\n    print(ans[i], end=' ')", "from copy import deepcopy\nn = int(input())\n(w1, w2) = ([], [])\nm = 0\nfor i in range(n):\n    (w, c) = tuple(map(int, input().split()))\n    if w == 1:\n        w1.append(c)\n    else:\n        w2.append(c)\n    m += w\nw1.sort()\nw2.sort()\n(W1, W2) = (deepcopy(w1), deepcopy(w2))\nans = [0] * (m + 1)\ncur = 0\nfor w in range(2, m + 1, 2):\n    cost1 = cost2 = 0\n    if w2:\n        cost2 = w2[-1]\n    if len(w1) >= 2:\n        cost1 += w1[-1] + w1[-2]\n    elif w1:\n        cost1 += w1[-1]\n    if cost2 > cost1:\n        cur += cost2\n        w2.pop()\n    else:\n        cur += cost1\n        if len(w1) >= 2:\n            w1.pop()\n            w1.pop()\n        else:\n            w1.pop()\n    ans[w] = cur\n(w1, w2, cur) = (W1, W2, 0)\nif w1:\n    cur = w1[-1]\n    w1.pop()\nans[1] = cur\nfor w in range(3, m + 1, 2):\n    cost1 = cost2 = 0\n    if w2:\n        cost2 = w2[-1]\n    if len(w1) >= 2:\n        cost1 += w1[-1] + w1[-2]\n    elif w1:\n        cost1 += w1[-1]\n    if cost2 > cost1:\n        cur += cost2\n        w2.pop()\n    else:\n        cur += cost1\n        if len(w1) >= 2:\n            w1.pop()\n            w1.pop()\n        else:\n            w1.pop()\n    ans[w] = cur\nprint(' '.join(map(str, ans[1:])))"]