["def helper(s, r, g, b):\n    x = y = z = d = 0\n    for i in range(len(s)):\n        if s[i] == 'r':\n            x += 1\n            if g > r:\n                d += y\n            if b > r:\n                d += z\n        if s[i] == 'g':\n            y += 1\n            if r > g:\n                d += x\n            if b > g:\n                d += z\n        if s[i] == 'b':\n            z += 1\n            if r > b:\n                d += x\n            if g > b:\n                d += y\n    return d\np = [(0, 1, 2), (2, 0, 1), (1, 2, 0), (0, 2, 1), (2, 1, 0), (1, 0, 2)]\nt = int(input())\nfor _ in range(t):\n    s = input()\n    res = []\n    for (r, g, b) in p:\n        res.append(helper(s, r, g, b))\n    print(min(res))", "def helper(s, r, g, b):\n    x = y = z = d = 0\n    for i in range(len(s)):\n        if s[i] == 'r':\n            x += 1\n            if g > r:\n                d += y\n            if b > r:\n                d += z\n        if s[i] == 'g':\n            y += 1\n            if r > g:\n                d += x\n            if b > g:\n                d += z\n        if s[i] == 'b':\n            z += 1\n            if r > b:\n                d += x\n            if g > b:\n                d += y\n    return d\np = [(0, 1, 2), (2, 0, 1), (1, 2, 0), (0, 2, 1), (2, 1, 0), (1, 0, 2)]\nt = int(input())\nfor _ in range(t):\n    s = input()\n    res = []\n    for (r, g, b) in p:\n        res.append(helper(s, r, g, b))\n    print(min(res))", "def helper(s, r, g, b):\n    x = y = z = d = 0\n    for i in range(len(s)):\n        if s[i] == 'r':\n            x += 1\n            if g > r:\n                d += y\n            if b > r:\n                d += z\n        if s[i] == 'g':\n            y += 1\n            if r > g:\n                d += x\n            if b > g:\n                d += z\n        if s[i] == 'b':\n            z += 1\n            if r > b:\n                d += x\n            if g > b:\n                d += y\n    return d\np = [(0, 1, 2), (2, 0, 1), (1, 2, 0), (0, 2, 1), (2, 1, 0), (1, 0, 2)]\nt = int(input())\nfor _ in range(t):\n    s = input()\n    res = []\n    for (r, g, b) in p:\n        res.append(helper(s, r, g, b))\n    print(min(res))", "def helper(s, r, g, b):\n    x = y = z = d = 0\n    for i in range(len(s)):\n        if s[i] == 'r':\n            x += 1\n            if g > r:\n                d += y\n            if b > r:\n                d += z\n        if s[i] == 'g':\n            y += 1\n            if r > g:\n                d += x\n            if b > g:\n                d += z\n        if s[i] == 'b':\n            z += 1\n            if r > b:\n                d += x\n            if g > b:\n                d += y\n    return d\np = [(0, 1, 2), (2, 0, 1), (1, 2, 0), (0, 2, 1), (2, 1, 0), (1, 0, 2)]\nt = int(input())\nfor _ in range(t):\n    s = input()\n    res = []\n    for (r, g, b) in p:\n        res.append(helper(s, r, g, b))\n    print(min(res))", "def helper(s, r, g, b):\n    x = y = z = d = 0\n    for i in range(len(s)):\n        if s[i] == 'r':\n            x += 1\n            if g > r:\n                d += y\n            if b > r:\n                d += z\n        if s[i] == 'g':\n            y += 1\n            if r > g:\n                d += x\n            if b > g:\n                d += z\n        if s[i] == 'b':\n            z += 1\n            if r > b:\n                d += x\n            if g > b:\n                d += y\n    return d\np = [(0, 1, 2), (2, 0, 1), (1, 2, 0), (0, 2, 1), (2, 1, 0), (1, 0, 2)]\nt = int(input())\nfor _ in range(t):\n    s = input()\n    res = []\n    for (r, g, b) in p:\n        res.append(helper(s, r, g, b))\n    print(min(res))", "def inversions(str, r, g, b):\n    r_count = g_count = b_count = inv = 0\n    for i in range(len(str)):\n        if str[i] == 'r':\n            r_count += 1\n            if g > r:\n                inv += g_count\n            if b > r:\n                inv += b_count\n        if str[i] == 'g':\n            g_count += 1\n            if r > g:\n                inv += r_count\n            if b > g:\n                inv += b_count\n        if str[i] == 'b':\n            b_count += 1\n            if r > b:\n                inv += r_count\n            if g > b:\n                inv += g_count\n    return inv\npermutation = [(0, 1, 2), (0, 2, 1), (1, 0, 2), (1, 2, 0), (2, 0, 1), (2, 1, 0)]\nfor _ in range(int(input())):\n    str = input()\n    ans = []\n    for (r, g, b) in permutation:\n        ans.append(inversions(str, r, g, b))\n    print(min(ans))", "def calcans(s, dest, r, g, b):\n    rc = 0\n    gc = 0\n    bc = 0\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == 'r':\n            rc += 1\n            if g < r:\n                ans += gc\n            if b < r:\n                ans += bc\n        if s[i] == 'b':\n            bc += 1\n            if g < b:\n                ans += gc\n            if r < b:\n                ans += rc\n        if s[i] == 'g':\n            gc += 1\n            if b < g:\n                ans += bc\n            if r < g:\n                ans += rc\n    return ans\nfor _ in range(int(input())):\n    s = input()\n    gcount = s.count('g')\n    rcount = s.count('r')\n    bcount = s.count('b')\n    ss = [('r' * rcount + 'g' * gcount + 'b' * bcount, 0, 1, 2), ('r' * rcount + 'b' * bcount + 'g' * gcount, 0, 2, 1), ('g' * gcount + 'b' * bcount + 'r' * rcount, 2, 0, 1), ('g' * gcount + 'r' * rcount + 'b' * bcount, 1, 0, 2), ('b' * bcount + 'r' * rcount + 'g' * gcount, 1, 2, 0), ('b' * bcount + 'g' * gcount + 'r' * rcount, 2, 1, 0)]\n    ans = float('inf')\n    for (des, r, g, b) in ss:\n        ans = min(ans, calcans(s, des, r, g, b))\n    print(ans)", "def calcans(s, dest, r, g, b):\n    rc = 0\n    gc = 0\n    bc = 0\n    ans = 0\n    for i in range(len(s)):\n        if s[i] == 'r':\n            rc += 1\n            if g < r:\n                ans += gc\n            if b < r:\n                ans += bc\n        if s[i] == 'b':\n            bc += 1\n            if g < b:\n                ans += gc\n            if r < b:\n                ans += rc\n        if s[i] == 'g':\n            gc += 1\n            if b < g:\n                ans += bc\n            if r < g:\n                ans += rc\n    return ans\nfor _ in range(int(input())):\n    s = input()\n    gcount = s.count('g')\n    rcount = s.count('r')\n    bcount = s.count('b')\n    ss = [('r' * rcount + 'g' * gcount + 'b' * bcount, 0, 1, 2), ('r' * rcount + 'b' * bcount + 'g' * gcount, 0, 2, 1), ('g' * gcount + 'b' * bcount + 'r' * rcount, 2, 0, 1), ('g' * gcount + 'r' * rcount + 'b' * bcount, 1, 0, 2), ('b' * bcount + 'r' * rcount + 'g' * gcount, 1, 2, 0), ('b' * bcount + 'g' * gcount + 'r' * rcount, 2, 1, 0)]\n    ans = float('inf')\n    for (des, r, g, b) in ss:\n        ans = min(ans, calcans(s, des, r, g, b))\n    print(ans)", "t = int(input())\ncountans5 = 0\n\ndef rgb(s, length):\n    no_not_rs = 0\n    no_not_bs = 0\n    no_not_gs = 0\n    countans1 = 0\n    for i in range(0, length):\n        if s[i] != 'r':\n            no_not_rs = no_not_rs + 1\n        elif s[i] == 'r':\n            countans1 = countans1 + no_not_rs\n    for i in range(0, length):\n        if s[i] == 'b':\n            no_not_gs = no_not_gs + 1\n        elif s[i] == 'g':\n            countans1 = countans1 + no_not_gs\n    return countans1\n\ndef rbg(s, length):\n    no_not_rs = 0\n    no_not_bs = 0\n    no_not_gs = 0\n    countans2 = 0\n    for i in range(0, length):\n        if s[i] != 'r':\n            no_not_rs = no_not_rs + 1\n        elif s[i] == 'r':\n            countans2 = countans2 + no_not_rs\n    for i in range(0, length):\n        if s[i] == 'g':\n            no_not_bs = no_not_bs + 1\n        elif s[i] == 'b':\n            countans2 = countans2 + no_not_bs\n    return countans2\n\ndef brg(s, length):\n    no_not_rs = 0\n    no_not_bs = 0\n    no_not_gs = 0\n    countans3 = 0\n    for i in range(0, length):\n        if s[i] != 'b':\n            no_not_bs = no_not_bs + 1\n        elif s[i] == 'b':\n            countans3 = countans3 + no_not_bs\n    for i in range(0, length):\n        if s[i] == 'g':\n            no_not_rs = no_not_rs + 1\n        elif s[i] == 'r':\n            countans3 = countans3 + no_not_rs\n    return countans3\n\ndef bgr(s, length):\n    no_not_rs = 0\n    no_not_bs = 0\n    no_not_gs = 0\n    countans4 = 0\n    for i in range(0, length):\n        if s[i] != 'b':\n            no_not_bs = no_not_bs + 1\n        elif s[i] == 'b':\n            countans4 = countans4 + no_not_bs\n    for i in range(0, length):\n        if s[i] == 'r':\n            no_not_gs = no_not_gs + 1\n        elif s[i] == 'g':\n            countans4 = countans4 + no_not_gs\n    return countans4\n\ndef grb(s, length):\n    no_not_rs = 0\n    no_not_bs = 0\n    no_not_gs = 0\n    countans5 = 0\n    for i in range(0, length):\n        if s[i] != 'g':\n            no_not_gs = no_not_gs + 1\n        elif s[i] == 'g':\n            countans5 = countans5 + no_not_gs\n    for i in range(0, length):\n        if s[i] == 'b':\n            no_not_rs = no_not_rs + 1\n        elif s[i] == 'r':\n            countans5 = countans5 + no_not_rs\n    return countans5\n\ndef gbr(s, length):\n    no_not_rs = 0\n    no_not_bs = 0\n    no_not_gs = 0\n    countans6 = 0\n    for i in range(0, length):\n        if s[i] != 'g':\n            no_not_gs = no_not_gs + 1\n        elif s[i] == 'g':\n            countans6 = countans6 + no_not_gs\n    for i in range(0, length):\n        if s[i] == 'r':\n            no_not_bs = no_not_bs + 1\n        elif s[i] == 'b':\n            countans6 = countans6 + no_not_bs\n    return countans6\nwhile t != 0:\n    s = str(input())\n    length = len(s)\n    countans1 = rgb(s, length)\n    countans2 = rbg(s, length)\n    countans3 = brg(s, length)\n    countans4 = bgr(s, length)\n    countans5 = gbr(s, length)\n    countans6 = grb(s, length)\n    print(min(countans1, countans2, countans3, countans4, countans5, countans6))\n    t = t - 1"]