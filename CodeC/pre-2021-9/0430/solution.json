["n = int(input())\nc = list(map(str, input().split()))\nm = int(input())\nd = dict()\nfor i in range(m):\n    string = input().split()\n    d[string[0], string[1]] = int(string[2])\nt = int(input())\nvisited = []\nfor i in range(t):\n    r = list(map(str, input().split(' ')))\n    k = int(r[0])\n    visited.clear()\n    distance = 0\n    flag = 0\n    for i in range(1, k + 1):\n        if r[i] in visited or r[i] not in c:\n            print('ERROR')\n            flag = 1\n            break\n        else:\n            visited.append(r[i])\n    if flag:\n        continue\n    for i in range(k - 1):\n        if (visited[i], visited[i + 1]) in d:\n            distance += d[visited[i], visited[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(distance)", "n = int(input())\nc = list(map(str, input().split()))\nm = int(input())\nd = dict()\nfor i in range(m):\n    string = input().split()\n    d[string[0], string[1]] = int(string[2])\nt = int(input())\nvisited = []\nfor i in range(t):\n    r = list(map(str, input().split(' ')))\n    k = int(r[0])\n    visited.clear()\n    distance = 0\n    flag = 0\n    for i in range(1, k + 1):\n        if r[i] in visited or r[i] not in c:\n            print('ERROR')\n            flag = 1\n            break\n        else:\n            visited.append(r[i])\n    if flag:\n        continue\n    for i in range(k - 1):\n        if (visited[i], visited[i + 1]) in d:\n            distance += d[visited[i], visited[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(distance)", "n = int(input())\nc = list(map(str, input().split()))\nm = int(input())\nd = dict()\nfor i in range(m):\n    string = input().split()\n    d[string[0], string[1]] = int(string[2])\nt = int(input())\nvisited = []\nfor i in range(t):\n    r = list(map(str, input().split(' ')))\n    k = int(r[0])\n    visited.clear()\n    distance = 0\n    flag = 0\n    for i in range(1, k + 1):\n        if r[i] in visited or r[i] not in c:\n            print('ERROR')\n            flag = 1\n            break\n        else:\n            visited.append(r[i])\n    if flag:\n        continue\n    for i in range(k - 1):\n        if (visited[i], visited[i + 1]) in d:\n            distance += d[visited[i], visited[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(distance)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\nans = []\nN = inp()\ncities = insr().split()\ngraph = {}\nfor _ in range(inp()):\n    (s, d, l) = insr().split()\n    graph[s, d] = int(l)\nfor _ in range(inp()):\n    route = insr().split()\n    an = 0\n    if route[0] == '1':\n        if route[1] not in cities:\n            an = 'ERROR'\n    elif len(set(route)) != len(route):\n        an = 'ERROR'\n    else:\n        for i in range(1, int(route[0])):\n            if (route[i], route[i + 1]) in graph:\n                an += graph[route[i], route[i + 1]]\n            else:\n                an = 'ERROR'\n                break\n    ans.append(an)\noutplt(ans)", "import sys\ninput = sys.stdin.readline\n\ndef inp():\n    return int(input())\n\ndef inlt():\n    return list(map(int, input().split()))\n\ndef insr():\n    return input().strip()\n\ndef invr():\n    return map(int, input().split())\n\ndef outp(n):\n    sys.stdout.write(str(n) + '\\n')\n\ndef outlt(lst):\n    sys.stdout.write(' '.join(map(str, lst)) + '\\n')\n\ndef outplt(lst):\n    sys.stdout.write('\\n'.join(map(str, lst)))\n\ndef outpltlt(lst):\n    sys.stdout.write('\\n'.join(map(str, (' '.join(map(str, a)) for a in lst))))\nans = []\nN = inp()\ncities = insr().split()\ngraph = {}\ndist = {}\nfor _ in range(inp()):\n    (s, d, l) = insr().split()\n    if s in graph:\n        graph[s].append(d)\n        dist[s].append(int(l))\n    else:\n        graph[s] = [d]\n        dist[s] = [int(l)]\nk = inp()\nfor _ in range(k):\n    route = insr().split()[1:]\n    an = 0\n    if len(route) == 1:\n        if route[0] in cities:\n            ans.append(0)\n        else:\n            ans.append('ERROR')\n        continue\n    if len(set(route)) != len(route):\n        ans.append('ERROR')\n        continue\n    for i in range(len(route) - 1):\n        if route[i] in graph and route[i + 1] in graph[route[i]]:\n            an += dist[route[i]][graph[route[i]].index(route[i + 1])]\n        else:\n            an = -1\n            break\n    ans.append('ERROR' if an == -1 else an)\noutplt(ans)", "import math\nalf = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\n\ndef createDic(nums):\n    dic = dict()\n    for i in nums:\n        if not i in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n\ndef subarray_sum_max(nums):\n    array = []\n    suma_parcial = 0\n    max_sum = 0\n    index = 0\n    se_refresco = True\n    for i in range(len(nums)):\n        suma_parcial += nums[i]\n        if max_sum < suma_parcial:\n            if se_refresco:\n                array = []\n                se_refresco = False\n                index = i\n            max_sum = suma_parcial\n        if suma_parcial < 0:\n            suma_parcial = 0\n            se_refresco = True\n        elif not se_refresco:\n            array.append(nums[i])\n    return (array, index, max_sum)\n\ndef particiones(nums, index, array):\n    if index == len(nums):\n        count = 0\n    else:\n        for i in array:\n            i.append(nums[index])\n            particiones(nums, index + 1, array)\n            i.pop(len(i) - 1)\n        array.append([])\n        array[len(array) - 1].append(nums[index])\n        particiones(nums, index + 1, array)\n        array.pop(len(array) - 1)\n\ndef busqueda_binaria(nums, x):\n    izq = 0\n    der = len(nums) - 1\n    while izq <= der:\n        medio = int((izq + der) / 2)\n        if nums[medio] == x:\n            return medio\n        elif nums[medio] > x:\n            der = medio - 1\n        else:\n            izq = medio + 1\n    return -1\n\ndef solve():\n    n = int(input())\n    names = list(map(str, input().split()))\n    m = int(input())\n    dic = dict()\n    for i in range(m):\n        (c1, c2, dist) = map(str, input().split())\n        dic[c1, c2] = int(dist)\n    t = int(input())\n    for i in range(t):\n        array = list(map(str, input().split()))\n        array_aux = []\n        for j in range(1, len(array)):\n            array_aux.append(array[j])\n        dic_aux = createDic(array_aux)\n        error = False\n        for k in dic_aux:\n            if dic_aux[k] != 1:\n                print('ERROR')\n                error = True\n                break\n        if error:\n            continue\n        pincha = True\n        for q in dic_aux:\n            pincha = False\n            for p in names:\n                if p == q:\n                    pincha = True\n                    break\n            if not pincha:\n                print('ERROR')\n                error = True\n                break\n        if error:\n            continue\n        if len(array_aux) == 1:\n            print(0)\n            continue\n        suma = 0\n        for i in range(1, len(array_aux)):\n            if not (array_aux[i - 1], array_aux[i]) in dic:\n                print('ERROR')\n                error = True\n                break\n            suma += dic[array_aux[i - 1], array_aux[i]]\n        if error:\n            continue\n        print(suma)\ntest = 1\nwhile test != 0:\n    solve()\n    test -= 1", "import math\nalf = 'abcdefghijklmnopqrstuvwxyz'\nmod = 1000000007\n\ndef createDic(nums):\n    dic = dict()\n    for i in nums:\n        if not i in dic:\n            dic[i] = 1\n        else:\n            dic[i] += 1\n    return dic\n\ndef subarray_sum_max(nums):\n    array = []\n    suma_parcial = 0\n    max_sum = 0\n    index = 0\n    se_refresco = True\n    for i in range(len(nums)):\n        suma_parcial += nums[i]\n        if max_sum < suma_parcial:\n            if se_refresco:\n                array = []\n                se_refresco = False\n                index = i\n            max_sum = suma_parcial\n        if suma_parcial < 0:\n            suma_parcial = 0\n            se_refresco = True\n        elif not se_refresco:\n            array.append(nums[i])\n    return (array, index, max_sum)\n\ndef particiones(nums, index, array):\n    if index == len(nums):\n        count = 0\n    else:\n        for i in array:\n            i.append(nums[index])\n            particiones(nums, index + 1, array)\n            i.pop(len(i) - 1)\n        array.append([])\n        array[len(array) - 1].append(nums[index])\n        particiones(nums, index + 1, array)\n        array.pop(len(array) - 1)\n\ndef busqueda_binaria(nums, x):\n    izq = 0\n    der = len(nums) - 1\n    while izq <= der:\n        medio = int((izq + der) / 2)\n        if nums[medio] == x:\n            return medio\n        elif nums[medio] > x:\n            der = medio - 1\n        else:\n            izq = medio + 1\n    return -1\n\ndef solve():\n    n = int(input())\n    names = list(map(str, input().split()))\n    m = int(input())\n    dic = dict()\n    for i in range(m):\n        (c1, c2, dist) = map(str, input().split())\n        dic[c1, c2] = int(dist)\n    t = int(input())\n    for i in range(t):\n        array = list(map(str, input().split()))\n        array_aux = []\n        for j in range(1, len(array)):\n            array_aux.append(array[j])\n        dic_aux = createDic(array_aux)\n        error = False\n        for k in dic_aux:\n            if dic_aux[k] != 1:\n                print('ERROR')\n                error = True\n                break\n        if error:\n            continue\n        pincha = True\n        for q in dic_aux:\n            pincha = False\n            for p in names:\n                if p == q:\n                    pincha = True\n                    break\n            if not pincha:\n                print('ERROR')\n                error = True\n                break\n        if error:\n            continue\n        if len(array_aux) == 1:\n            print(0)\n            continue\n        suma = 0\n        for i in range(1, len(array_aux)):\n            if not (array_aux[i - 1], array_aux[i]) in dic:\n                print('ERROR')\n                error = True\n                break\n            suma += dic[array_aux[i - 1], array_aux[i]]\n        if error:\n            continue\n        print(suma)\ntest = 1\nwhile test != 0:\n    solve()\n    test -= 1", "n = int(input())\ncities = input().strip().split(' ')\ncitd = dict()\nfor cit in cities:\n    citd[cit] = True\nm = int(input())\nroads = dict()\nfor i in range(0, m):\n    temp = input().strip().split(' ')\n    roads[temp[0] + ':' + temp[1]] = int(temp[2])\nt = int(input())\nfor i in range(0, t):\n    li = input().strip().split(' ')\n    temp = set(li)\n    cost = 0\n    if len(li) != len(temp):\n        print('ERROR')\n    elif li[0] == '1' and citd.get(li[1], False):\n        print(0)\n    elif li[0] == '1' and (not citd.get(li[1], False)):\n        print('ERROR')\n    else:\n        for j in range(2, int(li[0]) + 1):\n            if roads.get(li[j - 1] + ':' + li[j], False):\n                cost += roads[li[j - 1] + ':' + li[j]]\n            else:\n                cost = -1\n                break\n        if cost != -1:\n            print(cost)\n        else:\n            print('ERROR')", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nroute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cur_route = [x for x in input().split()]\n    K = int(cur_route[0])\n    cur_route = cur_route[1:]\n    if not all([x in city for x in cur_route]):\n        print('ERROR')\n        continue\n    if len(set(cur_route)) != len(cur_route):\n        print('ERROR')\n        continue\n    ans = 0\n    for i in range(K - 1):\n        if (cur_route[i], cur_route[i + 1]) in route:\n            ans += route[cur_route[i], cur_route[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(ans)", "locations = int(input())\nlocations_list = set(input().split())\nroads = int(input())\nroads_dict = {}\nfor i in range(roads):\n    (a, b, dist) = input().split()\n    if a in locations_list and b in locations_list:\n        roads_dict[a, b] = int(dist)\ntests = int(input())\nfor i in range(tests):\n    (length, *route) = input().split()\n    length = int(length)\n    ans = 0\n    if len(set(route)) != length or route[0] not in locations_list:\n        ans = 'ERROR'\n    else:\n        for j in range(length - 1):\n            if (route[j], route[j + 1]) in roads_dict:\n                ans += roads_dict[route[j], route[j + 1]]\n            else:\n                ans = 'ERROR'\n                break\n    print(ans)", "locations = int(input())\nlocations_list = input().split()\nroads = int(input())\nroads_dict = {}\nfor i in range(roads):\n    (a, b, dist) = input().split()\n    if a in locations_list and b in locations_list:\n        roads_dict[a, b] = int(dist)\ntests = int(input())\nfor i in range(tests):\n    (length, *route) = input().split()\n    length = int(length)\n    ans = 0\n    if len(set(route)) != length or route[0] not in locations_list:\n        ans = 'ERROR'\n    else:\n        for j in range(length - 1):\n            if (route[j], route[j + 1]) in roads_dict:\n                ans += roads_dict[route[j], route[j + 1]]\n            else:\n                ans = 'ERROR'\n                break\n    print(ans)", "n = int(input())\nl = list(map(str, input().split()))\nbase = {}\nfor i in range(int(input())):\n    (c1, c2, d) = map(str, input().split())\n    base[c1 + c2] = int(d)\nfor i in range(int(input())):\n    plans = list(map(str, input().split()))\n    k = int(plans[0])\n    flag = True\n    dist = 0\n    if k == 1:\n        if plans[1] not in l:\n            flag = False\n    for j in range(1, k):\n        if plans[j] + plans[j + 1] in base:\n            dist += base[plans[j] + plans[j + 1]]\n        else:\n            flag = False\n    if flag and len(plans) == len(set(plans)):\n        print(dist)\n    else:\n        print('ERROR')", "n = int(input())\nl = list(map(str, input().split()))\nm = int(input())\nbase = {}\nfor i in range(m):\n    (c1, c2, d) = map(str, input().split())\n    base[c1 + c2] = int(d)\nfor i in range(int(input())):\n    plans = list(map(str, input().split()))\n    k = int(plans[0])\n    flag = True\n    dist = 0\n    if k == 1:\n        if plans[1] not in l:\n            flag = False\n    for j in range(1, k):\n        if plans[j] + plans[j + 1] in base:\n            dist += base[plans[j] + plans[j + 1]]\n        else:\n            flag = False\n    if flag and len(plans) == len(set(plans)):\n        print(dist)\n    else:\n        print('ERROR')", "total_cities = int(input())\ncities = list(map(str, input().split(' ')))\nroutes = int(input())\nd = {}\nfor i in range(routes):\n    (a, b, c) = input().split(' ')\n    d[a + b] = int(c)\ntravel_plans = int(input())\nfor i in range(travel_plans):\n    li = list(map(str, input().split(' ')))\n    planned = int(li[0])\n    flag = True\n    distance = 0\n    if planned == 1:\n        if li[1] not in cities:\n            flag = False\n    for i in range(1, planned):\n        if li[i] + li[i + 1] in d:\n            distance += d[li[i] + li[i + 1]]\n        else:\n            flag = False\n    if flag and len(li) == len(set(li)):\n        print(distance)\n    else:\n        print('ERROR')", "n = int(input())\nl = list(map(str, input().split()))\nm = int(input())\nroot = {}\nfor i in range(m):\n    (c1, c2, d) = map(str, input().split())\n    root[c1 + c2] = int(d)\nt = int(input())\nfor i in range(t):\n    plans = list(map(str, input().split()))\n    k = int(plans[0])\n    ans = True\n    distance = 0\n    if k == 1:\n        if plans[1] not in l:\n            ans = False\n    for j in range(1, k):\n        if plans[j] + plans[j + 1] in root:\n            distance += root[plans[j] + plans[j + 1]]\n        else:\n            ans = False\n    if ans and len(plans) == len(set(plans)):\n        print(distance)\n    else:\n        print('ERROR')", "city_num = int(input())\nli = list(map(str, input().split()))\nroad_num = int(input())\ndi = {}\nfor _ in range(road_num):\n    (a, b, c) = list(map(str, input().split()))\n    di.update({a + b: int(c)})\ntr_n = int(input())\nfor _ in range(tr_n):\n    ro_li = list(map(str, input().split()))\n    ro_n = int(ro_li[0])\n    ro_li.pop(0)\n    dup_check = set(ro_li)\n    ans = 0\n    t = 0\n    if ro_n == 1:\n        if ro_li[0] not in li:\n            t = 1\n    for i in range(ro_n - 1):\n        ro = ro_li[i] + ro_li[i + 1]\n        if ro in di:\n            ans += di[ro]\n        else:\n            t = 1\n    if t != 1 and len(dup_check) == len(ro_li):\n        print(ans)\n    else:\n        print('ERROR')", "n = int(input())\ncities = input().split()\nm = int(input())\nroutes = []\nfor i in range(m):\n    inp = input().split()\n    routes.append(inp)\nvisited = []\nfor _ in range(int(input())):\n    distance = flag = 0\n    visited.clear()\n    inp = input().split()\n    k = int(inp[0])\n    for i in range(1, k + 1):\n        if inp[i] not in cities or inp[i] in visited:\n            print('ERROR')\n            flag = 1\n            break\n        visited.append(inp[i])\n    if flag:\n        continue\n    for i in range(1, k):\n        for j in routes:\n            if j[0] == inp[i] and j[1] == inp[i + 1]:\n                distance += int(j[2])\n                break\n        else:\n            print('ERROR')\n            flag = 1\n            break\n    if flag:\n        continue\n    print(distance)", "n = int(input())\ncities = input().split()\nm = int(input())\nroutes = []\nfor i in range(m):\n    inp = input().split()\n    routes.append(inp)\nvisited = []\nfor _ in range(int(input())):\n    distance = flag = 0\n    visited.clear()\n    inp = input().split()\n    k = int(inp[0])\n    for i in range(1, k + 1):\n        if inp[i] not in cities or inp[i] in visited:\n            print('ERROR')\n            flag = 1\n            break\n        visited.append(inp[i])\n    if flag:\n        continue\n    for i in range(1, k):\n        for j in routes:\n            if j[0] == inp[i] and j[1] == inp[i + 1]:\n                distance += int(j[2])\n                break\n        else:\n            print('ERROR')\n            flag = 1\n            break\n    if flag:\n        continue\n    print(distance)", "n = int(input())\ncity = list(input().split())\nm = int(input())\nr = []\nl = []\ntc = []\nfor i in range(m):\n    (a, b, c) = input().split()\n    r.append([a, b])\n    l.append(int(c))\nfor i in range(int(input())):\n    s = input()\n    tc.append(list(s[2:].split()))\nfor i in tc:\n    t = True\n    for j in i:\n        if j not in city:\n            t = False\n            break\n    if t:\n        for j in i:\n            if i.count(j) == 1:\n                pass\n            else:\n                t = False\n                break\n        if t:\n            s = 0\n            for j in range(len(i) - 1):\n                if [i[j], i[j + 1]] in r:\n                    s = s + l[r.index([i[j], i[j + 1]])]\n                else:\n                    t = False\n                    break\n            if t:\n                print(s)\n            else:\n                print('ERROR')\n        else:\n            print('ERROR')\n    else:\n        print('ERROR')", "n = int(input())\ncity = list(input().split())\nm = int(input())\nr = []\nl = []\ntc = []\nfor i in range(m):\n    (a, b, c) = input().split()\n    r.append([a, b])\n    l.append(int(c))\nfor i in range(int(input())):\n    s = input()\n    tc.append(list(s[2:].split()))\nfor i in tc:\n    t = True\n    for j in i:\n        if j not in city:\n            t = False\n            break\n    if t:\n        for j in i:\n            if i.count(j) == 1:\n                pass\n            else:\n                t = False\n                break\n        if t:\n            s = 0\n            for j in range(len(i) - 1):\n                if [i[j], i[j + 1]] in r:\n                    s = s + l[r.index([i[j], i[j + 1]])]\n                else:\n                    t = False\n                    break\n            if t:\n                print(s)\n            else:\n                print('ERROR')\n        else:\n            print('ERROR')\n    else:\n        print('ERROR')", "n = int(input())\ncity = list(input().split())\nm = int(input())\nr = []\nl = []\ntc = []\nfor i in range(m):\n    (a, b, c) = input().split()\n    r.append([a, b])\n    l.append(int(c))\nfor i in range(int(input())):\n    s = input()\n    tc.append(list(s[2:].split()))\nfor i in tc:\n    t = True\n    for j in i:\n        if j not in city:\n            t = False\n            break\n    if t:\n        for j in i:\n            if i.count(j) == 1:\n                pass\n            else:\n                t = False\n                break\n        if t:\n            s = 0\n            for j in range(len(i) - 1):\n                if [i[j], i[j + 1]] in r:\n                    s = s + l[r.index([i[j], i[j + 1]])]\n                else:\n                    t = False\n                    break\n            if t:\n                print(s)\n            else:\n                print('ERROR')\n        else:\n            print('ERROR')\n    else:\n        print('ERROR')", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "def spell_check(city, cur_route):\n    k = int(cur_route[0])\n    cur_route = cur_route[1:]\n    if not all([x in city for x in cur_route]):\n        return 0\n    return 1\n\ndef duplicate_check(cur_route):\n    cur_route = cur_route[1:]\n    if len(set(cur_route)) != len(cur_route):\n        return 0\n    return 1\nn = int(input())\ncity = set(list(map(str, input().split())))\nm = int(input())\nroute = {}\nfor i in range(m):\n    r = [x for x in input().split()]\n    route[r[0], r[1]] = int(r[2])\nt = int(input())\nfor i in range(t):\n    cur_route = [x for x in input().split()]\n    k = int(cur_route[0])\n    if not spell_check(city, cur_route) or not duplicate_check(cur_route):\n        print('ERROR')\n        continue\n    ans = 0\n    for i in range(1, k):\n        if (cur_route[i], cur_route[i + 1]) in route:\n            ans += route[cur_route[i], cur_route[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(ans)", "import math\nn = int(input())\ncity = [i for i in input().split()]\nm = int(input())\nroute = {}\nfor i in range(m):\n    r = [x for x in input().split()]\n    route[r[0], r[1]] = int(r[2])\nt = int(input())\nfor i in range(t):\n    cRoute = [x for x in input().split()]\n    k = int(cRoute[0])\n    cRoute = cRoute[1:]\n    if not all([x in city for x in cRoute]):\n        print('ERROR')\n        continue\n    if len(set(cRoute)) != len(cRoute):\n        print('ERROR')\n        continue\n    ans = 0\n    for i in range(k - 1):\n        if (cRoute[i], cRoute[i + 1]) in route:\n            ans += route[cRoute[i], cRoute[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(ans)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nroute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cur_route = [x for x in input().split()]\n    K = int(cur_route[0])\n    cur_route = cur_route[1:]\n    if not all([x in city for x in cur_route]):\n        print('ERROR')\n        continue\n    if len(set(cur_route)) != len(cur_route):\n        print('ERROR')\n        continue\n    ans = 0\n    for i in range(K - 1):\n        if (cur_route[i], cur_route[i + 1]) in route:\n            ans += route[cur_route[i], cur_route[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(ans)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nroute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cur_route = [x for x in input().split()]\n    K = int(cur_route[0])\n    cur_route = cur_route[1:]\n    if not all([x in city for x in cur_route]):\n        print('ERROR')\n        continue\n    if len(set(cur_route)) != len(cur_route):\n        print('ERROR')\n        continue\n    ans = 0\n    for i in range(K - 1):\n        if (cur_route[i], cur_route[i + 1]) in route:\n            ans += route[cur_route[i], cur_route[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(ans)", "def check_city(cities, travel):\n    for city in travel:\n        if city not in cities:\n            return False\n    return True\n\ndef check_repeat(travel):\n    travel_ = set(travel)\n    if len(travel_) != len(travel):\n        return True\n    return False\n\ndef check_path(routes, distance, travel):\n    n_city = travel[0]\n    for i in range(n_city - 1):\n        if [travel[i + 1], travel[i + 2]] not in routes:\n            return False\n    return True\n\ndef calc_dist(routes, distance, travel):\n    n_city = travel[0]\n    total_dist = 0\n    for i in range(n_city - 1):\n        index = routes.index([travel[i + 1], travel[i + 2]])\n        total_dist += distance[index]\n    return total_dist\nn_city = int(input())\ncities = list(input().split(' '))\nn_route = int(input())\nroutes = list()\ndistance = list()\nfor i in range(n_route):\n    route = list(input().split(' '))\n    route[-1] = int(route[-1])\n    distance.append(route[-1])\n    route.pop()\n    routes.append(route)\ntravel_n = int(input())\nfor i in range(travel_n):\n    travel = list(input().split(' '))\n    travel[0] = int(travel[0])\n    value1 = check_city(cities, travel[1:])\n    value2 = check_repeat(travel[1:])\n    value3 = check_path(routes, distance, travel)\n    if value1 == False or value2 == True or value3 == False:\n        print('ERROR')\n    else:\n        print(calc_dist(routes, distance, travel))", "def check_city(cities, travel):\n    for city in travel:\n        if city not in cities:\n            return False\n    return True\n\ndef check_repeat(travel):\n    travel_ = set(travel)\n    if len(travel_) != len(travel):\n        return True\n    return False\n\ndef check_path(routes, distance, travel):\n    n_city = travel[0]\n    for i in range(n_city - 1):\n        if [travel[i + 1], travel[i + 2]] not in routes:\n            return False\n    return True\n\ndef calc_dist(routes, distance, travel):\n    n_city = travel[0]\n    total_dist = 0\n    for i in range(n_city - 1):\n        index = routes.index([travel[i + 1], travel[i + 2]])\n        total_dist += distance[index]\n    return total_dist\nn_city = int(input())\ncities = list(input().split(' '))\nn_route = int(input())\nroutes = list()\ndistance = list()\nfor i in range(n_route):\n    route = list(input().split(' '))\n    route[-1] = int(route[-1])\n    distance.append(route[-1])\n    route.pop()\n    routes.append(route)\ntravel_n = int(input())\nfor i in range(travel_n):\n    travel = list(input().split(' '))\n    travel[0] = int(travel[0])\n    value1 = check_city(cities, travel[1:])\n    value2 = check_repeat(travel[1:])\n    value3 = check_path(routes, distance, travel)\n    if value1 == False or value2 == True or value3 == False:\n        print('ERROR')\n    else:\n        print(calc_dist(routes, distance, travel))", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nroute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cur_route = [x for x in input().split()]\n    K = int(cur_route[0])\n    cur_route = cur_route[1:]\n    if not all([x in city for x in cur_route]):\n        print('ERROR')\n        continue\n    if len(set(cur_route)) != len(cur_route):\n        print('ERROR')\n        continue\n    ans = 0\n    for i in range(K - 1):\n        if (cur_route[i], cur_route[i + 1]) in route:\n            ans += route[cur_route[i], cur_route[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(ans)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nroute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cur_route = [x for x in input().split()]\n    K = int(cur_route[0])\n    cur_route = cur_route[1:]\n    if not all([x in city for x in cur_route]):\n        print('ERROR')\n        continue\n    if len(set(cur_route)) != len(cur_route):\n        print('ERROR')\n        continue\n    ans = 0\n    for i in range(K - 1):\n        if (cur_route[i], cur_route[i + 1]) in route:\n            ans += route[cur_route[i], cur_route[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(ans)", "nCities = int(input())\ncities = input().split(' ')\nnRoads = int(input())\nRoads = {}\nfor i in range(nRoads):\n    x = input().split(' ')\n    Roads[' '.join(x[:2])] = int(x[2])\nnRoutes = int(input())\nfor i in range(nRoutes):\n    distance = 0\n    route = input().split(' ')\n    flag = True\n    for i in route[1:]:\n        if i not in cities:\n            print('ERROR')\n            flag = False\n            break\n    if flag:\n        if int(route[0]) == len(set(route[1:])):\n            for i in range(1, len(route) - 1):\n                road = ' '.join(route[i:i + 2])\n                if road in Roads:\n                    distance += Roads[road]\n                else:\n                    print('ERROR')\n                    flag = False\n                    break\n            if flag:\n                print(distance)\n        else:\n            print('ERROR')", "nCities = int(input())\ncities = input().split(' ')\nnRoads = int(input())\nRoads = {}\nfor i in range(nRoads):\n    x = input().split(' ')\n    Roads[' '.join(x[:2])] = int(x[2])\nnRoutes = int(input())\nfor i in range(nRoutes):\n    distance = 0\n    route = input().split(' ')\n    flag = True\n    for i in route[1:]:\n        if i not in cities:\n            print('ERROR')\n            flag = False\n            break\n    if flag:\n        if int(route[0]) == len(set(route[1:])):\n            for i in range(1, len(route) - 1):\n                road = ' '.join(route[i:i + 2])\n                if road in Roads:\n                    distance += Roads[road]\n                else:\n                    print('ERROR')\n                    flag = False\n                    break\n            if flag:\n                print(distance)\n        else:\n            print('ERROR')", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "import math\nN = int(input())\ncity = [x for x in input().split()]\nM = int(input())\nRoute = {}\nfor m in range(M):\n    r = [x for x in input().split()]\n    Route[r[0], r[1]] = int(r[2])\nT = int(input())\nfor t in range(T):\n    cr = [x for x in input().split()]\n    K = int(cr[0])\n    cr = cr[1:]\n    if not all([x in city for x in cr]):\n        print('ERROR')\n        continue\n    if len(set(cr)) != len(cr):\n        print('ERROR')\n        continue\n    count = 0\n    for i in range(K - 1):\n        if (cr[i], cr[i + 1]) in Route:\n            count += Route[cr[i], cr[i + 1]]\n        else:\n            print('ERROR')\n            break\n    else:\n        print(count)", "input()\ngraph = {city: dict() for city in input().split()}\n\ndef traverseRoute(route):\n    (visited, distance) = (set(), 0)\n    if route[0] not in graph:\n        return 'ERROR'\n    visited.add(route[0])\n    for index in range(1, len(route)):\n        (source, target) = (route[index - 1], route[index])\n        if target not in graph or target in visited or target not in graph[source]:\n            return 'ERROR'\n        distance += graph[source][target]\n        visited.add(target)\n    return distance\nfor e in range(int(input())):\n    (source, target, cost) = input().split()\n    graph[source][target] = int(cost)\nfor r in range(int(input())):\n    print('{}'.format(traverseRoute(input().split()[1:])))"]