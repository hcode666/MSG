["MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n\n    def solve():\n        for i in range(n - 1, 0, -1):\n            if l[i] != -1 and l[i] != 1:\n                peeche_must_be = l[i] - 1\n                peeche = l[i - 1]\n                if peeche == -1:\n                    l[i - 1] = peeche_must_be\n                elif peeche != peeche_must_be:\n                    return 0\n        if l[0] != -1 and l[0] != 1:\n            return 0\n        ans = 1\n        k = 0\n        for i in range(1, n):\n            if l[i] == -1:\n                k += 1\n        return pow(2, k, MOD)\n    print(solve())", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n\n    def solve():\n        for i in range(n - 1, 0, -1):\n            if l[i] != -1 and l[i] != 1:\n                peeche_must_be = l[i] - 1\n                peeche = l[i - 1]\n                if peeche == -1:\n                    l[i - 1] = peeche_must_be\n                elif peeche != peeche_must_be:\n                    return 0\n        if l[0] != -1 and l[0] != 1:\n            return 0\n        ans = 1\n        k = 0\n        for i in range(1, n):\n            if l[i] == -1:\n                k += 1\n        return pow(2, k, MOD)\n    print(solve())", "MOD = 10 ** 9 + 7\nfor _ in range(int(input())):\n    n = int(input())\n    l = [int(i) for i in input().split()]\n\n    def solve():\n        for i in range(n - 1, 0, -1):\n            if l[i] != -1 and l[i] != 1:\n                peeche_must_be = l[i] - 1\n                peeche = l[i - 1]\n                if peeche == -1:\n                    l[i - 1] = peeche_must_be\n                elif peeche != peeche_must_be:\n                    return 0\n        if l[0] != -1 and l[0] != 1:\n            return 0\n        ans = 1\n        k = 0\n        for i in range(1, n):\n            if l[i] == -1:\n                k += 1\n        return pow(2, k, MOD)\n    print(solve())", "from sys import stdin, stdout, exit\n\ndef listInput():\n    return list(map(int, stdin.readline().split()))\n\ndef printBS(li):\n    n = len(li)\n    for i in range(n - 1):\n        stdout.write('%d ' % li[i])\n    if n != 0:\n        stdout.write('%d\\n' % li[n - 1])\n\ndef sin():\n    return stdin.readline().rstrip()\n\ndef inp():\n    return int(stdin.readline())\ncases = inp()\nfor _ in range(cases):\n    n = inp()\n    li = listInput()\n    for i in range(n - 2, -1, -1):\n        if li[i] == -1 and li[i + 1] > 1:\n            li[i] = li[i + 1] - 1\n    pa = True\n    for i in range(n - 1):\n        if li[i + 1] > 1 and li[i] + 1 != li[i + 1]:\n            pa = False\n            break\n    if not pa or li[0] not in (-1, 1):\n        print(0)\n        continue\n    if li[0] == -1:\n        li[0] = 1\n    MOD = 10 ** 9 + 7\n    ans = 1\n    for i in range(n):\n        if li[i] == -1:\n            ans = ans * 2 % MOD\n    print(ans)", "def fast_exp(k):\n    if k == 0:\n        return 1\n    elif k == 1:\n        return 2\n    elif k % 2 == 0:\n        x = fast_exp(k // 2) % 1000000007\n        return x * x % 1000000007\n    else:\n        x = fast_exp(k // 2) % 1000000007\n        return 2 * x * x % 1000000007\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    f = True\n    k = 0\n    if a[0] == -1:\n        a[0] = 1\n    elif a[0] > 1:\n        f = False\n    for i in range(n - 1, 0, -1):\n        if a[i] <= 1:\n            continue\n        elif a[i] != 1:\n            if a[i - 1] != a[i] - 1 and a[i - 1] != -1:\n                f = False\n                continue\n            elif a[i - 1] == -1:\n                a[i - 1] = a[i] - 1\n    if a[0] > 1:\n        f = False\n    if not f:\n        print(0)\n    else:\n        print(fast_exp(a.count(-1)))", "import io\nimport sys\n\ndef test_data(limit_n):\n    s = '9\\n6\\n1 1 2 -1 -1 2\\n3\\n-1 3 1\\n4\\n-1 -1 3 1\\n4\\n1 2 3 4\\n4\\n4 3 2 1\\n5\\n-1 -1 -1 -1 2\\n9\\n-1 -1 -1 -1 2 -1 -1 -1 3\\n11\\n-1 -1 -1 -1 2 -1 -1 -1 3 -1 -1\\n'\n    s += '{n}\\n{ints}\\n'.format(n=limit_n, ints=' '.join(['-1'] * limit_n))\n    return io.StringIO(s)\n\ndef get_input(source):\n    with source as lines:\n        t = int(next(lines))\n        for _ in range(t):\n            n = int(next(lines))\n            levels = list(map(int, next(lines).split(' ')))\n            yield (n, levels)\n\ndef calc(n, levels):\n    if levels[0] == -1:\n        levels[0] = 1\n    elif levels[0] != 1:\n        return 0\n    prev = 1\n    for i in range(len(levels), 0, -1):\n        i -= 1\n        level = levels[i]\n        if prev != 1:\n            expected = prev - 1\n            if level == -1:\n                level = expected\n                levels[i] = expected\n            elif level != expected:\n                return 0\n        prev = max(level, 1)\n    if prev != 1:\n        return 0\n    prev = 1\n    blanks = 0\n    solutions = 1\n    for level in levels:\n        if level != -1:\n            if blanks != 0:\n                solutions *= 2 ** blanks\n                blanks = 0\n            prev = level\n            continue\n        blanks += 1\n    if blanks != 0:\n        solutions *= 2 ** blanks\n    return solutions % (10 ** 9 + 7)\nlimit_n = 100000\ninp = test_data(limit_n) if '-test' in sys.argv else sys.stdin\nfor args in get_input(inp):\n    print(calc(*args))", "m = 10 ** 9 + 7\np2 = [1] * 100005\nfor i in range(1, len(p2)):\n    p2[i] = p2[i - 1] * 2 % m\nfor t in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a = [-100] + a + [1]\n    if a[1] == -1:\n        a[1] = 1\n    i = 1\n    ans = 1\n    while i < len(a) - 1:\n        if a[i] > -1:\n            if a[i] == 1 or a[i] == a[i - 1] + 1:\n                i += 1\n                continue\n            else:\n                ans = 0\n                break\n        j = i + 1\n        while a[j] == -1:\n            j += 1\n        gap = j - i\n        h1 = a[i - 1]\n        h2 = a[j]\n        if a[j] == 1:\n            ans = ans * p2[gap] % m\n        elif h2 == h1 + gap + 1:\n            pass\n        elif h2 > gap + 1:\n            ans = 0\n            break\n        else:\n            ans = ans * p2[gap + 1 - h2] % m\n        i = j + 1\n    print(ans)"]