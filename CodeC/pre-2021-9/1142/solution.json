["from collections import defaultdict\n\ndef binaryConcat(x, y):\n    xplusy = int(bin(x)[2:] + bin(y)[2:], 2)\n    yplusx = int(bin(y)[2:] + bin(x)[2:], 2)\n    return abs(xplusy - yplusx)\n\ndef solution(arr):\n    dmax = defaultdict(int)\n    dmin = defaultdict(int)\n    for i in range(len(arr)):\n        blen = len(bin(arr[i])) - 2\n        if dmax[blen] == 0 or dmax[blen] < arr[i]:\n            dmax[blen] = arr[i]\n        if dmin[blen] == 0 or dmin[blen] > arr[i]:\n            dmin[blen] = arr[i]\n    maxv = -float('inf')\n    for i in dmax.keys():\n        for j in dmin.keys():\n            bcat = binaryConcat(dmax[i], dmin[j])\n            if bcat > maxv:\n                maxv = bcat\n    return maxv\nt = int(input())\nfor _ in range(t):\n    n = input()\n    arr = list(map(int, input().split()))\n    print(solution(arr))", "from collections import defaultdict\n\ndef binaryConcat(x, y):\n    xplusy = int(bin(x)[2:] + bin(y)[2:], 2)\n    yplusx = int(bin(y)[2:] + bin(x)[2:], 2)\n    return abs(xplusy - yplusx)\n\ndef solution(arr):\n    dmax = defaultdict(int)\n    dmin = defaultdict(int)\n    for i in range(len(arr)):\n        blen = len(bin(arr[i])) - 2\n        if dmax[blen] == 0 or dmax[blen] < arr[i]:\n            dmax[blen] = arr[i]\n        if dmin[blen] == 0 or dmin[blen] > arr[i]:\n            dmin[blen] = arr[i]\n    maxv = -float('inf')\n    for i in dmax.keys():\n        for j in dmin.keys():\n            bcat = binaryConcat(dmax[i], dmin[j])\n            if bcat > maxv:\n                maxv = bcat\n    return maxv\nt = int(input())\nfor _ in range(t):\n    n = input()\n    arr = list(map(int, input().split()))\n    print(solution(arr))", "from collections import defaultdict\n\ndef binaryConcat(x, y):\n    xplusy = int(bin(x)[2:] + bin(y)[2:], 2)\n    yplusx = int(bin(y)[2:] + bin(x)[2:], 2)\n    return abs(xplusy - yplusx)\n\ndef solution(arr):\n    dmax = defaultdict(int)\n    dmin = defaultdict(int)\n    for i in range(len(arr)):\n        blen = len(bin(arr[i])) - 2\n        if dmax[blen] == 0 or dmax[blen] < arr[i]:\n            dmax[blen] = arr[i]\n        if dmin[blen] == 0 or dmin[blen] > arr[i]:\n            dmin[blen] = arr[i]\n    maxv = -float('inf')\n    for i in dmax.keys():\n        for j in dmin.keys():\n            bcat = binaryConcat(dmax[i], dmin[j])\n            if bcat > maxv:\n                maxv = bcat\n    return maxv\nt = int(input())\nfor _ in range(t):\n    n = input()\n    arr = list(map(int, input().split()))\n    print(solution(arr))", "from collections import defaultdict\n\ndef binaryConcat(x, y):\n    xplusy = int(bin(x)[2:] + bin(y)[2:], 2)\n    yplusx = int(bin(y)[2:] + bin(x)[2:], 2)\n    return abs(xplusy - yplusx)\n\ndef solution(arr):\n    dmax = defaultdict(int)\n    dmin = defaultdict(int)\n    for i in range(len(arr)):\n        blen = len(bin(arr[i])) - 2\n        if dmax[blen] == 0 or dmax[blen] < arr[i]:\n            dmax[blen] = arr[i]\n        if dmin[blen] == 0 or dmin[blen] > arr[i]:\n            dmin[blen] = arr[i]\n    maxv = -float('inf')\n    for i in dmax.keys():\n        for j in dmin.keys():\n            bcat = binaryConcat(dmax[i], dmin[j])\n            if bcat > maxv:\n                maxv = bcat\n    return maxv\nt = int(input())\nfor _ in range(t):\n    n = input()\n    arr = list(map(int, input().split()))\n    print(solution(arr))", "from collections import defaultdict\n\ndef binaryConcat(x, y):\n    xplusy = int(bin(x)[2:] + bin(y)[2:], 2)\n    yplusx = int(bin(y)[2:] + bin(x)[2:], 2)\n    return abs(xplusy - yplusx)\n\ndef solution(arr):\n    dmax = defaultdict(int)\n    dmin = defaultdict(int)\n    for i in range(len(arr)):\n        blen = len(bin(arr[i])) - 2\n        if dmax[blen] == 0 or dmax[blen] < arr[i]:\n            dmax[blen] = arr[i]\n        if dmin[blen] == 0 or dmin[blen] > arr[i]:\n            dmin[blen] = arr[i]\n    maxv = -float('inf')\n    for i in dmax.keys():\n        for j in dmin.keys():\n            bcat = binaryConcat(dmax[i], dmin[j])\n            if bcat > maxv:\n                maxv = bcat\n    return maxv\nt = int(input())\nfor _ in range(t):\n    n = input()\n    arr = list(map(int, input().split()))\n    print(solution(arr))", "(minimumValue, maximumValue) = (-1000000000, 1000000000)\n\ndef solve(arr, N):\n    (maxx, minn) = ([minimumValue] * 32, [maximumValue] * 32)\n    for i in range(N):\n        binaryLength = 0\n        for j in range(31, -1, -1):\n            bit = arr[i] & 1 << j\n            if bit > 0 or binaryLength > 0:\n                binaryLength += 1\n        minn[binaryLength] = min(minn[binaryLength], arr[i])\n        maxx[binaryLength] = max(maxx[binaryLength], arr[i])\n    ans = 0\n    for i in range(32):\n        for j in range(32):\n            if minn[j] == maximumValue or maxx[i] == minimumValue:\n                continue\n            value = ((1 << j) - 1) * maxx[i] - ((1 << i) - 1) * minn[j]\n            ans = max(ans, value)\n    print(ans)\nT = int(input())\nfor _ in range(T):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    solve(arr, N)", "import sys\nfor _ in range(int(input())):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    pw = [1] * 31\n    for i in range(1, 31):\n        pw[i] = 2 * pw[i - 1]\n    mx = [0] * 32\n    mn = [sys.maxsize] * 32\n    for j in arr:\n        l = len(bin(j)[2:])\n        mx[l] = max(mx[l], j)\n        mn[l] = min(mn[l], j)\n    ans = 0\n    for j in range(1, 32):\n        for k in range(1, 32):\n            x = mx[j]\n            y = mn[k]\n            if x == 0 or y == sys.maxsize:\n                continue\n            ans = max(ans, abs(x * (pw[k] - 1) - y * (pw[j] - 1)))\n    print(ans)", "import sys\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    pw = [1] * 31\n    for i in range(1, 31):\n        pw[i] = 2 * pw[i - 1]\n    mx = [0] * 32\n    mn = [sys.maxsize] * 32\n    for j in arr:\n        l = len(bin(j)[2:])\n        mx[l] = max(mx[l], j)\n        mn[l] = min(mn[l], j)\n    ans = 0\n    for j in range(1, 32):\n        for k in range(1, 32):\n            x = mx[j]\n            y = mn[k]\n            if x == 0 or y == sys.maxsize:\n                continue\n            ans = max(ans, abs(x * (pw[k] - 1) - y * (pw[j] - 1)))\n    print(ans)", "def fun(x, minimum, y, maximum):\n    a = x * 2 ** minimum - y * 2 ** maximum + (y - x)\n    return a\nimport math\nfor _ in range(int(input())):\n    n = int(input())\n    li = list(map(int, input().split()))\n    ma = [0]\n    mi = [0]\n    l = 1\n    for i in range(31):\n        l = l * 2\n        ma.append(0)\n        mi.append(l)\n    for j in range(n):\n        ln = math.ceil(math.log(li[j] + 1) / math.log(2))\n        ma[ln] = max(li[j], ma[ln])\n        mi[ln] = min(li[j], mi[ln])\n    for i in range(1, 32):\n        if ma[i] != 0:\n            x = ma[i]\n            maximum = i\n            break\n    for i in range(31, 0, -1):\n        if mi[i] != 2 ** i:\n            y = mi[i]\n            minimum = i\n            break\n    ans = fun(x, minimum, y, maximum)\n    for i in range(1, 32):\n        if ma[i] != 0:\n            x = ma[i]\n            maximum = i\n            for i in range(31, 0, -1):\n                if mi[i] != 2 ** i:\n                    y = mi[i]\n                    minimum = i\n                    ans = max(ans, fun(x, minimum, y, maximum))\n    print(ans)", "from math import log2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(input().split())\n    if n == 1:\n        print(0)\n    else:\n        x = [0] * 31\n        y = [2 ** 30] * 31\n        for i in a:\n            s = bin(int(i))\n            l = len(s) - 2\n            x[l] = max([x[l], int(i)])\n            y[l] = min([y[l], int(i)])\n        ans = -1000\n        for i in x:\n            if i == 0:\n                continue\n            for j in y:\n                if j == 2 ** 30:\n                    continue\n                (pi, pj) = (int(log2(i)), int(log2(j)))\n                (x1, y1) = (i, j)\n                x1 = x1 << pj + 1\n                y1 = y1 << pi + 1\n                x1 += j\n                y1 += i\n                if x1 - y1 > ans:\n                    ans = x1 - y1\n        print(ans)", "def strbin(x, y):\n    binx = bin(x)[2:]\n    biny = bin(y)[2:]\n    xplusy = binx + biny\n    yplusx = biny + binx\n    return int(xplusy, 2) - int(yplusx, 2)\ntest = int(input())\nfor _ in range(test):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    if n == 1:\n        b.append(a[0])\n    else:\n        a.sort()\n        if n >= 10 ** 3:\n            for i in range(n - 1):\n                b.append(strbin(a[n - 1], a[i]))\n        else:\n            for i in range(n):\n                for j in range(n):\n                    if i == j:\n                        continue\n                    else:\n                        b.append(strbin(a[i], a[j]))\n    print(max(b))", "def strbin(x, y):\n    binx = bin(x)[2:]\n    biny = bin(y)[2:]\n    xplusy = binx + biny\n    yplusx = biny + binx\n    return int(xplusy, 2) - int(yplusx, 2)\nT = int(input())\nfor i in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    if n == 1:\n        b.append(a[0])\n    else:\n        a.sort()\n        if n >= 10 ** 3:\n            for i in range(n - 1):\n                b.append(strbin(a[n - 1], a[i]))\n        else:\n            for i in range(n):\n                for j in range(n):\n                    if i == j:\n                        continue\n                    else:\n                        b.append(strbin(a[i], a[j]))\n    print(max(b))", "def ans(x, y):\n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    return int(x + y, 2) - int(y + x, 2)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    if n <= 800:\n        x = max([ans(i, j) for j in a for i in a])\n        print(x)\n    else:\n        y = max(a)\n        x = max([abs(ans(i, y)) for i in a])\n        print(x)", "import math\n\ndef leng(n):\n    return math.floor(math.log(n, 2)) + 1\n\ndef fun(a, b):\n    (x, y) = (leng(a), leng(b))\n    aplusb = a << y | b\n    bplusa = b << x | a\n    return abs(aplusb - bplusa)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    m = -1\n    if n <= 500:\n        for i in range(n - 1):\n            ans = [fun(arr[i], j) for j in arr[i + 1:]]\n            ans_m = max(ans)\n            m = max(ans_m, m)\n        print(m)\n    else:\n        m = max(arr)\n        ans = [fun(m, i) for i in arr]\n        print(max(ans))", "def bincon(a, b):\n    X = bin(a).replace('0b', '')\n    Y = bin(b).replace('0b', '')\n    XpY = int(X + Y, 2)\n    YpX = int(Y + X, 2)\n    return max(XpY - YpX, YpX - XpY)\nfor _ in range(int(input())):\n    n = int(input())\n    llist = list(map(int, input().split()))\n    ans = 0\n    if n < 1000:\n        for u in range(n):\n            for j in range(n):\n                ans = max(ans, bincon(llist[u], llist[j]))\n        print(ans)\n    else:\n        llist.sort()\n        ans = bincon(llist[0], llist[n - 1])\n        for u in range(n):\n            ans = max(ans, bincon(llist[u], llist[n - 1]))\n        print(ans)", "def bincon(a, b):\n    X = bin(a).replace('0b', '')\n    Y = bin(b).replace('0b', '')\n    XpY = int(X + Y, 2)\n    YpX = int(Y + X, 2)\n    return max(XpY - YpX, YpX - XpY)\nfor _ in range(int(input())):\n    n = int(input())\n    llist = list(map(int, input().split()))\n    ans = 0\n    if n < 1000:\n        for u in range(n):\n            for j in range(n):\n                ans = max(ans, bincon(llist[u], llist[j]))\n        print(ans)\n    else:\n        llist.sort()\n        ans = bincon(llist[0], llist[n - 1])\n        for u in range(n):\n            ans = max(ans, bincon(llist[u], llist[n - 1]))\n        print(ans)", "import math\nfrom collections import defaultdict\n\ndef binaryconc(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    a1 = int(apb, 2)\n    a2 = int(bpa, 2)\n    return a1 - a2\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    a = [int(x) for x in input().split()][:n]\n    z = []\n    if n <= 500:\n        for b in range(len(a)):\n            for c in range(len(a)):\n                z.append(binaryconc(a[b], a[c]))\n        print(max(z))\n    else:\n        count = 0\n        tmp = max(a)\n        for y in range(len(a)):\n            z.append(binaryconc(tmp, a[y]))\n        print(max(z))", "t = int(input())\n\ndef func(a, b):\n    bin_a = bin(a).replace('0b', '')\n    bin_b = bin(b).replace('0b', '')\n    bin_X = bin_a + bin_b\n    bin_y = bin_b + bin_a\n    p = int(bin_X, 2)\n    q = int(bin_y, 2)\n    return max(p - q, q - p)\nwhile t != 0:\n    n = int(input())\n    a = list(map(int, input().split()))\n    ans = 0\n    if n < 1000:\n        for i in range(n):\n            for j in range(n):\n                ans = max(ans, func(a[i], a[j]))\n    else:\n        a = sorted(a)\n        ans = func(a[0], a[n - 1])\n        for i in range(n):\n            ans = max(ans, func(a[i], a[n - 1]))\n    print(ans)\n    t -= 1", "import sys\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    arr = [int(j) for j in input().split()]\n    pw = [1] * 31\n    for i in range(1, 31):\n        pw[i] = 2 * pw[i - 1]\n    mx = [0] * 32\n    mn = [sys.maxsize] * 32\n    for j in arr:\n        l = len(bin(j)[2:])\n        mx[l] = max(mx[l], j)\n        mn[l] = min(mn[l], j)\n    ans = 0\n    for j in range(1, 32):\n        for k in range(1, 32):\n            x = mx[j]\n            y = mn[k]\n            if x == 0 or y == sys.maxsize:\n                continue\n            ans = max(ans, abs(x * (pw[k] - 1) - y * (pw[j] - 1)))\n    print(ans)", "def Bincon(a, b):\n    X = bin(a).replace('0b', '')\n    Y = bin(b).replace('0b', '')\n    XpY = int(X + Y, 2)\n    YpX = int(Y + X, 2)\n    return max(XpY - YpX, YpX - XpY)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    X = bin(a[n - 1]).replace('0b', '')\n    ans = 0\n    if n < 1000:\n        for i in range(n):\n            for j in range(n):\n                ans = max(ans, Bincon(a[i], a[j]))\n        print(ans)\n    else:\n        a.sort()\n        ans = Bincon(a[0], a[n - 1])\n        for i in range(n):\n            ans = max(ans, Bincon(a[i], a[n - 1]))\n        print(ans)", "def Bincon(a, b):\n    X = bin(a).replace('0b', '')\n    Y = bin(b).replace('0b', '')\n    XpY = int(X + Y, 2)\n    YpX = int(Y + X, 2)\n    return max(XpY - YpX, YpX - XpY)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort()\n    b = []\n    X = bin(a[n - 1]).replace('0b', '')\n    ans = Bincon(a[0], a[n - 1])\n    if n < 1000:\n        for i in range(n):\n            for j in range(n):\n                ans = max(ans, Bincon(a[i], a[j]))\n        print(ans)\n    else:\n        for i in range(n):\n            ans = max(ans, Bincon(a[i], a[n - 1]))\n        print(ans)", "def binfun(x, y):\n    binx = str(bin(x))\n    binx = binx[2:]\n    biny = str(bin(y))\n    biny = biny[2:]\n    binxpy = binx + biny\n    binypx = biny + binx\n    return abs(int(binxpy, 2) - int(binypx, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 0\n    t = max(a)\n    if n <= 500:\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                m = max(binfun(a[j], a[i]), m)\n        print(m)\n    else:\n        for i in range(n):\n            m = max(binfun(t, a[i]), m)\n        print(m)", "import math\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "def concat(a, b):\n    anum = bin(a).replace('0b', '')\n    bnum = bin(b).replace('0b', '')\n    bXplusY = anum + bnum\n    bYplusX = bnum + anum\n    x = int(bXplusY, 2)\n    y = int(bYplusX, 2)\n    return x - y\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    k = []\n    if n <= 100:\n        for i in range(n):\n            for j in range(n):\n                k.append(concat(ar[i], ar[j]))\n        print(max(k))\n    else:\n        t = max(ar)\n        for i in range(n):\n            k.append(concat(t, ar[i]))\n        print(max(k))", "def binfun(x, y):\n    binx = str(bin(x))\n    binx = binx[2:]\n    biny = str(bin(y))\n    biny = biny[2:]\n    binxpy = binx + biny\n    binypx = biny + binx\n    return abs(int(binxpy, 2) - int(binypx, 2))\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    m = 0\n    t = max(a)\n    if n <= 500:\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                m = max(binfun(a[j], a[i]), m)\n        print(m)\n    else:\n        for i in range(n):\n            m = max(binfun(t, a[i]), m)\n        print(m)", "for i in range(int(input())):\n    powers = [[None, None, None, None] for x in range(30)]\n    n = int(input())\n    nums = [int(x) for x in input().split()]\n    for i in nums:\n        bi_num = bin(i)[2:]\n        l = len(bi_num) - 1\n        if powers[l][0] == None or powers[l][0] > i:\n            powers[l][0] = i\n            powers[l][1] = l\n        if powers[l][2] == None or powers[l][2] < i:\n            powers[l][2] = i\n            powers[l][3] = l\n    res = 0\n    for j in range(30):\n        for k in range(30):\n            if powers[j][2] != None and powers[k][0] != None:\n                tr = powers[j][2] * 2 ** (powers[k][1] + 1) + powers[k][0] - powers[k][0] * 2 ** (powers[j][3] + 1) - powers[j][2]\n                if tr > res:\n                    res = tr\n    print(res)", "def concat(a, b):\n    anum = bin(a).replace('0b', '')\n    bnum = bin(b).replace('0b', '')\n    bXplusY = anum + bnum\n    bYplusX = bnum + anum\n    x = int(bXplusY, 2)\n    y = int(bYplusX, 2)\n    return x - y\nT = int(input())\nfor _ in range(T):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    k = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                k.append(concat(ar[i], ar[j]))\n        print(max(k))\n    else:\n        t = max(ar)\n        for i in range(n):\n            k.append(concat(t, ar[i]))\n        print(max(k))", "def check(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    tmp = max(a)\n    b = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                b.append(check(a[i], a[j]))\n    else:\n        for i in range(n):\n            b.append(check(tmp, a[i]))\n    print(max(b))", "def check(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                b.append(check(a[i], a[j]))\n    else:\n        tmp = max(a)\n        for i in range(n):\n            b.append(check(tmp, a[i]))\n    print(max(b))", "def check(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nfor _ in range(int(input())):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(check(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(check(tmp, a[x]))\n        print(max(binc))", "def binary(X, Y):\n    str_x = bin(X)[2:]\n    str_y = bin(Y)[2:]\n    XplusY = str_x + str_y\n    YplusX = str_y + str_x\n    Xnew = int('0b' + XplusY, 2)\n    Ynew = int('0b' + YplusX, 2)\n    return abs(Xnew - Ynew)\nt = int(input())\nfor i in range(0, t):\n    n = int(input())\n    list1 = list(map(int, input().split()))\n    max1 = 0\n    if n <= 500:\n        for i in range(0, len(list1) - 1):\n            for j in range(i + 1, len(list1)):\n                x = binary(list1[i], list1[j])\n                if x > max1:\n                    max1 = x\n                else:\n                    continue\n    else:\n        max2 = max(list1)\n        for k in range(0, len(list1)):\n            x = binary(list1[k], max2)\n            if x > max1:\n                max1 = x\n            else:\n                continue\n    print(max1)", "def convert(a, b):\n    ab = bin(a).replace('0b', '')\n    ba = bin(b).replace('0b', '')\n    aba = str(ab) + str(ba)\n    bab = str(ba) + str(ab)\n    x = int(aba, 2)\n    y = int(bab, 2)\n    return x - y\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    b = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                b.append(convert(a[i], a[j]))\n        print(max(b))\n    else:\n        tmp = max(a)\n        for i in range(n):\n            b.append(convert(tmp, a[i]))\n        print(max(b))", "for tcase in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    b = [a[i].bit_length() for i in range(n)]\n    c = [a[i] for i in range(n) if i == 0 or i == n - 1 or b[i - 1] < b[i + 1]]\n    d = [c[i].bit_length() for i in range(len(c))]\n    print(max([abs((c[i] << d[j]) + c[j] - (c[j] << d[i]) - c[i]) for i in range(len(c)) for j in range(i)]))", "for tcase in range(int(input())):\n    n = int(input())\n    a = sorted(map(int, input().split()))\n    b = [a[i].bit_length() for i in range(n)]\n    c = [a[i] for i in range(n) if i == 0 or i == n - 1 or b[i - 1] < b[i + 1]]\n    print(max([abs((c[i] << c[j].bit_length()) + c[j] - (c[j] << c[i].bit_length()) - c[i]) for i in range(len(c)) for j in range(i)]))", "import math\n\ndef geta(a, b, ma, mb):\n    x = (a << mb) + b\n    y = (b << ma) + a\n    return abs(x - y)\n\ndef getn(a):\n    x = math.log2(a)\n    return int(x + 1)\n\ndef solve():\n    n = int(input())\n    a = list(map(int, input().split()))\n    v = [[] for _ in range(32)]\n    for i in range(n):\n        x = getn(a[i])\n        v[x].append(a[i])\n    for i in v:\n        i.sort()\n    ans = -1\n    for i in range(1, 32):\n        for j in range(1, 32):\n            if not v[i] or not v[j]:\n                continue\n            ans = max(ans, geta(v[i][0], v[j][-1], i, j))\n    print(ans)\nt = int(input())\nwhile t > 0:\n    solve()\n    t -= 1", "import math\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        b = bin(a[i])[2:]\n        lb = len(b)\n        if lb not in d1:\n            d1[lb] = a[i]\n        else:\n            d1[lb] = max(d1[lb], a[i])\n    for i in range(n):\n        b = bin(a[i])[2:]\n        lb = len(b)\n        if lb not in d2:\n            d2[lb] = a[i]\n        else:\n            d2[lb] = min(d2[lb], a[i])\n    ans = -1\n    for i in d1:\n        for j in d2:\n            A = 2 ** j - 1\n            B = 2 ** i - 1\n            ans = max(abs(A * d1[i] - B * d2[j]), ans)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        b = bin(a[i])[2:]\n        lb = len(b)\n        if lb not in d1:\n            d1[lb] = a[i]\n        else:\n            d1[lb] = max(d1[lb], a[i])\n    for i in range(n):\n        b = bin(a[i])[2:]\n        lb = len(b)\n        if lb not in d2:\n            d2[lb] = a[i]\n        else:\n            d2[lb] = min(d2[lb], a[i])\n    ans = -1\n    for i in d1:\n        for j in d2:\n            A = 2 ** j - 1\n            B = 2 ** i - 1\n            ans = max(abs(A * d1[i] - B * d2[j]), ans)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    for i in a:\n        b.append(0)\n        while i > 0:\n            b[-1] += 1\n            i = i >> 1\n    ans = -1\n    if n >= 500:\n        j = a.index(max(a))\n        for i in range(n):\n            x = a[i] * 2 ** b[j] + a[j]\n            y = a[j] * 2 ** b[i] + a[i]\n            ans = max(x - y, ans, y - x)\n    else:\n        for i in range(n):\n            for j in range(i, n):\n                x = a[i] * 2 ** b[j] + a[j]\n                y = a[j] * 2 ** b[i] + a[i]\n                ans = max(x - y, ans, y - x)\n    print(ans)", "T = int(input())\nfor _ in range(T):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d1 = {}\n    d2 = {}\n    for i in range(n):\n        b = bin(a[i])[2:]\n        lb = len(b)\n        if lb not in d1:\n            d1[lb] = a[i]\n        else:\n            d1[lb] = max(d1[lb], a[i])\n    for i in range(n):\n        b = bin(a[i])[2:]\n        lb = len(b)\n        if lb not in d2:\n            d2[lb] = a[i]\n        else:\n            d2[lb] = min(d2[lb], a[i])\n    ans = -1\n    for i in d1:\n        for j in d2:\n            A = 2 ** j - 1\n            B = 2 ** i - 1\n            ans = max(abs(A * d1[i] - B * d2[j]), ans)\n    print(ans)", "import math\n\ndef bincon(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    A = int(apb, 2)\n    B = int(bpa, 2)\n    return A - B\nfor _ in range(int(input())):\n    N = int(input())\n    lon = list(map(int, input().split()))\n    conli = []\n    if N <= 500:\n        for i in lon:\n            for j in lon:\n                conli.append(bincon(i, j))\n        print(max(conli))\n    else:\n        a = max(lon)\n        for i in lon:\n            conli.append(bincon(a, i))\n        print(max(conli))", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    max_bit = [0] * 32\n    min_bit = [10 ** 9] * 32\n    for i in range(n):\n        b = len(bin(a[i])) - 2\n        max_bit[b] = max(max_bit[b], a[i])\n        min_bit[b] = min(min_bit[b], a[i])\n    ans = -1\n    for i in range(1, 32):\n        for j in range(1, 32):\n            X = max_bit[i]\n            Y = min_bit[j]\n            if X == 0 or Y == 10 ** 9:\n                continue\n            else:\n                d = X * (2 ** j - 1) - Y * (2 ** i - 1)\n                ans = max(ans, d)\n    print(ans)", "import math\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "t = int(input())\nwhile t:\n    t = t - 1\n    n = int(input())\n    l = list(map(int, input().split()))\n    d = []\n    m = 0\n    ma = max(l)\n    mb = bin(ma)\n    mb = mb[2:]\n    if n < 1000:\n        for i in l:\n            b = bin(i)\n            d.append(b[2:])\n        for i in range(n):\n            for j in range(i + 1, n):\n                x = d[i]\n                y = d[j]\n                x1 = x + y\n                y1 = y + x\n                x1 = int(x1, 2)\n                y1 = int(y1, 2)\n                if m < abs(x1 - y1):\n                    m = abs(x1 - y1)\n        print(m)\n    else:\n        for i in l:\n            b = bin(i)\n            d.append(b[2:])\n        for i in range(n):\n            x = d[i]\n            y = mb\n            x1 = x + y\n            y1 = y + x\n            x1 = int(x1, 2)\n            y1 = int(y1, 2)\n            if m < abs(x1 - y1):\n                m = abs(x1 - y1)\n        print(m)", "def binfun(x, y):\n    binX = bin(x).replace('0b', '')\n    binY = bin(y).replace('0b', '')\n    binXplusY = binX + binY\n    binYplusX = binY + binX\n    XplusY = int(binXplusY, 2)\n    YplusX = int(binYplusX, 2)\n    return abs(XplusY - YplusX)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    ans = 0\n    tmp = l[n - 1]\n    for x in range(n):\n        ans = max(ans, binfun(tmp, l[x]))\n    tmp1 = l[n - 2]\n    ans1 = 0\n    for x in range(n):\n        ans1 = max(ans1, binfun(tmp1, l[x]))\n    print(max(ans, ans1))", "def binfun(x, y):\n    binX = bin(x).replace('0b', '')\n    binY = bin(y).replace('0b', '')\n    binXplusY = binX + binY\n    binYplusX = binY + binX\n    XplusY = int(binXplusY, 2)\n    YplusX = int(binYplusX, 2)\n    return abs(XplusY - YplusX)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    l = list(map(int, input().split()))\n    l = sorted(l)\n    s = 0\n    if n <= 400:\n        for i in range(len(l)):\n            for j in range(i + 1, len(l)):\n                s = max(s, binfun(l[i], l[j]))\n        print(s)\n    else:\n        ans = 0\n        tmp = max(l)\n        for x in range(n):\n            ans = max(ans, binfun(tmp, l[x]))\n        print(ans)", "from math import log\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    return (a << binsize(b)) + b - ((b << binsize(a)) + a)\n\ndef binsize(n):\n    if n == 0:\n        return 0\n    return int(log(n, 2)) + 1\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(key=lambda x: (binsize(x), -1 * x))\n    dmax = defaultdict(lambda : -1)\n    dmin = defaultdict()\n    for i in a:\n        if dmax[binsize(i)] == -1:\n            dmax[binsize(i)] = i\n        dmin[binsize(i)] = i\n    maxsize = binsize(a[-1])\n    minsize = binsize(a[0])\n    ans = 0\n    for i in range(minsize, maxsize + 1):\n        for j in range(minsize, maxsize + 1):\n            if dmax[i] != -1 and dmax[j] != -1:\n                ans = max(ans, binconcat(dmax[i], dmin[j]))\n    print(ans)", "def BinFun(x, y):\n    binx = bin(x).replace('0b', '')\n    biny = bin(y).replace('0b', '')\n    intxy = int(binx + biny, 2)\n    intyx = int(biny + binx, 2)\n    diff = abs(intxy - intyx)\n    return diff\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    rarr = []\n    if n < 500:\n        for a in range(n):\n            for b in range(n):\n                rarr.append(BinFun(l[a], l[b]))\n        print(max(rarr))\n    else:\n        ans = 0\n        tmp = max(l)\n        for x in range(n):\n            rarr.append(BinFun(tmp, l[x]))\n        print(max(rarr))", "def fun(x, y):\n    lx = len(bin(x)[2:])\n    ly = len(bin(y)[2:])\n    var = x * pow(2, ly) + y - (y * pow(2, lx) + x)\n    return var\nfor _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    dic = {}\n    for i in range(n):\n        var = len(bin(ar[i])[2:]) - 1\n        if var in dic:\n            dic[var].append(ar[i])\n        else:\n            dic[var] = [ar[i]]\n    for i in dic:\n        dic[i].sort()\n    m = None\n    for i in dic:\n        for j in dic:\n            val = fun(dic[i][-1], dic[j][0])\n            if m == None or m < val:\n                m = val\n    print(m)", "def binarycon(x, y):\n    binx = bin(x)[2:]\n    biny = bin(y)[2:]\n    binxplsy = binx + biny\n    binyplsx = biny + binx\n    xplsy = int(binxplsy, 2)\n    yplsx = int(binyplsx, 2)\n    return xplsy - yplsx\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    rarr = []\n    if n < 500:\n        for a in range(n):\n            for b in range(n):\n                rarr.append(binarycon(l[a], l[b]))\n        print(max(rarr))\n    else:\n        ans = 0\n        tmp = max(l)\n        for x in range(n):\n            rarr.append(binarycon(tmp, l[x]))\n        print(max(rarr))", "def binarycon(x, y):\n    binx = bin(x)[2:]\n    biny = bin(y)[2:]\n    binxplsy = binx + biny\n    binyplsx = biny + binx\n    xplsy = int(binxplsy, 2)\n    yplsx = int(binyplsx, 2)\n    return xplsy - yplsx\nfor i in range(int(input())):\n    n = int(input())\n    l = list(map(int, input().split()))\n    rarr = []\n    if n < 500:\n        for a in range(n):\n            for b in range(n):\n                rarr.append(binarycon(l[a], l[b]))\n        print(max(rarr))\n    else:\n        ans = 0\n        tmp = max(l)\n        for x in range(n):\n            rarr.append(binarycon(tmp, l[x]))\n        print(max(rarr))", "import math\n\ndef bincon(a, b):\n    abin = bin(a)[2:]\n    bbin = bin(b)[2:]\n    apb = abin + bbin\n    bpa = bbin + abin\n    return abs(int(apb, 2) - int(bpa, 2))\nfor _ in range(int(input())):\n    N = int(input())\n    lon = list(map(int, input().split()))\n    conli = []\n    if N <= 500:\n        for i in lon:\n            for j in lon:\n                conli.append(bincon(i, j))\n        print(max(conli))\n    else:\n        a = max(lon)\n        for i in lon:\n            conli.append(bincon(a, i))\n        print(max(conli))", "import math\n\ndef bincon(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    A = int(apb, 2)\n    B = int(bpa, 2)\n    return A - B\nfor _ in range(int(input())):\n    N = int(input())\n    lon = list(map(int, input().split()))\n    conli = []\n    if N <= 500:\n        for i in lon:\n            for j in lon:\n                conli.append(bincon(i, j))\n        print(max(conli))\n    else:\n        a = max(lon)\n        for i in lon:\n            conli.append(bincon(a, i))\n        print(max(conli))", "import math\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    l = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                l.append(binconcat(a[i], a[j]))\n        print(max(l))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in a:\n            l.append(binconcat(tmp, x))\n        print(max(l))", "import sys\nfrom functools import lru_cache, cmp_to_key\nfrom heapq import merge, heapify, heappop, heappush, nsmallest\nfrom math import ceil, floor, gcd, fabs, factorial, fmod, sqrt, inf, log\nfrom collections import defaultdict as dd, deque, Counter as C\nfrom itertools import combinations as comb, permutations as perm\nfrom bisect import bisect_left as bl, bisect_right as br, bisect\nfrom time import perf_counter\nfrom fractions import Fraction\nfrom decimal import Decimal\nmod = pow(10, 9) + 7\nmod2 = 998244353\n\ndef data():\n    return sys.stdin.readline().strip()\n\ndef out(var, end='\\n'):\n    sys.stdout.write(str(var) + end)\n\ndef outa(*var, end='\\n'):\n    sys.stdout.write(' '.join(map(str, var)) + end)\n\ndef l():\n    return list(sp())\n\ndef sl():\n    return list(ssp())\n\ndef sp():\n    return map(int, data().split())\n\ndef ssp():\n    return map(str, data().split())\n\ndef l1d(n, val=0):\n    return [val for i in range(n)]\n\ndef l2d(n, m, val=0):\n    return [l1d(n, val) for j in range(m)]\nfor _ in range(int(data())):\n    n = int(data())\n    arr = l()\n    answer = 0\n    d = dd(list)\n    for i in range(n):\n        for j in range(32, -1, -1):\n            if arr[i] & 1 << j:\n                d[j].append(arr[i])\n                break\n    for i in range(33):\n        d[i].sort()\n    for i in range(32, -1, -1):\n        for j in range(32, -1, -1):\n            if not d[i] or not d[j]:\n                continue\n            (b1, b2) = (bin(d[i][0])[2:], bin(d[j][-1])[2:])\n            (t1, t2) = (int(b1 + b2, 2), int(b2 + b1, 2))\n            answer = max(answer, abs(t1 - t2))\n    out(answer)", "import sys\nfrom collections import defaultdict as dd\ninput = sys.stdin.readline\n\ndef msb(n):\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n |= n >> 32\n    n |= n >> 64\n    return n - (n >> 1)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = dd(list)\n    for i in a:\n        d[msb(i)] += [i]\n    for i in d.keys():\n        d[i].sort()\n    ans = -1\n    for i in d.keys():\n        for j in d.keys():\n            if i == j and len(d[i]) < 2:\n                continue\n            else:\n                ans = max(ans, (2 * j - 1) * d[i][-1] - (2 * i - 1) * d[j][0])\n    print(ans)", "def binconcat(a, b):\n    abin = bin(a)\n    bbin = bin(b)\n    abin = abin[2:]\n    bbin = bbin[2:]\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    binc = []\n    if n <= 100:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "def binconcat(a, b):\n    abin = bin(a)\n    bbin = bin(b)\n    abin = abin[2:]\n    bbin = bbin[2:]\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "def binConcatenate(x, y):\n    x = bin(x)[2:]\n    y = bin(y)[2:]\n    a = int(x + y, 2)\n    b = int(y + x, 2)\n    return abs(a - b)\nt = int(input())\nwhile t:\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ans = []\n    temp = max(arr)\n    if n < 500:\n        for i in range(n):\n            for j in range(n):\n                ans.append(binConcatenate(arr[i], arr[j]))\n        print(max(ans))\n    else:\n        for i in range(n):\n            ans.append(binConcatenate(temp, arr[i]))\n        print(max(ans))\n    t -= 1", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    max_bit = [0] * 32\n    min_bit = [10 ** 9] * 32\n    for i in range(n):\n        b = len(bin(a[i])) - 2\n        max_bit[b] = max(max_bit[b], a[i])\n        min_bit[b] = min(min_bit[b], a[i])\n    ans = -1\n    for i in range(1, 32):\n        for j in range(1, 32):\n            X = max_bit[i]\n            Y = min_bit[j]\n            if X == 0 or Y == 10 ** 9:\n                continue\n            else:\n                d = X * (2 ** j - 1) - Y * (2 ** i - 1)\n                ans = max(ans, d)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    b = []\n    for i in range(n):\n        b.append(bin(a[i]).replace('0b', ''))\n    c = b[0]\n    d = b[0]\n    for i in range(n):\n        p = b[i] + c\n        q = c + b[i]\n        p = int(p, 2)\n        q = int(q, 2)\n        if abs(p - q) > count:\n            d = b[i]\n            count = abs(p - q)\n    for i in range(n):\n        p = b[i] + d\n        q = d + b[i]\n        p = int(p, 2)\n        q = int(q, 2)\n        if abs(p - q) > count:\n            count = abs(p - q)\n    print(count)", "for _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    count = 0\n    b = []\n    for i in range(n):\n        b.append(bin(a[i]).replace('0b', ''))\n    c = b[0]\n    d = b[0]\n    for i in range(n):\n        p = b[i] + c\n        q = c + b[i]\n        p = int(p, 2)\n        q = int(q, 2)\n        if abs(p - q) > count:\n            d = b[i]\n            count = abs(p - q)\n    for i in range(n):\n        p = b[i] + d\n        q = d + b[i]\n        p = int(p, 2)\n        q = int(q, 2)\n        if abs(p - q) > count:\n            count = abs(p - q)\n    print(count)", "import math\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "def BinaryConcatenation(X, Y):\n    binX = str(bin(X).replace('0b', ''))\n    binY = str(bin(Y).replace('0b', ''))\n    binXplusY = binX + binY\n    binYplusX = binY + binX\n    XplusY = int(binXplusY, 2)\n    YplusX = int(binYplusX, 2)\n    return abs(XplusY - YplusX)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    L = list(map(int, input().split()))\n    a = -1000000\n    ans = []\n    if n < 500:\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                ans.append(max(a, BinaryConcatenation(L[i], L[j])))\n    else:\n        m = max(L)\n        a = -2147483647\n        for i in L:\n            ans.append(max(m, BinaryConcatenation(i, m)))\n    print(max(ans))", "def countbits(num):\n    cnt = 0\n    while num:\n        num = num // 2\n        cnt += 1\n    return cnt\npo = [1]\nfor i in range(1, 32):\n    po.append(po[-1] * 2)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    mx = [0] * 32\n    mn = [float('inf')] * 32\n    for i in a:\n        l = countbits(i)\n        mx[l] = max(mx[l], i)\n        mn[l] = min(mn[l], i)\n    ans = -1\n    for i in range(32):\n        for j in range(32):\n            x = mx[i]\n            y = mn[j]\n            if x != 0 and y != float('inf'):\n                xminusy = x * (po[j] - 1) - y * (po[i] - 1)\n                ans = max(ans, xminusy)\n    print(ans)", "def countbits(num):\n    cnt = 0\n    while num:\n        num = num // 2\n        cnt += 1\n    return cnt\npo = [1]\nfor i in range(1, 35):\n    po.append(po[-1] * 2)\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().strip().split()))\n    mx = [0] * 32\n    mn = [float('inf')] * 32\n    for i in a:\n        l = countbits(i)\n        mx[l] = max(mx[l], i)\n        mn[l] = min(mn[l], i)\n    ans = -1\n    for i in range(1, 32):\n        for j in range(1, 32):\n            x = mx[i]\n            y = mn[j]\n            if x != 0 and y != float('inf'):\n                xminusy = x * (po[j] - 1) - y * (po[i] - 1)\n                ans = max(ans, xminusy)\n    print(ans)", "import math\nimport sys\nfrom collections import defaultdict\n\ndef bifun(a, b):\n    bx = bin(a)[2:]\n    by = bin(b)[2:]\n    strx = bx + by\n    stry = by + bx\n    dx = int(strx, 2)\n    dy = int(stry, 2)\n    return abs(dx - dy)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = max(arr)\n    max1 = 0\n    if n <= 9:\n        for i in range(0, n):\n            for j in range(i + 1, n):\n                max1 = max(max1, bifun(arr[i], arr[j]))\n        print(max1)\n        continue\n    for i in range(n):\n        max1 = max(max1, bifun(arr[i], temp))\n    print(max1)", "import math\nimport sys\nfrom collections import defaultdict\n\ndef bifun(a, b):\n    bx = bin(a)[2:]\n    by = bin(b)[2:]\n    strx = bx + by\n    stry = by + bx\n    dx = int(strx, 2)\n    dy = int(stry, 2)\n    return abs(dx - dy)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = max(arr)\n    max1 = 0\n    if n <= 10:\n        for i in range(0, n):\n            for j in range(i + 1, n):\n                max1 = max(max1, bifun(arr[i], arr[j]))\n        print(max1)\n        continue\n    for i in range(n):\n        max1 = max(max1, bifun(arr[i], temp))\n    print(max1)", "import math\nimport sys\nfrom collections import defaultdict\n\ndef bifun(a, b):\n    bx = bin(a)[2:]\n    by = bin(b)[2:]\n    strx = bx + by\n    stry = by + bx\n    dx = int(strx, 2)\n    dy = int(stry, 2)\n    return abs(dx - dy)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = max(arr)\n    max1 = 0\n    if n <= 20:\n        for i in range(0, n):\n            for j in range(i + 1, n):\n                max1 = max(max1, bifun(arr[i], arr[j]))\n        print(max1)\n        continue\n    for i in range(n):\n        max1 = max(max1, bifun(arr[i], temp))\n    print(max1)", "import math\nimport sys\nfrom collections import defaultdict\n\ndef bifun(a, b):\n    bx = bin(a)[2:]\n    by = bin(b)[2:]\n    strx = bx + by\n    stry = by + bx\n    dx = int(strx, 2)\n    dy = int(stry, 2)\n    return abs(dx - dy)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = max(arr)\n    max1 = 0\n    if n <= 30:\n        for i in range(0, n):\n            for j in range(i + 1, n):\n                max1 = max(max1, bifun(arr[i], arr[j]))\n        print(max1)\n        continue\n    for i in range(n):\n        max1 = max(max1, bifun(arr[i], temp))\n    print(max1)", "import math\nimport sys\nfrom collections import defaultdict\n\ndef bifun(a, b):\n    bx = bin(a)[2:]\n    by = bin(b)[2:]\n    strx = bx + by\n    stry = by + bx\n    dx = int(strx, 2)\n    dy = int(stry, 2)\n    return abs(dx - dy)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    temp = max(arr)\n    max1 = 0\n    if n <= 100:\n        for i in range(0, n):\n            for j in range(i + 1, n):\n                max1 = max(max1, bifun(arr[i], arr[j]))\n        print(max1)\n        continue\n    for i in range(n):\n        max1 = max(max1, bifun(arr[i], temp))\n    print(max1)", "import math\nfor _ in range(int(input())):\n    n = int(input())\n    ar = list(map(int, input().split()))\n    ans = [[] * i for i in range(30)]\n    for i in range(n):\n        b = bin(ar[i]).replace('0b', '')\n        ans[len(b) - 1].append(ar[i])\n    a = 0\n    for i in range(30):\n        if len(ans[i]) > 0:\n            b1 = bin(max(ans[i])).replace('0b', '')\n            for j in range(30):\n                if len(ans[j]) > 0:\n                    b2 = bin(min(ans[j])).replace('0b', '')\n                    a1 = int(b1 + b2, 2)\n                    a2 = int(b2 + b1, 2)\n                    a = max(a, abs(a2 - a1))\n    print(a)", "from datetime import datetime\nimport numpy\n\nclass dicta(dict):\n\n    def __init__(self, *args, **kwargs):\n        super(dicta, self).__init__(*args, **kwargs)\n        self.__dict__ = self\nSTART_TIME = datetime.now()\n\ndef debug(**kwargs):\n    return\n    diff = str(datetime.now() - START_TIME)\n    for (key, value) in kwargs.items():\n        if isinstance(value, list):\n            print(diff, key + ':')\n            for item in value:\n                print('\\t\\t\\t', item)\n        elif isinstance(value, dict):\n            print(diff, key + ':')\n            for (itemKey, item) in value.items():\n                print('\\t\\t\\t', itemKey + ': ' + str(item))\n        else:\n            print(diff, key + ': ' + str(value))\n\ndef printResult(result):\n    if isinstance(result, list):\n        print(*result)\n    else:\n        print(result)\n\ndef main():\n    debug(status='started')\n    noOfTests = int(input())\n    for i in range(noOfTests):\n        result = runATest(i)\n        if isinstance(result, tuple):\n            for line in result:\n                printResult(line)\n        else:\n            printResult(result)\n        if noOfTests > 1:\n            debug(status='-------------------- finished Test#' + str(i + 1) + ' --------------------')\n    debug(status='finished')\ntwoPow = [2 ** x - 1 for x in range(31)]\n\ndef runATest(_testIndex):\n    count = int(input())\n    npArray = numpy.array([int(x) for x in input().split()])\n    npArray = numpy.sort(npArray)\n    npArray = npArray[::-1]\n    aList = npArray.tolist()\n    bList = [len('{0:b}'.format(x)) for x in aList]\n    markers = []\n    lastLen = 0\n    lastIdx = -1\n    for i in range(count):\n        thisLen = bList[i]\n        if lastLen != thisLen:\n            if i > 0 and lastIdx != i - 1:\n                markers.append((aList[i - 1], lastLen))\n            markers.append((aList[i], thisLen))\n            lastLen = thisLen\n            lastIdx = i\n    if lastIdx != count - 1:\n        markers.append((aList[count - 1], bList[count - 1]))\n    maxValue = 0\n    count = len(markers)\n    for i in range(count):\n        (val1, len1) = markers[i]\n        for j in range(i + 1, count):\n            (val2, len2) = markers[j]\n            diff = abs(val1 * twoPow[len2] - val2 * twoPow[len1])\n            if diff > maxValue:\n                maxValue = diff\n    return maxValue\nmain()", "import sys, io, os, time\nfrom collections import defaultdict\nfrom collections import OrderedDict\nfrom collections import deque\nfrom itertools import combinations\nfrom itertools import permutations\nimport bisect, math, heapq\nalphabet = 'abcdefghijklmnopqrstuvwxyz'\ninput = sys.stdin.readline\nfor ii in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    if n <= 500:\n        ans = 0\n        for i in range(n):\n            for j in range(n):\n                b = bin(arr[i])[2:] + bin(arr[j])[2:]\n                a = bin(arr[j])[2:] + bin(arr[i])[2:]\n                ans = max(ans, abs(int(a, 2) - int(b, 2)))\n        print(ans)\n    else:\n        maxe = bin(max(arr))[2:]\n        ans = 0\n        for i in range(n):\n            a = maxe + bin(arr[i])[2:]\n            b = bin(arr[i])[2:] + maxe\n            ans = max(ans, abs(int(a, 2) - int(b, 2)))\n        print(ans)", "def bc(x, y):\n    binx = bin(x).replace('0b', '')\n    biny = bin(y).replace('0b', '')\n    return int(binx + biny, 2) - int(biny + binx, 2)\n\ndef large(A, n):\n    A.sort()\n    m = -99999999999\n    for i in range(n - 1):\n        mx = abs(bc(A[i], A[n - 1]))\n        if mx > m:\n            m = mx\n    print(m)\n\ndef small(A, n):\n    m = -99999999999\n    for i in range(n - 1):\n        for j in range(i, n):\n            if i != j:\n                b = abs(bc(A[i], A[j]))\n                if b > m:\n                    m = b\n    print(m)\nfor TC in range(int(input())):\n    n = int(input())\n    A = list(map(int, input().split()))\n    if n >= 1000:\n        large(A, n)\n    else:\n        small(A, n)", "from math import log2 as ln\nfor t in range(int(input())):\n    N = int(input())\n    arr = list(map(int, input().split()))\n    a = []\n    for i in range(30):\n        a.append([])\n    for i in arr:\n        val = int(ln(i))\n        a[val].append(i)\n    maxval = 0\n    l = len(a)\n    for i in range(l):\n        if len(a[i]) > 0:\n            for j in range(l):\n                if len(a[j]) > 0:\n                    x = max(a[i])\n                    y = min(a[j])\n                    val = 2 ** (j + 1) * x + y - (2 ** (i + 1) * y + x)\n                    if val > maxval:\n                        maxval = val\n    print(maxval)", "def dtb(n):\n    return bin(n).replace('0b', '')\n\ndef ans1(n, lst):\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            x = lst[i]\n            y = lst[j]\n            binx = dtb(x)\n            biny = dtb(y)\n            bfx = '0b' + binx + biny\n            bfy = '0b' + biny + binx\n            temp = abs(int(bfx, 2) - int(bfy, 2))\n            if temp >= res:\n                res = temp\n    return res\n\ndef ans2(n, lst):\n    res = 0\n    for i in range(n):\n        x = lst[i]\n        y = lst[n - 1]\n        binx = dtb(x)\n        biny = dtb(y)\n        bfx = '0b' + binx + biny\n        bfy = '0b' + biny + binx\n        temp = abs(int(bfx, 2) - int(bfy, 2))\n        if temp >= res:\n            res = temp\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    if n < 1000:\n        print(ans1(n, lst))\n    else:\n        print(ans2(n, lst))", "def dtb(n):\n    return bin(n).replace('0b', '')\n\ndef ans1(n, lst):\n    res = 0\n    for i in range(n):\n        for j in range(i, n):\n            x = lst[i]\n            y = lst[j]\n            binx = dtb(x)\n            biny = dtb(y)\n            bfx = '0b' + binx + biny\n            bfy = '0b' + biny + binx\n            temp = abs(int(bfx, 2) - int(bfy, 2))\n            if temp >= res:\n                res = temp\n    return res\n\ndef ans2(n, lst):\n    res = 0\n    for i in range(n):\n        x = lst[i]\n        y = lst[n - 1]\n        binx = dtb(x)\n        biny = dtb(y)\n        bfx = '0b' + binx + biny\n        bfy = '0b' + biny + binx\n        temp = abs(int(bfx, 2) - int(bfy, 2))\n        if temp >= res:\n            res = temp\n    return res\nfor _ in range(int(input())):\n    n = int(input())\n    lst = list(map(int, input().split()))\n    lst.sort()\n    if n < 1000:\n        print(ans1(n, lst))\n    else:\n        print(ans2(n, lst))", "import math\nimport sys\ninput = sys.stdin.readline\n\ndef calc(i, j):\n    s1 = bin(i).replace('0b', '')\n    s2 = bin(j).replace('0b', '')\n    s3 = int(s1 + s2, 2)\n    s4 = int(s2 + s1, 2)\n    return abs(s3 - s4)\nfor _ in range(int(input())):\n    n = int(input())\n    L = list(map(int, input().split()))\n    L.sort()\n    MAX = 0\n    if n < 1000:\n        for i in range(n):\n            for j in range(i + 1, n):\n                MAX = max(MAX, calc(L[i], L[j]))\n        print(MAX)\n        continue\n    MAX = 0\n    j = L.pop(-1)\n    for i in range(n - 1):\n        MAX = max(MAX, calc(L[i], j))\n    print(MAX)", "t = int(input())\nwhile t > 0:\n    t -= 1\n    n = int(input())\n    arr = list(map(int, input().strip().split(' ')))\n    dp = []\n    for i in range(31):\n        k = []\n        dp.append(k)\n    for num in arr:\n        for j in range(30, -1, -1):\n            temp = 1 << j\n            if temp & num:\n                dp[j].append(num)\n                break\n    ans = 0\n    for a in dp:\n        a.sort()\n    for i in range(31):\n        if dp[i]:\n            for j in range(31):\n                if dp[j]:\n                    l = dp[i][-1]\n                    x = l << j + 1\n                    r = dp[j][0]\n                    y = r << i + 1\n                    a1 = x + r\n                    a2 = y + l\n                    ans = max(ans, abs(a1 - a2))\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    max_bit = [0] * 32\n    min_bit = [10 ** 9] * 32\n    for i in range(n):\n        b = len(bin(a[i])) - 2\n        max_bit[b] = max(max_bit[b], a[i])\n        min_bit[b] = min(min_bit[b], a[i])\n    ans = -1\n    for i in range(1, 32):\n        for j in range(1, 32):\n            X = max_bit[i]\n            Y = min_bit[j]\n            if X == 0 or Y == 10 ** 9:\n                continue\n            else:\n                d = X * (2 ** j - 1) - Y * (2 ** i - 1)\n                ans = max(ans, d)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    max_bit = [0] * 32\n    min_bit = [10 ** 9] * 32\n    for i in range(n):\n        b = len(bin(a[i])) - 2\n        max_bit[b] = max(max_bit[b], a[i])\n        min_bit[b] = min(min_bit[b], a[i])\n    ans = -1\n    pw = []\n    pw.append(1)\n    for i in range(1, 35):\n        k = pw[i - 1] * 2\n        pw.append(k)\n    for i in range(1, 32):\n        for j in range(1, 32):\n            X = max_bit[i]\n            Y = min_bit[j]\n            if X == 0 or Y == 10 ** 9:\n                continue\n            else:\n                d = X * (2 ** j - 1) - Y * (2 ** i - 1)\n                ans = max(ans, d)\n    print(ans)", "for _ in range(int(input())):\n    n = int(input())\n    a = [int(i) for i in input().split()]\n    max_bit = [0] * 32\n    min_bit = [10 ** 9] * 32\n    for i in range(n):\n        b = len(bin(a[i])) - 2\n        max_bit[b] = max(max_bit[b], a[i])\n        min_bit[b] = min(min_bit[b], a[i])\n    ans = -1\n    pw = []\n    pw.append(1)\n    for i in range(1, 35):\n        k = pw[i - 1] * 2\n        pw.append(k)\n    for i in range(1, 32):\n        for j in range(1, 32):\n            X = max_bit[i]\n            Y = min_bit[j]\n            if X == 0 or Y == 10 ** 9:\n                continue\n            else:\n                d = X * (pw[j] - 1) - Y * (pw[i] - 1)\n                ans = max(ans, d)\n    print(ans)", "def BinConcatenation(a, b):\n    (a, b) = (str(bin(a)[2:]), str(bin(b)[2:]))\n    (binaplusb, binbplusa) = (a + b, b + a)\n    (intaplusb, intbplusa) = (int(binaplusb, 2), int(binbplusa, 2))\n    return abs(intaplusb - intbplusa)\nfor _ in range(int(input())):\n    n = int(input())\n    arr = list(map(int, input().split()))\n    res = []\n    if len(arr) < 501:\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                res.append(BinConcatenation(arr[i], arr[j]))\n        print(max(res))\n    else:\n        (val, max_arr) = (0, max(arr))\n        for i in range(len(arr)):\n            res.append(BinConcatenation(max_arr, arr[i]))\n        print(max(res))", "from itertools import permutations\nfor t in range(int(input())):\n    n = int(input())\n    l = [int(x) for x in input().split()]\n    if n < 1000:\n        c = [x for x in permutations(l, 2)]\n        a = []\n        for x in c:\n            binx = bin(x[0])[2:]\n            biny = bin(x[1])[2:]\n            bxpy = binx + biny\n            bypx = biny + binx\n            xpy = int(bxpy, 2)\n            ypx = int(bypx, 2)\n            if xpy > ypx:\n                a.append(xpy - ypx)\n        print(max(a))\n    else:\n        l.sort()\n        m = max(l)\n        binx = bin(m)[2:]\n        a = 0\n        for i in range(n - 2, -1, -1):\n            biny = bin(l[i])[2:]\n            xpy = int(binx + biny, 2)\n            ypx = int(biny + binx, 2)\n            res = abs(xpy - ypx)\n            if res > a:\n                a = res\n        print(a)", "from math import *\n\ndef binp(k, m):\n    x = '{0:b}'.format(k)\n    y = '{0:b}'.format(m)\n    p = x + y\n    q = y + x\n    am = int(p, 2)\n    an = int(q, 2)\n    ans = abs(am - an)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    arr = []\n    for i in range(1, n):\n        x = binp(a[i], a[0])\n        arr.append(x)\n    for i in range(n):\n        x = binp(a[i], a[1])\n        arr.append(x)\n    ax = max(arr)\n    print(ax)", "import math\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "INF = float('inf')\n\ndef f(x, y):\n    return abs(int(bin(x)[2:] + bin(y)[2:], 2) - int(bin(y)[2:] + bin(x)[2:], 2))\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    d = {}\n    for i in a:\n        l = len(bin(i)[2:])\n        d[l] = d.get(l, [INF, -INF])\n        if i < d[l][0]:\n            d[l][0] = i\n        if i > d[l][1]:\n            d[l][1] = i\n    m = 0\n    for i in d.keys():\n        for j in d.keys():\n            m = max(m, f(d[i][0], d[j][1]), f(d[i][1], d[j][0]))\n    print(m)", "from math import *\n\ndef binp(k, m):\n    x = '{0:b}'.format(k)\n    y = '{0:b}'.format(m)\n    p = x + y\n    q = y + x\n    am = int(p, 2)\n    an = int(q, 2)\n    ans = abs(am - an)\n    return ans\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = list(map(int, input().split()))\n    a.sort(reverse=True)\n    arr = []\n    for i in range(1, n):\n        x = binp(a[i], a[0])\n        arr.append(x)\n    for i in range(n):\n        x = binp(a[i], a[1])\n        arr.append(x)\n    ax = max(arr)\n    print(ax)", "def binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "def strbin(x, y):\n    binx = '{0:b}'.format(x)\n    biny = '{0:b}'.format(y)\n    xplusy = binx + biny\n    yplusx = biny + binx\n    return abs(int(xplusy, 2) - int(yplusx, 2))\nfor i in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    if n == 1:\n        b.append(a[0])\n    else:\n        a.sort()\n        if n >= 10 ** 3:\n            for i in range(n - 1):\n                b.append(strbin(a[n - 1], a[i]))\n        else:\n            for i in range(n):\n                for j in range(n):\n                    if i == j:\n                        continue\n                    else:\n                        b.append(strbin(a[i], a[j]))\n    print(max(b))", "def conc(a, b):\n    a1 = bin(a).replace('0b', '')\n    b1 = bin(b).replace('0b', '')\n    a1plusb1 = str(a1) + str(b1)\n    a1subb1 = str(b1) + str(a1)\n    a11 = int(a1plusb1, 2)\n    b11 = int(a1subb1, 2)\n    return a11 - b11\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    tmp = max(a)\n    if n < 500:\n        for i in range(n):\n            for j in range(n):\n                b.append(conc(a[i], a[j]))\n        print(max(b))\n    else:\n        for i in range(n):\n            b.append(conc(tmp, a[i]))\n        print(max(b))", "def conc(a, b):\n    a1 = bin(a).replace('0b', '')\n    b1 = bin(b).replace('0b', '')\n    a1plusb1 = str(a1) + str(b1)\n    a1subb1 = str(b1) + str(a1)\n    a11 = int(a1plusb1, 2)\n    b11 = int(a1subb1, 2)\n    return a11 - b11\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    tmp = max(a)\n    if n < 100:\n        for i in range(n):\n            for j in range(n):\n                b.append(conc(a[i], a[j]))\n        print(max(b))\n    else:\n        for i in range(n):\n            b.append(conc(tmp, a[i]))\n        print(max(b))", "def conc(a, b):\n    a1 = bin(a).replace('0b', '')\n    b1 = bin(b).replace('0b', '')\n    a1plusb1 = str(a1) + str(b1)\n    a1subb1 = str(b1) + str(a1)\n    a11 = int(a1plusb1, 2)\n    b11 = int(a1subb1, 2)\n    return a11 - b11\nfor _ in range(int(input())):\n    n = int(input())\n    a = list(map(int, input().split()))\n    b = []\n    tmp = max(a)\n    if n < 500:\n        for i in range(n):\n            for j in range(n):\n                b.append(conc(a[i], a[j]))\n        print(max(b))\n    else:\n        for i in range(n):\n            b.append(conc(tmp, a[i]))\n        print(max(b))", "import math\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return abs(n1 - n2)\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(i, n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "import math\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "import math\nfrom collections import defaultdict\n\ndef binconcat(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    binc = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                binc.append(binconcat(a[i], a[j]))\n        print(max(binc))\n    else:\n        ans = 0\n        tmp = max(a)\n        for x in range(n):\n            binc.append(binconcat(tmp, a[x]))\n        print(max(binc))", "import math\n\ndef binconcation(a, b):\n    abin = bin(a).replace('0b', '')\n    bbin = bin(b).replace('0b', '')\n    apb = str(abin) + str(bbin)\n    bpa = str(bbin) + str(abin)\n    n1 = int(apb, 2)\n    n2 = int(bpa, 2)\n    return n1 - n2\nt = int(input())\nfor _ in range(t):\n    n = int(input())\n    a = [int(x) for x in input().split()]\n    ans = []\n    if n <= 500:\n        for i in range(n):\n            for j in range(n):\n                ans.append(binconcation(a[i], a[j]))\n        print(max(ans))\n    else:\n        tmp = max(a)\n        for x in range(n):\n            ans.append(binconcation(tmp, a[x]))\n        print(max(ans))"]